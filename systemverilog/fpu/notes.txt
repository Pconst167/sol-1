SQRT: NEWTON-RAPHSON
  xn = 0.5(xn + A/xn)

DOT PRODUCT:
  a dot b 
  = a0b0 + a1b1 + ... + anbn 
  = |a||b|cos(arg(a,b))

CROSS PRODUCT:
  a cross b 
  = (a2b3 - a3b2)i + (a3b1 - a1b3)j + (a1b2 - a2b1)k
  = |a||b|sin(arg(a,b))n where n is the unit vector normal to both a & b

APPROXIMATING LOG2:
  take exponent - 127 as starting point. exponent is the approximate log2
  because mantissa is < 1, log of mantissa is approximately equal to the mantissa itself plus a constant sigma = 0.0430357.
  hence an aproximation is (exponent - 127) + mantissa + sigma.
  log(x) = log((1+m)2^e) = e + 1 + m = e + m + sigma

INTEGER TO FLOAT:
  exponent = 31 - #leading zeroes.
  mantissa placed on msb side with leading 1 removed

FLOAT TO INTEGER:
  if exponent < 0, return 0
  else truncate the number 1.mantissa after #exponent places and that is the integer
  example: 1.1101010 * 2^3 = 1110. 

OPERATIONS:
  add
  sub
  mul
  div
  sqrt
  log2

  1/a
  int2float
  float2int

TRIGONOMETRIC FUNCTIONS:

Slow converging series. Look at chebyshev polynomials.
  sin(x)    = x - x^3/3! + x^5/5! - x^7/7! + ...
  cos(x)    = 1 - x^2/2 + x^4/4! - x^6/6! + ...
  exp(x)    = 1 + x + x^2/2 + x^3/3! + x^4/4! + x^5/5! + ...
  ln(1+x)   = x - x^2/2 + x^3/3 - x^4/4 + x^5/5 - ...  (|x| < 1)
  arctan(x) = x - x^3/3 + x^5/5 - x^7/7 + ... (slow convergence)

CHEBYSHEV POLYNOMIALS:
  Tn   = cos(nx)
  Tn+1 = 2xTn - Tn-1
  T0 = 1, T1 = x, T2 = 2x^2-1, T3 = 4x^3 - 3x, T4 = 8x^4 - 8x^2 + 1

CHEBYSHEV APPROXIMATIONS
  f           range        c0         c1          c2           c3            c4             c5
  sinπx       [-0.5,0.5]   0	        1.1336	    0           -0.13807	     0	            0.0045584
  cosπx       [-0.5,0.5]   0.472	    0	         -0.4994	     0	           0.027985	      0
  sqrt        [1,4]	       1.542	    0.49296    -0.040488	   0.0066968	  -0.0013836	    0.00030211
  log2        [1,2]	       0.54311	  0.49505	   -0.042469	   0.0048576	  -0.00062481	    8.3994e-05
  exp         [0,1]	       1.7534	    0.85039	    0.10521	     0.0087221	   0.00054344	    2.7075e-05
  (2/π)*atan  [-1,1]	     0	        0.5274	    0	          -0.030213	     0	            0.0034855

OBSERVATIONS:
if any number is NAN, then the result is also set to NAN, not only that, but it is set to be a copy of the first 
NAN operand. so if operand_a is NAN, the result is set to operand_a, and vice versa. this is done so that NAN information is kept and propagated.

SUBNORMAL ADDITION/SUBTRACTION:
  - addition:
    normal    + normal    : can be normal, subnormal, zero, or infinity.
    normal    + subnormal : can be normal or subnormal.
    subnormal + subnormal : can be normal or subnormal (or zero).
    normal    - normal    : can be normal, subnormal, or zero.
    normal    - subnormal : can be normal or subnormal.
    subnormal - subnormal : can be subnormal or zero.
  - process
    1) check for either operand being subnormal
    2) if subnormal set effective exponent to -126
    3) adjust subnormals exponent by shifting subnormal's mantissa right, and increaing its exponent 
      (as is usually done, the smaller exponent gets incremented by the difference, and since a subnormal has the
      smallest possible exponent, ITS exponent gets incremented as opposed to the normal number's)
    3) perform operation
    4) check if normalization would generate a subnormal
    5) if so, generate the subnormal and finish
    6) if not, then normalize as is normally done


SUBNORMAL MULTIPLICATION:

SUBNORMAL DIVISION: