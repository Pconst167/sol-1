5.25" FLOPPY, 360KB, 2 SIDES, 40 TRKS, 9 SECTORS


During the Command or Result phases, the Main
Status Register must be read by the processor
before each byte of information is written into or
read from the Data Register. After each byte of
data is read from or written into the Data Register,
the CPU waits for 12us before reading the Main
Status Register. BitsD6 and D7 in the Main
Status Register must be in a 0 and 1 state,
respectively, before each byte of the command
word may be written into the WD37C65C. Many of
the commands require multiple bytes. As a result,
the Main Status Register must be read prior to
each byte transfer to the WD37C65C. During the
Result phase, Bits D6 and D7 in the Main Status
Register must both be 1's (D6=1 and D!=1)
before reading each byte from the Data Register.
Note that this reading of the Main Status Register
before each byte transfer to the WD37C65C is
required only in the Command and Result
phases, and not during the Execution phase.

Note that in PC AT usage, non-DMA Host trans-
fers are not the normal procedure. If the user
chooses to do so, the WD37C65C will successfully 
complete commands, but will always give ab-
normal termination error status since TC is
qualified by an inactive DACK.

If the non-DMA mode is
chosen, the DACK signal should be pulled up to
Vcc.

Note that during the Result phase all bytes
shown in the Command Table must be read. The
Read Data Command, for example, has several
bytes of data in the Result phase. All seven bytes
must be read in order to successfully complete
the Read Data command. The WD37C65C will
not accept a new command until all seven bytes
have been read. Other commands may require
fewer bytes to be read during the Result phase.

The WD37C65C contains five Status Registers.
The Main Status Register mentioned may be read
by the processor at any time. The other four
Status Registers (STO, ST1, ST2, and ST3) are
available only during the Result phase and may
be read only afler completing a command. The ~
particular command that has been executed . .
determines how many of the Status Registers will
be read.

The bytes of data which are sent to the
WD37C65C to form the Command phase, and are
read out of the WD37C65C in the Result phase,
must occur in the order shown in the Command
Table. The command code must be sent first and
the other bytes sent in the prescribed sequence.
No foreshortening of the Command or Result
phases is allowed. After the last byte of data in the
Command phase is sent to the WD37C65C, the
Execution phase automatically starts. In a similar
fashion, when the last byte of data is read out in
the Result phase, the command is automatically
ended and the WD37C65C is ready for a new
command.


--------------- READ A SECTOR
Once the controller and drive have been reset, you can now issue commands.
To read a sector from the drive, you need to

1. issue a seek track command (function 0x0F of controller)
2. initialize the DMA chip. (Not covered in this tutorial. but the floppy
   controller used channel 2.)
3. wait (delay the driver for) head_settle_time specified in the floppy
   parameter table described above.
4. write read sector command (function 0x66) to the controller
5. write the value of ((head*4)|drive) to the controller
6. write the value of the desired cylinder to be read to the controller
7. write the value of the desired head to be read to the controller
8. write the value of the desired sector to be read to the controller
9. write value of bytes_per_sector specified in the floppy parameter table to the controller
10.write value of sectors_per_track specified in the floppy parameter table to the controller
11.write value of gap_length specified in the floppy parameter table to the controller
12.write value of data_length specified in the floppy parameter table to the controller
   At this point the controller will start to read the sector,so you have to wait
   for it to finish, which is will signal by an interrupt.
13.wait for interrupt from controller
14.check interrupt status
15.read the result bytes sent by the controller




--------------- SOME NOTES FOUND ON GITHUB FOR Z80 AND 8080


--------------- BYTES PER SECTOR
ENCODED AS:
0 = 128
1 = 256
2 = 512
3 = 1024


VALID FORMATS
--------------- 5 1/4 INCH

FM
SIZ  SC   GPL1 GPL2,3
128  12H  07H  09H
128  10H  10H  19H
256  08H  18H  30H
512  04H  46H  87H
1024 02H  C8H  FFH
2048 01H  C8H  FFH

MFM
SIZ  SC   GPL1 GPL2,3
256  12H  0AH  0CH
256  10H  20H  32H
512  08H  2AH  50H
1024 04H  80H  F0H
2048 02H  C8H  FFH
4096 01H  C8H  FFH


--------------- 3.5 INCH

FM
SIZ  SC   GPL1 GPL2,3
128  0FH  07H  1BH
256  09H  0EH  2AH
512  08H  2AH  50H

MFM
SIZ  SC   GPL1 GPL2,3
256  0FH  0EH  36H
512  09H  1BH  54H
1024 05H  35H  74H


--------------- PORTS

FDCMSR  EQU     50H
FDCDAT  EQU     51H
* DOR BITS
* 0=DRIVE SEL
* 1=N/A
* 2=/SOFT RESET
* 3=DMA EN
* 4=MOTOR 1 ENABLE
* 5=MOTOR 2 ENABLE
* 6=N/A
* 7=MODE SEL (WHEN /SOFT RESET) 1=SPECIAL 0=PC AT
FDCDOR  EQU     58H
* CCR CONTROL REGISTER
* 0=500K/250K IN PC/AT MODE
* 1=250K IF DRV=0/300K IF DRV=1 (JUMPER SELECT)
* 2=250K MFM/125K FM
* 3=125K FM
FDCCCR  EQU     48H


--------------- SELECT DRIVE 0
DRV1ON  EQU     $
        MVI     A,00110100B
        OUT     FDCDOR

*SELECT DRIVE 1
DRV2ON  EQU     $
        MVI     A,00110101B
        OUT     FDCDOR

*DRIVES OFF
DRVOFF  EQU     $
        MVI     A,00000101B
        OUT     FDCDOR




--------------- SEEK TO TRACK 0
* COMMAND BYTES TO SEEK TO TRACK 0 (RECALIBRATE)
* [COMMAND BYTES TO SEND],[COMMAND BYTE 1],[COMMAND BYTE 2],[EXPECTED RESULT BYTES]
CMDTRK0 DB      02H,07H,00H,00H
*
SEEK0   EQU     $
        LXI     H,CMDTRK0
        CALL    SNDCMD
        RET

--------------- READ TRACK ID
*
CMDRDID DB      02H,4AH,00H,07H
* RESULT=ST0,ST1,ST2,CYL,SIDE,SEC,BYTES_PER_SEC
READID  EQU     $
        LXI     H,CMDRDID
        CALL    SNDCMD
        XRA     A
        RET


--------------- READ ENTIRE TRACK
*                        DR  C   H   R   N  EOT GPL DTL RES
CMDRDTR DB      09H,42H,00H,00H,00H,00H,01H,10H,32H,00H,07H
* READ A TRACK
READTR  EQU     $
        LDA     CURHED  ; 0=SIDE 0, 1=SIDE 1
        STA     CMDRDTR+4
        RAL             ; IF SIDE=1 THEN MAKE IT 0000.0100
        RAL             ; AND ADD TO DRIVE BITS
        MOV     C,A
        LDA     ACTDRV  ; 0=NO DRIVE,1=DRIVE 1, 2=DRIVE 2
        DCR     A       ; MAKE DRIVE 0 THRU 3
        ORA     C       ; ADD IN SIDE BIT
        STA     CMDRDTR+2
        LDA     CURCYL  ; SET UP CYLINDER TO READ
        STA     CMDRDTR+3
        XRA     A       ; STARTING SECTOR
        STA     CMDRDTR+5
        LDA     CURSIZ  ; 0=128,1=256,2=512,3=1024
        STA     CMDRDTR+6
        MVI     A,10H   ; LAST SECTOR TO READ
        STA     CMDRDTR+7
        LXI     H,CMDRDTR
        CALL    SNDCMD  ; SEND READ TRACK CMD
* ON RETURN DATSIZ=COUNT OF BYTES READ AND DATBUF=CONTENTS
        XRA     A
        RET
*
ACTDRV  DB      0
CURCYL  DB      0
CURSEC  DB      0
CURHED  DB      0       ; 0=SIDE 1,1=SIDE 2
CURSIZ  DB      0       ; 0=128,1=256,2=512,3=1024

--------------- FORMAT TRACK

* COMMAND BYTES TO FORMAT A TRACK - SOME CMD BYTES ARE FILLED IN BELOW
* BYTES TO SEND,CMD BYTE 1,CMD BYTE 2,CMD BYTE 3,CMD BYTE 4,CMD BYTE 5,CMD BYTE 6,RES BYTES EXPECTED
FMTTRK  DB      06H,4DH,00H,01H,10H,32H,0E5H,07H
*
FORMAT  EQU     $
        LXI     H,DATBUF
        MVI     C,12H   ; SECTORS TO FORMAT (18 IN THIS EXAMPLE)
        MVI     B,1     ; STARTING SECTOR
FMTRKL  EQU     $
* PREPARE BUFFER
        LDA     CURCYL  ; TRACK TO FORMAT
        MOV     M,A
        INX     H
        MVI     M,0     ; SIDE
        INX     H
        MOV     M,B     ; SECTOR NUMBER
        INX     H
        INR     B       ; ADVANCE TO NEXT SECTOR
        MVI     M,1     ; 1=256 BYTES PER SECTOR
        INX     H
        DCR     C
        JNZ     FMTRKL  ; LOOP UNTIL ALL SECTORS DONE
* BUFFER READY - SEND TO FLOPPY CONTROLLER
* DATBUF IS THE PREPARED BUFFER - REFERENCED IN HDLEXEC
        LXI     H,FMTTRK
        CALL    SNDCMD
        RET

--------------- SEND COMMAND TO FDC
* SEND COMMAND TO FDC
SNDCMD  EQU     $
        MOV     C,M     ; BYTES TO SEND
        INX     H
SNDCMD1 EQU     $
        IN      FDCMSR
        ANI     080H
        JZ      SNDCMD1 ; LOOP UNTIL READY
        MOV     A,M     ; CMD BYTE
        INX     H
        OUT     FDCDAT
        DCR     C
        JNZ     SNDCMD1
        MOV     A,M     ; RESULT BYTES
        ORA     A
        RZ              ; RETURN IF NO BYTES EXPECTED
* IF BYTES EXPECTED THEN ENTER EXEC PHASE FOLLOWED BY RESULTS PHASE
SCWT    EQU     $       ; WAIT FOR READY
        IN      FDCMSR
        ANI     080H
        JZ      SCWT


--------------- EXEC PHASE
* HANDLE EXEC PHASE
        DI              ; MAKE SURE NO INTERRUPTIONS
HDLEXEC EQU     $
        LXI     H,0000H
        SHLD    DATSIZ
        LXI     D,0000H
        LXI     H,DATBUF
HDLEXE0 EQU     $
        IN      FDCMSR
        CPI     0F0H
        JZ      SCRD    ; GO READ BYTE
        CPI     0B0H
        JZ      SCWR    ; GO WRITE BYTE
        ANI     020H    ; EXECUTION PHASE DONE?
        JNZ     HDLEXE0 ; NO KEEP GOING
        JMP     HDLRES  ; ELSE JUMP TO RESULTS PHASE
* WRITE TO FDC
SCWR    EQU     $
        MOV     A,M     ; CPU TO FDC
        OUT     FDCDAT
        INX     H
        INX     D       ; BYTES WRITTEN
        JMP     HDLEXE0
* READ FROM FDC
SCRD    EQU $
        IN      FDCDAT
        MOV     M,A
        INX     H
        INX     D       ; BYTES READ
        JMP     HDLEXE0
* DATA BUFFER BYTES
DATSIZ  DW      0
* PUT THIS AT THE END OF THE FILE SO ALL REMAINING
* ..RAM IS USED AS A DATA BUFFER
* BUFFER TO STORE BYTES FROM/TO FDC
DATBUF  EQU     $


--------------- RESULT PHASE
* HANDLE RESULT PHASE
HDLRES  EQU     $
        XCHG
        SHLD    DATSIZ  ; SAVE BYTES WRITTEN/READ
        LXI     H,CMDRES
HDLRES0 EQU     $
        IN      FDCMSR
        ANI     0F0H
        CPI     0D0H    ; RQM=1,DIO=1,BUSY=1
        JZ      HDLRES1
        CPI     080H    ; DONE?
        JNZ     HDLRES0
        EI              ; RESULTS DONE RE-ENABLE INTERRUPTS
        XRA     A
        RET
HDLRES1 EQU     $
        IN      FDCDAT  ; READ RESULT BYTE
        MOV     M,A     ; STORE IN RESULT BUFFER
        INX     H
        JMP     HDLRES0
* RESERVE 8 BYTES FOR RESULTS
CMDRES  DB      0,0,0,0,0,0,0,0








e-mail from Wayne from romWBW:
Hi Paulo,

I am happy to help.  Your question is kind of broad, so I will answer your current questions, but you will probably have more as you progress.

On Sun, Jul 21, 2024 at 4:46 PM Paulo Constantino <pconst167@gmail.com> wrote:
I am confused about how to deal with the TC, and DMA signals from the
chip as I won't be using DMA for using the chip.

You can use the chip in polled mode and ignore the DMA signal.  In my code, I do not use it.  Since it is an input signal, you should probably attach it to a pull-up so it does not float.

The TC signal can be used to terminate an FDC command.  This signal is not really necessary if you program the FDC to stop after reading a sector.  I do not use TC in my code.  I think you would ground that input to avoid leaving is floating.

Did you not have problems with the z80 being too slow to read/write
data before the head moves on?

Well, yes.  In polled mode operation, you do need to make sure the Z80 code loop is optimized to avoid missing data.  In my code, the loop is fast enough to handle double-density disks with a 4 MHz Z80 and high-density disks with an 8 MHz Z80.  The loop could be made to run faster, but I opted to include a timeout mechanism to ensure my code never stalls if the FDC fails to respond.

Would you let me see your assembly code for dealing with the chip?

Of course.  My code is available to all.  It is hosted at the RomWBW GitHub site at https://github.com/wwarthen/RomWBW.  There are two files you can refer to.  First, there is a stand-alone program for "testing" floppy disks via several different interfaces.  This program is found in the /Source/Apps/FDU folder of the repository.  Second, there is a floppy driver that is used by RomWBW for CP/M, etc.  This is found in the repository at /Source/HBIOS/fd.asm.

I hope this helps.

Thanks,

Wayne
--------------------------------------------------------------------------------------
On Sun, Jul 21, 2024 at 6:40 PM Paulo Constantino <pconst167@gmail.com> wrote:
May I ask you if you used the WD37C65 in your code? or only the 8272?

Yes.
 
I tried to find a reference in the code
for the WD37C65 but i don't see it.

In FDU.ASM, the FDC_ZETA2, FDC_DIDE, FDC_N8, and FDC_RCWDC are all based on the WD37C65.  This corresponds to the _PCAT equate in the source code.

Do you think the 8272 is easier to deal with than the WD one? I am
looking for the chip which will have less overhead
and will use the least amount of support logic..

No, the 8272 is actually much harder because it does not have an integrated data separator.  The WD37C65 is definitely the best choice.  Sergey Kiselev's Flock FDC module for the RC2014 is a very good example of an implementation of the WD37C65.  Documentation including schematics is found at https://github.com/skiselev/flock-v2.

Thanks,

Wayne



--------------------------------------------------------------

Some guy says:
Also, check out the National 8473, and the SMC37C65x family. A second
source for the WD37C65 is Goldstar, who made a pin compatible version.


I don't reccomend the 37C65 as it requires some nasty components; two
sryctals, one of which is an odball freq., and four silver/mica caps.
Also, you need to put 100ohm resistors in series with the TC, and IRQ
lines that drive the bus. These pins have 48ma drivers on them, and
they generate a LOT of ground bounce.

The National part uses a single 24 mhz cyrstal, or oscillator module,
and only a couple of simple crystals. The National part is also pin
compatible with the Intel part. I think the old Intel part # was 8277?

For new parts, I would use the National 8477, or the Intel 82077AA,
THese parts can handle the new 2.88mb floppy drives that never quite
got popular. They can also do perpendicular recording.

Response:
The crystals are 9.6mhz (only needed for 1.2mb floppies) not that odd
and 16mhz a standards freq.

The two silver micas? what for I have the data sheet and there is no
requirement for them unless you talking about the oscillator
components for the 44pin flatpack.

The 48mA drie however is normal of all the floppy controllers that
have a direct bus interface for PCs.