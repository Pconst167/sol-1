
	The FDC uses command bytes that follow a specific format. These are sent to the FDC in order to configure
	it for a read or write operation. The exact bit format depends on the command.
	<p/>
	<b>Upon a controller reset, most FDC's will default to the original 8272A operating mode. Newer
	features are selected either by a hardware signal or command.</b> This is controller specific.
	Because of this, we will not be covering it here. However you can always look for the controller's
	specific data sheet for information. Thanks to the controllers compatability, most of what we cover
	here will still work with other FDC's.

	<p/>
	Do to the specific format of certain commands, each of the following command tables lists the
	specific format of the command. These commands also contain <i>optional</i> bits that need to
	be set with the command byte. This allows you to control these optional paramaters with each and
	every command.
	<p/>
	Here are the commands. You will notice that there are four general types of commands.

	<p/>
	<center>
	<table border=1>
	<th bgcolor="#aaaaaa" colspan=2>Floppy Disk Controller Commands</th>
	<tr bgcolor="#cccccc"><td>Command</td><td>Bit format (bit 7..bit 0)</td></tr>
	<tr bgcolor="#cccccc"><td colspan=2>Type 1: Read/Write Head Move Commands</td></tr>
	<tr><td bgcolor="#cccccc">Restore</td><td>0 0 0 0 h V r1 r0</td></tr>
	<tr><td bgcolor="#cccccc">Seek</td><td>0 0 0 1 h V r1 r0</td></tr>
	<tr><td bgcolor="#cccccc">Step</td><td>0 0 1 u h V r1 r0</td></tr>
	<tr><td bgcolor="#cccccc">Step In</td><td>0 1 0 u h V r1 r0</td></tr>
	<tr><td bgcolor="#cccccc">Step Out</td><td>0 1 1 u h V r r0</td></tr>
	<tr bgcolor="#cccccc"><td colspan=2>Type 2: Read/Write Sector Commands</td></tr>
	<tr><td bgcolor="#cccccc">Read Sector</td><td>1 0 0 m h E 0 0</td></tr>
	<tr><td bgcolor="#cccccc">Write Sector</td><td>1 0 1 m h E P a0</td></tr>
	<tr bgcolor="#cccccc"><td colspan=2>Type 3:Read/Write Tracks, ID marks, Track Formatting Commands</td></tr>
	<tr><td bgcolor="#cccccc">Read Address</td><td>1 1 0 0 h E 0 0</td></tr>
	<tr><td bgcolor="#cccccc">Read Track</td><td>1 1 1 0 h E 0 0</td></tr>
	<tr><td bgcolor="#cccccc">Write Track</td><td>1 1 1 1 h E P 0</td></tr>
	<tr bgcolor="#cccccc"><td colspan=2>Type 4: Force Interrupts</td></tr>
	<tr><td bgcolor="#cccccc">Force Interrupt</td><td>1 1 0 1 I3 I2 I1 I0</td></tr>
	</table>
	</center><p/>

	Okay.. this is not as complex as it looks :) You will see several varables in the above
	table. These are the optinal bits that must be set on a per command basis. Lets look at
	these bits, shall we? We will then take a closer look at all of the commands that we
	can use when programming the FDC.

	<ul>
	<li><b>Bit h</b> - Motor On Flag</li>
	<ul>
		<li>0: Enable motor spin-up</li>
		<li>1: Disable motor spin-up</li>
	</ul>
	<li><b>Bit v</b> - Verify Flag</li>
	<ul>
		<li>0: Do not verify</li>
		<li>1: Verify destination track</li>
	</ul>
	<li><b>Bit u</b> - Update Flag</li>
	<ul>
		<li>0: Do not update</li>
		<li>1: Update track register</li>
	</ul>
	<li><b>Bit r1, r0</b> - Stepping rate</li>
	<ul>
		<li>0 0: 6 ms</li>
		<li>0 1: 12 ms</li>
		<li>1 0: 2 ms</li>
		<li>1 1: 3 ms</li>
	</ul>
	<li><b>Bit m</b> - Multiple Sector Flag</li>
	<ul>
		<li>0: Single Sector</li>
		<li>1: Multiple Sector</li>
	</ul>
	<li><b>Bit a0</b> - Data Address Mark</li>
	<ul>
		<li>0: Write Normal Data Mark/li>
		<li>1: Write Deleted Mark</li>
	</ul>
	<li><b>Bit E</b> - 15 ms Setting Delay</li>
	<ul>
		<li>0: Do delay</li>
		<li>1: Add 15 ms Delay</li>
	</ul>
	<li><b>Bit P</b> - Write Precompensation</li>
	<ul>
		<li>0: Enable Write Precompensation</li>
		<li>1: Disable Write Precompensation</li>
	</ul>
	<li><b>Bit I3-I0</b> - Interrupt Condition</li>
	<ul>
		<li>I0 = 1 not used</li>
		<li>I1 = 1 not used</li>
		<li>I2 = 1 Interrupt on next pulse</li>
		<li>I3 = 1 Immediate Interrupt</li>
		<li>I0-I3 = 1 Terminate without Interrupt</li>
	</ul>
	</ul>

	Alright, this might seem complex but it is not that bad. Basically we need to build up a bit pattern
	for the command that we would like to send.