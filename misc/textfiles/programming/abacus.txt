Excerpt from ABACUS, a short-lived, very lively computer publication
in Fargo, ND:


     At first glance, programming a computer appears as easy as
unscrambling a Sanskrit crossword puzzle. Can these intimidating
machines be controlled by those of us who cannot balance a
checkbook or identify a transistor?  What if we foul up the
computer?  Does programming belong to the professionals, or is it
a skill the average computer user would benefit from?
     These are the kinds of questions Abacus recently asked of
Lyle Faurot, a computer consultant from Moorhead.  Lyle has been
involved with computers for the past two decades.  He began
studying about computers on his own while in the Air Force and
received further training from the University of Minnesota during
his years of post-graduate study in the field of vocational
education.
     Besides his work with larger computers, Lyle has taught
courses on using the personal computer and related software.  He
displays a vibrant enthusiasm for the potential of personal
computers.  Lyle is a free-lance consultant for small business
users who want to learn how to make the most out of their
computer systems.

ABACUS: Why would an ordinary person even want to learn a
programming language in view of all the professional software on
the market?

LYLE: There are several reasons.  First, programming is fun.  To
see a task and make the computer do it is personally rewarding.
Secondly, it is difficult to find a commercial package that will
do all that you want it to do.  Though the selection is getting
better all the time, you always find some needs that have been
overlooked in commercial packages.  Thirdly, most users of
commercial packages are forced to do some programming themselves
anyway.  dBASE III is an example of a software package that
really contains its own programming language.  You can't take
advantage of its power and features without knowing something
about programming.  Learning some basic techniques helps you set
up programs like these to do all they can for you.

ABACUS:  Are men more adept at programming than women?

LYLE: No.  I've trained both men and women.  I haven't noticed
any inherent difference in their ability to work effectively with
computers.

ABACUS: Do you need any special skills or abilities?  What if you
don't like math?

LYLE: The idea that you have to be a whiz at mathematics is an
old myth.  Almost anyone can learn how to set up a condition--to
tell the computer "If THIS happens, then I want the program to do
THAT."  Mathematicians have no corner on the kind of thinking
required to structure a useful program.

ABACUS: What language would you recommend for the new computer
user?

LYLE: I'd recommend BASIC.

ABACUS: Why?

LYLE: In BASIC it is easy to get started doing things where you
can see your results.  To enjoy learning people need feedback--
they need reinforcement.  It's fun to type in a few short lines
of instructions and then watch something happen.  BASIC was
designed for that purpose.  It is a teaching language that helps
you pick up skills rather easily.

ABACUS: What about the charges that BASIC is rather primitive,
and that it leads to bad programming habits?

LYLE: Oh, it does have weaknesses.  You have to be careful with
global variables.  Say you define some variable as x.  You have
to make sure that you never use x for a different variable
anywhere else in the program.  You can also abuse the GOTO
statement.  But any BASIC programmer who is careful can learn
good structured programming.

ABACUS: You are constructing a tutorial package for Turbo PASCAL.
How did this interest develop?

LYLE: I've always liked PASCAL.  It is a good quality programming
language.  Programmers waste a lot of time debugging their
programs--trying to find the little mistakes that prevent them
from working.  Turbo PASCAL makes that often frustrating task
much easier.  I designed the tutorials because of the appeal of
Turbo PASCAL.  It's fast, efficient, and yet cheap.  Many people
are out there trying to learn it.

ABACUS: What, in your opinion, makes a good tutorial?

LYLE: A good tutorial must be organized around action and
involvement.  The computer user must be given the chance to do
things.  In many cases people will spend half their time typing
in lines of a program from a book.  That's a waste.  What you
need is a program already written that you can play with.  You
change one instruction and watch the results.  You modify another
instruction and something else happens.  That's how you learn
what the language commands can do.  Good tutorials give you the
chance to experiment and play around.

ABACUS: What advice would you give to anyone interested in
learning a programming language?

LYLE: Learners should allow for mistakes and not be afraid to
experiment--which means working with copies of critical data.  In
the long run, most people really teach themselves by trying
things and seeing what happens.  You can't do that if you're
learning with the only copy of your financial records.

ABACUS: How can you help a business that owns a computer?

LYLE: I can show business users how to computerize their files,
how to get reports out quicker, how to get the most out of the
software they are running on their computer--saving time and
money.

ABACUS: Why should a business user consider training for himself
or his employees?

LYLE: Some people need encouragement to overcome fear of
computers--or simply their fear of making mistakes.  They often
need help performing tasks not covered in the manual--how to get
a program loaded and running, how to see what's on disks and
perform other electronic housekeeping chores.  They need to know
what to do if something goes wrong and how to react to common
problems.  It doesn't take much training to resolve these initial
problems.  Without it, businessmen may become frustrated to the
point where they use their computer very little or not at all.
They may think that their computer hardware or software is no
good.  A little personal training in which you can ask all the
questions you want can prevent that from happening.

ABACUS:  What kind of services do you offer as a consultant?

LYLE: One of my jobs is to help train people to enjoy using their
computer systems effectively.  I help them to get started, to
find the appropriate software, and to use popular commercial
programs--like Lotus 1-2-3 and dBASE III.  On a larger scale, I
offer seminars to businesses introducing their staff to the
basics of using a computer, to Lotus 1-2-3 or dBASE III, or to
working with particular programming languages.  I also work on
customizing and designing programs to fit the specific needs of a
business operation.

ABACUS: How have computers changed in the last two decades?

LYLE: The change has been tremendous!  When I was teaching at St.
Cloud State, we worked with the IBM 1620.  We had to sit at a
keyboard that would punch out a card for each line of code in the
program we were writing.  Our program came out in the form of a
deck of cards.  Then we had to take the cards and feed them into
the computer.  It would print a second deck in what's called
object code.  If everything worked to that point, we would go
back and type out another deck of cards with the data we were to
process.  Lastly, we would feed the computer the object code deck
and the data deck of cards and hoped everything would work.

ABACUS: Sounds slow and cumbersome.

LYLE: It was--especially at the university where you had to wait
for someone else to feed the cards into the computer.  You could
only run the cards through three or four times in a day.  It
might take days to find one or two mistakes that way.  That's how
I learned PASCAL.  But now with Turbo PASCAL, I can reduce that
week-long card feeding process down to five minutes on my
personal computer.

ABACUS: What's ahead, Lyle?

LYLE: The bigger computers will stay around to handle large files
and large programs that can't run on a PC.  They will remain the
backbone of large scale scientific applications.  The Cray will
still be cranking out giga-instructions per second.  Mainframes
offer more security, too.
     But the personal computer will be doing more and more.  Why
tie up a mainframe computer for a spreadsheet program or for
wordprocessing?  Remember, too, that the PC is a personal
computer--that means almost unlimited flexibility.  No one else
has control of it.  There's no waiting.  You use it when you want
to at your convenience in a location of your choice.

     In talking with Lyle, one realizes the why the personal
computer is so popular.  The PC brings all this technology and
convenience to the doorstep of almost any businessman.  It has a
bright future--especially with people like Lyle to build the
bridge between the machine and the consumer.


