
                           ANNOUNCING!
                           V A L G O L

From  its modest beginnings in Southern California's San Fernando
Valley - a long recognized hotbed of intellectual creativity - comes
the latest of modern programming languages - VALGOL.  VALGOL is en-
joying a dramatic surge of popularity across the industry, for good
reason.  User-friendly command structure and syntax abound.

     VALGOL commands include the powerful:
            REALLY,
            LIKE,
            WELL, and
            YOUKNOW.

VALGOL variables are assigned values using the intuitively
appealing operators
            =LIKE, and,
            =TOTALLY.

Special "Californian Booleans", FERSURE and NOWAY, make VALGOL
a joy to read.

Structuremingorthe andHEMcts
A tantalizing sample of VALGOL illustrates the significant
advance this language offers over such traditional fare as FORTRAN
and COBOL.

     LIKE YOUKNOW (I_MEAN) START
     if PIZZA =LIKE BITCHEN and
          B =LIKE TUBULAR and
          C =LIKE GRODY
     then
          FOR I =LIKE 1 to OH MAYBE 100
               DO WAH + DITTY to TOTHEMAX
               BARF(I) =TOTALLY GROSS(OUT)
          SURE
     LIKE BAG THIS PROBLEM
     REALLY
     LIKE TOTALLY YOUKNOW.

Sadly, one VALGOL shortcoming is its somewhat unfriendly
reporting of syntax errors.  Reminiscent of C and early assembly
language compilers, errors are reported but must be tracked down by
the programmer.  For example, the above program will cause the
VALGOL interpreter to generate:

               GAG ME WITH A SPOON


A cursory examination of the code quickly reveals our obvious
error - the commands LIKE and BAG are incorrectly paired.  LIKE may
only be used in con-junction with REALLY (or TOTALLY as in the last
line, of course, only if followed by the qualifier YOUKNOW).

We have been assured that the final release version of VALGOL
will incorporate a more helpful error reporting system.  With this
shortcoming bagged we can imagine serious APL and FORTRAN programmers
will soon find their existing languages less challenging and certainly
less easily read and understood.

