                        Computer Language Breakthrough

Bell Laboratories  has formally announced what  it believes is  the ultimate
computer science language.   Described by Iusi Nogoto,  the foremost Japanese
fourth generation language expert, as "the only truly elegant computer language
ever devised." NULL, as it is known,  was developed by the same department that
originally invented the wrong number, the busy signal,  and the phrase,  "The
number you have reached  is not in service." NULL is  the culmination of five
years  of work  by  a team  of language  designers  and computer  science
mathematicians.   The final breakthrough occurred when operating system expert
Hugh Nicks suggested that if  removing GO TO"s was good then  why not scrap IF
statements as well,   since they usually required typing  too many characters
anyway.  This  brilliant concept was extended  through a series  of complex
mathematical theorems  that form the basis  of the NULL language.    Put in
layman"s terms by Sally Kahn-Vallee, electrical engineer and PROM reader, "Like
we first we tossed out the bath water,   then the baby,  and like finally the
whole tub." The elegance  and conciseness of NULL can thus be  proven to be a
direct consequence  of the fact  that the  language as defined  contains no
statements at all.  While at first glance this may seem a drawback, in fact, it
is a major improvement over any other language.  A few of the numerous reasons
are:

 1. Highly structured constructs.

 2. Advanced data hiding techniques.

 3. A NULL compiler can  be written first in NULL with out  ever needing to be
   written in a lower level language.

 4. Since there are no statements to compile, in fact, no compiler need ever be
   written in the first place, saving time and money.

 5. Since there will be no compilers, no new releases will ever be issued hence
   maintenance is reduced.

 6. NULL programs are highly portable and totally machine independent.

 7. NULL programs compile and execute rapidly.   An important point to note is
   that with the addition of a small  amount of language dependent code,  e.g.
   PROC/END etc.,  all  NULL programs can be compiled by  any other language
   compiler.

 8. Since there will never be new releases of NULL,  all programs are upwardly
   and downwardly compatible.

 9. NULL can be parsed top-down, bottom-up, left-right, right-left, inside-out,
   and over-easy.

10. NULL programs are both self-documenting for clarity and self-concealing for
   security.

11. NULL programmers are easy  to find and once found can  be fired since they
   are not needed.

12. If desired,  specialized NULL hardware  could be designed implementing the
   code in firmware. Of course, such hardware may require years of development.
   One suggestion from Bell"s VLSI experts Nora  and Andy Gates was to take an
   existing available chip and remove all  the instructions except NOP.  While
   this should work in theory,  they acknowledged  that it is probably not the
   most efficient implementation.

These are just a few of the many  ways NULL is superior to all current computer
languages. You can, no doubt, think of more. For further reading consult any of
the numerous books and articles by Donald Knuth, David Parnas,  and of course,
the basis of all modern computer language theory, "The Emperor"s New Clothes."

            By John R. Andrews, University of Illinois at Chicago.

