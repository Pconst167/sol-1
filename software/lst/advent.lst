0001   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002   0000             ; ADVENTURE
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             
0005   0000             .include "lib/kernel.exp"
0001+  0000             sys_break        .EQU  $0000
0002+  0000             sys_rtc          .EQU  $0001
0003+  0000             sys_ide          .EQU  $0002
0004+  0000             sys_io           .EQU  $0003
0005+  0000             sys_filesystem   .EQU  $0004
0006+  0000             sys_create_proc  .EQU  $0005
0007+  0000             sys_list_proc    .EQU  $0006
0008+  0000             sys_datetime     .EQU  $0007
0009+  0000             sys_reboot       .EQU  $0008
0010+  0000             sys_pause_proc   .EQU  $0009
0011+  0000             sys_resume_proc  .EQU  $000a
0012+  0000             sys_terminate_proc .EQU  $000b
0013+  0000             sys_system       .EQU  $000c
0014+  0000             sys_fdc          .EQU  $000d
0015+  0000             text_org         .EQU  $0400
0006   0000             
0007   0400             .org text_org			; origin at 1024
0008   0400             
0009   0400             adventure:
0010   0400 3B D4 0E    	mov d, s_telnet_clear
0011   0403 07 88 0D    	call _puts
0012   0406 3B 54 06    	mov d, s_adv_instr
0013   0409 07 88 0D    	call _puts
0014   040C             
0015   040C             adv_start:
0016   040C 07 35 0D    	call printnl
0017   040F 19 00       	mov al, 0
0018   0411 3D AB 04    	mov [player_location], al		; reset position
0019   0414 3B B9 06    	mov d, s_adv_0
0020   0417 07 35 0D    	call printnl
0021   041A 07 88 0D    	call _puts
0022   041D 07 35 0D    	call printnl
0023   0420             
0024   0420             adv_loop:
0025   0420 3B AC 04    	mov d, player_command
0026   0423 07 63 0C    	call _gets			; get command
0027   0426             
0028   0426 1E          	mov al, [d]
0029   0427 23          	mov ah, al
0030   0428 07 7B 0F    	call _to_upper
0031   042B B9 51       	cmp al, 'Q'
0032   042D C6 A9 04    	je adv_ret			; quit game
0033   0430 B9 58       	cmp al, 'X'
0034   0432 C6 74 04    	je examine_command
0035   0435 07 24 06    	call adv_map_dir		; convert NESW to 0123 in AL
0036   0438 B9 04       	cmp al, 4
0037   043A C6 6B 04    	je unknown_command		; other keywords
0038   043D             move_command:
0039   043D 2F          	mov bl, al			; save converted movement value
0040   043E 1D AB 04    	mov al, [player_location]		; get current pos
0041   0441 3A 02       	mov cl, 2
0042   0443 9E          	shl al, cl			; multiply pos by 4, for table conversion
0043   0444 6B          	add al, bl			; get new position table index
0044   0445 22 00       	mov ah, 0
0045   0447 53 FC 05    	add a, adv_pos_table
0046   044A 3C          	mov d, a
0047   044B 1E          	mov al, [d]
0048   044C 3D AB 04    	mov [player_location], al		; save new position
0049   044F 07 55 04    	call print_location_description
0050   0452 0A 20 04    	jmp adv_loop			; back to main loop
0051   0455             
0052   0455             print_location_description:
0053   0455 1D AB 04    	mov al, [player_location]		; get position
0054   0458 22 00       	mov ah, 0
0055   045A 3A 01       	mov cl, 1
0056   045C 9D          	shl a, cl			; times 2
0057   045D B7 40 06    	mov a, [a + adv_text_table]	; get text description for new position
0058   0460 3C          	mov d, a
0059   0461 07 35 0D    	call printnl
0060   0464 07 88 0D    	call _puts
0061   0467 07 35 0D    	call printnl
0062   046A 09          	ret
0063   046B             
0064   046B             unknown_command:
0065   046B 3B 1B 0B    	mov d, s_unknown_command
0066   046E 07 88 0D    	call _puts
0067   0471 0A 20 04    	jmp adv_loop
0068   0474             
0069   0474             examine_command:
0070   0474 3B 53 0B    	mov d, s_items_here
0071   0477 07 88 0D    	call _puts
0072   047A 3B AC 05    	mov d, item_list
0073   047D             examine_command_L0:
0074   047D 16 01 00    	mov a, [d + 1]
0075   0480 AF 00 00    	cmp a, 0
0076   0483 C6 A6 04    	je examine_command_end
0077   0486 1E          	mov al, [d]
0078   0487 31 AB 04    	mov bl, [player_location]
0079   048A BA          	cmp al, bl
0080   048B C6 94 04    	je examine_command_item_here
0081   048E 58 04 00    	add d, 4
0082   0491 0A 7D 04    	jmp examine_command_L0
0083   0494             examine_command_item_here:
0084   0494 DA          	push d
0085   0495 16 01 00    	mov a, [d+1]	; get pointer
0086   0498 3C          	mov d, a
0087   0499 07 88 0D    	call _puts
0088   049C E7          	pop d
0089   049D 58 04 00    	add d, 4
0090   04A0 07 35 0D    	call printnl
0091   04A3 0A 7D 04    	jmp examine_command_L0
0092   04A6             examine_command_end:
0093   04A6 0A 20 04    	jmp adv_loop
0094   04A9             
0095   04A9             adv_ret:
0096   04A9 05 0B       	syscall sys_terminate_proc			; return to shell
0097   04AB             
0098   04AB 00          player_location:	.db 0
0099   04AC 00 00 00 00 player_command:		.fill 256, 0
0099   04B0 00 00 00 00 
0099   04B4 00 00 00 00 
0099   04B8 00 00 00 00 
0099   04BC 00 00 00 00 
0099   04C0 00 00 00 00 
0099   04C4 00 00 00 00 
0099   04C8 00 00 00 00 
0099   04CC 00 00 00 00 
0099   04D0 00 00 00 00 
0099   04D4 00 00 00 00 
0099   04D8 00 00 00 00 
0099   04DC 00 00 00 00 
0099   04E0 00 00 00 00 
0099   04E4 00 00 00 00 
0099   04E8 00 00 00 00 
0099   04EC 00 00 00 00 
0099   04F0 00 00 00 00 
0099   04F4 00 00 00 00 
0099   04F8 00 00 00 00 
0099   04FC 00 00 00 00 
0099   0500 00 00 00 00 
0099   0504 00 00 00 00 
0099   0508 00 00 00 00 
0099   050C 00 00 00 00 
0099   0510 00 00 00 00 
0099   0514 00 00 00 00 
0099   0518 00 00 00 00 
0099   051C 00 00 00 00 
0099   0520 00 00 00 00 
0099   0524 00 00 00 00 
0099   0528 00 00 00 00 
0099   052C 00 00 00 00 
0099   0530 00 00 00 00 
0099   0534 00 00 00 00 
0099   0538 00 00 00 00 
0099   053C 00 00 00 00 
0099   0540 00 00 00 00 
0099   0544 00 00 00 00 
0099   0548 00 00 00 00 
0099   054C 00 00 00 00 
0099   0550 00 00 00 00 
0099   0554 00 00 00 00 
0099   0558 00 00 00 00 
0099   055C 00 00 00 00 
0099   0560 00 00 00 00 
0099   0564 00 00 00 00 
0099   0568 00 00 00 00 
0099   056C 00 00 00 00 
0099   0570 00 00 00 00 
0099   0574 00 00 00 00 
0099   0578 00 00 00 00 
0099   057C 00 00 00 00 
0099   0580 00 00 00 00 
0099   0584 00 00 00 00 
0099   0588 00 00 00 00 
0099   058C 00 00 00 00 
0099   0590 00 00 00 00 
0099   0594 00 00 00 00 
0099   0598 00 00 00 00 
0099   059C 00 00 00 00 
0099   05A0 00 00 00 00 
0099   05A4 00 00 00 00 
0099   05A8 00 00 00 00 
0100   05AC             
0101   05AC             
0102   05AC             ; location(1), 255 = with player
0103   05AC             ; pointer to item name (2)
0104   05AC             ; flags(1)
0105   05AC             ;
0106   05AC             item_list:
0107   05AC 00          	.db 0
0108   05AD C0 05       	.dw item0
0109   05AF 00          	.db 0
0110   05B0 00          	.db 0
0111   05B1 D5 05       	.dw item1
0112   05B3 00          	.db 0
0113   05B4 01          	.db 1
0114   05B5 E1 05       	.dw item2
0115   05B7 00          	.db 0
0116   05B8 01          	.db 1
0117   05B9 F1 05       	.dw item3
0118   05BB 00          	.db 0
0119   05BC             ; end of list
0120   05BC 00          	.db 0
0121   05BD 00 00       	.dw 0
0122   05BF 00          	.db 0
0123   05C0             	
0124   05C0             item_names:	
0125   05C0 61 6E 20 6F item0:	.db "an old brass lantern", 0
0125   05C4 6C 64 20 62 
0125   05C8 72 61 73 73 
0125   05CC 20 6C 61 6E 
0125   05D0 74 65 72 6E 
0125   05D4 00 
0126   05D5 61 20 73 6D item1:	.db "a small key", 0
0126   05D9 61 6C 6C 20 
0126   05DD 6B 65 79 00 
0127   05E1 61 6E 20 65 item2:	.db "an empty bottle", 0
0127   05E5 6D 70 74 79 
0127   05E9 20 62 6F 74 
0127   05ED 74 6C 65 00 
0128   05F1 61 6E 20 6F item3:	.db "an old axe", 0
0128   05F5 6C 64 20 61 
0128   05F9 78 65 00 
0129   05FC             
0130   05FC             adv_pos_table:
0131   05FC             	; pos 0, beginning
0132   05FC 01          	.db 1			; N
0133   05FD 02          	.db 2			; E
0134   05FE 03          	.db 3			; S
0135   05FF 04          	.db 4			; W
0136   0600             	; pos 1
0137   0600 06          	.db 6			
0138   0601 01          	.db 1			
0139   0602 00          	.db 0			
0140   0603 01          	.db 1	
0141   0604             	; pos 2
0142   0604 02          	.db 2
0143   0605 02          	.db 2
0144   0606 03          	.db 3
0145   0607 00          	.db 0	
0146   0608             	; pos 3
0147   0608 00          	.db 0
0148   0609 02          	.db 2
0149   060A 03          	.db 3
0150   060B 04          	.db 4
0151   060C             	; pos 4
0152   060C 05          	.db 5
0153   060D 00          	.db 0
0154   060E 03          	.db 3
0155   060F 04          	.db 4
0156   0610             	; pos 5
0157   0610 05          	.db 5
0158   0611 05          	.db 5
0159   0612 04          	.db 4
0160   0613 05          	.db 5
0161   0614             	; pos 6
0162   0614 07          	.db 7
0163   0615 06          	.db 6
0164   0616 01          	.db 1
0165   0617 06          	.db 6
0166   0618             	; pos 7
0167   0618 08          	.db 8
0168   0619 07          	.db 7
0169   061A 06          	.db 6
0170   061B 07          	.db 7
0171   061C             	; pos 8
0172   061C 09          	.db 9
0173   061D 08          	.db 8
0174   061E 07          	.db 7
0175   061F 08          	.db 8
0176   0620             	; pos 9
0177   0620 09          	.db 9
0178   0621 09          	.db 9
0179   0622 08          	.db 8
0180   0623 09          	.db 9
0181   0624             
0182   0624             
0183   0624             ; dir char in AL
0184   0624             ; output in AL
0185   0624             adv_map_dir:
0186   0624 23          	mov ah, al
0187   0625 19 00       	mov al, 0
0188   0627 76 4E       	cmp ah, 'N'
0189   0629 C6 3F 06    	je dir_ret
0190   062C 7A          	inc al
0191   062D 76 45       	cmp ah, 'E'
0192   062F C6 3F 06    	je dir_ret
0193   0632 7A          	inc al
0194   0633 76 53       	cmp ah, 'S'
0195   0635 C6 3F 06    	je dir_ret
0196   0638 7A          	inc al
0197   0639 76 57       	cmp ah, 'W'
0198   063B C6 3F 06    	je dir_ret
0199   063E 7A          	inc al			
0200   063F             dir_ret:
0201   063F 09          	ret
0202   0640             	
0203   0640             	
0204   0640             adv_text_table:
0205   0640 B9 06       	.dw s_adv_0
0206   0642 C9 07       	.dw s_adv_1
0207   0644 09 08       	.dw s_adv_2
0208   0646 BC 08       	.dw s_adv_3
0209   0648 F5 08       	.dw s_adv_4
0210   064A 11 09       	.dw s_adv_5
0211   064C 62 09       	.dw s_adv_6
0212   064E AF 09       	.dw s_adv_7
0213   0650 EF 09       	.dw s_adv_8
0214   0652 96 0A       	.dw s_adv_9	
0215   0654             	
0216   0654             
0217   0654             
0218   0654 49 4E 53 54 s_adv_instr:	.db "INSTRUCTIONS:\n"
0218   0658 52 55 43 54 
0218   065C 49 4F 4E 53 
0218   0660 3A 0A 
0219   0662 6E 3A 20 67 				.db "n: go north\n"
0219   0666 6F 20 6E 6F 
0219   066A 72 74 68 0A 
0220   066E 73 3A 20 67 				.db "s: go south\n"
0220   0672 6F 20 73 6F 
0220   0676 75 74 68 0A 
0221   067A 77 3A 20 67 				.db "w: go west\n"
0221   067E 6F 20 77 65 
0221   0682 73 74 0A 
0222   0685 65 3A 20 67 				.db "e: go east\n"
0222   0689 6F 20 65 61 
0222   068D 73 74 0A 
0223   0690 78 3A 20 65 				.db "x: examine location\n"
0223   0694 78 61 6D 69 
0223   0698 6E 65 20 6C 
0223   069C 6F 63 61 74 
0223   06A0 69 6F 6E 0A 
0224   06A4 74 3A 20 74 				.db "t: take item\n"
0224   06A8 61 6B 65 20 
0224   06AC 69 74 65 6D 
0224   06B0 0A 
0225   06B1 71 3A 20 71 				.db "q: quit", 0
0225   06B5 75 69 74 00 
0226   06B9             
0227   06B9             s_adv_0:
0228   06B9 49 74 20 69 	.db "It is around 9am, and you find yourself in a forest.\n"
0228   06BD 73 20 61 72 
0228   06C1 6F 75 6E 64 
0228   06C5 20 39 61 6D 
0228   06C9 2C 20 61 6E 
0228   06CD 64 20 79 6F 
0228   06D1 75 20 66 69 
0228   06D5 6E 64 20 79 
0228   06D9 6F 75 72 73 
0228   06DD 65 6C 66 20 
0228   06E1 69 6E 20 61 
0228   06E5 20 66 6F 72 
0228   06E9 65 73 74 2E 
0228   06ED 0A 
0229   06EE 54 68 65 72 	.db "There is an old wooden cabin north of you.\n"
0229   06F2 65 20 69 73 
0229   06F6 20 61 6E 20 
0229   06FA 6F 6C 64 20 
0229   06FE 77 6F 6F 64 
0229   0702 65 6E 20 63 
0229   0706 61 62 69 6E 
0229   070A 20 6E 6F 72 
0229   070E 74 68 20 6F 
0229   0712 66 20 79 6F 
0229   0716 75 2E 0A 
0230   0719 54 68 65 20 	.db "The cabin looks very old and seems abandoned. It has two windows and a door at the front.\n"
0230   071D 63 61 62 69 
0230   0721 6E 20 6C 6F 
0230   0725 6F 6B 73 20 
0230   0729 76 65 72 79 
0230   072D 20 6F 6C 64 
0230   0731 20 61 6E 64 
0230   0735 20 73 65 65 
0230   0739 6D 73 20 61 
0230   073D 62 61 6E 64 
0230   0741 6F 6E 65 64 
0230   0745 2E 20 49 74 
0230   0749 20 68 61 73 
0230   074D 20 74 77 6F 
0230   0751 20 77 69 6E 
0230   0755 64 6F 77 73 
0230   0759 20 61 6E 64 
0230   075D 20 61 20 64 
0230   0761 6F 6F 72 20 
0230   0765 61 74 20 74 
0230   0769 68 65 20 66 
0230   076D 72 6F 6E 74 
0230   0771 2E 0A 
0231   0773 59 6F 75 20 	.db "You can see through the windows and the sunlight illuminates the inside of the cabin.", 0
0231   0777 63 61 6E 20 
0231   077B 73 65 65 20 
0231   077F 74 68 72 6F 
0231   0783 75 67 68 20 
0231   0787 74 68 65 20 
0231   078B 77 69 6E 64 
0231   078F 6F 77 73 20 
0231   0793 61 6E 64 20 
0231   0797 74 68 65 20 
0231   079B 73 75 6E 6C 
0231   079F 69 67 68 74 
0231   07A3 20 69 6C 6C 
0231   07A7 75 6D 69 6E 
0231   07AB 61 74 65 73 
0231   07AF 20 74 68 65 
0231   07B3 20 69 6E 73 
0231   07B7 69 64 65 20 
0231   07BB 6F 66 20 74 
0231   07BF 68 65 20 63 
0231   07C3 61 62 69 6E 
0231   07C7 2E 00 
0232   07C9             
0233   07C9             s_adv_1:
0234   07C9 59 6F 75 20 	.db "You are at the entrance door to the cabin. The door is locked.\n", 0
0234   07CD 61 72 65 20 
0234   07D1 61 74 20 74 
0234   07D5 68 65 20 65 
0234   07D9 6E 74 72 61 
0234   07DD 6E 63 65 20 
0234   07E1 64 6F 6F 72 
0234   07E5 20 74 6F 20 
0234   07E9 74 68 65 20 
0234   07ED 63 61 62 69 
0234   07F1 6E 2E 20 54 
0234   07F5 68 65 20 64 
0234   07F9 6F 6F 72 20 
0234   07FD 69 73 20 6C 
0234   0801 6F 63 6B 65 
0234   0805 64 2E 0A 00 
0235   0809             
0236   0809             s_adv_2:
0237   0809 59 6F 75 20 	.db "You are in a clearing. Small trees encircle you. The grass is short and there are a few big rocks on the ground.\n"
0237   080D 61 72 65 20 
0237   0811 69 6E 20 61 
0237   0815 20 63 6C 65 
0237   0819 61 72 69 6E 
0237   081D 67 2E 20 53 
0237   0821 6D 61 6C 6C 
0237   0825 20 74 72 65 
0237   0829 65 73 20 65 
0237   082D 6E 63 69 72 
0237   0831 63 6C 65 20 
0237   0835 79 6F 75 2E 
0237   0839 20 54 68 65 
0237   083D 20 67 72 61 
0237   0841 73 73 20 69 
0237   0845 73 20 73 68 
0237   0849 6F 72 74 20 
0237   084D 61 6E 64 20 
0237   0851 74 68 65 72 
0237   0855 65 20 61 72 
0237   0859 65 20 61 20 
0237   085D 66 65 77 20 
0237   0861 62 69 67 20 
0237   0865 72 6F 63 6B 
0237   0869 73 20 6F 6E 
0237   086D 20 74 68 65 
0237   0871 20 67 72 6F 
0237   0875 75 6E 64 2E 
0237   0879 0A 
0238   087A 54 68 65 20 	.db "The sky is a deep blue with big white puffy clouds flying calmly.", 0
0238   087E 73 6B 79 20 
0238   0882 69 73 20 61 
0238   0886 20 64 65 65 
0238   088A 70 20 62 6C 
0238   088E 75 65 20 77 
0238   0892 69 74 68 20 
0238   0896 62 69 67 20 
0238   089A 77 68 69 74 
0238   089E 65 20 70 75 
0238   08A2 66 66 79 20 
0238   08A6 63 6C 6F 75 
0238   08AA 64 73 20 66 
0238   08AE 6C 79 69 6E 
0238   08B2 67 20 63 61 
0238   08B6 6C 6D 6C 79 
0238   08BA 2E 00 
0239   08BC             
0240   08BC             s_adv_3:
0241   08BC 59 6F 75 20 	.db "You are in a deep forest. Big trees block the way south.", 0
0241   08C0 61 72 65 20 
0241   08C4 69 6E 20 61 
0241   08C8 20 64 65 65 
0241   08CC 70 20 66 6F 
0241   08D0 72 65 73 74 
0241   08D4 2E 20 42 69 
0241   08D8 67 20 74 72 
0241   08DC 65 65 73 20 
0241   08E0 62 6C 6F 63 
0241   08E4 6B 20 74 68 
0241   08E8 65 20 77 61 
0241   08EC 79 20 73 6F 
0241   08F0 75 74 68 2E 
0241   08F4 00 
0242   08F5             
0243   08F5             s_adv_4:
0244   08F5 59 6F 75 20 	.db "You are on a rocky plateau.", 0
0244   08F9 61 72 65 20 
0244   08FD 6F 6E 20 61 
0244   0901 20 72 6F 63 
0244   0905 6B 79 20 70 
0244   0909 6C 61 74 65 
0244   090D 61 75 2E 00 
0245   0911             
0246   0911             s_adv_5:
0247   0911 59 6F 75 20 	.db "You are at the top of the plateau. Looking down the mountain you see a big lake.", 0
0247   0915 61 72 65 20 
0247   0919 61 74 20 74 
0247   091D 68 65 20 74 
0247   0921 6F 70 20 6F 
0247   0925 66 20 74 68 
0247   0929 65 20 70 6C 
0247   092D 61 74 65 61 
0247   0931 75 2E 20 4C 
0247   0935 6F 6F 6B 69 
0247   0939 6E 67 20 64 
0247   093D 6F 77 6E 20 
0247   0941 74 68 65 20 
0247   0945 6D 6F 75 6E 
0247   0949 74 61 69 6E 
0247   094D 20 79 6F 75 
0247   0951 20 73 65 65 
0247   0955 20 61 20 62 
0247   0959 69 67 20 6C 
0247   095D 61 6B 65 2E 
0247   0961 00 
0248   0962             
0249   0962             s_adv_6:
0250   0962 59 6F 75 20 	.db "You are north of the cabin. There is a path through the trees leading north.", 0
0250   0966 61 72 65 20 
0250   096A 6E 6F 72 74 
0250   096E 68 20 6F 66 
0250   0972 20 74 68 65 
0250   0976 20 63 61 62 
0250   097A 69 6E 2E 20 
0250   097E 54 68 65 72 
0250   0982 65 20 69 73 
0250   0986 20 61 20 70 
0250   098A 61 74 68 20 
0250   098E 74 68 72 6F 
0250   0992 75 67 68 20 
0250   0996 74 68 65 20 
0250   099A 74 72 65 65 
0250   099E 73 20 6C 65 
0250   09A2 61 64 69 6E 
0250   09A6 67 20 6E 6F 
0250   09AA 72 74 68 2E 
0250   09AE 00 
0251   09AF             
0252   09AF             s_adv_7:
0253   09AF 59 6F 75 20 	.db "You are in a forest path. There is a small stream north of you.", 0
0253   09B3 61 72 65 20 
0253   09B7 69 6E 20 61 
0253   09BB 20 66 6F 72 
0253   09BF 65 73 74 20 
0253   09C3 70 61 74 68 
0253   09C7 2E 20 54 68 
0253   09CB 65 72 65 20 
0253   09CF 69 73 20 61 
0253   09D3 20 73 6D 61 
0253   09D7 6C 6C 20 73 
0253   09DB 74 72 65 61 
0253   09DF 6D 20 6E 6F 
0253   09E3 72 74 68 20 
0253   09E7 6F 66 20 79 
0253   09EB 6F 75 2E 00 
0254   09EF             
0255   09EF             s_adv_8:
0256   09EF 59 6F 75 20 	.db "You are in a rocky floored water spring. "
0256   09F3 61 72 65 20 
0256   09F7 69 6E 20 61 
0256   09FB 20 72 6F 63 
0256   09FF 6B 79 20 66 
0256   0A03 6C 6F 6F 72 
0256   0A07 65 64 20 77 
0256   0A0B 61 74 65 72 
0256   0A0F 20 73 70 72 
0256   0A13 69 6E 67 2E 
0256   0A17 20 
0257   0A18 43 6C 65 61 	.db "Clear water flows out of a small spring amidst the rocks. "
0257   0A1C 72 20 77 61 
0257   0A20 74 65 72 20 
0257   0A24 66 6C 6F 77 
0257   0A28 73 20 6F 75 
0257   0A2C 74 20 6F 66 
0257   0A30 20 61 20 73 
0257   0A34 6D 61 6C 6C 
0257   0A38 20 73 70 72 
0257   0A3C 69 6E 67 20 
0257   0A40 61 6D 69 64 
0257   0A44 73 74 20 74 
0257   0A48 68 65 20 72 
0257   0A4C 6F 63 6B 73 
0257   0A50 2E 20 
0258   0A52 57 65 74 20 	.db "Wet and muddy grass encircles the spring. A bird is singing nearby.", 0
0258   0A56 61 6E 64 20 
0258   0A5A 6D 75 64 64 
0258   0A5E 79 20 67 72 
0258   0A62 61 73 73 20 
0258   0A66 65 6E 63 69 
0258   0A6A 72 63 6C 65 
0258   0A6E 73 20 74 68 
0258   0A72 65 20 73 70 
0258   0A76 72 69 6E 67 
0258   0A7A 2E 20 41 20 
0258   0A7E 62 69 72 64 
0258   0A82 20 69 73 20 
0258   0A86 73 69 6E 67 
0258   0A8A 69 6E 67 20 
0258   0A8E 6E 65 61 72 
0258   0A92 62 79 2E 00 
0259   0A96             
0260   0A96             s_adv_9:
0261   0A96 59 6F 75 20 	.db "You are in a bog. The water reaches up to your knees.\n"
0261   0A9A 61 72 65 20 
0261   0A9E 69 6E 20 61 
0261   0AA2 20 62 6F 67 
0261   0AA6 2E 20 54 68 
0261   0AAA 65 20 77 61 
0261   0AAE 74 65 72 20 
0261   0AB2 72 65 61 63 
0261   0AB6 68 65 73 20 
0261   0ABA 75 70 20 74 
0261   0ABE 6F 20 79 6F 
0261   0AC2 75 72 20 6B 
0261   0AC6 6E 65 65 73 
0261   0ACA 2E 0A 
0262   0ACC 54 68 65 20 	.db "The ground feels like quick sand and it is difficult to move around.", 0
0262   0AD0 67 72 6F 75 
0262   0AD4 6E 64 20 66 
0262   0AD8 65 65 6C 73 
0262   0ADC 20 6C 69 6B 
0262   0AE0 65 20 71 75 
0262   0AE4 69 63 6B 20 
0262   0AE8 73 61 6E 64 
0262   0AEC 20 61 6E 64 
0262   0AF0 20 69 74 20 
0262   0AF4 69 73 20 64 
0262   0AF8 69 66 66 69 
0262   0AFC 63 75 6C 74 
0262   0B00 20 74 6F 20 
0262   0B04 6D 6F 76 65 
0262   0B08 20 61 72 6F 
0262   0B0C 75 6E 64 2E 
0262   0B10 00 
0263   0B11             
0264   0B11             s_adv_restart:
0265   0B11 52 65 73 74 	.db "Restart? ", 0
0265   0B15 61 72 74 3F 
0265   0B19 20 00 
0266   0B1B             	
0267   0B1B             s_unknown_command:
0268   0B1B 49 20 64 6F 	.db "I do not understand that word.\n", 0
0268   0B1F 20 6E 6F 74 
0268   0B23 20 75 6E 64 
0268   0B27 65 72 73 74 
0268   0B2B 61 6E 64 20 
0268   0B2F 74 68 61 74 
0268   0B33 20 77 6F 72 
0268   0B37 64 2E 0A 00 
0269   0B3B             	
0270   0B3B             s_adv_exam:
0271   0B3B 54 68 65 72 	.db "There is nothing here.\n", 0
0271   0B3F 65 20 69 73 
0271   0B43 20 6E 6F 74 
0271   0B47 68 69 6E 67 
0271   0B4B 20 68 65 72 
0271   0B4F 65 2E 0A 00 
0272   0B53             	
0273   0B53             s_items_here:
0274   0B53 49 74 65 6D 	.db "Items found at this location...\n", 0
0274   0B57 73 20 66 6F 
0274   0B5B 75 6E 64 20 
0274   0B5F 61 74 20 74 
0274   0B63 68 69 73 20 
0274   0B67 6C 6F 63 61 
0274   0B6B 74 69 6F 6E 
0274   0B6F 2E 2E 2E 0A 
0274   0B73 00 
0275   0B74             
0276   0B74             p_itemlist:
0277   0B74             
0278   0B74             
0279   0B74             .include "lib/stdio.asm"
0001+  0B74             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0B74             ; stdio.s
0003+  0B74             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0B74             .include "lib/string.asm"
0001++ 0B74             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0B74             ; string.s
0003++ 0B74             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0B74             
0005++ 0B74             
0006++ 0B74             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0B74             ; _strrev
0008++ 0B74             ; reverse a string
0009++ 0B74             ; d = string address
0010++ 0B74             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0B74             ; 01234
0012++ 0B74             _strrev:
0013++ 0B74 4B          	pusha
0014++ 0B75 07 BB 0B    	call _strlen	; length in c
0015++ 0B78 12          	mov a, c
0016++ 0B79 AF 01 00    	cmp a, 1
0017++ 0B7C D0 96 0B    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 0B7F 7D          	dec a
0019++ 0B80 FD 4E       	mov si, d	; beginning of string
0020++ 0B82 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0B84 59          	add d, a	; end of string
0022++ 0B85 12          	mov a, c
0023++ 0B86 FD 9B       	shr a		; divide by 2
0024++ 0B88 39          	mov c, a	; c now counts the steps
0025++ 0B89             _strrev_l0:
0026++ 0B89 32          	mov bl, [d]	; save load right-side char into bl
0027++ 0B8A F6          	lodsb		; load left-side char into al; increase si
0028++ 0B8B 3E          	mov [d], al	; store left char into right side
0029++ 0B8C 1B          	mov al, bl
0030++ 0B8D F7          	stosb		; store right-side char into left-side; increase di
0031++ 0B8E 7E          	dec c
0032++ 0B8F 7F          	dec d
0033++ 0B90 C2 00 00    	cmp c, 0
0034++ 0B93 C7 89 0B    	jne _strrev_l0
0035++ 0B96             _strrev_end:
0036++ 0B96 4C          	popa
0037++ 0B97 09          	ret
0038++ 0B98             	
0039++ 0B98             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0B98             ; _strchr
0041++ 0B98             ; search string in d for char in al
0042++ 0B98             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0B98             _strchr:
0044++ 0B98             _strchr_l0:
0045++ 0B98 32          	mov bl, [d]
0046++ 0B99 C1 00       	cmp bl, 0
0047++ 0B9B C6 A6 0B    	je _strchr_end
0048++ 0B9E BA          	cmp al, bl
0049++ 0B9F C6 A6 0B    	je _strchr_end
0050++ 0BA2 79          	inc d
0051++ 0BA3 0A 98 0B    	jmp _strchr_l0
0052++ 0BA6             _strchr_end:
0053++ 0BA6 1B          	mov al, bl
0054++ 0BA7 09          	ret
0055++ 0BA8             
0056++ 0BA8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0BA8             ; _strstr
0058++ 0BA8             ; find sub-string
0059++ 0BA8             ; str1 in si
0060++ 0BA8             ; str2 in di
0061++ 0BA8             ; si points to end of source string
0062++ 0BA8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0BA8             _strstr:
0064++ 0BA8 DB          	push al
0065++ 0BA9 DA          	push d
0066++ 0BAA E3          	push di
0067++ 0BAB             _strstr_loop:
0068++ 0BAB F3          	cmpsb					; compare a byte of the strings
0069++ 0BAC C7 B7 0B    	jne _strstr_ret
0070++ 0BAF FC 00 00    	lea d, [di + 0]
0071++ 0BB2 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0BB4 C7 AB 0B    	jne _strstr_loop				; equal chars but not at end
0073++ 0BB7             _strstr_ret:
0074++ 0BB7 F0          	pop di
0075++ 0BB8 E7          	pop d
0076++ 0BB9 E8          	pop al
0077++ 0BBA 09          	ret
0078++ 0BBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0BBB             ; length of null terminated string
0080++ 0BBB             ; result in c
0081++ 0BBB             ; pointer in d
0082++ 0BBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0BBB             _strlen:
0084++ 0BBB DA          	push d
0085++ 0BBC 38 00 00    	mov c, 0
0086++ 0BBF             _strlen_l1:
0087++ 0BBF BD 00       	cmp byte [d], 0
0088++ 0BC1 C6 C9 0B    	je _strlen_ret
0089++ 0BC4 79          	inc d
0090++ 0BC5 78          	inc c
0091++ 0BC6 0A BF 0B    	jmp _strlen_l1
0092++ 0BC9             _strlen_ret:
0093++ 0BC9 E7          	pop d
0094++ 0BCA 09          	ret
0095++ 0BCB             
0096++ 0BCB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0BCB             ; strcmp
0098++ 0BCB             ; compare two strings
0099++ 0BCB             ; str1 in si
0100++ 0BCB             ; str2 in di
0101++ 0BCB             ; create a string compairon instrucion ?????
0102++ 0BCB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0BCB             _strcmp:
0104++ 0BCB DB          	push al
0105++ 0BCC DA          	push d
0106++ 0BCD E3          	push di
0107++ 0BCE E2          	push si
0108++ 0BCF             _strcmp_loop:
0109++ 0BCF F3          	cmpsb					; compare a byte of the strings
0110++ 0BD0 C7 DB 0B    	jne _strcmp_ret
0111++ 0BD3 FB FF FF    	lea d, [si +- 1]
0112++ 0BD6 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0BD8 C7 CF 0B    	jne _strcmp_loop				; equal chars but not at end
0114++ 0BDB             _strcmp_ret:
0115++ 0BDB EF          	pop si
0116++ 0BDC F0          	pop di
0117++ 0BDD E7          	pop d
0118++ 0BDE E8          	pop al
0119++ 0BDF 09          	ret
0120++ 0BE0             
0121++ 0BE0             
0122++ 0BE0             ; strcpy
0123++ 0BE0             ; copy null terminated string from si to di
0124++ 0BE0             ; source in si
0125++ 0BE0             ; destination in di
0126++ 0BE0             _strcpy:
0127++ 0BE0 E2          	push si
0128++ 0BE1 E3          	push di
0129++ 0BE2 DB          	push al
0130++ 0BE3             _strcpy_l1:
0131++ 0BE3 F6          	lodsb
0132++ 0BE4 F7          	stosb
0133++ 0BE5 B9 00       	cmp al, 0
0134++ 0BE7 C7 E3 0B    	jne _strcpy_l1
0135++ 0BEA             _strcpy_end:
0136++ 0BEA E8          	pop al
0137++ 0BEB F0          	pop di
0138++ 0BEC EF          	pop si
0139++ 0BED 09          	ret
0140++ 0BEE             
0141++ 0BEE             ; strcat
0142++ 0BEE             ; concatenate a null terminated string into string at di, from string at si
0143++ 0BEE             ; source in si
0144++ 0BEE             ; destination in di
0145++ 0BEE             _strcat:
0146++ 0BEE E2          	push si
0147++ 0BEF E3          	push di
0148++ 0BF0 D7          	push a
0149++ 0BF1 DA          	push d
0150++ 0BF2 50          	mov a, di
0151++ 0BF3 3C          	mov d, a
0152++ 0BF4             _strcat_goto_end_l1:
0153++ 0BF4 BD 00       	cmp byte[d], 0
0154++ 0BF6 C6 FD 0B    	je _strcat_start
0155++ 0BF9 79          	inc d
0156++ 0BFA 0A F4 0B    	jmp _strcat_goto_end_l1
0157++ 0BFD             _strcat_start:
0158++ 0BFD FD 50       	mov di, d
0159++ 0BFF             _strcat_l1:
0160++ 0BFF F6          	lodsb
0161++ 0C00 F7          	stosb
0162++ 0C01 B9 00       	cmp al, 0
0163++ 0C03 C7 FF 0B    	jne _strcat_l1
0164++ 0C06             _strcat_end:
0165++ 0C06 E7          	pop d
0166++ 0C07 E4          	pop a
0167++ 0C08 F0          	pop di
0168++ 0C09 EF          	pop si
0169++ 0C0A 09          	ret
0170++ 0C0B             
0171++ 0C0B             
0005+  0C0B             
0006+  0C0B             
0007+  0C0B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  0C0B             ; convert ascii 'o'..'f' to integer 0..15
0009+  0C0B             ; ascii in bl
0010+  0C0B             ; result in al
0011+  0C0B             ; ascii for f = 0100 0110
0012+  0C0B             ; ascii for 9 = 0011 1001
0013+  0C0B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  0C0B             hex_ascii_encode:
0015+  0C0B 1B            mov al, bl
0016+  0C0C 93 40         test al, $40        ; test if letter or number
0017+  0C0E C7 14 0C      jnz hex_letter
0018+  0C11 87 0F         and al, $0f        ; get number
0019+  0C13 09            ret
0020+  0C14             hex_letter:
0021+  0C14 87 0F         and al, $0f        ; get letter
0022+  0C16 6A 09         add al, 9
0023+  0C18 09            ret
0024+  0C19             
0025+  0C19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0C19             ; atoi
0027+  0C19             ; 2 letter hex string in b
0028+  0C19             ; 8bit integer returned in al
0029+  0C19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  0C19             _atoi:
0031+  0C19 D8            push b
0032+  0C1A 07 0B 0C      call hex_ascii_encode      ; convert bl to 4bit code in al
0033+  0C1D 30            mov bl, bh
0034+  0C1E DB            push al          ; save a
0035+  0C1F 07 0B 0C      call hex_ascii_encode
0036+  0C22 EA            pop bl  
0037+  0C23 FD 9E 04      shl al, 4
0038+  0C26 8C            or al, bl
0039+  0C27 E5            pop b
0040+  0C28 09            ret  
0041+  0C29             
0042+  0C29             
0043+  0C29             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  0C29             ; scanf
0045+  0C29             ; no need for explanations!
0046+  0C29             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  0C29             scanf:
0048+  0C29 09            ret
0049+  0C2A             
0050+  0C2A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0C2A             ; itoa
0052+  0C2A             ; 8bit value in bl
0053+  0C2A             ; 2 byte ascii result in a
0054+  0C2A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0C2A             _itoa:
0056+  0C2A DA            push d
0057+  0C2B D8            push b
0058+  0C2C A7 00         mov bh, 0
0059+  0C2E FD A4 04      shr bl, 4  
0060+  0C31 74            mov d, b
0061+  0C32 1F C4 0E      mov al, [d + s_hex_digits]
0062+  0C35 23            mov ah, al
0063+  0C36               
0064+  0C36 E5            pop b
0065+  0C37 D8            push b
0066+  0C38 A7 00         mov bh, 0
0067+  0C3A FD 87 0F      and bl, $0f
0068+  0C3D 74            mov d, b
0069+  0C3E 1F C4 0E      mov al, [d + s_hex_digits]
0070+  0C41 E5            pop b
0071+  0C42 E7            pop d
0072+  0C43 09            ret
0073+  0C44             
0074+  0C44             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  0C44             ; hex string to binary
0076+  0C44             ; di = destination address
0077+  0C44             ; si = source
0078+  0C44             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  0C44             _hex_to_int:
0080+  0C44             _hex_to_int_l1:
0081+  0C44 F6            lodsb          ; load from [si] to al
0082+  0C45 B9 00         cmp al, 0        ; check if ascii 0
0083+  0C47 C6 54 0C      jz _hex_to_int_ret
0084+  0C4A 36            mov bh, al
0085+  0C4B F6            lodsb
0086+  0C4C 2F            mov bl, al
0087+  0C4D 07 19 0C      call _atoi        ; convert ascii byte in b to int (to al)
0088+  0C50 F7            stosb          ; store al to [di]
0089+  0C51 0A 44 0C      jmp _hex_to_int_l1
0090+  0C54             _hex_to_int_ret:
0091+  0C54 09            ret    
0092+  0C55             
0093+  0C55             
0094+  0C55             
0095+  0C55             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  0C55             ; getchar
0097+  0C55             ; char in ah
0098+  0C55             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  0C55             getch:
0100+  0C55 DB            push al
0101+  0C56             getch_retry:
0102+  0C56 19 01         mov al, 1
0103+  0C58 05 03         syscall sys_io      ; receive in ah
0104+  0C5A E8            pop al
0105+  0C5B 09            ret
0106+  0C5C             
0107+  0C5C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  0C5C             ; putchar
0109+  0C5C             ; char in ah
0110+  0C5C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0C5C             _putchar:
0112+  0C5C DB            push al
0113+  0C5D 19 00         mov al, 0
0114+  0C5F 05 03         syscall sys_io      ; char in ah
0115+  0C61 E8            pop al
0116+  0C62 09            ret
0117+  0C63             
0118+  0C63             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  0C63             ;; input a string
0120+  0C63             ;; terminates with null
0121+  0C63             ;; pointer in d
0122+  0C63             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  0C63             _gets:
0124+  0C63 D7            push a
0125+  0C64 DA            push d
0126+  0C65             _gets_loop:
0127+  0C65 19 01         mov al, 1
0128+  0C67 05 03         syscall sys_io      ; receive in ah
0129+  0C69 76 1B         cmp ah, 27
0130+  0C6B C6 8C 0C      je _gets_ansi_esc
0131+  0C6E 76 0A         cmp ah, $0a        ; lf
0132+  0C70 C6 E8 0C      je _gets_end
0133+  0C73 76 0D         cmp ah, $0d        ; cr
0134+  0C75 C6 E8 0C      je _gets_end
0135+  0C78 76 5C         cmp ah, $5c        ; '\\'
0136+  0C7A C6 AE 0C      je _gets_escape
0137+  0C7D 76 08         cmp ah, $08      ; check for backspace
0138+  0C7F C6 88 0C      je _gets_backspace
0139+  0C82 1A            mov al, ah
0140+  0C83 3E            mov [d], al
0141+  0C84 79            inc d
0142+  0C85 0A 65 0C      jmp _gets_loop
0143+  0C88             _gets_backspace:
0144+  0C88 7F            dec d
0145+  0C89 0A 65 0C      jmp _gets_loop
0146+  0C8C             _gets_ansi_esc:
0147+  0C8C 19 01         mov al, 1
0148+  0C8E 05 03         syscall sys_io        ; receive in ah without echo
0149+  0C90 76 5B         cmp ah, '['
0150+  0C92 C7 65 0C      jne _gets_loop
0151+  0C95 19 01         mov al, 1
0152+  0C97 05 03         syscall sys_io          ; receive in ah without echo
0153+  0C99 76 64         cmp ah, 'd'
0154+  0C9B C6 A6 0C      je _gets_left_arrow
0155+  0C9E 76 63         cmp ah, 'c'
0156+  0CA0 C6 AA 0C      je _gets_right_arrow
0157+  0CA3 0A 65 0C      jmp _gets_loop
0158+  0CA6             _gets_left_arrow:
0159+  0CA6 7F            dec d
0160+  0CA7 0A 65 0C      jmp _gets_loop
0161+  0CAA             _gets_right_arrow:
0162+  0CAA 79            inc d
0163+  0CAB 0A 65 0C      jmp _gets_loop
0164+  0CAE             _gets_escape:
0165+  0CAE 19 01         mov al, 1
0166+  0CB0 05 03         syscall sys_io      ; receive in ah
0167+  0CB2 76 6E         cmp ah, 'n'
0168+  0CB4 C6 D3 0C      je _gets_lf
0169+  0CB7 76 72         cmp ah, 'r'
0170+  0CB9 C6 DA 0C      je _gets_cr
0171+  0CBC 76 30         cmp ah, '0'
0172+  0CBE C6 E1 0C      je _gets_null
0173+  0CC1 76 5C         cmp ah, $5c  ; '\'
0174+  0CC3 C6 CC 0C      je _gets_slash
0175+  0CC6 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  0CC7 3E            mov [d], al
0177+  0CC8 79            inc d
0178+  0CC9 0A 65 0C      jmp _gets_loop
0179+  0CCC             _gets_slash:
0180+  0CCC 19 5C         mov al, $5c
0181+  0CCE 3E            mov [d], al
0182+  0CCF 79            inc d
0183+  0CD0 0A 65 0C      jmp _gets_loop
0184+  0CD3             _gets_lf:
0185+  0CD3 19 0A         mov al, $0a
0186+  0CD5 3E            mov [d], al
0187+  0CD6 79            inc d
0188+  0CD7 0A 65 0C      jmp _gets_loop
0189+  0CDA             _gets_cr:
0190+  0CDA 19 0D         mov al, $0d
0191+  0CDC 3E            mov [d], al
0192+  0CDD 79            inc d
0193+  0CDE 0A 65 0C      jmp _gets_loop
0194+  0CE1             _gets_null:
0195+  0CE1 19 00         mov al, $00
0196+  0CE3 3E            mov [d], al
0197+  0CE4 79            inc d
0198+  0CE5 0A 65 0C      jmp _gets_loop
0199+  0CE8             _gets_end:
0200+  0CE8 19 00         mov al, 0
0201+  0CEA 3E            mov [d], al        ; terminate string
0202+  0CEB E7            pop d
0203+  0CEC E4            pop a
0204+  0CED 09            ret
0205+  0CEE             
0206+  0CEE             
0207+  0CEE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  0CEE             ;; input text
0209+  0CEE             ;; terminated with ctrl+d
0210+  0CEE             ;; pointer in d
0211+  0CEE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  0CEE             _gettxt:
0213+  0CEE D7            push a
0214+  0CEF DA            push d
0215+  0CF0             _gettxt_loop:
0216+  0CF0 19 01         mov al, 1
0217+  0CF2 05 03         syscall sys_io      ; receive in ah
0218+  0CF4 76 04         cmp ah, 4      ; eot
0219+  0CF6 C6 2F 0D      je _gettxt_end
0220+  0CF9 76 08         cmp ah, $08      ; check for backspace
0221+  0CFB C6 2B 0D      je _gettxt_backspace
0222+  0CFE 76 5C         cmp ah, $5c        ; '\'
0223+  0D00 C6 09 0D      je _gettxt_escape
0224+  0D03 1A            mov al, ah
0225+  0D04 3E            mov [d], al
0226+  0D05 79            inc d
0227+  0D06 0A F0 0C      jmp _gettxt_loop
0228+  0D09             _gettxt_escape:
0229+  0D09 19 01         mov al, 1
0230+  0D0B 05 03         syscall sys_io      ; receive in ah
0231+  0D0D 76 6E         cmp ah, 'n'
0232+  0D0F C6 1D 0D      je _gettxt_lf
0233+  0D12 76 72         cmp ah, 'r'
0234+  0D14 C6 24 0D      je _gettxt_cr
0235+  0D17 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  0D18 3E            mov [d], al
0237+  0D19 79            inc d
0238+  0D1A 0A F0 0C      jmp _gettxt_loop
0239+  0D1D             _gettxt_lf:
0240+  0D1D 19 0A         mov al, $0a
0241+  0D1F 3E            mov [d], al
0242+  0D20 79            inc d
0243+  0D21 0A F0 0C      jmp _gettxt_loop
0244+  0D24             _gettxt_cr:
0245+  0D24 19 0D         mov al, $0d
0246+  0D26 3E            mov [d], al
0247+  0D27 79            inc d
0248+  0D28 0A F0 0C      jmp _gettxt_loop
0249+  0D2B             _gettxt_backspace:
0250+  0D2B 7F            dec d
0251+  0D2C 0A F0 0C      jmp _gettxt_loop
0252+  0D2F             _gettxt_end:
0253+  0D2F 19 00         mov al, 0
0254+  0D31 3E            mov [d], al        ; terminate string
0255+  0D32 E7            pop d
0256+  0D33 E4            pop a
0257+  0D34 09            ret
0258+  0D35             
0259+  0D35             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  0D35             ; print new line
0261+  0D35             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  0D35             printnl:
0263+  0D35 D7            push a
0264+  0D36 10 00 0A      mov a, $0a00
0265+  0D39 05 03         syscall sys_io
0266+  0D3B 10 00 0D      mov a, $0d00
0267+  0D3E 05 03         syscall sys_io
0268+  0D40 E4            pop a
0269+  0D41 09            ret
0270+  0D42             
0271+  0D42             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  0D42             ; _strtoint
0273+  0D42             ; 4 digit hex string number in d
0274+  0D42             ; integer returned in a
0275+  0D42             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  0D42             _strtointx:
0277+  0D42 D8            push b
0278+  0D43 32            mov bl, [d]
0279+  0D44 37            mov bh, bl
0280+  0D45 33 01 00      mov bl, [d + 1]
0281+  0D48 07 19 0C      call _atoi        ; convert to int in al
0282+  0D4B 23            mov ah, al        ; move to ah
0283+  0D4C 33 02 00      mov bl, [d + 2]
0284+  0D4F 37            mov bh, bl
0285+  0D50 33 03 00      mov bl, [d + 3]
0286+  0D53 07 19 0C      call _atoi        ; convert to int in al
0287+  0D56 E5            pop b
0288+  0D57 09            ret
0289+  0D58             
0290+  0D58             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  0D58             ; _strtoint
0292+  0D58             ; 5 digit base10 string number in d
0293+  0D58             ; integer returned in a
0294+  0D58             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  0D58             _strtoint:
0296+  0D58 E2            push si
0297+  0D59 D8            push b
0298+  0D5A D9            push c
0299+  0D5B DA            push d
0300+  0D5C 07 BB 0B      call _strlen      ; get string length in c
0301+  0D5F 7E            dec c
0302+  0D60 FD 4E         mov si, d
0303+  0D62 12            mov a, c
0304+  0D63 FD 99         shl a
0305+  0D65 3B DC 0E      mov d, table_power
0306+  0D68 59            add d, a
0307+  0D69 38 00 00      mov c, 0
0308+  0D6C             _strtoint_l0:
0309+  0D6C F6            lodsb      ; load ascii to al
0310+  0D6D B9 00         cmp al, 0
0311+  0D6F C6 82 0D      je _strtoint_end
0312+  0D72 6F 30         sub al, $30    ; make into integer
0313+  0D74 22 00         mov ah, 0
0314+  0D76 2A            mov b, [d]
0315+  0D77 AC            mul a, b      ; result in b since it fits in 16bits
0316+  0D78 11            mov a, b
0317+  0D79 28            mov b, c
0318+  0D7A 54            add a, b
0319+  0D7B 39            mov c, a
0320+  0D7C 63 02 00      sub d, 2
0321+  0D7F 0A 6C 0D      jmp _strtoint_l0
0322+  0D82             _strtoint_end:
0323+  0D82 12            mov a, c
0324+  0D83 E7            pop d
0325+  0D84 E6            pop c
0326+  0D85 E5            pop b
0327+  0D86 EF            pop si
0328+  0D87 09            ret
0329+  0D88             
0330+  0D88             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  0D88             ; print null terminated string
0332+  0D88             ; pointer in d
0333+  0D88             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  0D88             _puts:
0335+  0D88 D7            push a
0336+  0D89 DA            push d
0337+  0D8A             _puts_l1:
0338+  0D8A 1E            mov al, [d]
0339+  0D8B B9 00         cmp al, 0
0340+  0D8D C6 99 0D      jz _puts_end
0341+  0D90 23            mov ah, al
0342+  0D91 19 00         mov al, 0
0343+  0D93 05 03         syscall sys_io
0344+  0D95 79            inc d
0345+  0D96 0A 8A 0D      jmp _puts_l1
0346+  0D99             _puts_end:
0347+  0D99 E7            pop d
0348+  0D9A E4            pop a
0349+  0D9B 09            ret
0350+  0D9C             
0351+  0D9C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  0D9C             ; print n size string
0353+  0D9C             ; pointer in d
0354+  0D9C             ; size in c
0355+  0D9C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  0D9C             _putsn:
0357+  0D9C DB            push al
0358+  0D9D DA            push d
0359+  0D9E D9            push c
0360+  0D9F             _putsn_l0:
0361+  0D9F 1E            mov al, [d]
0362+  0DA0 23            mov ah, al
0363+  0DA1 19 00         mov al, 0
0364+  0DA3 05 03         syscall sys_io
0365+  0DA5 79            inc d
0366+  0DA6 7E            dec c  
0367+  0DA7 C2 00 00      cmp c, 0
0368+  0DAA C7 9F 0D      jne _putsn_l0
0369+  0DAD             _putsn_end:
0370+  0DAD E6            pop c
0371+  0DAE E7            pop d
0372+  0DAF E8            pop al
0373+  0DB0 09            ret
0374+  0DB1             
0375+  0DB1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  0DB1             ; print 16bit decimal number
0377+  0DB1             ; input number in a
0378+  0DB1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0DB1             print_u16d:
0380+  0DB1 D7            push a
0381+  0DB2 D8            push b
0382+  0DB3 FD D8         push g
0383+  0DB5 26 10 27      mov b, 10000
0384+  0DB8 AE            div a, b      ; get 10000's coeff.
0385+  0DB9 07 DD 0D      call print_number
0386+  0DBC 11            mov a, b
0387+  0DBD 26 E8 03      mov b, 1000
0388+  0DC0 AE            div a, b      ; get 1000's coeff.
0389+  0DC1 07 DD 0D      call print_number
0390+  0DC4 11            mov a, b
0391+  0DC5 26 64 00      mov b, 100
0392+  0DC8 AE            div a, b
0393+  0DC9 07 DD 0D      call print_number
0394+  0DCC 11            mov a, b
0395+  0DCD 26 0A 00      mov b, 10
0396+  0DD0 AE            div a, b
0397+  0DD1 07 DD 0D      call print_number
0398+  0DD4 1B            mov al, bl      ; 1's coeff in bl
0399+  0DD5 07 DD 0D      call print_number
0400+  0DD8 FD F1         pop g
0401+  0DDA E5            pop b
0402+  0DDB E4            pop a
0403+  0DDC 09            ret
0404+  0DDD             
0405+  0DDD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  0DDD             ; print al
0407+  0DDD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  0DDD             print_number:
0409+  0DDD 6A 30         add al, $30
0410+  0DDF 23            mov ah, al
0411+  0DE0 07 5C 0C      call _putchar
0412+  0DE3 09            ret
0413+  0DE4             
0414+  0DE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  0DE4             ; print 16bit hex integer
0416+  0DE4             ; integer value in reg b
0417+  0DE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  0DE4             print_u16x:
0419+  0DE4 D7            push a
0420+  0DE5 D8            push b
0421+  0DE6 DD            push bl
0422+  0DE7 30            mov bl, bh
0423+  0DE8 07 2A 0C      call _itoa        ; convert bh to char in a
0424+  0DEB 2F            mov bl, al        ; save al
0425+  0DEC 19 00         mov al, 0
0426+  0DEE 05 03         syscall sys_io        ; display ah
0427+  0DF0 24            mov ah, bl        ; retrieve al
0428+  0DF1 19 00         mov al, 0
0429+  0DF3 05 03         syscall sys_io        ; display al
0430+  0DF5             
0431+  0DF5 EA            pop bl
0432+  0DF6 07 2A 0C      call _itoa        ; convert bh to char in a
0433+  0DF9 2F            mov bl, al        ; save al
0434+  0DFA 19 00         mov al, 0
0435+  0DFC 05 03         syscall sys_io        ; display ah
0436+  0DFE 24            mov ah, bl        ; retrieve al
0437+  0DFF 19 00         mov al, 0
0438+  0E01 05 03         syscall sys_io        ; display al
0439+  0E03             
0440+  0E03 E5            pop b
0441+  0E04 E4            pop a
0442+  0E05 09            ret
0443+  0E06             
0444+  0E06             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  0E06             ; input 16bit hex integer
0446+  0E06             ; read 16bit integer into a
0447+  0E06             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  0E06             scan_u16x:
0449+  0E06 F8 10 00      enter 16
0450+  0E09 D8            push b
0451+  0E0A DA            push d
0452+  0E0B             
0453+  0E0B FA F1 FF      lea d, [bp + -15]
0454+  0E0E 07 63 0C      call _gets        ; get number
0455+  0E11             
0456+  0E11 32            mov bl, [d]
0457+  0E12 37            mov bh, bl
0458+  0E13 33 01 00      mov bl, [d + 1]
0459+  0E16 07 19 0C      call _atoi        ; convert to int in al
0460+  0E19 23            mov ah, al        ; move to ah
0461+  0E1A             
0462+  0E1A 33 02 00      mov bl, [d + 2]
0463+  0E1D 37            mov bh, bl
0464+  0E1E 33 03 00      mov bl, [d + 3]
0465+  0E21 07 19 0C      call _atoi        ; convert to int in al
0466+  0E24             
0467+  0E24 E7            pop d
0468+  0E25 E5            pop b
0469+  0E26 F9            leave
0470+  0E27 09            ret
0471+  0E28             
0472+  0E28             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  0E28             ; print 8bit hex integer
0474+  0E28             ; integer value in reg bl
0475+  0E28             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0E28             print_u8x:
0477+  0E28 D7            push a
0478+  0E29 DD            push bl
0479+  0E2A             
0480+  0E2A 07 2A 0C      call _itoa        ; convert bl to char in a
0481+  0E2D 2F            mov bl, al        ; save al
0482+  0E2E 19 00         mov al, 0
0483+  0E30 05 03         syscall sys_io        ; display ah
0484+  0E32 24            mov ah, bl        ; retrieve al
0485+  0E33 19 00         mov al, 0
0486+  0E35 05 03         syscall sys_io        ; display al
0487+  0E37             
0488+  0E37 EA            pop bl
0489+  0E38 E4            pop a
0490+  0E39 09            ret
0491+  0E3A             
0492+  0E3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  0E3A             ; print 8bit decimal unsigned number
0494+  0E3A             ; input number in al
0495+  0E3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  0E3A             print_u8d:
0497+  0E3A D7            push a
0498+  0E3B D8            push b
0499+  0E3C FD D8         push g
0500+  0E3E 22 00         mov ah, 0
0501+  0E40 26 64 00      mov b, 100
0502+  0E43 AE            div a, b
0503+  0E44 D8            push b      ; save remainder
0504+  0E45 B9 00         cmp al, 0
0505+  0E47 C6 51 0E      je skip100
0506+  0E4A 6A 30         add al, $30
0507+  0E4C 23            mov ah, al
0508+  0E4D 19 00         mov al, 0
0509+  0E4F 05 03         syscall sys_io  ; print coeff
0510+  0E51             skip100:
0511+  0E51 E4            pop a
0512+  0E52 22 00         mov ah, 0
0513+  0E54 26 0A 00      mov b, 10
0514+  0E57 AE            div a, b
0515+  0E58 D8            push b      ; save remainder
0516+  0E59 B9 00         cmp al, 0
0517+  0E5B C6 65 0E      je skip10
0518+  0E5E 6A 30         add al, $30
0519+  0E60 23            mov ah, al
0520+  0E61 19 00         mov al, 0
0521+  0E63 05 03         syscall sys_io  ; print coeff
0522+  0E65             skip10:
0523+  0E65 E4            pop a
0524+  0E66 1B            mov al, bl
0525+  0E67 6A 30         add al, $30
0526+  0E69 23            mov ah, al
0527+  0E6A 19 00         mov al, 0
0528+  0E6C 05 03         syscall sys_io  ; print coeff
0529+  0E6E FD F1         pop g
0530+  0E70 E5            pop b
0531+  0E71 E4            pop a
0532+  0E72 09            ret
0533+  0E73             
0534+  0E73             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  0E73             ; input 8bit hex integer
0536+  0E73             ; read 8bit integer into al
0537+  0E73             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  0E73             scan_u8x:
0539+  0E73 F8 04 00      enter 4
0540+  0E76 D8            push b
0541+  0E77 DA            push d
0542+  0E78             
0543+  0E78 FA FD FF      lea d, [bp + -3]
0544+  0E7B 07 63 0C      call _gets        ; get number
0545+  0E7E             
0546+  0E7E 32            mov bl, [d]
0547+  0E7F 37            mov bh, bl
0548+  0E80 33 01 00      mov bl, [d + 1]
0549+  0E83 07 19 0C      call _atoi        ; convert to int in al
0550+  0E86             
0551+  0E86 E7            pop d
0552+  0E87 E5            pop b
0553+  0E88 F9            leave
0554+  0E89 09            ret
0555+  0E8A             
0556+  0E8A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  0E8A             ; input decimal number
0558+  0E8A             ; result in a
0559+  0E8A             ; 655'\0'
0560+  0E8A             ; low--------high
0561+  0E8A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  0E8A             scan_u16d:
0563+  0E8A F8 08 00      enter 8
0564+  0E8D E2            push si
0565+  0E8E D8            push b
0566+  0E8F D9            push c
0567+  0E90 DA            push d
0568+  0E91 FA F9 FF      lea d, [bp +- 7]
0569+  0E94 07 63 0C      call _gets
0570+  0E97 07 BB 0B      call _strlen      ; get string length in c
0571+  0E9A 7E            dec c
0572+  0E9B FD 4E         mov si, d
0573+  0E9D 12            mov a, c
0574+  0E9E FD 99         shl a
0575+  0EA0 3B DC 0E      mov d, table_power
0576+  0EA3 59            add d, a
0577+  0EA4 38 00 00      mov c, 0
0578+  0EA7             mul_loop:
0579+  0EA7 F6            lodsb      ; load ascii to al
0580+  0EA8 B9 00         cmp al, 0
0581+  0EAA C6 BD 0E      je mul_exit
0582+  0EAD 6F 30         sub al, $30    ; make into integer
0583+  0EAF 22 00         mov ah, 0
0584+  0EB1 2A            mov b, [d]
0585+  0EB2 AC            mul a, b      ; result in b since it fits in 16bits
0586+  0EB3 11            mov a, b
0587+  0EB4 28            mov b, c
0588+  0EB5 54            add a, b
0589+  0EB6 39            mov c, a
0590+  0EB7 63 02 00      sub d, 2
0591+  0EBA 0A A7 0E      jmp mul_loop
0592+  0EBD             mul_exit:
0593+  0EBD 12            mov a, c
0594+  0EBE E7            pop d
0595+  0EBF E6            pop c
0596+  0EC0 E5            pop b
0597+  0EC1 EF            pop si
0598+  0EC2 F9            leave
0599+  0EC3 09            ret
0600+  0EC4             
0601+  0EC4             
0602+  0EC4 30 31 32 33 s_hex_digits:    .db "0123456789abcdef"  
0602+  0EC8 34 35 36 37 
0602+  0ECC 38 39 61 62 
0602+  0ED0 63 64 65 66 
0603+  0ED4 1B 5B 32 6A s_telnet_clear:  .db "\033[2j\033[h", 0
0603+  0ED8 1B 5B 68 00 
0604+  0EDC             
0605+  0EDC             table_power:
0606+  0EDC 01 00         .dw 1
0607+  0EDE 0A 00         .dw 10
0608+  0EE0 64 00         .dw 100
0609+  0EE2 E8 03         .dw 1000
0610+  0EE4 10 27         .dw 100000280   0EE6             .include "lib/ctype.asm"
0001+  0EE6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0EE6             ; ctype.s
0003+  0EE6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0EE6             
0005+  0EE6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0EE6             ;; c character classification is an operation provided by a group of functions in the ansi c standard library
0007+  0EE6             ;; for the c programming language. these functions are used to test characters for membership in a particular
0008+  0EE6             ;; class of characters, such as alphabetic characters, control characters, etc. both single-byte, and wide
0009+  0EE6             ;; characters are supported.
0010+  0EE6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0EE6             ;; _isalnum 
0012+  0EE6             ;; _isalpha 
0013+  0EE6             ;; islower 
0014+  0EE6             ;; isupper 
0015+  0EE6             ;; _isdigit 
0016+  0EE6             ;; isxdigit
0017+  0EE6             ;; iscntrl 
0018+  0EE6             ;; isgraph 
0019+  0EE6             ;; _isspace 
0020+  0EE6             ;; isblank 
0021+  0EE6             ;; isprint 
0022+  0EE6             ;; ispunct 
0023+  0EE6             ;; tolower 
0024+  0EE6             ;; toupper
0025+  0EE6             
0026+  0EE6             
0027+  0EE6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0EE6             ;; is alphanumeric
0029+  0EE6             ;; sets zf according with result
0030+  0EE6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0EE6             _isalnum:
0032+  0EE6 07 03 0F    	call _isalpha
0033+  0EE9 C6 EF 0E    	je _isalnum_exit
0034+  0EEC 07 F0 0E    	call _isdigit
0035+  0EEF             _isalnum_exit:
0036+  0EEF 09          	ret	
0037+  0EF0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0EF0             ;; is digit
0039+  0EF0             ;; sets zf according with result
0040+  0EF0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0EF0             _isdigit:
0042+  0EF0 DB          	push al
0043+  0EF1 B9 30       	cmp al, '0'
0044+  0EF3 C8 FF 0E    	jlu _isdigit_false
0045+  0EF6 B9 39       	cmp al, '9'
0046+  0EF8 D1 FF 0E    	jgu _isdigit_false
0047+  0EFB 87 00       	and al, 0	; set zf
0048+  0EFD E8          	pop al
0049+  0EFE 09          	ret
0050+  0EFF             _isdigit_false:
0051+  0EFF 8B 01       	or al, 1	; clear zf
0052+  0F01 E8          	pop al
0053+  0F02 09          	ret	
0054+  0F03             	
0055+  0F03             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0F03             ;; is alpha
0057+  0F03             ;; sets zf according with result
0058+  0F03             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0F03             _isalpha:
0060+  0F03 DB          	push al
0061+  0F04 B9 5F       	cmp al, '_'
0062+  0F06 C6 26 0F    	je _isalpha_true
0063+  0F09 B9 2E       	cmp al, '.'
0064+  0F0B C6 26 0F    	je _isalpha_true
0065+  0F0E B9 61       	cmp al, 'a'
0066+  0F10 C8 22 0F    	jlu _isalpha_false
0067+  0F13 B9 7A       	cmp al, 'z'
0068+  0F15 D1 22 0F    	jgu _isalpha_false
0069+  0F18 B9 7A       	cmp al, 'z'
0070+  0F1A D0 26 0F    	jleu _isalpha_true
0071+  0F1D B9 61       	cmp al, 'a'
0072+  0F1F C9 26 0F    	jgeu _isalpha_true
0073+  0F22             _isalpha_false:
0074+  0F22 8B 01       	or al, 1	; clear zf
0075+  0F24 E8          	pop al
0076+  0F25 09          	ret
0077+  0F26             _isalpha_true:
0078+  0F26 87 00       	and al, 0	; set zf
0079+  0F28 E8          	pop al
0080+  0F29 09          	ret
0081+  0F2A             
0082+  0F2A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0F2A             ;; is path-alpha
0084+  0F2A             ;; sets zf according with result
0085+  0F2A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0F2A             ispath:
0087+  0F2A DB          	push al
0088+  0F2B 07 F0 0E    	call _isdigit
0089+  0F2E C6 58 0F    	je ispath_true
0090+  0F31 B9 5F       	cmp al, '_'
0091+  0F33 C6 58 0F    	je ispath_true
0092+  0F36 B9 2F       	cmp al, '/'
0093+  0F38 C6 58 0F    	je ispath_true
0094+  0F3B B9 2E       	cmp al, '.'
0095+  0F3D C6 58 0F    	je ispath_true
0096+  0F40 B9 61       	cmp al, 'a'
0097+  0F42 C8 54 0F    	jlu ispath_false
0098+  0F45 B9 7A       	cmp al, 'z'
0099+  0F47 D1 54 0F    	jgu ispath_false
0100+  0F4A B9 7A       	cmp al, 'z'
0101+  0F4C D0 58 0F    	jleu ispath_true
0102+  0F4F B9 61       	cmp al, 'a'
0103+  0F51 C9 58 0F    	jgeu ispath_true
0104+  0F54             ispath_false:
0105+  0F54 8B 01       	or al, 1	; clear zf
0106+  0F56 E8          	pop al
0107+  0F57 09          	ret
0108+  0F58             ispath_true:
0109+  0F58 87 00       	and al, 0	; set zf
0110+  0F5A E8          	pop al
0111+  0F5B 09          	ret
0112+  0F5C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0F5C             ;; is space
0114+  0F5C             ;; sets zf according with result
0115+  0F5C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0F5C             _isspace:
0117+  0F5C B9 20       	cmp al, $20		; ' '
0118+  0F5E C6 72 0F    	je _isspace_exit
0119+  0F61 B9 09       	cmp al, $09		; '\t'
0120+  0F63 C6 72 0F    	je _isspace_exit
0121+  0F66 B9 0A       	cmp al, $0a		; '\n'
0122+  0F68 C6 72 0F    	je _isspace_exit
0123+  0F6B B9 0D       	cmp al, $0d		; '\r'
0124+  0F6D C6 72 0F    	je _isspace_exit
0125+  0F70 B9 0B       	cmp al, $0b		; '\v'
0126+  0F72             _isspace_exit:
0127+  0F72 09          	ret	
0128+  0F73             
0129+  0F73             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0F73             ; to lower
0131+  0F73             ; input in al
0132+  0F73             ; output in al
0133+  0F73             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0F73             _to_lower:
0135+  0F73 B9 7A       	cmp al, 'z'
0136+  0F75 D1 7A 0F    	jgu _to_lower_ret
0137+  0F78 6A 20       	add al, $20				; convert to lower case
0138+  0F7A             _to_lower_ret:
0139+  0F7A 09          	ret
0140+  0F7B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0F7B             ; to upper
0142+  0F7B             ; input in al
0143+  0F7B             ; output in al
0144+  0F7B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0F7B             _to_upper:
0146+  0F7B B9 61       	cmp al, 'a'
0147+  0F7D C8 82 0F    	jlu _to_upper_ret
0148+  0F80 6F 20       	sub al, $20			; convert to upper case
0149+  0F82             _to_upper_ret:
0150+  0F82 09          	ret
0151+  0F83             
0281   0F83             .include "lib/token.asm"
0001+  0F83             toktyp_identifier  .equ 0
0002+  0F83             toktyp_keyword     .equ 1
0003+  0F83             toktyp_delimiter   .equ 2
0004+  0F83             toktyp_string      .equ 3
0005+  0F83             toktyp_char        .equ 4
0006+  0F83             toktyp_numeric     .equ 5
0007+  0F83             toktyp_end         .equ 6
0008+  0F83             
0009+  0F83             tok_null           .equ 0
0010+  0F83             tok_fslash         .equ 1
0011+  0F83             tok_times          .equ 2
0012+  0F83             tok_plus           .equ 3
0013+  0F83             tok_minus          .equ 4
0014+  0F83             tok_dot            .equ 5
0015+  0F83             tok_semi           .equ 6
0016+  0F83             tok_angle          .equ 7
0017+  0F83             tok_tilde          .equ 8
0018+  0F83             tok_equal          .equ 9
0019+  0F83             tok_colon          .equ 10
0020+  0F83             tok_comma          .equ 11
0021+  0F83             
0022+  0F83             tok_end            .equ 20
0023+  0F83             
0024+  0F83             
0025+  0F83             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0F83             ;; read a full command argment from shell input buffer
0027+  0F83             ;; argument is written into tokstr
0028+  0F83             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  0F83             get_arg:
0030+  0F83 D7            push a
0031+  0F84 E2            push si
0032+  0F85 E3            push di
0033+  0F86 19 00         mov al, 0
0034+  0F88 3D B1 11      mov [tokstr], al      ; nullify tokstr string
0035+  0F8B 14 AD 11      mov a, [prog]
0036+  0F8E 4D            mov si, a
0037+  0F8F FD 4F B1 11   mov di, tokstr
0038+  0F93             get_arg_skip_spaces:
0039+  0F93 F6            lodsb
0040+  0F94 07 5C 0F      call _isspace
0041+  0F97 C6 93 0F      je get_arg_skip_spaces
0042+  0F9A             get_arg_l0:
0043+  0F9A B9 3B         cmp al, $3b        ; check if is ';'
0044+  0F9C C6 A9 0F      je get_arg_end
0045+  0F9F B9 00         cmp al, 0
0046+  0FA1 C6 A9 0F      je get_arg_end      ; check if end of input
0047+  0FA4 F7            stosb
0048+  0FA5 F6            lodsb
0049+  0FA6 0A 9A 0F      jmp get_arg_l0
0050+  0FA9             get_arg_end:
0051+  0FA9 19 00         mov al, 0
0052+  0FAB F7            stosb
0053+  0FAC D5 01 00      sub si, 1
0054+  0FAF 4E            mov a, si
0055+  0FB0 42 AD 11      mov [prog], a    ; update pointer
0056+  0FB3 F0            pop di
0057+  0FB4 EF            pop si
0058+  0FB5 E4            pop a
0059+  0FB6 09            ret
0060+  0FB7             
0061+  0FB7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0FB7             ;; read a path formation from shell input buffer
0063+  0FB7             ;; path is written into tokstr
0064+  0FB7             ;; /usr/bin
0065+  0FB7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0FB7             get_path:
0067+  0FB7 D7            push a
0068+  0FB8 E2            push si
0069+  0FB9 E3            push di
0070+  0FBA 19 00         mov al, 0
0071+  0FBC 3D B1 11      mov [tokstr], al      ; nullify tokstr string
0072+  0FBF 14 AD 11      mov a, [prog]
0073+  0FC2 4D            mov si, a
0074+  0FC3 FD 4F B1 11   mov di, tokstr
0075+  0FC7             get_path_skip_spaces:
0076+  0FC7 F6            lodsb
0077+  0FC8 07 5C 0F      call _isspace
0078+  0FCB C6 C7 0F      je get_path_skip_spaces
0079+  0FCE             get_path_is_pathchar:
0080+  0FCE F7            stosb
0081+  0FCF F6            lodsb
0082+  0FD0 07 E6 0E      call _isalnum      ;check if is alphanumeric
0083+  0FD3 C6 CE 0F      je get_path_is_pathchar
0084+  0FD6 B9 2F         cmp al, '/'        ; check if is '/'
0085+  0FD8 C6 CE 0F      je get_path_is_pathchar
0086+  0FDB 19 00         mov al, 0
0087+  0FDD F7            stosb
0088+  0FDE D5 01 00      sub si, 1
0089+  0FE1 4E            mov a, si
0090+  0FE2 42 AD 11      mov [prog], a    ; update pointer
0091+  0FE5             get_path_end:
0092+  0FE5 F0            pop di
0093+  0FE6 EF            pop si
0094+  0FE7 E4            pop a
0095+  0FE8 09            ret
0096+  0FE9             
0097+  0FE9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  0FE9             ;; read a line
0099+  0FE9             ;; line is written into tokstr
0100+  0FE9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  0FE9             get_line:
0102+  0FE9 D7            push a
0103+  0FEA E2            push si
0104+  0FEB E3            push di
0105+  0FEC 19 00         mov al, 0
0106+  0FEE 3D B1 11      mov [tokstr], al      ; nullify tokstr string
0107+  0FF1 14 AD 11      mov a, [prog]
0108+  0FF4 4D            mov si, a
0109+  0FF5 FD 4F B1 11   mov di, tokstr
0110+  0FF9             get_line_l0:
0111+  0FF9 F6            lodsb
0112+  0FFA B9 0A         cmp al, $0a    ; check for new line
0113+  0FFC C6 03 10      je get_line_exit
0114+  0FFF F7            stosb
0115+  1000 0A F9 0F      jmp get_line_l0
0116+  1003             get_line_exit:
0117+  1003 19 00         mov al, 0
0118+  1005 F7            stosb
0119+  1006 4E            mov a, si
0120+  1007 42 AD 11      mov [prog], a    ; update pointer
0121+  100A F0            pop di
0122+  100B EF            pop si
0123+  100C E4            pop a
0124+  100D 09            ret
0125+  100E             
0126+  100E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  100E             ;; token parser
0128+  100E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  100E             get_token:
0130+  100E D7            push a
0131+  100F DA            push d
0132+  1010 E2            push si
0133+  1011 E3            push di
0134+  1012 19 00         mov al, 0
0135+  1014 3D B1 11      mov [tokstr], al      ; nullify tokstr string
0136+  1017 19 00         mov al, tok_null
0137+  1019 3D B0 11      mov [tok], al        ; nullify token
0138+  101C 14 AD 11      mov a, [prog]
0139+  101F 4D            mov si, a
0140+  1020 FD 4F B1 11   mov di, tokstr
0141+  1024             get_tok_skip_spaces:
0142+  1024 F6            lodsb
0143+  1025 07 5C 0F      call _isspace
0144+  1028 C6 24 10      je get_tok_skip_spaces
0145+  102B B9 00         cmp al, 0      ; check for end of input (null)
0146+  102D C6 12 11      je get_token_end
0147+  1030 B9 23         cmp al, '#'      ; comments!
0148+  1032 C6 40 11      je get_tok_comment
0149+  1035 07 E6 0E      call _isalnum
0150+  1038 C6 1F 11      jz is_alphanumeric
0151+  103B             ; other token types
0152+  103B             get_token_slash:
0153+  103B B9 2F         cmp al, '/'        ; check if '/'
0154+  103D C7 55 10      jne get_token_minus
0155+  1040 F7            stosb          ; store '/' into token string
0156+  1041 19 00         mov al, 0
0157+  1043 F7            stosb          ; terminate token string
0158+  1044 19 01         mov al, tok_fslash
0159+  1046 3D B0 11      mov [tok], al      
0160+  1049 19 02         mov al, toktyp_delimiter
0161+  104B 3D AF 11      mov [toktyp], al
0162+  104E 4E            mov a, si
0163+  104F 42 AD 11      mov [prog], a    ; update pointer
0164+  1052 0A 3B 11      jmp get_token_return
0165+  1055             get_token_minus:
0166+  1055 B9 2D         cmp al, '-'        ; check if '-'
0167+  1057 C7 6F 10      jne get_token_comma
0168+  105A F7            stosb          ; store '-' into token string
0169+  105B 19 00         mov al, 0
0170+  105D F7            stosb          ; terminate token string
0171+  105E 19 04         mov al, tok_minus
0172+  1060 3D B0 11      mov [tok], al      
0173+  1063 19 02         mov al, toktyp_delimiter
0174+  1065 3D AF 11      mov [toktyp], al
0175+  1068 4E            mov a, si
0176+  1069 42 AD 11      mov [prog], a    ; update pointer
0177+  106C 0A 3B 11      jmp get_token_return
0178+  106F             get_token_comma:
0179+  106F B9 2C         cmp al, ','        ; check if ','
0180+  1071 C7 89 10      jne get_token_semi
0181+  1074 F7            stosb          ; store ',' into token string
0182+  1075 19 00         mov al, 0
0183+  1077 F7            stosb          ; terminate token string
0184+  1078 19 0B         mov al, tok_comma
0185+  107A 3D B0 11      mov [tok], al      
0186+  107D 19 02         mov al, toktyp_delimiter
0187+  107F 3D AF 11      mov [toktyp], al
0188+  1082 4E            mov a, si
0189+  1083 42 AD 11      mov [prog], a    ; update pointer
0190+  1086 0A 3B 11      jmp get_token_return
0191+  1089             get_token_semi:
0192+  1089 B9 3B         cmp al, $3b        ; check if ';'
0193+  108B C7 A3 10      jne get_token_colon
0194+  108E F7            stosb          ; store ';' into token string
0195+  108F 19 00         mov al, 0
0196+  1091 F7            stosb          ; terminate token string
0197+  1092 19 06         mov al, tok_semi
0198+  1094 3D B0 11      mov [tok], al      
0199+  1097 19 02         mov al, toktyp_delimiter
0200+  1099 3D AF 11      mov [toktyp], al
0201+  109C 4E            mov a, si
0202+  109D 42 AD 11      mov [prog], a    ; update pointer
0203+  10A0 0A 3B 11      jmp get_token_return
0204+  10A3             get_token_colon:
0205+  10A3 B9 3A         cmp al, $3a        ; check if ':'
0206+  10A5 C7 BD 10      jne get_token_angle
0207+  10A8 F7            stosb          ; store ':' into token string
0208+  10A9 19 00         mov al, 0
0209+  10AB F7            stosb          ; terminate token string
0210+  10AC 19 0A         mov al, tok_colon
0211+  10AE 3D B0 11      mov [tok], al      
0212+  10B1 19 02         mov al, toktyp_delimiter
0213+  10B3 3D AF 11      mov [toktyp], al
0214+  10B6 4E            mov a, si
0215+  10B7 42 AD 11      mov [prog], a    ; update pointer
0216+  10BA 0A 3B 11      jmp get_token_return
0217+  10BD             get_token_angle:
0218+  10BD B9 3E         cmp al, $3e        ; check if '>'
0219+  10BF C7 D7 10      jne get_token_tilde
0220+  10C2 F7            stosb          ; store '>' into token string
0221+  10C3 19 00         mov al, 0
0222+  10C5 F7            stosb          ; terminate token string
0223+  10C6 19 07         mov al, tok_angle
0224+  10C8 3D B0 11      mov [tok], al      
0225+  10CB 19 02         mov al, toktyp_delimiter
0226+  10CD 3D AF 11      mov [toktyp], al
0227+  10D0 4E            mov a, si
0228+  10D1 42 AD 11      mov [prog], a    ; update pointer
0229+  10D4 0A 3B 11      jmp get_token_return
0230+  10D7             get_token_tilde:
0231+  10D7 B9 7E         cmp al, '~'        ; check if '~'
0232+  10D9 C7 F1 10      jne get_token_equal
0233+  10DC F7            stosb          ; store '~' into token string
0234+  10DD 19 00         mov al, 0
0235+  10DF F7            stosb          ; terminate token string
0236+  10E0 19 08         mov al, tok_tilde
0237+  10E2 3D B0 11      mov [tok], al      
0238+  10E5 19 02         mov al, toktyp_delimiter
0239+  10E7 3D AF 11      mov [toktyp], al
0240+  10EA 4E            mov a, si
0241+  10EB 42 AD 11      mov [prog], a    ; update pointer
0242+  10EE 0A 3B 11      jmp get_token_return
0243+  10F1             get_token_equal:
0244+  10F1 B9 3D         cmp al, '='        ; check if '='
0245+  10F3 C7 0B 11      jne get_token_skip
0246+  10F6 F7            stosb          ; store '=' into token string
0247+  10F7 19 00         mov al, 0
0248+  10F9 F7            stosb          ; terminate token string
0249+  10FA 19 09         mov al, tok_equal
0250+  10FC 3D B0 11      mov [tok], al      
0251+  10FF 19 02         mov al, toktyp_delimiter
0252+  1101 3D AF 11      mov [toktyp], al
0253+  1104 4E            mov a, si
0254+  1105 42 AD 11      mov [prog], a    ; update pointer
0255+  1108 0A 3B 11      jmp get_token_return
0256+  110B             get_token_skip:
0257+  110B 4E            mov a, si
0258+  110C 42 AD 11      mov [prog], a    ; update pointer
0259+  110F 0A 3B 11      jmp get_token_return
0260+  1112             get_token_end:        ; end of file token
0261+  1112 19 14         mov al, tok_end
0262+  1114 3D B0 11      mov [tok], al
0263+  1117 19 06         mov al, toktyp_end
0264+  1119 3D AF 11      mov [toktyp], al
0265+  111C 0A 3B 11      jmp get_token_return
0266+  111F             is_alphanumeric:
0267+  111F F7            stosb
0268+  1120 F6            lodsb
0269+  1121 07 E6 0E      call _isalnum      ;check if is alphanumeric
0270+  1124 C6 1F 11      jz is_alphanumeric
0271+  1127 B9 2E         cmp al, $2e        ; check if is '.'
0272+  1129 C6 1F 11      je is_alphanumeric
0273+  112C 19 00         mov al, 0
0274+  112E F7            stosb
0275+  112F 19 00         mov al, toktyp_identifier
0276+  1131 3D AF 11      mov [toktyp], al
0277+  1134 D5 01 00      sub si, 1
0278+  1137 4E            mov a, si
0279+  1138 42 AD 11      mov [prog], a    ; update pointer
0280+  113B             get_token_return:
0281+  113B F0            pop di
0282+  113C EF            pop si
0283+  113D E7            pop d
0284+  113E E4            pop a
0285+  113F 09            ret
0286+  1140             get_tok_comment:
0287+  1140 F6            lodsb
0288+  1141 B9 0A         cmp al, $0a      ; new line
0289+  1143 C7 40 11      jne get_tok_comment
0290+  1146 0A 24 10      jmp get_tok_skip_spaces
0291+  1149             
0292+  1149             
0293+  1149             get_number:
0294+  1149 D7            push a
0295+  114A DA            push d
0296+  114B E2            push si
0297+  114C E3            push di
0298+  114D 19 00         mov al, 0
0299+  114F 3D B1 11      mov [tokstr], al      ; nullify tokstr string
0300+  1152 19 00         mov al, tok_null
0301+  1154 3D B0 11      mov [tok], al        ; nullify token
0302+  1157 14 AD 11      mov a, [prog]
0303+  115A 4D            mov si, a
0304+  115B FD 4F B1 11   mov di, tokstr
0305+  115F             get_number_skip_spaces:
0306+  115F F6            lodsb
0307+  1160 07 5C 0F      call _isspace
0308+  1163 C6 5F 11      je get_number_skip_spaces
0309+  1166 B9 00         cmp al, 0      ; check for end of input (null)
0310+  1168 C7 78 11      jne get_number_l0
0311+  116B 19 14         mov al, tok_end
0312+  116D 3D B0 11      mov [tok], al
0313+  1170 19 06         mov al, toktyp_end
0314+  1172 3D AF 11      mov [toktyp], al
0315+  1175 0A 8F 11      jmp get_number_return
0316+  1178             get_number_l0:
0317+  1178 F7            stosb
0318+  1179 F6            lodsb
0319+  117A 07 F0 0E      call _isdigit      ;check if is numeric
0320+  117D C6 78 11      jz get_number_l0
0321+  1180 19 00         mov al, 0
0322+  1182 F7            stosb
0323+  1183 19 05         mov al, toktyp_numeric
0324+  1185 3D AF 11      mov [toktyp], al
0325+  1188 D5 01 00      sub si, 1
0326+  118B 4E            mov a, si
0327+  118C 42 AD 11      mov [prog], a    ; update pointer
0328+  118F             get_number_return:
0329+  118F F0            pop di
0330+  1190 EF            pop si
0331+  1191 E7            pop d
0332+  1192 E4            pop a
0333+  1193 09            ret
0334+  1194             
0335+  1194             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  1194             ;; put back token
0337+  1194             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0338+  1194             _putback:
0339+  1194 D7            push a
0340+  1195 E2            push si
0341+  1196 FD 4D B1 11   mov si, tokstr  
0342+  119A             _putback_loop:
0343+  119A F6            lodsb
0344+  119B B9 00         cmp al, 0
0345+  119D C6 AA 11      je _putback_end
0346+  11A0 14 AD 11      mov a, [prog]
0347+  11A3 7D            dec a
0348+  11A4 42 AD 11      mov [prog], a      ; update pointer
0349+  11A7 0A 9A 11      jmp _putback_loop
0350+  11AA             _putback_end:
0351+  11AA EF            pop si
0352+  11AB E4            pop a
0353+  11AC 09            ret
0354+  11AD             
0355+  11AD             
0356+  11AD             
0357+  11AD             
0358+  11AD 00 00       prog:      .dw 0          ; pointer to current position in buffer
0359+  11AF             
0360+  11AF 00          toktyp:    .db 0          ; token type symbol
0361+  11B0 00          tok:       .db 0          ; current token symbol
0362+  11B1 00 00 00 00 tokstr:    .fill 256, 0   ; token as a string
0362+  11B5 00 00 00 00 
0362+  11B9 00 00 00 00 
0362+  11BD 00 00 00 00 
0362+  11C1 00 00 00 00 
0362+  11C5 00 00 00 00 
0362+  11C9 00 00 00 00 
0362+  11CD 00 00 00 00 
0362+  11D1 00 00 00 00 
0362+  11D5 00 00 00 00 
0362+  11D9 00 00 00 00 
0362+  11DD 00 00 00 00 
0362+  11E1 00 00 00 00 
0362+  11E5 00 00 00 00 
0362+  11E9 00 00 00 00 
0362+  11ED 00 00 00 00 
0362+  11F1 00 00 00 00 
0362+  11F5 00 00 00 00 
0362+  11F9 00 00 00 00 
0362+  11FD 00 00 00 00 
0362+  1201 00 00 00 00 
0362+  1205 00 00 00 00 
0362+  1209 00 00 00 00 
0362+  120D 00 00 00 00 
0362+  1211 00 00 00 00 
0362+  1215 00 00 00 00 
0362+  1219 00 00 00 00 
0362+  121D 00 00 00 00 
0362+  1221 00 00 00 00 
0362+  1225 00 00 00 00 
0362+  1229 00 00 00 00 
0362+  122D 00 00 00 00 
0362+  1231 00 00 00 00 
0362+  1235 00 00 00 00 
0362+  1239 00 00 00 00 
0362+  123D 00 00 00 00 
0362+  1241 00 00 00 00 
0362+  1245 00 00 00 00 
0362+  1249 00 00 00 00 
0362+  124D 00 00 00 00 
0362+  1251 00 00 00 00 
0362+  1255 00 00 00 00 
0362+  1259 00 00 00 00 
0362+  125D 00 00 00 00 
0362+  1261 00 00 00 00 
0362+  1265 00 00 00 00 
0362+  1269 00 00 00 00 
0362+  126D 00 00 00 00 
0362+  1271 00 00 00 00 
0362+  1275 00 00 00 00 
0362+  1279 00 00 00 00 
0362+  127D 00 00 00 00 
0362+  1281 00 00 00 00 
0362+  1285 00 00 00 00 
0362+  1289 00 00 00 00 
0362+  128D 00 00 00 00 
0362+  1291 00 00 00 00 
0362+  1295 00 00 00 00 
0362+  1299 00 00 00 00 
0362+  129D 00 00 00 00 
0362+  12A1 00 00 00 00 
0362+  12A5 00 00 00 00 
0362+  12A9 00 00 00 00 
0362+  12AD 00 00 00 00 
0282   12B1             
0283   12B1             .end
tasm: Number of errors = 0
