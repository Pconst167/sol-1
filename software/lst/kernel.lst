0001   0000             ; ------------------------------------------------------------------------------------------------------------------;
0002   0000             ; Solarium - Sol-1 Homebrew Minicomputer Operating System Kernel.
0003   0000             ; ------------------------------------------------------------------------------------------------------------------;
0004   0000             
0005   0000             ; memory map
0006   0000             ; ------------------------------------------------------------------------------------------------------------------;
0007   0000             ; 0000 ... 7fff - rom space
0008   0000             ; 8000 ... f7ff - ram space
0009   0000             ; f7ff          - stack root
0010   0000             
0011   0000             ; i/o map
0012   0000             ; ------------------------------------------------------------------------------------------------------------------;
0013   0000             ; ff80 - uart 0 (16550)
0014   0000             ; ff90 - uart 1 (16550)
0015   0000             ; ffa0 - rtc    (m48t02)
0016   0000             ; ffb0 - pio 0  (8255)
0017   0000             ; ffc0 - fdd    (5.25" floppy drive block)
0018   0000             ;   - ffc0      output port (377 flip-flop)                  
0019   0000             ;   - ffc1      input port  (244 buffer)                     
0020   0000             ;   - ffc8      wd1770 status/command    
0021   0000             ;   - ffc9      wd1770 track register
0022   0000             ;   - ffca      wd1770 sector register
0023   0000             ;   - ffcb      wd1770 data register
0024   0000             ;      
0025   0000             ; ffd0 - ide    (compact flash / pata)
0026   0000             ; ffe0 - timer  (8253)
0027   0000             ; fff0 - bios configuration nv-ram store area
0028   0000             ; ------------------------------------------------------------------------------------------------------------------;
0029   0000             
0030   0000             ; ------------------------------------------------------------------------------------------------------------------;
0031   0000             ; system constants
0032   0000             ; ------------------------------------------------------------------------------------------------------------------;
0033   0000             _uart0_data       .equ $ff80         ; data
0034   0000             _uart0_dlab_0     .equ $ff80         ; divisor latch low byte
0035   0000             _uart0_dlab_1     .equ $ff81         ; divisor latch high byte
0036   0000             _uart0_ier        .equ $ff81         ; interrupt enable register
0037   0000             _uart0_fcr        .equ $ff82         ; fifo control register
0038   0000             _uart0_lcr        .equ $ff83         ; line control register
0039   0000             _uart0_lsr        .equ $ff85         ; line status register
0040   0000             
0041   0000             _uart1_data       .equ $ff90         ; data
0042   0000             _uart1_dlab_0     .equ $ff90         ; divisor latch low byte
0043   0000             _uart1_dlab_1     .equ $ff91         ; divisor latch high byte
0044   0000             _uart1_ier        .equ $ff91         ; interrupt enable register
0045   0000             _uart1_fcr        .equ $ff92         ; fifo control register
0046   0000             _uart1_lcr        .equ $ff93         ; line control register
0047   0000             _uart1_lsr        .equ $ff95         ; line status register
0048   0000             
0049   0000             _ide_base         .equ $ffd0         ; ide base
0050   0000             _ide_r0           .equ _ide_base + 0 ; data port
0051   0000             _ide_r1           .equ _ide_base + 1 ; read: error code, write: feature
0052   0000             _ide_r2           .equ _ide_base + 2 ; number of sectors to transfer
0053   0000             _ide_r3           .equ _ide_base + 3 ; sector address lba 0 [0:7]
0054   0000             _ide_r4           .equ _ide_base + 4 ; sector address lba 1 [8:15]
0055   0000             _ide_r5           .equ _ide_base + 5 ; sector address lba 2 [16:23]
0056   0000             _ide_r6           .equ _ide_base + 6 ; sector address lba 3 [24:27 (lsb)]
0057   0000             _ide_r7           .equ _ide_base + 7 ; read: status, write: command       
0058   0000             
0059   0000             _7seg_display     .equ $ffb0         ; bios post code hex display (2 digits) (connected to pio a)
0060   0000             _bios_post_ctrl   .equ $ffb3         ; bios post display control register, 80h = as output
0061   0000             _pio_a            .equ $ffb0    
0062   0000             _pio_b            .equ $ffb1
0063   0000             _pio_c            .equ $ffb2
0064   0000             _pio_control      .equ $ffb3         ; pio control port
0065   0000             
0066   0000             _fdc_config       .equ $ffc0         ; 0 = select_0, 1 = select_1, 2 = side_select, 3 = dden, 4 = in_use_or_head_load, 5 = wd1770_rst
0067   0000             _fdc_status_0     .equ $ffc1         ; 0 = drq, 1 = ready
0068   0000             _fdc_stat_cmd     .equ $ffc8         ; status / command register
0069   0000             _fdc_track        .equ $ffc9         ; track register
0070   0000             _fdc_sector       .equ $ffca         ; sector register
0071   0000             _fdc_data         .equ $ffcb         ; data register
0072   0000             
0073   0000             _timer_c_0        .equ $ffe0         ; timer counter 0
0074   0000             _timer_c_1        .equ $ffe1         ; timer counter 1
0075   0000             _timer_c_2        .equ $ffe2         ; timer counter 2
0076   0000             _timer_ctrl       .equ $ffe3         ; timer control register
0077   0000             
0078   0000             _stack_begin      .equ $f7ff         ; beginning of stack
0079   0000             _fifo_size        .equ 4096
0080   0000             
0081   0000             _mbr              .equ 446
0082   0000             _superblock       .equ 512
0083   0000             
0084   0000             text_org          .equ $400          ; code origin address for all user processes
0085   0000             
0086   0000             
0087   0000             ; ------------------------------------------------------------------------------------------------------------------;
0088   0000             ; DISK LAYOUT:
0089   0000             ; | Metadata               | Size (bytes)    | Blocks (2048 bytes)              |
0090   0000             ; | ---------------------- | --------------- | -------------------------------- |
0091   0000             ; | Bootloader/MBR         | 512 bytes       | 0.25 (1 sector)                  |
0092   0000             ; | Superblock             | 1024 bytes      | 1 block (2048 bytes, must align) |
0093   0000             ; | Block Group Descriptor | \~32 bytes      | 1 block (2048 bytes)             |
0094   0000             ; | Block Bitmap           | 16,384 bytes    | 8 blocks                         |
0095   0000             ; | Inode Bitmap           | 2,048 bytes     | 1 block                          |
0096   0000             ; | Inode Table            | 2,097,152 bytes | 1024 blocks                      |
0097   0000             ; 
0098   0000             ; first 512 bytes: bootloader from 0 to 445, MBR partition table from 446 to 511 (64 bytes)
0099   0000             ; up to 4 partitions, each 16 bytes long
0100   0000             ; MBR:
0101   0000             ; Byte | Description
0102   0000             ; -----|----------------------------
0103   0000             ; 0    | Boot flag (0x80 active, 0x00 inactive)
0104   0000             ; 1-3  | Start CHS (head, sector, cylinder)
0105   0000             ; 4    | Partition type (filesystem ID)
0106   0000             ;   0x83 = Linux native (ext2/3/4)
0107   0000             ;   0x07 = NTFS/exFAT
0108   0000             ;   0x0B = FAT32 CHS
0109   0000             ;   0x0C = FAT32 LBA
0110   0000             ;   0x05 = Extended partition
0111   0000             ; 5-7  | End CHS
0112   0000             ; 8-11 | Start LBA (little endian)
0113   0000             ; 12-15| Size in sectors (little endian)
0114   0000             ; 
0115   0000             ; 
0116   0000             ; SUPERBLOCK:
0117   0000             ; | Field                 | Description                              | Typical Size (bytes) | Notes                           |
0118   0000             ; | --------------------- | ---------------------------------------- | -------------------- | ------------------------------- |
0119   0000             ; | `s_inodes_count`      | Total number of inodes in the filesystem | 4                    | 32-bit unsigned int             |
0120   0000             ; | `s_blocks_count`      | Total number of data blocks              | 4                    | 32-bit unsigned int             |
0121   0000             ; | `s_free_inodes_count` | Number of free inodes                    | 4                    | 32-bit unsigned int             |
0122   0000             ; | `s_free_blocks_count` | Number of free blocks                    | 4                    | 32-bit unsigned int             |
0123   0000             ; | `s_first_data_block`  | Block number of the first data block     | 4                    | 32-bit unsigned int             |
0124   0000             ; | `s_log_block_size`    | Block size = 1024 << `s_log_block_size`  | 4                    | 32-bit unsigned int             |
0125   0000             ; | `s_inode_size`        | Size of each inode (in bytes)            | 2                    | 16-bit unsigned int             |
0126   0000             ; | `s_magic`             | Filesystem signature (`0xEF53`)          | 2                    | 16-bit unsigned int             |
0127   0000             ; | `s_mtime`             | Last mount time                          | 4                    | 32-bit unsigned int (Unix time) |
0128   0000             ; | `s_wtime`             | Last write time                          | 4                    | 32-bit unsigned int (Unix time) |
0129   0000             ; | `s_uuid`              | Unique ID of the filesystem              | 16                   | 128-bit UUID                    |
0130   0000             ; | `s_volume_name`       | Label of the filesystem                  | 16                   | Usually ASCII, padded           |
0131   0000             ; | `s_feature_flags`     | Compatibility flags                      | 4                    | 32-bit unsigned int             |
0132   0000             ; 
0133   0000             ; 
0134   0000             ; inode for root dir is #2, #0 and #1 not used
0135   0000             ; block size: 2048
0136   0000             
0137   0000             ; inode-table format:
0138   0000             ; | Field         | Size (bytes) | Description                                                                                  |
0139   0000             ; | ------------- | ------------ | -------------------------------------------------------------------------------------------- |
0140   0000             ; | `mode`        | 2            | File type and permissions                                                                    |
0141   0000             ; | `uid`         | 2            | Owner user ID                                                                                |
0142   0000             ; | `size`        | 4            | Size of the file in bytes                                                                    |
0143   0000             ; | `atime`       | 4            | Last access time (timestamp)                                                                 |
0144   0000             ; | `ctime`       | 4            | Creation time (timestamp)                                                                    |
0145   0000             ; | `mtime`       | 4            | Last modification time (timestamp)                                                           |
0146   0000             ; | `dtime`       | 4            | Deletion time (timestamp)                                                                    |
0147   0000             ; | `gid`         | 2            | Group ID                                                                                     |
0148   0000             ; | `links_count` | 2            | Number of hard links                                                                         |
0149   0000             ; | `blocks`      | 4            | Number of 512-byte blocks allocated                                                          |
0150   0000             ; | `flags`       | 4            | File flags                                                                                   |
0151   0000             ; | `block`       | 15 x 4 = 60  | Pointers to data blocks (12 direct, 1 single indirect, 1 double indirect, 1 triple indirect) |
0152   0000             
0153   0000             
0154   0000             ; file entry attributes
0155   0000             ; filename (24)
0156   0000             ; attributes (1)       :|0|0|file_type(3bits)|x|w|r|
0157   0000             ; lba (2)              : location of raw data for file entry, or dirid for directory entry
0158   0000             ; size (2)             : filesize
0159   0000             ; day (1)           
0160   0000             ; month (1)
0161   0000             ; year (1)
0162   0000             ; packet size = 32 bytes  : total packet size in bytes
0163   0000             
0164   0000             fst_entry_size      .equ 32  ; bytes
0165   0000             fst_files_per_sect  .equ (512 / fst_entry_size)
0166   0000             fst_files_per_dir   .equ (512 / fst_entry_size)
0167   0000             fst_nbr_directories .equ 64
0168   0000                                 ; 1 sector for header, the rest is for the list of files/dirs
0169   0000             fst_sectors_per_dir .equ (1 + (fst_entry_size * fst_files_per_dir / 512))    
0170   0000             fst_total_sectors   .equ (fst_sectors_per_dir * fst_nbr_directories)
0171   0000             fst_lba_start       .equ 32
0172   0000             fst_lba_end         .equ (fst_lba_start + fst_total_sectors - 1)
0173   0000             
0174   0000             fs_nbr_files        .equ (fst_nbr_directories * fst_files_per_dir)
0175   0000             fs_sectors_per_file .equ 32 ; the first sector is always a header with a null parameter (first byte)
0176   0000                                         ; so that we know which blocks are free or taken
0177   0000             fs_file_size        .equ (fs_sectors_per_file * 512)                  
0178   0000             fs_total_sectors    .equ (fs_nbr_files * fs_sectors_per_file)
0179   0000             fs_lba_start        .equ (fst_lba_end + 1)
0180   0000             fs_lba_end          .equ (fs_lba_start + fs_total_sectors - 1)
0181   0000             
0182   0000             root_id:            .equ fst_lba_start
0183   0000             
0184   0000             ; ------------------------------------------------------------------------------------------------------------------;
0185   0000             ; global system variables
0186   0000             ; ------------------------------------------------------------------------------------------------------------------;
0187   0000             
0188   0000             ; ------------------------------------------------------------------------------------------------------------------;
0189   0000             ; irq table
0190   0000             ; highest priority at lowest address
0191   0000             ; ------------------------------------------------------------------------------------------------------------------;
0192   0000 3C 00       .dw int_0_fdc
0193   0002 3D 00       .dw int_1
0194   0004 3E 00       .dw int_2
0195   0006 3F 00       .dw int_3
0196   0008 40 00       .dw int_4
0197   000A 41 00       .dw int_5
0198   000C 42 00       .dw int_6
0199   000E 43 00       .dw int_7_uart0
0200   0010             
0201   0010             ; ------------------------------------------------------------------------------------------------------------------;
0202   0010             ; kernel reset vector
0203   0010             ; ------------------------------------------------------------------------------------------------------------------;
0204   0010 A2 11       .dw kernel_reset_vector
0205   0012             
0206   0012             ; ------------------------------------------------------------------------------------------------------------------;
0207   0012             ; exception vector table
0208   0012             ; total of 7 entries, starting at address $0012
0209   0012             ; ------------------------------------------------------------------------------------------------------------------;
0210   0012 57 04       .dw trap_privilege
0211   0014 74 05       .dw trap_div_zero
0212   0016 81 05       .dw trap_undef_opcode
0213   0018 00 00       .dw 0
0214   001A 00 00       .dw 0
0215   001C 00 00       .dw 0
0216   001E 00 00       .dw 0
0217   0020             
0218   0020             ; ------------------------------------------------------------------------------------------------------------------;
0219   0020             ; system call vector table
0220   0020             ; starts at address $0020
0221   0020             ; ------------------------------------------------------------------------------------------------------------------;
0222   0020 63 04       .dw syscall_break
0223   0022 82 05       .dw syscall_rtc
0224   0024 A5 06       .dw syscall_ide
0225   0026 65 07       .dw syscall_io
0226   0028 22 08       .dw syscall_file_system
0227   002A EF 10       .dw syscall_create_proc
0228   002C 1C 04       .dw syscall_list_procs
0229   002E B4 05       .dw syscall_datetime
0230   0030 D8 03       .dw syscall_reboot
0231   0032 B9 10       .dw syscall_pause_proc
0232   0034 E4 03       .dw syscall_resume_proc
0233   0036 76 10       .dw syscall_terminate_proc
0234   0038 A4 03       .dw syscall_system
0235   003A E4 00       .dw syscall_fdc
0236   003C             
0237   003C             ; ------------------------------------------------------------------------------------------------------------------;
0238   003C             ; system call aliases
0239   003C             ; ------------------------------------------------------------------------------------------------------------------;
0240   003C             sys_break            .equ 0
0241   003C             sys_rtc              .equ 1
0242   003C             sys_ide              .equ 2
0243   003C             sys_io               .equ 3
0244   003C             sys_filesystem       .equ 4
0245   003C             sys_create_proc      .equ 5
0246   003C             sys_list_proc        .equ 6
0247   003C             sys_datetime         .equ 7
0248   003C             sys_reboot           .equ 8
0249   003C             sys_pause_proc       .equ 9
0250   003C             sys_resume_proc      .equ 10
0251   003C             sys_terminate_proc   .equ 11
0252   003C             sys_system           .equ 12
0253   003C             sys_fdc              .equ 13
0254   003C             
0255   003C             ; aliases for individual 'al' options for FDC system calls
0256   003C             fdc_al_restore      .equ 0
0257   003C             fdc_al_step         .equ 1
0258   003C             fdc_al_step_in      .equ 2
0259   003C             fdc_al_step_out     .equ 3
0260   003C             fdc_al_seek         .equ 4
0261   003C             fdc_al_format_128   .equ 5
0262   003C             fdc_al_formatdisk_128   .equ 6
0263   003C             fdc_al_format_512   .equ 7
0264   003C             fdc_al_formatdisk_512   .equ 8
0265   003C             fdc_al_read_addr    .equ 9
0266   003C             fdc_al_read_track   .equ 10
0267   003C             fdc_al_read_sect    .equ 11
0268   003C             fdc_al_write_sect   .equ 12
0269   003C             fdc_al_force_int    .equ 13
0270   003C             fdc_al_status0      .equ 14
0271   003C             fdc_al_status1      .equ 15
0272   003C             
0273   003C             ; ------------------------------------------------------------------------------------------------------------------;
0274   003C             ; alias exports
0275   003C             ; ------------------------------------------------------------------------------------------------------------------;
0276   003C             .export text_org
0277   003C             .export sys_break
0278   003C             .export sys_rtc
0279   003C             .export sys_ide
0280   003C             .export sys_io
0281   003C             .export sys_filesystem
0282   003C             .export sys_create_proc
0283   003C             .export sys_list_proc
0284   003C             .export sys_datetime
0285   003C             .export sys_reboot
0286   003C             .export sys_pause_proc
0287   003C             .export sys_resume_proc
0288   003C             .export sys_terminate_proc
0289   003C             .export sys_system
0290   003C             .export sys_fdc
0291   003C             
0292   003C             .export _7seg_display
0293   003C             
0294   003C             .export _fdc_config        
0295   003C             .export _fdc_status_0      
0296   003C             .export _fdc_stat_cmd     
0297   003C             
0298   003C             ; exports of aliases for individual 'al' options for FDC system calls
0299   003C             .export fdc_al_restore
0300   003C             .export fdc_al_step
0301   003C             .export fdc_al_step_in
0302   003C             .export fdc_al_step_out
0303   003C             .export fdc_al_seek
0304   003C             .export fdc_al_format_128
0305   003C             .export fdc_al_formatdisk_128
0306   003C             .export fdc_al_format_512
0307   003C             .export fdc_al_formatdisk_512
0308   003C             .export fdc_al_read_addr
0309   003C             .export fdc_al_read_track
0310   003C             .export fdc_al_read_sect
0311   003C             .export fdc_al_write_sect
0312   003C             .export fdc_al_force_int
0313   003C             .export fdc_al_status0
0314   003C             .export fdc_al_status1
0315   003C             
0316   003C             ; ------------------------------------------------------------------------------------------------------------------;
0317   003C             ; irqs' code block
0318   003C             ; ------------------------------------------------------------------------------------------------------------------;
0319   003C             ; 5.25" floppy drive controller irq
0320   003C             int_0_fdc:
0321   003C 06            sysret
0322   003D             int_1:
0323   003D 06            sysret
0324   003E             int_2:
0325   003E 06            sysret
0326   003F             int_3:
0327   003F 06            sysret
0328   0040             int_4:
0329   0040 06            sysret
0330   0041             int_5:
0331   0041 06            sysret
0332   0042             
0333   0042             ; timer irq
0334   0042             int_6:  
0335   0042 06            sysret
0336   0043             
0337   0043             ; ------------------------------------------------------------------------------------------------------------------;
0338   0043             ; uart0 interrupt
0339   0043             ; ------------------------------------------------------------------------------------------------------------------;
0340   0043             int_7_uart0:
0341   0043 D7            push a
0342   0044 DA            push d
0343   0045 E1            pushf
0344   0046 14 34 19      mov a, [fifo_in]
0345   0049 3C            mov d, a
0346   004A 1D 80 FF      mov al, [_uart0_data]       ; get character
0347   004D B9 03         cmp al, $03                 ; ctrl-c
0348   004F C6 71 00      je ctrlc
0349   0052 B9 1A         cmp al, $1a                 ; ctrl-z
0350   0054 C6 77 00      je ctrlz
0351   0057 3E            mov [d], al                 ; add to fifo
0352   0058 14 34 19      mov a, [fifo_in]
0353   005B 77            inc a
0354   005C 99            mov bl, ah
0355   005D FD 3D B0 FF   mov [_7seg_display], bl
0356   0061 AF 95 30      cmp a, fifo + _fifo_size     ; check if pointer reached the end of the fifo
0357   0064 C7 6A 00      jne int_7_continue
0358   0067 10 95 20      mov a, fifo  
0359   006A             int_7_continue:  
0360   006A 42 34 19      mov [fifo_in], a            ; update fifo pointer
0361   006D EE            popf
0362   006E E7            pop d
0363   006F E4            pop a  
0364   0070 06            sysret
0365   0071             ctrlc:
0366   0071 51 05 00      add sp, 5
0367   0074 0A 76 10      jmp syscall_terminate_proc
0368   0077             ctrlz:
0369   0077 EE            popf
0370   0078 E7            pop d
0371   0079 E4            pop a
0372   007A 0A B9 10      jmp syscall_pause_proc      ; pause current process and go back to the shell
0373   007D             
0374   007D             ; ------------------------------------------------------------------------------------------------------------------;
0375   007D             ; ext2 file system
0376   007D             ; ------------------------------------------------------------------------------------------------------------------;
0377   007D             sys_mkfs:
0378   007D             ; master boot record
0379   007D F2 BE 01 80   mov byte[_mbr], $80
0380   0081 B8 BF 01 00   mov word[_mbr + 1], $0000
0380   0085 00 
0381   0086 F2 C1 01 00   mov byte[_mbr + 3], $00
0382   008A F2 C2 01 83   mov byte[_mbr + 4], $83  ; ext2
0383   008E B8 C3 01 00   mov word[_mbr + 5], $0000   ;end CHS
0383   0092 00 
0384   0093 F2 C5 01 00   mov byte[_mbr + 7], $00    
0385   0097 B8 C6 01 01   mov word[_mbr + 8], 1       ; start LBA of kernel
0385   009B 00 
0386   009C B8 C8 01 00   mov word[_mbr + 10], $0000
0386   00A0 00 
0387   00A1 B8 CA 01 00   mov word[_mbr + 12], $0000       ; size = 65536 sectors = 32MB
0387   00A5 00 
0388   00A6 B8 CB 01 01   mov word[_mbr + 13], $0001
0388   00AA 00 
0389   00AB             
0390   00AB             ; superblock
0391   00AB B8 00 02 00   mov word[_superblock], 2048
0391   00AF 00 
0392   00B0 B8 02 02 00   mov word[_superblock + 2], $0000
0392   00B4 00 
0393   00B5 B8 04 02 00   mov word[_superblock + 4], $2800
0393   00B9 00 
0394   00BA B8 06 02 00   mov word[_superblock + 6], $0000
0394   00BE 00 
0395   00BF             
0396   00BF             ; --- MBR signature ---
0397   00BF B8 FE 01 55   mov word [510], $AA55          ; Must be present for BIOS to boot
0397   00C3 00 
0398   00C4             
0399   00C4             
0400   00C4             ; ------------------------------------------------------------------------------------------------------------------;
0401   00C4             ; floppy drive syscalls
0402   00C4             ; ------------------------------------------------------------------------------------------------------------------;
0403   00C4             ; data for formatting a floppy drive in single density mode (128 bytes per sector):
0404   00C4             ; fdc_40_ff:
0405   00C4             ;   .fill 40,  $ff    ; or 00                                                                                
0406   00C4             ; fdc_128_format_inner:
0407   00C4             ;   .fill 6,   $00    ;                                                                            <--|        
0408   00C4             ;   .fill 1,   $fe    ; id address mark                                                               |        
0409   00C4             ;   .fill 1,   $00    ; track number  0 thru 39                                                       |                    
0410   00C4             ;   .fill 1,   $00    ; side number 00 or 01                                                          |                
0411   00C4             ;   .fill 1,   $01    ; sector number  0x01 through 0x10                                              |                              
0412   00C4             ;   .fill 1,   $00    ; sector length                                                                 |                        
0413   00C4             ;   .fill 1,   $f7    ; 2 crc's written                                                               | write 16 times                 
0414   00C4             ;   .fill 11,  $ff    ; or 00                                                                         |                      
0415   00C4             ;   .fill 6,   $00    ;                                                                               |                        
0416   00C4             ;   .fill 1,   $fb    ; data address mark                                                             |                                  
0417   00C4             ;   .fill 128, $e5    ; data (ibm uses e5)                                                            |                                      
0418   00C4             ;   .fill 1,   $f7    ; 2 crc's written                                                               |                                                        
0419   00C4             ;   .fill 10,  $ff    ; or 00                                                                      <--|                                                  
0420   00C4             ; fdc_128_format_end:
0421   00C4             ;   .fill 369, $ff    ; or 00. continue writing until wd1770 interrupts out. approx 369 bytes.                                                                
0422   00C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423   00C4             fdc_jmptbl:
0424   00C4 F0 00         .dw syscall_fdc_restore
0425   00C6 FC 00         .dw syscall_fdc_step
0426   00C8 04 01         .dw syscall_fdc_step_in
0427   00CA 0C 01         .dw syscall_fdc_step_out
0428   00CC 14 01         .dw syscall_fdc_seek
0429   00CE 22 01         .dw syscall_fdc_format_128
0430   00D0 76 01         .dw syscall_fdc_formatdisk_128
0431   00D2 4C 01         .dw syscall_fdc_format_512
0432   00D4 BF 01         .dw syscall_fdc_formatdisk_512
0433   00D6 20 01         .dw syscall_fdc_read_addr
0434   00D8 08 02         .dw syscall_fdc_read_track
0435   00DA 37 02         .dw syscall_fdc_read_sect
0436   00DC 6F 02         .dw syscall_fdc_write_sect
0437   00DE 21 01         .dw syscall_fdc_force_int
0438   00E0 E8 00         .dw syscall_fdc_status0
0439   00E2 EC 00         .dw syscall_fdc_status1
0440   00E4             syscall_fdc:
0441   00E4 FD 0A C4 00   jmp [fdc_jmptbl + al]
0442   00E8             
0443   00E8             syscall_fdc_status0:
0444   00E8 1D C1 FF      mov al, [_fdc_status_0]
0445   00EB 06            sysret
0446   00EC             
0447   00EC             syscall_fdc_status1:
0448   00EC 1D C8 FF      mov al, [_fdc_stat_cmd]
0449   00EF 06            sysret
0450   00F0             
0451   00F0             syscall_fdc_restore:
0452   00F0 07 A0 02      call fdc_wait_not_busy
0453   00F3 F2 C8 FF 0B   mov byte [_fdc_stat_cmd], %00001011
0454   00F7 F2 C9 FF 00   mov byte [_fdc_track], $00 ; reset track
0455   00FB 06            sysret
0456   00FC             
0457   00FC             syscall_fdc_step:
0458   00FC 07 A0 02      call fdc_wait_not_busy
0459   00FF F2 C8 FF 3B   mov byte [_fdc_stat_cmd], %00111011
0460   0103 06            sysret
0461   0104             
0462   0104             syscall_fdc_step_in:
0463   0104 07 A0 02      call fdc_wait_not_busy
0464   0107 F2 C8 FF 53   mov byte [_fdc_stat_cmd], %01010011
0465   010B 06            sysret
0466   010C             
0467   010C             syscall_fdc_step_out:
0468   010C 07 A0 02      call fdc_wait_not_busy
0469   010F F2 C8 FF 7B   mov byte [_fdc_stat_cmd], %01111011
0470   0113 06            sysret
0471   0114             
0472   0114             ; bl: desired track
0473   0114             syscall_fdc_seek:
0474   0114 07 A0 02      call fdc_wait_not_busy
0475   0117 FD 3D CB FF   mov [_fdc_data], bl ; set desired track to bl
0476   011B F2 C8 FF 1B   mov byte [_fdc_stat_cmd], %00011011 ; seek command
0477   011F 06            sysret
0478   0120             
0479   0120             syscall_fdc_read_addr:
0480   0120 06            sysret
0481   0121             
0482   0121             syscall_fdc_force_int:
0483   0121 06            sysret
0484   0122             
0485   0122             ; when writing the actual code for formatting multiple tracks, remember to change the track number byte
0486   0122             ; in the ram formatting block because they are all set as 00 right now
0487   0122             ; bl: track number
0488   0122             syscall_fdc_format_128:
0489   0122 07 AB 02      call fdc_format_mem_128
0490   0125 07 A0 02      call fdc_wait_not_busy
0491   0128 FD 3D C9 FF   mov [_fdc_track], bl
0492   012C FD 4D 95 32   mov si, transient_area
0493   0130 F2 C8 FF FA   mov byte [_fdc_stat_cmd], %11111010 ; write track command: {1111, 0: enable spin-up seq, 1: settling delay, 1: no write precompensation, 0}
0494   0134 07 81 03      call fdc_wait_64us
0495   0137             fdc_format_drq_128:
0496   0137 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0497   013A 93 01         test al, $01                ; 4
0498   013C C6 4B 01      jz fdc_format_end_128           ; 8
0499   013F 93 02         test al, $02                ; 4
0500   0141 C6 37 01      jz fdc_format_drq_128           ; 8
0501   0144 F6            lodsb                       ; 7
0502   0145 3D CB FF      mov [_fdc_data], al         ; 10   
0503   0148 0A 37 01      jmp fdc_format_drq_128
0504   014B             fdc_format_end_128:
0505   014B 06            sysret
0506   014C             
0507   014C             ; when writing the actual code for formatting multiple tracks, remember to change the track number byte
0508   014C             ; in the ram formatting block because they are all set as 00 right now
0509   014C             ; bl: track number
0510   014C             syscall_fdc_format_512:
0511   014C 07 16 03      call fdc_format_mem_512
0512   014F 07 A0 02      call fdc_wait_not_busy
0513   0152 FD 3D C9 FF   mov [_fdc_track], bl
0514   0156 FD 4D 95 32   mov si, transient_area
0515   015A F2 C8 FF FA   mov byte [_fdc_stat_cmd], %11111010 ; write track command: {1111, 0: enable spin-up seq, 1: settling delay, 1: no write precompensation, 0}
0516   015E 07 81 03      call fdc_wait_64us
0517   0161             fdc_format_drq_512:
0518   0161 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0519   0164 93 01         test al, $01                ; 4
0520   0166 C6 75 01      jz fdc_format_end_512           ; 8
0521   0169 93 02         test al, $02                ; 4
0522   016B C6 61 01      jz fdc_format_drq_512           ; 8
0523   016E F6            lodsb                       ; 7
0524   016F 3D CB FF      mov [_fdc_data], al         ; 10   
0525   0172 0A 61 01      jmp fdc_format_drq_512
0526   0175             fdc_format_end_512:
0527   0175 06            sysret
0528   0176             
0529   0176             syscall_fdc_formatdisk_128:
0530   0176 2E 00         mov bl, 0
0531   0178             fdc_formatdisk128_l0:
0532   0178 07 AB 02      call fdc_format_mem_128
0533   017B 07 A0 02      call fdc_wait_not_busy
0534   017E FD 3D C9 FF   mov [_fdc_track], bl
0535   0182 FD 4D 95 32   mov si, transient_area
0536   0186 F2 C8 FF F2   mov byte [_fdc_stat_cmd], %11110010 ; write track command
0537   018A 07 81 03      call fdc_wait_64us
0538   018D             fdc_formatdisk_drq_128:
0539   018D 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0540   0190 93 01         test al, $01                ; 4
0541   0192 C6 A1 01      jz fdc_formatdisk_end_128           ; 8
0542   0195 93 02         test al, $02                ; 4
0543   0197 C6 8D 01      jz fdc_formatdisk_drq_128           ; 8
0544   019A F6            lodsb                       ; 7
0545   019B 3D CB FF      mov [_fdc_data], al         ; 10   
0546   019E 0A 8D 01      jmp fdc_formatdisk_drq_128
0547   01A1             fdc_formatdisk_end_128:
0548   01A1 07 A0 02      call fdc_wait_not_busy
0549   01A4 07 88 03      call wait_1s
0550   01A7 07 88 03      call wait_1s
0551   01AA 07 88 03      call wait_1s
0552   01AD 07 88 03      call wait_1s
0553   01B0 07 88 03      call wait_1s
0554   01B3 F2 C8 FF 53   mov byte [_fdc_stat_cmd], %01010011  ; step in
0555   01B7 6C 01         add bl, 1
0556   01B9 C1 28         cmp bl, 40
0557   01BB C7 78 01      jne fdc_formatdisk128_l0
0558   01BE 06            sysret
0559   01BF             
0560   01BF             syscall_fdc_formatdisk_512:
0561   01BF 2E 00         mov bl, 0
0562   01C1             fdc_formatdisk512_l0:
0563   01C1 07 16 03      call fdc_format_mem_512
0564   01C4 07 A0 02      call fdc_wait_not_busy
0565   01C7 FD 3D C9 FF   mov [_fdc_track], bl
0566   01CB FD 4D 95 32   mov si, transient_area
0567   01CF F2 C8 FF F2   mov byte [_fdc_stat_cmd], %11110010 ; write track command
0568   01D3 07 81 03      call fdc_wait_64us
0569   01D6             fdc_formatdisk_drq_512:
0570   01D6 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0571   01D9 93 01         test al, $01                ; 4
0572   01DB C6 EA 01      jz fdc_formatdisk_end_512           ; 8
0573   01DE 93 02         test al, $02                ; 4
0574   01E0 C6 D6 01      jz fdc_formatdisk_drq_512           ; 8
0575   01E3 F6            lodsb                       ; 7
0576   01E4 3D CB FF      mov [_fdc_data], al         ; 10   
0577   01E7 0A D6 01      jmp fdc_formatdisk_drq_512
0578   01EA             fdc_formatdisk_end_512:
0579   01EA 07 A0 02      call fdc_wait_not_busy
0580   01ED 07 88 03      call wait_1s
0581   01F0 07 88 03      call wait_1s
0582   01F3 07 88 03      call wait_1s
0583   01F6 07 88 03      call wait_1s
0584   01F9 07 88 03      call wait_1s
0585   01FC F2 C8 FF 53   mov byte [_fdc_stat_cmd], %01010011   ; step in
0586   0200 6C 01         add bl, 1
0587   0202 C1 28         cmp bl, 40
0588   0204 C7 C1 01      jne fdc_formatdisk512_l0
0589   0207 06            sysret
0590   0208             
0591   0208             ; di : destination in user space
0592   0208             ; a  : returns number of read bytes
0593   0208             syscall_fdc_read_track:
0594   0208 07 A0 02      call fdc_wait_not_busy
0595   020B E3            push di
0596   020C FD 4F 95 32   mov di, transient_area
0597   0210 F2 C8 FF E8   mov byte [_fdc_stat_cmd], %11101000
0598   0214 07 81 03      call fdc_wait_64us
0599   0217             fdc_read_track_l0: ; for each byte, we need to wait for drq to be high
0600   0217 1D C8 FF      mov al, [_fdc_stat_cmd]      ; 
0601   021A 93 01         test al, $01                ; check busy bit
0602   021C C6 2B 02      jz fdc_read_track_end
0603   021F 93 02         test al, $02                ; check drq bit
0604   0221 C6 17 02      jz fdc_read_track_l0
0605   0224 1D CB FF      mov al, [_fdc_data]     ; 
0606   0227 F7            stosb
0607   0228 0A 17 02      jmp fdc_read_track_l0
0608   022B             ;we need to check if writing to data reg causes a spurious read. so lets check inside the writing loop, how many times we actually write the bytes
0609   022B             ;say the 40 byte loop. if we find that we only write ~20 times, then this indcates this problem.
0610   022B             ;because for every write, if it also reads, then that clears drq, so we need to wait for next drq.
0611   022B             fdc_read_track_end:
0612   022B 50            mov a, di
0613   022C 5F 95 32      sub a, transient_area
0614   022F F0            pop di
0615   0230 FD 4D 95 32   mov si, transient_area
0616   0234 39            mov c, a  ; copy track over to user space
0617   0235 03            store
0618   0236 06            sysret
0619   0237             
0620   0237             ; sector in bl
0621   0237             ; track in bh
0622   0237             ; di = user space destination
0623   0237             syscall_fdc_read_sect:
0624   0237 07 A0 02      call fdc_wait_not_busy
0625   023A E3            push di
0626   023B FD 3D CA FF   mov [_fdc_sector], bl
0627   023F 30            mov bl, bh
0628   0240 FD 3D C9 FF   mov [_fdc_track], bl
0629   0244 F2 C8 FF 88   mov byte [_fdc_stat_cmd], %10001000
0630   0248 07 81 03      call fdc_wait_64us
0631   024B FD 4F 95 32   mov di, transient_area
0632   024F             fdc_read_sect_l0: ; for each byte, we need to wait for drq to be high
0633   024F 1D C8 FF      mov al, [_fdc_stat_cmd]      ; read lost data flag 10+3+5+8+5+8
0634   0252 93 01         test al, $01                ; check drq bit
0635   0254 C6 63 02      jz fdc_read_sect_end
0636   0257 93 02         test al, $02                ; check drq bit
0637   0259 C6 4F 02      jz fdc_read_sect_l0
0638   025C 1D CB FF      mov al, [_fdc_data]     ; 
0639   025F F7            stosb
0640   0260 0A 4F 02      jmp fdc_read_sect_l0
0641   0263             fdc_read_sect_end:
0642   0263 50            mov a, di
0643   0264 5F 95 32      sub a, transient_area
0644   0267 F0            pop di
0645   0268 FD 4D 95 32   mov si, transient_area
0646   026C 39            mov c, a  ; copy sector over to user space
0647   026D 03            store
0648   026E 06            sysret
0649   026F             
0650   026F             ; sector size in c
0651   026F             ; sector in bl
0652   026F             ; track in bh
0653   026F             ; data pointer in si
0654   026F             syscall_fdc_write_sect:
0655   026F 07 A0 02      call fdc_wait_not_busy
0656   0272 FD 3D CA FF   mov [_fdc_sector], bl
0657   0276 30            mov bl, bh
0658   0277 FD 3D C9 FF   mov [_fdc_track], bl
0659   027B FD 4F 95 32   mov di, transient_area    ; si = data source, di = destination 
0660   027F 04            load                    ; transfer data to kernel space!
0661   0280 FD 4D 95 32   mov si, transient_area
0662   0284 F2 C8 FF AA   mov byte [_fdc_stat_cmd], %10101010            ; 101, 0:single sector, 1: disable spinup, 0: no delay, 1: no precomp, 0: normal data mark
0663   0288 07 81 03      call fdc_wait_64us
0664   028B             fdc_write_sect_l0: ; for each byte, we need to wait for drq to be high
0665   028B 1D C8 FF      mov al, [_fdc_stat_cmd]         ; 10
0666   028E 93 01         test al, $01                    ; 4
0667   0290 C6 9F 02      jz fdc_write_sect_end           ; 8
0668   0293 93 02         test al, $02                    ; 4
0669   0295 C6 8B 02      jz fdc_write_sect_l0            ; 8
0670   0298 F6            lodsb                           ; 7
0671   0299 3D CB FF      mov [_fdc_data], al             ; 10   
0672   029C 0A 8B 02      jmp fdc_write_sect_l0
0673   029F             fdc_write_sect_end:
0674   029F 06            sysret
0675   02A0             
0676   02A0             fdc_wait_not_busy:
0677   02A0 DB            push al
0678   02A1             fdc_wait_not_busy_l0:
0679   02A1 1D C8 FF      mov al, [_fdc_stat_cmd]   
0680   02A4 93 01         test al, $01               
0681   02A6 C7 A1 02      jnz fdc_wait_not_busy_l0          
0682   02A9 E8            pop al
0683   02AA 09            ret
0684   02AB             
0685   02AB             ; track number in bl
0686   02AB             fdc_format_mem_128:
0687   02AB 3B 01 00      mov d, 1
0688   02AE FD 4F 95 32   mov di, transient_area
0689   02B2             ; 40 * FF
0690   02B2 38 28 00      mov c, 40
0691   02B5 19 FF         mov al, $ff
0692   02B7             fdc_l0: 
0693   02B7 F7            stosb
0694   02B8 7E            dec c
0695   02B9 C7 B7 02      jnz fdc_l0
0696   02BC             ; 6 * 00
0697   02BC             fdc_inner_loop:
0698   02BC 38 06 00      mov c, 6
0699   02BF 19 00         mov al, $00
0700   02C1             fdc_l1:
0701   02C1 F7            stosb
0702   02C2 7E            dec c
0703   02C3 C7 C1 02      jnz fdc_l1
0704   02C6             ; FE address mark
0705   02C6             fdc_l2:
0706   02C6 19 FE         mov al, $fe
0707   02C8 F7            stosb
0708   02C9             ; track number
0709   02C9             fdc_l3:
0710   02C9 1B            mov al, bl  ; track number in bl
0711   02CA F7            stosb
0712   02CB             ; side number
0713   02CB             fdc_l4:
0714   02CB 19 00         mov al, $00
0715   02CD F7            stosb
0716   02CE             ; sector number
0717   02CE             fdc_l5:
0718   02CE 13            mov a, d
0719   02CF F7            stosb
0720   02D0             ; sector length 128 bytes
0721   02D0             fdc_l6:
0722   02D0 19 00         mov al, $00
0723   02D2 F7            stosb
0724   02D3             ; 2 crc's
0725   02D3             fdc_l7:
0726   02D3 19 F7         mov al, $f7
0727   02D5 F7            stosb
0728   02D6             ; 11 times $ff
0729   02D6 38 0B 00      mov c, 11
0730   02D9 19 FF         mov al, $ff
0731   02DB             fdc_l8:
0732   02DB F7            stosb
0733   02DC 7E            dec c
0734   02DD C7 DB 02      jnz fdc_l8
0735   02E0             ; 6 times 00
0736   02E0 38 06 00      mov c, 6
0737   02E3 19 00         mov al, $00
0738   02E5             fdc_l9:
0739   02E5 F7            stosb
0740   02E6 7E            dec c
0741   02E7 C7 E5 02      jnz fdc_l9
0742   02EA             ; FB data address mark
0743   02EA 19 FB         mov al, $fb
0744   02EC             fdc_l10:
0745   02EC F7            stosb
0746   02ED             ; 128 bytes sector data
0747   02ED 38 80 00      mov c, 128
0748   02F0 19 E5         mov al, $E5
0749   02F2             fdc_l11:
0750   02F2 F7            stosb
0751   02F3 7E            dec c
0752   02F4 C7 F2 02      jnz fdc_l11
0753   02F7             ; 2 crc's
0754   02F7             fdc_l12:
0755   02F7 19 F7         mov al, $f7
0756   02F9 F7            stosb
0757   02FA             ; 10 * $FF
0758   02FA 38 0A 00      mov c, 10
0759   02FD 19 FF         mov al, $ff
0760   02FF             fdc_l13:
0761   02FF F7            stosb
0762   0300 7E            dec c
0763   0301 C7 FF 02      jnz fdc_l13
0764   0304             ; check whether we did this 16 times
0765   0304 79            inc d
0766   0305 C5 11 00      cmp d, 17
0767   0308 C7 BC 02      jne fdc_inner_loop
0768   030B             ; 500 bytes of FF for end filler. wd1770 writes these until it finishes, so the number varies. usually it writes ~450 bytes
0769   030B 38 F4 01      mov c, 500
0770   030E 19 FF         mov al, $ff
0771   0310             fdc_format_footer:
0772   0310             fdc_footer_drq_loop:
0773   0310 F7            stosb
0774   0311 7E            dec c
0775   0312 C7 10 03      jnz fdc_footer_drq_loop
0776   0315 09            ret
0777   0316             
0778   0316             ; track number in bl
0779   0316             fdc_format_mem_512:
0780   0316 3B 01 00      mov d, 1
0781   0319 FD 4F 95 32   mov di, transient_area
0782   031D             ; 40 * FF
0783   031D 38 28 00      mov c, 40
0784   0320 19 FF         mov al, $ff
0785   0322             fdc_512_l0: 
0786   0322 F7            stosb
0787   0323 7E            dec c
0788   0324 C7 22 03      jnz fdc_512_l0
0789   0327             ; 6 * 00
0790   0327             fdc_512_inner_loop:
0791   0327 38 06 00      mov c, 6
0792   032A 19 00         mov al, $00
0793   032C             fdc_512_l1:
0794   032C F7            stosb
0795   032D 7E            dec c
0796   032E C7 2C 03      jnz fdc_512_l1
0797   0331             ; FE address mark
0798   0331             fdc_512_l2:
0799   0331 19 FE         mov al, $fe
0800   0333 F7            stosb
0801   0334             ; track number
0802   0334             fdc_512_l3:
0803   0334 1B            mov al, bl ; track number was in bl
0804   0335 F7            stosb
0805   0336             ; side number
0806   0336             fdc_512_l4:
0807   0336 19 00         mov al, $00
0808   0338 F7            stosb
0809   0339             ; sector number
0810   0339             fdc_512_l5:
0811   0339 13            mov a, d
0812   033A F7            stosb
0813   033B             ; sector length 512 bytes
0814   033B             fdc_512_l6:
0815   033B 19 02         mov al, $02
0816   033D F7            stosb
0817   033E             ; 2 crc's
0818   033E             fdc_512_l7:
0819   033E 19 F7         mov al, $f7
0820   0340 F7            stosb
0821   0341             ; 11 times $ff
0822   0341 38 0B 00      mov c, 11
0823   0344 19 FF         mov al, $ff
0824   0346             fdc_512_l8:
0825   0346 F7            stosb
0826   0347 7E            dec c
0827   0348 C7 46 03      jnz fdc_512_l8
0828   034B             ; 6 times 00
0829   034B 38 06 00      mov c, 6
0830   034E 19 00         mov al, $00
0831   0350             fdc_512_l9:
0832   0350 F7            stosb
0833   0351 7E            dec c
0834   0352 C7 50 03      jnz fdc_512_l9
0835   0355             ; FB data address mark
0836   0355 19 FB         mov al, $fb
0837   0357             fdc_512_l10:
0838   0357 F7            stosb
0839   0358             ; 128 bytes sector data
0840   0358 38 00 02      mov c, 512
0841   035B 19 E5         mov al, $E5
0842   035D             fdc_512_l11:
0843   035D F7            stosb
0844   035E 7E            dec c
0845   035F C7 5D 03      jnz fdc_512_l11
0846   0362             ; 2 crc's
0847   0362             fdc_512_l12:
0848   0362 19 F7         mov al, $f7
0849   0364 F7            stosb
0850   0365             ; 10 * $FF
0851   0365 38 0A 00      mov c, 10
0852   0368 19 FF         mov al, $ff
0853   036A             fdc_512_l13:
0854   036A F7            stosb
0855   036B 7E            dec c
0856   036C C7 6A 03      jnz fdc_512_l13
0857   036F             ; check whether we did this 16 times
0858   036F 79            inc d
0859   0370 C5 06 00      cmp d, 6
0860   0373 C7 27 03      jne fdc_512_inner_loop
0861   0376             ; 500 bytes of FF for end filler. wd1770 writes these until it finishes, so the number varies. usually it writes ~450 bytes
0862   0376 38 F4 01      mov c, 500
0863   0379 19 FF         mov al, $ff
0864   037B             fdc_512_format_footer:
0865   037B             fdc_512_footer_drq_loop:
0866   037B F7            stosb
0867   037C 7E            dec c
0868   037D C7 7B 03      jnz fdc_512_footer_drq_loop
0869   0380 09            ret
0870   0381             
0871   0381             ; fetch is 2 cycles long when 'display_reg_load' is false.
0872   0381             ; 64us amounts to 160 cycles of the 2.5mhz clock
0873   0381             ; call u16 is 14 cycles long
0874   0381             ; 160 - 5 - 14 = 
0875   0381             fdc_wait_64us:
0876   0381 3A 0D         mov cl, 13                       ; 5 cycles
0877   0383             fdc_wait_64_loop:
0878   0383 81            dec cl                           ; 3 cycles
0879   0384 C7 83 03      jnz fdc_wait_64_loop             ; 8 cycles
0880   0387 09            ret
0881   0388             
0882   0388             wait_1s:
0883   0388 DB            push al
0884   0389 D9            push c
0885   038A 19 03         mov al, 3
0886   038C             wait_1s_l0:
0887   038C 38 FF FF      mov c, 65535                       
0888   038F             wait_1s_l1:
0889   038F 7E            dec c        ; 4
0890   0390 C7 8F 03      jnz wait_1s_l1   ; 8
0891   0393 80            dec al
0892   0394 C7 8C 03      jnz wait_1s_l0
0893   0397 E6            pop c
0894   0398 E8            pop al
0895   0399 09            ret
0896   039A             
0897   039A             ; ------------------------------------------------------------------------------------------------------------------;
0898   039A             ; system syscalls
0899   039A             ; ------------------------------------------------------------------------------------------------------------------;
0900   039A             system_jmptbl:
0901   039A D0 03         .dw system_uname
0902   039C D7 03         .dw system_whoami
0903   039E AA 03         .dw system_poke
0904   03A0 AD 03         .dw system_bootloader_install
0905   03A2 A8 03         .dw system_peek
0906   03A4             syscall_system:
0907   03A4 FD 0A 9A 03   jmp [system_jmptbl + al]
0908   03A8             
0909   03A8             ; param register address in register d
0910   03A8             ; param value in register bl
0911   03A8             system_peek:
0912   03A8 32            mov bl, [d]
0913   03A9 06            sysret
0914   03AA             
0915   03AA             ; param register address in register d
0916   03AA             ; param value in register bl
0917   03AA             system_poke:
0918   03AA FD 3E         mov [d], bl
0919   03AC 06            sysret
0920   03AD             
0921   03AD             ; kernel LBA address in 'b'
0922   03AD             system_bootloader_install:
0923   03AD D8            push b
0924   03AE 26 00 00      mov b, 0
0925   03B1 38 00 00      mov c, 0
0926   03B4 22 01         mov ah, $01                 ; 1 sector
0927   03B6 3B 95 32      mov d, transient_area
0928   03B9 07 D4 06      call ide_read_sect          ; read sector
0929   03BC E5            pop b
0930   03BD FD 44 FE 01   mov [d + 510], b            ; update LBA address
0931   03C1 26 00 00      mov b, 0
0932   03C4 38 00 00      mov c, 0
0933   03C7 22 01         mov ah, $01                 ; 1 sector
0934   03C9 3B 95 32      mov d, transient_area
0935   03CC 07 FA 06      call ide_write_sect         ; write sector
0936   03CF 06            sysret
0937   03D0             
0938   03D0             system_uname:
0939   03D0 3B 45 19      mov d, s_uname
0940   03D3 07 FE 13      call _puts
0941   03D6 06            sysret
0942   03D7             
0943   03D7             system_whoami:
0944   03D7 06            sysret
0945   03D8             
0946   03D8             ; reboot system
0947   03D8             syscall_reboot:
0948   03D8 FD D7 FF FF   push word $ffff 
0949   03DC FD DB 00      push byte %00000000             ; dma_ack = 0, interrupts disabled, mode = supervisor, paging = off, halt=0, display_reg_load=0, dir=0
0950   03DF FD D7 C0 01   push word bios_reset_vector     ; and then push reset vector of the shell to the stack
0951   03E3 06            sysret
0952   03E4             
0953   03E4             ;------------------------------------------------------------------------------------------------------;;
0954   03E4             ; switch to another process
0955   03E4             ; inputs:
0956   03E4             ; al = new process number
0957   03E4             ;------------------------------------------------------------------------------------------------------;;
0958   03E4             syscall_resume_proc:
0959   03E4 FD 78         mov g, a                            ; save the process number
0960   03E6 4B            pusha                               ; save all registers into kernel stack
0961   03E7 22 00         mov ah, 0
0962   03E9 1D 2F 19      mov al, [active_proc_index]
0963   03EC FD 99         shl a              ; x2
0964   03EE B7 6C 11      mov a, [proc_table_convert + a]     ; get process state start index
0965   03F1 4F            mov di, a
0966   03F2 48            mov a, sp
0967   03F3 77            inc a
0968   03F4 4D            mov si, a
0969   03F5 38 14 00      mov c, 20
0970   03F8 FD F5         rep movsb                           ; save process state!
0971   03FA             ; restore kernel stack position to point before interrupt arrived
0972   03FA 51 14 00      add sp, 20
0973   03FD             ; now load the new process number!
0974   03FD FD 12         mov a, g                            ; retrieve the process number argument that was saved in the beginning
0975   03FF 3D 2F 19      mov [active_proc_index], al         ; set new active proc
0976   0402             ; calculate lut entry for next process
0977   0402 22 00         mov ah, 0
0978   0404 FD 99         shl a                               ; x2
0979   0406 B7 6C 11      mov a, [proc_table_convert + a]     ; get process state start index  
0980   0409 4D            mov si, a                           ; source is proc state block
0981   040A 48            mov a, sp
0982   040B 5F 13 00      sub a, 19
0983   040E 4F            mov di, a                           ; destination is kernel stack
0984   040F             ; restore sp
0985   040F 7D            dec a
0986   0410 47            mov sp, a
0987   0411 38 14 00      mov c, 20
0988   0414 FD F5         rep movsb
0989   0416             ; set vm process
0990   0416 1D 2F 19      mov al, [active_proc_index]
0991   0419 01            setptb
0992   041A 4C            popa
0993   041B 06            sysret
0994   041C             
0995   041C             ;------------------------------------------------------------------------------------------------------;;
0996   041C             ; list processes
0997   041C             ;------------------------------------------------------------------------------------------------------;;
0998   041C             syscall_list_procs:
0999   041C 3B 66 19      mov d, s_ps_header
1000   041F 07 FE 13      call _puts
1001   0422 3B 06 1C      mov d, proc_availab_table + 1
1002   0425 38 01 00      mov c, 1
1003   0428             list_procs_l0:  
1004   0428 BD 01         cmp byte[d], 1
1005   042A C7 4E 04      jne list_procs_next
1006   042D 2D            mov b, d
1007   042E 61 05 1C      sub b, proc_availab_table
1008   0431 FD 9F 05      shl b, 5
1009   0434 DA            push d
1010   0435 D8            push b
1011   0436 28            mov b, c
1012   0437 07 9E 14      call print_u8x
1013   043A 22 20         mov ah, ' '
1014   043C 07 D2 12      call _putchar
1015   043F 07 D2 12      call _putchar
1016   0442 E5            pop b
1017   0443 74            mov d, b
1018   0444 58 15 1C      add d, proc_names
1019   0447 07 FE 13      call _puts
1020   044A 07 AB 13      call printnl
1021   044D E7            pop d
1022   044E             list_procs_next:
1023   044E 79            inc d
1024   044F 78            inc c
1025   0450 C2 09 00      cmp c, 9
1026   0453 C7 28 04      jne list_procs_l0
1027   0456             list_procs_end:
1028   0456 06            sysret
1029   0457             
1030   0457             ; ------------------------------------------------------------------------------------------------------------------;
1031   0457             ; exceptions code block
1032   0457             ; ------------------------------------------------------------------------------------------------------------------;
1033   0457             ; privilege exception
1034   0457             ; ------------------------------------------------------------------------------------------------------------------;
1035   0457             trap_privilege:
1036   0457 0A D8 03      jmp syscall_reboot
1037   045A DA            push d
1038   045B 3B B5 19      mov d, s_priviledge
1039   045E 07 FE 13      call _puts
1040   0461 E7            pop d
1041   0462 06            sysret
1042   0463             
1043   0463             ; ------------------------------------------------------------------------------------------------------------------;
1044   0463             ; breakpoint
1045   0463             ; important: values in the stack are being pushed in big endian. i.e.: msb at low address
1046   0463             ; and lsb at high address. *** need to correct this in the microcode and make it little endian again ***
1047   0463             ; ------------------------------------------------------------------------------------------------------------------;
1048   0463             syscall_break:
1049   0463 4B            pusha
1050   0464             syscall_break_prompt:
1051   0464 3B 1E 05      mov d, s_break1
1052   0467 07 FE 13      call _puts
1053   046A 07 AB 13      call printnl
1054   046D 07 00 15      call scan_u16d
1055   0470 AF 00 00      cmp a, 0
1056   0473 C6 7E 04      je syscall_break_regs
1057   0476 AF 01 00      cmp a, 1
1058   0479 C6 A1 04      je syscall_break_mem
1059   047C             syscall_break_end:  
1060   047C 4C            popa
1061   047D 06            sysret
1062   047E             syscall_break_regs:
1063   047E 48            mov a, sp
1064   047F 53 0E 00      add a, 14               ; back-track 7 registers
1065   0482 3C            mov d, a
1066   0483 3A 07         mov cl, 7
1067   0485             syscall_regs_l0:
1068   0485 2A            mov b, [d]
1069   0486 FD AB         swp b
1070   0488 07 5A 14      call print_u16x         ; print register value
1071   048B 07 AB 13      call printnl
1072   048E 63 02 00      sub d, 2
1073   0491 71 01         sub cl, 1
1074   0493 C3 00         cmp cl, 0
1075   0495 C7 85 04      jne syscall_regs_l0
1076   0498 0A 64 04      jmp syscall_break_prompt
1077   049B 07 AB 13      call printnl
1078   049E 0A 64 04      jmp syscall_break_prompt
1079   04A1             syscall_break_mem:
1080   04A1 07 AB 13      call printnl
1081   04A4 07 7C 14      call scan_u16x
1082   04A7 4D            mov si, a               ; data source from user space
1083   04A8 FD 4F 95 30   mov di, scrap_sector    ; destination in kernel space
1084   04AC 38 00 02      mov c, 512
1085   04AF 04            load                    ; transfer data to kernel space!
1086   04B0 3B 95 30      mov d, scrap_sector     ; dump pointer in d
1087   04B3 38 00 00      mov c, 0
1088   04B6             dump_loop:
1089   04B6 84            mov al, cl
1090   04B7 87 0F         and al, $0f
1091   04B9 C6 07 05      jz print_base
1092   04BC             back:
1093   04BC 1E            mov al, [d]             ; read byte
1094   04BD 2F            mov bl, al
1095   04BE 07 9E 14      call print_u8x
1096   04C1 10 00 20      mov a, $2000
1097   04C4 05 03         syscall sys_io          ; space
1098   04C6 84            mov al, cl
1099   04C7 87 0F         and al, $0f
1100   04C9 B9 0F         cmp al, $0f
1101   04CB C6 DC 04      je print_ascii
1102   04CE             back1:
1103   04CE 79            inc d
1104   04CF 78            inc c
1105   04D0 C2 00 02      cmp c, 512
1106   04D3 C7 B6 04      jne dump_loop
1107   04D6 07 AB 13      call printnl
1108   04D9 0A 64 04      jmp syscall_break_prompt  ; go to syscall_break return point
1109   04DC             print_ascii:
1110   04DC 10 00 20      mov a, $2000
1111   04DF 05 03         syscall sys_io
1112   04E1 63 10 00      sub d, 16
1113   04E4 26 10 00      mov b, 16
1114   04E7             print_ascii_l:
1115   04E7 79            inc d
1116   04E8 1E            mov al, [d]               ; read byte
1117   04E9 B9 20         cmp al, $20
1118   04EB C8 F3 04      jlu dot
1119   04EE B9 7E         cmp al, $7e
1120   04F0 D0 FB 04      jleu ascii
1121   04F3             dot:
1122   04F3 10 00 2E      mov a, $2e00
1123   04F6 05 03         syscall sys_io
1124   04F8 0A 00 05      jmp ascii_continue
1125   04FB             ascii:
1126   04FB 23            mov ah, al
1127   04FC 19 00         mov al, 0
1128   04FE 05 03         syscall sys_io
1129   0500             ascii_continue:
1130   0500 FD A9 E7 04   loopb print_ascii_l
1131   0504 0A CE 04      jmp back1
1132   0507             print_base:
1133   0507 07 AB 13      call printnl
1134   050A 2D            mov b, d
1135   050B 61 95 30      sub b, scrap_sector      ; remove this later and fix address bases which display incorrectly
1136   050E 07 5A 14      call print_u16x          ; display row
1137   0511 10 00 3A      mov a, $3a00
1138   0514 05 03         syscall sys_io
1139   0516 10 00 20      mov a, $2000
1140   0519 05 03         syscall sys_io
1141   051B 0A BC 04      jmp back
1142   051E             
1143   051E             s_break1:  
1144   051E 0A 64 65 62   .db "\ndebugger entry point.\n"
1144   0522 75 67 67 65 
1144   0526 72 20 65 6E 
1144   052A 74 72 79 20 
1144   052E 70 6F 69 6E 
1144   0532 74 2E 0A 
1145   0535 30 2E 20 73   .db "0. show registers\n"
1145   0539 68 6F 77 20 
1145   053D 72 65 67 69 
1145   0541 73 74 65 72 
1145   0545 73 0A 
1146   0547 31 2E 20 73   .db "1. show 512b ram block\n"
1146   054B 68 6F 77 20 
1146   054F 35 31 32 62 
1146   0553 20 72 61 6D 
1146   0557 20 62 6C 6F 
1146   055B 63 6B 0A 
1147   055E 32 2E 20 63   .db "2. continue execution", 0
1147   0562 6F 6E 74 69 
1147   0566 6E 75 65 20 
1147   056A 65 78 65 63 
1147   056E 75 74 69 6F 
1147   0572 6E 00 
1148   0574             
1149   0574             ; ------------------------------------------------------------------------------------------------------------------;
1150   0574             ; divide by zero exception
1151   0574             ; ------------------------------------------------------------------------------------------------------------------;
1152   0574             trap_div_zero:
1153   0574 D7            push a
1154   0575 DA            push d
1155   0576 E1            pushf
1156   0577 3B CC 19      mov d, s_divzero
1157   057A 07 FE 13      call _puts
1158   057D EE            popf
1159   057E E7            pop d
1160   057F E4            pop a
1161   0580 06            sysret ; enable interrupts
1162   0581             
1163   0581             ; ------------------------------------------------------------------------------------------------------------------;
1164   0581             ; undefined opcode exception
1165   0581             ; ------------------------------------------------------------------------------------------------------------------;
1166   0581             trap_undef_opcode:
1167   0581 06            sysret
1168   0582             
1169   0582             ; ------------------------------------------------------------------------------------------------------------------;
1170   0582             ; real-time clock services syscall
1171   0582             ; rtc i/o bank = ffa0 to ffaf
1172   0582             ; ffa0 to ffa7 is scratch ram
1173   0582             ; control register at $ffa8 [ w | r | s | cal4..cal0 ]
1174   0582             ; al = 0..6 -> get
1175   0582             ; al = 7..d -> set
1176   0582             ; ------------------------------------------------------------------------------------------------------------------;
1177   0582             syscall_rtc:
1178   0582 DB            push al
1179   0583 DA            push d
1180   0584 B9 06         cmp al, 6
1181   0586 D1 9B 05      jgu syscall_rtc_set
1182   0589             syscall_rtc_get:
1183   0589 6A A9         add al, $a9             ; generate rtc address to get to address a9 of clock
1184   058B 22 FF         mov ah, $ff    
1185   058D 3C            mov d, a                ; get to ffa9 + offset
1186   058E F2 A8 FF 40   mov byte[$ffa8], $40    ; set r bit to 1
1187   0592 1E            mov al, [d]             ; get data
1188   0593 F2 A8 FF 00   mov byte[$ffa8], 0      ; reset r bit
1189   0597 23            mov ah, al
1190   0598 E7            pop d
1191   0599 E8            pop al
1192   059A 06            sysret
1193   059B             syscall_rtc_set:
1194   059B DD            push bl
1195   059C 99            mov bl, ah              ; set data aside
1196   059D 6A A2         add al, $a2             ; generate rtc address to get to address a9 of clock
1197   059F 22 FF         mov ah, $ff    
1198   05A1 3C            mov d, a                ; get to ffa9 + offset
1199   05A2 1B            mov al, bl              ; get data back
1200   05A3 F2 A8 FF 80   mov byte[$ffa8], $80    ; set w bit to 1
1201   05A7 3E            mov [d], al             ; set data
1202   05A8 F2 A8 FF 00   mov byte[$ffa8], 0      ; reset write bit
1203   05AC EA            pop bl
1204   05AD E7            pop d
1205   05AE E8            pop al
1206   05AF 06            sysret
1207   05B0             
1208   05B0             datetime_serv_tbl:
1209   05B0 B8 05         .dw print_date
1210   05B2 2C 06         .dw set_date
1211   05B4             syscall_datetime:
1212   05B4 FD 0A B0 05   jmp [datetime_serv_tbl + al]      
1213   05B8             print_date:
1214   05B8 10 00 0D      mov a, $0d00           ; print carriage return char
1215   05BB 19 03         mov al, 3
1216   05BD 05 01         syscall sys_rtc        ; get week
1217   05BF 1A            mov al, ah
1218   05C0 22 00         mov ah, 0
1219   05C2 FD 9D 02      shl a, 2          
1220   05C5 3B 56 1A      mov d, s_week
1221   05C8 59            add d, a
1222   05C9 07 FE 13      call _puts
1223   05CC 10 00 20      mov a, $2000
1224   05CF 05 03         syscall sys_io         ; display ' '
1225   05D1 19 04         mov al, 4
1226   05D3 05 01         syscall sys_rtc        ; get day
1227   05D5 99            mov bl, ah
1228   05D6 07 9E 14      call print_u8x
1229   05D9 10 00 20      mov a, $2000
1230   05DC 05 03         syscall sys_io         ; display ' '
1231   05DE             ; there is a problem with the month displaying
1232   05DE             ; the month is stored as bcd. so when retrieving the month, the value will be in binary
1233   05DE             ; even though it is to be understood as bcd.
1234   05DE             ; when retrieving the value and adding the string table address offset the value will go overboard!  
1235   05DE 19 05         mov al, 05
1236   05E0 05 01         syscall sys_rtc        ; get month
1237   05E2 1A            mov al, ah
1238   05E3 22 00         mov ah, 0
1239   05E5 FD 9D 02      shl a, 2          
1240   05E8 3B 22 1A      mov d, s_months
1241   05EB 59            add d, a
1242   05EC 07 FE 13      call _puts
1243   05EF 10 00 20      mov a, $2000
1244   05F2 05 03         syscall sys_io         ; display ' '
1245   05F4 2E 20         mov bl, $20
1246   05F6 07 9E 14      call print_u8x         ; print 20 for year prefix
1247   05F9 19 06         mov al, 06
1248   05FB 05 01         syscall sys_rtc        ; get year
1249   05FD 99            mov bl, ah
1250   05FE 07 9E 14      call print_u8x
1251   0601 10 00 20      mov a, $2000  
1252   0604 05 03         syscall sys_io         ; display ' '
1253   0606 19 02         mov al, 2
1254   0608 05 01         syscall sys_rtc        ; get hours
1255   060A 99            mov bl, ah
1256   060B 07 9E 14      call print_u8x
1257   060E 10 00 3A      mov a, $3a00    
1258   0611 05 03         syscall sys_io         ; display ':'
1259   0613 19 01         mov al, 01
1260   0615 05 01         syscall sys_rtc        ; get minutes
1261   0617 99            mov bl, ah
1262   0618 07 9E 14      call print_u8x
1263   061B 10 00 3A      mov a, $3a00  
1264   061E 05 03         syscall sys_io         ; display ':'
1265   0620 19 00         mov al, 0
1266   0622 05 01         syscall sys_rtc        ; get seconds
1267   0624 99            mov bl, ah
1268   0625 07 9E 14      call print_u8x
1269   0628 07 AB 13      call printnl
1270   062B 06            sysret
1271   062C             set_date:
1272   062C 3B E7 19      mov d, s_set_year
1273   062F 07 FE 13      call _puts
1274   0632 07 E9 14      call scan_u8x          ; read integer into a
1275   0635 FD 9D 08      shl a, 8               ; only al used, move to ah
1276   0638 19 0D         mov al, 0dh            ; set rtc year
1277   063A 05 01         syscall sys_rtc        ; set rtc
1278   063C 3B EE 19      mov d, s_set_month
1279   063F 07 FE 13      call _puts
1280   0642 07 E9 14      call scan_u8x          ; read integer into a
1281   0645 FD 9D 08      shl a, 8               ; only al used, move to ah
1282   0648 19 0C         mov al, 0ch            ; set rtc month
1283   064A 05 01         syscall sys_rtc        ; set rtc
1284   064C 3B F6 19      mov d, s_set_day
1285   064F 07 FE 13      call _puts
1286   0652 07 E9 14      call scan_u8x          ; read integer into a
1287   0655 FD 9D 08      shl a, 8               ; only al used, move to ah
1288   0658 19 0B         mov al, 0bh            ; set rtc month
1289   065A 05 01         syscall sys_rtc        ; set rtc
1290   065C 3B FC 19      mov d, s_set_week
1291   065F 07 FE 13      call _puts
1292   0662 07 E9 14      call scan_u8x          ; read integer into a
1293   0665 FD 9D 08      shl a, 8               ; only al used, move to ah
1294   0668 19 0A         mov al, 0ah            ; set rtc month
1295   066A 05 01         syscall sys_rtc        ; set rtc
1296   066C 3B 06 1A      mov d, s_set_hours
1297   066F 07 FE 13      call _puts
1298   0672 07 E9 14      call scan_u8x          ; read integer into a
1299   0675 FD 9D 08      shl a, 8               ; only al used, move to ah
1300   0678 19 09         mov al, 09h            ; set rtc month
1301   067A 05 01         syscall sys_rtc        ; set rtc
1302   067C 3B 0E 1A      mov d, s_set_minutes
1303   067F 07 FE 13      call _puts
1304   0682 07 E9 14      call scan_u8x          ; read integer into a
1305   0685 FD 9D 08      shl a, 8               ; only al used, move to ah
1306   0688 19 08         mov al, 08h            ; set rtc month
1307   068A 05 01         syscall sys_rtc        ; set rtc
1308   068C 3B 18 1A      mov d, s_set_seconds
1309   068F 07 FE 13      call _puts
1310   0692 07 E9 14      call scan_u8x          ; read integer into a
1311   0695 FD 9D 08      shl a, 8               ; only al used, move to ah
1312   0698 19 07         mov al, 07h            ; set rtc month
1313   069A 05 01         syscall sys_rtc        ; set rtc
1314   069C 06            sysret
1315   069D             
1316   069D             ; ------------------------------------------------------------------------------------------------------------------;
1317   069D             ; ide services syscall
1318   069D             ; al = option
1319   069D             ; 0 = ide reset, 1 = ide sleep, 2 = read sector, 3 = write sector
1320   069D             ; ide read/write sector
1321   069D             ; 512 bytes
1322   069D             ; user buffer pointer in d
1323   069D             ; ah = number of sectors
1324   069D             ; cb = lba bytes 3..0
1325   069D             ; ------------------------------------------------------------------------------------------------------------------;
1326   069D             ide_serv_tbl:
1327   069D A9 06         .dw ide_reset
1328   069F BD 06         .dw ide_sleep
1329   06A1 CC 06         .dw ide_read_sect_wrapper
1330   06A3 D0 06         .dw ide_write_sect_wrapper
1331   06A5             syscall_ide:
1332   06A5 FD 0A 9D 06   jmp [ide_serv_tbl + al]    
1333   06A9             
1334   06A9             ide_reset:      
1335   06A9 F2 D7 FF 04   mov byte[_ide_r7], 4            ; reset ide
1336   06AD 07 56 07      call ide_wait                   ; wait for ide ready             
1337   06B0 F2 D6 FF E0   mov byte[_ide_r6], $e0          ; lba3= 0, master, mode= lba        
1338   06B4 F2 D1 FF 01   mov byte[_ide_r1], 1            ; 8-bit transfers      
1339   06B8 F2 D7 FF EF   mov byte[_ide_r7], $ef          ; set feature command
1340   06BC 06            sysret
1341   06BD             ide_sleep:
1342   06BD 07 56 07      call ide_wait                   ; wait for ide ready             
1343   06C0 F2 D6 FF 40   mov byte [_ide_r6], %01000000   ; lba[3:0](reserved), bit 6=1
1344   06C4 F2 D7 FF E6   mov byte [_ide_r7], $e6         ; sleep command
1345   06C8 07 56 07      call ide_wait                   ; wait for ide ready
1346   06CB 06            sysret
1347   06CC             ide_read_sect_wrapper:
1348   06CC 07 D4 06      call ide_read_sect
1349   06CF 06            sysret
1350   06D0             ide_write_sect_wrapper:
1351   06D0 07 FA 06      call ide_write_sect
1352   06D3 06            sysret
1353   06D4             ide_read_sect:
1354   06D4 1A            mov al, ah
1355   06D5 24            mov ah, bl
1356   06D6 42 D2 FF      mov [_ide_r2], a                ; number of sectors (0..255)
1357   06D9 1C            mov al, bh
1358   06DA 3D D4 FF      mov [_ide_r4], al
1359   06DD 12            mov a, c
1360   06DE 3D D5 FF      mov [_ide_r5], al
1361   06E1 1A            mov al, ah
1362   06E2 87 0F         and al, %00001111
1363   06E4 8B E0         or al, %11100000                ; mode lba, master
1364   06E6 3D D6 FF      mov [_ide_r6], al
1365   06E9             ide_read_sect_wait:
1366   06E9 1D D7 FF      mov al, [_ide_r7]  
1367   06EC 87 80         and al, $80                     ; busy flag
1368   06EE C7 E9 06      jnz ide_read_sect_wait
1369   06F1 19 20         mov al, $20
1370   06F3 3D D7 FF      mov [_ide_r7], al               ; read sector cmd
1371   06F6 07 20 07      call ide_read  
1372   06F9 09            ret
1373   06FA             ide_write_sect:
1374   06FA 1A            mov al, ah
1375   06FB 24            mov ah, bl
1376   06FC 42 D2 FF      mov [_ide_r2], a                ; number of sectors (0..255)
1377   06FF 1C            mov al, bh
1378   0700 3D D4 FF      mov [_ide_r4], al
1379   0703 12            mov a, c
1380   0704 3D D5 FF      mov [_ide_r5], al
1381   0707 1A            mov al, ah
1382   0708 87 0F         and al, %00001111
1383   070A 8B E0         or al, %11100000                ; mode lba, master
1384   070C 3D D6 FF      mov [_ide_r6], al
1385   070F             ide_write_sect_wait:
1386   070F 1D D7 FF      mov al, [_ide_r7]  
1387   0712 87 80         and al, $80                     ; busy flag
1388   0714 C7 0F 07      jnz ide_write_sect_wait
1389   0717 19 30         mov al, $30
1390   0719 3D D7 FF      mov [_ide_r7], al               ; write sector cmd
1391   071C 07 3B 07      call ide_write      
1392   071F 09            ret
1393   0720             
1394   0720             ;----------------------------------------------------------------------------------------------------;
1395   0720             ; read ide data
1396   0720             ; pointer in d
1397   0720             ;----------------------------------------------------------------------------------------------------;
1398   0720             ide_read:
1399   0720 DA            push d
1400   0721             ide_read_loop:
1401   0721 1D D7 FF      mov al, [_ide_r7]  
1402   0724 87 80         and al, 80h                     ; busy flag
1403   0726 C7 21 07      jnz ide_read_loop               ; wait loop
1404   0729 1D D7 FF      mov al, [_ide_r7]
1405   072C 87 08         and al, %00001000               ; drq flag
1406   072E C6 39 07      jz ide_read_end
1407   0731 1D D0 FF      mov al, [_ide_r0]
1408   0734 3E            mov [d], al
1409   0735 79            inc d
1410   0736 0A 21 07      jmp ide_read_loop
1411   0739             ide_read_end:
1412   0739 E7            pop d
1413   073A 09            ret
1414   073B             
1415   073B             ;----------------------------------------------------------------------------------------------------;
1416   073B             ; write ide data
1417   073B             ; data pointer in d
1418   073B             ;----------------------------------------------------------------------------------------------------;
1419   073B             ide_write:
1420   073B DA            push d
1421   073C             ide_write_loop:
1422   073C 1D D7 FF      mov al, [_ide_r7]  
1423   073F 87 80         and al, 80h             ; busy flag
1424   0741 C7 3C 07      jnz ide_write_loop      ; wait loop
1425   0744 1D D7 FF      mov al, [_ide_r7]
1426   0747 87 08         and al, %00001000       ; drq flag
1427   0749 C6 54 07      jz ide_write_end
1428   074C 1E            mov al, [d]
1429   074D 3D D0 FF      mov [_ide_r0], al
1430   0750 79            inc d 
1431   0751 0A 3C 07      jmp ide_write_loop
1432   0754             ide_write_end:
1433   0754 E7            pop d
1434   0755 09            ret
1435   0756             
1436   0756             ;----------------------------------------------------------------------------------------------------;
1437   0756             ; wait for ide to be ready
1438   0756             ;----------------------------------------------------------------------------------------------------;
1439   0756             ide_wait:
1440   0756 1D D7 FF      mov al, [_ide_r7]  
1441   0759 87 80         and al, 80h        ; busy flag
1442   075B C7 56 07      jnz ide_wait
1443   075E 09            ret
1444   075F             
1445   075F             ;----------------------------------------------------------------------------------------------------;
1446   075F             ; io syscall
1447   075F             ;----------------------------------------------------------------------------------------------------;
1448   075F             ; baud  divisor
1449   075F             ; 50    2304
1450   075F             ; 110   1047
1451   075F             ; 300    384
1452   075F             ; 600    192
1453   075F             ; 1200    96
1454   075F             ; 9600    12
1455   075F             ; 19200    6
1456   075F             ; 38400    3
1457   075F             syscall_io_jmp:
1458   075F 92 07         .dw syscall_io_putchar
1459   0761 9F 07         .dw syscall_io_getch
1460   0763 69 07         .dw syscall_io_uart_setup
1461   0765             syscall_io:
1462   0765 FD 0A 5F 07   jmp [syscall_io_jmp + al]
1463   0769             ; bit7 is the divisor latch access bit (dlab). it must be set high (logic 1) to access the divisor latches
1464   0769             ; of the baud generator during a read or write operation. it must be set low (logic 0) to access the receiver
1465   0769             ; buffer, the transmitter holding register, or the interrupt enable register.
1466   0769             syscall_io_uart_setup:
1467   0769 1D 29 19      mov al, [sys_uart0_lcr]
1468   076C 8B 80         or al, $80                ; set dlab access bit
1469   076E 3D 83 FF      mov [_uart0_lcr], al      ; 8 data, 2 stop, no parity by default
1470   0771 1D 2C 19      mov al, [sys_uart0_div0]
1471   0774 3D 80 FF      mov [_uart0_dlab_0], al   ; divisor latch byte 0
1472   0777 1D 2D 19      mov al, [sys_uart0_div1]
1473   077A 3D 81 FF      mov [_uart0_dlab_1], al   ; divisor latch byte 1      
1474   077D             
1475   077D 1D 29 19      mov al, [sys_uart0_lcr]
1476   0780 87 7F         and al, $7f               ; clear dlab access bit 
1477   0782 3D 83 FF      mov [_uart0_lcr], al
1478   0785 1D 2A 19      mov al, [sys_uart0_inten]
1479   0788 3D 81 FF      mov [_uart0_ier], al      ; interrupts
1480   078B 1D 2B 19      mov al, [sys_uart0_fifoen]
1481   078E 3D 82 FF      mov [_uart0_fcr], al      ; fifo control
1482   0791 06            sysret
1483   0792             
1484   0792             ; char in ah
1485   0792             syscall_io_putchar:
1486   0792             syscall_io_putchar_l0:
1487   0792 1D 85 FF      mov al, [_uart0_lsr]         ; read line status register
1488   0795 87 20         and al, $20
1489   0797 C6 92 07      jz syscall_io_putchar_l0    
1490   079A 1A            mov al, ah
1491   079B 3D 80 FF      mov [_uart0_data], al        ; write char to transmitter holding register
1492   079E 06            sysret
1493   079F             
1494   079F             ; char in ah
1495   079F             ; al = sucess code
1496   079F             syscall_io_getch:
1497   079F D8            push b
1498   07A0 DA            push d
1499   07A1 FD 0C         sti
1500   07A3             syscall_io_getch_l0:  
1501   07A3 14 36 19      mov a, [fifo_out]
1502   07A6 29 34 19      mov b, [fifo_in]
1503   07A9 B0            cmp a, b
1504   07AA C6 A3 07      je syscall_io_getch_l0
1505   07AD 3C            mov d, a
1506   07AE 77            inc a
1507   07AF AF 95 30      cmp a, fifo + _fifo_size      ; check if pointer reached the end of the fifo
1508   07B2 C7 B8 07      jne syscall_io_getch_cont
1509   07B5 10 95 20      mov a, fifo  
1510   07B8             syscall_io_getch_cont:  
1511   07B8 42 36 19      mov [fifo_out], a             ; update fifo pointer
1512   07BB 1E            mov al, [d]                   ; get char
1513   07BC 23            mov ah, al
1514   07BD 1D 28 19      mov al, [sys_echo_on]
1515   07C0 B9 01         cmp al, 1
1516   07C2 C7 D1 07      jne syscall_io_getch_noecho 
1517   07C5             ; here we just echo the char back to the console
1518   07C5             syscall_io_getch_echo_l0:
1519   07C5 1D 85 FF      mov al, [_uart0_lsr]         ; read line status register
1520   07C8 87 20         and al, $20                 ; isolate transmitter empty
1521   07CA C6 C5 07      jz syscall_io_getch_echo_l0
1522   07CD 1A            mov al, ah
1523   07CE 3D 80 FF      mov [_uart0_data], al        ; write char to transmitter holding register
1524   07D1             syscall_io_getch_noecho:
1525   07D1 19 01         mov al, 1                    ; al = 1 means a char successfully received
1526   07D3 E7            pop d
1527   07D4 E5            pop b
1528   07D5 06            sysret
1529   07D6             
1530   07D6             ;------------------------------------------------------------------------------------------------------;
1531   07D6             ; file system data
1532   07D6             ;------------------------------------------------------------------------------------------------------;
1533   07D6             ; infor for : ide services interrupt
1534   07D6             ; ide read/write 512-byte sector
1535   07D6             ; al = option
1536   07D6             ; user buffer pointer in d
1537   07D6             ; ah = number of sectors
1538   07D6             ; cb = lba bytes 3..0  
1539   07D6             ;------------------------------------------------------------------------------------------------------;
1540   07D6             ; file system data structure
1541   07D6             ;------------------------------------------------------------------------------------------------------;
1542   07D6             ; for a directory we have the header first, followed by metadata
1543   07D6             ; header 1 sector (512 bytes)
1544   07D6             ; metadata 1 sector (512 bytes)
1545   07D6             ; header entries:
1546   07D6             ; filename (64)
1547   07D6             ; parent dir lba (2) -  to be used for faster backwards navigation...
1548   07D6             ;
1549   07D6             ; metadata entries:
1550   07D6             ; filename (24)
1551   07D6             ; attributes (1)  |_|_|file_type(3bits)|x|w|r| types: file, directory, character device
1552   07D6             ; lba (2)
1553   07D6             ; size (2)
1554   07D6             ; day (1)
1555   07D6             ; month (1)
1556   07D6             ; year (1)
1557   07D6             ; packet size = 32 bytes
1558   07D6             ;
1559   07D6             ; first directory on disk is the root directory '/'
1560   07D6             file_system_jmptbl:
1561   07D6 41 08         .dw fs_mkfs                   ; 0
1562   07D8 00 00         .dw 0                         ; 1
1563   07DA A3 08         .dw fs_mkdir                  ; 2
1564   07DC 1C 0C         .dw fs_cd                     ; 3
1565   07DE 23 0C         .dw fs_ls                     ; 4
1566   07E0 0E 0D         .dw fs_mktxt                  ; 5
1567   07E2 D9 0D         .dw fs_mkbin                  ; 6
1568   07E4 A0 0E         .dw fs_pwd                    ; 7
1569   07E6 BD 0E         .dw fs_cat                    ; 8
1570   07E8 19 0F         .dw fs_rmdir                  ; 9
1571   07EA 75 0F         .dw fs_rm                     ; 10
1572   07EC 00 00         .dw 0                         ; 11
1573   07EE 00 00         .dw 0                         ; 12
1574   07F0 00 00         .dw 0                         ; 13
1575   07F2 49 08         .dw fs_chmod                  ; 14
1576   07F4 DD 0F         .dw fs_mv                     ; 15
1577   07F6 42 08         .dw fs_cd_root                ; 16
1578   07F8 18 0C         .dw fs_get_curr_dirid         ; 17
1579   07FA F4 09         .dw fs_dir_id_to_path         ; 18
1580   07FC 5A 0A         .dw fs_path_to_dir_id_user    ; 19
1581   07FE 74 0B         .dw fs_load_from_path_user    ; 20  
1582   0800 E4 0A         .dw fs_filepath_exists_user   ; 21
1583   0802             
1584   0802 0A 3E 20 73 s_syscall_fs_dbg0: .db "\n> syscall_file_system called: ", 0
1584   0806 79 73 63 61 
1584   080A 6C 6C 5F 66 
1584   080E 69 6C 65 5F 
1584   0812 73 79 73 74 
1584   0816 65 6D 20 63 
1584   081A 61 6C 6C 65 
1584   081E 64 3A 20 00 
1585   0822             syscall_file_system:
1586   0822 DD            push bl
1587   0823 31 27 19      mov bl, [sys_debug_mode]
1588   0826               ; debug block
1589   0826 C1 00         cmp bl, 0
1590   0828 EA            pop bl
1591   0829 C6 3D 08      je syscall_filesystem_jmp
1592   082C DA            push d
1593   082D DD            push bl
1594   082E 3B 02 08      mov d, s_syscall_fs_dbg0
1595   0831 07 FE 13      call _puts
1596   0834 2F            mov bl, al
1597   0835 07 9E 14      call print_u8x
1598   0838 07 AB 13      call printnl
1599   083B EA            pop bl
1600   083C E7            pop d
1601   083D             syscall_filesystem_jmp:
1602   083D FD 0A D6 07   jmp [file_system_jmptbl + al]
1603   0841             
1604   0841             fs_mkfs:  
1605   0841 06            sysret  
1606   0842               
1607   0842             fs_cd_root:
1608   0842 10 20 00      mov a, root_id
1609   0845 42 38 19      mov [current_dir_id], a      ; set current directory lba to root
1610   0848 06            sysret  
1611   0849             
1612   0849             ; filename in d (userspace data)
1613   0849             ; permission in bl
1614   0849             fs_chmod:
1615   0849 DD            push bl
1616   084A FD 4E         mov si, d
1617   084C FD 4F 95 1E   mov di, user_data
1618   0850 38 80 00      mov c, 128
1619   0853 04            load                        ; load filename from user-space
1620   0854 14 38 19      mov a, [current_dir_id]
1621   0857 77            inc a                       ; metadata sector
1622   0858 27            mov b, a
1623   0859 38 00 00      mov c, 0                    ; upper lba = 0
1624   085C 22 01         mov ah, $01                  ; 1 sector
1625   085E 3B 95 32      mov d, transient_area
1626   0861 07 D4 06      call ide_read_sect          ; read directory
1627   0864 FD 10         cla
1628   0866 42 30 19      mov [index], a              ; reset file counter
1629   0869             fs_chmod_l1:
1630   0869 FD 4E         mov si, d
1631   086B FD 4F 95 1E   mov di, user_data
1632   086F 07 41 12      call _strcmp
1633   0872 C6 89 08      je fs_chmod_found_entry
1634   0875 58 20 00      add d, 32
1635   0878 14 30 19      mov a, [index]
1636   087B 77            inc a
1637   087C 42 30 19      mov [index], a
1638   087F AF 10 00      cmp a, fst_files_per_dir
1639   0882 C7 69 08      jne fs_chmod_l1
1640   0885 EA            pop bl
1641   0886 0A A2 08      jmp fs_chmod_not_found
1642   0889             fs_chmod_found_entry:  
1643   0889 FD 79         mov g, b                    ; save lba
1644   088B EA            pop bl                      ; retrieve saved permission value
1645   088C 1F 18 00      mov al, [d + 24]            ; read file permissions
1646   088F 87 F8         and al, %11111000           ; remove all permissions, keep other flags
1647   0891 8C            or al, bl                   ; set new permissions
1648   0892 3F 18 00      mov [d + 24], al            ; write new permissions
1649   0895 38 00 00      mov c, 0
1650   0898 3B 95 32      mov d, transient_area
1651   089B 22 01         mov ah, $01                 ; disk write 1 sect
1652   089D FD 27         mov b, g                    ; retrieve lba
1653   089F 07 FA 06      call ide_write_sect         ; write sector
1654   08A2             fs_chmod_not_found:
1655   08A2 06            sysret
1656   08A3             
1657   08A3             ;------------------------------------------------------------------------------------------------------;
1658   08A3             ; create new directory
1659   08A3             ;------------------------------------------------------------------------------------------------------;
1660   08A3             ; search list for null name entry. add new directory to list
1661   08A3             fs_mkdir:
1662   08A3 FD 4E         mov si, d
1663   08A5 FD 4F 95 1E   mov di, user_data
1664   08A9 38 00 02      mov c, 512
1665   08AC 04            load                        ; load data from user-space
1666   08AD 26 22 00      mov b, fst_lba_start + 2    ; start at 2 because lba  0 is root (this would also cause issues                 
1667   08B0                                           ; when checking for null name, since root has a null name)
1668   08B0 38 00 00      mov c, 0                    ; upper lba = 0
1669   08B3             fs_mkdir_l1:  
1670   08B3 22 01         mov ah, $01                  ; 1 sector
1671   08B5 3B 95 32      mov d, transient_area
1672   08B8 07 D4 06      call ide_read_sect          ; read sector
1673   08BB BD 00         cmp byte[d], 0              ; check for null
1674   08BD C6 C6 08      je fs_mkdir_found_null
1675   08C0 55 02 00      add b, fst_sectors_per_dir  ; skip directory
1676   08C3 0A B3 08      jmp fs_mkdir_l1
1677   08C6             fs_mkdir_found_null:
1678   08C6             ;create header file by grabbing dir name from parameter
1679   08C6 D8            push b                      ; save new directory's lba
1680   08C7 38 40 00      mov c, 64
1681   08CA FD 4D 95 1E   mov si, user_data
1682   08CE FD 4F 95 32   mov di, transient_area
1683   08D2 FD F5         rep movsb                   ; copy dirname from user_data to transient_area
1684   08D4 14 38 19      mov a, [current_dir_id]
1685   08D7 42 D5 32      mov [transient_area + 64], a    ; store parent directory lba
1686   08DA 19 00         mov al, 0
1687   08DC FD 4F 95 34   mov di, transient_area + 512
1688   08E0 38 00 02      mov c, 512
1689   08E3 FD F7         rep stosb                       ; clean buffer
1690   08E5 38 00 00      mov c, 0                        ; reset lba(c) to 0
1691   08E8             ; write directory entry sectors
1692   08E8 3B 95 32      mov d, transient_area
1693   08EB 22 02         mov ah, $02                     ; disk write, 2 sectors
1694   08ED 07 FA 06      call ide_write_sect             ; write sector
1695   08F0             ; now we need to add the new directory to the list, inside the current directory
1696   08F0 14 38 19      mov a, [current_dir_id]
1697   08F3 53 01 00      add a, 1
1698   08F6 27            mov b, a                        ; metadata sector
1699   08F7 38 00 00      mov c, 0
1700   08FA FD 79         mov g, b                        ; save lba
1701   08FC 3B 95 32      mov d, transient_area
1702   08FF 22 01         mov ah, $01                  ; 1 sector
1703   0901 07 D4 06      call ide_read_sect              ; read metadata sector
1704   0904             fs_mkdir_l2:
1705   0904 BD 00         cmp byte[d], 0
1706   0906 C6 0F 09      je fs_mkdir_found_null2
1707   0909 58 20 00      add d, fst_entry_size
1708   090C 0A 04 09      jmp fs_mkdir_l2                ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
1709   090F             fs_mkdir_found_null2:
1710   090F FD 4D 95 1E   mov si, user_data
1711   0913 FD 50         mov di, d
1712   0915 07 56 12      call _strcpy                    ; copy directory name
1713   0918 58 18 00      add d, 24                       ; goto attributes
1714   091B 19 0B         mov al, %00001011               ; directory, no execute, write, read
1715   091D 3E            mov [d], al      
1716   091E 79            inc d
1717   091F E5            pop b
1718   0920 D8            push b                          ; push lba back
1719   0921 FD 43         mov [d], b                      ; save lba
1720   0923             ; set file creation date  
1721   0923 58 04 00      add d, 4
1722   0926 19 04         mov al, 4
1723   0928 05 01         syscall sys_rtc
1724   092A 1A            mov al, ah
1725   092B 3E            mov [d], al                     ; set day
1726   092C 79            inc d
1727   092D 19 05         mov al, 5
1728   092F 05 01         syscall sys_rtc
1729   0931 1A            mov al, ah
1730   0932 3E            mov [d], al                     ; set month
1731   0933 79            inc d
1732   0934 19 06         mov al, 6
1733   0936 05 01         syscall sys_rtc
1734   0938 1A            mov al, ah
1735   0939 3E            mov [d], al                     ; set year
1736   093A             ; write sector into disk for new directory entry
1737   093A FD 27         mov b, g
1738   093C 38 00 00      mov c, 0
1739   093F 3B 95 32      mov d, transient_area
1740   0942 22 01         mov ah, $01                     ; disk write, 1 sector
1741   0944 07 FA 06      call ide_write_sect             ; write sector
1742   0947             
1743   0947             ; after adding the new directory's information to its parent directory's list
1744   0947             ; we need to now enter the new directory, and to it add two new directories!
1745   0947             ; which directories do we need to add ? '..' and '.' are the directories needed.
1746   0947             ; importantly, note that these two new directories are only entries in the list
1747   0947             ; and do not have actual physical entries in the disk as real directories.
1748   0947             ; i.e. they only exist as list entries in the new directory created so that
1749   0947             ; the new directory can reference its parent and itself.
1750   0947             ; we need to add both '..' and '.'
1751   0947             ; this first section is for '..' and on the section below we do the same for '.'
1752   0947 E4            pop a                         ; retrieve the new directory's lba  
1753   0948 D7            push a                        ; and save again
1754   0949 53 01 00      add a, 1
1755   094C 27            mov b, a                      ; metadata sector
1756   094D 38 00 00      mov c, 0
1757   0950 FD 79         mov g, b                      ; save lba
1758   0952 3B 95 32      mov d, transient_area
1759   0955 22 01         mov ah, $01                  ; 1 sector
1760   0957 07 D4 06      call ide_read_sect            ; read metadata sector
1761   095A             fs_mkdir_l3:
1762   095A BD 00         cmp byte[d], 0
1763   095C C6 65 09      je fs_mkdir_found_null3
1764   095F 58 20 00      add d, fst_entry_size
1765   0962 0A 5A 09      jmp fs_mkdir_l3              ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
1766   0965             fs_mkdir_found_null3:
1767   0965 FD 4D 57 19   mov si, s_parent_dir
1768   0969 FD 50         mov di, d
1769   096B 07 56 12      call _strcpy                  ; copy directory name
1770   096E 58 18 00      add d, 24                     ; goto attributes
1771   0971 19 0B         mov al, %00001011             ; directory, no execute, write, read, 
1772   0973 3E            mov [d], al      
1773   0974 79            inc d
1774   0975 29 38 19      mov b, [current_dir_id]        ; retrieve the parent directorys lba
1775   0978 FD 43         mov [d], b                    ; save lba
1776   097A             ; set file creation date  
1777   097A 58 04 00      add d, 4
1778   097D 19 04         mov al, 4
1779   097F 05 01         syscall sys_rtc
1780   0981 1A            mov al, ah
1781   0982 3E            mov [d], al                   ; set day
1782   0983 79            inc d
1783   0984 19 05         mov al, 5
1784   0986 05 01         syscall sys_rtc
1785   0988 1A            mov al, ah
1786   0989 3E            mov [d], al                   ; set month
1787   098A 79            inc d
1788   098B 19 06         mov al, 6
1789   098D 05 01         syscall sys_rtc
1790   098F 1A            mov al, ah
1791   0990 3E            mov [d], al                   ; set year
1792   0991             ; write sector into disk for new directory entry
1793   0991 FD 27         mov b, g
1794   0993 38 00 00      mov c, 0
1795   0996 3B 95 32      mov d, transient_area
1796   0999 22 01         mov ah, $01                   ; disk write, 1 sector
1797   099B 07 FA 06      call ide_write_sect           ; write sector
1798   099E             ;;;;;;;;;;;;;
1799   099E             ; like we did above for '..', we need to now add the '.' directory to the list.
1800   099E             ;------------------------------------------------------------------------------------------------------;
1801   099E E4            pop a                         ; retrieve the new directory's lba  
1802   099F D7            push a
1803   09A0 53 01 00      add a, 1
1804   09A3 27            mov b, a                      ; metadata sector
1805   09A4 38 00 00      mov c, 0
1806   09A7 FD 79         mov g, b                      ; save lba
1807   09A9 3B 95 32      mov d, transient_area
1808   09AC 22 01         mov ah, $01                  ; 1 sector
1809   09AE 07 D4 06      call ide_read_sect            ; read metadata sector
1810   09B1             fs_mkdir_l4:
1811   09B1 BD 00         cmp byte[d], 0
1812   09B3 C6 BC 09      je fs_mkdir_found_null4
1813   09B6 58 20 00      add d, fst_entry_size
1814   09B9 0A B1 09      jmp fs_mkdir_l4              ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
1815   09BC             fs_mkdir_found_null4:
1816   09BC FD 4D 5A 19   mov si, s_current_dir
1817   09C0 FD 50         mov di, d
1818   09C2 07 56 12      call _strcpy                  ; copy directory name
1819   09C5 58 18 00      add d, 24                     ; goto attributes
1820   09C8 19 0B         mov al, %00001011             ; directory, no execute, write, read, 
1821   09CA 3E            mov [d], al      
1822   09CB 79            inc d
1823   09CC E5            pop b                         ; new directory's lba itself. for self-referential directory entry '.'
1824   09CD FD 43         mov [d], b                    ; save lba
1825   09CF             ; set file creation date  
1826   09CF 58 04 00      add d, 4
1827   09D2 19 04         mov al, 4
1828   09D4 05 01         syscall sys_rtc
1829   09D6 1A            mov al, ah
1830   09D7 3E            mov [d], al                   ; set day
1831   09D8 79            inc d
1832   09D9 19 05         mov al, 5
1833   09DB 05 01         syscall sys_rtc
1834   09DD 1A            mov al, ah
1835   09DE 3E            mov [d], al                   ; set month
1836   09DF 79            inc d
1837   09E0 19 06         mov al, 6
1838   09E2 05 01         syscall sys_rtc
1839   09E4 1A            mov al, ah
1840   09E5 3E            mov [d], al                   ; set year
1841   09E6             ; write sector into disk for new directory entry
1842   09E6 FD 27         mov b, g
1843   09E8 38 00 00      mov c, 0
1844   09EB 3B 95 32      mov d, transient_area
1845   09EE 22 01         mov ah, $01                   ; disk write, 1 sector
1846   09F0 07 FA 06      call ide_write_sect           ; write sector
1847   09F3             fs_mkdir_end:
1848   09F3 06            sysret
1849   09F4             
1850   09F4             ;------------------------------------------------------------------------------------------------------;
1851   09F4             ; get path from a given directory dirid
1852   09F4             ; pseudo code:
1853   09F4             ;  fs_dir_id_to_path(int dirid, char *d){
1854   09F4             ;    if(dirid == 0){
1855   09F4             ;      reverse path in d;
1856   09F4             ;      return;
1857   09F4             ;    }
1858   09F4             ;    else{
1859   09F4             ;      copy directory name to end of d;
1860   09F4             ;      add '/' to end of d;
1861   09F4             ;      parentid = get parent directory id;
1862   09F4             ;      fs_dir_id_to_path(parentid, d);
1863   09F4             ;    }
1864   09F4             ;  }
1865   09F4             ; a = dirid
1866   09F4             ; d = generated path string pointer
1867   09F4             ;------------------------------------------------------------------------------------------------------;
1868   09F4             ; sample path: /usr/bin
1869   09F4             fs_dir_id_to_path:
1870   09F4 3B 15 1E      mov d, filename
1871   09F7 19 00         mov al, 0
1872   09F9 3E            mov [d], al                     ; initialize path string 
1873   09FA 14 38 19      mov a, [current_dir_id]
1874   09FD 07 0A 0A      call fs_dir_id_to_path_e0
1875   0A00 3B 15 1E      mov d, filename
1876   0A03 07 EA 11      call _strrev
1877   0A06 07 FE 13      call _puts
1878   0A09 06            sysret
1879   0A0A             fs_dir_id_to_path_e0:
1880   0A0A 07 29 0A      call get_dirname_from_dirid
1881   0A0D FD 4D 5C 19   mov si, s_fslash
1882   0A11 FD 50         mov di, d
1883   0A13 07 64 12      call _strcat                    ; add '/' to end of path
1884   0A16 AF 20 00      cmp a, root_id               ; check if we are at the root directory
1885   0A19 C6 28 0A      je fs_dir_id_to_path_root
1886   0A1C 07 46 0A      call get_parentid_from_dirid    ; use current id (a) to find parentid (into a)
1887   0A1F AF 20 00      cmp a, root_id               ; check if we are at the root directory
1888   0A22 C6 28 0A      je fs_dir_id_to_path_root
1889   0A25 07 0A 0A      call fs_dir_id_to_path_e0     ; recursively call itself
1890   0A28             fs_dir_id_to_path_root:
1891   0A28 09            ret
1892   0A29             
1893   0A29             ;------------------------------------------------------------------------------------------------------;
1894   0A29             ; in_puts:
1895   0A29             ; a = directory id
1896   0A29             ; out_puts:
1897   0A29             ; d = pointer to directory name string
1898   0A29             ;------------------------------------------------------------------------------------------------------;
1899   0A29             get_dirname_from_dirid:
1900   0A29 D7            push a
1901   0A2A D8            push b
1902   0A2B DA            push d
1903   0A2C 27            mov b, a
1904   0A2D 38 00 00      mov c, 0                      ; upper lba = 0
1905   0A30 22 01         mov ah, $01                  ; 1 sector
1906   0A32 3B 95 30      mov d, transient_area - 512
1907   0A35 07 D4 06      call ide_read_sect            ; read directory
1908   0A38 07 EA 11      call _strrev                  ; reverse dir name before copying
1909   0A3B FD 4E         mov si, d
1910   0A3D E7            pop d                         ; destination address = d value pushed at beginning
1911   0A3E FD 50         mov di, d
1912   0A40 07 64 12      call _strcat                  ; copy filename to d
1913   0A43 E5            pop b
1914   0A44 E4            pop a
1915   0A45 09            ret
1916   0A46             
1917   0A46             ;------------------------------------------------------------------------------------------------------;
1918   0A46             ; in_puts:
1919   0A46             ; a = directory id
1920   0A46             ; out_puts:
1921   0A46             ; a = parent directory id
1922   0A46             ;------------------------------------------------------------------------------------------------------;
1923   0A46             get_parentid_from_dirid:
1924   0A46 D8            push b
1925   0A47 DA            push d
1926   0A48 27            mov b, a
1927   0A49 38 00 00      mov c, 0                      ; upper lba = 0
1928   0A4C 22 01         mov ah, $01                  ; 1 sector
1929   0A4E 3B 95 30      mov d, transient_area - 512
1930   0A51 07 D4 06      call ide_read_sect            ; read directory
1931   0A54 16 40 00      mov a, [d + 64]               ; copy parent id value to a
1932   0A57 E7            pop d
1933   0A58 E5            pop b
1934   0A59 09            ret
1935   0A5A             
1936   0A5A             ;------------------------------------------------------------------------------------------------------;
1937   0A5A             ; get dirid from a given path string
1938   0A5A             ; in_puts:
1939   0A5A             ; d = path pointer 
1940   0A5A             ; out_puts:
1941   0A5A             ; a = dirid
1942   0A5A             ; if dir non existent, a = ffff (fail code)
1943   0A5A             ; /usr/local/bin    - absolute
1944   0A5A             ; local/bin/games    - relative
1945   0A5A             ;------------------------------------------------------------------------------------------------------;
1946   0A5A             fs_path_to_dir_id_user:
1947   0A5A FD 4E         mov si, d
1948   0A5C FD 4F 95 1E   mov di, user_data
1949   0A60 38 00 02      mov c, 512
1950   0A63 04            load
1951   0A64 07 68 0A      call get_dirid_from_path
1952   0A67 06            sysret
1953   0A68             get_dirid_from_path:
1954   0A68 26 95 1E      mov b, user_data
1955   0A6B FD 42 23 18   mov [prog], b                  ; token pointer set to path string
1956   0A6F 07 84 16      call get_token
1957   0A72 31 26 18      mov bl, [tok]
1958   0A75 C1 01         cmp bl, tok_fslash
1959   0A77 C6 83 0A      je get_dirid_from_path_abs 
1960   0A7A 14 38 19      mov a, [current_dir_id]
1961   0A7D 07 0A 18      call _putback
1962   0A80 0A 86 0A      jmp get_dirid_from_path_e0
1963   0A83             get_dirid_from_path_abs:
1964   0A83 10 20 00      mov a, root_id
1965   0A86             get_dirid_from_path_e0:
1966   0A86 07 84 16      call get_token
1967   0A89 31 25 18      mov bl, [toktyp]
1968   0A8C C1 00         cmp bl, toktyp_identifier
1969   0A8E C7 DF 0A      jne get_dirid_from_path_end   ; check if there are tokens after '/'. i.e. is this a 'cd /' command?
1970   0A91             
1971   0A91 FD 4D 27 18   mov si, tokstr
1972   0A95 FD 4F 15 1E   mov di, filename
1973   0A99 07 56 12      call _strcpy        
1974   0A9C 77            inc a                         ; metadata sector
1975   0A9D 27            mov b, a
1976   0A9E 38 00 00      mov c, 0                      ; upper lba = 0
1977   0AA1 22 01         mov ah, $01                  ; 1 sector
1978   0AA3 3B 95 32      mov d, transient_area
1979   0AA6 07 D4 06      call ide_read_sect            ; read directory
1980   0AA9 FD 10         cla
1981   0AAB 42 30 19      mov [index], a
1982   0AAE             get_dirid_from_path_l1:
1983   0AAE FD 4E         mov si, d
1984   0AB0 FD 4F 15 1E   mov di, filename
1985   0AB4 07 41 12      call _strcmp
1986   0AB7 C6 CD 0A      je get_dirid_from_path_name_equal  
1987   0ABA 58 20 00      add d, 32
1988   0ABD 14 30 19      mov a, [index]
1989   0AC0 77            inc a
1990   0AC1 42 30 19      mov [index], a
1991   0AC4 AF 10 00      cmp a, fst_files_per_dir
1992   0AC7 C6 E0 0A      je get_dirid_from_path_fail
1993   0ACA 0A AE 0A      jmp get_dirid_from_path_l1
1994   0ACD             get_dirid_from_path_name_equal:
1995   0ACD 58 19 00      add d, 25           
1996   0AD0 15            mov a, [d]                    ; set result register a = dirid
1997   0AD1 07 84 16      call get_token
1998   0AD4 31 26 18      mov bl, [tok]
1999   0AD7 C1 01         cmp bl, tok_fslash            ; check if there are more elements in the path
2000   0AD9 C6 86 0A      je get_dirid_from_path_e0
2001   0ADC 07 0A 18      call _putback
2002   0ADF             get_dirid_from_path_end:
2003   0ADF 09            ret
2004   0AE0             get_dirid_from_path_fail:
2005   0AE0 10 FF FF      mov a, $ffff
2006   0AE3 09            ret
2007   0AE4             
2008   0AE4             
2009   0AE4             ;------------------------------------------------------------------------------------------------------;
2010   0AE4             ; check if file exists by a given path string
2011   0AE4             ; in_puts:
2012   0AE4             ; d = path pointer 
2013   0AE4             ; outputs:
2014   0AE4             ; a = success code, if file exists gives lba, else, give 0
2015   0AE4             ; /usr/local/bin/ed
2016   0AE4             ;------------------------------------------------------------------------------------------------------;
2017   0AE4             fs_filepath_exists_user:
2018   0AE4 FD 4E         mov si, d
2019   0AE6 FD 4F 95 1E   mov di, user_data
2020   0AEA 38 00 02      mov c, 512
2021   0AED 04            load
2022   0AEE 07 F2 0A      call file_exists_by_path
2023   0AF1 06            sysret
2024   0AF2             file_exists_by_path:
2025   0AF2 26 95 1E      mov b, user_data
2026   0AF5 FD 42 23 18   mov [prog], b                   ; token pointer set to path string
2027   0AF9 07 84 16      call get_token
2028   0AFC 31 26 18      mov bl, [tok]
2029   0AFF C1 01         cmp bl, tok_fslash
2030   0B01 C6 0D 0B      je  file_exists_by_path_abs
2031   0B04 14 38 19      mov a, [current_dir_id]
2032   0B07 07 0A 18      call _putback
2033   0B0A 0A 10 0B      jmp file_exists_by_path_e0
2034   0B0D             file_exists_by_path_abs:
2035   0B0D 10 20 00      mov a, root_id
2036   0B10             file_exists_by_path_e0:
2037   0B10 07 84 16      call get_token
2038   0B13 31 25 18      mov bl, [toktyp]
2039   0B16 C1 00         cmp bl, toktyp_identifier
2040   0B18 C7 70 0B      jne file_exists_by_path_end     ; check if there are tokens after '/'
2041   0B1B FD 4D 27 18   mov si, tokstr
2042   0B1F FD 4F 15 1E   mov di, filename
2043   0B23 07 56 12      call _strcpy        
2044   0B26 77            inc a                           ; metadata sector
2045   0B27 27            mov b, a
2046   0B28 38 00 00      mov c, 0                        ; upper lba = 0
2047   0B2B 22 01         mov ah, $01                  ; 1 sector
2048   0B2D 3B 95 32      mov d, transient_area
2049   0B30 07 D4 06      call ide_read_sect              ; read directory
2050   0B33 FD 10         cla
2051   0B35 42 30 19      mov [index], a
2052   0B38             file_exists_by_path_l1:
2053   0B38 FD 4E         mov si, d
2054   0B3A FD 4F 15 1E   mov di, filename
2055   0B3E 07 41 12      call _strcmp
2056   0B41 C6 57 0B      je   file_exists_by_path_name_equal
2057   0B44 58 20 00      add d, 32
2058   0B47 14 30 19      mov a, [index]
2059   0B4A 77            inc a
2060   0B4B 42 30 19      mov [index], a
2061   0B4E AF 10 00      cmp a, fst_files_per_dir
2062   0B51 C6 70 0B      je file_exists_by_path_end
2063   0B54 0A 38 0B      jmp file_exists_by_path_l1
2064   0B57             file_exists_by_path_name_equal:
2065   0B57 33 18 00      mov bl, [d + 24]
2066   0B5A FD 87 38      and bl, %00111000               ; directory flag
2067   0B5D C1 08         cmp bl, %00001000               ; is dir?
2068   0B5F C6 66 0B      je file_exists_by_path_isdir;
2069   0B62             ; entry is a file
2070   0B62 16 19 00      mov a, [d + 25]                 ; get and return lba of file
2071   0B65 09            ret
2072   0B66             file_exists_by_path_isdir:
2073   0B66 58 19 00      add d, 25           
2074   0B69 15            mov a, [d]                      ; set result register a = dirid
2075   0B6A 07 84 16      call get_token
2076   0B6D 0A 10 0B      jmp file_exists_by_path_e0
2077   0B70             file_exists_by_path_end:
2078   0B70 10 00 00      mov a, 0                        ; return 0 because file was not found
2079   0B73 09            ret
2080   0B74             
2081   0B74             ;------------------------------------------------------------------------------------------------------;
2082   0B74             ; load file data from a given path string
2083   0B74             ; inputs:
2084   0B74             ; d = path pointer 
2085   0B74             ; di = userspace program data destination
2086   0B74             ; /usr/local/bin/ed
2087   0B74             ; ./ed
2088   0B74             ;------------------------------------------------------------------------------------------------------;
2089   0B74             fs_load_from_path_user:
2090   0B74 E3            push di
2091   0B75 FD 4E         mov si, d
2092   0B77 FD 4F 95 1E   mov di, user_data
2093   0B7B 38 00 02      mov c, 512
2094   0B7E 04            load
2095   0B7F 07 8C 0B      call loadfile_from_path
2096   0B82 F0            pop di
2097   0B83 FD 4D 95 32   mov si, transient_area
2098   0B87 38 00 3E      mov c, 512 * (fs_sectors_per_file-1)
2099   0B8A 03            store
2100   0B8B 06            sysret
2101   0B8C             loadfile_from_path:
2102   0B8C 26 95 1E      mov b, user_data
2103   0B8F FD 42 23 18   mov [prog], b                 ; token pointer set to path string
2104   0B93 07 84 16      call get_token
2105   0B96 31 26 18      mov bl, [tok]
2106   0B99 C1 01         cmp bl, tok_fslash
2107   0B9B C6 A7 0B      je loadfile_from_path_abs 
2108   0B9E 14 38 19      mov a, [current_dir_id]
2109   0BA1 07 0A 18      call _putback
2110   0BA4 0A AA 0B      jmp loadfile_from_path_e0
2111   0BA7             loadfile_from_path_abs:
2112   0BA7 10 20 00      mov a, root_id
2113   0BAA             loadfile_from_path_e0:
2114   0BAA 07 84 16      call get_token
2115   0BAD 31 25 18      mov bl, [toktyp]
2116   0BB0 C1 00         cmp bl, toktyp_identifier
2117   0BB2 C7 17 0C      jne loadfile_from_path_end    ; check if there are tokens after '/'. i.e. is this a 'cd /' command?
2118   0BB5 FD 4D 27 18   mov si, tokstr
2119   0BB9 FD 4F 15 1E   mov di, filename
2120   0BBD 07 56 12      call _strcpy        
2121   0BC0 77            inc a                         ; metadata sector
2122   0BC1 27            mov b, a
2123   0BC2 38 00 00      mov c, 0                      ; upper lba = 0
2124   0BC5 22 01         mov ah, $01                  ; 1 sector
2125   0BC7 3B 95 32      mov d, transient_area
2126   0BCA 07 D4 06      call ide_read_sect            ; read directory
2127   0BCD FD 10         cla
2128   0BCF 42 30 19      mov [index], a
2129   0BD2             loadfile_from_path_l1:
2130   0BD2 FD 4E         mov si, d
2131   0BD4 FD 4F 15 1E   mov di, filename
2132   0BD8 07 41 12      call _strcmp
2133   0BDB C6 F1 0B      je loadfile_from_path_name_equal  
2134   0BDE 58 20 00      add d, 32
2135   0BE1 14 30 19      mov a, [index]
2136   0BE4 77            inc a
2137   0BE5 42 30 19      mov [index], a
2138   0BE8 AF 10 00      cmp a, fst_files_per_dir
2139   0BEB C6 17 0C      je loadfile_from_path_end
2140   0BEE 0A D2 0B      jmp loadfile_from_path_l1
2141   0BF1             loadfile_from_path_name_equal:
2142   0BF1 33 18 00      mov bl, [d + 24]
2143   0BF4 FD 87 38      and bl, %00111000             ; directory flag
2144   0BF7 C1 08         cmp bl, %00001000             ; is dir?
2145   0BF9 C6 0D 0C      je loadfile_isdirectory  
2146   0BFC             ; entry is a file
2147   0BFC 2B 19 00      mov b, [d + 25]               ; get lba
2148   0BFF FD 77         inc b                         ; add 1 to b because the lba for data comes after the header sector
2149   0C01 3B 95 32      mov d, transient_area
2150   0C04 38 00 00      mov c, 0
2151   0C07 22 1F         mov ah, fs_sectors_per_file-1 ; number of sectors
2152   0C09 07 D4 06      call ide_read_sect            ; read sector
2153   0C0C 09            ret
2154   0C0D             loadfile_isdirectory:
2155   0C0D 58 19 00      add d, 25           
2156   0C10 15            mov a, [d]                    ; set result register a = dirid
2157   0C11 07 84 16      call get_token
2158   0C14 0A AA 0B      jmp loadfile_from_path_e0
2159   0C17             loadfile_from_path_end:
2160   0C17 09            ret
2161   0C18             
2162   0C18             ;------------------------------------------------------------------------------------------------------;
2163   0C18             ; return the id of the current directory
2164   0C18             ; id returned in b
2165   0C18             ;------------------------------------------------------------------------------------------------------;
2166   0C18             fs_get_curr_dirid:
2167   0C18 29 38 19      mov b, [current_dir_id]
2168   0C1B 06            sysret
2169   0C1C             
2170   0C1C             ;------------------------------------------------------------------------------------------------------;
2171   0C1C             ; cd
2172   0C1C             ;------------------------------------------------------------------------------------------------------;
2173   0C1C             ; new dirid in b
2174   0C1C             fs_cd:
2175   0C1C FD 42 38 19   mov [current_dir_id], b
2176   0C20 06            sysret  
2177   0C21             
2178   0C21             ;------------------------------------------------------------------------------------------------------;
2179   0C21             ; ls
2180   0C21             ; dirid in b
2181   0C21             ;------------------------------------------------------------------------------------------------------;
2182   0C21 00 00       ls_count:       .dw 0
2183   0C23             fs_ls:
2184   0C23 FD 77         inc b                        ; metadata sector
2185   0C25 38 00 00      mov c, 0                     ; upper lba = 0
2186   0C28 22 01         mov ah, $01                  ; 1 sector
2187   0C2A 3B 95 32      mov d, transient_area
2188   0C2D 07 D4 06      call ide_read_sect           ; read directory
2189   0C30 FD 10         cla
2190   0C32 42 30 19      mov [index], a               ; reset entry index
2191   0C35 3D 21 0C      mov [ls_count], al           ; reset item count
2192   0C38             fs_ls_l1:
2193   0C38 BD 00         cmp byte [d], 0              ; check for null
2194   0C3A C6 D1 0C      je fs_ls_next
2195   0C3D             fs_ls_non_null:
2196   0C3D 1D 21 0C      mov al, [ls_count]
2197   0C40 7A            inc al
2198   0C41 3D 21 0C      mov [ls_count], al           ; increment item count
2199   0C44 1F 18 00      mov al, [d + 24]
2200   0C47 87 38         and al, %00111000
2201   0C49 FD A2 03      shr al, 3
2202   0C4C 22 00         mov ah, 0                    ; file type
2203   0C4E B7 63 19      mov a, [a + file_type]      
2204   0C51 23            mov ah, al
2205   0C52 07 D2 12      call _putchar
2206   0C55 1F 18 00      mov al, [d + 24]
2207   0C58 87 01         and al, %00000001
2208   0C5A 22 00         mov ah, 0
2209   0C5C B7 5E 19      mov a, [a + file_attrib]     ; read
2210   0C5F 23            mov ah, al
2211   0C60 07 D2 12      call _putchar
2212   0C63 1F 18 00      mov al, [d + 24]
2213   0C66 87 02         and al, %00000010
2214   0C68 22 00         mov ah, 0
2215   0C6A B7 5E 19      mov a, [a + file_attrib]     ; write
2216   0C6D 23            mov ah, al
2217   0C6E 07 D2 12      call _putchar
2218   0C71 1F 18 00      mov al, [d + 24]
2219   0C74 87 04         and al, %00000100
2220   0C76 22 00         mov ah, 0
2221   0C78 B7 5E 19      mov a, [a + file_attrib]     ; execute
2222   0C7B 23            mov ah, al
2223   0C7C 07 D2 12      call _putchar
2224   0C7F 22 20         mov ah, $20
2225   0C81 07 D2 12      call _putchar  
2226   0C84 2B 1B 00      mov b, [d + 27]
2227   0C87 07 5A 14      call print_u16x              ; filesize
2228   0C8A 22 20         mov ah, $20
2229   0C8C 07 D2 12      call _putchar  
2230   0C8F 2B 19 00      mov b, [d + 25]
2231   0C92 07 5A 14      call print_u16x              ; dirid / lba
2232   0C95 22 20         mov ah, $20
2233   0C97 07 D2 12      call _putchar
2234   0C9A             ; print date
2235   0C9A 33 1D 00      mov bl, [d + 29]             ; day
2236   0C9D 07 9E 14      call print_u8x
2237   0CA0 22 20         mov ah, $20
2238   0CA2 07 D2 12      call _putchar  
2239   0CA5 1F 1E 00      mov al, [d + 30]             ; month
2240   0CA8 FD 9E 02      shl al, 2
2241   0CAB DA            push d
2242   0CAC 3B 22 1A      mov d, s_months
2243   0CAF 22 00         mov ah, 0
2244   0CB1 59            add d, a
2245   0CB2 07 FE 13      call _puts
2246   0CB5 E7            pop d
2247   0CB6 22 20         mov ah, $20
2248   0CB8 07 D2 12      call _putchar
2249   0CBB 2E 20         mov bl, $20
2250   0CBD 07 9E 14      call print_u8x
2251   0CC0 33 1F 00      mov bl, [d + 31]             ; year
2252   0CC3 07 9E 14      call print_u8x  
2253   0CC6 22 20         mov ah, $20
2254   0CC8 07 D2 12      call _putchar  
2255   0CCB 07 FE 13      call _puts                   ; print filename  
2256   0CCE 07 AB 13      call printnl
2257   0CD1             fs_ls_next:
2258   0CD1 14 30 19      mov a, [index]
2259   0CD4 77            inc a
2260   0CD5 42 30 19      mov [index], a
2261   0CD8 AF 10 00      cmp a, fst_files_per_dir
2262   0CDB C6 E4 0C      je fs_ls_end
2263   0CDE 58 20 00      add d, 32      
2264   0CE1 0A 38 0C      jmp fs_ls_l1  
2265   0CE4             fs_ls_end:
2266   0CE4 3B 73 19      mov d, s_ls_total
2267   0CE7 07 FE 13      call _puts
2268   0CEA 1D 21 0C      mov al, [ls_count]
2269   0CED 07 B0 14      call print_u8d
2270   0CF0 07 AB 13      call printnl
2271   0CF3 06            sysret
2272   0CF4             
2273   0CF4             ;------------------------------------------------------------------------------------------------------;
2274   0CF4             ; finds an empty data block
2275   0CF4             ; block lba returned in b
2276   0CF4             ;------------------------------------------------------------------------------------------------------;
2277   0CF4             fs_find_empty_block:
2278   0CF4 26 A0 00      mov b, fs_lba_start     ; raw files starting block
2279   0CF7 38 00 00      mov c, 0                ; upper lba = 0
2280   0CFA             fs_find_empty_block_l1:  
2281   0CFA 22 01         mov ah, $01                  ; 1 sector
2282   0CFC 3B 95 30      mov d, transient_area - 512
2283   0CFF 07 D4 06      call ide_read_sect      ; read sector
2284   0D02 BD 00         cmp byte [d], 0
2285   0D04 C6 0D 0D      je fs_find_empty_block_found_null
2286   0D07 55 20 00      add b, fs_sectors_per_file
2287   0D0A 0A FA 0C      jmp fs_find_empty_block_l1
2288   0D0D             fs_find_empty_block_found_null:
2289   0D0D 09            ret
2290   0D0E             
2291   0D0E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2292   0D0E             ;; create new textfile
2293   0D0E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2294   0D0E             ; search for first null block
2295   0D0E             fs_mktxt:
2296   0D0E FD 4E       	mov si, d
2297   0D10 FD 4F 95 1E 	mov di, user_data
2298   0D14 38 00 01    	mov c, 256
2299   0D17 04          	load					; load data from user-space
2300   0D18             	
2301   0D18 26 A0 00    	mov b, fs_lba_start		; raw files starting block
2302   0D1B 38 00 00    	mov c, 0						; reset lba to 0
2303   0D1E             fs_mktxt_l1:	
2304   0D1E 10 02 01    	mov a, $0102			; disk read
2305   0D21 3B 95 32    	mov d, transient_area
2306   0D24 05 02       	syscall sys_ide ; read sector
2307   0D26 1E          	mov al, [d]
2308   0D27 B9 00       	cmp al, 0			; check for null
2309   0D29 C6 32 0D    	je fs_mktxt_found_null
2310   0D2C 55 20 00    	add b, fs_sectors_per_file
2311   0D2F 0A 1E 0D    	jmp fs_mktxt_l1
2312   0D32             fs_mktxt_found_null:
2313   0D32 D8          	push b				; save lba
2314   0D33             ;create header file by grabbing file name from parameter	
2315   0D33 3B 54 19    	mov d, s_dataentry
2316   0D36 07 FE 13    	call _puts
2317   0D39 3B 95 34    	mov d, transient_area + 512			; pointer to file contents
2318   0D3C 07 64 13    	call _gettxt
2319   0D3F 07 31 12    	call _strlen						; get length of file
2320   0D42 D9          	push c							; save length
2321   0D43 19 01       	mov al, 1
2322   0D45 3D 95 32    	mov [transient_area], al					; mark sectors as used (not null)
2323   0D48 10 00 00    	mov a, 0
2324   0D4B 42 30 19    	mov [index], a
2325   0D4E 3B 95 32    	mov d, transient_area
2326   0D51 13          	mov a, d
2327   0D52 42 32 19    	mov [buffer_addr], a
2328   0D55             fs_mktxt_l2:
2329   0D55 38 00 00    	mov c, 0
2330   0D58 10 03 01    	mov a, $0103			; disk write, 1 sector
2331   0D5B 05 02       	syscall sys_ide		; write sector
2332   0D5D 14 30 19    	mov a, [index]
2333   0D60 77          	inc a
2334   0D61 42 30 19    	mov [index], a
2335   0D64 AF 20 00    	cmp a, fs_sectors_per_file
2336   0D67 C6 79 0D    	je fs_mktxt_add_to_dir
2337   0D6A FD 77       	inc b
2338   0D6C 14 32 19    	mov a, [buffer_addr]
2339   0D6F 53 00 02    	add a, 512
2340   0D72 42 32 19    	mov [buffer_addr], a
2341   0D75 3C          	mov d, a
2342   0D76 0A 55 0D    	jmp fs_mktxt_l2
2343   0D79             ; now we add the file to the current directory!
2344   0D79             fs_mktxt_add_to_dir:	
2345   0D79 14 38 19    	mov a, [current_dir_id]
2346   0D7C 77          	inc a
2347   0D7D 27          	mov b, a					; metadata sector
2348   0D7E 38 00 00    	mov c, 0
2349   0D81 FD 79       	mov g, b					; save lba
2350   0D83 3B 95 32    	mov d, transient_area
2351   0D86 10 02 01    	mov a, $0102			; disk read
2352   0D89 05 02       	syscall sys_ide		; read metadata sector
2353   0D8B             fs_mktxt_add_to_dir_l2:
2354   0D8B 1E          	mov al, [d]
2355   0D8C B9 00       	cmp al, 0
2356   0D8E C6 97 0D    	je fs_mktxt_add_to_dir_null
2357   0D91 58 20 00    	add d, fst_entry_size
2358   0D94 0A 8B 0D    	jmp fs_mktxt_add_to_dir_l2					; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
2359   0D97             fs_mktxt_add_to_dir_null:
2360   0D97 FD 4D 95 1E 	mov si, user_data
2361   0D9B FD 50       	mov di, d
2362   0D9D 07 56 12    	call _strcpy			; copy file name
2363   0DA0 58 18 00    	add d, 24			; skip name
2364   0DA3 19 06       	mov al, %00000110		; no execute, write, read, not directory
2365   0DA5 3E          	mov [d], al			
2366   0DA6 58 03 00    	add d, 3
2367   0DA9 E4          	pop a
2368   0DAA 43          	mov [d], a
2369   0DAB 63 02 00    	sub d, 2
2370   0DAE E5          	pop b				; get file lba
2371   0DAF FD 43       	mov [d], b			; save lba	
2372   0DB1             	
2373   0DB1             	; set file creation date	
2374   0DB1 58 04 00    	add d, 4
2375   0DB4 19 04       	mov al, 4
2376   0DB6 05 01       	syscall sys_rtc
2377   0DB8 1A          	mov al, ah
2378   0DB9 3E          	mov [d], al			; set day
2379   0DBA             	
2380   0DBA 79          	inc d
2381   0DBB 19 05       	mov al, 5
2382   0DBD 05 01       	syscall sys_rtc
2383   0DBF 1A          	mov al, ah
2384   0DC0 3E          	mov [d], al			; set month
2385   0DC1             	
2386   0DC1 79          	inc d
2387   0DC2 19 06       	mov al, 6
2388   0DC4 05 01       	syscall sys_rtc
2389   0DC6 1A          	mov al, ah
2390   0DC7 3E          	mov [d], al			; set year
2391   0DC8             	
2392   0DC8             ; write sector into disk for new directory entry
2393   0DC8 FD 27       	mov b, g
2394   0DCA 38 00 00    	mov c, 0
2395   0DCD 3B 95 32    	mov d, transient_area
2396   0DD0 10 03 01    	mov a, $0103			; disk write, 1 sector
2397   0DD3 05 02       	syscall sys_ide		; write sector
2398   0DD5 07 AB 13    	call printnl
2399   0DD8 06          	sysret
2400   0DD9             
2401   0DD9             
2402   0DD9             
2403   0DD9             ;------------------------------------------------------------------------------------------------------;
2404   0DD9             ; create new binary file
2405   0DD9             ;------------------------------------------------------------------------------------------------------;
2406   0DD9             ; search for first null block
2407   0DD9             fs_mkbin:
2408   0DD9 19 00         mov al, 0
2409   0DDB 3D 28 19      mov [sys_echo_on], al ; disable echo
2410   0DDE FD 4E         mov si, d
2411   0DE0 FD 4F 95 1E   mov di, user_data
2412   0DE4 38 00 02      mov c, 512
2413   0DE7 04            load                          ; load data from user-space
2414   0DE8 26 A0 00      mov b, fs_lba_start           ; files start when directories end
2415   0DEB 38 00 00      mov c, 0                      ; upper lba = 0
2416   0DEE             fs_mkbin_l1:  
2417   0DEE 22 01         mov ah, $01                  ; 1 sector
2418   0DF0 3B 95 32      mov d, transient_area
2419   0DF3 07 D4 06      call ide_read_sect            ; read sector
2420   0DF6 BD 00         cmp byte[d], 0                ; check for null
2421   0DF8 C6 01 0E      je fs_mkbin_found_null
2422   0DFB 55 20 00      add b, fs_sectors_per_file
2423   0DFE 0A EE 0D      jmp fs_mkbin_l1
2424   0E01             fs_mkbin_found_null:
2425   0E01 D8            push b                        ; save lba
2426   0E02             ;create header file by grabbing file name from parameter
2427   0E02 FD 4F 95 34   mov di, transient_area + 512  ; pointer to file contents
2428   0E06 07 7C 11      call _load_hex                ; load binary hex
2429   0E09 D9            push c                        ; save size (nbr of bytes)
2430   0E0A 19 01         mov al, 1
2431   0E0C 3D 95 32      mov [transient_area], al      ; mark sectors as used (not null)
2432   0E0F FD 10         cla
2433   0E11 42 30 19      mov [index], a
2434   0E14 3B 95 32      mov d, transient_area
2435   0E17 13            mov a, d
2436   0E18 42 32 19      mov [buffer_addr], a
2437   0E1B             fs_mkbin_l2:
2438   0E1B 38 00 00      mov c, 0
2439   0E1E 22 01         mov ah, $01                   ; disk write, 1 sector
2440   0E20 07 FA 06      call ide_write_sect           ; write sector
2441   0E23 14 30 19      mov a, [index]
2442   0E26 77            inc a
2443   0E27 42 30 19      mov [index], a
2444   0E2A AF 20 00      cmp a, fs_sectors_per_file    ; remove 1 from this because we dont count the header sector
2445   0E2D C6 3F 0E      je fs_mkbin_add_to_dir
2446   0E30 FD 77         inc b
2447   0E32 14 32 19      mov a, [buffer_addr]
2448   0E35 53 00 02      add a, 512
2449   0E38 42 32 19      mov [buffer_addr], a
2450   0E3B 3C            mov d, a
2451   0E3C 0A 1B 0E      jmp fs_mkbin_l2
2452   0E3F             ; now we add the file to the current directory!
2453   0E3F             fs_mkbin_add_to_dir:  
2454   0E3F 14 38 19      mov a, [current_dir_id]
2455   0E42 77            inc a
2456   0E43 27            mov b, a                      ; metadata sector
2457   0E44 38 00 00      mov c, 0
2458   0E47 FD 79         mov g, b                      ; save lba
2459   0E49 3B 95 32      mov d, transient_area
2460   0E4C 22 01         mov ah, $01                  ; 1 sector
2461   0E4E 07 D4 06      call ide_read_sect            ; read metadata sector
2462   0E51             fs_mkbin_add_to_dir_l2:
2463   0E51 BD 00         cmp byte[d], 0
2464   0E53 C6 5C 0E      je fs_mkbin_add_to_dir_null
2465   0E56 58 20 00      add d, fst_entry_size
2466   0E59 0A 51 0E      jmp fs_mkbin_add_to_dir_l2   ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
2467   0E5C             fs_mkbin_add_to_dir_null:
2468   0E5C FD 4D 95 1E   mov si, user_data
2469   0E60 FD 50         mov di, d
2470   0E62 07 56 12      call _strcpy                  ; copy file name
2471   0E65 58 18 00      add d, 24                     ; skip name
2472   0E68 19 03         mov al, %00000011             ; type=file, no execute, write, read, 
2473   0E6A 3E            mov [d], al
2474   0E6B 58 03 00      add d, 3
2475   0E6E E4            pop a
2476   0E6F 43            mov [d], a
2477   0E70 63 02 00      sub d, 2
2478   0E73 E5            pop b                         ; get file lba
2479   0E74 FD 43         mov [d], b                    ; save lba
2480   0E76               ; set file creation date  
2481   0E76 58 04 00      add d, 4
2482   0E79 19 04         mov al, 4
2483   0E7B 05 01         syscall sys_rtc
2484   0E7D 1A            mov al, ah
2485   0E7E 3E            mov [d], al                   ; set day
2486   0E7F 79            inc d
2487   0E80 19 05         mov al, 5
2488   0E82 05 01         syscall sys_rtc
2489   0E84 1A            mov al, ah
2490   0E85 3E            mov [d], al                   ; set month
2491   0E86 79            inc d
2492   0E87 19 06         mov al, 6
2493   0E89 05 01         syscall sys_rtc
2494   0E8B 1A            mov al, ah
2495   0E8C 3E            mov [d], al                   ; set year
2496   0E8D             ; write sector into disk for new directory entry
2497   0E8D FD 27         mov b, g
2498   0E8F 38 00 00      mov c, 0
2499   0E92 3B 95 32      mov d, transient_area
2500   0E95 22 01         mov ah, $01                   ; disk write, 1 sector
2501   0E97 07 FA 06      call ide_write_sect           ; write sector
2502   0E9A 19 01         mov al, 1
2503   0E9C 3D 28 19      mov [sys_echo_on], al ; enable echo
2504   0E9F 06            sysret
2505   0EA0             
2506   0EA0             ;------------------------------------------------------------------------------------------------------;
2507   0EA0             ; pwd - print working directory
2508   0EA0             ;------------------------------------------------------------------------------------------------------;    
2509   0EA0             fs_pwd:
2510   0EA0 3B 15 1E      mov d, filename
2511   0EA3 19 00         mov al, 0
2512   0EA5 3E            mov [d], al                   ; initialize path string 
2513   0EA6 14 38 19      mov a, [current_dir_id]
2514   0EA9 07 0A 0A      call fs_dir_id_to_path_e0
2515   0EAC 3B 15 1E      mov d, filename
2516   0EAF 07 EA 11      call _strrev
2517   0EB2 07 FE 13      call _puts
2518   0EB5 07 AB 13      call printnl
2519   0EB8 06            sysret
2520   0EB9             
2521   0EB9             ;------------------------------------------------------------------------------------------------------;
2522   0EB9             ; get current directory lba
2523   0EB9             ; a: returned lba
2524   0EB9             ;------------------------------------------------------------------------------------------------------;
2525   0EB9             cmd_get_curr_dir_lba:
2526   0EB9 14 38 19      mov a, [current_dir_id]
2527   0EBC 06            sysret
2528   0EBD             
2529   0EBD             ;------------------------------------------------------------------------------------------------------;
2530   0EBD             ; cat
2531   0EBD             ; userspace destination data pointer in d
2532   0EBD             ; filename starts at d, but is overwritten after the read is made
2533   0EBD             ;------------------------------------------------------------------------------------------------------;:
2534   0EBD             fs_cat:
2535   0EBD DA            push d                              ; save userspace file data destination
2536   0EBE FD 4E         mov si, d
2537   0EC0 FD 4F 95 1E   mov di, user_data
2538   0EC4 38 00 02      mov c, 512
2539   0EC7 04            load                                ; copy filename from user-space
2540   0EC8 29 38 19      mov b, [current_dir_id]
2541   0ECB FD 77         inc b                               ; metadata sector
2542   0ECD 38 00 00      mov c, 0                            ; upper lba = 0
2543   0ED0 22 01         mov ah, $01                  ; 1 sector
2544   0ED2 3B 95 30      mov d, transient_area-512
2545   0ED5 07 D4 06      call ide_read_sect                  ; read directory
2546   0ED8 FD 10         cla
2547   0EDA 42 30 19      mov [index], a                      ; reset file counter
2548   0EDD             fs_cat_l1:
2549   0EDD FD 4E         mov si, d
2550   0EDF FD 4F 95 1E   mov di, user_data
2551   0EE3 07 41 12      call _strcmp
2552   0EE6 C6 FC 0E      je fs_cat_found_entry
2553   0EE9 58 20 00      add d, 32
2554   0EEC 14 30 19      mov a, [index]
2555   0EEF 77            inc a
2556   0EF0 42 30 19      mov [index], a
2557   0EF3 AF 10 00      cmp a, fst_files_per_dir
2558   0EF6 C6 17 0F      je fs_cat_not_found
2559   0EF9 0A DD 0E      jmp fs_cat_l1
2560   0EFC             fs_cat_found_entry:
2561   0EFC 58 19 00      add d, 25                           ; get to dirid of file in disk
2562   0EFF 2A            mov b, [d]                          ; get lba
2563   0F00 FD 77         inc b                               ; add 1 to b because the lba for data comes after the header sector 
2564   0F02 3B 95 32      mov d, transient_area  
2565   0F05 38 00 00      mov c, 0
2566   0F08 22 1F         mov ah, fs_sectors_per_file-1       ; nbr sectors
2567   0F0A 07 D4 06      call ide_read_sect                  ; read sectors
2568   0F0D F0            pop di                              ; write userspace file data destination to di
2569   0F0E FD 4D 95 32   mov si, transient_area              ; data origin
2570   0F12 38 00 3E      mov c, 512*(fs_sectors_per_file-1)
2571   0F15 03            store
2572   0F16 06            sysret
2573   0F17             fs_cat_not_found:
2574   0F17 E7            pop d
2575   0F18 06            sysret
2576   0F19             
2577   0F19             ;------------------------------------------------------------------------------------------------------;
2578   0F19             ; rmdir - remove dir by dirid
2579   0F19             ;------------------------------------------------------------------------------------------------------;
2580   0F19             ; deletes a directory entry in the given directory's file list 
2581   0F19             ; also deletes the actual directory entry in the fst
2582   0F19             ; synopsis: rmdir /usr/local/testdir
2583   0F19             ; b = dirid
2584   0F19             fs_rmdir:
2585   0F19 FD 79         mov g, b
2586   0F1B 11            mov a, b
2587   0F1C 07 46 0A      call get_parentid_from_dirid  ; now get the directory's parent, in a
2588   0F1F D7            push a                        ; save dirid
2589   0F20             ; search for directory's entry in the parent's directory then and delete it
2590   0F20 77            inc a                         ; metadata sector
2591   0F21 27            mov b, a
2592   0F22 38 00 00      mov c, 0                      ; upper lba = 0
2593   0F25 22 01         mov ah, $01          ;
2594   0F27 3B 95 32      mov d, transient_area
2595   0F2A 07 D4 06      call ide_read_sect            ; read directory
2596   0F2D FD 10         cla
2597   0F2F 42 30 19      mov [index], a                ; reset file counter
2598   0F32 FD 27         mov b, g                      ; retrieve directory's dirid
2599   0F34             fs_rmdir_l1:
2600   0F34 16 19 00      mov a, [d + 25]               ; get entry's dirid/lba value
2601   0F37 B0            cmp a, b                      ; compare dirid's to find the directory
2602   0F38 C6 4E 0F      je fs_rmdir_found_entry
2603   0F3B 58 20 00      add d, 32
2604   0F3E 14 30 19      mov a, [index]
2605   0F41 77            inc a
2606   0F42 42 30 19      mov [index], a
2607   0F45 AF 10 00      cmp a, fst_files_per_dir
2608   0F48 C6 73 0F      je fs_rmdir_not_found
2609   0F4B 0A 34 0F      jmp fs_rmdir_l1
2610   0F4E             fs_rmdir_found_entry:
2611   0F4E FD 10         cla
2612   0F50 3E            mov [d], al                   ; make filename null
2613   0F51 44 19 00      mov [d + 25], a               ; clear dirid/lba as well not to generate problems with previously deleted directories
2614   0F54 E5            pop b
2615   0F55 FD 77         inc b                         ; metadata sector
2616   0F57 38 00 00      mov c, 0                      ; upper lba = 0
2617   0F5A 22 01         mov ah, $01          ; 
2618   0F5C 3B 95 32      mov d, transient_area
2619   0F5F 07 FA 06      call ide_write_sect           ; write sector and erase file's entry in the current dir
2620   0F62             
2621   0F62 FD 27         mov b, g
2622   0F64 3B 95 32      mov d, transient_area  
2623   0F67 FD 10         cla
2624   0F69 3E            mov [d], al                   ; make directory's name header null for re-use
2625   0F6A 38 00 00      mov c, 0
2626   0F6D 22 01         mov ah, $01                   ; disk write 1 sect
2627   0F6F 07 FA 06      call ide_write_sect           ; delete directory given by dirid in b
2628   0F72 06            sysret
2629   0F73             fs_rmdir_not_found:
2630   0F73 E5            pop b
2631   0F74 06            sysret
2632   0F75             
2633   0F75             ;------------------------------------------------------------------------------------------------------;
2634   0F75             ; rm - remove file
2635   0F75             ;------------------------------------------------------------------------------------------------------;
2636   0F75             ; frees up the data sectors for the file further down the disk
2637   0F75             ; deletes file entry in the directory's file list 
2638   0F75             fs_rm:
2639   0F75 FD 4E         mov si, d
2640   0F77 FD 4F 95 1E   mov di, user_data
2641   0F7B 38 00 02      mov c, 512
2642   0F7E 04            load                          ; load data from user-space
2643   0F7F 14 38 19      mov a, [current_dir_id]
2644   0F82 77            inc a                         ; metadata sector
2645   0F83 27            mov b, a
2646   0F84 38 00 00      mov c, 0                      ; upper lba = 0
2647   0F87 22 01         mov ah, $01                  ; 1 sector
2648   0F89 3B 95 32      mov d, transient_area
2649   0F8C 07 D4 06      call ide_read_sect            ; read directory
2650   0F8F 10 00 00      mov a, 0
2651   0F92 42 30 19      mov [index], a                ; reset file counter
2652   0F95             fs_rm_l1:
2653   0F95 FD 4E         mov si, d
2654   0F97 FD 4F 95 1E   mov di, user_data
2655   0F9B 07 41 12      call _strcmp
2656   0F9E C6 B4 0F      je fs_rm_found_entry
2657   0FA1 58 20 00      add d, 32
2658   0FA4 14 30 19      mov a, [index]
2659   0FA7 77            inc a
2660   0FA8 42 30 19      mov [index], a
2661   0FAB AF 10 00      cmp a, fst_files_per_dir
2662   0FAE C6 DC 0F      je fs_rm_not_found
2663   0FB1 0A 95 0F      jmp fs_rm_l1
2664   0FB4             fs_rm_found_entry:
2665   0FB4 2B 19 00      mov b, [d + 25]               ; get lba
2666   0FB7 FD 79         mov g, b                      ; save lba
2667   0FB9 19 00         mov al, 0
2668   0FBB 3E            mov [d], al                   ; make file entry null
2669   0FBC 14 38 19      mov a, [current_dir_id]
2670   0FBF 77            inc a                         ; metadata sector
2671   0FC0 27            mov b, a
2672   0FC1 38 00 00      mov c, 0                      ; upper lba = 0
2673   0FC4 22 01         mov ah, $01                   ; disk write
2674   0FC6 3B 95 32      mov d, transient_area
2675   0FC9 07 FA 06      call ide_write_sect           ; write sector and erase file's entry in the current dir
2676   0FCC 3B 95 32      mov d, transient_area  
2677   0FCF 19 00         mov al, 0
2678   0FD1 3E            mov [d], al                   ; make file's data header null for re-use
2679   0FD2 38 00 00      mov c, 0
2680   0FD5 FD 27         mov b, g                      ; get data header lba
2681   0FD7 22 01         mov ah, $01                   ; disk write 1 sect
2682   0FD9 07 FA 06      call ide_write_sect           ; write sector
2683   0FDC             fs_rm_not_found:  
2684   0FDC 06            sysret  
2685   0FDD             
2686   0FDD             ;------------------------------------------------------------------------------------------------------;
2687   0FDD             ; mv - move / change file name
2688   0FDD             ;------------------------------------------------------------------------------------------------------;
2689   0FDD             fs_mv:
2690   0FDD FD 4E         mov si, d
2691   0FDF FD 4F 95 1E   mov di, user_data
2692   0FE3 38 00 02      mov c, 512
2693   0FE6 04            load                          ; load data from user-space
2694   0FE7 14 38 19      mov a, [current_dir_id]
2695   0FEA 77            inc a                         ; metadata sector
2696   0FEB 27            mov b, a  
2697   0FEC 38 00 00      mov c, 0                      ; upper lba = 0
2698   0FEF 22 01         mov ah, $01                  ; 1 sector
2699   0FF1 3B 95 32      mov d, transient_area
2700   0FF4 07 D4 06      call ide_read_sect            ; read directory
2701   0FF7 FD 10         cla
2702   0FF9 42 30 19      mov [index], a                ; reset file counter
2703   0FFC             fs_mv_l1:
2704   0FFC FD 4E         mov si, d
2705   0FFE FD 4F 95 1E   mov di, user_data
2706   1002 07 41 12      call _strcmp
2707   1005 C6 1B 10      je fs_mv_found_entry
2708   1008 58 20 00      add d, 32
2709   100B 14 30 19      mov a, [index]
2710   100E 77            inc a
2711   100F 42 30 19      mov [index], a
2712   1012 AF 10 00      cmp a, fst_files_per_dir
2713   1015 C6 4D 10      je fs_mv_not_found
2714   1018 0A FC 0F      jmp fs_mv_l1
2715   101B             fs_mv_found_entry:  
2716   101B DA            push d
2717   101C FD 4D 15 1F   mov si, user_data + 128       ; (0...127) = original filename , (128...255) = new name
2718   1020 FD 50         mov di, d
2719   1022 07 56 12      call _strcpy  
2720   1025 38 00 00      mov c, 0
2721   1028 3B 95 32      mov d, transient_area
2722   102B 22 01         mov ah, $01                   ; disk write 1 sect
2723   102D 07 FA 06      call ide_write_sect           ; write sector
2724   1030 E7            pop d
2725   1031             ;; need to check whether its a dir or a file here ;;;
2726   1031 2B 19 00      mov b, [d + 25]               ; get the dirid of the directory so we can locate its own entry in the list
2727   1034 22 01         mov ah, $01
2728   1036 3B 95 32      mov d, transient_area
2729   1039 38 00 00      mov c, 0
2730   103C 07 D4 06      call ide_read_sect            ; read directory entry
2731   103F FD 4D 15 1F   mov si, user_data + 128
2732   1043 FD 50         mov di, d
2733   1045 07 56 12      call _strcpy                  ; change directory's name
2734   1048 22 01         mov ah, $01
2735   104A 07 FA 06      call ide_write_sect           ; rewrite directory back to disk
2736   104D             fs_mv_not_found:
2737   104D 06            sysret
2738   104E             
2739   104E             
2740   104E             ;----------------------------------------------------------------------------------------------------;
2741   104E             ; process index in a
2742   104E             ;----------------------------------------------------------------------------------------------------;
2743   104E             find_free_proc:
2744   104E FD 4D 06 1C   mov si, proc_availab_table + 1      ; skip process 0 (kernel)
2745   1052             find_free_proc_l0:
2746   1052 F6            lodsb                               ; get process state
2747   1053 B9 00         cmp al, 0
2748   1055 C6 5B 10      je find_free_proc_free              ; if free, jump
2749   1058 0A 52 10      jmp find_free_proc_l0               ; else, goto next
2750   105B             find_free_proc_free:
2751   105B 4E            mov a, si
2752   105C 5F 06 1C      sub a, 1 + proc_availab_table       ; get process index
2753   105F 09            ret
2754   1060               
2755   1060             
2756   1060             ;----------------------------------------------------------------------------------------------------;
2757   1060             ; process index in al
2758   1060             ;----------------------------------------------------------------------------------------------------;
2759   1060             proc_memory_map:
2760   1060 22 00         mov ah, 0
2761   1062 27            mov b, a                      ; page in bl, 0 in bh
2762   1063 FD 9D 05      shl a, 5                      ; multiply by 32
2763   1066 39            mov c, a                      ; save in c
2764   1067 57 20 00      add c, 32
2765   106A             proc_memory_map_l0:
2766   106A 02            pagemap
2767   106B 55 00 08      add b, $0800                  ; increase page number (msb 5 bits of bh only)
2768   106E 53 01 00      add a, 1                      ; increase both 
2769   1071 B1            cmp a, c                      ; check to see if we reached the end of memory
2770   1072 C7 6A 10      jne proc_memory_map_l0
2771   1075 09            ret
2772   1076               
2773   1076             
2774   1076             ;----------------------------------------------------------------------------------------------------;
2775   1076             ; terminate process
2776   1076             ;----------------------------------------------------------------------------------------------------;
2777   1076             syscall_terminate_proc:
2778   1076 51 05 00      add sp, 5                            ; clear stack of the values that were pushed by the interrupt (sp, status, pc)
2779   1079                                                    ; since they will not be used for anything here.
2780   1079 1D 2F 19      mov al, [active_proc_index]
2781   107C 22 00         mov ah, 0  
2782   107E FD 9D 05      shl a, 5                             ; x32
2783   1081 53 15 1C      add a, proc_names
2784   1084 3C            mov d, a
2785   1085 19 00         mov al, 0
2786   1087 3E            mov [d], al                           ; nullify process name
2787   1088             
2788   1088 1D 2F 19      mov al, [active_proc_index]
2789   108B 22 00         mov ah, 0  
2790   108D 3C            mov d, a
2791   108E 19 00         mov al, 0
2792   1090 3F 05 1C      mov [d + proc_availab_table], al    ; make process empty again
2793   1093               
2794   1093 1D 2E 19      mov al, [nbr_active_procs]          ; decrease nbr of active processes
2795   1096 80            dec al
2796   1097 3D 2E 19      mov [nbr_active_procs], al
2797   109A             
2798   109A             ; now load the shell process again
2799   109A 19 02         mov al, 2                           ; next process = process 2 = shell
2800   109C 3D 2F 19      mov [active_proc_index], al         ; set next active proc
2801   109F             
2802   109F             ; calculate lut entry for next process
2803   109F 22 00         mov ah, 0
2804   10A1 FD 99         shl a                               ; x2
2805   10A3 B7 6C 11      mov a, [proc_table_convert + a]     ; get process state start index  
2806   10A6               
2807   10A6 4D            mov si, a                           ; source is proc state block
2808   10A7 48            mov a, sp
2809   10A8 5F 13 00      sub a, 19
2810   10AB 4F            mov di, a                           ; destination is kernel stack
2811   10AC             ; restore sp
2812   10AC 7D            dec a
2813   10AD 47            mov sp, a
2814   10AE 38 14 00      mov c, 20
2815   10B1 FD F5         rep movsb
2816   10B3             ; set vm process
2817   10B3 1D 2F 19      mov al, [active_proc_index]
2818   10B6 01            setptb
2819   10B7                 
2820   10B7 4C            popa
2821   10B8 06            sysret
2822   10B9             
2823   10B9             ;----------------------------------------------------------------------------------------------------;
2824   10B9             ; pause process
2825   10B9             ;----------------------------------------------------------------------------------------------------;
2826   10B9             syscall_pause_proc:
2827   10B9             ; save all registers into kernel stack
2828   10B9 4B            pusha
2829   10BA 22 00         mov ah, 0
2830   10BC 1D 2F 19      mov al, [active_proc_index]
2831   10BF FD 99         shl a              ; x2
2832   10C1 B7 6C 11      mov a, [proc_table_convert + a]   ; get process state start index
2833   10C4                 
2834   10C4 4F            mov di, a
2835   10C5 48            mov a, sp
2836   10C6 77            inc a
2837   10C7 4D            mov si, a
2838   10C8 38 14 00      mov c, 20
2839   10CB FD F5         rep movsb                         ; save process state!
2840   10CD             ; restore kernel stack position to point before interrupt arrived
2841   10CD 51 14 00      add sp, 20
2842   10D0             ; now load the shell process again
2843   10D0 19 02         mov al, 2                         ; next process = process 2 = shell
2844   10D2 3D 2F 19      mov [active_proc_index], al       ; set next active proc
2845   10D5             
2846   10D5             ; calculate lut entry for next process
2847   10D5 22 00         mov ah, 0
2848   10D7 FD 99         shl a                             ; x2
2849   10D9 B7 6C 11      mov a, [proc_table_convert + a]   ; get process state start index  
2850   10DC               
2851   10DC 4D            mov si, a                         ; source is proc state block
2852   10DD 48            mov a, sp
2853   10DE 5F 13 00      sub a, 19
2854   10E1 4F            mov di, a                         ; destination is kernel stack
2855   10E2             ; restore sp
2856   10E2 7D            dec a
2857   10E3 47            mov sp, a
2858   10E4 38 14 00      mov c, 20
2859   10E7 FD F5         rep movsb
2860   10E9             ; set vm process
2861   10E9 1D 2F 19      mov al, [active_proc_index]
2862   10EC 01            setptb
2863   10ED                 
2864   10ED 4C            popa
2865   10EE 06            sysret
2866   10EF             
2867   10EF             ;----------------------------------------------------------------------------------------------------;
2868   10EF             ; create a new process
2869   10EF             ; d = path of the process file to be createed
2870   10EF             ; b = arguments ptr
2871   10EF             ;----------------------------------------------------------------------------------------------------;
2872   10EF             syscall_create_proc:
2873   10EF             ; we save the active process first  
2874   10EF 4B            pusha
2875   10F0 22 00         mov ah, 0
2876   10F2 1D 2F 19      mov al, [active_proc_index]
2877   10F5 FD 99         shl a              ; x2
2878   10F7 B7 6C 11      mov a, [proc_table_convert + a]    ; get process state table's start index
2879   10FA               
2880   10FA 4F            mov di, a
2881   10FB 48            mov a, sp
2882   10FC 77            inc a
2883   10FD 4D            mov si, a
2884   10FE 38 14 00      mov c, 20
2885   1101 FD F5         rep movsb                          ; save process state!
2886   1103             ; restore kernel stack position to point before interrupt arrived
2887   1103 51 14 00      add sp, 20
2888   1106               
2889   1106 FD 4E         mov si, d                          ; copy the file path
2890   1108 FD 4F 95 1E   mov di, user_data
2891   110C 38 00 02      mov c, 512
2892   110F 04            load
2893   1110 11            mov a, b
2894   1111 4D            mov si, a                          ; copy the arguments
2895   1112 FD 4F 95 30   mov di, scrap_sector
2896   1116 38 00 02      mov c, 512
2897   1119 04            load
2898   111A 07 8C 0B      call loadfile_from_path            ; load the process file from disk by path (path is in user_data)
2899   111D                                                  ; the file data is loaded into transient_area
2900   111D             ; now we allocate a new process  
2901   111D 07 4E 10      call find_free_proc                ; index in a
2902   1120 01            setptb 
2903   1121 07 60 10      call proc_memory_map               ; map process memory pages
2904   1124             ; copy arguments into process's memory
2905   1124 FD 4D 95 30   mov si, scrap_sector
2906   1128 FD 4F 00 00   mov di, 0
2907   112C 38 00 02      mov c, 512
2908   112F 03            store
2909   1130             ; now copy process binary data into process's memory
2910   1130 FD 4D 95 32   mov si, transient_area
2911   1134 FD 4F 00 04   mov di, text_org                   ; code origin address for all user processes
2912   1138 38 00 40      mov c, fs_file_size                ; size of memory space to copy, which is equal to the max file size in disk (for now)
2913   113B 03            store                              ; copy process data
2914   113C                 
2915   113C 07 4E 10      call find_free_proc                ; index in a
2916   113F 3D 2F 19      mov [active_proc_index], al        ; set new active process
2917   1142 FD 9D 05      shl a, 5                           ; x32
2918   1145 53 15 1C      add a, proc_names
2919   1148 4F            mov di, a
2920   1149 FD 4D 95 1E   mov si, user_data                  ; copy and store process filename
2921   114D 07 56 12      call _strcpy
2922   1150               
2923   1150 07 4E 10      call find_free_proc                ; index in a
2924   1153 3C            mov d, a
2925   1154 19 01         mov al, 1
2926   1156 3F 05 1C      mov [d + proc_availab_table], al   ; make process busy
2927   1159               
2928   1159 1D 2E 19      mov al, [nbr_active_procs]         ; increase nbr of active processes
2929   115C 7A            inc al
2930   115D 3D 2E 19      mov [nbr_active_procs], al
2931   1160             ; launch process
2932   1160 FD D7 FF FF   push word $ffff 
2933   1164 FD DB 0E      push byte %00001110                ; dma_ack = 0, interrupts enabled = 1, mode = user, paging = on, halt=0, display_reg_load=0, dir=0
2934   1167 FD D7 00 04   push word text_org
2935   116B 06            sysret
2936   116C             
2937   116C             proc_table_convert:
2938   116C C5 1A         .dw proc_state_table + 0
2939   116E D9 1A         .dw proc_state_table + 20
2940   1170 ED 1A         .dw proc_state_table + 40
2941   1172 01 1B         .dw proc_state_table + 60
2942   1174 15 1B         .dw proc_state_table + 80
2943   1176 29 1B         .dw proc_state_table + 100
2944   1178 3D 1B         .dw proc_state_table + 120
2945   117A 51 1B         .dw proc_state_table + 140
2946   117C               
2947   117C             ;----------------------------------------------------------------------------------------------;
2948   117C             ; get hex file
2949   117C             ; di = destination address
2950   117C             ; return length in bytes in c
2951   117C             ;----------------------------------------------------------------------------------------------;
2952   117C             _load_hex:
2953   117C D7            push a
2954   117D D8            push b
2955   117E DA            push d
2956   117F E2            push si
2957   1180 E3            push di
2958   1181 38 00 00      mov c, 0
2959   1184 50            mov a, di
2960   1185 3C            mov d, a          ; start of string data block
2961   1186 07 D9 12      call _gets        ; get program string
2962   1189 4D            mov si, a
2963   118A             __load_hex_loop:
2964   118A F6            lodsb             ; load from [si] to al
2965   118B B9 00         cmp al, 0         ; check if ascii 0
2966   118D C6 9B 11      jz __load_hex_ret
2967   1190 36            mov bh, al
2968   1191 F6            lodsb
2969   1192 2F            mov bl, al
2970   1193 07 8F 12      call _atoi        ; convert ascii byte in b to int (to al)
2971   1196 F7            stosb             ; store al to [di]
2972   1197 78            inc c
2973   1198 0A 8A 11      jmp __load_hex_loop
2974   119B             __load_hex_ret:
2975   119B F0            pop di
2976   119C EF            pop si
2977   119D E7            pop d
2978   119E E5            pop b
2979   119F E4            pop a
2980   11A0 09            ret
2981   11A1             
2982   11A1             ; synopsis: look inside a certain directory for files/directories
2983   11A1             ; before calling this function, cd into required directory
2984   11A1             ; for each entry inside directory:
2985   11A1             ;  if entry is a file:
2986   11A1             ;    compare filename to searched filename
2987   11A1             ;    if filenames are the same, print filename
2988   11A1             ;  else if entry is a directory:
2989   11A1             ;    cd to the given directory
2990   11A1             ;    recursively call cmd_find
2991   11A1             ;    cd outside previous directory
2992   11A1             ;  if current entry == last entry, return
2993   11A1             ; endfor
2994   11A1             f_find:
2995   11A1 09            ret
2996   11A2             
2997   11A2             
2998   11A2             ; ---------------------------------------------------------------------
2999   11A2             ; kernel reset vector
3000   11A2             ; ---------------------------------------------------------------------
3001   11A2             kernel_reset_vector:  
3002   11A2 FD 49 FF F7   mov bp, _stack_begin
3003   11A6 FD 47 FF F7   mov sp, _stack_begin
3004   11AA               
3005   11AA 19 81         mov al, %10000001             ; mask out timer interrupt for now - enable uart and fdc irqs 
3006   11AC FD 0F         stomsk                        
3007   11AE FD 0C         sti  
3008   11B0             
3009   11B0 0C            lodstat
3010   11B1 87 DF         and al, %11011111             ; disable display register loading
3011   11B3 0D            stostat
3012   11B4               
3013   11B4             ; reset fifo pointers
3014   11B4 10 95 20      mov a, fifo
3015   11B7 3B 34 19      mov d, fifo_in
3016   11BA 43            mov [d], a
3017   11BB 3B 36 19      mov d, fifo_out
3018   11BE 43            mov [d], a  
3019   11BF 19 02         mov al, 2
3020   11C1 05 03         syscall sys_io                ; enable uart in interrupt mode
3021   11C3             
3022   11C3 3B 89 19      mov d, s_kernel_started
3023   11C6 07 FE 13      call _puts
3024   11C9             
3025   11C9 3B 83 1A      mov d, s_fdc_config
3026   11CC 07 FE 13      call _puts
3027   11CF F2 C0 FF 0D   mov byte [_fdc_config], %00001101  ; %00001001 : turn led on / head load, disable double density, select side 0, select drive 0, do not select drive 1
3028   11D3 F2 C8 FF 0B   mov byte [_fdc_stat_cmd], %00001011     ; leave this restore command in order to clear BUSY flag
3029   11D7 F2 C9 FF 00   mov byte [_fdc_track], $00 ; reset track
3030   11DB             
3031   11DB 19 10         mov al, 16
3032   11DD 05 04         syscall sys_filesystem        ; set root dirid
3033   11DF             
3034   11DF 3B A6 19      mov d, s_prompt_init
3035   11E2 07 FE 13      call _puts
3036   11E5 3B 3A 19      mov d, s_init_path
3037   11E8 05 05         syscall sys_create_proc       ; launch init as a new process
3038   11EA             
3039   11EA             ; file includes
3040   11EA             .include "bios.exp"         ; to obtain the bios_reset_vector location (for reboots)
0001+  11EA             boot_origin      .EQU  $8004
0002+  11EA             bios_uart        .EQU  $0002
0003+  11EA             bios_ide         .EQU  $0003
0004+  11EA             bios_reset_vector .EQU  $01c0
0005+  11EA             ide_buffer       .EQU  $8204
3041   11EA             .include "lib/stdio.asm"
0001+  11EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  11EA             ; stdio.s
0003+  11EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  11EA             .include "lib/string.asm"
0001++ 11EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 11EA             ; string.s
0003++ 11EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 11EA             
0005++ 11EA             
0006++ 11EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 11EA             ; _strrev
0008++ 11EA             ; reverse a string
0009++ 11EA             ; d = string address
0010++ 11EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 11EA             ; 01234
0012++ 11EA             _strrev:
0013++ 11EA 4B          	pusha
0014++ 11EB 07 31 12    	call _strlen	; length in c
0015++ 11EE 12          	mov a, c
0016++ 11EF AF 01 00    	cmp a, 1
0017++ 11F2 D0 0C 12    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 11F5 7D          	dec a
0019++ 11F6 FD 4E       	mov si, d	; beginning of string
0020++ 11F8 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 11FA 59          	add d, a	; end of string
0022++ 11FB 12          	mov a, c
0023++ 11FC FD 9B       	shr a		; divide by 2
0024++ 11FE 39          	mov c, a	; c now counts the steps
0025++ 11FF             _strrev_l0:
0026++ 11FF 32          	mov bl, [d]	; save load right-side char into bl
0027++ 1200 F6          	lodsb		; load left-side char into al; increase si
0028++ 1201 3E          	mov [d], al	; store left char into right side
0029++ 1202 1B          	mov al, bl
0030++ 1203 F7          	stosb		; store right-side char into left-side; increase di
0031++ 1204 7E          	dec c
0032++ 1205 7F          	dec d
0033++ 1206 C2 00 00    	cmp c, 0
0034++ 1209 C7 FF 11    	jne _strrev_l0
0035++ 120C             _strrev_end:
0036++ 120C 4C          	popa
0037++ 120D 09          	ret
0038++ 120E             	
0039++ 120E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 120E             ; _strchr
0041++ 120E             ; search string in d for char in al
0042++ 120E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 120E             _strchr:
0044++ 120E             _strchr_l0:
0045++ 120E 32          	mov bl, [d]
0046++ 120F C1 00       	cmp bl, 0
0047++ 1211 C6 1C 12    	je _strchr_end
0048++ 1214 BA          	cmp al, bl
0049++ 1215 C6 1C 12    	je _strchr_end
0050++ 1218 79          	inc d
0051++ 1219 0A 0E 12    	jmp _strchr_l0
0052++ 121C             _strchr_end:
0053++ 121C 1B          	mov al, bl
0054++ 121D 09          	ret
0055++ 121E             
0056++ 121E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 121E             ; _strstr
0058++ 121E             ; find sub-string
0059++ 121E             ; str1 in si
0060++ 121E             ; str2 in di
0061++ 121E             ; si points to end of source string
0062++ 121E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 121E             _strstr:
0064++ 121E DB          	push al
0065++ 121F DA          	push d
0066++ 1220 E3          	push di
0067++ 1221             _strstr_loop:
0068++ 1221 F3          	cmpsb					; compare a byte of the strings
0069++ 1222 C7 2D 12    	jne _strstr_ret
0070++ 1225 FC 00 00    	lea d, [di + 0]
0071++ 1228 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 122A C7 21 12    	jne _strstr_loop				; equal chars but not at end
0073++ 122D             _strstr_ret:
0074++ 122D F0          	pop di
0075++ 122E E7          	pop d
0076++ 122F E8          	pop al
0077++ 1230 09          	ret
0078++ 1231             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1231             ; length of null terminated string
0080++ 1231             ; result in c
0081++ 1231             ; pointer in d
0082++ 1231             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1231             _strlen:
0084++ 1231 DA          	push d
0085++ 1232 38 00 00    	mov c, 0
0086++ 1235             _strlen_l1:
0087++ 1235 BD 00       	cmp byte [d], 0
0088++ 1237 C6 3F 12    	je _strlen_ret
0089++ 123A 79          	inc d
0090++ 123B 78          	inc c
0091++ 123C 0A 35 12    	jmp _strlen_l1
0092++ 123F             _strlen_ret:
0093++ 123F E7          	pop d
0094++ 1240 09          	ret
0095++ 1241             
0096++ 1241             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1241             ; strcmp
0098++ 1241             ; compare two strings
0099++ 1241             ; str1 in si
0100++ 1241             ; str2 in di
0101++ 1241             ; create a string compairon instrucion ?????
0102++ 1241             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1241             _strcmp:
0104++ 1241 DB          	push al
0105++ 1242 DA          	push d
0106++ 1243 E3          	push di
0107++ 1244 E2          	push si
0108++ 1245             _strcmp_loop:
0109++ 1245 F3          	cmpsb					; compare a byte of the strings
0110++ 1246 C7 51 12    	jne _strcmp_ret
0111++ 1249 FB FF FF    	lea d, [si +- 1]
0112++ 124C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 124E C7 45 12    	jne _strcmp_loop				; equal chars but not at end
0114++ 1251             _strcmp_ret:
0115++ 1251 EF          	pop si
0116++ 1252 F0          	pop di
0117++ 1253 E7          	pop d
0118++ 1254 E8          	pop al
0119++ 1255 09          	ret
0120++ 1256             
0121++ 1256             
0122++ 1256             ; strcpy
0123++ 1256             ; copy null terminated string from si to di
0124++ 1256             ; source in si
0125++ 1256             ; destination in di
0126++ 1256             _strcpy:
0127++ 1256 E2          	push si
0128++ 1257 E3          	push di
0129++ 1258 DB          	push al
0130++ 1259             _strcpy_l1:
0131++ 1259 F6          	lodsb
0132++ 125A F7          	stosb
0133++ 125B B9 00       	cmp al, 0
0134++ 125D C7 59 12    	jne _strcpy_l1
0135++ 1260             _strcpy_end:
0136++ 1260 E8          	pop al
0137++ 1261 F0          	pop di
0138++ 1262 EF          	pop si
0139++ 1263 09          	ret
0140++ 1264             
0141++ 1264             ; strcat
0142++ 1264             ; concatenate a null terminated string into string at di, from string at si
0143++ 1264             ; source in si
0144++ 1264             ; destination in di
0145++ 1264             _strcat:
0146++ 1264 E2          	push si
0147++ 1265 E3          	push di
0148++ 1266 D7          	push a
0149++ 1267 DA          	push d
0150++ 1268 50          	mov a, di
0151++ 1269 3C          	mov d, a
0152++ 126A             _strcat_goto_end_l1:
0153++ 126A BD 00       	cmp byte[d], 0
0154++ 126C C6 73 12    	je _strcat_start
0155++ 126F 79          	inc d
0156++ 1270 0A 6A 12    	jmp _strcat_goto_end_l1
0157++ 1273             _strcat_start:
0158++ 1273 FD 50       	mov di, d
0159++ 1275             _strcat_l1:
0160++ 1275 F6          	lodsb
0161++ 1276 F7          	stosb
0162++ 1277 B9 00       	cmp al, 0
0163++ 1279 C7 75 12    	jne _strcat_l1
0164++ 127C             _strcat_end:
0165++ 127C E7          	pop d
0166++ 127D E4          	pop a
0167++ 127E F0          	pop di
0168++ 127F EF          	pop si
0169++ 1280 09          	ret
0170++ 1281             
0171++ 1281             
0005+  1281             
0006+  1281             
0007+  1281             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  1281             ; convert ascii 'o'..'f' to integer 0..15
0009+  1281             ; ascii in bl
0010+  1281             ; result in al
0011+  1281             ; ascii for f = 0100 0110
0012+  1281             ; ascii for 9 = 0011 1001
0013+  1281             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  1281             hex_ascii_encode:
0015+  1281 1B            mov al, bl
0016+  1282 93 40         test al, $40        ; test if letter or number
0017+  1284 C7 8A 12      jnz hex_letter
0018+  1287 87 0F         and al, $0f        ; get number
0019+  1289 09            ret
0020+  128A             hex_letter:
0021+  128A 87 0F         and al, $0f        ; get letter
0022+  128C 6A 09         add al, 9
0023+  128E 09            ret
0024+  128F             
0025+  128F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  128F             ; atoi
0027+  128F             ; 2 letter hex string in b
0028+  128F             ; 8bit integer returned in al
0029+  128F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  128F             _atoi:
0031+  128F D8            push b
0032+  1290 07 81 12      call hex_ascii_encode      ; convert bl to 4bit code in al
0033+  1293 30            mov bl, bh
0034+  1294 DB            push al          ; save a
0035+  1295 07 81 12      call hex_ascii_encode
0036+  1298 EA            pop bl  
0037+  1299 FD 9E 04      shl al, 4
0038+  129C 8C            or al, bl
0039+  129D E5            pop b
0040+  129E 09            ret  
0041+  129F             
0042+  129F             
0043+  129F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  129F             ; scanf
0045+  129F             ; no need for explanations!
0046+  129F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  129F             scanf:
0048+  129F 09            ret
0049+  12A0             
0050+  12A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  12A0             ; itoa
0052+  12A0             ; 8bit value in bl
0053+  12A0             ; 2 byte ascii result in a
0054+  12A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  12A0             _itoa:
0056+  12A0 DA            push d
0057+  12A1 D8            push b
0058+  12A2 A7 00         mov bh, 0
0059+  12A4 FD A4 04      shr bl, 4  
0060+  12A7 74            mov d, b
0061+  12A8 1F 3A 15      mov al, [d + s_hex_digits]
0062+  12AB 23            mov ah, al
0063+  12AC               
0064+  12AC E5            pop b
0065+  12AD D8            push b
0066+  12AE A7 00         mov bh, 0
0067+  12B0 FD 87 0F      and bl, $0f
0068+  12B3 74            mov d, b
0069+  12B4 1F 3A 15      mov al, [d + s_hex_digits]
0070+  12B7 E5            pop b
0071+  12B8 E7            pop d
0072+  12B9 09            ret
0073+  12BA             
0074+  12BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  12BA             ; hex string to binary
0076+  12BA             ; di = destination address
0077+  12BA             ; si = source
0078+  12BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  12BA             _hex_to_int:
0080+  12BA             _hex_to_int_l1:
0081+  12BA F6            lodsb          ; load from [si] to al
0082+  12BB B9 00         cmp al, 0        ; check if ascii 0
0083+  12BD C6 CA 12      jz _hex_to_int_ret
0084+  12C0 36            mov bh, al
0085+  12C1 F6            lodsb
0086+  12C2 2F            mov bl, al
0087+  12C3 07 8F 12      call _atoi        ; convert ascii byte in b to int (to al)
0088+  12C6 F7            stosb          ; store al to [di]
0089+  12C7 0A BA 12      jmp _hex_to_int_l1
0090+  12CA             _hex_to_int_ret:
0091+  12CA 09            ret    
0092+  12CB             
0093+  12CB             
0094+  12CB             
0095+  12CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  12CB             ; getchar
0097+  12CB             ; char in ah
0098+  12CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  12CB             getch:
0100+  12CB DB            push al
0101+  12CC             getch_retry:
0102+  12CC 19 01         mov al, 1
0103+  12CE 05 03         syscall sys_io      ; receive in ah
0104+  12D0 E8            pop al
0105+  12D1 09            ret
0106+  12D2             
0107+  12D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  12D2             ; putchar
0109+  12D2             ; char in ah
0110+  12D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  12D2             _putchar:
0112+  12D2 DB            push al
0113+  12D3 19 00         mov al, 0
0114+  12D5 05 03         syscall sys_io      ; char in ah
0115+  12D7 E8            pop al
0116+  12D8 09            ret
0117+  12D9             
0118+  12D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  12D9             ;; input a string
0120+  12D9             ;; terminates with null
0121+  12D9             ;; pointer in d
0122+  12D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  12D9             _gets:
0124+  12D9 D7            push a
0125+  12DA DA            push d
0126+  12DB             _gets_loop:
0127+  12DB 19 01         mov al, 1
0128+  12DD 05 03         syscall sys_io      ; receive in ah
0129+  12DF 76 1B         cmp ah, 27
0130+  12E1 C6 02 13      je _gets_ansi_esc
0131+  12E4 76 0A         cmp ah, $0a        ; lf
0132+  12E6 C6 5E 13      je _gets_end
0133+  12E9 76 0D         cmp ah, $0d        ; cr
0134+  12EB C6 5E 13      je _gets_end
0135+  12EE 76 5C         cmp ah, $5c        ; '\\'
0136+  12F0 C6 24 13      je _gets_escape
0137+  12F3 76 08         cmp ah, $08      ; check for backspace
0138+  12F5 C6 FE 12      je _gets_backspace
0139+  12F8 1A            mov al, ah
0140+  12F9 3E            mov [d], al
0141+  12FA 79            inc d
0142+  12FB 0A DB 12      jmp _gets_loop
0143+  12FE             _gets_backspace:
0144+  12FE 7F            dec d
0145+  12FF 0A DB 12      jmp _gets_loop
0146+  1302             _gets_ansi_esc:
0147+  1302 19 01         mov al, 1
0148+  1304 05 03         syscall sys_io        ; receive in ah without echo
0149+  1306 76 5B         cmp ah, '['
0150+  1308 C7 DB 12      jne _gets_loop
0151+  130B 19 01         mov al, 1
0152+  130D 05 03         syscall sys_io          ; receive in ah without echo
0153+  130F 76 64         cmp ah, 'd'
0154+  1311 C6 1C 13      je _gets_left_arrow
0155+  1314 76 63         cmp ah, 'c'
0156+  1316 C6 20 13      je _gets_right_arrow
0157+  1319 0A DB 12      jmp _gets_loop
0158+  131C             _gets_left_arrow:
0159+  131C 7F            dec d
0160+  131D 0A DB 12      jmp _gets_loop
0161+  1320             _gets_right_arrow:
0162+  1320 79            inc d
0163+  1321 0A DB 12      jmp _gets_loop
0164+  1324             _gets_escape:
0165+  1324 19 01         mov al, 1
0166+  1326 05 03         syscall sys_io      ; receive in ah
0167+  1328 76 6E         cmp ah, 'n'
0168+  132A C6 49 13      je _gets_lf
0169+  132D 76 72         cmp ah, 'r'
0170+  132F C6 50 13      je _gets_cr
0171+  1332 76 30         cmp ah, '0'
0172+  1334 C6 57 13      je _gets_null
0173+  1337 76 5C         cmp ah, $5c  ; '\'
0174+  1339 C6 42 13      je _gets_slash
0175+  133C 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  133D 3E            mov [d], al
0177+  133E 79            inc d
0178+  133F 0A DB 12      jmp _gets_loop
0179+  1342             _gets_slash:
0180+  1342 19 5C         mov al, $5c
0181+  1344 3E            mov [d], al
0182+  1345 79            inc d
0183+  1346 0A DB 12      jmp _gets_loop
0184+  1349             _gets_lf:
0185+  1349 19 0A         mov al, $0a
0186+  134B 3E            mov [d], al
0187+  134C 79            inc d
0188+  134D 0A DB 12      jmp _gets_loop
0189+  1350             _gets_cr:
0190+  1350 19 0D         mov al, $0d
0191+  1352 3E            mov [d], al
0192+  1353 79            inc d
0193+  1354 0A DB 12      jmp _gets_loop
0194+  1357             _gets_null:
0195+  1357 19 00         mov al, $00
0196+  1359 3E            mov [d], al
0197+  135A 79            inc d
0198+  135B 0A DB 12      jmp _gets_loop
0199+  135E             _gets_end:
0200+  135E 19 00         mov al, 0
0201+  1360 3E            mov [d], al        ; terminate string
0202+  1361 E7            pop d
0203+  1362 E4            pop a
0204+  1363 09            ret
0205+  1364             
0206+  1364             
0207+  1364             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  1364             ;; input text
0209+  1364             ;; terminated with ctrl+d
0210+  1364             ;; pointer in d
0211+  1364             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  1364             _gettxt:
0213+  1364 D7            push a
0214+  1365 DA            push d
0215+  1366             _gettxt_loop:
0216+  1366 19 01         mov al, 1
0217+  1368 05 03         syscall sys_io      ; receive in ah
0218+  136A 76 04         cmp ah, 4      ; eot
0219+  136C C6 A5 13      je _gettxt_end
0220+  136F 76 08         cmp ah, $08      ; check for backspace
0221+  1371 C6 A1 13      je _gettxt_backspace
0222+  1374 76 5C         cmp ah, $5c        ; '\'
0223+  1376 C6 7F 13      je _gettxt_escape
0224+  1379 1A            mov al, ah
0225+  137A 3E            mov [d], al
0226+  137B 79            inc d
0227+  137C 0A 66 13      jmp _gettxt_loop
0228+  137F             _gettxt_escape:
0229+  137F 19 01         mov al, 1
0230+  1381 05 03         syscall sys_io      ; receive in ah
0231+  1383 76 6E         cmp ah, 'n'
0232+  1385 C6 93 13      je _gettxt_lf
0233+  1388 76 72         cmp ah, 'r'
0234+  138A C6 9A 13      je _gettxt_cr
0235+  138D 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  138E 3E            mov [d], al
0237+  138F 79            inc d
0238+  1390 0A 66 13      jmp _gettxt_loop
0239+  1393             _gettxt_lf:
0240+  1393 19 0A         mov al, $0a
0241+  1395 3E            mov [d], al
0242+  1396 79            inc d
0243+  1397 0A 66 13      jmp _gettxt_loop
0244+  139A             _gettxt_cr:
0245+  139A 19 0D         mov al, $0d
0246+  139C 3E            mov [d], al
0247+  139D 79            inc d
0248+  139E 0A 66 13      jmp _gettxt_loop
0249+  13A1             _gettxt_backspace:
0250+  13A1 7F            dec d
0251+  13A2 0A 66 13      jmp _gettxt_loop
0252+  13A5             _gettxt_end:
0253+  13A5 19 00         mov al, 0
0254+  13A7 3E            mov [d], al        ; terminate string
0255+  13A8 E7            pop d
0256+  13A9 E4            pop a
0257+  13AA 09            ret
0258+  13AB             
0259+  13AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  13AB             ; print new line
0261+  13AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  13AB             printnl:
0263+  13AB D7            push a
0264+  13AC 10 00 0A      mov a, $0a00
0265+  13AF 05 03         syscall sys_io
0266+  13B1 10 00 0D      mov a, $0d00
0267+  13B4 05 03         syscall sys_io
0268+  13B6 E4            pop a
0269+  13B7 09            ret
0270+  13B8             
0271+  13B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  13B8             ; _strtoint
0273+  13B8             ; 4 digit hex string number in d
0274+  13B8             ; integer returned in a
0275+  13B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  13B8             _strtointx:
0277+  13B8 D8            push b
0278+  13B9 32            mov bl, [d]
0279+  13BA 37            mov bh, bl
0280+  13BB 33 01 00      mov bl, [d + 1]
0281+  13BE 07 8F 12      call _atoi        ; convert to int in al
0282+  13C1 23            mov ah, al        ; move to ah
0283+  13C2 33 02 00      mov bl, [d + 2]
0284+  13C5 37            mov bh, bl
0285+  13C6 33 03 00      mov bl, [d + 3]
0286+  13C9 07 8F 12      call _atoi        ; convert to int in al
0287+  13CC E5            pop b
0288+  13CD 09            ret
0289+  13CE             
0290+  13CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  13CE             ; _strtoint
0292+  13CE             ; 5 digit base10 string number in d
0293+  13CE             ; integer returned in a
0294+  13CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  13CE             _strtoint:
0296+  13CE E2            push si
0297+  13CF D8            push b
0298+  13D0 D9            push c
0299+  13D1 DA            push d
0300+  13D2 07 31 12      call _strlen      ; get string length in c
0301+  13D5 7E            dec c
0302+  13D6 FD 4E         mov si, d
0303+  13D8 12            mov a, c
0304+  13D9 FD 99         shl a
0305+  13DB 3B 52 15      mov d, table_power
0306+  13DE 59            add d, a
0307+  13DF 38 00 00      mov c, 0
0308+  13E2             _strtoint_l0:
0309+  13E2 F6            lodsb      ; load ascii to al
0310+  13E3 B9 00         cmp al, 0
0311+  13E5 C6 F8 13      je _strtoint_end
0312+  13E8 6F 30         sub al, $30    ; make into integer
0313+  13EA 22 00         mov ah, 0
0314+  13EC 2A            mov b, [d]
0315+  13ED AC            mul a, b      ; result in b since it fits in 16bits
0316+  13EE 11            mov a, b
0317+  13EF 28            mov b, c
0318+  13F0 54            add a, b
0319+  13F1 39            mov c, a
0320+  13F2 63 02 00      sub d, 2
0321+  13F5 0A E2 13      jmp _strtoint_l0
0322+  13F8             _strtoint_end:
0323+  13F8 12            mov a, c
0324+  13F9 E7            pop d
0325+  13FA E6            pop c
0326+  13FB E5            pop b
0327+  13FC EF            pop si
0328+  13FD 09            ret
0329+  13FE             
0330+  13FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  13FE             ; print null terminated string
0332+  13FE             ; pointer in d
0333+  13FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  13FE             _puts:
0335+  13FE D7            push a
0336+  13FF DA            push d
0337+  1400             _puts_l1:
0338+  1400 1E            mov al, [d]
0339+  1401 B9 00         cmp al, 0
0340+  1403 C6 0F 14      jz _puts_end
0341+  1406 23            mov ah, al
0342+  1407 19 00         mov al, 0
0343+  1409 05 03         syscall sys_io
0344+  140B 79            inc d
0345+  140C 0A 00 14      jmp _puts_l1
0346+  140F             _puts_end:
0347+  140F E7            pop d
0348+  1410 E4            pop a
0349+  1411 09            ret
0350+  1412             
0351+  1412             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  1412             ; print n size string
0353+  1412             ; pointer in d
0354+  1412             ; size in c
0355+  1412             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  1412             _putsn:
0357+  1412 DB            push al
0358+  1413 DA            push d
0359+  1414 D9            push c
0360+  1415             _putsn_l0:
0361+  1415 1E            mov al, [d]
0362+  1416 23            mov ah, al
0363+  1417 19 00         mov al, 0
0364+  1419 05 03         syscall sys_io
0365+  141B 79            inc d
0366+  141C 7E            dec c  
0367+  141D C2 00 00      cmp c, 0
0368+  1420 C7 15 14      jne _putsn_l0
0369+  1423             _putsn_end:
0370+  1423 E6            pop c
0371+  1424 E7            pop d
0372+  1425 E8            pop al
0373+  1426 09            ret
0374+  1427             
0375+  1427             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  1427             ; print 16bit decimal number
0377+  1427             ; input number in a
0378+  1427             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  1427             print_u16d:
0380+  1427 D7            push a
0381+  1428 D8            push b
0382+  1429 FD D8         push g
0383+  142B 26 10 27      mov b, 10000
0384+  142E AE            div a, b      ; get 10000's coeff.
0385+  142F 07 53 14      call print_number
0386+  1432 11            mov a, b
0387+  1433 26 E8 03      mov b, 1000
0388+  1436 AE            div a, b      ; get 1000's coeff.
0389+  1437 07 53 14      call print_number
0390+  143A 11            mov a, b
0391+  143B 26 64 00      mov b, 100
0392+  143E AE            div a, b
0393+  143F 07 53 14      call print_number
0394+  1442 11            mov a, b
0395+  1443 26 0A 00      mov b, 10
0396+  1446 AE            div a, b
0397+  1447 07 53 14      call print_number
0398+  144A 1B            mov al, bl      ; 1's coeff in bl
0399+  144B 07 53 14      call print_number
0400+  144E FD F1         pop g
0401+  1450 E5            pop b
0402+  1451 E4            pop a
0403+  1452 09            ret
0404+  1453             
0405+  1453             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  1453             ; print al
0407+  1453             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  1453             print_number:
0409+  1453 6A 30         add al, $30
0410+  1455 23            mov ah, al
0411+  1456 07 D2 12      call _putchar
0412+  1459 09            ret
0413+  145A             
0414+  145A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  145A             ; print 16bit hex integer
0416+  145A             ; integer value in reg b
0417+  145A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  145A             print_u16x:
0419+  145A D7            push a
0420+  145B D8            push b
0421+  145C DD            push bl
0422+  145D 30            mov bl, bh
0423+  145E 07 A0 12      call _itoa        ; convert bh to char in a
0424+  1461 2F            mov bl, al        ; save al
0425+  1462 19 00         mov al, 0
0426+  1464 05 03         syscall sys_io        ; display ah
0427+  1466 24            mov ah, bl        ; retrieve al
0428+  1467 19 00         mov al, 0
0429+  1469 05 03         syscall sys_io        ; display al
0430+  146B             
0431+  146B EA            pop bl
0432+  146C 07 A0 12      call _itoa        ; convert bh to char in a
0433+  146F 2F            mov bl, al        ; save al
0434+  1470 19 00         mov al, 0
0435+  1472 05 03         syscall sys_io        ; display ah
0436+  1474 24            mov ah, bl        ; retrieve al
0437+  1475 19 00         mov al, 0
0438+  1477 05 03         syscall sys_io        ; display al
0439+  1479             
0440+  1479 E5            pop b
0441+  147A E4            pop a
0442+  147B 09            ret
0443+  147C             
0444+  147C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  147C             ; input 16bit hex integer
0446+  147C             ; read 16bit integer into a
0447+  147C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  147C             scan_u16x:
0449+  147C F8 10 00      enter 16
0450+  147F D8            push b
0451+  1480 DA            push d
0452+  1481             
0453+  1481 FA F1 FF      lea d, [bp + -15]
0454+  1484 07 D9 12      call _gets        ; get number
0455+  1487             
0456+  1487 32            mov bl, [d]
0457+  1488 37            mov bh, bl
0458+  1489 33 01 00      mov bl, [d + 1]
0459+  148C 07 8F 12      call _atoi        ; convert to int in al
0460+  148F 23            mov ah, al        ; move to ah
0461+  1490             
0462+  1490 33 02 00      mov bl, [d + 2]
0463+  1493 37            mov bh, bl
0464+  1494 33 03 00      mov bl, [d + 3]
0465+  1497 07 8F 12      call _atoi        ; convert to int in al
0466+  149A             
0467+  149A E7            pop d
0468+  149B E5            pop b
0469+  149C F9            leave
0470+  149D 09            ret
0471+  149E             
0472+  149E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  149E             ; print 8bit hex integer
0474+  149E             ; integer value in reg bl
0475+  149E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  149E             print_u8x:
0477+  149E D7            push a
0478+  149F DD            push bl
0479+  14A0             
0480+  14A0 07 A0 12      call _itoa        ; convert bl to char in a
0481+  14A3 2F            mov bl, al        ; save al
0482+  14A4 19 00         mov al, 0
0483+  14A6 05 03         syscall sys_io        ; display ah
0484+  14A8 24            mov ah, bl        ; retrieve al
0485+  14A9 19 00         mov al, 0
0486+  14AB 05 03         syscall sys_io        ; display al
0487+  14AD             
0488+  14AD EA            pop bl
0489+  14AE E4            pop a
0490+  14AF 09            ret
0491+  14B0             
0492+  14B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  14B0             ; print 8bit decimal unsigned number
0494+  14B0             ; input number in al
0495+  14B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  14B0             print_u8d:
0497+  14B0 D7            push a
0498+  14B1 D8            push b
0499+  14B2 FD D8         push g
0500+  14B4 22 00         mov ah, 0
0501+  14B6 26 64 00      mov b, 100
0502+  14B9 AE            div a, b
0503+  14BA D8            push b      ; save remainder
0504+  14BB B9 00         cmp al, 0
0505+  14BD C6 C7 14      je skip100
0506+  14C0 6A 30         add al, $30
0507+  14C2 23            mov ah, al
0508+  14C3 19 00         mov al, 0
0509+  14C5 05 03         syscall sys_io  ; print coeff
0510+  14C7             skip100:
0511+  14C7 E4            pop a
0512+  14C8 22 00         mov ah, 0
0513+  14CA 26 0A 00      mov b, 10
0514+  14CD AE            div a, b
0515+  14CE D8            push b      ; save remainder
0516+  14CF B9 00         cmp al, 0
0517+  14D1 C6 DB 14      je skip10
0518+  14D4 6A 30         add al, $30
0519+  14D6 23            mov ah, al
0520+  14D7 19 00         mov al, 0
0521+  14D9 05 03         syscall sys_io  ; print coeff
0522+  14DB             skip10:
0523+  14DB E4            pop a
0524+  14DC 1B            mov al, bl
0525+  14DD 6A 30         add al, $30
0526+  14DF 23            mov ah, al
0527+  14E0 19 00         mov al, 0
0528+  14E2 05 03         syscall sys_io  ; print coeff
0529+  14E4 FD F1         pop g
0530+  14E6 E5            pop b
0531+  14E7 E4            pop a
0532+  14E8 09            ret
0533+  14E9             
0534+  14E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  14E9             ; input 8bit hex integer
0536+  14E9             ; read 8bit integer into al
0537+  14E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  14E9             scan_u8x:
0539+  14E9 F8 04 00      enter 4
0540+  14EC D8            push b
0541+  14ED DA            push d
0542+  14EE             
0543+  14EE FA FD FF      lea d, [bp + -3]
0544+  14F1 07 D9 12      call _gets        ; get number
0545+  14F4             
0546+  14F4 32            mov bl, [d]
0547+  14F5 37            mov bh, bl
0548+  14F6 33 01 00      mov bl, [d + 1]
0549+  14F9 07 8F 12      call _atoi        ; convert to int in al
0550+  14FC             
0551+  14FC E7            pop d
0552+  14FD E5            pop b
0553+  14FE F9            leave
0554+  14FF 09            ret
0555+  1500             
0556+  1500             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  1500             ; input decimal number
0558+  1500             ; result in a
0559+  1500             ; 655'\0'
0560+  1500             ; low--------high
0561+  1500             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  1500             scan_u16d:
0563+  1500 F8 08 00      enter 8
0564+  1503 E2            push si
0565+  1504 D8            push b
0566+  1505 D9            push c
0567+  1506 DA            push d
0568+  1507 FA F9 FF      lea d, [bp +- 7]
0569+  150A 07 D9 12      call _gets
0570+  150D 07 31 12      call _strlen      ; get string length in c
0571+  1510 7E            dec c
0572+  1511 FD 4E         mov si, d
0573+  1513 12            mov a, c
0574+  1514 FD 99         shl a
0575+  1516 3B 52 15      mov d, table_power
0576+  1519 59            add d, a
0577+  151A 38 00 00      mov c, 0
0578+  151D             mul_loop:
0579+  151D F6            lodsb      ; load ascii to al
0580+  151E B9 00         cmp al, 0
0581+  1520 C6 33 15      je mul_exit
0582+  1523 6F 30         sub al, $30    ; make into integer
0583+  1525 22 00         mov ah, 0
0584+  1527 2A            mov b, [d]
0585+  1528 AC            mul a, b      ; result in b since it fits in 16bits
0586+  1529 11            mov a, b
0587+  152A 28            mov b, c
0588+  152B 54            add a, b
0589+  152C 39            mov c, a
0590+  152D 63 02 00      sub d, 2
0591+  1530 0A 1D 15      jmp mul_loop
0592+  1533             mul_exit:
0593+  1533 12            mov a, c
0594+  1534 E7            pop d
0595+  1535 E6            pop c
0596+  1536 E5            pop b
0597+  1537 EF            pop si
0598+  1538 F9            leave
0599+  1539 09            ret
0600+  153A             
0601+  153A             
0602+  153A 30 31 32 33 s_hex_digits:    .db "0123456789abcdef"  
0602+  153E 34 35 36 37 
0602+  1542 38 39 61 62 
0602+  1546 63 64 65 66 
0603+  154A 1B 5B 32 6A s_telnet_clear:  .db "\033[2j\033[h", 0
0603+  154E 1B 5B 68 00 
0604+  1552             
0605+  1552             table_power:
0606+  1552 01 00         .dw 1
0607+  1554 0A 00         .dw 10
0608+  1556 64 00         .dw 100
0609+  1558 E8 03         .dw 1000
0610+  155A 10 27         .dw 100003042   155C             .include "lib/ctype.asm"
0001+  155C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  155C             ; ctype.s
0003+  155C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  155C             
0005+  155C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  155C             ;; c character classification is an operation provided by a group of functions in the ansi c standard library
0007+  155C             ;; for the c programming language. these functions are used to test characters for membership in a particular
0008+  155C             ;; class of characters, such as alphabetic characters, control characters, etc. both single-byte, and wide
0009+  155C             ;; characters are supported.
0010+  155C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  155C             ;; _isalnum 
0012+  155C             ;; _isalpha 
0013+  155C             ;; islower 
0014+  155C             ;; isupper 
0015+  155C             ;; _isdigit 
0016+  155C             ;; isxdigit
0017+  155C             ;; iscntrl 
0018+  155C             ;; isgraph 
0019+  155C             ;; _isspace 
0020+  155C             ;; isblank 
0021+  155C             ;; isprint 
0022+  155C             ;; ispunct 
0023+  155C             ;; tolower 
0024+  155C             ;; toupper
0025+  155C             
0026+  155C             
0027+  155C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  155C             ;; is alphanumeric
0029+  155C             ;; sets zf according with result
0030+  155C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  155C             _isalnum:
0032+  155C 07 79 15    	call _isalpha
0033+  155F C6 65 15    	je _isalnum_exit
0034+  1562 07 66 15    	call _isdigit
0035+  1565             _isalnum_exit:
0036+  1565 09          	ret	
0037+  1566             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  1566             ;; is digit
0039+  1566             ;; sets zf according with result
0040+  1566             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  1566             _isdigit:
0042+  1566 DB          	push al
0043+  1567 B9 30       	cmp al, '0'
0044+  1569 C8 75 15    	jlu _isdigit_false
0045+  156C B9 39       	cmp al, '9'
0046+  156E D1 75 15    	jgu _isdigit_false
0047+  1571 87 00       	and al, 0	; set zf
0048+  1573 E8          	pop al
0049+  1574 09          	ret
0050+  1575             _isdigit_false:
0051+  1575 8B 01       	or al, 1	; clear zf
0052+  1577 E8          	pop al
0053+  1578 09          	ret	
0054+  1579             	
0055+  1579             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  1579             ;; is alpha
0057+  1579             ;; sets zf according with result
0058+  1579             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  1579             _isalpha:
0060+  1579 DB          	push al
0061+  157A B9 5F       	cmp al, '_'
0062+  157C C6 9C 15    	je _isalpha_true
0063+  157F B9 2E       	cmp al, '.'
0064+  1581 C6 9C 15    	je _isalpha_true
0065+  1584 B9 61       	cmp al, 'a'
0066+  1586 C8 98 15    	jlu _isalpha_false
0067+  1589 B9 7A       	cmp al, 'z'
0068+  158B D1 98 15    	jgu _isalpha_false
0069+  158E B9 7A       	cmp al, 'z'
0070+  1590 D0 9C 15    	jleu _isalpha_true
0071+  1593 B9 61       	cmp al, 'a'
0072+  1595 C9 9C 15    	jgeu _isalpha_true
0073+  1598             _isalpha_false:
0074+  1598 8B 01       	or al, 1	; clear zf
0075+  159A E8          	pop al
0076+  159B 09          	ret
0077+  159C             _isalpha_true:
0078+  159C 87 00       	and al, 0	; set zf
0079+  159E E8          	pop al
0080+  159F 09          	ret
0081+  15A0             
0082+  15A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  15A0             ;; is path-alpha
0084+  15A0             ;; sets zf according with result
0085+  15A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  15A0             ispath:
0087+  15A0 DB          	push al
0088+  15A1 07 66 15    	call _isdigit
0089+  15A4 C6 CE 15    	je ispath_true
0090+  15A7 B9 5F       	cmp al, '_'
0091+  15A9 C6 CE 15    	je ispath_true
0092+  15AC B9 2F       	cmp al, '/'
0093+  15AE C6 CE 15    	je ispath_true
0094+  15B1 B9 2E       	cmp al, '.'
0095+  15B3 C6 CE 15    	je ispath_true
0096+  15B6 B9 61       	cmp al, 'a'
0097+  15B8 C8 CA 15    	jlu ispath_false
0098+  15BB B9 7A       	cmp al, 'z'
0099+  15BD D1 CA 15    	jgu ispath_false
0100+  15C0 B9 7A       	cmp al, 'z'
0101+  15C2 D0 CE 15    	jleu ispath_true
0102+  15C5 B9 61       	cmp al, 'a'
0103+  15C7 C9 CE 15    	jgeu ispath_true
0104+  15CA             ispath_false:
0105+  15CA 8B 01       	or al, 1	; clear zf
0106+  15CC E8          	pop al
0107+  15CD 09          	ret
0108+  15CE             ispath_true:
0109+  15CE 87 00       	and al, 0	; set zf
0110+  15D0 E8          	pop al
0111+  15D1 09          	ret
0112+  15D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  15D2             ;; is space
0114+  15D2             ;; sets zf according with result
0115+  15D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  15D2             _isspace:
0117+  15D2 B9 20       	cmp al, $20		; ' '
0118+  15D4 C6 E8 15    	je _isspace_exit
0119+  15D7 B9 09       	cmp al, $09		; '\t'
0120+  15D9 C6 E8 15    	je _isspace_exit
0121+  15DC B9 0A       	cmp al, $0a		; '\n'
0122+  15DE C6 E8 15    	je _isspace_exit
0123+  15E1 B9 0D       	cmp al, $0d		; '\r'
0124+  15E3 C6 E8 15    	je _isspace_exit
0125+  15E6 B9 0B       	cmp al, $0b		; '\v'
0126+  15E8             _isspace_exit:
0127+  15E8 09          	ret	
0128+  15E9             
0129+  15E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  15E9             ; to lower
0131+  15E9             ; input in al
0132+  15E9             ; output in al
0133+  15E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  15E9             _to_lower:
0135+  15E9 B9 7A       	cmp al, 'z'
0136+  15EB D1 F0 15    	jgu _to_lower_ret
0137+  15EE 6A 20       	add al, $20				; convert to lower case
0138+  15F0             _to_lower_ret:
0139+  15F0 09          	ret
0140+  15F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  15F1             ; to upper
0142+  15F1             ; input in al
0143+  15F1             ; output in al
0144+  15F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  15F1             _to_upper:
0146+  15F1 B9 61       	cmp al, 'a'
0147+  15F3 C8 F8 15    	jlu _to_upper_ret
0148+  15F6 6F 20       	sub al, $20			; convert to upper case
0149+  15F8             _to_upper_ret:
0150+  15F8 09          	ret
0151+  15F9             
3043   15F9             .include "lib/token.asm"
0001+  15F9             toktyp_identifier  .equ 0
0002+  15F9             toktyp_keyword     .equ 1
0003+  15F9             toktyp_delimiter   .equ 2
0004+  15F9             toktyp_string      .equ 3
0005+  15F9             toktyp_char        .equ 4
0006+  15F9             toktyp_numeric     .equ 5
0007+  15F9             toktyp_end         .equ 6
0008+  15F9             
0009+  15F9             tok_null           .equ 0
0010+  15F9             tok_fslash         .equ 1
0011+  15F9             tok_times          .equ 2
0012+  15F9             tok_plus           .equ 3
0013+  15F9             tok_minus          .equ 4
0014+  15F9             tok_dot            .equ 5
0015+  15F9             tok_semi           .equ 6
0016+  15F9             tok_angle          .equ 7
0017+  15F9             tok_tilde          .equ 8
0018+  15F9             tok_equal          .equ 9
0019+  15F9             tok_colon          .equ 10
0020+  15F9             tok_comma          .equ 11
0021+  15F9             
0022+  15F9             tok_end            .equ 20
0023+  15F9             
0024+  15F9             
0025+  15F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  15F9             ;; read a full command argment from shell input buffer
0027+  15F9             ;; argument is written into tokstr
0028+  15F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  15F9             get_arg:
0030+  15F9 D7            push a
0031+  15FA E2            push si
0032+  15FB E3            push di
0033+  15FC 19 00         mov al, 0
0034+  15FE 3D 27 18      mov [tokstr], al      ; nullify tokstr string
0035+  1601 14 23 18      mov a, [prog]
0036+  1604 4D            mov si, a
0037+  1605 FD 4F 27 18   mov di, tokstr
0038+  1609             get_arg_skip_spaces:
0039+  1609 F6            lodsb
0040+  160A 07 D2 15      call _isspace
0041+  160D C6 09 16      je get_arg_skip_spaces
0042+  1610             get_arg_l0:
0043+  1610 B9 3B         cmp al, $3b        ; check if is ';'
0044+  1612 C6 1F 16      je get_arg_end
0045+  1615 B9 00         cmp al, 0
0046+  1617 C6 1F 16      je get_arg_end      ; check if end of input
0047+  161A F7            stosb
0048+  161B F6            lodsb
0049+  161C 0A 10 16      jmp get_arg_l0
0050+  161F             get_arg_end:
0051+  161F 19 00         mov al, 0
0052+  1621 F7            stosb
0053+  1622 D5 01 00      sub si, 1
0054+  1625 4E            mov a, si
0055+  1626 42 23 18      mov [prog], a    ; update pointer
0056+  1629 F0            pop di
0057+  162A EF            pop si
0058+  162B E4            pop a
0059+  162C 09            ret
0060+  162D             
0061+  162D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  162D             ;; read a path formation from shell input buffer
0063+  162D             ;; path is written into tokstr
0064+  162D             ;; /usr/bin
0065+  162D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  162D             get_path:
0067+  162D D7            push a
0068+  162E E2            push si
0069+  162F E3            push di
0070+  1630 19 00         mov al, 0
0071+  1632 3D 27 18      mov [tokstr], al      ; nullify tokstr string
0072+  1635 14 23 18      mov a, [prog]
0073+  1638 4D            mov si, a
0074+  1639 FD 4F 27 18   mov di, tokstr
0075+  163D             get_path_skip_spaces:
0076+  163D F6            lodsb
0077+  163E 07 D2 15      call _isspace
0078+  1641 C6 3D 16      je get_path_skip_spaces
0079+  1644             get_path_is_pathchar:
0080+  1644 F7            stosb
0081+  1645 F6            lodsb
0082+  1646 07 5C 15      call _isalnum      ;check if is alphanumeric
0083+  1649 C6 44 16      je get_path_is_pathchar
0084+  164C B9 2F         cmp al, '/'        ; check if is '/'
0085+  164E C6 44 16      je get_path_is_pathchar
0086+  1651 19 00         mov al, 0
0087+  1653 F7            stosb
0088+  1654 D5 01 00      sub si, 1
0089+  1657 4E            mov a, si
0090+  1658 42 23 18      mov [prog], a    ; update pointer
0091+  165B             get_path_end:
0092+  165B F0            pop di
0093+  165C EF            pop si
0094+  165D E4            pop a
0095+  165E 09            ret
0096+  165F             
0097+  165F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  165F             ;; read a line
0099+  165F             ;; line is written into tokstr
0100+  165F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  165F             get_line:
0102+  165F D7            push a
0103+  1660 E2            push si
0104+  1661 E3            push di
0105+  1662 19 00         mov al, 0
0106+  1664 3D 27 18      mov [tokstr], al      ; nullify tokstr string
0107+  1667 14 23 18      mov a, [prog]
0108+  166A 4D            mov si, a
0109+  166B FD 4F 27 18   mov di, tokstr
0110+  166F             get_line_l0:
0111+  166F F6            lodsb
0112+  1670 B9 0A         cmp al, $0a    ; check for new line
0113+  1672 C6 79 16      je get_line_exit
0114+  1675 F7            stosb
0115+  1676 0A 6F 16      jmp get_line_l0
0116+  1679             get_line_exit:
0117+  1679 19 00         mov al, 0
0118+  167B F7            stosb
0119+  167C 4E            mov a, si
0120+  167D 42 23 18      mov [prog], a    ; update pointer
0121+  1680 F0            pop di
0122+  1681 EF            pop si
0123+  1682 E4            pop a
0124+  1683 09            ret
0125+  1684             
0126+  1684             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  1684             ;; token parser
0128+  1684             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  1684             get_token:
0130+  1684 D7            push a
0131+  1685 DA            push d
0132+  1686 E2            push si
0133+  1687 E3            push di
0134+  1688 19 00         mov al, 0
0135+  168A 3D 27 18      mov [tokstr], al      ; nullify tokstr string
0136+  168D 19 00         mov al, tok_null
0137+  168F 3D 26 18      mov [tok], al        ; nullify token
0138+  1692 14 23 18      mov a, [prog]
0139+  1695 4D            mov si, a
0140+  1696 FD 4F 27 18   mov di, tokstr
0141+  169A             get_tok_skip_spaces:
0142+  169A F6            lodsb
0143+  169B 07 D2 15      call _isspace
0144+  169E C6 9A 16      je get_tok_skip_spaces
0145+  16A1 B9 00         cmp al, 0      ; check for end of input (null)
0146+  16A3 C6 88 17      je get_token_end
0147+  16A6 B9 23         cmp al, '#'      ; comments!
0148+  16A8 C6 B6 17      je get_tok_comment
0149+  16AB 07 5C 15      call _isalnum
0150+  16AE C6 95 17      jz is_alphanumeric
0151+  16B1             ; other token types
0152+  16B1             get_token_slash:
0153+  16B1 B9 2F         cmp al, '/'        ; check if '/'
0154+  16B3 C7 CB 16      jne get_token_minus
0155+  16B6 F7            stosb          ; store '/' into token string
0156+  16B7 19 00         mov al, 0
0157+  16B9 F7            stosb          ; terminate token string
0158+  16BA 19 01         mov al, tok_fslash
0159+  16BC 3D 26 18      mov [tok], al      
0160+  16BF 19 02         mov al, toktyp_delimiter
0161+  16C1 3D 25 18      mov [toktyp], al
0162+  16C4 4E            mov a, si
0163+  16C5 42 23 18      mov [prog], a    ; update pointer
0164+  16C8 0A B1 17      jmp get_token_return
0165+  16CB             get_token_minus:
0166+  16CB B9 2D         cmp al, '-'        ; check if '-'
0167+  16CD C7 E5 16      jne get_token_comma
0168+  16D0 F7            stosb          ; store '-' into token string
0169+  16D1 19 00         mov al, 0
0170+  16D3 F7            stosb          ; terminate token string
0171+  16D4 19 04         mov al, tok_minus
0172+  16D6 3D 26 18      mov [tok], al      
0173+  16D9 19 02         mov al, toktyp_delimiter
0174+  16DB 3D 25 18      mov [toktyp], al
0175+  16DE 4E            mov a, si
0176+  16DF 42 23 18      mov [prog], a    ; update pointer
0177+  16E2 0A B1 17      jmp get_token_return
0178+  16E5             get_token_comma:
0179+  16E5 B9 2C         cmp al, ','        ; check if ','
0180+  16E7 C7 FF 16      jne get_token_semi
0181+  16EA F7            stosb          ; store ',' into token string
0182+  16EB 19 00         mov al, 0
0183+  16ED F7            stosb          ; terminate token string
0184+  16EE 19 0B         mov al, tok_comma
0185+  16F0 3D 26 18      mov [tok], al      
0186+  16F3 19 02         mov al, toktyp_delimiter
0187+  16F5 3D 25 18      mov [toktyp], al
0188+  16F8 4E            mov a, si
0189+  16F9 42 23 18      mov [prog], a    ; update pointer
0190+  16FC 0A B1 17      jmp get_token_return
0191+  16FF             get_token_semi:
0192+  16FF B9 3B         cmp al, $3b        ; check if ';'
0193+  1701 C7 19 17      jne get_token_colon
0194+  1704 F7            stosb          ; store ';' into token string
0195+  1705 19 00         mov al, 0
0196+  1707 F7            stosb          ; terminate token string
0197+  1708 19 06         mov al, tok_semi
0198+  170A 3D 26 18      mov [tok], al      
0199+  170D 19 02         mov al, toktyp_delimiter
0200+  170F 3D 25 18      mov [toktyp], al
0201+  1712 4E            mov a, si
0202+  1713 42 23 18      mov [prog], a    ; update pointer
0203+  1716 0A B1 17      jmp get_token_return
0204+  1719             get_token_colon:
0205+  1719 B9 3A         cmp al, $3a        ; check if ':'
0206+  171B C7 33 17      jne get_token_angle
0207+  171E F7            stosb          ; store ':' into token string
0208+  171F 19 00         mov al, 0
0209+  1721 F7            stosb          ; terminate token string
0210+  1722 19 0A         mov al, tok_colon
0211+  1724 3D 26 18      mov [tok], al      
0212+  1727 19 02         mov al, toktyp_delimiter
0213+  1729 3D 25 18      mov [toktyp], al
0214+  172C 4E            mov a, si
0215+  172D 42 23 18      mov [prog], a    ; update pointer
0216+  1730 0A B1 17      jmp get_token_return
0217+  1733             get_token_angle:
0218+  1733 B9 3E         cmp al, $3e        ; check if '>'
0219+  1735 C7 4D 17      jne get_token_tilde
0220+  1738 F7            stosb          ; store '>' into token string
0221+  1739 19 00         mov al, 0
0222+  173B F7            stosb          ; terminate token string
0223+  173C 19 07         mov al, tok_angle
0224+  173E 3D 26 18      mov [tok], al      
0225+  1741 19 02         mov al, toktyp_delimiter
0226+  1743 3D 25 18      mov [toktyp], al
0227+  1746 4E            mov a, si
0228+  1747 42 23 18      mov [prog], a    ; update pointer
0229+  174A 0A B1 17      jmp get_token_return
0230+  174D             get_token_tilde:
0231+  174D B9 7E         cmp al, '~'        ; check if '~'
0232+  174F C7 67 17      jne get_token_equal
0233+  1752 F7            stosb          ; store '~' into token string
0234+  1753 19 00         mov al, 0
0235+  1755 F7            stosb          ; terminate token string
0236+  1756 19 08         mov al, tok_tilde
0237+  1758 3D 26 18      mov [tok], al      
0238+  175B 19 02         mov al, toktyp_delimiter
0239+  175D 3D 25 18      mov [toktyp], al
0240+  1760 4E            mov a, si
0241+  1761 42 23 18      mov [prog], a    ; update pointer
0242+  1764 0A B1 17      jmp get_token_return
0243+  1767             get_token_equal:
0244+  1767 B9 3D         cmp al, '='        ; check if '='
0245+  1769 C7 81 17      jne get_token_skip
0246+  176C F7            stosb          ; store '=' into token string
0247+  176D 19 00         mov al, 0
0248+  176F F7            stosb          ; terminate token string
0249+  1770 19 09         mov al, tok_equal
0250+  1772 3D 26 18      mov [tok], al      
0251+  1775 19 02         mov al, toktyp_delimiter
0252+  1777 3D 25 18      mov [toktyp], al
0253+  177A 4E            mov a, si
0254+  177B 42 23 18      mov [prog], a    ; update pointer
0255+  177E 0A B1 17      jmp get_token_return
0256+  1781             get_token_skip:
0257+  1781 4E            mov a, si
0258+  1782 42 23 18      mov [prog], a    ; update pointer
0259+  1785 0A B1 17      jmp get_token_return
0260+  1788             get_token_end:        ; end of file token
0261+  1788 19 14         mov al, tok_end
0262+  178A 3D 26 18      mov [tok], al
0263+  178D 19 06         mov al, toktyp_end
0264+  178F 3D 25 18      mov [toktyp], al
0265+  1792 0A B1 17      jmp get_token_return
0266+  1795             is_alphanumeric:
0267+  1795 F7            stosb
0268+  1796 F6            lodsb
0269+  1797 07 5C 15      call _isalnum      ;check if is alphanumeric
0270+  179A C6 95 17      jz is_alphanumeric
0271+  179D B9 2E         cmp al, $2e        ; check if is '.'
0272+  179F C6 95 17      je is_alphanumeric
0273+  17A2 19 00         mov al, 0
0274+  17A4 F7            stosb
0275+  17A5 19 00         mov al, toktyp_identifier
0276+  17A7 3D 25 18      mov [toktyp], al
0277+  17AA D5 01 00      sub si, 1
0278+  17AD 4E            mov a, si
0279+  17AE 42 23 18      mov [prog], a    ; update pointer
0280+  17B1             get_token_return:
0281+  17B1 F0            pop di
0282+  17B2 EF            pop si
0283+  17B3 E7            pop d
0284+  17B4 E4            pop a
0285+  17B5 09            ret
0286+  17B6             get_tok_comment:
0287+  17B6 F6            lodsb
0288+  17B7 B9 0A         cmp al, $0a      ; new line
0289+  17B9 C7 B6 17      jne get_tok_comment
0290+  17BC 0A 9A 16      jmp get_tok_skip_spaces
0291+  17BF             
0292+  17BF             
0293+  17BF             get_number:
0294+  17BF D7            push a
0295+  17C0 DA            push d
0296+  17C1 E2            push si
0297+  17C2 E3            push di
0298+  17C3 19 00         mov al, 0
0299+  17C5 3D 27 18      mov [tokstr], al      ; nullify tokstr string
0300+  17C8 19 00         mov al, tok_null
0301+  17CA 3D 26 18      mov [tok], al        ; nullify token
0302+  17CD 14 23 18      mov a, [prog]
0303+  17D0 4D            mov si, a
0304+  17D1 FD 4F 27 18   mov di, tokstr
0305+  17D5             get_number_skip_spaces:
0306+  17D5 F6            lodsb
0307+  17D6 07 D2 15      call _isspace
0308+  17D9 C6 D5 17      je get_number_skip_spaces
0309+  17DC B9 00         cmp al, 0      ; check for end of input (null)
0310+  17DE C7 EE 17      jne get_number_l0
0311+  17E1 19 14         mov al, tok_end
0312+  17E3 3D 26 18      mov [tok], al
0313+  17E6 19 06         mov al, toktyp_end
0314+  17E8 3D 25 18      mov [toktyp], al
0315+  17EB 0A 05 18      jmp get_number_return
0316+  17EE             get_number_l0:
0317+  17EE F7            stosb
0318+  17EF F6            lodsb
0319+  17F0 07 66 15      call _isdigit      ;check if is numeric
0320+  17F3 C6 EE 17      jz get_number_l0
0321+  17F6 19 00         mov al, 0
0322+  17F8 F7            stosb
0323+  17F9 19 05         mov al, toktyp_numeric
0324+  17FB 3D 25 18      mov [toktyp], al
0325+  17FE D5 01 00      sub si, 1
0326+  1801 4E            mov a, si
0327+  1802 42 23 18      mov [prog], a    ; update pointer
0328+  1805             get_number_return:
0329+  1805 F0            pop di
0330+  1806 EF            pop si
0331+  1807 E7            pop d
0332+  1808 E4            pop a
0333+  1809 09            ret
0334+  180A             
0335+  180A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  180A             ;; put back token
0337+  180A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0338+  180A             _putback:
0339+  180A D7            push a
0340+  180B E2            push si
0341+  180C FD 4D 27 18   mov si, tokstr  
0342+  1810             _putback_loop:
0343+  1810 F6            lodsb
0344+  1811 B9 00         cmp al, 0
0345+  1813 C6 20 18      je _putback_end
0346+  1816 14 23 18      mov a, [prog]
0347+  1819 7D            dec a
0348+  181A 42 23 18      mov [prog], a      ; update pointer
0349+  181D 0A 10 18      jmp _putback_loop
0350+  1820             _putback_end:
0351+  1820 EF            pop si
0352+  1821 E4            pop a
0353+  1822 09            ret
0354+  1823             
0355+  1823             
0356+  1823             
0357+  1823             
0358+  1823 00 00       prog:      .dw 0          ; pointer to current position in buffer
0359+  1825             
0360+  1825 00          toktyp:    .db 0          ; token type symbol
0361+  1826 00          tok:       .db 0          ; current token symbol
0362+  1827 00 00 00 00 tokstr:    .fill 256, 0   ; token as a string
0362+  182B 00 00 00 00 
0362+  182F 00 00 00 00 
0362+  1833 00 00 00 00 
0362+  1837 00 00 00 00 
0362+  183B 00 00 00 00 
0362+  183F 00 00 00 00 
0362+  1843 00 00 00 00 
0362+  1847 00 00 00 00 
0362+  184B 00 00 00 00 
0362+  184F 00 00 00 00 
0362+  1853 00 00 00 00 
0362+  1857 00 00 00 00 
0362+  185B 00 00 00 00 
0362+  185F 00 00 00 00 
0362+  1863 00 00 00 00 
0362+  1867 00 00 00 00 
0362+  186B 00 00 00 00 
0362+  186F 00 00 00 00 
0362+  1873 00 00 00 00 
0362+  1877 00 00 00 00 
0362+  187B 00 00 00 00 
0362+  187F 00 00 00 00 
0362+  1883 00 00 00 00 
0362+  1887 00 00 00 00 
0362+  188B 00 00 00 00 
0362+  188F 00 00 00 00 
0362+  1893 00 00 00 00 
0362+  1897 00 00 00 00 
0362+  189B 00 00 00 00 
0362+  189F 00 00 00 00 
0362+  18A3 00 00 00 00 
0362+  18A7 00 00 00 00 
0362+  18AB 00 00 00 00 
0362+  18AF 00 00 00 00 
0362+  18B3 00 00 00 00 
0362+  18B7 00 00 00 00 
0362+  18BB 00 00 00 00 
0362+  18BF 00 00 00 00 
0362+  18C3 00 00 00 00 
0362+  18C7 00 00 00 00 
0362+  18CB 00 00 00 00 
0362+  18CF 00 00 00 00 
0362+  18D3 00 00 00 00 
0362+  18D7 00 00 00 00 
0362+  18DB 00 00 00 00 
0362+  18DF 00 00 00 00 
0362+  18E3 00 00 00 00 
0362+  18E7 00 00 00 00 
0362+  18EB 00 00 00 00 
0362+  18EF 00 00 00 00 
0362+  18F3 00 00 00 00 
0362+  18F7 00 00 00 00 
0362+  18FB 00 00 00 00 
0362+  18FF 00 00 00 00 
0362+  1903 00 00 00 00 
0362+  1907 00 00 00 00 
0362+  190B 00 00 00 00 
0362+  190F 00 00 00 00 
0362+  1913 00 00 00 00 
0362+  1917 00 00 00 00 
0362+  191B 00 00 00 00 
0362+  191F 00 00 00 00 
0362+  1923 00 00 00 00 
3044   1927             
3045   1927             ; kernel parameters
3046   1927             sys_debug_mode:
3047   1927 00            .db 0   ; debug modes: 0=normal mode, 1=debug mode
3048   1928             sys_echo_on:
3049   1928 01            .db 1
3050   1929             sys_uart0_lcr:
3051   1929 0F            .db %00001111 ; 8 data bits, 2 stop bits, enable parity, odd parity
3052   192A             sys_uart0_inten:
3053   192A 01            .db 1
3054   192B             sys_uart0_fifoen:
3055   192B 00            .db 0
3056   192C             sys_uart0_div0:
3057   192C 03            .db 3
3058   192D             sys_uart0_div1:
3059   192D 00            .db 0   ; default baud = 38400
3060   192E             ; baud  divisor
3061   192E             ; 50    2304
3062   192E             ; 110   1047
3063   192E             ; 300    384
3064   192E             ; 600    192
3065   192E             ; 1200    96
3066   192E             ; 9600    12
3067   192E             ; 19200    6
3068   192E             ; 38400    3
3069   192E             
3070   192E             nbr_active_procs:
3071   192E 00            .db 0
3072   192F             active_proc_index:
3073   192F 01            .db 1
3074   1930             
3075   1930             index:
3076   1930 00 00         .dw 0
3077   1932             buffer_addr:
3078   1932 00 00         .dw 0
3079   1934             
3080   1934             fifo_in:
3081   1934 95 20         .dw fifo
3082   1936             fifo_out:
3083   1936 95 20         .dw fifo
3084   1938             
3085   1938             ; file system variables
3086   1938             current_dir_id:
3087   1938 00 00         .dw 0     ; keep dirid of current directory
3088   193A             s_init_path:
3089   193A 2F 73 62 69   .db "/sbin/init", 0
3089   193E 6E 2F 69 6E 
3089   1942 69 74 00 
3090   1945             
3091   1945             s_uname:
3092   1945 73 6F 6C 61   .db "solarium v.1.0", 0
3092   1949 72 69 75 6D 
3092   194D 20 76 2E 31 
3092   1951 2E 30 00 
3093   1954             s_dataentry:
3094   1954 3E 20 00      .db "> ", 0
3095   1957             s_parent_dir:
3096   1957 2E 2E 00      .db "..", 0
3097   195A             s_current_dir:
3098   195A 2E 00         .db ".", 0
3099   195C             s_fslash:
3100   195C 2F 00         .db "/", 0
3101   195E             file_attrib:
3102   195E 2D 72 77 20   .db "-rw x"      ; chars at powers of 2
3102   1962 78 
3103   1963             file_type:
3104   1963 2D 64 63      .db "-dc"
3105   1966             s_ps_header:
3106   1966 70 69 64 20   .db "pid command\n", 0
3106   196A 63 6F 6D 6D 
3106   196E 61 6E 64 0A 
3106   1972 00 
3107   1973             s_ls_total:
3108   1973 74 6F 74 61   .db "total: ", 0
3108   1977 6C 3A 20 00 
3109   197B             
3110   197B             s_int_en:
3111   197B 69 72 71 73   .db "irqs enabled\n", 0
3111   197F 20 65 6E 61 
3111   1983 62 6C 65 64 
3111   1987 0A 00 
3112   1989             s_kernel_started:
3113   1989 6B 65 72 6E   .db "kernel started(version 1.0)\n", 0
3113   198D 65 6C 20 73 
3113   1991 74 61 72 74 
3113   1995 65 64 28 76 
3113   1999 65 72 73 69 
3113   199D 6F 6E 20 31 
3113   19A1 2E 30 29 0A 
3113   19A5 00 
3114   19A6             s_prompt_init:
3115   19A6 73 74 61 72   .db "starting init\n", 0
3115   19AA 74 69 6E 67 
3115   19AE 20 69 6E 69 
3115   19B2 74 0A 00 
3116   19B5             s_priviledge:
3117   19B5 0A 65 78 63   .db "\nexception: privilege\n", 0
3117   19B9 65 70 74 69 
3117   19BD 6F 6E 3A 20 
3117   19C1 70 72 69 76 
3117   19C5 69 6C 65 67 
3117   19C9 65 0A 00 
3118   19CC             s_divzero:
3119   19CC 0A 65 78 63   .db "\nexception: zero division\n", 0
3119   19D0 65 70 74 69 
3119   19D4 6F 6E 3A 20 
3119   19D8 7A 65 72 6F 
3119   19DC 20 64 69 76 
3119   19E0 69 73 69 6F 
3119   19E4 6E 0A 00 
3120   19E7             
3121   19E7             s_set_year:
3122   19E7 79 65 61 72   .db "year: ", 0
3122   19EB 3A 20 00 
3123   19EE             s_set_month:
3124   19EE 6D 6F 6E 74   .db "month: ", 0
3124   19F2 68 3A 20 00 
3125   19F6             s_set_day:
3126   19F6 64 61 79 3A   .db "day: ", 0
3126   19FA 20 00 
3127   19FC             s_set_week:
3128   19FC 77 65 65 6B   .db "weekday: ", 0
3128   1A00 64 61 79 3A 
3128   1A04 20 00 
3129   1A06             s_set_hours:
3130   1A06 68 6F 75 72   .db "hours: ", 0
3130   1A0A 73 3A 20 00 
3131   1A0E             s_set_minutes:
3132   1A0E 6D 69 6E 75   .db "minutes: ", 0
3132   1A12 74 65 73 3A 
3132   1A16 20 00 
3133   1A18             s_set_seconds:
3134   1A18 73 65 63 6F   .db "seconds: ", 0
3134   1A1C 6E 64 73 3A 
3134   1A20 20 00 
3135   1A22             s_months:      
3136   1A22 20 20 20 00   .db "   ", 0
3137   1A26 6A 61 6E 00   .db "jan", 0
3138   1A2A 66 65 62 00   .db "feb", 0
3139   1A2E 6D 61 72 00   .db "mar", 0
3140   1A32 61 70 72 00   .db "apr", 0
3141   1A36 6D 61 79 00   .db "may", 0
3142   1A3A 6A 75 6E 00   .db "jun", 0
3143   1A3E 6A 75 6C 00   .db "jul", 0
3144   1A42 61 75 67 00   .db "aug", 0
3145   1A46 73 65 70 00   .db "sep", 0
3146   1A4A 6F 63 74 00   .db "oct", 0
3147   1A4E 6E 6F 76 00   .db "nov", 0
3148   1A52 64 65 63 00   .db "dec", 0
3149   1A56             
3150   1A56             s_week:        
3151   1A56 73 75 6E 00   .db "sun", 0 
3152   1A5A 6D 6F 6E 00   .db "mon", 0 
3153   1A5E 74 75 65 00   .db "tue", 0 
3154   1A62 77 65 64 00   .db "wed", 0 
3155   1A66 74 68 75 00   .db "thu", 0 
3156   1A6A 66 72 69 00   .db "fri", 0 
3157   1A6E 73 61 74 00   .db "sat", 0
3158   1A72             
3159   1A72 0A 49 52 51 s_fdc_irq: .db "\nIRQ0 Executed.\n", 0
3159   1A76 30 20 45 78 
3159   1A7A 65 63 75 74 
3159   1A7E 65 64 2E 0A 
3159   1A82 00 
3160   1A83             s_fdc_config:
3161   1A83 0A 73 65 6C   .db "\nselecting diskette drive 0, side 0, single density, head loaded\n", 0
3161   1A87 65 63 74 69 
3161   1A8B 6E 67 20 64 
3161   1A8F 69 73 6B 65 
3161   1A93 74 74 65 20 
3161   1A97 64 72 69 76 
3161   1A9B 65 20 30 2C 
3161   1A9F 20 73 69 64 
3161   1AA3 65 20 30 2C 
3161   1AA7 20 73 69 6E 
3161   1AAB 67 6C 65 20 
3161   1AAF 64 65 6E 73 
3161   1AB3 69 74 79 2C 
3161   1AB7 20 68 65 61 
3161   1ABB 64 20 6C 6F 
3161   1ABF 61 64 65 64 
3161   1AC3 0A 00 
3162   1AC5             
3163   1AC5             proc_state_table:   
3164   1AC5 00 00 00 00   .fill 16 * 20, 0  ; for 15 processes max
3164   1AC9 00 00 00 00 
3164   1ACD 00 00 00 00 
3164   1AD1 00 00 00 00 
3164   1AD5 00 00 00 00 
3164   1AD9 00 00 00 00 
3164   1ADD 00 00 00 00 
3164   1AE1 00 00 00 00 
3164   1AE5 00 00 00 00 
3164   1AE9 00 00 00 00 
3164   1AED 00 00 00 00 
3164   1AF1 00 00 00 00 
3164   1AF5 00 00 00 00 
3164   1AF9 00 00 00 00 
3164   1AFD 00 00 00 00 
3164   1B01 00 00 00 00 
3164   1B05 00 00 00 00 
3164   1B09 00 00 00 00 
3164   1B0D 00 00 00 00 
3164   1B11 00 00 00 00 
3164   1B15 00 00 00 00 
3164   1B19 00 00 00 00 
3164   1B1D 00 00 00 00 
3164   1B21 00 00 00 00 
3164   1B25 00 00 00 00 
3164   1B29 00 00 00 00 
3164   1B2D 00 00 00 00 
3164   1B31 00 00 00 00 
3164   1B35 00 00 00 00 
3164   1B39 00 00 00 00 
3164   1B3D 00 00 00 00 
3164   1B41 00 00 00 00 
3164   1B45 00 00 00 00 
3164   1B49 00 00 00 00 
3164   1B4D 00 00 00 00 
3164   1B51 00 00 00 00 
3164   1B55 00 00 00 00 
3164   1B59 00 00 00 00 
3164   1B5D 00 00 00 00 
3164   1B61 00 00 00 00 
3164   1B65 00 00 00 00 
3164   1B69 00 00 00 00 
3164   1B6D 00 00 00 00 
3164   1B71 00 00 00 00 
3164   1B75 00 00 00 00 
3164   1B79 00 00 00 00 
3164   1B7D 00 00 00 00 
3164   1B81 00 00 00 00 
3164   1B85 00 00 00 00 
3164   1B89 00 00 00 00 
3164   1B8D 00 00 00 00 
3164   1B91 00 00 00 00 
3164   1B95 00 00 00 00 
3164   1B99 00 00 00 00 
3164   1B9D 00 00 00 00 
3164   1BA1 00 00 00 00 
3164   1BA5 00 00 00 00 
3164   1BA9 00 00 00 00 
3164   1BAD 00 00 00 00 
3164   1BB1 00 00 00 00 
3164   1BB5 00 00 00 00 
3164   1BB9 00 00 00 00 
3164   1BBD 00 00 00 00 
3164   1BC1 00 00 00 00 
3164   1BC5 00 00 00 00 
3164   1BC9 00 00 00 00 
3164   1BCD 00 00 00 00 
3164   1BD1 00 00 00 00 
3164   1BD5 00 00 00 00 
3164   1BD9 00 00 00 00 
3164   1BDD 00 00 00 00 
3164   1BE1 00 00 00 00 
3164   1BE5 00 00 00 00 
3164   1BE9 00 00 00 00 
3164   1BED 00 00 00 00 
3164   1BF1 00 00 00 00 
3164   1BF5 00 00 00 00 
3164   1BF9 00 00 00 00 
3164   1BFD 00 00 00 00 
3164   1C01 00 00 00 00 
3165   1C05             proc_availab_table: 
3166   1C05 00 00 00 00   .fill 16, 0       ; space for 15 processes. 0 = process empty, 1 = process taken
3166   1C09 00 00 00 00 
3166   1C0D 00 00 00 00 
3166   1C11 00 00 00 00 
3167   1C15             proc_names:
3168   1C15 00 00 00 00   .fill 16 * 32, 0  ; process names
3168   1C19 00 00 00 00 
3168   1C1D 00 00 00 00 
3168   1C21 00 00 00 00 
3168   1C25 00 00 00 00 
3168   1C29 00 00 00 00 
3168   1C2D 00 00 00 00 
3168   1C31 00 00 00 00 
3168   1C35 00 00 00 00 
3168   1C39 00 00 00 00 
3168   1C3D 00 00 00 00 
3168   1C41 00 00 00 00 
3168   1C45 00 00 00 00 
3168   1C49 00 00 00 00 
3168   1C4D 00 00 00 00 
3168   1C51 00 00 00 00 
3168   1C55 00 00 00 00 
3168   1C59 00 00 00 00 
3168   1C5D 00 00 00 00 
3168   1C61 00 00 00 00 
3168   1C65 00 00 00 00 
3168   1C69 00 00 00 00 
3168   1C6D 00 00 00 00 
3168   1C71 00 00 00 00 
3168   1C75 00 00 00 00 
3168   1C79 00 00 00 00 
3168   1C7D 00 00 00 00 
3168   1C81 00 00 00 00 
3168   1C85 00 00 00 00 
3168   1C89 00 00 00 00 
3168   1C8D 00 00 00 00 
3168   1C91 00 00 00 00 
3168   1C95 00 00 00 00 
3168   1C99 00 00 00 00 
3168   1C9D 00 00 00 00 
3168   1CA1 00 00 00 00 
3168   1CA5 00 00 00 00 
3168   1CA9 00 00 00 00 
3168   1CAD 00 00 00 00 
3168   1CB1 00 00 00 00 
3168   1CB5 00 00 00 00 
3168   1CB9 00 00 00 00 
3168   1CBD 00 00 00 00 
3168   1CC1 00 00 00 00 
3168   1CC5 00 00 00 00 
3168   1CC9 00 00 00 00 
3168   1CCD 00 00 00 00 
3168   1CD1 00 00 00 00 
3168   1CD5 00 00 00 00 
3168   1CD9 00 00 00 00 
3168   1CDD 00 00 00 00 
3168   1CE1 00 00 00 00 
3168   1CE5 00 00 00 00 
3168   1CE9 00 00 00 00 
3168   1CED 00 00 00 00 
3168   1CF1 00 00 00 00 
3168   1CF5 00 00 00 00 
3168   1CF9 00 00 00 00 
3168   1CFD 00 00 00 00 
3168   1D01 00 00 00 00 
3168   1D05 00 00 00 00 
3168   1D09 00 00 00 00 
3168   1D0D 00 00 00 00 
3168   1D11 00 00 00 00 
3168   1D15 00 00 00 00 
3168   1D19 00 00 00 00 
3168   1D1D 00 00 00 00 
3168   1D21 00 00 00 00 
3168   1D25 00 00 00 00 
3168   1D29 00 00 00 00 
3168   1D2D 00 00 00 00 
3168   1D31 00 00 00 00 
3168   1D35 00 00 00 00 
3168   1D39 00 00 00 00 
3168   1D3D 00 00 00 00 
3168   1D41 00 00 00 00 
3168   1D45 00 00 00 00 
3168   1D49 00 00 00 00 
3168   1D4D 00 00 00 00 
3168   1D51 00 00 00 00 
3168   1D55 00 00 00 00 
3168   1D59 00 00 00 00 
3168   1D5D 00 00 00 00 
3168   1D61 00 00 00 00 
3168   1D65 00 00 00 00 
3168   1D69 00 00 00 00 
3168   1D6D 00 00 00 00 
3168   1D71 00 00 00 00 
3168   1D75 00 00 00 00 
3168   1D79 00 00 00 00 
3168   1D7D 00 00 00 00 
3168   1D81 00 00 00 00 
3168   1D85 00 00 00 00 
3168   1D89 00 00 00 00 
3168   1D8D 00 00 00 00 
3168   1D91 00 00 00 00 
3168   1D95 00 00 00 00 
3168   1D99 00 00 00 00 
3168   1D9D 00 00 00 00 
3168   1DA1 00 00 00 00 
3168   1DA5 00 00 00 00 
3168   1DA9 00 00 00 00 
3168   1DAD 00 00 00 00 
3168   1DB1 00 00 00 00 
3168   1DB5 00 00 00 00 
3168   1DB9 00 00 00 00 
3168   1DBD 00 00 00 00 
3168   1DC1 00 00 00 00 
3168   1DC5 00 00 00 00 
3168   1DC9 00 00 00 00 
3168   1DCD 00 00 00 00 
3168   1DD1 00 00 00 00 
3168   1DD5 00 00 00 00 
3168   1DD9 00 00 00 00 
3168   1DDD 00 00 00 00 
3168   1DE1 00 00 00 00 
3168   1DE5 00 00 00 00 
3168   1DE9 00 00 00 00 
3168   1DED 00 00 00 00 
3168   1DF1 00 00 00 00 
3168   1DF5 00 00 00 00 
3168   1DF9 00 00 00 00 
3168   1DFD 00 00 00 00 
3168   1E01 00 00 00 00 
3168   1E05 00 00 00 00 
3168   1E09 00 00 00 00 
3168   1E0D 00 00 00 00 
3168   1E11 00 00 00 00 
3169   1E15             filename:
3170   1E15 00 00 00 00   .fill 128, 0      ; holds a path for file search
3170   1E19 00 00 00 00 
3170   1E1D 00 00 00 00 
3170   1E21 00 00 00 00 
3170   1E25 00 00 00 00 
3170   1E29 00 00 00 00 
3170   1E2D 00 00 00 00 
3170   1E31 00 00 00 00 
3170   1E35 00 00 00 00 
3170   1E39 00 00 00 00 
3170   1E3D 00 00 00 00 
3170   1E41 00 00 00 00 
3170   1E45 00 00 00 00 
3170   1E49 00 00 00 00 
3170   1E4D 00 00 00 00 
3170   1E51 00 00 00 00 
3170   1E55 00 00 00 00 
3170   1E59 00 00 00 00 
3170   1E5D 00 00 00 00 
3170   1E61 00 00 00 00 
3170   1E65 00 00 00 00 
3170   1E69 00 00 00 00 
3170   1E6D 00 00 00 00 
3170   1E71 00 00 00 00 
3170   1E75 00 00 00 00 
3170   1E79 00 00 00 00 
3170   1E7D 00 00 00 00 
3170   1E81 00 00 00 00 
3170   1E85 00 00 00 00 
3170   1E89 00 00 00 00 
3170   1E8D 00 00 00 00 
3170   1E91 00 00 00 00 
3171   1E95             user_data:
3172   1E95 00 00 00 00   .fill 512, 0      ;  user space data
3172   1E99 00 00 00 00 
3172   1E9D 00 00 00 00 
3172   1EA1 00 00 00 00 
3172   1EA5 00 00 00 00 
3172   1EA9 00 00 00 00 
3172   1EAD 00 00 00 00 
3172   1EB1 00 00 00 00 
3172   1EB5 00 00 00 00 
3172   1EB9 00 00 00 00 
3172   1EBD 00 00 00 00 
3172   1EC1 00 00 00 00 
3172   1EC5 00 00 00 00 
3172   1EC9 00 00 00 00 
3172   1ECD 00 00 00 00 
3172   1ED1 00 00 00 00 
3172   1ED5 00 00 00 00 
3172   1ED9 00 00 00 00 
3172   1EDD 00 00 00 00 
3172   1EE1 00 00 00 00 
3172   1EE5 00 00 00 00 
3172   1EE9 00 00 00 00 
3172   1EED 00 00 00 00 
3172   1EF1 00 00 00 00 
3172   1EF5 00 00 00 00 
3172   1EF9 00 00 00 00 
3172   1EFD 00 00 00 00 
3172   1F01 00 00 00 00 
3172   1F05 00 00 00 00 
3172   1F09 00 00 00 00 
3172   1F0D 00 00 00 00 
3172   1F11 00 00 00 00 
3172   1F15 00 00 00 00 
3172   1F19 00 00 00 00 
3172   1F1D 00 00 00 00 
3172   1F21 00 00 00 00 
3172   1F25 00 00 00 00 
3172   1F29 00 00 00 00 
3172   1F2D 00 00 00 00 
3172   1F31 00 00 00 00 
3172   1F35 00 00 00 00 
3172   1F39 00 00 00 00 
3172   1F3D 00 00 00 00 
3172   1F41 00 00 00 00 
3172   1F45 00 00 00 00 
3172   1F49 00 00 00 00 
3172   1F4D 00 00 00 00 
3172   1F51 00 00 00 00 
3172   1F55 00 00 00 00 
3172   1F59 00 00 00 00 
3172   1F5D 00 00 00 00 
3172   1F61 00 00 00 00 
3172   1F65 00 00 00 00 
3172   1F69 00 00 00 00 
3172   1F6D 00 00 00 00 
3172   1F71 00 00 00 00 
3172   1F75 00 00 00 00 
3172   1F79 00 00 00 00 
3172   1F7D 00 00 00 00 
3172   1F81 00 00 00 00 
3172   1F85 00 00 00 00 
3172   1F89 00 00 00 00 
3172   1F8D 00 00 00 00 
3172   1F91 00 00 00 00 
3172   1F95 00 00 00 00 
3172   1F99 00 00 00 00 
3172   1F9D 00 00 00 00 
3172   1FA1 00 00 00 00 
3172   1FA5 00 00 00 00 
3172   1FA9 00 00 00 00 
3172   1FAD 00 00 00 00 
3172   1FB1 00 00 00 00 
3172   1FB5 00 00 00 00 
3172   1FB9 00 00 00 00 
3172   1FBD 00 00 00 00 
3172   1FC1 00 00 00 00 
3172   1FC5 00 00 00 00 
3172   1FC9 00 00 00 00 
3172   1FCD 00 00 00 00 
3172   1FD1 00 00 00 00 
3172   1FD5 00 00 00 00 
3172   1FD9 00 00 00 00 
3172   1FDD 00 00 00 00 
3172   1FE1 00 00 00 00 
3172   1FE5 00 00 00 00 
3172   1FE9 00 00 00 00 
3172   1FED 00 00 00 00 
3172   1FF1 00 00 00 00 
3172   1FF5 00 00 00 00 
3172   1FF9 00 00 00 00 
3172   1FFD 00 00 00 00 
3172   2001 00 00 00 00 
3172   2005 00 00 00 00 
3172   2009 00 00 00 00 
3172   200D 00 00 00 00 
3172   2011 00 00 00 00 
3172   2015 00 00 00 00 
3172   2019 00 00 00 00 
3172   201D 00 00 00 00 
3172   2021 00 00 00 00 
3172   2025 00 00 00 00 
3172   2029 00 00 00 00 
3172   202D 00 00 00 00 
3172   2031 00 00 00 00 
3172   2035 00 00 00 00 
3172   2039 00 00 00 00 
3172   203D 00 00 00 00 
3172   2041 00 00 00 00 
3172   2045 00 00 00 00 
3172   2049 00 00 00 00 
3172   204D 00 00 00 00 
3172   2051 00 00 00 00 
3172   2055 00 00 00 00 
3172   2059 00 00 00 00 
3172   205D 00 00 00 00 
3172   2061 00 00 00 00 
3172   2065 00 00 00 00 
3172   2069 00 00 00 00 
3172   206D 00 00 00 00 
3172   2071 00 00 00 00 
3172   2075 00 00 00 00 
3172   2079 00 00 00 00 
3172   207D 00 00 00 00 
3172   2081 00 00 00 00 
3172   2085 00 00 00 00 
3172   2089 00 00 00 00 
3172   208D 00 00 00 00 
3172   2091 00 00 00 00 
3173   2095             fifo:
3174   2095 FF FF FF FF   .fill _fifo_size
3174   2099 FF FF FF FF 
3174   209D FF FF FF FF 
3174   20A1 FF FF FF FF 
3174   20A5 FF FF FF FF 
3174   20A9 FF FF FF FF 
3174   20AD FF FF FF FF 
3174   20B1 FF FF FF FF 
3174   20B5 FF FF FF FF 
3174   20B9 FF FF FF FF 
3174   20BD FF FF FF FF 
3174   20C1 FF FF FF FF 
3174   20C5 FF FF FF FF 
3174   20C9 FF FF FF FF 
3174   20CD FF FF FF FF 
3174   20D1 FF FF FF FF 
3174   20D5 FF FF FF FF 
3174   20D9 FF FF FF FF 
3174   20DD FF FF FF FF 
3174   20E1 FF FF FF FF 
3174   20E5 FF FF FF FF 
3174   20E9 FF FF FF FF 
3174   20ED FF FF FF FF 
3174   20F1 FF FF FF FF 
3174   20F5 FF FF FF FF 
3174   20F9 FF FF FF FF 
3174   20FD FF FF FF FF 
3174   2101 FF FF FF FF 
3174   2105 FF FF FF FF 
3174   2109 FF FF FF FF 
3174   210D FF FF FF FF 
3174   2111 FF FF FF FF 
3174   2115 FF FF FF FF 
3174   2119 FF FF FF FF 
3174   211D FF FF FF FF 
3174   2121 FF FF FF FF 
3174   2125 FF FF FF FF 
3174   2129 FF FF FF FF 
3174   212D FF FF FF FF 
3174   2131 FF FF FF FF 
3174   2135 FF FF FF FF 
3174   2139 FF FF FF FF 
3174   213D FF FF FF FF 
3174   2141 FF FF FF FF 
3174   2145 FF FF FF FF 
3174   2149 FF FF FF FF 
3174   214D FF FF FF FF 
3174   2151 FF FF FF FF 
3174   2155 FF FF FF FF 
3174   2159 FF FF FF FF 
3174   215D FF FF FF FF 
3174   2161 FF FF FF FF 
3174   2165 FF FF FF FF 
3174   2169 FF FF FF FF 
3174   216D FF FF FF FF 
3174   2171 FF FF FF FF 
3174   2175 FF FF FF FF 
3174   2179 FF FF FF FF 
3174   217D FF FF FF FF 
3174   2181 FF FF FF FF 
3174   2185 FF FF FF FF 
3174   2189 FF FF FF FF 
3174   218D FF FF FF FF 
3174   2191 FF FF FF FF 
3174   2195 FF FF FF FF 
3174   2199 FF FF FF FF 
3174   219D FF FF FF FF 
3174   21A1 FF FF FF FF 
3174   21A5 FF FF FF FF 
3174   21A9 FF FF FF FF 
3174   21AD FF FF FF FF 
3174   21B1 FF FF FF FF 
3174   21B5 FF FF FF FF 
3174   21B9 FF FF FF FF 
3174   21BD FF FF FF FF 
3174   21C1 FF FF FF FF 
3174   21C5 FF FF FF FF 
3174   21C9 FF FF FF FF 
3174   21CD FF FF FF FF 
3174   21D1 FF FF FF FF 
3174   21D5 FF FF FF FF 
3174   21D9 FF FF FF FF 
3174   21DD FF FF FF FF 
3174   21E1 FF FF FF FF 
3174   21E5 FF FF FF FF 
3174   21E9 FF FF FF FF 
3174   21ED FF FF FF FF 
3174   21F1 FF FF FF FF 
3174   21F5 FF FF FF FF 
3174   21F9 FF FF FF FF 
3174   21FD FF FF FF FF 
3174   2201 FF FF FF FF 
3174   2205 FF FF FF FF 
3174   2209 FF FF FF FF 
3174   220D FF FF FF FF 
3174   2211 FF FF FF FF 
3174   2215 FF FF FF FF 
3174   2219 FF FF FF FF 
3174   221D FF FF FF FF 
3174   2221 FF FF FF FF 
3174   2225 FF FF FF FF 
3174   2229 FF FF FF FF 
3174   222D FF FF FF FF 
3174   2231 FF FF FF FF 
3174   2235 FF FF FF FF 
3174   2239 FF FF FF FF 
3174   223D FF FF FF FF 
3174   2241 FF FF FF FF 
3174   2245 FF FF FF FF 
3174   2249 FF FF FF FF 
3174   224D FF FF FF FF 
3174   2251 FF FF FF FF 
3174   2255 FF FF FF FF 
3174   2259 FF FF FF FF 
3174   225D FF FF FF FF 
3174   2261 FF FF FF FF 
3174   2265 FF FF FF FF 
3174   2269 FF FF FF FF 
3174   226D FF FF FF FF 
3174   2271 FF FF FF FF 
3174   2275 FF FF FF FF 
3174   2279 FF FF FF FF 
3174   227D FF FF FF FF 
3174   2281 FF FF FF FF 
3174   2285 FF FF FF FF 
3174   2289 FF FF FF FF 
3174   228D FF FF FF FF 
3174   2291 FF FF FF FF 
3174   2295 FF FF FF FF 
3174   2299 FF FF FF FF 
3174   229D FF FF FF FF 
3174   22A1 FF FF FF FF 
3174   22A5 FF FF FF FF 
3174   22A9 FF FF FF FF 
3174   22AD FF FF FF FF 
3174   22B1 FF FF FF FF 
3174   22B5 FF FF FF FF 
3174   22B9 FF FF FF FF 
3174   22BD FF FF FF FF 
3174   22C1 FF FF FF FF 
3174   22C5 FF FF FF FF 
3174   22C9 FF FF FF FF 
3174   22CD FF FF FF FF 
3174   22D1 FF FF FF FF 
3174   22D5 FF FF FF FF 
3174   22D9 FF FF FF FF 
3174   22DD FF FF FF FF 
3174   22E1 FF FF FF FF 
3174   22E5 FF FF FF FF 
3174   22E9 FF FF FF FF 
3174   22ED FF FF FF FF 
3174   22F1 FF FF FF FF 
3174   22F5 FF FF FF FF 
3174   22F9 FF FF FF FF 
3174   22FD FF FF FF FF 
3174   2301 FF FF FF FF 
3174   2305 FF FF FF FF 
3174   2309 FF FF FF FF 
3174   230D FF FF FF FF 
3174   2311 FF FF FF FF 
3174   2315 FF FF FF FF 
3174   2319 FF FF FF FF 
3174   231D FF FF FF FF 
3174   2321 FF FF FF FF 
3174   2325 FF FF FF FF 
3174   2329 FF FF FF FF 
3174   232D FF FF FF FF 
3174   2331 FF FF FF FF 
3174   2335 FF FF FF FF 
3174   2339 FF FF FF FF 
3174   233D FF FF FF FF 
3174   2341 FF FF FF FF 
3174   2345 FF FF FF FF 
3174   2349 FF FF FF FF 
3174   234D FF FF FF FF 
3174   2351 FF FF FF FF 
3174   2355 FF FF FF FF 
3174   2359 FF FF FF FF 
3174   235D FF FF FF FF 
3174   2361 FF FF FF FF 
3174   2365 FF FF FF FF 
3174   2369 FF FF FF FF 
3174   236D FF FF FF FF 
3174   2371 FF FF FF FF 
3174   2375 FF FF FF FF 
3174   2379 FF FF FF FF 
3174   237D FF FF FF FF 
3174   2381 FF FF FF FF 
3174   2385 FF FF FF FF 
3174   2389 FF FF FF FF 
3174   238D FF FF FF FF 
3174   2391 FF FF FF FF 
3174   2395 FF FF FF FF 
3174   2399 FF FF FF FF 
3174   239D FF FF FF FF 
3174   23A1 FF FF FF FF 
3174   23A5 FF FF FF FF 
3174   23A9 FF FF FF FF 
3174   23AD FF FF FF FF 
3174   23B1 FF FF FF FF 
3174   23B5 FF FF FF FF 
3174   23B9 FF FF FF FF 
3174   23BD FF FF FF FF 
3174   23C1 FF FF FF FF 
3174   23C5 FF FF FF FF 
3174   23C9 FF FF FF FF 
3174   23CD FF FF FF FF 
3174   23D1 FF FF FF FF 
3174   23D5 FF FF FF FF 
3174   23D9 FF FF FF FF 
3174   23DD FF FF FF FF 
3174   23E1 FF FF FF FF 
3174   23E5 FF FF FF FF 
3174   23E9 FF FF FF FF 
3174   23ED FF FF FF FF 
3174   23F1 FF FF FF FF 
3174   23F5 FF FF FF FF 
3174   23F9 FF FF FF FF 
3174   23FD FF FF FF FF 
3174   2401 FF FF FF FF 
3174   2405 FF FF FF FF 
3174   2409 FF FF FF FF 
3174   240D FF FF FF FF 
3174   2411 FF FF FF FF 
3174   2415 FF FF FF FF 
3174   2419 FF FF FF FF 
3174   241D FF FF FF FF 
3174   2421 FF FF FF FF 
3174   2425 FF FF FF FF 
3174   2429 FF FF FF FF 
3174   242D FF FF FF FF 
3174   2431 FF FF FF FF 
3174   2435 FF FF FF FF 
3174   2439 FF FF FF FF 
3174   243D FF FF FF FF 
3174   2441 FF FF FF FF 
3174   2445 FF FF FF FF 
3174   2449 FF FF FF FF 
3174   244D FF FF FF FF 
3174   2451 FF FF FF FF 
3174   2455 FF FF FF FF 
3174   2459 FF FF FF FF 
3174   245D FF FF FF FF 
3174   2461 FF FF FF FF 
3174   2465 FF FF FF FF 
3174   2469 FF FF FF FF 
3174   246D FF FF FF FF 
3174   2471 FF FF FF FF 
3174   2475 FF FF FF FF 
3174   2479 FF FF FF FF 
3174   247D FF FF FF FF 
3174   2481 FF FF FF FF 
3174   2485 FF FF FF FF 
3174   2489 FF FF FF FF 
3174   248D FF FF FF FF 
3174   2491 FF FF FF FF 
3174   2495 FF FF FF FF 
3174   2499 FF FF FF FF 
3174   249D FF FF FF FF 
3174   24A1 FF FF FF FF 
3174   24A5 FF FF FF FF 
3174   24A9 FF FF FF FF 
3174   24AD FF FF FF FF 
3174   24B1 FF FF FF FF 
3174   24B5 FF FF FF FF 
3174   24B9 FF FF FF FF 
3174   24BD FF FF FF FF 
3174   24C1 FF FF FF FF 
3174   24C5 FF FF FF FF 
3174   24C9 FF FF FF FF 
3174   24CD FF FF FF FF 
3174   24D1 FF FF FF FF 
3174   24D5 FF FF FF FF 
3174   24D9 FF FF FF FF 
3174   24DD FF FF FF FF 
3174   24E1 FF FF FF FF 
3174   24E5 FF FF FF FF 
3174   24E9 FF FF FF FF 
3174   24ED FF FF FF FF 
3174   24F1 FF FF FF FF 
3174   24F5 FF FF FF FF 
3174   24F9 FF FF FF FF 
3174   24FD FF FF FF FF 
3174   2501 FF FF FF FF 
3174   2505 FF FF FF FF 
3174   2509 FF FF FF FF 
3174   250D FF FF FF FF 
3174   2511 FF FF FF FF 
3174   2515 FF FF FF FF 
3174   2519 FF FF FF FF 
3174   251D FF FF FF FF 
3174   2521 FF FF FF FF 
3174   2525 FF FF FF FF 
3174   2529 FF FF FF FF 
3174   252D FF FF FF FF 
3174   2531 FF FF FF FF 
3174   2535 FF FF FF FF 
3174   2539 FF FF FF FF 
3174   253D FF FF FF FF 
3174   2541 FF FF FF FF 
3174   2545 FF FF FF FF 
3174   2549 FF FF FF FF 
3174   254D FF FF FF FF 
3174   2551 FF FF FF FF 
3174   2555 FF FF FF FF 
3174   2559 FF FF FF FF 
3174   255D FF FF FF FF 
3174   2561 FF FF FF FF 
3174   2565 FF FF FF FF 
3174   2569 FF FF FF FF 
3174   256D FF FF FF FF 
3174   2571 FF FF FF FF 
3174   2575 FF FF FF FF 
3174   2579 FF FF FF FF 
3174   257D FF FF FF FF 
3174   2581 FF FF FF FF 
3174   2585 FF FF FF FF 
3174   2589 FF FF FF FF 
3174   258D FF FF FF FF 
3174   2591 FF FF FF FF 
3174   2595 FF FF FF FF 
3174   2599 FF FF FF FF 
3174   259D FF FF FF FF 
3174   25A1 FF FF FF FF 
3174   25A5 FF FF FF FF 
3174   25A9 FF FF FF FF 
3174   25AD FF FF FF FF 
3174   25B1 FF FF FF FF 
3174   25B5 FF FF FF FF 
3174   25B9 FF FF FF FF 
3174   25BD FF FF FF FF 
3174   25C1 FF FF FF FF 
3174   25C5 FF FF FF FF 
3174   25C9 FF FF FF FF 
3174   25CD FF FF FF FF 
3174   25D1 FF FF FF FF 
3174   25D5 FF FF FF FF 
3174   25D9 FF FF FF FF 
3174   25DD FF FF FF FF 
3174   25E1 FF FF FF FF 
3174   25E5 FF FF FF FF 
3174   25E9 FF FF FF FF 
3174   25ED FF FF FF FF 
3174   25F1 FF FF FF FF 
3174   25F5 FF FF FF FF 
3174   25F9 FF FF FF FF 
3174   25FD FF FF FF FF 
3174   2601 FF FF FF FF 
3174   2605 FF FF FF FF 
3174   2609 FF FF FF FF 
3174   260D FF FF FF FF 
3174   2611 FF FF FF FF 
3174   2615 FF FF FF FF 
3174   2619 FF FF FF FF 
3174   261D FF FF FF FF 
3174   2621 FF FF FF FF 
3174   2625 FF FF FF FF 
3174   2629 FF FF FF FF 
3174   262D FF FF FF FF 
3174   2631 FF FF FF FF 
3174   2635 FF FF FF FF 
3174   2639 FF FF FF FF 
3174   263D FF FF FF FF 
3174   2641 FF FF FF FF 
3174   2645 FF FF FF FF 
3174   2649 FF FF FF FF 
3174   264D FF FF FF FF 
3174   2651 FF FF FF FF 
3174   2655 FF FF FF FF 
3174   2659 FF FF FF FF 
3174   265D FF FF FF FF 
3174   2661 FF FF FF FF 
3174   2665 FF FF FF FF 
3174   2669 FF FF FF FF 
3174   266D FF FF FF FF 
3174   2671 FF FF FF FF 
3174   2675 FF FF FF FF 
3174   2679 FF FF FF FF 
3174   267D FF FF FF FF 
3174   2681 FF FF FF FF 
3174   2685 FF FF FF FF 
3174   2689 FF FF FF FF 
3174   268D FF FF FF FF 
3174   2691 FF FF FF FF 
3174   2695 FF FF FF FF 
3174   2699 FF FF FF FF 
3174   269D FF FF FF FF 
3174   26A1 FF FF FF FF 
3174   26A5 FF FF FF FF 
3174   26A9 FF FF FF FF 
3174   26AD FF FF FF FF 
3174   26B1 FF FF FF FF 
3174   26B5 FF FF FF FF 
3174   26B9 FF FF FF FF 
3174   26BD FF FF FF FF 
3174   26C1 FF FF FF FF 
3174   26C5 FF FF FF FF 
3174   26C9 FF FF FF FF 
3174   26CD FF FF FF FF 
3174   26D1 FF FF FF FF 
3174   26D5 FF FF FF FF 
3174   26D9 FF FF FF FF 
3174   26DD FF FF FF FF 
3174   26E1 FF FF FF FF 
3174   26E5 FF FF FF FF 
3174   26E9 FF FF FF FF 
3174   26ED FF FF FF FF 
3174   26F1 FF FF FF FF 
3174   26F5 FF FF FF FF 
3174   26F9 FF FF FF FF 
3174   26FD FF FF FF FF 
3174   2701 FF FF FF FF 
3174   2705 FF FF FF FF 
3174   2709 FF FF FF FF 
3174   270D FF FF FF FF 
3174   2711 FF FF FF FF 
3174   2715 FF FF FF FF 
3174   2719 FF FF FF FF 
3174   271D FF FF FF FF 
3174   2721 FF FF FF FF 
3174   2725 FF FF FF FF 
3174   2729 FF FF FF FF 
3174   272D FF FF FF FF 
3174   2731 FF FF FF FF 
3174   2735 FF FF FF FF 
3174   2739 FF FF FF FF 
3174   273D FF FF FF FF 
3174   2741 FF FF FF FF 
3174   2745 FF FF FF FF 
3174   2749 FF FF FF FF 
3174   274D FF FF FF FF 
3174   2751 FF FF FF FF 
3174   2755 FF FF FF FF 
3174   2759 FF FF FF FF 
3174   275D FF FF FF FF 
3174   2761 FF FF FF FF 
3174   2765 FF FF FF FF 
3174   2769 FF FF FF FF 
3174   276D FF FF FF FF 
3174   2771 FF FF FF FF 
3174   2775 FF FF FF FF 
3174   2779 FF FF FF FF 
3174   277D FF FF FF FF 
3174   2781 FF FF FF FF 
3174   2785 FF FF FF FF 
3174   2789 FF FF FF FF 
3174   278D FF FF FF FF 
3174   2791 FF FF FF FF 
3174   2795 FF FF FF FF 
3174   2799 FF FF FF FF 
3174   279D FF FF FF FF 
3174   27A1 FF FF FF FF 
3174   27A5 FF FF FF FF 
3174   27A9 FF FF FF FF 
3174   27AD FF FF FF FF 
3174   27B1 FF FF FF FF 
3174   27B5 FF FF FF FF 
3174   27B9 FF FF FF FF 
3174   27BD FF FF FF FF 
3174   27C1 FF FF FF FF 
3174   27C5 FF FF FF FF 
3174   27C9 FF FF FF FF 
3174   27CD FF FF FF FF 
3174   27D1 FF FF FF FF 
3174   27D5 FF FF FF FF 
3174   27D9 FF FF FF FF 
3174   27DD FF FF FF FF 
3174   27E1 FF FF FF FF 
3174   27E5 FF FF FF FF 
3174   27E9 FF FF FF FF 
3174   27ED FF FF FF FF 
3174   27F1 FF FF FF FF 
3174   27F5 FF FF FF FF 
3174   27F9 FF FF FF FF 
3174   27FD FF FF FF FF 
3174   2801 FF FF FF FF 
3174   2805 FF FF FF FF 
3174   2809 FF FF FF FF 
3174   280D FF FF FF FF 
3174   2811 FF FF FF FF 
3174   2815 FF FF FF FF 
3174   2819 FF FF FF FF 
3174   281D FF FF FF FF 
3174   2821 FF FF FF FF 
3174   2825 FF FF FF FF 
3174   2829 FF FF FF FF 
3174   282D FF FF FF FF 
3174   2831 FF FF FF FF 
3174   2835 FF FF FF FF 
3174   2839 FF FF FF FF 
3174   283D FF FF FF FF 
3174   2841 FF FF FF FF 
3174   2845 FF FF FF FF 
3174   2849 FF FF FF FF 
3174   284D FF FF FF FF 
3174   2851 FF FF FF FF 
3174   2855 FF FF FF FF 
3174   2859 FF FF FF FF 
3174   285D FF FF FF FF 
3174   2861 FF FF FF FF 
3174   2865 FF FF FF FF 
3174   2869 FF FF FF FF 
3174   286D FF FF FF FF 
3174   2871 FF FF FF FF 
3174   2875 FF FF FF FF 
3174   2879 FF FF FF FF 
3174   287D FF FF FF FF 
3174   2881 FF FF FF FF 
3174   2885 FF FF FF FF 
3174   2889 FF FF FF FF 
3174   288D FF FF FF FF 
3174   2891 FF FF FF FF 
3174   2895 FF FF FF FF 
3174   2899 FF FF FF FF 
3174   289D FF FF FF FF 
3174   28A1 FF FF FF FF 
3174   28A5 FF FF FF FF 
3174   28A9 FF FF FF FF 
3174   28AD FF FF FF FF 
3174   28B1 FF FF FF FF 
3174   28B5 FF FF FF FF 
3174   28B9 FF FF FF FF 
3174   28BD FF FF FF FF 
3174   28C1 FF FF FF FF 
3174   28C5 FF FF FF FF 
3174   28C9 FF FF FF FF 
3174   28CD FF FF FF FF 
3174   28D1 FF FF FF FF 
3174   28D5 FF FF FF FF 
3174   28D9 FF FF FF FF 
3174   28DD FF FF FF FF 
3174   28E1 FF FF FF FF 
3174   28E5 FF FF FF FF 
3174   28E9 FF FF FF FF 
3174   28ED FF FF FF FF 
3174   28F1 FF FF FF FF 
3174   28F5 FF FF FF FF 
3174   28F9 FF FF FF FF 
3174   28FD FF FF FF FF 
3174   2901 FF FF FF FF 
3174   2905 FF FF FF FF 
3174   2909 FF FF FF FF 
3174   290D FF FF FF FF 
3174   2911 FF FF FF FF 
3174   2915 FF FF FF FF 
3174   2919 FF FF FF FF 
3174   291D FF FF FF FF 
3174   2921 FF FF FF FF 
3174   2925 FF FF FF FF 
3174   2929 FF FF FF FF 
3174   292D FF FF FF FF 
3174   2931 FF FF FF FF 
3174   2935 FF FF FF FF 
3174   2939 FF FF FF FF 
3174   293D FF FF FF FF 
3174   2941 FF FF FF FF 
3174   2945 FF FF FF FF 
3174   2949 FF FF FF FF 
3174   294D FF FF FF FF 
3174   2951 FF FF FF FF 
3174   2955 FF FF FF FF 
3174   2959 FF FF FF FF 
3174   295D FF FF FF FF 
3174   2961 FF FF FF FF 
3174   2965 FF FF FF FF 
3174   2969 FF FF FF FF 
3174   296D FF FF FF FF 
3174   2971 FF FF FF FF 
3174   2975 FF FF FF FF 
3174   2979 FF FF FF FF 
3174   297D FF FF FF FF 
3174   2981 FF FF FF FF 
3174   2985 FF FF FF FF 
3174   2989 FF FF FF FF 
3174   298D FF FF FF FF 
3174   2991 FF FF FF FF 
3174   2995 FF FF FF FF 
3174   2999 FF FF FF FF 
3174   299D FF FF FF FF 
3174   29A1 FF FF FF FF 
3174   29A5 FF FF FF FF 
3174   29A9 FF FF FF FF 
3174   29AD FF FF FF FF 
3174   29B1 FF FF FF FF 
3174   29B5 FF FF FF FF 
3174   29B9 FF FF FF FF 
3174   29BD FF FF FF FF 
3174   29C1 FF FF FF FF 
3174   29C5 FF FF FF FF 
3174   29C9 FF FF FF FF 
3174   29CD FF FF FF FF 
3174   29D1 FF FF FF FF 
3174   29D5 FF FF FF FF 
3174   29D9 FF FF FF FF 
3174   29DD FF FF FF FF 
3174   29E1 FF FF FF FF 
3174   29E5 FF FF FF FF 
3174   29E9 FF FF FF FF 
3174   29ED FF FF FF FF 
3174   29F1 FF FF FF FF 
3174   29F5 FF FF FF FF 
3174   29F9 FF FF FF FF 
3174   29FD FF FF FF FF 
3174   2A01 FF FF FF FF 
3174   2A05 FF FF FF FF 
3174   2A09 FF FF FF FF 
3174   2A0D FF FF FF FF 
3174   2A11 FF FF FF FF 
3174   2A15 FF FF FF FF 
3174   2A19 FF FF FF FF 
3174   2A1D FF FF FF FF 
3174   2A21 FF FF FF FF 
3174   2A25 FF FF FF FF 
3174   2A29 FF FF FF FF 
3174   2A2D FF FF FF FF 
3174   2A31 FF FF FF FF 
3174   2A35 FF FF FF FF 
3174   2A39 FF FF FF FF 
3174   2A3D FF FF FF FF 
3174   2A41 FF FF FF FF 
3174   2A45 FF FF FF FF 
3174   2A49 FF FF FF FF 
3174   2A4D FF FF FF FF 
3174   2A51 FF FF FF FF 
3174   2A55 FF FF FF FF 
3174   2A59 FF FF FF FF 
3174   2A5D FF FF FF FF 
3174   2A61 FF FF FF FF 
3174   2A65 FF FF FF FF 
3174   2A69 FF FF FF FF 
3174   2A6D FF FF FF FF 
3174   2A71 FF FF FF FF 
3174   2A75 FF FF FF FF 
3174   2A79 FF FF FF FF 
3174   2A7D FF FF FF FF 
3174   2A81 FF FF FF FF 
3174   2A85 FF FF FF FF 
3174   2A89 FF FF FF FF 
3174   2A8D FF FF FF FF 
3174   2A91 FF FF FF FF 
3174   2A95 FF FF FF FF 
3174   2A99 FF FF FF FF 
3174   2A9D FF FF FF FF 
3174   2AA1 FF FF FF FF 
3174   2AA5 FF FF FF FF 
3174   2AA9 FF FF FF FF 
3174   2AAD FF FF FF FF 
3174   2AB1 FF FF FF FF 
3174   2AB5 FF FF FF FF 
3174   2AB9 FF FF FF FF 
3174   2ABD FF FF FF FF 
3174   2AC1 FF FF FF FF 
3174   2AC5 FF FF FF FF 
3174   2AC9 FF FF FF FF 
3174   2ACD FF FF FF FF 
3174   2AD1 FF FF FF FF 
3174   2AD5 FF FF FF FF 
3174   2AD9 FF FF FF FF 
3174   2ADD FF FF FF FF 
3174   2AE1 FF FF FF FF 
3174   2AE5 FF FF FF FF 
3174   2AE9 FF FF FF FF 
3174   2AED FF FF FF FF 
3174   2AF1 FF FF FF FF 
3174   2AF5 FF FF FF FF 
3174   2AF9 FF FF FF FF 
3174   2AFD FF FF FF FF 
3174   2B01 FF FF FF FF 
3174   2B05 FF FF FF FF 
3174   2B09 FF FF FF FF 
3174   2B0D FF FF FF FF 
3174   2B11 FF FF FF FF 
3174   2B15 FF FF FF FF 
3174   2B19 FF FF FF FF 
3174   2B1D FF FF FF FF 
3174   2B21 FF FF FF FF 
3174   2B25 FF FF FF FF 
3174   2B29 FF FF FF FF 
3174   2B2D FF FF FF FF 
3174   2B31 FF FF FF FF 
3174   2B35 FF FF FF FF 
3174   2B39 FF FF FF FF 
3174   2B3D FF FF FF FF 
3174   2B41 FF FF FF FF 
3174   2B45 FF FF FF FF 
3174   2B49 FF FF FF FF 
3174   2B4D FF FF FF FF 
3174   2B51 FF FF FF FF 
3174   2B55 FF FF FF FF 
3174   2B59 FF FF FF FF 
3174   2B5D FF FF FF FF 
3174   2B61 FF FF FF FF 
3174   2B65 FF FF FF FF 
3174   2B69 FF FF FF FF 
3174   2B6D FF FF FF FF 
3174   2B71 FF FF FF FF 
3174   2B75 FF FF FF FF 
3174   2B79 FF FF FF FF 
3174   2B7D FF FF FF FF 
3174   2B81 FF FF FF FF 
3174   2B85 FF FF FF FF 
3174   2B89 FF FF FF FF 
3174   2B8D FF FF FF FF 
3174   2B91 FF FF FF FF 
3174   2B95 FF FF FF FF 
3174   2B99 FF FF FF FF 
3174   2B9D FF FF FF FF 
3174   2BA1 FF FF FF FF 
3174   2BA5 FF FF FF FF 
3174   2BA9 FF FF FF FF 
3174   2BAD FF FF FF FF 
3174   2BB1 FF FF FF FF 
3174   2BB5 FF FF FF FF 
3174   2BB9 FF FF FF FF 
3174   2BBD FF FF FF FF 
3174   2BC1 FF FF FF FF 
3174   2BC5 FF FF FF FF 
3174   2BC9 FF FF FF FF 
3174   2BCD FF FF FF FF 
3174   2BD1 FF FF FF FF 
3174   2BD5 FF FF FF FF 
3174   2BD9 FF FF FF FF 
3174   2BDD FF FF FF FF 
3174   2BE1 FF FF FF FF 
3174   2BE5 FF FF FF FF 
3174   2BE9 FF FF FF FF 
3174   2BED FF FF FF FF 
3174   2BF1 FF FF FF FF 
3174   2BF5 FF FF FF FF 
3174   2BF9 FF FF FF FF 
3174   2BFD FF FF FF FF 
3174   2C01 FF FF FF FF 
3174   2C05 FF FF FF FF 
3174   2C09 FF FF FF FF 
3174   2C0D FF FF FF FF 
3174   2C11 FF FF FF FF 
3174   2C15 FF FF FF FF 
3174   2C19 FF FF FF FF 
3174   2C1D FF FF FF FF 
3174   2C21 FF FF FF FF 
3174   2C25 FF FF FF FF 
3174   2C29 FF FF FF FF 
3174   2C2D FF FF FF FF 
3174   2C31 FF FF FF FF 
3174   2C35 FF FF FF FF 
3174   2C39 FF FF FF FF 
3174   2C3D FF FF FF FF 
3174   2C41 FF FF FF FF 
3174   2C45 FF FF FF FF 
3174   2C49 FF FF FF FF 
3174   2C4D FF FF FF FF 
3174   2C51 FF FF FF FF 
3174   2C55 FF FF FF FF 
3174   2C59 FF FF FF FF 
3174   2C5D FF FF FF FF 
3174   2C61 FF FF FF FF 
3174   2C65 FF FF FF FF 
3174   2C69 FF FF FF FF 
3174   2C6D FF FF FF FF 
3174   2C71 FF FF FF FF 
3174   2C75 FF FF FF FF 
3174   2C79 FF FF FF FF 
3174   2C7D FF FF FF FF 
3174   2C81 FF FF FF FF 
3174   2C85 FF FF FF FF 
3174   2C89 FF FF FF FF 
3174   2C8D FF FF FF FF 
3174   2C91 FF FF FF FF 
3174   2C95 FF FF FF FF 
3174   2C99 FF FF FF FF 
3174   2C9D FF FF FF FF 
3174   2CA1 FF FF FF FF 
3174   2CA5 FF FF FF FF 
3174   2CA9 FF FF FF FF 
3174   2CAD FF FF FF FF 
3174   2CB1 FF FF FF FF 
3174   2CB5 FF FF FF FF 
3174   2CB9 FF FF FF FF 
3174   2CBD FF FF FF FF 
3174   2CC1 FF FF FF FF 
3174   2CC5 FF FF FF FF 
3174   2CC9 FF FF FF FF 
3174   2CCD FF FF FF FF 
3174   2CD1 FF FF FF FF 
3174   2CD5 FF FF FF FF 
3174   2CD9 FF FF FF FF 
3174   2CDD FF FF FF FF 
3174   2CE1 FF FF FF FF 
3174   2CE5 FF FF FF FF 
3174   2CE9 FF FF FF FF 
3174   2CED FF FF FF FF 
3174   2CF1 FF FF FF FF 
3174   2CF5 FF FF FF FF 
3174   2CF9 FF FF FF FF 
3174   2CFD FF FF FF FF 
3174   2D01 FF FF FF FF 
3174   2D05 FF FF FF FF 
3174   2D09 FF FF FF FF 
3174   2D0D FF FF FF FF 
3174   2D11 FF FF FF FF 
3174   2D15 FF FF FF FF 
3174   2D19 FF FF FF FF 
3174   2D1D FF FF FF FF 
3174   2D21 FF FF FF FF 
3174   2D25 FF FF FF FF 
3174   2D29 FF FF FF FF 
3174   2D2D FF FF FF FF 
3174   2D31 FF FF FF FF 
3174   2D35 FF FF FF FF 
3174   2D39 FF FF FF FF 
3174   2D3D FF FF FF FF 
3174   2D41 FF FF FF FF 
3174   2D45 FF FF FF FF 
3174   2D49 FF FF FF FF 
3174   2D4D FF FF FF FF 
3174   2D51 FF FF FF FF 
3174   2D55 FF FF FF FF 
3174   2D59 FF FF FF FF 
3174   2D5D FF FF FF FF 
3174   2D61 FF FF FF FF 
3174   2D65 FF FF FF FF 
3174   2D69 FF FF FF FF 
3174   2D6D FF FF FF FF 
3174   2D71 FF FF FF FF 
3174   2D75 FF FF FF FF 
3174   2D79 FF FF FF FF 
3174   2D7D FF FF FF FF 
3174   2D81 FF FF FF FF 
3174   2D85 FF FF FF FF 
3174   2D89 FF FF FF FF 
3174   2D8D FF FF FF FF 
3174   2D91 FF FF FF FF 
3174   2D95 FF FF FF FF 
3174   2D99 FF FF FF FF 
3174   2D9D FF FF FF FF 
3174   2DA1 FF FF FF FF 
3174   2DA5 FF FF FF FF 
3174   2DA9 FF FF FF FF 
3174   2DAD FF FF FF FF 
3174   2DB1 FF FF FF FF 
3174   2DB5 FF FF FF FF 
3174   2DB9 FF FF FF FF 
3174   2DBD FF FF FF FF 
3174   2DC1 FF FF FF FF 
3174   2DC5 FF FF FF FF 
3174   2DC9 FF FF FF FF 
3174   2DCD FF FF FF FF 
3174   2DD1 FF FF FF FF 
3174   2DD5 FF FF FF FF 
3174   2DD9 FF FF FF FF 
3174   2DDD FF FF FF FF 
3174   2DE1 FF FF FF FF 
3174   2DE5 FF FF FF FF 
3174   2DE9 FF FF FF FF 
3174   2DED FF FF FF FF 
3174   2DF1 FF FF FF FF 
3174   2DF5 FF FF FF FF 
3174   2DF9 FF FF FF FF 
3174   2DFD FF FF FF FF 
3174   2E01 FF FF FF FF 
3174   2E05 FF FF FF FF 
3174   2E09 FF FF FF FF 
3174   2E0D FF FF FF FF 
3174   2E11 FF FF FF FF 
3174   2E15 FF FF FF FF 
3174   2E19 FF FF FF FF 
3174   2E1D FF FF FF FF 
3174   2E21 FF FF FF FF 
3174   2E25 FF FF FF FF 
3174   2E29 FF FF FF FF 
3174   2E2D FF FF FF FF 
3174   2E31 FF FF FF FF 
3174   2E35 FF FF FF FF 
3174   2E39 FF FF FF FF 
3174   2E3D FF FF FF FF 
3174   2E41 FF FF FF FF 
3174   2E45 FF FF FF FF 
3174   2E49 FF FF FF FF 
3174   2E4D FF FF FF FF 
3174   2E51 FF FF FF FF 
3174   2E55 FF FF FF FF 
3174   2E59 FF FF FF FF 
3174   2E5D FF FF FF FF 
3174   2E61 FF FF FF FF 
3174   2E65 FF FF FF FF 
3174   2E69 FF FF FF FF 
3174   2E6D FF FF FF FF 
3174   2E71 FF FF FF FF 
3174   2E75 FF FF FF FF 
3174   2E79 FF FF FF FF 
3174   2E7D FF FF FF FF 
3174   2E81 FF FF FF FF 
3174   2E85 FF FF FF FF 
3174   2E89 FF FF FF FF 
3174   2E8D FF FF FF FF 
3174   2E91 FF FF FF FF 
3174   2E95 FF FF FF FF 
3174   2E99 FF FF FF FF 
3174   2E9D FF FF FF FF 
3174   2EA1 FF FF FF FF 
3174   2EA5 FF FF FF FF 
3174   2EA9 FF FF FF FF 
3174   2EAD FF FF FF FF 
3174   2EB1 FF FF FF FF 
3174   2EB5 FF FF FF FF 
3174   2EB9 FF FF FF FF 
3174   2EBD FF FF FF FF 
3174   2EC1 FF FF FF FF 
3174   2EC5 FF FF FF FF 
3174   2EC9 FF FF FF FF 
3174   2ECD FF FF FF FF 
3174   2ED1 FF FF FF FF 
3174   2ED5 FF FF FF FF 
3174   2ED9 FF FF FF FF 
3174   2EDD FF FF FF FF 
3174   2EE1 FF FF FF FF 
3174   2EE5 FF FF FF FF 
3174   2EE9 FF FF FF FF 
3174   2EED FF FF FF FF 
3174   2EF1 FF FF FF FF 
3174   2EF5 FF FF FF FF 
3174   2EF9 FF FF FF FF 
3174   2EFD FF FF FF FF 
3174   2F01 FF FF FF FF 
3174   2F05 FF FF FF FF 
3174   2F09 FF FF FF FF 
3174   2F0D FF FF FF FF 
3174   2F11 FF FF FF FF 
3174   2F15 FF FF FF FF 
3174   2F19 FF FF FF FF 
3174   2F1D FF FF FF FF 
3174   2F21 FF FF FF FF 
3174   2F25 FF FF FF FF 
3174   2F29 FF FF FF FF 
3174   2F2D FF FF FF FF 
3174   2F31 FF FF FF FF 
3174   2F35 FF FF FF FF 
3174   2F39 FF FF FF FF 
3174   2F3D FF FF FF FF 
3174   2F41 FF FF FF FF 
3174   2F45 FF FF FF FF 
3174   2F49 FF FF FF FF 
3174   2F4D FF FF FF FF 
3174   2F51 FF FF FF FF 
3174   2F55 FF FF FF FF 
3174   2F59 FF FF FF FF 
3174   2F5D FF FF FF FF 
3174   2F61 FF FF FF FF 
3174   2F65 FF FF FF FF 
3174   2F69 FF FF FF FF 
3174   2F6D FF FF FF FF 
3174   2F71 FF FF FF FF 
3174   2F75 FF FF FF FF 
3174   2F79 FF FF FF FF 
3174   2F7D FF FF FF FF 
3174   2F81 FF FF FF FF 
3174   2F85 FF FF FF FF 
3174   2F89 FF FF FF FF 
3174   2F8D FF FF FF FF 
3174   2F91 FF FF FF FF 
3174   2F95 FF FF FF FF 
3174   2F99 FF FF FF FF 
3174   2F9D FF FF FF FF 
3174   2FA1 FF FF FF FF 
3174   2FA5 FF FF FF FF 
3174   2FA9 FF FF FF FF 
3174   2FAD FF FF FF FF 
3174   2FB1 FF FF FF FF 
3174   2FB5 FF FF FF FF 
3174   2FB9 FF FF FF FF 
3174   2FBD FF FF FF FF 
3174   2FC1 FF FF FF FF 
3174   2FC5 FF FF FF FF 
3174   2FC9 FF FF FF FF 
3174   2FCD FF FF FF FF 
3174   2FD1 FF FF FF FF 
3174   2FD5 FF FF FF FF 
3174   2FD9 FF FF FF FF 
3174   2FDD FF FF FF FF 
3174   2FE1 FF FF FF FF 
3174   2FE5 FF FF FF FF 
3174   2FE9 FF FF FF FF 
3174   2FED FF FF FF FF 
3174   2FF1 FF FF FF FF 
3174   2FF5 FF FF FF FF 
3174   2FF9 FF FF FF FF 
3174   2FFD FF FF FF FF 
3174   3001 FF FF FF FF 
3174   3005 FF FF FF FF 
3174   3009 FF FF FF FF 
3174   300D FF FF FF FF 
3174   3011 FF FF FF FF 
3174   3015 FF FF FF FF 
3174   3019 FF FF FF FF 
3174   301D FF FF FF FF 
3174   3021 FF FF FF FF 
3174   3025 FF FF FF FF 
3174   3029 FF FF FF FF 
3174   302D FF FF FF FF 
3174   3031 FF FF FF FF 
3174   3035 FF FF FF FF 
3174   3039 FF FF FF FF 
3174   303D FF FF FF FF 
3174   3041 FF FF FF FF 
3174   3045 FF FF FF FF 
3174   3049 FF FF FF FF 
3174   304D FF FF FF FF 
3174   3051 FF FF FF FF 
3174   3055 FF FF FF FF 
3174   3059 FF FF FF FF 
3174   305D FF FF FF FF 
3174   3061 FF FF FF FF 
3174   3065 FF FF FF FF 
3174   3069 FF FF FF FF 
3174   306D FF FF FF FF 
3174   3071 FF FF FF FF 
3174   3075 FF FF FF FF 
3174   3079 FF FF FF FF 
3174   307D FF FF FF FF 
3174   3081 FF FF FF FF 
3174   3085 FF FF FF FF 
3174   3089 FF FF FF FF 
3174   308D FF FF FF FF 
3174   3091 FF FF FF FF 
3175   3095             
3176   3095             scrap_sector:
3177   3095 FF FF FF FF   .fill 512         ; scrap sector
3177   3099 FF FF FF FF 
3177   309D FF FF FF FF 
3177   30A1 FF FF FF FF 
3177   30A5 FF FF FF FF 
3177   30A9 FF FF FF FF 
3177   30AD FF FF FF FF 
3177   30B1 FF FF FF FF 
3177   30B5 FF FF FF FF 
3177   30B9 FF FF FF FF 
3177   30BD FF FF FF FF 
3177   30C1 FF FF FF FF 
3177   30C5 FF FF FF FF 
3177   30C9 FF FF FF FF 
3177   30CD FF FF FF FF 
3177   30D1 FF FF FF FF 
3177   30D5 FF FF FF FF 
3177   30D9 FF FF FF FF 
3177   30DD FF FF FF FF 
3177   30E1 FF FF FF FF 
3177   30E5 FF FF FF FF 
3177   30E9 FF FF FF FF 
3177   30ED FF FF FF FF 
3177   30F1 FF FF FF FF 
3177   30F5 FF FF FF FF 
3177   30F9 FF FF FF FF 
3177   30FD FF FF FF FF 
3177   3101 FF FF FF FF 
3177   3105 FF FF FF FF 
3177   3109 FF FF FF FF 
3177   310D FF FF FF FF 
3177   3111 FF FF FF FF 
3177   3115 FF FF FF FF 
3177   3119 FF FF FF FF 
3177   311D FF FF FF FF 
3177   3121 FF FF FF FF 
3177   3125 FF FF FF FF 
3177   3129 FF FF FF FF 
3177   312D FF FF FF FF 
3177   3131 FF FF FF FF 
3177   3135 FF FF FF FF 
3177   3139 FF FF FF FF 
3177   313D FF FF FF FF 
3177   3141 FF FF FF FF 
3177   3145 FF FF FF FF 
3177   3149 FF FF FF FF 
3177   314D FF FF FF FF 
3177   3151 FF FF FF FF 
3177   3155 FF FF FF FF 
3177   3159 FF FF FF FF 
3177   315D FF FF FF FF 
3177   3161 FF FF FF FF 
3177   3165 FF FF FF FF 
3177   3169 FF FF FF FF 
3177   316D FF FF FF FF 
3177   3171 FF FF FF FF 
3177   3175 FF FF FF FF 
3177   3179 FF FF FF FF 
3177   317D FF FF FF FF 
3177   3181 FF FF FF FF 
3177   3185 FF FF FF FF 
3177   3189 FF FF FF FF 
3177   318D FF FF FF FF 
3177   3191 FF FF FF FF 
3177   3195 FF FF FF FF 
3177   3199 FF FF FF FF 
3177   319D FF FF FF FF 
3177   31A1 FF FF FF FF 
3177   31A5 FF FF FF FF 
3177   31A9 FF FF FF FF 
3177   31AD FF FF FF FF 
3177   31B1 FF FF FF FF 
3177   31B5 FF FF FF FF 
3177   31B9 FF FF FF FF 
3177   31BD FF FF FF FF 
3177   31C1 FF FF FF FF 
3177   31C5 FF FF FF FF 
3177   31C9 FF FF FF FF 
3177   31CD FF FF FF FF 
3177   31D1 FF FF FF FF 
3177   31D5 FF FF FF FF 
3177   31D9 FF FF FF FF 
3177   31DD FF FF FF FF 
3177   31E1 FF FF FF FF 
3177   31E5 FF FF FF FF 
3177   31E9 FF FF FF FF 
3177   31ED FF FF FF FF 
3177   31F1 FF FF FF FF 
3177   31F5 FF FF FF FF 
3177   31F9 FF FF FF FF 
3177   31FD FF FF FF FF 
3177   3201 FF FF FF FF 
3177   3205 FF FF FF FF 
3177   3209 FF FF FF FF 
3177   320D FF FF FF FF 
3177   3211 FF FF FF FF 
3177   3215 FF FF FF FF 
3177   3219 FF FF FF FF 
3177   321D FF FF FF FF 
3177   3221 FF FF FF FF 
3177   3225 FF FF FF FF 
3177   3229 FF FF FF FF 
3177   322D FF FF FF FF 
3177   3231 FF FF FF FF 
3177   3235 FF FF FF FF 
3177   3239 FF FF FF FF 
3177   323D FF FF FF FF 
3177   3241 FF FF FF FF 
3177   3245 FF FF FF FF 
3177   3249 FF FF FF FF 
3177   324D FF FF FF FF 
3177   3251 FF FF FF FF 
3177   3255 FF FF FF FF 
3177   3259 FF FF FF FF 
3177   325D FF FF FF FF 
3177   3261 FF FF FF FF 
3177   3265 FF FF FF FF 
3177   3269 FF FF FF FF 
3177   326D FF FF FF FF 
3177   3271 FF FF FF FF 
3177   3275 FF FF FF FF 
3177   3279 FF FF FF FF 
3177   327D FF FF FF FF 
3177   3281 FF FF FF FF 
3177   3285 FF FF FF FF 
3177   3289 FF FF FF FF 
3177   328D FF FF FF FF 
3177   3291 FF FF FF FF 
3178   3295             transient_area:
3179   3295 00            .db 0             ; beginning of the transient memory area. used for disk reads and other purposes    
3180   3296             
3181   3296             .end
tasm: Number of errors = 0
