0001   0000             ; ------------------------------------------------------------------------------------------------------------------;
0002   0000             ; Solarium - Sol-1 Homebrew Minicomputer Operating System Kernel.
0003   0000             ; ------------------------------------------------------------------------------------------------------------------;
0004   0000             
0005   0000             ; memory map
0006   0000             ; ------------------------------------------------------------------------------------------------------------------;
0007   0000             ; 0000 ... 7fff - rom space
0008   0000             ; 8000 ... f7ff - ram space
0009   0000             ; f7ff          - stack root
0010   0000             
0011   0000             ; i/o map
0012   0000             ; ------------------------------------------------------------------------------------------------------------------;
0013   0000             ; ff80 - uart 0 (16550)
0014   0000             ; ff88 - uart 1 (16550)
0015   0000             ; ffa0 - rtc    (m48t02)
0016   0000             ; ffb0 - pio 0  (8255)
0017   0000             ; ffc0 - fdd    (5.25" floppy drive block)
0018   0000             ;   - ffc0      output port (377 flip-flop)                  
0019   0000             ;   - ffc1      input port  (244 buffer)                     
0020   0000             ;   - ffc8      wd1770 status/command    
0021   0000             ;   - ffc9      wd1770 track register
0022   0000             ;   - ffca      wd1770 sector register
0023   0000             ;   - ffcb      wd1770 data register
0024   0000             ;      
0025   0000             ; ffd0 - ide    (compact flash / pata)
0026   0000             ; ffe0 - timer  (8253)
0027   0000             ; fff0 - bios configuration nv-ram store area
0028   0000             ; ------------------------------------------------------------------------------------------------------------------;
0029   0000             
0030   0000             ; ------------------------------------------------------------------------------------------------------------------;
0031   0000             ; system constants
0032   0000             ; ------------------------------------------------------------------------------------------------------------------;
0033   0000             _uart0_data       .equ $ff80         ; data
0034   0000             _uart0_dlab_0     .equ $ff80         ; divisor latch low byte
0035   0000             _uart0_dlab_1     .equ $ff81         ; divisor latch high byte
0036   0000             _uart0_ier        .equ $ff81         ; interrupt enable register
0037   0000             _uart0_fcr        .equ $ff82         ; fifo control register
0038   0000             _uart0_lcr        .equ $ff83         ; line control register
0039   0000             _uart0_lsr        .equ $ff85         ; line status register
0040   0000             
0041   0000             _uart1_data       .equ $ff88         ; data
0042   0000             _uart1_dlab_0     .equ $ff88         ; divisor latch low byte
0043   0000             _uart1_dlab_1     .equ $ff89         ; divisor latch high byte
0044   0000             _uart1_ier        .equ $ff89         ; interrupt enable register
0045   0000             _uart1_fcr        .equ $ff8A         ; fifo control register
0046   0000             _uart1_lcr        .equ $ff8B         ; line control register
0047   0000             _uart1_lsr        .equ $ff8D         ; line status register
0048   0000             
0049   0000             _ide_base         .equ $ffd0         ; ide base
0050   0000             _ide_r0           .equ _ide_base + 0 ; data port
0051   0000             _ide_r1           .equ _ide_base + 1 ; read: error code, write: feature
0052   0000             _ide_r2           .equ _ide_base + 2 ; number of sectors to transfer
0053   0000             _ide_r3           .equ _ide_base + 3 ; sector address lba 0 [0:7]
0054   0000             _ide_r4           .equ _ide_base + 4 ; sector address lba 1 [8:15]
0055   0000             _ide_r5           .equ _ide_base + 5 ; sector address lba 2 [16:23]
0056   0000             _ide_r6           .equ _ide_base + 6 ; sector address lba 3 [24:27 (lsb)]
0057   0000             _ide_r7           .equ _ide_base + 7 ; read: status, write: command       
0058   0000             
0059   0000             _7seg_display     .equ $ffb0         ; bios post code hex display (2 digits) (connected to pio a)
0060   0000             _bios_post_ctrl   .equ $ffb3         ; bios post display control register, 80h = as output
0061   0000             _pio_a            .equ $ffb0    
0062   0000             _pio_b            .equ $ffb1
0063   0000             _pio_c            .equ $ffb2
0064   0000             _pio_control      .equ $ffb3         ; pio control port
0065   0000             
0066   0000             _fdc_config       .equ $ffc0         ; 0 = select_0, 1 = select_1, 2 = side_select, 3 = dden, 4 = in_use_or_head_load, 5 = wd1770_rst
0067   0000             _fdc_status_0     .equ $ffc1         ; 0 = drq, 1 = ready
0068   0000             _fdc_stat_cmd     .equ $ffc8         ; status / command register
0069   0000             _fdc_track        .equ $ffc9         ; track register
0070   0000             _fdc_sector       .equ $ffca         ; sector register
0071   0000             _fdc_data         .equ $ffcb         ; data register
0072   0000             
0073   0000             _timer_c_0        .equ $ffe0         ; timer counter 0
0074   0000             _timer_c_1        .equ $ffe1         ; timer counter 1
0075   0000             _timer_c_2        .equ $ffe2         ; timer counter 2
0076   0000             _timer_ctrl       .equ $ffe3         ; timer control register
0077   0000             
0078   0000             _stack_begin      .equ $f7ff         ; beginning of stack
0079   0000             _fifo_size        .equ 4096
0080   0000             
0081   0000             _mbr              .equ 446
0082   0000             _superblock       .equ 512
0083   0000             
0084   0000             text_org          .equ $400          ; code origin address for all user processes
0085   0000             
0086   0000             
0087   0000             ; ------------------------------------------------------------------------------------------------------------------;
0088   0000             ; DISK LAYOUT:
0089   0000             ; | Metadata               | Size (bytes)    | Blocks (2048 bytes)              |
0090   0000             ; | ---------------------- | --------------- | -------------------------------- |
0091   0000             ; | Bootloader/MBR         | 512 bytes       | 0.25 (1 sector)                  |
0092   0000             ; | Superblock             | 1024 bytes      | 1 block (2048 bytes, must align) |
0093   0000             ; | Block Group Descriptor | \~32 bytes      | 1 block (2048 bytes)             |
0094   0000             ; | Block Bitmap           | 16,384 bytes    | 8 blocks                         |
0095   0000             ; | Inode Bitmap           | 2,048 bytes     | 1 block                          |
0096   0000             ; | Inode Table            | 2,097,152 bytes | 1024 blocks                      |
0097   0000             ; 
0098   0000             ; first 512 bytes: bootloader from 0 to 445, MBR partition table from 446 to 511 (64 bytes)
0099   0000             ; up to 4 partitions, each 16 bytes long
0100   0000             ; MBR:
0101   0000             ; Byte | Description
0102   0000             ; -----|----------------------------
0103   0000             ; 0    | Boot flag (0x80 active, 0x00 inactive)
0104   0000             ; 1-3  | Start CHS (head, sector, cylinder)
0105   0000             ; 4    | Partition type (filesystem ID)
0106   0000             ;   0x83 = Linux native (ext2/3/4)
0107   0000             ;   0x07 = NTFS/exFAT
0108   0000             ;   0x0B = FAT32 CHS
0109   0000             ;   0x0C = FAT32 LBA
0110   0000             ;   0x05 = Extended partition
0111   0000             ; 5-7  | End CHS
0112   0000             ; 8-11 | Start LBA (little endian)
0113   0000             ; 12-15| Size in sectors (little endian)
0114   0000             ; 
0115   0000             ; 
0116   0000             ; SUPERBLOCK:
0117   0000             ; | Field                 | Description                              | Typical Size (bytes) | Notes                           |
0118   0000             ; | --------------------- | ---------------------------------------- | -------------------- | ------------------------------- |
0119   0000             ; | `s_inodes_count`      | Total number of inodes in the filesystem | 4                    | 32-bit unsigned int             |
0120   0000             ; | `s_blocks_count`      | Total number of data blocks              | 4                    | 32-bit unsigned int             |
0121   0000             ; | `s_free_inodes_count` | Number of free inodes                    | 4                    | 32-bit unsigned int             |
0122   0000             ; | `s_free_blocks_count` | Number of free blocks                    | 4                    | 32-bit unsigned int             |
0123   0000             ; | `s_first_data_block`  | Block number of the first data block     | 4                    | 32-bit unsigned int             |
0124   0000             ; | `s_log_block_size`    | Block size = 1024 << `s_log_block_size`  | 4                    | 32-bit unsigned int             |
0125   0000             ; | `s_inode_size`        | Size of each inode (in bytes)            | 2                    | 16-bit unsigned int             |
0126   0000             ; | `s_magic`             | Filesystem signature (`0xEF53`)          | 2                    | 16-bit unsigned int             |
0127   0000             ; | `s_mtime`             | Last mount time                          | 4                    | 32-bit unsigned int (Unix time) |
0128   0000             ; | `s_wtime`             | Last write time                          | 4                    | 32-bit unsigned int (Unix time) |
0129   0000             ; | `s_uuid`              | Unique ID of the filesystem              | 16                   | 128-bit UUID                    |
0130   0000             ; | `s_volume_name`       | Label of the filesystem                  | 16                   | Usually ASCII, padded           |
0131   0000             ; | `s_feature_flags`     | Compatibility flags                      | 4                    | 32-bit unsigned int             |
0132   0000             ; 
0133   0000             ; 
0134   0000             ; inode for root dir is #2, #0 and #1 not used
0135   0000             ; block size: 2048
0136   0000             
0137   0000             ; inode-table format:
0138   0000             ; | Field         | Size (bytes) | Description                                                                                  |
0139   0000             ; | ------------- | ------------ | -------------------------------------------------------------------------------------------- |
0140   0000             ; | `mode`        | 2            | File type and permissions                                                                    |
0141   0000             ; | `uid`         | 2            | Owner user ID                                                                                |
0142   0000             ; | `size`        | 4            | Size of the file in bytes                                                                    |
0143   0000             ; | `atime`       | 4            | Last access time (timestamp)                                                                 |
0144   0000             ; | `ctime`       | 4            | Creation time (timestamp)                                                                    |
0145   0000             ; | `mtime`       | 4            | Last modification time (timestamp)                                                           |
0146   0000             ; | `dtime`       | 4            | Deletion time (timestamp)                                                                    |
0147   0000             ; | `gid`         | 2            | Group ID                                                                                     |
0148   0000             ; | `links_count` | 2            | Number of hard links                                                                         |
0149   0000             ; | `blocks`      | 4            | Number of 512-byte blocks allocated                                                          |
0150   0000             ; | `flags`       | 4            | File flags                                                                                   |
0151   0000             ; | `block`       | 15 x 4 = 60  | Pointers to data blocks (12 direct, 1 single indirect, 1 double indirect, 1 triple indirect) |
0152   0000             
0153   0000             
0154   0000             ; file entry attributes
0155   0000             ; filename (24)
0156   0000             ; attributes (1)       :|0|0|file_type(3bits)|x|w|r|
0157   0000             ; lba (2)              : location of raw data for file entry, or dirid for directory entry
0158   0000             ; size (2)             : filesize
0159   0000             ; day (1)           
0160   0000             ; month (1)
0161   0000             ; year (1)
0162   0000             ; packet size = 32 bytes  : total packet size in bytes
0163   0000             
0164   0000             fst_entry_size      .equ 32  ; bytes
0165   0000             fst_files_per_sect  .equ (512 / fst_entry_size)
0166   0000             fst_files_per_dir   .equ (512 / fst_entry_size)
0167   0000             fst_nbr_directories .equ 64
0168   0000                                 ; 1 sector for header, the rest is for the list of files/dirs
0169   0000             fst_sectors_per_dir .equ (1 + (fst_entry_size * fst_files_per_dir / 512))    
0170   0000             fst_total_sectors   .equ (fst_sectors_per_dir * fst_nbr_directories)
0171   0000             fst_lba_start       .equ 32
0172   0000             fst_lba_end         .equ (fst_lba_start + fst_total_sectors - 1)
0173   0000             
0174   0000             fs_nbr_files        .equ (fst_nbr_directories * fst_files_per_dir)
0175   0000             fs_sectors_per_file .equ 32 ; the first sector is always a header with a null parameter (first byte)
0176   0000                                         ; so that we know which blocks are free or taken
0177   0000             fs_file_size        .equ (fs_sectors_per_file * 512)                  
0178   0000             fs_total_sectors    .equ (fs_nbr_files * fs_sectors_per_file)
0179   0000             fs_lba_start        .equ (fst_lba_end + 1)
0180   0000             fs_lba_end          .equ (fs_lba_start + fs_total_sectors - 1)
0181   0000             
0182   0000             root_id:            .equ fst_lba_start
0183   0000             
0184   0000             ; ------------------------------------------------------------------------------------------------------------------;
0185   0000             ; global system variables
0186   0000             ; ------------------------------------------------------------------------------------------------------------------;
0187   0000             
0188   0000             ; ------------------------------------------------------------------------------------------------------------------;
0189   0000             ; irq table
0190   0000             ; highest priority at lowest address
0191   0000             ; ------------------------------------------------------------------------------------------------------------------;
0192   0000 3C 00       .dw int_0_fdc
0193   0002 3D 00       .dw int_1
0194   0004 3E 00       .dw int_2
0195   0006 3F 00       .dw int_3
0196   0008 40 00       .dw int_4
0197   000A 41 00       .dw int_5_uart1
0198   000C 69 00       .dw int_6_timer
0199   000E 6A 00       .dw int_7_uart0
0200   0010             
0201   0010             ; ------------------------------------------------------------------------------------------------------------------;
0202   0010             ; kernel reset vector
0203   0010             ; ------------------------------------------------------------------------------------------------------------------;
0204   0010 04 12       .dw kernel_reset_vector
0205   0012             
0206   0012             ; ------------------------------------------------------------------------------------------------------------------;
0207   0012             ; exception vector table
0208   0012             ; total of 7 entries, starting at address $0012
0209   0012             ; ------------------------------------------------------------------------------------------------------------------;
0210   0012 79 04       .dw trap_privilege
0211   0014 96 05       .dw trap_div_zero
0212   0016 A3 05       .dw trap_undef_opcode
0213   0018 00 00       .dw 0
0214   001A 00 00       .dw 0
0215   001C 00 00       .dw 0
0216   001E 00 00       .dw 0
0217   0020             
0218   0020             ; ------------------------------------------------------------------------------------------------------------------;
0219   0020             ; system call vector table
0220   0020             ; starts at address $0020
0221   0020             ; ------------------------------------------------------------------------------------------------------------------;
0222   0020 85 04       .dw syscall_break
0223   0022 A4 05       .dw syscall_rtc
0224   0024 C7 06       .dw syscall_ide
0225   0026 87 07       .dw syscall_io
0226   0028 84 08       .dw syscall_file_system
0227   002A 51 11       .dw syscall_create_proc
0228   002C 3E 04       .dw syscall_list_procs
0229   002E D6 05       .dw syscall_datetime
0230   0030 FA 03       .dw syscall_reboot
0231   0032 1B 11       .dw syscall_pause_proc
0232   0034 06 04       .dw syscall_resume_proc
0233   0036 D8 10       .dw syscall_terminate_proc
0234   0038 C6 03       .dw syscall_system
0235   003A 05 01       .dw syscall_fdc
0236   003C             
0237   003C             ; ------------------------------------------------------------------------------------------------------------------;
0238   003C             ; system call aliases
0239   003C             ; ------------------------------------------------------------------------------------------------------------------;
0240   003C             sys_break            .equ 0
0241   003C             sys_rtc              .equ 1
0242   003C             sys_ide              .equ 2
0243   003C             sys_io               .equ 3
0244   003C             sys_filesystem       .equ 4
0245   003C             sys_create_proc      .equ 5
0246   003C             sys_list_proc        .equ 6
0247   003C             sys_datetime         .equ 7
0248   003C             sys_reboot           .equ 8
0249   003C             sys_pause_proc       .equ 9
0250   003C             sys_resume_proc      .equ 10
0251   003C             sys_terminate_proc   .equ 11
0252   003C             sys_system           .equ 12
0253   003C             sys_fdc              .equ 13
0254   003C             
0255   003C             ; aliases for individual 'al' options for FDC system calls
0256   003C             fdc_al_restore      .equ 0
0257   003C             fdc_al_step         .equ 1
0258   003C             fdc_al_step_in      .equ 2
0259   003C             fdc_al_step_out     .equ 3
0260   003C             fdc_al_seek         .equ 4
0261   003C             fdc_al_format_128   .equ 5
0262   003C             fdc_al_formatdisk_128   .equ 6
0263   003C             fdc_al_format_512   .equ 7
0264   003C             fdc_al_formatdisk_512   .equ 8
0265   003C             fdc_al_read_addr    .equ 9
0266   003C             fdc_al_read_track   .equ 10
0267   003C             fdc_al_read_sect    .equ 11
0268   003C             fdc_al_write_sect   .equ 12
0269   003C             fdc_al_force_int    .equ 13
0270   003C             fdc_al_status0      .equ 14
0271   003C             fdc_al_status1      .equ 15
0272   003C             
0273   003C             ; ------------------------------------------------------------------------------------------------------------------;
0274   003C             ; alias exports
0275   003C             ; ------------------------------------------------------------------------------------------------------------------;
0276   003C             .export text_org
0277   003C             .export sys_break
0278   003C             .export sys_rtc
0279   003C             .export sys_ide
0280   003C             .export sys_io
0281   003C             .export sys_filesystem
0282   003C             .export sys_create_proc
0283   003C             .export sys_list_proc
0284   003C             .export sys_datetime
0285   003C             .export sys_reboot
0286   003C             .export sys_pause_proc
0287   003C             .export sys_resume_proc
0288   003C             .export sys_terminate_proc
0289   003C             .export sys_system
0290   003C             .export sys_fdc
0291   003C             
0292   003C             .export _7seg_display
0293   003C             
0294   003C             .export _fdc_config        
0295   003C             .export _fdc_status_0      
0296   003C             .export _fdc_stat_cmd     
0297   003C             
0298   003C             ; exports of aliases for individual 'al' options for FDC system calls
0299   003C             .export fdc_al_restore
0300   003C             .export fdc_al_step
0301   003C             .export fdc_al_step_in
0302   003C             .export fdc_al_step_out
0303   003C             .export fdc_al_seek
0304   003C             .export fdc_al_format_128
0305   003C             .export fdc_al_formatdisk_128
0306   003C             .export fdc_al_format_512
0307   003C             .export fdc_al_formatdisk_512
0308   003C             .export fdc_al_read_addr
0309   003C             .export fdc_al_read_track
0310   003C             .export fdc_al_read_sect
0311   003C             .export fdc_al_write_sect
0312   003C             .export fdc_al_force_int
0313   003C             .export fdc_al_status0
0314   003C             .export fdc_al_status1
0315   003C             
0316   003C             ; ------------------------------------------------------------------------------------------------------------------;
0317   003C             ; irqs' code block
0318   003C             ; ------------------------------------------------------------------------------------------------------------------;
0319   003C             ; 5.25" floppy drive controller irq
0320   003C             int_0_fdc:
0321   003C 06            sysret
0322   003D             int_1:
0323   003D 06            sysret
0324   003E             int_2:
0325   003E 06            sysret
0326   003F             int_3:
0327   003F 06            sysret
0328   0040             int_4:
0329   0040 06            sysret
0330   0041             
0331   0041             ; ------------------------------------------------------------------------------------------------------------------;
0332   0041             ; uart1 interrupt
0333   0041             ; ------------------------------------------------------------------------------------------------------------------;
0334   0041             int_5_uart1:
0335   0041 D7            push a
0336   0042 DA            push d
0337   0043 E1            pushf
0338   0044 1D 88 FF      mov al, [_uart1_data]       ; get character
0339   0047 B9 03         cmp al, $03                 ; ctrl-c
0340   0049 C6 92 00      je ctrlc
0341   004C B9 1A         cmp al, $1a                 ; ctrl-z
0342   004E C6 98 00      je ctrlz
0343   0051               ;mov [[d]], al              ; TODO: implement this double indirection instruction
0344   0051 3B 9B 19      mov d, fifo_in
0345   0054 FD 2A         mov d, [d]
0346   0056 3E            mov [d], al                 ; add to fifo
0347   0057 13            mov a, d
0348   0058 77            inc a
0349   0059 AF A2 31      cmp a, fifo + _fifo_size     ; check if pointer reached the end of the fifo
0350   005C C7 62 00      jne int_5_continue
0351   005F 10 A2 21      mov a, fifo  
0352   0062             int_5_continue:  
0353   0062 42 9B 19      mov [fifo_in], a            ; update fifo pointer
0354   0065 EE            popf
0355   0066 E7            pop d
0356   0067 E4            pop a  
0357   0068 06            sysret
0358   0069             
0359   0069             ; ------------------------------------------------------------------------------------------------------------------;
0360   0069             ; timer irq
0361   0069             ; ------------------------------------------------------------------------------------------------------------------;
0362   0069             int_6_timer:  
0363   0069 06            sysret
0364   006A             
0365   006A             ; ------------------------------------------------------------------------------------------------------------------;
0366   006A             ; uart0 interrupt
0367   006A             ; ------------------------------------------------------------------------------------------------------------------;
0368   006A             int_7_uart0:
0369   006A D7            push a
0370   006B DA            push d
0371   006C E1            pushf
0372   006D 1D 80 FF      mov al, [_uart0_data]       ; get character
0373   0070 B9 03         cmp al, $03                 ; ctrl-c
0374   0072 C6 92 00      je ctrlc
0375   0075 B9 1A         cmp al, $1a                 ; ctrl-z
0376   0077 C6 98 00      je ctrlz
0377   007A               ;mov [[d]], al              ; TODO: implement this double indirection instruction
0378   007A 3B 9B 19      mov d, fifo_in
0379   007D FD 2A         mov d, [d]
0380   007F 3E            mov [d], al                 ; add to fifo
0381   0080 13            mov a, d
0382   0081 77            inc a
0383   0082 AF A2 31      cmp a, fifo + _fifo_size     ; check if pointer reached the end of the fifo
0384   0085 C7 8B 00      jne int_7_continue
0385   0088 10 A2 21      mov a, fifo  
0386   008B             int_7_continue:  
0387   008B 42 9B 19      mov [fifo_in], a            ; update fifo pointer
0388   008E EE            popf
0389   008F E7            pop d
0390   0090 E4            pop a  
0391   0091 06            sysret
0392   0092             ctrlc:
0393   0092 51 05 00      add sp, 5
0394   0095 0A D8 10      jmp syscall_terminate_proc
0395   0098             ctrlz:
0396   0098 51 05 00      add sp, 5
0397   009B 0A 1B 11      jmp syscall_pause_proc      ; pause current process and go back to the shell
0398   009E             
0399   009E             ; ------------------------------------------------------------------------------------------------------------------;
0400   009E             ; ext2 file system
0401   009E             ; ------------------------------------------------------------------------------------------------------------------;
0402   009E             sys_mkfs:
0403   009E             ; master boot record
0404   009E F2 BE 01 80   mov byte[_mbr], $80
0405   00A2 B8 BF 01 00   mov word[_mbr + 1], $0000
0405   00A6 00 
0406   00A7 F2 C1 01 00   mov byte[_mbr + 3], $00
0407   00AB F2 C2 01 83   mov byte[_mbr + 4], $83  ; ext2
0408   00AF B8 C3 01 00   mov word[_mbr + 5], $0000   ;end CHS
0408   00B3 00 
0409   00B4 F2 C5 01 00   mov byte[_mbr + 7], $00    
0410   00B8 B8 C6 01 01   mov word[_mbr + 8], 1       ; start LBA of kernel
0410   00BC 00 
0411   00BD B8 C8 01 00   mov word[_mbr + 10], $0000
0411   00C1 00 
0412   00C2 B8 CA 01 00   mov word[_mbr + 12], $0000       ; size = 65536 sectors = 32MB
0412   00C6 00 
0413   00C7 B8 CB 01 01   mov word[_mbr + 13], $0001
0413   00CB 00 
0414   00CC             
0415   00CC             ; superblock
0416   00CC B8 00 02 00   mov word[_superblock], 2048
0416   00D0 00 
0417   00D1 B8 02 02 00   mov word[_superblock + 2], $0000
0417   00D5 00 
0418   00D6 B8 04 02 00   mov word[_superblock + 4], $2800
0418   00DA 00 
0419   00DB B8 06 02 00   mov word[_superblock + 6], $0000
0419   00DF 00 
0420   00E0             
0421   00E0             ; --- MBR signature ---
0422   00E0 B8 FE 01 55   mov word [510], $AA55          ; Must be present for BIOS to boot
0422   00E4 00 
0423   00E5             
0424   00E5             
0425   00E5             ; ------------------------------------------------------------------------------------------------------------------;
0426   00E5             ; floppy drive syscalls
0427   00E5             ; ------------------------------------------------------------------------------------------------------------------;
0428   00E5             ; data for formatting a floppy drive in single density mode (128 bytes per sector):
0429   00E5             ; fdc_40_ff:
0430   00E5             ;   .fill 40,  $ff    ; or 00                                                                                
0431   00E5             ; fdc_128_format_inner:
0432   00E5             ;   .fill 6,   $00    ;                                                                            <--|        
0433   00E5             ;   .fill 1,   $fe    ; id address mark                                                               |        
0434   00E5             ;   .fill 1,   $00    ; track number  0 thru 39                                                       |                    
0435   00E5             ;   .fill 1,   $00    ; side number 00 or 01                                                          |                
0436   00E5             ;   .fill 1,   $01    ; sector number  0x01 through 0x10                                              |                              
0437   00E5             ;   .fill 1,   $00    ; sector length                                                                 |                        
0438   00E5             ;   .fill 1,   $f7    ; 2 crc's written                                                               | write 16 times                 
0439   00E5             ;   .fill 11,  $ff    ; or 00                                                                         |                      
0440   00E5             ;   .fill 6,   $00    ;                                                                               |                        
0441   00E5             ;   .fill 1,   $fb    ; data address mark                                                             |                                  
0442   00E5             ;   .fill 128, $e5    ; data (ibm uses e5)                                                            |                                      
0443   00E5             ;   .fill 1,   $f7    ; 2 crc's written                                                               |                                                        
0444   00E5             ;   .fill 10,  $ff    ; or 00                                                                      <--|                                                  
0445   00E5             ; fdc_128_format_end:
0446   00E5             ;   .fill 369, $ff    ; or 00. continue writing until wd1770 interrupts out. approx 369 bytes.                                                                
0447   00E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448   00E5             fdc_jmptbl:
0449   00E5 11 01         .dw syscall_fdc_restore
0450   00E7 1D 01         .dw syscall_fdc_step
0451   00E9 25 01         .dw syscall_fdc_step_in
0452   00EB 2D 01         .dw syscall_fdc_step_out
0453   00ED 35 01         .dw syscall_fdc_seek
0454   00EF 43 01         .dw syscall_fdc_format_128
0455   00F1 97 01         .dw syscall_fdc_formatdisk_128
0456   00F3 6D 01         .dw syscall_fdc_format_512
0457   00F5 D9 01         .dw syscall_fdc_formatdisk_512
0458   00F7 41 01         .dw syscall_fdc_read_addr
0459   00F9 1B 02         .dw syscall_fdc_read_track
0460   00FB 4A 02         .dw syscall_fdc_read_sect
0461   00FD 82 02         .dw syscall_fdc_write_sect
0462   00FF 42 01         .dw syscall_fdc_force_int
0463   0101 09 01         .dw syscall_fdc_status0
0464   0103 0D 01         .dw syscall_fdc_status1
0465   0105             syscall_fdc:
0466   0105 FD 0A E5 00   jmp [fdc_jmptbl + al]
0467   0109             
0468   0109             syscall_fdc_status0:
0469   0109 1D C1 FF      mov al, [_fdc_status_0]
0470   010C 06            sysret
0471   010D             
0472   010D             syscall_fdc_status1:
0473   010D 1D C8 FF      mov al, [_fdc_stat_cmd]
0474   0110 06            sysret
0475   0111             
0476   0111             syscall_fdc_restore:
0477   0111 07 B3 02      call fdc_wait_not_busy
0478   0114 F2 C8 FF 0B   mov byte [_fdc_stat_cmd], %00001011
0479   0118 F2 C9 FF 00   mov byte [_fdc_track], $00 ; reset track
0480   011C 06            sysret
0481   011D             
0482   011D             syscall_fdc_step:
0483   011D 07 B3 02      call fdc_wait_not_busy
0484   0120 F2 C8 FF 3B   mov byte [_fdc_stat_cmd], %00111011
0485   0124 06            sysret
0486   0125             
0487   0125             syscall_fdc_step_in:
0488   0125 07 B3 02      call fdc_wait_not_busy
0489   0128 F2 C8 FF 53   mov byte [_fdc_stat_cmd], %01010011
0490   012C 06            sysret
0491   012D             
0492   012D             syscall_fdc_step_out:
0493   012D 07 B3 02      call fdc_wait_not_busy
0494   0130 F2 C8 FF 7B   mov byte [_fdc_stat_cmd], %01111011
0495   0134 06            sysret
0496   0135             
0497   0135             ; bl: desired track
0498   0135             syscall_fdc_seek:
0499   0135 07 B3 02      call fdc_wait_not_busy
0500   0138 FD 3D CB FF   mov [_fdc_data], bl ; set desired track to bl
0501   013C F2 C8 FF 1B   mov byte [_fdc_stat_cmd], %00011011 ; seek command
0502   0140 06            sysret
0503   0141             
0504   0141             syscall_fdc_read_addr:
0505   0141 06            sysret
0506   0142             
0507   0142             syscall_fdc_force_int:
0508   0142 06            sysret
0509   0143             
0510   0143             ; when writing the actual code for formatting multiple tracks, remember to change the track number byte
0511   0143             ; in the ram formatting block because they are all set as 00 right now
0512   0143             ; bl: track number
0513   0143             syscall_fdc_format_128:
0514   0143 07 BE 02      call fdc_format_mem_128
0515   0146 07 B3 02      call fdc_wait_not_busy
0516   0149 FD 3D C9 FF   mov [_fdc_track], bl
0517   014D FD 4D A2 33   mov si, transient_area
0518   0151 F2 C8 FF FA   mov byte [_fdc_stat_cmd], %11111010 ; write track command: {1111, 0: enable spin-up seq, 1: settling delay, 1: no write precompensation, 0}
0519   0155 07 94 03      call fdc_wait_64us
0520   0158             fdc_format_drq_128:
0521   0158 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0522   015B 93 01         test al, $01                ; 4
0523   015D C6 6C 01      jz fdc_format_end_128           ; 8
0524   0160 93 02         test al, $02                ; 4
0525   0162 C6 58 01      jz fdc_format_drq_128           ; 8
0526   0165 F6            lodsb                       ; 7
0527   0166 3D CB FF      mov [_fdc_data], al         ; 10   
0528   0169 0A 58 01      jmp fdc_format_drq_128
0529   016C             fdc_format_end_128:
0530   016C 06            sysret
0531   016D             
0532   016D             ; when writing the actual code for formatting multiple tracks, remember to change the track number byte
0533   016D             ; in the ram formatting block because they are all set as 00 right now
0534   016D             ; bl: track number
0535   016D             syscall_fdc_format_512:
0536   016D 07 29 03      call fdc_format_mem_512
0537   0170 07 B3 02      call fdc_wait_not_busy
0538   0173 FD 3D C9 FF   mov [_fdc_track], bl
0539   0177 FD 4D A2 33   mov si, transient_area
0540   017B F2 C8 FF FA   mov byte [_fdc_stat_cmd], %11111010 ; write track command: {1111, 0: enable spin-up seq, 1: settling delay, 1: no write precompensation, 0}
0541   017F 07 94 03      call fdc_wait_64us
0542   0182             fdc_format_drq_512:
0543   0182 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0544   0185 93 01         test al, $01                ; 4
0545   0187 C6 96 01      jz fdc_format_end_512           ; 8
0546   018A 93 02         test al, $02                ; 4
0547   018C C6 82 01      jz fdc_format_drq_512           ; 8
0548   018F F6            lodsb                       ; 7
0549   0190 3D CB FF      mov [_fdc_data], al         ; 10   
0550   0193 0A 82 01      jmp fdc_format_drq_512
0551   0196             fdc_format_end_512:
0552   0196 06            sysret
0553   0197             
0554   0197             syscall_fdc_formatdisk_128:
0555   0197 2E 00         mov bl, 0
0556   0199             fdc_formatdisk128_l0:
0557   0199 07 BE 02      call fdc_format_mem_128
0558   019C 07 B3 02      call fdc_wait_not_busy
0559   019F FD 3D C9 FF   mov [_fdc_track], bl
0560   01A3 FD 4D A2 33   mov si, transient_area
0561   01A7 F2 C8 FF FA   mov byte [_fdc_stat_cmd], %11111010 ; write track command
0562   01AB 07 94 03      call fdc_wait_64us
0563   01AE             fdc_formatdisk_drq_128:
0564   01AE 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0565   01B1 93 01         test al, $01                ; 4
0566   01B3 C6 C2 01      jz fdc_formatdisk_end_128           ; 8
0567   01B6 93 02         test al, $02                ; 4
0568   01B8 C6 AE 01      jz fdc_formatdisk_drq_128           ; 8
0569   01BB F6            lodsb                       ; 7
0570   01BC 3D CB FF      mov [_fdc_data], al         ; 10   
0571   01BF 0A AE 01      jmp fdc_formatdisk_drq_128
0572   01C2             fdc_formatdisk_end_128:
0573   01C2 07 B3 02      call fdc_wait_not_busy
0574   01C5 D8            push b
0575   01C6 26 08 00      mov b, 8
0576   01C9 07 9B 03      call wait_xs
0577   01CC F2 C8 FF 53   mov byte [_fdc_stat_cmd], %01010011  ; step in
0578   01D0 E5            pop b
0579   01D1 6C 01         add bl, 1
0580   01D3 C1 28         cmp bl, 40
0581   01D5 C7 99 01      jne fdc_formatdisk128_l0
0582   01D8 06            sysret
0583   01D9             
0584   01D9             syscall_fdc_formatdisk_512:
0585   01D9 2E 00         mov bl, 0
0586   01DB             fdc_formatdisk512_l0:
0587   01DB 07 29 03      call fdc_format_mem_512
0588   01DE 07 B3 02      call fdc_wait_not_busy
0589   01E1 FD 3D C9 FF   mov [_fdc_track], bl
0590   01E5 FD 4D A2 33   mov si, transient_area
0591   01E9 F2 C8 FF F2   mov byte [_fdc_stat_cmd], %11110010 ; write track command
0592   01ED 07 94 03      call fdc_wait_64us
0593   01F0             fdc_formatdisk_drq_512:
0594   01F0 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0595   01F3 93 01         test al, $01                ; 4
0596   01F5 C6 04 02      jz fdc_formatdisk_end_512           ; 8
0597   01F8 93 02         test al, $02                ; 4
0598   01FA C6 F0 01      jz fdc_formatdisk_drq_512           ; 8
0599   01FD F6            lodsb                       ; 7
0600   01FE 3D CB FF      mov [_fdc_data], al         ; 10   
0601   0201 0A F0 01      jmp fdc_formatdisk_drq_512
0602   0204             fdc_formatdisk_end_512:
0603   0204 07 B3 02      call fdc_wait_not_busy
0604   0207 D8            push b
0605   0208 26 08 00      mov b, 8
0606   020B 07 9B 03      call wait_xs
0607   020E F2 C8 FF 53   mov byte [_fdc_stat_cmd], %01010011   ; step in
0608   0212 E5            pop b
0609   0213 6C 01         add bl, 1
0610   0215 C1 28         cmp bl, 40
0611   0217 C7 DB 01      jne fdc_formatdisk512_l0
0612   021A 06            sysret
0613   021B             
0614   021B             ; di : destination in user space
0615   021B             ; a  : returns number of read bytes
0616   021B             syscall_fdc_read_track:
0617   021B 07 B3 02      call fdc_wait_not_busy
0618   021E E3            push di
0619   021F FD 4F A2 33   mov di, transient_area
0620   0223 F2 C8 FF E8   mov byte [_fdc_stat_cmd], %11101000
0621   0227 07 94 03      call fdc_wait_64us
0622   022A             fdc_read_track_l0: ; for each byte, we need to wait for drq to be high
0623   022A 1D C8 FF      mov al, [_fdc_stat_cmd]      ; 
0624   022D 93 01         test al, $01                ; check busy bit
0625   022F C6 3E 02      jz fdc_read_track_end
0626   0232 93 02         test al, $02                ; check drq bit
0627   0234 C6 2A 02      jz fdc_read_track_l0
0628   0237 1D CB FF      mov al, [_fdc_data]     ; 
0629   023A F7            stosb
0630   023B 0A 2A 02      jmp fdc_read_track_l0
0631   023E             ;we need to check if writing to data reg causes a spurious read. so lets check inside the writing loop, how many times we actually write the bytes
0632   023E             ;say the 40 byte loop. if we find that we only write ~20 times, then this indcates this problem.
0633   023E             ;because for every write, if it also reads, then that clears drq, so we need to wait for next drq.
0634   023E             fdc_read_track_end:
0635   023E 50            mov a, di
0636   023F 5F A2 33      sub a, transient_area
0637   0242 F0            pop di
0638   0243 FD 4D A2 33   mov si, transient_area
0639   0247 39            mov c, a  ; copy track over to user space
0640   0248 03            store
0641   0249 06            sysret
0642   024A             
0643   024A             ; sector in bl
0644   024A             ; track in bh
0645   024A             ; di = user space destination
0646   024A             syscall_fdc_read_sect:
0647   024A 07 B3 02      call fdc_wait_not_busy
0648   024D E3            push di
0649   024E FD 3D CA FF   mov [_fdc_sector], bl
0650   0252 30            mov bl, bh
0651   0253 FD 3D C9 FF   mov [_fdc_track], bl
0652   0257 F2 C8 FF 88   mov byte [_fdc_stat_cmd], %10001000
0653   025B 07 94 03      call fdc_wait_64us
0654   025E FD 4F A2 33   mov di, transient_area
0655   0262             fdc_read_sect_l0: ; for each byte, we need to wait for drq to be high
0656   0262 1D C8 FF      mov al, [_fdc_stat_cmd]      ; read lost data flag 10+3+5+8+5+8
0657   0265 93 01         test al, $01                ; check drq bit
0658   0267 C6 76 02      jz fdc_read_sect_end
0659   026A 93 02         test al, $02                ; check drq bit
0660   026C C6 62 02      jz fdc_read_sect_l0
0661   026F 1D CB FF      mov al, [_fdc_data]     ; 
0662   0272 F7            stosb
0663   0273 0A 62 02      jmp fdc_read_sect_l0
0664   0276             fdc_read_sect_end:
0665   0276 50            mov a, di
0666   0277 5F A2 33      sub a, transient_area
0667   027A F0            pop di
0668   027B FD 4D A2 33   mov si, transient_area
0669   027F 39            mov c, a  ; copy sector over to user space
0670   0280 03            store
0671   0281 06            sysret
0672   0282             
0673   0282             ; sector size in c
0674   0282             ; sector in bl
0675   0282             ; track in bh
0676   0282             ; data pointer in si
0677   0282             syscall_fdc_write_sect:
0678   0282 07 B3 02      call fdc_wait_not_busy
0679   0285 FD 3D CA FF   mov [_fdc_sector], bl
0680   0289 30            mov bl, bh
0681   028A FD 3D C9 FF   mov [_fdc_track], bl
0682   028E FD 4F A2 33   mov di, transient_area    ; si = data source, di = destination 
0683   0292 04            load                    ; transfer data to kernel space!
0684   0293 FD 4D A2 33   mov si, transient_area
0685   0297 F2 C8 FF AA   mov byte [_fdc_stat_cmd], %10101010            ; 101, 0:single sector, 1: disable spinup, 0: no delay, 1: no precomp, 0: normal data mark
0686   029B 07 94 03      call fdc_wait_64us
0687   029E             fdc_write_sect_l0: ; for each byte, we need to wait for drq to be high
0688   029E 1D C8 FF      mov al, [_fdc_stat_cmd]         ; 10
0689   02A1 93 01         test al, $01                    ; 4
0690   02A3 C6 B2 02      jz fdc_write_sect_end           ; 8
0691   02A6 93 02         test al, $02                    ; 4
0692   02A8 C6 9E 02      jz fdc_write_sect_l0            ; 8
0693   02AB F6            lodsb                           ; 7
0694   02AC 3D CB FF      mov [_fdc_data], al             ; 10   
0695   02AF 0A 9E 02      jmp fdc_write_sect_l0
0696   02B2             fdc_write_sect_end:
0697   02B2 06            sysret
0698   02B3             
0699   02B3             fdc_wait_not_busy:
0700   02B3 DB            push al
0701   02B4             fdc_wait_not_busy_l0:
0702   02B4 1D C8 FF      mov al, [_fdc_stat_cmd]   
0703   02B7 93 01         test al, $01               
0704   02B9 C7 B4 02      jnz fdc_wait_not_busy_l0          
0705   02BC E8            pop al
0706   02BD 09            ret
0707   02BE             
0708   02BE             ; track number in bl
0709   02BE             fdc_format_mem_128:
0710   02BE 3B 01 00      mov d, 1
0711   02C1 FD 4F A2 33   mov di, transient_area
0712   02C5             ; 40 * FF
0713   02C5 38 28 00      mov c, 40
0714   02C8 19 FF         mov al, $ff
0715   02CA             fdc_l0: 
0716   02CA F7            stosb
0717   02CB 7E            dec c
0718   02CC C7 CA 02      jnz fdc_l0
0719   02CF             ; 6 * 00
0720   02CF             fdc_inner_loop:
0721   02CF 38 06 00      mov c, 6
0722   02D2 19 00         mov al, $00
0723   02D4             fdc_l1:
0724   02D4 F7            stosb
0725   02D5 7E            dec c
0726   02D6 C7 D4 02      jnz fdc_l1
0727   02D9             ; FE address mark
0728   02D9             fdc_l2:
0729   02D9 19 FE         mov al, $fe
0730   02DB F7            stosb
0731   02DC             ; track number
0732   02DC             fdc_l3:
0733   02DC 1B            mov al, bl  ; track number in bl
0734   02DD F7            stosb
0735   02DE             ; side number
0736   02DE             fdc_l4:
0737   02DE 19 00         mov al, $00
0738   02E0 F7            stosb
0739   02E1             ; sector number
0740   02E1             fdc_l5:
0741   02E1 13            mov a, d
0742   02E2 F7            stosb
0743   02E3             ; sector length 128 bytes
0744   02E3             fdc_l6:
0745   02E3 19 00         mov al, $00
0746   02E5 F7            stosb
0747   02E6             ; 2 crc's
0748   02E6             fdc_l7:
0749   02E6 19 F7         mov al, $f7
0750   02E8 F7            stosb
0751   02E9             ; 11 times $ff
0752   02E9 38 0B 00      mov c, 11
0753   02EC 19 FF         mov al, $ff
0754   02EE             fdc_l8:
0755   02EE F7            stosb
0756   02EF 7E            dec c
0757   02F0 C7 EE 02      jnz fdc_l8
0758   02F3             ; 6 times 00
0759   02F3 38 06 00      mov c, 6
0760   02F6 19 00         mov al, $00
0761   02F8             fdc_l9:
0762   02F8 F7            stosb
0763   02F9 7E            dec c
0764   02FA C7 F8 02      jnz fdc_l9
0765   02FD             ; FB data address mark
0766   02FD 19 FB         mov al, $fb
0767   02FF             fdc_l10:
0768   02FF F7            stosb
0769   0300             ; 128 bytes sector data
0770   0300 38 80 00      mov c, 128
0771   0303 19 E5         mov al, $E5
0772   0305             fdc_l11:
0773   0305 F7            stosb
0774   0306 7E            dec c
0775   0307 C7 05 03      jnz fdc_l11
0776   030A             ; 2 crc's
0777   030A             fdc_l12:
0778   030A 19 F7         mov al, $f7
0779   030C F7            stosb
0780   030D             ; 10 * $FF
0781   030D 38 0A 00      mov c, 10
0782   0310 19 FF         mov al, $ff
0783   0312             fdc_l13:
0784   0312 F7            stosb
0785   0313 7E            dec c
0786   0314 C7 12 03      jnz fdc_l13
0787   0317             ; check whether we did this 16 times
0788   0317 79            inc d
0789   0318 C5 11 00      cmp d, 17
0790   031B C7 CF 02      jne fdc_inner_loop
0791   031E             ; 500 bytes of FF for end filler. wd1770 writes these until it finishes, so the number varies. usually it writes ~450 bytes
0792   031E 38 F4 01      mov c, 500
0793   0321 19 FF         mov al, $ff
0794   0323             fdc_format_footer:
0795   0323             fdc_footer_drq_loop:
0796   0323 F7            stosb
0797   0324 7E            dec c
0798   0325 C7 23 03      jnz fdc_footer_drq_loop
0799   0328 09            ret
0800   0329             
0801   0329             ; track number in bl
0802   0329             fdc_format_mem_512:
0803   0329 3B 01 00      mov d, 1
0804   032C FD 4F A2 33   mov di, transient_area
0805   0330             ; 40 * FF
0806   0330 38 28 00      mov c, 40
0807   0333 19 FF         mov al, $ff
0808   0335             fdc_512_l0: 
0809   0335 F7            stosb
0810   0336 7E            dec c
0811   0337 C7 35 03      jnz fdc_512_l0
0812   033A             ; 6 * 00
0813   033A             fdc_512_inner_loop:
0814   033A 38 06 00      mov c, 6
0815   033D 19 00         mov al, $00
0816   033F             fdc_512_l1:
0817   033F F7            stosb
0818   0340 7E            dec c
0819   0341 C7 3F 03      jnz fdc_512_l1
0820   0344             ; FE address mark
0821   0344             fdc_512_l2:
0822   0344 19 FE         mov al, $fe
0823   0346 F7            stosb
0824   0347             ; track number
0825   0347             fdc_512_l3:
0826   0347 1B            mov al, bl ; track number was in bl
0827   0348 F7            stosb
0828   0349             ; side number
0829   0349             fdc_512_l4:
0830   0349 19 00         mov al, $00
0831   034B F7            stosb
0832   034C             ; sector number
0833   034C             fdc_512_l5:
0834   034C 13            mov a, d
0835   034D F7            stosb
0836   034E             ; sector length 512 bytes
0837   034E             fdc_512_l6:
0838   034E 19 02         mov al, $02
0839   0350 F7            stosb
0840   0351             ; 2 crc's
0841   0351             fdc_512_l7:
0842   0351 19 F7         mov al, $f7
0843   0353 F7            stosb
0844   0354             ; 11 times $ff
0845   0354 38 0B 00      mov c, 11
0846   0357 19 FF         mov al, $ff
0847   0359             fdc_512_l8:
0848   0359 F7            stosb
0849   035A 7E            dec c
0850   035B C7 59 03      jnz fdc_512_l8
0851   035E             ; 6 times 00
0852   035E 38 06 00      mov c, 6
0853   0361 19 00         mov al, $00
0854   0363             fdc_512_l9:
0855   0363 F7            stosb
0856   0364 7E            dec c
0857   0365 C7 63 03      jnz fdc_512_l9
0858   0368             ; FB data address mark
0859   0368 19 FB         mov al, $fb
0860   036A             fdc_512_l10:
0861   036A F7            stosb
0862   036B             ; 128 bytes sector data
0863   036B 38 00 02      mov c, 512
0864   036E 19 E5         mov al, $E5
0865   0370             fdc_512_l11:
0866   0370 F7            stosb
0867   0371 7E            dec c
0868   0372 C7 70 03      jnz fdc_512_l11
0869   0375             ; 2 crc's
0870   0375             fdc_512_l12:
0871   0375 19 F7         mov al, $f7
0872   0377 F7            stosb
0873   0378             ; 10 * $FF
0874   0378 38 0A 00      mov c, 10
0875   037B 19 FF         mov al, $ff
0876   037D             fdc_512_l13:
0877   037D F7            stosb
0878   037E 7E            dec c
0879   037F C7 7D 03      jnz fdc_512_l13
0880   0382             ; check whether we did this 16 times
0881   0382 79            inc d
0882   0383 C5 06 00      cmp d, 6
0883   0386 C7 3A 03      jne fdc_512_inner_loop
0884   0389             ; 500 bytes of FF for end filler. wd1770 writes these until it finishes, so the number varies. usually it writes ~450 bytes
0885   0389 38 F4 01      mov c, 500
0886   038C 19 FF         mov al, $ff
0887   038E             fdc_512_format_footer:
0888   038E             fdc_512_footer_drq_loop:
0889   038E F7            stosb
0890   038F 7E            dec c
0891   0390 C7 8E 03      jnz fdc_512_footer_drq_loop
0892   0393 09            ret
0893   0394             
0894   0394             ; fetch is 2 cycles long when 'display_reg_load' is false.
0895   0394             ; 64us amounts to 160 cycles of the 2.5mhz clock
0896   0394             ; call u16 is 14 cycles long
0897   0394             ; 160 - 5 - 14 = 
0898   0394             fdc_wait_64us:
0899   0394 3A 0D         mov cl, 13                       ; 5 cycles
0900   0396             fdc_wait_64_loop:
0901   0396 81            dec cl                           ; 3 cycles
0902   0397 C7 96 03      jnz fdc_wait_64_loop             ; 8 cycles
0903   039A 09            ret
0904   039B             
0905   039B             ; number of seconds in b
0906   039B             wait_xs:
0907   039B C0 00 00      cmp b, 0
0908   039E C6 A9 03      je wait_xs_end
0909   03A1 07 AA 03      call wait_1s
0910   03A4 FD 7D         dec b
0911   03A6 0A 9B 03      jmp wait_xs
0912   03A9             wait_xs_end:
0913   03A9 09            ret
0914   03AA             
0915   03AA             wait_1s:
0916   03AA DB            push al
0917   03AB D9            push c
0918   03AC 19 03         mov al, 3
0919   03AE             wait_1s_l0:
0920   03AE 38 FF FF      mov c, 65535                       
0921   03B1             wait_1s_l1:
0922   03B1 7E            dec c        ; 4
0923   03B2 C7 B1 03      jnz wait_1s_l1   ; 8
0924   03B5 80            dec al
0925   03B6 C7 AE 03      jnz wait_1s_l0
0926   03B9 E6            pop c
0927   03BA E8            pop al
0928   03BB 09            ret
0929   03BC             
0930   03BC             ; ------------------------------------------------------------------------------------------------------------------;
0931   03BC             ; system syscalls
0932   03BC             ; ------------------------------------------------------------------------------------------------------------------;
0933   03BC             system_jmptbl:
0934   03BC F2 03         .dw system_uname
0935   03BE F9 03         .dw system_whoami
0936   03C0 CC 03         .dw system_poke
0937   03C2 CF 03         .dw system_bootloader_install
0938   03C4 CA 03         .dw system_peek
0939   03C6             syscall_system:
0940   03C6 FD 0A BC 03   jmp [system_jmptbl + al]
0941   03CA             
0942   03CA             ; param register address in register d
0943   03CA             ; param value in register bl
0944   03CA             system_peek:
0945   03CA 32            mov bl, [d]
0946   03CB 06            sysret
0947   03CC             
0948   03CC             ; param register address in register d
0949   03CC             ; param value in register bl
0950   03CC             system_poke:
0951   03CC FD 3E         mov [d], bl
0952   03CE 06            sysret
0953   03CF             
0954   03CF             ; kernel LBA address in 'b'
0955   03CF             system_bootloader_install:
0956   03CF D8            push b
0957   03D0 26 00 00      mov b, 0
0958   03D3 38 00 00      mov c, 0
0959   03D6 22 01         mov ah, $01                 ; 1 sector
0960   03D8 3B A2 33      mov d, transient_area
0961   03DB 07 F6 06      call ide_read_sect          ; read sector
0962   03DE E5            pop b
0963   03DF FD 44 FE 01   mov [d + 510], b            ; update LBA address
0964   03E3 26 00 00      mov b, 0
0965   03E6 38 00 00      mov c, 0
0966   03E9 22 01         mov ah, $01                 ; 1 sector
0967   03EB 3B A2 33      mov d, transient_area
0968   03EE 07 1C 07      call ide_write_sect         ; write sector
0969   03F1 06            sysret
0970   03F2             
0971   03F2             system_uname:
0972   03F2 3B AC 19      mov d, s_uname
0973   03F5 07 60 14      call _puts
0974   03F8 06            sysret
0975   03F9             
0976   03F9             system_whoami:
0977   03F9 06            sysret
0978   03FA             
0979   03FA             ; reboot system
0980   03FA             syscall_reboot:
0981   03FA FD D7 FF FF   push word $ffff 
0982   03FE FD DB 00      push byte %00000000             ; dma_ack = 0, interrupts disabled, mode = supervisor, paging = off, halt=0, display_reg_load=0, dir=0
0983   0401 FD D7 C0 01   push word bios_reset_vector     ; and then push reset vector of the shell to the stack
0984   0405 06            sysret
0985   0406             
0986   0406             ;------------------------------------------------------------------------------------------------------;;
0987   0406             ; switch to another process
0988   0406             ; inputs:
0989   0406             ; al = new process number
0990   0406             ;------------------------------------------------------------------------------------------------------;;
0991   0406             syscall_resume_proc:
0992   0406 FD 78         mov g, a                            ; save the process number
0993   0408 4B            pusha                               ; save all registers into kernel stack
0994   0409 22 00         mov ah, 0
0995   040B 1D 96 19      mov al, [active_proc_index]
0996   040E FD 99         shl a              ; x2
0997   0410 B7 CE 11      mov a, [proc_table_convert + a]     ; get process state start index
0998   0413 4F            mov di, a
0999   0414 48            mov a, sp
1000   0415 77            inc a
1001   0416 4D            mov si, a
1002   0417 38 14 00      mov c, 20
1003   041A FD F5         rep movsb                           ; save process state!
1004   041C             ; restore kernel stack position to point before interrupt arrived
1005   041C 51 14 00      add sp, 20
1006   041F             ; now load the new process number!
1007   041F FD 12         mov a, g                            ; retrieve the process number argument that was saved in the beginning
1008   0421 3D 96 19      mov [active_proc_index], al         ; set new active proc
1009   0424             ; calculate lut entry for next process
1010   0424 22 00         mov ah, 0
1011   0426 FD 99         shl a                               ; x2
1012   0428 B7 CE 11      mov a, [proc_table_convert + a]     ; get process state start index  
1013   042B 4D            mov si, a                           ; source is proc state block
1014   042C 48            mov a, sp
1015   042D 5F 13 00      sub a, 19
1016   0430 4F            mov di, a                           ; destination is kernel stack
1017   0431             ; restore sp
1018   0431 7D            dec a
1019   0432 47            mov sp, a
1020   0433 38 14 00      mov c, 20
1021   0436 FD F5         rep movsb
1022   0438             ; set vm process
1023   0438 1D 96 19      mov al, [active_proc_index]
1024   043B 01            setptb
1025   043C 4C            popa
1026   043D 06            sysret
1027   043E             
1028   043E             ;------------------------------------------------------------------------------------------------------;;
1029   043E             ; list processes
1030   043E             ;------------------------------------------------------------------------------------------------------;;
1031   043E             syscall_list_procs:
1032   043E 3B CD 19      mov d, s_ps_header
1033   0441 07 60 14      call _puts
1034   0444 3B 13 1D      mov d, proc_availab_table + 1
1035   0447 38 01 00      mov c, 1
1036   044A             list_procs_l0:  
1037   044A BD 01         cmp byte[d], 1
1038   044C C7 70 04      jne list_procs_next
1039   044F 2D            mov b, d
1040   0450 61 12 1D      sub b, proc_availab_table
1041   0453 FD 9F 05      shl b, 5
1042   0456 DA            push d
1043   0457 D8            push b
1044   0458 28            mov b, c
1045   0459 07 00 15      call print_u8x
1046   045C 22 20         mov ah, ' '
1047   045E 07 34 13      call _putchar
1048   0461 07 34 13      call _putchar
1049   0464 E5            pop b
1050   0465 74            mov d, b
1051   0466 58 22 1D      add d, proc_names
1052   0469 07 60 14      call _puts
1053   046C 07 0D 14      call printnl
1054   046F E7            pop d
1055   0470             list_procs_next:
1056   0470 79            inc d
1057   0471 78            inc c
1058   0472 C2 09 00      cmp c, 9
1059   0475 C7 4A 04      jne list_procs_l0
1060   0478             list_procs_end:
1061   0478 06            sysret
1062   0479             
1063   0479             ; ------------------------------------------------------------------------------------------------------------------;
1064   0479             ; exceptions code block
1065   0479             ; ------------------------------------------------------------------------------------------------------------------;
1066   0479             ; privilege exception
1067   0479             ; ------------------------------------------------------------------------------------------------------------------;
1068   0479             trap_privilege:
1069   0479 0A FA 03      jmp syscall_reboot
1070   047C DA            push d
1071   047D 3B C3 1A      mov d, s_priviledge
1072   0480 07 60 14      call _puts
1073   0483 E7            pop d
1074   0484 06            sysret
1075   0485             
1076   0485             ; ------------------------------------------------------------------------------------------------------------------;
1077   0485             ; breakpoint
1078   0485             ; important: values in the stack are being pushed in big endian. i.e.: msb at low address
1079   0485             ; and lsb at high address. *** need to correct this in the microcode and make it little endian again ***
1080   0485             ; ------------------------------------------------------------------------------------------------------------------;
1081   0485             syscall_break:
1082   0485 4B            pusha
1083   0486             syscall_break_prompt:
1084   0486 3B 40 05      mov d, s_break1
1085   0489 07 60 14      call _puts
1086   048C 07 0D 14      call printnl
1087   048F 07 62 15      call scan_u16d
1088   0492 AF 00 00      cmp a, 0
1089   0495 C6 A0 04      je syscall_break_regs
1090   0498 AF 01 00      cmp a, 1
1091   049B C6 C3 04      je syscall_break_mem
1092   049E             syscall_break_end:  
1093   049E 4C            popa
1094   049F 06            sysret
1095   04A0             syscall_break_regs:
1096   04A0 48            mov a, sp
1097   04A1 53 0E 00      add a, 14               ; back-track 7 registers
1098   04A4 3C            mov d, a
1099   04A5 3A 07         mov cl, 7
1100   04A7             syscall_regs_l0:
1101   04A7 2A            mov b, [d]
1102   04A8 FD AB         swp b
1103   04AA 07 BC 14      call print_u16x         ; print register value
1104   04AD 07 0D 14      call printnl
1105   04B0 63 02 00      sub d, 2
1106   04B3 71 01         sub cl, 1
1107   04B5 C3 00         cmp cl, 0
1108   04B7 C7 A7 04      jne syscall_regs_l0
1109   04BA 0A 86 04      jmp syscall_break_prompt
1110   04BD 07 0D 14      call printnl
1111   04C0 0A 86 04      jmp syscall_break_prompt
1112   04C3             syscall_break_mem:
1113   04C3 07 0D 14      call printnl
1114   04C6 07 DE 14      call scan_u16x
1115   04C9 4D            mov si, a               ; data source from user space
1116   04CA FD 4F A2 31   mov di, scrap_sector    ; destination in kernel space
1117   04CE 38 00 02      mov c, 512
1118   04D1 04            load                    ; transfer data to kernel space!
1119   04D2 3B A2 31      mov d, scrap_sector     ; dump pointer in d
1120   04D5 38 00 00      mov c, 0
1121   04D8             dump_loop:
1122   04D8 84            mov al, cl
1123   04D9 87 0F         and al, $0f
1124   04DB C6 29 05      jz print_base
1125   04DE             back:
1126   04DE 1E            mov al, [d]             ; read byte
1127   04DF 2F            mov bl, al
1128   04E0 07 00 15      call print_u8x
1129   04E3 10 00 20      mov a, $2000
1130   04E6 05 03         syscall sys_io          ; space
1131   04E8 84            mov al, cl
1132   04E9 87 0F         and al, $0f
1133   04EB B9 0F         cmp al, $0f
1134   04ED C6 FE 04      je print_ascii
1135   04F0             back1:
1136   04F0 79            inc d
1137   04F1 78            inc c
1138   04F2 C2 00 02      cmp c, 512
1139   04F5 C7 D8 04      jne dump_loop
1140   04F8 07 0D 14      call printnl
1141   04FB 0A 86 04      jmp syscall_break_prompt  ; go to syscall_break return point
1142   04FE             print_ascii:
1143   04FE 10 00 20      mov a, $2000
1144   0501 05 03         syscall sys_io
1145   0503 63 10 00      sub d, 16
1146   0506 26 10 00      mov b, 16
1147   0509             print_ascii_l:
1148   0509 79            inc d
1149   050A 1E            mov al, [d]               ; read byte
1150   050B B9 20         cmp al, $20
1151   050D C8 15 05      jlu dot
1152   0510 B9 7E         cmp al, $7e
1153   0512 D0 1D 05      jleu ascii
1154   0515             dot:
1155   0515 10 00 2E      mov a, $2e00
1156   0518 05 03         syscall sys_io
1157   051A 0A 22 05      jmp ascii_continue
1158   051D             ascii:
1159   051D 23            mov ah, al
1160   051E 19 00         mov al, 0
1161   0520 05 03         syscall sys_io
1162   0522             ascii_continue:
1163   0522 FD A9 09 05   loopb print_ascii_l
1164   0526 0A F0 04      jmp back1
1165   0529             print_base:
1166   0529 07 0D 14      call printnl
1167   052C 2D            mov b, d
1168   052D 61 A2 31      sub b, scrap_sector      ; remove this later and fix address bases which display incorrectly
1169   0530 07 BC 14      call print_u16x          ; display row
1170   0533 10 00 3A      mov a, $3a00
1171   0536 05 03         syscall sys_io
1172   0538 10 00 20      mov a, $2000
1173   053B 05 03         syscall sys_io
1174   053D 0A DE 04      jmp back
1175   0540             
1176   0540             s_break1:  
1177   0540 0A 64 65 62   .db "\ndebugger entry point.\n"
1177   0544 75 67 67 65 
1177   0548 72 20 65 6E 
1177   054C 74 72 79 20 
1177   0550 70 6F 69 6E 
1177   0554 74 2E 0A 
1178   0557 30 2E 20 73   .db "0. show registers\n"
1178   055B 68 6F 77 20 
1178   055F 72 65 67 69 
1178   0563 73 74 65 72 
1178   0567 73 0A 
1179   0569 31 2E 20 73   .db "1. show 512b ram block\n"
1179   056D 68 6F 77 20 
1179   0571 35 31 32 62 
1179   0575 20 72 61 6D 
1179   0579 20 62 6C 6F 
1179   057D 63 6B 0A 
1180   0580 32 2E 20 63   .db "2. continue execution", 0
1180   0584 6F 6E 74 69 
1180   0588 6E 75 65 20 
1180   058C 65 78 65 63 
1180   0590 75 74 69 6F 
1180   0594 6E 00 
1181   0596             
1182   0596             ; ------------------------------------------------------------------------------------------------------------------;
1183   0596             ; divide by zero exception
1184   0596             ; ------------------------------------------------------------------------------------------------------------------;
1185   0596             trap_div_zero:
1186   0596 D7            push a
1187   0597 DA            push d
1188   0598 E1            pushf
1189   0599 3B DA 1A      mov d, s_divzero
1190   059C 07 60 14      call _puts
1191   059F EE            popf
1192   05A0 E7            pop d
1193   05A1 E4            pop a
1194   05A2 06            sysret ; enable interrupts
1195   05A3             
1196   05A3             ; ------------------------------------------------------------------------------------------------------------------;
1197   05A3             ; undefined opcode exception
1198   05A3             ; ------------------------------------------------------------------------------------------------------------------;
1199   05A3             trap_undef_opcode:
1200   05A3 06            sysret
1201   05A4             
1202   05A4             ; ------------------------------------------------------------------------------------------------------------------;
1203   05A4             ; real-time clock services syscall
1204   05A4             ; rtc i/o bank = ffa0 to ffaf
1205   05A4             ; ffa0 to ffa7 is scratch ram
1206   05A4             ; control register at $ffa8 [ w | r | s | cal4..cal0 ]
1207   05A4             ; al = 0..6 -> get
1208   05A4             ; al = 7..d -> set
1209   05A4             ; ------------------------------------------------------------------------------------------------------------------;
1210   05A4             syscall_rtc:
1211   05A4 DB            push al
1212   05A5 DA            push d
1213   05A6 B9 06         cmp al, 6
1214   05A8 D1 BD 05      jgu syscall_rtc_set
1215   05AB             syscall_rtc_get:
1216   05AB 6A A9         add al, $a9             ; generate rtc address to get to address a9 of clock
1217   05AD 22 FF         mov ah, $ff    
1218   05AF 3C            mov d, a                ; get to ffa9 + offset
1219   05B0 F2 A8 FF 40   mov byte[$ffa8], $40    ; set r bit to 1
1220   05B4 1E            mov al, [d]             ; get data
1221   05B5 F2 A8 FF 00   mov byte[$ffa8], 0      ; reset r bit
1222   05B9 23            mov ah, al
1223   05BA E7            pop d
1224   05BB E8            pop al
1225   05BC 06            sysret
1226   05BD             syscall_rtc_set:
1227   05BD DD            push bl
1228   05BE 99            mov bl, ah              ; set data aside
1229   05BF 6A A2         add al, $a2             ; generate rtc address to get to address a9 of clock
1230   05C1 22 FF         mov ah, $ff    
1231   05C3 3C            mov d, a                ; get to ffa9 + offset
1232   05C4 1B            mov al, bl              ; get data back
1233   05C5 F2 A8 FF 80   mov byte[$ffa8], $80    ; set w bit to 1
1234   05C9 3E            mov [d], al             ; set data
1235   05CA F2 A8 FF 00   mov byte[$ffa8], 0      ; reset write bit
1236   05CE EA            pop bl
1237   05CF E7            pop d
1238   05D0 E8            pop al
1239   05D1 06            sysret
1240   05D2             
1241   05D2             datetime_serv_tbl:
1242   05D2 DA 05         .dw print_date
1243   05D4 4E 06         .dw set_date
1244   05D6             syscall_datetime:
1245   05D6 FD 0A D2 05   jmp [datetime_serv_tbl + al]      
1246   05DA             print_date:
1247   05DA 10 00 0D      mov a, $0d00           ; print carriage return char
1248   05DD 19 03         mov al, 3
1249   05DF 05 01         syscall sys_rtc        ; get week
1250   05E1 1A            mov al, ah
1251   05E2 22 00         mov ah, 0
1252   05E4 FD 9D 02      shl a, 2          
1253   05E7 3B 64 1B      mov d, s_week
1254   05EA 59            add d, a
1255   05EB 07 60 14      call _puts
1256   05EE 10 00 20      mov a, $2000
1257   05F1 05 03         syscall sys_io         ; display ' '
1258   05F3 19 04         mov al, 4
1259   05F5 05 01         syscall sys_rtc        ; get day
1260   05F7 99            mov bl, ah
1261   05F8 07 00 15      call print_u8x
1262   05FB 10 00 20      mov a, $2000
1263   05FE 05 03         syscall sys_io         ; display ' '
1264   0600             ; there is a problem with the month displaying
1265   0600             ; the month is stored as bcd. so when retrieving the month, the value will be in binary
1266   0600             ; even though it is to be understood as bcd.
1267   0600             ; when retrieving the value and adding the string table address offset the value will go overboard!  
1268   0600 19 05         mov al, 05
1269   0602 05 01         syscall sys_rtc        ; get month
1270   0604 1A            mov al, ah
1271   0605 22 00         mov ah, 0
1272   0607 FD 9D 02      shl a, 2          
1273   060A 3B 30 1B      mov d, s_months
1274   060D 59            add d, a
1275   060E 07 60 14      call _puts
1276   0611 10 00 20      mov a, $2000
1277   0614 05 03         syscall sys_io         ; display ' '
1278   0616 2E 20         mov bl, $20
1279   0618 07 00 15      call print_u8x         ; print 20 for year prefix
1280   061B 19 06         mov al, 06
1281   061D 05 01         syscall sys_rtc        ; get year
1282   061F 99            mov bl, ah
1283   0620 07 00 15      call print_u8x
1284   0623 10 00 20      mov a, $2000  
1285   0626 05 03         syscall sys_io         ; display ' '
1286   0628 19 02         mov al, 2
1287   062A 05 01         syscall sys_rtc        ; get hours
1288   062C 99            mov bl, ah
1289   062D 07 00 15      call print_u8x
1290   0630 10 00 3A      mov a, $3a00    
1291   0633 05 03         syscall sys_io         ; display ':'
1292   0635 19 01         mov al, 01
1293   0637 05 01         syscall sys_rtc        ; get minutes
1294   0639 99            mov bl, ah
1295   063A 07 00 15      call print_u8x
1296   063D 10 00 3A      mov a, $3a00  
1297   0640 05 03         syscall sys_io         ; display ':'
1298   0642 19 00         mov al, 0
1299   0644 05 01         syscall sys_rtc        ; get seconds
1300   0646 99            mov bl, ah
1301   0647 07 00 15      call print_u8x
1302   064A 07 0D 14      call printnl
1303   064D 06            sysret
1304   064E             set_date:
1305   064E 3B F5 1A      mov d, s_set_year
1306   0651 07 60 14      call _puts
1307   0654 07 4B 15      call scan_u8x          ; read integer into a
1308   0657 FD 9D 08      shl a, 8               ; only al used, move to ah
1309   065A 19 0D         mov al, 0dh            ; set rtc year
1310   065C 05 01         syscall sys_rtc        ; set rtc
1311   065E 3B FC 1A      mov d, s_set_month
1312   0661 07 60 14      call _puts
1313   0664 07 4B 15      call scan_u8x          ; read integer into a
1314   0667 FD 9D 08      shl a, 8               ; only al used, move to ah
1315   066A 19 0C         mov al, 0ch            ; set rtc month
1316   066C 05 01         syscall sys_rtc        ; set rtc
1317   066E 3B 04 1B      mov d, s_set_day
1318   0671 07 60 14      call _puts
1319   0674 07 4B 15      call scan_u8x          ; read integer into a
1320   0677 FD 9D 08      shl a, 8               ; only al used, move to ah
1321   067A 19 0B         mov al, 0bh            ; set rtc month
1322   067C 05 01         syscall sys_rtc        ; set rtc
1323   067E 3B 0A 1B      mov d, s_set_week
1324   0681 07 60 14      call _puts
1325   0684 07 4B 15      call scan_u8x          ; read integer into a
1326   0687 FD 9D 08      shl a, 8               ; only al used, move to ah
1327   068A 19 0A         mov al, 0ah            ; set rtc month
1328   068C 05 01         syscall sys_rtc        ; set rtc
1329   068E 3B 14 1B      mov d, s_set_hours
1330   0691 07 60 14      call _puts
1331   0694 07 4B 15      call scan_u8x          ; read integer into a
1332   0697 FD 9D 08      shl a, 8               ; only al used, move to ah
1333   069A 19 09         mov al, 09h            ; set rtc month
1334   069C 05 01         syscall sys_rtc        ; set rtc
1335   069E 3B 1C 1B      mov d, s_set_minutes
1336   06A1 07 60 14      call _puts
1337   06A4 07 4B 15      call scan_u8x          ; read integer into a
1338   06A7 FD 9D 08      shl a, 8               ; only al used, move to ah
1339   06AA 19 08         mov al, 08h            ; set rtc month
1340   06AC 05 01         syscall sys_rtc        ; set rtc
1341   06AE 3B 26 1B      mov d, s_set_seconds
1342   06B1 07 60 14      call _puts
1343   06B4 07 4B 15      call scan_u8x          ; read integer into a
1344   06B7 FD 9D 08      shl a, 8               ; only al used, move to ah
1345   06BA 19 07         mov al, 07h            ; set rtc month
1346   06BC 05 01         syscall sys_rtc        ; set rtc
1347   06BE 06            sysret
1348   06BF             
1349   06BF             ; ------------------------------------------------------------------------------------------------------------------;
1350   06BF             ; ide services syscall
1351   06BF             ; al = option
1352   06BF             ; 0 = ide reset, 1 = ide sleep, 2 = read sector, 3 = write sector
1353   06BF             ; ide read/write sector
1354   06BF             ; 512 bytes
1355   06BF             ; user buffer pointer in d
1356   06BF             ; ah = number of sectors
1357   06BF             ; cb = lba bytes 3..0
1358   06BF             ; ------------------------------------------------------------------------------------------------------------------;
1359   06BF             ide_serv_tbl:
1360   06BF CB 06         .dw ide_reset
1361   06C1 DF 06         .dw ide_sleep
1362   06C3 EE 06         .dw ide_read_sect_wrapper
1363   06C5 F2 06         .dw ide_write_sect_wrapper
1364   06C7             syscall_ide:
1365   06C7 FD 0A BF 06   jmp [ide_serv_tbl + al]    
1366   06CB             
1367   06CB             ide_reset:      
1368   06CB F2 D7 FF 04   mov byte[_ide_r7], 4            ; reset ide
1369   06CF 07 78 07      call ide_wait                   ; wait for ide ready             
1370   06D2 F2 D6 FF E0   mov byte[_ide_r6], $e0          ; lba3= 0, master, mode= lba        
1371   06D6 F2 D1 FF 01   mov byte[_ide_r1], 1            ; 8-bit transfers      
1372   06DA F2 D7 FF EF   mov byte[_ide_r7], $ef          ; set feature command
1373   06DE 06            sysret
1374   06DF             ide_sleep:
1375   06DF 07 78 07      call ide_wait                   ; wait for ide ready             
1376   06E2 F2 D6 FF 40   mov byte [_ide_r6], %01000000   ; lba[3:0](reserved), bit 6=1
1377   06E6 F2 D7 FF E6   mov byte [_ide_r7], $e6         ; sleep command
1378   06EA 07 78 07      call ide_wait                   ; wait for ide ready
1379   06ED 06            sysret
1380   06EE             ide_read_sect_wrapper:
1381   06EE 07 F6 06      call ide_read_sect
1382   06F1 06            sysret
1383   06F2             ide_write_sect_wrapper:
1384   06F2 07 1C 07      call ide_write_sect
1385   06F5 06            sysret
1386   06F6             ide_read_sect:
1387   06F6 1A            mov al, ah
1388   06F7 24            mov ah, bl
1389   06F8 42 D2 FF      mov [_ide_r2], a                ; number of sectors (0..255)
1390   06FB 1C            mov al, bh
1391   06FC 3D D4 FF      mov [_ide_r4], al
1392   06FF 12            mov a, c
1393   0700 3D D5 FF      mov [_ide_r5], al
1394   0703 1A            mov al, ah
1395   0704 87 0F         and al, %00001111
1396   0706 8B E0         or al, %11100000                ; mode lba, master
1397   0708 3D D6 FF      mov [_ide_r6], al
1398   070B             ide_read_sect_wait:
1399   070B 1D D7 FF      mov al, [_ide_r7]  
1400   070E 87 80         and al, $80                     ; busy flag
1401   0710 C7 0B 07      jnz ide_read_sect_wait
1402   0713 19 20         mov al, $20
1403   0715 3D D7 FF      mov [_ide_r7], al               ; read sector cmd
1404   0718 07 42 07      call ide_read  
1405   071B 09            ret
1406   071C             ide_write_sect:
1407   071C 1A            mov al, ah
1408   071D 24            mov ah, bl
1409   071E 42 D2 FF      mov [_ide_r2], a                ; number of sectors (0..255)
1410   0721 1C            mov al, bh
1411   0722 3D D4 FF      mov [_ide_r4], al
1412   0725 12            mov a, c
1413   0726 3D D5 FF      mov [_ide_r5], al
1414   0729 1A            mov al, ah
1415   072A 87 0F         and al, %00001111
1416   072C 8B E0         or al, %11100000                ; mode lba, master
1417   072E 3D D6 FF      mov [_ide_r6], al
1418   0731             ide_write_sect_wait:
1419   0731 1D D7 FF      mov al, [_ide_r7]  
1420   0734 87 80         and al, $80                     ; busy flag
1421   0736 C7 31 07      jnz ide_write_sect_wait
1422   0739 19 30         mov al, $30
1423   073B 3D D7 FF      mov [_ide_r7], al               ; write sector cmd
1424   073E 07 5D 07      call ide_write      
1425   0741 09            ret
1426   0742             
1427   0742             ;----------------------------------------------------------------------------------------------------;
1428   0742             ; read ide data
1429   0742             ; pointer in d
1430   0742             ;----------------------------------------------------------------------------------------------------;
1431   0742             ide_read:
1432   0742 DA            push d
1433   0743             ide_read_loop:
1434   0743 1D D7 FF      mov al, [_ide_r7]  
1435   0746 87 80         and al, 80h                     ; busy flag
1436   0748 C7 43 07      jnz ide_read_loop               ; wait loop
1437   074B 1D D7 FF      mov al, [_ide_r7]
1438   074E 87 08         and al, %00001000               ; drq flag
1439   0750 C6 5B 07      jz ide_read_end
1440   0753 1D D0 FF      mov al, [_ide_r0]
1441   0756 3E            mov [d], al
1442   0757 79            inc d
1443   0758 0A 43 07      jmp ide_read_loop
1444   075B             ide_read_end:
1445   075B E7            pop d
1446   075C 09            ret
1447   075D             
1448   075D             ;----------------------------------------------------------------------------------------------------;
1449   075D             ; write ide data
1450   075D             ; data pointer in d
1451   075D             ;----------------------------------------------------------------------------------------------------;
1452   075D             ide_write:
1453   075D DA            push d
1454   075E             ide_write_loop:
1455   075E 1D D7 FF      mov al, [_ide_r7]  
1456   0761 87 80         and al, 80h             ; busy flag
1457   0763 C7 5E 07      jnz ide_write_loop      ; wait loop
1458   0766 1D D7 FF      mov al, [_ide_r7]
1459   0769 87 08         and al, %00001000       ; drq flag
1460   076B C6 76 07      jz ide_write_end
1461   076E 1E            mov al, [d]
1462   076F 3D D0 FF      mov [_ide_r0], al
1463   0772 79            inc d 
1464   0773 0A 5E 07      jmp ide_write_loop
1465   0776             ide_write_end:
1466   0776 E7            pop d
1467   0777 09            ret
1468   0778             
1469   0778             ;----------------------------------------------------------------------------------------------------;
1470   0778             ; wait for ide to be ready
1471   0778             ;----------------------------------------------------------------------------------------------------;
1472   0778             ide_wait:
1473   0778 1D D7 FF      mov al, [_ide_r7]  
1474   077B 87 80         and al, 80h        ; busy flag
1475   077D C7 78 07      jnz ide_wait
1476   0780 09            ret
1477   0781             
1478   0781             ;----------------------------------------------------------------------------------------------------;
1479   0781             ; io syscall
1480   0781             ;----------------------------------------------------------------------------------------------------;
1481   0781             ; baud  divisor
1482   0781             ; 50    2304
1483   0781             ; 110   1047
1484   0781             ; 300    384
1485   0781             ; 600    192
1486   0781             ; 1200    96
1487   0781             ; 9600    12
1488   0781             ; 19200    6
1489   0781             ; 38400    3
1490   0781             syscall_io_jmp:
1491   0781 DC 07         .dw syscall_io_putchar
1492   0783 F5 07         .dw syscall_io_getch
1493   0785 8B 07         .dw syscall_io_uart_setup
1494   0787             syscall_io:
1495   0787 FD 0A 81 07   jmp [syscall_io_jmp + al]
1496   078B             ; bit7 is the divisor latch access bit (dlab). it must be set high (logic 1) to access the divisor latches
1497   078B             ; of the baud generator during a read or write operation. it must be set low (logic 0) to access the receiver
1498   078B             ; buffer, the transmitter holding register, or the interrupt enable register.
1499   078B             syscall_io_uart_setup:
1500   078B 1D 8B 19      mov al, [sys_uart0_lcr]
1501   078E 8B 80         or al, $80                ; set dlab access bit
1502   0790 3D 83 FF      mov [_uart0_lcr], al      ; 8 data, 2 stop, no parity by default
1503   0793 1D 8E 19      mov al, [sys_uart0_div0]
1504   0796 3D 80 FF      mov [_uart0_dlab_0], al   ; divisor latch byte 0
1505   0799 1D 8F 19      mov al, [sys_uart0_div1]
1506   079C 3D 81 FF      mov [_uart0_dlab_1], al   ; divisor latch byte 1      
1507   079F 1D 8B 19      mov al, [sys_uart0_lcr]
1508   07A2 87 7F         and al, $7f               ; clear dlab access bit 
1509   07A4 3D 83 FF      mov [_uart0_lcr], al
1510   07A7 1D 8C 19      mov al, [sys_uart0_inten]
1511   07AA 3D 81 FF      mov [_uart0_ier], al      ; interrupts
1512   07AD 1D 8D 19      mov al, [sys_uart0_fifoen]
1513   07B0 3D 82 FF      mov [_uart0_fcr], al      ; fifo control
1514   07B3             ; uart1:
1515   07B3 1D 90 19      mov al, [sys_uart1_lcr]
1516   07B6 8B 80         or al, $80                ; set dlab access bit
1517   07B8 3D 8B FF      mov [_uart1_lcr], al      ; 8 data, 2 stop, no parity by default
1518   07BB 1D 93 19      mov al, [sys_uart1_div0]
1519   07BE 3D 88 FF      mov [_uart1_dlab_0], al   ; divisor latch byte 0
1520   07C1 1D 94 19      mov al, [sys_uart1_div1]
1521   07C4 3D 89 FF      mov [_uart1_dlab_1], al   ; divisor latch byte 1      
1522   07C7 1D 90 19      mov al, [sys_uart1_lcr]
1523   07CA 87 7F         and al, $7f               ; clear dlab access bit 
1524   07CC 3D 8B FF      mov [_uart1_lcr], al
1525   07CF 1D 91 19      mov al, [sys_uart1_inten]
1526   07D2 3D 89 FF      mov [_uart1_ier], al      ; interrupts
1527   07D5 1D 92 19      mov al, [sys_uart1_fifoen]
1528   07D8 3D 8A FF      mov [_uart1_fcr], al      ; fifo control
1529   07DB 06            sysret
1530   07DC             
1531   07DC             ; char in ah
1532   07DC             syscall_io_putchar:
1533   07DC             syscall_io_putchar_l0:
1534   07DC 1D 85 FF      mov al, [_uart0_lsr]         ; read line status register
1535   07DF 87 20         and al, $20
1536   07E1 C6 DC 07      jz syscall_io_putchar_l0    
1537   07E4 1A            mov al, ah
1538   07E5 3D 80 FF      mov [_uart0_data], al        ; write char to transmitter holding register
1539   07E8             ; write to uart1
1540   07E8             syscall_io_putchar_l1:
1541   07E8 1D 8D FF      mov al, [_uart1_lsr]         ; read line status register
1542   07EB 87 20         and al, $20
1543   07ED C6 E8 07      jz syscall_io_putchar_l1
1544   07F0 1A            mov al, ah
1545   07F1 3D 88 FF      mov [_uart1_data], al        ; write char to transmitter holding register
1546   07F4 06            sysret
1547   07F5             
1548   07F5             ; char in ah
1549   07F5             ; al = sucess code
1550   07F5             syscall_io_getch:
1551   07F5 D8            push b
1552   07F6 DA            push d
1553   07F7 FD 0C         sti
1554   07F9             syscall_io_getch_l0:  
1555   07F9 14 9D 19      mov a, [fifo_out]
1556   07FC 29 9B 19      mov b, [fifo_in]
1557   07FF B0            cmp a, b
1558   0800 C6 F9 07      je syscall_io_getch_l0
1559   0803 3C            mov d, a
1560   0804 77            inc a
1561   0805 AF A2 31      cmp a, fifo + _fifo_size      ; check if pointer reached the end of the fifo
1562   0808 C7 0E 08      jne syscall_io_getch_cont
1563   080B 10 A2 21      mov a, fifo  
1564   080E             syscall_io_getch_cont:  
1565   080E 42 9D 19      mov [fifo_out], a             ; update fifo pointer
1566   0811 1E            mov al, [d]                   ; get char
1567   0812 23            mov ah, al
1568   0813 1D 8A 19      mov al, [sys_echo_on]
1569   0816 B9 01         cmp al, 1
1570   0818 C7 33 08      jne syscall_io_getch_noecho 
1571   081B             ; here we just echo the char back to the console
1572   081B             syscall_io_getch_echo_l0:
1573   081B 1D 85 FF      mov al, [_uart0_lsr]         ; read line status register
1574   081E 87 20         and al, $20                 ; isolate transmitter empty
1575   0820 C6 1B 08      jz syscall_io_getch_echo_l0
1576   0823 1A            mov al, ah
1577   0824 3D 80 FF      mov [_uart0_data], al        ; write char to transmitter holding register
1578   0827             syscall_io_getch_echo_l1:
1579   0827 1D 8D FF      mov al, [_uart1_lsr]         ; read line status register
1580   082A 87 20         and al, $20                 ; isolate transmitter empty
1581   082C C6 27 08      jz syscall_io_getch_echo_l1
1582   082F 1A            mov al, ah
1583   0830 3D 88 FF      mov [_uart1_data], al        ; write char to transmitter holding register
1584   0833             syscall_io_getch_noecho:
1585   0833 19 01         mov al, 1                    ; al = 1 means a char successfully received
1586   0835 E7            pop d
1587   0836 E5            pop b
1588   0837 06            sysret
1589   0838             
1590   0838             ;------------------------------------------------------------------------------------------------------;
1591   0838             ; file system data
1592   0838             ;------------------------------------------------------------------------------------------------------;
1593   0838             ; infor for : ide services interrupt
1594   0838             ; ide read/write 512-byte sector
1595   0838             ; al = option
1596   0838             ; user buffer pointer in d
1597   0838             ; ah = number of sectors
1598   0838             ; cb = lba bytes 3..0  
1599   0838             ;------------------------------------------------------------------------------------------------------;
1600   0838             ; file system data structure
1601   0838             ;------------------------------------------------------------------------------------------------------;
1602   0838             ; for a directory we have the header first, followed by metadata
1603   0838             ; header 1 sector (512 bytes)
1604   0838             ; metadata 1 sector (512 bytes)
1605   0838             ; header entries:
1606   0838             ; filename (64)
1607   0838             ; parent dir lba (2) -  to be used for faster backwards navigation...
1608   0838             ;
1609   0838             ; metadata entries:
1610   0838             ; filename (24)
1611   0838             ; attributes (1)  |_|_|file_type(3bits)|x|w|r| types: file, directory, character device
1612   0838             ; lba (2)
1613   0838             ; size (2)
1614   0838             ; day (1)
1615   0838             ; month (1)
1616   0838             ; year (1)
1617   0838             ; packet size = 32 bytes
1618   0838             ;
1619   0838             ; first directory on disk is the root directory '/'
1620   0838             file_system_jmptbl:
1621   0838 A3 08         .dw fs_mkfs                   ; 0
1622   083A 00 00         .dw 0                         ; 1
1623   083C 05 09         .dw fs_mkdir                  ; 2
1624   083E 7E 0C         .dw fs_cd                     ; 3
1625   0840 85 0C         .dw fs_ls                     ; 4
1626   0842 70 0D         .dw fs_mktxt                  ; 5
1627   0844 3B 0E         .dw fs_mkbin                  ; 6
1628   0846 02 0F         .dw fs_pwd                    ; 7
1629   0848 1F 0F         .dw fs_cat                    ; 8
1630   084A 7B 0F         .dw fs_rmdir                  ; 9
1631   084C D7 0F         .dw fs_rm                     ; 10
1632   084E 00 00         .dw 0                         ; 11
1633   0850 00 00         .dw 0                         ; 12
1634   0852 00 00         .dw 0                         ; 13
1635   0854 AB 08         .dw fs_chmod                  ; 14
1636   0856 3F 10         .dw fs_mv                     ; 15
1637   0858 A4 08         .dw fs_cd_root                ; 16
1638   085A 7A 0C         .dw fs_get_curr_dirid         ; 17
1639   085C 56 0A         .dw fs_dir_id_to_path         ; 18
1640   085E BC 0A         .dw fs_path_to_dir_id_user    ; 19
1641   0860 D6 0B         .dw fs_load_from_path_user    ; 20  
1642   0862 46 0B         .dw fs_filepath_exists_user   ; 21
1643   0864             
1644   0864 0A 3E 20 73 s_syscall_fs_dbg0: .db "\n> syscall_file_system called: ", 0
1644   0868 79 73 63 61 
1644   086C 6C 6C 5F 66 
1644   0870 69 6C 65 5F 
1644   0874 73 79 73 74 
1644   0878 65 6D 20 63 
1644   087C 61 6C 6C 65 
1644   0880 64 3A 20 00 
1645   0884             syscall_file_system:
1646   0884 DD            push bl
1647   0885 31 89 19      mov bl, [sys_debug_mode]
1648   0888               ; debug block
1649   0888 C1 00         cmp bl, 0
1650   088A EA            pop bl
1651   088B C6 9F 08      je syscall_filesystem_jmp
1652   088E DA            push d
1653   088F DD            push bl
1654   0890 3B 64 08      mov d, s_syscall_fs_dbg0
1655   0893 07 60 14      call _puts
1656   0896 2F            mov bl, al
1657   0897 07 00 15      call print_u8x
1658   089A 07 0D 14      call printnl
1659   089D EA            pop bl
1660   089E E7            pop d
1661   089F             syscall_filesystem_jmp:
1662   089F FD 0A 38 08   jmp [file_system_jmptbl + al]
1663   08A3             
1664   08A3             fs_mkfs:  
1665   08A3 06            sysret  
1666   08A4               
1667   08A4             fs_cd_root:
1668   08A4 10 20 00      mov a, root_id
1669   08A7 42 9F 19      mov [current_dir_id], a      ; set current directory lba to root
1670   08AA 06            sysret  
1671   08AB             
1672   08AB             ; filename in d (userspace data)
1673   08AB             ; permission in bl
1674   08AB             fs_chmod:
1675   08AB DD            push bl
1676   08AC FD 4E         mov si, d
1677   08AE FD 4F A2 1F   mov di, user_data
1678   08B2 38 80 00      mov c, 128
1679   08B5 04            load                        ; load filename from user-space
1680   08B6 14 9F 19      mov a, [current_dir_id]
1681   08B9 77            inc a                       ; metadata sector
1682   08BA 27            mov b, a
1683   08BB 38 00 00      mov c, 0                    ; upper lba = 0
1684   08BE 22 01         mov ah, $01                  ; 1 sector
1685   08C0 3B A2 33      mov d, transient_area
1686   08C3 07 F6 06      call ide_read_sect          ; read directory
1687   08C6 FD 10         cla
1688   08C8 42 97 19      mov [index], a              ; reset file counter
1689   08CB             fs_chmod_l1:
1690   08CB FD 4E         mov si, d
1691   08CD FD 4F A2 1F   mov di, user_data
1692   08D1 07 A3 12      call _strcmp
1693   08D4 C6 EB 08      je fs_chmod_found_entry
1694   08D7 58 20 00      add d, 32
1695   08DA 14 97 19      mov a, [index]
1696   08DD 77            inc a
1697   08DE 42 97 19      mov [index], a
1698   08E1 AF 10 00      cmp a, fst_files_per_dir
1699   08E4 C7 CB 08      jne fs_chmod_l1
1700   08E7 EA            pop bl
1701   08E8 0A 04 09      jmp fs_chmod_not_found
1702   08EB             fs_chmod_found_entry:  
1703   08EB FD 79         mov g, b                    ; save lba
1704   08ED EA            pop bl                      ; retrieve saved permission value
1705   08EE 1F 18 00      mov al, [d + 24]            ; read file permissions
1706   08F1 87 F8         and al, %11111000           ; remove all permissions, keep other flags
1707   08F3 8C            or al, bl                   ; set new permissions
1708   08F4 3F 18 00      mov [d + 24], al            ; write new permissions
1709   08F7 38 00 00      mov c, 0
1710   08FA 3B A2 33      mov d, transient_area
1711   08FD 22 01         mov ah, $01                 ; disk write 1 sect
1712   08FF FD 27         mov b, g                    ; retrieve lba
1713   0901 07 1C 07      call ide_write_sect         ; write sector
1714   0904             fs_chmod_not_found:
1715   0904 06            sysret
1716   0905             
1717   0905             ;------------------------------------------------------------------------------------------------------;
1718   0905             ; create new directory
1719   0905             ;------------------------------------------------------------------------------------------------------;
1720   0905             ; search list for null name entry. add new directory to list
1721   0905             fs_mkdir:
1722   0905 FD 4E         mov si, d
1723   0907 FD 4F A2 1F   mov di, user_data
1724   090B 38 00 02      mov c, 512
1725   090E 04            load                        ; load data from user-space
1726   090F 26 22 00      mov b, fst_lba_start + 2    ; start at 2 because lba  0 is root (this would also cause issues                 
1727   0912                                           ; when checking for null name, since root has a null name)
1728   0912 38 00 00      mov c, 0                    ; upper lba = 0
1729   0915             fs_mkdir_l1:  
1730   0915 22 01         mov ah, $01                  ; 1 sector
1731   0917 3B A2 33      mov d, transient_area
1732   091A 07 F6 06      call ide_read_sect          ; read sector
1733   091D BD 00         cmp byte[d], 0              ; check for null
1734   091F C6 28 09      je fs_mkdir_found_null
1735   0922 55 02 00      add b, fst_sectors_per_dir  ; skip directory
1736   0925 0A 15 09      jmp fs_mkdir_l1
1737   0928             fs_mkdir_found_null:
1738   0928             ;create header file by grabbing dir name from parameter
1739   0928 D8            push b                      ; save new directory's lba
1740   0929 38 40 00      mov c, 64
1741   092C FD 4D A2 1F   mov si, user_data
1742   0930 FD 4F A2 33   mov di, transient_area
1743   0934 FD F5         rep movsb                   ; copy dirname from user_data to transient_area
1744   0936 14 9F 19      mov a, [current_dir_id]
1745   0939 42 E2 33      mov [transient_area + 64], a    ; store parent directory lba
1746   093C 19 00         mov al, 0
1747   093E FD 4F A2 35   mov di, transient_area + 512
1748   0942 38 00 02      mov c, 512
1749   0945 FD F7         rep stosb                       ; clean buffer
1750   0947 38 00 00      mov c, 0                        ; reset lba(c) to 0
1751   094A             ; write directory entry sectors
1752   094A 3B A2 33      mov d, transient_area
1753   094D 22 02         mov ah, $02                     ; disk write, 2 sectors
1754   094F 07 1C 07      call ide_write_sect             ; write sector
1755   0952             ; now we need to add the new directory to the list, inside the current directory
1756   0952 14 9F 19      mov a, [current_dir_id]
1757   0955 53 01 00      add a, 1
1758   0958 27            mov b, a                        ; metadata sector
1759   0959 38 00 00      mov c, 0
1760   095C FD 79         mov g, b                        ; save lba
1761   095E 3B A2 33      mov d, transient_area
1762   0961 22 01         mov ah, $01                  ; 1 sector
1763   0963 07 F6 06      call ide_read_sect              ; read metadata sector
1764   0966             fs_mkdir_l2:
1765   0966 BD 00         cmp byte[d], 0
1766   0968 C6 71 09      je fs_mkdir_found_null2
1767   096B 58 20 00      add d, fst_entry_size
1768   096E 0A 66 09      jmp fs_mkdir_l2                ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
1769   0971             fs_mkdir_found_null2:
1770   0971 FD 4D A2 1F   mov si, user_data
1771   0975 FD 50         mov di, d
1772   0977 07 B8 12      call _strcpy                    ; copy directory name
1773   097A 58 18 00      add d, 24                       ; goto attributes
1774   097D 19 0B         mov al, %00001011               ; directory, no execute, write, read
1775   097F 3E            mov [d], al      
1776   0980 79            inc d
1777   0981 E5            pop b
1778   0982 D8            push b                          ; push lba back
1779   0983 FD 43         mov [d], b                      ; save lba
1780   0985             ; set file creation date  
1781   0985 58 04 00      add d, 4
1782   0988 19 04         mov al, 4
1783   098A 05 01         syscall sys_rtc
1784   098C 1A            mov al, ah
1785   098D 3E            mov [d], al                     ; set day
1786   098E 79            inc d
1787   098F 19 05         mov al, 5
1788   0991 05 01         syscall sys_rtc
1789   0993 1A            mov al, ah
1790   0994 3E            mov [d], al                     ; set month
1791   0995 79            inc d
1792   0996 19 06         mov al, 6
1793   0998 05 01         syscall sys_rtc
1794   099A 1A            mov al, ah
1795   099B 3E            mov [d], al                     ; set year
1796   099C             ; write sector into disk for new directory entry
1797   099C FD 27         mov b, g
1798   099E 38 00 00      mov c, 0
1799   09A1 3B A2 33      mov d, transient_area
1800   09A4 22 01         mov ah, $01                     ; disk write, 1 sector
1801   09A6 07 1C 07      call ide_write_sect             ; write sector
1802   09A9             
1803   09A9             ; after adding the new directory's information to its parent directory's list
1804   09A9             ; we need to now enter the new directory, and to it add two new directories!
1805   09A9             ; which directories do we need to add ? '..' and '.' are the directories needed.
1806   09A9             ; importantly, note that these two new directories are only entries in the list
1807   09A9             ; and do not have actual physical entries in the disk as real directories.
1808   09A9             ; i.e. they only exist as list entries in the new directory created so that
1809   09A9             ; the new directory can reference its parent and itself.
1810   09A9             ; we need to add both '..' and '.'
1811   09A9             ; this first section is for '..' and on the section below we do the same for '.'
1812   09A9 E4            pop a                         ; retrieve the new directory's lba  
1813   09AA D7            push a                        ; and save again
1814   09AB 53 01 00      add a, 1
1815   09AE 27            mov b, a                      ; metadata sector
1816   09AF 38 00 00      mov c, 0
1817   09B2 FD 79         mov g, b                      ; save lba
1818   09B4 3B A2 33      mov d, transient_area
1819   09B7 22 01         mov ah, $01                  ; 1 sector
1820   09B9 07 F6 06      call ide_read_sect            ; read metadata sector
1821   09BC             fs_mkdir_l3:
1822   09BC BD 00         cmp byte[d], 0
1823   09BE C6 C7 09      je fs_mkdir_found_null3
1824   09C1 58 20 00      add d, fst_entry_size
1825   09C4 0A BC 09      jmp fs_mkdir_l3              ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
1826   09C7             fs_mkdir_found_null3:
1827   09C7 FD 4D BE 19   mov si, s_parent_dir
1828   09CB FD 50         mov di, d
1829   09CD 07 B8 12      call _strcpy                  ; copy directory name
1830   09D0 58 18 00      add d, 24                     ; goto attributes
1831   09D3 19 0B         mov al, %00001011             ; directory, no execute, write, read, 
1832   09D5 3E            mov [d], al      
1833   09D6 79            inc d
1834   09D7 29 9F 19      mov b, [current_dir_id]        ; retrieve the parent directorys lba
1835   09DA FD 43         mov [d], b                    ; save lba
1836   09DC             ; set file creation date  
1837   09DC 58 04 00      add d, 4
1838   09DF 19 04         mov al, 4
1839   09E1 05 01         syscall sys_rtc
1840   09E3 1A            mov al, ah
1841   09E4 3E            mov [d], al                   ; set day
1842   09E5 79            inc d
1843   09E6 19 05         mov al, 5
1844   09E8 05 01         syscall sys_rtc
1845   09EA 1A            mov al, ah
1846   09EB 3E            mov [d], al                   ; set month
1847   09EC 79            inc d
1848   09ED 19 06         mov al, 6
1849   09EF 05 01         syscall sys_rtc
1850   09F1 1A            mov al, ah
1851   09F2 3E            mov [d], al                   ; set year
1852   09F3             ; write sector into disk for new directory entry
1853   09F3 FD 27         mov b, g
1854   09F5 38 00 00      mov c, 0
1855   09F8 3B A2 33      mov d, transient_area
1856   09FB 22 01         mov ah, $01                   ; disk write, 1 sector
1857   09FD 07 1C 07      call ide_write_sect           ; write sector
1858   0A00             ;;;;;;;;;;;;;
1859   0A00             ; like we did above for '..', we need to now add the '.' directory to the list.
1860   0A00             ;------------------------------------------------------------------------------------------------------;
1861   0A00 E4            pop a                         ; retrieve the new directory's lba  
1862   0A01 D7            push a
1863   0A02 53 01 00      add a, 1
1864   0A05 27            mov b, a                      ; metadata sector
1865   0A06 38 00 00      mov c, 0
1866   0A09 FD 79         mov g, b                      ; save lba
1867   0A0B 3B A2 33      mov d, transient_area
1868   0A0E 22 01         mov ah, $01                  ; 1 sector
1869   0A10 07 F6 06      call ide_read_sect            ; read metadata sector
1870   0A13             fs_mkdir_l4:
1871   0A13 BD 00         cmp byte[d], 0
1872   0A15 C6 1E 0A      je fs_mkdir_found_null4
1873   0A18 58 20 00      add d, fst_entry_size
1874   0A1B 0A 13 0A      jmp fs_mkdir_l4              ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
1875   0A1E             fs_mkdir_found_null4:
1876   0A1E FD 4D C1 19   mov si, s_current_dir
1877   0A22 FD 50         mov di, d
1878   0A24 07 B8 12      call _strcpy                  ; copy directory name
1879   0A27 58 18 00      add d, 24                     ; goto attributes
1880   0A2A 19 0B         mov al, %00001011             ; directory, no execute, write, read, 
1881   0A2C 3E            mov [d], al      
1882   0A2D 79            inc d
1883   0A2E E5            pop b                         ; new directory's lba itself. for self-referential directory entry '.'
1884   0A2F FD 43         mov [d], b                    ; save lba
1885   0A31             ; set file creation date  
1886   0A31 58 04 00      add d, 4
1887   0A34 19 04         mov al, 4
1888   0A36 05 01         syscall sys_rtc
1889   0A38 1A            mov al, ah
1890   0A39 3E            mov [d], al                   ; set day
1891   0A3A 79            inc d
1892   0A3B 19 05         mov al, 5
1893   0A3D 05 01         syscall sys_rtc
1894   0A3F 1A            mov al, ah
1895   0A40 3E            mov [d], al                   ; set month
1896   0A41 79            inc d
1897   0A42 19 06         mov al, 6
1898   0A44 05 01         syscall sys_rtc
1899   0A46 1A            mov al, ah
1900   0A47 3E            mov [d], al                   ; set year
1901   0A48             ; write sector into disk for new directory entry
1902   0A48 FD 27         mov b, g
1903   0A4A 38 00 00      mov c, 0
1904   0A4D 3B A2 33      mov d, transient_area
1905   0A50 22 01         mov ah, $01                   ; disk write, 1 sector
1906   0A52 07 1C 07      call ide_write_sect           ; write sector
1907   0A55             fs_mkdir_end:
1908   0A55 06            sysret
1909   0A56             
1910   0A56             ;------------------------------------------------------------------------------------------------------;
1911   0A56             ; get path from a given directory dirid
1912   0A56             ; pseudo code:
1913   0A56             ;  fs_dir_id_to_path(int dirid, char *d){
1914   0A56             ;    if(dirid == 0){
1915   0A56             ;      reverse path in d;
1916   0A56             ;      return;
1917   0A56             ;    }
1918   0A56             ;    else{
1919   0A56             ;      copy directory name to end of d;
1920   0A56             ;      add '/' to end of d;
1921   0A56             ;      parentid = get parent directory id;
1922   0A56             ;      fs_dir_id_to_path(parentid, d);
1923   0A56             ;    }
1924   0A56             ;  }
1925   0A56             ; a = dirid
1926   0A56             ; d = generated path string pointer
1927   0A56             ;------------------------------------------------------------------------------------------------------;
1928   0A56             ; sample path: /usr/bin
1929   0A56             fs_dir_id_to_path:
1930   0A56 3B 22 1F      mov d, filename
1931   0A59 19 00         mov al, 0
1932   0A5B 3E            mov [d], al                     ; initialize path string 
1933   0A5C 14 9F 19      mov a, [current_dir_id]
1934   0A5F 07 6C 0A      call fs_dir_id_to_path_e0
1935   0A62 3B 22 1F      mov d, filename
1936   0A65 07 4C 12      call _strrev
1937   0A68 07 60 14      call _puts
1938   0A6B 06            sysret
1939   0A6C             fs_dir_id_to_path_e0:
1940   0A6C 07 8B 0A      call get_dirname_from_dirid
1941   0A6F FD 4D C3 19   mov si, s_fslash
1942   0A73 FD 50         mov di, d
1943   0A75 07 C6 12      call _strcat                    ; add '/' to end of path
1944   0A78 AF 20 00      cmp a, root_id               ; check if we are at the root directory
1945   0A7B C6 8A 0A      je fs_dir_id_to_path_root
1946   0A7E 07 A8 0A      call get_parentid_from_dirid    ; use current id (a) to find parentid (into a)
1947   0A81 AF 20 00      cmp a, root_id               ; check if we are at the root directory
1948   0A84 C6 8A 0A      je fs_dir_id_to_path_root
1949   0A87 07 6C 0A      call fs_dir_id_to_path_e0     ; recursively call itself
1950   0A8A             fs_dir_id_to_path_root:
1951   0A8A 09            ret
1952   0A8B             
1953   0A8B             ;------------------------------------------------------------------------------------------------------;
1954   0A8B             ; in_puts:
1955   0A8B             ; a = directory id
1956   0A8B             ; out_puts:
1957   0A8B             ; d = pointer to directory name string
1958   0A8B             ;------------------------------------------------------------------------------------------------------;
1959   0A8B             get_dirname_from_dirid:
1960   0A8B D7            push a
1961   0A8C D8            push b
1962   0A8D DA            push d
1963   0A8E 27            mov b, a
1964   0A8F 38 00 00      mov c, 0                      ; upper lba = 0
1965   0A92 22 01         mov ah, $01                  ; 1 sector
1966   0A94 3B A2 31      mov d, transient_area - 512
1967   0A97 07 F6 06      call ide_read_sect            ; read directory
1968   0A9A 07 4C 12      call _strrev                  ; reverse dir name before copying
1969   0A9D FD 4E         mov si, d
1970   0A9F E7            pop d                         ; destination address = d value pushed at beginning
1971   0AA0 FD 50         mov di, d
1972   0AA2 07 C6 12      call _strcat                  ; copy filename to d
1973   0AA5 E5            pop b
1974   0AA6 E4            pop a
1975   0AA7 09            ret
1976   0AA8             
1977   0AA8             ;------------------------------------------------------------------------------------------------------;
1978   0AA8             ; in_puts:
1979   0AA8             ; a = directory id
1980   0AA8             ; out_puts:
1981   0AA8             ; a = parent directory id
1982   0AA8             ;------------------------------------------------------------------------------------------------------;
1983   0AA8             get_parentid_from_dirid:
1984   0AA8 D8            push b
1985   0AA9 DA            push d
1986   0AAA 27            mov b, a
1987   0AAB 38 00 00      mov c, 0                      ; upper lba = 0
1988   0AAE 22 01         mov ah, $01                  ; 1 sector
1989   0AB0 3B A2 31      mov d, transient_area - 512
1990   0AB3 07 F6 06      call ide_read_sect            ; read directory
1991   0AB6 16 40 00      mov a, [d + 64]               ; copy parent id value to a
1992   0AB9 E7            pop d
1993   0ABA E5            pop b
1994   0ABB 09            ret
1995   0ABC             
1996   0ABC             ;------------------------------------------------------------------------------------------------------;
1997   0ABC             ; get dirid from a given path string
1998   0ABC             ; in_puts:
1999   0ABC             ; d = path pointer 
2000   0ABC             ; out_puts:
2001   0ABC             ; a = dirid
2002   0ABC             ; if dir non existent, a = ffff (fail code)
2003   0ABC             ; /usr/local/bin    - absolute
2004   0ABC             ; local/bin/games    - relative
2005   0ABC             ;------------------------------------------------------------------------------------------------------;
2006   0ABC             fs_path_to_dir_id_user:
2007   0ABC FD 4E         mov si, d
2008   0ABE FD 4F A2 1F   mov di, user_data
2009   0AC2 38 00 02      mov c, 512
2010   0AC5 04            load
2011   0AC6 07 CA 0A      call get_dirid_from_path
2012   0AC9 06            sysret
2013   0ACA             get_dirid_from_path:
2014   0ACA 26 A2 1F      mov b, user_data
2015   0ACD FD 42 85 18   mov [prog], b                  ; token pointer set to path string
2016   0AD1 07 E6 16      call get_token
2017   0AD4 31 88 18      mov bl, [tok]
2018   0AD7 C1 01         cmp bl, tok_fslash
2019   0AD9 C6 E5 0A      je get_dirid_from_path_abs 
2020   0ADC 14 9F 19      mov a, [current_dir_id]
2021   0ADF 07 6C 18      call _putback
2022   0AE2 0A E8 0A      jmp get_dirid_from_path_e0
2023   0AE5             get_dirid_from_path_abs:
2024   0AE5 10 20 00      mov a, root_id
2025   0AE8             get_dirid_from_path_e0:
2026   0AE8 07 E6 16      call get_token
2027   0AEB 31 87 18      mov bl, [toktyp]
2028   0AEE C1 00         cmp bl, toktyp_identifier
2029   0AF0 C7 41 0B      jne get_dirid_from_path_end   ; check if there are tokens after '/'. i.e. is this a 'cd /' command?
2030   0AF3             
2031   0AF3 FD 4D 89 18   mov si, tokstr
2032   0AF7 FD 4F 22 1F   mov di, filename
2033   0AFB 07 B8 12      call _strcpy        
2034   0AFE 77            inc a                         ; metadata sector
2035   0AFF 27            mov b, a
2036   0B00 38 00 00      mov c, 0                      ; upper lba = 0
2037   0B03 22 01         mov ah, $01                  ; 1 sector
2038   0B05 3B A2 33      mov d, transient_area
2039   0B08 07 F6 06      call ide_read_sect            ; read directory
2040   0B0B FD 10         cla
2041   0B0D 42 97 19      mov [index], a
2042   0B10             get_dirid_from_path_l1:
2043   0B10 FD 4E         mov si, d
2044   0B12 FD 4F 22 1F   mov di, filename
2045   0B16 07 A3 12      call _strcmp
2046   0B19 C6 2F 0B      je get_dirid_from_path_name_equal  
2047   0B1C 58 20 00      add d, 32
2048   0B1F 14 97 19      mov a, [index]
2049   0B22 77            inc a
2050   0B23 42 97 19      mov [index], a
2051   0B26 AF 10 00      cmp a, fst_files_per_dir
2052   0B29 C6 42 0B      je get_dirid_from_path_fail
2053   0B2C 0A 10 0B      jmp get_dirid_from_path_l1
2054   0B2F             get_dirid_from_path_name_equal:
2055   0B2F 58 19 00      add d, 25           
2056   0B32 15            mov a, [d]                    ; set result register a = dirid
2057   0B33 07 E6 16      call get_token
2058   0B36 31 88 18      mov bl, [tok]
2059   0B39 C1 01         cmp bl, tok_fslash            ; check if there are more elements in the path
2060   0B3B C6 E8 0A      je get_dirid_from_path_e0
2061   0B3E 07 6C 18      call _putback
2062   0B41             get_dirid_from_path_end:
2063   0B41 09            ret
2064   0B42             get_dirid_from_path_fail:
2065   0B42 10 FF FF      mov a, $ffff
2066   0B45 09            ret
2067   0B46             
2068   0B46             
2069   0B46             ;------------------------------------------------------------------------------------------------------;
2070   0B46             ; check if file exists by a given path string
2071   0B46             ; in_puts:
2072   0B46             ; d = path pointer 
2073   0B46             ; outputs:
2074   0B46             ; a = success code, if file exists gives lba, else, give 0
2075   0B46             ; /usr/local/bin/ed
2076   0B46             ;------------------------------------------------------------------------------------------------------;
2077   0B46             fs_filepath_exists_user:
2078   0B46 FD 4E         mov si, d
2079   0B48 FD 4F A2 1F   mov di, user_data
2080   0B4C 38 00 02      mov c, 512
2081   0B4F 04            load
2082   0B50 07 54 0B      call file_exists_by_path
2083   0B53 06            sysret
2084   0B54             file_exists_by_path:
2085   0B54 26 A2 1F      mov b, user_data
2086   0B57 FD 42 85 18   mov [prog], b                   ; token pointer set to path string
2087   0B5B 07 E6 16      call get_token
2088   0B5E 31 88 18      mov bl, [tok]
2089   0B61 C1 01         cmp bl, tok_fslash
2090   0B63 C6 6F 0B      je  file_exists_by_path_abs
2091   0B66 14 9F 19      mov a, [current_dir_id]
2092   0B69 07 6C 18      call _putback
2093   0B6C 0A 72 0B      jmp file_exists_by_path_e0
2094   0B6F             file_exists_by_path_abs:
2095   0B6F 10 20 00      mov a, root_id
2096   0B72             file_exists_by_path_e0:
2097   0B72 07 E6 16      call get_token
2098   0B75 31 87 18      mov bl, [toktyp]
2099   0B78 C1 00         cmp bl, toktyp_identifier
2100   0B7A C7 D2 0B      jne file_exists_by_path_end     ; check if there are tokens after '/'
2101   0B7D FD 4D 89 18   mov si, tokstr
2102   0B81 FD 4F 22 1F   mov di, filename
2103   0B85 07 B8 12      call _strcpy        
2104   0B88 77            inc a                           ; metadata sector
2105   0B89 27            mov b, a
2106   0B8A 38 00 00      mov c, 0                        ; upper lba = 0
2107   0B8D 22 01         mov ah, $01                  ; 1 sector
2108   0B8F 3B A2 33      mov d, transient_area
2109   0B92 07 F6 06      call ide_read_sect              ; read directory
2110   0B95 FD 10         cla
2111   0B97 42 97 19      mov [index], a
2112   0B9A             file_exists_by_path_l1:
2113   0B9A FD 4E         mov si, d
2114   0B9C FD 4F 22 1F   mov di, filename
2115   0BA0 07 A3 12      call _strcmp
2116   0BA3 C6 B9 0B      je   file_exists_by_path_name_equal
2117   0BA6 58 20 00      add d, 32
2118   0BA9 14 97 19      mov a, [index]
2119   0BAC 77            inc a
2120   0BAD 42 97 19      mov [index], a
2121   0BB0 AF 10 00      cmp a, fst_files_per_dir
2122   0BB3 C6 D2 0B      je file_exists_by_path_end
2123   0BB6 0A 9A 0B      jmp file_exists_by_path_l1
2124   0BB9             file_exists_by_path_name_equal:
2125   0BB9 33 18 00      mov bl, [d + 24]
2126   0BBC FD 87 38      and bl, %00111000               ; directory flag
2127   0BBF C1 08         cmp bl, %00001000               ; is dir?
2128   0BC1 C6 C8 0B      je file_exists_by_path_isdir;
2129   0BC4             ; entry is a file
2130   0BC4 16 19 00      mov a, [d + 25]                 ; get and return lba of file
2131   0BC7 09            ret
2132   0BC8             file_exists_by_path_isdir:
2133   0BC8 58 19 00      add d, 25           
2134   0BCB 15            mov a, [d]                      ; set result register a = dirid
2135   0BCC 07 E6 16      call get_token
2136   0BCF 0A 72 0B      jmp file_exists_by_path_e0
2137   0BD2             file_exists_by_path_end:
2138   0BD2 10 00 00      mov a, 0                        ; return 0 because file was not found
2139   0BD5 09            ret
2140   0BD6             
2141   0BD6             ;------------------------------------------------------------------------------------------------------;
2142   0BD6             ; load file data from a given path string
2143   0BD6             ; inputs:
2144   0BD6             ; d = path pointer 
2145   0BD6             ; di = userspace program data destination
2146   0BD6             ; /usr/local/bin/ed
2147   0BD6             ; ./ed
2148   0BD6             ;------------------------------------------------------------------------------------------------------;
2149   0BD6             fs_load_from_path_user:
2150   0BD6 E3            push di
2151   0BD7 FD 4E         mov si, d
2152   0BD9 FD 4F A2 1F   mov di, user_data
2153   0BDD 38 00 02      mov c, 512
2154   0BE0 04            load
2155   0BE1 07 EE 0B      call loadfile_from_path
2156   0BE4 F0            pop di
2157   0BE5 FD 4D A2 33   mov si, transient_area
2158   0BE9 38 00 3E      mov c, 512 * (fs_sectors_per_file-1)
2159   0BEC 03            store
2160   0BED 06            sysret
2161   0BEE             loadfile_from_path:
2162   0BEE 26 A2 1F      mov b, user_data
2163   0BF1 FD 42 85 18   mov [prog], b                 ; token pointer set to path string
2164   0BF5 07 E6 16      call get_token
2165   0BF8 31 88 18      mov bl, [tok]
2166   0BFB C1 01         cmp bl, tok_fslash
2167   0BFD C6 09 0C      je loadfile_from_path_abs 
2168   0C00 14 9F 19      mov a, [current_dir_id]
2169   0C03 07 6C 18      call _putback
2170   0C06 0A 0C 0C      jmp loadfile_from_path_e0
2171   0C09             loadfile_from_path_abs:
2172   0C09 10 20 00      mov a, root_id
2173   0C0C             loadfile_from_path_e0:
2174   0C0C 07 E6 16      call get_token
2175   0C0F 31 87 18      mov bl, [toktyp]
2176   0C12 C1 00         cmp bl, toktyp_identifier
2177   0C14 C7 79 0C      jne loadfile_from_path_end    ; check if there are tokens after '/'. i.e. is this a 'cd /' command?
2178   0C17 FD 4D 89 18   mov si, tokstr
2179   0C1B FD 4F 22 1F   mov di, filename
2180   0C1F 07 B8 12      call _strcpy        
2181   0C22 77            inc a                         ; metadata sector
2182   0C23 27            mov b, a
2183   0C24 38 00 00      mov c, 0                      ; upper lba = 0
2184   0C27 22 01         mov ah, $01                  ; 1 sector
2185   0C29 3B A2 33      mov d, transient_area
2186   0C2C 07 F6 06      call ide_read_sect            ; read directory
2187   0C2F FD 10         cla
2188   0C31 42 97 19      mov [index], a
2189   0C34             loadfile_from_path_l1:
2190   0C34 FD 4E         mov si, d
2191   0C36 FD 4F 22 1F   mov di, filename
2192   0C3A 07 A3 12      call _strcmp
2193   0C3D C6 53 0C      je loadfile_from_path_name_equal  
2194   0C40 58 20 00      add d, 32
2195   0C43 14 97 19      mov a, [index]
2196   0C46 77            inc a
2197   0C47 42 97 19      mov [index], a
2198   0C4A AF 10 00      cmp a, fst_files_per_dir
2199   0C4D C6 79 0C      je loadfile_from_path_end
2200   0C50 0A 34 0C      jmp loadfile_from_path_l1
2201   0C53             loadfile_from_path_name_equal:
2202   0C53 33 18 00      mov bl, [d + 24]
2203   0C56 FD 87 38      and bl, %00111000             ; directory flag
2204   0C59 C1 08         cmp bl, %00001000             ; is dir?
2205   0C5B C6 6F 0C      je loadfile_isdirectory  
2206   0C5E             ; entry is a file
2207   0C5E 2B 19 00      mov b, [d + 25]               ; get lba
2208   0C61 FD 77         inc b                         ; add 1 to b because the lba for data comes after the header sector
2209   0C63 3B A2 33      mov d, transient_area
2210   0C66 38 00 00      mov c, 0
2211   0C69 22 1F         mov ah, fs_sectors_per_file-1 ; number of sectors
2212   0C6B 07 F6 06      call ide_read_sect            ; read sector
2213   0C6E 09            ret
2214   0C6F             loadfile_isdirectory:
2215   0C6F 58 19 00      add d, 25           
2216   0C72 15            mov a, [d]                    ; set result register a = dirid
2217   0C73 07 E6 16      call get_token
2218   0C76 0A 0C 0C      jmp loadfile_from_path_e0
2219   0C79             loadfile_from_path_end:
2220   0C79 09            ret
2221   0C7A             
2222   0C7A             ;------------------------------------------------------------------------------------------------------;
2223   0C7A             ; return the id of the current directory
2224   0C7A             ; id returned in b
2225   0C7A             ;------------------------------------------------------------------------------------------------------;
2226   0C7A             fs_get_curr_dirid:
2227   0C7A 29 9F 19      mov b, [current_dir_id]
2228   0C7D 06            sysret
2229   0C7E             
2230   0C7E             ;------------------------------------------------------------------------------------------------------;
2231   0C7E             ; cd
2232   0C7E             ;------------------------------------------------------------------------------------------------------;
2233   0C7E             ; new dirid in b
2234   0C7E             fs_cd:
2235   0C7E FD 42 9F 19   mov [current_dir_id], b
2236   0C82 06            sysret  
2237   0C83             
2238   0C83             ;------------------------------------------------------------------------------------------------------;
2239   0C83             ; ls
2240   0C83             ; dirid in b
2241   0C83             ;------------------------------------------------------------------------------------------------------;
2242   0C83 00 00       ls_count:       .dw 0
2243   0C85             fs_ls:
2244   0C85 FD 77         inc b                        ; metadata sector
2245   0C87 38 00 00      mov c, 0                     ; upper lba = 0
2246   0C8A 22 01         mov ah, $01                  ; 1 sector
2247   0C8C 3B A2 33      mov d, transient_area
2248   0C8F 07 F6 06      call ide_read_sect           ; read directory
2249   0C92 FD 10         cla
2250   0C94 42 97 19      mov [index], a               ; reset entry index
2251   0C97 3D 83 0C      mov [ls_count], al           ; reset item count
2252   0C9A             fs_ls_l1:
2253   0C9A BD 00         cmp byte [d], 0              ; check for null
2254   0C9C C6 33 0D      je fs_ls_next
2255   0C9F             fs_ls_non_null:
2256   0C9F 1D 83 0C      mov al, [ls_count]
2257   0CA2 7A            inc al
2258   0CA3 3D 83 0C      mov [ls_count], al           ; increment item count
2259   0CA6 1F 18 00      mov al, [d + 24]
2260   0CA9 87 38         and al, %00111000
2261   0CAB FD A2 03      shr al, 3
2262   0CAE 22 00         mov ah, 0                    ; file type
2263   0CB0 B7 CA 19      mov a, [a + file_type]      
2264   0CB3 23            mov ah, al
2265   0CB4 07 34 13      call _putchar
2266   0CB7 1F 18 00      mov al, [d + 24]
2267   0CBA 87 01         and al, %00000001
2268   0CBC 22 00         mov ah, 0
2269   0CBE B7 C5 19      mov a, [a + file_attrib]     ; read
2270   0CC1 23            mov ah, al
2271   0CC2 07 34 13      call _putchar
2272   0CC5 1F 18 00      mov al, [d + 24]
2273   0CC8 87 02         and al, %00000010
2274   0CCA 22 00         mov ah, 0
2275   0CCC B7 C5 19      mov a, [a + file_attrib]     ; write
2276   0CCF 23            mov ah, al
2277   0CD0 07 34 13      call _putchar
2278   0CD3 1F 18 00      mov al, [d + 24]
2279   0CD6 87 04         and al, %00000100
2280   0CD8 22 00         mov ah, 0
2281   0CDA B7 C5 19      mov a, [a + file_attrib]     ; execute
2282   0CDD 23            mov ah, al
2283   0CDE 07 34 13      call _putchar
2284   0CE1 22 20         mov ah, $20
2285   0CE3 07 34 13      call _putchar  
2286   0CE6 2B 1B 00      mov b, [d + 27]
2287   0CE9 07 BC 14      call print_u16x              ; filesize
2288   0CEC 22 20         mov ah, $20
2289   0CEE 07 34 13      call _putchar  
2290   0CF1 2B 19 00      mov b, [d + 25]
2291   0CF4 07 BC 14      call print_u16x              ; dirid / lba
2292   0CF7 22 20         mov ah, $20
2293   0CF9 07 34 13      call _putchar
2294   0CFC             ; print date
2295   0CFC 33 1D 00      mov bl, [d + 29]             ; day
2296   0CFF 07 00 15      call print_u8x
2297   0D02 22 20         mov ah, $20
2298   0D04 07 34 13      call _putchar  
2299   0D07 1F 1E 00      mov al, [d + 30]             ; month
2300   0D0A FD 9E 02      shl al, 2
2301   0D0D DA            push d
2302   0D0E 3B 30 1B      mov d, s_months
2303   0D11 22 00         mov ah, 0
2304   0D13 59            add d, a
2305   0D14 07 60 14      call _puts
2306   0D17 E7            pop d
2307   0D18 22 20         mov ah, $20
2308   0D1A 07 34 13      call _putchar
2309   0D1D 2E 20         mov bl, $20
2310   0D1F 07 00 15      call print_u8x
2311   0D22 33 1F 00      mov bl, [d + 31]             ; year
2312   0D25 07 00 15      call print_u8x  
2313   0D28 22 20         mov ah, $20
2314   0D2A 07 34 13      call _putchar  
2315   0D2D 07 60 14      call _puts                   ; print filename  
2316   0D30 07 0D 14      call printnl
2317   0D33             fs_ls_next:
2318   0D33 14 97 19      mov a, [index]
2319   0D36 77            inc a
2320   0D37 42 97 19      mov [index], a
2321   0D3A AF 10 00      cmp a, fst_files_per_dir
2322   0D3D C6 46 0D      je fs_ls_end
2323   0D40 58 20 00      add d, 32      
2324   0D43 0A 9A 0C      jmp fs_ls_l1  
2325   0D46             fs_ls_end:
2326   0D46 3B DA 19      mov d, s_ls_total
2327   0D49 07 60 14      call _puts
2328   0D4C 1D 83 0C      mov al, [ls_count]
2329   0D4F 07 12 15      call print_u8d
2330   0D52 07 0D 14      call printnl
2331   0D55 06            sysret
2332   0D56             
2333   0D56             ;------------------------------------------------------------------------------------------------------;
2334   0D56             ; finds an empty data block
2335   0D56             ; block lba returned in b
2336   0D56             ;------------------------------------------------------------------------------------------------------;
2337   0D56             fs_find_empty_block:
2338   0D56 26 A0 00      mov b, fs_lba_start     ; raw files starting block
2339   0D59 38 00 00      mov c, 0                ; upper lba = 0
2340   0D5C             fs_find_empty_block_l1:  
2341   0D5C 22 01         mov ah, $01                  ; 1 sector
2342   0D5E 3B A2 31      mov d, transient_area - 512
2343   0D61 07 F6 06      call ide_read_sect      ; read sector
2344   0D64 BD 00         cmp byte [d], 0
2345   0D66 C6 6F 0D      je fs_find_empty_block_found_null
2346   0D69 55 20 00      add b, fs_sectors_per_file
2347   0D6C 0A 5C 0D      jmp fs_find_empty_block_l1
2348   0D6F             fs_find_empty_block_found_null:
2349   0D6F 09            ret
2350   0D70             
2351   0D70             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2352   0D70             ;; create new textfile
2353   0D70             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2354   0D70             ; search for first null block
2355   0D70             fs_mktxt:
2356   0D70 FD 4E       	mov si, d
2357   0D72 FD 4F A2 1F 	mov di, user_data
2358   0D76 38 00 01    	mov c, 256
2359   0D79 04          	load					; load data from user-space
2360   0D7A             	
2361   0D7A 26 A0 00    	mov b, fs_lba_start		; raw files starting block
2362   0D7D 38 00 00    	mov c, 0						; reset lba to 0
2363   0D80             fs_mktxt_l1:	
2364   0D80 10 02 01    	mov a, $0102			; disk read
2365   0D83 3B A2 33    	mov d, transient_area
2366   0D86 05 02       	syscall sys_ide ; read sector
2367   0D88 1E          	mov al, [d]
2368   0D89 B9 00       	cmp al, 0			; check for null
2369   0D8B C6 94 0D    	je fs_mktxt_found_null
2370   0D8E 55 20 00    	add b, fs_sectors_per_file
2371   0D91 0A 80 0D    	jmp fs_mktxt_l1
2372   0D94             fs_mktxt_found_null:
2373   0D94 D8          	push b				; save lba
2374   0D95             ;create header file by grabbing file name from parameter	
2375   0D95 3B BB 19    	mov d, s_dataentry
2376   0D98 07 60 14    	call _puts
2377   0D9B 3B A2 35    	mov d, transient_area + 512			; pointer to file contents
2378   0D9E 07 C6 13    	call _gettxt
2379   0DA1 07 93 12    	call _strlen						; get length of file
2380   0DA4 D9          	push c							; save length
2381   0DA5 19 01       	mov al, 1
2382   0DA7 3D A2 33    	mov [transient_area], al					; mark sectors as used (not null)
2383   0DAA 10 00 00    	mov a, 0
2384   0DAD 42 97 19    	mov [index], a
2385   0DB0 3B A2 33    	mov d, transient_area
2386   0DB3 13          	mov a, d
2387   0DB4 42 99 19    	mov [buffer_addr], a
2388   0DB7             fs_mktxt_l2:
2389   0DB7 38 00 00    	mov c, 0
2390   0DBA 10 03 01    	mov a, $0103			; disk write, 1 sector
2391   0DBD 05 02       	syscall sys_ide		; write sector
2392   0DBF 14 97 19    	mov a, [index]
2393   0DC2 77          	inc a
2394   0DC3 42 97 19    	mov [index], a
2395   0DC6 AF 20 00    	cmp a, fs_sectors_per_file
2396   0DC9 C6 DB 0D    	je fs_mktxt_add_to_dir
2397   0DCC FD 77       	inc b
2398   0DCE 14 99 19    	mov a, [buffer_addr]
2399   0DD1 53 00 02    	add a, 512
2400   0DD4 42 99 19    	mov [buffer_addr], a
2401   0DD7 3C          	mov d, a
2402   0DD8 0A B7 0D    	jmp fs_mktxt_l2
2403   0DDB             ; now we add the file to the current directory!
2404   0DDB             fs_mktxt_add_to_dir:	
2405   0DDB 14 9F 19    	mov a, [current_dir_id]
2406   0DDE 77          	inc a
2407   0DDF 27          	mov b, a					; metadata sector
2408   0DE0 38 00 00    	mov c, 0
2409   0DE3 FD 79       	mov g, b					; save lba
2410   0DE5 3B A2 33    	mov d, transient_area
2411   0DE8 10 02 01    	mov a, $0102			; disk read
2412   0DEB 05 02       	syscall sys_ide		; read metadata sector
2413   0DED             fs_mktxt_add_to_dir_l2:
2414   0DED 1E          	mov al, [d]
2415   0DEE B9 00       	cmp al, 0
2416   0DF0 C6 F9 0D    	je fs_mktxt_add_to_dir_null
2417   0DF3 58 20 00    	add d, fst_entry_size
2418   0DF6 0A ED 0D    	jmp fs_mktxt_add_to_dir_l2					; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
2419   0DF9             fs_mktxt_add_to_dir_null:
2420   0DF9 FD 4D A2 1F 	mov si, user_data
2421   0DFD FD 50       	mov di, d
2422   0DFF 07 B8 12    	call _strcpy			; copy file name
2423   0E02 58 18 00    	add d, 24			; skip name
2424   0E05 19 06       	mov al, %00000110		; no execute, write, read, not directory
2425   0E07 3E          	mov [d], al			
2426   0E08 58 03 00    	add d, 3
2427   0E0B E4          	pop a
2428   0E0C 43          	mov [d], a
2429   0E0D 63 02 00    	sub d, 2
2430   0E10 E5          	pop b				; get file lba
2431   0E11 FD 43       	mov [d], b			; save lba	
2432   0E13             	
2433   0E13             	; set file creation date	
2434   0E13 58 04 00    	add d, 4
2435   0E16 19 04       	mov al, 4
2436   0E18 05 01       	syscall sys_rtc
2437   0E1A 1A          	mov al, ah
2438   0E1B 3E          	mov [d], al			; set day
2439   0E1C             	
2440   0E1C 79          	inc d
2441   0E1D 19 05       	mov al, 5
2442   0E1F 05 01       	syscall sys_rtc
2443   0E21 1A          	mov al, ah
2444   0E22 3E          	mov [d], al			; set month
2445   0E23             	
2446   0E23 79          	inc d
2447   0E24 19 06       	mov al, 6
2448   0E26 05 01       	syscall sys_rtc
2449   0E28 1A          	mov al, ah
2450   0E29 3E          	mov [d], al			; set year
2451   0E2A             	
2452   0E2A             ; write sector into disk for new directory entry
2453   0E2A FD 27       	mov b, g
2454   0E2C 38 00 00    	mov c, 0
2455   0E2F 3B A2 33    	mov d, transient_area
2456   0E32 10 03 01    	mov a, $0103			; disk write, 1 sector
2457   0E35 05 02       	syscall sys_ide		; write sector
2458   0E37 07 0D 14    	call printnl
2459   0E3A 06          	sysret
2460   0E3B             
2461   0E3B             
2462   0E3B             
2463   0E3B             ;------------------------------------------------------------------------------------------------------;
2464   0E3B             ; create new binary file
2465   0E3B             ;------------------------------------------------------------------------------------------------------;
2466   0E3B             ; search for first null block
2467   0E3B             fs_mkbin:
2468   0E3B 19 00         mov al, 0
2469   0E3D 3D 8A 19      mov [sys_echo_on], al ; disable echo
2470   0E40 FD 4E         mov si, d
2471   0E42 FD 4F A2 1F   mov di, user_data
2472   0E46 38 00 02      mov c, 512
2473   0E49 04            load                          ; load data from user-space
2474   0E4A 26 A0 00      mov b, fs_lba_start           ; files start when directories end
2475   0E4D 38 00 00      mov c, 0                      ; upper lba = 0
2476   0E50             fs_mkbin_l1:  
2477   0E50 22 01         mov ah, $01                  ; 1 sector
2478   0E52 3B A2 33      mov d, transient_area
2479   0E55 07 F6 06      call ide_read_sect            ; read sector
2480   0E58 BD 00         cmp byte[d], 0                ; check for null
2481   0E5A C6 63 0E      je fs_mkbin_found_null
2482   0E5D 55 20 00      add b, fs_sectors_per_file
2483   0E60 0A 50 0E      jmp fs_mkbin_l1
2484   0E63             fs_mkbin_found_null:
2485   0E63 D8            push b                        ; save lba
2486   0E64             ;create header file by grabbing file name from parameter
2487   0E64 FD 4F A2 35   mov di, transient_area + 512  ; pointer to file contents
2488   0E68 07 DE 11      call _load_hex                ; load binary hex
2489   0E6B D9            push c                        ; save size (nbr of bytes)
2490   0E6C 19 01         mov al, 1
2491   0E6E 3D A2 33      mov [transient_area], al      ; mark sectors as used (not null)
2492   0E71 FD 10         cla
2493   0E73 42 97 19      mov [index], a
2494   0E76 3B A2 33      mov d, transient_area
2495   0E79 13            mov a, d
2496   0E7A 42 99 19      mov [buffer_addr], a
2497   0E7D             fs_mkbin_l2:
2498   0E7D 38 00 00      mov c, 0
2499   0E80 22 01         mov ah, $01                   ; disk write, 1 sector
2500   0E82 07 1C 07      call ide_write_sect           ; write sector
2501   0E85 14 97 19      mov a, [index]
2502   0E88 77            inc a
2503   0E89 42 97 19      mov [index], a
2504   0E8C AF 20 00      cmp a, fs_sectors_per_file    ; remove 1 from this because we dont count the header sector
2505   0E8F C6 A1 0E      je fs_mkbin_add_to_dir
2506   0E92 FD 77         inc b
2507   0E94 14 99 19      mov a, [buffer_addr]
2508   0E97 53 00 02      add a, 512
2509   0E9A 42 99 19      mov [buffer_addr], a
2510   0E9D 3C            mov d, a
2511   0E9E 0A 7D 0E      jmp fs_mkbin_l2
2512   0EA1             ; now we add the file to the current directory!
2513   0EA1             fs_mkbin_add_to_dir:  
2514   0EA1 14 9F 19      mov a, [current_dir_id]
2515   0EA4 77            inc a
2516   0EA5 27            mov b, a                      ; metadata sector
2517   0EA6 38 00 00      mov c, 0
2518   0EA9 FD 79         mov g, b                      ; save lba
2519   0EAB 3B A2 33      mov d, transient_area
2520   0EAE 22 01         mov ah, $01                  ; 1 sector
2521   0EB0 07 F6 06      call ide_read_sect            ; read metadata sector
2522   0EB3             fs_mkbin_add_to_dir_l2:
2523   0EB3 BD 00         cmp byte[d], 0
2524   0EB5 C6 BE 0E      je fs_mkbin_add_to_dir_null
2525   0EB8 58 20 00      add d, fst_entry_size
2526   0EBB 0A B3 0E      jmp fs_mkbin_add_to_dir_l2   ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
2527   0EBE             fs_mkbin_add_to_dir_null:
2528   0EBE FD 4D A2 1F   mov si, user_data
2529   0EC2 FD 50         mov di, d
2530   0EC4 07 B8 12      call _strcpy                  ; copy file name
2531   0EC7 58 18 00      add d, 24                     ; skip name
2532   0ECA 19 03         mov al, %00000011             ; type=file, no execute, write, read, 
2533   0ECC 3E            mov [d], al
2534   0ECD 58 03 00      add d, 3
2535   0ED0 E4            pop a
2536   0ED1 43            mov [d], a
2537   0ED2 63 02 00      sub d, 2
2538   0ED5 E5            pop b                         ; get file lba
2539   0ED6 FD 43         mov [d], b                    ; save lba
2540   0ED8               ; set file creation date  
2541   0ED8 58 04 00      add d, 4
2542   0EDB 19 04         mov al, 4
2543   0EDD 05 01         syscall sys_rtc
2544   0EDF 1A            mov al, ah
2545   0EE0 3E            mov [d], al                   ; set day
2546   0EE1 79            inc d
2547   0EE2 19 05         mov al, 5
2548   0EE4 05 01         syscall sys_rtc
2549   0EE6 1A            mov al, ah
2550   0EE7 3E            mov [d], al                   ; set month
2551   0EE8 79            inc d
2552   0EE9 19 06         mov al, 6
2553   0EEB 05 01         syscall sys_rtc
2554   0EED 1A            mov al, ah
2555   0EEE 3E            mov [d], al                   ; set year
2556   0EEF             ; write sector into disk for new directory entry
2557   0EEF FD 27         mov b, g
2558   0EF1 38 00 00      mov c, 0
2559   0EF4 3B A2 33      mov d, transient_area
2560   0EF7 22 01         mov ah, $01                   ; disk write, 1 sector
2561   0EF9 07 1C 07      call ide_write_sect           ; write sector
2562   0EFC 19 01         mov al, 1
2563   0EFE 3D 8A 19      mov [sys_echo_on], al ; enable echo
2564   0F01 06            sysret
2565   0F02             
2566   0F02             ;------------------------------------------------------------------------------------------------------;
2567   0F02             ; pwd - print working directory
2568   0F02             ;------------------------------------------------------------------------------------------------------;    
2569   0F02             fs_pwd:
2570   0F02 3B 22 1F      mov d, filename
2571   0F05 19 00         mov al, 0
2572   0F07 3E            mov [d], al                   ; initialize path string 
2573   0F08 14 9F 19      mov a, [current_dir_id]
2574   0F0B 07 6C 0A      call fs_dir_id_to_path_e0
2575   0F0E 3B 22 1F      mov d, filename
2576   0F11 07 4C 12      call _strrev
2577   0F14 07 60 14      call _puts
2578   0F17 07 0D 14      call printnl
2579   0F1A 06            sysret
2580   0F1B             
2581   0F1B             ;------------------------------------------------------------------------------------------------------;
2582   0F1B             ; get current directory lba
2583   0F1B             ; a: returned lba
2584   0F1B             ;------------------------------------------------------------------------------------------------------;
2585   0F1B             cmd_get_curr_dir_lba:
2586   0F1B 14 9F 19      mov a, [current_dir_id]
2587   0F1E 06            sysret
2588   0F1F             
2589   0F1F             ;------------------------------------------------------------------------------------------------------;
2590   0F1F             ; cat
2591   0F1F             ; userspace destination data pointer in d
2592   0F1F             ; filename starts at d, but is overwritten after the read is made
2593   0F1F             ;------------------------------------------------------------------------------------------------------;:
2594   0F1F             fs_cat:
2595   0F1F DA            push d                              ; save userspace file data destination
2596   0F20 FD 4E         mov si, d
2597   0F22 FD 4F A2 1F   mov di, user_data
2598   0F26 38 00 02      mov c, 512
2599   0F29 04            load                                ; copy filename from user-space
2600   0F2A 29 9F 19      mov b, [current_dir_id]
2601   0F2D FD 77         inc b                               ; metadata sector
2602   0F2F 38 00 00      mov c, 0                            ; upper lba = 0
2603   0F32 22 01         mov ah, $01                  ; 1 sector
2604   0F34 3B A2 31      mov d, transient_area-512
2605   0F37 07 F6 06      call ide_read_sect                  ; read directory
2606   0F3A FD 10         cla
2607   0F3C 42 97 19      mov [index], a                      ; reset file counter
2608   0F3F             fs_cat_l1:
2609   0F3F FD 4E         mov si, d
2610   0F41 FD 4F A2 1F   mov di, user_data
2611   0F45 07 A3 12      call _strcmp
2612   0F48 C6 5E 0F      je fs_cat_found_entry
2613   0F4B 58 20 00      add d, 32
2614   0F4E 14 97 19      mov a, [index]
2615   0F51 77            inc a
2616   0F52 42 97 19      mov [index], a
2617   0F55 AF 10 00      cmp a, fst_files_per_dir
2618   0F58 C6 79 0F      je fs_cat_not_found
2619   0F5B 0A 3F 0F      jmp fs_cat_l1
2620   0F5E             fs_cat_found_entry:
2621   0F5E 58 19 00      add d, 25                           ; get to dirid of file in disk
2622   0F61 2A            mov b, [d]                          ; get lba
2623   0F62 FD 77         inc b                               ; add 1 to b because the lba for data comes after the header sector 
2624   0F64 3B A2 33      mov d, transient_area  
2625   0F67 38 00 00      mov c, 0
2626   0F6A 22 1F         mov ah, fs_sectors_per_file-1       ; nbr sectors
2627   0F6C 07 F6 06      call ide_read_sect                  ; read sectors
2628   0F6F F0            pop di                              ; write userspace file data destination to di
2629   0F70 FD 4D A2 33   mov si, transient_area              ; data origin
2630   0F74 38 00 3E      mov c, 512*(fs_sectors_per_file-1)
2631   0F77 03            store
2632   0F78 06            sysret
2633   0F79             fs_cat_not_found:
2634   0F79 E7            pop d
2635   0F7A 06            sysret
2636   0F7B             
2637   0F7B             ;------------------------------------------------------------------------------------------------------;
2638   0F7B             ; rmdir - remove dir by dirid
2639   0F7B             ;------------------------------------------------------------------------------------------------------;
2640   0F7B             ; deletes a directory entry in the given directory's file list 
2641   0F7B             ; also deletes the actual directory entry in the fst
2642   0F7B             ; synopsis: rmdir /usr/local/testdir
2643   0F7B             ; b = dirid
2644   0F7B             fs_rmdir:
2645   0F7B FD 79         mov g, b
2646   0F7D 11            mov a, b
2647   0F7E 07 A8 0A      call get_parentid_from_dirid  ; now get the directory's parent, in a
2648   0F81 D7            push a                        ; save dirid
2649   0F82             ; search for directory's entry in the parent's directory then and delete it
2650   0F82 77            inc a                         ; metadata sector
2651   0F83 27            mov b, a
2652   0F84 38 00 00      mov c, 0                      ; upper lba = 0
2653   0F87 22 01         mov ah, $01          ;
2654   0F89 3B A2 33      mov d, transient_area
2655   0F8C 07 F6 06      call ide_read_sect            ; read directory
2656   0F8F FD 10         cla
2657   0F91 42 97 19      mov [index], a                ; reset file counter
2658   0F94 FD 27         mov b, g                      ; retrieve directory's dirid
2659   0F96             fs_rmdir_l1:
2660   0F96 16 19 00      mov a, [d + 25]               ; get entry's dirid/lba value
2661   0F99 B0            cmp a, b                      ; compare dirid's to find the directory
2662   0F9A C6 B0 0F      je fs_rmdir_found_entry
2663   0F9D 58 20 00      add d, 32
2664   0FA0 14 97 19      mov a, [index]
2665   0FA3 77            inc a
2666   0FA4 42 97 19      mov [index], a
2667   0FA7 AF 10 00      cmp a, fst_files_per_dir
2668   0FAA C6 D5 0F      je fs_rmdir_not_found
2669   0FAD 0A 96 0F      jmp fs_rmdir_l1
2670   0FB0             fs_rmdir_found_entry:
2671   0FB0 FD 10         cla
2672   0FB2 3E            mov [d], al                   ; make filename null
2673   0FB3 44 19 00      mov [d + 25], a               ; clear dirid/lba as well not to generate problems with previously deleted directories
2674   0FB6 E5            pop b
2675   0FB7 FD 77         inc b                         ; metadata sector
2676   0FB9 38 00 00      mov c, 0                      ; upper lba = 0
2677   0FBC 22 01         mov ah, $01          ; 
2678   0FBE 3B A2 33      mov d, transient_area
2679   0FC1 07 1C 07      call ide_write_sect           ; write sector and erase file's entry in the current dir
2680   0FC4             
2681   0FC4 FD 27         mov b, g
2682   0FC6 3B A2 33      mov d, transient_area  
2683   0FC9 FD 10         cla
2684   0FCB 3E            mov [d], al                   ; make directory's name header null for re-use
2685   0FCC 38 00 00      mov c, 0
2686   0FCF 22 01         mov ah, $01                   ; disk write 1 sect
2687   0FD1 07 1C 07      call ide_write_sect           ; delete directory given by dirid in b
2688   0FD4 06            sysret
2689   0FD5             fs_rmdir_not_found:
2690   0FD5 E5            pop b
2691   0FD6 06            sysret
2692   0FD7             
2693   0FD7             ;------------------------------------------------------------------------------------------------------;
2694   0FD7             ; rm - remove file
2695   0FD7             ;------------------------------------------------------------------------------------------------------;
2696   0FD7             ; frees up the data sectors for the file further down the disk
2697   0FD7             ; deletes file entry in the directory's file list 
2698   0FD7             fs_rm:
2699   0FD7 FD 4E         mov si, d
2700   0FD9 FD 4F A2 1F   mov di, user_data
2701   0FDD 38 00 02      mov c, 512
2702   0FE0 04            load                          ; load data from user-space
2703   0FE1 14 9F 19      mov a, [current_dir_id]
2704   0FE4 77            inc a                         ; metadata sector
2705   0FE5 27            mov b, a
2706   0FE6 38 00 00      mov c, 0                      ; upper lba = 0
2707   0FE9 22 01         mov ah, $01                  ; 1 sector
2708   0FEB 3B A2 33      mov d, transient_area
2709   0FEE 07 F6 06      call ide_read_sect            ; read directory
2710   0FF1 10 00 00      mov a, 0
2711   0FF4 42 97 19      mov [index], a                ; reset file counter
2712   0FF7             fs_rm_l1:
2713   0FF7 FD 4E         mov si, d
2714   0FF9 FD 4F A2 1F   mov di, user_data
2715   0FFD 07 A3 12      call _strcmp
2716   1000 C6 16 10      je fs_rm_found_entry
2717   1003 58 20 00      add d, 32
2718   1006 14 97 19      mov a, [index]
2719   1009 77            inc a
2720   100A 42 97 19      mov [index], a
2721   100D AF 10 00      cmp a, fst_files_per_dir
2722   1010 C6 3E 10      je fs_rm_not_found
2723   1013 0A F7 0F      jmp fs_rm_l1
2724   1016             fs_rm_found_entry:
2725   1016 2B 19 00      mov b, [d + 25]               ; get lba
2726   1019 FD 79         mov g, b                      ; save lba
2727   101B 19 00         mov al, 0
2728   101D 3E            mov [d], al                   ; make file entry null
2729   101E 14 9F 19      mov a, [current_dir_id]
2730   1021 77            inc a                         ; metadata sector
2731   1022 27            mov b, a
2732   1023 38 00 00      mov c, 0                      ; upper lba = 0
2733   1026 22 01         mov ah, $01                   ; disk write
2734   1028 3B A2 33      mov d, transient_area
2735   102B 07 1C 07      call ide_write_sect           ; write sector and erase file's entry in the current dir
2736   102E 3B A2 33      mov d, transient_area  
2737   1031 19 00         mov al, 0
2738   1033 3E            mov [d], al                   ; make file's data header null for re-use
2739   1034 38 00 00      mov c, 0
2740   1037 FD 27         mov b, g                      ; get data header lba
2741   1039 22 01         mov ah, $01                   ; disk write 1 sect
2742   103B 07 1C 07      call ide_write_sect           ; write sector
2743   103E             fs_rm_not_found:  
2744   103E 06            sysret  
2745   103F             
2746   103F             ;------------------------------------------------------------------------------------------------------;
2747   103F             ; mv - move / change file name
2748   103F             ;------------------------------------------------------------------------------------------------------;
2749   103F             fs_mv:
2750   103F FD 4E         mov si, d
2751   1041 FD 4F A2 1F   mov di, user_data
2752   1045 38 00 02      mov c, 512
2753   1048 04            load                          ; load data from user-space
2754   1049 14 9F 19      mov a, [current_dir_id]
2755   104C 77            inc a                         ; metadata sector
2756   104D 27            mov b, a  
2757   104E 38 00 00      mov c, 0                      ; upper lba = 0
2758   1051 22 01         mov ah, $01                  ; 1 sector
2759   1053 3B A2 33      mov d, transient_area
2760   1056 07 F6 06      call ide_read_sect            ; read directory
2761   1059 FD 10         cla
2762   105B 42 97 19      mov [index], a                ; reset file counter
2763   105E             fs_mv_l1:
2764   105E FD 4E         mov si, d
2765   1060 FD 4F A2 1F   mov di, user_data
2766   1064 07 A3 12      call _strcmp
2767   1067 C6 7D 10      je fs_mv_found_entry
2768   106A 58 20 00      add d, 32
2769   106D 14 97 19      mov a, [index]
2770   1070 77            inc a
2771   1071 42 97 19      mov [index], a
2772   1074 AF 10 00      cmp a, fst_files_per_dir
2773   1077 C6 AF 10      je fs_mv_not_found
2774   107A 0A 5E 10      jmp fs_mv_l1
2775   107D             fs_mv_found_entry:  
2776   107D DA            push d
2777   107E FD 4D 22 20   mov si, user_data + 128       ; (0...127) = original filename , (128...255) = new name
2778   1082 FD 50         mov di, d
2779   1084 07 B8 12      call _strcpy  
2780   1087 38 00 00      mov c, 0
2781   108A 3B A2 33      mov d, transient_area
2782   108D 22 01         mov ah, $01                   ; disk write 1 sect
2783   108F 07 1C 07      call ide_write_sect           ; write sector
2784   1092 E7            pop d
2785   1093             ;; need to check whether its a dir or a file here ;;;
2786   1093 2B 19 00      mov b, [d + 25]               ; get the dirid of the directory so we can locate its own entry in the list
2787   1096 22 01         mov ah, $01
2788   1098 3B A2 33      mov d, transient_area
2789   109B 38 00 00      mov c, 0
2790   109E 07 F6 06      call ide_read_sect            ; read directory entry
2791   10A1 FD 4D 22 20   mov si, user_data + 128
2792   10A5 FD 50         mov di, d
2793   10A7 07 B8 12      call _strcpy                  ; change directory's name
2794   10AA 22 01         mov ah, $01
2795   10AC 07 1C 07      call ide_write_sect           ; rewrite directory back to disk
2796   10AF             fs_mv_not_found:
2797   10AF 06            sysret
2798   10B0             
2799   10B0             
2800   10B0             ;----------------------------------------------------------------------------------------------------;
2801   10B0             ; process index in a
2802   10B0             ;----------------------------------------------------------------------------------------------------;
2803   10B0             find_free_proc:
2804   10B0 FD 4D 13 1D   mov si, proc_availab_table + 1      ; skip process 0 (kernel)
2805   10B4             find_free_proc_l0:
2806   10B4 F6            lodsb                               ; get process state
2807   10B5 B9 00         cmp al, 0
2808   10B7 C6 BD 10      je find_free_proc_free              ; if free, jump
2809   10BA 0A B4 10      jmp find_free_proc_l0               ; else, goto next
2810   10BD             find_free_proc_free:
2811   10BD 4E            mov a, si
2812   10BE 5F 13 1D      sub a, 1 + proc_availab_table       ; get process index
2813   10C1 09            ret
2814   10C2               
2815   10C2             
2816   10C2             ;----------------------------------------------------------------------------------------------------;
2817   10C2             ; process index in al
2818   10C2             ;----------------------------------------------------------------------------------------------------;
2819   10C2             proc_memory_map:
2820   10C2 22 00         mov ah, 0
2821   10C4 27            mov b, a                      ; page in bl, 0 in bh
2822   10C5 FD 9D 05      shl a, 5                      ; multiply by 32
2823   10C8 39            mov c, a                      ; save in c
2824   10C9 57 20 00      add c, 32
2825   10CC             proc_memory_map_l0:
2826   10CC 02            pagemap
2827   10CD 55 00 08      add b, $0800                  ; increase page number (msb 5 bits of bh only)
2828   10D0 53 01 00      add a, 1                      ; increase both 
2829   10D3 B1            cmp a, c                      ; check to see if we reached the end of memory
2830   10D4 C7 CC 10      jne proc_memory_map_l0
2831   10D7 09            ret
2832   10D8               
2833   10D8             
2834   10D8             ;----------------------------------------------------------------------------------------------------;
2835   10D8             ; terminate process
2836   10D8             ;----------------------------------------------------------------------------------------------------;
2837   10D8             syscall_terminate_proc:
2838   10D8 51 05 00      add sp, 5                            ; clear stack of the values that were pushed by the interrupt (sp, status, pc)
2839   10DB                                                    ; since they will not be used for anything here.
2840   10DB 1D 96 19      mov al, [active_proc_index]
2841   10DE 22 00         mov ah, 0  
2842   10E0 FD 9D 05      shl a, 5                             ; x32
2843   10E3 53 22 1D      add a, proc_names
2844   10E6 3C            mov d, a
2845   10E7 19 00         mov al, 0
2846   10E9 3E            mov [d], al                           ; nullify process name
2847   10EA             
2848   10EA 1D 96 19      mov al, [active_proc_index]
2849   10ED 22 00         mov ah, 0  
2850   10EF 3C            mov d, a
2851   10F0 19 00         mov al, 0
2852   10F2 3F 12 1D      mov [d + proc_availab_table], al    ; make process empty again
2853   10F5               
2854   10F5 1D 95 19      mov al, [nbr_active_procs]          ; decrease nbr of active processes
2855   10F8 80            dec al
2856   10F9 3D 95 19      mov [nbr_active_procs], al
2857   10FC             
2858   10FC             ; now load the shell process again
2859   10FC 19 02         mov al, 2                           ; next process = process 2 = shell
2860   10FE 3D 96 19      mov [active_proc_index], al         ; set next active proc
2861   1101             
2862   1101             ; calculate lut entry for next process
2863   1101 22 00         mov ah, 0
2864   1103 FD 99         shl a                               ; x2
2865   1105 B7 CE 11      mov a, [proc_table_convert + a]     ; get process state start index  
2866   1108               
2867   1108 4D            mov si, a                           ; source is proc state block
2868   1109 48            mov a, sp
2869   110A 5F 13 00      sub a, 19
2870   110D 4F            mov di, a                           ; destination is kernel stack
2871   110E             ; restore sp
2872   110E 7D            dec a
2873   110F 47            mov sp, a
2874   1110 38 14 00      mov c, 20
2875   1113 FD F5         rep movsb
2876   1115             ; set vm process
2877   1115 1D 96 19      mov al, [active_proc_index]
2878   1118 01            setptb
2879   1119                 
2880   1119 4C            popa
2881   111A 06            sysret
2882   111B             
2883   111B             ;----------------------------------------------------------------------------------------------------;
2884   111B             ; pause process
2885   111B             ;----------------------------------------------------------------------------------------------------;
2886   111B             syscall_pause_proc:
2887   111B             ; save all registers into kernel stack
2888   111B 4B            pusha
2889   111C 22 00         mov ah, 0
2890   111E 1D 96 19      mov al, [active_proc_index]
2891   1121 FD 99         shl a              ; x2
2892   1123 B7 CE 11      mov a, [proc_table_convert + a]   ; get process state start index
2893   1126                 
2894   1126 4F            mov di, a
2895   1127 48            mov a, sp
2896   1128 77            inc a
2897   1129 4D            mov si, a
2898   112A 38 14 00      mov c, 20
2899   112D FD F5         rep movsb                         ; save process state!
2900   112F             ; restore kernel stack position to point before interrupt arrived
2901   112F 51 14 00      add sp, 20
2902   1132             ; now load the shell process again
2903   1132 19 02         mov al, 2                         ; next process = process 2 = shell
2904   1134 3D 96 19      mov [active_proc_index], al       ; set next active proc
2905   1137             
2906   1137             ; calculate lut entry for next process
2907   1137 22 00         mov ah, 0
2908   1139 FD 99         shl a                             ; x2
2909   113B B7 CE 11      mov a, [proc_table_convert + a]   ; get process state start index  
2910   113E               
2911   113E 4D            mov si, a                         ; source is proc state block
2912   113F 48            mov a, sp
2913   1140 5F 13 00      sub a, 19
2914   1143 4F            mov di, a                         ; destination is kernel stack
2915   1144             ; restore sp
2916   1144 7D            dec a
2917   1145 47            mov sp, a
2918   1146 38 14 00      mov c, 20
2919   1149 FD F5         rep movsb
2920   114B             ; set vm process
2921   114B 1D 96 19      mov al, [active_proc_index]
2922   114E 01            setptb
2923   114F                 
2924   114F 4C            popa
2925   1150 06            sysret
2926   1151             
2927   1151             ;----------------------------------------------------------------------------------------------------;
2928   1151             ; create a new process
2929   1151             ; d = path of the process file to be createed
2930   1151             ; b = arguments ptr
2931   1151             ;----------------------------------------------------------------------------------------------------;
2932   1151             syscall_create_proc:
2933   1151             ; we save the active process first  
2934   1151 4B            pusha
2935   1152 22 00         mov ah, 0
2936   1154 1D 96 19      mov al, [active_proc_index]
2937   1157 FD 99         shl a              ; x2
2938   1159 B7 CE 11      mov a, [proc_table_convert + a]    ; get process state table's start index
2939   115C               
2940   115C 4F            mov di, a
2941   115D 48            mov a, sp
2942   115E 77            inc a
2943   115F 4D            mov si, a
2944   1160 38 14 00      mov c, 20
2945   1163 FD F5         rep movsb                          ; save process state!
2946   1165             ; restore kernel stack position to point before interrupt arrived
2947   1165 51 14 00      add sp, 20
2948   1168               
2949   1168 FD 4E         mov si, d                          ; copy the file path
2950   116A FD 4F A2 1F   mov di, user_data
2951   116E 38 00 02      mov c, 512
2952   1171 04            load
2953   1172 11            mov a, b
2954   1173 4D            mov si, a                          ; copy the arguments
2955   1174 FD 4F A2 31   mov di, scrap_sector
2956   1178 38 00 02      mov c, 512
2957   117B 04            load
2958   117C 07 EE 0B      call loadfile_from_path            ; load the process file from disk by path (path is in user_data)
2959   117F                                                  ; the file data is loaded into transient_area
2960   117F             ; now we allocate a new process  
2961   117F 07 B0 10      call find_free_proc                ; index in a
2962   1182 01            setptb 
2963   1183 07 C2 10      call proc_memory_map               ; map process memory pages
2964   1186             ; copy arguments into process's memory
2965   1186 FD 4D A2 31   mov si, scrap_sector
2966   118A FD 4F 00 00   mov di, 0
2967   118E 38 00 02      mov c, 512
2968   1191 03            store
2969   1192             ; now copy process binary data into process's memory
2970   1192 FD 4D A2 33   mov si, transient_area
2971   1196 FD 4F 00 04   mov di, text_org                   ; code origin address for all user processes
2972   119A 38 00 40      mov c, fs_file_size                ; size of memory space to copy, which is equal to the max file size in disk (for now)
2973   119D 03            store                              ; copy process data
2974   119E                 
2975   119E 07 B0 10      call find_free_proc                ; index in a
2976   11A1 3D 96 19      mov [active_proc_index], al        ; set new active process
2977   11A4 FD 9D 05      shl a, 5                           ; x32
2978   11A7 53 22 1D      add a, proc_names
2979   11AA 4F            mov di, a
2980   11AB FD 4D A2 1F   mov si, user_data                  ; copy and store process filename
2981   11AF 07 B8 12      call _strcpy
2982   11B2               
2983   11B2 07 B0 10      call find_free_proc                ; index in a
2984   11B5 3C            mov d, a
2985   11B6 19 01         mov al, 1
2986   11B8 3F 12 1D      mov [d + proc_availab_table], al   ; make process busy
2987   11BB               
2988   11BB 1D 95 19      mov al, [nbr_active_procs]         ; increase nbr of active processes
2989   11BE 7A            inc al
2990   11BF 3D 95 19      mov [nbr_active_procs], al
2991   11C2             ; launch process
2992   11C2 FD D7 FF FF   push word $ffff 
2993   11C6 FD DB 0E      push byte %00001110                ; dma_ack = 0, interrupts enabled = 1, mode = user, paging = on, halt=0, display_reg_load=0, dir=0
2994   11C9 FD D7 00 04   push word text_org
2995   11CD 06            sysret
2996   11CE             
2997   11CE             proc_table_convert:
2998   11CE D2 1B         .dw proc_state_table + 0
2999   11D0 E6 1B         .dw proc_state_table + 20
3000   11D2 FA 1B         .dw proc_state_table + 40
3001   11D4 0E 1C         .dw proc_state_table + 60
3002   11D6 22 1C         .dw proc_state_table + 80
3003   11D8 36 1C         .dw proc_state_table + 100
3004   11DA 4A 1C         .dw proc_state_table + 120
3005   11DC 5E 1C         .dw proc_state_table + 140
3006   11DE               
3007   11DE             ;----------------------------------------------------------------------------------------------;
3008   11DE             ; get hex file
3009   11DE             ; di = destination address
3010   11DE             ; return length in bytes in c
3011   11DE             ;----------------------------------------------------------------------------------------------;
3012   11DE             _load_hex:
3013   11DE D7            push a
3014   11DF D8            push b
3015   11E0 DA            push d
3016   11E1 E2            push si
3017   11E2 E3            push di
3018   11E3 38 00 00      mov c, 0
3019   11E6 50            mov a, di
3020   11E7 3C            mov d, a          ; start of string data block
3021   11E8 07 3B 13      call _gets        ; get program string
3022   11EB 4D            mov si, a
3023   11EC             __load_hex_loop:
3024   11EC F6            lodsb             ; load from [si] to al
3025   11ED B9 00         cmp al, 0         ; check if ascii 0
3026   11EF C6 FD 11      jz __load_hex_ret
3027   11F2 36            mov bh, al
3028   11F3 F6            lodsb
3029   11F4 2F            mov bl, al
3030   11F5 07 F1 12      call _atoi        ; convert ascii byte in b to int (to al)
3031   11F8 F7            stosb             ; store al to [di]
3032   11F9 78            inc c
3033   11FA 0A EC 11      jmp __load_hex_loop
3034   11FD             __load_hex_ret:
3035   11FD F0            pop di
3036   11FE EF            pop si
3037   11FF E7            pop d
3038   1200 E5            pop b
3039   1201 E4            pop a
3040   1202 09            ret
3041   1203             
3042   1203             ; synopsis: look inside a certain directory for files/directories
3043   1203             ; before calling this function, cd into required directory
3044   1203             ; for each entry inside directory:
3045   1203             ;  if entry is a file:
3046   1203             ;    compare filename to searched filename
3047   1203             ;    if filenames are the same, print filename
3048   1203             ;  else if entry is a directory:
3049   1203             ;    cd to the given directory
3050   1203             ;    recursively call cmd_find
3051   1203             ;    cd outside previous directory
3052   1203             ;  if current entry == last entry, return
3053   1203             ; endfor
3054   1203             f_find:
3055   1203 09            ret
3056   1204             
3057   1204             
3058   1204             ; ---------------------------------------------------------------------
3059   1204             ; kernel reset vector
3060   1204             ; ---------------------------------------------------------------------
3061   1204             kernel_reset_vector:  
3062   1204 FD 49 FF F7   mov bp, _stack_begin
3063   1208 FD 47 FF F7   mov sp, _stack_begin
3064   120C               
3065   120C 19 A1         mov al, %10100001             ; mask out timer interrupt for now - enable uarts and fdc irqs 
3066   120E FD 0F         stomsk                        
3067   1210 FD 0C         sti  
3068   1212             
3069   1212 0C            lodstat
3070   1213 87 DF         and al, %11011111             ; disable display register loading
3071   1215 0D            stostat
3072   1216               
3073   1216             ; reset fifo pointers
3074   1216 10 A2 21      mov a, fifo
3075   1219 3B 9B 19      mov d, fifo_in
3076   121C 43            mov [d], a
3077   121D 3B 9D 19      mov d, fifo_out
3078   1220 43            mov [d], a  
3079   1221 19 02         mov al, 2
3080   1223 05 03         syscall sys_io                ; enable uart in interrupt mode
3081   1225             
3082   1225 3B F0 19      mov d, s_kernel_welcome
3083   1228 07 60 14      call _puts
3084   122B             
3085   122B 3B 91 1B      mov d, s_fdc_config
3086   122E 07 60 14      call _puts
3087   1231 F2 C0 FF 0D   mov byte [_fdc_config], %00001101  ; %00001001 : turn led on / head load, disable double density, select side 0, select drive 0, do not select drive 1
3088   1235 F2 C8 FF 0B   mov byte [_fdc_stat_cmd], %00001011     ; leave this restore command in order to clear BUSY flag
3089   1239 F2 C9 FF 00   mov byte [_fdc_track], $00 ; reset track
3090   123D             
3091   123D 19 10         mov al, 16
3092   123F 05 04         syscall sys_filesystem        ; set root dirid
3093   1241             
3094   1241 3B B4 1A      mov d, s_prompt_init
3095   1244 07 60 14      call _puts
3096   1247 3B A1 19      mov d, s_init_path
3097   124A 05 05         syscall sys_create_proc       ; launch init as a new process
3098   124C             
3099   124C             ; file includes
3100   124C             .include "bios.exp"         ; to obtain the bios_reset_vector location (for reboots)
0001+  124C             boot_origin      .EQU  $8004
0002+  124C             bios_uart        .EQU  $0002
0003+  124C             bios_ide         .EQU  $0003
0004+  124C             bios_reset_vector .EQU  $01c0
0005+  124C             ide_buffer       .EQU  $8204
3101   124C             .include "lib/stdio.asm"
0001+  124C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  124C             ; stdio.s
0003+  124C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  124C             .include "lib/string.asm"
0001++ 124C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 124C             ; string.s
0003++ 124C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 124C             
0005++ 124C             
0006++ 124C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 124C             ; _strrev
0008++ 124C             ; reverse a string
0009++ 124C             ; d = string address
0010++ 124C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 124C             ; 01234
0012++ 124C             _strrev:
0013++ 124C 4B          	pusha
0014++ 124D 07 93 12    	call _strlen	; length in c
0015++ 1250 12          	mov a, c
0016++ 1251 AF 01 00    	cmp a, 1
0017++ 1254 D0 6E 12    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1257 7D          	dec a
0019++ 1258 FD 4E       	mov si, d	; beginning of string
0020++ 125A FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 125C 59          	add d, a	; end of string
0022++ 125D 12          	mov a, c
0023++ 125E FD 9B       	shr a		; divide by 2
0024++ 1260 39          	mov c, a	; c now counts the steps
0025++ 1261             _strrev_l0:
0026++ 1261 32          	mov bl, [d]	; save load right-side char into bl
0027++ 1262 F6          	lodsb		; load left-side char into al; increase si
0028++ 1263 3E          	mov [d], al	; store left char into right side
0029++ 1264 1B          	mov al, bl
0030++ 1265 F7          	stosb		; store right-side char into left-side; increase di
0031++ 1266 7E          	dec c
0032++ 1267 7F          	dec d
0033++ 1268 C2 00 00    	cmp c, 0
0034++ 126B C7 61 12    	jne _strrev_l0
0035++ 126E             _strrev_end:
0036++ 126E 4C          	popa
0037++ 126F 09          	ret
0038++ 1270             	
0039++ 1270             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1270             ; _strchr
0041++ 1270             ; search string in d for char in al
0042++ 1270             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1270             _strchr:
0044++ 1270             _strchr_l0:
0045++ 1270 32          	mov bl, [d]
0046++ 1271 C1 00       	cmp bl, 0
0047++ 1273 C6 7E 12    	je _strchr_end
0048++ 1276 BA          	cmp al, bl
0049++ 1277 C6 7E 12    	je _strchr_end
0050++ 127A 79          	inc d
0051++ 127B 0A 70 12    	jmp _strchr_l0
0052++ 127E             _strchr_end:
0053++ 127E 1B          	mov al, bl
0054++ 127F 09          	ret
0055++ 1280             
0056++ 1280             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1280             ; _strstr
0058++ 1280             ; find sub-string
0059++ 1280             ; str1 in si
0060++ 1280             ; str2 in di
0061++ 1280             ; si points to end of source string
0062++ 1280             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1280             _strstr:
0064++ 1280 DB          	push al
0065++ 1281 DA          	push d
0066++ 1282 E3          	push di
0067++ 1283             _strstr_loop:
0068++ 1283 F3          	cmpsb					; compare a byte of the strings
0069++ 1284 C7 8F 12    	jne _strstr_ret
0070++ 1287 FC 00 00    	lea d, [di + 0]
0071++ 128A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 128C C7 83 12    	jne _strstr_loop				; equal chars but not at end
0073++ 128F             _strstr_ret:
0074++ 128F F0          	pop di
0075++ 1290 E7          	pop d
0076++ 1291 E8          	pop al
0077++ 1292 09          	ret
0078++ 1293             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1293             ; length of null terminated string
0080++ 1293             ; result in c
0081++ 1293             ; pointer in d
0082++ 1293             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1293             _strlen:
0084++ 1293 DA          	push d
0085++ 1294 38 00 00    	mov c, 0
0086++ 1297             _strlen_l1:
0087++ 1297 BD 00       	cmp byte [d], 0
0088++ 1299 C6 A1 12    	je _strlen_ret
0089++ 129C 79          	inc d
0090++ 129D 78          	inc c
0091++ 129E 0A 97 12    	jmp _strlen_l1
0092++ 12A1             _strlen_ret:
0093++ 12A1 E7          	pop d
0094++ 12A2 09          	ret
0095++ 12A3             
0096++ 12A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 12A3             ; strcmp
0098++ 12A3             ; compare two strings
0099++ 12A3             ; str1 in si
0100++ 12A3             ; str2 in di
0101++ 12A3             ; create a string compairon instrucion ?????
0102++ 12A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 12A3             _strcmp:
0104++ 12A3 DB          	push al
0105++ 12A4 DA          	push d
0106++ 12A5 E3          	push di
0107++ 12A6 E2          	push si
0108++ 12A7             _strcmp_loop:
0109++ 12A7 F3          	cmpsb					; compare a byte of the strings
0110++ 12A8 C7 B3 12    	jne _strcmp_ret
0111++ 12AB FB FF FF    	lea d, [si +- 1]
0112++ 12AE BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 12B0 C7 A7 12    	jne _strcmp_loop				; equal chars but not at end
0114++ 12B3             _strcmp_ret:
0115++ 12B3 EF          	pop si
0116++ 12B4 F0          	pop di
0117++ 12B5 E7          	pop d
0118++ 12B6 E8          	pop al
0119++ 12B7 09          	ret
0120++ 12B8             
0121++ 12B8             
0122++ 12B8             ; strcpy
0123++ 12B8             ; copy null terminated string from si to di
0124++ 12B8             ; source in si
0125++ 12B8             ; destination in di
0126++ 12B8             _strcpy:
0127++ 12B8 E2          	push si
0128++ 12B9 E3          	push di
0129++ 12BA DB          	push al
0130++ 12BB             _strcpy_l1:
0131++ 12BB F6          	lodsb
0132++ 12BC F7          	stosb
0133++ 12BD B9 00       	cmp al, 0
0134++ 12BF C7 BB 12    	jne _strcpy_l1
0135++ 12C2             _strcpy_end:
0136++ 12C2 E8          	pop al
0137++ 12C3 F0          	pop di
0138++ 12C4 EF          	pop si
0139++ 12C5 09          	ret
0140++ 12C6             
0141++ 12C6             ; strcat
0142++ 12C6             ; concatenate a null terminated string into string at di, from string at si
0143++ 12C6             ; source in si
0144++ 12C6             ; destination in di
0145++ 12C6             _strcat:
0146++ 12C6 E2          	push si
0147++ 12C7 E3          	push di
0148++ 12C8 D7          	push a
0149++ 12C9 DA          	push d
0150++ 12CA 50          	mov a, di
0151++ 12CB 3C          	mov d, a
0152++ 12CC             _strcat_goto_end_l1:
0153++ 12CC BD 00       	cmp byte[d], 0
0154++ 12CE C6 D5 12    	je _strcat_start
0155++ 12D1 79          	inc d
0156++ 12D2 0A CC 12    	jmp _strcat_goto_end_l1
0157++ 12D5             _strcat_start:
0158++ 12D5 FD 50       	mov di, d
0159++ 12D7             _strcat_l1:
0160++ 12D7 F6          	lodsb
0161++ 12D8 F7          	stosb
0162++ 12D9 B9 00       	cmp al, 0
0163++ 12DB C7 D7 12    	jne _strcat_l1
0164++ 12DE             _strcat_end:
0165++ 12DE E7          	pop d
0166++ 12DF E4          	pop a
0167++ 12E0 F0          	pop di
0168++ 12E1 EF          	pop si
0169++ 12E2 09          	ret
0170++ 12E3             
0171++ 12E3             
0005+  12E3             
0006+  12E3             
0007+  12E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  12E3             ; convert ascii 'o'..'f' to integer 0..15
0009+  12E3             ; ascii in bl
0010+  12E3             ; result in al
0011+  12E3             ; ascii for f = 0100 0110
0012+  12E3             ; ascii for 9 = 0011 1001
0013+  12E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  12E3             hex_ascii_encode:
0015+  12E3 1B            mov al, bl
0016+  12E4 93 40         test al, $40        ; test if letter or number
0017+  12E6 C7 EC 12      jnz hex_letter
0018+  12E9 87 0F         and al, $0f        ; get number
0019+  12EB 09            ret
0020+  12EC             hex_letter:
0021+  12EC 87 0F         and al, $0f        ; get letter
0022+  12EE 6A 09         add al, 9
0023+  12F0 09            ret
0024+  12F1             
0025+  12F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  12F1             ; atoi
0027+  12F1             ; 2 letter hex string in b
0028+  12F1             ; 8bit integer returned in al
0029+  12F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  12F1             _atoi:
0031+  12F1 D8            push b
0032+  12F2 07 E3 12      call hex_ascii_encode      ; convert bl to 4bit code in al
0033+  12F5 30            mov bl, bh
0034+  12F6 DB            push al          ; save a
0035+  12F7 07 E3 12      call hex_ascii_encode
0036+  12FA EA            pop bl  
0037+  12FB FD 9E 04      shl al, 4
0038+  12FE 8C            or al, bl
0039+  12FF E5            pop b
0040+  1300 09            ret  
0041+  1301             
0042+  1301             
0043+  1301             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  1301             ; scanf
0045+  1301             ; no need for explanations!
0046+  1301             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  1301             scanf:
0048+  1301 09            ret
0049+  1302             
0050+  1302             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  1302             ; itoa
0052+  1302             ; 8bit value in bl
0053+  1302             ; 2 byte ascii result in a
0054+  1302             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  1302             _itoa:
0056+  1302 DA            push d
0057+  1303 D8            push b
0058+  1304 A7 00         mov bh, 0
0059+  1306 FD A4 04      shr bl, 4  
0060+  1309 74            mov d, b
0061+  130A 1F 9C 15      mov al, [d + s_hex_digits]
0062+  130D 23            mov ah, al
0063+  130E               
0064+  130E E5            pop b
0065+  130F D8            push b
0066+  1310 A7 00         mov bh, 0
0067+  1312 FD 87 0F      and bl, $0f
0068+  1315 74            mov d, b
0069+  1316 1F 9C 15      mov al, [d + s_hex_digits]
0070+  1319 E5            pop b
0071+  131A E7            pop d
0072+  131B 09            ret
0073+  131C             
0074+  131C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  131C             ; hex string to binary
0076+  131C             ; di = destination address
0077+  131C             ; si = source
0078+  131C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  131C             _hex_to_int:
0080+  131C             _hex_to_int_l1:
0081+  131C F6            lodsb          ; load from [si] to al
0082+  131D B9 00         cmp al, 0        ; check if ascii 0
0083+  131F C6 2C 13      jz _hex_to_int_ret
0084+  1322 36            mov bh, al
0085+  1323 F6            lodsb
0086+  1324 2F            mov bl, al
0087+  1325 07 F1 12      call _atoi        ; convert ascii byte in b to int (to al)
0088+  1328 F7            stosb          ; store al to [di]
0089+  1329 0A 1C 13      jmp _hex_to_int_l1
0090+  132C             _hex_to_int_ret:
0091+  132C 09            ret    
0092+  132D             
0093+  132D             
0094+  132D             
0095+  132D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  132D             ; getchar
0097+  132D             ; char in ah
0098+  132D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  132D             getch:
0100+  132D DB            push al
0101+  132E             getch_retry:
0102+  132E 19 01         mov al, 1
0103+  1330 05 03         syscall sys_io      ; receive in ah
0104+  1332 E8            pop al
0105+  1333 09            ret
0106+  1334             
0107+  1334             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  1334             ; putchar
0109+  1334             ; char in ah
0110+  1334             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  1334             _putchar:
0112+  1334 DB            push al
0113+  1335 19 00         mov al, 0
0114+  1337 05 03         syscall sys_io      ; char in ah
0115+  1339 E8            pop al
0116+  133A 09            ret
0117+  133B             
0118+  133B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  133B             ;; input a string
0120+  133B             ;; terminates with null
0121+  133B             ;; pointer in d
0122+  133B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  133B             _gets:
0124+  133B D7            push a
0125+  133C DA            push d
0126+  133D             _gets_loop:
0127+  133D 19 01         mov al, 1
0128+  133F 05 03         syscall sys_io      ; receive in ah
0129+  1341 76 1B         cmp ah, 27
0130+  1343 C6 64 13      je _gets_ansi_esc
0131+  1346 76 0A         cmp ah, $0a        ; lf
0132+  1348 C6 C0 13      je _gets_end
0133+  134B 76 0D         cmp ah, $0d        ; cr
0134+  134D C6 C0 13      je _gets_end
0135+  1350 76 5C         cmp ah, $5c        ; '\\'
0136+  1352 C6 86 13      je _gets_escape
0137+  1355 76 08         cmp ah, $08      ; check for backspace
0138+  1357 C6 60 13      je _gets_backspace
0139+  135A 1A            mov al, ah
0140+  135B 3E            mov [d], al
0141+  135C 79            inc d
0142+  135D 0A 3D 13      jmp _gets_loop
0143+  1360             _gets_backspace:
0144+  1360 7F            dec d
0145+  1361 0A 3D 13      jmp _gets_loop
0146+  1364             _gets_ansi_esc:
0147+  1364 19 01         mov al, 1
0148+  1366 05 03         syscall sys_io        ; receive in ah without echo
0149+  1368 76 5B         cmp ah, '['
0150+  136A C7 3D 13      jne _gets_loop
0151+  136D 19 01         mov al, 1
0152+  136F 05 03         syscall sys_io          ; receive in ah without echo
0153+  1371 76 64         cmp ah, 'd'
0154+  1373 C6 7E 13      je _gets_left_arrow
0155+  1376 76 63         cmp ah, 'c'
0156+  1378 C6 82 13      je _gets_right_arrow
0157+  137B 0A 3D 13      jmp _gets_loop
0158+  137E             _gets_left_arrow:
0159+  137E 7F            dec d
0160+  137F 0A 3D 13      jmp _gets_loop
0161+  1382             _gets_right_arrow:
0162+  1382 79            inc d
0163+  1383 0A 3D 13      jmp _gets_loop
0164+  1386             _gets_escape:
0165+  1386 19 01         mov al, 1
0166+  1388 05 03         syscall sys_io      ; receive in ah
0167+  138A 76 6E         cmp ah, 'n'
0168+  138C C6 AB 13      je _gets_lf
0169+  138F 76 72         cmp ah, 'r'
0170+  1391 C6 B2 13      je _gets_cr
0171+  1394 76 30         cmp ah, '0'
0172+  1396 C6 B9 13      je _gets_null
0173+  1399 76 5C         cmp ah, $5c  ; '\'
0174+  139B C6 A4 13      je _gets_slash
0175+  139E 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  139F 3E            mov [d], al
0177+  13A0 79            inc d
0178+  13A1 0A 3D 13      jmp _gets_loop
0179+  13A4             _gets_slash:
0180+  13A4 19 5C         mov al, $5c
0181+  13A6 3E            mov [d], al
0182+  13A7 79            inc d
0183+  13A8 0A 3D 13      jmp _gets_loop
0184+  13AB             _gets_lf:
0185+  13AB 19 0A         mov al, $0a
0186+  13AD 3E            mov [d], al
0187+  13AE 79            inc d
0188+  13AF 0A 3D 13      jmp _gets_loop
0189+  13B2             _gets_cr:
0190+  13B2 19 0D         mov al, $0d
0191+  13B4 3E            mov [d], al
0192+  13B5 79            inc d
0193+  13B6 0A 3D 13      jmp _gets_loop
0194+  13B9             _gets_null:
0195+  13B9 19 00         mov al, $00
0196+  13BB 3E            mov [d], al
0197+  13BC 79            inc d
0198+  13BD 0A 3D 13      jmp _gets_loop
0199+  13C0             _gets_end:
0200+  13C0 19 00         mov al, 0
0201+  13C2 3E            mov [d], al        ; terminate string
0202+  13C3 E7            pop d
0203+  13C4 E4            pop a
0204+  13C5 09            ret
0205+  13C6             
0206+  13C6             
0207+  13C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  13C6             ;; input text
0209+  13C6             ;; terminated with ctrl+d
0210+  13C6             ;; pointer in d
0211+  13C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  13C6             _gettxt:
0213+  13C6 D7            push a
0214+  13C7 DA            push d
0215+  13C8             _gettxt_loop:
0216+  13C8 19 01         mov al, 1
0217+  13CA 05 03         syscall sys_io      ; receive in ah
0218+  13CC 76 04         cmp ah, 4      ; eot
0219+  13CE C6 07 14      je _gettxt_end
0220+  13D1 76 08         cmp ah, $08      ; check for backspace
0221+  13D3 C6 03 14      je _gettxt_backspace
0222+  13D6 76 5C         cmp ah, $5c        ; '\'
0223+  13D8 C6 E1 13      je _gettxt_escape
0224+  13DB 1A            mov al, ah
0225+  13DC 3E            mov [d], al
0226+  13DD 79            inc d
0227+  13DE 0A C8 13      jmp _gettxt_loop
0228+  13E1             _gettxt_escape:
0229+  13E1 19 01         mov al, 1
0230+  13E3 05 03         syscall sys_io      ; receive in ah
0231+  13E5 76 6E         cmp ah, 'n'
0232+  13E7 C6 F5 13      je _gettxt_lf
0233+  13EA 76 72         cmp ah, 'r'
0234+  13EC C6 FC 13      je _gettxt_cr
0235+  13EF 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  13F0 3E            mov [d], al
0237+  13F1 79            inc d
0238+  13F2 0A C8 13      jmp _gettxt_loop
0239+  13F5             _gettxt_lf:
0240+  13F5 19 0A         mov al, $0a
0241+  13F7 3E            mov [d], al
0242+  13F8 79            inc d
0243+  13F9 0A C8 13      jmp _gettxt_loop
0244+  13FC             _gettxt_cr:
0245+  13FC 19 0D         mov al, $0d
0246+  13FE 3E            mov [d], al
0247+  13FF 79            inc d
0248+  1400 0A C8 13      jmp _gettxt_loop
0249+  1403             _gettxt_backspace:
0250+  1403 7F            dec d
0251+  1404 0A C8 13      jmp _gettxt_loop
0252+  1407             _gettxt_end:
0253+  1407 19 00         mov al, 0
0254+  1409 3E            mov [d], al        ; terminate string
0255+  140A E7            pop d
0256+  140B E4            pop a
0257+  140C 09            ret
0258+  140D             
0259+  140D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  140D             ; print new line
0261+  140D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  140D             printnl:
0263+  140D D7            push a
0264+  140E 10 00 0A      mov a, $0a00
0265+  1411 05 03         syscall sys_io
0266+  1413 10 00 0D      mov a, $0d00
0267+  1416 05 03         syscall sys_io
0268+  1418 E4            pop a
0269+  1419 09            ret
0270+  141A             
0271+  141A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  141A             ; _strtoint
0273+  141A             ; 4 digit hex string number in d
0274+  141A             ; integer returned in a
0275+  141A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  141A             _strtointx:
0277+  141A D8            push b
0278+  141B 32            mov bl, [d]
0279+  141C 37            mov bh, bl
0280+  141D 33 01 00      mov bl, [d + 1]
0281+  1420 07 F1 12      call _atoi        ; convert to int in al
0282+  1423 23            mov ah, al        ; move to ah
0283+  1424 33 02 00      mov bl, [d + 2]
0284+  1427 37            mov bh, bl
0285+  1428 33 03 00      mov bl, [d + 3]
0286+  142B 07 F1 12      call _atoi        ; convert to int in al
0287+  142E E5            pop b
0288+  142F 09            ret
0289+  1430             
0290+  1430             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  1430             ; _strtoint
0292+  1430             ; 5 digit base10 string number in d
0293+  1430             ; integer returned in a
0294+  1430             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  1430             _strtoint:
0296+  1430 E2            push si
0297+  1431 D8            push b
0298+  1432 D9            push c
0299+  1433 DA            push d
0300+  1434 07 93 12      call _strlen      ; get string length in c
0301+  1437 7E            dec c
0302+  1438 FD 4E         mov si, d
0303+  143A 12            mov a, c
0304+  143B FD 99         shl a
0305+  143D 3B B4 15      mov d, table_power
0306+  1440 59            add d, a
0307+  1441 38 00 00      mov c, 0
0308+  1444             _strtoint_l0:
0309+  1444 F6            lodsb      ; load ascii to al
0310+  1445 B9 00         cmp al, 0
0311+  1447 C6 5A 14      je _strtoint_end
0312+  144A 6F 30         sub al, $30    ; make into integer
0313+  144C 22 00         mov ah, 0
0314+  144E 2A            mov b, [d]
0315+  144F AC            mul a, b      ; result in b since it fits in 16bits
0316+  1450 11            mov a, b
0317+  1451 28            mov b, c
0318+  1452 54            add a, b
0319+  1453 39            mov c, a
0320+  1454 63 02 00      sub d, 2
0321+  1457 0A 44 14      jmp _strtoint_l0
0322+  145A             _strtoint_end:
0323+  145A 12            mov a, c
0324+  145B E7            pop d
0325+  145C E6            pop c
0326+  145D E5            pop b
0327+  145E EF            pop si
0328+  145F 09            ret
0329+  1460             
0330+  1460             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  1460             ; print null terminated string
0332+  1460             ; pointer in d
0333+  1460             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  1460             _puts:
0335+  1460 D7            push a
0336+  1461 DA            push d
0337+  1462             _puts_l1:
0338+  1462 1E            mov al, [d]
0339+  1463 B9 00         cmp al, 0
0340+  1465 C6 71 14      jz _puts_end
0341+  1468 23            mov ah, al
0342+  1469 19 00         mov al, 0
0343+  146B 05 03         syscall sys_io
0344+  146D 79            inc d
0345+  146E 0A 62 14      jmp _puts_l1
0346+  1471             _puts_end:
0347+  1471 E7            pop d
0348+  1472 E4            pop a
0349+  1473 09            ret
0350+  1474             
0351+  1474             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  1474             ; print n size string
0353+  1474             ; pointer in d
0354+  1474             ; size in c
0355+  1474             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  1474             _putsn:
0357+  1474 DB            push al
0358+  1475 DA            push d
0359+  1476 D9            push c
0360+  1477             _putsn_l0:
0361+  1477 1E            mov al, [d]
0362+  1478 23            mov ah, al
0363+  1479 19 00         mov al, 0
0364+  147B 05 03         syscall sys_io
0365+  147D 79            inc d
0366+  147E 7E            dec c  
0367+  147F C2 00 00      cmp c, 0
0368+  1482 C7 77 14      jne _putsn_l0
0369+  1485             _putsn_end:
0370+  1485 E6            pop c
0371+  1486 E7            pop d
0372+  1487 E8            pop al
0373+  1488 09            ret
0374+  1489             
0375+  1489             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  1489             ; print 16bit decimal number
0377+  1489             ; input number in a
0378+  1489             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  1489             print_u16d:
0380+  1489 D7            push a
0381+  148A D8            push b
0382+  148B FD D8         push g
0383+  148D 26 10 27      mov b, 10000
0384+  1490 AE            div a, b      ; get 10000's coeff.
0385+  1491 07 B5 14      call print_number
0386+  1494 11            mov a, b
0387+  1495 26 E8 03      mov b, 1000
0388+  1498 AE            div a, b      ; get 1000's coeff.
0389+  1499 07 B5 14      call print_number
0390+  149C 11            mov a, b
0391+  149D 26 64 00      mov b, 100
0392+  14A0 AE            div a, b
0393+  14A1 07 B5 14      call print_number
0394+  14A4 11            mov a, b
0395+  14A5 26 0A 00      mov b, 10
0396+  14A8 AE            div a, b
0397+  14A9 07 B5 14      call print_number
0398+  14AC 1B            mov al, bl      ; 1's coeff in bl
0399+  14AD 07 B5 14      call print_number
0400+  14B0 FD F1         pop g
0401+  14B2 E5            pop b
0402+  14B3 E4            pop a
0403+  14B4 09            ret
0404+  14B5             
0405+  14B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  14B5             ; print al
0407+  14B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  14B5             print_number:
0409+  14B5 6A 30         add al, $30
0410+  14B7 23            mov ah, al
0411+  14B8 07 34 13      call _putchar
0412+  14BB 09            ret
0413+  14BC             
0414+  14BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  14BC             ; print 16bit hex integer
0416+  14BC             ; integer value in reg b
0417+  14BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  14BC             print_u16x:
0419+  14BC D7            push a
0420+  14BD D8            push b
0421+  14BE DD            push bl
0422+  14BF 30            mov bl, bh
0423+  14C0 07 02 13      call _itoa        ; convert bh to char in a
0424+  14C3 2F            mov bl, al        ; save al
0425+  14C4 19 00         mov al, 0
0426+  14C6 05 03         syscall sys_io        ; display ah
0427+  14C8 24            mov ah, bl        ; retrieve al
0428+  14C9 19 00         mov al, 0
0429+  14CB 05 03         syscall sys_io        ; display al
0430+  14CD             
0431+  14CD EA            pop bl
0432+  14CE 07 02 13      call _itoa        ; convert bh to char in a
0433+  14D1 2F            mov bl, al        ; save al
0434+  14D2 19 00         mov al, 0
0435+  14D4 05 03         syscall sys_io        ; display ah
0436+  14D6 24            mov ah, bl        ; retrieve al
0437+  14D7 19 00         mov al, 0
0438+  14D9 05 03         syscall sys_io        ; display al
0439+  14DB             
0440+  14DB E5            pop b
0441+  14DC E4            pop a
0442+  14DD 09            ret
0443+  14DE             
0444+  14DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  14DE             ; input 16bit hex integer
0446+  14DE             ; read 16bit integer into a
0447+  14DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  14DE             scan_u16x:
0449+  14DE F8 10 00      enter 16
0450+  14E1 D8            push b
0451+  14E2 DA            push d
0452+  14E3             
0453+  14E3 FA F1 FF      lea d, [bp + -15]
0454+  14E6 07 3B 13      call _gets        ; get number
0455+  14E9             
0456+  14E9 32            mov bl, [d]
0457+  14EA 37            mov bh, bl
0458+  14EB 33 01 00      mov bl, [d + 1]
0459+  14EE 07 F1 12      call _atoi        ; convert to int in al
0460+  14F1 23            mov ah, al        ; move to ah
0461+  14F2             
0462+  14F2 33 02 00      mov bl, [d + 2]
0463+  14F5 37            mov bh, bl
0464+  14F6 33 03 00      mov bl, [d + 3]
0465+  14F9 07 F1 12      call _atoi        ; convert to int in al
0466+  14FC             
0467+  14FC E7            pop d
0468+  14FD E5            pop b
0469+  14FE F9            leave
0470+  14FF 09            ret
0471+  1500             
0472+  1500             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  1500             ; print 8bit hex integer
0474+  1500             ; integer value in reg bl
0475+  1500             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  1500             print_u8x:
0477+  1500 D7            push a
0478+  1501 DD            push bl
0479+  1502             
0480+  1502 07 02 13      call _itoa        ; convert bl to char in a
0481+  1505 2F            mov bl, al        ; save al
0482+  1506 19 00         mov al, 0
0483+  1508 05 03         syscall sys_io        ; display ah
0484+  150A 24            mov ah, bl        ; retrieve al
0485+  150B 19 00         mov al, 0
0486+  150D 05 03         syscall sys_io        ; display al
0487+  150F             
0488+  150F EA            pop bl
0489+  1510 E4            pop a
0490+  1511 09            ret
0491+  1512             
0492+  1512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  1512             ; print 8bit decimal unsigned number
0494+  1512             ; input number in al
0495+  1512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  1512             print_u8d:
0497+  1512 D7            push a
0498+  1513 D8            push b
0499+  1514 FD D8         push g
0500+  1516 22 00         mov ah, 0
0501+  1518 26 64 00      mov b, 100
0502+  151B AE            div a, b
0503+  151C D8            push b      ; save remainder
0504+  151D B9 00         cmp al, 0
0505+  151F C6 29 15      je skip100
0506+  1522 6A 30         add al, $30
0507+  1524 23            mov ah, al
0508+  1525 19 00         mov al, 0
0509+  1527 05 03         syscall sys_io  ; print coeff
0510+  1529             skip100:
0511+  1529 E4            pop a
0512+  152A 22 00         mov ah, 0
0513+  152C 26 0A 00      mov b, 10
0514+  152F AE            div a, b
0515+  1530 D8            push b      ; save remainder
0516+  1531 B9 00         cmp al, 0
0517+  1533 C6 3D 15      je skip10
0518+  1536 6A 30         add al, $30
0519+  1538 23            mov ah, al
0520+  1539 19 00         mov al, 0
0521+  153B 05 03         syscall sys_io  ; print coeff
0522+  153D             skip10:
0523+  153D E4            pop a
0524+  153E 1B            mov al, bl
0525+  153F 6A 30         add al, $30
0526+  1541 23            mov ah, al
0527+  1542 19 00         mov al, 0
0528+  1544 05 03         syscall sys_io  ; print coeff
0529+  1546 FD F1         pop g
0530+  1548 E5            pop b
0531+  1549 E4            pop a
0532+  154A 09            ret
0533+  154B             
0534+  154B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  154B             ; input 8bit hex integer
0536+  154B             ; read 8bit integer into al
0537+  154B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  154B             scan_u8x:
0539+  154B F8 04 00      enter 4
0540+  154E D8            push b
0541+  154F DA            push d
0542+  1550             
0543+  1550 FA FD FF      lea d, [bp + -3]
0544+  1553 07 3B 13      call _gets        ; get number
0545+  1556             
0546+  1556 32            mov bl, [d]
0547+  1557 37            mov bh, bl
0548+  1558 33 01 00      mov bl, [d + 1]
0549+  155B 07 F1 12      call _atoi        ; convert to int in al
0550+  155E             
0551+  155E E7            pop d
0552+  155F E5            pop b
0553+  1560 F9            leave
0554+  1561 09            ret
0555+  1562             
0556+  1562             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  1562             ; input decimal number
0558+  1562             ; result in a
0559+  1562             ; 655'\0'
0560+  1562             ; low--------high
0561+  1562             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  1562             scan_u16d:
0563+  1562 F8 08 00      enter 8
0564+  1565 E2            push si
0565+  1566 D8            push b
0566+  1567 D9            push c
0567+  1568 DA            push d
0568+  1569 FA F9 FF      lea d, [bp +- 7]
0569+  156C 07 3B 13      call _gets
0570+  156F 07 93 12      call _strlen      ; get string length in c
0571+  1572 7E            dec c
0572+  1573 FD 4E         mov si, d
0573+  1575 12            mov a, c
0574+  1576 FD 99         shl a
0575+  1578 3B B4 15      mov d, table_power
0576+  157B 59            add d, a
0577+  157C 38 00 00      mov c, 0
0578+  157F             mul_loop:
0579+  157F F6            lodsb      ; load ascii to al
0580+  1580 B9 00         cmp al, 0
0581+  1582 C6 95 15      je mul_exit
0582+  1585 6F 30         sub al, $30    ; make into integer
0583+  1587 22 00         mov ah, 0
0584+  1589 2A            mov b, [d]
0585+  158A AC            mul a, b      ; result in b since it fits in 16bits
0586+  158B 11            mov a, b
0587+  158C 28            mov b, c
0588+  158D 54            add a, b
0589+  158E 39            mov c, a
0590+  158F 63 02 00      sub d, 2
0591+  1592 0A 7F 15      jmp mul_loop
0592+  1595             mul_exit:
0593+  1595 12            mov a, c
0594+  1596 E7            pop d
0595+  1597 E6            pop c
0596+  1598 E5            pop b
0597+  1599 EF            pop si
0598+  159A F9            leave
0599+  159B 09            ret
0600+  159C             
0601+  159C             
0602+  159C 30 31 32 33 s_hex_digits:    .db "0123456789abcdef"  
0602+  15A0 34 35 36 37 
0602+  15A4 38 39 61 62 
0602+  15A8 63 64 65 66 
0603+  15AC 1B 5B 32 6A s_telnet_clear:  .db "\033[2j\033[h", 0
0603+  15B0 1B 5B 68 00 
0604+  15B4             
0605+  15B4             table_power:
0606+  15B4 01 00         .dw 1
0607+  15B6 0A 00         .dw 10
0608+  15B8 64 00         .dw 100
0609+  15BA E8 03         .dw 1000
0610+  15BC 10 27         .dw 100003102   15BE             .include "lib/ctype.asm"
0001+  15BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  15BE             ; ctype.s
0003+  15BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  15BE             
0005+  15BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  15BE             ;; c character classification is an operation provided by a group of functions in the ansi c standard library
0007+  15BE             ;; for the c programming language. these functions are used to test characters for membership in a particular
0008+  15BE             ;; class of characters, such as alphabetic characters, control characters, etc. both single-byte, and wide
0009+  15BE             ;; characters are supported.
0010+  15BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  15BE             ;; _isalnum 
0012+  15BE             ;; _isalpha 
0013+  15BE             ;; islower 
0014+  15BE             ;; isupper 
0015+  15BE             ;; _isdigit 
0016+  15BE             ;; isxdigit
0017+  15BE             ;; iscntrl 
0018+  15BE             ;; isgraph 
0019+  15BE             ;; _isspace 
0020+  15BE             ;; isblank 
0021+  15BE             ;; isprint 
0022+  15BE             ;; ispunct 
0023+  15BE             ;; tolower 
0024+  15BE             ;; toupper
0025+  15BE             
0026+  15BE             
0027+  15BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  15BE             ;; is alphanumeric
0029+  15BE             ;; sets zf according with result
0030+  15BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  15BE             _isalnum:
0032+  15BE 07 DB 15    	call _isalpha
0033+  15C1 C6 C7 15    	je _isalnum_exit
0034+  15C4 07 C8 15    	call _isdigit
0035+  15C7             _isalnum_exit:
0036+  15C7 09          	ret	
0037+  15C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  15C8             ;; is digit
0039+  15C8             ;; sets zf according with result
0040+  15C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  15C8             _isdigit:
0042+  15C8 DB          	push al
0043+  15C9 B9 30       	cmp al, '0'
0044+  15CB C8 D7 15    	jlu _isdigit_false
0045+  15CE B9 39       	cmp al, '9'
0046+  15D0 D1 D7 15    	jgu _isdigit_false
0047+  15D3 87 00       	and al, 0	; set zf
0048+  15D5 E8          	pop al
0049+  15D6 09          	ret
0050+  15D7             _isdigit_false:
0051+  15D7 8B 01       	or al, 1	; clear zf
0052+  15D9 E8          	pop al
0053+  15DA 09          	ret	
0054+  15DB             	
0055+  15DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  15DB             ;; is alpha
0057+  15DB             ;; sets zf according with result
0058+  15DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  15DB             _isalpha:
0060+  15DB DB          	push al
0061+  15DC B9 5F       	cmp al, '_'
0062+  15DE C6 FE 15    	je _isalpha_true
0063+  15E1 B9 2E       	cmp al, '.'
0064+  15E3 C6 FE 15    	je _isalpha_true
0065+  15E6 B9 61       	cmp al, 'a'
0066+  15E8 C8 FA 15    	jlu _isalpha_false
0067+  15EB B9 7A       	cmp al, 'z'
0068+  15ED D1 FA 15    	jgu _isalpha_false
0069+  15F0 B9 7A       	cmp al, 'z'
0070+  15F2 D0 FE 15    	jleu _isalpha_true
0071+  15F5 B9 61       	cmp al, 'a'
0072+  15F7 C9 FE 15    	jgeu _isalpha_true
0073+  15FA             _isalpha_false:
0074+  15FA 8B 01       	or al, 1	; clear zf
0075+  15FC E8          	pop al
0076+  15FD 09          	ret
0077+  15FE             _isalpha_true:
0078+  15FE 87 00       	and al, 0	; set zf
0079+  1600 E8          	pop al
0080+  1601 09          	ret
0081+  1602             
0082+  1602             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  1602             ;; is path-alpha
0084+  1602             ;; sets zf according with result
0085+  1602             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  1602             ispath:
0087+  1602 DB          	push al
0088+  1603 07 C8 15    	call _isdigit
0089+  1606 C6 30 16    	je ispath_true
0090+  1609 B9 5F       	cmp al, '_'
0091+  160B C6 30 16    	je ispath_true
0092+  160E B9 2F       	cmp al, '/'
0093+  1610 C6 30 16    	je ispath_true
0094+  1613 B9 2E       	cmp al, '.'
0095+  1615 C6 30 16    	je ispath_true
0096+  1618 B9 61       	cmp al, 'a'
0097+  161A C8 2C 16    	jlu ispath_false
0098+  161D B9 7A       	cmp al, 'z'
0099+  161F D1 2C 16    	jgu ispath_false
0100+  1622 B9 7A       	cmp al, 'z'
0101+  1624 D0 30 16    	jleu ispath_true
0102+  1627 B9 61       	cmp al, 'a'
0103+  1629 C9 30 16    	jgeu ispath_true
0104+  162C             ispath_false:
0105+  162C 8B 01       	or al, 1	; clear zf
0106+  162E E8          	pop al
0107+  162F 09          	ret
0108+  1630             ispath_true:
0109+  1630 87 00       	and al, 0	; set zf
0110+  1632 E8          	pop al
0111+  1633 09          	ret
0112+  1634             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  1634             ;; is space
0114+  1634             ;; sets zf according with result
0115+  1634             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  1634             _isspace:
0117+  1634 B9 20       	cmp al, $20		; ' '
0118+  1636 C6 4A 16    	je _isspace_exit
0119+  1639 B9 09       	cmp al, $09		; '\t'
0120+  163B C6 4A 16    	je _isspace_exit
0121+  163E B9 0A       	cmp al, $0a		; '\n'
0122+  1640 C6 4A 16    	je _isspace_exit
0123+  1643 B9 0D       	cmp al, $0d		; '\r'
0124+  1645 C6 4A 16    	je _isspace_exit
0125+  1648 B9 0B       	cmp al, $0b		; '\v'
0126+  164A             _isspace_exit:
0127+  164A 09          	ret	
0128+  164B             
0129+  164B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  164B             ; to lower
0131+  164B             ; input in al
0132+  164B             ; output in al
0133+  164B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  164B             _to_lower:
0135+  164B B9 7A       	cmp al, 'z'
0136+  164D D1 52 16    	jgu _to_lower_ret
0137+  1650 6A 20       	add al, $20				; convert to lower case
0138+  1652             _to_lower_ret:
0139+  1652 09          	ret
0140+  1653             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  1653             ; to upper
0142+  1653             ; input in al
0143+  1653             ; output in al
0144+  1653             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  1653             _to_upper:
0146+  1653 B9 61       	cmp al, 'a'
0147+  1655 C8 5A 16    	jlu _to_upper_ret
0148+  1658 6F 20       	sub al, $20			; convert to upper case
0149+  165A             _to_upper_ret:
0150+  165A 09          	ret
0151+  165B             
3103   165B             .include "lib/token.asm"
0001+  165B             toktyp_identifier  .equ 0
0002+  165B             toktyp_keyword     .equ 1
0003+  165B             toktyp_delimiter   .equ 2
0004+  165B             toktyp_string      .equ 3
0005+  165B             toktyp_char        .equ 4
0006+  165B             toktyp_numeric     .equ 5
0007+  165B             toktyp_end         .equ 6
0008+  165B             
0009+  165B             tok_null           .equ 0
0010+  165B             tok_fslash         .equ 1
0011+  165B             tok_times          .equ 2
0012+  165B             tok_plus           .equ 3
0013+  165B             tok_minus          .equ 4
0014+  165B             tok_dot            .equ 5
0015+  165B             tok_semi           .equ 6
0016+  165B             tok_angle          .equ 7
0017+  165B             tok_tilde          .equ 8
0018+  165B             tok_equal          .equ 9
0019+  165B             tok_colon          .equ 10
0020+  165B             tok_comma          .equ 11
0021+  165B             
0022+  165B             tok_end            .equ 20
0023+  165B             
0024+  165B             
0025+  165B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  165B             ;; read a full command argment from shell input buffer
0027+  165B             ;; argument is written into tokstr
0028+  165B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  165B             get_arg:
0030+  165B D7            push a
0031+  165C E2            push si
0032+  165D E3            push di
0033+  165E 19 00         mov al, 0
0034+  1660 3D 89 18      mov [tokstr], al      ; nullify tokstr string
0035+  1663 14 85 18      mov a, [prog]
0036+  1666 4D            mov si, a
0037+  1667 FD 4F 89 18   mov di, tokstr
0038+  166B             get_arg_skip_spaces:
0039+  166B F6            lodsb
0040+  166C 07 34 16      call _isspace
0041+  166F C6 6B 16      je get_arg_skip_spaces
0042+  1672             get_arg_l0:
0043+  1672 B9 3B         cmp al, $3b        ; check if is ';'
0044+  1674 C6 81 16      je get_arg_end
0045+  1677 B9 00         cmp al, 0
0046+  1679 C6 81 16      je get_arg_end      ; check if end of input
0047+  167C F7            stosb
0048+  167D F6            lodsb
0049+  167E 0A 72 16      jmp get_arg_l0
0050+  1681             get_arg_end:
0051+  1681 19 00         mov al, 0
0052+  1683 F7            stosb
0053+  1684 D5 01 00      sub si, 1
0054+  1687 4E            mov a, si
0055+  1688 42 85 18      mov [prog], a    ; update pointer
0056+  168B F0            pop di
0057+  168C EF            pop si
0058+  168D E4            pop a
0059+  168E 09            ret
0060+  168F             
0061+  168F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  168F             ;; read a path formation from shell input buffer
0063+  168F             ;; path is written into tokstr
0064+  168F             ;; /usr/bin
0065+  168F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  168F             get_path:
0067+  168F D7            push a
0068+  1690 E2            push si
0069+  1691 E3            push di
0070+  1692 19 00         mov al, 0
0071+  1694 3D 89 18      mov [tokstr], al      ; nullify tokstr string
0072+  1697 14 85 18      mov a, [prog]
0073+  169A 4D            mov si, a
0074+  169B FD 4F 89 18   mov di, tokstr
0075+  169F             get_path_skip_spaces:
0076+  169F F6            lodsb
0077+  16A0 07 34 16      call _isspace
0078+  16A3 C6 9F 16      je get_path_skip_spaces
0079+  16A6             get_path_is_pathchar:
0080+  16A6 F7            stosb
0081+  16A7 F6            lodsb
0082+  16A8 07 BE 15      call _isalnum      ;check if is alphanumeric
0083+  16AB C6 A6 16      je get_path_is_pathchar
0084+  16AE B9 2F         cmp al, '/'        ; check if is '/'
0085+  16B0 C6 A6 16      je get_path_is_pathchar
0086+  16B3 19 00         mov al, 0
0087+  16B5 F7            stosb
0088+  16B6 D5 01 00      sub si, 1
0089+  16B9 4E            mov a, si
0090+  16BA 42 85 18      mov [prog], a    ; update pointer
0091+  16BD             get_path_end:
0092+  16BD F0            pop di
0093+  16BE EF            pop si
0094+  16BF E4            pop a
0095+  16C0 09            ret
0096+  16C1             
0097+  16C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  16C1             ;; read a line
0099+  16C1             ;; line is written into tokstr
0100+  16C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  16C1             get_line:
0102+  16C1 D7            push a
0103+  16C2 E2            push si
0104+  16C3 E3            push di
0105+  16C4 19 00         mov al, 0
0106+  16C6 3D 89 18      mov [tokstr], al      ; nullify tokstr string
0107+  16C9 14 85 18      mov a, [prog]
0108+  16CC 4D            mov si, a
0109+  16CD FD 4F 89 18   mov di, tokstr
0110+  16D1             get_line_l0:
0111+  16D1 F6            lodsb
0112+  16D2 B9 0A         cmp al, $0a    ; check for new line
0113+  16D4 C6 DB 16      je get_line_exit
0114+  16D7 F7            stosb
0115+  16D8 0A D1 16      jmp get_line_l0
0116+  16DB             get_line_exit:
0117+  16DB 19 00         mov al, 0
0118+  16DD F7            stosb
0119+  16DE 4E            mov a, si
0120+  16DF 42 85 18      mov [prog], a    ; update pointer
0121+  16E2 F0            pop di
0122+  16E3 EF            pop si
0123+  16E4 E4            pop a
0124+  16E5 09            ret
0125+  16E6             
0126+  16E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  16E6             ;; token parser
0128+  16E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  16E6             get_token:
0130+  16E6 D7            push a
0131+  16E7 DA            push d
0132+  16E8 E2            push si
0133+  16E9 E3            push di
0134+  16EA 19 00         mov al, 0
0135+  16EC 3D 89 18      mov [tokstr], al      ; nullify tokstr string
0136+  16EF 19 00         mov al, tok_null
0137+  16F1 3D 88 18      mov [tok], al        ; nullify token
0138+  16F4 14 85 18      mov a, [prog]
0139+  16F7 4D            mov si, a
0140+  16F8 FD 4F 89 18   mov di, tokstr
0141+  16FC             get_tok_skip_spaces:
0142+  16FC F6            lodsb
0143+  16FD 07 34 16      call _isspace
0144+  1700 C6 FC 16      je get_tok_skip_spaces
0145+  1703 B9 00         cmp al, 0      ; check for end of input (null)
0146+  1705 C6 EA 17      je get_token_end
0147+  1708 B9 23         cmp al, '#'      ; comments!
0148+  170A C6 18 18      je get_tok_comment
0149+  170D 07 BE 15      call _isalnum
0150+  1710 C6 F7 17      jz is_alphanumeric
0151+  1713             ; other token types
0152+  1713             get_token_slash:
0153+  1713 B9 2F         cmp al, '/'        ; check if '/'
0154+  1715 C7 2D 17      jne get_token_minus
0155+  1718 F7            stosb          ; store '/' into token string
0156+  1719 19 00         mov al, 0
0157+  171B F7            stosb          ; terminate token string
0158+  171C 19 01         mov al, tok_fslash
0159+  171E 3D 88 18      mov [tok], al      
0160+  1721 19 02         mov al, toktyp_delimiter
0161+  1723 3D 87 18      mov [toktyp], al
0162+  1726 4E            mov a, si
0163+  1727 42 85 18      mov [prog], a    ; update pointer
0164+  172A 0A 13 18      jmp get_token_return
0165+  172D             get_token_minus:
0166+  172D B9 2D         cmp al, '-'        ; check if '-'
0167+  172F C7 47 17      jne get_token_comma
0168+  1732 F7            stosb          ; store '-' into token string
0169+  1733 19 00         mov al, 0
0170+  1735 F7            stosb          ; terminate token string
0171+  1736 19 04         mov al, tok_minus
0172+  1738 3D 88 18      mov [tok], al      
0173+  173B 19 02         mov al, toktyp_delimiter
0174+  173D 3D 87 18      mov [toktyp], al
0175+  1740 4E            mov a, si
0176+  1741 42 85 18      mov [prog], a    ; update pointer
0177+  1744 0A 13 18      jmp get_token_return
0178+  1747             get_token_comma:
0179+  1747 B9 2C         cmp al, ','        ; check if ','
0180+  1749 C7 61 17      jne get_token_semi
0181+  174C F7            stosb          ; store ',' into token string
0182+  174D 19 00         mov al, 0
0183+  174F F7            stosb          ; terminate token string
0184+  1750 19 0B         mov al, tok_comma
0185+  1752 3D 88 18      mov [tok], al      
0186+  1755 19 02         mov al, toktyp_delimiter
0187+  1757 3D 87 18      mov [toktyp], al
0188+  175A 4E            mov a, si
0189+  175B 42 85 18      mov [prog], a    ; update pointer
0190+  175E 0A 13 18      jmp get_token_return
0191+  1761             get_token_semi:
0192+  1761 B9 3B         cmp al, $3b        ; check if ';'
0193+  1763 C7 7B 17      jne get_token_colon
0194+  1766 F7            stosb          ; store ';' into token string
0195+  1767 19 00         mov al, 0
0196+  1769 F7            stosb          ; terminate token string
0197+  176A 19 06         mov al, tok_semi
0198+  176C 3D 88 18      mov [tok], al      
0199+  176F 19 02         mov al, toktyp_delimiter
0200+  1771 3D 87 18      mov [toktyp], al
0201+  1774 4E            mov a, si
0202+  1775 42 85 18      mov [prog], a    ; update pointer
0203+  1778 0A 13 18      jmp get_token_return
0204+  177B             get_token_colon:
0205+  177B B9 3A         cmp al, $3a        ; check if ':'
0206+  177D C7 95 17      jne get_token_angle
0207+  1780 F7            stosb          ; store ':' into token string
0208+  1781 19 00         mov al, 0
0209+  1783 F7            stosb          ; terminate token string
0210+  1784 19 0A         mov al, tok_colon
0211+  1786 3D 88 18      mov [tok], al      
0212+  1789 19 02         mov al, toktyp_delimiter
0213+  178B 3D 87 18      mov [toktyp], al
0214+  178E 4E            mov a, si
0215+  178F 42 85 18      mov [prog], a    ; update pointer
0216+  1792 0A 13 18      jmp get_token_return
0217+  1795             get_token_angle:
0218+  1795 B9 3E         cmp al, $3e        ; check if '>'
0219+  1797 C7 AF 17      jne get_token_tilde
0220+  179A F7            stosb          ; store '>' into token string
0221+  179B 19 00         mov al, 0
0222+  179D F7            stosb          ; terminate token string
0223+  179E 19 07         mov al, tok_angle
0224+  17A0 3D 88 18      mov [tok], al      
0225+  17A3 19 02         mov al, toktyp_delimiter
0226+  17A5 3D 87 18      mov [toktyp], al
0227+  17A8 4E            mov a, si
0228+  17A9 42 85 18      mov [prog], a    ; update pointer
0229+  17AC 0A 13 18      jmp get_token_return
0230+  17AF             get_token_tilde:
0231+  17AF B9 7E         cmp al, '~'        ; check if '~'
0232+  17B1 C7 C9 17      jne get_token_equal
0233+  17B4 F7            stosb          ; store '~' into token string
0234+  17B5 19 00         mov al, 0
0235+  17B7 F7            stosb          ; terminate token string
0236+  17B8 19 08         mov al, tok_tilde
0237+  17BA 3D 88 18      mov [tok], al      
0238+  17BD 19 02         mov al, toktyp_delimiter
0239+  17BF 3D 87 18      mov [toktyp], al
0240+  17C2 4E            mov a, si
0241+  17C3 42 85 18      mov [prog], a    ; update pointer
0242+  17C6 0A 13 18      jmp get_token_return
0243+  17C9             get_token_equal:
0244+  17C9 B9 3D         cmp al, '='        ; check if '='
0245+  17CB C7 E3 17      jne get_token_skip
0246+  17CE F7            stosb          ; store '=' into token string
0247+  17CF 19 00         mov al, 0
0248+  17D1 F7            stosb          ; terminate token string
0249+  17D2 19 09         mov al, tok_equal
0250+  17D4 3D 88 18      mov [tok], al      
0251+  17D7 19 02         mov al, toktyp_delimiter
0252+  17D9 3D 87 18      mov [toktyp], al
0253+  17DC 4E            mov a, si
0254+  17DD 42 85 18      mov [prog], a    ; update pointer
0255+  17E0 0A 13 18      jmp get_token_return
0256+  17E3             get_token_skip:
0257+  17E3 4E            mov a, si
0258+  17E4 42 85 18      mov [prog], a    ; update pointer
0259+  17E7 0A 13 18      jmp get_token_return
0260+  17EA             get_token_end:        ; end of file token
0261+  17EA 19 14         mov al, tok_end
0262+  17EC 3D 88 18      mov [tok], al
0263+  17EF 19 06         mov al, toktyp_end
0264+  17F1 3D 87 18      mov [toktyp], al
0265+  17F4 0A 13 18      jmp get_token_return
0266+  17F7             is_alphanumeric:
0267+  17F7 F7            stosb
0268+  17F8 F6            lodsb
0269+  17F9 07 BE 15      call _isalnum      ;check if is alphanumeric
0270+  17FC C6 F7 17      jz is_alphanumeric
0271+  17FF B9 2E         cmp al, $2e        ; check if is '.'
0272+  1801 C6 F7 17      je is_alphanumeric
0273+  1804 19 00         mov al, 0
0274+  1806 F7            stosb
0275+  1807 19 00         mov al, toktyp_identifier
0276+  1809 3D 87 18      mov [toktyp], al
0277+  180C D5 01 00      sub si, 1
0278+  180F 4E            mov a, si
0279+  1810 42 85 18      mov [prog], a    ; update pointer
0280+  1813             get_token_return:
0281+  1813 F0            pop di
0282+  1814 EF            pop si
0283+  1815 E7            pop d
0284+  1816 E4            pop a
0285+  1817 09            ret
0286+  1818             get_tok_comment:
0287+  1818 F6            lodsb
0288+  1819 B9 0A         cmp al, $0a      ; new line
0289+  181B C7 18 18      jne get_tok_comment
0290+  181E 0A FC 16      jmp get_tok_skip_spaces
0291+  1821             
0292+  1821             
0293+  1821             get_number:
0294+  1821 D7            push a
0295+  1822 DA            push d
0296+  1823 E2            push si
0297+  1824 E3            push di
0298+  1825 19 00         mov al, 0
0299+  1827 3D 89 18      mov [tokstr], al      ; nullify tokstr string
0300+  182A 19 00         mov al, tok_null
0301+  182C 3D 88 18      mov [tok], al        ; nullify token
0302+  182F 14 85 18      mov a, [prog]
0303+  1832 4D            mov si, a
0304+  1833 FD 4F 89 18   mov di, tokstr
0305+  1837             get_number_skip_spaces:
0306+  1837 F6            lodsb
0307+  1838 07 34 16      call _isspace
0308+  183B C6 37 18      je get_number_skip_spaces
0309+  183E B9 00         cmp al, 0      ; check for end of input (null)
0310+  1840 C7 50 18      jne get_number_l0
0311+  1843 19 14         mov al, tok_end
0312+  1845 3D 88 18      mov [tok], al
0313+  1848 19 06         mov al, toktyp_end
0314+  184A 3D 87 18      mov [toktyp], al
0315+  184D 0A 67 18      jmp get_number_return
0316+  1850             get_number_l0:
0317+  1850 F7            stosb
0318+  1851 F6            lodsb
0319+  1852 07 C8 15      call _isdigit      ;check if is numeric
0320+  1855 C6 50 18      jz get_number_l0
0321+  1858 19 00         mov al, 0
0322+  185A F7            stosb
0323+  185B 19 05         mov al, toktyp_numeric
0324+  185D 3D 87 18      mov [toktyp], al
0325+  1860 D5 01 00      sub si, 1
0326+  1863 4E            mov a, si
0327+  1864 42 85 18      mov [prog], a    ; update pointer
0328+  1867             get_number_return:
0329+  1867 F0            pop di
0330+  1868 EF            pop si
0331+  1869 E7            pop d
0332+  186A E4            pop a
0333+  186B 09            ret
0334+  186C             
0335+  186C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  186C             ;; put back token
0337+  186C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0338+  186C             _putback:
0339+  186C D7            push a
0340+  186D E2            push si
0341+  186E FD 4D 89 18   mov si, tokstr  
0342+  1872             _putback_loop:
0343+  1872 F6            lodsb
0344+  1873 B9 00         cmp al, 0
0345+  1875 C6 82 18      je _putback_end
0346+  1878 14 85 18      mov a, [prog]
0347+  187B 7D            dec a
0348+  187C 42 85 18      mov [prog], a      ; update pointer
0349+  187F 0A 72 18      jmp _putback_loop
0350+  1882             _putback_end:
0351+  1882 EF            pop si
0352+  1883 E4            pop a
0353+  1884 09            ret
0354+  1885             
0355+  1885             
0356+  1885             
0357+  1885             
0358+  1885 00 00       prog:      .dw 0          ; pointer to current position in buffer
0359+  1887             
0360+  1887 00          toktyp:    .db 0          ; token type symbol
0361+  1888 00          tok:       .db 0          ; current token symbol
0362+  1889 00 00 00 00 tokstr:    .fill 256, 0   ; token as a string
0362+  188D 00 00 00 00 
0362+  1891 00 00 00 00 
0362+  1895 00 00 00 00 
0362+  1899 00 00 00 00 
0362+  189D 00 00 00 00 
0362+  18A1 00 00 00 00 
0362+  18A5 00 00 00 00 
0362+  18A9 00 00 00 00 
0362+  18AD 00 00 00 00 
0362+  18B1 00 00 00 00 
0362+  18B5 00 00 00 00 
0362+  18B9 00 00 00 00 
0362+  18BD 00 00 00 00 
0362+  18C1 00 00 00 00 
0362+  18C5 00 00 00 00 
0362+  18C9 00 00 00 00 
0362+  18CD 00 00 00 00 
0362+  18D1 00 00 00 00 
0362+  18D5 00 00 00 00 
0362+  18D9 00 00 00 00 
0362+  18DD 00 00 00 00 
0362+  18E1 00 00 00 00 
0362+  18E5 00 00 00 00 
0362+  18E9 00 00 00 00 
0362+  18ED 00 00 00 00 
0362+  18F1 00 00 00 00 
0362+  18F5 00 00 00 00 
0362+  18F9 00 00 00 00 
0362+  18FD 00 00 00 00 
0362+  1901 00 00 00 00 
0362+  1905 00 00 00 00 
0362+  1909 00 00 00 00 
0362+  190D 00 00 00 00 
0362+  1911 00 00 00 00 
0362+  1915 00 00 00 00 
0362+  1919 00 00 00 00 
0362+  191D 00 00 00 00 
0362+  1921 00 00 00 00 
0362+  1925 00 00 00 00 
0362+  1929 00 00 00 00 
0362+  192D 00 00 00 00 
0362+  1931 00 00 00 00 
0362+  1935 00 00 00 00 
0362+  1939 00 00 00 00 
0362+  193D 00 00 00 00 
0362+  1941 00 00 00 00 
0362+  1945 00 00 00 00 
0362+  1949 00 00 00 00 
0362+  194D 00 00 00 00 
0362+  1951 00 00 00 00 
0362+  1955 00 00 00 00 
0362+  1959 00 00 00 00 
0362+  195D 00 00 00 00 
0362+  1961 00 00 00 00 
0362+  1965 00 00 00 00 
0362+  1969 00 00 00 00 
0362+  196D 00 00 00 00 
0362+  1971 00 00 00 00 
0362+  1975 00 00 00 00 
0362+  1979 00 00 00 00 
0362+  197D 00 00 00 00 
0362+  1981 00 00 00 00 
0362+  1985 00 00 00 00 
3104   1989             
3105   1989             ; kernel parameters
3106   1989             sys_debug_mode:
3107   1989 00            .db 0   ; debug modes: 0=normal mode, 1=debug mode
3108   198A             sys_echo_on:
3109   198A 01            .db 1
3110   198B             sys_uart0_lcr:
3111   198B 0F            .db %00001111 ; 8 data bits, 2 stop bits, enable parity, odd parity
3112   198C             sys_uart0_inten:
3113   198C 01            .db 1
3114   198D             sys_uart0_fifoen:
3115   198D 00            .db 0
3116   198E             sys_uart0_div0:
3117   198E 03            .db 3
3118   198F             sys_uart0_div1:
3119   198F 00            .db 0   ; default baud = 38400
3120   1990             ; baud  divisor
3121   1990             ; 50    2304
3122   1990             ; 110   1047
3123   1990             ; 300    384
3124   1990             ; 600    192
3125   1990             ; 1200    96
3126   1990             ; 9600    12
3127   1990             ; 19200    6
3128   1990             ; 38400    3
3129   1990             sys_uart1_lcr:
3130   1990 0F            .db %00001111 ; 8 data bits, 2 stop bits, enable parity, odd parity
3131   1991             sys_uart1_inten:
3132   1991 01            .db 1
3133   1992             sys_uart1_fifoen:
3134   1992 00            .db 0
3135   1993             sys_uart1_div0:
3136   1993 03            .db 3
3137   1994             sys_uart1_div1:
3138   1994 00            .db 0   ; default baud = 38400
3139   1995             
3140   1995             nbr_active_procs:
3141   1995 00            .db 0
3142   1996             active_proc_index:
3143   1996 01            .db 1
3144   1997             
3145   1997             index:
3146   1997 00 00         .dw 0
3147   1999             buffer_addr:
3148   1999 00 00         .dw 0
3149   199B             
3150   199B             fifo_in:
3151   199B A2 21         .dw fifo
3152   199D             fifo_out:
3153   199D A2 21         .dw fifo
3154   199F             
3155   199F             ; file system variables
3156   199F             current_dir_id:
3157   199F 00 00         .dw 0     ; keep dirid of current directory
3158   19A1             s_init_path:
3159   19A1 2F 73 62 69   .db "/sbin/init", 0
3159   19A5 6E 2F 69 6E 
3159   19A9 69 74 00 
3160   19AC             
3161   19AC             s_uname:
3162   19AC 73 6F 6C 61   .db "solarium v.1.0", 0
3162   19B0 72 69 75 6D 
3162   19B4 20 76 2E 31 
3162   19B8 2E 30 00 
3163   19BB             s_dataentry:
3164   19BB 3E 20 00      .db "> ", 0
3165   19BE             s_parent_dir:
3166   19BE 2E 2E 00      .db "..", 0
3167   19C1             s_current_dir:
3168   19C1 2E 00         .db ".", 0
3169   19C3             s_fslash:
3170   19C3 2F 00         .db "/", 0
3171   19C5             file_attrib:
3172   19C5 2D 72 77 20   .db "-rw x"      ; chars at powers of 2
3172   19C9 78 
3173   19CA             file_type:
3174   19CA 2D 64 63      .db "-dc"
3175   19CD             s_ps_header:
3176   19CD 70 69 64 20   .db "pid command\n", 0
3176   19D1 63 6F 6D 6D 
3176   19D5 61 6E 64 0A 
3176   19D9 00 
3177   19DA             s_ls_total:
3178   19DA 74 6F 74 61   .db "total: ", 0
3178   19DE 6C 3A 20 00 
3179   19E2             
3180   19E2             s_int_en:
3181   19E2 69 72 71 73   .db "irqs enabled\n", 0
3181   19E6 20 65 6E 61 
3181   19EA 62 6C 65 64 
3181   19EE 0A 00 
3182   19F0             s_kernel_welcome:
3183   19F0 2A 2A 2A 2A   .db "************************************************\n"
3183   19F4 2A 2A 2A 2A 
3183   19F8 2A 2A 2A 2A 
3183   19FC 2A 2A 2A 2A 
3183   1A00 2A 2A 2A 2A 
3183   1A04 2A 2A 2A 2A 
3183   1A08 2A 2A 2A 2A 
3183   1A0C 2A 2A 2A 2A 
3183   1A10 2A 2A 2A 2A 
3183   1A14 2A 2A 2A 2A 
3183   1A18 2A 2A 2A 2A 
3183   1A1C 2A 2A 2A 2A 
3183   1A20 0A 
3184   1A21 2A 2A 2A 20   .db "*** Welcome to Solarium OS - Kernel ver. 1.0 ***\n"
3184   1A25 57 65 6C 63 
3184   1A29 6F 6D 65 20 
3184   1A2D 74 6F 20 53 
3184   1A31 6F 6C 61 72 
3184   1A35 69 75 6D 20 
3184   1A39 4F 53 20 2D 
3184   1A3D 20 4B 65 72 
3184   1A41 6E 65 6C 20 
3184   1A45 76 65 72 2E 
3184   1A49 20 31 2E 30 
3184   1A4D 20 2A 2A 2A 
3184   1A51 0A 
3185   1A52 2A 2A 2A 20   .db "*** type help for more information           ***\n"
3185   1A56 74 79 70 65 
3185   1A5A 20 68 65 6C 
3185   1A5E 70 20 66 6F 
3185   1A62 72 20 6D 6F 
3185   1A66 72 65 20 69 
3185   1A6A 6E 66 6F 72 
3185   1A6E 6D 61 74 69 
3185   1A72 6F 6E 20 20 
3185   1A76 20 20 20 20 
3185   1A7A 20 20 20 20 
3185   1A7E 20 2A 2A 2A 
3185   1A82 0A 
3186   1A83 2A 2A 2A 2A   .db "************************************************\n"
3186   1A87 2A 2A 2A 2A 
3186   1A8B 2A 2A 2A 2A 
3186   1A8F 2A 2A 2A 2A 
3186   1A93 2A 2A 2A 2A 
3186   1A97 2A 2A 2A 2A 
3186   1A9B 2A 2A 2A 2A 
3186   1A9F 2A 2A 2A 2A 
3186   1AA3 2A 2A 2A 2A 
3186   1AA7 2A 2A 2A 2A 
3186   1AAB 2A 2A 2A 2A 
3186   1AAF 2A 2A 2A 2A 
3186   1AB3 0A 
3187   1AB4             s_prompt_init:
3188   1AB4 73 74 61 72   .db "starting init\n", 0
3188   1AB8 74 69 6E 67 
3188   1ABC 20 69 6E 69 
3188   1AC0 74 0A 00 
3189   1AC3             s_priviledge:
3190   1AC3 0A 65 78 63   .db "\nexception: privilege\n", 0
3190   1AC7 65 70 74 69 
3190   1ACB 6F 6E 3A 20 
3190   1ACF 70 72 69 76 
3190   1AD3 69 6C 65 67 
3190   1AD7 65 0A 00 
3191   1ADA             s_divzero:
3192   1ADA 0A 65 78 63   .db "\nexception: zero division\n", 0
3192   1ADE 65 70 74 69 
3192   1AE2 6F 6E 3A 20 
3192   1AE6 7A 65 72 6F 
3192   1AEA 20 64 69 76 
3192   1AEE 69 73 69 6F 
3192   1AF2 6E 0A 00 
3193   1AF5             
3194   1AF5             s_set_year:
3195   1AF5 79 65 61 72   .db "year: ", 0
3195   1AF9 3A 20 00 
3196   1AFC             s_set_month:
3197   1AFC 6D 6F 6E 74   .db "month: ", 0
3197   1B00 68 3A 20 00 
3198   1B04             s_set_day:
3199   1B04 64 61 79 3A   .db "day: ", 0
3199   1B08 20 00 
3200   1B0A             s_set_week:
3201   1B0A 77 65 65 6B   .db "weekday: ", 0
3201   1B0E 64 61 79 3A 
3201   1B12 20 00 
3202   1B14             s_set_hours:
3203   1B14 68 6F 75 72   .db "hours: ", 0
3203   1B18 73 3A 20 00 
3204   1B1C             s_set_minutes:
3205   1B1C 6D 69 6E 75   .db "minutes: ", 0
3205   1B20 74 65 73 3A 
3205   1B24 20 00 
3206   1B26             s_set_seconds:
3207   1B26 73 65 63 6F   .db "seconds: ", 0
3207   1B2A 6E 64 73 3A 
3207   1B2E 20 00 
3208   1B30             s_months:      
3209   1B30 20 20 20 00   .db "   ", 0
3210   1B34 6A 61 6E 00   .db "jan", 0
3211   1B38 66 65 62 00   .db "feb", 0
3212   1B3C 6D 61 72 00   .db "mar", 0
3213   1B40 61 70 72 00   .db "apr", 0
3214   1B44 6D 61 79 00   .db "may", 0
3215   1B48 6A 75 6E 00   .db "jun", 0
3216   1B4C 6A 75 6C 00   .db "jul", 0
3217   1B50 61 75 67 00   .db "aug", 0
3218   1B54 73 65 70 00   .db "sep", 0
3219   1B58 6F 63 74 00   .db "oct", 0
3220   1B5C 6E 6F 76 00   .db "nov", 0
3221   1B60 64 65 63 00   .db "dec", 0
3222   1B64             
3223   1B64             s_week:        
3224   1B64 73 75 6E 00   .db "sun", 0 
3225   1B68 6D 6F 6E 00   .db "mon", 0 
3226   1B6C 74 75 65 00   .db "tue", 0 
3227   1B70 77 65 64 00   .db "wed", 0 
3228   1B74 74 68 75 00   .db "thu", 0 
3229   1B78 66 72 69 00   .db "fri", 0 
3230   1B7C 73 61 74 00   .db "sat", 0
3231   1B80             
3232   1B80 0A 49 52 51 s_fdc_irq: .db "\nIRQ0 Executed.\n", 0
3232   1B84 30 20 45 78 
3232   1B88 65 63 75 74 
3232   1B8C 65 64 2E 0A 
3232   1B90 00 
3233   1B91             s_fdc_config:
3234   1B91 73 65 6C 65   .db "selecting diskette drive 0, side 0, single density, head loaded\n", 0
3234   1B95 63 74 69 6E 
3234   1B99 67 20 64 69 
3234   1B9D 73 6B 65 74 
3234   1BA1 74 65 20 64 
3234   1BA5 72 69 76 65 
3234   1BA9 20 30 2C 20 
3234   1BAD 73 69 64 65 
3234   1BB1 20 30 2C 20 
3234   1BB5 73 69 6E 67 
3234   1BB9 6C 65 20 64 
3234   1BBD 65 6E 73 69 
3234   1BC1 74 79 2C 20 
3234   1BC5 68 65 61 64 
3234   1BC9 20 6C 6F 61 
3234   1BCD 64 65 64 0A 
3234   1BD1 00 
3235   1BD2             
3236   1BD2             proc_state_table:   
3237   1BD2 00 00 00 00   .fill 16 * 20, 0  ; for 15 processes max
3237   1BD6 00 00 00 00 
3237   1BDA 00 00 00 00 
3237   1BDE 00 00 00 00 
3237   1BE2 00 00 00 00 
3237   1BE6 00 00 00 00 
3237   1BEA 00 00 00 00 
3237   1BEE 00 00 00 00 
3237   1BF2 00 00 00 00 
3237   1BF6 00 00 00 00 
3237   1BFA 00 00 00 00 
3237   1BFE 00 00 00 00 
3237   1C02 00 00 00 00 
3237   1C06 00 00 00 00 
3237   1C0A 00 00 00 00 
3237   1C0E 00 00 00 00 
3237   1C12 00 00 00 00 
3237   1C16 00 00 00 00 
3237   1C1A 00 00 00 00 
3237   1C1E 00 00 00 00 
3237   1C22 00 00 00 00 
3237   1C26 00 00 00 00 
3237   1C2A 00 00 00 00 
3237   1C2E 00 00 00 00 
3237   1C32 00 00 00 00 
3237   1C36 00 00 00 00 
3237   1C3A 00 00 00 00 
3237   1C3E 00 00 00 00 
3237   1C42 00 00 00 00 
3237   1C46 00 00 00 00 
3237   1C4A 00 00 00 00 
3237   1C4E 00 00 00 00 
3237   1C52 00 00 00 00 
3237   1C56 00 00 00 00 
3237   1C5A 00 00 00 00 
3237   1C5E 00 00 00 00 
3237   1C62 00 00 00 00 
3237   1C66 00 00 00 00 
3237   1C6A 00 00 00 00 
3237   1C6E 00 00 00 00 
3237   1C72 00 00 00 00 
3237   1C76 00 00 00 00 
3237   1C7A 00 00 00 00 
3237   1C7E 00 00 00 00 
3237   1C82 00 00 00 00 
3237   1C86 00 00 00 00 
3237   1C8A 00 00 00 00 
3237   1C8E 00 00 00 00 
3237   1C92 00 00 00 00 
3237   1C96 00 00 00 00 
3237   1C9A 00 00 00 00 
3237   1C9E 00 00 00 00 
3237   1CA2 00 00 00 00 
3237   1CA6 00 00 00 00 
3237   1CAA 00 00 00 00 
3237   1CAE 00 00 00 00 
3237   1CB2 00 00 00 00 
3237   1CB6 00 00 00 00 
3237   1CBA 00 00 00 00 
3237   1CBE 00 00 00 00 
3237   1CC2 00 00 00 00 
3237   1CC6 00 00 00 00 
3237   1CCA 00 00 00 00 
3237   1CCE 00 00 00 00 
3237   1CD2 00 00 00 00 
3237   1CD6 00 00 00 00 
3237   1CDA 00 00 00 00 
3237   1CDE 00 00 00 00 
3237   1CE2 00 00 00 00 
3237   1CE6 00 00 00 00 
3237   1CEA 00 00 00 00 
3237   1CEE 00 00 00 00 
3237   1CF2 00 00 00 00 
3237   1CF6 00 00 00 00 
3237   1CFA 00 00 00 00 
3237   1CFE 00 00 00 00 
3237   1D02 00 00 00 00 
3237   1D06 00 00 00 00 
3237   1D0A 00 00 00 00 
3237   1D0E 00 00 00 00 
3238   1D12             proc_availab_table: 
3239   1D12 00 00 00 00   .fill 16, 0       ; space for 15 processes. 0 = process empty, 1 = process taken
3239   1D16 00 00 00 00 
3239   1D1A 00 00 00 00 
3239   1D1E 00 00 00 00 
3240   1D22             proc_names:
3241   1D22 00 00 00 00   .fill 16 * 32, 0  ; process names
3241   1D26 00 00 00 00 
3241   1D2A 00 00 00 00 
3241   1D2E 00 00 00 00 
3241   1D32 00 00 00 00 
3241   1D36 00 00 00 00 
3241   1D3A 00 00 00 00 
3241   1D3E 00 00 00 00 
3241   1D42 00 00 00 00 
3241   1D46 00 00 00 00 
3241   1D4A 00 00 00 00 
3241   1D4E 00 00 00 00 
3241   1D52 00 00 00 00 
3241   1D56 00 00 00 00 
3241   1D5A 00 00 00 00 
3241   1D5E 00 00 00 00 
3241   1D62 00 00 00 00 
3241   1D66 00 00 00 00 
3241   1D6A 00 00 00 00 
3241   1D6E 00 00 00 00 
3241   1D72 00 00 00 00 
3241   1D76 00 00 00 00 
3241   1D7A 00 00 00 00 
3241   1D7E 00 00 00 00 
3241   1D82 00 00 00 00 
3241   1D86 00 00 00 00 
3241   1D8A 00 00 00 00 
3241   1D8E 00 00 00 00 
3241   1D92 00 00 00 00 
3241   1D96 00 00 00 00 
3241   1D9A 00 00 00 00 
3241   1D9E 00 00 00 00 
3241   1DA2 00 00 00 00 
3241   1DA6 00 00 00 00 
3241   1DAA 00 00 00 00 
3241   1DAE 00 00 00 00 
3241   1DB2 00 00 00 00 
3241   1DB6 00 00 00 00 
3241   1DBA 00 00 00 00 
3241   1DBE 00 00 00 00 
3241   1DC2 00 00 00 00 
3241   1DC6 00 00 00 00 
3241   1DCA 00 00 00 00 
3241   1DCE 00 00 00 00 
3241   1DD2 00 00 00 00 
3241   1DD6 00 00 00 00 
3241   1DDA 00 00 00 00 
3241   1DDE 00 00 00 00 
3241   1DE2 00 00 00 00 
3241   1DE6 00 00 00 00 
3241   1DEA 00 00 00 00 
3241   1DEE 00 00 00 00 
3241   1DF2 00 00 00 00 
3241   1DF6 00 00 00 00 
3241   1DFA 00 00 00 00 
3241   1DFE 00 00 00 00 
3241   1E02 00 00 00 00 
3241   1E06 00 00 00 00 
3241   1E0A 00 00 00 00 
3241   1E0E 00 00 00 00 
3241   1E12 00 00 00 00 
3241   1E16 00 00 00 00 
3241   1E1A 00 00 00 00 
3241   1E1E 00 00 00 00 
3241   1E22 00 00 00 00 
3241   1E26 00 00 00 00 
3241   1E2A 00 00 00 00 
3241   1E2E 00 00 00 00 
3241   1E32 00 00 00 00 
3241   1E36 00 00 00 00 
3241   1E3A 00 00 00 00 
3241   1E3E 00 00 00 00 
3241   1E42 00 00 00 00 
3241   1E46 00 00 00 00 
3241   1E4A 00 00 00 00 
3241   1E4E 00 00 00 00 
3241   1E52 00 00 00 00 
3241   1E56 00 00 00 00 
3241   1E5A 00 00 00 00 
3241   1E5E 00 00 00 00 
3241   1E62 00 00 00 00 
3241   1E66 00 00 00 00 
3241   1E6A 00 00 00 00 
3241   1E6E 00 00 00 00 
3241   1E72 00 00 00 00 
3241   1E76 00 00 00 00 
3241   1E7A 00 00 00 00 
3241   1E7E 00 00 00 00 
3241   1E82 00 00 00 00 
3241   1E86 00 00 00 00 
3241   1E8A 00 00 00 00 
3241   1E8E 00 00 00 00 
3241   1E92 00 00 00 00 
3241   1E96 00 00 00 00 
3241   1E9A 00 00 00 00 
3241   1E9E 00 00 00 00 
3241   1EA2 00 00 00 00 
3241   1EA6 00 00 00 00 
3241   1EAA 00 00 00 00 
3241   1EAE 00 00 00 00 
3241   1EB2 00 00 00 00 
3241   1EB6 00 00 00 00 
3241   1EBA 00 00 00 00 
3241   1EBE 00 00 00 00 
3241   1EC2 00 00 00 00 
3241   1EC6 00 00 00 00 
3241   1ECA 00 00 00 00 
3241   1ECE 00 00 00 00 
3241   1ED2 00 00 00 00 
3241   1ED6 00 00 00 00 
3241   1EDA 00 00 00 00 
3241   1EDE 00 00 00 00 
3241   1EE2 00 00 00 00 
3241   1EE6 00 00 00 00 
3241   1EEA 00 00 00 00 
3241   1EEE 00 00 00 00 
3241   1EF2 00 00 00 00 
3241   1EF6 00 00 00 00 
3241   1EFA 00 00 00 00 
3241   1EFE 00 00 00 00 
3241   1F02 00 00 00 00 
3241   1F06 00 00 00 00 
3241   1F0A 00 00 00 00 
3241   1F0E 00 00 00 00 
3241   1F12 00 00 00 00 
3241   1F16 00 00 00 00 
3241   1F1A 00 00 00 00 
3241   1F1E 00 00 00 00 
3242   1F22             filename:
3243   1F22 00 00 00 00   .fill 128, 0      ; holds a path for file search
3243   1F26 00 00 00 00 
3243   1F2A 00 00 00 00 
3243   1F2E 00 00 00 00 
3243   1F32 00 00 00 00 
3243   1F36 00 00 00 00 
3243   1F3A 00 00 00 00 
3243   1F3E 00 00 00 00 
3243   1F42 00 00 00 00 
3243   1F46 00 00 00 00 
3243   1F4A 00 00 00 00 
3243   1F4E 00 00 00 00 
3243   1F52 00 00 00 00 
3243   1F56 00 00 00 00 
3243   1F5A 00 00 00 00 
3243   1F5E 00 00 00 00 
3243   1F62 00 00 00 00 
3243   1F66 00 00 00 00 
3243   1F6A 00 00 00 00 
3243   1F6E 00 00 00 00 
3243   1F72 00 00 00 00 
3243   1F76 00 00 00 00 
3243   1F7A 00 00 00 00 
3243   1F7E 00 00 00 00 
3243   1F82 00 00 00 00 
3243   1F86 00 00 00 00 
3243   1F8A 00 00 00 00 
3243   1F8E 00 00 00 00 
3243   1F92 00 00 00 00 
3243   1F96 00 00 00 00 
3243   1F9A 00 00 00 00 
3243   1F9E 00 00 00 00 
3244   1FA2             user_data:
3245   1FA2 00 00 00 00   .fill 512, 0      ;  user space data
3245   1FA6 00 00 00 00 
3245   1FAA 00 00 00 00 
3245   1FAE 00 00 00 00 
3245   1FB2 00 00 00 00 
3245   1FB6 00 00 00 00 
3245   1FBA 00 00 00 00 
3245   1FBE 00 00 00 00 
3245   1FC2 00 00 00 00 
3245   1FC6 00 00 00 00 
3245   1FCA 00 00 00 00 
3245   1FCE 00 00 00 00 
3245   1FD2 00 00 00 00 
3245   1FD6 00 00 00 00 
3245   1FDA 00 00 00 00 
3245   1FDE 00 00 00 00 
3245   1FE2 00 00 00 00 
3245   1FE6 00 00 00 00 
3245   1FEA 00 00 00 00 
3245   1FEE 00 00 00 00 
3245   1FF2 00 00 00 00 
3245   1FF6 00 00 00 00 
3245   1FFA 00 00 00 00 
3245   1FFE 00 00 00 00 
3245   2002 00 00 00 00 
3245   2006 00 00 00 00 
3245   200A 00 00 00 00 
3245   200E 00 00 00 00 
3245   2012 00 00 00 00 
3245   2016 00 00 00 00 
3245   201A 00 00 00 00 
3245   201E 00 00 00 00 
3245   2022 00 00 00 00 
3245   2026 00 00 00 00 
3245   202A 00 00 00 00 
3245   202E 00 00 00 00 
3245   2032 00 00 00 00 
3245   2036 00 00 00 00 
3245   203A 00 00 00 00 
3245   203E 00 00 00 00 
3245   2042 00 00 00 00 
3245   2046 00 00 00 00 
3245   204A 00 00 00 00 
3245   204E 00 00 00 00 
3245   2052 00 00 00 00 
3245   2056 00 00 00 00 
3245   205A 00 00 00 00 
3245   205E 00 00 00 00 
3245   2062 00 00 00 00 
3245   2066 00 00 00 00 
3245   206A 00 00 00 00 
3245   206E 00 00 00 00 
3245   2072 00 00 00 00 
3245   2076 00 00 00 00 
3245   207A 00 00 00 00 
3245   207E 00 00 00 00 
3245   2082 00 00 00 00 
3245   2086 00 00 00 00 
3245   208A 00 00 00 00 
3245   208E 00 00 00 00 
3245   2092 00 00 00 00 
3245   2096 00 00 00 00 
3245   209A 00 00 00 00 
3245   209E 00 00 00 00 
3245   20A2 00 00 00 00 
3245   20A6 00 00 00 00 
3245   20AA 00 00 00 00 
3245   20AE 00 00 00 00 
3245   20B2 00 00 00 00 
3245   20B6 00 00 00 00 
3245   20BA 00 00 00 00 
3245   20BE 00 00 00 00 
3245   20C2 00 00 00 00 
3245   20C6 00 00 00 00 
3245   20CA 00 00 00 00 
3245   20CE 00 00 00 00 
3245   20D2 00 00 00 00 
3245   20D6 00 00 00 00 
3245   20DA 00 00 00 00 
3245   20DE 00 00 00 00 
3245   20E2 00 00 00 00 
3245   20E6 00 00 00 00 
3245   20EA 00 00 00 00 
3245   20EE 00 00 00 00 
3245   20F2 00 00 00 00 
3245   20F6 00 00 00 00 
3245   20FA 00 00 00 00 
3245   20FE 00 00 00 00 
3245   2102 00 00 00 00 
3245   2106 00 00 00 00 
3245   210A 00 00 00 00 
3245   210E 00 00 00 00 
3245   2112 00 00 00 00 
3245   2116 00 00 00 00 
3245   211A 00 00 00 00 
3245   211E 00 00 00 00 
3245   2122 00 00 00 00 
3245   2126 00 00 00 00 
3245   212A 00 00 00 00 
3245   212E 00 00 00 00 
3245   2132 00 00 00 00 
3245   2136 00 00 00 00 
3245   213A 00 00 00 00 
3245   213E 00 00 00 00 
3245   2142 00 00 00 00 
3245   2146 00 00 00 00 
3245   214A 00 00 00 00 
3245   214E 00 00 00 00 
3245   2152 00 00 00 00 
3245   2156 00 00 00 00 
3245   215A 00 00 00 00 
3245   215E 00 00 00 00 
3245   2162 00 00 00 00 
3245   2166 00 00 00 00 
3245   216A 00 00 00 00 
3245   216E 00 00 00 00 
3245   2172 00 00 00 00 
3245   2176 00 00 00 00 
3245   217A 00 00 00 00 
3245   217E 00 00 00 00 
3245   2182 00 00 00 00 
3245   2186 00 00 00 00 
3245   218A 00 00 00 00 
3245   218E 00 00 00 00 
3245   2192 00 00 00 00 
3245   2196 00 00 00 00 
3245   219A 00 00 00 00 
3245   219E 00 00 00 00 
3246   21A2             fifo:
3247   21A2 FF FF FF FF   .fill _fifo_size
3247   21A6 FF FF FF FF 
3247   21AA FF FF FF FF 
3247   21AE FF FF FF FF 
3247   21B2 FF FF FF FF 
3247   21B6 FF FF FF FF 
3247   21BA FF FF FF FF 
3247   21BE FF FF FF FF 
3247   21C2 FF FF FF FF 
3247   21C6 FF FF FF FF 
3247   21CA FF FF FF FF 
3247   21CE FF FF FF FF 
3247   21D2 FF FF FF FF 
3247   21D6 FF FF FF FF 
3247   21DA FF FF FF FF 
3247   21DE FF FF FF FF 
3247   21E2 FF FF FF FF 
3247   21E6 FF FF FF FF 
3247   21EA FF FF FF FF 
3247   21EE FF FF FF FF 
3247   21F2 FF FF FF FF 
3247   21F6 FF FF FF FF 
3247   21FA FF FF FF FF 
3247   21FE FF FF FF FF 
3247   2202 FF FF FF FF 
3247   2206 FF FF FF FF 
3247   220A FF FF FF FF 
3247   220E FF FF FF FF 
3247   2212 FF FF FF FF 
3247   2216 FF FF FF FF 
3247   221A FF FF FF FF 
3247   221E FF FF FF FF 
3247   2222 FF FF FF FF 
3247   2226 FF FF FF FF 
3247   222A FF FF FF FF 
3247   222E FF FF FF FF 
3247   2232 FF FF FF FF 
3247   2236 FF FF FF FF 
3247   223A FF FF FF FF 
3247   223E FF FF FF FF 
3247   2242 FF FF FF FF 
3247   2246 FF FF FF FF 
3247   224A FF FF FF FF 
3247   224E FF FF FF FF 
3247   2252 FF FF FF FF 
3247   2256 FF FF FF FF 
3247   225A FF FF FF FF 
3247   225E FF FF FF FF 
3247   2262 FF FF FF FF 
3247   2266 FF FF FF FF 
3247   226A FF FF FF FF 
3247   226E FF FF FF FF 
3247   2272 FF FF FF FF 
3247   2276 FF FF FF FF 
3247   227A FF FF FF FF 
3247   227E FF FF FF FF 
3247   2282 FF FF FF FF 
3247   2286 FF FF FF FF 
3247   228A FF FF FF FF 
3247   228E FF FF FF FF 
3247   2292 FF FF FF FF 
3247   2296 FF FF FF FF 
3247   229A FF FF FF FF 
3247   229E FF FF FF FF 
3247   22A2 FF FF FF FF 
3247   22A6 FF FF FF FF 
3247   22AA FF FF FF FF 
3247   22AE FF FF FF FF 
3247   22B2 FF FF FF FF 
3247   22B6 FF FF FF FF 
3247   22BA FF FF FF FF 
3247   22BE FF FF FF FF 
3247   22C2 FF FF FF FF 
3247   22C6 FF FF FF FF 
3247   22CA FF FF FF FF 
3247   22CE FF FF FF FF 
3247   22D2 FF FF FF FF 
3247   22D6 FF FF FF FF 
3247   22DA FF FF FF FF 
3247   22DE FF FF FF FF 
3247   22E2 FF FF FF FF 
3247   22E6 FF FF FF FF 
3247   22EA FF FF FF FF 
3247   22EE FF FF FF FF 
3247   22F2 FF FF FF FF 
3247   22F6 FF FF FF FF 
3247   22FA FF FF FF FF 
3247   22FE FF FF FF FF 
3247   2302 FF FF FF FF 
3247   2306 FF FF FF FF 
3247   230A FF FF FF FF 
3247   230E FF FF FF FF 
3247   2312 FF FF FF FF 
3247   2316 FF FF FF FF 
3247   231A FF FF FF FF 
3247   231E FF FF FF FF 
3247   2322 FF FF FF FF 
3247   2326 FF FF FF FF 
3247   232A FF FF FF FF 
3247   232E FF FF FF FF 
3247   2332 FF FF FF FF 
3247   2336 FF FF FF FF 
3247   233A FF FF FF FF 
3247   233E FF FF FF FF 
3247   2342 FF FF FF FF 
3247   2346 FF FF FF FF 
3247   234A FF FF FF FF 
3247   234E FF FF FF FF 
3247   2352 FF FF FF FF 
3247   2356 FF FF FF FF 
3247   235A FF FF FF FF 
3247   235E FF FF FF FF 
3247   2362 FF FF FF FF 
3247   2366 FF FF FF FF 
3247   236A FF FF FF FF 
3247   236E FF FF FF FF 
3247   2372 FF FF FF FF 
3247   2376 FF FF FF FF 
3247   237A FF FF FF FF 
3247   237E FF FF FF FF 
3247   2382 FF FF FF FF 
3247   2386 FF FF FF FF 
3247   238A FF FF FF FF 
3247   238E FF FF FF FF 
3247   2392 FF FF FF FF 
3247   2396 FF FF FF FF 
3247   239A FF FF FF FF 
3247   239E FF FF FF FF 
3247   23A2 FF FF FF FF 
3247   23A6 FF FF FF FF 
3247   23AA FF FF FF FF 
3247   23AE FF FF FF FF 
3247   23B2 FF FF FF FF 
3247   23B6 FF FF FF FF 
3247   23BA FF FF FF FF 
3247   23BE FF FF FF FF 
3247   23C2 FF FF FF FF 
3247   23C6 FF FF FF FF 
3247   23CA FF FF FF FF 
3247   23CE FF FF FF FF 
3247   23D2 FF FF FF FF 
3247   23D6 FF FF FF FF 
3247   23DA FF FF FF FF 
3247   23DE FF FF FF FF 
3247   23E2 FF FF FF FF 
3247   23E6 FF FF FF FF 
3247   23EA FF FF FF FF 
3247   23EE FF FF FF FF 
3247   23F2 FF FF FF FF 
3247   23F6 FF FF FF FF 
3247   23FA FF FF FF FF 
3247   23FE FF FF FF FF 
3247   2402 FF FF FF FF 
3247   2406 FF FF FF FF 
3247   240A FF FF FF FF 
3247   240E FF FF FF FF 
3247   2412 FF FF FF FF 
3247   2416 FF FF FF FF 
3247   241A FF FF FF FF 
3247   241E FF FF FF FF 
3247   2422 FF FF FF FF 
3247   2426 FF FF FF FF 
3247   242A FF FF FF FF 
3247   242E FF FF FF FF 
3247   2432 FF FF FF FF 
3247   2436 FF FF FF FF 
3247   243A FF FF FF FF 
3247   243E FF FF FF FF 
3247   2442 FF FF FF FF 
3247   2446 FF FF FF FF 
3247   244A FF FF FF FF 
3247   244E FF FF FF FF 
3247   2452 FF FF FF FF 
3247   2456 FF FF FF FF 
3247   245A FF FF FF FF 
3247   245E FF FF FF FF 
3247   2462 FF FF FF FF 
3247   2466 FF FF FF FF 
3247   246A FF FF FF FF 
3247   246E FF FF FF FF 
3247   2472 FF FF FF FF 
3247   2476 FF FF FF FF 
3247   247A FF FF FF FF 
3247   247E FF FF FF FF 
3247   2482 FF FF FF FF 
3247   2486 FF FF FF FF 
3247   248A FF FF FF FF 
3247   248E FF FF FF FF 
3247   2492 FF FF FF FF 
3247   2496 FF FF FF FF 
3247   249A FF FF FF FF 
3247   249E FF FF FF FF 
3247   24A2 FF FF FF FF 
3247   24A6 FF FF FF FF 
3247   24AA FF FF FF FF 
3247   24AE FF FF FF FF 
3247   24B2 FF FF FF FF 
3247   24B6 FF FF FF FF 
3247   24BA FF FF FF FF 
3247   24BE FF FF FF FF 
3247   24C2 FF FF FF FF 
3247   24C6 FF FF FF FF 
3247   24CA FF FF FF FF 
3247   24CE FF FF FF FF 
3247   24D2 FF FF FF FF 
3247   24D6 FF FF FF FF 
3247   24DA FF FF FF FF 
3247   24DE FF FF FF FF 
3247   24E2 FF FF FF FF 
3247   24E6 FF FF FF FF 
3247   24EA FF FF FF FF 
3247   24EE FF FF FF FF 
3247   24F2 FF FF FF FF 
3247   24F6 FF FF FF FF 
3247   24FA FF FF FF FF 
3247   24FE FF FF FF FF 
3247   2502 FF FF FF FF 
3247   2506 FF FF FF FF 
3247   250A FF FF FF FF 
3247   250E FF FF FF FF 
3247   2512 FF FF FF FF 
3247   2516 FF FF FF FF 
3247   251A FF FF FF FF 
3247   251E FF FF FF FF 
3247   2522 FF FF FF FF 
3247   2526 FF FF FF FF 
3247   252A FF FF FF FF 
3247   252E FF FF FF FF 
3247   2532 FF FF FF FF 
3247   2536 FF FF FF FF 
3247   253A FF FF FF FF 
3247   253E FF FF FF FF 
3247   2542 FF FF FF FF 
3247   2546 FF FF FF FF 
3247   254A FF FF FF FF 
3247   254E FF FF FF FF 
3247   2552 FF FF FF FF 
3247   2556 FF FF FF FF 
3247   255A FF FF FF FF 
3247   255E FF FF FF FF 
3247   2562 FF FF FF FF 
3247   2566 FF FF FF FF 
3247   256A FF FF FF FF 
3247   256E FF FF FF FF 
3247   2572 FF FF FF FF 
3247   2576 FF FF FF FF 
3247   257A FF FF FF FF 
3247   257E FF FF FF FF 
3247   2582 FF FF FF FF 
3247   2586 FF FF FF FF 
3247   258A FF FF FF FF 
3247   258E FF FF FF FF 
3247   2592 FF FF FF FF 
3247   2596 FF FF FF FF 
3247   259A FF FF FF FF 
3247   259E FF FF FF FF 
3247   25A2 FF FF FF FF 
3247   25A6 FF FF FF FF 
3247   25AA FF FF FF FF 
3247   25AE FF FF FF FF 
3247   25B2 FF FF FF FF 
3247   25B6 FF FF FF FF 
3247   25BA FF FF FF FF 
3247   25BE FF FF FF FF 
3247   25C2 FF FF FF FF 
3247   25C6 FF FF FF FF 
3247   25CA FF FF FF FF 
3247   25CE FF FF FF FF 
3247   25D2 FF FF FF FF 
3247   25D6 FF FF FF FF 
3247   25DA FF FF FF FF 
3247   25DE FF FF FF FF 
3247   25E2 FF FF FF FF 
3247   25E6 FF FF FF FF 
3247   25EA FF FF FF FF 
3247   25EE FF FF FF FF 
3247   25F2 FF FF FF FF 
3247   25F6 FF FF FF FF 
3247   25FA FF FF FF FF 
3247   25FE FF FF FF FF 
3247   2602 FF FF FF FF 
3247   2606 FF FF FF FF 
3247   260A FF FF FF FF 
3247   260E FF FF FF FF 
3247   2612 FF FF FF FF 
3247   2616 FF FF FF FF 
3247   261A FF FF FF FF 
3247   261E FF FF FF FF 
3247   2622 FF FF FF FF 
3247   2626 FF FF FF FF 
3247   262A FF FF FF FF 
3247   262E FF FF FF FF 
3247   2632 FF FF FF FF 
3247   2636 FF FF FF FF 
3247   263A FF FF FF FF 
3247   263E FF FF FF FF 
3247   2642 FF FF FF FF 
3247   2646 FF FF FF FF 
3247   264A FF FF FF FF 
3247   264E FF FF FF FF 
3247   2652 FF FF FF FF 
3247   2656 FF FF FF FF 
3247   265A FF FF FF FF 
3247   265E FF FF FF FF 
3247   2662 FF FF FF FF 
3247   2666 FF FF FF FF 
3247   266A FF FF FF FF 
3247   266E FF FF FF FF 
3247   2672 FF FF FF FF 
3247   2676 FF FF FF FF 
3247   267A FF FF FF FF 
3247   267E FF FF FF FF 
3247   2682 FF FF FF FF 
3247   2686 FF FF FF FF 
3247   268A FF FF FF FF 
3247   268E FF FF FF FF 
3247   2692 FF FF FF FF 
3247   2696 FF FF FF FF 
3247   269A FF FF FF FF 
3247   269E FF FF FF FF 
3247   26A2 FF FF FF FF 
3247   26A6 FF FF FF FF 
3247   26AA FF FF FF FF 
3247   26AE FF FF FF FF 
3247   26B2 FF FF FF FF 
3247   26B6 FF FF FF FF 
3247   26BA FF FF FF FF 
3247   26BE FF FF FF FF 
3247   26C2 FF FF FF FF 
3247   26C6 FF FF FF FF 
3247   26CA FF FF FF FF 
3247   26CE FF FF FF FF 
3247   26D2 FF FF FF FF 
3247   26D6 FF FF FF FF 
3247   26DA FF FF FF FF 
3247   26DE FF FF FF FF 
3247   26E2 FF FF FF FF 
3247   26E6 FF FF FF FF 
3247   26EA FF FF FF FF 
3247   26EE FF FF FF FF 
3247   26F2 FF FF FF FF 
3247   26F6 FF FF FF FF 
3247   26FA FF FF FF FF 
3247   26FE FF FF FF FF 
3247   2702 FF FF FF FF 
3247   2706 FF FF FF FF 
3247   270A FF FF FF FF 
3247   270E FF FF FF FF 
3247   2712 FF FF FF FF 
3247   2716 FF FF FF FF 
3247   271A FF FF FF FF 
3247   271E FF FF FF FF 
3247   2722 FF FF FF FF 
3247   2726 FF FF FF FF 
3247   272A FF FF FF FF 
3247   272E FF FF FF FF 
3247   2732 FF FF FF FF 
3247   2736 FF FF FF FF 
3247   273A FF FF FF FF 
3247   273E FF FF FF FF 
3247   2742 FF FF FF FF 
3247   2746 FF FF FF FF 
3247   274A FF FF FF FF 
3247   274E FF FF FF FF 
3247   2752 FF FF FF FF 
3247   2756 FF FF FF FF 
3247   275A FF FF FF FF 
3247   275E FF FF FF FF 
3247   2762 FF FF FF FF 
3247   2766 FF FF FF FF 
3247   276A FF FF FF FF 
3247   276E FF FF FF FF 
3247   2772 FF FF FF FF 
3247   2776 FF FF FF FF 
3247   277A FF FF FF FF 
3247   277E FF FF FF FF 
3247   2782 FF FF FF FF 
3247   2786 FF FF FF FF 
3247   278A FF FF FF FF 
3247   278E FF FF FF FF 
3247   2792 FF FF FF FF 
3247   2796 FF FF FF FF 
3247   279A FF FF FF FF 
3247   279E FF FF FF FF 
3247   27A2 FF FF FF FF 
3247   27A6 FF FF FF FF 
3247   27AA FF FF FF FF 
3247   27AE FF FF FF FF 
3247   27B2 FF FF FF FF 
3247   27B6 FF FF FF FF 
3247   27BA FF FF FF FF 
3247   27BE FF FF FF FF 
3247   27C2 FF FF FF FF 
3247   27C6 FF FF FF FF 
3247   27CA FF FF FF FF 
3247   27CE FF FF FF FF 
3247   27D2 FF FF FF FF 
3247   27D6 FF FF FF FF 
3247   27DA FF FF FF FF 
3247   27DE FF FF FF FF 
3247   27E2 FF FF FF FF 
3247   27E6 FF FF FF FF 
3247   27EA FF FF FF FF 
3247   27EE FF FF FF FF 
3247   27F2 FF FF FF FF 
3247   27F6 FF FF FF FF 
3247   27FA FF FF FF FF 
3247   27FE FF FF FF FF 
3247   2802 FF FF FF FF 
3247   2806 FF FF FF FF 
3247   280A FF FF FF FF 
3247   280E FF FF FF FF 
3247   2812 FF FF FF FF 
3247   2816 FF FF FF FF 
3247   281A FF FF FF FF 
3247   281E FF FF FF FF 
3247   2822 FF FF FF FF 
3247   2826 FF FF FF FF 
3247   282A FF FF FF FF 
3247   282E FF FF FF FF 
3247   2832 FF FF FF FF 
3247   2836 FF FF FF FF 
3247   283A FF FF FF FF 
3247   283E FF FF FF FF 
3247   2842 FF FF FF FF 
3247   2846 FF FF FF FF 
3247   284A FF FF FF FF 
3247   284E FF FF FF FF 
3247   2852 FF FF FF FF 
3247   2856 FF FF FF FF 
3247   285A FF FF FF FF 
3247   285E FF FF FF FF 
3247   2862 FF FF FF FF 
3247   2866 FF FF FF FF 
3247   286A FF FF FF FF 
3247   286E FF FF FF FF 
3247   2872 FF FF FF FF 
3247   2876 FF FF FF FF 
3247   287A FF FF FF FF 
3247   287E FF FF FF FF 
3247   2882 FF FF FF FF 
3247   2886 FF FF FF FF 
3247   288A FF FF FF FF 
3247   288E FF FF FF FF 
3247   2892 FF FF FF FF 
3247   2896 FF FF FF FF 
3247   289A FF FF FF FF 
3247   289E FF FF FF FF 
3247   28A2 FF FF FF FF 
3247   28A6 FF FF FF FF 
3247   28AA FF FF FF FF 
3247   28AE FF FF FF FF 
3247   28B2 FF FF FF FF 
3247   28B6 FF FF FF FF 
3247   28BA FF FF FF FF 
3247   28BE FF FF FF FF 
3247   28C2 FF FF FF FF 
3247   28C6 FF FF FF FF 
3247   28CA FF FF FF FF 
3247   28CE FF FF FF FF 
3247   28D2 FF FF FF FF 
3247   28D6 FF FF FF FF 
3247   28DA FF FF FF FF 
3247   28DE FF FF FF FF 
3247   28E2 FF FF FF FF 
3247   28E6 FF FF FF FF 
3247   28EA FF FF FF FF 
3247   28EE FF FF FF FF 
3247   28F2 FF FF FF FF 
3247   28F6 FF FF FF FF 
3247   28FA FF FF FF FF 
3247   28FE FF FF FF FF 
3247   2902 FF FF FF FF 
3247   2906 FF FF FF FF 
3247   290A FF FF FF FF 
3247   290E FF FF FF FF 
3247   2912 FF FF FF FF 
3247   2916 FF FF FF FF 
3247   291A FF FF FF FF 
3247   291E FF FF FF FF 
3247   2922 FF FF FF FF 
3247   2926 FF FF FF FF 
3247   292A FF FF FF FF 
3247   292E FF FF FF FF 
3247   2932 FF FF FF FF 
3247   2936 FF FF FF FF 
3247   293A FF FF FF FF 
3247   293E FF FF FF FF 
3247   2942 FF FF FF FF 
3247   2946 FF FF FF FF 
3247   294A FF FF FF FF 
3247   294E FF FF FF FF 
3247   2952 FF FF FF FF 
3247   2956 FF FF FF FF 
3247   295A FF FF FF FF 
3247   295E FF FF FF FF 
3247   2962 FF FF FF FF 
3247   2966 FF FF FF FF 
3247   296A FF FF FF FF 
3247   296E FF FF FF FF 
3247   2972 FF FF FF FF 
3247   2976 FF FF FF FF 
3247   297A FF FF FF FF 
3247   297E FF FF FF FF 
3247   2982 FF FF FF FF 
3247   2986 FF FF FF FF 
3247   298A FF FF FF FF 
3247   298E FF FF FF FF 
3247   2992 FF FF FF FF 
3247   2996 FF FF FF FF 
3247   299A FF FF FF FF 
3247   299E FF FF FF FF 
3247   29A2 FF FF FF FF 
3247   29A6 FF FF FF FF 
3247   29AA FF FF FF FF 
3247   29AE FF FF FF FF 
3247   29B2 FF FF FF FF 
3247   29B6 FF FF FF FF 
3247   29BA FF FF FF FF 
3247   29BE FF FF FF FF 
3247   29C2 FF FF FF FF 
3247   29C6 FF FF FF FF 
3247   29CA FF FF FF FF 
3247   29CE FF FF FF FF 
3247   29D2 FF FF FF FF 
3247   29D6 FF FF FF FF 
3247   29DA FF FF FF FF 
3247   29DE FF FF FF FF 
3247   29E2 FF FF FF FF 
3247   29E6 FF FF FF FF 
3247   29EA FF FF FF FF 
3247   29EE FF FF FF FF 
3247   29F2 FF FF FF FF 
3247   29F6 FF FF FF FF 
3247   29FA FF FF FF FF 
3247   29FE FF FF FF FF 
3247   2A02 FF FF FF FF 
3247   2A06 FF FF FF FF 
3247   2A0A FF FF FF FF 
3247   2A0E FF FF FF FF 
3247   2A12 FF FF FF FF 
3247   2A16 FF FF FF FF 
3247   2A1A FF FF FF FF 
3247   2A1E FF FF FF FF 
3247   2A22 FF FF FF FF 
3247   2A26 FF FF FF FF 
3247   2A2A FF FF FF FF 
3247   2A2E FF FF FF FF 
3247   2A32 FF FF FF FF 
3247   2A36 FF FF FF FF 
3247   2A3A FF FF FF FF 
3247   2A3E FF FF FF FF 
3247   2A42 FF FF FF FF 
3247   2A46 FF FF FF FF 
3247   2A4A FF FF FF FF 
3247   2A4E FF FF FF FF 
3247   2A52 FF FF FF FF 
3247   2A56 FF FF FF FF 
3247   2A5A FF FF FF FF 
3247   2A5E FF FF FF FF 
3247   2A62 FF FF FF FF 
3247   2A66 FF FF FF FF 
3247   2A6A FF FF FF FF 
3247   2A6E FF FF FF FF 
3247   2A72 FF FF FF FF 
3247   2A76 FF FF FF FF 
3247   2A7A FF FF FF FF 
3247   2A7E FF FF FF FF 
3247   2A82 FF FF FF FF 
3247   2A86 FF FF FF FF 
3247   2A8A FF FF FF FF 
3247   2A8E FF FF FF FF 
3247   2A92 FF FF FF FF 
3247   2A96 FF FF FF FF 
3247   2A9A FF FF FF FF 
3247   2A9E FF FF FF FF 
3247   2AA2 FF FF FF FF 
3247   2AA6 FF FF FF FF 
3247   2AAA FF FF FF FF 
3247   2AAE FF FF FF FF 
3247   2AB2 FF FF FF FF 
3247   2AB6 FF FF FF FF 
3247   2ABA FF FF FF FF 
3247   2ABE FF FF FF FF 
3247   2AC2 FF FF FF FF 
3247   2AC6 FF FF FF FF 
3247   2ACA FF FF FF FF 
3247   2ACE FF FF FF FF 
3247   2AD2 FF FF FF FF 
3247   2AD6 FF FF FF FF 
3247   2ADA FF FF FF FF 
3247   2ADE FF FF FF FF 
3247   2AE2 FF FF FF FF 
3247   2AE6 FF FF FF FF 
3247   2AEA FF FF FF FF 
3247   2AEE FF FF FF FF 
3247   2AF2 FF FF FF FF 
3247   2AF6 FF FF FF FF 
3247   2AFA FF FF FF FF 
3247   2AFE FF FF FF FF 
3247   2B02 FF FF FF FF 
3247   2B06 FF FF FF FF 
3247   2B0A FF FF FF FF 
3247   2B0E FF FF FF FF 
3247   2B12 FF FF FF FF 
3247   2B16 FF FF FF FF 
3247   2B1A FF FF FF FF 
3247   2B1E FF FF FF FF 
3247   2B22 FF FF FF FF 
3247   2B26 FF FF FF FF 
3247   2B2A FF FF FF FF 
3247   2B2E FF FF FF FF 
3247   2B32 FF FF FF FF 
3247   2B36 FF FF FF FF 
3247   2B3A FF FF FF FF 
3247   2B3E FF FF FF FF 
3247   2B42 FF FF FF FF 
3247   2B46 FF FF FF FF 
3247   2B4A FF FF FF FF 
3247   2B4E FF FF FF FF 
3247   2B52 FF FF FF FF 
3247   2B56 FF FF FF FF 
3247   2B5A FF FF FF FF 
3247   2B5E FF FF FF FF 
3247   2B62 FF FF FF FF 
3247   2B66 FF FF FF FF 
3247   2B6A FF FF FF FF 
3247   2B6E FF FF FF FF 
3247   2B72 FF FF FF FF 
3247   2B76 FF FF FF FF 
3247   2B7A FF FF FF FF 
3247   2B7E FF FF FF FF 
3247   2B82 FF FF FF FF 
3247   2B86 FF FF FF FF 
3247   2B8A FF FF FF FF 
3247   2B8E FF FF FF FF 
3247   2B92 FF FF FF FF 
3247   2B96 FF FF FF FF 
3247   2B9A FF FF FF FF 
3247   2B9E FF FF FF FF 
3247   2BA2 FF FF FF FF 
3247   2BA6 FF FF FF FF 
3247   2BAA FF FF FF FF 
3247   2BAE FF FF FF FF 
3247   2BB2 FF FF FF FF 
3247   2BB6 FF FF FF FF 
3247   2BBA FF FF FF FF 
3247   2BBE FF FF FF FF 
3247   2BC2 FF FF FF FF 
3247   2BC6 FF FF FF FF 
3247   2BCA FF FF FF FF 
3247   2BCE FF FF FF FF 
3247   2BD2 FF FF FF FF 
3247   2BD6 FF FF FF FF 
3247   2BDA FF FF FF FF 
3247   2BDE FF FF FF FF 
3247   2BE2 FF FF FF FF 
3247   2BE6 FF FF FF FF 
3247   2BEA FF FF FF FF 
3247   2BEE FF FF FF FF 
3247   2BF2 FF FF FF FF 
3247   2BF6 FF FF FF FF 
3247   2BFA FF FF FF FF 
3247   2BFE FF FF FF FF 
3247   2C02 FF FF FF FF 
3247   2C06 FF FF FF FF 
3247   2C0A FF FF FF FF 
3247   2C0E FF FF FF FF 
3247   2C12 FF FF FF FF 
3247   2C16 FF FF FF FF 
3247   2C1A FF FF FF FF 
3247   2C1E FF FF FF FF 
3247   2C22 FF FF FF FF 
3247   2C26 FF FF FF FF 
3247   2C2A FF FF FF FF 
3247   2C2E FF FF FF FF 
3247   2C32 FF FF FF FF 
3247   2C36 FF FF FF FF 
3247   2C3A FF FF FF FF 
3247   2C3E FF FF FF FF 
3247   2C42 FF FF FF FF 
3247   2C46 FF FF FF FF 
3247   2C4A FF FF FF FF 
3247   2C4E FF FF FF FF 
3247   2C52 FF FF FF FF 
3247   2C56 FF FF FF FF 
3247   2C5A FF FF FF FF 
3247   2C5E FF FF FF FF 
3247   2C62 FF FF FF FF 
3247   2C66 FF FF FF FF 
3247   2C6A FF FF FF FF 
3247   2C6E FF FF FF FF 
3247   2C72 FF FF FF FF 
3247   2C76 FF FF FF FF 
3247   2C7A FF FF FF FF 
3247   2C7E FF FF FF FF 
3247   2C82 FF FF FF FF 
3247   2C86 FF FF FF FF 
3247   2C8A FF FF FF FF 
3247   2C8E FF FF FF FF 
3247   2C92 FF FF FF FF 
3247   2C96 FF FF FF FF 
3247   2C9A FF FF FF FF 
3247   2C9E FF FF FF FF 
3247   2CA2 FF FF FF FF 
3247   2CA6 FF FF FF FF 
3247   2CAA FF FF FF FF 
3247   2CAE FF FF FF FF 
3247   2CB2 FF FF FF FF 
3247   2CB6 FF FF FF FF 
3247   2CBA FF FF FF FF 
3247   2CBE FF FF FF FF 
3247   2CC2 FF FF FF FF 
3247   2CC6 FF FF FF FF 
3247   2CCA FF FF FF FF 
3247   2CCE FF FF FF FF 
3247   2CD2 FF FF FF FF 
3247   2CD6 FF FF FF FF 
3247   2CDA FF FF FF FF 
3247   2CDE FF FF FF FF 
3247   2CE2 FF FF FF FF 
3247   2CE6 FF FF FF FF 
3247   2CEA FF FF FF FF 
3247   2CEE FF FF FF FF 
3247   2CF2 FF FF FF FF 
3247   2CF6 FF FF FF FF 
3247   2CFA FF FF FF FF 
3247   2CFE FF FF FF FF 
3247   2D02 FF FF FF FF 
3247   2D06 FF FF FF FF 
3247   2D0A FF FF FF FF 
3247   2D0E FF FF FF FF 
3247   2D12 FF FF FF FF 
3247   2D16 FF FF FF FF 
3247   2D1A FF FF FF FF 
3247   2D1E FF FF FF FF 
3247   2D22 FF FF FF FF 
3247   2D26 FF FF FF FF 
3247   2D2A FF FF FF FF 
3247   2D2E FF FF FF FF 
3247   2D32 FF FF FF FF 
3247   2D36 FF FF FF FF 
3247   2D3A FF FF FF FF 
3247   2D3E FF FF FF FF 
3247   2D42 FF FF FF FF 
3247   2D46 FF FF FF FF 
3247   2D4A FF FF FF FF 
3247   2D4E FF FF FF FF 
3247   2D52 FF FF FF FF 
3247   2D56 FF FF FF FF 
3247   2D5A FF FF FF FF 
3247   2D5E FF FF FF FF 
3247   2D62 FF FF FF FF 
3247   2D66 FF FF FF FF 
3247   2D6A FF FF FF FF 
3247   2D6E FF FF FF FF 
3247   2D72 FF FF FF FF 
3247   2D76 FF FF FF FF 
3247   2D7A FF FF FF FF 
3247   2D7E FF FF FF FF 
3247   2D82 FF FF FF FF 
3247   2D86 FF FF FF FF 
3247   2D8A FF FF FF FF 
3247   2D8E FF FF FF FF 
3247   2D92 FF FF FF FF 
3247   2D96 FF FF FF FF 
3247   2D9A FF FF FF FF 
3247   2D9E FF FF FF FF 
3247   2DA2 FF FF FF FF 
3247   2DA6 FF FF FF FF 
3247   2DAA FF FF FF FF 
3247   2DAE FF FF FF FF 
3247   2DB2 FF FF FF FF 
3247   2DB6 FF FF FF FF 
3247   2DBA FF FF FF FF 
3247   2DBE FF FF FF FF 
3247   2DC2 FF FF FF FF 
3247   2DC6 FF FF FF FF 
3247   2DCA FF FF FF FF 
3247   2DCE FF FF FF FF 
3247   2DD2 FF FF FF FF 
3247   2DD6 FF FF FF FF 
3247   2DDA FF FF FF FF 
3247   2DDE FF FF FF FF 
3247   2DE2 FF FF FF FF 
3247   2DE6 FF FF FF FF 
3247   2DEA FF FF FF FF 
3247   2DEE FF FF FF FF 
3247   2DF2 FF FF FF FF 
3247   2DF6 FF FF FF FF 
3247   2DFA FF FF FF FF 
3247   2DFE FF FF FF FF 
3247   2E02 FF FF FF FF 
3247   2E06 FF FF FF FF 
3247   2E0A FF FF FF FF 
3247   2E0E FF FF FF FF 
3247   2E12 FF FF FF FF 
3247   2E16 FF FF FF FF 
3247   2E1A FF FF FF FF 
3247   2E1E FF FF FF FF 
3247   2E22 FF FF FF FF 
3247   2E26 FF FF FF FF 
3247   2E2A FF FF FF FF 
3247   2E2E FF FF FF FF 
3247   2E32 FF FF FF FF 
3247   2E36 FF FF FF FF 
3247   2E3A FF FF FF FF 
3247   2E3E FF FF FF FF 
3247   2E42 FF FF FF FF 
3247   2E46 FF FF FF FF 
3247   2E4A FF FF FF FF 
3247   2E4E FF FF FF FF 
3247   2E52 FF FF FF FF 
3247   2E56 FF FF FF FF 
3247   2E5A FF FF FF FF 
3247   2E5E FF FF FF FF 
3247   2E62 FF FF FF FF 
3247   2E66 FF FF FF FF 
3247   2E6A FF FF FF FF 
3247   2E6E FF FF FF FF 
3247   2E72 FF FF FF FF 
3247   2E76 FF FF FF FF 
3247   2E7A FF FF FF FF 
3247   2E7E FF FF FF FF 
3247   2E82 FF FF FF FF 
3247   2E86 FF FF FF FF 
3247   2E8A FF FF FF FF 
3247   2E8E FF FF FF FF 
3247   2E92 FF FF FF FF 
3247   2E96 FF FF FF FF 
3247   2E9A FF FF FF FF 
3247   2E9E FF FF FF FF 
3247   2EA2 FF FF FF FF 
3247   2EA6 FF FF FF FF 
3247   2EAA FF FF FF FF 
3247   2EAE FF FF FF FF 
3247   2EB2 FF FF FF FF 
3247   2EB6 FF FF FF FF 
3247   2EBA FF FF FF FF 
3247   2EBE FF FF FF FF 
3247   2EC2 FF FF FF FF 
3247   2EC6 FF FF FF FF 
3247   2ECA FF FF FF FF 
3247   2ECE FF FF FF FF 
3247   2ED2 FF FF FF FF 
3247   2ED6 FF FF FF FF 
3247   2EDA FF FF FF FF 
3247   2EDE FF FF FF FF 
3247   2EE2 FF FF FF FF 
3247   2EE6 FF FF FF FF 
3247   2EEA FF FF FF FF 
3247   2EEE FF FF FF FF 
3247   2EF2 FF FF FF FF 
3247   2EF6 FF FF FF FF 
3247   2EFA FF FF FF FF 
3247   2EFE FF FF FF FF 
3247   2F02 FF FF FF FF 
3247   2F06 FF FF FF FF 
3247   2F0A FF FF FF FF 
3247   2F0E FF FF FF FF 
3247   2F12 FF FF FF FF 
3247   2F16 FF FF FF FF 
3247   2F1A FF FF FF FF 
3247   2F1E FF FF FF FF 
3247   2F22 FF FF FF FF 
3247   2F26 FF FF FF FF 
3247   2F2A FF FF FF FF 
3247   2F2E FF FF FF FF 
3247   2F32 FF FF FF FF 
3247   2F36 FF FF FF FF 
3247   2F3A FF FF FF FF 
3247   2F3E FF FF FF FF 
3247   2F42 FF FF FF FF 
3247   2F46 FF FF FF FF 
3247   2F4A FF FF FF FF 
3247   2F4E FF FF FF FF 
3247   2F52 FF FF FF FF 
3247   2F56 FF FF FF FF 
3247   2F5A FF FF FF FF 
3247   2F5E FF FF FF FF 
3247   2F62 FF FF FF FF 
3247   2F66 FF FF FF FF 
3247   2F6A FF FF FF FF 
3247   2F6E FF FF FF FF 
3247   2F72 FF FF FF FF 
3247   2F76 FF FF FF FF 
3247   2F7A FF FF FF FF 
3247   2F7E FF FF FF FF 
3247   2F82 FF FF FF FF 
3247   2F86 FF FF FF FF 
3247   2F8A FF FF FF FF 
3247   2F8E FF FF FF FF 
3247   2F92 FF FF FF FF 
3247   2F96 FF FF FF FF 
3247   2F9A FF FF FF FF 
3247   2F9E FF FF FF FF 
3247   2FA2 FF FF FF FF 
3247   2FA6 FF FF FF FF 
3247   2FAA FF FF FF FF 
3247   2FAE FF FF FF FF 
3247   2FB2 FF FF FF FF 
3247   2FB6 FF FF FF FF 
3247   2FBA FF FF FF FF 
3247   2FBE FF FF FF FF 
3247   2FC2 FF FF FF FF 
3247   2FC6 FF FF FF FF 
3247   2FCA FF FF FF FF 
3247   2FCE FF FF FF FF 
3247   2FD2 FF FF FF FF 
3247   2FD6 FF FF FF FF 
3247   2FDA FF FF FF FF 
3247   2FDE FF FF FF FF 
3247   2FE2 FF FF FF FF 
3247   2FE6 FF FF FF FF 
3247   2FEA FF FF FF FF 
3247   2FEE FF FF FF FF 
3247   2FF2 FF FF FF FF 
3247   2FF6 FF FF FF FF 
3247   2FFA FF FF FF FF 
3247   2FFE FF FF FF FF 
3247   3002 FF FF FF FF 
3247   3006 FF FF FF FF 
3247   300A FF FF FF FF 
3247   300E FF FF FF FF 
3247   3012 FF FF FF FF 
3247   3016 FF FF FF FF 
3247   301A FF FF FF FF 
3247   301E FF FF FF FF 
3247   3022 FF FF FF FF 
3247   3026 FF FF FF FF 
3247   302A FF FF FF FF 
3247   302E FF FF FF FF 
3247   3032 FF FF FF FF 
3247   3036 FF FF FF FF 
3247   303A FF FF FF FF 
3247   303E FF FF FF FF 
3247   3042 FF FF FF FF 
3247   3046 FF FF FF FF 
3247   304A FF FF FF FF 
3247   304E FF FF FF FF 
3247   3052 FF FF FF FF 
3247   3056 FF FF FF FF 
3247   305A FF FF FF FF 
3247   305E FF FF FF FF 
3247   3062 FF FF FF FF 
3247   3066 FF FF FF FF 
3247   306A FF FF FF FF 
3247   306E FF FF FF FF 
3247   3072 FF FF FF FF 
3247   3076 FF FF FF FF 
3247   307A FF FF FF FF 
3247   307E FF FF FF FF 
3247   3082 FF FF FF FF 
3247   3086 FF FF FF FF 
3247   308A FF FF FF FF 
3247   308E FF FF FF FF 
3247   3092 FF FF FF FF 
3247   3096 FF FF FF FF 
3247   309A FF FF FF FF 
3247   309E FF FF FF FF 
3247   30A2 FF FF FF FF 
3247   30A6 FF FF FF FF 
3247   30AA FF FF FF FF 
3247   30AE FF FF FF FF 
3247   30B2 FF FF FF FF 
3247   30B6 FF FF FF FF 
3247   30BA FF FF FF FF 
3247   30BE FF FF FF FF 
3247   30C2 FF FF FF FF 
3247   30C6 FF FF FF FF 
3247   30CA FF FF FF FF 
3247   30CE FF FF FF FF 
3247   30D2 FF FF FF FF 
3247   30D6 FF FF FF FF 
3247   30DA FF FF FF FF 
3247   30DE FF FF FF FF 
3247   30E2 FF FF FF FF 
3247   30E6 FF FF FF FF 
3247   30EA FF FF FF FF 
3247   30EE FF FF FF FF 
3247   30F2 FF FF FF FF 
3247   30F6 FF FF FF FF 
3247   30FA FF FF FF FF 
3247   30FE FF FF FF FF 
3247   3102 FF FF FF FF 
3247   3106 FF FF FF FF 
3247   310A FF FF FF FF 
3247   310E FF FF FF FF 
3247   3112 FF FF FF FF 
3247   3116 FF FF FF FF 
3247   311A FF FF FF FF 
3247   311E FF FF FF FF 
3247   3122 FF FF FF FF 
3247   3126 FF FF FF FF 
3247   312A FF FF FF FF 
3247   312E FF FF FF FF 
3247   3132 FF FF FF FF 
3247   3136 FF FF FF FF 
3247   313A FF FF FF FF 
3247   313E FF FF FF FF 
3247   3142 FF FF FF FF 
3247   3146 FF FF FF FF 
3247   314A FF FF FF FF 
3247   314E FF FF FF FF 
3247   3152 FF FF FF FF 
3247   3156 FF FF FF FF 
3247   315A FF FF FF FF 
3247   315E FF FF FF FF 
3247   3162 FF FF FF FF 
3247   3166 FF FF FF FF 
3247   316A FF FF FF FF 
3247   316E FF FF FF FF 
3247   3172 FF FF FF FF 
3247   3176 FF FF FF FF 
3247   317A FF FF FF FF 
3247   317E FF FF FF FF 
3247   3182 FF FF FF FF 
3247   3186 FF FF FF FF 
3247   318A FF FF FF FF 
3247   318E FF FF FF FF 
3247   3192 FF FF FF FF 
3247   3196 FF FF FF FF 
3247   319A FF FF FF FF 
3247   319E FF FF FF FF 
3248   31A2             
3249   31A2             scrap_sector:
3250   31A2 FF FF FF FF   .fill 512         ; scrap sector
3250   31A6 FF FF FF FF 
3250   31AA FF FF FF FF 
3250   31AE FF FF FF FF 
3250   31B2 FF FF FF FF 
3250   31B6 FF FF FF FF 
3250   31BA FF FF FF FF 
3250   31BE FF FF FF FF 
3250   31C2 FF FF FF FF 
3250   31C6 FF FF FF FF 
3250   31CA FF FF FF FF 
3250   31CE FF FF FF FF 
3250   31D2 FF FF FF FF 
3250   31D6 FF FF FF FF 
3250   31DA FF FF FF FF 
3250   31DE FF FF FF FF 
3250   31E2 FF FF FF FF 
3250   31E6 FF FF FF FF 
3250   31EA FF FF FF FF 
3250   31EE FF FF FF FF 
3250   31F2 FF FF FF FF 
3250   31F6 FF FF FF FF 
3250   31FA FF FF FF FF 
3250   31FE FF FF FF FF 
3250   3202 FF FF FF FF 
3250   3206 FF FF FF FF 
3250   320A FF FF FF FF 
3250   320E FF FF FF FF 
3250   3212 FF FF FF FF 
3250   3216 FF FF FF FF 
3250   321A FF FF FF FF 
3250   321E FF FF FF FF 
3250   3222 FF FF FF FF 
3250   3226 FF FF FF FF 
3250   322A FF FF FF FF 
3250   322E FF FF FF FF 
3250   3232 FF FF FF FF 
3250   3236 FF FF FF FF 
3250   323A FF FF FF FF 
3250   323E FF FF FF FF 
3250   3242 FF FF FF FF 
3250   3246 FF FF FF FF 
3250   324A FF FF FF FF 
3250   324E FF FF FF FF 
3250   3252 FF FF FF FF 
3250   3256 FF FF FF FF 
3250   325A FF FF FF FF 
3250   325E FF FF FF FF 
3250   3262 FF FF FF FF 
3250   3266 FF FF FF FF 
3250   326A FF FF FF FF 
3250   326E FF FF FF FF 
3250   3272 FF FF FF FF 
3250   3276 FF FF FF FF 
3250   327A FF FF FF FF 
3250   327E FF FF FF FF 
3250   3282 FF FF FF FF 
3250   3286 FF FF FF FF 
3250   328A FF FF FF FF 
3250   328E FF FF FF FF 
3250   3292 FF FF FF FF 
3250   3296 FF FF FF FF 
3250   329A FF FF FF FF 
3250   329E FF FF FF FF 
3250   32A2 FF FF FF FF 
3250   32A6 FF FF FF FF 
3250   32AA FF FF FF FF 
3250   32AE FF FF FF FF 
3250   32B2 FF FF FF FF 
3250   32B6 FF FF FF FF 
3250   32BA FF FF FF FF 
3250   32BE FF FF FF FF 
3250   32C2 FF FF FF FF 
3250   32C6 FF FF FF FF 
3250   32CA FF FF FF FF 
3250   32CE FF FF FF FF 
3250   32D2 FF FF FF FF 
3250   32D6 FF FF FF FF 
3250   32DA FF FF FF FF 
3250   32DE FF FF FF FF 
3250   32E2 FF FF FF FF 
3250   32E6 FF FF FF FF 
3250   32EA FF FF FF FF 
3250   32EE FF FF FF FF 
3250   32F2 FF FF FF FF 
3250   32F6 FF FF FF FF 
3250   32FA FF FF FF FF 
3250   32FE FF FF FF FF 
3250   3302 FF FF FF FF 
3250   3306 FF FF FF FF 
3250   330A FF FF FF FF 
3250   330E FF FF FF FF 
3250   3312 FF FF FF FF 
3250   3316 FF FF FF FF 
3250   331A FF FF FF FF 
3250   331E FF FF FF FF 
3250   3322 FF FF FF FF 
3250   3326 FF FF FF FF 
3250   332A FF FF FF FF 
3250   332E FF FF FF FF 
3250   3332 FF FF FF FF 
3250   3336 FF FF FF FF 
3250   333A FF FF FF FF 
3250   333E FF FF FF FF 
3250   3342 FF FF FF FF 
3250   3346 FF FF FF FF 
3250   334A FF FF FF FF 
3250   334E FF FF FF FF 
3250   3352 FF FF FF FF 
3250   3356 FF FF FF FF 
3250   335A FF FF FF FF 
3250   335E FF FF FF FF 
3250   3362 FF FF FF FF 
3250   3366 FF FF FF FF 
3250   336A FF FF FF FF 
3250   336E FF FF FF FF 
3250   3372 FF FF FF FF 
3250   3376 FF FF FF FF 
3250   337A FF FF FF FF 
3250   337E FF FF FF FF 
3250   3382 FF FF FF FF 
3250   3386 FF FF FF FF 
3250   338A FF FF FF FF 
3250   338E FF FF FF FF 
3250   3392 FF FF FF FF 
3250   3396 FF FF FF FF 
3250   339A FF FF FF FF 
3250   339E FF FF FF FF 
3251   33A2             transient_area:
3252   33A2 00            .db 0             ; beginning of the transient memory area. used for disk reads and other purposes    
3253   33A3             
3254   33A3             .end
tasm: Number of errors = 0
