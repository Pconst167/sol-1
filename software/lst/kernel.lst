0001   0000             ; ------------------------------------------------------------------------------------------------------------------;
0002   0000             ; Solarium - Sol-1 Homebrew Minicomputer Operating System Kernel.
0003   0000             ; ------------------------------------------------------------------------------------------------------------------;
0004   0000             
0005   0000             ; memory map
0006   0000             ; ------------------------------------------------------------------------------------------------------------------;
0007   0000             ; 0000 ... 7fff - rom space
0008   0000             ; 8000 ... f7ff - ram space
0009   0000             ; f7ff          - stack root
0010   0000             
0011   0000             ; i/o map
0012   0000             ; ------------------------------------------------------------------------------------------------------------------;
0013   0000             ; ff80 - uart 0 (16550)
0014   0000             ; ff90 - uart 1 (16550)
0015   0000             ; ffa0 - rtc    (m48t02)
0016   0000             ; ffb0 - pio 0  (8255)
0017   0000             ; ffc0 - fdd    (5.25" floppy drive block)
0018   0000             ;   - ffc0      output port (377 flip-flop)                  
0019   0000             ;   - ffc1      input port  (244 buffer)                     
0020   0000             ;   - ffc8      wd1770 status/command    
0021   0000             ;   - ffc9      wd1770 track register
0022   0000             ;   - ffca      wd1770 sector register
0023   0000             ;   - ffcb      wd1770 data register
0024   0000             ;      
0025   0000             ; ffd0 - ide    (compact flash / pata)
0026   0000             ; ffe0 - timer  (8253)
0027   0000             ; fff0 - bios configuration nv-ram store area
0028   0000             ; ------------------------------------------------------------------------------------------------------------------;
0029   0000             
0030   0000             ; ------------------------------------------------------------------------------------------------------------------;
0031   0000             ; system constants
0032   0000             ; ------------------------------------------------------------------------------------------------------------------;
0033   0000             _uart0_data       .equ $ff80         ; data
0034   0000             _uart0_dlab_0     .equ $ff80         ; divisor latch low byte
0035   0000             _uart0_dlab_1     .equ $ff81         ; divisor latch high byte
0036   0000             _uart0_ier        .equ $ff81         ; interrupt enable register
0037   0000             _uart0_fcr        .equ $ff82         ; fifo control register
0038   0000             _uart0_lcr        .equ $ff83         ; line control register
0039   0000             _uart0_lsr        .equ $ff85         ; line status register
0040   0000             
0041   0000             _uart1_data       .equ $ff90         ; data
0042   0000             _uart1_dlab_0     .equ $ff90         ; divisor latch low byte
0043   0000             _uart1_dlab_1     .equ $ff91         ; divisor latch high byte
0044   0000             _uart1_ier        .equ $ff91         ; interrupt enable register
0045   0000             _uart1_fcr        .equ $ff92         ; fifo control register
0046   0000             _uart1_lcr        .equ $ff93         ; line control register
0047   0000             _uart1_lsr        .equ $ff95         ; line status register
0048   0000             
0049   0000             _ide_base         .equ $ffd0         ; ide base
0050   0000             _ide_r0           .equ _ide_base + 0 ; data port
0051   0000             _ide_r1           .equ _ide_base + 1 ; read: error code, write: feature
0052   0000             _ide_r2           .equ _ide_base + 2 ; number of sectors to transfer
0053   0000             _ide_r3           .equ _ide_base + 3 ; sector address lba 0 [0:7]
0054   0000             _ide_r4           .equ _ide_base + 4 ; sector address lba 1 [8:15]
0055   0000             _ide_r5           .equ _ide_base + 5 ; sector address lba 2 [16:23]
0056   0000             _ide_r6           .equ _ide_base + 6 ; sector address lba 3 [24:27 (lsb)]
0057   0000             _ide_r7           .equ _ide_base + 7 ; read: status, write: command       
0058   0000             
0059   0000             _7seg_display     .equ $ffb0         ; bios post code hex display (2 digits) (connected to pio a)
0060   0000             _bios_post_ctrl   .equ $ffb3         ; bios post display control register, 80h = as output
0061   0000             _pio_a            .equ $ffb0    
0062   0000             _pio_b            .equ $ffb1
0063   0000             _pio_c            .equ $ffb2
0064   0000             _pio_control      .equ $ffb3         ; pio control port
0065   0000             
0066   0000             _fdc_config       .equ $ffc0         ; 0 = select_0, 1 = select_1, 2 = side_select, 3 = dden, 4 = in_use_or_head_load, 5 = wd1770_rst
0067   0000             _fdc_status_0     .equ $ffc1         ; 0 = drq, 1 = ready
0068   0000             _fdc_stat_cmd     .equ $ffc8         ; status / command register
0069   0000             _fdc_track        .equ $ffc9         ; track register
0070   0000             _fdc_sector       .equ $ffca         ; sector register
0071   0000             _fdc_data         .equ $ffcb         ; data register
0072   0000             
0073   0000             _timer_c_0        .equ $ffe0         ; timer counter 0
0074   0000             _timer_c_1        .equ $ffe1         ; timer counter 1
0075   0000             _timer_c_2        .equ $ffe2         ; timer counter 2
0076   0000             _timer_ctrl       .equ $ffe3         ; timer control register
0077   0000             
0078   0000             _stack_begin      .equ $f7ff         ; beginning of stack
0079   0000             _fifo_size        .equ 4096
0080   0000             
0081   0000             _mbr              .equ 446
0082   0000             _superblock       .equ 512
0083   0000             
0084   0000             text_org          .equ $400          ; code origin address for all user processes
0085   0000             
0086   0000             
0087   0000             ; ------------------------------------------------------------------------------------------------------------------;
0088   0000             ; DISK LAYOUT:
0089   0000             ; | Metadata               | Size (bytes)    | Blocks (2048 bytes)              |
0090   0000             ; | ---------------------- | --------------- | -------------------------------- |
0091   0000             ; | Bootloader/MBR         | 512 bytes       | 0.25 (1 sector)                  |
0092   0000             ; | Superblock             | 1024 bytes      | 1 block (2048 bytes, must align) |
0093   0000             ; | Block Group Descriptor | \~32 bytes      | 1 block (2048 bytes)             |
0094   0000             ; | Block Bitmap           | 16,384 bytes    | 8 blocks                         |
0095   0000             ; | Inode Bitmap           | 2,048 bytes     | 1 block                          |
0096   0000             ; | Inode Table            | 2,097,152 bytes | 1024 blocks                      |
0097   0000             ; 
0098   0000             ; first 512 bytes: bootloader from 0 to 445, MBR partition table from 446 to 511 (64 bytes)
0099   0000             ; up to 4 partitions, each 16 bytes long
0100   0000             ; MBR:
0101   0000             ; Byte | Description
0102   0000             ; -----|----------------------------
0103   0000             ; 0    | Boot flag (0x80 active, 0x00 inactive)
0104   0000             ; 1-3  | Start CHS (head, sector, cylinder)
0105   0000             ; 4    | Partition type (filesystem ID)
0106   0000             ;   0x83 = Linux native (ext2/3/4)
0107   0000             ;   0x07 = NTFS/exFAT
0108   0000             ;   0x0B = FAT32 CHS
0109   0000             ;   0x0C = FAT32 LBA
0110   0000             ;   0x05 = Extended partition
0111   0000             ; 5-7  | End CHS
0112   0000             ; 8-11 | Start LBA (little endian)
0113   0000             ; 12-15| Size in sectors (little endian)
0114   0000             ; 
0115   0000             ; 
0116   0000             ; SUPERBLOCK:
0117   0000             ; | Field                 | Description                              | Typical Size (bytes) | Notes                           |
0118   0000             ; | --------------------- | ---------------------------------------- | -------------------- | ------------------------------- |
0119   0000             ; | `s_inodes_count`      | Total number of inodes in the filesystem | 4                    | 32-bit unsigned int             |
0120   0000             ; | `s_blocks_count`      | Total number of data blocks              | 4                    | 32-bit unsigned int             |
0121   0000             ; | `s_free_inodes_count` | Number of free inodes                    | 4                    | 32-bit unsigned int             |
0122   0000             ; | `s_free_blocks_count` | Number of free blocks                    | 4                    | 32-bit unsigned int             |
0123   0000             ; | `s_first_data_block`  | Block number of the first data block     | 4                    | 32-bit unsigned int             |
0124   0000             ; | `s_log_block_size`    | Block size = 1024 << `s_log_block_size`  | 4                    | 32-bit unsigned int             |
0125   0000             ; | `s_inode_size`        | Size of each inode (in bytes)            | 2                    | 16-bit unsigned int             |
0126   0000             ; | `s_magic`             | Filesystem signature (`0xEF53`)          | 2                    | 16-bit unsigned int             |
0127   0000             ; | `s_mtime`             | Last mount time                          | 4                    | 32-bit unsigned int (Unix time) |
0128   0000             ; | `s_wtime`             | Last write time                          | 4                    | 32-bit unsigned int (Unix time) |
0129   0000             ; | `s_uuid`              | Unique ID of the filesystem              | 16                   | 128-bit UUID                    |
0130   0000             ; | `s_volume_name`       | Label of the filesystem                  | 16                   | Usually ASCII, padded           |
0131   0000             ; | `s_feature_flags`     | Compatibility flags                      | 4                    | 32-bit unsigned int             |
0132   0000             ; 
0133   0000             ; 
0134   0000             ; inode for root dir is #2, #0 and #1 not used
0135   0000             ; block size: 2048
0136   0000             
0137   0000             ; inode-table format:
0138   0000             ; | Field         | Size (bytes) | Description                                                                                  |
0139   0000             ; | ------------- | ------------ | -------------------------------------------------------------------------------------------- |
0140   0000             ; | `mode`        | 2            | File type and permissions                                                                    |
0141   0000             ; | `uid`         | 2            | Owner user ID                                                                                |
0142   0000             ; | `size`        | 4            | Size of the file in bytes                                                                    |
0143   0000             ; | `atime`       | 4            | Last access time (timestamp)                                                                 |
0144   0000             ; | `ctime`       | 4            | Creation time (timestamp)                                                                    |
0145   0000             ; | `mtime`       | 4            | Last modification time (timestamp)                                                           |
0146   0000             ; | `dtime`       | 4            | Deletion time (timestamp)                                                                    |
0147   0000             ; | `gid`         | 2            | Group ID                                                                                     |
0148   0000             ; | `links_count` | 2            | Number of hard links                                                                         |
0149   0000             ; | `blocks`      | 4            | Number of 512-byte blocks allocated                                                          |
0150   0000             ; | `flags`       | 4            | File flags                                                                                   |
0151   0000             ; | `block`       | 15 x 4 = 60  | Pointers to data blocks (12 direct, 1 single indirect, 1 double indirect, 1 triple indirect) |
0152   0000             
0153   0000             
0154   0000             ; file entry attributes
0155   0000             ; filename (24)
0156   0000             ; attributes (1)       :|0|0|file_type(3bits)|x|w|r|
0157   0000             ; lba (2)              : location of raw data for file entry, or dirid for directory entry
0158   0000             ; size (2)             : filesize
0159   0000             ; day (1)           
0160   0000             ; month (1)
0161   0000             ; year (1)
0162   0000             ; packet size = 32 bytes  : total packet size in bytes
0163   0000             
0164   0000             fst_entry_size      .equ 32  ; bytes
0165   0000             fst_files_per_sect  .equ (512 / fst_entry_size)
0166   0000             fst_files_per_dir   .equ (512 / fst_entry_size)
0167   0000             fst_nbr_directories .equ 64
0168   0000                                 ; 1 sector for header, the rest is for the list of files/dirs
0169   0000             fst_sectors_per_dir .equ (1 + (fst_entry_size * fst_files_per_dir / 512))    
0170   0000             fst_total_sectors   .equ (fst_sectors_per_dir * fst_nbr_directories)
0171   0000             fst_lba_start       .equ 32
0172   0000             fst_lba_end         .equ (fst_lba_start + fst_total_sectors - 1)
0173   0000             
0174   0000             fs_nbr_files        .equ (fst_nbr_directories * fst_files_per_dir)
0175   0000             fs_sectors_per_file .equ 32 ; the first sector is always a header with a null parameter (first byte)
0176   0000                                         ; so that we know which blocks are free or taken
0177   0000             fs_file_size        .equ (fs_sectors_per_file * 512)                  
0178   0000             fs_total_sectors    .equ (fs_nbr_files * fs_sectors_per_file)
0179   0000             fs_lba_start        .equ (fst_lba_end + 1)
0180   0000             fs_lba_end          .equ (fs_lba_start + fs_total_sectors - 1)
0181   0000             
0182   0000             root_id:            .equ fst_lba_start
0183   0000             
0184   0000             ; ------------------------------------------------------------------------------------------------------------------;
0185   0000             ; global system variables
0186   0000             ; ------------------------------------------------------------------------------------------------------------------;
0187   0000             
0188   0000             ; ------------------------------------------------------------------------------------------------------------------;
0189   0000             ; irq table
0190   0000             ; highest priority at lowest address
0191   0000             ; ------------------------------------------------------------------------------------------------------------------;
0192   0000 3C 00       .dw int_0_fdc
0193   0002 3D 00       .dw int_1
0194   0004 3E 00       .dw int_2
0195   0006 3F 00       .dw int_3
0196   0008 40 00       .dw int_4
0197   000A 41 00       .dw int_5
0198   000C 42 00       .dw int_6
0199   000E 43 00       .dw int_7_uart0
0200   0010             
0201   0010             ; ------------------------------------------------------------------------------------------------------------------;
0202   0010             ; kernel reset vector
0203   0010             ; ------------------------------------------------------------------------------------------------------------------;
0204   0010 A3 11       .dw kernel_reset_vector
0205   0012             
0206   0012             ; ------------------------------------------------------------------------------------------------------------------;
0207   0012             ; exception vector table
0208   0012             ; total of 7 entries, starting at address $0012
0209   0012             ; ------------------------------------------------------------------------------------------------------------------;
0210   0012 58 04       .dw trap_privilege
0211   0014 75 05       .dw trap_div_zero
0212   0016 82 05       .dw trap_undef_opcode
0213   0018 00 00       .dw 0
0214   001A 00 00       .dw 0
0215   001C 00 00       .dw 0
0216   001E 00 00       .dw 0
0217   0020             
0218   0020             ; ------------------------------------------------------------------------------------------------------------------;
0219   0020             ; system call vector table
0220   0020             ; starts at address $0020
0221   0020             ; ------------------------------------------------------------------------------------------------------------------;
0222   0020 64 04       .dw syscall_break
0223   0022 83 05       .dw syscall_rtc
0224   0024 A6 06       .dw syscall_ide
0225   0026 66 07       .dw syscall_io
0226   0028 23 08       .dw syscall_file_system
0227   002A F0 10       .dw syscall_create_proc
0228   002C 1D 04       .dw syscall_list_procs
0229   002E B5 05       .dw syscall_datetime
0230   0030 D9 03       .dw syscall_reboot
0231   0032 BA 10       .dw syscall_pause_proc
0232   0034 E5 03       .dw syscall_resume_proc
0233   0036 77 10       .dw syscall_terminate_proc
0234   0038 A5 03       .dw syscall_system
0235   003A E4 00       .dw syscall_fdc
0236   003C             
0237   003C             ; ------------------------------------------------------------------------------------------------------------------;
0238   003C             ; system call aliases
0239   003C             ; ------------------------------------------------------------------------------------------------------------------;
0240   003C             sys_break            .equ 0
0241   003C             sys_rtc              .equ 1
0242   003C             sys_ide              .equ 2
0243   003C             sys_io               .equ 3
0244   003C             sys_filesystem       .equ 4
0245   003C             sys_create_proc      .equ 5
0246   003C             sys_list_proc        .equ 6
0247   003C             sys_datetime         .equ 7
0248   003C             sys_reboot           .equ 8
0249   003C             sys_pause_proc       .equ 9
0250   003C             sys_resume_proc      .equ 10
0251   003C             sys_terminate_proc   .equ 11
0252   003C             sys_system           .equ 12
0253   003C             sys_fdc              .equ 13
0254   003C             
0255   003C             ; aliases for individual 'al' options for FDC system calls
0256   003C             fdc_al_restore      .equ 0
0257   003C             fdc_al_step         .equ 1
0258   003C             fdc_al_step_in      .equ 2
0259   003C             fdc_al_step_out     .equ 3
0260   003C             fdc_al_seek         .equ 4
0261   003C             fdc_al_format_128   .equ 5
0262   003C             fdc_al_formatdisk_128   .equ 6
0263   003C             fdc_al_format_512   .equ 7
0264   003C             fdc_al_formatdisk_512   .equ 8
0265   003C             fdc_al_read_addr    .equ 9
0266   003C             fdc_al_read_track   .equ 10
0267   003C             fdc_al_read_sect    .equ 11
0268   003C             fdc_al_write_sect   .equ 12
0269   003C             fdc_al_force_int    .equ 13
0270   003C             fdc_al_status0      .equ 14
0271   003C             fdc_al_status1      .equ 15
0272   003C             
0273   003C             ; ------------------------------------------------------------------------------------------------------------------;
0274   003C             ; alias exports
0275   003C             ; ------------------------------------------------------------------------------------------------------------------;
0276   003C             .export text_org
0277   003C             .export sys_break
0278   003C             .export sys_rtc
0279   003C             .export sys_ide
0280   003C             .export sys_io
0281   003C             .export sys_filesystem
0282   003C             .export sys_create_proc
0283   003C             .export sys_list_proc
0284   003C             .export sys_datetime
0285   003C             .export sys_reboot
0286   003C             .export sys_pause_proc
0287   003C             .export sys_resume_proc
0288   003C             .export sys_terminate_proc
0289   003C             .export sys_system
0290   003C             .export sys_fdc
0291   003C             
0292   003C             .export _7seg_display
0293   003C             
0294   003C             .export _fdc_config        
0295   003C             .export _fdc_status_0      
0296   003C             .export _fdc_stat_cmd     
0297   003C             
0298   003C             ; exports of aliases for individual 'al' options for FDC system calls
0299   003C             .export fdc_al_restore
0300   003C             .export fdc_al_step
0301   003C             .export fdc_al_step_in
0302   003C             .export fdc_al_step_out
0303   003C             .export fdc_al_seek
0304   003C             .export fdc_al_format_128
0305   003C             .export fdc_al_formatdisk_128
0306   003C             .export fdc_al_format_512
0307   003C             .export fdc_al_formatdisk_512
0308   003C             .export fdc_al_read_addr
0309   003C             .export fdc_al_read_track
0310   003C             .export fdc_al_read_sect
0311   003C             .export fdc_al_write_sect
0312   003C             .export fdc_al_force_int
0313   003C             .export fdc_al_status0
0314   003C             .export fdc_al_status1
0315   003C             
0316   003C             ; ------------------------------------------------------------------------------------------------------------------;
0317   003C             ; irqs' code block
0318   003C             ; ------------------------------------------------------------------------------------------------------------------;
0319   003C             ; 5.25" floppy drive controller irq
0320   003C             int_0_fdc:
0321   003C 06            sysret
0322   003D             int_1:
0323   003D 06            sysret
0324   003E             int_2:
0325   003E 06            sysret
0326   003F             int_3:
0327   003F 06            sysret
0328   0040             int_4:
0329   0040 06            sysret
0330   0041             int_5:
0331   0041 06            sysret
0332   0042             
0333   0042             ; timer irq
0334   0042             int_6:  
0335   0042 06            sysret
0336   0043             
0337   0043             ; ------------------------------------------------------------------------------------------------------------------;
0338   0043             ; uart0 interrupt
0339   0043             ; ------------------------------------------------------------------------------------------------------------------;
0340   0043             int_7_uart0:
0341   0043 D7            push a
0342   0044 DA            push d
0343   0045 E1            pushf
0344   0046 14 35 19      mov a, [fifo_in]
0345   0049 3C            mov d, a
0346   004A 1D 80 FF      mov al, [_uart0_data]       ; get character
0347   004D B9 03         cmp al, $03                 ; ctrl-c
0348   004F C6 71 00      je ctrlc
0349   0052 B9 1A         cmp al, $1a                 ; ctrl-z
0350   0054 C6 77 00      je ctrlz
0351   0057 3E            mov [d], al                 ; add to fifo
0352   0058 14 35 19      mov a, [fifo_in]
0353   005B 77            inc a
0354   005C 99            mov bl, ah
0355   005D FD 3D B0 FF   mov [_7seg_display], bl
0356   0061 AF 96 30      cmp a, fifo + _fifo_size     ; check if pointer reached the end of the fifo
0357   0064 C7 6A 00      jne int_7_continue
0358   0067 10 96 20      mov a, fifo  
0359   006A             int_7_continue:  
0360   006A 42 35 19      mov [fifo_in], a            ; update fifo pointer
0361   006D EE            popf
0362   006E E7            pop d
0363   006F E4            pop a  
0364   0070 06            sysret
0365   0071             ctrlc:
0366   0071 51 05 00      add sp, 5
0367   0074 0A 77 10      jmp syscall_terminate_proc
0368   0077             ctrlz:
0369   0077 EE            popf
0370   0078 E7            pop d
0371   0079 E4            pop a
0372   007A 0A BA 10      jmp syscall_pause_proc      ; pause current process and go back to the shell
0373   007D             
0374   007D             ; ------------------------------------------------------------------------------------------------------------------;
0375   007D             ; ext2 file system
0376   007D             ; ------------------------------------------------------------------------------------------------------------------;
0377   007D             sys_mkfs:
0378   007D             ; master boot record
0379   007D F2 BE 01 80   mov byte[_mbr], $80
0380   0081 B8 BF 01 00   mov word[_mbr + 1], $0000
0380   0085 00 
0381   0086 F2 C1 01 00   mov byte[_mbr + 3], $00
0382   008A F2 C2 01 83   mov byte[_mbr + 4], $83  ; ext2
0383   008E B8 C3 01 00   mov word[_mbr + 5], $0000   ;end CHS
0383   0092 00 
0384   0093 F2 C5 01 00   mov byte[_mbr + 7], $00    
0385   0097 B8 C6 01 01   mov word[_mbr + 8], 1       ; start LBA of kernel
0385   009B 00 
0386   009C B8 C8 01 00   mov word[_mbr + 10], $0000
0386   00A0 00 
0387   00A1 B8 CA 01 00   mov word[_mbr + 12], $0000       ; size = 65536 sectors = 32MB
0387   00A5 00 
0388   00A6 B8 CB 01 01   mov word[_mbr + 13], $0001
0388   00AA 00 
0389   00AB             
0390   00AB             ; superblock
0391   00AB B8 00 02 00   mov word[_superblock], 2048
0391   00AF 00 
0392   00B0 B8 02 02 00   mov word[_superblock + 2], $0000
0392   00B4 00 
0393   00B5 B8 04 02 00   mov word[_superblock + 4], $2800
0393   00B9 00 
0394   00BA B8 06 02 00   mov word[_superblock + 6], $0000
0394   00BE 00 
0395   00BF             
0396   00BF             ; --- MBR signature ---
0397   00BF B8 FE 01 55   mov word [510], $AA55          ; Must be present for BIOS to boot
0397   00C3 00 
0398   00C4             
0399   00C4             
0400   00C4             ; ------------------------------------------------------------------------------------------------------------------;
0401   00C4             ; floppy drive syscalls
0402   00C4             ; ------------------------------------------------------------------------------------------------------------------;
0403   00C4             ; data for formatting a floppy drive in single density mode (128 bytes per sector):
0404   00C4             ; fdc_40_ff:
0405   00C4             ;   .fill 40,  $ff    ; or 00                                                                                
0406   00C4             ; fdc_128_format_inner:
0407   00C4             ;   .fill 6,   $00    ;                                                                            <--|        
0408   00C4             ;   .fill 1,   $fe    ; id address mark                                                               |        
0409   00C4             ;   .fill 1,   $00    ; track number  0 thru 39                                                       |                    
0410   00C4             ;   .fill 1,   $00    ; side number 00 or 01                                                          |                
0411   00C4             ;   .fill 1,   $01    ; sector number  0x01 through 0x10                                              |                              
0412   00C4             ;   .fill 1,   $00    ; sector length                                                                 |                        
0413   00C4             ;   .fill 1,   $f7    ; 2 crc's written                                                               | write 16 times                 
0414   00C4             ;   .fill 11,  $ff    ; or 00                                                                         |                      
0415   00C4             ;   .fill 6,   $00    ;                                                                               |                        
0416   00C4             ;   .fill 1,   $fb    ; data address mark                                                             |                                  
0417   00C4             ;   .fill 128, $e5    ; data (ibm uses e5)                                                            |                                      
0418   00C4             ;   .fill 1,   $f7    ; 2 crc's written                                                               |                                                        
0419   00C4             ;   .fill 10,  $ff    ; or 00                                                                      <--|                                                  
0420   00C4             ; fdc_128_format_end:
0421   00C4             ;   .fill 369, $ff    ; or 00. continue writing until wd1770 interrupts out. approx 369 bytes.                                                                
0422   00C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423   00C4             fdc_jmptbl:
0424   00C4 F0 00         .dw syscall_fdc_restore
0425   00C6 FC 00         .dw syscall_fdc_step
0426   00C8 04 01         .dw syscall_fdc_step_in
0427   00CA 0C 01         .dw syscall_fdc_step_out
0428   00CC 14 01         .dw syscall_fdc_seek
0429   00CE 22 01         .dw syscall_fdc_format_128
0430   00D0 76 01         .dw syscall_fdc_formatdisk_128
0431   00D2 4C 01         .dw syscall_fdc_format_512
0432   00D4 B8 01         .dw syscall_fdc_formatdisk_512
0433   00D6 20 01         .dw syscall_fdc_read_addr
0434   00D8 FA 01         .dw syscall_fdc_read_track
0435   00DA 29 02         .dw syscall_fdc_read_sect
0436   00DC 61 02         .dw syscall_fdc_write_sect
0437   00DE 21 01         .dw syscall_fdc_force_int
0438   00E0 E8 00         .dw syscall_fdc_status0
0439   00E2 EC 00         .dw syscall_fdc_status1
0440   00E4             syscall_fdc:
0441   00E4 FD 0A C4 00   jmp [fdc_jmptbl + al]
0442   00E8             
0443   00E8             syscall_fdc_status0:
0444   00E8 1D C1 FF      mov al, [_fdc_status_0]
0445   00EB 06            sysret
0446   00EC             
0447   00EC             syscall_fdc_status1:
0448   00EC 1D C8 FF      mov al, [_fdc_stat_cmd]
0449   00EF 06            sysret
0450   00F0             
0451   00F0             syscall_fdc_restore:
0452   00F0 07 92 02      call fdc_wait_not_busy
0453   00F3 F2 C8 FF 0B   mov byte [_fdc_stat_cmd], %00001011
0454   00F7 F2 C9 FF 00   mov byte [_fdc_track], $00 ; reset track
0455   00FB 06            sysret
0456   00FC             
0457   00FC             syscall_fdc_step:
0458   00FC 07 92 02      call fdc_wait_not_busy
0459   00FF F2 C8 FF 3B   mov byte [_fdc_stat_cmd], %00111011
0460   0103 06            sysret
0461   0104             
0462   0104             syscall_fdc_step_in:
0463   0104 07 92 02      call fdc_wait_not_busy
0464   0107 F2 C8 FF 53   mov byte [_fdc_stat_cmd], %01010011
0465   010B 06            sysret
0466   010C             
0467   010C             syscall_fdc_step_out:
0468   010C 07 92 02      call fdc_wait_not_busy
0469   010F F2 C8 FF 7B   mov byte [_fdc_stat_cmd], %01111011
0470   0113 06            sysret
0471   0114             
0472   0114             ; bl: desired track
0473   0114             syscall_fdc_seek:
0474   0114 07 92 02      call fdc_wait_not_busy
0475   0117 FD 3D CB FF   mov [_fdc_data], bl ; set desired track to bl
0476   011B F2 C8 FF 1B   mov byte [_fdc_stat_cmd], %00011011 ; seek command
0477   011F 06            sysret
0478   0120             
0479   0120             syscall_fdc_read_addr:
0480   0120 06            sysret
0481   0121             
0482   0121             syscall_fdc_force_int:
0483   0121 06            sysret
0484   0122             
0485   0122             ; when writing the actual code for formatting multiple tracks, remember to change the track number byte
0486   0122             ; in the ram formatting block because they are all set as 00 right now
0487   0122             ; bl: track number
0488   0122             syscall_fdc_format_128:
0489   0122 07 9D 02      call fdc_format_mem_128
0490   0125 07 92 02      call fdc_wait_not_busy
0491   0128 FD 3D C9 FF   mov [_fdc_track], bl
0492   012C FD 4D 96 32   mov si, transient_area
0493   0130 F2 C8 FF FA   mov byte [_fdc_stat_cmd], %11111010 ; write track command: {1111, 0: enable spin-up seq, 1: settling delay, 1: no write precompensation, 0}
0494   0134 07 73 03      call fdc_wait_64us
0495   0137             fdc_format_drq_128:
0496   0137 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0497   013A 93 01         test al, $01                ; 4
0498   013C C6 4B 01      jz fdc_format_end_128           ; 8
0499   013F 93 02         test al, $02                ; 4
0500   0141 C6 37 01      jz fdc_format_drq_128           ; 8
0501   0144 F6            lodsb                       ; 7
0502   0145 3D CB FF      mov [_fdc_data], al         ; 10   
0503   0148 0A 37 01      jmp fdc_format_drq_128
0504   014B             fdc_format_end_128:
0505   014B 06            sysret
0506   014C             
0507   014C             ; when writing the actual code for formatting multiple tracks, remember to change the track number byte
0508   014C             ; in the ram formatting block because they are all set as 00 right now
0509   014C             ; bl: track number
0510   014C             syscall_fdc_format_512:
0511   014C 07 08 03      call fdc_format_mem_512
0512   014F 07 92 02      call fdc_wait_not_busy
0513   0152 FD 3D C9 FF   mov [_fdc_track], bl
0514   0156 FD 4D 96 32   mov si, transient_area
0515   015A F2 C8 FF FA   mov byte [_fdc_stat_cmd], %11111010 ; write track command: {1111, 0: enable spin-up seq, 1: settling delay, 1: no write precompensation, 0}
0516   015E 07 73 03      call fdc_wait_64us
0517   0161             fdc_format_drq_512:
0518   0161 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0519   0164 93 01         test al, $01                ; 4
0520   0166 C6 75 01      jz fdc_format_end_512           ; 8
0521   0169 93 02         test al, $02                ; 4
0522   016B C6 61 01      jz fdc_format_drq_512           ; 8
0523   016E F6            lodsb                       ; 7
0524   016F 3D CB FF      mov [_fdc_data], al         ; 10   
0525   0172 0A 61 01      jmp fdc_format_drq_512
0526   0175             fdc_format_end_512:
0527   0175 06            sysret
0528   0176             
0529   0176             syscall_fdc_formatdisk_128:
0530   0176 2E 00         mov bl, 0
0531   0178             fdc_formatdisk128_l0:
0532   0178 07 9D 02      call fdc_format_mem_128
0533   017B 07 92 02      call fdc_wait_not_busy
0534   017E FD 3D C9 FF   mov [_fdc_track], bl
0535   0182 FD 4D 96 32   mov si, transient_area
0536   0186 F2 C8 FF FA   mov byte [_fdc_stat_cmd], %11111010 ; write track command
0537   018A 07 73 03      call fdc_wait_64us
0538   018D             fdc_formatdisk_drq_128:
0539   018D 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0540   0190 93 01         test al, $01                ; 4
0541   0192 C6 A1 01      jz fdc_formatdisk_end_128           ; 8
0542   0195 93 02         test al, $02                ; 4
0543   0197 C6 8D 01      jz fdc_formatdisk_drq_128           ; 8
0544   019A F6            lodsb                       ; 7
0545   019B 3D CB FF      mov [_fdc_data], al         ; 10   
0546   019E 0A 8D 01      jmp fdc_formatdisk_drq_128
0547   01A1             fdc_formatdisk_end_128:
0548   01A1 07 92 02      call fdc_wait_not_busy
0549   01A4 D8            push b
0550   01A5 26 08 00      mov b, 8
0551   01A8 07 7A 03      call wait_xs
0552   01AB F2 C8 FF 53   mov byte [_fdc_stat_cmd], %01010011  ; step in
0553   01AF E5            pop b
0554   01B0 6C 01         add bl, 1
0555   01B2 C1 28         cmp bl, 40
0556   01B4 C7 78 01      jne fdc_formatdisk128_l0
0557   01B7 06            sysret
0558   01B8             
0559   01B8             syscall_fdc_formatdisk_512:
0560   01B8 2E 00         mov bl, 0
0561   01BA             fdc_formatdisk512_l0:
0562   01BA 07 08 03      call fdc_format_mem_512
0563   01BD 07 92 02      call fdc_wait_not_busy
0564   01C0 FD 3D C9 FF   mov [_fdc_track], bl
0565   01C4 FD 4D 96 32   mov si, transient_area
0566   01C8 F2 C8 FF F2   mov byte [_fdc_stat_cmd], %11110010 ; write track command
0567   01CC 07 73 03      call fdc_wait_64us
0568   01CF             fdc_formatdisk_drq_512:
0569   01CF 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0570   01D2 93 01         test al, $01                ; 4
0571   01D4 C6 E3 01      jz fdc_formatdisk_end_512           ; 8
0572   01D7 93 02         test al, $02                ; 4
0573   01D9 C6 CF 01      jz fdc_formatdisk_drq_512           ; 8
0574   01DC F6            lodsb                       ; 7
0575   01DD 3D CB FF      mov [_fdc_data], al         ; 10   
0576   01E0 0A CF 01      jmp fdc_formatdisk_drq_512
0577   01E3             fdc_formatdisk_end_512:
0578   01E3 07 92 02      call fdc_wait_not_busy
0579   01E6 D8            push b
0580   01E7 26 08 00      mov b, 8
0581   01EA 07 7A 03      call wait_xs
0582   01ED F2 C8 FF 53   mov byte [_fdc_stat_cmd], %01010011   ; step in
0583   01F1 E5            pop b
0584   01F2 6C 01         add bl, 1
0585   01F4 C1 28         cmp bl, 40
0586   01F6 C7 BA 01      jne fdc_formatdisk512_l0
0587   01F9 06            sysret
0588   01FA             
0589   01FA             ; di : destination in user space
0590   01FA             ; a  : returns number of read bytes
0591   01FA             syscall_fdc_read_track:
0592   01FA 07 92 02      call fdc_wait_not_busy
0593   01FD E3            push di
0594   01FE FD 4F 96 32   mov di, transient_area
0595   0202 F2 C8 FF E8   mov byte [_fdc_stat_cmd], %11101000
0596   0206 07 73 03      call fdc_wait_64us
0597   0209             fdc_read_track_l0: ; for each byte, we need to wait for drq to be high
0598   0209 1D C8 FF      mov al, [_fdc_stat_cmd]      ; 
0599   020C 93 01         test al, $01                ; check busy bit
0600   020E C6 1D 02      jz fdc_read_track_end
0601   0211 93 02         test al, $02                ; check drq bit
0602   0213 C6 09 02      jz fdc_read_track_l0
0603   0216 1D CB FF      mov al, [_fdc_data]     ; 
0604   0219 F7            stosb
0605   021A 0A 09 02      jmp fdc_read_track_l0
0606   021D             ;we need to check if writing to data reg causes a spurious read. so lets check inside the writing loop, how many times we actually write the bytes
0607   021D             ;say the 40 byte loop. if we find that we only write ~20 times, then this indcates this problem.
0608   021D             ;because for every write, if it also reads, then that clears drq, so we need to wait for next drq.
0609   021D             fdc_read_track_end:
0610   021D 50            mov a, di
0611   021E 5F 96 32      sub a, transient_area
0612   0221 F0            pop di
0613   0222 FD 4D 96 32   mov si, transient_area
0614   0226 39            mov c, a  ; copy track over to user space
0615   0227 03            store
0616   0228 06            sysret
0617   0229             
0618   0229             ; sector in bl
0619   0229             ; track in bh
0620   0229             ; di = user space destination
0621   0229             syscall_fdc_read_sect:
0622   0229 07 92 02      call fdc_wait_not_busy
0623   022C E3            push di
0624   022D FD 3D CA FF   mov [_fdc_sector], bl
0625   0231 30            mov bl, bh
0626   0232 FD 3D C9 FF   mov [_fdc_track], bl
0627   0236 F2 C8 FF 88   mov byte [_fdc_stat_cmd], %10001000
0628   023A 07 73 03      call fdc_wait_64us
0629   023D FD 4F 96 32   mov di, transient_area
0630   0241             fdc_read_sect_l0: ; for each byte, we need to wait for drq to be high
0631   0241 1D C8 FF      mov al, [_fdc_stat_cmd]      ; read lost data flag 10+3+5+8+5+8
0632   0244 93 01         test al, $01                ; check drq bit
0633   0246 C6 55 02      jz fdc_read_sect_end
0634   0249 93 02         test al, $02                ; check drq bit
0635   024B C6 41 02      jz fdc_read_sect_l0
0636   024E 1D CB FF      mov al, [_fdc_data]     ; 
0637   0251 F7            stosb
0638   0252 0A 41 02      jmp fdc_read_sect_l0
0639   0255             fdc_read_sect_end:
0640   0255 50            mov a, di
0641   0256 5F 96 32      sub a, transient_area
0642   0259 F0            pop di
0643   025A FD 4D 96 32   mov si, transient_area
0644   025E 39            mov c, a  ; copy sector over to user space
0645   025F 03            store
0646   0260 06            sysret
0647   0261             
0648   0261             ; sector size in c
0649   0261             ; sector in bl
0650   0261             ; track in bh
0651   0261             ; data pointer in si
0652   0261             syscall_fdc_write_sect:
0653   0261 07 92 02      call fdc_wait_not_busy
0654   0264 FD 3D CA FF   mov [_fdc_sector], bl
0655   0268 30            mov bl, bh
0656   0269 FD 3D C9 FF   mov [_fdc_track], bl
0657   026D FD 4F 96 32   mov di, transient_area    ; si = data source, di = destination 
0658   0271 04            load                    ; transfer data to kernel space!
0659   0272 FD 4D 96 32   mov si, transient_area
0660   0276 F2 C8 FF AA   mov byte [_fdc_stat_cmd], %10101010            ; 101, 0:single sector, 1: disable spinup, 0: no delay, 1: no precomp, 0: normal data mark
0661   027A 07 73 03      call fdc_wait_64us
0662   027D             fdc_write_sect_l0: ; for each byte, we need to wait for drq to be high
0663   027D 1D C8 FF      mov al, [_fdc_stat_cmd]         ; 10
0664   0280 93 01         test al, $01                    ; 4
0665   0282 C6 91 02      jz fdc_write_sect_end           ; 8
0666   0285 93 02         test al, $02                    ; 4
0667   0287 C6 7D 02      jz fdc_write_sect_l0            ; 8
0668   028A F6            lodsb                           ; 7
0669   028B 3D CB FF      mov [_fdc_data], al             ; 10   
0670   028E 0A 7D 02      jmp fdc_write_sect_l0
0671   0291             fdc_write_sect_end:
0672   0291 06            sysret
0673   0292             
0674   0292             fdc_wait_not_busy:
0675   0292 DB            push al
0676   0293             fdc_wait_not_busy_l0:
0677   0293 1D C8 FF      mov al, [_fdc_stat_cmd]   
0678   0296 93 01         test al, $01               
0679   0298 C7 93 02      jnz fdc_wait_not_busy_l0          
0680   029B E8            pop al
0681   029C 09            ret
0682   029D             
0683   029D             ; track number in bl
0684   029D             fdc_format_mem_128:
0685   029D 3B 01 00      mov d, 1
0686   02A0 FD 4F 96 32   mov di, transient_area
0687   02A4             ; 40 * FF
0688   02A4 38 28 00      mov c, 40
0689   02A7 19 FF         mov al, $ff
0690   02A9             fdc_l0: 
0691   02A9 F7            stosb
0692   02AA 7E            dec c
0693   02AB C7 A9 02      jnz fdc_l0
0694   02AE             ; 6 * 00
0695   02AE             fdc_inner_loop:
0696   02AE 38 06 00      mov c, 6
0697   02B1 19 00         mov al, $00
0698   02B3             fdc_l1:
0699   02B3 F7            stosb
0700   02B4 7E            dec c
0701   02B5 C7 B3 02      jnz fdc_l1
0702   02B8             ; FE address mark
0703   02B8             fdc_l2:
0704   02B8 19 FE         mov al, $fe
0705   02BA F7            stosb
0706   02BB             ; track number
0707   02BB             fdc_l3:
0708   02BB 1B            mov al, bl  ; track number in bl
0709   02BC F7            stosb
0710   02BD             ; side number
0711   02BD             fdc_l4:
0712   02BD 19 00         mov al, $00
0713   02BF F7            stosb
0714   02C0             ; sector number
0715   02C0             fdc_l5:
0716   02C0 13            mov a, d
0717   02C1 F7            stosb
0718   02C2             ; sector length 128 bytes
0719   02C2             fdc_l6:
0720   02C2 19 00         mov al, $00
0721   02C4 F7            stosb
0722   02C5             ; 2 crc's
0723   02C5             fdc_l7:
0724   02C5 19 F7         mov al, $f7
0725   02C7 F7            stosb
0726   02C8             ; 11 times $ff
0727   02C8 38 0B 00      mov c, 11
0728   02CB 19 FF         mov al, $ff
0729   02CD             fdc_l8:
0730   02CD F7            stosb
0731   02CE 7E            dec c
0732   02CF C7 CD 02      jnz fdc_l8
0733   02D2             ; 6 times 00
0734   02D2 38 06 00      mov c, 6
0735   02D5 19 00         mov al, $00
0736   02D7             fdc_l9:
0737   02D7 F7            stosb
0738   02D8 7E            dec c
0739   02D9 C7 D7 02      jnz fdc_l9
0740   02DC             ; FB data address mark
0741   02DC 19 FB         mov al, $fb
0742   02DE             fdc_l10:
0743   02DE F7            stosb
0744   02DF             ; 128 bytes sector data
0745   02DF 38 80 00      mov c, 128
0746   02E2 19 E5         mov al, $E5
0747   02E4             fdc_l11:
0748   02E4 F7            stosb
0749   02E5 7E            dec c
0750   02E6 C7 E4 02      jnz fdc_l11
0751   02E9             ; 2 crc's
0752   02E9             fdc_l12:
0753   02E9 19 F7         mov al, $f7
0754   02EB F7            stosb
0755   02EC             ; 10 * $FF
0756   02EC 38 0A 00      mov c, 10
0757   02EF 19 FF         mov al, $ff
0758   02F1             fdc_l13:
0759   02F1 F7            stosb
0760   02F2 7E            dec c
0761   02F3 C7 F1 02      jnz fdc_l13
0762   02F6             ; check whether we did this 16 times
0763   02F6 79            inc d
0764   02F7 C5 11 00      cmp d, 17
0765   02FA C7 AE 02      jne fdc_inner_loop
0766   02FD             ; 500 bytes of FF for end filler. wd1770 writes these until it finishes, so the number varies. usually it writes ~450 bytes
0767   02FD 38 F4 01      mov c, 500
0768   0300 19 FF         mov al, $ff
0769   0302             fdc_format_footer:
0770   0302             fdc_footer_drq_loop:
0771   0302 F7            stosb
0772   0303 7E            dec c
0773   0304 C7 02 03      jnz fdc_footer_drq_loop
0774   0307 09            ret
0775   0308             
0776   0308             ; track number in bl
0777   0308             fdc_format_mem_512:
0778   0308 3B 01 00      mov d, 1
0779   030B FD 4F 96 32   mov di, transient_area
0780   030F             ; 40 * FF
0781   030F 38 28 00      mov c, 40
0782   0312 19 FF         mov al, $ff
0783   0314             fdc_512_l0: 
0784   0314 F7            stosb
0785   0315 7E            dec c
0786   0316 C7 14 03      jnz fdc_512_l0
0787   0319             ; 6 * 00
0788   0319             fdc_512_inner_loop:
0789   0319 38 06 00      mov c, 6
0790   031C 19 00         mov al, $00
0791   031E             fdc_512_l1:
0792   031E F7            stosb
0793   031F 7E            dec c
0794   0320 C7 1E 03      jnz fdc_512_l1
0795   0323             ; FE address mark
0796   0323             fdc_512_l2:
0797   0323 19 FE         mov al, $fe
0798   0325 F7            stosb
0799   0326             ; track number
0800   0326             fdc_512_l3:
0801   0326 1B            mov al, bl ; track number was in bl
0802   0327 F7            stosb
0803   0328             ; side number
0804   0328             fdc_512_l4:
0805   0328 19 00         mov al, $00
0806   032A F7            stosb
0807   032B             ; sector number
0808   032B             fdc_512_l5:
0809   032B 13            mov a, d
0810   032C F7            stosb
0811   032D             ; sector length 512 bytes
0812   032D             fdc_512_l6:
0813   032D 19 02         mov al, $02
0814   032F F7            stosb
0815   0330             ; 2 crc's
0816   0330             fdc_512_l7:
0817   0330 19 F7         mov al, $f7
0818   0332 F7            stosb
0819   0333             ; 11 times $ff
0820   0333 38 0B 00      mov c, 11
0821   0336 19 FF         mov al, $ff
0822   0338             fdc_512_l8:
0823   0338 F7            stosb
0824   0339 7E            dec c
0825   033A C7 38 03      jnz fdc_512_l8
0826   033D             ; 6 times 00
0827   033D 38 06 00      mov c, 6
0828   0340 19 00         mov al, $00
0829   0342             fdc_512_l9:
0830   0342 F7            stosb
0831   0343 7E            dec c
0832   0344 C7 42 03      jnz fdc_512_l9
0833   0347             ; FB data address mark
0834   0347 19 FB         mov al, $fb
0835   0349             fdc_512_l10:
0836   0349 F7            stosb
0837   034A             ; 128 bytes sector data
0838   034A 38 00 02      mov c, 512
0839   034D 19 E5         mov al, $E5
0840   034F             fdc_512_l11:
0841   034F F7            stosb
0842   0350 7E            dec c
0843   0351 C7 4F 03      jnz fdc_512_l11
0844   0354             ; 2 crc's
0845   0354             fdc_512_l12:
0846   0354 19 F7         mov al, $f7
0847   0356 F7            stosb
0848   0357             ; 10 * $FF
0849   0357 38 0A 00      mov c, 10
0850   035A 19 FF         mov al, $ff
0851   035C             fdc_512_l13:
0852   035C F7            stosb
0853   035D 7E            dec c
0854   035E C7 5C 03      jnz fdc_512_l13
0855   0361             ; check whether we did this 16 times
0856   0361 79            inc d
0857   0362 C5 06 00      cmp d, 6
0858   0365 C7 19 03      jne fdc_512_inner_loop
0859   0368             ; 500 bytes of FF for end filler. wd1770 writes these until it finishes, so the number varies. usually it writes ~450 bytes
0860   0368 38 F4 01      mov c, 500
0861   036B 19 FF         mov al, $ff
0862   036D             fdc_512_format_footer:
0863   036D             fdc_512_footer_drq_loop:
0864   036D F7            stosb
0865   036E 7E            dec c
0866   036F C7 6D 03      jnz fdc_512_footer_drq_loop
0867   0372 09            ret
0868   0373             
0869   0373             ; fetch is 2 cycles long when 'display_reg_load' is false.
0870   0373             ; 64us amounts to 160 cycles of the 2.5mhz clock
0871   0373             ; call u16 is 14 cycles long
0872   0373             ; 160 - 5 - 14 = 
0873   0373             fdc_wait_64us:
0874   0373 3A 0D         mov cl, 13                       ; 5 cycles
0875   0375             fdc_wait_64_loop:
0876   0375 81            dec cl                           ; 3 cycles
0877   0376 C7 75 03      jnz fdc_wait_64_loop             ; 8 cycles
0878   0379 09            ret
0879   037A             
0880   037A             ; number of seconds in b
0881   037A             wait_xs:
0882   037A C0 00 00      cmp b, 0
0883   037D C6 88 03      je wait_xs_end
0884   0380 07 89 03      call wait_1s
0885   0383 FD 7D         dec b
0886   0385 0A 7A 03      jmp wait_xs
0887   0388             wait_xs_end:
0888   0388 09            ret
0889   0389             
0890   0389             wait_1s:
0891   0389 DB            push al
0892   038A D9            push c
0893   038B 19 03         mov al, 3
0894   038D             wait_1s_l0:
0895   038D 38 FF FF      mov c, 65535                       
0896   0390             wait_1s_l1:
0897   0390 7E            dec c        ; 4
0898   0391 C7 90 03      jnz wait_1s_l1   ; 8
0899   0394 80            dec al
0900   0395 C7 8D 03      jnz wait_1s_l0
0901   0398 E6            pop c
0902   0399 E8            pop al
0903   039A 09            ret
0904   039B             
0905   039B             ; ------------------------------------------------------------------------------------------------------------------;
0906   039B             ; system syscalls
0907   039B             ; ------------------------------------------------------------------------------------------------------------------;
0908   039B             system_jmptbl:
0909   039B D1 03         .dw system_uname
0910   039D D8 03         .dw system_whoami
0911   039F AB 03         .dw system_poke
0912   03A1 AE 03         .dw system_bootloader_install
0913   03A3 A9 03         .dw system_peek
0914   03A5             syscall_system:
0915   03A5 FD 0A 9B 03   jmp [system_jmptbl + al]
0916   03A9             
0917   03A9             ; param register address in register d
0918   03A9             ; param value in register bl
0919   03A9             system_peek:
0920   03A9 32            mov bl, [d]
0921   03AA 06            sysret
0922   03AB             
0923   03AB             ; param register address in register d
0924   03AB             ; param value in register bl
0925   03AB             system_poke:
0926   03AB FD 3E         mov [d], bl
0927   03AD 06            sysret
0928   03AE             
0929   03AE             ; kernel LBA address in 'b'
0930   03AE             system_bootloader_install:
0931   03AE D8            push b
0932   03AF 26 00 00      mov b, 0
0933   03B2 38 00 00      mov c, 0
0934   03B5 22 01         mov ah, $01                 ; 1 sector
0935   03B7 3B 96 32      mov d, transient_area
0936   03BA 07 D5 06      call ide_read_sect          ; read sector
0937   03BD E5            pop b
0938   03BE FD 44 FE 01   mov [d + 510], b            ; update LBA address
0939   03C2 26 00 00      mov b, 0
0940   03C5 38 00 00      mov c, 0
0941   03C8 22 01         mov ah, $01                 ; 1 sector
0942   03CA 3B 96 32      mov d, transient_area
0943   03CD 07 FB 06      call ide_write_sect         ; write sector
0944   03D0 06            sysret
0945   03D1             
0946   03D1             system_uname:
0947   03D1 3B 46 19      mov d, s_uname
0948   03D4 07 FF 13      call _puts
0949   03D7 06            sysret
0950   03D8             
0951   03D8             system_whoami:
0952   03D8 06            sysret
0953   03D9             
0954   03D9             ; reboot system
0955   03D9             syscall_reboot:
0956   03D9 FD D7 FF FF   push word $ffff 
0957   03DD FD DB 00      push byte %00000000             ; dma_ack = 0, interrupts disabled, mode = supervisor, paging = off, halt=0, display_reg_load=0, dir=0
0958   03E0 FD D7 C0 01   push word bios_reset_vector     ; and then push reset vector of the shell to the stack
0959   03E4 06            sysret
0960   03E5             
0961   03E5             ;------------------------------------------------------------------------------------------------------;;
0962   03E5             ; switch to another process
0963   03E5             ; inputs:
0964   03E5             ; al = new process number
0965   03E5             ;------------------------------------------------------------------------------------------------------;;
0966   03E5             syscall_resume_proc:
0967   03E5 FD 78         mov g, a                            ; save the process number
0968   03E7 4B            pusha                               ; save all registers into kernel stack
0969   03E8 22 00         mov ah, 0
0970   03EA 1D 30 19      mov al, [active_proc_index]
0971   03ED FD 99         shl a              ; x2
0972   03EF B7 6D 11      mov a, [proc_table_convert + a]     ; get process state start index
0973   03F2 4F            mov di, a
0974   03F3 48            mov a, sp
0975   03F4 77            inc a
0976   03F5 4D            mov si, a
0977   03F6 38 14 00      mov c, 20
0978   03F9 FD F5         rep movsb                           ; save process state!
0979   03FB             ; restore kernel stack position to point before interrupt arrived
0980   03FB 51 14 00      add sp, 20
0981   03FE             ; now load the new process number!
0982   03FE FD 12         mov a, g                            ; retrieve the process number argument that was saved in the beginning
0983   0400 3D 30 19      mov [active_proc_index], al         ; set new active proc
0984   0403             ; calculate lut entry for next process
0985   0403 22 00         mov ah, 0
0986   0405 FD 99         shl a                               ; x2
0987   0407 B7 6D 11      mov a, [proc_table_convert + a]     ; get process state start index  
0988   040A 4D            mov si, a                           ; source is proc state block
0989   040B 48            mov a, sp
0990   040C 5F 13 00      sub a, 19
0991   040F 4F            mov di, a                           ; destination is kernel stack
0992   0410             ; restore sp
0993   0410 7D            dec a
0994   0411 47            mov sp, a
0995   0412 38 14 00      mov c, 20
0996   0415 FD F5         rep movsb
0997   0417             ; set vm process
0998   0417 1D 30 19      mov al, [active_proc_index]
0999   041A 01            setptb
1000   041B 4C            popa
1001   041C 06            sysret
1002   041D             
1003   041D             ;------------------------------------------------------------------------------------------------------;;
1004   041D             ; list processes
1005   041D             ;------------------------------------------------------------------------------------------------------;;
1006   041D             syscall_list_procs:
1007   041D 3B 67 19      mov d, s_ps_header
1008   0420 07 FF 13      call _puts
1009   0423 3B 07 1C      mov d, proc_availab_table + 1
1010   0426 38 01 00      mov c, 1
1011   0429             list_procs_l0:  
1012   0429 BD 01         cmp byte[d], 1
1013   042B C7 4F 04      jne list_procs_next
1014   042E 2D            mov b, d
1015   042F 61 06 1C      sub b, proc_availab_table
1016   0432 FD 9F 05      shl b, 5
1017   0435 DA            push d
1018   0436 D8            push b
1019   0437 28            mov b, c
1020   0438 07 9F 14      call print_u8x
1021   043B 22 20         mov ah, ' '
1022   043D 07 D3 12      call _putchar
1023   0440 07 D3 12      call _putchar
1024   0443 E5            pop b
1025   0444 74            mov d, b
1026   0445 58 16 1C      add d, proc_names
1027   0448 07 FF 13      call _puts
1028   044B 07 AC 13      call printnl
1029   044E E7            pop d
1030   044F             list_procs_next:
1031   044F 79            inc d
1032   0450 78            inc c
1033   0451 C2 09 00      cmp c, 9
1034   0454 C7 29 04      jne list_procs_l0
1035   0457             list_procs_end:
1036   0457 06            sysret
1037   0458             
1038   0458             ; ------------------------------------------------------------------------------------------------------------------;
1039   0458             ; exceptions code block
1040   0458             ; ------------------------------------------------------------------------------------------------------------------;
1041   0458             ; privilege exception
1042   0458             ; ------------------------------------------------------------------------------------------------------------------;
1043   0458             trap_privilege:
1044   0458 0A D9 03      jmp syscall_reboot
1045   045B DA            push d
1046   045C 3B B6 19      mov d, s_priviledge
1047   045F 07 FF 13      call _puts
1048   0462 E7            pop d
1049   0463 06            sysret
1050   0464             
1051   0464             ; ------------------------------------------------------------------------------------------------------------------;
1052   0464             ; breakpoint
1053   0464             ; important: values in the stack are being pushed in big endian. i.e.: msb at low address
1054   0464             ; and lsb at high address. *** need to correct this in the microcode and make it little endian again ***
1055   0464             ; ------------------------------------------------------------------------------------------------------------------;
1056   0464             syscall_break:
1057   0464 4B            pusha
1058   0465             syscall_break_prompt:
1059   0465 3B 1F 05      mov d, s_break1
1060   0468 07 FF 13      call _puts
1061   046B 07 AC 13      call printnl
1062   046E 07 01 15      call scan_u16d
1063   0471 AF 00 00      cmp a, 0
1064   0474 C6 7F 04      je syscall_break_regs
1065   0477 AF 01 00      cmp a, 1
1066   047A C6 A2 04      je syscall_break_mem
1067   047D             syscall_break_end:  
1068   047D 4C            popa
1069   047E 06            sysret
1070   047F             syscall_break_regs:
1071   047F 48            mov a, sp
1072   0480 53 0E 00      add a, 14               ; back-track 7 registers
1073   0483 3C            mov d, a
1074   0484 3A 07         mov cl, 7
1075   0486             syscall_regs_l0:
1076   0486 2A            mov b, [d]
1077   0487 FD AB         swp b
1078   0489 07 5B 14      call print_u16x         ; print register value
1079   048C 07 AC 13      call printnl
1080   048F 63 02 00      sub d, 2
1081   0492 71 01         sub cl, 1
1082   0494 C3 00         cmp cl, 0
1083   0496 C7 86 04      jne syscall_regs_l0
1084   0499 0A 65 04      jmp syscall_break_prompt
1085   049C 07 AC 13      call printnl
1086   049F 0A 65 04      jmp syscall_break_prompt
1087   04A2             syscall_break_mem:
1088   04A2 07 AC 13      call printnl
1089   04A5 07 7D 14      call scan_u16x
1090   04A8 4D            mov si, a               ; data source from user space
1091   04A9 FD 4F 96 30   mov di, scrap_sector    ; destination in kernel space
1092   04AD 38 00 02      mov c, 512
1093   04B0 04            load                    ; transfer data to kernel space!
1094   04B1 3B 96 30      mov d, scrap_sector     ; dump pointer in d
1095   04B4 38 00 00      mov c, 0
1096   04B7             dump_loop:
1097   04B7 84            mov al, cl
1098   04B8 87 0F         and al, $0f
1099   04BA C6 08 05      jz print_base
1100   04BD             back:
1101   04BD 1E            mov al, [d]             ; read byte
1102   04BE 2F            mov bl, al
1103   04BF 07 9F 14      call print_u8x
1104   04C2 10 00 20      mov a, $2000
1105   04C5 05 03         syscall sys_io          ; space
1106   04C7 84            mov al, cl
1107   04C8 87 0F         and al, $0f
1108   04CA B9 0F         cmp al, $0f
1109   04CC C6 DD 04      je print_ascii
1110   04CF             back1:
1111   04CF 79            inc d
1112   04D0 78            inc c
1113   04D1 C2 00 02      cmp c, 512
1114   04D4 C7 B7 04      jne dump_loop
1115   04D7 07 AC 13      call printnl
1116   04DA 0A 65 04      jmp syscall_break_prompt  ; go to syscall_break return point
1117   04DD             print_ascii:
1118   04DD 10 00 20      mov a, $2000
1119   04E0 05 03         syscall sys_io
1120   04E2 63 10 00      sub d, 16
1121   04E5 26 10 00      mov b, 16
1122   04E8             print_ascii_l:
1123   04E8 79            inc d
1124   04E9 1E            mov al, [d]               ; read byte
1125   04EA B9 20         cmp al, $20
1126   04EC C8 F4 04      jlu dot
1127   04EF B9 7E         cmp al, $7e
1128   04F1 D0 FC 04      jleu ascii
1129   04F4             dot:
1130   04F4 10 00 2E      mov a, $2e00
1131   04F7 05 03         syscall sys_io
1132   04F9 0A 01 05      jmp ascii_continue
1133   04FC             ascii:
1134   04FC 23            mov ah, al
1135   04FD 19 00         mov al, 0
1136   04FF 05 03         syscall sys_io
1137   0501             ascii_continue:
1138   0501 FD A9 E8 04   loopb print_ascii_l
1139   0505 0A CF 04      jmp back1
1140   0508             print_base:
1141   0508 07 AC 13      call printnl
1142   050B 2D            mov b, d
1143   050C 61 96 30      sub b, scrap_sector      ; remove this later and fix address bases which display incorrectly
1144   050F 07 5B 14      call print_u16x          ; display row
1145   0512 10 00 3A      mov a, $3a00
1146   0515 05 03         syscall sys_io
1147   0517 10 00 20      mov a, $2000
1148   051A 05 03         syscall sys_io
1149   051C 0A BD 04      jmp back
1150   051F             
1151   051F             s_break1:  
1152   051F 0A 64 65 62   .db "\ndebugger entry point.\n"
1152   0523 75 67 67 65 
1152   0527 72 20 65 6E 
1152   052B 74 72 79 20 
1152   052F 70 6F 69 6E 
1152   0533 74 2E 0A 
1153   0536 30 2E 20 73   .db "0. show registers\n"
1153   053A 68 6F 77 20 
1153   053E 72 65 67 69 
1153   0542 73 74 65 72 
1153   0546 73 0A 
1154   0548 31 2E 20 73   .db "1. show 512b ram block\n"
1154   054C 68 6F 77 20 
1154   0550 35 31 32 62 
1154   0554 20 72 61 6D 
1154   0558 20 62 6C 6F 
1154   055C 63 6B 0A 
1155   055F 32 2E 20 63   .db "2. continue execution", 0
1155   0563 6F 6E 74 69 
1155   0567 6E 75 65 20 
1155   056B 65 78 65 63 
1155   056F 75 74 69 6F 
1155   0573 6E 00 
1156   0575             
1157   0575             ; ------------------------------------------------------------------------------------------------------------------;
1158   0575             ; divide by zero exception
1159   0575             ; ------------------------------------------------------------------------------------------------------------------;
1160   0575             trap_div_zero:
1161   0575 D7            push a
1162   0576 DA            push d
1163   0577 E1            pushf
1164   0578 3B CD 19      mov d, s_divzero
1165   057B 07 FF 13      call _puts
1166   057E EE            popf
1167   057F E7            pop d
1168   0580 E4            pop a
1169   0581 06            sysret ; enable interrupts
1170   0582             
1171   0582             ; ------------------------------------------------------------------------------------------------------------------;
1172   0582             ; undefined opcode exception
1173   0582             ; ------------------------------------------------------------------------------------------------------------------;
1174   0582             trap_undef_opcode:
1175   0582 06            sysret
1176   0583             
1177   0583             ; ------------------------------------------------------------------------------------------------------------------;
1178   0583             ; real-time clock services syscall
1179   0583             ; rtc i/o bank = ffa0 to ffaf
1180   0583             ; ffa0 to ffa7 is scratch ram
1181   0583             ; control register at $ffa8 [ w | r | s | cal4..cal0 ]
1182   0583             ; al = 0..6 -> get
1183   0583             ; al = 7..d -> set
1184   0583             ; ------------------------------------------------------------------------------------------------------------------;
1185   0583             syscall_rtc:
1186   0583 DB            push al
1187   0584 DA            push d
1188   0585 B9 06         cmp al, 6
1189   0587 D1 9C 05      jgu syscall_rtc_set
1190   058A             syscall_rtc_get:
1191   058A 6A A9         add al, $a9             ; generate rtc address to get to address a9 of clock
1192   058C 22 FF         mov ah, $ff    
1193   058E 3C            mov d, a                ; get to ffa9 + offset
1194   058F F2 A8 FF 40   mov byte[$ffa8], $40    ; set r bit to 1
1195   0593 1E            mov al, [d]             ; get data
1196   0594 F2 A8 FF 00   mov byte[$ffa8], 0      ; reset r bit
1197   0598 23            mov ah, al
1198   0599 E7            pop d
1199   059A E8            pop al
1200   059B 06            sysret
1201   059C             syscall_rtc_set:
1202   059C DD            push bl
1203   059D 99            mov bl, ah              ; set data aside
1204   059E 6A A2         add al, $a2             ; generate rtc address to get to address a9 of clock
1205   05A0 22 FF         mov ah, $ff    
1206   05A2 3C            mov d, a                ; get to ffa9 + offset
1207   05A3 1B            mov al, bl              ; get data back
1208   05A4 F2 A8 FF 80   mov byte[$ffa8], $80    ; set w bit to 1
1209   05A8 3E            mov [d], al             ; set data
1210   05A9 F2 A8 FF 00   mov byte[$ffa8], 0      ; reset write bit
1211   05AD EA            pop bl
1212   05AE E7            pop d
1213   05AF E8            pop al
1214   05B0 06            sysret
1215   05B1             
1216   05B1             datetime_serv_tbl:
1217   05B1 B9 05         .dw print_date
1218   05B3 2D 06         .dw set_date
1219   05B5             syscall_datetime:
1220   05B5 FD 0A B1 05   jmp [datetime_serv_tbl + al]      
1221   05B9             print_date:
1222   05B9 10 00 0D      mov a, $0d00           ; print carriage return char
1223   05BC 19 03         mov al, 3
1224   05BE 05 01         syscall sys_rtc        ; get week
1225   05C0 1A            mov al, ah
1226   05C1 22 00         mov ah, 0
1227   05C3 FD 9D 02      shl a, 2          
1228   05C6 3B 57 1A      mov d, s_week
1229   05C9 59            add d, a
1230   05CA 07 FF 13      call _puts
1231   05CD 10 00 20      mov a, $2000
1232   05D0 05 03         syscall sys_io         ; display ' '
1233   05D2 19 04         mov al, 4
1234   05D4 05 01         syscall sys_rtc        ; get day
1235   05D6 99            mov bl, ah
1236   05D7 07 9F 14      call print_u8x
1237   05DA 10 00 20      mov a, $2000
1238   05DD 05 03         syscall sys_io         ; display ' '
1239   05DF             ; there is a problem with the month displaying
1240   05DF             ; the month is stored as bcd. so when retrieving the month, the value will be in binary
1241   05DF             ; even though it is to be understood as bcd.
1242   05DF             ; when retrieving the value and adding the string table address offset the value will go overboard!  
1243   05DF 19 05         mov al, 05
1244   05E1 05 01         syscall sys_rtc        ; get month
1245   05E3 1A            mov al, ah
1246   05E4 22 00         mov ah, 0
1247   05E6 FD 9D 02      shl a, 2          
1248   05E9 3B 23 1A      mov d, s_months
1249   05EC 59            add d, a
1250   05ED 07 FF 13      call _puts
1251   05F0 10 00 20      mov a, $2000
1252   05F3 05 03         syscall sys_io         ; display ' '
1253   05F5 2E 20         mov bl, $20
1254   05F7 07 9F 14      call print_u8x         ; print 20 for year prefix
1255   05FA 19 06         mov al, 06
1256   05FC 05 01         syscall sys_rtc        ; get year
1257   05FE 99            mov bl, ah
1258   05FF 07 9F 14      call print_u8x
1259   0602 10 00 20      mov a, $2000  
1260   0605 05 03         syscall sys_io         ; display ' '
1261   0607 19 02         mov al, 2
1262   0609 05 01         syscall sys_rtc        ; get hours
1263   060B 99            mov bl, ah
1264   060C 07 9F 14      call print_u8x
1265   060F 10 00 3A      mov a, $3a00    
1266   0612 05 03         syscall sys_io         ; display ':'
1267   0614 19 01         mov al, 01
1268   0616 05 01         syscall sys_rtc        ; get minutes
1269   0618 99            mov bl, ah
1270   0619 07 9F 14      call print_u8x
1271   061C 10 00 3A      mov a, $3a00  
1272   061F 05 03         syscall sys_io         ; display ':'
1273   0621 19 00         mov al, 0
1274   0623 05 01         syscall sys_rtc        ; get seconds
1275   0625 99            mov bl, ah
1276   0626 07 9F 14      call print_u8x
1277   0629 07 AC 13      call printnl
1278   062C 06            sysret
1279   062D             set_date:
1280   062D 3B E8 19      mov d, s_set_year
1281   0630 07 FF 13      call _puts
1282   0633 07 EA 14      call scan_u8x          ; read integer into a
1283   0636 FD 9D 08      shl a, 8               ; only al used, move to ah
1284   0639 19 0D         mov al, 0dh            ; set rtc year
1285   063B 05 01         syscall sys_rtc        ; set rtc
1286   063D 3B EF 19      mov d, s_set_month
1287   0640 07 FF 13      call _puts
1288   0643 07 EA 14      call scan_u8x          ; read integer into a
1289   0646 FD 9D 08      shl a, 8               ; only al used, move to ah
1290   0649 19 0C         mov al, 0ch            ; set rtc month
1291   064B 05 01         syscall sys_rtc        ; set rtc
1292   064D 3B F7 19      mov d, s_set_day
1293   0650 07 FF 13      call _puts
1294   0653 07 EA 14      call scan_u8x          ; read integer into a
1295   0656 FD 9D 08      shl a, 8               ; only al used, move to ah
1296   0659 19 0B         mov al, 0bh            ; set rtc month
1297   065B 05 01         syscall sys_rtc        ; set rtc
1298   065D 3B FD 19      mov d, s_set_week
1299   0660 07 FF 13      call _puts
1300   0663 07 EA 14      call scan_u8x          ; read integer into a
1301   0666 FD 9D 08      shl a, 8               ; only al used, move to ah
1302   0669 19 0A         mov al, 0ah            ; set rtc month
1303   066B 05 01         syscall sys_rtc        ; set rtc
1304   066D 3B 07 1A      mov d, s_set_hours
1305   0670 07 FF 13      call _puts
1306   0673 07 EA 14      call scan_u8x          ; read integer into a
1307   0676 FD 9D 08      shl a, 8               ; only al used, move to ah
1308   0679 19 09         mov al, 09h            ; set rtc month
1309   067B 05 01         syscall sys_rtc        ; set rtc
1310   067D 3B 0F 1A      mov d, s_set_minutes
1311   0680 07 FF 13      call _puts
1312   0683 07 EA 14      call scan_u8x          ; read integer into a
1313   0686 FD 9D 08      shl a, 8               ; only al used, move to ah
1314   0689 19 08         mov al, 08h            ; set rtc month
1315   068B 05 01         syscall sys_rtc        ; set rtc
1316   068D 3B 19 1A      mov d, s_set_seconds
1317   0690 07 FF 13      call _puts
1318   0693 07 EA 14      call scan_u8x          ; read integer into a
1319   0696 FD 9D 08      shl a, 8               ; only al used, move to ah
1320   0699 19 07         mov al, 07h            ; set rtc month
1321   069B 05 01         syscall sys_rtc        ; set rtc
1322   069D 06            sysret
1323   069E             
1324   069E             ; ------------------------------------------------------------------------------------------------------------------;
1325   069E             ; ide services syscall
1326   069E             ; al = option
1327   069E             ; 0 = ide reset, 1 = ide sleep, 2 = read sector, 3 = write sector
1328   069E             ; ide read/write sector
1329   069E             ; 512 bytes
1330   069E             ; user buffer pointer in d
1331   069E             ; ah = number of sectors
1332   069E             ; cb = lba bytes 3..0
1333   069E             ; ------------------------------------------------------------------------------------------------------------------;
1334   069E             ide_serv_tbl:
1335   069E AA 06         .dw ide_reset
1336   06A0 BE 06         .dw ide_sleep
1337   06A2 CD 06         .dw ide_read_sect_wrapper
1338   06A4 D1 06         .dw ide_write_sect_wrapper
1339   06A6             syscall_ide:
1340   06A6 FD 0A 9E 06   jmp [ide_serv_tbl + al]    
1341   06AA             
1342   06AA             ide_reset:      
1343   06AA F2 D7 FF 04   mov byte[_ide_r7], 4            ; reset ide
1344   06AE 07 57 07      call ide_wait                   ; wait for ide ready             
1345   06B1 F2 D6 FF E0   mov byte[_ide_r6], $e0          ; lba3= 0, master, mode= lba        
1346   06B5 F2 D1 FF 01   mov byte[_ide_r1], 1            ; 8-bit transfers      
1347   06B9 F2 D7 FF EF   mov byte[_ide_r7], $ef          ; set feature command
1348   06BD 06            sysret
1349   06BE             ide_sleep:
1350   06BE 07 57 07      call ide_wait                   ; wait for ide ready             
1351   06C1 F2 D6 FF 40   mov byte [_ide_r6], %01000000   ; lba[3:0](reserved), bit 6=1
1352   06C5 F2 D7 FF E6   mov byte [_ide_r7], $e6         ; sleep command
1353   06C9 07 57 07      call ide_wait                   ; wait for ide ready
1354   06CC 06            sysret
1355   06CD             ide_read_sect_wrapper:
1356   06CD 07 D5 06      call ide_read_sect
1357   06D0 06            sysret
1358   06D1             ide_write_sect_wrapper:
1359   06D1 07 FB 06      call ide_write_sect
1360   06D4 06            sysret
1361   06D5             ide_read_sect:
1362   06D5 1A            mov al, ah
1363   06D6 24            mov ah, bl
1364   06D7 42 D2 FF      mov [_ide_r2], a                ; number of sectors (0..255)
1365   06DA 1C            mov al, bh
1366   06DB 3D D4 FF      mov [_ide_r4], al
1367   06DE 12            mov a, c
1368   06DF 3D D5 FF      mov [_ide_r5], al
1369   06E2 1A            mov al, ah
1370   06E3 87 0F         and al, %00001111
1371   06E5 8B E0         or al, %11100000                ; mode lba, master
1372   06E7 3D D6 FF      mov [_ide_r6], al
1373   06EA             ide_read_sect_wait:
1374   06EA 1D D7 FF      mov al, [_ide_r7]  
1375   06ED 87 80         and al, $80                     ; busy flag
1376   06EF C7 EA 06      jnz ide_read_sect_wait
1377   06F2 19 20         mov al, $20
1378   06F4 3D D7 FF      mov [_ide_r7], al               ; read sector cmd
1379   06F7 07 21 07      call ide_read  
1380   06FA 09            ret
1381   06FB             ide_write_sect:
1382   06FB 1A            mov al, ah
1383   06FC 24            mov ah, bl
1384   06FD 42 D2 FF      mov [_ide_r2], a                ; number of sectors (0..255)
1385   0700 1C            mov al, bh
1386   0701 3D D4 FF      mov [_ide_r4], al
1387   0704 12            mov a, c
1388   0705 3D D5 FF      mov [_ide_r5], al
1389   0708 1A            mov al, ah
1390   0709 87 0F         and al, %00001111
1391   070B 8B E0         or al, %11100000                ; mode lba, master
1392   070D 3D D6 FF      mov [_ide_r6], al
1393   0710             ide_write_sect_wait:
1394   0710 1D D7 FF      mov al, [_ide_r7]  
1395   0713 87 80         and al, $80                     ; busy flag
1396   0715 C7 10 07      jnz ide_write_sect_wait
1397   0718 19 30         mov al, $30
1398   071A 3D D7 FF      mov [_ide_r7], al               ; write sector cmd
1399   071D 07 3C 07      call ide_write      
1400   0720 09            ret
1401   0721             
1402   0721             ;----------------------------------------------------------------------------------------------------;
1403   0721             ; read ide data
1404   0721             ; pointer in d
1405   0721             ;----------------------------------------------------------------------------------------------------;
1406   0721             ide_read:
1407   0721 DA            push d
1408   0722             ide_read_loop:
1409   0722 1D D7 FF      mov al, [_ide_r7]  
1410   0725 87 80         and al, 80h                     ; busy flag
1411   0727 C7 22 07      jnz ide_read_loop               ; wait loop
1412   072A 1D D7 FF      mov al, [_ide_r7]
1413   072D 87 08         and al, %00001000               ; drq flag
1414   072F C6 3A 07      jz ide_read_end
1415   0732 1D D0 FF      mov al, [_ide_r0]
1416   0735 3E            mov [d], al
1417   0736 79            inc d
1418   0737 0A 22 07      jmp ide_read_loop
1419   073A             ide_read_end:
1420   073A E7            pop d
1421   073B 09            ret
1422   073C             
1423   073C             ;----------------------------------------------------------------------------------------------------;
1424   073C             ; write ide data
1425   073C             ; data pointer in d
1426   073C             ;----------------------------------------------------------------------------------------------------;
1427   073C             ide_write:
1428   073C DA            push d
1429   073D             ide_write_loop:
1430   073D 1D D7 FF      mov al, [_ide_r7]  
1431   0740 87 80         and al, 80h             ; busy flag
1432   0742 C7 3D 07      jnz ide_write_loop      ; wait loop
1433   0745 1D D7 FF      mov al, [_ide_r7]
1434   0748 87 08         and al, %00001000       ; drq flag
1435   074A C6 55 07      jz ide_write_end
1436   074D 1E            mov al, [d]
1437   074E 3D D0 FF      mov [_ide_r0], al
1438   0751 79            inc d 
1439   0752 0A 3D 07      jmp ide_write_loop
1440   0755             ide_write_end:
1441   0755 E7            pop d
1442   0756 09            ret
1443   0757             
1444   0757             ;----------------------------------------------------------------------------------------------------;
1445   0757             ; wait for ide to be ready
1446   0757             ;----------------------------------------------------------------------------------------------------;
1447   0757             ide_wait:
1448   0757 1D D7 FF      mov al, [_ide_r7]  
1449   075A 87 80         and al, 80h        ; busy flag
1450   075C C7 57 07      jnz ide_wait
1451   075F 09            ret
1452   0760             
1453   0760             ;----------------------------------------------------------------------------------------------------;
1454   0760             ; io syscall
1455   0760             ;----------------------------------------------------------------------------------------------------;
1456   0760             ; baud  divisor
1457   0760             ; 50    2304
1458   0760             ; 110   1047
1459   0760             ; 300    384
1460   0760             ; 600    192
1461   0760             ; 1200    96
1462   0760             ; 9600    12
1463   0760             ; 19200    6
1464   0760             ; 38400    3
1465   0760             syscall_io_jmp:
1466   0760 93 07         .dw syscall_io_putchar
1467   0762 A0 07         .dw syscall_io_getch
1468   0764 6A 07         .dw syscall_io_uart_setup
1469   0766             syscall_io:
1470   0766 FD 0A 60 07   jmp [syscall_io_jmp + al]
1471   076A             ; bit7 is the divisor latch access bit (dlab). it must be set high (logic 1) to access the divisor latches
1472   076A             ; of the baud generator during a read or write operation. it must be set low (logic 0) to access the receiver
1473   076A             ; buffer, the transmitter holding register, or the interrupt enable register.
1474   076A             syscall_io_uart_setup:
1475   076A 1D 2A 19      mov al, [sys_uart0_lcr]
1476   076D 8B 80         or al, $80                ; set dlab access bit
1477   076F 3D 83 FF      mov [_uart0_lcr], al      ; 8 data, 2 stop, no parity by default
1478   0772 1D 2D 19      mov al, [sys_uart0_div0]
1479   0775 3D 80 FF      mov [_uart0_dlab_0], al   ; divisor latch byte 0
1480   0778 1D 2E 19      mov al, [sys_uart0_div1]
1481   077B 3D 81 FF      mov [_uart0_dlab_1], al   ; divisor latch byte 1      
1482   077E             
1483   077E 1D 2A 19      mov al, [sys_uart0_lcr]
1484   0781 87 7F         and al, $7f               ; clear dlab access bit 
1485   0783 3D 83 FF      mov [_uart0_lcr], al
1486   0786 1D 2B 19      mov al, [sys_uart0_inten]
1487   0789 3D 81 FF      mov [_uart0_ier], al      ; interrupts
1488   078C 1D 2C 19      mov al, [sys_uart0_fifoen]
1489   078F 3D 82 FF      mov [_uart0_fcr], al      ; fifo control
1490   0792 06            sysret
1491   0793             
1492   0793             ; char in ah
1493   0793             syscall_io_putchar:
1494   0793             syscall_io_putchar_l0:
1495   0793 1D 85 FF      mov al, [_uart0_lsr]         ; read line status register
1496   0796 87 20         and al, $20
1497   0798 C6 93 07      jz syscall_io_putchar_l0    
1498   079B 1A            mov al, ah
1499   079C 3D 80 FF      mov [_uart0_data], al        ; write char to transmitter holding register
1500   079F 06            sysret
1501   07A0             
1502   07A0             ; char in ah
1503   07A0             ; al = sucess code
1504   07A0             syscall_io_getch:
1505   07A0 D8            push b
1506   07A1 DA            push d
1507   07A2 FD 0C         sti
1508   07A4             syscall_io_getch_l0:  
1509   07A4 14 37 19      mov a, [fifo_out]
1510   07A7 29 35 19      mov b, [fifo_in]
1511   07AA B0            cmp a, b
1512   07AB C6 A4 07      je syscall_io_getch_l0
1513   07AE 3C            mov d, a
1514   07AF 77            inc a
1515   07B0 AF 96 30      cmp a, fifo + _fifo_size      ; check if pointer reached the end of the fifo
1516   07B3 C7 B9 07      jne syscall_io_getch_cont
1517   07B6 10 96 20      mov a, fifo  
1518   07B9             syscall_io_getch_cont:  
1519   07B9 42 37 19      mov [fifo_out], a             ; update fifo pointer
1520   07BC 1E            mov al, [d]                   ; get char
1521   07BD 23            mov ah, al
1522   07BE 1D 29 19      mov al, [sys_echo_on]
1523   07C1 B9 01         cmp al, 1
1524   07C3 C7 D2 07      jne syscall_io_getch_noecho 
1525   07C6             ; here we just echo the char back to the console
1526   07C6             syscall_io_getch_echo_l0:
1527   07C6 1D 85 FF      mov al, [_uart0_lsr]         ; read line status register
1528   07C9 87 20         and al, $20                 ; isolate transmitter empty
1529   07CB C6 C6 07      jz syscall_io_getch_echo_l0
1530   07CE 1A            mov al, ah
1531   07CF 3D 80 FF      mov [_uart0_data], al        ; write char to transmitter holding register
1532   07D2             syscall_io_getch_noecho:
1533   07D2 19 01         mov al, 1                    ; al = 1 means a char successfully received
1534   07D4 E7            pop d
1535   07D5 E5            pop b
1536   07D6 06            sysret
1537   07D7             
1538   07D7             ;------------------------------------------------------------------------------------------------------;
1539   07D7             ; file system data
1540   07D7             ;------------------------------------------------------------------------------------------------------;
1541   07D7             ; infor for : ide services interrupt
1542   07D7             ; ide read/write 512-byte sector
1543   07D7             ; al = option
1544   07D7             ; user buffer pointer in d
1545   07D7             ; ah = number of sectors
1546   07D7             ; cb = lba bytes 3..0  
1547   07D7             ;------------------------------------------------------------------------------------------------------;
1548   07D7             ; file system data structure
1549   07D7             ;------------------------------------------------------------------------------------------------------;
1550   07D7             ; for a directory we have the header first, followed by metadata
1551   07D7             ; header 1 sector (512 bytes)
1552   07D7             ; metadata 1 sector (512 bytes)
1553   07D7             ; header entries:
1554   07D7             ; filename (64)
1555   07D7             ; parent dir lba (2) -  to be used for faster backwards navigation...
1556   07D7             ;
1557   07D7             ; metadata entries:
1558   07D7             ; filename (24)
1559   07D7             ; attributes (1)  |_|_|file_type(3bits)|x|w|r| types: file, directory, character device
1560   07D7             ; lba (2)
1561   07D7             ; size (2)
1562   07D7             ; day (1)
1563   07D7             ; month (1)
1564   07D7             ; year (1)
1565   07D7             ; packet size = 32 bytes
1566   07D7             ;
1567   07D7             ; first directory on disk is the root directory '/'
1568   07D7             file_system_jmptbl:
1569   07D7 42 08         .dw fs_mkfs                   ; 0
1570   07D9 00 00         .dw 0                         ; 1
1571   07DB A4 08         .dw fs_mkdir                  ; 2
1572   07DD 1D 0C         .dw fs_cd                     ; 3
1573   07DF 24 0C         .dw fs_ls                     ; 4
1574   07E1 0F 0D         .dw fs_mktxt                  ; 5
1575   07E3 DA 0D         .dw fs_mkbin                  ; 6
1576   07E5 A1 0E         .dw fs_pwd                    ; 7
1577   07E7 BE 0E         .dw fs_cat                    ; 8
1578   07E9 1A 0F         .dw fs_rmdir                  ; 9
1579   07EB 76 0F         .dw fs_rm                     ; 10
1580   07ED 00 00         .dw 0                         ; 11
1581   07EF 00 00         .dw 0                         ; 12
1582   07F1 00 00         .dw 0                         ; 13
1583   07F3 4A 08         .dw fs_chmod                  ; 14
1584   07F5 DE 0F         .dw fs_mv                     ; 15
1585   07F7 43 08         .dw fs_cd_root                ; 16
1586   07F9 19 0C         .dw fs_get_curr_dirid         ; 17
1587   07FB F5 09         .dw fs_dir_id_to_path         ; 18
1588   07FD 5B 0A         .dw fs_path_to_dir_id_user    ; 19
1589   07FF 75 0B         .dw fs_load_from_path_user    ; 20  
1590   0801 E5 0A         .dw fs_filepath_exists_user   ; 21
1591   0803             
1592   0803 0A 3E 20 73 s_syscall_fs_dbg0: .db "\n> syscall_file_system called: ", 0
1592   0807 79 73 63 61 
1592   080B 6C 6C 5F 66 
1592   080F 69 6C 65 5F 
1592   0813 73 79 73 74 
1592   0817 65 6D 20 63 
1592   081B 61 6C 6C 65 
1592   081F 64 3A 20 00 
1593   0823             syscall_file_system:
1594   0823 DD            push bl
1595   0824 31 28 19      mov bl, [sys_debug_mode]
1596   0827               ; debug block
1597   0827 C1 00         cmp bl, 0
1598   0829 EA            pop bl
1599   082A C6 3E 08      je syscall_filesystem_jmp
1600   082D DA            push d
1601   082E DD            push bl
1602   082F 3B 03 08      mov d, s_syscall_fs_dbg0
1603   0832 07 FF 13      call _puts
1604   0835 2F            mov bl, al
1605   0836 07 9F 14      call print_u8x
1606   0839 07 AC 13      call printnl
1607   083C EA            pop bl
1608   083D E7            pop d
1609   083E             syscall_filesystem_jmp:
1610   083E FD 0A D7 07   jmp [file_system_jmptbl + al]
1611   0842             
1612   0842             fs_mkfs:  
1613   0842 06            sysret  
1614   0843               
1615   0843             fs_cd_root:
1616   0843 10 20 00      mov a, root_id
1617   0846 42 39 19      mov [current_dir_id], a      ; set current directory lba to root
1618   0849 06            sysret  
1619   084A             
1620   084A             ; filename in d (userspace data)
1621   084A             ; permission in bl
1622   084A             fs_chmod:
1623   084A DD            push bl
1624   084B FD 4E         mov si, d
1625   084D FD 4F 96 1E   mov di, user_data
1626   0851 38 80 00      mov c, 128
1627   0854 04            load                        ; load filename from user-space
1628   0855 14 39 19      mov a, [current_dir_id]
1629   0858 77            inc a                       ; metadata sector
1630   0859 27            mov b, a
1631   085A 38 00 00      mov c, 0                    ; upper lba = 0
1632   085D 22 01         mov ah, $01                  ; 1 sector
1633   085F 3B 96 32      mov d, transient_area
1634   0862 07 D5 06      call ide_read_sect          ; read directory
1635   0865 FD 10         cla
1636   0867 42 31 19      mov [index], a              ; reset file counter
1637   086A             fs_chmod_l1:
1638   086A FD 4E         mov si, d
1639   086C FD 4F 96 1E   mov di, user_data
1640   0870 07 42 12      call _strcmp
1641   0873 C6 8A 08      je fs_chmod_found_entry
1642   0876 58 20 00      add d, 32
1643   0879 14 31 19      mov a, [index]
1644   087C 77            inc a
1645   087D 42 31 19      mov [index], a
1646   0880 AF 10 00      cmp a, fst_files_per_dir
1647   0883 C7 6A 08      jne fs_chmod_l1
1648   0886 EA            pop bl
1649   0887 0A A3 08      jmp fs_chmod_not_found
1650   088A             fs_chmod_found_entry:  
1651   088A FD 79         mov g, b                    ; save lba
1652   088C EA            pop bl                      ; retrieve saved permission value
1653   088D 1F 18 00      mov al, [d + 24]            ; read file permissions
1654   0890 87 F8         and al, %11111000           ; remove all permissions, keep other flags
1655   0892 8C            or al, bl                   ; set new permissions
1656   0893 3F 18 00      mov [d + 24], al            ; write new permissions
1657   0896 38 00 00      mov c, 0
1658   0899 3B 96 32      mov d, transient_area
1659   089C 22 01         mov ah, $01                 ; disk write 1 sect
1660   089E FD 27         mov b, g                    ; retrieve lba
1661   08A0 07 FB 06      call ide_write_sect         ; write sector
1662   08A3             fs_chmod_not_found:
1663   08A3 06            sysret
1664   08A4             
1665   08A4             ;------------------------------------------------------------------------------------------------------;
1666   08A4             ; create new directory
1667   08A4             ;------------------------------------------------------------------------------------------------------;
1668   08A4             ; search list for null name entry. add new directory to list
1669   08A4             fs_mkdir:
1670   08A4 FD 4E         mov si, d
1671   08A6 FD 4F 96 1E   mov di, user_data
1672   08AA 38 00 02      mov c, 512
1673   08AD 04            load                        ; load data from user-space
1674   08AE 26 22 00      mov b, fst_lba_start + 2    ; start at 2 because lba  0 is root (this would also cause issues                 
1675   08B1                                           ; when checking for null name, since root has a null name)
1676   08B1 38 00 00      mov c, 0                    ; upper lba = 0
1677   08B4             fs_mkdir_l1:  
1678   08B4 22 01         mov ah, $01                  ; 1 sector
1679   08B6 3B 96 32      mov d, transient_area
1680   08B9 07 D5 06      call ide_read_sect          ; read sector
1681   08BC BD 00         cmp byte[d], 0              ; check for null
1682   08BE C6 C7 08      je fs_mkdir_found_null
1683   08C1 55 02 00      add b, fst_sectors_per_dir  ; skip directory
1684   08C4 0A B4 08      jmp fs_mkdir_l1
1685   08C7             fs_mkdir_found_null:
1686   08C7             ;create header file by grabbing dir name from parameter
1687   08C7 D8            push b                      ; save new directory's lba
1688   08C8 38 40 00      mov c, 64
1689   08CB FD 4D 96 1E   mov si, user_data
1690   08CF FD 4F 96 32   mov di, transient_area
1691   08D3 FD F5         rep movsb                   ; copy dirname from user_data to transient_area
1692   08D5 14 39 19      mov a, [current_dir_id]
1693   08D8 42 D6 32      mov [transient_area + 64], a    ; store parent directory lba
1694   08DB 19 00         mov al, 0
1695   08DD FD 4F 96 34   mov di, transient_area + 512
1696   08E1 38 00 02      mov c, 512
1697   08E4 FD F7         rep stosb                       ; clean buffer
1698   08E6 38 00 00      mov c, 0                        ; reset lba(c) to 0
1699   08E9             ; write directory entry sectors
1700   08E9 3B 96 32      mov d, transient_area
1701   08EC 22 02         mov ah, $02                     ; disk write, 2 sectors
1702   08EE 07 FB 06      call ide_write_sect             ; write sector
1703   08F1             ; now we need to add the new directory to the list, inside the current directory
1704   08F1 14 39 19      mov a, [current_dir_id]
1705   08F4 53 01 00      add a, 1
1706   08F7 27            mov b, a                        ; metadata sector
1707   08F8 38 00 00      mov c, 0
1708   08FB FD 79         mov g, b                        ; save lba
1709   08FD 3B 96 32      mov d, transient_area
1710   0900 22 01         mov ah, $01                  ; 1 sector
1711   0902 07 D5 06      call ide_read_sect              ; read metadata sector
1712   0905             fs_mkdir_l2:
1713   0905 BD 00         cmp byte[d], 0
1714   0907 C6 10 09      je fs_mkdir_found_null2
1715   090A 58 20 00      add d, fst_entry_size
1716   090D 0A 05 09      jmp fs_mkdir_l2                ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
1717   0910             fs_mkdir_found_null2:
1718   0910 FD 4D 96 1E   mov si, user_data
1719   0914 FD 50         mov di, d
1720   0916 07 57 12      call _strcpy                    ; copy directory name
1721   0919 58 18 00      add d, 24                       ; goto attributes
1722   091C 19 0B         mov al, %00001011               ; directory, no execute, write, read
1723   091E 3E            mov [d], al      
1724   091F 79            inc d
1725   0920 E5            pop b
1726   0921 D8            push b                          ; push lba back
1727   0922 FD 43         mov [d], b                      ; save lba
1728   0924             ; set file creation date  
1729   0924 58 04 00      add d, 4
1730   0927 19 04         mov al, 4
1731   0929 05 01         syscall sys_rtc
1732   092B 1A            mov al, ah
1733   092C 3E            mov [d], al                     ; set day
1734   092D 79            inc d
1735   092E 19 05         mov al, 5
1736   0930 05 01         syscall sys_rtc
1737   0932 1A            mov al, ah
1738   0933 3E            mov [d], al                     ; set month
1739   0934 79            inc d
1740   0935 19 06         mov al, 6
1741   0937 05 01         syscall sys_rtc
1742   0939 1A            mov al, ah
1743   093A 3E            mov [d], al                     ; set year
1744   093B             ; write sector into disk for new directory entry
1745   093B FD 27         mov b, g
1746   093D 38 00 00      mov c, 0
1747   0940 3B 96 32      mov d, transient_area
1748   0943 22 01         mov ah, $01                     ; disk write, 1 sector
1749   0945 07 FB 06      call ide_write_sect             ; write sector
1750   0948             
1751   0948             ; after adding the new directory's information to its parent directory's list
1752   0948             ; we need to now enter the new directory, and to it add two new directories!
1753   0948             ; which directories do we need to add ? '..' and '.' are the directories needed.
1754   0948             ; importantly, note that these two new directories are only entries in the list
1755   0948             ; and do not have actual physical entries in the disk as real directories.
1756   0948             ; i.e. they only exist as list entries in the new directory created so that
1757   0948             ; the new directory can reference its parent and itself.
1758   0948             ; we need to add both '..' and '.'
1759   0948             ; this first section is for '..' and on the section below we do the same for '.'
1760   0948 E4            pop a                         ; retrieve the new directory's lba  
1761   0949 D7            push a                        ; and save again
1762   094A 53 01 00      add a, 1
1763   094D 27            mov b, a                      ; metadata sector
1764   094E 38 00 00      mov c, 0
1765   0951 FD 79         mov g, b                      ; save lba
1766   0953 3B 96 32      mov d, transient_area
1767   0956 22 01         mov ah, $01                  ; 1 sector
1768   0958 07 D5 06      call ide_read_sect            ; read metadata sector
1769   095B             fs_mkdir_l3:
1770   095B BD 00         cmp byte[d], 0
1771   095D C6 66 09      je fs_mkdir_found_null3
1772   0960 58 20 00      add d, fst_entry_size
1773   0963 0A 5B 09      jmp fs_mkdir_l3              ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
1774   0966             fs_mkdir_found_null3:
1775   0966 FD 4D 58 19   mov si, s_parent_dir
1776   096A FD 50         mov di, d
1777   096C 07 57 12      call _strcpy                  ; copy directory name
1778   096F 58 18 00      add d, 24                     ; goto attributes
1779   0972 19 0B         mov al, %00001011             ; directory, no execute, write, read, 
1780   0974 3E            mov [d], al      
1781   0975 79            inc d
1782   0976 29 39 19      mov b, [current_dir_id]        ; retrieve the parent directorys lba
1783   0979 FD 43         mov [d], b                    ; save lba
1784   097B             ; set file creation date  
1785   097B 58 04 00      add d, 4
1786   097E 19 04         mov al, 4
1787   0980 05 01         syscall sys_rtc
1788   0982 1A            mov al, ah
1789   0983 3E            mov [d], al                   ; set day
1790   0984 79            inc d
1791   0985 19 05         mov al, 5
1792   0987 05 01         syscall sys_rtc
1793   0989 1A            mov al, ah
1794   098A 3E            mov [d], al                   ; set month
1795   098B 79            inc d
1796   098C 19 06         mov al, 6
1797   098E 05 01         syscall sys_rtc
1798   0990 1A            mov al, ah
1799   0991 3E            mov [d], al                   ; set year
1800   0992             ; write sector into disk for new directory entry
1801   0992 FD 27         mov b, g
1802   0994 38 00 00      mov c, 0
1803   0997 3B 96 32      mov d, transient_area
1804   099A 22 01         mov ah, $01                   ; disk write, 1 sector
1805   099C 07 FB 06      call ide_write_sect           ; write sector
1806   099F             ;;;;;;;;;;;;;
1807   099F             ; like we did above for '..', we need to now add the '.' directory to the list.
1808   099F             ;------------------------------------------------------------------------------------------------------;
1809   099F E4            pop a                         ; retrieve the new directory's lba  
1810   09A0 D7            push a
1811   09A1 53 01 00      add a, 1
1812   09A4 27            mov b, a                      ; metadata sector
1813   09A5 38 00 00      mov c, 0
1814   09A8 FD 79         mov g, b                      ; save lba
1815   09AA 3B 96 32      mov d, transient_area
1816   09AD 22 01         mov ah, $01                  ; 1 sector
1817   09AF 07 D5 06      call ide_read_sect            ; read metadata sector
1818   09B2             fs_mkdir_l4:
1819   09B2 BD 00         cmp byte[d], 0
1820   09B4 C6 BD 09      je fs_mkdir_found_null4
1821   09B7 58 20 00      add d, fst_entry_size
1822   09BA 0A B2 09      jmp fs_mkdir_l4              ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
1823   09BD             fs_mkdir_found_null4:
1824   09BD FD 4D 5B 19   mov si, s_current_dir
1825   09C1 FD 50         mov di, d
1826   09C3 07 57 12      call _strcpy                  ; copy directory name
1827   09C6 58 18 00      add d, 24                     ; goto attributes
1828   09C9 19 0B         mov al, %00001011             ; directory, no execute, write, read, 
1829   09CB 3E            mov [d], al      
1830   09CC 79            inc d
1831   09CD E5            pop b                         ; new directory's lba itself. for self-referential directory entry '.'
1832   09CE FD 43         mov [d], b                    ; save lba
1833   09D0             ; set file creation date  
1834   09D0 58 04 00      add d, 4
1835   09D3 19 04         mov al, 4
1836   09D5 05 01         syscall sys_rtc
1837   09D7 1A            mov al, ah
1838   09D8 3E            mov [d], al                   ; set day
1839   09D9 79            inc d
1840   09DA 19 05         mov al, 5
1841   09DC 05 01         syscall sys_rtc
1842   09DE 1A            mov al, ah
1843   09DF 3E            mov [d], al                   ; set month
1844   09E0 79            inc d
1845   09E1 19 06         mov al, 6
1846   09E3 05 01         syscall sys_rtc
1847   09E5 1A            mov al, ah
1848   09E6 3E            mov [d], al                   ; set year
1849   09E7             ; write sector into disk for new directory entry
1850   09E7 FD 27         mov b, g
1851   09E9 38 00 00      mov c, 0
1852   09EC 3B 96 32      mov d, transient_area
1853   09EF 22 01         mov ah, $01                   ; disk write, 1 sector
1854   09F1 07 FB 06      call ide_write_sect           ; write sector
1855   09F4             fs_mkdir_end:
1856   09F4 06            sysret
1857   09F5             
1858   09F5             ;------------------------------------------------------------------------------------------------------;
1859   09F5             ; get path from a given directory dirid
1860   09F5             ; pseudo code:
1861   09F5             ;  fs_dir_id_to_path(int dirid, char *d){
1862   09F5             ;    if(dirid == 0){
1863   09F5             ;      reverse path in d;
1864   09F5             ;      return;
1865   09F5             ;    }
1866   09F5             ;    else{
1867   09F5             ;      copy directory name to end of d;
1868   09F5             ;      add '/' to end of d;
1869   09F5             ;      parentid = get parent directory id;
1870   09F5             ;      fs_dir_id_to_path(parentid, d);
1871   09F5             ;    }
1872   09F5             ;  }
1873   09F5             ; a = dirid
1874   09F5             ; d = generated path string pointer
1875   09F5             ;------------------------------------------------------------------------------------------------------;
1876   09F5             ; sample path: /usr/bin
1877   09F5             fs_dir_id_to_path:
1878   09F5 3B 16 1E      mov d, filename
1879   09F8 19 00         mov al, 0
1880   09FA 3E            mov [d], al                     ; initialize path string 
1881   09FB 14 39 19      mov a, [current_dir_id]
1882   09FE 07 0B 0A      call fs_dir_id_to_path_e0
1883   0A01 3B 16 1E      mov d, filename
1884   0A04 07 EB 11      call _strrev
1885   0A07 07 FF 13      call _puts
1886   0A0A 06            sysret
1887   0A0B             fs_dir_id_to_path_e0:
1888   0A0B 07 2A 0A      call get_dirname_from_dirid
1889   0A0E FD 4D 5D 19   mov si, s_fslash
1890   0A12 FD 50         mov di, d
1891   0A14 07 65 12      call _strcat                    ; add '/' to end of path
1892   0A17 AF 20 00      cmp a, root_id               ; check if we are at the root directory
1893   0A1A C6 29 0A      je fs_dir_id_to_path_root
1894   0A1D 07 47 0A      call get_parentid_from_dirid    ; use current id (a) to find parentid (into a)
1895   0A20 AF 20 00      cmp a, root_id               ; check if we are at the root directory
1896   0A23 C6 29 0A      je fs_dir_id_to_path_root
1897   0A26 07 0B 0A      call fs_dir_id_to_path_e0     ; recursively call itself
1898   0A29             fs_dir_id_to_path_root:
1899   0A29 09            ret
1900   0A2A             
1901   0A2A             ;------------------------------------------------------------------------------------------------------;
1902   0A2A             ; in_puts:
1903   0A2A             ; a = directory id
1904   0A2A             ; out_puts:
1905   0A2A             ; d = pointer to directory name string
1906   0A2A             ;------------------------------------------------------------------------------------------------------;
1907   0A2A             get_dirname_from_dirid:
1908   0A2A D7            push a
1909   0A2B D8            push b
1910   0A2C DA            push d
1911   0A2D 27            mov b, a
1912   0A2E 38 00 00      mov c, 0                      ; upper lba = 0
1913   0A31 22 01         mov ah, $01                  ; 1 sector
1914   0A33 3B 96 30      mov d, transient_area - 512
1915   0A36 07 D5 06      call ide_read_sect            ; read directory
1916   0A39 07 EB 11      call _strrev                  ; reverse dir name before copying
1917   0A3C FD 4E         mov si, d
1918   0A3E E7            pop d                         ; destination address = d value pushed at beginning
1919   0A3F FD 50         mov di, d
1920   0A41 07 65 12      call _strcat                  ; copy filename to d
1921   0A44 E5            pop b
1922   0A45 E4            pop a
1923   0A46 09            ret
1924   0A47             
1925   0A47             ;------------------------------------------------------------------------------------------------------;
1926   0A47             ; in_puts:
1927   0A47             ; a = directory id
1928   0A47             ; out_puts:
1929   0A47             ; a = parent directory id
1930   0A47             ;------------------------------------------------------------------------------------------------------;
1931   0A47             get_parentid_from_dirid:
1932   0A47 D8            push b
1933   0A48 DA            push d
1934   0A49 27            mov b, a
1935   0A4A 38 00 00      mov c, 0                      ; upper lba = 0
1936   0A4D 22 01         mov ah, $01                  ; 1 sector
1937   0A4F 3B 96 30      mov d, transient_area - 512
1938   0A52 07 D5 06      call ide_read_sect            ; read directory
1939   0A55 16 40 00      mov a, [d + 64]               ; copy parent id value to a
1940   0A58 E7            pop d
1941   0A59 E5            pop b
1942   0A5A 09            ret
1943   0A5B             
1944   0A5B             ;------------------------------------------------------------------------------------------------------;
1945   0A5B             ; get dirid from a given path string
1946   0A5B             ; in_puts:
1947   0A5B             ; d = path pointer 
1948   0A5B             ; out_puts:
1949   0A5B             ; a = dirid
1950   0A5B             ; if dir non existent, a = ffff (fail code)
1951   0A5B             ; /usr/local/bin    - absolute
1952   0A5B             ; local/bin/games    - relative
1953   0A5B             ;------------------------------------------------------------------------------------------------------;
1954   0A5B             fs_path_to_dir_id_user:
1955   0A5B FD 4E         mov si, d
1956   0A5D FD 4F 96 1E   mov di, user_data
1957   0A61 38 00 02      mov c, 512
1958   0A64 04            load
1959   0A65 07 69 0A      call get_dirid_from_path
1960   0A68 06            sysret
1961   0A69             get_dirid_from_path:
1962   0A69 26 96 1E      mov b, user_data
1963   0A6C FD 42 24 18   mov [prog], b                  ; token pointer set to path string
1964   0A70 07 85 16      call get_token
1965   0A73 31 27 18      mov bl, [tok]
1966   0A76 C1 01         cmp bl, tok_fslash
1967   0A78 C6 84 0A      je get_dirid_from_path_abs 
1968   0A7B 14 39 19      mov a, [current_dir_id]
1969   0A7E 07 0B 18      call _putback
1970   0A81 0A 87 0A      jmp get_dirid_from_path_e0
1971   0A84             get_dirid_from_path_abs:
1972   0A84 10 20 00      mov a, root_id
1973   0A87             get_dirid_from_path_e0:
1974   0A87 07 85 16      call get_token
1975   0A8A 31 26 18      mov bl, [toktyp]
1976   0A8D C1 00         cmp bl, toktyp_identifier
1977   0A8F C7 E0 0A      jne get_dirid_from_path_end   ; check if there are tokens after '/'. i.e. is this a 'cd /' command?
1978   0A92             
1979   0A92 FD 4D 28 18   mov si, tokstr
1980   0A96 FD 4F 16 1E   mov di, filename
1981   0A9A 07 57 12      call _strcpy        
1982   0A9D 77            inc a                         ; metadata sector
1983   0A9E 27            mov b, a
1984   0A9F 38 00 00      mov c, 0                      ; upper lba = 0
1985   0AA2 22 01         mov ah, $01                  ; 1 sector
1986   0AA4 3B 96 32      mov d, transient_area
1987   0AA7 07 D5 06      call ide_read_sect            ; read directory
1988   0AAA FD 10         cla
1989   0AAC 42 31 19      mov [index], a
1990   0AAF             get_dirid_from_path_l1:
1991   0AAF FD 4E         mov si, d
1992   0AB1 FD 4F 16 1E   mov di, filename
1993   0AB5 07 42 12      call _strcmp
1994   0AB8 C6 CE 0A      je get_dirid_from_path_name_equal  
1995   0ABB 58 20 00      add d, 32
1996   0ABE 14 31 19      mov a, [index]
1997   0AC1 77            inc a
1998   0AC2 42 31 19      mov [index], a
1999   0AC5 AF 10 00      cmp a, fst_files_per_dir
2000   0AC8 C6 E1 0A      je get_dirid_from_path_fail
2001   0ACB 0A AF 0A      jmp get_dirid_from_path_l1
2002   0ACE             get_dirid_from_path_name_equal:
2003   0ACE 58 19 00      add d, 25           
2004   0AD1 15            mov a, [d]                    ; set result register a = dirid
2005   0AD2 07 85 16      call get_token
2006   0AD5 31 27 18      mov bl, [tok]
2007   0AD8 C1 01         cmp bl, tok_fslash            ; check if there are more elements in the path
2008   0ADA C6 87 0A      je get_dirid_from_path_e0
2009   0ADD 07 0B 18      call _putback
2010   0AE0             get_dirid_from_path_end:
2011   0AE0 09            ret
2012   0AE1             get_dirid_from_path_fail:
2013   0AE1 10 FF FF      mov a, $ffff
2014   0AE4 09            ret
2015   0AE5             
2016   0AE5             
2017   0AE5             ;------------------------------------------------------------------------------------------------------;
2018   0AE5             ; check if file exists by a given path string
2019   0AE5             ; in_puts:
2020   0AE5             ; d = path pointer 
2021   0AE5             ; outputs:
2022   0AE5             ; a = success code, if file exists gives lba, else, give 0
2023   0AE5             ; /usr/local/bin/ed
2024   0AE5             ;------------------------------------------------------------------------------------------------------;
2025   0AE5             fs_filepath_exists_user:
2026   0AE5 FD 4E         mov si, d
2027   0AE7 FD 4F 96 1E   mov di, user_data
2028   0AEB 38 00 02      mov c, 512
2029   0AEE 04            load
2030   0AEF 07 F3 0A      call file_exists_by_path
2031   0AF2 06            sysret
2032   0AF3             file_exists_by_path:
2033   0AF3 26 96 1E      mov b, user_data
2034   0AF6 FD 42 24 18   mov [prog], b                   ; token pointer set to path string
2035   0AFA 07 85 16      call get_token
2036   0AFD 31 27 18      mov bl, [tok]
2037   0B00 C1 01         cmp bl, tok_fslash
2038   0B02 C6 0E 0B      je  file_exists_by_path_abs
2039   0B05 14 39 19      mov a, [current_dir_id]
2040   0B08 07 0B 18      call _putback
2041   0B0B 0A 11 0B      jmp file_exists_by_path_e0
2042   0B0E             file_exists_by_path_abs:
2043   0B0E 10 20 00      mov a, root_id
2044   0B11             file_exists_by_path_e0:
2045   0B11 07 85 16      call get_token
2046   0B14 31 26 18      mov bl, [toktyp]
2047   0B17 C1 00         cmp bl, toktyp_identifier
2048   0B19 C7 71 0B      jne file_exists_by_path_end     ; check if there are tokens after '/'
2049   0B1C FD 4D 28 18   mov si, tokstr
2050   0B20 FD 4F 16 1E   mov di, filename
2051   0B24 07 57 12      call _strcpy        
2052   0B27 77            inc a                           ; metadata sector
2053   0B28 27            mov b, a
2054   0B29 38 00 00      mov c, 0                        ; upper lba = 0
2055   0B2C 22 01         mov ah, $01                  ; 1 sector
2056   0B2E 3B 96 32      mov d, transient_area
2057   0B31 07 D5 06      call ide_read_sect              ; read directory
2058   0B34 FD 10         cla
2059   0B36 42 31 19      mov [index], a
2060   0B39             file_exists_by_path_l1:
2061   0B39 FD 4E         mov si, d
2062   0B3B FD 4F 16 1E   mov di, filename
2063   0B3F 07 42 12      call _strcmp
2064   0B42 C6 58 0B      je   file_exists_by_path_name_equal
2065   0B45 58 20 00      add d, 32
2066   0B48 14 31 19      mov a, [index]
2067   0B4B 77            inc a
2068   0B4C 42 31 19      mov [index], a
2069   0B4F AF 10 00      cmp a, fst_files_per_dir
2070   0B52 C6 71 0B      je file_exists_by_path_end
2071   0B55 0A 39 0B      jmp file_exists_by_path_l1
2072   0B58             file_exists_by_path_name_equal:
2073   0B58 33 18 00      mov bl, [d + 24]
2074   0B5B FD 87 38      and bl, %00111000               ; directory flag
2075   0B5E C1 08         cmp bl, %00001000               ; is dir?
2076   0B60 C6 67 0B      je file_exists_by_path_isdir;
2077   0B63             ; entry is a file
2078   0B63 16 19 00      mov a, [d + 25]                 ; get and return lba of file
2079   0B66 09            ret
2080   0B67             file_exists_by_path_isdir:
2081   0B67 58 19 00      add d, 25           
2082   0B6A 15            mov a, [d]                      ; set result register a = dirid
2083   0B6B 07 85 16      call get_token
2084   0B6E 0A 11 0B      jmp file_exists_by_path_e0
2085   0B71             file_exists_by_path_end:
2086   0B71 10 00 00      mov a, 0                        ; return 0 because file was not found
2087   0B74 09            ret
2088   0B75             
2089   0B75             ;------------------------------------------------------------------------------------------------------;
2090   0B75             ; load file data from a given path string
2091   0B75             ; inputs:
2092   0B75             ; d = path pointer 
2093   0B75             ; di = userspace program data destination
2094   0B75             ; /usr/local/bin/ed
2095   0B75             ; ./ed
2096   0B75             ;------------------------------------------------------------------------------------------------------;
2097   0B75             fs_load_from_path_user:
2098   0B75 E3            push di
2099   0B76 FD 4E         mov si, d
2100   0B78 FD 4F 96 1E   mov di, user_data
2101   0B7C 38 00 02      mov c, 512
2102   0B7F 04            load
2103   0B80 07 8D 0B      call loadfile_from_path
2104   0B83 F0            pop di
2105   0B84 FD 4D 96 32   mov si, transient_area
2106   0B88 38 00 3E      mov c, 512 * (fs_sectors_per_file-1)
2107   0B8B 03            store
2108   0B8C 06            sysret
2109   0B8D             loadfile_from_path:
2110   0B8D 26 96 1E      mov b, user_data
2111   0B90 FD 42 24 18   mov [prog], b                 ; token pointer set to path string
2112   0B94 07 85 16      call get_token
2113   0B97 31 27 18      mov bl, [tok]
2114   0B9A C1 01         cmp bl, tok_fslash
2115   0B9C C6 A8 0B      je loadfile_from_path_abs 
2116   0B9F 14 39 19      mov a, [current_dir_id]
2117   0BA2 07 0B 18      call _putback
2118   0BA5 0A AB 0B      jmp loadfile_from_path_e0
2119   0BA8             loadfile_from_path_abs:
2120   0BA8 10 20 00      mov a, root_id
2121   0BAB             loadfile_from_path_e0:
2122   0BAB 07 85 16      call get_token
2123   0BAE 31 26 18      mov bl, [toktyp]
2124   0BB1 C1 00         cmp bl, toktyp_identifier
2125   0BB3 C7 18 0C      jne loadfile_from_path_end    ; check if there are tokens after '/'. i.e. is this a 'cd /' command?
2126   0BB6 FD 4D 28 18   mov si, tokstr
2127   0BBA FD 4F 16 1E   mov di, filename
2128   0BBE 07 57 12      call _strcpy        
2129   0BC1 77            inc a                         ; metadata sector
2130   0BC2 27            mov b, a
2131   0BC3 38 00 00      mov c, 0                      ; upper lba = 0
2132   0BC6 22 01         mov ah, $01                  ; 1 sector
2133   0BC8 3B 96 32      mov d, transient_area
2134   0BCB 07 D5 06      call ide_read_sect            ; read directory
2135   0BCE FD 10         cla
2136   0BD0 42 31 19      mov [index], a
2137   0BD3             loadfile_from_path_l1:
2138   0BD3 FD 4E         mov si, d
2139   0BD5 FD 4F 16 1E   mov di, filename
2140   0BD9 07 42 12      call _strcmp
2141   0BDC C6 F2 0B      je loadfile_from_path_name_equal  
2142   0BDF 58 20 00      add d, 32
2143   0BE2 14 31 19      mov a, [index]
2144   0BE5 77            inc a
2145   0BE6 42 31 19      mov [index], a
2146   0BE9 AF 10 00      cmp a, fst_files_per_dir
2147   0BEC C6 18 0C      je loadfile_from_path_end
2148   0BEF 0A D3 0B      jmp loadfile_from_path_l1
2149   0BF2             loadfile_from_path_name_equal:
2150   0BF2 33 18 00      mov bl, [d + 24]
2151   0BF5 FD 87 38      and bl, %00111000             ; directory flag
2152   0BF8 C1 08         cmp bl, %00001000             ; is dir?
2153   0BFA C6 0E 0C      je loadfile_isdirectory  
2154   0BFD             ; entry is a file
2155   0BFD 2B 19 00      mov b, [d + 25]               ; get lba
2156   0C00 FD 77         inc b                         ; add 1 to b because the lba for data comes after the header sector
2157   0C02 3B 96 32      mov d, transient_area
2158   0C05 38 00 00      mov c, 0
2159   0C08 22 1F         mov ah, fs_sectors_per_file-1 ; number of sectors
2160   0C0A 07 D5 06      call ide_read_sect            ; read sector
2161   0C0D 09            ret
2162   0C0E             loadfile_isdirectory:
2163   0C0E 58 19 00      add d, 25           
2164   0C11 15            mov a, [d]                    ; set result register a = dirid
2165   0C12 07 85 16      call get_token
2166   0C15 0A AB 0B      jmp loadfile_from_path_e0
2167   0C18             loadfile_from_path_end:
2168   0C18 09            ret
2169   0C19             
2170   0C19             ;------------------------------------------------------------------------------------------------------;
2171   0C19             ; return the id of the current directory
2172   0C19             ; id returned in b
2173   0C19             ;------------------------------------------------------------------------------------------------------;
2174   0C19             fs_get_curr_dirid:
2175   0C19 29 39 19      mov b, [current_dir_id]
2176   0C1C 06            sysret
2177   0C1D             
2178   0C1D             ;------------------------------------------------------------------------------------------------------;
2179   0C1D             ; cd
2180   0C1D             ;------------------------------------------------------------------------------------------------------;
2181   0C1D             ; new dirid in b
2182   0C1D             fs_cd:
2183   0C1D FD 42 39 19   mov [current_dir_id], b
2184   0C21 06            sysret  
2185   0C22             
2186   0C22             ;------------------------------------------------------------------------------------------------------;
2187   0C22             ; ls
2188   0C22             ; dirid in b
2189   0C22             ;------------------------------------------------------------------------------------------------------;
2190   0C22 00 00       ls_count:       .dw 0
2191   0C24             fs_ls:
2192   0C24 FD 77         inc b                        ; metadata sector
2193   0C26 38 00 00      mov c, 0                     ; upper lba = 0
2194   0C29 22 01         mov ah, $01                  ; 1 sector
2195   0C2B 3B 96 32      mov d, transient_area
2196   0C2E 07 D5 06      call ide_read_sect           ; read directory
2197   0C31 FD 10         cla
2198   0C33 42 31 19      mov [index], a               ; reset entry index
2199   0C36 3D 22 0C      mov [ls_count], al           ; reset item count
2200   0C39             fs_ls_l1:
2201   0C39 BD 00         cmp byte [d], 0              ; check for null
2202   0C3B C6 D2 0C      je fs_ls_next
2203   0C3E             fs_ls_non_null:
2204   0C3E 1D 22 0C      mov al, [ls_count]
2205   0C41 7A            inc al
2206   0C42 3D 22 0C      mov [ls_count], al           ; increment item count
2207   0C45 1F 18 00      mov al, [d + 24]
2208   0C48 87 38         and al, %00111000
2209   0C4A FD A2 03      shr al, 3
2210   0C4D 22 00         mov ah, 0                    ; file type
2211   0C4F B7 64 19      mov a, [a + file_type]      
2212   0C52 23            mov ah, al
2213   0C53 07 D3 12      call _putchar
2214   0C56 1F 18 00      mov al, [d + 24]
2215   0C59 87 01         and al, %00000001
2216   0C5B 22 00         mov ah, 0
2217   0C5D B7 5F 19      mov a, [a + file_attrib]     ; read
2218   0C60 23            mov ah, al
2219   0C61 07 D3 12      call _putchar
2220   0C64 1F 18 00      mov al, [d + 24]
2221   0C67 87 02         and al, %00000010
2222   0C69 22 00         mov ah, 0
2223   0C6B B7 5F 19      mov a, [a + file_attrib]     ; write
2224   0C6E 23            mov ah, al
2225   0C6F 07 D3 12      call _putchar
2226   0C72 1F 18 00      mov al, [d + 24]
2227   0C75 87 04         and al, %00000100
2228   0C77 22 00         mov ah, 0
2229   0C79 B7 5F 19      mov a, [a + file_attrib]     ; execute
2230   0C7C 23            mov ah, al
2231   0C7D 07 D3 12      call _putchar
2232   0C80 22 20         mov ah, $20
2233   0C82 07 D3 12      call _putchar  
2234   0C85 2B 1B 00      mov b, [d + 27]
2235   0C88 07 5B 14      call print_u16x              ; filesize
2236   0C8B 22 20         mov ah, $20
2237   0C8D 07 D3 12      call _putchar  
2238   0C90 2B 19 00      mov b, [d + 25]
2239   0C93 07 5B 14      call print_u16x              ; dirid / lba
2240   0C96 22 20         mov ah, $20
2241   0C98 07 D3 12      call _putchar
2242   0C9B             ; print date
2243   0C9B 33 1D 00      mov bl, [d + 29]             ; day
2244   0C9E 07 9F 14      call print_u8x
2245   0CA1 22 20         mov ah, $20
2246   0CA3 07 D3 12      call _putchar  
2247   0CA6 1F 1E 00      mov al, [d + 30]             ; month
2248   0CA9 FD 9E 02      shl al, 2
2249   0CAC DA            push d
2250   0CAD 3B 23 1A      mov d, s_months
2251   0CB0 22 00         mov ah, 0
2252   0CB2 59            add d, a
2253   0CB3 07 FF 13      call _puts
2254   0CB6 E7            pop d
2255   0CB7 22 20         mov ah, $20
2256   0CB9 07 D3 12      call _putchar
2257   0CBC 2E 20         mov bl, $20
2258   0CBE 07 9F 14      call print_u8x
2259   0CC1 33 1F 00      mov bl, [d + 31]             ; year
2260   0CC4 07 9F 14      call print_u8x  
2261   0CC7 22 20         mov ah, $20
2262   0CC9 07 D3 12      call _putchar  
2263   0CCC 07 FF 13      call _puts                   ; print filename  
2264   0CCF 07 AC 13      call printnl
2265   0CD2             fs_ls_next:
2266   0CD2 14 31 19      mov a, [index]
2267   0CD5 77            inc a
2268   0CD6 42 31 19      mov [index], a
2269   0CD9 AF 10 00      cmp a, fst_files_per_dir
2270   0CDC C6 E5 0C      je fs_ls_end
2271   0CDF 58 20 00      add d, 32      
2272   0CE2 0A 39 0C      jmp fs_ls_l1  
2273   0CE5             fs_ls_end:
2274   0CE5 3B 74 19      mov d, s_ls_total
2275   0CE8 07 FF 13      call _puts
2276   0CEB 1D 22 0C      mov al, [ls_count]
2277   0CEE 07 B1 14      call print_u8d
2278   0CF1 07 AC 13      call printnl
2279   0CF4 06            sysret
2280   0CF5             
2281   0CF5             ;------------------------------------------------------------------------------------------------------;
2282   0CF5             ; finds an empty data block
2283   0CF5             ; block lba returned in b
2284   0CF5             ;------------------------------------------------------------------------------------------------------;
2285   0CF5             fs_find_empty_block:
2286   0CF5 26 A0 00      mov b, fs_lba_start     ; raw files starting block
2287   0CF8 38 00 00      mov c, 0                ; upper lba = 0
2288   0CFB             fs_find_empty_block_l1:  
2289   0CFB 22 01         mov ah, $01                  ; 1 sector
2290   0CFD 3B 96 30      mov d, transient_area - 512
2291   0D00 07 D5 06      call ide_read_sect      ; read sector
2292   0D03 BD 00         cmp byte [d], 0
2293   0D05 C6 0E 0D      je fs_find_empty_block_found_null
2294   0D08 55 20 00      add b, fs_sectors_per_file
2295   0D0B 0A FB 0C      jmp fs_find_empty_block_l1
2296   0D0E             fs_find_empty_block_found_null:
2297   0D0E 09            ret
2298   0D0F             
2299   0D0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2300   0D0F             ;; create new textfile
2301   0D0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2302   0D0F             ; search for first null block
2303   0D0F             fs_mktxt:
2304   0D0F FD 4E       	mov si, d
2305   0D11 FD 4F 96 1E 	mov di, user_data
2306   0D15 38 00 01    	mov c, 256
2307   0D18 04          	load					; load data from user-space
2308   0D19             	
2309   0D19 26 A0 00    	mov b, fs_lba_start		; raw files starting block
2310   0D1C 38 00 00    	mov c, 0						; reset lba to 0
2311   0D1F             fs_mktxt_l1:	
2312   0D1F 10 02 01    	mov a, $0102			; disk read
2313   0D22 3B 96 32    	mov d, transient_area
2314   0D25 05 02       	syscall sys_ide ; read sector
2315   0D27 1E          	mov al, [d]
2316   0D28 B9 00       	cmp al, 0			; check for null
2317   0D2A C6 33 0D    	je fs_mktxt_found_null
2318   0D2D 55 20 00    	add b, fs_sectors_per_file
2319   0D30 0A 1F 0D    	jmp fs_mktxt_l1
2320   0D33             fs_mktxt_found_null:
2321   0D33 D8          	push b				; save lba
2322   0D34             ;create header file by grabbing file name from parameter	
2323   0D34 3B 55 19    	mov d, s_dataentry
2324   0D37 07 FF 13    	call _puts
2325   0D3A 3B 96 34    	mov d, transient_area + 512			; pointer to file contents
2326   0D3D 07 65 13    	call _gettxt
2327   0D40 07 32 12    	call _strlen						; get length of file
2328   0D43 D9          	push c							; save length
2329   0D44 19 01       	mov al, 1
2330   0D46 3D 96 32    	mov [transient_area], al					; mark sectors as used (not null)
2331   0D49 10 00 00    	mov a, 0
2332   0D4C 42 31 19    	mov [index], a
2333   0D4F 3B 96 32    	mov d, transient_area
2334   0D52 13          	mov a, d
2335   0D53 42 33 19    	mov [buffer_addr], a
2336   0D56             fs_mktxt_l2:
2337   0D56 38 00 00    	mov c, 0
2338   0D59 10 03 01    	mov a, $0103			; disk write, 1 sector
2339   0D5C 05 02       	syscall sys_ide		; write sector
2340   0D5E 14 31 19    	mov a, [index]
2341   0D61 77          	inc a
2342   0D62 42 31 19    	mov [index], a
2343   0D65 AF 20 00    	cmp a, fs_sectors_per_file
2344   0D68 C6 7A 0D    	je fs_mktxt_add_to_dir
2345   0D6B FD 77       	inc b
2346   0D6D 14 33 19    	mov a, [buffer_addr]
2347   0D70 53 00 02    	add a, 512
2348   0D73 42 33 19    	mov [buffer_addr], a
2349   0D76 3C          	mov d, a
2350   0D77 0A 56 0D    	jmp fs_mktxt_l2
2351   0D7A             ; now we add the file to the current directory!
2352   0D7A             fs_mktxt_add_to_dir:	
2353   0D7A 14 39 19    	mov a, [current_dir_id]
2354   0D7D 77          	inc a
2355   0D7E 27          	mov b, a					; metadata sector
2356   0D7F 38 00 00    	mov c, 0
2357   0D82 FD 79       	mov g, b					; save lba
2358   0D84 3B 96 32    	mov d, transient_area
2359   0D87 10 02 01    	mov a, $0102			; disk read
2360   0D8A 05 02       	syscall sys_ide		; read metadata sector
2361   0D8C             fs_mktxt_add_to_dir_l2:
2362   0D8C 1E          	mov al, [d]
2363   0D8D B9 00       	cmp al, 0
2364   0D8F C6 98 0D    	je fs_mktxt_add_to_dir_null
2365   0D92 58 20 00    	add d, fst_entry_size
2366   0D95 0A 8C 0D    	jmp fs_mktxt_add_to_dir_l2					; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
2367   0D98             fs_mktxt_add_to_dir_null:
2368   0D98 FD 4D 96 1E 	mov si, user_data
2369   0D9C FD 50       	mov di, d
2370   0D9E 07 57 12    	call _strcpy			; copy file name
2371   0DA1 58 18 00    	add d, 24			; skip name
2372   0DA4 19 06       	mov al, %00000110		; no execute, write, read, not directory
2373   0DA6 3E          	mov [d], al			
2374   0DA7 58 03 00    	add d, 3
2375   0DAA E4          	pop a
2376   0DAB 43          	mov [d], a
2377   0DAC 63 02 00    	sub d, 2
2378   0DAF E5          	pop b				; get file lba
2379   0DB0 FD 43       	mov [d], b			; save lba	
2380   0DB2             	
2381   0DB2             	; set file creation date	
2382   0DB2 58 04 00    	add d, 4
2383   0DB5 19 04       	mov al, 4
2384   0DB7 05 01       	syscall sys_rtc
2385   0DB9 1A          	mov al, ah
2386   0DBA 3E          	mov [d], al			; set day
2387   0DBB             	
2388   0DBB 79          	inc d
2389   0DBC 19 05       	mov al, 5
2390   0DBE 05 01       	syscall sys_rtc
2391   0DC0 1A          	mov al, ah
2392   0DC1 3E          	mov [d], al			; set month
2393   0DC2             	
2394   0DC2 79          	inc d
2395   0DC3 19 06       	mov al, 6
2396   0DC5 05 01       	syscall sys_rtc
2397   0DC7 1A          	mov al, ah
2398   0DC8 3E          	mov [d], al			; set year
2399   0DC9             	
2400   0DC9             ; write sector into disk for new directory entry
2401   0DC9 FD 27       	mov b, g
2402   0DCB 38 00 00    	mov c, 0
2403   0DCE 3B 96 32    	mov d, transient_area
2404   0DD1 10 03 01    	mov a, $0103			; disk write, 1 sector
2405   0DD4 05 02       	syscall sys_ide		; write sector
2406   0DD6 07 AC 13    	call printnl
2407   0DD9 06          	sysret
2408   0DDA             
2409   0DDA             
2410   0DDA             
2411   0DDA             ;------------------------------------------------------------------------------------------------------;
2412   0DDA             ; create new binary file
2413   0DDA             ;------------------------------------------------------------------------------------------------------;
2414   0DDA             ; search for first null block
2415   0DDA             fs_mkbin:
2416   0DDA 19 00         mov al, 0
2417   0DDC 3D 29 19      mov [sys_echo_on], al ; disable echo
2418   0DDF FD 4E         mov si, d
2419   0DE1 FD 4F 96 1E   mov di, user_data
2420   0DE5 38 00 02      mov c, 512
2421   0DE8 04            load                          ; load data from user-space
2422   0DE9 26 A0 00      mov b, fs_lba_start           ; files start when directories end
2423   0DEC 38 00 00      mov c, 0                      ; upper lba = 0
2424   0DEF             fs_mkbin_l1:  
2425   0DEF 22 01         mov ah, $01                  ; 1 sector
2426   0DF1 3B 96 32      mov d, transient_area
2427   0DF4 07 D5 06      call ide_read_sect            ; read sector
2428   0DF7 BD 00         cmp byte[d], 0                ; check for null
2429   0DF9 C6 02 0E      je fs_mkbin_found_null
2430   0DFC 55 20 00      add b, fs_sectors_per_file
2431   0DFF 0A EF 0D      jmp fs_mkbin_l1
2432   0E02             fs_mkbin_found_null:
2433   0E02 D8            push b                        ; save lba
2434   0E03             ;create header file by grabbing file name from parameter
2435   0E03 FD 4F 96 34   mov di, transient_area + 512  ; pointer to file contents
2436   0E07 07 7D 11      call _load_hex                ; load binary hex
2437   0E0A D9            push c                        ; save size (nbr of bytes)
2438   0E0B 19 01         mov al, 1
2439   0E0D 3D 96 32      mov [transient_area], al      ; mark sectors as used (not null)
2440   0E10 FD 10         cla
2441   0E12 42 31 19      mov [index], a
2442   0E15 3B 96 32      mov d, transient_area
2443   0E18 13            mov a, d
2444   0E19 42 33 19      mov [buffer_addr], a
2445   0E1C             fs_mkbin_l2:
2446   0E1C 38 00 00      mov c, 0
2447   0E1F 22 01         mov ah, $01                   ; disk write, 1 sector
2448   0E21 07 FB 06      call ide_write_sect           ; write sector
2449   0E24 14 31 19      mov a, [index]
2450   0E27 77            inc a
2451   0E28 42 31 19      mov [index], a
2452   0E2B AF 20 00      cmp a, fs_sectors_per_file    ; remove 1 from this because we dont count the header sector
2453   0E2E C6 40 0E      je fs_mkbin_add_to_dir
2454   0E31 FD 77         inc b
2455   0E33 14 33 19      mov a, [buffer_addr]
2456   0E36 53 00 02      add a, 512
2457   0E39 42 33 19      mov [buffer_addr], a
2458   0E3C 3C            mov d, a
2459   0E3D 0A 1C 0E      jmp fs_mkbin_l2
2460   0E40             ; now we add the file to the current directory!
2461   0E40             fs_mkbin_add_to_dir:  
2462   0E40 14 39 19      mov a, [current_dir_id]
2463   0E43 77            inc a
2464   0E44 27            mov b, a                      ; metadata sector
2465   0E45 38 00 00      mov c, 0
2466   0E48 FD 79         mov g, b                      ; save lba
2467   0E4A 3B 96 32      mov d, transient_area
2468   0E4D 22 01         mov ah, $01                  ; 1 sector
2469   0E4F 07 D5 06      call ide_read_sect            ; read metadata sector
2470   0E52             fs_mkbin_add_to_dir_l2:
2471   0E52 BD 00         cmp byte[d], 0
2472   0E54 C6 5D 0E      je fs_mkbin_add_to_dir_null
2473   0E57 58 20 00      add d, fst_entry_size
2474   0E5A 0A 52 0E      jmp fs_mkbin_add_to_dir_l2   ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
2475   0E5D             fs_mkbin_add_to_dir_null:
2476   0E5D FD 4D 96 1E   mov si, user_data
2477   0E61 FD 50         mov di, d
2478   0E63 07 57 12      call _strcpy                  ; copy file name
2479   0E66 58 18 00      add d, 24                     ; skip name
2480   0E69 19 03         mov al, %00000011             ; type=file, no execute, write, read, 
2481   0E6B 3E            mov [d], al
2482   0E6C 58 03 00      add d, 3
2483   0E6F E4            pop a
2484   0E70 43            mov [d], a
2485   0E71 63 02 00      sub d, 2
2486   0E74 E5            pop b                         ; get file lba
2487   0E75 FD 43         mov [d], b                    ; save lba
2488   0E77               ; set file creation date  
2489   0E77 58 04 00      add d, 4
2490   0E7A 19 04         mov al, 4
2491   0E7C 05 01         syscall sys_rtc
2492   0E7E 1A            mov al, ah
2493   0E7F 3E            mov [d], al                   ; set day
2494   0E80 79            inc d
2495   0E81 19 05         mov al, 5
2496   0E83 05 01         syscall sys_rtc
2497   0E85 1A            mov al, ah
2498   0E86 3E            mov [d], al                   ; set month
2499   0E87 79            inc d
2500   0E88 19 06         mov al, 6
2501   0E8A 05 01         syscall sys_rtc
2502   0E8C 1A            mov al, ah
2503   0E8D 3E            mov [d], al                   ; set year
2504   0E8E             ; write sector into disk for new directory entry
2505   0E8E FD 27         mov b, g
2506   0E90 38 00 00      mov c, 0
2507   0E93 3B 96 32      mov d, transient_area
2508   0E96 22 01         mov ah, $01                   ; disk write, 1 sector
2509   0E98 07 FB 06      call ide_write_sect           ; write sector
2510   0E9B 19 01         mov al, 1
2511   0E9D 3D 29 19      mov [sys_echo_on], al ; enable echo
2512   0EA0 06            sysret
2513   0EA1             
2514   0EA1             ;------------------------------------------------------------------------------------------------------;
2515   0EA1             ; pwd - print working directory
2516   0EA1             ;------------------------------------------------------------------------------------------------------;    
2517   0EA1             fs_pwd:
2518   0EA1 3B 16 1E      mov d, filename
2519   0EA4 19 00         mov al, 0
2520   0EA6 3E            mov [d], al                   ; initialize path string 
2521   0EA7 14 39 19      mov a, [current_dir_id]
2522   0EAA 07 0B 0A      call fs_dir_id_to_path_e0
2523   0EAD 3B 16 1E      mov d, filename
2524   0EB0 07 EB 11      call _strrev
2525   0EB3 07 FF 13      call _puts
2526   0EB6 07 AC 13      call printnl
2527   0EB9 06            sysret
2528   0EBA             
2529   0EBA             ;------------------------------------------------------------------------------------------------------;
2530   0EBA             ; get current directory lba
2531   0EBA             ; a: returned lba
2532   0EBA             ;------------------------------------------------------------------------------------------------------;
2533   0EBA             cmd_get_curr_dir_lba:
2534   0EBA 14 39 19      mov a, [current_dir_id]
2535   0EBD 06            sysret
2536   0EBE             
2537   0EBE             ;------------------------------------------------------------------------------------------------------;
2538   0EBE             ; cat
2539   0EBE             ; userspace destination data pointer in d
2540   0EBE             ; filename starts at d, but is overwritten after the read is made
2541   0EBE             ;------------------------------------------------------------------------------------------------------;:
2542   0EBE             fs_cat:
2543   0EBE DA            push d                              ; save userspace file data destination
2544   0EBF FD 4E         mov si, d
2545   0EC1 FD 4F 96 1E   mov di, user_data
2546   0EC5 38 00 02      mov c, 512
2547   0EC8 04            load                                ; copy filename from user-space
2548   0EC9 29 39 19      mov b, [current_dir_id]
2549   0ECC FD 77         inc b                               ; metadata sector
2550   0ECE 38 00 00      mov c, 0                            ; upper lba = 0
2551   0ED1 22 01         mov ah, $01                  ; 1 sector
2552   0ED3 3B 96 30      mov d, transient_area-512
2553   0ED6 07 D5 06      call ide_read_sect                  ; read directory
2554   0ED9 FD 10         cla
2555   0EDB 42 31 19      mov [index], a                      ; reset file counter
2556   0EDE             fs_cat_l1:
2557   0EDE FD 4E         mov si, d
2558   0EE0 FD 4F 96 1E   mov di, user_data
2559   0EE4 07 42 12      call _strcmp
2560   0EE7 C6 FD 0E      je fs_cat_found_entry
2561   0EEA 58 20 00      add d, 32
2562   0EED 14 31 19      mov a, [index]
2563   0EF0 77            inc a
2564   0EF1 42 31 19      mov [index], a
2565   0EF4 AF 10 00      cmp a, fst_files_per_dir
2566   0EF7 C6 18 0F      je fs_cat_not_found
2567   0EFA 0A DE 0E      jmp fs_cat_l1
2568   0EFD             fs_cat_found_entry:
2569   0EFD 58 19 00      add d, 25                           ; get to dirid of file in disk
2570   0F00 2A            mov b, [d]                          ; get lba
2571   0F01 FD 77         inc b                               ; add 1 to b because the lba for data comes after the header sector 
2572   0F03 3B 96 32      mov d, transient_area  
2573   0F06 38 00 00      mov c, 0
2574   0F09 22 1F         mov ah, fs_sectors_per_file-1       ; nbr sectors
2575   0F0B 07 D5 06      call ide_read_sect                  ; read sectors
2576   0F0E F0            pop di                              ; write userspace file data destination to di
2577   0F0F FD 4D 96 32   mov si, transient_area              ; data origin
2578   0F13 38 00 3E      mov c, 512*(fs_sectors_per_file-1)
2579   0F16 03            store
2580   0F17 06            sysret
2581   0F18             fs_cat_not_found:
2582   0F18 E7            pop d
2583   0F19 06            sysret
2584   0F1A             
2585   0F1A             ;------------------------------------------------------------------------------------------------------;
2586   0F1A             ; rmdir - remove dir by dirid
2587   0F1A             ;------------------------------------------------------------------------------------------------------;
2588   0F1A             ; deletes a directory entry in the given directory's file list 
2589   0F1A             ; also deletes the actual directory entry in the fst
2590   0F1A             ; synopsis: rmdir /usr/local/testdir
2591   0F1A             ; b = dirid
2592   0F1A             fs_rmdir:
2593   0F1A FD 79         mov g, b
2594   0F1C 11            mov a, b
2595   0F1D 07 47 0A      call get_parentid_from_dirid  ; now get the directory's parent, in a
2596   0F20 D7            push a                        ; save dirid
2597   0F21             ; search for directory's entry in the parent's directory then and delete it
2598   0F21 77            inc a                         ; metadata sector
2599   0F22 27            mov b, a
2600   0F23 38 00 00      mov c, 0                      ; upper lba = 0
2601   0F26 22 01         mov ah, $01          ;
2602   0F28 3B 96 32      mov d, transient_area
2603   0F2B 07 D5 06      call ide_read_sect            ; read directory
2604   0F2E FD 10         cla
2605   0F30 42 31 19      mov [index], a                ; reset file counter
2606   0F33 FD 27         mov b, g                      ; retrieve directory's dirid
2607   0F35             fs_rmdir_l1:
2608   0F35 16 19 00      mov a, [d + 25]               ; get entry's dirid/lba value
2609   0F38 B0            cmp a, b                      ; compare dirid's to find the directory
2610   0F39 C6 4F 0F      je fs_rmdir_found_entry
2611   0F3C 58 20 00      add d, 32
2612   0F3F 14 31 19      mov a, [index]
2613   0F42 77            inc a
2614   0F43 42 31 19      mov [index], a
2615   0F46 AF 10 00      cmp a, fst_files_per_dir
2616   0F49 C6 74 0F      je fs_rmdir_not_found
2617   0F4C 0A 35 0F      jmp fs_rmdir_l1
2618   0F4F             fs_rmdir_found_entry:
2619   0F4F FD 10         cla
2620   0F51 3E            mov [d], al                   ; make filename null
2621   0F52 44 19 00      mov [d + 25], a               ; clear dirid/lba as well not to generate problems with previously deleted directories
2622   0F55 E5            pop b
2623   0F56 FD 77         inc b                         ; metadata sector
2624   0F58 38 00 00      mov c, 0                      ; upper lba = 0
2625   0F5B 22 01         mov ah, $01          ; 
2626   0F5D 3B 96 32      mov d, transient_area
2627   0F60 07 FB 06      call ide_write_sect           ; write sector and erase file's entry in the current dir
2628   0F63             
2629   0F63 FD 27         mov b, g
2630   0F65 3B 96 32      mov d, transient_area  
2631   0F68 FD 10         cla
2632   0F6A 3E            mov [d], al                   ; make directory's name header null for re-use
2633   0F6B 38 00 00      mov c, 0
2634   0F6E 22 01         mov ah, $01                   ; disk write 1 sect
2635   0F70 07 FB 06      call ide_write_sect           ; delete directory given by dirid in b
2636   0F73 06            sysret
2637   0F74             fs_rmdir_not_found:
2638   0F74 E5            pop b
2639   0F75 06            sysret
2640   0F76             
2641   0F76             ;------------------------------------------------------------------------------------------------------;
2642   0F76             ; rm - remove file
2643   0F76             ;------------------------------------------------------------------------------------------------------;
2644   0F76             ; frees up the data sectors for the file further down the disk
2645   0F76             ; deletes file entry in the directory's file list 
2646   0F76             fs_rm:
2647   0F76 FD 4E         mov si, d
2648   0F78 FD 4F 96 1E   mov di, user_data
2649   0F7C 38 00 02      mov c, 512
2650   0F7F 04            load                          ; load data from user-space
2651   0F80 14 39 19      mov a, [current_dir_id]
2652   0F83 77            inc a                         ; metadata sector
2653   0F84 27            mov b, a
2654   0F85 38 00 00      mov c, 0                      ; upper lba = 0
2655   0F88 22 01         mov ah, $01                  ; 1 sector
2656   0F8A 3B 96 32      mov d, transient_area
2657   0F8D 07 D5 06      call ide_read_sect            ; read directory
2658   0F90 10 00 00      mov a, 0
2659   0F93 42 31 19      mov [index], a                ; reset file counter
2660   0F96             fs_rm_l1:
2661   0F96 FD 4E         mov si, d
2662   0F98 FD 4F 96 1E   mov di, user_data
2663   0F9C 07 42 12      call _strcmp
2664   0F9F C6 B5 0F      je fs_rm_found_entry
2665   0FA2 58 20 00      add d, 32
2666   0FA5 14 31 19      mov a, [index]
2667   0FA8 77            inc a
2668   0FA9 42 31 19      mov [index], a
2669   0FAC AF 10 00      cmp a, fst_files_per_dir
2670   0FAF C6 DD 0F      je fs_rm_not_found
2671   0FB2 0A 96 0F      jmp fs_rm_l1
2672   0FB5             fs_rm_found_entry:
2673   0FB5 2B 19 00      mov b, [d + 25]               ; get lba
2674   0FB8 FD 79         mov g, b                      ; save lba
2675   0FBA 19 00         mov al, 0
2676   0FBC 3E            mov [d], al                   ; make file entry null
2677   0FBD 14 39 19      mov a, [current_dir_id]
2678   0FC0 77            inc a                         ; metadata sector
2679   0FC1 27            mov b, a
2680   0FC2 38 00 00      mov c, 0                      ; upper lba = 0
2681   0FC5 22 01         mov ah, $01                   ; disk write
2682   0FC7 3B 96 32      mov d, transient_area
2683   0FCA 07 FB 06      call ide_write_sect           ; write sector and erase file's entry in the current dir
2684   0FCD 3B 96 32      mov d, transient_area  
2685   0FD0 19 00         mov al, 0
2686   0FD2 3E            mov [d], al                   ; make file's data header null for re-use
2687   0FD3 38 00 00      mov c, 0
2688   0FD6 FD 27         mov b, g                      ; get data header lba
2689   0FD8 22 01         mov ah, $01                   ; disk write 1 sect
2690   0FDA 07 FB 06      call ide_write_sect           ; write sector
2691   0FDD             fs_rm_not_found:  
2692   0FDD 06            sysret  
2693   0FDE             
2694   0FDE             ;------------------------------------------------------------------------------------------------------;
2695   0FDE             ; mv - move / change file name
2696   0FDE             ;------------------------------------------------------------------------------------------------------;
2697   0FDE             fs_mv:
2698   0FDE FD 4E         mov si, d
2699   0FE0 FD 4F 96 1E   mov di, user_data
2700   0FE4 38 00 02      mov c, 512
2701   0FE7 04            load                          ; load data from user-space
2702   0FE8 14 39 19      mov a, [current_dir_id]
2703   0FEB 77            inc a                         ; metadata sector
2704   0FEC 27            mov b, a  
2705   0FED 38 00 00      mov c, 0                      ; upper lba = 0
2706   0FF0 22 01         mov ah, $01                  ; 1 sector
2707   0FF2 3B 96 32      mov d, transient_area
2708   0FF5 07 D5 06      call ide_read_sect            ; read directory
2709   0FF8 FD 10         cla
2710   0FFA 42 31 19      mov [index], a                ; reset file counter
2711   0FFD             fs_mv_l1:
2712   0FFD FD 4E         mov si, d
2713   0FFF FD 4F 96 1E   mov di, user_data
2714   1003 07 42 12      call _strcmp
2715   1006 C6 1C 10      je fs_mv_found_entry
2716   1009 58 20 00      add d, 32
2717   100C 14 31 19      mov a, [index]
2718   100F 77            inc a
2719   1010 42 31 19      mov [index], a
2720   1013 AF 10 00      cmp a, fst_files_per_dir
2721   1016 C6 4E 10      je fs_mv_not_found
2722   1019 0A FD 0F      jmp fs_mv_l1
2723   101C             fs_mv_found_entry:  
2724   101C DA            push d
2725   101D FD 4D 16 1F   mov si, user_data + 128       ; (0...127) = original filename , (128...255) = new name
2726   1021 FD 50         mov di, d
2727   1023 07 57 12      call _strcpy  
2728   1026 38 00 00      mov c, 0
2729   1029 3B 96 32      mov d, transient_area
2730   102C 22 01         mov ah, $01                   ; disk write 1 sect
2731   102E 07 FB 06      call ide_write_sect           ; write sector
2732   1031 E7            pop d
2733   1032             ;; need to check whether its a dir or a file here ;;;
2734   1032 2B 19 00      mov b, [d + 25]               ; get the dirid of the directory so we can locate its own entry in the list
2735   1035 22 01         mov ah, $01
2736   1037 3B 96 32      mov d, transient_area
2737   103A 38 00 00      mov c, 0
2738   103D 07 D5 06      call ide_read_sect            ; read directory entry
2739   1040 FD 4D 16 1F   mov si, user_data + 128
2740   1044 FD 50         mov di, d
2741   1046 07 57 12      call _strcpy                  ; change directory's name
2742   1049 22 01         mov ah, $01
2743   104B 07 FB 06      call ide_write_sect           ; rewrite directory back to disk
2744   104E             fs_mv_not_found:
2745   104E 06            sysret
2746   104F             
2747   104F             
2748   104F             ;----------------------------------------------------------------------------------------------------;
2749   104F             ; process index in a
2750   104F             ;----------------------------------------------------------------------------------------------------;
2751   104F             find_free_proc:
2752   104F FD 4D 07 1C   mov si, proc_availab_table + 1      ; skip process 0 (kernel)
2753   1053             find_free_proc_l0:
2754   1053 F6            lodsb                               ; get process state
2755   1054 B9 00         cmp al, 0
2756   1056 C6 5C 10      je find_free_proc_free              ; if free, jump
2757   1059 0A 53 10      jmp find_free_proc_l0               ; else, goto next
2758   105C             find_free_proc_free:
2759   105C 4E            mov a, si
2760   105D 5F 07 1C      sub a, 1 + proc_availab_table       ; get process index
2761   1060 09            ret
2762   1061               
2763   1061             
2764   1061             ;----------------------------------------------------------------------------------------------------;
2765   1061             ; process index in al
2766   1061             ;----------------------------------------------------------------------------------------------------;
2767   1061             proc_memory_map:
2768   1061 22 00         mov ah, 0
2769   1063 27            mov b, a                      ; page in bl, 0 in bh
2770   1064 FD 9D 05      shl a, 5                      ; multiply by 32
2771   1067 39            mov c, a                      ; save in c
2772   1068 57 20 00      add c, 32
2773   106B             proc_memory_map_l0:
2774   106B 02            pagemap
2775   106C 55 00 08      add b, $0800                  ; increase page number (msb 5 bits of bh only)
2776   106F 53 01 00      add a, 1                      ; increase both 
2777   1072 B1            cmp a, c                      ; check to see if we reached the end of memory
2778   1073 C7 6B 10      jne proc_memory_map_l0
2779   1076 09            ret
2780   1077               
2781   1077             
2782   1077             ;----------------------------------------------------------------------------------------------------;
2783   1077             ; terminate process
2784   1077             ;----------------------------------------------------------------------------------------------------;
2785   1077             syscall_terminate_proc:
2786   1077 51 05 00      add sp, 5                            ; clear stack of the values that were pushed by the interrupt (sp, status, pc)
2787   107A                                                    ; since they will not be used for anything here.
2788   107A 1D 30 19      mov al, [active_proc_index]
2789   107D 22 00         mov ah, 0  
2790   107F FD 9D 05      shl a, 5                             ; x32
2791   1082 53 16 1C      add a, proc_names
2792   1085 3C            mov d, a
2793   1086 19 00         mov al, 0
2794   1088 3E            mov [d], al                           ; nullify process name
2795   1089             
2796   1089 1D 30 19      mov al, [active_proc_index]
2797   108C 22 00         mov ah, 0  
2798   108E 3C            mov d, a
2799   108F 19 00         mov al, 0
2800   1091 3F 06 1C      mov [d + proc_availab_table], al    ; make process empty again
2801   1094               
2802   1094 1D 2F 19      mov al, [nbr_active_procs]          ; decrease nbr of active processes
2803   1097 80            dec al
2804   1098 3D 2F 19      mov [nbr_active_procs], al
2805   109B             
2806   109B             ; now load the shell process again
2807   109B 19 02         mov al, 2                           ; next process = process 2 = shell
2808   109D 3D 30 19      mov [active_proc_index], al         ; set next active proc
2809   10A0             
2810   10A0             ; calculate lut entry for next process
2811   10A0 22 00         mov ah, 0
2812   10A2 FD 99         shl a                               ; x2
2813   10A4 B7 6D 11      mov a, [proc_table_convert + a]     ; get process state start index  
2814   10A7               
2815   10A7 4D            mov si, a                           ; source is proc state block
2816   10A8 48            mov a, sp
2817   10A9 5F 13 00      sub a, 19
2818   10AC 4F            mov di, a                           ; destination is kernel stack
2819   10AD             ; restore sp
2820   10AD 7D            dec a
2821   10AE 47            mov sp, a
2822   10AF 38 14 00      mov c, 20
2823   10B2 FD F5         rep movsb
2824   10B4             ; set vm process
2825   10B4 1D 30 19      mov al, [active_proc_index]
2826   10B7 01            setptb
2827   10B8                 
2828   10B8 4C            popa
2829   10B9 06            sysret
2830   10BA             
2831   10BA             ;----------------------------------------------------------------------------------------------------;
2832   10BA             ; pause process
2833   10BA             ;----------------------------------------------------------------------------------------------------;
2834   10BA             syscall_pause_proc:
2835   10BA             ; save all registers into kernel stack
2836   10BA 4B            pusha
2837   10BB 22 00         mov ah, 0
2838   10BD 1D 30 19      mov al, [active_proc_index]
2839   10C0 FD 99         shl a              ; x2
2840   10C2 B7 6D 11      mov a, [proc_table_convert + a]   ; get process state start index
2841   10C5                 
2842   10C5 4F            mov di, a
2843   10C6 48            mov a, sp
2844   10C7 77            inc a
2845   10C8 4D            mov si, a
2846   10C9 38 14 00      mov c, 20
2847   10CC FD F5         rep movsb                         ; save process state!
2848   10CE             ; restore kernel stack position to point before interrupt arrived
2849   10CE 51 14 00      add sp, 20
2850   10D1             ; now load the shell process again
2851   10D1 19 02         mov al, 2                         ; next process = process 2 = shell
2852   10D3 3D 30 19      mov [active_proc_index], al       ; set next active proc
2853   10D6             
2854   10D6             ; calculate lut entry for next process
2855   10D6 22 00         mov ah, 0
2856   10D8 FD 99         shl a                             ; x2
2857   10DA B7 6D 11      mov a, [proc_table_convert + a]   ; get process state start index  
2858   10DD               
2859   10DD 4D            mov si, a                         ; source is proc state block
2860   10DE 48            mov a, sp
2861   10DF 5F 13 00      sub a, 19
2862   10E2 4F            mov di, a                         ; destination is kernel stack
2863   10E3             ; restore sp
2864   10E3 7D            dec a
2865   10E4 47            mov sp, a
2866   10E5 38 14 00      mov c, 20
2867   10E8 FD F5         rep movsb
2868   10EA             ; set vm process
2869   10EA 1D 30 19      mov al, [active_proc_index]
2870   10ED 01            setptb
2871   10EE                 
2872   10EE 4C            popa
2873   10EF 06            sysret
2874   10F0             
2875   10F0             ;----------------------------------------------------------------------------------------------------;
2876   10F0             ; create a new process
2877   10F0             ; d = path of the process file to be createed
2878   10F0             ; b = arguments ptr
2879   10F0             ;----------------------------------------------------------------------------------------------------;
2880   10F0             syscall_create_proc:
2881   10F0             ; we save the active process first  
2882   10F0 4B            pusha
2883   10F1 22 00         mov ah, 0
2884   10F3 1D 30 19      mov al, [active_proc_index]
2885   10F6 FD 99         shl a              ; x2
2886   10F8 B7 6D 11      mov a, [proc_table_convert + a]    ; get process state table's start index
2887   10FB               
2888   10FB 4F            mov di, a
2889   10FC 48            mov a, sp
2890   10FD 77            inc a
2891   10FE 4D            mov si, a
2892   10FF 38 14 00      mov c, 20
2893   1102 FD F5         rep movsb                          ; save process state!
2894   1104             ; restore kernel stack position to point before interrupt arrived
2895   1104 51 14 00      add sp, 20
2896   1107               
2897   1107 FD 4E         mov si, d                          ; copy the file path
2898   1109 FD 4F 96 1E   mov di, user_data
2899   110D 38 00 02      mov c, 512
2900   1110 04            load
2901   1111 11            mov a, b
2902   1112 4D            mov si, a                          ; copy the arguments
2903   1113 FD 4F 96 30   mov di, scrap_sector
2904   1117 38 00 02      mov c, 512
2905   111A 04            load
2906   111B 07 8D 0B      call loadfile_from_path            ; load the process file from disk by path (path is in user_data)
2907   111E                                                  ; the file data is loaded into transient_area
2908   111E             ; now we allocate a new process  
2909   111E 07 4F 10      call find_free_proc                ; index in a
2910   1121 01            setptb 
2911   1122 07 61 10      call proc_memory_map               ; map process memory pages
2912   1125             ; copy arguments into process's memory
2913   1125 FD 4D 96 30   mov si, scrap_sector
2914   1129 FD 4F 00 00   mov di, 0
2915   112D 38 00 02      mov c, 512
2916   1130 03            store
2917   1131             ; now copy process binary data into process's memory
2918   1131 FD 4D 96 32   mov si, transient_area
2919   1135 FD 4F 00 04   mov di, text_org                   ; code origin address for all user processes
2920   1139 38 00 40      mov c, fs_file_size                ; size of memory space to copy, which is equal to the max file size in disk (for now)
2921   113C 03            store                              ; copy process data
2922   113D                 
2923   113D 07 4F 10      call find_free_proc                ; index in a
2924   1140 3D 30 19      mov [active_proc_index], al        ; set new active process
2925   1143 FD 9D 05      shl a, 5                           ; x32
2926   1146 53 16 1C      add a, proc_names
2927   1149 4F            mov di, a
2928   114A FD 4D 96 1E   mov si, user_data                  ; copy and store process filename
2929   114E 07 57 12      call _strcpy
2930   1151               
2931   1151 07 4F 10      call find_free_proc                ; index in a
2932   1154 3C            mov d, a
2933   1155 19 01         mov al, 1
2934   1157 3F 06 1C      mov [d + proc_availab_table], al   ; make process busy
2935   115A               
2936   115A 1D 2F 19      mov al, [nbr_active_procs]         ; increase nbr of active processes
2937   115D 7A            inc al
2938   115E 3D 2F 19      mov [nbr_active_procs], al
2939   1161             ; launch process
2940   1161 FD D7 FF FF   push word $ffff 
2941   1165 FD DB 0E      push byte %00001110                ; dma_ack = 0, interrupts enabled = 1, mode = user, paging = on, halt=0, display_reg_load=0, dir=0
2942   1168 FD D7 00 04   push word text_org
2943   116C 06            sysret
2944   116D             
2945   116D             proc_table_convert:
2946   116D C6 1A         .dw proc_state_table + 0
2947   116F DA 1A         .dw proc_state_table + 20
2948   1171 EE 1A         .dw proc_state_table + 40
2949   1173 02 1B         .dw proc_state_table + 60
2950   1175 16 1B         .dw proc_state_table + 80
2951   1177 2A 1B         .dw proc_state_table + 100
2952   1179 3E 1B         .dw proc_state_table + 120
2953   117B 52 1B         .dw proc_state_table + 140
2954   117D               
2955   117D             ;----------------------------------------------------------------------------------------------;
2956   117D             ; get hex file
2957   117D             ; di = destination address
2958   117D             ; return length in bytes in c
2959   117D             ;----------------------------------------------------------------------------------------------;
2960   117D             _load_hex:
2961   117D D7            push a
2962   117E D8            push b
2963   117F DA            push d
2964   1180 E2            push si
2965   1181 E3            push di
2966   1182 38 00 00      mov c, 0
2967   1185 50            mov a, di
2968   1186 3C            mov d, a          ; start of string data block
2969   1187 07 DA 12      call _gets        ; get program string
2970   118A 4D            mov si, a
2971   118B             __load_hex_loop:
2972   118B F6            lodsb             ; load from [si] to al
2973   118C B9 00         cmp al, 0         ; check if ascii 0
2974   118E C6 9C 11      jz __load_hex_ret
2975   1191 36            mov bh, al
2976   1192 F6            lodsb
2977   1193 2F            mov bl, al
2978   1194 07 90 12      call _atoi        ; convert ascii byte in b to int (to al)
2979   1197 F7            stosb             ; store al to [di]
2980   1198 78            inc c
2981   1199 0A 8B 11      jmp __load_hex_loop
2982   119C             __load_hex_ret:
2983   119C F0            pop di
2984   119D EF            pop si
2985   119E E7            pop d
2986   119F E5            pop b
2987   11A0 E4            pop a
2988   11A1 09            ret
2989   11A2             
2990   11A2             ; synopsis: look inside a certain directory for files/directories
2991   11A2             ; before calling this function, cd into required directory
2992   11A2             ; for each entry inside directory:
2993   11A2             ;  if entry is a file:
2994   11A2             ;    compare filename to searched filename
2995   11A2             ;    if filenames are the same, print filename
2996   11A2             ;  else if entry is a directory:
2997   11A2             ;    cd to the given directory
2998   11A2             ;    recursively call cmd_find
2999   11A2             ;    cd outside previous directory
3000   11A2             ;  if current entry == last entry, return
3001   11A2             ; endfor
3002   11A2             f_find:
3003   11A2 09            ret
3004   11A3             
3005   11A3             
3006   11A3             ; ---------------------------------------------------------------------
3007   11A3             ; kernel reset vector
3008   11A3             ; ---------------------------------------------------------------------
3009   11A3             kernel_reset_vector:  
3010   11A3 FD 49 FF F7   mov bp, _stack_begin
3011   11A7 FD 47 FF F7   mov sp, _stack_begin
3012   11AB               
3013   11AB 19 81         mov al, %10000001             ; mask out timer interrupt for now - enable uart and fdc irqs 
3014   11AD FD 0F         stomsk                        
3015   11AF FD 0C         sti  
3016   11B1             
3017   11B1 0C            lodstat
3018   11B2 87 DF         and al, %11011111             ; disable display register loading
3019   11B4 0D            stostat
3020   11B5               
3021   11B5             ; reset fifo pointers
3022   11B5 10 96 20      mov a, fifo
3023   11B8 3B 35 19      mov d, fifo_in
3024   11BB 43            mov [d], a
3025   11BC 3B 37 19      mov d, fifo_out
3026   11BF 43            mov [d], a  
3027   11C0 19 02         mov al, 2
3028   11C2 05 03         syscall sys_io                ; enable uart in interrupt mode
3029   11C4             
3030   11C4 3B 8A 19      mov d, s_kernel_started
3031   11C7 07 FF 13      call _puts
3032   11CA             
3033   11CA 3B 84 1A      mov d, s_fdc_config
3034   11CD 07 FF 13      call _puts
3035   11D0 F2 C0 FF 0D   mov byte [_fdc_config], %00001101  ; %00001001 : turn led on / head load, disable double density, select side 0, select drive 0, do not select drive 1
3036   11D4 F2 C8 FF 0B   mov byte [_fdc_stat_cmd], %00001011     ; leave this restore command in order to clear BUSY flag
3037   11D8 F2 C9 FF 00   mov byte [_fdc_track], $00 ; reset track
3038   11DC             
3039   11DC 19 10         mov al, 16
3040   11DE 05 04         syscall sys_filesystem        ; set root dirid
3041   11E0             
3042   11E0 3B A7 19      mov d, s_prompt_init
3043   11E3 07 FF 13      call _puts
3044   11E6 3B 3B 19      mov d, s_init_path
3045   11E9 05 05         syscall sys_create_proc       ; launch init as a new process
3046   11EB             
3047   11EB             ; file includes
3048   11EB             .include "bios.exp"         ; to obtain the bios_reset_vector location (for reboots)
0001+  11EB             boot_origin      .EQU  $8004
0002+  11EB             bios_uart        .EQU  $0002
0003+  11EB             bios_ide         .EQU  $0003
0004+  11EB             bios_reset_vector .EQU  $01c0
0005+  11EB             ide_buffer       .EQU  $8204
3049   11EB             .include "lib/stdio.asm"
0001+  11EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  11EB             ; stdio.s
0003+  11EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  11EB             .include "lib/string.asm"
0001++ 11EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 11EB             ; string.s
0003++ 11EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 11EB             
0005++ 11EB             
0006++ 11EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 11EB             ; _strrev
0008++ 11EB             ; reverse a string
0009++ 11EB             ; d = string address
0010++ 11EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 11EB             ; 01234
0012++ 11EB             _strrev:
0013++ 11EB 4B          	pusha
0014++ 11EC 07 32 12    	call _strlen	; length in c
0015++ 11EF 12          	mov a, c
0016++ 11F0 AF 01 00    	cmp a, 1
0017++ 11F3 D0 0D 12    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 11F6 7D          	dec a
0019++ 11F7 FD 4E       	mov si, d	; beginning of string
0020++ 11F9 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 11FB 59          	add d, a	; end of string
0022++ 11FC 12          	mov a, c
0023++ 11FD FD 9B       	shr a		; divide by 2
0024++ 11FF 39          	mov c, a	; c now counts the steps
0025++ 1200             _strrev_l0:
0026++ 1200 32          	mov bl, [d]	; save load right-side char into bl
0027++ 1201 F6          	lodsb		; load left-side char into al; increase si
0028++ 1202 3E          	mov [d], al	; store left char into right side
0029++ 1203 1B          	mov al, bl
0030++ 1204 F7          	stosb		; store right-side char into left-side; increase di
0031++ 1205 7E          	dec c
0032++ 1206 7F          	dec d
0033++ 1207 C2 00 00    	cmp c, 0
0034++ 120A C7 00 12    	jne _strrev_l0
0035++ 120D             _strrev_end:
0036++ 120D 4C          	popa
0037++ 120E 09          	ret
0038++ 120F             	
0039++ 120F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 120F             ; _strchr
0041++ 120F             ; search string in d for char in al
0042++ 120F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 120F             _strchr:
0044++ 120F             _strchr_l0:
0045++ 120F 32          	mov bl, [d]
0046++ 1210 C1 00       	cmp bl, 0
0047++ 1212 C6 1D 12    	je _strchr_end
0048++ 1215 BA          	cmp al, bl
0049++ 1216 C6 1D 12    	je _strchr_end
0050++ 1219 79          	inc d
0051++ 121A 0A 0F 12    	jmp _strchr_l0
0052++ 121D             _strchr_end:
0053++ 121D 1B          	mov al, bl
0054++ 121E 09          	ret
0055++ 121F             
0056++ 121F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 121F             ; _strstr
0058++ 121F             ; find sub-string
0059++ 121F             ; str1 in si
0060++ 121F             ; str2 in di
0061++ 121F             ; si points to end of source string
0062++ 121F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 121F             _strstr:
0064++ 121F DB          	push al
0065++ 1220 DA          	push d
0066++ 1221 E3          	push di
0067++ 1222             _strstr_loop:
0068++ 1222 F3          	cmpsb					; compare a byte of the strings
0069++ 1223 C7 2E 12    	jne _strstr_ret
0070++ 1226 FC 00 00    	lea d, [di + 0]
0071++ 1229 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 122B C7 22 12    	jne _strstr_loop				; equal chars but not at end
0073++ 122E             _strstr_ret:
0074++ 122E F0          	pop di
0075++ 122F E7          	pop d
0076++ 1230 E8          	pop al
0077++ 1231 09          	ret
0078++ 1232             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1232             ; length of null terminated string
0080++ 1232             ; result in c
0081++ 1232             ; pointer in d
0082++ 1232             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1232             _strlen:
0084++ 1232 DA          	push d
0085++ 1233 38 00 00    	mov c, 0
0086++ 1236             _strlen_l1:
0087++ 1236 BD 00       	cmp byte [d], 0
0088++ 1238 C6 40 12    	je _strlen_ret
0089++ 123B 79          	inc d
0090++ 123C 78          	inc c
0091++ 123D 0A 36 12    	jmp _strlen_l1
0092++ 1240             _strlen_ret:
0093++ 1240 E7          	pop d
0094++ 1241 09          	ret
0095++ 1242             
0096++ 1242             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1242             ; strcmp
0098++ 1242             ; compare two strings
0099++ 1242             ; str1 in si
0100++ 1242             ; str2 in di
0101++ 1242             ; create a string compairon instrucion ?????
0102++ 1242             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1242             _strcmp:
0104++ 1242 DB          	push al
0105++ 1243 DA          	push d
0106++ 1244 E3          	push di
0107++ 1245 E2          	push si
0108++ 1246             _strcmp_loop:
0109++ 1246 F3          	cmpsb					; compare a byte of the strings
0110++ 1247 C7 52 12    	jne _strcmp_ret
0111++ 124A FB FF FF    	lea d, [si +- 1]
0112++ 124D BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 124F C7 46 12    	jne _strcmp_loop				; equal chars but not at end
0114++ 1252             _strcmp_ret:
0115++ 1252 EF          	pop si
0116++ 1253 F0          	pop di
0117++ 1254 E7          	pop d
0118++ 1255 E8          	pop al
0119++ 1256 09          	ret
0120++ 1257             
0121++ 1257             
0122++ 1257             ; strcpy
0123++ 1257             ; copy null terminated string from si to di
0124++ 1257             ; source in si
0125++ 1257             ; destination in di
0126++ 1257             _strcpy:
0127++ 1257 E2          	push si
0128++ 1258 E3          	push di
0129++ 1259 DB          	push al
0130++ 125A             _strcpy_l1:
0131++ 125A F6          	lodsb
0132++ 125B F7          	stosb
0133++ 125C B9 00       	cmp al, 0
0134++ 125E C7 5A 12    	jne _strcpy_l1
0135++ 1261             _strcpy_end:
0136++ 1261 E8          	pop al
0137++ 1262 F0          	pop di
0138++ 1263 EF          	pop si
0139++ 1264 09          	ret
0140++ 1265             
0141++ 1265             ; strcat
0142++ 1265             ; concatenate a null terminated string into string at di, from string at si
0143++ 1265             ; source in si
0144++ 1265             ; destination in di
0145++ 1265             _strcat:
0146++ 1265 E2          	push si
0147++ 1266 E3          	push di
0148++ 1267 D7          	push a
0149++ 1268 DA          	push d
0150++ 1269 50          	mov a, di
0151++ 126A 3C          	mov d, a
0152++ 126B             _strcat_goto_end_l1:
0153++ 126B BD 00       	cmp byte[d], 0
0154++ 126D C6 74 12    	je _strcat_start
0155++ 1270 79          	inc d
0156++ 1271 0A 6B 12    	jmp _strcat_goto_end_l1
0157++ 1274             _strcat_start:
0158++ 1274 FD 50       	mov di, d
0159++ 1276             _strcat_l1:
0160++ 1276 F6          	lodsb
0161++ 1277 F7          	stosb
0162++ 1278 B9 00       	cmp al, 0
0163++ 127A C7 76 12    	jne _strcat_l1
0164++ 127D             _strcat_end:
0165++ 127D E7          	pop d
0166++ 127E E4          	pop a
0167++ 127F F0          	pop di
0168++ 1280 EF          	pop si
0169++ 1281 09          	ret
0170++ 1282             
0171++ 1282             
0005+  1282             
0006+  1282             
0007+  1282             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  1282             ; convert ascii 'o'..'f' to integer 0..15
0009+  1282             ; ascii in bl
0010+  1282             ; result in al
0011+  1282             ; ascii for f = 0100 0110
0012+  1282             ; ascii for 9 = 0011 1001
0013+  1282             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  1282             hex_ascii_encode:
0015+  1282 1B            mov al, bl
0016+  1283 93 40         test al, $40        ; test if letter or number
0017+  1285 C7 8B 12      jnz hex_letter
0018+  1288 87 0F         and al, $0f        ; get number
0019+  128A 09            ret
0020+  128B             hex_letter:
0021+  128B 87 0F         and al, $0f        ; get letter
0022+  128D 6A 09         add al, 9
0023+  128F 09            ret
0024+  1290             
0025+  1290             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  1290             ; atoi
0027+  1290             ; 2 letter hex string in b
0028+  1290             ; 8bit integer returned in al
0029+  1290             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  1290             _atoi:
0031+  1290 D8            push b
0032+  1291 07 82 12      call hex_ascii_encode      ; convert bl to 4bit code in al
0033+  1294 30            mov bl, bh
0034+  1295 DB            push al          ; save a
0035+  1296 07 82 12      call hex_ascii_encode
0036+  1299 EA            pop bl  
0037+  129A FD 9E 04      shl al, 4
0038+  129D 8C            or al, bl
0039+  129E E5            pop b
0040+  129F 09            ret  
0041+  12A0             
0042+  12A0             
0043+  12A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  12A0             ; scanf
0045+  12A0             ; no need for explanations!
0046+  12A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  12A0             scanf:
0048+  12A0 09            ret
0049+  12A1             
0050+  12A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  12A1             ; itoa
0052+  12A1             ; 8bit value in bl
0053+  12A1             ; 2 byte ascii result in a
0054+  12A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  12A1             _itoa:
0056+  12A1 DA            push d
0057+  12A2 D8            push b
0058+  12A3 A7 00         mov bh, 0
0059+  12A5 FD A4 04      shr bl, 4  
0060+  12A8 74            mov d, b
0061+  12A9 1F 3B 15      mov al, [d + s_hex_digits]
0062+  12AC 23            mov ah, al
0063+  12AD               
0064+  12AD E5            pop b
0065+  12AE D8            push b
0066+  12AF A7 00         mov bh, 0
0067+  12B1 FD 87 0F      and bl, $0f
0068+  12B4 74            mov d, b
0069+  12B5 1F 3B 15      mov al, [d + s_hex_digits]
0070+  12B8 E5            pop b
0071+  12B9 E7            pop d
0072+  12BA 09            ret
0073+  12BB             
0074+  12BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  12BB             ; hex string to binary
0076+  12BB             ; di = destination address
0077+  12BB             ; si = source
0078+  12BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  12BB             _hex_to_int:
0080+  12BB             _hex_to_int_l1:
0081+  12BB F6            lodsb          ; load from [si] to al
0082+  12BC B9 00         cmp al, 0        ; check if ascii 0
0083+  12BE C6 CB 12      jz _hex_to_int_ret
0084+  12C1 36            mov bh, al
0085+  12C2 F6            lodsb
0086+  12C3 2F            mov bl, al
0087+  12C4 07 90 12      call _atoi        ; convert ascii byte in b to int (to al)
0088+  12C7 F7            stosb          ; store al to [di]
0089+  12C8 0A BB 12      jmp _hex_to_int_l1
0090+  12CB             _hex_to_int_ret:
0091+  12CB 09            ret    
0092+  12CC             
0093+  12CC             
0094+  12CC             
0095+  12CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  12CC             ; getchar
0097+  12CC             ; char in ah
0098+  12CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  12CC             getch:
0100+  12CC DB            push al
0101+  12CD             getch_retry:
0102+  12CD 19 01         mov al, 1
0103+  12CF 05 03         syscall sys_io      ; receive in ah
0104+  12D1 E8            pop al
0105+  12D2 09            ret
0106+  12D3             
0107+  12D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  12D3             ; putchar
0109+  12D3             ; char in ah
0110+  12D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  12D3             _putchar:
0112+  12D3 DB            push al
0113+  12D4 19 00         mov al, 0
0114+  12D6 05 03         syscall sys_io      ; char in ah
0115+  12D8 E8            pop al
0116+  12D9 09            ret
0117+  12DA             
0118+  12DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  12DA             ;; input a string
0120+  12DA             ;; terminates with null
0121+  12DA             ;; pointer in d
0122+  12DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  12DA             _gets:
0124+  12DA D7            push a
0125+  12DB DA            push d
0126+  12DC             _gets_loop:
0127+  12DC 19 01         mov al, 1
0128+  12DE 05 03         syscall sys_io      ; receive in ah
0129+  12E0 76 1B         cmp ah, 27
0130+  12E2 C6 03 13      je _gets_ansi_esc
0131+  12E5 76 0A         cmp ah, $0a        ; lf
0132+  12E7 C6 5F 13      je _gets_end
0133+  12EA 76 0D         cmp ah, $0d        ; cr
0134+  12EC C6 5F 13      je _gets_end
0135+  12EF 76 5C         cmp ah, $5c        ; '\\'
0136+  12F1 C6 25 13      je _gets_escape
0137+  12F4 76 08         cmp ah, $08      ; check for backspace
0138+  12F6 C6 FF 12      je _gets_backspace
0139+  12F9 1A            mov al, ah
0140+  12FA 3E            mov [d], al
0141+  12FB 79            inc d
0142+  12FC 0A DC 12      jmp _gets_loop
0143+  12FF             _gets_backspace:
0144+  12FF 7F            dec d
0145+  1300 0A DC 12      jmp _gets_loop
0146+  1303             _gets_ansi_esc:
0147+  1303 19 01         mov al, 1
0148+  1305 05 03         syscall sys_io        ; receive in ah without echo
0149+  1307 76 5B         cmp ah, '['
0150+  1309 C7 DC 12      jne _gets_loop
0151+  130C 19 01         mov al, 1
0152+  130E 05 03         syscall sys_io          ; receive in ah without echo
0153+  1310 76 64         cmp ah, 'd'
0154+  1312 C6 1D 13      je _gets_left_arrow
0155+  1315 76 63         cmp ah, 'c'
0156+  1317 C6 21 13      je _gets_right_arrow
0157+  131A 0A DC 12      jmp _gets_loop
0158+  131D             _gets_left_arrow:
0159+  131D 7F            dec d
0160+  131E 0A DC 12      jmp _gets_loop
0161+  1321             _gets_right_arrow:
0162+  1321 79            inc d
0163+  1322 0A DC 12      jmp _gets_loop
0164+  1325             _gets_escape:
0165+  1325 19 01         mov al, 1
0166+  1327 05 03         syscall sys_io      ; receive in ah
0167+  1329 76 6E         cmp ah, 'n'
0168+  132B C6 4A 13      je _gets_lf
0169+  132E 76 72         cmp ah, 'r'
0170+  1330 C6 51 13      je _gets_cr
0171+  1333 76 30         cmp ah, '0'
0172+  1335 C6 58 13      je _gets_null
0173+  1338 76 5C         cmp ah, $5c  ; '\'
0174+  133A C6 43 13      je _gets_slash
0175+  133D 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  133E 3E            mov [d], al
0177+  133F 79            inc d
0178+  1340 0A DC 12      jmp _gets_loop
0179+  1343             _gets_slash:
0180+  1343 19 5C         mov al, $5c
0181+  1345 3E            mov [d], al
0182+  1346 79            inc d
0183+  1347 0A DC 12      jmp _gets_loop
0184+  134A             _gets_lf:
0185+  134A 19 0A         mov al, $0a
0186+  134C 3E            mov [d], al
0187+  134D 79            inc d
0188+  134E 0A DC 12      jmp _gets_loop
0189+  1351             _gets_cr:
0190+  1351 19 0D         mov al, $0d
0191+  1353 3E            mov [d], al
0192+  1354 79            inc d
0193+  1355 0A DC 12      jmp _gets_loop
0194+  1358             _gets_null:
0195+  1358 19 00         mov al, $00
0196+  135A 3E            mov [d], al
0197+  135B 79            inc d
0198+  135C 0A DC 12      jmp _gets_loop
0199+  135F             _gets_end:
0200+  135F 19 00         mov al, 0
0201+  1361 3E            mov [d], al        ; terminate string
0202+  1362 E7            pop d
0203+  1363 E4            pop a
0204+  1364 09            ret
0205+  1365             
0206+  1365             
0207+  1365             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  1365             ;; input text
0209+  1365             ;; terminated with ctrl+d
0210+  1365             ;; pointer in d
0211+  1365             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  1365             _gettxt:
0213+  1365 D7            push a
0214+  1366 DA            push d
0215+  1367             _gettxt_loop:
0216+  1367 19 01         mov al, 1
0217+  1369 05 03         syscall sys_io      ; receive in ah
0218+  136B 76 04         cmp ah, 4      ; eot
0219+  136D C6 A6 13      je _gettxt_end
0220+  1370 76 08         cmp ah, $08      ; check for backspace
0221+  1372 C6 A2 13      je _gettxt_backspace
0222+  1375 76 5C         cmp ah, $5c        ; '\'
0223+  1377 C6 80 13      je _gettxt_escape
0224+  137A 1A            mov al, ah
0225+  137B 3E            mov [d], al
0226+  137C 79            inc d
0227+  137D 0A 67 13      jmp _gettxt_loop
0228+  1380             _gettxt_escape:
0229+  1380 19 01         mov al, 1
0230+  1382 05 03         syscall sys_io      ; receive in ah
0231+  1384 76 6E         cmp ah, 'n'
0232+  1386 C6 94 13      je _gettxt_lf
0233+  1389 76 72         cmp ah, 'r'
0234+  138B C6 9B 13      je _gettxt_cr
0235+  138E 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  138F 3E            mov [d], al
0237+  1390 79            inc d
0238+  1391 0A 67 13      jmp _gettxt_loop
0239+  1394             _gettxt_lf:
0240+  1394 19 0A         mov al, $0a
0241+  1396 3E            mov [d], al
0242+  1397 79            inc d
0243+  1398 0A 67 13      jmp _gettxt_loop
0244+  139B             _gettxt_cr:
0245+  139B 19 0D         mov al, $0d
0246+  139D 3E            mov [d], al
0247+  139E 79            inc d
0248+  139F 0A 67 13      jmp _gettxt_loop
0249+  13A2             _gettxt_backspace:
0250+  13A2 7F            dec d
0251+  13A3 0A 67 13      jmp _gettxt_loop
0252+  13A6             _gettxt_end:
0253+  13A6 19 00         mov al, 0
0254+  13A8 3E            mov [d], al        ; terminate string
0255+  13A9 E7            pop d
0256+  13AA E4            pop a
0257+  13AB 09            ret
0258+  13AC             
0259+  13AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  13AC             ; print new line
0261+  13AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  13AC             printnl:
0263+  13AC D7            push a
0264+  13AD 10 00 0A      mov a, $0a00
0265+  13B0 05 03         syscall sys_io
0266+  13B2 10 00 0D      mov a, $0d00
0267+  13B5 05 03         syscall sys_io
0268+  13B7 E4            pop a
0269+  13B8 09            ret
0270+  13B9             
0271+  13B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  13B9             ; _strtoint
0273+  13B9             ; 4 digit hex string number in d
0274+  13B9             ; integer returned in a
0275+  13B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  13B9             _strtointx:
0277+  13B9 D8            push b
0278+  13BA 32            mov bl, [d]
0279+  13BB 37            mov bh, bl
0280+  13BC 33 01 00      mov bl, [d + 1]
0281+  13BF 07 90 12      call _atoi        ; convert to int in al
0282+  13C2 23            mov ah, al        ; move to ah
0283+  13C3 33 02 00      mov bl, [d + 2]
0284+  13C6 37            mov bh, bl
0285+  13C7 33 03 00      mov bl, [d + 3]
0286+  13CA 07 90 12      call _atoi        ; convert to int in al
0287+  13CD E5            pop b
0288+  13CE 09            ret
0289+  13CF             
0290+  13CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  13CF             ; _strtoint
0292+  13CF             ; 5 digit base10 string number in d
0293+  13CF             ; integer returned in a
0294+  13CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  13CF             _strtoint:
0296+  13CF E2            push si
0297+  13D0 D8            push b
0298+  13D1 D9            push c
0299+  13D2 DA            push d
0300+  13D3 07 32 12      call _strlen      ; get string length in c
0301+  13D6 7E            dec c
0302+  13D7 FD 4E         mov si, d
0303+  13D9 12            mov a, c
0304+  13DA FD 99         shl a
0305+  13DC 3B 53 15      mov d, table_power
0306+  13DF 59            add d, a
0307+  13E0 38 00 00      mov c, 0
0308+  13E3             _strtoint_l0:
0309+  13E3 F6            lodsb      ; load ascii to al
0310+  13E4 B9 00         cmp al, 0
0311+  13E6 C6 F9 13      je _strtoint_end
0312+  13E9 6F 30         sub al, $30    ; make into integer
0313+  13EB 22 00         mov ah, 0
0314+  13ED 2A            mov b, [d]
0315+  13EE AC            mul a, b      ; result in b since it fits in 16bits
0316+  13EF 11            mov a, b
0317+  13F0 28            mov b, c
0318+  13F1 54            add a, b
0319+  13F2 39            mov c, a
0320+  13F3 63 02 00      sub d, 2
0321+  13F6 0A E3 13      jmp _strtoint_l0
0322+  13F9             _strtoint_end:
0323+  13F9 12            mov a, c
0324+  13FA E7            pop d
0325+  13FB E6            pop c
0326+  13FC E5            pop b
0327+  13FD EF            pop si
0328+  13FE 09            ret
0329+  13FF             
0330+  13FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  13FF             ; print null terminated string
0332+  13FF             ; pointer in d
0333+  13FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  13FF             _puts:
0335+  13FF D7            push a
0336+  1400 DA            push d
0337+  1401             _puts_l1:
0338+  1401 1E            mov al, [d]
0339+  1402 B9 00         cmp al, 0
0340+  1404 C6 10 14      jz _puts_end
0341+  1407 23            mov ah, al
0342+  1408 19 00         mov al, 0
0343+  140A 05 03         syscall sys_io
0344+  140C 79            inc d
0345+  140D 0A 01 14      jmp _puts_l1
0346+  1410             _puts_end:
0347+  1410 E7            pop d
0348+  1411 E4            pop a
0349+  1412 09            ret
0350+  1413             
0351+  1413             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  1413             ; print n size string
0353+  1413             ; pointer in d
0354+  1413             ; size in c
0355+  1413             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  1413             _putsn:
0357+  1413 DB            push al
0358+  1414 DA            push d
0359+  1415 D9            push c
0360+  1416             _putsn_l0:
0361+  1416 1E            mov al, [d]
0362+  1417 23            mov ah, al
0363+  1418 19 00         mov al, 0
0364+  141A 05 03         syscall sys_io
0365+  141C 79            inc d
0366+  141D 7E            dec c  
0367+  141E C2 00 00      cmp c, 0
0368+  1421 C7 16 14      jne _putsn_l0
0369+  1424             _putsn_end:
0370+  1424 E6            pop c
0371+  1425 E7            pop d
0372+  1426 E8            pop al
0373+  1427 09            ret
0374+  1428             
0375+  1428             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  1428             ; print 16bit decimal number
0377+  1428             ; input number in a
0378+  1428             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  1428             print_u16d:
0380+  1428 D7            push a
0381+  1429 D8            push b
0382+  142A FD D8         push g
0383+  142C 26 10 27      mov b, 10000
0384+  142F AE            div a, b      ; get 10000's coeff.
0385+  1430 07 54 14      call print_number
0386+  1433 11            mov a, b
0387+  1434 26 E8 03      mov b, 1000
0388+  1437 AE            div a, b      ; get 1000's coeff.
0389+  1438 07 54 14      call print_number
0390+  143B 11            mov a, b
0391+  143C 26 64 00      mov b, 100
0392+  143F AE            div a, b
0393+  1440 07 54 14      call print_number
0394+  1443 11            mov a, b
0395+  1444 26 0A 00      mov b, 10
0396+  1447 AE            div a, b
0397+  1448 07 54 14      call print_number
0398+  144B 1B            mov al, bl      ; 1's coeff in bl
0399+  144C 07 54 14      call print_number
0400+  144F FD F1         pop g
0401+  1451 E5            pop b
0402+  1452 E4            pop a
0403+  1453 09            ret
0404+  1454             
0405+  1454             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  1454             ; print al
0407+  1454             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  1454             print_number:
0409+  1454 6A 30         add al, $30
0410+  1456 23            mov ah, al
0411+  1457 07 D3 12      call _putchar
0412+  145A 09            ret
0413+  145B             
0414+  145B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  145B             ; print 16bit hex integer
0416+  145B             ; integer value in reg b
0417+  145B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  145B             print_u16x:
0419+  145B D7            push a
0420+  145C D8            push b
0421+  145D DD            push bl
0422+  145E 30            mov bl, bh
0423+  145F 07 A1 12      call _itoa        ; convert bh to char in a
0424+  1462 2F            mov bl, al        ; save al
0425+  1463 19 00         mov al, 0
0426+  1465 05 03         syscall sys_io        ; display ah
0427+  1467 24            mov ah, bl        ; retrieve al
0428+  1468 19 00         mov al, 0
0429+  146A 05 03         syscall sys_io        ; display al
0430+  146C             
0431+  146C EA            pop bl
0432+  146D 07 A1 12      call _itoa        ; convert bh to char in a
0433+  1470 2F            mov bl, al        ; save al
0434+  1471 19 00         mov al, 0
0435+  1473 05 03         syscall sys_io        ; display ah
0436+  1475 24            mov ah, bl        ; retrieve al
0437+  1476 19 00         mov al, 0
0438+  1478 05 03         syscall sys_io        ; display al
0439+  147A             
0440+  147A E5            pop b
0441+  147B E4            pop a
0442+  147C 09            ret
0443+  147D             
0444+  147D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  147D             ; input 16bit hex integer
0446+  147D             ; read 16bit integer into a
0447+  147D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  147D             scan_u16x:
0449+  147D F8 10 00      enter 16
0450+  1480 D8            push b
0451+  1481 DA            push d
0452+  1482             
0453+  1482 FA F1 FF      lea d, [bp + -15]
0454+  1485 07 DA 12      call _gets        ; get number
0455+  1488             
0456+  1488 32            mov bl, [d]
0457+  1489 37            mov bh, bl
0458+  148A 33 01 00      mov bl, [d + 1]
0459+  148D 07 90 12      call _atoi        ; convert to int in al
0460+  1490 23            mov ah, al        ; move to ah
0461+  1491             
0462+  1491 33 02 00      mov bl, [d + 2]
0463+  1494 37            mov bh, bl
0464+  1495 33 03 00      mov bl, [d + 3]
0465+  1498 07 90 12      call _atoi        ; convert to int in al
0466+  149B             
0467+  149B E7            pop d
0468+  149C E5            pop b
0469+  149D F9            leave
0470+  149E 09            ret
0471+  149F             
0472+  149F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  149F             ; print 8bit hex integer
0474+  149F             ; integer value in reg bl
0475+  149F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  149F             print_u8x:
0477+  149F D7            push a
0478+  14A0 DD            push bl
0479+  14A1             
0480+  14A1 07 A1 12      call _itoa        ; convert bl to char in a
0481+  14A4 2F            mov bl, al        ; save al
0482+  14A5 19 00         mov al, 0
0483+  14A7 05 03         syscall sys_io        ; display ah
0484+  14A9 24            mov ah, bl        ; retrieve al
0485+  14AA 19 00         mov al, 0
0486+  14AC 05 03         syscall sys_io        ; display al
0487+  14AE             
0488+  14AE EA            pop bl
0489+  14AF E4            pop a
0490+  14B0 09            ret
0491+  14B1             
0492+  14B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  14B1             ; print 8bit decimal unsigned number
0494+  14B1             ; input number in al
0495+  14B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  14B1             print_u8d:
0497+  14B1 D7            push a
0498+  14B2 D8            push b
0499+  14B3 FD D8         push g
0500+  14B5 22 00         mov ah, 0
0501+  14B7 26 64 00      mov b, 100
0502+  14BA AE            div a, b
0503+  14BB D8            push b      ; save remainder
0504+  14BC B9 00         cmp al, 0
0505+  14BE C6 C8 14      je skip100
0506+  14C1 6A 30         add al, $30
0507+  14C3 23            mov ah, al
0508+  14C4 19 00         mov al, 0
0509+  14C6 05 03         syscall sys_io  ; print coeff
0510+  14C8             skip100:
0511+  14C8 E4            pop a
0512+  14C9 22 00         mov ah, 0
0513+  14CB 26 0A 00      mov b, 10
0514+  14CE AE            div a, b
0515+  14CF D8            push b      ; save remainder
0516+  14D0 B9 00         cmp al, 0
0517+  14D2 C6 DC 14      je skip10
0518+  14D5 6A 30         add al, $30
0519+  14D7 23            mov ah, al
0520+  14D8 19 00         mov al, 0
0521+  14DA 05 03         syscall sys_io  ; print coeff
0522+  14DC             skip10:
0523+  14DC E4            pop a
0524+  14DD 1B            mov al, bl
0525+  14DE 6A 30         add al, $30
0526+  14E0 23            mov ah, al
0527+  14E1 19 00         mov al, 0
0528+  14E3 05 03         syscall sys_io  ; print coeff
0529+  14E5 FD F1         pop g
0530+  14E7 E5            pop b
0531+  14E8 E4            pop a
0532+  14E9 09            ret
0533+  14EA             
0534+  14EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  14EA             ; input 8bit hex integer
0536+  14EA             ; read 8bit integer into al
0537+  14EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  14EA             scan_u8x:
0539+  14EA F8 04 00      enter 4
0540+  14ED D8            push b
0541+  14EE DA            push d
0542+  14EF             
0543+  14EF FA FD FF      lea d, [bp + -3]
0544+  14F2 07 DA 12      call _gets        ; get number
0545+  14F5             
0546+  14F5 32            mov bl, [d]
0547+  14F6 37            mov bh, bl
0548+  14F7 33 01 00      mov bl, [d + 1]
0549+  14FA 07 90 12      call _atoi        ; convert to int in al
0550+  14FD             
0551+  14FD E7            pop d
0552+  14FE E5            pop b
0553+  14FF F9            leave
0554+  1500 09            ret
0555+  1501             
0556+  1501             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  1501             ; input decimal number
0558+  1501             ; result in a
0559+  1501             ; 655'\0'
0560+  1501             ; low--------high
0561+  1501             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  1501             scan_u16d:
0563+  1501 F8 08 00      enter 8
0564+  1504 E2            push si
0565+  1505 D8            push b
0566+  1506 D9            push c
0567+  1507 DA            push d
0568+  1508 FA F9 FF      lea d, [bp +- 7]
0569+  150B 07 DA 12      call _gets
0570+  150E 07 32 12      call _strlen      ; get string length in c
0571+  1511 7E            dec c
0572+  1512 FD 4E         mov si, d
0573+  1514 12            mov a, c
0574+  1515 FD 99         shl a
0575+  1517 3B 53 15      mov d, table_power
0576+  151A 59            add d, a
0577+  151B 38 00 00      mov c, 0
0578+  151E             mul_loop:
0579+  151E F6            lodsb      ; load ascii to al
0580+  151F B9 00         cmp al, 0
0581+  1521 C6 34 15      je mul_exit
0582+  1524 6F 30         sub al, $30    ; make into integer
0583+  1526 22 00         mov ah, 0
0584+  1528 2A            mov b, [d]
0585+  1529 AC            mul a, b      ; result in b since it fits in 16bits
0586+  152A 11            mov a, b
0587+  152B 28            mov b, c
0588+  152C 54            add a, b
0589+  152D 39            mov c, a
0590+  152E 63 02 00      sub d, 2
0591+  1531 0A 1E 15      jmp mul_loop
0592+  1534             mul_exit:
0593+  1534 12            mov a, c
0594+  1535 E7            pop d
0595+  1536 E6            pop c
0596+  1537 E5            pop b
0597+  1538 EF            pop si
0598+  1539 F9            leave
0599+  153A 09            ret
0600+  153B             
0601+  153B             
0602+  153B 30 31 32 33 s_hex_digits:    .db "0123456789abcdef"  
0602+  153F 34 35 36 37 
0602+  1543 38 39 61 62 
0602+  1547 63 64 65 66 
0603+  154B 1B 5B 32 6A s_telnet_clear:  .db "\033[2j\033[h", 0
0603+  154F 1B 5B 68 00 
0604+  1553             
0605+  1553             table_power:
0606+  1553 01 00         .dw 1
0607+  1555 0A 00         .dw 10
0608+  1557 64 00         .dw 100
0609+  1559 E8 03         .dw 1000
0610+  155B 10 27         .dw 100003050   155D             .include "lib/ctype.asm"
0001+  155D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  155D             ; ctype.s
0003+  155D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  155D             
0005+  155D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  155D             ;; c character classification is an operation provided by a group of functions in the ansi c standard library
0007+  155D             ;; for the c programming language. these functions are used to test characters for membership in a particular
0008+  155D             ;; class of characters, such as alphabetic characters, control characters, etc. both single-byte, and wide
0009+  155D             ;; characters are supported.
0010+  155D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  155D             ;; _isalnum 
0012+  155D             ;; _isalpha 
0013+  155D             ;; islower 
0014+  155D             ;; isupper 
0015+  155D             ;; _isdigit 
0016+  155D             ;; isxdigit
0017+  155D             ;; iscntrl 
0018+  155D             ;; isgraph 
0019+  155D             ;; _isspace 
0020+  155D             ;; isblank 
0021+  155D             ;; isprint 
0022+  155D             ;; ispunct 
0023+  155D             ;; tolower 
0024+  155D             ;; toupper
0025+  155D             
0026+  155D             
0027+  155D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  155D             ;; is alphanumeric
0029+  155D             ;; sets zf according with result
0030+  155D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  155D             _isalnum:
0032+  155D 07 7A 15    	call _isalpha
0033+  1560 C6 66 15    	je _isalnum_exit
0034+  1563 07 67 15    	call _isdigit
0035+  1566             _isalnum_exit:
0036+  1566 09          	ret	
0037+  1567             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  1567             ;; is digit
0039+  1567             ;; sets zf according with result
0040+  1567             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  1567             _isdigit:
0042+  1567 DB          	push al
0043+  1568 B9 30       	cmp al, '0'
0044+  156A C8 76 15    	jlu _isdigit_false
0045+  156D B9 39       	cmp al, '9'
0046+  156F D1 76 15    	jgu _isdigit_false
0047+  1572 87 00       	and al, 0	; set zf
0048+  1574 E8          	pop al
0049+  1575 09          	ret
0050+  1576             _isdigit_false:
0051+  1576 8B 01       	or al, 1	; clear zf
0052+  1578 E8          	pop al
0053+  1579 09          	ret	
0054+  157A             	
0055+  157A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  157A             ;; is alpha
0057+  157A             ;; sets zf according with result
0058+  157A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  157A             _isalpha:
0060+  157A DB          	push al
0061+  157B B9 5F       	cmp al, '_'
0062+  157D C6 9D 15    	je _isalpha_true
0063+  1580 B9 2E       	cmp al, '.'
0064+  1582 C6 9D 15    	je _isalpha_true
0065+  1585 B9 61       	cmp al, 'a'
0066+  1587 C8 99 15    	jlu _isalpha_false
0067+  158A B9 7A       	cmp al, 'z'
0068+  158C D1 99 15    	jgu _isalpha_false
0069+  158F B9 7A       	cmp al, 'z'
0070+  1591 D0 9D 15    	jleu _isalpha_true
0071+  1594 B9 61       	cmp al, 'a'
0072+  1596 C9 9D 15    	jgeu _isalpha_true
0073+  1599             _isalpha_false:
0074+  1599 8B 01       	or al, 1	; clear zf
0075+  159B E8          	pop al
0076+  159C 09          	ret
0077+  159D             _isalpha_true:
0078+  159D 87 00       	and al, 0	; set zf
0079+  159F E8          	pop al
0080+  15A0 09          	ret
0081+  15A1             
0082+  15A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  15A1             ;; is path-alpha
0084+  15A1             ;; sets zf according with result
0085+  15A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  15A1             ispath:
0087+  15A1 DB          	push al
0088+  15A2 07 67 15    	call _isdigit
0089+  15A5 C6 CF 15    	je ispath_true
0090+  15A8 B9 5F       	cmp al, '_'
0091+  15AA C6 CF 15    	je ispath_true
0092+  15AD B9 2F       	cmp al, '/'
0093+  15AF C6 CF 15    	je ispath_true
0094+  15B2 B9 2E       	cmp al, '.'
0095+  15B4 C6 CF 15    	je ispath_true
0096+  15B7 B9 61       	cmp al, 'a'
0097+  15B9 C8 CB 15    	jlu ispath_false
0098+  15BC B9 7A       	cmp al, 'z'
0099+  15BE D1 CB 15    	jgu ispath_false
0100+  15C1 B9 7A       	cmp al, 'z'
0101+  15C3 D0 CF 15    	jleu ispath_true
0102+  15C6 B9 61       	cmp al, 'a'
0103+  15C8 C9 CF 15    	jgeu ispath_true
0104+  15CB             ispath_false:
0105+  15CB 8B 01       	or al, 1	; clear zf
0106+  15CD E8          	pop al
0107+  15CE 09          	ret
0108+  15CF             ispath_true:
0109+  15CF 87 00       	and al, 0	; set zf
0110+  15D1 E8          	pop al
0111+  15D2 09          	ret
0112+  15D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  15D3             ;; is space
0114+  15D3             ;; sets zf according with result
0115+  15D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  15D3             _isspace:
0117+  15D3 B9 20       	cmp al, $20		; ' '
0118+  15D5 C6 E9 15    	je _isspace_exit
0119+  15D8 B9 09       	cmp al, $09		; '\t'
0120+  15DA C6 E9 15    	je _isspace_exit
0121+  15DD B9 0A       	cmp al, $0a		; '\n'
0122+  15DF C6 E9 15    	je _isspace_exit
0123+  15E2 B9 0D       	cmp al, $0d		; '\r'
0124+  15E4 C6 E9 15    	je _isspace_exit
0125+  15E7 B9 0B       	cmp al, $0b		; '\v'
0126+  15E9             _isspace_exit:
0127+  15E9 09          	ret	
0128+  15EA             
0129+  15EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  15EA             ; to lower
0131+  15EA             ; input in al
0132+  15EA             ; output in al
0133+  15EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  15EA             _to_lower:
0135+  15EA B9 7A       	cmp al, 'z'
0136+  15EC D1 F1 15    	jgu _to_lower_ret
0137+  15EF 6A 20       	add al, $20				; convert to lower case
0138+  15F1             _to_lower_ret:
0139+  15F1 09          	ret
0140+  15F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  15F2             ; to upper
0142+  15F2             ; input in al
0143+  15F2             ; output in al
0144+  15F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  15F2             _to_upper:
0146+  15F2 B9 61       	cmp al, 'a'
0147+  15F4 C8 F9 15    	jlu _to_upper_ret
0148+  15F7 6F 20       	sub al, $20			; convert to upper case
0149+  15F9             _to_upper_ret:
0150+  15F9 09          	ret
0151+  15FA             
3051   15FA             .include "lib/token.asm"
0001+  15FA             toktyp_identifier  .equ 0
0002+  15FA             toktyp_keyword     .equ 1
0003+  15FA             toktyp_delimiter   .equ 2
0004+  15FA             toktyp_string      .equ 3
0005+  15FA             toktyp_char        .equ 4
0006+  15FA             toktyp_numeric     .equ 5
0007+  15FA             toktyp_end         .equ 6
0008+  15FA             
0009+  15FA             tok_null           .equ 0
0010+  15FA             tok_fslash         .equ 1
0011+  15FA             tok_times          .equ 2
0012+  15FA             tok_plus           .equ 3
0013+  15FA             tok_minus          .equ 4
0014+  15FA             tok_dot            .equ 5
0015+  15FA             tok_semi           .equ 6
0016+  15FA             tok_angle          .equ 7
0017+  15FA             tok_tilde          .equ 8
0018+  15FA             tok_equal          .equ 9
0019+  15FA             tok_colon          .equ 10
0020+  15FA             tok_comma          .equ 11
0021+  15FA             
0022+  15FA             tok_end            .equ 20
0023+  15FA             
0024+  15FA             
0025+  15FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  15FA             ;; read a full command argment from shell input buffer
0027+  15FA             ;; argument is written into tokstr
0028+  15FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  15FA             get_arg:
0030+  15FA D7            push a
0031+  15FB E2            push si
0032+  15FC E3            push di
0033+  15FD 19 00         mov al, 0
0034+  15FF 3D 28 18      mov [tokstr], al      ; nullify tokstr string
0035+  1602 14 24 18      mov a, [prog]
0036+  1605 4D            mov si, a
0037+  1606 FD 4F 28 18   mov di, tokstr
0038+  160A             get_arg_skip_spaces:
0039+  160A F6            lodsb
0040+  160B 07 D3 15      call _isspace
0041+  160E C6 0A 16      je get_arg_skip_spaces
0042+  1611             get_arg_l0:
0043+  1611 B9 3B         cmp al, $3b        ; check if is ';'
0044+  1613 C6 20 16      je get_arg_end
0045+  1616 B9 00         cmp al, 0
0046+  1618 C6 20 16      je get_arg_end      ; check if end of input
0047+  161B F7            stosb
0048+  161C F6            lodsb
0049+  161D 0A 11 16      jmp get_arg_l0
0050+  1620             get_arg_end:
0051+  1620 19 00         mov al, 0
0052+  1622 F7            stosb
0053+  1623 D5 01 00      sub si, 1
0054+  1626 4E            mov a, si
0055+  1627 42 24 18      mov [prog], a    ; update pointer
0056+  162A F0            pop di
0057+  162B EF            pop si
0058+  162C E4            pop a
0059+  162D 09            ret
0060+  162E             
0061+  162E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  162E             ;; read a path formation from shell input buffer
0063+  162E             ;; path is written into tokstr
0064+  162E             ;; /usr/bin
0065+  162E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  162E             get_path:
0067+  162E D7            push a
0068+  162F E2            push si
0069+  1630 E3            push di
0070+  1631 19 00         mov al, 0
0071+  1633 3D 28 18      mov [tokstr], al      ; nullify tokstr string
0072+  1636 14 24 18      mov a, [prog]
0073+  1639 4D            mov si, a
0074+  163A FD 4F 28 18   mov di, tokstr
0075+  163E             get_path_skip_spaces:
0076+  163E F6            lodsb
0077+  163F 07 D3 15      call _isspace
0078+  1642 C6 3E 16      je get_path_skip_spaces
0079+  1645             get_path_is_pathchar:
0080+  1645 F7            stosb
0081+  1646 F6            lodsb
0082+  1647 07 5D 15      call _isalnum      ;check if is alphanumeric
0083+  164A C6 45 16      je get_path_is_pathchar
0084+  164D B9 2F         cmp al, '/'        ; check if is '/'
0085+  164F C6 45 16      je get_path_is_pathchar
0086+  1652 19 00         mov al, 0
0087+  1654 F7            stosb
0088+  1655 D5 01 00      sub si, 1
0089+  1658 4E            mov a, si
0090+  1659 42 24 18      mov [prog], a    ; update pointer
0091+  165C             get_path_end:
0092+  165C F0            pop di
0093+  165D EF            pop si
0094+  165E E4            pop a
0095+  165F 09            ret
0096+  1660             
0097+  1660             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  1660             ;; read a line
0099+  1660             ;; line is written into tokstr
0100+  1660             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  1660             get_line:
0102+  1660 D7            push a
0103+  1661 E2            push si
0104+  1662 E3            push di
0105+  1663 19 00         mov al, 0
0106+  1665 3D 28 18      mov [tokstr], al      ; nullify tokstr string
0107+  1668 14 24 18      mov a, [prog]
0108+  166B 4D            mov si, a
0109+  166C FD 4F 28 18   mov di, tokstr
0110+  1670             get_line_l0:
0111+  1670 F6            lodsb
0112+  1671 B9 0A         cmp al, $0a    ; check for new line
0113+  1673 C6 7A 16      je get_line_exit
0114+  1676 F7            stosb
0115+  1677 0A 70 16      jmp get_line_l0
0116+  167A             get_line_exit:
0117+  167A 19 00         mov al, 0
0118+  167C F7            stosb
0119+  167D 4E            mov a, si
0120+  167E 42 24 18      mov [prog], a    ; update pointer
0121+  1681 F0            pop di
0122+  1682 EF            pop si
0123+  1683 E4            pop a
0124+  1684 09            ret
0125+  1685             
0126+  1685             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  1685             ;; token parser
0128+  1685             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  1685             get_token:
0130+  1685 D7            push a
0131+  1686 DA            push d
0132+  1687 E2            push si
0133+  1688 E3            push di
0134+  1689 19 00         mov al, 0
0135+  168B 3D 28 18      mov [tokstr], al      ; nullify tokstr string
0136+  168E 19 00         mov al, tok_null
0137+  1690 3D 27 18      mov [tok], al        ; nullify token
0138+  1693 14 24 18      mov a, [prog]
0139+  1696 4D            mov si, a
0140+  1697 FD 4F 28 18   mov di, tokstr
0141+  169B             get_tok_skip_spaces:
0142+  169B F6            lodsb
0143+  169C 07 D3 15      call _isspace
0144+  169F C6 9B 16      je get_tok_skip_spaces
0145+  16A2 B9 00         cmp al, 0      ; check for end of input (null)
0146+  16A4 C6 89 17      je get_token_end
0147+  16A7 B9 23         cmp al, '#'      ; comments!
0148+  16A9 C6 B7 17      je get_tok_comment
0149+  16AC 07 5D 15      call _isalnum
0150+  16AF C6 96 17      jz is_alphanumeric
0151+  16B2             ; other token types
0152+  16B2             get_token_slash:
0153+  16B2 B9 2F         cmp al, '/'        ; check if '/'
0154+  16B4 C7 CC 16      jne get_token_minus
0155+  16B7 F7            stosb          ; store '/' into token string
0156+  16B8 19 00         mov al, 0
0157+  16BA F7            stosb          ; terminate token string
0158+  16BB 19 01         mov al, tok_fslash
0159+  16BD 3D 27 18      mov [tok], al      
0160+  16C0 19 02         mov al, toktyp_delimiter
0161+  16C2 3D 26 18      mov [toktyp], al
0162+  16C5 4E            mov a, si
0163+  16C6 42 24 18      mov [prog], a    ; update pointer
0164+  16C9 0A B2 17      jmp get_token_return
0165+  16CC             get_token_minus:
0166+  16CC B9 2D         cmp al, '-'        ; check if '-'
0167+  16CE C7 E6 16      jne get_token_comma
0168+  16D1 F7            stosb          ; store '-' into token string
0169+  16D2 19 00         mov al, 0
0170+  16D4 F7            stosb          ; terminate token string
0171+  16D5 19 04         mov al, tok_minus
0172+  16D7 3D 27 18      mov [tok], al      
0173+  16DA 19 02         mov al, toktyp_delimiter
0174+  16DC 3D 26 18      mov [toktyp], al
0175+  16DF 4E            mov a, si
0176+  16E0 42 24 18      mov [prog], a    ; update pointer
0177+  16E3 0A B2 17      jmp get_token_return
0178+  16E6             get_token_comma:
0179+  16E6 B9 2C         cmp al, ','        ; check if ','
0180+  16E8 C7 00 17      jne get_token_semi
0181+  16EB F7            stosb          ; store ',' into token string
0182+  16EC 19 00         mov al, 0
0183+  16EE F7            stosb          ; terminate token string
0184+  16EF 19 0B         mov al, tok_comma
0185+  16F1 3D 27 18      mov [tok], al      
0186+  16F4 19 02         mov al, toktyp_delimiter
0187+  16F6 3D 26 18      mov [toktyp], al
0188+  16F9 4E            mov a, si
0189+  16FA 42 24 18      mov [prog], a    ; update pointer
0190+  16FD 0A B2 17      jmp get_token_return
0191+  1700             get_token_semi:
0192+  1700 B9 3B         cmp al, $3b        ; check if ';'
0193+  1702 C7 1A 17      jne get_token_colon
0194+  1705 F7            stosb          ; store ';' into token string
0195+  1706 19 00         mov al, 0
0196+  1708 F7            stosb          ; terminate token string
0197+  1709 19 06         mov al, tok_semi
0198+  170B 3D 27 18      mov [tok], al      
0199+  170E 19 02         mov al, toktyp_delimiter
0200+  1710 3D 26 18      mov [toktyp], al
0201+  1713 4E            mov a, si
0202+  1714 42 24 18      mov [prog], a    ; update pointer
0203+  1717 0A B2 17      jmp get_token_return
0204+  171A             get_token_colon:
0205+  171A B9 3A         cmp al, $3a        ; check if ':'
0206+  171C C7 34 17      jne get_token_angle
0207+  171F F7            stosb          ; store ':' into token string
0208+  1720 19 00         mov al, 0
0209+  1722 F7            stosb          ; terminate token string
0210+  1723 19 0A         mov al, tok_colon
0211+  1725 3D 27 18      mov [tok], al      
0212+  1728 19 02         mov al, toktyp_delimiter
0213+  172A 3D 26 18      mov [toktyp], al
0214+  172D 4E            mov a, si
0215+  172E 42 24 18      mov [prog], a    ; update pointer
0216+  1731 0A B2 17      jmp get_token_return
0217+  1734             get_token_angle:
0218+  1734 B9 3E         cmp al, $3e        ; check if '>'
0219+  1736 C7 4E 17      jne get_token_tilde
0220+  1739 F7            stosb          ; store '>' into token string
0221+  173A 19 00         mov al, 0
0222+  173C F7            stosb          ; terminate token string
0223+  173D 19 07         mov al, tok_angle
0224+  173F 3D 27 18      mov [tok], al      
0225+  1742 19 02         mov al, toktyp_delimiter
0226+  1744 3D 26 18      mov [toktyp], al
0227+  1747 4E            mov a, si
0228+  1748 42 24 18      mov [prog], a    ; update pointer
0229+  174B 0A B2 17      jmp get_token_return
0230+  174E             get_token_tilde:
0231+  174E B9 7E         cmp al, '~'        ; check if '~'
0232+  1750 C7 68 17      jne get_token_equal
0233+  1753 F7            stosb          ; store '~' into token string
0234+  1754 19 00         mov al, 0
0235+  1756 F7            stosb          ; terminate token string
0236+  1757 19 08         mov al, tok_tilde
0237+  1759 3D 27 18      mov [tok], al      
0238+  175C 19 02         mov al, toktyp_delimiter
0239+  175E 3D 26 18      mov [toktyp], al
0240+  1761 4E            mov a, si
0241+  1762 42 24 18      mov [prog], a    ; update pointer
0242+  1765 0A B2 17      jmp get_token_return
0243+  1768             get_token_equal:
0244+  1768 B9 3D         cmp al, '='        ; check if '='
0245+  176A C7 82 17      jne get_token_skip
0246+  176D F7            stosb          ; store '=' into token string
0247+  176E 19 00         mov al, 0
0248+  1770 F7            stosb          ; terminate token string
0249+  1771 19 09         mov al, tok_equal
0250+  1773 3D 27 18      mov [tok], al      
0251+  1776 19 02         mov al, toktyp_delimiter
0252+  1778 3D 26 18      mov [toktyp], al
0253+  177B 4E            mov a, si
0254+  177C 42 24 18      mov [prog], a    ; update pointer
0255+  177F 0A B2 17      jmp get_token_return
0256+  1782             get_token_skip:
0257+  1782 4E            mov a, si
0258+  1783 42 24 18      mov [prog], a    ; update pointer
0259+  1786 0A B2 17      jmp get_token_return
0260+  1789             get_token_end:        ; end of file token
0261+  1789 19 14         mov al, tok_end
0262+  178B 3D 27 18      mov [tok], al
0263+  178E 19 06         mov al, toktyp_end
0264+  1790 3D 26 18      mov [toktyp], al
0265+  1793 0A B2 17      jmp get_token_return
0266+  1796             is_alphanumeric:
0267+  1796 F7            stosb
0268+  1797 F6            lodsb
0269+  1798 07 5D 15      call _isalnum      ;check if is alphanumeric
0270+  179B C6 96 17      jz is_alphanumeric
0271+  179E B9 2E         cmp al, $2e        ; check if is '.'
0272+  17A0 C6 96 17      je is_alphanumeric
0273+  17A3 19 00         mov al, 0
0274+  17A5 F7            stosb
0275+  17A6 19 00         mov al, toktyp_identifier
0276+  17A8 3D 26 18      mov [toktyp], al
0277+  17AB D5 01 00      sub si, 1
0278+  17AE 4E            mov a, si
0279+  17AF 42 24 18      mov [prog], a    ; update pointer
0280+  17B2             get_token_return:
0281+  17B2 F0            pop di
0282+  17B3 EF            pop si
0283+  17B4 E7            pop d
0284+  17B5 E4            pop a
0285+  17B6 09            ret
0286+  17B7             get_tok_comment:
0287+  17B7 F6            lodsb
0288+  17B8 B9 0A         cmp al, $0a      ; new line
0289+  17BA C7 B7 17      jne get_tok_comment
0290+  17BD 0A 9B 16      jmp get_tok_skip_spaces
0291+  17C0             
0292+  17C0             
0293+  17C0             get_number:
0294+  17C0 D7            push a
0295+  17C1 DA            push d
0296+  17C2 E2            push si
0297+  17C3 E3            push di
0298+  17C4 19 00         mov al, 0
0299+  17C6 3D 28 18      mov [tokstr], al      ; nullify tokstr string
0300+  17C9 19 00         mov al, tok_null
0301+  17CB 3D 27 18      mov [tok], al        ; nullify token
0302+  17CE 14 24 18      mov a, [prog]
0303+  17D1 4D            mov si, a
0304+  17D2 FD 4F 28 18   mov di, tokstr
0305+  17D6             get_number_skip_spaces:
0306+  17D6 F6            lodsb
0307+  17D7 07 D3 15      call _isspace
0308+  17DA C6 D6 17      je get_number_skip_spaces
0309+  17DD B9 00         cmp al, 0      ; check for end of input (null)
0310+  17DF C7 EF 17      jne get_number_l0
0311+  17E2 19 14         mov al, tok_end
0312+  17E4 3D 27 18      mov [tok], al
0313+  17E7 19 06         mov al, toktyp_end
0314+  17E9 3D 26 18      mov [toktyp], al
0315+  17EC 0A 06 18      jmp get_number_return
0316+  17EF             get_number_l0:
0317+  17EF F7            stosb
0318+  17F0 F6            lodsb
0319+  17F1 07 67 15      call _isdigit      ;check if is numeric
0320+  17F4 C6 EF 17      jz get_number_l0
0321+  17F7 19 00         mov al, 0
0322+  17F9 F7            stosb
0323+  17FA 19 05         mov al, toktyp_numeric
0324+  17FC 3D 26 18      mov [toktyp], al
0325+  17FF D5 01 00      sub si, 1
0326+  1802 4E            mov a, si
0327+  1803 42 24 18      mov [prog], a    ; update pointer
0328+  1806             get_number_return:
0329+  1806 F0            pop di
0330+  1807 EF            pop si
0331+  1808 E7            pop d
0332+  1809 E4            pop a
0333+  180A 09            ret
0334+  180B             
0335+  180B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  180B             ;; put back token
0337+  180B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0338+  180B             _putback:
0339+  180B D7            push a
0340+  180C E2            push si
0341+  180D FD 4D 28 18   mov si, tokstr  
0342+  1811             _putback_loop:
0343+  1811 F6            lodsb
0344+  1812 B9 00         cmp al, 0
0345+  1814 C6 21 18      je _putback_end
0346+  1817 14 24 18      mov a, [prog]
0347+  181A 7D            dec a
0348+  181B 42 24 18      mov [prog], a      ; update pointer
0349+  181E 0A 11 18      jmp _putback_loop
0350+  1821             _putback_end:
0351+  1821 EF            pop si
0352+  1822 E4            pop a
0353+  1823 09            ret
0354+  1824             
0355+  1824             
0356+  1824             
0357+  1824             
0358+  1824 00 00       prog:      .dw 0          ; pointer to current position in buffer
0359+  1826             
0360+  1826 00          toktyp:    .db 0          ; token type symbol
0361+  1827 00          tok:       .db 0          ; current token symbol
0362+  1828 00 00 00 00 tokstr:    .fill 256, 0   ; token as a string
0362+  182C 00 00 00 00 
0362+  1830 00 00 00 00 
0362+  1834 00 00 00 00 
0362+  1838 00 00 00 00 
0362+  183C 00 00 00 00 
0362+  1840 00 00 00 00 
0362+  1844 00 00 00 00 
0362+  1848 00 00 00 00 
0362+  184C 00 00 00 00 
0362+  1850 00 00 00 00 
0362+  1854 00 00 00 00 
0362+  1858 00 00 00 00 
0362+  185C 00 00 00 00 
0362+  1860 00 00 00 00 
0362+  1864 00 00 00 00 
0362+  1868 00 00 00 00 
0362+  186C 00 00 00 00 
0362+  1870 00 00 00 00 
0362+  1874 00 00 00 00 
0362+  1878 00 00 00 00 
0362+  187C 00 00 00 00 
0362+  1880 00 00 00 00 
0362+  1884 00 00 00 00 
0362+  1888 00 00 00 00 
0362+  188C 00 00 00 00 
0362+  1890 00 00 00 00 
0362+  1894 00 00 00 00 
0362+  1898 00 00 00 00 
0362+  189C 00 00 00 00 
0362+  18A0 00 00 00 00 
0362+  18A4 00 00 00 00 
0362+  18A8 00 00 00 00 
0362+  18AC 00 00 00 00 
0362+  18B0 00 00 00 00 
0362+  18B4 00 00 00 00 
0362+  18B8 00 00 00 00 
0362+  18BC 00 00 00 00 
0362+  18C0 00 00 00 00 
0362+  18C4 00 00 00 00 
0362+  18C8 00 00 00 00 
0362+  18CC 00 00 00 00 
0362+  18D0 00 00 00 00 
0362+  18D4 00 00 00 00 
0362+  18D8 00 00 00 00 
0362+  18DC 00 00 00 00 
0362+  18E0 00 00 00 00 
0362+  18E4 00 00 00 00 
0362+  18E8 00 00 00 00 
0362+  18EC 00 00 00 00 
0362+  18F0 00 00 00 00 
0362+  18F4 00 00 00 00 
0362+  18F8 00 00 00 00 
0362+  18FC 00 00 00 00 
0362+  1900 00 00 00 00 
0362+  1904 00 00 00 00 
0362+  1908 00 00 00 00 
0362+  190C 00 00 00 00 
0362+  1910 00 00 00 00 
0362+  1914 00 00 00 00 
0362+  1918 00 00 00 00 
0362+  191C 00 00 00 00 
0362+  1920 00 00 00 00 
0362+  1924 00 00 00 00 
3052   1928             
3053   1928             ; kernel parameters
3054   1928             sys_debug_mode:
3055   1928 00            .db 0   ; debug modes: 0=normal mode, 1=debug mode
3056   1929             sys_echo_on:
3057   1929 01            .db 1
3058   192A             sys_uart0_lcr:
3059   192A 0F            .db %00001111 ; 8 data bits, 2 stop bits, enable parity, odd parity
3060   192B             sys_uart0_inten:
3061   192B 01            .db 1
3062   192C             sys_uart0_fifoen:
3063   192C 00            .db 0
3064   192D             sys_uart0_div0:
3065   192D 03            .db 3
3066   192E             sys_uart0_div1:
3067   192E 00            .db 0   ; default baud = 38400
3068   192F             ; baud  divisor
3069   192F             ; 50    2304
3070   192F             ; 110   1047
3071   192F             ; 300    384
3072   192F             ; 600    192
3073   192F             ; 1200    96
3074   192F             ; 9600    12
3075   192F             ; 19200    6
3076   192F             ; 38400    3
3077   192F             
3078   192F             nbr_active_procs:
3079   192F 00            .db 0
3080   1930             active_proc_index:
3081   1930 01            .db 1
3082   1931             
3083   1931             index:
3084   1931 00 00         .dw 0
3085   1933             buffer_addr:
3086   1933 00 00         .dw 0
3087   1935             
3088   1935             fifo_in:
3089   1935 96 20         .dw fifo
3090   1937             fifo_out:
3091   1937 96 20         .dw fifo
3092   1939             
3093   1939             ; file system variables
3094   1939             current_dir_id:
3095   1939 00 00         .dw 0     ; keep dirid of current directory
3096   193B             s_init_path:
3097   193B 2F 73 62 69   .db "/sbin/init", 0
3097   193F 6E 2F 69 6E 
3097   1943 69 74 00 
3098   1946             
3099   1946             s_uname:
3100   1946 73 6F 6C 61   .db "solarium v.1.0", 0
3100   194A 72 69 75 6D 
3100   194E 20 76 2E 31 
3100   1952 2E 30 00 
3101   1955             s_dataentry:
3102   1955 3E 20 00      .db "> ", 0
3103   1958             s_parent_dir:
3104   1958 2E 2E 00      .db "..", 0
3105   195B             s_current_dir:
3106   195B 2E 00         .db ".", 0
3107   195D             s_fslash:
3108   195D 2F 00         .db "/", 0
3109   195F             file_attrib:
3110   195F 2D 72 77 20   .db "-rw x"      ; chars at powers of 2
3110   1963 78 
3111   1964             file_type:
3112   1964 2D 64 63      .db "-dc"
3113   1967             s_ps_header:
3114   1967 70 69 64 20   .db "pid command\n", 0
3114   196B 63 6F 6D 6D 
3114   196F 61 6E 64 0A 
3114   1973 00 
3115   1974             s_ls_total:
3116   1974 74 6F 74 61   .db "total: ", 0
3116   1978 6C 3A 20 00 
3117   197C             
3118   197C             s_int_en:
3119   197C 69 72 71 73   .db "irqs enabled\n", 0
3119   1980 20 65 6E 61 
3119   1984 62 6C 65 64 
3119   1988 0A 00 
3120   198A             s_kernel_started:
3121   198A 6B 65 72 6E   .db "kernel started(version 1.0)\n", 0
3121   198E 65 6C 20 73 
3121   1992 74 61 72 74 
3121   1996 65 64 28 76 
3121   199A 65 72 73 69 
3121   199E 6F 6E 20 31 
3121   19A2 2E 30 29 0A 
3121   19A6 00 
3122   19A7             s_prompt_init:
3123   19A7 73 74 61 72   .db "starting init\n", 0
3123   19AB 74 69 6E 67 
3123   19AF 20 69 6E 69 
3123   19B3 74 0A 00 
3124   19B6             s_priviledge:
3125   19B6 0A 65 78 63   .db "\nexception: privilege\n", 0
3125   19BA 65 70 74 69 
3125   19BE 6F 6E 3A 20 
3125   19C2 70 72 69 76 
3125   19C6 69 6C 65 67 
3125   19CA 65 0A 00 
3126   19CD             s_divzero:
3127   19CD 0A 65 78 63   .db "\nexception: zero division\n", 0
3127   19D1 65 70 74 69 
3127   19D5 6F 6E 3A 20 
3127   19D9 7A 65 72 6F 
3127   19DD 20 64 69 76 
3127   19E1 69 73 69 6F 
3127   19E5 6E 0A 00 
3128   19E8             
3129   19E8             s_set_year:
3130   19E8 79 65 61 72   .db "year: ", 0
3130   19EC 3A 20 00 
3131   19EF             s_set_month:
3132   19EF 6D 6F 6E 74   .db "month: ", 0
3132   19F3 68 3A 20 00 
3133   19F7             s_set_day:
3134   19F7 64 61 79 3A   .db "day: ", 0
3134   19FB 20 00 
3135   19FD             s_set_week:
3136   19FD 77 65 65 6B   .db "weekday: ", 0
3136   1A01 64 61 79 3A 
3136   1A05 20 00 
3137   1A07             s_set_hours:
3138   1A07 68 6F 75 72   .db "hours: ", 0
3138   1A0B 73 3A 20 00 
3139   1A0F             s_set_minutes:
3140   1A0F 6D 69 6E 75   .db "minutes: ", 0
3140   1A13 74 65 73 3A 
3140   1A17 20 00 
3141   1A19             s_set_seconds:
3142   1A19 73 65 63 6F   .db "seconds: ", 0
3142   1A1D 6E 64 73 3A 
3142   1A21 20 00 
3143   1A23             s_months:      
3144   1A23 20 20 20 00   .db "   ", 0
3145   1A27 6A 61 6E 00   .db "jan", 0
3146   1A2B 66 65 62 00   .db "feb", 0
3147   1A2F 6D 61 72 00   .db "mar", 0
3148   1A33 61 70 72 00   .db "apr", 0
3149   1A37 6D 61 79 00   .db "may", 0
3150   1A3B 6A 75 6E 00   .db "jun", 0
3151   1A3F 6A 75 6C 00   .db "jul", 0
3152   1A43 61 75 67 00   .db "aug", 0
3153   1A47 73 65 70 00   .db "sep", 0
3154   1A4B 6F 63 74 00   .db "oct", 0
3155   1A4F 6E 6F 76 00   .db "nov", 0
3156   1A53 64 65 63 00   .db "dec", 0
3157   1A57             
3158   1A57             s_week:        
3159   1A57 73 75 6E 00   .db "sun", 0 
3160   1A5B 6D 6F 6E 00   .db "mon", 0 
3161   1A5F 74 75 65 00   .db "tue", 0 
3162   1A63 77 65 64 00   .db "wed", 0 
3163   1A67 74 68 75 00   .db "thu", 0 
3164   1A6B 66 72 69 00   .db "fri", 0 
3165   1A6F 73 61 74 00   .db "sat", 0
3166   1A73             
3167   1A73 0A 49 52 51 s_fdc_irq: .db "\nIRQ0 Executed.\n", 0
3167   1A77 30 20 45 78 
3167   1A7B 65 63 75 74 
3167   1A7F 65 64 2E 0A 
3167   1A83 00 
3168   1A84             s_fdc_config:
3169   1A84 0A 73 65 6C   .db "\nselecting diskette drive 0, side 0, single density, head loaded\n", 0
3169   1A88 65 63 74 69 
3169   1A8C 6E 67 20 64 
3169   1A90 69 73 6B 65 
3169   1A94 74 74 65 20 
3169   1A98 64 72 69 76 
3169   1A9C 65 20 30 2C 
3169   1AA0 20 73 69 64 
3169   1AA4 65 20 30 2C 
3169   1AA8 20 73 69 6E 
3169   1AAC 67 6C 65 20 
3169   1AB0 64 65 6E 73 
3169   1AB4 69 74 79 2C 
3169   1AB8 20 68 65 61 
3169   1ABC 64 20 6C 6F 
3169   1AC0 61 64 65 64 
3169   1AC4 0A 00 
3170   1AC6             
3171   1AC6             proc_state_table:   
3172   1AC6 00 00 00 00   .fill 16 * 20, 0  ; for 15 processes max
3172   1ACA 00 00 00 00 
3172   1ACE 00 00 00 00 
3172   1AD2 00 00 00 00 
3172   1AD6 00 00 00 00 
3172   1ADA 00 00 00 00 
3172   1ADE 00 00 00 00 
3172   1AE2 00 00 00 00 
3172   1AE6 00 00 00 00 
3172   1AEA 00 00 00 00 
3172   1AEE 00 00 00 00 
3172   1AF2 00 00 00 00 
3172   1AF6 00 00 00 00 
3172   1AFA 00 00 00 00 
3172   1AFE 00 00 00 00 
3172   1B02 00 00 00 00 
3172   1B06 00 00 00 00 
3172   1B0A 00 00 00 00 
3172   1B0E 00 00 00 00 
3172   1B12 00 00 00 00 
3172   1B16 00 00 00 00 
3172   1B1A 00 00 00 00 
3172   1B1E 00 00 00 00 
3172   1B22 00 00 00 00 
3172   1B26 00 00 00 00 
3172   1B2A 00 00 00 00 
3172   1B2E 00 00 00 00 
3172   1B32 00 00 00 00 
3172   1B36 00 00 00 00 
3172   1B3A 00 00 00 00 
3172   1B3E 00 00 00 00 
3172   1B42 00 00 00 00 
3172   1B46 00 00 00 00 
3172   1B4A 00 00 00 00 
3172   1B4E 00 00 00 00 
3172   1B52 00 00 00 00 
3172   1B56 00 00 00 00 
3172   1B5A 00 00 00 00 
3172   1B5E 00 00 00 00 
3172   1B62 00 00 00 00 
3172   1B66 00 00 00 00 
3172   1B6A 00 00 00 00 
3172   1B6E 00 00 00 00 
3172   1B72 00 00 00 00 
3172   1B76 00 00 00 00 
3172   1B7A 00 00 00 00 
3172   1B7E 00 00 00 00 
3172   1B82 00 00 00 00 
3172   1B86 00 00 00 00 
3172   1B8A 00 00 00 00 
3172   1B8E 00 00 00 00 
3172   1B92 00 00 00 00 
3172   1B96 00 00 00 00 
3172   1B9A 00 00 00 00 
3172   1B9E 00 00 00 00 
3172   1BA2 00 00 00 00 
3172   1BA6 00 00 00 00 
3172   1BAA 00 00 00 00 
3172   1BAE 00 00 00 00 
3172   1BB2 00 00 00 00 
3172   1BB6 00 00 00 00 
3172   1BBA 00 00 00 00 
3172   1BBE 00 00 00 00 
3172   1BC2 00 00 00 00 
3172   1BC6 00 00 00 00 
3172   1BCA 00 00 00 00 
3172   1BCE 00 00 00 00 
3172   1BD2 00 00 00 00 
3172   1BD6 00 00 00 00 
3172   1BDA 00 00 00 00 
3172   1BDE 00 00 00 00 
3172   1BE2 00 00 00 00 
3172   1BE6 00 00 00 00 
3172   1BEA 00 00 00 00 
3172   1BEE 00 00 00 00 
3172   1BF2 00 00 00 00 
3172   1BF6 00 00 00 00 
3172   1BFA 00 00 00 00 
3172   1BFE 00 00 00 00 
3172   1C02 00 00 00 00 
3173   1C06             proc_availab_table: 
3174   1C06 00 00 00 00   .fill 16, 0       ; space for 15 processes. 0 = process empty, 1 = process taken
3174   1C0A 00 00 00 00 
3174   1C0E 00 00 00 00 
3174   1C12 00 00 00 00 
3175   1C16             proc_names:
3176   1C16 00 00 00 00   .fill 16 * 32, 0  ; process names
3176   1C1A 00 00 00 00 
3176   1C1E 00 00 00 00 
3176   1C22 00 00 00 00 
3176   1C26 00 00 00 00 
3176   1C2A 00 00 00 00 
3176   1C2E 00 00 00 00 
3176   1C32 00 00 00 00 
3176   1C36 00 00 00 00 
3176   1C3A 00 00 00 00 
3176   1C3E 00 00 00 00 
3176   1C42 00 00 00 00 
3176   1C46 00 00 00 00 
3176   1C4A 00 00 00 00 
3176   1C4E 00 00 00 00 
3176   1C52 00 00 00 00 
3176   1C56 00 00 00 00 
3176   1C5A 00 00 00 00 
3176   1C5E 00 00 00 00 
3176   1C62 00 00 00 00 
3176   1C66 00 00 00 00 
3176   1C6A 00 00 00 00 
3176   1C6E 00 00 00 00 
3176   1C72 00 00 00 00 
3176   1C76 00 00 00 00 
3176   1C7A 00 00 00 00 
3176   1C7E 00 00 00 00 
3176   1C82 00 00 00 00 
3176   1C86 00 00 00 00 
3176   1C8A 00 00 00 00 
3176   1C8E 00 00 00 00 
3176   1C92 00 00 00 00 
3176   1C96 00 00 00 00 
3176   1C9A 00 00 00 00 
3176   1C9E 00 00 00 00 
3176   1CA2 00 00 00 00 
3176   1CA6 00 00 00 00 
3176   1CAA 00 00 00 00 
3176   1CAE 00 00 00 00 
3176   1CB2 00 00 00 00 
3176   1CB6 00 00 00 00 
3176   1CBA 00 00 00 00 
3176   1CBE 00 00 00 00 
3176   1CC2 00 00 00 00 
3176   1CC6 00 00 00 00 
3176   1CCA 00 00 00 00 
3176   1CCE 00 00 00 00 
3176   1CD2 00 00 00 00 
3176   1CD6 00 00 00 00 
3176   1CDA 00 00 00 00 
3176   1CDE 00 00 00 00 
3176   1CE2 00 00 00 00 
3176   1CE6 00 00 00 00 
3176   1CEA 00 00 00 00 
3176   1CEE 00 00 00 00 
3176   1CF2 00 00 00 00 
3176   1CF6 00 00 00 00 
3176   1CFA 00 00 00 00 
3176   1CFE 00 00 00 00 
3176   1D02 00 00 00 00 
3176   1D06 00 00 00 00 
3176   1D0A 00 00 00 00 
3176   1D0E 00 00 00 00 
3176   1D12 00 00 00 00 
3176   1D16 00 00 00 00 
3176   1D1A 00 00 00 00 
3176   1D1E 00 00 00 00 
3176   1D22 00 00 00 00 
3176   1D26 00 00 00 00 
3176   1D2A 00 00 00 00 
3176   1D2E 00 00 00 00 
3176   1D32 00 00 00 00 
3176   1D36 00 00 00 00 
3176   1D3A 00 00 00 00 
3176   1D3E 00 00 00 00 
3176   1D42 00 00 00 00 
3176   1D46 00 00 00 00 
3176   1D4A 00 00 00 00 
3176   1D4E 00 00 00 00 
3176   1D52 00 00 00 00 
3176   1D56 00 00 00 00 
3176   1D5A 00 00 00 00 
3176   1D5E 00 00 00 00 
3176   1D62 00 00 00 00 
3176   1D66 00 00 00 00 
3176   1D6A 00 00 00 00 
3176   1D6E 00 00 00 00 
3176   1D72 00 00 00 00 
3176   1D76 00 00 00 00 
3176   1D7A 00 00 00 00 
3176   1D7E 00 00 00 00 
3176   1D82 00 00 00 00 
3176   1D86 00 00 00 00 
3176   1D8A 00 00 00 00 
3176   1D8E 00 00 00 00 
3176   1D92 00 00 00 00 
3176   1D96 00 00 00 00 
3176   1D9A 00 00 00 00 
3176   1D9E 00 00 00 00 
3176   1DA2 00 00 00 00 
3176   1DA6 00 00 00 00 
3176   1DAA 00 00 00 00 
3176   1DAE 00 00 00 00 
3176   1DB2 00 00 00 00 
3176   1DB6 00 00 00 00 
3176   1DBA 00 00 00 00 
3176   1DBE 00 00 00 00 
3176   1DC2 00 00 00 00 
3176   1DC6 00 00 00 00 
3176   1DCA 00 00 00 00 
3176   1DCE 00 00 00 00 
3176   1DD2 00 00 00 00 
3176   1DD6 00 00 00 00 
3176   1DDA 00 00 00 00 
3176   1DDE 00 00 00 00 
3176   1DE2 00 00 00 00 
3176   1DE6 00 00 00 00 
3176   1DEA 00 00 00 00 
3176   1DEE 00 00 00 00 
3176   1DF2 00 00 00 00 
3176   1DF6 00 00 00 00 
3176   1DFA 00 00 00 00 
3176   1DFE 00 00 00 00 
3176   1E02 00 00 00 00 
3176   1E06 00 00 00 00 
3176   1E0A 00 00 00 00 
3176   1E0E 00 00 00 00 
3176   1E12 00 00 00 00 
3177   1E16             filename:
3178   1E16 00 00 00 00   .fill 128, 0      ; holds a path for file search
3178   1E1A 00 00 00 00 
3178   1E1E 00 00 00 00 
3178   1E22 00 00 00 00 
3178   1E26 00 00 00 00 
3178   1E2A 00 00 00 00 
3178   1E2E 00 00 00 00 
3178   1E32 00 00 00 00 
3178   1E36 00 00 00 00 
3178   1E3A 00 00 00 00 
3178   1E3E 00 00 00 00 
3178   1E42 00 00 00 00 
3178   1E46 00 00 00 00 
3178   1E4A 00 00 00 00 
3178   1E4E 00 00 00 00 
3178   1E52 00 00 00 00 
3178   1E56 00 00 00 00 
3178   1E5A 00 00 00 00 
3178   1E5E 00 00 00 00 
3178   1E62 00 00 00 00 
3178   1E66 00 00 00 00 
3178   1E6A 00 00 00 00 
3178   1E6E 00 00 00 00 
3178   1E72 00 00 00 00 
3178   1E76 00 00 00 00 
3178   1E7A 00 00 00 00 
3178   1E7E 00 00 00 00 
3178   1E82 00 00 00 00 
3178   1E86 00 00 00 00 
3178   1E8A 00 00 00 00 
3178   1E8E 00 00 00 00 
3178   1E92 00 00 00 00 
3179   1E96             user_data:
3180   1E96 00 00 00 00   .fill 512, 0      ;  user space data
3180   1E9A 00 00 00 00 
3180   1E9E 00 00 00 00 
3180   1EA2 00 00 00 00 
3180   1EA6 00 00 00 00 
3180   1EAA 00 00 00 00 
3180   1EAE 00 00 00 00 
3180   1EB2 00 00 00 00 
3180   1EB6 00 00 00 00 
3180   1EBA 00 00 00 00 
3180   1EBE 00 00 00 00 
3180   1EC2 00 00 00 00 
3180   1EC6 00 00 00 00 
3180   1ECA 00 00 00 00 
3180   1ECE 00 00 00 00 
3180   1ED2 00 00 00 00 
3180   1ED6 00 00 00 00 
3180   1EDA 00 00 00 00 
3180   1EDE 00 00 00 00 
3180   1EE2 00 00 00 00 
3180   1EE6 00 00 00 00 
3180   1EEA 00 00 00 00 
3180   1EEE 00 00 00 00 
3180   1EF2 00 00 00 00 
3180   1EF6 00 00 00 00 
3180   1EFA 00 00 00 00 
3180   1EFE 00 00 00 00 
3180   1F02 00 00 00 00 
3180   1F06 00 00 00 00 
3180   1F0A 00 00 00 00 
3180   1F0E 00 00 00 00 
3180   1F12 00 00 00 00 
3180   1F16 00 00 00 00 
3180   1F1A 00 00 00 00 
3180   1F1E 00 00 00 00 
3180   1F22 00 00 00 00 
3180   1F26 00 00 00 00 
3180   1F2A 00 00 00 00 
3180   1F2E 00 00 00 00 
3180   1F32 00 00 00 00 
3180   1F36 00 00 00 00 
3180   1F3A 00 00 00 00 
3180   1F3E 00 00 00 00 
3180   1F42 00 00 00 00 
3180   1F46 00 00 00 00 
3180   1F4A 00 00 00 00 
3180   1F4E 00 00 00 00 
3180   1F52 00 00 00 00 
3180   1F56 00 00 00 00 
3180   1F5A 00 00 00 00 
3180   1F5E 00 00 00 00 
3180   1F62 00 00 00 00 
3180   1F66 00 00 00 00 
3180   1F6A 00 00 00 00 
3180   1F6E 00 00 00 00 
3180   1F72 00 00 00 00 
3180   1F76 00 00 00 00 
3180   1F7A 00 00 00 00 
3180   1F7E 00 00 00 00 
3180   1F82 00 00 00 00 
3180   1F86 00 00 00 00 
3180   1F8A 00 00 00 00 
3180   1F8E 00 00 00 00 
3180   1F92 00 00 00 00 
3180   1F96 00 00 00 00 
3180   1F9A 00 00 00 00 
3180   1F9E 00 00 00 00 
3180   1FA2 00 00 00 00 
3180   1FA6 00 00 00 00 
3180   1FAA 00 00 00 00 
3180   1FAE 00 00 00 00 
3180   1FB2 00 00 00 00 
3180   1FB6 00 00 00 00 
3180   1FBA 00 00 00 00 
3180   1FBE 00 00 00 00 
3180   1FC2 00 00 00 00 
3180   1FC6 00 00 00 00 
3180   1FCA 00 00 00 00 
3180   1FCE 00 00 00 00 
3180   1FD2 00 00 00 00 
3180   1FD6 00 00 00 00 
3180   1FDA 00 00 00 00 
3180   1FDE 00 00 00 00 
3180   1FE2 00 00 00 00 
3180   1FE6 00 00 00 00 
3180   1FEA 00 00 00 00 
3180   1FEE 00 00 00 00 
3180   1FF2 00 00 00 00 
3180   1FF6 00 00 00 00 
3180   1FFA 00 00 00 00 
3180   1FFE 00 00 00 00 
3180   2002 00 00 00 00 
3180   2006 00 00 00 00 
3180   200A 00 00 00 00 
3180   200E 00 00 00 00 
3180   2012 00 00 00 00 
3180   2016 00 00 00 00 
3180   201A 00 00 00 00 
3180   201E 00 00 00 00 
3180   2022 00 00 00 00 
3180   2026 00 00 00 00 
3180   202A 00 00 00 00 
3180   202E 00 00 00 00 
3180   2032 00 00 00 00 
3180   2036 00 00 00 00 
3180   203A 00 00 00 00 
3180   203E 00 00 00 00 
3180   2042 00 00 00 00 
3180   2046 00 00 00 00 
3180   204A 00 00 00 00 
3180   204E 00 00 00 00 
3180   2052 00 00 00 00 
3180   2056 00 00 00 00 
3180   205A 00 00 00 00 
3180   205E 00 00 00 00 
3180   2062 00 00 00 00 
3180   2066 00 00 00 00 
3180   206A 00 00 00 00 
3180   206E 00 00 00 00 
3180   2072 00 00 00 00 
3180   2076 00 00 00 00 
3180   207A 00 00 00 00 
3180   207E 00 00 00 00 
3180   2082 00 00 00 00 
3180   2086 00 00 00 00 
3180   208A 00 00 00 00 
3180   208E 00 00 00 00 
3180   2092 00 00 00 00 
3181   2096             fifo:
3182   2096 FF FF FF FF   .fill _fifo_size
3182   209A FF FF FF FF 
3182   209E FF FF FF FF 
3182   20A2 FF FF FF FF 
3182   20A6 FF FF FF FF 
3182   20AA FF FF FF FF 
3182   20AE FF FF FF FF 
3182   20B2 FF FF FF FF 
3182   20B6 FF FF FF FF 
3182   20BA FF FF FF FF 
3182   20BE FF FF FF FF 
3182   20C2 FF FF FF FF 
3182   20C6 FF FF FF FF 
3182   20CA FF FF FF FF 
3182   20CE FF FF FF FF 
3182   20D2 FF FF FF FF 
3182   20D6 FF FF FF FF 
3182   20DA FF FF FF FF 
3182   20DE FF FF FF FF 
3182   20E2 FF FF FF FF 
3182   20E6 FF FF FF FF 
3182   20EA FF FF FF FF 
3182   20EE FF FF FF FF 
3182   20F2 FF FF FF FF 
3182   20F6 FF FF FF FF 
3182   20FA FF FF FF FF 
3182   20FE FF FF FF FF 
3182   2102 FF FF FF FF 
3182   2106 FF FF FF FF 
3182   210A FF FF FF FF 
3182   210E FF FF FF FF 
3182   2112 FF FF FF FF 
3182   2116 FF FF FF FF 
3182   211A FF FF FF FF 
3182   211E FF FF FF FF 
3182   2122 FF FF FF FF 
3182   2126 FF FF FF FF 
3182   212A FF FF FF FF 
3182   212E FF FF FF FF 
3182   2132 FF FF FF FF 
3182   2136 FF FF FF FF 
3182   213A FF FF FF FF 
3182   213E FF FF FF FF 
3182   2142 FF FF FF FF 
3182   2146 FF FF FF FF 
3182   214A FF FF FF FF 
3182   214E FF FF FF FF 
3182   2152 FF FF FF FF 
3182   2156 FF FF FF FF 
3182   215A FF FF FF FF 
3182   215E FF FF FF FF 
3182   2162 FF FF FF FF 
3182   2166 FF FF FF FF 
3182   216A FF FF FF FF 
3182   216E FF FF FF FF 
3182   2172 FF FF FF FF 
3182   2176 FF FF FF FF 
3182   217A FF FF FF FF 
3182   217E FF FF FF FF 
3182   2182 FF FF FF FF 
3182   2186 FF FF FF FF 
3182   218A FF FF FF FF 
3182   218E FF FF FF FF 
3182   2192 FF FF FF FF 
3182   2196 FF FF FF FF 
3182   219A FF FF FF FF 
3182   219E FF FF FF FF 
3182   21A2 FF FF FF FF 
3182   21A6 FF FF FF FF 
3182   21AA FF FF FF FF 
3182   21AE FF FF FF FF 
3182   21B2 FF FF FF FF 
3182   21B6 FF FF FF FF 
3182   21BA FF FF FF FF 
3182   21BE FF FF FF FF 
3182   21C2 FF FF FF FF 
3182   21C6 FF FF FF FF 
3182   21CA FF FF FF FF 
3182   21CE FF FF FF FF 
3182   21D2 FF FF FF FF 
3182   21D6 FF FF FF FF 
3182   21DA FF FF FF FF 
3182   21DE FF FF FF FF 
3182   21E2 FF FF FF FF 
3182   21E6 FF FF FF FF 
3182   21EA FF FF FF FF 
3182   21EE FF FF FF FF 
3182   21F2 FF FF FF FF 
3182   21F6 FF FF FF FF 
3182   21FA FF FF FF FF 
3182   21FE FF FF FF FF 
3182   2202 FF FF FF FF 
3182   2206 FF FF FF FF 
3182   220A FF FF FF FF 
3182   220E FF FF FF FF 
3182   2212 FF FF FF FF 
3182   2216 FF FF FF FF 
3182   221A FF FF FF FF 
3182   221E FF FF FF FF 
3182   2222 FF FF FF FF 
3182   2226 FF FF FF FF 
3182   222A FF FF FF FF 
3182   222E FF FF FF FF 
3182   2232 FF FF FF FF 
3182   2236 FF FF FF FF 
3182   223A FF FF FF FF 
3182   223E FF FF FF FF 
3182   2242 FF FF FF FF 
3182   2246 FF FF FF FF 
3182   224A FF FF FF FF 
3182   224E FF FF FF FF 
3182   2252 FF FF FF FF 
3182   2256 FF FF FF FF 
3182   225A FF FF FF FF 
3182   225E FF FF FF FF 
3182   2262 FF FF FF FF 
3182   2266 FF FF FF FF 
3182   226A FF FF FF FF 
3182   226E FF FF FF FF 
3182   2272 FF FF FF FF 
3182   2276 FF FF FF FF 
3182   227A FF FF FF FF 
3182   227E FF FF FF FF 
3182   2282 FF FF FF FF 
3182   2286 FF FF FF FF 
3182   228A FF FF FF FF 
3182   228E FF FF FF FF 
3182   2292 FF FF FF FF 
3182   2296 FF FF FF FF 
3182   229A FF FF FF FF 
3182   229E FF FF FF FF 
3182   22A2 FF FF FF FF 
3182   22A6 FF FF FF FF 
3182   22AA FF FF FF FF 
3182   22AE FF FF FF FF 
3182   22B2 FF FF FF FF 
3182   22B6 FF FF FF FF 
3182   22BA FF FF FF FF 
3182   22BE FF FF FF FF 
3182   22C2 FF FF FF FF 
3182   22C6 FF FF FF FF 
3182   22CA FF FF FF FF 
3182   22CE FF FF FF FF 
3182   22D2 FF FF FF FF 
3182   22D6 FF FF FF FF 
3182   22DA FF FF FF FF 
3182   22DE FF FF FF FF 
3182   22E2 FF FF FF FF 
3182   22E6 FF FF FF FF 
3182   22EA FF FF FF FF 
3182   22EE FF FF FF FF 
3182   22F2 FF FF FF FF 
3182   22F6 FF FF FF FF 
3182   22FA FF FF FF FF 
3182   22FE FF FF FF FF 
3182   2302 FF FF FF FF 
3182   2306 FF FF FF FF 
3182   230A FF FF FF FF 
3182   230E FF FF FF FF 
3182   2312 FF FF FF FF 
3182   2316 FF FF FF FF 
3182   231A FF FF FF FF 
3182   231E FF FF FF FF 
3182   2322 FF FF FF FF 
3182   2326 FF FF FF FF 
3182   232A FF FF FF FF 
3182   232E FF FF FF FF 
3182   2332 FF FF FF FF 
3182   2336 FF FF FF FF 
3182   233A FF FF FF FF 
3182   233E FF FF FF FF 
3182   2342 FF FF FF FF 
3182   2346 FF FF FF FF 
3182   234A FF FF FF FF 
3182   234E FF FF FF FF 
3182   2352 FF FF FF FF 
3182   2356 FF FF FF FF 
3182   235A FF FF FF FF 
3182   235E FF FF FF FF 
3182   2362 FF FF FF FF 
3182   2366 FF FF FF FF 
3182   236A FF FF FF FF 
3182   236E FF FF FF FF 
3182   2372 FF FF FF FF 
3182   2376 FF FF FF FF 
3182   237A FF FF FF FF 
3182   237E FF FF FF FF 
3182   2382 FF FF FF FF 
3182   2386 FF FF FF FF 
3182   238A FF FF FF FF 
3182   238E FF FF FF FF 
3182   2392 FF FF FF FF 
3182   2396 FF FF FF FF 
3182   239A FF FF FF FF 
3182   239E FF FF FF FF 
3182   23A2 FF FF FF FF 
3182   23A6 FF FF FF FF 
3182   23AA FF FF FF FF 
3182   23AE FF FF FF FF 
3182   23B2 FF FF FF FF 
3182   23B6 FF FF FF FF 
3182   23BA FF FF FF FF 
3182   23BE FF FF FF FF 
3182   23C2 FF FF FF FF 
3182   23C6 FF FF FF FF 
3182   23CA FF FF FF FF 
3182   23CE FF FF FF FF 
3182   23D2 FF FF FF FF 
3182   23D6 FF FF FF FF 
3182   23DA FF FF FF FF 
3182   23DE FF FF FF FF 
3182   23E2 FF FF FF FF 
3182   23E6 FF FF FF FF 
3182   23EA FF FF FF FF 
3182   23EE FF FF FF FF 
3182   23F2 FF FF FF FF 
3182   23F6 FF FF FF FF 
3182   23FA FF FF FF FF 
3182   23FE FF FF FF FF 
3182   2402 FF FF FF FF 
3182   2406 FF FF FF FF 
3182   240A FF FF FF FF 
3182   240E FF FF FF FF 
3182   2412 FF FF FF FF 
3182   2416 FF FF FF FF 
3182   241A FF FF FF FF 
3182   241E FF FF FF FF 
3182   2422 FF FF FF FF 
3182   2426 FF FF FF FF 
3182   242A FF FF FF FF 
3182   242E FF FF FF FF 
3182   2432 FF FF FF FF 
3182   2436 FF FF FF FF 
3182   243A FF FF FF FF 
3182   243E FF FF FF FF 
3182   2442 FF FF FF FF 
3182   2446 FF FF FF FF 
3182   244A FF FF FF FF 
3182   244E FF FF FF FF 
3182   2452 FF FF FF FF 
3182   2456 FF FF FF FF 
3182   245A FF FF FF FF 
3182   245E FF FF FF FF 
3182   2462 FF FF FF FF 
3182   2466 FF FF FF FF 
3182   246A FF FF FF FF 
3182   246E FF FF FF FF 
3182   2472 FF FF FF FF 
3182   2476 FF FF FF FF 
3182   247A FF FF FF FF 
3182   247E FF FF FF FF 
3182   2482 FF FF FF FF 
3182   2486 FF FF FF FF 
3182   248A FF FF FF FF 
3182   248E FF FF FF FF 
3182   2492 FF FF FF FF 
3182   2496 FF FF FF FF 
3182   249A FF FF FF FF 
3182   249E FF FF FF FF 
3182   24A2 FF FF FF FF 
3182   24A6 FF FF FF FF 
3182   24AA FF FF FF FF 
3182   24AE FF FF FF FF 
3182   24B2 FF FF FF FF 
3182   24B6 FF FF FF FF 
3182   24BA FF FF FF FF 
3182   24BE FF FF FF FF 
3182   24C2 FF FF FF FF 
3182   24C6 FF FF FF FF 
3182   24CA FF FF FF FF 
3182   24CE FF FF FF FF 
3182   24D2 FF FF FF FF 
3182   24D6 FF FF FF FF 
3182   24DA FF FF FF FF 
3182   24DE FF FF FF FF 
3182   24E2 FF FF FF FF 
3182   24E6 FF FF FF FF 
3182   24EA FF FF FF FF 
3182   24EE FF FF FF FF 
3182   24F2 FF FF FF FF 
3182   24F6 FF FF FF FF 
3182   24FA FF FF FF FF 
3182   24FE FF FF FF FF 
3182   2502 FF FF FF FF 
3182   2506 FF FF FF FF 
3182   250A FF FF FF FF 
3182   250E FF FF FF FF 
3182   2512 FF FF FF FF 
3182   2516 FF FF FF FF 
3182   251A FF FF FF FF 
3182   251E FF FF FF FF 
3182   2522 FF FF FF FF 
3182   2526 FF FF FF FF 
3182   252A FF FF FF FF 
3182   252E FF FF FF FF 
3182   2532 FF FF FF FF 
3182   2536 FF FF FF FF 
3182   253A FF FF FF FF 
3182   253E FF FF FF FF 
3182   2542 FF FF FF FF 
3182   2546 FF FF FF FF 
3182   254A FF FF FF FF 
3182   254E FF FF FF FF 
3182   2552 FF FF FF FF 
3182   2556 FF FF FF FF 
3182   255A FF FF FF FF 
3182   255E FF FF FF FF 
3182   2562 FF FF FF FF 
3182   2566 FF FF FF FF 
3182   256A FF FF FF FF 
3182   256E FF FF FF FF 
3182   2572 FF FF FF FF 
3182   2576 FF FF FF FF 
3182   257A FF FF FF FF 
3182   257E FF FF FF FF 
3182   2582 FF FF FF FF 
3182   2586 FF FF FF FF 
3182   258A FF FF FF FF 
3182   258E FF FF FF FF 
3182   2592 FF FF FF FF 
3182   2596 FF FF FF FF 
3182   259A FF FF FF FF 
3182   259E FF FF FF FF 
3182   25A2 FF FF FF FF 
3182   25A6 FF FF FF FF 
3182   25AA FF FF FF FF 
3182   25AE FF FF FF FF 
3182   25B2 FF FF FF FF 
3182   25B6 FF FF FF FF 
3182   25BA FF FF FF FF 
3182   25BE FF FF FF FF 
3182   25C2 FF FF FF FF 
3182   25C6 FF FF FF FF 
3182   25CA FF FF FF FF 
3182   25CE FF FF FF FF 
3182   25D2 FF FF FF FF 
3182   25D6 FF FF FF FF 
3182   25DA FF FF FF FF 
3182   25DE FF FF FF FF 
3182   25E2 FF FF FF FF 
3182   25E6 FF FF FF FF 
3182   25EA FF FF FF FF 
3182   25EE FF FF FF FF 
3182   25F2 FF FF FF FF 
3182   25F6 FF FF FF FF 
3182   25FA FF FF FF FF 
3182   25FE FF FF FF FF 
3182   2602 FF FF FF FF 
3182   2606 FF FF FF FF 
3182   260A FF FF FF FF 
3182   260E FF FF FF FF 
3182   2612 FF FF FF FF 
3182   2616 FF FF FF FF 
3182   261A FF FF FF FF 
3182   261E FF FF FF FF 
3182   2622 FF FF FF FF 
3182   2626 FF FF FF FF 
3182   262A FF FF FF FF 
3182   262E FF FF FF FF 
3182   2632 FF FF FF FF 
3182   2636 FF FF FF FF 
3182   263A FF FF FF FF 
3182   263E FF FF FF FF 
3182   2642 FF FF FF FF 
3182   2646 FF FF FF FF 
3182   264A FF FF FF FF 
3182   264E FF FF FF FF 
3182   2652 FF FF FF FF 
3182   2656 FF FF FF FF 
3182   265A FF FF FF FF 
3182   265E FF FF FF FF 
3182   2662 FF FF FF FF 
3182   2666 FF FF FF FF 
3182   266A FF FF FF FF 
3182   266E FF FF FF FF 
3182   2672 FF FF FF FF 
3182   2676 FF FF FF FF 
3182   267A FF FF FF FF 
3182   267E FF FF FF FF 
3182   2682 FF FF FF FF 
3182   2686 FF FF FF FF 
3182   268A FF FF FF FF 
3182   268E FF FF FF FF 
3182   2692 FF FF FF FF 
3182   2696 FF FF FF FF 
3182   269A FF FF FF FF 
3182   269E FF FF FF FF 
3182   26A2 FF FF FF FF 
3182   26A6 FF FF FF FF 
3182   26AA FF FF FF FF 
3182   26AE FF FF FF FF 
3182   26B2 FF FF FF FF 
3182   26B6 FF FF FF FF 
3182   26BA FF FF FF FF 
3182   26BE FF FF FF FF 
3182   26C2 FF FF FF FF 
3182   26C6 FF FF FF FF 
3182   26CA FF FF FF FF 
3182   26CE FF FF FF FF 
3182   26D2 FF FF FF FF 
3182   26D6 FF FF FF FF 
3182   26DA FF FF FF FF 
3182   26DE FF FF FF FF 
3182   26E2 FF FF FF FF 
3182   26E6 FF FF FF FF 
3182   26EA FF FF FF FF 
3182   26EE FF FF FF FF 
3182   26F2 FF FF FF FF 
3182   26F6 FF FF FF FF 
3182   26FA FF FF FF FF 
3182   26FE FF FF FF FF 
3182   2702 FF FF FF FF 
3182   2706 FF FF FF FF 
3182   270A FF FF FF FF 
3182   270E FF FF FF FF 
3182   2712 FF FF FF FF 
3182   2716 FF FF FF FF 
3182   271A FF FF FF FF 
3182   271E FF FF FF FF 
3182   2722 FF FF FF FF 
3182   2726 FF FF FF FF 
3182   272A FF FF FF FF 
3182   272E FF FF FF FF 
3182   2732 FF FF FF FF 
3182   2736 FF FF FF FF 
3182   273A FF FF FF FF 
3182   273E FF FF FF FF 
3182   2742 FF FF FF FF 
3182   2746 FF FF FF FF 
3182   274A FF FF FF FF 
3182   274E FF FF FF FF 
3182   2752 FF FF FF FF 
3182   2756 FF FF FF FF 
3182   275A FF FF FF FF 
3182   275E FF FF FF FF 
3182   2762 FF FF FF FF 
3182   2766 FF FF FF FF 
3182   276A FF FF FF FF 
3182   276E FF FF FF FF 
3182   2772 FF FF FF FF 
3182   2776 FF FF FF FF 
3182   277A FF FF FF FF 
3182   277E FF FF FF FF 
3182   2782 FF FF FF FF 
3182   2786 FF FF FF FF 
3182   278A FF FF FF FF 
3182   278E FF FF FF FF 
3182   2792 FF FF FF FF 
3182   2796 FF FF FF FF 
3182   279A FF FF FF FF 
3182   279E FF FF FF FF 
3182   27A2 FF FF FF FF 
3182   27A6 FF FF FF FF 
3182   27AA FF FF FF FF 
3182   27AE FF FF FF FF 
3182   27B2 FF FF FF FF 
3182   27B6 FF FF FF FF 
3182   27BA FF FF FF FF 
3182   27BE FF FF FF FF 
3182   27C2 FF FF FF FF 
3182   27C6 FF FF FF FF 
3182   27CA FF FF FF FF 
3182   27CE FF FF FF FF 
3182   27D2 FF FF FF FF 
3182   27D6 FF FF FF FF 
3182   27DA FF FF FF FF 
3182   27DE FF FF FF FF 
3182   27E2 FF FF FF FF 
3182   27E6 FF FF FF FF 
3182   27EA FF FF FF FF 
3182   27EE FF FF FF FF 
3182   27F2 FF FF FF FF 
3182   27F6 FF FF FF FF 
3182   27FA FF FF FF FF 
3182   27FE FF FF FF FF 
3182   2802 FF FF FF FF 
3182   2806 FF FF FF FF 
3182   280A FF FF FF FF 
3182   280E FF FF FF FF 
3182   2812 FF FF FF FF 
3182   2816 FF FF FF FF 
3182   281A FF FF FF FF 
3182   281E FF FF FF FF 
3182   2822 FF FF FF FF 
3182   2826 FF FF FF FF 
3182   282A FF FF FF FF 
3182   282E FF FF FF FF 
3182   2832 FF FF FF FF 
3182   2836 FF FF FF FF 
3182   283A FF FF FF FF 
3182   283E FF FF FF FF 
3182   2842 FF FF FF FF 
3182   2846 FF FF FF FF 
3182   284A FF FF FF FF 
3182   284E FF FF FF FF 
3182   2852 FF FF FF FF 
3182   2856 FF FF FF FF 
3182   285A FF FF FF FF 
3182   285E FF FF FF FF 
3182   2862 FF FF FF FF 
3182   2866 FF FF FF FF 
3182   286A FF FF FF FF 
3182   286E FF FF FF FF 
3182   2872 FF FF FF FF 
3182   2876 FF FF FF FF 
3182   287A FF FF FF FF 
3182   287E FF FF FF FF 
3182   2882 FF FF FF FF 
3182   2886 FF FF FF FF 
3182   288A FF FF FF FF 
3182   288E FF FF FF FF 
3182   2892 FF FF FF FF 
3182   2896 FF FF FF FF 
3182   289A FF FF FF FF 
3182   289E FF FF FF FF 
3182   28A2 FF FF FF FF 
3182   28A6 FF FF FF FF 
3182   28AA FF FF FF FF 
3182   28AE FF FF FF FF 
3182   28B2 FF FF FF FF 
3182   28B6 FF FF FF FF 
3182   28BA FF FF FF FF 
3182   28BE FF FF FF FF 
3182   28C2 FF FF FF FF 
3182   28C6 FF FF FF FF 
3182   28CA FF FF FF FF 
3182   28CE FF FF FF FF 
3182   28D2 FF FF FF FF 
3182   28D6 FF FF FF FF 
3182   28DA FF FF FF FF 
3182   28DE FF FF FF FF 
3182   28E2 FF FF FF FF 
3182   28E6 FF FF FF FF 
3182   28EA FF FF FF FF 
3182   28EE FF FF FF FF 
3182   28F2 FF FF FF FF 
3182   28F6 FF FF FF FF 
3182   28FA FF FF FF FF 
3182   28FE FF FF FF FF 
3182   2902 FF FF FF FF 
3182   2906 FF FF FF FF 
3182   290A FF FF FF FF 
3182   290E FF FF FF FF 
3182   2912 FF FF FF FF 
3182   2916 FF FF FF FF 
3182   291A FF FF FF FF 
3182   291E FF FF FF FF 
3182   2922 FF FF FF FF 
3182   2926 FF FF FF FF 
3182   292A FF FF FF FF 
3182   292E FF FF FF FF 
3182   2932 FF FF FF FF 
3182   2936 FF FF FF FF 
3182   293A FF FF FF FF 
3182   293E FF FF FF FF 
3182   2942 FF FF FF FF 
3182   2946 FF FF FF FF 
3182   294A FF FF FF FF 
3182   294E FF FF FF FF 
3182   2952 FF FF FF FF 
3182   2956 FF FF FF FF 
3182   295A FF FF FF FF 
3182   295E FF FF FF FF 
3182   2962 FF FF FF FF 
3182   2966 FF FF FF FF 
3182   296A FF FF FF FF 
3182   296E FF FF FF FF 
3182   2972 FF FF FF FF 
3182   2976 FF FF FF FF 
3182   297A FF FF FF FF 
3182   297E FF FF FF FF 
3182   2982 FF FF FF FF 
3182   2986 FF FF FF FF 
3182   298A FF FF FF FF 
3182   298E FF FF FF FF 
3182   2992 FF FF FF FF 
3182   2996 FF FF FF FF 
3182   299A FF FF FF FF 
3182   299E FF FF FF FF 
3182   29A2 FF FF FF FF 
3182   29A6 FF FF FF FF 
3182   29AA FF FF FF FF 
3182   29AE FF FF FF FF 
3182   29B2 FF FF FF FF 
3182   29B6 FF FF FF FF 
3182   29BA FF FF FF FF 
3182   29BE FF FF FF FF 
3182   29C2 FF FF FF FF 
3182   29C6 FF FF FF FF 
3182   29CA FF FF FF FF 
3182   29CE FF FF FF FF 
3182   29D2 FF FF FF FF 
3182   29D6 FF FF FF FF 
3182   29DA FF FF FF FF 
3182   29DE FF FF FF FF 
3182   29E2 FF FF FF FF 
3182   29E6 FF FF FF FF 
3182   29EA FF FF FF FF 
3182   29EE FF FF FF FF 
3182   29F2 FF FF FF FF 
3182   29F6 FF FF FF FF 
3182   29FA FF FF FF FF 
3182   29FE FF FF FF FF 
3182   2A02 FF FF FF FF 
3182   2A06 FF FF FF FF 
3182   2A0A FF FF FF FF 
3182   2A0E FF FF FF FF 
3182   2A12 FF FF FF FF 
3182   2A16 FF FF FF FF 
3182   2A1A FF FF FF FF 
3182   2A1E FF FF FF FF 
3182   2A22 FF FF FF FF 
3182   2A26 FF FF FF FF 
3182   2A2A FF FF FF FF 
3182   2A2E FF FF FF FF 
3182   2A32 FF FF FF FF 
3182   2A36 FF FF FF FF 
3182   2A3A FF FF FF FF 
3182   2A3E FF FF FF FF 
3182   2A42 FF FF FF FF 
3182   2A46 FF FF FF FF 
3182   2A4A FF FF FF FF 
3182   2A4E FF FF FF FF 
3182   2A52 FF FF FF FF 
3182   2A56 FF FF FF FF 
3182   2A5A FF FF FF FF 
3182   2A5E FF FF FF FF 
3182   2A62 FF FF FF FF 
3182   2A66 FF FF FF FF 
3182   2A6A FF FF FF FF 
3182   2A6E FF FF FF FF 
3182   2A72 FF FF FF FF 
3182   2A76 FF FF FF FF 
3182   2A7A FF FF FF FF 
3182   2A7E FF FF FF FF 
3182   2A82 FF FF FF FF 
3182   2A86 FF FF FF FF 
3182   2A8A FF FF FF FF 
3182   2A8E FF FF FF FF 
3182   2A92 FF FF FF FF 
3182   2A96 FF FF FF FF 
3182   2A9A FF FF FF FF 
3182   2A9E FF FF FF FF 
3182   2AA2 FF FF FF FF 
3182   2AA6 FF FF FF FF 
3182   2AAA FF FF FF FF 
3182   2AAE FF FF FF FF 
3182   2AB2 FF FF FF FF 
3182   2AB6 FF FF FF FF 
3182   2ABA FF FF FF FF 
3182   2ABE FF FF FF FF 
3182   2AC2 FF FF FF FF 
3182   2AC6 FF FF FF FF 
3182   2ACA FF FF FF FF 
3182   2ACE FF FF FF FF 
3182   2AD2 FF FF FF FF 
3182   2AD6 FF FF FF FF 
3182   2ADA FF FF FF FF 
3182   2ADE FF FF FF FF 
3182   2AE2 FF FF FF FF 
3182   2AE6 FF FF FF FF 
3182   2AEA FF FF FF FF 
3182   2AEE FF FF FF FF 
3182   2AF2 FF FF FF FF 
3182   2AF6 FF FF FF FF 
3182   2AFA FF FF FF FF 
3182   2AFE FF FF FF FF 
3182   2B02 FF FF FF FF 
3182   2B06 FF FF FF FF 
3182   2B0A FF FF FF FF 
3182   2B0E FF FF FF FF 
3182   2B12 FF FF FF FF 
3182   2B16 FF FF FF FF 
3182   2B1A FF FF FF FF 
3182   2B1E FF FF FF FF 
3182   2B22 FF FF FF FF 
3182   2B26 FF FF FF FF 
3182   2B2A FF FF FF FF 
3182   2B2E FF FF FF FF 
3182   2B32 FF FF FF FF 
3182   2B36 FF FF FF FF 
3182   2B3A FF FF FF FF 
3182   2B3E FF FF FF FF 
3182   2B42 FF FF FF FF 
3182   2B46 FF FF FF FF 
3182   2B4A FF FF FF FF 
3182   2B4E FF FF FF FF 
3182   2B52 FF FF FF FF 
3182   2B56 FF FF FF FF 
3182   2B5A FF FF FF FF 
3182   2B5E FF FF FF FF 
3182   2B62 FF FF FF FF 
3182   2B66 FF FF FF FF 
3182   2B6A FF FF FF FF 
3182   2B6E FF FF FF FF 
3182   2B72 FF FF FF FF 
3182   2B76 FF FF FF FF 
3182   2B7A FF FF FF FF 
3182   2B7E FF FF FF FF 
3182   2B82 FF FF FF FF 
3182   2B86 FF FF FF FF 
3182   2B8A FF FF FF FF 
3182   2B8E FF FF FF FF 
3182   2B92 FF FF FF FF 
3182   2B96 FF FF FF FF 
3182   2B9A FF FF FF FF 
3182   2B9E FF FF FF FF 
3182   2BA2 FF FF FF FF 
3182   2BA6 FF FF FF FF 
3182   2BAA FF FF FF FF 
3182   2BAE FF FF FF FF 
3182   2BB2 FF FF FF FF 
3182   2BB6 FF FF FF FF 
3182   2BBA FF FF FF FF 
3182   2BBE FF FF FF FF 
3182   2BC2 FF FF FF FF 
3182   2BC6 FF FF FF FF 
3182   2BCA FF FF FF FF 
3182   2BCE FF FF FF FF 
3182   2BD2 FF FF FF FF 
3182   2BD6 FF FF FF FF 
3182   2BDA FF FF FF FF 
3182   2BDE FF FF FF FF 
3182   2BE2 FF FF FF FF 
3182   2BE6 FF FF FF FF 
3182   2BEA FF FF FF FF 
3182   2BEE FF FF FF FF 
3182   2BF2 FF FF FF FF 
3182   2BF6 FF FF FF FF 
3182   2BFA FF FF FF FF 
3182   2BFE FF FF FF FF 
3182   2C02 FF FF FF FF 
3182   2C06 FF FF FF FF 
3182   2C0A FF FF FF FF 
3182   2C0E FF FF FF FF 
3182   2C12 FF FF FF FF 
3182   2C16 FF FF FF FF 
3182   2C1A FF FF FF FF 
3182   2C1E FF FF FF FF 
3182   2C22 FF FF FF FF 
3182   2C26 FF FF FF FF 
3182   2C2A FF FF FF FF 
3182   2C2E FF FF FF FF 
3182   2C32 FF FF FF FF 
3182   2C36 FF FF FF FF 
3182   2C3A FF FF FF FF 
3182   2C3E FF FF FF FF 
3182   2C42 FF FF FF FF 
3182   2C46 FF FF FF FF 
3182   2C4A FF FF FF FF 
3182   2C4E FF FF FF FF 
3182   2C52 FF FF FF FF 
3182   2C56 FF FF FF FF 
3182   2C5A FF FF FF FF 
3182   2C5E FF FF FF FF 
3182   2C62 FF FF FF FF 
3182   2C66 FF FF FF FF 
3182   2C6A FF FF FF FF 
3182   2C6E FF FF FF FF 
3182   2C72 FF FF FF FF 
3182   2C76 FF FF FF FF 
3182   2C7A FF FF FF FF 
3182   2C7E FF FF FF FF 
3182   2C82 FF FF FF FF 
3182   2C86 FF FF FF FF 
3182   2C8A FF FF FF FF 
3182   2C8E FF FF FF FF 
3182   2C92 FF FF FF FF 
3182   2C96 FF FF FF FF 
3182   2C9A FF FF FF FF 
3182   2C9E FF FF FF FF 
3182   2CA2 FF FF FF FF 
3182   2CA6 FF FF FF FF 
3182   2CAA FF FF FF FF 
3182   2CAE FF FF FF FF 
3182   2CB2 FF FF FF FF 
3182   2CB6 FF FF FF FF 
3182   2CBA FF FF FF FF 
3182   2CBE FF FF FF FF 
3182   2CC2 FF FF FF FF 
3182   2CC6 FF FF FF FF 
3182   2CCA FF FF FF FF 
3182   2CCE FF FF FF FF 
3182   2CD2 FF FF FF FF 
3182   2CD6 FF FF FF FF 
3182   2CDA FF FF FF FF 
3182   2CDE FF FF FF FF 
3182   2CE2 FF FF FF FF 
3182   2CE6 FF FF FF FF 
3182   2CEA FF FF FF FF 
3182   2CEE FF FF FF FF 
3182   2CF2 FF FF FF FF 
3182   2CF6 FF FF FF FF 
3182   2CFA FF FF FF FF 
3182   2CFE FF FF FF FF 
3182   2D02 FF FF FF FF 
3182   2D06 FF FF FF FF 
3182   2D0A FF FF FF FF 
3182   2D0E FF FF FF FF 
3182   2D12 FF FF FF FF 
3182   2D16 FF FF FF FF 
3182   2D1A FF FF FF FF 
3182   2D1E FF FF FF FF 
3182   2D22 FF FF FF FF 
3182   2D26 FF FF FF FF 
3182   2D2A FF FF FF FF 
3182   2D2E FF FF FF FF 
3182   2D32 FF FF FF FF 
3182   2D36 FF FF FF FF 
3182   2D3A FF FF FF FF 
3182   2D3E FF FF FF FF 
3182   2D42 FF FF FF FF 
3182   2D46 FF FF FF FF 
3182   2D4A FF FF FF FF 
3182   2D4E FF FF FF FF 
3182   2D52 FF FF FF FF 
3182   2D56 FF FF FF FF 
3182   2D5A FF FF FF FF 
3182   2D5E FF FF FF FF 
3182   2D62 FF FF FF FF 
3182   2D66 FF FF FF FF 
3182   2D6A FF FF FF FF 
3182   2D6E FF FF FF FF 
3182   2D72 FF FF FF FF 
3182   2D76 FF FF FF FF 
3182   2D7A FF FF FF FF 
3182   2D7E FF FF FF FF 
3182   2D82 FF FF FF FF 
3182   2D86 FF FF FF FF 
3182   2D8A FF FF FF FF 
3182   2D8E FF FF FF FF 
3182   2D92 FF FF FF FF 
3182   2D96 FF FF FF FF 
3182   2D9A FF FF FF FF 
3182   2D9E FF FF FF FF 
3182   2DA2 FF FF FF FF 
3182   2DA6 FF FF FF FF 
3182   2DAA FF FF FF FF 
3182   2DAE FF FF FF FF 
3182   2DB2 FF FF FF FF 
3182   2DB6 FF FF FF FF 
3182   2DBA FF FF FF FF 
3182   2DBE FF FF FF FF 
3182   2DC2 FF FF FF FF 
3182   2DC6 FF FF FF FF 
3182   2DCA FF FF FF FF 
3182   2DCE FF FF FF FF 
3182   2DD2 FF FF FF FF 
3182   2DD6 FF FF FF FF 
3182   2DDA FF FF FF FF 
3182   2DDE FF FF FF FF 
3182   2DE2 FF FF FF FF 
3182   2DE6 FF FF FF FF 
3182   2DEA FF FF FF FF 
3182   2DEE FF FF FF FF 
3182   2DF2 FF FF FF FF 
3182   2DF6 FF FF FF FF 
3182   2DFA FF FF FF FF 
3182   2DFE FF FF FF FF 
3182   2E02 FF FF FF FF 
3182   2E06 FF FF FF FF 
3182   2E0A FF FF FF FF 
3182   2E0E FF FF FF FF 
3182   2E12 FF FF FF FF 
3182   2E16 FF FF FF FF 
3182   2E1A FF FF FF FF 
3182   2E1E FF FF FF FF 
3182   2E22 FF FF FF FF 
3182   2E26 FF FF FF FF 
3182   2E2A FF FF FF FF 
3182   2E2E FF FF FF FF 
3182   2E32 FF FF FF FF 
3182   2E36 FF FF FF FF 
3182   2E3A FF FF FF FF 
3182   2E3E FF FF FF FF 
3182   2E42 FF FF FF FF 
3182   2E46 FF FF FF FF 
3182   2E4A FF FF FF FF 
3182   2E4E FF FF FF FF 
3182   2E52 FF FF FF FF 
3182   2E56 FF FF FF FF 
3182   2E5A FF FF FF FF 
3182   2E5E FF FF FF FF 
3182   2E62 FF FF FF FF 
3182   2E66 FF FF FF FF 
3182   2E6A FF FF FF FF 
3182   2E6E FF FF FF FF 
3182   2E72 FF FF FF FF 
3182   2E76 FF FF FF FF 
3182   2E7A FF FF FF FF 
3182   2E7E FF FF FF FF 
3182   2E82 FF FF FF FF 
3182   2E86 FF FF FF FF 
3182   2E8A FF FF FF FF 
3182   2E8E FF FF FF FF 
3182   2E92 FF FF FF FF 
3182   2E96 FF FF FF FF 
3182   2E9A FF FF FF FF 
3182   2E9E FF FF FF FF 
3182   2EA2 FF FF FF FF 
3182   2EA6 FF FF FF FF 
3182   2EAA FF FF FF FF 
3182   2EAE FF FF FF FF 
3182   2EB2 FF FF FF FF 
3182   2EB6 FF FF FF FF 
3182   2EBA FF FF FF FF 
3182   2EBE FF FF FF FF 
3182   2EC2 FF FF FF FF 
3182   2EC6 FF FF FF FF 
3182   2ECA FF FF FF FF 
3182   2ECE FF FF FF FF 
3182   2ED2 FF FF FF FF 
3182   2ED6 FF FF FF FF 
3182   2EDA FF FF FF FF 
3182   2EDE FF FF FF FF 
3182   2EE2 FF FF FF FF 
3182   2EE6 FF FF FF FF 
3182   2EEA FF FF FF FF 
3182   2EEE FF FF FF FF 
3182   2EF2 FF FF FF FF 
3182   2EF6 FF FF FF FF 
3182   2EFA FF FF FF FF 
3182   2EFE FF FF FF FF 
3182   2F02 FF FF FF FF 
3182   2F06 FF FF FF FF 
3182   2F0A FF FF FF FF 
3182   2F0E FF FF FF FF 
3182   2F12 FF FF FF FF 
3182   2F16 FF FF FF FF 
3182   2F1A FF FF FF FF 
3182   2F1E FF FF FF FF 
3182   2F22 FF FF FF FF 
3182   2F26 FF FF FF FF 
3182   2F2A FF FF FF FF 
3182   2F2E FF FF FF FF 
3182   2F32 FF FF FF FF 
3182   2F36 FF FF FF FF 
3182   2F3A FF FF FF FF 
3182   2F3E FF FF FF FF 
3182   2F42 FF FF FF FF 
3182   2F46 FF FF FF FF 
3182   2F4A FF FF FF FF 
3182   2F4E FF FF FF FF 
3182   2F52 FF FF FF FF 
3182   2F56 FF FF FF FF 
3182   2F5A FF FF FF FF 
3182   2F5E FF FF FF FF 
3182   2F62 FF FF FF FF 
3182   2F66 FF FF FF FF 
3182   2F6A FF FF FF FF 
3182   2F6E FF FF FF FF 
3182   2F72 FF FF FF FF 
3182   2F76 FF FF FF FF 
3182   2F7A FF FF FF FF 
3182   2F7E FF FF FF FF 
3182   2F82 FF FF FF FF 
3182   2F86 FF FF FF FF 
3182   2F8A FF FF FF FF 
3182   2F8E FF FF FF FF 
3182   2F92 FF FF FF FF 
3182   2F96 FF FF FF FF 
3182   2F9A FF FF FF FF 
3182   2F9E FF FF FF FF 
3182   2FA2 FF FF FF FF 
3182   2FA6 FF FF FF FF 
3182   2FAA FF FF FF FF 
3182   2FAE FF FF FF FF 
3182   2FB2 FF FF FF FF 
3182   2FB6 FF FF FF FF 
3182   2FBA FF FF FF FF 
3182   2FBE FF FF FF FF 
3182   2FC2 FF FF FF FF 
3182   2FC6 FF FF FF FF 
3182   2FCA FF FF FF FF 
3182   2FCE FF FF FF FF 
3182   2FD2 FF FF FF FF 
3182   2FD6 FF FF FF FF 
3182   2FDA FF FF FF FF 
3182   2FDE FF FF FF FF 
3182   2FE2 FF FF FF FF 
3182   2FE6 FF FF FF FF 
3182   2FEA FF FF FF FF 
3182   2FEE FF FF FF FF 
3182   2FF2 FF FF FF FF 
3182   2FF6 FF FF FF FF 
3182   2FFA FF FF FF FF 
3182   2FFE FF FF FF FF 
3182   3002 FF FF FF FF 
3182   3006 FF FF FF FF 
3182   300A FF FF FF FF 
3182   300E FF FF FF FF 
3182   3012 FF FF FF FF 
3182   3016 FF FF FF FF 
3182   301A FF FF FF FF 
3182   301E FF FF FF FF 
3182   3022 FF FF FF FF 
3182   3026 FF FF FF FF 
3182   302A FF FF FF FF 
3182   302E FF FF FF FF 
3182   3032 FF FF FF FF 
3182   3036 FF FF FF FF 
3182   303A FF FF FF FF 
3182   303E FF FF FF FF 
3182   3042 FF FF FF FF 
3182   3046 FF FF FF FF 
3182   304A FF FF FF FF 
3182   304E FF FF FF FF 
3182   3052 FF FF FF FF 
3182   3056 FF FF FF FF 
3182   305A FF FF FF FF 
3182   305E FF FF FF FF 
3182   3062 FF FF FF FF 
3182   3066 FF FF FF FF 
3182   306A FF FF FF FF 
3182   306E FF FF FF FF 
3182   3072 FF FF FF FF 
3182   3076 FF FF FF FF 
3182   307A FF FF FF FF 
3182   307E FF FF FF FF 
3182   3082 FF FF FF FF 
3182   3086 FF FF FF FF 
3182   308A FF FF FF FF 
3182   308E FF FF FF FF 
3182   3092 FF FF FF FF 
3183   3096             
3184   3096             scrap_sector:
3185   3096 FF FF FF FF   .fill 512         ; scrap sector
3185   309A FF FF FF FF 
3185   309E FF FF FF FF 
3185   30A2 FF FF FF FF 
3185   30A6 FF FF FF FF 
3185   30AA FF FF FF FF 
3185   30AE FF FF FF FF 
3185   30B2 FF FF FF FF 
3185   30B6 FF FF FF FF 
3185   30BA FF FF FF FF 
3185   30BE FF FF FF FF 
3185   30C2 FF FF FF FF 
3185   30C6 FF FF FF FF 
3185   30CA FF FF FF FF 
3185   30CE FF FF FF FF 
3185   30D2 FF FF FF FF 
3185   30D6 FF FF FF FF 
3185   30DA FF FF FF FF 
3185   30DE FF FF FF FF 
3185   30E2 FF FF FF FF 
3185   30E6 FF FF FF FF 
3185   30EA FF FF FF FF 
3185   30EE FF FF FF FF 
3185   30F2 FF FF FF FF 
3185   30F6 FF FF FF FF 
3185   30FA FF FF FF FF 
3185   30FE FF FF FF FF 
3185   3102 FF FF FF FF 
3185   3106 FF FF FF FF 
3185   310A FF FF FF FF 
3185   310E FF FF FF FF 
3185   3112 FF FF FF FF 
3185   3116 FF FF FF FF 
3185   311A FF FF FF FF 
3185   311E FF FF FF FF 
3185   3122 FF FF FF FF 
3185   3126 FF FF FF FF 
3185   312A FF FF FF FF 
3185   312E FF FF FF FF 
3185   3132 FF FF FF FF 
3185   3136 FF FF FF FF 
3185   313A FF FF FF FF 
3185   313E FF FF FF FF 
3185   3142 FF FF FF FF 
3185   3146 FF FF FF FF 
3185   314A FF FF FF FF 
3185   314E FF FF FF FF 
3185   3152 FF FF FF FF 
3185   3156 FF FF FF FF 
3185   315A FF FF FF FF 
3185   315E FF FF FF FF 
3185   3162 FF FF FF FF 
3185   3166 FF FF FF FF 
3185   316A FF FF FF FF 
3185   316E FF FF FF FF 
3185   3172 FF FF FF FF 
3185   3176 FF FF FF FF 
3185   317A FF FF FF FF 
3185   317E FF FF FF FF 
3185   3182 FF FF FF FF 
3185   3186 FF FF FF FF 
3185   318A FF FF FF FF 
3185   318E FF FF FF FF 
3185   3192 FF FF FF FF 
3185   3196 FF FF FF FF 
3185   319A FF FF FF FF 
3185   319E FF FF FF FF 
3185   31A2 FF FF FF FF 
3185   31A6 FF FF FF FF 
3185   31AA FF FF FF FF 
3185   31AE FF FF FF FF 
3185   31B2 FF FF FF FF 
3185   31B6 FF FF FF FF 
3185   31BA FF FF FF FF 
3185   31BE FF FF FF FF 
3185   31C2 FF FF FF FF 
3185   31C6 FF FF FF FF 
3185   31CA FF FF FF FF 
3185   31CE FF FF FF FF 
3185   31D2 FF FF FF FF 
3185   31D6 FF FF FF FF 
3185   31DA FF FF FF FF 
3185   31DE FF FF FF FF 
3185   31E2 FF FF FF FF 
3185   31E6 FF FF FF FF 
3185   31EA FF FF FF FF 
3185   31EE FF FF FF FF 
3185   31F2 FF FF FF FF 
3185   31F6 FF FF FF FF 
3185   31FA FF FF FF FF 
3185   31FE FF FF FF FF 
3185   3202 FF FF FF FF 
3185   3206 FF FF FF FF 
3185   320A FF FF FF FF 
3185   320E FF FF FF FF 
3185   3212 FF FF FF FF 
3185   3216 FF FF FF FF 
3185   321A FF FF FF FF 
3185   321E FF FF FF FF 
3185   3222 FF FF FF FF 
3185   3226 FF FF FF FF 
3185   322A FF FF FF FF 
3185   322E FF FF FF FF 
3185   3232 FF FF FF FF 
3185   3236 FF FF FF FF 
3185   323A FF FF FF FF 
3185   323E FF FF FF FF 
3185   3242 FF FF FF FF 
3185   3246 FF FF FF FF 
3185   324A FF FF FF FF 
3185   324E FF FF FF FF 
3185   3252 FF FF FF FF 
3185   3256 FF FF FF FF 
3185   325A FF FF FF FF 
3185   325E FF FF FF FF 
3185   3262 FF FF FF FF 
3185   3266 FF FF FF FF 
3185   326A FF FF FF FF 
3185   326E FF FF FF FF 
3185   3272 FF FF FF FF 
3185   3276 FF FF FF FF 
3185   327A FF FF FF FF 
3185   327E FF FF FF FF 
3185   3282 FF FF FF FF 
3185   3286 FF FF FF FF 
3185   328A FF FF FF FF 
3185   328E FF FF FF FF 
3185   3292 FF FF FF FF 
3186   3296             transient_area:
3187   3296 00            .db 0             ; beginning of the transient memory area. used for disk reads and other purposes    
3188   3297             
3189   3297             .end
tasm: Number of errors = 0
