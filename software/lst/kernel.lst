0001   0000             ; ------------------------------------------------------------------------------------------------------------------;
0002   0000             ; Solarium - Sol-1 Homebrew Minicomputer Operating System Kernel.
0003   0000             ; ------------------------------------------------------------------------------------------------------------------;
0004   0000             
0005   0000             ; memory map
0006   0000             ; ------------------------------------------------------------------------------------------------------------------;
0007   0000             ; 0000 ... 7fff - rom space
0008   0000             ; 8000 ... f7ff - ram space
0009   0000             ; f7ff          - stack root
0010   0000             
0011   0000             ; i/o map
0012   0000             ; ------------------------------------------------------------------------------------------------------------------;
0013   0000             ; ff80 - uart 0 (16550)
0014   0000             ; ff88 - uart 1 (16550)
0015   0000             ; ffa0 - rtc    (m48t02)
0016   0000             ; ffb0 - pio 0  (8255)
0017   0000             ; ffc0 - fdd    (5.25" floppy drive block)
0018   0000             ;   - ffc0      output port (377 flip-flop)                  
0019   0000             ;   - ffc1      input port  (244 buffer)                     
0020   0000             ;   - ffc8      wd1770 status/command    
0021   0000             ;   - ffc9      wd1770 track register
0022   0000             ;   - ffca      wd1770 sector register
0023   0000             ;   - ffcb      wd1770 data register
0024   0000             ;      
0025   0000             ; ffd0 - ide    (compact flash / pata)
0026   0000             ; ffe0 - timer  (8253)
0027   0000             ; fff0 - bios configuration nv-ram store area
0028   0000             ; ------------------------------------------------------------------------------------------------------------------;
0029   0000             
0030   0000             ; ------------------------------------------------------------------------------------------------------------------;
0031   0000             ; system constants
0032   0000             ; ------------------------------------------------------------------------------------------------------------------;
0033   0000             _uart0_data       .equ $ff80         ; data
0034   0000             _uart0_dlab_0     .equ $ff80         ; divisor latch low byte
0035   0000             _uart0_dlab_1     .equ $ff81         ; divisor latch high byte
0036   0000             _uart0_ier        .equ $ff81         ; interrupt enable register
0037   0000             _uart0_fcr        .equ $ff82         ; fifo control register
0038   0000             _uart0_lcr        .equ $ff83         ; line control register
0039   0000             _uart0_lsr        .equ $ff85         ; line status register
0040   0000             
0041   0000             _uart1_data       .equ $ff88         ; data
0042   0000             _uart1_dlab_0     .equ $ff88         ; divisor latch low byte
0043   0000             _uart1_dlab_1     .equ $ff89         ; divisor latch high byte
0044   0000             _uart1_ier        .equ $ff89         ; interrupt enable register
0045   0000             _uart1_fcr        .equ $ff8A         ; fifo control register
0046   0000             _uart1_lcr        .equ $ff8B         ; line control register
0047   0000             _uart1_lsr        .equ $ff8D         ; line status register
0048   0000             
0049   0000             _ide_base         .equ $ffd0         ; ide base
0050   0000             _ide_r0           .equ _ide_base + 0 ; data port
0051   0000             _ide_r1           .equ _ide_base + 1 ; read: error code, write: feature
0052   0000             _ide_r2           .equ _ide_base + 2 ; number of sectors to transfer
0053   0000             _ide_r3           .equ _ide_base + 3 ; sector address lba 0 [0:7]
0054   0000             _ide_r4           .equ _ide_base + 4 ; sector address lba 1 [8:15]
0055   0000             _ide_r5           .equ _ide_base + 5 ; sector address lba 2 [16:23]
0056   0000             _ide_r6           .equ _ide_base + 6 ; sector address lba 3 [24:27 (lsb)]
0057   0000             _ide_r7           .equ _ide_base + 7 ; read: status, write: command       
0058   0000             
0059   0000             _til311_display   .equ $ffb0         ; bios post code hex display (2 digits) (connected to pio a)
0060   0000             _bios_post_ctrl   .equ $ffb3         ; bios post display control register, 80h = as output
0061   0000             _pio_a            .equ $ffb0    
0062   0000             _pio_b            .equ $ffb1
0063   0000             _pio_c            .equ $ffb2
0064   0000             _pio_control      .equ $ffb3         ; pio control port
0065   0000             
0066   0000             _fdc_config       .equ $ffc0         ; 0 = select_0, 1 = select_1, 2 = side_select, 3 = dden, 4 = in_use_or_head_load, 5 = wd1770_rst
0067   0000             _fdc_status_0     .equ $ffc1         ; 0 = drq, 1 = ready
0068   0000             _fdc_stat_cmd     .equ $ffc8         ; status / command register
0069   0000             _fdc_track        .equ $ffc9         ; track register
0070   0000             _fdc_sector       .equ $ffca         ; sector register
0071   0000             _fdc_data         .equ $ffcb         ; data register
0072   0000             
0073   0000             _timer_c_0        .equ $ffe0         ; timer counter 0
0074   0000             _timer_c_1        .equ $ffe1         ; timer counter 1
0075   0000             _timer_c_2        .equ $ffe2         ; timer counter 2
0076   0000             _timer_ctrl       .equ $ffe3         ; timer control register
0077   0000             
0078   0000             _stack_begin      .equ $f7ff         ; beginning of stack
0079   0000             _fifo_size        .equ 4096
0080   0000             
0081   0000             _mbr              .equ 446
0082   0000             _superblock       .equ 512
0083   0000             
0084   0000             text_org          .equ $400          ; code origin address for all user processes
0085   0000             
0086   0000             
0087   0000             ; ------------------------------------------------------------------------------------------------------------------;
0088   0000             ; DISK LAYOUT:
0089   0000             ; | Metadata               | Size (bytes)    | Blocks (2048 bytes)              |
0090   0000             ; | ---------------------- | --------------- | -------------------------------- |
0091   0000             ; | Bootloader/MBR         | 512 bytes       | 0.25 (1 sector)                  |
0092   0000             ; | Superblock             | 1024 bytes      | 1 block (2048 bytes, must align) |
0093   0000             ; | Block Group Descriptor | \~32 bytes      | 1 block (2048 bytes)             |
0094   0000             ; | Block Bitmap           | 16,384 bytes    | 8 blocks                         |
0095   0000             ; | Inode Bitmap           | 2,048 bytes     | 1 block                          |
0096   0000             ; | Inode Table            | 2,097,152 bytes | 1024 blocks                      |
0097   0000             ; 
0098   0000             ; first 512 bytes: bootloader from 0 to 445, MBR partition table from 446 to 511 (64 bytes)
0099   0000             ; up to 4 partitions, each 16 bytes long
0100   0000             ; MBR:
0101   0000             ; Byte | Description
0102   0000             ; -----|----------------------------
0103   0000             ; 0    | Boot flag (0x80 active, 0x00 inactive)
0104   0000             ; 1-3  | Start CHS (head, sector, cylinder)
0105   0000             ; 4    | Partition type (filesystem ID)
0106   0000             ;   0x83 = Linux native (ext2/3/4)
0107   0000             ;   0x07 = NTFS/exFAT
0108   0000             ;   0x0B = FAT32 CHS
0109   0000             ;   0x0C = FAT32 LBA
0110   0000             ;   0x05 = Extended partition
0111   0000             ; 5-7  | End CHS
0112   0000             ; 8-11 | Start LBA (little endian)
0113   0000             ; 12-15| Size in sectors (little endian)
0114   0000             ; 
0115   0000             ; 
0116   0000             ; SUPERBLOCK:
0117   0000             ; | Field                 | Description                              | Typical Size (bytes) | Notes                           |
0118   0000             ; | --------------------- | ---------------------------------------- | -------------------- | ------------------------------- |
0119   0000             ; | `s_inodes_count`      | Total number of inodes in the filesystem | 4                    | 32-bit unsigned int             |
0120   0000             ; | `s_blocks_count`      | Total number of data blocks              | 4                    | 32-bit unsigned int             |
0121   0000             ; | `s_free_inodes_count` | Number of free inodes                    | 4                    | 32-bit unsigned int             |
0122   0000             ; | `s_free_blocks_count` | Number of free blocks                    | 4                    | 32-bit unsigned int             |
0123   0000             ; | `s_first_data_block`  | Block number of the first data block     | 4                    | 32-bit unsigned int             |
0124   0000             ; | `s_log_block_size`    | Block size = 1024 << `s_log_block_size`  | 4                    | 32-bit unsigned int             |
0125   0000             ; | `s_inode_size`        | Size of each inode (in bytes)            | 2                    | 16-bit unsigned int             |
0126   0000             ; | `s_magic`             | Filesystem signature (`0xEF53`)          | 2                    | 16-bit unsigned int             |
0127   0000             ; | `s_mtime`             | Last mount time                          | 4                    | 32-bit unsigned int (Unix time) |
0128   0000             ; | `s_wtime`             | Last write time                          | 4                    | 32-bit unsigned int (Unix time) |
0129   0000             ; | `s_uuid`              | Unique ID of the filesystem              | 16                   | 128-bit UUID                    |
0130   0000             ; | `s_volume_name`       | Label of the filesystem                  | 16                   | Usually ASCII, padded           |
0131   0000             ; | `s_feature_flags`     | Compatibility flags                      | 4                    | 32-bit unsigned int             |
0132   0000             ; 
0133   0000             ; 
0134   0000             ; inode for root dir is #2, #0 and #1 not used
0135   0000             ; block size: 2048
0136   0000             
0137   0000             ; inode-table format:
0138   0000             ; | Field         | Size (bytes) | Description                                                                                  |
0139   0000             ; | ------------- | ------------ | -------------------------------------------------------------------------------------------- |
0140   0000             ; | `mode`        | 2            | File type and permissions                                                                    |
0141   0000             ; | `uid`         | 2            | Owner user ID                                                                                |
0142   0000             ; | `size`        | 4            | Size of the file in bytes                                                                    |
0143   0000             ; | `atime`       | 4            | Last access time (timestamp)                                                                 |
0144   0000             ; | `ctime`       | 4            | Creation time (timestamp)                                                                    |
0145   0000             ; | `mtime`       | 4            | Last modification time (timestamp)                                                           |
0146   0000             ; | `dtime`       | 4            | Deletion time (timestamp)                                                                    |
0147   0000             ; | `gid`         | 2            | Group ID                                                                                     |
0148   0000             ; | `links_count` | 2            | Number of hard links                                                                         |
0149   0000             ; | `blocks`      | 4            | Number of 512-byte blocks allocated                                                          |
0150   0000             ; | `flags`       | 4            | File flags                                                                                   |
0151   0000             ; | `block`       | 15 x 4 = 60  | Pointers to data blocks (12 direct, 1 single indirect, 1 double indirect, 1 triple indirect) |
0152   0000             
0153   0000             
0154   0000             ; file entry attributes
0155   0000             ; filename (24)
0156   0000             ; attributes (1)       :|0|0|file_type(3bits)|x|w|r|
0157   0000             ; lba (2)              : location of raw data for file entry, or dirid for directory entry
0158   0000             ; size (2)             : filesize
0159   0000             ; day (1)           
0160   0000             ; month (1)
0161   0000             ; year (1)
0162   0000             ; packet size = 32 bytes  : total packet size in bytes
0163   0000             
0164   0000             fst_entry_size      .equ 32  ; bytes
0165   0000             fst_files_per_sect  .equ (512 / fst_entry_size)
0166   0000             fst_files_per_dir   .equ (512 / fst_entry_size)
0167   0000             fst_nbr_directories .equ 64
0168   0000                                 ; 1 sector for header, the rest is for the list of files/dirs
0169   0000             fst_sectors_per_dir .equ (1 + (fst_entry_size * fst_files_per_dir / 512))    
0170   0000             fst_total_sectors   .equ (fst_sectors_per_dir * fst_nbr_directories)
0171   0000             fst_lba_start       .equ 32
0172   0000             fst_lba_end         .equ (fst_lba_start + fst_total_sectors - 1)
0173   0000             
0174   0000             fs_nbr_files        .equ (fst_nbr_directories * fst_files_per_dir)
0175   0000             fs_sectors_per_file .equ 32 ; the first sector is always a header with a null parameter (first byte)
0176   0000                                         ; so that we know which blocks are free or taken
0177   0000             fs_file_size        .equ (fs_sectors_per_file * 512)                  
0178   0000             fs_total_sectors    .equ (fs_nbr_files * fs_sectors_per_file)
0179   0000             fs_lba_start        .equ (fst_lba_end + 1)
0180   0000             fs_lba_end          .equ (fs_lba_start + fs_total_sectors - 1)
0181   0000             
0182   0000             root_id:            .equ fst_lba_start
0183   0000             
0184   0000             ; ------------------------------------------------------------------------------------------------------------------;
0185   0000             ; global system variables
0186   0000             ; ------------------------------------------------------------------------------------------------------------------;
0187   0000             
0188   0000             ; ------------------------------------------------------------------------------------------------------------------;
0189   0000             ; irq table
0190   0000             ; highest priority at lowest address
0191   0000             ; ------------------------------------------------------------------------------------------------------------------;
0192   0000 3C 00       .dw int_0_fdc
0193   0002 3D 00       .dw int_1
0194   0004 3E 00       .dw int_2
0195   0006 3F 00       .dw int_3
0196   0008 40 00       .dw int_4
0197   000A 41 00       .dw int_5_uart1
0198   000C 6D 00       .dw int_6_timer
0199   000E 6E 00       .dw int_7_uart0
0200   0010             
0201   0010             ; ------------------------------------------------------------------------------------------------------------------;
0202   0010             ; kernel reset vector
0203   0010             ; ------------------------------------------------------------------------------------------------------------------;
0204   0010 BE 11       .dw kernel_reset_vector
0205   0012             
0206   0012             ; ------------------------------------------------------------------------------------------------------------------;
0207   0012             ; exception vector table
0208   0012             ; total of 7 entries, starting at address $0012
0209   0012             ; ------------------------------------------------------------------------------------------------------------------;
0210   0012 81 04       .dw trap_privilege
0211   0014 9E 05       .dw trap_div_zero
0212   0016 AB 05       .dw trap_undef_opcode
0213   0018 00 00       .dw 0
0214   001A 00 00       .dw 0
0215   001C 00 00       .dw 0
0216   001E 00 00       .dw 0
0217   0020             
0218   0020             ; ------------------------------------------------------------------------------------------------------------------;
0219   0020             ; system call vector table
0220   0020             ; starts at address $0020
0221   0020             ; ------------------------------------------------------------------------------------------------------------------;
0222   0020 8D 04       .dw syscall_break
0223   0022 AC 05       .dw syscall_rtc
0224   0024 CD 06       .dw syscall_ide
0225   0026 8D 07       .dw syscall_io
0226   0028 62 08       .dw syscall_file_system
0227   002A 0B 11       .dw syscall_create_proc
0228   002C 46 04       .dw syscall_list_procs
0229   002E DE 05       .dw syscall_datetime
0230   0030 02 04       .dw syscall_reboot
0231   0032 D5 10       .dw syscall_pause_proc
0232   0034 0E 04       .dw syscall_resume_proc
0233   0036 92 10       .dw syscall_terminate_proc
0234   0038 CE 03       .dw syscall_system
0235   003A 0D 01       .dw syscall_fdc
0236   003C             
0237   003C             ; ------------------------------------------------------------------------------------------------------------------;
0238   003C             ; system call aliases
0239   003C             ; ------------------------------------------------------------------------------------------------------------------;
0240   003C             sys_break            .equ 0
0241   003C             sys_rtc              .equ 1
0242   003C             sys_ide              .equ 2
0243   003C             sys_io               .equ 3
0244   003C             sys_filesystem       .equ 4
0245   003C             sys_create_proc      .equ 5
0246   003C             sys_list_proc        .equ 6
0247   003C             sys_datetime         .equ 7
0248   003C             sys_reboot           .equ 8
0249   003C             sys_pause_proc       .equ 9
0250   003C             sys_resume_proc      .equ 10
0251   003C             sys_terminate_proc   .equ 11
0252   003C             sys_system           .equ 12
0253   003C             sys_fdc              .equ 13
0254   003C             
0255   003C             ; aliases for individual 'al' options for FDC system calls
0256   003C             fdc_al_restore      .equ 0
0257   003C             fdc_al_step         .equ 1
0258   003C             fdc_al_step_in      .equ 2
0259   003C             fdc_al_step_out     .equ 3
0260   003C             fdc_al_seek         .equ 4
0261   003C             fdc_al_format_128   .equ 5
0262   003C             fdc_al_formatdisk_128   .equ 6
0263   003C             fdc_al_format_512   .equ 7
0264   003C             fdc_al_formatdisk_512   .equ 8
0265   003C             fdc_al_read_addr    .equ 9
0266   003C             fdc_al_read_track   .equ 10
0267   003C             fdc_al_read_sect    .equ 11
0268   003C             fdc_al_write_sect   .equ 12
0269   003C             fdc_al_force_int    .equ 13
0270   003C             fdc_al_status0      .equ 14
0271   003C             fdc_al_status1      .equ 15
0272   003C             
0273   003C             ; ------------------------------------------------------------------------------------------------------------------;
0274   003C             ; alias exports
0275   003C             ; ------------------------------------------------------------------------------------------------------------------;
0276   003C             .export text_org
0277   003C             .export sys_break
0278   003C             .export sys_rtc
0279   003C             .export sys_ide
0280   003C             .export sys_io
0281   003C             .export sys_filesystem
0282   003C             .export sys_create_proc
0283   003C             .export sys_list_proc
0284   003C             .export sys_datetime
0285   003C             .export sys_reboot
0286   003C             .export sys_pause_proc
0287   003C             .export sys_resume_proc
0288   003C             .export sys_terminate_proc
0289   003C             .export sys_system
0290   003C             .export sys_fdc
0291   003C             
0292   003C             .export _til311_display
0293   003C             
0294   003C             .export _fdc_config        
0295   003C             .export _fdc_status_0      
0296   003C             .export _fdc_stat_cmd     
0297   003C             
0298   003C             ; exports of aliases for individual 'al' options for FDC system calls
0299   003C             .export fdc_al_restore
0300   003C             .export fdc_al_step
0301   003C             .export fdc_al_step_in
0302   003C             .export fdc_al_step_out
0303   003C             .export fdc_al_seek
0304   003C             .export fdc_al_format_128
0305   003C             .export fdc_al_formatdisk_128
0306   003C             .export fdc_al_format_512
0307   003C             .export fdc_al_formatdisk_512
0308   003C             .export fdc_al_read_addr
0309   003C             .export fdc_al_read_track
0310   003C             .export fdc_al_read_sect
0311   003C             .export fdc_al_write_sect
0312   003C             .export fdc_al_force_int
0313   003C             .export fdc_al_status0
0314   003C             .export fdc_al_status1
0315   003C             
0316   003C             ; ------------------------------------------------------------------------------------------------------------------;
0317   003C             ; irqs' code block
0318   003C             ; ------------------------------------------------------------------------------------------------------------------;
0319   003C             ; 5.25" floppy drive controller irq
0320   003C             int_0_fdc:
0321   003C 06            sysret
0322   003D             int_1:
0323   003D 06            sysret
0324   003E             int_2:
0325   003E 06            sysret
0326   003F             int_3:
0327   003F 06            sysret
0328   0040             int_4:
0329   0040 06            sysret
0330   0041             
0331   0041             ; ------------------------------------------------------------------------------------------------------------------;
0332   0041             ; uart1 interrupt
0333   0041             ; ------------------------------------------------------------------------------------------------------------------;
0334   0041             int_5_uart1:
0335   0041 D7            push a
0336   0042 DA            push d
0337   0043 E1            pushf
0338   0044 1D 88 FF      mov al, [_uart1_data]       ; get character
0339   0047 B9 03         cmp al, $03                 ; ctrl-c
0340   0049 C6 9A 00      je ctrlc
0341   004C B9 1A         cmp al, $1a                 ; ctrl-z
0342   004E C6 A0 00      je ctrlz
0343   0051               ;mov [[d]], al              ; TODO: implement this double indirection instruction
0344   0051 3B 55 19      mov d, fifo_in
0345   0054 FD 2A         mov d, [d]
0346   0056 3E            mov [d], al                 ; add to fifo
0347   0057 13            mov a, d
0348   0058 77            inc a
0349   0059 AF 5E 31      cmp a, fifo + _fifo_size     ; check if pointer reached the end of the fifo
0350   005C C7 62 00      jne int_5_continue
0351   005F 10 5E 21      mov a, fifo  
0352   0062             int_5_continue:  
0353   0062 42 55 19      mov [fifo_in], a            ; update fifo pointer
0354   0065 1A            mov al, ah
0355   0066 3D B0 FF      mov [_til311_display], al
0356   0069 EE            popf
0357   006A E7            pop d
0358   006B E4            pop a  
0359   006C 06            sysret
0360   006D             
0361   006D             ; ------------------------------------------------------------------------------------------------------------------;
0362   006D             ; timer irq
0363   006D             ; ------------------------------------------------------------------------------------------------------------------;
0364   006D             int_6_timer:  
0365   006D 06            sysret
0366   006E             
0367   006E             ; ------------------------------------------------------------------------------------------------------------------;
0368   006E             ; uart0 interrupt
0369   006E             ; ------------------------------------------------------------------------------------------------------------------;
0370   006E             int_7_uart0:
0371   006E D7            push a
0372   006F DA            push d
0373   0070 E1            pushf
0374   0071 1D 80 FF      mov al, [_uart0_data]       ; get character
0375   0074 B9 03         cmp al, $03                 ; ctrl-c
0376   0076 C6 9A 00      je ctrlc
0377   0079 B9 1A         cmp al, $1a                 ; ctrl-z
0378   007B C6 A0 00      je ctrlz
0379   007E               ;mov [[d]], al              ; TODO: implement this double indirection instruction
0380   007E 3B 55 19      mov d, fifo_in
0381   0081 FD 2A         mov d, [d]
0382   0083 3E            mov [d], al                 ; add to fifo
0383   0084 13            mov a, d
0384   0085 77            inc a
0385   0086 AF 5E 31      cmp a, fifo + _fifo_size     ; check if pointer reached the end of the fifo
0386   0089 C7 8F 00      jne int_7_continue
0387   008C 10 5E 21      mov a, fifo  
0388   008F             int_7_continue:  
0389   008F 42 55 19      mov [fifo_in], a            ; update fifo pointer
0390   0092 1A            mov al, ah
0391   0093 3D B0 FF      mov [_til311_display], al
0392   0096 EE            popf
0393   0097 E7            pop d
0394   0098 E4            pop a  
0395   0099 06            sysret
0396   009A             
0397   009A             ctrlc:
0398   009A 51 05 00      add sp, 5
0399   009D 0A 92 10      jmp syscall_terminate_proc
0400   00A0             ctrlz:
0401   00A0 51 05 00      add sp, 5
0402   00A3 0A D5 10      jmp syscall_pause_proc      ; pause current process and go back to the shell
0403   00A6             
0404   00A6             ; ------------------------------------------------------------------------------------------------------------------;
0405   00A6             ; ext2 file system
0406   00A6             ; ------------------------------------------------------------------------------------------------------------------;
0407   00A6             sys_mkfs:
0408   00A6             ; master boot record
0409   00A6 F2 BE 01 80   mov byte[_mbr], $80
0410   00AA B8 BF 01 00   mov word[_mbr + 1], $0000
0410   00AE 00 
0411   00AF F2 C1 01 00   mov byte[_mbr + 3], $00
0412   00B3 F2 C2 01 83   mov byte[_mbr + 4], $83  ; ext2
0413   00B7 B8 C3 01 00   mov word[_mbr + 5], $0000   ;end CHS
0413   00BB 00 
0414   00BC F2 C5 01 00   mov byte[_mbr + 7], $00    
0415   00C0 B8 C6 01 01   mov word[_mbr + 8], 1       ; start LBA of kernel
0415   00C4 00 
0416   00C5 B8 C8 01 00   mov word[_mbr + 10], $0000
0416   00C9 00 
0417   00CA B8 CA 01 00   mov word[_mbr + 12], $0000       ; size = 65536 sectors = 32MB
0417   00CE 00 
0418   00CF B8 CB 01 01   mov word[_mbr + 13], $0001
0418   00D3 00 
0419   00D4             
0420   00D4             ; superblock
0421   00D4 B8 00 02 00   mov word[_superblock], 2048
0421   00D8 00 
0422   00D9 B8 02 02 00   mov word[_superblock + 2], $0000
0422   00DD 00 
0423   00DE B8 04 02 00   mov word[_superblock + 4], $2800
0423   00E2 00 
0424   00E3 B8 06 02 00   mov word[_superblock + 6], $0000
0424   00E7 00 
0425   00E8             
0426   00E8             ; --- MBR signature ---
0427   00E8 B8 FE 01 55   mov word [510], $AA55          ; Must be present for BIOS to boot
0427   00EC 00 
0428   00ED             
0429   00ED             
0430   00ED             ; ------------------------------------------------------------------------------------------------------------------;
0431   00ED             ; floppy drive syscalls
0432   00ED             ; ------------------------------------------------------------------------------------------------------------------;
0433   00ED             ; data for formatting a floppy drive in single density mode (128 bytes per sector):
0434   00ED             ; fdc_40_ff:
0435   00ED             ;   .fill 40,  $ff    ; or 00                                                                                
0436   00ED             ; fdc_128_format_inner:
0437   00ED             ;   .fill 6,   $00    ;                                                                            <--|        
0438   00ED             ;   .fill 1,   $fe    ; id address mark                                                               |        
0439   00ED             ;   .fill 1,   $00    ; track number  0 thru 39                                                       |                    
0440   00ED             ;   .fill 1,   $00    ; side number 00 or 01                                                          |                
0441   00ED             ;   .fill 1,   $01    ; sector number  0x01 through 0x10                                              |                              
0442   00ED             ;   .fill 1,   $00    ; sector length                                                                 |                        
0443   00ED             ;   .fill 1,   $f7    ; 2 crc's written                                                               | write 16 times                 
0444   00ED             ;   .fill 11,  $ff    ; or 00                                                                         |                      
0445   00ED             ;   .fill 6,   $00    ;                                                                               |                        
0446   00ED             ;   .fill 1,   $fb    ; data address mark                                                             |                                  
0447   00ED             ;   .fill 128, $e5    ; data (ibm uses e5)                                                            |                                      
0448   00ED             ;   .fill 1,   $f7    ; 2 crc's written                                                               |                                                        
0449   00ED             ;   .fill 10,  $ff    ; or 00                                                                      <--|                                                  
0450   00ED             ; fdc_128_format_end:
0451   00ED             ;   .fill 369, $ff    ; or 00. continue writing until wd1770 interrupts out. approx 369 bytes.                                                                
0452   00ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0453   00ED             fdc_jmptbl:
0454   00ED 19 01         .dw syscall_fdc_restore
0455   00EF 25 01         .dw syscall_fdc_step
0456   00F1 2D 01         .dw syscall_fdc_step_in
0457   00F3 35 01         .dw syscall_fdc_step_out
0458   00F5 3D 01         .dw syscall_fdc_seek
0459   00F7 4B 01         .dw syscall_fdc_format_128
0460   00F9 9F 01         .dw syscall_fdc_formatdisk_128
0461   00FB 75 01         .dw syscall_fdc_format_512
0462   00FD E1 01         .dw syscall_fdc_formatdisk_512
0463   00FF 49 01         .dw syscall_fdc_read_addr
0464   0101 23 02         .dw syscall_fdc_read_track
0465   0103 52 02         .dw syscall_fdc_read_sect
0466   0105 8A 02         .dw syscall_fdc_write_sect
0467   0107 4A 01         .dw syscall_fdc_force_int
0468   0109 11 01         .dw syscall_fdc_status0
0469   010B 15 01         .dw syscall_fdc_status1
0470   010D             syscall_fdc:
0471   010D FD 0A ED 00   jmp [fdc_jmptbl + al]
0472   0111             
0473   0111             syscall_fdc_status0:
0474   0111 1D C1 FF      mov al, [_fdc_status_0]
0475   0114 06            sysret
0476   0115             
0477   0115             syscall_fdc_status1:
0478   0115 1D C8 FF      mov al, [_fdc_stat_cmd]
0479   0118 06            sysret
0480   0119             
0481   0119             syscall_fdc_restore:
0482   0119 07 BB 02      call fdc_wait_not_busy
0483   011C F2 C8 FF 0B   mov byte [_fdc_stat_cmd], %00001011
0484   0120 F2 C9 FF 00   mov byte [_fdc_track], $00 ; reset track
0485   0124 06            sysret
0486   0125             
0487   0125             syscall_fdc_step:
0488   0125 07 BB 02      call fdc_wait_not_busy
0489   0128 F2 C8 FF 3B   mov byte [_fdc_stat_cmd], %00111011
0490   012C 06            sysret
0491   012D             
0492   012D             syscall_fdc_step_in:
0493   012D 07 BB 02      call fdc_wait_not_busy
0494   0130 F2 C8 FF 53   mov byte [_fdc_stat_cmd], %01010011
0495   0134 06            sysret
0496   0135             
0497   0135             syscall_fdc_step_out:
0498   0135 07 BB 02      call fdc_wait_not_busy
0499   0138 F2 C8 FF 7B   mov byte [_fdc_stat_cmd], %01111011
0500   013C 06            sysret
0501   013D             
0502   013D             ; bl: desired track
0503   013D             syscall_fdc_seek:
0504   013D 07 BB 02      call fdc_wait_not_busy
0505   0140 FD 3D CB FF   mov [_fdc_data], bl ; set desired track to bl
0506   0144 F2 C8 FF 1B   mov byte [_fdc_stat_cmd], %00011011 ; seek command
0507   0148 06            sysret
0508   0149             
0509   0149             syscall_fdc_read_addr:
0510   0149 06            sysret
0511   014A             
0512   014A             syscall_fdc_force_int:
0513   014A 06            sysret
0514   014B             
0515   014B             ; when writing the actual code for formatting multiple tracks, remember to change the track number byte
0516   014B             ; in the ram formatting block because they are all set as 00 right now
0517   014B             ; bl: track number
0518   014B             syscall_fdc_format_128:
0519   014B 07 C6 02      call fdc_format_mem_128
0520   014E 07 BB 02      call fdc_wait_not_busy
0521   0151 FD 3D C9 FF   mov [_fdc_track], bl
0522   0155 FD 4D 5E 33   mov si, transient_area
0523   0159 F2 C8 FF FA   mov byte [_fdc_stat_cmd], %11111010 ; write track command: {1111, 0: enable spin-up seq, 1: settling delay, 1: no write precompensation, 0}
0524   015D 07 9C 03      call fdc_wait_64us
0525   0160             fdc_format_drq_128:
0526   0160 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0527   0163 93 01         test al, $01                ; 4
0528   0165 C6 74 01      jz fdc_format_end_128           ; 8
0529   0168 93 02         test al, $02                ; 4
0530   016A C6 60 01      jz fdc_format_drq_128           ; 8
0531   016D F6            lodsb                       ; 7
0532   016E 3D CB FF      mov [_fdc_data], al         ; 10   
0533   0171 0A 60 01      jmp fdc_format_drq_128
0534   0174             fdc_format_end_128:
0535   0174 06            sysret
0536   0175             
0537   0175             ; when writing the actual code for formatting multiple tracks, remember to change the track number byte
0538   0175             ; in the ram formatting block because they are all set as 00 right now
0539   0175             ; bl: track number
0540   0175             syscall_fdc_format_512:
0541   0175 07 31 03      call fdc_format_mem_512
0542   0178 07 BB 02      call fdc_wait_not_busy
0543   017B FD 3D C9 FF   mov [_fdc_track], bl
0544   017F FD 4D 5E 33   mov si, transient_area
0545   0183 F2 C8 FF FA   mov byte [_fdc_stat_cmd], %11111010 ; write track command: {1111, 0: enable spin-up seq, 1: settling delay, 1: no write precompensation, 0}
0546   0187 07 9C 03      call fdc_wait_64us
0547   018A             fdc_format_drq_512:
0548   018A 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0549   018D 93 01         test al, $01                ; 4
0550   018F C6 9E 01      jz fdc_format_end_512           ; 8
0551   0192 93 02         test al, $02                ; 4
0552   0194 C6 8A 01      jz fdc_format_drq_512           ; 8
0553   0197 F6            lodsb                       ; 7
0554   0198 3D CB FF      mov [_fdc_data], al         ; 10   
0555   019B 0A 8A 01      jmp fdc_format_drq_512
0556   019E             fdc_format_end_512:
0557   019E 06            sysret
0558   019F             
0559   019F             syscall_fdc_formatdisk_128:
0560   019F 2E 00         mov bl, 0
0561   01A1             fdc_formatdisk128_l0:
0562   01A1 07 C6 02      call fdc_format_mem_128
0563   01A4 07 BB 02      call fdc_wait_not_busy
0564   01A7 FD 3D C9 FF   mov [_fdc_track], bl
0565   01AB FD 4D 5E 33   mov si, transient_area
0566   01AF F2 C8 FF FA   mov byte [_fdc_stat_cmd], %11111010 ; write track command
0567   01B3 07 9C 03      call fdc_wait_64us
0568   01B6             fdc_formatdisk_drq_128:
0569   01B6 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0570   01B9 93 01         test al, $01                ; 4
0571   01BB C6 CA 01      jz fdc_formatdisk_end_128           ; 8
0572   01BE 93 02         test al, $02                ; 4
0573   01C0 C6 B6 01      jz fdc_formatdisk_drq_128           ; 8
0574   01C3 F6            lodsb                       ; 7
0575   01C4 3D CB FF      mov [_fdc_data], al         ; 10   
0576   01C7 0A B6 01      jmp fdc_formatdisk_drq_128
0577   01CA             fdc_formatdisk_end_128:
0578   01CA 07 BB 02      call fdc_wait_not_busy
0579   01CD D8            push b
0580   01CE 26 08 00      mov b, 8
0581   01D1 07 A3 03      call wait_xs
0582   01D4 F2 C8 FF 53   mov byte [_fdc_stat_cmd], %01010011  ; step in
0583   01D8 E5            pop b
0584   01D9 6C 01         add bl, 1
0585   01DB C1 28         cmp bl, 40
0586   01DD C7 A1 01      jne fdc_formatdisk128_l0
0587   01E0 06            sysret
0588   01E1             
0589   01E1             syscall_fdc_formatdisk_512:
0590   01E1 2E 00         mov bl, 0
0591   01E3             fdc_formatdisk512_l0:
0592   01E3 07 31 03      call fdc_format_mem_512
0593   01E6 07 BB 02      call fdc_wait_not_busy
0594   01E9 FD 3D C9 FF   mov [_fdc_track], bl
0595   01ED FD 4D 5E 33   mov si, transient_area
0596   01F1 F2 C8 FF F2   mov byte [_fdc_stat_cmd], %11110010 ; write track command
0597   01F5 07 9C 03      call fdc_wait_64us
0598   01F8             fdc_formatdisk_drq_512:
0599   01F8 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0600   01FB 93 01         test al, $01                ; 4
0601   01FD C6 0C 02      jz fdc_formatdisk_end_512           ; 8
0602   0200 93 02         test al, $02                ; 4
0603   0202 C6 F8 01      jz fdc_formatdisk_drq_512           ; 8
0604   0205 F6            lodsb                       ; 7
0605   0206 3D CB FF      mov [_fdc_data], al         ; 10   
0606   0209 0A F8 01      jmp fdc_formatdisk_drq_512
0607   020C             fdc_formatdisk_end_512:
0608   020C 07 BB 02      call fdc_wait_not_busy
0609   020F D8            push b
0610   0210 26 08 00      mov b, 8
0611   0213 07 A3 03      call wait_xs
0612   0216 F2 C8 FF 53   mov byte [_fdc_stat_cmd], %01010011   ; step in
0613   021A E5            pop b
0614   021B 6C 01         add bl, 1
0615   021D C1 28         cmp bl, 40
0616   021F C7 E3 01      jne fdc_formatdisk512_l0
0617   0222 06            sysret
0618   0223             
0619   0223             ; di : destination in user space
0620   0223             ; a  : returns number of read bytes
0621   0223             syscall_fdc_read_track:
0622   0223 07 BB 02      call fdc_wait_not_busy
0623   0226 E3            push di
0624   0227 FD 4F 5E 33   mov di, transient_area
0625   022B F2 C8 FF E8   mov byte [_fdc_stat_cmd], %11101000
0626   022F 07 9C 03      call fdc_wait_64us
0627   0232             fdc_read_track_l0: ; for each byte, we need to wait for drq to be high
0628   0232 1D C8 FF      mov al, [_fdc_stat_cmd]      ; 
0629   0235 93 01         test al, $01                ; check busy bit
0630   0237 C6 46 02      jz fdc_read_track_end
0631   023A 93 02         test al, $02                ; check drq bit
0632   023C C6 32 02      jz fdc_read_track_l0
0633   023F 1D CB FF      mov al, [_fdc_data]     ; 
0634   0242 F7            stosb
0635   0243 0A 32 02      jmp fdc_read_track_l0
0636   0246             ;we need to check if writing to data reg causes a spurious read. so lets check inside the writing loop, how many times we actually write the bytes
0637   0246             ;say the 40 byte loop. if we find that we only write ~20 times, then this indcates this problem.
0638   0246             ;because for every write, if it also reads, then that clears drq, so we need to wait for next drq.
0639   0246             fdc_read_track_end:
0640   0246 50            mov a, di
0641   0247 5F 5E 33      sub a, transient_area
0642   024A F0            pop di
0643   024B FD 4D 5E 33   mov si, transient_area
0644   024F 39            mov c, a  ; copy track over to user space
0645   0250 03            store
0646   0251 06            sysret
0647   0252             
0648   0252             ; sector in bl
0649   0252             ; track in bh
0650   0252             ; di = user space destination
0651   0252             syscall_fdc_read_sect:
0652   0252 07 BB 02      call fdc_wait_not_busy
0653   0255 E3            push di
0654   0256 FD 3D CA FF   mov [_fdc_sector], bl
0655   025A 30            mov bl, bh
0656   025B FD 3D C9 FF   mov [_fdc_track], bl
0657   025F F2 C8 FF 88   mov byte [_fdc_stat_cmd], %10001000
0658   0263 07 9C 03      call fdc_wait_64us
0659   0266 FD 4F 5E 33   mov di, transient_area
0660   026A             fdc_read_sect_l0: ; for each byte, we need to wait for drq to be high
0661   026A 1D C8 FF      mov al, [_fdc_stat_cmd]      ; read lost data flag 10+3+5+8+5+8
0662   026D 93 01         test al, $01                ; check drq bit
0663   026F C6 7E 02      jz fdc_read_sect_end
0664   0272 93 02         test al, $02                ; check drq bit
0665   0274 C6 6A 02      jz fdc_read_sect_l0
0666   0277 1D CB FF      mov al, [_fdc_data]     ; 
0667   027A F7            stosb
0668   027B 0A 6A 02      jmp fdc_read_sect_l0
0669   027E             fdc_read_sect_end:
0670   027E 50            mov a, di
0671   027F 5F 5E 33      sub a, transient_area
0672   0282 F0            pop di
0673   0283 FD 4D 5E 33   mov si, transient_area
0674   0287 39            mov c, a  ; copy sector over to user space
0675   0288 03            store
0676   0289 06            sysret
0677   028A             
0678   028A             ; sector size in c
0679   028A             ; sector in bl
0680   028A             ; track in bh
0681   028A             ; data pointer in si
0682   028A             syscall_fdc_write_sect:
0683   028A 07 BB 02      call fdc_wait_not_busy
0684   028D FD 3D CA FF   mov [_fdc_sector], bl
0685   0291 30            mov bl, bh
0686   0292 FD 3D C9 FF   mov [_fdc_track], bl
0687   0296 FD 4F 5E 33   mov di, transient_area    ; si = data source, di = destination 
0688   029A 04            load                    ; transfer data to kernel space!
0689   029B FD 4D 5E 33   mov si, transient_area
0690   029F F2 C8 FF AA   mov byte [_fdc_stat_cmd], %10101010            ; 101, 0:single sector, 1: disable spinup, 0: no delay, 1: no precomp, 0: normal data mark
0691   02A3 07 9C 03      call fdc_wait_64us
0692   02A6             fdc_write_sect_l0: ; for each byte, we need to wait for drq to be high
0693   02A6 1D C8 FF      mov al, [_fdc_stat_cmd]         ; 10
0694   02A9 93 01         test al, $01                    ; 4
0695   02AB C6 BA 02      jz fdc_write_sect_end           ; 8
0696   02AE 93 02         test al, $02                    ; 4
0697   02B0 C6 A6 02      jz fdc_write_sect_l0            ; 8
0698   02B3 F6            lodsb                           ; 7
0699   02B4 3D CB FF      mov [_fdc_data], al             ; 10   
0700   02B7 0A A6 02      jmp fdc_write_sect_l0
0701   02BA             fdc_write_sect_end:
0702   02BA 06            sysret
0703   02BB             
0704   02BB             fdc_wait_not_busy:
0705   02BB DB            push al
0706   02BC             fdc_wait_not_busy_l0:
0707   02BC 1D C8 FF      mov al, [_fdc_stat_cmd]   
0708   02BF 93 01         test al, $01               
0709   02C1 C7 BC 02      jnz fdc_wait_not_busy_l0          
0710   02C4 E8            pop al
0711   02C5 09            ret
0712   02C6             
0713   02C6             ; track number in bl
0714   02C6             fdc_format_mem_128:
0715   02C6 3B 01 00      mov d, 1
0716   02C9 FD 4F 5E 33   mov di, transient_area
0717   02CD             ; 40 * FF
0718   02CD 38 28 00      mov c, 40
0719   02D0 19 FF         mov al, $ff
0720   02D2             fdc_l0: 
0721   02D2 F7            stosb
0722   02D3 7E            dec c
0723   02D4 C7 D2 02      jnz fdc_l0
0724   02D7             ; 6 * 00
0725   02D7             fdc_inner_loop:
0726   02D7 38 06 00      mov c, 6
0727   02DA 19 00         mov al, $00
0728   02DC             fdc_l1:
0729   02DC F7            stosb
0730   02DD 7E            dec c
0731   02DE C7 DC 02      jnz fdc_l1
0732   02E1             ; FE address mark
0733   02E1             fdc_l2:
0734   02E1 19 FE         mov al, $fe
0735   02E3 F7            stosb
0736   02E4             ; track number
0737   02E4             fdc_l3:
0738   02E4 1B            mov al, bl  ; track number in bl
0739   02E5 F7            stosb
0740   02E6             ; side number
0741   02E6             fdc_l4:
0742   02E6 19 00         mov al, $00
0743   02E8 F7            stosb
0744   02E9             ; sector number
0745   02E9             fdc_l5:
0746   02E9 13            mov a, d
0747   02EA F7            stosb
0748   02EB             ; sector length 128 bytes
0749   02EB             fdc_l6:
0750   02EB 19 00         mov al, $00
0751   02ED F7            stosb
0752   02EE             ; 2 crc's
0753   02EE             fdc_l7:
0754   02EE 19 F7         mov al, $f7
0755   02F0 F7            stosb
0756   02F1             ; 11 times $ff
0757   02F1 38 0B 00      mov c, 11
0758   02F4 19 FF         mov al, $ff
0759   02F6             fdc_l8:
0760   02F6 F7            stosb
0761   02F7 7E            dec c
0762   02F8 C7 F6 02      jnz fdc_l8
0763   02FB             ; 6 times 00
0764   02FB 38 06 00      mov c, 6
0765   02FE 19 00         mov al, $00
0766   0300             fdc_l9:
0767   0300 F7            stosb
0768   0301 7E            dec c
0769   0302 C7 00 03      jnz fdc_l9
0770   0305             ; FB data address mark
0771   0305 19 FB         mov al, $fb
0772   0307             fdc_l10:
0773   0307 F7            stosb
0774   0308             ; 128 bytes sector data
0775   0308 38 80 00      mov c, 128
0776   030B 19 E5         mov al, $E5
0777   030D             fdc_l11:
0778   030D F7            stosb
0779   030E 7E            dec c
0780   030F C7 0D 03      jnz fdc_l11
0781   0312             ; 2 crc's
0782   0312             fdc_l12:
0783   0312 19 F7         mov al, $f7
0784   0314 F7            stosb
0785   0315             ; 10 * $FF
0786   0315 38 0A 00      mov c, 10
0787   0318 19 FF         mov al, $ff
0788   031A             fdc_l13:
0789   031A F7            stosb
0790   031B 7E            dec c
0791   031C C7 1A 03      jnz fdc_l13
0792   031F             ; check whether we did this 16 times
0793   031F 79            inc d
0794   0320 C5 11 00      cmp d, 17
0795   0323 C7 D7 02      jne fdc_inner_loop
0796   0326             ; 500 bytes of FF for end filler. wd1770 writes these until it finishes, so the number varies. usually it writes ~450 bytes
0797   0326 38 F4 01      mov c, 500
0798   0329 19 FF         mov al, $ff
0799   032B             fdc_format_footer:
0800   032B             fdc_footer_drq_loop:
0801   032B F7            stosb
0802   032C 7E            dec c
0803   032D C7 2B 03      jnz fdc_footer_drq_loop
0804   0330 09            ret
0805   0331             
0806   0331             ; track number in bl
0807   0331             fdc_format_mem_512:
0808   0331 3B 01 00      mov d, 1
0809   0334 FD 4F 5E 33   mov di, transient_area
0810   0338             ; 40 * FF
0811   0338 38 28 00      mov c, 40
0812   033B 19 FF         mov al, $ff
0813   033D             fdc_512_l0: 
0814   033D F7            stosb
0815   033E 7E            dec c
0816   033F C7 3D 03      jnz fdc_512_l0
0817   0342             ; 6 * 00
0818   0342             fdc_512_inner_loop:
0819   0342 38 06 00      mov c, 6
0820   0345 19 00         mov al, $00
0821   0347             fdc_512_l1:
0822   0347 F7            stosb
0823   0348 7E            dec c
0824   0349 C7 47 03      jnz fdc_512_l1
0825   034C             ; FE address mark
0826   034C             fdc_512_l2:
0827   034C 19 FE         mov al, $fe
0828   034E F7            stosb
0829   034F             ; track number
0830   034F             fdc_512_l3:
0831   034F 1B            mov al, bl ; track number was in bl
0832   0350 F7            stosb
0833   0351             ; side number
0834   0351             fdc_512_l4:
0835   0351 19 00         mov al, $00
0836   0353 F7            stosb
0837   0354             ; sector number
0838   0354             fdc_512_l5:
0839   0354 13            mov a, d
0840   0355 F7            stosb
0841   0356             ; sector length 512 bytes
0842   0356             fdc_512_l6:
0843   0356 19 02         mov al, $02
0844   0358 F7            stosb
0845   0359             ; 2 crc's
0846   0359             fdc_512_l7:
0847   0359 19 F7         mov al, $f7
0848   035B F7            stosb
0849   035C             ; 11 times $ff
0850   035C 38 0B 00      mov c, 11
0851   035F 19 FF         mov al, $ff
0852   0361             fdc_512_l8:
0853   0361 F7            stosb
0854   0362 7E            dec c
0855   0363 C7 61 03      jnz fdc_512_l8
0856   0366             ; 6 times 00
0857   0366 38 06 00      mov c, 6
0858   0369 19 00         mov al, $00
0859   036B             fdc_512_l9:
0860   036B F7            stosb
0861   036C 7E            dec c
0862   036D C7 6B 03      jnz fdc_512_l9
0863   0370             ; FB data address mark
0864   0370 19 FB         mov al, $fb
0865   0372             fdc_512_l10:
0866   0372 F7            stosb
0867   0373             ; 128 bytes sector data
0868   0373 38 00 02      mov c, 512
0869   0376 19 E5         mov al, $E5
0870   0378             fdc_512_l11:
0871   0378 F7            stosb
0872   0379 7E            dec c
0873   037A C7 78 03      jnz fdc_512_l11
0874   037D             ; 2 crc's
0875   037D             fdc_512_l12:
0876   037D 19 F7         mov al, $f7
0877   037F F7            stosb
0878   0380             ; 10 * $FF
0879   0380 38 0A 00      mov c, 10
0880   0383 19 FF         mov al, $ff
0881   0385             fdc_512_l13:
0882   0385 F7            stosb
0883   0386 7E            dec c
0884   0387 C7 85 03      jnz fdc_512_l13
0885   038A             ; check whether we did this 16 times
0886   038A 79            inc d
0887   038B C5 06 00      cmp d, 6
0888   038E C7 42 03      jne fdc_512_inner_loop
0889   0391             ; 500 bytes of FF for end filler. wd1770 writes these until it finishes, so the number varies. usually it writes ~450 bytes
0890   0391 38 F4 01      mov c, 500
0891   0394 19 FF         mov al, $ff
0892   0396             fdc_512_format_footer:
0893   0396             fdc_512_footer_drq_loop:
0894   0396 F7            stosb
0895   0397 7E            dec c
0896   0398 C7 96 03      jnz fdc_512_footer_drq_loop
0897   039B 09            ret
0898   039C             
0899   039C             ; fetch is 2 cycles long when 'display_reg_load' is false.
0900   039C             ; 64us amounts to 160 cycles of the 2.5mhz clock
0901   039C             ; call u16 is 14 cycles long
0902   039C             ; 160 - 5 - 14 = 
0903   039C             fdc_wait_64us:
0904   039C 3A 0D         mov cl, 13                       ; 5 cycles
0905   039E             fdc_wait_64_loop:
0906   039E 81            dec cl                           ; 3 cycles
0907   039F C7 9E 03      jnz fdc_wait_64_loop             ; 8 cycles
0908   03A2 09            ret
0909   03A3             
0910   03A3             ; number of seconds in b
0911   03A3             wait_xs:
0912   03A3 C0 00 00      cmp b, 0
0913   03A6 C6 B1 03      je wait_xs_end
0914   03A9 07 B2 03      call wait_1s
0915   03AC FD 7D         dec b
0916   03AE 0A A3 03      jmp wait_xs
0917   03B1             wait_xs_end:
0918   03B1 09            ret
0919   03B2             
0920   03B2             wait_1s:
0921   03B2 DB            push al
0922   03B3 D9            push c
0923   03B4 19 03         mov al, 3
0924   03B6             wait_1s_l0:
0925   03B6 38 FF FF      mov c, 65535                       
0926   03B9             wait_1s_l1:
0927   03B9 7E            dec c        ; 4
0928   03BA C7 B9 03      jnz wait_1s_l1   ; 8
0929   03BD 80            dec al
0930   03BE C7 B6 03      jnz wait_1s_l0
0931   03C1 E6            pop c
0932   03C2 E8            pop al
0933   03C3 09            ret
0934   03C4             
0935   03C4             ; ------------------------------------------------------------------------------------------------------------------;
0936   03C4             ; system syscalls
0937   03C4             ; ------------------------------------------------------------------------------------------------------------------;
0938   03C4             system_jmptbl:
0939   03C4 FA 03         .dw system_uname
0940   03C6 01 04         .dw system_whoami
0941   03C8 D4 03         .dw system_poke
0942   03CA D7 03         .dw system_bootloader_install
0943   03CC D2 03         .dw system_peek
0944   03CE             syscall_system:
0945   03CE FD 0A C4 03   jmp [system_jmptbl + al]
0946   03D2             
0947   03D2             ; param register address in register d
0948   03D2             ; param value in register bl
0949   03D2             system_peek:
0950   03D2 32            mov bl, [d]
0951   03D3 06            sysret
0952   03D4             
0953   03D4             ; param register address in register d
0954   03D4             ; param value in register bl
0955   03D4             system_poke:
0956   03D4 FD 3E         mov [d], bl
0957   03D6 06            sysret
0958   03D7             
0959   03D7             ; kernel LBA address in 'b'
0960   03D7             system_bootloader_install:
0961   03D7 D8            push b
0962   03D8 26 00 00      mov b, 0
0963   03DB 38 00 00      mov c, 0
0964   03DE 22 01         mov ah, $01                 ; 1 sector
0965   03E0 3B 5E 33      mov d, transient_area
0966   03E3 07 FC 06      call ide_read_sect          ; read sector
0967   03E6 E5            pop b
0968   03E7 FD 44 FE 01   mov [d + 510], b            ; update LBA address
0969   03EB 26 00 00      mov b, 0
0970   03EE 38 00 00      mov c, 0
0971   03F1 22 01         mov ah, $01                 ; 1 sector
0972   03F3 3B 5E 33      mov d, transient_area
0973   03F6 07 22 07      call ide_write_sect         ; write sector
0974   03F9 06            sysret
0975   03FA             
0976   03FA             system_uname:
0977   03FA 3B 66 19      mov d, s_uname
0978   03FD 07 1A 14      call _puts
0979   0400 06            sysret
0980   0401             
0981   0401             system_whoami:
0982   0401 06            sysret
0983   0402             
0984   0402             ; reboot system
0985   0402             syscall_reboot:
0986   0402 FD D7 FF FF   push word $ffff 
0987   0406 FD DB 00      push byte %00000000             ; dma_ack = 0, interrupts disabled, mode = supervisor, paging = off, halt=0, display_reg_load=0, dir=0
0988   0409 FD D7 C0 01   push word bios_reset_vector     ; and then push reset vector of the shell to the stack
0989   040D 06            sysret
0990   040E             
0991   040E             ;------------------------------------------------------------------------------------------------------;;
0992   040E             ; switch to another process
0993   040E             ; inputs:
0994   040E             ; al = new process number
0995   040E             ;------------------------------------------------------------------------------------------------------;;
0996   040E             syscall_resume_proc:
0997   040E FD 78         mov g, a                            ; save the process number
0998   0410 4B            pusha                               ; save all registers into kernel stack
0999   0411 22 00         mov ah, 0
1000   0413 1D 50 19      mov al, [active_proc_index]
1001   0416 FD 99         shl a              ; x2
1002   0418 B7 88 11      mov a, [proc_table_convert + a]     ; get process state start index
1003   041B 4F            mov di, a
1004   041C 48            mov a, sp
1005   041D 77            inc a
1006   041E 4D            mov si, a
1007   041F 38 14 00      mov c, 20
1008   0422 FD F5         rep movsb                           ; save process state!
1009   0424             ; restore kernel stack position to point before interrupt arrived
1010   0424 51 14 00      add sp, 20
1011   0427             ; now load the new process number!
1012   0427 FD 12         mov a, g                            ; retrieve the process number argument that was saved in the beginning
1013   0429 3D 50 19      mov [active_proc_index], al         ; set new active proc
1014   042C             ; calculate lut entry for next process
1015   042C 22 00         mov ah, 0
1016   042E FD 99         shl a                               ; x2
1017   0430 B7 88 11      mov a, [proc_table_convert + a]     ; get process state start index  
1018   0433 4D            mov si, a                           ; source is proc state block
1019   0434 48            mov a, sp
1020   0435 5F 13 00      sub a, 19
1021   0438 4F            mov di, a                           ; destination is kernel stack
1022   0439             ; restore sp
1023   0439 7D            dec a
1024   043A 47            mov sp, a
1025   043B 38 14 00      mov c, 20
1026   043E FD F5         rep movsb
1027   0440             ; set vm process
1028   0440 1D 50 19      mov al, [active_proc_index]
1029   0443 01            setptb
1030   0444 4C            popa
1031   0445 06            sysret
1032   0446             
1033   0446             ;------------------------------------------------------------------------------------------------------;;
1034   0446             ; list processes
1035   0446             ;------------------------------------------------------------------------------------------------------;;
1036   0446             syscall_list_procs:
1037   0446 3B 87 19      mov d, s_ps_header
1038   0449 07 1A 14      call _puts
1039   044C 3B CF 1C      mov d, proc_availab_table + 1
1040   044F 38 01 00      mov c, 1
1041   0452             list_procs_l0:  
1042   0452 BD 01         cmp byte[d], 1
1043   0454 C7 78 04      jne list_procs_next
1044   0457 2D            mov b, d
1045   0458 61 CE 1C      sub b, proc_availab_table
1046   045B FD 9F 05      shl b, 5
1047   045E DA            push d
1048   045F D8            push b
1049   0460 28            mov b, c
1050   0461 07 BA 14      call print_u8x
1051   0464 22 20         mov ah, ' '
1052   0466 07 EE 12      call _putchar
1053   0469 07 EE 12      call _putchar
1054   046C E5            pop b
1055   046D 74            mov d, b
1056   046E 58 DE 1C      add d, proc_names
1057   0471 07 1A 14      call _puts
1058   0474 07 C7 13      call printnl
1059   0477 E7            pop d
1060   0478             list_procs_next:
1061   0478 79            inc d
1062   0479 78            inc c
1063   047A C2 09 00      cmp c, 9
1064   047D C7 52 04      jne list_procs_l0
1065   0480             list_procs_end:
1066   0480 06            sysret
1067   0481             
1068   0481             ; ------------------------------------------------------------------------------------------------------------------;
1069   0481             ; exceptions code block
1070   0481             ; ------------------------------------------------------------------------------------------------------------------;
1071   0481             ; privilege exception
1072   0481             ; ------------------------------------------------------------------------------------------------------------------;
1073   0481             trap_privilege:
1074   0481 0A 02 04      jmp syscall_reboot
1075   0484 DA            push d
1076   0485 3B 7F 1A      mov d, s_priviledge
1077   0488 07 1A 14      call _puts
1078   048B E7            pop d
1079   048C 06            sysret
1080   048D             
1081   048D             ; ------------------------------------------------------------------------------------------------------------------;
1082   048D             ; breakpoint
1083   048D             ; important: values in the stack are being pushed in big endian. i.e.: msb at low address
1084   048D             ; and lsb at high address. *** need to correct this in the microcode and make it little endian again ***
1085   048D             ; ------------------------------------------------------------------------------------------------------------------;
1086   048D             syscall_break:
1087   048D 4B            pusha
1088   048E             syscall_break_prompt:
1089   048E 3B 48 05      mov d, s_break1
1090   0491 07 1A 14      call _puts
1091   0494 07 C7 13      call printnl
1092   0497 07 1C 15      call scan_u16d
1093   049A AF 00 00      cmp a, 0
1094   049D C6 A8 04      je syscall_break_regs
1095   04A0 AF 01 00      cmp a, 1
1096   04A3 C6 CB 04      je syscall_break_mem
1097   04A6             syscall_break_end:  
1098   04A6 4C            popa
1099   04A7 06            sysret
1100   04A8             syscall_break_regs:
1101   04A8 48            mov a, sp
1102   04A9 53 0E 00      add a, 14               ; back-track 7 registers
1103   04AC 3C            mov d, a
1104   04AD 3A 07         mov cl, 7
1105   04AF             syscall_regs_l0:
1106   04AF 2A            mov b, [d]
1107   04B0 FD AB         swp b
1108   04B2 07 76 14      call print_u16x         ; print register value
1109   04B5 07 C7 13      call printnl
1110   04B8 63 02 00      sub d, 2
1111   04BB 71 01         sub cl, 1
1112   04BD C3 00         cmp cl, 0
1113   04BF C7 AF 04      jne syscall_regs_l0
1114   04C2 0A 8E 04      jmp syscall_break_prompt
1115   04C5 07 C7 13      call printnl
1116   04C8 0A 8E 04      jmp syscall_break_prompt
1117   04CB             syscall_break_mem:
1118   04CB 07 C7 13      call printnl
1119   04CE 07 98 14      call scan_u16x
1120   04D1 4D            mov si, a               ; data source from user space
1121   04D2 FD 4F 5E 31   mov di, scrap_sector    ; destination in kernel space
1122   04D6 38 00 02      mov c, 512
1123   04D9 04            load                    ; transfer data to kernel space!
1124   04DA 3B 5E 31      mov d, scrap_sector     ; dump pointer in d
1125   04DD 38 00 00      mov c, 0
1126   04E0             dump_loop:
1127   04E0 84            mov al, cl
1128   04E1 87 0F         and al, $0f
1129   04E3 C6 31 05      jz print_base
1130   04E6             back:
1131   04E6 1E            mov al, [d]             ; read byte
1132   04E7 2F            mov bl, al
1133   04E8 07 BA 14      call print_u8x
1134   04EB 10 00 20      mov a, $2000
1135   04EE 05 03         syscall sys_io          ; space
1136   04F0 84            mov al, cl
1137   04F1 87 0F         and al, $0f
1138   04F3 B9 0F         cmp al, $0f
1139   04F5 C6 06 05      je print_ascii
1140   04F8             back1:
1141   04F8 79            inc d
1142   04F9 78            inc c
1143   04FA C2 00 02      cmp c, 512
1144   04FD C7 E0 04      jne dump_loop
1145   0500 07 C7 13      call printnl
1146   0503 0A 8E 04      jmp syscall_break_prompt  ; go to syscall_break return point
1147   0506             print_ascii:
1148   0506 10 00 20      mov a, $2000
1149   0509 05 03         syscall sys_io
1150   050B 63 10 00      sub d, 16
1151   050E 26 10 00      mov b, 16
1152   0511             print_ascii_l:
1153   0511 79            inc d
1154   0512 1E            mov al, [d]               ; read byte
1155   0513 B9 20         cmp al, $20
1156   0515 C8 1D 05      jlu dot
1157   0518 B9 7E         cmp al, $7e
1158   051A D0 25 05      jleu ascii
1159   051D             dot:
1160   051D 10 00 2E      mov a, $2e00
1161   0520 05 03         syscall sys_io
1162   0522 0A 2A 05      jmp ascii_continue
1163   0525             ascii:
1164   0525 23            mov ah, al
1165   0526 19 00         mov al, 0
1166   0528 05 03         syscall sys_io
1167   052A             ascii_continue:
1168   052A FD A9 11 05   loopb print_ascii_l
1169   052E 0A F8 04      jmp back1
1170   0531             print_base:
1171   0531 07 C7 13      call printnl
1172   0534 2D            mov b, d
1173   0535 61 5E 31      sub b, scrap_sector      ; remove this later and fix address bases which display incorrectly
1174   0538 07 76 14      call print_u16x          ; display row
1175   053B 10 00 3A      mov a, $3a00
1176   053E 05 03         syscall sys_io
1177   0540 10 00 20      mov a, $2000
1178   0543 05 03         syscall sys_io
1179   0545 0A E6 04      jmp back
1180   0548             
1181   0548             s_break1:  
1182   0548 0A 64 65 62   .db "\ndebugger entry point.\n"
1182   054C 75 67 67 65 
1182   0550 72 20 65 6E 
1182   0554 74 72 79 20 
1182   0558 70 6F 69 6E 
1182   055C 74 2E 0A 
1183   055F 30 2E 20 73   .db "0. show registers\n"
1183   0563 68 6F 77 20 
1183   0567 72 65 67 69 
1183   056B 73 74 65 72 
1183   056F 73 0A 
1184   0571 31 2E 20 73   .db "1. show 512b ram block\n"
1184   0575 68 6F 77 20 
1184   0579 35 31 32 62 
1184   057D 20 72 61 6D 
1184   0581 20 62 6C 6F 
1184   0585 63 6B 0A 
1185   0588 32 2E 20 63   .db "2. continue execution", 0
1185   058C 6F 6E 74 69 
1185   0590 6E 75 65 20 
1185   0594 65 78 65 63 
1185   0598 75 74 69 6F 
1185   059C 6E 00 
1186   059E             
1187   059E             ; ------------------------------------------------------------------------------------------------------------------;
1188   059E             ; divide by zero exception
1189   059E             ; ------------------------------------------------------------------------------------------------------------------;
1190   059E             trap_div_zero:
1191   059E D7            push a
1192   059F DA            push d
1193   05A0 E1            pushf
1194   05A1 3B 96 1A      mov d, s_divzero
1195   05A4 07 1A 14      call _puts
1196   05A7 EE            popf
1197   05A8 E7            pop d
1198   05A9 E4            pop a
1199   05AA 06            sysret ; enable interrupts
1200   05AB             
1201   05AB             ; ------------------------------------------------------------------------------------------------------------------;
1202   05AB             ; undefined opcode exception
1203   05AB             ; ------------------------------------------------------------------------------------------------------------------;
1204   05AB             trap_undef_opcode:
1205   05AB 06            sysret
1206   05AC             
1207   05AC             ; ------------------------------------------------------------------------------------------------------------------;
1208   05AC             ; real-time clock services syscall
1209   05AC             ; rtc i/o bank = ffa0 to ffaf
1210   05AC             ; ffa0 to ffa7 is scratch ram
1211   05AC             ; control register at $ffa8 [ w | r | s | cal4..cal0 ]
1212   05AC             ; al = 0..6 -> get
1213   05AC             ; al = 7..d -> set
1214   05AC             ; ------------------------------------------------------------------------------------------------------------------;
1215   05AC             syscall_rtc:
1216   05AC DB            push al
1217   05AD DA            push d
1218   05AE B9 06         cmp al, 6
1219   05B0 D1 C5 05      jgu syscall_rtc_set
1220   05B3             syscall_rtc_get:
1221   05B3 6A A9         add al, $a9             ; generate rtc address to get to address a9 of clock
1222   05B5 22 FF         mov ah, $ff    
1223   05B7 3C            mov d, a                ; get to ffa9 + offset
1224   05B8 F2 A8 FF 40   mov byte[$ffa8], $40    ; set r bit to 1
1225   05BC 1E            mov al, [d]             ; get data
1226   05BD F2 A8 FF 00   mov byte[$ffa8], 0      ; reset r bit
1227   05C1 23            mov ah, al
1228   05C2 E7            pop d
1229   05C3 E8            pop al
1230   05C4 06            sysret
1231   05C5             syscall_rtc_set:
1232   05C5 DD            push bl
1233   05C6 99            mov bl, ah              ; set data aside
1234   05C7 6A A2         add al, $a2             ; generate rtc address to get to address a9 of clock
1235   05C9 22 FF         mov ah, $ff    
1236   05CB 3C            mov d, a                ; get to ffa9 + offset
1237   05CC 1B            mov al, bl              ; get data back
1238   05CD F2 A8 FF 80   mov byte[$ffa8], $80    ; set w bit to 1
1239   05D1 3E            mov [d], al             ; set data
1240   05D2 F2 A8 FF 00   mov byte[$ffa8], 0      ; reset write bit
1241   05D6 EA            pop bl
1242   05D7 E7            pop d
1243   05D8 E8            pop al
1244   05D9 06            sysret
1245   05DA             
1246   05DA             datetime_serv_tbl:
1247   05DA E2 05         .dw print_date
1248   05DC 54 06         .dw set_date
1249   05DE             syscall_datetime:
1250   05DE FD 0A DA 05   jmp [datetime_serv_tbl + al]      
1251   05E2             print_date:
1252   05E2 10 03 0D      mov a, $0d03           ; print carriage return char
1253   05E5 05 01         syscall sys_rtc        ; get week
1254   05E7 1A            mov al, ah
1255   05E8 22 00         mov ah, 0
1256   05EA FD 9D 02      shl a, 2          
1257   05ED 3B 20 1B      mov d, s_week
1258   05F0 59            add d, a
1259   05F1 07 1A 14      call _puts
1260   05F4 10 00 20      mov a, $2000
1261   05F7 05 03         syscall sys_io         ; display ' '
1262   05F9 19 04         mov al, 4
1263   05FB 05 01         syscall sys_rtc        ; get day
1264   05FD 99            mov bl, ah
1265   05FE 07 BA 14      call print_u8x
1266   0601 10 00 20      mov a, $2000
1267   0604 05 03         syscall sys_io         ; display ' '
1268   0606             ; there is a problem with the month displaying
1269   0606             ; the month is stored as bcd. so when retrieving the month, the value will be in binary
1270   0606             ; even though it is to be understood as bcd.
1271   0606             ; when retrieving the value and adding the string table address offset the value will go overboard!  
1272   0606 19 05         mov al, 05
1273   0608 05 01         syscall sys_rtc        ; get month
1274   060A 1A            mov al, ah
1275   060B 22 00         mov ah, 0
1276   060D FD 9D 02      shl a, 2          
1277   0610 3B EC 1A      mov d, s_months
1278   0613 59            add d, a
1279   0614 07 1A 14      call _puts
1280   0617 10 00 20      mov a, $2000
1281   061A 05 03         syscall sys_io         ; display ' '
1282   061C 2E 20         mov bl, $20
1283   061E 07 BA 14      call print_u8x         ; print 20 for year prefix
1284   0621 19 06         mov al, 06
1285   0623 05 01         syscall sys_rtc        ; get year
1286   0625 99            mov bl, ah
1287   0626 07 BA 14      call print_u8x
1288   0629 10 00 20      mov a, $2000  
1289   062C 05 03         syscall sys_io         ; display ' '
1290   062E 19 02         mov al, 2
1291   0630 05 01         syscall sys_rtc        ; get hours
1292   0632 99            mov bl, ah
1293   0633 07 BA 14      call print_u8x
1294   0636 10 00 3A      mov a, $3a00    
1295   0639 05 03         syscall sys_io         ; display ':'
1296   063B 19 01         mov al, 01
1297   063D 05 01         syscall sys_rtc        ; get minutes
1298   063F 99            mov bl, ah
1299   0640 07 BA 14      call print_u8x
1300   0643 10 00 3A      mov a, $3a00  
1301   0646 05 03         syscall sys_io         ; display ':'
1302   0648 19 00         mov al, 0
1303   064A 05 01         syscall sys_rtc        ; get seconds
1304   064C 99            mov bl, ah
1305   064D 07 BA 14      call print_u8x
1306   0650 07 C7 13      call printnl
1307   0653 06            sysret
1308   0654             set_date:
1309   0654 3B B1 1A      mov d, s_set_year
1310   0657 07 1A 14      call _puts
1311   065A 07 05 15      call scan_u8x          ; read integer into a
1312   065D FD 9D 08      shl a, 8               ; only al used, move to ah
1313   0660 19 0D         mov al, 0dh            ; set rtc year
1314   0662 05 01         syscall sys_rtc        ; set rtc
1315   0664 3B B8 1A      mov d, s_set_month
1316   0667 07 1A 14      call _puts
1317   066A 07 05 15      call scan_u8x          ; read integer into a
1318   066D FD 9D 08      shl a, 8               ; only al used, move to ah
1319   0670 19 0C         mov al, 0ch            ; set rtc month
1320   0672 05 01         syscall sys_rtc        ; set rtc
1321   0674 3B C0 1A      mov d, s_set_day
1322   0677 07 1A 14      call _puts
1323   067A 07 05 15      call scan_u8x          ; read integer into a
1324   067D FD 9D 08      shl a, 8               ; only al used, move to ah
1325   0680 19 0B         mov al, 0bh            ; set rtc month
1326   0682 05 01         syscall sys_rtc        ; set rtc
1327   0684 3B C6 1A      mov d, s_set_week
1328   0687 07 1A 14      call _puts
1329   068A 07 05 15      call scan_u8x          ; read integer into a
1330   068D FD 9D 08      shl a, 8               ; only al used, move to ah
1331   0690 19 0A         mov al, 0ah            ; set rtc month
1332   0692 05 01         syscall sys_rtc        ; set rtc
1333   0694 3B D0 1A      mov d, s_set_hours
1334   0697 07 1A 14      call _puts
1335   069A 07 05 15      call scan_u8x          ; read integer into a
1336   069D FD 9D 08      shl a, 8               ; only al used, move to ah
1337   06A0 19 09         mov al, 09h            ; set rtc month
1338   06A2 05 01         syscall sys_rtc        ; set rtc
1339   06A4 3B D8 1A      mov d, s_set_minutes
1340   06A7 07 1A 14      call _puts
1341   06AA 07 05 15      call scan_u8x          ; read integer into a
1342   06AD FD 9D 08      shl a, 8               ; only al used, move to ah
1343   06B0 19 08         mov al, 08h            ; set rtc month
1344   06B2 05 01         syscall sys_rtc        ; set rtc
1345   06B4 3B E2 1A      mov d, s_set_seconds
1346   06B7 07 1A 14      call _puts
1347   06BA 07 05 15      call scan_u8x          ; read integer into a
1348   06BD FD 9D 08      shl a, 8               ; only al used, move to ah
1349   06C0 19 07         mov al, 07h            ; set rtc month
1350   06C2 05 01         syscall sys_rtc        ; set rtc
1351   06C4 06            sysret
1352   06C5             
1353   06C5             ; ------------------------------------------------------------------------------------------------------------------;
1354   06C5             ; ide services syscall
1355   06C5             ; al = option
1356   06C5             ; 0 = ide reset, 1 = ide sleep, 2 = read sector, 3 = write sector
1357   06C5             ; ide read/write sector
1358   06C5             ; 512 bytes
1359   06C5             ; user buffer pointer in d
1360   06C5             ; ah = number of sectors
1361   06C5             ; cb = lba bytes 3..0
1362   06C5             ; ------------------------------------------------------------------------------------------------------------------;
1363   06C5             ide_serv_tbl:
1364   06C5 D1 06         .dw ide_reset
1365   06C7 E5 06         .dw ide_sleep
1366   06C9 F4 06         .dw ide_read_sect_wrapper
1367   06CB F8 06         .dw ide_write_sect_wrapper
1368   06CD             syscall_ide:
1369   06CD FD 0A C5 06   jmp [ide_serv_tbl + al]    
1370   06D1             
1371   06D1             ide_reset:      
1372   06D1 F2 D7 FF 04   mov byte[_ide_r7], 4            ; reset ide
1373   06D5 07 7E 07      call ide_wait                   ; wait for ide ready             
1374   06D8 F2 D6 FF E0   mov byte[_ide_r6], $e0          ; lba3= 0, master, mode= lba        
1375   06DC F2 D1 FF 01   mov byte[_ide_r1], 1            ; 8-bit transfers      
1376   06E0 F2 D7 FF EF   mov byte[_ide_r7], $ef          ; set feature command
1377   06E4 06            sysret
1378   06E5             ide_sleep:
1379   06E5 07 7E 07      call ide_wait                   ; wait for ide ready             
1380   06E8 F2 D6 FF 40   mov byte [_ide_r6], %01000000   ; lba[3:0](reserved), bit 6=1
1381   06EC F2 D7 FF E6   mov byte [_ide_r7], $e6         ; sleep command
1382   06F0 07 7E 07      call ide_wait                   ; wait for ide ready
1383   06F3 06            sysret
1384   06F4             ide_read_sect_wrapper:
1385   06F4 07 FC 06      call ide_read_sect
1386   06F7 06            sysret
1387   06F8             ide_write_sect_wrapper:
1388   06F8 07 22 07      call ide_write_sect
1389   06FB 06            sysret
1390   06FC             ide_read_sect:
1391   06FC 1A            mov al, ah
1392   06FD 24            mov ah, bl
1393   06FE 42 D2 FF      mov [_ide_r2], a                ; number of sectors (0..255)
1394   0701 1C            mov al, bh
1395   0702 3D D4 FF      mov [_ide_r4], al
1396   0705 12            mov a, c
1397   0706 3D D5 FF      mov [_ide_r5], al
1398   0709 1A            mov al, ah
1399   070A 87 0F         and al, %00001111
1400   070C 8B E0         or al, %11100000                ; mode lba, master
1401   070E 3D D6 FF      mov [_ide_r6], al
1402   0711             ide_read_sect_wait:
1403   0711 1D D7 FF      mov al, [_ide_r7]  
1404   0714 87 80         and al, $80                     ; busy flag
1405   0716 C7 11 07      jnz ide_read_sect_wait
1406   0719 19 20         mov al, $20
1407   071B 3D D7 FF      mov [_ide_r7], al               ; read sector cmd
1408   071E 07 48 07      call ide_read  
1409   0721 09            ret
1410   0722             ide_write_sect:
1411   0722 1A            mov al, ah
1412   0723 24            mov ah, bl
1413   0724 42 D2 FF      mov [_ide_r2], a                ; number of sectors (0..255)
1414   0727 1C            mov al, bh
1415   0728 3D D4 FF      mov [_ide_r4], al
1416   072B 12            mov a, c
1417   072C 3D D5 FF      mov [_ide_r5], al
1418   072F 1A            mov al, ah
1419   0730 87 0F         and al, %00001111
1420   0732 8B E0         or al, %11100000                ; mode lba, master
1421   0734 3D D6 FF      mov [_ide_r6], al
1422   0737             ide_write_sect_wait:
1423   0737 1D D7 FF      mov al, [_ide_r7]  
1424   073A 87 80         and al, $80                     ; busy flag
1425   073C C7 37 07      jnz ide_write_sect_wait
1426   073F 19 30         mov al, $30
1427   0741 3D D7 FF      mov [_ide_r7], al               ; write sector cmd
1428   0744 07 63 07      call ide_write      
1429   0747 09            ret
1430   0748             
1431   0748             ;----------------------------------------------------------------------------------------------------;
1432   0748             ; read ide data
1433   0748             ; pointer in d
1434   0748             ;----------------------------------------------------------------------------------------------------;
1435   0748             ide_read:
1436   0748 DA            push d
1437   0749             ide_read_loop:
1438   0749 1D D7 FF      mov al, [_ide_r7]  
1439   074C 87 80         and al, 80h                     ; busy flag
1440   074E C7 49 07      jnz ide_read_loop               ; wait loop
1441   0751 1D D7 FF      mov al, [_ide_r7]
1442   0754 87 08         and al, %00001000               ; drq flag
1443   0756 C6 61 07      jz ide_read_end
1444   0759 1D D0 FF      mov al, [_ide_r0]
1445   075C 3E            mov [d], al
1446   075D 79            inc d
1447   075E 0A 49 07      jmp ide_read_loop
1448   0761             ide_read_end:
1449   0761 E7            pop d
1450   0762 09            ret
1451   0763             
1452   0763             ;----------------------------------------------------------------------------------------------------;
1453   0763             ; write ide data
1454   0763             ; data pointer in d
1455   0763             ;----------------------------------------------------------------------------------------------------;
1456   0763             ide_write:
1457   0763 DA            push d
1458   0764             ide_write_loop:
1459   0764 1D D7 FF      mov al, [_ide_r7]  
1460   0767 87 80         and al, 80h             ; busy flag
1461   0769 C7 64 07      jnz ide_write_loop      ; wait loop
1462   076C 1D D7 FF      mov al, [_ide_r7]
1463   076F 87 08         and al, %00001000       ; drq flag
1464   0771 C6 7C 07      jz ide_write_end
1465   0774 1E            mov al, [d]
1466   0775 3D D0 FF      mov [_ide_r0], al
1467   0778 79            inc d 
1468   0779 0A 64 07      jmp ide_write_loop
1469   077C             ide_write_end:
1470   077C E7            pop d
1471   077D 09            ret
1472   077E             
1473   077E             ;----------------------------------------------------------------------------------------------------;
1474   077E             ; wait for ide to be ready
1475   077E             ;----------------------------------------------------------------------------------------------------;
1476   077E             ide_wait:
1477   077E 1D D7 FF      mov al, [_ide_r7]  
1478   0781 87 80         and al, 80h        ; busy flag
1479   0783 C7 7E 07      jnz ide_wait
1480   0786 09            ret
1481   0787             
1482   0787             ;----------------------------------------------------------------------------------------------------;
1483   0787             ; io syscall
1484   0787             ;----------------------------------------------------------------------------------------------------;
1485   0787             ; baud  divisor
1486   0787             ; 50    2304
1487   0787             ; 110   1047
1488   0787             ; 300    384
1489   0787             ; 600    192
1490   0787             ; 1200    96
1491   0787             ; 9600    12
1492   0787             ; 19200    6
1493   0787             ; 38400    3
1494   0787             syscall_io_jmp:
1495   0787 E2 07         .dw syscall_io_putchar
1496   0789 FB 07         .dw syscall_io_getch
1497   078B 91 07         .dw syscall_io_uart_setup
1498   078D             syscall_io:
1499   078D FD 0A 87 07   jmp [syscall_io_jmp + al]
1500   0791             ; bit7 is the divisor latch access bit (dlab). it must be set high (logic 1) to access the divisor latches
1501   0791             ; of the baud generator during a read or write operation. it must be set low (logic 0) to access the receiver
1502   0791             ; buffer, the transmitter holding register, or the interrupt enable register.
1503   0791             syscall_io_uart_setup:
1504   0791 1D 45 19      mov al, [sys_uart0_lcr]
1505   0794 8B 80         or al, $80                ; set dlab access bit
1506   0796 3D 83 FF      mov [_uart0_lcr], al      ; 8 data, 2 stop, no parity by default
1507   0799 1D 48 19      mov al, [sys_uart0_div0]
1508   079C 3D 80 FF      mov [_uart0_dlab_0], al   ; divisor latch byte 0
1509   079F 1D 49 19      mov al, [sys_uart0_div1]
1510   07A2 3D 81 FF      mov [_uart0_dlab_1], al   ; divisor latch byte 1      
1511   07A5 1D 45 19      mov al, [sys_uart0_lcr]
1512   07A8 87 7F         and al, $7f               ; clear dlab access bit 
1513   07AA 3D 83 FF      mov [_uart0_lcr], al
1514   07AD 1D 46 19      mov al, [sys_uart0_inten]
1515   07B0 3D 81 FF      mov [_uart0_ier], al      ; interrupts
1516   07B3 1D 47 19      mov al, [sys_uart0_fifoen]
1517   07B6 3D 82 FF      mov [_uart0_fcr], al      ; fifo control
1518   07B9             ; uart1:
1519   07B9 1D 4A 19      mov al, [sys_uart1_lcr]
1520   07BC 8B 80         or al, $80                ; set dlab access bit
1521   07BE 3D 8B FF      mov [_uart1_lcr], al      ; 8 data, 2 stop, no parity by default
1522   07C1 1D 4D 19      mov al, [sys_uart1_div0]
1523   07C4 3D 88 FF      mov [_uart1_dlab_0], al   ; divisor latch byte 0
1524   07C7 1D 4E 19      mov al, [sys_uart1_div1]
1525   07CA 3D 89 FF      mov [_uart1_dlab_1], al   ; divisor latch byte 1      
1526   07CD 1D 4A 19      mov al, [sys_uart1_lcr]
1527   07D0 87 7F         and al, $7f               ; clear dlab access bit 
1528   07D2 3D 8B FF      mov [_uart1_lcr], al
1529   07D5 1D 4B 19      mov al, [sys_uart1_inten]
1530   07D8 3D 89 FF      mov [_uart1_ier], al      ; interrupts
1531   07DB 1D 4C 19      mov al, [sys_uart1_fifoen]
1532   07DE 3D 8A FF      mov [_uart1_fcr], al      ; fifo control
1533   07E1 06            sysret
1534   07E2             
1535   07E2             ; char in ah
1536   07E2             syscall_io_putchar:
1537   07E2             syscall_io_putchar_l0:
1538   07E2 1D 85 FF      mov al, [_uart0_lsr]         ; read line status register
1539   07E5 87 20         and al, $20
1540   07E7 C6 E2 07      jz syscall_io_putchar_l0    
1541   07EA 1A            mov al, ah
1542   07EB 3D 80 FF      mov [_uart0_data], al        ; write char to transmitter holding register
1543   07EE             ; write to uart1
1544   07EE             syscall_io_putchar_l1:
1545   07EE 1D 8D FF      mov al, [_uart1_lsr]         ; read line status register
1546   07F1 87 20         and al, $20
1547   07F3 C6 EE 07      jz syscall_io_putchar_l1
1548   07F6 1A            mov al, ah
1549   07F7 3D 88 FF      mov [_uart1_data], al        ; write char to transmitter holding register
1550   07FA 06            sysret
1551   07FB             
1552   07FB             ; char in ah
1553   07FB             ; al = sucess code
1554   07FB             syscall_io_getch:
1555   07FB D8            push b
1556   07FC DA            push d
1557   07FD FD 0C         sti
1558   07FF             syscall_io_getch_l0:  
1559   07FF 14 57 19      mov a, [fifo_out]
1560   0802 29 55 19      mov b, [fifo_in]
1561   0805 B0            cmp a, b
1562   0806 C6 FF 07      je syscall_io_getch_l0
1563   0809 3C            mov d, a
1564   080A 77            inc a
1565   080B AF 5E 31      cmp a, fifo + _fifo_size      ; check if pointer reached the end of the fifo
1566   080E C7 14 08      jne syscall_io_getch_cont
1567   0811 10 5E 21      mov a, fifo  
1568   0814             syscall_io_getch_cont:  
1569   0814 42 57 19      mov [fifo_out], a             ; update fifo pointer
1570   0817 1E            mov al, [d]                   ; get char
1571   0818 23            mov ah, al
1572   0819             ; here we just echo the char back to the console
1573   0819             syscall_io_getch_echo_l0:
1574   0819 1D 85 FF      mov al, [_uart0_lsr]         ; read line status register
1575   081C 87 20         and al, $20                 ; isolate transmitter empty
1576   081E C6 19 08      jz syscall_io_getch_echo_l0
1577   0821 1A            mov al, ah
1578   0822 3D 80 FF      mov [_uart0_data], al        ; write char to transmitter holding register
1579   0825             syscall_io_getch_echo_l1:
1580   0825 1D 8D FF      mov al, [_uart1_lsr]         ; read line status register
1581   0828 87 20         and al, $20                 ; isolate transmitter empty
1582   082A C6 25 08      jz syscall_io_getch_echo_l1
1583   082D 1A            mov al, ah
1584   082E 3D 88 FF      mov [_uart1_data], al        ; write char to transmitter holding register
1585   0831             syscall_io_getch_noecho:
1586   0831 19 01         mov al, 1                    ; al = 1 means a char successfully received
1587   0833 E7            pop d
1588   0834 E5            pop b
1589   0835 06            sysret
1590   0836             
1591   0836             ;------------------------------------------------------------------------------------------------------;
1592   0836             ; file system data
1593   0836             ;------------------------------------------------------------------------------------------------------;
1594   0836             ; infor for : ide services interrupt
1595   0836             ; ide read/write 512-byte sector
1596   0836             ; al = option
1597   0836             ; user buffer pointer in d
1598   0836             ; ah = number of sectors
1599   0836             ; cb = lba bytes 3..0  
1600   0836             ;------------------------------------------------------------------------------------------------------;
1601   0836             ; file system data structure
1602   0836             ;------------------------------------------------------------------------------------------------------;
1603   0836             ; for a directory we have the header first, followed by metadata
1604   0836             ; header 1 sector (512 bytes)
1605   0836             ; metadata 1 sector (512 bytes)
1606   0836             ; header entries:
1607   0836             ; filename (64)
1608   0836             ; parent dir lba (2) -  to be used for faster backwards navigation...
1609   0836             ;
1610   0836             ; metadata entries:
1611   0836             ; filename (24)
1612   0836             ; attributes (1)  |_|_|file_type(3bits)|x|w|r| types: file, directory, character device
1613   0836             ; lba (2)
1614   0836             ; size (2)
1615   0836             ; day (1)
1616   0836             ; month (1)
1617   0836             ; year (1)
1618   0836             ; packet size = 32 bytes
1619   0836             ;
1620   0836             ; first directory on disk is the root directory '/'
1621   0836             file_system_jmptbl:
1622   0836 66 08         .dw fs_mkfs                   ; 0
1623   0838 00 00         .dw 0                         ; 1
1624   083A C7 08         .dw fs_mkdir                  ; 2
1625   083C 3A 0C         .dw fs_cd                     ; 3
1626   083E 3F 0C         .dw fs_ls                     ; 4
1627   0840 2A 0D         .dw fs_mktxt                  ; 5
1628   0842 F5 0D         .dw fs_mkbin                  ; 6
1629   0844 BC 0E         .dw fs_pwd                    ; 7
1630   0846 D9 0E         .dw fs_cat                    ; 8
1631   0848 35 0F         .dw fs_rmdir                  ; 9
1632   084A 91 0F         .dw fs_rm                     ; 10
1633   084C 00 00         .dw 0                         ; 11
1634   084E 00 00         .dw 0                         ; 12
1635   0850 00 00         .dw 0                         ; 13
1636   0852 6D 08         .dw fs_chmod                  ; 14
1637   0854 F9 0F         .dw fs_mv                     ; 15
1638   0856 67 08         .dw fs_cd_root                ; 16
1639   0858 36 0C         .dw fs_get_curr_dirid         ; 17
1640   085A 12 0A         .dw fs_dir_id_to_path         ; 18
1641   085C 78 0A         .dw fs_path_to_dir_id_user    ; 19
1642   085E 92 0B         .dw fs_load_from_path_user    ; 20  
1643   0860 02 0B         .dw fs_filepath_exists_user   ; 21
1644   0862             
1645   0862             syscall_file_system:
1646   0862 FD 0A 36 08   jmp [file_system_jmptbl + al]
1647   0866             
1648   0866             fs_mkfs:  
1649   0866 06            sysret  
1650   0867               
1651   0867             fs_cd_root:
1652   0867 B8 59 19 20   mov word [current_dir_id], root_id      ; set current directory lba to root
1652   086B 00 
1653   086C 06            sysret  
1654   086D             
1655   086D             ; filename in d (userspace data)
1656   086D             ; permission in bl
1657   086D             fs_chmod:
1658   086D DD            push bl
1659   086E FD 4E         mov si, d
1660   0870 FD 4F 5E 1F   mov di, user_data
1661   0874 38 80 00      mov c, 128
1662   0877 04            load                        ; load filename from user-space
1663   0878 29 59 19      mov b, [current_dir_id]
1664   087B FD 77         inc b                       ; metadata sector
1665   087D 38 00 00      mov c, 0                    ; upper lba = 0
1666   0880 22 01         mov ah, $01                  ; 1 sector
1667   0882 3B 5E 33      mov d, transient_area
1668   0885 07 FC 06      call ide_read_sect          ; read directory
1669   0888 FD 10         cla
1670   088A 42 51 19      mov [index], a              ; reset file counter
1671   088D             fs_chmod_l1:
1672   088D FD 4E         mov si, d
1673   088F FD 4F 5E 1F   mov di, user_data
1674   0893 07 5D 12      call _strcmp
1675   0896 C6 AD 08      je fs_chmod_found_entry
1676   0899 58 20 00      add d, 32
1677   089C 14 51 19      mov a, [index]
1678   089F 77            inc a
1679   08A0 42 51 19      mov [index], a
1680   08A3 AF 10 00      cmp a, fst_files_per_dir
1681   08A6 C7 8D 08      jne fs_chmod_l1
1682   08A9 EA            pop bl
1683   08AA 0A C6 08      jmp fs_chmod_not_found
1684   08AD             fs_chmod_found_entry:  
1685   08AD FD 79         mov g, b                    ; save lba
1686   08AF EA            pop bl                      ; retrieve saved permission value
1687   08B0 1F 18 00      mov al, [d + 24]            ; read file permissions
1688   08B3 87 F8         and al, %11111000           ; remove all permissions, keep other flags
1689   08B5 8C            or al, bl                   ; set new permissions
1690   08B6 3F 18 00      mov [d + 24], al            ; write new permissions
1691   08B9 38 00 00      mov c, 0
1692   08BC 3B 5E 33      mov d, transient_area
1693   08BF 22 01         mov ah, $01                 ; disk write 1 sect
1694   08C1 FD 27         mov b, g                    ; retrieve lba
1695   08C3 07 22 07      call ide_write_sect         ; write sector
1696   08C6             fs_chmod_not_found:
1697   08C6 06            sysret
1698   08C7             
1699   08C7             ;------------------------------------------------------------------------------------------------------;
1700   08C7             ; create new directory
1701   08C7             ;------------------------------------------------------------------------------------------------------;
1702   08C7             ; search list for null name entry. add new directory to list
1703   08C7             fs_mkdir:
1704   08C7 FD 4E         mov si, d
1705   08C9 FD 4F 5E 1F   mov di, user_data
1706   08CD 38 00 02      mov c, 512
1707   08D0 04            load                        ; load data from user-space
1708   08D1 26 22 00      mov b, fst_lba_start + 2    ; start at 2 because lba  0 is root (this would also cause issues                 
1709   08D4                                           ; when checking for null name, since root has a null name)
1710   08D4 38 00 00      mov c, 0                    ; upper lba = 0
1711   08D7             fs_mkdir_l1:  
1712   08D7 22 01         mov ah, $01                  ; 1 sector
1713   08D9 3B 5E 33      mov d, transient_area
1714   08DC 07 FC 06      call ide_read_sect          ; read sector
1715   08DF BD 00         cmp byte[d], 0              ; check for null
1716   08E1 C6 EA 08      je fs_mkdir_found_null
1717   08E4 55 02 00      add b, fst_sectors_per_dir  ; skip directory
1718   08E7 0A D7 08      jmp fs_mkdir_l1
1719   08EA             fs_mkdir_found_null:
1720   08EA             ;create header file by grabbing dir name from parameter
1721   08EA D8            push b                      ; save new directory's lba
1722   08EB 38 40 00      mov c, 64
1723   08EE FD 4D 5E 1F   mov si, user_data
1724   08F2 FD 4F 5E 33   mov di, transient_area
1725   08F6 FD F5         rep movsb                   ; copy dirname from user_data to transient_area
1726   08F8 14 59 19      mov a, [current_dir_id]
1727   08FB 42 9E 33      mov [transient_area + 64], a    ; store parent directory lba
1728   08FE 19 00         mov al, 0
1729   0900 FD 4F 5E 35   mov di, transient_area + 512
1730   0904 38 00 02      mov c, 512
1731   0907 FD F7         rep stosb                       ; clean buffer
1732   0909 38 00 00      mov c, 0                        ; reset lba(c) to 0
1733   090C             ; write directory entry sectors
1734   090C 3B 5E 33      mov d, transient_area
1735   090F 22 02         mov ah, $02                     ; disk write, 2 sectors
1736   0911 07 22 07      call ide_write_sect             ; write sector
1737   0914             ; now we need to add the new directory to the list, inside the current directory
1738   0914 29 59 19      mov b, [current_dir_id]
1739   0917 FD 77         inc b                           ; metadata sector
1740   0919 38 00 00      mov c, 0
1741   091C FD 79         mov g, b                        ; save lba
1742   091E 3B 5E 33      mov d, transient_area
1743   0921 22 01         mov ah, $01                  ; 1 sector
1744   0923 07 FC 06      call ide_read_sect              ; read metadata sector
1745   0926             fs_mkdir_l2:
1746   0926 BD 00         cmp byte[d], 0
1747   0928 C6 31 09      je fs_mkdir_found_null2
1748   092B 58 20 00      add d, fst_entry_size
1749   092E 0A 26 09      jmp fs_mkdir_l2                ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
1750   0931             fs_mkdir_found_null2:
1751   0931 FD 4D 5E 1F   mov si, user_data
1752   0935 FD 50         mov di, d
1753   0937 07 72 12      call _strcpy                    ; copy directory name
1754   093A 58 18 00      add d, 24                       ; goto attributes
1755   093D 19 0B         mov al, %00001011               ; directory, no execute, write, read
1756   093F 3E            mov [d], al      
1757   0940 79            inc d
1758   0941 E5            pop b
1759   0942 D8            push b                          ; push lba back
1760   0943 FD 43         mov [d], b                      ; save lba
1761   0945             ; set file creation date  
1762   0945 58 04 00      add d, 4
1763   0948 19 04         mov al, 4
1764   094A 05 01         syscall sys_rtc
1765   094C 1A            mov al, ah
1766   094D 3E            mov [d], al                     ; set day
1767   094E 79            inc d
1768   094F 19 05         mov al, 5
1769   0951 05 01         syscall sys_rtc
1770   0953 1A            mov al, ah
1771   0954 3E            mov [d], al                     ; set month
1772   0955 79            inc d
1773   0956 19 06         mov al, 6
1774   0958 05 01         syscall sys_rtc
1775   095A 1A            mov al, ah
1776   095B 3E            mov [d], al                     ; set year
1777   095C             ; write sector into disk for new directory entry
1778   095C FD 27         mov b, g
1779   095E 38 00 00      mov c, 0
1780   0961 3B 5E 33      mov d, transient_area
1781   0964 22 01         mov ah, $01                     ; disk write, 1 sector
1782   0966 07 22 07      call ide_write_sect             ; write sector
1783   0969             
1784   0969             ; after adding the new directory's information to its parent directory's list
1785   0969             ; we need to now enter the new directory, and to it add two new directories!
1786   0969             ; which directories do we need to add ? '..' and '.' are the directories needed.
1787   0969             ; importantly, note that these two new directories are only entries in the list
1788   0969             ; and do not have actual physical entries in the disk as real directories.
1789   0969             ; i.e. they only exist as list entries in the new directory created so that
1790   0969             ; the new directory can reference its parent and itself.
1791   0969             ; we need to add both '..' and '.'
1792   0969             ; this first section is for '..' and on the section below we do the same for '.'
1793   0969 E5            pop b                         ; retrieve the new directory's lba  
1794   096A D8            push b                        ; and save again
1795   096B FD 77         inc b
1796   096D 38 00 00      mov c, 0
1797   0970 FD 79         mov g, b                      ; save lba
1798   0972 3B 5E 33      mov d, transient_area
1799   0975 22 01         mov ah, $01                  ; 1 sector
1800   0977 07 FC 06      call ide_read_sect            ; read metadata sector
1801   097A             fs_mkdir_l3:
1802   097A BD 00         cmp byte[d], 0
1803   097C C6 85 09      je fs_mkdir_found_null3
1804   097F 58 20 00      add d, fst_entry_size
1805   0982 0A 7A 09      jmp fs_mkdir_l3              ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
1806   0985             fs_mkdir_found_null3:
1807   0985 FD 4D 78 19   mov si, s_parent_dir
1808   0989 FD 50         mov di, d
1809   098B 07 72 12      call _strcpy                  ; copy directory name
1810   098E 58 18 00      add d, 24                     ; goto attributes
1811   0991 19 0B         mov al, %00001011             ; directory, no execute, write, read, 
1812   0993 3E            mov [d], al      
1813   0994 79            inc d
1814   0995 29 59 19      mov b, [current_dir_id]        ; retrieve the parent directorys lba
1815   0998 FD 43         mov [d], b                    ; save lba
1816   099A             ; set file creation date  
1817   099A 58 04 00      add d, 4
1818   099D 19 04         mov al, 4
1819   099F 05 01         syscall sys_rtc
1820   09A1 1A            mov al, ah
1821   09A2 3E            mov [d], al                   ; set day
1822   09A3 79            inc d
1823   09A4 19 05         mov al, 5
1824   09A6 05 01         syscall sys_rtc
1825   09A8 1A            mov al, ah
1826   09A9 3E            mov [d], al                   ; set month
1827   09AA 79            inc d
1828   09AB 19 06         mov al, 6
1829   09AD 05 01         syscall sys_rtc
1830   09AF 1A            mov al, ah
1831   09B0 3E            mov [d], al                   ; set year
1832   09B1             ; write sector into disk for new directory entry
1833   09B1 FD 27         mov b, g
1834   09B3 38 00 00      mov c, 0
1835   09B6 3B 5E 33      mov d, transient_area
1836   09B9 22 01         mov ah, $01                   ; disk write, 1 sector
1837   09BB 07 22 07      call ide_write_sect           ; write sector
1838   09BE             ;;;;;;;;;;;;;
1839   09BE             ; like we did above for '..', we need to now add the '.' directory to the list.
1840   09BE             ;------------------------------------------------------------------------------------------------------;
1841   09BE E5            pop b                         ; retrieve the new directory's lba  
1842   09BF D8            push b
1843   09C0 FD 77         inc b                         ; metadata sector
1844   09C2 38 00 00      mov c, 0
1845   09C5 FD 79         mov g, b                      ; save lba
1846   09C7 3B 5E 33      mov d, transient_area
1847   09CA 22 01         mov ah, $01                  ; 1 sector
1848   09CC 07 FC 06      call ide_read_sect            ; read metadata sector
1849   09CF             fs_mkdir_l4:
1850   09CF BD 00         cmp byte[d], 0
1851   09D1 C6 DA 09      je fs_mkdir_found_null4
1852   09D4 58 20 00      add d, fst_entry_size
1853   09D7 0A CF 09      jmp fs_mkdir_l4              ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
1854   09DA             fs_mkdir_found_null4:
1855   09DA FD 4D 7B 19   mov si, s_current_dir
1856   09DE FD 50         mov di, d
1857   09E0 07 72 12      call _strcpy                  ; copy directory name
1858   09E3 58 18 00      add d, 24                     ; goto attributes
1859   09E6 19 0B         mov al, %00001011             ; directory, no execute, write, read, 
1860   09E8 3E            mov [d], al      
1861   09E9 79            inc d
1862   09EA E5            pop b                         ; new directory's lba itself. for self-referential directory entry '.'
1863   09EB FD 43         mov [d], b                    ; save lba
1864   09ED             ; set file creation date  
1865   09ED 58 04 00      add d, 4
1866   09F0 19 04         mov al, 4
1867   09F2 05 01         syscall sys_rtc
1868   09F4 1A            mov al, ah
1869   09F5 3E            mov [d], al                   ; set day
1870   09F6 79            inc d
1871   09F7 19 05         mov al, 5
1872   09F9 05 01         syscall sys_rtc
1873   09FB 1A            mov al, ah
1874   09FC 3E            mov [d], al                   ; set month
1875   09FD 79            inc d
1876   09FE 19 06         mov al, 6
1877   0A00 05 01         syscall sys_rtc
1878   0A02 1A            mov al, ah
1879   0A03 3E            mov [d], al                   ; set year
1880   0A04             ; write sector into disk for new directory entry
1881   0A04 FD 27         mov b, g
1882   0A06 38 00 00      mov c, 0
1883   0A09 3B 5E 33      mov d, transient_area
1884   0A0C 22 01         mov ah, $01                   ; disk write, 1 sector
1885   0A0E 07 22 07      call ide_write_sect           ; write sector
1886   0A11             fs_mkdir_end:
1887   0A11 06            sysret
1888   0A12             
1889   0A12             ;------------------------------------------------------------------------------------------------------;
1890   0A12             ; get path from a given directory dirid
1891   0A12             ; pseudo code:
1892   0A12             ;  fs_dir_id_to_path(int dirid, char *d){
1893   0A12             ;    if(dirid == 0){
1894   0A12             ;      reverse path in d;
1895   0A12             ;      return;
1896   0A12             ;    }
1897   0A12             ;    else{
1898   0A12             ;      copy directory name to end of d;
1899   0A12             ;      add '/' to end of d;
1900   0A12             ;      parentid = get parent directory id;
1901   0A12             ;      fs_dir_id_to_path(parentid, d);
1902   0A12             ;    }
1903   0A12             ;  }
1904   0A12             ; a = dirid
1905   0A12             ; d = generated path string pointer
1906   0A12             ;------------------------------------------------------------------------------------------------------;
1907   0A12             ; sample path: /usr/bin
1908   0A12             fs_dir_id_to_path:
1909   0A12 3B DE 1E      mov d, filename
1910   0A15 19 00         mov al, 0
1911   0A17 3E            mov [d], al                     ; initialize path string 
1912   0A18 14 59 19      mov a, [current_dir_id]
1913   0A1B 07 28 0A      call fs_dir_id_to_path_e0
1914   0A1E 3B DE 1E      mov d, filename
1915   0A21 07 06 12      call _strrev
1916   0A24 07 1A 14      call _puts
1917   0A27 06            sysret
1918   0A28             fs_dir_id_to_path_e0:
1919   0A28 07 47 0A      call get_dirname_from_dirid
1920   0A2B FD 4D 7D 19   mov si, s_fslash
1921   0A2F FD 50         mov di, d
1922   0A31 07 80 12      call _strcat                    ; add '/' to end of path
1923   0A34 AF 20 00      cmp a, root_id               ; check if we are at the root directory
1924   0A37 C6 46 0A      je fs_dir_id_to_path_root
1925   0A3A 07 64 0A      call get_parentid_from_dirid    ; use current id (a) to find parentid (into a)
1926   0A3D AF 20 00      cmp a, root_id               ; check if we are at the root directory
1927   0A40 C6 46 0A      je fs_dir_id_to_path_root
1928   0A43 07 28 0A      call fs_dir_id_to_path_e0     ; recursively call itself
1929   0A46             fs_dir_id_to_path_root:
1930   0A46 09            ret
1931   0A47             
1932   0A47             ;------------------------------------------------------------------------------------------------------;
1933   0A47             ; in_puts:
1934   0A47             ; a = directory id
1935   0A47             ; out_puts:
1936   0A47             ; d = pointer to directory name string
1937   0A47             ;------------------------------------------------------------------------------------------------------;
1938   0A47             get_dirname_from_dirid:
1939   0A47 D7            push a
1940   0A48 D8            push b
1941   0A49 DA            push d
1942   0A4A 27            mov b, a
1943   0A4B 38 00 00      mov c, 0                      ; upper lba = 0
1944   0A4E 22 01         mov ah, $01                  ; 1 sector
1945   0A50 3B 5E 31      mov d, transient_area - 512
1946   0A53 07 FC 06      call ide_read_sect            ; read directory
1947   0A56 07 06 12      call _strrev                  ; reverse dir name before copying
1948   0A59 FD 4E         mov si, d
1949   0A5B E7            pop d                         ; destination address = d value pushed at beginning
1950   0A5C FD 50         mov di, d
1951   0A5E 07 80 12      call _strcat                  ; copy filename to d
1952   0A61 E5            pop b
1953   0A62 E4            pop a
1954   0A63 09            ret
1955   0A64             
1956   0A64             ;------------------------------------------------------------------------------------------------------;
1957   0A64             ; in_puts:
1958   0A64             ; a = directory id
1959   0A64             ; out_puts:
1960   0A64             ; a = parent directory id
1961   0A64             ;------------------------------------------------------------------------------------------------------;
1962   0A64             get_parentid_from_dirid:
1963   0A64 D8            push b
1964   0A65 DA            push d
1965   0A66 27            mov b, a
1966   0A67 38 00 00      mov c, 0                      ; upper lba = 0
1967   0A6A 22 01         mov ah, $01                  ; 1 sector
1968   0A6C 3B 5E 31      mov d, transient_area - 512
1969   0A6F 07 FC 06      call ide_read_sect            ; read directory
1970   0A72 16 40 00      mov a, [d + 64]               ; copy parent id value to a
1971   0A75 E7            pop d
1972   0A76 E5            pop b
1973   0A77 09            ret
1974   0A78             
1975   0A78             ;------------------------------------------------------------------------------------------------------;
1976   0A78             ; get dirid from a given path string
1977   0A78             ; in_puts:
1978   0A78             ; d = path pointer 
1979   0A78             ; out_puts:
1980   0A78             ; a = dirid
1981   0A78             ; if dir non existent, a = ffff (fail code)
1982   0A78             ; /usr/local/bin    - absolute
1983   0A78             ; local/bin/games    - relative
1984   0A78             ;------------------------------------------------------------------------------------------------------;
1985   0A78             fs_path_to_dir_id_user:
1986   0A78 FD 4E         mov si, d
1987   0A7A FD 4F 5E 1F   mov di, user_data
1988   0A7E 38 00 02      mov c, 512
1989   0A81 04            load
1990   0A82 07 86 0A      call get_dirid_from_path
1991   0A85 06            sysret
1992   0A86             get_dirid_from_path:
1993   0A86 26 5E 1F      mov b, user_data
1994   0A89 FD 42 3F 18   mov [prog], b                  ; token pointer set to path string
1995   0A8D 07 A0 16      call get_token
1996   0A90 31 42 18      mov bl, [tok]
1997   0A93 C1 01         cmp bl, tok_fslash
1998   0A95 C6 A1 0A      je get_dirid_from_path_abs 
1999   0A98 14 59 19      mov a, [current_dir_id]
2000   0A9B 07 26 18      call _putback
2001   0A9E 0A A4 0A      jmp get_dirid_from_path_e0
2002   0AA1             get_dirid_from_path_abs:
2003   0AA1 10 20 00      mov a, root_id
2004   0AA4             get_dirid_from_path_e0:
2005   0AA4 07 A0 16      call get_token
2006   0AA7 31 41 18      mov bl, [toktyp]
2007   0AAA C1 00         cmp bl, toktyp_identifier
2008   0AAC C7 FD 0A      jne get_dirid_from_path_end   ; check if there are tokens after '/'. i.e. is this a 'cd /' command?
2009   0AAF             
2010   0AAF FD 4D 43 18   mov si, tokstr
2011   0AB3 FD 4F DE 1E   mov di, filename
2012   0AB7 07 72 12      call _strcpy        
2013   0ABA 77            inc a                         ; metadata sector
2014   0ABB 27            mov b, a
2015   0ABC 38 00 00      mov c, 0                      ; upper lba = 0
2016   0ABF 22 01         mov ah, $01                  ; 1 sector
2017   0AC1 3B 5E 33      mov d, transient_area
2018   0AC4 07 FC 06      call ide_read_sect            ; read directory
2019   0AC7 FD 10         cla
2020   0AC9 42 51 19      mov [index], a
2021   0ACC             get_dirid_from_path_l1:
2022   0ACC FD 4E         mov si, d
2023   0ACE FD 4F DE 1E   mov di, filename
2024   0AD2 07 5D 12      call _strcmp
2025   0AD5 C6 EB 0A      je get_dirid_from_path_name_equal  
2026   0AD8 58 20 00      add d, 32
2027   0ADB 14 51 19      mov a, [index]
2028   0ADE 77            inc a
2029   0ADF 42 51 19      mov [index], a
2030   0AE2 AF 10 00      cmp a, fst_files_per_dir
2031   0AE5 C6 FE 0A      je get_dirid_from_path_fail
2032   0AE8 0A CC 0A      jmp get_dirid_from_path_l1
2033   0AEB             get_dirid_from_path_name_equal:
2034   0AEB 58 19 00      add d, 25           
2035   0AEE 15            mov a, [d]                    ; set result register a = dirid
2036   0AEF 07 A0 16      call get_token
2037   0AF2 31 42 18      mov bl, [tok]
2038   0AF5 C1 01         cmp bl, tok_fslash            ; check if there are more elements in the path
2039   0AF7 C6 A4 0A      je get_dirid_from_path_e0
2040   0AFA 07 26 18      call _putback
2041   0AFD             get_dirid_from_path_end:
2042   0AFD 09            ret
2043   0AFE             get_dirid_from_path_fail:
2044   0AFE 10 FF FF      mov a, $ffff
2045   0B01 09            ret
2046   0B02             
2047   0B02             
2048   0B02             ;------------------------------------------------------------------------------------------------------;
2049   0B02             ; check if file exists by a given path string
2050   0B02             ; in_puts:
2051   0B02             ; d = path pointer 
2052   0B02             ; outputs:
2053   0B02             ; a = success code, if file exists gives lba, else, give 0
2054   0B02             ; /usr/local/bin/ed
2055   0B02             ;------------------------------------------------------------------------------------------------------;
2056   0B02             fs_filepath_exists_user:
2057   0B02 FD 4E         mov si, d
2058   0B04 FD 4F 5E 1F   mov di, user_data
2059   0B08 38 00 02      mov c, 512
2060   0B0B 04            load
2061   0B0C 07 10 0B      call file_exists_by_path
2062   0B0F 06            sysret
2063   0B10             file_exists_by_path:
2064   0B10 26 5E 1F      mov b, user_data
2065   0B13 FD 42 3F 18   mov [prog], b                   ; token pointer set to path string
2066   0B17 07 A0 16      call get_token
2067   0B1A 31 42 18      mov bl, [tok]
2068   0B1D C1 01         cmp bl, tok_fslash
2069   0B1F C6 2B 0B      je  file_exists_by_path_abs
2070   0B22 14 59 19      mov a, [current_dir_id]
2071   0B25 07 26 18      call _putback
2072   0B28 0A 2E 0B      jmp file_exists_by_path_e0
2073   0B2B             file_exists_by_path_abs:
2074   0B2B 10 20 00      mov a, root_id
2075   0B2E             file_exists_by_path_e0:
2076   0B2E 07 A0 16      call get_token
2077   0B31 31 41 18      mov bl, [toktyp]
2078   0B34 C1 00         cmp bl, toktyp_identifier
2079   0B36 C7 8E 0B      jne file_exists_by_path_end     ; check if there are tokens after '/'
2080   0B39 FD 4D 43 18   mov si, tokstr
2081   0B3D FD 4F DE 1E   mov di, filename
2082   0B41 07 72 12      call _strcpy        
2083   0B44 77            inc a                           ; metadata sector
2084   0B45 27            mov b, a
2085   0B46 38 00 00      mov c, 0                        ; upper lba = 0
2086   0B49 22 01         mov ah, $01                  ; 1 sector
2087   0B4B 3B 5E 33      mov d, transient_area
2088   0B4E 07 FC 06      call ide_read_sect              ; read directory
2089   0B51 FD 10         cla
2090   0B53 42 51 19      mov [index], a
2091   0B56             file_exists_by_path_l1:
2092   0B56 FD 4E         mov si, d
2093   0B58 FD 4F DE 1E   mov di, filename
2094   0B5C 07 5D 12      call _strcmp
2095   0B5F C6 75 0B      je file_exists_by_path_name_equal
2096   0B62 58 20 00      add d, 32
2097   0B65 14 51 19      mov a, [index]
2098   0B68 77            inc a
2099   0B69 42 51 19      mov [index], a
2100   0B6C AF 10 00      cmp a, fst_files_per_dir
2101   0B6F C6 8E 0B      je file_exists_by_path_end
2102   0B72 0A 56 0B      jmp file_exists_by_path_l1
2103   0B75             file_exists_by_path_name_equal:
2104   0B75 33 18 00      mov bl, [d + 24]
2105   0B78 FD 87 38      and bl, %00111000               ; directory flag
2106   0B7B C1 08         cmp bl, %00001000               ; is dir?
2107   0B7D C6 84 0B      je file_exists_by_path_isdir;
2108   0B80             ; entry is a file
2109   0B80 16 19 00      mov a, [d + 25]                 ; get and return lba of file
2110   0B83 09            ret
2111   0B84             file_exists_by_path_isdir:
2112   0B84 58 19 00      add d, 25           
2113   0B87 15            mov a, [d]                      ; set result register a = dirid
2114   0B88 07 A0 16      call get_token
2115   0B8B 0A 2E 0B      jmp file_exists_by_path_e0
2116   0B8E             file_exists_by_path_end:
2117   0B8E 10 00 00      mov a, 0                        ; return 0 because file was not found
2118   0B91 09            ret
2119   0B92             
2120   0B92             ;------------------------------------------------------------------------------------------------------;
2121   0B92             ; load file data from a given path string
2122   0B92             ; inputs:
2123   0B92             ; d = path pointer 
2124   0B92             ; di = userspace program data destination
2125   0B92             ; /usr/local/bin/ed
2126   0B92             ; ./ed
2127   0B92             ;------------------------------------------------------------------------------------------------------;
2128   0B92             fs_load_from_path_user:
2129   0B92 E3            push di
2130   0B93 FD 4E         mov si, d
2131   0B95 FD 4F 5E 1F   mov di, user_data
2132   0B99 38 00 02      mov c, 512
2133   0B9C 04            load
2134   0B9D 07 AA 0B      call loadfile_from_path
2135   0BA0 F0            pop di
2136   0BA1 FD 4D 5E 33   mov si, transient_area
2137   0BA5 38 00 3E      mov c, 512 * (fs_sectors_per_file-1)
2138   0BA8 03            store
2139   0BA9 06            sysret
2140   0BAA             loadfile_from_path:
2141   0BAA 26 5E 1F      mov b, user_data
2142   0BAD FD 42 3F 18   mov [prog], b                 ; token pointer set to path string
2143   0BB1 07 A0 16      call get_token
2144   0BB4 31 42 18      mov bl, [tok]
2145   0BB7 C1 01         cmp bl, tok_fslash
2146   0BB9 C6 C5 0B      je loadfile_from_path_abs 
2147   0BBC 14 59 19      mov a, [current_dir_id]
2148   0BBF 07 26 18      call _putback
2149   0BC2 0A C8 0B      jmp loadfile_from_path_e0
2150   0BC5             loadfile_from_path_abs:
2151   0BC5 10 20 00      mov a, root_id
2152   0BC8             loadfile_from_path_e0:
2153   0BC8 07 A0 16      call get_token
2154   0BCB 31 41 18      mov bl, [toktyp]
2155   0BCE C1 00         cmp bl, toktyp_identifier
2156   0BD0 C7 35 0C      jne loadfile_from_path_end    ; check if there are tokens after '/'. i.e. is this a 'cd /' command?
2157   0BD3 FD 4D 43 18   mov si, tokstr
2158   0BD7 FD 4F DE 1E   mov di, filename
2159   0BDB 07 72 12      call _strcpy        
2160   0BDE 77            inc a                         ; metadata sector
2161   0BDF 27            mov b, a
2162   0BE0 38 00 00      mov c, 0                      ; upper lba = 0
2163   0BE3 22 01         mov ah, $01                  ; 1 sector
2164   0BE5 3B 5E 33      mov d, transient_area
2165   0BE8 07 FC 06      call ide_read_sect            ; read directory
2166   0BEB FD 10         cla
2167   0BED 42 51 19      mov [index], a
2168   0BF0             loadfile_from_path_l1:
2169   0BF0 FD 4E         mov si, d
2170   0BF2 FD 4F DE 1E   mov di, filename
2171   0BF6 07 5D 12      call _strcmp
2172   0BF9 C6 0F 0C      je loadfile_from_path_name_equal  
2173   0BFC 58 20 00      add d, 32
2174   0BFF 14 51 19      mov a, [index]
2175   0C02 77            inc a
2176   0C03 42 51 19      mov [index], a
2177   0C06 AF 10 00      cmp a, fst_files_per_dir
2178   0C09 C6 35 0C      je loadfile_from_path_end
2179   0C0C 0A F0 0B      jmp loadfile_from_path_l1
2180   0C0F             loadfile_from_path_name_equal:
2181   0C0F 33 18 00      mov bl, [d + 24]
2182   0C12 FD 87 38      and bl, %00111000             ; directory flag
2183   0C15 C1 08         cmp bl, %00001000             ; is dir?
2184   0C17 C6 2B 0C      je loadfile_isdirectory  
2185   0C1A             ; entry is a file
2186   0C1A 2B 19 00      mov b, [d + 25]               ; get lba
2187   0C1D FD 77         inc b                         ; add 1 to b because the lba for data comes after the header sector
2188   0C1F 3B 5E 33      mov d, transient_area
2189   0C22 38 00 00      mov c, 0
2190   0C25 22 1F         mov ah, fs_sectors_per_file-1 ; number of sectors
2191   0C27 07 FC 06      call ide_read_sect            ; read sector
2192   0C2A 09            ret
2193   0C2B             loadfile_isdirectory:
2194   0C2B 58 19 00      add d, 25           
2195   0C2E 15            mov a, [d]                    ; set result register a = dirid
2196   0C2F 07 A0 16      call get_token
2197   0C32 0A C8 0B      jmp loadfile_from_path_e0
2198   0C35             loadfile_from_path_end:
2199   0C35 09            ret
2200   0C36             
2201   0C36             ;------------------------------------------------------------------------------------------------------;
2202   0C36             ; return the id of the current directory
2203   0C36             ; id returned in b
2204   0C36             ;------------------------------------------------------------------------------------------------------;
2205   0C36             fs_get_curr_dirid:
2206   0C36 29 59 19      mov b, [current_dir_id]
2207   0C39 06            sysret
2208   0C3A             
2209   0C3A             ;------------------------------------------------------------------------------------------------------;
2210   0C3A             ; cd
2211   0C3A             ;------------------------------------------------------------------------------------------------------;
2212   0C3A             ; new dirid in b
2213   0C3A             fs_cd:
2214   0C3A FD 42 59 19   mov [current_dir_id], b
2215   0C3E 06            sysret  
2216   0C3F             
2217   0C3F             ;------------------------------------------------------------------------------------------------------;
2218   0C3F             ; ls
2219   0C3F             ; dirid in b
2220   0C3F             ;------------------------------------------------------------------------------------------------------;
2221   0C3F             fs_ls:
2222   0C3F FD 77         inc b                        ; metadata sector
2223   0C41 38 00 00      mov c, 0                     ; upper lba = 0
2224   0C44 22 01         mov ah, $01                  ; 1 sector
2225   0C46 3B 5E 33      mov d, transient_area
2226   0C49 07 FC 06      call ide_read_sect           ; read directory
2227   0C4C FD 10         cla
2228   0C4E 42 51 19      mov [index], a               ; reset entry index
2229   0C51 3D 9C 19      mov [ls_count], al           ; reset item count
2230   0C54             fs_ls_l1:
2231   0C54 BD 00         cmp byte [d], 0              ; check for null
2232   0C56 C6 ED 0C      je fs_ls_next
2233   0C59             fs_ls_non_null:
2234   0C59 1D 9C 19      mov al, [ls_count]
2235   0C5C 7A            inc al
2236   0C5D 3D 9C 19      mov [ls_count], al           ; increment item count
2237   0C60 1F 18 00      mov al, [d + 24]
2238   0C63 87 38         and al, %00111000
2239   0C65 FD A2 03      shr al, 3
2240   0C68 22 00         mov ah, 0                    ; file type
2241   0C6A B7 84 19      mov a, [a + file_type]      
2242   0C6D 23            mov ah, al
2243   0C6E 07 EE 12      call _putchar
2244   0C71 1F 18 00      mov al, [d + 24]
2245   0C74 87 01         and al, %00000001
2246   0C76 22 00         mov ah, 0
2247   0C78 B7 7F 19      mov a, [a + file_attrib]     ; read
2248   0C7B 23            mov ah, al
2249   0C7C 07 EE 12      call _putchar
2250   0C7F 1F 18 00      mov al, [d + 24]
2251   0C82 87 02         and al, %00000010
2252   0C84 22 00         mov ah, 0
2253   0C86 B7 7F 19      mov a, [a + file_attrib]     ; write
2254   0C89 23            mov ah, al
2255   0C8A 07 EE 12      call _putchar
2256   0C8D 1F 18 00      mov al, [d + 24]
2257   0C90 87 04         and al, %00000100
2258   0C92 22 00         mov ah, 0
2259   0C94 B7 7F 19      mov a, [a + file_attrib]     ; execute
2260   0C97 23            mov ah, al
2261   0C98 07 EE 12      call _putchar
2262   0C9B 22 20         mov ah, $20
2263   0C9D 07 EE 12      call _putchar  
2264   0CA0 2B 1B 00      mov b, [d + 27]
2265   0CA3 07 76 14      call print_u16x              ; filesize
2266   0CA6 22 20         mov ah, $20
2267   0CA8 07 EE 12      call _putchar  
2268   0CAB 2B 19 00      mov b, [d + 25]
2269   0CAE 07 76 14      call print_u16x              ; dirid / lba
2270   0CB1 22 20         mov ah, $20
2271   0CB3 07 EE 12      call _putchar
2272   0CB6             ; print date
2273   0CB6 33 1D 00      mov bl, [d + 29]             ; day
2274   0CB9 07 BA 14      call print_u8x
2275   0CBC 22 20         mov ah, $20
2276   0CBE 07 EE 12      call _putchar  
2277   0CC1 1F 1E 00      mov al, [d + 30]             ; month
2278   0CC4 FD 9E 02      shl al, 2
2279   0CC7 DA            push d
2280   0CC8 3B EC 1A      mov d, s_months
2281   0CCB 22 00         mov ah, 0
2282   0CCD 59            add d, a
2283   0CCE 07 1A 14      call _puts
2284   0CD1 E7            pop d
2285   0CD2 22 20         mov ah, $20
2286   0CD4 07 EE 12      call _putchar
2287   0CD7 2E 20         mov bl, $20
2288   0CD9 07 BA 14      call print_u8x
2289   0CDC 33 1F 00      mov bl, [d + 31]             ; year
2290   0CDF 07 BA 14      call print_u8x  
2291   0CE2 22 20         mov ah, $20
2292   0CE4 07 EE 12      call _putchar  
2293   0CE7 07 1A 14      call _puts                   ; print filename  
2294   0CEA 07 C7 13      call printnl
2295   0CED             fs_ls_next:
2296   0CED 14 51 19      mov a, [index]
2297   0CF0 77            inc a
2298   0CF1 42 51 19      mov [index], a
2299   0CF4 AF 10 00      cmp a, fst_files_per_dir
2300   0CF7 C6 00 0D      je fs_ls_end
2301   0CFA 58 20 00      add d, 32      
2302   0CFD 0A 54 0C      jmp fs_ls_l1  
2303   0D00             fs_ls_end:
2304   0D00 3B 94 19      mov d, s_ls_total
2305   0D03 07 1A 14      call _puts
2306   0D06 1D 9C 19      mov al, [ls_count]
2307   0D09 07 CC 14      call print_u8d
2308   0D0C 07 C7 13      call printnl
2309   0D0F 06            sysret
2310   0D10             
2311   0D10             ;------------------------------------------------------------------------------------------------------;
2312   0D10             ; finds an empty data block
2313   0D10             ; block lba returned in b
2314   0D10             ;------------------------------------------------------------------------------------------------------;
2315   0D10             fs_find_empty_block:
2316   0D10 26 A0 00      mov b, fs_lba_start     ; raw files starting block
2317   0D13 38 00 00      mov c, 0                ; upper lba = 0
2318   0D16             fs_find_empty_block_l1:  
2319   0D16 22 01         mov ah, $01                  ; 1 sector
2320   0D18 3B 5E 31      mov d, transient_area - 512
2321   0D1B 07 FC 06      call ide_read_sect      ; read sector
2322   0D1E BD 00         cmp byte [d], 0
2323   0D20 C6 29 0D      je fs_find_empty_block_found_null
2324   0D23 55 20 00      add b, fs_sectors_per_file
2325   0D26 0A 16 0D      jmp fs_find_empty_block_l1
2326   0D29             fs_find_empty_block_found_null:
2327   0D29 09            ret
2328   0D2A             
2329   0D2A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2330   0D2A             ;; create new textfile
2331   0D2A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2332   0D2A             ; search for first null block
2333   0D2A             fs_mktxt:
2334   0D2A FD 4E       	mov si, d
2335   0D2C FD 4F 5E 1F 	mov di, user_data
2336   0D30 38 00 01    	mov c, 256
2337   0D33 04          	load					; load data from user-space
2338   0D34             	
2339   0D34 26 A0 00    	mov b, fs_lba_start		; raw files starting block
2340   0D37 38 00 00    	mov c, 0						; reset lba to 0
2341   0D3A             fs_mktxt_l1:	
2342   0D3A 10 02 01    	mov a, $0102			; disk read
2343   0D3D 3B 5E 33    	mov d, transient_area
2344   0D40 05 02       	syscall sys_ide ; read sector
2345   0D42 1E          	mov al, [d]
2346   0D43 B9 00       	cmp al, 0			; check for null
2347   0D45 C6 4E 0D    	je fs_mktxt_found_null
2348   0D48 55 20 00    	add b, fs_sectors_per_file
2349   0D4B 0A 3A 0D    	jmp fs_mktxt_l1
2350   0D4E             fs_mktxt_found_null:
2351   0D4E D8          	push b				; save lba
2352   0D4F             ;create header file by grabbing file name from parameter	
2353   0D4F 3B 75 19    	mov d, s_dataentry
2354   0D52 07 1A 14    	call _puts
2355   0D55 3B 5E 35    	mov d, transient_area + 512			; pointer to file contents
2356   0D58 07 80 13    	call _gettxt
2357   0D5B 07 4D 12    	call _strlen						; get length of file
2358   0D5E D9          	push c							; save length
2359   0D5F 19 01       	mov al, 1
2360   0D61 3D 5E 33    	mov [transient_area], al					; mark sectors as used (not null)
2361   0D64 10 00 00    	mov a, 0
2362   0D67 42 51 19    	mov [index], a
2363   0D6A 3B 5E 33    	mov d, transient_area
2364   0D6D 13          	mov a, d
2365   0D6E 42 53 19    	mov [buffer_addr], a
2366   0D71             fs_mktxt_l2:
2367   0D71 38 00 00    	mov c, 0
2368   0D74 10 03 01    	mov a, $0103			; disk write, 1 sector
2369   0D77 05 02       	syscall sys_ide		; write sector
2370   0D79 14 51 19    	mov a, [index]
2371   0D7C 77          	inc a
2372   0D7D 42 51 19    	mov [index], a
2373   0D80 AF 20 00    	cmp a, fs_sectors_per_file
2374   0D83 C6 95 0D    	je fs_mktxt_add_to_dir
2375   0D86 FD 77       	inc b
2376   0D88 14 53 19    	mov a, [buffer_addr]
2377   0D8B 53 00 02    	add a, 512
2378   0D8E 42 53 19    	mov [buffer_addr], a
2379   0D91 3C          	mov d, a
2380   0D92 0A 71 0D    	jmp fs_mktxt_l2
2381   0D95             ; now we add the file to the current directory!
2382   0D95             fs_mktxt_add_to_dir:	
2383   0D95 14 59 19    	mov a, [current_dir_id]
2384   0D98 77          	inc a
2385   0D99 27          	mov b, a					; metadata sector
2386   0D9A 38 00 00    	mov c, 0
2387   0D9D FD 79       	mov g, b					; save lba
2388   0D9F 3B 5E 33    	mov d, transient_area
2389   0DA2 10 02 01    	mov a, $0102			; disk read
2390   0DA5 05 02       	syscall sys_ide		; read metadata sector
2391   0DA7             fs_mktxt_add_to_dir_l2:
2392   0DA7 1E          	mov al, [d]
2393   0DA8 B9 00       	cmp al, 0
2394   0DAA C6 B3 0D    	je fs_mktxt_add_to_dir_null
2395   0DAD 58 20 00    	add d, fst_entry_size
2396   0DB0 0A A7 0D    	jmp fs_mktxt_add_to_dir_l2					; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
2397   0DB3             fs_mktxt_add_to_dir_null:
2398   0DB3 FD 4D 5E 1F 	mov si, user_data
2399   0DB7 FD 50       	mov di, d
2400   0DB9 07 72 12    	call _strcpy			; copy file name
2401   0DBC 58 18 00    	add d, 24			; skip name
2402   0DBF 19 06       	mov al, %00000110		; no execute, write, read, not directory
2403   0DC1 3E          	mov [d], al			
2404   0DC2 58 03 00    	add d, 3
2405   0DC5 E4          	pop a
2406   0DC6 43          	mov [d], a
2407   0DC7 63 02 00    	sub d, 2
2408   0DCA E5          	pop b				; get file lba
2409   0DCB FD 43       	mov [d], b			; save lba	
2410   0DCD             	
2411   0DCD             	; set file creation date	
2412   0DCD 58 04 00    	add d, 4
2413   0DD0 19 04       	mov al, 4
2414   0DD2 05 01       	syscall sys_rtc
2415   0DD4 1A          	mov al, ah
2416   0DD5 3E          	mov [d], al			; set day
2417   0DD6             	
2418   0DD6 79          	inc d
2419   0DD7 19 05       	mov al, 5
2420   0DD9 05 01       	syscall sys_rtc
2421   0DDB 1A          	mov al, ah
2422   0DDC 3E          	mov [d], al			; set month
2423   0DDD             	
2424   0DDD 79          	inc d
2425   0DDE 19 06       	mov al, 6
2426   0DE0 05 01       	syscall sys_rtc
2427   0DE2 1A          	mov al, ah
2428   0DE3 3E          	mov [d], al			; set year
2429   0DE4             	
2430   0DE4             ; write sector into disk for new directory entry
2431   0DE4 FD 27       	mov b, g
2432   0DE6 38 00 00    	mov c, 0
2433   0DE9 3B 5E 33    	mov d, transient_area
2434   0DEC 10 03 01    	mov a, $0103			; disk write, 1 sector
2435   0DEF 05 02       	syscall sys_ide		; write sector
2436   0DF1 07 C7 13    	call printnl
2437   0DF4 06          	sysret
2438   0DF5             
2439   0DF5             ;------------------------------------------------------------------------------------------------------;
2440   0DF5             ; create new binary file
2441   0DF5             ;------------------------------------------------------------------------------------------------------;
2442   0DF5             ; search for first null block
2443   0DF5             fs_mkbin:
2444   0DF5 19 00         mov al, 0
2445   0DF7 3D 44 19      mov [sys_echo_on], al ; disable echo
2446   0DFA FD 4E         mov si, d
2447   0DFC FD 4F 5E 1F   mov di, user_data
2448   0E00 38 00 02      mov c, 512
2449   0E03 04            load                          ; load data from user-space
2450   0E04 26 A0 00      mov b, fs_lba_start           ; files start when directories end
2451   0E07 38 00 00      mov c, 0                      ; upper lba = 0
2452   0E0A             fs_mkbin_l1:  
2453   0E0A 22 01         mov ah, $01                  ; 1 sector
2454   0E0C 3B 5E 33      mov d, transient_area
2455   0E0F 07 FC 06      call ide_read_sect            ; read sector
2456   0E12 BD 00         cmp byte[d], 0                ; check for null
2457   0E14 C6 1D 0E      je fs_mkbin_found_null
2458   0E17 55 20 00      add b, fs_sectors_per_file
2459   0E1A 0A 0A 0E      jmp fs_mkbin_l1
2460   0E1D             fs_mkbin_found_null:
2461   0E1D D8            push b                        ; save lba
2462   0E1E             ;create header file by grabbing file name from parameter
2463   0E1E FD 4F 5E 35   mov di, transient_area + 512  ; pointer to file contents
2464   0E22 07 98 11      call _load_hex                ; load binary hex
2465   0E25 D9            push c                        ; save size (nbr of bytes)
2466   0E26 19 01         mov al, 1
2467   0E28 3D 5E 33      mov [transient_area], al      ; mark sectors as used (not null)
2468   0E2B FD 10         cla
2469   0E2D 42 51 19      mov [index], a
2470   0E30 3B 5E 33      mov d, transient_area
2471   0E33 13            mov a, d
2472   0E34 42 53 19      mov [buffer_addr], a
2473   0E37             fs_mkbin_l2:
2474   0E37 38 00 00      mov c, 0
2475   0E3A 22 01         mov ah, $01                   ; disk write, 1 sector
2476   0E3C 07 22 07      call ide_write_sect           ; write sector
2477   0E3F 14 51 19      mov a, [index]
2478   0E42 77            inc a
2479   0E43 42 51 19      mov [index], a
2480   0E46 AF 20 00      cmp a, fs_sectors_per_file    ; remove 1 from this because we dont count the header sector
2481   0E49 C6 5B 0E      je fs_mkbin_add_to_dir
2482   0E4C FD 77         inc b
2483   0E4E 14 53 19      mov a, [buffer_addr]
2484   0E51 53 00 02      add a, 512
2485   0E54 42 53 19      mov [buffer_addr], a
2486   0E57 3C            mov d, a
2487   0E58 0A 37 0E      jmp fs_mkbin_l2
2488   0E5B             ; now we add the file to the current directory!
2489   0E5B             fs_mkbin_add_to_dir:  
2490   0E5B 29 59 19      mov b, [current_dir_id]
2491   0E5E FD 77         inc b        ; metadata sector
2492   0E60 38 00 00      mov c, 0
2493   0E63 FD 79         mov g, b                      ; save lba
2494   0E65 3B 5E 33      mov d, transient_area
2495   0E68 22 01         mov ah, $01                  ; 1 sector
2496   0E6A 07 FC 06      call ide_read_sect            ; read metadata sector
2497   0E6D             fs_mkbin_add_to_dir_l2:
2498   0E6D BD 00         cmp byte[d], 0
2499   0E6F C6 78 0E      je fs_mkbin_add_to_dir_null
2500   0E72 58 20 00      add d, fst_entry_size
2501   0E75 0A 6D 0E      jmp fs_mkbin_add_to_dir_l2   ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
2502   0E78             fs_mkbin_add_to_dir_null:
2503   0E78 FD 4D 5E 1F   mov si, user_data
2504   0E7C FD 50         mov di, d
2505   0E7E 07 72 12      call _strcpy                  ; copy file name
2506   0E81 58 18 00      add d, 24                     ; skip name
2507   0E84 19 03         mov al, %00000011             ; type=file, no execute, write, read, 
2508   0E86 3E            mov [d], al
2509   0E87 58 03 00      add d, 3
2510   0E8A E4            pop a
2511   0E8B 43            mov [d], a
2512   0E8C 63 02 00      sub d, 2
2513   0E8F E5            pop b                         ; get file lba
2514   0E90 FD 43         mov [d], b                    ; save lba
2515   0E92               ; set file creation date  
2516   0E92 58 04 00      add d, 4
2517   0E95 19 04         mov al, 4
2518   0E97 05 01         syscall sys_rtc
2519   0E99 1A            mov al, ah
2520   0E9A 3E            mov [d], al                   ; set day
2521   0E9B 79            inc d
2522   0E9C 19 05         mov al, 5
2523   0E9E 05 01         syscall sys_rtc
2524   0EA0 1A            mov al, ah
2525   0EA1 3E            mov [d], al                   ; set month
2526   0EA2 79            inc d
2527   0EA3 19 06         mov al, 6
2528   0EA5 05 01         syscall sys_rtc
2529   0EA7 1A            mov al, ah
2530   0EA8 3E            mov [d], al                   ; set year
2531   0EA9             ; write sector into disk for new directory entry
2532   0EA9 FD 27         mov b, g
2533   0EAB 38 00 00      mov c, 0
2534   0EAE 3B 5E 33      mov d, transient_area
2535   0EB1 22 01         mov ah, $01                   ; disk write, 1 sector
2536   0EB3 07 22 07      call ide_write_sect           ; write sector
2537   0EB6 19 01         mov al, 1
2538   0EB8 3D 44 19      mov [sys_echo_on], al ; enable echo
2539   0EBB 06            sysret
2540   0EBC             
2541   0EBC             ;------------------------------------------------------------------------------------------------------;
2542   0EBC             ; pwd - print working directory
2543   0EBC             ;------------------------------------------------------------------------------------------------------;    
2544   0EBC             fs_pwd:
2545   0EBC 3B DE 1E      mov d, filename
2546   0EBF 19 00         mov al, 0
2547   0EC1 3E            mov [d], al                   ; initialize path string 
2548   0EC2 14 59 19      mov a, [current_dir_id]
2549   0EC5 07 28 0A      call fs_dir_id_to_path_e0
2550   0EC8 3B DE 1E      mov d, filename
2551   0ECB 07 06 12      call _strrev
2552   0ECE 07 1A 14      call _puts
2553   0ED1 07 C7 13      call printnl
2554   0ED4 06            sysret
2555   0ED5             
2556   0ED5             ;------------------------------------------------------------------------------------------------------;
2557   0ED5             ; get current directory lba
2558   0ED5             ; a: returned lba
2559   0ED5             ;------------------------------------------------------------------------------------------------------;
2560   0ED5             cmd_get_curr_dir_lba:
2561   0ED5 14 59 19      mov a, [current_dir_id]
2562   0ED8 06            sysret
2563   0ED9             
2564   0ED9             ;------------------------------------------------------------------------------------------------------;
2565   0ED9             ; cat
2566   0ED9             ; userspace destination data pointer in d
2567   0ED9             ; filename starts at d, but is overwritten after the read is made
2568   0ED9             ;------------------------------------------------------------------------------------------------------;:
2569   0ED9             fs_cat:
2570   0ED9 DA            push d                              ; save userspace file data destination
2571   0EDA FD 4E         mov si, d
2572   0EDC FD 4F 5E 1F   mov di, user_data
2573   0EE0 38 00 02      mov c, 512
2574   0EE3 04            load                                ; copy filename from user-space
2575   0EE4 29 59 19      mov b, [current_dir_id]
2576   0EE7 FD 77         inc b                               ; metadata sector
2577   0EE9 38 00 00      mov c, 0                            ; upper lba = 0
2578   0EEC 22 01         mov ah, $01                  ; 1 sector
2579   0EEE 3B 5E 31      mov d, transient_area-512
2580   0EF1 07 FC 06      call ide_read_sect                  ; read directory
2581   0EF4 FD 10         cla
2582   0EF6 42 51 19      mov [index], a                      ; reset file counter
2583   0EF9             fs_cat_l1:
2584   0EF9 FD 4E         mov si, d
2585   0EFB FD 4F 5E 1F   mov di, user_data
2586   0EFF 07 5D 12      call _strcmp
2587   0F02 C6 18 0F      je fs_cat_found_entry
2588   0F05 58 20 00      add d, 32
2589   0F08 14 51 19      mov a, [index]
2590   0F0B 77            inc a
2591   0F0C 42 51 19      mov [index], a
2592   0F0F AF 10 00      cmp a, fst_files_per_dir
2593   0F12 C6 33 0F      je fs_cat_not_found
2594   0F15 0A F9 0E      jmp fs_cat_l1
2595   0F18             fs_cat_found_entry:
2596   0F18 58 19 00      add d, 25                           ; get to dirid of file in disk
2597   0F1B 2A            mov b, [d]                          ; get lba
2598   0F1C FD 77         inc b                               ; add 1 to b because the lba for data comes after the header sector 
2599   0F1E 3B 5E 33      mov d, transient_area  
2600   0F21 38 00 00      mov c, 0
2601   0F24 22 1F         mov ah, fs_sectors_per_file-1       ; nbr sectors
2602   0F26 07 FC 06      call ide_read_sect                  ; read sectors
2603   0F29 F0            pop di                              ; write userspace file data destination to di
2604   0F2A FD 4D 5E 33   mov si, transient_area              ; data origin
2605   0F2E 38 00 3E      mov c, 512*(fs_sectors_per_file-1)
2606   0F31 03            store
2607   0F32 06            sysret
2608   0F33             fs_cat_not_found:
2609   0F33 E7            pop d
2610   0F34 06            sysret
2611   0F35             
2612   0F35             ;------------------------------------------------------------------------------------------------------;
2613   0F35             ; rmdir - remove dir by dirid
2614   0F35             ;------------------------------------------------------------------------------------------------------;
2615   0F35             ; deletes a directory entry in the given directory's file list 
2616   0F35             ; also deletes the actual directory entry in the fst
2617   0F35             ; synopsis: rmdir /usr/local/testdir
2618   0F35             ; b = dirid
2619   0F35             fs_rmdir:
2620   0F35 FD 79         mov g, b
2621   0F37 11            mov a, b
2622   0F38 07 64 0A      call get_parentid_from_dirid  ; now get the directory's parent, in a
2623   0F3B D7            push a                        ; save dirid
2624   0F3C             ; search for directory's entry in the parent's directory then and delete it
2625   0F3C 77            inc a                         ; metadata sector
2626   0F3D 27            mov b, a
2627   0F3E 38 00 00      mov c, 0                      ; upper lba = 0
2628   0F41 22 01         mov ah, $01          ;
2629   0F43 3B 5E 33      mov d, transient_area
2630   0F46 07 FC 06      call ide_read_sect            ; read directory
2631   0F49 FD 10         cla
2632   0F4B 42 51 19      mov [index], a                ; reset file counter
2633   0F4E FD 27         mov b, g                      ; retrieve directory's dirid
2634   0F50             fs_rmdir_l1:
2635   0F50 16 19 00      mov a, [d + 25]               ; get entry's dirid/lba value
2636   0F53 B0            cmp a, b                      ; compare dirid's to find the directory
2637   0F54 C6 6A 0F      je fs_rmdir_found_entry
2638   0F57 58 20 00      add d, 32
2639   0F5A 14 51 19      mov a, [index]
2640   0F5D 77            inc a
2641   0F5E 42 51 19      mov [index], a
2642   0F61 AF 10 00      cmp a, fst_files_per_dir
2643   0F64 C6 8F 0F      je fs_rmdir_not_found
2644   0F67 0A 50 0F      jmp fs_rmdir_l1
2645   0F6A             fs_rmdir_found_entry:
2646   0F6A FD 10         cla
2647   0F6C 3E            mov [d], al                   ; make filename null
2648   0F6D 44 19 00      mov [d + 25], a               ; clear dirid/lba as well not to generate problems with previously deleted directories
2649   0F70 E5            pop b
2650   0F71 FD 77         inc b                         ; metadata sector
2651   0F73 38 00 00      mov c, 0                      ; upper lba = 0
2652   0F76 22 01         mov ah, $01          ; 
2653   0F78 3B 5E 33      mov d, transient_area
2654   0F7B 07 22 07      call ide_write_sect           ; write sector and erase file's entry in the current dir
2655   0F7E             
2656   0F7E FD 27         mov b, g
2657   0F80 3B 5E 33      mov d, transient_area  
2658   0F83 FD 10         cla
2659   0F85 3E            mov [d], al                   ; make directory's name header null for re-use
2660   0F86 38 00 00      mov c, 0
2661   0F89 22 01         mov ah, $01                   ; disk write 1 sect
2662   0F8B 07 22 07      call ide_write_sect           ; delete directory given by dirid in b
2663   0F8E 06            sysret
2664   0F8F             fs_rmdir_not_found:
2665   0F8F E5            pop b
2666   0F90 06            sysret
2667   0F91             
2668   0F91             ;------------------------------------------------------------------------------------------------------;
2669   0F91             ; rm - remove file
2670   0F91             ;------------------------------------------------------------------------------------------------------;
2671   0F91             ; frees up the data sectors for the file further down the disk
2672   0F91             ; deletes file entry in the directory's file list 
2673   0F91             fs_rm:
2674   0F91 FD 4E         mov si, d
2675   0F93 FD 4F 5E 1F   mov di, user_data
2676   0F97 38 00 02      mov c, 512
2677   0F9A 04            load                          ; load data from user-space
2678   0F9B 29 59 19      mov b, [current_dir_id]
2679   0F9E FD 77         inc b                         ; metadata sector
2680   0FA0 38 00 00      mov c, 0                      ; upper lba = 0
2681   0FA3 22 01         mov ah, $01                  ; 1 sector
2682   0FA5 3B 5E 33      mov d, transient_area
2683   0FA8 07 FC 06      call ide_read_sect            ; read directory
2684   0FAB 10 00 00      mov a, 0
2685   0FAE 42 51 19      mov [index], a                ; reset file counter
2686   0FB1             fs_rm_l1:
2687   0FB1 FD 4E         mov si, d
2688   0FB3 FD 4F 5E 1F   mov di, user_data
2689   0FB7 07 5D 12      call _strcmp
2690   0FBA C6 D0 0F      je fs_rm_found_entry
2691   0FBD 58 20 00      add d, 32
2692   0FC0 14 51 19      mov a, [index]
2693   0FC3 77            inc a
2694   0FC4 42 51 19      mov [index], a
2695   0FC7 AF 10 00      cmp a, fst_files_per_dir
2696   0FCA C6 F8 0F      je fs_rm_not_found
2697   0FCD 0A B1 0F      jmp fs_rm_l1
2698   0FD0             fs_rm_found_entry:
2699   0FD0 2B 19 00      mov b, [d + 25]               ; get lba
2700   0FD3 FD 79         mov g, b                      ; save lba
2701   0FD5 19 00         mov al, 0
2702   0FD7 3E            mov [d], al                   ; make file entry null
2703   0FD8 29 59 19      mov b, [current_dir_id]
2704   0FDB FD 77         inc b                         ; metadata sector
2705   0FDD 38 00 00      mov c, 0                      ; upper lba = 0
2706   0FE0 22 01         mov ah, $01                   ; disk write
2707   0FE2 3B 5E 33      mov d, transient_area
2708   0FE5 07 22 07      call ide_write_sect           ; write sector and erase file's entry in the current dir
2709   0FE8 3B 5E 33      mov d, transient_area  
2710   0FEB 19 00         mov al, 0
2711   0FED 3E            mov [d], al                   ; make file's data header null for re-use
2712   0FEE 38 00 00      mov c, 0
2713   0FF1 FD 27         mov b, g                      ; get data header lba
2714   0FF3 22 01         mov ah, $01                   ; disk write 1 sect
2715   0FF5 07 22 07      call ide_write_sect           ; write sector
2716   0FF8             fs_rm_not_found:  
2717   0FF8 06            sysret  
2718   0FF9             
2719   0FF9             ;------------------------------------------------------------------------------------------------------;
2720   0FF9             ; mv - move / change file name
2721   0FF9             ;------------------------------------------------------------------------------------------------------;
2722   0FF9             fs_mv:
2723   0FF9 FD 4E         mov si, d
2724   0FFB FD 4F 5E 1F   mov di, user_data
2725   0FFF 38 00 02      mov c, 512
2726   1002 04            load                          ; load data from user-space
2727   1003 29 59 19      mov b, [current_dir_id]
2728   1006 FD 77         inc b                         ; metadata sector
2729   1008 38 00 00      mov c, 0                      ; upper lba = 0
2730   100B 22 01         mov ah, $01                  ; 1 sector
2731   100D 3B 5E 33      mov d, transient_area
2732   1010 07 FC 06      call ide_read_sect            ; read directory
2733   1013 FD 10         cla
2734   1015 42 51 19      mov [index], a                ; reset file counter
2735   1018             fs_mv_l1:
2736   1018 FD 4E         mov si, d
2737   101A FD 4F 5E 1F   mov di, user_data
2738   101E 07 5D 12      call _strcmp
2739   1021 C6 37 10      je fs_mv_found_entry
2740   1024 58 20 00      add d, 32
2741   1027 14 51 19      mov a, [index]
2742   102A 77            inc a
2743   102B 42 51 19      mov [index], a
2744   102E AF 10 00      cmp a, fst_files_per_dir
2745   1031 C6 69 10      je fs_mv_not_found
2746   1034 0A 18 10      jmp fs_mv_l1
2747   1037             fs_mv_found_entry:  
2748   1037 DA            push d
2749   1038 FD 4D DE 1F   mov si, user_data + 128       ; (0...127) = original filename , (128...255) = new name
2750   103C FD 50         mov di, d
2751   103E 07 72 12      call _strcpy  
2752   1041 38 00 00      mov c, 0
2753   1044 3B 5E 33      mov d, transient_area
2754   1047 22 01         mov ah, $01                   ; disk write 1 sect
2755   1049 07 22 07      call ide_write_sect           ; write sector
2756   104C E7            pop d
2757   104D             ;; need to check whether its a dir or a file here ;;;
2758   104D 2B 19 00      mov b, [d + 25]               ; get the dirid of the directory so we can locate its own entry in the list
2759   1050 22 01         mov ah, $01
2760   1052 3B 5E 33      mov d, transient_area
2761   1055 38 00 00      mov c, 0
2762   1058 07 FC 06      call ide_read_sect            ; read directory entry
2763   105B FD 4D DE 1F   mov si, user_data + 128
2764   105F FD 50         mov di, d
2765   1061 07 72 12      call _strcpy                  ; change directory's name
2766   1064 22 01         mov ah, $01
2767   1066 07 22 07      call ide_write_sect           ; rewrite directory back to disk
2768   1069             fs_mv_not_found:
2769   1069 06            sysret
2770   106A             
2771   106A             
2772   106A             ;----------------------------------------------------------------------------------------------------;
2773   106A             ; process index in a
2774   106A             ;----------------------------------------------------------------------------------------------------;
2775   106A             find_free_proc:
2776   106A FD 4D CF 1C   mov si, proc_availab_table + 1      ; skip process 0 (kernel)
2777   106E             find_free_proc_l0:
2778   106E F6            lodsb                               ; get process state
2779   106F B9 00         cmp al, 0
2780   1071 C6 77 10      je find_free_proc_free              ; if free, jump
2781   1074 0A 6E 10      jmp find_free_proc_l0               ; else, goto next
2782   1077             find_free_proc_free:
2783   1077 4E            mov a, si
2784   1078 5F CF 1C      sub a, 1 + proc_availab_table       ; get process index
2785   107B 09            ret
2786   107C               
2787   107C             
2788   107C             ;----------------------------------------------------------------------------------------------------;
2789   107C             ; process index in al
2790   107C             ;----------------------------------------------------------------------------------------------------;
2791   107C             proc_memory_map:
2792   107C 22 00         mov ah, 0
2793   107E 27            mov b, a                      ; page in bl, 0 in bh
2794   107F FD 9D 05      shl a, 5                      ; multiply by 32
2795   1082 39            mov c, a                      ; save in c
2796   1083 57 20 00      add c, 32
2797   1086             proc_memory_map_l0:
2798   1086 02            pagemap
2799   1087 55 00 08      add b, $0800                  ; increase page number (msb 5 bits of bh only)
2800   108A 53 01 00      add a, 1                      ; increase both 
2801   108D B1            cmp a, c                      ; check to see if we reached the end of memory
2802   108E C7 86 10      jne proc_memory_map_l0
2803   1091 09            ret
2804   1092               
2805   1092             
2806   1092             ;----------------------------------------------------------------------------------------------------;
2807   1092             ; terminate process
2808   1092             ;----------------------------------------------------------------------------------------------------;
2809   1092             syscall_terminate_proc:
2810   1092 51 05 00      add sp, 5                            ; clear stack of the values that were pushed by the interrupt (sp, status, pc)
2811   1095                                                    ; since they will not be used for anything here.
2812   1095 1D 50 19      mov al, [active_proc_index]
2813   1098 22 00         mov ah, 0  
2814   109A FD 9D 05      shl a, 5                             ; x32
2815   109D 53 DE 1C      add a, proc_names
2816   10A0 3C            mov d, a
2817   10A1 19 00         mov al, 0
2818   10A3 3E            mov [d], al                           ; nullify process name
2819   10A4             
2820   10A4 1D 50 19      mov al, [active_proc_index]
2821   10A7 22 00         mov ah, 0  
2822   10A9 3C            mov d, a
2823   10AA 19 00         mov al, 0
2824   10AC 3F CE 1C      mov [d + proc_availab_table], al    ; make process empty again
2825   10AF               
2826   10AF 1D 4F 19      mov al, [nbr_active_procs]          ; decrease nbr of active processes
2827   10B2 80            dec al
2828   10B3 3D 4F 19      mov [nbr_active_procs], al
2829   10B6             
2830   10B6             ; now load the shell process again
2831   10B6 19 02         mov al, 2                           ; next process = process 2 = shell
2832   10B8 3D 50 19      mov [active_proc_index], al         ; set next active proc
2833   10BB             
2834   10BB             ; calculate lut entry for next process
2835   10BB 22 00         mov ah, 0
2836   10BD FD 99         shl a                               ; x2
2837   10BF B7 88 11      mov a, [proc_table_convert + a]     ; get process state start index  
2838   10C2               
2839   10C2 4D            mov si, a                           ; source is proc state block
2840   10C3 48            mov a, sp
2841   10C4 5F 13 00      sub a, 19
2842   10C7 4F            mov di, a                           ; destination is kernel stack
2843   10C8             ; restore sp
2844   10C8 7D            dec a
2845   10C9 47            mov sp, a
2846   10CA 38 14 00      mov c, 20
2847   10CD FD F5         rep movsb
2848   10CF             ; set vm process
2849   10CF 1D 50 19      mov al, [active_proc_index]
2850   10D2 01            setptb
2851   10D3                 
2852   10D3 4C            popa
2853   10D4 06            sysret
2854   10D5             
2855   10D5             ;----------------------------------------------------------------------------------------------------;
2856   10D5             ; pause process
2857   10D5             ;----------------------------------------------------------------------------------------------------;
2858   10D5             syscall_pause_proc:
2859   10D5             ; save all registers into kernel stack
2860   10D5 4B            pusha
2861   10D6 22 00         mov ah, 0
2862   10D8 1D 50 19      mov al, [active_proc_index]
2863   10DB FD 99         shl a              ; x2
2864   10DD B7 88 11      mov a, [proc_table_convert + a]   ; get process state start index
2865   10E0                 
2866   10E0 4F            mov di, a
2867   10E1 48            mov a, sp
2868   10E2 77            inc a
2869   10E3 4D            mov si, a
2870   10E4 38 14 00      mov c, 20
2871   10E7 FD F5         rep movsb                         ; save process state!
2872   10E9             ; restore kernel stack position to point before interrupt arrived
2873   10E9 51 14 00      add sp, 20
2874   10EC             ; now load the shell process again
2875   10EC 19 02         mov al, 2                         ; next process = process 2 = shell
2876   10EE 3D 50 19      mov [active_proc_index], al       ; set next active proc
2877   10F1             
2878   10F1             ; calculate lut entry for next process
2879   10F1 22 00         mov ah, 0
2880   10F3 FD 99         shl a                             ; x2
2881   10F5 B7 88 11      mov a, [proc_table_convert + a]   ; get process state start index  
2882   10F8               
2883   10F8 4D            mov si, a                         ; source is proc state block
2884   10F9 48            mov a, sp
2885   10FA 5F 13 00      sub a, 19
2886   10FD 4F            mov di, a                         ; destination is kernel stack
2887   10FE             ; restore sp
2888   10FE 7D            dec a
2889   10FF 47            mov sp, a
2890   1100 38 14 00      mov c, 20
2891   1103 FD F5         rep movsb
2892   1105             ; set vm process
2893   1105 1D 50 19      mov al, [active_proc_index]
2894   1108 01            setptb
2895   1109                 
2896   1109 4C            popa
2897   110A 06            sysret
2898   110B             
2899   110B             ;----------------------------------------------------------------------------------------------------;
2900   110B             ; create a new process
2901   110B             ; d = path of the process file to be createed
2902   110B             ; b = arguments ptr
2903   110B             ;----------------------------------------------------------------------------------------------------;
2904   110B             syscall_create_proc:
2905   110B             ; we save the active process first  
2906   110B 4B            pusha
2907   110C 22 00         mov ah, 0
2908   110E 1D 50 19      mov al, [active_proc_index]
2909   1111 FD 99         shl a              ; x2
2910   1113 B7 88 11      mov a, [proc_table_convert + a]    ; get process state table's start index
2911   1116               
2912   1116 4F            mov di, a
2913   1117 48            mov a, sp
2914   1118 77            inc a
2915   1119 4D            mov si, a
2916   111A 38 14 00      mov c, 20
2917   111D FD F5         rep movsb                          ; save process state!
2918   111F             ; restore kernel stack position to point before interrupt arrived
2919   111F 51 14 00      add sp, 20
2920   1122               
2921   1122 FD 4E         mov si, d                          ; copy the file path
2922   1124 FD 4F 5E 1F   mov di, user_data
2923   1128 38 00 02      mov c, 512
2924   112B 04            load
2925   112C 11            mov a, b
2926   112D 4D            mov si, a                          ; copy the arguments
2927   112E FD 4F 5E 31   mov di, scrap_sector
2928   1132 38 00 02      mov c, 512
2929   1135 04            load
2930   1136 07 AA 0B      call loadfile_from_path            ; load the process file from disk by path (path is in user_data)
2931   1139                                                  ; the file data is loaded into transient_area
2932   1139             ; now we allocate a new process  
2933   1139 07 6A 10      call find_free_proc                ; index in a
2934   113C 01            setptb 
2935   113D 07 7C 10      call proc_memory_map               ; map process memory pages
2936   1140             ; copy arguments into process's memory
2937   1140 FD 4D 5E 31   mov si, scrap_sector
2938   1144 FD 4F 00 00   mov di, 0
2939   1148 38 00 02      mov c, 512
2940   114B 03            store
2941   114C             ; now copy process binary data into process's memory
2942   114C FD 4D 5E 33   mov si, transient_area
2943   1150 FD 4F 00 04   mov di, text_org                   ; code origin address for all user processes
2944   1154 38 00 40      mov c, fs_file_size                ; size of memory space to copy, which is equal to the max file size in disk (for now)
2945   1157 03            store                              ; copy process data
2946   1158                 
2947   1158 07 6A 10      call find_free_proc                ; index in a
2948   115B 3D 50 19      mov [active_proc_index], al        ; set new active process
2949   115E FD 9D 05      shl a, 5                           ; x32
2950   1161 53 DE 1C      add a, proc_names
2951   1164 4F            mov di, a
2952   1165 FD 4D 5E 1F   mov si, user_data                  ; copy and store process filename
2953   1169 07 72 12      call _strcpy
2954   116C               
2955   116C 07 6A 10      call find_free_proc                ; index in a
2956   116F 3C            mov d, a
2957   1170 19 01         mov al, 1
2958   1172 3F CE 1C      mov [d + proc_availab_table], al   ; make process busy
2959   1175               
2960   1175 1D 4F 19      mov al, [nbr_active_procs]         ; increase nbr of active processes
2961   1178 7A            inc al
2962   1179 3D 4F 19      mov [nbr_active_procs], al
2963   117C             ; launch process
2964   117C FD D7 FF FF   push word $ffff 
2965   1180 FD DB 0E      push byte %00001110                ; dma_ack = 0, interrupts enabled = 1, mode = user, paging = on, halt=0, display_reg_load=0, dir=0
2966   1183 FD D7 00 04   push word text_org
2967   1187 06            sysret
2968   1188             
2969   1188             proc_table_convert:
2970   1188 8E 1B         .dw proc_state_table + 0
2971   118A A2 1B         .dw proc_state_table + 20
2972   118C B6 1B         .dw proc_state_table + 40
2973   118E CA 1B         .dw proc_state_table + 60
2974   1190 DE 1B         .dw proc_state_table + 80
2975   1192 F2 1B         .dw proc_state_table + 100
2976   1194 06 1C         .dw proc_state_table + 120
2977   1196 1A 1C         .dw proc_state_table + 140
2978   1198               
2979   1198             ;----------------------------------------------------------------------------------------------;
2980   1198             ; get hex file
2981   1198             ; di = destination address
2982   1198             ; return length in bytes in c
2983   1198             ;----------------------------------------------------------------------------------------------;
2984   1198             _load_hex:
2985   1198 D7            push a
2986   1199 D8            push b
2987   119A DA            push d
2988   119B E2            push si
2989   119C E3            push di
2990   119D 38 00 00      mov c, 0
2991   11A0 50            mov a, di
2992   11A1 3C            mov d, a          ; start of string data block
2993   11A2 07 F5 12      call _gets        ; get program string
2994   11A5 4D            mov si, a
2995   11A6             __load_hex_loop:
2996   11A6 F6            lodsb             ; load from [si] to al
2997   11A7 B9 00         cmp al, 0         ; check if ascii 0
2998   11A9 C6 B7 11      jz __load_hex_ret
2999   11AC 36            mov bh, al
3000   11AD F6            lodsb
3001   11AE 2F            mov bl, al
3002   11AF 07 AB 12      call _atoi        ; convert ascii byte in b to int (to al)
3003   11B2 F7            stosb             ; store al to [di]
3004   11B3 78            inc c
3005   11B4 0A A6 11      jmp __load_hex_loop
3006   11B7             __load_hex_ret:
3007   11B7 F0            pop di
3008   11B8 EF            pop si
3009   11B9 E7            pop d
3010   11BA E5            pop b
3011   11BB E4            pop a
3012   11BC 09            ret
3013   11BD             
3014   11BD             ; synopsis: look inside a certain directory for files/directories
3015   11BD             ; before calling this function, cd into required directory
3016   11BD             ; for each entry inside directory:
3017   11BD             ;  if entry is a file:
3018   11BD             ;    compare filename to searched filename
3019   11BD             ;    if filenames are the same, print filename
3020   11BD             ;  else if entry is a directory:
3021   11BD             ;    cd to the given directory
3022   11BD             ;    recursively call cmd_find
3023   11BD             ;    cd outside previous directory
3024   11BD             ;  if current entry == last entry, return
3025   11BD             ; endfor
3026   11BD             f_find:
3027   11BD 09            ret
3028   11BE             
3029   11BE             
3030   11BE             ; ---------------------------------------------------------------------
3031   11BE             ; kernel reset vector
3032   11BE             ; ---------------------------------------------------------------------
3033   11BE             kernel_reset_vector:  
3034   11BE FD 49 FF F7   mov bp, _stack_begin
3035   11C2 FD 47 FF F7   mov sp, _stack_begin
3036   11C6               
3037   11C6 19 A1         mov al, %10100001             ; mask out timer interrupt for now - enable uarts and fdc irqs 
3038   11C8 FD 0F         stomsk                        
3039   11CA FD 0C         sti  
3040   11CC             
3041   11CC 0C            lodstat
3042   11CD 87 DF         and al, %11011111             ; disable display register loading
3043   11CF 0D            stostat
3044   11D0               
3045   11D0             ; reset fifo pointers
3046   11D0 10 5E 21      mov a, fifo
3047   11D3 3B 55 19      mov d, fifo_in
3048   11D6 43            mov [d], a
3049   11D7 3B 57 19      mov d, fifo_out
3050   11DA 43            mov [d], a  
3051   11DB 19 02         mov al, 2
3052   11DD 05 03         syscall sys_io                ; enable uart in interrupt mode
3053   11DF             
3054   11DF 3B AC 19      mov d, s_kernel_welcome
3055   11E2 07 1A 14      call _puts
3056   11E5             
3057   11E5 3B 4D 1B      mov d, s_fdc_config
3058   11E8 07 1A 14      call _puts
3059   11EB F2 C0 FF 0D   mov byte [_fdc_config], %00001101  ; %00001001 : turn led on / head load, disable double density, select side 0, select drive 0, do not select drive 1
3060   11EF F2 C8 FF 0B   mov byte [_fdc_stat_cmd], %00001011     ; leave this restore command in order to clear BUSY flag
3061   11F3 F2 C9 FF 00   mov byte [_fdc_track], $00 ; reset track
3062   11F7             
3063   11F7 19 10         mov al, 16
3064   11F9 05 04         syscall sys_filesystem        ; set root dirid
3065   11FB             
3066   11FB 3B 70 1A      mov d, s_prompt_init
3067   11FE 07 1A 14      call _puts
3068   1201 3B 5B 19      mov d, s_init_path
3069   1204 05 05         syscall sys_create_proc       ; launch init as a new process
3070   1206             
3071   1206             ; file includes
3072   1206             .include "bios.exp"         ; to obtain the bios_reset_vector location (for reboots)
0001+  1206             boot_origin      .EQU  $8004
0002+  1206             bios_uart        .EQU  $0002
0003+  1206             bios_ide         .EQU  $0003
0004+  1206             bios_reset_vector .EQU  $01c0
0005+  1206             ide_buffer       .EQU  $8204
3073   1206             .include "lib/stdio.asm"
0001+  1206             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1206             ; stdio.s
0003+  1206             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1206             .include "lib/string.asm"
0001++ 1206             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1206             ; string.s
0003++ 1206             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1206             
0005++ 1206             
0006++ 1206             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1206             ; _strrev
0008++ 1206             ; reverse a string
0009++ 1206             ; d = string address
0010++ 1206             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1206             ; 01234
0012++ 1206             _strrev:
0013++ 1206 4B          	pusha
0014++ 1207 07 4D 12    	call _strlen	; length in c
0015++ 120A 12          	mov a, c
0016++ 120B AF 01 00    	cmp a, 1
0017++ 120E D0 28 12    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1211 7D          	dec a
0019++ 1212 FD 4E       	mov si, d	; beginning of string
0020++ 1214 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1216 59          	add d, a	; end of string
0022++ 1217 12          	mov a, c
0023++ 1218 FD 9B       	shr a		; divide by 2
0024++ 121A 39          	mov c, a	; c now counts the steps
0025++ 121B             _strrev_l0:
0026++ 121B 32          	mov bl, [d]	; save load right-side char into bl
0027++ 121C F6          	lodsb		; load left-side char into al; increase si
0028++ 121D 3E          	mov [d], al	; store left char into right side
0029++ 121E 1B          	mov al, bl
0030++ 121F F7          	stosb		; store right-side char into left-side; increase di
0031++ 1220 7E          	dec c
0032++ 1221 7F          	dec d
0033++ 1222 C2 00 00    	cmp c, 0
0034++ 1225 C7 1B 12    	jne _strrev_l0
0035++ 1228             _strrev_end:
0036++ 1228 4C          	popa
0037++ 1229 09          	ret
0038++ 122A             	
0039++ 122A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 122A             ; _strchr
0041++ 122A             ; search string in d for char in al
0042++ 122A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 122A             _strchr:
0044++ 122A             _strchr_l0:
0045++ 122A 32          	mov bl, [d]
0046++ 122B C1 00       	cmp bl, 0
0047++ 122D C6 38 12    	je _strchr_end
0048++ 1230 BA          	cmp al, bl
0049++ 1231 C6 38 12    	je _strchr_end
0050++ 1234 79          	inc d
0051++ 1235 0A 2A 12    	jmp _strchr_l0
0052++ 1238             _strchr_end:
0053++ 1238 1B          	mov al, bl
0054++ 1239 09          	ret
0055++ 123A             
0056++ 123A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 123A             ; _strstr
0058++ 123A             ; find sub-string
0059++ 123A             ; str1 in si
0060++ 123A             ; str2 in di
0061++ 123A             ; si points to end of source string
0062++ 123A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 123A             _strstr:
0064++ 123A DB          	push al
0065++ 123B DA          	push d
0066++ 123C E3          	push di
0067++ 123D             _strstr_loop:
0068++ 123D F3          	cmpsb					; compare a byte of the strings
0069++ 123E C7 49 12    	jne _strstr_ret
0070++ 1241 FC 00 00    	lea d, [di + 0]
0071++ 1244 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1246 C7 3D 12    	jne _strstr_loop				; equal chars but not at end
0073++ 1249             _strstr_ret:
0074++ 1249 F0          	pop di
0075++ 124A E7          	pop d
0076++ 124B E8          	pop al
0077++ 124C 09          	ret
0078++ 124D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 124D             ; length of null terminated string
0080++ 124D             ; result in c
0081++ 124D             ; pointer in d
0082++ 124D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 124D             _strlen:
0084++ 124D DA          	push d
0085++ 124E 38 00 00    	mov c, 0
0086++ 1251             _strlen_l1:
0087++ 1251 BD 00       	cmp byte [d], 0
0088++ 1253 C6 5B 12    	je _strlen_ret
0089++ 1256 79          	inc d
0090++ 1257 78          	inc c
0091++ 1258 0A 51 12    	jmp _strlen_l1
0092++ 125B             _strlen_ret:
0093++ 125B E7          	pop d
0094++ 125C 09          	ret
0095++ 125D             
0096++ 125D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 125D             ; strcmp
0098++ 125D             ; compare two strings
0099++ 125D             ; str1 in si
0100++ 125D             ; str2 in di
0101++ 125D             ; create a string compairon instrucion ?????
0102++ 125D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 125D             _strcmp:
0104++ 125D DB          	push al
0105++ 125E DA          	push d
0106++ 125F E3          	push di
0107++ 1260 E2          	push si
0108++ 1261             _strcmp_loop:
0109++ 1261 F3          	cmpsb					; compare a byte of the strings
0110++ 1262 C7 6D 12    	jne _strcmp_ret
0111++ 1265 FB FF FF    	lea d, [si +- 1]
0112++ 1268 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 126A C7 61 12    	jne _strcmp_loop				; equal chars but not at end
0114++ 126D             _strcmp_ret:
0115++ 126D EF          	pop si
0116++ 126E F0          	pop di
0117++ 126F E7          	pop d
0118++ 1270 E8          	pop al
0119++ 1271 09          	ret
0120++ 1272             
0121++ 1272             
0122++ 1272             ; strcpy
0123++ 1272             ; copy null terminated string from si to di
0124++ 1272             ; source in si
0125++ 1272             ; destination in di
0126++ 1272             _strcpy:
0127++ 1272 E2          	push si
0128++ 1273 E3          	push di
0129++ 1274 DB          	push al
0130++ 1275             _strcpy_l1:
0131++ 1275 F6          	lodsb
0132++ 1276 F7          	stosb
0133++ 1277 B9 00       	cmp al, 0
0134++ 1279 C7 75 12    	jne _strcpy_l1
0135++ 127C             _strcpy_end:
0136++ 127C E8          	pop al
0137++ 127D F0          	pop di
0138++ 127E EF          	pop si
0139++ 127F 09          	ret
0140++ 1280             
0141++ 1280             ; strcat
0142++ 1280             ; concatenate a null terminated string into string at di, from string at si
0143++ 1280             ; source in si
0144++ 1280             ; destination in di
0145++ 1280             _strcat:
0146++ 1280 E2          	push si
0147++ 1281 E3          	push di
0148++ 1282 D7          	push a
0149++ 1283 DA          	push d
0150++ 1284 50          	mov a, di
0151++ 1285 3C          	mov d, a
0152++ 1286             _strcat_goto_end_l1:
0153++ 1286 BD 00       	cmp byte[d], 0
0154++ 1288 C6 8F 12    	je _strcat_start
0155++ 128B 79          	inc d
0156++ 128C 0A 86 12    	jmp _strcat_goto_end_l1
0157++ 128F             _strcat_start:
0158++ 128F FD 50       	mov di, d
0159++ 1291             _strcat_l1:
0160++ 1291 F6          	lodsb
0161++ 1292 F7          	stosb
0162++ 1293 B9 00       	cmp al, 0
0163++ 1295 C7 91 12    	jne _strcat_l1
0164++ 1298             _strcat_end:
0165++ 1298 E7          	pop d
0166++ 1299 E4          	pop a
0167++ 129A F0          	pop di
0168++ 129B EF          	pop si
0169++ 129C 09          	ret
0170++ 129D             
0171++ 129D             
0005+  129D             
0006+  129D             
0007+  129D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  129D             ; convert ascii 'o'..'f' to integer 0..15
0009+  129D             ; ascii in bl
0010+  129D             ; result in al
0011+  129D             ; ascii for f = 0100 0110
0012+  129D             ; ascii for 9 = 0011 1001
0013+  129D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  129D             hex_ascii_encode:
0015+  129D 1B            mov al, bl
0016+  129E 93 40         test al, $40        ; test if letter or number
0017+  12A0 C7 A6 12      jnz hex_letter
0018+  12A3 87 0F         and al, $0f        ; get number
0019+  12A5 09            ret
0020+  12A6             hex_letter:
0021+  12A6 87 0F         and al, $0f        ; get letter
0022+  12A8 6A 09         add al, 9
0023+  12AA 09            ret
0024+  12AB             
0025+  12AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  12AB             ; atoi
0027+  12AB             ; 2 letter hex string in b
0028+  12AB             ; 8bit integer returned in al
0029+  12AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  12AB             _atoi:
0031+  12AB D8            push b
0032+  12AC 07 9D 12      call hex_ascii_encode      ; convert bl to 4bit code in al
0033+  12AF 30            mov bl, bh
0034+  12B0 DB            push al          ; save a
0035+  12B1 07 9D 12      call hex_ascii_encode
0036+  12B4 EA            pop bl  
0037+  12B5 FD 9E 04      shl al, 4
0038+  12B8 8C            or al, bl
0039+  12B9 E5            pop b
0040+  12BA 09            ret  
0041+  12BB             
0042+  12BB             
0043+  12BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  12BB             ; scanf
0045+  12BB             ; no need for explanations!
0046+  12BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  12BB             scanf:
0048+  12BB 09            ret
0049+  12BC             
0050+  12BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  12BC             ; itoa
0052+  12BC             ; 8bit value in bl
0053+  12BC             ; 2 byte ascii result in a
0054+  12BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  12BC             _itoa:
0056+  12BC DA            push d
0057+  12BD D8            push b
0058+  12BE A7 00         mov bh, 0
0059+  12C0 FD A4 04      shr bl, 4  
0060+  12C3 74            mov d, b
0061+  12C4 1F 56 15      mov al, [d + s_hex_digits]
0062+  12C7 23            mov ah, al
0063+  12C8               
0064+  12C8 E5            pop b
0065+  12C9 D8            push b
0066+  12CA A7 00         mov bh, 0
0067+  12CC FD 87 0F      and bl, $0f
0068+  12CF 74            mov d, b
0069+  12D0 1F 56 15      mov al, [d + s_hex_digits]
0070+  12D3 E5            pop b
0071+  12D4 E7            pop d
0072+  12D5 09            ret
0073+  12D6             
0074+  12D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  12D6             ; hex string to binary
0076+  12D6             ; di = destination address
0077+  12D6             ; si = source
0078+  12D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  12D6             _hex_to_int:
0080+  12D6             _hex_to_int_l1:
0081+  12D6 F6            lodsb          ; load from [si] to al
0082+  12D7 B9 00         cmp al, 0        ; check if ascii 0
0083+  12D9 C6 E6 12      jz _hex_to_int_ret
0084+  12DC 36            mov bh, al
0085+  12DD F6            lodsb
0086+  12DE 2F            mov bl, al
0087+  12DF 07 AB 12      call _atoi        ; convert ascii byte in b to int (to al)
0088+  12E2 F7            stosb          ; store al to [di]
0089+  12E3 0A D6 12      jmp _hex_to_int_l1
0090+  12E6             _hex_to_int_ret:
0091+  12E6 09            ret    
0092+  12E7             
0093+  12E7             
0094+  12E7             
0095+  12E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  12E7             ; getchar
0097+  12E7             ; char in ah
0098+  12E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  12E7             getch:
0100+  12E7 DB            push al
0101+  12E8             getch_retry:
0102+  12E8 19 01         mov al, 1
0103+  12EA 05 03         syscall sys_io      ; receive in ah
0104+  12EC E8            pop al
0105+  12ED 09            ret
0106+  12EE             
0107+  12EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  12EE             ; putchar
0109+  12EE             ; char in ah
0110+  12EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  12EE             _putchar:
0112+  12EE DB            push al
0113+  12EF 19 00         mov al, 0
0114+  12F1 05 03         syscall sys_io      ; char in ah
0115+  12F3 E8            pop al
0116+  12F4 09            ret
0117+  12F5             
0118+  12F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  12F5             ;; input a string
0120+  12F5             ;; terminates with null
0121+  12F5             ;; pointer in d
0122+  12F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  12F5             _gets:
0124+  12F5 D7            push a
0125+  12F6 DA            push d
0126+  12F7             _gets_loop:
0127+  12F7 19 01         mov al, 1
0128+  12F9 05 03         syscall sys_io      ; receive in ah
0129+  12FB 76 1B         cmp ah, 27
0130+  12FD C6 1E 13      je _gets_ansi_esc
0131+  1300 76 0A         cmp ah, $0a        ; lf
0132+  1302 C6 7A 13      je _gets_end
0133+  1305 76 0D         cmp ah, $0d        ; cr
0134+  1307 C6 7A 13      je _gets_end
0135+  130A 76 5C         cmp ah, $5c        ; '\\'
0136+  130C C6 40 13      je _gets_escape
0137+  130F 76 08         cmp ah, $08      ; check for backspace
0138+  1311 C6 1A 13      je _gets_backspace
0139+  1314 1A            mov al, ah
0140+  1315 3E            mov [d], al
0141+  1316 79            inc d
0142+  1317 0A F7 12      jmp _gets_loop
0143+  131A             _gets_backspace:
0144+  131A 7F            dec d
0145+  131B 0A F7 12      jmp _gets_loop
0146+  131E             _gets_ansi_esc:
0147+  131E 19 01         mov al, 1
0148+  1320 05 03         syscall sys_io        ; receive in ah without echo
0149+  1322 76 5B         cmp ah, '['
0150+  1324 C7 F7 12      jne _gets_loop
0151+  1327 19 01         mov al, 1
0152+  1329 05 03         syscall sys_io          ; receive in ah without echo
0153+  132B 76 64         cmp ah, 'd'
0154+  132D C6 38 13      je _gets_left_arrow
0155+  1330 76 63         cmp ah, 'c'
0156+  1332 C6 3C 13      je _gets_right_arrow
0157+  1335 0A F7 12      jmp _gets_loop
0158+  1338             _gets_left_arrow:
0159+  1338 7F            dec d
0160+  1339 0A F7 12      jmp _gets_loop
0161+  133C             _gets_right_arrow:
0162+  133C 79            inc d
0163+  133D 0A F7 12      jmp _gets_loop
0164+  1340             _gets_escape:
0165+  1340 19 01         mov al, 1
0166+  1342 05 03         syscall sys_io      ; receive in ah
0167+  1344 76 6E         cmp ah, 'n'
0168+  1346 C6 65 13      je _gets_lf
0169+  1349 76 72         cmp ah, 'r'
0170+  134B C6 6C 13      je _gets_cr
0171+  134E 76 30         cmp ah, '0'
0172+  1350 C6 73 13      je _gets_null
0173+  1353 76 5C         cmp ah, $5c  ; '\'
0174+  1355 C6 5E 13      je _gets_slash
0175+  1358 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  1359 3E            mov [d], al
0177+  135A 79            inc d
0178+  135B 0A F7 12      jmp _gets_loop
0179+  135E             _gets_slash:
0180+  135E 19 5C         mov al, $5c
0181+  1360 3E            mov [d], al
0182+  1361 79            inc d
0183+  1362 0A F7 12      jmp _gets_loop
0184+  1365             _gets_lf:
0185+  1365 19 0A         mov al, $0a
0186+  1367 3E            mov [d], al
0187+  1368 79            inc d
0188+  1369 0A F7 12      jmp _gets_loop
0189+  136C             _gets_cr:
0190+  136C 19 0D         mov al, $0d
0191+  136E 3E            mov [d], al
0192+  136F 79            inc d
0193+  1370 0A F7 12      jmp _gets_loop
0194+  1373             _gets_null:
0195+  1373 19 00         mov al, $00
0196+  1375 3E            mov [d], al
0197+  1376 79            inc d
0198+  1377 0A F7 12      jmp _gets_loop
0199+  137A             _gets_end:
0200+  137A 19 00         mov al, 0
0201+  137C 3E            mov [d], al        ; terminate string
0202+  137D E7            pop d
0203+  137E E4            pop a
0204+  137F 09            ret
0205+  1380             
0206+  1380             
0207+  1380             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  1380             ;; input text
0209+  1380             ;; terminated with ctrl+d
0210+  1380             ;; pointer in d
0211+  1380             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  1380             _gettxt:
0213+  1380 D7            push a
0214+  1381 DA            push d
0215+  1382             _gettxt_loop:
0216+  1382 19 01         mov al, 1
0217+  1384 05 03         syscall sys_io      ; receive in ah
0218+  1386 76 04         cmp ah, 4      ; eot
0219+  1388 C6 C1 13      je _gettxt_end
0220+  138B 76 08         cmp ah, $08      ; check for backspace
0221+  138D C6 BD 13      je _gettxt_backspace
0222+  1390 76 5C         cmp ah, $5c        ; '\'
0223+  1392 C6 9B 13      je _gettxt_escape
0224+  1395 1A            mov al, ah
0225+  1396 3E            mov [d], al
0226+  1397 79            inc d
0227+  1398 0A 82 13      jmp _gettxt_loop
0228+  139B             _gettxt_escape:
0229+  139B 19 01         mov al, 1
0230+  139D 05 03         syscall sys_io      ; receive in ah
0231+  139F 76 6E         cmp ah, 'n'
0232+  13A1 C6 AF 13      je _gettxt_lf
0233+  13A4 76 72         cmp ah, 'r'
0234+  13A6 C6 B6 13      je _gettxt_cr
0235+  13A9 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  13AA 3E            mov [d], al
0237+  13AB 79            inc d
0238+  13AC 0A 82 13      jmp _gettxt_loop
0239+  13AF             _gettxt_lf:
0240+  13AF 19 0A         mov al, $0a
0241+  13B1 3E            mov [d], al
0242+  13B2 79            inc d
0243+  13B3 0A 82 13      jmp _gettxt_loop
0244+  13B6             _gettxt_cr:
0245+  13B6 19 0D         mov al, $0d
0246+  13B8 3E            mov [d], al
0247+  13B9 79            inc d
0248+  13BA 0A 82 13      jmp _gettxt_loop
0249+  13BD             _gettxt_backspace:
0250+  13BD 7F            dec d
0251+  13BE 0A 82 13      jmp _gettxt_loop
0252+  13C1             _gettxt_end:
0253+  13C1 19 00         mov al, 0
0254+  13C3 3E            mov [d], al        ; terminate string
0255+  13C4 E7            pop d
0256+  13C5 E4            pop a
0257+  13C6 09            ret
0258+  13C7             
0259+  13C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  13C7             ; print new line
0261+  13C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  13C7             printnl:
0263+  13C7 D7            push a
0264+  13C8 10 00 0A      mov a, $0a00
0265+  13CB 05 03         syscall sys_io
0266+  13CD 10 00 0D      mov a, $0d00
0267+  13D0 05 03         syscall sys_io
0268+  13D2 E4            pop a
0269+  13D3 09            ret
0270+  13D4             
0271+  13D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  13D4             ; _strtoint
0273+  13D4             ; 4 digit hex string number in d
0274+  13D4             ; integer returned in a
0275+  13D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  13D4             _strtointx:
0277+  13D4 D8            push b
0278+  13D5 32            mov bl, [d]
0279+  13D6 37            mov bh, bl
0280+  13D7 33 01 00      mov bl, [d + 1]
0281+  13DA 07 AB 12      call _atoi        ; convert to int in al
0282+  13DD 23            mov ah, al        ; move to ah
0283+  13DE 33 02 00      mov bl, [d + 2]
0284+  13E1 37            mov bh, bl
0285+  13E2 33 03 00      mov bl, [d + 3]
0286+  13E5 07 AB 12      call _atoi        ; convert to int in al
0287+  13E8 E5            pop b
0288+  13E9 09            ret
0289+  13EA             
0290+  13EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  13EA             ; _strtoint
0292+  13EA             ; 5 digit base10 string number in d
0293+  13EA             ; integer returned in a
0294+  13EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  13EA             _strtoint:
0296+  13EA E2            push si
0297+  13EB D8            push b
0298+  13EC D9            push c
0299+  13ED DA            push d
0300+  13EE 07 4D 12      call _strlen      ; get string length in c
0301+  13F1 7E            dec c
0302+  13F2 FD 4E         mov si, d
0303+  13F4 12            mov a, c
0304+  13F5 FD 99         shl a
0305+  13F7 3B 6E 15      mov d, table_power
0306+  13FA 59            add d, a
0307+  13FB 38 00 00      mov c, 0
0308+  13FE             _strtoint_l0:
0309+  13FE F6            lodsb      ; load ascii to al
0310+  13FF B9 00         cmp al, 0
0311+  1401 C6 14 14      je _strtoint_end
0312+  1404 6F 30         sub al, $30    ; make into integer
0313+  1406 22 00         mov ah, 0
0314+  1408 2A            mov b, [d]
0315+  1409 AC            mul a, b      ; result in b since it fits in 16bits
0316+  140A 11            mov a, b
0317+  140B 28            mov b, c
0318+  140C 54            add a, b
0319+  140D 39            mov c, a
0320+  140E 63 02 00      sub d, 2
0321+  1411 0A FE 13      jmp _strtoint_l0
0322+  1414             _strtoint_end:
0323+  1414 12            mov a, c
0324+  1415 E7            pop d
0325+  1416 E6            pop c
0326+  1417 E5            pop b
0327+  1418 EF            pop si
0328+  1419 09            ret
0329+  141A             
0330+  141A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  141A             ; print null terminated string
0332+  141A             ; pointer in d
0333+  141A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  141A             _puts:
0335+  141A D7            push a
0336+  141B DA            push d
0337+  141C             _puts_l1:
0338+  141C 1E            mov al, [d]
0339+  141D B9 00         cmp al, 0
0340+  141F C6 2B 14      jz _puts_end
0341+  1422 23            mov ah, al
0342+  1423 19 00         mov al, 0
0343+  1425 05 03         syscall sys_io
0344+  1427 79            inc d
0345+  1428 0A 1C 14      jmp _puts_l1
0346+  142B             _puts_end:
0347+  142B E7            pop d
0348+  142C E4            pop a
0349+  142D 09            ret
0350+  142E             
0351+  142E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  142E             ; print n size string
0353+  142E             ; pointer in d
0354+  142E             ; size in c
0355+  142E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  142E             _putsn:
0357+  142E DB            push al
0358+  142F DA            push d
0359+  1430 D9            push c
0360+  1431             _putsn_l0:
0361+  1431 1E            mov al, [d]
0362+  1432 23            mov ah, al
0363+  1433 19 00         mov al, 0
0364+  1435 05 03         syscall sys_io
0365+  1437 79            inc d
0366+  1438 7E            dec c  
0367+  1439 C2 00 00      cmp c, 0
0368+  143C C7 31 14      jne _putsn_l0
0369+  143F             _putsn_end:
0370+  143F E6            pop c
0371+  1440 E7            pop d
0372+  1441 E8            pop al
0373+  1442 09            ret
0374+  1443             
0375+  1443             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  1443             ; print 16bit decimal number
0377+  1443             ; input number in a
0378+  1443             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  1443             print_u16d:
0380+  1443 D7            push a
0381+  1444 D8            push b
0382+  1445 FD D8         push g
0383+  1447 26 10 27      mov b, 10000
0384+  144A AE            div a, b      ; get 10000's coeff.
0385+  144B 07 6F 14      call print_number
0386+  144E 11            mov a, b
0387+  144F 26 E8 03      mov b, 1000
0388+  1452 AE            div a, b      ; get 1000's coeff.
0389+  1453 07 6F 14      call print_number
0390+  1456 11            mov a, b
0391+  1457 26 64 00      mov b, 100
0392+  145A AE            div a, b
0393+  145B 07 6F 14      call print_number
0394+  145E 11            mov a, b
0395+  145F 26 0A 00      mov b, 10
0396+  1462 AE            div a, b
0397+  1463 07 6F 14      call print_number
0398+  1466 1B            mov al, bl      ; 1's coeff in bl
0399+  1467 07 6F 14      call print_number
0400+  146A FD F1         pop g
0401+  146C E5            pop b
0402+  146D E4            pop a
0403+  146E 09            ret
0404+  146F             
0405+  146F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  146F             ; print al
0407+  146F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  146F             print_number:
0409+  146F 6A 30         add al, $30
0410+  1471 23            mov ah, al
0411+  1472 07 EE 12      call _putchar
0412+  1475 09            ret
0413+  1476             
0414+  1476             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  1476             ; print 16bit hex integer
0416+  1476             ; integer value in reg b
0417+  1476             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  1476             print_u16x:
0419+  1476 D7            push a
0420+  1477 D8            push b
0421+  1478 DD            push bl
0422+  1479 30            mov bl, bh
0423+  147A 07 BC 12      call _itoa        ; convert bh to char in a
0424+  147D 2F            mov bl, al        ; save al
0425+  147E 19 00         mov al, 0
0426+  1480 05 03         syscall sys_io        ; display ah
0427+  1482 24            mov ah, bl        ; retrieve al
0428+  1483 19 00         mov al, 0
0429+  1485 05 03         syscall sys_io        ; display al
0430+  1487             
0431+  1487 EA            pop bl
0432+  1488 07 BC 12      call _itoa        ; convert bh to char in a
0433+  148B 2F            mov bl, al        ; save al
0434+  148C 19 00         mov al, 0
0435+  148E 05 03         syscall sys_io        ; display ah
0436+  1490 24            mov ah, bl        ; retrieve al
0437+  1491 19 00         mov al, 0
0438+  1493 05 03         syscall sys_io        ; display al
0439+  1495             
0440+  1495 E5            pop b
0441+  1496 E4            pop a
0442+  1497 09            ret
0443+  1498             
0444+  1498             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  1498             ; input 16bit hex integer
0446+  1498             ; read 16bit integer into a
0447+  1498             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  1498             scan_u16x:
0449+  1498 F8 10 00      enter 16
0450+  149B D8            push b
0451+  149C DA            push d
0452+  149D             
0453+  149D FA F1 FF      lea d, [bp + -15]
0454+  14A0 07 F5 12      call _gets        ; get number
0455+  14A3             
0456+  14A3 32            mov bl, [d]
0457+  14A4 37            mov bh, bl
0458+  14A5 33 01 00      mov bl, [d + 1]
0459+  14A8 07 AB 12      call _atoi        ; convert to int in al
0460+  14AB 23            mov ah, al        ; move to ah
0461+  14AC             
0462+  14AC 33 02 00      mov bl, [d + 2]
0463+  14AF 37            mov bh, bl
0464+  14B0 33 03 00      mov bl, [d + 3]
0465+  14B3 07 AB 12      call _atoi        ; convert to int in al
0466+  14B6             
0467+  14B6 E7            pop d
0468+  14B7 E5            pop b
0469+  14B8 F9            leave
0470+  14B9 09            ret
0471+  14BA             
0472+  14BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  14BA             ; print 8bit hex integer
0474+  14BA             ; integer value in reg bl
0475+  14BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  14BA             print_u8x:
0477+  14BA D7            push a
0478+  14BB DD            push bl
0479+  14BC             
0480+  14BC 07 BC 12      call _itoa        ; convert bl to char in a
0481+  14BF 2F            mov bl, al        ; save al
0482+  14C0 19 00         mov al, 0
0483+  14C2 05 03         syscall sys_io        ; display ah
0484+  14C4 24            mov ah, bl        ; retrieve al
0485+  14C5 19 00         mov al, 0
0486+  14C7 05 03         syscall sys_io        ; display al
0487+  14C9             
0488+  14C9 EA            pop bl
0489+  14CA E4            pop a
0490+  14CB 09            ret
0491+  14CC             
0492+  14CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  14CC             ; print 8bit decimal unsigned number
0494+  14CC             ; input number in al
0495+  14CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  14CC             print_u8d:
0497+  14CC D7            push a
0498+  14CD D8            push b
0499+  14CE FD D8         push g
0500+  14D0 22 00         mov ah, 0
0501+  14D2 26 64 00      mov b, 100
0502+  14D5 AE            div a, b
0503+  14D6 D8            push b      ; save remainder
0504+  14D7 B9 00         cmp al, 0
0505+  14D9 C6 E3 14      je skip100
0506+  14DC 6A 30         add al, $30
0507+  14DE 23            mov ah, al
0508+  14DF 19 00         mov al, 0
0509+  14E1 05 03         syscall sys_io  ; print coeff
0510+  14E3             skip100:
0511+  14E3 E4            pop a
0512+  14E4 22 00         mov ah, 0
0513+  14E6 26 0A 00      mov b, 10
0514+  14E9 AE            div a, b
0515+  14EA D8            push b      ; save remainder
0516+  14EB B9 00         cmp al, 0
0517+  14ED C6 F7 14      je skip10
0518+  14F0 6A 30         add al, $30
0519+  14F2 23            mov ah, al
0520+  14F3 19 00         mov al, 0
0521+  14F5 05 03         syscall sys_io  ; print coeff
0522+  14F7             skip10:
0523+  14F7 E4            pop a
0524+  14F8 1B            mov al, bl
0525+  14F9 6A 30         add al, $30
0526+  14FB 23            mov ah, al
0527+  14FC 19 00         mov al, 0
0528+  14FE 05 03         syscall sys_io  ; print coeff
0529+  1500 FD F1         pop g
0530+  1502 E5            pop b
0531+  1503 E4            pop a
0532+  1504 09            ret
0533+  1505             
0534+  1505             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  1505             ; input 8bit hex integer
0536+  1505             ; read 8bit integer into al
0537+  1505             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  1505             scan_u8x:
0539+  1505 F8 04 00      enter 4
0540+  1508 D8            push b
0541+  1509 DA            push d
0542+  150A             
0543+  150A FA FD FF      lea d, [bp + -3]
0544+  150D 07 F5 12      call _gets        ; get number
0545+  1510             
0546+  1510 32            mov bl, [d]
0547+  1511 37            mov bh, bl
0548+  1512 33 01 00      mov bl, [d + 1]
0549+  1515 07 AB 12      call _atoi        ; convert to int in al
0550+  1518             
0551+  1518 E7            pop d
0552+  1519 E5            pop b
0553+  151A F9            leave
0554+  151B 09            ret
0555+  151C             
0556+  151C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  151C             ; input decimal number
0558+  151C             ; result in a
0559+  151C             ; 655'\0'
0560+  151C             ; low--------high
0561+  151C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  151C             scan_u16d:
0563+  151C F8 08 00      enter 8
0564+  151F E2            push si
0565+  1520 D8            push b
0566+  1521 D9            push c
0567+  1522 DA            push d
0568+  1523 FA F9 FF      lea d, [bp +- 7]
0569+  1526 07 F5 12      call _gets
0570+  1529 07 4D 12      call _strlen      ; get string length in c
0571+  152C 7E            dec c
0572+  152D FD 4E         mov si, d
0573+  152F 12            mov a, c
0574+  1530 FD 99         shl a
0575+  1532 3B 6E 15      mov d, table_power
0576+  1535 59            add d, a
0577+  1536 38 00 00      mov c, 0
0578+  1539             mul_loop:
0579+  1539 F6            lodsb      ; load ascii to al
0580+  153A B9 00         cmp al, 0
0581+  153C C6 4F 15      je mul_exit
0582+  153F 6F 30         sub al, $30    ; make into integer
0583+  1541 22 00         mov ah, 0
0584+  1543 2A            mov b, [d]
0585+  1544 AC            mul a, b      ; result in b since it fits in 16bits
0586+  1545 11            mov a, b
0587+  1546 28            mov b, c
0588+  1547 54            add a, b
0589+  1548 39            mov c, a
0590+  1549 63 02 00      sub d, 2
0591+  154C 0A 39 15      jmp mul_loop
0592+  154F             mul_exit:
0593+  154F 12            mov a, c
0594+  1550 E7            pop d
0595+  1551 E6            pop c
0596+  1552 E5            pop b
0597+  1553 EF            pop si
0598+  1554 F9            leave
0599+  1555 09            ret
0600+  1556             
0601+  1556             
0602+  1556 30 31 32 33 s_hex_digits:    .db "0123456789abcdef"  
0602+  155A 34 35 36 37 
0602+  155E 38 39 61 62 
0602+  1562 63 64 65 66 
0603+  1566 1B 5B 32 6A s_telnet_clear:  .db "\033[2j\033[h", 0
0603+  156A 1B 5B 68 00 
0604+  156E             
0605+  156E             table_power:
0606+  156E 01 00         .dw 1
0607+  1570 0A 00         .dw 10
0608+  1572 64 00         .dw 100
0609+  1574 E8 03         .dw 1000
0610+  1576 10 27         .dw 100003074   1578             .include "lib/ctype.asm"
0001+  1578             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1578             ; ctype.s
0003+  1578             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1578             
0005+  1578             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  1578             ;; c character classification is an operation provided by a group of functions in the ansi c standard library
0007+  1578             ;; for the c programming language. these functions are used to test characters for membership in a particular
0008+  1578             ;; class of characters, such as alphabetic characters, control characters, etc. both single-byte, and wide
0009+  1578             ;; characters are supported.
0010+  1578             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  1578             ;; _isalnum 
0012+  1578             ;; _isalpha 
0013+  1578             ;; islower 
0014+  1578             ;; isupper 
0015+  1578             ;; _isdigit 
0016+  1578             ;; isxdigit
0017+  1578             ;; iscntrl 
0018+  1578             ;; isgraph 
0019+  1578             ;; _isspace 
0020+  1578             ;; isblank 
0021+  1578             ;; isprint 
0022+  1578             ;; ispunct 
0023+  1578             ;; tolower 
0024+  1578             ;; toupper
0025+  1578             
0026+  1578             
0027+  1578             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  1578             ;; is alphanumeric
0029+  1578             ;; sets zf according with result
0030+  1578             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  1578             _isalnum:
0032+  1578 07 95 15    	call _isalpha
0033+  157B C6 81 15    	je _isalnum_exit
0034+  157E 07 82 15    	call _isdigit
0035+  1581             _isalnum_exit:
0036+  1581 09          	ret	
0037+  1582             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  1582             ;; is digit
0039+  1582             ;; sets zf according with result
0040+  1582             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  1582             _isdigit:
0042+  1582 DB          	push al
0043+  1583 B9 30       	cmp al, '0'
0044+  1585 C8 91 15    	jlu _isdigit_false
0045+  1588 B9 39       	cmp al, '9'
0046+  158A D1 91 15    	jgu _isdigit_false
0047+  158D 87 00       	and al, 0	; set zf
0048+  158F E8          	pop al
0049+  1590 09          	ret
0050+  1591             _isdigit_false:
0051+  1591 8B 01       	or al, 1	; clear zf
0052+  1593 E8          	pop al
0053+  1594 09          	ret	
0054+  1595             	
0055+  1595             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  1595             ;; is alpha
0057+  1595             ;; sets zf according with result
0058+  1595             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  1595             _isalpha:
0060+  1595 DB          	push al
0061+  1596 B9 5F       	cmp al, '_'
0062+  1598 C6 B8 15    	je _isalpha_true
0063+  159B B9 2E       	cmp al, '.'
0064+  159D C6 B8 15    	je _isalpha_true
0065+  15A0 B9 61       	cmp al, 'a'
0066+  15A2 C8 B4 15    	jlu _isalpha_false
0067+  15A5 B9 7A       	cmp al, 'z'
0068+  15A7 D1 B4 15    	jgu _isalpha_false
0069+  15AA B9 7A       	cmp al, 'z'
0070+  15AC D0 B8 15    	jleu _isalpha_true
0071+  15AF B9 61       	cmp al, 'a'
0072+  15B1 C9 B8 15    	jgeu _isalpha_true
0073+  15B4             _isalpha_false:
0074+  15B4 8B 01       	or al, 1	; clear zf
0075+  15B6 E8          	pop al
0076+  15B7 09          	ret
0077+  15B8             _isalpha_true:
0078+  15B8 87 00       	and al, 0	; set zf
0079+  15BA E8          	pop al
0080+  15BB 09          	ret
0081+  15BC             
0082+  15BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  15BC             ;; is path-alpha
0084+  15BC             ;; sets zf according with result
0085+  15BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  15BC             ispath:
0087+  15BC DB          	push al
0088+  15BD 07 82 15    	call _isdigit
0089+  15C0 C6 EA 15    	je ispath_true
0090+  15C3 B9 5F       	cmp al, '_'
0091+  15C5 C6 EA 15    	je ispath_true
0092+  15C8 B9 2F       	cmp al, '/'
0093+  15CA C6 EA 15    	je ispath_true
0094+  15CD B9 2E       	cmp al, '.'
0095+  15CF C6 EA 15    	je ispath_true
0096+  15D2 B9 61       	cmp al, 'a'
0097+  15D4 C8 E6 15    	jlu ispath_false
0098+  15D7 B9 7A       	cmp al, 'z'
0099+  15D9 D1 E6 15    	jgu ispath_false
0100+  15DC B9 7A       	cmp al, 'z'
0101+  15DE D0 EA 15    	jleu ispath_true
0102+  15E1 B9 61       	cmp al, 'a'
0103+  15E3 C9 EA 15    	jgeu ispath_true
0104+  15E6             ispath_false:
0105+  15E6 8B 01       	or al, 1	; clear zf
0106+  15E8 E8          	pop al
0107+  15E9 09          	ret
0108+  15EA             ispath_true:
0109+  15EA 87 00       	and al, 0	; set zf
0110+  15EC E8          	pop al
0111+  15ED 09          	ret
0112+  15EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  15EE             ;; is space
0114+  15EE             ;; sets zf according with result
0115+  15EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  15EE             _isspace:
0117+  15EE B9 20       	cmp al, $20		; ' '
0118+  15F0 C6 04 16    	je _isspace_exit
0119+  15F3 B9 09       	cmp al, $09		; '\t'
0120+  15F5 C6 04 16    	je _isspace_exit
0121+  15F8 B9 0A       	cmp al, $0a		; '\n'
0122+  15FA C6 04 16    	je _isspace_exit
0123+  15FD B9 0D       	cmp al, $0d		; '\r'
0124+  15FF C6 04 16    	je _isspace_exit
0125+  1602 B9 0B       	cmp al, $0b		; '\v'
0126+  1604             _isspace_exit:
0127+  1604 09          	ret	
0128+  1605             
0129+  1605             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  1605             ; to lower
0131+  1605             ; input in al
0132+  1605             ; output in al
0133+  1605             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  1605             _to_lower:
0135+  1605 B9 7A       	cmp al, 'z'
0136+  1607 D1 0C 16    	jgu _to_lower_ret
0137+  160A 6A 20       	add al, $20				; convert to lower case
0138+  160C             _to_lower_ret:
0139+  160C 09          	ret
0140+  160D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  160D             ; to upper
0142+  160D             ; input in al
0143+  160D             ; output in al
0144+  160D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  160D             _to_upper:
0146+  160D B9 61       	cmp al, 'a'
0147+  160F C8 14 16    	jlu _to_upper_ret
0148+  1612 6F 20       	sub al, $20			; convert to upper case
0149+  1614             _to_upper_ret:
0150+  1614 09          	ret
0151+  1615             
3075   1615             .include "lib/token.asm"
0001+  1615             toktyp_identifier  .equ 0
0002+  1615             toktyp_keyword     .equ 1
0003+  1615             toktyp_delimiter   .equ 2
0004+  1615             toktyp_string      .equ 3
0005+  1615             toktyp_char        .equ 4
0006+  1615             toktyp_numeric     .equ 5
0007+  1615             toktyp_end         .equ 6
0008+  1615             
0009+  1615             tok_null           .equ 0
0010+  1615             tok_fslash         .equ 1
0011+  1615             tok_times          .equ 2
0012+  1615             tok_plus           .equ 3
0013+  1615             tok_minus          .equ 4
0014+  1615             tok_dot            .equ 5
0015+  1615             tok_semi           .equ 6
0016+  1615             tok_angle          .equ 7
0017+  1615             tok_tilde          .equ 8
0018+  1615             tok_equal          .equ 9
0019+  1615             tok_colon          .equ 10
0020+  1615             tok_comma          .equ 11
0021+  1615             
0022+  1615             tok_end            .equ 20
0023+  1615             
0024+  1615             
0025+  1615             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  1615             ;; read a full command argment from shell input buffer
0027+  1615             ;; argument is written into tokstr
0028+  1615             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  1615             get_arg:
0030+  1615 D7            push a
0031+  1616 E2            push si
0032+  1617 E3            push di
0033+  1618 19 00         mov al, 0
0034+  161A 3D 43 18      mov [tokstr], al      ; nullify tokstr string
0035+  161D 14 3F 18      mov a, [prog]
0036+  1620 4D            mov si, a
0037+  1621 FD 4F 43 18   mov di, tokstr
0038+  1625             get_arg_skip_spaces:
0039+  1625 F6            lodsb
0040+  1626 07 EE 15      call _isspace
0041+  1629 C6 25 16      je get_arg_skip_spaces
0042+  162C             get_arg_l0:
0043+  162C B9 3B         cmp al, $3b        ; check if is ';'
0044+  162E C6 3B 16      je get_arg_end
0045+  1631 B9 00         cmp al, 0
0046+  1633 C6 3B 16      je get_arg_end      ; check if end of input
0047+  1636 F7            stosb
0048+  1637 F6            lodsb
0049+  1638 0A 2C 16      jmp get_arg_l0
0050+  163B             get_arg_end:
0051+  163B 19 00         mov al, 0
0052+  163D F7            stosb
0053+  163E D5 01 00      sub si, 1
0054+  1641 4E            mov a, si
0055+  1642 42 3F 18      mov [prog], a    ; update pointer
0056+  1645 F0            pop di
0057+  1646 EF            pop si
0058+  1647 E4            pop a
0059+  1648 09            ret
0060+  1649             
0061+  1649             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  1649             ;; read a path formation from shell input buffer
0063+  1649             ;; path is written into tokstr
0064+  1649             ;; /usr/bin
0065+  1649             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  1649             get_path:
0067+  1649 D7            push a
0068+  164A E2            push si
0069+  164B E3            push di
0070+  164C 19 00         mov al, 0
0071+  164E 3D 43 18      mov [tokstr], al      ; nullify tokstr string
0072+  1651 14 3F 18      mov a, [prog]
0073+  1654 4D            mov si, a
0074+  1655 FD 4F 43 18   mov di, tokstr
0075+  1659             get_path_skip_spaces:
0076+  1659 F6            lodsb
0077+  165A 07 EE 15      call _isspace
0078+  165D C6 59 16      je get_path_skip_spaces
0079+  1660             get_path_is_pathchar:
0080+  1660 F7            stosb
0081+  1661 F6            lodsb
0082+  1662 07 78 15      call _isalnum      ;check if is alphanumeric
0083+  1665 C6 60 16      je get_path_is_pathchar
0084+  1668 B9 2F         cmp al, '/'        ; check if is '/'
0085+  166A C6 60 16      je get_path_is_pathchar
0086+  166D 19 00         mov al, 0
0087+  166F F7            stosb
0088+  1670 D5 01 00      sub si, 1
0089+  1673 4E            mov a, si
0090+  1674 42 3F 18      mov [prog], a    ; update pointer
0091+  1677             get_path_end:
0092+  1677 F0            pop di
0093+  1678 EF            pop si
0094+  1679 E4            pop a
0095+  167A 09            ret
0096+  167B             
0097+  167B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  167B             ;; read a line
0099+  167B             ;; line is written into tokstr
0100+  167B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  167B             get_line:
0102+  167B D7            push a
0103+  167C E2            push si
0104+  167D E3            push di
0105+  167E 19 00         mov al, 0
0106+  1680 3D 43 18      mov [tokstr], al      ; nullify tokstr string
0107+  1683 14 3F 18      mov a, [prog]
0108+  1686 4D            mov si, a
0109+  1687 FD 4F 43 18   mov di, tokstr
0110+  168B             get_line_l0:
0111+  168B F6            lodsb
0112+  168C B9 0A         cmp al, $0a    ; check for new line
0113+  168E C6 95 16      je get_line_exit
0114+  1691 F7            stosb
0115+  1692 0A 8B 16      jmp get_line_l0
0116+  1695             get_line_exit:
0117+  1695 19 00         mov al, 0
0118+  1697 F7            stosb
0119+  1698 4E            mov a, si
0120+  1699 42 3F 18      mov [prog], a    ; update pointer
0121+  169C F0            pop di
0122+  169D EF            pop si
0123+  169E E4            pop a
0124+  169F 09            ret
0125+  16A0             
0126+  16A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  16A0             ;; token parser
0128+  16A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  16A0             get_token:
0130+  16A0 D7            push a
0131+  16A1 DA            push d
0132+  16A2 E2            push si
0133+  16A3 E3            push di
0134+  16A4 19 00         mov al, 0
0135+  16A6 3D 43 18      mov [tokstr], al      ; nullify tokstr string
0136+  16A9 19 00         mov al, tok_null
0137+  16AB 3D 42 18      mov [tok], al        ; nullify token
0138+  16AE 14 3F 18      mov a, [prog]
0139+  16B1 4D            mov si, a
0140+  16B2 FD 4F 43 18   mov di, tokstr
0141+  16B6             get_tok_skip_spaces:
0142+  16B6 F6            lodsb
0143+  16B7 07 EE 15      call _isspace
0144+  16BA C6 B6 16      je get_tok_skip_spaces
0145+  16BD B9 00         cmp al, 0      ; check for end of input (null)
0146+  16BF C6 A4 17      je get_token_end
0147+  16C2 B9 23         cmp al, '#'      ; comments!
0148+  16C4 C6 D2 17      je get_tok_comment
0149+  16C7 07 78 15      call _isalnum
0150+  16CA C6 B1 17      jz is_alphanumeric
0151+  16CD             ; other token types
0152+  16CD             get_token_slash:
0153+  16CD B9 2F         cmp al, '/'        ; check if '/'
0154+  16CF C7 E7 16      jne get_token_minus
0155+  16D2 F7            stosb          ; store '/' into token string
0156+  16D3 19 00         mov al, 0
0157+  16D5 F7            stosb          ; terminate token string
0158+  16D6 19 01         mov al, tok_fslash
0159+  16D8 3D 42 18      mov [tok], al      
0160+  16DB 19 02         mov al, toktyp_delimiter
0161+  16DD 3D 41 18      mov [toktyp], al
0162+  16E0 4E            mov a, si
0163+  16E1 42 3F 18      mov [prog], a    ; update pointer
0164+  16E4 0A CD 17      jmp get_token_return
0165+  16E7             get_token_minus:
0166+  16E7 B9 2D         cmp al, '-'        ; check if '-'
0167+  16E9 C7 01 17      jne get_token_comma
0168+  16EC F7            stosb          ; store '-' into token string
0169+  16ED 19 00         mov al, 0
0170+  16EF F7            stosb          ; terminate token string
0171+  16F0 19 04         mov al, tok_minus
0172+  16F2 3D 42 18      mov [tok], al      
0173+  16F5 19 02         mov al, toktyp_delimiter
0174+  16F7 3D 41 18      mov [toktyp], al
0175+  16FA 4E            mov a, si
0176+  16FB 42 3F 18      mov [prog], a    ; update pointer
0177+  16FE 0A CD 17      jmp get_token_return
0178+  1701             get_token_comma:
0179+  1701 B9 2C         cmp al, ','        ; check if ','
0180+  1703 C7 1B 17      jne get_token_semi
0181+  1706 F7            stosb          ; store ',' into token string
0182+  1707 19 00         mov al, 0
0183+  1709 F7            stosb          ; terminate token string
0184+  170A 19 0B         mov al, tok_comma
0185+  170C 3D 42 18      mov [tok], al      
0186+  170F 19 02         mov al, toktyp_delimiter
0187+  1711 3D 41 18      mov [toktyp], al
0188+  1714 4E            mov a, si
0189+  1715 42 3F 18      mov [prog], a    ; update pointer
0190+  1718 0A CD 17      jmp get_token_return
0191+  171B             get_token_semi:
0192+  171B B9 3B         cmp al, $3b        ; check if ';'
0193+  171D C7 35 17      jne get_token_colon
0194+  1720 F7            stosb          ; store ';' into token string
0195+  1721 19 00         mov al, 0
0196+  1723 F7            stosb          ; terminate token string
0197+  1724 19 06         mov al, tok_semi
0198+  1726 3D 42 18      mov [tok], al      
0199+  1729 19 02         mov al, toktyp_delimiter
0200+  172B 3D 41 18      mov [toktyp], al
0201+  172E 4E            mov a, si
0202+  172F 42 3F 18      mov [prog], a    ; update pointer
0203+  1732 0A CD 17      jmp get_token_return
0204+  1735             get_token_colon:
0205+  1735 B9 3A         cmp al, $3a        ; check if ':'
0206+  1737 C7 4F 17      jne get_token_angle
0207+  173A F7            stosb          ; store ':' into token string
0208+  173B 19 00         mov al, 0
0209+  173D F7            stosb          ; terminate token string
0210+  173E 19 0A         mov al, tok_colon
0211+  1740 3D 42 18      mov [tok], al      
0212+  1743 19 02         mov al, toktyp_delimiter
0213+  1745 3D 41 18      mov [toktyp], al
0214+  1748 4E            mov a, si
0215+  1749 42 3F 18      mov [prog], a    ; update pointer
0216+  174C 0A CD 17      jmp get_token_return
0217+  174F             get_token_angle:
0218+  174F B9 3E         cmp al, $3e        ; check if '>'
0219+  1751 C7 69 17      jne get_token_tilde
0220+  1754 F7            stosb          ; store '>' into token string
0221+  1755 19 00         mov al, 0
0222+  1757 F7            stosb          ; terminate token string
0223+  1758 19 07         mov al, tok_angle
0224+  175A 3D 42 18      mov [tok], al      
0225+  175D 19 02         mov al, toktyp_delimiter
0226+  175F 3D 41 18      mov [toktyp], al
0227+  1762 4E            mov a, si
0228+  1763 42 3F 18      mov [prog], a    ; update pointer
0229+  1766 0A CD 17      jmp get_token_return
0230+  1769             get_token_tilde:
0231+  1769 B9 7E         cmp al, '~'        ; check if '~'
0232+  176B C7 83 17      jne get_token_equal
0233+  176E F7            stosb          ; store '~' into token string
0234+  176F 19 00         mov al, 0
0235+  1771 F7            stosb          ; terminate token string
0236+  1772 19 08         mov al, tok_tilde
0237+  1774 3D 42 18      mov [tok], al      
0238+  1777 19 02         mov al, toktyp_delimiter
0239+  1779 3D 41 18      mov [toktyp], al
0240+  177C 4E            mov a, si
0241+  177D 42 3F 18      mov [prog], a    ; update pointer
0242+  1780 0A CD 17      jmp get_token_return
0243+  1783             get_token_equal:
0244+  1783 B9 3D         cmp al, '='        ; check if '='
0245+  1785 C7 9D 17      jne get_token_skip
0246+  1788 F7            stosb          ; store '=' into token string
0247+  1789 19 00         mov al, 0
0248+  178B F7            stosb          ; terminate token string
0249+  178C 19 09         mov al, tok_equal
0250+  178E 3D 42 18      mov [tok], al      
0251+  1791 19 02         mov al, toktyp_delimiter
0252+  1793 3D 41 18      mov [toktyp], al
0253+  1796 4E            mov a, si
0254+  1797 42 3F 18      mov [prog], a    ; update pointer
0255+  179A 0A CD 17      jmp get_token_return
0256+  179D             get_token_skip:
0257+  179D 4E            mov a, si
0258+  179E 42 3F 18      mov [prog], a    ; update pointer
0259+  17A1 0A CD 17      jmp get_token_return
0260+  17A4             get_token_end:        ; end of file token
0261+  17A4 19 14         mov al, tok_end
0262+  17A6 3D 42 18      mov [tok], al
0263+  17A9 19 06         mov al, toktyp_end
0264+  17AB 3D 41 18      mov [toktyp], al
0265+  17AE 0A CD 17      jmp get_token_return
0266+  17B1             is_alphanumeric:
0267+  17B1 F7            stosb
0268+  17B2 F6            lodsb
0269+  17B3 07 78 15      call _isalnum      ;check if is alphanumeric
0270+  17B6 C6 B1 17      jz is_alphanumeric
0271+  17B9 B9 2E         cmp al, $2e        ; check if is '.'
0272+  17BB C6 B1 17      je is_alphanumeric
0273+  17BE 19 00         mov al, 0
0274+  17C0 F7            stosb
0275+  17C1 19 00         mov al, toktyp_identifier
0276+  17C3 3D 41 18      mov [toktyp], al
0277+  17C6 D5 01 00      sub si, 1
0278+  17C9 4E            mov a, si
0279+  17CA 42 3F 18      mov [prog], a    ; update pointer
0280+  17CD             get_token_return:
0281+  17CD F0            pop di
0282+  17CE EF            pop si
0283+  17CF E7            pop d
0284+  17D0 E4            pop a
0285+  17D1 09            ret
0286+  17D2             get_tok_comment:
0287+  17D2 F6            lodsb
0288+  17D3 B9 0A         cmp al, $0a      ; new line
0289+  17D5 C7 D2 17      jne get_tok_comment
0290+  17D8 0A B6 16      jmp get_tok_skip_spaces
0291+  17DB             
0292+  17DB             
0293+  17DB             get_number:
0294+  17DB D7            push a
0295+  17DC DA            push d
0296+  17DD E2            push si
0297+  17DE E3            push di
0298+  17DF 19 00         mov al, 0
0299+  17E1 3D 43 18      mov [tokstr], al      ; nullify tokstr string
0300+  17E4 19 00         mov al, tok_null
0301+  17E6 3D 42 18      mov [tok], al        ; nullify token
0302+  17E9 14 3F 18      mov a, [prog]
0303+  17EC 4D            mov si, a
0304+  17ED FD 4F 43 18   mov di, tokstr
0305+  17F1             get_number_skip_spaces:
0306+  17F1 F6            lodsb
0307+  17F2 07 EE 15      call _isspace
0308+  17F5 C6 F1 17      je get_number_skip_spaces
0309+  17F8 B9 00         cmp al, 0      ; check for end of input (null)
0310+  17FA C7 0A 18      jne get_number_l0
0311+  17FD 19 14         mov al, tok_end
0312+  17FF 3D 42 18      mov [tok], al
0313+  1802 19 06         mov al, toktyp_end
0314+  1804 3D 41 18      mov [toktyp], al
0315+  1807 0A 21 18      jmp get_number_return
0316+  180A             get_number_l0:
0317+  180A F7            stosb
0318+  180B F6            lodsb
0319+  180C 07 82 15      call _isdigit      ;check if is numeric
0320+  180F C6 0A 18      jz get_number_l0
0321+  1812 19 00         mov al, 0
0322+  1814 F7            stosb
0323+  1815 19 05         mov al, toktyp_numeric
0324+  1817 3D 41 18      mov [toktyp], al
0325+  181A D5 01 00      sub si, 1
0326+  181D 4E            mov a, si
0327+  181E 42 3F 18      mov [prog], a    ; update pointer
0328+  1821             get_number_return:
0329+  1821 F0            pop di
0330+  1822 EF            pop si
0331+  1823 E7            pop d
0332+  1824 E4            pop a
0333+  1825 09            ret
0334+  1826             
0335+  1826             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  1826             ;; put back token
0337+  1826             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0338+  1826             _putback:
0339+  1826 D7            push a
0340+  1827 E2            push si
0341+  1828 FD 4D 43 18   mov si, tokstr  
0342+  182C             _putback_loop:
0343+  182C F6            lodsb
0344+  182D B9 00         cmp al, 0
0345+  182F C6 3C 18      je _putback_end
0346+  1832 14 3F 18      mov a, [prog]
0347+  1835 7D            dec a
0348+  1836 42 3F 18      mov [prog], a      ; update pointer
0349+  1839 0A 2C 18      jmp _putback_loop
0350+  183C             _putback_end:
0351+  183C EF            pop si
0352+  183D E4            pop a
0353+  183E 09            ret
0354+  183F             
0355+  183F             
0356+  183F             
0357+  183F             
0358+  183F 00 00       prog:      .dw 0          ; pointer to current position in buffer
0359+  1841             
0360+  1841 00          toktyp:    .db 0          ; token type symbol
0361+  1842 00          tok:       .db 0          ; current token symbol
0362+  1843 00 00 00 00 tokstr:    .fill 256, 0   ; token as a string
0362+  1847 00 00 00 00 
0362+  184B 00 00 00 00 
0362+  184F 00 00 00 00 
0362+  1853 00 00 00 00 
0362+  1857 00 00 00 00 
0362+  185B 00 00 00 00 
0362+  185F 00 00 00 00 
0362+  1863 00 00 00 00 
0362+  1867 00 00 00 00 
0362+  186B 00 00 00 00 
0362+  186F 00 00 00 00 
0362+  1873 00 00 00 00 
0362+  1877 00 00 00 00 
0362+  187B 00 00 00 00 
0362+  187F 00 00 00 00 
0362+  1883 00 00 00 00 
0362+  1887 00 00 00 00 
0362+  188B 00 00 00 00 
0362+  188F 00 00 00 00 
0362+  1893 00 00 00 00 
0362+  1897 00 00 00 00 
0362+  189B 00 00 00 00 
0362+  189F 00 00 00 00 
0362+  18A3 00 00 00 00 
0362+  18A7 00 00 00 00 
0362+  18AB 00 00 00 00 
0362+  18AF 00 00 00 00 
0362+  18B3 00 00 00 00 
0362+  18B7 00 00 00 00 
0362+  18BB 00 00 00 00 
0362+  18BF 00 00 00 00 
0362+  18C3 00 00 00 00 
0362+  18C7 00 00 00 00 
0362+  18CB 00 00 00 00 
0362+  18CF 00 00 00 00 
0362+  18D3 00 00 00 00 
0362+  18D7 00 00 00 00 
0362+  18DB 00 00 00 00 
0362+  18DF 00 00 00 00 
0362+  18E3 00 00 00 00 
0362+  18E7 00 00 00 00 
0362+  18EB 00 00 00 00 
0362+  18EF 00 00 00 00 
0362+  18F3 00 00 00 00 
0362+  18F7 00 00 00 00 
0362+  18FB 00 00 00 00 
0362+  18FF 00 00 00 00 
0362+  1903 00 00 00 00 
0362+  1907 00 00 00 00 
0362+  190B 00 00 00 00 
0362+  190F 00 00 00 00 
0362+  1913 00 00 00 00 
0362+  1917 00 00 00 00 
0362+  191B 00 00 00 00 
0362+  191F 00 00 00 00 
0362+  1923 00 00 00 00 
0362+  1927 00 00 00 00 
0362+  192B 00 00 00 00 
0362+  192F 00 00 00 00 
0362+  1933 00 00 00 00 
0362+  1937 00 00 00 00 
0362+  193B 00 00 00 00 
0362+  193F 00 00 00 00 
3076   1943             
3077   1943             ; kernel parameters
3078   1943             sys_debug_mode:
3079   1943 00            .db 0   ; debug modes: 0=normal mode, 1=debug mode
3080   1944             sys_echo_on:
3081   1944 01            .db 1
3082   1945             sys_uart0_lcr:
3083   1945 0F            .db %00001111 ; 8 data bits, 2 stop bits, enable parity, odd parity
3084   1946             sys_uart0_inten:
3085   1946 01            .db 1
3086   1947             sys_uart0_fifoen:
3087   1947 00            .db 0
3088   1948             sys_uart0_div0:
3089   1948 03            .db 3
3090   1949             sys_uart0_div1:
3091   1949 00            .db 0   ; default baud = 38400
3092   194A             ; baud  divisor
3093   194A             ; 50    2304
3094   194A             ; 110   1047
3095   194A             ; 300    384
3096   194A             ; 600    192
3097   194A             ; 1200    96
3098   194A             ; 9600    12
3099   194A             ; 19200    6
3100   194A             ; 38400    3
3101   194A             sys_uart1_lcr:
3102   194A 0F            .db %00001111 ; 8 data bits, 2 stop bits, enable parity, odd parity
3103   194B             sys_uart1_inten:
3104   194B 01            .db 1
3105   194C             sys_uart1_fifoen:
3106   194C 00            .db 0
3107   194D             sys_uart1_div0:
3108   194D 03            .db 3
3109   194E             sys_uart1_div1:
3110   194E 00            .db 0   ; default baud = 38400
3111   194F             
3112   194F             nbr_active_procs:
3113   194F 00            .db 0
3114   1950             active_proc_index:
3115   1950 01            .db 1
3116   1951             
3117   1951             index:
3118   1951 00 00         .dw 0
3119   1953             buffer_addr:
3120   1953 00 00         .dw 0
3121   1955             
3122   1955             fifo_in:
3123   1955 5E 21         .dw fifo
3124   1957             fifo_out:
3125   1957 5E 21         .dw fifo
3126   1959             
3127   1959             ; file system variables
3128   1959             current_dir_id:
3129   1959 00 00         .dw 0     ; keep dirid of current directory
3130   195B             s_init_path:
3131   195B 2F 73 62 69   .db "/sbin/init", 0
3131   195F 6E 2F 69 6E 
3131   1963 69 74 00 
3132   1966             
3133   1966             s_uname:
3134   1966 73 6F 6C 61   .db "solarium v.1.0", 0
3134   196A 72 69 75 6D 
3134   196E 20 76 2E 31 
3134   1972 2E 30 00 
3135   1975             s_dataentry:
3136   1975 3E 20 00      .db "> ", 0
3137   1978             s_parent_dir:
3138   1978 2E 2E 00      .db "..", 0
3139   197B             s_current_dir:
3140   197B 2E 00         .db ".", 0
3141   197D             s_fslash:
3142   197D 2F 00         .db "/", 0
3143   197F             file_attrib:
3144   197F 2D 72 77 20   .db "-rw x"      ; chars at powers of 2
3144   1983 78 
3145   1984             file_type:
3146   1984 2D 64 63      .db "-dc"
3147   1987             s_ps_header:
3148   1987 70 69 64 20   .db "pid command\n", 0
3148   198B 63 6F 6D 6D 
3148   198F 61 6E 64 0A 
3148   1993 00 
3149   1994             s_ls_total:
3150   1994 74 6F 74 61   .db "total: ", 0
3150   1998 6C 3A 20 00 
3151   199C             ls_count:
3152   199C 00 00         .dw 0
3153   199E             
3154   199E             s_int_en:
3155   199E 69 72 71 73   .db "irqs enabled\n", 0
3155   19A2 20 65 6E 61 
3155   19A6 62 6C 65 64 
3155   19AA 0A 00 
3156   19AC             s_kernel_welcome:
3157   19AC 2A 2A 2A 2A   .db "************************************************\n"
3157   19B0 2A 2A 2A 2A 
3157   19B4 2A 2A 2A 2A 
3157   19B8 2A 2A 2A 2A 
3157   19BC 2A 2A 2A 2A 
3157   19C0 2A 2A 2A 2A 
3157   19C4 2A 2A 2A 2A 
3157   19C8 2A 2A 2A 2A 
3157   19CC 2A 2A 2A 2A 
3157   19D0 2A 2A 2A 2A 
3157   19D4 2A 2A 2A 2A 
3157   19D8 2A 2A 2A 2A 
3157   19DC 0A 
3158   19DD 2A 2A 2A 20   .db "*** Welcome to Solarium OS - Kernel ver. 1.0 ***\n"
3158   19E1 57 65 6C 63 
3158   19E5 6F 6D 65 20 
3158   19E9 74 6F 20 53 
3158   19ED 6F 6C 61 72 
3158   19F1 69 75 6D 20 
3158   19F5 4F 53 20 2D 
3158   19F9 20 4B 65 72 
3158   19FD 6E 65 6C 20 
3158   1A01 76 65 72 2E 
3158   1A05 20 31 2E 30 
3158   1A09 20 2A 2A 2A 
3158   1A0D 0A 
3159   1A0E 2A 2A 2A 20   .db "*** type help for more information           ***\n"
3159   1A12 74 79 70 65 
3159   1A16 20 68 65 6C 
3159   1A1A 70 20 66 6F 
3159   1A1E 72 20 6D 6F 
3159   1A22 72 65 20 69 
3159   1A26 6E 66 6F 72 
3159   1A2A 6D 61 74 69 
3159   1A2E 6F 6E 20 20 
3159   1A32 20 20 20 20 
3159   1A36 20 20 20 20 
3159   1A3A 20 2A 2A 2A 
3159   1A3E 0A 
3160   1A3F 2A 2A 2A 2A   .db "************************************************\n"
3160   1A43 2A 2A 2A 2A 
3160   1A47 2A 2A 2A 2A 
3160   1A4B 2A 2A 2A 2A 
3160   1A4F 2A 2A 2A 2A 
3160   1A53 2A 2A 2A 2A 
3160   1A57 2A 2A 2A 2A 
3160   1A5B 2A 2A 2A 2A 
3160   1A5F 2A 2A 2A 2A 
3160   1A63 2A 2A 2A 2A 
3160   1A67 2A 2A 2A 2A 
3160   1A6B 2A 2A 2A 2A 
3160   1A6F 0A 
3161   1A70             s_prompt_init:
3162   1A70 73 74 61 72   .db "starting init\n", 0
3162   1A74 74 69 6E 67 
3162   1A78 20 69 6E 69 
3162   1A7C 74 0A 00 
3163   1A7F             s_priviledge:
3164   1A7F 0A 65 78 63   .db "\nexception: privilege\n", 0
3164   1A83 65 70 74 69 
3164   1A87 6F 6E 3A 20 
3164   1A8B 70 72 69 76 
3164   1A8F 69 6C 65 67 
3164   1A93 65 0A 00 
3165   1A96             s_divzero:
3166   1A96 0A 65 78 63   .db "\nexception: zero division\n", 0
3166   1A9A 65 70 74 69 
3166   1A9E 6F 6E 3A 20 
3166   1AA2 7A 65 72 6F 
3166   1AA6 20 64 69 76 
3166   1AAA 69 73 69 6F 
3166   1AAE 6E 0A 00 
3167   1AB1             
3168   1AB1             s_set_year:
3169   1AB1 79 65 61 72   .db "year: ", 0
3169   1AB5 3A 20 00 
3170   1AB8             s_set_month:
3171   1AB8 6D 6F 6E 74   .db "month: ", 0
3171   1ABC 68 3A 20 00 
3172   1AC0             s_set_day:
3173   1AC0 64 61 79 3A   .db "day: ", 0
3173   1AC4 20 00 
3174   1AC6             s_set_week:
3175   1AC6 77 65 65 6B   .db "weekday: ", 0
3175   1ACA 64 61 79 3A 
3175   1ACE 20 00 
3176   1AD0             s_set_hours:
3177   1AD0 68 6F 75 72   .db "hours: ", 0
3177   1AD4 73 3A 20 00 
3178   1AD8             s_set_minutes:
3179   1AD8 6D 69 6E 75   .db "minutes: ", 0
3179   1ADC 74 65 73 3A 
3179   1AE0 20 00 
3180   1AE2             s_set_seconds:
3181   1AE2 73 65 63 6F   .db "seconds: ", 0
3181   1AE6 6E 64 73 3A 
3181   1AEA 20 00 
3182   1AEC             s_months:      
3183   1AEC 20 20 20 00   .db "   ", 0
3184   1AF0 6A 61 6E 00   .db "jan", 0
3185   1AF4 66 65 62 00   .db "feb", 0
3186   1AF8 6D 61 72 00   .db "mar", 0
3187   1AFC 61 70 72 00   .db "apr", 0
3188   1B00 6D 61 79 00   .db "may", 0
3189   1B04 6A 75 6E 00   .db "jun", 0
3190   1B08 6A 75 6C 00   .db "jul", 0
3191   1B0C 61 75 67 00   .db "aug", 0
3192   1B10 73 65 70 00   .db "sep", 0
3193   1B14 6F 63 74 00   .db "oct", 0
3194   1B18 6E 6F 76 00   .db "nov", 0
3195   1B1C 64 65 63 00   .db "dec", 0
3196   1B20             
3197   1B20             s_week:        
3198   1B20 73 75 6E 00   .db "sun", 0 
3199   1B24 6D 6F 6E 00   .db "mon", 0 
3200   1B28 74 75 65 00   .db "tue", 0 
3201   1B2C 77 65 64 00   .db "wed", 0 
3202   1B30 74 68 75 00   .db "thu", 0 
3203   1B34 66 72 69 00   .db "fri", 0 
3204   1B38 73 61 74 00   .db "sat", 0
3205   1B3C             
3206   1B3C 0A 49 52 51 s_fdc_irq: .db "\nIRQ0 Executed.\n", 0
3206   1B40 30 20 45 78 
3206   1B44 65 63 75 74 
3206   1B48 65 64 2E 0A 
3206   1B4C 00 
3207   1B4D             s_fdc_config:
3208   1B4D 73 65 6C 65   .db "selecting diskette drive 0, side 0, single density, head loaded\n", 0
3208   1B51 63 74 69 6E 
3208   1B55 67 20 64 69 
3208   1B59 73 6B 65 74 
3208   1B5D 74 65 20 64 
3208   1B61 72 69 76 65 
3208   1B65 20 30 2C 20 
3208   1B69 73 69 64 65 
3208   1B6D 20 30 2C 20 
3208   1B71 73 69 6E 67 
3208   1B75 6C 65 20 64 
3208   1B79 65 6E 73 69 
3208   1B7D 74 79 2C 20 
3208   1B81 68 65 61 64 
3208   1B85 20 6C 6F 61 
3208   1B89 64 65 64 0A 
3208   1B8D 00 
3209   1B8E             
3210   1B8E             proc_state_table:   
3211   1B8E 00 00 00 00   .fill 16 * 20, 0  ; for 15 processes max
3211   1B92 00 00 00 00 
3211   1B96 00 00 00 00 
3211   1B9A 00 00 00 00 
3211   1B9E 00 00 00 00 
3211   1BA2 00 00 00 00 
3211   1BA6 00 00 00 00 
3211   1BAA 00 00 00 00 
3211   1BAE 00 00 00 00 
3211   1BB2 00 00 00 00 
3211   1BB6 00 00 00 00 
3211   1BBA 00 00 00 00 
3211   1BBE 00 00 00 00 
3211   1BC2 00 00 00 00 
3211   1BC6 00 00 00 00 
3211   1BCA 00 00 00 00 
3211   1BCE 00 00 00 00 
3211   1BD2 00 00 00 00 
3211   1BD6 00 00 00 00 
3211   1BDA 00 00 00 00 
3211   1BDE 00 00 00 00 
3211   1BE2 00 00 00 00 
3211   1BE6 00 00 00 00 
3211   1BEA 00 00 00 00 
3211   1BEE 00 00 00 00 
3211   1BF2 00 00 00 00 
3211   1BF6 00 00 00 00 
3211   1BFA 00 00 00 00 
3211   1BFE 00 00 00 00 
3211   1C02 00 00 00 00 
3211   1C06 00 00 00 00 
3211   1C0A 00 00 00 00 
3211   1C0E 00 00 00 00 
3211   1C12 00 00 00 00 
3211   1C16 00 00 00 00 
3211   1C1A 00 00 00 00 
3211   1C1E 00 00 00 00 
3211   1C22 00 00 00 00 
3211   1C26 00 00 00 00 
3211   1C2A 00 00 00 00 
3211   1C2E 00 00 00 00 
3211   1C32 00 00 00 00 
3211   1C36 00 00 00 00 
3211   1C3A 00 00 00 00 
3211   1C3E 00 00 00 00 
3211   1C42 00 00 00 00 
3211   1C46 00 00 00 00 
3211   1C4A 00 00 00 00 
3211   1C4E 00 00 00 00 
3211   1C52 00 00 00 00 
3211   1C56 00 00 00 00 
3211   1C5A 00 00 00 00 
3211   1C5E 00 00 00 00 
3211   1C62 00 00 00 00 
3211   1C66 00 00 00 00 
3211   1C6A 00 00 00 00 
3211   1C6E 00 00 00 00 
3211   1C72 00 00 00 00 
3211   1C76 00 00 00 00 
3211   1C7A 00 00 00 00 
3211   1C7E 00 00 00 00 
3211   1C82 00 00 00 00 
3211   1C86 00 00 00 00 
3211   1C8A 00 00 00 00 
3211   1C8E 00 00 00 00 
3211   1C92 00 00 00 00 
3211   1C96 00 00 00 00 
3211   1C9A 00 00 00 00 
3211   1C9E 00 00 00 00 
3211   1CA2 00 00 00 00 
3211   1CA6 00 00 00 00 
3211   1CAA 00 00 00 00 
3211   1CAE 00 00 00 00 
3211   1CB2 00 00 00 00 
3211   1CB6 00 00 00 00 
3211   1CBA 00 00 00 00 
3211   1CBE 00 00 00 00 
3211   1CC2 00 00 00 00 
3211   1CC6 00 00 00 00 
3211   1CCA 00 00 00 00 
3212   1CCE             proc_availab_table: 
3213   1CCE 00 00 00 00   .fill 16, 0       ; space for 15 processes. 0 = process empty, 1 = process taken
3213   1CD2 00 00 00 00 
3213   1CD6 00 00 00 00 
3213   1CDA 00 00 00 00 
3214   1CDE             proc_names:
3215   1CDE 00 00 00 00   .fill 16 * 32, 0  ; process names
3215   1CE2 00 00 00 00 
3215   1CE6 00 00 00 00 
3215   1CEA 00 00 00 00 
3215   1CEE 00 00 00 00 
3215   1CF2 00 00 00 00 
3215   1CF6 00 00 00 00 
3215   1CFA 00 00 00 00 
3215   1CFE 00 00 00 00 
3215   1D02 00 00 00 00 
3215   1D06 00 00 00 00 
3215   1D0A 00 00 00 00 
3215   1D0E 00 00 00 00 
3215   1D12 00 00 00 00 
3215   1D16 00 00 00 00 
3215   1D1A 00 00 00 00 
3215   1D1E 00 00 00 00 
3215   1D22 00 00 00 00 
3215   1D26 00 00 00 00 
3215   1D2A 00 00 00 00 
3215   1D2E 00 00 00 00 
3215   1D32 00 00 00 00 
3215   1D36 00 00 00 00 
3215   1D3A 00 00 00 00 
3215   1D3E 00 00 00 00 
3215   1D42 00 00 00 00 
3215   1D46 00 00 00 00 
3215   1D4A 00 00 00 00 
3215   1D4E 00 00 00 00 
3215   1D52 00 00 00 00 
3215   1D56 00 00 00 00 
3215   1D5A 00 00 00 00 
3215   1D5E 00 00 00 00 
3215   1D62 00 00 00 00 
3215   1D66 00 00 00 00 
3215   1D6A 00 00 00 00 
3215   1D6E 00 00 00 00 
3215   1D72 00 00 00 00 
3215   1D76 00 00 00 00 
3215   1D7A 00 00 00 00 
3215   1D7E 00 00 00 00 
3215   1D82 00 00 00 00 
3215   1D86 00 00 00 00 
3215   1D8A 00 00 00 00 
3215   1D8E 00 00 00 00 
3215   1D92 00 00 00 00 
3215   1D96 00 00 00 00 
3215   1D9A 00 00 00 00 
3215   1D9E 00 00 00 00 
3215   1DA2 00 00 00 00 
3215   1DA6 00 00 00 00 
3215   1DAA 00 00 00 00 
3215   1DAE 00 00 00 00 
3215   1DB2 00 00 00 00 
3215   1DB6 00 00 00 00 
3215   1DBA 00 00 00 00 
3215   1DBE 00 00 00 00 
3215   1DC2 00 00 00 00 
3215   1DC6 00 00 00 00 
3215   1DCA 00 00 00 00 
3215   1DCE 00 00 00 00 
3215   1DD2 00 00 00 00 
3215   1DD6 00 00 00 00 
3215   1DDA 00 00 00 00 
3215   1DDE 00 00 00 00 
3215   1DE2 00 00 00 00 
3215   1DE6 00 00 00 00 
3215   1DEA 00 00 00 00 
3215   1DEE 00 00 00 00 
3215   1DF2 00 00 00 00 
3215   1DF6 00 00 00 00 
3215   1DFA 00 00 00 00 
3215   1DFE 00 00 00 00 
3215   1E02 00 00 00 00 
3215   1E06 00 00 00 00 
3215   1E0A 00 00 00 00 
3215   1E0E 00 00 00 00 
3215   1E12 00 00 00 00 
3215   1E16 00 00 00 00 
3215   1E1A 00 00 00 00 
3215   1E1E 00 00 00 00 
3215   1E22 00 00 00 00 
3215   1E26 00 00 00 00 
3215   1E2A 00 00 00 00 
3215   1E2E 00 00 00 00 
3215   1E32 00 00 00 00 
3215   1E36 00 00 00 00 
3215   1E3A 00 00 00 00 
3215   1E3E 00 00 00 00 
3215   1E42 00 00 00 00 
3215   1E46 00 00 00 00 
3215   1E4A 00 00 00 00 
3215   1E4E 00 00 00 00 
3215   1E52 00 00 00 00 
3215   1E56 00 00 00 00 
3215   1E5A 00 00 00 00 
3215   1E5E 00 00 00 00 
3215   1E62 00 00 00 00 
3215   1E66 00 00 00 00 
3215   1E6A 00 00 00 00 
3215   1E6E 00 00 00 00 
3215   1E72 00 00 00 00 
3215   1E76 00 00 00 00 
3215   1E7A 00 00 00 00 
3215   1E7E 00 00 00 00 
3215   1E82 00 00 00 00 
3215   1E86 00 00 00 00 
3215   1E8A 00 00 00 00 
3215   1E8E 00 00 00 00 
3215   1E92 00 00 00 00 
3215   1E96 00 00 00 00 
3215   1E9A 00 00 00 00 
3215   1E9E 00 00 00 00 
3215   1EA2 00 00 00 00 
3215   1EA6 00 00 00 00 
3215   1EAA 00 00 00 00 
3215   1EAE 00 00 00 00 
3215   1EB2 00 00 00 00 
3215   1EB6 00 00 00 00 
3215   1EBA 00 00 00 00 
3215   1EBE 00 00 00 00 
3215   1EC2 00 00 00 00 
3215   1EC6 00 00 00 00 
3215   1ECA 00 00 00 00 
3215   1ECE 00 00 00 00 
3215   1ED2 00 00 00 00 
3215   1ED6 00 00 00 00 
3215   1EDA 00 00 00 00 
3216   1EDE             filename:
3217   1EDE 00 00 00 00   .fill 128, 0      ; holds a path for file search
3217   1EE2 00 00 00 00 
3217   1EE6 00 00 00 00 
3217   1EEA 00 00 00 00 
3217   1EEE 00 00 00 00 
3217   1EF2 00 00 00 00 
3217   1EF6 00 00 00 00 
3217   1EFA 00 00 00 00 
3217   1EFE 00 00 00 00 
3217   1F02 00 00 00 00 
3217   1F06 00 00 00 00 
3217   1F0A 00 00 00 00 
3217   1F0E 00 00 00 00 
3217   1F12 00 00 00 00 
3217   1F16 00 00 00 00 
3217   1F1A 00 00 00 00 
3217   1F1E 00 00 00 00 
3217   1F22 00 00 00 00 
3217   1F26 00 00 00 00 
3217   1F2A 00 00 00 00 
3217   1F2E 00 00 00 00 
3217   1F32 00 00 00 00 
3217   1F36 00 00 00 00 
3217   1F3A 00 00 00 00 
3217   1F3E 00 00 00 00 
3217   1F42 00 00 00 00 
3217   1F46 00 00 00 00 
3217   1F4A 00 00 00 00 
3217   1F4E 00 00 00 00 
3217   1F52 00 00 00 00 
3217   1F56 00 00 00 00 
3217   1F5A 00 00 00 00 
3218   1F5E             user_data:
3219   1F5E 00 00 00 00   .fill 512, 0      ;  user space data
3219   1F62 00 00 00 00 
3219   1F66 00 00 00 00 
3219   1F6A 00 00 00 00 
3219   1F6E 00 00 00 00 
3219   1F72 00 00 00 00 
3219   1F76 00 00 00 00 
3219   1F7A 00 00 00 00 
3219   1F7E 00 00 00 00 
3219   1F82 00 00 00 00 
3219   1F86 00 00 00 00 
3219   1F8A 00 00 00 00 
3219   1F8E 00 00 00 00 
3219   1F92 00 00 00 00 
3219   1F96 00 00 00 00 
3219   1F9A 00 00 00 00 
3219   1F9E 00 00 00 00 
3219   1FA2 00 00 00 00 
3219   1FA6 00 00 00 00 
3219   1FAA 00 00 00 00 
3219   1FAE 00 00 00 00 
3219   1FB2 00 00 00 00 
3219   1FB6 00 00 00 00 
3219   1FBA 00 00 00 00 
3219   1FBE 00 00 00 00 
3219   1FC2 00 00 00 00 
3219   1FC6 00 00 00 00 
3219   1FCA 00 00 00 00 
3219   1FCE 00 00 00 00 
3219   1FD2 00 00 00 00 
3219   1FD6 00 00 00 00 
3219   1FDA 00 00 00 00 
3219   1FDE 00 00 00 00 
3219   1FE2 00 00 00 00 
3219   1FE6 00 00 00 00 
3219   1FEA 00 00 00 00 
3219   1FEE 00 00 00 00 
3219   1FF2 00 00 00 00 
3219   1FF6 00 00 00 00 
3219   1FFA 00 00 00 00 
3219   1FFE 00 00 00 00 
3219   2002 00 00 00 00 
3219   2006 00 00 00 00 
3219   200A 00 00 00 00 
3219   200E 00 00 00 00 
3219   2012 00 00 00 00 
3219   2016 00 00 00 00 
3219   201A 00 00 00 00 
3219   201E 00 00 00 00 
3219   2022 00 00 00 00 
3219   2026 00 00 00 00 
3219   202A 00 00 00 00 
3219   202E 00 00 00 00 
3219   2032 00 00 00 00 
3219   2036 00 00 00 00 
3219   203A 00 00 00 00 
3219   203E 00 00 00 00 
3219   2042 00 00 00 00 
3219   2046 00 00 00 00 
3219   204A 00 00 00 00 
3219   204E 00 00 00 00 
3219   2052 00 00 00 00 
3219   2056 00 00 00 00 
3219   205A 00 00 00 00 
3219   205E 00 00 00 00 
3219   2062 00 00 00 00 
3219   2066 00 00 00 00 
3219   206A 00 00 00 00 
3219   206E 00 00 00 00 
3219   2072 00 00 00 00 
3219   2076 00 00 00 00 
3219   207A 00 00 00 00 
3219   207E 00 00 00 00 
3219   2082 00 00 00 00 
3219   2086 00 00 00 00 
3219   208A 00 00 00 00 
3219   208E 00 00 00 00 
3219   2092 00 00 00 00 
3219   2096 00 00 00 00 
3219   209A 00 00 00 00 
3219   209E 00 00 00 00 
3219   20A2 00 00 00 00 
3219   20A6 00 00 00 00 
3219   20AA 00 00 00 00 
3219   20AE 00 00 00 00 
3219   20B2 00 00 00 00 
3219   20B6 00 00 00 00 
3219   20BA 00 00 00 00 
3219   20BE 00 00 00 00 
3219   20C2 00 00 00 00 
3219   20C6 00 00 00 00 
3219   20CA 00 00 00 00 
3219   20CE 00 00 00 00 
3219   20D2 00 00 00 00 
3219   20D6 00 00 00 00 
3219   20DA 00 00 00 00 
3219   20DE 00 00 00 00 
3219   20E2 00 00 00 00 
3219   20E6 00 00 00 00 
3219   20EA 00 00 00 00 
3219   20EE 00 00 00 00 
3219   20F2 00 00 00 00 
3219   20F6 00 00 00 00 
3219   20FA 00 00 00 00 
3219   20FE 00 00 00 00 
3219   2102 00 00 00 00 
3219   2106 00 00 00 00 
3219   210A 00 00 00 00 
3219   210E 00 00 00 00 
3219   2112 00 00 00 00 
3219   2116 00 00 00 00 
3219   211A 00 00 00 00 
3219   211E 00 00 00 00 
3219   2122 00 00 00 00 
3219   2126 00 00 00 00 
3219   212A 00 00 00 00 
3219   212E 00 00 00 00 
3219   2132 00 00 00 00 
3219   2136 00 00 00 00 
3219   213A 00 00 00 00 
3219   213E 00 00 00 00 
3219   2142 00 00 00 00 
3219   2146 00 00 00 00 
3219   214A 00 00 00 00 
3219   214E 00 00 00 00 
3219   2152 00 00 00 00 
3219   2156 00 00 00 00 
3219   215A 00 00 00 00 
3220   215E             fifo:
3221   215E FF FF FF FF   .fill _fifo_size
3221   2162 FF FF FF FF 
3221   2166 FF FF FF FF 
3221   216A FF FF FF FF 
3221   216E FF FF FF FF 
3221   2172 FF FF FF FF 
3221   2176 FF FF FF FF 
3221   217A FF FF FF FF 
3221   217E FF FF FF FF 
3221   2182 FF FF FF FF 
3221   2186 FF FF FF FF 
3221   218A FF FF FF FF 
3221   218E FF FF FF FF 
3221   2192 FF FF FF FF 
3221   2196 FF FF FF FF 
3221   219A FF FF FF FF 
3221   219E FF FF FF FF 
3221   21A2 FF FF FF FF 
3221   21A6 FF FF FF FF 
3221   21AA FF FF FF FF 
3221   21AE FF FF FF FF 
3221   21B2 FF FF FF FF 
3221   21B6 FF FF FF FF 
3221   21BA FF FF FF FF 
3221   21BE FF FF FF FF 
3221   21C2 FF FF FF FF 
3221   21C6 FF FF FF FF 
3221   21CA FF FF FF FF 
3221   21CE FF FF FF FF 
3221   21D2 FF FF FF FF 
3221   21D6 FF FF FF FF 
3221   21DA FF FF FF FF 
3221   21DE FF FF FF FF 
3221   21E2 FF FF FF FF 
3221   21E6 FF FF FF FF 
3221   21EA FF FF FF FF 
3221   21EE FF FF FF FF 
3221   21F2 FF FF FF FF 
3221   21F6 FF FF FF FF 
3221   21FA FF FF FF FF 
3221   21FE FF FF FF FF 
3221   2202 FF FF FF FF 
3221   2206 FF FF FF FF 
3221   220A FF FF FF FF 
3221   220E FF FF FF FF 
3221   2212 FF FF FF FF 
3221   2216 FF FF FF FF 
3221   221A FF FF FF FF 
3221   221E FF FF FF FF 
3221   2222 FF FF FF FF 
3221   2226 FF FF FF FF 
3221   222A FF FF FF FF 
3221   222E FF FF FF FF 
3221   2232 FF FF FF FF 
3221   2236 FF FF FF FF 
3221   223A FF FF FF FF 
3221   223E FF FF FF FF 
3221   2242 FF FF FF FF 
3221   2246 FF FF FF FF 
3221   224A FF FF FF FF 
3221   224E FF FF FF FF 
3221   2252 FF FF FF FF 
3221   2256 FF FF FF FF 
3221   225A FF FF FF FF 
3221   225E FF FF FF FF 
3221   2262 FF FF FF FF 
3221   2266 FF FF FF FF 
3221   226A FF FF FF FF 
3221   226E FF FF FF FF 
3221   2272 FF FF FF FF 
3221   2276 FF FF FF FF 
3221   227A FF FF FF FF 
3221   227E FF FF FF FF 
3221   2282 FF FF FF FF 
3221   2286 FF FF FF FF 
3221   228A FF FF FF FF 
3221   228E FF FF FF FF 
3221   2292 FF FF FF FF 
3221   2296 FF FF FF FF 
3221   229A FF FF FF FF 
3221   229E FF FF FF FF 
3221   22A2 FF FF FF FF 
3221   22A6 FF FF FF FF 
3221   22AA FF FF FF FF 
3221   22AE FF FF FF FF 
3221   22B2 FF FF FF FF 
3221   22B6 FF FF FF FF 
3221   22BA FF FF FF FF 
3221   22BE FF FF FF FF 
3221   22C2 FF FF FF FF 
3221   22C6 FF FF FF FF 
3221   22CA FF FF FF FF 
3221   22CE FF FF FF FF 
3221   22D2 FF FF FF FF 
3221   22D6 FF FF FF FF 
3221   22DA FF FF FF FF 
3221   22DE FF FF FF FF 
3221   22E2 FF FF FF FF 
3221   22E6 FF FF FF FF 
3221   22EA FF FF FF FF 
3221   22EE FF FF FF FF 
3221   22F2 FF FF FF FF 
3221   22F6 FF FF FF FF 
3221   22FA FF FF FF FF 
3221   22FE FF FF FF FF 
3221   2302 FF FF FF FF 
3221   2306 FF FF FF FF 
3221   230A FF FF FF FF 
3221   230E FF FF FF FF 
3221   2312 FF FF FF FF 
3221   2316 FF FF FF FF 
3221   231A FF FF FF FF 
3221   231E FF FF FF FF 
3221   2322 FF FF FF FF 
3221   2326 FF FF FF FF 
3221   232A FF FF FF FF 
3221   232E FF FF FF FF 
3221   2332 FF FF FF FF 
3221   2336 FF FF FF FF 
3221   233A FF FF FF FF 
3221   233E FF FF FF FF 
3221   2342 FF FF FF FF 
3221   2346 FF FF FF FF 
3221   234A FF FF FF FF 
3221   234E FF FF FF FF 
3221   2352 FF FF FF FF 
3221   2356 FF FF FF FF 
3221   235A FF FF FF FF 
3221   235E FF FF FF FF 
3221   2362 FF FF FF FF 
3221   2366 FF FF FF FF 
3221   236A FF FF FF FF 
3221   236E FF FF FF FF 
3221   2372 FF FF FF FF 
3221   2376 FF FF FF FF 
3221   237A FF FF FF FF 
3221   237E FF FF FF FF 
3221   2382 FF FF FF FF 
3221   2386 FF FF FF FF 
3221   238A FF FF FF FF 
3221   238E FF FF FF FF 
3221   2392 FF FF FF FF 
3221   2396 FF FF FF FF 
3221   239A FF FF FF FF 
3221   239E FF FF FF FF 
3221   23A2 FF FF FF FF 
3221   23A6 FF FF FF FF 
3221   23AA FF FF FF FF 
3221   23AE FF FF FF FF 
3221   23B2 FF FF FF FF 
3221   23B6 FF FF FF FF 
3221   23BA FF FF FF FF 
3221   23BE FF FF FF FF 
3221   23C2 FF FF FF FF 
3221   23C6 FF FF FF FF 
3221   23CA FF FF FF FF 
3221   23CE FF FF FF FF 
3221   23D2 FF FF FF FF 
3221   23D6 FF FF FF FF 
3221   23DA FF FF FF FF 
3221   23DE FF FF FF FF 
3221   23E2 FF FF FF FF 
3221   23E6 FF FF FF FF 
3221   23EA FF FF FF FF 
3221   23EE FF FF FF FF 
3221   23F2 FF FF FF FF 
3221   23F6 FF FF FF FF 
3221   23FA FF FF FF FF 
3221   23FE FF FF FF FF 
3221   2402 FF FF FF FF 
3221   2406 FF FF FF FF 
3221   240A FF FF FF FF 
3221   240E FF FF FF FF 
3221   2412 FF FF FF FF 
3221   2416 FF FF FF FF 
3221   241A FF FF FF FF 
3221   241E FF FF FF FF 
3221   2422 FF FF FF FF 
3221   2426 FF FF FF FF 
3221   242A FF FF FF FF 
3221   242E FF FF FF FF 
3221   2432 FF FF FF FF 
3221   2436 FF FF FF FF 
3221   243A FF FF FF FF 
3221   243E FF FF FF FF 
3221   2442 FF FF FF FF 
3221   2446 FF FF FF FF 
3221   244A FF FF FF FF 
3221   244E FF FF FF FF 
3221   2452 FF FF FF FF 
3221   2456 FF FF FF FF 
3221   245A FF FF FF FF 
3221   245E FF FF FF FF 
3221   2462 FF FF FF FF 
3221   2466 FF FF FF FF 
3221   246A FF FF FF FF 
3221   246E FF FF FF FF 
3221   2472 FF FF FF FF 
3221   2476 FF FF FF FF 
3221   247A FF FF FF FF 
3221   247E FF FF FF FF 
3221   2482 FF FF FF FF 
3221   2486 FF FF FF FF 
3221   248A FF FF FF FF 
3221   248E FF FF FF FF 
3221   2492 FF FF FF FF 
3221   2496 FF FF FF FF 
3221   249A FF FF FF FF 
3221   249E FF FF FF FF 
3221   24A2 FF FF FF FF 
3221   24A6 FF FF FF FF 
3221   24AA FF FF FF FF 
3221   24AE FF FF FF FF 
3221   24B2 FF FF FF FF 
3221   24B6 FF FF FF FF 
3221   24BA FF FF FF FF 
3221   24BE FF FF FF FF 
3221   24C2 FF FF FF FF 
3221   24C6 FF FF FF FF 
3221   24CA FF FF FF FF 
3221   24CE FF FF FF FF 
3221   24D2 FF FF FF FF 
3221   24D6 FF FF FF FF 
3221   24DA FF FF FF FF 
3221   24DE FF FF FF FF 
3221   24E2 FF FF FF FF 
3221   24E6 FF FF FF FF 
3221   24EA FF FF FF FF 
3221   24EE FF FF FF FF 
3221   24F2 FF FF FF FF 
3221   24F6 FF FF FF FF 
3221   24FA FF FF FF FF 
3221   24FE FF FF FF FF 
3221   2502 FF FF FF FF 
3221   2506 FF FF FF FF 
3221   250A FF FF FF FF 
3221   250E FF FF FF FF 
3221   2512 FF FF FF FF 
3221   2516 FF FF FF FF 
3221   251A FF FF FF FF 
3221   251E FF FF FF FF 
3221   2522 FF FF FF FF 
3221   2526 FF FF FF FF 
3221   252A FF FF FF FF 
3221   252E FF FF FF FF 
3221   2532 FF FF FF FF 
3221   2536 FF FF FF FF 
3221   253A FF FF FF FF 
3221   253E FF FF FF FF 
3221   2542 FF FF FF FF 
3221   2546 FF FF FF FF 
3221   254A FF FF FF FF 
3221   254E FF FF FF FF 
3221   2552 FF FF FF FF 
3221   2556 FF FF FF FF 
3221   255A FF FF FF FF 
3221   255E FF FF FF FF 
3221   2562 FF FF FF FF 
3221   2566 FF FF FF FF 
3221   256A FF FF FF FF 
3221   256E FF FF FF FF 
3221   2572 FF FF FF FF 
3221   2576 FF FF FF FF 
3221   257A FF FF FF FF 
3221   257E FF FF FF FF 
3221   2582 FF FF FF FF 
3221   2586 FF FF FF FF 
3221   258A FF FF FF FF 
3221   258E FF FF FF FF 
3221   2592 FF FF FF FF 
3221   2596 FF FF FF FF 
3221   259A FF FF FF FF 
3221   259E FF FF FF FF 
3221   25A2 FF FF FF FF 
3221   25A6 FF FF FF FF 
3221   25AA FF FF FF FF 
3221   25AE FF FF FF FF 
3221   25B2 FF FF FF FF 
3221   25B6 FF FF FF FF 
3221   25BA FF FF FF FF 
3221   25BE FF FF FF FF 
3221   25C2 FF FF FF FF 
3221   25C6 FF FF FF FF 
3221   25CA FF FF FF FF 
3221   25CE FF FF FF FF 
3221   25D2 FF FF FF FF 
3221   25D6 FF FF FF FF 
3221   25DA FF FF FF FF 
3221   25DE FF FF FF FF 
3221   25E2 FF FF FF FF 
3221   25E6 FF FF FF FF 
3221   25EA FF FF FF FF 
3221   25EE FF FF FF FF 
3221   25F2 FF FF FF FF 
3221   25F6 FF FF FF FF 
3221   25FA FF FF FF FF 
3221   25FE FF FF FF FF 
3221   2602 FF FF FF FF 
3221   2606 FF FF FF FF 
3221   260A FF FF FF FF 
3221   260E FF FF FF FF 
3221   2612 FF FF FF FF 
3221   2616 FF FF FF FF 
3221   261A FF FF FF FF 
3221   261E FF FF FF FF 
3221   2622 FF FF FF FF 
3221   2626 FF FF FF FF 
3221   262A FF FF FF FF 
3221   262E FF FF FF FF 
3221   2632 FF FF FF FF 
3221   2636 FF FF FF FF 
3221   263A FF FF FF FF 
3221   263E FF FF FF FF 
3221   2642 FF FF FF FF 
3221   2646 FF FF FF FF 
3221   264A FF FF FF FF 
3221   264E FF FF FF FF 
3221   2652 FF FF FF FF 
3221   2656 FF FF FF FF 
3221   265A FF FF FF FF 
3221   265E FF FF FF FF 
3221   2662 FF FF FF FF 
3221   2666 FF FF FF FF 
3221   266A FF FF FF FF 
3221   266E FF FF FF FF 
3221   2672 FF FF FF FF 
3221   2676 FF FF FF FF 
3221   267A FF FF FF FF 
3221   267E FF FF FF FF 
3221   2682 FF FF FF FF 
3221   2686 FF FF FF FF 
3221   268A FF FF FF FF 
3221   268E FF FF FF FF 
3221   2692 FF FF FF FF 
3221   2696 FF FF FF FF 
3221   269A FF FF FF FF 
3221   269E FF FF FF FF 
3221   26A2 FF FF FF FF 
3221   26A6 FF FF FF FF 
3221   26AA FF FF FF FF 
3221   26AE FF FF FF FF 
3221   26B2 FF FF FF FF 
3221   26B6 FF FF FF FF 
3221   26BA FF FF FF FF 
3221   26BE FF FF FF FF 
3221   26C2 FF FF FF FF 
3221   26C6 FF FF FF FF 
3221   26CA FF FF FF FF 
3221   26CE FF FF FF FF 
3221   26D2 FF FF FF FF 
3221   26D6 FF FF FF FF 
3221   26DA FF FF FF FF 
3221   26DE FF FF FF FF 
3221   26E2 FF FF FF FF 
3221   26E6 FF FF FF FF 
3221   26EA FF FF FF FF 
3221   26EE FF FF FF FF 
3221   26F2 FF FF FF FF 
3221   26F6 FF FF FF FF 
3221   26FA FF FF FF FF 
3221   26FE FF FF FF FF 
3221   2702 FF FF FF FF 
3221   2706 FF FF FF FF 
3221   270A FF FF FF FF 
3221   270E FF FF FF FF 
3221   2712 FF FF FF FF 
3221   2716 FF FF FF FF 
3221   271A FF FF FF FF 
3221   271E FF FF FF FF 
3221   2722 FF FF FF FF 
3221   2726 FF FF FF FF 
3221   272A FF FF FF FF 
3221   272E FF FF FF FF 
3221   2732 FF FF FF FF 
3221   2736 FF FF FF FF 
3221   273A FF FF FF FF 
3221   273E FF FF FF FF 
3221   2742 FF FF FF FF 
3221   2746 FF FF FF FF 
3221   274A FF FF FF FF 
3221   274E FF FF FF FF 
3221   2752 FF FF FF FF 
3221   2756 FF FF FF FF 
3221   275A FF FF FF FF 
3221   275E FF FF FF FF 
3221   2762 FF FF FF FF 
3221   2766 FF FF FF FF 
3221   276A FF FF FF FF 
3221   276E FF FF FF FF 
3221   2772 FF FF FF FF 
3221   2776 FF FF FF FF 
3221   277A FF FF FF FF 
3221   277E FF FF FF FF 
3221   2782 FF FF FF FF 
3221   2786 FF FF FF FF 
3221   278A FF FF FF FF 
3221   278E FF FF FF FF 
3221   2792 FF FF FF FF 
3221   2796 FF FF FF FF 
3221   279A FF FF FF FF 
3221   279E FF FF FF FF 
3221   27A2 FF FF FF FF 
3221   27A6 FF FF FF FF 
3221   27AA FF FF FF FF 
3221   27AE FF FF FF FF 
3221   27B2 FF FF FF FF 
3221   27B6 FF FF FF FF 
3221   27BA FF FF FF FF 
3221   27BE FF FF FF FF 
3221   27C2 FF FF FF FF 
3221   27C6 FF FF FF FF 
3221   27CA FF FF FF FF 
3221   27CE FF FF FF FF 
3221   27D2 FF FF FF FF 
3221   27D6 FF FF FF FF 
3221   27DA FF FF FF FF 
3221   27DE FF FF FF FF 
3221   27E2 FF FF FF FF 
3221   27E6 FF FF FF FF 
3221   27EA FF FF FF FF 
3221   27EE FF FF FF FF 
3221   27F2 FF FF FF FF 
3221   27F6 FF FF FF FF 
3221   27FA FF FF FF FF 
3221   27FE FF FF FF FF 
3221   2802 FF FF FF FF 
3221   2806 FF FF FF FF 
3221   280A FF FF FF FF 
3221   280E FF FF FF FF 
3221   2812 FF FF FF FF 
3221   2816 FF FF FF FF 
3221   281A FF FF FF FF 
3221   281E FF FF FF FF 
3221   2822 FF FF FF FF 
3221   2826 FF FF FF FF 
3221   282A FF FF FF FF 
3221   282E FF FF FF FF 
3221   2832 FF FF FF FF 
3221   2836 FF FF FF FF 
3221   283A FF FF FF FF 
3221   283E FF FF FF FF 
3221   2842 FF FF FF FF 
3221   2846 FF FF FF FF 
3221   284A FF FF FF FF 
3221   284E FF FF FF FF 
3221   2852 FF FF FF FF 
3221   2856 FF FF FF FF 
3221   285A FF FF FF FF 
3221   285E FF FF FF FF 
3221   2862 FF FF FF FF 
3221   2866 FF FF FF FF 
3221   286A FF FF FF FF 
3221   286E FF FF FF FF 
3221   2872 FF FF FF FF 
3221   2876 FF FF FF FF 
3221   287A FF FF FF FF 
3221   287E FF FF FF FF 
3221   2882 FF FF FF FF 
3221   2886 FF FF FF FF 
3221   288A FF FF FF FF 
3221   288E FF FF FF FF 
3221   2892 FF FF FF FF 
3221   2896 FF FF FF FF 
3221   289A FF FF FF FF 
3221   289E FF FF FF FF 
3221   28A2 FF FF FF FF 
3221   28A6 FF FF FF FF 
3221   28AA FF FF FF FF 
3221   28AE FF FF FF FF 
3221   28B2 FF FF FF FF 
3221   28B6 FF FF FF FF 
3221   28BA FF FF FF FF 
3221   28BE FF FF FF FF 
3221   28C2 FF FF FF FF 
3221   28C6 FF FF FF FF 
3221   28CA FF FF FF FF 
3221   28CE FF FF FF FF 
3221   28D2 FF FF FF FF 
3221   28D6 FF FF FF FF 
3221   28DA FF FF FF FF 
3221   28DE FF FF FF FF 
3221   28E2 FF FF FF FF 
3221   28E6 FF FF FF FF 
3221   28EA FF FF FF FF 
3221   28EE FF FF FF FF 
3221   28F2 FF FF FF FF 
3221   28F6 FF FF FF FF 
3221   28FA FF FF FF FF 
3221   28FE FF FF FF FF 
3221   2902 FF FF FF FF 
3221   2906 FF FF FF FF 
3221   290A FF FF FF FF 
3221   290E FF FF FF FF 
3221   2912 FF FF FF FF 
3221   2916 FF FF FF FF 
3221   291A FF FF FF FF 
3221   291E FF FF FF FF 
3221   2922 FF FF FF FF 
3221   2926 FF FF FF FF 
3221   292A FF FF FF FF 
3221   292E FF FF FF FF 
3221   2932 FF FF FF FF 
3221   2936 FF FF FF FF 
3221   293A FF FF FF FF 
3221   293E FF FF FF FF 
3221   2942 FF FF FF FF 
3221   2946 FF FF FF FF 
3221   294A FF FF FF FF 
3221   294E FF FF FF FF 
3221   2952 FF FF FF FF 
3221   2956 FF FF FF FF 
3221   295A FF FF FF FF 
3221   295E FF FF FF FF 
3221   2962 FF FF FF FF 
3221   2966 FF FF FF FF 
3221   296A FF FF FF FF 
3221   296E FF FF FF FF 
3221   2972 FF FF FF FF 
3221   2976 FF FF FF FF 
3221   297A FF FF FF FF 
3221   297E FF FF FF FF 
3221   2982 FF FF FF FF 
3221   2986 FF FF FF FF 
3221   298A FF FF FF FF 
3221   298E FF FF FF FF 
3221   2992 FF FF FF FF 
3221   2996 FF FF FF FF 
3221   299A FF FF FF FF 
3221   299E FF FF FF FF 
3221   29A2 FF FF FF FF 
3221   29A6 FF FF FF FF 
3221   29AA FF FF FF FF 
3221   29AE FF FF FF FF 
3221   29B2 FF FF FF FF 
3221   29B6 FF FF FF FF 
3221   29BA FF FF FF FF 
3221   29BE FF FF FF FF 
3221   29C2 FF FF FF FF 
3221   29C6 FF FF FF FF 
3221   29CA FF FF FF FF 
3221   29CE FF FF FF FF 
3221   29D2 FF FF FF FF 
3221   29D6 FF FF FF FF 
3221   29DA FF FF FF FF 
3221   29DE FF FF FF FF 
3221   29E2 FF FF FF FF 
3221   29E6 FF FF FF FF 
3221   29EA FF FF FF FF 
3221   29EE FF FF FF FF 
3221   29F2 FF FF FF FF 
3221   29F6 FF FF FF FF 
3221   29FA FF FF FF FF 
3221   29FE FF FF FF FF 
3221   2A02 FF FF FF FF 
3221   2A06 FF FF FF FF 
3221   2A0A FF FF FF FF 
3221   2A0E FF FF FF FF 
3221   2A12 FF FF FF FF 
3221   2A16 FF FF FF FF 
3221   2A1A FF FF FF FF 
3221   2A1E FF FF FF FF 
3221   2A22 FF FF FF FF 
3221   2A26 FF FF FF FF 
3221   2A2A FF FF FF FF 
3221   2A2E FF FF FF FF 
3221   2A32 FF FF FF FF 
3221   2A36 FF FF FF FF 
3221   2A3A FF FF FF FF 
3221   2A3E FF FF FF FF 
3221   2A42 FF FF FF FF 
3221   2A46 FF FF FF FF 
3221   2A4A FF FF FF FF 
3221   2A4E FF FF FF FF 
3221   2A52 FF FF FF FF 
3221   2A56 FF FF FF FF 
3221   2A5A FF FF FF FF 
3221   2A5E FF FF FF FF 
3221   2A62 FF FF FF FF 
3221   2A66 FF FF FF FF 
3221   2A6A FF FF FF FF 
3221   2A6E FF FF FF FF 
3221   2A72 FF FF FF FF 
3221   2A76 FF FF FF FF 
3221   2A7A FF FF FF FF 
3221   2A7E FF FF FF FF 
3221   2A82 FF FF FF FF 
3221   2A86 FF FF FF FF 
3221   2A8A FF FF FF FF 
3221   2A8E FF FF FF FF 
3221   2A92 FF FF FF FF 
3221   2A96 FF FF FF FF 
3221   2A9A FF FF FF FF 
3221   2A9E FF FF FF FF 
3221   2AA2 FF FF FF FF 
3221   2AA6 FF FF FF FF 
3221   2AAA FF FF FF FF 
3221   2AAE FF FF FF FF 
3221   2AB2 FF FF FF FF 
3221   2AB6 FF FF FF FF 
3221   2ABA FF FF FF FF 
3221   2ABE FF FF FF FF 
3221   2AC2 FF FF FF FF 
3221   2AC6 FF FF FF FF 
3221   2ACA FF FF FF FF 
3221   2ACE FF FF FF FF 
3221   2AD2 FF FF FF FF 
3221   2AD6 FF FF FF FF 
3221   2ADA FF FF FF FF 
3221   2ADE FF FF FF FF 
3221   2AE2 FF FF FF FF 
3221   2AE6 FF FF FF FF 
3221   2AEA FF FF FF FF 
3221   2AEE FF FF FF FF 
3221   2AF2 FF FF FF FF 
3221   2AF6 FF FF FF FF 
3221   2AFA FF FF FF FF 
3221   2AFE FF FF FF FF 
3221   2B02 FF FF FF FF 
3221   2B06 FF FF FF FF 
3221   2B0A FF FF FF FF 
3221   2B0E FF FF FF FF 
3221   2B12 FF FF FF FF 
3221   2B16 FF FF FF FF 
3221   2B1A FF FF FF FF 
3221   2B1E FF FF FF FF 
3221   2B22 FF FF FF FF 
3221   2B26 FF FF FF FF 
3221   2B2A FF FF FF FF 
3221   2B2E FF FF FF FF 
3221   2B32 FF FF FF FF 
3221   2B36 FF FF FF FF 
3221   2B3A FF FF FF FF 
3221   2B3E FF FF FF FF 
3221   2B42 FF FF FF FF 
3221   2B46 FF FF FF FF 
3221   2B4A FF FF FF FF 
3221   2B4E FF FF FF FF 
3221   2B52 FF FF FF FF 
3221   2B56 FF FF FF FF 
3221   2B5A FF FF FF FF 
3221   2B5E FF FF FF FF 
3221   2B62 FF FF FF FF 
3221   2B66 FF FF FF FF 
3221   2B6A FF FF FF FF 
3221   2B6E FF FF FF FF 
3221   2B72 FF FF FF FF 
3221   2B76 FF FF FF FF 
3221   2B7A FF FF FF FF 
3221   2B7E FF FF FF FF 
3221   2B82 FF FF FF FF 
3221   2B86 FF FF FF FF 
3221   2B8A FF FF FF FF 
3221   2B8E FF FF FF FF 
3221   2B92 FF FF FF FF 
3221   2B96 FF FF FF FF 
3221   2B9A FF FF FF FF 
3221   2B9E FF FF FF FF 
3221   2BA2 FF FF FF FF 
3221   2BA6 FF FF FF FF 
3221   2BAA FF FF FF FF 
3221   2BAE FF FF FF FF 
3221   2BB2 FF FF FF FF 
3221   2BB6 FF FF FF FF 
3221   2BBA FF FF FF FF 
3221   2BBE FF FF FF FF 
3221   2BC2 FF FF FF FF 
3221   2BC6 FF FF FF FF 
3221   2BCA FF FF FF FF 
3221   2BCE FF FF FF FF 
3221   2BD2 FF FF FF FF 
3221   2BD6 FF FF FF FF 
3221   2BDA FF FF FF FF 
3221   2BDE FF FF FF FF 
3221   2BE2 FF FF FF FF 
3221   2BE6 FF FF FF FF 
3221   2BEA FF FF FF FF 
3221   2BEE FF FF FF FF 
3221   2BF2 FF FF FF FF 
3221   2BF6 FF FF FF FF 
3221   2BFA FF FF FF FF 
3221   2BFE FF FF FF FF 
3221   2C02 FF FF FF FF 
3221   2C06 FF FF FF FF 
3221   2C0A FF FF FF FF 
3221   2C0E FF FF FF FF 
3221   2C12 FF FF FF FF 
3221   2C16 FF FF FF FF 
3221   2C1A FF FF FF FF 
3221   2C1E FF FF FF FF 
3221   2C22 FF FF FF FF 
3221   2C26 FF FF FF FF 
3221   2C2A FF FF FF FF 
3221   2C2E FF FF FF FF 
3221   2C32 FF FF FF FF 
3221   2C36 FF FF FF FF 
3221   2C3A FF FF FF FF 
3221   2C3E FF FF FF FF 
3221   2C42 FF FF FF FF 
3221   2C46 FF FF FF FF 
3221   2C4A FF FF FF FF 
3221   2C4E FF FF FF FF 
3221   2C52 FF FF FF FF 
3221   2C56 FF FF FF FF 
3221   2C5A FF FF FF FF 
3221   2C5E FF FF FF FF 
3221   2C62 FF FF FF FF 
3221   2C66 FF FF FF FF 
3221   2C6A FF FF FF FF 
3221   2C6E FF FF FF FF 
3221   2C72 FF FF FF FF 
3221   2C76 FF FF FF FF 
3221   2C7A FF FF FF FF 
3221   2C7E FF FF FF FF 
3221   2C82 FF FF FF FF 
3221   2C86 FF FF FF FF 
3221   2C8A FF FF FF FF 
3221   2C8E FF FF FF FF 
3221   2C92 FF FF FF FF 
3221   2C96 FF FF FF FF 
3221   2C9A FF FF FF FF 
3221   2C9E FF FF FF FF 
3221   2CA2 FF FF FF FF 
3221   2CA6 FF FF FF FF 
3221   2CAA FF FF FF FF 
3221   2CAE FF FF FF FF 
3221   2CB2 FF FF FF FF 
3221   2CB6 FF FF FF FF 
3221   2CBA FF FF FF FF 
3221   2CBE FF FF FF FF 
3221   2CC2 FF FF FF FF 
3221   2CC6 FF FF FF FF 
3221   2CCA FF FF FF FF 
3221   2CCE FF FF FF FF 
3221   2CD2 FF FF FF FF 
3221   2CD6 FF FF FF FF 
3221   2CDA FF FF FF FF 
3221   2CDE FF FF FF FF 
3221   2CE2 FF FF FF FF 
3221   2CE6 FF FF FF FF 
3221   2CEA FF FF FF FF 
3221   2CEE FF FF FF FF 
3221   2CF2 FF FF FF FF 
3221   2CF6 FF FF FF FF 
3221   2CFA FF FF FF FF 
3221   2CFE FF FF FF FF 
3221   2D02 FF FF FF FF 
3221   2D06 FF FF FF FF 
3221   2D0A FF FF FF FF 
3221   2D0E FF FF FF FF 
3221   2D12 FF FF FF FF 
3221   2D16 FF FF FF FF 
3221   2D1A FF FF FF FF 
3221   2D1E FF FF FF FF 
3221   2D22 FF FF FF FF 
3221   2D26 FF FF FF FF 
3221   2D2A FF FF FF FF 
3221   2D2E FF FF FF FF 
3221   2D32 FF FF FF FF 
3221   2D36 FF FF FF FF 
3221   2D3A FF FF FF FF 
3221   2D3E FF FF FF FF 
3221   2D42 FF FF FF FF 
3221   2D46 FF FF FF FF 
3221   2D4A FF FF FF FF 
3221   2D4E FF FF FF FF 
3221   2D52 FF FF FF FF 
3221   2D56 FF FF FF FF 
3221   2D5A FF FF FF FF 
3221   2D5E FF FF FF FF 
3221   2D62 FF FF FF FF 
3221   2D66 FF FF FF FF 
3221   2D6A FF FF FF FF 
3221   2D6E FF FF FF FF 
3221   2D72 FF FF FF FF 
3221   2D76 FF FF FF FF 
3221   2D7A FF FF FF FF 
3221   2D7E FF FF FF FF 
3221   2D82 FF FF FF FF 
3221   2D86 FF FF FF FF 
3221   2D8A FF FF FF FF 
3221   2D8E FF FF FF FF 
3221   2D92 FF FF FF FF 
3221   2D96 FF FF FF FF 
3221   2D9A FF FF FF FF 
3221   2D9E FF FF FF FF 
3221   2DA2 FF FF FF FF 
3221   2DA6 FF FF FF FF 
3221   2DAA FF FF FF FF 
3221   2DAE FF FF FF FF 
3221   2DB2 FF FF FF FF 
3221   2DB6 FF FF FF FF 
3221   2DBA FF FF FF FF 
3221   2DBE FF FF FF FF 
3221   2DC2 FF FF FF FF 
3221   2DC6 FF FF FF FF 
3221   2DCA FF FF FF FF 
3221   2DCE FF FF FF FF 
3221   2DD2 FF FF FF FF 
3221   2DD6 FF FF FF FF 
3221   2DDA FF FF FF FF 
3221   2DDE FF FF FF FF 
3221   2DE2 FF FF FF FF 
3221   2DE6 FF FF FF FF 
3221   2DEA FF FF FF FF 
3221   2DEE FF FF FF FF 
3221   2DF2 FF FF FF FF 
3221   2DF6 FF FF FF FF 
3221   2DFA FF FF FF FF 
3221   2DFE FF FF FF FF 
3221   2E02 FF FF FF FF 
3221   2E06 FF FF FF FF 
3221   2E0A FF FF FF FF 
3221   2E0E FF FF FF FF 
3221   2E12 FF FF FF FF 
3221   2E16 FF FF FF FF 
3221   2E1A FF FF FF FF 
3221   2E1E FF FF FF FF 
3221   2E22 FF FF FF FF 
3221   2E26 FF FF FF FF 
3221   2E2A FF FF FF FF 
3221   2E2E FF FF FF FF 
3221   2E32 FF FF FF FF 
3221   2E36 FF FF FF FF 
3221   2E3A FF FF FF FF 
3221   2E3E FF FF FF FF 
3221   2E42 FF FF FF FF 
3221   2E46 FF FF FF FF 
3221   2E4A FF FF FF FF 
3221   2E4E FF FF FF FF 
3221   2E52 FF FF FF FF 
3221   2E56 FF FF FF FF 
3221   2E5A FF FF FF FF 
3221   2E5E FF FF FF FF 
3221   2E62 FF FF FF FF 
3221   2E66 FF FF FF FF 
3221   2E6A FF FF FF FF 
3221   2E6E FF FF FF FF 
3221   2E72 FF FF FF FF 
3221   2E76 FF FF FF FF 
3221   2E7A FF FF FF FF 
3221   2E7E FF FF FF FF 
3221   2E82 FF FF FF FF 
3221   2E86 FF FF FF FF 
3221   2E8A FF FF FF FF 
3221   2E8E FF FF FF FF 
3221   2E92 FF FF FF FF 
3221   2E96 FF FF FF FF 
3221   2E9A FF FF FF FF 
3221   2E9E FF FF FF FF 
3221   2EA2 FF FF FF FF 
3221   2EA6 FF FF FF FF 
3221   2EAA FF FF FF FF 
3221   2EAE FF FF FF FF 
3221   2EB2 FF FF FF FF 
3221   2EB6 FF FF FF FF 
3221   2EBA FF FF FF FF 
3221   2EBE FF FF FF FF 
3221   2EC2 FF FF FF FF 
3221   2EC6 FF FF FF FF 
3221   2ECA FF FF FF FF 
3221   2ECE FF FF FF FF 
3221   2ED2 FF FF FF FF 
3221   2ED6 FF FF FF FF 
3221   2EDA FF FF FF FF 
3221   2EDE FF FF FF FF 
3221   2EE2 FF FF FF FF 
3221   2EE6 FF FF FF FF 
3221   2EEA FF FF FF FF 
3221   2EEE FF FF FF FF 
3221   2EF2 FF FF FF FF 
3221   2EF6 FF FF FF FF 
3221   2EFA FF FF FF FF 
3221   2EFE FF FF FF FF 
3221   2F02 FF FF FF FF 
3221   2F06 FF FF FF FF 
3221   2F0A FF FF FF FF 
3221   2F0E FF FF FF FF 
3221   2F12 FF FF FF FF 
3221   2F16 FF FF FF FF 
3221   2F1A FF FF FF FF 
3221   2F1E FF FF FF FF 
3221   2F22 FF FF FF FF 
3221   2F26 FF FF FF FF 
3221   2F2A FF FF FF FF 
3221   2F2E FF FF FF FF 
3221   2F32 FF FF FF FF 
3221   2F36 FF FF FF FF 
3221   2F3A FF FF FF FF 
3221   2F3E FF FF FF FF 
3221   2F42 FF FF FF FF 
3221   2F46 FF FF FF FF 
3221   2F4A FF FF FF FF 
3221   2F4E FF FF FF FF 
3221   2F52 FF FF FF FF 
3221   2F56 FF FF FF FF 
3221   2F5A FF FF FF FF 
3221   2F5E FF FF FF FF 
3221   2F62 FF FF FF FF 
3221   2F66 FF FF FF FF 
3221   2F6A FF FF FF FF 
3221   2F6E FF FF FF FF 
3221   2F72 FF FF FF FF 
3221   2F76 FF FF FF FF 
3221   2F7A FF FF FF FF 
3221   2F7E FF FF FF FF 
3221   2F82 FF FF FF FF 
3221   2F86 FF FF FF FF 
3221   2F8A FF FF FF FF 
3221   2F8E FF FF FF FF 
3221   2F92 FF FF FF FF 
3221   2F96 FF FF FF FF 
3221   2F9A FF FF FF FF 
3221   2F9E FF FF FF FF 
3221   2FA2 FF FF FF FF 
3221   2FA6 FF FF FF FF 
3221   2FAA FF FF FF FF 
3221   2FAE FF FF FF FF 
3221   2FB2 FF FF FF FF 
3221   2FB6 FF FF FF FF 
3221   2FBA FF FF FF FF 
3221   2FBE FF FF FF FF 
3221   2FC2 FF FF FF FF 
3221   2FC6 FF FF FF FF 
3221   2FCA FF FF FF FF 
3221   2FCE FF FF FF FF 
3221   2FD2 FF FF FF FF 
3221   2FD6 FF FF FF FF 
3221   2FDA FF FF FF FF 
3221   2FDE FF FF FF FF 
3221   2FE2 FF FF FF FF 
3221   2FE6 FF FF FF FF 
3221   2FEA FF FF FF FF 
3221   2FEE FF FF FF FF 
3221   2FF2 FF FF FF FF 
3221   2FF6 FF FF FF FF 
3221   2FFA FF FF FF FF 
3221   2FFE FF FF FF FF 
3221   3002 FF FF FF FF 
3221   3006 FF FF FF FF 
3221   300A FF FF FF FF 
3221   300E FF FF FF FF 
3221   3012 FF FF FF FF 
3221   3016 FF FF FF FF 
3221   301A FF FF FF FF 
3221   301E FF FF FF FF 
3221   3022 FF FF FF FF 
3221   3026 FF FF FF FF 
3221   302A FF FF FF FF 
3221   302E FF FF FF FF 
3221   3032 FF FF FF FF 
3221   3036 FF FF FF FF 
3221   303A FF FF FF FF 
3221   303E FF FF FF FF 
3221   3042 FF FF FF FF 
3221   3046 FF FF FF FF 
3221   304A FF FF FF FF 
3221   304E FF FF FF FF 
3221   3052 FF FF FF FF 
3221   3056 FF FF FF FF 
3221   305A FF FF FF FF 
3221   305E FF FF FF FF 
3221   3062 FF FF FF FF 
3221   3066 FF FF FF FF 
3221   306A FF FF FF FF 
3221   306E FF FF FF FF 
3221   3072 FF FF FF FF 
3221   3076 FF FF FF FF 
3221   307A FF FF FF FF 
3221   307E FF FF FF FF 
3221   3082 FF FF FF FF 
3221   3086 FF FF FF FF 
3221   308A FF FF FF FF 
3221   308E FF FF FF FF 
3221   3092 FF FF FF FF 
3221   3096 FF FF FF FF 
3221   309A FF FF FF FF 
3221   309E FF FF FF FF 
3221   30A2 FF FF FF FF 
3221   30A6 FF FF FF FF 
3221   30AA FF FF FF FF 
3221   30AE FF FF FF FF 
3221   30B2 FF FF FF FF 
3221   30B6 FF FF FF FF 
3221   30BA FF FF FF FF 
3221   30BE FF FF FF FF 
3221   30C2 FF FF FF FF 
3221   30C6 FF FF FF FF 
3221   30CA FF FF FF FF 
3221   30CE FF FF FF FF 
3221   30D2 FF FF FF FF 
3221   30D6 FF FF FF FF 
3221   30DA FF FF FF FF 
3221   30DE FF FF FF FF 
3221   30E2 FF FF FF FF 
3221   30E6 FF FF FF FF 
3221   30EA FF FF FF FF 
3221   30EE FF FF FF FF 
3221   30F2 FF FF FF FF 
3221   30F6 FF FF FF FF 
3221   30FA FF FF FF FF 
3221   30FE FF FF FF FF 
3221   3102 FF FF FF FF 
3221   3106 FF FF FF FF 
3221   310A FF FF FF FF 
3221   310E FF FF FF FF 
3221   3112 FF FF FF FF 
3221   3116 FF FF FF FF 
3221   311A FF FF FF FF 
3221   311E FF FF FF FF 
3221   3122 FF FF FF FF 
3221   3126 FF FF FF FF 
3221   312A FF FF FF FF 
3221   312E FF FF FF FF 
3221   3132 FF FF FF FF 
3221   3136 FF FF FF FF 
3221   313A FF FF FF FF 
3221   313E FF FF FF FF 
3221   3142 FF FF FF FF 
3221   3146 FF FF FF FF 
3221   314A FF FF FF FF 
3221   314E FF FF FF FF 
3221   3152 FF FF FF FF 
3221   3156 FF FF FF FF 
3221   315A FF FF FF FF 
3222   315E             
3223   315E             scrap_sector:
3224   315E FF FF FF FF   .fill 512         ; scrap sector
3224   3162 FF FF FF FF 
3224   3166 FF FF FF FF 
3224   316A FF FF FF FF 
3224   316E FF FF FF FF 
3224   3172 FF FF FF FF 
3224   3176 FF FF FF FF 
3224   317A FF FF FF FF 
3224   317E FF FF FF FF 
3224   3182 FF FF FF FF 
3224   3186 FF FF FF FF 
3224   318A FF FF FF FF 
3224   318E FF FF FF FF 
3224   3192 FF FF FF FF 
3224   3196 FF FF FF FF 
3224   319A FF FF FF FF 
3224   319E FF FF FF FF 
3224   31A2 FF FF FF FF 
3224   31A6 FF FF FF FF 
3224   31AA FF FF FF FF 
3224   31AE FF FF FF FF 
3224   31B2 FF FF FF FF 
3224   31B6 FF FF FF FF 
3224   31BA FF FF FF FF 
3224   31BE FF FF FF FF 
3224   31C2 FF FF FF FF 
3224   31C6 FF FF FF FF 
3224   31CA FF FF FF FF 
3224   31CE FF FF FF FF 
3224   31D2 FF FF FF FF 
3224   31D6 FF FF FF FF 
3224   31DA FF FF FF FF 
3224   31DE FF FF FF FF 
3224   31E2 FF FF FF FF 
3224   31E6 FF FF FF FF 
3224   31EA FF FF FF FF 
3224   31EE FF FF FF FF 
3224   31F2 FF FF FF FF 
3224   31F6 FF FF FF FF 
3224   31FA FF FF FF FF 
3224   31FE FF FF FF FF 
3224   3202 FF FF FF FF 
3224   3206 FF FF FF FF 
3224   320A FF FF FF FF 
3224   320E FF FF FF FF 
3224   3212 FF FF FF FF 
3224   3216 FF FF FF FF 
3224   321A FF FF FF FF 
3224   321E FF FF FF FF 
3224   3222 FF FF FF FF 
3224   3226 FF FF FF FF 
3224   322A FF FF FF FF 
3224   322E FF FF FF FF 
3224   3232 FF FF FF FF 
3224   3236 FF FF FF FF 
3224   323A FF FF FF FF 
3224   323E FF FF FF FF 
3224   3242 FF FF FF FF 
3224   3246 FF FF FF FF 
3224   324A FF FF FF FF 
3224   324E FF FF FF FF 
3224   3252 FF FF FF FF 
3224   3256 FF FF FF FF 
3224   325A FF FF FF FF 
3224   325E FF FF FF FF 
3224   3262 FF FF FF FF 
3224   3266 FF FF FF FF 
3224   326A FF FF FF FF 
3224   326E FF FF FF FF 
3224   3272 FF FF FF FF 
3224   3276 FF FF FF FF 
3224   327A FF FF FF FF 
3224   327E FF FF FF FF 
3224   3282 FF FF FF FF 
3224   3286 FF FF FF FF 
3224   328A FF FF FF FF 
3224   328E FF FF FF FF 
3224   3292 FF FF FF FF 
3224   3296 FF FF FF FF 
3224   329A FF FF FF FF 
3224   329E FF FF FF FF 
3224   32A2 FF FF FF FF 
3224   32A6 FF FF FF FF 
3224   32AA FF FF FF FF 
3224   32AE FF FF FF FF 
3224   32B2 FF FF FF FF 
3224   32B6 FF FF FF FF 
3224   32BA FF FF FF FF 
3224   32BE FF FF FF FF 
3224   32C2 FF FF FF FF 
3224   32C6 FF FF FF FF 
3224   32CA FF FF FF FF 
3224   32CE FF FF FF FF 
3224   32D2 FF FF FF FF 
3224   32D6 FF FF FF FF 
3224   32DA FF FF FF FF 
3224   32DE FF FF FF FF 
3224   32E2 FF FF FF FF 
3224   32E6 FF FF FF FF 
3224   32EA FF FF FF FF 
3224   32EE FF FF FF FF 
3224   32F2 FF FF FF FF 
3224   32F6 FF FF FF FF 
3224   32FA FF FF FF FF 
3224   32FE FF FF FF FF 
3224   3302 FF FF FF FF 
3224   3306 FF FF FF FF 
3224   330A FF FF FF FF 
3224   330E FF FF FF FF 
3224   3312 FF FF FF FF 
3224   3316 FF FF FF FF 
3224   331A FF FF FF FF 
3224   331E FF FF FF FF 
3224   3322 FF FF FF FF 
3224   3326 FF FF FF FF 
3224   332A FF FF FF FF 
3224   332E FF FF FF FF 
3224   3332 FF FF FF FF 
3224   3336 FF FF FF FF 
3224   333A FF FF FF FF 
3224   333E FF FF FF FF 
3224   3342 FF FF FF FF 
3224   3346 FF FF FF FF 
3224   334A FF FF FF FF 
3224   334E FF FF FF FF 
3224   3352 FF FF FF FF 
3224   3356 FF FF FF FF 
3224   335A FF FF FF FF 
3225   335E             transient_area:
3226   335E 00            .db 0             ; beginning of the transient memory area. used for disk reads and other purposes    
3227   335F             
3228   335F             .end
tasm: Number of errors = 0
