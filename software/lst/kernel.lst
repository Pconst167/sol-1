0001   0000             ; ------------------------------------------------------------------------------------------------------------------;
0002   0000             ; Solarium - Sol-1 Homebrew Minicomputer Operating System Kernel.
0003   0000             ; ------------------------------------------------------------------------------------------------------------------;
0004   0000             
0005   0000             ; memory map
0006   0000             ; ------------------------------------------------------------------------------------------------------------------;
0007   0000             ; 0000 ... 7fff - rom space
0008   0000             ; 8000 ... f7ff - ram space
0009   0000             ; f7ff          - stack root
0010   0000             
0011   0000             ; i/o map
0012   0000             ; ------------------------------------------------------------------------------------------------------------------;
0013   0000             ; ff80 - uart 0 (16550)
0014   0000             ; ff90 - uart 1 (16550)
0015   0000             ; ffa0 - rtc    (m48t02)
0016   0000             ; ffb0 - pio 0  (8255)
0017   0000             ; ffc0 - fdd    (5.25" floppy drive block)
0018   0000             ;   - ffc0      output port (377 flip-flop)                  
0019   0000             ;   - ffc1      input port  (244 buffer)                     
0020   0000             ;   - ffc8      wd1770 status/command    
0021   0000             ;   - ffc9      wd1770 track register
0022   0000             ;   - ffca      wd1770 sector register
0023   0000             ;   - ffcb      wd1770 data register
0024   0000             ;      
0025   0000             ; ffd0 - ide    (compact flash / pata)
0026   0000             ; ffe0 - timer  (8253)
0027   0000             ; fff0 - bios configuration nv-ram store area
0028   0000             ; ------------------------------------------------------------------------------------------------------------------;
0029   0000             
0030   0000             ; ------------------------------------------------------------------------------------------------------------------;
0031   0000             ; system constants
0032   0000             ; ------------------------------------------------------------------------------------------------------------------;
0033   0000             _uart0_data       .equ $ff80         ; data
0034   0000             _uart0_dlab_0     .equ $ff80         ; divisor latch low byte
0035   0000             _uart0_dlab_1     .equ $ff81         ; divisor latch high byte
0036   0000             _uart0_ier        .equ $ff81         ; interrupt enable register
0037   0000             _uart0_fcr        .equ $ff82         ; fifo control register
0038   0000             _uart0_lcr        .equ $ff83         ; line control register
0039   0000             _uart0_lsr        .equ $ff85         ; line status register
0040   0000             
0041   0000             _uart1_data       .equ $ff90         ; data
0042   0000             _uart1_dlab_0     .equ $ff90         ; divisor latch low byte
0043   0000             _uart1_dlab_1     .equ $ff91         ; divisor latch high byte
0044   0000             _uart1_ier        .equ $ff91         ; interrupt enable register
0045   0000             _uart1_fcr        .equ $ff92         ; fifo control register
0046   0000             _uart1_lcr        .equ $ff93         ; line control register
0047   0000             _uart1_lsr        .equ $ff95         ; line status register
0048   0000             
0049   0000             _ide_base         .equ $ffd0         ; ide base
0050   0000             _ide_r0           .equ _ide_base + 0 ; data port
0051   0000             _ide_r1           .equ _ide_base + 1 ; read: error code, write: feature
0052   0000             _ide_r2           .equ _ide_base + 2 ; number of sectors to transfer
0053   0000             _ide_r3           .equ _ide_base + 3 ; sector address lba 0 [0:7]
0054   0000             _ide_r4           .equ _ide_base + 4 ; sector address lba 1 [8:15]
0055   0000             _ide_r5           .equ _ide_base + 5 ; sector address lba 2 [16:23]
0056   0000             _ide_r6           .equ _ide_base + 6 ; sector address lba 3 [24:27 (lsb)]
0057   0000             _ide_r7           .equ _ide_base + 7 ; read: status, write: command       
0058   0000             
0059   0000             _7seg_display     .equ $ffb0         ; bios post code hex display (2 digits) (connected to pio a)
0060   0000             _bios_post_ctrl   .equ $ffb3         ; bios post display control register, 80h = as output
0061   0000             _pio_a            .equ $ffb0    
0062   0000             _pio_b            .equ $ffb1
0063   0000             _pio_c            .equ $ffb2
0064   0000             _pio_control      .equ $ffb3         ; pio control port
0065   0000             
0066   0000             _fdc_config       .equ $ffc0         ; 0 = select_0, 1 = select_1, 2 = side_select, 3 = dden, 4 = in_use_or_head_load, 5 = wd1770_rst
0067   0000             _fdc_status_0     .equ $ffc1         ; 0 = drq, 1 = ready
0068   0000             _fdc_stat_cmd     .equ $ffc8         ; status / command register
0069   0000             _fdc_track        .equ $ffc9         ; track register
0070   0000             _fdc_sector       .equ $ffca         ; sector register
0071   0000             _fdc_data         .equ $ffcb         ; data register
0072   0000             
0073   0000             _timer_c_0        .equ $ffe0         ; timer counter 0
0074   0000             _timer_c_1        .equ $ffe1         ; timer counter 1
0075   0000             _timer_c_2        .equ $ffe2         ; timer counter 2
0076   0000             _timer_ctrl       .equ $ffe3         ; timer control register
0077   0000             
0078   0000             _stack_begin      .equ $f7ff         ; beginning of stack
0079   0000             _fifo_size        .equ 4096
0080   0000             
0081   0000             _mbr              .equ 446
0082   0000             _superblock       .equ 512
0083   0000             
0084   0000             text_org          .equ $400          ; code origin address for all user processes
0085   0000             
0086   0000             
0087   0000             ; ------------------------------------------------------------------------------------------------------------------;
0088   0000             ; DISK LAYOUT:
0089   0000             ; | Metadata               | Size (bytes)    | Blocks (2048 bytes)              |
0090   0000             ; | ---------------------- | --------------- | -------------------------------- |
0091   0000             ; | Bootloader/MBR         | 512 bytes       | 0.25 (1 sector)                  |
0092   0000             ; | Superblock             | 1024 bytes      | 1 block (2048 bytes, must align) |
0093   0000             ; | Block Group Descriptor | \~32 bytes      | 1 block (2048 bytes)             |
0094   0000             ; | Block Bitmap           | 16,384 bytes    | 8 blocks                         |
0095   0000             ; | Inode Bitmap           | 2,048 bytes     | 1 block                          |
0096   0000             ; | Inode Table            | 2,097,152 bytes | 1024 blocks                      |
0097   0000             ; 
0098   0000             ; first 512 bytes: bootloader from 0 to 445, MBR partition table from 446 to 511 (64 bytes)
0099   0000             ; up to 4 partitions, each 16 bytes long
0100   0000             ; MBR:
0101   0000             ; Byte | Description
0102   0000             ; -----|----------------------------
0103   0000             ; 0    | Boot flag (0x80 active, 0x00 inactive)
0104   0000             ; 1-3  | Start CHS (head, sector, cylinder)
0105   0000             ; 4    | Partition type (filesystem ID)
0106   0000             ;   0x83 = Linux native (ext2/3/4)
0107   0000             ;   0x07 = NTFS/exFAT
0108   0000             ;   0x0B = FAT32 CHS
0109   0000             ;   0x0C = FAT32 LBA
0110   0000             ;   0x05 = Extended partition
0111   0000             ; 5-7  | End CHS
0112   0000             ; 8-11 | Start LBA (little endian)
0113   0000             ; 12-15| Size in sectors (little endian)
0114   0000             ; 
0115   0000             ; 
0116   0000             ; SUPERBLOCK:
0117   0000             ; | Field                 | Description                              | Typical Size (bytes) | Notes                           |
0118   0000             ; | --------------------- | ---------------------------------------- | -------------------- | ------------------------------- |
0119   0000             ; | `s_inodes_count`      | Total number of inodes in the filesystem | 4                    | 32-bit unsigned int             |
0120   0000             ; | `s_blocks_count`      | Total number of data blocks              | 4                    | 32-bit unsigned int             |
0121   0000             ; | `s_free_inodes_count` | Number of free inodes                    | 4                    | 32-bit unsigned int             |
0122   0000             ; | `s_free_blocks_count` | Number of free blocks                    | 4                    | 32-bit unsigned int             |
0123   0000             ; | `s_first_data_block`  | Block number of the first data block     | 4                    | 32-bit unsigned int             |
0124   0000             ; | `s_log_block_size`    | Block size = 1024 << `s_log_block_size`  | 4                    | 32-bit unsigned int             |
0125   0000             ; | `s_inode_size`        | Size of each inode (in bytes)            | 2                    | 16-bit unsigned int             |
0126   0000             ; | `s_magic`             | Filesystem signature (`0xEF53`)          | 2                    | 16-bit unsigned int             |
0127   0000             ; | `s_mtime`             | Last mount time                          | 4                    | 32-bit unsigned int (Unix time) |
0128   0000             ; | `s_wtime`             | Last write time                          | 4                    | 32-bit unsigned int (Unix time) |
0129   0000             ; | `s_uuid`              | Unique ID of the filesystem              | 16                   | 128-bit UUID                    |
0130   0000             ; | `s_volume_name`       | Label of the filesystem                  | 16                   | Usually ASCII, padded           |
0131   0000             ; | `s_feature_flags`     | Compatibility flags                      | 4                    | 32-bit unsigned int             |
0132   0000             ; 
0133   0000             ; 
0134   0000             ; inode for root dir is #2, #0 and #1 not used
0135   0000             ; block size: 2048
0136   0000             
0137   0000             ; inode-table format:
0138   0000             ; | Field         | Size (bytes) | Description                                                                                  |
0139   0000             ; | ------------- | ------------ | -------------------------------------------------------------------------------------------- |
0140   0000             ; | `mode`        | 2            | File type and permissions                                                                    |
0141   0000             ; | `uid`         | 2            | Owner user ID                                                                                |
0142   0000             ; | `size`        | 4            | Size of the file in bytes                                                                    |
0143   0000             ; | `atime`       | 4            | Last access time (timestamp)                                                                 |
0144   0000             ; | `ctime`       | 4            | Creation time (timestamp)                                                                    |
0145   0000             ; | `mtime`       | 4            | Last modification time (timestamp)                                                           |
0146   0000             ; | `dtime`       | 4            | Deletion time (timestamp)                                                                    |
0147   0000             ; | `gid`         | 2            | Group ID                                                                                     |
0148   0000             ; | `links_count` | 2            | Number of hard links                                                                         |
0149   0000             ; | `blocks`      | 4            | Number of 512-byte blocks allocated                                                          |
0150   0000             ; | `flags`       | 4            | File flags                                                                                   |
0151   0000             ; | `block`       | 15 x 4 = 60  | Pointers to data blocks (12 direct, 1 single indirect, 1 double indirect, 1 triple indirect) |
0152   0000             
0153   0000             
0154   0000             ; file entry attributes
0155   0000             ; filename (24)
0156   0000             ; attributes (1)       :|0|0|file_type(3bits)|x|w|r|
0157   0000             ; lba (2)              : location of raw data for file entry, or dirid for directory entry
0158   0000             ; size (2)             : filesize
0159   0000             ; day (1)           
0160   0000             ; month (1)
0161   0000             ; year (1)
0162   0000             ; packet size = 32 bytes  : total packet size in bytes
0163   0000             
0164   0000             fst_entry_size      .equ 32  ; bytes
0165   0000             fst_files_per_sect  .equ (512 / fst_entry_size)
0166   0000             fst_files_per_dir   .equ (512 / fst_entry_size)
0167   0000             fst_nbr_directories .equ 64
0168   0000                                 ; 1 sector for header, the rest is for the list of files/dirs
0169   0000             fst_sectors_per_dir .equ (1 + (fst_entry_size * fst_files_per_dir / 512))    
0170   0000             fst_total_sectors   .equ (fst_sectors_per_dir * fst_nbr_directories)
0171   0000             fst_lba_start       .equ 32
0172   0000             fst_lba_end         .equ (fst_lba_start + fst_total_sectors - 1)
0173   0000             
0174   0000             fs_nbr_files        .equ (fst_nbr_directories * fst_files_per_dir)
0175   0000             fs_sectors_per_file .equ 32 ; the first sector is always a header with a null parameter (first byte)
0176   0000                                         ; so that we know which blocks are free or taken
0177   0000             fs_file_size        .equ (fs_sectors_per_file * 512)                  
0178   0000             fs_total_sectors    .equ (fs_nbr_files * fs_sectors_per_file)
0179   0000             fs_lba_start        .equ (fst_lba_end + 1)
0180   0000             fs_lba_end          .equ (fs_lba_start + fs_total_sectors - 1)
0181   0000             
0182   0000             root_id:            .equ fst_lba_start
0183   0000             
0184   0000             ; ------------------------------------------------------------------------------------------------------------------;
0185   0000             ; global system variables
0186   0000             ; ------------------------------------------------------------------------------------------------------------------;
0187   0000             
0188   0000             ; ------------------------------------------------------------------------------------------------------------------;
0189   0000             ; irq table
0190   0000             ; highest priority at lowest address
0191   0000             ; ------------------------------------------------------------------------------------------------------------------;
0192   0000 3C 00       .dw int_0_fdc
0193   0002 3D 00       .dw int_1
0194   0004 3E 00       .dw int_2
0195   0006 3F 00       .dw int_3
0196   0008 40 00       .dw int_4
0197   000A 41 00       .dw int_5
0198   000C 42 00       .dw int_6_timer
0199   000E 43 00       .dw int_7_uart0
0200   0010             
0201   0010             ; ------------------------------------------------------------------------------------------------------------------;
0202   0010             ; kernel reset vector
0203   0010             ; ------------------------------------------------------------------------------------------------------------------;
0204   0010 9D 11       .dw kernel_reset_vector
0205   0012             
0206   0012             ; ------------------------------------------------------------------------------------------------------------------;
0207   0012             ; exception vector table
0208   0012             ; total of 7 entries, starting at address $0012
0209   0012             ; ------------------------------------------------------------------------------------------------------------------;
0210   0012 52 04       .dw trap_privilege
0211   0014 6F 05       .dw trap_div_zero
0212   0016 7C 05       .dw trap_undef_opcode
0213   0018 00 00       .dw 0
0214   001A 00 00       .dw 0
0215   001C 00 00       .dw 0
0216   001E 00 00       .dw 0
0217   0020             
0218   0020             ; ------------------------------------------------------------------------------------------------------------------;
0219   0020             ; system call vector table
0220   0020             ; starts at address $0020
0221   0020             ; ------------------------------------------------------------------------------------------------------------------;
0222   0020 5E 04       .dw syscall_break
0223   0022 7D 05       .dw syscall_rtc
0224   0024 A0 06       .dw syscall_ide
0225   0026 60 07       .dw syscall_io
0226   0028 1D 08       .dw syscall_file_system
0227   002A EA 10       .dw syscall_create_proc
0228   002C 17 04       .dw syscall_list_procs
0229   002E AF 05       .dw syscall_datetime
0230   0030 D3 03       .dw syscall_reboot
0231   0032 B4 10       .dw syscall_pause_proc
0232   0034 DF 03       .dw syscall_resume_proc
0233   0036 71 10       .dw syscall_terminate_proc
0234   0038 9F 03       .dw syscall_system
0235   003A DE 00       .dw syscall_fdc
0236   003C             
0237   003C             ; ------------------------------------------------------------------------------------------------------------------;
0238   003C             ; system call aliases
0239   003C             ; ------------------------------------------------------------------------------------------------------------------;
0240   003C             sys_break            .equ 0
0241   003C             sys_rtc              .equ 1
0242   003C             sys_ide              .equ 2
0243   003C             sys_io               .equ 3
0244   003C             sys_filesystem       .equ 4
0245   003C             sys_create_proc      .equ 5
0246   003C             sys_list_proc        .equ 6
0247   003C             sys_datetime         .equ 7
0248   003C             sys_reboot           .equ 8
0249   003C             sys_pause_proc       .equ 9
0250   003C             sys_resume_proc      .equ 10
0251   003C             sys_terminate_proc   .equ 11
0252   003C             sys_system           .equ 12
0253   003C             sys_fdc              .equ 13
0254   003C             
0255   003C             ; aliases for individual 'al' options for FDC system calls
0256   003C             fdc_al_restore      .equ 0
0257   003C             fdc_al_step         .equ 1
0258   003C             fdc_al_step_in      .equ 2
0259   003C             fdc_al_step_out     .equ 3
0260   003C             fdc_al_seek         .equ 4
0261   003C             fdc_al_format_128   .equ 5
0262   003C             fdc_al_formatdisk_128   .equ 6
0263   003C             fdc_al_format_512   .equ 7
0264   003C             fdc_al_formatdisk_512   .equ 8
0265   003C             fdc_al_read_addr    .equ 9
0266   003C             fdc_al_read_track   .equ 10
0267   003C             fdc_al_read_sect    .equ 11
0268   003C             fdc_al_write_sect   .equ 12
0269   003C             fdc_al_force_int    .equ 13
0270   003C             fdc_al_status0      .equ 14
0271   003C             fdc_al_status1      .equ 15
0272   003C             
0273   003C             ; ------------------------------------------------------------------------------------------------------------------;
0274   003C             ; alias exports
0275   003C             ; ------------------------------------------------------------------------------------------------------------------;
0276   003C             .export text_org
0277   003C             .export sys_break
0278   003C             .export sys_rtc
0279   003C             .export sys_ide
0280   003C             .export sys_io
0281   003C             .export sys_filesystem
0282   003C             .export sys_create_proc
0283   003C             .export sys_list_proc
0284   003C             .export sys_datetime
0285   003C             .export sys_reboot
0286   003C             .export sys_pause_proc
0287   003C             .export sys_resume_proc
0288   003C             .export sys_terminate_proc
0289   003C             .export sys_system
0290   003C             .export sys_fdc
0291   003C             
0292   003C             .export _7seg_display
0293   003C             
0294   003C             .export _fdc_config        
0295   003C             .export _fdc_status_0      
0296   003C             .export _fdc_stat_cmd     
0297   003C             
0298   003C             ; exports of aliases for individual 'al' options for FDC system calls
0299   003C             .export fdc_al_restore
0300   003C             .export fdc_al_step
0301   003C             .export fdc_al_step_in
0302   003C             .export fdc_al_step_out
0303   003C             .export fdc_al_seek
0304   003C             .export fdc_al_format_128
0305   003C             .export fdc_al_formatdisk_128
0306   003C             .export fdc_al_format_512
0307   003C             .export fdc_al_formatdisk_512
0308   003C             .export fdc_al_read_addr
0309   003C             .export fdc_al_read_track
0310   003C             .export fdc_al_read_sect
0311   003C             .export fdc_al_write_sect
0312   003C             .export fdc_al_force_int
0313   003C             .export fdc_al_status0
0314   003C             .export fdc_al_status1
0315   003C             
0316   003C             ; ------------------------------------------------------------------------------------------------------------------;
0317   003C             ; irqs' code block
0318   003C             ; ------------------------------------------------------------------------------------------------------------------;
0319   003C             ; 5.25" floppy drive controller irq
0320   003C             int_0_fdc:
0321   003C 06            sysret
0322   003D             int_1:
0323   003D 06            sysret
0324   003E             int_2:
0325   003E 06            sysret
0326   003F             int_3:
0327   003F 06            sysret
0328   0040             int_4:
0329   0040 06            sysret
0330   0041             int_5:
0331   0041 06            sysret
0332   0042             
0333   0042             ; timer irq
0334   0042             int_6_timer:  
0335   0042 06            sysret
0336   0043             
0337   0043             ; ------------------------------------------------------------------------------------------------------------------;
0338   0043             ; uart0 interrupt
0339   0043             ; ------------------------------------------------------------------------------------------------------------------;
0340   0043             int_7_uart0:
0341   0043 D7            push a
0342   0044 DA            push d
0343   0045 E1            pushf
0344   0046 1D 80 FF      mov al, [_uart0_data]       ; get character
0345   0049 B9 03         cmp al, $03                 ; ctrl-c
0346   004B C6 6B 00      je ctrlc
0347   004E B9 1A         cmp al, $1a                 ; ctrl-z
0348   0050 C6 71 00      je ctrlz
0349   0053               ;mov [[d]], al              ; TODO: implement this double indirection instruction
0350   0053 3B 2F 19      mov d, fifo_in
0351   0056 FD 2A         mov d, [d]
0352   0058 3E            mov [d], al                 ; add to fifo
0353   0059 13            mov a, d
0354   005A 77            inc a
0355   005B AF 67 31      cmp a, fifo + _fifo_size     ; check if pointer reached the end of the fifo
0356   005E C7 64 00      jne int_7_continue
0357   0061 10 67 21      mov a, fifo  
0358   0064             int_7_continue:  
0359   0064 42 2F 19      mov [fifo_in], a            ; update fifo pointer
0360   0067 EE            popf
0361   0068 E7            pop d
0362   0069 E4            pop a  
0363   006A 06            sysret
0364   006B             ctrlc:
0365   006B 51 05 00      add sp, 5
0366   006E 0A 71 10      jmp syscall_terminate_proc
0367   0071             ctrlz:
0368   0071 51 05 00      add sp, 5
0369   0074 0A B4 10      jmp syscall_pause_proc      ; pause current process and go back to the shell
0370   0077             
0371   0077             ; ------------------------------------------------------------------------------------------------------------------;
0372   0077             ; ext2 file system
0373   0077             ; ------------------------------------------------------------------------------------------------------------------;
0374   0077             sys_mkfs:
0375   0077             ; master boot record
0376   0077 F2 BE 01 80   mov byte[_mbr], $80
0377   007B B8 BF 01 00   mov word[_mbr + 1], $0000
0377   007F 00 
0378   0080 F2 C1 01 00   mov byte[_mbr + 3], $00
0379   0084 F2 C2 01 83   mov byte[_mbr + 4], $83  ; ext2
0380   0088 B8 C3 01 00   mov word[_mbr + 5], $0000   ;end CHS
0380   008C 00 
0381   008D F2 C5 01 00   mov byte[_mbr + 7], $00    
0382   0091 B8 C6 01 01   mov word[_mbr + 8], 1       ; start LBA of kernel
0382   0095 00 
0383   0096 B8 C8 01 00   mov word[_mbr + 10], $0000
0383   009A 00 
0384   009B B8 CA 01 00   mov word[_mbr + 12], $0000       ; size = 65536 sectors = 32MB
0384   009F 00 
0385   00A0 B8 CB 01 01   mov word[_mbr + 13], $0001
0385   00A4 00 
0386   00A5             
0387   00A5             ; superblock
0388   00A5 B8 00 02 00   mov word[_superblock], 2048
0388   00A9 00 
0389   00AA B8 02 02 00   mov word[_superblock + 2], $0000
0389   00AE 00 
0390   00AF B8 04 02 00   mov word[_superblock + 4], $2800
0390   00B3 00 
0391   00B4 B8 06 02 00   mov word[_superblock + 6], $0000
0391   00B8 00 
0392   00B9             
0393   00B9             ; --- MBR signature ---
0394   00B9 B8 FE 01 55   mov word [510], $AA55          ; Must be present for BIOS to boot
0394   00BD 00 
0395   00BE             
0396   00BE             
0397   00BE             ; ------------------------------------------------------------------------------------------------------------------;
0398   00BE             ; floppy drive syscalls
0399   00BE             ; ------------------------------------------------------------------------------------------------------------------;
0400   00BE             ; data for formatting a floppy drive in single density mode (128 bytes per sector):
0401   00BE             ; fdc_40_ff:
0402   00BE             ;   .fill 40,  $ff    ; or 00                                                                                
0403   00BE             ; fdc_128_format_inner:
0404   00BE             ;   .fill 6,   $00    ;                                                                            <--|        
0405   00BE             ;   .fill 1,   $fe    ; id address mark                                                               |        
0406   00BE             ;   .fill 1,   $00    ; track number  0 thru 39                                                       |                    
0407   00BE             ;   .fill 1,   $00    ; side number 00 or 01                                                          |                
0408   00BE             ;   .fill 1,   $01    ; sector number  0x01 through 0x10                                              |                              
0409   00BE             ;   .fill 1,   $00    ; sector length                                                                 |                        
0410   00BE             ;   .fill 1,   $f7    ; 2 crc's written                                                               | write 16 times                 
0411   00BE             ;   .fill 11,  $ff    ; or 00                                                                         |                      
0412   00BE             ;   .fill 6,   $00    ;                                                                               |                        
0413   00BE             ;   .fill 1,   $fb    ; data address mark                                                             |                                  
0414   00BE             ;   .fill 128, $e5    ; data (ibm uses e5)                                                            |                                      
0415   00BE             ;   .fill 1,   $f7    ; 2 crc's written                                                               |                                                        
0416   00BE             ;   .fill 10,  $ff    ; or 00                                                                      <--|                                                  
0417   00BE             ; fdc_128_format_end:
0418   00BE             ;   .fill 369, $ff    ; or 00. continue writing until wd1770 interrupts out. approx 369 bytes.                                                                
0419   00BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0420   00BE             fdc_jmptbl:
0421   00BE EA 00         .dw syscall_fdc_restore
0422   00C0 F6 00         .dw syscall_fdc_step
0423   00C2 FE 00         .dw syscall_fdc_step_in
0424   00C4 06 01         .dw syscall_fdc_step_out
0425   00C6 0E 01         .dw syscall_fdc_seek
0426   00C8 1C 01         .dw syscall_fdc_format_128
0427   00CA 70 01         .dw syscall_fdc_formatdisk_128
0428   00CC 46 01         .dw syscall_fdc_format_512
0429   00CE B2 01         .dw syscall_fdc_formatdisk_512
0430   00D0 1A 01         .dw syscall_fdc_read_addr
0431   00D2 F4 01         .dw syscall_fdc_read_track
0432   00D4 23 02         .dw syscall_fdc_read_sect
0433   00D6 5B 02         .dw syscall_fdc_write_sect
0434   00D8 1B 01         .dw syscall_fdc_force_int
0435   00DA E2 00         .dw syscall_fdc_status0
0436   00DC E6 00         .dw syscall_fdc_status1
0437   00DE             syscall_fdc:
0438   00DE FD 0A BE 00   jmp [fdc_jmptbl + al]
0439   00E2             
0440   00E2             syscall_fdc_status0:
0441   00E2 1D C1 FF      mov al, [_fdc_status_0]
0442   00E5 06            sysret
0443   00E6             
0444   00E6             syscall_fdc_status1:
0445   00E6 1D C8 FF      mov al, [_fdc_stat_cmd]
0446   00E9 06            sysret
0447   00EA             
0448   00EA             syscall_fdc_restore:
0449   00EA 07 8C 02      call fdc_wait_not_busy
0450   00ED F2 C8 FF 0B   mov byte [_fdc_stat_cmd], %00001011
0451   00F1 F2 C9 FF 00   mov byte [_fdc_track], $00 ; reset track
0452   00F5 06            sysret
0453   00F6             
0454   00F6             syscall_fdc_step:
0455   00F6 07 8C 02      call fdc_wait_not_busy
0456   00F9 F2 C8 FF 3B   mov byte [_fdc_stat_cmd], %00111011
0457   00FD 06            sysret
0458   00FE             
0459   00FE             syscall_fdc_step_in:
0460   00FE 07 8C 02      call fdc_wait_not_busy
0461   0101 F2 C8 FF 53   mov byte [_fdc_stat_cmd], %01010011
0462   0105 06            sysret
0463   0106             
0464   0106             syscall_fdc_step_out:
0465   0106 07 8C 02      call fdc_wait_not_busy
0466   0109 F2 C8 FF 7B   mov byte [_fdc_stat_cmd], %01111011
0467   010D 06            sysret
0468   010E             
0469   010E             ; bl: desired track
0470   010E             syscall_fdc_seek:
0471   010E 07 8C 02      call fdc_wait_not_busy
0472   0111 FD 3D CB FF   mov [_fdc_data], bl ; set desired track to bl
0473   0115 F2 C8 FF 1B   mov byte [_fdc_stat_cmd], %00011011 ; seek command
0474   0119 06            sysret
0475   011A             
0476   011A             syscall_fdc_read_addr:
0477   011A 06            sysret
0478   011B             
0479   011B             syscall_fdc_force_int:
0480   011B 06            sysret
0481   011C             
0482   011C             ; when writing the actual code for formatting multiple tracks, remember to change the track number byte
0483   011C             ; in the ram formatting block because they are all set as 00 right now
0484   011C             ; bl: track number
0485   011C             syscall_fdc_format_128:
0486   011C 07 97 02      call fdc_format_mem_128
0487   011F 07 8C 02      call fdc_wait_not_busy
0488   0122 FD 3D C9 FF   mov [_fdc_track], bl
0489   0126 FD 4D 67 33   mov si, transient_area
0490   012A F2 C8 FF FA   mov byte [_fdc_stat_cmd], %11111010 ; write track command: {1111, 0: enable spin-up seq, 1: settling delay, 1: no write precompensation, 0}
0491   012E 07 6D 03      call fdc_wait_64us
0492   0131             fdc_format_drq_128:
0493   0131 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0494   0134 93 01         test al, $01                ; 4
0495   0136 C6 45 01      jz fdc_format_end_128           ; 8
0496   0139 93 02         test al, $02                ; 4
0497   013B C6 31 01      jz fdc_format_drq_128           ; 8
0498   013E F6            lodsb                       ; 7
0499   013F 3D CB FF      mov [_fdc_data], al         ; 10   
0500   0142 0A 31 01      jmp fdc_format_drq_128
0501   0145             fdc_format_end_128:
0502   0145 06            sysret
0503   0146             
0504   0146             ; when writing the actual code for formatting multiple tracks, remember to change the track number byte
0505   0146             ; in the ram formatting block because they are all set as 00 right now
0506   0146             ; bl: track number
0507   0146             syscall_fdc_format_512:
0508   0146 07 02 03      call fdc_format_mem_512
0509   0149 07 8C 02      call fdc_wait_not_busy
0510   014C FD 3D C9 FF   mov [_fdc_track], bl
0511   0150 FD 4D 67 33   mov si, transient_area
0512   0154 F2 C8 FF FA   mov byte [_fdc_stat_cmd], %11111010 ; write track command: {1111, 0: enable spin-up seq, 1: settling delay, 1: no write precompensation, 0}
0513   0158 07 6D 03      call fdc_wait_64us
0514   015B             fdc_format_drq_512:
0515   015B 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0516   015E 93 01         test al, $01                ; 4
0517   0160 C6 6F 01      jz fdc_format_end_512           ; 8
0518   0163 93 02         test al, $02                ; 4
0519   0165 C6 5B 01      jz fdc_format_drq_512           ; 8
0520   0168 F6            lodsb                       ; 7
0521   0169 3D CB FF      mov [_fdc_data], al         ; 10   
0522   016C 0A 5B 01      jmp fdc_format_drq_512
0523   016F             fdc_format_end_512:
0524   016F 06            sysret
0525   0170             
0526   0170             syscall_fdc_formatdisk_128:
0527   0170 2E 00         mov bl, 0
0528   0172             fdc_formatdisk128_l0:
0529   0172 07 97 02      call fdc_format_mem_128
0530   0175 07 8C 02      call fdc_wait_not_busy
0531   0178 FD 3D C9 FF   mov [_fdc_track], bl
0532   017C FD 4D 67 33   mov si, transient_area
0533   0180 F2 C8 FF FA   mov byte [_fdc_stat_cmd], %11111010 ; write track command
0534   0184 07 6D 03      call fdc_wait_64us
0535   0187             fdc_formatdisk_drq_128:
0536   0187 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0537   018A 93 01         test al, $01                ; 4
0538   018C C6 9B 01      jz fdc_formatdisk_end_128           ; 8
0539   018F 93 02         test al, $02                ; 4
0540   0191 C6 87 01      jz fdc_formatdisk_drq_128           ; 8
0541   0194 F6            lodsb                       ; 7
0542   0195 3D CB FF      mov [_fdc_data], al         ; 10   
0543   0198 0A 87 01      jmp fdc_formatdisk_drq_128
0544   019B             fdc_formatdisk_end_128:
0545   019B 07 8C 02      call fdc_wait_not_busy
0546   019E D8            push b
0547   019F 26 08 00      mov b, 8
0548   01A2 07 74 03      call wait_xs
0549   01A5 F2 C8 FF 53   mov byte [_fdc_stat_cmd], %01010011  ; step in
0550   01A9 E5            pop b
0551   01AA 6C 01         add bl, 1
0552   01AC C1 28         cmp bl, 40
0553   01AE C7 72 01      jne fdc_formatdisk128_l0
0554   01B1 06            sysret
0555   01B2             
0556   01B2             syscall_fdc_formatdisk_512:
0557   01B2 2E 00         mov bl, 0
0558   01B4             fdc_formatdisk512_l0:
0559   01B4 07 02 03      call fdc_format_mem_512
0560   01B7 07 8C 02      call fdc_wait_not_busy
0561   01BA FD 3D C9 FF   mov [_fdc_track], bl
0562   01BE FD 4D 67 33   mov si, transient_area
0563   01C2 F2 C8 FF F2   mov byte [_fdc_stat_cmd], %11110010 ; write track command
0564   01C6 07 6D 03      call fdc_wait_64us
0565   01C9             fdc_formatdisk_drq_512:
0566   01C9 1D C8 FF      mov al, [_fdc_stat_cmd]     ; 10
0567   01CC 93 01         test al, $01                ; 4
0568   01CE C6 DD 01      jz fdc_formatdisk_end_512           ; 8
0569   01D1 93 02         test al, $02                ; 4
0570   01D3 C6 C9 01      jz fdc_formatdisk_drq_512           ; 8
0571   01D6 F6            lodsb                       ; 7
0572   01D7 3D CB FF      mov [_fdc_data], al         ; 10   
0573   01DA 0A C9 01      jmp fdc_formatdisk_drq_512
0574   01DD             fdc_formatdisk_end_512:
0575   01DD 07 8C 02      call fdc_wait_not_busy
0576   01E0 D8            push b
0577   01E1 26 08 00      mov b, 8
0578   01E4 07 74 03      call wait_xs
0579   01E7 F2 C8 FF 53   mov byte [_fdc_stat_cmd], %01010011   ; step in
0580   01EB E5            pop b
0581   01EC 6C 01         add bl, 1
0582   01EE C1 28         cmp bl, 40
0583   01F0 C7 B4 01      jne fdc_formatdisk512_l0
0584   01F3 06            sysret
0585   01F4             
0586   01F4             ; di : destination in user space
0587   01F4             ; a  : returns number of read bytes
0588   01F4             syscall_fdc_read_track:
0589   01F4 07 8C 02      call fdc_wait_not_busy
0590   01F7 E3            push di
0591   01F8 FD 4F 67 33   mov di, transient_area
0592   01FC F2 C8 FF E8   mov byte [_fdc_stat_cmd], %11101000
0593   0200 07 6D 03      call fdc_wait_64us
0594   0203             fdc_read_track_l0: ; for each byte, we need to wait for drq to be high
0595   0203 1D C8 FF      mov al, [_fdc_stat_cmd]      ; 
0596   0206 93 01         test al, $01                ; check busy bit
0597   0208 C6 17 02      jz fdc_read_track_end
0598   020B 93 02         test al, $02                ; check drq bit
0599   020D C6 03 02      jz fdc_read_track_l0
0600   0210 1D CB FF      mov al, [_fdc_data]     ; 
0601   0213 F7            stosb
0602   0214 0A 03 02      jmp fdc_read_track_l0
0603   0217             ;we need to check if writing to data reg causes a spurious read. so lets check inside the writing loop, how many times we actually write the bytes
0604   0217             ;say the 40 byte loop. if we find that we only write ~20 times, then this indcates this problem.
0605   0217             ;because for every write, if it also reads, then that clears drq, so we need to wait for next drq.
0606   0217             fdc_read_track_end:
0607   0217 50            mov a, di
0608   0218 5F 67 33      sub a, transient_area
0609   021B F0            pop di
0610   021C FD 4D 67 33   mov si, transient_area
0611   0220 39            mov c, a  ; copy track over to user space
0612   0221 03            store
0613   0222 06            sysret
0614   0223             
0615   0223             ; sector in bl
0616   0223             ; track in bh
0617   0223             ; di = user space destination
0618   0223             syscall_fdc_read_sect:
0619   0223 07 8C 02      call fdc_wait_not_busy
0620   0226 E3            push di
0621   0227 FD 3D CA FF   mov [_fdc_sector], bl
0622   022B 30            mov bl, bh
0623   022C FD 3D C9 FF   mov [_fdc_track], bl
0624   0230 F2 C8 FF 88   mov byte [_fdc_stat_cmd], %10001000
0625   0234 07 6D 03      call fdc_wait_64us
0626   0237 FD 4F 67 33   mov di, transient_area
0627   023B             fdc_read_sect_l0: ; for each byte, we need to wait for drq to be high
0628   023B 1D C8 FF      mov al, [_fdc_stat_cmd]      ; read lost data flag 10+3+5+8+5+8
0629   023E 93 01         test al, $01                ; check drq bit
0630   0240 C6 4F 02      jz fdc_read_sect_end
0631   0243 93 02         test al, $02                ; check drq bit
0632   0245 C6 3B 02      jz fdc_read_sect_l0
0633   0248 1D CB FF      mov al, [_fdc_data]     ; 
0634   024B F7            stosb
0635   024C 0A 3B 02      jmp fdc_read_sect_l0
0636   024F             fdc_read_sect_end:
0637   024F 50            mov a, di
0638   0250 5F 67 33      sub a, transient_area
0639   0253 F0            pop di
0640   0254 FD 4D 67 33   mov si, transient_area
0641   0258 39            mov c, a  ; copy sector over to user space
0642   0259 03            store
0643   025A 06            sysret
0644   025B             
0645   025B             ; sector size in c
0646   025B             ; sector in bl
0647   025B             ; track in bh
0648   025B             ; data pointer in si
0649   025B             syscall_fdc_write_sect:
0650   025B 07 8C 02      call fdc_wait_not_busy
0651   025E FD 3D CA FF   mov [_fdc_sector], bl
0652   0262 30            mov bl, bh
0653   0263 FD 3D C9 FF   mov [_fdc_track], bl
0654   0267 FD 4F 67 33   mov di, transient_area    ; si = data source, di = destination 
0655   026B 04            load                    ; transfer data to kernel space!
0656   026C FD 4D 67 33   mov si, transient_area
0657   0270 F2 C8 FF AA   mov byte [_fdc_stat_cmd], %10101010            ; 101, 0:single sector, 1: disable spinup, 0: no delay, 1: no precomp, 0: normal data mark
0658   0274 07 6D 03      call fdc_wait_64us
0659   0277             fdc_write_sect_l0: ; for each byte, we need to wait for drq to be high
0660   0277 1D C8 FF      mov al, [_fdc_stat_cmd]         ; 10
0661   027A 93 01         test al, $01                    ; 4
0662   027C C6 8B 02      jz fdc_write_sect_end           ; 8
0663   027F 93 02         test al, $02                    ; 4
0664   0281 C6 77 02      jz fdc_write_sect_l0            ; 8
0665   0284 F6            lodsb                           ; 7
0666   0285 3D CB FF      mov [_fdc_data], al             ; 10   
0667   0288 0A 77 02      jmp fdc_write_sect_l0
0668   028B             fdc_write_sect_end:
0669   028B 06            sysret
0670   028C             
0671   028C             fdc_wait_not_busy:
0672   028C DB            push al
0673   028D             fdc_wait_not_busy_l0:
0674   028D 1D C8 FF      mov al, [_fdc_stat_cmd]   
0675   0290 93 01         test al, $01               
0676   0292 C7 8D 02      jnz fdc_wait_not_busy_l0          
0677   0295 E8            pop al
0678   0296 09            ret
0679   0297             
0680   0297             ; track number in bl
0681   0297             fdc_format_mem_128:
0682   0297 3B 01 00      mov d, 1
0683   029A FD 4F 67 33   mov di, transient_area
0684   029E             ; 40 * FF
0685   029E 38 28 00      mov c, 40
0686   02A1 19 FF         mov al, $ff
0687   02A3             fdc_l0: 
0688   02A3 F7            stosb
0689   02A4 7E            dec c
0690   02A5 C7 A3 02      jnz fdc_l0
0691   02A8             ; 6 * 00
0692   02A8             fdc_inner_loop:
0693   02A8 38 06 00      mov c, 6
0694   02AB 19 00         mov al, $00
0695   02AD             fdc_l1:
0696   02AD F7            stosb
0697   02AE 7E            dec c
0698   02AF C7 AD 02      jnz fdc_l1
0699   02B2             ; FE address mark
0700   02B2             fdc_l2:
0701   02B2 19 FE         mov al, $fe
0702   02B4 F7            stosb
0703   02B5             ; track number
0704   02B5             fdc_l3:
0705   02B5 1B            mov al, bl  ; track number in bl
0706   02B6 F7            stosb
0707   02B7             ; side number
0708   02B7             fdc_l4:
0709   02B7 19 00         mov al, $00
0710   02B9 F7            stosb
0711   02BA             ; sector number
0712   02BA             fdc_l5:
0713   02BA 13            mov a, d
0714   02BB F7            stosb
0715   02BC             ; sector length 128 bytes
0716   02BC             fdc_l6:
0717   02BC 19 00         mov al, $00
0718   02BE F7            stosb
0719   02BF             ; 2 crc's
0720   02BF             fdc_l7:
0721   02BF 19 F7         mov al, $f7
0722   02C1 F7            stosb
0723   02C2             ; 11 times $ff
0724   02C2 38 0B 00      mov c, 11
0725   02C5 19 FF         mov al, $ff
0726   02C7             fdc_l8:
0727   02C7 F7            stosb
0728   02C8 7E            dec c
0729   02C9 C7 C7 02      jnz fdc_l8
0730   02CC             ; 6 times 00
0731   02CC 38 06 00      mov c, 6
0732   02CF 19 00         mov al, $00
0733   02D1             fdc_l9:
0734   02D1 F7            stosb
0735   02D2 7E            dec c
0736   02D3 C7 D1 02      jnz fdc_l9
0737   02D6             ; FB data address mark
0738   02D6 19 FB         mov al, $fb
0739   02D8             fdc_l10:
0740   02D8 F7            stosb
0741   02D9             ; 128 bytes sector data
0742   02D9 38 80 00      mov c, 128
0743   02DC 19 E5         mov al, $E5
0744   02DE             fdc_l11:
0745   02DE F7            stosb
0746   02DF 7E            dec c
0747   02E0 C7 DE 02      jnz fdc_l11
0748   02E3             ; 2 crc's
0749   02E3             fdc_l12:
0750   02E3 19 F7         mov al, $f7
0751   02E5 F7            stosb
0752   02E6             ; 10 * $FF
0753   02E6 38 0A 00      mov c, 10
0754   02E9 19 FF         mov al, $ff
0755   02EB             fdc_l13:
0756   02EB F7            stosb
0757   02EC 7E            dec c
0758   02ED C7 EB 02      jnz fdc_l13
0759   02F0             ; check whether we did this 16 times
0760   02F0 79            inc d
0761   02F1 C5 11 00      cmp d, 17
0762   02F4 C7 A8 02      jne fdc_inner_loop
0763   02F7             ; 500 bytes of FF for end filler. wd1770 writes these until it finishes, so the number varies. usually it writes ~450 bytes
0764   02F7 38 F4 01      mov c, 500
0765   02FA 19 FF         mov al, $ff
0766   02FC             fdc_format_footer:
0767   02FC             fdc_footer_drq_loop:
0768   02FC F7            stosb
0769   02FD 7E            dec c
0770   02FE C7 FC 02      jnz fdc_footer_drq_loop
0771   0301 09            ret
0772   0302             
0773   0302             ; track number in bl
0774   0302             fdc_format_mem_512:
0775   0302 3B 01 00      mov d, 1
0776   0305 FD 4F 67 33   mov di, transient_area
0777   0309             ; 40 * FF
0778   0309 38 28 00      mov c, 40
0779   030C 19 FF         mov al, $ff
0780   030E             fdc_512_l0: 
0781   030E F7            stosb
0782   030F 7E            dec c
0783   0310 C7 0E 03      jnz fdc_512_l0
0784   0313             ; 6 * 00
0785   0313             fdc_512_inner_loop:
0786   0313 38 06 00      mov c, 6
0787   0316 19 00         mov al, $00
0788   0318             fdc_512_l1:
0789   0318 F7            stosb
0790   0319 7E            dec c
0791   031A C7 18 03      jnz fdc_512_l1
0792   031D             ; FE address mark
0793   031D             fdc_512_l2:
0794   031D 19 FE         mov al, $fe
0795   031F F7            stosb
0796   0320             ; track number
0797   0320             fdc_512_l3:
0798   0320 1B            mov al, bl ; track number was in bl
0799   0321 F7            stosb
0800   0322             ; side number
0801   0322             fdc_512_l4:
0802   0322 19 00         mov al, $00
0803   0324 F7            stosb
0804   0325             ; sector number
0805   0325             fdc_512_l5:
0806   0325 13            mov a, d
0807   0326 F7            stosb
0808   0327             ; sector length 512 bytes
0809   0327             fdc_512_l6:
0810   0327 19 02         mov al, $02
0811   0329 F7            stosb
0812   032A             ; 2 crc's
0813   032A             fdc_512_l7:
0814   032A 19 F7         mov al, $f7
0815   032C F7            stosb
0816   032D             ; 11 times $ff
0817   032D 38 0B 00      mov c, 11
0818   0330 19 FF         mov al, $ff
0819   0332             fdc_512_l8:
0820   0332 F7            stosb
0821   0333 7E            dec c
0822   0334 C7 32 03      jnz fdc_512_l8
0823   0337             ; 6 times 00
0824   0337 38 06 00      mov c, 6
0825   033A 19 00         mov al, $00
0826   033C             fdc_512_l9:
0827   033C F7            stosb
0828   033D 7E            dec c
0829   033E C7 3C 03      jnz fdc_512_l9
0830   0341             ; FB data address mark
0831   0341 19 FB         mov al, $fb
0832   0343             fdc_512_l10:
0833   0343 F7            stosb
0834   0344             ; 128 bytes sector data
0835   0344 38 00 02      mov c, 512
0836   0347 19 E5         mov al, $E5
0837   0349             fdc_512_l11:
0838   0349 F7            stosb
0839   034A 7E            dec c
0840   034B C7 49 03      jnz fdc_512_l11
0841   034E             ; 2 crc's
0842   034E             fdc_512_l12:
0843   034E 19 F7         mov al, $f7
0844   0350 F7            stosb
0845   0351             ; 10 * $FF
0846   0351 38 0A 00      mov c, 10
0847   0354 19 FF         mov al, $ff
0848   0356             fdc_512_l13:
0849   0356 F7            stosb
0850   0357 7E            dec c
0851   0358 C7 56 03      jnz fdc_512_l13
0852   035B             ; check whether we did this 16 times
0853   035B 79            inc d
0854   035C C5 06 00      cmp d, 6
0855   035F C7 13 03      jne fdc_512_inner_loop
0856   0362             ; 500 bytes of FF for end filler. wd1770 writes these until it finishes, so the number varies. usually it writes ~450 bytes
0857   0362 38 F4 01      mov c, 500
0858   0365 19 FF         mov al, $ff
0859   0367             fdc_512_format_footer:
0860   0367             fdc_512_footer_drq_loop:
0861   0367 F7            stosb
0862   0368 7E            dec c
0863   0369 C7 67 03      jnz fdc_512_footer_drq_loop
0864   036C 09            ret
0865   036D             
0866   036D             ; fetch is 2 cycles long when 'display_reg_load' is false.
0867   036D             ; 64us amounts to 160 cycles of the 2.5mhz clock
0868   036D             ; call u16 is 14 cycles long
0869   036D             ; 160 - 5 - 14 = 
0870   036D             fdc_wait_64us:
0871   036D 3A 0D         mov cl, 13                       ; 5 cycles
0872   036F             fdc_wait_64_loop:
0873   036F 81            dec cl                           ; 3 cycles
0874   0370 C7 6F 03      jnz fdc_wait_64_loop             ; 8 cycles
0875   0373 09            ret
0876   0374             
0877   0374             ; number of seconds in b
0878   0374             wait_xs:
0879   0374 C0 00 00      cmp b, 0
0880   0377 C6 82 03      je wait_xs_end
0881   037A 07 83 03      call wait_1s
0882   037D FD 7D         dec b
0883   037F 0A 74 03      jmp wait_xs
0884   0382             wait_xs_end:
0885   0382 09            ret
0886   0383             
0887   0383             wait_1s:
0888   0383 DB            push al
0889   0384 D9            push c
0890   0385 19 03         mov al, 3
0891   0387             wait_1s_l0:
0892   0387 38 FF FF      mov c, 65535                       
0893   038A             wait_1s_l1:
0894   038A 7E            dec c        ; 4
0895   038B C7 8A 03      jnz wait_1s_l1   ; 8
0896   038E 80            dec al
0897   038F C7 87 03      jnz wait_1s_l0
0898   0392 E6            pop c
0899   0393 E8            pop al
0900   0394 09            ret
0901   0395             
0902   0395             ; ------------------------------------------------------------------------------------------------------------------;
0903   0395             ; system syscalls
0904   0395             ; ------------------------------------------------------------------------------------------------------------------;
0905   0395             system_jmptbl:
0906   0395 CB 03         .dw system_uname
0907   0397 D2 03         .dw system_whoami
0908   0399 A5 03         .dw system_poke
0909   039B A8 03         .dw system_bootloader_install
0910   039D A3 03         .dw system_peek
0911   039F             syscall_system:
0912   039F FD 0A 95 03   jmp [system_jmptbl + al]
0913   03A3             
0914   03A3             ; param register address in register d
0915   03A3             ; param value in register bl
0916   03A3             system_peek:
0917   03A3 32            mov bl, [d]
0918   03A4 06            sysret
0919   03A5             
0920   03A5             ; param register address in register d
0921   03A5             ; param value in register bl
0922   03A5             system_poke:
0923   03A5 FD 3E         mov [d], bl
0924   03A7 06            sysret
0925   03A8             
0926   03A8             ; kernel LBA address in 'b'
0927   03A8             system_bootloader_install:
0928   03A8 D8            push b
0929   03A9 26 00 00      mov b, 0
0930   03AC 38 00 00      mov c, 0
0931   03AF 22 01         mov ah, $01                 ; 1 sector
0932   03B1 3B 67 33      mov d, transient_area
0933   03B4 07 CF 06      call ide_read_sect          ; read sector
0934   03B7 E5            pop b
0935   03B8 FD 44 FE 01   mov [d + 510], b            ; update LBA address
0936   03BC 26 00 00      mov b, 0
0937   03BF 38 00 00      mov c, 0
0938   03C2 22 01         mov ah, $01                 ; 1 sector
0939   03C4 3B 67 33      mov d, transient_area
0940   03C7 07 F5 06      call ide_write_sect         ; write sector
0941   03CA 06            sysret
0942   03CB             
0943   03CB             system_uname:
0944   03CB 3B 40 19      mov d, s_uname
0945   03CE 07 F9 13      call _puts
0946   03D1 06            sysret
0947   03D2             
0948   03D2             system_whoami:
0949   03D2 06            sysret
0950   03D3             
0951   03D3             ; reboot system
0952   03D3             syscall_reboot:
0953   03D3 FD D7 FF FF   push word $ffff 
0954   03D7 FD DB 00      push byte %00000000             ; dma_ack = 0, interrupts disabled, mode = supervisor, paging = off, halt=0, display_reg_load=0, dir=0
0955   03DA FD D7 C0 01   push word bios_reset_vector     ; and then push reset vector of the shell to the stack
0956   03DE 06            sysret
0957   03DF             
0958   03DF             ;------------------------------------------------------------------------------------------------------;;
0959   03DF             ; switch to another process
0960   03DF             ; inputs:
0961   03DF             ; al = new process number
0962   03DF             ;------------------------------------------------------------------------------------------------------;;
0963   03DF             syscall_resume_proc:
0964   03DF FD 78         mov g, a                            ; save the process number
0965   03E1 4B            pusha                               ; save all registers into kernel stack
0966   03E2 22 00         mov ah, 0
0967   03E4 1D 2A 19      mov al, [active_proc_index]
0968   03E7 FD 99         shl a              ; x2
0969   03E9 B7 67 11      mov a, [proc_table_convert + a]     ; get process state start index
0970   03EC 4F            mov di, a
0971   03ED 48            mov a, sp
0972   03EE 77            inc a
0973   03EF 4D            mov si, a
0974   03F0 38 14 00      mov c, 20
0975   03F3 FD F5         rep movsb                           ; save process state!
0976   03F5             ; restore kernel stack position to point before interrupt arrived
0977   03F5 51 14 00      add sp, 20
0978   03F8             ; now load the new process number!
0979   03F8 FD 12         mov a, g                            ; retrieve the process number argument that was saved in the beginning
0980   03FA 3D 2A 19      mov [active_proc_index], al         ; set new active proc
0981   03FD             ; calculate lut entry for next process
0982   03FD 22 00         mov ah, 0
0983   03FF FD 99         shl a                               ; x2
0984   0401 B7 67 11      mov a, [proc_table_convert + a]     ; get process state start index  
0985   0404 4D            mov si, a                           ; source is proc state block
0986   0405 48            mov a, sp
0987   0406 5F 13 00      sub a, 19
0988   0409 4F            mov di, a                           ; destination is kernel stack
0989   040A             ; restore sp
0990   040A 7D            dec a
0991   040B 47            mov sp, a
0992   040C 38 14 00      mov c, 20
0993   040F FD F5         rep movsb
0994   0411             ; set vm process
0995   0411 1D 2A 19      mov al, [active_proc_index]
0996   0414 01            setptb
0997   0415 4C            popa
0998   0416 06            sysret
0999   0417             
1000   0417             ;------------------------------------------------------------------------------------------------------;;
1001   0417             ; list processes
1002   0417             ;------------------------------------------------------------------------------------------------------;;
1003   0417             syscall_list_procs:
1004   0417 3B 61 19      mov d, s_ps_header
1005   041A 07 F9 13      call _puts
1006   041D 3B D8 1C      mov d, proc_availab_table + 1
1007   0420 38 01 00      mov c, 1
1008   0423             list_procs_l0:  
1009   0423 BD 01         cmp byte[d], 1
1010   0425 C7 49 04      jne list_procs_next
1011   0428 2D            mov b, d
1012   0429 61 D7 1C      sub b, proc_availab_table
1013   042C FD 9F 05      shl b, 5
1014   042F DA            push d
1015   0430 D8            push b
1016   0431 28            mov b, c
1017   0432 07 99 14      call print_u8x
1018   0435 22 20         mov ah, ' '
1019   0437 07 CD 12      call _putchar
1020   043A 07 CD 12      call _putchar
1021   043D E5            pop b
1022   043E 74            mov d, b
1023   043F 58 E7 1C      add d, proc_names
1024   0442 07 F9 13      call _puts
1025   0445 07 A6 13      call printnl
1026   0448 E7            pop d
1027   0449             list_procs_next:
1028   0449 79            inc d
1029   044A 78            inc c
1030   044B C2 09 00      cmp c, 9
1031   044E C7 23 04      jne list_procs_l0
1032   0451             list_procs_end:
1033   0451 06            sysret
1034   0452             
1035   0452             ; ------------------------------------------------------------------------------------------------------------------;
1036   0452             ; exceptions code block
1037   0452             ; ------------------------------------------------------------------------------------------------------------------;
1038   0452             ; privilege exception
1039   0452             ; ------------------------------------------------------------------------------------------------------------------;
1040   0452             trap_privilege:
1041   0452 0A D3 03      jmp syscall_reboot
1042   0455 DA            push d
1043   0456 3B 88 1A      mov d, s_priviledge
1044   0459 07 F9 13      call _puts
1045   045C E7            pop d
1046   045D 06            sysret
1047   045E             
1048   045E             ; ------------------------------------------------------------------------------------------------------------------;
1049   045E             ; breakpoint
1050   045E             ; important: values in the stack are being pushed in big endian. i.e.: msb at low address
1051   045E             ; and lsb at high address. *** need to correct this in the microcode and make it little endian again ***
1052   045E             ; ------------------------------------------------------------------------------------------------------------------;
1053   045E             syscall_break:
1054   045E 4B            pusha
1055   045F             syscall_break_prompt:
1056   045F 3B 19 05      mov d, s_break1
1057   0462 07 F9 13      call _puts
1058   0465 07 A6 13      call printnl
1059   0468 07 FB 14      call scan_u16d
1060   046B AF 00 00      cmp a, 0
1061   046E C6 79 04      je syscall_break_regs
1062   0471 AF 01 00      cmp a, 1
1063   0474 C6 9C 04      je syscall_break_mem
1064   0477             syscall_break_end:  
1065   0477 4C            popa
1066   0478 06            sysret
1067   0479             syscall_break_regs:
1068   0479 48            mov a, sp
1069   047A 53 0E 00      add a, 14               ; back-track 7 registers
1070   047D 3C            mov d, a
1071   047E 3A 07         mov cl, 7
1072   0480             syscall_regs_l0:
1073   0480 2A            mov b, [d]
1074   0481 FD AB         swp b
1075   0483 07 55 14      call print_u16x         ; print register value
1076   0486 07 A6 13      call printnl
1077   0489 63 02 00      sub d, 2
1078   048C 71 01         sub cl, 1
1079   048E C3 00         cmp cl, 0
1080   0490 C7 80 04      jne syscall_regs_l0
1081   0493 0A 5F 04      jmp syscall_break_prompt
1082   0496 07 A6 13      call printnl
1083   0499 0A 5F 04      jmp syscall_break_prompt
1084   049C             syscall_break_mem:
1085   049C 07 A6 13      call printnl
1086   049F 07 77 14      call scan_u16x
1087   04A2 4D            mov si, a               ; data source from user space
1088   04A3 FD 4F 67 31   mov di, scrap_sector    ; destination in kernel space
1089   04A7 38 00 02      mov c, 512
1090   04AA 04            load                    ; transfer data to kernel space!
1091   04AB 3B 67 31      mov d, scrap_sector     ; dump pointer in d
1092   04AE 38 00 00      mov c, 0
1093   04B1             dump_loop:
1094   04B1 84            mov al, cl
1095   04B2 87 0F         and al, $0f
1096   04B4 C6 02 05      jz print_base
1097   04B7             back:
1098   04B7 1E            mov al, [d]             ; read byte
1099   04B8 2F            mov bl, al
1100   04B9 07 99 14      call print_u8x
1101   04BC 10 00 20      mov a, $2000
1102   04BF 05 03         syscall sys_io          ; space
1103   04C1 84            mov al, cl
1104   04C2 87 0F         and al, $0f
1105   04C4 B9 0F         cmp al, $0f
1106   04C6 C6 D7 04      je print_ascii
1107   04C9             back1:
1108   04C9 79            inc d
1109   04CA 78            inc c
1110   04CB C2 00 02      cmp c, 512
1111   04CE C7 B1 04      jne dump_loop
1112   04D1 07 A6 13      call printnl
1113   04D4 0A 5F 04      jmp syscall_break_prompt  ; go to syscall_break return point
1114   04D7             print_ascii:
1115   04D7 10 00 20      mov a, $2000
1116   04DA 05 03         syscall sys_io
1117   04DC 63 10 00      sub d, 16
1118   04DF 26 10 00      mov b, 16
1119   04E2             print_ascii_l:
1120   04E2 79            inc d
1121   04E3 1E            mov al, [d]               ; read byte
1122   04E4 B9 20         cmp al, $20
1123   04E6 C8 EE 04      jlu dot
1124   04E9 B9 7E         cmp al, $7e
1125   04EB D0 F6 04      jleu ascii
1126   04EE             dot:
1127   04EE 10 00 2E      mov a, $2e00
1128   04F1 05 03         syscall sys_io
1129   04F3 0A FB 04      jmp ascii_continue
1130   04F6             ascii:
1131   04F6 23            mov ah, al
1132   04F7 19 00         mov al, 0
1133   04F9 05 03         syscall sys_io
1134   04FB             ascii_continue:
1135   04FB FD A9 E2 04   loopb print_ascii_l
1136   04FF 0A C9 04      jmp back1
1137   0502             print_base:
1138   0502 07 A6 13      call printnl
1139   0505 2D            mov b, d
1140   0506 61 67 31      sub b, scrap_sector      ; remove this later and fix address bases which display incorrectly
1141   0509 07 55 14      call print_u16x          ; display row
1142   050C 10 00 3A      mov a, $3a00
1143   050F 05 03         syscall sys_io
1144   0511 10 00 20      mov a, $2000
1145   0514 05 03         syscall sys_io
1146   0516 0A B7 04      jmp back
1147   0519             
1148   0519             s_break1:  
1149   0519 0A 64 65 62   .db "\ndebugger entry point.\n"
1149   051D 75 67 67 65 
1149   0521 72 20 65 6E 
1149   0525 74 72 79 20 
1149   0529 70 6F 69 6E 
1149   052D 74 2E 0A 
1150   0530 30 2E 20 73   .db "0. show registers\n"
1150   0534 68 6F 77 20 
1150   0538 72 65 67 69 
1150   053C 73 74 65 72 
1150   0540 73 0A 
1151   0542 31 2E 20 73   .db "1. show 512b ram block\n"
1151   0546 68 6F 77 20 
1151   054A 35 31 32 62 
1151   054E 20 72 61 6D 
1151   0552 20 62 6C 6F 
1151   0556 63 6B 0A 
1152   0559 32 2E 20 63   .db "2. continue execution", 0
1152   055D 6F 6E 74 69 
1152   0561 6E 75 65 20 
1152   0565 65 78 65 63 
1152   0569 75 74 69 6F 
1152   056D 6E 00 
1153   056F             
1154   056F             ; ------------------------------------------------------------------------------------------------------------------;
1155   056F             ; divide by zero exception
1156   056F             ; ------------------------------------------------------------------------------------------------------------------;
1157   056F             trap_div_zero:
1158   056F D7            push a
1159   0570 DA            push d
1160   0571 E1            pushf
1161   0572 3B 9F 1A      mov d, s_divzero
1162   0575 07 F9 13      call _puts
1163   0578 EE            popf
1164   0579 E7            pop d
1165   057A E4            pop a
1166   057B 06            sysret ; enable interrupts
1167   057C             
1168   057C             ; ------------------------------------------------------------------------------------------------------------------;
1169   057C             ; undefined opcode exception
1170   057C             ; ------------------------------------------------------------------------------------------------------------------;
1171   057C             trap_undef_opcode:
1172   057C 06            sysret
1173   057D             
1174   057D             ; ------------------------------------------------------------------------------------------------------------------;
1175   057D             ; real-time clock services syscall
1176   057D             ; rtc i/o bank = ffa0 to ffaf
1177   057D             ; ffa0 to ffa7 is scratch ram
1178   057D             ; control register at $ffa8 [ w | r | s | cal4..cal0 ]
1179   057D             ; al = 0..6 -> get
1180   057D             ; al = 7..d -> set
1181   057D             ; ------------------------------------------------------------------------------------------------------------------;
1182   057D             syscall_rtc:
1183   057D DB            push al
1184   057E DA            push d
1185   057F B9 06         cmp al, 6
1186   0581 D1 96 05      jgu syscall_rtc_set
1187   0584             syscall_rtc_get:
1188   0584 6A A9         add al, $a9             ; generate rtc address to get to address a9 of clock
1189   0586 22 FF         mov ah, $ff    
1190   0588 3C            mov d, a                ; get to ffa9 + offset
1191   0589 F2 A8 FF 40   mov byte[$ffa8], $40    ; set r bit to 1
1192   058D 1E            mov al, [d]             ; get data
1193   058E F2 A8 FF 00   mov byte[$ffa8], 0      ; reset r bit
1194   0592 23            mov ah, al
1195   0593 E7            pop d
1196   0594 E8            pop al
1197   0595 06            sysret
1198   0596             syscall_rtc_set:
1199   0596 DD            push bl
1200   0597 99            mov bl, ah              ; set data aside
1201   0598 6A A2         add al, $a2             ; generate rtc address to get to address a9 of clock
1202   059A 22 FF         mov ah, $ff    
1203   059C 3C            mov d, a                ; get to ffa9 + offset
1204   059D 1B            mov al, bl              ; get data back
1205   059E F2 A8 FF 80   mov byte[$ffa8], $80    ; set w bit to 1
1206   05A2 3E            mov [d], al             ; set data
1207   05A3 F2 A8 FF 00   mov byte[$ffa8], 0      ; reset write bit
1208   05A7 EA            pop bl
1209   05A8 E7            pop d
1210   05A9 E8            pop al
1211   05AA 06            sysret
1212   05AB             
1213   05AB             datetime_serv_tbl:
1214   05AB B3 05         .dw print_date
1215   05AD 27 06         .dw set_date
1216   05AF             syscall_datetime:
1217   05AF FD 0A AB 05   jmp [datetime_serv_tbl + al]      
1218   05B3             print_date:
1219   05B3 10 00 0D      mov a, $0d00           ; print carriage return char
1220   05B6 19 03         mov al, 3
1221   05B8 05 01         syscall sys_rtc        ; get week
1222   05BA 1A            mov al, ah
1223   05BB 22 00         mov ah, 0
1224   05BD FD 9D 02      shl a, 2          
1225   05C0 3B 29 1B      mov d, s_week
1226   05C3 59            add d, a
1227   05C4 07 F9 13      call _puts
1228   05C7 10 00 20      mov a, $2000
1229   05CA 05 03         syscall sys_io         ; display ' '
1230   05CC 19 04         mov al, 4
1231   05CE 05 01         syscall sys_rtc        ; get day
1232   05D0 99            mov bl, ah
1233   05D1 07 99 14      call print_u8x
1234   05D4 10 00 20      mov a, $2000
1235   05D7 05 03         syscall sys_io         ; display ' '
1236   05D9             ; there is a problem with the month displaying
1237   05D9             ; the month is stored as bcd. so when retrieving the month, the value will be in binary
1238   05D9             ; even though it is to be understood as bcd.
1239   05D9             ; when retrieving the value and adding the string table address offset the value will go overboard!  
1240   05D9 19 05         mov al, 05
1241   05DB 05 01         syscall sys_rtc        ; get month
1242   05DD 1A            mov al, ah
1243   05DE 22 00         mov ah, 0
1244   05E0 FD 9D 02      shl a, 2          
1245   05E3 3B F5 1A      mov d, s_months
1246   05E6 59            add d, a
1247   05E7 07 F9 13      call _puts
1248   05EA 10 00 20      mov a, $2000
1249   05ED 05 03         syscall sys_io         ; display ' '
1250   05EF 2E 20         mov bl, $20
1251   05F1 07 99 14      call print_u8x         ; print 20 for year prefix
1252   05F4 19 06         mov al, 06
1253   05F6 05 01         syscall sys_rtc        ; get year
1254   05F8 99            mov bl, ah
1255   05F9 07 99 14      call print_u8x
1256   05FC 10 00 20      mov a, $2000  
1257   05FF 05 03         syscall sys_io         ; display ' '
1258   0601 19 02         mov al, 2
1259   0603 05 01         syscall sys_rtc        ; get hours
1260   0605 99            mov bl, ah
1261   0606 07 99 14      call print_u8x
1262   0609 10 00 3A      mov a, $3a00    
1263   060C 05 03         syscall sys_io         ; display ':'
1264   060E 19 01         mov al, 01
1265   0610 05 01         syscall sys_rtc        ; get minutes
1266   0612 99            mov bl, ah
1267   0613 07 99 14      call print_u8x
1268   0616 10 00 3A      mov a, $3a00  
1269   0619 05 03         syscall sys_io         ; display ':'
1270   061B 19 00         mov al, 0
1271   061D 05 01         syscall sys_rtc        ; get seconds
1272   061F 99            mov bl, ah
1273   0620 07 99 14      call print_u8x
1274   0623 07 A6 13      call printnl
1275   0626 06            sysret
1276   0627             set_date:
1277   0627 3B BA 1A      mov d, s_set_year
1278   062A 07 F9 13      call _puts
1279   062D 07 E4 14      call scan_u8x          ; read integer into a
1280   0630 FD 9D 08      shl a, 8               ; only al used, move to ah
1281   0633 19 0D         mov al, 0dh            ; set rtc year
1282   0635 05 01         syscall sys_rtc        ; set rtc
1283   0637 3B C1 1A      mov d, s_set_month
1284   063A 07 F9 13      call _puts
1285   063D 07 E4 14      call scan_u8x          ; read integer into a
1286   0640 FD 9D 08      shl a, 8               ; only al used, move to ah
1287   0643 19 0C         mov al, 0ch            ; set rtc month
1288   0645 05 01         syscall sys_rtc        ; set rtc
1289   0647 3B C9 1A      mov d, s_set_day
1290   064A 07 F9 13      call _puts
1291   064D 07 E4 14      call scan_u8x          ; read integer into a
1292   0650 FD 9D 08      shl a, 8               ; only al used, move to ah
1293   0653 19 0B         mov al, 0bh            ; set rtc month
1294   0655 05 01         syscall sys_rtc        ; set rtc
1295   0657 3B CF 1A      mov d, s_set_week
1296   065A 07 F9 13      call _puts
1297   065D 07 E4 14      call scan_u8x          ; read integer into a
1298   0660 FD 9D 08      shl a, 8               ; only al used, move to ah
1299   0663 19 0A         mov al, 0ah            ; set rtc month
1300   0665 05 01         syscall sys_rtc        ; set rtc
1301   0667 3B D9 1A      mov d, s_set_hours
1302   066A 07 F9 13      call _puts
1303   066D 07 E4 14      call scan_u8x          ; read integer into a
1304   0670 FD 9D 08      shl a, 8               ; only al used, move to ah
1305   0673 19 09         mov al, 09h            ; set rtc month
1306   0675 05 01         syscall sys_rtc        ; set rtc
1307   0677 3B E1 1A      mov d, s_set_minutes
1308   067A 07 F9 13      call _puts
1309   067D 07 E4 14      call scan_u8x          ; read integer into a
1310   0680 FD 9D 08      shl a, 8               ; only al used, move to ah
1311   0683 19 08         mov al, 08h            ; set rtc month
1312   0685 05 01         syscall sys_rtc        ; set rtc
1313   0687 3B EB 1A      mov d, s_set_seconds
1314   068A 07 F9 13      call _puts
1315   068D 07 E4 14      call scan_u8x          ; read integer into a
1316   0690 FD 9D 08      shl a, 8               ; only al used, move to ah
1317   0693 19 07         mov al, 07h            ; set rtc month
1318   0695 05 01         syscall sys_rtc        ; set rtc
1319   0697 06            sysret
1320   0698             
1321   0698             ; ------------------------------------------------------------------------------------------------------------------;
1322   0698             ; ide services syscall
1323   0698             ; al = option
1324   0698             ; 0 = ide reset, 1 = ide sleep, 2 = read sector, 3 = write sector
1325   0698             ; ide read/write sector
1326   0698             ; 512 bytes
1327   0698             ; user buffer pointer in d
1328   0698             ; ah = number of sectors
1329   0698             ; cb = lba bytes 3..0
1330   0698             ; ------------------------------------------------------------------------------------------------------------------;
1331   0698             ide_serv_tbl:
1332   0698 A4 06         .dw ide_reset
1333   069A B8 06         .dw ide_sleep
1334   069C C7 06         .dw ide_read_sect_wrapper
1335   069E CB 06         .dw ide_write_sect_wrapper
1336   06A0             syscall_ide:
1337   06A0 FD 0A 98 06   jmp [ide_serv_tbl + al]    
1338   06A4             
1339   06A4             ide_reset:      
1340   06A4 F2 D7 FF 04   mov byte[_ide_r7], 4            ; reset ide
1341   06A8 07 51 07      call ide_wait                   ; wait for ide ready             
1342   06AB F2 D6 FF E0   mov byte[_ide_r6], $e0          ; lba3= 0, master, mode= lba        
1343   06AF F2 D1 FF 01   mov byte[_ide_r1], 1            ; 8-bit transfers      
1344   06B3 F2 D7 FF EF   mov byte[_ide_r7], $ef          ; set feature command
1345   06B7 06            sysret
1346   06B8             ide_sleep:
1347   06B8 07 51 07      call ide_wait                   ; wait for ide ready             
1348   06BB F2 D6 FF 40   mov byte [_ide_r6], %01000000   ; lba[3:0](reserved), bit 6=1
1349   06BF F2 D7 FF E6   mov byte [_ide_r7], $e6         ; sleep command
1350   06C3 07 51 07      call ide_wait                   ; wait for ide ready
1351   06C6 06            sysret
1352   06C7             ide_read_sect_wrapper:
1353   06C7 07 CF 06      call ide_read_sect
1354   06CA 06            sysret
1355   06CB             ide_write_sect_wrapper:
1356   06CB 07 F5 06      call ide_write_sect
1357   06CE 06            sysret
1358   06CF             ide_read_sect:
1359   06CF 1A            mov al, ah
1360   06D0 24            mov ah, bl
1361   06D1 42 D2 FF      mov [_ide_r2], a                ; number of sectors (0..255)
1362   06D4 1C            mov al, bh
1363   06D5 3D D4 FF      mov [_ide_r4], al
1364   06D8 12            mov a, c
1365   06D9 3D D5 FF      mov [_ide_r5], al
1366   06DC 1A            mov al, ah
1367   06DD 87 0F         and al, %00001111
1368   06DF 8B E0         or al, %11100000                ; mode lba, master
1369   06E1 3D D6 FF      mov [_ide_r6], al
1370   06E4             ide_read_sect_wait:
1371   06E4 1D D7 FF      mov al, [_ide_r7]  
1372   06E7 87 80         and al, $80                     ; busy flag
1373   06E9 C7 E4 06      jnz ide_read_sect_wait
1374   06EC 19 20         mov al, $20
1375   06EE 3D D7 FF      mov [_ide_r7], al               ; read sector cmd
1376   06F1 07 1B 07      call ide_read  
1377   06F4 09            ret
1378   06F5             ide_write_sect:
1379   06F5 1A            mov al, ah
1380   06F6 24            mov ah, bl
1381   06F7 42 D2 FF      mov [_ide_r2], a                ; number of sectors (0..255)
1382   06FA 1C            mov al, bh
1383   06FB 3D D4 FF      mov [_ide_r4], al
1384   06FE 12            mov a, c
1385   06FF 3D D5 FF      mov [_ide_r5], al
1386   0702 1A            mov al, ah
1387   0703 87 0F         and al, %00001111
1388   0705 8B E0         or al, %11100000                ; mode lba, master
1389   0707 3D D6 FF      mov [_ide_r6], al
1390   070A             ide_write_sect_wait:
1391   070A 1D D7 FF      mov al, [_ide_r7]  
1392   070D 87 80         and al, $80                     ; busy flag
1393   070F C7 0A 07      jnz ide_write_sect_wait
1394   0712 19 30         mov al, $30
1395   0714 3D D7 FF      mov [_ide_r7], al               ; write sector cmd
1396   0717 07 36 07      call ide_write      
1397   071A 09            ret
1398   071B             
1399   071B             ;----------------------------------------------------------------------------------------------------;
1400   071B             ; read ide data
1401   071B             ; pointer in d
1402   071B             ;----------------------------------------------------------------------------------------------------;
1403   071B             ide_read:
1404   071B DA            push d
1405   071C             ide_read_loop:
1406   071C 1D D7 FF      mov al, [_ide_r7]  
1407   071F 87 80         and al, 80h                     ; busy flag
1408   0721 C7 1C 07      jnz ide_read_loop               ; wait loop
1409   0724 1D D7 FF      mov al, [_ide_r7]
1410   0727 87 08         and al, %00001000               ; drq flag
1411   0729 C6 34 07      jz ide_read_end
1412   072C 1D D0 FF      mov al, [_ide_r0]
1413   072F 3E            mov [d], al
1414   0730 79            inc d
1415   0731 0A 1C 07      jmp ide_read_loop
1416   0734             ide_read_end:
1417   0734 E7            pop d
1418   0735 09            ret
1419   0736             
1420   0736             ;----------------------------------------------------------------------------------------------------;
1421   0736             ; write ide data
1422   0736             ; data pointer in d
1423   0736             ;----------------------------------------------------------------------------------------------------;
1424   0736             ide_write:
1425   0736 DA            push d
1426   0737             ide_write_loop:
1427   0737 1D D7 FF      mov al, [_ide_r7]  
1428   073A 87 80         and al, 80h             ; busy flag
1429   073C C7 37 07      jnz ide_write_loop      ; wait loop
1430   073F 1D D7 FF      mov al, [_ide_r7]
1431   0742 87 08         and al, %00001000       ; drq flag
1432   0744 C6 4F 07      jz ide_write_end
1433   0747 1E            mov al, [d]
1434   0748 3D D0 FF      mov [_ide_r0], al
1435   074B 79            inc d 
1436   074C 0A 37 07      jmp ide_write_loop
1437   074F             ide_write_end:
1438   074F E7            pop d
1439   0750 09            ret
1440   0751             
1441   0751             ;----------------------------------------------------------------------------------------------------;
1442   0751             ; wait for ide to be ready
1443   0751             ;----------------------------------------------------------------------------------------------------;
1444   0751             ide_wait:
1445   0751 1D D7 FF      mov al, [_ide_r7]  
1446   0754 87 80         and al, 80h        ; busy flag
1447   0756 C7 51 07      jnz ide_wait
1448   0759 09            ret
1449   075A             
1450   075A             ;----------------------------------------------------------------------------------------------------;
1451   075A             ; io syscall
1452   075A             ;----------------------------------------------------------------------------------------------------;
1453   075A             ; baud  divisor
1454   075A             ; 50    2304
1455   075A             ; 110   1047
1456   075A             ; 300    384
1457   075A             ; 600    192
1458   075A             ; 1200    96
1459   075A             ; 9600    12
1460   075A             ; 19200    6
1461   075A             ; 38400    3
1462   075A             syscall_io_jmp:
1463   075A 8D 07         .dw syscall_io_putchar
1464   075C 9A 07         .dw syscall_io_getch
1465   075E 64 07         .dw syscall_io_uart_setup
1466   0760             syscall_io:
1467   0760 FD 0A 5A 07   jmp [syscall_io_jmp + al]
1468   0764             ; bit7 is the divisor latch access bit (dlab). it must be set high (logic 1) to access the divisor latches
1469   0764             ; of the baud generator during a read or write operation. it must be set low (logic 0) to access the receiver
1470   0764             ; buffer, the transmitter holding register, or the interrupt enable register.
1471   0764             syscall_io_uart_setup:
1472   0764 1D 24 19      mov al, [sys_uart0_lcr]
1473   0767 8B 80         or al, $80                ; set dlab access bit
1474   0769 3D 83 FF      mov [_uart0_lcr], al      ; 8 data, 2 stop, no parity by default
1475   076C 1D 27 19      mov al, [sys_uart0_div0]
1476   076F 3D 80 FF      mov [_uart0_dlab_0], al   ; divisor latch byte 0
1477   0772 1D 28 19      mov al, [sys_uart0_div1]
1478   0775 3D 81 FF      mov [_uart0_dlab_1], al   ; divisor latch byte 1      
1479   0778             
1480   0778 1D 24 19      mov al, [sys_uart0_lcr]
1481   077B 87 7F         and al, $7f               ; clear dlab access bit 
1482   077D 3D 83 FF      mov [_uart0_lcr], al
1483   0780 1D 25 19      mov al, [sys_uart0_inten]
1484   0783 3D 81 FF      mov [_uart0_ier], al      ; interrupts
1485   0786 1D 26 19      mov al, [sys_uart0_fifoen]
1486   0789 3D 82 FF      mov [_uart0_fcr], al      ; fifo control
1487   078C 06            sysret
1488   078D             
1489   078D             ; char in ah
1490   078D             syscall_io_putchar:
1491   078D             syscall_io_putchar_l0:
1492   078D 1D 85 FF      mov al, [_uart0_lsr]         ; read line status register
1493   0790 87 20         and al, $20
1494   0792 C6 8D 07      jz syscall_io_putchar_l0    
1495   0795 1A            mov al, ah
1496   0796 3D 80 FF      mov [_uart0_data], al        ; write char to transmitter holding register
1497   0799 06            sysret
1498   079A             
1499   079A             ; char in ah
1500   079A             ; al = sucess code
1501   079A             syscall_io_getch:
1502   079A D8            push b
1503   079B DA            push d
1504   079C FD 0C         sti
1505   079E             syscall_io_getch_l0:  
1506   079E 14 31 19      mov a, [fifo_out]
1507   07A1 29 2F 19      mov b, [fifo_in]
1508   07A4 B0            cmp a, b
1509   07A5 C6 9E 07      je syscall_io_getch_l0
1510   07A8 3C            mov d, a
1511   07A9 77            inc a
1512   07AA AF 67 31      cmp a, fifo + _fifo_size      ; check if pointer reached the end of the fifo
1513   07AD C7 B3 07      jne syscall_io_getch_cont
1514   07B0 10 67 21      mov a, fifo  
1515   07B3             syscall_io_getch_cont:  
1516   07B3 42 31 19      mov [fifo_out], a             ; update fifo pointer
1517   07B6 1E            mov al, [d]                   ; get char
1518   07B7 23            mov ah, al
1519   07B8 1D 23 19      mov al, [sys_echo_on]
1520   07BB B9 01         cmp al, 1
1521   07BD C7 CC 07      jne syscall_io_getch_noecho 
1522   07C0             ; here we just echo the char back to the console
1523   07C0             syscall_io_getch_echo_l0:
1524   07C0 1D 85 FF      mov al, [_uart0_lsr]         ; read line status register
1525   07C3 87 20         and al, $20                 ; isolate transmitter empty
1526   07C5 C6 C0 07      jz syscall_io_getch_echo_l0
1527   07C8 1A            mov al, ah
1528   07C9 3D 80 FF      mov [_uart0_data], al        ; write char to transmitter holding register
1529   07CC             syscall_io_getch_noecho:
1530   07CC 19 01         mov al, 1                    ; al = 1 means a char successfully received
1531   07CE E7            pop d
1532   07CF E5            pop b
1533   07D0 06            sysret
1534   07D1             
1535   07D1             ;------------------------------------------------------------------------------------------------------;
1536   07D1             ; file system data
1537   07D1             ;------------------------------------------------------------------------------------------------------;
1538   07D1             ; infor for : ide services interrupt
1539   07D1             ; ide read/write 512-byte sector
1540   07D1             ; al = option
1541   07D1             ; user buffer pointer in d
1542   07D1             ; ah = number of sectors
1543   07D1             ; cb = lba bytes 3..0  
1544   07D1             ;------------------------------------------------------------------------------------------------------;
1545   07D1             ; file system data structure
1546   07D1             ;------------------------------------------------------------------------------------------------------;
1547   07D1             ; for a directory we have the header first, followed by metadata
1548   07D1             ; header 1 sector (512 bytes)
1549   07D1             ; metadata 1 sector (512 bytes)
1550   07D1             ; header entries:
1551   07D1             ; filename (64)
1552   07D1             ; parent dir lba (2) -  to be used for faster backwards navigation...
1553   07D1             ;
1554   07D1             ; metadata entries:
1555   07D1             ; filename (24)
1556   07D1             ; attributes (1)  |_|_|file_type(3bits)|x|w|r| types: file, directory, character device
1557   07D1             ; lba (2)
1558   07D1             ; size (2)
1559   07D1             ; day (1)
1560   07D1             ; month (1)
1561   07D1             ; year (1)
1562   07D1             ; packet size = 32 bytes
1563   07D1             ;
1564   07D1             ; first directory on disk is the root directory '/'
1565   07D1             file_system_jmptbl:
1566   07D1 3C 08         .dw fs_mkfs                   ; 0
1567   07D3 00 00         .dw 0                         ; 1
1568   07D5 9E 08         .dw fs_mkdir                  ; 2
1569   07D7 17 0C         .dw fs_cd                     ; 3
1570   07D9 1E 0C         .dw fs_ls                     ; 4
1571   07DB 09 0D         .dw fs_mktxt                  ; 5
1572   07DD D4 0D         .dw fs_mkbin                  ; 6
1573   07DF 9B 0E         .dw fs_pwd                    ; 7
1574   07E1 B8 0E         .dw fs_cat                    ; 8
1575   07E3 14 0F         .dw fs_rmdir                  ; 9
1576   07E5 70 0F         .dw fs_rm                     ; 10
1577   07E7 00 00         .dw 0                         ; 11
1578   07E9 00 00         .dw 0                         ; 12
1579   07EB 00 00         .dw 0                         ; 13
1580   07ED 44 08         .dw fs_chmod                  ; 14
1581   07EF D8 0F         .dw fs_mv                     ; 15
1582   07F1 3D 08         .dw fs_cd_root                ; 16
1583   07F3 13 0C         .dw fs_get_curr_dirid         ; 17
1584   07F5 EF 09         .dw fs_dir_id_to_path         ; 18
1585   07F7 55 0A         .dw fs_path_to_dir_id_user    ; 19
1586   07F9 6F 0B         .dw fs_load_from_path_user    ; 20  
1587   07FB DF 0A         .dw fs_filepath_exists_user   ; 21
1588   07FD             
1589   07FD 0A 3E 20 73 s_syscall_fs_dbg0: .db "\n> syscall_file_system called: ", 0
1589   0801 79 73 63 61 
1589   0805 6C 6C 5F 66 
1589   0809 69 6C 65 5F 
1589   080D 73 79 73 74 
1589   0811 65 6D 20 63 
1589   0815 61 6C 6C 65 
1589   0819 64 3A 20 00 
1590   081D             syscall_file_system:
1591   081D DD            push bl
1592   081E 31 22 19      mov bl, [sys_debug_mode]
1593   0821               ; debug block
1594   0821 C1 00         cmp bl, 0
1595   0823 EA            pop bl
1596   0824 C6 38 08      je syscall_filesystem_jmp
1597   0827 DA            push d
1598   0828 DD            push bl
1599   0829 3B FD 07      mov d, s_syscall_fs_dbg0
1600   082C 07 F9 13      call _puts
1601   082F 2F            mov bl, al
1602   0830 07 99 14      call print_u8x
1603   0833 07 A6 13      call printnl
1604   0836 EA            pop bl
1605   0837 E7            pop d
1606   0838             syscall_filesystem_jmp:
1607   0838 FD 0A D1 07   jmp [file_system_jmptbl + al]
1608   083C             
1609   083C             fs_mkfs:  
1610   083C 06            sysret  
1611   083D               
1612   083D             fs_cd_root:
1613   083D 10 20 00      mov a, root_id
1614   0840 42 33 19      mov [current_dir_id], a      ; set current directory lba to root
1615   0843 06            sysret  
1616   0844             
1617   0844             ; filename in d (userspace data)
1618   0844             ; permission in bl
1619   0844             fs_chmod:
1620   0844 DD            push bl
1621   0845 FD 4E         mov si, d
1622   0847 FD 4F 67 1F   mov di, user_data
1623   084B 38 80 00      mov c, 128
1624   084E 04            load                        ; load filename from user-space
1625   084F 14 33 19      mov a, [current_dir_id]
1626   0852 77            inc a                       ; metadata sector
1627   0853 27            mov b, a
1628   0854 38 00 00      mov c, 0                    ; upper lba = 0
1629   0857 22 01         mov ah, $01                  ; 1 sector
1630   0859 3B 67 33      mov d, transient_area
1631   085C 07 CF 06      call ide_read_sect          ; read directory
1632   085F FD 10         cla
1633   0861 42 2B 19      mov [index], a              ; reset file counter
1634   0864             fs_chmod_l1:
1635   0864 FD 4E         mov si, d
1636   0866 FD 4F 67 1F   mov di, user_data
1637   086A 07 3C 12      call _strcmp
1638   086D C6 84 08      je fs_chmod_found_entry
1639   0870 58 20 00      add d, 32
1640   0873 14 2B 19      mov a, [index]
1641   0876 77            inc a
1642   0877 42 2B 19      mov [index], a
1643   087A AF 10 00      cmp a, fst_files_per_dir
1644   087D C7 64 08      jne fs_chmod_l1
1645   0880 EA            pop bl
1646   0881 0A 9D 08      jmp fs_chmod_not_found
1647   0884             fs_chmod_found_entry:  
1648   0884 FD 79         mov g, b                    ; save lba
1649   0886 EA            pop bl                      ; retrieve saved permission value
1650   0887 1F 18 00      mov al, [d + 24]            ; read file permissions
1651   088A 87 F8         and al, %11111000           ; remove all permissions, keep other flags
1652   088C 8C            or al, bl                   ; set new permissions
1653   088D 3F 18 00      mov [d + 24], al            ; write new permissions
1654   0890 38 00 00      mov c, 0
1655   0893 3B 67 33      mov d, transient_area
1656   0896 22 01         mov ah, $01                 ; disk write 1 sect
1657   0898 FD 27         mov b, g                    ; retrieve lba
1658   089A 07 F5 06      call ide_write_sect         ; write sector
1659   089D             fs_chmod_not_found:
1660   089D 06            sysret
1661   089E             
1662   089E             ;------------------------------------------------------------------------------------------------------;
1663   089E             ; create new directory
1664   089E             ;------------------------------------------------------------------------------------------------------;
1665   089E             ; search list for null name entry. add new directory to list
1666   089E             fs_mkdir:
1667   089E FD 4E         mov si, d
1668   08A0 FD 4F 67 1F   mov di, user_data
1669   08A4 38 00 02      mov c, 512
1670   08A7 04            load                        ; load data from user-space
1671   08A8 26 22 00      mov b, fst_lba_start + 2    ; start at 2 because lba  0 is root (this would also cause issues                 
1672   08AB                                           ; when checking for null name, since root has a null name)
1673   08AB 38 00 00      mov c, 0                    ; upper lba = 0
1674   08AE             fs_mkdir_l1:  
1675   08AE 22 01         mov ah, $01                  ; 1 sector
1676   08B0 3B 67 33      mov d, transient_area
1677   08B3 07 CF 06      call ide_read_sect          ; read sector
1678   08B6 BD 00         cmp byte[d], 0              ; check for null
1679   08B8 C6 C1 08      je fs_mkdir_found_null
1680   08BB 55 02 00      add b, fst_sectors_per_dir  ; skip directory
1681   08BE 0A AE 08      jmp fs_mkdir_l1
1682   08C1             fs_mkdir_found_null:
1683   08C1             ;create header file by grabbing dir name from parameter
1684   08C1 D8            push b                      ; save new directory's lba
1685   08C2 38 40 00      mov c, 64
1686   08C5 FD 4D 67 1F   mov si, user_data
1687   08C9 FD 4F 67 33   mov di, transient_area
1688   08CD FD F5         rep movsb                   ; copy dirname from user_data to transient_area
1689   08CF 14 33 19      mov a, [current_dir_id]
1690   08D2 42 A7 33      mov [transient_area + 64], a    ; store parent directory lba
1691   08D5 19 00         mov al, 0
1692   08D7 FD 4F 67 35   mov di, transient_area + 512
1693   08DB 38 00 02      mov c, 512
1694   08DE FD F7         rep stosb                       ; clean buffer
1695   08E0 38 00 00      mov c, 0                        ; reset lba(c) to 0
1696   08E3             ; write directory entry sectors
1697   08E3 3B 67 33      mov d, transient_area
1698   08E6 22 02         mov ah, $02                     ; disk write, 2 sectors
1699   08E8 07 F5 06      call ide_write_sect             ; write sector
1700   08EB             ; now we need to add the new directory to the list, inside the current directory
1701   08EB 14 33 19      mov a, [current_dir_id]
1702   08EE 53 01 00      add a, 1
1703   08F1 27            mov b, a                        ; metadata sector
1704   08F2 38 00 00      mov c, 0
1705   08F5 FD 79         mov g, b                        ; save lba
1706   08F7 3B 67 33      mov d, transient_area
1707   08FA 22 01         mov ah, $01                  ; 1 sector
1708   08FC 07 CF 06      call ide_read_sect              ; read metadata sector
1709   08FF             fs_mkdir_l2:
1710   08FF BD 00         cmp byte[d], 0
1711   0901 C6 0A 09      je fs_mkdir_found_null2
1712   0904 58 20 00      add d, fst_entry_size
1713   0907 0A FF 08      jmp fs_mkdir_l2                ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
1714   090A             fs_mkdir_found_null2:
1715   090A FD 4D 67 1F   mov si, user_data
1716   090E FD 50         mov di, d
1717   0910 07 51 12      call _strcpy                    ; copy directory name
1718   0913 58 18 00      add d, 24                       ; goto attributes
1719   0916 19 0B         mov al, %00001011               ; directory, no execute, write, read
1720   0918 3E            mov [d], al      
1721   0919 79            inc d
1722   091A E5            pop b
1723   091B D8            push b                          ; push lba back
1724   091C FD 43         mov [d], b                      ; save lba
1725   091E             ; set file creation date  
1726   091E 58 04 00      add d, 4
1727   0921 19 04         mov al, 4
1728   0923 05 01         syscall sys_rtc
1729   0925 1A            mov al, ah
1730   0926 3E            mov [d], al                     ; set day
1731   0927 79            inc d
1732   0928 19 05         mov al, 5
1733   092A 05 01         syscall sys_rtc
1734   092C 1A            mov al, ah
1735   092D 3E            mov [d], al                     ; set month
1736   092E 79            inc d
1737   092F 19 06         mov al, 6
1738   0931 05 01         syscall sys_rtc
1739   0933 1A            mov al, ah
1740   0934 3E            mov [d], al                     ; set year
1741   0935             ; write sector into disk for new directory entry
1742   0935 FD 27         mov b, g
1743   0937 38 00 00      mov c, 0
1744   093A 3B 67 33      mov d, transient_area
1745   093D 22 01         mov ah, $01                     ; disk write, 1 sector
1746   093F 07 F5 06      call ide_write_sect             ; write sector
1747   0942             
1748   0942             ; after adding the new directory's information to its parent directory's list
1749   0942             ; we need to now enter the new directory, and to it add two new directories!
1750   0942             ; which directories do we need to add ? '..' and '.' are the directories needed.
1751   0942             ; importantly, note that these two new directories are only entries in the list
1752   0942             ; and do not have actual physical entries in the disk as real directories.
1753   0942             ; i.e. they only exist as list entries in the new directory created so that
1754   0942             ; the new directory can reference its parent and itself.
1755   0942             ; we need to add both '..' and '.'
1756   0942             ; this first section is for '..' and on the section below we do the same for '.'
1757   0942 E4            pop a                         ; retrieve the new directory's lba  
1758   0943 D7            push a                        ; and save again
1759   0944 53 01 00      add a, 1
1760   0947 27            mov b, a                      ; metadata sector
1761   0948 38 00 00      mov c, 0
1762   094B FD 79         mov g, b                      ; save lba
1763   094D 3B 67 33      mov d, transient_area
1764   0950 22 01         mov ah, $01                  ; 1 sector
1765   0952 07 CF 06      call ide_read_sect            ; read metadata sector
1766   0955             fs_mkdir_l3:
1767   0955 BD 00         cmp byte[d], 0
1768   0957 C6 60 09      je fs_mkdir_found_null3
1769   095A 58 20 00      add d, fst_entry_size
1770   095D 0A 55 09      jmp fs_mkdir_l3              ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
1771   0960             fs_mkdir_found_null3:
1772   0960 FD 4D 52 19   mov si, s_parent_dir
1773   0964 FD 50         mov di, d
1774   0966 07 51 12      call _strcpy                  ; copy directory name
1775   0969 58 18 00      add d, 24                     ; goto attributes
1776   096C 19 0B         mov al, %00001011             ; directory, no execute, write, read, 
1777   096E 3E            mov [d], al      
1778   096F 79            inc d
1779   0970 29 33 19      mov b, [current_dir_id]        ; retrieve the parent directorys lba
1780   0973 FD 43         mov [d], b                    ; save lba
1781   0975             ; set file creation date  
1782   0975 58 04 00      add d, 4
1783   0978 19 04         mov al, 4
1784   097A 05 01         syscall sys_rtc
1785   097C 1A            mov al, ah
1786   097D 3E            mov [d], al                   ; set day
1787   097E 79            inc d
1788   097F 19 05         mov al, 5
1789   0981 05 01         syscall sys_rtc
1790   0983 1A            mov al, ah
1791   0984 3E            mov [d], al                   ; set month
1792   0985 79            inc d
1793   0986 19 06         mov al, 6
1794   0988 05 01         syscall sys_rtc
1795   098A 1A            mov al, ah
1796   098B 3E            mov [d], al                   ; set year
1797   098C             ; write sector into disk for new directory entry
1798   098C FD 27         mov b, g
1799   098E 38 00 00      mov c, 0
1800   0991 3B 67 33      mov d, transient_area
1801   0994 22 01         mov ah, $01                   ; disk write, 1 sector
1802   0996 07 F5 06      call ide_write_sect           ; write sector
1803   0999             ;;;;;;;;;;;;;
1804   0999             ; like we did above for '..', we need to now add the '.' directory to the list.
1805   0999             ;------------------------------------------------------------------------------------------------------;
1806   0999 E4            pop a                         ; retrieve the new directory's lba  
1807   099A D7            push a
1808   099B 53 01 00      add a, 1
1809   099E 27            mov b, a                      ; metadata sector
1810   099F 38 00 00      mov c, 0
1811   09A2 FD 79         mov g, b                      ; save lba
1812   09A4 3B 67 33      mov d, transient_area
1813   09A7 22 01         mov ah, $01                  ; 1 sector
1814   09A9 07 CF 06      call ide_read_sect            ; read metadata sector
1815   09AC             fs_mkdir_l4:
1816   09AC BD 00         cmp byte[d], 0
1817   09AE C6 B7 09      je fs_mkdir_found_null4
1818   09B1 58 20 00      add d, fst_entry_size
1819   09B4 0A AC 09      jmp fs_mkdir_l4              ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
1820   09B7             fs_mkdir_found_null4:
1821   09B7 FD 4D 55 19   mov si, s_current_dir
1822   09BB FD 50         mov di, d
1823   09BD 07 51 12      call _strcpy                  ; copy directory name
1824   09C0 58 18 00      add d, 24                     ; goto attributes
1825   09C3 19 0B         mov al, %00001011             ; directory, no execute, write, read, 
1826   09C5 3E            mov [d], al      
1827   09C6 79            inc d
1828   09C7 E5            pop b                         ; new directory's lba itself. for self-referential directory entry '.'
1829   09C8 FD 43         mov [d], b                    ; save lba
1830   09CA             ; set file creation date  
1831   09CA 58 04 00      add d, 4
1832   09CD 19 04         mov al, 4
1833   09CF 05 01         syscall sys_rtc
1834   09D1 1A            mov al, ah
1835   09D2 3E            mov [d], al                   ; set day
1836   09D3 79            inc d
1837   09D4 19 05         mov al, 5
1838   09D6 05 01         syscall sys_rtc
1839   09D8 1A            mov al, ah
1840   09D9 3E            mov [d], al                   ; set month
1841   09DA 79            inc d
1842   09DB 19 06         mov al, 6
1843   09DD 05 01         syscall sys_rtc
1844   09DF 1A            mov al, ah
1845   09E0 3E            mov [d], al                   ; set year
1846   09E1             ; write sector into disk for new directory entry
1847   09E1 FD 27         mov b, g
1848   09E3 38 00 00      mov c, 0
1849   09E6 3B 67 33      mov d, transient_area
1850   09E9 22 01         mov ah, $01                   ; disk write, 1 sector
1851   09EB 07 F5 06      call ide_write_sect           ; write sector
1852   09EE             fs_mkdir_end:
1853   09EE 06            sysret
1854   09EF             
1855   09EF             ;------------------------------------------------------------------------------------------------------;
1856   09EF             ; get path from a given directory dirid
1857   09EF             ; pseudo code:
1858   09EF             ;  fs_dir_id_to_path(int dirid, char *d){
1859   09EF             ;    if(dirid == 0){
1860   09EF             ;      reverse path in d;
1861   09EF             ;      return;
1862   09EF             ;    }
1863   09EF             ;    else{
1864   09EF             ;      copy directory name to end of d;
1865   09EF             ;      add '/' to end of d;
1866   09EF             ;      parentid = get parent directory id;
1867   09EF             ;      fs_dir_id_to_path(parentid, d);
1868   09EF             ;    }
1869   09EF             ;  }
1870   09EF             ; a = dirid
1871   09EF             ; d = generated path string pointer
1872   09EF             ;------------------------------------------------------------------------------------------------------;
1873   09EF             ; sample path: /usr/bin
1874   09EF             fs_dir_id_to_path:
1875   09EF 3B E7 1E      mov d, filename
1876   09F2 19 00         mov al, 0
1877   09F4 3E            mov [d], al                     ; initialize path string 
1878   09F5 14 33 19      mov a, [current_dir_id]
1879   09F8 07 05 0A      call fs_dir_id_to_path_e0
1880   09FB 3B E7 1E      mov d, filename
1881   09FE 07 E5 11      call _strrev
1882   0A01 07 F9 13      call _puts
1883   0A04 06            sysret
1884   0A05             fs_dir_id_to_path_e0:
1885   0A05 07 24 0A      call get_dirname_from_dirid
1886   0A08 FD 4D 57 19   mov si, s_fslash
1887   0A0C FD 50         mov di, d
1888   0A0E 07 5F 12      call _strcat                    ; add '/' to end of path
1889   0A11 AF 20 00      cmp a, root_id               ; check if we are at the root directory
1890   0A14 C6 23 0A      je fs_dir_id_to_path_root
1891   0A17 07 41 0A      call get_parentid_from_dirid    ; use current id (a) to find parentid (into a)
1892   0A1A AF 20 00      cmp a, root_id               ; check if we are at the root directory
1893   0A1D C6 23 0A      je fs_dir_id_to_path_root
1894   0A20 07 05 0A      call fs_dir_id_to_path_e0     ; recursively call itself
1895   0A23             fs_dir_id_to_path_root:
1896   0A23 09            ret
1897   0A24             
1898   0A24             ;------------------------------------------------------------------------------------------------------;
1899   0A24             ; in_puts:
1900   0A24             ; a = directory id
1901   0A24             ; out_puts:
1902   0A24             ; d = pointer to directory name string
1903   0A24             ;------------------------------------------------------------------------------------------------------;
1904   0A24             get_dirname_from_dirid:
1905   0A24 D7            push a
1906   0A25 D8            push b
1907   0A26 DA            push d
1908   0A27 27            mov b, a
1909   0A28 38 00 00      mov c, 0                      ; upper lba = 0
1910   0A2B 22 01         mov ah, $01                  ; 1 sector
1911   0A2D 3B 67 31      mov d, transient_area - 512
1912   0A30 07 CF 06      call ide_read_sect            ; read directory
1913   0A33 07 E5 11      call _strrev                  ; reverse dir name before copying
1914   0A36 FD 4E         mov si, d
1915   0A38 E7            pop d                         ; destination address = d value pushed at beginning
1916   0A39 FD 50         mov di, d
1917   0A3B 07 5F 12      call _strcat                  ; copy filename to d
1918   0A3E E5            pop b
1919   0A3F E4            pop a
1920   0A40 09            ret
1921   0A41             
1922   0A41             ;------------------------------------------------------------------------------------------------------;
1923   0A41             ; in_puts:
1924   0A41             ; a = directory id
1925   0A41             ; out_puts:
1926   0A41             ; a = parent directory id
1927   0A41             ;------------------------------------------------------------------------------------------------------;
1928   0A41             get_parentid_from_dirid:
1929   0A41 D8            push b
1930   0A42 DA            push d
1931   0A43 27            mov b, a
1932   0A44 38 00 00      mov c, 0                      ; upper lba = 0
1933   0A47 22 01         mov ah, $01                  ; 1 sector
1934   0A49 3B 67 31      mov d, transient_area - 512
1935   0A4C 07 CF 06      call ide_read_sect            ; read directory
1936   0A4F 16 40 00      mov a, [d + 64]               ; copy parent id value to a
1937   0A52 E7            pop d
1938   0A53 E5            pop b
1939   0A54 09            ret
1940   0A55             
1941   0A55             ;------------------------------------------------------------------------------------------------------;
1942   0A55             ; get dirid from a given path string
1943   0A55             ; in_puts:
1944   0A55             ; d = path pointer 
1945   0A55             ; out_puts:
1946   0A55             ; a = dirid
1947   0A55             ; if dir non existent, a = ffff (fail code)
1948   0A55             ; /usr/local/bin    - absolute
1949   0A55             ; local/bin/games    - relative
1950   0A55             ;------------------------------------------------------------------------------------------------------;
1951   0A55             fs_path_to_dir_id_user:
1952   0A55 FD 4E         mov si, d
1953   0A57 FD 4F 67 1F   mov di, user_data
1954   0A5B 38 00 02      mov c, 512
1955   0A5E 04            load
1956   0A5F 07 63 0A      call get_dirid_from_path
1957   0A62 06            sysret
1958   0A63             get_dirid_from_path:
1959   0A63 26 67 1F      mov b, user_data
1960   0A66 FD 42 1E 18   mov [prog], b                  ; token pointer set to path string
1961   0A6A 07 7F 16      call get_token
1962   0A6D 31 21 18      mov bl, [tok]
1963   0A70 C1 01         cmp bl, tok_fslash
1964   0A72 C6 7E 0A      je get_dirid_from_path_abs 
1965   0A75 14 33 19      mov a, [current_dir_id]
1966   0A78 07 05 18      call _putback
1967   0A7B 0A 81 0A      jmp get_dirid_from_path_e0
1968   0A7E             get_dirid_from_path_abs:
1969   0A7E 10 20 00      mov a, root_id
1970   0A81             get_dirid_from_path_e0:
1971   0A81 07 7F 16      call get_token
1972   0A84 31 20 18      mov bl, [toktyp]
1973   0A87 C1 00         cmp bl, toktyp_identifier
1974   0A89 C7 DA 0A      jne get_dirid_from_path_end   ; check if there are tokens after '/'. i.e. is this a 'cd /' command?
1975   0A8C             
1976   0A8C FD 4D 22 18   mov si, tokstr
1977   0A90 FD 4F E7 1E   mov di, filename
1978   0A94 07 51 12      call _strcpy        
1979   0A97 77            inc a                         ; metadata sector
1980   0A98 27            mov b, a
1981   0A99 38 00 00      mov c, 0                      ; upper lba = 0
1982   0A9C 22 01         mov ah, $01                  ; 1 sector
1983   0A9E 3B 67 33      mov d, transient_area
1984   0AA1 07 CF 06      call ide_read_sect            ; read directory
1985   0AA4 FD 10         cla
1986   0AA6 42 2B 19      mov [index], a
1987   0AA9             get_dirid_from_path_l1:
1988   0AA9 FD 4E         mov si, d
1989   0AAB FD 4F E7 1E   mov di, filename
1990   0AAF 07 3C 12      call _strcmp
1991   0AB2 C6 C8 0A      je get_dirid_from_path_name_equal  
1992   0AB5 58 20 00      add d, 32
1993   0AB8 14 2B 19      mov a, [index]
1994   0ABB 77            inc a
1995   0ABC 42 2B 19      mov [index], a
1996   0ABF AF 10 00      cmp a, fst_files_per_dir
1997   0AC2 C6 DB 0A      je get_dirid_from_path_fail
1998   0AC5 0A A9 0A      jmp get_dirid_from_path_l1
1999   0AC8             get_dirid_from_path_name_equal:
2000   0AC8 58 19 00      add d, 25           
2001   0ACB 15            mov a, [d]                    ; set result register a = dirid
2002   0ACC 07 7F 16      call get_token
2003   0ACF 31 21 18      mov bl, [tok]
2004   0AD2 C1 01         cmp bl, tok_fslash            ; check if there are more elements in the path
2005   0AD4 C6 81 0A      je get_dirid_from_path_e0
2006   0AD7 07 05 18      call _putback
2007   0ADA             get_dirid_from_path_end:
2008   0ADA 09            ret
2009   0ADB             get_dirid_from_path_fail:
2010   0ADB 10 FF FF      mov a, $ffff
2011   0ADE 09            ret
2012   0ADF             
2013   0ADF             
2014   0ADF             ;------------------------------------------------------------------------------------------------------;
2015   0ADF             ; check if file exists by a given path string
2016   0ADF             ; in_puts:
2017   0ADF             ; d = path pointer 
2018   0ADF             ; outputs:
2019   0ADF             ; a = success code, if file exists gives lba, else, give 0
2020   0ADF             ; /usr/local/bin/ed
2021   0ADF             ;------------------------------------------------------------------------------------------------------;
2022   0ADF             fs_filepath_exists_user:
2023   0ADF FD 4E         mov si, d
2024   0AE1 FD 4F 67 1F   mov di, user_data
2025   0AE5 38 00 02      mov c, 512
2026   0AE8 04            load
2027   0AE9 07 ED 0A      call file_exists_by_path
2028   0AEC 06            sysret
2029   0AED             file_exists_by_path:
2030   0AED 26 67 1F      mov b, user_data
2031   0AF0 FD 42 1E 18   mov [prog], b                   ; token pointer set to path string
2032   0AF4 07 7F 16      call get_token
2033   0AF7 31 21 18      mov bl, [tok]
2034   0AFA C1 01         cmp bl, tok_fslash
2035   0AFC C6 08 0B      je  file_exists_by_path_abs
2036   0AFF 14 33 19      mov a, [current_dir_id]
2037   0B02 07 05 18      call _putback
2038   0B05 0A 0B 0B      jmp file_exists_by_path_e0
2039   0B08             file_exists_by_path_abs:
2040   0B08 10 20 00      mov a, root_id
2041   0B0B             file_exists_by_path_e0:
2042   0B0B 07 7F 16      call get_token
2043   0B0E 31 20 18      mov bl, [toktyp]
2044   0B11 C1 00         cmp bl, toktyp_identifier
2045   0B13 C7 6B 0B      jne file_exists_by_path_end     ; check if there are tokens after '/'
2046   0B16 FD 4D 22 18   mov si, tokstr
2047   0B1A FD 4F E7 1E   mov di, filename
2048   0B1E 07 51 12      call _strcpy        
2049   0B21 77            inc a                           ; metadata sector
2050   0B22 27            mov b, a
2051   0B23 38 00 00      mov c, 0                        ; upper lba = 0
2052   0B26 22 01         mov ah, $01                  ; 1 sector
2053   0B28 3B 67 33      mov d, transient_area
2054   0B2B 07 CF 06      call ide_read_sect              ; read directory
2055   0B2E FD 10         cla
2056   0B30 42 2B 19      mov [index], a
2057   0B33             file_exists_by_path_l1:
2058   0B33 FD 4E         mov si, d
2059   0B35 FD 4F E7 1E   mov di, filename
2060   0B39 07 3C 12      call _strcmp
2061   0B3C C6 52 0B      je   file_exists_by_path_name_equal
2062   0B3F 58 20 00      add d, 32
2063   0B42 14 2B 19      mov a, [index]
2064   0B45 77            inc a
2065   0B46 42 2B 19      mov [index], a
2066   0B49 AF 10 00      cmp a, fst_files_per_dir
2067   0B4C C6 6B 0B      je file_exists_by_path_end
2068   0B4F 0A 33 0B      jmp file_exists_by_path_l1
2069   0B52             file_exists_by_path_name_equal:
2070   0B52 33 18 00      mov bl, [d + 24]
2071   0B55 FD 87 38      and bl, %00111000               ; directory flag
2072   0B58 C1 08         cmp bl, %00001000               ; is dir?
2073   0B5A C6 61 0B      je file_exists_by_path_isdir;
2074   0B5D             ; entry is a file
2075   0B5D 16 19 00      mov a, [d + 25]                 ; get and return lba of file
2076   0B60 09            ret
2077   0B61             file_exists_by_path_isdir:
2078   0B61 58 19 00      add d, 25           
2079   0B64 15            mov a, [d]                      ; set result register a = dirid
2080   0B65 07 7F 16      call get_token
2081   0B68 0A 0B 0B      jmp file_exists_by_path_e0
2082   0B6B             file_exists_by_path_end:
2083   0B6B 10 00 00      mov a, 0                        ; return 0 because file was not found
2084   0B6E 09            ret
2085   0B6F             
2086   0B6F             ;------------------------------------------------------------------------------------------------------;
2087   0B6F             ; load file data from a given path string
2088   0B6F             ; inputs:
2089   0B6F             ; d = path pointer 
2090   0B6F             ; di = userspace program data destination
2091   0B6F             ; /usr/local/bin/ed
2092   0B6F             ; ./ed
2093   0B6F             ;------------------------------------------------------------------------------------------------------;
2094   0B6F             fs_load_from_path_user:
2095   0B6F E3            push di
2096   0B70 FD 4E         mov si, d
2097   0B72 FD 4F 67 1F   mov di, user_data
2098   0B76 38 00 02      mov c, 512
2099   0B79 04            load
2100   0B7A 07 87 0B      call loadfile_from_path
2101   0B7D F0            pop di
2102   0B7E FD 4D 67 33   mov si, transient_area
2103   0B82 38 00 3E      mov c, 512 * (fs_sectors_per_file-1)
2104   0B85 03            store
2105   0B86 06            sysret
2106   0B87             loadfile_from_path:
2107   0B87 26 67 1F      mov b, user_data
2108   0B8A FD 42 1E 18   mov [prog], b                 ; token pointer set to path string
2109   0B8E 07 7F 16      call get_token
2110   0B91 31 21 18      mov bl, [tok]
2111   0B94 C1 01         cmp bl, tok_fslash
2112   0B96 C6 A2 0B      je loadfile_from_path_abs 
2113   0B99 14 33 19      mov a, [current_dir_id]
2114   0B9C 07 05 18      call _putback
2115   0B9F 0A A5 0B      jmp loadfile_from_path_e0
2116   0BA2             loadfile_from_path_abs:
2117   0BA2 10 20 00      mov a, root_id
2118   0BA5             loadfile_from_path_e0:
2119   0BA5 07 7F 16      call get_token
2120   0BA8 31 20 18      mov bl, [toktyp]
2121   0BAB C1 00         cmp bl, toktyp_identifier
2122   0BAD C7 12 0C      jne loadfile_from_path_end    ; check if there are tokens after '/'. i.e. is this a 'cd /' command?
2123   0BB0 FD 4D 22 18   mov si, tokstr
2124   0BB4 FD 4F E7 1E   mov di, filename
2125   0BB8 07 51 12      call _strcpy        
2126   0BBB 77            inc a                         ; metadata sector
2127   0BBC 27            mov b, a
2128   0BBD 38 00 00      mov c, 0                      ; upper lba = 0
2129   0BC0 22 01         mov ah, $01                  ; 1 sector
2130   0BC2 3B 67 33      mov d, transient_area
2131   0BC5 07 CF 06      call ide_read_sect            ; read directory
2132   0BC8 FD 10         cla
2133   0BCA 42 2B 19      mov [index], a
2134   0BCD             loadfile_from_path_l1:
2135   0BCD FD 4E         mov si, d
2136   0BCF FD 4F E7 1E   mov di, filename
2137   0BD3 07 3C 12      call _strcmp
2138   0BD6 C6 EC 0B      je loadfile_from_path_name_equal  
2139   0BD9 58 20 00      add d, 32
2140   0BDC 14 2B 19      mov a, [index]
2141   0BDF 77            inc a
2142   0BE0 42 2B 19      mov [index], a
2143   0BE3 AF 10 00      cmp a, fst_files_per_dir
2144   0BE6 C6 12 0C      je loadfile_from_path_end
2145   0BE9 0A CD 0B      jmp loadfile_from_path_l1
2146   0BEC             loadfile_from_path_name_equal:
2147   0BEC 33 18 00      mov bl, [d + 24]
2148   0BEF FD 87 38      and bl, %00111000             ; directory flag
2149   0BF2 C1 08         cmp bl, %00001000             ; is dir?
2150   0BF4 C6 08 0C      je loadfile_isdirectory  
2151   0BF7             ; entry is a file
2152   0BF7 2B 19 00      mov b, [d + 25]               ; get lba
2153   0BFA FD 77         inc b                         ; add 1 to b because the lba for data comes after the header sector
2154   0BFC 3B 67 33      mov d, transient_area
2155   0BFF 38 00 00      mov c, 0
2156   0C02 22 1F         mov ah, fs_sectors_per_file-1 ; number of sectors
2157   0C04 07 CF 06      call ide_read_sect            ; read sector
2158   0C07 09            ret
2159   0C08             loadfile_isdirectory:
2160   0C08 58 19 00      add d, 25           
2161   0C0B 15            mov a, [d]                    ; set result register a = dirid
2162   0C0C 07 7F 16      call get_token
2163   0C0F 0A A5 0B      jmp loadfile_from_path_e0
2164   0C12             loadfile_from_path_end:
2165   0C12 09            ret
2166   0C13             
2167   0C13             ;------------------------------------------------------------------------------------------------------;
2168   0C13             ; return the id of the current directory
2169   0C13             ; id returned in b
2170   0C13             ;------------------------------------------------------------------------------------------------------;
2171   0C13             fs_get_curr_dirid:
2172   0C13 29 33 19      mov b, [current_dir_id]
2173   0C16 06            sysret
2174   0C17             
2175   0C17             ;------------------------------------------------------------------------------------------------------;
2176   0C17             ; cd
2177   0C17             ;------------------------------------------------------------------------------------------------------;
2178   0C17             ; new dirid in b
2179   0C17             fs_cd:
2180   0C17 FD 42 33 19   mov [current_dir_id], b
2181   0C1B 06            sysret  
2182   0C1C             
2183   0C1C             ;------------------------------------------------------------------------------------------------------;
2184   0C1C             ; ls
2185   0C1C             ; dirid in b
2186   0C1C             ;------------------------------------------------------------------------------------------------------;
2187   0C1C 00 00       ls_count:       .dw 0
2188   0C1E             fs_ls:
2189   0C1E FD 77         inc b                        ; metadata sector
2190   0C20 38 00 00      mov c, 0                     ; upper lba = 0
2191   0C23 22 01         mov ah, $01                  ; 1 sector
2192   0C25 3B 67 33      mov d, transient_area
2193   0C28 07 CF 06      call ide_read_sect           ; read directory
2194   0C2B FD 10         cla
2195   0C2D 42 2B 19      mov [index], a               ; reset entry index
2196   0C30 3D 1C 0C      mov [ls_count], al           ; reset item count
2197   0C33             fs_ls_l1:
2198   0C33 BD 00         cmp byte [d], 0              ; check for null
2199   0C35 C6 CC 0C      je fs_ls_next
2200   0C38             fs_ls_non_null:
2201   0C38 1D 1C 0C      mov al, [ls_count]
2202   0C3B 7A            inc al
2203   0C3C 3D 1C 0C      mov [ls_count], al           ; increment item count
2204   0C3F 1F 18 00      mov al, [d + 24]
2205   0C42 87 38         and al, %00111000
2206   0C44 FD A2 03      shr al, 3
2207   0C47 22 00         mov ah, 0                    ; file type
2208   0C49 B7 5E 19      mov a, [a + file_type]      
2209   0C4C 23            mov ah, al
2210   0C4D 07 CD 12      call _putchar
2211   0C50 1F 18 00      mov al, [d + 24]
2212   0C53 87 01         and al, %00000001
2213   0C55 22 00         mov ah, 0
2214   0C57 B7 59 19      mov a, [a + file_attrib]     ; read
2215   0C5A 23            mov ah, al
2216   0C5B 07 CD 12      call _putchar
2217   0C5E 1F 18 00      mov al, [d + 24]
2218   0C61 87 02         and al, %00000010
2219   0C63 22 00         mov ah, 0
2220   0C65 B7 59 19      mov a, [a + file_attrib]     ; write
2221   0C68 23            mov ah, al
2222   0C69 07 CD 12      call _putchar
2223   0C6C 1F 18 00      mov al, [d + 24]
2224   0C6F 87 04         and al, %00000100
2225   0C71 22 00         mov ah, 0
2226   0C73 B7 59 19      mov a, [a + file_attrib]     ; execute
2227   0C76 23            mov ah, al
2228   0C77 07 CD 12      call _putchar
2229   0C7A 22 20         mov ah, $20
2230   0C7C 07 CD 12      call _putchar  
2231   0C7F 2B 1B 00      mov b, [d + 27]
2232   0C82 07 55 14      call print_u16x              ; filesize
2233   0C85 22 20         mov ah, $20
2234   0C87 07 CD 12      call _putchar  
2235   0C8A 2B 19 00      mov b, [d + 25]
2236   0C8D 07 55 14      call print_u16x              ; dirid / lba
2237   0C90 22 20         mov ah, $20
2238   0C92 07 CD 12      call _putchar
2239   0C95             ; print date
2240   0C95 33 1D 00      mov bl, [d + 29]             ; day
2241   0C98 07 99 14      call print_u8x
2242   0C9B 22 20         mov ah, $20
2243   0C9D 07 CD 12      call _putchar  
2244   0CA0 1F 1E 00      mov al, [d + 30]             ; month
2245   0CA3 FD 9E 02      shl al, 2
2246   0CA6 DA            push d
2247   0CA7 3B F5 1A      mov d, s_months
2248   0CAA 22 00         mov ah, 0
2249   0CAC 59            add d, a
2250   0CAD 07 F9 13      call _puts
2251   0CB0 E7            pop d
2252   0CB1 22 20         mov ah, $20
2253   0CB3 07 CD 12      call _putchar
2254   0CB6 2E 20         mov bl, $20
2255   0CB8 07 99 14      call print_u8x
2256   0CBB 33 1F 00      mov bl, [d + 31]             ; year
2257   0CBE 07 99 14      call print_u8x  
2258   0CC1 22 20         mov ah, $20
2259   0CC3 07 CD 12      call _putchar  
2260   0CC6 07 F9 13      call _puts                   ; print filename  
2261   0CC9 07 A6 13      call printnl
2262   0CCC             fs_ls_next:
2263   0CCC 14 2B 19      mov a, [index]
2264   0CCF 77            inc a
2265   0CD0 42 2B 19      mov [index], a
2266   0CD3 AF 10 00      cmp a, fst_files_per_dir
2267   0CD6 C6 DF 0C      je fs_ls_end
2268   0CD9 58 20 00      add d, 32      
2269   0CDC 0A 33 0C      jmp fs_ls_l1  
2270   0CDF             fs_ls_end:
2271   0CDF 3B 6E 19      mov d, s_ls_total
2272   0CE2 07 F9 13      call _puts
2273   0CE5 1D 1C 0C      mov al, [ls_count]
2274   0CE8 07 AB 14      call print_u8d
2275   0CEB 07 A6 13      call printnl
2276   0CEE 06            sysret
2277   0CEF             
2278   0CEF             ;------------------------------------------------------------------------------------------------------;
2279   0CEF             ; finds an empty data block
2280   0CEF             ; block lba returned in b
2281   0CEF             ;------------------------------------------------------------------------------------------------------;
2282   0CEF             fs_find_empty_block:
2283   0CEF 26 A0 00      mov b, fs_lba_start     ; raw files starting block
2284   0CF2 38 00 00      mov c, 0                ; upper lba = 0
2285   0CF5             fs_find_empty_block_l1:  
2286   0CF5 22 01         mov ah, $01                  ; 1 sector
2287   0CF7 3B 67 31      mov d, transient_area - 512
2288   0CFA 07 CF 06      call ide_read_sect      ; read sector
2289   0CFD BD 00         cmp byte [d], 0
2290   0CFF C6 08 0D      je fs_find_empty_block_found_null
2291   0D02 55 20 00      add b, fs_sectors_per_file
2292   0D05 0A F5 0C      jmp fs_find_empty_block_l1
2293   0D08             fs_find_empty_block_found_null:
2294   0D08 09            ret
2295   0D09             
2296   0D09             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2297   0D09             ;; create new textfile
2298   0D09             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2299   0D09             ; search for first null block
2300   0D09             fs_mktxt:
2301   0D09 FD 4E       	mov si, d
2302   0D0B FD 4F 67 1F 	mov di, user_data
2303   0D0F 38 00 01    	mov c, 256
2304   0D12 04          	load					; load data from user-space
2305   0D13             	
2306   0D13 26 A0 00    	mov b, fs_lba_start		; raw files starting block
2307   0D16 38 00 00    	mov c, 0						; reset lba to 0
2308   0D19             fs_mktxt_l1:	
2309   0D19 10 02 01    	mov a, $0102			; disk read
2310   0D1C 3B 67 33    	mov d, transient_area
2311   0D1F 05 02       	syscall sys_ide ; read sector
2312   0D21 1E          	mov al, [d]
2313   0D22 B9 00       	cmp al, 0			; check for null
2314   0D24 C6 2D 0D    	je fs_mktxt_found_null
2315   0D27 55 20 00    	add b, fs_sectors_per_file
2316   0D2A 0A 19 0D    	jmp fs_mktxt_l1
2317   0D2D             fs_mktxt_found_null:
2318   0D2D D8          	push b				; save lba
2319   0D2E             ;create header file by grabbing file name from parameter	
2320   0D2E 3B 4F 19    	mov d, s_dataentry
2321   0D31 07 F9 13    	call _puts
2322   0D34 3B 67 35    	mov d, transient_area + 512			; pointer to file contents
2323   0D37 07 5F 13    	call _gettxt
2324   0D3A 07 2C 12    	call _strlen						; get length of file
2325   0D3D D9          	push c							; save length
2326   0D3E 19 01       	mov al, 1
2327   0D40 3D 67 33    	mov [transient_area], al					; mark sectors as used (not null)
2328   0D43 10 00 00    	mov a, 0
2329   0D46 42 2B 19    	mov [index], a
2330   0D49 3B 67 33    	mov d, transient_area
2331   0D4C 13          	mov a, d
2332   0D4D 42 2D 19    	mov [buffer_addr], a
2333   0D50             fs_mktxt_l2:
2334   0D50 38 00 00    	mov c, 0
2335   0D53 10 03 01    	mov a, $0103			; disk write, 1 sector
2336   0D56 05 02       	syscall sys_ide		; write sector
2337   0D58 14 2B 19    	mov a, [index]
2338   0D5B 77          	inc a
2339   0D5C 42 2B 19    	mov [index], a
2340   0D5F AF 20 00    	cmp a, fs_sectors_per_file
2341   0D62 C6 74 0D    	je fs_mktxt_add_to_dir
2342   0D65 FD 77       	inc b
2343   0D67 14 2D 19    	mov a, [buffer_addr]
2344   0D6A 53 00 02    	add a, 512
2345   0D6D 42 2D 19    	mov [buffer_addr], a
2346   0D70 3C          	mov d, a
2347   0D71 0A 50 0D    	jmp fs_mktxt_l2
2348   0D74             ; now we add the file to the current directory!
2349   0D74             fs_mktxt_add_to_dir:	
2350   0D74 14 33 19    	mov a, [current_dir_id]
2351   0D77 77          	inc a
2352   0D78 27          	mov b, a					; metadata sector
2353   0D79 38 00 00    	mov c, 0
2354   0D7C FD 79       	mov g, b					; save lba
2355   0D7E 3B 67 33    	mov d, transient_area
2356   0D81 10 02 01    	mov a, $0102			; disk read
2357   0D84 05 02       	syscall sys_ide		; read metadata sector
2358   0D86             fs_mktxt_add_to_dir_l2:
2359   0D86 1E          	mov al, [d]
2360   0D87 B9 00       	cmp al, 0
2361   0D89 C6 92 0D    	je fs_mktxt_add_to_dir_null
2362   0D8C 58 20 00    	add d, fst_entry_size
2363   0D8F 0A 86 0D    	jmp fs_mktxt_add_to_dir_l2					; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
2364   0D92             fs_mktxt_add_to_dir_null:
2365   0D92 FD 4D 67 1F 	mov si, user_data
2366   0D96 FD 50       	mov di, d
2367   0D98 07 51 12    	call _strcpy			; copy file name
2368   0D9B 58 18 00    	add d, 24			; skip name
2369   0D9E 19 06       	mov al, %00000110		; no execute, write, read, not directory
2370   0DA0 3E          	mov [d], al			
2371   0DA1 58 03 00    	add d, 3
2372   0DA4 E4          	pop a
2373   0DA5 43          	mov [d], a
2374   0DA6 63 02 00    	sub d, 2
2375   0DA9 E5          	pop b				; get file lba
2376   0DAA FD 43       	mov [d], b			; save lba	
2377   0DAC             	
2378   0DAC             	; set file creation date	
2379   0DAC 58 04 00    	add d, 4
2380   0DAF 19 04       	mov al, 4
2381   0DB1 05 01       	syscall sys_rtc
2382   0DB3 1A          	mov al, ah
2383   0DB4 3E          	mov [d], al			; set day
2384   0DB5             	
2385   0DB5 79          	inc d
2386   0DB6 19 05       	mov al, 5
2387   0DB8 05 01       	syscall sys_rtc
2388   0DBA 1A          	mov al, ah
2389   0DBB 3E          	mov [d], al			; set month
2390   0DBC             	
2391   0DBC 79          	inc d
2392   0DBD 19 06       	mov al, 6
2393   0DBF 05 01       	syscall sys_rtc
2394   0DC1 1A          	mov al, ah
2395   0DC2 3E          	mov [d], al			; set year
2396   0DC3             	
2397   0DC3             ; write sector into disk for new directory entry
2398   0DC3 FD 27       	mov b, g
2399   0DC5 38 00 00    	mov c, 0
2400   0DC8 3B 67 33    	mov d, transient_area
2401   0DCB 10 03 01    	mov a, $0103			; disk write, 1 sector
2402   0DCE 05 02       	syscall sys_ide		; write sector
2403   0DD0 07 A6 13    	call printnl
2404   0DD3 06          	sysret
2405   0DD4             
2406   0DD4             
2407   0DD4             
2408   0DD4             ;------------------------------------------------------------------------------------------------------;
2409   0DD4             ; create new binary file
2410   0DD4             ;------------------------------------------------------------------------------------------------------;
2411   0DD4             ; search for first null block
2412   0DD4             fs_mkbin:
2413   0DD4 19 00         mov al, 0
2414   0DD6 3D 23 19      mov [sys_echo_on], al ; disable echo
2415   0DD9 FD 4E         mov si, d
2416   0DDB FD 4F 67 1F   mov di, user_data
2417   0DDF 38 00 02      mov c, 512
2418   0DE2 04            load                          ; load data from user-space
2419   0DE3 26 A0 00      mov b, fs_lba_start           ; files start when directories end
2420   0DE6 38 00 00      mov c, 0                      ; upper lba = 0
2421   0DE9             fs_mkbin_l1:  
2422   0DE9 22 01         mov ah, $01                  ; 1 sector
2423   0DEB 3B 67 33      mov d, transient_area
2424   0DEE 07 CF 06      call ide_read_sect            ; read sector
2425   0DF1 BD 00         cmp byte[d], 0                ; check for null
2426   0DF3 C6 FC 0D      je fs_mkbin_found_null
2427   0DF6 55 20 00      add b, fs_sectors_per_file
2428   0DF9 0A E9 0D      jmp fs_mkbin_l1
2429   0DFC             fs_mkbin_found_null:
2430   0DFC D8            push b                        ; save lba
2431   0DFD             ;create header file by grabbing file name from parameter
2432   0DFD FD 4F 67 35   mov di, transient_area + 512  ; pointer to file contents
2433   0E01 07 77 11      call _load_hex                ; load binary hex
2434   0E04 D9            push c                        ; save size (nbr of bytes)
2435   0E05 19 01         mov al, 1
2436   0E07 3D 67 33      mov [transient_area], al      ; mark sectors as used (not null)
2437   0E0A FD 10         cla
2438   0E0C 42 2B 19      mov [index], a
2439   0E0F 3B 67 33      mov d, transient_area
2440   0E12 13            mov a, d
2441   0E13 42 2D 19      mov [buffer_addr], a
2442   0E16             fs_mkbin_l2:
2443   0E16 38 00 00      mov c, 0
2444   0E19 22 01         mov ah, $01                   ; disk write, 1 sector
2445   0E1B 07 F5 06      call ide_write_sect           ; write sector
2446   0E1E 14 2B 19      mov a, [index]
2447   0E21 77            inc a
2448   0E22 42 2B 19      mov [index], a
2449   0E25 AF 20 00      cmp a, fs_sectors_per_file    ; remove 1 from this because we dont count the header sector
2450   0E28 C6 3A 0E      je fs_mkbin_add_to_dir
2451   0E2B FD 77         inc b
2452   0E2D 14 2D 19      mov a, [buffer_addr]
2453   0E30 53 00 02      add a, 512
2454   0E33 42 2D 19      mov [buffer_addr], a
2455   0E36 3C            mov d, a
2456   0E37 0A 16 0E      jmp fs_mkbin_l2
2457   0E3A             ; now we add the file to the current directory!
2458   0E3A             fs_mkbin_add_to_dir:  
2459   0E3A 14 33 19      mov a, [current_dir_id]
2460   0E3D 77            inc a
2461   0E3E 27            mov b, a                      ; metadata sector
2462   0E3F 38 00 00      mov c, 0
2463   0E42 FD 79         mov g, b                      ; save lba
2464   0E44 3B 67 33      mov d, transient_area
2465   0E47 22 01         mov ah, $01                  ; 1 sector
2466   0E49 07 CF 06      call ide_read_sect            ; read metadata sector
2467   0E4C             fs_mkbin_add_to_dir_l2:
2468   0E4C BD 00         cmp byte[d], 0
2469   0E4E C6 57 0E      je fs_mkbin_add_to_dir_null
2470   0E51 58 20 00      add d, fst_entry_size
2471   0E54 0A 4C 0E      jmp fs_mkbin_add_to_dir_l2   ; we look for a null entry here but dont check for limits. care needed when adding too many files to a directory
2472   0E57             fs_mkbin_add_to_dir_null:
2473   0E57 FD 4D 67 1F   mov si, user_data
2474   0E5B FD 50         mov di, d
2475   0E5D 07 51 12      call _strcpy                  ; copy file name
2476   0E60 58 18 00      add d, 24                     ; skip name
2477   0E63 19 03         mov al, %00000011             ; type=file, no execute, write, read, 
2478   0E65 3E            mov [d], al
2479   0E66 58 03 00      add d, 3
2480   0E69 E4            pop a
2481   0E6A 43            mov [d], a
2482   0E6B 63 02 00      sub d, 2
2483   0E6E E5            pop b                         ; get file lba
2484   0E6F FD 43         mov [d], b                    ; save lba
2485   0E71               ; set file creation date  
2486   0E71 58 04 00      add d, 4
2487   0E74 19 04         mov al, 4
2488   0E76 05 01         syscall sys_rtc
2489   0E78 1A            mov al, ah
2490   0E79 3E            mov [d], al                   ; set day
2491   0E7A 79            inc d
2492   0E7B 19 05         mov al, 5
2493   0E7D 05 01         syscall sys_rtc
2494   0E7F 1A            mov al, ah
2495   0E80 3E            mov [d], al                   ; set month
2496   0E81 79            inc d
2497   0E82 19 06         mov al, 6
2498   0E84 05 01         syscall sys_rtc
2499   0E86 1A            mov al, ah
2500   0E87 3E            mov [d], al                   ; set year
2501   0E88             ; write sector into disk for new directory entry
2502   0E88 FD 27         mov b, g
2503   0E8A 38 00 00      mov c, 0
2504   0E8D 3B 67 33      mov d, transient_area
2505   0E90 22 01         mov ah, $01                   ; disk write, 1 sector
2506   0E92 07 F5 06      call ide_write_sect           ; write sector
2507   0E95 19 01         mov al, 1
2508   0E97 3D 23 19      mov [sys_echo_on], al ; enable echo
2509   0E9A 06            sysret
2510   0E9B             
2511   0E9B             ;------------------------------------------------------------------------------------------------------;
2512   0E9B             ; pwd - print working directory
2513   0E9B             ;------------------------------------------------------------------------------------------------------;    
2514   0E9B             fs_pwd:
2515   0E9B 3B E7 1E      mov d, filename
2516   0E9E 19 00         mov al, 0
2517   0EA0 3E            mov [d], al                   ; initialize path string 
2518   0EA1 14 33 19      mov a, [current_dir_id]
2519   0EA4 07 05 0A      call fs_dir_id_to_path_e0
2520   0EA7 3B E7 1E      mov d, filename
2521   0EAA 07 E5 11      call _strrev
2522   0EAD 07 F9 13      call _puts
2523   0EB0 07 A6 13      call printnl
2524   0EB3 06            sysret
2525   0EB4             
2526   0EB4             ;------------------------------------------------------------------------------------------------------;
2527   0EB4             ; get current directory lba
2528   0EB4             ; a: returned lba
2529   0EB4             ;------------------------------------------------------------------------------------------------------;
2530   0EB4             cmd_get_curr_dir_lba:
2531   0EB4 14 33 19      mov a, [current_dir_id]
2532   0EB7 06            sysret
2533   0EB8             
2534   0EB8             ;------------------------------------------------------------------------------------------------------;
2535   0EB8             ; cat
2536   0EB8             ; userspace destination data pointer in d
2537   0EB8             ; filename starts at d, but is overwritten after the read is made
2538   0EB8             ;------------------------------------------------------------------------------------------------------;:
2539   0EB8             fs_cat:
2540   0EB8 DA            push d                              ; save userspace file data destination
2541   0EB9 FD 4E         mov si, d
2542   0EBB FD 4F 67 1F   mov di, user_data
2543   0EBF 38 00 02      mov c, 512
2544   0EC2 04            load                                ; copy filename from user-space
2545   0EC3 29 33 19      mov b, [current_dir_id]
2546   0EC6 FD 77         inc b                               ; metadata sector
2547   0EC8 38 00 00      mov c, 0                            ; upper lba = 0
2548   0ECB 22 01         mov ah, $01                  ; 1 sector
2549   0ECD 3B 67 31      mov d, transient_area-512
2550   0ED0 07 CF 06      call ide_read_sect                  ; read directory
2551   0ED3 FD 10         cla
2552   0ED5 42 2B 19      mov [index], a                      ; reset file counter
2553   0ED8             fs_cat_l1:
2554   0ED8 FD 4E         mov si, d
2555   0EDA FD 4F 67 1F   mov di, user_data
2556   0EDE 07 3C 12      call _strcmp
2557   0EE1 C6 F7 0E      je fs_cat_found_entry
2558   0EE4 58 20 00      add d, 32
2559   0EE7 14 2B 19      mov a, [index]
2560   0EEA 77            inc a
2561   0EEB 42 2B 19      mov [index], a
2562   0EEE AF 10 00      cmp a, fst_files_per_dir
2563   0EF1 C6 12 0F      je fs_cat_not_found
2564   0EF4 0A D8 0E      jmp fs_cat_l1
2565   0EF7             fs_cat_found_entry:
2566   0EF7 58 19 00      add d, 25                           ; get to dirid of file in disk
2567   0EFA 2A            mov b, [d]                          ; get lba
2568   0EFB FD 77         inc b                               ; add 1 to b because the lba for data comes after the header sector 
2569   0EFD 3B 67 33      mov d, transient_area  
2570   0F00 38 00 00      mov c, 0
2571   0F03 22 1F         mov ah, fs_sectors_per_file-1       ; nbr sectors
2572   0F05 07 CF 06      call ide_read_sect                  ; read sectors
2573   0F08 F0            pop di                              ; write userspace file data destination to di
2574   0F09 FD 4D 67 33   mov si, transient_area              ; data origin
2575   0F0D 38 00 3E      mov c, 512*(fs_sectors_per_file-1)
2576   0F10 03            store
2577   0F11 06            sysret
2578   0F12             fs_cat_not_found:
2579   0F12 E7            pop d
2580   0F13 06            sysret
2581   0F14             
2582   0F14             ;------------------------------------------------------------------------------------------------------;
2583   0F14             ; rmdir - remove dir by dirid
2584   0F14             ;------------------------------------------------------------------------------------------------------;
2585   0F14             ; deletes a directory entry in the given directory's file list 
2586   0F14             ; also deletes the actual directory entry in the fst
2587   0F14             ; synopsis: rmdir /usr/local/testdir
2588   0F14             ; b = dirid
2589   0F14             fs_rmdir:
2590   0F14 FD 79         mov g, b
2591   0F16 11            mov a, b
2592   0F17 07 41 0A      call get_parentid_from_dirid  ; now get the directory's parent, in a
2593   0F1A D7            push a                        ; save dirid
2594   0F1B             ; search for directory's entry in the parent's directory then and delete it
2595   0F1B 77            inc a                         ; metadata sector
2596   0F1C 27            mov b, a
2597   0F1D 38 00 00      mov c, 0                      ; upper lba = 0
2598   0F20 22 01         mov ah, $01          ;
2599   0F22 3B 67 33      mov d, transient_area
2600   0F25 07 CF 06      call ide_read_sect            ; read directory
2601   0F28 FD 10         cla
2602   0F2A 42 2B 19      mov [index], a                ; reset file counter
2603   0F2D FD 27         mov b, g                      ; retrieve directory's dirid
2604   0F2F             fs_rmdir_l1:
2605   0F2F 16 19 00      mov a, [d + 25]               ; get entry's dirid/lba value
2606   0F32 B0            cmp a, b                      ; compare dirid's to find the directory
2607   0F33 C6 49 0F      je fs_rmdir_found_entry
2608   0F36 58 20 00      add d, 32
2609   0F39 14 2B 19      mov a, [index]
2610   0F3C 77            inc a
2611   0F3D 42 2B 19      mov [index], a
2612   0F40 AF 10 00      cmp a, fst_files_per_dir
2613   0F43 C6 6E 0F      je fs_rmdir_not_found
2614   0F46 0A 2F 0F      jmp fs_rmdir_l1
2615   0F49             fs_rmdir_found_entry:
2616   0F49 FD 10         cla
2617   0F4B 3E            mov [d], al                   ; make filename null
2618   0F4C 44 19 00      mov [d + 25], a               ; clear dirid/lba as well not to generate problems with previously deleted directories
2619   0F4F E5            pop b
2620   0F50 FD 77         inc b                         ; metadata sector
2621   0F52 38 00 00      mov c, 0                      ; upper lba = 0
2622   0F55 22 01         mov ah, $01          ; 
2623   0F57 3B 67 33      mov d, transient_area
2624   0F5A 07 F5 06      call ide_write_sect           ; write sector and erase file's entry in the current dir
2625   0F5D             
2626   0F5D FD 27         mov b, g
2627   0F5F 3B 67 33      mov d, transient_area  
2628   0F62 FD 10         cla
2629   0F64 3E            mov [d], al                   ; make directory's name header null for re-use
2630   0F65 38 00 00      mov c, 0
2631   0F68 22 01         mov ah, $01                   ; disk write 1 sect
2632   0F6A 07 F5 06      call ide_write_sect           ; delete directory given by dirid in b
2633   0F6D 06            sysret
2634   0F6E             fs_rmdir_not_found:
2635   0F6E E5            pop b
2636   0F6F 06            sysret
2637   0F70             
2638   0F70             ;------------------------------------------------------------------------------------------------------;
2639   0F70             ; rm - remove file
2640   0F70             ;------------------------------------------------------------------------------------------------------;
2641   0F70             ; frees up the data sectors for the file further down the disk
2642   0F70             ; deletes file entry in the directory's file list 
2643   0F70             fs_rm:
2644   0F70 FD 4E         mov si, d
2645   0F72 FD 4F 67 1F   mov di, user_data
2646   0F76 38 00 02      mov c, 512
2647   0F79 04            load                          ; load data from user-space
2648   0F7A 14 33 19      mov a, [current_dir_id]
2649   0F7D 77            inc a                         ; metadata sector
2650   0F7E 27            mov b, a
2651   0F7F 38 00 00      mov c, 0                      ; upper lba = 0
2652   0F82 22 01         mov ah, $01                  ; 1 sector
2653   0F84 3B 67 33      mov d, transient_area
2654   0F87 07 CF 06      call ide_read_sect            ; read directory
2655   0F8A 10 00 00      mov a, 0
2656   0F8D 42 2B 19      mov [index], a                ; reset file counter
2657   0F90             fs_rm_l1:
2658   0F90 FD 4E         mov si, d
2659   0F92 FD 4F 67 1F   mov di, user_data
2660   0F96 07 3C 12      call _strcmp
2661   0F99 C6 AF 0F      je fs_rm_found_entry
2662   0F9C 58 20 00      add d, 32
2663   0F9F 14 2B 19      mov a, [index]
2664   0FA2 77            inc a
2665   0FA3 42 2B 19      mov [index], a
2666   0FA6 AF 10 00      cmp a, fst_files_per_dir
2667   0FA9 C6 D7 0F      je fs_rm_not_found
2668   0FAC 0A 90 0F      jmp fs_rm_l1
2669   0FAF             fs_rm_found_entry:
2670   0FAF 2B 19 00      mov b, [d + 25]               ; get lba
2671   0FB2 FD 79         mov g, b                      ; save lba
2672   0FB4 19 00         mov al, 0
2673   0FB6 3E            mov [d], al                   ; make file entry null
2674   0FB7 14 33 19      mov a, [current_dir_id]
2675   0FBA 77            inc a                         ; metadata sector
2676   0FBB 27            mov b, a
2677   0FBC 38 00 00      mov c, 0                      ; upper lba = 0
2678   0FBF 22 01         mov ah, $01                   ; disk write
2679   0FC1 3B 67 33      mov d, transient_area
2680   0FC4 07 F5 06      call ide_write_sect           ; write sector and erase file's entry in the current dir
2681   0FC7 3B 67 33      mov d, transient_area  
2682   0FCA 19 00         mov al, 0
2683   0FCC 3E            mov [d], al                   ; make file's data header null for re-use
2684   0FCD 38 00 00      mov c, 0
2685   0FD0 FD 27         mov b, g                      ; get data header lba
2686   0FD2 22 01         mov ah, $01                   ; disk write 1 sect
2687   0FD4 07 F5 06      call ide_write_sect           ; write sector
2688   0FD7             fs_rm_not_found:  
2689   0FD7 06            sysret  
2690   0FD8             
2691   0FD8             ;------------------------------------------------------------------------------------------------------;
2692   0FD8             ; mv - move / change file name
2693   0FD8             ;------------------------------------------------------------------------------------------------------;
2694   0FD8             fs_mv:
2695   0FD8 FD 4E         mov si, d
2696   0FDA FD 4F 67 1F   mov di, user_data
2697   0FDE 38 00 02      mov c, 512
2698   0FE1 04            load                          ; load data from user-space
2699   0FE2 14 33 19      mov a, [current_dir_id]
2700   0FE5 77            inc a                         ; metadata sector
2701   0FE6 27            mov b, a  
2702   0FE7 38 00 00      mov c, 0                      ; upper lba = 0
2703   0FEA 22 01         mov ah, $01                  ; 1 sector
2704   0FEC 3B 67 33      mov d, transient_area
2705   0FEF 07 CF 06      call ide_read_sect            ; read directory
2706   0FF2 FD 10         cla
2707   0FF4 42 2B 19      mov [index], a                ; reset file counter
2708   0FF7             fs_mv_l1:
2709   0FF7 FD 4E         mov si, d
2710   0FF9 FD 4F 67 1F   mov di, user_data
2711   0FFD 07 3C 12      call _strcmp
2712   1000 C6 16 10      je fs_mv_found_entry
2713   1003 58 20 00      add d, 32
2714   1006 14 2B 19      mov a, [index]
2715   1009 77            inc a
2716   100A 42 2B 19      mov [index], a
2717   100D AF 10 00      cmp a, fst_files_per_dir
2718   1010 C6 48 10      je fs_mv_not_found
2719   1013 0A F7 0F      jmp fs_mv_l1
2720   1016             fs_mv_found_entry:  
2721   1016 DA            push d
2722   1017 FD 4D E7 1F   mov si, user_data + 128       ; (0...127) = original filename , (128...255) = new name
2723   101B FD 50         mov di, d
2724   101D 07 51 12      call _strcpy  
2725   1020 38 00 00      mov c, 0
2726   1023 3B 67 33      mov d, transient_area
2727   1026 22 01         mov ah, $01                   ; disk write 1 sect
2728   1028 07 F5 06      call ide_write_sect           ; write sector
2729   102B E7            pop d
2730   102C             ;; need to check whether its a dir or a file here ;;;
2731   102C 2B 19 00      mov b, [d + 25]               ; get the dirid of the directory so we can locate its own entry in the list
2732   102F 22 01         mov ah, $01
2733   1031 3B 67 33      mov d, transient_area
2734   1034 38 00 00      mov c, 0
2735   1037 07 CF 06      call ide_read_sect            ; read directory entry
2736   103A FD 4D E7 1F   mov si, user_data + 128
2737   103E FD 50         mov di, d
2738   1040 07 51 12      call _strcpy                  ; change directory's name
2739   1043 22 01         mov ah, $01
2740   1045 07 F5 06      call ide_write_sect           ; rewrite directory back to disk
2741   1048             fs_mv_not_found:
2742   1048 06            sysret
2743   1049             
2744   1049             
2745   1049             ;----------------------------------------------------------------------------------------------------;
2746   1049             ; process index in a
2747   1049             ;----------------------------------------------------------------------------------------------------;
2748   1049             find_free_proc:
2749   1049 FD 4D D8 1C   mov si, proc_availab_table + 1      ; skip process 0 (kernel)
2750   104D             find_free_proc_l0:
2751   104D F6            lodsb                               ; get process state
2752   104E B9 00         cmp al, 0
2753   1050 C6 56 10      je find_free_proc_free              ; if free, jump
2754   1053 0A 4D 10      jmp find_free_proc_l0               ; else, goto next
2755   1056             find_free_proc_free:
2756   1056 4E            mov a, si
2757   1057 5F D8 1C      sub a, 1 + proc_availab_table       ; get process index
2758   105A 09            ret
2759   105B               
2760   105B             
2761   105B             ;----------------------------------------------------------------------------------------------------;
2762   105B             ; process index in al
2763   105B             ;----------------------------------------------------------------------------------------------------;
2764   105B             proc_memory_map:
2765   105B 22 00         mov ah, 0
2766   105D 27            mov b, a                      ; page in bl, 0 in bh
2767   105E FD 9D 05      shl a, 5                      ; multiply by 32
2768   1061 39            mov c, a                      ; save in c
2769   1062 57 20 00      add c, 32
2770   1065             proc_memory_map_l0:
2771   1065 02            pagemap
2772   1066 55 00 08      add b, $0800                  ; increase page number (msb 5 bits of bh only)
2773   1069 53 01 00      add a, 1                      ; increase both 
2774   106C B1            cmp a, c                      ; check to see if we reached the end of memory
2775   106D C7 65 10      jne proc_memory_map_l0
2776   1070 09            ret
2777   1071               
2778   1071             
2779   1071             ;----------------------------------------------------------------------------------------------------;
2780   1071             ; terminate process
2781   1071             ;----------------------------------------------------------------------------------------------------;
2782   1071             syscall_terminate_proc:
2783   1071 51 05 00      add sp, 5                            ; clear stack of the values that were pushed by the interrupt (sp, status, pc)
2784   1074                                                    ; since they will not be used for anything here.
2785   1074 1D 2A 19      mov al, [active_proc_index]
2786   1077 22 00         mov ah, 0  
2787   1079 FD 9D 05      shl a, 5                             ; x32
2788   107C 53 E7 1C      add a, proc_names
2789   107F 3C            mov d, a
2790   1080 19 00         mov al, 0
2791   1082 3E            mov [d], al                           ; nullify process name
2792   1083             
2793   1083 1D 2A 19      mov al, [active_proc_index]
2794   1086 22 00         mov ah, 0  
2795   1088 3C            mov d, a
2796   1089 19 00         mov al, 0
2797   108B 3F D7 1C      mov [d + proc_availab_table], al    ; make process empty again
2798   108E               
2799   108E 1D 29 19      mov al, [nbr_active_procs]          ; decrease nbr of active processes
2800   1091 80            dec al
2801   1092 3D 29 19      mov [nbr_active_procs], al
2802   1095             
2803   1095             ; now load the shell process again
2804   1095 19 02         mov al, 2                           ; next process = process 2 = shell
2805   1097 3D 2A 19      mov [active_proc_index], al         ; set next active proc
2806   109A             
2807   109A             ; calculate lut entry for next process
2808   109A 22 00         mov ah, 0
2809   109C FD 99         shl a                               ; x2
2810   109E B7 67 11      mov a, [proc_table_convert + a]     ; get process state start index  
2811   10A1               
2812   10A1 4D            mov si, a                           ; source is proc state block
2813   10A2 48            mov a, sp
2814   10A3 5F 13 00      sub a, 19
2815   10A6 4F            mov di, a                           ; destination is kernel stack
2816   10A7             ; restore sp
2817   10A7 7D            dec a
2818   10A8 47            mov sp, a
2819   10A9 38 14 00      mov c, 20
2820   10AC FD F5         rep movsb
2821   10AE             ; set vm process
2822   10AE 1D 2A 19      mov al, [active_proc_index]
2823   10B1 01            setptb
2824   10B2                 
2825   10B2 4C            popa
2826   10B3 06            sysret
2827   10B4             
2828   10B4             ;----------------------------------------------------------------------------------------------------;
2829   10B4             ; pause process
2830   10B4             ;----------------------------------------------------------------------------------------------------;
2831   10B4             syscall_pause_proc:
2832   10B4             ; save all registers into kernel stack
2833   10B4 4B            pusha
2834   10B5 22 00         mov ah, 0
2835   10B7 1D 2A 19      mov al, [active_proc_index]
2836   10BA FD 99         shl a              ; x2
2837   10BC B7 67 11      mov a, [proc_table_convert + a]   ; get process state start index
2838   10BF                 
2839   10BF 4F            mov di, a
2840   10C0 48            mov a, sp
2841   10C1 77            inc a
2842   10C2 4D            mov si, a
2843   10C3 38 14 00      mov c, 20
2844   10C6 FD F5         rep movsb                         ; save process state!
2845   10C8             ; restore kernel stack position to point before interrupt arrived
2846   10C8 51 14 00      add sp, 20
2847   10CB             ; now load the shell process again
2848   10CB 19 02         mov al, 2                         ; next process = process 2 = shell
2849   10CD 3D 2A 19      mov [active_proc_index], al       ; set next active proc
2850   10D0             
2851   10D0             ; calculate lut entry for next process
2852   10D0 22 00         mov ah, 0
2853   10D2 FD 99         shl a                             ; x2
2854   10D4 B7 67 11      mov a, [proc_table_convert + a]   ; get process state start index  
2855   10D7               
2856   10D7 4D            mov si, a                         ; source is proc state block
2857   10D8 48            mov a, sp
2858   10D9 5F 13 00      sub a, 19
2859   10DC 4F            mov di, a                         ; destination is kernel stack
2860   10DD             ; restore sp
2861   10DD 7D            dec a
2862   10DE 47            mov sp, a
2863   10DF 38 14 00      mov c, 20
2864   10E2 FD F5         rep movsb
2865   10E4             ; set vm process
2866   10E4 1D 2A 19      mov al, [active_proc_index]
2867   10E7 01            setptb
2868   10E8                 
2869   10E8 4C            popa
2870   10E9 06            sysret
2871   10EA             
2872   10EA             ;----------------------------------------------------------------------------------------------------;
2873   10EA             ; create a new process
2874   10EA             ; d = path of the process file to be createed
2875   10EA             ; b = arguments ptr
2876   10EA             ;----------------------------------------------------------------------------------------------------;
2877   10EA             syscall_create_proc:
2878   10EA             ; we save the active process first  
2879   10EA 4B            pusha
2880   10EB 22 00         mov ah, 0
2881   10ED 1D 2A 19      mov al, [active_proc_index]
2882   10F0 FD 99         shl a              ; x2
2883   10F2 B7 67 11      mov a, [proc_table_convert + a]    ; get process state table's start index
2884   10F5               
2885   10F5 4F            mov di, a
2886   10F6 48            mov a, sp
2887   10F7 77            inc a
2888   10F8 4D            mov si, a
2889   10F9 38 14 00      mov c, 20
2890   10FC FD F5         rep movsb                          ; save process state!
2891   10FE             ; restore kernel stack position to point before interrupt arrived
2892   10FE 51 14 00      add sp, 20
2893   1101               
2894   1101 FD 4E         mov si, d                          ; copy the file path
2895   1103 FD 4F 67 1F   mov di, user_data
2896   1107 38 00 02      mov c, 512
2897   110A 04            load
2898   110B 11            mov a, b
2899   110C 4D            mov si, a                          ; copy the arguments
2900   110D FD 4F 67 31   mov di, scrap_sector
2901   1111 38 00 02      mov c, 512
2902   1114 04            load
2903   1115 07 87 0B      call loadfile_from_path            ; load the process file from disk by path (path is in user_data)
2904   1118                                                  ; the file data is loaded into transient_area
2905   1118             ; now we allocate a new process  
2906   1118 07 49 10      call find_free_proc                ; index in a
2907   111B 01            setptb 
2908   111C 07 5B 10      call proc_memory_map               ; map process memory pages
2909   111F             ; copy arguments into process's memory
2910   111F FD 4D 67 31   mov si, scrap_sector
2911   1123 FD 4F 00 00   mov di, 0
2912   1127 38 00 02      mov c, 512
2913   112A 03            store
2914   112B             ; now copy process binary data into process's memory
2915   112B FD 4D 67 33   mov si, transient_area
2916   112F FD 4F 00 04   mov di, text_org                   ; code origin address for all user processes
2917   1133 38 00 40      mov c, fs_file_size                ; size of memory space to copy, which is equal to the max file size in disk (for now)
2918   1136 03            store                              ; copy process data
2919   1137                 
2920   1137 07 49 10      call find_free_proc                ; index in a
2921   113A 3D 2A 19      mov [active_proc_index], al        ; set new active process
2922   113D FD 9D 05      shl a, 5                           ; x32
2923   1140 53 E7 1C      add a, proc_names
2924   1143 4F            mov di, a
2925   1144 FD 4D 67 1F   mov si, user_data                  ; copy and store process filename
2926   1148 07 51 12      call _strcpy
2927   114B               
2928   114B 07 49 10      call find_free_proc                ; index in a
2929   114E 3C            mov d, a
2930   114F 19 01         mov al, 1
2931   1151 3F D7 1C      mov [d + proc_availab_table], al   ; make process busy
2932   1154               
2933   1154 1D 29 19      mov al, [nbr_active_procs]         ; increase nbr of active processes
2934   1157 7A            inc al
2935   1158 3D 29 19      mov [nbr_active_procs], al
2936   115B             ; launch process
2937   115B FD D7 FF FF   push word $ffff 
2938   115F FD DB 0E      push byte %00001110                ; dma_ack = 0, interrupts enabled = 1, mode = user, paging = on, halt=0, display_reg_load=0, dir=0
2939   1162 FD D7 00 04   push word text_org
2940   1166 06            sysret
2941   1167             
2942   1167             proc_table_convert:
2943   1167 97 1B         .dw proc_state_table + 0
2944   1169 AB 1B         .dw proc_state_table + 20
2945   116B BF 1B         .dw proc_state_table + 40
2946   116D D3 1B         .dw proc_state_table + 60
2947   116F E7 1B         .dw proc_state_table + 80
2948   1171 FB 1B         .dw proc_state_table + 100
2949   1173 0F 1C         .dw proc_state_table + 120
2950   1175 23 1C         .dw proc_state_table + 140
2951   1177               
2952   1177             ;----------------------------------------------------------------------------------------------;
2953   1177             ; get hex file
2954   1177             ; di = destination address
2955   1177             ; return length in bytes in c
2956   1177             ;----------------------------------------------------------------------------------------------;
2957   1177             _load_hex:
2958   1177 D7            push a
2959   1178 D8            push b
2960   1179 DA            push d
2961   117A E2            push si
2962   117B E3            push di
2963   117C 38 00 00      mov c, 0
2964   117F 50            mov a, di
2965   1180 3C            mov d, a          ; start of string data block
2966   1181 07 D4 12      call _gets        ; get program string
2967   1184 4D            mov si, a
2968   1185             __load_hex_loop:
2969   1185 F6            lodsb             ; load from [si] to al
2970   1186 B9 00         cmp al, 0         ; check if ascii 0
2971   1188 C6 96 11      jz __load_hex_ret
2972   118B 36            mov bh, al
2973   118C F6            lodsb
2974   118D 2F            mov bl, al
2975   118E 07 8A 12      call _atoi        ; convert ascii byte in b to int (to al)
2976   1191 F7            stosb             ; store al to [di]
2977   1192 78            inc c
2978   1193 0A 85 11      jmp __load_hex_loop
2979   1196             __load_hex_ret:
2980   1196 F0            pop di
2981   1197 EF            pop si
2982   1198 E7            pop d
2983   1199 E5            pop b
2984   119A E4            pop a
2985   119B 09            ret
2986   119C             
2987   119C             ; synopsis: look inside a certain directory for files/directories
2988   119C             ; before calling this function, cd into required directory
2989   119C             ; for each entry inside directory:
2990   119C             ;  if entry is a file:
2991   119C             ;    compare filename to searched filename
2992   119C             ;    if filenames are the same, print filename
2993   119C             ;  else if entry is a directory:
2994   119C             ;    cd to the given directory
2995   119C             ;    recursively call cmd_find
2996   119C             ;    cd outside previous directory
2997   119C             ;  if current entry == last entry, return
2998   119C             ; endfor
2999   119C             f_find:
3000   119C 09            ret
3001   119D             
3002   119D             
3003   119D             ; ---------------------------------------------------------------------
3004   119D             ; kernel reset vector
3005   119D             ; ---------------------------------------------------------------------
3006   119D             kernel_reset_vector:  
3007   119D FD 49 FF F7   mov bp, _stack_begin
3008   11A1 FD 47 FF F7   mov sp, _stack_begin
3009   11A5               
3010   11A5 19 81         mov al, %10000001             ; mask out timer interrupt for now - enable uart and fdc irqs 
3011   11A7 FD 0F         stomsk                        
3012   11A9 FD 0C         sti  
3013   11AB             
3014   11AB 0C            lodstat
3015   11AC 87 DF         and al, %11011111             ; disable display register loading
3016   11AE 0D            stostat
3017   11AF               
3018   11AF             ; reset fifo pointers
3019   11AF 10 67 21      mov a, fifo
3020   11B2 3B 2F 19      mov d, fifo_in
3021   11B5 43            mov [d], a
3022   11B6 3B 31 19      mov d, fifo_out
3023   11B9 43            mov [d], a  
3024   11BA 19 02         mov al, 2
3025   11BC 05 03         syscall sys_io                ; enable uart in interrupt mode
3026   11BE             
3027   11BE 3B 84 19      mov d, s_kernel_welcome
3028   11C1 07 F9 13      call _puts
3029   11C4             
3030   11C4 3B 56 1B      mov d, s_fdc_config
3031   11C7 07 F9 13      call _puts
3032   11CA F2 C0 FF 0D   mov byte [_fdc_config], %00001101  ; %00001001 : turn led on / head load, disable double density, select side 0, select drive 0, do not select drive 1
3033   11CE F2 C8 FF 0B   mov byte [_fdc_stat_cmd], %00001011     ; leave this restore command in order to clear BUSY flag
3034   11D2 F2 C9 FF 00   mov byte [_fdc_track], $00 ; reset track
3035   11D6             
3036   11D6 19 10         mov al, 16
3037   11D8 05 04         syscall sys_filesystem        ; set root dirid
3038   11DA             
3039   11DA 3B 79 1A      mov d, s_prompt_init
3040   11DD 07 F9 13      call _puts
3041   11E0 3B 35 19      mov d, s_init_path
3042   11E3 05 05         syscall sys_create_proc       ; launch init as a new process
3043   11E5             
3044   11E5             ; file includes
3045   11E5             .include "bios.exp"         ; to obtain the bios_reset_vector location (for reboots)
0001+  11E5             boot_origin      .EQU  $8004
0002+  11E5             bios_uart        .EQU  $0002
0003+  11E5             bios_ide         .EQU  $0003
0004+  11E5             bios_reset_vector .EQU  $01c0
0005+  11E5             ide_buffer       .EQU  $8204
3046   11E5             .include "lib/stdio.asm"
0001+  11E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  11E5             ; stdio.s
0003+  11E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  11E5             .include "lib/string.asm"
0001++ 11E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 11E5             ; string.s
0003++ 11E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 11E5             
0005++ 11E5             
0006++ 11E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 11E5             ; _strrev
0008++ 11E5             ; reverse a string
0009++ 11E5             ; d = string address
0010++ 11E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 11E5             ; 01234
0012++ 11E5             _strrev:
0013++ 11E5 4B          	pusha
0014++ 11E6 07 2C 12    	call _strlen	; length in c
0015++ 11E9 12          	mov a, c
0016++ 11EA AF 01 00    	cmp a, 1
0017++ 11ED D0 07 12    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 11F0 7D          	dec a
0019++ 11F1 FD 4E       	mov si, d	; beginning of string
0020++ 11F3 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 11F5 59          	add d, a	; end of string
0022++ 11F6 12          	mov a, c
0023++ 11F7 FD 9B       	shr a		; divide by 2
0024++ 11F9 39          	mov c, a	; c now counts the steps
0025++ 11FA             _strrev_l0:
0026++ 11FA 32          	mov bl, [d]	; save load right-side char into bl
0027++ 11FB F6          	lodsb		; load left-side char into al; increase si
0028++ 11FC 3E          	mov [d], al	; store left char into right side
0029++ 11FD 1B          	mov al, bl
0030++ 11FE F7          	stosb		; store right-side char into left-side; increase di
0031++ 11FF 7E          	dec c
0032++ 1200 7F          	dec d
0033++ 1201 C2 00 00    	cmp c, 0
0034++ 1204 C7 FA 11    	jne _strrev_l0
0035++ 1207             _strrev_end:
0036++ 1207 4C          	popa
0037++ 1208 09          	ret
0038++ 1209             	
0039++ 1209             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1209             ; _strchr
0041++ 1209             ; search string in d for char in al
0042++ 1209             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1209             _strchr:
0044++ 1209             _strchr_l0:
0045++ 1209 32          	mov bl, [d]
0046++ 120A C1 00       	cmp bl, 0
0047++ 120C C6 17 12    	je _strchr_end
0048++ 120F BA          	cmp al, bl
0049++ 1210 C6 17 12    	je _strchr_end
0050++ 1213 79          	inc d
0051++ 1214 0A 09 12    	jmp _strchr_l0
0052++ 1217             _strchr_end:
0053++ 1217 1B          	mov al, bl
0054++ 1218 09          	ret
0055++ 1219             
0056++ 1219             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1219             ; _strstr
0058++ 1219             ; find sub-string
0059++ 1219             ; str1 in si
0060++ 1219             ; str2 in di
0061++ 1219             ; si points to end of source string
0062++ 1219             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1219             _strstr:
0064++ 1219 DB          	push al
0065++ 121A DA          	push d
0066++ 121B E3          	push di
0067++ 121C             _strstr_loop:
0068++ 121C F3          	cmpsb					; compare a byte of the strings
0069++ 121D C7 28 12    	jne _strstr_ret
0070++ 1220 FC 00 00    	lea d, [di + 0]
0071++ 1223 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1225 C7 1C 12    	jne _strstr_loop				; equal chars but not at end
0073++ 1228             _strstr_ret:
0074++ 1228 F0          	pop di
0075++ 1229 E7          	pop d
0076++ 122A E8          	pop al
0077++ 122B 09          	ret
0078++ 122C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 122C             ; length of null terminated string
0080++ 122C             ; result in c
0081++ 122C             ; pointer in d
0082++ 122C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 122C             _strlen:
0084++ 122C DA          	push d
0085++ 122D 38 00 00    	mov c, 0
0086++ 1230             _strlen_l1:
0087++ 1230 BD 00       	cmp byte [d], 0
0088++ 1232 C6 3A 12    	je _strlen_ret
0089++ 1235 79          	inc d
0090++ 1236 78          	inc c
0091++ 1237 0A 30 12    	jmp _strlen_l1
0092++ 123A             _strlen_ret:
0093++ 123A E7          	pop d
0094++ 123B 09          	ret
0095++ 123C             
0096++ 123C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 123C             ; strcmp
0098++ 123C             ; compare two strings
0099++ 123C             ; str1 in si
0100++ 123C             ; str2 in di
0101++ 123C             ; create a string compairon instrucion ?????
0102++ 123C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 123C             _strcmp:
0104++ 123C DB          	push al
0105++ 123D DA          	push d
0106++ 123E E3          	push di
0107++ 123F E2          	push si
0108++ 1240             _strcmp_loop:
0109++ 1240 F3          	cmpsb					; compare a byte of the strings
0110++ 1241 C7 4C 12    	jne _strcmp_ret
0111++ 1244 FB FF FF    	lea d, [si +- 1]
0112++ 1247 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1249 C7 40 12    	jne _strcmp_loop				; equal chars but not at end
0114++ 124C             _strcmp_ret:
0115++ 124C EF          	pop si
0116++ 124D F0          	pop di
0117++ 124E E7          	pop d
0118++ 124F E8          	pop al
0119++ 1250 09          	ret
0120++ 1251             
0121++ 1251             
0122++ 1251             ; strcpy
0123++ 1251             ; copy null terminated string from si to di
0124++ 1251             ; source in si
0125++ 1251             ; destination in di
0126++ 1251             _strcpy:
0127++ 1251 E2          	push si
0128++ 1252 E3          	push di
0129++ 1253 DB          	push al
0130++ 1254             _strcpy_l1:
0131++ 1254 F6          	lodsb
0132++ 1255 F7          	stosb
0133++ 1256 B9 00       	cmp al, 0
0134++ 1258 C7 54 12    	jne _strcpy_l1
0135++ 125B             _strcpy_end:
0136++ 125B E8          	pop al
0137++ 125C F0          	pop di
0138++ 125D EF          	pop si
0139++ 125E 09          	ret
0140++ 125F             
0141++ 125F             ; strcat
0142++ 125F             ; concatenate a null terminated string into string at di, from string at si
0143++ 125F             ; source in si
0144++ 125F             ; destination in di
0145++ 125F             _strcat:
0146++ 125F E2          	push si
0147++ 1260 E3          	push di
0148++ 1261 D7          	push a
0149++ 1262 DA          	push d
0150++ 1263 50          	mov a, di
0151++ 1264 3C          	mov d, a
0152++ 1265             _strcat_goto_end_l1:
0153++ 1265 BD 00       	cmp byte[d], 0
0154++ 1267 C6 6E 12    	je _strcat_start
0155++ 126A 79          	inc d
0156++ 126B 0A 65 12    	jmp _strcat_goto_end_l1
0157++ 126E             _strcat_start:
0158++ 126E FD 50       	mov di, d
0159++ 1270             _strcat_l1:
0160++ 1270 F6          	lodsb
0161++ 1271 F7          	stosb
0162++ 1272 B9 00       	cmp al, 0
0163++ 1274 C7 70 12    	jne _strcat_l1
0164++ 1277             _strcat_end:
0165++ 1277 E7          	pop d
0166++ 1278 E4          	pop a
0167++ 1279 F0          	pop di
0168++ 127A EF          	pop si
0169++ 127B 09          	ret
0170++ 127C             
0171++ 127C             
0005+  127C             
0006+  127C             
0007+  127C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  127C             ; convert ascii 'o'..'f' to integer 0..15
0009+  127C             ; ascii in bl
0010+  127C             ; result in al
0011+  127C             ; ascii for f = 0100 0110
0012+  127C             ; ascii for 9 = 0011 1001
0013+  127C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  127C             hex_ascii_encode:
0015+  127C 1B            mov al, bl
0016+  127D 93 40         test al, $40        ; test if letter or number
0017+  127F C7 85 12      jnz hex_letter
0018+  1282 87 0F         and al, $0f        ; get number
0019+  1284 09            ret
0020+  1285             hex_letter:
0021+  1285 87 0F         and al, $0f        ; get letter
0022+  1287 6A 09         add al, 9
0023+  1289 09            ret
0024+  128A             
0025+  128A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  128A             ; atoi
0027+  128A             ; 2 letter hex string in b
0028+  128A             ; 8bit integer returned in al
0029+  128A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  128A             _atoi:
0031+  128A D8            push b
0032+  128B 07 7C 12      call hex_ascii_encode      ; convert bl to 4bit code in al
0033+  128E 30            mov bl, bh
0034+  128F DB            push al          ; save a
0035+  1290 07 7C 12      call hex_ascii_encode
0036+  1293 EA            pop bl  
0037+  1294 FD 9E 04      shl al, 4
0038+  1297 8C            or al, bl
0039+  1298 E5            pop b
0040+  1299 09            ret  
0041+  129A             
0042+  129A             
0043+  129A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  129A             ; scanf
0045+  129A             ; no need for explanations!
0046+  129A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  129A             scanf:
0048+  129A 09            ret
0049+  129B             
0050+  129B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  129B             ; itoa
0052+  129B             ; 8bit value in bl
0053+  129B             ; 2 byte ascii result in a
0054+  129B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  129B             _itoa:
0056+  129B DA            push d
0057+  129C D8            push b
0058+  129D A7 00         mov bh, 0
0059+  129F FD A4 04      shr bl, 4  
0060+  12A2 74            mov d, b
0061+  12A3 1F 35 15      mov al, [d + s_hex_digits]
0062+  12A6 23            mov ah, al
0063+  12A7               
0064+  12A7 E5            pop b
0065+  12A8 D8            push b
0066+  12A9 A7 00         mov bh, 0
0067+  12AB FD 87 0F      and bl, $0f
0068+  12AE 74            mov d, b
0069+  12AF 1F 35 15      mov al, [d + s_hex_digits]
0070+  12B2 E5            pop b
0071+  12B3 E7            pop d
0072+  12B4 09            ret
0073+  12B5             
0074+  12B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  12B5             ; hex string to binary
0076+  12B5             ; di = destination address
0077+  12B5             ; si = source
0078+  12B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  12B5             _hex_to_int:
0080+  12B5             _hex_to_int_l1:
0081+  12B5 F6            lodsb          ; load from [si] to al
0082+  12B6 B9 00         cmp al, 0        ; check if ascii 0
0083+  12B8 C6 C5 12      jz _hex_to_int_ret
0084+  12BB 36            mov bh, al
0085+  12BC F6            lodsb
0086+  12BD 2F            mov bl, al
0087+  12BE 07 8A 12      call _atoi        ; convert ascii byte in b to int (to al)
0088+  12C1 F7            stosb          ; store al to [di]
0089+  12C2 0A B5 12      jmp _hex_to_int_l1
0090+  12C5             _hex_to_int_ret:
0091+  12C5 09            ret    
0092+  12C6             
0093+  12C6             
0094+  12C6             
0095+  12C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  12C6             ; getchar
0097+  12C6             ; char in ah
0098+  12C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  12C6             getch:
0100+  12C6 DB            push al
0101+  12C7             getch_retry:
0102+  12C7 19 01         mov al, 1
0103+  12C9 05 03         syscall sys_io      ; receive in ah
0104+  12CB E8            pop al
0105+  12CC 09            ret
0106+  12CD             
0107+  12CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  12CD             ; putchar
0109+  12CD             ; char in ah
0110+  12CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  12CD             _putchar:
0112+  12CD DB            push al
0113+  12CE 19 00         mov al, 0
0114+  12D0 05 03         syscall sys_io      ; char in ah
0115+  12D2 E8            pop al
0116+  12D3 09            ret
0117+  12D4             
0118+  12D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  12D4             ;; input a string
0120+  12D4             ;; terminates with null
0121+  12D4             ;; pointer in d
0122+  12D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  12D4             _gets:
0124+  12D4 D7            push a
0125+  12D5 DA            push d
0126+  12D6             _gets_loop:
0127+  12D6 19 01         mov al, 1
0128+  12D8 05 03         syscall sys_io      ; receive in ah
0129+  12DA 76 1B         cmp ah, 27
0130+  12DC C6 FD 12      je _gets_ansi_esc
0131+  12DF 76 0A         cmp ah, $0a        ; lf
0132+  12E1 C6 59 13      je _gets_end
0133+  12E4 76 0D         cmp ah, $0d        ; cr
0134+  12E6 C6 59 13      je _gets_end
0135+  12E9 76 5C         cmp ah, $5c        ; '\\'
0136+  12EB C6 1F 13      je _gets_escape
0137+  12EE 76 08         cmp ah, $08      ; check for backspace
0138+  12F0 C6 F9 12      je _gets_backspace
0139+  12F3 1A            mov al, ah
0140+  12F4 3E            mov [d], al
0141+  12F5 79            inc d
0142+  12F6 0A D6 12      jmp _gets_loop
0143+  12F9             _gets_backspace:
0144+  12F9 7F            dec d
0145+  12FA 0A D6 12      jmp _gets_loop
0146+  12FD             _gets_ansi_esc:
0147+  12FD 19 01         mov al, 1
0148+  12FF 05 03         syscall sys_io        ; receive in ah without echo
0149+  1301 76 5B         cmp ah, '['
0150+  1303 C7 D6 12      jne _gets_loop
0151+  1306 19 01         mov al, 1
0152+  1308 05 03         syscall sys_io          ; receive in ah without echo
0153+  130A 76 64         cmp ah, 'd'
0154+  130C C6 17 13      je _gets_left_arrow
0155+  130F 76 63         cmp ah, 'c'
0156+  1311 C6 1B 13      je _gets_right_arrow
0157+  1314 0A D6 12      jmp _gets_loop
0158+  1317             _gets_left_arrow:
0159+  1317 7F            dec d
0160+  1318 0A D6 12      jmp _gets_loop
0161+  131B             _gets_right_arrow:
0162+  131B 79            inc d
0163+  131C 0A D6 12      jmp _gets_loop
0164+  131F             _gets_escape:
0165+  131F 19 01         mov al, 1
0166+  1321 05 03         syscall sys_io      ; receive in ah
0167+  1323 76 6E         cmp ah, 'n'
0168+  1325 C6 44 13      je _gets_lf
0169+  1328 76 72         cmp ah, 'r'
0170+  132A C6 4B 13      je _gets_cr
0171+  132D 76 30         cmp ah, '0'
0172+  132F C6 52 13      je _gets_null
0173+  1332 76 5C         cmp ah, $5c  ; '\'
0174+  1334 C6 3D 13      je _gets_slash
0175+  1337 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  1338 3E            mov [d], al
0177+  1339 79            inc d
0178+  133A 0A D6 12      jmp _gets_loop
0179+  133D             _gets_slash:
0180+  133D 19 5C         mov al, $5c
0181+  133F 3E            mov [d], al
0182+  1340 79            inc d
0183+  1341 0A D6 12      jmp _gets_loop
0184+  1344             _gets_lf:
0185+  1344 19 0A         mov al, $0a
0186+  1346 3E            mov [d], al
0187+  1347 79            inc d
0188+  1348 0A D6 12      jmp _gets_loop
0189+  134B             _gets_cr:
0190+  134B 19 0D         mov al, $0d
0191+  134D 3E            mov [d], al
0192+  134E 79            inc d
0193+  134F 0A D6 12      jmp _gets_loop
0194+  1352             _gets_null:
0195+  1352 19 00         mov al, $00
0196+  1354 3E            mov [d], al
0197+  1355 79            inc d
0198+  1356 0A D6 12      jmp _gets_loop
0199+  1359             _gets_end:
0200+  1359 19 00         mov al, 0
0201+  135B 3E            mov [d], al        ; terminate string
0202+  135C E7            pop d
0203+  135D E4            pop a
0204+  135E 09            ret
0205+  135F             
0206+  135F             
0207+  135F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  135F             ;; input text
0209+  135F             ;; terminated with ctrl+d
0210+  135F             ;; pointer in d
0211+  135F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  135F             _gettxt:
0213+  135F D7            push a
0214+  1360 DA            push d
0215+  1361             _gettxt_loop:
0216+  1361 19 01         mov al, 1
0217+  1363 05 03         syscall sys_io      ; receive in ah
0218+  1365 76 04         cmp ah, 4      ; eot
0219+  1367 C6 A0 13      je _gettxt_end
0220+  136A 76 08         cmp ah, $08      ; check for backspace
0221+  136C C6 9C 13      je _gettxt_backspace
0222+  136F 76 5C         cmp ah, $5c        ; '\'
0223+  1371 C6 7A 13      je _gettxt_escape
0224+  1374 1A            mov al, ah
0225+  1375 3E            mov [d], al
0226+  1376 79            inc d
0227+  1377 0A 61 13      jmp _gettxt_loop
0228+  137A             _gettxt_escape:
0229+  137A 19 01         mov al, 1
0230+  137C 05 03         syscall sys_io      ; receive in ah
0231+  137E 76 6E         cmp ah, 'n'
0232+  1380 C6 8E 13      je _gettxt_lf
0233+  1383 76 72         cmp ah, 'r'
0234+  1385 C6 95 13      je _gettxt_cr
0235+  1388 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  1389 3E            mov [d], al
0237+  138A 79            inc d
0238+  138B 0A 61 13      jmp _gettxt_loop
0239+  138E             _gettxt_lf:
0240+  138E 19 0A         mov al, $0a
0241+  1390 3E            mov [d], al
0242+  1391 79            inc d
0243+  1392 0A 61 13      jmp _gettxt_loop
0244+  1395             _gettxt_cr:
0245+  1395 19 0D         mov al, $0d
0246+  1397 3E            mov [d], al
0247+  1398 79            inc d
0248+  1399 0A 61 13      jmp _gettxt_loop
0249+  139C             _gettxt_backspace:
0250+  139C 7F            dec d
0251+  139D 0A 61 13      jmp _gettxt_loop
0252+  13A0             _gettxt_end:
0253+  13A0 19 00         mov al, 0
0254+  13A2 3E            mov [d], al        ; terminate string
0255+  13A3 E7            pop d
0256+  13A4 E4            pop a
0257+  13A5 09            ret
0258+  13A6             
0259+  13A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  13A6             ; print new line
0261+  13A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  13A6             printnl:
0263+  13A6 D7            push a
0264+  13A7 10 00 0A      mov a, $0a00
0265+  13AA 05 03         syscall sys_io
0266+  13AC 10 00 0D      mov a, $0d00
0267+  13AF 05 03         syscall sys_io
0268+  13B1 E4            pop a
0269+  13B2 09            ret
0270+  13B3             
0271+  13B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  13B3             ; _strtoint
0273+  13B3             ; 4 digit hex string number in d
0274+  13B3             ; integer returned in a
0275+  13B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  13B3             _strtointx:
0277+  13B3 D8            push b
0278+  13B4 32            mov bl, [d]
0279+  13B5 37            mov bh, bl
0280+  13B6 33 01 00      mov bl, [d + 1]
0281+  13B9 07 8A 12      call _atoi        ; convert to int in al
0282+  13BC 23            mov ah, al        ; move to ah
0283+  13BD 33 02 00      mov bl, [d + 2]
0284+  13C0 37            mov bh, bl
0285+  13C1 33 03 00      mov bl, [d + 3]
0286+  13C4 07 8A 12      call _atoi        ; convert to int in al
0287+  13C7 E5            pop b
0288+  13C8 09            ret
0289+  13C9             
0290+  13C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  13C9             ; _strtoint
0292+  13C9             ; 5 digit base10 string number in d
0293+  13C9             ; integer returned in a
0294+  13C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  13C9             _strtoint:
0296+  13C9 E2            push si
0297+  13CA D8            push b
0298+  13CB D9            push c
0299+  13CC DA            push d
0300+  13CD 07 2C 12      call _strlen      ; get string length in c
0301+  13D0 7E            dec c
0302+  13D1 FD 4E         mov si, d
0303+  13D3 12            mov a, c
0304+  13D4 FD 99         shl a
0305+  13D6 3B 4D 15      mov d, table_power
0306+  13D9 59            add d, a
0307+  13DA 38 00 00      mov c, 0
0308+  13DD             _strtoint_l0:
0309+  13DD F6            lodsb      ; load ascii to al
0310+  13DE B9 00         cmp al, 0
0311+  13E0 C6 F3 13      je _strtoint_end
0312+  13E3 6F 30         sub al, $30    ; make into integer
0313+  13E5 22 00         mov ah, 0
0314+  13E7 2A            mov b, [d]
0315+  13E8 AC            mul a, b      ; result in b since it fits in 16bits
0316+  13E9 11            mov a, b
0317+  13EA 28            mov b, c
0318+  13EB 54            add a, b
0319+  13EC 39            mov c, a
0320+  13ED 63 02 00      sub d, 2
0321+  13F0 0A DD 13      jmp _strtoint_l0
0322+  13F3             _strtoint_end:
0323+  13F3 12            mov a, c
0324+  13F4 E7            pop d
0325+  13F5 E6            pop c
0326+  13F6 E5            pop b
0327+  13F7 EF            pop si
0328+  13F8 09            ret
0329+  13F9             
0330+  13F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  13F9             ; print null terminated string
0332+  13F9             ; pointer in d
0333+  13F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  13F9             _puts:
0335+  13F9 D7            push a
0336+  13FA DA            push d
0337+  13FB             _puts_l1:
0338+  13FB 1E            mov al, [d]
0339+  13FC B9 00         cmp al, 0
0340+  13FE C6 0A 14      jz _puts_end
0341+  1401 23            mov ah, al
0342+  1402 19 00         mov al, 0
0343+  1404 05 03         syscall sys_io
0344+  1406 79            inc d
0345+  1407 0A FB 13      jmp _puts_l1
0346+  140A             _puts_end:
0347+  140A E7            pop d
0348+  140B E4            pop a
0349+  140C 09            ret
0350+  140D             
0351+  140D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  140D             ; print n size string
0353+  140D             ; pointer in d
0354+  140D             ; size in c
0355+  140D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  140D             _putsn:
0357+  140D DB            push al
0358+  140E DA            push d
0359+  140F D9            push c
0360+  1410             _putsn_l0:
0361+  1410 1E            mov al, [d]
0362+  1411 23            mov ah, al
0363+  1412 19 00         mov al, 0
0364+  1414 05 03         syscall sys_io
0365+  1416 79            inc d
0366+  1417 7E            dec c  
0367+  1418 C2 00 00      cmp c, 0
0368+  141B C7 10 14      jne _putsn_l0
0369+  141E             _putsn_end:
0370+  141E E6            pop c
0371+  141F E7            pop d
0372+  1420 E8            pop al
0373+  1421 09            ret
0374+  1422             
0375+  1422             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  1422             ; print 16bit decimal number
0377+  1422             ; input number in a
0378+  1422             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  1422             print_u16d:
0380+  1422 D7            push a
0381+  1423 D8            push b
0382+  1424 FD D8         push g
0383+  1426 26 10 27      mov b, 10000
0384+  1429 AE            div a, b      ; get 10000's coeff.
0385+  142A 07 4E 14      call print_number
0386+  142D 11            mov a, b
0387+  142E 26 E8 03      mov b, 1000
0388+  1431 AE            div a, b      ; get 1000's coeff.
0389+  1432 07 4E 14      call print_number
0390+  1435 11            mov a, b
0391+  1436 26 64 00      mov b, 100
0392+  1439 AE            div a, b
0393+  143A 07 4E 14      call print_number
0394+  143D 11            mov a, b
0395+  143E 26 0A 00      mov b, 10
0396+  1441 AE            div a, b
0397+  1442 07 4E 14      call print_number
0398+  1445 1B            mov al, bl      ; 1's coeff in bl
0399+  1446 07 4E 14      call print_number
0400+  1449 FD F1         pop g
0401+  144B E5            pop b
0402+  144C E4            pop a
0403+  144D 09            ret
0404+  144E             
0405+  144E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  144E             ; print al
0407+  144E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  144E             print_number:
0409+  144E 6A 30         add al, $30
0410+  1450 23            mov ah, al
0411+  1451 07 CD 12      call _putchar
0412+  1454 09            ret
0413+  1455             
0414+  1455             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  1455             ; print 16bit hex integer
0416+  1455             ; integer value in reg b
0417+  1455             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  1455             print_u16x:
0419+  1455 D7            push a
0420+  1456 D8            push b
0421+  1457 DD            push bl
0422+  1458 30            mov bl, bh
0423+  1459 07 9B 12      call _itoa        ; convert bh to char in a
0424+  145C 2F            mov bl, al        ; save al
0425+  145D 19 00         mov al, 0
0426+  145F 05 03         syscall sys_io        ; display ah
0427+  1461 24            mov ah, bl        ; retrieve al
0428+  1462 19 00         mov al, 0
0429+  1464 05 03         syscall sys_io        ; display al
0430+  1466             
0431+  1466 EA            pop bl
0432+  1467 07 9B 12      call _itoa        ; convert bh to char in a
0433+  146A 2F            mov bl, al        ; save al
0434+  146B 19 00         mov al, 0
0435+  146D 05 03         syscall sys_io        ; display ah
0436+  146F 24            mov ah, bl        ; retrieve al
0437+  1470 19 00         mov al, 0
0438+  1472 05 03         syscall sys_io        ; display al
0439+  1474             
0440+  1474 E5            pop b
0441+  1475 E4            pop a
0442+  1476 09            ret
0443+  1477             
0444+  1477             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  1477             ; input 16bit hex integer
0446+  1477             ; read 16bit integer into a
0447+  1477             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  1477             scan_u16x:
0449+  1477 F8 10 00      enter 16
0450+  147A D8            push b
0451+  147B DA            push d
0452+  147C             
0453+  147C FA F1 FF      lea d, [bp + -15]
0454+  147F 07 D4 12      call _gets        ; get number
0455+  1482             
0456+  1482 32            mov bl, [d]
0457+  1483 37            mov bh, bl
0458+  1484 33 01 00      mov bl, [d + 1]
0459+  1487 07 8A 12      call _atoi        ; convert to int in al
0460+  148A 23            mov ah, al        ; move to ah
0461+  148B             
0462+  148B 33 02 00      mov bl, [d + 2]
0463+  148E 37            mov bh, bl
0464+  148F 33 03 00      mov bl, [d + 3]
0465+  1492 07 8A 12      call _atoi        ; convert to int in al
0466+  1495             
0467+  1495 E7            pop d
0468+  1496 E5            pop b
0469+  1497 F9            leave
0470+  1498 09            ret
0471+  1499             
0472+  1499             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  1499             ; print 8bit hex integer
0474+  1499             ; integer value in reg bl
0475+  1499             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  1499             print_u8x:
0477+  1499 D7            push a
0478+  149A DD            push bl
0479+  149B             
0480+  149B 07 9B 12      call _itoa        ; convert bl to char in a
0481+  149E 2F            mov bl, al        ; save al
0482+  149F 19 00         mov al, 0
0483+  14A1 05 03         syscall sys_io        ; display ah
0484+  14A3 24            mov ah, bl        ; retrieve al
0485+  14A4 19 00         mov al, 0
0486+  14A6 05 03         syscall sys_io        ; display al
0487+  14A8             
0488+  14A8 EA            pop bl
0489+  14A9 E4            pop a
0490+  14AA 09            ret
0491+  14AB             
0492+  14AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  14AB             ; print 8bit decimal unsigned number
0494+  14AB             ; input number in al
0495+  14AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  14AB             print_u8d:
0497+  14AB D7            push a
0498+  14AC D8            push b
0499+  14AD FD D8         push g
0500+  14AF 22 00         mov ah, 0
0501+  14B1 26 64 00      mov b, 100
0502+  14B4 AE            div a, b
0503+  14B5 D8            push b      ; save remainder
0504+  14B6 B9 00         cmp al, 0
0505+  14B8 C6 C2 14      je skip100
0506+  14BB 6A 30         add al, $30
0507+  14BD 23            mov ah, al
0508+  14BE 19 00         mov al, 0
0509+  14C0 05 03         syscall sys_io  ; print coeff
0510+  14C2             skip100:
0511+  14C2 E4            pop a
0512+  14C3 22 00         mov ah, 0
0513+  14C5 26 0A 00      mov b, 10
0514+  14C8 AE            div a, b
0515+  14C9 D8            push b      ; save remainder
0516+  14CA B9 00         cmp al, 0
0517+  14CC C6 D6 14      je skip10
0518+  14CF 6A 30         add al, $30
0519+  14D1 23            mov ah, al
0520+  14D2 19 00         mov al, 0
0521+  14D4 05 03         syscall sys_io  ; print coeff
0522+  14D6             skip10:
0523+  14D6 E4            pop a
0524+  14D7 1B            mov al, bl
0525+  14D8 6A 30         add al, $30
0526+  14DA 23            mov ah, al
0527+  14DB 19 00         mov al, 0
0528+  14DD 05 03         syscall sys_io  ; print coeff
0529+  14DF FD F1         pop g
0530+  14E1 E5            pop b
0531+  14E2 E4            pop a
0532+  14E3 09            ret
0533+  14E4             
0534+  14E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  14E4             ; input 8bit hex integer
0536+  14E4             ; read 8bit integer into al
0537+  14E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  14E4             scan_u8x:
0539+  14E4 F8 04 00      enter 4
0540+  14E7 D8            push b
0541+  14E8 DA            push d
0542+  14E9             
0543+  14E9 FA FD FF      lea d, [bp + -3]
0544+  14EC 07 D4 12      call _gets        ; get number
0545+  14EF             
0546+  14EF 32            mov bl, [d]
0547+  14F0 37            mov bh, bl
0548+  14F1 33 01 00      mov bl, [d + 1]
0549+  14F4 07 8A 12      call _atoi        ; convert to int in al
0550+  14F7             
0551+  14F7 E7            pop d
0552+  14F8 E5            pop b
0553+  14F9 F9            leave
0554+  14FA 09            ret
0555+  14FB             
0556+  14FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  14FB             ; input decimal number
0558+  14FB             ; result in a
0559+  14FB             ; 655'\0'
0560+  14FB             ; low--------high
0561+  14FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  14FB             scan_u16d:
0563+  14FB F8 08 00      enter 8
0564+  14FE E2            push si
0565+  14FF D8            push b
0566+  1500 D9            push c
0567+  1501 DA            push d
0568+  1502 FA F9 FF      lea d, [bp +- 7]
0569+  1505 07 D4 12      call _gets
0570+  1508 07 2C 12      call _strlen      ; get string length in c
0571+  150B 7E            dec c
0572+  150C FD 4E         mov si, d
0573+  150E 12            mov a, c
0574+  150F FD 99         shl a
0575+  1511 3B 4D 15      mov d, table_power
0576+  1514 59            add d, a
0577+  1515 38 00 00      mov c, 0
0578+  1518             mul_loop:
0579+  1518 F6            lodsb      ; load ascii to al
0580+  1519 B9 00         cmp al, 0
0581+  151B C6 2E 15      je mul_exit
0582+  151E 6F 30         sub al, $30    ; make into integer
0583+  1520 22 00         mov ah, 0
0584+  1522 2A            mov b, [d]
0585+  1523 AC            mul a, b      ; result in b since it fits in 16bits
0586+  1524 11            mov a, b
0587+  1525 28            mov b, c
0588+  1526 54            add a, b
0589+  1527 39            mov c, a
0590+  1528 63 02 00      sub d, 2
0591+  152B 0A 18 15      jmp mul_loop
0592+  152E             mul_exit:
0593+  152E 12            mov a, c
0594+  152F E7            pop d
0595+  1530 E6            pop c
0596+  1531 E5            pop b
0597+  1532 EF            pop si
0598+  1533 F9            leave
0599+  1534 09            ret
0600+  1535             
0601+  1535             
0602+  1535 30 31 32 33 s_hex_digits:    .db "0123456789abcdef"  
0602+  1539 34 35 36 37 
0602+  153D 38 39 61 62 
0602+  1541 63 64 65 66 
0603+  1545 1B 5B 32 6A s_telnet_clear:  .db "\033[2j\033[h", 0
0603+  1549 1B 5B 68 00 
0604+  154D             
0605+  154D             table_power:
0606+  154D 01 00         .dw 1
0607+  154F 0A 00         .dw 10
0608+  1551 64 00         .dw 100
0609+  1553 E8 03         .dw 1000
0610+  1555 10 27         .dw 100003047   1557             .include "lib/ctype.asm"
0001+  1557             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1557             ; ctype.s
0003+  1557             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1557             
0005+  1557             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  1557             ;; c character classification is an operation provided by a group of functions in the ansi c standard library
0007+  1557             ;; for the c programming language. these functions are used to test characters for membership in a particular
0008+  1557             ;; class of characters, such as alphabetic characters, control characters, etc. both single-byte, and wide
0009+  1557             ;; characters are supported.
0010+  1557             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  1557             ;; _isalnum 
0012+  1557             ;; _isalpha 
0013+  1557             ;; islower 
0014+  1557             ;; isupper 
0015+  1557             ;; _isdigit 
0016+  1557             ;; isxdigit
0017+  1557             ;; iscntrl 
0018+  1557             ;; isgraph 
0019+  1557             ;; _isspace 
0020+  1557             ;; isblank 
0021+  1557             ;; isprint 
0022+  1557             ;; ispunct 
0023+  1557             ;; tolower 
0024+  1557             ;; toupper
0025+  1557             
0026+  1557             
0027+  1557             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  1557             ;; is alphanumeric
0029+  1557             ;; sets zf according with result
0030+  1557             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  1557             _isalnum:
0032+  1557 07 74 15    	call _isalpha
0033+  155A C6 60 15    	je _isalnum_exit
0034+  155D 07 61 15    	call _isdigit
0035+  1560             _isalnum_exit:
0036+  1560 09          	ret	
0037+  1561             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  1561             ;; is digit
0039+  1561             ;; sets zf according with result
0040+  1561             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  1561             _isdigit:
0042+  1561 DB          	push al
0043+  1562 B9 30       	cmp al, '0'
0044+  1564 C8 70 15    	jlu _isdigit_false
0045+  1567 B9 39       	cmp al, '9'
0046+  1569 D1 70 15    	jgu _isdigit_false
0047+  156C 87 00       	and al, 0	; set zf
0048+  156E E8          	pop al
0049+  156F 09          	ret
0050+  1570             _isdigit_false:
0051+  1570 8B 01       	or al, 1	; clear zf
0052+  1572 E8          	pop al
0053+  1573 09          	ret	
0054+  1574             	
0055+  1574             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  1574             ;; is alpha
0057+  1574             ;; sets zf according with result
0058+  1574             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  1574             _isalpha:
0060+  1574 DB          	push al
0061+  1575 B9 5F       	cmp al, '_'
0062+  1577 C6 97 15    	je _isalpha_true
0063+  157A B9 2E       	cmp al, '.'
0064+  157C C6 97 15    	je _isalpha_true
0065+  157F B9 61       	cmp al, 'a'
0066+  1581 C8 93 15    	jlu _isalpha_false
0067+  1584 B9 7A       	cmp al, 'z'
0068+  1586 D1 93 15    	jgu _isalpha_false
0069+  1589 B9 7A       	cmp al, 'z'
0070+  158B D0 97 15    	jleu _isalpha_true
0071+  158E B9 61       	cmp al, 'a'
0072+  1590 C9 97 15    	jgeu _isalpha_true
0073+  1593             _isalpha_false:
0074+  1593 8B 01       	or al, 1	; clear zf
0075+  1595 E8          	pop al
0076+  1596 09          	ret
0077+  1597             _isalpha_true:
0078+  1597 87 00       	and al, 0	; set zf
0079+  1599 E8          	pop al
0080+  159A 09          	ret
0081+  159B             
0082+  159B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  159B             ;; is path-alpha
0084+  159B             ;; sets zf according with result
0085+  159B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  159B             ispath:
0087+  159B DB          	push al
0088+  159C 07 61 15    	call _isdigit
0089+  159F C6 C9 15    	je ispath_true
0090+  15A2 B9 5F       	cmp al, '_'
0091+  15A4 C6 C9 15    	je ispath_true
0092+  15A7 B9 2F       	cmp al, '/'
0093+  15A9 C6 C9 15    	je ispath_true
0094+  15AC B9 2E       	cmp al, '.'
0095+  15AE C6 C9 15    	je ispath_true
0096+  15B1 B9 61       	cmp al, 'a'
0097+  15B3 C8 C5 15    	jlu ispath_false
0098+  15B6 B9 7A       	cmp al, 'z'
0099+  15B8 D1 C5 15    	jgu ispath_false
0100+  15BB B9 7A       	cmp al, 'z'
0101+  15BD D0 C9 15    	jleu ispath_true
0102+  15C0 B9 61       	cmp al, 'a'
0103+  15C2 C9 C9 15    	jgeu ispath_true
0104+  15C5             ispath_false:
0105+  15C5 8B 01       	or al, 1	; clear zf
0106+  15C7 E8          	pop al
0107+  15C8 09          	ret
0108+  15C9             ispath_true:
0109+  15C9 87 00       	and al, 0	; set zf
0110+  15CB E8          	pop al
0111+  15CC 09          	ret
0112+  15CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  15CD             ;; is space
0114+  15CD             ;; sets zf according with result
0115+  15CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  15CD             _isspace:
0117+  15CD B9 20       	cmp al, $20		; ' '
0118+  15CF C6 E3 15    	je _isspace_exit
0119+  15D2 B9 09       	cmp al, $09		; '\t'
0120+  15D4 C6 E3 15    	je _isspace_exit
0121+  15D7 B9 0A       	cmp al, $0a		; '\n'
0122+  15D9 C6 E3 15    	je _isspace_exit
0123+  15DC B9 0D       	cmp al, $0d		; '\r'
0124+  15DE C6 E3 15    	je _isspace_exit
0125+  15E1 B9 0B       	cmp al, $0b		; '\v'
0126+  15E3             _isspace_exit:
0127+  15E3 09          	ret	
0128+  15E4             
0129+  15E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  15E4             ; to lower
0131+  15E4             ; input in al
0132+  15E4             ; output in al
0133+  15E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  15E4             _to_lower:
0135+  15E4 B9 7A       	cmp al, 'z'
0136+  15E6 D1 EB 15    	jgu _to_lower_ret
0137+  15E9 6A 20       	add al, $20				; convert to lower case
0138+  15EB             _to_lower_ret:
0139+  15EB 09          	ret
0140+  15EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  15EC             ; to upper
0142+  15EC             ; input in al
0143+  15EC             ; output in al
0144+  15EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  15EC             _to_upper:
0146+  15EC B9 61       	cmp al, 'a'
0147+  15EE C8 F3 15    	jlu _to_upper_ret
0148+  15F1 6F 20       	sub al, $20			; convert to upper case
0149+  15F3             _to_upper_ret:
0150+  15F3 09          	ret
0151+  15F4             
3048   15F4             .include "lib/token.asm"
0001+  15F4             toktyp_identifier  .equ 0
0002+  15F4             toktyp_keyword     .equ 1
0003+  15F4             toktyp_delimiter   .equ 2
0004+  15F4             toktyp_string      .equ 3
0005+  15F4             toktyp_char        .equ 4
0006+  15F4             toktyp_numeric     .equ 5
0007+  15F4             toktyp_end         .equ 6
0008+  15F4             
0009+  15F4             tok_null           .equ 0
0010+  15F4             tok_fslash         .equ 1
0011+  15F4             tok_times          .equ 2
0012+  15F4             tok_plus           .equ 3
0013+  15F4             tok_minus          .equ 4
0014+  15F4             tok_dot            .equ 5
0015+  15F4             tok_semi           .equ 6
0016+  15F4             tok_angle          .equ 7
0017+  15F4             tok_tilde          .equ 8
0018+  15F4             tok_equal          .equ 9
0019+  15F4             tok_colon          .equ 10
0020+  15F4             tok_comma          .equ 11
0021+  15F4             
0022+  15F4             tok_end            .equ 20
0023+  15F4             
0024+  15F4             
0025+  15F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  15F4             ;; read a full command argment from shell input buffer
0027+  15F4             ;; argument is written into tokstr
0028+  15F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  15F4             get_arg:
0030+  15F4 D7            push a
0031+  15F5 E2            push si
0032+  15F6 E3            push di
0033+  15F7 19 00         mov al, 0
0034+  15F9 3D 22 18      mov [tokstr], al      ; nullify tokstr string
0035+  15FC 14 1E 18      mov a, [prog]
0036+  15FF 4D            mov si, a
0037+  1600 FD 4F 22 18   mov di, tokstr
0038+  1604             get_arg_skip_spaces:
0039+  1604 F6            lodsb
0040+  1605 07 CD 15      call _isspace
0041+  1608 C6 04 16      je get_arg_skip_spaces
0042+  160B             get_arg_l0:
0043+  160B B9 3B         cmp al, $3b        ; check if is ';'
0044+  160D C6 1A 16      je get_arg_end
0045+  1610 B9 00         cmp al, 0
0046+  1612 C6 1A 16      je get_arg_end      ; check if end of input
0047+  1615 F7            stosb
0048+  1616 F6            lodsb
0049+  1617 0A 0B 16      jmp get_arg_l0
0050+  161A             get_arg_end:
0051+  161A 19 00         mov al, 0
0052+  161C F7            stosb
0053+  161D D5 01 00      sub si, 1
0054+  1620 4E            mov a, si
0055+  1621 42 1E 18      mov [prog], a    ; update pointer
0056+  1624 F0            pop di
0057+  1625 EF            pop si
0058+  1626 E4            pop a
0059+  1627 09            ret
0060+  1628             
0061+  1628             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  1628             ;; read a path formation from shell input buffer
0063+  1628             ;; path is written into tokstr
0064+  1628             ;; /usr/bin
0065+  1628             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  1628             get_path:
0067+  1628 D7            push a
0068+  1629 E2            push si
0069+  162A E3            push di
0070+  162B 19 00         mov al, 0
0071+  162D 3D 22 18      mov [tokstr], al      ; nullify tokstr string
0072+  1630 14 1E 18      mov a, [prog]
0073+  1633 4D            mov si, a
0074+  1634 FD 4F 22 18   mov di, tokstr
0075+  1638             get_path_skip_spaces:
0076+  1638 F6            lodsb
0077+  1639 07 CD 15      call _isspace
0078+  163C C6 38 16      je get_path_skip_spaces
0079+  163F             get_path_is_pathchar:
0080+  163F F7            stosb
0081+  1640 F6            lodsb
0082+  1641 07 57 15      call _isalnum      ;check if is alphanumeric
0083+  1644 C6 3F 16      je get_path_is_pathchar
0084+  1647 B9 2F         cmp al, '/'        ; check if is '/'
0085+  1649 C6 3F 16      je get_path_is_pathchar
0086+  164C 19 00         mov al, 0
0087+  164E F7            stosb
0088+  164F D5 01 00      sub si, 1
0089+  1652 4E            mov a, si
0090+  1653 42 1E 18      mov [prog], a    ; update pointer
0091+  1656             get_path_end:
0092+  1656 F0            pop di
0093+  1657 EF            pop si
0094+  1658 E4            pop a
0095+  1659 09            ret
0096+  165A             
0097+  165A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  165A             ;; read a line
0099+  165A             ;; line is written into tokstr
0100+  165A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  165A             get_line:
0102+  165A D7            push a
0103+  165B E2            push si
0104+  165C E3            push di
0105+  165D 19 00         mov al, 0
0106+  165F 3D 22 18      mov [tokstr], al      ; nullify tokstr string
0107+  1662 14 1E 18      mov a, [prog]
0108+  1665 4D            mov si, a
0109+  1666 FD 4F 22 18   mov di, tokstr
0110+  166A             get_line_l0:
0111+  166A F6            lodsb
0112+  166B B9 0A         cmp al, $0a    ; check for new line
0113+  166D C6 74 16      je get_line_exit
0114+  1670 F7            stosb
0115+  1671 0A 6A 16      jmp get_line_l0
0116+  1674             get_line_exit:
0117+  1674 19 00         mov al, 0
0118+  1676 F7            stosb
0119+  1677 4E            mov a, si
0120+  1678 42 1E 18      mov [prog], a    ; update pointer
0121+  167B F0            pop di
0122+  167C EF            pop si
0123+  167D E4            pop a
0124+  167E 09            ret
0125+  167F             
0126+  167F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  167F             ;; token parser
0128+  167F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  167F             get_token:
0130+  167F D7            push a
0131+  1680 DA            push d
0132+  1681 E2            push si
0133+  1682 E3            push di
0134+  1683 19 00         mov al, 0
0135+  1685 3D 22 18      mov [tokstr], al      ; nullify tokstr string
0136+  1688 19 00         mov al, tok_null
0137+  168A 3D 21 18      mov [tok], al        ; nullify token
0138+  168D 14 1E 18      mov a, [prog]
0139+  1690 4D            mov si, a
0140+  1691 FD 4F 22 18   mov di, tokstr
0141+  1695             get_tok_skip_spaces:
0142+  1695 F6            lodsb
0143+  1696 07 CD 15      call _isspace
0144+  1699 C6 95 16      je get_tok_skip_spaces
0145+  169C B9 00         cmp al, 0      ; check for end of input (null)
0146+  169E C6 83 17      je get_token_end
0147+  16A1 B9 23         cmp al, '#'      ; comments!
0148+  16A3 C6 B1 17      je get_tok_comment
0149+  16A6 07 57 15      call _isalnum
0150+  16A9 C6 90 17      jz is_alphanumeric
0151+  16AC             ; other token types
0152+  16AC             get_token_slash:
0153+  16AC B9 2F         cmp al, '/'        ; check if '/'
0154+  16AE C7 C6 16      jne get_token_minus
0155+  16B1 F7            stosb          ; store '/' into token string
0156+  16B2 19 00         mov al, 0
0157+  16B4 F7            stosb          ; terminate token string
0158+  16B5 19 01         mov al, tok_fslash
0159+  16B7 3D 21 18      mov [tok], al      
0160+  16BA 19 02         mov al, toktyp_delimiter
0161+  16BC 3D 20 18      mov [toktyp], al
0162+  16BF 4E            mov a, si
0163+  16C0 42 1E 18      mov [prog], a    ; update pointer
0164+  16C3 0A AC 17      jmp get_token_return
0165+  16C6             get_token_minus:
0166+  16C6 B9 2D         cmp al, '-'        ; check if '-'
0167+  16C8 C7 E0 16      jne get_token_comma
0168+  16CB F7            stosb          ; store '-' into token string
0169+  16CC 19 00         mov al, 0
0170+  16CE F7            stosb          ; terminate token string
0171+  16CF 19 04         mov al, tok_minus
0172+  16D1 3D 21 18      mov [tok], al      
0173+  16D4 19 02         mov al, toktyp_delimiter
0174+  16D6 3D 20 18      mov [toktyp], al
0175+  16D9 4E            mov a, si
0176+  16DA 42 1E 18      mov [prog], a    ; update pointer
0177+  16DD 0A AC 17      jmp get_token_return
0178+  16E0             get_token_comma:
0179+  16E0 B9 2C         cmp al, ','        ; check if ','
0180+  16E2 C7 FA 16      jne get_token_semi
0181+  16E5 F7            stosb          ; store ',' into token string
0182+  16E6 19 00         mov al, 0
0183+  16E8 F7            stosb          ; terminate token string
0184+  16E9 19 0B         mov al, tok_comma
0185+  16EB 3D 21 18      mov [tok], al      
0186+  16EE 19 02         mov al, toktyp_delimiter
0187+  16F0 3D 20 18      mov [toktyp], al
0188+  16F3 4E            mov a, si
0189+  16F4 42 1E 18      mov [prog], a    ; update pointer
0190+  16F7 0A AC 17      jmp get_token_return
0191+  16FA             get_token_semi:
0192+  16FA B9 3B         cmp al, $3b        ; check if ';'
0193+  16FC C7 14 17      jne get_token_colon
0194+  16FF F7            stosb          ; store ';' into token string
0195+  1700 19 00         mov al, 0
0196+  1702 F7            stosb          ; terminate token string
0197+  1703 19 06         mov al, tok_semi
0198+  1705 3D 21 18      mov [tok], al      
0199+  1708 19 02         mov al, toktyp_delimiter
0200+  170A 3D 20 18      mov [toktyp], al
0201+  170D 4E            mov a, si
0202+  170E 42 1E 18      mov [prog], a    ; update pointer
0203+  1711 0A AC 17      jmp get_token_return
0204+  1714             get_token_colon:
0205+  1714 B9 3A         cmp al, $3a        ; check if ':'
0206+  1716 C7 2E 17      jne get_token_angle
0207+  1719 F7            stosb          ; store ':' into token string
0208+  171A 19 00         mov al, 0
0209+  171C F7            stosb          ; terminate token string
0210+  171D 19 0A         mov al, tok_colon
0211+  171F 3D 21 18      mov [tok], al      
0212+  1722 19 02         mov al, toktyp_delimiter
0213+  1724 3D 20 18      mov [toktyp], al
0214+  1727 4E            mov a, si
0215+  1728 42 1E 18      mov [prog], a    ; update pointer
0216+  172B 0A AC 17      jmp get_token_return
0217+  172E             get_token_angle:
0218+  172E B9 3E         cmp al, $3e        ; check if '>'
0219+  1730 C7 48 17      jne get_token_tilde
0220+  1733 F7            stosb          ; store '>' into token string
0221+  1734 19 00         mov al, 0
0222+  1736 F7            stosb          ; terminate token string
0223+  1737 19 07         mov al, tok_angle
0224+  1739 3D 21 18      mov [tok], al      
0225+  173C 19 02         mov al, toktyp_delimiter
0226+  173E 3D 20 18      mov [toktyp], al
0227+  1741 4E            mov a, si
0228+  1742 42 1E 18      mov [prog], a    ; update pointer
0229+  1745 0A AC 17      jmp get_token_return
0230+  1748             get_token_tilde:
0231+  1748 B9 7E         cmp al, '~'        ; check if '~'
0232+  174A C7 62 17      jne get_token_equal
0233+  174D F7            stosb          ; store '~' into token string
0234+  174E 19 00         mov al, 0
0235+  1750 F7            stosb          ; terminate token string
0236+  1751 19 08         mov al, tok_tilde
0237+  1753 3D 21 18      mov [tok], al      
0238+  1756 19 02         mov al, toktyp_delimiter
0239+  1758 3D 20 18      mov [toktyp], al
0240+  175B 4E            mov a, si
0241+  175C 42 1E 18      mov [prog], a    ; update pointer
0242+  175F 0A AC 17      jmp get_token_return
0243+  1762             get_token_equal:
0244+  1762 B9 3D         cmp al, '='        ; check if '='
0245+  1764 C7 7C 17      jne get_token_skip
0246+  1767 F7            stosb          ; store '=' into token string
0247+  1768 19 00         mov al, 0
0248+  176A F7            stosb          ; terminate token string
0249+  176B 19 09         mov al, tok_equal
0250+  176D 3D 21 18      mov [tok], al      
0251+  1770 19 02         mov al, toktyp_delimiter
0252+  1772 3D 20 18      mov [toktyp], al
0253+  1775 4E            mov a, si
0254+  1776 42 1E 18      mov [prog], a    ; update pointer
0255+  1779 0A AC 17      jmp get_token_return
0256+  177C             get_token_skip:
0257+  177C 4E            mov a, si
0258+  177D 42 1E 18      mov [prog], a    ; update pointer
0259+  1780 0A AC 17      jmp get_token_return
0260+  1783             get_token_end:        ; end of file token
0261+  1783 19 14         mov al, tok_end
0262+  1785 3D 21 18      mov [tok], al
0263+  1788 19 06         mov al, toktyp_end
0264+  178A 3D 20 18      mov [toktyp], al
0265+  178D 0A AC 17      jmp get_token_return
0266+  1790             is_alphanumeric:
0267+  1790 F7            stosb
0268+  1791 F6            lodsb
0269+  1792 07 57 15      call _isalnum      ;check if is alphanumeric
0270+  1795 C6 90 17      jz is_alphanumeric
0271+  1798 B9 2E         cmp al, $2e        ; check if is '.'
0272+  179A C6 90 17      je is_alphanumeric
0273+  179D 19 00         mov al, 0
0274+  179F F7            stosb
0275+  17A0 19 00         mov al, toktyp_identifier
0276+  17A2 3D 20 18      mov [toktyp], al
0277+  17A5 D5 01 00      sub si, 1
0278+  17A8 4E            mov a, si
0279+  17A9 42 1E 18      mov [prog], a    ; update pointer
0280+  17AC             get_token_return:
0281+  17AC F0            pop di
0282+  17AD EF            pop si
0283+  17AE E7            pop d
0284+  17AF E4            pop a
0285+  17B0 09            ret
0286+  17B1             get_tok_comment:
0287+  17B1 F6            lodsb
0288+  17B2 B9 0A         cmp al, $0a      ; new line
0289+  17B4 C7 B1 17      jne get_tok_comment
0290+  17B7 0A 95 16      jmp get_tok_skip_spaces
0291+  17BA             
0292+  17BA             
0293+  17BA             get_number:
0294+  17BA D7            push a
0295+  17BB DA            push d
0296+  17BC E2            push si
0297+  17BD E3            push di
0298+  17BE 19 00         mov al, 0
0299+  17C0 3D 22 18      mov [tokstr], al      ; nullify tokstr string
0300+  17C3 19 00         mov al, tok_null
0301+  17C5 3D 21 18      mov [tok], al        ; nullify token
0302+  17C8 14 1E 18      mov a, [prog]
0303+  17CB 4D            mov si, a
0304+  17CC FD 4F 22 18   mov di, tokstr
0305+  17D0             get_number_skip_spaces:
0306+  17D0 F6            lodsb
0307+  17D1 07 CD 15      call _isspace
0308+  17D4 C6 D0 17      je get_number_skip_spaces
0309+  17D7 B9 00         cmp al, 0      ; check for end of input (null)
0310+  17D9 C7 E9 17      jne get_number_l0
0311+  17DC 19 14         mov al, tok_end
0312+  17DE 3D 21 18      mov [tok], al
0313+  17E1 19 06         mov al, toktyp_end
0314+  17E3 3D 20 18      mov [toktyp], al
0315+  17E6 0A 00 18      jmp get_number_return
0316+  17E9             get_number_l0:
0317+  17E9 F7            stosb
0318+  17EA F6            lodsb
0319+  17EB 07 61 15      call _isdigit      ;check if is numeric
0320+  17EE C6 E9 17      jz get_number_l0
0321+  17F1 19 00         mov al, 0
0322+  17F3 F7            stosb
0323+  17F4 19 05         mov al, toktyp_numeric
0324+  17F6 3D 20 18      mov [toktyp], al
0325+  17F9 D5 01 00      sub si, 1
0326+  17FC 4E            mov a, si
0327+  17FD 42 1E 18      mov [prog], a    ; update pointer
0328+  1800             get_number_return:
0329+  1800 F0            pop di
0330+  1801 EF            pop si
0331+  1802 E7            pop d
0332+  1803 E4            pop a
0333+  1804 09            ret
0334+  1805             
0335+  1805             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  1805             ;; put back token
0337+  1805             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0338+  1805             _putback:
0339+  1805 D7            push a
0340+  1806 E2            push si
0341+  1807 FD 4D 22 18   mov si, tokstr  
0342+  180B             _putback_loop:
0343+  180B F6            lodsb
0344+  180C B9 00         cmp al, 0
0345+  180E C6 1B 18      je _putback_end
0346+  1811 14 1E 18      mov a, [prog]
0347+  1814 7D            dec a
0348+  1815 42 1E 18      mov [prog], a      ; update pointer
0349+  1818 0A 0B 18      jmp _putback_loop
0350+  181B             _putback_end:
0351+  181B EF            pop si
0352+  181C E4            pop a
0353+  181D 09            ret
0354+  181E             
0355+  181E             
0356+  181E             
0357+  181E             
0358+  181E 00 00       prog:      .dw 0          ; pointer to current position in buffer
0359+  1820             
0360+  1820 00          toktyp:    .db 0          ; token type symbol
0361+  1821 00          tok:       .db 0          ; current token symbol
0362+  1822 00 00 00 00 tokstr:    .fill 256, 0   ; token as a string
0362+  1826 00 00 00 00 
0362+  182A 00 00 00 00 
0362+  182E 00 00 00 00 
0362+  1832 00 00 00 00 
0362+  1836 00 00 00 00 
0362+  183A 00 00 00 00 
0362+  183E 00 00 00 00 
0362+  1842 00 00 00 00 
0362+  1846 00 00 00 00 
0362+  184A 00 00 00 00 
0362+  184E 00 00 00 00 
0362+  1852 00 00 00 00 
0362+  1856 00 00 00 00 
0362+  185A 00 00 00 00 
0362+  185E 00 00 00 00 
0362+  1862 00 00 00 00 
0362+  1866 00 00 00 00 
0362+  186A 00 00 00 00 
0362+  186E 00 00 00 00 
0362+  1872 00 00 00 00 
0362+  1876 00 00 00 00 
0362+  187A 00 00 00 00 
0362+  187E 00 00 00 00 
0362+  1882 00 00 00 00 
0362+  1886 00 00 00 00 
0362+  188A 00 00 00 00 
0362+  188E 00 00 00 00 
0362+  1892 00 00 00 00 
0362+  1896 00 00 00 00 
0362+  189A 00 00 00 00 
0362+  189E 00 00 00 00 
0362+  18A2 00 00 00 00 
0362+  18A6 00 00 00 00 
0362+  18AA 00 00 00 00 
0362+  18AE 00 00 00 00 
0362+  18B2 00 00 00 00 
0362+  18B6 00 00 00 00 
0362+  18BA 00 00 00 00 
0362+  18BE 00 00 00 00 
0362+  18C2 00 00 00 00 
0362+  18C6 00 00 00 00 
0362+  18CA 00 00 00 00 
0362+  18CE 00 00 00 00 
0362+  18D2 00 00 00 00 
0362+  18D6 00 00 00 00 
0362+  18DA 00 00 00 00 
0362+  18DE 00 00 00 00 
0362+  18E2 00 00 00 00 
0362+  18E6 00 00 00 00 
0362+  18EA 00 00 00 00 
0362+  18EE 00 00 00 00 
0362+  18F2 00 00 00 00 
0362+  18F6 00 00 00 00 
0362+  18FA 00 00 00 00 
0362+  18FE 00 00 00 00 
0362+  1902 00 00 00 00 
0362+  1906 00 00 00 00 
0362+  190A 00 00 00 00 
0362+  190E 00 00 00 00 
0362+  1912 00 00 00 00 
0362+  1916 00 00 00 00 
0362+  191A 00 00 00 00 
0362+  191E 00 00 00 00 
3049   1922             
3050   1922             ; kernel parameters
3051   1922             sys_debug_mode:
3052   1922 00            .db 0   ; debug modes: 0=normal mode, 1=debug mode
3053   1923             sys_echo_on:
3054   1923 01            .db 1
3055   1924             sys_uart0_lcr:
3056   1924 0F            .db %00001111 ; 8 data bits, 2 stop bits, enable parity, odd parity
3057   1925             sys_uart0_inten:
3058   1925 01            .db 1
3059   1926             sys_uart0_fifoen:
3060   1926 00            .db 0
3061   1927             sys_uart0_div0:
3062   1927 03            .db 3
3063   1928             sys_uart0_div1:
3064   1928 00            .db 0   ; default baud = 38400
3065   1929             ; baud  divisor
3066   1929             ; 50    2304
3067   1929             ; 110   1047
3068   1929             ; 300    384
3069   1929             ; 600    192
3070   1929             ; 1200    96
3071   1929             ; 9600    12
3072   1929             ; 19200    6
3073   1929             ; 38400    3
3074   1929             
3075   1929             nbr_active_procs:
3076   1929 00            .db 0
3077   192A             active_proc_index:
3078   192A 01            .db 1
3079   192B             
3080   192B             index:
3081   192B 00 00         .dw 0
3082   192D             buffer_addr:
3083   192D 00 00         .dw 0
3084   192F             
3085   192F             fifo_in:
3086   192F 67 21         .dw fifo
3087   1931             fifo_out:
3088   1931 67 21         .dw fifo
3089   1933             
3090   1933             ; file system variables
3091   1933             current_dir_id:
3092   1933 00 00         .dw 0     ; keep dirid of current directory
3093   1935             s_init_path:
3094   1935 2F 73 62 69   .db "/sbin/init", 0
3094   1939 6E 2F 69 6E 
3094   193D 69 74 00 
3095   1940             
3096   1940             s_uname:
3097   1940 73 6F 6C 61   .db "solarium v.1.0", 0
3097   1944 72 69 75 6D 
3097   1948 20 76 2E 31 
3097   194C 2E 30 00 
3098   194F             s_dataentry:
3099   194F 3E 20 00      .db "> ", 0
3100   1952             s_parent_dir:
3101   1952 2E 2E 00      .db "..", 0
3102   1955             s_current_dir:
3103   1955 2E 00         .db ".", 0
3104   1957             s_fslash:
3105   1957 2F 00         .db "/", 0
3106   1959             file_attrib:
3107   1959 2D 72 77 20   .db "-rw x"      ; chars at powers of 2
3107   195D 78 
3108   195E             file_type:
3109   195E 2D 64 63      .db "-dc"
3110   1961             s_ps_header:
3111   1961 70 69 64 20   .db "pid command\n", 0
3111   1965 63 6F 6D 6D 
3111   1969 61 6E 64 0A 
3111   196D 00 
3112   196E             s_ls_total:
3113   196E 74 6F 74 61   .db "total: ", 0
3113   1972 6C 3A 20 00 
3114   1976             
3115   1976             s_int_en:
3116   1976 69 72 71 73   .db "irqs enabled\n", 0
3116   197A 20 65 6E 61 
3116   197E 62 6C 65 64 
3116   1982 0A 00 
3117   1984             s_kernel_welcome:
3118   1984 2A 2A 2A 2A   .db "************************************************\n"
3118   1988 2A 2A 2A 2A 
3118   198C 2A 2A 2A 2A 
3118   1990 2A 2A 2A 2A 
3118   1994 2A 2A 2A 2A 
3118   1998 2A 2A 2A 2A 
3118   199C 2A 2A 2A 2A 
3118   19A0 2A 2A 2A 2A 
3118   19A4 2A 2A 2A 2A 
3118   19A8 2A 2A 2A 2A 
3118   19AC 2A 2A 2A 2A 
3118   19B0 2A 2A 2A 2A 
3118   19B4 0A 
3119   19B5 2A 2A 2A 20   .db "*** Welcome to Solarium OS - Kernel ver. 1.0 ***\n"
3119   19B9 57 65 6C 63 
3119   19BD 6F 6D 65 20 
3119   19C1 74 6F 20 53 
3119   19C5 6F 6C 61 72 
3119   19C9 69 75 6D 20 
3119   19CD 4F 53 20 2D 
3119   19D1 20 4B 65 72 
3119   19D5 6E 65 6C 20 
3119   19D9 76 65 72 2E 
3119   19DD 20 31 2E 30 
3119   19E1 20 2A 2A 2A 
3119   19E5 0A 
3120   19E6 2A 2A 2A 20   .db "***                                          ***\n"
3120   19EA 20 20 20 20 
3120   19EE 20 20 20 20 
3120   19F2 20 20 20 20 
3120   19F6 20 20 20 20 
3120   19FA 20 20 20 20 
3120   19FE 20 20 20 20 
3120   1A02 20 20 20 20 
3120   1A06 20 20 20 20 
3120   1A0A 20 20 20 20 
3120   1A0E 20 20 20 20 
3120   1A12 20 2A 2A 2A 
3120   1A16 0A 
3121   1A17 2A 2A 2A 20   .db "*** type help for more information           ***\n"
3121   1A1B 74 79 70 65 
3121   1A1F 20 68 65 6C 
3121   1A23 70 20 66 6F 
3121   1A27 72 20 6D 6F 
3121   1A2B 72 65 20 69 
3121   1A2F 6E 66 6F 72 
3121   1A33 6D 61 74 69 
3121   1A37 6F 6E 20 20 
3121   1A3B 20 20 20 20 
3121   1A3F 20 20 20 20 
3121   1A43 20 2A 2A 2A 
3121   1A47 0A 
3122   1A48 2A 2A 2A 2A   .db "************************************************\n"
3122   1A4C 2A 2A 2A 2A 
3122   1A50 2A 2A 2A 2A 
3122   1A54 2A 2A 2A 2A 
3122   1A58 2A 2A 2A 2A 
3122   1A5C 2A 2A 2A 2A 
3122   1A60 2A 2A 2A 2A 
3122   1A64 2A 2A 2A 2A 
3122   1A68 2A 2A 2A 2A 
3122   1A6C 2A 2A 2A 2A 
3122   1A70 2A 2A 2A 2A 
3122   1A74 2A 2A 2A 2A 
3122   1A78 0A 
3123   1A79             s_prompt_init:
3124   1A79 73 74 61 72   .db "starting init\n", 0
3124   1A7D 74 69 6E 67 
3124   1A81 20 69 6E 69 
3124   1A85 74 0A 00 
3125   1A88             s_priviledge:
3126   1A88 0A 65 78 63   .db "\nexception: privilege\n", 0
3126   1A8C 65 70 74 69 
3126   1A90 6F 6E 3A 20 
3126   1A94 70 72 69 76 
3126   1A98 69 6C 65 67 
3126   1A9C 65 0A 00 
3127   1A9F             s_divzero:
3128   1A9F 0A 65 78 63   .db "\nexception: zero division\n", 0
3128   1AA3 65 70 74 69 
3128   1AA7 6F 6E 3A 20 
3128   1AAB 7A 65 72 6F 
3128   1AAF 20 64 69 76 
3128   1AB3 69 73 69 6F 
3128   1AB7 6E 0A 00 
3129   1ABA             
3130   1ABA             s_set_year:
3131   1ABA 79 65 61 72   .db "year: ", 0
3131   1ABE 3A 20 00 
3132   1AC1             s_set_month:
3133   1AC1 6D 6F 6E 74   .db "month: ", 0
3133   1AC5 68 3A 20 00 
3134   1AC9             s_set_day:
3135   1AC9 64 61 79 3A   .db "day: ", 0
3135   1ACD 20 00 
3136   1ACF             s_set_week:
3137   1ACF 77 65 65 6B   .db "weekday: ", 0
3137   1AD3 64 61 79 3A 
3137   1AD7 20 00 
3138   1AD9             s_set_hours:
3139   1AD9 68 6F 75 72   .db "hours: ", 0
3139   1ADD 73 3A 20 00 
3140   1AE1             s_set_minutes:
3141   1AE1 6D 69 6E 75   .db "minutes: ", 0
3141   1AE5 74 65 73 3A 
3141   1AE9 20 00 
3142   1AEB             s_set_seconds:
3143   1AEB 73 65 63 6F   .db "seconds: ", 0
3143   1AEF 6E 64 73 3A 
3143   1AF3 20 00 
3144   1AF5             s_months:      
3145   1AF5 20 20 20 00   .db "   ", 0
3146   1AF9 6A 61 6E 00   .db "jan", 0
3147   1AFD 66 65 62 00   .db "feb", 0
3148   1B01 6D 61 72 00   .db "mar", 0
3149   1B05 61 70 72 00   .db "apr", 0
3150   1B09 6D 61 79 00   .db "may", 0
3151   1B0D 6A 75 6E 00   .db "jun", 0
3152   1B11 6A 75 6C 00   .db "jul", 0
3153   1B15 61 75 67 00   .db "aug", 0
3154   1B19 73 65 70 00   .db "sep", 0
3155   1B1D 6F 63 74 00   .db "oct", 0
3156   1B21 6E 6F 76 00   .db "nov", 0
3157   1B25 64 65 63 00   .db "dec", 0
3158   1B29             
3159   1B29             s_week:        
3160   1B29 73 75 6E 00   .db "sun", 0 
3161   1B2D 6D 6F 6E 00   .db "mon", 0 
3162   1B31 74 75 65 00   .db "tue", 0 
3163   1B35 77 65 64 00   .db "wed", 0 
3164   1B39 74 68 75 00   .db "thu", 0 
3165   1B3D 66 72 69 00   .db "fri", 0 
3166   1B41 73 61 74 00   .db "sat", 0
3167   1B45             
3168   1B45 0A 49 52 51 s_fdc_irq: .db "\nIRQ0 Executed.\n", 0
3168   1B49 30 20 45 78 
3168   1B4D 65 63 75 74 
3168   1B51 65 64 2E 0A 
3168   1B55 00 
3169   1B56             s_fdc_config:
3170   1B56 73 65 6C 65   .db "selecting diskette drive 0, side 0, single density, head loaded\n", 0
3170   1B5A 63 74 69 6E 
3170   1B5E 67 20 64 69 
3170   1B62 73 6B 65 74 
3170   1B66 74 65 20 64 
3170   1B6A 72 69 76 65 
3170   1B6E 20 30 2C 20 
3170   1B72 73 69 64 65 
3170   1B76 20 30 2C 20 
3170   1B7A 73 69 6E 67 
3170   1B7E 6C 65 20 64 
3170   1B82 65 6E 73 69 
3170   1B86 74 79 2C 20 
3170   1B8A 68 65 61 64 
3170   1B8E 20 6C 6F 61 
3170   1B92 64 65 64 0A 
3170   1B96 00 
3171   1B97             
3172   1B97             proc_state_table:   
3173   1B97 00 00 00 00   .fill 16 * 20, 0  ; for 15 processes max
3173   1B9B 00 00 00 00 
3173   1B9F 00 00 00 00 
3173   1BA3 00 00 00 00 
3173   1BA7 00 00 00 00 
3173   1BAB 00 00 00 00 
3173   1BAF 00 00 00 00 
3173   1BB3 00 00 00 00 
3173   1BB7 00 00 00 00 
3173   1BBB 00 00 00 00 
3173   1BBF 00 00 00 00 
3173   1BC3 00 00 00 00 
3173   1BC7 00 00 00 00 
3173   1BCB 00 00 00 00 
3173   1BCF 00 00 00 00 
3173   1BD3 00 00 00 00 
3173   1BD7 00 00 00 00 
3173   1BDB 00 00 00 00 
3173   1BDF 00 00 00 00 
3173   1BE3 00 00 00 00 
3173   1BE7 00 00 00 00 
3173   1BEB 00 00 00 00 
3173   1BEF 00 00 00 00 
3173   1BF3 00 00 00 00 
3173   1BF7 00 00 00 00 
3173   1BFB 00 00 00 00 
3173   1BFF 00 00 00 00 
3173   1C03 00 00 00 00 
3173   1C07 00 00 00 00 
3173   1C0B 00 00 00 00 
3173   1C0F 00 00 00 00 
3173   1C13 00 00 00 00 
3173   1C17 00 00 00 00 
3173   1C1B 00 00 00 00 
3173   1C1F 00 00 00 00 
3173   1C23 00 00 00 00 
3173   1C27 00 00 00 00 
3173   1C2B 00 00 00 00 
3173   1C2F 00 00 00 00 
3173   1C33 00 00 00 00 
3173   1C37 00 00 00 00 
3173   1C3B 00 00 00 00 
3173   1C3F 00 00 00 00 
3173   1C43 00 00 00 00 
3173   1C47 00 00 00 00 
3173   1C4B 00 00 00 00 
3173   1C4F 00 00 00 00 
3173   1C53 00 00 00 00 
3173   1C57 00 00 00 00 
3173   1C5B 00 00 00 00 
3173   1C5F 00 00 00 00 
3173   1C63 00 00 00 00 
3173   1C67 00 00 00 00 
3173   1C6B 00 00 00 00 
3173   1C6F 00 00 00 00 
3173   1C73 00 00 00 00 
3173   1C77 00 00 00 00 
3173   1C7B 00 00 00 00 
3173   1C7F 00 00 00 00 
3173   1C83 00 00 00 00 
3173   1C87 00 00 00 00 
3173   1C8B 00 00 00 00 
3173   1C8F 00 00 00 00 
3173   1C93 00 00 00 00 
3173   1C97 00 00 00 00 
3173   1C9B 00 00 00 00 
3173   1C9F 00 00 00 00 
3173   1CA3 00 00 00 00 
3173   1CA7 00 00 00 00 
3173   1CAB 00 00 00 00 
3173   1CAF 00 00 00 00 
3173   1CB3 00 00 00 00 
3173   1CB7 00 00 00 00 
3173   1CBB 00 00 00 00 
3173   1CBF 00 00 00 00 
3173   1CC3 00 00 00 00 
3173   1CC7 00 00 00 00 
3173   1CCB 00 00 00 00 
3173   1CCF 00 00 00 00 
3173   1CD3 00 00 00 00 
3174   1CD7             proc_availab_table: 
3175   1CD7 00 00 00 00   .fill 16, 0       ; space for 15 processes. 0 = process empty, 1 = process taken
3175   1CDB 00 00 00 00 
3175   1CDF 00 00 00 00 
3175   1CE3 00 00 00 00 
3176   1CE7             proc_names:
3177   1CE7 00 00 00 00   .fill 16 * 32, 0  ; process names
3177   1CEB 00 00 00 00 
3177   1CEF 00 00 00 00 
3177   1CF3 00 00 00 00 
3177   1CF7 00 00 00 00 
3177   1CFB 00 00 00 00 
3177   1CFF 00 00 00 00 
3177   1D03 00 00 00 00 
3177   1D07 00 00 00 00 
3177   1D0B 00 00 00 00 
3177   1D0F 00 00 00 00 
3177   1D13 00 00 00 00 
3177   1D17 00 00 00 00 
3177   1D1B 00 00 00 00 
3177   1D1F 00 00 00 00 
3177   1D23 00 00 00 00 
3177   1D27 00 00 00 00 
3177   1D2B 00 00 00 00 
3177   1D2F 00 00 00 00 
3177   1D33 00 00 00 00 
3177   1D37 00 00 00 00 
3177   1D3B 00 00 00 00 
3177   1D3F 00 00 00 00 
3177   1D43 00 00 00 00 
3177   1D47 00 00 00 00 
3177   1D4B 00 00 00 00 
3177   1D4F 00 00 00 00 
3177   1D53 00 00 00 00 
3177   1D57 00 00 00 00 
3177   1D5B 00 00 00 00 
3177   1D5F 00 00 00 00 
3177   1D63 00 00 00 00 
3177   1D67 00 00 00 00 
3177   1D6B 00 00 00 00 
3177   1D6F 00 00 00 00 
3177   1D73 00 00 00 00 
3177   1D77 00 00 00 00 
3177   1D7B 00 00 00 00 
3177   1D7F 00 00 00 00 
3177   1D83 00 00 00 00 
3177   1D87 00 00 00 00 
3177   1D8B 00 00 00 00 
3177   1D8F 00 00 00 00 
3177   1D93 00 00 00 00 
3177   1D97 00 00 00 00 
3177   1D9B 00 00 00 00 
3177   1D9F 00 00 00 00 
3177   1DA3 00 00 00 00 
3177   1DA7 00 00 00 00 
3177   1DAB 00 00 00 00 
3177   1DAF 00 00 00 00 
3177   1DB3 00 00 00 00 
3177   1DB7 00 00 00 00 
3177   1DBB 00 00 00 00 
3177   1DBF 00 00 00 00 
3177   1DC3 00 00 00 00 
3177   1DC7 00 00 00 00 
3177   1DCB 00 00 00 00 
3177   1DCF 00 00 00 00 
3177   1DD3 00 00 00 00 
3177   1DD7 00 00 00 00 
3177   1DDB 00 00 00 00 
3177   1DDF 00 00 00 00 
3177   1DE3 00 00 00 00 
3177   1DE7 00 00 00 00 
3177   1DEB 00 00 00 00 
3177   1DEF 00 00 00 00 
3177   1DF3 00 00 00 00 
3177   1DF7 00 00 00 00 
3177   1DFB 00 00 00 00 
3177   1DFF 00 00 00 00 
3177   1E03 00 00 00 00 
3177   1E07 00 00 00 00 
3177   1E0B 00 00 00 00 
3177   1E0F 00 00 00 00 
3177   1E13 00 00 00 00 
3177   1E17 00 00 00 00 
3177   1E1B 00 00 00 00 
3177   1E1F 00 00 00 00 
3177   1E23 00 00 00 00 
3177   1E27 00 00 00 00 
3177   1E2B 00 00 00 00 
3177   1E2F 00 00 00 00 
3177   1E33 00 00 00 00 
3177   1E37 00 00 00 00 
3177   1E3B 00 00 00 00 
3177   1E3F 00 00 00 00 
3177   1E43 00 00 00 00 
3177   1E47 00 00 00 00 
3177   1E4B 00 00 00 00 
3177   1E4F 00 00 00 00 
3177   1E53 00 00 00 00 
3177   1E57 00 00 00 00 
3177   1E5B 00 00 00 00 
3177   1E5F 00 00 00 00 
3177   1E63 00 00 00 00 
3177   1E67 00 00 00 00 
3177   1E6B 00 00 00 00 
3177   1E6F 00 00 00 00 
3177   1E73 00 00 00 00 
3177   1E77 00 00 00 00 
3177   1E7B 00 00 00 00 
3177   1E7F 00 00 00 00 
3177   1E83 00 00 00 00 
3177   1E87 00 00 00 00 
3177   1E8B 00 00 00 00 
3177   1E8F 00 00 00 00 
3177   1E93 00 00 00 00 
3177   1E97 00 00 00 00 
3177   1E9B 00 00 00 00 
3177   1E9F 00 00 00 00 
3177   1EA3 00 00 00 00 
3177   1EA7 00 00 00 00 
3177   1EAB 00 00 00 00 
3177   1EAF 00 00 00 00 
3177   1EB3 00 00 00 00 
3177   1EB7 00 00 00 00 
3177   1EBB 00 00 00 00 
3177   1EBF 00 00 00 00 
3177   1EC3 00 00 00 00 
3177   1EC7 00 00 00 00 
3177   1ECB 00 00 00 00 
3177   1ECF 00 00 00 00 
3177   1ED3 00 00 00 00 
3177   1ED7 00 00 00 00 
3177   1EDB 00 00 00 00 
3177   1EDF 00 00 00 00 
3177   1EE3 00 00 00 00 
3178   1EE7             filename:
3179   1EE7 00 00 00 00   .fill 128, 0      ; holds a path for file search
3179   1EEB 00 00 00 00 
3179   1EEF 00 00 00 00 
3179   1EF3 00 00 00 00 
3179   1EF7 00 00 00 00 
3179   1EFB 00 00 00 00 
3179   1EFF 00 00 00 00 
3179   1F03 00 00 00 00 
3179   1F07 00 00 00 00 
3179   1F0B 00 00 00 00 
3179   1F0F 00 00 00 00 
3179   1F13 00 00 00 00 
3179   1F17 00 00 00 00 
3179   1F1B 00 00 00 00 
3179   1F1F 00 00 00 00 
3179   1F23 00 00 00 00 
3179   1F27 00 00 00 00 
3179   1F2B 00 00 00 00 
3179   1F2F 00 00 00 00 
3179   1F33 00 00 00 00 
3179   1F37 00 00 00 00 
3179   1F3B 00 00 00 00 
3179   1F3F 00 00 00 00 
3179   1F43 00 00 00 00 
3179   1F47 00 00 00 00 
3179   1F4B 00 00 00 00 
3179   1F4F 00 00 00 00 
3179   1F53 00 00 00 00 
3179   1F57 00 00 00 00 
3179   1F5B 00 00 00 00 
3179   1F5F 00 00 00 00 
3179   1F63 00 00 00 00 
3180   1F67             user_data:
3181   1F67 00 00 00 00   .fill 512, 0      ;  user space data
3181   1F6B 00 00 00 00 
3181   1F6F 00 00 00 00 
3181   1F73 00 00 00 00 
3181   1F77 00 00 00 00 
3181   1F7B 00 00 00 00 
3181   1F7F 00 00 00 00 
3181   1F83 00 00 00 00 
3181   1F87 00 00 00 00 
3181   1F8B 00 00 00 00 
3181   1F8F 00 00 00 00 
3181   1F93 00 00 00 00 
3181   1F97 00 00 00 00 
3181   1F9B 00 00 00 00 
3181   1F9F 00 00 00 00 
3181   1FA3 00 00 00 00 
3181   1FA7 00 00 00 00 
3181   1FAB 00 00 00 00 
3181   1FAF 00 00 00 00 
3181   1FB3 00 00 00 00 
3181   1FB7 00 00 00 00 
3181   1FBB 00 00 00 00 
3181   1FBF 00 00 00 00 
3181   1FC3 00 00 00 00 
3181   1FC7 00 00 00 00 
3181   1FCB 00 00 00 00 
3181   1FCF 00 00 00 00 
3181   1FD3 00 00 00 00 
3181   1FD7 00 00 00 00 
3181   1FDB 00 00 00 00 
3181   1FDF 00 00 00 00 
3181   1FE3 00 00 00 00 
3181   1FE7 00 00 00 00 
3181   1FEB 00 00 00 00 
3181   1FEF 00 00 00 00 
3181   1FF3 00 00 00 00 
3181   1FF7 00 00 00 00 
3181   1FFB 00 00 00 00 
3181   1FFF 00 00 00 00 
3181   2003 00 00 00 00 
3181   2007 00 00 00 00 
3181   200B 00 00 00 00 
3181   200F 00 00 00 00 
3181   2013 00 00 00 00 
3181   2017 00 00 00 00 
3181   201B 00 00 00 00 
3181   201F 00 00 00 00 
3181   2023 00 00 00 00 
3181   2027 00 00 00 00 
3181   202B 00 00 00 00 
3181   202F 00 00 00 00 
3181   2033 00 00 00 00 
3181   2037 00 00 00 00 
3181   203B 00 00 00 00 
3181   203F 00 00 00 00 
3181   2043 00 00 00 00 
3181   2047 00 00 00 00 
3181   204B 00 00 00 00 
3181   204F 00 00 00 00 
3181   2053 00 00 00 00 
3181   2057 00 00 00 00 
3181   205B 00 00 00 00 
3181   205F 00 00 00 00 
3181   2063 00 00 00 00 
3181   2067 00 00 00 00 
3181   206B 00 00 00 00 
3181   206F 00 00 00 00 
3181   2073 00 00 00 00 
3181   2077 00 00 00 00 
3181   207B 00 00 00 00 
3181   207F 00 00 00 00 
3181   2083 00 00 00 00 
3181   2087 00 00 00 00 
3181   208B 00 00 00 00 
3181   208F 00 00 00 00 
3181   2093 00 00 00 00 
3181   2097 00 00 00 00 
3181   209B 00 00 00 00 
3181   209F 00 00 00 00 
3181   20A3 00 00 00 00 
3181   20A7 00 00 00 00 
3181   20AB 00 00 00 00 
3181   20AF 00 00 00 00 
3181   20B3 00 00 00 00 
3181   20B7 00 00 00 00 
3181   20BB 00 00 00 00 
3181   20BF 00 00 00 00 
3181   20C3 00 00 00 00 
3181   20C7 00 00 00 00 
3181   20CB 00 00 00 00 
3181   20CF 00 00 00 00 
3181   20D3 00 00 00 00 
3181   20D7 00 00 00 00 
3181   20DB 00 00 00 00 
3181   20DF 00 00 00 00 
3181   20E3 00 00 00 00 
3181   20E7 00 00 00 00 
3181   20EB 00 00 00 00 
3181   20EF 00 00 00 00 
3181   20F3 00 00 00 00 
3181   20F7 00 00 00 00 
3181   20FB 00 00 00 00 
3181   20FF 00 00 00 00 
3181   2103 00 00 00 00 
3181   2107 00 00 00 00 
3181   210B 00 00 00 00 
3181   210F 00 00 00 00 
3181   2113 00 00 00 00 
3181   2117 00 00 00 00 
3181   211B 00 00 00 00 
3181   211F 00 00 00 00 
3181   2123 00 00 00 00 
3181   2127 00 00 00 00 
3181   212B 00 00 00 00 
3181   212F 00 00 00 00 
3181   2133 00 00 00 00 
3181   2137 00 00 00 00 
3181   213B 00 00 00 00 
3181   213F 00 00 00 00 
3181   2143 00 00 00 00 
3181   2147 00 00 00 00 
3181   214B 00 00 00 00 
3181   214F 00 00 00 00 
3181   2153 00 00 00 00 
3181   2157 00 00 00 00 
3181   215B 00 00 00 00 
3181   215F 00 00 00 00 
3181   2163 00 00 00 00 
3182   2167             fifo:
3183   2167 FF FF FF FF   .fill _fifo_size
3183   216B FF FF FF FF 
3183   216F FF FF FF FF 
3183   2173 FF FF FF FF 
3183   2177 FF FF FF FF 
3183   217B FF FF FF FF 
3183   217F FF FF FF FF 
3183   2183 FF FF FF FF 
3183   2187 FF FF FF FF 
3183   218B FF FF FF FF 
3183   218F FF FF FF FF 
3183   2193 FF FF FF FF 
3183   2197 FF FF FF FF 
3183   219B FF FF FF FF 
3183   219F FF FF FF FF 
3183   21A3 FF FF FF FF 
3183   21A7 FF FF FF FF 
3183   21AB FF FF FF FF 
3183   21AF FF FF FF FF 
3183   21B3 FF FF FF FF 
3183   21B7 FF FF FF FF 
3183   21BB FF FF FF FF 
3183   21BF FF FF FF FF 
3183   21C3 FF FF FF FF 
3183   21C7 FF FF FF FF 
3183   21CB FF FF FF FF 
3183   21CF FF FF FF FF 
3183   21D3 FF FF FF FF 
3183   21D7 FF FF FF FF 
3183   21DB FF FF FF FF 
3183   21DF FF FF FF FF 
3183   21E3 FF FF FF FF 
3183   21E7 FF FF FF FF 
3183   21EB FF FF FF FF 
3183   21EF FF FF FF FF 
3183   21F3 FF FF FF FF 
3183   21F7 FF FF FF FF 
3183   21FB FF FF FF FF 
3183   21FF FF FF FF FF 
3183   2203 FF FF FF FF 
3183   2207 FF FF FF FF 
3183   220B FF FF FF FF 
3183   220F FF FF FF FF 
3183   2213 FF FF FF FF 
3183   2217 FF FF FF FF 
3183   221B FF FF FF FF 
3183   221F FF FF FF FF 
3183   2223 FF FF FF FF 
3183   2227 FF FF FF FF 
3183   222B FF FF FF FF 
3183   222F FF FF FF FF 
3183   2233 FF FF FF FF 
3183   2237 FF FF FF FF 
3183   223B FF FF FF FF 
3183   223F FF FF FF FF 
3183   2243 FF FF FF FF 
3183   2247 FF FF FF FF 
3183   224B FF FF FF FF 
3183   224F FF FF FF FF 
3183   2253 FF FF FF FF 
3183   2257 FF FF FF FF 
3183   225B FF FF FF FF 
3183   225F FF FF FF FF 
3183   2263 FF FF FF FF 
3183   2267 FF FF FF FF 
3183   226B FF FF FF FF 
3183   226F FF FF FF FF 
3183   2273 FF FF FF FF 
3183   2277 FF FF FF FF 
3183   227B FF FF FF FF 
3183   227F FF FF FF FF 
3183   2283 FF FF FF FF 
3183   2287 FF FF FF FF 
3183   228B FF FF FF FF 
3183   228F FF FF FF FF 
3183   2293 FF FF FF FF 
3183   2297 FF FF FF FF 
3183   229B FF FF FF FF 
3183   229F FF FF FF FF 
3183   22A3 FF FF FF FF 
3183   22A7 FF FF FF FF 
3183   22AB FF FF FF FF 
3183   22AF FF FF FF FF 
3183   22B3 FF FF FF FF 
3183   22B7 FF FF FF FF 
3183   22BB FF FF FF FF 
3183   22BF FF FF FF FF 
3183   22C3 FF FF FF FF 
3183   22C7 FF FF FF FF 
3183   22CB FF FF FF FF 
3183   22CF FF FF FF FF 
3183   22D3 FF FF FF FF 
3183   22D7 FF FF FF FF 
3183   22DB FF FF FF FF 
3183   22DF FF FF FF FF 
3183   22E3 FF FF FF FF 
3183   22E7 FF FF FF FF 
3183   22EB FF FF FF FF 
3183   22EF FF FF FF FF 
3183   22F3 FF FF FF FF 
3183   22F7 FF FF FF FF 
3183   22FB FF FF FF FF 
3183   22FF FF FF FF FF 
3183   2303 FF FF FF FF 
3183   2307 FF FF FF FF 
3183   230B FF FF FF FF 
3183   230F FF FF FF FF 
3183   2313 FF FF FF FF 
3183   2317 FF FF FF FF 
3183   231B FF FF FF FF 
3183   231F FF FF FF FF 
3183   2323 FF FF FF FF 
3183   2327 FF FF FF FF 
3183   232B FF FF FF FF 
3183   232F FF FF FF FF 
3183   2333 FF FF FF FF 
3183   2337 FF FF FF FF 
3183   233B FF FF FF FF 
3183   233F FF FF FF FF 
3183   2343 FF FF FF FF 
3183   2347 FF FF FF FF 
3183   234B FF FF FF FF 
3183   234F FF FF FF FF 
3183   2353 FF FF FF FF 
3183   2357 FF FF FF FF 
3183   235B FF FF FF FF 
3183   235F FF FF FF FF 
3183   2363 FF FF FF FF 
3183   2367 FF FF FF FF 
3183   236B FF FF FF FF 
3183   236F FF FF FF FF 
3183   2373 FF FF FF FF 
3183   2377 FF FF FF FF 
3183   237B FF FF FF FF 
3183   237F FF FF FF FF 
3183   2383 FF FF FF FF 
3183   2387 FF FF FF FF 
3183   238B FF FF FF FF 
3183   238F FF FF FF FF 
3183   2393 FF FF FF FF 
3183   2397 FF FF FF FF 
3183   239B FF FF FF FF 
3183   239F FF FF FF FF 
3183   23A3 FF FF FF FF 
3183   23A7 FF FF FF FF 
3183   23AB FF FF FF FF 
3183   23AF FF FF FF FF 
3183   23B3 FF FF FF FF 
3183   23B7 FF FF FF FF 
3183   23BB FF FF FF FF 
3183   23BF FF FF FF FF 
3183   23C3 FF FF FF FF 
3183   23C7 FF FF FF FF 
3183   23CB FF FF FF FF 
3183   23CF FF FF FF FF 
3183   23D3 FF FF FF FF 
3183   23D7 FF FF FF FF 
3183   23DB FF FF FF FF 
3183   23DF FF FF FF FF 
3183   23E3 FF FF FF FF 
3183   23E7 FF FF FF FF 
3183   23EB FF FF FF FF 
3183   23EF FF FF FF FF 
3183   23F3 FF FF FF FF 
3183   23F7 FF FF FF FF 
3183   23FB FF FF FF FF 
3183   23FF FF FF FF FF 
3183   2403 FF FF FF FF 
3183   2407 FF FF FF FF 
3183   240B FF FF FF FF 
3183   240F FF FF FF FF 
3183   2413 FF FF FF FF 
3183   2417 FF FF FF FF 
3183   241B FF FF FF FF 
3183   241F FF FF FF FF 
3183   2423 FF FF FF FF 
3183   2427 FF FF FF FF 
3183   242B FF FF FF FF 
3183   242F FF FF FF FF 
3183   2433 FF FF FF FF 
3183   2437 FF FF FF FF 
3183   243B FF FF FF FF 
3183   243F FF FF FF FF 
3183   2443 FF FF FF FF 
3183   2447 FF FF FF FF 
3183   244B FF FF FF FF 
3183   244F FF FF FF FF 
3183   2453 FF FF FF FF 
3183   2457 FF FF FF FF 
3183   245B FF FF FF FF 
3183   245F FF FF FF FF 
3183   2463 FF FF FF FF 
3183   2467 FF FF FF FF 
3183   246B FF FF FF FF 
3183   246F FF FF FF FF 
3183   2473 FF FF FF FF 
3183   2477 FF FF FF FF 
3183   247B FF FF FF FF 
3183   247F FF FF FF FF 
3183   2483 FF FF FF FF 
3183   2487 FF FF FF FF 
3183   248B FF FF FF FF 
3183   248F FF FF FF FF 
3183   2493 FF FF FF FF 
3183   2497 FF FF FF FF 
3183   249B FF FF FF FF 
3183   249F FF FF FF FF 
3183   24A3 FF FF FF FF 
3183   24A7 FF FF FF FF 
3183   24AB FF FF FF FF 
3183   24AF FF FF FF FF 
3183   24B3 FF FF FF FF 
3183   24B7 FF FF FF FF 
3183   24BB FF FF FF FF 
3183   24BF FF FF FF FF 
3183   24C3 FF FF FF FF 
3183   24C7 FF FF FF FF 
3183   24CB FF FF FF FF 
3183   24CF FF FF FF FF 
3183   24D3 FF FF FF FF 
3183   24D7 FF FF FF FF 
3183   24DB FF FF FF FF 
3183   24DF FF FF FF FF 
3183   24E3 FF FF FF FF 
3183   24E7 FF FF FF FF 
3183   24EB FF FF FF FF 
3183   24EF FF FF FF FF 
3183   24F3 FF FF FF FF 
3183   24F7 FF FF FF FF 
3183   24FB FF FF FF FF 
3183   24FF FF FF FF FF 
3183   2503 FF FF FF FF 
3183   2507 FF FF FF FF 
3183   250B FF FF FF FF 
3183   250F FF FF FF FF 
3183   2513 FF FF FF FF 
3183   2517 FF FF FF FF 
3183   251B FF FF FF FF 
3183   251F FF FF FF FF 
3183   2523 FF FF FF FF 
3183   2527 FF FF FF FF 
3183   252B FF FF FF FF 
3183   252F FF FF FF FF 
3183   2533 FF FF FF FF 
3183   2537 FF FF FF FF 
3183   253B FF FF FF FF 
3183   253F FF FF FF FF 
3183   2543 FF FF FF FF 
3183   2547 FF FF FF FF 
3183   254B FF FF FF FF 
3183   254F FF FF FF FF 
3183   2553 FF FF FF FF 
3183   2557 FF FF FF FF 
3183   255B FF FF FF FF 
3183   255F FF FF FF FF 
3183   2563 FF FF FF FF 
3183   2567 FF FF FF FF 
3183   256B FF FF FF FF 
3183   256F FF FF FF FF 
3183   2573 FF FF FF FF 
3183   2577 FF FF FF FF 
3183   257B FF FF FF FF 
3183   257F FF FF FF FF 
3183   2583 FF FF FF FF 
3183   2587 FF FF FF FF 
3183   258B FF FF FF FF 
3183   258F FF FF FF FF 
3183   2593 FF FF FF FF 
3183   2597 FF FF FF FF 
3183   259B FF FF FF FF 
3183   259F FF FF FF FF 
3183   25A3 FF FF FF FF 
3183   25A7 FF FF FF FF 
3183   25AB FF FF FF FF 
3183   25AF FF FF FF FF 
3183   25B3 FF FF FF FF 
3183   25B7 FF FF FF FF 
3183   25BB FF FF FF FF 
3183   25BF FF FF FF FF 
3183   25C3 FF FF FF FF 
3183   25C7 FF FF FF FF 
3183   25CB FF FF FF FF 
3183   25CF FF FF FF FF 
3183   25D3 FF FF FF FF 
3183   25D7 FF FF FF FF 
3183   25DB FF FF FF FF 
3183   25DF FF FF FF FF 
3183   25E3 FF FF FF FF 
3183   25E7 FF FF FF FF 
3183   25EB FF FF FF FF 
3183   25EF FF FF FF FF 
3183   25F3 FF FF FF FF 
3183   25F7 FF FF FF FF 
3183   25FB FF FF FF FF 
3183   25FF FF FF FF FF 
3183   2603 FF FF FF FF 
3183   2607 FF FF FF FF 
3183   260B FF FF FF FF 
3183   260F FF FF FF FF 
3183   2613 FF FF FF FF 
3183   2617 FF FF FF FF 
3183   261B FF FF FF FF 
3183   261F FF FF FF FF 
3183   2623 FF FF FF FF 
3183   2627 FF FF FF FF 
3183   262B FF FF FF FF 
3183   262F FF FF FF FF 
3183   2633 FF FF FF FF 
3183   2637 FF FF FF FF 
3183   263B FF FF FF FF 
3183   263F FF FF FF FF 
3183   2643 FF FF FF FF 
3183   2647 FF FF FF FF 
3183   264B FF FF FF FF 
3183   264F FF FF FF FF 
3183   2653 FF FF FF FF 
3183   2657 FF FF FF FF 
3183   265B FF FF FF FF 
3183   265F FF FF FF FF 
3183   2663 FF FF FF FF 
3183   2667 FF FF FF FF 
3183   266B FF FF FF FF 
3183   266F FF FF FF FF 
3183   2673 FF FF FF FF 
3183   2677 FF FF FF FF 
3183   267B FF FF FF FF 
3183   267F FF FF FF FF 
3183   2683 FF FF FF FF 
3183   2687 FF FF FF FF 
3183   268B FF FF FF FF 
3183   268F FF FF FF FF 
3183   2693 FF FF FF FF 
3183   2697 FF FF FF FF 
3183   269B FF FF FF FF 
3183   269F FF FF FF FF 
3183   26A3 FF FF FF FF 
3183   26A7 FF FF FF FF 
3183   26AB FF FF FF FF 
3183   26AF FF FF FF FF 
3183   26B3 FF FF FF FF 
3183   26B7 FF FF FF FF 
3183   26BB FF FF FF FF 
3183   26BF FF FF FF FF 
3183   26C3 FF FF FF FF 
3183   26C7 FF FF FF FF 
3183   26CB FF FF FF FF 
3183   26CF FF FF FF FF 
3183   26D3 FF FF FF FF 
3183   26D7 FF FF FF FF 
3183   26DB FF FF FF FF 
3183   26DF FF FF FF FF 
3183   26E3 FF FF FF FF 
3183   26E7 FF FF FF FF 
3183   26EB FF FF FF FF 
3183   26EF FF FF FF FF 
3183   26F3 FF FF FF FF 
3183   26F7 FF FF FF FF 
3183   26FB FF FF FF FF 
3183   26FF FF FF FF FF 
3183   2703 FF FF FF FF 
3183   2707 FF FF FF FF 
3183   270B FF FF FF FF 
3183   270F FF FF FF FF 
3183   2713 FF FF FF FF 
3183   2717 FF FF FF FF 
3183   271B FF FF FF FF 
3183   271F FF FF FF FF 
3183   2723 FF FF FF FF 
3183   2727 FF FF FF FF 
3183   272B FF FF FF FF 
3183   272F FF FF FF FF 
3183   2733 FF FF FF FF 
3183   2737 FF FF FF FF 
3183   273B FF FF FF FF 
3183   273F FF FF FF FF 
3183   2743 FF FF FF FF 
3183   2747 FF FF FF FF 
3183   274B FF FF FF FF 
3183   274F FF FF FF FF 
3183   2753 FF FF FF FF 
3183   2757 FF FF FF FF 
3183   275B FF FF FF FF 
3183   275F FF FF FF FF 
3183   2763 FF FF FF FF 
3183   2767 FF FF FF FF 
3183   276B FF FF FF FF 
3183   276F FF FF FF FF 
3183   2773 FF FF FF FF 
3183   2777 FF FF FF FF 
3183   277B FF FF FF FF 
3183   277F FF FF FF FF 
3183   2783 FF FF FF FF 
3183   2787 FF FF FF FF 
3183   278B FF FF FF FF 
3183   278F FF FF FF FF 
3183   2793 FF FF FF FF 
3183   2797 FF FF FF FF 
3183   279B FF FF FF FF 
3183   279F FF FF FF FF 
3183   27A3 FF FF FF FF 
3183   27A7 FF FF FF FF 
3183   27AB FF FF FF FF 
3183   27AF FF FF FF FF 
3183   27B3 FF FF FF FF 
3183   27B7 FF FF FF FF 
3183   27BB FF FF FF FF 
3183   27BF FF FF FF FF 
3183   27C3 FF FF FF FF 
3183   27C7 FF FF FF FF 
3183   27CB FF FF FF FF 
3183   27CF FF FF FF FF 
3183   27D3 FF FF FF FF 
3183   27D7 FF FF FF FF 
3183   27DB FF FF FF FF 
3183   27DF FF FF FF FF 
3183   27E3 FF FF FF FF 
3183   27E7 FF FF FF FF 
3183   27EB FF FF FF FF 
3183   27EF FF FF FF FF 
3183   27F3 FF FF FF FF 
3183   27F7 FF FF FF FF 
3183   27FB FF FF FF FF 
3183   27FF FF FF FF FF 
3183   2803 FF FF FF FF 
3183   2807 FF FF FF FF 
3183   280B FF FF FF FF 
3183   280F FF FF FF FF 
3183   2813 FF FF FF FF 
3183   2817 FF FF FF FF 
3183   281B FF FF FF FF 
3183   281F FF FF FF FF 
3183   2823 FF FF FF FF 
3183   2827 FF FF FF FF 
3183   282B FF FF FF FF 
3183   282F FF FF FF FF 
3183   2833 FF FF FF FF 
3183   2837 FF FF FF FF 
3183   283B FF FF FF FF 
3183   283F FF FF FF FF 
3183   2843 FF FF FF FF 
3183   2847 FF FF FF FF 
3183   284B FF FF FF FF 
3183   284F FF FF FF FF 
3183   2853 FF FF FF FF 
3183   2857 FF FF FF FF 
3183   285B FF FF FF FF 
3183   285F FF FF FF FF 
3183   2863 FF FF FF FF 
3183   2867 FF FF FF FF 
3183   286B FF FF FF FF 
3183   286F FF FF FF FF 
3183   2873 FF FF FF FF 
3183   2877 FF FF FF FF 
3183   287B FF FF FF FF 
3183   287F FF FF FF FF 
3183   2883 FF FF FF FF 
3183   2887 FF FF FF FF 
3183   288B FF FF FF FF 
3183   288F FF FF FF FF 
3183   2893 FF FF FF FF 
3183   2897 FF FF FF FF 
3183   289B FF FF FF FF 
3183   289F FF FF FF FF 
3183   28A3 FF FF FF FF 
3183   28A7 FF FF FF FF 
3183   28AB FF FF FF FF 
3183   28AF FF FF FF FF 
3183   28B3 FF FF FF FF 
3183   28B7 FF FF FF FF 
3183   28BB FF FF FF FF 
3183   28BF FF FF FF FF 
3183   28C3 FF FF FF FF 
3183   28C7 FF FF FF FF 
3183   28CB FF FF FF FF 
3183   28CF FF FF FF FF 
3183   28D3 FF FF FF FF 
3183   28D7 FF FF FF FF 
3183   28DB FF FF FF FF 
3183   28DF FF FF FF FF 
3183   28E3 FF FF FF FF 
3183   28E7 FF FF FF FF 
3183   28EB FF FF FF FF 
3183   28EF FF FF FF FF 
3183   28F3 FF FF FF FF 
3183   28F7 FF FF FF FF 
3183   28FB FF FF FF FF 
3183   28FF FF FF FF FF 
3183   2903 FF FF FF FF 
3183   2907 FF FF FF FF 
3183   290B FF FF FF FF 
3183   290F FF FF FF FF 
3183   2913 FF FF FF FF 
3183   2917 FF FF FF FF 
3183   291B FF FF FF FF 
3183   291F FF FF FF FF 
3183   2923 FF FF FF FF 
3183   2927 FF FF FF FF 
3183   292B FF FF FF FF 
3183   292F FF FF FF FF 
3183   2933 FF FF FF FF 
3183   2937 FF FF FF FF 
3183   293B FF FF FF FF 
3183   293F FF FF FF FF 
3183   2943 FF FF FF FF 
3183   2947 FF FF FF FF 
3183   294B FF FF FF FF 
3183   294F FF FF FF FF 
3183   2953 FF FF FF FF 
3183   2957 FF FF FF FF 
3183   295B FF FF FF FF 
3183   295F FF FF FF FF 
3183   2963 FF FF FF FF 
3183   2967 FF FF FF FF 
3183   296B FF FF FF FF 
3183   296F FF FF FF FF 
3183   2973 FF FF FF FF 
3183   2977 FF FF FF FF 
3183   297B FF FF FF FF 
3183   297F FF FF FF FF 
3183   2983 FF FF FF FF 
3183   2987 FF FF FF FF 
3183   298B FF FF FF FF 
3183   298F FF FF FF FF 
3183   2993 FF FF FF FF 
3183   2997 FF FF FF FF 
3183   299B FF FF FF FF 
3183   299F FF FF FF FF 
3183   29A3 FF FF FF FF 
3183   29A7 FF FF FF FF 
3183   29AB FF FF FF FF 
3183   29AF FF FF FF FF 
3183   29B3 FF FF FF FF 
3183   29B7 FF FF FF FF 
3183   29BB FF FF FF FF 
3183   29BF FF FF FF FF 
3183   29C3 FF FF FF FF 
3183   29C7 FF FF FF FF 
3183   29CB FF FF FF FF 
3183   29CF FF FF FF FF 
3183   29D3 FF FF FF FF 
3183   29D7 FF FF FF FF 
3183   29DB FF FF FF FF 
3183   29DF FF FF FF FF 
3183   29E3 FF FF FF FF 
3183   29E7 FF FF FF FF 
3183   29EB FF FF FF FF 
3183   29EF FF FF FF FF 
3183   29F3 FF FF FF FF 
3183   29F7 FF FF FF FF 
3183   29FB FF FF FF FF 
3183   29FF FF FF FF FF 
3183   2A03 FF FF FF FF 
3183   2A07 FF FF FF FF 
3183   2A0B FF FF FF FF 
3183   2A0F FF FF FF FF 
3183   2A13 FF FF FF FF 
3183   2A17 FF FF FF FF 
3183   2A1B FF FF FF FF 
3183   2A1F FF FF FF FF 
3183   2A23 FF FF FF FF 
3183   2A27 FF FF FF FF 
3183   2A2B FF FF FF FF 
3183   2A2F FF FF FF FF 
3183   2A33 FF FF FF FF 
3183   2A37 FF FF FF FF 
3183   2A3B FF FF FF FF 
3183   2A3F FF FF FF FF 
3183   2A43 FF FF FF FF 
3183   2A47 FF FF FF FF 
3183   2A4B FF FF FF FF 
3183   2A4F FF FF FF FF 
3183   2A53 FF FF FF FF 
3183   2A57 FF FF FF FF 
3183   2A5B FF FF FF FF 
3183   2A5F FF FF FF FF 
3183   2A63 FF FF FF FF 
3183   2A67 FF FF FF FF 
3183   2A6B FF FF FF FF 
3183   2A6F FF FF FF FF 
3183   2A73 FF FF FF FF 
3183   2A77 FF FF FF FF 
3183   2A7B FF FF FF FF 
3183   2A7F FF FF FF FF 
3183   2A83 FF FF FF FF 
3183   2A87 FF FF FF FF 
3183   2A8B FF FF FF FF 
3183   2A8F FF FF FF FF 
3183   2A93 FF FF FF FF 
3183   2A97 FF FF FF FF 
3183   2A9B FF FF FF FF 
3183   2A9F FF FF FF FF 
3183   2AA3 FF FF FF FF 
3183   2AA7 FF FF FF FF 
3183   2AAB FF FF FF FF 
3183   2AAF FF FF FF FF 
3183   2AB3 FF FF FF FF 
3183   2AB7 FF FF FF FF 
3183   2ABB FF FF FF FF 
3183   2ABF FF FF FF FF 
3183   2AC3 FF FF FF FF 
3183   2AC7 FF FF FF FF 
3183   2ACB FF FF FF FF 
3183   2ACF FF FF FF FF 
3183   2AD3 FF FF FF FF 
3183   2AD7 FF FF FF FF 
3183   2ADB FF FF FF FF 
3183   2ADF FF FF FF FF 
3183   2AE3 FF FF FF FF 
3183   2AE7 FF FF FF FF 
3183   2AEB FF FF FF FF 
3183   2AEF FF FF FF FF 
3183   2AF3 FF FF FF FF 
3183   2AF7 FF FF FF FF 
3183   2AFB FF FF FF FF 
3183   2AFF FF FF FF FF 
3183   2B03 FF FF FF FF 
3183   2B07 FF FF FF FF 
3183   2B0B FF FF FF FF 
3183   2B0F FF FF FF FF 
3183   2B13 FF FF FF FF 
3183   2B17 FF FF FF FF 
3183   2B1B FF FF FF FF 
3183   2B1F FF FF FF FF 
3183   2B23 FF FF FF FF 
3183   2B27 FF FF FF FF 
3183   2B2B FF FF FF FF 
3183   2B2F FF FF FF FF 
3183   2B33 FF FF FF FF 
3183   2B37 FF FF FF FF 
3183   2B3B FF FF FF FF 
3183   2B3F FF FF FF FF 
3183   2B43 FF FF FF FF 
3183   2B47 FF FF FF FF 
3183   2B4B FF FF FF FF 
3183   2B4F FF FF FF FF 
3183   2B53 FF FF FF FF 
3183   2B57 FF FF FF FF 
3183   2B5B FF FF FF FF 
3183   2B5F FF FF FF FF 
3183   2B63 FF FF FF FF 
3183   2B67 FF FF FF FF 
3183   2B6B FF FF FF FF 
3183   2B6F FF FF FF FF 
3183   2B73 FF FF FF FF 
3183   2B77 FF FF FF FF 
3183   2B7B FF FF FF FF 
3183   2B7F FF FF FF FF 
3183   2B83 FF FF FF FF 
3183   2B87 FF FF FF FF 
3183   2B8B FF FF FF FF 
3183   2B8F FF FF FF FF 
3183   2B93 FF FF FF FF 
3183   2B97 FF FF FF FF 
3183   2B9B FF FF FF FF 
3183   2B9F FF FF FF FF 
3183   2BA3 FF FF FF FF 
3183   2BA7 FF FF FF FF 
3183   2BAB FF FF FF FF 
3183   2BAF FF FF FF FF 
3183   2BB3 FF FF FF FF 
3183   2BB7 FF FF FF FF 
3183   2BBB FF FF FF FF 
3183   2BBF FF FF FF FF 
3183   2BC3 FF FF FF FF 
3183   2BC7 FF FF FF FF 
3183   2BCB FF FF FF FF 
3183   2BCF FF FF FF FF 
3183   2BD3 FF FF FF FF 
3183   2BD7 FF FF FF FF 
3183   2BDB FF FF FF FF 
3183   2BDF FF FF FF FF 
3183   2BE3 FF FF FF FF 
3183   2BE7 FF FF FF FF 
3183   2BEB FF FF FF FF 
3183   2BEF FF FF FF FF 
3183   2BF3 FF FF FF FF 
3183   2BF7 FF FF FF FF 
3183   2BFB FF FF FF FF 
3183   2BFF FF FF FF FF 
3183   2C03 FF FF FF FF 
3183   2C07 FF FF FF FF 
3183   2C0B FF FF FF FF 
3183   2C0F FF FF FF FF 
3183   2C13 FF FF FF FF 
3183   2C17 FF FF FF FF 
3183   2C1B FF FF FF FF 
3183   2C1F FF FF FF FF 
3183   2C23 FF FF FF FF 
3183   2C27 FF FF FF FF 
3183   2C2B FF FF FF FF 
3183   2C2F FF FF FF FF 
3183   2C33 FF FF FF FF 
3183   2C37 FF FF FF FF 
3183   2C3B FF FF FF FF 
3183   2C3F FF FF FF FF 
3183   2C43 FF FF FF FF 
3183   2C47 FF FF FF FF 
3183   2C4B FF FF FF FF 
3183   2C4F FF FF FF FF 
3183   2C53 FF FF FF FF 
3183   2C57 FF FF FF FF 
3183   2C5B FF FF FF FF 
3183   2C5F FF FF FF FF 
3183   2C63 FF FF FF FF 
3183   2C67 FF FF FF FF 
3183   2C6B FF FF FF FF 
3183   2C6F FF FF FF FF 
3183   2C73 FF FF FF FF 
3183   2C77 FF FF FF FF 
3183   2C7B FF FF FF FF 
3183   2C7F FF FF FF FF 
3183   2C83 FF FF FF FF 
3183   2C87 FF FF FF FF 
3183   2C8B FF FF FF FF 
3183   2C8F FF FF FF FF 
3183   2C93 FF FF FF FF 
3183   2C97 FF FF FF FF 
3183   2C9B FF FF FF FF 
3183   2C9F FF FF FF FF 
3183   2CA3 FF FF FF FF 
3183   2CA7 FF FF FF FF 
3183   2CAB FF FF FF FF 
3183   2CAF FF FF FF FF 
3183   2CB3 FF FF FF FF 
3183   2CB7 FF FF FF FF 
3183   2CBB FF FF FF FF 
3183   2CBF FF FF FF FF 
3183   2CC3 FF FF FF FF 
3183   2CC7 FF FF FF FF 
3183   2CCB FF FF FF FF 
3183   2CCF FF FF FF FF 
3183   2CD3 FF FF FF FF 
3183   2CD7 FF FF FF FF 
3183   2CDB FF FF FF FF 
3183   2CDF FF FF FF FF 
3183   2CE3 FF FF FF FF 
3183   2CE7 FF FF FF FF 
3183   2CEB FF FF FF FF 
3183   2CEF FF FF FF FF 
3183   2CF3 FF FF FF FF 
3183   2CF7 FF FF FF FF 
3183   2CFB FF FF FF FF 
3183   2CFF FF FF FF FF 
3183   2D03 FF FF FF FF 
3183   2D07 FF FF FF FF 
3183   2D0B FF FF FF FF 
3183   2D0F FF FF FF FF 
3183   2D13 FF FF FF FF 
3183   2D17 FF FF FF FF 
3183   2D1B FF FF FF FF 
3183   2D1F FF FF FF FF 
3183   2D23 FF FF FF FF 
3183   2D27 FF FF FF FF 
3183   2D2B FF FF FF FF 
3183   2D2F FF FF FF FF 
3183   2D33 FF FF FF FF 
3183   2D37 FF FF FF FF 
3183   2D3B FF FF FF FF 
3183   2D3F FF FF FF FF 
3183   2D43 FF FF FF FF 
3183   2D47 FF FF FF FF 
3183   2D4B FF FF FF FF 
3183   2D4F FF FF FF FF 
3183   2D53 FF FF FF FF 
3183   2D57 FF FF FF FF 
3183   2D5B FF FF FF FF 
3183   2D5F FF FF FF FF 
3183   2D63 FF FF FF FF 
3183   2D67 FF FF FF FF 
3183   2D6B FF FF FF FF 
3183   2D6F FF FF FF FF 
3183   2D73 FF FF FF FF 
3183   2D77 FF FF FF FF 
3183   2D7B FF FF FF FF 
3183   2D7F FF FF FF FF 
3183   2D83 FF FF FF FF 
3183   2D87 FF FF FF FF 
3183   2D8B FF FF FF FF 
3183   2D8F FF FF FF FF 
3183   2D93 FF FF FF FF 
3183   2D97 FF FF FF FF 
3183   2D9B FF FF FF FF 
3183   2D9F FF FF FF FF 
3183   2DA3 FF FF FF FF 
3183   2DA7 FF FF FF FF 
3183   2DAB FF FF FF FF 
3183   2DAF FF FF FF FF 
3183   2DB3 FF FF FF FF 
3183   2DB7 FF FF FF FF 
3183   2DBB FF FF FF FF 
3183   2DBF FF FF FF FF 
3183   2DC3 FF FF FF FF 
3183   2DC7 FF FF FF FF 
3183   2DCB FF FF FF FF 
3183   2DCF FF FF FF FF 
3183   2DD3 FF FF FF FF 
3183   2DD7 FF FF FF FF 
3183   2DDB FF FF FF FF 
3183   2DDF FF FF FF FF 
3183   2DE3 FF FF FF FF 
3183   2DE7 FF FF FF FF 
3183   2DEB FF FF FF FF 
3183   2DEF FF FF FF FF 
3183   2DF3 FF FF FF FF 
3183   2DF7 FF FF FF FF 
3183   2DFB FF FF FF FF 
3183   2DFF FF FF FF FF 
3183   2E03 FF FF FF FF 
3183   2E07 FF FF FF FF 
3183   2E0B FF FF FF FF 
3183   2E0F FF FF FF FF 
3183   2E13 FF FF FF FF 
3183   2E17 FF FF FF FF 
3183   2E1B FF FF FF FF 
3183   2E1F FF FF FF FF 
3183   2E23 FF FF FF FF 
3183   2E27 FF FF FF FF 
3183   2E2B FF FF FF FF 
3183   2E2F FF FF FF FF 
3183   2E33 FF FF FF FF 
3183   2E37 FF FF FF FF 
3183   2E3B FF FF FF FF 
3183   2E3F FF FF FF FF 
3183   2E43 FF FF FF FF 
3183   2E47 FF FF FF FF 
3183   2E4B FF FF FF FF 
3183   2E4F FF FF FF FF 
3183   2E53 FF FF FF FF 
3183   2E57 FF FF FF FF 
3183   2E5B FF FF FF FF 
3183   2E5F FF FF FF FF 
3183   2E63 FF FF FF FF 
3183   2E67 FF FF FF FF 
3183   2E6B FF FF FF FF 
3183   2E6F FF FF FF FF 
3183   2E73 FF FF FF FF 
3183   2E77 FF FF FF FF 
3183   2E7B FF FF FF FF 
3183   2E7F FF FF FF FF 
3183   2E83 FF FF FF FF 
3183   2E87 FF FF FF FF 
3183   2E8B FF FF FF FF 
3183   2E8F FF FF FF FF 
3183   2E93 FF FF FF FF 
3183   2E97 FF FF FF FF 
3183   2E9B FF FF FF FF 
3183   2E9F FF FF FF FF 
3183   2EA3 FF FF FF FF 
3183   2EA7 FF FF FF FF 
3183   2EAB FF FF FF FF 
3183   2EAF FF FF FF FF 
3183   2EB3 FF FF FF FF 
3183   2EB7 FF FF FF FF 
3183   2EBB FF FF FF FF 
3183   2EBF FF FF FF FF 
3183   2EC3 FF FF FF FF 
3183   2EC7 FF FF FF FF 
3183   2ECB FF FF FF FF 
3183   2ECF FF FF FF FF 
3183   2ED3 FF FF FF FF 
3183   2ED7 FF FF FF FF 
3183   2EDB FF FF FF FF 
3183   2EDF FF FF FF FF 
3183   2EE3 FF FF FF FF 
3183   2EE7 FF FF FF FF 
3183   2EEB FF FF FF FF 
3183   2EEF FF FF FF FF 
3183   2EF3 FF FF FF FF 
3183   2EF7 FF FF FF FF 
3183   2EFB FF FF FF FF 
3183   2EFF FF FF FF FF 
3183   2F03 FF FF FF FF 
3183   2F07 FF FF FF FF 
3183   2F0B FF FF FF FF 
3183   2F0F FF FF FF FF 
3183   2F13 FF FF FF FF 
3183   2F17 FF FF FF FF 
3183   2F1B FF FF FF FF 
3183   2F1F FF FF FF FF 
3183   2F23 FF FF FF FF 
3183   2F27 FF FF FF FF 
3183   2F2B FF FF FF FF 
3183   2F2F FF FF FF FF 
3183   2F33 FF FF FF FF 
3183   2F37 FF FF FF FF 
3183   2F3B FF FF FF FF 
3183   2F3F FF FF FF FF 
3183   2F43 FF FF FF FF 
3183   2F47 FF FF FF FF 
3183   2F4B FF FF FF FF 
3183   2F4F FF FF FF FF 
3183   2F53 FF FF FF FF 
3183   2F57 FF FF FF FF 
3183   2F5B FF FF FF FF 
3183   2F5F FF FF FF FF 
3183   2F63 FF FF FF FF 
3183   2F67 FF FF FF FF 
3183   2F6B FF FF FF FF 
3183   2F6F FF FF FF FF 
3183   2F73 FF FF FF FF 
3183   2F77 FF FF FF FF 
3183   2F7B FF FF FF FF 
3183   2F7F FF FF FF FF 
3183   2F83 FF FF FF FF 
3183   2F87 FF FF FF FF 
3183   2F8B FF FF FF FF 
3183   2F8F FF FF FF FF 
3183   2F93 FF FF FF FF 
3183   2F97 FF FF FF FF 
3183   2F9B FF FF FF FF 
3183   2F9F FF FF FF FF 
3183   2FA3 FF FF FF FF 
3183   2FA7 FF FF FF FF 
3183   2FAB FF FF FF FF 
3183   2FAF FF FF FF FF 
3183   2FB3 FF FF FF FF 
3183   2FB7 FF FF FF FF 
3183   2FBB FF FF FF FF 
3183   2FBF FF FF FF FF 
3183   2FC3 FF FF FF FF 
3183   2FC7 FF FF FF FF 
3183   2FCB FF FF FF FF 
3183   2FCF FF FF FF FF 
3183   2FD3 FF FF FF FF 
3183   2FD7 FF FF FF FF 
3183   2FDB FF FF FF FF 
3183   2FDF FF FF FF FF 
3183   2FE3 FF FF FF FF 
3183   2FE7 FF FF FF FF 
3183   2FEB FF FF FF FF 
3183   2FEF FF FF FF FF 
3183   2FF3 FF FF FF FF 
3183   2FF7 FF FF FF FF 
3183   2FFB FF FF FF FF 
3183   2FFF FF FF FF FF 
3183   3003 FF FF FF FF 
3183   3007 FF FF FF FF 
3183   300B FF FF FF FF 
3183   300F FF FF FF FF 
3183   3013 FF FF FF FF 
3183   3017 FF FF FF FF 
3183   301B FF FF FF FF 
3183   301F FF FF FF FF 
3183   3023 FF FF FF FF 
3183   3027 FF FF FF FF 
3183   302B FF FF FF FF 
3183   302F FF FF FF FF 
3183   3033 FF FF FF FF 
3183   3037 FF FF FF FF 
3183   303B FF FF FF FF 
3183   303F FF FF FF FF 
3183   3043 FF FF FF FF 
3183   3047 FF FF FF FF 
3183   304B FF FF FF FF 
3183   304F FF FF FF FF 
3183   3053 FF FF FF FF 
3183   3057 FF FF FF FF 
3183   305B FF FF FF FF 
3183   305F FF FF FF FF 
3183   3063 FF FF FF FF 
3183   3067 FF FF FF FF 
3183   306B FF FF FF FF 
3183   306F FF FF FF FF 
3183   3073 FF FF FF FF 
3183   3077 FF FF FF FF 
3183   307B FF FF FF FF 
3183   307F FF FF FF FF 
3183   3083 FF FF FF FF 
3183   3087 FF FF FF FF 
3183   308B FF FF FF FF 
3183   308F FF FF FF FF 
3183   3093 FF FF FF FF 
3183   3097 FF FF FF FF 
3183   309B FF FF FF FF 
3183   309F FF FF FF FF 
3183   30A3 FF FF FF FF 
3183   30A7 FF FF FF FF 
3183   30AB FF FF FF FF 
3183   30AF FF FF FF FF 
3183   30B3 FF FF FF FF 
3183   30B7 FF FF FF FF 
3183   30BB FF FF FF FF 
3183   30BF FF FF FF FF 
3183   30C3 FF FF FF FF 
3183   30C7 FF FF FF FF 
3183   30CB FF FF FF FF 
3183   30CF FF FF FF FF 
3183   30D3 FF FF FF FF 
3183   30D7 FF FF FF FF 
3183   30DB FF FF FF FF 
3183   30DF FF FF FF FF 
3183   30E3 FF FF FF FF 
3183   30E7 FF FF FF FF 
3183   30EB FF FF FF FF 
3183   30EF FF FF FF FF 
3183   30F3 FF FF FF FF 
3183   30F7 FF FF FF FF 
3183   30FB FF FF FF FF 
3183   30FF FF FF FF FF 
3183   3103 FF FF FF FF 
3183   3107 FF FF FF FF 
3183   310B FF FF FF FF 
3183   310F FF FF FF FF 
3183   3113 FF FF FF FF 
3183   3117 FF FF FF FF 
3183   311B FF FF FF FF 
3183   311F FF FF FF FF 
3183   3123 FF FF FF FF 
3183   3127 FF FF FF FF 
3183   312B FF FF FF FF 
3183   312F FF FF FF FF 
3183   3133 FF FF FF FF 
3183   3137 FF FF FF FF 
3183   313B FF FF FF FF 
3183   313F FF FF FF FF 
3183   3143 FF FF FF FF 
3183   3147 FF FF FF FF 
3183   314B FF FF FF FF 
3183   314F FF FF FF FF 
3183   3153 FF FF FF FF 
3183   3157 FF FF FF FF 
3183   315B FF FF FF FF 
3183   315F FF FF FF FF 
3183   3163 FF FF FF FF 
3184   3167             
3185   3167             scrap_sector:
3186   3167 FF FF FF FF   .fill 512         ; scrap sector
3186   316B FF FF FF FF 
3186   316F FF FF FF FF 
3186   3173 FF FF FF FF 
3186   3177 FF FF FF FF 
3186   317B FF FF FF FF 
3186   317F FF FF FF FF 
3186   3183 FF FF FF FF 
3186   3187 FF FF FF FF 
3186   318B FF FF FF FF 
3186   318F FF FF FF FF 
3186   3193 FF FF FF FF 
3186   3197 FF FF FF FF 
3186   319B FF FF FF FF 
3186   319F FF FF FF FF 
3186   31A3 FF FF FF FF 
3186   31A7 FF FF FF FF 
3186   31AB FF FF FF FF 
3186   31AF FF FF FF FF 
3186   31B3 FF FF FF FF 
3186   31B7 FF FF FF FF 
3186   31BB FF FF FF FF 
3186   31BF FF FF FF FF 
3186   31C3 FF FF FF FF 
3186   31C7 FF FF FF FF 
3186   31CB FF FF FF FF 
3186   31CF FF FF FF FF 
3186   31D3 FF FF FF FF 
3186   31D7 FF FF FF FF 
3186   31DB FF FF FF FF 
3186   31DF FF FF FF FF 
3186   31E3 FF FF FF FF 
3186   31E7 FF FF FF FF 
3186   31EB FF FF FF FF 
3186   31EF FF FF FF FF 
3186   31F3 FF FF FF FF 
3186   31F7 FF FF FF FF 
3186   31FB FF FF FF FF 
3186   31FF FF FF FF FF 
3186   3203 FF FF FF FF 
3186   3207 FF FF FF FF 
3186   320B FF FF FF FF 
3186   320F FF FF FF FF 
3186   3213 FF FF FF FF 
3186   3217 FF FF FF FF 
3186   321B FF FF FF FF 
3186   321F FF FF FF FF 
3186   3223 FF FF FF FF 
3186   3227 FF FF FF FF 
3186   322B FF FF FF FF 
3186   322F FF FF FF FF 
3186   3233 FF FF FF FF 
3186   3237 FF FF FF FF 
3186   323B FF FF FF FF 
3186   323F FF FF FF FF 
3186   3243 FF FF FF FF 
3186   3247 FF FF FF FF 
3186   324B FF FF FF FF 
3186   324F FF FF FF FF 
3186   3253 FF FF FF FF 
3186   3257 FF FF FF FF 
3186   325B FF FF FF FF 
3186   325F FF FF FF FF 
3186   3263 FF FF FF FF 
3186   3267 FF FF FF FF 
3186   326B FF FF FF FF 
3186   326F FF FF FF FF 
3186   3273 FF FF FF FF 
3186   3277 FF FF FF FF 
3186   327B FF FF FF FF 
3186   327F FF FF FF FF 
3186   3283 FF FF FF FF 
3186   3287 FF FF FF FF 
3186   328B FF FF FF FF 
3186   328F FF FF FF FF 
3186   3293 FF FF FF FF 
3186   3297 FF FF FF FF 
3186   329B FF FF FF FF 
3186   329F FF FF FF FF 
3186   32A3 FF FF FF FF 
3186   32A7 FF FF FF FF 
3186   32AB FF FF FF FF 
3186   32AF FF FF FF FF 
3186   32B3 FF FF FF FF 
3186   32B7 FF FF FF FF 
3186   32BB FF FF FF FF 
3186   32BF FF FF FF FF 
3186   32C3 FF FF FF FF 
3186   32C7 FF FF FF FF 
3186   32CB FF FF FF FF 
3186   32CF FF FF FF FF 
3186   32D3 FF FF FF FF 
3186   32D7 FF FF FF FF 
3186   32DB FF FF FF FF 
3186   32DF FF FF FF FF 
3186   32E3 FF FF FF FF 
3186   32E7 FF FF FF FF 
3186   32EB FF FF FF FF 
3186   32EF FF FF FF FF 
3186   32F3 FF FF FF FF 
3186   32F7 FF FF FF FF 
3186   32FB FF FF FF FF 
3186   32FF FF FF FF FF 
3186   3303 FF FF FF FF 
3186   3307 FF FF FF FF 
3186   330B FF FF FF FF 
3186   330F FF FF FF FF 
3186   3313 FF FF FF FF 
3186   3317 FF FF FF FF 
3186   331B FF FF FF FF 
3186   331F FF FF FF FF 
3186   3323 FF FF FF FF 
3186   3327 FF FF FF FF 
3186   332B FF FF FF FF 
3186   332F FF FF FF FF 
3186   3333 FF FF FF FF 
3186   3337 FF FF FF FF 
3186   333B FF FF FF FF 
3186   333F FF FF FF FF 
3186   3343 FF FF FF FF 
3186   3347 FF FF FF FF 
3186   334B FF FF FF FF 
3186   334F FF FF FF FF 
3186   3353 FF FF FF FF 
3186   3357 FF FF FF FF 
3186   335B FF FF FF FF 
3186   335F FF FF FF FF 
3186   3363 FF FF FF FF 
3187   3367             transient_area:
3188   3367 00            .db 0             ; beginning of the transient memory area. used for disk reads and other purposes    
3189   3368             
3190   3368             .end
tasm: Number of errors = 0
