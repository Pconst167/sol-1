0001   0000             .include "lib/kernel.exp"
0001+  0000             fdc_al_restore   .EQU  $0000
0002+  0000             fdc_al_step      .EQU  $0001
0003+  0000             fdc_al_step_in   .EQU  $0002
0004+  0000             fdc_al_step_out  .EQU  $0003
0005+  0000             fdc_al_seek      .EQU  $0004
0006+  0000             fdc_al_format_128 .EQU  $0005
0007+  0000             fdc_al_formatdisk_128 .EQU  $0006
0008+  0000             fdc_al_format_512 .EQU  $0007
0009+  0000             fdc_al_formatdisk_512 .EQU  $0008
0010+  0000             fdc_al_read_addr .EQU  $0009
0011+  0000             fdc_al_read_track .EQU  $000a
0012+  0000             fdc_al_read_sect .EQU  $000b
0013+  0000             fdc_al_write_sect .EQU  $000c
0014+  0000             fdc_al_force_int .EQU  $000d
0015+  0000             fdc_al_status0   .EQU  $000e
0016+  0000             fdc_al_status1   .EQU  $000f
0017+  0000             noname._7seg_display .EQU  $ffb0
0018+  0000             noname._fdc_config .EQU  $ffc0
0019+  0000             noname._fdc_status_0 .EQU  $ffc1
0020+  0000             noname._fdc_stat_cmd .EQU  $ffc8
0021+  0000             sys_break        .EQU  $0000
0022+  0000             sys_rtc          .EQU  $0001
0023+  0000             sys_ide          .EQU  $0002
0024+  0000             sys_io           .EQU  $0003
0025+  0000             sys_filesystem   .EQU  $0004
0026+  0000             sys_create_proc  .EQU  $0005
0027+  0000             sys_list_proc    .EQU  $0006
0028+  0000             sys_datetime     .EQU  $0007
0029+  0000             sys_reboot       .EQU  $0008
0030+  0000             sys_pause_proc   .EQU  $0009
0031+  0000             sys_resume_proc  .EQU  $000a
0032+  0000             sys_terminate_proc .EQU  $000b
0033+  0000             sys_system       .EQU  $000c
0034+  0000             sys_fdc          .EQU  $000d
0035+  0000             text_org         .EQU  $0400
0002   0400             .org text_org
0003   0400             
0004   0400             ; sys_fdc_restore
0005   0400             ; sys_fdc_step
0006   0400             ; sys_fdc_step_in
0007   0400             ; sys_fdc_step_out
0008   0400             ; sys_fdc_seek
0009   0400             ; sys_fdc_format_128
0010   0400             ; sys_fdc_format_512
0011   0400             ; sys_fdc_read_addr
0012   0400             ; sys_fdc_read_track
0013   0400             ; sys_fdc_read_sect
0014   0400             ; sys_fdc_write_sect
0015   0400             ; sys_fdc_force_int
0016   0400             
0017   0400             main:
0018   0400 FD 49 FF FF   mov bp, $ffff
0019   0404 FD 47 FF FF   mov sp, $ffff
0020   0408             
0021   0408 3B C4 0A      mov d, str0
0022   040B 07 36 08      call _puts
0023   040E             
0024   040E             menu:
0025   040E 3B A1 09      mov d, s_menu
0026   0411 07 36 08      call _puts
0027   0414 07 03 07      call getch
0028   0417 76 30         cmp ah, '0'
0029   0419 C6 73 04      je step_in
0030   041C 76 31         cmp ah, '1'
0031   041E C6 7A 04      je step_out
0032   0421 76 32         cmp ah, '2'
0033   0423 C6 65 04      je restore
0034   0426 76 33         cmp ah, '3'
0035   0428 C6 8D 05      je status0
0036   042B 76 34         cmp ah, '4'
0037   042D C6 9E 05      je status1
0038   0430 76 35         cmp ah, '5'
0039   0432 C6 88 04      je format_128
0040   0435 76 36         cmp ah, '6'
0041   0437 C6 9F 04      je format_disk_128
0042   043A 76 37         cmp ah, '7'
0043   043C C6 AC 04      je format_512
0044   043F 76 38         cmp ah, '8'
0045   0441 C6 C3 04      je format_disk_512
0046   0444 76 39         cmp ah, '9'
0047   0446 C6 D0 04      je read_track
0048   0449 76 41         cmp ah, 'A'
0049   044B C6 E5 04      je read_sect_128
0050   044E 76 42         cmp ah, 'B'
0051   0450 C6 0D 05      je read_sect_512
0052   0453 76 43         cmp ah, 'C'
0053   0455 C6 79 05      je fdc_options
0054   0458 76 44         cmp ah, 'D'
0055   045A C6 35 05      je fdc_write_sec_128
0056   045D 76 45         cmp ah, 'E'
0057   045F C6 57 05      je fdc_write_sec_512
0058   0462 0A 0E 04      jmp menu
0059   0465             
0060   0465             restore:
0061   0465 19 00         mov al, fdc_al_restore
0062   0467 05 0D         syscall sys_fdc
0063   0469 0A 0E 04      jmp menu
0064   046C             step:
0065   046C 19 01         mov al, fdc_al_step
0066   046E 05 0D         syscall sys_fdc
0067   0470 0A 0E 04      jmp menu
0068   0473             step_in:
0069   0473 19 02         mov al, fdc_al_step_in
0070   0475 05 0D         syscall sys_fdc
0071   0477 0A 0E 04      jmp menu
0072   047A             step_out:
0073   047A 19 03         mov al, fdc_al_step_out
0074   047C 05 0D         syscall sys_fdc
0075   047E 0A 0E 04      jmp menu
0076   0481             seek:
0077   0481 19 04         mov al, fdc_al_seek
0078   0483 05 0D         syscall sys_fdc
0079   0485 0A 0E 04      jmp menu
0080   0488             
0081   0488             format_128:
0082   0488 3B 98 09      mov d, s_track
0083   048B 07 36 08      call _puts
0084   048E 07 21 09      call scan_u8x   ; in al
0085   0491 2F            mov bl, al      ; track needs to be in bl
0086   0492 19 05         mov al, fdc_al_format_128
0087   0494 05 0D         syscall sys_fdc
0088   0496 3B B5 0A      mov d, s_format_done
0089   0499 07 36 08      call _puts
0090   049C 0A 0E 04      jmp menu
0091   049F             
0092   049F             format_disk_128:
0093   049F 19 06         mov al, fdc_al_formatdisk_128
0094   04A1 05 0D         syscall sys_fdc
0095   04A3 3B B5 0A      mov d, s_format_done
0096   04A6 07 36 08      call _puts
0097   04A9 0A 0E 04      jmp menu
0098   04AC             
0099   04AC             format_512:
0100   04AC 3B 98 09      mov d, s_track
0101   04AF 07 36 08      call _puts
0102   04B2 07 21 09      call scan_u8x   ; in al
0103   04B5 2F            mov bl, al      ; track needs to be in bl
0104   04B6 19 07         mov al, fdc_al_format_512
0105   04B8 05 0D         syscall sys_fdc
0106   04BA 3B B5 0A      mov d, s_format_done
0107   04BD 07 36 08      call _puts
0108   04C0 0A 0E 04      jmp menu
0109   04C3             
0110   04C3             format_disk_512:
0111   04C3 19 08         mov al, fdc_al_formatdisk_512
0112   04C5 05 0D         syscall sys_fdc
0113   04C7 3B B5 0A      mov d, s_format_done
0114   04CA 07 36 08      call _puts
0115   04CD 0A 0E 04      jmp menu
0116   04D0             
0117   04D0             read_track:
0118   04D0 19 0A         mov al, fdc_al_read_track
0119   04D2 FD 4F 84 0D   mov di, transient_area
0120   04D6 05 0D         syscall sys_fdc
0121   04D8 27            mov b, a   ; number of bytes to output
0122   04D9 3B 84 0D      mov d, transient_area
0123   04DC 07 AF 05      call cmd_hexd
0124   04DF 0A 0E 04      jmp menu
0125   04E2             
0126   04E2             read_addr:
0127   04E2 0A 0E 04      jmp menu
0128   04E5             
0129   04E5             read_sect_128:
0130   04E5 3B E8 0A      mov d, s1
0131   04E8 07 36 08      call _puts
0132   04EB 07 21 09      call scan_u8x
0133   04EE 36            mov bh, al
0134   04EF 3B F1 0A      mov d, s2
0135   04F2 07 36 08      call _puts
0136   04F5 07 21 09      call scan_u8x ; in al 
0137   04F8 2F            mov bl, al
0138   04F9 19 0B         mov al, fdc_al_read_sect
0139   04FB FD 4F 84 0D   mov di, transient_area
0140   04FF 05 0D         syscall sys_fdc
0141   0501 3B 84 0D      mov d, transient_area
0142   0504 26 80 00      mov b, 128
0143   0507 07 AF 05      call cmd_hexd
0144   050A 0A 0E 04      jmp menu
0145   050D             
0146   050D             read_sect_512:
0147   050D 3B E8 0A      mov d, s1
0148   0510 07 36 08      call _puts
0149   0513 07 21 09      call scan_u8x
0150   0516 36            mov bh, al
0151   0517 3B F1 0A      mov d, s2
0152   051A 07 36 08      call _puts
0153   051D 07 21 09      call scan_u8x ; in al 
0154   0520 2F            mov bl, al
0155   0521 19 0B         mov al, fdc_al_read_sect
0156   0523 FD 4F 84 0D   mov di, transient_area
0157   0527 05 0D         syscall sys_fdc
0158   0529 3B 84 0D      mov d, transient_area
0159   052C 26 00 02      mov b, 512
0160   052F 07 AF 05      call cmd_hexd
0161   0532 0A 0E 04      jmp menu
0162   0535             
0163   0535             fdc_write_sec_128:
0164   0535 3B E8 0A      mov d, s1
0165   0538 07 36 08      call _puts
0166   053B 07 21 09      call scan_u8x
0167   053E 36            mov bh, al
0168   053F 3B F1 0A      mov d, s2
0169   0542 07 36 08      call _puts
0170   0545 07 21 09      call scan_u8x ; in al
0171   0548 2F            mov bl, al
0172   0549 19 0C         mov al, fdc_al_write_sect
0173   054B FD 4D 04 0B   mov si, fdc_sec_data_128
0174   054F 38 80 00      mov c, 128
0175   0552 05 0D         syscall sys_fdc
0176   0554 0A 0E 04      jmp menu
0177   0557             
0178   0557             fdc_write_sec_512:
0179   0557 3B E8 0A      mov d, s1
0180   055A 07 36 08      call _puts
0181   055D 07 21 09      call scan_u8x
0182   0560 36            mov bh, al
0183   0561 3B F1 0A      mov d, s2
0184   0564 07 36 08      call _puts
0185   0567 07 21 09      call scan_u8x ; in al
0186   056A 2F            mov bl, al
0187   056B 19 0C         mov al, fdc_al_write_sect
0188   056D FD 4D 84 0B   mov si, fdc_sec_data_512
0189   0571 38 00 02      mov c, 512
0190   0574 05 0D         syscall sys_fdc
0191   0576 0A 0E 04      jmp menu
0192   0579             
0193   0579             fdc_options:
0194   0579 3B FB 0A      mov d, ss3
0195   057C 07 36 08      call _puts
0196   057F 07 21 09      call scan_u8x
0197   0582 2F            mov bl, al
0198   0583 19 02         mov al, 2
0199   0585 3B C0 FF      mov d, _fdc_config
0200   0588 05 0C         syscall sys_system
0201   058A 0A 0E 04      jmp menu
0202   058D             
0203   058D             status0:
0204   058D 07 E3 07      call printnl
0205   0590 19 0E         mov al, fdc_al_status0
0206   0592 05 0D         syscall sys_fdc
0207   0594 2F            mov bl, al
0208   0595 07 D6 08      call print_u8x   ; print bl
0209   0598 07 E3 07      call printnl
0210   059B 0A 0E 04      jmp menu
0211   059E             
0212   059E             status1:
0213   059E 07 E3 07      call printnl
0214   05A1 19 0F         mov al, fdc_al_status1
0215   05A3 05 0D         syscall sys_fdc
0216   05A5 2F            mov bl, al
0217   05A6 07 D6 08      call print_u8x   ; print bl
0218   05A9 07 E3 07      call printnl
0219   05AC 0A 0E 04      jmp menu
0220   05AF             
0221   05AF             
0222   05AF             ; b : len
0223   05AF             ; d: data address
0224   05AF             cmd_hexd:
0225   05AF 07 E3 07      call printnl
0226   05B2 13            mov a, d
0227   05B3 42 94 09      mov [start], a
0228   05B6 FD 42 96 09   mov [length], b
0229   05BA             
0230   05BA 14 94 09    	mov a, [start]
0231   05BD 3C            mov d, a        ; dump pointer in d
0232   05BE 38 00 00      mov c, 0
0233   05C1             dump_loop:
0234   05C1 84            mov al, cl
0235   05C2 87 0F         and al, $0f
0236   05C4 C6 0C 06      jz print_base
0237   05C7             back:
0238   05C7 1E            mov al, [d]        ; read byte
0239   05C8 2F            mov bl, al
0240   05C9 07 D6 08      call print_u8x
0241   05CC 10 00 20      mov a, $2000
0242   05CF 05 03         syscall sys_io      ; space
0243   05D1 84            mov al, cl
0244   05D2 87 0F         and al, $0f
0245   05D4 B9 0F         cmp al, $0f
0246   05D6 C6 E6 05      je print_ascii
0247   05D9             back1:
0248   05D9 79            inc d
0249   05DA 78            inc c
0250   05DB 14 96 09      mov a, [length]
0251   05DE B1            cmp a, c
0252   05DF C7 C1 05      jne dump_loop
0253   05E2 07 E3 07      call printnl
0254   05E5 09            ret
0255   05E6             
0256   05E6             print_ascii:
0257   05E6 63 10 00      sub d, 16
0258   05E9 26 10 00      mov b, 16
0259   05EC             print_ascii_l:
0260   05EC 79            inc d
0261   05ED 1E            mov al, [d]        ; read byte
0262   05EE B9 20         cmp al, $20
0263   05F0 C8 F8 05      jlu dot
0264   05F3 B9 7E         cmp al, $7e
0265   05F5 D0 00 06      jleu ascii
0266   05F8             dot:
0267   05F8 10 00 2E      mov a, $2e00
0268   05FB 05 03         syscall sys_io
0269   05FD 0A 05 06      jmp ascii_continue
0270   0600             ascii:
0271   0600 23            mov ah, al
0272   0601 19 00         mov al, 0
0273   0603 05 03         syscall sys_io
0274   0605             ascii_continue:
0275   0605 FD A9 EC 05   loopb print_ascii_l
0276   0609 0A D9 05      jmp back1
0277   060C             print_base:
0278   060C 07 E3 07      call printnl
0279   060F 2D            mov b, d
0280   0610 61 84 0D      sub b, transient_area
0281   0613 07 92 08      call print_u16x        ; display row
0282   0616 55 84 0D      add b, transient_area
0283   0619 10 00 20      mov a, $2000
0284   061C 05 03         syscall sys_io
0285   061E 0A C7 05      jmp back
0286   0621 09            ret
0287   0622             
0288   0622             .include "lib/stdio.asm"
0001+  0622             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0622             ; stdio.s
0003+  0622             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0622             .include "lib/string.asm"
0001++ 0622             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0622             ; string.s
0003++ 0622             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0622             
0005++ 0622             
0006++ 0622             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0622             ; _strrev
0008++ 0622             ; reverse a string
0009++ 0622             ; d = string address
0010++ 0622             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0622             ; 01234
0012++ 0622             _strrev:
0013++ 0622 4B          	pusha
0014++ 0623 07 69 06    	call _strlen	; length in c
0015++ 0626 12          	mov a, c
0016++ 0627 AF 01 00    	cmp a, 1
0017++ 062A D0 44 06    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 062D 7D          	dec a
0019++ 062E FD 4E       	mov si, d	; beginning of string
0020++ 0630 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0632 59          	add d, a	; end of string
0022++ 0633 12          	mov a, c
0023++ 0634 FD 9B       	shr a		; divide by 2
0024++ 0636 39          	mov c, a	; c now counts the steps
0025++ 0637             _strrev_l0:
0026++ 0637 32          	mov bl, [d]	; save load right-side char into bl
0027++ 0638 F6          	lodsb		; load left-side char into al; increase si
0028++ 0639 3E          	mov [d], al	; store left char into right side
0029++ 063A 1B          	mov al, bl
0030++ 063B F7          	stosb		; store right-side char into left-side; increase di
0031++ 063C 7E          	dec c
0032++ 063D 7F          	dec d
0033++ 063E C2 00 00    	cmp c, 0
0034++ 0641 C7 37 06    	jne _strrev_l0
0035++ 0644             _strrev_end:
0036++ 0644 4C          	popa
0037++ 0645 09          	ret
0038++ 0646             	
0039++ 0646             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0646             ; _strchr
0041++ 0646             ; search string in d for char in al
0042++ 0646             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0646             _strchr:
0044++ 0646             _strchr_l0:
0045++ 0646 32          	mov bl, [d]
0046++ 0647 C1 00       	cmp bl, 0
0047++ 0649 C6 54 06    	je _strchr_end
0048++ 064C BA          	cmp al, bl
0049++ 064D C6 54 06    	je _strchr_end
0050++ 0650 79          	inc d
0051++ 0651 0A 46 06    	jmp _strchr_l0
0052++ 0654             _strchr_end:
0053++ 0654 1B          	mov al, bl
0054++ 0655 09          	ret
0055++ 0656             
0056++ 0656             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0656             ; _strstr
0058++ 0656             ; find sub-string
0059++ 0656             ; str1 in si
0060++ 0656             ; str2 in di
0061++ 0656             ; si points to end of source string
0062++ 0656             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0656             _strstr:
0064++ 0656 DB          	push al
0065++ 0657 DA          	push d
0066++ 0658 E3          	push di
0067++ 0659             _strstr_loop:
0068++ 0659 F3          	cmpsb					; compare a byte of the strings
0069++ 065A C7 65 06    	jne _strstr_ret
0070++ 065D FC 00 00    	lea d, [di + 0]
0071++ 0660 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0662 C7 59 06    	jne _strstr_loop				; equal chars but not at end
0073++ 0665             _strstr_ret:
0074++ 0665 F0          	pop di
0075++ 0666 E7          	pop d
0076++ 0667 E8          	pop al
0077++ 0668 09          	ret
0078++ 0669             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0669             ; length of null terminated string
0080++ 0669             ; result in c
0081++ 0669             ; pointer in d
0082++ 0669             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0669             _strlen:
0084++ 0669 DA          	push d
0085++ 066A 38 00 00    	mov c, 0
0086++ 066D             _strlen_l1:
0087++ 066D BD 00       	cmp byte [d], 0
0088++ 066F C6 77 06    	je _strlen_ret
0089++ 0672 79          	inc d
0090++ 0673 78          	inc c
0091++ 0674 0A 6D 06    	jmp _strlen_l1
0092++ 0677             _strlen_ret:
0093++ 0677 E7          	pop d
0094++ 0678 09          	ret
0095++ 0679             
0096++ 0679             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0679             ; strcmp
0098++ 0679             ; compare two strings
0099++ 0679             ; str1 in si
0100++ 0679             ; str2 in di
0101++ 0679             ; create a string compairon instrucion ?????
0102++ 0679             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0679             _strcmp:
0104++ 0679 DB          	push al
0105++ 067A DA          	push d
0106++ 067B E3          	push di
0107++ 067C E2          	push si
0108++ 067D             _strcmp_loop:
0109++ 067D F3          	cmpsb					; compare a byte of the strings
0110++ 067E C7 89 06    	jne _strcmp_ret
0111++ 0681 FB FF FF    	lea d, [si +- 1]
0112++ 0684 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0686 C7 7D 06    	jne _strcmp_loop				; equal chars but not at end
0114++ 0689             _strcmp_ret:
0115++ 0689 EF          	pop si
0116++ 068A F0          	pop di
0117++ 068B E7          	pop d
0118++ 068C E8          	pop al
0119++ 068D 09          	ret
0120++ 068E             
0121++ 068E             
0122++ 068E             ; strcpy
0123++ 068E             ; copy null terminated string from si to di
0124++ 068E             ; source in si
0125++ 068E             ; destination in di
0126++ 068E             _strcpy:
0127++ 068E E2          	push si
0128++ 068F E3          	push di
0129++ 0690 DB          	push al
0130++ 0691             _strcpy_l1:
0131++ 0691 F6          	lodsb
0132++ 0692 F7          	stosb
0133++ 0693 B9 00       	cmp al, 0
0134++ 0695 C7 91 06    	jne _strcpy_l1
0135++ 0698             _strcpy_end:
0136++ 0698 E8          	pop al
0137++ 0699 F0          	pop di
0138++ 069A EF          	pop si
0139++ 069B 09          	ret
0140++ 069C             
0141++ 069C             ; strcat
0142++ 069C             ; concatenate a null terminated string into string at di, from string at si
0143++ 069C             ; source in si
0144++ 069C             ; destination in di
0145++ 069C             _strcat:
0146++ 069C E2          	push si
0147++ 069D E3          	push di
0148++ 069E D7          	push a
0149++ 069F DA          	push d
0150++ 06A0 50          	mov a, di
0151++ 06A1 3C          	mov d, a
0152++ 06A2             _strcat_goto_end_l1:
0153++ 06A2 BD 00       	cmp byte[d], 0
0154++ 06A4 C6 AB 06    	je _strcat_start
0155++ 06A7 79          	inc d
0156++ 06A8 0A A2 06    	jmp _strcat_goto_end_l1
0157++ 06AB             _strcat_start:
0158++ 06AB FD 50       	mov di, d
0159++ 06AD             _strcat_l1:
0160++ 06AD F6          	lodsb
0161++ 06AE F7          	stosb
0162++ 06AF B9 00       	cmp al, 0
0163++ 06B1 C7 AD 06    	jne _strcat_l1
0164++ 06B4             _strcat_end:
0165++ 06B4 E7          	pop d
0166++ 06B5 E4          	pop a
0167++ 06B6 F0          	pop di
0168++ 06B7 EF          	pop si
0169++ 06B8 09          	ret
0170++ 06B9             
0171++ 06B9             
0005+  06B9             
0006+  06B9             
0007+  06B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  06B9             ; convert ascii 'o'..'f' to integer 0..15
0009+  06B9             ; ascii in bl
0010+  06B9             ; result in al
0011+  06B9             ; ascii for f = 0100 0110
0012+  06B9             ; ascii for 9 = 0011 1001
0013+  06B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  06B9             hex_ascii_encode:
0015+  06B9 1B            mov al, bl
0016+  06BA 93 40         test al, $40        ; test if letter or number
0017+  06BC C7 C2 06      jnz hex_letter
0018+  06BF 87 0F         and al, $0f        ; get number
0019+  06C1 09            ret
0020+  06C2             hex_letter:
0021+  06C2 87 0F         and al, $0f        ; get letter
0022+  06C4 6A 09         add al, 9
0023+  06C6 09            ret
0024+  06C7             
0025+  06C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  06C7             ; atoi
0027+  06C7             ; 2 letter hex string in b
0028+  06C7             ; 8bit integer returned in al
0029+  06C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  06C7             _atoi:
0031+  06C7 D8            push b
0032+  06C8 07 B9 06      call hex_ascii_encode      ; convert bl to 4bit code in al
0033+  06CB 30            mov bl, bh
0034+  06CC DB            push al          ; save a
0035+  06CD 07 B9 06      call hex_ascii_encode
0036+  06D0 EA            pop bl  
0037+  06D1 FD 9E 04      shl al, 4
0038+  06D4 8C            or al, bl
0039+  06D5 E5            pop b
0040+  06D6 09            ret  
0041+  06D7             
0042+  06D7             
0043+  06D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  06D7             ; scanf
0045+  06D7             ; no need for explanations!
0046+  06D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  06D7             scanf:
0048+  06D7 09            ret
0049+  06D8             
0050+  06D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  06D8             ; itoa
0052+  06D8             ; 8bit value in bl
0053+  06D8             ; 2 byte ascii result in a
0054+  06D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  06D8             _itoa:
0056+  06D8 DA            push d
0057+  06D9 D8            push b
0058+  06DA A7 00         mov bh, 0
0059+  06DC FD A4 04      shr bl, 4  
0060+  06DF 74            mov d, b
0061+  06E0 1F 72 09      mov al, [d + s_hex_digits]
0062+  06E3 23            mov ah, al
0063+  06E4               
0064+  06E4 E5            pop b
0065+  06E5 D8            push b
0066+  06E6 A7 00         mov bh, 0
0067+  06E8 FD 87 0F      and bl, $0f
0068+  06EB 74            mov d, b
0069+  06EC 1F 72 09      mov al, [d + s_hex_digits]
0070+  06EF E5            pop b
0071+  06F0 E7            pop d
0072+  06F1 09            ret
0073+  06F2             
0074+  06F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  06F2             ; hex string to binary
0076+  06F2             ; di = destination address
0077+  06F2             ; si = source
0078+  06F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  06F2             _hex_to_int:
0080+  06F2             _hex_to_int_l1:
0081+  06F2 F6            lodsb          ; load from [si] to al
0082+  06F3 B9 00         cmp al, 0        ; check if ascii 0
0083+  06F5 C6 02 07      jz _hex_to_int_ret
0084+  06F8 36            mov bh, al
0085+  06F9 F6            lodsb
0086+  06FA 2F            mov bl, al
0087+  06FB 07 C7 06      call _atoi        ; convert ascii byte in b to int (to al)
0088+  06FE F7            stosb          ; store al to [di]
0089+  06FF 0A F2 06      jmp _hex_to_int_l1
0090+  0702             _hex_to_int_ret:
0091+  0702 09            ret    
0092+  0703             
0093+  0703             
0094+  0703             
0095+  0703             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  0703             ; getchar
0097+  0703             ; char in ah
0098+  0703             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  0703             getch:
0100+  0703 DB            push al
0101+  0704             getch_retry:
0102+  0704 19 01         mov al, 1
0103+  0706 05 03         syscall sys_io      ; receive in ah
0104+  0708 E8            pop al
0105+  0709 09            ret
0106+  070A             
0107+  070A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  070A             ; putchar
0109+  070A             ; char in ah
0110+  070A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  070A             _putchar:
0112+  070A DB            push al
0113+  070B 19 00         mov al, 0
0114+  070D 05 03         syscall sys_io      ; char in ah
0115+  070F E8            pop al
0116+  0710 09            ret
0117+  0711             
0118+  0711             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  0711             ;; input a string
0120+  0711             ;; terminates with null
0121+  0711             ;; pointer in d
0122+  0711             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  0711             _gets:
0124+  0711 D7            push a
0125+  0712 DA            push d
0126+  0713             _gets_loop:
0127+  0713 19 01         mov al, 1
0128+  0715 05 03         syscall sys_io      ; receive in ah
0129+  0717 76 1B         cmp ah, 27
0130+  0719 C6 3A 07      je _gets_ansi_esc
0131+  071C 76 0A         cmp ah, $0a        ; lf
0132+  071E C6 96 07      je _gets_end
0133+  0721 76 0D         cmp ah, $0d        ; cr
0134+  0723 C6 96 07      je _gets_end
0135+  0726 76 5C         cmp ah, $5c        ; '\\'
0136+  0728 C6 5C 07      je _gets_escape
0137+  072B 76 08         cmp ah, $08      ; check for backspace
0138+  072D C6 36 07      je _gets_backspace
0139+  0730 1A            mov al, ah
0140+  0731 3E            mov [d], al
0141+  0732 79            inc d
0142+  0733 0A 13 07      jmp _gets_loop
0143+  0736             _gets_backspace:
0144+  0736 7F            dec d
0145+  0737 0A 13 07      jmp _gets_loop
0146+  073A             _gets_ansi_esc:
0147+  073A 19 01         mov al, 1
0148+  073C 05 03         syscall sys_io        ; receive in ah without echo
0149+  073E 76 5B         cmp ah, '['
0150+  0740 C7 13 07      jne _gets_loop
0151+  0743 19 01         mov al, 1
0152+  0745 05 03         syscall sys_io          ; receive in ah without echo
0153+  0747 76 64         cmp ah, 'd'
0154+  0749 C6 54 07      je _gets_left_arrow
0155+  074C 76 63         cmp ah, 'c'
0156+  074E C6 58 07      je _gets_right_arrow
0157+  0751 0A 13 07      jmp _gets_loop
0158+  0754             _gets_left_arrow:
0159+  0754 7F            dec d
0160+  0755 0A 13 07      jmp _gets_loop
0161+  0758             _gets_right_arrow:
0162+  0758 79            inc d
0163+  0759 0A 13 07      jmp _gets_loop
0164+  075C             _gets_escape:
0165+  075C 19 01         mov al, 1
0166+  075E 05 03         syscall sys_io      ; receive in ah
0167+  0760 76 6E         cmp ah, 'n'
0168+  0762 C6 81 07      je _gets_lf
0169+  0765 76 72         cmp ah, 'r'
0170+  0767 C6 88 07      je _gets_cr
0171+  076A 76 30         cmp ah, '0'
0172+  076C C6 8F 07      je _gets_null
0173+  076F 76 5C         cmp ah, $5c  ; '\'
0174+  0771 C6 7A 07      je _gets_slash
0175+  0774 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  0775 3E            mov [d], al
0177+  0776 79            inc d
0178+  0777 0A 13 07      jmp _gets_loop
0179+  077A             _gets_slash:
0180+  077A 19 5C         mov al, $5c
0181+  077C 3E            mov [d], al
0182+  077D 79            inc d
0183+  077E 0A 13 07      jmp _gets_loop
0184+  0781             _gets_lf:
0185+  0781 19 0A         mov al, $0a
0186+  0783 3E            mov [d], al
0187+  0784 79            inc d
0188+  0785 0A 13 07      jmp _gets_loop
0189+  0788             _gets_cr:
0190+  0788 19 0D         mov al, $0d
0191+  078A 3E            mov [d], al
0192+  078B 79            inc d
0193+  078C 0A 13 07      jmp _gets_loop
0194+  078F             _gets_null:
0195+  078F 19 00         mov al, $00
0196+  0791 3E            mov [d], al
0197+  0792 79            inc d
0198+  0793 0A 13 07      jmp _gets_loop
0199+  0796             _gets_end:
0200+  0796 19 00         mov al, 0
0201+  0798 3E            mov [d], al        ; terminate string
0202+  0799 E7            pop d
0203+  079A E4            pop a
0204+  079B 09            ret
0205+  079C             
0206+  079C             
0207+  079C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  079C             ;; input text
0209+  079C             ;; terminated with ctrl+d
0210+  079C             ;; pointer in d
0211+  079C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  079C             _gettxt:
0213+  079C D7            push a
0214+  079D DA            push d
0215+  079E             _gettxt_loop:
0216+  079E 19 01         mov al, 1
0217+  07A0 05 03         syscall sys_io      ; receive in ah
0218+  07A2 76 04         cmp ah, 4      ; eot
0219+  07A4 C6 DD 07      je _gettxt_end
0220+  07A7 76 08         cmp ah, $08      ; check for backspace
0221+  07A9 C6 D9 07      je _gettxt_backspace
0222+  07AC 76 5C         cmp ah, $5c        ; '\'
0223+  07AE C6 B7 07      je _gettxt_escape
0224+  07B1 1A            mov al, ah
0225+  07B2 3E            mov [d], al
0226+  07B3 79            inc d
0227+  07B4 0A 9E 07      jmp _gettxt_loop
0228+  07B7             _gettxt_escape:
0229+  07B7 19 01         mov al, 1
0230+  07B9 05 03         syscall sys_io      ; receive in ah
0231+  07BB 76 6E         cmp ah, 'n'
0232+  07BD C6 CB 07      je _gettxt_lf
0233+  07C0 76 72         cmp ah, 'r'
0234+  07C2 C6 D2 07      je _gettxt_cr
0235+  07C5 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  07C6 3E            mov [d], al
0237+  07C7 79            inc d
0238+  07C8 0A 9E 07      jmp _gettxt_loop
0239+  07CB             _gettxt_lf:
0240+  07CB 19 0A         mov al, $0a
0241+  07CD 3E            mov [d], al
0242+  07CE 79            inc d
0243+  07CF 0A 9E 07      jmp _gettxt_loop
0244+  07D2             _gettxt_cr:
0245+  07D2 19 0D         mov al, $0d
0246+  07D4 3E            mov [d], al
0247+  07D5 79            inc d
0248+  07D6 0A 9E 07      jmp _gettxt_loop
0249+  07D9             _gettxt_backspace:
0250+  07D9 7F            dec d
0251+  07DA 0A 9E 07      jmp _gettxt_loop
0252+  07DD             _gettxt_end:
0253+  07DD 19 00         mov al, 0
0254+  07DF 3E            mov [d], al        ; terminate string
0255+  07E0 E7            pop d
0256+  07E1 E4            pop a
0257+  07E2 09            ret
0258+  07E3             
0259+  07E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  07E3             ; print new line
0261+  07E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  07E3             printnl:
0263+  07E3 D7            push a
0264+  07E4 10 00 0A      mov a, $0a00
0265+  07E7 05 03         syscall sys_io
0266+  07E9 10 00 0D      mov a, $0d00
0267+  07EC 05 03         syscall sys_io
0268+  07EE E4            pop a
0269+  07EF 09            ret
0270+  07F0             
0271+  07F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  07F0             ; _strtoint
0273+  07F0             ; 4 digit hex string number in d
0274+  07F0             ; integer returned in a
0275+  07F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  07F0             _strtointx:
0277+  07F0 D8            push b
0278+  07F1 32            mov bl, [d]
0279+  07F2 37            mov bh, bl
0280+  07F3 33 01 00      mov bl, [d + 1]
0281+  07F6 07 C7 06      call _atoi        ; convert to int in al
0282+  07F9 23            mov ah, al        ; move to ah
0283+  07FA 33 02 00      mov bl, [d + 2]
0284+  07FD 37            mov bh, bl
0285+  07FE 33 03 00      mov bl, [d + 3]
0286+  0801 07 C7 06      call _atoi        ; convert to int in al
0287+  0804 E5            pop b
0288+  0805 09            ret
0289+  0806             
0290+  0806             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  0806             ; _strtoint
0292+  0806             ; 5 digit base10 string number in d
0293+  0806             ; integer returned in a
0294+  0806             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  0806             _strtoint:
0296+  0806 E2            push si
0297+  0807 D8            push b
0298+  0808 D9            push c
0299+  0809 DA            push d
0300+  080A 07 69 06      call _strlen      ; get string length in c
0301+  080D 7E            dec c
0302+  080E FD 4E         mov si, d
0303+  0810 12            mov a, c
0304+  0811 FD 99         shl a
0305+  0813 3B 8A 09      mov d, table_power
0306+  0816 59            add d, a
0307+  0817 38 00 00      mov c, 0
0308+  081A             _strtoint_l0:
0309+  081A F6            lodsb      ; load ascii to al
0310+  081B B9 00         cmp al, 0
0311+  081D C6 30 08      je _strtoint_end
0312+  0820 6F 30         sub al, $30    ; make into integer
0313+  0822 22 00         mov ah, 0
0314+  0824 2A            mov b, [d]
0315+  0825 AC            mul a, b      ; result in b since it fits in 16bits
0316+  0826 11            mov a, b
0317+  0827 28            mov b, c
0318+  0828 54            add a, b
0319+  0829 39            mov c, a
0320+  082A 63 02 00      sub d, 2
0321+  082D 0A 1A 08      jmp _strtoint_l0
0322+  0830             _strtoint_end:
0323+  0830 12            mov a, c
0324+  0831 E7            pop d
0325+  0832 E6            pop c
0326+  0833 E5            pop b
0327+  0834 EF            pop si
0328+  0835 09            ret
0329+  0836             
0330+  0836             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  0836             ; print null terminated string
0332+  0836             ; pointer in d
0333+  0836             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  0836             _puts:
0335+  0836 D7            push a
0336+  0837 DA            push d
0337+  0838             _puts_l1:
0338+  0838 1E            mov al, [d]
0339+  0839 B9 00         cmp al, 0
0340+  083B C6 47 08      jz _puts_end
0341+  083E 23            mov ah, al
0342+  083F 19 00         mov al, 0
0343+  0841 05 03         syscall sys_io
0344+  0843 79            inc d
0345+  0844 0A 38 08      jmp _puts_l1
0346+  0847             _puts_end:
0347+  0847 E7            pop d
0348+  0848 E4            pop a
0349+  0849 09            ret
0350+  084A             
0351+  084A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  084A             ; print n size string
0353+  084A             ; pointer in d
0354+  084A             ; size in c
0355+  084A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  084A             _putsn:
0357+  084A DB            push al
0358+  084B DA            push d
0359+  084C D9            push c
0360+  084D             _putsn_l0:
0361+  084D 1E            mov al, [d]
0362+  084E 23            mov ah, al
0363+  084F 19 00         mov al, 0
0364+  0851 05 03         syscall sys_io
0365+  0853 79            inc d
0366+  0854 7E            dec c  
0367+  0855 C2 00 00      cmp c, 0
0368+  0858 C7 4D 08      jne _putsn_l0
0369+  085B             _putsn_end:
0370+  085B E6            pop c
0371+  085C E7            pop d
0372+  085D E8            pop al
0373+  085E 09            ret
0374+  085F             
0375+  085F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  085F             ; print 16bit decimal number
0377+  085F             ; input number in a
0378+  085F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  085F             print_u16d:
0380+  085F D7            push a
0381+  0860 D8            push b
0382+  0861 FD D8         push g
0383+  0863 26 10 27      mov b, 10000
0384+  0866 AE            div a, b      ; get 10000's coeff.
0385+  0867 07 8B 08      call print_number
0386+  086A 11            mov a, b
0387+  086B 26 E8 03      mov b, 1000
0388+  086E AE            div a, b      ; get 1000's coeff.
0389+  086F 07 8B 08      call print_number
0390+  0872 11            mov a, b
0391+  0873 26 64 00      mov b, 100
0392+  0876 AE            div a, b
0393+  0877 07 8B 08      call print_number
0394+  087A 11            mov a, b
0395+  087B 26 0A 00      mov b, 10
0396+  087E AE            div a, b
0397+  087F 07 8B 08      call print_number
0398+  0882 1B            mov al, bl      ; 1's coeff in bl
0399+  0883 07 8B 08      call print_number
0400+  0886 FD F1         pop g
0401+  0888 E5            pop b
0402+  0889 E4            pop a
0403+  088A 09            ret
0404+  088B             
0405+  088B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  088B             ; print al
0407+  088B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  088B             print_number:
0409+  088B 6A 30         add al, $30
0410+  088D 23            mov ah, al
0411+  088E 07 0A 07      call _putchar
0412+  0891 09            ret
0413+  0892             
0414+  0892             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  0892             ; print 16bit hex integer
0416+  0892             ; integer value in reg b
0417+  0892             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  0892             print_u16x:
0419+  0892 D7            push a
0420+  0893 D8            push b
0421+  0894 DD            push bl
0422+  0895 30            mov bl, bh
0423+  0896 07 D8 06      call _itoa        ; convert bh to char in a
0424+  0899 2F            mov bl, al        ; save al
0425+  089A 19 00         mov al, 0
0426+  089C 05 03         syscall sys_io        ; display ah
0427+  089E 24            mov ah, bl        ; retrieve al
0428+  089F 19 00         mov al, 0
0429+  08A1 05 03         syscall sys_io        ; display al
0430+  08A3             
0431+  08A3 EA            pop bl
0432+  08A4 07 D8 06      call _itoa        ; convert bh to char in a
0433+  08A7 2F            mov bl, al        ; save al
0434+  08A8 19 00         mov al, 0
0435+  08AA 05 03         syscall sys_io        ; display ah
0436+  08AC 24            mov ah, bl        ; retrieve al
0437+  08AD 19 00         mov al, 0
0438+  08AF 05 03         syscall sys_io        ; display al
0439+  08B1             
0440+  08B1 E5            pop b
0441+  08B2 E4            pop a
0442+  08B3 09            ret
0443+  08B4             
0444+  08B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  08B4             ; input 16bit hex integer
0446+  08B4             ; read 16bit integer into a
0447+  08B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  08B4             scan_u16x:
0449+  08B4 F8 10 00      enter 16
0450+  08B7 D8            push b
0451+  08B8 DA            push d
0452+  08B9             
0453+  08B9 FA F1 FF      lea d, [bp + -15]
0454+  08BC 07 11 07      call _gets        ; get number
0455+  08BF             
0456+  08BF 32            mov bl, [d]
0457+  08C0 37            mov bh, bl
0458+  08C1 33 01 00      mov bl, [d + 1]
0459+  08C4 07 C7 06      call _atoi        ; convert to int in al
0460+  08C7 23            mov ah, al        ; move to ah
0461+  08C8             
0462+  08C8 33 02 00      mov bl, [d + 2]
0463+  08CB 37            mov bh, bl
0464+  08CC 33 03 00      mov bl, [d + 3]
0465+  08CF 07 C7 06      call _atoi        ; convert to int in al
0466+  08D2             
0467+  08D2 E7            pop d
0468+  08D3 E5            pop b
0469+  08D4 F9            leave
0470+  08D5 09            ret
0471+  08D6             
0472+  08D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  08D6             ; print 8bit hex integer
0474+  08D6             ; integer value in reg bl
0475+  08D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  08D6             print_u8x:
0477+  08D6 D7            push a
0478+  08D7 DD            push bl
0479+  08D8             
0480+  08D8 07 D8 06      call _itoa        ; convert bl to char in a
0481+  08DB 2F            mov bl, al        ; save al
0482+  08DC 19 00         mov al, 0
0483+  08DE 05 03         syscall sys_io        ; display ah
0484+  08E0 24            mov ah, bl        ; retrieve al
0485+  08E1 19 00         mov al, 0
0486+  08E3 05 03         syscall sys_io        ; display al
0487+  08E5             
0488+  08E5 EA            pop bl
0489+  08E6 E4            pop a
0490+  08E7 09            ret
0491+  08E8             
0492+  08E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  08E8             ; print 8bit decimal unsigned number
0494+  08E8             ; input number in al
0495+  08E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  08E8             print_u8d:
0497+  08E8 D7            push a
0498+  08E9 D8            push b
0499+  08EA FD D8         push g
0500+  08EC 22 00         mov ah, 0
0501+  08EE 26 64 00      mov b, 100
0502+  08F1 AE            div a, b
0503+  08F2 D8            push b      ; save remainder
0504+  08F3 B9 00         cmp al, 0
0505+  08F5 C6 FF 08      je skip100
0506+  08F8 6A 30         add al, $30
0507+  08FA 23            mov ah, al
0508+  08FB 19 00         mov al, 0
0509+  08FD 05 03         syscall sys_io  ; print coeff
0510+  08FF             skip100:
0511+  08FF E4            pop a
0512+  0900 22 00         mov ah, 0
0513+  0902 26 0A 00      mov b, 10
0514+  0905 AE            div a, b
0515+  0906 D8            push b      ; save remainder
0516+  0907 B9 00         cmp al, 0
0517+  0909 C6 13 09      je skip10
0518+  090C 6A 30         add al, $30
0519+  090E 23            mov ah, al
0520+  090F 19 00         mov al, 0
0521+  0911 05 03         syscall sys_io  ; print coeff
0522+  0913             skip10:
0523+  0913 E4            pop a
0524+  0914 1B            mov al, bl
0525+  0915 6A 30         add al, $30
0526+  0917 23            mov ah, al
0527+  0918 19 00         mov al, 0
0528+  091A 05 03         syscall sys_io  ; print coeff
0529+  091C FD F1         pop g
0530+  091E E5            pop b
0531+  091F E4            pop a
0532+  0920 09            ret
0533+  0921             
0534+  0921             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  0921             ; input 8bit hex integer
0536+  0921             ; read 8bit integer into al
0537+  0921             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  0921             scan_u8x:
0539+  0921 F8 04 00      enter 4
0540+  0924 D8            push b
0541+  0925 DA            push d
0542+  0926             
0543+  0926 FA FD FF      lea d, [bp + -3]
0544+  0929 07 11 07      call _gets        ; get number
0545+  092C             
0546+  092C 32            mov bl, [d]
0547+  092D 37            mov bh, bl
0548+  092E 33 01 00      mov bl, [d + 1]
0549+  0931 07 C7 06      call _atoi        ; convert to int in al
0550+  0934             
0551+  0934 E7            pop d
0552+  0935 E5            pop b
0553+  0936 F9            leave
0554+  0937 09            ret
0555+  0938             
0556+  0938             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  0938             ; input decimal number
0558+  0938             ; result in a
0559+  0938             ; 655'\0'
0560+  0938             ; low--------high
0561+  0938             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  0938             scan_u16d:
0563+  0938 F8 08 00      enter 8
0564+  093B E2            push si
0565+  093C D8            push b
0566+  093D D9            push c
0567+  093E DA            push d
0568+  093F FA F9 FF      lea d, [bp +- 7]
0569+  0942 07 11 07      call _gets
0570+  0945 07 69 06      call _strlen      ; get string length in c
0571+  0948 7E            dec c
0572+  0949 FD 4E         mov si, d
0573+  094B 12            mov a, c
0574+  094C FD 99         shl a
0575+  094E 3B 8A 09      mov d, table_power
0576+  0951 59            add d, a
0577+  0952 38 00 00      mov c, 0
0578+  0955             mul_loop:
0579+  0955 F6            lodsb      ; load ascii to al
0580+  0956 B9 00         cmp al, 0
0581+  0958 C6 6B 09      je mul_exit
0582+  095B 6F 30         sub al, $30    ; make into integer
0583+  095D 22 00         mov ah, 0
0584+  095F 2A            mov b, [d]
0585+  0960 AC            mul a, b      ; result in b since it fits in 16bits
0586+  0961 11            mov a, b
0587+  0962 28            mov b, c
0588+  0963 54            add a, b
0589+  0964 39            mov c, a
0590+  0965 63 02 00      sub d, 2
0591+  0968 0A 55 09      jmp mul_loop
0592+  096B             mul_exit:
0593+  096B 12            mov a, c
0594+  096C E7            pop d
0595+  096D E6            pop c
0596+  096E E5            pop b
0597+  096F EF            pop si
0598+  0970 F9            leave
0599+  0971 09            ret
0600+  0972             
0601+  0972             
0602+  0972 30 31 32 33 s_hex_digits:    .db "0123456789abcdef"  
0602+  0976 34 35 36 37 
0602+  097A 38 39 61 62 
0602+  097E 63 64 65 66 
0603+  0982 1B 5B 32 6A s_telnet_clear:  .db "\033[2j\033[h", 0
0603+  0986 1B 5B 68 00 
0604+  098A             
0605+  098A             table_power:
0606+  098A 01 00         .dw 1
0607+  098C 0A 00         .dw 10
0608+  098E 64 00         .dw 100
0609+  0990 E8 03         .dw 1000
0610+  0992 10 27         .dw 100000289   0994             
0290   0994 00 00       start:   .dw 0
0291   0996 00 04       length:  .dw 1024
0292   0998             
0293   0998             
0294   0998 0A 74 72 61 s_track: .db "\ntrack: ", 0
0294   099C 63 6B 3A 20 
0294   09A0 00 
0295   09A1             
0296   09A1 0A 30 2E 20 s_menu:  .db "\n0. step in\n"
0296   09A5 73 74 65 70 
0296   09A9 20 69 6E 0A 
0297   09AD 31 2E 20 73          .db "1. step out\n", 
0297   09B1 74 65 70 20 
0297   09B5 6F 75 74 0A 
0298   09B9 32 2E 20 72          .db "2. restore\n", 
0298   09BD 65 73 74 6F 
0298   09C1 72 65 0A 
0299   09C4 33 2E 20 72          .db "3. read status 1\n", 
0299   09C8 65 61 64 20 
0299   09CC 73 74 61 74 
0299   09D0 75 73 20 31 
0299   09D4 0A 
0300   09D5 34 2E 20 72          .db "4. read status 2\n", 
0300   09D9 65 61 64 20 
0300   09DD 73 74 61 74 
0300   09E1 75 73 20 32 
0300   09E5 0A 
0301   09E6 35 2E 20 66          .db "5. format track 128\n", 
0301   09EA 6F 72 6D 61 
0301   09EE 74 20 74 72 
0301   09F2 61 63 6B 20 
0301   09F6 31 32 38 0A 
0302   09FA 36 2E 20 66          .db "6. format disk 128\n", 
0302   09FE 6F 72 6D 61 
0302   0A02 74 20 64 69 
0302   0A06 73 6B 20 31 
0302   0A0A 32 38 0A 
0303   0A0D 37 2E 20 66          .db "7. format track 512\n", 
0303   0A11 6F 72 6D 61 
0303   0A15 74 20 74 72 
0303   0A19 61 63 6B 20 
0303   0A1D 35 31 32 0A 
0304   0A21 38 2E 20 66          .db "8. format disk 512\n", 
0304   0A25 6F 72 6D 61 
0304   0A29 74 20 64 69 
0304   0A2D 73 6B 20 35 
0304   0A31 31 32 0A 
0305   0A34 39 2E 20 72          .db "9. read track\n", 
0305   0A38 65 61 64 20 
0305   0A3C 74 72 61 63 
0305   0A40 6B 0A 
0306   0A42 41 2E 20 72          .db "A. read sector 128\n", 
0306   0A46 65 61 64 20 
0306   0A4A 73 65 63 74 
0306   0A4E 6F 72 20 31 
0306   0A52 32 38 0A 
0307   0A55 42 2E 20 72          .db "B. read sector 512\n", 
0307   0A59 65 61 64 20 
0307   0A5D 73 65 63 74 
0307   0A61 6F 72 20 35 
0307   0A65 31 32 0A 
0308   0A68 43 2E 20 63          .db "C. config\n", 
0308   0A6C 6F 6E 66 69 
0308   0A70 67 0A 
0309   0A72 44 2E 20 77          .db "D. write 128 byte sector\n", 
0309   0A76 72 69 74 65 
0309   0A7A 20 31 32 38 
0309   0A7E 20 62 79 74 
0309   0A82 65 20 73 65 
0309   0A86 63 74 6F 72 
0309   0A8A 0A 
0310   0A8B 45 2E 20 77          .db "E. write 512 byte sector\n", 
0310   0A8F 72 69 74 65 
0310   0A93 20 35 31 32 
0310   0A97 20 62 79 74 
0310   0A9B 65 20 73 65 
0310   0A9F 63 74 6F 72 
0310   0AA3 0A 
0311   0AA4 0A 73 65 6C          .db "\nselect option: ", 0
0311   0AA8 65 63 74 20 
0311   0AAC 6F 70 74 69 
0311   0AB0 6F 6E 3A 20 
0311   0AB4 00 
0312   0AB5             
0313   0AB5 0A 66 6F 72 s_format_done: .db "\nformat done.\n", 0
0313   0AB9 6D 61 74 20 
0313   0ABD 64 6F 6E 65 
0313   0AC1 2E 0A 00 
0314   0AC4 0A 73 65 6C str0:    .db "\nselecting drive 0...\n", 0
0314   0AC8 65 63 74 69 
0314   0ACC 6E 67 20 64 
0314   0AD0 72 69 76 65 
0314   0AD4 20 30 2E 2E 
0314   0AD8 2E 0A 00 
0315   0ADB 0A 77 61 69 str1:    .db "\nwaiting...\n", 0
0315   0ADF 74 69 6E 67 
0315   0AE3 2E 2E 2E 0A 
0315   0AE7 00 
0316   0AE8 0A 74 72 61 s1:      .db "\ntrack: ", 0
0316   0AEC 63 6B 3A 20 
0316   0AF0 00 
0317   0AF1 0A 73 65 63 s2:      .db "\nsector: ", 0
0317   0AF5 74 6F 72 3A 
0317   0AF9 20 00 
0318   0AFB 0A 76 61 6C ss3:     .db "\nvalue: ", 0
0318   0AFF 75 65 3A 20 
0318   0B03 00 
0319   0B04             
0320   0B04             fdc_sec_data_128:
0321   0B04 FF EE E0 55   .db $ff, $ee, $e0, $55, $66, $33, $42, $aa, $ae, $67, $23, $11, $23, $56, $88, $99,
0321   0B08 66 33 42 AA 
0321   0B0C AE 67 23 11 
0321   0B10 23 56 88 99 
0322   0B14 1F 2E 40 53   .db $1f, $2e, $40, $53, $63, $43, $52, $1a, $a4, $67, $03, $31, $43, $56, $48, $f9,
0322   0B18 63 43 52 1A 
0322   0B1C A4 67 03 31 
0322   0B20 43 56 48 F9 
0323   0B24 2F 3E 50 57   .db $2f, $3e, $50, $57, $62, $53, $21, $2a, $a3, $17, $73, $41, $53, $46, $38, $b9,
0323   0B28 62 53 21 2A 
0323   0B2C A3 17 73 41 
0323   0B30 53 46 38 B9 
0324   0B34 6F 4E 20 56   .db $6f, $4e, $20, $56, $67, $63, $20, $6a, $a2, $27, $53, $61, $23, $16, $28, $e9,
0324   0B38 67 63 20 6A 
0324   0B3C A2 27 53 61 
0324   0B40 23 16 28 E9 
0325   0B44 AF 7E 10 52   .db $af, $7e, $10, $52, $62, $73, $18, $5a, $a1, $37, $43, $51, $13, $26, $18, $a9,
0325   0B48 62 73 18 5A 
0325   0B4C A1 37 43 51 
0325   0B50 13 26 18 A9 
0326   0B54 6F 3E 90 51   .db $6f, $3e, $90, $51, $63, $03, $18, $4a, $a5, $67, $33, $41, $43, $36, $68, $c9,
0326   0B58 63 03 18 4A 
0326   0B5C A5 67 33 41 
0326   0B60 43 36 68 C9 
0327   0B64 8F 5E 60 55   .db $8f, $5e, $60, $55, $68, $23, $18, $3a, $a3, $57, $23, $31, $73, $36, $48, $b9,
0327   0B68 68 23 18 3A 
0327   0B6C A3 57 23 31 
0327   0B70 73 36 48 B9 
0328   0B74 2F 1E 40 53   .db $2f, $1e, $40, $53, $69, $13, $19, $3a, $a1, $48, $23, $21, $53, $46, $38, $a9
0328   0B78 69 13 19 3A 
0328   0B7C A1 48 23 21 
0328   0B80 53 46 38 A9 
0329   0B84             fdc_sec_data_512:
0330   0B84 FF EE E0 55   .db $ff, $ee, $e0, $55, $66, $33, $42, $aa, $ae, $67, $23, $11, $23, $56, $88, $99,
0330   0B88 66 33 42 AA 
0330   0B8C AE 67 23 11 
0330   0B90 23 56 88 99 
0331   0B94 1F 2E 40 53   .db $1f, $2e, $40, $53, $63, $43, $52, $1a, $a4, $67, $03, $31, $43, $56, $48, $f9,
0331   0B98 63 43 52 1A 
0331   0B9C A4 67 03 31 
0331   0BA0 43 56 48 F9 
0332   0BA4 2F 3E 50 57   .db $2f, $3e, $50, $57, $62, $53, $21, $2a, $a3, $17, $73, $41, $53, $46, $38, $b9,
0332   0BA8 62 53 21 2A 
0332   0BAC A3 17 73 41 
0332   0BB0 53 46 38 B9 
0333   0BB4 6F 4E 20 56   .db $6f, $4e, $20, $56, $67, $63, $20, $6a, $a2, $27, $53, $61, $23, $16, $28, $e9,
0333   0BB8 67 63 20 6A 
0333   0BBC A2 27 53 61 
0333   0BC0 23 16 28 E9 
0334   0BC4 AF 7E 10 52   .db $af, $7e, $10, $52, $62, $73, $18, $5a, $a1, $37, $43, $51, $13, $26, $18, $a9,
0334   0BC8 62 73 18 5A 
0334   0BCC A1 37 43 51 
0334   0BD0 13 26 18 A9 
0335   0BD4 6F 3E 90 51   .db $6f, $3e, $90, $51, $63, $03, $18, $4a, $a5, $67, $33, $41, $43, $36, $68, $c9,
0335   0BD8 63 03 18 4A 
0335   0BDC A5 67 33 41 
0335   0BE0 43 36 68 C9 
0336   0BE4 8F 5E 60 55   .db $8f, $5e, $60, $55, $68, $23, $18, $3a, $a3, $57, $23, $31, $73, $36, $48, $b9,
0336   0BE8 68 23 18 3A 
0336   0BEC A3 57 23 31 
0336   0BF0 73 36 48 B9 
0337   0BF4 2F 1E 40 53   .db $2f, $1e, $40, $53, $69, $13, $19, $3a, $a1, $48, $23, $21, $53, $46, $38, $a9,
0337   0BF8 69 13 19 3A 
0337   0BFC A1 48 23 21 
0337   0C00 53 46 38 A9 
0338   0C04 FF EE E0 55   .db $ff, $ee, $e0, $55, $66, $33, $42, $aa, $ae, $67, $23, $11, $23, $56, $88, $99,
0338   0C08 66 33 42 AA 
0338   0C0C AE 67 23 11 
0338   0C10 23 56 88 99 
0339   0C14 1F 2E 40 53   .db $1f, $2e, $40, $53, $63, $43, $52, $1a, $a4, $67, $03, $31, $43, $56, $48, $f9,
0339   0C18 63 43 52 1A 
0339   0C1C A4 67 03 31 
0339   0C20 43 56 48 F9 
0340   0C24 2F 3E 50 57   .db $2f, $3e, $50, $57, $62, $53, $21, $2a, $a3, $17, $73, $41, $53, $46, $38, $b9,
0340   0C28 62 53 21 2A 
0340   0C2C A3 17 73 41 
0340   0C30 53 46 38 B9 
0341   0C34 6F 4E 20 56   .db $6f, $4e, $20, $56, $67, $63, $20, $6a, $a2, $27, $53, $61, $23, $16, $28, $e9,
0341   0C38 67 63 20 6A 
0341   0C3C A2 27 53 61 
0341   0C40 23 16 28 E9 
0342   0C44 AF 7E 10 52   .db $af, $7e, $10, $52, $62, $73, $18, $5a, $a1, $37, $43, $51, $13, $26, $18, $a9,
0342   0C48 62 73 18 5A 
0342   0C4C A1 37 43 51 
0342   0C50 13 26 18 A9 
0343   0C54 6F 3E 90 51   .db $6f, $3e, $90, $51, $63, $03, $18, $4a, $a5, $67, $33, $41, $43, $36, $68, $c9,
0343   0C58 63 03 18 4A 
0343   0C5C A5 67 33 41 
0343   0C60 43 36 68 C9 
0344   0C64 8F 5E 60 55   .db $8f, $5e, $60, $55, $68, $23, $18, $3a, $a3, $57, $23, $31, $73, $36, $48, $b9,
0344   0C68 68 23 18 3A 
0344   0C6C A3 57 23 31 
0344   0C70 73 36 48 B9 
0345   0C74 2F 1E 40 53   .db $2f, $1e, $40, $53, $69, $13, $19, $3a, $a1, $48, $23, $21, $53, $46, $38, $a9,
0345   0C78 69 13 19 3A 
0345   0C7C A1 48 23 21 
0345   0C80 53 46 38 A9 
0346   0C84 FF EE E0 55   .db $ff, $ee, $e0, $55, $66, $33, $42, $aa, $ae, $67, $23, $11, $23, $56, $88, $99,
0346   0C88 66 33 42 AA 
0346   0C8C AE 67 23 11 
0346   0C90 23 56 88 99 
0347   0C94 1F 2E 40 53   .db $1f, $2e, $40, $53, $63, $43, $52, $1a, $a4, $67, $03, $31, $43, $56, $48, $f9,
0347   0C98 63 43 52 1A 
0347   0C9C A4 67 03 31 
0347   0CA0 43 56 48 F9 
0348   0CA4 2F 3E 50 57   .db $2f, $3e, $50, $57, $62, $53, $21, $2a, $a3, $17, $73, $41, $53, $46, $38, $b9,
0348   0CA8 62 53 21 2A 
0348   0CAC A3 17 73 41 
0348   0CB0 53 46 38 B9 
0349   0CB4 6F 4E 20 56   .db $6f, $4e, $20, $56, $67, $63, $20, $6a, $a2, $27, $53, $61, $23, $16, $28, $e9,
0349   0CB8 67 63 20 6A 
0349   0CBC A2 27 53 61 
0349   0CC0 23 16 28 E9 
0350   0CC4 AF 7E 10 52   .db $af, $7e, $10, $52, $62, $73, $18, $5a, $a1, $37, $43, $51, $13, $26, $18, $a9,
0350   0CC8 62 73 18 5A 
0350   0CCC A1 37 43 51 
0350   0CD0 13 26 18 A9 
0351   0CD4 6F 3E 90 51   .db $6f, $3e, $90, $51, $63, $03, $18, $4a, $a5, $67, $33, $41, $43, $36, $68, $c9,
0351   0CD8 63 03 18 4A 
0351   0CDC A5 67 33 41 
0351   0CE0 43 36 68 C9 
0352   0CE4 8F 5E 60 55   .db $8f, $5e, $60, $55, $68, $23, $18, $3a, $a3, $57, $23, $31, $73, $36, $48, $b9,
0352   0CE8 68 23 18 3A 
0352   0CEC A3 57 23 31 
0352   0CF0 73 36 48 B9 
0353   0CF4 2F 1E 40 53   .db $2f, $1e, $40, $53, $69, $13, $19, $3a, $a1, $48, $23, $21, $53, $46, $38, $a9,
0353   0CF8 69 13 19 3A 
0353   0CFC A1 48 23 21 
0353   0D00 53 46 38 A9 
0354   0D04 FF EE E0 55   .db $ff, $ee, $e0, $55, $66, $33, $42, $aa, $ae, $67, $23, $11, $23, $56, $88, $99,
0354   0D08 66 33 42 AA 
0354   0D0C AE 67 23 11 
0354   0D10 23 56 88 99 
0355   0D14 1F 2E 40 53   .db $1f, $2e, $40, $53, $63, $43, $52, $1a, $a4, $67, $03, $31, $43, $56, $48, $f9,
0355   0D18 63 43 52 1A 
0355   0D1C A4 67 03 31 
0355   0D20 43 56 48 F9 
0356   0D24 2F 3E 50 57   .db $2f, $3e, $50, $57, $62, $53, $21, $2a, $a3, $17, $73, $41, $53, $46, $38, $b9,
0356   0D28 62 53 21 2A 
0356   0D2C A3 17 73 41 
0356   0D30 53 46 38 B9 
0357   0D34 6F 4E 20 56   .db $6f, $4e, $20, $56, $67, $63, $20, $6a, $a2, $27, $53, $61, $23, $16, $28, $e9,
0357   0D38 67 63 20 6A 
0357   0D3C A2 27 53 61 
0357   0D40 23 16 28 E9 
0358   0D44 AF 7E 10 52   .db $af, $7e, $10, $52, $62, $73, $18, $5a, $a1, $37, $43, $51, $13, $26, $18, $a9,
0358   0D48 62 73 18 5A 
0358   0D4C A1 37 43 51 
0358   0D50 13 26 18 A9 
0359   0D54 6F 3E 90 51   .db $6f, $3e, $90, $51, $63, $03, $18, $4a, $a5, $67, $33, $41, $43, $36, $68, $c9,
0359   0D58 63 03 18 4A 
0359   0D5C A5 67 33 41 
0359   0D60 43 36 68 C9 
0360   0D64 8F 5E 60 55   .db $8f, $5e, $60, $55, $68, $23, $18, $3a, $a3, $57, $23, $31, $73, $36, $48, $b9,
0360   0D68 68 23 18 3A 
0360   0D6C A3 57 23 31 
0360   0D70 73 36 48 B9 
0361   0D74 2F 1E 40 53   .db $2f, $1e, $40, $53, $69, $13, $19, $3a, $a1, $48, $23, $21, $53, $46, $38, $a9
0361   0D78 69 13 19 3A 
0361   0D7C A1 48 23 21 
0361   0D80 53 46 38 A9 
0362   0D84             
0363   0D84 00          transient_area: .db 0
0364   0D85             
0365   0D85             .end
tasm: Number of errors = 0
