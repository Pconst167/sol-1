0001   0000             .include "lib/kernel.exp"
0001+  0000             fdc_al_restore   .EQU  $0000
0002+  0000             fdc_al_step      .EQU  $0001
0003+  0000             fdc_al_step_in   .EQU  $0002
0004+  0000             fdc_al_step_out  .EQU  $0003
0005+  0000             fdc_al_seek      .EQU  $0004
0006+  0000             fdc_al_format_128 .EQU  $0005
0007+  0000             fdc_al_formatdisk_128 .EQU  $0006
0008+  0000             fdc_al_format_512 .EQU  $0007
0009+  0000             fdc_al_formatdisk_512 .EQU  $0008
0010+  0000             fdc_al_read_addr .EQU  $0009
0011+  0000             fdc_al_read_track .EQU  $000a
0012+  0000             fdc_al_read_sect .EQU  $000b
0013+  0000             fdc_al_write_sect .EQU  $000c
0014+  0000             fdc_al_force_int .EQU  $000d
0015+  0000             fdc_al_status0   .EQU  $000e
0016+  0000             fdc_al_status1   .EQU  $000f
0017+  0000             noname._7seg_display .EQU  $ffb0
0018+  0000             noname._fdc_config .EQU  $ffc0
0019+  0000             noname._fdc_status_0 .EQU  $ffc1
0020+  0000             noname._fdc_stat_cmd .EQU  $ffc8
0021+  0000             sys_break        .EQU  $0000
0022+  0000             sys_rtc          .EQU  $0001
0023+  0000             sys_ide          .EQU  $0002
0024+  0000             sys_io           .EQU  $0003
0025+  0000             sys_filesystem   .EQU  $0004
0026+  0000             sys_create_proc  .EQU  $0005
0027+  0000             sys_list_proc    .EQU  $0006
0028+  0000             sys_datetime     .EQU  $0007
0029+  0000             sys_reboot       .EQU  $0008
0030+  0000             sys_pause_proc   .EQU  $0009
0031+  0000             sys_resume_proc  .EQU  $000a
0032+  0000             sys_terminate_proc .EQU  $000b
0033+  0000             sys_system       .EQU  $000c
0034+  0000             sys_fdc          .EQU  $000d
0035+  0000             text_org         .EQU  $0400
0002   0000             
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             ;; uname
0005   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006   0000             
0007   0400             .org text_org			; origin at 1024
0008   0400             
0009   0400             cmd_ls:
0010   0400 19 00       	mov al, 0
0011   0402 05 0C       	syscall sys_system
0012   0404 05 0B       	syscall sys_terminate_proc
0013   0406             
0014   0406             
0015   0406             .include "lib/stdio.asm"
0001+  0406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0406             ; stdio.s
0003+  0406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0406             .include "lib/string.asm"
0001++ 0406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0406             ; string.s
0003++ 0406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0406             
0005++ 0406             
0006++ 0406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0406             ; _strrev
0008++ 0406             ; reverse a string
0009++ 0406             ; d = string address
0010++ 0406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0406             ; 01234
0012++ 0406             _strrev:
0013++ 0406 4B          	pusha
0014++ 0407 07 4D 04    	call _strlen	; length in c
0015++ 040A 12          	mov a, c
0016++ 040B AF 01 00    	cmp a, 1
0017++ 040E D0 28 04    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 0411 7D          	dec a
0019++ 0412 FD 4E       	mov si, d	; beginning of string
0020++ 0414 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0416 59          	add d, a	; end of string
0022++ 0417 12          	mov a, c
0023++ 0418 FD 9B       	shr a		; divide by 2
0024++ 041A 39          	mov c, a	; c now counts the steps
0025++ 041B             _strrev_l0:
0026++ 041B 32          	mov bl, [d]	; save load right-side char into bl
0027++ 041C F6          	lodsb		; load left-side char into al; increase si
0028++ 041D 3E          	mov [d], al	; store left char into right side
0029++ 041E 1B          	mov al, bl
0030++ 041F F7          	stosb		; store right-side char into left-side; increase di
0031++ 0420 7E          	dec c
0032++ 0421 7F          	dec d
0033++ 0422 C2 00 00    	cmp c, 0
0034++ 0425 C7 1B 04    	jne _strrev_l0
0035++ 0428             _strrev_end:
0036++ 0428 4C          	popa
0037++ 0429 09          	ret
0038++ 042A             	
0039++ 042A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 042A             ; _strchr
0041++ 042A             ; search string in d for char in al
0042++ 042A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 042A             _strchr:
0044++ 042A             _strchr_l0:
0045++ 042A 32          	mov bl, [d]
0046++ 042B C1 00       	cmp bl, 0
0047++ 042D C6 38 04    	je _strchr_end
0048++ 0430 BA          	cmp al, bl
0049++ 0431 C6 38 04    	je _strchr_end
0050++ 0434 79          	inc d
0051++ 0435 0A 2A 04    	jmp _strchr_l0
0052++ 0438             _strchr_end:
0053++ 0438 1B          	mov al, bl
0054++ 0439 09          	ret
0055++ 043A             
0056++ 043A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 043A             ; _strstr
0058++ 043A             ; find sub-string
0059++ 043A             ; str1 in si
0060++ 043A             ; str2 in di
0061++ 043A             ; si points to end of source string
0062++ 043A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 043A             _strstr:
0064++ 043A DB          	push al
0065++ 043B DA          	push d
0066++ 043C E3          	push di
0067++ 043D             _strstr_loop:
0068++ 043D F3          	cmpsb					; compare a byte of the strings
0069++ 043E C7 49 04    	jne _strstr_ret
0070++ 0441 FC 00 00    	lea d, [di + 0]
0071++ 0444 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0446 C7 3D 04    	jne _strstr_loop				; equal chars but not at end
0073++ 0449             _strstr_ret:
0074++ 0449 F0          	pop di
0075++ 044A E7          	pop d
0076++ 044B E8          	pop al
0077++ 044C 09          	ret
0078++ 044D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 044D             ; length of null terminated string
0080++ 044D             ; result in c
0081++ 044D             ; pointer in d
0082++ 044D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 044D             _strlen:
0084++ 044D DA          	push d
0085++ 044E 38 00 00    	mov c, 0
0086++ 0451             _strlen_l1:
0087++ 0451 BD 00       	cmp byte [d], 0
0088++ 0453 C6 5B 04    	je _strlen_ret
0089++ 0456 79          	inc d
0090++ 0457 78          	inc c
0091++ 0458 0A 51 04    	jmp _strlen_l1
0092++ 045B             _strlen_ret:
0093++ 045B E7          	pop d
0094++ 045C 09          	ret
0095++ 045D             
0096++ 045D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 045D             ; strcmp
0098++ 045D             ; compare two strings
0099++ 045D             ; str1 in si
0100++ 045D             ; str2 in di
0101++ 045D             ; create a string compairon instrucion ?????
0102++ 045D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 045D             _strcmp:
0104++ 045D DB          	push al
0105++ 045E DA          	push d
0106++ 045F E3          	push di
0107++ 0460 E2          	push si
0108++ 0461             _strcmp_loop:
0109++ 0461 F3          	cmpsb					; compare a byte of the strings
0110++ 0462 C7 6D 04    	jne _strcmp_ret
0111++ 0465 FB FF FF    	lea d, [si +- 1]
0112++ 0468 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 046A C7 61 04    	jne _strcmp_loop				; equal chars but not at end
0114++ 046D             _strcmp_ret:
0115++ 046D EF          	pop si
0116++ 046E F0          	pop di
0117++ 046F E7          	pop d
0118++ 0470 E8          	pop al
0119++ 0471 09          	ret
0120++ 0472             
0121++ 0472             
0122++ 0472             ; strcpy
0123++ 0472             ; copy null terminated string from si to di
0124++ 0472             ; source in si
0125++ 0472             ; destination in di
0126++ 0472             _strcpy:
0127++ 0472 E2          	push si
0128++ 0473 E3          	push di
0129++ 0474 DB          	push al
0130++ 0475             _strcpy_l1:
0131++ 0475 F6          	lodsb
0132++ 0476 F7          	stosb
0133++ 0477 B9 00       	cmp al, 0
0134++ 0479 C7 75 04    	jne _strcpy_l1
0135++ 047C             _strcpy_end:
0136++ 047C E8          	pop al
0137++ 047D F0          	pop di
0138++ 047E EF          	pop si
0139++ 047F 09          	ret
0140++ 0480             
0141++ 0480             ; strcat
0142++ 0480             ; concatenate a null terminated string into string at di, from string at si
0143++ 0480             ; source in si
0144++ 0480             ; destination in di
0145++ 0480             _strcat:
0146++ 0480 E2          	push si
0147++ 0481 E3          	push di
0148++ 0482 D7          	push a
0149++ 0483 DA          	push d
0150++ 0484 50          	mov a, di
0151++ 0485 3C          	mov d, a
0152++ 0486             _strcat_goto_end_l1:
0153++ 0486 BD 00       	cmp byte[d], 0
0154++ 0488 C6 8F 04    	je _strcat_start
0155++ 048B 79          	inc d
0156++ 048C 0A 86 04    	jmp _strcat_goto_end_l1
0157++ 048F             _strcat_start:
0158++ 048F FD 50       	mov di, d
0159++ 0491             _strcat_l1:
0160++ 0491 F6          	lodsb
0161++ 0492 F7          	stosb
0162++ 0493 B9 00       	cmp al, 0
0163++ 0495 C7 91 04    	jne _strcat_l1
0164++ 0498             _strcat_end:
0165++ 0498 E7          	pop d
0166++ 0499 E4          	pop a
0167++ 049A F0          	pop di
0168++ 049B EF          	pop si
0169++ 049C 09          	ret
0170++ 049D             
0171++ 049D             
0005+  049D             
0006+  049D             
0007+  049D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  049D             ; convert ascii 'o'..'f' to integer 0..15
0009+  049D             ; ascii in bl
0010+  049D             ; result in al
0011+  049D             ; ascii for f = 0100 0110
0012+  049D             ; ascii for 9 = 0011 1001
0013+  049D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  049D             hex_ascii_encode:
0015+  049D 1B            mov al, bl
0016+  049E 93 40         test al, $40        ; test if letter or number
0017+  04A0 C7 A6 04      jnz hex_letter
0018+  04A3 87 0F         and al, $0f        ; get number
0019+  04A5 09            ret
0020+  04A6             hex_letter:
0021+  04A6 87 0F         and al, $0f        ; get letter
0022+  04A8 6A 09         add al, 9
0023+  04AA 09            ret
0024+  04AB             
0025+  04AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  04AB             ; atoi
0027+  04AB             ; 2 letter hex string in b
0028+  04AB             ; 8bit integer returned in al
0029+  04AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  04AB             _atoi:
0031+  04AB D8            push b
0032+  04AC 07 9D 04      call hex_ascii_encode      ; convert bl to 4bit code in al
0033+  04AF 30            mov bl, bh
0034+  04B0 DB            push al          ; save a
0035+  04B1 07 9D 04      call hex_ascii_encode
0036+  04B4 EA            pop bl  
0037+  04B5 FD 9E 04      shl al, 4
0038+  04B8 8C            or al, bl
0039+  04B9 E5            pop b
0040+  04BA 09            ret  
0041+  04BB             
0042+  04BB             
0043+  04BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  04BB             ; scanf
0045+  04BB             ; no need for explanations!
0046+  04BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  04BB             scanf:
0048+  04BB 09            ret
0049+  04BC             
0050+  04BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  04BC             ; itoa
0052+  04BC             ; 8bit value in bl
0053+  04BC             ; 2 byte ascii result in a
0054+  04BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  04BC             _itoa:
0056+  04BC DA            push d
0057+  04BD D8            push b
0058+  04BE A7 00         mov bh, 0
0059+  04C0 FD A4 04      shr bl, 4  
0060+  04C3 74            mov d, b
0061+  04C4 1F 56 07      mov al, [d + s_hex_digits]
0062+  04C7 23            mov ah, al
0063+  04C8               
0064+  04C8 E5            pop b
0065+  04C9 D8            push b
0066+  04CA A7 00         mov bh, 0
0067+  04CC FD 87 0F      and bl, $0f
0068+  04CF 74            mov d, b
0069+  04D0 1F 56 07      mov al, [d + s_hex_digits]
0070+  04D3 E5            pop b
0071+  04D4 E7            pop d
0072+  04D5 09            ret
0073+  04D6             
0074+  04D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  04D6             ; hex string to binary
0076+  04D6             ; di = destination address
0077+  04D6             ; si = source
0078+  04D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  04D6             _hex_to_int:
0080+  04D6             _hex_to_int_l1:
0081+  04D6 F6            lodsb          ; load from [si] to al
0082+  04D7 B9 00         cmp al, 0        ; check if ascii 0
0083+  04D9 C6 E6 04      jz _hex_to_int_ret
0084+  04DC 36            mov bh, al
0085+  04DD F6            lodsb
0086+  04DE 2F            mov bl, al
0087+  04DF 07 AB 04      call _atoi        ; convert ascii byte in b to int (to al)
0088+  04E2 F7            stosb          ; store al to [di]
0089+  04E3 0A D6 04      jmp _hex_to_int_l1
0090+  04E6             _hex_to_int_ret:
0091+  04E6 09            ret    
0092+  04E7             
0093+  04E7             
0094+  04E7             
0095+  04E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  04E7             ; getchar
0097+  04E7             ; char in ah
0098+  04E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  04E7             getch:
0100+  04E7 DB            push al
0101+  04E8             getch_retry:
0102+  04E8 19 01         mov al, 1
0103+  04EA 05 03         syscall sys_io      ; receive in ah
0104+  04EC E8            pop al
0105+  04ED 09            ret
0106+  04EE             
0107+  04EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  04EE             ; putchar
0109+  04EE             ; char in ah
0110+  04EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  04EE             _putchar:
0112+  04EE DB            push al
0113+  04EF 19 00         mov al, 0
0114+  04F1 05 03         syscall sys_io      ; char in ah
0115+  04F3 E8            pop al
0116+  04F4 09            ret
0117+  04F5             
0118+  04F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  04F5             ;; input a string
0120+  04F5             ;; terminates with null
0121+  04F5             ;; pointer in d
0122+  04F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  04F5             _gets:
0124+  04F5 D7            push a
0125+  04F6 DA            push d
0126+  04F7             _gets_loop:
0127+  04F7 19 01         mov al, 1
0128+  04F9 05 03         syscall sys_io      ; receive in ah
0129+  04FB 76 1B         cmp ah, 27
0130+  04FD C6 1E 05      je _gets_ansi_esc
0131+  0500 76 0A         cmp ah, $0a        ; lf
0132+  0502 C6 7A 05      je _gets_end
0133+  0505 76 0D         cmp ah, $0d        ; cr
0134+  0507 C6 7A 05      je _gets_end
0135+  050A 76 5C         cmp ah, $5c        ; '\\'
0136+  050C C6 40 05      je _gets_escape
0137+  050F 76 08         cmp ah, $08      ; check for backspace
0138+  0511 C6 1A 05      je _gets_backspace
0139+  0514 1A            mov al, ah
0140+  0515 3E            mov [d], al
0141+  0516 79            inc d
0142+  0517 0A F7 04      jmp _gets_loop
0143+  051A             _gets_backspace:
0144+  051A 7F            dec d
0145+  051B 0A F7 04      jmp _gets_loop
0146+  051E             _gets_ansi_esc:
0147+  051E 19 01         mov al, 1
0148+  0520 05 03         syscall sys_io        ; receive in ah without echo
0149+  0522 76 5B         cmp ah, '['
0150+  0524 C7 F7 04      jne _gets_loop
0151+  0527 19 01         mov al, 1
0152+  0529 05 03         syscall sys_io          ; receive in ah without echo
0153+  052B 76 64         cmp ah, 'd'
0154+  052D C6 38 05      je _gets_left_arrow
0155+  0530 76 63         cmp ah, 'c'
0156+  0532 C6 3C 05      je _gets_right_arrow
0157+  0535 0A F7 04      jmp _gets_loop
0158+  0538             _gets_left_arrow:
0159+  0538 7F            dec d
0160+  0539 0A F7 04      jmp _gets_loop
0161+  053C             _gets_right_arrow:
0162+  053C 79            inc d
0163+  053D 0A F7 04      jmp _gets_loop
0164+  0540             _gets_escape:
0165+  0540 19 01         mov al, 1
0166+  0542 05 03         syscall sys_io      ; receive in ah
0167+  0544 76 6E         cmp ah, 'n'
0168+  0546 C6 65 05      je _gets_lf
0169+  0549 76 72         cmp ah, 'r'
0170+  054B C6 6C 05      je _gets_cr
0171+  054E 76 30         cmp ah, '0'
0172+  0550 C6 73 05      je _gets_null
0173+  0553 76 5C         cmp ah, $5c  ; '\'
0174+  0555 C6 5E 05      je _gets_slash
0175+  0558 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  0559 3E            mov [d], al
0177+  055A 79            inc d
0178+  055B 0A F7 04      jmp _gets_loop
0179+  055E             _gets_slash:
0180+  055E 19 5C         mov al, $5c
0181+  0560 3E            mov [d], al
0182+  0561 79            inc d
0183+  0562 0A F7 04      jmp _gets_loop
0184+  0565             _gets_lf:
0185+  0565 19 0A         mov al, $0a
0186+  0567 3E            mov [d], al
0187+  0568 79            inc d
0188+  0569 0A F7 04      jmp _gets_loop
0189+  056C             _gets_cr:
0190+  056C 19 0D         mov al, $0d
0191+  056E 3E            mov [d], al
0192+  056F 79            inc d
0193+  0570 0A F7 04      jmp _gets_loop
0194+  0573             _gets_null:
0195+  0573 19 00         mov al, $00
0196+  0575 3E            mov [d], al
0197+  0576 79            inc d
0198+  0577 0A F7 04      jmp _gets_loop
0199+  057A             _gets_end:
0200+  057A 19 00         mov al, 0
0201+  057C 3E            mov [d], al        ; terminate string
0202+  057D E7            pop d
0203+  057E E4            pop a
0204+  057F 09            ret
0205+  0580             
0206+  0580             
0207+  0580             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  0580             ;; input text
0209+  0580             ;; terminated with ctrl+d
0210+  0580             ;; pointer in d
0211+  0580             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  0580             _gettxt:
0213+  0580 D7            push a
0214+  0581 DA            push d
0215+  0582             _gettxt_loop:
0216+  0582 19 01         mov al, 1
0217+  0584 05 03         syscall sys_io      ; receive in ah
0218+  0586 76 04         cmp ah, 4      ; eot
0219+  0588 C6 C1 05      je _gettxt_end
0220+  058B 76 08         cmp ah, $08      ; check for backspace
0221+  058D C6 BD 05      je _gettxt_backspace
0222+  0590 76 5C         cmp ah, $5c        ; '\'
0223+  0592 C6 9B 05      je _gettxt_escape
0224+  0595 1A            mov al, ah
0225+  0596 3E            mov [d], al
0226+  0597 79            inc d
0227+  0598 0A 82 05      jmp _gettxt_loop
0228+  059B             _gettxt_escape:
0229+  059B 19 01         mov al, 1
0230+  059D 05 03         syscall sys_io      ; receive in ah
0231+  059F 76 6E         cmp ah, 'n'
0232+  05A1 C6 AF 05      je _gettxt_lf
0233+  05A4 76 72         cmp ah, 'r'
0234+  05A6 C6 B6 05      je _gettxt_cr
0235+  05A9 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  05AA 3E            mov [d], al
0237+  05AB 79            inc d
0238+  05AC 0A 82 05      jmp _gettxt_loop
0239+  05AF             _gettxt_lf:
0240+  05AF 19 0A         mov al, $0a
0241+  05B1 3E            mov [d], al
0242+  05B2 79            inc d
0243+  05B3 0A 82 05      jmp _gettxt_loop
0244+  05B6             _gettxt_cr:
0245+  05B6 19 0D         mov al, $0d
0246+  05B8 3E            mov [d], al
0247+  05B9 79            inc d
0248+  05BA 0A 82 05      jmp _gettxt_loop
0249+  05BD             _gettxt_backspace:
0250+  05BD 7F            dec d
0251+  05BE 0A 82 05      jmp _gettxt_loop
0252+  05C1             _gettxt_end:
0253+  05C1 19 00         mov al, 0
0254+  05C3 3E            mov [d], al        ; terminate string
0255+  05C4 E7            pop d
0256+  05C5 E4            pop a
0257+  05C6 09            ret
0258+  05C7             
0259+  05C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  05C7             ; print new line
0261+  05C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  05C7             printnl:
0263+  05C7 D7            push a
0264+  05C8 10 00 0A      mov a, $0a00
0265+  05CB 05 03         syscall sys_io
0266+  05CD 10 00 0D      mov a, $0d00
0267+  05D0 05 03         syscall sys_io
0268+  05D2 E4            pop a
0269+  05D3 09            ret
0270+  05D4             
0271+  05D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  05D4             ; _strtoint
0273+  05D4             ; 4 digit hex string number in d
0274+  05D4             ; integer returned in a
0275+  05D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  05D4             _strtointx:
0277+  05D4 D8            push b
0278+  05D5 32            mov bl, [d]
0279+  05D6 37            mov bh, bl
0280+  05D7 33 01 00      mov bl, [d + 1]
0281+  05DA 07 AB 04      call _atoi        ; convert to int in al
0282+  05DD 23            mov ah, al        ; move to ah
0283+  05DE 33 02 00      mov bl, [d + 2]
0284+  05E1 37            mov bh, bl
0285+  05E2 33 03 00      mov bl, [d + 3]
0286+  05E5 07 AB 04      call _atoi        ; convert to int in al
0287+  05E8 E5            pop b
0288+  05E9 09            ret
0289+  05EA             
0290+  05EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  05EA             ; _strtoint
0292+  05EA             ; 5 digit base10 string number in d
0293+  05EA             ; integer returned in a
0294+  05EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  05EA             _strtoint:
0296+  05EA E2            push si
0297+  05EB D8            push b
0298+  05EC D9            push c
0299+  05ED DA            push d
0300+  05EE 07 4D 04      call _strlen      ; get string length in c
0301+  05F1 7E            dec c
0302+  05F2 FD 4E         mov si, d
0303+  05F4 12            mov a, c
0304+  05F5 FD 99         shl a
0305+  05F7 3B 6E 07      mov d, table_power
0306+  05FA 59            add d, a
0307+  05FB 38 00 00      mov c, 0
0308+  05FE             _strtoint_l0:
0309+  05FE F6            lodsb      ; load ascii to al
0310+  05FF B9 00         cmp al, 0
0311+  0601 C6 14 06      je _strtoint_end
0312+  0604 6F 30         sub al, $30    ; make into integer
0313+  0606 22 00         mov ah, 0
0314+  0608 2A            mov b, [d]
0315+  0609 AC            mul a, b      ; result in b since it fits in 16bits
0316+  060A 11            mov a, b
0317+  060B 28            mov b, c
0318+  060C 54            add a, b
0319+  060D 39            mov c, a
0320+  060E 63 02 00      sub d, 2
0321+  0611 0A FE 05      jmp _strtoint_l0
0322+  0614             _strtoint_end:
0323+  0614 12            mov a, c
0324+  0615 E7            pop d
0325+  0616 E6            pop c
0326+  0617 E5            pop b
0327+  0618 EF            pop si
0328+  0619 09            ret
0329+  061A             
0330+  061A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  061A             ; print null terminated string
0332+  061A             ; pointer in d
0333+  061A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  061A             _puts:
0335+  061A D7            push a
0336+  061B DA            push d
0337+  061C             _puts_l1:
0338+  061C 1E            mov al, [d]
0339+  061D B9 00         cmp al, 0
0340+  061F C6 2B 06      jz _puts_end
0341+  0622 23            mov ah, al
0342+  0623 19 00         mov al, 0
0343+  0625 05 03         syscall sys_io
0344+  0627 79            inc d
0345+  0628 0A 1C 06      jmp _puts_l1
0346+  062B             _puts_end:
0347+  062B E7            pop d
0348+  062C E4            pop a
0349+  062D 09            ret
0350+  062E             
0351+  062E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  062E             ; print n size string
0353+  062E             ; pointer in d
0354+  062E             ; size in c
0355+  062E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  062E             _putsn:
0357+  062E DB            push al
0358+  062F DA            push d
0359+  0630 D9            push c
0360+  0631             _putsn_l0:
0361+  0631 1E            mov al, [d]
0362+  0632 23            mov ah, al
0363+  0633 19 00         mov al, 0
0364+  0635 05 03         syscall sys_io
0365+  0637 79            inc d
0366+  0638 7E            dec c  
0367+  0639 C2 00 00      cmp c, 0
0368+  063C C7 31 06      jne _putsn_l0
0369+  063F             _putsn_end:
0370+  063F E6            pop c
0371+  0640 E7            pop d
0372+  0641 E8            pop al
0373+  0642 09            ret
0374+  0643             
0375+  0643             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  0643             ; print 16bit decimal number
0377+  0643             ; input number in a
0378+  0643             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0643             print_u16d:
0380+  0643 D7            push a
0381+  0644 D8            push b
0382+  0645 FD D8         push g
0383+  0647 26 10 27      mov b, 10000
0384+  064A AE            div a, b      ; get 10000's coeff.
0385+  064B 07 6F 06      call print_number
0386+  064E 11            mov a, b
0387+  064F 26 E8 03      mov b, 1000
0388+  0652 AE            div a, b      ; get 1000's coeff.
0389+  0653 07 6F 06      call print_number
0390+  0656 11            mov a, b
0391+  0657 26 64 00      mov b, 100
0392+  065A AE            div a, b
0393+  065B 07 6F 06      call print_number
0394+  065E 11            mov a, b
0395+  065F 26 0A 00      mov b, 10
0396+  0662 AE            div a, b
0397+  0663 07 6F 06      call print_number
0398+  0666 1B            mov al, bl      ; 1's coeff in bl
0399+  0667 07 6F 06      call print_number
0400+  066A FD F1         pop g
0401+  066C E5            pop b
0402+  066D E4            pop a
0403+  066E 09            ret
0404+  066F             
0405+  066F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  066F             ; print al
0407+  066F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  066F             print_number:
0409+  066F 6A 30         add al, $30
0410+  0671 23            mov ah, al
0411+  0672 07 EE 04      call _putchar
0412+  0675 09            ret
0413+  0676             
0414+  0676             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  0676             ; print 16bit hex integer
0416+  0676             ; integer value in reg b
0417+  0676             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  0676             print_u16x:
0419+  0676 D7            push a
0420+  0677 D8            push b
0421+  0678 DD            push bl
0422+  0679 30            mov bl, bh
0423+  067A 07 BC 04      call _itoa        ; convert bh to char in a
0424+  067D 2F            mov bl, al        ; save al
0425+  067E 19 00         mov al, 0
0426+  0680 05 03         syscall sys_io        ; display ah
0427+  0682 24            mov ah, bl        ; retrieve al
0428+  0683 19 00         mov al, 0
0429+  0685 05 03         syscall sys_io        ; display al
0430+  0687             
0431+  0687 EA            pop bl
0432+  0688 07 BC 04      call _itoa        ; convert bh to char in a
0433+  068B 2F            mov bl, al        ; save al
0434+  068C 19 00         mov al, 0
0435+  068E 05 03         syscall sys_io        ; display ah
0436+  0690 24            mov ah, bl        ; retrieve al
0437+  0691 19 00         mov al, 0
0438+  0693 05 03         syscall sys_io        ; display al
0439+  0695             
0440+  0695 E5            pop b
0441+  0696 E4            pop a
0442+  0697 09            ret
0443+  0698             
0444+  0698             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  0698             ; input 16bit hex integer
0446+  0698             ; read 16bit integer into a
0447+  0698             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  0698             scan_u16x:
0449+  0698 F8 10 00      enter 16
0450+  069B D8            push b
0451+  069C DA            push d
0452+  069D             
0453+  069D FA F1 FF      lea d, [bp + -15]
0454+  06A0 07 F5 04      call _gets        ; get number
0455+  06A3             
0456+  06A3 32            mov bl, [d]
0457+  06A4 37            mov bh, bl
0458+  06A5 33 01 00      mov bl, [d + 1]
0459+  06A8 07 AB 04      call _atoi        ; convert to int in al
0460+  06AB 23            mov ah, al        ; move to ah
0461+  06AC             
0462+  06AC 33 02 00      mov bl, [d + 2]
0463+  06AF 37            mov bh, bl
0464+  06B0 33 03 00      mov bl, [d + 3]
0465+  06B3 07 AB 04      call _atoi        ; convert to int in al
0466+  06B6             
0467+  06B6 E7            pop d
0468+  06B7 E5            pop b
0469+  06B8 F9            leave
0470+  06B9 09            ret
0471+  06BA             
0472+  06BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  06BA             ; print 8bit hex integer
0474+  06BA             ; integer value in reg bl
0475+  06BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  06BA             print_u8x:
0477+  06BA D7            push a
0478+  06BB DD            push bl
0479+  06BC             
0480+  06BC 07 BC 04      call _itoa        ; convert bl to char in a
0481+  06BF 2F            mov bl, al        ; save al
0482+  06C0 19 00         mov al, 0
0483+  06C2 05 03         syscall sys_io        ; display ah
0484+  06C4 24            mov ah, bl        ; retrieve al
0485+  06C5 19 00         mov al, 0
0486+  06C7 05 03         syscall sys_io        ; display al
0487+  06C9             
0488+  06C9 EA            pop bl
0489+  06CA E4            pop a
0490+  06CB 09            ret
0491+  06CC             
0492+  06CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  06CC             ; print 8bit decimal unsigned number
0494+  06CC             ; input number in al
0495+  06CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  06CC             print_u8d:
0497+  06CC D7            push a
0498+  06CD D8            push b
0499+  06CE FD D8         push g
0500+  06D0 22 00         mov ah, 0
0501+  06D2 26 64 00      mov b, 100
0502+  06D5 AE            div a, b
0503+  06D6 D8            push b      ; save remainder
0504+  06D7 B9 00         cmp al, 0
0505+  06D9 C6 E3 06      je skip100
0506+  06DC 6A 30         add al, $30
0507+  06DE 23            mov ah, al
0508+  06DF 19 00         mov al, 0
0509+  06E1 05 03         syscall sys_io  ; print coeff
0510+  06E3             skip100:
0511+  06E3 E4            pop a
0512+  06E4 22 00         mov ah, 0
0513+  06E6 26 0A 00      mov b, 10
0514+  06E9 AE            div a, b
0515+  06EA D8            push b      ; save remainder
0516+  06EB B9 00         cmp al, 0
0517+  06ED C6 F7 06      je skip10
0518+  06F0 6A 30         add al, $30
0519+  06F2 23            mov ah, al
0520+  06F3 19 00         mov al, 0
0521+  06F5 05 03         syscall sys_io  ; print coeff
0522+  06F7             skip10:
0523+  06F7 E4            pop a
0524+  06F8 1B            mov al, bl
0525+  06F9 6A 30         add al, $30
0526+  06FB 23            mov ah, al
0527+  06FC 19 00         mov al, 0
0528+  06FE 05 03         syscall sys_io  ; print coeff
0529+  0700 FD F1         pop g
0530+  0702 E5            pop b
0531+  0703 E4            pop a
0532+  0704 09            ret
0533+  0705             
0534+  0705             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  0705             ; input 8bit hex integer
0536+  0705             ; read 8bit integer into al
0537+  0705             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  0705             scan_u8x:
0539+  0705 F8 04 00      enter 4
0540+  0708 D8            push b
0541+  0709 DA            push d
0542+  070A             
0543+  070A FA FD FF      lea d, [bp + -3]
0544+  070D 07 F5 04      call _gets        ; get number
0545+  0710             
0546+  0710 32            mov bl, [d]
0547+  0711 37            mov bh, bl
0548+  0712 33 01 00      mov bl, [d + 1]
0549+  0715 07 AB 04      call _atoi        ; convert to int in al
0550+  0718             
0551+  0718 E7            pop d
0552+  0719 E5            pop b
0553+  071A F9            leave
0554+  071B 09            ret
0555+  071C             
0556+  071C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  071C             ; input decimal number
0558+  071C             ; result in a
0559+  071C             ; 655'\0'
0560+  071C             ; low--------high
0561+  071C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  071C             scan_u16d:
0563+  071C F8 08 00      enter 8
0564+  071F E2            push si
0565+  0720 D8            push b
0566+  0721 D9            push c
0567+  0722 DA            push d
0568+  0723 FA F9 FF      lea d, [bp +- 7]
0569+  0726 07 F5 04      call _gets
0570+  0729 07 4D 04      call _strlen      ; get string length in c
0571+  072C 7E            dec c
0572+  072D FD 4E         mov si, d
0573+  072F 12            mov a, c
0574+  0730 FD 99         shl a
0575+  0732 3B 6E 07      mov d, table_power
0576+  0735 59            add d, a
0577+  0736 38 00 00      mov c, 0
0578+  0739             mul_loop:
0579+  0739 F6            lodsb      ; load ascii to al
0580+  073A B9 00         cmp al, 0
0581+  073C C6 4F 07      je mul_exit
0582+  073F 6F 30         sub al, $30    ; make into integer
0583+  0741 22 00         mov ah, 0
0584+  0743 2A            mov b, [d]
0585+  0744 AC            mul a, b      ; result in b since it fits in 16bits
0586+  0745 11            mov a, b
0587+  0746 28            mov b, c
0588+  0747 54            add a, b
0589+  0748 39            mov c, a
0590+  0749 63 02 00      sub d, 2
0591+  074C 0A 39 07      jmp mul_loop
0592+  074F             mul_exit:
0593+  074F 12            mov a, c
0594+  0750 E7            pop d
0595+  0751 E6            pop c
0596+  0752 E5            pop b
0597+  0753 EF            pop si
0598+  0754 F9            leave
0599+  0755 09            ret
0600+  0756             
0601+  0756             
0602+  0756 30 31 32 33 s_hex_digits:    .db "0123456789abcdef"  
0602+  075A 34 35 36 37 
0602+  075E 38 39 61 62 
0602+  0762 63 64 65 66 
0603+  0766 1B 5B 32 6A s_telnet_clear:  .db "\033[2j\033[h", 0
0603+  076A 1B 5B 68 00 
0604+  076E             
0605+  076E             table_power:
0606+  076E 01 00         .dw 1
0607+  0770 0A 00         .dw 10
0608+  0772 64 00         .dw 100
0609+  0774 E8 03         .dw 1000
0610+  0776 10 27         .dw 100000016   0778             .include "lib/ctype.asm"
0001+  0778             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0778             ; ctype.s
0003+  0778             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0778             
0005+  0778             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0778             ;; c character classification is an operation provided by a group of functions in the ansi c standard library
0007+  0778             ;; for the c programming language. these functions are used to test characters for membership in a particular
0008+  0778             ;; class of characters, such as alphabetic characters, control characters, etc. both single-byte, and wide
0009+  0778             ;; characters are supported.
0010+  0778             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0778             ;; _isalnum 
0012+  0778             ;; _isalpha 
0013+  0778             ;; islower 
0014+  0778             ;; isupper 
0015+  0778             ;; _isdigit 
0016+  0778             ;; isxdigit
0017+  0778             ;; iscntrl 
0018+  0778             ;; isgraph 
0019+  0778             ;; _isspace 
0020+  0778             ;; isblank 
0021+  0778             ;; isprint 
0022+  0778             ;; ispunct 
0023+  0778             ;; tolower 
0024+  0778             ;; toupper
0025+  0778             
0026+  0778             
0027+  0778             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0778             ;; is alphanumeric
0029+  0778             ;; sets zf according with result
0030+  0778             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0778             _isalnum:
0032+  0778 07 95 07    	call _isalpha
0033+  077B C6 81 07    	je _isalnum_exit
0034+  077E 07 82 07    	call _isdigit
0035+  0781             _isalnum_exit:
0036+  0781 09          	ret	
0037+  0782             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0782             ;; is digit
0039+  0782             ;; sets zf according with result
0040+  0782             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0782             _isdigit:
0042+  0782 DB          	push al
0043+  0783 B9 30       	cmp al, '0'
0044+  0785 C8 91 07    	jlu _isdigit_false
0045+  0788 B9 39       	cmp al, '9'
0046+  078A D1 91 07    	jgu _isdigit_false
0047+  078D 87 00       	and al, 0	; set zf
0048+  078F E8          	pop al
0049+  0790 09          	ret
0050+  0791             _isdigit_false:
0051+  0791 8B 01       	or al, 1	; clear zf
0052+  0793 E8          	pop al
0053+  0794 09          	ret	
0054+  0795             	
0055+  0795             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0795             ;; is alpha
0057+  0795             ;; sets zf according with result
0058+  0795             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0795             _isalpha:
0060+  0795 DB          	push al
0061+  0796 B9 5F       	cmp al, '_'
0062+  0798 C6 B8 07    	je _isalpha_true
0063+  079B B9 2E       	cmp al, '.'
0064+  079D C6 B8 07    	je _isalpha_true
0065+  07A0 B9 61       	cmp al, 'a'
0066+  07A2 C8 B4 07    	jlu _isalpha_false
0067+  07A5 B9 7A       	cmp al, 'z'
0068+  07A7 D1 B4 07    	jgu _isalpha_false
0069+  07AA B9 7A       	cmp al, 'z'
0070+  07AC D0 B8 07    	jleu _isalpha_true
0071+  07AF B9 61       	cmp al, 'a'
0072+  07B1 C9 B8 07    	jgeu _isalpha_true
0073+  07B4             _isalpha_false:
0074+  07B4 8B 01       	or al, 1	; clear zf
0075+  07B6 E8          	pop al
0076+  07B7 09          	ret
0077+  07B8             _isalpha_true:
0078+  07B8 87 00       	and al, 0	; set zf
0079+  07BA E8          	pop al
0080+  07BB 09          	ret
0081+  07BC             
0082+  07BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  07BC             ;; is path-alpha
0084+  07BC             ;; sets zf according with result
0085+  07BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  07BC             ispath:
0087+  07BC DB          	push al
0088+  07BD 07 82 07    	call _isdigit
0089+  07C0 C6 EA 07    	je ispath_true
0090+  07C3 B9 5F       	cmp al, '_'
0091+  07C5 C6 EA 07    	je ispath_true
0092+  07C8 B9 2F       	cmp al, '/'
0093+  07CA C6 EA 07    	je ispath_true
0094+  07CD B9 2E       	cmp al, '.'
0095+  07CF C6 EA 07    	je ispath_true
0096+  07D2 B9 61       	cmp al, 'a'
0097+  07D4 C8 E6 07    	jlu ispath_false
0098+  07D7 B9 7A       	cmp al, 'z'
0099+  07D9 D1 E6 07    	jgu ispath_false
0100+  07DC B9 7A       	cmp al, 'z'
0101+  07DE D0 EA 07    	jleu ispath_true
0102+  07E1 B9 61       	cmp al, 'a'
0103+  07E3 C9 EA 07    	jgeu ispath_true
0104+  07E6             ispath_false:
0105+  07E6 8B 01       	or al, 1	; clear zf
0106+  07E8 E8          	pop al
0107+  07E9 09          	ret
0108+  07EA             ispath_true:
0109+  07EA 87 00       	and al, 0	; set zf
0110+  07EC E8          	pop al
0111+  07ED 09          	ret
0112+  07EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  07EE             ;; is space
0114+  07EE             ;; sets zf according with result
0115+  07EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  07EE             _isspace:
0117+  07EE B9 20       	cmp al, $20		; ' '
0118+  07F0 C6 04 08    	je _isspace_exit
0119+  07F3 B9 09       	cmp al, $09		; '\t'
0120+  07F5 C6 04 08    	je _isspace_exit
0121+  07F8 B9 0A       	cmp al, $0a		; '\n'
0122+  07FA C6 04 08    	je _isspace_exit
0123+  07FD B9 0D       	cmp al, $0d		; '\r'
0124+  07FF C6 04 08    	je _isspace_exit
0125+  0802 B9 0B       	cmp al, $0b		; '\v'
0126+  0804             _isspace_exit:
0127+  0804 09          	ret	
0128+  0805             
0129+  0805             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0805             ; to lower
0131+  0805             ; input in al
0132+  0805             ; output in al
0133+  0805             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0805             _to_lower:
0135+  0805 B9 7A       	cmp al, 'z'
0136+  0807 D1 0C 08    	jgu _to_lower_ret
0137+  080A 6A 20       	add al, $20				; convert to lower case
0138+  080C             _to_lower_ret:
0139+  080C 09          	ret
0140+  080D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  080D             ; to upper
0142+  080D             ; input in al
0143+  080D             ; output in al
0144+  080D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  080D             _to_upper:
0146+  080D B9 61       	cmp al, 'a'
0147+  080F C8 14 08    	jlu _to_upper_ret
0148+  0812 6F 20       	sub al, $20			; convert to upper case
0149+  0814             _to_upper_ret:
0150+  0814 09          	ret
0151+  0815             
0017   0815             
0018   0815             .end
0019   0815             
0020   0815             
0021   0815             
tasm: Number of errors = 0
