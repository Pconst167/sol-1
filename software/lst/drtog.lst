0001   0000             .include "lib/kernel.exp"
0001+  0000             sys_break        .EQU  $0000
0002+  0000             sys_rtc          .EQU  $0001
0003+  0000             sys_ide          .EQU  $0002
0004+  0000             sys_io           .EQU  $0003
0005+  0000             sys_filesystem   .EQU  $0004
0006+  0000             sys_create_proc  .EQU  $0005
0007+  0000             sys_list_proc    .EQU  $0006
0008+  0000             sys_datetime     .EQU  $0007
0009+  0000             sys_reboot       .EQU  $0008
0010+  0000             sys_pause_proc   .EQU  $0009
0011+  0000             sys_resume_proc  .EQU  $000a
0012+  0000             sys_terminate_proc .EQU  $000b
0013+  0000             sys_system       .EQU  $000c
0014+  0000             sys_fdc          .EQU  $000d
0015+  0000             sys_fdc_restore  .EQU  $0000
0016+  0000             sys_fdc_step     .EQU  $0001
0017+  0000             sys_fdc_step_in  .EQU  $0002
0018+  0000             sys_fdc_step_out .EQU  $0003
0019+  0000             sys_fdc_seek     .EQU  $0004
0020+  0000             sys_fdc_format   .EQU  $0005
0021+  0000             sys_fdc_read_addr .EQU  $0006
0022+  0000             sys_fdc_read_track .EQU  $0007
0023+  0000             sys_fdc_read_sect .EQU  $0008
0024+  0000             sys_fdc_write_sect .EQU  $0009
0025+  0000             sys_fdc_force_int .EQU  $000a
0026+  0000             sys_fdc_status0  .EQU  $000b
0027+  0000             sys_fdc_status1  .EQU  $000c
0028+  0000             text_org         .EQU  $0400
0002   0000             
0003   0400             .org text_org			; origin at 1024
0004   0400             
0005   0400             ; Toggle state of register writing flag
0006   0400             drtog:
0007   0400 0C            lodstat
0008   0401 8F 20         xor al, %00100000
0009   0403 0D            stostat
0010   0404 FD A2 05      shr al, 5
0011   0407 87 01         and al, %00000001
0012   0409 07 7A 06      call print_number
0013   040C 07 D2 05      call printnl
0014   040F 05 0B         syscall sys_terminate_proc
0015   0411             
0016   0411             
0017   0411             .include "lib/stdio.asm"
0001+  0411             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0411             ; stdio.s
0003+  0411             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0411             .include "lib/string.asm"
0001++ 0411             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0411             ; string.s
0003++ 0411             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0411             
0005++ 0411             
0006++ 0411             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0411             ; _strrev
0008++ 0411             ; reverse a string
0009++ 0411             ; d = string address
0010++ 0411             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0411             ; 01234
0012++ 0411             _strrev:
0013++ 0411 4B          	pusha
0014++ 0412 07 58 04    	call _strlen	; length in c
0015++ 0415 12          	mov a, c
0016++ 0416 AF 01 00    	cmp a, 1
0017++ 0419 D0 33 04    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 041C 7D          	dec a
0019++ 041D FD 4E       	mov si, d	; beginning of string
0020++ 041F FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0421 59          	add d, a	; end of string
0022++ 0422 12          	mov a, c
0023++ 0423 FD 9B       	shr a		; divide by 2
0024++ 0425 39          	mov c, a	; c now counts the steps
0025++ 0426             _strrev_l0:
0026++ 0426 32          	mov bl, [d]	; save load right-side char into bl
0027++ 0427 F6          	lodsb		; load left-side char into al; increase si
0028++ 0428 3E          	mov [d], al	; store left char into right side
0029++ 0429 1B          	mov al, bl
0030++ 042A F7          	stosb		; store right-side char into left-side; increase di
0031++ 042B 7E          	dec c
0032++ 042C 7F          	dec d
0033++ 042D C2 00 00    	cmp c, 0
0034++ 0430 C7 26 04    	jne _strrev_l0
0035++ 0433             _strrev_end:
0036++ 0433 4C          	popa
0037++ 0434 09          	ret
0038++ 0435             	
0039++ 0435             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0435             ; _strchr
0041++ 0435             ; search string in d for char in al
0042++ 0435             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0435             _strchr:
0044++ 0435             _strchr_l0:
0045++ 0435 32          	mov bl, [d]
0046++ 0436 C1 00       	cmp bl, 0
0047++ 0438 C6 43 04    	je _strchr_end
0048++ 043B BA          	cmp al, bl
0049++ 043C C6 43 04    	je _strchr_end
0050++ 043F 79          	inc d
0051++ 0440 0A 35 04    	jmp _strchr_l0
0052++ 0443             _strchr_end:
0053++ 0443 1B          	mov al, bl
0054++ 0444 09          	ret
0055++ 0445             
0056++ 0445             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0445             ; _strstr
0058++ 0445             ; find sub-string
0059++ 0445             ; str1 in si
0060++ 0445             ; str2 in di
0061++ 0445             ; si points to end of source string
0062++ 0445             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0445             _strstr:
0064++ 0445 DB          	push al
0065++ 0446 DA          	push d
0066++ 0447 E3          	push di
0067++ 0448             _strstr_loop:
0068++ 0448 F3          	cmpsb					; compare a byte of the strings
0069++ 0449 C7 54 04    	jne _strstr_ret
0070++ 044C FC 00 00    	lea d, [di + 0]
0071++ 044F BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0451 C7 48 04    	jne _strstr_loop				; equal chars but not at end
0073++ 0454             _strstr_ret:
0074++ 0454 F0          	pop di
0075++ 0455 E7          	pop d
0076++ 0456 E8          	pop al
0077++ 0457 09          	ret
0078++ 0458             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0458             ; length of null terminated string
0080++ 0458             ; result in c
0081++ 0458             ; pointer in d
0082++ 0458             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0458             _strlen:
0084++ 0458 DA          	push d
0085++ 0459 38 00 00    	mov c, 0
0086++ 045C             _strlen_l1:
0087++ 045C BD 00       	cmp byte [d], 0
0088++ 045E C6 66 04    	je _strlen_ret
0089++ 0461 79          	inc d
0090++ 0462 78          	inc c
0091++ 0463 0A 5C 04    	jmp _strlen_l1
0092++ 0466             _strlen_ret:
0093++ 0466 E7          	pop d
0094++ 0467 09          	ret
0095++ 0468             
0096++ 0468             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0468             ; strcmp
0098++ 0468             ; compare two strings
0099++ 0468             ; str1 in si
0100++ 0468             ; str2 in di
0101++ 0468             ; create a string compairon instrucion ?????
0102++ 0468             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0468             _strcmp:
0104++ 0468 DB          	push al
0105++ 0469 DA          	push d
0106++ 046A E3          	push di
0107++ 046B E2          	push si
0108++ 046C             _strcmp_loop:
0109++ 046C F3          	cmpsb					; compare a byte of the strings
0110++ 046D C7 78 04    	jne _strcmp_ret
0111++ 0470 FB FF FF    	lea d, [si +- 1]
0112++ 0473 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0475 C7 6C 04    	jne _strcmp_loop				; equal chars but not at end
0114++ 0478             _strcmp_ret:
0115++ 0478 EF          	pop si
0116++ 0479 F0          	pop di
0117++ 047A E7          	pop d
0118++ 047B E8          	pop al
0119++ 047C 09          	ret
0120++ 047D             
0121++ 047D             
0122++ 047D             ; strcpy
0123++ 047D             ; copy null terminated string from si to di
0124++ 047D             ; source in si
0125++ 047D             ; destination in di
0126++ 047D             _strcpy:
0127++ 047D E2          	push si
0128++ 047E E3          	push di
0129++ 047F DB          	push al
0130++ 0480             _strcpy_l1:
0131++ 0480 F6          	lodsb
0132++ 0481 F7          	stosb
0133++ 0482 B9 00       	cmp al, 0
0134++ 0484 C7 80 04    	jne _strcpy_l1
0135++ 0487             _strcpy_end:
0136++ 0487 E8          	pop al
0137++ 0488 F0          	pop di
0138++ 0489 EF          	pop si
0139++ 048A 09          	ret
0140++ 048B             
0141++ 048B             ; strcat
0142++ 048B             ; concatenate a null terminated string into string at di, from string at si
0143++ 048B             ; source in si
0144++ 048B             ; destination in di
0145++ 048B             _strcat:
0146++ 048B E2          	push si
0147++ 048C E3          	push di
0148++ 048D D7          	push a
0149++ 048E DA          	push d
0150++ 048F 50          	mov a, di
0151++ 0490 3C          	mov d, a
0152++ 0491             _strcat_goto_end_l1:
0153++ 0491 BD 00       	cmp byte[d], 0
0154++ 0493 C6 9A 04    	je _strcat_start
0155++ 0496 79          	inc d
0156++ 0497 0A 91 04    	jmp _strcat_goto_end_l1
0157++ 049A             _strcat_start:
0158++ 049A FD 50       	mov di, d
0159++ 049C             _strcat_l1:
0160++ 049C F6          	lodsb
0161++ 049D F7          	stosb
0162++ 049E B9 00       	cmp al, 0
0163++ 04A0 C7 9C 04    	jne _strcat_l1
0164++ 04A3             _strcat_end:
0165++ 04A3 E7          	pop d
0166++ 04A4 E4          	pop a
0167++ 04A5 F0          	pop di
0168++ 04A6 EF          	pop si
0169++ 04A7 09          	ret
0170++ 04A8             
0171++ 04A8             
0005+  04A8             
0006+  04A8             
0007+  04A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  04A8             ; convert ascii 'o'..'f' to integer 0..15
0009+  04A8             ; ascii in bl
0010+  04A8             ; result in al
0011+  04A8             ; ascii for f = 0100 0110
0012+  04A8             ; ascii for 9 = 0011 1001
0013+  04A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  04A8             hex_ascii_encode:
0015+  04A8 1B            mov al, bl
0016+  04A9 93 40         test al, $40        ; test if letter or number
0017+  04AB C7 B1 04      jnz hex_letter
0018+  04AE 87 0F         and al, $0f        ; get number
0019+  04B0 09            ret
0020+  04B1             hex_letter:
0021+  04B1 87 0F         and al, $0f        ; get letter
0022+  04B3 6A 09         add al, 9
0023+  04B5 09            ret
0024+  04B6             
0025+  04B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  04B6             ; atoi
0027+  04B6             ; 2 letter hex string in b
0028+  04B6             ; 8bit integer returned in al
0029+  04B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  04B6             _atoi:
0031+  04B6 D8            push b
0032+  04B7 07 A8 04      call hex_ascii_encode      ; convert bl to 4bit code in al
0033+  04BA 30            mov bl, bh
0034+  04BB DB            push al          ; save a
0035+  04BC 07 A8 04      call hex_ascii_encode
0036+  04BF EA            pop bl  
0037+  04C0 FD 9E 04      shl al, 4
0038+  04C3 8C            or al, bl
0039+  04C4 E5            pop b
0040+  04C5 09            ret  
0041+  04C6             
0042+  04C6             
0043+  04C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  04C6             ; scanf
0045+  04C6             ; no need for explanations!
0046+  04C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  04C6             scanf:
0048+  04C6 09            ret
0049+  04C7             
0050+  04C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  04C7             ; itoa
0052+  04C7             ; 8bit value in bl
0053+  04C7             ; 2 byte ascii result in a
0054+  04C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  04C7             _itoa:
0056+  04C7 DA            push d
0057+  04C8 D8            push b
0058+  04C9 A7 00         mov bh, 0
0059+  04CB FD A4 04      shr bl, 4  
0060+  04CE 74            mov d, b
0061+  04CF 1F 61 07      mov al, [d + s_hex_digits]
0062+  04D2 23            mov ah, al
0063+  04D3               
0064+  04D3 E5            pop b
0065+  04D4 D8            push b
0066+  04D5 A7 00         mov bh, 0
0067+  04D7 FD 87 0F      and bl, $0f
0068+  04DA 74            mov d, b
0069+  04DB 1F 61 07      mov al, [d + s_hex_digits]
0070+  04DE E5            pop b
0071+  04DF E7            pop d
0072+  04E0 09            ret
0073+  04E1             
0074+  04E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  04E1             ; hex string to binary
0076+  04E1             ; di = destination address
0077+  04E1             ; si = source
0078+  04E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  04E1             _hex_to_int:
0080+  04E1             _hex_to_int_l1:
0081+  04E1 F6            lodsb          ; load from [si] to al
0082+  04E2 B9 00         cmp al, 0        ; check if ascii 0
0083+  04E4 C6 F1 04      jz _hex_to_int_ret
0084+  04E7 36            mov bh, al
0085+  04E8 F6            lodsb
0086+  04E9 2F            mov bl, al
0087+  04EA 07 B6 04      call _atoi        ; convert ascii byte in b to int (to al)
0088+  04ED F7            stosb          ; store al to [di]
0089+  04EE 0A E1 04      jmp _hex_to_int_l1
0090+  04F1             _hex_to_int_ret:
0091+  04F1 09            ret    
0092+  04F2             
0093+  04F2             
0094+  04F2             
0095+  04F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  04F2             ; getchar
0097+  04F2             ; char in ah
0098+  04F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  04F2             getch:
0100+  04F2 DB            push al
0101+  04F3             getch_retry:
0102+  04F3 19 01         mov al, 1
0103+  04F5 05 03         syscall sys_io      ; receive in ah
0104+  04F7 E8            pop al
0105+  04F8 09            ret
0106+  04F9             
0107+  04F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  04F9             ; putchar
0109+  04F9             ; char in ah
0110+  04F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  04F9             _putchar:
0112+  04F9 DB            push al
0113+  04FA 19 00         mov al, 0
0114+  04FC 05 03         syscall sys_io      ; char in ah
0115+  04FE E8            pop al
0116+  04FF 09            ret
0117+  0500             
0118+  0500             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  0500             ;; input a string
0120+  0500             ;; terminates with null
0121+  0500             ;; pointer in d
0122+  0500             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  0500             _gets:
0124+  0500 D7            push a
0125+  0501 DA            push d
0126+  0502             _gets_loop:
0127+  0502 19 01         mov al, 1
0128+  0504 05 03         syscall sys_io      ; receive in ah
0129+  0506 76 1B         cmp ah, 27
0130+  0508 C6 29 05      je _gets_ansi_esc
0131+  050B 76 0A         cmp ah, $0a        ; lf
0132+  050D C6 85 05      je _gets_end
0133+  0510 76 0D         cmp ah, $0d        ; cr
0134+  0512 C6 85 05      je _gets_end
0135+  0515 76 5C         cmp ah, $5c        ; '\\'
0136+  0517 C6 4B 05      je _gets_escape
0137+  051A 76 08         cmp ah, $08      ; check for backspace
0138+  051C C6 25 05      je _gets_backspace
0139+  051F 1A            mov al, ah
0140+  0520 3E            mov [d], al
0141+  0521 79            inc d
0142+  0522 0A 02 05      jmp _gets_loop
0143+  0525             _gets_backspace:
0144+  0525 7F            dec d
0145+  0526 0A 02 05      jmp _gets_loop
0146+  0529             _gets_ansi_esc:
0147+  0529 19 01         mov al, 1
0148+  052B 05 03         syscall sys_io        ; receive in ah without echo
0149+  052D 76 5B         cmp ah, '['
0150+  052F C7 02 05      jne _gets_loop
0151+  0532 19 01         mov al, 1
0152+  0534 05 03         syscall sys_io          ; receive in ah without echo
0153+  0536 76 64         cmp ah, 'd'
0154+  0538 C6 43 05      je _gets_left_arrow
0155+  053B 76 63         cmp ah, 'c'
0156+  053D C6 47 05      je _gets_right_arrow
0157+  0540 0A 02 05      jmp _gets_loop
0158+  0543             _gets_left_arrow:
0159+  0543 7F            dec d
0160+  0544 0A 02 05      jmp _gets_loop
0161+  0547             _gets_right_arrow:
0162+  0547 79            inc d
0163+  0548 0A 02 05      jmp _gets_loop
0164+  054B             _gets_escape:
0165+  054B 19 01         mov al, 1
0166+  054D 05 03         syscall sys_io      ; receive in ah
0167+  054F 76 6E         cmp ah, 'n'
0168+  0551 C6 70 05      je _gets_lf
0169+  0554 76 72         cmp ah, 'r'
0170+  0556 C6 77 05      je _gets_cr
0171+  0559 76 30         cmp ah, '0'
0172+  055B C6 7E 05      je _gets_null
0173+  055E 76 5C         cmp ah, $5c  ; '\'
0174+  0560 C6 69 05      je _gets_slash
0175+  0563 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  0564 3E            mov [d], al
0177+  0565 79            inc d
0178+  0566 0A 02 05      jmp _gets_loop
0179+  0569             _gets_slash:
0180+  0569 19 5C         mov al, $5c
0181+  056B 3E            mov [d], al
0182+  056C 79            inc d
0183+  056D 0A 02 05      jmp _gets_loop
0184+  0570             _gets_lf:
0185+  0570 19 0A         mov al, $0a
0186+  0572 3E            mov [d], al
0187+  0573 79            inc d
0188+  0574 0A 02 05      jmp _gets_loop
0189+  0577             _gets_cr:
0190+  0577 19 0D         mov al, $0d
0191+  0579 3E            mov [d], al
0192+  057A 79            inc d
0193+  057B 0A 02 05      jmp _gets_loop
0194+  057E             _gets_null:
0195+  057E 19 00         mov al, $00
0196+  0580 3E            mov [d], al
0197+  0581 79            inc d
0198+  0582 0A 02 05      jmp _gets_loop
0199+  0585             _gets_end:
0200+  0585 19 00         mov al, 0
0201+  0587 3E            mov [d], al        ; terminate string
0202+  0588 E7            pop d
0203+  0589 E4            pop a
0204+  058A 09            ret
0205+  058B             
0206+  058B             
0207+  058B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  058B             ;; input text
0209+  058B             ;; terminated with ctrl+d
0210+  058B             ;; pointer in d
0211+  058B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  058B             _gettxt:
0213+  058B D7            push a
0214+  058C DA            push d
0215+  058D             _gettxt_loop:
0216+  058D 19 01         mov al, 1
0217+  058F 05 03         syscall sys_io      ; receive in ah
0218+  0591 76 04         cmp ah, 4      ; eot
0219+  0593 C6 CC 05      je _gettxt_end
0220+  0596 76 08         cmp ah, $08      ; check for backspace
0221+  0598 C6 C8 05      je _gettxt_backspace
0222+  059B 76 5C         cmp ah, $5c        ; '\'
0223+  059D C6 A6 05      je _gettxt_escape
0224+  05A0 1A            mov al, ah
0225+  05A1 3E            mov [d], al
0226+  05A2 79            inc d
0227+  05A3 0A 8D 05      jmp _gettxt_loop
0228+  05A6             _gettxt_escape:
0229+  05A6 19 01         mov al, 1
0230+  05A8 05 03         syscall sys_io      ; receive in ah
0231+  05AA 76 6E         cmp ah, 'n'
0232+  05AC C6 BA 05      je _gettxt_lf
0233+  05AF 76 72         cmp ah, 'r'
0234+  05B1 C6 C1 05      je _gettxt_cr
0235+  05B4 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  05B5 3E            mov [d], al
0237+  05B6 79            inc d
0238+  05B7 0A 8D 05      jmp _gettxt_loop
0239+  05BA             _gettxt_lf:
0240+  05BA 19 0A         mov al, $0a
0241+  05BC 3E            mov [d], al
0242+  05BD 79            inc d
0243+  05BE 0A 8D 05      jmp _gettxt_loop
0244+  05C1             _gettxt_cr:
0245+  05C1 19 0D         mov al, $0d
0246+  05C3 3E            mov [d], al
0247+  05C4 79            inc d
0248+  05C5 0A 8D 05      jmp _gettxt_loop
0249+  05C8             _gettxt_backspace:
0250+  05C8 7F            dec d
0251+  05C9 0A 8D 05      jmp _gettxt_loop
0252+  05CC             _gettxt_end:
0253+  05CC 19 00         mov al, 0
0254+  05CE 3E            mov [d], al        ; terminate string
0255+  05CF E7            pop d
0256+  05D0 E4            pop a
0257+  05D1 09            ret
0258+  05D2             
0259+  05D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  05D2             ; print new line
0261+  05D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  05D2             printnl:
0263+  05D2 D7            push a
0264+  05D3 10 00 0A      mov a, $0a00
0265+  05D6 05 03         syscall sys_io
0266+  05D8 10 00 0D      mov a, $0d00
0267+  05DB 05 03         syscall sys_io
0268+  05DD E4            pop a
0269+  05DE 09            ret
0270+  05DF             
0271+  05DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  05DF             ; _strtoint
0273+  05DF             ; 4 digit hex string number in d
0274+  05DF             ; integer returned in a
0275+  05DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  05DF             _strtointx:
0277+  05DF D8            push b
0278+  05E0 32            mov bl, [d]
0279+  05E1 37            mov bh, bl
0280+  05E2 33 01 00      mov bl, [d + 1]
0281+  05E5 07 B6 04      call _atoi        ; convert to int in al
0282+  05E8 23            mov ah, al        ; move to ah
0283+  05E9 33 02 00      mov bl, [d + 2]
0284+  05EC 37            mov bh, bl
0285+  05ED 33 03 00      mov bl, [d + 3]
0286+  05F0 07 B6 04      call _atoi        ; convert to int in al
0287+  05F3 E5            pop b
0288+  05F4 09            ret
0289+  05F5             
0290+  05F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  05F5             ; _strtoint
0292+  05F5             ; 5 digit base10 string number in d
0293+  05F5             ; integer returned in a
0294+  05F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  05F5             _strtoint:
0296+  05F5 E2            push si
0297+  05F6 D8            push b
0298+  05F7 D9            push c
0299+  05F8 DA            push d
0300+  05F9 07 58 04      call _strlen      ; get string length in c
0301+  05FC 7E            dec c
0302+  05FD FD 4E         mov si, d
0303+  05FF 12            mov a, c
0304+  0600 FD 99         shl a
0305+  0602 3B 79 07      mov d, table_power
0306+  0605 59            add d, a
0307+  0606 38 00 00      mov c, 0
0308+  0609             _strtoint_l0:
0309+  0609 F6            lodsb      ; load ascii to al
0310+  060A B9 00         cmp al, 0
0311+  060C C6 1F 06      je _strtoint_end
0312+  060F 6F 30         sub al, $30    ; make into integer
0313+  0611 22 00         mov ah, 0
0314+  0613 2A            mov b, [d]
0315+  0614 AC            mul a, b      ; result in b since it fits in 16bits
0316+  0615 11            mov a, b
0317+  0616 28            mov b, c
0318+  0617 54            add a, b
0319+  0618 39            mov c, a
0320+  0619 63 02 00      sub d, 2
0321+  061C 0A 09 06      jmp _strtoint_l0
0322+  061F             _strtoint_end:
0323+  061F 12            mov a, c
0324+  0620 E7            pop d
0325+  0621 E6            pop c
0326+  0622 E5            pop b
0327+  0623 EF            pop si
0328+  0624 09            ret
0329+  0625             
0330+  0625             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  0625             ; print null terminated string
0332+  0625             ; pointer in d
0333+  0625             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  0625             _puts:
0335+  0625 D7            push a
0336+  0626 DA            push d
0337+  0627             _puts_l1:
0338+  0627 1E            mov al, [d]
0339+  0628 B9 00         cmp al, 0
0340+  062A C6 36 06      jz _puts_end
0341+  062D 23            mov ah, al
0342+  062E 19 00         mov al, 0
0343+  0630 05 03         syscall sys_io
0344+  0632 79            inc d
0345+  0633 0A 27 06      jmp _puts_l1
0346+  0636             _puts_end:
0347+  0636 E7            pop d
0348+  0637 E4            pop a
0349+  0638 09            ret
0350+  0639             
0351+  0639             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  0639             ; print n size string
0353+  0639             ; pointer in d
0354+  0639             ; size in c
0355+  0639             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  0639             _putsn:
0357+  0639 DB            push al
0358+  063A DA            push d
0359+  063B D9            push c
0360+  063C             _putsn_l0:
0361+  063C 1E            mov al, [d]
0362+  063D 23            mov ah, al
0363+  063E 19 00         mov al, 0
0364+  0640 05 03         syscall sys_io
0365+  0642 79            inc d
0366+  0643 7E            dec c  
0367+  0644 C2 00 00      cmp c, 0
0368+  0647 C7 3C 06      jne _putsn_l0
0369+  064A             _putsn_end:
0370+  064A E6            pop c
0371+  064B E7            pop d
0372+  064C E8            pop al
0373+  064D 09            ret
0374+  064E             
0375+  064E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  064E             ; print 16bit decimal number
0377+  064E             ; input number in a
0378+  064E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  064E             print_u16d:
0380+  064E D7            push a
0381+  064F D8            push b
0382+  0650 FD D8         push g
0383+  0652 26 10 27      mov b, 10000
0384+  0655 AE            div a, b      ; get 10000's coeff.
0385+  0656 07 7A 06      call print_number
0386+  0659 11            mov a, b
0387+  065A 26 E8 03      mov b, 1000
0388+  065D AE            div a, b      ; get 1000's coeff.
0389+  065E 07 7A 06      call print_number
0390+  0661 11            mov a, b
0391+  0662 26 64 00      mov b, 100
0392+  0665 AE            div a, b
0393+  0666 07 7A 06      call print_number
0394+  0669 11            mov a, b
0395+  066A 26 0A 00      mov b, 10
0396+  066D AE            div a, b
0397+  066E 07 7A 06      call print_number
0398+  0671 1B            mov al, bl      ; 1's coeff in bl
0399+  0672 07 7A 06      call print_number
0400+  0675 FD F1         pop g
0401+  0677 E5            pop b
0402+  0678 E4            pop a
0403+  0679 09            ret
0404+  067A             
0405+  067A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  067A             ; print al
0407+  067A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  067A             print_number:
0409+  067A 6A 30         add al, $30
0410+  067C 23            mov ah, al
0411+  067D 07 F9 04      call _putchar
0412+  0680 09            ret
0413+  0681             
0414+  0681             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  0681             ; print 16bit hex integer
0416+  0681             ; integer value in reg b
0417+  0681             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  0681             print_u16x:
0419+  0681 D7            push a
0420+  0682 D8            push b
0421+  0683 DD            push bl
0422+  0684 30            mov bl, bh
0423+  0685 07 C7 04      call _itoa        ; convert bh to char in a
0424+  0688 2F            mov bl, al        ; save al
0425+  0689 19 00         mov al, 0
0426+  068B 05 03         syscall sys_io        ; display ah
0427+  068D 24            mov ah, bl        ; retrieve al
0428+  068E 19 00         mov al, 0
0429+  0690 05 03         syscall sys_io        ; display al
0430+  0692             
0431+  0692 EA            pop bl
0432+  0693 07 C7 04      call _itoa        ; convert bh to char in a
0433+  0696 2F            mov bl, al        ; save al
0434+  0697 19 00         mov al, 0
0435+  0699 05 03         syscall sys_io        ; display ah
0436+  069B 24            mov ah, bl        ; retrieve al
0437+  069C 19 00         mov al, 0
0438+  069E 05 03         syscall sys_io        ; display al
0439+  06A0             
0440+  06A0 E5            pop b
0441+  06A1 E4            pop a
0442+  06A2 09            ret
0443+  06A3             
0444+  06A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  06A3             ; input 16bit hex integer
0446+  06A3             ; read 16bit integer into a
0447+  06A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  06A3             scan_u16x:
0449+  06A3 F8 10 00      enter 16
0450+  06A6 D8            push b
0451+  06A7 DA            push d
0452+  06A8             
0453+  06A8 FA F1 FF      lea d, [bp + -15]
0454+  06AB 07 00 05      call _gets        ; get number
0455+  06AE             
0456+  06AE 32            mov bl, [d]
0457+  06AF 37            mov bh, bl
0458+  06B0 33 01 00      mov bl, [d + 1]
0459+  06B3 07 B6 04      call _atoi        ; convert to int in al
0460+  06B6 23            mov ah, al        ; move to ah
0461+  06B7             
0462+  06B7 33 02 00      mov bl, [d + 2]
0463+  06BA 37            mov bh, bl
0464+  06BB 33 03 00      mov bl, [d + 3]
0465+  06BE 07 B6 04      call _atoi        ; convert to int in al
0466+  06C1             
0467+  06C1 E7            pop d
0468+  06C2 E5            pop b
0469+  06C3 F9            leave
0470+  06C4 09            ret
0471+  06C5             
0472+  06C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  06C5             ; print 8bit hex integer
0474+  06C5             ; integer value in reg bl
0475+  06C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  06C5             print_u8x:
0477+  06C5 D7            push a
0478+  06C6 DD            push bl
0479+  06C7             
0480+  06C7 07 C7 04      call _itoa        ; convert bl to char in a
0481+  06CA 2F            mov bl, al        ; save al
0482+  06CB 19 00         mov al, 0
0483+  06CD 05 03         syscall sys_io        ; display ah
0484+  06CF 24            mov ah, bl        ; retrieve al
0485+  06D0 19 00         mov al, 0
0486+  06D2 05 03         syscall sys_io        ; display al
0487+  06D4             
0488+  06D4 EA            pop bl
0489+  06D5 E4            pop a
0490+  06D6 09            ret
0491+  06D7             
0492+  06D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  06D7             ; print 8bit decimal unsigned number
0494+  06D7             ; input number in al
0495+  06D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  06D7             print_u8d:
0497+  06D7 D7            push a
0498+  06D8 D8            push b
0499+  06D9 FD D8         push g
0500+  06DB 22 00         mov ah, 0
0501+  06DD 26 64 00      mov b, 100
0502+  06E0 AE            div a, b
0503+  06E1 D8            push b      ; save remainder
0504+  06E2 B9 00         cmp al, 0
0505+  06E4 C6 EE 06      je skip100
0506+  06E7 6A 30         add al, $30
0507+  06E9 23            mov ah, al
0508+  06EA 19 00         mov al, 0
0509+  06EC 05 03         syscall sys_io  ; print coeff
0510+  06EE             skip100:
0511+  06EE E4            pop a
0512+  06EF 22 00         mov ah, 0
0513+  06F1 26 0A 00      mov b, 10
0514+  06F4 AE            div a, b
0515+  06F5 D8            push b      ; save remainder
0516+  06F6 B9 00         cmp al, 0
0517+  06F8 C6 02 07      je skip10
0518+  06FB 6A 30         add al, $30
0519+  06FD 23            mov ah, al
0520+  06FE 19 00         mov al, 0
0521+  0700 05 03         syscall sys_io  ; print coeff
0522+  0702             skip10:
0523+  0702 E4            pop a
0524+  0703 1B            mov al, bl
0525+  0704 6A 30         add al, $30
0526+  0706 23            mov ah, al
0527+  0707 19 00         mov al, 0
0528+  0709 05 03         syscall sys_io  ; print coeff
0529+  070B FD F1         pop g
0530+  070D E5            pop b
0531+  070E E4            pop a
0532+  070F 09            ret
0533+  0710             
0534+  0710             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  0710             ; input 8bit hex integer
0536+  0710             ; read 8bit integer into al
0537+  0710             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  0710             scan_u8x:
0539+  0710 F8 04 00      enter 4
0540+  0713 D8            push b
0541+  0714 DA            push d
0542+  0715             
0543+  0715 FA FD FF      lea d, [bp + -3]
0544+  0718 07 00 05      call _gets        ; get number
0545+  071B             
0546+  071B 32            mov bl, [d]
0547+  071C 37            mov bh, bl
0548+  071D 33 01 00      mov bl, [d + 1]
0549+  0720 07 B6 04      call _atoi        ; convert to int in al
0550+  0723             
0551+  0723 E7            pop d
0552+  0724 E5            pop b
0553+  0725 F9            leave
0554+  0726 09            ret
0555+  0727             
0556+  0727             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  0727             ; input decimal number
0558+  0727             ; result in a
0559+  0727             ; 655'\0'
0560+  0727             ; low--------high
0561+  0727             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  0727             scan_u16d:
0563+  0727 F8 08 00      enter 8
0564+  072A E2            push si
0565+  072B D8            push b
0566+  072C D9            push c
0567+  072D DA            push d
0568+  072E FA F9 FF      lea d, [bp +- 7]
0569+  0731 07 00 05      call _gets
0570+  0734 07 58 04      call _strlen      ; get string length in c
0571+  0737 7E            dec c
0572+  0738 FD 4E         mov si, d
0573+  073A 12            mov a, c
0574+  073B FD 99         shl a
0575+  073D 3B 79 07      mov d, table_power
0576+  0740 59            add d, a
0577+  0741 38 00 00      mov c, 0
0578+  0744             mul_loop:
0579+  0744 F6            lodsb      ; load ascii to al
0580+  0745 B9 00         cmp al, 0
0581+  0747 C6 5A 07      je mul_exit
0582+  074A 6F 30         sub al, $30    ; make into integer
0583+  074C 22 00         mov ah, 0
0584+  074E 2A            mov b, [d]
0585+  074F AC            mul a, b      ; result in b since it fits in 16bits
0586+  0750 11            mov a, b
0587+  0751 28            mov b, c
0588+  0752 54            add a, b
0589+  0753 39            mov c, a
0590+  0754 63 02 00      sub d, 2
0591+  0757 0A 44 07      jmp mul_loop
0592+  075A             mul_exit:
0593+  075A 12            mov a, c
0594+  075B E7            pop d
0595+  075C E6            pop c
0596+  075D E5            pop b
0597+  075E EF            pop si
0598+  075F F9            leave
0599+  0760 09            ret
0600+  0761             
0601+  0761             
0602+  0761 30 31 32 33 s_hex_digits:    .db "0123456789abcdef"  
0602+  0765 34 35 36 37 
0602+  0769 38 39 61 62 
0602+  076D 63 64 65 66 
0603+  0771 1B 5B 32 6A s_telnet_clear:  .db "\033[2j\033[h", 0
0603+  0775 1B 5B 68 00 
0604+  0779             
0605+  0779             table_power:
0606+  0779 01 00         .dw 1
0607+  077B 0A 00         .dw 10
0608+  077D 64 00         .dw 100
0609+  077F E8 03         .dw 1000
0610+  0781 10 27         .dw 100000018   0783             
0019   0783             .end
0020   0783             
0021   0783             
tasm: Number of errors = 0
