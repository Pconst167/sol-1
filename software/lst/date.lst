0001   0000             .include "lib/kernel.exp"
0001+  0000             fdc_irq_event    .EQU  $195a
0002+  0000             sys_break        .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_create_proc  .EQU  $0005
0008+  0000             sys_list_proc    .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_fdc          .EQU  $000d
0016+  0000             text_org         .EQU  $0400
0002   0000             
0003   0400             .org text_org			; origin at 1024
0004   0400             
0005   0400             ; ********************************************************************
0006   0400             ; DATETIME
0007   0400             ; ********************************************************************
0008   0400             date:
0009   0400 10 00 00    	mov a, 0
0010   0403 42 85 07    	mov [prog], a
0011   0406 07 E6 05    	call get_token
0012   0409 FD 4D 89 07 	mov si, tokstr
0013   040D FD 4F 23 04 	mov di, s_set
0014   0411 07 7E 04    	call _strcmp
0015   0414 C6 1D 04    	je date_set
0016   0417 19 00       	mov al, 0			; print datetime
0017   0419 05 07       	syscall sys_datetime
0018   041B 05 0B       	syscall sys_terminate_proc
0019   041D             
0020   041D             date_set:
0021   041D 19 01       	mov al, 1			; print datetime
0022   041F 05 07       	syscall sys_datetime
0023   0421 05 0B       	syscall sys_terminate_proc
0024   0423             
0025   0423 73 65 74 00 s_set: .db "set", 0
0026   0427             
0027   0427             .include "lib/string.asm"
0001+  0427             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0427             ; string.s
0003+  0427             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0427             
0005+  0427             
0006+  0427             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007+  0427             ; _strrev
0008+  0427             ; reverse a string
0009+  0427             ; D = string address
0010+  0427             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0427             ; 01234
0012+  0427             _strrev:
0013+  0427 4B          	pusha
0014+  0428 07 6E 04    	call _strlen	; length in C
0015+  042B 12          	mov a, c
0016+  042C AF 01 00    	cmp a, 1
0017+  042F D0 49 04    	jleu _strrev_end	; check string length. string len must be > 1
0018+  0432 7D          	dec a
0019+  0433 FD 4E       	mov si, d	; beginning of string
0020+  0435 FD 50       	mov di, d	; beginning of string (for destinations)
0021+  0437 59          	add d, a	; end of string
0022+  0438 12          	mov a, c
0023+  0439 FD 9B       	shr a		; divide by 2
0024+  043B 39          	mov c, a	; C now counts the steps
0025+  043C             _strrev_L0:
0026+  043C 32          	mov bl, [d]	; save load right-side char into BL
0027+  043D F6          	lodsb		; load left-side char into AL; increase SI
0028+  043E 3E          	mov [d], al	; store left char into right side
0029+  043F 1B          	mov al, bl
0030+  0440 F7          	stosb		; store right-side char into left-side; increase DI
0031+  0441 7E          	dec c
0032+  0442 7F          	dec d
0033+  0443 C2 00 00    	cmp c, 0
0034+  0446 C7 3C 04    	jne _strrev_L0
0035+  0449             _strrev_end:
0036+  0449 4C          	popa
0037+  044A 09          	ret
0038+  044B             	
0039+  044B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040+  044B             ; _strchr
0041+  044B             ; search string in D for char in AL
0042+  044B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043+  044B             _strchr:
0044+  044B             _strchr_L0:
0045+  044B 32          	mov bl, [d]
0046+  044C C1 00       	cmp bl, 0
0047+  044E C6 59 04    	je _strchr_end
0048+  0451 BA          	cmp al, bl
0049+  0452 C6 59 04    	je _strchr_end
0050+  0455 79          	inc d
0051+  0456 0A 4B 04    	jmp _strchr_L0
0052+  0459             _strchr_end:
0053+  0459 1B          	mov al, bl
0054+  045A 09          	ret
0055+  045B             
0056+  045B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057+  045B             ; _strstr
0058+  045B             ; find sub-string
0059+  045B             ; str1 in SI
0060+  045B             ; str2 in DI
0061+  045B             ; SI points to end of source string
0062+  045B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063+  045B             _strstr:
0064+  045B DB          	push al
0065+  045C DA          	push d
0066+  045D E3          	push di
0067+  045E             _strstr_loop:
0068+  045E F3          	cmpsb					; compare a byte of the strings
0069+  045F C7 6A 04    	jne _strstr_ret
0070+  0462 FC 00 00    	lea d, [di + 0]
0071+  0465 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072+  0467 C7 5E 04    	jne _strstr_loop				; equal chars but not at end
0073+  046A             _strstr_ret:
0074+  046A F0          	pop di
0075+  046B E7          	pop d
0076+  046C E8          	pop al
0077+  046D 09          	ret
0078+  046E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  046E             ; length of null terminated string
0080+  046E             ; result in C
0081+  046E             ; pointer in D
0082+  046E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  046E             _strlen:
0084+  046E DA          	push d
0085+  046F 38 00 00    	mov c, 0
0086+  0472             _strlen_L1:
0087+  0472 BD 00       	cmp byte [d], 0
0088+  0474 C6 7C 04    	je _strlen_ret
0089+  0477 79          	inc d
0090+  0478 78          	inc c
0091+  0479 0A 72 04    	jmp _strlen_L1
0092+  047C             _strlen_ret:
0093+  047C E7          	pop d
0094+  047D 09          	ret
0095+  047E             
0096+  047E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097+  047E             ; STRCMP
0098+  047E             ; compare two strings
0099+  047E             ; str1 in SI
0100+  047E             ; str2 in DI
0101+  047E             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102+  047E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103+  047E             _strcmp:
0104+  047E DB          	push al
0105+  047F DA          	push d
0106+  0480 E3          	push di
0107+  0481 E2          	push si
0108+  0482             _strcmp_loop:
0109+  0482 F3          	cmpsb					; compare a byte of the strings
0110+  0483 C7 8E 04    	jne _strcmp_ret
0111+  0486 FB FF FF    	lea d, [si +- 1]
0112+  0489 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113+  048B C7 82 04    	jne _strcmp_loop				; equal chars but not at end
0114+  048E             _strcmp_ret:
0115+  048E EF          	pop si
0116+  048F F0          	pop di
0117+  0490 E7          	pop d
0118+  0491 E8          	pop al
0119+  0492 09          	ret
0120+  0493             
0121+  0493             
0122+  0493             ; STRCPY
0123+  0493             ; copy null terminated string from SI to DI
0124+  0493             ; source in SI
0125+  0493             ; destination in DI
0126+  0493             _strcpy:
0127+  0493 E2          	push si
0128+  0494 E3          	push di
0129+  0495 DB          	push al
0130+  0496             _strcpy_L1:
0131+  0496 F6          	lodsb
0132+  0497 F7          	stosb
0133+  0498 B9 00       	cmp al, 0
0134+  049A C7 96 04    	jne _strcpy_L1
0135+  049D             _strcpy_end:
0136+  049D E8          	pop al
0137+  049E F0          	pop di
0138+  049F EF          	pop si
0139+  04A0 09          	ret
0140+  04A1             
0141+  04A1             ; STRCAT
0142+  04A1             ; concatenate a NULL terminated string into string at DI, from string at SI
0143+  04A1             ; source in SI
0144+  04A1             ; destination in DI
0145+  04A1             _strcat:
0146+  04A1 E2          	push si
0147+  04A2 E3          	push di
0148+  04A3 D7          	push a
0149+  04A4 DA          	push d
0150+  04A5 50          	mov a, di
0151+  04A6 3C          	mov d, a
0152+  04A7             _strcat_goto_end_L1:
0153+  04A7 BD 00       	cmp byte[d], 0
0154+  04A9 C6 B0 04    	je _strcat_start
0155+  04AC 79          	inc d
0156+  04AD 0A A7 04    	jmp _strcat_goto_end_L1
0157+  04B0             _strcat_start:
0158+  04B0 FD 50       	mov di, d
0159+  04B2             _strcat_L1:
0160+  04B2 F6          	lodsb
0161+  04B3 F7          	stosb
0162+  04B4 B9 00       	cmp al, 0
0163+  04B6 C7 B2 04    	jne _strcat_L1
0164+  04B9             _strcat_end:
0165+  04B9 E7          	pop d
0166+  04BA E4          	pop a
0167+  04BB F0          	pop di
0168+  04BC EF          	pop si
0169+  04BD 09          	ret
0170+  04BE             
0171+  04BE             
0028   04BE             .include "lib/ctype.asm"
0001+  04BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  04BE             ; ctype.s
0003+  04BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  04BE             
0005+  04BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  04BE             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  04BE             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  04BE             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  04BE             ;; characters are supported.
0010+  04BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  04BE             ;; _isalnum 
0012+  04BE             ;; _isalpha 
0013+  04BE             ;; islower 
0014+  04BE             ;; isupper 
0015+  04BE             ;; _isdigit 
0016+  04BE             ;; isxdigit
0017+  04BE             ;; iscntrl 
0018+  04BE             ;; isgraph 
0019+  04BE             ;; _isspace 
0020+  04BE             ;; isblank 
0021+  04BE             ;; isprint 
0022+  04BE             ;; ispunct 
0023+  04BE             ;; tolower 
0024+  04BE             ;; toupper
0025+  04BE             
0026+  04BE             
0027+  04BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  04BE             ;; IS ALPHANUMERIC
0029+  04BE             ;; sets ZF according with result
0030+  04BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  04BE             _isalnum:
0032+  04BE 07 DB 04    	call _isalpha
0033+  04C1 C6 C7 04    	je _isalnum_exit
0034+  04C4 07 C8 04    	call _isdigit
0035+  04C7             _isalnum_exit:
0036+  04C7 09          	ret	
0037+  04C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  04C8             ;; IS DIGIT
0039+  04C8             ;; sets ZF according with result
0040+  04C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  04C8             _isdigit:
0042+  04C8 DB          	push al
0043+  04C9 B9 30       	cmp al, '0'
0044+  04CB C8 D7 04    	jlu _isdigit_false
0045+  04CE B9 39       	cmp al, '9'
0046+  04D0 D1 D7 04    	jgu _isdigit_false
0047+  04D3 87 00       	and al, 0	; set ZF
0048+  04D5 E8          	pop al
0049+  04D6 09          	ret
0050+  04D7             _isdigit_false:
0051+  04D7 8B 01       	or al, 1	; clear ZF
0052+  04D9 E8          	pop al
0053+  04DA 09          	ret	
0054+  04DB             	
0055+  04DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  04DB             ;; IS ALPHA
0057+  04DB             ;; sets ZF according with result
0058+  04DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  04DB             _isalpha:
0060+  04DB DB          	push al
0061+  04DC B9 5F       	cmp al, '_'
0062+  04DE C6 FE 04    	je _isalpha_true
0063+  04E1 B9 2E       	cmp al, '.'
0064+  04E3 C6 FE 04    	je _isalpha_true
0065+  04E6 B9 41       	cmp al, 'A'
0066+  04E8 C8 FA 04    	jlu _isalpha_false
0067+  04EB B9 7A       	cmp al, 'z'
0068+  04ED D1 FA 04    	jgu _isalpha_false
0069+  04F0 B9 5A       	cmp al, 'Z'
0070+  04F2 D0 FE 04    	jleu _isalpha_true
0071+  04F5 B9 61       	cmp al, 'a'
0072+  04F7 C9 FE 04    	jgeu _isalpha_true
0073+  04FA             _isalpha_false:
0074+  04FA 8B 01       	or al, 1	; clear ZF
0075+  04FC E8          	pop al
0076+  04FD 09          	ret
0077+  04FE             _isalpha_true:
0078+  04FE 87 00       	and al, 0	; set ZF
0079+  0500 E8          	pop al
0080+  0501 09          	ret
0081+  0502             
0082+  0502             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0502             ;; IS PATH-ALPHA
0084+  0502             ;; sets ZF according with result
0085+  0502             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0502             ispath:
0087+  0502 DB          	push al
0088+  0503 07 C8 04    	call _isdigit
0089+  0506 C6 30 05    	je ispath_true
0090+  0509 B9 5F       	cmp al, '_'
0091+  050B C6 30 05    	je ispath_true
0092+  050E B9 2F       	cmp al, '/'
0093+  0510 C6 30 05    	je ispath_true
0094+  0513 B9 2E       	cmp al, '.'
0095+  0515 C6 30 05    	je ispath_true
0096+  0518 B9 41       	cmp al, 'A'
0097+  051A C8 2C 05    	jlu ispath_false
0098+  051D B9 7A       	cmp al, 'z'
0099+  051F D1 2C 05    	jgu ispath_false
0100+  0522 B9 5A       	cmp al, 'Z'
0101+  0524 D0 30 05    	jleu ispath_true
0102+  0527 B9 61       	cmp al, 'a'
0103+  0529 C9 30 05    	jgeu ispath_true
0104+  052C             ispath_false:
0105+  052C 8B 01       	or al, 1	; clear ZF
0106+  052E E8          	pop al
0107+  052F 09          	ret
0108+  0530             ispath_true:
0109+  0530 87 00       	and al, 0	; set ZF
0110+  0532 E8          	pop al
0111+  0533 09          	ret
0112+  0534             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0534             ;; IS SPACE
0114+  0534             ;; sets ZF according with result
0115+  0534             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0534             _isspace:
0117+  0534 B9 20       	cmp al, $20		; ' '
0118+  0536 C6 4A 05    	je _isspace_exit
0119+  0539 B9 09       	cmp al, $09		; '\t'
0120+  053B C6 4A 05    	je _isspace_exit
0121+  053E B9 0A       	cmp al, $0A		; '\n'
0122+  0540 C6 4A 05    	je _isspace_exit
0123+  0543 B9 0D       	cmp al, $0D		; '\r'
0124+  0545 C6 4A 05    	je _isspace_exit
0125+  0548 B9 0B       	cmp al, $0B		; '\v'
0126+  054A             _isspace_exit:
0127+  054A 09          	ret	
0128+  054B             
0129+  054B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  054B             ; TO LOWER
0131+  054B             ; input in AL
0132+  054B             ; output in AL
0133+  054B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  054B             _to_lower:
0135+  054B B9 5A       	cmp al, 'Z'
0136+  054D D1 52 05    	jgu _to_lower_ret
0137+  0550 6A 20       	add al, $20				; convert to lower case
0138+  0552             _to_lower_ret:
0139+  0552 09          	ret
0140+  0553             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0553             ; TO UPPER
0142+  0553             ; input in AL
0143+  0553             ; output in AL
0144+  0553             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0553             _to_upper:
0146+  0553 B9 61       	cmp al, 'a'
0147+  0555 C8 5A 05    	jlu _to_upper_ret
0148+  0558 6F 20       	sub al, $20			; convert to upper case
0149+  055A             _to_upper_ret:
0150+  055A 09          	ret
0151+  055B             
0029   055B             .include "lib/token.asm"
0001+  055B             TOKTYP_IDENTIFIER  .equ 0
0002+  055B             TOKTYP_KEYWORD     .equ 1
0003+  055B             TOKTYP_DELIMITER   .equ 2
0004+  055B             TOKTYP_STRING      .equ 3
0005+  055B             TOKTYP_CHAR        .equ 4
0006+  055B             TOKTYP_NUMERIC     .equ 5
0007+  055B             TOKTYP_END         .equ 6
0008+  055B             
0009+  055B             TOK_NULL           .equ 0
0010+  055B             TOK_FSLASH         .equ 1
0011+  055B             TOK_TIMES          .equ 2
0012+  055B             TOK_PLUS           .equ 3
0013+  055B             TOK_MINUS          .equ 4
0014+  055B             TOK_DOT            .equ 5
0015+  055B             TOK_SEMI           .equ 6
0016+  055B             TOK_ANGLE          .equ 7
0017+  055B             TOK_TILDE          .equ 8
0018+  055B             TOK_EQUAL          .equ 9
0019+  055B             TOK_COLON          .equ 10
0020+  055B             TOK_COMMA          .equ 11
0021+  055B             
0022+  055B             TOK_END            .equ 20
0023+  055B             
0024+  055B             
0025+  055B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  055B             ;; read a full command argment from shell input buffer
0027+  055B             ;; argument is written into tokstr
0028+  055B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  055B             get_arg:
0030+  055B D7            push a
0031+  055C E2            push si
0032+  055D E3            push di
0033+  055E 19 00         mov al, 0
0034+  0560 3D 89 07      mov [tokstr], al      ; nullify tokstr string
0035+  0563 14 85 07      mov a, [prog]
0036+  0566 4D            mov si, a
0037+  0567 FD 4F 89 07   mov di, tokstr
0038+  056B             get_arg_skip_spaces:
0039+  056B F6            lodsb
0040+  056C 07 34 05      call _isspace
0041+  056F C6 6B 05      je get_arg_skip_spaces
0042+  0572             get_arg_L0:
0043+  0572 B9 3B         cmp al, $3B        ; check if is ';'
0044+  0574 C6 81 05      je get_arg_end
0045+  0577 B9 00         cmp al, 0
0046+  0579 C6 81 05      je get_arg_end      ; check if end of input
0047+  057C F7            stosb
0048+  057D F6            lodsb
0049+  057E 0A 72 05      jmp get_arg_L0
0050+  0581             get_arg_end:
0051+  0581 19 00         mov al, 0
0052+  0583 F7            stosb
0053+  0584 D5 01 00      sub si, 1
0054+  0587 4E            mov a, si
0055+  0588 42 85 07      mov [prog], a    ; update pointer
0056+  058B F0            pop di
0057+  058C EF            pop si
0058+  058D E4            pop a
0059+  058E 09            ret
0060+  058F             
0061+  058F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  058F             ;; read a path formation from shell input buffer
0063+  058F             ;; path is written into tokstr
0064+  058F             ;; /usr/bin
0065+  058F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  058F             get_path:
0067+  058F D7            push a
0068+  0590 E2            push si
0069+  0591 E3            push di
0070+  0592 19 00         mov al, 0
0071+  0594 3D 89 07      mov [tokstr], al      ; nullify tokstr string
0072+  0597 14 85 07      mov a, [prog]
0073+  059A 4D            mov si, a
0074+  059B FD 4F 89 07   mov di, tokstr
0075+  059F             get_path_skip_spaces:
0076+  059F F6            lodsb
0077+  05A0 07 34 05      call _isspace
0078+  05A3 C6 9F 05      je get_path_skip_spaces
0079+  05A6             get_path_is_pathchar:
0080+  05A6 F7            stosb
0081+  05A7 F6            lodsb
0082+  05A8 07 BE 04      call _isalnum      ;check if is alphanumeric
0083+  05AB C6 A6 05      je get_path_is_pathchar
0084+  05AE B9 2F         cmp al, '/'        ; check if is '/'
0085+  05B0 C6 A6 05      je get_path_is_pathchar
0086+  05B3 19 00         mov al, 0
0087+  05B5 F7            stosb
0088+  05B6 D5 01 00      sub si, 1
0089+  05B9 4E            mov a, si
0090+  05BA 42 85 07      mov [prog], a    ; update pointer
0091+  05BD             get_path_end:
0092+  05BD F0            pop di
0093+  05BE EF            pop si
0094+  05BF E4            pop a
0095+  05C0 09            ret
0096+  05C1             
0097+  05C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  05C1             ;; read a line
0099+  05C1             ;; line is written into tokstr
0100+  05C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  05C1             get_line:
0102+  05C1 D7            push a
0103+  05C2 E2            push si
0104+  05C3 E3            push di
0105+  05C4 19 00         mov al, 0
0106+  05C6 3D 89 07      mov [tokstr], al      ; nullify tokstr string
0107+  05C9 14 85 07      mov a, [prog]
0108+  05CC 4D            mov si, a
0109+  05CD FD 4F 89 07   mov di, tokstr
0110+  05D1             get_line_L0:
0111+  05D1 F6            lodsb
0112+  05D2 B9 0A         cmp al, $0A    ; check for new line
0113+  05D4 C6 DB 05      je get_line_exit
0114+  05D7 F7            stosb
0115+  05D8 0A D1 05      jmp get_line_L0
0116+  05DB             get_line_exit:
0117+  05DB 19 00         mov al, 0
0118+  05DD F7            stosb
0119+  05DE 4E            mov a, si
0120+  05DF 42 85 07      mov [prog], a    ; update pointer
0121+  05E2 F0            pop di
0122+  05E3 EF            pop si
0123+  05E4 E4            pop a
0124+  05E5 09            ret
0125+  05E6             
0126+  05E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  05E6             ;; token parser
0128+  05E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  05E6             get_token:
0130+  05E6 D7            push a
0131+  05E7 DA            push d
0132+  05E8 E2            push si
0133+  05E9 E3            push di
0134+  05EA 19 00         mov al, 0
0135+  05EC 3D 89 07      mov [tokstr], al      ; nullify tokstr string
0136+  05EF 19 00         mov al, TOK_NULL
0137+  05F1 3D 88 07      mov [tok], al        ; nullify token
0138+  05F4 14 85 07      mov a, [prog]
0139+  05F7 4D            mov si, a
0140+  05F8 FD 4F 89 07   mov di, tokstr
0141+  05FC             get_tok_skip_spaces:
0142+  05FC F6            lodsb
0143+  05FD 07 34 05      call _isspace
0144+  0600 C6 FC 05      je get_tok_skip_spaces
0145+  0603 B9 00         cmp al, 0      ; check for end of input (NULL)
0146+  0605 C6 EA 06      je get_token_end
0147+  0608 B9 23         cmp al, '#'      ; comments!
0148+  060A C6 18 07      je get_tok_comment
0149+  060D 07 BE 04      call _isalnum
0150+  0610 C6 F7 06      jz is_alphanumeric
0151+  0613             ; other token types
0152+  0613             get_token_slash:
0153+  0613 B9 2F         cmp al, '/'        ; check if '/'
0154+  0615 C7 2D 06      jne get_token_minus
0155+  0618 F7            stosb          ; store '/' into token string
0156+  0619 19 00         mov al, 0
0157+  061B F7            stosb          ; terminate token string
0158+  061C 19 01         mov al, TOK_FSLASH
0159+  061E 3D 88 07      mov [tok], al      
0160+  0621 19 02         mov al, TOKTYP_DELIMITER
0161+  0623 3D 87 07      mov [toktyp], al
0162+  0626 4E            mov a, si
0163+  0627 42 85 07      mov [prog], a    ; update pointer
0164+  062A 0A 13 07      jmp get_token_return
0165+  062D             get_token_minus:
0166+  062D B9 2D         cmp al, '-'        ; check if '-'
0167+  062F C7 47 06      jne get_token_comma
0168+  0632 F7            stosb          ; store '-' into token string
0169+  0633 19 00         mov al, 0
0170+  0635 F7            stosb          ; terminate token string
0171+  0636 19 04         mov al, TOK_MINUS
0172+  0638 3D 88 07      mov [tok], al      
0173+  063B 19 02         mov al, TOKTYP_DELIMITER
0174+  063D 3D 87 07      mov [toktyp], al
0175+  0640 4E            mov a, si
0176+  0641 42 85 07      mov [prog], a    ; update pointer
0177+  0644 0A 13 07      jmp get_token_return
0178+  0647             get_token_comma:
0179+  0647 B9 2C         cmp al, ','        ; check if ','
0180+  0649 C7 61 06      jne get_token_semi
0181+  064C F7            stosb          ; store ',' into token string
0182+  064D 19 00         mov al, 0
0183+  064F F7            stosb          ; terminate token string
0184+  0650 19 0B         mov al, TOK_COMMA
0185+  0652 3D 88 07      mov [tok], al      
0186+  0655 19 02         mov al, TOKTYP_DELIMITER
0187+  0657 3D 87 07      mov [toktyp], al
0188+  065A 4E            mov a, si
0189+  065B 42 85 07      mov [prog], a    ; update pointer
0190+  065E 0A 13 07      jmp get_token_return
0191+  0661             get_token_semi:
0192+  0661 B9 3B         cmp al, $3B        ; check if ';'
0193+  0663 C7 7B 06      jne get_token_colon
0194+  0666 F7            stosb          ; store ';' into token string
0195+  0667 19 00         mov al, 0
0196+  0669 F7            stosb          ; terminate token string
0197+  066A 19 06         mov al, TOK_SEMI
0198+  066C 3D 88 07      mov [tok], al      
0199+  066F 19 02         mov al, TOKTYP_DELIMITER
0200+  0671 3D 87 07      mov [toktyp], al
0201+  0674 4E            mov a, si
0202+  0675 42 85 07      mov [prog], a    ; update pointer
0203+  0678 0A 13 07      jmp get_token_return
0204+  067B             get_token_colon:
0205+  067B B9 3A         cmp al, $3A        ; check if ':'
0206+  067D C7 95 06      jne get_token_angle
0207+  0680 F7            stosb          ; store ':' into token string
0208+  0681 19 00         mov al, 0
0209+  0683 F7            stosb          ; terminate token string
0210+  0684 19 0A         mov al, TOK_COLON
0211+  0686 3D 88 07      mov [tok], al      
0212+  0689 19 02         mov al, TOKTYP_DELIMITER
0213+  068B 3D 87 07      mov [toktyp], al
0214+  068E 4E            mov a, si
0215+  068F 42 85 07      mov [prog], a    ; update pointer
0216+  0692 0A 13 07      jmp get_token_return
0217+  0695             get_token_angle:
0218+  0695 B9 3E         cmp al, $3E        ; check if '>'
0219+  0697 C7 AF 06      jne get_token_tilde
0220+  069A F7            stosb          ; store '>' into token string
0221+  069B 19 00         mov al, 0
0222+  069D F7            stosb          ; terminate token string
0223+  069E 19 07         mov al, TOK_ANGLE
0224+  06A0 3D 88 07      mov [tok], al      
0225+  06A3 19 02         mov al, TOKTYP_DELIMITER
0226+  06A5 3D 87 07      mov [toktyp], al
0227+  06A8 4E            mov a, si
0228+  06A9 42 85 07      mov [prog], a    ; update pointer
0229+  06AC 0A 13 07      jmp get_token_return
0230+  06AF             get_token_tilde:
0231+  06AF B9 7E         cmp al, '~'        ; check if '~'
0232+  06B1 C7 C9 06      jne get_token_equal
0233+  06B4 F7            stosb          ; store '~' into token string
0234+  06B5 19 00         mov al, 0
0235+  06B7 F7            stosb          ; terminate token string
0236+  06B8 19 08         mov al, TOK_TILDE
0237+  06BA 3D 88 07      mov [tok], al      
0238+  06BD 19 02         mov al, TOKTYP_DELIMITER
0239+  06BF 3D 87 07      mov [toktyp], al
0240+  06C2 4E            mov a, si
0241+  06C3 42 85 07      mov [prog], a    ; update pointer
0242+  06C6 0A 13 07      jmp get_token_return
0243+  06C9             get_token_equal:
0244+  06C9 B9 3D         cmp al, '='        ; check if '='
0245+  06CB C7 E3 06      jne get_token_skip
0246+  06CE F7            stosb          ; store '=' into token string
0247+  06CF 19 00         mov al, 0
0248+  06D1 F7            stosb          ; terminate token string
0249+  06D2 19 09         mov al, TOK_EQUAL
0250+  06D4 3D 88 07      mov [tok], al      
0251+  06D7 19 02         mov al, TOKTYP_DELIMITER
0252+  06D9 3D 87 07      mov [toktyp], al
0253+  06DC 4E            mov a, si
0254+  06DD 42 85 07      mov [prog], a    ; update pointer
0255+  06E0 0A 13 07      jmp get_token_return
0256+  06E3             get_token_skip:
0257+  06E3 4E            mov a, si
0258+  06E4 42 85 07      mov [prog], a    ; update pointer
0259+  06E7 0A 13 07      jmp get_token_return
0260+  06EA             get_token_end:        ; end of file token
0261+  06EA 19 14         mov al, TOK_END
0262+  06EC 3D 88 07      mov [tok], al
0263+  06EF 19 06         mov al, TOKTYP_END
0264+  06F1 3D 87 07      mov [toktyp], al
0265+  06F4 0A 13 07      jmp get_token_return
0266+  06F7             is_alphanumeric:
0267+  06F7 F7            stosb
0268+  06F8 F6            lodsb
0269+  06F9 07 BE 04      call _isalnum      ;check if is alphanumeric
0270+  06FC C6 F7 06      jz is_alphanumeric
0271+  06FF B9 2E         cmp al, $2E        ; check if is '.'
0272+  0701 C6 F7 06      je is_alphanumeric
0273+  0704 19 00         mov al, 0
0274+  0706 F7            stosb
0275+  0707 19 00         mov al, TOKTYP_IDENTIFIER
0276+  0709 3D 87 07      mov [toktyp], al
0277+  070C D5 01 00      sub si, 1
0278+  070F 4E            mov a, si
0279+  0710 42 85 07      mov [prog], a    ; update pointer
0280+  0713             get_token_return:
0281+  0713 F0            pop di
0282+  0714 EF            pop si
0283+  0715 E7            pop d
0284+  0716 E4            pop a
0285+  0717 09            ret
0286+  0718             get_tok_comment:
0287+  0718 F6            lodsb
0288+  0719 B9 0A         cmp al, $0A      ; new line
0289+  071B C7 18 07      jne get_tok_comment
0290+  071E 0A FC 05      jmp get_tok_skip_spaces
0291+  0721             
0292+  0721             
0293+  0721             get_number:
0294+  0721 D7            push a
0295+  0722 DA            push d
0296+  0723 E2            push si
0297+  0724 E3            push di
0298+  0725 19 00         mov al, 0
0299+  0727 3D 89 07      mov [tokstr], al      ; nullify tokstr string
0300+  072A 19 00         mov al, TOK_NULL
0301+  072C 3D 88 07      mov [tok], al        ; nullify token
0302+  072F 14 85 07      mov a, [prog]
0303+  0732 4D            mov si, a
0304+  0733 FD 4F 89 07   mov di, tokstr
0305+  0737             get_number_skip_spaces:
0306+  0737 F6            lodsb
0307+  0738 07 34 05      call _isspace
0308+  073B C6 37 07      je get_number_skip_spaces
0309+  073E B9 00         cmp al, 0      ; check for end of input (NULL)
0310+  0740 C7 50 07      jne get_number_L0
0311+  0743 19 14         mov al, TOK_END
0312+  0745 3D 88 07      mov [tok], al
0313+  0748 19 06         mov al, TOKTYP_END
0314+  074A 3D 87 07      mov [toktyp], al
0315+  074D 0A 67 07      jmp get_number_return
0316+  0750             get_number_L0:
0317+  0750 F7            stosb
0318+  0751 F6            lodsb
0319+  0752 07 C8 04      call _isdigit      ;check if is numeric
0320+  0755 C6 50 07      jz get_number_L0
0321+  0758 19 00         mov al, 0
0322+  075A F7            stosb
0323+  075B 19 05         mov al, TOKTYP_NUMERIC
0324+  075D 3D 87 07      mov [toktyp], al
0325+  0760 D5 01 00      sub si, 1
0326+  0763 4E            mov a, si
0327+  0764 42 85 07      mov [prog], a    ; update pointer
0328+  0767             get_number_return:
0329+  0767 F0            pop di
0330+  0768 EF            pop si
0331+  0769 E7            pop d
0332+  076A E4            pop a
0333+  076B 09            ret
0334+  076C             
0335+  076C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  076C             ;; PUT BACK TOKEN
0337+  076C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0338+  076C             _putback:
0339+  076C D7            push a
0340+  076D E2            push si
0341+  076E FD 4D 89 07   mov si, tokstr  
0342+  0772             _putback_loop:
0343+  0772 F6            lodsb
0344+  0773 B9 00         cmp al, 0
0345+  0775 C6 82 07      je _putback_end
0346+  0778 14 85 07      mov a, [prog]
0347+  077B 7D            dec a
0348+  077C 42 85 07      mov [prog], a      ; update pointer
0349+  077F 0A 72 07      jmp _putback_loop
0350+  0782             _putback_end:
0351+  0782 EF            pop si
0352+  0783 E4            pop a
0353+  0784 09            ret
0354+  0785             
0355+  0785             
0356+  0785             
0357+  0785             
0358+  0785 00 00       prog:      .dw 0          ; pointer to current position in buffer
0359+  0787             
0360+  0787 00          toktyp:    .db 0          ; token type symbol
0361+  0788 00          tok:       .db 0          ; current token symbol
0362+  0789 00 00 00 00 tokstr:    .fill 256, 0   ; token as a string
0362+  078D 00 00 00 00 
0362+  0791 00 00 00 00 
0362+  0795 00 00 00 00 
0362+  0799 00 00 00 00 
0362+  079D 00 00 00 00 
0362+  07A1 00 00 00 00 
0362+  07A5 00 00 00 00 
0362+  07A9 00 00 00 00 
0362+  07AD 00 00 00 00 
0362+  07B1 00 00 00 00 
0362+  07B5 00 00 00 00 
0362+  07B9 00 00 00 00 
0362+  07BD 00 00 00 00 
0362+  07C1 00 00 00 00 
0362+  07C5 00 00 00 00 
0362+  07C9 00 00 00 00 
0362+  07CD 00 00 00 00 
0362+  07D1 00 00 00 00 
0362+  07D5 00 00 00 00 
0362+  07D9 00 00 00 00 
0362+  07DD 00 00 00 00 
0362+  07E1 00 00 00 00 
0362+  07E5 00 00 00 00 
0362+  07E9 00 00 00 00 
0362+  07ED 00 00 00 00 
0362+  07F1 00 00 00 00 
0362+  07F5 00 00 00 00 
0362+  07F9 00 00 00 00 
0362+  07FD 00 00 00 00 
0362+  0801 00 00 00 00 
0362+  0805 00 00 00 00 
0362+  0809 00 00 00 00 
0362+  080D 00 00 00 00 
0362+  0811 00 00 00 00 
0362+  0815 00 00 00 00 
0362+  0819 00 00 00 00 
0362+  081D 00 00 00 00 
0362+  0821 00 00 00 00 
0362+  0825 00 00 00 00 
0362+  0829 00 00 00 00 
0362+  082D 00 00 00 00 
0362+  0831 00 00 00 00 
0362+  0835 00 00 00 00 
0362+  0839 00 00 00 00 
0362+  083D 00 00 00 00 
0362+  0841 00 00 00 00 
0362+  0845 00 00 00 00 
0362+  0849 00 00 00 00 
0362+  084D 00 00 00 00 
0362+  0851 00 00 00 00 
0362+  0855 00 00 00 00 
0362+  0859 00 00 00 00 
0362+  085D 00 00 00 00 
0362+  0861 00 00 00 00 
0362+  0865 00 00 00 00 
0362+  0869 00 00 00 00 
0362+  086D 00 00 00 00 
0362+  0871 00 00 00 00 
0362+  0875 00 00 00 00 
0362+  0879 00 00 00 00 
0362+  087D 00 00 00 00 
0362+  0881 00 00 00 00 
0362+  0885 00 00 00 00 
0030   0889             
0031   0889             .end
0032   0889             
0033   0889             
tasm: Number of errors = 0
