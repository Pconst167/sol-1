0001   0000             .include "lib/kernel.exp"
0001+  0000             sys_break        .EQU  $0000
0002+  0000             sys_rtc          .EQU  $0001
0003+  0000             sys_ide          .EQU  $0002
0004+  0000             sys_io           .EQU  $0003
0005+  0000             sys_filesystem   .EQU  $0004
0006+  0000             sys_create_proc  .EQU  $0005
0007+  0000             sys_list_proc    .EQU  $0006
0008+  0000             sys_datetime     .EQU  $0007
0009+  0000             sys_reboot       .EQU  $0008
0010+  0000             sys_pause_proc   .EQU  $0009
0011+  0000             sys_resume_proc  .EQU  $000a
0012+  0000             sys_terminate_proc .EQU  $000b
0013+  0000             sys_system       .EQU  $000c
0014+  0000             sys_fdc          .EQU  $000d
0015+  0000             text_org         .EQU  $0400
0002   0000             
0003   0400             .org text_org			; origin at 1024
0004   0400             
0005   0400             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006   0400             ;; RMDIR - remove DIR
0007   0400             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008   0400             ; deletes directory entry in the current directory's file list 
0009   0400             ; also deletes the actual directory entry in the FST
0010   0400             ; rmdir /my/first/dir /my/second/dir
0011   0400             ; rmdir /ends/with/semi;
0012   0400             ; rmdir ends/with/null
0013   0400             cmd_rmdir:
0014   0400 10 00 00    	mov a, 0
0015   0403 42 5A 06    	mov [prog], a
0016   0406             cmd_rmdir_L0:
0017   0406 07 BB 04    	call get_token
0018   0409 1D 5D 06    	mov al, [tok]
0019   040C B9 14       	cmp al, TOK_END
0020   040E C6 2B 04    	je cmd_rmdir_end
0021   0411 B9 06       	cmp al, TOK_SEMI
0022   0413 C6 2B 04    	je cmd_rmdir_end
0023   0416 07 41 06    	call _putback
0024   0419 07 64 04    	call get_path		; get path string in tokstr
0025   041C 3B 5E 06    	mov d, tokstr
0026   041F 19 13       	mov al, 19
0027   0421 05 04       	syscall sys_filesystem	; get dirID in A
0028   0423 27          	mov b, a
0029   0424 19 09       	mov al, 9
0030   0426 05 04       	syscall sys_filesystem	; rmdir syscall
0031   0428 0A 06 04    	jmp cmd_rmdir_L0
0032   042B             cmd_rmdir_end:
0033   042B 07 41 06    	call _putback		; if token was not an identifier, then put it back
0034   042E             
0035   042E 05 0B       	syscall sys_terminate_proc
0036   0430             
0037   0430             
0038   0430             .include "lib/token.asm"
0001+  0430             TOKTYP_IDENTIFIER  .equ 0
0002+  0430             TOKTYP_KEYWORD     .equ 1
0003+  0430             TOKTYP_DELIMITER   .equ 2
0004+  0430             TOKTYP_STRING      .equ 3
0005+  0430             TOKTYP_CHAR        .equ 4
0006+  0430             TOKTYP_NUMERIC     .equ 5
0007+  0430             TOKTYP_END         .equ 6
0008+  0430             
0009+  0430             TOK_NULL           .equ 0
0010+  0430             TOK_FSLASH         .equ 1
0011+  0430             TOK_TIMES          .equ 2
0012+  0430             TOK_PLUS           .equ 3
0013+  0430             TOK_MINUS          .equ 4
0014+  0430             TOK_DOT            .equ 5
0015+  0430             TOK_SEMI           .equ 6
0016+  0430             TOK_ANGLE          .equ 7
0017+  0430             TOK_TILDE          .equ 8
0018+  0430             TOK_EQUAL          .equ 9
0019+  0430             TOK_COLON          .equ 10
0020+  0430             TOK_COMMA          .equ 11
0021+  0430             
0022+  0430             TOK_END            .equ 20
0023+  0430             
0024+  0430             
0025+  0430             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0430             ;; read a full command argment from shell input buffer
0027+  0430             ;; argument is written into tokstr
0028+  0430             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  0430             get_arg:
0030+  0430 D7            push a
0031+  0431 E2            push si
0032+  0432 E3            push di
0033+  0433 19 00         mov al, 0
0034+  0435 3D 5E 06      mov [tokstr], al      ; nullify tokstr string
0035+  0438 14 5A 06      mov a, [prog]
0036+  043B 4D            mov si, a
0037+  043C FD 4F 5E 06   mov di, tokstr
0038+  0440             get_arg_skip_spaces:
0039+  0440 F6            lodsb
0040+  0441 07 46 0B      call _isspace
0041+  0444 C6 40 04      je get_arg_skip_spaces
0042+  0447             get_arg_L0:
0043+  0447 B9 3B         cmp al, $3B        ; check if is ';'
0044+  0449 C6 56 04      je get_arg_end
0045+  044C B9 00         cmp al, 0
0046+  044E C6 56 04      je get_arg_end      ; check if end of input
0047+  0451 F7            stosb
0048+  0452 F6            lodsb
0049+  0453 0A 47 04      jmp get_arg_L0
0050+  0456             get_arg_end:
0051+  0456 19 00         mov al, 0
0052+  0458 F7            stosb
0053+  0459 D5 01 00      sub si, 1
0054+  045C 4E            mov a, si
0055+  045D 42 5A 06      mov [prog], a    ; update pointer
0056+  0460 F0            pop di
0057+  0461 EF            pop si
0058+  0462 E4            pop a
0059+  0463 09            ret
0060+  0464             
0061+  0464             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0464             ;; read a path formation from shell input buffer
0063+  0464             ;; path is written into tokstr
0064+  0464             ;; /usr/bin
0065+  0464             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0464             get_path:
0067+  0464 D7            push a
0068+  0465 E2            push si
0069+  0466 E3            push di
0070+  0467 19 00         mov al, 0
0071+  0469 3D 5E 06      mov [tokstr], al      ; nullify tokstr string
0072+  046C 14 5A 06      mov a, [prog]
0073+  046F 4D            mov si, a
0074+  0470 FD 4F 5E 06   mov di, tokstr
0075+  0474             get_path_skip_spaces:
0076+  0474 F6            lodsb
0077+  0475 07 46 0B      call _isspace
0078+  0478 C6 74 04      je get_path_skip_spaces
0079+  047B             get_path_is_pathchar:
0080+  047B F7            stosb
0081+  047C F6            lodsb
0082+  047D 07 D0 0A      call _isalnum      ;check if is alphanumeric
0083+  0480 C6 7B 04      je get_path_is_pathchar
0084+  0483 B9 2F         cmp al, '/'        ; check if is '/'
0085+  0485 C6 7B 04      je get_path_is_pathchar
0086+  0488 19 00         mov al, 0
0087+  048A F7            stosb
0088+  048B D5 01 00      sub si, 1
0089+  048E 4E            mov a, si
0090+  048F 42 5A 06      mov [prog], a    ; update pointer
0091+  0492             get_path_end:
0092+  0492 F0            pop di
0093+  0493 EF            pop si
0094+  0494 E4            pop a
0095+  0495 09            ret
0096+  0496             
0097+  0496             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  0496             ;; read a line
0099+  0496             ;; line is written into tokstr
0100+  0496             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  0496             get_line:
0102+  0496 D7            push a
0103+  0497 E2            push si
0104+  0498 E3            push di
0105+  0499 19 00         mov al, 0
0106+  049B 3D 5E 06      mov [tokstr], al      ; nullify tokstr string
0107+  049E 14 5A 06      mov a, [prog]
0108+  04A1 4D            mov si, a
0109+  04A2 FD 4F 5E 06   mov di, tokstr
0110+  04A6             get_line_L0:
0111+  04A6 F6            lodsb
0112+  04A7 B9 0A         cmp al, $0A    ; check for new line
0113+  04A9 C6 B0 04      je get_line_exit
0114+  04AC F7            stosb
0115+  04AD 0A A6 04      jmp get_line_L0
0116+  04B0             get_line_exit:
0117+  04B0 19 00         mov al, 0
0118+  04B2 F7            stosb
0119+  04B3 4E            mov a, si
0120+  04B4 42 5A 06      mov [prog], a    ; update pointer
0121+  04B7 F0            pop di
0122+  04B8 EF            pop si
0123+  04B9 E4            pop a
0124+  04BA 09            ret
0125+  04BB             
0126+  04BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  04BB             ;; token parser
0128+  04BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  04BB             get_token:
0130+  04BB D7            push a
0131+  04BC DA            push d
0132+  04BD E2            push si
0133+  04BE E3            push di
0134+  04BF 19 00         mov al, 0
0135+  04C1 3D 5E 06      mov [tokstr], al      ; nullify tokstr string
0136+  04C4 19 00         mov al, TOK_NULL
0137+  04C6 3D 5D 06      mov [tok], al        ; nullify token
0138+  04C9 14 5A 06      mov a, [prog]
0139+  04CC 4D            mov si, a
0140+  04CD FD 4F 5E 06   mov di, tokstr
0141+  04D1             get_tok_skip_spaces:
0142+  04D1 F6            lodsb
0143+  04D2 07 46 0B      call _isspace
0144+  04D5 C6 D1 04      je get_tok_skip_spaces
0145+  04D8 B9 00         cmp al, 0      ; check for end of input (NULL)
0146+  04DA C6 BF 05      je get_token_end
0147+  04DD B9 23         cmp al, '#'      ; comments!
0148+  04DF C6 ED 05      je get_tok_comment
0149+  04E2 07 D0 0A      call _isalnum
0150+  04E5 C6 CC 05      jz is_alphanumeric
0151+  04E8             ; other token types
0152+  04E8             get_token_slash:
0153+  04E8 B9 2F         cmp al, '/'        ; check if '/'
0154+  04EA C7 02 05      jne get_token_minus
0155+  04ED F7            stosb          ; store '/' into token string
0156+  04EE 19 00         mov al, 0
0157+  04F0 F7            stosb          ; terminate token string
0158+  04F1 19 01         mov al, TOK_FSLASH
0159+  04F3 3D 5D 06      mov [tok], al      
0160+  04F6 19 02         mov al, TOKTYP_DELIMITER
0161+  04F8 3D 5C 06      mov [toktyp], al
0162+  04FB 4E            mov a, si
0163+  04FC 42 5A 06      mov [prog], a    ; update pointer
0164+  04FF 0A E8 05      jmp get_token_return
0165+  0502             get_token_minus:
0166+  0502 B9 2D         cmp al, '-'        ; check if '-'
0167+  0504 C7 1C 05      jne get_token_comma
0168+  0507 F7            stosb          ; store '-' into token string
0169+  0508 19 00         mov al, 0
0170+  050A F7            stosb          ; terminate token string
0171+  050B 19 04         mov al, TOK_MINUS
0172+  050D 3D 5D 06      mov [tok], al      
0173+  0510 19 02         mov al, TOKTYP_DELIMITER
0174+  0512 3D 5C 06      mov [toktyp], al
0175+  0515 4E            mov a, si
0176+  0516 42 5A 06      mov [prog], a    ; update pointer
0177+  0519 0A E8 05      jmp get_token_return
0178+  051C             get_token_comma:
0179+  051C B9 2C         cmp al, ','        ; check if ','
0180+  051E C7 36 05      jne get_token_semi
0181+  0521 F7            stosb          ; store ',' into token string
0182+  0522 19 00         mov al, 0
0183+  0524 F7            stosb          ; terminate token string
0184+  0525 19 0B         mov al, TOK_COMMA
0185+  0527 3D 5D 06      mov [tok], al      
0186+  052A 19 02         mov al, TOKTYP_DELIMITER
0187+  052C 3D 5C 06      mov [toktyp], al
0188+  052F 4E            mov a, si
0189+  0530 42 5A 06      mov [prog], a    ; update pointer
0190+  0533 0A E8 05      jmp get_token_return
0191+  0536             get_token_semi:
0192+  0536 B9 3B         cmp al, $3B        ; check if ';'
0193+  0538 C7 50 05      jne get_token_colon
0194+  053B F7            stosb          ; store ';' into token string
0195+  053C 19 00         mov al, 0
0196+  053E F7            stosb          ; terminate token string
0197+  053F 19 06         mov al, TOK_SEMI
0198+  0541 3D 5D 06      mov [tok], al      
0199+  0544 19 02         mov al, TOKTYP_DELIMITER
0200+  0546 3D 5C 06      mov [toktyp], al
0201+  0549 4E            mov a, si
0202+  054A 42 5A 06      mov [prog], a    ; update pointer
0203+  054D 0A E8 05      jmp get_token_return
0204+  0550             get_token_colon:
0205+  0550 B9 3A         cmp al, $3A        ; check if ':'
0206+  0552 C7 6A 05      jne get_token_angle
0207+  0555 F7            stosb          ; store ':' into token string
0208+  0556 19 00         mov al, 0
0209+  0558 F7            stosb          ; terminate token string
0210+  0559 19 0A         mov al, TOK_COLON
0211+  055B 3D 5D 06      mov [tok], al      
0212+  055E 19 02         mov al, TOKTYP_DELIMITER
0213+  0560 3D 5C 06      mov [toktyp], al
0214+  0563 4E            mov a, si
0215+  0564 42 5A 06      mov [prog], a    ; update pointer
0216+  0567 0A E8 05      jmp get_token_return
0217+  056A             get_token_angle:
0218+  056A B9 3E         cmp al, $3E        ; check if '>'
0219+  056C C7 84 05      jne get_token_tilde
0220+  056F F7            stosb          ; store '>' into token string
0221+  0570 19 00         mov al, 0
0222+  0572 F7            stosb          ; terminate token string
0223+  0573 19 07         mov al, TOK_ANGLE
0224+  0575 3D 5D 06      mov [tok], al      
0225+  0578 19 02         mov al, TOKTYP_DELIMITER
0226+  057A 3D 5C 06      mov [toktyp], al
0227+  057D 4E            mov a, si
0228+  057E 42 5A 06      mov [prog], a    ; update pointer
0229+  0581 0A E8 05      jmp get_token_return
0230+  0584             get_token_tilde:
0231+  0584 B9 7E         cmp al, '~'        ; check if '~'
0232+  0586 C7 9E 05      jne get_token_equal
0233+  0589 F7            stosb          ; store '~' into token string
0234+  058A 19 00         mov al, 0
0235+  058C F7            stosb          ; terminate token string
0236+  058D 19 08         mov al, TOK_TILDE
0237+  058F 3D 5D 06      mov [tok], al      
0238+  0592 19 02         mov al, TOKTYP_DELIMITER
0239+  0594 3D 5C 06      mov [toktyp], al
0240+  0597 4E            mov a, si
0241+  0598 42 5A 06      mov [prog], a    ; update pointer
0242+  059B 0A E8 05      jmp get_token_return
0243+  059E             get_token_equal:
0244+  059E B9 3D         cmp al, '='        ; check if '='
0245+  05A0 C7 B8 05      jne get_token_skip
0246+  05A3 F7            stosb          ; store '=' into token string
0247+  05A4 19 00         mov al, 0
0248+  05A6 F7            stosb          ; terminate token string
0249+  05A7 19 09         mov al, TOK_EQUAL
0250+  05A9 3D 5D 06      mov [tok], al      
0251+  05AC 19 02         mov al, TOKTYP_DELIMITER
0252+  05AE 3D 5C 06      mov [toktyp], al
0253+  05B1 4E            mov a, si
0254+  05B2 42 5A 06      mov [prog], a    ; update pointer
0255+  05B5 0A E8 05      jmp get_token_return
0256+  05B8             get_token_skip:
0257+  05B8 4E            mov a, si
0258+  05B9 42 5A 06      mov [prog], a    ; update pointer
0259+  05BC 0A E8 05      jmp get_token_return
0260+  05BF             get_token_end:        ; end of file token
0261+  05BF 19 14         mov al, TOK_END
0262+  05C1 3D 5D 06      mov [tok], al
0263+  05C4 19 06         mov al, TOKTYP_END
0264+  05C6 3D 5C 06      mov [toktyp], al
0265+  05C9 0A E8 05      jmp get_token_return
0266+  05CC             is_alphanumeric:
0267+  05CC F7            stosb
0268+  05CD F6            lodsb
0269+  05CE 07 D0 0A      call _isalnum      ;check if is alphanumeric
0270+  05D1 C6 CC 05      jz is_alphanumeric
0271+  05D4 B9 2E         cmp al, $2E        ; check if is '.'
0272+  05D6 C6 CC 05      je is_alphanumeric
0273+  05D9 19 00         mov al, 0
0274+  05DB F7            stosb
0275+  05DC 19 00         mov al, TOKTYP_IDENTIFIER
0276+  05DE 3D 5C 06      mov [toktyp], al
0277+  05E1 D5 01 00      sub si, 1
0278+  05E4 4E            mov a, si
0279+  05E5 42 5A 06      mov [prog], a    ; update pointer
0280+  05E8             get_token_return:
0281+  05E8 F0            pop di
0282+  05E9 EF            pop si
0283+  05EA E7            pop d
0284+  05EB E4            pop a
0285+  05EC 09            ret
0286+  05ED             get_tok_comment:
0287+  05ED F6            lodsb
0288+  05EE B9 0A         cmp al, $0A      ; new line
0289+  05F0 C7 ED 05      jne get_tok_comment
0290+  05F3 0A D1 04      jmp get_tok_skip_spaces
0291+  05F6             
0292+  05F6             
0293+  05F6             get_number:
0294+  05F6 D7            push a
0295+  05F7 DA            push d
0296+  05F8 E2            push si
0297+  05F9 E3            push di
0298+  05FA 19 00         mov al, 0
0299+  05FC 3D 5E 06      mov [tokstr], al      ; nullify tokstr string
0300+  05FF 19 00         mov al, TOK_NULL
0301+  0601 3D 5D 06      mov [tok], al        ; nullify token
0302+  0604 14 5A 06      mov a, [prog]
0303+  0607 4D            mov si, a
0304+  0608 FD 4F 5E 06   mov di, tokstr
0305+  060C             get_number_skip_spaces:
0306+  060C F6            lodsb
0307+  060D 07 46 0B      call _isspace
0308+  0610 C6 0C 06      je get_number_skip_spaces
0309+  0613 B9 00         cmp al, 0      ; check for end of input (NULL)
0310+  0615 C7 25 06      jne get_number_L0
0311+  0618 19 14         mov al, TOK_END
0312+  061A 3D 5D 06      mov [tok], al
0313+  061D 19 06         mov al, TOKTYP_END
0314+  061F 3D 5C 06      mov [toktyp], al
0315+  0622 0A 3C 06      jmp get_number_return
0316+  0625             get_number_L0:
0317+  0625 F7            stosb
0318+  0626 F6            lodsb
0319+  0627 07 DA 0A      call _isdigit      ;check if is numeric
0320+  062A C6 25 06      jz get_number_L0
0321+  062D 19 00         mov al, 0
0322+  062F F7            stosb
0323+  0630 19 05         mov al, TOKTYP_NUMERIC
0324+  0632 3D 5C 06      mov [toktyp], al
0325+  0635 D5 01 00      sub si, 1
0326+  0638 4E            mov a, si
0327+  0639 42 5A 06      mov [prog], a    ; update pointer
0328+  063C             get_number_return:
0329+  063C F0            pop di
0330+  063D EF            pop si
0331+  063E E7            pop d
0332+  063F E4            pop a
0333+  0640 09            ret
0334+  0641             
0335+  0641             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  0641             ;; PUT BACK TOKEN
0337+  0641             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0338+  0641             _putback:
0339+  0641 D7            push a
0340+  0642 E2            push si
0341+  0643 FD 4D 5E 06   mov si, tokstr  
0342+  0647             _putback_loop:
0343+  0647 F6            lodsb
0344+  0648 B9 00         cmp al, 0
0345+  064A C6 57 06      je _putback_end
0346+  064D 14 5A 06      mov a, [prog]
0347+  0650 7D            dec a
0348+  0651 42 5A 06      mov [prog], a      ; update pointer
0349+  0654 0A 47 06      jmp _putback_loop
0350+  0657             _putback_end:
0351+  0657 EF            pop si
0352+  0658 E4            pop a
0353+  0659 09            ret
0354+  065A             
0355+  065A             
0356+  065A             
0357+  065A             
0358+  065A 00 00       prog:      .dw 0          ; pointer to current position in buffer
0359+  065C             
0360+  065C 00          toktyp:    .db 0          ; token type symbol
0361+  065D 00          tok:       .db 0          ; current token symbol
0362+  065E 00 00 00 00 tokstr:    .fill 256, 0   ; token as a string
0362+  0662 00 00 00 00 
0362+  0666 00 00 00 00 
0362+  066A 00 00 00 00 
0362+  066E 00 00 00 00 
0362+  0672 00 00 00 00 
0362+  0676 00 00 00 00 
0362+  067A 00 00 00 00 
0362+  067E 00 00 00 00 
0362+  0682 00 00 00 00 
0362+  0686 00 00 00 00 
0362+  068A 00 00 00 00 
0362+  068E 00 00 00 00 
0362+  0692 00 00 00 00 
0362+  0696 00 00 00 00 
0362+  069A 00 00 00 00 
0362+  069E 00 00 00 00 
0362+  06A2 00 00 00 00 
0362+  06A6 00 00 00 00 
0362+  06AA 00 00 00 00 
0362+  06AE 00 00 00 00 
0362+  06B2 00 00 00 00 
0362+  06B6 00 00 00 00 
0362+  06BA 00 00 00 00 
0362+  06BE 00 00 00 00 
0362+  06C2 00 00 00 00 
0362+  06C6 00 00 00 00 
0362+  06CA 00 00 00 00 
0362+  06CE 00 00 00 00 
0362+  06D2 00 00 00 00 
0362+  06D6 00 00 00 00 
0362+  06DA 00 00 00 00 
0362+  06DE 00 00 00 00 
0362+  06E2 00 00 00 00 
0362+  06E6 00 00 00 00 
0362+  06EA 00 00 00 00 
0362+  06EE 00 00 00 00 
0362+  06F2 00 00 00 00 
0362+  06F6 00 00 00 00 
0362+  06FA 00 00 00 00 
0362+  06FE 00 00 00 00 
0362+  0702 00 00 00 00 
0362+  0706 00 00 00 00 
0362+  070A 00 00 00 00 
0362+  070E 00 00 00 00 
0362+  0712 00 00 00 00 
0362+  0716 00 00 00 00 
0362+  071A 00 00 00 00 
0362+  071E 00 00 00 00 
0362+  0722 00 00 00 00 
0362+  0726 00 00 00 00 
0362+  072A 00 00 00 00 
0362+  072E 00 00 00 00 
0362+  0732 00 00 00 00 
0362+  0736 00 00 00 00 
0362+  073A 00 00 00 00 
0362+  073E 00 00 00 00 
0362+  0742 00 00 00 00 
0362+  0746 00 00 00 00 
0362+  074A 00 00 00 00 
0362+  074E 00 00 00 00 
0362+  0752 00 00 00 00 
0362+  0756 00 00 00 00 
0362+  075A 00 00 00 00 
0039   075E             .include "lib/stdio.asm"
0001+  075E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  075E             ; stdio.s
0003+  075E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  075E             .include "lib/string.asm"
0001++ 075E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 075E             ; string.s
0003++ 075E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 075E             
0005++ 075E             
0006++ 075E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 075E             ; _strrev
0008++ 075E             ; reverse a string
0009++ 075E             ; D = string address
0010++ 075E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 075E             ; 01234
0012++ 075E             _strrev:
0013++ 075E 4B          	pusha
0014++ 075F 07 A5 07    	call _strlen	; length in C
0015++ 0762 12          	mov a, c
0016++ 0763 AF 01 00    	cmp a, 1
0017++ 0766 D0 80 07    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 0769 7D          	dec a
0019++ 076A FD 4E       	mov si, d	; beginning of string
0020++ 076C FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 076E 59          	add d, a	; end of string
0022++ 076F 12          	mov a, c
0023++ 0770 FD 9B       	shr a		; divide by 2
0024++ 0772 39          	mov c, a	; C now counts the steps
0025++ 0773             _strrev_L0:
0026++ 0773 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0774 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0775 3E          	mov [d], al	; store left char into right side
0029++ 0776 1B          	mov al, bl
0030++ 0777 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0778 7E          	dec c
0032++ 0779 7F          	dec d
0033++ 077A C2 00 00    	cmp c, 0
0034++ 077D C7 73 07    	jne _strrev_L0
0035++ 0780             _strrev_end:
0036++ 0780 4C          	popa
0037++ 0781 09          	ret
0038++ 0782             	
0039++ 0782             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0782             ; _strchr
0041++ 0782             ; search string in D for char in AL
0042++ 0782             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0782             _strchr:
0044++ 0782             _strchr_L0:
0045++ 0782 32          	mov bl, [d]
0046++ 0783 C1 00       	cmp bl, 0
0047++ 0785 C6 90 07    	je _strchr_end
0048++ 0788 BA          	cmp al, bl
0049++ 0789 C6 90 07    	je _strchr_end
0050++ 078C 79          	inc d
0051++ 078D 0A 82 07    	jmp _strchr_L0
0052++ 0790             _strchr_end:
0053++ 0790 1B          	mov al, bl
0054++ 0791 09          	ret
0055++ 0792             
0056++ 0792             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0792             ; _strstr
0058++ 0792             ; find sub-string
0059++ 0792             ; str1 in SI
0060++ 0792             ; str2 in DI
0061++ 0792             ; SI points to end of source string
0062++ 0792             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0792             _strstr:
0064++ 0792 DB          	push al
0065++ 0793 DA          	push d
0066++ 0794 E3          	push di
0067++ 0795             _strstr_loop:
0068++ 0795 F3          	cmpsb					; compare a byte of the strings
0069++ 0796 C7 A1 07    	jne _strstr_ret
0070++ 0799 FC 00 00    	lea d, [di + 0]
0071++ 079C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 079E C7 95 07    	jne _strstr_loop				; equal chars but not at end
0073++ 07A1             _strstr_ret:
0074++ 07A1 F0          	pop di
0075++ 07A2 E7          	pop d
0076++ 07A3 E8          	pop al
0077++ 07A4 09          	ret
0078++ 07A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 07A5             ; length of null terminated string
0080++ 07A5             ; result in C
0081++ 07A5             ; pointer in D
0082++ 07A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 07A5             _strlen:
0084++ 07A5 DA          	push d
0085++ 07A6 38 00 00    	mov c, 0
0086++ 07A9             _strlen_L1:
0087++ 07A9 BD 00       	cmp byte [d], 0
0088++ 07AB C6 B3 07    	je _strlen_ret
0089++ 07AE 79          	inc d
0090++ 07AF 78          	inc c
0091++ 07B0 0A A9 07    	jmp _strlen_L1
0092++ 07B3             _strlen_ret:
0093++ 07B3 E7          	pop d
0094++ 07B4 09          	ret
0095++ 07B5             
0096++ 07B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 07B5             ; STRCMP
0098++ 07B5             ; compare two strings
0099++ 07B5             ; str1 in SI
0100++ 07B5             ; str2 in DI
0101++ 07B5             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 07B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 07B5             _strcmp:
0104++ 07B5 DB          	push al
0105++ 07B6 DA          	push d
0106++ 07B7 E3          	push di
0107++ 07B8 E2          	push si
0108++ 07B9             _strcmp_loop:
0109++ 07B9 F3          	cmpsb					; compare a byte of the strings
0110++ 07BA C7 C5 07    	jne _strcmp_ret
0111++ 07BD FB FF FF    	lea d, [si +- 1]
0112++ 07C0 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 07C2 C7 B9 07    	jne _strcmp_loop				; equal chars but not at end
0114++ 07C5             _strcmp_ret:
0115++ 07C5 EF          	pop si
0116++ 07C6 F0          	pop di
0117++ 07C7 E7          	pop d
0118++ 07C8 E8          	pop al
0119++ 07C9 09          	ret
0120++ 07CA             
0121++ 07CA             
0122++ 07CA             ; STRCPY
0123++ 07CA             ; copy null terminated string from SI to DI
0124++ 07CA             ; source in SI
0125++ 07CA             ; destination in DI
0126++ 07CA             _strcpy:
0127++ 07CA E2          	push si
0128++ 07CB E3          	push di
0129++ 07CC DB          	push al
0130++ 07CD             _strcpy_L1:
0131++ 07CD F6          	lodsb
0132++ 07CE F7          	stosb
0133++ 07CF B9 00       	cmp al, 0
0134++ 07D1 C7 CD 07    	jne _strcpy_L1
0135++ 07D4             _strcpy_end:
0136++ 07D4 E8          	pop al
0137++ 07D5 F0          	pop di
0138++ 07D6 EF          	pop si
0139++ 07D7 09          	ret
0140++ 07D8             
0141++ 07D8             ; STRCAT
0142++ 07D8             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 07D8             ; source in SI
0144++ 07D8             ; destination in DI
0145++ 07D8             _strcat:
0146++ 07D8 E2          	push si
0147++ 07D9 E3          	push di
0148++ 07DA D7          	push a
0149++ 07DB DA          	push d
0150++ 07DC 50          	mov a, di
0151++ 07DD 3C          	mov d, a
0152++ 07DE             _strcat_goto_end_L1:
0153++ 07DE BD 00       	cmp byte[d], 0
0154++ 07E0 C6 E7 07    	je _strcat_start
0155++ 07E3 79          	inc d
0156++ 07E4 0A DE 07    	jmp _strcat_goto_end_L1
0157++ 07E7             _strcat_start:
0158++ 07E7 FD 50       	mov di, d
0159++ 07E9             _strcat_L1:
0160++ 07E9 F6          	lodsb
0161++ 07EA F7          	stosb
0162++ 07EB B9 00       	cmp al, 0
0163++ 07ED C7 E9 07    	jne _strcat_L1
0164++ 07F0             _strcat_end:
0165++ 07F0 E7          	pop d
0166++ 07F1 E4          	pop a
0167++ 07F2 F0          	pop di
0168++ 07F3 EF          	pop si
0169++ 07F4 09          	ret
0170++ 07F5             
0171++ 07F5             
0005+  07F5             
0006+  07F5             
0007+  07F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  07F5             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  07F5             ; ASCII in BL
0010+  07F5             ; result in AL
0011+  07F5             ; ascii for F = 0100 0110
0012+  07F5             ; ascii for 9 = 0011 1001
0013+  07F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  07F5             hex_ascii_encode:
0015+  07F5 1B            mov al, bl
0016+  07F6 93 40         test al, $40        ; test if letter or number
0017+  07F8 C7 FE 07      jnz hex_letter
0018+  07FB 87 0F         and al, $0F        ; get number
0019+  07FD 09            ret
0020+  07FE             hex_letter:
0021+  07FE 87 0F         and al, $0F        ; get letter
0022+  0800 6A 09         add al, 9
0023+  0802 09            ret
0024+  0803             
0025+  0803             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0803             ; ATOI
0027+  0803             ; 2 letter hex string in B
0028+  0803             ; 8bit integer returned in AL
0029+  0803             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  0803             _atoi:
0031+  0803 D8            push b
0032+  0804 07 F5 07      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  0807 30            mov bl, bh
0034+  0808 DB            push al          ; save a
0035+  0809 07 F5 07      call hex_ascii_encode
0036+  080C EA            pop bl  
0037+  080D FD 9E 04      shl al, 4
0038+  0810 8C            or al, bl
0039+  0811 E5            pop b
0040+  0812 09            ret  
0041+  0813             
0042+  0813             
0043+  0813             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  0813             ; scanf
0045+  0813             ; no need for explanations!
0046+  0813             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  0813             scanf:
0048+  0813 09            ret
0049+  0814             
0050+  0814             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0814             ; ITOA
0052+  0814             ; 8bit value in BL
0053+  0814             ; 2 byte ASCII result in A
0054+  0814             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0814             _itoa:
0056+  0814 DA            push d
0057+  0815 D8            push b
0058+  0816 A7 00         mov bh, 0
0059+  0818 FD A4 04      shr bl, 4  
0060+  081B 74            mov d, b
0061+  081C 1F AE 0A      mov al, [d + s_hex_digits]
0062+  081F 23            mov ah, al
0063+  0820               
0064+  0820 E5            pop b
0065+  0821 D8            push b
0066+  0822 A7 00         mov bh, 0
0067+  0824 FD 87 0F      and bl, $0F
0068+  0827 74            mov d, b
0069+  0828 1F AE 0A      mov al, [d + s_hex_digits]
0070+  082B E5            pop b
0071+  082C E7            pop d
0072+  082D 09            ret
0073+  082E             
0074+  082E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  082E             ; HEX STRING TO BINARY
0076+  082E             ; di = destination address
0077+  082E             ; si = source
0078+  082E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  082E             _hex_to_int:
0080+  082E             _hex_to_int_L1:
0081+  082E F6            lodsb          ; load from [SI] to AL
0082+  082F B9 00         cmp al, 0        ; check if ASCII 0
0083+  0831 C6 3E 08      jz _hex_to_int_ret
0084+  0834 36            mov bh, al
0085+  0835 F6            lodsb
0086+  0836 2F            mov bl, al
0087+  0837 07 03 08      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  083A F7            stosb          ; store AL to [DI]
0089+  083B 0A 2E 08      jmp _hex_to_int_L1
0090+  083E             _hex_to_int_ret:
0091+  083E 09            ret    
0092+  083F             
0093+  083F             
0094+  083F             
0095+  083F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  083F             ; GETCHAR
0097+  083F             ; char in ah
0098+  083F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  083F             getch:
0100+  083F DB            push al
0101+  0840             getch_retry:
0102+  0840 19 01         mov al, 1
0103+  0842 05 03         syscall sys_io      ; receive in AH
0104+  0844 E8            pop al
0105+  0845 09            ret
0106+  0846             
0107+  0846             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  0846             ; PUTCHAR
0109+  0846             ; char in ah
0110+  0846             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0846             _putchar:
0112+  0846 DB            push al
0113+  0847 19 00         mov al, 0
0114+  0849 05 03         syscall sys_io      ; char in AH
0115+  084B E8            pop al
0116+  084C 09            ret
0117+  084D             
0118+  084D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  084D             ;; INPUT A STRING
0120+  084D             ;; terminates with null
0121+  084D             ;; pointer in D
0122+  084D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  084D             _gets:
0124+  084D D7            push a
0125+  084E DA            push d
0126+  084F             _gets_loop:
0127+  084F 19 01         mov al, 1
0128+  0851 05 03         syscall sys_io      ; receive in AH
0129+  0853 76 1B         cmp ah, 27
0130+  0855 C6 76 08      je _gets_ansi_esc
0131+  0858 76 0A         cmp ah, $0A        ; LF
0132+  085A C6 D2 08      je _gets_end
0133+  085D 76 0D         cmp ah, $0D        ; CR
0134+  085F C6 D2 08      je _gets_end
0135+  0862 76 5C         cmp ah, $5C        ; '\\'
0136+  0864 C6 98 08      je _gets_escape
0137+  0867 76 08         cmp ah, $08      ; check for backspace
0138+  0869 C6 72 08      je _gets_backspace
0139+  086C 1A            mov al, ah
0140+  086D 3E            mov [d], al
0141+  086E 79            inc d
0142+  086F 0A 4F 08      jmp _gets_loop
0143+  0872             _gets_backspace:
0144+  0872 7F            dec d
0145+  0873 0A 4F 08      jmp _gets_loop
0146+  0876             _gets_ansi_esc:
0147+  0876 19 01         mov al, 1
0148+  0878 05 03         syscall sys_io        ; receive in AH without echo
0149+  087A 76 5B         cmp ah, '['
0150+  087C C7 4F 08      jne _gets_loop
0151+  087F 19 01         mov al, 1
0152+  0881 05 03         syscall sys_io          ; receive in AH without echo
0153+  0883 76 44         cmp ah, 'D'
0154+  0885 C6 90 08      je _gets_left_arrow
0155+  0888 76 43         cmp ah, 'C'
0156+  088A C6 94 08      je _gets_right_arrow
0157+  088D 0A 4F 08      jmp _gets_loop
0158+  0890             _gets_left_arrow:
0159+  0890 7F            dec d
0160+  0891 0A 4F 08      jmp _gets_loop
0161+  0894             _gets_right_arrow:
0162+  0894 79            inc d
0163+  0895 0A 4F 08      jmp _gets_loop
0164+  0898             _gets_escape:
0165+  0898 19 01         mov al, 1
0166+  089A 05 03         syscall sys_io      ; receive in AH
0167+  089C 76 6E         cmp ah, 'n'
0168+  089E C6 BD 08      je _gets_LF
0169+  08A1 76 72         cmp ah, 'r'
0170+  08A3 C6 C4 08      je _gets_CR
0171+  08A6 76 30         cmp ah, '0'
0172+  08A8 C6 CB 08      je _gets_NULL
0173+  08AB 76 5C         cmp ah, $5C  ; '\'
0174+  08AD C6 B6 08      je _gets_slash
0175+  08B0 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  08B1 3E            mov [d], al
0177+  08B2 79            inc d
0178+  08B3 0A 4F 08      jmp _gets_loop
0179+  08B6             _gets_slash:
0180+  08B6 19 5C         mov al, $5C
0181+  08B8 3E            mov [d], al
0182+  08B9 79            inc d
0183+  08BA 0A 4F 08      jmp _gets_loop
0184+  08BD             _gets_LF:
0185+  08BD 19 0A         mov al, $0A
0186+  08BF 3E            mov [d], al
0187+  08C0 79            inc d
0188+  08C1 0A 4F 08      jmp _gets_loop
0189+  08C4             _gets_CR:
0190+  08C4 19 0D         mov al, $0D
0191+  08C6 3E            mov [d], al
0192+  08C7 79            inc d
0193+  08C8 0A 4F 08      jmp _gets_loop
0194+  08CB             _gets_NULL:
0195+  08CB 19 00         mov al, $00
0196+  08CD 3E            mov [d], al
0197+  08CE 79            inc d
0198+  08CF 0A 4F 08      jmp _gets_loop
0199+  08D2             _gets_end:
0200+  08D2 19 00         mov al, 0
0201+  08D4 3E            mov [d], al        ; terminate string
0202+  08D5 E7            pop d
0203+  08D6 E4            pop a
0204+  08D7 09            ret
0205+  08D8             
0206+  08D8             
0207+  08D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  08D8             ;; INPUT TEXT
0209+  08D8             ;; terminated with CTRL+D
0210+  08D8             ;; pointer in D
0211+  08D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  08D8             _gettxt:
0213+  08D8 D7            push a
0214+  08D9 DA            push d
0215+  08DA             _gettxt_loop:
0216+  08DA 19 01         mov al, 1
0217+  08DC 05 03         syscall sys_io      ; receive in AH
0218+  08DE 76 04         cmp ah, 4      ; EOT
0219+  08E0 C6 19 09      je _gettxt_end
0220+  08E3 76 08         cmp ah, $08      ; check for backspace
0221+  08E5 C6 15 09      je _gettxt_backspace
0222+  08E8 76 5C         cmp ah, $5C        ; '\'
0223+  08EA C6 F3 08      je _gettxt_escape
0224+  08ED 1A            mov al, ah
0225+  08EE 3E            mov [d], al
0226+  08EF 79            inc d
0227+  08F0 0A DA 08      jmp _gettxt_loop
0228+  08F3             _gettxt_escape:
0229+  08F3 19 01         mov al, 1
0230+  08F5 05 03         syscall sys_io      ; receive in AH
0231+  08F7 76 6E         cmp ah, 'n'
0232+  08F9 C6 07 09      je _gettxt_LF
0233+  08FC 76 72         cmp ah, 'r'
0234+  08FE C6 0E 09      je _gettxt_CR
0235+  0901 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  0902 3E            mov [d], al
0237+  0903 79            inc d
0238+  0904 0A DA 08      jmp _gettxt_loop
0239+  0907             _gettxt_LF:
0240+  0907 19 0A         mov al, $0A
0241+  0909 3E            mov [d], al
0242+  090A 79            inc d
0243+  090B 0A DA 08      jmp _gettxt_loop
0244+  090E             _gettxt_CR:
0245+  090E 19 0D         mov al, $0D
0246+  0910 3E            mov [d], al
0247+  0911 79            inc d
0248+  0912 0A DA 08      jmp _gettxt_loop
0249+  0915             _gettxt_backspace:
0250+  0915 7F            dec d
0251+  0916 0A DA 08      jmp _gettxt_loop
0252+  0919             _gettxt_end:
0253+  0919 19 00         mov al, 0
0254+  091B 3E            mov [d], al        ; terminate string
0255+  091C E7            pop d
0256+  091D E4            pop a
0257+  091E 09            ret
0258+  091F             
0259+  091F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  091F             ; PRINT NEW LINE
0261+  091F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  091F             printnl:
0263+  091F D7            push a
0264+  0920 10 00 0A      mov a, $0A00
0265+  0923 05 03         syscall sys_io
0266+  0925 10 00 0D      mov a, $0D00
0267+  0928 05 03         syscall sys_io
0268+  092A E4            pop a
0269+  092B 09            ret
0270+  092C             
0271+  092C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  092C             ; _strtoint
0273+  092C             ; 4 digit hex string number in d
0274+  092C             ; integer returned in A
0275+  092C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  092C             _strtointx:
0277+  092C D8            push b
0278+  092D 32            mov bl, [d]
0279+  092E 37            mov bh, bl
0280+  092F 33 01 00      mov bl, [d + 1]
0281+  0932 07 03 08      call _atoi        ; convert to int in AL
0282+  0935 23            mov ah, al        ; move to AH
0283+  0936 33 02 00      mov bl, [d + 2]
0284+  0939 37            mov bh, bl
0285+  093A 33 03 00      mov bl, [d + 3]
0286+  093D 07 03 08      call _atoi        ; convert to int in AL
0287+  0940 E5            pop b
0288+  0941 09            ret
0289+  0942             
0290+  0942             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  0942             ; _strtoint
0292+  0942             ; 5 digit base10 string number in d
0293+  0942             ; integer returned in A
0294+  0942             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  0942             _strtoint:
0296+  0942 E2            push si
0297+  0943 D8            push b
0298+  0944 D9            push c
0299+  0945 DA            push d
0300+  0946 07 A5 07      call _strlen      ; get string length in C
0301+  0949 7E            dec c
0302+  094A FD 4E         mov si, d
0303+  094C 12            mov a, c
0304+  094D FD 99         shl a
0305+  094F 3B C6 0A      mov d, table_power
0306+  0952 59            add d, a
0307+  0953 38 00 00      mov c, 0
0308+  0956             _strtoint_L0:
0309+  0956 F6            lodsb      ; load ASCII to al
0310+  0957 B9 00         cmp al, 0
0311+  0959 C6 6C 09      je _strtoint_end
0312+  095C 6F 30         sub al, $30    ; make into integer
0313+  095E 22 00         mov ah, 0
0314+  0960 2A            mov b, [d]
0315+  0961 AC            mul a, b      ; result in B since it fits in 16bits
0316+  0962 11            mov a, b
0317+  0963 28            mov b, c
0318+  0964 54            add a, b
0319+  0965 39            mov c, a
0320+  0966 63 02 00      sub d, 2
0321+  0969 0A 56 09      jmp _strtoint_L0
0322+  096C             _strtoint_end:
0323+  096C 12            mov a, c
0324+  096D E7            pop d
0325+  096E E6            pop c
0326+  096F E5            pop b
0327+  0970 EF            pop si
0328+  0971 09            ret
0329+  0972             
0330+  0972             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  0972             ; PRINT NULL TERMINATED STRING
0332+  0972             ; pointer in D
0333+  0972             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  0972             _puts:
0335+  0972 D7            push a
0336+  0973 DA            push d
0337+  0974             _puts_L1:
0338+  0974 1E            mov al, [d]
0339+  0975 B9 00         cmp al, 0
0340+  0977 C6 83 09      jz _puts_END
0341+  097A 23            mov ah, al
0342+  097B 19 00         mov al, 0
0343+  097D 05 03         syscall sys_io
0344+  097F 79            inc d
0345+  0980 0A 74 09      jmp _puts_L1
0346+  0983             _puts_END:
0347+  0983 E7            pop d
0348+  0984 E4            pop a
0349+  0985 09            ret
0350+  0986             
0351+  0986             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  0986             ; PRINT N SIZE STRING
0353+  0986             ; pointer in D
0354+  0986             ; size in C
0355+  0986             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  0986             _putsn:
0357+  0986 DB            push al
0358+  0987 DA            push d
0359+  0988 D9            push c
0360+  0989             _putsn_L0:
0361+  0989 1E            mov al, [d]
0362+  098A 23            mov ah, al
0363+  098B 19 00         mov al, 0
0364+  098D 05 03         syscall sys_io
0365+  098F 79            inc d
0366+  0990 7E            dec c  
0367+  0991 C2 00 00      cmp c, 0
0368+  0994 C7 89 09      jne _putsn_L0
0369+  0997             _putsn_end:
0370+  0997 E6            pop c
0371+  0998 E7            pop d
0372+  0999 E8            pop al
0373+  099A 09            ret
0374+  099B             
0375+  099B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  099B             ; print 16bit decimal number
0377+  099B             ; input number in A
0378+  099B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  099B             print_u16d:
0380+  099B D7            push a
0381+  099C D8            push b
0382+  099D FD D8         push g
0383+  099F 26 10 27      mov b, 10000
0384+  09A2 AE            div a, b      ; get 10000's coeff.
0385+  09A3 07 C7 09      call print_number
0386+  09A6 11            mov a, b
0387+  09A7 26 E8 03      mov b, 1000
0388+  09AA AE            div a, b      ; get 1000's coeff.
0389+  09AB 07 C7 09      call print_number
0390+  09AE 11            mov a, b
0391+  09AF 26 64 00      mov b, 100
0392+  09B2 AE            div a, b
0393+  09B3 07 C7 09      call print_number
0394+  09B6 11            mov a, b
0395+  09B7 26 0A 00      mov b, 10
0396+  09BA AE            div a, b
0397+  09BB 07 C7 09      call print_number
0398+  09BE 1B            mov al, bl      ; 1's coeff in bl
0399+  09BF 07 C7 09      call print_number
0400+  09C2 FD F1         pop g
0401+  09C4 E5            pop b
0402+  09C5 E4            pop a
0403+  09C6 09            ret
0404+  09C7             
0405+  09C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  09C7             ; print AL
0407+  09C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  09C7             print_number:
0409+  09C7 6A 30         add al, $30
0410+  09C9 23            mov ah, al
0411+  09CA 07 46 08      call _putchar
0412+  09CD 09            ret
0413+  09CE             
0414+  09CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  09CE             ; PRINT 16BIT HEX INTEGER
0416+  09CE             ; integer value in reg B
0417+  09CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  09CE             print_u16x:
0419+  09CE D7            push a
0420+  09CF D8            push b
0421+  09D0 DD            push bl
0422+  09D1 30            mov bl, bh
0423+  09D2 07 14 08      call _itoa        ; convert bh to char in A
0424+  09D5 2F            mov bl, al        ; save al
0425+  09D6 19 00         mov al, 0
0426+  09D8 05 03         syscall sys_io        ; display AH
0427+  09DA 24            mov ah, bl        ; retrieve al
0428+  09DB 19 00         mov al, 0
0429+  09DD 05 03         syscall sys_io        ; display AL
0430+  09DF             
0431+  09DF EA            pop bl
0432+  09E0 07 14 08      call _itoa        ; convert bh to char in A
0433+  09E3 2F            mov bl, al        ; save al
0434+  09E4 19 00         mov al, 0
0435+  09E6 05 03         syscall sys_io        ; display AH
0436+  09E8 24            mov ah, bl        ; retrieve al
0437+  09E9 19 00         mov al, 0
0438+  09EB 05 03         syscall sys_io        ; display AL
0439+  09ED             
0440+  09ED E5            pop b
0441+  09EE E4            pop a
0442+  09EF 09            ret
0443+  09F0             
0444+  09F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  09F0             ; INPUT 16BIT HEX INTEGER
0446+  09F0             ; read 16bit integer into A
0447+  09F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  09F0             scan_u16x:
0449+  09F0 F8 10 00      enter 16
0450+  09F3 D8            push b
0451+  09F4 DA            push d
0452+  09F5             
0453+  09F5 FA F1 FF      lea d, [bp + -15]
0454+  09F8 07 4D 08      call _gets        ; get number
0455+  09FB             
0456+  09FB 32            mov bl, [d]
0457+  09FC 37            mov bh, bl
0458+  09FD 33 01 00      mov bl, [d + 1]
0459+  0A00 07 03 08      call _atoi        ; convert to int in AL
0460+  0A03 23            mov ah, al        ; move to AH
0461+  0A04             
0462+  0A04 33 02 00      mov bl, [d + 2]
0463+  0A07 37            mov bh, bl
0464+  0A08 33 03 00      mov bl, [d + 3]
0465+  0A0B 07 03 08      call _atoi        ; convert to int in AL
0466+  0A0E             
0467+  0A0E E7            pop d
0468+  0A0F E5            pop b
0469+  0A10 F9            leave
0470+  0A11 09            ret
0471+  0A12             
0472+  0A12             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  0A12             ; PRINT 8bit HEX INTEGER
0474+  0A12             ; integer value in reg bl
0475+  0A12             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0A12             print_u8x:
0477+  0A12 D7            push a
0478+  0A13 DD            push bl
0479+  0A14             
0480+  0A14 07 14 08      call _itoa        ; convert bl to char in A
0481+  0A17 2F            mov bl, al        ; save al
0482+  0A18 19 00         mov al, 0
0483+  0A1A 05 03         syscall sys_io        ; display AH
0484+  0A1C 24            mov ah, bl        ; retrieve al
0485+  0A1D 19 00         mov al, 0
0486+  0A1F 05 03         syscall sys_io        ; display AL
0487+  0A21             
0488+  0A21 EA            pop bl
0489+  0A22 E4            pop a
0490+  0A23 09            ret
0491+  0A24             
0492+  0A24             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  0A24             ; print 8bit decimal unsigned number
0494+  0A24             ; input number in AL
0495+  0A24             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  0A24             print_u8d:
0497+  0A24 D7            push a
0498+  0A25 D8            push b
0499+  0A26 FD D8         push g
0500+  0A28 22 00         mov ah, 0
0501+  0A2A 26 64 00      mov b, 100
0502+  0A2D AE            div a, b
0503+  0A2E D8            push b      ; save remainder
0504+  0A2F B9 00         cmp al, 0
0505+  0A31 C6 3B 0A      je skip100
0506+  0A34 6A 30         add al, $30
0507+  0A36 23            mov ah, al
0508+  0A37 19 00         mov al, 0
0509+  0A39 05 03         syscall sys_io  ; print coeff
0510+  0A3B             skip100:
0511+  0A3B E4            pop a
0512+  0A3C 22 00         mov ah, 0
0513+  0A3E 26 0A 00      mov b, 10
0514+  0A41 AE            div a, b
0515+  0A42 D8            push b      ; save remainder
0516+  0A43 B9 00         cmp al, 0
0517+  0A45 C6 4F 0A      je skip10
0518+  0A48 6A 30         add al, $30
0519+  0A4A 23            mov ah, al
0520+  0A4B 19 00         mov al, 0
0521+  0A4D 05 03         syscall sys_io  ; print coeff
0522+  0A4F             skip10:
0523+  0A4F E4            pop a
0524+  0A50 1B            mov al, bl
0525+  0A51 6A 30         add al, $30
0526+  0A53 23            mov ah, al
0527+  0A54 19 00         mov al, 0
0528+  0A56 05 03         syscall sys_io  ; print coeff
0529+  0A58 FD F1         pop g
0530+  0A5A E5            pop b
0531+  0A5B E4            pop a
0532+  0A5C 09            ret
0533+  0A5D             
0534+  0A5D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  0A5D             ; INPUT 8BIT HEX INTEGER
0536+  0A5D             ; read 8bit integer into AL
0537+  0A5D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  0A5D             scan_u8x:
0539+  0A5D F8 04 00      enter 4
0540+  0A60 D8            push b
0541+  0A61 DA            push d
0542+  0A62             
0543+  0A62 FA FD FF      lea d, [bp + -3]
0544+  0A65 07 4D 08      call _gets        ; get number
0545+  0A68             
0546+  0A68 32            mov bl, [d]
0547+  0A69 37            mov bh, bl
0548+  0A6A 33 01 00      mov bl, [d + 1]
0549+  0A6D 07 03 08      call _atoi        ; convert to int in AL
0550+  0A70             
0551+  0A70 E7            pop d
0552+  0A71 E5            pop b
0553+  0A72 F9            leave
0554+  0A73 09            ret
0555+  0A74             
0556+  0A74             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  0A74             ; input decimal number
0558+  0A74             ; result in A
0559+  0A74             ; 655'\0'
0560+  0A74             ; low--------high
0561+  0A74             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  0A74             scan_u16d:
0563+  0A74 F8 08 00      enter 8
0564+  0A77 E2            push si
0565+  0A78 D8            push b
0566+  0A79 D9            push c
0567+  0A7A DA            push d
0568+  0A7B FA F9 FF      lea d, [bp +- 7]
0569+  0A7E 07 4D 08      call _gets
0570+  0A81 07 A5 07      call _strlen      ; get string length in C
0571+  0A84 7E            dec c
0572+  0A85 FD 4E         mov si, d
0573+  0A87 12            mov a, c
0574+  0A88 FD 99         shl a
0575+  0A8A 3B C6 0A      mov d, table_power
0576+  0A8D 59            add d, a
0577+  0A8E 38 00 00      mov c, 0
0578+  0A91             mul_loop:
0579+  0A91 F6            lodsb      ; load ASCII to al
0580+  0A92 B9 00         cmp al, 0
0581+  0A94 C6 A7 0A      je mul_exit
0582+  0A97 6F 30         sub al, $30    ; make into integer
0583+  0A99 22 00         mov ah, 0
0584+  0A9B 2A            mov b, [d]
0585+  0A9C AC            mul a, b      ; result in B since it fits in 16bits
0586+  0A9D 11            mov a, b
0587+  0A9E 28            mov b, c
0588+  0A9F 54            add a, b
0589+  0AA0 39            mov c, a
0590+  0AA1 63 02 00      sub d, 2
0591+  0AA4 0A 91 0A      jmp mul_loop
0592+  0AA7             mul_exit:
0593+  0AA7 12            mov a, c
0594+  0AA8 E7            pop d
0595+  0AA9 E6            pop c
0596+  0AAA E5            pop b
0597+  0AAB EF            pop si
0598+  0AAC F9            leave
0599+  0AAD 09            ret
0600+  0AAE             
0601+  0AAE             
0602+  0AAE 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0602+  0AB2 34 35 36 37 
0602+  0AB6 38 39 41 42 
0602+  0ABA 43 44 45 46 
0603+  0ABE 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0603+  0AC2 1B 5B 48 00 
0604+  0AC6             
0605+  0AC6             table_power:
0606+  0AC6 01 00         .dw 1
0607+  0AC8 0A 00         .dw 10
0608+  0ACA 64 00         .dw 100
0609+  0ACC E8 03         .dw 1000
0610+  0ACE 10 27         .dw 100000040   0AD0             .include "lib/ctype.asm"
0001+  0AD0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0AD0             ; ctype.s
0003+  0AD0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0AD0             
0005+  0AD0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0AD0             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0AD0             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0AD0             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0AD0             ;; characters are supported.
0010+  0AD0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0AD0             ;; _isalnum 
0012+  0AD0             ;; _isalpha 
0013+  0AD0             ;; islower 
0014+  0AD0             ;; isupper 
0015+  0AD0             ;; _isdigit 
0016+  0AD0             ;; isxdigit
0017+  0AD0             ;; iscntrl 
0018+  0AD0             ;; isgraph 
0019+  0AD0             ;; _isspace 
0020+  0AD0             ;; isblank 
0021+  0AD0             ;; isprint 
0022+  0AD0             ;; ispunct 
0023+  0AD0             ;; tolower 
0024+  0AD0             ;; toupper
0025+  0AD0             
0026+  0AD0             
0027+  0AD0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0AD0             ;; IS ALPHANUMERIC
0029+  0AD0             ;; sets ZF according with result
0030+  0AD0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0AD0             _isalnum:
0032+  0AD0 07 ED 0A    	call _isalpha
0033+  0AD3 C6 D9 0A    	je _isalnum_exit
0034+  0AD6 07 DA 0A    	call _isdigit
0035+  0AD9             _isalnum_exit:
0036+  0AD9 09          	ret	
0037+  0ADA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0ADA             ;; IS DIGIT
0039+  0ADA             ;; sets ZF according with result
0040+  0ADA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0ADA             _isdigit:
0042+  0ADA DB          	push al
0043+  0ADB B9 30       	cmp al, '0'
0044+  0ADD C8 E9 0A    	jlu _isdigit_false
0045+  0AE0 B9 39       	cmp al, '9'
0046+  0AE2 D1 E9 0A    	jgu _isdigit_false
0047+  0AE5 87 00       	and al, 0	; set ZF
0048+  0AE7 E8          	pop al
0049+  0AE8 09          	ret
0050+  0AE9             _isdigit_false:
0051+  0AE9 8B 01       	or al, 1	; clear ZF
0052+  0AEB E8          	pop al
0053+  0AEC 09          	ret	
0054+  0AED             	
0055+  0AED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0AED             ;; IS ALPHA
0057+  0AED             ;; sets ZF according with result
0058+  0AED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0AED             _isalpha:
0060+  0AED DB          	push al
0061+  0AEE B9 5F       	cmp al, '_'
0062+  0AF0 C6 10 0B    	je _isalpha_true
0063+  0AF3 B9 2E       	cmp al, '.'
0064+  0AF5 C6 10 0B    	je _isalpha_true
0065+  0AF8 B9 41       	cmp al, 'A'
0066+  0AFA C8 0C 0B    	jlu _isalpha_false
0067+  0AFD B9 7A       	cmp al, 'z'
0068+  0AFF D1 0C 0B    	jgu _isalpha_false
0069+  0B02 B9 5A       	cmp al, 'Z'
0070+  0B04 D0 10 0B    	jleu _isalpha_true
0071+  0B07 B9 61       	cmp al, 'a'
0072+  0B09 C9 10 0B    	jgeu _isalpha_true
0073+  0B0C             _isalpha_false:
0074+  0B0C 8B 01       	or al, 1	; clear ZF
0075+  0B0E E8          	pop al
0076+  0B0F 09          	ret
0077+  0B10             _isalpha_true:
0078+  0B10 87 00       	and al, 0	; set ZF
0079+  0B12 E8          	pop al
0080+  0B13 09          	ret
0081+  0B14             
0082+  0B14             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0B14             ;; IS PATH-ALPHA
0084+  0B14             ;; sets ZF according with result
0085+  0B14             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0B14             ispath:
0087+  0B14 DB          	push al
0088+  0B15 07 DA 0A    	call _isdigit
0089+  0B18 C6 42 0B    	je ispath_true
0090+  0B1B B9 5F       	cmp al, '_'
0091+  0B1D C6 42 0B    	je ispath_true
0092+  0B20 B9 2F       	cmp al, '/'
0093+  0B22 C6 42 0B    	je ispath_true
0094+  0B25 B9 2E       	cmp al, '.'
0095+  0B27 C6 42 0B    	je ispath_true
0096+  0B2A B9 41       	cmp al, 'A'
0097+  0B2C C8 3E 0B    	jlu ispath_false
0098+  0B2F B9 7A       	cmp al, 'z'
0099+  0B31 D1 3E 0B    	jgu ispath_false
0100+  0B34 B9 5A       	cmp al, 'Z'
0101+  0B36 D0 42 0B    	jleu ispath_true
0102+  0B39 B9 61       	cmp al, 'a'
0103+  0B3B C9 42 0B    	jgeu ispath_true
0104+  0B3E             ispath_false:
0105+  0B3E 8B 01       	or al, 1	; clear ZF
0106+  0B40 E8          	pop al
0107+  0B41 09          	ret
0108+  0B42             ispath_true:
0109+  0B42 87 00       	and al, 0	; set ZF
0110+  0B44 E8          	pop al
0111+  0B45 09          	ret
0112+  0B46             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B46             ;; IS SPACE
0114+  0B46             ;; sets ZF according with result
0115+  0B46             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B46             _isspace:
0117+  0B46 B9 20       	cmp al, $20		; ' '
0118+  0B48 C6 5C 0B    	je _isspace_exit
0119+  0B4B B9 09       	cmp al, $09		; '\t'
0120+  0B4D C6 5C 0B    	je _isspace_exit
0121+  0B50 B9 0A       	cmp al, $0A		; '\n'
0122+  0B52 C6 5C 0B    	je _isspace_exit
0123+  0B55 B9 0D       	cmp al, $0D		; '\r'
0124+  0B57 C6 5C 0B    	je _isspace_exit
0125+  0B5A B9 0B       	cmp al, $0B		; '\v'
0126+  0B5C             _isspace_exit:
0127+  0B5C 09          	ret	
0128+  0B5D             
0129+  0B5D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B5D             ; TO LOWER
0131+  0B5D             ; input in AL
0132+  0B5D             ; output in AL
0133+  0B5D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B5D             _to_lower:
0135+  0B5D B9 5A       	cmp al, 'Z'
0136+  0B5F D1 64 0B    	jgu _to_lower_ret
0137+  0B62 6A 20       	add al, $20				; convert to lower case
0138+  0B64             _to_lower_ret:
0139+  0B64 09          	ret
0140+  0B65             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B65             ; TO UPPER
0142+  0B65             ; input in AL
0143+  0B65             ; output in AL
0144+  0B65             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B65             _to_upper:
0146+  0B65 B9 61       	cmp al, 'a'
0147+  0B67 C8 6C 0B    	jlu _to_upper_ret
0148+  0B6A 6F 20       	sub al, $20			; convert to upper case
0149+  0B6C             _to_upper_ret:
0150+  0B6C 09          	ret
0151+  0B6D             
0041   0B6D             
0042   0B6D             .end
0043   0B6D             
0044   0B6D             
tasm: Number of errors = 0
