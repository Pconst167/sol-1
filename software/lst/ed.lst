0001   0000             .include "lib/kernel.exp"
0001+  0000             sys_break        .EQU  $0000
0002+  0000             sys_rtc          .EQU  $0001
0003+  0000             sys_ide          .EQU  $0002
0004+  0000             sys_io           .EQU  $0003
0005+  0000             sys_filesystem   .EQU  $0004
0006+  0000             sys_create_proc  .EQU  $0005
0007+  0000             sys_list_proc    .EQU  $0006
0008+  0000             sys_datetime     .EQU  $0007
0009+  0000             sys_reboot       .EQU  $0008
0010+  0000             sys_pause_proc   .EQU  $0009
0011+  0000             sys_resume_proc  .EQU  $000a
0012+  0000             sys_terminate_proc .EQU  $000b
0013+  0000             sys_system       .EQU  $000c
0014+  0000             sys_fdc          .EQU  $000d
0015+  0000             text_org         .EQU  $0400
0002   0000             
0003   0400             .org text_org			; origin at 1024
0004   0400             
0005   0400             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006   0400             ; ed - the original Unix text editor.
0007   0400             ;
0008   0400             ; 1,$p
0009   0400             ; 1,2p
0010   0400             ;
0011   0400             ; 2d
0012   0400             ; 1,3d
0013   0400             ;
0014   0400             ; 2a
0015   0400             ; 
0016   0400             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0017   0400             ed_main:
0018   0400 FD 47 FF FF 	mov sp, $FFFF
0019   0404 FD 49 FF FF 	mov bp, $FFFF
0020   0408             
0021   0408 10 00 00    	mov a, 0
0022   040B 42 E0 0E    	mov [prog], a
0023   040E 07 41 0D    	call get_token
0024   0411 1D E3 0E    	mov al, [tok]
0025   0414 B9 14       	cmp al, tok_end
0026   0416 C6 4D 04    	je no_filename_given	; no filename given as argument
0027   0419             
0028   0419 07 C7 0E    	call _putback
0029   041C 07 EA 0C    	call get_path			; read filename
0030   041F 3B E4 0E    	mov d, tokstr
0031   0422 FD 4F EA 21 	mov di, text_buffer		; pointer to write buffer
0032   0426 19 14       	mov al, 20
0033   0428 05 04       	syscall sys_filesystem		; read textfile into buffer
0034   042A 3B EA 21    	mov d, text_buffer
0035   042D 07 EE 08    	call _strlen
0036   0430 12          	mov a, c				; find size of buffer
0037   0431 53 EA 21    	add a, text_buffer
0038   0434 3C          	mov d, a
0039   0435 19 0A       	mov al, $0a
0040   0437 3E          	mov [d], al
0041   0438 79          	inc d
0042   0439 19 00       	mov al, 0
0043   043B 3E          	mov [d], al
0044   043C 13          	mov a, d
0045   043D 42 7C 08    	mov [txt_buffer_ptr], a	; set buffer pointer
0046   0440             
0047   0440 3B EA 21    	mov d, text_buffer
0048   0443 07 EE 08    	call _strlen
0049   0446 12          	mov a, c
0050   0447 07 E4 0A    	call print_u16d
0051   044A 07 68 0A    	call printnl
0052   044D             
0053   044D             no_filename_given:
0054   044D 3B 5D 04    	mov d, ss
0055   0450 07 BB 0A    	call _puts
0056   0453             main_l0:
0057   0453 F2 E4 0E 00 	mov byte [tokstr], 0			; clear tokstr (so that enter doesnt repeat last shell command)
0058   0457 07 6B 04    	call command_parser
0059   045A 0A 53 04    	jmp main_l0
0060   045D 0A 68 65 6C ss:.db "\nhello world\n",0
0060   0461 6C 6F 20 77 
0060   0465 6F 72 6C 64 
0060   0469 0A 00 
0061   046B             ; ,p
0062   046B             ; 1,3p
0063   046B             ; 2p
0064   046B             ; 1,$d
0065   046B             command_parser:
0066   046B 3B 7C 06    	mov d, input_buff
0067   046E 10 7C 06    	mov a, input_buff
0068   0471 42 E0 0E    	mov [prog], a
0069   0474 07 96 09    	call _gets						; get command
0070   0477 1D 7C 06    	mov al, [input_buff]
0071   047A 07 36 0C    	call _isalpha
0072   047D C6 C4 04    	je get_command					; test if this is a command with a range in front
0073   0480             
0074   0480 B9 2C       	cmp al, ','
0075   0482 C7 9B 04    	jne parser_hasrange
0076   0485 10 01 00    	mov a, 1
0077   0488 42 E6 0F    	mov [start], a
0078   048B 07 63 06    	call total_lines
0079   048E 42 E8 0F    	mov [end], a			; set range as the full range
0080   0491 14 E0 0E    	mov a, [prog]
0081   0494 77          	inc a
0082   0495 42 E0 0E    	mov [prog], a			; pass over ',' token
0083   0498 0A C4 04    	jmp get_command
0084   049B             
0085   049B             parser_hasrange:
0086   049B 07 7C 0E    	call get_number			; range start
0087   049E 3B E4 0E    	mov d, tokstr
0088   04A1 07 8B 0A    	call _strtoint			; convert range to integer in a
0089   04A4 42 E6 0F    	mov [start], a			; save range start
0090   04A7 42 E8 0F    	mov [end], a			; save end too in case the range end is not given
0091   04AA             
0092   04AA 07 41 0D    	call get_token
0093   04AD 1D E3 0E    	mov al, [tok]
0094   04B0 B9 0B       	cmp al, tok_comma
0095   04B2 C6 B8 04    	je parser_range_end
0096   04B5 0A C7 04    	jmp parser_start		; not a comma, so it must be a command
0097   04B8             
0098   04B8             parser_range_end:
0099   04B8 07 7C 0E    	call get_number			; range end
0100   04BB 3B E4 0E    	mov d, tokstr
0101   04BE 07 8B 0A    	call _strtoint			; convert range to integer in a
0102   04C1 42 E8 0F    	mov [end], a			; save range start
0103   04C4             
0104   04C4             get_command:
0105   04C4 07 41 0D    	call get_token			; get command
0106   04C7             parser_start:
0107   04C7 FD 4F 80 08 	mov di, keywords
0108   04CB 10 00 00    	mov a, 0
0109   04CE 42 E4 0F    	mov [parser_index], a		; reset keywords index
0110   04D1             parser_l2:
0111   04D1 FD 4D E4 0E 	mov si, tokstr
0112   04D5 07 FE 08    	call _strcmp
0113   04D8 C6 02 05    	je parser_cmd_equal
0114   04DB             parser_l2_l0:
0115   04DB FC 00 00    	lea d, [di + 0]
0116   04DE 1E          	mov al, [d]
0117   04DF B9 00       	cmp al, 0
0118   04E1 C6 EA 04    	je parser_l2_l0_exit			; run through the keyword until finding null
0119   04E4 D4 01 00    	add di, 1
0120   04E7 0A DB 04    	jmp parser_l2_l0
0121   04EA             parser_l2_l0_exit:
0122   04EA D4 01 00    	add di, 1				; then skip null byte at the end 
0123   04ED 14 E4 0F    	mov a, [parser_index]
0124   04F0 53 02 00    	add a, 2
0125   04F3 42 E4 0F    	mov [parser_index], a			; increase keywords table index
0126   04F6 FC 00 00    	lea d, [di + 0]
0127   04F9 1E          	mov al, [d]
0128   04FA B9 00       	cmp al, 0
0129   04FC C6 14 05    	je parser_cmd_not_found
0130   04FF 0A D1 04    	jmp parser_l2
0131   0502             parser_cmd_equal:
0132   0502 10 00 0D    	mov a, $0d00
0133   0505 05 03       	syscall sys_io				; print carriage return
0134   0507 14 E4 0F    	mov a, [parser_index]			; get the keyword pointer
0135   050A FD 07 93 08 	call [a + keyword_pointers]		; execute command
0136   050E 10 00 0D    	mov a, $0d00
0137   0511 05 03       	syscall sys_io				; print carriage return
0138   0513 09          	ret
0139   0514             parser_cmd_not_found:
0140   0514 22 3F       	mov ah, '?'
0141   0516 07 8F 09    	call _putchar
0142   0519 09          	ret
0143   051A             
0144   051A             ; a = line to append after
0145   051A             ; b = address of text to append
0146   051A             append_lines:
0147   051A 77          	inc a
0148   051B 74          	mov d, b
0149   051C 07 EE 08    	call _strlen		; length of text in c
0150   051F 07 46 06    	call find_line	; address in d
0151   0522 FD 50       	mov di, d
0152   0524 FD 4E       	mov si, d
0153   0526             append_lines_l0:
0154   0526 F6          	lodsb
0155   0527 B9 0A       	cmp al, $0a
0156   0529 C7 26 05    	jne append_lines_l0
0157   052C             ; now si points to char after \n
0158   052C             ; start copying chars from there to beginning of deleted line
0159   052C             ; copy till we find null
0160   052C             append_lines_l1:
0161   052C F6          	lodsb
0162   052D F7          	stosb
0163   052E B9 00       	cmp al, 0
0164   0530 C7 2C 05    	jne append_lines_l1
0165   0533             append_lines_end:
0166   0533 09          	ret
0167   0534             
0168   0534             cmd_append:
0169   0534 14 7C 08    	mov a, [txt_buffer_ptr]
0170   0537 3C          	mov d, a
0171   0538             cmd_append_l0:
0172   0538 07 96 09    	call _gets		; read new line
0173   053B FD 4E       	mov si, d
0174   053D FD 4F 7E 08 	mov di, s_dot
0175   0541 07 FE 08    	call _strcmp
0176   0544 C6 64 05    	je cmd_append_end
0177   0547 14 7C 08    	mov a, [txt_buffer_ptr]
0178   054A 4D          	mov si, a
0179   054B             cmd_append_l1:		; look for null termination
0180   054B F6          	lodsb
0181   054C B9 00       	cmp al, 0
0182   054E C7 4B 05    	jne cmd_append_l1
0183   0551 FB FF FF    	lea d, [si + -1]
0184   0554 19 0A       	mov al, $0a
0185   0556 3E          	mov [d], al
0186   0557 FB 00 00    	lea d, [si + 0]
0187   055A 19 00       	mov al, 0
0188   055C 3E          	mov [d], al
0189   055D 13          	mov a, d
0190   055E 42 7C 08    	mov [txt_buffer_ptr], a
0191   0561 0A 38 05    	jmp cmd_append_l0
0192   0564             cmd_append_end:
0193   0564 19 00       	mov al, 0
0194   0566 3E          	mov [d], al
0195   0567 09          	ret
0196   0568             
0197   0568             cmd_insert:
0198   0568 09          	ret
0199   0569             
0200   0569             cmd_quit:
0201   0569 05 0B       	syscall sys_terminate_proc
0202   056B             
0203   056B             ; first line\n
0204   056B             ; second line\n
0205   056B             ; third line\n
0206   056B             ; fourth line\n
0207   056B             cmd_delete:
0208   056B 14 E8 0F    	mov a, [end]		; get starting line
0209   056E             cmd_delete_l0:
0210   056E 07 8C 05    	call delete_line		
0211   0571 29 E6 0F    	mov b, [start]
0212   0574 B0          	cmp a, b
0213   0575 C6 7C 05    	je cmd_delete_end
0214   0578 7D          	dec a
0215   0579 0A 6E 05    	jmp cmd_delete_l0
0216   057C             cmd_delete_end:
0217   057C             ; set text pointer to the end of file
0218   057C FD 4D EA 21 	mov si, text_buffer
0219   0580             cmd_delete_l1:
0220   0580 F6          	lodsb
0221   0581 B9 00       	cmp al, 0
0222   0583 C7 80 05    	jne cmd_delete_l1
0223   0586 4E          	mov a, si
0224   0587 7D          	dec a
0225   0588 42 7C 08    	mov [txt_buffer_ptr], a
0226   058B 09          	ret
0227   058C             	
0228   058C             ; find address of line beginning
0229   058C             ; find eol address
0230   058C             ; start copying chars from eol into beginning of required line
0231   058C             ; stop when reache null
0232   058C             ; a = line to delete
0233   058C             delete_line:
0234   058C D7          	push a
0235   058D 07 46 06    	call find_line	; address in d
0236   0590 FD 50       	mov di, d
0237   0592 FD 4E       	mov si, d
0238   0594             delete_line_l0:
0239   0594 F6          	lodsb
0240   0595 B9 0A       	cmp al, $0a
0241   0597 C7 94 05    	jne delete_line_l0
0242   059A             ; now si points to char after \n
0243   059A             ; start copying chars from there to beginning of deleted line
0244   059A             ; copy till we find null
0245   059A             delete_line_l1:
0246   059A F6          	lodsb
0247   059B F7          	stosb
0248   059C B9 00       	cmp al, 0
0249   059E C7 9A 05    	jne delete_line_l1
0250   05A1             delete_line_end:
0251   05A1 E4          	pop a
0252   05A2 09          	ret
0253   05A3             
0254   05A3             cmd_open:
0255   05A3 07 41 0D    	call get_token			; read filename
0256   05A6 3B E4 0E    	mov d, tokstr
0257   05A9 FD 4F EA 21 	mov di, text_buffer		; pointer to write buffer
0258   05AD 19 14       	mov al, 20
0259   05AF 05 04       	syscall sys_filesystem		; read textfile into buffer
0260   05B1 3B EA 21    	mov d, text_buffer
0261   05B4 07 EE 08    	call _strlen
0262   05B7 12          	mov a, c				; find size of buffer
0263   05B8 53 EA 21    	add a, text_buffer
0264   05BB 3C          	mov d, a
0265   05BC 19 0A       	mov al, $0a
0266   05BE 3E          	mov [d], al
0267   05BF 79          	inc d
0268   05C0 19 00       	mov al, 0
0269   05C2 3E          	mov [d], al
0270   05C3 13          	mov a, d
0271   05C4 42 7C 08    	mov [txt_buffer_ptr], a	; set buffer pointer
0272   05C7             
0273   05C7 3B EA 21    	mov d, text_buffer
0274   05CA 07 EE 08    	call _strlen
0275   05CD 12          	mov a, c
0276   05CE 07 E4 0A    	call print_u16d
0277   05D1 07 68 0A    	call printnl
0278   05D4 09          	ret
0279   05D5             
0280   05D5             cmd_save:
0281   05D5 07 41 0D    	call get_token		; read filename
0282   05D8 FD 4D E4 0E 	mov si, tokstr
0283   05DC FD 4F EB 1F 	mov di, transient_data + 1
0284   05E0 07 13 09    	call _strcpy				; copy filename
0285   05E3             
0286   05E3 3B EA 1F    	mov d, transient_data	; pass data to kernel. starting at 512 byte header. text_buffer follows the header in mem.
0287   05E6 19 05       	mov al, 5
0288   05E8 05 04       	syscall sys_filesystem
0289   05EA             
0290   05EA 3B EA 21    	mov d, text_buffer
0291   05ED 07 EE 08    	call _strlen
0292   05F0 12          	mov a, c
0293   05F1 07 E4 0A    	call print_u16d
0294   05F4 07 68 0A    	call printnl
0295   05F7 09          	ret
0296   05F8             	
0297   05F8             cmd_list:
0298   05F8 3B EA 21    	mov d, text_buffer
0299   05FB 07 BB 0A    	call _puts
0300   05FE 09          	ret
0301   05FF             
0302   05FF             cmd_print:
0303   05FF 14 E6 0F    	mov a, [start]		; get starting line
0304   0602             cmd_print_l0:
0305   0602 07 46 06    	call find_line		; address in d
0306   0605 07 33 06    	call printline		; print line at d	
0307   0608 29 E8 0F    	mov b, [end]
0308   060B B0          	cmp a, b
0309   060C C6 13 06    	je cmd_print_end
0310   060F 77          	inc a
0311   0610 0A 02 06    	jmp cmd_print_l0
0312   0613             cmd_print_end:
0313   0613 09          	ret
0314   0614             
0315   0614             cmd_print_numbered:
0316   0614 14 E6 0F    	mov a, [start]		; get starting line
0317   0617             cmd_print_numbered_l0:
0318   0617 D7          	push a
0319   0618 07 E4 0A    	call print_u16d
0320   061B 22 09       	mov ah, $09			; tab
0321   061D 07 8F 09    	call _putchar
0322   0620 E4          	pop a
0323   0621 07 46 06    	call find_line		; address in d
0324   0624 07 33 06    	call printline		; print line at d	
0325   0627 29 E8 0F    	mov b, [end]
0326   062A B0          	cmp a, b
0327   062B C6 32 06    	je cmd_print_numbered_end
0328   062E 77          	inc a
0329   062F 0A 17 06    	jmp cmd_print_numbered_l0
0330   0632             cmd_print_numbered_end:
0331   0632 09          	ret
0332   0633             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0333   0633             ; print line
0334   0633             ; pointer in d
0335   0633             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336   0633             printline:
0337   0633 D7          	push a
0338   0634 DA          	push d
0339   0635             printline_l0:
0340   0635 1E          	mov al, [d]
0341   0636 23          	mov ah, al
0342   0637 07 8F 09    	call _putchar
0343   063A B9 0A       	cmp al, $0a
0344   063C C6 43 06    	je printline_end
0345   063F 79          	inc d
0346   0640 0A 35 06    	jmp printline_l0
0347   0643             printline_end:
0348   0643 E7          	pop d
0349   0644 E4          	pop a
0350   0645 09          	ret
0351   0646             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352   0646             ; inputs
0353   0646             ; a = line number
0354   0646             ; outputs
0355   0646             ; d = line address
0356   0646             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0357   0646             find_line:
0358   0646 D7          	push a
0359   0647 D8          	push b
0360   0648 26 EA 21    	mov b, text_buffer
0361   064B FD 42 E0 0E 	mov [prog], b
0362   064F             find_line_l0:
0363   064F AF 01 00    	cmp a, 1
0364   0652 C6 5C 06    	je find_line_end
0365   0655 07 1C 0D    	call get_line
0366   0658 7D          	dec a
0367   0659 0A 4F 06    	jmp find_line_l0
0368   065C             find_line_end:
0369   065C 14 E0 0E    	mov a, [prog]
0370   065F 3C          	mov d, a
0371   0660 E5          	pop b
0372   0661 E4          	pop a
0373   0662 09          	ret
0374   0663             
0375   0663             
0376   0663             ; find total number of lines
0377   0663             ; a = total
0378   0663             total_lines:
0379   0663 26 00 00    	mov b, 0
0380   0666 FD 4D EA 21 	mov si, text_buffer
0381   066A             total_lines_l0:
0382   066A F6          	lodsb
0383   066B B9 00       	cmp al, 0
0384   066D C6 7A 06    	je total_lines_end
0385   0670 B9 0A       	cmp al, $0a
0386   0672 C7 6A 06    	jne total_lines_l0
0387   0675 FD 77       	inc b
0388   0677 0A 6A 06    	jmp total_lines_l0
0389   067A             total_lines_end:
0390   067A 11          	mov a, b
0391   067B 09          	ret
0392   067C             
0393   067C 00 00 00 00 input_buff:			.fill 512, 0
0393   0680 00 00 00 00 
0393   0684 00 00 00 00 
0393   0688 00 00 00 00 
0393   068C 00 00 00 00 
0393   0690 00 00 00 00 
0393   0694 00 00 00 00 
0393   0698 00 00 00 00 
0393   069C 00 00 00 00 
0393   06A0 00 00 00 00 
0393   06A4 00 00 00 00 
0393   06A8 00 00 00 00 
0393   06AC 00 00 00 00 
0393   06B0 00 00 00 00 
0393   06B4 00 00 00 00 
0393   06B8 00 00 00 00 
0393   06BC 00 00 00 00 
0393   06C0 00 00 00 00 
0393   06C4 00 00 00 00 
0393   06C8 00 00 00 00 
0393   06CC 00 00 00 00 
0393   06D0 00 00 00 00 
0393   06D4 00 00 00 00 
0393   06D8 00 00 00 00 
0393   06DC 00 00 00 00 
0393   06E0 00 00 00 00 
0393   06E4 00 00 00 00 
0393   06E8 00 00 00 00 
0393   06EC 00 00 00 00 
0393   06F0 00 00 00 00 
0393   06F4 00 00 00 00 
0393   06F8 00 00 00 00 
0393   06FC 00 00 00 00 
0393   0700 00 00 00 00 
0393   0704 00 00 00 00 
0393   0708 00 00 00 00 
0393   070C 00 00 00 00 
0393   0710 00 00 00 00 
0393   0714 00 00 00 00 
0393   0718 00 00 00 00 
0393   071C 00 00 00 00 
0393   0720 00 00 00 00 
0393   0724 00 00 00 00 
0393   0728 00 00 00 00 
0393   072C 00 00 00 00 
0393   0730 00 00 00 00 
0393   0734 00 00 00 00 
0393   0738 00 00 00 00 
0393   073C 00 00 00 00 
0393   0740 00 00 00 00 
0393   0744 00 00 00 00 
0393   0748 00 00 00 00 
0393   074C 00 00 00 00 
0393   0750 00 00 00 00 
0393   0754 00 00 00 00 
0393   0758 00 00 00 00 
0393   075C 00 00 00 00 
0393   0760 00 00 00 00 
0393   0764 00 00 00 00 
0393   0768 00 00 00 00 
0393   076C 00 00 00 00 
0393   0770 00 00 00 00 
0393   0774 00 00 00 00 
0393   0778 00 00 00 00 
0393   077C 00 00 00 00 
0393   0780 00 00 00 00 
0393   0784 00 00 00 00 
0393   0788 00 00 00 00 
0393   078C 00 00 00 00 
0393   0790 00 00 00 00 
0393   0794 00 00 00 00 
0393   0798 00 00 00 00 
0393   079C 00 00 00 00 
0393   07A0 00 00 00 00 
0393   07A4 00 00 00 00 
0393   07A8 00 00 00 00 
0393   07AC 00 00 00 00 
0393   07B0 00 00 00 00 
0393   07B4 00 00 00 00 
0393   07B8 00 00 00 00 
0393   07BC 00 00 00 00 
0393   07C0 00 00 00 00 
0393   07C4 00 00 00 00 
0393   07C8 00 00 00 00 
0393   07CC 00 00 00 00 
0393   07D0 00 00 00 00 
0393   07D4 00 00 00 00 
0393   07D8 00 00 00 00 
0393   07DC 00 00 00 00 
0393   07E0 00 00 00 00 
0393   07E4 00 00 00 00 
0393   07E8 00 00 00 00 
0393   07EC 00 00 00 00 
0393   07F0 00 00 00 00 
0393   07F4 00 00 00 00 
0393   07F8 00 00 00 00 
0393   07FC 00 00 00 00 
0393   0800 00 00 00 00 
0393   0804 00 00 00 00 
0393   0808 00 00 00 00 
0393   080C 00 00 00 00 
0393   0810 00 00 00 00 
0393   0814 00 00 00 00 
0393   0818 00 00 00 00 
0393   081C 00 00 00 00 
0393   0820 00 00 00 00 
0393   0824 00 00 00 00 
0393   0828 00 00 00 00 
0393   082C 00 00 00 00 
0393   0830 00 00 00 00 
0393   0834 00 00 00 00 
0393   0838 00 00 00 00 
0393   083C 00 00 00 00 
0393   0840 00 00 00 00 
0393   0844 00 00 00 00 
0393   0848 00 00 00 00 
0393   084C 00 00 00 00 
0393   0850 00 00 00 00 
0393   0854 00 00 00 00 
0393   0858 00 00 00 00 
0393   085C 00 00 00 00 
0393   0860 00 00 00 00 
0393   0864 00 00 00 00 
0393   0868 00 00 00 00 
0393   086C 00 00 00 00 
0393   0870 00 00 00 00 
0393   0874 00 00 00 00 
0393   0878 00 00 00 00 
0394   087C             
0395   087C EA 21       txt_buffer_ptr:		.dw text_buffer
0396   087E             
0397   087E 2E 00       s_dot:				.db ".", 0
0398   0880             
0399   0880             keywords:
0400   0880 61 00       	.db "a", 0		; append
0401   0882 69 00       	.db "i", 0		; insert
0402   0884 64 00       	.db "d", 0		; delete
0403   0886 70 00       	.db "p", 0		; print
0404   0888 6E 00       	.db "n", 0		; print
0405   088A 6C 00       	.db "l", 0		; list
0406   088C 65 00       	.db "e", 0		; edit
0407   088E 77 00       	.db "w", 0		; write
0408   0890 71 00       	.db "q", 0		; quit
0409   0892 00          	.db 0
0410   0893             
0411   0893             keyword_pointers:
0412   0893 34 05       	.dw cmd_append
0413   0895 68 05       	.dw cmd_insert
0414   0897 6B 05       	.dw cmd_delete
0415   0899 FF 05       	.dw cmd_print
0416   089B 14 06       	.dw cmd_print_numbered
0417   089D F8 05       	.dw cmd_list
0418   089F A3 05       	.dw cmd_open
0419   08A1 D5 05       	.dw cmd_save
0420   08A3 69 05       	.dw cmd_quit
0421   08A5             
0422   08A5 3F 00       s_bad_command:		.db "?", 0
0423   08A7             
0424   08A7             ; file includes. these are functions used by the shell
0425   08A7             .include "lib/stdio.asm"
0001+  08A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  08A7             ; stdio.s
0003+  08A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  08A7             .include "lib/string.asm"
0001++ 08A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 08A7             ; string.s
0003++ 08A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 08A7             
0005++ 08A7             
0006++ 08A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 08A7             ; _strrev
0008++ 08A7             ; reverse a string
0009++ 08A7             ; d = string address
0010++ 08A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 08A7             ; 01234
0012++ 08A7             _strrev:
0013++ 08A7 4B          	pusha
0014++ 08A8 07 EE 08    	call _strlen	; length in c
0015++ 08AB 12          	mov a, c
0016++ 08AC AF 01 00    	cmp a, 1
0017++ 08AF D0 C9 08    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 08B2 7D          	dec a
0019++ 08B3 FD 4E       	mov si, d	; beginning of string
0020++ 08B5 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 08B7 59          	add d, a	; end of string
0022++ 08B8 12          	mov a, c
0023++ 08B9 FD 9B       	shr a		; divide by 2
0024++ 08BB 39          	mov c, a	; c now counts the steps
0025++ 08BC             _strrev_l0:
0026++ 08BC 32          	mov bl, [d]	; save load right-side char into bl
0027++ 08BD F6          	lodsb		; load left-side char into al; increase si
0028++ 08BE 3E          	mov [d], al	; store left char into right side
0029++ 08BF 1B          	mov al, bl
0030++ 08C0 F7          	stosb		; store right-side char into left-side; increase di
0031++ 08C1 7E          	dec c
0032++ 08C2 7F          	dec d
0033++ 08C3 C2 00 00    	cmp c, 0
0034++ 08C6 C7 BC 08    	jne _strrev_l0
0035++ 08C9             _strrev_end:
0036++ 08C9 4C          	popa
0037++ 08CA 09          	ret
0038++ 08CB             	
0039++ 08CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 08CB             ; _strchr
0041++ 08CB             ; search string in d for char in al
0042++ 08CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 08CB             _strchr:
0044++ 08CB             _strchr_l0:
0045++ 08CB 32          	mov bl, [d]
0046++ 08CC C1 00       	cmp bl, 0
0047++ 08CE C6 D9 08    	je _strchr_end
0048++ 08D1 BA          	cmp al, bl
0049++ 08D2 C6 D9 08    	je _strchr_end
0050++ 08D5 79          	inc d
0051++ 08D6 0A CB 08    	jmp _strchr_l0
0052++ 08D9             _strchr_end:
0053++ 08D9 1B          	mov al, bl
0054++ 08DA 09          	ret
0055++ 08DB             
0056++ 08DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 08DB             ; _strstr
0058++ 08DB             ; find sub-string
0059++ 08DB             ; str1 in si
0060++ 08DB             ; str2 in di
0061++ 08DB             ; si points to end of source string
0062++ 08DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 08DB             _strstr:
0064++ 08DB DB          	push al
0065++ 08DC DA          	push d
0066++ 08DD E3          	push di
0067++ 08DE             _strstr_loop:
0068++ 08DE F3          	cmpsb					; compare a byte of the strings
0069++ 08DF C7 EA 08    	jne _strstr_ret
0070++ 08E2 FC 00 00    	lea d, [di + 0]
0071++ 08E5 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 08E7 C7 DE 08    	jne _strstr_loop				; equal chars but not at end
0073++ 08EA             _strstr_ret:
0074++ 08EA F0          	pop di
0075++ 08EB E7          	pop d
0076++ 08EC E8          	pop al
0077++ 08ED 09          	ret
0078++ 08EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 08EE             ; length of null terminated string
0080++ 08EE             ; result in c
0081++ 08EE             ; pointer in d
0082++ 08EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 08EE             _strlen:
0084++ 08EE DA          	push d
0085++ 08EF 38 00 00    	mov c, 0
0086++ 08F2             _strlen_l1:
0087++ 08F2 BD 00       	cmp byte [d], 0
0088++ 08F4 C6 FC 08    	je _strlen_ret
0089++ 08F7 79          	inc d
0090++ 08F8 78          	inc c
0091++ 08F9 0A F2 08    	jmp _strlen_l1
0092++ 08FC             _strlen_ret:
0093++ 08FC E7          	pop d
0094++ 08FD 09          	ret
0095++ 08FE             
0096++ 08FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 08FE             ; strcmp
0098++ 08FE             ; compare two strings
0099++ 08FE             ; str1 in si
0100++ 08FE             ; str2 in di
0101++ 08FE             ; create a string compairon instrucion ?????
0102++ 08FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 08FE             _strcmp:
0104++ 08FE DB          	push al
0105++ 08FF DA          	push d
0106++ 0900 E3          	push di
0107++ 0901 E2          	push si
0108++ 0902             _strcmp_loop:
0109++ 0902 F3          	cmpsb					; compare a byte of the strings
0110++ 0903 C7 0E 09    	jne _strcmp_ret
0111++ 0906 FB FF FF    	lea d, [si +- 1]
0112++ 0909 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 090B C7 02 09    	jne _strcmp_loop				; equal chars but not at end
0114++ 090E             _strcmp_ret:
0115++ 090E EF          	pop si
0116++ 090F F0          	pop di
0117++ 0910 E7          	pop d
0118++ 0911 E8          	pop al
0119++ 0912 09          	ret
0120++ 0913             
0121++ 0913             
0122++ 0913             ; strcpy
0123++ 0913             ; copy null terminated string from si to di
0124++ 0913             ; source in si
0125++ 0913             ; destination in di
0126++ 0913             _strcpy:
0127++ 0913 E2          	push si
0128++ 0914 E3          	push di
0129++ 0915 DB          	push al
0130++ 0916             _strcpy_l1:
0131++ 0916 F6          	lodsb
0132++ 0917 F7          	stosb
0133++ 0918 B9 00       	cmp al, 0
0134++ 091A C7 16 09    	jne _strcpy_l1
0135++ 091D             _strcpy_end:
0136++ 091D E8          	pop al
0137++ 091E F0          	pop di
0138++ 091F EF          	pop si
0139++ 0920 09          	ret
0140++ 0921             
0141++ 0921             ; strcat
0142++ 0921             ; concatenate a null terminated string into string at di, from string at si
0143++ 0921             ; source in si
0144++ 0921             ; destination in di
0145++ 0921             _strcat:
0146++ 0921 E2          	push si
0147++ 0922 E3          	push di
0148++ 0923 D7          	push a
0149++ 0924 DA          	push d
0150++ 0925 50          	mov a, di
0151++ 0926 3C          	mov d, a
0152++ 0927             _strcat_goto_end_l1:
0153++ 0927 BD 00       	cmp byte[d], 0
0154++ 0929 C6 30 09    	je _strcat_start
0155++ 092C 79          	inc d
0156++ 092D 0A 27 09    	jmp _strcat_goto_end_l1
0157++ 0930             _strcat_start:
0158++ 0930 FD 50       	mov di, d
0159++ 0932             _strcat_l1:
0160++ 0932 F6          	lodsb
0161++ 0933 F7          	stosb
0162++ 0934 B9 00       	cmp al, 0
0163++ 0936 C7 32 09    	jne _strcat_l1
0164++ 0939             _strcat_end:
0165++ 0939 E7          	pop d
0166++ 093A E4          	pop a
0167++ 093B F0          	pop di
0168++ 093C EF          	pop si
0169++ 093D 09          	ret
0170++ 093E             
0171++ 093E             
0005+  093E             
0006+  093E             
0007+  093E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  093E             ; convert ascii 'o'..'f' to integer 0..15
0009+  093E             ; ascii in bl
0010+  093E             ; result in al
0011+  093E             ; ascii for f = 0100 0110
0012+  093E             ; ascii for 9 = 0011 1001
0013+  093E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  093E             hex_ascii_encode:
0015+  093E 1B            mov al, bl
0016+  093F 93 40         test al, $40        ; test if letter or number
0017+  0941 C7 47 09      jnz hex_letter
0018+  0944 87 0F         and al, $0f        ; get number
0019+  0946 09            ret
0020+  0947             hex_letter:
0021+  0947 87 0F         and al, $0f        ; get letter
0022+  0949 6A 09         add al, 9
0023+  094B 09            ret
0024+  094C             
0025+  094C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  094C             ; atoi
0027+  094C             ; 2 letter hex string in b
0028+  094C             ; 8bit integer returned in al
0029+  094C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  094C             _atoi:
0031+  094C D8            push b
0032+  094D 07 3E 09      call hex_ascii_encode      ; convert bl to 4bit code in al
0033+  0950 30            mov bl, bh
0034+  0951 DB            push al          ; save a
0035+  0952 07 3E 09      call hex_ascii_encode
0036+  0955 EA            pop bl  
0037+  0956 FD 9E 04      shl al, 4
0038+  0959 8C            or al, bl
0039+  095A E5            pop b
0040+  095B 09            ret  
0041+  095C             
0042+  095C             
0043+  095C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  095C             ; scanf
0045+  095C             ; no need for explanations!
0046+  095C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  095C             scanf:
0048+  095C 09            ret
0049+  095D             
0050+  095D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  095D             ; itoa
0052+  095D             ; 8bit value in bl
0053+  095D             ; 2 byte ascii result in a
0054+  095D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  095D             _itoa:
0056+  095D DA            push d
0057+  095E D8            push b
0058+  095F A7 00         mov bh, 0
0059+  0961 FD A4 04      shr bl, 4  
0060+  0964 74            mov d, b
0061+  0965 1F F7 0B      mov al, [d + s_hex_digits]
0062+  0968 23            mov ah, al
0063+  0969               
0064+  0969 E5            pop b
0065+  096A D8            push b
0066+  096B A7 00         mov bh, 0
0067+  096D FD 87 0F      and bl, $0f
0068+  0970 74            mov d, b
0069+  0971 1F F7 0B      mov al, [d + s_hex_digits]
0070+  0974 E5            pop b
0071+  0975 E7            pop d
0072+  0976 09            ret
0073+  0977             
0074+  0977             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  0977             ; hex string to binary
0076+  0977             ; di = destination address
0077+  0977             ; si = source
0078+  0977             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  0977             _hex_to_int:
0080+  0977             _hex_to_int_l1:
0081+  0977 F6            lodsb          ; load from [si] to al
0082+  0978 B9 00         cmp al, 0        ; check if ascii 0
0083+  097A C6 87 09      jz _hex_to_int_ret
0084+  097D 36            mov bh, al
0085+  097E F6            lodsb
0086+  097F 2F            mov bl, al
0087+  0980 07 4C 09      call _atoi        ; convert ascii byte in b to int (to al)
0088+  0983 F7            stosb          ; store al to [di]
0089+  0984 0A 77 09      jmp _hex_to_int_l1
0090+  0987             _hex_to_int_ret:
0091+  0987 09            ret    
0092+  0988             
0093+  0988             
0094+  0988             
0095+  0988             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  0988             ; getchar
0097+  0988             ; char in ah
0098+  0988             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  0988             getch:
0100+  0988 DB            push al
0101+  0989             getch_retry:
0102+  0989 19 01         mov al, 1
0103+  098B 05 03         syscall sys_io      ; receive in ah
0104+  098D E8            pop al
0105+  098E 09            ret
0106+  098F             
0107+  098F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  098F             ; putchar
0109+  098F             ; char in ah
0110+  098F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  098F             _putchar:
0112+  098F DB            push al
0113+  0990 19 00         mov al, 0
0114+  0992 05 03         syscall sys_io      ; char in ah
0115+  0994 E8            pop al
0116+  0995 09            ret
0117+  0996             
0118+  0996             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  0996             ;; input a string
0120+  0996             ;; terminates with null
0121+  0996             ;; pointer in d
0122+  0996             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  0996             _gets:
0124+  0996 D7            push a
0125+  0997 DA            push d
0126+  0998             _gets_loop:
0127+  0998 19 01         mov al, 1
0128+  099A 05 03         syscall sys_io      ; receive in ah
0129+  099C 76 1B         cmp ah, 27
0130+  099E C6 BF 09      je _gets_ansi_esc
0131+  09A1 76 0A         cmp ah, $0a        ; lf
0132+  09A3 C6 1B 0A      je _gets_end
0133+  09A6 76 0D         cmp ah, $0d        ; cr
0134+  09A8 C6 1B 0A      je _gets_end
0135+  09AB 76 5C         cmp ah, $5c        ; '\\'
0136+  09AD C6 E1 09      je _gets_escape
0137+  09B0 76 08         cmp ah, $08      ; check for backspace
0138+  09B2 C6 BB 09      je _gets_backspace
0139+  09B5 1A            mov al, ah
0140+  09B6 3E            mov [d], al
0141+  09B7 79            inc d
0142+  09B8 0A 98 09      jmp _gets_loop
0143+  09BB             _gets_backspace:
0144+  09BB 7F            dec d
0145+  09BC 0A 98 09      jmp _gets_loop
0146+  09BF             _gets_ansi_esc:
0147+  09BF 19 01         mov al, 1
0148+  09C1 05 03         syscall sys_io        ; receive in ah without echo
0149+  09C3 76 5B         cmp ah, '['
0150+  09C5 C7 98 09      jne _gets_loop
0151+  09C8 19 01         mov al, 1
0152+  09CA 05 03         syscall sys_io          ; receive in ah without echo
0153+  09CC 76 64         cmp ah, 'd'
0154+  09CE C6 D9 09      je _gets_left_arrow
0155+  09D1 76 63         cmp ah, 'c'
0156+  09D3 C6 DD 09      je _gets_right_arrow
0157+  09D6 0A 98 09      jmp _gets_loop
0158+  09D9             _gets_left_arrow:
0159+  09D9 7F            dec d
0160+  09DA 0A 98 09      jmp _gets_loop
0161+  09DD             _gets_right_arrow:
0162+  09DD 79            inc d
0163+  09DE 0A 98 09      jmp _gets_loop
0164+  09E1             _gets_escape:
0165+  09E1 19 01         mov al, 1
0166+  09E3 05 03         syscall sys_io      ; receive in ah
0167+  09E5 76 6E         cmp ah, 'n'
0168+  09E7 C6 06 0A      je _gets_lf
0169+  09EA 76 72         cmp ah, 'r'
0170+  09EC C6 0D 0A      je _gets_cr
0171+  09EF 76 30         cmp ah, '0'
0172+  09F1 C6 14 0A      je _gets_null
0173+  09F4 76 5C         cmp ah, $5c  ; '\'
0174+  09F6 C6 FF 09      je _gets_slash
0175+  09F9 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  09FA 3E            mov [d], al
0177+  09FB 79            inc d
0178+  09FC 0A 98 09      jmp _gets_loop
0179+  09FF             _gets_slash:
0180+  09FF 19 5C         mov al, $5c
0181+  0A01 3E            mov [d], al
0182+  0A02 79            inc d
0183+  0A03 0A 98 09      jmp _gets_loop
0184+  0A06             _gets_lf:
0185+  0A06 19 0A         mov al, $0a
0186+  0A08 3E            mov [d], al
0187+  0A09 79            inc d
0188+  0A0A 0A 98 09      jmp _gets_loop
0189+  0A0D             _gets_cr:
0190+  0A0D 19 0D         mov al, $0d
0191+  0A0F 3E            mov [d], al
0192+  0A10 79            inc d
0193+  0A11 0A 98 09      jmp _gets_loop
0194+  0A14             _gets_null:
0195+  0A14 19 00         mov al, $00
0196+  0A16 3E            mov [d], al
0197+  0A17 79            inc d
0198+  0A18 0A 98 09      jmp _gets_loop
0199+  0A1B             _gets_end:
0200+  0A1B 19 00         mov al, 0
0201+  0A1D 3E            mov [d], al        ; terminate string
0202+  0A1E E7            pop d
0203+  0A1F E4            pop a
0204+  0A20 09            ret
0205+  0A21             
0206+  0A21             
0207+  0A21             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  0A21             ;; input text
0209+  0A21             ;; terminated with ctrl+d
0210+  0A21             ;; pointer in d
0211+  0A21             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  0A21             _gettxt:
0213+  0A21 D7            push a
0214+  0A22 DA            push d
0215+  0A23             _gettxt_loop:
0216+  0A23 19 01         mov al, 1
0217+  0A25 05 03         syscall sys_io      ; receive in ah
0218+  0A27 76 04         cmp ah, 4      ; eot
0219+  0A29 C6 62 0A      je _gettxt_end
0220+  0A2C 76 08         cmp ah, $08      ; check for backspace
0221+  0A2E C6 5E 0A      je _gettxt_backspace
0222+  0A31 76 5C         cmp ah, $5c        ; '\'
0223+  0A33 C6 3C 0A      je _gettxt_escape
0224+  0A36 1A            mov al, ah
0225+  0A37 3E            mov [d], al
0226+  0A38 79            inc d
0227+  0A39 0A 23 0A      jmp _gettxt_loop
0228+  0A3C             _gettxt_escape:
0229+  0A3C 19 01         mov al, 1
0230+  0A3E 05 03         syscall sys_io      ; receive in ah
0231+  0A40 76 6E         cmp ah, 'n'
0232+  0A42 C6 50 0A      je _gettxt_lf
0233+  0A45 76 72         cmp ah, 'r'
0234+  0A47 C6 57 0A      je _gettxt_cr
0235+  0A4A 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  0A4B 3E            mov [d], al
0237+  0A4C 79            inc d
0238+  0A4D 0A 23 0A      jmp _gettxt_loop
0239+  0A50             _gettxt_lf:
0240+  0A50 19 0A         mov al, $0a
0241+  0A52 3E            mov [d], al
0242+  0A53 79            inc d
0243+  0A54 0A 23 0A      jmp _gettxt_loop
0244+  0A57             _gettxt_cr:
0245+  0A57 19 0D         mov al, $0d
0246+  0A59 3E            mov [d], al
0247+  0A5A 79            inc d
0248+  0A5B 0A 23 0A      jmp _gettxt_loop
0249+  0A5E             _gettxt_backspace:
0250+  0A5E 7F            dec d
0251+  0A5F 0A 23 0A      jmp _gettxt_loop
0252+  0A62             _gettxt_end:
0253+  0A62 19 00         mov al, 0
0254+  0A64 3E            mov [d], al        ; terminate string
0255+  0A65 E7            pop d
0256+  0A66 E4            pop a
0257+  0A67 09            ret
0258+  0A68             
0259+  0A68             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  0A68             ; print new line
0261+  0A68             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  0A68             printnl:
0263+  0A68 D7            push a
0264+  0A69 10 00 0A      mov a, $0a00
0265+  0A6C 05 03         syscall sys_io
0266+  0A6E 10 00 0D      mov a, $0d00
0267+  0A71 05 03         syscall sys_io
0268+  0A73 E4            pop a
0269+  0A74 09            ret
0270+  0A75             
0271+  0A75             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  0A75             ; _strtoint
0273+  0A75             ; 4 digit hex string number in d
0274+  0A75             ; integer returned in a
0275+  0A75             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  0A75             _strtointx:
0277+  0A75 D8            push b
0278+  0A76 32            mov bl, [d]
0279+  0A77 37            mov bh, bl
0280+  0A78 33 01 00      mov bl, [d + 1]
0281+  0A7B 07 4C 09      call _atoi        ; convert to int in al
0282+  0A7E 23            mov ah, al        ; move to ah
0283+  0A7F 33 02 00      mov bl, [d + 2]
0284+  0A82 37            mov bh, bl
0285+  0A83 33 03 00      mov bl, [d + 3]
0286+  0A86 07 4C 09      call _atoi        ; convert to int in al
0287+  0A89 E5            pop b
0288+  0A8A 09            ret
0289+  0A8B             
0290+  0A8B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  0A8B             ; _strtoint
0292+  0A8B             ; 5 digit base10 string number in d
0293+  0A8B             ; integer returned in a
0294+  0A8B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  0A8B             _strtoint:
0296+  0A8B E2            push si
0297+  0A8C D8            push b
0298+  0A8D D9            push c
0299+  0A8E DA            push d
0300+  0A8F 07 EE 08      call _strlen      ; get string length in c
0301+  0A92 7E            dec c
0302+  0A93 FD 4E         mov si, d
0303+  0A95 12            mov a, c
0304+  0A96 FD 99         shl a
0305+  0A98 3B 0F 0C      mov d, table_power
0306+  0A9B 59            add d, a
0307+  0A9C 38 00 00      mov c, 0
0308+  0A9F             _strtoint_l0:
0309+  0A9F F6            lodsb      ; load ascii to al
0310+  0AA0 B9 00         cmp al, 0
0311+  0AA2 C6 B5 0A      je _strtoint_end
0312+  0AA5 6F 30         sub al, $30    ; make into integer
0313+  0AA7 22 00         mov ah, 0
0314+  0AA9 2A            mov b, [d]
0315+  0AAA AC            mul a, b      ; result in b since it fits in 16bits
0316+  0AAB 11            mov a, b
0317+  0AAC 28            mov b, c
0318+  0AAD 54            add a, b
0319+  0AAE 39            mov c, a
0320+  0AAF 63 02 00      sub d, 2
0321+  0AB2 0A 9F 0A      jmp _strtoint_l0
0322+  0AB5             _strtoint_end:
0323+  0AB5 12            mov a, c
0324+  0AB6 E7            pop d
0325+  0AB7 E6            pop c
0326+  0AB8 E5            pop b
0327+  0AB9 EF            pop si
0328+  0ABA 09            ret
0329+  0ABB             
0330+  0ABB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  0ABB             ; print null terminated string
0332+  0ABB             ; pointer in d
0333+  0ABB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  0ABB             _puts:
0335+  0ABB D7            push a
0336+  0ABC DA            push d
0337+  0ABD             _puts_l1:
0338+  0ABD 1E            mov al, [d]
0339+  0ABE B9 00         cmp al, 0
0340+  0AC0 C6 CC 0A      jz _puts_end
0341+  0AC3 23            mov ah, al
0342+  0AC4 19 00         mov al, 0
0343+  0AC6 05 03         syscall sys_io
0344+  0AC8 79            inc d
0345+  0AC9 0A BD 0A      jmp _puts_l1
0346+  0ACC             _puts_end:
0347+  0ACC E7            pop d
0348+  0ACD E4            pop a
0349+  0ACE 09            ret
0350+  0ACF             
0351+  0ACF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  0ACF             ; print n size string
0353+  0ACF             ; pointer in d
0354+  0ACF             ; size in c
0355+  0ACF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  0ACF             _putsn:
0357+  0ACF DB            push al
0358+  0AD0 DA            push d
0359+  0AD1 D9            push c
0360+  0AD2             _putsn_l0:
0361+  0AD2 1E            mov al, [d]
0362+  0AD3 23            mov ah, al
0363+  0AD4 19 00         mov al, 0
0364+  0AD6 05 03         syscall sys_io
0365+  0AD8 79            inc d
0366+  0AD9 7E            dec c  
0367+  0ADA C2 00 00      cmp c, 0
0368+  0ADD C7 D2 0A      jne _putsn_l0
0369+  0AE0             _putsn_end:
0370+  0AE0 E6            pop c
0371+  0AE1 E7            pop d
0372+  0AE2 E8            pop al
0373+  0AE3 09            ret
0374+  0AE4             
0375+  0AE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  0AE4             ; print 16bit decimal number
0377+  0AE4             ; input number in a
0378+  0AE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0AE4             print_u16d:
0380+  0AE4 D7            push a
0381+  0AE5 D8            push b
0382+  0AE6 FD D8         push g
0383+  0AE8 26 10 27      mov b, 10000
0384+  0AEB AE            div a, b      ; get 10000's coeff.
0385+  0AEC 07 10 0B      call print_number
0386+  0AEF 11            mov a, b
0387+  0AF0 26 E8 03      mov b, 1000
0388+  0AF3 AE            div a, b      ; get 1000's coeff.
0389+  0AF4 07 10 0B      call print_number
0390+  0AF7 11            mov a, b
0391+  0AF8 26 64 00      mov b, 100
0392+  0AFB AE            div a, b
0393+  0AFC 07 10 0B      call print_number
0394+  0AFF 11            mov a, b
0395+  0B00 26 0A 00      mov b, 10
0396+  0B03 AE            div a, b
0397+  0B04 07 10 0B      call print_number
0398+  0B07 1B            mov al, bl      ; 1's coeff in bl
0399+  0B08 07 10 0B      call print_number
0400+  0B0B FD F1         pop g
0401+  0B0D E5            pop b
0402+  0B0E E4            pop a
0403+  0B0F 09            ret
0404+  0B10             
0405+  0B10             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  0B10             ; print al
0407+  0B10             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  0B10             print_number:
0409+  0B10 6A 30         add al, $30
0410+  0B12 23            mov ah, al
0411+  0B13 07 8F 09      call _putchar
0412+  0B16 09            ret
0413+  0B17             
0414+  0B17             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  0B17             ; print 16bit hex integer
0416+  0B17             ; integer value in reg b
0417+  0B17             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  0B17             print_u16x:
0419+  0B17 D7            push a
0420+  0B18 D8            push b
0421+  0B19 DD            push bl
0422+  0B1A 30            mov bl, bh
0423+  0B1B 07 5D 09      call _itoa        ; convert bh to char in a
0424+  0B1E 2F            mov bl, al        ; save al
0425+  0B1F 19 00         mov al, 0
0426+  0B21 05 03         syscall sys_io        ; display ah
0427+  0B23 24            mov ah, bl        ; retrieve al
0428+  0B24 19 00         mov al, 0
0429+  0B26 05 03         syscall sys_io        ; display al
0430+  0B28             
0431+  0B28 EA            pop bl
0432+  0B29 07 5D 09      call _itoa        ; convert bh to char in a
0433+  0B2C 2F            mov bl, al        ; save al
0434+  0B2D 19 00         mov al, 0
0435+  0B2F 05 03         syscall sys_io        ; display ah
0436+  0B31 24            mov ah, bl        ; retrieve al
0437+  0B32 19 00         mov al, 0
0438+  0B34 05 03         syscall sys_io        ; display al
0439+  0B36             
0440+  0B36 E5            pop b
0441+  0B37 E4            pop a
0442+  0B38 09            ret
0443+  0B39             
0444+  0B39             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  0B39             ; input 16bit hex integer
0446+  0B39             ; read 16bit integer into a
0447+  0B39             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  0B39             scan_u16x:
0449+  0B39 F8 10 00      enter 16
0450+  0B3C D8            push b
0451+  0B3D DA            push d
0452+  0B3E             
0453+  0B3E FA F1 FF      lea d, [bp + -15]
0454+  0B41 07 96 09      call _gets        ; get number
0455+  0B44             
0456+  0B44 32            mov bl, [d]
0457+  0B45 37            mov bh, bl
0458+  0B46 33 01 00      mov bl, [d + 1]
0459+  0B49 07 4C 09      call _atoi        ; convert to int in al
0460+  0B4C 23            mov ah, al        ; move to ah
0461+  0B4D             
0462+  0B4D 33 02 00      mov bl, [d + 2]
0463+  0B50 37            mov bh, bl
0464+  0B51 33 03 00      mov bl, [d + 3]
0465+  0B54 07 4C 09      call _atoi        ; convert to int in al
0466+  0B57             
0467+  0B57 E7            pop d
0468+  0B58 E5            pop b
0469+  0B59 F9            leave
0470+  0B5A 09            ret
0471+  0B5B             
0472+  0B5B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  0B5B             ; print 8bit hex integer
0474+  0B5B             ; integer value in reg bl
0475+  0B5B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0B5B             print_u8x:
0477+  0B5B D7            push a
0478+  0B5C DD            push bl
0479+  0B5D             
0480+  0B5D 07 5D 09      call _itoa        ; convert bl to char in a
0481+  0B60 2F            mov bl, al        ; save al
0482+  0B61 19 00         mov al, 0
0483+  0B63 05 03         syscall sys_io        ; display ah
0484+  0B65 24            mov ah, bl        ; retrieve al
0485+  0B66 19 00         mov al, 0
0486+  0B68 05 03         syscall sys_io        ; display al
0487+  0B6A             
0488+  0B6A EA            pop bl
0489+  0B6B E4            pop a
0490+  0B6C 09            ret
0491+  0B6D             
0492+  0B6D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  0B6D             ; print 8bit decimal unsigned number
0494+  0B6D             ; input number in al
0495+  0B6D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  0B6D             print_u8d:
0497+  0B6D D7            push a
0498+  0B6E D8            push b
0499+  0B6F FD D8         push g
0500+  0B71 22 00         mov ah, 0
0501+  0B73 26 64 00      mov b, 100
0502+  0B76 AE            div a, b
0503+  0B77 D8            push b      ; save remainder
0504+  0B78 B9 00         cmp al, 0
0505+  0B7A C6 84 0B      je skip100
0506+  0B7D 6A 30         add al, $30
0507+  0B7F 23            mov ah, al
0508+  0B80 19 00         mov al, 0
0509+  0B82 05 03         syscall sys_io  ; print coeff
0510+  0B84             skip100:
0511+  0B84 E4            pop a
0512+  0B85 22 00         mov ah, 0
0513+  0B87 26 0A 00      mov b, 10
0514+  0B8A AE            div a, b
0515+  0B8B D8            push b      ; save remainder
0516+  0B8C B9 00         cmp al, 0
0517+  0B8E C6 98 0B      je skip10
0518+  0B91 6A 30         add al, $30
0519+  0B93 23            mov ah, al
0520+  0B94 19 00         mov al, 0
0521+  0B96 05 03         syscall sys_io  ; print coeff
0522+  0B98             skip10:
0523+  0B98 E4            pop a
0524+  0B99 1B            mov al, bl
0525+  0B9A 6A 30         add al, $30
0526+  0B9C 23            mov ah, al
0527+  0B9D 19 00         mov al, 0
0528+  0B9F 05 03         syscall sys_io  ; print coeff
0529+  0BA1 FD F1         pop g
0530+  0BA3 E5            pop b
0531+  0BA4 E4            pop a
0532+  0BA5 09            ret
0533+  0BA6             
0534+  0BA6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  0BA6             ; input 8bit hex integer
0536+  0BA6             ; read 8bit integer into al
0537+  0BA6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  0BA6             scan_u8x:
0539+  0BA6 F8 04 00      enter 4
0540+  0BA9 D8            push b
0541+  0BAA DA            push d
0542+  0BAB             
0543+  0BAB FA FD FF      lea d, [bp + -3]
0544+  0BAE 07 96 09      call _gets        ; get number
0545+  0BB1             
0546+  0BB1 32            mov bl, [d]
0547+  0BB2 37            mov bh, bl
0548+  0BB3 33 01 00      mov bl, [d + 1]
0549+  0BB6 07 4C 09      call _atoi        ; convert to int in al
0550+  0BB9             
0551+  0BB9 E7            pop d
0552+  0BBA E5            pop b
0553+  0BBB F9            leave
0554+  0BBC 09            ret
0555+  0BBD             
0556+  0BBD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  0BBD             ; input decimal number
0558+  0BBD             ; result in a
0559+  0BBD             ; 655'\0'
0560+  0BBD             ; low--------high
0561+  0BBD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  0BBD             scan_u16d:
0563+  0BBD F8 08 00      enter 8
0564+  0BC0 E2            push si
0565+  0BC1 D8            push b
0566+  0BC2 D9            push c
0567+  0BC3 DA            push d
0568+  0BC4 FA F9 FF      lea d, [bp +- 7]
0569+  0BC7 07 96 09      call _gets
0570+  0BCA 07 EE 08      call _strlen      ; get string length in c
0571+  0BCD 7E            dec c
0572+  0BCE FD 4E         mov si, d
0573+  0BD0 12            mov a, c
0574+  0BD1 FD 99         shl a
0575+  0BD3 3B 0F 0C      mov d, table_power
0576+  0BD6 59            add d, a
0577+  0BD7 38 00 00      mov c, 0
0578+  0BDA             mul_loop:
0579+  0BDA F6            lodsb      ; load ascii to al
0580+  0BDB B9 00         cmp al, 0
0581+  0BDD C6 F0 0B      je mul_exit
0582+  0BE0 6F 30         sub al, $30    ; make into integer
0583+  0BE2 22 00         mov ah, 0
0584+  0BE4 2A            mov b, [d]
0585+  0BE5 AC            mul a, b      ; result in b since it fits in 16bits
0586+  0BE6 11            mov a, b
0587+  0BE7 28            mov b, c
0588+  0BE8 54            add a, b
0589+  0BE9 39            mov c, a
0590+  0BEA 63 02 00      sub d, 2
0591+  0BED 0A DA 0B      jmp mul_loop
0592+  0BF0             mul_exit:
0593+  0BF0 12            mov a, c
0594+  0BF1 E7            pop d
0595+  0BF2 E6            pop c
0596+  0BF3 E5            pop b
0597+  0BF4 EF            pop si
0598+  0BF5 F9            leave
0599+  0BF6 09            ret
0600+  0BF7             
0601+  0BF7             
0602+  0BF7 30 31 32 33 s_hex_digits:    .db "0123456789abcdef"  
0602+  0BFB 34 35 36 37 
0602+  0BFF 38 39 61 62 
0602+  0C03 63 64 65 66 
0603+  0C07 1B 5B 32 6A s_telnet_clear:  .db "\033[2j\033[h", 0
0603+  0C0B 1B 5B 68 00 
0604+  0C0F             
0605+  0C0F             table_power:
0606+  0C0F 01 00         .dw 1
0607+  0C11 0A 00         .dw 10
0608+  0C13 64 00         .dw 100
0609+  0C15 E8 03         .dw 1000
0610+  0C17 10 27         .dw 100000426   0C19             .include "lib/ctype.asm"
0001+  0C19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0C19             ; ctype.s
0003+  0C19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0C19             
0005+  0C19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0C19             ;; c character classification is an operation provided by a group of functions in the ansi c standard library
0007+  0C19             ;; for the c programming language. these functions are used to test characters for membership in a particular
0008+  0C19             ;; class of characters, such as alphabetic characters, control characters, etc. both single-byte, and wide
0009+  0C19             ;; characters are supported.
0010+  0C19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0C19             ;; _isalnum 
0012+  0C19             ;; _isalpha 
0013+  0C19             ;; islower 
0014+  0C19             ;; isupper 
0015+  0C19             ;; _isdigit 
0016+  0C19             ;; isxdigit
0017+  0C19             ;; iscntrl 
0018+  0C19             ;; isgraph 
0019+  0C19             ;; _isspace 
0020+  0C19             ;; isblank 
0021+  0C19             ;; isprint 
0022+  0C19             ;; ispunct 
0023+  0C19             ;; tolower 
0024+  0C19             ;; toupper
0025+  0C19             
0026+  0C19             
0027+  0C19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0C19             ;; is alphanumeric
0029+  0C19             ;; sets zf according with result
0030+  0C19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0C19             _isalnum:
0032+  0C19 07 36 0C    	call _isalpha
0033+  0C1C C6 22 0C    	je _isalnum_exit
0034+  0C1F 07 23 0C    	call _isdigit
0035+  0C22             _isalnum_exit:
0036+  0C22 09          	ret	
0037+  0C23             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0C23             ;; is digit
0039+  0C23             ;; sets zf according with result
0040+  0C23             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0C23             _isdigit:
0042+  0C23 DB          	push al
0043+  0C24 B9 30       	cmp al, '0'
0044+  0C26 C8 32 0C    	jlu _isdigit_false
0045+  0C29 B9 39       	cmp al, '9'
0046+  0C2B D1 32 0C    	jgu _isdigit_false
0047+  0C2E 87 00       	and al, 0	; set zf
0048+  0C30 E8          	pop al
0049+  0C31 09          	ret
0050+  0C32             _isdigit_false:
0051+  0C32 8B 01       	or al, 1	; clear zf
0052+  0C34 E8          	pop al
0053+  0C35 09          	ret	
0054+  0C36             	
0055+  0C36             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0C36             ;; is alpha
0057+  0C36             ;; sets zf according with result
0058+  0C36             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0C36             _isalpha:
0060+  0C36 DB          	push al
0061+  0C37 B9 5F       	cmp al, '_'
0062+  0C39 C6 59 0C    	je _isalpha_true
0063+  0C3C B9 2E       	cmp al, '.'
0064+  0C3E C6 59 0C    	je _isalpha_true
0065+  0C41 B9 61       	cmp al, 'a'
0066+  0C43 C8 55 0C    	jlu _isalpha_false
0067+  0C46 B9 7A       	cmp al, 'z'
0068+  0C48 D1 55 0C    	jgu _isalpha_false
0069+  0C4B B9 7A       	cmp al, 'z'
0070+  0C4D D0 59 0C    	jleu _isalpha_true
0071+  0C50 B9 61       	cmp al, 'a'
0072+  0C52 C9 59 0C    	jgeu _isalpha_true
0073+  0C55             _isalpha_false:
0074+  0C55 8B 01       	or al, 1	; clear zf
0075+  0C57 E8          	pop al
0076+  0C58 09          	ret
0077+  0C59             _isalpha_true:
0078+  0C59 87 00       	and al, 0	; set zf
0079+  0C5B E8          	pop al
0080+  0C5C 09          	ret
0081+  0C5D             
0082+  0C5D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0C5D             ;; is path-alpha
0084+  0C5D             ;; sets zf according with result
0085+  0C5D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0C5D             ispath:
0087+  0C5D DB          	push al
0088+  0C5E 07 23 0C    	call _isdigit
0089+  0C61 C6 8B 0C    	je ispath_true
0090+  0C64 B9 5F       	cmp al, '_'
0091+  0C66 C6 8B 0C    	je ispath_true
0092+  0C69 B9 2F       	cmp al, '/'
0093+  0C6B C6 8B 0C    	je ispath_true
0094+  0C6E B9 2E       	cmp al, '.'
0095+  0C70 C6 8B 0C    	je ispath_true
0096+  0C73 B9 61       	cmp al, 'a'
0097+  0C75 C8 87 0C    	jlu ispath_false
0098+  0C78 B9 7A       	cmp al, 'z'
0099+  0C7A D1 87 0C    	jgu ispath_false
0100+  0C7D B9 7A       	cmp al, 'z'
0101+  0C7F D0 8B 0C    	jleu ispath_true
0102+  0C82 B9 61       	cmp al, 'a'
0103+  0C84 C9 8B 0C    	jgeu ispath_true
0104+  0C87             ispath_false:
0105+  0C87 8B 01       	or al, 1	; clear zf
0106+  0C89 E8          	pop al
0107+  0C8A 09          	ret
0108+  0C8B             ispath_true:
0109+  0C8B 87 00       	and al, 0	; set zf
0110+  0C8D E8          	pop al
0111+  0C8E 09          	ret
0112+  0C8F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0C8F             ;; is space
0114+  0C8F             ;; sets zf according with result
0115+  0C8F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0C8F             _isspace:
0117+  0C8F B9 20       	cmp al, $20		; ' '
0118+  0C91 C6 A5 0C    	je _isspace_exit
0119+  0C94 B9 09       	cmp al, $09		; '\t'
0120+  0C96 C6 A5 0C    	je _isspace_exit
0121+  0C99 B9 0A       	cmp al, $0a		; '\n'
0122+  0C9B C6 A5 0C    	je _isspace_exit
0123+  0C9E B9 0D       	cmp al, $0d		; '\r'
0124+  0CA0 C6 A5 0C    	je _isspace_exit
0125+  0CA3 B9 0B       	cmp al, $0b		; '\v'
0126+  0CA5             _isspace_exit:
0127+  0CA5 09          	ret	
0128+  0CA6             
0129+  0CA6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0CA6             ; to lower
0131+  0CA6             ; input in al
0132+  0CA6             ; output in al
0133+  0CA6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0CA6             _to_lower:
0135+  0CA6 B9 7A       	cmp al, 'z'
0136+  0CA8 D1 AD 0C    	jgu _to_lower_ret
0137+  0CAB 6A 20       	add al, $20				; convert to lower case
0138+  0CAD             _to_lower_ret:
0139+  0CAD 09          	ret
0140+  0CAE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0CAE             ; to upper
0142+  0CAE             ; input in al
0143+  0CAE             ; output in al
0144+  0CAE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0CAE             _to_upper:
0146+  0CAE B9 61       	cmp al, 'a'
0147+  0CB0 C8 B5 0C    	jlu _to_upper_ret
0148+  0CB3 6F 20       	sub al, $20			; convert to upper case
0149+  0CB5             _to_upper_ret:
0150+  0CB5 09          	ret
0151+  0CB6             
0427   0CB6             .include "lib/token.asm"
0001+  0CB6             toktyp_identifier  .equ 0
0002+  0CB6             toktyp_keyword     .equ 1
0003+  0CB6             toktyp_delimiter   .equ 2
0004+  0CB6             toktyp_string      .equ 3
0005+  0CB6             toktyp_char        .equ 4
0006+  0CB6             toktyp_numeric     .equ 5
0007+  0CB6             toktyp_end         .equ 6
0008+  0CB6             
0009+  0CB6             tok_null           .equ 0
0010+  0CB6             tok_fslash         .equ 1
0011+  0CB6             tok_times          .equ 2
0012+  0CB6             tok_plus           .equ 3
0013+  0CB6             tok_minus          .equ 4
0014+  0CB6             tok_dot            .equ 5
0015+  0CB6             tok_semi           .equ 6
0016+  0CB6             tok_angle          .equ 7
0017+  0CB6             tok_tilde          .equ 8
0018+  0CB6             tok_equal          .equ 9
0019+  0CB6             tok_colon          .equ 10
0020+  0CB6             tok_comma          .equ 11
0021+  0CB6             
0022+  0CB6             tok_end            .equ 20
0023+  0CB6             
0024+  0CB6             
0025+  0CB6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0CB6             ;; read a full command argment from shell input buffer
0027+  0CB6             ;; argument is written into tokstr
0028+  0CB6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  0CB6             get_arg:
0030+  0CB6 D7            push a
0031+  0CB7 E2            push si
0032+  0CB8 E3            push di
0033+  0CB9 19 00         mov al, 0
0034+  0CBB 3D E4 0E      mov [tokstr], al      ; nullify tokstr string
0035+  0CBE 14 E0 0E      mov a, [prog]
0036+  0CC1 4D            mov si, a
0037+  0CC2 FD 4F E4 0E   mov di, tokstr
0038+  0CC6             get_arg_skip_spaces:
0039+  0CC6 F6            lodsb
0040+  0CC7 07 8F 0C      call _isspace
0041+  0CCA C6 C6 0C      je get_arg_skip_spaces
0042+  0CCD             get_arg_l0:
0043+  0CCD B9 3B         cmp al, $3b        ; check if is ';'
0044+  0CCF C6 DC 0C      je get_arg_end
0045+  0CD2 B9 00         cmp al, 0
0046+  0CD4 C6 DC 0C      je get_arg_end      ; check if end of input
0047+  0CD7 F7            stosb
0048+  0CD8 F6            lodsb
0049+  0CD9 0A CD 0C      jmp get_arg_l0
0050+  0CDC             get_arg_end:
0051+  0CDC 19 00         mov al, 0
0052+  0CDE F7            stosb
0053+  0CDF D5 01 00      sub si, 1
0054+  0CE2 4E            mov a, si
0055+  0CE3 42 E0 0E      mov [prog], a    ; update pointer
0056+  0CE6 F0            pop di
0057+  0CE7 EF            pop si
0058+  0CE8 E4            pop a
0059+  0CE9 09            ret
0060+  0CEA             
0061+  0CEA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0CEA             ;; read a path formation from shell input buffer
0063+  0CEA             ;; path is written into tokstr
0064+  0CEA             ;; /usr/bin
0065+  0CEA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0CEA             get_path:
0067+  0CEA D7            push a
0068+  0CEB E2            push si
0069+  0CEC E3            push di
0070+  0CED 19 00         mov al, 0
0071+  0CEF 3D E4 0E      mov [tokstr], al      ; nullify tokstr string
0072+  0CF2 14 E0 0E      mov a, [prog]
0073+  0CF5 4D            mov si, a
0074+  0CF6 FD 4F E4 0E   mov di, tokstr
0075+  0CFA             get_path_skip_spaces:
0076+  0CFA F6            lodsb
0077+  0CFB 07 8F 0C      call _isspace
0078+  0CFE C6 FA 0C      je get_path_skip_spaces
0079+  0D01             get_path_is_pathchar:
0080+  0D01 F7            stosb
0081+  0D02 F6            lodsb
0082+  0D03 07 19 0C      call _isalnum      ;check if is alphanumeric
0083+  0D06 C6 01 0D      je get_path_is_pathchar
0084+  0D09 B9 2F         cmp al, '/'        ; check if is '/'
0085+  0D0B C6 01 0D      je get_path_is_pathchar
0086+  0D0E 19 00         mov al, 0
0087+  0D10 F7            stosb
0088+  0D11 D5 01 00      sub si, 1
0089+  0D14 4E            mov a, si
0090+  0D15 42 E0 0E      mov [prog], a    ; update pointer
0091+  0D18             get_path_end:
0092+  0D18 F0            pop di
0093+  0D19 EF            pop si
0094+  0D1A E4            pop a
0095+  0D1B 09            ret
0096+  0D1C             
0097+  0D1C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  0D1C             ;; read a line
0099+  0D1C             ;; line is written into tokstr
0100+  0D1C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  0D1C             get_line:
0102+  0D1C D7            push a
0103+  0D1D E2            push si
0104+  0D1E E3            push di
0105+  0D1F 19 00         mov al, 0
0106+  0D21 3D E4 0E      mov [tokstr], al      ; nullify tokstr string
0107+  0D24 14 E0 0E      mov a, [prog]
0108+  0D27 4D            mov si, a
0109+  0D28 FD 4F E4 0E   mov di, tokstr
0110+  0D2C             get_line_l0:
0111+  0D2C F6            lodsb
0112+  0D2D B9 0A         cmp al, $0a    ; check for new line
0113+  0D2F C6 36 0D      je get_line_exit
0114+  0D32 F7            stosb
0115+  0D33 0A 2C 0D      jmp get_line_l0
0116+  0D36             get_line_exit:
0117+  0D36 19 00         mov al, 0
0118+  0D38 F7            stosb
0119+  0D39 4E            mov a, si
0120+  0D3A 42 E0 0E      mov [prog], a    ; update pointer
0121+  0D3D F0            pop di
0122+  0D3E EF            pop si
0123+  0D3F E4            pop a
0124+  0D40 09            ret
0125+  0D41             
0126+  0D41             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0D41             ;; token parser
0128+  0D41             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0D41             get_token:
0130+  0D41 D7            push a
0131+  0D42 DA            push d
0132+  0D43 E2            push si
0133+  0D44 E3            push di
0134+  0D45 19 00         mov al, 0
0135+  0D47 3D E4 0E      mov [tokstr], al      ; nullify tokstr string
0136+  0D4A 19 00         mov al, tok_null
0137+  0D4C 3D E3 0E      mov [tok], al        ; nullify token
0138+  0D4F 14 E0 0E      mov a, [prog]
0139+  0D52 4D            mov si, a
0140+  0D53 FD 4F E4 0E   mov di, tokstr
0141+  0D57             get_tok_skip_spaces:
0142+  0D57 F6            lodsb
0143+  0D58 07 8F 0C      call _isspace
0144+  0D5B C6 57 0D      je get_tok_skip_spaces
0145+  0D5E B9 00         cmp al, 0      ; check for end of input (null)
0146+  0D60 C6 45 0E      je get_token_end
0147+  0D63 B9 23         cmp al, '#'      ; comments!
0148+  0D65 C6 73 0E      je get_tok_comment
0149+  0D68 07 19 0C      call _isalnum
0150+  0D6B C6 52 0E      jz is_alphanumeric
0151+  0D6E             ; other token types
0152+  0D6E             get_token_slash:
0153+  0D6E B9 2F         cmp al, '/'        ; check if '/'
0154+  0D70 C7 88 0D      jne get_token_minus
0155+  0D73 F7            stosb          ; store '/' into token string
0156+  0D74 19 00         mov al, 0
0157+  0D76 F7            stosb          ; terminate token string
0158+  0D77 19 01         mov al, tok_fslash
0159+  0D79 3D E3 0E      mov [tok], al      
0160+  0D7C 19 02         mov al, toktyp_delimiter
0161+  0D7E 3D E2 0E      mov [toktyp], al
0162+  0D81 4E            mov a, si
0163+  0D82 42 E0 0E      mov [prog], a    ; update pointer
0164+  0D85 0A 6E 0E      jmp get_token_return
0165+  0D88             get_token_minus:
0166+  0D88 B9 2D         cmp al, '-'        ; check if '-'
0167+  0D8A C7 A2 0D      jne get_token_comma
0168+  0D8D F7            stosb          ; store '-' into token string
0169+  0D8E 19 00         mov al, 0
0170+  0D90 F7            stosb          ; terminate token string
0171+  0D91 19 04         mov al, tok_minus
0172+  0D93 3D E3 0E      mov [tok], al      
0173+  0D96 19 02         mov al, toktyp_delimiter
0174+  0D98 3D E2 0E      mov [toktyp], al
0175+  0D9B 4E            mov a, si
0176+  0D9C 42 E0 0E      mov [prog], a    ; update pointer
0177+  0D9F 0A 6E 0E      jmp get_token_return
0178+  0DA2             get_token_comma:
0179+  0DA2 B9 2C         cmp al, ','        ; check if ','
0180+  0DA4 C7 BC 0D      jne get_token_semi
0181+  0DA7 F7            stosb          ; store ',' into token string
0182+  0DA8 19 00         mov al, 0
0183+  0DAA F7            stosb          ; terminate token string
0184+  0DAB 19 0B         mov al, tok_comma
0185+  0DAD 3D E3 0E      mov [tok], al      
0186+  0DB0 19 02         mov al, toktyp_delimiter
0187+  0DB2 3D E2 0E      mov [toktyp], al
0188+  0DB5 4E            mov a, si
0189+  0DB6 42 E0 0E      mov [prog], a    ; update pointer
0190+  0DB9 0A 6E 0E      jmp get_token_return
0191+  0DBC             get_token_semi:
0192+  0DBC B9 3B         cmp al, $3b        ; check if ';'
0193+  0DBE C7 D6 0D      jne get_token_colon
0194+  0DC1 F7            stosb          ; store ';' into token string
0195+  0DC2 19 00         mov al, 0
0196+  0DC4 F7            stosb          ; terminate token string
0197+  0DC5 19 06         mov al, tok_semi
0198+  0DC7 3D E3 0E      mov [tok], al      
0199+  0DCA 19 02         mov al, toktyp_delimiter
0200+  0DCC 3D E2 0E      mov [toktyp], al
0201+  0DCF 4E            mov a, si
0202+  0DD0 42 E0 0E      mov [prog], a    ; update pointer
0203+  0DD3 0A 6E 0E      jmp get_token_return
0204+  0DD6             get_token_colon:
0205+  0DD6 B9 3A         cmp al, $3a        ; check if ':'
0206+  0DD8 C7 F0 0D      jne get_token_angle
0207+  0DDB F7            stosb          ; store ':' into token string
0208+  0DDC 19 00         mov al, 0
0209+  0DDE F7            stosb          ; terminate token string
0210+  0DDF 19 0A         mov al, tok_colon
0211+  0DE1 3D E3 0E      mov [tok], al      
0212+  0DE4 19 02         mov al, toktyp_delimiter
0213+  0DE6 3D E2 0E      mov [toktyp], al
0214+  0DE9 4E            mov a, si
0215+  0DEA 42 E0 0E      mov [prog], a    ; update pointer
0216+  0DED 0A 6E 0E      jmp get_token_return
0217+  0DF0             get_token_angle:
0218+  0DF0 B9 3E         cmp al, $3e        ; check if '>'
0219+  0DF2 C7 0A 0E      jne get_token_tilde
0220+  0DF5 F7            stosb          ; store '>' into token string
0221+  0DF6 19 00         mov al, 0
0222+  0DF8 F7            stosb          ; terminate token string
0223+  0DF9 19 07         mov al, tok_angle
0224+  0DFB 3D E3 0E      mov [tok], al      
0225+  0DFE 19 02         mov al, toktyp_delimiter
0226+  0E00 3D E2 0E      mov [toktyp], al
0227+  0E03 4E            mov a, si
0228+  0E04 42 E0 0E      mov [prog], a    ; update pointer
0229+  0E07 0A 6E 0E      jmp get_token_return
0230+  0E0A             get_token_tilde:
0231+  0E0A B9 7E         cmp al, '~'        ; check if '~'
0232+  0E0C C7 24 0E      jne get_token_equal
0233+  0E0F F7            stosb          ; store '~' into token string
0234+  0E10 19 00         mov al, 0
0235+  0E12 F7            stosb          ; terminate token string
0236+  0E13 19 08         mov al, tok_tilde
0237+  0E15 3D E3 0E      mov [tok], al      
0238+  0E18 19 02         mov al, toktyp_delimiter
0239+  0E1A 3D E2 0E      mov [toktyp], al
0240+  0E1D 4E            mov a, si
0241+  0E1E 42 E0 0E      mov [prog], a    ; update pointer
0242+  0E21 0A 6E 0E      jmp get_token_return
0243+  0E24             get_token_equal:
0244+  0E24 B9 3D         cmp al, '='        ; check if '='
0245+  0E26 C7 3E 0E      jne get_token_skip
0246+  0E29 F7            stosb          ; store '=' into token string
0247+  0E2A 19 00         mov al, 0
0248+  0E2C F7            stosb          ; terminate token string
0249+  0E2D 19 09         mov al, tok_equal
0250+  0E2F 3D E3 0E      mov [tok], al      
0251+  0E32 19 02         mov al, toktyp_delimiter
0252+  0E34 3D E2 0E      mov [toktyp], al
0253+  0E37 4E            mov a, si
0254+  0E38 42 E0 0E      mov [prog], a    ; update pointer
0255+  0E3B 0A 6E 0E      jmp get_token_return
0256+  0E3E             get_token_skip:
0257+  0E3E 4E            mov a, si
0258+  0E3F 42 E0 0E      mov [prog], a    ; update pointer
0259+  0E42 0A 6E 0E      jmp get_token_return
0260+  0E45             get_token_end:        ; end of file token
0261+  0E45 19 14         mov al, tok_end
0262+  0E47 3D E3 0E      mov [tok], al
0263+  0E4A 19 06         mov al, toktyp_end
0264+  0E4C 3D E2 0E      mov [toktyp], al
0265+  0E4F 0A 6E 0E      jmp get_token_return
0266+  0E52             is_alphanumeric:
0267+  0E52 F7            stosb
0268+  0E53 F6            lodsb
0269+  0E54 07 19 0C      call _isalnum      ;check if is alphanumeric
0270+  0E57 C6 52 0E      jz is_alphanumeric
0271+  0E5A B9 2E         cmp al, $2e        ; check if is '.'
0272+  0E5C C6 52 0E      je is_alphanumeric
0273+  0E5F 19 00         mov al, 0
0274+  0E61 F7            stosb
0275+  0E62 19 00         mov al, toktyp_identifier
0276+  0E64 3D E2 0E      mov [toktyp], al
0277+  0E67 D5 01 00      sub si, 1
0278+  0E6A 4E            mov a, si
0279+  0E6B 42 E0 0E      mov [prog], a    ; update pointer
0280+  0E6E             get_token_return:
0281+  0E6E F0            pop di
0282+  0E6F EF            pop si
0283+  0E70 E7            pop d
0284+  0E71 E4            pop a
0285+  0E72 09            ret
0286+  0E73             get_tok_comment:
0287+  0E73 F6            lodsb
0288+  0E74 B9 0A         cmp al, $0a      ; new line
0289+  0E76 C7 73 0E      jne get_tok_comment
0290+  0E79 0A 57 0D      jmp get_tok_skip_spaces
0291+  0E7C             
0292+  0E7C             
0293+  0E7C             get_number:
0294+  0E7C D7            push a
0295+  0E7D DA            push d
0296+  0E7E E2            push si
0297+  0E7F E3            push di
0298+  0E80 19 00         mov al, 0
0299+  0E82 3D E4 0E      mov [tokstr], al      ; nullify tokstr string
0300+  0E85 19 00         mov al, tok_null
0301+  0E87 3D E3 0E      mov [tok], al        ; nullify token
0302+  0E8A 14 E0 0E      mov a, [prog]
0303+  0E8D 4D            mov si, a
0304+  0E8E FD 4F E4 0E   mov di, tokstr
0305+  0E92             get_number_skip_spaces:
0306+  0E92 F6            lodsb
0307+  0E93 07 8F 0C      call _isspace
0308+  0E96 C6 92 0E      je get_number_skip_spaces
0309+  0E99 B9 00         cmp al, 0      ; check for end of input (null)
0310+  0E9B C7 AB 0E      jne get_number_l0
0311+  0E9E 19 14         mov al, tok_end
0312+  0EA0 3D E3 0E      mov [tok], al
0313+  0EA3 19 06         mov al, toktyp_end
0314+  0EA5 3D E2 0E      mov [toktyp], al
0315+  0EA8 0A C2 0E      jmp get_number_return
0316+  0EAB             get_number_l0:
0317+  0EAB F7            stosb
0318+  0EAC F6            lodsb
0319+  0EAD 07 23 0C      call _isdigit      ;check if is numeric
0320+  0EB0 C6 AB 0E      jz get_number_l0
0321+  0EB3 19 00         mov al, 0
0322+  0EB5 F7            stosb
0323+  0EB6 19 05         mov al, toktyp_numeric
0324+  0EB8 3D E2 0E      mov [toktyp], al
0325+  0EBB D5 01 00      sub si, 1
0326+  0EBE 4E            mov a, si
0327+  0EBF 42 E0 0E      mov [prog], a    ; update pointer
0328+  0EC2             get_number_return:
0329+  0EC2 F0            pop di
0330+  0EC3 EF            pop si
0331+  0EC4 E7            pop d
0332+  0EC5 E4            pop a
0333+  0EC6 09            ret
0334+  0EC7             
0335+  0EC7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  0EC7             ;; put back token
0337+  0EC7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0338+  0EC7             _putback:
0339+  0EC7 D7            push a
0340+  0EC8 E2            push si
0341+  0EC9 FD 4D E4 0E   mov si, tokstr  
0342+  0ECD             _putback_loop:
0343+  0ECD F6            lodsb
0344+  0ECE B9 00         cmp al, 0
0345+  0ED0 C6 DD 0E      je _putback_end
0346+  0ED3 14 E0 0E      mov a, [prog]
0347+  0ED6 7D            dec a
0348+  0ED7 42 E0 0E      mov [prog], a      ; update pointer
0349+  0EDA 0A CD 0E      jmp _putback_loop
0350+  0EDD             _putback_end:
0351+  0EDD EF            pop si
0352+  0EDE E4            pop a
0353+  0EDF 09            ret
0354+  0EE0             
0355+  0EE0             
0356+  0EE0             
0357+  0EE0             
0358+  0EE0 00 00       prog:      .dw 0          ; pointer to current position in buffer
0359+  0EE2             
0360+  0EE2 00          toktyp:    .db 0          ; token type symbol
0361+  0EE3 00          tok:       .db 0          ; current token symbol
0362+  0EE4 00 00 00 00 tokstr:    .fill 256, 0   ; token as a string
0362+  0EE8 00 00 00 00 
0362+  0EEC 00 00 00 00 
0362+  0EF0 00 00 00 00 
0362+  0EF4 00 00 00 00 
0362+  0EF8 00 00 00 00 
0362+  0EFC 00 00 00 00 
0362+  0F00 00 00 00 00 
0362+  0F04 00 00 00 00 
0362+  0F08 00 00 00 00 
0362+  0F0C 00 00 00 00 
0362+  0F10 00 00 00 00 
0362+  0F14 00 00 00 00 
0362+  0F18 00 00 00 00 
0362+  0F1C 00 00 00 00 
0362+  0F20 00 00 00 00 
0362+  0F24 00 00 00 00 
0362+  0F28 00 00 00 00 
0362+  0F2C 00 00 00 00 
0362+  0F30 00 00 00 00 
0362+  0F34 00 00 00 00 
0362+  0F38 00 00 00 00 
0362+  0F3C 00 00 00 00 
0362+  0F40 00 00 00 00 
0362+  0F44 00 00 00 00 
0362+  0F48 00 00 00 00 
0362+  0F4C 00 00 00 00 
0362+  0F50 00 00 00 00 
0362+  0F54 00 00 00 00 
0362+  0F58 00 00 00 00 
0362+  0F5C 00 00 00 00 
0362+  0F60 00 00 00 00 
0362+  0F64 00 00 00 00 
0362+  0F68 00 00 00 00 
0362+  0F6C 00 00 00 00 
0362+  0F70 00 00 00 00 
0362+  0F74 00 00 00 00 
0362+  0F78 00 00 00 00 
0362+  0F7C 00 00 00 00 
0362+  0F80 00 00 00 00 
0362+  0F84 00 00 00 00 
0362+  0F88 00 00 00 00 
0362+  0F8C 00 00 00 00 
0362+  0F90 00 00 00 00 
0362+  0F94 00 00 00 00 
0362+  0F98 00 00 00 00 
0362+  0F9C 00 00 00 00 
0362+  0FA0 00 00 00 00 
0362+  0FA4 00 00 00 00 
0362+  0FA8 00 00 00 00 
0362+  0FAC 00 00 00 00 
0362+  0FB0 00 00 00 00 
0362+  0FB4 00 00 00 00 
0362+  0FB8 00 00 00 00 
0362+  0FBC 00 00 00 00 
0362+  0FC0 00 00 00 00 
0362+  0FC4 00 00 00 00 
0362+  0FC8 00 00 00 00 
0362+  0FCC 00 00 00 00 
0362+  0FD0 00 00 00 00 
0362+  0FD4 00 00 00 00 
0362+  0FD8 00 00 00 00 
0362+  0FDC 00 00 00 00 
0362+  0FE0 00 00 00 00 
0428   0FE4             
0429   0FE4 00 00       parser_index: .dw 0
0430   0FE6 00 00       start:	.dw 0
0431   0FE8 00 00       end:	.dw 0
0432   0FEA             
0433   0FEA FF FF FF FF new_input:		.fill 1024 * 4
0433   0FEE FF FF FF FF 
0433   0FF2 FF FF FF FF 
0433   0FF6 FF FF FF FF 
0433   0FFA FF FF FF FF 
0433   0FFE FF FF FF FF 
0433   1002 FF FF FF FF 
0433   1006 FF FF FF FF 
0433   100A FF FF FF FF 
0433   100E FF FF FF FF 
0433   1012 FF FF FF FF 
0433   1016 FF FF FF FF 
0433   101A FF FF FF FF 
0433   101E FF FF FF FF 
0433   1022 FF FF FF FF 
0433   1026 FF FF FF FF 
0433   102A FF FF FF FF 
0433   102E FF FF FF FF 
0433   1032 FF FF FF FF 
0433   1036 FF FF FF FF 
0433   103A FF FF FF FF 
0433   103E FF FF FF FF 
0433   1042 FF FF FF FF 
0433   1046 FF FF FF FF 
0433   104A FF FF FF FF 
0433   104E FF FF FF FF 
0433   1052 FF FF FF FF 
0433   1056 FF FF FF FF 
0433   105A FF FF FF FF 
0433   105E FF FF FF FF 
0433   1062 FF FF FF FF 
0433   1066 FF FF FF FF 
0433   106A FF FF FF FF 
0433   106E FF FF FF FF 
0433   1072 FF FF FF FF 
0433   1076 FF FF FF FF 
0433   107A FF FF FF FF 
0433   107E FF FF FF FF 
0433   1082 FF FF FF FF 
0433   1086 FF FF FF FF 
0433   108A FF FF FF FF 
0433   108E FF FF FF FF 
0433   1092 FF FF FF FF 
0433   1096 FF FF FF FF 
0433   109A FF FF FF FF 
0433   109E FF FF FF FF 
0433   10A2 FF FF FF FF 
0433   10A6 FF FF FF FF 
0433   10AA FF FF FF FF 
0433   10AE FF FF FF FF 
0433   10B2 FF FF FF FF 
0433   10B6 FF FF FF FF 
0433   10BA FF FF FF FF 
0433   10BE FF FF FF FF 
0433   10C2 FF FF FF FF 
0433   10C6 FF FF FF FF 
0433   10CA FF FF FF FF 
0433   10CE FF FF FF FF 
0433   10D2 FF FF FF FF 
0433   10D6 FF FF FF FF 
0433   10DA FF FF FF FF 
0433   10DE FF FF FF FF 
0433   10E2 FF FF FF FF 
0433   10E6 FF FF FF FF 
0433   10EA FF FF FF FF 
0433   10EE FF FF FF FF 
0433   10F2 FF FF FF FF 
0433   10F6 FF FF FF FF 
0433   10FA FF FF FF FF 
0433   10FE FF FF FF FF 
0433   1102 FF FF FF FF 
0433   1106 FF FF FF FF 
0433   110A FF FF FF FF 
0433   110E FF FF FF FF 
0433   1112 FF FF FF FF 
0433   1116 FF FF FF FF 
0433   111A FF FF FF FF 
0433   111E FF FF FF FF 
0433   1122 FF FF FF FF 
0433   1126 FF FF FF FF 
0433   112A FF FF FF FF 
0433   112E FF FF FF FF 
0433   1132 FF FF FF FF 
0433   1136 FF FF FF FF 
0433   113A FF FF FF FF 
0433   113E FF FF FF FF 
0433   1142 FF FF FF FF 
0433   1146 FF FF FF FF 
0433   114A FF FF FF FF 
0433   114E FF FF FF FF 
0433   1152 FF FF FF FF 
0433   1156 FF FF FF FF 
0433   115A FF FF FF FF 
0433   115E FF FF FF FF 
0433   1162 FF FF FF FF 
0433   1166 FF FF FF FF 
0433   116A FF FF FF FF 
0433   116E FF FF FF FF 
0433   1172 FF FF FF FF 
0433   1176 FF FF FF FF 
0433   117A FF FF FF FF 
0433   117E FF FF FF FF 
0433   1182 FF FF FF FF 
0433   1186 FF FF FF FF 
0433   118A FF FF FF FF 
0433   118E FF FF FF FF 
0433   1192 FF FF FF FF 
0433   1196 FF FF FF FF 
0433   119A FF FF FF FF 
0433   119E FF FF FF FF 
0433   11A2 FF FF FF FF 
0433   11A6 FF FF FF FF 
0433   11AA FF FF FF FF 
0433   11AE FF FF FF FF 
0433   11B2 FF FF FF FF 
0433   11B6 FF FF FF FF 
0433   11BA FF FF FF FF 
0433   11BE FF FF FF FF 
0433   11C2 FF FF FF FF 
0433   11C6 FF FF FF FF 
0433   11CA FF FF FF FF 
0433   11CE FF FF FF FF 
0433   11D2 FF FF FF FF 
0433   11D6 FF FF FF FF 
0433   11DA FF FF FF FF 
0433   11DE FF FF FF FF 
0433   11E2 FF FF FF FF 
0433   11E6 FF FF FF FF 
0433   11EA FF FF FF FF 
0433   11EE FF FF FF FF 
0433   11F2 FF FF FF FF 
0433   11F6 FF FF FF FF 
0433   11FA FF FF FF FF 
0433   11FE FF FF FF FF 
0433   1202 FF FF FF FF 
0433   1206 FF FF FF FF 
0433   120A FF FF FF FF 
0433   120E FF FF FF FF 
0433   1212 FF FF FF FF 
0433   1216 FF FF FF FF 
0433   121A FF FF FF FF 
0433   121E FF FF FF FF 
0433   1222 FF FF FF FF 
0433   1226 FF FF FF FF 
0433   122A FF FF FF FF 
0433   122E FF FF FF FF 
0433   1232 FF FF FF FF 
0433   1236 FF FF FF FF 
0433   123A FF FF FF FF 
0433   123E FF FF FF FF 
0433   1242 FF FF FF FF 
0433   1246 FF FF FF FF 
0433   124A FF FF FF FF 
0433   124E FF FF FF FF 
0433   1252 FF FF FF FF 
0433   1256 FF FF FF FF 
0433   125A FF FF FF FF 
0433   125E FF FF FF FF 
0433   1262 FF FF FF FF 
0433   1266 FF FF FF FF 
0433   126A FF FF FF FF 
0433   126E FF FF FF FF 
0433   1272 FF FF FF FF 
0433   1276 FF FF FF FF 
0433   127A FF FF FF FF 
0433   127E FF FF FF FF 
0433   1282 FF FF FF FF 
0433   1286 FF FF FF FF 
0433   128A FF FF FF FF 
0433   128E FF FF FF FF 
0433   1292 FF FF FF FF 
0433   1296 FF FF FF FF 
0433   129A FF FF FF FF 
0433   129E FF FF FF FF 
0433   12A2 FF FF FF FF 
0433   12A6 FF FF FF FF 
0433   12AA FF FF FF FF 
0433   12AE FF FF FF FF 
0433   12B2 FF FF FF FF 
0433   12B6 FF FF FF FF 
0433   12BA FF FF FF FF 
0433   12BE FF FF FF FF 
0433   12C2 FF FF FF FF 
0433   12C6 FF FF FF FF 
0433   12CA FF FF FF FF 
0433   12CE FF FF FF FF 
0433   12D2 FF FF FF FF 
0433   12D6 FF FF FF FF 
0433   12DA FF FF FF FF 
0433   12DE FF FF FF FF 
0433   12E2 FF FF FF FF 
0433   12E6 FF FF FF FF 
0433   12EA FF FF FF FF 
0433   12EE FF FF FF FF 
0433   12F2 FF FF FF FF 
0433   12F6 FF FF FF FF 
0433   12FA FF FF FF FF 
0433   12FE FF FF FF FF 
0433   1302 FF FF FF FF 
0433   1306 FF FF FF FF 
0433   130A FF FF FF FF 
0433   130E FF FF FF FF 
0433   1312 FF FF FF FF 
0433   1316 FF FF FF FF 
0433   131A FF FF FF FF 
0433   131E FF FF FF FF 
0433   1322 FF FF FF FF 
0433   1326 FF FF FF FF 
0433   132A FF FF FF FF 
0433   132E FF FF FF FF 
0433   1332 FF FF FF FF 
0433   1336 FF FF FF FF 
0433   133A FF FF FF FF 
0433   133E FF FF FF FF 
0433   1342 FF FF FF FF 
0433   1346 FF FF FF FF 
0433   134A FF FF FF FF 
0433   134E FF FF FF FF 
0433   1352 FF FF FF FF 
0433   1356 FF FF FF FF 
0433   135A FF FF FF FF 
0433   135E FF FF FF FF 
0433   1362 FF FF FF FF 
0433   1366 FF FF FF FF 
0433   136A FF FF FF FF 
0433   136E FF FF FF FF 
0433   1372 FF FF FF FF 
0433   1376 FF FF FF FF 
0433   137A FF FF FF FF 
0433   137E FF FF FF FF 
0433   1382 FF FF FF FF 
0433   1386 FF FF FF FF 
0433   138A FF FF FF FF 
0433   138E FF FF FF FF 
0433   1392 FF FF FF FF 
0433   1396 FF FF FF FF 
0433   139A FF FF FF FF 
0433   139E FF FF FF FF 
0433   13A2 FF FF FF FF 
0433   13A6 FF FF FF FF 
0433   13AA FF FF FF FF 
0433   13AE FF FF FF FF 
0433   13B2 FF FF FF FF 
0433   13B6 FF FF FF FF 
0433   13BA FF FF FF FF 
0433   13BE FF FF FF FF 
0433   13C2 FF FF FF FF 
0433   13C6 FF FF FF FF 
0433   13CA FF FF FF FF 
0433   13CE FF FF FF FF 
0433   13D2 FF FF FF FF 
0433   13D6 FF FF FF FF 
0433   13DA FF FF FF FF 
0433   13DE FF FF FF FF 
0433   13E2 FF FF FF FF 
0433   13E6 FF FF FF FF 
0433   13EA FF FF FF FF 
0433   13EE FF FF FF FF 
0433   13F2 FF FF FF FF 
0433   13F6 FF FF FF FF 
0433   13FA FF FF FF FF 
0433   13FE FF FF FF FF 
0433   1402 FF FF FF FF 
0433   1406 FF FF FF FF 
0433   140A FF FF FF FF 
0433   140E FF FF FF FF 
0433   1412 FF FF FF FF 
0433   1416 FF FF FF FF 
0433   141A FF FF FF FF 
0433   141E FF FF FF FF 
0433   1422 FF FF FF FF 
0433   1426 FF FF FF FF 
0433   142A FF FF FF FF 
0433   142E FF FF FF FF 
0433   1432 FF FF FF FF 
0433   1436 FF FF FF FF 
0433   143A FF FF FF FF 
0433   143E FF FF FF FF 
0433   1442 FF FF FF FF 
0433   1446 FF FF FF FF 
0433   144A FF FF FF FF 
0433   144E FF FF FF FF 
0433   1452 FF FF FF FF 
0433   1456 FF FF FF FF 
0433   145A FF FF FF FF 
0433   145E FF FF FF FF 
0433   1462 FF FF FF FF 
0433   1466 FF FF FF FF 
0433   146A FF FF FF FF 
0433   146E FF FF FF FF 
0433   1472 FF FF FF FF 
0433   1476 FF FF FF FF 
0433   147A FF FF FF FF 
0433   147E FF FF FF FF 
0433   1482 FF FF FF FF 
0433   1486 FF FF FF FF 
0433   148A FF FF FF FF 
0433   148E FF FF FF FF 
0433   1492 FF FF FF FF 
0433   1496 FF FF FF FF 
0433   149A FF FF FF FF 
0433   149E FF FF FF FF 
0433   14A2 FF FF FF FF 
0433   14A6 FF FF FF FF 
0433   14AA FF FF FF FF 
0433   14AE FF FF FF FF 
0433   14B2 FF FF FF FF 
0433   14B6 FF FF FF FF 
0433   14BA FF FF FF FF 
0433   14BE FF FF FF FF 
0433   14C2 FF FF FF FF 
0433   14C6 FF FF FF FF 
0433   14CA FF FF FF FF 
0433   14CE FF FF FF FF 
0433   14D2 FF FF FF FF 
0433   14D6 FF FF FF FF 
0433   14DA FF FF FF FF 
0433   14DE FF FF FF FF 
0433   14E2 FF FF FF FF 
0433   14E6 FF FF FF FF 
0433   14EA FF FF FF FF 
0433   14EE FF FF FF FF 
0433   14F2 FF FF FF FF 
0433   14F6 FF FF FF FF 
0433   14FA FF FF FF FF 
0433   14FE FF FF FF FF 
0433   1502 FF FF FF FF 
0433   1506 FF FF FF FF 
0433   150A FF FF FF FF 
0433   150E FF FF FF FF 
0433   1512 FF FF FF FF 
0433   1516 FF FF FF FF 
0433   151A FF FF FF FF 
0433   151E FF FF FF FF 
0433   1522 FF FF FF FF 
0433   1526 FF FF FF FF 
0433   152A FF FF FF FF 
0433   152E FF FF FF FF 
0433   1532 FF FF FF FF 
0433   1536 FF FF FF FF 
0433   153A FF FF FF FF 
0433   153E FF FF FF FF 
0433   1542 FF FF FF FF 
0433   1546 FF FF FF FF 
0433   154A FF FF FF FF 
0433   154E FF FF FF FF 
0433   1552 FF FF FF FF 
0433   1556 FF FF FF FF 
0433   155A FF FF FF FF 
0433   155E FF FF FF FF 
0433   1562 FF FF FF FF 
0433   1566 FF FF FF FF 
0433   156A FF FF FF FF 
0433   156E FF FF FF FF 
0433   1572 FF FF FF FF 
0433   1576 FF FF FF FF 
0433   157A FF FF FF FF 
0433   157E FF FF FF FF 
0433   1582 FF FF FF FF 
0433   1586 FF FF FF FF 
0433   158A FF FF FF FF 
0433   158E FF FF FF FF 
0433   1592 FF FF FF FF 
0433   1596 FF FF FF FF 
0433   159A FF FF FF FF 
0433   159E FF FF FF FF 
0433   15A2 FF FF FF FF 
0433   15A6 FF FF FF FF 
0433   15AA FF FF FF FF 
0433   15AE FF FF FF FF 
0433   15B2 FF FF FF FF 
0433   15B6 FF FF FF FF 
0433   15BA FF FF FF FF 
0433   15BE FF FF FF FF 
0433   15C2 FF FF FF FF 
0433   15C6 FF FF FF FF 
0433   15CA FF FF FF FF 
0433   15CE FF FF FF FF 
0433   15D2 FF FF FF FF 
0433   15D6 FF FF FF FF 
0433   15DA FF FF FF FF 
0433   15DE FF FF FF FF 
0433   15E2 FF FF FF FF 
0433   15E6 FF FF FF FF 
0433   15EA FF FF FF FF 
0433   15EE FF FF FF FF 
0433   15F2 FF FF FF FF 
0433   15F6 FF FF FF FF 
0433   15FA FF FF FF FF 
0433   15FE FF FF FF FF 
0433   1602 FF FF FF FF 
0433   1606 FF FF FF FF 
0433   160A FF FF FF FF 
0433   160E FF FF FF FF 
0433   1612 FF FF FF FF 
0433   1616 FF FF FF FF 
0433   161A FF FF FF FF 
0433   161E FF FF FF FF 
0433   1622 FF FF FF FF 
0433   1626 FF FF FF FF 
0433   162A FF FF FF FF 
0433   162E FF FF FF FF 
0433   1632 FF FF FF FF 
0433   1636 FF FF FF FF 
0433   163A FF FF FF FF 
0433   163E FF FF FF FF 
0433   1642 FF FF FF FF 
0433   1646 FF FF FF FF 
0433   164A FF FF FF FF 
0433   164E FF FF FF FF 
0433   1652 FF FF FF FF 
0433   1656 FF FF FF FF 
0433   165A FF FF FF FF 
0433   165E FF FF FF FF 
0433   1662 FF FF FF FF 
0433   1666 FF FF FF FF 
0433   166A FF FF FF FF 
0433   166E FF FF FF FF 
0433   1672 FF FF FF FF 
0433   1676 FF FF FF FF 
0433   167A FF FF FF FF 
0433   167E FF FF FF FF 
0433   1682 FF FF FF FF 
0433   1686 FF FF FF FF 
0433   168A FF FF FF FF 
0433   168E FF FF FF FF 
0433   1692 FF FF FF FF 
0433   1696 FF FF FF FF 
0433   169A FF FF FF FF 
0433   169E FF FF FF FF 
0433   16A2 FF FF FF FF 
0433   16A6 FF FF FF FF 
0433   16AA FF FF FF FF 
0433   16AE FF FF FF FF 
0433   16B2 FF FF FF FF 
0433   16B6 FF FF FF FF 
0433   16BA FF FF FF FF 
0433   16BE FF FF FF FF 
0433   16C2 FF FF FF FF 
0433   16C6 FF FF FF FF 
0433   16CA FF FF FF FF 
0433   16CE FF FF FF FF 
0433   16D2 FF FF FF FF 
0433   16D6 FF FF FF FF 
0433   16DA FF FF FF FF 
0433   16DE FF FF FF FF 
0433   16E2 FF FF FF FF 
0433   16E6 FF FF FF FF 
0433   16EA FF FF FF FF 
0433   16EE FF FF FF FF 
0433   16F2 FF FF FF FF 
0433   16F6 FF FF FF FF 
0433   16FA FF FF FF FF 
0433   16FE FF FF FF FF 
0433   1702 FF FF FF FF 
0433   1706 FF FF FF FF 
0433   170A FF FF FF FF 
0433   170E FF FF FF FF 
0433   1712 FF FF FF FF 
0433   1716 FF FF FF FF 
0433   171A FF FF FF FF 
0433   171E FF FF FF FF 
0433   1722 FF FF FF FF 
0433   1726 FF FF FF FF 
0433   172A FF FF FF FF 
0433   172E FF FF FF FF 
0433   1732 FF FF FF FF 
0433   1736 FF FF FF FF 
0433   173A FF FF FF FF 
0433   173E FF FF FF FF 
0433   1742 FF FF FF FF 
0433   1746 FF FF FF FF 
0433   174A FF FF FF FF 
0433   174E FF FF FF FF 
0433   1752 FF FF FF FF 
0433   1756 FF FF FF FF 
0433   175A FF FF FF FF 
0433   175E FF FF FF FF 
0433   1762 FF FF FF FF 
0433   1766 FF FF FF FF 
0433   176A FF FF FF FF 
0433   176E FF FF FF FF 
0433   1772 FF FF FF FF 
0433   1776 FF FF FF FF 
0433   177A FF FF FF FF 
0433   177E FF FF FF FF 
0433   1782 FF FF FF FF 
0433   1786 FF FF FF FF 
0433   178A FF FF FF FF 
0433   178E FF FF FF FF 
0433   1792 FF FF FF FF 
0433   1796 FF FF FF FF 
0433   179A FF FF FF FF 
0433   179E FF FF FF FF 
0433   17A2 FF FF FF FF 
0433   17A6 FF FF FF FF 
0433   17AA FF FF FF FF 
0433   17AE FF FF FF FF 
0433   17B2 FF FF FF FF 
0433   17B6 FF FF FF FF 
0433   17BA FF FF FF FF 
0433   17BE FF FF FF FF 
0433   17C2 FF FF FF FF 
0433   17C6 FF FF FF FF 
0433   17CA FF FF FF FF 
0433   17CE FF FF FF FF 
0433   17D2 FF FF FF FF 
0433   17D6 FF FF FF FF 
0433   17DA FF FF FF FF 
0433   17DE FF FF FF FF 
0433   17E2 FF FF FF FF 
0433   17E6 FF FF FF FF 
0433   17EA FF FF FF FF 
0433   17EE FF FF FF FF 
0433   17F2 FF FF FF FF 
0433   17F6 FF FF FF FF 
0433   17FA FF FF FF FF 
0433   17FE FF FF FF FF 
0433   1802 FF FF FF FF 
0433   1806 FF FF FF FF 
0433   180A FF FF FF FF 
0433   180E FF FF FF FF 
0433   1812 FF FF FF FF 
0433   1816 FF FF FF FF 
0433   181A FF FF FF FF 
0433   181E FF FF FF FF 
0433   1822 FF FF FF FF 
0433   1826 FF FF FF FF 
0433   182A FF FF FF FF 
0433   182E FF FF FF FF 
0433   1832 FF FF FF FF 
0433   1836 FF FF FF FF 
0433   183A FF FF FF FF 
0433   183E FF FF FF FF 
0433   1842 FF FF FF FF 
0433   1846 FF FF FF FF 
0433   184A FF FF FF FF 
0433   184E FF FF FF FF 
0433   1852 FF FF FF FF 
0433   1856 FF FF FF FF 
0433   185A FF FF FF FF 
0433   185E FF FF FF FF 
0433   1862 FF FF FF FF 
0433   1866 FF FF FF FF 
0433   186A FF FF FF FF 
0433   186E FF FF FF FF 
0433   1872 FF FF FF FF 
0433   1876 FF FF FF FF 
0433   187A FF FF FF FF 
0433   187E FF FF FF FF 
0433   1882 FF FF FF FF 
0433   1886 FF FF FF FF 
0433   188A FF FF FF FF 
0433   188E FF FF FF FF 
0433   1892 FF FF FF FF 
0433   1896 FF FF FF FF 
0433   189A FF FF FF FF 
0433   189E FF FF FF FF 
0433   18A2 FF FF FF FF 
0433   18A6 FF FF FF FF 
0433   18AA FF FF FF FF 
0433   18AE FF FF FF FF 
0433   18B2 FF FF FF FF 
0433   18B6 FF FF FF FF 
0433   18BA FF FF FF FF 
0433   18BE FF FF FF FF 
0433   18C2 FF FF FF FF 
0433   18C6 FF FF FF FF 
0433   18CA FF FF FF FF 
0433   18CE FF FF FF FF 
0433   18D2 FF FF FF FF 
0433   18D6 FF FF FF FF 
0433   18DA FF FF FF FF 
0433   18DE FF FF FF FF 
0433   18E2 FF FF FF FF 
0433   18E6 FF FF FF FF 
0433   18EA FF FF FF FF 
0433   18EE FF FF FF FF 
0433   18F2 FF FF FF FF 
0433   18F6 FF FF FF FF 
0433   18FA FF FF FF FF 
0433   18FE FF FF FF FF 
0433   1902 FF FF FF FF 
0433   1906 FF FF FF FF 
0433   190A FF FF FF FF 
0433   190E FF FF FF FF 
0433   1912 FF FF FF FF 
0433   1916 FF FF FF FF 
0433   191A FF FF FF FF 
0433   191E FF FF FF FF 
0433   1922 FF FF FF FF 
0433   1926 FF FF FF FF 
0433   192A FF FF FF FF 
0433   192E FF FF FF FF 
0433   1932 FF FF FF FF 
0433   1936 FF FF FF FF 
0433   193A FF FF FF FF 
0433   193E FF FF FF FF 
0433   1942 FF FF FF FF 
0433   1946 FF FF FF FF 
0433   194A FF FF FF FF 
0433   194E FF FF FF FF 
0433   1952 FF FF FF FF 
0433   1956 FF FF FF FF 
0433   195A FF FF FF FF 
0433   195E FF FF FF FF 
0433   1962 FF FF FF FF 
0433   1966 FF FF FF FF 
0433   196A FF FF FF FF 
0433   196E FF FF FF FF 
0433   1972 FF FF FF FF 
0433   1976 FF FF FF FF 
0433   197A FF FF FF FF 
0433   197E FF FF FF FF 
0433   1982 FF FF FF FF 
0433   1986 FF FF FF FF 
0433   198A FF FF FF FF 
0433   198E FF FF FF FF 
0433   1992 FF FF FF FF 
0433   1996 FF FF FF FF 
0433   199A FF FF FF FF 
0433   199E FF FF FF FF 
0433   19A2 FF FF FF FF 
0433   19A6 FF FF FF FF 
0433   19AA FF FF FF FF 
0433   19AE FF FF FF FF 
0433   19B2 FF FF FF FF 
0433   19B6 FF FF FF FF 
0433   19BA FF FF FF FF 
0433   19BE FF FF FF FF 
0433   19C2 FF FF FF FF 
0433   19C6 FF FF FF FF 
0433   19CA FF FF FF FF 
0433   19CE FF FF FF FF 
0433   19D2 FF FF FF FF 
0433   19D6 FF FF FF FF 
0433   19DA FF FF FF FF 
0433   19DE FF FF FF FF 
0433   19E2 FF FF FF FF 
0433   19E6 FF FF FF FF 
0433   19EA FF FF FF FF 
0433   19EE FF FF FF FF 
0433   19F2 FF FF FF FF 
0433   19F6 FF FF FF FF 
0433   19FA FF FF FF FF 
0433   19FE FF FF FF FF 
0433   1A02 FF FF FF FF 
0433   1A06 FF FF FF FF 
0433   1A0A FF FF FF FF 
0433   1A0E FF FF FF FF 
0433   1A12 FF FF FF FF 
0433   1A16 FF FF FF FF 
0433   1A1A FF FF FF FF 
0433   1A1E FF FF FF FF 
0433   1A22 FF FF FF FF 
0433   1A26 FF FF FF FF 
0433   1A2A FF FF FF FF 
0433   1A2E FF FF FF FF 
0433   1A32 FF FF FF FF 
0433   1A36 FF FF FF FF 
0433   1A3A FF FF FF FF 
0433   1A3E FF FF FF FF 
0433   1A42 FF FF FF FF 
0433   1A46 FF FF FF FF 
0433   1A4A FF FF FF FF 
0433   1A4E FF FF FF FF 
0433   1A52 FF FF FF FF 
0433   1A56 FF FF FF FF 
0433   1A5A FF FF FF FF 
0433   1A5E FF FF FF FF 
0433   1A62 FF FF FF FF 
0433   1A66 FF FF FF FF 
0433   1A6A FF FF FF FF 
0433   1A6E FF FF FF FF 
0433   1A72 FF FF FF FF 
0433   1A76 FF FF FF FF 
0433   1A7A FF FF FF FF 
0433   1A7E FF FF FF FF 
0433   1A82 FF FF FF FF 
0433   1A86 FF FF FF FF 
0433   1A8A FF FF FF FF 
0433   1A8E FF FF FF FF 
0433   1A92 FF FF FF FF 
0433   1A96 FF FF FF FF 
0433   1A9A FF FF FF FF 
0433   1A9E FF FF FF FF 
0433   1AA2 FF FF FF FF 
0433   1AA6 FF FF FF FF 
0433   1AAA FF FF FF FF 
0433   1AAE FF FF FF FF 
0433   1AB2 FF FF FF FF 
0433   1AB6 FF FF FF FF 
0433   1ABA FF FF FF FF 
0433   1ABE FF FF FF FF 
0433   1AC2 FF FF FF FF 
0433   1AC6 FF FF FF FF 
0433   1ACA FF FF FF FF 
0433   1ACE FF FF FF FF 
0433   1AD2 FF FF FF FF 
0433   1AD6 FF FF FF FF 
0433   1ADA FF FF FF FF 
0433   1ADE FF FF FF FF 
0433   1AE2 FF FF FF FF 
0433   1AE6 FF FF FF FF 
0433   1AEA FF FF FF FF 
0433   1AEE FF FF FF FF 
0433   1AF2 FF FF FF FF 
0433   1AF6 FF FF FF FF 
0433   1AFA FF FF FF FF 
0433   1AFE FF FF FF FF 
0433   1B02 FF FF FF FF 
0433   1B06 FF FF FF FF 
0433   1B0A FF FF FF FF 
0433   1B0E FF FF FF FF 
0433   1B12 FF FF FF FF 
0433   1B16 FF FF FF FF 
0433   1B1A FF FF FF FF 
0433   1B1E FF FF FF FF 
0433   1B22 FF FF FF FF 
0433   1B26 FF FF FF FF 
0433   1B2A FF FF FF FF 
0433   1B2E FF FF FF FF 
0433   1B32 FF FF FF FF 
0433   1B36 FF FF FF FF 
0433   1B3A FF FF FF FF 
0433   1B3E FF FF FF FF 
0433   1B42 FF FF FF FF 
0433   1B46 FF FF FF FF 
0433   1B4A FF FF FF FF 
0433   1B4E FF FF FF FF 
0433   1B52 FF FF FF FF 
0433   1B56 FF FF FF FF 
0433   1B5A FF FF FF FF 
0433   1B5E FF FF FF FF 
0433   1B62 FF FF FF FF 
0433   1B66 FF FF FF FF 
0433   1B6A FF FF FF FF 
0433   1B6E FF FF FF FF 
0433   1B72 FF FF FF FF 
0433   1B76 FF FF FF FF 
0433   1B7A FF FF FF FF 
0433   1B7E FF FF FF FF 
0433   1B82 FF FF FF FF 
0433   1B86 FF FF FF FF 
0433   1B8A FF FF FF FF 
0433   1B8E FF FF FF FF 
0433   1B92 FF FF FF FF 
0433   1B96 FF FF FF FF 
0433   1B9A FF FF FF FF 
0433   1B9E FF FF FF FF 
0433   1BA2 FF FF FF FF 
0433   1BA6 FF FF FF FF 
0433   1BAA FF FF FF FF 
0433   1BAE FF FF FF FF 
0433   1BB2 FF FF FF FF 
0433   1BB6 FF FF FF FF 
0433   1BBA FF FF FF FF 
0433   1BBE FF FF FF FF 
0433   1BC2 FF FF FF FF 
0433   1BC6 FF FF FF FF 
0433   1BCA FF FF FF FF 
0433   1BCE FF FF FF FF 
0433   1BD2 FF FF FF FF 
0433   1BD6 FF FF FF FF 
0433   1BDA FF FF FF FF 
0433   1BDE FF FF FF FF 
0433   1BE2 FF FF FF FF 
0433   1BE6 FF FF FF FF 
0433   1BEA FF FF FF FF 
0433   1BEE FF FF FF FF 
0433   1BF2 FF FF FF FF 
0433   1BF6 FF FF FF FF 
0433   1BFA FF FF FF FF 
0433   1BFE FF FF FF FF 
0433   1C02 FF FF FF FF 
0433   1C06 FF FF FF FF 
0433   1C0A FF FF FF FF 
0433   1C0E FF FF FF FF 
0433   1C12 FF FF FF FF 
0433   1C16 FF FF FF FF 
0433   1C1A FF FF FF FF 
0433   1C1E FF FF FF FF 
0433   1C22 FF FF FF FF 
0433   1C26 FF FF FF FF 
0433   1C2A FF FF FF FF 
0433   1C2E FF FF FF FF 
0433   1C32 FF FF FF FF 
0433   1C36 FF FF FF FF 
0433   1C3A FF FF FF FF 
0433   1C3E FF FF FF FF 
0433   1C42 FF FF FF FF 
0433   1C46 FF FF FF FF 
0433   1C4A FF FF FF FF 
0433   1C4E FF FF FF FF 
0433   1C52 FF FF FF FF 
0433   1C56 FF FF FF FF 
0433   1C5A FF FF FF FF 
0433   1C5E FF FF FF FF 
0433   1C62 FF FF FF FF 
0433   1C66 FF FF FF FF 
0433   1C6A FF FF FF FF 
0433   1C6E FF FF FF FF 
0433   1C72 FF FF FF FF 
0433   1C76 FF FF FF FF 
0433   1C7A FF FF FF FF 
0433   1C7E FF FF FF FF 
0433   1C82 FF FF FF FF 
0433   1C86 FF FF FF FF 
0433   1C8A FF FF FF FF 
0433   1C8E FF FF FF FF 
0433   1C92 FF FF FF FF 
0433   1C96 FF FF FF FF 
0433   1C9A FF FF FF FF 
0433   1C9E FF FF FF FF 
0433   1CA2 FF FF FF FF 
0433   1CA6 FF FF FF FF 
0433   1CAA FF FF FF FF 
0433   1CAE FF FF FF FF 
0433   1CB2 FF FF FF FF 
0433   1CB6 FF FF FF FF 
0433   1CBA FF FF FF FF 
0433   1CBE FF FF FF FF 
0433   1CC2 FF FF FF FF 
0433   1CC6 FF FF FF FF 
0433   1CCA FF FF FF FF 
0433   1CCE FF FF FF FF 
0433   1CD2 FF FF FF FF 
0433   1CD6 FF FF FF FF 
0433   1CDA FF FF FF FF 
0433   1CDE FF FF FF FF 
0433   1CE2 FF FF FF FF 
0433   1CE6 FF FF FF FF 
0433   1CEA FF FF FF FF 
0433   1CEE FF FF FF FF 
0433   1CF2 FF FF FF FF 
0433   1CF6 FF FF FF FF 
0433   1CFA FF FF FF FF 
0433   1CFE FF FF FF FF 
0433   1D02 FF FF FF FF 
0433   1D06 FF FF FF FF 
0433   1D0A FF FF FF FF 
0433   1D0E FF FF FF FF 
0433   1D12 FF FF FF FF 
0433   1D16 FF FF FF FF 
0433   1D1A FF FF FF FF 
0433   1D1E FF FF FF FF 
0433   1D22 FF FF FF FF 
0433   1D26 FF FF FF FF 
0433   1D2A FF FF FF FF 
0433   1D2E FF FF FF FF 
0433   1D32 FF FF FF FF 
0433   1D36 FF FF FF FF 
0433   1D3A FF FF FF FF 
0433   1D3E FF FF FF FF 
0433   1D42 FF FF FF FF 
0433   1D46 FF FF FF FF 
0433   1D4A FF FF FF FF 
0433   1D4E FF FF FF FF 
0433   1D52 FF FF FF FF 
0433   1D56 FF FF FF FF 
0433   1D5A FF FF FF FF 
0433   1D5E FF FF FF FF 
0433   1D62 FF FF FF FF 
0433   1D66 FF FF FF FF 
0433   1D6A FF FF FF FF 
0433   1D6E FF FF FF FF 
0433   1D72 FF FF FF FF 
0433   1D76 FF FF FF FF 
0433   1D7A FF FF FF FF 
0433   1D7E FF FF FF FF 
0433   1D82 FF FF FF FF 
0433   1D86 FF FF FF FF 
0433   1D8A FF FF FF FF 
0433   1D8E FF FF FF FF 
0433   1D92 FF FF FF FF 
0433   1D96 FF FF FF FF 
0433   1D9A FF FF FF FF 
0433   1D9E FF FF FF FF 
0433   1DA2 FF FF FF FF 
0433   1DA6 FF FF FF FF 
0433   1DAA FF FF FF FF 
0433   1DAE FF FF FF FF 
0433   1DB2 FF FF FF FF 
0433   1DB6 FF FF FF FF 
0433   1DBA FF FF FF FF 
0433   1DBE FF FF FF FF 
0433   1DC2 FF FF FF FF 
0433   1DC6 FF FF FF FF 
0433   1DCA FF FF FF FF 
0433   1DCE FF FF FF FF 
0433   1DD2 FF FF FF FF 
0433   1DD6 FF FF FF FF 
0433   1DDA FF FF FF FF 
0433   1DDE FF FF FF FF 
0433   1DE2 FF FF FF FF 
0433   1DE6 FF FF FF FF 
0433   1DEA FF FF FF FF 
0433   1DEE FF FF FF FF 
0433   1DF2 FF FF FF FF 
0433   1DF6 FF FF FF FF 
0433   1DFA FF FF FF FF 
0433   1DFE FF FF FF FF 
0433   1E02 FF FF FF FF 
0433   1E06 FF FF FF FF 
0433   1E0A FF FF FF FF 
0433   1E0E FF FF FF FF 
0433   1E12 FF FF FF FF 
0433   1E16 FF FF FF FF 
0433   1E1A FF FF FF FF 
0433   1E1E FF FF FF FF 
0433   1E22 FF FF FF FF 
0433   1E26 FF FF FF FF 
0433   1E2A FF FF FF FF 
0433   1E2E FF FF FF FF 
0433   1E32 FF FF FF FF 
0433   1E36 FF FF FF FF 
0433   1E3A FF FF FF FF 
0433   1E3E FF FF FF FF 
0433   1E42 FF FF FF FF 
0433   1E46 FF FF FF FF 
0433   1E4A FF FF FF FF 
0433   1E4E FF FF FF FF 
0433   1E52 FF FF FF FF 
0433   1E56 FF FF FF FF 
0433   1E5A FF FF FF FF 
0433   1E5E FF FF FF FF 
0433   1E62 FF FF FF FF 
0433   1E66 FF FF FF FF 
0433   1E6A FF FF FF FF 
0433   1E6E FF FF FF FF 
0433   1E72 FF FF FF FF 
0433   1E76 FF FF FF FF 
0433   1E7A FF FF FF FF 
0433   1E7E FF FF FF FF 
0433   1E82 FF FF FF FF 
0433   1E86 FF FF FF FF 
0433   1E8A FF FF FF FF 
0433   1E8E FF FF FF FF 
0433   1E92 FF FF FF FF 
0433   1E96 FF FF FF FF 
0433   1E9A FF FF FF FF 
0433   1E9E FF FF FF FF 
0433   1EA2 FF FF FF FF 
0433   1EA6 FF FF FF FF 
0433   1EAA FF FF FF FF 
0433   1EAE FF FF FF FF 
0433   1EB2 FF FF FF FF 
0433   1EB6 FF FF FF FF 
0433   1EBA FF FF FF FF 
0433   1EBE FF FF FF FF 
0433   1EC2 FF FF FF FF 
0433   1EC6 FF FF FF FF 
0433   1ECA FF FF FF FF 
0433   1ECE FF FF FF FF 
0433   1ED2 FF FF FF FF 
0433   1ED6 FF FF FF FF 
0433   1EDA FF FF FF FF 
0433   1EDE FF FF FF FF 
0433   1EE2 FF FF FF FF 
0433   1EE6 FF FF FF FF 
0433   1EEA FF FF FF FF 
0433   1EEE FF FF FF FF 
0433   1EF2 FF FF FF FF 
0433   1EF6 FF FF FF FF 
0433   1EFA FF FF FF FF 
0433   1EFE FF FF FF FF 
0433   1F02 FF FF FF FF 
0433   1F06 FF FF FF FF 
0433   1F0A FF FF FF FF 
0433   1F0E FF FF FF FF 
0433   1F12 FF FF FF FF 
0433   1F16 FF FF FF FF 
0433   1F1A FF FF FF FF 
0433   1F1E FF FF FF FF 
0433   1F22 FF FF FF FF 
0433   1F26 FF FF FF FF 
0433   1F2A FF FF FF FF 
0433   1F2E FF FF FF FF 
0433   1F32 FF FF FF FF 
0433   1F36 FF FF FF FF 
0433   1F3A FF FF FF FF 
0433   1F3E FF FF FF FF 
0433   1F42 FF FF FF FF 
0433   1F46 FF FF FF FF 
0433   1F4A FF FF FF FF 
0433   1F4E FF FF FF FF 
0433   1F52 FF FF FF FF 
0433   1F56 FF FF FF FF 
0433   1F5A FF FF FF FF 
0433   1F5E FF FF FF FF 
0433   1F62 FF FF FF FF 
0433   1F66 FF FF FF FF 
0433   1F6A FF FF FF FF 
0433   1F6E FF FF FF FF 
0433   1F72 FF FF FF FF 
0433   1F76 FF FF FF FF 
0433   1F7A FF FF FF FF 
0433   1F7E FF FF FF FF 
0433   1F82 FF FF FF FF 
0433   1F86 FF FF FF FF 
0433   1F8A FF FF FF FF 
0433   1F8E FF FF FF FF 
0433   1F92 FF FF FF FF 
0433   1F96 FF FF FF FF 
0433   1F9A FF FF FF FF 
0433   1F9E FF FF FF FF 
0433   1FA2 FF FF FF FF 
0433   1FA6 FF FF FF FF 
0433   1FAA FF FF FF FF 
0433   1FAE FF FF FF FF 
0433   1FB2 FF FF FF FF 
0433   1FB6 FF FF FF FF 
0433   1FBA FF FF FF FF 
0433   1FBE FF FF FF FF 
0433   1FC2 FF FF FF FF 
0433   1FC6 FF FF FF FF 
0433   1FCA FF FF FF FF 
0433   1FCE FF FF FF FF 
0433   1FD2 FF FF FF FF 
0433   1FD6 FF FF FF FF 
0433   1FDA FF FF FF FF 
0433   1FDE FF FF FF FF 
0433   1FE2 FF FF FF FF 
0433   1FE6 FF FF FF FF 
0434   1FEA FF FF FF FF transient_data:	.fill 512
0434   1FEE FF FF FF FF 
0434   1FF2 FF FF FF FF 
0434   1FF6 FF FF FF FF 
0434   1FFA FF FF FF FF 
0434   1FFE FF FF FF FF 
0434   2002 FF FF FF FF 
0434   2006 FF FF FF FF 
0434   200A FF FF FF FF 
0434   200E FF FF FF FF 
0434   2012 FF FF FF FF 
0434   2016 FF FF FF FF 
0434   201A FF FF FF FF 
0434   201E FF FF FF FF 
0434   2022 FF FF FF FF 
0434   2026 FF FF FF FF 
0434   202A FF FF FF FF 
0434   202E FF FF FF FF 
0434   2032 FF FF FF FF 
0434   2036 FF FF FF FF 
0434   203A FF FF FF FF 
0434   203E FF FF FF FF 
0434   2042 FF FF FF FF 
0434   2046 FF FF FF FF 
0434   204A FF FF FF FF 
0434   204E FF FF FF FF 
0434   2052 FF FF FF FF 
0434   2056 FF FF FF FF 
0434   205A FF FF FF FF 
0434   205E FF FF FF FF 
0434   2062 FF FF FF FF 
0434   2066 FF FF FF FF 
0434   206A FF FF FF FF 
0434   206E FF FF FF FF 
0434   2072 FF FF FF FF 
0434   2076 FF FF FF FF 
0434   207A FF FF FF FF 
0434   207E FF FF FF FF 
0434   2082 FF FF FF FF 
0434   2086 FF FF FF FF 
0434   208A FF FF FF FF 
0434   208E FF FF FF FF 
0434   2092 FF FF FF FF 
0434   2096 FF FF FF FF 
0434   209A FF FF FF FF 
0434   209E FF FF FF FF 
0434   20A2 FF FF FF FF 
0434   20A6 FF FF FF FF 
0434   20AA FF FF FF FF 
0434   20AE FF FF FF FF 
0434   20B2 FF FF FF FF 
0434   20B6 FF FF FF FF 
0434   20BA FF FF FF FF 
0434   20BE FF FF FF FF 
0434   20C2 FF FF FF FF 
0434   20C6 FF FF FF FF 
0434   20CA FF FF FF FF 
0434   20CE FF FF FF FF 
0434   20D2 FF FF FF FF 
0434   20D6 FF FF FF FF 
0434   20DA FF FF FF FF 
0434   20DE FF FF FF FF 
0434   20E2 FF FF FF FF 
0434   20E6 FF FF FF FF 
0434   20EA FF FF FF FF 
0434   20EE FF FF FF FF 
0434   20F2 FF FF FF FF 
0434   20F6 FF FF FF FF 
0434   20FA FF FF FF FF 
0434   20FE FF FF FF FF 
0434   2102 FF FF FF FF 
0434   2106 FF FF FF FF 
0434   210A FF FF FF FF 
0434   210E FF FF FF FF 
0434   2112 FF FF FF FF 
0434   2116 FF FF FF FF 
0434   211A FF FF FF FF 
0434   211E FF FF FF FF 
0434   2122 FF FF FF FF 
0434   2126 FF FF FF FF 
0434   212A FF FF FF FF 
0434   212E FF FF FF FF 
0434   2132 FF FF FF FF 
0434   2136 FF FF FF FF 
0434   213A FF FF FF FF 
0434   213E FF FF FF FF 
0434   2142 FF FF FF FF 
0434   2146 FF FF FF FF 
0434   214A FF FF FF FF 
0434   214E FF FF FF FF 
0434   2152 FF FF FF FF 
0434   2156 FF FF FF FF 
0434   215A FF FF FF FF 
0434   215E FF FF FF FF 
0434   2162 FF FF FF FF 
0434   2166 FF FF FF FF 
0434   216A FF FF FF FF 
0434   216E FF FF FF FF 
0434   2172 FF FF FF FF 
0434   2176 FF FF FF FF 
0434   217A FF FF FF FF 
0434   217E FF FF FF FF 
0434   2182 FF FF FF FF 
0434   2186 FF FF FF FF 
0434   218A FF FF FF FF 
0434   218E FF FF FF FF 
0434   2192 FF FF FF FF 
0434   2196 FF FF FF FF 
0434   219A FF FF FF FF 
0434   219E FF FF FF FF 
0434   21A2 FF FF FF FF 
0434   21A6 FF FF FF FF 
0434   21AA FF FF FF FF 
0434   21AE FF FF FF FF 
0434   21B2 FF FF FF FF 
0434   21B6 FF FF FF FF 
0434   21BA FF FF FF FF 
0434   21BE FF FF FF FF 
0434   21C2 FF FF FF FF 
0434   21C6 FF FF FF FF 
0434   21CA FF FF FF FF 
0434   21CE FF FF FF FF 
0434   21D2 FF FF FF FF 
0434   21D6 FF FF FF FF 
0434   21DA FF FF FF FF 
0434   21DE FF FF FF FF 
0434   21E2 FF FF FF FF 
0434   21E6 FF FF FF FF 
0435   21EA 00          text_buffer:	.db 0			
0436   21EB             
0437   21EB             .end
0438   21EB             
tasm: Number of errors = 0
