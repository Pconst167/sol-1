0001   0000             .include "lib/kernel.exp"
0001+  0000             fdc_irq_event    .EQU  $195a
0002+  0000             sys_break        .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_create_proc  .EQU  $0005
0008+  0000             sys_list_proc    .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_fdc          .EQU  $000d
0016+  0000             text_org         .EQU  $0400
0002   0000             
0003   0000             STACK_BEGIN:	.equ $F7FF	; beginning of stack
0004   0000             
0005   0400             .org text_org			; origin at 1024
0006   0400             
0007   0400             shell_main:	
0008   0400 FD 49 FF F7 	mov bp, STACK_BEGIN
0009   0404 FD 47 FF F7 	mov sp, STACK_BEGIN
0010   0408             
0011   0408 3B 19 04    	mov d, s_prompt_init
0012   040B 07 5F 06    	call _puts
0013   040E             
0014   040E 3B 27 04    	mov d, s_prompt_shell
0015   0411 07 5F 06    	call _puts
0016   0414 3B 3B 04    	mov d, s_shell_path
0017   0417 05 05       	syscall sys_create_proc
0018   0419             
0019   0419 69 6E 69 74 s_prompt_init:	.db "init started\n", 0
0019   041D 20 73 74 61 
0019   0421 72 74 65 64 
0019   0425 0A 00 
0020   0427 6C 61 75 6E s_prompt_shell:	.db "launching shell...\n", 0
0020   042B 63 68 69 6E 
0020   042F 67 20 73 68 
0020   0433 65 6C 6C 2E 
0020   0437 2E 2E 0A 00 
0021   043B 2F 75 73 72 s_shell_path:	  .db "/usr/bin0/shell", 0
0021   043F 2F 62 69 6E 
0021   0443 30 2F 73 68 
0021   0447 65 6C 6C 00 
0022   044B             
0023   044B             .include "lib/stdio.asm"
0001+  044B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  044B             ; stdio.s
0003+  044B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  044B             .include "lib/string.asm"
0001++ 044B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 044B             ; string.s
0003++ 044B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 044B             
0005++ 044B             
0006++ 044B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 044B             ; _strrev
0008++ 044B             ; reverse a string
0009++ 044B             ; D = string address
0010++ 044B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 044B             ; 01234
0012++ 044B             _strrev:
0013++ 044B 4B          	pusha
0014++ 044C 07 92 04    	call _strlen	; length in C
0015++ 044F 12          	mov a, c
0016++ 0450 AF 01 00    	cmp a, 1
0017++ 0453 D0 6D 04    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 0456 7D          	dec a
0019++ 0457 FD 4E       	mov si, d	; beginning of string
0020++ 0459 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 045B 59          	add d, a	; end of string
0022++ 045C 12          	mov a, c
0023++ 045D FD 9B       	shr a		; divide by 2
0024++ 045F 39          	mov c, a	; C now counts the steps
0025++ 0460             _strrev_L0:
0026++ 0460 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0461 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0462 3E          	mov [d], al	; store left char into right side
0029++ 0463 1B          	mov al, bl
0030++ 0464 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0465 7E          	dec c
0032++ 0466 7F          	dec d
0033++ 0467 C2 00 00    	cmp c, 0
0034++ 046A C7 60 04    	jne _strrev_L0
0035++ 046D             _strrev_end:
0036++ 046D 4C          	popa
0037++ 046E 09          	ret
0038++ 046F             	
0039++ 046F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 046F             ; _strchr
0041++ 046F             ; search string in D for char in AL
0042++ 046F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 046F             _strchr:
0044++ 046F             _strchr_L0:
0045++ 046F 32          	mov bl, [d]
0046++ 0470 C1 00       	cmp bl, 0
0047++ 0472 C6 7D 04    	je _strchr_end
0048++ 0475 BA          	cmp al, bl
0049++ 0476 C6 7D 04    	je _strchr_end
0050++ 0479 79          	inc d
0051++ 047A 0A 6F 04    	jmp _strchr_L0
0052++ 047D             _strchr_end:
0053++ 047D 1B          	mov al, bl
0054++ 047E 09          	ret
0055++ 047F             
0056++ 047F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 047F             ; _strstr
0058++ 047F             ; find sub-string
0059++ 047F             ; str1 in SI
0060++ 047F             ; str2 in DI
0061++ 047F             ; SI points to end of source string
0062++ 047F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 047F             _strstr:
0064++ 047F DB          	push al
0065++ 0480 DA          	push d
0066++ 0481 E3          	push di
0067++ 0482             _strstr_loop:
0068++ 0482 F3          	cmpsb					; compare a byte of the strings
0069++ 0483 C7 8E 04    	jne _strstr_ret
0070++ 0486 FC 00 00    	lea d, [di + 0]
0071++ 0489 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 048B C7 82 04    	jne _strstr_loop				; equal chars but not at end
0073++ 048E             _strstr_ret:
0074++ 048E F0          	pop di
0075++ 048F E7          	pop d
0076++ 0490 E8          	pop al
0077++ 0491 09          	ret
0078++ 0492             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0492             ; length of null terminated string
0080++ 0492             ; result in C
0081++ 0492             ; pointer in D
0082++ 0492             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0492             _strlen:
0084++ 0492 DA          	push d
0085++ 0493 38 00 00    	mov c, 0
0086++ 0496             _strlen_L1:
0087++ 0496 BD 00       	cmp byte [d], 0
0088++ 0498 C6 A0 04    	je _strlen_ret
0089++ 049B 79          	inc d
0090++ 049C 78          	inc c
0091++ 049D 0A 96 04    	jmp _strlen_L1
0092++ 04A0             _strlen_ret:
0093++ 04A0 E7          	pop d
0094++ 04A1 09          	ret
0095++ 04A2             
0096++ 04A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 04A2             ; STRCMP
0098++ 04A2             ; compare two strings
0099++ 04A2             ; str1 in SI
0100++ 04A2             ; str2 in DI
0101++ 04A2             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 04A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 04A2             _strcmp:
0104++ 04A2 DB          	push al
0105++ 04A3 DA          	push d
0106++ 04A4 E3          	push di
0107++ 04A5 E2          	push si
0108++ 04A6             _strcmp_loop:
0109++ 04A6 F3          	cmpsb					; compare a byte of the strings
0110++ 04A7 C7 B2 04    	jne _strcmp_ret
0111++ 04AA FB FF FF    	lea d, [si +- 1]
0112++ 04AD BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 04AF C7 A6 04    	jne _strcmp_loop				; equal chars but not at end
0114++ 04B2             _strcmp_ret:
0115++ 04B2 EF          	pop si
0116++ 04B3 F0          	pop di
0117++ 04B4 E7          	pop d
0118++ 04B5 E8          	pop al
0119++ 04B6 09          	ret
0120++ 04B7             
0121++ 04B7             
0122++ 04B7             ; STRCPY
0123++ 04B7             ; copy null terminated string from SI to DI
0124++ 04B7             ; source in SI
0125++ 04B7             ; destination in DI
0126++ 04B7             _strcpy:
0127++ 04B7 E2          	push si
0128++ 04B8 E3          	push di
0129++ 04B9 DB          	push al
0130++ 04BA             _strcpy_L1:
0131++ 04BA F6          	lodsb
0132++ 04BB F7          	stosb
0133++ 04BC B9 00       	cmp al, 0
0134++ 04BE C7 BA 04    	jne _strcpy_L1
0135++ 04C1             _strcpy_end:
0136++ 04C1 E8          	pop al
0137++ 04C2 F0          	pop di
0138++ 04C3 EF          	pop si
0139++ 04C4 09          	ret
0140++ 04C5             
0141++ 04C5             ; STRCAT
0142++ 04C5             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04C5             ; source in SI
0144++ 04C5             ; destination in DI
0145++ 04C5             _strcat:
0146++ 04C5 E2          	push si
0147++ 04C6 E3          	push di
0148++ 04C7 D7          	push a
0149++ 04C8 DA          	push d
0150++ 04C9 50          	mov a, di
0151++ 04CA 3C          	mov d, a
0152++ 04CB             _strcat_goto_end_L1:
0153++ 04CB BD 00       	cmp byte[d], 0
0154++ 04CD C6 D4 04    	je _strcat_start
0155++ 04D0 79          	inc d
0156++ 04D1 0A CB 04    	jmp _strcat_goto_end_L1
0157++ 04D4             _strcat_start:
0158++ 04D4 FD 50       	mov di, d
0159++ 04D6             _strcat_L1:
0160++ 04D6 F6          	lodsb
0161++ 04D7 F7          	stosb
0162++ 04D8 B9 00       	cmp al, 0
0163++ 04DA C7 D6 04    	jne _strcat_L1
0164++ 04DD             _strcat_end:
0165++ 04DD E7          	pop d
0166++ 04DE E4          	pop a
0167++ 04DF F0          	pop di
0168++ 04E0 EF          	pop si
0169++ 04E1 09          	ret
0170++ 04E2             
0171++ 04E2             
0005+  04E2             
0006+  04E2             
0007+  04E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  04E2             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  04E2             ; ASCII in BL
0010+  04E2             ; result in AL
0011+  04E2             ; ascii for F = 0100 0110
0012+  04E2             ; ascii for 9 = 0011 1001
0013+  04E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  04E2             hex_ascii_encode:
0015+  04E2 1B            mov al, bl
0016+  04E3 93 40         test al, $40        ; test if letter or number
0017+  04E5 C7 EB 04      jnz hex_letter
0018+  04E8 87 0F         and al, $0F        ; get number
0019+  04EA 09            ret
0020+  04EB             hex_letter:
0021+  04EB 87 0F         and al, $0F        ; get letter
0022+  04ED 6A 09         add al, 9
0023+  04EF 09            ret
0024+  04F0             
0025+  04F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  04F0             ; ATOI
0027+  04F0             ; 2 letter hex string in B
0028+  04F0             ; 8bit integer returned in AL
0029+  04F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  04F0             _atoi:
0031+  04F0 D8            push b
0032+  04F1 07 E2 04      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  04F4 30            mov bl, bh
0034+  04F5 DB            push al          ; save a
0035+  04F6 07 E2 04      call hex_ascii_encode
0036+  04F9 EA            pop bl  
0037+  04FA FD 9E 04      shl al, 4
0038+  04FD 8C            or al, bl
0039+  04FE E5            pop b
0040+  04FF 09            ret  
0041+  0500             
0042+  0500             
0043+  0500             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  0500             ; scanf
0045+  0500             ; no need for explanations!
0046+  0500             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  0500             scanf:
0048+  0500 09            ret
0049+  0501             
0050+  0501             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0501             ; ITOA
0052+  0501             ; 8bit value in BL
0053+  0501             ; 2 byte ASCII result in A
0054+  0501             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0501             _itoa:
0056+  0501 DA            push d
0057+  0502 D8            push b
0058+  0503 A7 00         mov bh, 0
0059+  0505 FD A4 04      shr bl, 4  
0060+  0508 74            mov d, b
0061+  0509 1F 9B 07      mov al, [d + s_hex_digits]
0062+  050C 23            mov ah, al
0063+  050D               
0064+  050D E5            pop b
0065+  050E D8            push b
0066+  050F A7 00         mov bh, 0
0067+  0511 FD 87 0F      and bl, $0F
0068+  0514 74            mov d, b
0069+  0515 1F 9B 07      mov al, [d + s_hex_digits]
0070+  0518 E5            pop b
0071+  0519 E7            pop d
0072+  051A 09            ret
0073+  051B             
0074+  051B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  051B             ; HEX STRING TO BINARY
0076+  051B             ; di = destination address
0077+  051B             ; si = source
0078+  051B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  051B             _hex_to_int:
0080+  051B             _hex_to_int_L1:
0081+  051B F6            lodsb          ; load from [SI] to AL
0082+  051C B9 00         cmp al, 0        ; check if ASCII 0
0083+  051E C6 2B 05      jz _hex_to_int_ret
0084+  0521 36            mov bh, al
0085+  0522 F6            lodsb
0086+  0523 2F            mov bl, al
0087+  0524 07 F0 04      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  0527 F7            stosb          ; store AL to [DI]
0089+  0528 0A 1B 05      jmp _hex_to_int_L1
0090+  052B             _hex_to_int_ret:
0091+  052B 09            ret    
0092+  052C             
0093+  052C             
0094+  052C             
0095+  052C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  052C             ; GETCHAR
0097+  052C             ; char in ah
0098+  052C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  052C             getch:
0100+  052C DB            push al
0101+  052D             getch_retry:
0102+  052D 19 01         mov al, 1
0103+  052F 05 03         syscall sys_io      ; receive in AH
0104+  0531 E8            pop al
0105+  0532 09            ret
0106+  0533             
0107+  0533             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  0533             ; PUTCHAR
0109+  0533             ; char in ah
0110+  0533             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0533             _putchar:
0112+  0533 DB            push al
0113+  0534 19 00         mov al, 0
0114+  0536 05 03         syscall sys_io      ; char in AH
0115+  0538 E8            pop al
0116+  0539 09            ret
0117+  053A             
0118+  053A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  053A             ;; INPUT A STRING
0120+  053A             ;; terminates with null
0121+  053A             ;; pointer in D
0122+  053A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  053A             _gets:
0124+  053A D7            push a
0125+  053B DA            push d
0126+  053C             _gets_loop:
0127+  053C 19 01         mov al, 1
0128+  053E 05 03         syscall sys_io      ; receive in AH
0129+  0540 76 1B         cmp ah, 27
0130+  0542 C6 63 05      je _gets_ansi_esc
0131+  0545 76 0A         cmp ah, $0A        ; LF
0132+  0547 C6 BF 05      je _gets_end
0133+  054A 76 0D         cmp ah, $0D        ; CR
0134+  054C C6 BF 05      je _gets_end
0135+  054F 76 5C         cmp ah, $5C        ; '\\'
0136+  0551 C6 85 05      je _gets_escape
0137+  0554 76 08         cmp ah, $08      ; check for backspace
0138+  0556 C6 5F 05      je _gets_backspace
0139+  0559 1A            mov al, ah
0140+  055A 3E            mov [d], al
0141+  055B 79            inc d
0142+  055C 0A 3C 05      jmp _gets_loop
0143+  055F             _gets_backspace:
0144+  055F 7F            dec d
0145+  0560 0A 3C 05      jmp _gets_loop
0146+  0563             _gets_ansi_esc:
0147+  0563 19 01         mov al, 1
0148+  0565 05 03         syscall sys_io        ; receive in AH without echo
0149+  0567 76 5B         cmp ah, '['
0150+  0569 C7 3C 05      jne _gets_loop
0151+  056C 19 01         mov al, 1
0152+  056E 05 03         syscall sys_io          ; receive in AH without echo
0153+  0570 76 44         cmp ah, 'D'
0154+  0572 C6 7D 05      je _gets_left_arrow
0155+  0575 76 43         cmp ah, 'C'
0156+  0577 C6 81 05      je _gets_right_arrow
0157+  057A 0A 3C 05      jmp _gets_loop
0158+  057D             _gets_left_arrow:
0159+  057D 7F            dec d
0160+  057E 0A 3C 05      jmp _gets_loop
0161+  0581             _gets_right_arrow:
0162+  0581 79            inc d
0163+  0582 0A 3C 05      jmp _gets_loop
0164+  0585             _gets_escape:
0165+  0585 19 01         mov al, 1
0166+  0587 05 03         syscall sys_io      ; receive in AH
0167+  0589 76 6E         cmp ah, 'n'
0168+  058B C6 AA 05      je _gets_LF
0169+  058E 76 72         cmp ah, 'r'
0170+  0590 C6 B1 05      je _gets_CR
0171+  0593 76 30         cmp ah, '0'
0172+  0595 C6 B8 05      je _gets_NULL
0173+  0598 76 5C         cmp ah, $5C  ; '\'
0174+  059A C6 A3 05      je _gets_slash
0175+  059D 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  059E 3E            mov [d], al
0177+  059F 79            inc d
0178+  05A0 0A 3C 05      jmp _gets_loop
0179+  05A3             _gets_slash:
0180+  05A3 19 5C         mov al, $5C
0181+  05A5 3E            mov [d], al
0182+  05A6 79            inc d
0183+  05A7 0A 3C 05      jmp _gets_loop
0184+  05AA             _gets_LF:
0185+  05AA 19 0A         mov al, $0A
0186+  05AC 3E            mov [d], al
0187+  05AD 79            inc d
0188+  05AE 0A 3C 05      jmp _gets_loop
0189+  05B1             _gets_CR:
0190+  05B1 19 0D         mov al, $0D
0191+  05B3 3E            mov [d], al
0192+  05B4 79            inc d
0193+  05B5 0A 3C 05      jmp _gets_loop
0194+  05B8             _gets_NULL:
0195+  05B8 19 00         mov al, $00
0196+  05BA 3E            mov [d], al
0197+  05BB 79            inc d
0198+  05BC 0A 3C 05      jmp _gets_loop
0199+  05BF             _gets_end:
0200+  05BF 19 00         mov al, 0
0201+  05C1 3E            mov [d], al        ; terminate string
0202+  05C2 E7            pop d
0203+  05C3 E4            pop a
0204+  05C4 09            ret
0205+  05C5             
0206+  05C5             
0207+  05C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  05C5             ;; INPUT TEXT
0209+  05C5             ;; terminated with CTRL+D
0210+  05C5             ;; pointer in D
0211+  05C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  05C5             _gettxt:
0213+  05C5 D7            push a
0214+  05C6 DA            push d
0215+  05C7             _gettxt_loop:
0216+  05C7 19 01         mov al, 1
0217+  05C9 05 03         syscall sys_io      ; receive in AH
0218+  05CB 76 04         cmp ah, 4      ; EOT
0219+  05CD C6 06 06      je _gettxt_end
0220+  05D0 76 08         cmp ah, $08      ; check for backspace
0221+  05D2 C6 02 06      je _gettxt_backspace
0222+  05D5 76 5C         cmp ah, $5C        ; '\'
0223+  05D7 C6 E0 05      je _gettxt_escape
0224+  05DA 1A            mov al, ah
0225+  05DB 3E            mov [d], al
0226+  05DC 79            inc d
0227+  05DD 0A C7 05      jmp _gettxt_loop
0228+  05E0             _gettxt_escape:
0229+  05E0 19 01         mov al, 1
0230+  05E2 05 03         syscall sys_io      ; receive in AH
0231+  05E4 76 6E         cmp ah, 'n'
0232+  05E6 C6 F4 05      je _gettxt_LF
0233+  05E9 76 72         cmp ah, 'r'
0234+  05EB C6 FB 05      je _gettxt_CR
0235+  05EE 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  05EF 3E            mov [d], al
0237+  05F0 79            inc d
0238+  05F1 0A C7 05      jmp _gettxt_loop
0239+  05F4             _gettxt_LF:
0240+  05F4 19 0A         mov al, $0A
0241+  05F6 3E            mov [d], al
0242+  05F7 79            inc d
0243+  05F8 0A C7 05      jmp _gettxt_loop
0244+  05FB             _gettxt_CR:
0245+  05FB 19 0D         mov al, $0D
0246+  05FD 3E            mov [d], al
0247+  05FE 79            inc d
0248+  05FF 0A C7 05      jmp _gettxt_loop
0249+  0602             _gettxt_backspace:
0250+  0602 7F            dec d
0251+  0603 0A C7 05      jmp _gettxt_loop
0252+  0606             _gettxt_end:
0253+  0606 19 00         mov al, 0
0254+  0608 3E            mov [d], al        ; terminate string
0255+  0609 E7            pop d
0256+  060A E4            pop a
0257+  060B 09            ret
0258+  060C             
0259+  060C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  060C             ; PRINT NEW LINE
0261+  060C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  060C             printnl:
0263+  060C D7            push a
0264+  060D 10 00 0A      mov a, $0A00
0265+  0610 05 03         syscall sys_io
0266+  0612 10 00 0D      mov a, $0D00
0267+  0615 05 03         syscall sys_io
0268+  0617 E4            pop a
0269+  0618 09            ret
0270+  0619             
0271+  0619             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  0619             ; _strtoint
0273+  0619             ; 4 digit hex string number in d
0274+  0619             ; integer returned in A
0275+  0619             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  0619             _strtointx:
0277+  0619 D8            push b
0278+  061A 32            mov bl, [d]
0279+  061B 37            mov bh, bl
0280+  061C 33 01 00      mov bl, [d + 1]
0281+  061F 07 F0 04      call _atoi        ; convert to int in AL
0282+  0622 23            mov ah, al        ; move to AH
0283+  0623 33 02 00      mov bl, [d + 2]
0284+  0626 37            mov bh, bl
0285+  0627 33 03 00      mov bl, [d + 3]
0286+  062A 07 F0 04      call _atoi        ; convert to int in AL
0287+  062D E5            pop b
0288+  062E 09            ret
0289+  062F             
0290+  062F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  062F             ; _strtoint
0292+  062F             ; 5 digit base10 string number in d
0293+  062F             ; integer returned in A
0294+  062F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  062F             _strtoint:
0296+  062F E2            push si
0297+  0630 D8            push b
0298+  0631 D9            push c
0299+  0632 DA            push d
0300+  0633 07 92 04      call _strlen      ; get string length in C
0301+  0636 7E            dec c
0302+  0637 FD 4E         mov si, d
0303+  0639 12            mov a, c
0304+  063A FD 99         shl a
0305+  063C 3B B3 07      mov d, table_power
0306+  063F 59            add d, a
0307+  0640 38 00 00      mov c, 0
0308+  0643             _strtoint_L0:
0309+  0643 F6            lodsb      ; load ASCII to al
0310+  0644 B9 00         cmp al, 0
0311+  0646 C6 59 06      je _strtoint_end
0312+  0649 6F 30         sub al, $30    ; make into integer
0313+  064B 22 00         mov ah, 0
0314+  064D 2A            mov b, [d]
0315+  064E AC            mul a, b      ; result in B since it fits in 16bits
0316+  064F 11            mov a, b
0317+  0650 28            mov b, c
0318+  0651 54            add a, b
0319+  0652 39            mov c, a
0320+  0653 63 02 00      sub d, 2
0321+  0656 0A 43 06      jmp _strtoint_L0
0322+  0659             _strtoint_end:
0323+  0659 12            mov a, c
0324+  065A E7            pop d
0325+  065B E6            pop c
0326+  065C E5            pop b
0327+  065D EF            pop si
0328+  065E 09            ret
0329+  065F             
0330+  065F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  065F             ; PRINT NULL TERMINATED STRING
0332+  065F             ; pointer in D
0333+  065F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  065F             _puts:
0335+  065F D7            push a
0336+  0660 DA            push d
0337+  0661             _puts_L1:
0338+  0661 1E            mov al, [d]
0339+  0662 B9 00         cmp al, 0
0340+  0664 C6 70 06      jz _puts_END
0341+  0667 23            mov ah, al
0342+  0668 19 00         mov al, 0
0343+  066A 05 03         syscall sys_io
0344+  066C 79            inc d
0345+  066D 0A 61 06      jmp _puts_L1
0346+  0670             _puts_END:
0347+  0670 E7            pop d
0348+  0671 E4            pop a
0349+  0672 09            ret
0350+  0673             
0351+  0673             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  0673             ; PRINT N SIZE STRING
0353+  0673             ; pointer in D
0354+  0673             ; size in C
0355+  0673             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  0673             _putsn:
0357+  0673 DB            push al
0358+  0674 DA            push d
0359+  0675 D9            push c
0360+  0676             _putsn_L0:
0361+  0676 1E            mov al, [d]
0362+  0677 23            mov ah, al
0363+  0678 19 00         mov al, 0
0364+  067A 05 03         syscall sys_io
0365+  067C 79            inc d
0366+  067D 7E            dec c  
0367+  067E C2 00 00      cmp c, 0
0368+  0681 C7 76 06      jne _putsn_L0
0369+  0684             _putsn_end:
0370+  0684 E6            pop c
0371+  0685 E7            pop d
0372+  0686 E8            pop al
0373+  0687 09            ret
0374+  0688             
0375+  0688             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  0688             ; print 16bit decimal number
0377+  0688             ; input number in A
0378+  0688             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0688             print_u16d:
0380+  0688 D7            push a
0381+  0689 D8            push b
0382+  068A FD D8         push g
0383+  068C 26 10 27      mov b, 10000
0384+  068F AE            div a, b      ; get 10000's coeff.
0385+  0690 07 B4 06      call print_number
0386+  0693 11            mov a, b
0387+  0694 26 E8 03      mov b, 1000
0388+  0697 AE            div a, b      ; get 1000's coeff.
0389+  0698 07 B4 06      call print_number
0390+  069B 11            mov a, b
0391+  069C 26 64 00      mov b, 100
0392+  069F AE            div a, b
0393+  06A0 07 B4 06      call print_number
0394+  06A3 11            mov a, b
0395+  06A4 26 0A 00      mov b, 10
0396+  06A7 AE            div a, b
0397+  06A8 07 B4 06      call print_number
0398+  06AB 1B            mov al, bl      ; 1's coeff in bl
0399+  06AC 07 B4 06      call print_number
0400+  06AF FD F1         pop g
0401+  06B1 E5            pop b
0402+  06B2 E4            pop a
0403+  06B3 09            ret
0404+  06B4             
0405+  06B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  06B4             ; print AL
0407+  06B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  06B4             print_number:
0409+  06B4 6A 30         add al, $30
0410+  06B6 23            mov ah, al
0411+  06B7 07 33 05      call _putchar
0412+  06BA 09            ret
0413+  06BB             
0414+  06BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  06BB             ; PRINT 16BIT HEX INTEGER
0416+  06BB             ; integer value in reg B
0417+  06BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  06BB             print_u16x:
0419+  06BB D7            push a
0420+  06BC D8            push b
0421+  06BD DD            push bl
0422+  06BE 30            mov bl, bh
0423+  06BF 07 01 05      call _itoa        ; convert bh to char in A
0424+  06C2 2F            mov bl, al        ; save al
0425+  06C3 19 00         mov al, 0
0426+  06C5 05 03         syscall sys_io        ; display AH
0427+  06C7 24            mov ah, bl        ; retrieve al
0428+  06C8 19 00         mov al, 0
0429+  06CA 05 03         syscall sys_io        ; display AL
0430+  06CC             
0431+  06CC EA            pop bl
0432+  06CD 07 01 05      call _itoa        ; convert bh to char in A
0433+  06D0 2F            mov bl, al        ; save al
0434+  06D1 19 00         mov al, 0
0435+  06D3 05 03         syscall sys_io        ; display AH
0436+  06D5 24            mov ah, bl        ; retrieve al
0437+  06D6 19 00         mov al, 0
0438+  06D8 05 03         syscall sys_io        ; display AL
0439+  06DA             
0440+  06DA E5            pop b
0441+  06DB E4            pop a
0442+  06DC 09            ret
0443+  06DD             
0444+  06DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  06DD             ; INPUT 16BIT HEX INTEGER
0446+  06DD             ; read 16bit integer into A
0447+  06DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  06DD             scan_u16x:
0449+  06DD F8 10 00      enter 16
0450+  06E0 D8            push b
0451+  06E1 DA            push d
0452+  06E2             
0453+  06E2 FA F1 FF      lea d, [bp + -15]
0454+  06E5 07 3A 05      call _gets        ; get number
0455+  06E8             
0456+  06E8 32            mov bl, [d]
0457+  06E9 37            mov bh, bl
0458+  06EA 33 01 00      mov bl, [d + 1]
0459+  06ED 07 F0 04      call _atoi        ; convert to int in AL
0460+  06F0 23            mov ah, al        ; move to AH
0461+  06F1             
0462+  06F1 33 02 00      mov bl, [d + 2]
0463+  06F4 37            mov bh, bl
0464+  06F5 33 03 00      mov bl, [d + 3]
0465+  06F8 07 F0 04      call _atoi        ; convert to int in AL
0466+  06FB             
0467+  06FB E7            pop d
0468+  06FC E5            pop b
0469+  06FD F9            leave
0470+  06FE 09            ret
0471+  06FF             
0472+  06FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  06FF             ; PRINT 8bit HEX INTEGER
0474+  06FF             ; integer value in reg bl
0475+  06FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  06FF             print_u8x:
0477+  06FF D7            push a
0478+  0700 DD            push bl
0479+  0701             
0480+  0701 07 01 05      call _itoa        ; convert bl to char in A
0481+  0704 2F            mov bl, al        ; save al
0482+  0705 19 00         mov al, 0
0483+  0707 05 03         syscall sys_io        ; display AH
0484+  0709 24            mov ah, bl        ; retrieve al
0485+  070A 19 00         mov al, 0
0486+  070C 05 03         syscall sys_io        ; display AL
0487+  070E             
0488+  070E EA            pop bl
0489+  070F E4            pop a
0490+  0710 09            ret
0491+  0711             
0492+  0711             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  0711             ; print 8bit decimal unsigned number
0494+  0711             ; input number in AL
0495+  0711             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  0711             print_u8d:
0497+  0711 D7            push a
0498+  0712 D8            push b
0499+  0713 FD D8         push g
0500+  0715 22 00         mov ah, 0
0501+  0717 26 64 00      mov b, 100
0502+  071A AE            div a, b
0503+  071B D8            push b      ; save remainder
0504+  071C B9 00         cmp al, 0
0505+  071E C6 28 07      je skip100
0506+  0721 6A 30         add al, $30
0507+  0723 23            mov ah, al
0508+  0724 19 00         mov al, 0
0509+  0726 05 03         syscall sys_io  ; print coeff
0510+  0728             skip100:
0511+  0728 E4            pop a
0512+  0729 22 00         mov ah, 0
0513+  072B 26 0A 00      mov b, 10
0514+  072E AE            div a, b
0515+  072F D8            push b      ; save remainder
0516+  0730 B9 00         cmp al, 0
0517+  0732 C6 3C 07      je skip10
0518+  0735 6A 30         add al, $30
0519+  0737 23            mov ah, al
0520+  0738 19 00         mov al, 0
0521+  073A 05 03         syscall sys_io  ; print coeff
0522+  073C             skip10:
0523+  073C E4            pop a
0524+  073D 1B            mov al, bl
0525+  073E 6A 30         add al, $30
0526+  0740 23            mov ah, al
0527+  0741 19 00         mov al, 0
0528+  0743 05 03         syscall sys_io  ; print coeff
0529+  0745 FD F1         pop g
0530+  0747 E5            pop b
0531+  0748 E4            pop a
0532+  0749 09            ret
0533+  074A             
0534+  074A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  074A             ; INPUT 8BIT HEX INTEGER
0536+  074A             ; read 8bit integer into AL
0537+  074A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  074A             scan_u8x:
0539+  074A F8 04 00      enter 4
0540+  074D D8            push b
0541+  074E DA            push d
0542+  074F             
0543+  074F FA FD FF      lea d, [bp + -3]
0544+  0752 07 3A 05      call _gets        ; get number
0545+  0755             
0546+  0755 32            mov bl, [d]
0547+  0756 37            mov bh, bl
0548+  0757 33 01 00      mov bl, [d + 1]
0549+  075A 07 F0 04      call _atoi        ; convert to int in AL
0550+  075D             
0551+  075D E7            pop d
0552+  075E E5            pop b
0553+  075F F9            leave
0554+  0760 09            ret
0555+  0761             
0556+  0761             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  0761             ; input decimal number
0558+  0761             ; result in A
0559+  0761             ; 655'\0'
0560+  0761             ; low--------high
0561+  0761             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  0761             scan_u16d:
0563+  0761 F8 08 00      enter 8
0564+  0764 E2            push si
0565+  0765 D8            push b
0566+  0766 D9            push c
0567+  0767 DA            push d
0568+  0768 FA F9 FF      lea d, [bp +- 7]
0569+  076B 07 3A 05      call _gets
0570+  076E 07 92 04      call _strlen      ; get string length in C
0571+  0771 7E            dec c
0572+  0772 FD 4E         mov si, d
0573+  0774 12            mov a, c
0574+  0775 FD 99         shl a
0575+  0777 3B B3 07      mov d, table_power
0576+  077A 59            add d, a
0577+  077B 38 00 00      mov c, 0
0578+  077E             mul_loop:
0579+  077E F6            lodsb      ; load ASCII to al
0580+  077F B9 00         cmp al, 0
0581+  0781 C6 94 07      je mul_exit
0582+  0784 6F 30         sub al, $30    ; make into integer
0583+  0786 22 00         mov ah, 0
0584+  0788 2A            mov b, [d]
0585+  0789 AC            mul a, b      ; result in B since it fits in 16bits
0586+  078A 11            mov a, b
0587+  078B 28            mov b, c
0588+  078C 54            add a, b
0589+  078D 39            mov c, a
0590+  078E 63 02 00      sub d, 2
0591+  0791 0A 7E 07      jmp mul_loop
0592+  0794             mul_exit:
0593+  0794 12            mov a, c
0594+  0795 E7            pop d
0595+  0796 E6            pop c
0596+  0797 E5            pop b
0597+  0798 EF            pop si
0598+  0799 F9            leave
0599+  079A 09            ret
0600+  079B             
0601+  079B             
0602+  079B 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0602+  079F 34 35 36 37 
0602+  07A3 38 39 41 42 
0602+  07A7 43 44 45 46 
0603+  07AB 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0603+  07AF 1B 5B 48 00 
0604+  07B3             
0605+  07B3             table_power:
0606+  07B3 01 00         .dw 1
0607+  07B5 0A 00         .dw 10
0608+  07B7 64 00         .dw 100
0609+  07B9 E8 03         .dw 1000
0610+  07BB 10 27         .dw 100000024   07BD             
0025   07BD             .end
tasm: Number of errors = 0
