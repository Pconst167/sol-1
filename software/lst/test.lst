0001   0000             .include "lib/kernel.exp"
0001+  0000             sys_break        .EQU  $0000
0002+  0000             sys_rtc          .EQU  $0001
0003+  0000             sys_ide          .EQU  $0002
0004+  0000             sys_io           .EQU  $0003
0005+  0000             sys_filesystem   .EQU  $0004
0006+  0000             sys_create_proc  .EQU  $0005
0007+  0000             sys_list_proc    .EQU  $0006
0008+  0000             sys_datetime     .EQU  $0007
0009+  0000             sys_reboot       .EQU  $0008
0010+  0000             sys_pause_proc   .EQU  $0009
0011+  0000             sys_resume_proc  .EQU  $000a
0012+  0000             sys_terminate_proc .EQU  $000b
0013+  0000             sys_system       .EQU  $000c
0014+  0000             sys_fdc          .EQU  $000d
0015+  0000             sys_fdc_restore  .EQU  $0000
0016+  0000             sys_fdc_step     .EQU  $0001
0017+  0000             sys_fdc_step_in  .EQU  $0002
0018+  0000             sys_fdc_step_out .EQU  $0003
0019+  0000             sys_fdc_seek     .EQU  $0004
0020+  0000             sys_fdc_format   .EQU  $0005
0021+  0000             sys_fdc_read_addr .EQU  $0006
0022+  0000             sys_fdc_read_track .EQU  $0007
0023+  0000             sys_fdc_read_sect .EQU  $0008
0024+  0000             sys_fdc_write_sect .EQU  $0009
0025+  0000             sys_fdc_force_int .EQU  $000a
0026+  0000             sys_fdc_status0  .EQU  $000b
0027+  0000             sys_fdc_status1  .EQU  $000c
0028+  0000             text_org         .EQU  $0400
0002   0400             .org text_org
0003   0400             
0004   0400             ; --- BEGIN TEXT BLOCK
0005   0400             ; FFC0    5.25" Floppy Drive Block
0006   0400             ;   - FFC0  (Last 4 bits: 0000)    Output Port (377 Flip-Flop)                       Note: A3 Address line is 0
0007   0400             ;   - FFC1  (Last 4 bits: 0001)    Input Port  (244 Buffer)                          Note: A3 Address line is 0
0008   0400             ;   - FFC8  (Last 4 bits: 1000)    FDC         (WD1770 Floppy Drive Controller)      Note: A3 Address line is 1
0009   0400             main:
0010   0400 FD 49 FF FF   mov bp, $FFFF
0011   0404 FD 47 FF FF   mov sp, $FFFF
0012   0408             
0013   0408 3B 16 04      mov d, s_irq1
0014   040B 07 3E 06      call _puts
0015   040E 07 DE 06      call print_u8x        ; print irq event
0016   0411 07 EB 05      call printnl
0017   0414             
0018   0414 05 0B         syscall sys_terminate_proc
0019   0416             
0020   0416 0A 76 61 6C s_irq1: .db "\nvalue of fdc irq: ", 0
0020   041A 75 65 20 6F 
0020   041E 66 20 66 64 
0020   0422 63 20 69 72 
0020   0426 71 3A 20 00 
0021   042A             
0022   042A             .include "lib/stdio.asm"
0001+  042A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  042A             ; stdio.s
0003+  042A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  042A             .include "lib/string.asm"
0001++ 042A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 042A             ; string.s
0003++ 042A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 042A             
0005++ 042A             
0006++ 042A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 042A             ; _strrev
0008++ 042A             ; reverse a string
0009++ 042A             ; d = string address
0010++ 042A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 042A             ; 01234
0012++ 042A             _strrev:
0013++ 042A 4B          	pusha
0014++ 042B 07 71 04    	call _strlen	; length in c
0015++ 042E 12          	mov a, c
0016++ 042F AF 01 00    	cmp a, 1
0017++ 0432 D0 4C 04    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 0435 7D          	dec a
0019++ 0436 FD 4E       	mov si, d	; beginning of string
0020++ 0438 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 043A 59          	add d, a	; end of string
0022++ 043B 12          	mov a, c
0023++ 043C FD 9B       	shr a		; divide by 2
0024++ 043E 39          	mov c, a	; c now counts the steps
0025++ 043F             _strrev_l0:
0026++ 043F 32          	mov bl, [d]	; save load right-side char into bl
0027++ 0440 F6          	lodsb		; load left-side char into al; increase si
0028++ 0441 3E          	mov [d], al	; store left char into right side
0029++ 0442 1B          	mov al, bl
0030++ 0443 F7          	stosb		; store right-side char into left-side; increase di
0031++ 0444 7E          	dec c
0032++ 0445 7F          	dec d
0033++ 0446 C2 00 00    	cmp c, 0
0034++ 0449 C7 3F 04    	jne _strrev_l0
0035++ 044C             _strrev_end:
0036++ 044C 4C          	popa
0037++ 044D 09          	ret
0038++ 044E             	
0039++ 044E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 044E             ; _strchr
0041++ 044E             ; search string in d for char in al
0042++ 044E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 044E             _strchr:
0044++ 044E             _strchr_l0:
0045++ 044E 32          	mov bl, [d]
0046++ 044F C1 00       	cmp bl, 0
0047++ 0451 C6 5C 04    	je _strchr_end
0048++ 0454 BA          	cmp al, bl
0049++ 0455 C6 5C 04    	je _strchr_end
0050++ 0458 79          	inc d
0051++ 0459 0A 4E 04    	jmp _strchr_l0
0052++ 045C             _strchr_end:
0053++ 045C 1B          	mov al, bl
0054++ 045D 09          	ret
0055++ 045E             
0056++ 045E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 045E             ; _strstr
0058++ 045E             ; find sub-string
0059++ 045E             ; str1 in si
0060++ 045E             ; str2 in di
0061++ 045E             ; si points to end of source string
0062++ 045E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 045E             _strstr:
0064++ 045E DB          	push al
0065++ 045F DA          	push d
0066++ 0460 E3          	push di
0067++ 0461             _strstr_loop:
0068++ 0461 F3          	cmpsb					; compare a byte of the strings
0069++ 0462 C7 6D 04    	jne _strstr_ret
0070++ 0465 FC 00 00    	lea d, [di + 0]
0071++ 0468 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 046A C7 61 04    	jne _strstr_loop				; equal chars but not at end
0073++ 046D             _strstr_ret:
0074++ 046D F0          	pop di
0075++ 046E E7          	pop d
0076++ 046F E8          	pop al
0077++ 0470 09          	ret
0078++ 0471             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0471             ; length of null terminated string
0080++ 0471             ; result in c
0081++ 0471             ; pointer in d
0082++ 0471             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0471             _strlen:
0084++ 0471 DA          	push d
0085++ 0472 38 00 00    	mov c, 0
0086++ 0475             _strlen_l1:
0087++ 0475 BD 00       	cmp byte [d], 0
0088++ 0477 C6 7F 04    	je _strlen_ret
0089++ 047A 79          	inc d
0090++ 047B 78          	inc c
0091++ 047C 0A 75 04    	jmp _strlen_l1
0092++ 047F             _strlen_ret:
0093++ 047F E7          	pop d
0094++ 0480 09          	ret
0095++ 0481             
0096++ 0481             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0481             ; strcmp
0098++ 0481             ; compare two strings
0099++ 0481             ; str1 in si
0100++ 0481             ; str2 in di
0101++ 0481             ; create a string compairon instrucion ?????
0102++ 0481             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0481             _strcmp:
0104++ 0481 DB          	push al
0105++ 0482 DA          	push d
0106++ 0483 E3          	push di
0107++ 0484 E2          	push si
0108++ 0485             _strcmp_loop:
0109++ 0485 F3          	cmpsb					; compare a byte of the strings
0110++ 0486 C7 91 04    	jne _strcmp_ret
0111++ 0489 FB FF FF    	lea d, [si +- 1]
0112++ 048C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 048E C7 85 04    	jne _strcmp_loop				; equal chars but not at end
0114++ 0491             _strcmp_ret:
0115++ 0491 EF          	pop si
0116++ 0492 F0          	pop di
0117++ 0493 E7          	pop d
0118++ 0494 E8          	pop al
0119++ 0495 09          	ret
0120++ 0496             
0121++ 0496             
0122++ 0496             ; strcpy
0123++ 0496             ; copy null terminated string from si to di
0124++ 0496             ; source in si
0125++ 0496             ; destination in di
0126++ 0496             _strcpy:
0127++ 0496 E2          	push si
0128++ 0497 E3          	push di
0129++ 0498 DB          	push al
0130++ 0499             _strcpy_l1:
0131++ 0499 F6          	lodsb
0132++ 049A F7          	stosb
0133++ 049B B9 00       	cmp al, 0
0134++ 049D C7 99 04    	jne _strcpy_l1
0135++ 04A0             _strcpy_end:
0136++ 04A0 E8          	pop al
0137++ 04A1 F0          	pop di
0138++ 04A2 EF          	pop si
0139++ 04A3 09          	ret
0140++ 04A4             
0141++ 04A4             ; strcat
0142++ 04A4             ; concatenate a null terminated string into string at di, from string at si
0143++ 04A4             ; source in si
0144++ 04A4             ; destination in di
0145++ 04A4             _strcat:
0146++ 04A4 E2          	push si
0147++ 04A5 E3          	push di
0148++ 04A6 D7          	push a
0149++ 04A7 DA          	push d
0150++ 04A8 50          	mov a, di
0151++ 04A9 3C          	mov d, a
0152++ 04AA             _strcat_goto_end_l1:
0153++ 04AA BD 00       	cmp byte[d], 0
0154++ 04AC C6 B3 04    	je _strcat_start
0155++ 04AF 79          	inc d
0156++ 04B0 0A AA 04    	jmp _strcat_goto_end_l1
0157++ 04B3             _strcat_start:
0158++ 04B3 FD 50       	mov di, d
0159++ 04B5             _strcat_l1:
0160++ 04B5 F6          	lodsb
0161++ 04B6 F7          	stosb
0162++ 04B7 B9 00       	cmp al, 0
0163++ 04B9 C7 B5 04    	jne _strcat_l1
0164++ 04BC             _strcat_end:
0165++ 04BC E7          	pop d
0166++ 04BD E4          	pop a
0167++ 04BE F0          	pop di
0168++ 04BF EF          	pop si
0169++ 04C0 09          	ret
0170++ 04C1             
0171++ 04C1             
0005+  04C1             
0006+  04C1             
0007+  04C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  04C1             ; convert ascii 'o'..'f' to integer 0..15
0009+  04C1             ; ascii in bl
0010+  04C1             ; result in al
0011+  04C1             ; ascii for f = 0100 0110
0012+  04C1             ; ascii for 9 = 0011 1001
0013+  04C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  04C1             hex_ascii_encode:
0015+  04C1 1B            mov al, bl
0016+  04C2 93 40         test al, $40        ; test if letter or number
0017+  04C4 C7 CA 04      jnz hex_letter
0018+  04C7 87 0F         and al, $0f        ; get number
0019+  04C9 09            ret
0020+  04CA             hex_letter:
0021+  04CA 87 0F         and al, $0f        ; get letter
0022+  04CC 6A 09         add al, 9
0023+  04CE 09            ret
0024+  04CF             
0025+  04CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  04CF             ; atoi
0027+  04CF             ; 2 letter hex string in b
0028+  04CF             ; 8bit integer returned in al
0029+  04CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  04CF             _atoi:
0031+  04CF D8            push b
0032+  04D0 07 C1 04      call hex_ascii_encode      ; convert bl to 4bit code in al
0033+  04D3 30            mov bl, bh
0034+  04D4 DB            push al          ; save a
0035+  04D5 07 C1 04      call hex_ascii_encode
0036+  04D8 EA            pop bl  
0037+  04D9 FD 9E 04      shl al, 4
0038+  04DC 8C            or al, bl
0039+  04DD E5            pop b
0040+  04DE 09            ret  
0041+  04DF             
0042+  04DF             
0043+  04DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  04DF             ; scanf
0045+  04DF             ; no need for explanations!
0046+  04DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  04DF             scanf:
0048+  04DF 09            ret
0049+  04E0             
0050+  04E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  04E0             ; itoa
0052+  04E0             ; 8bit value in bl
0053+  04E0             ; 2 byte ascii result in a
0054+  04E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  04E0             _itoa:
0056+  04E0 DA            push d
0057+  04E1 D8            push b
0058+  04E2 A7 00         mov bh, 0
0059+  04E4 FD A4 04      shr bl, 4  
0060+  04E7 74            mov d, b
0061+  04E8 1F 7A 07      mov al, [d + s_hex_digits]
0062+  04EB 23            mov ah, al
0063+  04EC               
0064+  04EC E5            pop b
0065+  04ED D8            push b
0066+  04EE A7 00         mov bh, 0
0067+  04F0 FD 87 0F      and bl, $0f
0068+  04F3 74            mov d, b
0069+  04F4 1F 7A 07      mov al, [d + s_hex_digits]
0070+  04F7 E5            pop b
0071+  04F8 E7            pop d
0072+  04F9 09            ret
0073+  04FA             
0074+  04FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  04FA             ; hex string to binary
0076+  04FA             ; di = destination address
0077+  04FA             ; si = source
0078+  04FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  04FA             _hex_to_int:
0080+  04FA             _hex_to_int_l1:
0081+  04FA F6            lodsb          ; load from [si] to al
0082+  04FB B9 00         cmp al, 0        ; check if ascii 0
0083+  04FD C6 0A 05      jz _hex_to_int_ret
0084+  0500 36            mov bh, al
0085+  0501 F6            lodsb
0086+  0502 2F            mov bl, al
0087+  0503 07 CF 04      call _atoi        ; convert ascii byte in b to int (to al)
0088+  0506 F7            stosb          ; store al to [di]
0089+  0507 0A FA 04      jmp _hex_to_int_l1
0090+  050A             _hex_to_int_ret:
0091+  050A 09            ret    
0092+  050B             
0093+  050B             
0094+  050B             
0095+  050B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  050B             ; getchar
0097+  050B             ; char in ah
0098+  050B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  050B             getch:
0100+  050B DB            push al
0101+  050C             getch_retry:
0102+  050C 19 01         mov al, 1
0103+  050E 05 03         syscall sys_io      ; receive in ah
0104+  0510 E8            pop al
0105+  0511 09            ret
0106+  0512             
0107+  0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  0512             ; putchar
0109+  0512             ; char in ah
0110+  0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0512             _putchar:
0112+  0512 DB            push al
0113+  0513 19 00         mov al, 0
0114+  0515 05 03         syscall sys_io      ; char in ah
0115+  0517 E8            pop al
0116+  0518 09            ret
0117+  0519             
0118+  0519             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  0519             ;; input a string
0120+  0519             ;; terminates with null
0121+  0519             ;; pointer in d
0122+  0519             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  0519             _gets:
0124+  0519 D7            push a
0125+  051A DA            push d
0126+  051B             _gets_loop:
0127+  051B 19 01         mov al, 1
0128+  051D 05 03         syscall sys_io      ; receive in ah
0129+  051F 76 1B         cmp ah, 27
0130+  0521 C6 42 05      je _gets_ansi_esc
0131+  0524 76 0A         cmp ah, $0a        ; lf
0132+  0526 C6 9E 05      je _gets_end
0133+  0529 76 0D         cmp ah, $0d        ; cr
0134+  052B C6 9E 05      je _gets_end
0135+  052E 76 5C         cmp ah, $5c        ; '\\'
0136+  0530 C6 64 05      je _gets_escape
0137+  0533 76 08         cmp ah, $08      ; check for backspace
0138+  0535 C6 3E 05      je _gets_backspace
0139+  0538 1A            mov al, ah
0140+  0539 3E            mov [d], al
0141+  053A 79            inc d
0142+  053B 0A 1B 05      jmp _gets_loop
0143+  053E             _gets_backspace:
0144+  053E 7F            dec d
0145+  053F 0A 1B 05      jmp _gets_loop
0146+  0542             _gets_ansi_esc:
0147+  0542 19 01         mov al, 1
0148+  0544 05 03         syscall sys_io        ; receive in ah without echo
0149+  0546 76 5B         cmp ah, '['
0150+  0548 C7 1B 05      jne _gets_loop
0151+  054B 19 01         mov al, 1
0152+  054D 05 03         syscall sys_io          ; receive in ah without echo
0153+  054F 76 64         cmp ah, 'd'
0154+  0551 C6 5C 05      je _gets_left_arrow
0155+  0554 76 63         cmp ah, 'c'
0156+  0556 C6 60 05      je _gets_right_arrow
0157+  0559 0A 1B 05      jmp _gets_loop
0158+  055C             _gets_left_arrow:
0159+  055C 7F            dec d
0160+  055D 0A 1B 05      jmp _gets_loop
0161+  0560             _gets_right_arrow:
0162+  0560 79            inc d
0163+  0561 0A 1B 05      jmp _gets_loop
0164+  0564             _gets_escape:
0165+  0564 19 01         mov al, 1
0166+  0566 05 03         syscall sys_io      ; receive in ah
0167+  0568 76 6E         cmp ah, 'n'
0168+  056A C6 89 05      je _gets_lf
0169+  056D 76 72         cmp ah, 'r'
0170+  056F C6 90 05      je _gets_cr
0171+  0572 76 30         cmp ah, '0'
0172+  0574 C6 97 05      je _gets_null
0173+  0577 76 5C         cmp ah, $5c  ; '\'
0174+  0579 C6 82 05      je _gets_slash
0175+  057C 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  057D 3E            mov [d], al
0177+  057E 79            inc d
0178+  057F 0A 1B 05      jmp _gets_loop
0179+  0582             _gets_slash:
0180+  0582 19 5C         mov al, $5c
0181+  0584 3E            mov [d], al
0182+  0585 79            inc d
0183+  0586 0A 1B 05      jmp _gets_loop
0184+  0589             _gets_lf:
0185+  0589 19 0A         mov al, $0a
0186+  058B 3E            mov [d], al
0187+  058C 79            inc d
0188+  058D 0A 1B 05      jmp _gets_loop
0189+  0590             _gets_cr:
0190+  0590 19 0D         mov al, $0d
0191+  0592 3E            mov [d], al
0192+  0593 79            inc d
0193+  0594 0A 1B 05      jmp _gets_loop
0194+  0597             _gets_null:
0195+  0597 19 00         mov al, $00
0196+  0599 3E            mov [d], al
0197+  059A 79            inc d
0198+  059B 0A 1B 05      jmp _gets_loop
0199+  059E             _gets_end:
0200+  059E 19 00         mov al, 0
0201+  05A0 3E            mov [d], al        ; terminate string
0202+  05A1 E7            pop d
0203+  05A2 E4            pop a
0204+  05A3 09            ret
0205+  05A4             
0206+  05A4             
0207+  05A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  05A4             ;; input text
0209+  05A4             ;; terminated with ctrl+d
0210+  05A4             ;; pointer in d
0211+  05A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  05A4             _gettxt:
0213+  05A4 D7            push a
0214+  05A5 DA            push d
0215+  05A6             _gettxt_loop:
0216+  05A6 19 01         mov al, 1
0217+  05A8 05 03         syscall sys_io      ; receive in ah
0218+  05AA 76 04         cmp ah, 4      ; eot
0219+  05AC C6 E5 05      je _gettxt_end
0220+  05AF 76 08         cmp ah, $08      ; check for backspace
0221+  05B1 C6 E1 05      je _gettxt_backspace
0222+  05B4 76 5C         cmp ah, $5c        ; '\'
0223+  05B6 C6 BF 05      je _gettxt_escape
0224+  05B9 1A            mov al, ah
0225+  05BA 3E            mov [d], al
0226+  05BB 79            inc d
0227+  05BC 0A A6 05      jmp _gettxt_loop
0228+  05BF             _gettxt_escape:
0229+  05BF 19 01         mov al, 1
0230+  05C1 05 03         syscall sys_io      ; receive in ah
0231+  05C3 76 6E         cmp ah, 'n'
0232+  05C5 C6 D3 05      je _gettxt_lf
0233+  05C8 76 72         cmp ah, 'r'
0234+  05CA C6 DA 05      je _gettxt_cr
0235+  05CD 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  05CE 3E            mov [d], al
0237+  05CF 79            inc d
0238+  05D0 0A A6 05      jmp _gettxt_loop
0239+  05D3             _gettxt_lf:
0240+  05D3 19 0A         mov al, $0a
0241+  05D5 3E            mov [d], al
0242+  05D6 79            inc d
0243+  05D7 0A A6 05      jmp _gettxt_loop
0244+  05DA             _gettxt_cr:
0245+  05DA 19 0D         mov al, $0d
0246+  05DC 3E            mov [d], al
0247+  05DD 79            inc d
0248+  05DE 0A A6 05      jmp _gettxt_loop
0249+  05E1             _gettxt_backspace:
0250+  05E1 7F            dec d
0251+  05E2 0A A6 05      jmp _gettxt_loop
0252+  05E5             _gettxt_end:
0253+  05E5 19 00         mov al, 0
0254+  05E7 3E            mov [d], al        ; terminate string
0255+  05E8 E7            pop d
0256+  05E9 E4            pop a
0257+  05EA 09            ret
0258+  05EB             
0259+  05EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  05EB             ; print new line
0261+  05EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  05EB             printnl:
0263+  05EB D7            push a
0264+  05EC 10 00 0A      mov a, $0a00
0265+  05EF 05 03         syscall sys_io
0266+  05F1 10 00 0D      mov a, $0d00
0267+  05F4 05 03         syscall sys_io
0268+  05F6 E4            pop a
0269+  05F7 09            ret
0270+  05F8             
0271+  05F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  05F8             ; _strtoint
0273+  05F8             ; 4 digit hex string number in d
0274+  05F8             ; integer returned in a
0275+  05F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  05F8             _strtointx:
0277+  05F8 D8            push b
0278+  05F9 32            mov bl, [d]
0279+  05FA 37            mov bh, bl
0280+  05FB 33 01 00      mov bl, [d + 1]
0281+  05FE 07 CF 04      call _atoi        ; convert to int in al
0282+  0601 23            mov ah, al        ; move to ah
0283+  0602 33 02 00      mov bl, [d + 2]
0284+  0605 37            mov bh, bl
0285+  0606 33 03 00      mov bl, [d + 3]
0286+  0609 07 CF 04      call _atoi        ; convert to int in al
0287+  060C E5            pop b
0288+  060D 09            ret
0289+  060E             
0290+  060E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  060E             ; _strtoint
0292+  060E             ; 5 digit base10 string number in d
0293+  060E             ; integer returned in a
0294+  060E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  060E             _strtoint:
0296+  060E E2            push si
0297+  060F D8            push b
0298+  0610 D9            push c
0299+  0611 DA            push d
0300+  0612 07 71 04      call _strlen      ; get string length in c
0301+  0615 7E            dec c
0302+  0616 FD 4E         mov si, d
0303+  0618 12            mov a, c
0304+  0619 FD 99         shl a
0305+  061B 3B 92 07      mov d, table_power
0306+  061E 59            add d, a
0307+  061F 38 00 00      mov c, 0
0308+  0622             _strtoint_l0:
0309+  0622 F6            lodsb      ; load ascii to al
0310+  0623 B9 00         cmp al, 0
0311+  0625 C6 38 06      je _strtoint_end
0312+  0628 6F 30         sub al, $30    ; make into integer
0313+  062A 22 00         mov ah, 0
0314+  062C 2A            mov b, [d]
0315+  062D AC            mul a, b      ; result in b since it fits in 16bits
0316+  062E 11            mov a, b
0317+  062F 28            mov b, c
0318+  0630 54            add a, b
0319+  0631 39            mov c, a
0320+  0632 63 02 00      sub d, 2
0321+  0635 0A 22 06      jmp _strtoint_l0
0322+  0638             _strtoint_end:
0323+  0638 12            mov a, c
0324+  0639 E7            pop d
0325+  063A E6            pop c
0326+  063B E5            pop b
0327+  063C EF            pop si
0328+  063D 09            ret
0329+  063E             
0330+  063E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  063E             ; print null terminated string
0332+  063E             ; pointer in d
0333+  063E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  063E             _puts:
0335+  063E D7            push a
0336+  063F DA            push d
0337+  0640             _puts_l1:
0338+  0640 1E            mov al, [d]
0339+  0641 B9 00         cmp al, 0
0340+  0643 C6 4F 06      jz _puts_end
0341+  0646 23            mov ah, al
0342+  0647 19 00         mov al, 0
0343+  0649 05 03         syscall sys_io
0344+  064B 79            inc d
0345+  064C 0A 40 06      jmp _puts_l1
0346+  064F             _puts_end:
0347+  064F E7            pop d
0348+  0650 E4            pop a
0349+  0651 09            ret
0350+  0652             
0351+  0652             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  0652             ; print n size string
0353+  0652             ; pointer in d
0354+  0652             ; size in c
0355+  0652             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  0652             _putsn:
0357+  0652 DB            push al
0358+  0653 DA            push d
0359+  0654 D9            push c
0360+  0655             _putsn_l0:
0361+  0655 1E            mov al, [d]
0362+  0656 23            mov ah, al
0363+  0657 19 00         mov al, 0
0364+  0659 05 03         syscall sys_io
0365+  065B 79            inc d
0366+  065C 7E            dec c  
0367+  065D C2 00 00      cmp c, 0
0368+  0660 C7 55 06      jne _putsn_l0
0369+  0663             _putsn_end:
0370+  0663 E6            pop c
0371+  0664 E7            pop d
0372+  0665 E8            pop al
0373+  0666 09            ret
0374+  0667             
0375+  0667             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  0667             ; print 16bit decimal number
0377+  0667             ; input number in a
0378+  0667             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0667             print_u16d:
0380+  0667 D7            push a
0381+  0668 D8            push b
0382+  0669 FD D8         push g
0383+  066B 26 10 27      mov b, 10000
0384+  066E AE            div a, b      ; get 10000's coeff.
0385+  066F 07 93 06      call print_number
0386+  0672 11            mov a, b
0387+  0673 26 E8 03      mov b, 1000
0388+  0676 AE            div a, b      ; get 1000's coeff.
0389+  0677 07 93 06      call print_number
0390+  067A 11            mov a, b
0391+  067B 26 64 00      mov b, 100
0392+  067E AE            div a, b
0393+  067F 07 93 06      call print_number
0394+  0682 11            mov a, b
0395+  0683 26 0A 00      mov b, 10
0396+  0686 AE            div a, b
0397+  0687 07 93 06      call print_number
0398+  068A 1B            mov al, bl      ; 1's coeff in bl
0399+  068B 07 93 06      call print_number
0400+  068E FD F1         pop g
0401+  0690 E5            pop b
0402+  0691 E4            pop a
0403+  0692 09            ret
0404+  0693             
0405+  0693             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  0693             ; print al
0407+  0693             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  0693             print_number:
0409+  0693 6A 30         add al, $30
0410+  0695 23            mov ah, al
0411+  0696 07 12 05      call _putchar
0412+  0699 09            ret
0413+  069A             
0414+  069A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  069A             ; print 16bit hex integer
0416+  069A             ; integer value in reg b
0417+  069A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  069A             print_u16x:
0419+  069A D7            push a
0420+  069B D8            push b
0421+  069C DD            push bl
0422+  069D 30            mov bl, bh
0423+  069E 07 E0 04      call _itoa        ; convert bh to char in a
0424+  06A1 2F            mov bl, al        ; save al
0425+  06A2 19 00         mov al, 0
0426+  06A4 05 03         syscall sys_io        ; display ah
0427+  06A6 24            mov ah, bl        ; retrieve al
0428+  06A7 19 00         mov al, 0
0429+  06A9 05 03         syscall sys_io        ; display al
0430+  06AB             
0431+  06AB EA            pop bl
0432+  06AC 07 E0 04      call _itoa        ; convert bh to char in a
0433+  06AF 2F            mov bl, al        ; save al
0434+  06B0 19 00         mov al, 0
0435+  06B2 05 03         syscall sys_io        ; display ah
0436+  06B4 24            mov ah, bl        ; retrieve al
0437+  06B5 19 00         mov al, 0
0438+  06B7 05 03         syscall sys_io        ; display al
0439+  06B9             
0440+  06B9 E5            pop b
0441+  06BA E4            pop a
0442+  06BB 09            ret
0443+  06BC             
0444+  06BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  06BC             ; input 16bit hex integer
0446+  06BC             ; read 16bit integer into a
0447+  06BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  06BC             scan_u16x:
0449+  06BC F8 10 00      enter 16
0450+  06BF D8            push b
0451+  06C0 DA            push d
0452+  06C1             
0453+  06C1 FA F1 FF      lea d, [bp + -15]
0454+  06C4 07 19 05      call _gets        ; get number
0455+  06C7             
0456+  06C7 32            mov bl, [d]
0457+  06C8 37            mov bh, bl
0458+  06C9 33 01 00      mov bl, [d + 1]
0459+  06CC 07 CF 04      call _atoi        ; convert to int in al
0460+  06CF 23            mov ah, al        ; move to ah
0461+  06D0             
0462+  06D0 33 02 00      mov bl, [d + 2]
0463+  06D3 37            mov bh, bl
0464+  06D4 33 03 00      mov bl, [d + 3]
0465+  06D7 07 CF 04      call _atoi        ; convert to int in al
0466+  06DA             
0467+  06DA E7            pop d
0468+  06DB E5            pop b
0469+  06DC F9            leave
0470+  06DD 09            ret
0471+  06DE             
0472+  06DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  06DE             ; print 8bit hex integer
0474+  06DE             ; integer value in reg bl
0475+  06DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  06DE             print_u8x:
0477+  06DE D7            push a
0478+  06DF DD            push bl
0479+  06E0             
0480+  06E0 07 E0 04      call _itoa        ; convert bl to char in a
0481+  06E3 2F            mov bl, al        ; save al
0482+  06E4 19 00         mov al, 0
0483+  06E6 05 03         syscall sys_io        ; display ah
0484+  06E8 24            mov ah, bl        ; retrieve al
0485+  06E9 19 00         mov al, 0
0486+  06EB 05 03         syscall sys_io        ; display al
0487+  06ED             
0488+  06ED EA            pop bl
0489+  06EE E4            pop a
0490+  06EF 09            ret
0491+  06F0             
0492+  06F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  06F0             ; print 8bit decimal unsigned number
0494+  06F0             ; input number in al
0495+  06F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  06F0             print_u8d:
0497+  06F0 D7            push a
0498+  06F1 D8            push b
0499+  06F2 FD D8         push g
0500+  06F4 22 00         mov ah, 0
0501+  06F6 26 64 00      mov b, 100
0502+  06F9 AE            div a, b
0503+  06FA D8            push b      ; save remainder
0504+  06FB B9 00         cmp al, 0
0505+  06FD C6 07 07      je skip100
0506+  0700 6A 30         add al, $30
0507+  0702 23            mov ah, al
0508+  0703 19 00         mov al, 0
0509+  0705 05 03         syscall sys_io  ; print coeff
0510+  0707             skip100:
0511+  0707 E4            pop a
0512+  0708 22 00         mov ah, 0
0513+  070A 26 0A 00      mov b, 10
0514+  070D AE            div a, b
0515+  070E D8            push b      ; save remainder
0516+  070F B9 00         cmp al, 0
0517+  0711 C6 1B 07      je skip10
0518+  0714 6A 30         add al, $30
0519+  0716 23            mov ah, al
0520+  0717 19 00         mov al, 0
0521+  0719 05 03         syscall sys_io  ; print coeff
0522+  071B             skip10:
0523+  071B E4            pop a
0524+  071C 1B            mov al, bl
0525+  071D 6A 30         add al, $30
0526+  071F 23            mov ah, al
0527+  0720 19 00         mov al, 0
0528+  0722 05 03         syscall sys_io  ; print coeff
0529+  0724 FD F1         pop g
0530+  0726 E5            pop b
0531+  0727 E4            pop a
0532+  0728 09            ret
0533+  0729             
0534+  0729             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  0729             ; input 8bit hex integer
0536+  0729             ; read 8bit integer into al
0537+  0729             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  0729             scan_u8x:
0539+  0729 F8 04 00      enter 4
0540+  072C D8            push b
0541+  072D DA            push d
0542+  072E             
0543+  072E FA FD FF      lea d, [bp + -3]
0544+  0731 07 19 05      call _gets        ; get number
0545+  0734             
0546+  0734 32            mov bl, [d]
0547+  0735 37            mov bh, bl
0548+  0736 33 01 00      mov bl, [d + 1]
0549+  0739 07 CF 04      call _atoi        ; convert to int in al
0550+  073C             
0551+  073C E7            pop d
0552+  073D E5            pop b
0553+  073E F9            leave
0554+  073F 09            ret
0555+  0740             
0556+  0740             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  0740             ; input decimal number
0558+  0740             ; result in a
0559+  0740             ; 655'\0'
0560+  0740             ; low--------high
0561+  0740             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  0740             scan_u16d:
0563+  0740 F8 08 00      enter 8
0564+  0743 E2            push si
0565+  0744 D8            push b
0566+  0745 D9            push c
0567+  0746 DA            push d
0568+  0747 FA F9 FF      lea d, [bp +- 7]
0569+  074A 07 19 05      call _gets
0570+  074D 07 71 04      call _strlen      ; get string length in c
0571+  0750 7E            dec c
0572+  0751 FD 4E         mov si, d
0573+  0753 12            mov a, c
0574+  0754 FD 99         shl a
0575+  0756 3B 92 07      mov d, table_power
0576+  0759 59            add d, a
0577+  075A 38 00 00      mov c, 0
0578+  075D             mul_loop:
0579+  075D F6            lodsb      ; load ascii to al
0580+  075E B9 00         cmp al, 0
0581+  0760 C6 73 07      je mul_exit
0582+  0763 6F 30         sub al, $30    ; make into integer
0583+  0765 22 00         mov ah, 0
0584+  0767 2A            mov b, [d]
0585+  0768 AC            mul a, b      ; result in b since it fits in 16bits
0586+  0769 11            mov a, b
0587+  076A 28            mov b, c
0588+  076B 54            add a, b
0589+  076C 39            mov c, a
0590+  076D 63 02 00      sub d, 2
0591+  0770 0A 5D 07      jmp mul_loop
0592+  0773             mul_exit:
0593+  0773 12            mov a, c
0594+  0774 E7            pop d
0595+  0775 E6            pop c
0596+  0776 E5            pop b
0597+  0777 EF            pop si
0598+  0778 F9            leave
0599+  0779 09            ret
0600+  077A             
0601+  077A             
0602+  077A 30 31 32 33 s_hex_digits:    .db "0123456789abcdef"  
0602+  077E 34 35 36 37 
0602+  0782 38 39 61 62 
0602+  0786 63 64 65 66 
0603+  078A 1B 5B 32 6A s_telnet_clear:  .db "\033[2j\033[h", 0
0603+  078E 1B 5B 68 00 
0604+  0792             
0605+  0792             table_power:
0606+  0792 01 00         .dw 1
0607+  0794 0A 00         .dw 10
0608+  0796 64 00         .dw 100
0609+  0798 E8 03         .dw 1000
0610+  079A 10 27         .dw 100000023   079C             .end
tasm: Number of errors = 0
