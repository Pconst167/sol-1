0001   0000             .include "lib/kernel.exp"
0001+  0000             fdc_irq_event    .EQU  $195a
0002+  0000             sys_break        .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_create_proc  .EQU  $0005
0008+  0000             sys_list_proc    .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_fdc          .EQU  $000d
0016+  0000             text_org         .EQU  $0400
0002   0400             .org text_org
0003   0400             
0004   0400             ; --- BEGIN TEXT BLOCK
0005   0400             ; FFC0    5.25" Floppy Drive Block
0006   0400             ;   - FFC0  (Last 4 bits: 0000)    Output Port (377 Flip-Flop)                       Note: A3 Address line is 0
0007   0400             ;   - FFC1  (Last 4 bits: 0001)    Input Port  (244 Buffer)                          Note: A3 Address line is 0
0008   0400             ;   - FFC8  (Last 4 bits: 1000)    FDC         (WD1770 Floppy Drive Controller)      Note: A3 Address line is 1
0009   0400             main:
0010   0400 FD 49 FF FF   mov bp, $FFFF
0011   0404 FD 47 FF FF   mov sp, $FFFF
0012   0408             
0013   0408 3B 1D 04      mov d, s_irq1
0014   040B 07 45 06      call _puts
0015   040E 3B 5A 19      mov d, fdc_irq_event
0016   0411 19 04         mov al, 4
0017   0413 05 0C         syscall sys_system    ; read fdc irq
0018   0415 07 E5 06      call print_u8x        ; print irq event
0019   0418 07 F2 05      call printnl
0020   041B             
0021   041B 05 0B         syscall sys_terminate_proc
0022   041D             
0023   041D 0A 76 61 6C s_irq1: .db "\nvalue of fdc irq: ", 0
0023   0421 75 65 20 6F 
0023   0425 66 20 66 64 
0023   0429 63 20 69 72 
0023   042D 71 3A 20 00 
0024   0431             
0025   0431             .include "lib/stdio.asm"
0001+  0431             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0431             ; stdio.s
0003+  0431             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0431             .include "lib/string.asm"
0001++ 0431             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0431             ; string.s
0003++ 0431             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0431             
0005++ 0431             
0006++ 0431             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0431             ; _strrev
0008++ 0431             ; reverse a string
0009++ 0431             ; D = string address
0010++ 0431             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0431             ; 01234
0012++ 0431             _strrev:
0013++ 0431 4B          	pusha
0014++ 0432 07 78 04    	call _strlen	; length in C
0015++ 0435 12          	mov a, c
0016++ 0436 AF 01 00    	cmp a, 1
0017++ 0439 D0 53 04    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 043C 7D          	dec a
0019++ 043D FD 4E       	mov si, d	; beginning of string
0020++ 043F FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0441 59          	add d, a	; end of string
0022++ 0442 12          	mov a, c
0023++ 0443 FD 9B       	shr a		; divide by 2
0024++ 0445 39          	mov c, a	; C now counts the steps
0025++ 0446             _strrev_L0:
0026++ 0446 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0447 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0448 3E          	mov [d], al	; store left char into right side
0029++ 0449 1B          	mov al, bl
0030++ 044A F7          	stosb		; store right-side char into left-side; increase DI
0031++ 044B 7E          	dec c
0032++ 044C 7F          	dec d
0033++ 044D C2 00 00    	cmp c, 0
0034++ 0450 C7 46 04    	jne _strrev_L0
0035++ 0453             _strrev_end:
0036++ 0453 4C          	popa
0037++ 0454 09          	ret
0038++ 0455             	
0039++ 0455             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0455             ; _strchr
0041++ 0455             ; search string in D for char in AL
0042++ 0455             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0455             _strchr:
0044++ 0455             _strchr_L0:
0045++ 0455 32          	mov bl, [d]
0046++ 0456 C1 00       	cmp bl, 0
0047++ 0458 C6 63 04    	je _strchr_end
0048++ 045B BA          	cmp al, bl
0049++ 045C C6 63 04    	je _strchr_end
0050++ 045F 79          	inc d
0051++ 0460 0A 55 04    	jmp _strchr_L0
0052++ 0463             _strchr_end:
0053++ 0463 1B          	mov al, bl
0054++ 0464 09          	ret
0055++ 0465             
0056++ 0465             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0465             ; _strstr
0058++ 0465             ; find sub-string
0059++ 0465             ; str1 in SI
0060++ 0465             ; str2 in DI
0061++ 0465             ; SI points to end of source string
0062++ 0465             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0465             _strstr:
0064++ 0465 DB          	push al
0065++ 0466 DA          	push d
0066++ 0467 E3          	push di
0067++ 0468             _strstr_loop:
0068++ 0468 F3          	cmpsb					; compare a byte of the strings
0069++ 0469 C7 74 04    	jne _strstr_ret
0070++ 046C FC 00 00    	lea d, [di + 0]
0071++ 046F BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0471 C7 68 04    	jne _strstr_loop				; equal chars but not at end
0073++ 0474             _strstr_ret:
0074++ 0474 F0          	pop di
0075++ 0475 E7          	pop d
0076++ 0476 E8          	pop al
0077++ 0477 09          	ret
0078++ 0478             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0478             ; length of null terminated string
0080++ 0478             ; result in C
0081++ 0478             ; pointer in D
0082++ 0478             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0478             _strlen:
0084++ 0478 DA          	push d
0085++ 0479 38 00 00    	mov c, 0
0086++ 047C             _strlen_L1:
0087++ 047C BD 00       	cmp byte [d], 0
0088++ 047E C6 86 04    	je _strlen_ret
0089++ 0481 79          	inc d
0090++ 0482 78          	inc c
0091++ 0483 0A 7C 04    	jmp _strlen_L1
0092++ 0486             _strlen_ret:
0093++ 0486 E7          	pop d
0094++ 0487 09          	ret
0095++ 0488             
0096++ 0488             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0488             ; STRCMP
0098++ 0488             ; compare two strings
0099++ 0488             ; str1 in SI
0100++ 0488             ; str2 in DI
0101++ 0488             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0488             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0488             _strcmp:
0104++ 0488 DB          	push al
0105++ 0489 DA          	push d
0106++ 048A E3          	push di
0107++ 048B E2          	push si
0108++ 048C             _strcmp_loop:
0109++ 048C F3          	cmpsb					; compare a byte of the strings
0110++ 048D C7 98 04    	jne _strcmp_ret
0111++ 0490 FB FF FF    	lea d, [si +- 1]
0112++ 0493 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0495 C7 8C 04    	jne _strcmp_loop				; equal chars but not at end
0114++ 0498             _strcmp_ret:
0115++ 0498 EF          	pop si
0116++ 0499 F0          	pop di
0117++ 049A E7          	pop d
0118++ 049B E8          	pop al
0119++ 049C 09          	ret
0120++ 049D             
0121++ 049D             
0122++ 049D             ; STRCPY
0123++ 049D             ; copy null terminated string from SI to DI
0124++ 049D             ; source in SI
0125++ 049D             ; destination in DI
0126++ 049D             _strcpy:
0127++ 049D E2          	push si
0128++ 049E E3          	push di
0129++ 049F DB          	push al
0130++ 04A0             _strcpy_L1:
0131++ 04A0 F6          	lodsb
0132++ 04A1 F7          	stosb
0133++ 04A2 B9 00       	cmp al, 0
0134++ 04A4 C7 A0 04    	jne _strcpy_L1
0135++ 04A7             _strcpy_end:
0136++ 04A7 E8          	pop al
0137++ 04A8 F0          	pop di
0138++ 04A9 EF          	pop si
0139++ 04AA 09          	ret
0140++ 04AB             
0141++ 04AB             ; STRCAT
0142++ 04AB             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04AB             ; source in SI
0144++ 04AB             ; destination in DI
0145++ 04AB             _strcat:
0146++ 04AB E2          	push si
0147++ 04AC E3          	push di
0148++ 04AD D7          	push a
0149++ 04AE DA          	push d
0150++ 04AF 50          	mov a, di
0151++ 04B0 3C          	mov d, a
0152++ 04B1             _strcat_goto_end_L1:
0153++ 04B1 BD 00       	cmp byte[d], 0
0154++ 04B3 C6 BA 04    	je _strcat_start
0155++ 04B6 79          	inc d
0156++ 04B7 0A B1 04    	jmp _strcat_goto_end_L1
0157++ 04BA             _strcat_start:
0158++ 04BA FD 50       	mov di, d
0159++ 04BC             _strcat_L1:
0160++ 04BC F6          	lodsb
0161++ 04BD F7          	stosb
0162++ 04BE B9 00       	cmp al, 0
0163++ 04C0 C7 BC 04    	jne _strcat_L1
0164++ 04C3             _strcat_end:
0165++ 04C3 E7          	pop d
0166++ 04C4 E4          	pop a
0167++ 04C5 F0          	pop di
0168++ 04C6 EF          	pop si
0169++ 04C7 09          	ret
0170++ 04C8             
0171++ 04C8             
0005+  04C8             
0006+  04C8             
0007+  04C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  04C8             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  04C8             ; ASCII in BL
0010+  04C8             ; result in AL
0011+  04C8             ; ascii for F = 0100 0110
0012+  04C8             ; ascii for 9 = 0011 1001
0013+  04C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  04C8             hex_ascii_encode:
0015+  04C8 1B            mov al, bl
0016+  04C9 93 40         test al, $40        ; test if letter or number
0017+  04CB C7 D1 04      jnz hex_letter
0018+  04CE 87 0F         and al, $0F        ; get number
0019+  04D0 09            ret
0020+  04D1             hex_letter:
0021+  04D1 87 0F         and al, $0F        ; get letter
0022+  04D3 6A 09         add al, 9
0023+  04D5 09            ret
0024+  04D6             
0025+  04D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  04D6             ; ATOI
0027+  04D6             ; 2 letter hex string in B
0028+  04D6             ; 8bit integer returned in AL
0029+  04D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  04D6             _atoi:
0031+  04D6 D8            push b
0032+  04D7 07 C8 04      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  04DA 30            mov bl, bh
0034+  04DB DB            push al          ; save a
0035+  04DC 07 C8 04      call hex_ascii_encode
0036+  04DF EA            pop bl  
0037+  04E0 FD 9E 04      shl al, 4
0038+  04E3 8C            or al, bl
0039+  04E4 E5            pop b
0040+  04E5 09            ret  
0041+  04E6             
0042+  04E6             
0043+  04E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  04E6             ; scanf
0045+  04E6             ; no need for explanations!
0046+  04E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  04E6             scanf:
0048+  04E6 09            ret
0049+  04E7             
0050+  04E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  04E7             ; ITOA
0052+  04E7             ; 8bit value in BL
0053+  04E7             ; 2 byte ASCII result in A
0054+  04E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  04E7             _itoa:
0056+  04E7 DA            push d
0057+  04E8 D8            push b
0058+  04E9 A7 00         mov bh, 0
0059+  04EB FD A4 04      shr bl, 4  
0060+  04EE 74            mov d, b
0061+  04EF 1F 81 07      mov al, [d + s_hex_digits]
0062+  04F2 23            mov ah, al
0063+  04F3               
0064+  04F3 E5            pop b
0065+  04F4 D8            push b
0066+  04F5 A7 00         mov bh, 0
0067+  04F7 FD 87 0F      and bl, $0F
0068+  04FA 74            mov d, b
0069+  04FB 1F 81 07      mov al, [d + s_hex_digits]
0070+  04FE E5            pop b
0071+  04FF E7            pop d
0072+  0500 09            ret
0073+  0501             
0074+  0501             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  0501             ; HEX STRING TO BINARY
0076+  0501             ; di = destination address
0077+  0501             ; si = source
0078+  0501             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  0501             _hex_to_int:
0080+  0501             _hex_to_int_L1:
0081+  0501 F6            lodsb          ; load from [SI] to AL
0082+  0502 B9 00         cmp al, 0        ; check if ASCII 0
0083+  0504 C6 11 05      jz _hex_to_int_ret
0084+  0507 36            mov bh, al
0085+  0508 F6            lodsb
0086+  0509 2F            mov bl, al
0087+  050A 07 D6 04      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  050D F7            stosb          ; store AL to [DI]
0089+  050E 0A 01 05      jmp _hex_to_int_L1
0090+  0511             _hex_to_int_ret:
0091+  0511 09            ret    
0092+  0512             
0093+  0512             
0094+  0512             
0095+  0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  0512             ; GETCHAR
0097+  0512             ; char in ah
0098+  0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  0512             getch:
0100+  0512 DB            push al
0101+  0513             getch_retry:
0102+  0513 19 01         mov al, 1
0103+  0515 05 03         syscall sys_io      ; receive in AH
0104+  0517 E8            pop al
0105+  0518 09            ret
0106+  0519             
0107+  0519             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  0519             ; PUTCHAR
0109+  0519             ; char in ah
0110+  0519             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0519             _putchar:
0112+  0519 DB            push al
0113+  051A 19 00         mov al, 0
0114+  051C 05 03         syscall sys_io      ; char in AH
0115+  051E E8            pop al
0116+  051F 09            ret
0117+  0520             
0118+  0520             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  0520             ;; INPUT A STRING
0120+  0520             ;; terminates with null
0121+  0520             ;; pointer in D
0122+  0520             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  0520             _gets:
0124+  0520 D7            push a
0125+  0521 DA            push d
0126+  0522             _gets_loop:
0127+  0522 19 01         mov al, 1
0128+  0524 05 03         syscall sys_io      ; receive in AH
0129+  0526 76 1B         cmp ah, 27
0130+  0528 C6 49 05      je _gets_ansi_esc
0131+  052B 76 0A         cmp ah, $0A        ; LF
0132+  052D C6 A5 05      je _gets_end
0133+  0530 76 0D         cmp ah, $0D        ; CR
0134+  0532 C6 A5 05      je _gets_end
0135+  0535 76 5C         cmp ah, $5C        ; '\\'
0136+  0537 C6 6B 05      je _gets_escape
0137+  053A 76 08         cmp ah, $08      ; check for backspace
0138+  053C C6 45 05      je _gets_backspace
0139+  053F 1A            mov al, ah
0140+  0540 3E            mov [d], al
0141+  0541 79            inc d
0142+  0542 0A 22 05      jmp _gets_loop
0143+  0545             _gets_backspace:
0144+  0545 7F            dec d
0145+  0546 0A 22 05      jmp _gets_loop
0146+  0549             _gets_ansi_esc:
0147+  0549 19 01         mov al, 1
0148+  054B 05 03         syscall sys_io        ; receive in AH without echo
0149+  054D 76 5B         cmp ah, '['
0150+  054F C7 22 05      jne _gets_loop
0151+  0552 19 01         mov al, 1
0152+  0554 05 03         syscall sys_io          ; receive in AH without echo
0153+  0556 76 44         cmp ah, 'D'
0154+  0558 C6 63 05      je _gets_left_arrow
0155+  055B 76 43         cmp ah, 'C'
0156+  055D C6 67 05      je _gets_right_arrow
0157+  0560 0A 22 05      jmp _gets_loop
0158+  0563             _gets_left_arrow:
0159+  0563 7F            dec d
0160+  0564 0A 22 05      jmp _gets_loop
0161+  0567             _gets_right_arrow:
0162+  0567 79            inc d
0163+  0568 0A 22 05      jmp _gets_loop
0164+  056B             _gets_escape:
0165+  056B 19 01         mov al, 1
0166+  056D 05 03         syscall sys_io      ; receive in AH
0167+  056F 76 6E         cmp ah, 'n'
0168+  0571 C6 90 05      je _gets_LF
0169+  0574 76 72         cmp ah, 'r'
0170+  0576 C6 97 05      je _gets_CR
0171+  0579 76 30         cmp ah, '0'
0172+  057B C6 9E 05      je _gets_NULL
0173+  057E 76 5C         cmp ah, $5C  ; '\'
0174+  0580 C6 89 05      je _gets_slash
0175+  0583 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  0584 3E            mov [d], al
0177+  0585 79            inc d
0178+  0586 0A 22 05      jmp _gets_loop
0179+  0589             _gets_slash:
0180+  0589 19 5C         mov al, $5C
0181+  058B 3E            mov [d], al
0182+  058C 79            inc d
0183+  058D 0A 22 05      jmp _gets_loop
0184+  0590             _gets_LF:
0185+  0590 19 0A         mov al, $0A
0186+  0592 3E            mov [d], al
0187+  0593 79            inc d
0188+  0594 0A 22 05      jmp _gets_loop
0189+  0597             _gets_CR:
0190+  0597 19 0D         mov al, $0D
0191+  0599 3E            mov [d], al
0192+  059A 79            inc d
0193+  059B 0A 22 05      jmp _gets_loop
0194+  059E             _gets_NULL:
0195+  059E 19 00         mov al, $00
0196+  05A0 3E            mov [d], al
0197+  05A1 79            inc d
0198+  05A2 0A 22 05      jmp _gets_loop
0199+  05A5             _gets_end:
0200+  05A5 19 00         mov al, 0
0201+  05A7 3E            mov [d], al        ; terminate string
0202+  05A8 E7            pop d
0203+  05A9 E4            pop a
0204+  05AA 09            ret
0205+  05AB             
0206+  05AB             
0207+  05AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  05AB             ;; INPUT TEXT
0209+  05AB             ;; terminated with CTRL+D
0210+  05AB             ;; pointer in D
0211+  05AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  05AB             _gettxt:
0213+  05AB D7            push a
0214+  05AC DA            push d
0215+  05AD             _gettxt_loop:
0216+  05AD 19 01         mov al, 1
0217+  05AF 05 03         syscall sys_io      ; receive in AH
0218+  05B1 76 04         cmp ah, 4      ; EOT
0219+  05B3 C6 EC 05      je _gettxt_end
0220+  05B6 76 08         cmp ah, $08      ; check for backspace
0221+  05B8 C6 E8 05      je _gettxt_backspace
0222+  05BB 76 5C         cmp ah, $5C        ; '\'
0223+  05BD C6 C6 05      je _gettxt_escape
0224+  05C0 1A            mov al, ah
0225+  05C1 3E            mov [d], al
0226+  05C2 79            inc d
0227+  05C3 0A AD 05      jmp _gettxt_loop
0228+  05C6             _gettxt_escape:
0229+  05C6 19 01         mov al, 1
0230+  05C8 05 03         syscall sys_io      ; receive in AH
0231+  05CA 76 6E         cmp ah, 'n'
0232+  05CC C6 DA 05      je _gettxt_LF
0233+  05CF 76 72         cmp ah, 'r'
0234+  05D1 C6 E1 05      je _gettxt_CR
0235+  05D4 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  05D5 3E            mov [d], al
0237+  05D6 79            inc d
0238+  05D7 0A AD 05      jmp _gettxt_loop
0239+  05DA             _gettxt_LF:
0240+  05DA 19 0A         mov al, $0A
0241+  05DC 3E            mov [d], al
0242+  05DD 79            inc d
0243+  05DE 0A AD 05      jmp _gettxt_loop
0244+  05E1             _gettxt_CR:
0245+  05E1 19 0D         mov al, $0D
0246+  05E3 3E            mov [d], al
0247+  05E4 79            inc d
0248+  05E5 0A AD 05      jmp _gettxt_loop
0249+  05E8             _gettxt_backspace:
0250+  05E8 7F            dec d
0251+  05E9 0A AD 05      jmp _gettxt_loop
0252+  05EC             _gettxt_end:
0253+  05EC 19 00         mov al, 0
0254+  05EE 3E            mov [d], al        ; terminate string
0255+  05EF E7            pop d
0256+  05F0 E4            pop a
0257+  05F1 09            ret
0258+  05F2             
0259+  05F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  05F2             ; PRINT NEW LINE
0261+  05F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  05F2             printnl:
0263+  05F2 D7            push a
0264+  05F3 10 00 0A      mov a, $0A00
0265+  05F6 05 03         syscall sys_io
0266+  05F8 10 00 0D      mov a, $0D00
0267+  05FB 05 03         syscall sys_io
0268+  05FD E4            pop a
0269+  05FE 09            ret
0270+  05FF             
0271+  05FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  05FF             ; _strtoint
0273+  05FF             ; 4 digit hex string number in d
0274+  05FF             ; integer returned in A
0275+  05FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  05FF             _strtointx:
0277+  05FF D8            push b
0278+  0600 32            mov bl, [d]
0279+  0601 37            mov bh, bl
0280+  0602 33 01 00      mov bl, [d + 1]
0281+  0605 07 D6 04      call _atoi        ; convert to int in AL
0282+  0608 23            mov ah, al        ; move to AH
0283+  0609 33 02 00      mov bl, [d + 2]
0284+  060C 37            mov bh, bl
0285+  060D 33 03 00      mov bl, [d + 3]
0286+  0610 07 D6 04      call _atoi        ; convert to int in AL
0287+  0613 E5            pop b
0288+  0614 09            ret
0289+  0615             
0290+  0615             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  0615             ; _strtoint
0292+  0615             ; 5 digit base10 string number in d
0293+  0615             ; integer returned in A
0294+  0615             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  0615             _strtoint:
0296+  0615 E2            push si
0297+  0616 D8            push b
0298+  0617 D9            push c
0299+  0618 DA            push d
0300+  0619 07 78 04      call _strlen      ; get string length in C
0301+  061C 7E            dec c
0302+  061D FD 4E         mov si, d
0303+  061F 12            mov a, c
0304+  0620 FD 99         shl a
0305+  0622 3B 99 07      mov d, table_power
0306+  0625 59            add d, a
0307+  0626 38 00 00      mov c, 0
0308+  0629             _strtoint_L0:
0309+  0629 F6            lodsb      ; load ASCII to al
0310+  062A B9 00         cmp al, 0
0311+  062C C6 3F 06      je _strtoint_end
0312+  062F 6F 30         sub al, $30    ; make into integer
0313+  0631 22 00         mov ah, 0
0314+  0633 2A            mov b, [d]
0315+  0634 AC            mul a, b      ; result in B since it fits in 16bits
0316+  0635 11            mov a, b
0317+  0636 28            mov b, c
0318+  0637 54            add a, b
0319+  0638 39            mov c, a
0320+  0639 63 02 00      sub d, 2
0321+  063C 0A 29 06      jmp _strtoint_L0
0322+  063F             _strtoint_end:
0323+  063F 12            mov a, c
0324+  0640 E7            pop d
0325+  0641 E6            pop c
0326+  0642 E5            pop b
0327+  0643 EF            pop si
0328+  0644 09            ret
0329+  0645             
0330+  0645             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  0645             ; PRINT NULL TERMINATED STRING
0332+  0645             ; pointer in D
0333+  0645             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  0645             _puts:
0335+  0645 D7            push a
0336+  0646 DA            push d
0337+  0647             _puts_L1:
0338+  0647 1E            mov al, [d]
0339+  0648 B9 00         cmp al, 0
0340+  064A C6 56 06      jz _puts_END
0341+  064D 23            mov ah, al
0342+  064E 19 00         mov al, 0
0343+  0650 05 03         syscall sys_io
0344+  0652 79            inc d
0345+  0653 0A 47 06      jmp _puts_L1
0346+  0656             _puts_END:
0347+  0656 E7            pop d
0348+  0657 E4            pop a
0349+  0658 09            ret
0350+  0659             
0351+  0659             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  0659             ; PRINT N SIZE STRING
0353+  0659             ; pointer in D
0354+  0659             ; size in C
0355+  0659             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  0659             _putsn:
0357+  0659 DB            push al
0358+  065A DA            push d
0359+  065B D9            push c
0360+  065C             _putsn_L0:
0361+  065C 1E            mov al, [d]
0362+  065D 23            mov ah, al
0363+  065E 19 00         mov al, 0
0364+  0660 05 03         syscall sys_io
0365+  0662 79            inc d
0366+  0663 7E            dec c  
0367+  0664 C2 00 00      cmp c, 0
0368+  0667 C7 5C 06      jne _putsn_L0
0369+  066A             _putsn_end:
0370+  066A E6            pop c
0371+  066B E7            pop d
0372+  066C E8            pop al
0373+  066D 09            ret
0374+  066E             
0375+  066E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  066E             ; print 16bit decimal number
0377+  066E             ; input number in A
0378+  066E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  066E             print_u16d:
0380+  066E D7            push a
0381+  066F D8            push b
0382+  0670 FD D8         push g
0383+  0672 26 10 27      mov b, 10000
0384+  0675 AE            div a, b      ; get 10000's coeff.
0385+  0676 07 9A 06      call print_number
0386+  0679 11            mov a, b
0387+  067A 26 E8 03      mov b, 1000
0388+  067D AE            div a, b      ; get 1000's coeff.
0389+  067E 07 9A 06      call print_number
0390+  0681 11            mov a, b
0391+  0682 26 64 00      mov b, 100
0392+  0685 AE            div a, b
0393+  0686 07 9A 06      call print_number
0394+  0689 11            mov a, b
0395+  068A 26 0A 00      mov b, 10
0396+  068D AE            div a, b
0397+  068E 07 9A 06      call print_number
0398+  0691 1B            mov al, bl      ; 1's coeff in bl
0399+  0692 07 9A 06      call print_number
0400+  0695 FD F1         pop g
0401+  0697 E5            pop b
0402+  0698 E4            pop a
0403+  0699 09            ret
0404+  069A             
0405+  069A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  069A             ; print AL
0407+  069A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  069A             print_number:
0409+  069A 6A 30         add al, $30
0410+  069C 23            mov ah, al
0411+  069D 07 19 05      call _putchar
0412+  06A0 09            ret
0413+  06A1             
0414+  06A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  06A1             ; PRINT 16BIT HEX INTEGER
0416+  06A1             ; integer value in reg B
0417+  06A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  06A1             print_u16x:
0419+  06A1 D7            push a
0420+  06A2 D8            push b
0421+  06A3 DD            push bl
0422+  06A4 30            mov bl, bh
0423+  06A5 07 E7 04      call _itoa        ; convert bh to char in A
0424+  06A8 2F            mov bl, al        ; save al
0425+  06A9 19 00         mov al, 0
0426+  06AB 05 03         syscall sys_io        ; display AH
0427+  06AD 24            mov ah, bl        ; retrieve al
0428+  06AE 19 00         mov al, 0
0429+  06B0 05 03         syscall sys_io        ; display AL
0430+  06B2             
0431+  06B2 EA            pop bl
0432+  06B3 07 E7 04      call _itoa        ; convert bh to char in A
0433+  06B6 2F            mov bl, al        ; save al
0434+  06B7 19 00         mov al, 0
0435+  06B9 05 03         syscall sys_io        ; display AH
0436+  06BB 24            mov ah, bl        ; retrieve al
0437+  06BC 19 00         mov al, 0
0438+  06BE 05 03         syscall sys_io        ; display AL
0439+  06C0             
0440+  06C0 E5            pop b
0441+  06C1 E4            pop a
0442+  06C2 09            ret
0443+  06C3             
0444+  06C3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  06C3             ; INPUT 16BIT HEX INTEGER
0446+  06C3             ; read 16bit integer into A
0447+  06C3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  06C3             scan_u16x:
0449+  06C3 F8 10 00      enter 16
0450+  06C6 D8            push b
0451+  06C7 DA            push d
0452+  06C8             
0453+  06C8 FA F1 FF      lea d, [bp + -15]
0454+  06CB 07 20 05      call _gets        ; get number
0455+  06CE             
0456+  06CE 32            mov bl, [d]
0457+  06CF 37            mov bh, bl
0458+  06D0 33 01 00      mov bl, [d + 1]
0459+  06D3 07 D6 04      call _atoi        ; convert to int in AL
0460+  06D6 23            mov ah, al        ; move to AH
0461+  06D7             
0462+  06D7 33 02 00      mov bl, [d + 2]
0463+  06DA 37            mov bh, bl
0464+  06DB 33 03 00      mov bl, [d + 3]
0465+  06DE 07 D6 04      call _atoi        ; convert to int in AL
0466+  06E1             
0467+  06E1 E7            pop d
0468+  06E2 E5            pop b
0469+  06E3 F9            leave
0470+  06E4 09            ret
0471+  06E5             
0472+  06E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  06E5             ; PRINT 8bit HEX INTEGER
0474+  06E5             ; integer value in reg bl
0475+  06E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  06E5             print_u8x:
0477+  06E5 D7            push a
0478+  06E6 DD            push bl
0479+  06E7             
0480+  06E7 07 E7 04      call _itoa        ; convert bl to char in A
0481+  06EA 2F            mov bl, al        ; save al
0482+  06EB 19 00         mov al, 0
0483+  06ED 05 03         syscall sys_io        ; display AH
0484+  06EF 24            mov ah, bl        ; retrieve al
0485+  06F0 19 00         mov al, 0
0486+  06F2 05 03         syscall sys_io        ; display AL
0487+  06F4             
0488+  06F4 EA            pop bl
0489+  06F5 E4            pop a
0490+  06F6 09            ret
0491+  06F7             
0492+  06F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  06F7             ; print 8bit decimal unsigned number
0494+  06F7             ; input number in AL
0495+  06F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  06F7             print_u8d:
0497+  06F7 D7            push a
0498+  06F8 D8            push b
0499+  06F9 FD D8         push g
0500+  06FB 22 00         mov ah, 0
0501+  06FD 26 64 00      mov b, 100
0502+  0700 AE            div a, b
0503+  0701 D8            push b      ; save remainder
0504+  0702 B9 00         cmp al, 0
0505+  0704 C6 0E 07      je skip100
0506+  0707 6A 30         add al, $30
0507+  0709 23            mov ah, al
0508+  070A 19 00         mov al, 0
0509+  070C 05 03         syscall sys_io  ; print coeff
0510+  070E             skip100:
0511+  070E E4            pop a
0512+  070F 22 00         mov ah, 0
0513+  0711 26 0A 00      mov b, 10
0514+  0714 AE            div a, b
0515+  0715 D8            push b      ; save remainder
0516+  0716 B9 00         cmp al, 0
0517+  0718 C6 22 07      je skip10
0518+  071B 6A 30         add al, $30
0519+  071D 23            mov ah, al
0520+  071E 19 00         mov al, 0
0521+  0720 05 03         syscall sys_io  ; print coeff
0522+  0722             skip10:
0523+  0722 E4            pop a
0524+  0723 1B            mov al, bl
0525+  0724 6A 30         add al, $30
0526+  0726 23            mov ah, al
0527+  0727 19 00         mov al, 0
0528+  0729 05 03         syscall sys_io  ; print coeff
0529+  072B FD F1         pop g
0530+  072D E5            pop b
0531+  072E E4            pop a
0532+  072F 09            ret
0533+  0730             
0534+  0730             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  0730             ; INPUT 8BIT HEX INTEGER
0536+  0730             ; read 8bit integer into AL
0537+  0730             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  0730             scan_u8x:
0539+  0730 F8 04 00      enter 4
0540+  0733 D8            push b
0541+  0734 DA            push d
0542+  0735             
0543+  0735 FA FD FF      lea d, [bp + -3]
0544+  0738 07 20 05      call _gets        ; get number
0545+  073B             
0546+  073B 32            mov bl, [d]
0547+  073C 37            mov bh, bl
0548+  073D 33 01 00      mov bl, [d + 1]
0549+  0740 07 D6 04      call _atoi        ; convert to int in AL
0550+  0743             
0551+  0743 E7            pop d
0552+  0744 E5            pop b
0553+  0745 F9            leave
0554+  0746 09            ret
0555+  0747             
0556+  0747             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  0747             ; input decimal number
0558+  0747             ; result in A
0559+  0747             ; 655'\0'
0560+  0747             ; low--------high
0561+  0747             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  0747             scan_u16d:
0563+  0747 F8 08 00      enter 8
0564+  074A E2            push si
0565+  074B D8            push b
0566+  074C D9            push c
0567+  074D DA            push d
0568+  074E FA F9 FF      lea d, [bp +- 7]
0569+  0751 07 20 05      call _gets
0570+  0754 07 78 04      call _strlen      ; get string length in C
0571+  0757 7E            dec c
0572+  0758 FD 4E         mov si, d
0573+  075A 12            mov a, c
0574+  075B FD 99         shl a
0575+  075D 3B 99 07      mov d, table_power
0576+  0760 59            add d, a
0577+  0761 38 00 00      mov c, 0
0578+  0764             mul_loop:
0579+  0764 F6            lodsb      ; load ASCII to al
0580+  0765 B9 00         cmp al, 0
0581+  0767 C6 7A 07      je mul_exit
0582+  076A 6F 30         sub al, $30    ; make into integer
0583+  076C 22 00         mov ah, 0
0584+  076E 2A            mov b, [d]
0585+  076F AC            mul a, b      ; result in B since it fits in 16bits
0586+  0770 11            mov a, b
0587+  0771 28            mov b, c
0588+  0772 54            add a, b
0589+  0773 39            mov c, a
0590+  0774 63 02 00      sub d, 2
0591+  0777 0A 64 07      jmp mul_loop
0592+  077A             mul_exit:
0593+  077A 12            mov a, c
0594+  077B E7            pop d
0595+  077C E6            pop c
0596+  077D E5            pop b
0597+  077E EF            pop si
0598+  077F F9            leave
0599+  0780 09            ret
0600+  0781             
0601+  0781             
0602+  0781 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0602+  0785 34 35 36 37 
0602+  0789 38 39 41 42 
0602+  078D 43 44 45 46 
0603+  0791 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0603+  0795 1B 5B 48 00 
0604+  0799             
0605+  0799             table_power:
0606+  0799 01 00         .dw 1
0607+  079B 0A 00         .dw 10
0608+  079D 64 00         .dw 100
0609+  079F E8 03         .dw 1000
0610+  07A1 10 27         .dw 100000026   07A3             .end
tasm: Number of errors = 0
