0001   0000             .include "lib/kernel.exp"
0001+  0000             sys_break        .EQU  $0000
0002+  0000             sys_rtc          .EQU  $0001
0003+  0000             sys_ide          .EQU  $0002
0004+  0000             sys_io           .EQU  $0003
0005+  0000             sys_filesystem   .EQU  $0004
0006+  0000             sys_create_proc  .EQU  $0005
0007+  0000             sys_list_proc    .EQU  $0006
0008+  0000             sys_datetime     .EQU  $0007
0009+  0000             sys_reboot       .EQU  $0008
0010+  0000             sys_pause_proc   .EQU  $0009
0011+  0000             sys_resume_proc  .EQU  $000a
0012+  0000             sys_terminate_proc .EQU  $000b
0013+  0000             sys_system       .EQU  $000c
0014+  0000             sys_fdc          .EQU  $000d
0015+  0000             text_org         .EQU  $0400
0002   0000             
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             ;; cat /etc/sh.conf
0005   0000             ;; cat > test.txt
0006   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007   0000             
0008   0400             .org text_org			; origin at 1024
0009   0400             
0010   0400             cmd_cat:
0011   0400 10 00 00    	mov a, 0
0012   0403 42 75 06    	mov [prog], a			; move tokennizer pointer to the beginning of the arguments area (address 0)
0013   0406 07 D6 04    	call get_token
0014   0409             
0015   0409 BC 78 06 07 	cmp byte[tok], tok_angle
0016   040D C6 34 04    	je cmd_cat_write
0017   0410             cmd_cat_read:
0018   0410 07 5C 06    	call _putback
0019   0413 07 7F 04    	call get_path
0020   0416 3B 79 06    	mov d, tokstr
0021   0419 FD 4F 88 0B 	mov di, transient_area
0022   041D 19 14       	mov al, 20
0023   041F 05 04       	syscall sys_filesystem				; read textfile into shell buffer
0024   0421 3B 88 0B    	mov d, transient_area
0025   0424 07 8D 09    	call _puts					; print textfile to stdout
0026   0427 07 D6 04    	call get_token
0027   042A 1D 78 06    	mov al, [tok]
0028   042D B9 14       	cmp al, tok_end
0029   042F C7 10 04    	jne cmd_cat_read
0030   0432 05 0B       	syscall sys_terminate_proc
0031   0434             cmd_cat_write:
0032   0434 07 D6 04    	call get_token
0033   0437 FD 4D 79 06 	mov si, tokstr
0034   043B FD 4F 88 0B 	mov di, transient_area
0035   043F 07 E5 07    	call _strcpy				; copy filename
0036   0442 3B 88 0B    	mov d, transient_area
0037   0445 19 05       	mov al, 5
0038   0447 05 04       	syscall sys_filesystem
0039   0449 05 0B       	syscall sys_terminate_proc
0040   044B             
0041   044B             
0042   044B             .include "lib/token.asm"
0001+  044B             toktyp_identifier  .equ 0
0002+  044B             toktyp_keyword     .equ 1
0003+  044B             toktyp_delimiter   .equ 2
0004+  044B             toktyp_string      .equ 3
0005+  044B             toktyp_char        .equ 4
0006+  044B             toktyp_numeric     .equ 5
0007+  044B             toktyp_end         .equ 6
0008+  044B             
0009+  044B             tok_null           .equ 0
0010+  044B             tok_fslash         .equ 1
0011+  044B             tok_times          .equ 2
0012+  044B             tok_plus           .equ 3
0013+  044B             tok_minus          .equ 4
0014+  044B             tok_dot            .equ 5
0015+  044B             tok_semi           .equ 6
0016+  044B             tok_angle          .equ 7
0017+  044B             tok_tilde          .equ 8
0018+  044B             tok_equal          .equ 9
0019+  044B             tok_colon          .equ 10
0020+  044B             tok_comma          .equ 11
0021+  044B             
0022+  044B             tok_end            .equ 20
0023+  044B             
0024+  044B             
0025+  044B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  044B             ;; read a full command argment from shell input buffer
0027+  044B             ;; argument is written into tokstr
0028+  044B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  044B             get_arg:
0030+  044B D7            push a
0031+  044C E2            push si
0032+  044D E3            push di
0033+  044E 19 00         mov al, 0
0034+  0450 3D 79 06      mov [tokstr], al      ; nullify tokstr string
0035+  0453 14 75 06      mov a, [prog]
0036+  0456 4D            mov si, a
0037+  0457 FD 4F 79 06   mov di, tokstr
0038+  045B             get_arg_skip_spaces:
0039+  045B F6            lodsb
0040+  045C 07 61 0B      call _isspace
0041+  045F C6 5B 04      je get_arg_skip_spaces
0042+  0462             get_arg_l0:
0043+  0462 B9 3B         cmp al, $3b        ; check if is ';'
0044+  0464 C6 71 04      je get_arg_end
0045+  0467 B9 00         cmp al, 0
0046+  0469 C6 71 04      je get_arg_end      ; check if end of input
0047+  046C F7            stosb
0048+  046D F6            lodsb
0049+  046E 0A 62 04      jmp get_arg_l0
0050+  0471             get_arg_end:
0051+  0471 19 00         mov al, 0
0052+  0473 F7            stosb
0053+  0474 D5 01 00      sub si, 1
0054+  0477 4E            mov a, si
0055+  0478 42 75 06      mov [prog], a    ; update pointer
0056+  047B F0            pop di
0057+  047C EF            pop si
0058+  047D E4            pop a
0059+  047E 09            ret
0060+  047F             
0061+  047F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  047F             ;; read a path formation from shell input buffer
0063+  047F             ;; path is written into tokstr
0064+  047F             ;; /usr/bin
0065+  047F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  047F             get_path:
0067+  047F D7            push a
0068+  0480 E2            push si
0069+  0481 E3            push di
0070+  0482 19 00         mov al, 0
0071+  0484 3D 79 06      mov [tokstr], al      ; nullify tokstr string
0072+  0487 14 75 06      mov a, [prog]
0073+  048A 4D            mov si, a
0074+  048B FD 4F 79 06   mov di, tokstr
0075+  048F             get_path_skip_spaces:
0076+  048F F6            lodsb
0077+  0490 07 61 0B      call _isspace
0078+  0493 C6 8F 04      je get_path_skip_spaces
0079+  0496             get_path_is_pathchar:
0080+  0496 F7            stosb
0081+  0497 F6            lodsb
0082+  0498 07 EB 0A      call _isalnum      ;check if is alphanumeric
0083+  049B C6 96 04      je get_path_is_pathchar
0084+  049E B9 2F         cmp al, '/'        ; check if is '/'
0085+  04A0 C6 96 04      je get_path_is_pathchar
0086+  04A3 19 00         mov al, 0
0087+  04A5 F7            stosb
0088+  04A6 D5 01 00      sub si, 1
0089+  04A9 4E            mov a, si
0090+  04AA 42 75 06      mov [prog], a    ; update pointer
0091+  04AD             get_path_end:
0092+  04AD F0            pop di
0093+  04AE EF            pop si
0094+  04AF E4            pop a
0095+  04B0 09            ret
0096+  04B1             
0097+  04B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  04B1             ;; read a line
0099+  04B1             ;; line is written into tokstr
0100+  04B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  04B1             get_line:
0102+  04B1 D7            push a
0103+  04B2 E2            push si
0104+  04B3 E3            push di
0105+  04B4 19 00         mov al, 0
0106+  04B6 3D 79 06      mov [tokstr], al      ; nullify tokstr string
0107+  04B9 14 75 06      mov a, [prog]
0108+  04BC 4D            mov si, a
0109+  04BD FD 4F 79 06   mov di, tokstr
0110+  04C1             get_line_l0:
0111+  04C1 F6            lodsb
0112+  04C2 B9 0A         cmp al, $0a    ; check for new line
0113+  04C4 C6 CB 04      je get_line_exit
0114+  04C7 F7            stosb
0115+  04C8 0A C1 04      jmp get_line_l0
0116+  04CB             get_line_exit:
0117+  04CB 19 00         mov al, 0
0118+  04CD F7            stosb
0119+  04CE 4E            mov a, si
0120+  04CF 42 75 06      mov [prog], a    ; update pointer
0121+  04D2 F0            pop di
0122+  04D3 EF            pop si
0123+  04D4 E4            pop a
0124+  04D5 09            ret
0125+  04D6             
0126+  04D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  04D6             ;; token parser
0128+  04D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  04D6             get_token:
0130+  04D6 D7            push a
0131+  04D7 DA            push d
0132+  04D8 E2            push si
0133+  04D9 E3            push di
0134+  04DA 19 00         mov al, 0
0135+  04DC 3D 79 06      mov [tokstr], al      ; nullify tokstr string
0136+  04DF 19 00         mov al, tok_null
0137+  04E1 3D 78 06      mov [tok], al        ; nullify token
0138+  04E4 14 75 06      mov a, [prog]
0139+  04E7 4D            mov si, a
0140+  04E8 FD 4F 79 06   mov di, tokstr
0141+  04EC             get_tok_skip_spaces:
0142+  04EC F6            lodsb
0143+  04ED 07 61 0B      call _isspace
0144+  04F0 C6 EC 04      je get_tok_skip_spaces
0145+  04F3 B9 00         cmp al, 0      ; check for end of input (null)
0146+  04F5 C6 DA 05      je get_token_end
0147+  04F8 B9 23         cmp al, '#'      ; comments!
0148+  04FA C6 08 06      je get_tok_comment
0149+  04FD 07 EB 0A      call _isalnum
0150+  0500 C6 E7 05      jz is_alphanumeric
0151+  0503             ; other token types
0152+  0503             get_token_slash:
0153+  0503 B9 2F         cmp al, '/'        ; check if '/'
0154+  0505 C7 1D 05      jne get_token_minus
0155+  0508 F7            stosb          ; store '/' into token string
0156+  0509 19 00         mov al, 0
0157+  050B F7            stosb          ; terminate token string
0158+  050C 19 01         mov al, tok_fslash
0159+  050E 3D 78 06      mov [tok], al      
0160+  0511 19 02         mov al, toktyp_delimiter
0161+  0513 3D 77 06      mov [toktyp], al
0162+  0516 4E            mov a, si
0163+  0517 42 75 06      mov [prog], a    ; update pointer
0164+  051A 0A 03 06      jmp get_token_return
0165+  051D             get_token_minus:
0166+  051D B9 2D         cmp al, '-'        ; check if '-'
0167+  051F C7 37 05      jne get_token_comma
0168+  0522 F7            stosb          ; store '-' into token string
0169+  0523 19 00         mov al, 0
0170+  0525 F7            stosb          ; terminate token string
0171+  0526 19 04         mov al, tok_minus
0172+  0528 3D 78 06      mov [tok], al      
0173+  052B 19 02         mov al, toktyp_delimiter
0174+  052D 3D 77 06      mov [toktyp], al
0175+  0530 4E            mov a, si
0176+  0531 42 75 06      mov [prog], a    ; update pointer
0177+  0534 0A 03 06      jmp get_token_return
0178+  0537             get_token_comma:
0179+  0537 B9 2C         cmp al, ','        ; check if ','
0180+  0539 C7 51 05      jne get_token_semi
0181+  053C F7            stosb          ; store ',' into token string
0182+  053D 19 00         mov al, 0
0183+  053F F7            stosb          ; terminate token string
0184+  0540 19 0B         mov al, tok_comma
0185+  0542 3D 78 06      mov [tok], al      
0186+  0545 19 02         mov al, toktyp_delimiter
0187+  0547 3D 77 06      mov [toktyp], al
0188+  054A 4E            mov a, si
0189+  054B 42 75 06      mov [prog], a    ; update pointer
0190+  054E 0A 03 06      jmp get_token_return
0191+  0551             get_token_semi:
0192+  0551 B9 3B         cmp al, $3b        ; check if ';'
0193+  0553 C7 6B 05      jne get_token_colon
0194+  0556 F7            stosb          ; store ';' into token string
0195+  0557 19 00         mov al, 0
0196+  0559 F7            stosb          ; terminate token string
0197+  055A 19 06         mov al, tok_semi
0198+  055C 3D 78 06      mov [tok], al      
0199+  055F 19 02         mov al, toktyp_delimiter
0200+  0561 3D 77 06      mov [toktyp], al
0201+  0564 4E            mov a, si
0202+  0565 42 75 06      mov [prog], a    ; update pointer
0203+  0568 0A 03 06      jmp get_token_return
0204+  056B             get_token_colon:
0205+  056B B9 3A         cmp al, $3a        ; check if ':'
0206+  056D C7 85 05      jne get_token_angle
0207+  0570 F7            stosb          ; store ':' into token string
0208+  0571 19 00         mov al, 0
0209+  0573 F7            stosb          ; terminate token string
0210+  0574 19 0A         mov al, tok_colon
0211+  0576 3D 78 06      mov [tok], al      
0212+  0579 19 02         mov al, toktyp_delimiter
0213+  057B 3D 77 06      mov [toktyp], al
0214+  057E 4E            mov a, si
0215+  057F 42 75 06      mov [prog], a    ; update pointer
0216+  0582 0A 03 06      jmp get_token_return
0217+  0585             get_token_angle:
0218+  0585 B9 3E         cmp al, $3e        ; check if '>'
0219+  0587 C7 9F 05      jne get_token_tilde
0220+  058A F7            stosb          ; store '>' into token string
0221+  058B 19 00         mov al, 0
0222+  058D F7            stosb          ; terminate token string
0223+  058E 19 07         mov al, tok_angle
0224+  0590 3D 78 06      mov [tok], al      
0225+  0593 19 02         mov al, toktyp_delimiter
0226+  0595 3D 77 06      mov [toktyp], al
0227+  0598 4E            mov a, si
0228+  0599 42 75 06      mov [prog], a    ; update pointer
0229+  059C 0A 03 06      jmp get_token_return
0230+  059F             get_token_tilde:
0231+  059F B9 7E         cmp al, '~'        ; check if '~'
0232+  05A1 C7 B9 05      jne get_token_equal
0233+  05A4 F7            stosb          ; store '~' into token string
0234+  05A5 19 00         mov al, 0
0235+  05A7 F7            stosb          ; terminate token string
0236+  05A8 19 08         mov al, tok_tilde
0237+  05AA 3D 78 06      mov [tok], al      
0238+  05AD 19 02         mov al, toktyp_delimiter
0239+  05AF 3D 77 06      mov [toktyp], al
0240+  05B2 4E            mov a, si
0241+  05B3 42 75 06      mov [prog], a    ; update pointer
0242+  05B6 0A 03 06      jmp get_token_return
0243+  05B9             get_token_equal:
0244+  05B9 B9 3D         cmp al, '='        ; check if '='
0245+  05BB C7 D3 05      jne get_token_skip
0246+  05BE F7            stosb          ; store '=' into token string
0247+  05BF 19 00         mov al, 0
0248+  05C1 F7            stosb          ; terminate token string
0249+  05C2 19 09         mov al, tok_equal
0250+  05C4 3D 78 06      mov [tok], al      
0251+  05C7 19 02         mov al, toktyp_delimiter
0252+  05C9 3D 77 06      mov [toktyp], al
0253+  05CC 4E            mov a, si
0254+  05CD 42 75 06      mov [prog], a    ; update pointer
0255+  05D0 0A 03 06      jmp get_token_return
0256+  05D3             get_token_skip:
0257+  05D3 4E            mov a, si
0258+  05D4 42 75 06      mov [prog], a    ; update pointer
0259+  05D7 0A 03 06      jmp get_token_return
0260+  05DA             get_token_end:        ; end of file token
0261+  05DA 19 14         mov al, tok_end
0262+  05DC 3D 78 06      mov [tok], al
0263+  05DF 19 06         mov al, toktyp_end
0264+  05E1 3D 77 06      mov [toktyp], al
0265+  05E4 0A 03 06      jmp get_token_return
0266+  05E7             is_alphanumeric:
0267+  05E7 F7            stosb
0268+  05E8 F6            lodsb
0269+  05E9 07 EB 0A      call _isalnum      ;check if is alphanumeric
0270+  05EC C6 E7 05      jz is_alphanumeric
0271+  05EF B9 2E         cmp al, $2e        ; check if is '.'
0272+  05F1 C6 E7 05      je is_alphanumeric
0273+  05F4 19 00         mov al, 0
0274+  05F6 F7            stosb
0275+  05F7 19 00         mov al, toktyp_identifier
0276+  05F9 3D 77 06      mov [toktyp], al
0277+  05FC D5 01 00      sub si, 1
0278+  05FF 4E            mov a, si
0279+  0600 42 75 06      mov [prog], a    ; update pointer
0280+  0603             get_token_return:
0281+  0603 F0            pop di
0282+  0604 EF            pop si
0283+  0605 E7            pop d
0284+  0606 E4            pop a
0285+  0607 09            ret
0286+  0608             get_tok_comment:
0287+  0608 F6            lodsb
0288+  0609 B9 0A         cmp al, $0a      ; new line
0289+  060B C7 08 06      jne get_tok_comment
0290+  060E 0A EC 04      jmp get_tok_skip_spaces
0291+  0611             
0292+  0611             
0293+  0611             get_number:
0294+  0611 D7            push a
0295+  0612 DA            push d
0296+  0613 E2            push si
0297+  0614 E3            push di
0298+  0615 19 00         mov al, 0
0299+  0617 3D 79 06      mov [tokstr], al      ; nullify tokstr string
0300+  061A 19 00         mov al, tok_null
0301+  061C 3D 78 06      mov [tok], al        ; nullify token
0302+  061F 14 75 06      mov a, [prog]
0303+  0622 4D            mov si, a
0304+  0623 FD 4F 79 06   mov di, tokstr
0305+  0627             get_number_skip_spaces:
0306+  0627 F6            lodsb
0307+  0628 07 61 0B      call _isspace
0308+  062B C6 27 06      je get_number_skip_spaces
0309+  062E B9 00         cmp al, 0      ; check for end of input (null)
0310+  0630 C7 40 06      jne get_number_l0
0311+  0633 19 14         mov al, tok_end
0312+  0635 3D 78 06      mov [tok], al
0313+  0638 19 06         mov al, toktyp_end
0314+  063A 3D 77 06      mov [toktyp], al
0315+  063D 0A 57 06      jmp get_number_return
0316+  0640             get_number_l0:
0317+  0640 F7            stosb
0318+  0641 F6            lodsb
0319+  0642 07 F5 0A      call _isdigit      ;check if is numeric
0320+  0645 C6 40 06      jz get_number_l0
0321+  0648 19 00         mov al, 0
0322+  064A F7            stosb
0323+  064B 19 05         mov al, toktyp_numeric
0324+  064D 3D 77 06      mov [toktyp], al
0325+  0650 D5 01 00      sub si, 1
0326+  0653 4E            mov a, si
0327+  0654 42 75 06      mov [prog], a    ; update pointer
0328+  0657             get_number_return:
0329+  0657 F0            pop di
0330+  0658 EF            pop si
0331+  0659 E7            pop d
0332+  065A E4            pop a
0333+  065B 09            ret
0334+  065C             
0335+  065C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  065C             ;; put back token
0337+  065C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0338+  065C             _putback:
0339+  065C D7            push a
0340+  065D E2            push si
0341+  065E FD 4D 79 06   mov si, tokstr  
0342+  0662             _putback_loop:
0343+  0662 F6            lodsb
0344+  0663 B9 00         cmp al, 0
0345+  0665 C6 72 06      je _putback_end
0346+  0668 14 75 06      mov a, [prog]
0347+  066B 7D            dec a
0348+  066C 42 75 06      mov [prog], a      ; update pointer
0349+  066F 0A 62 06      jmp _putback_loop
0350+  0672             _putback_end:
0351+  0672 EF            pop si
0352+  0673 E4            pop a
0353+  0674 09            ret
0354+  0675             
0355+  0675             
0356+  0675             
0357+  0675             
0358+  0675 00 00       prog:      .dw 0          ; pointer to current position in buffer
0359+  0677             
0360+  0677 00          toktyp:    .db 0          ; token type symbol
0361+  0678 00          tok:       .db 0          ; current token symbol
0362+  0679 00 00 00 00 tokstr:    .fill 256, 0   ; token as a string
0362+  067D 00 00 00 00 
0362+  0681 00 00 00 00 
0362+  0685 00 00 00 00 
0362+  0689 00 00 00 00 
0362+  068D 00 00 00 00 
0362+  0691 00 00 00 00 
0362+  0695 00 00 00 00 
0362+  0699 00 00 00 00 
0362+  069D 00 00 00 00 
0362+  06A1 00 00 00 00 
0362+  06A5 00 00 00 00 
0362+  06A9 00 00 00 00 
0362+  06AD 00 00 00 00 
0362+  06B1 00 00 00 00 
0362+  06B5 00 00 00 00 
0362+  06B9 00 00 00 00 
0362+  06BD 00 00 00 00 
0362+  06C1 00 00 00 00 
0362+  06C5 00 00 00 00 
0362+  06C9 00 00 00 00 
0362+  06CD 00 00 00 00 
0362+  06D1 00 00 00 00 
0362+  06D5 00 00 00 00 
0362+  06D9 00 00 00 00 
0362+  06DD 00 00 00 00 
0362+  06E1 00 00 00 00 
0362+  06E5 00 00 00 00 
0362+  06E9 00 00 00 00 
0362+  06ED 00 00 00 00 
0362+  06F1 00 00 00 00 
0362+  06F5 00 00 00 00 
0362+  06F9 00 00 00 00 
0362+  06FD 00 00 00 00 
0362+  0701 00 00 00 00 
0362+  0705 00 00 00 00 
0362+  0709 00 00 00 00 
0362+  070D 00 00 00 00 
0362+  0711 00 00 00 00 
0362+  0715 00 00 00 00 
0362+  0719 00 00 00 00 
0362+  071D 00 00 00 00 
0362+  0721 00 00 00 00 
0362+  0725 00 00 00 00 
0362+  0729 00 00 00 00 
0362+  072D 00 00 00 00 
0362+  0731 00 00 00 00 
0362+  0735 00 00 00 00 
0362+  0739 00 00 00 00 
0362+  073D 00 00 00 00 
0362+  0741 00 00 00 00 
0362+  0745 00 00 00 00 
0362+  0749 00 00 00 00 
0362+  074D 00 00 00 00 
0362+  0751 00 00 00 00 
0362+  0755 00 00 00 00 
0362+  0759 00 00 00 00 
0362+  075D 00 00 00 00 
0362+  0761 00 00 00 00 
0362+  0765 00 00 00 00 
0362+  0769 00 00 00 00 
0362+  076D 00 00 00 00 
0362+  0771 00 00 00 00 
0362+  0775 00 00 00 00 
0043   0779             .include "lib/stdio.asm"
0001+  0779             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0779             ; stdio.s
0003+  0779             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0779             .include "lib/string.asm"
0001++ 0779             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0779             ; string.s
0003++ 0779             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0779             
0005++ 0779             
0006++ 0779             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0779             ; _strrev
0008++ 0779             ; reverse a string
0009++ 0779             ; d = string address
0010++ 0779             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0779             ; 01234
0012++ 0779             _strrev:
0013++ 0779 4B          	pusha
0014++ 077A 07 C0 07    	call _strlen	; length in c
0015++ 077D 12          	mov a, c
0016++ 077E AF 01 00    	cmp a, 1
0017++ 0781 D0 9B 07    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 0784 7D          	dec a
0019++ 0785 FD 4E       	mov si, d	; beginning of string
0020++ 0787 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0789 59          	add d, a	; end of string
0022++ 078A 12          	mov a, c
0023++ 078B FD 9B       	shr a		; divide by 2
0024++ 078D 39          	mov c, a	; c now counts the steps
0025++ 078E             _strrev_l0:
0026++ 078E 32          	mov bl, [d]	; save load right-side char into bl
0027++ 078F F6          	lodsb		; load left-side char into al; increase si
0028++ 0790 3E          	mov [d], al	; store left char into right side
0029++ 0791 1B          	mov al, bl
0030++ 0792 F7          	stosb		; store right-side char into left-side; increase di
0031++ 0793 7E          	dec c
0032++ 0794 7F          	dec d
0033++ 0795 C2 00 00    	cmp c, 0
0034++ 0798 C7 8E 07    	jne _strrev_l0
0035++ 079B             _strrev_end:
0036++ 079B 4C          	popa
0037++ 079C 09          	ret
0038++ 079D             	
0039++ 079D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 079D             ; _strchr
0041++ 079D             ; search string in d for char in al
0042++ 079D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 079D             _strchr:
0044++ 079D             _strchr_l0:
0045++ 079D 32          	mov bl, [d]
0046++ 079E C1 00       	cmp bl, 0
0047++ 07A0 C6 AB 07    	je _strchr_end
0048++ 07A3 BA          	cmp al, bl
0049++ 07A4 C6 AB 07    	je _strchr_end
0050++ 07A7 79          	inc d
0051++ 07A8 0A 9D 07    	jmp _strchr_l0
0052++ 07AB             _strchr_end:
0053++ 07AB 1B          	mov al, bl
0054++ 07AC 09          	ret
0055++ 07AD             
0056++ 07AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 07AD             ; _strstr
0058++ 07AD             ; find sub-string
0059++ 07AD             ; str1 in si
0060++ 07AD             ; str2 in di
0061++ 07AD             ; si points to end of source string
0062++ 07AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 07AD             _strstr:
0064++ 07AD DB          	push al
0065++ 07AE DA          	push d
0066++ 07AF E3          	push di
0067++ 07B0             _strstr_loop:
0068++ 07B0 F3          	cmpsb					; compare a byte of the strings
0069++ 07B1 C7 BC 07    	jne _strstr_ret
0070++ 07B4 FC 00 00    	lea d, [di + 0]
0071++ 07B7 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 07B9 C7 B0 07    	jne _strstr_loop				; equal chars but not at end
0073++ 07BC             _strstr_ret:
0074++ 07BC F0          	pop di
0075++ 07BD E7          	pop d
0076++ 07BE E8          	pop al
0077++ 07BF 09          	ret
0078++ 07C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 07C0             ; length of null terminated string
0080++ 07C0             ; result in c
0081++ 07C0             ; pointer in d
0082++ 07C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 07C0             _strlen:
0084++ 07C0 DA          	push d
0085++ 07C1 38 00 00    	mov c, 0
0086++ 07C4             _strlen_l1:
0087++ 07C4 BD 00       	cmp byte [d], 0
0088++ 07C6 C6 CE 07    	je _strlen_ret
0089++ 07C9 79          	inc d
0090++ 07CA 78          	inc c
0091++ 07CB 0A C4 07    	jmp _strlen_l1
0092++ 07CE             _strlen_ret:
0093++ 07CE E7          	pop d
0094++ 07CF 09          	ret
0095++ 07D0             
0096++ 07D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 07D0             ; strcmp
0098++ 07D0             ; compare two strings
0099++ 07D0             ; str1 in si
0100++ 07D0             ; str2 in di
0101++ 07D0             ; create a string compairon instrucion ?????
0102++ 07D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 07D0             _strcmp:
0104++ 07D0 DB          	push al
0105++ 07D1 DA          	push d
0106++ 07D2 E3          	push di
0107++ 07D3 E2          	push si
0108++ 07D4             _strcmp_loop:
0109++ 07D4 F3          	cmpsb					; compare a byte of the strings
0110++ 07D5 C7 E0 07    	jne _strcmp_ret
0111++ 07D8 FB FF FF    	lea d, [si +- 1]
0112++ 07DB BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 07DD C7 D4 07    	jne _strcmp_loop				; equal chars but not at end
0114++ 07E0             _strcmp_ret:
0115++ 07E0 EF          	pop si
0116++ 07E1 F0          	pop di
0117++ 07E2 E7          	pop d
0118++ 07E3 E8          	pop al
0119++ 07E4 09          	ret
0120++ 07E5             
0121++ 07E5             
0122++ 07E5             ; strcpy
0123++ 07E5             ; copy null terminated string from si to di
0124++ 07E5             ; source in si
0125++ 07E5             ; destination in di
0126++ 07E5             _strcpy:
0127++ 07E5 E2          	push si
0128++ 07E6 E3          	push di
0129++ 07E7 DB          	push al
0130++ 07E8             _strcpy_l1:
0131++ 07E8 F6          	lodsb
0132++ 07E9 F7          	stosb
0133++ 07EA B9 00       	cmp al, 0
0134++ 07EC C7 E8 07    	jne _strcpy_l1
0135++ 07EF             _strcpy_end:
0136++ 07EF E8          	pop al
0137++ 07F0 F0          	pop di
0138++ 07F1 EF          	pop si
0139++ 07F2 09          	ret
0140++ 07F3             
0141++ 07F3             ; strcat
0142++ 07F3             ; concatenate a null terminated string into string at di, from string at si
0143++ 07F3             ; source in si
0144++ 07F3             ; destination in di
0145++ 07F3             _strcat:
0146++ 07F3 E2          	push si
0147++ 07F4 E3          	push di
0148++ 07F5 D7          	push a
0149++ 07F6 DA          	push d
0150++ 07F7 50          	mov a, di
0151++ 07F8 3C          	mov d, a
0152++ 07F9             _strcat_goto_end_l1:
0153++ 07F9 BD 00       	cmp byte[d], 0
0154++ 07FB C6 02 08    	je _strcat_start
0155++ 07FE 79          	inc d
0156++ 07FF 0A F9 07    	jmp _strcat_goto_end_l1
0157++ 0802             _strcat_start:
0158++ 0802 FD 50       	mov di, d
0159++ 0804             _strcat_l1:
0160++ 0804 F6          	lodsb
0161++ 0805 F7          	stosb
0162++ 0806 B9 00       	cmp al, 0
0163++ 0808 C7 04 08    	jne _strcat_l1
0164++ 080B             _strcat_end:
0165++ 080B E7          	pop d
0166++ 080C E4          	pop a
0167++ 080D F0          	pop di
0168++ 080E EF          	pop si
0169++ 080F 09          	ret
0170++ 0810             
0171++ 0810             
0005+  0810             
0006+  0810             
0007+  0810             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  0810             ; convert ascii 'o'..'f' to integer 0..15
0009+  0810             ; ascii in bl
0010+  0810             ; result in al
0011+  0810             ; ascii for f = 0100 0110
0012+  0810             ; ascii for 9 = 0011 1001
0013+  0810             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  0810             hex_ascii_encode:
0015+  0810 1B            mov al, bl
0016+  0811 93 40         test al, $40        ; test if letter or number
0017+  0813 C7 19 08      jnz hex_letter
0018+  0816 87 0F         and al, $0f        ; get number
0019+  0818 09            ret
0020+  0819             hex_letter:
0021+  0819 87 0F         and al, $0f        ; get letter
0022+  081B 6A 09         add al, 9
0023+  081D 09            ret
0024+  081E             
0025+  081E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  081E             ; atoi
0027+  081E             ; 2 letter hex string in b
0028+  081E             ; 8bit integer returned in al
0029+  081E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  081E             _atoi:
0031+  081E D8            push b
0032+  081F 07 10 08      call hex_ascii_encode      ; convert bl to 4bit code in al
0033+  0822 30            mov bl, bh
0034+  0823 DB            push al          ; save a
0035+  0824 07 10 08      call hex_ascii_encode
0036+  0827 EA            pop bl  
0037+  0828 FD 9E 04      shl al, 4
0038+  082B 8C            or al, bl
0039+  082C E5            pop b
0040+  082D 09            ret  
0041+  082E             
0042+  082E             
0043+  082E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  082E             ; scanf
0045+  082E             ; no need for explanations!
0046+  082E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  082E             scanf:
0048+  082E 09            ret
0049+  082F             
0050+  082F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  082F             ; itoa
0052+  082F             ; 8bit value in bl
0053+  082F             ; 2 byte ascii result in a
0054+  082F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  082F             _itoa:
0056+  082F DA            push d
0057+  0830 D8            push b
0058+  0831 A7 00         mov bh, 0
0059+  0833 FD A4 04      shr bl, 4  
0060+  0836 74            mov d, b
0061+  0837 1F C9 0A      mov al, [d + s_hex_digits]
0062+  083A 23            mov ah, al
0063+  083B               
0064+  083B E5            pop b
0065+  083C D8            push b
0066+  083D A7 00         mov bh, 0
0067+  083F FD 87 0F      and bl, $0f
0068+  0842 74            mov d, b
0069+  0843 1F C9 0A      mov al, [d + s_hex_digits]
0070+  0846 E5            pop b
0071+  0847 E7            pop d
0072+  0848 09            ret
0073+  0849             
0074+  0849             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  0849             ; hex string to binary
0076+  0849             ; di = destination address
0077+  0849             ; si = source
0078+  0849             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  0849             _hex_to_int:
0080+  0849             _hex_to_int_l1:
0081+  0849 F6            lodsb          ; load from [si] to al
0082+  084A B9 00         cmp al, 0        ; check if ascii 0
0083+  084C C6 59 08      jz _hex_to_int_ret
0084+  084F 36            mov bh, al
0085+  0850 F6            lodsb
0086+  0851 2F            mov bl, al
0087+  0852 07 1E 08      call _atoi        ; convert ascii byte in b to int (to al)
0088+  0855 F7            stosb          ; store al to [di]
0089+  0856 0A 49 08      jmp _hex_to_int_l1
0090+  0859             _hex_to_int_ret:
0091+  0859 09            ret    
0092+  085A             
0093+  085A             
0094+  085A             
0095+  085A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  085A             ; getchar
0097+  085A             ; char in ah
0098+  085A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  085A             getch:
0100+  085A DB            push al
0101+  085B             getch_retry:
0102+  085B 19 01         mov al, 1
0103+  085D 05 03         syscall sys_io      ; receive in ah
0104+  085F E8            pop al
0105+  0860 09            ret
0106+  0861             
0107+  0861             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  0861             ; putchar
0109+  0861             ; char in ah
0110+  0861             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0861             _putchar:
0112+  0861 DB            push al
0113+  0862 19 00         mov al, 0
0114+  0864 05 03         syscall sys_io      ; char in ah
0115+  0866 E8            pop al
0116+  0867 09            ret
0117+  0868             
0118+  0868             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  0868             ;; input a string
0120+  0868             ;; terminates with null
0121+  0868             ;; pointer in d
0122+  0868             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  0868             _gets:
0124+  0868 D7            push a
0125+  0869 DA            push d
0126+  086A             _gets_loop:
0127+  086A 19 01         mov al, 1
0128+  086C 05 03         syscall sys_io      ; receive in ah
0129+  086E 76 1B         cmp ah, 27
0130+  0870 C6 91 08      je _gets_ansi_esc
0131+  0873 76 0A         cmp ah, $0a        ; lf
0132+  0875 C6 ED 08      je _gets_end
0133+  0878 76 0D         cmp ah, $0d        ; cr
0134+  087A C6 ED 08      je _gets_end
0135+  087D 76 5C         cmp ah, $5c        ; '\\'
0136+  087F C6 B3 08      je _gets_escape
0137+  0882 76 08         cmp ah, $08      ; check for backspace
0138+  0884 C6 8D 08      je _gets_backspace
0139+  0887 1A            mov al, ah
0140+  0888 3E            mov [d], al
0141+  0889 79            inc d
0142+  088A 0A 6A 08      jmp _gets_loop
0143+  088D             _gets_backspace:
0144+  088D 7F            dec d
0145+  088E 0A 6A 08      jmp _gets_loop
0146+  0891             _gets_ansi_esc:
0147+  0891 19 01         mov al, 1
0148+  0893 05 03         syscall sys_io        ; receive in ah without echo
0149+  0895 76 5B         cmp ah, '['
0150+  0897 C7 6A 08      jne _gets_loop
0151+  089A 19 01         mov al, 1
0152+  089C 05 03         syscall sys_io          ; receive in ah without echo
0153+  089E 76 64         cmp ah, 'd'
0154+  08A0 C6 AB 08      je _gets_left_arrow
0155+  08A3 76 63         cmp ah, 'c'
0156+  08A5 C6 AF 08      je _gets_right_arrow
0157+  08A8 0A 6A 08      jmp _gets_loop
0158+  08AB             _gets_left_arrow:
0159+  08AB 7F            dec d
0160+  08AC 0A 6A 08      jmp _gets_loop
0161+  08AF             _gets_right_arrow:
0162+  08AF 79            inc d
0163+  08B0 0A 6A 08      jmp _gets_loop
0164+  08B3             _gets_escape:
0165+  08B3 19 01         mov al, 1
0166+  08B5 05 03         syscall sys_io      ; receive in ah
0167+  08B7 76 6E         cmp ah, 'n'
0168+  08B9 C6 D8 08      je _gets_lf
0169+  08BC 76 72         cmp ah, 'r'
0170+  08BE C6 DF 08      je _gets_cr
0171+  08C1 76 30         cmp ah, '0'
0172+  08C3 C6 E6 08      je _gets_null
0173+  08C6 76 5C         cmp ah, $5c  ; '\'
0174+  08C8 C6 D1 08      je _gets_slash
0175+  08CB 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  08CC 3E            mov [d], al
0177+  08CD 79            inc d
0178+  08CE 0A 6A 08      jmp _gets_loop
0179+  08D1             _gets_slash:
0180+  08D1 19 5C         mov al, $5c
0181+  08D3 3E            mov [d], al
0182+  08D4 79            inc d
0183+  08D5 0A 6A 08      jmp _gets_loop
0184+  08D8             _gets_lf:
0185+  08D8 19 0A         mov al, $0a
0186+  08DA 3E            mov [d], al
0187+  08DB 79            inc d
0188+  08DC 0A 6A 08      jmp _gets_loop
0189+  08DF             _gets_cr:
0190+  08DF 19 0D         mov al, $0d
0191+  08E1 3E            mov [d], al
0192+  08E2 79            inc d
0193+  08E3 0A 6A 08      jmp _gets_loop
0194+  08E6             _gets_null:
0195+  08E6 19 00         mov al, $00
0196+  08E8 3E            mov [d], al
0197+  08E9 79            inc d
0198+  08EA 0A 6A 08      jmp _gets_loop
0199+  08ED             _gets_end:
0200+  08ED 19 00         mov al, 0
0201+  08EF 3E            mov [d], al        ; terminate string
0202+  08F0 E7            pop d
0203+  08F1 E4            pop a
0204+  08F2 09            ret
0205+  08F3             
0206+  08F3             
0207+  08F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  08F3             ;; input text
0209+  08F3             ;; terminated with ctrl+d
0210+  08F3             ;; pointer in d
0211+  08F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  08F3             _gettxt:
0213+  08F3 D7            push a
0214+  08F4 DA            push d
0215+  08F5             _gettxt_loop:
0216+  08F5 19 01         mov al, 1
0217+  08F7 05 03         syscall sys_io      ; receive in ah
0218+  08F9 76 04         cmp ah, 4      ; eot
0219+  08FB C6 34 09      je _gettxt_end
0220+  08FE 76 08         cmp ah, $08      ; check for backspace
0221+  0900 C6 30 09      je _gettxt_backspace
0222+  0903 76 5C         cmp ah, $5c        ; '\'
0223+  0905 C6 0E 09      je _gettxt_escape
0224+  0908 1A            mov al, ah
0225+  0909 3E            mov [d], al
0226+  090A 79            inc d
0227+  090B 0A F5 08      jmp _gettxt_loop
0228+  090E             _gettxt_escape:
0229+  090E 19 01         mov al, 1
0230+  0910 05 03         syscall sys_io      ; receive in ah
0231+  0912 76 6E         cmp ah, 'n'
0232+  0914 C6 22 09      je _gettxt_lf
0233+  0917 76 72         cmp ah, 'r'
0234+  0919 C6 29 09      je _gettxt_cr
0235+  091C 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  091D 3E            mov [d], al
0237+  091E 79            inc d
0238+  091F 0A F5 08      jmp _gettxt_loop
0239+  0922             _gettxt_lf:
0240+  0922 19 0A         mov al, $0a
0241+  0924 3E            mov [d], al
0242+  0925 79            inc d
0243+  0926 0A F5 08      jmp _gettxt_loop
0244+  0929             _gettxt_cr:
0245+  0929 19 0D         mov al, $0d
0246+  092B 3E            mov [d], al
0247+  092C 79            inc d
0248+  092D 0A F5 08      jmp _gettxt_loop
0249+  0930             _gettxt_backspace:
0250+  0930 7F            dec d
0251+  0931 0A F5 08      jmp _gettxt_loop
0252+  0934             _gettxt_end:
0253+  0934 19 00         mov al, 0
0254+  0936 3E            mov [d], al        ; terminate string
0255+  0937 E7            pop d
0256+  0938 E4            pop a
0257+  0939 09            ret
0258+  093A             
0259+  093A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  093A             ; print new line
0261+  093A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  093A             printnl:
0263+  093A D7            push a
0264+  093B 10 00 0A      mov a, $0a00
0265+  093E 05 03         syscall sys_io
0266+  0940 10 00 0D      mov a, $0d00
0267+  0943 05 03         syscall sys_io
0268+  0945 E4            pop a
0269+  0946 09            ret
0270+  0947             
0271+  0947             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  0947             ; _strtoint
0273+  0947             ; 4 digit hex string number in d
0274+  0947             ; integer returned in a
0275+  0947             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  0947             _strtointx:
0277+  0947 D8            push b
0278+  0948 32            mov bl, [d]
0279+  0949 37            mov bh, bl
0280+  094A 33 01 00      mov bl, [d + 1]
0281+  094D 07 1E 08      call _atoi        ; convert to int in al
0282+  0950 23            mov ah, al        ; move to ah
0283+  0951 33 02 00      mov bl, [d + 2]
0284+  0954 37            mov bh, bl
0285+  0955 33 03 00      mov bl, [d + 3]
0286+  0958 07 1E 08      call _atoi        ; convert to int in al
0287+  095B E5            pop b
0288+  095C 09            ret
0289+  095D             
0290+  095D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  095D             ; _strtoint
0292+  095D             ; 5 digit base10 string number in d
0293+  095D             ; integer returned in a
0294+  095D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  095D             _strtoint:
0296+  095D E2            push si
0297+  095E D8            push b
0298+  095F D9            push c
0299+  0960 DA            push d
0300+  0961 07 C0 07      call _strlen      ; get string length in c
0301+  0964 7E            dec c
0302+  0965 FD 4E         mov si, d
0303+  0967 12            mov a, c
0304+  0968 FD 99         shl a
0305+  096A 3B E1 0A      mov d, table_power
0306+  096D 59            add d, a
0307+  096E 38 00 00      mov c, 0
0308+  0971             _strtoint_l0:
0309+  0971 F6            lodsb      ; load ascii to al
0310+  0972 B9 00         cmp al, 0
0311+  0974 C6 87 09      je _strtoint_end
0312+  0977 6F 30         sub al, $30    ; make into integer
0313+  0979 22 00         mov ah, 0
0314+  097B 2A            mov b, [d]
0315+  097C AC            mul a, b      ; result in b since it fits in 16bits
0316+  097D 11            mov a, b
0317+  097E 28            mov b, c
0318+  097F 54            add a, b
0319+  0980 39            mov c, a
0320+  0981 63 02 00      sub d, 2
0321+  0984 0A 71 09      jmp _strtoint_l0
0322+  0987             _strtoint_end:
0323+  0987 12            mov a, c
0324+  0988 E7            pop d
0325+  0989 E6            pop c
0326+  098A E5            pop b
0327+  098B EF            pop si
0328+  098C 09            ret
0329+  098D             
0330+  098D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  098D             ; print null terminated string
0332+  098D             ; pointer in d
0333+  098D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  098D             _puts:
0335+  098D D7            push a
0336+  098E DA            push d
0337+  098F             _puts_l1:
0338+  098F 1E            mov al, [d]
0339+  0990 B9 00         cmp al, 0
0340+  0992 C6 9E 09      jz _puts_end
0341+  0995 23            mov ah, al
0342+  0996 19 00         mov al, 0
0343+  0998 05 03         syscall sys_io
0344+  099A 79            inc d
0345+  099B 0A 8F 09      jmp _puts_l1
0346+  099E             _puts_end:
0347+  099E E7            pop d
0348+  099F E4            pop a
0349+  09A0 09            ret
0350+  09A1             
0351+  09A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  09A1             ; print n size string
0353+  09A1             ; pointer in d
0354+  09A1             ; size in c
0355+  09A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  09A1             _putsn:
0357+  09A1 DB            push al
0358+  09A2 DA            push d
0359+  09A3 D9            push c
0360+  09A4             _putsn_l0:
0361+  09A4 1E            mov al, [d]
0362+  09A5 23            mov ah, al
0363+  09A6 19 00         mov al, 0
0364+  09A8 05 03         syscall sys_io
0365+  09AA 79            inc d
0366+  09AB 7E            dec c  
0367+  09AC C2 00 00      cmp c, 0
0368+  09AF C7 A4 09      jne _putsn_l0
0369+  09B2             _putsn_end:
0370+  09B2 E6            pop c
0371+  09B3 E7            pop d
0372+  09B4 E8            pop al
0373+  09B5 09            ret
0374+  09B6             
0375+  09B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  09B6             ; print 16bit decimal number
0377+  09B6             ; input number in a
0378+  09B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  09B6             print_u16d:
0380+  09B6 D7            push a
0381+  09B7 D8            push b
0382+  09B8 FD D8         push g
0383+  09BA 26 10 27      mov b, 10000
0384+  09BD AE            div a, b      ; get 10000's coeff.
0385+  09BE 07 E2 09      call print_number
0386+  09C1 11            mov a, b
0387+  09C2 26 E8 03      mov b, 1000
0388+  09C5 AE            div a, b      ; get 1000's coeff.
0389+  09C6 07 E2 09      call print_number
0390+  09C9 11            mov a, b
0391+  09CA 26 64 00      mov b, 100
0392+  09CD AE            div a, b
0393+  09CE 07 E2 09      call print_number
0394+  09D1 11            mov a, b
0395+  09D2 26 0A 00      mov b, 10
0396+  09D5 AE            div a, b
0397+  09D6 07 E2 09      call print_number
0398+  09D9 1B            mov al, bl      ; 1's coeff in bl
0399+  09DA 07 E2 09      call print_number
0400+  09DD FD F1         pop g
0401+  09DF E5            pop b
0402+  09E0 E4            pop a
0403+  09E1 09            ret
0404+  09E2             
0405+  09E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  09E2             ; print al
0407+  09E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  09E2             print_number:
0409+  09E2 6A 30         add al, $30
0410+  09E4 23            mov ah, al
0411+  09E5 07 61 08      call _putchar
0412+  09E8 09            ret
0413+  09E9             
0414+  09E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  09E9             ; print 16bit hex integer
0416+  09E9             ; integer value in reg b
0417+  09E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  09E9             print_u16x:
0419+  09E9 D7            push a
0420+  09EA D8            push b
0421+  09EB DD            push bl
0422+  09EC 30            mov bl, bh
0423+  09ED 07 2F 08      call _itoa        ; convert bh to char in a
0424+  09F0 2F            mov bl, al        ; save al
0425+  09F1 19 00         mov al, 0
0426+  09F3 05 03         syscall sys_io        ; display ah
0427+  09F5 24            mov ah, bl        ; retrieve al
0428+  09F6 19 00         mov al, 0
0429+  09F8 05 03         syscall sys_io        ; display al
0430+  09FA             
0431+  09FA EA            pop bl
0432+  09FB 07 2F 08      call _itoa        ; convert bh to char in a
0433+  09FE 2F            mov bl, al        ; save al
0434+  09FF 19 00         mov al, 0
0435+  0A01 05 03         syscall sys_io        ; display ah
0436+  0A03 24            mov ah, bl        ; retrieve al
0437+  0A04 19 00         mov al, 0
0438+  0A06 05 03         syscall sys_io        ; display al
0439+  0A08             
0440+  0A08 E5            pop b
0441+  0A09 E4            pop a
0442+  0A0A 09            ret
0443+  0A0B             
0444+  0A0B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  0A0B             ; input 16bit hex integer
0446+  0A0B             ; read 16bit integer into a
0447+  0A0B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  0A0B             scan_u16x:
0449+  0A0B F8 10 00      enter 16
0450+  0A0E D8            push b
0451+  0A0F DA            push d
0452+  0A10             
0453+  0A10 FA F1 FF      lea d, [bp + -15]
0454+  0A13 07 68 08      call _gets        ; get number
0455+  0A16             
0456+  0A16 32            mov bl, [d]
0457+  0A17 37            mov bh, bl
0458+  0A18 33 01 00      mov bl, [d + 1]
0459+  0A1B 07 1E 08      call _atoi        ; convert to int in al
0460+  0A1E 23            mov ah, al        ; move to ah
0461+  0A1F             
0462+  0A1F 33 02 00      mov bl, [d + 2]
0463+  0A22 37            mov bh, bl
0464+  0A23 33 03 00      mov bl, [d + 3]
0465+  0A26 07 1E 08      call _atoi        ; convert to int in al
0466+  0A29             
0467+  0A29 E7            pop d
0468+  0A2A E5            pop b
0469+  0A2B F9            leave
0470+  0A2C 09            ret
0471+  0A2D             
0472+  0A2D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  0A2D             ; print 8bit hex integer
0474+  0A2D             ; integer value in reg bl
0475+  0A2D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0A2D             print_u8x:
0477+  0A2D D7            push a
0478+  0A2E DD            push bl
0479+  0A2F             
0480+  0A2F 07 2F 08      call _itoa        ; convert bl to char in a
0481+  0A32 2F            mov bl, al        ; save al
0482+  0A33 19 00         mov al, 0
0483+  0A35 05 03         syscall sys_io        ; display ah
0484+  0A37 24            mov ah, bl        ; retrieve al
0485+  0A38 19 00         mov al, 0
0486+  0A3A 05 03         syscall sys_io        ; display al
0487+  0A3C             
0488+  0A3C EA            pop bl
0489+  0A3D E4            pop a
0490+  0A3E 09            ret
0491+  0A3F             
0492+  0A3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  0A3F             ; print 8bit decimal unsigned number
0494+  0A3F             ; input number in al
0495+  0A3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  0A3F             print_u8d:
0497+  0A3F D7            push a
0498+  0A40 D8            push b
0499+  0A41 FD D8         push g
0500+  0A43 22 00         mov ah, 0
0501+  0A45 26 64 00      mov b, 100
0502+  0A48 AE            div a, b
0503+  0A49 D8            push b      ; save remainder
0504+  0A4A B9 00         cmp al, 0
0505+  0A4C C6 56 0A      je skip100
0506+  0A4F 6A 30         add al, $30
0507+  0A51 23            mov ah, al
0508+  0A52 19 00         mov al, 0
0509+  0A54 05 03         syscall sys_io  ; print coeff
0510+  0A56             skip100:
0511+  0A56 E4            pop a
0512+  0A57 22 00         mov ah, 0
0513+  0A59 26 0A 00      mov b, 10
0514+  0A5C AE            div a, b
0515+  0A5D D8            push b      ; save remainder
0516+  0A5E B9 00         cmp al, 0
0517+  0A60 C6 6A 0A      je skip10
0518+  0A63 6A 30         add al, $30
0519+  0A65 23            mov ah, al
0520+  0A66 19 00         mov al, 0
0521+  0A68 05 03         syscall sys_io  ; print coeff
0522+  0A6A             skip10:
0523+  0A6A E4            pop a
0524+  0A6B 1B            mov al, bl
0525+  0A6C 6A 30         add al, $30
0526+  0A6E 23            mov ah, al
0527+  0A6F 19 00         mov al, 0
0528+  0A71 05 03         syscall sys_io  ; print coeff
0529+  0A73 FD F1         pop g
0530+  0A75 E5            pop b
0531+  0A76 E4            pop a
0532+  0A77 09            ret
0533+  0A78             
0534+  0A78             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  0A78             ; input 8bit hex integer
0536+  0A78             ; read 8bit integer into al
0537+  0A78             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  0A78             scan_u8x:
0539+  0A78 F8 04 00      enter 4
0540+  0A7B D8            push b
0541+  0A7C DA            push d
0542+  0A7D             
0543+  0A7D FA FD FF      lea d, [bp + -3]
0544+  0A80 07 68 08      call _gets        ; get number
0545+  0A83             
0546+  0A83 32            mov bl, [d]
0547+  0A84 37            mov bh, bl
0548+  0A85 33 01 00      mov bl, [d + 1]
0549+  0A88 07 1E 08      call _atoi        ; convert to int in al
0550+  0A8B             
0551+  0A8B E7            pop d
0552+  0A8C E5            pop b
0553+  0A8D F9            leave
0554+  0A8E 09            ret
0555+  0A8F             
0556+  0A8F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  0A8F             ; input decimal number
0558+  0A8F             ; result in a
0559+  0A8F             ; 655'\0'
0560+  0A8F             ; low--------high
0561+  0A8F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  0A8F             scan_u16d:
0563+  0A8F F8 08 00      enter 8
0564+  0A92 E2            push si
0565+  0A93 D8            push b
0566+  0A94 D9            push c
0567+  0A95 DA            push d
0568+  0A96 FA F9 FF      lea d, [bp +- 7]
0569+  0A99 07 68 08      call _gets
0570+  0A9C 07 C0 07      call _strlen      ; get string length in c
0571+  0A9F 7E            dec c
0572+  0AA0 FD 4E         mov si, d
0573+  0AA2 12            mov a, c
0574+  0AA3 FD 99         shl a
0575+  0AA5 3B E1 0A      mov d, table_power
0576+  0AA8 59            add d, a
0577+  0AA9 38 00 00      mov c, 0
0578+  0AAC             mul_loop:
0579+  0AAC F6            lodsb      ; load ascii to al
0580+  0AAD B9 00         cmp al, 0
0581+  0AAF C6 C2 0A      je mul_exit
0582+  0AB2 6F 30         sub al, $30    ; make into integer
0583+  0AB4 22 00         mov ah, 0
0584+  0AB6 2A            mov b, [d]
0585+  0AB7 AC            mul a, b      ; result in b since it fits in 16bits
0586+  0AB8 11            mov a, b
0587+  0AB9 28            mov b, c
0588+  0ABA 54            add a, b
0589+  0ABB 39            mov c, a
0590+  0ABC 63 02 00      sub d, 2
0591+  0ABF 0A AC 0A      jmp mul_loop
0592+  0AC2             mul_exit:
0593+  0AC2 12            mov a, c
0594+  0AC3 E7            pop d
0595+  0AC4 E6            pop c
0596+  0AC5 E5            pop b
0597+  0AC6 EF            pop si
0598+  0AC7 F9            leave
0599+  0AC8 09            ret
0600+  0AC9             
0601+  0AC9             
0602+  0AC9 30 31 32 33 s_hex_digits:    .db "0123456789abcdef"  
0602+  0ACD 34 35 36 37 
0602+  0AD1 38 39 61 62 
0602+  0AD5 63 64 65 66 
0603+  0AD9 1B 5B 32 6A s_telnet_clear:  .db "\033[2j\033[h", 0
0603+  0ADD 1B 5B 68 00 
0604+  0AE1             
0605+  0AE1             table_power:
0606+  0AE1 01 00         .dw 1
0607+  0AE3 0A 00         .dw 10
0608+  0AE5 64 00         .dw 100
0609+  0AE7 E8 03         .dw 1000
0610+  0AE9 10 27         .dw 100000044   0AEB             .include "lib/ctype.asm"
0001+  0AEB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0AEB             ; ctype.s
0003+  0AEB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0AEB             
0005+  0AEB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0AEB             ;; c character classification is an operation provided by a group of functions in the ansi c standard library
0007+  0AEB             ;; for the c programming language. these functions are used to test characters for membership in a particular
0008+  0AEB             ;; class of characters, such as alphabetic characters, control characters, etc. both single-byte, and wide
0009+  0AEB             ;; characters are supported.
0010+  0AEB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0AEB             ;; _isalnum 
0012+  0AEB             ;; _isalpha 
0013+  0AEB             ;; islower 
0014+  0AEB             ;; isupper 
0015+  0AEB             ;; _isdigit 
0016+  0AEB             ;; isxdigit
0017+  0AEB             ;; iscntrl 
0018+  0AEB             ;; isgraph 
0019+  0AEB             ;; _isspace 
0020+  0AEB             ;; isblank 
0021+  0AEB             ;; isprint 
0022+  0AEB             ;; ispunct 
0023+  0AEB             ;; tolower 
0024+  0AEB             ;; toupper
0025+  0AEB             
0026+  0AEB             
0027+  0AEB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0AEB             ;; is alphanumeric
0029+  0AEB             ;; sets zf according with result
0030+  0AEB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0AEB             _isalnum:
0032+  0AEB 07 08 0B    	call _isalpha
0033+  0AEE C6 F4 0A    	je _isalnum_exit
0034+  0AF1 07 F5 0A    	call _isdigit
0035+  0AF4             _isalnum_exit:
0036+  0AF4 09          	ret	
0037+  0AF5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0AF5             ;; is digit
0039+  0AF5             ;; sets zf according with result
0040+  0AF5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0AF5             _isdigit:
0042+  0AF5 DB          	push al
0043+  0AF6 B9 30       	cmp al, '0'
0044+  0AF8 C8 04 0B    	jlu _isdigit_false
0045+  0AFB B9 39       	cmp al, '9'
0046+  0AFD D1 04 0B    	jgu _isdigit_false
0047+  0B00 87 00       	and al, 0	; set zf
0048+  0B02 E8          	pop al
0049+  0B03 09          	ret
0050+  0B04             _isdigit_false:
0051+  0B04 8B 01       	or al, 1	; clear zf
0052+  0B06 E8          	pop al
0053+  0B07 09          	ret	
0054+  0B08             	
0055+  0B08             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0B08             ;; is alpha
0057+  0B08             ;; sets zf according with result
0058+  0B08             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0B08             _isalpha:
0060+  0B08 DB          	push al
0061+  0B09 B9 5F       	cmp al, '_'
0062+  0B0B C6 2B 0B    	je _isalpha_true
0063+  0B0E B9 2E       	cmp al, '.'
0064+  0B10 C6 2B 0B    	je _isalpha_true
0065+  0B13 B9 61       	cmp al, 'a'
0066+  0B15 C8 27 0B    	jlu _isalpha_false
0067+  0B18 B9 7A       	cmp al, 'z'
0068+  0B1A D1 27 0B    	jgu _isalpha_false
0069+  0B1D B9 7A       	cmp al, 'z'
0070+  0B1F D0 2B 0B    	jleu _isalpha_true
0071+  0B22 B9 61       	cmp al, 'a'
0072+  0B24 C9 2B 0B    	jgeu _isalpha_true
0073+  0B27             _isalpha_false:
0074+  0B27 8B 01       	or al, 1	; clear zf
0075+  0B29 E8          	pop al
0076+  0B2A 09          	ret
0077+  0B2B             _isalpha_true:
0078+  0B2B 87 00       	and al, 0	; set zf
0079+  0B2D E8          	pop al
0080+  0B2E 09          	ret
0081+  0B2F             
0082+  0B2F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0B2F             ;; is path-alpha
0084+  0B2F             ;; sets zf according with result
0085+  0B2F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0B2F             ispath:
0087+  0B2F DB          	push al
0088+  0B30 07 F5 0A    	call _isdigit
0089+  0B33 C6 5D 0B    	je ispath_true
0090+  0B36 B9 5F       	cmp al, '_'
0091+  0B38 C6 5D 0B    	je ispath_true
0092+  0B3B B9 2F       	cmp al, '/'
0093+  0B3D C6 5D 0B    	je ispath_true
0094+  0B40 B9 2E       	cmp al, '.'
0095+  0B42 C6 5D 0B    	je ispath_true
0096+  0B45 B9 61       	cmp al, 'a'
0097+  0B47 C8 59 0B    	jlu ispath_false
0098+  0B4A B9 7A       	cmp al, 'z'
0099+  0B4C D1 59 0B    	jgu ispath_false
0100+  0B4F B9 7A       	cmp al, 'z'
0101+  0B51 D0 5D 0B    	jleu ispath_true
0102+  0B54 B9 61       	cmp al, 'a'
0103+  0B56 C9 5D 0B    	jgeu ispath_true
0104+  0B59             ispath_false:
0105+  0B59 8B 01       	or al, 1	; clear zf
0106+  0B5B E8          	pop al
0107+  0B5C 09          	ret
0108+  0B5D             ispath_true:
0109+  0B5D 87 00       	and al, 0	; set zf
0110+  0B5F E8          	pop al
0111+  0B60 09          	ret
0112+  0B61             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B61             ;; is space
0114+  0B61             ;; sets zf according with result
0115+  0B61             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B61             _isspace:
0117+  0B61 B9 20       	cmp al, $20		; ' '
0118+  0B63 C6 77 0B    	je _isspace_exit
0119+  0B66 B9 09       	cmp al, $09		; '\t'
0120+  0B68 C6 77 0B    	je _isspace_exit
0121+  0B6B B9 0A       	cmp al, $0a		; '\n'
0122+  0B6D C6 77 0B    	je _isspace_exit
0123+  0B70 B9 0D       	cmp al, $0d		; '\r'
0124+  0B72 C6 77 0B    	je _isspace_exit
0125+  0B75 B9 0B       	cmp al, $0b		; '\v'
0126+  0B77             _isspace_exit:
0127+  0B77 09          	ret	
0128+  0B78             
0129+  0B78             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B78             ; to lower
0131+  0B78             ; input in al
0132+  0B78             ; output in al
0133+  0B78             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B78             _to_lower:
0135+  0B78 B9 7A       	cmp al, 'z'
0136+  0B7A D1 7F 0B    	jgu _to_lower_ret
0137+  0B7D 6A 20       	add al, $20				; convert to lower case
0138+  0B7F             _to_lower_ret:
0139+  0B7F 09          	ret
0140+  0B80             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B80             ; to upper
0142+  0B80             ; input in al
0143+  0B80             ; output in al
0144+  0B80             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B80             _to_upper:
0146+  0B80 B9 61       	cmp al, 'a'
0147+  0B82 C8 87 0B    	jlu _to_upper_ret
0148+  0B85 6F 20       	sub al, $20			; convert to upper case
0149+  0B87             _to_upper_ret:
0150+  0B87 09          	ret
0151+  0B88             
0045   0B88             
0046   0B88             
0047   0B88             transient_area:	
0048   0B88             
0049   0B88             .end
0050   0B88             
0051   0B88             
tasm: Number of errors = 0
