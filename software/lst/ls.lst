0001   0000             .include "lib/kernel.exp"
0001+  0000             fdc_al_restore   .EQU  $0000
0002+  0000             fdc_al_step      .EQU  $0001
0003+  0000             fdc_al_step_in   .EQU  $0002
0004+  0000             fdc_al_step_out  .EQU  $0003
0005+  0000             fdc_al_seek      .EQU  $0004
0006+  0000             fdc_al_format_128 .EQU  $0005
0007+  0000             fdc_al_formatdisk_128 .EQU  $0006
0008+  0000             fdc_al_format_512 .EQU  $0007
0009+  0000             fdc_al_formatdisk_512 .EQU  $0008
0010+  0000             fdc_al_read_addr .EQU  $0009
0011+  0000             fdc_al_read_track .EQU  $000a
0012+  0000             fdc_al_read_sect .EQU  $000b
0013+  0000             fdc_al_write_sect .EQU  $000c
0014+  0000             fdc_al_force_int .EQU  $000d
0015+  0000             fdc_al_status0   .EQU  $000e
0016+  0000             fdc_al_status1   .EQU  $000f
0017+  0000             noname._til311_display .EQU  $ffb0
0018+  0000             noname._fdc_config .EQU  $ffc0
0019+  0000             noname._fdc_status_0 .EQU  $ffc1
0020+  0000             noname._fdc_stat_cmd .EQU  $ffc8
0021+  0000             sys_break        .EQU  $0000
0022+  0000             sys_rtc          .EQU  $0001
0023+  0000             sys_ide          .EQU  $0002
0024+  0000             sys_io           .EQU  $0003
0025+  0000             sys_filesystem   .EQU  $0004
0026+  0000             sys_create_proc  .EQU  $0005
0027+  0000             sys_list_proc    .EQU  $0006
0028+  0000             sys_datetime     .EQU  $0007
0029+  0000             sys_reboot       .EQU  $0008
0030+  0000             sys_pause_proc   .EQU  $0009
0031+  0000             sys_resume_proc  .EQU  $000a
0032+  0000             sys_terminate_proc .EQU  $000b
0033+  0000             sys_system       .EQU  $000c
0034+  0000             sys_fdc          .EQU  $000d
0035+  0000             text_org         .EQU  $0400
0002   0000             
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             ;; ls /usr/bin
0005   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006   0000             
0007   0400             .org text_org			; origin at 1024
0008   0400             
0009   0400             cmd_ls:
0010   0400 10 00 00    	mov a, 0
0011   0403 42 59 06    	mov [prog], a			; move tokennizer pointer to the beginning of the arguments area (address 0)
0012   0406 07 BA 04    	call get_token
0013   0409 1D 5C 06    	mov al, [tok]
0014   040C B9 14       	cmp al, tok_end
0015   040E C6 25 04    	je cmd_ls_current
0016   0411             cmd_ls_arg_given:
0017   0411 07 40 06    	call _putback
0018   0414 07 63 04    	call get_path
0019   0417 3B 5D 06    	mov d, tokstr
0020   041A 19 13       	mov al, 19
0021   041C 05 04       	syscall sys_filesystem	; get dirid in a
0022   041E 27          	mov b, a
0023   041F 19 04       	mov al, 4
0024   0421 05 04       	syscall sys_filesystem
0025   0423 05 0B       	syscall sys_terminate_proc
0026   0425             cmd_ls_current:
0027   0425 19 11       	mov al, 17
0028   0427 05 04       	syscall sys_filesystem		; get current dirid in b
0029   0429 19 04       	mov al, 4
0030   042B 05 04       	syscall sys_filesystem
0031   042D             
0032   042D 05 0B       	syscall sys_terminate_proc
0033   042F             
0034   042F             
0035   042F             .include "lib/token.asm"
0001+  042F             toktyp_identifier  .equ 0
0002+  042F             toktyp_keyword     .equ 1
0003+  042F             toktyp_delimiter   .equ 2
0004+  042F             toktyp_string      .equ 3
0005+  042F             toktyp_char        .equ 4
0006+  042F             toktyp_numeric     .equ 5
0007+  042F             toktyp_end         .equ 6
0008+  042F             
0009+  042F             tok_null           .equ 0
0010+  042F             tok_fslash         .equ 1
0011+  042F             tok_times          .equ 2
0012+  042F             tok_plus           .equ 3
0013+  042F             tok_minus          .equ 4
0014+  042F             tok_dot            .equ 5
0015+  042F             tok_semi           .equ 6
0016+  042F             tok_angle          .equ 7
0017+  042F             tok_tilde          .equ 8
0018+  042F             tok_equal          .equ 9
0019+  042F             tok_colon          .equ 10
0020+  042F             tok_comma          .equ 11
0021+  042F             
0022+  042F             tok_end            .equ 20
0023+  042F             
0024+  042F             
0025+  042F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  042F             ;; read a full command argment from shell input buffer
0027+  042F             ;; argument is written into tokstr
0028+  042F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  042F             get_arg:
0030+  042F D7            push a
0031+  0430 E2            push si
0032+  0431 E3            push di
0033+  0432 19 00         mov al, 0
0034+  0434 3D 5D 06      mov [tokstr], al      ; nullify tokstr string
0035+  0437 14 59 06      mov a, [prog]
0036+  043A 4D            mov si, a
0037+  043B FD 4F 5D 06   mov di, tokstr
0038+  043F             get_arg_skip_spaces:
0039+  043F F6            lodsb
0040+  0440 07 45 0B      call _isspace
0041+  0443 C6 3F 04      je get_arg_skip_spaces
0042+  0446             get_arg_l0:
0043+  0446 B9 3B         cmp al, $3b        ; check if is ';'
0044+  0448 C6 55 04      je get_arg_end
0045+  044B B9 00         cmp al, 0
0046+  044D C6 55 04      je get_arg_end      ; check if end of input
0047+  0450 F7            stosb
0048+  0451 F6            lodsb
0049+  0452 0A 46 04      jmp get_arg_l0
0050+  0455             get_arg_end:
0051+  0455 19 00         mov al, 0
0052+  0457 F7            stosb
0053+  0458 D5 01 00      sub si, 1
0054+  045B 4E            mov a, si
0055+  045C 42 59 06      mov [prog], a    ; update pointer
0056+  045F F0            pop di
0057+  0460 EF            pop si
0058+  0461 E4            pop a
0059+  0462 09            ret
0060+  0463             
0061+  0463             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0463             ;; read a path formation from shell input buffer
0063+  0463             ;; path is written into tokstr
0064+  0463             ;; /usr/bin
0065+  0463             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0463             get_path:
0067+  0463 D7            push a
0068+  0464 E2            push si
0069+  0465 E3            push di
0070+  0466 19 00         mov al, 0
0071+  0468 3D 5D 06      mov [tokstr], al      ; nullify tokstr string
0072+  046B 14 59 06      mov a, [prog]
0073+  046E 4D            mov si, a
0074+  046F FD 4F 5D 06   mov di, tokstr
0075+  0473             get_path_skip_spaces:
0076+  0473 F6            lodsb
0077+  0474 07 45 0B      call _isspace
0078+  0477 C6 73 04      je get_path_skip_spaces
0079+  047A             get_path_is_pathchar:
0080+  047A F7            stosb
0081+  047B F6            lodsb
0082+  047C 07 CF 0A      call _isalnum      ;check if is alphanumeric
0083+  047F C6 7A 04      je get_path_is_pathchar
0084+  0482 B9 2F         cmp al, '/'        ; check if is '/'
0085+  0484 C6 7A 04      je get_path_is_pathchar
0086+  0487 19 00         mov al, 0
0087+  0489 F7            stosb
0088+  048A D5 01 00      sub si, 1
0089+  048D 4E            mov a, si
0090+  048E 42 59 06      mov [prog], a    ; update pointer
0091+  0491             get_path_end:
0092+  0491 F0            pop di
0093+  0492 EF            pop si
0094+  0493 E4            pop a
0095+  0494 09            ret
0096+  0495             
0097+  0495             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  0495             ;; read a line
0099+  0495             ;; line is written into tokstr
0100+  0495             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  0495             get_line:
0102+  0495 D7            push a
0103+  0496 E2            push si
0104+  0497 E3            push di
0105+  0498 19 00         mov al, 0
0106+  049A 3D 5D 06      mov [tokstr], al      ; nullify tokstr string
0107+  049D 14 59 06      mov a, [prog]
0108+  04A0 4D            mov si, a
0109+  04A1 FD 4F 5D 06   mov di, tokstr
0110+  04A5             get_line_l0:
0111+  04A5 F6            lodsb
0112+  04A6 B9 0A         cmp al, $0a    ; check for new line
0113+  04A8 C6 AF 04      je get_line_exit
0114+  04AB F7            stosb
0115+  04AC 0A A5 04      jmp get_line_l0
0116+  04AF             get_line_exit:
0117+  04AF 19 00         mov al, 0
0118+  04B1 F7            stosb
0119+  04B2 4E            mov a, si
0120+  04B3 42 59 06      mov [prog], a    ; update pointer
0121+  04B6 F0            pop di
0122+  04B7 EF            pop si
0123+  04B8 E4            pop a
0124+  04B9 09            ret
0125+  04BA             
0126+  04BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  04BA             ;; token parser
0128+  04BA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  04BA             get_token:
0130+  04BA D7            push a
0131+  04BB DA            push d
0132+  04BC E2            push si
0133+  04BD E3            push di
0134+  04BE 19 00         mov al, 0
0135+  04C0 3D 5D 06      mov [tokstr], al      ; nullify tokstr string
0136+  04C3 19 00         mov al, tok_null
0137+  04C5 3D 5C 06      mov [tok], al        ; nullify token
0138+  04C8 14 59 06      mov a, [prog]
0139+  04CB 4D            mov si, a
0140+  04CC FD 4F 5D 06   mov di, tokstr
0141+  04D0             get_tok_skip_spaces:
0142+  04D0 F6            lodsb
0143+  04D1 07 45 0B      call _isspace
0144+  04D4 C6 D0 04      je get_tok_skip_spaces
0145+  04D7 B9 00         cmp al, 0      ; check for end of input (null)
0146+  04D9 C6 BE 05      je get_token_end
0147+  04DC B9 23         cmp al, '#'      ; comments!
0148+  04DE C6 EC 05      je get_tok_comment
0149+  04E1 07 CF 0A      call _isalnum
0150+  04E4 C6 CB 05      jz is_alphanumeric
0151+  04E7             ; other token types
0152+  04E7             get_token_slash:
0153+  04E7 B9 2F         cmp al, '/'        ; check if '/'
0154+  04E9 C7 01 05      jne get_token_minus
0155+  04EC F7            stosb          ; store '/' into token string
0156+  04ED 19 00         mov al, 0
0157+  04EF F7            stosb          ; terminate token string
0158+  04F0 19 01         mov al, tok_fslash
0159+  04F2 3D 5C 06      mov [tok], al      
0160+  04F5 19 02         mov al, toktyp_delimiter
0161+  04F7 3D 5B 06      mov [toktyp], al
0162+  04FA 4E            mov a, si
0163+  04FB 42 59 06      mov [prog], a    ; update pointer
0164+  04FE 0A E7 05      jmp get_token_return
0165+  0501             get_token_minus:
0166+  0501 B9 2D         cmp al, '-'        ; check if '-'
0167+  0503 C7 1B 05      jne get_token_comma
0168+  0506 F7            stosb          ; store '-' into token string
0169+  0507 19 00         mov al, 0
0170+  0509 F7            stosb          ; terminate token string
0171+  050A 19 04         mov al, tok_minus
0172+  050C 3D 5C 06      mov [tok], al      
0173+  050F 19 02         mov al, toktyp_delimiter
0174+  0511 3D 5B 06      mov [toktyp], al
0175+  0514 4E            mov a, si
0176+  0515 42 59 06      mov [prog], a    ; update pointer
0177+  0518 0A E7 05      jmp get_token_return
0178+  051B             get_token_comma:
0179+  051B B9 2C         cmp al, ','        ; check if ','
0180+  051D C7 35 05      jne get_token_semi
0181+  0520 F7            stosb          ; store ',' into token string
0182+  0521 19 00         mov al, 0
0183+  0523 F7            stosb          ; terminate token string
0184+  0524 19 0B         mov al, tok_comma
0185+  0526 3D 5C 06      mov [tok], al      
0186+  0529 19 02         mov al, toktyp_delimiter
0187+  052B 3D 5B 06      mov [toktyp], al
0188+  052E 4E            mov a, si
0189+  052F 42 59 06      mov [prog], a    ; update pointer
0190+  0532 0A E7 05      jmp get_token_return
0191+  0535             get_token_semi:
0192+  0535 B9 3B         cmp al, $3b        ; check if ';'
0193+  0537 C7 4F 05      jne get_token_colon
0194+  053A F7            stosb          ; store ';' into token string
0195+  053B 19 00         mov al, 0
0196+  053D F7            stosb          ; terminate token string
0197+  053E 19 06         mov al, tok_semi
0198+  0540 3D 5C 06      mov [tok], al      
0199+  0543 19 02         mov al, toktyp_delimiter
0200+  0545 3D 5B 06      mov [toktyp], al
0201+  0548 4E            mov a, si
0202+  0549 42 59 06      mov [prog], a    ; update pointer
0203+  054C 0A E7 05      jmp get_token_return
0204+  054F             get_token_colon:
0205+  054F B9 3A         cmp al, $3a        ; check if ':'
0206+  0551 C7 69 05      jne get_token_angle
0207+  0554 F7            stosb          ; store ':' into token string
0208+  0555 19 00         mov al, 0
0209+  0557 F7            stosb          ; terminate token string
0210+  0558 19 0A         mov al, tok_colon
0211+  055A 3D 5C 06      mov [tok], al      
0212+  055D 19 02         mov al, toktyp_delimiter
0213+  055F 3D 5B 06      mov [toktyp], al
0214+  0562 4E            mov a, si
0215+  0563 42 59 06      mov [prog], a    ; update pointer
0216+  0566 0A E7 05      jmp get_token_return
0217+  0569             get_token_angle:
0218+  0569 B9 3E         cmp al, $3e        ; check if '>'
0219+  056B C7 83 05      jne get_token_tilde
0220+  056E F7            stosb          ; store '>' into token string
0221+  056F 19 00         mov al, 0
0222+  0571 F7            stosb          ; terminate token string
0223+  0572 19 07         mov al, tok_angle
0224+  0574 3D 5C 06      mov [tok], al      
0225+  0577 19 02         mov al, toktyp_delimiter
0226+  0579 3D 5B 06      mov [toktyp], al
0227+  057C 4E            mov a, si
0228+  057D 42 59 06      mov [prog], a    ; update pointer
0229+  0580 0A E7 05      jmp get_token_return
0230+  0583             get_token_tilde:
0231+  0583 B9 7E         cmp al, '~'        ; check if '~'
0232+  0585 C7 9D 05      jne get_token_equal
0233+  0588 F7            stosb          ; store '~' into token string
0234+  0589 19 00         mov al, 0
0235+  058B F7            stosb          ; terminate token string
0236+  058C 19 08         mov al, tok_tilde
0237+  058E 3D 5C 06      mov [tok], al      
0238+  0591 19 02         mov al, toktyp_delimiter
0239+  0593 3D 5B 06      mov [toktyp], al
0240+  0596 4E            mov a, si
0241+  0597 42 59 06      mov [prog], a    ; update pointer
0242+  059A 0A E7 05      jmp get_token_return
0243+  059D             get_token_equal:
0244+  059D B9 3D         cmp al, '='        ; check if '='
0245+  059F C7 B7 05      jne get_token_skip
0246+  05A2 F7            stosb          ; store '=' into token string
0247+  05A3 19 00         mov al, 0
0248+  05A5 F7            stosb          ; terminate token string
0249+  05A6 19 09         mov al, tok_equal
0250+  05A8 3D 5C 06      mov [tok], al      
0251+  05AB 19 02         mov al, toktyp_delimiter
0252+  05AD 3D 5B 06      mov [toktyp], al
0253+  05B0 4E            mov a, si
0254+  05B1 42 59 06      mov [prog], a    ; update pointer
0255+  05B4 0A E7 05      jmp get_token_return
0256+  05B7             get_token_skip:
0257+  05B7 4E            mov a, si
0258+  05B8 42 59 06      mov [prog], a    ; update pointer
0259+  05BB 0A E7 05      jmp get_token_return
0260+  05BE             get_token_end:        ; end of file token
0261+  05BE 19 14         mov al, tok_end
0262+  05C0 3D 5C 06      mov [tok], al
0263+  05C3 19 06         mov al, toktyp_end
0264+  05C5 3D 5B 06      mov [toktyp], al
0265+  05C8 0A E7 05      jmp get_token_return
0266+  05CB             is_alphanumeric:
0267+  05CB F7            stosb
0268+  05CC F6            lodsb
0269+  05CD 07 CF 0A      call _isalnum      ;check if is alphanumeric
0270+  05D0 C6 CB 05      jz is_alphanumeric
0271+  05D3 B9 2E         cmp al, $2e        ; check if is '.'
0272+  05D5 C6 CB 05      je is_alphanumeric
0273+  05D8 19 00         mov al, 0
0274+  05DA F7            stosb
0275+  05DB 19 00         mov al, toktyp_identifier
0276+  05DD 3D 5B 06      mov [toktyp], al
0277+  05E0 D5 01 00      sub si, 1
0278+  05E3 4E            mov a, si
0279+  05E4 42 59 06      mov [prog], a    ; update pointer
0280+  05E7             get_token_return:
0281+  05E7 F0            pop di
0282+  05E8 EF            pop si
0283+  05E9 E7            pop d
0284+  05EA E4            pop a
0285+  05EB 09            ret
0286+  05EC             get_tok_comment:
0287+  05EC F6            lodsb
0288+  05ED B9 0A         cmp al, $0a      ; new line
0289+  05EF C7 EC 05      jne get_tok_comment
0290+  05F2 0A D0 04      jmp get_tok_skip_spaces
0291+  05F5             
0292+  05F5             
0293+  05F5             get_number:
0294+  05F5 D7            push a
0295+  05F6 DA            push d
0296+  05F7 E2            push si
0297+  05F8 E3            push di
0298+  05F9 19 00         mov al, 0
0299+  05FB 3D 5D 06      mov [tokstr], al      ; nullify tokstr string
0300+  05FE 19 00         mov al, tok_null
0301+  0600 3D 5C 06      mov [tok], al        ; nullify token
0302+  0603 14 59 06      mov a, [prog]
0303+  0606 4D            mov si, a
0304+  0607 FD 4F 5D 06   mov di, tokstr
0305+  060B             get_number_skip_spaces:
0306+  060B F6            lodsb
0307+  060C 07 45 0B      call _isspace
0308+  060F C6 0B 06      je get_number_skip_spaces
0309+  0612 B9 00         cmp al, 0      ; check for end of input (null)
0310+  0614 C7 24 06      jne get_number_l0
0311+  0617 19 14         mov al, tok_end
0312+  0619 3D 5C 06      mov [tok], al
0313+  061C 19 06         mov al, toktyp_end
0314+  061E 3D 5B 06      mov [toktyp], al
0315+  0621 0A 3B 06      jmp get_number_return
0316+  0624             get_number_l0:
0317+  0624 F7            stosb
0318+  0625 F6            lodsb
0319+  0626 07 D9 0A      call _isdigit      ;check if is numeric
0320+  0629 C6 24 06      jz get_number_l0
0321+  062C 19 00         mov al, 0
0322+  062E F7            stosb
0323+  062F 19 05         mov al, toktyp_numeric
0324+  0631 3D 5B 06      mov [toktyp], al
0325+  0634 D5 01 00      sub si, 1
0326+  0637 4E            mov a, si
0327+  0638 42 59 06      mov [prog], a    ; update pointer
0328+  063B             get_number_return:
0329+  063B F0            pop di
0330+  063C EF            pop si
0331+  063D E7            pop d
0332+  063E E4            pop a
0333+  063F 09            ret
0334+  0640             
0335+  0640             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  0640             ;; put back token
0337+  0640             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0338+  0640             _putback:
0339+  0640 D7            push a
0340+  0641 E2            push si
0341+  0642 FD 4D 5D 06   mov si, tokstr  
0342+  0646             _putback_loop:
0343+  0646 F6            lodsb
0344+  0647 B9 00         cmp al, 0
0345+  0649 C6 56 06      je _putback_end
0346+  064C 14 59 06      mov a, [prog]
0347+  064F 7D            dec a
0348+  0650 42 59 06      mov [prog], a      ; update pointer
0349+  0653 0A 46 06      jmp _putback_loop
0350+  0656             _putback_end:
0351+  0656 EF            pop si
0352+  0657 E4            pop a
0353+  0658 09            ret
0354+  0659             
0355+  0659             
0356+  0659             
0357+  0659             
0358+  0659 00 00       prog:      .dw 0          ; pointer to current position in buffer
0359+  065B             
0360+  065B 00          toktyp:    .db 0          ; token type symbol
0361+  065C 00          tok:       .db 0          ; current token symbol
0362+  065D 00 00 00 00 tokstr:    .fill 256, 0   ; token as a string
0362+  0661 00 00 00 00 
0362+  0665 00 00 00 00 
0362+  0669 00 00 00 00 
0362+  066D 00 00 00 00 
0362+  0671 00 00 00 00 
0362+  0675 00 00 00 00 
0362+  0679 00 00 00 00 
0362+  067D 00 00 00 00 
0362+  0681 00 00 00 00 
0362+  0685 00 00 00 00 
0362+  0689 00 00 00 00 
0362+  068D 00 00 00 00 
0362+  0691 00 00 00 00 
0362+  0695 00 00 00 00 
0362+  0699 00 00 00 00 
0362+  069D 00 00 00 00 
0362+  06A1 00 00 00 00 
0362+  06A5 00 00 00 00 
0362+  06A9 00 00 00 00 
0362+  06AD 00 00 00 00 
0362+  06B1 00 00 00 00 
0362+  06B5 00 00 00 00 
0362+  06B9 00 00 00 00 
0362+  06BD 00 00 00 00 
0362+  06C1 00 00 00 00 
0362+  06C5 00 00 00 00 
0362+  06C9 00 00 00 00 
0362+  06CD 00 00 00 00 
0362+  06D1 00 00 00 00 
0362+  06D5 00 00 00 00 
0362+  06D9 00 00 00 00 
0362+  06DD 00 00 00 00 
0362+  06E1 00 00 00 00 
0362+  06E5 00 00 00 00 
0362+  06E9 00 00 00 00 
0362+  06ED 00 00 00 00 
0362+  06F1 00 00 00 00 
0362+  06F5 00 00 00 00 
0362+  06F9 00 00 00 00 
0362+  06FD 00 00 00 00 
0362+  0701 00 00 00 00 
0362+  0705 00 00 00 00 
0362+  0709 00 00 00 00 
0362+  070D 00 00 00 00 
0362+  0711 00 00 00 00 
0362+  0715 00 00 00 00 
0362+  0719 00 00 00 00 
0362+  071D 00 00 00 00 
0362+  0721 00 00 00 00 
0362+  0725 00 00 00 00 
0362+  0729 00 00 00 00 
0362+  072D 00 00 00 00 
0362+  0731 00 00 00 00 
0362+  0735 00 00 00 00 
0362+  0739 00 00 00 00 
0362+  073D 00 00 00 00 
0362+  0741 00 00 00 00 
0362+  0745 00 00 00 00 
0362+  0749 00 00 00 00 
0362+  074D 00 00 00 00 
0362+  0751 00 00 00 00 
0362+  0755 00 00 00 00 
0362+  0759 00 00 00 00 
0036   075D             .include "lib/stdio.asm"
0001+  075D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  075D             ; stdio.s
0003+  075D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  075D             .include "lib/string.asm"
0001++ 075D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 075D             ; string.s
0003++ 075D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 075D             
0005++ 075D             
0006++ 075D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 075D             ; _strrev
0008++ 075D             ; reverse a string
0009++ 075D             ; d = string address
0010++ 075D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 075D             ; 01234
0012++ 075D             _strrev:
0013++ 075D 4B          	pusha
0014++ 075E 07 A4 07    	call _strlen	; length in c
0015++ 0761 12          	mov a, c
0016++ 0762 AF 01 00    	cmp a, 1
0017++ 0765 D0 7F 07    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 0768 7D          	dec a
0019++ 0769 FD 4E       	mov si, d	; beginning of string
0020++ 076B FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 076D 59          	add d, a	; end of string
0022++ 076E 12          	mov a, c
0023++ 076F FD 9B       	shr a		; divide by 2
0024++ 0771 39          	mov c, a	; c now counts the steps
0025++ 0772             _strrev_l0:
0026++ 0772 32          	mov bl, [d]	; save load right-side char into bl
0027++ 0773 F6          	lodsb		; load left-side char into al; increase si
0028++ 0774 3E          	mov [d], al	; store left char into right side
0029++ 0775 1B          	mov al, bl
0030++ 0776 F7          	stosb		; store right-side char into left-side; increase di
0031++ 0777 7E          	dec c
0032++ 0778 7F          	dec d
0033++ 0779 C2 00 00    	cmp c, 0
0034++ 077C C7 72 07    	jne _strrev_l0
0035++ 077F             _strrev_end:
0036++ 077F 4C          	popa
0037++ 0780 09          	ret
0038++ 0781             	
0039++ 0781             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0781             ; _strchr
0041++ 0781             ; search string in d for char in al
0042++ 0781             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0781             _strchr:
0044++ 0781             _strchr_l0:
0045++ 0781 32          	mov bl, [d]
0046++ 0782 C1 00       	cmp bl, 0
0047++ 0784 C6 8F 07    	je _strchr_end
0048++ 0787 BA          	cmp al, bl
0049++ 0788 C6 8F 07    	je _strchr_end
0050++ 078B 79          	inc d
0051++ 078C 0A 81 07    	jmp _strchr_l0
0052++ 078F             _strchr_end:
0053++ 078F 1B          	mov al, bl
0054++ 0790 09          	ret
0055++ 0791             
0056++ 0791             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0791             ; _strstr
0058++ 0791             ; find sub-string
0059++ 0791             ; str1 in si
0060++ 0791             ; str2 in di
0061++ 0791             ; si points to end of source string
0062++ 0791             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0791             _strstr:
0064++ 0791 DB          	push al
0065++ 0792 DA          	push d
0066++ 0793 E3          	push di
0067++ 0794             _strstr_loop:
0068++ 0794 F3          	cmpsb					; compare a byte of the strings
0069++ 0795 C7 A0 07    	jne _strstr_ret
0070++ 0798 FC 00 00    	lea d, [di + 0]
0071++ 079B BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 079D C7 94 07    	jne _strstr_loop				; equal chars but not at end
0073++ 07A0             _strstr_ret:
0074++ 07A0 F0          	pop di
0075++ 07A1 E7          	pop d
0076++ 07A2 E8          	pop al
0077++ 07A3 09          	ret
0078++ 07A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 07A4             ; length of null terminated string
0080++ 07A4             ; result in c
0081++ 07A4             ; pointer in d
0082++ 07A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 07A4             _strlen:
0084++ 07A4 DA          	push d
0085++ 07A5 38 00 00    	mov c, 0
0086++ 07A8             _strlen_l1:
0087++ 07A8 BD 00       	cmp byte [d], 0
0088++ 07AA C6 B2 07    	je _strlen_ret
0089++ 07AD 79          	inc d
0090++ 07AE 78          	inc c
0091++ 07AF 0A A8 07    	jmp _strlen_l1
0092++ 07B2             _strlen_ret:
0093++ 07B2 E7          	pop d
0094++ 07B3 09          	ret
0095++ 07B4             
0096++ 07B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 07B4             ; strcmp
0098++ 07B4             ; compare two strings
0099++ 07B4             ; str1 in si
0100++ 07B4             ; str2 in di
0101++ 07B4             ; create a string compairon instrucion ?????
0102++ 07B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 07B4             _strcmp:
0104++ 07B4 DB          	push al
0105++ 07B5 DA          	push d
0106++ 07B6 E3          	push di
0107++ 07B7 E2          	push si
0108++ 07B8             _strcmp_loop:
0109++ 07B8 F3          	cmpsb					; compare a byte of the strings
0110++ 07B9 C7 C4 07    	jne _strcmp_ret
0111++ 07BC FB FF FF    	lea d, [si +- 1]
0112++ 07BF BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 07C1 C7 B8 07    	jne _strcmp_loop				; equal chars but not at end
0114++ 07C4             _strcmp_ret:
0115++ 07C4 EF          	pop si
0116++ 07C5 F0          	pop di
0117++ 07C6 E7          	pop d
0118++ 07C7 E8          	pop al
0119++ 07C8 09          	ret
0120++ 07C9             
0121++ 07C9             
0122++ 07C9             ; strcpy
0123++ 07C9             ; copy null terminated string from si to di
0124++ 07C9             ; source in si
0125++ 07C9             ; destination in di
0126++ 07C9             _strcpy:
0127++ 07C9 E2          	push si
0128++ 07CA E3          	push di
0129++ 07CB DB          	push al
0130++ 07CC             _strcpy_l1:
0131++ 07CC F6          	lodsb
0132++ 07CD F7          	stosb
0133++ 07CE B9 00       	cmp al, 0
0134++ 07D0 C7 CC 07    	jne _strcpy_l1
0135++ 07D3             _strcpy_end:
0136++ 07D3 E8          	pop al
0137++ 07D4 F0          	pop di
0138++ 07D5 EF          	pop si
0139++ 07D6 09          	ret
0140++ 07D7             
0141++ 07D7             ; strcat
0142++ 07D7             ; concatenate a null terminated string into string at di, from string at si
0143++ 07D7             ; source in si
0144++ 07D7             ; destination in di
0145++ 07D7             _strcat:
0146++ 07D7 E2          	push si
0147++ 07D8 E3          	push di
0148++ 07D9 D7          	push a
0149++ 07DA DA          	push d
0150++ 07DB 50          	mov a, di
0151++ 07DC 3C          	mov d, a
0152++ 07DD             _strcat_goto_end_l1:
0153++ 07DD BD 00       	cmp byte[d], 0
0154++ 07DF C6 E6 07    	je _strcat_start
0155++ 07E2 79          	inc d
0156++ 07E3 0A DD 07    	jmp _strcat_goto_end_l1
0157++ 07E6             _strcat_start:
0158++ 07E6 FD 50       	mov di, d
0159++ 07E8             _strcat_l1:
0160++ 07E8 F6          	lodsb
0161++ 07E9 F7          	stosb
0162++ 07EA B9 00       	cmp al, 0
0163++ 07EC C7 E8 07    	jne _strcat_l1
0164++ 07EF             _strcat_end:
0165++ 07EF E7          	pop d
0166++ 07F0 E4          	pop a
0167++ 07F1 F0          	pop di
0168++ 07F2 EF          	pop si
0169++ 07F3 09          	ret
0170++ 07F4             
0171++ 07F4             
0005+  07F4             
0006+  07F4             
0007+  07F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  07F4             ; convert ascii 'o'..'f' to integer 0..15
0009+  07F4             ; ascii in bl
0010+  07F4             ; result in al
0011+  07F4             ; ascii for f = 0100 0110
0012+  07F4             ; ascii for 9 = 0011 1001
0013+  07F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  07F4             hex_ascii_encode:
0015+  07F4 1B            mov al, bl
0016+  07F5 93 40         test al, $40        ; test if letter or number
0017+  07F7 C7 FD 07      jnz hex_letter
0018+  07FA 87 0F         and al, $0f        ; get number
0019+  07FC 09            ret
0020+  07FD             hex_letter:
0021+  07FD 87 0F         and al, $0f        ; get letter
0022+  07FF 6A 09         add al, 9
0023+  0801 09            ret
0024+  0802             
0025+  0802             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0802             ; atoi
0027+  0802             ; 2 letter hex string in b
0028+  0802             ; 8bit integer returned in al
0029+  0802             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  0802             _atoi:
0031+  0802 D8            push b
0032+  0803 07 F4 07      call hex_ascii_encode      ; convert bl to 4bit code in al
0033+  0806 30            mov bl, bh
0034+  0807 DB            push al          ; save a
0035+  0808 07 F4 07      call hex_ascii_encode
0036+  080B EA            pop bl  
0037+  080C FD 9E 04      shl al, 4
0038+  080F 8C            or al, bl
0039+  0810 E5            pop b
0040+  0811 09            ret  
0041+  0812             
0042+  0812             
0043+  0812             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  0812             ; scanf
0045+  0812             ; no need for explanations!
0046+  0812             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  0812             scanf:
0048+  0812 09            ret
0049+  0813             
0050+  0813             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0813             ; itoa
0052+  0813             ; 8bit value in bl
0053+  0813             ; 2 byte ascii result in a
0054+  0813             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0813             _itoa:
0056+  0813 DA            push d
0057+  0814 D8            push b
0058+  0815 A7 00         mov bh, 0
0059+  0817 FD A4 04      shr bl, 4  
0060+  081A 74            mov d, b
0061+  081B 1F AD 0A      mov al, [d + s_hex_digits]
0062+  081E 23            mov ah, al
0063+  081F               
0064+  081F E5            pop b
0065+  0820 D8            push b
0066+  0821 A7 00         mov bh, 0
0067+  0823 FD 87 0F      and bl, $0f
0068+  0826 74            mov d, b
0069+  0827 1F AD 0A      mov al, [d + s_hex_digits]
0070+  082A E5            pop b
0071+  082B E7            pop d
0072+  082C 09            ret
0073+  082D             
0074+  082D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  082D             ; hex string to binary
0076+  082D             ; di = destination address
0077+  082D             ; si = source
0078+  082D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  082D             _hex_to_int:
0080+  082D             _hex_to_int_l1:
0081+  082D F6            lodsb          ; load from [si] to al
0082+  082E B9 00         cmp al, 0        ; check if ascii 0
0083+  0830 C6 3D 08      jz _hex_to_int_ret
0084+  0833 36            mov bh, al
0085+  0834 F6            lodsb
0086+  0835 2F            mov bl, al
0087+  0836 07 02 08      call _atoi        ; convert ascii byte in b to int (to al)
0088+  0839 F7            stosb          ; store al to [di]
0089+  083A 0A 2D 08      jmp _hex_to_int_l1
0090+  083D             _hex_to_int_ret:
0091+  083D 09            ret    
0092+  083E             
0093+  083E             
0094+  083E             
0095+  083E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  083E             ; getchar
0097+  083E             ; char in ah
0098+  083E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  083E             getch:
0100+  083E DB            push al
0101+  083F             getch_retry:
0102+  083F 19 01         mov al, 1
0103+  0841 05 03         syscall sys_io      ; receive in ah
0104+  0843 E8            pop al
0105+  0844 09            ret
0106+  0845             
0107+  0845             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  0845             ; putchar
0109+  0845             ; char in ah
0110+  0845             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0845             _putchar:
0112+  0845 DB            push al
0113+  0846 19 00         mov al, 0
0114+  0848 05 03         syscall sys_io      ; char in ah
0115+  084A E8            pop al
0116+  084B 09            ret
0117+  084C             
0118+  084C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  084C             ;; input a string
0120+  084C             ;; terminates with null
0121+  084C             ;; pointer in d
0122+  084C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  084C             _gets:
0124+  084C D7            push a
0125+  084D DA            push d
0126+  084E             _gets_loop:
0127+  084E 19 01         mov al, 1
0128+  0850 05 03         syscall sys_io      ; receive in ah
0129+  0852 76 1B         cmp ah, 27
0130+  0854 C6 75 08      je _gets_ansi_esc
0131+  0857 76 0A         cmp ah, $0a        ; lf
0132+  0859 C6 D1 08      je _gets_end
0133+  085C 76 0D         cmp ah, $0d        ; cr
0134+  085E C6 D1 08      je _gets_end
0135+  0861 76 5C         cmp ah, $5c        ; '\\'
0136+  0863 C6 97 08      je _gets_escape
0137+  0866 76 08         cmp ah, $08      ; check for backspace
0138+  0868 C6 71 08      je _gets_backspace
0139+  086B 1A            mov al, ah
0140+  086C 3E            mov [d], al
0141+  086D 79            inc d
0142+  086E 0A 4E 08      jmp _gets_loop
0143+  0871             _gets_backspace:
0144+  0871 7F            dec d
0145+  0872 0A 4E 08      jmp _gets_loop
0146+  0875             _gets_ansi_esc:
0147+  0875 19 01         mov al, 1
0148+  0877 05 03         syscall sys_io        ; receive in ah without echo
0149+  0879 76 5B         cmp ah, '['
0150+  087B C7 4E 08      jne _gets_loop
0151+  087E 19 01         mov al, 1
0152+  0880 05 03         syscall sys_io          ; receive in ah without echo
0153+  0882 76 64         cmp ah, 'd'
0154+  0884 C6 8F 08      je _gets_left_arrow
0155+  0887 76 63         cmp ah, 'c'
0156+  0889 C6 93 08      je _gets_right_arrow
0157+  088C 0A 4E 08      jmp _gets_loop
0158+  088F             _gets_left_arrow:
0159+  088F 7F            dec d
0160+  0890 0A 4E 08      jmp _gets_loop
0161+  0893             _gets_right_arrow:
0162+  0893 79            inc d
0163+  0894 0A 4E 08      jmp _gets_loop
0164+  0897             _gets_escape:
0165+  0897 19 01         mov al, 1
0166+  0899 05 03         syscall sys_io      ; receive in ah
0167+  089B 76 6E         cmp ah, 'n'
0168+  089D C6 BC 08      je _gets_lf
0169+  08A0 76 72         cmp ah, 'r'
0170+  08A2 C6 C3 08      je _gets_cr
0171+  08A5 76 30         cmp ah, '0'
0172+  08A7 C6 CA 08      je _gets_null
0173+  08AA 76 5C         cmp ah, $5c  ; '\'
0174+  08AC C6 B5 08      je _gets_slash
0175+  08AF 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  08B0 3E            mov [d], al
0177+  08B1 79            inc d
0178+  08B2 0A 4E 08      jmp _gets_loop
0179+  08B5             _gets_slash:
0180+  08B5 19 5C         mov al, $5c
0181+  08B7 3E            mov [d], al
0182+  08B8 79            inc d
0183+  08B9 0A 4E 08      jmp _gets_loop
0184+  08BC             _gets_lf:
0185+  08BC 19 0A         mov al, $0a
0186+  08BE 3E            mov [d], al
0187+  08BF 79            inc d
0188+  08C0 0A 4E 08      jmp _gets_loop
0189+  08C3             _gets_cr:
0190+  08C3 19 0D         mov al, $0d
0191+  08C5 3E            mov [d], al
0192+  08C6 79            inc d
0193+  08C7 0A 4E 08      jmp _gets_loop
0194+  08CA             _gets_null:
0195+  08CA 19 00         mov al, $00
0196+  08CC 3E            mov [d], al
0197+  08CD 79            inc d
0198+  08CE 0A 4E 08      jmp _gets_loop
0199+  08D1             _gets_end:
0200+  08D1 19 00         mov al, 0
0201+  08D3 3E            mov [d], al        ; terminate string
0202+  08D4 E7            pop d
0203+  08D5 E4            pop a
0204+  08D6 09            ret
0205+  08D7             
0206+  08D7             
0207+  08D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  08D7             ;; input text
0209+  08D7             ;; terminated with ctrl+d
0210+  08D7             ;; pointer in d
0211+  08D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  08D7             _gettxt:
0213+  08D7 D7            push a
0214+  08D8 DA            push d
0215+  08D9             _gettxt_loop:
0216+  08D9 19 01         mov al, 1
0217+  08DB 05 03         syscall sys_io      ; receive in ah
0218+  08DD 76 04         cmp ah, 4      ; eot
0219+  08DF C6 18 09      je _gettxt_end
0220+  08E2 76 08         cmp ah, $08      ; check for backspace
0221+  08E4 C6 14 09      je _gettxt_backspace
0222+  08E7 76 5C         cmp ah, $5c        ; '\'
0223+  08E9 C6 F2 08      je _gettxt_escape
0224+  08EC 1A            mov al, ah
0225+  08ED 3E            mov [d], al
0226+  08EE 79            inc d
0227+  08EF 0A D9 08      jmp _gettxt_loop
0228+  08F2             _gettxt_escape:
0229+  08F2 19 01         mov al, 1
0230+  08F4 05 03         syscall sys_io      ; receive in ah
0231+  08F6 76 6E         cmp ah, 'n'
0232+  08F8 C6 06 09      je _gettxt_lf
0233+  08FB 76 72         cmp ah, 'r'
0234+  08FD C6 0D 09      je _gettxt_cr
0235+  0900 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  0901 3E            mov [d], al
0237+  0902 79            inc d
0238+  0903 0A D9 08      jmp _gettxt_loop
0239+  0906             _gettxt_lf:
0240+  0906 19 0A         mov al, $0a
0241+  0908 3E            mov [d], al
0242+  0909 79            inc d
0243+  090A 0A D9 08      jmp _gettxt_loop
0244+  090D             _gettxt_cr:
0245+  090D 19 0D         mov al, $0d
0246+  090F 3E            mov [d], al
0247+  0910 79            inc d
0248+  0911 0A D9 08      jmp _gettxt_loop
0249+  0914             _gettxt_backspace:
0250+  0914 7F            dec d
0251+  0915 0A D9 08      jmp _gettxt_loop
0252+  0918             _gettxt_end:
0253+  0918 19 00         mov al, 0
0254+  091A 3E            mov [d], al        ; terminate string
0255+  091B E7            pop d
0256+  091C E4            pop a
0257+  091D 09            ret
0258+  091E             
0259+  091E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  091E             ; print new line
0261+  091E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  091E             printnl:
0263+  091E D7            push a
0264+  091F 10 00 0A      mov a, $0a00
0265+  0922 05 03         syscall sys_io
0266+  0924 10 00 0D      mov a, $0d00
0267+  0927 05 03         syscall sys_io
0268+  0929 E4            pop a
0269+  092A 09            ret
0270+  092B             
0271+  092B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  092B             ; _strtoint
0273+  092B             ; 4 digit hex string number in d
0274+  092B             ; integer returned in a
0275+  092B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  092B             _strtointx:
0277+  092B D8            push b
0278+  092C 32            mov bl, [d]
0279+  092D 37            mov bh, bl
0280+  092E 33 01 00      mov bl, [d + 1]
0281+  0931 07 02 08      call _atoi        ; convert to int in al
0282+  0934 23            mov ah, al        ; move to ah
0283+  0935 33 02 00      mov bl, [d + 2]
0284+  0938 37            mov bh, bl
0285+  0939 33 03 00      mov bl, [d + 3]
0286+  093C 07 02 08      call _atoi        ; convert to int in al
0287+  093F E5            pop b
0288+  0940 09            ret
0289+  0941             
0290+  0941             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  0941             ; _strtoint
0292+  0941             ; 5 digit base10 string number in d
0293+  0941             ; integer returned in a
0294+  0941             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  0941             _strtoint:
0296+  0941 E2            push si
0297+  0942 D8            push b
0298+  0943 D9            push c
0299+  0944 DA            push d
0300+  0945 07 A4 07      call _strlen      ; get string length in c
0301+  0948 7E            dec c
0302+  0949 FD 4E         mov si, d
0303+  094B 12            mov a, c
0304+  094C FD 99         shl a
0305+  094E 3B C5 0A      mov d, table_power
0306+  0951 59            add d, a
0307+  0952 38 00 00      mov c, 0
0308+  0955             _strtoint_l0:
0309+  0955 F6            lodsb      ; load ascii to al
0310+  0956 B9 00         cmp al, 0
0311+  0958 C6 6B 09      je _strtoint_end
0312+  095B 6F 30         sub al, $30    ; make into integer
0313+  095D 22 00         mov ah, 0
0314+  095F 2A            mov b, [d]
0315+  0960 AC            mul a, b      ; result in b since it fits in 16bits
0316+  0961 11            mov a, b
0317+  0962 28            mov b, c
0318+  0963 54            add a, b
0319+  0964 39            mov c, a
0320+  0965 63 02 00      sub d, 2
0321+  0968 0A 55 09      jmp _strtoint_l0
0322+  096B             _strtoint_end:
0323+  096B 12            mov a, c
0324+  096C E7            pop d
0325+  096D E6            pop c
0326+  096E E5            pop b
0327+  096F EF            pop si
0328+  0970 09            ret
0329+  0971             
0330+  0971             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  0971             ; print null terminated string
0332+  0971             ; pointer in d
0333+  0971             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  0971             _puts:
0335+  0971 D7            push a
0336+  0972 DA            push d
0337+  0973             _puts_l1:
0338+  0973 1E            mov al, [d]
0339+  0974 B9 00         cmp al, 0
0340+  0976 C6 82 09      jz _puts_end
0341+  0979 23            mov ah, al
0342+  097A 19 00         mov al, 0
0343+  097C 05 03         syscall sys_io
0344+  097E 79            inc d
0345+  097F 0A 73 09      jmp _puts_l1
0346+  0982             _puts_end:
0347+  0982 E7            pop d
0348+  0983 E4            pop a
0349+  0984 09            ret
0350+  0985             
0351+  0985             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  0985             ; print n size string
0353+  0985             ; pointer in d
0354+  0985             ; size in c
0355+  0985             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  0985             _putsn:
0357+  0985 DB            push al
0358+  0986 DA            push d
0359+  0987 D9            push c
0360+  0988             _putsn_l0:
0361+  0988 1E            mov al, [d]
0362+  0989 23            mov ah, al
0363+  098A 19 00         mov al, 0
0364+  098C 05 03         syscall sys_io
0365+  098E 79            inc d
0366+  098F 7E            dec c  
0367+  0990 C2 00 00      cmp c, 0
0368+  0993 C7 88 09      jne _putsn_l0
0369+  0996             _putsn_end:
0370+  0996 E6            pop c
0371+  0997 E7            pop d
0372+  0998 E8            pop al
0373+  0999 09            ret
0374+  099A             
0375+  099A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  099A             ; print 16bit decimal number
0377+  099A             ; input number in a
0378+  099A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  099A             print_u16d:
0380+  099A D7            push a
0381+  099B D8            push b
0382+  099C FD D8         push g
0383+  099E 26 10 27      mov b, 10000
0384+  09A1 AE            div a, b      ; get 10000's coeff.
0385+  09A2 07 C6 09      call print_number
0386+  09A5 11            mov a, b
0387+  09A6 26 E8 03      mov b, 1000
0388+  09A9 AE            div a, b      ; get 1000's coeff.
0389+  09AA 07 C6 09      call print_number
0390+  09AD 11            mov a, b
0391+  09AE 26 64 00      mov b, 100
0392+  09B1 AE            div a, b
0393+  09B2 07 C6 09      call print_number
0394+  09B5 11            mov a, b
0395+  09B6 26 0A 00      mov b, 10
0396+  09B9 AE            div a, b
0397+  09BA 07 C6 09      call print_number
0398+  09BD 1B            mov al, bl      ; 1's coeff in bl
0399+  09BE 07 C6 09      call print_number
0400+  09C1 FD F1         pop g
0401+  09C3 E5            pop b
0402+  09C4 E4            pop a
0403+  09C5 09            ret
0404+  09C6             
0405+  09C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  09C6             ; print al
0407+  09C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  09C6             print_number:
0409+  09C6 6A 30         add al, $30
0410+  09C8 23            mov ah, al
0411+  09C9 07 45 08      call _putchar
0412+  09CC 09            ret
0413+  09CD             
0414+  09CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  09CD             ; print 16bit hex integer
0416+  09CD             ; integer value in reg b
0417+  09CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  09CD             print_u16x:
0419+  09CD D7            push a
0420+  09CE D8            push b
0421+  09CF DD            push bl
0422+  09D0 30            mov bl, bh
0423+  09D1 07 13 08      call _itoa        ; convert bh to char in a
0424+  09D4 2F            mov bl, al        ; save al
0425+  09D5 19 00         mov al, 0
0426+  09D7 05 03         syscall sys_io        ; display ah
0427+  09D9 24            mov ah, bl        ; retrieve al
0428+  09DA 19 00         mov al, 0
0429+  09DC 05 03         syscall sys_io        ; display al
0430+  09DE             
0431+  09DE EA            pop bl
0432+  09DF 07 13 08      call _itoa        ; convert bh to char in a
0433+  09E2 2F            mov bl, al        ; save al
0434+  09E3 19 00         mov al, 0
0435+  09E5 05 03         syscall sys_io        ; display ah
0436+  09E7 24            mov ah, bl        ; retrieve al
0437+  09E8 19 00         mov al, 0
0438+  09EA 05 03         syscall sys_io        ; display al
0439+  09EC             
0440+  09EC E5            pop b
0441+  09ED E4            pop a
0442+  09EE 09            ret
0443+  09EF             
0444+  09EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  09EF             ; input 16bit hex integer
0446+  09EF             ; read 16bit integer into a
0447+  09EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  09EF             scan_u16x:
0449+  09EF F8 10 00      enter 16
0450+  09F2 D8            push b
0451+  09F3 DA            push d
0452+  09F4             
0453+  09F4 FA F1 FF      lea d, [bp + -15]
0454+  09F7 07 4C 08      call _gets        ; get number
0455+  09FA             
0456+  09FA 32            mov bl, [d]
0457+  09FB 37            mov bh, bl
0458+  09FC 33 01 00      mov bl, [d + 1]
0459+  09FF 07 02 08      call _atoi        ; convert to int in al
0460+  0A02 23            mov ah, al        ; move to ah
0461+  0A03             
0462+  0A03 33 02 00      mov bl, [d + 2]
0463+  0A06 37            mov bh, bl
0464+  0A07 33 03 00      mov bl, [d + 3]
0465+  0A0A 07 02 08      call _atoi        ; convert to int in al
0466+  0A0D             
0467+  0A0D E7            pop d
0468+  0A0E E5            pop b
0469+  0A0F F9            leave
0470+  0A10 09            ret
0471+  0A11             
0472+  0A11             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  0A11             ; print 8bit hex integer
0474+  0A11             ; integer value in reg bl
0475+  0A11             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0A11             print_u8x:
0477+  0A11 D7            push a
0478+  0A12 DD            push bl
0479+  0A13             
0480+  0A13 07 13 08      call _itoa        ; convert bl to char in a
0481+  0A16 2F            mov bl, al        ; save al
0482+  0A17 19 00         mov al, 0
0483+  0A19 05 03         syscall sys_io        ; display ah
0484+  0A1B 24            mov ah, bl        ; retrieve al
0485+  0A1C 19 00         mov al, 0
0486+  0A1E 05 03         syscall sys_io        ; display al
0487+  0A20             
0488+  0A20 EA            pop bl
0489+  0A21 E4            pop a
0490+  0A22 09            ret
0491+  0A23             
0492+  0A23             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  0A23             ; print 8bit decimal unsigned number
0494+  0A23             ; input number in al
0495+  0A23             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  0A23             print_u8d:
0497+  0A23 D7            push a
0498+  0A24 D8            push b
0499+  0A25 FD D8         push g
0500+  0A27 22 00         mov ah, 0
0501+  0A29 26 64 00      mov b, 100
0502+  0A2C AE            div a, b
0503+  0A2D D8            push b      ; save remainder
0504+  0A2E B9 00         cmp al, 0
0505+  0A30 C6 3A 0A      je skip100
0506+  0A33 6A 30         add al, $30
0507+  0A35 23            mov ah, al
0508+  0A36 19 00         mov al, 0
0509+  0A38 05 03         syscall sys_io  ; print coeff
0510+  0A3A             skip100:
0511+  0A3A E4            pop a
0512+  0A3B 22 00         mov ah, 0
0513+  0A3D 26 0A 00      mov b, 10
0514+  0A40 AE            div a, b
0515+  0A41 D8            push b      ; save remainder
0516+  0A42 B9 00         cmp al, 0
0517+  0A44 C6 4E 0A      je skip10
0518+  0A47 6A 30         add al, $30
0519+  0A49 23            mov ah, al
0520+  0A4A 19 00         mov al, 0
0521+  0A4C 05 03         syscall sys_io  ; print coeff
0522+  0A4E             skip10:
0523+  0A4E E4            pop a
0524+  0A4F 1B            mov al, bl
0525+  0A50 6A 30         add al, $30
0526+  0A52 23            mov ah, al
0527+  0A53 19 00         mov al, 0
0528+  0A55 05 03         syscall sys_io  ; print coeff
0529+  0A57 FD F1         pop g
0530+  0A59 E5            pop b
0531+  0A5A E4            pop a
0532+  0A5B 09            ret
0533+  0A5C             
0534+  0A5C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  0A5C             ; input 8bit hex integer
0536+  0A5C             ; read 8bit integer into al
0537+  0A5C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  0A5C             scan_u8x:
0539+  0A5C F8 04 00      enter 4
0540+  0A5F D8            push b
0541+  0A60 DA            push d
0542+  0A61             
0543+  0A61 FA FD FF      lea d, [bp + -3]
0544+  0A64 07 4C 08      call _gets        ; get number
0545+  0A67             
0546+  0A67 32            mov bl, [d]
0547+  0A68 37            mov bh, bl
0548+  0A69 33 01 00      mov bl, [d + 1]
0549+  0A6C 07 02 08      call _atoi        ; convert to int in al
0550+  0A6F             
0551+  0A6F E7            pop d
0552+  0A70 E5            pop b
0553+  0A71 F9            leave
0554+  0A72 09            ret
0555+  0A73             
0556+  0A73             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  0A73             ; input decimal number
0558+  0A73             ; result in a
0559+  0A73             ; 655'\0'
0560+  0A73             ; low--------high
0561+  0A73             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  0A73             scan_u16d:
0563+  0A73 F8 08 00      enter 8
0564+  0A76 E2            push si
0565+  0A77 D8            push b
0566+  0A78 D9            push c
0567+  0A79 DA            push d
0568+  0A7A FA F9 FF      lea d, [bp +- 7]
0569+  0A7D 07 4C 08      call _gets
0570+  0A80 07 A4 07      call _strlen      ; get string length in c
0571+  0A83 7E            dec c
0572+  0A84 FD 4E         mov si, d
0573+  0A86 12            mov a, c
0574+  0A87 FD 99         shl a
0575+  0A89 3B C5 0A      mov d, table_power
0576+  0A8C 59            add d, a
0577+  0A8D 38 00 00      mov c, 0
0578+  0A90             mul_loop:
0579+  0A90 F6            lodsb      ; load ascii to al
0580+  0A91 B9 00         cmp al, 0
0581+  0A93 C6 A6 0A      je mul_exit
0582+  0A96 6F 30         sub al, $30    ; make into integer
0583+  0A98 22 00         mov ah, 0
0584+  0A9A 2A            mov b, [d]
0585+  0A9B AC            mul a, b      ; result in b since it fits in 16bits
0586+  0A9C 11            mov a, b
0587+  0A9D 28            mov b, c
0588+  0A9E 54            add a, b
0589+  0A9F 39            mov c, a
0590+  0AA0 63 02 00      sub d, 2
0591+  0AA3 0A 90 0A      jmp mul_loop
0592+  0AA6             mul_exit:
0593+  0AA6 12            mov a, c
0594+  0AA7 E7            pop d
0595+  0AA8 E6            pop c
0596+  0AA9 E5            pop b
0597+  0AAA EF            pop si
0598+  0AAB F9            leave
0599+  0AAC 09            ret
0600+  0AAD             
0601+  0AAD             
0602+  0AAD 30 31 32 33 s_hex_digits:    .db "0123456789abcdef"  
0602+  0AB1 34 35 36 37 
0602+  0AB5 38 39 61 62 
0602+  0AB9 63 64 65 66 
0603+  0ABD 1B 5B 32 6A s_telnet_clear:  .db "\033[2j\033[h", 0
0603+  0AC1 1B 5B 68 00 
0604+  0AC5             
0605+  0AC5             table_power:
0606+  0AC5 01 00         .dw 1
0607+  0AC7 0A 00         .dw 10
0608+  0AC9 64 00         .dw 100
0609+  0ACB E8 03         .dw 1000
0610+  0ACD 10 27         .dw 100000037   0ACF             .include "lib/ctype.asm"
0001+  0ACF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0ACF             ; ctype.s
0003+  0ACF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0ACF             
0005+  0ACF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0ACF             ;; c character classification is an operation provided by a group of functions in the ansi c standard library
0007+  0ACF             ;; for the c programming language. these functions are used to test characters for membership in a particular
0008+  0ACF             ;; class of characters, such as alphabetic characters, control characters, etc. both single-byte, and wide
0009+  0ACF             ;; characters are supported.
0010+  0ACF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0ACF             ;; _isalnum 
0012+  0ACF             ;; _isalpha 
0013+  0ACF             ;; islower 
0014+  0ACF             ;; isupper 
0015+  0ACF             ;; _isdigit 
0016+  0ACF             ;; isxdigit
0017+  0ACF             ;; iscntrl 
0018+  0ACF             ;; isgraph 
0019+  0ACF             ;; _isspace 
0020+  0ACF             ;; isblank 
0021+  0ACF             ;; isprint 
0022+  0ACF             ;; ispunct 
0023+  0ACF             ;; tolower 
0024+  0ACF             ;; toupper
0025+  0ACF             
0026+  0ACF             
0027+  0ACF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0ACF             ;; is alphanumeric
0029+  0ACF             ;; sets zf according with result
0030+  0ACF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0ACF             _isalnum:
0032+  0ACF 07 EC 0A    	call _isalpha
0033+  0AD2 C6 D8 0A    	je _isalnum_exit
0034+  0AD5 07 D9 0A    	call _isdigit
0035+  0AD8             _isalnum_exit:
0036+  0AD8 09          	ret	
0037+  0AD9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0AD9             ;; is digit
0039+  0AD9             ;; sets zf according with result
0040+  0AD9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0AD9             _isdigit:
0042+  0AD9 DB          	push al
0043+  0ADA B9 30       	cmp al, '0'
0044+  0ADC C8 E8 0A    	jlu _isdigit_false
0045+  0ADF B9 39       	cmp al, '9'
0046+  0AE1 D1 E8 0A    	jgu _isdigit_false
0047+  0AE4 87 00       	and al, 0	; set zf
0048+  0AE6 E8          	pop al
0049+  0AE7 09          	ret
0050+  0AE8             _isdigit_false:
0051+  0AE8 8B 01       	or al, 1	; clear zf
0052+  0AEA E8          	pop al
0053+  0AEB 09          	ret	
0054+  0AEC             	
0055+  0AEC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0AEC             ;; is alpha
0057+  0AEC             ;; sets zf according with result
0058+  0AEC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0AEC             _isalpha:
0060+  0AEC DB          	push al
0061+  0AED B9 5F       	cmp al, '_'
0062+  0AEF C6 0F 0B    	je _isalpha_true
0063+  0AF2 B9 2E       	cmp al, '.'
0064+  0AF4 C6 0F 0B    	je _isalpha_true
0065+  0AF7 B9 61       	cmp al, 'a'
0066+  0AF9 C8 0B 0B    	jlu _isalpha_false
0067+  0AFC B9 7A       	cmp al, 'z'
0068+  0AFE D1 0B 0B    	jgu _isalpha_false
0069+  0B01 B9 7A       	cmp al, 'z'
0070+  0B03 D0 0F 0B    	jleu _isalpha_true
0071+  0B06 B9 61       	cmp al, 'a'
0072+  0B08 C9 0F 0B    	jgeu _isalpha_true
0073+  0B0B             _isalpha_false:
0074+  0B0B 8B 01       	or al, 1	; clear zf
0075+  0B0D E8          	pop al
0076+  0B0E 09          	ret
0077+  0B0F             _isalpha_true:
0078+  0B0F 87 00       	and al, 0	; set zf
0079+  0B11 E8          	pop al
0080+  0B12 09          	ret
0081+  0B13             
0082+  0B13             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0B13             ;; is path-alpha
0084+  0B13             ;; sets zf according with result
0085+  0B13             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0B13             ispath:
0087+  0B13 DB          	push al
0088+  0B14 07 D9 0A    	call _isdigit
0089+  0B17 C6 41 0B    	je ispath_true
0090+  0B1A B9 5F       	cmp al, '_'
0091+  0B1C C6 41 0B    	je ispath_true
0092+  0B1F B9 2F       	cmp al, '/'
0093+  0B21 C6 41 0B    	je ispath_true
0094+  0B24 B9 2E       	cmp al, '.'
0095+  0B26 C6 41 0B    	je ispath_true
0096+  0B29 B9 61       	cmp al, 'a'
0097+  0B2B C8 3D 0B    	jlu ispath_false
0098+  0B2E B9 7A       	cmp al, 'z'
0099+  0B30 D1 3D 0B    	jgu ispath_false
0100+  0B33 B9 7A       	cmp al, 'z'
0101+  0B35 D0 41 0B    	jleu ispath_true
0102+  0B38 B9 61       	cmp al, 'a'
0103+  0B3A C9 41 0B    	jgeu ispath_true
0104+  0B3D             ispath_false:
0105+  0B3D 8B 01       	or al, 1	; clear zf
0106+  0B3F E8          	pop al
0107+  0B40 09          	ret
0108+  0B41             ispath_true:
0109+  0B41 87 00       	and al, 0	; set zf
0110+  0B43 E8          	pop al
0111+  0B44 09          	ret
0112+  0B45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B45             ;; is space
0114+  0B45             ;; sets zf according with result
0115+  0B45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B45             _isspace:
0117+  0B45 B9 20       	cmp al, $20		; ' '
0118+  0B47 C6 5B 0B    	je _isspace_exit
0119+  0B4A B9 09       	cmp al, $09		; '\t'
0120+  0B4C C6 5B 0B    	je _isspace_exit
0121+  0B4F B9 0A       	cmp al, $0a		; '\n'
0122+  0B51 C6 5B 0B    	je _isspace_exit
0123+  0B54 B9 0D       	cmp al, $0d		; '\r'
0124+  0B56 C6 5B 0B    	je _isspace_exit
0125+  0B59 B9 0B       	cmp al, $0b		; '\v'
0126+  0B5B             _isspace_exit:
0127+  0B5B 09          	ret	
0128+  0B5C             
0129+  0B5C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B5C             ; to lower
0131+  0B5C             ; input in al
0132+  0B5C             ; output in al
0133+  0B5C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B5C             _to_lower:
0135+  0B5C B9 7A       	cmp al, 'z'
0136+  0B5E D1 63 0B    	jgu _to_lower_ret
0137+  0B61 6A 20       	add al, $20				; convert to lower case
0138+  0B63             _to_lower_ret:
0139+  0B63 09          	ret
0140+  0B64             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B64             ; to upper
0142+  0B64             ; input in al
0143+  0B64             ; output in al
0144+  0B64             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B64             _to_upper:
0146+  0B64 B9 61       	cmp al, 'a'
0147+  0B66 C8 6B 0B    	jlu _to_upper_ret
0148+  0B69 6F 20       	sub al, $20			; convert to upper case
0149+  0B6B             _to_upper_ret:
0150+  0B6B 09          	ret
0151+  0B6C             
0038   0B6C             
0039   0B6C             .end
0040   0B6C             
0041   0B6C             
0042   0B6C             
tasm: Number of errors = 0
