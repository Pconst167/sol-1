0001   0000             .include "lib/kernel.exp"
0001+  0000             fdc_al_restore   .EQU  $0000
0002+  0000             fdc_al_step      .EQU  $0001
0003+  0000             fdc_al_step_in   .EQU  $0002
0004+  0000             fdc_al_step_out  .EQU  $0003
0005+  0000             fdc_al_seek      .EQU  $0004
0006+  0000             fdc_al_format_128 .EQU  $0005
0007+  0000             fdc_al_format_512 .EQU  $0006
0008+  0000             fdc_al_read_addr .EQU  $0007
0009+  0000             fdc_al_read_track .EQU  $0008
0010+  0000             fdc_al_read_sect .EQU  $0009
0011+  0000             fdc_al_write_sect .EQU  $000a
0012+  0000             fdc_al_force_int .EQU  $000b
0013+  0000             fdc_al_status0   .EQU  $000c
0014+  0000             fdc_al_status1   .EQU  $000d
0015+  0000             noname._7seg_display .EQU  $ffb0
0016+  0000             noname._fdc_config .EQU  $ffc0
0017+  0000             noname._fdc_status_0 .EQU  $ffc1
0018+  0000             noname._fdc_stat_cmd .EQU  $ffc8
0019+  0000             sys_break        .EQU  $0000
0020+  0000             sys_rtc          .EQU  $0001
0021+  0000             sys_ide          .EQU  $0002
0022+  0000             sys_io           .EQU  $0003
0023+  0000             sys_filesystem   .EQU  $0004
0024+  0000             sys_create_proc  .EQU  $0005
0025+  0000             sys_list_proc    .EQU  $0006
0026+  0000             sys_datetime     .EQU  $0007
0027+  0000             sys_reboot       .EQU  $0008
0028+  0000             sys_pause_proc   .EQU  $0009
0029+  0000             sys_resume_proc  .EQU  $000a
0030+  0000             sys_terminate_proc .EQU  $000b
0031+  0000             sys_system       .EQU  $000c
0032+  0000             sys_fdc          .EQU  $000d
0033+  0000             text_org         .EQU  $0400
0002   0000             
0003   0400             .org text_org			; origin at 1024
0004   0400             
0005   0400             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006   0400             ;; mv - move / change file name
0007   0400             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008   0400             cmd_mv:
0009   0400 10 00 00    	mov a, 0
0010   0403 42 55 06    	mov [prog], a
0011   0406 07 B6 04    	call get_token
0012   0409 FD 4D 59 06 	mov si, tokstr
0013   040D FD 4F 68 0B 	mov di, transient_data
0014   0411 07 C5 07    	call _strcpy
0015   0414             	
0016   0414 07 B6 04    	call get_token
0017   0417 FD 4D 59 06 	mov si, tokstr
0018   041B FD 4F E8 0B 	mov di, transient_data + 128
0019   041F 07 C5 07    	call _strcpy
0020   0422             
0021   0422 3B 68 0B    	mov d, transient_data
0022   0425 19 0F       	mov al, 15	; mv command
0023   0427 05 04       	syscall sys_filesystem
0024   0429             	
0025   0429 05 0B       	syscall sys_terminate_proc
0026   042B             
0027   042B             
0028   042B             .include "lib/token.asm"
0001+  042B             toktyp_identifier  .equ 0
0002+  042B             toktyp_keyword     .equ 1
0003+  042B             toktyp_delimiter   .equ 2
0004+  042B             toktyp_string      .equ 3
0005+  042B             toktyp_char        .equ 4
0006+  042B             toktyp_numeric     .equ 5
0007+  042B             toktyp_end         .equ 6
0008+  042B             
0009+  042B             tok_null           .equ 0
0010+  042B             tok_fslash         .equ 1
0011+  042B             tok_times          .equ 2
0012+  042B             tok_plus           .equ 3
0013+  042B             tok_minus          .equ 4
0014+  042B             tok_dot            .equ 5
0015+  042B             tok_semi           .equ 6
0016+  042B             tok_angle          .equ 7
0017+  042B             tok_tilde          .equ 8
0018+  042B             tok_equal          .equ 9
0019+  042B             tok_colon          .equ 10
0020+  042B             tok_comma          .equ 11
0021+  042B             
0022+  042B             tok_end            .equ 20
0023+  042B             
0024+  042B             
0025+  042B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  042B             ;; read a full command argment from shell input buffer
0027+  042B             ;; argument is written into tokstr
0028+  042B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  042B             get_arg:
0030+  042B D7            push a
0031+  042C E2            push si
0032+  042D E3            push di
0033+  042E 19 00         mov al, 0
0034+  0430 3D 59 06      mov [tokstr], al      ; nullify tokstr string
0035+  0433 14 55 06      mov a, [prog]
0036+  0436 4D            mov si, a
0037+  0437 FD 4F 59 06   mov di, tokstr
0038+  043B             get_arg_skip_spaces:
0039+  043B F6            lodsb
0040+  043C 07 41 0B      call _isspace
0041+  043F C6 3B 04      je get_arg_skip_spaces
0042+  0442             get_arg_l0:
0043+  0442 B9 3B         cmp al, $3b        ; check if is ';'
0044+  0444 C6 51 04      je get_arg_end
0045+  0447 B9 00         cmp al, 0
0046+  0449 C6 51 04      je get_arg_end      ; check if end of input
0047+  044C F7            stosb
0048+  044D F6            lodsb
0049+  044E 0A 42 04      jmp get_arg_l0
0050+  0451             get_arg_end:
0051+  0451 19 00         mov al, 0
0052+  0453 F7            stosb
0053+  0454 D5 01 00      sub si, 1
0054+  0457 4E            mov a, si
0055+  0458 42 55 06      mov [prog], a    ; update pointer
0056+  045B F0            pop di
0057+  045C EF            pop si
0058+  045D E4            pop a
0059+  045E 09            ret
0060+  045F             
0061+  045F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  045F             ;; read a path formation from shell input buffer
0063+  045F             ;; path is written into tokstr
0064+  045F             ;; /usr/bin
0065+  045F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  045F             get_path:
0067+  045F D7            push a
0068+  0460 E2            push si
0069+  0461 E3            push di
0070+  0462 19 00         mov al, 0
0071+  0464 3D 59 06      mov [tokstr], al      ; nullify tokstr string
0072+  0467 14 55 06      mov a, [prog]
0073+  046A 4D            mov si, a
0074+  046B FD 4F 59 06   mov di, tokstr
0075+  046F             get_path_skip_spaces:
0076+  046F F6            lodsb
0077+  0470 07 41 0B      call _isspace
0078+  0473 C6 6F 04      je get_path_skip_spaces
0079+  0476             get_path_is_pathchar:
0080+  0476 F7            stosb
0081+  0477 F6            lodsb
0082+  0478 07 CB 0A      call _isalnum      ;check if is alphanumeric
0083+  047B C6 76 04      je get_path_is_pathchar
0084+  047E B9 2F         cmp al, '/'        ; check if is '/'
0085+  0480 C6 76 04      je get_path_is_pathchar
0086+  0483 19 00         mov al, 0
0087+  0485 F7            stosb
0088+  0486 D5 01 00      sub si, 1
0089+  0489 4E            mov a, si
0090+  048A 42 55 06      mov [prog], a    ; update pointer
0091+  048D             get_path_end:
0092+  048D F0            pop di
0093+  048E EF            pop si
0094+  048F E4            pop a
0095+  0490 09            ret
0096+  0491             
0097+  0491             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  0491             ;; read a line
0099+  0491             ;; line is written into tokstr
0100+  0491             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  0491             get_line:
0102+  0491 D7            push a
0103+  0492 E2            push si
0104+  0493 E3            push di
0105+  0494 19 00         mov al, 0
0106+  0496 3D 59 06      mov [tokstr], al      ; nullify tokstr string
0107+  0499 14 55 06      mov a, [prog]
0108+  049C 4D            mov si, a
0109+  049D FD 4F 59 06   mov di, tokstr
0110+  04A1             get_line_l0:
0111+  04A1 F6            lodsb
0112+  04A2 B9 0A         cmp al, $0a    ; check for new line
0113+  04A4 C6 AB 04      je get_line_exit
0114+  04A7 F7            stosb
0115+  04A8 0A A1 04      jmp get_line_l0
0116+  04AB             get_line_exit:
0117+  04AB 19 00         mov al, 0
0118+  04AD F7            stosb
0119+  04AE 4E            mov a, si
0120+  04AF 42 55 06      mov [prog], a    ; update pointer
0121+  04B2 F0            pop di
0122+  04B3 EF            pop si
0123+  04B4 E4            pop a
0124+  04B5 09            ret
0125+  04B6             
0126+  04B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  04B6             ;; token parser
0128+  04B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  04B6             get_token:
0130+  04B6 D7            push a
0131+  04B7 DA            push d
0132+  04B8 E2            push si
0133+  04B9 E3            push di
0134+  04BA 19 00         mov al, 0
0135+  04BC 3D 59 06      mov [tokstr], al      ; nullify tokstr string
0136+  04BF 19 00         mov al, tok_null
0137+  04C1 3D 58 06      mov [tok], al        ; nullify token
0138+  04C4 14 55 06      mov a, [prog]
0139+  04C7 4D            mov si, a
0140+  04C8 FD 4F 59 06   mov di, tokstr
0141+  04CC             get_tok_skip_spaces:
0142+  04CC F6            lodsb
0143+  04CD 07 41 0B      call _isspace
0144+  04D0 C6 CC 04      je get_tok_skip_spaces
0145+  04D3 B9 00         cmp al, 0      ; check for end of input (null)
0146+  04D5 C6 BA 05      je get_token_end
0147+  04D8 B9 23         cmp al, '#'      ; comments!
0148+  04DA C6 E8 05      je get_tok_comment
0149+  04DD 07 CB 0A      call _isalnum
0150+  04E0 C6 C7 05      jz is_alphanumeric
0151+  04E3             ; other token types
0152+  04E3             get_token_slash:
0153+  04E3 B9 2F         cmp al, '/'        ; check if '/'
0154+  04E5 C7 FD 04      jne get_token_minus
0155+  04E8 F7            stosb          ; store '/' into token string
0156+  04E9 19 00         mov al, 0
0157+  04EB F7            stosb          ; terminate token string
0158+  04EC 19 01         mov al, tok_fslash
0159+  04EE 3D 58 06      mov [tok], al      
0160+  04F1 19 02         mov al, toktyp_delimiter
0161+  04F3 3D 57 06      mov [toktyp], al
0162+  04F6 4E            mov a, si
0163+  04F7 42 55 06      mov [prog], a    ; update pointer
0164+  04FA 0A E3 05      jmp get_token_return
0165+  04FD             get_token_minus:
0166+  04FD B9 2D         cmp al, '-'        ; check if '-'
0167+  04FF C7 17 05      jne get_token_comma
0168+  0502 F7            stosb          ; store '-' into token string
0169+  0503 19 00         mov al, 0
0170+  0505 F7            stosb          ; terminate token string
0171+  0506 19 04         mov al, tok_minus
0172+  0508 3D 58 06      mov [tok], al      
0173+  050B 19 02         mov al, toktyp_delimiter
0174+  050D 3D 57 06      mov [toktyp], al
0175+  0510 4E            mov a, si
0176+  0511 42 55 06      mov [prog], a    ; update pointer
0177+  0514 0A E3 05      jmp get_token_return
0178+  0517             get_token_comma:
0179+  0517 B9 2C         cmp al, ','        ; check if ','
0180+  0519 C7 31 05      jne get_token_semi
0181+  051C F7            stosb          ; store ',' into token string
0182+  051D 19 00         mov al, 0
0183+  051F F7            stosb          ; terminate token string
0184+  0520 19 0B         mov al, tok_comma
0185+  0522 3D 58 06      mov [tok], al      
0186+  0525 19 02         mov al, toktyp_delimiter
0187+  0527 3D 57 06      mov [toktyp], al
0188+  052A 4E            mov a, si
0189+  052B 42 55 06      mov [prog], a    ; update pointer
0190+  052E 0A E3 05      jmp get_token_return
0191+  0531             get_token_semi:
0192+  0531 B9 3B         cmp al, $3b        ; check if ';'
0193+  0533 C7 4B 05      jne get_token_colon
0194+  0536 F7            stosb          ; store ';' into token string
0195+  0537 19 00         mov al, 0
0196+  0539 F7            stosb          ; terminate token string
0197+  053A 19 06         mov al, tok_semi
0198+  053C 3D 58 06      mov [tok], al      
0199+  053F 19 02         mov al, toktyp_delimiter
0200+  0541 3D 57 06      mov [toktyp], al
0201+  0544 4E            mov a, si
0202+  0545 42 55 06      mov [prog], a    ; update pointer
0203+  0548 0A E3 05      jmp get_token_return
0204+  054B             get_token_colon:
0205+  054B B9 3A         cmp al, $3a        ; check if ':'
0206+  054D C7 65 05      jne get_token_angle
0207+  0550 F7            stosb          ; store ':' into token string
0208+  0551 19 00         mov al, 0
0209+  0553 F7            stosb          ; terminate token string
0210+  0554 19 0A         mov al, tok_colon
0211+  0556 3D 58 06      mov [tok], al      
0212+  0559 19 02         mov al, toktyp_delimiter
0213+  055B 3D 57 06      mov [toktyp], al
0214+  055E 4E            mov a, si
0215+  055F 42 55 06      mov [prog], a    ; update pointer
0216+  0562 0A E3 05      jmp get_token_return
0217+  0565             get_token_angle:
0218+  0565 B9 3E         cmp al, $3e        ; check if '>'
0219+  0567 C7 7F 05      jne get_token_tilde
0220+  056A F7            stosb          ; store '>' into token string
0221+  056B 19 00         mov al, 0
0222+  056D F7            stosb          ; terminate token string
0223+  056E 19 07         mov al, tok_angle
0224+  0570 3D 58 06      mov [tok], al      
0225+  0573 19 02         mov al, toktyp_delimiter
0226+  0575 3D 57 06      mov [toktyp], al
0227+  0578 4E            mov a, si
0228+  0579 42 55 06      mov [prog], a    ; update pointer
0229+  057C 0A E3 05      jmp get_token_return
0230+  057F             get_token_tilde:
0231+  057F B9 7E         cmp al, '~'        ; check if '~'
0232+  0581 C7 99 05      jne get_token_equal
0233+  0584 F7            stosb          ; store '~' into token string
0234+  0585 19 00         mov al, 0
0235+  0587 F7            stosb          ; terminate token string
0236+  0588 19 08         mov al, tok_tilde
0237+  058A 3D 58 06      mov [tok], al      
0238+  058D 19 02         mov al, toktyp_delimiter
0239+  058F 3D 57 06      mov [toktyp], al
0240+  0592 4E            mov a, si
0241+  0593 42 55 06      mov [prog], a    ; update pointer
0242+  0596 0A E3 05      jmp get_token_return
0243+  0599             get_token_equal:
0244+  0599 B9 3D         cmp al, '='        ; check if '='
0245+  059B C7 B3 05      jne get_token_skip
0246+  059E F7            stosb          ; store '=' into token string
0247+  059F 19 00         mov al, 0
0248+  05A1 F7            stosb          ; terminate token string
0249+  05A2 19 09         mov al, tok_equal
0250+  05A4 3D 58 06      mov [tok], al      
0251+  05A7 19 02         mov al, toktyp_delimiter
0252+  05A9 3D 57 06      mov [toktyp], al
0253+  05AC 4E            mov a, si
0254+  05AD 42 55 06      mov [prog], a    ; update pointer
0255+  05B0 0A E3 05      jmp get_token_return
0256+  05B3             get_token_skip:
0257+  05B3 4E            mov a, si
0258+  05B4 42 55 06      mov [prog], a    ; update pointer
0259+  05B7 0A E3 05      jmp get_token_return
0260+  05BA             get_token_end:        ; end of file token
0261+  05BA 19 14         mov al, tok_end
0262+  05BC 3D 58 06      mov [tok], al
0263+  05BF 19 06         mov al, toktyp_end
0264+  05C1 3D 57 06      mov [toktyp], al
0265+  05C4 0A E3 05      jmp get_token_return
0266+  05C7             is_alphanumeric:
0267+  05C7 F7            stosb
0268+  05C8 F6            lodsb
0269+  05C9 07 CB 0A      call _isalnum      ;check if is alphanumeric
0270+  05CC C6 C7 05      jz is_alphanumeric
0271+  05CF B9 2E         cmp al, $2e        ; check if is '.'
0272+  05D1 C6 C7 05      je is_alphanumeric
0273+  05D4 19 00         mov al, 0
0274+  05D6 F7            stosb
0275+  05D7 19 00         mov al, toktyp_identifier
0276+  05D9 3D 57 06      mov [toktyp], al
0277+  05DC D5 01 00      sub si, 1
0278+  05DF 4E            mov a, si
0279+  05E0 42 55 06      mov [prog], a    ; update pointer
0280+  05E3             get_token_return:
0281+  05E3 F0            pop di
0282+  05E4 EF            pop si
0283+  05E5 E7            pop d
0284+  05E6 E4            pop a
0285+  05E7 09            ret
0286+  05E8             get_tok_comment:
0287+  05E8 F6            lodsb
0288+  05E9 B9 0A         cmp al, $0a      ; new line
0289+  05EB C7 E8 05      jne get_tok_comment
0290+  05EE 0A CC 04      jmp get_tok_skip_spaces
0291+  05F1             
0292+  05F1             
0293+  05F1             get_number:
0294+  05F1 D7            push a
0295+  05F2 DA            push d
0296+  05F3 E2            push si
0297+  05F4 E3            push di
0298+  05F5 19 00         mov al, 0
0299+  05F7 3D 59 06      mov [tokstr], al      ; nullify tokstr string
0300+  05FA 19 00         mov al, tok_null
0301+  05FC 3D 58 06      mov [tok], al        ; nullify token
0302+  05FF 14 55 06      mov a, [prog]
0303+  0602 4D            mov si, a
0304+  0603 FD 4F 59 06   mov di, tokstr
0305+  0607             get_number_skip_spaces:
0306+  0607 F6            lodsb
0307+  0608 07 41 0B      call _isspace
0308+  060B C6 07 06      je get_number_skip_spaces
0309+  060E B9 00         cmp al, 0      ; check for end of input (null)
0310+  0610 C7 20 06      jne get_number_l0
0311+  0613 19 14         mov al, tok_end
0312+  0615 3D 58 06      mov [tok], al
0313+  0618 19 06         mov al, toktyp_end
0314+  061A 3D 57 06      mov [toktyp], al
0315+  061D 0A 37 06      jmp get_number_return
0316+  0620             get_number_l0:
0317+  0620 F7            stosb
0318+  0621 F6            lodsb
0319+  0622 07 D5 0A      call _isdigit      ;check if is numeric
0320+  0625 C6 20 06      jz get_number_l0
0321+  0628 19 00         mov al, 0
0322+  062A F7            stosb
0323+  062B 19 05         mov al, toktyp_numeric
0324+  062D 3D 57 06      mov [toktyp], al
0325+  0630 D5 01 00      sub si, 1
0326+  0633 4E            mov a, si
0327+  0634 42 55 06      mov [prog], a    ; update pointer
0328+  0637             get_number_return:
0329+  0637 F0            pop di
0330+  0638 EF            pop si
0331+  0639 E7            pop d
0332+  063A E4            pop a
0333+  063B 09            ret
0334+  063C             
0335+  063C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  063C             ;; put back token
0337+  063C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0338+  063C             _putback:
0339+  063C D7            push a
0340+  063D E2            push si
0341+  063E FD 4D 59 06   mov si, tokstr  
0342+  0642             _putback_loop:
0343+  0642 F6            lodsb
0344+  0643 B9 00         cmp al, 0
0345+  0645 C6 52 06      je _putback_end
0346+  0648 14 55 06      mov a, [prog]
0347+  064B 7D            dec a
0348+  064C 42 55 06      mov [prog], a      ; update pointer
0349+  064F 0A 42 06      jmp _putback_loop
0350+  0652             _putback_end:
0351+  0652 EF            pop si
0352+  0653 E4            pop a
0353+  0654 09            ret
0354+  0655             
0355+  0655             
0356+  0655             
0357+  0655             
0358+  0655 00 00       prog:      .dw 0          ; pointer to current position in buffer
0359+  0657             
0360+  0657 00          toktyp:    .db 0          ; token type symbol
0361+  0658 00          tok:       .db 0          ; current token symbol
0362+  0659 00 00 00 00 tokstr:    .fill 256, 0   ; token as a string
0362+  065D 00 00 00 00 
0362+  0661 00 00 00 00 
0362+  0665 00 00 00 00 
0362+  0669 00 00 00 00 
0362+  066D 00 00 00 00 
0362+  0671 00 00 00 00 
0362+  0675 00 00 00 00 
0362+  0679 00 00 00 00 
0362+  067D 00 00 00 00 
0362+  0681 00 00 00 00 
0362+  0685 00 00 00 00 
0362+  0689 00 00 00 00 
0362+  068D 00 00 00 00 
0362+  0691 00 00 00 00 
0362+  0695 00 00 00 00 
0362+  0699 00 00 00 00 
0362+  069D 00 00 00 00 
0362+  06A1 00 00 00 00 
0362+  06A5 00 00 00 00 
0362+  06A9 00 00 00 00 
0362+  06AD 00 00 00 00 
0362+  06B1 00 00 00 00 
0362+  06B5 00 00 00 00 
0362+  06B9 00 00 00 00 
0362+  06BD 00 00 00 00 
0362+  06C1 00 00 00 00 
0362+  06C5 00 00 00 00 
0362+  06C9 00 00 00 00 
0362+  06CD 00 00 00 00 
0362+  06D1 00 00 00 00 
0362+  06D5 00 00 00 00 
0362+  06D9 00 00 00 00 
0362+  06DD 00 00 00 00 
0362+  06E1 00 00 00 00 
0362+  06E5 00 00 00 00 
0362+  06E9 00 00 00 00 
0362+  06ED 00 00 00 00 
0362+  06F1 00 00 00 00 
0362+  06F5 00 00 00 00 
0362+  06F9 00 00 00 00 
0362+  06FD 00 00 00 00 
0362+  0701 00 00 00 00 
0362+  0705 00 00 00 00 
0362+  0709 00 00 00 00 
0362+  070D 00 00 00 00 
0362+  0711 00 00 00 00 
0362+  0715 00 00 00 00 
0362+  0719 00 00 00 00 
0362+  071D 00 00 00 00 
0362+  0721 00 00 00 00 
0362+  0725 00 00 00 00 
0362+  0729 00 00 00 00 
0362+  072D 00 00 00 00 
0362+  0731 00 00 00 00 
0362+  0735 00 00 00 00 
0362+  0739 00 00 00 00 
0362+  073D 00 00 00 00 
0362+  0741 00 00 00 00 
0362+  0745 00 00 00 00 
0362+  0749 00 00 00 00 
0362+  074D 00 00 00 00 
0362+  0751 00 00 00 00 
0362+  0755 00 00 00 00 
0029   0759             .include "lib/stdio.asm"
0001+  0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0759             ; stdio.s
0003+  0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0759             .include "lib/string.asm"
0001++ 0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0759             ; string.s
0003++ 0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0759             
0005++ 0759             
0006++ 0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0759             ; _strrev
0008++ 0759             ; reverse a string
0009++ 0759             ; d = string address
0010++ 0759             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0759             ; 01234
0012++ 0759             _strrev:
0013++ 0759 4B          	pusha
0014++ 075A 07 A0 07    	call _strlen	; length in c
0015++ 075D 12          	mov a, c
0016++ 075E AF 01 00    	cmp a, 1
0017++ 0761 D0 7B 07    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 0764 7D          	dec a
0019++ 0765 FD 4E       	mov si, d	; beginning of string
0020++ 0767 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0769 59          	add d, a	; end of string
0022++ 076A 12          	mov a, c
0023++ 076B FD 9B       	shr a		; divide by 2
0024++ 076D 39          	mov c, a	; c now counts the steps
0025++ 076E             _strrev_l0:
0026++ 076E 32          	mov bl, [d]	; save load right-side char into bl
0027++ 076F F6          	lodsb		; load left-side char into al; increase si
0028++ 0770 3E          	mov [d], al	; store left char into right side
0029++ 0771 1B          	mov al, bl
0030++ 0772 F7          	stosb		; store right-side char into left-side; increase di
0031++ 0773 7E          	dec c
0032++ 0774 7F          	dec d
0033++ 0775 C2 00 00    	cmp c, 0
0034++ 0778 C7 6E 07    	jne _strrev_l0
0035++ 077B             _strrev_end:
0036++ 077B 4C          	popa
0037++ 077C 09          	ret
0038++ 077D             	
0039++ 077D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 077D             ; _strchr
0041++ 077D             ; search string in d for char in al
0042++ 077D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 077D             _strchr:
0044++ 077D             _strchr_l0:
0045++ 077D 32          	mov bl, [d]
0046++ 077E C1 00       	cmp bl, 0
0047++ 0780 C6 8B 07    	je _strchr_end
0048++ 0783 BA          	cmp al, bl
0049++ 0784 C6 8B 07    	je _strchr_end
0050++ 0787 79          	inc d
0051++ 0788 0A 7D 07    	jmp _strchr_l0
0052++ 078B             _strchr_end:
0053++ 078B 1B          	mov al, bl
0054++ 078C 09          	ret
0055++ 078D             
0056++ 078D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 078D             ; _strstr
0058++ 078D             ; find sub-string
0059++ 078D             ; str1 in si
0060++ 078D             ; str2 in di
0061++ 078D             ; si points to end of source string
0062++ 078D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 078D             _strstr:
0064++ 078D DB          	push al
0065++ 078E DA          	push d
0066++ 078F E3          	push di
0067++ 0790             _strstr_loop:
0068++ 0790 F3          	cmpsb					; compare a byte of the strings
0069++ 0791 C7 9C 07    	jne _strstr_ret
0070++ 0794 FC 00 00    	lea d, [di + 0]
0071++ 0797 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0799 C7 90 07    	jne _strstr_loop				; equal chars but not at end
0073++ 079C             _strstr_ret:
0074++ 079C F0          	pop di
0075++ 079D E7          	pop d
0076++ 079E E8          	pop al
0077++ 079F 09          	ret
0078++ 07A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 07A0             ; length of null terminated string
0080++ 07A0             ; result in c
0081++ 07A0             ; pointer in d
0082++ 07A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 07A0             _strlen:
0084++ 07A0 DA          	push d
0085++ 07A1 38 00 00    	mov c, 0
0086++ 07A4             _strlen_l1:
0087++ 07A4 BD 00       	cmp byte [d], 0
0088++ 07A6 C6 AE 07    	je _strlen_ret
0089++ 07A9 79          	inc d
0090++ 07AA 78          	inc c
0091++ 07AB 0A A4 07    	jmp _strlen_l1
0092++ 07AE             _strlen_ret:
0093++ 07AE E7          	pop d
0094++ 07AF 09          	ret
0095++ 07B0             
0096++ 07B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 07B0             ; strcmp
0098++ 07B0             ; compare two strings
0099++ 07B0             ; str1 in si
0100++ 07B0             ; str2 in di
0101++ 07B0             ; create a string compairon instrucion ?????
0102++ 07B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 07B0             _strcmp:
0104++ 07B0 DB          	push al
0105++ 07B1 DA          	push d
0106++ 07B2 E3          	push di
0107++ 07B3 E2          	push si
0108++ 07B4             _strcmp_loop:
0109++ 07B4 F3          	cmpsb					; compare a byte of the strings
0110++ 07B5 C7 C0 07    	jne _strcmp_ret
0111++ 07B8 FB FF FF    	lea d, [si +- 1]
0112++ 07BB BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 07BD C7 B4 07    	jne _strcmp_loop				; equal chars but not at end
0114++ 07C0             _strcmp_ret:
0115++ 07C0 EF          	pop si
0116++ 07C1 F0          	pop di
0117++ 07C2 E7          	pop d
0118++ 07C3 E8          	pop al
0119++ 07C4 09          	ret
0120++ 07C5             
0121++ 07C5             
0122++ 07C5             ; strcpy
0123++ 07C5             ; copy null terminated string from si to di
0124++ 07C5             ; source in si
0125++ 07C5             ; destination in di
0126++ 07C5             _strcpy:
0127++ 07C5 E2          	push si
0128++ 07C6 E3          	push di
0129++ 07C7 DB          	push al
0130++ 07C8             _strcpy_l1:
0131++ 07C8 F6          	lodsb
0132++ 07C9 F7          	stosb
0133++ 07CA B9 00       	cmp al, 0
0134++ 07CC C7 C8 07    	jne _strcpy_l1
0135++ 07CF             _strcpy_end:
0136++ 07CF E8          	pop al
0137++ 07D0 F0          	pop di
0138++ 07D1 EF          	pop si
0139++ 07D2 09          	ret
0140++ 07D3             
0141++ 07D3             ; strcat
0142++ 07D3             ; concatenate a null terminated string into string at di, from string at si
0143++ 07D3             ; source in si
0144++ 07D3             ; destination in di
0145++ 07D3             _strcat:
0146++ 07D3 E2          	push si
0147++ 07D4 E3          	push di
0148++ 07D5 D7          	push a
0149++ 07D6 DA          	push d
0150++ 07D7 50          	mov a, di
0151++ 07D8 3C          	mov d, a
0152++ 07D9             _strcat_goto_end_l1:
0153++ 07D9 BD 00       	cmp byte[d], 0
0154++ 07DB C6 E2 07    	je _strcat_start
0155++ 07DE 79          	inc d
0156++ 07DF 0A D9 07    	jmp _strcat_goto_end_l1
0157++ 07E2             _strcat_start:
0158++ 07E2 FD 50       	mov di, d
0159++ 07E4             _strcat_l1:
0160++ 07E4 F6          	lodsb
0161++ 07E5 F7          	stosb
0162++ 07E6 B9 00       	cmp al, 0
0163++ 07E8 C7 E4 07    	jne _strcat_l1
0164++ 07EB             _strcat_end:
0165++ 07EB E7          	pop d
0166++ 07EC E4          	pop a
0167++ 07ED F0          	pop di
0168++ 07EE EF          	pop si
0169++ 07EF 09          	ret
0170++ 07F0             
0171++ 07F0             
0005+  07F0             
0006+  07F0             
0007+  07F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  07F0             ; convert ascii 'o'..'f' to integer 0..15
0009+  07F0             ; ascii in bl
0010+  07F0             ; result in al
0011+  07F0             ; ascii for f = 0100 0110
0012+  07F0             ; ascii for 9 = 0011 1001
0013+  07F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  07F0             hex_ascii_encode:
0015+  07F0 1B            mov al, bl
0016+  07F1 93 40         test al, $40        ; test if letter or number
0017+  07F3 C7 F9 07      jnz hex_letter
0018+  07F6 87 0F         and al, $0f        ; get number
0019+  07F8 09            ret
0020+  07F9             hex_letter:
0021+  07F9 87 0F         and al, $0f        ; get letter
0022+  07FB 6A 09         add al, 9
0023+  07FD 09            ret
0024+  07FE             
0025+  07FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  07FE             ; atoi
0027+  07FE             ; 2 letter hex string in b
0028+  07FE             ; 8bit integer returned in al
0029+  07FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  07FE             _atoi:
0031+  07FE D8            push b
0032+  07FF 07 F0 07      call hex_ascii_encode      ; convert bl to 4bit code in al
0033+  0802 30            mov bl, bh
0034+  0803 DB            push al          ; save a
0035+  0804 07 F0 07      call hex_ascii_encode
0036+  0807 EA            pop bl  
0037+  0808 FD 9E 04      shl al, 4
0038+  080B 8C            or al, bl
0039+  080C E5            pop b
0040+  080D 09            ret  
0041+  080E             
0042+  080E             
0043+  080E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  080E             ; scanf
0045+  080E             ; no need for explanations!
0046+  080E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  080E             scanf:
0048+  080E 09            ret
0049+  080F             
0050+  080F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  080F             ; itoa
0052+  080F             ; 8bit value in bl
0053+  080F             ; 2 byte ascii result in a
0054+  080F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  080F             _itoa:
0056+  080F DA            push d
0057+  0810 D8            push b
0058+  0811 A7 00         mov bh, 0
0059+  0813 FD A4 04      shr bl, 4  
0060+  0816 74            mov d, b
0061+  0817 1F A9 0A      mov al, [d + s_hex_digits]
0062+  081A 23            mov ah, al
0063+  081B               
0064+  081B E5            pop b
0065+  081C D8            push b
0066+  081D A7 00         mov bh, 0
0067+  081F FD 87 0F      and bl, $0f
0068+  0822 74            mov d, b
0069+  0823 1F A9 0A      mov al, [d + s_hex_digits]
0070+  0826 E5            pop b
0071+  0827 E7            pop d
0072+  0828 09            ret
0073+  0829             
0074+  0829             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  0829             ; hex string to binary
0076+  0829             ; di = destination address
0077+  0829             ; si = source
0078+  0829             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  0829             _hex_to_int:
0080+  0829             _hex_to_int_l1:
0081+  0829 F6            lodsb          ; load from [si] to al
0082+  082A B9 00         cmp al, 0        ; check if ascii 0
0083+  082C C6 39 08      jz _hex_to_int_ret
0084+  082F 36            mov bh, al
0085+  0830 F6            lodsb
0086+  0831 2F            mov bl, al
0087+  0832 07 FE 07      call _atoi        ; convert ascii byte in b to int (to al)
0088+  0835 F7            stosb          ; store al to [di]
0089+  0836 0A 29 08      jmp _hex_to_int_l1
0090+  0839             _hex_to_int_ret:
0091+  0839 09            ret    
0092+  083A             
0093+  083A             
0094+  083A             
0095+  083A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  083A             ; getchar
0097+  083A             ; char in ah
0098+  083A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  083A             getch:
0100+  083A DB            push al
0101+  083B             getch_retry:
0102+  083B 19 01         mov al, 1
0103+  083D 05 03         syscall sys_io      ; receive in ah
0104+  083F E8            pop al
0105+  0840 09            ret
0106+  0841             
0107+  0841             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  0841             ; putchar
0109+  0841             ; char in ah
0110+  0841             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0841             _putchar:
0112+  0841 DB            push al
0113+  0842 19 00         mov al, 0
0114+  0844 05 03         syscall sys_io      ; char in ah
0115+  0846 E8            pop al
0116+  0847 09            ret
0117+  0848             
0118+  0848             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  0848             ;; input a string
0120+  0848             ;; terminates with null
0121+  0848             ;; pointer in d
0122+  0848             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  0848             _gets:
0124+  0848 D7            push a
0125+  0849 DA            push d
0126+  084A             _gets_loop:
0127+  084A 19 01         mov al, 1
0128+  084C 05 03         syscall sys_io      ; receive in ah
0129+  084E 76 1B         cmp ah, 27
0130+  0850 C6 71 08      je _gets_ansi_esc
0131+  0853 76 0A         cmp ah, $0a        ; lf
0132+  0855 C6 CD 08      je _gets_end
0133+  0858 76 0D         cmp ah, $0d        ; cr
0134+  085A C6 CD 08      je _gets_end
0135+  085D 76 5C         cmp ah, $5c        ; '\\'
0136+  085F C6 93 08      je _gets_escape
0137+  0862 76 08         cmp ah, $08      ; check for backspace
0138+  0864 C6 6D 08      je _gets_backspace
0139+  0867 1A            mov al, ah
0140+  0868 3E            mov [d], al
0141+  0869 79            inc d
0142+  086A 0A 4A 08      jmp _gets_loop
0143+  086D             _gets_backspace:
0144+  086D 7F            dec d
0145+  086E 0A 4A 08      jmp _gets_loop
0146+  0871             _gets_ansi_esc:
0147+  0871 19 01         mov al, 1
0148+  0873 05 03         syscall sys_io        ; receive in ah without echo
0149+  0875 76 5B         cmp ah, '['
0150+  0877 C7 4A 08      jne _gets_loop
0151+  087A 19 01         mov al, 1
0152+  087C 05 03         syscall sys_io          ; receive in ah without echo
0153+  087E 76 64         cmp ah, 'd'
0154+  0880 C6 8B 08      je _gets_left_arrow
0155+  0883 76 63         cmp ah, 'c'
0156+  0885 C6 8F 08      je _gets_right_arrow
0157+  0888 0A 4A 08      jmp _gets_loop
0158+  088B             _gets_left_arrow:
0159+  088B 7F            dec d
0160+  088C 0A 4A 08      jmp _gets_loop
0161+  088F             _gets_right_arrow:
0162+  088F 79            inc d
0163+  0890 0A 4A 08      jmp _gets_loop
0164+  0893             _gets_escape:
0165+  0893 19 01         mov al, 1
0166+  0895 05 03         syscall sys_io      ; receive in ah
0167+  0897 76 6E         cmp ah, 'n'
0168+  0899 C6 B8 08      je _gets_lf
0169+  089C 76 72         cmp ah, 'r'
0170+  089E C6 BF 08      je _gets_cr
0171+  08A1 76 30         cmp ah, '0'
0172+  08A3 C6 C6 08      je _gets_null
0173+  08A6 76 5C         cmp ah, $5c  ; '\'
0174+  08A8 C6 B1 08      je _gets_slash
0175+  08AB 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  08AC 3E            mov [d], al
0177+  08AD 79            inc d
0178+  08AE 0A 4A 08      jmp _gets_loop
0179+  08B1             _gets_slash:
0180+  08B1 19 5C         mov al, $5c
0181+  08B3 3E            mov [d], al
0182+  08B4 79            inc d
0183+  08B5 0A 4A 08      jmp _gets_loop
0184+  08B8             _gets_lf:
0185+  08B8 19 0A         mov al, $0a
0186+  08BA 3E            mov [d], al
0187+  08BB 79            inc d
0188+  08BC 0A 4A 08      jmp _gets_loop
0189+  08BF             _gets_cr:
0190+  08BF 19 0D         mov al, $0d
0191+  08C1 3E            mov [d], al
0192+  08C2 79            inc d
0193+  08C3 0A 4A 08      jmp _gets_loop
0194+  08C6             _gets_null:
0195+  08C6 19 00         mov al, $00
0196+  08C8 3E            mov [d], al
0197+  08C9 79            inc d
0198+  08CA 0A 4A 08      jmp _gets_loop
0199+  08CD             _gets_end:
0200+  08CD 19 00         mov al, 0
0201+  08CF 3E            mov [d], al        ; terminate string
0202+  08D0 E7            pop d
0203+  08D1 E4            pop a
0204+  08D2 09            ret
0205+  08D3             
0206+  08D3             
0207+  08D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  08D3             ;; input text
0209+  08D3             ;; terminated with ctrl+d
0210+  08D3             ;; pointer in d
0211+  08D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  08D3             _gettxt:
0213+  08D3 D7            push a
0214+  08D4 DA            push d
0215+  08D5             _gettxt_loop:
0216+  08D5 19 01         mov al, 1
0217+  08D7 05 03         syscall sys_io      ; receive in ah
0218+  08D9 76 04         cmp ah, 4      ; eot
0219+  08DB C6 14 09      je _gettxt_end
0220+  08DE 76 08         cmp ah, $08      ; check for backspace
0221+  08E0 C6 10 09      je _gettxt_backspace
0222+  08E3 76 5C         cmp ah, $5c        ; '\'
0223+  08E5 C6 EE 08      je _gettxt_escape
0224+  08E8 1A            mov al, ah
0225+  08E9 3E            mov [d], al
0226+  08EA 79            inc d
0227+  08EB 0A D5 08      jmp _gettxt_loop
0228+  08EE             _gettxt_escape:
0229+  08EE 19 01         mov al, 1
0230+  08F0 05 03         syscall sys_io      ; receive in ah
0231+  08F2 76 6E         cmp ah, 'n'
0232+  08F4 C6 02 09      je _gettxt_lf
0233+  08F7 76 72         cmp ah, 'r'
0234+  08F9 C6 09 09      je _gettxt_cr
0235+  08FC 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  08FD 3E            mov [d], al
0237+  08FE 79            inc d
0238+  08FF 0A D5 08      jmp _gettxt_loop
0239+  0902             _gettxt_lf:
0240+  0902 19 0A         mov al, $0a
0241+  0904 3E            mov [d], al
0242+  0905 79            inc d
0243+  0906 0A D5 08      jmp _gettxt_loop
0244+  0909             _gettxt_cr:
0245+  0909 19 0D         mov al, $0d
0246+  090B 3E            mov [d], al
0247+  090C 79            inc d
0248+  090D 0A D5 08      jmp _gettxt_loop
0249+  0910             _gettxt_backspace:
0250+  0910 7F            dec d
0251+  0911 0A D5 08      jmp _gettxt_loop
0252+  0914             _gettxt_end:
0253+  0914 19 00         mov al, 0
0254+  0916 3E            mov [d], al        ; terminate string
0255+  0917 E7            pop d
0256+  0918 E4            pop a
0257+  0919 09            ret
0258+  091A             
0259+  091A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  091A             ; print new line
0261+  091A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  091A             printnl:
0263+  091A D7            push a
0264+  091B 10 00 0A      mov a, $0a00
0265+  091E 05 03         syscall sys_io
0266+  0920 10 00 0D      mov a, $0d00
0267+  0923 05 03         syscall sys_io
0268+  0925 E4            pop a
0269+  0926 09            ret
0270+  0927             
0271+  0927             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  0927             ; _strtoint
0273+  0927             ; 4 digit hex string number in d
0274+  0927             ; integer returned in a
0275+  0927             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  0927             _strtointx:
0277+  0927 D8            push b
0278+  0928 32            mov bl, [d]
0279+  0929 37            mov bh, bl
0280+  092A 33 01 00      mov bl, [d + 1]
0281+  092D 07 FE 07      call _atoi        ; convert to int in al
0282+  0930 23            mov ah, al        ; move to ah
0283+  0931 33 02 00      mov bl, [d + 2]
0284+  0934 37            mov bh, bl
0285+  0935 33 03 00      mov bl, [d + 3]
0286+  0938 07 FE 07      call _atoi        ; convert to int in al
0287+  093B E5            pop b
0288+  093C 09            ret
0289+  093D             
0290+  093D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  093D             ; _strtoint
0292+  093D             ; 5 digit base10 string number in d
0293+  093D             ; integer returned in a
0294+  093D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  093D             _strtoint:
0296+  093D E2            push si
0297+  093E D8            push b
0298+  093F D9            push c
0299+  0940 DA            push d
0300+  0941 07 A0 07      call _strlen      ; get string length in c
0301+  0944 7E            dec c
0302+  0945 FD 4E         mov si, d
0303+  0947 12            mov a, c
0304+  0948 FD 99         shl a
0305+  094A 3B C1 0A      mov d, table_power
0306+  094D 59            add d, a
0307+  094E 38 00 00      mov c, 0
0308+  0951             _strtoint_l0:
0309+  0951 F6            lodsb      ; load ascii to al
0310+  0952 B9 00         cmp al, 0
0311+  0954 C6 67 09      je _strtoint_end
0312+  0957 6F 30         sub al, $30    ; make into integer
0313+  0959 22 00         mov ah, 0
0314+  095B 2A            mov b, [d]
0315+  095C AC            mul a, b      ; result in b since it fits in 16bits
0316+  095D 11            mov a, b
0317+  095E 28            mov b, c
0318+  095F 54            add a, b
0319+  0960 39            mov c, a
0320+  0961 63 02 00      sub d, 2
0321+  0964 0A 51 09      jmp _strtoint_l0
0322+  0967             _strtoint_end:
0323+  0967 12            mov a, c
0324+  0968 E7            pop d
0325+  0969 E6            pop c
0326+  096A E5            pop b
0327+  096B EF            pop si
0328+  096C 09            ret
0329+  096D             
0330+  096D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  096D             ; print null terminated string
0332+  096D             ; pointer in d
0333+  096D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  096D             _puts:
0335+  096D D7            push a
0336+  096E DA            push d
0337+  096F             _puts_l1:
0338+  096F 1E            mov al, [d]
0339+  0970 B9 00         cmp al, 0
0340+  0972 C6 7E 09      jz _puts_end
0341+  0975 23            mov ah, al
0342+  0976 19 00         mov al, 0
0343+  0978 05 03         syscall sys_io
0344+  097A 79            inc d
0345+  097B 0A 6F 09      jmp _puts_l1
0346+  097E             _puts_end:
0347+  097E E7            pop d
0348+  097F E4            pop a
0349+  0980 09            ret
0350+  0981             
0351+  0981             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  0981             ; print n size string
0353+  0981             ; pointer in d
0354+  0981             ; size in c
0355+  0981             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  0981             _putsn:
0357+  0981 DB            push al
0358+  0982 DA            push d
0359+  0983 D9            push c
0360+  0984             _putsn_l0:
0361+  0984 1E            mov al, [d]
0362+  0985 23            mov ah, al
0363+  0986 19 00         mov al, 0
0364+  0988 05 03         syscall sys_io
0365+  098A 79            inc d
0366+  098B 7E            dec c  
0367+  098C C2 00 00      cmp c, 0
0368+  098F C7 84 09      jne _putsn_l0
0369+  0992             _putsn_end:
0370+  0992 E6            pop c
0371+  0993 E7            pop d
0372+  0994 E8            pop al
0373+  0995 09            ret
0374+  0996             
0375+  0996             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  0996             ; print 16bit decimal number
0377+  0996             ; input number in a
0378+  0996             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0996             print_u16d:
0380+  0996 D7            push a
0381+  0997 D8            push b
0382+  0998 FD D8         push g
0383+  099A 26 10 27      mov b, 10000
0384+  099D AE            div a, b      ; get 10000's coeff.
0385+  099E 07 C2 09      call print_number
0386+  09A1 11            mov a, b
0387+  09A2 26 E8 03      mov b, 1000
0388+  09A5 AE            div a, b      ; get 1000's coeff.
0389+  09A6 07 C2 09      call print_number
0390+  09A9 11            mov a, b
0391+  09AA 26 64 00      mov b, 100
0392+  09AD AE            div a, b
0393+  09AE 07 C2 09      call print_number
0394+  09B1 11            mov a, b
0395+  09B2 26 0A 00      mov b, 10
0396+  09B5 AE            div a, b
0397+  09B6 07 C2 09      call print_number
0398+  09B9 1B            mov al, bl      ; 1's coeff in bl
0399+  09BA 07 C2 09      call print_number
0400+  09BD FD F1         pop g
0401+  09BF E5            pop b
0402+  09C0 E4            pop a
0403+  09C1 09            ret
0404+  09C2             
0405+  09C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  09C2             ; print al
0407+  09C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  09C2             print_number:
0409+  09C2 6A 30         add al, $30
0410+  09C4 23            mov ah, al
0411+  09C5 07 41 08      call _putchar
0412+  09C8 09            ret
0413+  09C9             
0414+  09C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  09C9             ; print 16bit hex integer
0416+  09C9             ; integer value in reg b
0417+  09C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  09C9             print_u16x:
0419+  09C9 D7            push a
0420+  09CA D8            push b
0421+  09CB DD            push bl
0422+  09CC 30            mov bl, bh
0423+  09CD 07 0F 08      call _itoa        ; convert bh to char in a
0424+  09D0 2F            mov bl, al        ; save al
0425+  09D1 19 00         mov al, 0
0426+  09D3 05 03         syscall sys_io        ; display ah
0427+  09D5 24            mov ah, bl        ; retrieve al
0428+  09D6 19 00         mov al, 0
0429+  09D8 05 03         syscall sys_io        ; display al
0430+  09DA             
0431+  09DA EA            pop bl
0432+  09DB 07 0F 08      call _itoa        ; convert bh to char in a
0433+  09DE 2F            mov bl, al        ; save al
0434+  09DF 19 00         mov al, 0
0435+  09E1 05 03         syscall sys_io        ; display ah
0436+  09E3 24            mov ah, bl        ; retrieve al
0437+  09E4 19 00         mov al, 0
0438+  09E6 05 03         syscall sys_io        ; display al
0439+  09E8             
0440+  09E8 E5            pop b
0441+  09E9 E4            pop a
0442+  09EA 09            ret
0443+  09EB             
0444+  09EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  09EB             ; input 16bit hex integer
0446+  09EB             ; read 16bit integer into a
0447+  09EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  09EB             scan_u16x:
0449+  09EB F8 10 00      enter 16
0450+  09EE D8            push b
0451+  09EF DA            push d
0452+  09F0             
0453+  09F0 FA F1 FF      lea d, [bp + -15]
0454+  09F3 07 48 08      call _gets        ; get number
0455+  09F6             
0456+  09F6 32            mov bl, [d]
0457+  09F7 37            mov bh, bl
0458+  09F8 33 01 00      mov bl, [d + 1]
0459+  09FB 07 FE 07      call _atoi        ; convert to int in al
0460+  09FE 23            mov ah, al        ; move to ah
0461+  09FF             
0462+  09FF 33 02 00      mov bl, [d + 2]
0463+  0A02 37            mov bh, bl
0464+  0A03 33 03 00      mov bl, [d + 3]
0465+  0A06 07 FE 07      call _atoi        ; convert to int in al
0466+  0A09             
0467+  0A09 E7            pop d
0468+  0A0A E5            pop b
0469+  0A0B F9            leave
0470+  0A0C 09            ret
0471+  0A0D             
0472+  0A0D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  0A0D             ; print 8bit hex integer
0474+  0A0D             ; integer value in reg bl
0475+  0A0D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0A0D             print_u8x:
0477+  0A0D D7            push a
0478+  0A0E DD            push bl
0479+  0A0F             
0480+  0A0F 07 0F 08      call _itoa        ; convert bl to char in a
0481+  0A12 2F            mov bl, al        ; save al
0482+  0A13 19 00         mov al, 0
0483+  0A15 05 03         syscall sys_io        ; display ah
0484+  0A17 24            mov ah, bl        ; retrieve al
0485+  0A18 19 00         mov al, 0
0486+  0A1A 05 03         syscall sys_io        ; display al
0487+  0A1C             
0488+  0A1C EA            pop bl
0489+  0A1D E4            pop a
0490+  0A1E 09            ret
0491+  0A1F             
0492+  0A1F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  0A1F             ; print 8bit decimal unsigned number
0494+  0A1F             ; input number in al
0495+  0A1F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  0A1F             print_u8d:
0497+  0A1F D7            push a
0498+  0A20 D8            push b
0499+  0A21 FD D8         push g
0500+  0A23 22 00         mov ah, 0
0501+  0A25 26 64 00      mov b, 100
0502+  0A28 AE            div a, b
0503+  0A29 D8            push b      ; save remainder
0504+  0A2A B9 00         cmp al, 0
0505+  0A2C C6 36 0A      je skip100
0506+  0A2F 6A 30         add al, $30
0507+  0A31 23            mov ah, al
0508+  0A32 19 00         mov al, 0
0509+  0A34 05 03         syscall sys_io  ; print coeff
0510+  0A36             skip100:
0511+  0A36 E4            pop a
0512+  0A37 22 00         mov ah, 0
0513+  0A39 26 0A 00      mov b, 10
0514+  0A3C AE            div a, b
0515+  0A3D D8            push b      ; save remainder
0516+  0A3E B9 00         cmp al, 0
0517+  0A40 C6 4A 0A      je skip10
0518+  0A43 6A 30         add al, $30
0519+  0A45 23            mov ah, al
0520+  0A46 19 00         mov al, 0
0521+  0A48 05 03         syscall sys_io  ; print coeff
0522+  0A4A             skip10:
0523+  0A4A E4            pop a
0524+  0A4B 1B            mov al, bl
0525+  0A4C 6A 30         add al, $30
0526+  0A4E 23            mov ah, al
0527+  0A4F 19 00         mov al, 0
0528+  0A51 05 03         syscall sys_io  ; print coeff
0529+  0A53 FD F1         pop g
0530+  0A55 E5            pop b
0531+  0A56 E4            pop a
0532+  0A57 09            ret
0533+  0A58             
0534+  0A58             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  0A58             ; input 8bit hex integer
0536+  0A58             ; read 8bit integer into al
0537+  0A58             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  0A58             scan_u8x:
0539+  0A58 F8 04 00      enter 4
0540+  0A5B D8            push b
0541+  0A5C DA            push d
0542+  0A5D             
0543+  0A5D FA FD FF      lea d, [bp + -3]
0544+  0A60 07 48 08      call _gets        ; get number
0545+  0A63             
0546+  0A63 32            mov bl, [d]
0547+  0A64 37            mov bh, bl
0548+  0A65 33 01 00      mov bl, [d + 1]
0549+  0A68 07 FE 07      call _atoi        ; convert to int in al
0550+  0A6B             
0551+  0A6B E7            pop d
0552+  0A6C E5            pop b
0553+  0A6D F9            leave
0554+  0A6E 09            ret
0555+  0A6F             
0556+  0A6F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  0A6F             ; input decimal number
0558+  0A6F             ; result in a
0559+  0A6F             ; 655'\0'
0560+  0A6F             ; low--------high
0561+  0A6F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  0A6F             scan_u16d:
0563+  0A6F F8 08 00      enter 8
0564+  0A72 E2            push si
0565+  0A73 D8            push b
0566+  0A74 D9            push c
0567+  0A75 DA            push d
0568+  0A76 FA F9 FF      lea d, [bp +- 7]
0569+  0A79 07 48 08      call _gets
0570+  0A7C 07 A0 07      call _strlen      ; get string length in c
0571+  0A7F 7E            dec c
0572+  0A80 FD 4E         mov si, d
0573+  0A82 12            mov a, c
0574+  0A83 FD 99         shl a
0575+  0A85 3B C1 0A      mov d, table_power
0576+  0A88 59            add d, a
0577+  0A89 38 00 00      mov c, 0
0578+  0A8C             mul_loop:
0579+  0A8C F6            lodsb      ; load ascii to al
0580+  0A8D B9 00         cmp al, 0
0581+  0A8F C6 A2 0A      je mul_exit
0582+  0A92 6F 30         sub al, $30    ; make into integer
0583+  0A94 22 00         mov ah, 0
0584+  0A96 2A            mov b, [d]
0585+  0A97 AC            mul a, b      ; result in b since it fits in 16bits
0586+  0A98 11            mov a, b
0587+  0A99 28            mov b, c
0588+  0A9A 54            add a, b
0589+  0A9B 39            mov c, a
0590+  0A9C 63 02 00      sub d, 2
0591+  0A9F 0A 8C 0A      jmp mul_loop
0592+  0AA2             mul_exit:
0593+  0AA2 12            mov a, c
0594+  0AA3 E7            pop d
0595+  0AA4 E6            pop c
0596+  0AA5 E5            pop b
0597+  0AA6 EF            pop si
0598+  0AA7 F9            leave
0599+  0AA8 09            ret
0600+  0AA9             
0601+  0AA9             
0602+  0AA9 30 31 32 33 s_hex_digits:    .db "0123456789abcdef"  
0602+  0AAD 34 35 36 37 
0602+  0AB1 38 39 61 62 
0602+  0AB5 63 64 65 66 
0603+  0AB9 1B 5B 32 6A s_telnet_clear:  .db "\033[2j\033[h", 0
0603+  0ABD 1B 5B 68 00 
0604+  0AC1             
0605+  0AC1             table_power:
0606+  0AC1 01 00         .dw 1
0607+  0AC3 0A 00         .dw 10
0608+  0AC5 64 00         .dw 100
0609+  0AC7 E8 03         .dw 1000
0610+  0AC9 10 27         .dw 100000030   0ACB             .include "lib/ctype.asm"
0001+  0ACB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0ACB             ; ctype.s
0003+  0ACB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0ACB             
0005+  0ACB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0ACB             ;; c character classification is an operation provided by a group of functions in the ansi c standard library
0007+  0ACB             ;; for the c programming language. these functions are used to test characters for membership in a particular
0008+  0ACB             ;; class of characters, such as alphabetic characters, control characters, etc. both single-byte, and wide
0009+  0ACB             ;; characters are supported.
0010+  0ACB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0ACB             ;; _isalnum 
0012+  0ACB             ;; _isalpha 
0013+  0ACB             ;; islower 
0014+  0ACB             ;; isupper 
0015+  0ACB             ;; _isdigit 
0016+  0ACB             ;; isxdigit
0017+  0ACB             ;; iscntrl 
0018+  0ACB             ;; isgraph 
0019+  0ACB             ;; _isspace 
0020+  0ACB             ;; isblank 
0021+  0ACB             ;; isprint 
0022+  0ACB             ;; ispunct 
0023+  0ACB             ;; tolower 
0024+  0ACB             ;; toupper
0025+  0ACB             
0026+  0ACB             
0027+  0ACB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0ACB             ;; is alphanumeric
0029+  0ACB             ;; sets zf according with result
0030+  0ACB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0ACB             _isalnum:
0032+  0ACB 07 E8 0A    	call _isalpha
0033+  0ACE C6 D4 0A    	je _isalnum_exit
0034+  0AD1 07 D5 0A    	call _isdigit
0035+  0AD4             _isalnum_exit:
0036+  0AD4 09          	ret	
0037+  0AD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0AD5             ;; is digit
0039+  0AD5             ;; sets zf according with result
0040+  0AD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0AD5             _isdigit:
0042+  0AD5 DB          	push al
0043+  0AD6 B9 30       	cmp al, '0'
0044+  0AD8 C8 E4 0A    	jlu _isdigit_false
0045+  0ADB B9 39       	cmp al, '9'
0046+  0ADD D1 E4 0A    	jgu _isdigit_false
0047+  0AE0 87 00       	and al, 0	; set zf
0048+  0AE2 E8          	pop al
0049+  0AE3 09          	ret
0050+  0AE4             _isdigit_false:
0051+  0AE4 8B 01       	or al, 1	; clear zf
0052+  0AE6 E8          	pop al
0053+  0AE7 09          	ret	
0054+  0AE8             	
0055+  0AE8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0AE8             ;; is alpha
0057+  0AE8             ;; sets zf according with result
0058+  0AE8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0AE8             _isalpha:
0060+  0AE8 DB          	push al
0061+  0AE9 B9 5F       	cmp al, '_'
0062+  0AEB C6 0B 0B    	je _isalpha_true
0063+  0AEE B9 2E       	cmp al, '.'
0064+  0AF0 C6 0B 0B    	je _isalpha_true
0065+  0AF3 B9 61       	cmp al, 'a'
0066+  0AF5 C8 07 0B    	jlu _isalpha_false
0067+  0AF8 B9 7A       	cmp al, 'z'
0068+  0AFA D1 07 0B    	jgu _isalpha_false
0069+  0AFD B9 7A       	cmp al, 'z'
0070+  0AFF D0 0B 0B    	jleu _isalpha_true
0071+  0B02 B9 61       	cmp al, 'a'
0072+  0B04 C9 0B 0B    	jgeu _isalpha_true
0073+  0B07             _isalpha_false:
0074+  0B07 8B 01       	or al, 1	; clear zf
0075+  0B09 E8          	pop al
0076+  0B0A 09          	ret
0077+  0B0B             _isalpha_true:
0078+  0B0B 87 00       	and al, 0	; set zf
0079+  0B0D E8          	pop al
0080+  0B0E 09          	ret
0081+  0B0F             
0082+  0B0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0B0F             ;; is path-alpha
0084+  0B0F             ;; sets zf according with result
0085+  0B0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0B0F             ispath:
0087+  0B0F DB          	push al
0088+  0B10 07 D5 0A    	call _isdigit
0089+  0B13 C6 3D 0B    	je ispath_true
0090+  0B16 B9 5F       	cmp al, '_'
0091+  0B18 C6 3D 0B    	je ispath_true
0092+  0B1B B9 2F       	cmp al, '/'
0093+  0B1D C6 3D 0B    	je ispath_true
0094+  0B20 B9 2E       	cmp al, '.'
0095+  0B22 C6 3D 0B    	je ispath_true
0096+  0B25 B9 61       	cmp al, 'a'
0097+  0B27 C8 39 0B    	jlu ispath_false
0098+  0B2A B9 7A       	cmp al, 'z'
0099+  0B2C D1 39 0B    	jgu ispath_false
0100+  0B2F B9 7A       	cmp al, 'z'
0101+  0B31 D0 3D 0B    	jleu ispath_true
0102+  0B34 B9 61       	cmp al, 'a'
0103+  0B36 C9 3D 0B    	jgeu ispath_true
0104+  0B39             ispath_false:
0105+  0B39 8B 01       	or al, 1	; clear zf
0106+  0B3B E8          	pop al
0107+  0B3C 09          	ret
0108+  0B3D             ispath_true:
0109+  0B3D 87 00       	and al, 0	; set zf
0110+  0B3F E8          	pop al
0111+  0B40 09          	ret
0112+  0B41             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B41             ;; is space
0114+  0B41             ;; sets zf according with result
0115+  0B41             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B41             _isspace:
0117+  0B41 B9 20       	cmp al, $20		; ' '
0118+  0B43 C6 57 0B    	je _isspace_exit
0119+  0B46 B9 09       	cmp al, $09		; '\t'
0120+  0B48 C6 57 0B    	je _isspace_exit
0121+  0B4B B9 0A       	cmp al, $0a		; '\n'
0122+  0B4D C6 57 0B    	je _isspace_exit
0123+  0B50 B9 0D       	cmp al, $0d		; '\r'
0124+  0B52 C6 57 0B    	je _isspace_exit
0125+  0B55 B9 0B       	cmp al, $0b		; '\v'
0126+  0B57             _isspace_exit:
0127+  0B57 09          	ret	
0128+  0B58             
0129+  0B58             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B58             ; to lower
0131+  0B58             ; input in al
0132+  0B58             ; output in al
0133+  0B58             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B58             _to_lower:
0135+  0B58 B9 7A       	cmp al, 'z'
0136+  0B5A D1 5F 0B    	jgu _to_lower_ret
0137+  0B5D 6A 20       	add al, $20				; convert to lower case
0138+  0B5F             _to_lower_ret:
0139+  0B5F 09          	ret
0140+  0B60             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B60             ; to upper
0142+  0B60             ; input in al
0143+  0B60             ; output in al
0144+  0B60             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B60             _to_upper:
0146+  0B60 B9 61       	cmp al, 'a'
0147+  0B62 C8 67 0B    	jlu _to_upper_ret
0148+  0B65 6F 20       	sub al, $20			; convert to upper case
0149+  0B67             _to_upper_ret:
0150+  0B67 09          	ret
0151+  0B68             
0031   0B68             
0032   0B68             
0033   0B68 00 00       transient_data: .dw 0
0034   0B6A             
0035   0B6A             .end
0036   0B6A             
0037   0B6A             
tasm: Number of errors = 0
