0001   0000             .include "lib/kernel.exp"
0001+  0000             fdc_al_restore   .EQU  $0000
0002+  0000             fdc_al_step      .EQU  $0001
0003+  0000             fdc_al_step_in   .EQU  $0002
0004+  0000             fdc_al_step_out  .EQU  $0003
0005+  0000             fdc_al_seek      .EQU  $0004
0006+  0000             fdc_al_format_128 .EQU  $0005
0007+  0000             fdc_al_format_512 .EQU  $0006
0008+  0000             fdc_al_read_addr .EQU  $0007
0009+  0000             fdc_al_read_track .EQU  $0008
0010+  0000             fdc_al_read_sect .EQU  $0009
0011+  0000             fdc_al_write_sect .EQU  $000a
0012+  0000             fdc_al_force_int .EQU  $000b
0013+  0000             fdc_al_status0   .EQU  $000c
0014+  0000             fdc_al_status1   .EQU  $000d
0015+  0000             noname._7seg_display .EQU  $ffb0
0016+  0000             noname._fdc_config .EQU  $ffc0
0017+  0000             noname._fdc_status_0 .EQU  $ffc1
0018+  0000             noname._fdc_stat_cmd .EQU  $ffc8
0019+  0000             sys_break        .EQU  $0000
0020+  0000             sys_rtc          .EQU  $0001
0021+  0000             sys_ide          .EQU  $0002
0022+  0000             sys_io           .EQU  $0003
0023+  0000             sys_filesystem   .EQU  $0004
0024+  0000             sys_create_proc  .EQU  $0005
0025+  0000             sys_list_proc    .EQU  $0006
0026+  0000             sys_datetime     .EQU  $0007
0027+  0000             sys_reboot       .EQU  $0008
0028+  0000             sys_pause_proc   .EQU  $0009
0029+  0000             sys_resume_proc  .EQU  $000a
0030+  0000             sys_terminate_proc .EQU  $000b
0031+  0000             sys_system       .EQU  $000c
0032+  0000             sys_fdc          .EQU  $000d
0033+  0000             text_org         .EQU  $0400
0002   0000             
0003   0400             .org text_org			; origin at 1024
0004   0400             
0005   0400             reboot:
0006   0400 3B 08 04      mov d, s_reboot
0007   0403 07 31 06      call _puts
0008   0406 05 08         syscall sys_reboot
0009   0408             
0010   0408 0A 0D 4E 6F s_reboot: .db "\n\rNow rebooting...\n\r", 0
0010   040C 77 20 72 65 
0010   0410 62 6F 6F 74 
0010   0414 69 6E 67 2E 
0010   0418 2E 2E 0A 0D 
0010   041C 00 
0011   041D             
0012   041D             .include "lib/stdio.asm"
0001+  041D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  041D             ; stdio.s
0003+  041D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  041D             .include "lib/string.asm"
0001++ 041D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 041D             ; string.s
0003++ 041D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 041D             
0005++ 041D             
0006++ 041D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 041D             ; _strrev
0008++ 041D             ; reverse a string
0009++ 041D             ; d = string address
0010++ 041D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 041D             ; 01234
0012++ 041D             _strrev:
0013++ 041D 4B          	pusha
0014++ 041E 07 64 04    	call _strlen	; length in c
0015++ 0421 12          	mov a, c
0016++ 0422 AF 01 00    	cmp a, 1
0017++ 0425 D0 3F 04    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 0428 7D          	dec a
0019++ 0429 FD 4E       	mov si, d	; beginning of string
0020++ 042B FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 042D 59          	add d, a	; end of string
0022++ 042E 12          	mov a, c
0023++ 042F FD 9B       	shr a		; divide by 2
0024++ 0431 39          	mov c, a	; c now counts the steps
0025++ 0432             _strrev_l0:
0026++ 0432 32          	mov bl, [d]	; save load right-side char into bl
0027++ 0433 F6          	lodsb		; load left-side char into al; increase si
0028++ 0434 3E          	mov [d], al	; store left char into right side
0029++ 0435 1B          	mov al, bl
0030++ 0436 F7          	stosb		; store right-side char into left-side; increase di
0031++ 0437 7E          	dec c
0032++ 0438 7F          	dec d
0033++ 0439 C2 00 00    	cmp c, 0
0034++ 043C C7 32 04    	jne _strrev_l0
0035++ 043F             _strrev_end:
0036++ 043F 4C          	popa
0037++ 0440 09          	ret
0038++ 0441             	
0039++ 0441             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0441             ; _strchr
0041++ 0441             ; search string in d for char in al
0042++ 0441             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0441             _strchr:
0044++ 0441             _strchr_l0:
0045++ 0441 32          	mov bl, [d]
0046++ 0442 C1 00       	cmp bl, 0
0047++ 0444 C6 4F 04    	je _strchr_end
0048++ 0447 BA          	cmp al, bl
0049++ 0448 C6 4F 04    	je _strchr_end
0050++ 044B 79          	inc d
0051++ 044C 0A 41 04    	jmp _strchr_l0
0052++ 044F             _strchr_end:
0053++ 044F 1B          	mov al, bl
0054++ 0450 09          	ret
0055++ 0451             
0056++ 0451             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0451             ; _strstr
0058++ 0451             ; find sub-string
0059++ 0451             ; str1 in si
0060++ 0451             ; str2 in di
0061++ 0451             ; si points to end of source string
0062++ 0451             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0451             _strstr:
0064++ 0451 DB          	push al
0065++ 0452 DA          	push d
0066++ 0453 E3          	push di
0067++ 0454             _strstr_loop:
0068++ 0454 F3          	cmpsb					; compare a byte of the strings
0069++ 0455 C7 60 04    	jne _strstr_ret
0070++ 0458 FC 00 00    	lea d, [di + 0]
0071++ 045B BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 045D C7 54 04    	jne _strstr_loop				; equal chars but not at end
0073++ 0460             _strstr_ret:
0074++ 0460 F0          	pop di
0075++ 0461 E7          	pop d
0076++ 0462 E8          	pop al
0077++ 0463 09          	ret
0078++ 0464             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0464             ; length of null terminated string
0080++ 0464             ; result in c
0081++ 0464             ; pointer in d
0082++ 0464             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0464             _strlen:
0084++ 0464 DA          	push d
0085++ 0465 38 00 00    	mov c, 0
0086++ 0468             _strlen_l1:
0087++ 0468 BD 00       	cmp byte [d], 0
0088++ 046A C6 72 04    	je _strlen_ret
0089++ 046D 79          	inc d
0090++ 046E 78          	inc c
0091++ 046F 0A 68 04    	jmp _strlen_l1
0092++ 0472             _strlen_ret:
0093++ 0472 E7          	pop d
0094++ 0473 09          	ret
0095++ 0474             
0096++ 0474             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0474             ; strcmp
0098++ 0474             ; compare two strings
0099++ 0474             ; str1 in si
0100++ 0474             ; str2 in di
0101++ 0474             ; create a string compairon instrucion ?????
0102++ 0474             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0474             _strcmp:
0104++ 0474 DB          	push al
0105++ 0475 DA          	push d
0106++ 0476 E3          	push di
0107++ 0477 E2          	push si
0108++ 0478             _strcmp_loop:
0109++ 0478 F3          	cmpsb					; compare a byte of the strings
0110++ 0479 C7 84 04    	jne _strcmp_ret
0111++ 047C FB FF FF    	lea d, [si +- 1]
0112++ 047F BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0481 C7 78 04    	jne _strcmp_loop				; equal chars but not at end
0114++ 0484             _strcmp_ret:
0115++ 0484 EF          	pop si
0116++ 0485 F0          	pop di
0117++ 0486 E7          	pop d
0118++ 0487 E8          	pop al
0119++ 0488 09          	ret
0120++ 0489             
0121++ 0489             
0122++ 0489             ; strcpy
0123++ 0489             ; copy null terminated string from si to di
0124++ 0489             ; source in si
0125++ 0489             ; destination in di
0126++ 0489             _strcpy:
0127++ 0489 E2          	push si
0128++ 048A E3          	push di
0129++ 048B DB          	push al
0130++ 048C             _strcpy_l1:
0131++ 048C F6          	lodsb
0132++ 048D F7          	stosb
0133++ 048E B9 00       	cmp al, 0
0134++ 0490 C7 8C 04    	jne _strcpy_l1
0135++ 0493             _strcpy_end:
0136++ 0493 E8          	pop al
0137++ 0494 F0          	pop di
0138++ 0495 EF          	pop si
0139++ 0496 09          	ret
0140++ 0497             
0141++ 0497             ; strcat
0142++ 0497             ; concatenate a null terminated string into string at di, from string at si
0143++ 0497             ; source in si
0144++ 0497             ; destination in di
0145++ 0497             _strcat:
0146++ 0497 E2          	push si
0147++ 0498 E3          	push di
0148++ 0499 D7          	push a
0149++ 049A DA          	push d
0150++ 049B 50          	mov a, di
0151++ 049C 3C          	mov d, a
0152++ 049D             _strcat_goto_end_l1:
0153++ 049D BD 00       	cmp byte[d], 0
0154++ 049F C6 A6 04    	je _strcat_start
0155++ 04A2 79          	inc d
0156++ 04A3 0A 9D 04    	jmp _strcat_goto_end_l1
0157++ 04A6             _strcat_start:
0158++ 04A6 FD 50       	mov di, d
0159++ 04A8             _strcat_l1:
0160++ 04A8 F6          	lodsb
0161++ 04A9 F7          	stosb
0162++ 04AA B9 00       	cmp al, 0
0163++ 04AC C7 A8 04    	jne _strcat_l1
0164++ 04AF             _strcat_end:
0165++ 04AF E7          	pop d
0166++ 04B0 E4          	pop a
0167++ 04B1 F0          	pop di
0168++ 04B2 EF          	pop si
0169++ 04B3 09          	ret
0170++ 04B4             
0171++ 04B4             
0005+  04B4             
0006+  04B4             
0007+  04B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  04B4             ; convert ascii 'o'..'f' to integer 0..15
0009+  04B4             ; ascii in bl
0010+  04B4             ; result in al
0011+  04B4             ; ascii for f = 0100 0110
0012+  04B4             ; ascii for 9 = 0011 1001
0013+  04B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  04B4             hex_ascii_encode:
0015+  04B4 1B            mov al, bl
0016+  04B5 93 40         test al, $40        ; test if letter or number
0017+  04B7 C7 BD 04      jnz hex_letter
0018+  04BA 87 0F         and al, $0f        ; get number
0019+  04BC 09            ret
0020+  04BD             hex_letter:
0021+  04BD 87 0F         and al, $0f        ; get letter
0022+  04BF 6A 09         add al, 9
0023+  04C1 09            ret
0024+  04C2             
0025+  04C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  04C2             ; atoi
0027+  04C2             ; 2 letter hex string in b
0028+  04C2             ; 8bit integer returned in al
0029+  04C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  04C2             _atoi:
0031+  04C2 D8            push b
0032+  04C3 07 B4 04      call hex_ascii_encode      ; convert bl to 4bit code in al
0033+  04C6 30            mov bl, bh
0034+  04C7 DB            push al          ; save a
0035+  04C8 07 B4 04      call hex_ascii_encode
0036+  04CB EA            pop bl  
0037+  04CC FD 9E 04      shl al, 4
0038+  04CF 8C            or al, bl
0039+  04D0 E5            pop b
0040+  04D1 09            ret  
0041+  04D2             
0042+  04D2             
0043+  04D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  04D2             ; scanf
0045+  04D2             ; no need for explanations!
0046+  04D2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  04D2             scanf:
0048+  04D2 09            ret
0049+  04D3             
0050+  04D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  04D3             ; itoa
0052+  04D3             ; 8bit value in bl
0053+  04D3             ; 2 byte ascii result in a
0054+  04D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  04D3             _itoa:
0056+  04D3 DA            push d
0057+  04D4 D8            push b
0058+  04D5 A7 00         mov bh, 0
0059+  04D7 FD A4 04      shr bl, 4  
0060+  04DA 74            mov d, b
0061+  04DB 1F 6D 07      mov al, [d + s_hex_digits]
0062+  04DE 23            mov ah, al
0063+  04DF               
0064+  04DF E5            pop b
0065+  04E0 D8            push b
0066+  04E1 A7 00         mov bh, 0
0067+  04E3 FD 87 0F      and bl, $0f
0068+  04E6 74            mov d, b
0069+  04E7 1F 6D 07      mov al, [d + s_hex_digits]
0070+  04EA E5            pop b
0071+  04EB E7            pop d
0072+  04EC 09            ret
0073+  04ED             
0074+  04ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  04ED             ; hex string to binary
0076+  04ED             ; di = destination address
0077+  04ED             ; si = source
0078+  04ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  04ED             _hex_to_int:
0080+  04ED             _hex_to_int_l1:
0081+  04ED F6            lodsb          ; load from [si] to al
0082+  04EE B9 00         cmp al, 0        ; check if ascii 0
0083+  04F0 C6 FD 04      jz _hex_to_int_ret
0084+  04F3 36            mov bh, al
0085+  04F4 F6            lodsb
0086+  04F5 2F            mov bl, al
0087+  04F6 07 C2 04      call _atoi        ; convert ascii byte in b to int (to al)
0088+  04F9 F7            stosb          ; store al to [di]
0089+  04FA 0A ED 04      jmp _hex_to_int_l1
0090+  04FD             _hex_to_int_ret:
0091+  04FD 09            ret    
0092+  04FE             
0093+  04FE             
0094+  04FE             
0095+  04FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  04FE             ; getchar
0097+  04FE             ; char in ah
0098+  04FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  04FE             getch:
0100+  04FE DB            push al
0101+  04FF             getch_retry:
0102+  04FF 19 01         mov al, 1
0103+  0501 05 03         syscall sys_io      ; receive in ah
0104+  0503 E8            pop al
0105+  0504 09            ret
0106+  0505             
0107+  0505             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  0505             ; putchar
0109+  0505             ; char in ah
0110+  0505             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0505             _putchar:
0112+  0505 DB            push al
0113+  0506 19 00         mov al, 0
0114+  0508 05 03         syscall sys_io      ; char in ah
0115+  050A E8            pop al
0116+  050B 09            ret
0117+  050C             
0118+  050C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  050C             ;; input a string
0120+  050C             ;; terminates with null
0121+  050C             ;; pointer in d
0122+  050C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  050C             _gets:
0124+  050C D7            push a
0125+  050D DA            push d
0126+  050E             _gets_loop:
0127+  050E 19 01         mov al, 1
0128+  0510 05 03         syscall sys_io      ; receive in ah
0129+  0512 76 1B         cmp ah, 27
0130+  0514 C6 35 05      je _gets_ansi_esc
0131+  0517 76 0A         cmp ah, $0a        ; lf
0132+  0519 C6 91 05      je _gets_end
0133+  051C 76 0D         cmp ah, $0d        ; cr
0134+  051E C6 91 05      je _gets_end
0135+  0521 76 5C         cmp ah, $5c        ; '\\'
0136+  0523 C6 57 05      je _gets_escape
0137+  0526 76 08         cmp ah, $08      ; check for backspace
0138+  0528 C6 31 05      je _gets_backspace
0139+  052B 1A            mov al, ah
0140+  052C 3E            mov [d], al
0141+  052D 79            inc d
0142+  052E 0A 0E 05      jmp _gets_loop
0143+  0531             _gets_backspace:
0144+  0531 7F            dec d
0145+  0532 0A 0E 05      jmp _gets_loop
0146+  0535             _gets_ansi_esc:
0147+  0535 19 01         mov al, 1
0148+  0537 05 03         syscall sys_io        ; receive in ah without echo
0149+  0539 76 5B         cmp ah, '['
0150+  053B C7 0E 05      jne _gets_loop
0151+  053E 19 01         mov al, 1
0152+  0540 05 03         syscall sys_io          ; receive in ah without echo
0153+  0542 76 64         cmp ah, 'd'
0154+  0544 C6 4F 05      je _gets_left_arrow
0155+  0547 76 63         cmp ah, 'c'
0156+  0549 C6 53 05      je _gets_right_arrow
0157+  054C 0A 0E 05      jmp _gets_loop
0158+  054F             _gets_left_arrow:
0159+  054F 7F            dec d
0160+  0550 0A 0E 05      jmp _gets_loop
0161+  0553             _gets_right_arrow:
0162+  0553 79            inc d
0163+  0554 0A 0E 05      jmp _gets_loop
0164+  0557             _gets_escape:
0165+  0557 19 01         mov al, 1
0166+  0559 05 03         syscall sys_io      ; receive in ah
0167+  055B 76 6E         cmp ah, 'n'
0168+  055D C6 7C 05      je _gets_lf
0169+  0560 76 72         cmp ah, 'r'
0170+  0562 C6 83 05      je _gets_cr
0171+  0565 76 30         cmp ah, '0'
0172+  0567 C6 8A 05      je _gets_null
0173+  056A 76 5C         cmp ah, $5c  ; '\'
0174+  056C C6 75 05      je _gets_slash
0175+  056F 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  0570 3E            mov [d], al
0177+  0571 79            inc d
0178+  0572 0A 0E 05      jmp _gets_loop
0179+  0575             _gets_slash:
0180+  0575 19 5C         mov al, $5c
0181+  0577 3E            mov [d], al
0182+  0578 79            inc d
0183+  0579 0A 0E 05      jmp _gets_loop
0184+  057C             _gets_lf:
0185+  057C 19 0A         mov al, $0a
0186+  057E 3E            mov [d], al
0187+  057F 79            inc d
0188+  0580 0A 0E 05      jmp _gets_loop
0189+  0583             _gets_cr:
0190+  0583 19 0D         mov al, $0d
0191+  0585 3E            mov [d], al
0192+  0586 79            inc d
0193+  0587 0A 0E 05      jmp _gets_loop
0194+  058A             _gets_null:
0195+  058A 19 00         mov al, $00
0196+  058C 3E            mov [d], al
0197+  058D 79            inc d
0198+  058E 0A 0E 05      jmp _gets_loop
0199+  0591             _gets_end:
0200+  0591 19 00         mov al, 0
0201+  0593 3E            mov [d], al        ; terminate string
0202+  0594 E7            pop d
0203+  0595 E4            pop a
0204+  0596 09            ret
0205+  0597             
0206+  0597             
0207+  0597             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  0597             ;; input text
0209+  0597             ;; terminated with ctrl+d
0210+  0597             ;; pointer in d
0211+  0597             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  0597             _gettxt:
0213+  0597 D7            push a
0214+  0598 DA            push d
0215+  0599             _gettxt_loop:
0216+  0599 19 01         mov al, 1
0217+  059B 05 03         syscall sys_io      ; receive in ah
0218+  059D 76 04         cmp ah, 4      ; eot
0219+  059F C6 D8 05      je _gettxt_end
0220+  05A2 76 08         cmp ah, $08      ; check for backspace
0221+  05A4 C6 D4 05      je _gettxt_backspace
0222+  05A7 76 5C         cmp ah, $5c        ; '\'
0223+  05A9 C6 B2 05      je _gettxt_escape
0224+  05AC 1A            mov al, ah
0225+  05AD 3E            mov [d], al
0226+  05AE 79            inc d
0227+  05AF 0A 99 05      jmp _gettxt_loop
0228+  05B2             _gettxt_escape:
0229+  05B2 19 01         mov al, 1
0230+  05B4 05 03         syscall sys_io      ; receive in ah
0231+  05B6 76 6E         cmp ah, 'n'
0232+  05B8 C6 C6 05      je _gettxt_lf
0233+  05BB 76 72         cmp ah, 'r'
0234+  05BD C6 CD 05      je _gettxt_cr
0235+  05C0 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  05C1 3E            mov [d], al
0237+  05C2 79            inc d
0238+  05C3 0A 99 05      jmp _gettxt_loop
0239+  05C6             _gettxt_lf:
0240+  05C6 19 0A         mov al, $0a
0241+  05C8 3E            mov [d], al
0242+  05C9 79            inc d
0243+  05CA 0A 99 05      jmp _gettxt_loop
0244+  05CD             _gettxt_cr:
0245+  05CD 19 0D         mov al, $0d
0246+  05CF 3E            mov [d], al
0247+  05D0 79            inc d
0248+  05D1 0A 99 05      jmp _gettxt_loop
0249+  05D4             _gettxt_backspace:
0250+  05D4 7F            dec d
0251+  05D5 0A 99 05      jmp _gettxt_loop
0252+  05D8             _gettxt_end:
0253+  05D8 19 00         mov al, 0
0254+  05DA 3E            mov [d], al        ; terminate string
0255+  05DB E7            pop d
0256+  05DC E4            pop a
0257+  05DD 09            ret
0258+  05DE             
0259+  05DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  05DE             ; print new line
0261+  05DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  05DE             printnl:
0263+  05DE D7            push a
0264+  05DF 10 00 0A      mov a, $0a00
0265+  05E2 05 03         syscall sys_io
0266+  05E4 10 00 0D      mov a, $0d00
0267+  05E7 05 03         syscall sys_io
0268+  05E9 E4            pop a
0269+  05EA 09            ret
0270+  05EB             
0271+  05EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  05EB             ; _strtoint
0273+  05EB             ; 4 digit hex string number in d
0274+  05EB             ; integer returned in a
0275+  05EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  05EB             _strtointx:
0277+  05EB D8            push b
0278+  05EC 32            mov bl, [d]
0279+  05ED 37            mov bh, bl
0280+  05EE 33 01 00      mov bl, [d + 1]
0281+  05F1 07 C2 04      call _atoi        ; convert to int in al
0282+  05F4 23            mov ah, al        ; move to ah
0283+  05F5 33 02 00      mov bl, [d + 2]
0284+  05F8 37            mov bh, bl
0285+  05F9 33 03 00      mov bl, [d + 3]
0286+  05FC 07 C2 04      call _atoi        ; convert to int in al
0287+  05FF E5            pop b
0288+  0600 09            ret
0289+  0601             
0290+  0601             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  0601             ; _strtoint
0292+  0601             ; 5 digit base10 string number in d
0293+  0601             ; integer returned in a
0294+  0601             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  0601             _strtoint:
0296+  0601 E2            push si
0297+  0602 D8            push b
0298+  0603 D9            push c
0299+  0604 DA            push d
0300+  0605 07 64 04      call _strlen      ; get string length in c
0301+  0608 7E            dec c
0302+  0609 FD 4E         mov si, d
0303+  060B 12            mov a, c
0304+  060C FD 99         shl a
0305+  060E 3B 85 07      mov d, table_power
0306+  0611 59            add d, a
0307+  0612 38 00 00      mov c, 0
0308+  0615             _strtoint_l0:
0309+  0615 F6            lodsb      ; load ascii to al
0310+  0616 B9 00         cmp al, 0
0311+  0618 C6 2B 06      je _strtoint_end
0312+  061B 6F 30         sub al, $30    ; make into integer
0313+  061D 22 00         mov ah, 0
0314+  061F 2A            mov b, [d]
0315+  0620 AC            mul a, b      ; result in b since it fits in 16bits
0316+  0621 11            mov a, b
0317+  0622 28            mov b, c
0318+  0623 54            add a, b
0319+  0624 39            mov c, a
0320+  0625 63 02 00      sub d, 2
0321+  0628 0A 15 06      jmp _strtoint_l0
0322+  062B             _strtoint_end:
0323+  062B 12            mov a, c
0324+  062C E7            pop d
0325+  062D E6            pop c
0326+  062E E5            pop b
0327+  062F EF            pop si
0328+  0630 09            ret
0329+  0631             
0330+  0631             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  0631             ; print null terminated string
0332+  0631             ; pointer in d
0333+  0631             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  0631             _puts:
0335+  0631 D7            push a
0336+  0632 DA            push d
0337+  0633             _puts_l1:
0338+  0633 1E            mov al, [d]
0339+  0634 B9 00         cmp al, 0
0340+  0636 C6 42 06      jz _puts_end
0341+  0639 23            mov ah, al
0342+  063A 19 00         mov al, 0
0343+  063C 05 03         syscall sys_io
0344+  063E 79            inc d
0345+  063F 0A 33 06      jmp _puts_l1
0346+  0642             _puts_end:
0347+  0642 E7            pop d
0348+  0643 E4            pop a
0349+  0644 09            ret
0350+  0645             
0351+  0645             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  0645             ; print n size string
0353+  0645             ; pointer in d
0354+  0645             ; size in c
0355+  0645             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  0645             _putsn:
0357+  0645 DB            push al
0358+  0646 DA            push d
0359+  0647 D9            push c
0360+  0648             _putsn_l0:
0361+  0648 1E            mov al, [d]
0362+  0649 23            mov ah, al
0363+  064A 19 00         mov al, 0
0364+  064C 05 03         syscall sys_io
0365+  064E 79            inc d
0366+  064F 7E            dec c  
0367+  0650 C2 00 00      cmp c, 0
0368+  0653 C7 48 06      jne _putsn_l0
0369+  0656             _putsn_end:
0370+  0656 E6            pop c
0371+  0657 E7            pop d
0372+  0658 E8            pop al
0373+  0659 09            ret
0374+  065A             
0375+  065A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  065A             ; print 16bit decimal number
0377+  065A             ; input number in a
0378+  065A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  065A             print_u16d:
0380+  065A D7            push a
0381+  065B D8            push b
0382+  065C FD D8         push g
0383+  065E 26 10 27      mov b, 10000
0384+  0661 AE            div a, b      ; get 10000's coeff.
0385+  0662 07 86 06      call print_number
0386+  0665 11            mov a, b
0387+  0666 26 E8 03      mov b, 1000
0388+  0669 AE            div a, b      ; get 1000's coeff.
0389+  066A 07 86 06      call print_number
0390+  066D 11            mov a, b
0391+  066E 26 64 00      mov b, 100
0392+  0671 AE            div a, b
0393+  0672 07 86 06      call print_number
0394+  0675 11            mov a, b
0395+  0676 26 0A 00      mov b, 10
0396+  0679 AE            div a, b
0397+  067A 07 86 06      call print_number
0398+  067D 1B            mov al, bl      ; 1's coeff in bl
0399+  067E 07 86 06      call print_number
0400+  0681 FD F1         pop g
0401+  0683 E5            pop b
0402+  0684 E4            pop a
0403+  0685 09            ret
0404+  0686             
0405+  0686             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  0686             ; print al
0407+  0686             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  0686             print_number:
0409+  0686 6A 30         add al, $30
0410+  0688 23            mov ah, al
0411+  0689 07 05 05      call _putchar
0412+  068C 09            ret
0413+  068D             
0414+  068D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  068D             ; print 16bit hex integer
0416+  068D             ; integer value in reg b
0417+  068D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  068D             print_u16x:
0419+  068D D7            push a
0420+  068E D8            push b
0421+  068F DD            push bl
0422+  0690 30            mov bl, bh
0423+  0691 07 D3 04      call _itoa        ; convert bh to char in a
0424+  0694 2F            mov bl, al        ; save al
0425+  0695 19 00         mov al, 0
0426+  0697 05 03         syscall sys_io        ; display ah
0427+  0699 24            mov ah, bl        ; retrieve al
0428+  069A 19 00         mov al, 0
0429+  069C 05 03         syscall sys_io        ; display al
0430+  069E             
0431+  069E EA            pop bl
0432+  069F 07 D3 04      call _itoa        ; convert bh to char in a
0433+  06A2 2F            mov bl, al        ; save al
0434+  06A3 19 00         mov al, 0
0435+  06A5 05 03         syscall sys_io        ; display ah
0436+  06A7 24            mov ah, bl        ; retrieve al
0437+  06A8 19 00         mov al, 0
0438+  06AA 05 03         syscall sys_io        ; display al
0439+  06AC             
0440+  06AC E5            pop b
0441+  06AD E4            pop a
0442+  06AE 09            ret
0443+  06AF             
0444+  06AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  06AF             ; input 16bit hex integer
0446+  06AF             ; read 16bit integer into a
0447+  06AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  06AF             scan_u16x:
0449+  06AF F8 10 00      enter 16
0450+  06B2 D8            push b
0451+  06B3 DA            push d
0452+  06B4             
0453+  06B4 FA F1 FF      lea d, [bp + -15]
0454+  06B7 07 0C 05      call _gets        ; get number
0455+  06BA             
0456+  06BA 32            mov bl, [d]
0457+  06BB 37            mov bh, bl
0458+  06BC 33 01 00      mov bl, [d + 1]
0459+  06BF 07 C2 04      call _atoi        ; convert to int in al
0460+  06C2 23            mov ah, al        ; move to ah
0461+  06C3             
0462+  06C3 33 02 00      mov bl, [d + 2]
0463+  06C6 37            mov bh, bl
0464+  06C7 33 03 00      mov bl, [d + 3]
0465+  06CA 07 C2 04      call _atoi        ; convert to int in al
0466+  06CD             
0467+  06CD E7            pop d
0468+  06CE E5            pop b
0469+  06CF F9            leave
0470+  06D0 09            ret
0471+  06D1             
0472+  06D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  06D1             ; print 8bit hex integer
0474+  06D1             ; integer value in reg bl
0475+  06D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  06D1             print_u8x:
0477+  06D1 D7            push a
0478+  06D2 DD            push bl
0479+  06D3             
0480+  06D3 07 D3 04      call _itoa        ; convert bl to char in a
0481+  06D6 2F            mov bl, al        ; save al
0482+  06D7 19 00         mov al, 0
0483+  06D9 05 03         syscall sys_io        ; display ah
0484+  06DB 24            mov ah, bl        ; retrieve al
0485+  06DC 19 00         mov al, 0
0486+  06DE 05 03         syscall sys_io        ; display al
0487+  06E0             
0488+  06E0 EA            pop bl
0489+  06E1 E4            pop a
0490+  06E2 09            ret
0491+  06E3             
0492+  06E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  06E3             ; print 8bit decimal unsigned number
0494+  06E3             ; input number in al
0495+  06E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  06E3             print_u8d:
0497+  06E3 D7            push a
0498+  06E4 D8            push b
0499+  06E5 FD D8         push g
0500+  06E7 22 00         mov ah, 0
0501+  06E9 26 64 00      mov b, 100
0502+  06EC AE            div a, b
0503+  06ED D8            push b      ; save remainder
0504+  06EE B9 00         cmp al, 0
0505+  06F0 C6 FA 06      je skip100
0506+  06F3 6A 30         add al, $30
0507+  06F5 23            mov ah, al
0508+  06F6 19 00         mov al, 0
0509+  06F8 05 03         syscall sys_io  ; print coeff
0510+  06FA             skip100:
0511+  06FA E4            pop a
0512+  06FB 22 00         mov ah, 0
0513+  06FD 26 0A 00      mov b, 10
0514+  0700 AE            div a, b
0515+  0701 D8            push b      ; save remainder
0516+  0702 B9 00         cmp al, 0
0517+  0704 C6 0E 07      je skip10
0518+  0707 6A 30         add al, $30
0519+  0709 23            mov ah, al
0520+  070A 19 00         mov al, 0
0521+  070C 05 03         syscall sys_io  ; print coeff
0522+  070E             skip10:
0523+  070E E4            pop a
0524+  070F 1B            mov al, bl
0525+  0710 6A 30         add al, $30
0526+  0712 23            mov ah, al
0527+  0713 19 00         mov al, 0
0528+  0715 05 03         syscall sys_io  ; print coeff
0529+  0717 FD F1         pop g
0530+  0719 E5            pop b
0531+  071A E4            pop a
0532+  071B 09            ret
0533+  071C             
0534+  071C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  071C             ; input 8bit hex integer
0536+  071C             ; read 8bit integer into al
0537+  071C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  071C             scan_u8x:
0539+  071C F8 04 00      enter 4
0540+  071F D8            push b
0541+  0720 DA            push d
0542+  0721             
0543+  0721 FA FD FF      lea d, [bp + -3]
0544+  0724 07 0C 05      call _gets        ; get number
0545+  0727             
0546+  0727 32            mov bl, [d]
0547+  0728 37            mov bh, bl
0548+  0729 33 01 00      mov bl, [d + 1]
0549+  072C 07 C2 04      call _atoi        ; convert to int in al
0550+  072F             
0551+  072F E7            pop d
0552+  0730 E5            pop b
0553+  0731 F9            leave
0554+  0732 09            ret
0555+  0733             
0556+  0733             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  0733             ; input decimal number
0558+  0733             ; result in a
0559+  0733             ; 655'\0'
0560+  0733             ; low--------high
0561+  0733             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  0733             scan_u16d:
0563+  0733 F8 08 00      enter 8
0564+  0736 E2            push si
0565+  0737 D8            push b
0566+  0738 D9            push c
0567+  0739 DA            push d
0568+  073A FA F9 FF      lea d, [bp +- 7]
0569+  073D 07 0C 05      call _gets
0570+  0740 07 64 04      call _strlen      ; get string length in c
0571+  0743 7E            dec c
0572+  0744 FD 4E         mov si, d
0573+  0746 12            mov a, c
0574+  0747 FD 99         shl a
0575+  0749 3B 85 07      mov d, table_power
0576+  074C 59            add d, a
0577+  074D 38 00 00      mov c, 0
0578+  0750             mul_loop:
0579+  0750 F6            lodsb      ; load ascii to al
0580+  0751 B9 00         cmp al, 0
0581+  0753 C6 66 07      je mul_exit
0582+  0756 6F 30         sub al, $30    ; make into integer
0583+  0758 22 00         mov ah, 0
0584+  075A 2A            mov b, [d]
0585+  075B AC            mul a, b      ; result in b since it fits in 16bits
0586+  075C 11            mov a, b
0587+  075D 28            mov b, c
0588+  075E 54            add a, b
0589+  075F 39            mov c, a
0590+  0760 63 02 00      sub d, 2
0591+  0763 0A 50 07      jmp mul_loop
0592+  0766             mul_exit:
0593+  0766 12            mov a, c
0594+  0767 E7            pop d
0595+  0768 E6            pop c
0596+  0769 E5            pop b
0597+  076A EF            pop si
0598+  076B F9            leave
0599+  076C 09            ret
0600+  076D             
0601+  076D             
0602+  076D 30 31 32 33 s_hex_digits:    .db "0123456789abcdef"  
0602+  0771 34 35 36 37 
0602+  0775 38 39 61 62 
0602+  0779 63 64 65 66 
0603+  077D 1B 5B 32 6A s_telnet_clear:  .db "\033[2j\033[h", 0
0603+  0781 1B 5B 68 00 
0604+  0785             
0605+  0785             table_power:
0606+  0785 01 00         .dw 1
0607+  0787 0A 00         .dw 10
0608+  0789 64 00         .dw 100
0609+  078B E8 03         .dw 1000
0610+  078D 10 27         .dw 100000013   078F             
0014   078F             .end
0015   078F             
0016   078F             
tasm: Number of errors = 0
