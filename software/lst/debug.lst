0001   0000             .include "lib/kernel.exp"
0001+  0000             fdc_irq_event    .EQU  $195f
0002+  0000             sys_break        .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_create_proc  .EQU  $0005
0008+  0000             sys_list_proc    .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_fdc          .EQU  $000d
0016+  0000             text_org         .EQU  $0400
0002   0000             
0003   0000             
0004   0000             main:
0005   0000 10 00 00    	mov a, 0
0006   0003             main_L0:
0007   0003 05 00       	syscall sys_break
0008   0005 77          	inc a
0009   0006 AF 20 00    	cmp a, $20
0010   0009 C6 0F 00    	je end
0011   000C 0A 03 00    	jmp main_L0
0012   000F             end:
0013   000F 09          	ret
0014   0010             
0015   0010             .include "lib/stdio.asm"
0001+  0010             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0010             ; stdio.s
0003+  0010             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0010             .include "lib/string.asm"
0001++ 0010             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0010             ; string.s
0003++ 0010             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0010             
0005++ 0010             
0006++ 0010             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0010             ; _strrev
0008++ 0010             ; reverse a string
0009++ 0010             ; D = string address
0010++ 0010             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0010             ; 01234
0012++ 0010             _strrev:
0013++ 0010 4B          	pusha
0014++ 0011 07 57 00    	call _strlen	; length in C
0015++ 0014 12          	mov a, c
0016++ 0015 AF 01 00    	cmp a, 1
0017++ 0018 D0 32 00    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 001B 7D          	dec a
0019++ 001C FD 4E       	mov si, d	; beginning of string
0020++ 001E FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0020 59          	add d, a	; end of string
0022++ 0021 12          	mov a, c
0023++ 0022 FD 9B       	shr a		; divide by 2
0024++ 0024 39          	mov c, a	; C now counts the steps
0025++ 0025             _strrev_L0:
0026++ 0025 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0026 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0027 3E          	mov [d], al	; store left char into right side
0029++ 0028 1B          	mov al, bl
0030++ 0029 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 002A 7E          	dec c
0032++ 002B 7F          	dec d
0033++ 002C C2 00 00    	cmp c, 0
0034++ 002F C7 25 00    	jne _strrev_L0
0035++ 0032             _strrev_end:
0036++ 0032 4C          	popa
0037++ 0033 09          	ret
0038++ 0034             	
0039++ 0034             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0034             ; _strchr
0041++ 0034             ; search string in D for char in AL
0042++ 0034             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0034             _strchr:
0044++ 0034             _strchr_L0:
0045++ 0034 32          	mov bl, [d]
0046++ 0035 C1 00       	cmp bl, 0
0047++ 0037 C6 42 00    	je _strchr_end
0048++ 003A BA          	cmp al, bl
0049++ 003B C6 42 00    	je _strchr_end
0050++ 003E 79          	inc d
0051++ 003F 0A 34 00    	jmp _strchr_L0
0052++ 0042             _strchr_end:
0053++ 0042 1B          	mov al, bl
0054++ 0043 09          	ret
0055++ 0044             
0056++ 0044             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0044             ; _strstr
0058++ 0044             ; find sub-string
0059++ 0044             ; str1 in SI
0060++ 0044             ; str2 in DI
0061++ 0044             ; SI points to end of source string
0062++ 0044             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0044             _strstr:
0064++ 0044 DB          	push al
0065++ 0045 DA          	push d
0066++ 0046 E3          	push di
0067++ 0047             _strstr_loop:
0068++ 0047 F3          	cmpsb					; compare a byte of the strings
0069++ 0048 C7 53 00    	jne _strstr_ret
0070++ 004B FC 00 00    	lea d, [di + 0]
0071++ 004E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0050 C7 47 00    	jne _strstr_loop				; equal chars but not at end
0073++ 0053             _strstr_ret:
0074++ 0053 F0          	pop di
0075++ 0054 E7          	pop d
0076++ 0055 E8          	pop al
0077++ 0056 09          	ret
0078++ 0057             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0057             ; length of null terminated string
0080++ 0057             ; result in C
0081++ 0057             ; pointer in D
0082++ 0057             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0057             _strlen:
0084++ 0057 DA          	push d
0085++ 0058 38 00 00    	mov c, 0
0086++ 005B             _strlen_L1:
0087++ 005B BD 00       	cmp byte [d], 0
0088++ 005D C6 65 00    	je _strlen_ret
0089++ 0060 79          	inc d
0090++ 0061 78          	inc c
0091++ 0062 0A 5B 00    	jmp _strlen_L1
0092++ 0065             _strlen_ret:
0093++ 0065 E7          	pop d
0094++ 0066 09          	ret
0095++ 0067             
0096++ 0067             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0067             ; STRCMP
0098++ 0067             ; compare two strings
0099++ 0067             ; str1 in SI
0100++ 0067             ; str2 in DI
0101++ 0067             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0067             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0067             _strcmp:
0104++ 0067 DB          	push al
0105++ 0068 DA          	push d
0106++ 0069 E3          	push di
0107++ 006A E2          	push si
0108++ 006B             _strcmp_loop:
0109++ 006B F3          	cmpsb					; compare a byte of the strings
0110++ 006C C7 77 00    	jne _strcmp_ret
0111++ 006F FB FF FF    	lea d, [si +- 1]
0112++ 0072 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0074 C7 6B 00    	jne _strcmp_loop				; equal chars but not at end
0114++ 0077             _strcmp_ret:
0115++ 0077 EF          	pop si
0116++ 0078 F0          	pop di
0117++ 0079 E7          	pop d
0118++ 007A E8          	pop al
0119++ 007B 09          	ret
0120++ 007C             
0121++ 007C             
0122++ 007C             ; STRCPY
0123++ 007C             ; copy null terminated string from SI to DI
0124++ 007C             ; source in SI
0125++ 007C             ; destination in DI
0126++ 007C             _strcpy:
0127++ 007C E2          	push si
0128++ 007D E3          	push di
0129++ 007E DB          	push al
0130++ 007F             _strcpy_L1:
0131++ 007F F6          	lodsb
0132++ 0080 F7          	stosb
0133++ 0081 B9 00       	cmp al, 0
0134++ 0083 C7 7F 00    	jne _strcpy_L1
0135++ 0086             _strcpy_end:
0136++ 0086 E8          	pop al
0137++ 0087 F0          	pop di
0138++ 0088 EF          	pop si
0139++ 0089 09          	ret
0140++ 008A             
0141++ 008A             ; STRCAT
0142++ 008A             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 008A             ; source in SI
0144++ 008A             ; destination in DI
0145++ 008A             _strcat:
0146++ 008A E2          	push si
0147++ 008B E3          	push di
0148++ 008C D7          	push a
0149++ 008D DA          	push d
0150++ 008E 50          	mov a, di
0151++ 008F 3C          	mov d, a
0152++ 0090             _strcat_goto_end_L1:
0153++ 0090 BD 00       	cmp byte[d], 0
0154++ 0092 C6 99 00    	je _strcat_start
0155++ 0095 79          	inc d
0156++ 0096 0A 90 00    	jmp _strcat_goto_end_L1
0157++ 0099             _strcat_start:
0158++ 0099 FD 50       	mov di, d
0159++ 009B             _strcat_L1:
0160++ 009B F6          	lodsb
0161++ 009C F7          	stosb
0162++ 009D B9 00       	cmp al, 0
0163++ 009F C7 9B 00    	jne _strcat_L1
0164++ 00A2             _strcat_end:
0165++ 00A2 E7          	pop d
0166++ 00A3 E4          	pop a
0167++ 00A4 F0          	pop di
0168++ 00A5 EF          	pop si
0169++ 00A6 09          	ret
0170++ 00A7             
0171++ 00A7             
0005+  00A7             
0006+  00A7             
0007+  00A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  00A7             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  00A7             ; ASCII in BL
0010+  00A7             ; result in AL
0011+  00A7             ; ascii for F = 0100 0110
0012+  00A7             ; ascii for 9 = 0011 1001
0013+  00A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  00A7             hex_ascii_encode:
0015+  00A7 1B            mov al, bl
0016+  00A8 93 40         test al, $40        ; test if letter or number
0017+  00AA C7 B0 00      jnz hex_letter
0018+  00AD 87 0F         and al, $0F        ; get number
0019+  00AF 09            ret
0020+  00B0             hex_letter:
0021+  00B0 87 0F         and al, $0F        ; get letter
0022+  00B2 6A 09         add al, 9
0023+  00B4 09            ret
0024+  00B5             
0025+  00B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  00B5             ; ATOI
0027+  00B5             ; 2 letter hex string in B
0028+  00B5             ; 8bit integer returned in AL
0029+  00B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  00B5             _atoi:
0031+  00B5 D8            push b
0032+  00B6 07 A7 00      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  00B9 30            mov bl, bh
0034+  00BA DB            push al          ; save a
0035+  00BB 07 A7 00      call hex_ascii_encode
0036+  00BE EA            pop bl  
0037+  00BF FD 9E 04      shl al, 4
0038+  00C2 8C            or al, bl
0039+  00C3 E5            pop b
0040+  00C4 09            ret  
0041+  00C5             
0042+  00C5             
0043+  00C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  00C5             ; scanf
0045+  00C5             ; no need for explanations!
0046+  00C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  00C5             scanf:
0048+  00C5 09            ret
0049+  00C6             
0050+  00C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  00C6             ; ITOA
0052+  00C6             ; 8bit value in BL
0053+  00C6             ; 2 byte ASCII result in A
0054+  00C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  00C6             _itoa:
0056+  00C6 DA            push d
0057+  00C7 D8            push b
0058+  00C8 A7 00         mov bh, 0
0059+  00CA FD A4 04      shr bl, 4  
0060+  00CD 74            mov d, b
0061+  00CE 1F 60 03      mov al, [d + s_hex_digits]
0062+  00D1 23            mov ah, al
0063+  00D2               
0064+  00D2 E5            pop b
0065+  00D3 D8            push b
0066+  00D4 A7 00         mov bh, 0
0067+  00D6 FD 87 0F      and bl, $0F
0068+  00D9 74            mov d, b
0069+  00DA 1F 60 03      mov al, [d + s_hex_digits]
0070+  00DD E5            pop b
0071+  00DE E7            pop d
0072+  00DF 09            ret
0073+  00E0             
0074+  00E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  00E0             ; HEX STRING TO BINARY
0076+  00E0             ; di = destination address
0077+  00E0             ; si = source
0078+  00E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  00E0             _hex_to_int:
0080+  00E0             _hex_to_int_L1:
0081+  00E0 F6            lodsb          ; load from [SI] to AL
0082+  00E1 B9 00         cmp al, 0        ; check if ASCII 0
0083+  00E3 C6 F0 00      jz _hex_to_int_ret
0084+  00E6 36            mov bh, al
0085+  00E7 F6            lodsb
0086+  00E8 2F            mov bl, al
0087+  00E9 07 B5 00      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  00EC F7            stosb          ; store AL to [DI]
0089+  00ED 0A E0 00      jmp _hex_to_int_L1
0090+  00F0             _hex_to_int_ret:
0091+  00F0 09            ret    
0092+  00F1             
0093+  00F1             
0094+  00F1             
0095+  00F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  00F1             ; GETCHAR
0097+  00F1             ; char in ah
0098+  00F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  00F1             getch:
0100+  00F1 DB            push al
0101+  00F2             getch_retry:
0102+  00F2 19 01         mov al, 1
0103+  00F4 05 03         syscall sys_io      ; receive in AH
0104+  00F6 E8            pop al
0105+  00F7 09            ret
0106+  00F8             
0107+  00F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  00F8             ; PUTCHAR
0109+  00F8             ; char in ah
0110+  00F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  00F8             _putchar:
0112+  00F8 DB            push al
0113+  00F9 19 00         mov al, 0
0114+  00FB 05 03         syscall sys_io      ; char in AH
0115+  00FD E8            pop al
0116+  00FE 09            ret
0117+  00FF             
0118+  00FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  00FF             ;; INPUT A STRING
0120+  00FF             ;; terminates with null
0121+  00FF             ;; pointer in D
0122+  00FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  00FF             _gets:
0124+  00FF D7            push a
0125+  0100 DA            push d
0126+  0101             _gets_loop:
0127+  0101 19 01         mov al, 1
0128+  0103 05 03         syscall sys_io      ; receive in AH
0129+  0105 76 1B         cmp ah, 27
0130+  0107 C6 28 01      je _gets_ansi_esc
0131+  010A 76 0A         cmp ah, $0A        ; LF
0132+  010C C6 84 01      je _gets_end
0133+  010F 76 0D         cmp ah, $0D        ; CR
0134+  0111 C6 84 01      je _gets_end
0135+  0114 76 5C         cmp ah, $5C        ; '\\'
0136+  0116 C6 4A 01      je _gets_escape
0137+  0119 76 08         cmp ah, $08      ; check for backspace
0138+  011B C6 24 01      je _gets_backspace
0139+  011E 1A            mov al, ah
0140+  011F 3E            mov [d], al
0141+  0120 79            inc d
0142+  0121 0A 01 01      jmp _gets_loop
0143+  0124             _gets_backspace:
0144+  0124 7F            dec d
0145+  0125 0A 01 01      jmp _gets_loop
0146+  0128             _gets_ansi_esc:
0147+  0128 19 01         mov al, 1
0148+  012A 05 03         syscall sys_io        ; receive in AH without echo
0149+  012C 76 5B         cmp ah, '['
0150+  012E C7 01 01      jne _gets_loop
0151+  0131 19 01         mov al, 1
0152+  0133 05 03         syscall sys_io          ; receive in AH without echo
0153+  0135 76 44         cmp ah, 'D'
0154+  0137 C6 42 01      je _gets_left_arrow
0155+  013A 76 43         cmp ah, 'C'
0156+  013C C6 46 01      je _gets_right_arrow
0157+  013F 0A 01 01      jmp _gets_loop
0158+  0142             _gets_left_arrow:
0159+  0142 7F            dec d
0160+  0143 0A 01 01      jmp _gets_loop
0161+  0146             _gets_right_arrow:
0162+  0146 79            inc d
0163+  0147 0A 01 01      jmp _gets_loop
0164+  014A             _gets_escape:
0165+  014A 19 01         mov al, 1
0166+  014C 05 03         syscall sys_io      ; receive in AH
0167+  014E 76 6E         cmp ah, 'n'
0168+  0150 C6 6F 01      je _gets_LF
0169+  0153 76 72         cmp ah, 'r'
0170+  0155 C6 76 01      je _gets_CR
0171+  0158 76 30         cmp ah, '0'
0172+  015A C6 7D 01      je _gets_NULL
0173+  015D 76 5C         cmp ah, $5C  ; '\'
0174+  015F C6 68 01      je _gets_slash
0175+  0162 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  0163 3E            mov [d], al
0177+  0164 79            inc d
0178+  0165 0A 01 01      jmp _gets_loop
0179+  0168             _gets_slash:
0180+  0168 19 5C         mov al, $5C
0181+  016A 3E            mov [d], al
0182+  016B 79            inc d
0183+  016C 0A 01 01      jmp _gets_loop
0184+  016F             _gets_LF:
0185+  016F 19 0A         mov al, $0A
0186+  0171 3E            mov [d], al
0187+  0172 79            inc d
0188+  0173 0A 01 01      jmp _gets_loop
0189+  0176             _gets_CR:
0190+  0176 19 0D         mov al, $0D
0191+  0178 3E            mov [d], al
0192+  0179 79            inc d
0193+  017A 0A 01 01      jmp _gets_loop
0194+  017D             _gets_NULL:
0195+  017D 19 00         mov al, $00
0196+  017F 3E            mov [d], al
0197+  0180 79            inc d
0198+  0181 0A 01 01      jmp _gets_loop
0199+  0184             _gets_end:
0200+  0184 19 00         mov al, 0
0201+  0186 3E            mov [d], al        ; terminate string
0202+  0187 E7            pop d
0203+  0188 E4            pop a
0204+  0189 09            ret
0205+  018A             
0206+  018A             
0207+  018A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  018A             ;; INPUT TEXT
0209+  018A             ;; terminated with CTRL+D
0210+  018A             ;; pointer in D
0211+  018A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  018A             _gettxt:
0213+  018A D7            push a
0214+  018B DA            push d
0215+  018C             _gettxt_loop:
0216+  018C 19 01         mov al, 1
0217+  018E 05 03         syscall sys_io      ; receive in AH
0218+  0190 76 04         cmp ah, 4      ; EOT
0219+  0192 C6 CB 01      je _gettxt_end
0220+  0195 76 08         cmp ah, $08      ; check for backspace
0221+  0197 C6 C7 01      je _gettxt_backspace
0222+  019A 76 5C         cmp ah, $5C        ; '\'
0223+  019C C6 A5 01      je _gettxt_escape
0224+  019F 1A            mov al, ah
0225+  01A0 3E            mov [d], al
0226+  01A1 79            inc d
0227+  01A2 0A 8C 01      jmp _gettxt_loop
0228+  01A5             _gettxt_escape:
0229+  01A5 19 01         mov al, 1
0230+  01A7 05 03         syscall sys_io      ; receive in AH
0231+  01A9 76 6E         cmp ah, 'n'
0232+  01AB C6 B9 01      je _gettxt_LF
0233+  01AE 76 72         cmp ah, 'r'
0234+  01B0 C6 C0 01      je _gettxt_CR
0235+  01B3 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  01B4 3E            mov [d], al
0237+  01B5 79            inc d
0238+  01B6 0A 8C 01      jmp _gettxt_loop
0239+  01B9             _gettxt_LF:
0240+  01B9 19 0A         mov al, $0A
0241+  01BB 3E            mov [d], al
0242+  01BC 79            inc d
0243+  01BD 0A 8C 01      jmp _gettxt_loop
0244+  01C0             _gettxt_CR:
0245+  01C0 19 0D         mov al, $0D
0246+  01C2 3E            mov [d], al
0247+  01C3 79            inc d
0248+  01C4 0A 8C 01      jmp _gettxt_loop
0249+  01C7             _gettxt_backspace:
0250+  01C7 7F            dec d
0251+  01C8 0A 8C 01      jmp _gettxt_loop
0252+  01CB             _gettxt_end:
0253+  01CB 19 00         mov al, 0
0254+  01CD 3E            mov [d], al        ; terminate string
0255+  01CE E7            pop d
0256+  01CF E4            pop a
0257+  01D0 09            ret
0258+  01D1             
0259+  01D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  01D1             ; PRINT NEW LINE
0261+  01D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  01D1             printnl:
0263+  01D1 D7            push a
0264+  01D2 10 00 0A      mov a, $0A00
0265+  01D5 05 03         syscall sys_io
0266+  01D7 10 00 0D      mov a, $0D00
0267+  01DA 05 03         syscall sys_io
0268+  01DC E4            pop a
0269+  01DD 09            ret
0270+  01DE             
0271+  01DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  01DE             ; _strtoint
0273+  01DE             ; 4 digit hex string number in d
0274+  01DE             ; integer returned in A
0275+  01DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  01DE             _strtointx:
0277+  01DE D8            push b
0278+  01DF 32            mov bl, [d]
0279+  01E0 37            mov bh, bl
0280+  01E1 33 01 00      mov bl, [d + 1]
0281+  01E4 07 B5 00      call _atoi        ; convert to int in AL
0282+  01E7 23            mov ah, al        ; move to AH
0283+  01E8 33 02 00      mov bl, [d + 2]
0284+  01EB 37            mov bh, bl
0285+  01EC 33 03 00      mov bl, [d + 3]
0286+  01EF 07 B5 00      call _atoi        ; convert to int in AL
0287+  01F2 E5            pop b
0288+  01F3 09            ret
0289+  01F4             
0290+  01F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  01F4             ; _strtoint
0292+  01F4             ; 5 digit base10 string number in d
0293+  01F4             ; integer returned in A
0294+  01F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  01F4             _strtoint:
0296+  01F4 E2            push si
0297+  01F5 D8            push b
0298+  01F6 D9            push c
0299+  01F7 DA            push d
0300+  01F8 07 57 00      call _strlen      ; get string length in C
0301+  01FB 7E            dec c
0302+  01FC FD 4E         mov si, d
0303+  01FE 12            mov a, c
0304+  01FF FD 99         shl a
0305+  0201 3B 78 03      mov d, table_power
0306+  0204 59            add d, a
0307+  0205 38 00 00      mov c, 0
0308+  0208             _strtoint_L0:
0309+  0208 F6            lodsb      ; load ASCII to al
0310+  0209 B9 00         cmp al, 0
0311+  020B C6 1E 02      je _strtoint_end
0312+  020E 6F 30         sub al, $30    ; make into integer
0313+  0210 22 00         mov ah, 0
0314+  0212 2A            mov b, [d]
0315+  0213 AC            mul a, b      ; result in B since it fits in 16bits
0316+  0214 11            mov a, b
0317+  0215 28            mov b, c
0318+  0216 54            add a, b
0319+  0217 39            mov c, a
0320+  0218 63 02 00      sub d, 2
0321+  021B 0A 08 02      jmp _strtoint_L0
0322+  021E             _strtoint_end:
0323+  021E 12            mov a, c
0324+  021F E7            pop d
0325+  0220 E6            pop c
0326+  0221 E5            pop b
0327+  0222 EF            pop si
0328+  0223 09            ret
0329+  0224             
0330+  0224             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  0224             ; PRINT NULL TERMINATED STRING
0332+  0224             ; pointer in D
0333+  0224             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  0224             _puts:
0335+  0224 D7            push a
0336+  0225 DA            push d
0337+  0226             _puts_L1:
0338+  0226 1E            mov al, [d]
0339+  0227 B9 00         cmp al, 0
0340+  0229 C6 35 02      jz _puts_END
0341+  022C 23            mov ah, al
0342+  022D 19 00         mov al, 0
0343+  022F 05 03         syscall sys_io
0344+  0231 79            inc d
0345+  0232 0A 26 02      jmp _puts_L1
0346+  0235             _puts_END:
0347+  0235 E7            pop d
0348+  0236 E4            pop a
0349+  0237 09            ret
0350+  0238             
0351+  0238             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  0238             ; PRINT N SIZE STRING
0353+  0238             ; pointer in D
0354+  0238             ; size in C
0355+  0238             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  0238             _putsn:
0357+  0238 DB            push al
0358+  0239 DA            push d
0359+  023A D9            push c
0360+  023B             _putsn_L0:
0361+  023B 1E            mov al, [d]
0362+  023C 23            mov ah, al
0363+  023D 19 00         mov al, 0
0364+  023F 05 03         syscall sys_io
0365+  0241 79            inc d
0366+  0242 7E            dec c  
0367+  0243 C2 00 00      cmp c, 0
0368+  0246 C7 3B 02      jne _putsn_L0
0369+  0249             _putsn_end:
0370+  0249 E6            pop c
0371+  024A E7            pop d
0372+  024B E8            pop al
0373+  024C 09            ret
0374+  024D             
0375+  024D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  024D             ; print 16bit decimal number
0377+  024D             ; input number in A
0378+  024D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  024D             print_u16d:
0380+  024D D7            push a
0381+  024E D8            push b
0382+  024F FD D8         push g
0383+  0251 26 10 27      mov b, 10000
0384+  0254 AE            div a, b      ; get 10000's coeff.
0385+  0255 07 79 02      call print_number
0386+  0258 11            mov a, b
0387+  0259 26 E8 03      mov b, 1000
0388+  025C AE            div a, b      ; get 1000's coeff.
0389+  025D 07 79 02      call print_number
0390+  0260 11            mov a, b
0391+  0261 26 64 00      mov b, 100
0392+  0264 AE            div a, b
0393+  0265 07 79 02      call print_number
0394+  0268 11            mov a, b
0395+  0269 26 0A 00      mov b, 10
0396+  026C AE            div a, b
0397+  026D 07 79 02      call print_number
0398+  0270 1B            mov al, bl      ; 1's coeff in bl
0399+  0271 07 79 02      call print_number
0400+  0274 FD F1         pop g
0401+  0276 E5            pop b
0402+  0277 E4            pop a
0403+  0278 09            ret
0404+  0279             
0405+  0279             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  0279             ; print AL
0407+  0279             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  0279             print_number:
0409+  0279 6A 30         add al, $30
0410+  027B 23            mov ah, al
0411+  027C 07 F8 00      call _putchar
0412+  027F 09            ret
0413+  0280             
0414+  0280             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  0280             ; PRINT 16BIT HEX INTEGER
0416+  0280             ; integer value in reg B
0417+  0280             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  0280             print_u16x:
0419+  0280 D7            push a
0420+  0281 D8            push b
0421+  0282 DD            push bl
0422+  0283 30            mov bl, bh
0423+  0284 07 C6 00      call _itoa        ; convert bh to char in A
0424+  0287 2F            mov bl, al        ; save al
0425+  0288 19 00         mov al, 0
0426+  028A 05 03         syscall sys_io        ; display AH
0427+  028C 24            mov ah, bl        ; retrieve al
0428+  028D 19 00         mov al, 0
0429+  028F 05 03         syscall sys_io        ; display AL
0430+  0291             
0431+  0291 EA            pop bl
0432+  0292 07 C6 00      call _itoa        ; convert bh to char in A
0433+  0295 2F            mov bl, al        ; save al
0434+  0296 19 00         mov al, 0
0435+  0298 05 03         syscall sys_io        ; display AH
0436+  029A 24            mov ah, bl        ; retrieve al
0437+  029B 19 00         mov al, 0
0438+  029D 05 03         syscall sys_io        ; display AL
0439+  029F             
0440+  029F E5            pop b
0441+  02A0 E4            pop a
0442+  02A1 09            ret
0443+  02A2             
0444+  02A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  02A2             ; INPUT 16BIT HEX INTEGER
0446+  02A2             ; read 16bit integer into A
0447+  02A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  02A2             scan_u16x:
0449+  02A2 F8 10 00      enter 16
0450+  02A5 D8            push b
0451+  02A6 DA            push d
0452+  02A7             
0453+  02A7 FA F1 FF      lea d, [bp + -15]
0454+  02AA 07 FF 00      call _gets        ; get number
0455+  02AD             
0456+  02AD 32            mov bl, [d]
0457+  02AE 37            mov bh, bl
0458+  02AF 33 01 00      mov bl, [d + 1]
0459+  02B2 07 B5 00      call _atoi        ; convert to int in AL
0460+  02B5 23            mov ah, al        ; move to AH
0461+  02B6             
0462+  02B6 33 02 00      mov bl, [d + 2]
0463+  02B9 37            mov bh, bl
0464+  02BA 33 03 00      mov bl, [d + 3]
0465+  02BD 07 B5 00      call _atoi        ; convert to int in AL
0466+  02C0             
0467+  02C0 E7            pop d
0468+  02C1 E5            pop b
0469+  02C2 F9            leave
0470+  02C3 09            ret
0471+  02C4             
0472+  02C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  02C4             ; PRINT 8bit HEX INTEGER
0474+  02C4             ; integer value in reg bl
0475+  02C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  02C4             print_u8x:
0477+  02C4 D7            push a
0478+  02C5 DD            push bl
0479+  02C6             
0480+  02C6 07 C6 00      call _itoa        ; convert bl to char in A
0481+  02C9 2F            mov bl, al        ; save al
0482+  02CA 19 00         mov al, 0
0483+  02CC 05 03         syscall sys_io        ; display AH
0484+  02CE 24            mov ah, bl        ; retrieve al
0485+  02CF 19 00         mov al, 0
0486+  02D1 05 03         syscall sys_io        ; display AL
0487+  02D3             
0488+  02D3 EA            pop bl
0489+  02D4 E4            pop a
0490+  02D5 09            ret
0491+  02D6             
0492+  02D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  02D6             ; print 8bit decimal unsigned number
0494+  02D6             ; input number in AL
0495+  02D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  02D6             print_u8d:
0497+  02D6 D7            push a
0498+  02D7 D8            push b
0499+  02D8 FD D8         push g
0500+  02DA 22 00         mov ah, 0
0501+  02DC 26 64 00      mov b, 100
0502+  02DF AE            div a, b
0503+  02E0 D8            push b      ; save remainder
0504+  02E1 B9 00         cmp al, 0
0505+  02E3 C6 ED 02      je skip100
0506+  02E6 6A 30         add al, $30
0507+  02E8 23            mov ah, al
0508+  02E9 19 00         mov al, 0
0509+  02EB 05 03         syscall sys_io  ; print coeff
0510+  02ED             skip100:
0511+  02ED E4            pop a
0512+  02EE 22 00         mov ah, 0
0513+  02F0 26 0A 00      mov b, 10
0514+  02F3 AE            div a, b
0515+  02F4 D8            push b      ; save remainder
0516+  02F5 B9 00         cmp al, 0
0517+  02F7 C6 01 03      je skip10
0518+  02FA 6A 30         add al, $30
0519+  02FC 23            mov ah, al
0520+  02FD 19 00         mov al, 0
0521+  02FF 05 03         syscall sys_io  ; print coeff
0522+  0301             skip10:
0523+  0301 E4            pop a
0524+  0302 1B            mov al, bl
0525+  0303 6A 30         add al, $30
0526+  0305 23            mov ah, al
0527+  0306 19 00         mov al, 0
0528+  0308 05 03         syscall sys_io  ; print coeff
0529+  030A FD F1         pop g
0530+  030C E5            pop b
0531+  030D E4            pop a
0532+  030E 09            ret
0533+  030F             
0534+  030F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  030F             ; INPUT 8BIT HEX INTEGER
0536+  030F             ; read 8bit integer into AL
0537+  030F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  030F             scan_u8x:
0539+  030F F8 04 00      enter 4
0540+  0312 D8            push b
0541+  0313 DA            push d
0542+  0314             
0543+  0314 FA FD FF      lea d, [bp + -3]
0544+  0317 07 FF 00      call _gets        ; get number
0545+  031A             
0546+  031A 32            mov bl, [d]
0547+  031B 37            mov bh, bl
0548+  031C 33 01 00      mov bl, [d + 1]
0549+  031F 07 B5 00      call _atoi        ; convert to int in AL
0550+  0322             
0551+  0322 E7            pop d
0552+  0323 E5            pop b
0553+  0324 F9            leave
0554+  0325 09            ret
0555+  0326             
0556+  0326             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  0326             ; input decimal number
0558+  0326             ; result in A
0559+  0326             ; 655'\0'
0560+  0326             ; low--------high
0561+  0326             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  0326             scan_u16d:
0563+  0326 F8 08 00      enter 8
0564+  0329 E2            push si
0565+  032A D8            push b
0566+  032B D9            push c
0567+  032C DA            push d
0568+  032D FA F9 FF      lea d, [bp +- 7]
0569+  0330 07 FF 00      call _gets
0570+  0333 07 57 00      call _strlen      ; get string length in C
0571+  0336 7E            dec c
0572+  0337 FD 4E         mov si, d
0573+  0339 12            mov a, c
0574+  033A FD 99         shl a
0575+  033C 3B 78 03      mov d, table_power
0576+  033F 59            add d, a
0577+  0340 38 00 00      mov c, 0
0578+  0343             mul_loop:
0579+  0343 F6            lodsb      ; load ASCII to al
0580+  0344 B9 00         cmp al, 0
0581+  0346 C6 59 03      je mul_exit
0582+  0349 6F 30         sub al, $30    ; make into integer
0583+  034B 22 00         mov ah, 0
0584+  034D 2A            mov b, [d]
0585+  034E AC            mul a, b      ; result in B since it fits in 16bits
0586+  034F 11            mov a, b
0587+  0350 28            mov b, c
0588+  0351 54            add a, b
0589+  0352 39            mov c, a
0590+  0353 63 02 00      sub d, 2
0591+  0356 0A 43 03      jmp mul_loop
0592+  0359             mul_exit:
0593+  0359 12            mov a, c
0594+  035A E7            pop d
0595+  035B E6            pop c
0596+  035C E5            pop b
0597+  035D EF            pop si
0598+  035E F9            leave
0599+  035F 09            ret
0600+  0360             
0601+  0360             
0602+  0360 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0602+  0364 34 35 36 37 
0602+  0368 38 39 41 42 
0602+  036C 43 44 45 46 
0603+  0370 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0603+  0374 1B 5B 48 00 
0604+  0378             
0605+  0378             table_power:
0606+  0378 01 00         .dw 1
0607+  037A 0A 00         .dw 10
0608+  037C 64 00         .dw 100
0609+  037E E8 03         .dw 1000
0610+  0380 10 27         .dw 100000016   0382             
0017   0382             
0018   0382             
0019   0382             .end
tasm: Number of errors = 0
