0001   0000             ; --- FILENAME: ../solarium/usr/bin/shell.c
0002   0000             ; --- DATE:     25-10-2025 at 01:11:04
0003   0000             .include "lib/asm/kernel.exp"
0001+  0000             fdc_al_restore   .EQU  $0000
0002+  0000             fdc_al_step      .EQU  $0001
0003+  0000             fdc_al_step_in   .EQU  $0002
0004+  0000             fdc_al_step_out  .EQU  $0003
0005+  0000             fdc_al_seek      .EQU  $0004
0006+  0000             fdc_al_format_128 .EQU  $0005
0007+  0000             fdc_al_formatdisk_128 .EQU  $0006
0008+  0000             fdc_al_format_512 .EQU  $0007
0009+  0000             fdc_al_formatdisk_512 .EQU  $0008
0010+  0000             fdc_al_read_addr .EQU  $0009
0011+  0000             fdc_al_read_track .EQU  $000a
0012+  0000             fdc_al_read_sect .EQU  $000b
0013+  0000             fdc_al_write_sect .EQU  $000c
0014+  0000             fdc_al_force_int .EQU  $000d
0015+  0000             fdc_al_status0   .EQU  $000e
0016+  0000             fdc_al_status1   .EQU  $000f
0017+  0000             noname._til311_display .EQU  $ffb0
0018+  0000             noname._fdc_config .EQU  $ffc0
0019+  0000             noname._fdc_status_0 .EQU  $ffc1
0020+  0000             noname._fdc_stat_cmd .EQU  $ffc8
0021+  0000             sys_break        .EQU  $0000
0022+  0000             sys_rtc          .EQU  $0001
0023+  0000             sys_ide          .EQU  $0002
0024+  0000             sys_io           .EQU  $0003
0025+  0000             sys_filesystem   .EQU  $0004
0026+  0000             sys_create_proc  .EQU  $0005
0027+  0000             sys_list_proc    .EQU  $0006
0028+  0000             sys_datetime     .EQU  $0007
0029+  0000             sys_reboot       .EQU  $0008
0030+  0000             sys_pause_proc   .EQU  $0009
0031+  0000             sys_resume_proc  .EQU  $000a
0032+  0000             sys_terminate_proc .EQU  $000b
0033+  0000             sys_system       .EQU  $000c
0034+  0000             sys_fdc          .EQU  $000d
0035+  0000             text_org         .EQU  $0400
0004   0000             .include "lib/asm/bios.exp"
0001+  0000             bios_reset_vector .equ  $01c0
0002+  0000             ide_buffer       .equ  $8204
0003+  0000             boot_origin      .equ  $8004
0004+  0000             bios_uart        .equ  $0002
0005+  0000             bios_ide         .equ  $0003
0005   0000             
0006   0000             ; --- BEGIN TEXT SEGMENT
0007   0400             .org text_org
0008   0400             main:
0009   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0010   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0011   0408             ; char *p; 
0012   0408 52 01 00      sub sp, 1
0013   040B             ; char *t; 
0014   040B 52 01 00      sub sp, 1
0015   040E             ; char *temp_prog; 
0016   040E 52 01 00      sub sp, 1
0017   0411             ; char varname[ID_LEN]; 
0018   0411 52 01 00      sub sp, 1
0019   0414             ; char is_assignment; 
0020   0414 52 01 00      sub sp, 1
0021   0417             ; char variable_str[128]; 
0022   0417 52 80 00      sub sp, 128
0023   041A             ; int variable_int; 
0024   041A 52 02 00      sub sp, 2
0025   041D             ; int var_index; 
0026   041D 52 02 00      sub sp, 2
0027   0420             ; int i; 
0028   0420 52 02 00      sub sp, 2
0029   0423             ; new_str_var("path", "", 64); 
0030   0423             ; --- START FUNCTION CALL
0031   0423 FD 2E 40 00   mov32 cb, $00000040
0031   0427 00 00 
0032   0429 FD AB         swp b
0033   042B D8            push b
0034   042C 26 90 44      mov b, _s0 ; ""
0035   042F FD AB         swp b
0036   0431 D8            push b
0037   0432 26 91 44      mov b, _s1 ; "path"
0038   0435 FD AB         swp b
0039   0437 D8            push b
0040   0438 07 28 0B      call new_str_var
0041   043B 51 06 00      add sp, 6
0042   043E             ; --- END FUNCTION CALL
0043   043E             ; new_str_var("home", "", 64); 
0044   043E             ; --- START FUNCTION CALL
0045   043E FD 2E 40 00   mov32 cb, $00000040
0045   0442 00 00 
0046   0444 FD AB         swp b
0047   0446 D8            push b
0048   0447 26 90 44      mov b, _s0 ; ""
0049   044A FD AB         swp b
0050   044C D8            push b
0051   044D 26 96 44      mov b, _s2 ; "home"
0052   0450 FD AB         swp b
0053   0452 D8            push b
0054   0453 07 28 0B      call new_str_var
0055   0456 51 06 00      add sp, 6
0056   0459             ; --- END FUNCTION CALL
0057   0459             ; read_config("/etc/shell.cfg", "path", variables[0].as_string); 
0058   0459             ; --- START FUNCTION CALL
0059   0459 3B B3 41      mov d, _variables_data ; $variables
0060   045C D7            push a
0061   045D DA            push d
0062   045E FD 2E 00 00   mov32 cb, $00000000
0062   0462 00 00 
0063   0464 E7            pop d
0064   0465 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0065   0469 E4            pop a
0066   046A 58 11 00      add d, 17
0067   046D 2A            mov b, [d]
0068   046E 38 00 00      mov c, 0
0069   0471 FD AB         swp b
0070   0473 D8            push b
0071   0474 26 91 44      mov b, _s1 ; "path"
0072   0477 FD AB         swp b
0073   0479 D8            push b
0074   047A 26 9B 44      mov b, _s3 ; "/etc/shell.cfg"
0075   047D FD AB         swp b
0076   047F D8            push b
0077   0480 07 DA 11      call read_config
0078   0483 51 06 00      add sp, 6
0079   0486             ; --- END FUNCTION CALL
0080   0486             ; read_config("/etc/shell.cfg", "home", variables[1].as_string); 
0081   0486             ; --- START FUNCTION CALL
0082   0486 3B B3 41      mov d, _variables_data ; $variables
0083   0489 D7            push a
0084   048A DA            push d
0085   048B FD 2E 01 00   mov32 cb, $00000001
0085   048F 00 00 
0086   0491 E7            pop d
0087   0492 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0088   0496 E4            pop a
0089   0497 58 11 00      add d, 17
0090   049A 2A            mov b, [d]
0091   049B 38 00 00      mov c, 0
0092   049E FD AB         swp b
0093   04A0 D8            push b
0094   04A1 26 96 44      mov b, _s2 ; "home"
0095   04A4 FD AB         swp b
0096   04A6 D8            push b
0097   04A7 26 9B 44      mov b, _s3 ; "/etc/shell.cfg"
0098   04AA FD AB         swp b
0099   04AC D8            push b
0100   04AD 07 DA 11      call read_config
0101   04B0 51 06 00      add sp, 6
0102   04B3             ; --- END FUNCTION CALL
0103   04B3             ; for(;;){ 
0104   04B3             _for1_init:
0105   04B3             _for1_cond:
0106   04B3             _for1_block:
0107   04B3             ; printf("root@Sol-1:");  
0108   04B3             ; --- START FUNCTION CALL
0109   04B3 26 AA 44      mov b, _s4 ; "root@Sol-1:"
0110   04B6 FD AB         swp b
0111   04B8 D8            push b
0112   04B9 07 91 28      call printf
0113   04BC 51 02 00      add sp, 2
0114   04BF             ; --- END FUNCTION CALL
0115   04BF             ; print_cwd();  
0116   04BF             ; --- START FUNCTION CALL
0117   04BF 07 B7 11      call print_cwd
0118   04C2             ; printf(" # "); 
0119   04C2             ; --- START FUNCTION CALL
0120   04C2 26 B6 44      mov b, _s5 ; " # "
0121   04C5 FD AB         swp b
0122   04C7 D8            push b
0123   04C8 07 91 28      call printf
0124   04CB 51 02 00      add sp, 2
0125   04CE             ; --- END FUNCTION CALL
0126   04CE             ; gets(command); 
0127   04CE             ; --- START FUNCTION CALL
0128   04CE 3B 33 3C      mov d, _command_data ; $command
0129   04D1 2D            mov b, d
0130   04D2 38 00 00      mov c, 0
0131   04D5 FD AB         swp b
0132   04D7 D8            push b
0133   04D8 07 03 37      call gets
0134   04DB 51 02 00      add sp, 2
0135   04DE             ; --- END FUNCTION CALL
0136   04DE             ; printf("\n\r"); 
0137   04DE             ; --- START FUNCTION CALL
0138   04DE 26 BA 44      mov b, _s6 ; "\n\r"
0139   04E1 FD AB         swp b
0140   04E3 D8            push b
0141   04E4 07 91 28      call printf
0142   04E7 51 02 00      add sp, 2
0143   04EA             ; --- END FUNCTION CALL
0144   04EA             ; if(command[0]) strcpy(last_cmd, command); 
0145   04EA             _if2_cond:
0146   04EA 3B 33 3C      mov d, _command_data ; $command
0147   04ED D7            push a
0148   04EE DA            push d
0149   04EF FD 2E 00 00   mov32 cb, $00000000
0149   04F3 00 00 
0150   04F5 E7            pop d
0151   04F6 5A            add d, b
0152   04F7 E4            pop a
0153   04F8 32            mov bl, [d]
0154   04F9 A7 00         mov bh, 0
0155   04FB 38 00 00      mov c, 0
0156   04FE C0 00 00      cmp b, 0
0157   0501 C6 21 05      je _if2_exit
0158   0504             _if2_TRUE:
0159   0504             ; strcpy(last_cmd, command); 
0160   0504             ; --- START FUNCTION CALL
0161   0504 3B 33 3C      mov d, _command_data ; $command
0162   0507 2D            mov b, d
0163   0508 38 00 00      mov c, 0
0164   050B FD AB         swp b
0165   050D D8            push b
0166   050E 3B 33 41      mov d, _last_cmd_data ; $last_cmd
0167   0511 2D            mov b, d
0168   0512 38 00 00      mov c, 0
0169   0515 FD AB         swp b
0170   0517 D8            push b
0171   0518 07 8D 14      call strcpy
0172   051B 51 04 00      add sp, 4
0173   051E             ; --- END FUNCTION CALL
0174   051E 0A 21 05      jmp _if2_exit
0175   0521             _if2_exit:
0176   0521             ; prog = command; 
0177   0521 3B 8F 42      mov d, _prog ; $prog
0178   0524 DA            push d
0179   0525 3B 33 3C      mov d, _command_data ; $command
0180   0528 2D            mov b, d
0181   0529 38 00 00      mov c, 0
0182   052C E7            pop d
0183   052D FD 3E         mov [d], bl
0184   052F             ; for(;;){ 
0185   052F             _for3_init:
0186   052F             _for3_cond:
0187   052F             _for3_block:
0188   052F             ; temp_prog = prog; 
0189   052F FA FE FF      lea d, [bp + -2] ; $temp_prog
0190   0532 DA            push d
0191   0533 3B 8F 42      mov d, _prog ; $prog
0192   0536 32            mov bl, [d]
0193   0537 A7 00         mov bh, 0
0194   0539 38 00 00      mov c, 0
0195   053C E7            pop d
0196   053D FD 3E         mov [d], bl
0197   053F             ; get(); 
0198   053F             ; --- START FUNCTION CALL
0199   053F 07 22 15      call get
0200   0542             ; if(tok == SEMICOLON) get(); 
0201   0542             _if4_cond:
0202   0542 3B 8B 42      mov d, _tok ; $tok
0203   0545 2A            mov b, [d]
0204   0546 38 00 00      mov c, 0
0205   0549             ; --- START RELATIONAL
0206   0549 D7            push a
0207   054A 11            mov a, b
0208   054B FD 2E 23 00   mov32 cb, $23 ; enum element: SEMICOLON
0208   054F 00 00 
0209   0551 B0            cmp a, b
0210   0552 FD 71         seq ; ==
0211   0554 E4            pop a
0212   0555             ; --- END RELATIONAL
0213   0555 C0 00 00      cmp b, 0
0214   0558 C6 61 05      je _if4_exit
0215   055B             _if4_TRUE:
0216   055B             ; get(); 
0217   055B             ; --- START FUNCTION CALL
0218   055B 07 22 15      call get
0219   055E 0A 61 05      jmp _if4_exit
0220   0561             _if4_exit:
0221   0561             ; if(toktype == END) break; // check for empty input 
0222   0561             _if5_cond:
0223   0561 3B 8D 42      mov d, _toktype ; $toktype
0224   0564 2A            mov b, [d]
0225   0565 38 00 00      mov c, 0
0226   0568             ; --- START RELATIONAL
0227   0568 D7            push a
0228   0569 11            mov a, b
0229   056A FD 2E 06 00   mov32 cb, $6 ; enum element: END
0229   056E 00 00 
0230   0570 B0            cmp a, b
0231   0571 FD 71         seq ; ==
0232   0573 E4            pop a
0233   0574             ; --- END RELATIONAL
0234   0574 C0 00 00      cmp b, 0
0235   0577 C6 80 05      je _if5_exit
0236   057A             _if5_TRUE:
0237   057A             ; break; // check for empty input 
0238   057A 0A D7 0A      jmp _for3_exit ; for break
0239   057D 0A 80 05      jmp _if5_exit
0240   0580             _if5_exit:
0241   0580             ; is_assignment = 0; 
0242   0580 FA FC FF      lea d, [bp + -4] ; $is_assignment
0243   0583 DA            push d
0244   0584 FD 2E 00 00   mov32 cb, $00000000
0244   0588 00 00 
0245   058A E7            pop d
0246   058B FD 3E         mov [d], bl
0247   058D             ; if(toktype == IDENTIFIER){ 
0248   058D             _if6_cond:
0249   058D 3B 8D 42      mov d, _toktype ; $toktype
0250   0590 2A            mov b, [d]
0251   0591 38 00 00      mov c, 0
0252   0594             ; --- START RELATIONAL
0253   0594 D7            push a
0254   0595 11            mov a, b
0255   0596 FD 2E 05 00   mov32 cb, $5 ; enum element: IDENTIFIER
0255   059A 00 00 
0256   059C B0            cmp a, b
0257   059D FD 71         seq ; ==
0258   059F E4            pop a
0259   05A0             ; --- END RELATIONAL
0260   05A0 C0 00 00      cmp b, 0
0261   05A3 C6 E2 05      je _if6_exit
0262   05A6             _if6_TRUE:
0263   05A6             ; strcpy(varname, token); 
0264   05A6             ; --- START FUNCTION CALL
0265   05A6 3B 90 42      mov d, _token_data ; $token
0266   05A9 2D            mov b, d
0267   05AA 38 00 00      mov c, 0
0268   05AD FD AB         swp b
0269   05AF D8            push b
0270   05B0 FA FD FF      lea d, [bp + -3] ; $varname
0271   05B3 32            mov bl, [d]
0272   05B4 A7 00         mov bh, 0
0273   05B6 38 00 00      mov c, 0
0274   05B9 FD AB         swp b
0275   05BB D8            push b
0276   05BC 07 8D 14      call strcpy
0277   05BF 51 04 00      add sp, 4
0278   05C2             ; --- END FUNCTION CALL
0279   05C2             ; get(); 
0280   05C2             ; --- START FUNCTION CALL
0281   05C2 07 22 15      call get
0282   05C5             ; is_assignment = tok == ASSIGNMENT; 
0283   05C5 FA FC FF      lea d, [bp + -4] ; $is_assignment
0284   05C8 DA            push d
0285   05C9 3B 8B 42      mov d, _tok ; $tok
0286   05CC 2A            mov b, [d]
0287   05CD 38 00 00      mov c, 0
0288   05D0             ; --- START RELATIONAL
0289   05D0 D7            push a
0290   05D1 11            mov a, b
0291   05D2 FD 2E 11 00   mov32 cb, $11 ; enum element: ASSIGNMENT
0291   05D6 00 00 
0292   05D8 B0            cmp a, b
0293   05D9 FD 71         seq ; ==
0294   05DB E4            pop a
0295   05DC             ; --- END RELATIONAL
0296   05DC E7            pop d
0297   05DD FD 3E         mov [d], bl
0298   05DF 0A E2 05      jmp _if6_exit
0299   05E2             _if6_exit:
0300   05E2             ; if(is_assignment){ 
0301   05E2             _if7_cond:
0302   05E2 FA FC FF      lea d, [bp + -4] ; $is_assignment
0303   05E5 32            mov bl, [d]
0304   05E6 A7 00         mov bh, 0
0305   05E8 38 00 00      mov c, 0
0306   05EB C0 00 00      cmp b, 0
0307   05EE C6 CE 06      je _if7_else
0308   05F1             _if7_TRUE:
0309   05F1             ; get(); 
0310   05F1             ; --- START FUNCTION CALL
0311   05F1 07 22 15      call get
0312   05F4             ; if(toktype == INTEGER_CONST) set_int_var(varname, atoi(token)); 
0313   05F4             _if8_cond:
0314   05F4 3B 8D 42      mov d, _toktype ; $toktype
0315   05F7 2A            mov b, [d]
0316   05F8 38 00 00      mov c, 0
0317   05FB             ; --- START RELATIONAL
0318   05FB D7            push a
0319   05FC 11            mov a, b
0320   05FD FD 2E 04 00   mov32 cb, $4 ; enum element: INTEGER_CONST
0320   0601 00 00 
0321   0603 B0            cmp a, b
0322   0604 FD 71         seq ; ==
0323   0606 E4            pop a
0324   0607             ; --- END RELATIONAL
0325   0607 C0 00 00      cmp b, 0
0326   060A C6 35 06      je _if8_else
0327   060D             _if8_TRUE:
0328   060D             ; set_int_var(varname, atoi(token)); 
0329   060D             ; --- START FUNCTION CALL
0330   060D             ; --- START FUNCTION CALL
0331   060D 3B 90 42      mov d, _token_data ; $token
0332   0610 2D            mov b, d
0333   0611 38 00 00      mov c, 0
0334   0614 FD AB         swp b
0335   0616 D8            push b
0336   0617 07 C1 37      call atoi
0337   061A 51 02 00      add sp, 2
0338   061D             ; --- END FUNCTION CALL
0339   061D FD AB         swp b
0340   061F D8            push b
0341   0620 FA FD FF      lea d, [bp + -3] ; $varname
0342   0623 32            mov bl, [d]
0343   0624 A7 00         mov bh, 0
0344   0626 38 00 00      mov c, 0
0345   0629 FD AB         swp b
0346   062B D8            push b
0347   062C 07 A6 0C      call set_int_var
0348   062F 51 04 00      add sp, 4
0349   0632             ; --- END FUNCTION CALL
0350   0632 0A CB 06      jmp _if8_exit
0351   0635             _if8_else:
0352   0635             ; if(toktype == STRING_CONST) new_str_var(varname, string_const, strlen(string_const)); 
0353   0635             _if9_cond:
0354   0635 3B 8D 42      mov d, _toktype ; $toktype
0355   0638 2A            mov b, [d]
0356   0639 38 00 00      mov c, 0
0357   063C             ; --- START RELATIONAL
0358   063C D7            push a
0359   063D 11            mov a, b
0360   063E FD 2E 03 00   mov32 cb, $3 ; enum element: STRING_CONST
0360   0642 00 00 
0361   0644 B0            cmp a, b
0362   0645 FD 71         seq ; ==
0363   0647 E4            pop a
0364   0648             ; --- END RELATIONAL
0365   0648 C0 00 00      cmp b, 0
0366   064B C6 80 06      je _if9_else
0367   064E             _if9_TRUE:
0368   064E             ; new_str_var(varname, string_const, strlen(string_const)); 
0369   064E             ; --- START FUNCTION CALL
0370   064E             ; --- START FUNCTION CALL
0371   064E 3B 90 43      mov d, _string_const_data ; $string_const
0372   0651 2D            mov b, d
0373   0652 38 00 00      mov c, 0
0374   0655 FD AB         swp b
0375   0657 D8            push b
0376   0658 07 48 36      call strlen
0377   065B 51 02 00      add sp, 2
0378   065E             ; --- END FUNCTION CALL
0379   065E FD AB         swp b
0380   0660 D8            push b
0381   0661 3B 90 43      mov d, _string_const_data ; $string_const
0382   0664 2D            mov b, d
0383   0665 38 00 00      mov c, 0
0384   0668 FD AB         swp b
0385   066A D8            push b
0386   066B FA FD FF      lea d, [bp + -3] ; $varname
0387   066E 32            mov bl, [d]
0388   066F A7 00         mov bh, 0
0389   0671 38 00 00      mov c, 0
0390   0674 FD AB         swp b
0391   0676 D8            push b
0392   0677 07 28 0B      call new_str_var
0393   067A 51 06 00      add sp, 6
0394   067D             ; --- END FUNCTION CALL
0395   067D 0A CB 06      jmp _if9_exit
0396   0680             _if9_else:
0397   0680             ; if(toktype == IDENTIFIER) new_str_var(varname, token, strlen(token)); 
0398   0680             _if10_cond:
0399   0680 3B 8D 42      mov d, _toktype ; $toktype
0400   0683 2A            mov b, [d]
0401   0684 38 00 00      mov c, 0
0402   0687             ; --- START RELATIONAL
0403   0687 D7            push a
0404   0688 11            mov a, b
0405   0689 FD 2E 05 00   mov32 cb, $5 ; enum element: IDENTIFIER
0405   068D 00 00 
0406   068F B0            cmp a, b
0407   0690 FD 71         seq ; ==
0408   0692 E4            pop a
0409   0693             ; --- END RELATIONAL
0410   0693 C0 00 00      cmp b, 0
0411   0696 C6 CB 06      je _if10_exit
0412   0699             _if10_TRUE:
0413   0699             ; new_str_var(varname, token, strlen(token)); 
0414   0699             ; --- START FUNCTION CALL
0415   0699             ; --- START FUNCTION CALL
0416   0699 3B 90 42      mov d, _token_data ; $token
0417   069C 2D            mov b, d
0418   069D 38 00 00      mov c, 0
0419   06A0 FD AB         swp b
0420   06A2 D8            push b
0421   06A3 07 48 36      call strlen
0422   06A6 51 02 00      add sp, 2
0423   06A9             ; --- END FUNCTION CALL
0424   06A9 FD AB         swp b
0425   06AB D8            push b
0426   06AC 3B 90 42      mov d, _token_data ; $token
0427   06AF 2D            mov b, d
0428   06B0 38 00 00      mov c, 0
0429   06B3 FD AB         swp b
0430   06B5 D8            push b
0431   06B6 FA FD FF      lea d, [bp + -3] ; $varname
0432   06B9 32            mov bl, [d]
0433   06BA A7 00         mov bh, 0
0434   06BC 38 00 00      mov c, 0
0435   06BF FD AB         swp b
0436   06C1 D8            push b
0437   06C2 07 28 0B      call new_str_var
0438   06C5 51 06 00      add sp, 6
0439   06C8             ; --- END FUNCTION CALL
0440   06C8 0A CB 06      jmp _if10_exit
0441   06CB             _if10_exit:
0442   06CB             _if9_exit:
0443   06CB             _if8_exit:
0444   06CB 0A D4 0A      jmp _if7_exit
0445   06CE             _if7_else:
0446   06CE             ; prog = temp_prog; 
0447   06CE 3B 8F 42      mov d, _prog ; $prog
0448   06D1 DA            push d
0449   06D2 FA FE FF      lea d, [bp + -2] ; $temp_prog
0450   06D5 32            mov bl, [d]
0451   06D6 A7 00         mov bh, 0
0452   06D8 38 00 00      mov c, 0
0453   06DB E7            pop d
0454   06DC FD 3E         mov [d], bl
0455   06DE             ; get(); 
0456   06DE             ; --- START FUNCTION CALL
0457   06DE 07 22 15      call get
0458   06E1             ; if(!strcmp(token, "cd")) command_cd(); 
0459   06E1             _if11_cond:
0460   06E1             ; --- START FUNCTION CALL
0461   06E1 26 BD 44      mov b, _s7 ; "cd"
0462   06E4 FD AB         swp b
0463   06E6 D8            push b
0464   06E7 3B 90 42      mov d, _token_data ; $token
0465   06EA 2D            mov b, d
0466   06EB 38 00 00      mov c, 0
0467   06EE FD AB         swp b
0468   06F0 D8            push b
0469   06F1 07 E1 34      call strcmp
0470   06F4 51 04 00      add sp, 4
0471   06F7             ; --- END FUNCTION CALL
0472   06F7 C0 00 00      cmp b, 0
0473   06FA C6 03 07      je _if11_else
0474   06FD             _if11_TRUE:
0475   06FD             ; command_cd(); 
0476   06FD             ; --- START FUNCTION CALL
0477   06FD 07 81 10      call command_cd
0478   0700 0A D4 0A      jmp _if11_exit
0479   0703             _if11_else:
0480   0703             ; if(!strcmp(token, "shell")) command_shell(); 
0481   0703             _if12_cond:
0482   0703             ; --- START FUNCTION CALL
0483   0703 26 C0 44      mov b, _s8 ; "shell"
0484   0706 FD AB         swp b
0485   0708 D8            push b
0486   0709 3B 90 42      mov d, _token_data ; $token
0487   070C 2D            mov b, d
0488   070D 38 00 00      mov c, 0
0489   0710 FD AB         swp b
0490   0712 D8            push b
0491   0713 07 E1 34      call strcmp
0492   0716 51 04 00      add sp, 4
0493   0719             ; --- END FUNCTION CALL
0494   0719 C0 00 00      cmp b, 0
0495   071C C6 25 07      je _if12_else
0496   071F             _if12_TRUE:
0497   071F             ; command_shell(); 
0498   071F             ; --- START FUNCTION CALL
0499   071F 07 D0 11      call command_shell
0500   0722 0A D4 0A      jmp _if12_exit
0501   0725             _if12_else:
0502   0725             ; back(); 
0503   0725             ; --- START FUNCTION CALL
0504   0725 07 B0 39      call back
0505   0728             ; get_path(); 
0506   0728             ; --- START FUNCTION CALL
0507   0728 07 2C 3A      call get_path
0508   072B             ; strcpy(path, token); // save file path 
0509   072B             ; --- START FUNCTION CALL
0510   072B 3B 90 42      mov d, _token_data ; $token
0511   072E 2D            mov b, d
0512   072F 38 00 00      mov c, 0
0513   0732 FD AB         swp b
0514   0734 D8            push b
0515   0735 3B 33 3E      mov d, _path_data ; $path
0516   0738 2D            mov b, d
0517   0739 38 00 00      mov c, 0
0518   073C FD AB         swp b
0519   073E D8            push b
0520   073F 07 8D 14      call strcpy
0521   0742 51 04 00      add sp, 4
0522   0745             ; --- END FUNCTION CALL
0523   0745             ; for(i = 0; i < 256; i++) argument[i] = 0; 
0524   0745             _for13_init:
0525   0745 FA 76 FF      lea d, [bp + -138] ; $i
0526   0748 DA            push d
0527   0749 FD 2E 00 00   mov32 cb, $00000000
0527   074D 00 00 
0528   074F E7            pop d
0529   0750 FD 43         mov [d], b
0530   0752             _for13_cond:
0531   0752 FA 76 FF      lea d, [bp + -138] ; $i
0532   0755 2A            mov b, [d]
0533   0756 38 00 00      mov c, 0
0534   0759             ; --- START RELATIONAL
0535   0759 D7            push a
0536   075A 11            mov a, b
0537   075B FD 2E 00 01   mov32 cb, $00000100
0537   075F 00 00 
0538   0761 B0            cmp a, b
0539   0762 FD 73         slt ; < (signed)
0540   0764 E4            pop a
0541   0765             ; --- END RELATIONAL
0542   0765 C0 00 00      cmp b, 0
0543   0768 C6 97 07      je _for13_exit
0544   076B             _for13_block:
0545   076B             ; argument[i] = 0; 
0546   076B 3B 33 40      mov d, _argument_data ; $argument
0547   076E D7            push a
0548   076F DA            push d
0549   0770 FA 76 FF      lea d, [bp + -138] ; $i
0550   0773 2A            mov b, [d]
0551   0774 38 00 00      mov c, 0
0552   0777 E7            pop d
0553   0778 5A            add d, b
0554   0779 E4            pop a
0555   077A DA            push d
0556   077B FD 2E 00 00   mov32 cb, $00000000
0556   077F 00 00 
0557   0781 E7            pop d
0558   0782 FD 3E         mov [d], bl
0559   0784             _for13_update:
0560   0784 FA 76 FF      lea d, [bp + -138] ; $i
0561   0787 2A            mov b, [d]
0562   0788 38 00 00      mov c, 0
0563   078B 11            mov a, b
0564   078C FD 77         inc b
0565   078E FA 76 FF      lea d, [bp + -138] ; $i
0566   0791 FD 43         mov [d], b
0567   0793 27            mov b, a
0568   0794 0A 52 07      jmp _for13_cond
0569   0797             _for13_exit:
0570   0797             ; get(); 
0571   0797             ; --- START FUNCTION CALL
0572   0797 07 22 15      call get
0573   079A             ; if(tok != SEMICOLON && toktype != END){ 
0574   079A             _if14_cond:
0575   079A 3B 8B 42      mov d, _tok ; $tok
0576   079D 2A            mov b, [d]
0577   079E 38 00 00      mov c, 0
0578   07A1             ; --- START RELATIONAL
0579   07A1 D7            push a
0580   07A2 11            mov a, b
0581   07A3 FD 2E 23 00   mov32 cb, $23 ; enum element: SEMICOLON
0581   07A7 00 00 
0582   07A9 B0            cmp a, b
0583   07AA FD 72         sneq ; !=
0584   07AC E4            pop a
0585   07AD             ; --- END RELATIONAL
0586   07AD             ; --- START LOGICAL AND
0587   07AD D7            push a
0588   07AE 11            mov a, b
0589   07AF 3B 8D 42      mov d, _toktype ; $toktype
0590   07B2 2A            mov b, [d]
0591   07B3 38 00 00      mov c, 0
0592   07B6             ; --- START RELATIONAL
0593   07B6 D7            push a
0594   07B7 11            mov a, b
0595   07B8 FD 2E 06 00   mov32 cb, $6 ; enum element: END
0595   07BC 00 00 
0596   07BE B0            cmp a, b
0597   07BF FD 72         sneq ; !=
0598   07C1 E4            pop a
0599   07C2             ; --- END RELATIONAL
0600   07C2 FD A7         sand a, b
0601   07C4 E4            pop a
0602   07C5             ; --- END LOGICAL AND
0603   07C5 C0 00 00      cmp b, 0
0604   07C8 C6 7F 09      je _if14_exit
0605   07CB             _if14_TRUE:
0606   07CB             ; back(); 
0607   07CB             ; --- START FUNCTION CALL
0608   07CB 07 B0 39      call back
0609   07CE             ; p = argument; 
0610   07CE FA 00 00      lea d, [bp + 0] ; $p
0611   07D1 DA            push d
0612   07D2 3B 33 40      mov d, _argument_data ; $argument
0613   07D5 2D            mov b, d
0614   07D6 38 00 00      mov c, 0
0615   07D9 E7            pop d
0616   07DA FD 3E         mov [d], bl
0617   07DC             ; do{ 
0618   07DC             _do15_block:
0619   07DC             ; if(*prog == '$'){ 
0620   07DC             _if16_cond:
0621   07DC 3B 8F 42      mov d, _prog ; $prog
0622   07DF 32            mov bl, [d]
0623   07E0 A7 00         mov bh, 0
0624   07E2 38 00 00      mov c, 0
0625   07E5 74            mov d, b
0626   07E6 32            mov bl, [d]
0627   07E7 A7 00         mov bh, 0
0628   07E9 38 00 00      mov c, 0
0629   07EC             ; --- START RELATIONAL
0630   07EC D7            push a
0631   07ED 11            mov a, b
0632   07EE FD 2E 24 00   mov32 cb, $00000024
0632   07F2 00 00 
0633   07F4 B0            cmp a, b
0634   07F5 FD 71         seq ; ==
0635   07F7 E4            pop a
0636   07F8             ; --- END RELATIONAL
0637   07F8 C0 00 00      cmp b, 0
0638   07FB C6 F7 08      je _if16_else
0639   07FE             _if16_TRUE:
0640   07FE             ; prog++; 
0641   07FE 3B 8F 42      mov d, _prog ; $prog
0642   0801 32            mov bl, [d]
0643   0802 A7 00         mov bh, 0
0644   0804 38 00 00      mov c, 0
0645   0807 FD 77         inc b
0646   0809 3B 8F 42      mov d, _prog ; $prog
0647   080C FD 3E         mov [d], bl
0648   080E FD 7D         dec b
0649   0810             ; get(); // get variable name 
0650   0810             ; --- START FUNCTION CALL
0651   0810 07 22 15      call get
0652   0813             ; var_index = get_var_index(token); 
0653   0813 FA 78 FF      lea d, [bp + -136] ; $var_index
0654   0816 DA            push d
0655   0817             ; --- START FUNCTION CALL
0656   0817 3B 90 42      mov d, _token_data ; $token
0657   081A 2D            mov b, d
0658   081B 38 00 00      mov c, 0
0659   081E FD AB         swp b
0660   0820 D8            push b
0661   0821 07 D3 0D      call get_var_index
0662   0824 51 02 00      add sp, 2
0663   0827             ; --- END FUNCTION CALL
0664   0827 E7            pop d
0665   0828 FD 43         mov [d], b
0666   082A             ; if(var_index != -1){ 
0667   082A             _if17_cond:
0668   082A FA 78 FF      lea d, [bp + -136] ; $var_index
0669   082D 2A            mov b, [d]
0670   082E 38 00 00      mov c, 0
0671   0831             ; --- START RELATIONAL
0672   0831 D7            push a
0673   0832 11            mov a, b
0674   0833 FD 2E FF FF   mov32 cb, $ffffffff
0674   0837 FF FF 
0675   0839 B0            cmp a, b
0676   083A FD 72         sneq ; !=
0677   083C E4            pop a
0678   083D             ; --- END RELATIONAL
0679   083D C0 00 00      cmp b, 0
0680   0840 C6 F4 08      je _if17_exit
0681   0843             _if17_TRUE:
0682   0843             ; if(get_var_type(token) == SHELL_VAR_TYP_INT) strcat(argument, "123"); 
0683   0843             _if18_cond:
0684   0843             ; --- START FUNCTION CALL
0685   0843 3B 90 42      mov d, _token_data ; $token
0686   0846 2D            mov b, d
0687   0847 38 00 00      mov c, 0
0688   084A FD AB         swp b
0689   084C D8            push b
0690   084D 07 59 0E      call get_var_type
0691   0850 51 02 00      add sp, 2
0692   0853             ; --- END FUNCTION CALL
0693   0853             ; --- START RELATIONAL
0694   0853 D7            push a
0695   0854 11            mov a, b
0696   0855 FD 2E 01 00   mov32 cb, $1 ; enum element: SHELL_VAR_TYP_INT
0696   0859 00 00 
0697   085B B0            cmp a, b
0698   085C FD 71         seq ; ==
0699   085E E4            pop a
0700   085F             ; --- END RELATIONAL
0701   085F C0 00 00      cmp b, 0
0702   0862 C6 7E 08      je _if18_else
0703   0865             _if18_TRUE:
0704   0865             ; strcat(argument, "123"); 
0705   0865             ; --- START FUNCTION CALL
0706   0865 26 C6 44      mov b, _s9 ; "123"
0707   0868 FD AB         swp b
0708   086A D8            push b
0709   086B 3B 33 40      mov d, _argument_data ; $argument
0710   086E 2D            mov b, d
0711   086F 38 00 00      mov c, 0
0712   0872 FD AB         swp b
0713   0874 D8            push b
0714   0875 07 65 35      call strcat
0715   0878 51 04 00      add sp, 4
0716   087B             ; --- END FUNCTION CALL
0717   087B 0A C6 08      jmp _if18_exit
0718   087E             _if18_else:
0719   087E             ; if(get_var_type(token) == SHELL_VAR_TYP_STR) strcat(argument, get_shell_var_strval(var_index)); 
0720   087E             _if19_cond:
0721   087E             ; --- START FUNCTION CALL
0722   087E 3B 90 42      mov d, _token_data ; $token
0723   0881 2D            mov b, d
0724   0882 38 00 00      mov c, 0
0725   0885 FD AB         swp b
0726   0887 D8            push b
0727   0888 07 59 0E      call get_var_type
0728   088B 51 02 00      add sp, 2
0729   088E             ; --- END FUNCTION CALL
0730   088E             ; --- START RELATIONAL
0731   088E D7            push a
0732   088F 11            mov a, b
0733   0890 FD 2E 00 00   mov32 cb, $0 ; enum element: SHELL_VAR_TYP_STR
0733   0894 00 00 
0734   0896 B0            cmp a, b
0735   0897 FD 71         seq ; ==
0736   0899 E4            pop a
0737   089A             ; --- END RELATIONAL
0738   089A C0 00 00      cmp b, 0
0739   089D C6 C6 08      je _if19_exit
0740   08A0             _if19_TRUE:
0741   08A0             ; strcat(argument, get_shell_var_strval(var_index)); 
0742   08A0             ; --- START FUNCTION CALL
0743   08A0             ; --- START FUNCTION CALL
0744   08A0 FA 78 FF      lea d, [bp + -136] ; $var_index
0745   08A3 2A            mov b, [d]
0746   08A4 38 00 00      mov c, 0
0747   08A7 FD AB         swp b
0748   08A9 D8            push b
0749   08AA 07 29 10      call get_shell_var_strval
0750   08AD 51 02 00      add sp, 2
0751   08B0             ; --- END FUNCTION CALL
0752   08B0 FD AB         swp b
0753   08B2 D8            push b
0754   08B3 3B 33 40      mov d, _argument_data ; $argument
0755   08B6 2D            mov b, d
0756   08B7 38 00 00      mov c, 0
0757   08BA FD AB         swp b
0758   08BC D8            push b
0759   08BD 07 65 35      call strcat
0760   08C0 51 04 00      add sp, 4
0761   08C3             ; --- END FUNCTION CALL
0762   08C3 0A C6 08      jmp _if19_exit
0763   08C6             _if19_exit:
0764   08C6             _if18_exit:
0765   08C6             ; while(*p) p++; 
0766   08C6             _while20_cond:
0767   08C6 FA 00 00      lea d, [bp + 0] ; $p
0768   08C9 32            mov bl, [d]
0769   08CA A7 00         mov bh, 0
0770   08CC 38 00 00      mov c, 0
0771   08CF 74            mov d, b
0772   08D0 32            mov bl, [d]
0773   08D1 A7 00         mov bh, 0
0774   08D3 38 00 00      mov c, 0
0775   08D6 C0 00 00      cmp b, 0
0776   08D9 C6 F1 08      je _while20_exit
0777   08DC             _while20_block:
0778   08DC             ; p++; 
0779   08DC FA 00 00      lea d, [bp + 0] ; $p
0780   08DF 32            mov bl, [d]
0781   08E0 A7 00         mov bh, 0
0782   08E2 38 00 00      mov c, 0
0783   08E5 FD 77         inc b
0784   08E7 FA 00 00      lea d, [bp + 0] ; $p
0785   08EA FD 3E         mov [d], bl
0786   08EC FD 7D         dec b
0787   08EE 0A C6 08      jmp _while20_cond
0788   08F1             _while20_exit:
0789   08F1 0A F4 08      jmp _if17_exit
0790   08F4             _if17_exit:
0791   08F4 0A 26 09      jmp _if16_exit
0792   08F7             _if16_else:
0793   08F7             ; *p++ = *prog++; 
0794   08F7 FA 00 00      lea d, [bp + 0] ; $p
0795   08FA 32            mov bl, [d]
0796   08FB A7 00         mov bh, 0
0797   08FD 38 00 00      mov c, 0
0798   0900 FD 77         inc b
0799   0902 FA 00 00      lea d, [bp + 0] ; $p
0800   0905 FD 3E         mov [d], bl
0801   0907 FD 7D         dec b
0802   0909 D8            push b
0803   090A 3B 8F 42      mov d, _prog ; $prog
0804   090D 32            mov bl, [d]
0805   090E A7 00         mov bh, 0
0806   0910 38 00 00      mov c, 0
0807   0913 FD 77         inc b
0808   0915 3B 8F 42      mov d, _prog ; $prog
0809   0918 FD 3E         mov [d], bl
0810   091A FD 7D         dec b
0811   091C 74            mov d, b
0812   091D 32            mov bl, [d]
0813   091E A7 00         mov bh, 0
0814   0920 38 00 00      mov c, 0
0815   0923 E7            pop d
0816   0924 FD 3E         mov [d], bl
0817   0926             _if16_exit:
0818   0926             ; } while(*prog != '\0' && *prog != ';'); 
0819   0926             _do15_cond:
0820   0926 3B 8F 42      mov d, _prog ; $prog
0821   0929 32            mov bl, [d]
0822   092A A7 00         mov bh, 0
0823   092C 38 00 00      mov c, 0
0824   092F 74            mov d, b
0825   0930 32            mov bl, [d]
0826   0931 A7 00         mov bh, 0
0827   0933 38 00 00      mov c, 0
0828   0936             ; --- START RELATIONAL
0829   0936 D7            push a
0830   0937 11            mov a, b
0831   0938 FD 2E 00 00   mov32 cb, $00000000
0831   093C 00 00 
0832   093E B0            cmp a, b
0833   093F FD 72         sneq ; !=
0834   0941 E4            pop a
0835   0942             ; --- END RELATIONAL
0836   0942             ; --- START LOGICAL AND
0837   0942 D7            push a
0838   0943 11            mov a, b
0839   0944 3B 8F 42      mov d, _prog ; $prog
0840   0947 32            mov bl, [d]
0841   0948 A7 00         mov bh, 0
0842   094A 38 00 00      mov c, 0
0843   094D 74            mov d, b
0844   094E 32            mov bl, [d]
0845   094F A7 00         mov bh, 0
0846   0951 38 00 00      mov c, 0
0847   0954             ; --- START RELATIONAL
0848   0954 D7            push a
0849   0955 11            mov a, b
0850   0956 FD 2E 3B 00   mov32 cb, $0000003b
0850   095A 00 00 
0851   095C B0            cmp a, b
0852   095D FD 72         sneq ; !=
0853   095F E4            pop a
0854   0960             ; --- END RELATIONAL
0855   0960 FD A7         sand a, b
0856   0962 E4            pop a
0857   0963             ; --- END LOGICAL AND
0858   0963 C0 01 00      cmp b, 1
0859   0966 C6 DC 07      je _do15_block
0860   0969             _do15_exit:
0861   0969             ; *p = '\0'; 
0862   0969 FA 00 00      lea d, [bp + 0] ; $p
0863   096C 32            mov bl, [d]
0864   096D A7 00         mov bh, 0
0865   096F 38 00 00      mov c, 0
0866   0972 D8            push b
0867   0973 FD 2E 00 00   mov32 cb, $00000000
0867   0977 00 00 
0868   0979 E7            pop d
0869   097A FD 3E         mov [d], bl
0870   097C 0A 7F 09      jmp _if14_exit
0871   097F             _if14_exit:
0872   097F             ; if(*path == '/' || *path == '.') spawn_new_proc(path, argument); 
0873   097F             _if21_cond:
0874   097F 3B 33 3E      mov d, _path_data ; $path
0875   0982 2D            mov b, d
0876   0983 38 00 00      mov c, 0
0877   0986 74            mov d, b
0878   0987 32            mov bl, [d]
0879   0988 A7 00         mov bh, 0
0880   098A 38 00 00      mov c, 0
0881   098D             ; --- START RELATIONAL
0882   098D D7            push a
0883   098E 11            mov a, b
0884   098F FD 2E 2F 00   mov32 cb, $0000002f
0884   0993 00 00 
0885   0995 B0            cmp a, b
0886   0996 FD 71         seq ; ==
0887   0998 E4            pop a
0888   0999             ; --- END RELATIONAL
0889   0999             ; --- START LOGICAL OR
0890   0999 D7            push a
0891   099A 11            mov a, b
0892   099B 3B 33 3E      mov d, _path_data ; $path
0893   099E 2D            mov b, d
0894   099F 38 00 00      mov c, 0
0895   09A2 74            mov d, b
0896   09A3 32            mov bl, [d]
0897   09A4 A7 00         mov bh, 0
0898   09A6 38 00 00      mov c, 0
0899   09A9             ; --- START RELATIONAL
0900   09A9 D7            push a
0901   09AA 11            mov a, b
0902   09AB FD 2E 2E 00   mov32 cb, $0000002e
0902   09AF 00 00 
0903   09B1 B0            cmp a, b
0904   09B2 FD 71         seq ; ==
0905   09B4 E4            pop a
0906   09B5             ; --- END RELATIONAL
0907   09B5 FD A8         sor a, b ; ||
0908   09B7 E4            pop a
0909   09B8             ; --- END LOGICAL OR
0910   09B8 C0 00 00      cmp b, 0
0911   09BB C6 DB 09      je _if21_else
0912   09BE             _if21_TRUE:
0913   09BE             ; spawn_new_proc(path, argument); 
0914   09BE             ; --- START FUNCTION CALL
0915   09BE 3B 33 40      mov d, _argument_data ; $argument
0916   09C1 2D            mov b, d
0917   09C2 38 00 00      mov c, 0
0918   09C5 FD AB         swp b
0919   09C7 D8            push b
0920   09C8 3B 33 3E      mov d, _path_data ; $path
0921   09CB 2D            mov b, d
0922   09CC 38 00 00      mov c, 0
0923   09CF FD AB         swp b
0924   09D1 D8            push b
0925   09D2 07 C0 11      call spawn_new_proc
0926   09D5 51 04 00      add sp, 4
0927   09D8             ; --- END FUNCTION CALL
0928   09D8 0A D4 0A      jmp _if21_exit
0929   09DB             _if21_else:
0930   09DB             ; temp_prog = prog; 
0931   09DB FA FE FF      lea d, [bp + -2] ; $temp_prog
0932   09DE DA            push d
0933   09DF 3B 8F 42      mov d, _prog ; $prog
0934   09E2 32            mov bl, [d]
0935   09E3 A7 00         mov bh, 0
0936   09E5 38 00 00      mov c, 0
0937   09E8 E7            pop d
0938   09E9 FD 3E         mov [d], bl
0939   09EB             ; prog = variables[0].as_string; 
0940   09EB 3B 8F 42      mov d, _prog ; $prog
0941   09EE DA            push d
0942   09EF 3B B3 41      mov d, _variables_data ; $variables
0943   09F2 D7            push a
0944   09F3 DA            push d
0945   09F4 FD 2E 00 00   mov32 cb, $00000000
0945   09F8 00 00 
0946   09FA E7            pop d
0947   09FB FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0948   09FF E4            pop a
0949   0A00 58 11 00      add d, 17
0950   0A03 2A            mov b, [d]
0951   0A04 38 00 00      mov c, 0
0952   0A07 E7            pop d
0953   0A08 FD 3E         mov [d], bl
0954   0A0A             ; for(;;){ 
0955   0A0A             _for22_init:
0956   0A0A             _for22_cond:
0957   0A0A             _for22_block:
0958   0A0A             ; get(); 
0959   0A0A             ; --- START FUNCTION CALL
0960   0A0A 07 22 15      call get
0961   0A0D             ; if(toktype == END){ 
0962   0A0D             _if23_cond:
0963   0A0D 3B 8D 42      mov d, _toktype ; $toktype
0964   0A10 2A            mov b, [d]
0965   0A11 38 00 00      mov c, 0
0966   0A14             ; --- START RELATIONAL
0967   0A14 D7            push a
0968   0A15 11            mov a, b
0969   0A16 FD 2E 06 00   mov32 cb, $6 ; enum element: END
0969   0A1A 00 00 
0970   0A1C B0            cmp a, b
0971   0A1D FD 71         seq ; ==
0972   0A1F E4            pop a
0973   0A20             ; --- END RELATIONAL
0974   0A20 C0 00 00      cmp b, 0
0975   0A23 C6 2C 0A      je _if23_else
0976   0A26             _if23_TRUE:
0977   0A26             ; break; 
0978   0A26 0A C4 0A      jmp _for22_exit ; for break
0979   0A29 0A 2F 0A      jmp _if23_exit
0980   0A2C             _if23_else:
0981   0A2C             ; back(); 
0982   0A2C             ; --- START FUNCTION CALL
0983   0A2C 07 B0 39      call back
0984   0A2F             _if23_exit:
0985   0A2F             ; get_path(); 
0986   0A2F             ; --- START FUNCTION CALL
0987   0A2F 07 2C 3A      call get_path
0988   0A32             ; strcpy(temp, token); 
0989   0A32             ; --- START FUNCTION CALL
0990   0A32 3B 90 42      mov d, _token_data ; $token
0991   0A35 2D            mov b, d
0992   0A36 38 00 00      mov c, 0
0993   0A39 FD AB         swp b
0994   0A3B D8            push b
0995   0A3C 3B 33 3F      mov d, _temp_data ; $temp
0996   0A3F 2D            mov b, d
0997   0A40 38 00 00      mov c, 0
0998   0A43 FD AB         swp b
0999   0A45 D8            push b
1000   0A46 07 8D 14      call strcpy
1001   0A49 51 04 00      add sp, 4
1002   0A4C             ; --- END FUNCTION CALL
1003   0A4C             ; strcat(temp, "/"); 
1004   0A4C             ; --- START FUNCTION CALL
1005   0A4C 26 CA 44      mov b, _s10 ; "/"
1006   0A4F FD AB         swp b
1007   0A51 D8            push b
1008   0A52 3B 33 3F      mov d, _temp_data ; $temp
1009   0A55 2D            mov b, d
1010   0A56 38 00 00      mov c, 0
1011   0A59 FD AB         swp b
1012   0A5B D8            push b
1013   0A5C 07 65 35      call strcat
1014   0A5F 51 04 00      add sp, 4
1015   0A62             ; --- END FUNCTION CALL
1016   0A62             ; strcat(temp, path); // form full filepath with ENV_PATH + given filename 
1017   0A62             ; --- START FUNCTION CALL
1018   0A62 3B 33 3E      mov d, _path_data ; $path
1019   0A65 2D            mov b, d
1020   0A66 38 00 00      mov c, 0
1021   0A69 FD AB         swp b
1022   0A6B D8            push b
1023   0A6C 3B 33 3F      mov d, _temp_data ; $temp
1024   0A6F 2D            mov b, d
1025   0A70 38 00 00      mov c, 0
1026   0A73 FD AB         swp b
1027   0A75 D8            push b
1028   0A76 07 65 35      call strcat
1029   0A79 51 04 00      add sp, 4
1030   0A7C             ; --- END FUNCTION CALL
1031   0A7C             ; if(file_exists(temp) != 0){ 
1032   0A7C             _if24_cond:
1033   0A7C             ; --- START FUNCTION CALL
1034   0A7C 3B 33 3F      mov d, _temp_data ; $temp
1035   0A7F 2D            mov b, d
1036   0A80 38 00 00      mov c, 0
1037   0A83 FD AB         swp b
1038   0A85 D8            push b
1039   0A86 07 65 10      call file_exists
1040   0A89 51 02 00      add sp, 2
1041   0A8C             ; --- END FUNCTION CALL
1042   0A8C             ; --- START RELATIONAL
1043   0A8C D7            push a
1044   0A8D 11            mov a, b
1045   0A8E FD 2E 00 00   mov32 cb, $00000000
1045   0A92 00 00 
1046   0A94 B0            cmp a, b
1047   0A95 FD 72         sneq ; !=
1048   0A97 E4            pop a
1049   0A98             ; --- END RELATIONAL
1050   0A98 C0 00 00      cmp b, 0
1051   0A9B C6 BE 0A      je _if24_exit
1052   0A9E             _if24_TRUE:
1053   0A9E             ; spawn_new_proc(temp, argument); 
1054   0A9E             ; --- START FUNCTION CALL
1055   0A9E 3B 33 40      mov d, _argument_data ; $argument
1056   0AA1 2D            mov b, d
1057   0AA2 38 00 00      mov c, 0
1058   0AA5 FD AB         swp b
1059   0AA7 D8            push b
1060   0AA8 3B 33 3F      mov d, _temp_data ; $temp
1061   0AAB 2D            mov b, d
1062   0AAC 38 00 00      mov c, 0
1063   0AAF FD AB         swp b
1064   0AB1 D8            push b
1065   0AB2 07 C0 11      call spawn_new_proc
1066   0AB5 51 04 00      add sp, 4
1067   0AB8             ; --- END FUNCTION CALL
1068   0AB8             ; break; 
1069   0AB8 0A C4 0A      jmp _for22_exit ; for break
1070   0ABB 0A BE 0A      jmp _if24_exit
1071   0ABE             _if24_exit:
1072   0ABE             ; get(); // get separator 
1073   0ABE             ; --- START FUNCTION CALL
1074   0ABE 07 22 15      call get
1075   0AC1             _for22_update:
1076   0AC1 0A 0A 0A      jmp _for22_cond
1077   0AC4             _for22_exit:
1078   0AC4             ; prog = temp_prog; 
1079   0AC4 3B 8F 42      mov d, _prog ; $prog
1080   0AC7 DA            push d
1081   0AC8 FA FE FF      lea d, [bp + -2] ; $temp_prog
1082   0ACB 32            mov bl, [d]
1083   0ACC A7 00         mov bh, 0
1084   0ACE 38 00 00      mov c, 0
1085   0AD1 E7            pop d
1086   0AD2 FD 3E         mov [d], bl
1087   0AD4             _if21_exit:
1088   0AD4             _if12_exit:
1089   0AD4             _if11_exit:
1090   0AD4             _if7_exit:
1091   0AD4             _for3_update:
1092   0AD4 0A 2F 05      jmp _for3_cond
1093   0AD7             _for3_exit:
1094   0AD7             _for1_update:
1095   0AD7 0A B3 04      jmp _for1_cond
1096   0ADA             _for1_exit:
1097   0ADA 05 0B         syscall sys_terminate_proc
1098   0ADC             
1099   0ADC             last_cmd_insert:
1100   0ADC F8 00 00      enter 0 ; (push bp; mov bp, sp)
1101   0ADF             ; if(last_cmd[0]){ 
1102   0ADF             _if25_cond:
1103   0ADF 3B 33 41      mov d, _last_cmd_data ; $last_cmd
1104   0AE2 D7            push a
1105   0AE3 DA            push d
1106   0AE4 FD 2E 00 00   mov32 cb, $00000000
1106   0AE8 00 00 
1107   0AEA E7            pop d
1108   0AEB 5A            add d, b
1109   0AEC E4            pop a
1110   0AED 32            mov bl, [d]
1111   0AEE A7 00         mov bh, 0
1112   0AF0 38 00 00      mov c, 0
1113   0AF3 C0 00 00      cmp b, 0
1114   0AF6 C6 26 0B      je _if25_exit
1115   0AF9             _if25_TRUE:
1116   0AF9             ; strcpy(command, last_cmd); 
1117   0AF9             ; --- START FUNCTION CALL
1118   0AF9 3B 33 41      mov d, _last_cmd_data ; $last_cmd
1119   0AFC 2D            mov b, d
1120   0AFD 38 00 00      mov c, 0
1121   0B00 FD AB         swp b
1122   0B02 D8            push b
1123   0B03 3B 33 3C      mov d, _command_data ; $command
1124   0B06 2D            mov b, d
1125   0B07 38 00 00      mov c, 0
1126   0B0A FD AB         swp b
1127   0B0C D8            push b
1128   0B0D 07 8D 14      call strcpy
1129   0B10 51 04 00      add sp, 4
1130   0B13             ; --- END FUNCTION CALL
1131   0B13             ; printf(command); 
1132   0B13             ; --- START FUNCTION CALL
1133   0B13 3B 33 3C      mov d, _command_data ; $command
1134   0B16 2D            mov b, d
1135   0B17 38 00 00      mov c, 0
1136   0B1A FD AB         swp b
1137   0B1C D8            push b
1138   0B1D 07 91 28      call printf
1139   0B20 51 02 00      add sp, 2
1140   0B23             ; --- END FUNCTION CALL
1141   0B23 0A 26 0B      jmp _if25_exit
1142   0B26             _if25_exit:
1143   0B26 F9            leave
1144   0B27 09            ret
1145   0B28             
1146   0B28             new_str_var:
1147   0B28 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1148   0B2B             ; variables[vars_tos].var_type = SHELL_VAR_TYP_STR; 
1149   0B2B 3B B3 41      mov d, _variables_data ; $variables
1150   0B2E D7            push a
1151   0B2F DA            push d
1152   0B30 3B 85 42      mov d, _vars_tos ; $vars_tos
1153   0B33 2A            mov b, [d]
1154   0B34 38 00 00      mov c, 0
1155   0B37 E7            pop d
1156   0B38 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1157   0B3C E4            pop a
1158   0B3D 58 10 00      add d, 16
1159   0B40 DA            push d
1160   0B41 FD 2E 00 00   mov32 cb, $0 ; enum element: SHELL_VAR_TYP_STR
1160   0B45 00 00 
1161   0B47 E7            pop d
1162   0B48 FD 3E         mov [d], bl
1163   0B4A             ; variables[vars_tos].as_string = alloc(64); 
1164   0B4A 3B B3 41      mov d, _variables_data ; $variables
1165   0B4D D7            push a
1166   0B4E DA            push d
1167   0B4F 3B 85 42      mov d, _vars_tos ; $vars_tos
1168   0B52 2A            mov b, [d]
1169   0B53 38 00 00      mov c, 0
1170   0B56 E7            pop d
1171   0B57 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1172   0B5B E4            pop a
1173   0B5C 58 11 00      add d, 17
1174   0B5F DA            push d
1175   0B60             ; --- START FUNCTION CALL
1176   0B60 FD 2E 40 00   mov32 cb, $00000040
1176   0B64 00 00 
1177   0B66 FD AB         swp b
1178   0B68 D8            push b
1179   0B69 07 CD 12      call alloc
1180   0B6C 51 02 00      add sp, 2
1181   0B6F             ; --- END FUNCTION CALL
1182   0B6F E7            pop d
1183   0B70 FD 43         mov [d], b
1184   0B72             ; strcpy(variables[vars_tos].varname, varname); 
1185   0B72             ; --- START FUNCTION CALL
1186   0B72 FA 05 00      lea d, [bp + 5] ; $varname
1187   0B75 2A            mov b, [d]
1188   0B76 38 00 00      mov c, 0
1189   0B79 FD AB         swp b
1190   0B7B D8            push b
1191   0B7C 3B B3 41      mov d, _variables_data ; $variables
1192   0B7F D7            push a
1193   0B80 DA            push d
1194   0B81 3B 85 42      mov d, _vars_tos ; $vars_tos
1195   0B84 2A            mov b, [d]
1196   0B85 38 00 00      mov c, 0
1197   0B88 E7            pop d
1198   0B89 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1199   0B8D E4            pop a
1200   0B8E 58 00 00      add d, 0
1201   0B91 2D            mov b, d
1202   0B92 38 00 00      mov c, 0
1203   0B95 FD AB         swp b
1204   0B97 D8            push b
1205   0B98 07 8D 14      call strcpy
1206   0B9B 51 04 00      add sp, 4
1207   0B9E             ; --- END FUNCTION CALL
1208   0B9E             ; strcpy(variables[vars_tos].as_string, strval); 
1209   0B9E             ; --- START FUNCTION CALL
1210   0B9E FA 07 00      lea d, [bp + 7] ; $strval
1211   0BA1 2A            mov b, [d]
1212   0BA2 38 00 00      mov c, 0
1213   0BA5 FD AB         swp b
1214   0BA7 D8            push b
1215   0BA8 3B B3 41      mov d, _variables_data ; $variables
1216   0BAB D7            push a
1217   0BAC DA            push d
1218   0BAD 3B 85 42      mov d, _vars_tos ; $vars_tos
1219   0BB0 2A            mov b, [d]
1220   0BB1 38 00 00      mov c, 0
1221   0BB4 E7            pop d
1222   0BB5 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1223   0BB9 E4            pop a
1224   0BBA 58 11 00      add d, 17
1225   0BBD 2A            mov b, [d]
1226   0BBE 38 00 00      mov c, 0
1227   0BC1 FD AB         swp b
1228   0BC3 D8            push b
1229   0BC4 07 8D 14      call strcpy
1230   0BC7 51 04 00      add sp, 4
1231   0BCA             ; --- END FUNCTION CALL
1232   0BCA             ; vars_tos++; 
1233   0BCA 3B 85 42      mov d, _vars_tos ; $vars_tos
1234   0BCD 2A            mov b, [d]
1235   0BCE 38 00 00      mov c, 0
1236   0BD1 11            mov a, b
1237   0BD2 FD 77         inc b
1238   0BD4 3B 85 42      mov d, _vars_tos ; $vars_tos
1239   0BD7 FD 43         mov [d], b
1240   0BD9 27            mov b, a
1241   0BDA             ; return vars_tos - 1; 
1242   0BDA 3B 85 42      mov d, _vars_tos ; $vars_tos
1243   0BDD 2A            mov b, [d]
1244   0BDE 38 00 00      mov c, 0
1245   0BE1             ; --- START TERMS
1246   0BE1 D7            push a
1247   0BE2 11            mov a, b
1248   0BE3 FD 2E 01 00   mov32 cb, $00000001
1248   0BE7 00 00 
1249   0BE9 60            sub a, b
1250   0BEA 27            mov b, a
1251   0BEB E4            pop a
1252   0BEC             ; --- END TERMS
1253   0BEC F9            leave
1254   0BED 09            ret
1255   0BEE             
1256   0BEE             set_str_var:
1257   0BEE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1258   0BF1             ; int var_index; 
1259   0BF1 52 02 00      sub sp, 2
1260   0BF4             ; for(var_index = 0; var_index < vars_tos; var_index++){ 
1261   0BF4             _for26_init:
1262   0BF4 FA FF FF      lea d, [bp + -1] ; $var_index
1263   0BF7 DA            push d
1264   0BF8 FD 2E 00 00   mov32 cb, $00000000
1264   0BFC 00 00 
1265   0BFE E7            pop d
1266   0BFF FD 43         mov [d], b
1267   0C01             _for26_cond:
1268   0C01 FA FF FF      lea d, [bp + -1] ; $var_index
1269   0C04 2A            mov b, [d]
1270   0C05 38 00 00      mov c, 0
1271   0C08             ; --- START RELATIONAL
1272   0C08 D7            push a
1273   0C09 11            mov a, b
1274   0C0A 3B 85 42      mov d, _vars_tos ; $vars_tos
1275   0C0D 2A            mov b, [d]
1276   0C0E 38 00 00      mov c, 0
1277   0C11 B0            cmp a, b
1278   0C12 FD 73         slt ; < (signed)
1279   0C14 E4            pop a
1280   0C15             ; --- END RELATIONAL
1281   0C15 C0 00 00      cmp b, 0
1282   0C18 C6 98 0C      je _for26_exit
1283   0C1B             _for26_block:
1284   0C1B             ; if(!strcmp(variables[var_index].varname, varname)){ 
1285   0C1B             _if27_cond:
1286   0C1B             ; --- START FUNCTION CALL
1287   0C1B FA 05 00      lea d, [bp + 5] ; $varname
1288   0C1E 2A            mov b, [d]
1289   0C1F 38 00 00      mov c, 0
1290   0C22 FD AB         swp b
1291   0C24 D8            push b
1292   0C25 3B B3 41      mov d, _variables_data ; $variables
1293   0C28 D7            push a
1294   0C29 DA            push d
1295   0C2A FA FF FF      lea d, [bp + -1] ; $var_index
1296   0C2D 2A            mov b, [d]
1297   0C2E 38 00 00      mov c, 0
1298   0C31 E7            pop d
1299   0C32 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1300   0C36 E4            pop a
1301   0C37 58 00 00      add d, 0
1302   0C3A 2D            mov b, d
1303   0C3B 38 00 00      mov c, 0
1304   0C3E FD AB         swp b
1305   0C40 D8            push b
1306   0C41 07 E1 34      call strcmp
1307   0C44 51 04 00      add sp, 4
1308   0C47             ; --- END FUNCTION CALL
1309   0C47 C0 00 00      cmp b, 0
1310   0C4A C6 85 0C      je _if27_exit
1311   0C4D             _if27_TRUE:
1312   0C4D             ; strcpy(variables[var_index].as_string, strval); 
1313   0C4D             ; --- START FUNCTION CALL
1314   0C4D FA 07 00      lea d, [bp + 7] ; $strval
1315   0C50 2A            mov b, [d]
1316   0C51 38 00 00      mov c, 0
1317   0C54 FD AB         swp b
1318   0C56 D8            push b
1319   0C57 3B B3 41      mov d, _variables_data ; $variables
1320   0C5A D7            push a
1321   0C5B DA            push d
1322   0C5C FA FF FF      lea d, [bp + -1] ; $var_index
1323   0C5F 2A            mov b, [d]
1324   0C60 38 00 00      mov c, 0
1325   0C63 E7            pop d
1326   0C64 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1327   0C68 E4            pop a
1328   0C69 58 11 00      add d, 17
1329   0C6C 2A            mov b, [d]
1330   0C6D 38 00 00      mov c, 0
1331   0C70 FD AB         swp b
1332   0C72 D8            push b
1333   0C73 07 8D 14      call strcpy
1334   0C76 51 04 00      add sp, 4
1335   0C79             ; --- END FUNCTION CALL
1336   0C79             ; return var_index; 
1337   0C79 FA FF FF      lea d, [bp + -1] ; $var_index
1338   0C7C 2A            mov b, [d]
1339   0C7D 38 00 00      mov c, 0
1340   0C80 F9            leave
1341   0C81 09            ret
1342   0C82 0A 85 0C      jmp _if27_exit
1343   0C85             _if27_exit:
1344   0C85             _for26_update:
1345   0C85 FA FF FF      lea d, [bp + -1] ; $var_index
1346   0C88 2A            mov b, [d]
1347   0C89 38 00 00      mov c, 0
1348   0C8C 11            mov a, b
1349   0C8D FD 77         inc b
1350   0C8F FA FF FF      lea d, [bp + -1] ; $var_index
1351   0C92 FD 43         mov [d], b
1352   0C94 27            mov b, a
1353   0C95 0A 01 0C      jmp _for26_cond
1354   0C98             _for26_exit:
1355   0C98             ; printf("Error: Variable does not exist."); 
1356   0C98             ; --- START FUNCTION CALL
1357   0C98 26 CC 44      mov b, _s11 ; "Error: Variable does not exist."
1358   0C9B FD AB         swp b
1359   0C9D D8            push b
1360   0C9E 07 91 28      call printf
1361   0CA1 51 02 00      add sp, 2
1362   0CA4             ; --- END FUNCTION CALL
1363   0CA4 F9            leave
1364   0CA5 09            ret
1365   0CA6             
1366   0CA6             set_int_var:
1367   0CA6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1368   0CA9             ; int i; 
1369   0CA9 52 02 00      sub sp, 2
1370   0CAC             ; for(i = 0; i < vars_tos; i++){ 
1371   0CAC             _for28_init:
1372   0CAC FA FF FF      lea d, [bp + -1] ; $i
1373   0CAF DA            push d
1374   0CB0 FD 2E 00 00   mov32 cb, $00000000
1374   0CB4 00 00 
1375   0CB6 E7            pop d
1376   0CB7 FD 43         mov [d], b
1377   0CB9             _for28_cond:
1378   0CB9 FA FF FF      lea d, [bp + -1] ; $i
1379   0CBC 2A            mov b, [d]
1380   0CBD 38 00 00      mov c, 0
1381   0CC0             ; --- START RELATIONAL
1382   0CC0 D7            push a
1383   0CC1 11            mov a, b
1384   0CC2 3B 85 42      mov d, _vars_tos ; $vars_tos
1385   0CC5 2A            mov b, [d]
1386   0CC6 38 00 00      mov c, 0
1387   0CC9 B0            cmp a, b
1388   0CCA FD 73         slt ; < (signed)
1389   0CCC E4            pop a
1390   0CCD             ; --- END RELATIONAL
1391   0CCD C0 00 00      cmp b, 0
1392   0CD0 C6 44 0D      je _for28_exit
1393   0CD3             _for28_block:
1394   0CD3             ; if(!strcmp(variables[i].varname, varname)){ 
1395   0CD3             _if29_cond:
1396   0CD3             ; --- START FUNCTION CALL
1397   0CD3 FA 05 00      lea d, [bp + 5] ; $varname
1398   0CD6 2A            mov b, [d]
1399   0CD7 38 00 00      mov c, 0
1400   0CDA FD AB         swp b
1401   0CDC D8            push b
1402   0CDD 3B B3 41      mov d, _variables_data ; $variables
1403   0CE0 D7            push a
1404   0CE1 DA            push d
1405   0CE2 FA FF FF      lea d, [bp + -1] ; $i
1406   0CE5 2A            mov b, [d]
1407   0CE6 38 00 00      mov c, 0
1408   0CE9 E7            pop d
1409   0CEA FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1410   0CEE E4            pop a
1411   0CEF 58 00 00      add d, 0
1412   0CF2 2D            mov b, d
1413   0CF3 38 00 00      mov c, 0
1414   0CF6 FD AB         swp b
1415   0CF8 D8            push b
1416   0CF9 07 E1 34      call strcmp
1417   0CFC 51 04 00      add sp, 4
1418   0CFF             ; --- END FUNCTION CALL
1419   0CFF C0 00 00      cmp b, 0
1420   0D02 C6 31 0D      je _if29_exit
1421   0D05             _if29_TRUE:
1422   0D05             ; variables[vars_tos].as_int = as_int; 
1423   0D05 3B B3 41      mov d, _variables_data ; $variables
1424   0D08 D7            push a
1425   0D09 DA            push d
1426   0D0A 3B 85 42      mov d, _vars_tos ; $vars_tos
1427   0D0D 2A            mov b, [d]
1428   0D0E 38 00 00      mov c, 0
1429   0D11 E7            pop d
1430   0D12 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1431   0D16 E4            pop a
1432   0D17 58 13 00      add d, 19
1433   0D1A DA            push d
1434   0D1B FA 07 00      lea d, [bp + 7] ; $as_int
1435   0D1E 2A            mov b, [d]
1436   0D1F 38 00 00      mov c, 0
1437   0D22 E7            pop d
1438   0D23 FD 43         mov [d], b
1439   0D25             ; return i; 
1440   0D25 FA FF FF      lea d, [bp + -1] ; $i
1441   0D28 2A            mov b, [d]
1442   0D29 38 00 00      mov c, 0
1443   0D2C F9            leave
1444   0D2D 09            ret
1445   0D2E 0A 31 0D      jmp _if29_exit
1446   0D31             _if29_exit:
1447   0D31             _for28_update:
1448   0D31 FA FF FF      lea d, [bp + -1] ; $i
1449   0D34 2A            mov b, [d]
1450   0D35 38 00 00      mov c, 0
1451   0D38 11            mov a, b
1452   0D39 FD 77         inc b
1453   0D3B FA FF FF      lea d, [bp + -1] ; $i
1454   0D3E FD 43         mov [d], b
1455   0D40 27            mov b, a
1456   0D41 0A B9 0C      jmp _for28_cond
1457   0D44             _for28_exit:
1458   0D44             ; variables[vars_tos].var_type = SHELL_VAR_TYP_INT; 
1459   0D44 3B B3 41      mov d, _variables_data ; $variables
1460   0D47 D7            push a
1461   0D48 DA            push d
1462   0D49 3B 85 42      mov d, _vars_tos ; $vars_tos
1463   0D4C 2A            mov b, [d]
1464   0D4D 38 00 00      mov c, 0
1465   0D50 E7            pop d
1466   0D51 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1467   0D55 E4            pop a
1468   0D56 58 10 00      add d, 16
1469   0D59 DA            push d
1470   0D5A FD 2E 01 00   mov32 cb, $1 ; enum element: SHELL_VAR_TYP_INT
1470   0D5E 00 00 
1471   0D60 E7            pop d
1472   0D61 FD 3E         mov [d], bl
1473   0D63             ; strcpy(variables[vars_tos].varname, varname); 
1474   0D63             ; --- START FUNCTION CALL
1475   0D63 FA 05 00      lea d, [bp + 5] ; $varname
1476   0D66 2A            mov b, [d]
1477   0D67 38 00 00      mov c, 0
1478   0D6A FD AB         swp b
1479   0D6C D8            push b
1480   0D6D 3B B3 41      mov d, _variables_data ; $variables
1481   0D70 D7            push a
1482   0D71 DA            push d
1483   0D72 3B 85 42      mov d, _vars_tos ; $vars_tos
1484   0D75 2A            mov b, [d]
1485   0D76 38 00 00      mov c, 0
1486   0D79 E7            pop d
1487   0D7A FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1488   0D7E E4            pop a
1489   0D7F 58 00 00      add d, 0
1490   0D82 2D            mov b, d
1491   0D83 38 00 00      mov c, 0
1492   0D86 FD AB         swp b
1493   0D88 D8            push b
1494   0D89 07 8D 14      call strcpy
1495   0D8C 51 04 00      add sp, 4
1496   0D8F             ; --- END FUNCTION CALL
1497   0D8F             ; variables[vars_tos].as_int = as_int; 
1498   0D8F 3B B3 41      mov d, _variables_data ; $variables
1499   0D92 D7            push a
1500   0D93 DA            push d
1501   0D94 3B 85 42      mov d, _vars_tos ; $vars_tos
1502   0D97 2A            mov b, [d]
1503   0D98 38 00 00      mov c, 0
1504   0D9B E7            pop d
1505   0D9C FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1506   0DA0 E4            pop a
1507   0DA1 58 13 00      add d, 19
1508   0DA4 DA            push d
1509   0DA5 FA 07 00      lea d, [bp + 7] ; $as_int
1510   0DA8 2A            mov b, [d]
1511   0DA9 38 00 00      mov c, 0
1512   0DAC E7            pop d
1513   0DAD FD 43         mov [d], b
1514   0DAF             ; vars_tos++; 
1515   0DAF 3B 85 42      mov d, _vars_tos ; $vars_tos
1516   0DB2 2A            mov b, [d]
1517   0DB3 38 00 00      mov c, 0
1518   0DB6 11            mov a, b
1519   0DB7 FD 77         inc b
1520   0DB9 3B 85 42      mov d, _vars_tos ; $vars_tos
1521   0DBC FD 43         mov [d], b
1522   0DBE 27            mov b, a
1523   0DBF             ; return vars_tos - 1; 
1524   0DBF 3B 85 42      mov d, _vars_tos ; $vars_tos
1525   0DC2 2A            mov b, [d]
1526   0DC3 38 00 00      mov c, 0
1527   0DC6             ; --- START TERMS
1528   0DC6 D7            push a
1529   0DC7 11            mov a, b
1530   0DC8 FD 2E 01 00   mov32 cb, $00000001
1530   0DCC 00 00 
1531   0DCE 60            sub a, b
1532   0DCF 27            mov b, a
1533   0DD0 E4            pop a
1534   0DD1             ; --- END TERMS
1535   0DD1 F9            leave
1536   0DD2 09            ret
1537   0DD3             
1538   0DD3             get_var_index:
1539   0DD3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1540   0DD6             ; int i; 
1541   0DD6 52 02 00      sub sp, 2
1542   0DD9             ; for(i = 0; i < vars_tos; i++) 
1543   0DD9             _for30_init:
1544   0DD9 FA FF FF      lea d, [bp + -1] ; $i
1545   0DDC DA            push d
1546   0DDD FD 2E 00 00   mov32 cb, $00000000
1546   0DE1 00 00 
1547   0DE3 E7            pop d
1548   0DE4 FD 43         mov [d], b
1549   0DE6             _for30_cond:
1550   0DE6 FA FF FF      lea d, [bp + -1] ; $i
1551   0DE9 2A            mov b, [d]
1552   0DEA 38 00 00      mov c, 0
1553   0DED             ; --- START RELATIONAL
1554   0DED D7            push a
1555   0DEE 11            mov a, b
1556   0DEF 3B 85 42      mov d, _vars_tos ; $vars_tos
1557   0DF2 2A            mov b, [d]
1558   0DF3 38 00 00      mov c, 0
1559   0DF6 B0            cmp a, b
1560   0DF7 FD 73         slt ; < (signed)
1561   0DF9 E4            pop a
1562   0DFA             ; --- END RELATIONAL
1563   0DFA C0 00 00      cmp b, 0
1564   0DFD C6 51 0E      je _for30_exit
1565   0E00             _for30_block:
1566   0E00             ; if(!strcmp(variables[i].varname, varname)) return i; 
1567   0E00             _if31_cond:
1568   0E00             ; --- START FUNCTION CALL
1569   0E00 FA 05 00      lea d, [bp + 5] ; $varname
1570   0E03 2A            mov b, [d]
1571   0E04 38 00 00      mov c, 0
1572   0E07 FD AB         swp b
1573   0E09 D8            push b
1574   0E0A 3B B3 41      mov d, _variables_data ; $variables
1575   0E0D D7            push a
1576   0E0E DA            push d
1577   0E0F FA FF FF      lea d, [bp + -1] ; $i
1578   0E12 2A            mov b, [d]
1579   0E13 38 00 00      mov c, 0
1580   0E16 E7            pop d
1581   0E17 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1582   0E1B E4            pop a
1583   0E1C 58 00 00      add d, 0
1584   0E1F 2D            mov b, d
1585   0E20 38 00 00      mov c, 0
1586   0E23 FD AB         swp b
1587   0E25 D8            push b
1588   0E26 07 E1 34      call strcmp
1589   0E29 51 04 00      add sp, 4
1590   0E2C             ; --- END FUNCTION CALL
1591   0E2C C0 00 00      cmp b, 0
1592   0E2F C6 3E 0E      je _if31_exit
1593   0E32             _if31_TRUE:
1594   0E32             ; return i; 
1595   0E32 FA FF FF      lea d, [bp + -1] ; $i
1596   0E35 2A            mov b, [d]
1597   0E36 38 00 00      mov c, 0
1598   0E39 F9            leave
1599   0E3A 09            ret
1600   0E3B 0A 3E 0E      jmp _if31_exit
1601   0E3E             _if31_exit:
1602   0E3E             _for30_update:
1603   0E3E FA FF FF      lea d, [bp + -1] ; $i
1604   0E41 2A            mov b, [d]
1605   0E42 38 00 00      mov c, 0
1606   0E45 11            mov a, b
1607   0E46 FD 77         inc b
1608   0E48 FA FF FF      lea d, [bp + -1] ; $i
1609   0E4B FD 43         mov [d], b
1610   0E4D 27            mov b, a
1611   0E4E 0A E6 0D      jmp _for30_cond
1612   0E51             _for30_exit:
1613   0E51             ; return -1; 
1614   0E51 FD 2E FF FF   mov32 cb, $ffffffff
1614   0E55 FF FF 
1615   0E57 F9            leave
1616   0E58 09            ret
1617   0E59             
1618   0E59             get_var_type:
1619   0E59 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1620   0E5C             ; int i; 
1621   0E5C 52 02 00      sub sp, 2
1622   0E5F             ; for(i = 0; i < vars_tos; i++) 
1623   0E5F             _for32_init:
1624   0E5F FA FF FF      lea d, [bp + -1] ; $i
1625   0E62 DA            push d
1626   0E63 FD 2E 00 00   mov32 cb, $00000000
1626   0E67 00 00 
1627   0E69 E7            pop d
1628   0E6A FD 43         mov [d], b
1629   0E6C             _for32_cond:
1630   0E6C FA FF FF      lea d, [bp + -1] ; $i
1631   0E6F 2A            mov b, [d]
1632   0E70 38 00 00      mov c, 0
1633   0E73             ; --- START RELATIONAL
1634   0E73 D7            push a
1635   0E74 11            mov a, b
1636   0E75 3B 85 42      mov d, _vars_tos ; $vars_tos
1637   0E78 2A            mov b, [d]
1638   0E79 38 00 00      mov c, 0
1639   0E7C B0            cmp a, b
1640   0E7D FD 73         slt ; < (signed)
1641   0E7F E4            pop a
1642   0E80             ; --- END RELATIONAL
1643   0E80 C0 00 00      cmp b, 0
1644   0E83 C6 EB 0E      je _for32_exit
1645   0E86             _for32_block:
1646   0E86             ; if(!strcmp(variables[i].varname, varname)) return variables[i].var_type; 
1647   0E86             _if33_cond:
1648   0E86             ; --- START FUNCTION CALL
1649   0E86 FA 05 00      lea d, [bp + 5] ; $varname
1650   0E89 2A            mov b, [d]
1651   0E8A 38 00 00      mov c, 0
1652   0E8D FD AB         swp b
1653   0E8F D8            push b
1654   0E90 3B B3 41      mov d, _variables_data ; $variables
1655   0E93 D7            push a
1656   0E94 DA            push d
1657   0E95 FA FF FF      lea d, [bp + -1] ; $i
1658   0E98 2A            mov b, [d]
1659   0E99 38 00 00      mov c, 0
1660   0E9C E7            pop d
1661   0E9D FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1662   0EA1 E4            pop a
1663   0EA2 58 00 00      add d, 0
1664   0EA5 2D            mov b, d
1665   0EA6 38 00 00      mov c, 0
1666   0EA9 FD AB         swp b
1667   0EAB D8            push b
1668   0EAC 07 E1 34      call strcmp
1669   0EAF 51 04 00      add sp, 4
1670   0EB2             ; --- END FUNCTION CALL
1671   0EB2 C0 00 00      cmp b, 0
1672   0EB5 C6 D8 0E      je _if33_exit
1673   0EB8             _if33_TRUE:
1674   0EB8             ; return variables[i].var_type; 
1675   0EB8 3B B3 41      mov d, _variables_data ; $variables
1676   0EBB D7            push a
1677   0EBC DA            push d
1678   0EBD FA FF FF      lea d, [bp + -1] ; $i
1679   0EC0 2A            mov b, [d]
1680   0EC1 38 00 00      mov c, 0
1681   0EC4 E7            pop d
1682   0EC5 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1683   0EC9 E4            pop a
1684   0ECA 58 10 00      add d, 16
1685   0ECD 32            mov bl, [d]
1686   0ECE A7 00         mov bh, 0
1687   0ED0 38 00 00      mov c, 0
1688   0ED3 F9            leave
1689   0ED4 09            ret
1690   0ED5 0A D8 0E      jmp _if33_exit
1691   0ED8             _if33_exit:
1692   0ED8             _for32_update:
1693   0ED8 FA FF FF      lea d, [bp + -1] ; $i
1694   0EDB 2A            mov b, [d]
1695   0EDC 38 00 00      mov c, 0
1696   0EDF 11            mov a, b
1697   0EE0 FD 77         inc b
1698   0EE2 FA FF FF      lea d, [bp + -1] ; $i
1699   0EE5 FD 43         mov [d], b
1700   0EE7 27            mov b, a
1701   0EE8 0A 6C 0E      jmp _for32_cond
1702   0EEB             _for32_exit:
1703   0EEB             ; return -1; 
1704   0EEB FD 2E FF FF   mov32 cb, $ffffffff
1704   0EEF FF FF 
1705   0EF1 F9            leave
1706   0EF2 09            ret
1707   0EF3             
1708   0EF3             show_var:
1709   0EF3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1710   0EF6             ; int i; 
1711   0EF6 52 02 00      sub sp, 2
1712   0EF9             ; for(i = 0; i < vars_tos; i++){ 
1713   0EF9             _for34_init:
1714   0EF9 FA FF FF      lea d, [bp + -1] ; $i
1715   0EFC DA            push d
1716   0EFD FD 2E 00 00   mov32 cb, $00000000
1716   0F01 00 00 
1717   0F03 E7            pop d
1718   0F04 FD 43         mov [d], b
1719   0F06             _for34_cond:
1720   0F06 FA FF FF      lea d, [bp + -1] ; $i
1721   0F09 2A            mov b, [d]
1722   0F0A 38 00 00      mov c, 0
1723   0F0D             ; --- START RELATIONAL
1724   0F0D D7            push a
1725   0F0E 11            mov a, b
1726   0F0F 3B 85 42      mov d, _vars_tos ; $vars_tos
1727   0F12 2A            mov b, [d]
1728   0F13 38 00 00      mov c, 0
1729   0F16 B0            cmp a, b
1730   0F17 FD 73         slt ; < (signed)
1731   0F19 E4            pop a
1732   0F1A             ; --- END RELATIONAL
1733   0F1A C0 00 00      cmp b, 0
1734   0F1D C6 1B 10      je _for34_exit
1735   0F20             _for34_block:
1736   0F20             ; if(!strcmp(variables[i].varname, varname)){ 
1737   0F20             _if35_cond:
1738   0F20             ; --- START FUNCTION CALL
1739   0F20 FA 05 00      lea d, [bp + 5] ; $varname
1740   0F23 2A            mov b, [d]
1741   0F24 38 00 00      mov c, 0
1742   0F27 FD AB         swp b
1743   0F29 D8            push b
1744   0F2A 3B B3 41      mov d, _variables_data ; $variables
1745   0F2D D7            push a
1746   0F2E DA            push d
1747   0F2F FA FF FF      lea d, [bp + -1] ; $i
1748   0F32 2A            mov b, [d]
1749   0F33 38 00 00      mov c, 0
1750   0F36 E7            pop d
1751   0F37 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1752   0F3B E4            pop a
1753   0F3C 58 00 00      add d, 0
1754   0F3F 2D            mov b, d
1755   0F40 38 00 00      mov c, 0
1756   0F43 FD AB         swp b
1757   0F45 D8            push b
1758   0F46 07 E1 34      call strcmp
1759   0F49 51 04 00      add sp, 4
1760   0F4C             ; --- END FUNCTION CALL
1761   0F4C C0 00 00      cmp b, 0
1762   0F4F C6 08 10      je _if35_exit
1763   0F52             _if35_TRUE:
1764   0F52             ; if(variables[i].var_type == SHELL_VAR_TYP_INT){ 
1765   0F52             _if36_cond:
1766   0F52 3B B3 41      mov d, _variables_data ; $variables
1767   0F55 D7            push a
1768   0F56 DA            push d
1769   0F57 FA FF FF      lea d, [bp + -1] ; $i
1770   0F5A 2A            mov b, [d]
1771   0F5B 38 00 00      mov c, 0
1772   0F5E E7            pop d
1773   0F5F FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1774   0F63 E4            pop a
1775   0F64 58 10 00      add d, 16
1776   0F67 32            mov bl, [d]
1777   0F68 A7 00         mov bh, 0
1778   0F6A 38 00 00      mov c, 0
1779   0F6D             ; --- START RELATIONAL
1780   0F6D D7            push a
1781   0F6E 11            mov a, b
1782   0F6F FD 2E 01 00   mov32 cb, $1 ; enum element: SHELL_VAR_TYP_INT
1782   0F73 00 00 
1783   0F75 B0            cmp a, b
1784   0F76 FD 71         seq ; ==
1785   0F78 E4            pop a
1786   0F79             ; --- END RELATIONAL
1787   0F79 C0 00 00      cmp b, 0
1788   0F7C C6 AA 0F      je _if36_else
1789   0F7F             _if36_TRUE:
1790   0F7F             ; printf("%d", variables[i].as_int); 
1791   0F7F             ; --- START FUNCTION CALL
1792   0F7F 3B B3 41      mov d, _variables_data ; $variables
1793   0F82 D7            push a
1794   0F83 DA            push d
1795   0F84 FA FF FF      lea d, [bp + -1] ; $i
1796   0F87 2A            mov b, [d]
1797   0F88 38 00 00      mov c, 0
1798   0F8B E7            pop d
1799   0F8C FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1800   0F90 E4            pop a
1801   0F91 58 13 00      add d, 19
1802   0F94 2A            mov b, [d]
1803   0F95 38 00 00      mov c, 0
1804   0F98 FD AB         swp b
1805   0F9A D8            push b
1806   0F9B 26 EC 44      mov b, _s12 ; "%d"
1807   0F9E FD AB         swp b
1808   0FA0 D8            push b
1809   0FA1 07 91 28      call printf
1810   0FA4 51 04 00      add sp, 4
1811   0FA7             ; --- END FUNCTION CALL
1812   0FA7 0A FC 0F      jmp _if36_exit
1813   0FAA             _if36_else:
1814   0FAA             ; if(variables[i].var_type == SHELL_VAR_TYP_STR){ 
1815   0FAA             _if37_cond:
1816   0FAA 3B B3 41      mov d, _variables_data ; $variables
1817   0FAD D7            push a
1818   0FAE DA            push d
1819   0FAF FA FF FF      lea d, [bp + -1] ; $i
1820   0FB2 2A            mov b, [d]
1821   0FB3 38 00 00      mov c, 0
1822   0FB6 E7            pop d
1823   0FB7 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1824   0FBB E4            pop a
1825   0FBC 58 10 00      add d, 16
1826   0FBF 32            mov bl, [d]
1827   0FC0 A7 00         mov bh, 0
1828   0FC2 38 00 00      mov c, 0
1829   0FC5             ; --- START RELATIONAL
1830   0FC5 D7            push a
1831   0FC6 11            mov a, b
1832   0FC7 FD 2E 00 00   mov32 cb, $0 ; enum element: SHELL_VAR_TYP_STR
1832   0FCB 00 00 
1833   0FCD B0            cmp a, b
1834   0FCE FD 71         seq ; ==
1835   0FD0 E4            pop a
1836   0FD1             ; --- END RELATIONAL
1837   0FD1 C0 00 00      cmp b, 0
1838   0FD4 C6 FC 0F      je _if37_exit
1839   0FD7             _if37_TRUE:
1840   0FD7             ; printf(variables[i].as_string); 
1841   0FD7             ; --- START FUNCTION CALL
1842   0FD7 3B B3 41      mov d, _variables_data ; $variables
1843   0FDA D7            push a
1844   0FDB DA            push d
1845   0FDC FA FF FF      lea d, [bp + -1] ; $i
1846   0FDF 2A            mov b, [d]
1847   0FE0 38 00 00      mov c, 0
1848   0FE3 E7            pop d
1849   0FE4 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1850   0FE8 E4            pop a
1851   0FE9 58 11 00      add d, 17
1852   0FEC 2A            mov b, [d]
1853   0FED 38 00 00      mov c, 0
1854   0FF0 FD AB         swp b
1855   0FF2 D8            push b
1856   0FF3 07 91 28      call printf
1857   0FF6 51 02 00      add sp, 2
1858   0FF9             ; --- END FUNCTION CALL
1859   0FF9 0A FC 0F      jmp _if37_exit
1860   0FFC             _if37_exit:
1861   0FFC             _if36_exit:
1862   0FFC             ; return i; 
1863   0FFC FA FF FF      lea d, [bp + -1] ; $i
1864   0FFF 2A            mov b, [d]
1865   1000 38 00 00      mov c, 0
1866   1003 F9            leave
1867   1004 09            ret
1868   1005 0A 08 10      jmp _if35_exit
1869   1008             _if35_exit:
1870   1008             _for34_update:
1871   1008 FA FF FF      lea d, [bp + -1] ; $i
1872   100B 2A            mov b, [d]
1873   100C 38 00 00      mov c, 0
1874   100F 11            mov a, b
1875   1010 FD 77         inc b
1876   1012 FA FF FF      lea d, [bp + -1] ; $i
1877   1015 FD 43         mov [d], b
1878   1017 27            mov b, a
1879   1018 0A 06 0F      jmp _for34_cond
1880   101B             _for34_exit:
1881   101B             ; error("Undeclared variable."); 
1882   101B             ; --- START FUNCTION CALL
1883   101B 26 EF 44      mov b, _s13 ; "Undeclared variable."
1884   101E FD AB         swp b
1885   1020 D8            push b
1886   1021 07 64 28      call error
1887   1024 51 02 00      add sp, 2
1888   1027             ; --- END FUNCTION CALL
1889   1027 F9            leave
1890   1028 09            ret
1891   1029             
1892   1029             get_shell_var_strval:
1893   1029 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1894   102C             ; return variables[index].as_string; 
1895   102C 3B B3 41      mov d, _variables_data ; $variables
1896   102F D7            push a
1897   1030 DA            push d
1898   1031 FA 05 00      lea d, [bp + 5] ; $index
1899   1034 2A            mov b, [d]
1900   1035 38 00 00      mov c, 0
1901   1038 E7            pop d
1902   1039 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1903   103D E4            pop a
1904   103E 58 11 00      add d, 17
1905   1041 2A            mov b, [d]
1906   1042 38 00 00      mov c, 0
1907   1045 F9            leave
1908   1046 09            ret
1909   1047             
1910   1047             get_shell_var_intval:
1911   1047 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1912   104A             ; return variables[index].as_int; 
1913   104A 3B B3 41      mov d, _variables_data ; $variables
1914   104D D7            push a
1915   104E DA            push d
1916   104F FA 05 00      lea d, [bp + 5] ; $index
1917   1052 2A            mov b, [d]
1918   1053 38 00 00      mov c, 0
1919   1056 E7            pop d
1920   1057 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1921   105B E4            pop a
1922   105C 58 13 00      add d, 19
1923   105F 2A            mov b, [d]
1924   1060 38 00 00      mov c, 0
1925   1063 F9            leave
1926   1064 09            ret
1927   1065             
1928   1065             file_exists:
1929   1065 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1930   1068             ; int file_exists; 
1931   1068 52 02 00      sub sp, 2
1932   106B             ; --- BEGIN INLINE ASM SEGMENT
1933   106B FA 05 00      lea d, [bp + 5] ; $filename
1934   106E FD 2A         mov d, [d]
1935   1070 19 15         mov al, 21
1936   1072 05 04         syscall sys_filesystem
1937   1074 FA FF FF      lea d, [bp + -1] ; $file_exists
1938   1077 43            mov [d], a
1939   1078             ; --- END INLINE ASM SEGMENT
1940   1078             ; return file_exists; 
1941   1078 FA FF FF      lea d, [bp + -1] ; $file_exists
1942   107B 2A            mov b, [d]
1943   107C 38 00 00      mov c, 0
1944   107F F9            leave
1945   1080 09            ret
1946   1081             
1947   1081             command_cd:
1948   1081 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1949   1084             ; int dirID; 
1950   1084 52 02 00      sub sp, 2
1951   1087             ; *path = '\0'; 
1952   1087 3B 33 3E      mov d, _path_data ; $path
1953   108A 2D            mov b, d
1954   108B 38 00 00      mov c, 0
1955   108E D8            push b
1956   108F FD 2E 00 00   mov32 cb, $00000000
1956   1093 00 00 
1957   1095 E7            pop d
1958   1096 FD 3E         mov [d], bl
1959   1098             ; get(); 
1960   1098             ; --- START FUNCTION CALL
1961   1098 07 22 15      call get
1962   109B             ; if(toktype == END || tok == SEMICOLON || tok == BITWISE_NOT){ 
1963   109B             _if38_cond:
1964   109B 3B 8D 42      mov d, _toktype ; $toktype
1965   109E 2A            mov b, [d]
1966   109F 38 00 00      mov c, 0
1967   10A2             ; --- START RELATIONAL
1968   10A2 D7            push a
1969   10A3 11            mov a, b
1970   10A4 FD 2E 06 00   mov32 cb, $6 ; enum element: END
1970   10A8 00 00 
1971   10AA B0            cmp a, b
1972   10AB FD 71         seq ; ==
1973   10AD E4            pop a
1974   10AE             ; --- END RELATIONAL
1975   10AE             ; --- START LOGICAL OR
1976   10AE D7            push a
1977   10AF 11            mov a, b
1978   10B0 3B 8B 42      mov d, _tok ; $tok
1979   10B3 2A            mov b, [d]
1980   10B4 38 00 00      mov c, 0
1981   10B7             ; --- START RELATIONAL
1982   10B7 D7            push a
1983   10B8 11            mov a, b
1984   10B9 FD 2E 23 00   mov32 cb, $23 ; enum element: SEMICOLON
1984   10BD 00 00 
1985   10BF B0            cmp a, b
1986   10C0 FD 71         seq ; ==
1987   10C2 E4            pop a
1988   10C3             ; --- END RELATIONAL
1989   10C3 FD A8         sor a, b ; ||
1990   10C5 11            mov a, b
1991   10C6 3B 8B 42      mov d, _tok ; $tok
1992   10C9 2A            mov b, [d]
1993   10CA 38 00 00      mov c, 0
1994   10CD             ; --- START RELATIONAL
1995   10CD D7            push a
1996   10CE 11            mov a, b
1997   10CF FD 2E 19 00   mov32 cb, $19 ; enum element: BITWISE_NOT
1997   10D3 00 00 
1998   10D5 B0            cmp a, b
1999   10D6 FD 71         seq ; ==
2000   10D8 E4            pop a
2001   10D9             ; --- END RELATIONAL
2002   10D9 FD A8         sor a, b ; ||
2003   10DB E4            pop a
2004   10DC             ; --- END LOGICAL OR
2005   10DC C0 00 00      cmp b, 0
2006   10DF C6 09 11      je _if38_else
2007   10E2             _if38_TRUE:
2008   10E2             ; back(); 
2009   10E2             ; --- START FUNCTION CALL
2010   10E2 07 B0 39      call back
2011   10E5             ; cd_to_dir(variables[1].as_string); 
2012   10E5             ; --- START FUNCTION CALL
2013   10E5 3B B3 41      mov d, _variables_data ; $variables
2014   10E8 D7            push a
2015   10E9 DA            push d
2016   10EA FD 2E 01 00   mov32 cb, $00000001
2016   10EE 00 00 
2017   10F0 E7            pop d
2018   10F1 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
2019   10F5 E4            pop a
2020   10F6 58 11 00      add d, 17
2021   10F9 2A            mov b, [d]
2022   10FA 38 00 00      mov c, 0
2023   10FD FD AB         swp b
2024   10FF D8            push b
2025   1100 07 7C 11      call cd_to_dir
2026   1103 51 02 00      add sp, 2
2027   1106             ; --- END FUNCTION CALL
2028   1106 0A 7A 11      jmp _if38_exit
2029   1109             _if38_else:
2030   1109             ; for(;;){ 
2031   1109             _for39_init:
2032   1109             _for39_cond:
2033   1109             _for39_block:
2034   1109             ; strcat(path, token); 
2035   1109             ; --- START FUNCTION CALL
2036   1109 3B 90 42      mov d, _token_data ; $token
2037   110C 2D            mov b, d
2038   110D 38 00 00      mov c, 0
2039   1110 FD AB         swp b
2040   1112 D8            push b
2041   1113 3B 33 3E      mov d, _path_data ; $path
2042   1116 2D            mov b, d
2043   1117 38 00 00      mov c, 0
2044   111A FD AB         swp b
2045   111C D8            push b
2046   111D 07 65 35      call strcat
2047   1120 51 04 00      add sp, 4
2048   1123             ; --- END FUNCTION CALL
2049   1123             ; get(); 
2050   1123             ; --- START FUNCTION CALL
2051   1123 07 22 15      call get
2052   1126             ; if(toktype == END) break; 
2053   1126             _if40_cond:
2054   1126 3B 8D 42      mov d, _toktype ; $toktype
2055   1129 2A            mov b, [d]
2056   112A 38 00 00      mov c, 0
2057   112D             ; --- START RELATIONAL
2058   112D D7            push a
2059   112E 11            mov a, b
2060   112F FD 2E 06 00   mov32 cb, $6 ; enum element: END
2060   1133 00 00 
2061   1135 B0            cmp a, b
2062   1136 FD 71         seq ; ==
2063   1138 E4            pop a
2064   1139             ; --- END RELATIONAL
2065   1139 C0 00 00      cmp b, 0
2066   113C C6 45 11      je _if40_else
2067   113F             _if40_TRUE:
2068   113F             ; break; 
2069   113F 0A 6A 11      jmp _for39_exit ; for break
2070   1142 0A 67 11      jmp _if40_exit
2071   1145             _if40_else:
2072   1145             ; if(tok == SEMICOLON){ 
2073   1145             _if41_cond:
2074   1145 3B 8B 42      mov d, _tok ; $tok
2075   1148 2A            mov b, [d]
2076   1149 38 00 00      mov c, 0
2077   114C             ; --- START RELATIONAL
2078   114C D7            push a
2079   114D 11            mov a, b
2080   114E FD 2E 23 00   mov32 cb, $23 ; enum element: SEMICOLON
2080   1152 00 00 
2081   1154 B0            cmp a, b
2082   1155 FD 71         seq ; ==
2083   1157 E4            pop a
2084   1158             ; --- END RELATIONAL
2085   1158 C0 00 00      cmp b, 0
2086   115B C6 67 11      je _if41_exit
2087   115E             _if41_TRUE:
2088   115E             ; back(); 
2089   115E             ; --- START FUNCTION CALL
2090   115E 07 B0 39      call back
2091   1161             ; break; 
2092   1161 0A 6A 11      jmp _for39_exit ; for break
2093   1164 0A 67 11      jmp _if41_exit
2094   1167             _if41_exit:
2095   1167             _if40_exit:
2096   1167             _for39_update:
2097   1167 0A 09 11      jmp _for39_cond
2098   116A             _for39_exit:
2099   116A             ; cd_to_dir(path); 
2100   116A             ; --- START FUNCTION CALL
2101   116A 3B 33 3E      mov d, _path_data ; $path
2102   116D 2D            mov b, d
2103   116E 38 00 00      mov c, 0
2104   1171 FD AB         swp b
2105   1173 D8            push b
2106   1174 07 7C 11      call cd_to_dir
2107   1177 51 02 00      add sp, 2
2108   117A             ; --- END FUNCTION CALL
2109   117A             _if38_exit:
2110   117A F9            leave
2111   117B 09            ret
2112   117C             
2113   117C             cd_to_dir:
2114   117C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2115   117F             ; int dirID; 
2116   117F 52 02 00      sub sp, 2
2117   1182             ; --- BEGIN INLINE ASM SEGMENT
2118   1182 FA 05 00      lea d, [bp + 5] ; $dir
2119   1185 FD 2A         mov d, [d]
2120   1187 19 13         mov al, 19
2121   1189 05 04         syscall sys_filesystem ; get dirID in 'A'
2122   118B FA FF FF      lea d, [bp + -1] ; $dirID
2123   118E FD 2A         mov d, [d]
2124   1190 43            mov [d], a ; set dirID
2125   1191 D7            push a
2126   1192             ; --- END INLINE ASM SEGMENT
2127   1192             ; if(dirID != -1){ 
2128   1192             _if42_cond:
2129   1192 FA FF FF      lea d, [bp + -1] ; $dirID
2130   1195 2A            mov b, [d]
2131   1196 38 00 00      mov c, 0
2132   1199             ; --- START RELATIONAL
2133   1199 D7            push a
2134   119A 11            mov a, b
2135   119B FD 2E FF FF   mov32 cb, $ffffffff
2135   119F FF FF 
2136   11A1 B0            cmp a, b
2137   11A2 FD 72         sneq ; !=
2138   11A4 E4            pop a
2139   11A5             ; --- END RELATIONAL
2140   11A5 C0 00 00      cmp b, 0
2141   11A8 C6 B4 11      je _if42_else
2142   11AB             _if42_TRUE:
2143   11AB             ; --- BEGIN INLINE ASM SEGMENT
2144   11AB E4            pop a
2145   11AC 27            mov b, a
2146   11AD 19 03         mov al, 3
2147   11AF 05 04         syscall sys_filesystem
2148   11B1             ; --- END INLINE ASM SEGMENT
2149   11B1 0A B5 11      jmp _if42_exit
2150   11B4             _if42_else:
2151   11B4             ; --- BEGIN INLINE ASM SEGMENT
2152   11B4 E4            pop a
2153   11B5             ; --- END INLINE ASM SEGMENT
2154   11B5             _if42_exit:
2155   11B5 F9            leave
2156   11B6 09            ret
2157   11B7             
2158   11B7             print_cwd:
2159   11B7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2160   11BA             ; --- BEGIN INLINE ASM SEGMENT
2161   11BA 19 12         mov al, 18
2162   11BC 05 04         syscall sys_filesystem        ; print current directory
2163   11BE             ; --- END INLINE ASM SEGMENT
2164   11BE F9            leave
2165   11BF 09            ret
2166   11C0             
2167   11C0             spawn_new_proc:
2168   11C0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2169   11C3             ; --- BEGIN INLINE ASM SEGMENT
2170   11C3 FA 07 00      lea d, [bp + 7] ; $args
2171   11C6 2A            mov b, [d]
2172   11C7 FA 05 00      lea d, [bp + 5] ; $executable_path
2173   11CA FD 2A         mov d, [d]
out/shell.asm line 2174: Label not found: (sys_spawn_proc)
out/shell.asm line 2174: Unused data in MS byte of argument. (200)
2174   11CC 05 00         syscall sys_spawn_proc
2175   11CE             ; --- END INLINE ASM SEGMENT
2176   11CE F9            leave
2177   11CF 09            ret
2178   11D0             
2179   11D0             command_shell:
2180   11D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2181   11D3 F9            leave
2182   11D4 09            ret
2183   11D5             
2184   11D5             command_fg:
2185   11D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2186   11D8 F9            leave
2187   11D9 09            ret
2188   11DA             
2189   11DA             read_config:
2190   11DA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2191   11DD             ; transient_area = alloc(16385); 
2192   11DD 3B 32 3C      mov d, _transient_area ; $transient_area
2193   11E0 DA            push d
2194   11E1             ; --- START FUNCTION CALL
2195   11E1 FD 2E 01 40   mov32 cb, $00004001
2195   11E5 00 00 
2196   11E7 FD AB         swp b
2197   11E9 D8            push b
2198   11EA 07 CD 12      call alloc
2199   11ED 51 02 00      add sp, 2
2200   11F0             ; --- END FUNCTION CALL
2201   11F0 E7            pop d
2202   11F1 FD 3E         mov [d], bl
2203   11F3             ; *value = '\0'; 
2204   11F3 FA 09 00      lea d, [bp + 9] ; $value
2205   11F6 2A            mov b, [d]
2206   11F7 38 00 00      mov c, 0
2207   11FA D8            push b
2208   11FB FD 2E 00 00   mov32 cb, $00000000
2208   11FF 00 00 
2209   1201 E7            pop d
2210   1202 FD 3E         mov [d], bl
2211   1204             ; loadfile(filename, transient_area); 
2212   1204             ; --- START FUNCTION CALL
2213   1204 3B 32 3C      mov d, _transient_area ; $transient_area
2214   1207 32            mov bl, [d]
2215   1208 A7 00         mov bh, 0
2216   120A 38 00 00      mov c, 0
2217   120D FD AB         swp b
2218   120F D8            push b
2219   1210 FA 05 00      lea d, [bp + 5] ; $filename
2220   1213 2A            mov b, [d]
2221   1214 38 00 00      mov c, 0
2222   1217 FD AB         swp b
2223   1219 D8            push b
2224   121A 07 0F 15      call loadfile
2225   121D 51 04 00      add sp, 4
2226   1220             ; --- END FUNCTION CALL
2227   1220             ; prog = transient_area; 
2228   1220 3B 8F 42      mov d, _prog ; $prog
2229   1223 DA            push d
2230   1224 3B 32 3C      mov d, _transient_area ; $transient_area
2231   1227 32            mov bl, [d]
2232   1228 A7 00         mov bh, 0
2233   122A 38 00 00      mov c, 0
2234   122D E7            pop d
2235   122E FD 3E         mov [d], bl
2236   1230             ; for(;;){ 
2237   1230             _for43_init:
2238   1230             _for43_cond:
2239   1230             _for43_block:
2240   1230             ; get(); 
2241   1230             ; --- START FUNCTION CALL
2242   1230 07 22 15      call get
2243   1233             ; if(toktype == END) break; 
2244   1233             _if44_cond:
2245   1233 3B 8D 42      mov d, _toktype ; $toktype
2246   1236 2A            mov b, [d]
2247   1237 38 00 00      mov c, 0
2248   123A             ; --- START RELATIONAL
2249   123A D7            push a
2250   123B 11            mov a, b
2251   123C FD 2E 06 00   mov32 cb, $6 ; enum element: END
2251   1240 00 00 
2252   1242 B0            cmp a, b
2253   1243 FD 71         seq ; ==
2254   1245 E4            pop a
2255   1246             ; --- END RELATIONAL
2256   1246 C0 00 00      cmp b, 0
2257   1249 C6 52 12      je _if44_exit
2258   124C             _if44_TRUE:
2259   124C             ; break; 
2260   124C 0A BC 12      jmp _for43_exit ; for break
2261   124F 0A 52 12      jmp _if44_exit
2262   1252             _if44_exit:
2263   1252             ; if(!strcmp(entry_name, token)){ 
2264   1252             _if45_cond:
2265   1252             ; --- START FUNCTION CALL
2266   1252 3B 90 42      mov d, _token_data ; $token
2267   1255 2D            mov b, d
2268   1256 38 00 00      mov c, 0
2269   1259 FD AB         swp b
2270   125B D8            push b
2271   125C FA 07 00      lea d, [bp + 7] ; $entry_name
2272   125F 2A            mov b, [d]
2273   1260 38 00 00      mov c, 0
2274   1263 FD AB         swp b
2275   1265 D8            push b
2276   1266 07 E1 34      call strcmp
2277   1269 51 04 00      add sp, 4
2278   126C             ; --- END FUNCTION CALL
2279   126C C0 00 00      cmp b, 0
2280   126F C6 B9 12      je _if45_exit
2281   1272             _if45_TRUE:
2282   1272             ; get(); // get '=' 
2283   1272             ; --- START FUNCTION CALL
2284   1272 07 22 15      call get
2285   1275             ; for(;;){ 
2286   1275             _for46_init:
2287   1275             _for46_cond:
2288   1275             _for46_block:
2289   1275             ; get(); 
2290   1275             ; --- START FUNCTION CALL
2291   1275 07 22 15      call get
2292   1278             ; if(!strcmp(token, ";")) return; 
2293   1278             _if47_cond:
2294   1278             ; --- START FUNCTION CALL
2295   1278 26 04 45      mov b, _s14 ; ";"
2296   127B FD AB         swp b
2297   127D D8            push b
2298   127E 3B 90 42      mov d, _token_data ; $token
2299   1281 2D            mov b, d
2300   1282 38 00 00      mov c, 0
2301   1285 FD AB         swp b
2302   1287 D8            push b
2303   1288 07 E1 34      call strcmp
2304   128B 51 04 00      add sp, 4
2305   128E             ; --- END FUNCTION CALL
2306   128E C0 00 00      cmp b, 0
2307   1291 C6 99 12      je _if47_exit
2308   1294             _if47_TRUE:
2309   1294             ; return; 
2310   1294 F9            leave
2311   1295 09            ret
2312   1296 0A 99 12      jmp _if47_exit
2313   1299             _if47_exit:
2314   1299             ; strcat(value, token); 
2315   1299             ; --- START FUNCTION CALL
2316   1299 3B 90 42      mov d, _token_data ; $token
2317   129C 2D            mov b, d
2318   129D 38 00 00      mov c, 0
2319   12A0 FD AB         swp b
2320   12A2 D8            push b
2321   12A3 FA 09 00      lea d, [bp + 9] ; $value
2322   12A6 2A            mov b, [d]
2323   12A7 38 00 00      mov c, 0
2324   12AA FD AB         swp b
2325   12AC D8            push b
2326   12AD 07 65 35      call strcat
2327   12B0 51 04 00      add sp, 4
2328   12B3             ; --- END FUNCTION CALL
2329   12B3             _for46_update:
2330   12B3 0A 75 12      jmp _for46_cond
2331   12B6             _for46_exit:
2332   12B6 0A B9 12      jmp _if45_exit
2333   12B9             _if45_exit:
2334   12B9             _for43_update:
2335   12B9 0A 30 12      jmp _for43_cond
2336   12BC             _for43_exit:
2337   12BC             ; free(16385); 
2338   12BC             ; --- START FUNCTION CALL
2339   12BC FD 2E 01 40   mov32 cb, $00004001
2339   12C0 00 00 
2340   12C2 FD AB         swp b
2341   12C4 D8            push b
2342   12C5 07 A3 36      call free
2343   12C8 51 02 00      add sp, 2
2344   12CB             ; --- END FUNCTION CALL
2345   12CB F9            leave
2346   12CC 09            ret
2347   12CD             
2348   12CD             alloc:
2349   12CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2350   12D0             ; block_t **b = &free_list; 
2351   12D0 52 02 00      sub sp, 2
2352   12D3             ; --- START LOCAL VAR INITIALIZATION
2353   12D3 FA FF FF      lea d, [bp + -1] ; $b
2354   12D6 DA            push d
2355   12D7 3B 89 42      mov d, _free_list ; $free_list
2356   12DA 2D            mov b, d
2357   12DB E7            pop d
2358   12DC FD 28         mov si, b
2359   12DE FD 50         mov di, d
2360   12E0 38 02 00      mov c, 2
2361   12E3 FD F5         rep movsb
2362   12E5             ; --- END LOCAL VAR INITIALIZATION
2363   12E5             ; block_t *prev = 0; 
2364   12E5 52 02 00      sub sp, 2
2365   12E8             ; --- START LOCAL VAR INITIALIZATION
2366   12E8 FA FD FF      lea d, [bp + -3] ; $prev
2367   12EB DA            push d
2368   12EC FD 2E 00 00   mov32 cb, $00000000
2368   12F0 00 00 
2369   12F2 E7            pop d
2370   12F3 FD 28         mov si, b
2371   12F5 FD 50         mov di, d
2372   12F7 38 02 00      mov c, 2
2373   12FA FD F5         rep movsb
2374   12FC             ; --- END LOCAL VAR INITIALIZATION
2375   12FC             ; block_t *pp; 
2376   12FC 52 02 00      sub sp, 2
2377   12FF             ; block_t *blk = *b; 
2378   12FF 52 02 00      sub sp, 2
2379   1302             ; --- START LOCAL VAR INITIALIZATION
2380   1302 FA F9 FF      lea d, [bp + -7] ; $blk
2381   1305 DA            push d
2382   1306 FA FF FF      lea d, [bp + -1] ; $b
2383   1309 2A            mov b, [d]
2384   130A 38 00 00      mov c, 0
2385   130D 74            mov d, b
2386   130E 2A            mov b, [d]
2387   130F E7            pop d
2388   1310 FD 28         mov si, b
2389   1312 FD 50         mov di, d
2390   1314 38 02 00      mov c, 2
2391   1317 FD F5         rep movsb
2392   1319             ; --- END LOCAL VAR INITIALIZATION
2393   1319             ; if (size & 1) size++; 
2394   1319             _if48_cond:
2395   1319 FA 05 00      lea d, [bp + 5] ; $size
2396   131C 2A            mov b, [d]
2397   131D 38 00 00      mov c, 0
2398   1320 D7            push a
2399   1321 11            mov a, b
2400   1322 FD 2E 01 00   mov32 cb, $00000001
2400   1326 00 00 
2401   1328 FD 92         and b, a ; &
2402   132A E4            pop a
2403   132B C0 00 00      cmp b, 0
2404   132E C6 44 13      je _if48_exit
2405   1331             _if48_TRUE:
2406   1331             ; size++; 
2407   1331 FA 05 00      lea d, [bp + 5] ; $size
2408   1334 2A            mov b, [d]
2409   1335 38 00 00      mov c, 0
2410   1338 11            mov a, b
2411   1339 FD 77         inc b
2412   133B FA 05 00      lea d, [bp + 5] ; $size
2413   133E FD 43         mov [d], b
2414   1340 27            mov b, a
2415   1341 0A 44 13      jmp _if48_exit
2416   1344             _if48_exit:
2417   1344             ; while (*b) { 
2418   1344             _while49_cond:
2419   1344 FA FF FF      lea d, [bp + -1] ; $b
2420   1347 2A            mov b, [d]
2421   1348 38 00 00      mov c, 0
2422   134B 74            mov d, b
2423   134C 2A            mov b, [d]
2424   134D C0 00 00      cmp b, 0
2425   1350 C6 F6 13      je _while49_exit
2426   1353             _while49_block:
2427   1353             ; pp = *b; 
2428   1353 FA FB FF      lea d, [bp + -5] ; $pp
2429   1356 DA            push d
2430   1357 FA FF FF      lea d, [bp + -1] ; $b
2431   135A 2A            mov b, [d]
2432   135B 38 00 00      mov c, 0
2433   135E 74            mov d, b
2434   135F 2A            mov b, [d]
2435   1360 E7            pop d
2436   1361 FD 43         mov [d], b
2437   1363             ; if (pp->size >= size) { 
2438   1363             _if50_cond:
2439   1363 FA FB FF      lea d, [bp + -5] ; $pp
2440   1366 FD 2A         mov d, [d]
2441   1368 58 00 00      add d, 0
2442   136B 2A            mov b, [d]
2443   136C 38 00 00      mov c, 0
2444   136F             ; --- START RELATIONAL
2445   136F D7            push a
2446   1370 11            mov a, b
2447   1371 FA 05 00      lea d, [bp + 5] ; $size
2448   1374 2A            mov b, [d]
2449   1375 38 00 00      mov c, 0
2450   1378 B0            cmp a, b
2451   1379 FD 82         sgeu ; >= (unsigned)
2452   137B E4            pop a
2453   137C             ; --- END RELATIONAL
2454   137C C0 00 00      cmp b, 0
2455   137F C6 D3 13      je _if50_exit
2456   1382             _if50_TRUE:
2457   1382             ; if (prev) 
2458   1382             _if51_cond:
2459   1382 FA FD FF      lea d, [bp + -3] ; $prev
2460   1385 2A            mov b, [d]
2461   1386 38 00 00      mov c, 0
2462   1389 C0 00 00      cmp b, 0
2463   138C C6 AA 13      je _if51_else
2464   138F             _if51_TRUE:
2465   138F             ; prev->next = blk->next; 
2466   138F FA FD FF      lea d, [bp + -3] ; $prev
2467   1392 FD 2A         mov d, [d]
2468   1394 58 02 00      add d, 2
2469   1397 DA            push d
2470   1398 FA F9 FF      lea d, [bp + -7] ; $blk
2471   139B FD 2A         mov d, [d]
2472   139D 58 02 00      add d, 2
2473   13A0 2A            mov b, [d]
2474   13A1 38 00 00      mov c, 0
2475   13A4 E7            pop d
2476   13A5 FD 43         mov [d], b
2477   13A7 0A BD 13      jmp _if51_exit
2478   13AA             _if51_else:
2479   13AA             ; free_list = blk->next; 
2480   13AA 3B 89 42      mov d, _free_list ; $free_list
2481   13AD DA            push d
2482   13AE FA F9 FF      lea d, [bp + -7] ; $blk
2483   13B1 FD 2A         mov d, [d]
2484   13B3 58 02 00      add d, 2
2485   13B6 2A            mov b, [d]
2486   13B7 38 00 00      mov c, 0
2487   13BA E7            pop d
2488   13BB FD 43         mov [d], b
2489   13BD             _if51_exit:
2490   13BD             ; return (void*)(blk + sizeof(struct block)); 
2491   13BD FA F9 FF      lea d, [bp + -7] ; $blk
2492   13C0 2A            mov b, [d]
2493   13C1 38 00 00      mov c, 0
2494   13C4             ; --- START TERMS
2495   13C4 D7            push a
2496   13C5 11            mov a, b
2497   13C6 FD 2E 04 00   mov32 cb, 4
2497   13CA 00 00 
2498   13CC 56            add b, a
2499   13CD E4            pop a
2500   13CE             ; --- END TERMS
2501   13CE F9            leave
2502   13CF 09            ret
2503   13D0 0A D3 13      jmp _if50_exit
2504   13D3             _if50_exit:
2505   13D3             ; prev = *b; 
2506   13D3 FA FD FF      lea d, [bp + -3] ; $prev
2507   13D6 DA            push d
2508   13D7 FA FF FF      lea d, [bp + -1] ; $b
2509   13DA 2A            mov b, [d]
2510   13DB 38 00 00      mov c, 0
2511   13DE 74            mov d, b
2512   13DF 2A            mov b, [d]
2513   13E0 E7            pop d
2514   13E1 FD 43         mov [d], b
2515   13E3             ; b = &pp->next; 
2516   13E3 FA FF FF      lea d, [bp + -1] ; $b
2517   13E6 DA            push d
2518   13E7 FA FB FF      lea d, [bp + -5] ; $pp
2519   13EA FD 2A         mov d, [d]
2520   13EC 58 02 00      add d, 2
2521   13EF 2D            mov b, d
2522   13F0 E7            pop d
2523   13F1 FD 43         mov [d], b
2524   13F3 0A 44 13      jmp _while49_cond
2525   13F6             _while49_exit:
2526   13F6             ; if (heap_top + sizeof(struct block) + size > heap +  16000         ) 
2527   13F6             _if52_cond:
2528   13F6 3B 64 45      mov d, _heap_top ; $heap_top
2529   13F9 2A            mov b, [d]
2530   13FA 38 00 00      mov c, 0
2531   13FD             ; --- START TERMS
2532   13FD D7            push a
2533   13FE 11            mov a, b
2534   13FF FD 2E 04 00   mov32 cb, 4
2534   1403 00 00 
2535   1405 56            add b, a
2536   1406 11            mov a, b
2537   1407 FA 05 00      lea d, [bp + 5] ; $size
2538   140A 2A            mov b, [d]
2539   140B 38 00 00      mov c, 0
2540   140E 56            add b, a
2541   140F E4            pop a
2542   1410             ; --- END TERMS
2543   1410             ; --- START RELATIONAL
2544   1410 D7            push a
2545   1411 11            mov a, b
2546   1412 3B 66 45      mov d, _heap ; $heap
2547   1415 2A            mov b, [d]
2548   1416 38 00 00      mov c, 0
2549   1419             ; --- START TERMS
2550   1419 D7            push a
2551   141A 11            mov a, b
2552   141B FD 2E 80 3E   mov32 cb, $00003e80
2552   141F 00 00 
2553   1421 56            add b, a
2554   1422 E4            pop a
2555   1423             ; --- END TERMS
2556   1423 B0            cmp a, b
2557   1424 FD 81         sgu ; > (unsigned)
2558   1426 E4            pop a
2559   1427             ; --- END RELATIONAL
2560   1427 C0 00 00      cmp b, 0
2561   142A C6 38 14      je _if52_exit
2562   142D             _if52_TRUE:
2563   142D             ; return 0; // out of memory 
2564   142D FD 2E 00 00   mov32 cb, $00000000
2564   1431 00 00 
2565   1433 F9            leave
2566   1434 09            ret
2567   1435 0A 38 14      jmp _if52_exit
2568   1438             _if52_exit:
2569   1438             ; blk = heap_top; 
2570   1438 FA F9 FF      lea d, [bp + -7] ; $blk
2571   143B DA            push d
2572   143C 3B 64 45      mov d, _heap_top ; $heap_top
2573   143F 2A            mov b, [d]
2574   1440 38 00 00      mov c, 0
2575   1443 E7            pop d
2576   1444 FD 43         mov [d], b
2577   1446             ; blk->size = size; 
2578   1446 FA F9 FF      lea d, [bp + -7] ; $blk
2579   1449 FD 2A         mov d, [d]
2580   144B 58 00 00      add d, 0
2581   144E DA            push d
2582   144F FA 05 00      lea d, [bp + 5] ; $size
2583   1452 2A            mov b, [d]
2584   1453 38 00 00      mov c, 0
2585   1456 E7            pop d
2586   1457 FD 43         mov [d], b
2587   1459             ; heap_top = heap_top + sizeof(block_t) + size; 
2588   1459 3B 64 45      mov d, _heap_top ; $heap_top
2589   145C DA            push d
2590   145D 3B 64 45      mov d, _heap_top ; $heap_top
2591   1460 2A            mov b, [d]
2592   1461 38 00 00      mov c, 0
2593   1464             ; --- START TERMS
2594   1464 D7            push a
2595   1465 11            mov a, b
2596   1466 FD 2E 04 00   mov32 cb, 4
2596   146A 00 00 
2597   146C 56            add b, a
2598   146D 11            mov a, b
2599   146E FA 05 00      lea d, [bp + 5] ; $size
2600   1471 2A            mov b, [d]
2601   1472 38 00 00      mov c, 0
2602   1475 56            add b, a
2603   1476 E4            pop a
2604   1477             ; --- END TERMS
2605   1477 E7            pop d
2606   1478 FD 43         mov [d], b
2607   147A             ; return (void*)(blk + sizeof(struct block)); 
2608   147A FA F9 FF      lea d, [bp + -7] ; $blk
2609   147D 2A            mov b, [d]
2610   147E 38 00 00      mov c, 0
2611   1481             ; --- START TERMS
2612   1481 D7            push a
2613   1482 11            mov a, b
2614   1483 FD 2E 04 00   mov32 cb, 4
2614   1487 00 00 
2615   1489 56            add b, a
2616   148A E4            pop a
2617   148B             ; --- END TERMS
2618   148B F9            leave
2619   148C 09            ret
2620   148D             
2621   148D             strcpy:
2622   148D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2623   1490             ; char *psrc; 
2624   1490 52 01 00      sub sp, 1
2625   1493             ; char *pdest; 
2626   1493 52 01 00      sub sp, 1
2627   1496             ; psrc = src; 
2628   1496 FA 00 00      lea d, [bp + 0] ; $psrc
2629   1499 DA            push d
2630   149A FA 07 00      lea d, [bp + 7] ; $src
2631   149D 2A            mov b, [d]
2632   149E 38 00 00      mov c, 0
2633   14A1 E7            pop d
2634   14A2 FD 3E         mov [d], bl
2635   14A4             ; pdest = dest; 
2636   14A4 FA FF FF      lea d, [bp + -1] ; $pdest
2637   14A7 DA            push d
2638   14A8 FA 05 00      lea d, [bp + 5] ; $dest
2639   14AB 2A            mov b, [d]
2640   14AC 38 00 00      mov c, 0
2641   14AF E7            pop d
2642   14B0 FD 3E         mov [d], bl
2643   14B2             ; while(*psrc) *pdest++ = *psrc++; 
2644   14B2             _while53_cond:
2645   14B2 FA 00 00      lea d, [bp + 0] ; $psrc
2646   14B5 32            mov bl, [d]
2647   14B6 A7 00         mov bh, 0
2648   14B8 38 00 00      mov c, 0
2649   14BB 74            mov d, b
2650   14BC 32            mov bl, [d]
2651   14BD A7 00         mov bh, 0
2652   14BF 38 00 00      mov c, 0
2653   14C2 C0 00 00      cmp b, 0
2654   14C5 C6 FA 14      je _while53_exit
2655   14C8             _while53_block:
2656   14C8             ; *pdest++ = *psrc++; 
2657   14C8 FA FF FF      lea d, [bp + -1] ; $pdest
2658   14CB 32            mov bl, [d]
2659   14CC A7 00         mov bh, 0
2660   14CE 38 00 00      mov c, 0
2661   14D1 FD 77         inc b
2662   14D3 FA FF FF      lea d, [bp + -1] ; $pdest
2663   14D6 FD 3E         mov [d], bl
2664   14D8 FD 7D         dec b
2665   14DA D8            push b
2666   14DB FA 00 00      lea d, [bp + 0] ; $psrc
2667   14DE 32            mov bl, [d]
2668   14DF A7 00         mov bh, 0
2669   14E1 38 00 00      mov c, 0
2670   14E4 FD 77         inc b
2671   14E6 FA 00 00      lea d, [bp + 0] ; $psrc
2672   14E9 FD 3E         mov [d], bl
2673   14EB FD 7D         dec b
2674   14ED 74            mov d, b
2675   14EE 32            mov bl, [d]
2676   14EF A7 00         mov bh, 0
2677   14F1 38 00 00      mov c, 0
2678   14F4 E7            pop d
2679   14F5 FD 3E         mov [d], bl
2680   14F7 0A B2 14      jmp _while53_cond
2681   14FA             _while53_exit:
2682   14FA             ; *pdest = '\0'; 
2683   14FA FA FF FF      lea d, [bp + -1] ; $pdest
2684   14FD 32            mov bl, [d]
2685   14FE A7 00         mov bh, 0
2686   1500 38 00 00      mov c, 0
2687   1503 D8            push b
2688   1504 FD 2E 00 00   mov32 cb, $00000000
2688   1508 00 00 
2689   150A E7            pop d
2690   150B FD 3E         mov [d], bl
2691   150D F9            leave
2692   150E 09            ret
2693   150F             
2694   150F             loadfile:
2695   150F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2696   1512             ; --- BEGIN INLINE ASM SEGMENT
2697   1512 FA 07 00      lea d, [bp + 7] ; $destination
2698   1515 15            mov a, [d]
2699   1516 4F            mov di, a
2700   1517 FA 05 00      lea d, [bp + 5] ; $filename
2701   151A FD 2A         mov d, [d]
2702   151C 19 14         mov al, 20
2703   151E 05 04         syscall sys_filesystem
2704   1520             ; --- END INLINE ASM SEGMENT
2705   1520 F9            leave
2706   1521 09            ret
2707   1522             
2708   1522             get:
2709   1522 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2710   1525             ; char *t; 
2711   1525 52 01 00      sub sp, 1
2712   1528             ; *token = '\0'; 
2713   1528 3B 90 42      mov d, _token_data ; $token
2714   152B 2D            mov b, d
2715   152C 38 00 00      mov c, 0
2716   152F D8            push b
2717   1530 FD 2E 00 00   mov32 cb, $00000000
2717   1534 00 00 
2718   1536 E7            pop d
2719   1537 FD 3E         mov [d], bl
2720   1539             ; tok = 0; 
2721   1539 3B 8B 42      mov d, _tok ; $tok
2722   153C DA            push d
2723   153D FD 2E 00 00   mov32 cb, $00000000
2723   1541 00 00 
2724   1543 E7            pop d
2725   1544 FD 43         mov [d], b
2726   1546             ; toktype = 0; 
2727   1546 3B 8D 42      mov d, _toktype ; $toktype
2728   1549 DA            push d
2729   154A FD 2E 00 00   mov32 cb, $00000000
2729   154E 00 00 
2730   1550 E7            pop d
2731   1551 FD 43         mov [d], b
2732   1553             ; t = token; 
2733   1553 FA 00 00      lea d, [bp + 0] ; $t
2734   1556 DA            push d
2735   1557 3B 90 42      mov d, _token_data ; $token
2736   155A 2D            mov b, d
2737   155B 38 00 00      mov c, 0
2738   155E E7            pop d
2739   155F FD 3E         mov [d], bl
2740   1561             ; while(is_space(*prog)) prog++; 
2741   1561             _while54_cond:
2742   1561             ; --- START FUNCTION CALL
2743   1561 3B 8F 42      mov d, _prog ; $prog
2744   1564 32            mov bl, [d]
2745   1565 A7 00         mov bh, 0
2746   1567 38 00 00      mov c, 0
2747   156A 74            mov d, b
2748   156B 32            mov bl, [d]
2749   156C A7 00         mov bh, 0
2750   156E 38 00 00      mov c, 0
2751   1571 DD            push bl
2752   1572 07 4C 27      call is_space
2753   1575 51 01 00      add sp, 1
2754   1578             ; --- END FUNCTION CALL
2755   1578 C0 00 00      cmp b, 0
2756   157B C6 93 15      je _while54_exit
2757   157E             _while54_block:
2758   157E             ; prog++; 
2759   157E 3B 8F 42      mov d, _prog ; $prog
2760   1581 32            mov bl, [d]
2761   1582 A7 00         mov bh, 0
2762   1584 38 00 00      mov c, 0
2763   1587 FD 77         inc b
2764   1589 3B 8F 42      mov d, _prog ; $prog
2765   158C FD 3E         mov [d], bl
2766   158E FD 7D         dec b
2767   1590 0A 61 15      jmp _while54_cond
2768   1593             _while54_exit:
2769   1593             ; if(*prog == '\0'){ 
2770   1593             _if55_cond:
2771   1593 3B 8F 42      mov d, _prog ; $prog
2772   1596 32            mov bl, [d]
2773   1597 A7 00         mov bh, 0
2774   1599 38 00 00      mov c, 0
2775   159C 74            mov d, b
2776   159D 32            mov bl, [d]
2777   159E A7 00         mov bh, 0
2778   15A0 38 00 00      mov c, 0
2779   15A3             ; --- START RELATIONAL
2780   15A3 D7            push a
2781   15A4 11            mov a, b
2782   15A5 FD 2E 00 00   mov32 cb, $00000000
2782   15A9 00 00 
2783   15AB B0            cmp a, b
2784   15AC FD 71         seq ; ==
2785   15AE E4            pop a
2786   15AF             ; --- END RELATIONAL
2787   15AF C0 00 00      cmp b, 0
2788   15B2 C6 C7 15      je _if55_exit
2789   15B5             _if55_TRUE:
2790   15B5             ; toktype = END; 
2791   15B5 3B 8D 42      mov d, _toktype ; $toktype
2792   15B8 DA            push d
2793   15B9 FD 2E 06 00   mov32 cb, $6 ; enum element: END
2793   15BD 00 00 
2794   15BF E7            pop d
2795   15C0 FD 43         mov [d], b
2796   15C2             ; return; 
2797   15C2 F9            leave
2798   15C3 09            ret
2799   15C4 0A C7 15      jmp _if55_exit
2800   15C7             _if55_exit:
2801   15C7             ; if(is_digit(*prog)){ 
2802   15C7             _if56_cond:
2803   15C7             ; --- START FUNCTION CALL
2804   15C7 3B 8F 42      mov d, _prog ; $prog
2805   15CA 32            mov bl, [d]
2806   15CB A7 00         mov bh, 0
2807   15CD 38 00 00      mov c, 0
2808   15D0 74            mov d, b
2809   15D1 32            mov bl, [d]
2810   15D2 A7 00         mov bh, 0
2811   15D4 38 00 00      mov c, 0
2812   15D7 DD            push bl
2813   15D8 07 B0 27      call is_digit
2814   15DB 51 01 00      add sp, 1
2815   15DE             ; --- END FUNCTION CALL
2816   15DE C0 00 00      cmp b, 0
2817   15E1 C6 58 16      je _if56_else
2818   15E4             _if56_TRUE:
2819   15E4             ; while(is_digit(*prog)){ 
2820   15E4             _while57_cond:
2821   15E4             ; --- START FUNCTION CALL
2822   15E4 3B 8F 42      mov d, _prog ; $prog
2823   15E7 32            mov bl, [d]
2824   15E8 A7 00         mov bh, 0
2825   15EA 38 00 00      mov c, 0
2826   15ED 74            mov d, b
2827   15EE 32            mov bl, [d]
2828   15EF A7 00         mov bh, 0
2829   15F1 38 00 00      mov c, 0
2830   15F4 DD            push bl
2831   15F5 07 B0 27      call is_digit
2832   15F8 51 01 00      add sp, 1
2833   15FB             ; --- END FUNCTION CALL
2834   15FB C0 00 00      cmp b, 0
2835   15FE C6 33 16      je _while57_exit
2836   1601             _while57_block:
2837   1601             ; *t++ = *prog++; 
2838   1601 FA 00 00      lea d, [bp + 0] ; $t
2839   1604 32            mov bl, [d]
2840   1605 A7 00         mov bh, 0
2841   1607 38 00 00      mov c, 0
2842   160A FD 77         inc b
2843   160C FA 00 00      lea d, [bp + 0] ; $t
2844   160F FD 3E         mov [d], bl
2845   1611 FD 7D         dec b
2846   1613 D8            push b
2847   1614 3B 8F 42      mov d, _prog ; $prog
2848   1617 32            mov bl, [d]
2849   1618 A7 00         mov bh, 0
2850   161A 38 00 00      mov c, 0
2851   161D FD 77         inc b
2852   161F 3B 8F 42      mov d, _prog ; $prog
2853   1622 FD 3E         mov [d], bl
2854   1624 FD 7D         dec b
2855   1626 74            mov d, b
2856   1627 32            mov bl, [d]
2857   1628 A7 00         mov bh, 0
2858   162A 38 00 00      mov c, 0
2859   162D E7            pop d
2860   162E FD 3E         mov [d], bl
2861   1630 0A E4 15      jmp _while57_cond
2862   1633             _while57_exit:
2863   1633             ; *t = '\0'; 
2864   1633 FA 00 00      lea d, [bp + 0] ; $t
2865   1636 32            mov bl, [d]
2866   1637 A7 00         mov bh, 0
2867   1639 38 00 00      mov c, 0
2868   163C D8            push b
2869   163D FD 2E 00 00   mov32 cb, $00000000
2869   1641 00 00 
2870   1643 E7            pop d
2871   1644 FD 3E         mov [d], bl
2872   1646             ; toktype = INTEGER_CONST; 
2873   1646 3B 8D 42      mov d, _toktype ; $toktype
2874   1649 DA            push d
2875   164A FD 2E 04 00   mov32 cb, $4 ; enum element: INTEGER_CONST
2875   164E 00 00 
2876   1650 E7            pop d
2877   1651 FD 43         mov [d], b
2878   1653             ; return; // return to avoid *t = '\0' line at the end of function 
2879   1653 F9            leave
2880   1654 09            ret
2881   1655 0A 37 27      jmp _if56_exit
2882   1658             _if56_else:
2883   1658             ; if(is_alpha(*prog)){ 
2884   1658             _if58_cond:
2885   1658             ; --- START FUNCTION CALL
2886   1658 3B 8F 42      mov d, _prog ; $prog
2887   165B 32            mov bl, [d]
2888   165C A7 00         mov bh, 0
2889   165E 38 00 00      mov c, 0
2890   1661 74            mov d, b
2891   1662 32            mov bl, [d]
2892   1663 A7 00         mov bh, 0
2893   1665 38 00 00      mov c, 0
2894   1668 DD            push bl
2895   1669 07 E4 27      call is_alpha
2896   166C 51 01 00      add sp, 1
2897   166F             ; --- END FUNCTION CALL
2898   166F C0 00 00      cmp b, 0
2899   1672 C6 03 17      je _if58_else
2900   1675             _if58_TRUE:
2901   1675             ; while(is_alpha(*prog) || is_digit(*prog)){ 
2902   1675             _while59_cond:
2903   1675             ; --- START FUNCTION CALL
2904   1675 3B 8F 42      mov d, _prog ; $prog
2905   1678 32            mov bl, [d]
2906   1679 A7 00         mov bh, 0
2907   167B 38 00 00      mov c, 0
2908   167E 74            mov d, b
2909   167F 32            mov bl, [d]
2910   1680 A7 00         mov bh, 0
2911   1682 38 00 00      mov c, 0
2912   1685 DD            push bl
2913   1686 07 E4 27      call is_alpha
2914   1689 51 01 00      add sp, 1
2915   168C             ; --- END FUNCTION CALL
2916   168C             ; --- START LOGICAL OR
2917   168C D7            push a
2918   168D 11            mov a, b
2919   168E             ; --- START FUNCTION CALL
2920   168E 3B 8F 42      mov d, _prog ; $prog
2921   1691 32            mov bl, [d]
2922   1692 A7 00         mov bh, 0
2923   1694 38 00 00      mov c, 0
2924   1697 74            mov d, b
2925   1698 32            mov bl, [d]
2926   1699 A7 00         mov bh, 0
2927   169B 38 00 00      mov c, 0
2928   169E DD            push bl
2929   169F 07 B0 27      call is_digit
2930   16A2 51 01 00      add sp, 1
2931   16A5             ; --- END FUNCTION CALL
2932   16A5 FD A8         sor a, b ; ||
2933   16A7 E4            pop a
2934   16A8             ; --- END LOGICAL OR
2935   16A8 C0 00 00      cmp b, 0
2936   16AB C6 E0 16      je _while59_exit
2937   16AE             _while59_block:
2938   16AE             ; *t++ = *prog++; 
2939   16AE FA 00 00      lea d, [bp + 0] ; $t
2940   16B1 32            mov bl, [d]
2941   16B2 A7 00         mov bh, 0
2942   16B4 38 00 00      mov c, 0
2943   16B7 FD 77         inc b
2944   16B9 FA 00 00      lea d, [bp + 0] ; $t
2945   16BC FD 3E         mov [d], bl
2946   16BE FD 7D         dec b
2947   16C0 D8            push b
2948   16C1 3B 8F 42      mov d, _prog ; $prog
2949   16C4 32            mov bl, [d]
2950   16C5 A7 00         mov bh, 0
2951   16C7 38 00 00      mov c, 0
2952   16CA FD 77         inc b
2953   16CC 3B 8F 42      mov d, _prog ; $prog
2954   16CF FD 3E         mov [d], bl
2955   16D1 FD 7D         dec b
2956   16D3 74            mov d, b
2957   16D4 32            mov bl, [d]
2958   16D5 A7 00         mov bh, 0
2959   16D7 38 00 00      mov c, 0
2960   16DA E7            pop d
2961   16DB FD 3E         mov [d], bl
2962   16DD 0A 75 16      jmp _while59_cond
2963   16E0             _while59_exit:
2964   16E0             ; *t = '\0'; 
2965   16E0 FA 00 00      lea d, [bp + 0] ; $t
2966   16E3 32            mov bl, [d]
2967   16E4 A7 00         mov bh, 0
2968   16E6 38 00 00      mov c, 0
2969   16E9 D8            push b
2970   16EA FD 2E 00 00   mov32 cb, $00000000
2970   16EE 00 00 
2971   16F0 E7            pop d
2972   16F1 FD 3E         mov [d], bl
2973   16F3             ; toktype = IDENTIFIER; 
2974   16F3 3B 8D 42      mov d, _toktype ; $toktype
2975   16F6 DA            push d
2976   16F7 FD 2E 05 00   mov32 cb, $5 ; enum element: IDENTIFIER
2976   16FB 00 00 
2977   16FD E7            pop d
2978   16FE FD 43         mov [d], b
2979   1700 0A 37 27      jmp _if58_exit
2980   1703             _if58_else:
2981   1703             ; if(*prog == '\"'){ 
2982   1703             _if60_cond:
2983   1703 3B 8F 42      mov d, _prog ; $prog
2984   1706 32            mov bl, [d]
2985   1707 A7 00         mov bh, 0
2986   1709 38 00 00      mov c, 0
2987   170C 74            mov d, b
2988   170D 32            mov bl, [d]
2989   170E A7 00         mov bh, 0
2990   1710 38 00 00      mov c, 0
2991   1713             ; --- START RELATIONAL
2992   1713 D7            push a
2993   1714 11            mov a, b
2994   1715 FD 2E 22 00   mov32 cb, $00000022
2994   1719 00 00 
2995   171B B0            cmp a, b
2996   171C FD 71         seq ; ==
2997   171E E4            pop a
2998   171F             ; --- END RELATIONAL
2999   171F C0 00 00      cmp b, 0
3000   1722 C6 41 18      je _if60_else
3001   1725             _if60_TRUE:
3002   1725             ; *t++ = '\"'; 
3003   1725 FA 00 00      lea d, [bp + 0] ; $t
3004   1728 32            mov bl, [d]
3005   1729 A7 00         mov bh, 0
3006   172B 38 00 00      mov c, 0
3007   172E FD 77         inc b
3008   1730 FA 00 00      lea d, [bp + 0] ; $t
3009   1733 FD 3E         mov [d], bl
3010   1735 FD 7D         dec b
3011   1737 D8            push b
3012   1738 FD 2E 22 00   mov32 cb, $00000022
3012   173C 00 00 
3013   173E E7            pop d
3014   173F FD 3E         mov [d], bl
3015   1741             ; prog++; 
3016   1741 3B 8F 42      mov d, _prog ; $prog
3017   1744 32            mov bl, [d]
3018   1745 A7 00         mov bh, 0
3019   1747 38 00 00      mov c, 0
3020   174A FD 77         inc b
3021   174C 3B 8F 42      mov d, _prog ; $prog
3022   174F FD 3E         mov [d], bl
3023   1751 FD 7D         dec b
3024   1753             ; while(*prog != '\"' && *prog){ 
3025   1753             _while61_cond:
3026   1753 3B 8F 42      mov d, _prog ; $prog
3027   1756 32            mov bl, [d]
3028   1757 A7 00         mov bh, 0
3029   1759 38 00 00      mov c, 0
3030   175C 74            mov d, b
3031   175D 32            mov bl, [d]
3032   175E A7 00         mov bh, 0
3033   1760 38 00 00      mov c, 0
3034   1763             ; --- START RELATIONAL
3035   1763 D7            push a
3036   1764 11            mov a, b
3037   1765 FD 2E 22 00   mov32 cb, $00000022
3037   1769 00 00 
3038   176B B0            cmp a, b
3039   176C FD 72         sneq ; !=
3040   176E E4            pop a
3041   176F             ; --- END RELATIONAL
3042   176F             ; --- START LOGICAL AND
3043   176F D7            push a
3044   1770 11            mov a, b
3045   1771 3B 8F 42      mov d, _prog ; $prog
3046   1774 32            mov bl, [d]
3047   1775 A7 00         mov bh, 0
3048   1777 38 00 00      mov c, 0
3049   177A 74            mov d, b
3050   177B 32            mov bl, [d]
3051   177C A7 00         mov bh, 0
3052   177E 38 00 00      mov c, 0
3053   1781 FD A7         sand a, b
3054   1783 E4            pop a
3055   1784             ; --- END LOGICAL AND
3056   1784 C0 00 00      cmp b, 0
3057   1787 C6 BC 17      je _while61_exit
3058   178A             _while61_block:
3059   178A             ; *t++ = *prog++; 
3060   178A FA 00 00      lea d, [bp + 0] ; $t
3061   178D 32            mov bl, [d]
3062   178E A7 00         mov bh, 0
3063   1790 38 00 00      mov c, 0
3064   1793 FD 77         inc b
3065   1795 FA 00 00      lea d, [bp + 0] ; $t
3066   1798 FD 3E         mov [d], bl
3067   179A FD 7D         dec b
3068   179C D8            push b
3069   179D 3B 8F 42      mov d, _prog ; $prog
3070   17A0 32            mov bl, [d]
3071   17A1 A7 00         mov bh, 0
3072   17A3 38 00 00      mov c, 0
3073   17A6 FD 77         inc b
3074   17A8 3B 8F 42      mov d, _prog ; $prog
3075   17AB FD 3E         mov [d], bl
3076   17AD FD 7D         dec b
3077   17AF 74            mov d, b
3078   17B0 32            mov bl, [d]
3079   17B1 A7 00         mov bh, 0
3080   17B3 38 00 00      mov c, 0
3081   17B6 E7            pop d
3082   17B7 FD 3E         mov [d], bl
3083   17B9 0A 53 17      jmp _while61_cond
3084   17BC             _while61_exit:
3085   17BC             ; if(*prog != '\"') error("Double quotes expected"); 
3086   17BC             _if62_cond:
3087   17BC 3B 8F 42      mov d, _prog ; $prog
3088   17BF 32            mov bl, [d]
3089   17C0 A7 00         mov bh, 0
3090   17C2 38 00 00      mov c, 0
3091   17C5 74            mov d, b
3092   17C6 32            mov bl, [d]
3093   17C7 A7 00         mov bh, 0
3094   17C9 38 00 00      mov c, 0
3095   17CC             ; --- START RELATIONAL
3096   17CC D7            push a
3097   17CD 11            mov a, b
3098   17CE FD 2E 22 00   mov32 cb, $00000022
3098   17D2 00 00 
3099   17D4 B0            cmp a, b
3100   17D5 FD 72         sneq ; !=
3101   17D7 E4            pop a
3102   17D8             ; --- END RELATIONAL
3103   17D8 C0 00 00      cmp b, 0
3104   17DB C6 ED 17      je _if62_exit
3105   17DE             _if62_TRUE:
3106   17DE             ; error("Double quotes expected"); 
3107   17DE             ; --- START FUNCTION CALL
3108   17DE 26 06 45      mov b, _s15 ; "Double quotes expected"
3109   17E1 FD AB         swp b
3110   17E3 D8            push b
3111   17E4 07 64 28      call error
3112   17E7 51 02 00      add sp, 2
3113   17EA             ; --- END FUNCTION CALL
3114   17EA 0A ED 17      jmp _if62_exit
3115   17ED             _if62_exit:
3116   17ED             ; *t++ = '\"'; 
3117   17ED FA 00 00      lea d, [bp + 0] ; $t
3118   17F0 32            mov bl, [d]
3119   17F1 A7 00         mov bh, 0
3120   17F3 38 00 00      mov c, 0
3121   17F6 FD 77         inc b
3122   17F8 FA 00 00      lea d, [bp + 0] ; $t
3123   17FB FD 3E         mov [d], bl
3124   17FD FD 7D         dec b
3125   17FF D8            push b
3126   1800 FD 2E 22 00   mov32 cb, $00000022
3126   1804 00 00 
3127   1806 E7            pop d
3128   1807 FD 3E         mov [d], bl
3129   1809             ; prog++; 
3130   1809 3B 8F 42      mov d, _prog ; $prog
3131   180C 32            mov bl, [d]
3132   180D A7 00         mov bh, 0
3133   180F 38 00 00      mov c, 0
3134   1812 FD 77         inc b
3135   1814 3B 8F 42      mov d, _prog ; $prog
3136   1817 FD 3E         mov [d], bl
3137   1819 FD 7D         dec b
3138   181B             ; toktype = STRING_CONST; 
3139   181B 3B 8D 42      mov d, _toktype ; $toktype
3140   181E DA            push d
3141   181F FD 2E 03 00   mov32 cb, $3 ; enum element: STRING_CONST
3141   1823 00 00 
3142   1825 E7            pop d
3143   1826 FD 43         mov [d], b
3144   1828             ; *t = '\0'; 
3145   1828 FA 00 00      lea d, [bp + 0] ; $t
3146   182B 32            mov bl, [d]
3147   182C A7 00         mov bh, 0
3148   182E 38 00 00      mov c, 0
3149   1831 D8            push b
3150   1832 FD 2E 00 00   mov32 cb, $00000000
3150   1836 00 00 
3151   1838 E7            pop d
3152   1839 FD 3E         mov [d], bl
3153   183B             ; convert_constant(); // converts this string token qith quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
3154   183B             ; --- START FUNCTION CALL
3155   183B 07 E9 31      call convert_constant
3156   183E 0A 37 27      jmp _if60_exit
3157   1841             _if60_else:
3158   1841             ; if(*prog == '#'){ 
3159   1841             _if63_cond:
3160   1841 3B 8F 42      mov d, _prog ; $prog
3161   1844 32            mov bl, [d]
3162   1845 A7 00         mov bh, 0
3163   1847 38 00 00      mov c, 0
3164   184A 74            mov d, b
3165   184B 32            mov bl, [d]
3166   184C A7 00         mov bh, 0
3167   184E 38 00 00      mov c, 0
3168   1851             ; --- START RELATIONAL
3169   1851 D7            push a
3170   1852 11            mov a, b
3171   1853 FD 2E 23 00   mov32 cb, $00000023
3171   1857 00 00 
3172   1859 B0            cmp a, b
3173   185A FD 71         seq ; ==
3174   185C E4            pop a
3175   185D             ; --- END RELATIONAL
3176   185D C0 00 00      cmp b, 0
3177   1860 C6 AF 18      je _if63_else
3178   1863             _if63_TRUE:
3179   1863             ; *t++ = *prog++; 
3180   1863 FA 00 00      lea d, [bp + 0] ; $t
3181   1866 32            mov bl, [d]
3182   1867 A7 00         mov bh, 0
3183   1869 38 00 00      mov c, 0
3184   186C FD 77         inc b
3185   186E FA 00 00      lea d, [bp + 0] ; $t
3186   1871 FD 3E         mov [d], bl
3187   1873 FD 7D         dec b
3188   1875 D8            push b
3189   1876 3B 8F 42      mov d, _prog ; $prog
3190   1879 32            mov bl, [d]
3191   187A A7 00         mov bh, 0
3192   187C 38 00 00      mov c, 0
3193   187F FD 77         inc b
3194   1881 3B 8F 42      mov d, _prog ; $prog
3195   1884 FD 3E         mov [d], bl
3196   1886 FD 7D         dec b
3197   1888 74            mov d, b
3198   1889 32            mov bl, [d]
3199   188A A7 00         mov bh, 0
3200   188C 38 00 00      mov c, 0
3201   188F E7            pop d
3202   1890 FD 3E         mov [d], bl
3203   1892             ; tok = HASH; 
3204   1892 3B 8B 42      mov d, _tok ; $tok
3205   1895 DA            push d
3206   1896 FD 2E 15 00   mov32 cb, $15 ; enum element: HASH
3206   189A 00 00 
3207   189C E7            pop d
3208   189D FD 43         mov [d], b
3209   189F             ; toktype = DELIMITER;   
3210   189F 3B 8D 42      mov d, _toktype ; $toktype
3211   18A2 DA            push d
3212   18A3 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3212   18A7 00 00 
3213   18A9 E7            pop d
3214   18AA FD 43         mov [d], b
3215   18AC 0A 37 27      jmp _if63_exit
3216   18AF             _if63_else:
3217   18AF             ; if(*prog == '{'){ 
3218   18AF             _if64_cond:
3219   18AF 3B 8F 42      mov d, _prog ; $prog
3220   18B2 32            mov bl, [d]
3221   18B3 A7 00         mov bh, 0
3222   18B5 38 00 00      mov c, 0
3223   18B8 74            mov d, b
3224   18B9 32            mov bl, [d]
3225   18BA A7 00         mov bh, 0
3226   18BC 38 00 00      mov c, 0
3227   18BF             ; --- START RELATIONAL
3228   18BF D7            push a
3229   18C0 11            mov a, b
3230   18C1 FD 2E 7B 00   mov32 cb, $0000007b
3230   18C5 00 00 
3231   18C7 B0            cmp a, b
3232   18C8 FD 71         seq ; ==
3233   18CA E4            pop a
3234   18CB             ; --- END RELATIONAL
3235   18CB C0 00 00      cmp b, 0
3236   18CE C6 1D 19      je _if64_else
3237   18D1             _if64_TRUE:
3238   18D1             ; *t++ = *prog++; 
3239   18D1 FA 00 00      lea d, [bp + 0] ; $t
3240   18D4 32            mov bl, [d]
3241   18D5 A7 00         mov bh, 0
3242   18D7 38 00 00      mov c, 0
3243   18DA FD 77         inc b
3244   18DC FA 00 00      lea d, [bp + 0] ; $t
3245   18DF FD 3E         mov [d], bl
3246   18E1 FD 7D         dec b
3247   18E3 D8            push b
3248   18E4 3B 8F 42      mov d, _prog ; $prog
3249   18E7 32            mov bl, [d]
3250   18E8 A7 00         mov bh, 0
3251   18EA 38 00 00      mov c, 0
3252   18ED FD 77         inc b
3253   18EF 3B 8F 42      mov d, _prog ; $prog
3254   18F2 FD 3E         mov [d], bl
3255   18F4 FD 7D         dec b
3256   18F6 74            mov d, b
3257   18F7 32            mov bl, [d]
3258   18F8 A7 00         mov bh, 0
3259   18FA 38 00 00      mov c, 0
3260   18FD E7            pop d
3261   18FE FD 3E         mov [d], bl
3262   1900             ; tok = OPENING_BRACE; 
3263   1900 3B 8B 42      mov d, _tok ; $tok
3264   1903 DA            push d
3265   1904 FD 2E 1E 00   mov32 cb, $1e ; enum element: OPENING_BRACE
3265   1908 00 00 
3266   190A E7            pop d
3267   190B FD 43         mov [d], b
3268   190D             ; toktype = DELIMITER;   
3269   190D 3B 8D 42      mov d, _toktype ; $toktype
3270   1910 DA            push d
3271   1911 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3271   1915 00 00 
3272   1917 E7            pop d
3273   1918 FD 43         mov [d], b
3274   191A 0A 37 27      jmp _if64_exit
3275   191D             _if64_else:
3276   191D             ; if(*prog == '}'){ 
3277   191D             _if65_cond:
3278   191D 3B 8F 42      mov d, _prog ; $prog
3279   1920 32            mov bl, [d]
3280   1921 A7 00         mov bh, 0
3281   1923 38 00 00      mov c, 0
3282   1926 74            mov d, b
3283   1927 32            mov bl, [d]
3284   1928 A7 00         mov bh, 0
3285   192A 38 00 00      mov c, 0
3286   192D             ; --- START RELATIONAL
3287   192D D7            push a
3288   192E 11            mov a, b
3289   192F FD 2E 7D 00   mov32 cb, $0000007d
3289   1933 00 00 
3290   1935 B0            cmp a, b
3291   1936 FD 71         seq ; ==
3292   1938 E4            pop a
3293   1939             ; --- END RELATIONAL
3294   1939 C0 00 00      cmp b, 0
3295   193C C6 8B 19      je _if65_else
3296   193F             _if65_TRUE:
3297   193F             ; *t++ = *prog++; 
3298   193F FA 00 00      lea d, [bp + 0] ; $t
3299   1942 32            mov bl, [d]
3300   1943 A7 00         mov bh, 0
3301   1945 38 00 00      mov c, 0
3302   1948 FD 77         inc b
3303   194A FA 00 00      lea d, [bp + 0] ; $t
3304   194D FD 3E         mov [d], bl
3305   194F FD 7D         dec b
3306   1951 D8            push b
3307   1952 3B 8F 42      mov d, _prog ; $prog
3308   1955 32            mov bl, [d]
3309   1956 A7 00         mov bh, 0
3310   1958 38 00 00      mov c, 0
3311   195B FD 77         inc b
3312   195D 3B 8F 42      mov d, _prog ; $prog
3313   1960 FD 3E         mov [d], bl
3314   1962 FD 7D         dec b
3315   1964 74            mov d, b
3316   1965 32            mov bl, [d]
3317   1966 A7 00         mov bh, 0
3318   1968 38 00 00      mov c, 0
3319   196B E7            pop d
3320   196C FD 3E         mov [d], bl
3321   196E             ; tok = CLOSING_BRACE; 
3322   196E 3B 8B 42      mov d, _tok ; $tok
3323   1971 DA            push d
3324   1972 FD 2E 1F 00   mov32 cb, $1f ; enum element: CLOSING_BRACE
3324   1976 00 00 
3325   1978 E7            pop d
3326   1979 FD 43         mov [d], b
3327   197B             ; toktype = DELIMITER;   
3328   197B 3B 8D 42      mov d, _toktype ; $toktype
3329   197E DA            push d
3330   197F FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3330   1983 00 00 
3331   1985 E7            pop d
3332   1986 FD 43         mov [d], b
3333   1988 0A 37 27      jmp _if65_exit
3334   198B             _if65_else:
3335   198B             ; if(*prog == '['){ 
3336   198B             _if66_cond:
3337   198B 3B 8F 42      mov d, _prog ; $prog
3338   198E 32            mov bl, [d]
3339   198F A7 00         mov bh, 0
3340   1991 38 00 00      mov c, 0
3341   1994 74            mov d, b
3342   1995 32            mov bl, [d]
3343   1996 A7 00         mov bh, 0
3344   1998 38 00 00      mov c, 0
3345   199B             ; --- START RELATIONAL
3346   199B D7            push a
3347   199C 11            mov a, b
3348   199D FD 2E 5B 00   mov32 cb, $0000005b
3348   19A1 00 00 
3349   19A3 B0            cmp a, b
3350   19A4 FD 71         seq ; ==
3351   19A6 E4            pop a
3352   19A7             ; --- END RELATIONAL
3353   19A7 C0 00 00      cmp b, 0
3354   19AA C6 F9 19      je _if66_else
3355   19AD             _if66_TRUE:
3356   19AD             ; *t++ = *prog++; 
3357   19AD FA 00 00      lea d, [bp + 0] ; $t
3358   19B0 32            mov bl, [d]
3359   19B1 A7 00         mov bh, 0
3360   19B3 38 00 00      mov c, 0
3361   19B6 FD 77         inc b
3362   19B8 FA 00 00      lea d, [bp + 0] ; $t
3363   19BB FD 3E         mov [d], bl
3364   19BD FD 7D         dec b
3365   19BF D8            push b
3366   19C0 3B 8F 42      mov d, _prog ; $prog
3367   19C3 32            mov bl, [d]
3368   19C4 A7 00         mov bh, 0
3369   19C6 38 00 00      mov c, 0
3370   19C9 FD 77         inc b
3371   19CB 3B 8F 42      mov d, _prog ; $prog
3372   19CE FD 3E         mov [d], bl
3373   19D0 FD 7D         dec b
3374   19D2 74            mov d, b
3375   19D3 32            mov bl, [d]
3376   19D4 A7 00         mov bh, 0
3377   19D6 38 00 00      mov c, 0
3378   19D9 E7            pop d
3379   19DA FD 3E         mov [d], bl
3380   19DC             ; tok = OPENING_BRACKET; 
3381   19DC 3B 8B 42      mov d, _tok ; $tok
3382   19DF DA            push d
3383   19E0 FD 2E 20 00   mov32 cb, $20 ; enum element: OPENING_BRACKET
3383   19E4 00 00 
3384   19E6 E7            pop d
3385   19E7 FD 43         mov [d], b
3386   19E9             ; toktype = DELIMITER;   
3387   19E9 3B 8D 42      mov d, _toktype ; $toktype
3388   19EC DA            push d
3389   19ED FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3389   19F1 00 00 
3390   19F3 E7            pop d
3391   19F4 FD 43         mov [d], b
3392   19F6 0A 37 27      jmp _if66_exit
3393   19F9             _if66_else:
3394   19F9             ; if(*prog == ']'){ 
3395   19F9             _if67_cond:
3396   19F9 3B 8F 42      mov d, _prog ; $prog
3397   19FC 32            mov bl, [d]
3398   19FD A7 00         mov bh, 0
3399   19FF 38 00 00      mov c, 0
3400   1A02 74            mov d, b
3401   1A03 32            mov bl, [d]
3402   1A04 A7 00         mov bh, 0
3403   1A06 38 00 00      mov c, 0
3404   1A09             ; --- START RELATIONAL
3405   1A09 D7            push a
3406   1A0A 11            mov a, b
3407   1A0B FD 2E 5D 00   mov32 cb, $0000005d
3407   1A0F 00 00 
3408   1A11 B0            cmp a, b
3409   1A12 FD 71         seq ; ==
3410   1A14 E4            pop a
3411   1A15             ; --- END RELATIONAL
3412   1A15 C0 00 00      cmp b, 0
3413   1A18 C6 67 1A      je _if67_else
3414   1A1B             _if67_TRUE:
3415   1A1B             ; *t++ = *prog++; 
3416   1A1B FA 00 00      lea d, [bp + 0] ; $t
3417   1A1E 32            mov bl, [d]
3418   1A1F A7 00         mov bh, 0
3419   1A21 38 00 00      mov c, 0
3420   1A24 FD 77         inc b
3421   1A26 FA 00 00      lea d, [bp + 0] ; $t
3422   1A29 FD 3E         mov [d], bl
3423   1A2B FD 7D         dec b
3424   1A2D D8            push b
3425   1A2E 3B 8F 42      mov d, _prog ; $prog
3426   1A31 32            mov bl, [d]
3427   1A32 A7 00         mov bh, 0
3428   1A34 38 00 00      mov c, 0
3429   1A37 FD 77         inc b
3430   1A39 3B 8F 42      mov d, _prog ; $prog
3431   1A3C FD 3E         mov [d], bl
3432   1A3E FD 7D         dec b
3433   1A40 74            mov d, b
3434   1A41 32            mov bl, [d]
3435   1A42 A7 00         mov bh, 0
3436   1A44 38 00 00      mov c, 0
3437   1A47 E7            pop d
3438   1A48 FD 3E         mov [d], bl
3439   1A4A             ; tok = CLOSING_BRACKET; 
3440   1A4A 3B 8B 42      mov d, _tok ; $tok
3441   1A4D DA            push d
3442   1A4E FD 2E 21 00   mov32 cb, $21 ; enum element: CLOSING_BRACKET
3442   1A52 00 00 
3443   1A54 E7            pop d
3444   1A55 FD 43         mov [d], b
3445   1A57             ; toktype = DELIMITER;   
3446   1A57 3B 8D 42      mov d, _toktype ; $toktype
3447   1A5A DA            push d
3448   1A5B FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3448   1A5F 00 00 
3449   1A61 E7            pop d
3450   1A62 FD 43         mov [d], b
3451   1A64 0A 37 27      jmp _if67_exit
3452   1A67             _if67_else:
3453   1A67             ; if(*prog == '='){ 
3454   1A67             _if68_cond:
3455   1A67 3B 8F 42      mov d, _prog ; $prog
3456   1A6A 32            mov bl, [d]
3457   1A6B A7 00         mov bh, 0
3458   1A6D 38 00 00      mov c, 0
3459   1A70 74            mov d, b
3460   1A71 32            mov bl, [d]
3461   1A72 A7 00         mov bh, 0
3462   1A74 38 00 00      mov c, 0
3463   1A77             ; --- START RELATIONAL
3464   1A77 D7            push a
3465   1A78 11            mov a, b
3466   1A79 FD 2E 3D 00   mov32 cb, $0000003d
3466   1A7D 00 00 
3467   1A7F B0            cmp a, b
3468   1A80 FD 71         seq ; ==
3469   1A82 E4            pop a
3470   1A83             ; --- END RELATIONAL
3471   1A83 C0 00 00      cmp b, 0
3472   1A86 C6 36 1B      je _if68_else
3473   1A89             _if68_TRUE:
3474   1A89             ; *t++ = *prog++; 
3475   1A89 FA 00 00      lea d, [bp + 0] ; $t
3476   1A8C 32            mov bl, [d]
3477   1A8D A7 00         mov bh, 0
3478   1A8F 38 00 00      mov c, 0
3479   1A92 FD 77         inc b
3480   1A94 FA 00 00      lea d, [bp + 0] ; $t
3481   1A97 FD 3E         mov [d], bl
3482   1A99 FD 7D         dec b
3483   1A9B D8            push b
3484   1A9C 3B 8F 42      mov d, _prog ; $prog
3485   1A9F 32            mov bl, [d]
3486   1AA0 A7 00         mov bh, 0
3487   1AA2 38 00 00      mov c, 0
3488   1AA5 FD 77         inc b
3489   1AA7 3B 8F 42      mov d, _prog ; $prog
3490   1AAA FD 3E         mov [d], bl
3491   1AAC FD 7D         dec b
3492   1AAE 74            mov d, b
3493   1AAF 32            mov bl, [d]
3494   1AB0 A7 00         mov bh, 0
3495   1AB2 38 00 00      mov c, 0
3496   1AB5 E7            pop d
3497   1AB6 FD 3E         mov [d], bl
3498   1AB8             ; if (*prog == '='){ 
3499   1AB8             _if69_cond:
3500   1AB8 3B 8F 42      mov d, _prog ; $prog
3501   1ABB 32            mov bl, [d]
3502   1ABC A7 00         mov bh, 0
3503   1ABE 38 00 00      mov c, 0
3504   1AC1 74            mov d, b
3505   1AC2 32            mov bl, [d]
3506   1AC3 A7 00         mov bh, 0
3507   1AC5 38 00 00      mov c, 0
3508   1AC8             ; --- START RELATIONAL
3509   1AC8 D7            push a
3510   1AC9 11            mov a, b
3511   1ACA FD 2E 3D 00   mov32 cb, $0000003d
3511   1ACE 00 00 
3512   1AD0 B0            cmp a, b
3513   1AD1 FD 71         seq ; ==
3514   1AD3 E4            pop a
3515   1AD4             ; --- END RELATIONAL
3516   1AD4 C0 00 00      cmp b, 0
3517   1AD7 C6 19 1B      je _if69_else
3518   1ADA             _if69_TRUE:
3519   1ADA             ; *t++ = *prog++; 
3520   1ADA FA 00 00      lea d, [bp + 0] ; $t
3521   1ADD 32            mov bl, [d]
3522   1ADE A7 00         mov bh, 0
3523   1AE0 38 00 00      mov c, 0
3524   1AE3 FD 77         inc b
3525   1AE5 FA 00 00      lea d, [bp + 0] ; $t
3526   1AE8 FD 3E         mov [d], bl
3527   1AEA FD 7D         dec b
3528   1AEC D8            push b
3529   1AED 3B 8F 42      mov d, _prog ; $prog
3530   1AF0 32            mov bl, [d]
3531   1AF1 A7 00         mov bh, 0
3532   1AF3 38 00 00      mov c, 0
3533   1AF6 FD 77         inc b
3534   1AF8 3B 8F 42      mov d, _prog ; $prog
3535   1AFB FD 3E         mov [d], bl
3536   1AFD FD 7D         dec b
3537   1AFF 74            mov d, b
3538   1B00 32            mov bl, [d]
3539   1B01 A7 00         mov bh, 0
3540   1B03 38 00 00      mov c, 0
3541   1B06 E7            pop d
3542   1B07 FD 3E         mov [d], bl
3543   1B09             ; tok = EQUAL; 
3544   1B09 3B 8B 42      mov d, _tok ; $tok
3545   1B0C DA            push d
3546   1B0D FD 2E 08 00   mov32 cb, $8 ; enum element: EQUAL
3546   1B11 00 00 
3547   1B13 E7            pop d
3548   1B14 FD 43         mov [d], b
3549   1B16 0A 26 1B      jmp _if69_exit
3550   1B19             _if69_else:
3551   1B19             ; tok = ASSIGNMENT; 
3552   1B19 3B 8B 42      mov d, _tok ; $tok
3553   1B1C DA            push d
3554   1B1D FD 2E 11 00   mov32 cb, $11 ; enum element: ASSIGNMENT
3554   1B21 00 00 
3555   1B23 E7            pop d
3556   1B24 FD 43         mov [d], b
3557   1B26             _if69_exit:
3558   1B26             ; toktype = DELIMITER;   
3559   1B26 3B 8D 42      mov d, _toktype ; $toktype
3560   1B29 DA            push d
3561   1B2A FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3561   1B2E 00 00 
3562   1B30 E7            pop d
3563   1B31 FD 43         mov [d], b
3564   1B33 0A 37 27      jmp _if68_exit
3565   1B36             _if68_else:
3566   1B36             ; if(*prog == '&'){ 
3567   1B36             _if70_cond:
3568   1B36 3B 8F 42      mov d, _prog ; $prog
3569   1B39 32            mov bl, [d]
3570   1B3A A7 00         mov bh, 0
3571   1B3C 38 00 00      mov c, 0
3572   1B3F 74            mov d, b
3573   1B40 32            mov bl, [d]
3574   1B41 A7 00         mov bh, 0
3575   1B43 38 00 00      mov c, 0
3576   1B46             ; --- START RELATIONAL
3577   1B46 D7            push a
3578   1B47 11            mov a, b
3579   1B48 FD 2E 26 00   mov32 cb, $00000026
3579   1B4C 00 00 
3580   1B4E B0            cmp a, b
3581   1B4F FD 71         seq ; ==
3582   1B51 E4            pop a
3583   1B52             ; --- END RELATIONAL
3584   1B52 C0 00 00      cmp b, 0
3585   1B55 C6 05 1C      je _if70_else
3586   1B58             _if70_TRUE:
3587   1B58             ; *t++ = *prog++; 
3588   1B58 FA 00 00      lea d, [bp + 0] ; $t
3589   1B5B 32            mov bl, [d]
3590   1B5C A7 00         mov bh, 0
3591   1B5E 38 00 00      mov c, 0
3592   1B61 FD 77         inc b
3593   1B63 FA 00 00      lea d, [bp + 0] ; $t
3594   1B66 FD 3E         mov [d], bl
3595   1B68 FD 7D         dec b
3596   1B6A D8            push b
3597   1B6B 3B 8F 42      mov d, _prog ; $prog
3598   1B6E 32            mov bl, [d]
3599   1B6F A7 00         mov bh, 0
3600   1B71 38 00 00      mov c, 0
3601   1B74 FD 77         inc b
3602   1B76 3B 8F 42      mov d, _prog ; $prog
3603   1B79 FD 3E         mov [d], bl
3604   1B7B FD 7D         dec b
3605   1B7D 74            mov d, b
3606   1B7E 32            mov bl, [d]
3607   1B7F A7 00         mov bh, 0
3608   1B81 38 00 00      mov c, 0
3609   1B84 E7            pop d
3610   1B85 FD 3E         mov [d], bl
3611   1B87             ; if(*prog == '&'){ 
3612   1B87             _if71_cond:
3613   1B87 3B 8F 42      mov d, _prog ; $prog
3614   1B8A 32            mov bl, [d]
3615   1B8B A7 00         mov bh, 0
3616   1B8D 38 00 00      mov c, 0
3617   1B90 74            mov d, b
3618   1B91 32            mov bl, [d]
3619   1B92 A7 00         mov bh, 0
3620   1B94 38 00 00      mov c, 0
3621   1B97             ; --- START RELATIONAL
3622   1B97 D7            push a
3623   1B98 11            mov a, b
3624   1B99 FD 2E 26 00   mov32 cb, $00000026
3624   1B9D 00 00 
3625   1B9F B0            cmp a, b
3626   1BA0 FD 71         seq ; ==
3627   1BA2 E4            pop a
3628   1BA3             ; --- END RELATIONAL
3629   1BA3 C0 00 00      cmp b, 0
3630   1BA6 C6 E8 1B      je _if71_else
3631   1BA9             _if71_TRUE:
3632   1BA9             ; *t++ = *prog++; 
3633   1BA9 FA 00 00      lea d, [bp + 0] ; $t
3634   1BAC 32            mov bl, [d]
3635   1BAD A7 00         mov bh, 0
3636   1BAF 38 00 00      mov c, 0
3637   1BB2 FD 77         inc b
3638   1BB4 FA 00 00      lea d, [bp + 0] ; $t
3639   1BB7 FD 3E         mov [d], bl
3640   1BB9 FD 7D         dec b
3641   1BBB D8            push b
3642   1BBC 3B 8F 42      mov d, _prog ; $prog
3643   1BBF 32            mov bl, [d]
3644   1BC0 A7 00         mov bh, 0
3645   1BC2 38 00 00      mov c, 0
3646   1BC5 FD 77         inc b
3647   1BC7 3B 8F 42      mov d, _prog ; $prog
3648   1BCA FD 3E         mov [d], bl
3649   1BCC FD 7D         dec b
3650   1BCE 74            mov d, b
3651   1BCF 32            mov bl, [d]
3652   1BD0 A7 00         mov bh, 0
3653   1BD2 38 00 00      mov c, 0
3654   1BD5 E7            pop d
3655   1BD6 FD 3E         mov [d], bl
3656   1BD8             ; tok = LOGICAL_AND; 
3657   1BD8 3B 8B 42      mov d, _tok ; $tok
3658   1BDB DA            push d
3659   1BDC FD 2E 0E 00   mov32 cb, $e ; enum element: LOGICAL_AND
3659   1BE0 00 00 
3660   1BE2 E7            pop d
3661   1BE3 FD 43         mov [d], b
3662   1BE5 0A F5 1B      jmp _if71_exit
3663   1BE8             _if71_else:
3664   1BE8             ; tok = AMPERSAND; 
3665   1BE8 3B 8B 42      mov d, _tok ; $tok
3666   1BEB DA            push d
3667   1BEC FD 2E 16 00   mov32 cb, $16 ; enum element: AMPERSAND
3667   1BF0 00 00 
3668   1BF2 E7            pop d
3669   1BF3 FD 43         mov [d], b
3670   1BF5             _if71_exit:
3671   1BF5             ; toktype = DELIMITER;   
3672   1BF5 3B 8D 42      mov d, _toktype ; $toktype
3673   1BF8 DA            push d
3674   1BF9 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3674   1BFD 00 00 
3675   1BFF E7            pop d
3676   1C00 FD 43         mov [d], b
3677   1C02 0A 37 27      jmp _if70_exit
3678   1C05             _if70_else:
3679   1C05             ; if(*prog == '|'){ 
3680   1C05             _if72_cond:
3681   1C05 3B 8F 42      mov d, _prog ; $prog
3682   1C08 32            mov bl, [d]
3683   1C09 A7 00         mov bh, 0
3684   1C0B 38 00 00      mov c, 0
3685   1C0E 74            mov d, b
3686   1C0F 32            mov bl, [d]
3687   1C10 A7 00         mov bh, 0
3688   1C12 38 00 00      mov c, 0
3689   1C15             ; --- START RELATIONAL
3690   1C15 D7            push a
3691   1C16 11            mov a, b
3692   1C17 FD 2E 7C 00   mov32 cb, $0000007c
3692   1C1B 00 00 
3693   1C1D B0            cmp a, b
3694   1C1E FD 71         seq ; ==
3695   1C20 E4            pop a
3696   1C21             ; --- END RELATIONAL
3697   1C21 C0 00 00      cmp b, 0
3698   1C24 C6 D4 1C      je _if72_else
3699   1C27             _if72_TRUE:
3700   1C27             ; *t++ = *prog++; 
3701   1C27 FA 00 00      lea d, [bp + 0] ; $t
3702   1C2A 32            mov bl, [d]
3703   1C2B A7 00         mov bh, 0
3704   1C2D 38 00 00      mov c, 0
3705   1C30 FD 77         inc b
3706   1C32 FA 00 00      lea d, [bp + 0] ; $t
3707   1C35 FD 3E         mov [d], bl
3708   1C37 FD 7D         dec b
3709   1C39 D8            push b
3710   1C3A 3B 8F 42      mov d, _prog ; $prog
3711   1C3D 32            mov bl, [d]
3712   1C3E A7 00         mov bh, 0
3713   1C40 38 00 00      mov c, 0
3714   1C43 FD 77         inc b
3715   1C45 3B 8F 42      mov d, _prog ; $prog
3716   1C48 FD 3E         mov [d], bl
3717   1C4A FD 7D         dec b
3718   1C4C 74            mov d, b
3719   1C4D 32            mov bl, [d]
3720   1C4E A7 00         mov bh, 0
3721   1C50 38 00 00      mov c, 0
3722   1C53 E7            pop d
3723   1C54 FD 3E         mov [d], bl
3724   1C56             ; if (*prog == '|'){ 
3725   1C56             _if73_cond:
3726   1C56 3B 8F 42      mov d, _prog ; $prog
3727   1C59 32            mov bl, [d]
3728   1C5A A7 00         mov bh, 0
3729   1C5C 38 00 00      mov c, 0
3730   1C5F 74            mov d, b
3731   1C60 32            mov bl, [d]
3732   1C61 A7 00         mov bh, 0
3733   1C63 38 00 00      mov c, 0
3734   1C66             ; --- START RELATIONAL
3735   1C66 D7            push a
3736   1C67 11            mov a, b
3737   1C68 FD 2E 7C 00   mov32 cb, $0000007c
3737   1C6C 00 00 
3738   1C6E B0            cmp a, b
3739   1C6F FD 71         seq ; ==
3740   1C71 E4            pop a
3741   1C72             ; --- END RELATIONAL
3742   1C72 C0 00 00      cmp b, 0
3743   1C75 C6 B7 1C      je _if73_else
3744   1C78             _if73_TRUE:
3745   1C78             ; *t++ = *prog++; 
3746   1C78 FA 00 00      lea d, [bp + 0] ; $t
3747   1C7B 32            mov bl, [d]
3748   1C7C A7 00         mov bh, 0
3749   1C7E 38 00 00      mov c, 0
3750   1C81 FD 77         inc b
3751   1C83 FA 00 00      lea d, [bp + 0] ; $t
3752   1C86 FD 3E         mov [d], bl
3753   1C88 FD 7D         dec b
3754   1C8A D8            push b
3755   1C8B 3B 8F 42      mov d, _prog ; $prog
3756   1C8E 32            mov bl, [d]
3757   1C8F A7 00         mov bh, 0
3758   1C91 38 00 00      mov c, 0
3759   1C94 FD 77         inc b
3760   1C96 3B 8F 42      mov d, _prog ; $prog
3761   1C99 FD 3E         mov [d], bl
3762   1C9B FD 7D         dec b
3763   1C9D 74            mov d, b
3764   1C9E 32            mov bl, [d]
3765   1C9F A7 00         mov bh, 0
3766   1CA1 38 00 00      mov c, 0
3767   1CA4 E7            pop d
3768   1CA5 FD 3E         mov [d], bl
3769   1CA7             ; tok = LOGICAL_OR; 
3770   1CA7 3B 8B 42      mov d, _tok ; $tok
3771   1CAA DA            push d
3772   1CAB FD 2E 0F 00   mov32 cb, $f ; enum element: LOGICAL_OR
3772   1CAF 00 00 
3773   1CB1 E7            pop d
3774   1CB2 FD 43         mov [d], b
3775   1CB4 0A C4 1C      jmp _if73_exit
3776   1CB7             _if73_else:
3777   1CB7             ; tok = BITWISE_OR; 
3778   1CB7 3B 8B 42      mov d, _tok ; $tok
3779   1CBA DA            push d
3780   1CBB FD 2E 18 00   mov32 cb, $18 ; enum element: BITWISE_OR
3780   1CBF 00 00 
3781   1CC1 E7            pop d
3782   1CC2 FD 43         mov [d], b
3783   1CC4             _if73_exit:
3784   1CC4             ; toktype = DELIMITER;   
3785   1CC4 3B 8D 42      mov d, _toktype ; $toktype
3786   1CC7 DA            push d
3787   1CC8 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3787   1CCC 00 00 
3788   1CCE E7            pop d
3789   1CCF FD 43         mov [d], b
3790   1CD1 0A 37 27      jmp _if72_exit
3791   1CD4             _if72_else:
3792   1CD4             ; if(*prog == '~'){ 
3793   1CD4             _if74_cond:
3794   1CD4 3B 8F 42      mov d, _prog ; $prog
3795   1CD7 32            mov bl, [d]
3796   1CD8 A7 00         mov bh, 0
3797   1CDA 38 00 00      mov c, 0
3798   1CDD 74            mov d, b
3799   1CDE 32            mov bl, [d]
3800   1CDF A7 00         mov bh, 0
3801   1CE1 38 00 00      mov c, 0
3802   1CE4             ; --- START RELATIONAL
3803   1CE4 D7            push a
3804   1CE5 11            mov a, b
3805   1CE6 FD 2E 7E 00   mov32 cb, $0000007e
3805   1CEA 00 00 
3806   1CEC B0            cmp a, b
3807   1CED FD 71         seq ; ==
3808   1CEF E4            pop a
3809   1CF0             ; --- END RELATIONAL
3810   1CF0 C0 00 00      cmp b, 0
3811   1CF3 C6 42 1D      je _if74_else
3812   1CF6             _if74_TRUE:
3813   1CF6             ; *t++ = *prog++; 
3814   1CF6 FA 00 00      lea d, [bp + 0] ; $t
3815   1CF9 32            mov bl, [d]
3816   1CFA A7 00         mov bh, 0
3817   1CFC 38 00 00      mov c, 0
3818   1CFF FD 77         inc b
3819   1D01 FA 00 00      lea d, [bp + 0] ; $t
3820   1D04 FD 3E         mov [d], bl
3821   1D06 FD 7D         dec b
3822   1D08 D8            push b
3823   1D09 3B 8F 42      mov d, _prog ; $prog
3824   1D0C 32            mov bl, [d]
3825   1D0D A7 00         mov bh, 0
3826   1D0F 38 00 00      mov c, 0
3827   1D12 FD 77         inc b
3828   1D14 3B 8F 42      mov d, _prog ; $prog
3829   1D17 FD 3E         mov [d], bl
3830   1D19 FD 7D         dec b
3831   1D1B 74            mov d, b
3832   1D1C 32            mov bl, [d]
3833   1D1D A7 00         mov bh, 0
3834   1D1F 38 00 00      mov c, 0
3835   1D22 E7            pop d
3836   1D23 FD 3E         mov [d], bl
3837   1D25             ; tok = BITWISE_NOT; 
3838   1D25 3B 8B 42      mov d, _tok ; $tok
3839   1D28 DA            push d
3840   1D29 FD 2E 19 00   mov32 cb, $19 ; enum element: BITWISE_NOT
3840   1D2D 00 00 
3841   1D2F E7            pop d
3842   1D30 FD 43         mov [d], b
3843   1D32             ; toktype = DELIMITER;   
3844   1D32 3B 8D 42      mov d, _toktype ; $toktype
3845   1D35 DA            push d
3846   1D36 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3846   1D3A 00 00 
3847   1D3C E7            pop d
3848   1D3D FD 43         mov [d], b
3849   1D3F 0A 37 27      jmp _if74_exit
3850   1D42             _if74_else:
3851   1D42             ; if(*prog == '<'){ 
3852   1D42             _if75_cond:
3853   1D42 3B 8F 42      mov d, _prog ; $prog
3854   1D45 32            mov bl, [d]
3855   1D46 A7 00         mov bh, 0
3856   1D48 38 00 00      mov c, 0
3857   1D4B 74            mov d, b
3858   1D4C 32            mov bl, [d]
3859   1D4D A7 00         mov bh, 0
3860   1D4F 38 00 00      mov c, 0
3861   1D52             ; --- START RELATIONAL
3862   1D52 D7            push a
3863   1D53 11            mov a, b
3864   1D54 FD 2E 3C 00   mov32 cb, $0000003c
3864   1D58 00 00 
3865   1D5A B0            cmp a, b
3866   1D5B FD 71         seq ; ==
3867   1D5D E4            pop a
3868   1D5E             ; --- END RELATIONAL
3869   1D5E C0 00 00      cmp b, 0
3870   1D61 C6 72 1E      je _if75_else
3871   1D64             _if75_TRUE:
3872   1D64             ; *t++ = *prog++; 
3873   1D64 FA 00 00      lea d, [bp + 0] ; $t
3874   1D67 32            mov bl, [d]
3875   1D68 A7 00         mov bh, 0
3876   1D6A 38 00 00      mov c, 0
3877   1D6D FD 77         inc b
3878   1D6F FA 00 00      lea d, [bp + 0] ; $t
3879   1D72 FD 3E         mov [d], bl
3880   1D74 FD 7D         dec b
3881   1D76 D8            push b
3882   1D77 3B 8F 42      mov d, _prog ; $prog
3883   1D7A 32            mov bl, [d]
3884   1D7B A7 00         mov bh, 0
3885   1D7D 38 00 00      mov c, 0
3886   1D80 FD 77         inc b
3887   1D82 3B 8F 42      mov d, _prog ; $prog
3888   1D85 FD 3E         mov [d], bl
3889   1D87 FD 7D         dec b
3890   1D89 74            mov d, b
3891   1D8A 32            mov bl, [d]
3892   1D8B A7 00         mov bh, 0
3893   1D8D 38 00 00      mov c, 0
3894   1D90 E7            pop d
3895   1D91 FD 3E         mov [d], bl
3896   1D93             ; if (*prog == '='){ 
3897   1D93             _if76_cond:
3898   1D93 3B 8F 42      mov d, _prog ; $prog
3899   1D96 32            mov bl, [d]
3900   1D97 A7 00         mov bh, 0
3901   1D99 38 00 00      mov c, 0
3902   1D9C 74            mov d, b
3903   1D9D 32            mov bl, [d]
3904   1D9E A7 00         mov bh, 0
3905   1DA0 38 00 00      mov c, 0
3906   1DA3             ; --- START RELATIONAL
3907   1DA3 D7            push a
3908   1DA4 11            mov a, b
3909   1DA5 FD 2E 3D 00   mov32 cb, $0000003d
3909   1DA9 00 00 
3910   1DAB B0            cmp a, b
3911   1DAC FD 71         seq ; ==
3912   1DAE E4            pop a
3913   1DAF             ; --- END RELATIONAL
3914   1DAF C0 00 00      cmp b, 0
3915   1DB2 C6 F4 1D      je _if76_else
3916   1DB5             _if76_TRUE:
3917   1DB5             ; *t++ = *prog++; 
3918   1DB5 FA 00 00      lea d, [bp + 0] ; $t
3919   1DB8 32            mov bl, [d]
3920   1DB9 A7 00         mov bh, 0
3921   1DBB 38 00 00      mov c, 0
3922   1DBE FD 77         inc b
3923   1DC0 FA 00 00      lea d, [bp + 0] ; $t
3924   1DC3 FD 3E         mov [d], bl
3925   1DC5 FD 7D         dec b
3926   1DC7 D8            push b
3927   1DC8 3B 8F 42      mov d, _prog ; $prog
3928   1DCB 32            mov bl, [d]
3929   1DCC A7 00         mov bh, 0
3930   1DCE 38 00 00      mov c, 0
3931   1DD1 FD 77         inc b
3932   1DD3 3B 8F 42      mov d, _prog ; $prog
3933   1DD6 FD 3E         mov [d], bl
3934   1DD8 FD 7D         dec b
3935   1DDA 74            mov d, b
3936   1DDB 32            mov bl, [d]
3937   1DDC A7 00         mov bh, 0
3938   1DDE 38 00 00      mov c, 0
3939   1DE1 E7            pop d
3940   1DE2 FD 3E         mov [d], bl
3941   1DE4             ; tok = LESS_THAN_OR_EQUAL; 
3942   1DE4 3B 8B 42      mov d, _tok ; $tok
3943   1DE7 DA            push d
3944   1DE8 FD 2E 0B 00   mov32 cb, $b ; enum element: LESS_THAN_OR_EQUAL
3944   1DEC 00 00 
3945   1DEE E7            pop d
3946   1DEF FD 43         mov [d], b
3947   1DF1 0A 62 1E      jmp _if76_exit
3948   1DF4             _if76_else:
3949   1DF4             ; if (*prog == '<'){ 
3950   1DF4             _if77_cond:
3951   1DF4 3B 8F 42      mov d, _prog ; $prog
3952   1DF7 32            mov bl, [d]
3953   1DF8 A7 00         mov bh, 0
3954   1DFA 38 00 00      mov c, 0
3955   1DFD 74            mov d, b
3956   1DFE 32            mov bl, [d]
3957   1DFF A7 00         mov bh, 0
3958   1E01 38 00 00      mov c, 0
3959   1E04             ; --- START RELATIONAL
3960   1E04 D7            push a
3961   1E05 11            mov a, b
3962   1E06 FD 2E 3C 00   mov32 cb, $0000003c
3962   1E0A 00 00 
3963   1E0C B0            cmp a, b
3964   1E0D FD 71         seq ; ==
3965   1E0F E4            pop a
3966   1E10             ; --- END RELATIONAL
3967   1E10 C0 00 00      cmp b, 0
3968   1E13 C6 55 1E      je _if77_else
3969   1E16             _if77_TRUE:
3970   1E16             ; *t++ = *prog++; 
3971   1E16 FA 00 00      lea d, [bp + 0] ; $t
3972   1E19 32            mov bl, [d]
3973   1E1A A7 00         mov bh, 0
3974   1E1C 38 00 00      mov c, 0
3975   1E1F FD 77         inc b
3976   1E21 FA 00 00      lea d, [bp + 0] ; $t
3977   1E24 FD 3E         mov [d], bl
3978   1E26 FD 7D         dec b
3979   1E28 D8            push b
3980   1E29 3B 8F 42      mov d, _prog ; $prog
3981   1E2C 32            mov bl, [d]
3982   1E2D A7 00         mov bh, 0
3983   1E2F 38 00 00      mov c, 0
3984   1E32 FD 77         inc b
3985   1E34 3B 8F 42      mov d, _prog ; $prog
3986   1E37 FD 3E         mov [d], bl
3987   1E39 FD 7D         dec b
3988   1E3B 74            mov d, b
3989   1E3C 32            mov bl, [d]
3990   1E3D A7 00         mov bh, 0
3991   1E3F 38 00 00      mov c, 0
3992   1E42 E7            pop d
3993   1E43 FD 3E         mov [d], bl
3994   1E45             ; tok = BITWISE_SHL; 
3995   1E45 3B 8B 42      mov d, _tok ; $tok
3996   1E48 DA            push d
3997   1E49 FD 2E 1A 00   mov32 cb, $1a ; enum element: BITWISE_SHL
3997   1E4D 00 00 
3998   1E4F E7            pop d
3999   1E50 FD 43         mov [d], b
4000   1E52 0A 62 1E      jmp _if77_exit
4001   1E55             _if77_else:
4002   1E55             ; tok = LESS_THAN; 
4003   1E55 3B 8B 42      mov d, _tok ; $tok
4004   1E58 DA            push d
4005   1E59 FD 2E 0A 00   mov32 cb, $a ; enum element: LESS_THAN
4005   1E5D 00 00 
4006   1E5F E7            pop d
4007   1E60 FD 43         mov [d], b
4008   1E62             _if77_exit:
4009   1E62             _if76_exit:
4010   1E62             ; toktype = DELIMITER;   
4011   1E62 3B 8D 42      mov d, _toktype ; $toktype
4012   1E65 DA            push d
4013   1E66 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4013   1E6A 00 00 
4014   1E6C E7            pop d
4015   1E6D FD 43         mov [d], b
4016   1E6F 0A 37 27      jmp _if75_exit
4017   1E72             _if75_else:
4018   1E72             ; if(*prog == '>'){ 
4019   1E72             _if78_cond:
4020   1E72 3B 8F 42      mov d, _prog ; $prog
4021   1E75 32            mov bl, [d]
4022   1E76 A7 00         mov bh, 0
4023   1E78 38 00 00      mov c, 0
4024   1E7B 74            mov d, b
4025   1E7C 32            mov bl, [d]
4026   1E7D A7 00         mov bh, 0
4027   1E7F 38 00 00      mov c, 0
4028   1E82             ; --- START RELATIONAL
4029   1E82 D7            push a
4030   1E83 11            mov a, b
4031   1E84 FD 2E 3E 00   mov32 cb, $0000003e
4031   1E88 00 00 
4032   1E8A B0            cmp a, b
4033   1E8B FD 71         seq ; ==
4034   1E8D E4            pop a
4035   1E8E             ; --- END RELATIONAL
4036   1E8E C0 00 00      cmp b, 0
4037   1E91 C6 A2 1F      je _if78_else
4038   1E94             _if78_TRUE:
4039   1E94             ; *t++ = *prog++; 
4040   1E94 FA 00 00      lea d, [bp + 0] ; $t
4041   1E97 32            mov bl, [d]
4042   1E98 A7 00         mov bh, 0
4043   1E9A 38 00 00      mov c, 0
4044   1E9D FD 77         inc b
4045   1E9F FA 00 00      lea d, [bp + 0] ; $t
4046   1EA2 FD 3E         mov [d], bl
4047   1EA4 FD 7D         dec b
4048   1EA6 D8            push b
4049   1EA7 3B 8F 42      mov d, _prog ; $prog
4050   1EAA 32            mov bl, [d]
4051   1EAB A7 00         mov bh, 0
4052   1EAD 38 00 00      mov c, 0
4053   1EB0 FD 77         inc b
4054   1EB2 3B 8F 42      mov d, _prog ; $prog
4055   1EB5 FD 3E         mov [d], bl
4056   1EB7 FD 7D         dec b
4057   1EB9 74            mov d, b
4058   1EBA 32            mov bl, [d]
4059   1EBB A7 00         mov bh, 0
4060   1EBD 38 00 00      mov c, 0
4061   1EC0 E7            pop d
4062   1EC1 FD 3E         mov [d], bl
4063   1EC3             ; if (*prog == '='){ 
4064   1EC3             _if79_cond:
4065   1EC3 3B 8F 42      mov d, _prog ; $prog
4066   1EC6 32            mov bl, [d]
4067   1EC7 A7 00         mov bh, 0
4068   1EC9 38 00 00      mov c, 0
4069   1ECC 74            mov d, b
4070   1ECD 32            mov bl, [d]
4071   1ECE A7 00         mov bh, 0
4072   1ED0 38 00 00      mov c, 0
4073   1ED3             ; --- START RELATIONAL
4074   1ED3 D7            push a
4075   1ED4 11            mov a, b
4076   1ED5 FD 2E 3D 00   mov32 cb, $0000003d
4076   1ED9 00 00 
4077   1EDB B0            cmp a, b
4078   1EDC FD 71         seq ; ==
4079   1EDE E4            pop a
4080   1EDF             ; --- END RELATIONAL
4081   1EDF C0 00 00      cmp b, 0
4082   1EE2 C6 24 1F      je _if79_else
4083   1EE5             _if79_TRUE:
4084   1EE5             ; *t++ = *prog++; 
4085   1EE5 FA 00 00      lea d, [bp + 0] ; $t
4086   1EE8 32            mov bl, [d]
4087   1EE9 A7 00         mov bh, 0
4088   1EEB 38 00 00      mov c, 0
4089   1EEE FD 77         inc b
4090   1EF0 FA 00 00      lea d, [bp + 0] ; $t
4091   1EF3 FD 3E         mov [d], bl
4092   1EF5 FD 7D         dec b
4093   1EF7 D8            push b
4094   1EF8 3B 8F 42      mov d, _prog ; $prog
4095   1EFB 32            mov bl, [d]
4096   1EFC A7 00         mov bh, 0
4097   1EFE 38 00 00      mov c, 0
4098   1F01 FD 77         inc b
4099   1F03 3B 8F 42      mov d, _prog ; $prog
4100   1F06 FD 3E         mov [d], bl
4101   1F08 FD 7D         dec b
4102   1F0A 74            mov d, b
4103   1F0B 32            mov bl, [d]
4104   1F0C A7 00         mov bh, 0
4105   1F0E 38 00 00      mov c, 0
4106   1F11 E7            pop d
4107   1F12 FD 3E         mov [d], bl
4108   1F14             ; tok = GREATER_THAN_OR_EQUAL; 
4109   1F14 3B 8B 42      mov d, _tok ; $tok
4110   1F17 DA            push d
4111   1F18 FD 2E 0D 00   mov32 cb, $d ; enum element: GREATER_THAN_OR_EQUAL
4111   1F1C 00 00 
4112   1F1E E7            pop d
4113   1F1F FD 43         mov [d], b
4114   1F21 0A 92 1F      jmp _if79_exit
4115   1F24             _if79_else:
4116   1F24             ; if (*prog == '>'){ 
4117   1F24             _if80_cond:
4118   1F24 3B 8F 42      mov d, _prog ; $prog
4119   1F27 32            mov bl, [d]
4120   1F28 A7 00         mov bh, 0
4121   1F2A 38 00 00      mov c, 0
4122   1F2D 74            mov d, b
4123   1F2E 32            mov bl, [d]
4124   1F2F A7 00         mov bh, 0
4125   1F31 38 00 00      mov c, 0
4126   1F34             ; --- START RELATIONAL
4127   1F34 D7            push a
4128   1F35 11            mov a, b
4129   1F36 FD 2E 3E 00   mov32 cb, $0000003e
4129   1F3A 00 00 
4130   1F3C B0            cmp a, b
4131   1F3D FD 71         seq ; ==
4132   1F3F E4            pop a
4133   1F40             ; --- END RELATIONAL
4134   1F40 C0 00 00      cmp b, 0
4135   1F43 C6 85 1F      je _if80_else
4136   1F46             _if80_TRUE:
4137   1F46             ; *t++ = *prog++; 
4138   1F46 FA 00 00      lea d, [bp + 0] ; $t
4139   1F49 32            mov bl, [d]
4140   1F4A A7 00         mov bh, 0
4141   1F4C 38 00 00      mov c, 0
4142   1F4F FD 77         inc b
4143   1F51 FA 00 00      lea d, [bp + 0] ; $t
4144   1F54 FD 3E         mov [d], bl
4145   1F56 FD 7D         dec b
4146   1F58 D8            push b
4147   1F59 3B 8F 42      mov d, _prog ; $prog
4148   1F5C 32            mov bl, [d]
4149   1F5D A7 00         mov bh, 0
4150   1F5F 38 00 00      mov c, 0
4151   1F62 FD 77         inc b
4152   1F64 3B 8F 42      mov d, _prog ; $prog
4153   1F67 FD 3E         mov [d], bl
4154   1F69 FD 7D         dec b
4155   1F6B 74            mov d, b
4156   1F6C 32            mov bl, [d]
4157   1F6D A7 00         mov bh, 0
4158   1F6F 38 00 00      mov c, 0
4159   1F72 E7            pop d
4160   1F73 FD 3E         mov [d], bl
4161   1F75             ; tok = BITWISE_SHR; 
4162   1F75 3B 8B 42      mov d, _tok ; $tok
4163   1F78 DA            push d
4164   1F79 FD 2E 1B 00   mov32 cb, $1b ; enum element: BITWISE_SHR
4164   1F7D 00 00 
4165   1F7F E7            pop d
4166   1F80 FD 43         mov [d], b
4167   1F82 0A 92 1F      jmp _if80_exit
4168   1F85             _if80_else:
4169   1F85             ; tok = GREATER_THAN; 
4170   1F85 3B 8B 42      mov d, _tok ; $tok
4171   1F88 DA            push d
4172   1F89 FD 2E 0C 00   mov32 cb, $c ; enum element: GREATER_THAN
4172   1F8D 00 00 
4173   1F8F E7            pop d
4174   1F90 FD 43         mov [d], b
4175   1F92             _if80_exit:
4176   1F92             _if79_exit:
4177   1F92             ; toktype = DELIMITER;   
4178   1F92 3B 8D 42      mov d, _toktype ; $toktype
4179   1F95 DA            push d
4180   1F96 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4180   1F9A 00 00 
4181   1F9C E7            pop d
4182   1F9D FD 43         mov [d], b
4183   1F9F 0A 37 27      jmp _if78_exit
4184   1FA2             _if78_else:
4185   1FA2             ; if(*prog == '!'){ 
4186   1FA2             _if81_cond:
4187   1FA2 3B 8F 42      mov d, _prog ; $prog
4188   1FA5 32            mov bl, [d]
4189   1FA6 A7 00         mov bh, 0
4190   1FA8 38 00 00      mov c, 0
4191   1FAB 74            mov d, b
4192   1FAC 32            mov bl, [d]
4193   1FAD A7 00         mov bh, 0
4194   1FAF 38 00 00      mov c, 0
4195   1FB2             ; --- START RELATIONAL
4196   1FB2 D7            push a
4197   1FB3 11            mov a, b
4198   1FB4 FD 2E 21 00   mov32 cb, $00000021
4198   1FB8 00 00 
4199   1FBA B0            cmp a, b
4200   1FBB FD 71         seq ; ==
4201   1FBD E4            pop a
4202   1FBE             ; --- END RELATIONAL
4203   1FBE C0 00 00      cmp b, 0
4204   1FC1 C6 71 20      je _if81_else
4205   1FC4             _if81_TRUE:
4206   1FC4             ; *t++ = *prog++; 
4207   1FC4 FA 00 00      lea d, [bp + 0] ; $t
4208   1FC7 32            mov bl, [d]
4209   1FC8 A7 00         mov bh, 0
4210   1FCA 38 00 00      mov c, 0
4211   1FCD FD 77         inc b
4212   1FCF FA 00 00      lea d, [bp + 0] ; $t
4213   1FD2 FD 3E         mov [d], bl
4214   1FD4 FD 7D         dec b
4215   1FD6 D8            push b
4216   1FD7 3B 8F 42      mov d, _prog ; $prog
4217   1FDA 32            mov bl, [d]
4218   1FDB A7 00         mov bh, 0
4219   1FDD 38 00 00      mov c, 0
4220   1FE0 FD 77         inc b
4221   1FE2 3B 8F 42      mov d, _prog ; $prog
4222   1FE5 FD 3E         mov [d], bl
4223   1FE7 FD 7D         dec b
4224   1FE9 74            mov d, b
4225   1FEA 32            mov bl, [d]
4226   1FEB A7 00         mov bh, 0
4227   1FED 38 00 00      mov c, 0
4228   1FF0 E7            pop d
4229   1FF1 FD 3E         mov [d], bl
4230   1FF3             ; if(*prog == '='){ 
4231   1FF3             _if82_cond:
4232   1FF3 3B 8F 42      mov d, _prog ; $prog
4233   1FF6 32            mov bl, [d]
4234   1FF7 A7 00         mov bh, 0
4235   1FF9 38 00 00      mov c, 0
4236   1FFC 74            mov d, b
4237   1FFD 32            mov bl, [d]
4238   1FFE A7 00         mov bh, 0
4239   2000 38 00 00      mov c, 0
4240   2003             ; --- START RELATIONAL
4241   2003 D7            push a
4242   2004 11            mov a, b
4243   2005 FD 2E 3D 00   mov32 cb, $0000003d
4243   2009 00 00 
4244   200B B0            cmp a, b
4245   200C FD 71         seq ; ==
4246   200E E4            pop a
4247   200F             ; --- END RELATIONAL
4248   200F C0 00 00      cmp b, 0
4249   2012 C6 54 20      je _if82_else
4250   2015             _if82_TRUE:
4251   2015             ; *t++ = *prog++; 
4252   2015 FA 00 00      lea d, [bp + 0] ; $t
4253   2018 32            mov bl, [d]
4254   2019 A7 00         mov bh, 0
4255   201B 38 00 00      mov c, 0
4256   201E FD 77         inc b
4257   2020 FA 00 00      lea d, [bp + 0] ; $t
4258   2023 FD 3E         mov [d], bl
4259   2025 FD 7D         dec b
4260   2027 D8            push b
4261   2028 3B 8F 42      mov d, _prog ; $prog
4262   202B 32            mov bl, [d]
4263   202C A7 00         mov bh, 0
4264   202E 38 00 00      mov c, 0
4265   2031 FD 77         inc b
4266   2033 3B 8F 42      mov d, _prog ; $prog
4267   2036 FD 3E         mov [d], bl
4268   2038 FD 7D         dec b
4269   203A 74            mov d, b
4270   203B 32            mov bl, [d]
4271   203C A7 00         mov bh, 0
4272   203E 38 00 00      mov c, 0
4273   2041 E7            pop d
4274   2042 FD 3E         mov [d], bl
4275   2044             ; tok = NOT_EQUAL; 
4276   2044 3B 8B 42      mov d, _tok ; $tok
4277   2047 DA            push d
4278   2048 FD 2E 09 00   mov32 cb, $9 ; enum element: NOT_EQUAL
4278   204C 00 00 
4279   204E E7            pop d
4280   204F FD 43         mov [d], b
4281   2051 0A 61 20      jmp _if82_exit
4282   2054             _if82_else:
4283   2054             ; tok = LOGICAL_NOT; 
4284   2054 3B 8B 42      mov d, _tok ; $tok
4285   2057 DA            push d
4286   2058 FD 2E 10 00   mov32 cb, $10 ; enum element: LOGICAL_NOT
4286   205C 00 00 
4287   205E E7            pop d
4288   205F FD 43         mov [d], b
4289   2061             _if82_exit:
4290   2061             ; toktype = DELIMITER;   
4291   2061 3B 8D 42      mov d, _toktype ; $toktype
4292   2064 DA            push d
4293   2065 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4293   2069 00 00 
4294   206B E7            pop d
4295   206C FD 43         mov [d], b
4296   206E 0A 37 27      jmp _if81_exit
4297   2071             _if81_else:
4298   2071             ; if(*prog == '+'){ 
4299   2071             _if83_cond:
4300   2071 3B 8F 42      mov d, _prog ; $prog
4301   2074 32            mov bl, [d]
4302   2075 A7 00         mov bh, 0
4303   2077 38 00 00      mov c, 0
4304   207A 74            mov d, b
4305   207B 32            mov bl, [d]
4306   207C A7 00         mov bh, 0
4307   207E 38 00 00      mov c, 0
4308   2081             ; --- START RELATIONAL
4309   2081 D7            push a
4310   2082 11            mov a, b
4311   2083 FD 2E 2B 00   mov32 cb, $0000002b
4311   2087 00 00 
4312   2089 B0            cmp a, b
4313   208A FD 71         seq ; ==
4314   208C E4            pop a
4315   208D             ; --- END RELATIONAL
4316   208D C0 00 00      cmp b, 0
4317   2090 C6 40 21      je _if83_else
4318   2093             _if83_TRUE:
4319   2093             ; *t++ = *prog++; 
4320   2093 FA 00 00      lea d, [bp + 0] ; $t
4321   2096 32            mov bl, [d]
4322   2097 A7 00         mov bh, 0
4323   2099 38 00 00      mov c, 0
4324   209C FD 77         inc b
4325   209E FA 00 00      lea d, [bp + 0] ; $t
4326   20A1 FD 3E         mov [d], bl
4327   20A3 FD 7D         dec b
4328   20A5 D8            push b
4329   20A6 3B 8F 42      mov d, _prog ; $prog
4330   20A9 32            mov bl, [d]
4331   20AA A7 00         mov bh, 0
4332   20AC 38 00 00      mov c, 0
4333   20AF FD 77         inc b
4334   20B1 3B 8F 42      mov d, _prog ; $prog
4335   20B4 FD 3E         mov [d], bl
4336   20B6 FD 7D         dec b
4337   20B8 74            mov d, b
4338   20B9 32            mov bl, [d]
4339   20BA A7 00         mov bh, 0
4340   20BC 38 00 00      mov c, 0
4341   20BF E7            pop d
4342   20C0 FD 3E         mov [d], bl
4343   20C2             ; if(*prog == '+'){ 
4344   20C2             _if84_cond:
4345   20C2 3B 8F 42      mov d, _prog ; $prog
4346   20C5 32            mov bl, [d]
4347   20C6 A7 00         mov bh, 0
4348   20C8 38 00 00      mov c, 0
4349   20CB 74            mov d, b
4350   20CC 32            mov bl, [d]
4351   20CD A7 00         mov bh, 0
4352   20CF 38 00 00      mov c, 0
4353   20D2             ; --- START RELATIONAL
4354   20D2 D7            push a
4355   20D3 11            mov a, b
4356   20D4 FD 2E 2B 00   mov32 cb, $0000002b
4356   20D8 00 00 
4357   20DA B0            cmp a, b
4358   20DB FD 71         seq ; ==
4359   20DD E4            pop a
4360   20DE             ; --- END RELATIONAL
4361   20DE C0 00 00      cmp b, 0
4362   20E1 C6 23 21      je _if84_else
4363   20E4             _if84_TRUE:
4364   20E4             ; *t++ = *prog++; 
4365   20E4 FA 00 00      lea d, [bp + 0] ; $t
4366   20E7 32            mov bl, [d]
4367   20E8 A7 00         mov bh, 0
4368   20EA 38 00 00      mov c, 0
4369   20ED FD 77         inc b
4370   20EF FA 00 00      lea d, [bp + 0] ; $t
4371   20F2 FD 3E         mov [d], bl
4372   20F4 FD 7D         dec b
4373   20F6 D8            push b
4374   20F7 3B 8F 42      mov d, _prog ; $prog
4375   20FA 32            mov bl, [d]
4376   20FB A7 00         mov bh, 0
4377   20FD 38 00 00      mov c, 0
4378   2100 FD 77         inc b
4379   2102 3B 8F 42      mov d, _prog ; $prog
4380   2105 FD 3E         mov [d], bl
4381   2107 FD 7D         dec b
4382   2109 74            mov d, b
4383   210A 32            mov bl, [d]
4384   210B A7 00         mov bh, 0
4385   210D 38 00 00      mov c, 0
4386   2110 E7            pop d
4387   2111 FD 3E         mov [d], bl
4388   2113             ; tok = INCREMENT; 
4389   2113 3B 8B 42      mov d, _tok ; $tok
4390   2116 DA            push d
4391   2117 FD 2E 05 00   mov32 cb, $5 ; enum element: INCREMENT
4391   211B 00 00 
4392   211D E7            pop d
4393   211E FD 43         mov [d], b
4394   2120 0A 30 21      jmp _if84_exit
4395   2123             _if84_else:
4396   2123             ; tok = PLUS; 
4397   2123 3B 8B 42      mov d, _tok ; $tok
4398   2126 DA            push d
4399   2127 FD 2E 01 00   mov32 cb, $1 ; enum element: PLUS
4399   212B 00 00 
4400   212D E7            pop d
4401   212E FD 43         mov [d], b
4402   2130             _if84_exit:
4403   2130             ; toktype = DELIMITER;   
4404   2130 3B 8D 42      mov d, _toktype ; $toktype
4405   2133 DA            push d
4406   2134 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4406   2138 00 00 
4407   213A E7            pop d
4408   213B FD 43         mov [d], b
4409   213D 0A 37 27      jmp _if83_exit
4410   2140             _if83_else:
4411   2140             ; if(*prog == '-'){ 
4412   2140             _if85_cond:
4413   2140 3B 8F 42      mov d, _prog ; $prog
4414   2143 32            mov bl, [d]
4415   2144 A7 00         mov bh, 0
4416   2146 38 00 00      mov c, 0
4417   2149 74            mov d, b
4418   214A 32            mov bl, [d]
4419   214B A7 00         mov bh, 0
4420   214D 38 00 00      mov c, 0
4421   2150             ; --- START RELATIONAL
4422   2150 D7            push a
4423   2151 11            mov a, b
4424   2152 FD 2E 2D 00   mov32 cb, $0000002d
4424   2156 00 00 
4425   2158 B0            cmp a, b
4426   2159 FD 71         seq ; ==
4427   215B E4            pop a
4428   215C             ; --- END RELATIONAL
4429   215C C0 00 00      cmp b, 0
4430   215F C6 0F 22      je _if85_else
4431   2162             _if85_TRUE:
4432   2162             ; *t++ = *prog++; 
4433   2162 FA 00 00      lea d, [bp + 0] ; $t
4434   2165 32            mov bl, [d]
4435   2166 A7 00         mov bh, 0
4436   2168 38 00 00      mov c, 0
4437   216B FD 77         inc b
4438   216D FA 00 00      lea d, [bp + 0] ; $t
4439   2170 FD 3E         mov [d], bl
4440   2172 FD 7D         dec b
4441   2174 D8            push b
4442   2175 3B 8F 42      mov d, _prog ; $prog
4443   2178 32            mov bl, [d]
4444   2179 A7 00         mov bh, 0
4445   217B 38 00 00      mov c, 0
4446   217E FD 77         inc b
4447   2180 3B 8F 42      mov d, _prog ; $prog
4448   2183 FD 3E         mov [d], bl
4449   2185 FD 7D         dec b
4450   2187 74            mov d, b
4451   2188 32            mov bl, [d]
4452   2189 A7 00         mov bh, 0
4453   218B 38 00 00      mov c, 0
4454   218E E7            pop d
4455   218F FD 3E         mov [d], bl
4456   2191             ; if(*prog == '-'){ 
4457   2191             _if86_cond:
4458   2191 3B 8F 42      mov d, _prog ; $prog
4459   2194 32            mov bl, [d]
4460   2195 A7 00         mov bh, 0
4461   2197 38 00 00      mov c, 0
4462   219A 74            mov d, b
4463   219B 32            mov bl, [d]
4464   219C A7 00         mov bh, 0
4465   219E 38 00 00      mov c, 0
4466   21A1             ; --- START RELATIONAL
4467   21A1 D7            push a
4468   21A2 11            mov a, b
4469   21A3 FD 2E 2D 00   mov32 cb, $0000002d
4469   21A7 00 00 
4470   21A9 B0            cmp a, b
4471   21AA FD 71         seq ; ==
4472   21AC E4            pop a
4473   21AD             ; --- END RELATIONAL
4474   21AD C0 00 00      cmp b, 0
4475   21B0 C6 F2 21      je _if86_else
4476   21B3             _if86_TRUE:
4477   21B3             ; *t++ = *prog++; 
4478   21B3 FA 00 00      lea d, [bp + 0] ; $t
4479   21B6 32            mov bl, [d]
4480   21B7 A7 00         mov bh, 0
4481   21B9 38 00 00      mov c, 0
4482   21BC FD 77         inc b
4483   21BE FA 00 00      lea d, [bp + 0] ; $t
4484   21C1 FD 3E         mov [d], bl
4485   21C3 FD 7D         dec b
4486   21C5 D8            push b
4487   21C6 3B 8F 42      mov d, _prog ; $prog
4488   21C9 32            mov bl, [d]
4489   21CA A7 00         mov bh, 0
4490   21CC 38 00 00      mov c, 0
4491   21CF FD 77         inc b
4492   21D1 3B 8F 42      mov d, _prog ; $prog
4493   21D4 FD 3E         mov [d], bl
4494   21D6 FD 7D         dec b
4495   21D8 74            mov d, b
4496   21D9 32            mov bl, [d]
4497   21DA A7 00         mov bh, 0
4498   21DC 38 00 00      mov c, 0
4499   21DF E7            pop d
4500   21E0 FD 3E         mov [d], bl
4501   21E2             ; tok = DECREMENT; 
4502   21E2 3B 8B 42      mov d, _tok ; $tok
4503   21E5 DA            push d
4504   21E6 FD 2E 06 00   mov32 cb, $6 ; enum element: DECREMENT
4504   21EA 00 00 
4505   21EC E7            pop d
4506   21ED FD 43         mov [d], b
4507   21EF 0A FF 21      jmp _if86_exit
4508   21F2             _if86_else:
4509   21F2             ; tok = MINUS; 
4510   21F2 3B 8B 42      mov d, _tok ; $tok
4511   21F5 DA            push d
4512   21F6 FD 2E 02 00   mov32 cb, $2 ; enum element: MINUS
4512   21FA 00 00 
4513   21FC E7            pop d
4514   21FD FD 43         mov [d], b
4515   21FF             _if86_exit:
4516   21FF             ; toktype = DELIMITER;   
4517   21FF 3B 8D 42      mov d, _toktype ; $toktype
4518   2202 DA            push d
4519   2203 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4519   2207 00 00 
4520   2209 E7            pop d
4521   220A FD 43         mov [d], b
4522   220C 0A 37 27      jmp _if85_exit
4523   220F             _if85_else:
4524   220F             ; if(*prog == '$'){ 
4525   220F             _if87_cond:
4526   220F 3B 8F 42      mov d, _prog ; $prog
4527   2212 32            mov bl, [d]
4528   2213 A7 00         mov bh, 0
4529   2215 38 00 00      mov c, 0
4530   2218 74            mov d, b
4531   2219 32            mov bl, [d]
4532   221A A7 00         mov bh, 0
4533   221C 38 00 00      mov c, 0
4534   221F             ; --- START RELATIONAL
4535   221F D7            push a
4536   2220 11            mov a, b
4537   2221 FD 2E 24 00   mov32 cb, $00000024
4537   2225 00 00 
4538   2227 B0            cmp a, b
4539   2228 FD 71         seq ; ==
4540   222A E4            pop a
4541   222B             ; --- END RELATIONAL
4542   222B C0 00 00      cmp b, 0
4543   222E C6 7D 22      je _if87_else
4544   2231             _if87_TRUE:
4545   2231             ; *t++ = *prog++; 
4546   2231 FA 00 00      lea d, [bp + 0] ; $t
4547   2234 32            mov bl, [d]
4548   2235 A7 00         mov bh, 0
4549   2237 38 00 00      mov c, 0
4550   223A FD 77         inc b
4551   223C FA 00 00      lea d, [bp + 0] ; $t
4552   223F FD 3E         mov [d], bl
4553   2241 FD 7D         dec b
4554   2243 D8            push b
4555   2244 3B 8F 42      mov d, _prog ; $prog
4556   2247 32            mov bl, [d]
4557   2248 A7 00         mov bh, 0
4558   224A 38 00 00      mov c, 0
4559   224D FD 77         inc b
4560   224F 3B 8F 42      mov d, _prog ; $prog
4561   2252 FD 3E         mov [d], bl
4562   2254 FD 7D         dec b
4563   2256 74            mov d, b
4564   2257 32            mov bl, [d]
4565   2258 A7 00         mov bh, 0
4566   225A 38 00 00      mov c, 0
4567   225D E7            pop d
4568   225E FD 3E         mov [d], bl
4569   2260             ; tok = DOLLAR; 
4570   2260 3B 8B 42      mov d, _tok ; $tok
4571   2263 DA            push d
4572   2264 FD 2E 12 00   mov32 cb, $12 ; enum element: DOLLAR
4572   2268 00 00 
4573   226A E7            pop d
4574   226B FD 43         mov [d], b
4575   226D             ; toktype = DELIMITER;   
4576   226D 3B 8D 42      mov d, _toktype ; $toktype
4577   2270 DA            push d
4578   2271 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4578   2275 00 00 
4579   2277 E7            pop d
4580   2278 FD 43         mov [d], b
4581   227A 0A 37 27      jmp _if87_exit
4582   227D             _if87_else:
4583   227D             ; if(*prog == '^'){ 
4584   227D             _if88_cond:
4585   227D 3B 8F 42      mov d, _prog ; $prog
4586   2280 32            mov bl, [d]
4587   2281 A7 00         mov bh, 0
4588   2283 38 00 00      mov c, 0
4589   2286 74            mov d, b
4590   2287 32            mov bl, [d]
4591   2288 A7 00         mov bh, 0
4592   228A 38 00 00      mov c, 0
4593   228D             ; --- START RELATIONAL
4594   228D D7            push a
4595   228E 11            mov a, b
4596   228F FD 2E 5E 00   mov32 cb, $0000005e
4596   2293 00 00 
4597   2295 B0            cmp a, b
4598   2296 FD 71         seq ; ==
4599   2298 E4            pop a
4600   2299             ; --- END RELATIONAL
4601   2299 C0 00 00      cmp b, 0
4602   229C C6 EB 22      je _if88_else
4603   229F             _if88_TRUE:
4604   229F             ; *t++ = *prog++; 
4605   229F FA 00 00      lea d, [bp + 0] ; $t
4606   22A2 32            mov bl, [d]
4607   22A3 A7 00         mov bh, 0
4608   22A5 38 00 00      mov c, 0
4609   22A8 FD 77         inc b
4610   22AA FA 00 00      lea d, [bp + 0] ; $t
4611   22AD FD 3E         mov [d], bl
4612   22AF FD 7D         dec b
4613   22B1 D8            push b
4614   22B2 3B 8F 42      mov d, _prog ; $prog
4615   22B5 32            mov bl, [d]
4616   22B6 A7 00         mov bh, 0
4617   22B8 38 00 00      mov c, 0
4618   22BB FD 77         inc b
4619   22BD 3B 8F 42      mov d, _prog ; $prog
4620   22C0 FD 3E         mov [d], bl
4621   22C2 FD 7D         dec b
4622   22C4 74            mov d, b
4623   22C5 32            mov bl, [d]
4624   22C6 A7 00         mov bh, 0
4625   22C8 38 00 00      mov c, 0
4626   22CB E7            pop d
4627   22CC FD 3E         mov [d], bl
4628   22CE             ; tok = BITWISE_XOR; 
4629   22CE 3B 8B 42      mov d, _tok ; $tok
4630   22D1 DA            push d
4631   22D2 FD 2E 17 00   mov32 cb, $17 ; enum element: BITWISE_XOR
4631   22D6 00 00 
4632   22D8 E7            pop d
4633   22D9 FD 43         mov [d], b
4634   22DB             ; toktype = DELIMITER;   
4635   22DB 3B 8D 42      mov d, _toktype ; $toktype
4636   22DE DA            push d
4637   22DF FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4637   22E3 00 00 
4638   22E5 E7            pop d
4639   22E6 FD 43         mov [d], b
4640   22E8 0A 37 27      jmp _if88_exit
4641   22EB             _if88_else:
4642   22EB             ; if(*prog == '@'){ 
4643   22EB             _if89_cond:
4644   22EB 3B 8F 42      mov d, _prog ; $prog
4645   22EE 32            mov bl, [d]
4646   22EF A7 00         mov bh, 0
4647   22F1 38 00 00      mov c, 0
4648   22F4 74            mov d, b
4649   22F5 32            mov bl, [d]
4650   22F6 A7 00         mov bh, 0
4651   22F8 38 00 00      mov c, 0
4652   22FB             ; --- START RELATIONAL
4653   22FB D7            push a
4654   22FC 11            mov a, b
4655   22FD FD 2E 40 00   mov32 cb, $00000040
4655   2301 00 00 
4656   2303 B0            cmp a, b
4657   2304 FD 71         seq ; ==
4658   2306 E4            pop a
4659   2307             ; --- END RELATIONAL
4660   2307 C0 00 00      cmp b, 0
4661   230A C6 59 23      je _if89_else
4662   230D             _if89_TRUE:
4663   230D             ; *t++ = *prog++; 
4664   230D FA 00 00      lea d, [bp + 0] ; $t
4665   2310 32            mov bl, [d]
4666   2311 A7 00         mov bh, 0
4667   2313 38 00 00      mov c, 0
4668   2316 FD 77         inc b
4669   2318 FA 00 00      lea d, [bp + 0] ; $t
4670   231B FD 3E         mov [d], bl
4671   231D FD 7D         dec b
4672   231F D8            push b
4673   2320 3B 8F 42      mov d, _prog ; $prog
4674   2323 32            mov bl, [d]
4675   2324 A7 00         mov bh, 0
4676   2326 38 00 00      mov c, 0
4677   2329 FD 77         inc b
4678   232B 3B 8F 42      mov d, _prog ; $prog
4679   232E FD 3E         mov [d], bl
4680   2330 FD 7D         dec b
4681   2332 74            mov d, b
4682   2333 32            mov bl, [d]
4683   2334 A7 00         mov bh, 0
4684   2336 38 00 00      mov c, 0
4685   2339 E7            pop d
4686   233A FD 3E         mov [d], bl
4687   233C             ; tok = AT; 
4688   233C 3B 8B 42      mov d, _tok ; $tok
4689   233F DA            push d
4690   2340 FD 2E 14 00   mov32 cb, $14 ; enum element: AT
4690   2344 00 00 
4691   2346 E7            pop d
4692   2347 FD 43         mov [d], b
4693   2349             ; toktype = DELIMITER;   
4694   2349 3B 8D 42      mov d, _toktype ; $toktype
4695   234C DA            push d
4696   234D FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4696   2351 00 00 
4697   2353 E7            pop d
4698   2354 FD 43         mov [d], b
4699   2356 0A 37 27      jmp _if89_exit
4700   2359             _if89_else:
4701   2359             ; if(*prog == '*'){ 
4702   2359             _if90_cond:
4703   2359 3B 8F 42      mov d, _prog ; $prog
4704   235C 32            mov bl, [d]
4705   235D A7 00         mov bh, 0
4706   235F 38 00 00      mov c, 0
4707   2362 74            mov d, b
4708   2363 32            mov bl, [d]
4709   2364 A7 00         mov bh, 0
4710   2366 38 00 00      mov c, 0
4711   2369             ; --- START RELATIONAL
4712   2369 D7            push a
4713   236A 11            mov a, b
4714   236B FD 2E 2A 00   mov32 cb, $0000002a
4714   236F 00 00 
4715   2371 B0            cmp a, b
4716   2372 FD 71         seq ; ==
4717   2374 E4            pop a
4718   2375             ; --- END RELATIONAL
4719   2375 C0 00 00      cmp b, 0
4720   2378 C6 C7 23      je _if90_else
4721   237B             _if90_TRUE:
4722   237B             ; *t++ = *prog++; 
4723   237B FA 00 00      lea d, [bp + 0] ; $t
4724   237E 32            mov bl, [d]
4725   237F A7 00         mov bh, 0
4726   2381 38 00 00      mov c, 0
4727   2384 FD 77         inc b
4728   2386 FA 00 00      lea d, [bp + 0] ; $t
4729   2389 FD 3E         mov [d], bl
4730   238B FD 7D         dec b
4731   238D D8            push b
4732   238E 3B 8F 42      mov d, _prog ; $prog
4733   2391 32            mov bl, [d]
4734   2392 A7 00         mov bh, 0
4735   2394 38 00 00      mov c, 0
4736   2397 FD 77         inc b
4737   2399 3B 8F 42      mov d, _prog ; $prog
4738   239C FD 3E         mov [d], bl
4739   239E FD 7D         dec b
4740   23A0 74            mov d, b
4741   23A1 32            mov bl, [d]
4742   23A2 A7 00         mov bh, 0
4743   23A4 38 00 00      mov c, 0
4744   23A7 E7            pop d
4745   23A8 FD 3E         mov [d], bl
4746   23AA             ; tok = STAR; 
4747   23AA 3B 8B 42      mov d, _tok ; $tok
4748   23AD DA            push d
4749   23AE FD 2E 03 00   mov32 cb, $3 ; enum element: STAR
4749   23B2 00 00 
4750   23B4 E7            pop d
4751   23B5 FD 43         mov [d], b
4752   23B7             ; toktype = DELIMITER;   
4753   23B7 3B 8D 42      mov d, _toktype ; $toktype
4754   23BA DA            push d
4755   23BB FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4755   23BF 00 00 
4756   23C1 E7            pop d
4757   23C2 FD 43         mov [d], b
4758   23C4 0A 37 27      jmp _if90_exit
4759   23C7             _if90_else:
4760   23C7             ; if(*prog == '/'){ 
4761   23C7             _if91_cond:
4762   23C7 3B 8F 42      mov d, _prog ; $prog
4763   23CA 32            mov bl, [d]
4764   23CB A7 00         mov bh, 0
4765   23CD 38 00 00      mov c, 0
4766   23D0 74            mov d, b
4767   23D1 32            mov bl, [d]
4768   23D2 A7 00         mov bh, 0
4769   23D4 38 00 00      mov c, 0
4770   23D7             ; --- START RELATIONAL
4771   23D7 D7            push a
4772   23D8 11            mov a, b
4773   23D9 FD 2E 2F 00   mov32 cb, $0000002f
4773   23DD 00 00 
4774   23DF B0            cmp a, b
4775   23E0 FD 71         seq ; ==
4776   23E2 E4            pop a
4777   23E3             ; --- END RELATIONAL
4778   23E3 C0 00 00      cmp b, 0
4779   23E6 C6 35 24      je _if91_else
4780   23E9             _if91_TRUE:
4781   23E9             ; *t++ = *prog++; 
4782   23E9 FA 00 00      lea d, [bp + 0] ; $t
4783   23EC 32            mov bl, [d]
4784   23ED A7 00         mov bh, 0
4785   23EF 38 00 00      mov c, 0
4786   23F2 FD 77         inc b
4787   23F4 FA 00 00      lea d, [bp + 0] ; $t
4788   23F7 FD 3E         mov [d], bl
4789   23F9 FD 7D         dec b
4790   23FB D8            push b
4791   23FC 3B 8F 42      mov d, _prog ; $prog
4792   23FF 32            mov bl, [d]
4793   2400 A7 00         mov bh, 0
4794   2402 38 00 00      mov c, 0
4795   2405 FD 77         inc b
4796   2407 3B 8F 42      mov d, _prog ; $prog
4797   240A FD 3E         mov [d], bl
4798   240C FD 7D         dec b
4799   240E 74            mov d, b
4800   240F 32            mov bl, [d]
4801   2410 A7 00         mov bh, 0
4802   2412 38 00 00      mov c, 0
4803   2415 E7            pop d
4804   2416 FD 3E         mov [d], bl
4805   2418             ; tok = FSLASH; 
4806   2418 3B 8B 42      mov d, _tok ; $tok
4807   241B DA            push d
4808   241C FD 2E 04 00   mov32 cb, $4 ; enum element: FSLASH
4808   2420 00 00 
4809   2422 E7            pop d
4810   2423 FD 43         mov [d], b
4811   2425             ; toktype = DELIMITER;   
4812   2425 3B 8D 42      mov d, _toktype ; $toktype
4813   2428 DA            push d
4814   2429 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4814   242D 00 00 
4815   242F E7            pop d
4816   2430 FD 43         mov [d], b
4817   2432 0A 37 27      jmp _if91_exit
4818   2435             _if91_else:
4819   2435             ; if(*prog == '%'){ 
4820   2435             _if92_cond:
4821   2435 3B 8F 42      mov d, _prog ; $prog
4822   2438 32            mov bl, [d]
4823   2439 A7 00         mov bh, 0
4824   243B 38 00 00      mov c, 0
4825   243E 74            mov d, b
4826   243F 32            mov bl, [d]
4827   2440 A7 00         mov bh, 0
4828   2442 38 00 00      mov c, 0
4829   2445             ; --- START RELATIONAL
4830   2445 D7            push a
4831   2446 11            mov a, b
4832   2447 FD 2E 25 00   mov32 cb, $00000025
4832   244B 00 00 
4833   244D B0            cmp a, b
4834   244E FD 71         seq ; ==
4835   2450 E4            pop a
4836   2451             ; --- END RELATIONAL
4837   2451 C0 00 00      cmp b, 0
4838   2454 C6 A3 24      je _if92_else
4839   2457             _if92_TRUE:
4840   2457             ; *t++ = *prog++; 
4841   2457 FA 00 00      lea d, [bp + 0] ; $t
4842   245A 32            mov bl, [d]
4843   245B A7 00         mov bh, 0
4844   245D 38 00 00      mov c, 0
4845   2460 FD 77         inc b
4846   2462 FA 00 00      lea d, [bp + 0] ; $t
4847   2465 FD 3E         mov [d], bl
4848   2467 FD 7D         dec b
4849   2469 D8            push b
4850   246A 3B 8F 42      mov d, _prog ; $prog
4851   246D 32            mov bl, [d]
4852   246E A7 00         mov bh, 0
4853   2470 38 00 00      mov c, 0
4854   2473 FD 77         inc b
4855   2475 3B 8F 42      mov d, _prog ; $prog
4856   2478 FD 3E         mov [d], bl
4857   247A FD 7D         dec b
4858   247C 74            mov d, b
4859   247D 32            mov bl, [d]
4860   247E A7 00         mov bh, 0
4861   2480 38 00 00      mov c, 0
4862   2483 E7            pop d
4863   2484 FD 3E         mov [d], bl
4864   2486             ; tok = MOD; 
4865   2486 3B 8B 42      mov d, _tok ; $tok
4866   2489 DA            push d
4867   248A FD 2E 07 00   mov32 cb, $7 ; enum element: MOD
4867   248E 00 00 
4868   2490 E7            pop d
4869   2491 FD 43         mov [d], b
4870   2493             ; toktype = DELIMITER;   
4871   2493 3B 8D 42      mov d, _toktype ; $toktype
4872   2496 DA            push d
4873   2497 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4873   249B 00 00 
4874   249D E7            pop d
4875   249E FD 43         mov [d], b
4876   24A0 0A 37 27      jmp _if92_exit
4877   24A3             _if92_else:
4878   24A3             ; if(*prog == '('){ 
4879   24A3             _if93_cond:
4880   24A3 3B 8F 42      mov d, _prog ; $prog
4881   24A6 32            mov bl, [d]
4882   24A7 A7 00         mov bh, 0
4883   24A9 38 00 00      mov c, 0
4884   24AC 74            mov d, b
4885   24AD 32            mov bl, [d]
4886   24AE A7 00         mov bh, 0
4887   24B0 38 00 00      mov c, 0
4888   24B3             ; --- START RELATIONAL
4889   24B3 D7            push a
4890   24B4 11            mov a, b
4891   24B5 FD 2E 28 00   mov32 cb, $00000028
4891   24B9 00 00 
4892   24BB B0            cmp a, b
4893   24BC FD 71         seq ; ==
4894   24BE E4            pop a
4895   24BF             ; --- END RELATIONAL
4896   24BF C0 00 00      cmp b, 0
4897   24C2 C6 11 25      je _if93_else
4898   24C5             _if93_TRUE:
4899   24C5             ; *t++ = *prog++; 
4900   24C5 FA 00 00      lea d, [bp + 0] ; $t
4901   24C8 32            mov bl, [d]
4902   24C9 A7 00         mov bh, 0
4903   24CB 38 00 00      mov c, 0
4904   24CE FD 77         inc b
4905   24D0 FA 00 00      lea d, [bp + 0] ; $t
4906   24D3 FD 3E         mov [d], bl
4907   24D5 FD 7D         dec b
4908   24D7 D8            push b
4909   24D8 3B 8F 42      mov d, _prog ; $prog
4910   24DB 32            mov bl, [d]
4911   24DC A7 00         mov bh, 0
4912   24DE 38 00 00      mov c, 0
4913   24E1 FD 77         inc b
4914   24E3 3B 8F 42      mov d, _prog ; $prog
4915   24E6 FD 3E         mov [d], bl
4916   24E8 FD 7D         dec b
4917   24EA 74            mov d, b
4918   24EB 32            mov bl, [d]
4919   24EC A7 00         mov bh, 0
4920   24EE 38 00 00      mov c, 0
4921   24F1 E7            pop d
4922   24F2 FD 3E         mov [d], bl
4923   24F4             ; tok = OPENING_PAREN; 
4924   24F4 3B 8B 42      mov d, _tok ; $tok
4925   24F7 DA            push d
4926   24F8 FD 2E 1C 00   mov32 cb, $1c ; enum element: OPENING_PAREN
4926   24FC 00 00 
4927   24FE E7            pop d
4928   24FF FD 43         mov [d], b
4929   2501             ; toktype = DELIMITER;   
4930   2501 3B 8D 42      mov d, _toktype ; $toktype
4931   2504 DA            push d
4932   2505 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4932   2509 00 00 
4933   250B E7            pop d
4934   250C FD 43         mov [d], b
4935   250E 0A 37 27      jmp _if93_exit
4936   2511             _if93_else:
4937   2511             ; if(*prog == ')'){ 
4938   2511             _if94_cond:
4939   2511 3B 8F 42      mov d, _prog ; $prog
4940   2514 32            mov bl, [d]
4941   2515 A7 00         mov bh, 0
4942   2517 38 00 00      mov c, 0
4943   251A 74            mov d, b
4944   251B 32            mov bl, [d]
4945   251C A7 00         mov bh, 0
4946   251E 38 00 00      mov c, 0
4947   2521             ; --- START RELATIONAL
4948   2521 D7            push a
4949   2522 11            mov a, b
4950   2523 FD 2E 29 00   mov32 cb, $00000029
4950   2527 00 00 
4951   2529 B0            cmp a, b
4952   252A FD 71         seq ; ==
4953   252C E4            pop a
4954   252D             ; --- END RELATIONAL
4955   252D C0 00 00      cmp b, 0
4956   2530 C6 7F 25      je _if94_else
4957   2533             _if94_TRUE:
4958   2533             ; *t++ = *prog++; 
4959   2533 FA 00 00      lea d, [bp + 0] ; $t
4960   2536 32            mov bl, [d]
4961   2537 A7 00         mov bh, 0
4962   2539 38 00 00      mov c, 0
4963   253C FD 77         inc b
4964   253E FA 00 00      lea d, [bp + 0] ; $t
4965   2541 FD 3E         mov [d], bl
4966   2543 FD 7D         dec b
4967   2545 D8            push b
4968   2546 3B 8F 42      mov d, _prog ; $prog
4969   2549 32            mov bl, [d]
4970   254A A7 00         mov bh, 0
4971   254C 38 00 00      mov c, 0
4972   254F FD 77         inc b
4973   2551 3B 8F 42      mov d, _prog ; $prog
4974   2554 FD 3E         mov [d], bl
4975   2556 FD 7D         dec b
4976   2558 74            mov d, b
4977   2559 32            mov bl, [d]
4978   255A A7 00         mov bh, 0
4979   255C 38 00 00      mov c, 0
4980   255F E7            pop d
4981   2560 FD 3E         mov [d], bl
4982   2562             ; tok = CLOSING_PAREN; 
4983   2562 3B 8B 42      mov d, _tok ; $tok
4984   2565 DA            push d
4985   2566 FD 2E 1D 00   mov32 cb, $1d ; enum element: CLOSING_PAREN
4985   256A 00 00 
4986   256C E7            pop d
4987   256D FD 43         mov [d], b
4988   256F             ; toktype = DELIMITER;   
4989   256F 3B 8D 42      mov d, _toktype ; $toktype
4990   2572 DA            push d
4991   2573 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4991   2577 00 00 
4992   2579 E7            pop d
4993   257A FD 43         mov [d], b
4994   257C 0A 37 27      jmp _if94_exit
4995   257F             _if94_else:
4996   257F             ; if(*prog == ';'){ 
4997   257F             _if95_cond:
4998   257F 3B 8F 42      mov d, _prog ; $prog
4999   2582 32            mov bl, [d]
5000   2583 A7 00         mov bh, 0
5001   2585 38 00 00      mov c, 0
5002   2588 74            mov d, b
5003   2589 32            mov bl, [d]
5004   258A A7 00         mov bh, 0
5005   258C 38 00 00      mov c, 0
5006   258F             ; --- START RELATIONAL
5007   258F D7            push a
5008   2590 11            mov a, b
5009   2591 FD 2E 3B 00   mov32 cb, $0000003b
5009   2595 00 00 
5010   2597 B0            cmp a, b
5011   2598 FD 71         seq ; ==
5012   259A E4            pop a
5013   259B             ; --- END RELATIONAL
5014   259B C0 00 00      cmp b, 0
5015   259E C6 ED 25      je _if95_else
5016   25A1             _if95_TRUE:
5017   25A1             ; *t++ = *prog++; 
5018   25A1 FA 00 00      lea d, [bp + 0] ; $t
5019   25A4 32            mov bl, [d]
5020   25A5 A7 00         mov bh, 0
5021   25A7 38 00 00      mov c, 0
5022   25AA FD 77         inc b
5023   25AC FA 00 00      lea d, [bp + 0] ; $t
5024   25AF FD 3E         mov [d], bl
5025   25B1 FD 7D         dec b
5026   25B3 D8            push b
5027   25B4 3B 8F 42      mov d, _prog ; $prog
5028   25B7 32            mov bl, [d]
5029   25B8 A7 00         mov bh, 0
5030   25BA 38 00 00      mov c, 0
5031   25BD FD 77         inc b
5032   25BF 3B 8F 42      mov d, _prog ; $prog
5033   25C2 FD 3E         mov [d], bl
5034   25C4 FD 7D         dec b
5035   25C6 74            mov d, b
5036   25C7 32            mov bl, [d]
5037   25C8 A7 00         mov bh, 0
5038   25CA 38 00 00      mov c, 0
5039   25CD E7            pop d
5040   25CE FD 3E         mov [d], bl
5041   25D0             ; tok = SEMICOLON; 
5042   25D0 3B 8B 42      mov d, _tok ; $tok
5043   25D3 DA            push d
5044   25D4 FD 2E 23 00   mov32 cb, $23 ; enum element: SEMICOLON
5044   25D8 00 00 
5045   25DA E7            pop d
5046   25DB FD 43         mov [d], b
5047   25DD             ; toktype = DELIMITER;   
5048   25DD 3B 8D 42      mov d, _toktype ; $toktype
5049   25E0 DA            push d
5050   25E1 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
5050   25E5 00 00 
5051   25E7 E7            pop d
5052   25E8 FD 43         mov [d], b
5053   25EA 0A 37 27      jmp _if95_exit
5054   25ED             _if95_else:
5055   25ED             ; if(*prog == ':'){ 
5056   25ED             _if96_cond:
5057   25ED 3B 8F 42      mov d, _prog ; $prog
5058   25F0 32            mov bl, [d]
5059   25F1 A7 00         mov bh, 0
5060   25F3 38 00 00      mov c, 0
5061   25F6 74            mov d, b
5062   25F7 32            mov bl, [d]
5063   25F8 A7 00         mov bh, 0
5064   25FA 38 00 00      mov c, 0
5065   25FD             ; --- START RELATIONAL
5066   25FD D7            push a
5067   25FE 11            mov a, b
5068   25FF FD 2E 3A 00   mov32 cb, $0000003a
5068   2603 00 00 
5069   2605 B0            cmp a, b
5070   2606 FD 71         seq ; ==
5071   2608 E4            pop a
5072   2609             ; --- END RELATIONAL
5073   2609 C0 00 00      cmp b, 0
5074   260C C6 5B 26      je _if96_else
5075   260F             _if96_TRUE:
5076   260F             ; *t++ = *prog++; 
5077   260F FA 00 00      lea d, [bp + 0] ; $t
5078   2612 32            mov bl, [d]
5079   2613 A7 00         mov bh, 0
5080   2615 38 00 00      mov c, 0
5081   2618 FD 77         inc b
5082   261A FA 00 00      lea d, [bp + 0] ; $t
5083   261D FD 3E         mov [d], bl
5084   261F FD 7D         dec b
5085   2621 D8            push b
5086   2622 3B 8F 42      mov d, _prog ; $prog
5087   2625 32            mov bl, [d]
5088   2626 A7 00         mov bh, 0
5089   2628 38 00 00      mov c, 0
5090   262B FD 77         inc b
5091   262D 3B 8F 42      mov d, _prog ; $prog
5092   2630 FD 3E         mov [d], bl
5093   2632 FD 7D         dec b
5094   2634 74            mov d, b
5095   2635 32            mov bl, [d]
5096   2636 A7 00         mov bh, 0
5097   2638 38 00 00      mov c, 0
5098   263B E7            pop d
5099   263C FD 3E         mov [d], bl
5100   263E             ; tok = COLON; 
5101   263E 3B 8B 42      mov d, _tok ; $tok
5102   2641 DA            push d
5103   2642 FD 2E 22 00   mov32 cb, $22 ; enum element: COLON
5103   2646 00 00 
5104   2648 E7            pop d
5105   2649 FD 43         mov [d], b
5106   264B             ; toktype = DELIMITER;   
5107   264B 3B 8D 42      mov d, _toktype ; $toktype
5108   264E DA            push d
5109   264F FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
5109   2653 00 00 
5110   2655 E7            pop d
5111   2656 FD 43         mov [d], b
5112   2658 0A 37 27      jmp _if96_exit
5113   265B             _if96_else:
5114   265B             ; if(*prog == ','){ 
5115   265B             _if97_cond:
5116   265B 3B 8F 42      mov d, _prog ; $prog
5117   265E 32            mov bl, [d]
5118   265F A7 00         mov bh, 0
5119   2661 38 00 00      mov c, 0
5120   2664 74            mov d, b
5121   2665 32            mov bl, [d]
5122   2666 A7 00         mov bh, 0
5123   2668 38 00 00      mov c, 0
5124   266B             ; --- START RELATIONAL
5125   266B D7            push a
5126   266C 11            mov a, b
5127   266D FD 2E 2C 00   mov32 cb, $0000002c
5127   2671 00 00 
5128   2673 B0            cmp a, b
5129   2674 FD 71         seq ; ==
5130   2676 E4            pop a
5131   2677             ; --- END RELATIONAL
5132   2677 C0 00 00      cmp b, 0
5133   267A C6 C9 26      je _if97_else
5134   267D             _if97_TRUE:
5135   267D             ; *t++ = *prog++; 
5136   267D FA 00 00      lea d, [bp + 0] ; $t
5137   2680 32            mov bl, [d]
5138   2681 A7 00         mov bh, 0
5139   2683 38 00 00      mov c, 0
5140   2686 FD 77         inc b
5141   2688 FA 00 00      lea d, [bp + 0] ; $t
5142   268B FD 3E         mov [d], bl
5143   268D FD 7D         dec b
5144   268F D8            push b
5145   2690 3B 8F 42      mov d, _prog ; $prog
5146   2693 32            mov bl, [d]
5147   2694 A7 00         mov bh, 0
5148   2696 38 00 00      mov c, 0
5149   2699 FD 77         inc b
5150   269B 3B 8F 42      mov d, _prog ; $prog
5151   269E FD 3E         mov [d], bl
5152   26A0 FD 7D         dec b
5153   26A2 74            mov d, b
5154   26A3 32            mov bl, [d]
5155   26A4 A7 00         mov bh, 0
5156   26A6 38 00 00      mov c, 0
5157   26A9 E7            pop d
5158   26AA FD 3E         mov [d], bl
5159   26AC             ; tok = COMMA; 
5160   26AC 3B 8B 42      mov d, _tok ; $tok
5161   26AF DA            push d
5162   26B0 FD 2E 24 00   mov32 cb, $24 ; enum element: COMMA
5162   26B4 00 00 
5163   26B6 E7            pop d
5164   26B7 FD 43         mov [d], b
5165   26B9             ; toktype = DELIMITER;   
5166   26B9 3B 8D 42      mov d, _toktype ; $toktype
5167   26BC DA            push d
5168   26BD FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
5168   26C1 00 00 
5169   26C3 E7            pop d
5170   26C4 FD 43         mov [d], b
5171   26C6 0A 37 27      jmp _if97_exit
5172   26C9             _if97_else:
5173   26C9             ; if(*prog == '.'){ 
5174   26C9             _if98_cond:
5175   26C9 3B 8F 42      mov d, _prog ; $prog
5176   26CC 32            mov bl, [d]
5177   26CD A7 00         mov bh, 0
5178   26CF 38 00 00      mov c, 0
5179   26D2 74            mov d, b
5180   26D3 32            mov bl, [d]
5181   26D4 A7 00         mov bh, 0
5182   26D6 38 00 00      mov c, 0
5183   26D9             ; --- START RELATIONAL
5184   26D9 D7            push a
5185   26DA 11            mov a, b
5186   26DB FD 2E 2E 00   mov32 cb, $0000002e
5186   26DF 00 00 
5187   26E1 B0            cmp a, b
5188   26E2 FD 71         seq ; ==
5189   26E4 E4            pop a
5190   26E5             ; --- END RELATIONAL
5191   26E5 C0 00 00      cmp b, 0
5192   26E8 C6 37 27      je _if98_exit
5193   26EB             _if98_TRUE:
5194   26EB             ; *t++ = *prog++; 
5195   26EB FA 00 00      lea d, [bp + 0] ; $t
5196   26EE 32            mov bl, [d]
5197   26EF A7 00         mov bh, 0
5198   26F1 38 00 00      mov c, 0
5199   26F4 FD 77         inc b
5200   26F6 FA 00 00      lea d, [bp + 0] ; $t
5201   26F9 FD 3E         mov [d], bl
5202   26FB FD 7D         dec b
5203   26FD D8            push b
5204   26FE 3B 8F 42      mov d, _prog ; $prog
5205   2701 32            mov bl, [d]
5206   2702 A7 00         mov bh, 0
5207   2704 38 00 00      mov c, 0
5208   2707 FD 77         inc b
5209   2709 3B 8F 42      mov d, _prog ; $prog
5210   270C FD 3E         mov [d], bl
5211   270E FD 7D         dec b
5212   2710 74            mov d, b
5213   2711 32            mov bl, [d]
5214   2712 A7 00         mov bh, 0
5215   2714 38 00 00      mov c, 0
5216   2717 E7            pop d
5217   2718 FD 3E         mov [d], bl
5218   271A             ; tok = DOT; 
5219   271A 3B 8B 42      mov d, _tok ; $tok
5220   271D DA            push d
5221   271E FD 2E 25 00   mov32 cb, $25 ; enum element: DOT
5221   2722 00 00 
5222   2724 E7            pop d
5223   2725 FD 43         mov [d], b
5224   2727             ; toktype = DELIMITER;   
5225   2727 3B 8D 42      mov d, _toktype ; $toktype
5226   272A DA            push d
5227   272B FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
5227   272F 00 00 
5228   2731 E7            pop d
5229   2732 FD 43         mov [d], b
5230   2734 0A 37 27      jmp _if98_exit
5231   2737             _if98_exit:
5232   2737             _if97_exit:
5233   2737             _if96_exit:
5234   2737             _if95_exit:
5235   2737             _if94_exit:
5236   2737             _if93_exit:
5237   2737             _if92_exit:
5238   2737             _if91_exit:
5239   2737             _if90_exit:
5240   2737             _if89_exit:
5241   2737             _if88_exit:
5242   2737             _if87_exit:
5243   2737             _if85_exit:
5244   2737             _if83_exit:
5245   2737             _if81_exit:
5246   2737             _if78_exit:
5247   2737             _if75_exit:
5248   2737             _if74_exit:
5249   2737             _if72_exit:
5250   2737             _if70_exit:
5251   2737             _if68_exit:
5252   2737             _if67_exit:
5253   2737             _if66_exit:
5254   2737             _if65_exit:
5255   2737             _if64_exit:
5256   2737             _if63_exit:
5257   2737             _if60_exit:
5258   2737             _if58_exit:
5259   2737             _if56_exit:
5260   2737             ; *t = '\0'; 
5261   2737 FA 00 00      lea d, [bp + 0] ; $t
5262   273A 32            mov bl, [d]
5263   273B A7 00         mov bh, 0
5264   273D 38 00 00      mov c, 0
5265   2740 D8            push b
5266   2741 FD 2E 00 00   mov32 cb, $00000000
5266   2745 00 00 
5267   2747 E7            pop d
5268   2748 FD 3E         mov [d], bl
5269   274A F9            leave
5270   274B 09            ret
5271   274C             
5272   274C             is_space:
5273   274C F8 00 00      enter 0 ; (push bp; mov bp, sp)
5274   274F             ; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
5275   274F FA 05 00      lea d, [bp + 5] ; $c
5276   2752 32            mov bl, [d]
5277   2753 A7 00         mov bh, 0
5278   2755 38 00 00      mov c, 0
5279   2758             ; --- START RELATIONAL
5280   2758 D7            push a
5281   2759 11            mov a, b
5282   275A FD 2E 20 00   mov32 cb, $00000020
5282   275E 00 00 
5283   2760 B0            cmp a, b
5284   2761 FD 71         seq ; ==
5285   2763 E4            pop a
5286   2764             ; --- END RELATIONAL
5287   2764             ; --- START LOGICAL OR
5288   2764 D7            push a
5289   2765 11            mov a, b
5290   2766 FA 05 00      lea d, [bp + 5] ; $c
5291   2769 32            mov bl, [d]
5292   276A A7 00         mov bh, 0
5293   276C 38 00 00      mov c, 0
5294   276F             ; --- START RELATIONAL
5295   276F D7            push a
5296   2770 11            mov a, b
5297   2771 FD 2E 09 00   mov32 cb, $00000009
5297   2775 00 00 
5298   2777 B0            cmp a, b
5299   2778 FD 71         seq ; ==
5300   277A E4            pop a
5301   277B             ; --- END RELATIONAL
5302   277B FD A8         sor a, b ; ||
5303   277D 11            mov a, b
5304   277E FA 05 00      lea d, [bp + 5] ; $c
5305   2781 32            mov bl, [d]
5306   2782 A7 00         mov bh, 0
5307   2784 38 00 00      mov c, 0
5308   2787             ; --- START RELATIONAL
5309   2787 D7            push a
5310   2788 11            mov a, b
5311   2789 FD 2E 0A 00   mov32 cb, $0000000a
5311   278D 00 00 
5312   278F B0            cmp a, b
5313   2790 FD 71         seq ; ==
5314   2792 E4            pop a
5315   2793             ; --- END RELATIONAL
5316   2793 FD A8         sor a, b ; ||
5317   2795 11            mov a, b
5318   2796 FA 05 00      lea d, [bp + 5] ; $c
5319   2799 32            mov bl, [d]
5320   279A A7 00         mov bh, 0
5321   279C 38 00 00      mov c, 0
5322   279F             ; --- START RELATIONAL
5323   279F D7            push a
5324   27A0 11            mov a, b
5325   27A1 FD 2E 0D 00   mov32 cb, $0000000d
5325   27A5 00 00 
5326   27A7 B0            cmp a, b
5327   27A8 FD 71         seq ; ==
5328   27AA E4            pop a
5329   27AB             ; --- END RELATIONAL
5330   27AB FD A8         sor a, b ; ||
5331   27AD E4            pop a
5332   27AE             ; --- END LOGICAL OR
5333   27AE F9            leave
5334   27AF 09            ret
5335   27B0             
5336   27B0             is_digit:
5337   27B0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5338   27B3             ; return c >= '0' && c <= '9'; 
5339   27B3 FA 05 00      lea d, [bp + 5] ; $c
5340   27B6 32            mov bl, [d]
5341   27B7 A7 00         mov bh, 0
5342   27B9 38 00 00      mov c, 0
5343   27BC             ; --- START RELATIONAL
5344   27BC D7            push a
5345   27BD 11            mov a, b
5346   27BE FD 2E 30 00   mov32 cb, $00000030
5346   27C2 00 00 
5347   27C4 B0            cmp a, b
5348   27C5 FD 80         sge ; >=
5349   27C7 E4            pop a
5350   27C8             ; --- END RELATIONAL
5351   27C8             ; --- START LOGICAL AND
5352   27C8 D7            push a
5353   27C9 11            mov a, b
5354   27CA FA 05 00      lea d, [bp + 5] ; $c
5355   27CD 32            mov bl, [d]
5356   27CE A7 00         mov bh, 0
5357   27D0 38 00 00      mov c, 0
5358   27D3             ; --- START RELATIONAL
5359   27D3 D7            push a
5360   27D4 11            mov a, b
5361   27D5 FD 2E 39 00   mov32 cb, $00000039
5361   27D9 00 00 
5362   27DB B0            cmp a, b
5363   27DC FD 74         sle ; <= (signed)
5364   27DE E4            pop a
5365   27DF             ; --- END RELATIONAL
5366   27DF FD A7         sand a, b
5367   27E1 E4            pop a
5368   27E2             ; --- END LOGICAL AND
5369   27E2 F9            leave
5370   27E3 09            ret
5371   27E4             
5372   27E4             is_alpha:
5373   27E4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5374   27E7             ; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
5375   27E7 FA 05 00      lea d, [bp + 5] ; $c
5376   27EA 32            mov bl, [d]
5377   27EB A7 00         mov bh, 0
5378   27ED 38 00 00      mov c, 0
5379   27F0             ; --- START RELATIONAL
5380   27F0 D7            push a
5381   27F1 11            mov a, b
5382   27F2 FD 2E 61 00   mov32 cb, $00000061
5382   27F6 00 00 
5383   27F8 B0            cmp a, b
5384   27F9 FD 80         sge ; >=
5385   27FB E4            pop a
5386   27FC             ; --- END RELATIONAL
5387   27FC             ; --- START LOGICAL AND
5388   27FC D7            push a
5389   27FD 11            mov a, b
5390   27FE FA 05 00      lea d, [bp + 5] ; $c
5391   2801 32            mov bl, [d]
5392   2802 A7 00         mov bh, 0
5393   2804 38 00 00      mov c, 0
5394   2807             ; --- START RELATIONAL
5395   2807 D7            push a
5396   2808 11            mov a, b
5397   2809 FD 2E 7A 00   mov32 cb, $0000007a
5397   280D 00 00 
5398   280F B0            cmp a, b
5399   2810 FD 74         sle ; <= (signed)
5400   2812 E4            pop a
5401   2813             ; --- END RELATIONAL
5402   2813 FD A7         sand a, b
5403   2815 E4            pop a
5404   2816             ; --- END LOGICAL AND
5405   2816             ; --- START LOGICAL OR
5406   2816 D7            push a
5407   2817 11            mov a, b
5408   2818 FA 05 00      lea d, [bp + 5] ; $c
5409   281B 32            mov bl, [d]
5410   281C A7 00         mov bh, 0
5411   281E 38 00 00      mov c, 0
5412   2821             ; --- START RELATIONAL
5413   2821 D7            push a
5414   2822 11            mov a, b
5415   2823 FD 2E 41 00   mov32 cb, $00000041
5415   2827 00 00 
5416   2829 B0            cmp a, b
5417   282A FD 80         sge ; >=
5418   282C E4            pop a
5419   282D             ; --- END RELATIONAL
5420   282D             ; --- START LOGICAL AND
5421   282D D7            push a
5422   282E 11            mov a, b
5423   282F FA 05 00      lea d, [bp + 5] ; $c
5424   2832 32            mov bl, [d]
5425   2833 A7 00         mov bh, 0
5426   2835 38 00 00      mov c, 0
5427   2838             ; --- START RELATIONAL
5428   2838 D7            push a
5429   2839 11            mov a, b
5430   283A FD 2E 5A 00   mov32 cb, $0000005a
5430   283E 00 00 
5431   2840 B0            cmp a, b
5432   2841 FD 74         sle ; <= (signed)
5433   2843 E4            pop a
5434   2844             ; --- END RELATIONAL
5435   2844 FD A7         sand a, b
5436   2846 E4            pop a
5437   2847             ; --- END LOGICAL AND
5438   2847 FD A8         sor a, b ; ||
5439   2849 11            mov a, b
5440   284A FA 05 00      lea d, [bp + 5] ; $c
5441   284D 32            mov bl, [d]
5442   284E A7 00         mov bh, 0
5443   2850 38 00 00      mov c, 0
5444   2853             ; --- START RELATIONAL
5445   2853 D7            push a
5446   2854 11            mov a, b
5447   2855 FD 2E 5F 00   mov32 cb, $0000005f
5447   2859 00 00 
5448   285B B0            cmp a, b
5449   285C FD 71         seq ; ==
5450   285E E4            pop a
5451   285F             ; --- END RELATIONAL
5452   285F FD A8         sor a, b ; ||
5453   2861 E4            pop a
5454   2862             ; --- END LOGICAL OR
5455   2862 F9            leave
5456   2863 09            ret
5457   2864             
5458   2864             error:
5459   2864 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5460   2867             ; printf("\nError: "); 
5461   2867             ; --- START FUNCTION CALL
5462   2867 26 1D 45      mov b, _s16 ; "\nError: "
5463   286A FD AB         swp b
5464   286C D8            push b
5465   286D 07 91 28      call printf
5466   2870 51 02 00      add sp, 2
5467   2873             ; --- END FUNCTION CALL
5468   2873             ; printf(msg); 
5469   2873             ; --- START FUNCTION CALL
5470   2873 FA 05 00      lea d, [bp + 5] ; $msg
5471   2876 2A            mov b, [d]
5472   2877 38 00 00      mov c, 0
5473   287A FD AB         swp b
5474   287C D8            push b
5475   287D 07 91 28      call printf
5476   2880 51 02 00      add sp, 2
5477   2883             ; --- END FUNCTION CALL
5478   2883             ; printf("\n"); 
5479   2883             ; --- START FUNCTION CALL
5480   2883 26 26 45      mov b, _s17 ; "\n"
5481   2886 FD AB         swp b
5482   2888 D8            push b
5483   2889 07 91 28      call printf
5484   288C 51 02 00      add sp, 2
5485   288F             ; --- END FUNCTION CALL
5486   288F F9            leave
5487   2890 09            ret
5488   2891             
5489   2891             printf:
5490   2891 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5491   2894             ; char *p, *format_p; 
5492   2894 52 01 00      sub sp, 1
5493   2897 52 02 00      sub sp, 2
5494   289A             ; format_p = format; 
5495   289A FA FE FF      lea d, [bp + -2] ; $format_p
5496   289D DA            push d
5497   289E FA 05 00      lea d, [bp + 5] ; $format
5498   28A1 2A            mov b, [d]
5499   28A2 38 00 00      mov c, 0
5500   28A5 E7            pop d
5501   28A6 FD 43         mov [d], b
5502   28A8             ; p = &format + 2; 
5503   28A8 FA 00 00      lea d, [bp + 0] ; $p
5504   28AB DA            push d
5505   28AC FA 05 00      lea d, [bp + 5] ; $format
5506   28AF 2D            mov b, d
5507   28B0             ; --- START TERMS
5508   28B0 D7            push a
5509   28B1 11            mov a, b
5510   28B2 FD 2E 02 00   mov32 cb, $00000002
5510   28B6 00 00 
5511   28B8 56            add b, a
5512   28B9 E4            pop a
5513   28BA             ; --- END TERMS
5514   28BA E7            pop d
5515   28BB FD 3E         mov [d], bl
5516   28BD             ; for(;;){ 
5517   28BD             _for99_init:
5518   28BD             _for99_cond:
5519   28BD             _for99_block:
5520   28BD             ; if(!*format_p) break; 
5521   28BD             _if100_cond:
5522   28BD FA FE FF      lea d, [bp + -2] ; $format_p
5523   28C0 2A            mov b, [d]
5524   28C1 38 00 00      mov c, 0
5525   28C4 74            mov d, b
5526   28C5 32            mov bl, [d]
5527   28C6 A7 00         mov bh, 0
5528   28C8 38 00 00      mov c, 0
5529   28CB C0 00 00      cmp b, 0
5530   28CE FD 71         seq ; !
5531   28D0 C0 00 00      cmp b, 0
5532   28D3 C6 DC 28      je _if100_else
5533   28D6             _if100_TRUE:
5534   28D6             ; break; 
5535   28D6 0A 9D 2B      jmp _for99_exit ; for break
5536   28D9 0A 8A 2B      jmp _if100_exit
5537   28DC             _if100_else:
5538   28DC             ; if(*format_p == '%'){ 
5539   28DC             _if101_cond:
5540   28DC FA FE FF      lea d, [bp + -2] ; $format_p
5541   28DF 2A            mov b, [d]
5542   28E0 38 00 00      mov c, 0
5543   28E3 74            mov d, b
5544   28E4 32            mov bl, [d]
5545   28E5 A7 00         mov bh, 0
5546   28E7 38 00 00      mov c, 0
5547   28EA             ; --- START RELATIONAL
5548   28EA D7            push a
5549   28EB 11            mov a, b
5550   28EC FD 2E 25 00   mov32 cb, $00000025
5550   28F0 00 00 
5551   28F2 B0            cmp a, b
5552   28F3 FD 71         seq ; ==
5553   28F5 E4            pop a
5554   28F6             ; --- END RELATIONAL
5555   28F6 C0 00 00      cmp b, 0
5556   28F9 C6 75 2B      je _if101_else
5557   28FC             _if101_TRUE:
5558   28FC             ; format_p++; 
5559   28FC FA FE FF      lea d, [bp + -2] ; $format_p
5560   28FF 2A            mov b, [d]
5561   2900 38 00 00      mov c, 0
5562   2903 FD 77         inc b
5563   2905 FA FE FF      lea d, [bp + -2] ; $format_p
5564   2908 FD 43         mov [d], b
5565   290A FD 7D         dec b
5566   290C             ; switch(*format_p){ 
5567   290C             _switch102_expr:
5568   290C FA FE FF      lea d, [bp + -2] ; $format_p
5569   290F 2A            mov b, [d]
5570   2910 38 00 00      mov c, 0
5571   2913 74            mov d, b
5572   2914 32            mov bl, [d]
5573   2915 A7 00         mov bh, 0
5574   2917 38 00 00      mov c, 0
5575   291A             _switch102_comparisons:
5576   291A C1 6C         cmp bl, $6c
5577   291C C6 4D 29      je _switch102_case0
5578   291F C1 4C         cmp bl, $4c
5579   2921 C6 4D 29      je _switch102_case1
5580   2924 C1 64         cmp bl, $64
5581   2926 C6 65 2A      je _switch102_case2
5582   2929 C1 69         cmp bl, $69
5583   292B C6 65 2A      je _switch102_case3
5584   292E C1 75         cmp bl, $75
5585   2930 C6 99 2A      je _switch102_case4
5586   2933 C1 78         cmp bl, $78
5587   2935 C6 CD 2A      je _switch102_case5
5588   2938 C1 70         cmp bl, $70
5589   293A C6 CD 2A      je _switch102_case6
5590   293D C1 63         cmp bl, $63
5591   293F C6 01 2B      je _switch102_case7
5592   2942 C1 73         cmp bl, $73
5593   2944 C6 35 2B      je _switch102_case8
5594   2947 0A 66 2B      jmp _switch102_default
5595   294A 0A 72 2B      jmp _switch102_exit
5596   294D             _switch102_case0:
5597   294D             _switch102_case1:
5598   294D             ; format_p++; 
5599   294D FA FE FF      lea d, [bp + -2] ; $format_p
5600   2950 2A            mov b, [d]
5601   2951 38 00 00      mov c, 0
5602   2954 FD 77         inc b
5603   2956 FA FE FF      lea d, [bp + -2] ; $format_p
5604   2959 FD 43         mov [d], b
5605   295B FD 7D         dec b
5606   295D             ; if(*format_p == 'd' || *format_p == 'i') 
5607   295D             _if103_cond:
5608   295D FA FE FF      lea d, [bp + -2] ; $format_p
5609   2960 2A            mov b, [d]
5610   2961 38 00 00      mov c, 0
5611   2964 74            mov d, b
5612   2965 32            mov bl, [d]
5613   2966 A7 00         mov bh, 0
5614   2968 38 00 00      mov c, 0
5615   296B             ; --- START RELATIONAL
5616   296B D7            push a
5617   296C 11            mov a, b
5618   296D FD 2E 64 00   mov32 cb, $00000064
5618   2971 00 00 
5619   2973 B0            cmp a, b
5620   2974 FD 71         seq ; ==
5621   2976 E4            pop a
5622   2977             ; --- END RELATIONAL
5623   2977             ; --- START LOGICAL OR
5624   2977 D7            push a
5625   2978 11            mov a, b
5626   2979 FA FE FF      lea d, [bp + -2] ; $format_p
5627   297C 2A            mov b, [d]
5628   297D 38 00 00      mov c, 0
5629   2980 74            mov d, b
5630   2981 32            mov bl, [d]
5631   2982 A7 00         mov bh, 0
5632   2984 38 00 00      mov c, 0
5633   2987             ; --- START RELATIONAL
5634   2987 D7            push a
5635   2988 11            mov a, b
5636   2989 FD 2E 69 00   mov32 cb, $00000069
5636   298D 00 00 
5637   298F B0            cmp a, b
5638   2990 FD 71         seq ; ==
5639   2992 E4            pop a
5640   2993             ; --- END RELATIONAL
5641   2993 FD A8         sor a, b ; ||
5642   2995 E4            pop a
5643   2996             ; --- END LOGICAL OR
5644   2996 C0 00 00      cmp b, 0
5645   2999 C6 BC 29      je _if103_else
5646   299C             _if103_TRUE:
5647   299C             ; print_signed_long(*(long int*)p); 
5648   299C             ; --- START FUNCTION CALL
5649   299C FA 00 00      lea d, [bp + 0] ; $p
5650   299F 32            mov bl, [d]
5651   29A0 A7 00         mov bh, 0
5652   29A2 38 00 00      mov c, 0
5653   29A5 74            mov d, b
5654   29A6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
5655   29A9 FD 39         mov c, b ; And place it into C
5656   29AB 2A            mov b, [d] ; Lower Word in B
5657   29AC 12            mov a, c
5658   29AD FD AA         swp a
5659   29AF D7            push a
5660   29B0 FD AB         swp b
5661   29B2 D8            push b
5662   29B3 07 9F 2B      call print_signed_long
5663   29B6 51 04 00      add sp, 4
5664   29B9             ; --- END FUNCTION CALL
5665   29B9 0A 48 2A      jmp _if103_exit
5666   29BC             _if103_else:
5667   29BC             ; if(*format_p == 'u') 
5668   29BC             _if104_cond:
5669   29BC FA FE FF      lea d, [bp + -2] ; $format_p
5670   29BF 2A            mov b, [d]
5671   29C0 38 00 00      mov c, 0
5672   29C3 74            mov d, b
5673   29C4 32            mov bl, [d]
5674   29C5 A7 00         mov bh, 0
5675   29C7 38 00 00      mov c, 0
5676   29CA             ; --- START RELATIONAL
5677   29CA D7            push a
5678   29CB 11            mov a, b
5679   29CC FD 2E 75 00   mov32 cb, $00000075
5679   29D0 00 00 
5680   29D2 B0            cmp a, b
5681   29D3 FD 71         seq ; ==
5682   29D5 E4            pop a
5683   29D6             ; --- END RELATIONAL
5684   29D6 C0 00 00      cmp b, 0
5685   29D9 C6 FC 29      je _if104_else
5686   29DC             _if104_TRUE:
5687   29DC             ; print_unsigned_long(*(unsigned long int*)p); 
5688   29DC             ; --- START FUNCTION CALL
5689   29DC FA 00 00      lea d, [bp + 0] ; $p
5690   29DF 32            mov bl, [d]
5691   29E0 A7 00         mov bh, 0
5692   29E2 38 00 00      mov c, 0
5693   29E5 74            mov d, b
5694   29E6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
5695   29E9 FD 39         mov c, b ; And place it into C
5696   29EB 2A            mov b, [d] ; Lower Word in B
5697   29EC 12            mov a, c
5698   29ED FD AA         swp a
5699   29EF D7            push a
5700   29F0 FD AB         swp b
5701   29F2 D8            push b
5702   29F3 07 76 2D      call print_unsigned_long
5703   29F6 51 04 00      add sp, 4
5704   29F9             ; --- END FUNCTION CALL
5705   29F9 0A 48 2A      jmp _if104_exit
5706   29FC             _if104_else:
5707   29FC             ; if(*format_p == 'x') 
5708   29FC             _if105_cond:
5709   29FC FA FE FF      lea d, [bp + -2] ; $format_p
5710   29FF 2A            mov b, [d]
5711   2A00 38 00 00      mov c, 0
5712   2A03 74            mov d, b
5713   2A04 32            mov bl, [d]
5714   2A05 A7 00         mov bh, 0
5715   2A07 38 00 00      mov c, 0
5716   2A0A             ; --- START RELATIONAL
5717   2A0A D7            push a
5718   2A0B 11            mov a, b
5719   2A0C FD 2E 78 00   mov32 cb, $00000078
5719   2A10 00 00 
5720   2A12 B0            cmp a, b
5721   2A13 FD 71         seq ; ==
5722   2A15 E4            pop a
5723   2A16             ; --- END RELATIONAL
5724   2A16 C0 00 00      cmp b, 0
5725   2A19 C6 3C 2A      je _if105_else
5726   2A1C             _if105_TRUE:
5727   2A1C             ; printx32(*(long int *)p); 
5728   2A1C             ; --- START FUNCTION CALL
5729   2A1C FA 00 00      lea d, [bp + 0] ; $p
5730   2A1F 32            mov bl, [d]
5731   2A20 A7 00         mov bh, 0
5732   2A22 38 00 00      mov c, 0
5733   2A25 74            mov d, b
5734   2A26 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
5735   2A29 FD 39         mov c, b ; And place it into C
5736   2A2B 2A            mov b, [d] ; Lower Word in B
5737   2A2C 12            mov a, c
5738   2A2D FD AA         swp a
5739   2A2F D7            push a
5740   2A30 FD AB         swp b
5741   2A32 D8            push b
5742   2A33 07 A1 2E      call printx32
5743   2A36 51 04 00      add sp, 4
5744   2A39             ; --- END FUNCTION CALL
5745   2A39 0A 48 2A      jmp _if105_exit
5746   2A3C             _if105_else:
5747   2A3C             ; err("Unexpected format in printf."); 
5748   2A3C             ; --- START FUNCTION CALL
5749   2A3C 26 28 45      mov b, _s18 ; "Unexpected format in printf."
5750   2A3F FD AB         swp b
5751   2A41 D8            push b
5752   2A42 07 01 2F      call err
5753   2A45 51 02 00      add sp, 2
5754   2A48             ; --- END FUNCTION CALL
5755   2A48             _if105_exit:
5756   2A48             _if104_exit:
5757   2A48             _if103_exit:
5758   2A48             ; p = p + 4; 
5759   2A48 FA 00 00      lea d, [bp + 0] ; $p
5760   2A4B DA            push d
5761   2A4C FA 00 00      lea d, [bp + 0] ; $p
5762   2A4F 32            mov bl, [d]
5763   2A50 A7 00         mov bh, 0
5764   2A52 38 00 00      mov c, 0
5765   2A55             ; --- START TERMS
5766   2A55 D7            push a
5767   2A56 11            mov a, b
5768   2A57 FD 2E 04 00   mov32 cb, $00000004
5768   2A5B 00 00 
5769   2A5D 56            add b, a
5770   2A5E E4            pop a
5771   2A5F             ; --- END TERMS
5772   2A5F E7            pop d
5773   2A60 FD 3E         mov [d], bl
5774   2A62             ; break; 
5775   2A62 0A 72 2B      jmp _switch102_exit ; case break
5776   2A65             _switch102_case2:
5777   2A65             _switch102_case3:
5778   2A65             ; print_signed(*(int*)p); 
5779   2A65             ; --- START FUNCTION CALL
5780   2A65 FA 00 00      lea d, [bp + 0] ; $p
5781   2A68 32            mov bl, [d]
5782   2A69 A7 00         mov bh, 0
5783   2A6B 38 00 00      mov c, 0
5784   2A6E 74            mov d, b
5785   2A6F 2A            mov b, [d]
5786   2A70 38 00 00      mov c, 0
5787   2A73 FD AB         swp b
5788   2A75 D8            push b
5789   2A76 07 2F 2F      call print_signed
5790   2A79 51 02 00      add sp, 2
5791   2A7C             ; --- END FUNCTION CALL
5792   2A7C             ; p = p + 2; 
5793   2A7C FA 00 00      lea d, [bp + 0] ; $p
5794   2A7F DA            push d
5795   2A80 FA 00 00      lea d, [bp + 0] ; $p
5796   2A83 32            mov bl, [d]
5797   2A84 A7 00         mov bh, 0
5798   2A86 38 00 00      mov c, 0
5799   2A89             ; --- START TERMS
5800   2A89 D7            push a
5801   2A8A 11            mov a, b
5802   2A8B FD 2E 02 00   mov32 cb, $00000002
5802   2A8F 00 00 
5803   2A91 56            add b, a
5804   2A92 E4            pop a
5805   2A93             ; --- END TERMS
5806   2A93 E7            pop d
5807   2A94 FD 3E         mov [d], bl
5808   2A96             ; break; 
5809   2A96 0A 72 2B      jmp _switch102_exit ; case break
5810   2A99             _switch102_case4:
5811   2A99             ; print_unsigned(*(unsigned int*)p); 
5812   2A99             ; --- START FUNCTION CALL
5813   2A99 FA 00 00      lea d, [bp + 0] ; $p
5814   2A9C 32            mov bl, [d]
5815   2A9D A7 00         mov bh, 0
5816   2A9F 38 00 00      mov c, 0
5817   2AA2 74            mov d, b
5818   2AA3 2A            mov b, [d]
5819   2AA4 38 00 00      mov c, 0
5820   2AA7 FD AB         swp b
5821   2AA9 D8            push b
5822   2AAA 07 92 30      call print_unsigned
5823   2AAD 51 02 00      add sp, 2
5824   2AB0             ; --- END FUNCTION CALL
5825   2AB0             ; p = p + 2; 
5826   2AB0 FA 00 00      lea d, [bp + 0] ; $p
5827   2AB3 DA            push d
5828   2AB4 FA 00 00      lea d, [bp + 0] ; $p
5829   2AB7 32            mov bl, [d]
5830   2AB8 A7 00         mov bh, 0
5831   2ABA 38 00 00      mov c, 0
5832   2ABD             ; --- START TERMS
5833   2ABD D7            push a
5834   2ABE 11            mov a, b
5835   2ABF FD 2E 02 00   mov32 cb, $00000002
5835   2AC3 00 00 
5836   2AC5 56            add b, a
5837   2AC6 E4            pop a
5838   2AC7             ; --- END TERMS
5839   2AC7 E7            pop d
5840   2AC8 FD 3E         mov [d], bl
5841   2ACA             ; break; 
5842   2ACA 0A 72 2B      jmp _switch102_exit ; case break
5843   2ACD             _switch102_case5:
5844   2ACD             _switch102_case6:
5845   2ACD             ; printx16(*(int*)p); 
5846   2ACD             ; --- START FUNCTION CALL
5847   2ACD FA 00 00      lea d, [bp + 0] ; $p
5848   2AD0 32            mov bl, [d]
5849   2AD1 A7 00         mov bh, 0
5850   2AD3 38 00 00      mov c, 0
5851   2AD6 74            mov d, b
5852   2AD7 2A            mov b, [d]
5853   2AD8 38 00 00      mov c, 0
5854   2ADB FD AB         swp b
5855   2ADD D8            push b
5856   2ADE 07 97 31      call printx16
5857   2AE1 51 02 00      add sp, 2
5858   2AE4             ; --- END FUNCTION CALL
5859   2AE4             ; p = p + 2; 
5860   2AE4 FA 00 00      lea d, [bp + 0] ; $p
5861   2AE7 DA            push d
5862   2AE8 FA 00 00      lea d, [bp + 0] ; $p
5863   2AEB 32            mov bl, [d]
5864   2AEC A7 00         mov bh, 0
5865   2AEE 38 00 00      mov c, 0
5866   2AF1             ; --- START TERMS
5867   2AF1 D7            push a
5868   2AF2 11            mov a, b
5869   2AF3 FD 2E 02 00   mov32 cb, $00000002
5869   2AF7 00 00 
5870   2AF9 56            add b, a
5871   2AFA E4            pop a
5872   2AFB             ; --- END TERMS
5873   2AFB E7            pop d
5874   2AFC FD 3E         mov [d], bl
5875   2AFE             ; break; 
5876   2AFE 0A 72 2B      jmp _switch102_exit ; case break
5877   2B01             _switch102_case7:
5878   2B01             ; putchar(*(char*)p); 
5879   2B01             ; --- START FUNCTION CALL
5880   2B01 FA 00 00      lea d, [bp + 0] ; $p
5881   2B04 32            mov bl, [d]
5882   2B05 A7 00         mov bh, 0
5883   2B07 38 00 00      mov c, 0
5884   2B0A 74            mov d, b
5885   2B0B 32            mov bl, [d]
5886   2B0C A7 00         mov bh, 0
5887   2B0E 38 00 00      mov c, 0
5888   2B11 DD            push bl
5889   2B12 07 68 2D      call putchar
5890   2B15 51 01 00      add sp, 1
5891   2B18             ; --- END FUNCTION CALL
5892   2B18             ; p = p + 2; 
5893   2B18 FA 00 00      lea d, [bp + 0] ; $p
5894   2B1B DA            push d
5895   2B1C FA 00 00      lea d, [bp + 0] ; $p
5896   2B1F 32            mov bl, [d]
5897   2B20 A7 00         mov bh, 0
5898   2B22 38 00 00      mov c, 0
5899   2B25             ; --- START TERMS
5900   2B25 D7            push a
5901   2B26 11            mov a, b
5902   2B27 FD 2E 02 00   mov32 cb, $00000002
5902   2B2B 00 00 
5903   2B2D 56            add b, a
5904   2B2E E4            pop a
5905   2B2F             ; --- END TERMS
5906   2B2F E7            pop d
5907   2B30 FD 3E         mov [d], bl
5908   2B32             ; break; 
5909   2B32 0A 72 2B      jmp _switch102_exit ; case break
5910   2B35             _switch102_case8:
5911   2B35             ; print(*(char**)p); 
5912   2B35             ; --- START FUNCTION CALL
5913   2B35 FA 00 00      lea d, [bp + 0] ; $p
5914   2B38 32            mov bl, [d]
5915   2B39 A7 00         mov bh, 0
5916   2B3B 38 00 00      mov c, 0
5917   2B3E 74            mov d, b
5918   2B3F 2A            mov b, [d]
5919   2B40 FD AB         swp b
5920   2B42 D8            push b
5921   2B43 07 16 2F      call print
5922   2B46 51 02 00      add sp, 2
5923   2B49             ; --- END FUNCTION CALL
5924   2B49             ; p = p + 2; 
5925   2B49 FA 00 00      lea d, [bp + 0] ; $p
5926   2B4C DA            push d
5927   2B4D FA 00 00      lea d, [bp + 0] ; $p
5928   2B50 32            mov bl, [d]
5929   2B51 A7 00         mov bh, 0
5930   2B53 38 00 00      mov c, 0
5931   2B56             ; --- START TERMS
5932   2B56 D7            push a
5933   2B57 11            mov a, b
5934   2B58 FD 2E 02 00   mov32 cb, $00000002
5934   2B5C 00 00 
5935   2B5E 56            add b, a
5936   2B5F E4            pop a
5937   2B60             ; --- END TERMS
5938   2B60 E7            pop d
5939   2B61 FD 3E         mov [d], bl
5940   2B63             ; break; 
5941   2B63 0A 72 2B      jmp _switch102_exit ; case break
5942   2B66             _switch102_default:
5943   2B66             ; print("Error: Unknown argument type.\n"); 
5944   2B66             ; --- START FUNCTION CALL
5945   2B66 26 45 45      mov b, _s19 ; "Error: Unknown argument type.\n"
5946   2B69 FD AB         swp b
5947   2B6B D8            push b
5948   2B6C 07 16 2F      call print
5949   2B6F 51 02 00      add sp, 2
5950   2B72             ; --- END FUNCTION CALL
5951   2B72             _switch102_exit:
5952   2B72 0A 8A 2B      jmp _if101_exit
5953   2B75             _if101_else:
5954   2B75             ; putchar(*format_p); 
5955   2B75             ; --- START FUNCTION CALL
5956   2B75 FA FE FF      lea d, [bp + -2] ; $format_p
5957   2B78 2A            mov b, [d]
5958   2B79 38 00 00      mov c, 0
5959   2B7C 74            mov d, b
5960   2B7D 32            mov bl, [d]
5961   2B7E A7 00         mov bh, 0
5962   2B80 38 00 00      mov c, 0
5963   2B83 DD            push bl
5964   2B84 07 68 2D      call putchar
5965   2B87 51 01 00      add sp, 1
5966   2B8A             ; --- END FUNCTION CALL
5967   2B8A             _if101_exit:
5968   2B8A             _if100_exit:
5969   2B8A             ; format_p++; 
5970   2B8A FA FE FF      lea d, [bp + -2] ; $format_p
5971   2B8D 2A            mov b, [d]
5972   2B8E 38 00 00      mov c, 0
5973   2B91 FD 77         inc b
5974   2B93 FA FE FF      lea d, [bp + -2] ; $format_p
5975   2B96 FD 43         mov [d], b
5976   2B98 FD 7D         dec b
5977   2B9A             _for99_update:
5978   2B9A 0A BD 28      jmp _for99_cond
5979   2B9D             _for99_exit:
5980   2B9D F9            leave
5981   2B9E 09            ret
5982   2B9F             
5983   2B9F             print_signed_long:
5984   2B9F F8 00 00      enter 0 ; (push bp; mov bp, sp)
5985   2BA2             ; char digits[10];  // fits 2,147,483,647 
5986   2BA2 52 0A 00      sub sp, 10
5987   2BA5             ; int i = 0; 
5988   2BA5 52 02 00      sub sp, 2
5989   2BA8             ; --- START LOCAL VAR INITIALIZATION
5990   2BA8 FA F5 FF      lea d, [bp + -11] ; $i
5991   2BAB DA            push d
5992   2BAC FD 2E 00 00   mov32 cb, $00000000
5992   2BB0 00 00 
5993   2BB2 E7            pop d
5994   2BB3 FD 43         mov [d], b
5995   2BB5             ; --- END LOCAL VAR INITIALIZATION
5996   2BB5             ; unsigned long int absval; 
5997   2BB5 52 04 00      sub sp, 4
5998   2BB8             ; if (num < 0) { 
5999   2BB8             _if106_cond:
6000   2BB8 FA 05 00      lea d, [bp + 5] ; $num
6001   2BBB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6002   2BBE FD 39         mov c, b ; And place it into C
6003   2BC0 2A            mov b, [d] ; Lower Word in B
6004   2BC1             ; --- START RELATIONAL
6005   2BC1 D7            push a
6006   2BC2 FD D8         push g
6007   2BC4 11            mov a, b
6008   2BC5 FD 7A         mov g, c
6009   2BC7 FD 2E 00 00   mov32 cb, $00000000
6009   2BCB 00 00 
6010   2BCD 38 00 00      mov c, 0
6011   2BD0 FD AF         cmp32 ga, cb
6012   2BD2 FD 73         slt ; <
6013   2BD4 FD F1         pop g
6014   2BD6 E4            pop a
6015   2BD7             ; --- END RELATIONAL
6016   2BD7 C0 00 00      cmp b, 0
6017   2BDA C6 39 2C      je _if106_else
6018   2BDD             _if106_TRUE:
6019   2BDD             ; putchar('-'); 
6020   2BDD             ; --- START FUNCTION CALL
6021   2BDD FD 2E 2D 00   mov32 cb, $0000002d
6021   2BE1 00 00 
6022   2BE3 DD            push bl
6023   2BE4 07 68 2D      call putchar
6024   2BE7 51 01 00      add sp, 1
6025   2BEA             ; --- END FUNCTION CALL
6026   2BEA             ; absval = (unsigned long int)(-(num + 1)) + 1; 
6027   2BEA FA F1 FF      lea d, [bp + -15] ; $absval
6028   2BED DA            push d
6029   2BEE FA 05 00      lea d, [bp + 5] ; $num
6030   2BF1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6031   2BF4 FD 39         mov c, b ; And place it into C
6032   2BF6 2A            mov b, [d] ; Lower Word in B
6033   2BF7             ; --- START TERMS
6034   2BF7 D7            push a
6035   2BF8 FD D8         push g
6036   2BFA 11            mov a, b
6037   2BFB FD 7A         mov g, c
6038   2BFD FD 2E 01 00   mov32 cb, $00000001
6038   2C01 00 00 
6039   2C03 38 00 00      mov c, 0
6040   2C06 FD 15         add32 cb, ga
6041   2C08 FD F1         pop g
6042   2C0A E4            pop a
6043   2C0B             ; --- END TERMS
6044   2C0B 12            mov a, c
6045   2C0C 95            not a
6046   2C0D 97            not b
6047   2C0E 55 01 00      add b, 1
6048   2C11 5B 00 00      adc a, 0
6049   2C14 39            mov c, a
6050   2C15 A7 00         mov bh, 0
6051   2C17 38 00 00      mov c, 0
6052   2C1A             ; --- START TERMS
6053   2C1A D7            push a
6054   2C1B FD D8         push g
6055   2C1D 11            mov a, b
6056   2C1E FD 7A         mov g, c
6057   2C20 FD 2E 01 00   mov32 cb, $00000001
6057   2C24 00 00 
6058   2C26 38 00 00      mov c, 0
6059   2C29 FD 15         add32 cb, ga
6060   2C2B FD F1         pop g
6061   2C2D E4            pop a
6062   2C2E             ; --- END TERMS
6063   2C2E E7            pop d
6064   2C2F FD 43         mov [d], b
6065   2C31 28            mov b, c
6066   2C32 FD 44 02 00   mov [d + 2], b
6067   2C36 0A 53 2C      jmp _if106_exit
6068   2C39             _if106_else:
6069   2C39             ; absval = (unsigned long int)num; 
6070   2C39 FA F1 FF      lea d, [bp + -15] ; $absval
6071   2C3C DA            push d
6072   2C3D FA 05 00      lea d, [bp + 5] ; $num
6073   2C40 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6074   2C43 FD 39         mov c, b ; And place it into C
6075   2C45 2A            mov b, [d] ; Lower Word in B
6076   2C46 A7 00         mov bh, 0
6077   2C48 38 00 00      mov c, 0
6078   2C4B E7            pop d
6079   2C4C FD 43         mov [d], b
6080   2C4E 28            mov b, c
6081   2C4F FD 44 02 00   mov [d + 2], b
6082   2C53             _if106_exit:
6083   2C53             ; if (absval == 0) { 
6084   2C53             _if107_cond:
6085   2C53 FA F1 FF      lea d, [bp + -15] ; $absval
6086   2C56 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6087   2C59 FD 39         mov c, b ; And place it into C
6088   2C5B 2A            mov b, [d] ; Lower Word in B
6089   2C5C             ; --- START RELATIONAL
6090   2C5C D7            push a
6091   2C5D FD D8         push g
6092   2C5F 11            mov a, b
6093   2C60 FD 7A         mov g, c
6094   2C62 FD 2E 00 00   mov32 cb, $00000000
6094   2C66 00 00 
6095   2C68 38 00 00      mov c, 0
6096   2C6B FD AF         cmp32 ga, cb
6097   2C6D FD 71         seq ; ==
6098   2C6F FD F1         pop g
6099   2C71 E4            pop a
6100   2C72             ; --- END RELATIONAL
6101   2C72 C0 00 00      cmp b, 0
6102   2C75 C6 8A 2C      je _if107_exit
6103   2C78             _if107_TRUE:
6104   2C78             ; putchar('0'); 
6105   2C78             ; --- START FUNCTION CALL
6106   2C78 FD 2E 30 00   mov32 cb, $00000030
6106   2C7C 00 00 
6107   2C7E DD            push bl
6108   2C7F 07 68 2D      call putchar
6109   2C82 51 01 00      add sp, 1
6110   2C85             ; --- END FUNCTION CALL
6111   2C85             ; return; 
6112   2C85 F9            leave
6113   2C86 09            ret
6114   2C87 0A 8A 2C      jmp _if107_exit
6115   2C8A             _if107_exit:
6116   2C8A             ; while (absval > 0) { 
6117   2C8A             _while108_cond:
6118   2C8A FA F1 FF      lea d, [bp + -15] ; $absval
6119   2C8D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6120   2C90 FD 39         mov c, b ; And place it into C
6121   2C92 2A            mov b, [d] ; Lower Word in B
6122   2C93             ; --- START RELATIONAL
6123   2C93 D7            push a
6124   2C94 FD D8         push g
6125   2C96 11            mov a, b
6126   2C97 FD 7A         mov g, c
6127   2C99 FD 2E 00 00   mov32 cb, $00000000
6127   2C9D 00 00 
6128   2C9F 38 00 00      mov c, 0
6129   2CA2 FD AF         cmp32 ga, cb
6130   2CA4 FD 81         sgu
6131   2CA6 FD F1         pop g
6132   2CA8 E4            pop a
6133   2CA9             ; --- END RELATIONAL
6134   2CA9 C0 00 00      cmp b, 0
6135   2CAC C6 2A 2D      je _while108_exit
6136   2CAF             _while108_block:
6137   2CAF             ; digits[i++] = '0' + (absval % 10); 
6138   2CAF FA F7 FF      lea d, [bp + -9] ; $digits
6139   2CB2 D7            push a
6140   2CB3 DA            push d
6141   2CB4 FA F5 FF      lea d, [bp + -11] ; $i
6142   2CB7 2A            mov b, [d]
6143   2CB8 38 00 00      mov c, 0
6144   2CBB 11            mov a, b
6145   2CBC FD 77         inc b
6146   2CBE FA F5 FF      lea d, [bp + -11] ; $i
6147   2CC1 FD 43         mov [d], b
6148   2CC3 27            mov b, a
6149   2CC4 E7            pop d
6150   2CC5 5A            add d, b
6151   2CC6 E4            pop a
6152   2CC7 DA            push d
6153   2CC8 FD 2E 30 00   mov32 cb, $00000030
6153   2CCC 00 00 
6154   2CCE             ; --- START TERMS
6155   2CCE D7            push a
6156   2CCF 11            mov a, b
6157   2CD0 FA F1 FF      lea d, [bp + -15] ; $absval
6158   2CD3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6159   2CD6 FD 39         mov c, b ; And place it into C
6160   2CD8 2A            mov b, [d] ; Lower Word in B
6161   2CD9             ; --- START FACTORS
6162   2CD9 D7            push a
6163   2CDA FD D8         push g
6164   2CDC 11            mov a, b
6165   2CDD FD 7A         mov g, c
6166   2CDF FD 2E 0A 00   mov32 cb, $0000000a
6166   2CE3 00 00 
6167   2CE5 FD D8         push g ; save 'g' as the div instruction uses it
6168   2CE7 AE            div a, b ; %, a: quotient, b: remainder
6169   2CE8 11            mov a, b
6170   2CE9 FD F1         pop g
6171   2CEB FD 38         mov c, g
6172   2CED 27            mov b, a
6173   2CEE FD F1         pop g
6174   2CF0 E4            pop a
6175   2CF1             ; --- END FACTORS
6176   2CF1 FD 22 00 00   mov g, 0
6177   2CF5 FD 15         add32 cb, ga
6178   2CF7 E4            pop a
6179   2CF8             ; --- END TERMS
6180   2CF8 E7            pop d
6181   2CF9 FD 3E         mov [d], bl
6182   2CFB             ; absval = absval / 10; 
6183   2CFB FA F1 FF      lea d, [bp + -15] ; $absval
6184   2CFE DA            push d
6185   2CFF FA F1 FF      lea d, [bp + -15] ; $absval
6186   2D02 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6187   2D05 FD 39         mov c, b ; And place it into C
6188   2D07 2A            mov b, [d] ; Lower Word in B
6189   2D08             ; --- START FACTORS
6190   2D08 D7            push a
6191   2D09 FD D8         push g
6192   2D0B 11            mov a, b
6193   2D0C FD 7A         mov g, c
6194   2D0E FD 2E 0A 00   mov32 cb, $0000000a
6194   2D12 00 00 
6195   2D14 FD D8         push g ; save 'g' as the div instruction uses it
6196   2D16 AE            div a, b ; /, a: quotient, b: remainder
6197   2D17 FD F1         pop g
6198   2D19 FD 38         mov c, g
6199   2D1B 27            mov b, a
6200   2D1C FD F1         pop g
6201   2D1E E4            pop a
6202   2D1F             ; --- END FACTORS
6203   2D1F E7            pop d
6204   2D20 FD 43         mov [d], b
6205   2D22 28            mov b, c
6206   2D23 FD 44 02 00   mov [d + 2], b
6207   2D27 0A 8A 2C      jmp _while108_cond
6208   2D2A             _while108_exit:
6209   2D2A             ; while (i > 0) { 
6210   2D2A             _while115_cond:
6211   2D2A FA F5 FF      lea d, [bp + -11] ; $i
6212   2D2D 2A            mov b, [d]
6213   2D2E 38 00 00      mov c, 0
6214   2D31             ; --- START RELATIONAL
6215   2D31 D7            push a
6216   2D32 11            mov a, b
6217   2D33 FD 2E 00 00   mov32 cb, $00000000
6217   2D37 00 00 
6218   2D39 B0            cmp a, b
6219   2D3A FD 7F         sgt ; >
6220   2D3C E4            pop a
6221   2D3D             ; --- END RELATIONAL
6222   2D3D C0 00 00      cmp b, 0
6223   2D40 C6 66 2D      je _while115_exit
6224   2D43             _while115_block:
6225   2D43             ; putchar(digits[--i]); 
6226   2D43             ; --- START FUNCTION CALL
6227   2D43 FA F7 FF      lea d, [bp + -9] ; $digits
6228   2D46 D7            push a
6229   2D47 DA            push d
6230   2D48 FA F5 FF      lea d, [bp + -11] ; $i
6231   2D4B 2A            mov b, [d]
6232   2D4C FD 7D         dec b
6233   2D4E FA F5 FF      lea d, [bp + -11] ; $i
6234   2D51 FD 43         mov [d], b
6235   2D53 E7            pop d
6236   2D54 5A            add d, b
6237   2D55 E4            pop a
6238   2D56 32            mov bl, [d]
6239   2D57 A7 00         mov bh, 0
6240   2D59 38 00 00      mov c, 0
6241   2D5C DD            push bl
6242   2D5D 07 68 2D      call putchar
6243   2D60 51 01 00      add sp, 1
6244   2D63             ; --- END FUNCTION CALL
6245   2D63 0A 2A 2D      jmp _while115_cond
6246   2D66             _while115_exit:
6247   2D66 F9            leave
6248   2D67 09            ret
6249   2D68             
6250   2D68             putchar:
6251   2D68 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6252   2D6B             ; --- BEGIN INLINE ASM SEGMENT
6253   2D6B FA 05 00      lea d, [bp + 5] ; $c
6254   2D6E 1E            mov al, [d]
6255   2D6F 23            mov ah, al
6256   2D70 19 00         mov al, 0
6257   2D72 05 03         syscall sys_io      ; char in AH
6258   2D74             ; --- END INLINE ASM SEGMENT
6259   2D74 F9            leave
6260   2D75 09            ret
6261   2D76             
6262   2D76             print_unsigned_long:
6263   2D76 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6264   2D79             ; char digits[10]; 
6265   2D79 52 0A 00      sub sp, 10
6266   2D7C             ; int i = 0; 
6267   2D7C 52 02 00      sub sp, 2
6268   2D7F             ; --- START LOCAL VAR INITIALIZATION
6269   2D7F FA F5 FF      lea d, [bp + -11] ; $i
6270   2D82 DA            push d
6271   2D83 FD 2E 00 00   mov32 cb, $00000000
6271   2D87 00 00 
6272   2D89 E7            pop d
6273   2D8A FD 43         mov [d], b
6274   2D8C             ; --- END LOCAL VAR INITIALIZATION
6275   2D8C             ; if(num == 0){ 
6276   2D8C             _if116_cond:
6277   2D8C FA 05 00      lea d, [bp + 5] ; $num
6278   2D8F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6279   2D92 FD 39         mov c, b ; And place it into C
6280   2D94 2A            mov b, [d] ; Lower Word in B
6281   2D95             ; --- START RELATIONAL
6282   2D95 D7            push a
6283   2D96 FD D8         push g
6284   2D98 11            mov a, b
6285   2D99 FD 7A         mov g, c
6286   2D9B FD 2E 00 00   mov32 cb, $00000000
6286   2D9F 00 00 
6287   2DA1 38 00 00      mov c, 0
6288   2DA4 FD AF         cmp32 ga, cb
6289   2DA6 FD 71         seq ; ==
6290   2DA8 FD F1         pop g
6291   2DAA E4            pop a
6292   2DAB             ; --- END RELATIONAL
6293   2DAB C0 00 00      cmp b, 0
6294   2DAE C6 C3 2D      je _if116_exit
6295   2DB1             _if116_TRUE:
6296   2DB1             ; putchar('0'); 
6297   2DB1             ; --- START FUNCTION CALL
6298   2DB1 FD 2E 30 00   mov32 cb, $00000030
6298   2DB5 00 00 
6299   2DB7 DD            push bl
6300   2DB8 07 68 2D      call putchar
6301   2DBB 51 01 00      add sp, 1
6302   2DBE             ; --- END FUNCTION CALL
6303   2DBE             ; return; 
6304   2DBE F9            leave
6305   2DBF 09            ret
6306   2DC0 0A C3 2D      jmp _if116_exit
6307   2DC3             _if116_exit:
6308   2DC3             ; while (num > 0) { 
6309   2DC3             _while117_cond:
6310   2DC3 FA 05 00      lea d, [bp + 5] ; $num
6311   2DC6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6312   2DC9 FD 39         mov c, b ; And place it into C
6313   2DCB 2A            mov b, [d] ; Lower Word in B
6314   2DCC             ; --- START RELATIONAL
6315   2DCC D7            push a
6316   2DCD FD D8         push g
6317   2DCF 11            mov a, b
6318   2DD0 FD 7A         mov g, c
6319   2DD2 FD 2E 00 00   mov32 cb, $00000000
6319   2DD6 00 00 
6320   2DD8 38 00 00      mov c, 0
6321   2DDB FD AF         cmp32 ga, cb
6322   2DDD FD 81         sgu
6323   2DDF FD F1         pop g
6324   2DE1 E4            pop a
6325   2DE2             ; --- END RELATIONAL
6326   2DE2 C0 00 00      cmp b, 0
6327   2DE5 C6 63 2E      je _while117_exit
6328   2DE8             _while117_block:
6329   2DE8             ; digits[i++] = '0' + (num % 10); 
6330   2DE8 FA F7 FF      lea d, [bp + -9] ; $digits
6331   2DEB D7            push a
6332   2DEC DA            push d
6333   2DED FA F5 FF      lea d, [bp + -11] ; $i
6334   2DF0 2A            mov b, [d]
6335   2DF1 38 00 00      mov c, 0
6336   2DF4 11            mov a, b
6337   2DF5 FD 77         inc b
6338   2DF7 FA F5 FF      lea d, [bp + -11] ; $i
6339   2DFA FD 43         mov [d], b
6340   2DFC 27            mov b, a
6341   2DFD E7            pop d
6342   2DFE 5A            add d, b
6343   2DFF E4            pop a
6344   2E00 DA            push d
6345   2E01 FD 2E 30 00   mov32 cb, $00000030
6345   2E05 00 00 
6346   2E07             ; --- START TERMS
6347   2E07 D7            push a
6348   2E08 11            mov a, b
6349   2E09 FA 05 00      lea d, [bp + 5] ; $num
6350   2E0C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6351   2E0F FD 39         mov c, b ; And place it into C
6352   2E11 2A            mov b, [d] ; Lower Word in B
6353   2E12             ; --- START FACTORS
6354   2E12 D7            push a
6355   2E13 FD D8         push g
6356   2E15 11            mov a, b
6357   2E16 FD 7A         mov g, c
6358   2E18 FD 2E 0A 00   mov32 cb, $0000000a
6358   2E1C 00 00 
6359   2E1E FD D8         push g ; save 'g' as the div instruction uses it
6360   2E20 AE            div a, b ; %, a: quotient, b: remainder
6361   2E21 11            mov a, b
6362   2E22 FD F1         pop g
6363   2E24 FD 38         mov c, g
6364   2E26 27            mov b, a
6365   2E27 FD F1         pop g
6366   2E29 E4            pop a
6367   2E2A             ; --- END FACTORS
6368   2E2A FD 22 00 00   mov g, 0
6369   2E2E FD 15         add32 cb, ga
6370   2E30 E4            pop a
6371   2E31             ; --- END TERMS
6372   2E31 E7            pop d
6373   2E32 FD 3E         mov [d], bl
6374   2E34             ; num = num / 10; 
6375   2E34 FA 05 00      lea d, [bp + 5] ; $num
6376   2E37 DA            push d
6377   2E38 FA 05 00      lea d, [bp + 5] ; $num
6378   2E3B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6379   2E3E FD 39         mov c, b ; And place it into C
6380   2E40 2A            mov b, [d] ; Lower Word in B
6381   2E41             ; --- START FACTORS
6382   2E41 D7            push a
6383   2E42 FD D8         push g
6384   2E44 11            mov a, b
6385   2E45 FD 7A         mov g, c
6386   2E47 FD 2E 0A 00   mov32 cb, $0000000a
6386   2E4B 00 00 
6387   2E4D FD D8         push g ; save 'g' as the div instruction uses it
6388   2E4F AE            div a, b ; /, a: quotient, b: remainder
6389   2E50 FD F1         pop g
6390   2E52 FD 38         mov c, g
6391   2E54 27            mov b, a
6392   2E55 FD F1         pop g
6393   2E57 E4            pop a
6394   2E58             ; --- END FACTORS
6395   2E58 E7            pop d
6396   2E59 FD 43         mov [d], b
6397   2E5B 28            mov b, c
6398   2E5C FD 44 02 00   mov [d + 2], b
6399   2E60 0A C3 2D      jmp _while117_cond
6400   2E63             _while117_exit:
6401   2E63             ; while (i > 0) { 
6402   2E63             _while124_cond:
6403   2E63 FA F5 FF      lea d, [bp + -11] ; $i
6404   2E66 2A            mov b, [d]
6405   2E67 38 00 00      mov c, 0
6406   2E6A             ; --- START RELATIONAL
6407   2E6A D7            push a
6408   2E6B 11            mov a, b
6409   2E6C FD 2E 00 00   mov32 cb, $00000000
6409   2E70 00 00 
6410   2E72 B0            cmp a, b
6411   2E73 FD 7F         sgt ; >
6412   2E75 E4            pop a
6413   2E76             ; --- END RELATIONAL
6414   2E76 C0 00 00      cmp b, 0
6415   2E79 C6 9F 2E      je _while124_exit
6416   2E7C             _while124_block:
6417   2E7C             ; putchar(digits[--i]); 
6418   2E7C             ; --- START FUNCTION CALL
6419   2E7C FA F7 FF      lea d, [bp + -9] ; $digits
6420   2E7F D7            push a
6421   2E80 DA            push d
6422   2E81 FA F5 FF      lea d, [bp + -11] ; $i
6423   2E84 2A            mov b, [d]
6424   2E85 FD 7D         dec b
6425   2E87 FA F5 FF      lea d, [bp + -11] ; $i
6426   2E8A FD 43         mov [d], b
6427   2E8C E7            pop d
6428   2E8D 5A            add d, b
6429   2E8E E4            pop a
6430   2E8F 32            mov bl, [d]
6431   2E90 A7 00         mov bh, 0
6432   2E92 38 00 00      mov c, 0
6433   2E95 DD            push bl
6434   2E96 07 68 2D      call putchar
6435   2E99 51 01 00      add sp, 1
6436   2E9C             ; --- END FUNCTION CALL
6437   2E9C 0A 63 2E      jmp _while124_cond
6438   2E9F             _while124_exit:
6439   2E9F F9            leave
6440   2EA0 09            ret
6441   2EA1             
6442   2EA1             printx32:
6443   2EA1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6444   2EA4             ; --- BEGIN INLINE ASM SEGMENT
6445   2EA4 FA 05 00      lea d, [bp + 5] ; $hex
6446   2EA7 2B 02 00      mov b, [d+2]
6447   2EAA 07 B3 2E      call print_u16x_printx32
6448   2EAD 2A            mov b, [d]
6449   2EAE 07 B3 2E      call print_u16x_printx32
6450   2EB1             ; --- END INLINE ASM SEGMENT
6451   2EB1             ; return; 
6452   2EB1 F9            leave
6453   2EB2 09            ret
6454   2EB3             ; --- BEGIN INLINE ASM SEGMENT
6455   2EB3             print_u16x_printx32:
6456   2EB3 D7            push a
6457   2EB4 D8            push b
6458   2EB5 DD            push bl
6459   2EB6 30            mov bl, bh
6460   2EB7 07 D5 2E      call _itoa_printx32        ; convert bh to char in A
6461   2EBA 2F            mov bl, al        ; save al
6462   2EBB 19 00         mov al, 0
6463   2EBD 05 03         syscall sys_io        ; display AH
6464   2EBF 24            mov ah, bl        ; retrieve al
6465   2EC0 19 00         mov al, 0
6466   2EC2 05 03         syscall sys_io        ; display AL
6467   2EC4 EA            pop bl
6468   2EC5 07 D5 2E      call _itoa_printx32        ; convert bh to char in A
6469   2EC8 2F            mov bl, al        ; save al
6470   2EC9 19 00         mov al, 0
6471   2ECB 05 03         syscall sys_io        ; display AH
6472   2ECD 24            mov ah, bl        ; retrieve al
6473   2ECE 19 00         mov al, 0
6474   2ED0 05 03         syscall sys_io        ; display AL
6475   2ED2 E5            pop b
6476   2ED3 E4            pop a
6477   2ED4 09            ret
6478   2ED5             _itoa_printx32:
6479   2ED5 DA            push d
6480   2ED6 D8            push b
6481   2ED7 A7 00         mov bh, 0
6482   2ED9 FD A4 04      shr bl, 4  
6483   2EDC 74            mov d, b
6484   2EDD 1F EF 2E      mov al, [d + s_hex_digits_printx32]
6485   2EE0 23            mov ah, al
6486   2EE1 E5            pop b
6487   2EE2 D8            push b
6488   2EE3 A7 00         mov bh, 0
6489   2EE5 FD 87 0F      and bl, $0F
6490   2EE8 74            mov d, b
6491   2EE9 1F EF 2E      mov al, [d + s_hex_digits_printx32]
6492   2EEC E5            pop b
6493   2EED E7            pop d
6494   2EEE 09            ret
6495   2EEF 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
6495   2EF3 34 35 36 37 
6495   2EF7 38 39 41 42 
6495   2EFB 43 44 45 46 
6496   2EFF             ; --- END INLINE ASM SEGMENT
6497   2EFF F9            leave
6498   2F00 09            ret
6499   2F01             
6500   2F01             err:
6501   2F01 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6502   2F04             ; print(e); 
6503   2F04             ; --- START FUNCTION CALL
6504   2F04 FA 05 00      lea d, [bp + 5] ; $e
6505   2F07 2A            mov b, [d]
6506   2F08 38 00 00      mov c, 0
6507   2F0B FD AB         swp b
6508   2F0D D8            push b
6509   2F0E 07 16 2F      call print
6510   2F11 51 02 00      add sp, 2
6511   2F14             ; --- END FUNCTION CALL
6512   2F14 F9            leave
6513   2F15 09            ret
6514   2F16             
6515   2F16             print:
6516   2F16 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6517   2F19             ; --- BEGIN INLINE ASM SEGMENT
6518   2F19 FA 05 00      lea d, [bp + 5] ; $s
6519   2F1C FD 2A         mov d, [d]
6520   2F1E             _puts_L1_print:
6521   2F1E 1E            mov al, [d]
6522   2F1F B9 00         cmp al, 0
6523   2F21 C6 2D 2F      jz _puts_END_print
6524   2F24 23            mov ah, al
6525   2F25 19 00         mov al, 0
6526   2F27 05 03         syscall sys_io
6527   2F29 79            inc d
6528   2F2A 0A 1E 2F      jmp _puts_L1_print
6529   2F2D             _puts_END_print:
6530   2F2D             ; --- END INLINE ASM SEGMENT
6531   2F2D F9            leave
6532   2F2E 09            ret
6533   2F2F             
6534   2F2F             print_signed:
6535   2F2F F8 00 00      enter 0 ; (push bp; mov bp, sp)
6536   2F32             ; char digits[5];  // enough for "-32768" 
6537   2F32 52 05 00      sub sp, 5
6538   2F35             ; int i = 0; 
6539   2F35 52 02 00      sub sp, 2
6540   2F38             ; --- START LOCAL VAR INITIALIZATION
6541   2F38 FA FA FF      lea d, [bp + -6] ; $i
6542   2F3B DA            push d
6543   2F3C FD 2E 00 00   mov32 cb, $00000000
6543   2F40 00 00 
6544   2F42 E7            pop d
6545   2F43 FD 43         mov [d], b
6546   2F45             ; --- END LOCAL VAR INITIALIZATION
6547   2F45             ; unsigned int absval; 
6548   2F45 52 02 00      sub sp, 2
6549   2F48             ; if (num < 0) { 
6550   2F48             _if125_cond:
6551   2F48 FA 05 00      lea d, [bp + 5] ; $num
6552   2F4B 2A            mov b, [d]
6553   2F4C 38 00 00      mov c, 0
6554   2F4F             ; --- START RELATIONAL
6555   2F4F D7            push a
6556   2F50 11            mov a, b
6557   2F51 FD 2E 00 00   mov32 cb, $00000000
6557   2F55 00 00 
6558   2F57 B0            cmp a, b
6559   2F58 FD 73         slt ; < (signed)
6560   2F5A E4            pop a
6561   2F5B             ; --- END RELATIONAL
6562   2F5B C0 00 00      cmp b, 0
6563   2F5E C6 95 2F      je _if125_else
6564   2F61             _if125_TRUE:
6565   2F61             ; putchar('-'); 
6566   2F61             ; --- START FUNCTION CALL
6567   2F61 FD 2E 2D 00   mov32 cb, $0000002d
6567   2F65 00 00 
6568   2F67 DD            push bl
6569   2F68 07 68 2D      call putchar
6570   2F6B 51 01 00      add sp, 1
6571   2F6E             ; --- END FUNCTION CALL
6572   2F6E             ; absval = (unsigned int)(-(num + 1)) + 1;  // safe for -32768 
6573   2F6E FA F8 FF      lea d, [bp + -8] ; $absval
6574   2F71 DA            push d
6575   2F72 FA 05 00      lea d, [bp + 5] ; $num
6576   2F75 2A            mov b, [d]
6577   2F76 38 00 00      mov c, 0
6578   2F79             ; --- START TERMS
6579   2F79 D7            push a
6580   2F7A 11            mov a, b
6581   2F7B FD 2E 01 00   mov32 cb, $00000001
6581   2F7F 00 00 
6582   2F81 56            add b, a
6583   2F82 E4            pop a
6584   2F83             ; --- END TERMS
6585   2F83 FD 97         neg b
6586   2F85             ; --- START TERMS
6587   2F85 D7            push a
6588   2F86 11            mov a, b
6589   2F87 FD 2E 01 00   mov32 cb, $00000001
6589   2F8B 00 00 
6590   2F8D 56            add b, a
6591   2F8E E4            pop a
6592   2F8F             ; --- END TERMS
6593   2F8F E7            pop d
6594   2F90 FD 43         mov [d], b
6595   2F92 0A A3 2F      jmp _if125_exit
6596   2F95             _if125_else:
6597   2F95             ; absval = (unsigned int)num; 
6598   2F95 FA F8 FF      lea d, [bp + -8] ; $absval
6599   2F98 DA            push d
6600   2F99 FA 05 00      lea d, [bp + 5] ; $num
6601   2F9C 2A            mov b, [d]
6602   2F9D 38 00 00      mov c, 0
6603   2FA0 E7            pop d
6604   2FA1 FD 43         mov [d], b
6605   2FA3             _if125_exit:
6606   2FA3             ; if (absval == 0) { 
6607   2FA3             _if126_cond:
6608   2FA3 FA F8 FF      lea d, [bp + -8] ; $absval
6609   2FA6 2A            mov b, [d]
6610   2FA7 38 00 00      mov c, 0
6611   2FAA             ; --- START RELATIONAL
6612   2FAA D7            push a
6613   2FAB 11            mov a, b
6614   2FAC FD 2E 00 00   mov32 cb, $00000000
6614   2FB0 00 00 
6615   2FB2 B0            cmp a, b
6616   2FB3 FD 71         seq ; ==
6617   2FB5 E4            pop a
6618   2FB6             ; --- END RELATIONAL
6619   2FB6 C0 00 00      cmp b, 0
6620   2FB9 C6 CE 2F      je _if126_exit
6621   2FBC             _if126_TRUE:
6622   2FBC             ; putchar('0'); 
6623   2FBC             ; --- START FUNCTION CALL
6624   2FBC FD 2E 30 00   mov32 cb, $00000030
6624   2FC0 00 00 
6625   2FC2 DD            push bl
6626   2FC3 07 68 2D      call putchar
6627   2FC6 51 01 00      add sp, 1
6628   2FC9             ; --- END FUNCTION CALL
6629   2FC9             ; return; 
6630   2FC9 F9            leave
6631   2FCA 09            ret
6632   2FCB 0A CE 2F      jmp _if126_exit
6633   2FCE             _if126_exit:
6634   2FCE             ; while (absval > 0) { 
6635   2FCE             _while127_cond:
6636   2FCE FA F8 FF      lea d, [bp + -8] ; $absval
6637   2FD1 2A            mov b, [d]
6638   2FD2 38 00 00      mov c, 0
6639   2FD5             ; --- START RELATIONAL
6640   2FD5 D7            push a
6641   2FD6 11            mov a, b
6642   2FD7 FD 2E 00 00   mov32 cb, $00000000
6642   2FDB 00 00 
6643   2FDD B0            cmp a, b
6644   2FDE FD 81         sgu ; > (unsigned)
6645   2FE0 E4            pop a
6646   2FE1             ; --- END RELATIONAL
6647   2FE1 C0 00 00      cmp b, 0
6648   2FE4 C6 54 30      je _while127_exit
6649   2FE7             _while127_block:
6650   2FE7             ; digits[i++] = '0' + (absval % 10); 
6651   2FE7 FA FC FF      lea d, [bp + -4] ; $digits
6652   2FEA D7            push a
6653   2FEB DA            push d
6654   2FEC FA FA FF      lea d, [bp + -6] ; $i
6655   2FEF 2A            mov b, [d]
6656   2FF0 38 00 00      mov c, 0
6657   2FF3 11            mov a, b
6658   2FF4 FD 77         inc b
6659   2FF6 FA FA FF      lea d, [bp + -6] ; $i
6660   2FF9 FD 43         mov [d], b
6661   2FFB 27            mov b, a
6662   2FFC E7            pop d
6663   2FFD 5A            add d, b
6664   2FFE E4            pop a
6665   2FFF DA            push d
6666   3000 FD 2E 30 00   mov32 cb, $00000030
6666   3004 00 00 
6667   3006             ; --- START TERMS
6668   3006 D7            push a
6669   3007 11            mov a, b
6670   3008 FA F8 FF      lea d, [bp + -8] ; $absval
6671   300B 2A            mov b, [d]
6672   300C 38 00 00      mov c, 0
6673   300F             ; --- START FACTORS
6674   300F D7            push a
6675   3010 FD D8         push g
6676   3012 11            mov a, b
6677   3013 FD 7A         mov g, c
6678   3015 FD 2E 0A 00   mov32 cb, $0000000a
6678   3019 00 00 
6679   301B FD D8         push g ; save 'g' as the div instruction uses it
6680   301D AE            div a, b ; %, a: quotient, b: remainder
6681   301E 11            mov a, b
6682   301F FD F1         pop g
6683   3021 FD 38         mov c, g
6684   3023 27            mov b, a
6685   3024 FD F1         pop g
6686   3026 E4            pop a
6687   3027             ; --- END FACTORS
6688   3027 56            add b, a
6689   3028 E4            pop a
6690   3029             ; --- END TERMS
6691   3029 E7            pop d
6692   302A FD 3E         mov [d], bl
6693   302C             ; absval = absval / 10; 
6694   302C FA F8 FF      lea d, [bp + -8] ; $absval
6695   302F DA            push d
6696   3030 FA F8 FF      lea d, [bp + -8] ; $absval
6697   3033 2A            mov b, [d]
6698   3034 38 00 00      mov c, 0
6699   3037             ; --- START FACTORS
6700   3037 D7            push a
6701   3038 FD D8         push g
6702   303A 11            mov a, b
6703   303B FD 7A         mov g, c
6704   303D FD 2E 0A 00   mov32 cb, $0000000a
6704   3041 00 00 
6705   3043 FD D8         push g ; save 'g' as the div instruction uses it
6706   3045 AE            div a, b ; /, a: quotient, b: remainder
6707   3046 FD F1         pop g
6708   3048 FD 38         mov c, g
6709   304A 27            mov b, a
6710   304B FD F1         pop g
6711   304D E4            pop a
6712   304E             ; --- END FACTORS
6713   304E E7            pop d
6714   304F FD 43         mov [d], b
6715   3051 0A CE 2F      jmp _while127_cond
6716   3054             _while127_exit:
6717   3054             ; while (i > 0) { 
6718   3054             _while134_cond:
6719   3054 FA FA FF      lea d, [bp + -6] ; $i
6720   3057 2A            mov b, [d]
6721   3058 38 00 00      mov c, 0
6722   305B             ; --- START RELATIONAL
6723   305B D7            push a
6724   305C 11            mov a, b
6725   305D FD 2E 00 00   mov32 cb, $00000000
6725   3061 00 00 
6726   3063 B0            cmp a, b
6727   3064 FD 7F         sgt ; >
6728   3066 E4            pop a
6729   3067             ; --- END RELATIONAL
6730   3067 C0 00 00      cmp b, 0
6731   306A C6 90 30      je _while134_exit
6732   306D             _while134_block:
6733   306D             ; putchar(digits[--i]); 
6734   306D             ; --- START FUNCTION CALL
6735   306D FA FC FF      lea d, [bp + -4] ; $digits
6736   3070 D7            push a
6737   3071 DA            push d
6738   3072 FA FA FF      lea d, [bp + -6] ; $i
6739   3075 2A            mov b, [d]
6740   3076 FD 7D         dec b
6741   3078 FA FA FF      lea d, [bp + -6] ; $i
6742   307B FD 43         mov [d], b
6743   307D E7            pop d
6744   307E 5A            add d, b
6745   307F E4            pop a
6746   3080 32            mov bl, [d]
6747   3081 A7 00         mov bh, 0
6748   3083 38 00 00      mov c, 0
6749   3086 DD            push bl
6750   3087 07 68 2D      call putchar
6751   308A 51 01 00      add sp, 1
6752   308D             ; --- END FUNCTION CALL
6753   308D 0A 54 30      jmp _while134_cond
6754   3090             _while134_exit:
6755   3090 F9            leave
6756   3091 09            ret
6757   3092             
6758   3092             print_unsigned:
6759   3092 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6760   3095             ; char digits[5]; 
6761   3095 52 05 00      sub sp, 5
6762   3098             ; int i = 0; 
6763   3098 52 02 00      sub sp, 2
6764   309B             ; --- START LOCAL VAR INITIALIZATION
6765   309B FA FA FF      lea d, [bp + -6] ; $i
6766   309E DA            push d
6767   309F FD 2E 00 00   mov32 cb, $00000000
6767   30A3 00 00 
6768   30A5 E7            pop d
6769   30A6 FD 43         mov [d], b
6770   30A8             ; --- END LOCAL VAR INITIALIZATION
6771   30A8             ; if(num == 0){ 
6772   30A8             _if135_cond:
6773   30A8 FA 05 00      lea d, [bp + 5] ; $num
6774   30AB 2A            mov b, [d]
6775   30AC 38 00 00      mov c, 0
6776   30AF             ; --- START RELATIONAL
6777   30AF D7            push a
6778   30B0 11            mov a, b
6779   30B1 FD 2E 00 00   mov32 cb, $00000000
6779   30B5 00 00 
6780   30B7 B0            cmp a, b
6781   30B8 FD 71         seq ; ==
6782   30BA E4            pop a
6783   30BB             ; --- END RELATIONAL
6784   30BB C0 00 00      cmp b, 0
6785   30BE C6 D3 30      je _if135_exit
6786   30C1             _if135_TRUE:
6787   30C1             ; putchar('0'); 
6788   30C1             ; --- START FUNCTION CALL
6789   30C1 FD 2E 30 00   mov32 cb, $00000030
6789   30C5 00 00 
6790   30C7 DD            push bl
6791   30C8 07 68 2D      call putchar
6792   30CB 51 01 00      add sp, 1
6793   30CE             ; --- END FUNCTION CALL
6794   30CE             ; return; 
6795   30CE F9            leave
6796   30CF 09            ret
6797   30D0 0A D3 30      jmp _if135_exit
6798   30D3             _if135_exit:
6799   30D3             ; while (num > 0) { 
6800   30D3             _while136_cond:
6801   30D3 FA 05 00      lea d, [bp + 5] ; $num
6802   30D6 2A            mov b, [d]
6803   30D7 38 00 00      mov c, 0
6804   30DA             ; --- START RELATIONAL
6805   30DA D7            push a
6806   30DB 11            mov a, b
6807   30DC FD 2E 00 00   mov32 cb, $00000000
6807   30E0 00 00 
6808   30E2 B0            cmp a, b
6809   30E3 FD 81         sgu ; > (unsigned)
6810   30E5 E4            pop a
6811   30E6             ; --- END RELATIONAL
6812   30E6 C0 00 00      cmp b, 0
6813   30E9 C6 59 31      je _while136_exit
6814   30EC             _while136_block:
6815   30EC             ; digits[i++] = '0' + (num % 10); 
6816   30EC FA FC FF      lea d, [bp + -4] ; $digits
6817   30EF D7            push a
6818   30F0 DA            push d
6819   30F1 FA FA FF      lea d, [bp + -6] ; $i
6820   30F4 2A            mov b, [d]
6821   30F5 38 00 00      mov c, 0
6822   30F8 11            mov a, b
6823   30F9 FD 77         inc b
6824   30FB FA FA FF      lea d, [bp + -6] ; $i
6825   30FE FD 43         mov [d], b
6826   3100 27            mov b, a
6827   3101 E7            pop d
6828   3102 5A            add d, b
6829   3103 E4            pop a
6830   3104 DA            push d
6831   3105 FD 2E 30 00   mov32 cb, $00000030
6831   3109 00 00 
6832   310B             ; --- START TERMS
6833   310B D7            push a
6834   310C 11            mov a, b
6835   310D FA 05 00      lea d, [bp + 5] ; $num
6836   3110 2A            mov b, [d]
6837   3111 38 00 00      mov c, 0
6838   3114             ; --- START FACTORS
6839   3114 D7            push a
6840   3115 FD D8         push g
6841   3117 11            mov a, b
6842   3118 FD 7A         mov g, c
6843   311A FD 2E 0A 00   mov32 cb, $0000000a
6843   311E 00 00 
6844   3120 FD D8         push g ; save 'g' as the div instruction uses it
6845   3122 AE            div a, b ; %, a: quotient, b: remainder
6846   3123 11            mov a, b
6847   3124 FD F1         pop g
6848   3126 FD 38         mov c, g
6849   3128 27            mov b, a
6850   3129 FD F1         pop g
6851   312B E4            pop a
6852   312C             ; --- END FACTORS
6853   312C 56            add b, a
6854   312D E4            pop a
6855   312E             ; --- END TERMS
6856   312E E7            pop d
6857   312F FD 3E         mov [d], bl
6858   3131             ; num = num / 10; 
6859   3131 FA 05 00      lea d, [bp + 5] ; $num
6860   3134 DA            push d
6861   3135 FA 05 00      lea d, [bp + 5] ; $num
6862   3138 2A            mov b, [d]
6863   3139 38 00 00      mov c, 0
6864   313C             ; --- START FACTORS
6865   313C D7            push a
6866   313D FD D8         push g
6867   313F 11            mov a, b
6868   3140 FD 7A         mov g, c
6869   3142 FD 2E 0A 00   mov32 cb, $0000000a
6869   3146 00 00 
6870   3148 FD D8         push g ; save 'g' as the div instruction uses it
6871   314A AE            div a, b ; /, a: quotient, b: remainder
6872   314B FD F1         pop g
6873   314D FD 38         mov c, g
6874   314F 27            mov b, a
6875   3150 FD F1         pop g
6876   3152 E4            pop a
6877   3153             ; --- END FACTORS
6878   3153 E7            pop d
6879   3154 FD 43         mov [d], b
6880   3156 0A D3 30      jmp _while136_cond
6881   3159             _while136_exit:
6882   3159             ; while (i > 0) { 
6883   3159             _while143_cond:
6884   3159 FA FA FF      lea d, [bp + -6] ; $i
6885   315C 2A            mov b, [d]
6886   315D 38 00 00      mov c, 0
6887   3160             ; --- START RELATIONAL
6888   3160 D7            push a
6889   3161 11            mov a, b
6890   3162 FD 2E 00 00   mov32 cb, $00000000
6890   3166 00 00 
6891   3168 B0            cmp a, b
6892   3169 FD 7F         sgt ; >
6893   316B E4            pop a
6894   316C             ; --- END RELATIONAL
6895   316C C0 00 00      cmp b, 0
6896   316F C6 95 31      je _while143_exit
6897   3172             _while143_block:
6898   3172             ; putchar(digits[--i]); 
6899   3172             ; --- START FUNCTION CALL
6900   3172 FA FC FF      lea d, [bp + -4] ; $digits
6901   3175 D7            push a
6902   3176 DA            push d
6903   3177 FA FA FF      lea d, [bp + -6] ; $i
6904   317A 2A            mov b, [d]
6905   317B FD 7D         dec b
6906   317D FA FA FF      lea d, [bp + -6] ; $i
6907   3180 FD 43         mov [d], b
6908   3182 E7            pop d
6909   3183 5A            add d, b
6910   3184 E4            pop a
6911   3185 32            mov bl, [d]
6912   3186 A7 00         mov bh, 0
6913   3188 38 00 00      mov c, 0
6914   318B DD            push bl
6915   318C 07 68 2D      call putchar
6916   318F 51 01 00      add sp, 1
6917   3192             ; --- END FUNCTION CALL
6918   3192 0A 59 31      jmp _while143_cond
6919   3195             _while143_exit:
6920   3195 F9            leave
6921   3196 09            ret
6922   3197             
6923   3197             printx16:
6924   3197 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6925   319A             ; --- BEGIN INLINE ASM SEGMENT
6926   319A FA 05 00      lea d, [bp + 5] ; $hex
6927   319D 2A            mov b, [d]
6928   319E             print_u16x_printx16:
6929   319E DD            push bl
6930   319F 30            mov bl, bh
6931   31A0 07 BD 31      call _itoa_printx16        ; convert bh to char in A
6932   31A3 2F            mov bl, al        ; save al
6933   31A4 19 00         mov al, 0
6934   31A6 05 03         syscall sys_io        ; display AH
6935   31A8 24            mov ah, bl        ; retrieve al
6936   31A9 19 00         mov al, 0
6937   31AB 05 03         syscall sys_io        ; display AL
6938   31AD EA            pop bl
6939   31AE 07 BD 31      call _itoa_printx16        ; convert bh to char in A
6940   31B1 2F            mov bl, al        ; save al
6941   31B2 19 00         mov al, 0
6942   31B4 05 03         syscall sys_io        ; display AH
6943   31B6 24            mov ah, bl        ; retrieve al
6944   31B7 19 00         mov al, 0
6945   31B9 05 03         syscall sys_io        ; display AL
6946   31BB             ; --- END INLINE ASM SEGMENT
6947   31BB             ; return; 
6948   31BB F9            leave
6949   31BC 09            ret
6950   31BD             ; --- BEGIN INLINE ASM SEGMENT
6951   31BD             _itoa_printx16:
6952   31BD DA            push d
6953   31BE D8            push b
6954   31BF A7 00         mov bh, 0
6955   31C1 FD A4 04      shr bl, 4  
6956   31C4 74            mov d, b
6957   31C5 1F D7 31      mov al, [d + s_hex_digits_printx16]
6958   31C8 23            mov ah, al
6959   31C9 E5            pop b
6960   31CA D8            push b
6961   31CB A7 00         mov bh, 0
6962   31CD FD 87 0F      and bl, $0F
6963   31D0 74            mov d, b
6964   31D1 1F D7 31      mov al, [d + s_hex_digits_printx16]
6965   31D4 E5            pop b
6966   31D5 E7            pop d
6967   31D6 09            ret
6968   31D7 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
6968   31DB 34 35 36 37 
6968   31DF 38 39 41 42 
6968   31E3 43 44 45 46 
6969   31E7             ; --- END INLINE ASM SEGMENT
6970   31E7 F9            leave
6971   31E8 09            ret
6972   31E9             
6973   31E9             convert_constant:
6974   31E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6975   31EC             ; char *s; 
6976   31EC 52 01 00      sub sp, 1
6977   31EF             ; char *t; 
6978   31EF 52 01 00      sub sp, 1
6979   31F2             ; t = token; 
6980   31F2 FA FF FF      lea d, [bp + -1] ; $t
6981   31F5 DA            push d
6982   31F6 3B 90 42      mov d, _token_data ; $token
6983   31F9 2D            mov b, d
6984   31FA 38 00 00      mov c, 0
6985   31FD E7            pop d
6986   31FE FD 3E         mov [d], bl
6987   3200             ; s = string_const; 
6988   3200 FA 00 00      lea d, [bp + 0] ; $s
6989   3203 DA            push d
6990   3204 3B 90 43      mov d, _string_const_data ; $string_const
6991   3207 2D            mov b, d
6992   3208 38 00 00      mov c, 0
6993   320B E7            pop d
6994   320C FD 3E         mov [d], bl
6995   320E             ; if(toktype == CHAR_CONST){ 
6996   320E             _if144_cond:
6997   320E 3B 8D 42      mov d, _toktype ; $toktype
6998   3211 2A            mov b, [d]
6999   3212 38 00 00      mov c, 0
7000   3215             ; --- START RELATIONAL
7001   3215 D7            push a
7002   3216 11            mov a, b
7003   3217 FD 2E 02 00   mov32 cb, $2 ; enum element: CHAR_CONST
7003   321B 00 00 
7004   321D B0            cmp a, b
7005   321E FD 71         seq ; ==
7006   3220 E4            pop a
7007   3221             ; --- END RELATIONAL
7008   3221 C0 00 00      cmp b, 0
7009   3224 C6 35 34      je _if144_else
7010   3227             _if144_TRUE:
7011   3227             ; t++; 
7012   3227 FA FF FF      lea d, [bp + -1] ; $t
7013   322A 32            mov bl, [d]
7014   322B A7 00         mov bh, 0
7015   322D 38 00 00      mov c, 0
7016   3230 FD 77         inc b
7017   3232 FA FF FF      lea d, [bp + -1] ; $t
7018   3235 FD 3E         mov [d], bl
7019   3237 FD 7D         dec b
7020   3239             ; if(*t == '\\'){ 
7021   3239             _if145_cond:
7022   3239 FA FF FF      lea d, [bp + -1] ; $t
7023   323C 32            mov bl, [d]
7024   323D A7 00         mov bh, 0
7025   323F 38 00 00      mov c, 0
7026   3242 74            mov d, b
7027   3243 32            mov bl, [d]
7028   3244 A7 00         mov bh, 0
7029   3246 38 00 00      mov c, 0
7030   3249             ; --- START RELATIONAL
7031   3249 D7            push a
7032   324A 11            mov a, b
7033   324B FD 2E 5C 00   mov32 cb, $0000005c
7033   324F 00 00 
7034   3251 B0            cmp a, b
7035   3252 FD 71         seq ; ==
7036   3254 E4            pop a
7037   3255             ; --- END RELATIONAL
7038   3255 C0 00 00      cmp b, 0
7039   3258 C6 0C 34      je _if145_else
7040   325B             _if145_TRUE:
7041   325B             ; t++; 
7042   325B FA FF FF      lea d, [bp + -1] ; $t
7043   325E 32            mov bl, [d]
7044   325F A7 00         mov bh, 0
7045   3261 38 00 00      mov c, 0
7046   3264 FD 77         inc b
7047   3266 FA FF FF      lea d, [bp + -1] ; $t
7048   3269 FD 3E         mov [d], bl
7049   326B FD 7D         dec b
7050   326D             ; switch(*t){ 
7051   326D             _switch146_expr:
7052   326D FA FF FF      lea d, [bp + -1] ; $t
7053   3270 32            mov bl, [d]
7054   3271 A7 00         mov bh, 0
7055   3273 38 00 00      mov c, 0
7056   3276 74            mov d, b
7057   3277 32            mov bl, [d]
7058   3278 A7 00         mov bh, 0
7059   327A 38 00 00      mov c, 0
7060   327D             _switch146_comparisons:
7061   327D C1 30         cmp bl, $30
7062   327F C6 B7 32      je _switch146_case0
7063   3282 C1 61         cmp bl, $61
7064   3284 C6 D6 32      je _switch146_case1
7065   3287 C1 62         cmp bl, $62
7066   3289 C6 F5 32      je _switch146_case2
7067   328C C1 66         cmp bl, $66
7068   328E C6 14 33      je _switch146_case3
7069   3291 C1 6E         cmp bl, $6e
7070   3293 C6 33 33      je _switch146_case4
7071   3296 C1 72         cmp bl, $72
7072   3298 C6 52 33      je _switch146_case5
7073   329B C1 74         cmp bl, $74
7074   329D C6 71 33      je _switch146_case6
7075   32A0 C1 76         cmp bl, $76
7076   32A2 C6 90 33      je _switch146_case7
7077   32A5 C1 5C         cmp bl, $5c
7078   32A7 C6 AF 33      je _switch146_case8
7079   32AA C1 27         cmp bl, $27
7080   32AC C6 CE 33      je _switch146_case9
7081   32AF C1 22         cmp bl, $22
7082   32B1 C6 ED 33      je _switch146_case10
7083   32B4 0A 09 34      jmp _switch146_exit
7084   32B7             _switch146_case0:
7085   32B7             ; *s++ = '\0'; 
7086   32B7 FA 00 00      lea d, [bp + 0] ; $s
7087   32BA 32            mov bl, [d]
7088   32BB A7 00         mov bh, 0
7089   32BD 38 00 00      mov c, 0
7090   32C0 FD 77         inc b
7091   32C2 FA 00 00      lea d, [bp + 0] ; $s
7092   32C5 FD 3E         mov [d], bl
7093   32C7 FD 7D         dec b
7094   32C9 D8            push b
7095   32CA FD 2E 00 00   mov32 cb, $00000000
7095   32CE 00 00 
7096   32D0 E7            pop d
7097   32D1 FD 3E         mov [d], bl
7098   32D3             ; break; 
7099   32D3 0A 09 34      jmp _switch146_exit ; case break
7100   32D6             _switch146_case1:
7101   32D6             ; *s++ = '\a'; 
7102   32D6 FA 00 00      lea d, [bp + 0] ; $s
7103   32D9 32            mov bl, [d]
7104   32DA A7 00         mov bh, 0
7105   32DC 38 00 00      mov c, 0
7106   32DF FD 77         inc b
7107   32E1 FA 00 00      lea d, [bp + 0] ; $s
7108   32E4 FD 3E         mov [d], bl
7109   32E6 FD 7D         dec b
7110   32E8 D8            push b
7111   32E9 FD 2E 07 00   mov32 cb, $00000007
7111   32ED 00 00 
7112   32EF E7            pop d
7113   32F0 FD 3E         mov [d], bl
7114   32F2             ; break; 
7115   32F2 0A 09 34      jmp _switch146_exit ; case break
7116   32F5             _switch146_case2:
7117   32F5             ; *s++ = '\b'; 
7118   32F5 FA 00 00      lea d, [bp + 0] ; $s
7119   32F8 32            mov bl, [d]
7120   32F9 A7 00         mov bh, 0
7121   32FB 38 00 00      mov c, 0
7122   32FE FD 77         inc b
7123   3300 FA 00 00      lea d, [bp + 0] ; $s
7124   3303 FD 3E         mov [d], bl
7125   3305 FD 7D         dec b
7126   3307 D8            push b
7127   3308 FD 2E 08 00   mov32 cb, $00000008
7127   330C 00 00 
7128   330E E7            pop d
7129   330F FD 3E         mov [d], bl
7130   3311             ; break;   
7131   3311 0A 09 34      jmp _switch146_exit ; case break
7132   3314             _switch146_case3:
7133   3314             ; *s++ = '\f'; 
7134   3314 FA 00 00      lea d, [bp + 0] ; $s
7135   3317 32            mov bl, [d]
7136   3318 A7 00         mov bh, 0
7137   331A 38 00 00      mov c, 0
7138   331D FD 77         inc b
7139   331F FA 00 00      lea d, [bp + 0] ; $s
7140   3322 FD 3E         mov [d], bl
7141   3324 FD 7D         dec b
7142   3326 D8            push b
7143   3327 FD 2E 0C 00   mov32 cb, $0000000c
7143   332B 00 00 
7144   332D E7            pop d
7145   332E FD 3E         mov [d], bl
7146   3330             ; break; 
7147   3330 0A 09 34      jmp _switch146_exit ; case break
7148   3333             _switch146_case4:
7149   3333             ; *s++ = '\n'; 
7150   3333 FA 00 00      lea d, [bp + 0] ; $s
7151   3336 32            mov bl, [d]
7152   3337 A7 00         mov bh, 0
7153   3339 38 00 00      mov c, 0
7154   333C FD 77         inc b
7155   333E FA 00 00      lea d, [bp + 0] ; $s
7156   3341 FD 3E         mov [d], bl
7157   3343 FD 7D         dec b
7158   3345 D8            push b
7159   3346 FD 2E 0A 00   mov32 cb, $0000000a
7159   334A 00 00 
7160   334C E7            pop d
7161   334D FD 3E         mov [d], bl
7162   334F             ; break; 
7163   334F 0A 09 34      jmp _switch146_exit ; case break
7164   3352             _switch146_case5:
7165   3352             ; *s++ = '\r'; 
7166   3352 FA 00 00      lea d, [bp + 0] ; $s
7167   3355 32            mov bl, [d]
7168   3356 A7 00         mov bh, 0
7169   3358 38 00 00      mov c, 0
7170   335B FD 77         inc b
7171   335D FA 00 00      lea d, [bp + 0] ; $s
7172   3360 FD 3E         mov [d], bl
7173   3362 FD 7D         dec b
7174   3364 D8            push b
7175   3365 FD 2E 0D 00   mov32 cb, $0000000d
7175   3369 00 00 
7176   336B E7            pop d
7177   336C FD 3E         mov [d], bl
7178   336E             ; break; 
7179   336E 0A 09 34      jmp _switch146_exit ; case break
7180   3371             _switch146_case6:
7181   3371             ; *s++ = '\t'; 
7182   3371 FA 00 00      lea d, [bp + 0] ; $s
7183   3374 32            mov bl, [d]
7184   3375 A7 00         mov bh, 0
7185   3377 38 00 00      mov c, 0
7186   337A FD 77         inc b
7187   337C FA 00 00      lea d, [bp + 0] ; $s
7188   337F FD 3E         mov [d], bl
7189   3381 FD 7D         dec b
7190   3383 D8            push b
7191   3384 FD 2E 09 00   mov32 cb, $00000009
7191   3388 00 00 
7192   338A E7            pop d
7193   338B FD 3E         mov [d], bl
7194   338D             ; break; 
7195   338D 0A 09 34      jmp _switch146_exit ; case break
7196   3390             _switch146_case7:
7197   3390             ; *s++ = '\v'; 
7198   3390 FA 00 00      lea d, [bp + 0] ; $s
7199   3393 32            mov bl, [d]
7200   3394 A7 00         mov bh, 0
7201   3396 38 00 00      mov c, 0
7202   3399 FD 77         inc b
7203   339B FA 00 00      lea d, [bp + 0] ; $s
7204   339E FD 3E         mov [d], bl
7205   33A0 FD 7D         dec b
7206   33A2 D8            push b
7207   33A3 FD 2E 0B 00   mov32 cb, $0000000b
7207   33A7 00 00 
7208   33A9 E7            pop d
7209   33AA FD 3E         mov [d], bl
7210   33AC             ; break; 
7211   33AC 0A 09 34      jmp _switch146_exit ; case break
7212   33AF             _switch146_case8:
7213   33AF             ; *s++ = '\\'; 
7214   33AF FA 00 00      lea d, [bp + 0] ; $s
7215   33B2 32            mov bl, [d]
7216   33B3 A7 00         mov bh, 0
7217   33B5 38 00 00      mov c, 0
7218   33B8 FD 77         inc b
7219   33BA FA 00 00      lea d, [bp + 0] ; $s
7220   33BD FD 3E         mov [d], bl
7221   33BF FD 7D         dec b
7222   33C1 D8            push b
7223   33C2 FD 2E 5C 00   mov32 cb, $0000005c
7223   33C6 00 00 
7224   33C8 E7            pop d
7225   33C9 FD 3E         mov [d], bl
7226   33CB             ; break; 
7227   33CB 0A 09 34      jmp _switch146_exit ; case break
7228   33CE             _switch146_case9:
7229   33CE             ; *s++ = '\''; 
7230   33CE FA 00 00      lea d, [bp + 0] ; $s
7231   33D1 32            mov bl, [d]
7232   33D2 A7 00         mov bh, 0
7233   33D4 38 00 00      mov c, 0
7234   33D7 FD 77         inc b
7235   33D9 FA 00 00      lea d, [bp + 0] ; $s
7236   33DC FD 3E         mov [d], bl
7237   33DE FD 7D         dec b
7238   33E0 D8            push b
7239   33E1 FD 2E 27 00   mov32 cb, $00000027
7239   33E5 00 00 
7240   33E7 E7            pop d
7241   33E8 FD 3E         mov [d], bl
7242   33EA             ; break; 
7243   33EA 0A 09 34      jmp _switch146_exit ; case break
7244   33ED             _switch146_case10:
7245   33ED             ; *s++ = '\"'; 
7246   33ED FA 00 00      lea d, [bp + 0] ; $s
7247   33F0 32            mov bl, [d]
7248   33F1 A7 00         mov bh, 0
7249   33F3 38 00 00      mov c, 0
7250   33F6 FD 77         inc b
7251   33F8 FA 00 00      lea d, [bp + 0] ; $s
7252   33FB FD 3E         mov [d], bl
7253   33FD FD 7D         dec b
7254   33FF D8            push b
7255   3400 FD 2E 22 00   mov32 cb, $00000022
7255   3404 00 00 
7256   3406 E7            pop d
7257   3407 FD 3E         mov [d], bl
7258   3409             _switch146_exit:
7259   3409 0A 32 34      jmp _if145_exit
7260   340C             _if145_else:
7261   340C             ; *s++ = *t; 
7262   340C FA 00 00      lea d, [bp + 0] ; $s
7263   340F 32            mov bl, [d]
7264   3410 A7 00         mov bh, 0
7265   3412 38 00 00      mov c, 0
7266   3415 FD 77         inc b
7267   3417 FA 00 00      lea d, [bp + 0] ; $s
7268   341A FD 3E         mov [d], bl
7269   341C FD 7D         dec b
7270   341E D8            push b
7271   341F FA FF FF      lea d, [bp + -1] ; $t
7272   3422 32            mov bl, [d]
7273   3423 A7 00         mov bh, 0
7274   3425 38 00 00      mov c, 0
7275   3428 74            mov d, b
7276   3429 32            mov bl, [d]
7277   342A A7 00         mov bh, 0
7278   342C 38 00 00      mov c, 0
7279   342F E7            pop d
7280   3430 FD 3E         mov [d], bl
7281   3432             _if145_exit:
7282   3432 0A CC 34      jmp _if144_exit
7283   3435             _if144_else:
7284   3435             ; if(toktype == STRING_CONST){ 
7285   3435             _if147_cond:
7286   3435 3B 8D 42      mov d, _toktype ; $toktype
7287   3438 2A            mov b, [d]
7288   3439 38 00 00      mov c, 0
7289   343C             ; --- START RELATIONAL
7290   343C D7            push a
7291   343D 11            mov a, b
7292   343E FD 2E 03 00   mov32 cb, $3 ; enum element: STRING_CONST
7292   3442 00 00 
7293   3444 B0            cmp a, b
7294   3445 FD 71         seq ; ==
7295   3447 E4            pop a
7296   3448             ; --- END RELATIONAL
7297   3448 C0 00 00      cmp b, 0
7298   344B C6 CC 34      je _if147_exit
7299   344E             _if147_TRUE:
7300   344E             ; t++; 
7301   344E FA FF FF      lea d, [bp + -1] ; $t
7302   3451 32            mov bl, [d]
7303   3452 A7 00         mov bh, 0
7304   3454 38 00 00      mov c, 0
7305   3457 FD 77         inc b
7306   3459 FA FF FF      lea d, [bp + -1] ; $t
7307   345C FD 3E         mov [d], bl
7308   345E FD 7D         dec b
7309   3460             ; while(*t != '\"' && *t){ 
7310   3460             _while148_cond:
7311   3460 FA FF FF      lea d, [bp + -1] ; $t
7312   3463 32            mov bl, [d]
7313   3464 A7 00         mov bh, 0
7314   3466 38 00 00      mov c, 0
7315   3469 74            mov d, b
7316   346A 32            mov bl, [d]
7317   346B A7 00         mov bh, 0
7318   346D 38 00 00      mov c, 0
7319   3470             ; --- START RELATIONAL
7320   3470 D7            push a
7321   3471 11            mov a, b
7322   3472 FD 2E 22 00   mov32 cb, $00000022
7322   3476 00 00 
7323   3478 B0            cmp a, b
7324   3479 FD 72         sneq ; !=
7325   347B E4            pop a
7326   347C             ; --- END RELATIONAL
7327   347C             ; --- START LOGICAL AND
7328   347C D7            push a
7329   347D 11            mov a, b
7330   347E FA FF FF      lea d, [bp + -1] ; $t
7331   3481 32            mov bl, [d]
7332   3482 A7 00         mov bh, 0
7333   3484 38 00 00      mov c, 0
7334   3487 74            mov d, b
7335   3488 32            mov bl, [d]
7336   3489 A7 00         mov bh, 0
7337   348B 38 00 00      mov c, 0
7338   348E FD A7         sand a, b
7339   3490 E4            pop a
7340   3491             ; --- END LOGICAL AND
7341   3491 C0 00 00      cmp b, 0
7342   3494 C6 C9 34      je _while148_exit
7343   3497             _while148_block:
7344   3497             ; *s++ = *t++; 
7345   3497 FA 00 00      lea d, [bp + 0] ; $s
7346   349A 32            mov bl, [d]
7347   349B A7 00         mov bh, 0
7348   349D 38 00 00      mov c, 0
7349   34A0 FD 77         inc b
7350   34A2 FA 00 00      lea d, [bp + 0] ; $s
7351   34A5 FD 3E         mov [d], bl
7352   34A7 FD 7D         dec b
7353   34A9 D8            push b
7354   34AA FA FF FF      lea d, [bp + -1] ; $t
7355   34AD 32            mov bl, [d]
7356   34AE A7 00         mov bh, 0
7357   34B0 38 00 00      mov c, 0
7358   34B3 FD 77         inc b
7359   34B5 FA FF FF      lea d, [bp + -1] ; $t
7360   34B8 FD 3E         mov [d], bl
7361   34BA FD 7D         dec b
7362   34BC 74            mov d, b
7363   34BD 32            mov bl, [d]
7364   34BE A7 00         mov bh, 0
7365   34C0 38 00 00      mov c, 0
7366   34C3 E7            pop d
7367   34C4 FD 3E         mov [d], bl
7368   34C6 0A 60 34      jmp _while148_cond
7369   34C9             _while148_exit:
7370   34C9 0A CC 34      jmp _if147_exit
7371   34CC             _if147_exit:
7372   34CC             _if144_exit:
7373   34CC             ; *s = '\0'; 
7374   34CC FA 00 00      lea d, [bp + 0] ; $s
7375   34CF 32            mov bl, [d]
7376   34D0 A7 00         mov bh, 0
7377   34D2 38 00 00      mov c, 0
7378   34D5 D8            push b
7379   34D6 FD 2E 00 00   mov32 cb, $00000000
7379   34DA 00 00 
7380   34DC E7            pop d
7381   34DD FD 3E         mov [d], bl
7382   34DF F9            leave
7383   34E0 09            ret
7384   34E1             
7385   34E1             strcmp:
7386   34E1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7387   34E4             ; while (*s1 && (*s1 == *s2)) { 
7388   34E4             _while149_cond:
7389   34E4 FA 05 00      lea d, [bp + 5] ; $s1
7390   34E7 2A            mov b, [d]
7391   34E8 38 00 00      mov c, 0
7392   34EB 74            mov d, b
7393   34EC 32            mov bl, [d]
7394   34ED A7 00         mov bh, 0
7395   34EF 38 00 00      mov c, 0
7396   34F2             ; --- START LOGICAL AND
7397   34F2 D7            push a
7398   34F3 11            mov a, b
7399   34F4 FA 05 00      lea d, [bp + 5] ; $s1
7400   34F7 2A            mov b, [d]
7401   34F8 38 00 00      mov c, 0
7402   34FB 74            mov d, b
7403   34FC 32            mov bl, [d]
7404   34FD A7 00         mov bh, 0
7405   34FF 38 00 00      mov c, 0
7406   3502             ; --- START RELATIONAL
7407   3502 D7            push a
7408   3503 11            mov a, b
7409   3504 FA 07 00      lea d, [bp + 7] ; $s2
7410   3507 2A            mov b, [d]
7411   3508 38 00 00      mov c, 0
7412   350B 74            mov d, b
7413   350C 32            mov bl, [d]
7414   350D A7 00         mov bh, 0
7415   350F 38 00 00      mov c, 0
7416   3512 B0            cmp a, b
7417   3513 FD 71         seq ; ==
7418   3515 E4            pop a
7419   3516             ; --- END RELATIONAL
7420   3516 FD A7         sand a, b
7421   3518 E4            pop a
7422   3519             ; --- END LOGICAL AND
7423   3519 C0 00 00      cmp b, 0
7424   351C C6 42 35      je _while149_exit
7425   351F             _while149_block:
7426   351F             ; s1++; 
7427   351F FA 05 00      lea d, [bp + 5] ; $s1
7428   3522 2A            mov b, [d]
7429   3523 38 00 00      mov c, 0
7430   3526 FD 77         inc b
7431   3528 FA 05 00      lea d, [bp + 5] ; $s1
7432   352B FD 43         mov [d], b
7433   352D FD 7D         dec b
7434   352F             ; s2++; 
7435   352F FA 07 00      lea d, [bp + 7] ; $s2
7436   3532 2A            mov b, [d]
7437   3533 38 00 00      mov c, 0
7438   3536 FD 77         inc b
7439   3538 FA 07 00      lea d, [bp + 7] ; $s2
7440   353B FD 43         mov [d], b
7441   353D FD 7D         dec b
7442   353F 0A E4 34      jmp _while149_cond
7443   3542             _while149_exit:
7444   3542             ; return *s1 - *s2; 
7445   3542 FA 05 00      lea d, [bp + 5] ; $s1
7446   3545 2A            mov b, [d]
7447   3546 38 00 00      mov c, 0
7448   3549 74            mov d, b
7449   354A 32            mov bl, [d]
7450   354B A7 00         mov bh, 0
7451   354D 38 00 00      mov c, 0
7452   3550             ; --- START TERMS
7453   3550 D7            push a
7454   3551 11            mov a, b
7455   3552 FA 07 00      lea d, [bp + 7] ; $s2
7456   3555 2A            mov b, [d]
7457   3556 38 00 00      mov c, 0
7458   3559 74            mov d, b
7459   355A 32            mov bl, [d]
7460   355B A7 00         mov bh, 0
7461   355D 38 00 00      mov c, 0
7462   3560 60            sub a, b
7463   3561 27            mov b, a
7464   3562 E4            pop a
7465   3563             ; --- END TERMS
7466   3563 F9            leave
7467   3564 09            ret
7468   3565             
7469   3565             strcat:
7470   3565 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7471   3568             ; int dest_len; 
7472   3568 52 02 00      sub sp, 2
7473   356B             ; int i; 
7474   356B 52 02 00      sub sp, 2
7475   356E             ; dest_len = strlen(dest); 
7476   356E FA FF FF      lea d, [bp + -1] ; $dest_len
7477   3571 DA            push d
7478   3572             ; --- START FUNCTION CALL
7479   3572 FA 05 00      lea d, [bp + 5] ; $dest
7480   3575 2A            mov b, [d]
7481   3576 38 00 00      mov c, 0
7482   3579 FD AB         swp b
7483   357B D8            push b
7484   357C 07 48 36      call strlen
7485   357F 51 02 00      add sp, 2
7486   3582             ; --- END FUNCTION CALL
7487   3582 E7            pop d
7488   3583 FD 43         mov [d], b
7489   3585             ; for (i = 0; src[i] != 0; i=i+1) { 
7490   3585             _for150_init:
7491   3585 FA FD FF      lea d, [bp + -3] ; $i
7492   3588 DA            push d
7493   3589 FD 2E 00 00   mov32 cb, $00000000
7493   358D 00 00 
7494   358F E7            pop d
7495   3590 FD 43         mov [d], b
7496   3592             _for150_cond:
7497   3592 FA 07 00      lea d, [bp + 7] ; $src
7498   3595 FD 2A         mov d, [d]
7499   3597 D7            push a
7500   3598 DA            push d
7501   3599 FA FD FF      lea d, [bp + -3] ; $i
7502   359C 2A            mov b, [d]
7503   359D 38 00 00      mov c, 0
7504   35A0 E7            pop d
7505   35A1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
7506   35A5 E4            pop a
7507   35A6 32            mov bl, [d]
7508   35A7 A7 00         mov bh, 0
7509   35A9 38 00 00      mov c, 0
7510   35AC             ; --- START RELATIONAL
7511   35AC D7            push a
7512   35AD 11            mov a, b
7513   35AE FD 2E 00 00   mov32 cb, $00000000
7513   35B2 00 00 
7514   35B4 B0            cmp a, b
7515   35B5 FD 72         sneq ; !=
7516   35B7 E4            pop a
7517   35B8             ; --- END RELATIONAL
7518   35B8 C0 00 00      cmp b, 0
7519   35BB C6 16 36      je _for150_exit
7520   35BE             _for150_block:
7521   35BE             ; dest[dest_len + i] = src[i]; 
7522   35BE FA 05 00      lea d, [bp + 5] ; $dest
7523   35C1 FD 2A         mov d, [d]
7524   35C3 D7            push a
7525   35C4 DA            push d
7526   35C5 FA FF FF      lea d, [bp + -1] ; $dest_len
7527   35C8 2A            mov b, [d]
7528   35C9 38 00 00      mov c, 0
7529   35CC             ; --- START TERMS
7530   35CC D7            push a
7531   35CD 11            mov a, b
7532   35CE FA FD FF      lea d, [bp + -3] ; $i
7533   35D1 2A            mov b, [d]
7534   35D2 38 00 00      mov c, 0
7535   35D5 56            add b, a
7536   35D6 E4            pop a
7537   35D7             ; --- END TERMS
7538   35D7 E7            pop d
7539   35D8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
7540   35DC E4            pop a
7541   35DD DA            push d
7542   35DE FA 07 00      lea d, [bp + 7] ; $src
7543   35E1 FD 2A         mov d, [d]
7544   35E3 D7            push a
7545   35E4 DA            push d
7546   35E5 FA FD FF      lea d, [bp + -3] ; $i
7547   35E8 2A            mov b, [d]
7548   35E9 38 00 00      mov c, 0
7549   35EC E7            pop d
7550   35ED FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
7551   35F1 E4            pop a
7552   35F2 32            mov bl, [d]
7553   35F3 A7 00         mov bh, 0
7554   35F5 38 00 00      mov c, 0
7555   35F8 E7            pop d
7556   35F9 FD 3E         mov [d], bl
7557   35FB             _for150_update:
7558   35FB FA FD FF      lea d, [bp + -3] ; $i
7559   35FE DA            push d
7560   35FF FA FD FF      lea d, [bp + -3] ; $i
7561   3602 2A            mov b, [d]
7562   3603 38 00 00      mov c, 0
7563   3606             ; --- START TERMS
7564   3606 D7            push a
7565   3607 11            mov a, b
7566   3608 FD 2E 01 00   mov32 cb, $00000001
7566   360C 00 00 
7567   360E 56            add b, a
7568   360F E4            pop a
7569   3610             ; --- END TERMS
7570   3610 E7            pop d
7571   3611 FD 43         mov [d], b
7572   3613 0A 92 35      jmp _for150_cond
7573   3616             _for150_exit:
7574   3616             ; dest[dest_len + i] = 0; 
7575   3616 FA 05 00      lea d, [bp + 5] ; $dest
7576   3619 FD 2A         mov d, [d]
7577   361B D7            push a
7578   361C DA            push d
7579   361D FA FF FF      lea d, [bp + -1] ; $dest_len
7580   3620 2A            mov b, [d]
7581   3621 38 00 00      mov c, 0
7582   3624             ; --- START TERMS
7583   3624 D7            push a
7584   3625 11            mov a, b
7585   3626 FA FD FF      lea d, [bp + -3] ; $i
7586   3629 2A            mov b, [d]
7587   362A 38 00 00      mov c, 0
7588   362D 56            add b, a
7589   362E E4            pop a
7590   362F             ; --- END TERMS
7591   362F E7            pop d
7592   3630 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
7593   3634 E4            pop a
7594   3635 DA            push d
7595   3636 FD 2E 00 00   mov32 cb, $00000000
7595   363A 00 00 
7596   363C E7            pop d
7597   363D FD 3E         mov [d], bl
7598   363F             ; return dest; 
7599   363F FA 05 00      lea d, [bp + 5] ; $dest
7600   3642 2A            mov b, [d]
7601   3643 38 00 00      mov c, 0
7602   3646 F9            leave
7603   3647 09            ret
7604   3648             
7605   3648             strlen:
7606   3648 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7607   364B             ; int length; 
7608   364B 52 02 00      sub sp, 2
7609   364E             ; length = 0; 
7610   364E FA FF FF      lea d, [bp + -1] ; $length
7611   3651 DA            push d
7612   3652 FD 2E 00 00   mov32 cb, $00000000
7612   3656 00 00 
7613   3658 E7            pop d
7614   3659 FD 43         mov [d], b
7615   365B             ; while (str[length] != 0) { 
7616   365B             _while151_cond:
7617   365B FA 05 00      lea d, [bp + 5] ; $str
7618   365E FD 2A         mov d, [d]
7619   3660 D7            push a
7620   3661 DA            push d
7621   3662 FA FF FF      lea d, [bp + -1] ; $length
7622   3665 2A            mov b, [d]
7623   3666 38 00 00      mov c, 0
7624   3669 E7            pop d
7625   366A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
7626   366E E4            pop a
7627   366F 32            mov bl, [d]
7628   3670 A7 00         mov bh, 0
7629   3672 38 00 00      mov c, 0
7630   3675             ; --- START RELATIONAL
7631   3675 D7            push a
7632   3676 11            mov a, b
7633   3677 FD 2E 00 00   mov32 cb, $00000000
7633   367B 00 00 
7634   367D B0            cmp a, b
7635   367E FD 72         sneq ; !=
7636   3680 E4            pop a
7637   3681             ; --- END RELATIONAL
7638   3681 C0 00 00      cmp b, 0
7639   3684 C6 9A 36      je _while151_exit
7640   3687             _while151_block:
7641   3687             ; length++; 
7642   3687 FA FF FF      lea d, [bp + -1] ; $length
7643   368A 2A            mov b, [d]
7644   368B 38 00 00      mov c, 0
7645   368E 11            mov a, b
7646   368F FD 77         inc b
7647   3691 FA FF FF      lea d, [bp + -1] ; $length
7648   3694 FD 43         mov [d], b
7649   3696 27            mov b, a
7650   3697 0A 5B 36      jmp _while151_cond
7651   369A             _while151_exit:
7652   369A             ; return length; 
7653   369A FA FF FF      lea d, [bp + -1] ; $length
7654   369D 2A            mov b, [d]
7655   369E 38 00 00      mov c, 0
7656   36A1 F9            leave
7657   36A2 09            ret
7658   36A3             
7659   36A3             free:
7660   36A3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7661   36A6             ; if (!ptr) return; 
7662   36A6             _if152_cond:
7663   36A6 FA 05 00      lea d, [bp + 5] ; $ptr
7664   36A9 2A            mov b, [d]
7665   36AA 38 00 00      mov c, 0
7666   36AD C0 00 00      cmp b, 0
7667   36B0 FD 71         seq ; !
7668   36B2 C0 00 00      cmp b, 0
7669   36B5 C6 BD 36      je _if152_exit
7670   36B8             _if152_TRUE:
7671   36B8             ; return; 
7672   36B8 F9            leave
7673   36B9 09            ret
7674   36BA 0A BD 36      jmp _if152_exit
7675   36BD             _if152_exit:
7676   36BD             ; block_t *blk = ptr - sizeof(struct block); 
7677   36BD 52 02 00      sub sp, 2
7678   36C0             ; --- START LOCAL VAR INITIALIZATION
7679   36C0 FA FF FF      lea d, [bp + -1] ; $blk
7680   36C3 DA            push d
7681   36C4 FA 05 00      lea d, [bp + 5] ; $ptr
7682   36C7 2A            mov b, [d]
7683   36C8 38 00 00      mov c, 0
7684   36CB             ; --- START TERMS
7685   36CB D7            push a
7686   36CC 11            mov a, b
7687   36CD FD 2E 04 00   mov32 cb, 4
7687   36D1 00 00 
7688   36D3 60            sub a, b
7689   36D4 27            mov b, a
7690   36D5 E4            pop a
7691   36D6             ; --- END TERMS
7692   36D6 E7            pop d
7693   36D7 FD 28         mov si, b
7694   36D9 FD 50         mov di, d
7695   36DB 38 02 00      mov c, 2
7696   36DE FD F5         rep movsb
7697   36E0             ; --- END LOCAL VAR INITIALIZATION
7698   36E0             ; blk->next = free_list; 
7699   36E0 FA FF FF      lea d, [bp + -1] ; $blk
7700   36E3 FD 2A         mov d, [d]
7701   36E5 58 02 00      add d, 2
7702   36E8 DA            push d
7703   36E9 3B 89 42      mov d, _free_list ; $free_list
7704   36EC 2A            mov b, [d]
7705   36ED 38 00 00      mov c, 0
7706   36F0 E7            pop d
7707   36F1 FD 43         mov [d], b
7708   36F3             ; free_list = blk; 
7709   36F3 3B 89 42      mov d, _free_list ; $free_list
7710   36F6 DA            push d
7711   36F7 FA FF FF      lea d, [bp + -1] ; $blk
7712   36FA 2A            mov b, [d]
7713   36FB 38 00 00      mov c, 0
7714   36FE E7            pop d
7715   36FF FD 43         mov [d], b
7716   3701 F9            leave
7717   3702 09            ret
7718   3703             
7719   3703             gets:
7720   3703 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7721   3706             ; --- BEGIN INLINE ASM SEGMENT
7722   3706 FA 05 00      lea d, [bp + 5] ; $s
7723   3709 15            mov a, [d]
7724   370A 3C            mov d, a
7725   370B 07 20 37      call _gets_gets
7726   370E             ; --- END INLINE ASM SEGMENT
7727   370E             ; return strlen(s); 
7728   370E             ; --- START FUNCTION CALL
7729   370E FA 05 00      lea d, [bp + 5] ; $s
7730   3711 2A            mov b, [d]
7731   3712 38 00 00      mov c, 0
7732   3715 FD AB         swp b
7733   3717 D8            push b
7734   3718 07 48 36      call strlen
7735   371B 51 02 00      add sp, 2
7736   371E             ; --- END FUNCTION CALL
7737   371E F9            leave
7738   371F 09            ret
7739   3720             ; --- BEGIN INLINE ASM SEGMENT
7740   3720             _gets_gets:
7741   3720 D7            push a
7742   3721 DA            push d
7743   3722             _gets_loop_gets:
7744   3722 19 01         mov al, 1
7745   3724 05 03         syscall sys_io      ; receive in AH
7746   3726 B9 00         cmp al, 0        ; check error code (AL)
7747   3728 C6 22 37      je _gets_loop_gets      ; if no char received, retry
7748   372B 76 1B         cmp ah, 27
7749   372D C6 4E 37      je _gets_ansi_esc_gets
7750   3730 76 0A         cmp ah, $0A        ; LF
7751   3732 C6 B9 37      je _gets_end_gets
7752   3735 76 0D         cmp ah, $0D        ; CR
7753   3737 C6 B9 37      je _gets_end_gets
7754   373A 76 5C         cmp ah, $5C        ; '\\'
7755   373C C6 7A 37      je _gets_escape_gets
7756   373F 76 08         cmp ah, $08      ; check for backspace
7757   3741 C6 4A 37      je _gets_backspace_gets
7758   3744 1A            mov al, ah
7759   3745 3E            mov [d], al
7760   3746 79            inc d
7761   3747 0A 22 37      jmp _gets_loop_gets
7762   374A             _gets_backspace_gets:
7763   374A 7F            dec d
7764   374B 0A 22 37      jmp _gets_loop_gets
7765   374E             _gets_ansi_esc_gets:
7766   374E 19 01         mov al, 1
7767   3750 05 03         syscall sys_io        ; receive in AH without echo
7768   3752 B9 00         cmp al, 0          ; check error code (AL)
7769   3754 C6 4E 37      je _gets_ansi_esc_gets    ; if no char received, retry
7770   3757 76 5B         cmp ah, '['
7771   3759 C7 22 37      jne _gets_loop_gets
7772   375C             _gets_ansi_esc_2_gets:
7773   375C 19 01         mov al, 1
7774   375E 05 03         syscall sys_io          ; receive in AH without echo
7775   3760 B9 00         cmp al, 0            ; check error code (AL)
7776   3762 C6 5C 37      je _gets_ansi_esc_2_gets  ; if no char received, retry
7777   3765 76 44         cmp ah, 'D'
7778   3767 C6 72 37      je _gets_left_arrow_gets
7779   376A 76 43         cmp ah, 'C'
7780   376C C6 76 37      je _gets_right_arrow_gets
7781   376F 0A 22 37      jmp _gets_loop_gets
7782   3772             _gets_left_arrow_gets:
7783   3772 7F            dec d
7784   3773 0A 22 37      jmp _gets_loop_gets
7785   3776             _gets_right_arrow_gets:
7786   3776 79            inc d
7787   3777 0A 22 37      jmp _gets_loop_gets
7788   377A             _gets_escape_gets:
7789   377A 19 01         mov al, 1
7790   377C 05 03         syscall sys_io      ; receive in AH
7791   377E B9 00         cmp al, 0        ; check error code (AL)
7792   3780 C6 7A 37      je _gets_escape_gets      ; if no char received, retry
7793   3783 76 6E         cmp ah, 'n'
7794   3785 C6 A4 37      je _gets_LF_gets
7795   3788 76 72         cmp ah, 'r'
7796   378A C6 AB 37      je _gets_CR_gets
7797   378D 76 30         cmp ah, '0'
7798   378F C6 B2 37      je _gets_NULL_gets
7799   3792 76 5C         cmp ah, $5C  
7800   3794 C6 9D 37      je _gets_slash_gets
7801   3797 1A            mov al, ah        ; if not a known escape, it is just a normal letter
7802   3798 3E            mov [d], al
7803   3799 79            inc d
7804   379A 0A 22 37      jmp _gets_loop_gets
7805   379D             _gets_slash_gets:
7806   379D 19 5C         mov al, $5C
7807   379F 3E            mov [d], al
7808   37A0 79            inc d
7809   37A1 0A 22 37      jmp _gets_loop_gets
7810   37A4             _gets_LF_gets:
7811   37A4 19 0A         mov al, $0A
7812   37A6 3E            mov [d], al
7813   37A7 79            inc d
7814   37A8 0A 22 37      jmp _gets_loop_gets
7815   37AB             _gets_CR_gets:
7816   37AB 19 0D         mov al, $0D
7817   37AD 3E            mov [d], al
7818   37AE 79            inc d
7819   37AF 0A 22 37      jmp _gets_loop_gets
7820   37B2             _gets_NULL_gets:
7821   37B2 19 00         mov al, $00
7822   37B4 3E            mov [d], al
7823   37B5 79            inc d
7824   37B6 0A 22 37      jmp _gets_loop_gets
7825   37B9             _gets_end_gets:
7826   37B9 19 00         mov al, 0
7827   37BB 3E            mov [d], al        ; terminate string
7828   37BC E7            pop d
7829   37BD E4            pop a
7830   37BE 09            ret
7831   37BF             ; --- END INLINE ASM SEGMENT
7832   37BF F9            leave
7833   37C0 09            ret
7834   37C1             
7835   37C1             atoi:
7836   37C1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7837   37C4             ; int result = 0;  // Initialize result 
7838   37C4 52 02 00      sub sp, 2
7839   37C7             ; --- START LOCAL VAR INITIALIZATION
7840   37C7 FA FF FF      lea d, [bp + -1] ; $result
7841   37CA DA            push d
7842   37CB FD 2E 00 00   mov32 cb, $00000000
7842   37CF 00 00 
7843   37D1 E7            pop d
7844   37D2 FD 43         mov [d], b
7845   37D4             ; --- END LOCAL VAR INITIALIZATION
7846   37D4             ; int sign = 1;    // Initialize sign as positive 
7847   37D4 52 02 00      sub sp, 2
7848   37D7             ; --- START LOCAL VAR INITIALIZATION
7849   37D7 FA FD FF      lea d, [bp + -3] ; $sign
7850   37DA DA            push d
7851   37DB FD 2E 01 00   mov32 cb, $00000001
7851   37DF 00 00 
7852   37E1 E7            pop d
7853   37E2 FD 43         mov [d], b
7854   37E4             ; --- END LOCAL VAR INITIALIZATION
7855   37E4             ; while (*str == ' ') str++; 
7856   37E4             _while153_cond:
7857   37E4 FA 05 00      lea d, [bp + 5] ; $str
7858   37E7 2A            mov b, [d]
7859   37E8 38 00 00      mov c, 0
7860   37EB 74            mov d, b
7861   37EC 32            mov bl, [d]
7862   37ED A7 00         mov bh, 0
7863   37EF 38 00 00      mov c, 0
7864   37F2             ; --- START RELATIONAL
7865   37F2 D7            push a
7866   37F3 11            mov a, b
7867   37F4 FD 2E 20 00   mov32 cb, $00000020
7867   37F8 00 00 
7868   37FA B0            cmp a, b
7869   37FB FD 71         seq ; ==
7870   37FD E4            pop a
7871   37FE             ; --- END RELATIONAL
7872   37FE C0 00 00      cmp b, 0
7873   3801 C6 17 38      je _while153_exit
7874   3804             _while153_block:
7875   3804             ; str++; 
7876   3804 FA 05 00      lea d, [bp + 5] ; $str
7877   3807 2A            mov b, [d]
7878   3808 38 00 00      mov c, 0
7879   380B FD 77         inc b
7880   380D FA 05 00      lea d, [bp + 5] ; $str
7881   3810 FD 43         mov [d], b
7882   3812 FD 7D         dec b
7883   3814 0A E4 37      jmp _while153_cond
7884   3817             _while153_exit:
7885   3817             ; if (*str == '-' || *str == '+') { 
7886   3817             _if154_cond:
7887   3817 FA 05 00      lea d, [bp + 5] ; $str
7888   381A 2A            mov b, [d]
7889   381B 38 00 00      mov c, 0
7890   381E 74            mov d, b
7891   381F 32            mov bl, [d]
7892   3820 A7 00         mov bh, 0
7893   3822 38 00 00      mov c, 0
7894   3825             ; --- START RELATIONAL
7895   3825 D7            push a
7896   3826 11            mov a, b
7897   3827 FD 2E 2D 00   mov32 cb, $0000002d
7897   382B 00 00 
7898   382D B0            cmp a, b
7899   382E FD 71         seq ; ==
7900   3830 E4            pop a
7901   3831             ; --- END RELATIONAL
7902   3831             ; --- START LOGICAL OR
7903   3831 D7            push a
7904   3832 11            mov a, b
7905   3833 FA 05 00      lea d, [bp + 5] ; $str
7906   3836 2A            mov b, [d]
7907   3837 38 00 00      mov c, 0
7908   383A 74            mov d, b
7909   383B 32            mov bl, [d]
7910   383C A7 00         mov bh, 0
7911   383E 38 00 00      mov c, 0
7912   3841             ; --- START RELATIONAL
7913   3841 D7            push a
7914   3842 11            mov a, b
7915   3843 FD 2E 2B 00   mov32 cb, $0000002b
7915   3847 00 00 
7916   3849 B0            cmp a, b
7917   384A FD 71         seq ; ==
7918   384C E4            pop a
7919   384D             ; --- END RELATIONAL
7920   384D FD A8         sor a, b ; ||
7921   384F E4            pop a
7922   3850             ; --- END LOGICAL OR
7923   3850 C0 00 00      cmp b, 0
7924   3853 C6 99 38      je _if154_exit
7925   3856             _if154_TRUE:
7926   3856             ; if (*str == '-') sign = -1; 
7927   3856             _if155_cond:
7928   3856 FA 05 00      lea d, [bp + 5] ; $str
7929   3859 2A            mov b, [d]
7930   385A 38 00 00      mov c, 0
7931   385D 74            mov d, b
7932   385E 32            mov bl, [d]
7933   385F A7 00         mov bh, 0
7934   3861 38 00 00      mov c, 0
7935   3864             ; --- START RELATIONAL
7936   3864 D7            push a
7937   3865 11            mov a, b
7938   3866 FD 2E 2D 00   mov32 cb, $0000002d
7938   386A 00 00 
7939   386C B0            cmp a, b
7940   386D FD 71         seq ; ==
7941   386F E4            pop a
7942   3870             ; --- END RELATIONAL
7943   3870 C0 00 00      cmp b, 0
7944   3873 C6 86 38      je _if155_exit
7945   3876             _if155_TRUE:
7946   3876             ; sign = -1; 
7947   3876 FA FD FF      lea d, [bp + -3] ; $sign
7948   3879 DA            push d
7949   387A FD 2E FF FF   mov32 cb, $ffffffff
7949   387E FF FF 
7950   3880 E7            pop d
7951   3881 FD 43         mov [d], b
7952   3883 0A 86 38      jmp _if155_exit
7953   3886             _if155_exit:
7954   3886             ; str++; 
7955   3886 FA 05 00      lea d, [bp + 5] ; $str
7956   3889 2A            mov b, [d]
7957   388A 38 00 00      mov c, 0
7958   388D FD 77         inc b
7959   388F FA 05 00      lea d, [bp + 5] ; $str
7960   3892 FD 43         mov [d], b
7961   3894 FD 7D         dec b
7962   3896 0A 99 38      jmp _if154_exit
7963   3899             _if154_exit:
7964   3899             ; while (*str >= '0' && *str <= '9') { 
7965   3899             _while156_cond:
7966   3899 FA 05 00      lea d, [bp + 5] ; $str
7967   389C 2A            mov b, [d]
7968   389D 38 00 00      mov c, 0
7969   38A0 74            mov d, b
7970   38A1 32            mov bl, [d]
7971   38A2 A7 00         mov bh, 0
7972   38A4 38 00 00      mov c, 0
7973   38A7             ; --- START RELATIONAL
7974   38A7 D7            push a
7975   38A8 11            mov a, b
7976   38A9 FD 2E 30 00   mov32 cb, $00000030
7976   38AD 00 00 
7977   38AF B0            cmp a, b
7978   38B0 FD 82         sgeu ; >= (unsigned)
7979   38B2 E4            pop a
7980   38B3             ; --- END RELATIONAL
7981   38B3             ; --- START LOGICAL AND
7982   38B3 D7            push a
7983   38B4 11            mov a, b
7984   38B5 FA 05 00      lea d, [bp + 5] ; $str
7985   38B8 2A            mov b, [d]
7986   38B9 38 00 00      mov c, 0
7987   38BC 74            mov d, b
7988   38BD 32            mov bl, [d]
7989   38BE A7 00         mov bh, 0
7990   38C0 38 00 00      mov c, 0
7991   38C3             ; --- START RELATIONAL
7992   38C3 D7            push a
7993   38C4 11            mov a, b
7994   38C5 FD 2E 39 00   mov32 cb, $00000039
7994   38C9 00 00 
7995   38CB B0            cmp a, b
7996   38CC FD 76         sleu ; <= (unsigned)
7997   38CE E4            pop a
7998   38CF             ; --- END RELATIONAL
7999   38CF FD A7         sand a, b
8000   38D1 E4            pop a
8001   38D2             ; --- END LOGICAL AND
8002   38D2 C0 00 00      cmp b, 0
8003   38D5 C6 61 39      je _while156_exit
8004   38D8             _while156_block:
8005   38D8             ; result = result * 10 + (*str - '0'); 
8006   38D8 FA FF FF      lea d, [bp + -1] ; $result
8007   38DB DA            push d
8008   38DC FA FF FF      lea d, [bp + -1] ; $result
8009   38DF 2A            mov b, [d]
8010   38E0 38 00 00      mov c, 0
8011   38E3             ; --- START FACTORS
8012   38E3 D7            push a
8013   38E4 FD D8         push g
8014   38E6 11            mov a, b
8015   38E7 FD 7A         mov g, c
8016   38E9 FD 2E 0A 00   mov32 cb, $0000000a
8016   38ED 00 00 
8017   38EF D7            push a     ; save left operand
8018   38F0 8E            xor a, b   ; xor sign bits
8019   38F1 FD AA         swp a      ; swap bytes
8020   38F3 83            mov cl, al ; save result of xor into 'dl'
8021   38F4 E4            pop a      ; restore left side operator
8022   38F5 DF            push cl    ; save result of xor above
8023   38F6 FD AA         swp a  
8024   38F8 93 80         test al, $80  
8025   38FA FD AA         swp a  
8026   38FC C6 01 39      jz skip_invert_a_158  
8027   38FF FD 95         neg a 
8028   3901             skip_invert_a_158:   
8029   3901 FD AB         swp b
8030   3903 FD 93 80      test bl, $80  
8031   3906 FD AB         swp b
8032   3908 C6 0D 39      jz skip_invert_b_158  
8033   390B FD 97         neg b 
8034   390D             skip_invert_b_158:   
8035   390D AC            mul a, b ; *
8036   390E FD 78         mov g, a
8037   3910 11            mov a, b
8038   3911 EA            pop bl
8039   3912 FD 93 80      test bl, $80
8040   3915 C6 22 39      jz _same_signs_158
8041   3918 2F            mov bl, al
8042   3919 95            not a
8043   391A FD 97         neg b
8044   391C 5B 00 00      adc a, 0
8045   391F FD 78         mov g, a
8046   3921 11            mov a, b
8047   3922             _same_signs_158:
8048   3922 FD 38         mov c, g
8049   3924 27            mov b, a
8050   3925 FD F1         pop g
8051   3927 E4            pop a
8052   3928             ; --- END FACTORS
8053   3928             ; --- START TERMS
8054   3928 D7            push a
8055   3929 FD D8         push g
8056   392B 11            mov a, b
8057   392C FD 7A         mov g, c
8058   392E FA 05 00      lea d, [bp + 5] ; $str
8059   3931 2A            mov b, [d]
8060   3932 38 00 00      mov c, 0
8061   3935 74            mov d, b
8062   3936 32            mov bl, [d]
8063   3937 A7 00         mov bh, 0
8064   3939 38 00 00      mov c, 0
8065   393C             ; --- START TERMS
8066   393C D7            push a
8067   393D 11            mov a, b
8068   393E FD 2E 30 00   mov32 cb, $00000030
8068   3942 00 00 
8069   3944 60            sub a, b
8070   3945 27            mov b, a
8071   3946 E4            pop a
8072   3947             ; --- END TERMS
8073   3947 56            add b, a
8074   3948 FD F1         pop g
8075   394A E4            pop a
8076   394B             ; --- END TERMS
8077   394B E7            pop d
8078   394C FD 43         mov [d], b
8079   394E             ; str++; 
8080   394E FA 05 00      lea d, [bp + 5] ; $str
8081   3951 2A            mov b, [d]
8082   3952 38 00 00      mov c, 0
8083   3955 FD 77         inc b
8084   3957 FA 05 00      lea d, [bp + 5] ; $str
8085   395A FD 43         mov [d], b
8086   395C FD 7D         dec b
8087   395E 0A 99 38      jmp _while156_cond
8088   3961             _while156_exit:
8089   3961             ; return sign * result; 
8090   3961 FA FD FF      lea d, [bp + -3] ; $sign
8091   3964 2A            mov b, [d]
8092   3965 38 00 00      mov c, 0
8093   3968             ; --- START FACTORS
8094   3968 D7            push a
8095   3969 FD D8         push g
8096   396B 11            mov a, b
8097   396C FD 7A         mov g, c
8098   396E FA FF FF      lea d, [bp + -1] ; $result
8099   3971 2A            mov b, [d]
8100   3972 38 00 00      mov c, 0
8101   3975 D7            push a     ; save left operand
8102   3976 8E            xor a, b   ; xor sign bits
8103   3977 FD AA         swp a      ; swap bytes
8104   3979 83            mov cl, al ; save result of xor into 'dl'
8105   397A E4            pop a      ; restore left side operator
8106   397B DF            push cl    ; save result of xor above
8107   397C FD AA         swp a  
8108   397E 93 80         test al, $80  
8109   3980 FD AA         swp a  
8110   3982 C6 87 39      jz skip_invert_a_160  
8111   3985 FD 95         neg a 
8112   3987             skip_invert_a_160:   
8113   3987 FD AB         swp b
8114   3989 FD 93 80      test bl, $80  
8115   398C FD AB         swp b
8116   398E C6 93 39      jz skip_invert_b_160  
8117   3991 FD 97         neg b 
8118   3993             skip_invert_b_160:   
8119   3993 AC            mul a, b ; *
8120   3994 FD 78         mov g, a
8121   3996 11            mov a, b
8122   3997 EA            pop bl
8123   3998 FD 93 80      test bl, $80
8124   399B C6 A8 39      jz _same_signs_160
8125   399E 2F            mov bl, al
8126   399F 95            not a
8127   39A0 FD 97         neg b
8128   39A2 5B 00 00      adc a, 0
8129   39A5 FD 78         mov g, a
8130   39A7 11            mov a, b
8131   39A8             _same_signs_160:
8132   39A8 FD 38         mov c, g
8133   39AA 27            mov b, a
8134   39AB FD F1         pop g
8135   39AD E4            pop a
8136   39AE             ; --- END FACTORS
8137   39AE F9            leave
8138   39AF 09            ret
8139   39B0             
8140   39B0             back:
8141   39B0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8142   39B3             ; char *t; 
8143   39B3 52 01 00      sub sp, 1
8144   39B6             ; t = token; 
8145   39B6 FA 00 00      lea d, [bp + 0] ; $t
8146   39B9 DA            push d
8147   39BA 3B 90 42      mov d, _token_data ; $token
8148   39BD 2D            mov b, d
8149   39BE 38 00 00      mov c, 0
8150   39C1 E7            pop d
8151   39C2 FD 3E         mov [d], bl
8152   39C4             ; while(*t++) prog--; 
8153   39C4             _while161_cond:
8154   39C4 FA 00 00      lea d, [bp + 0] ; $t
8155   39C7 32            mov bl, [d]
8156   39C8 A7 00         mov bh, 0
8157   39CA 38 00 00      mov c, 0
8158   39CD FD 77         inc b
8159   39CF FA 00 00      lea d, [bp + 0] ; $t
8160   39D2 FD 3E         mov [d], bl
8161   39D4 FD 7D         dec b
8162   39D6 74            mov d, b
8163   39D7 32            mov bl, [d]
8164   39D8 A7 00         mov bh, 0
8165   39DA 38 00 00      mov c, 0
8166   39DD C0 00 00      cmp b, 0
8167   39E0 C6 F8 39      je _while161_exit
8168   39E3             _while161_block:
8169   39E3             ; prog--; 
8170   39E3 3B 8F 42      mov d, _prog ; $prog
8171   39E6 32            mov bl, [d]
8172   39E7 A7 00         mov bh, 0
8173   39E9 38 00 00      mov c, 0
8174   39EC FD 7D         dec b
8175   39EE 3B 8F 42      mov d, _prog ; $prog
8176   39F1 FD 3E         mov [d], bl
8177   39F3 FD 77         inc b
8178   39F5 0A C4 39      jmp _while161_cond
8179   39F8             _while161_exit:
8180   39F8             ; tok = TOK_UNDEF; 
8181   39F8 3B 8B 42      mov d, _tok ; $tok
8182   39FB DA            push d
8183   39FC FD 2E 00 00   mov32 cb, $0 ; enum element: TOK_UNDEF
8183   3A00 00 00 
8184   3A02 E7            pop d
8185   3A03 FD 43         mov [d], b
8186   3A05             ; toktype = TYPE_UNDEF; 
8187   3A05 3B 8D 42      mov d, _toktype ; $toktype
8188   3A08 DA            push d
8189   3A09 FD 2E 00 00   mov32 cb, $0 ; enum element: TYPE_UNDEF
8189   3A0D 00 00 
8190   3A0F E7            pop d
8191   3A10 FD 43         mov [d], b
8192   3A12             ; token[0] = '\0'; 
8193   3A12 3B 90 42      mov d, _token_data ; $token
8194   3A15 D7            push a
8195   3A16 DA            push d
8196   3A17 FD 2E 00 00   mov32 cb, $00000000
8196   3A1B 00 00 
8197   3A1D E7            pop d
8198   3A1E 5A            add d, b
8199   3A1F E4            pop a
8200   3A20 DA            push d
8201   3A21 FD 2E 00 00   mov32 cb, $00000000
8201   3A25 00 00 
8202   3A27 E7            pop d
8203   3A28 FD 3E         mov [d], bl
8204   3A2A F9            leave
8205   3A2B 09            ret
8206   3A2C             
8207   3A2C             get_path:
8208   3A2C F8 00 00      enter 0 ; (push bp; mov bp, sp)
8209   3A2F             ; char *t; 
8210   3A2F 52 01 00      sub sp, 1
8211   3A32             ; *token = '\0'; 
8212   3A32 3B 90 42      mov d, _token_data ; $token
8213   3A35 2D            mov b, d
8214   3A36 38 00 00      mov c, 0
8215   3A39 D8            push b
8216   3A3A FD 2E 00 00   mov32 cb, $00000000
8216   3A3E 00 00 
8217   3A40 E7            pop d
8218   3A41 FD 3E         mov [d], bl
8219   3A43             ; t = token; 
8220   3A43 FA 00 00      lea d, [bp + 0] ; $t
8221   3A46 DA            push d
8222   3A47 3B 90 42      mov d, _token_data ; $token
8223   3A4A 2D            mov b, d
8224   3A4B 38 00 00      mov c, 0
8225   3A4E E7            pop d
8226   3A4F FD 3E         mov [d], bl
8227   3A51             ; while(is_space(*prog)) prog++; 
8228   3A51             _while162_cond:
8229   3A51             ; --- START FUNCTION CALL
8230   3A51 3B 8F 42      mov d, _prog ; $prog
8231   3A54 32            mov bl, [d]
8232   3A55 A7 00         mov bh, 0
8233   3A57 38 00 00      mov c, 0
8234   3A5A 74            mov d, b
8235   3A5B 32            mov bl, [d]
8236   3A5C A7 00         mov bh, 0
8237   3A5E 38 00 00      mov c, 0
8238   3A61 DD            push bl
8239   3A62 07 4C 27      call is_space
8240   3A65 51 01 00      add sp, 1
8241   3A68             ; --- END FUNCTION CALL
8242   3A68 C0 00 00      cmp b, 0
8243   3A6B C6 83 3A      je _while162_exit
8244   3A6E             _while162_block:
8245   3A6E             ; prog++; 
8246   3A6E 3B 8F 42      mov d, _prog ; $prog
8247   3A71 32            mov bl, [d]
8248   3A72 A7 00         mov bh, 0
8249   3A74 38 00 00      mov c, 0
8250   3A77 FD 77         inc b
8251   3A79 3B 8F 42      mov d, _prog ; $prog
8252   3A7C FD 3E         mov [d], bl
8253   3A7E FD 7D         dec b
8254   3A80 0A 51 3A      jmp _while162_cond
8255   3A83             _while162_exit:
8256   3A83             ; if(*prog == '\0'){ 
8257   3A83             _if163_cond:
8258   3A83 3B 8F 42      mov d, _prog ; $prog
8259   3A86 32            mov bl, [d]
8260   3A87 A7 00         mov bh, 0
8261   3A89 38 00 00      mov c, 0
8262   3A8C 74            mov d, b
8263   3A8D 32            mov bl, [d]
8264   3A8E A7 00         mov bh, 0
8265   3A90 38 00 00      mov c, 0
8266   3A93             ; --- START RELATIONAL
8267   3A93 D7            push a
8268   3A94 11            mov a, b
8269   3A95 FD 2E 00 00   mov32 cb, $00000000
8269   3A99 00 00 
8270   3A9B B0            cmp a, b
8271   3A9C FD 71         seq ; ==
8272   3A9E E4            pop a
8273   3A9F             ; --- END RELATIONAL
8274   3A9F C0 00 00      cmp b, 0
8275   3AA2 C6 AA 3A      je _if163_exit
8276   3AA5             _if163_TRUE:
8277   3AA5             ; return; 
8278   3AA5 F9            leave
8279   3AA6 09            ret
8280   3AA7 0A AA 3A      jmp _if163_exit
8281   3AAA             _if163_exit:
8282   3AAA             ; while( 
8283   3AAA             _while164_cond:
8284   3AAA 3B 8F 42      mov d, _prog ; $prog
8285   3AAD 32            mov bl, [d]
8286   3AAE A7 00         mov bh, 0
8287   3AB0 38 00 00      mov c, 0
8288   3AB3 74            mov d, b
8289   3AB4 32            mov bl, [d]
8290   3AB5 A7 00         mov bh, 0
8291   3AB7 38 00 00      mov c, 0
8292   3ABA             ; --- START RELATIONAL
8293   3ABA D7            push a
8294   3ABB 11            mov a, b
8295   3ABC FD 2E 61 00   mov32 cb, $00000061
8295   3AC0 00 00 
8296   3AC2 B0            cmp a, b
8297   3AC3 FD 80         sge ; >=
8298   3AC5 E4            pop a
8299   3AC6             ; --- END RELATIONAL
8300   3AC6             ; --- START LOGICAL AND
8301   3AC6 D7            push a
8302   3AC7 11            mov a, b
8303   3AC8 3B 8F 42      mov d, _prog ; $prog
8304   3ACB 32            mov bl, [d]
8305   3ACC A7 00         mov bh, 0
8306   3ACE 38 00 00      mov c, 0
8307   3AD1 74            mov d, b
8308   3AD2 32            mov bl, [d]
8309   3AD3 A7 00         mov bh, 0
8310   3AD5 38 00 00      mov c, 0
8311   3AD8             ; --- START RELATIONAL
8312   3AD8 D7            push a
8313   3AD9 11            mov a, b
8314   3ADA FD 2E 7A 00   mov32 cb, $0000007a
8314   3ADE 00 00 
8315   3AE0 B0            cmp a, b
8316   3AE1 FD 74         sle ; <= (signed)
8317   3AE3 E4            pop a
8318   3AE4             ; --- END RELATIONAL
8319   3AE4 FD A7         sand a, b
8320   3AE6 E4            pop a
8321   3AE7             ; --- END LOGICAL AND
8322   3AE7             ; --- START LOGICAL OR
8323   3AE7 D7            push a
8324   3AE8 11            mov a, b
8325   3AE9 3B 8F 42      mov d, _prog ; $prog
8326   3AEC 32            mov bl, [d]
8327   3AED A7 00         mov bh, 0
8328   3AEF 38 00 00      mov c, 0
8329   3AF2 74            mov d, b
8330   3AF3 32            mov bl, [d]
8331   3AF4 A7 00         mov bh, 0
8332   3AF6 38 00 00      mov c, 0
8333   3AF9             ; --- START RELATIONAL
8334   3AF9 D7            push a
8335   3AFA 11            mov a, b
8336   3AFB FD 2E 41 00   mov32 cb, $00000041
8336   3AFF 00 00 
8337   3B01 B0            cmp a, b
8338   3B02 FD 80         sge ; >=
8339   3B04 E4            pop a
8340   3B05             ; --- END RELATIONAL
8341   3B05             ; --- START LOGICAL AND
8342   3B05 D7            push a
8343   3B06 11            mov a, b
8344   3B07 3B 8F 42      mov d, _prog ; $prog
8345   3B0A 32            mov bl, [d]
8346   3B0B A7 00         mov bh, 0
8347   3B0D 38 00 00      mov c, 0
8348   3B10 74            mov d, b
8349   3B11 32            mov bl, [d]
8350   3B12 A7 00         mov bh, 0
8351   3B14 38 00 00      mov c, 0
8352   3B17             ; --- START RELATIONAL
8353   3B17 D7            push a
8354   3B18 11            mov a, b
8355   3B19 FD 2E 5A 00   mov32 cb, $0000005a
8355   3B1D 00 00 
8356   3B1F B0            cmp a, b
8357   3B20 FD 74         sle ; <= (signed)
8358   3B22 E4            pop a
8359   3B23             ; --- END RELATIONAL
8360   3B23 FD A7         sand a, b
8361   3B25 E4            pop a
8362   3B26             ; --- END LOGICAL AND
8363   3B26 FD A8         sor a, b ; ||
8364   3B28 11            mov a, b
8365   3B29 3B 8F 42      mov d, _prog ; $prog
8366   3B2C 32            mov bl, [d]
8367   3B2D A7 00         mov bh, 0
8368   3B2F 38 00 00      mov c, 0
8369   3B32 74            mov d, b
8370   3B33 32            mov bl, [d]
8371   3B34 A7 00         mov bh, 0
8372   3B36 38 00 00      mov c, 0
8373   3B39             ; --- START RELATIONAL
8374   3B39 D7            push a
8375   3B3A 11            mov a, b
8376   3B3B FD 2E 30 00   mov32 cb, $00000030
8376   3B3F 00 00 
8377   3B41 B0            cmp a, b
8378   3B42 FD 80         sge ; >=
8379   3B44 E4            pop a
8380   3B45             ; --- END RELATIONAL
8381   3B45             ; --- START LOGICAL AND
8382   3B45 D7            push a
8383   3B46 11            mov a, b
8384   3B47 3B 8F 42      mov d, _prog ; $prog
8385   3B4A 32            mov bl, [d]
8386   3B4B A7 00         mov bh, 0
8387   3B4D 38 00 00      mov c, 0
8388   3B50 74            mov d, b
8389   3B51 32            mov bl, [d]
8390   3B52 A7 00         mov bh, 0
8391   3B54 38 00 00      mov c, 0
8392   3B57             ; --- START RELATIONAL
8393   3B57 D7            push a
8394   3B58 11            mov a, b
8395   3B59 FD 2E 39 00   mov32 cb, $00000039
8395   3B5D 00 00 
8396   3B5F B0            cmp a, b
8397   3B60 FD 74         sle ; <= (signed)
8398   3B62 E4            pop a
8399   3B63             ; --- END RELATIONAL
8400   3B63 FD A7         sand a, b
8401   3B65 E4            pop a
8402   3B66             ; --- END LOGICAL AND
8403   3B66 FD A8         sor a, b ; ||
8404   3B68 11            mov a, b
8405   3B69 3B 8F 42      mov d, _prog ; $prog
8406   3B6C 32            mov bl, [d]
8407   3B6D A7 00         mov bh, 0
8408   3B6F 38 00 00      mov c, 0
8409   3B72 74            mov d, b
8410   3B73 32            mov bl, [d]
8411   3B74 A7 00         mov bh, 0
8412   3B76 38 00 00      mov c, 0
8413   3B79             ; --- START RELATIONAL
8414   3B79 D7            push a
8415   3B7A 11            mov a, b
8416   3B7B FD 2E 2F 00   mov32 cb, $0000002f
8416   3B7F 00 00 
8417   3B81 B0            cmp a, b
8418   3B82 FD 71         seq ; ==
8419   3B84 E4            pop a
8420   3B85             ; --- END RELATIONAL
8421   3B85 FD A8         sor a, b ; ||
8422   3B87 11            mov a, b
8423   3B88 3B 8F 42      mov d, _prog ; $prog
8424   3B8B 32            mov bl, [d]
8425   3B8C A7 00         mov bh, 0
8426   3B8E 38 00 00      mov c, 0
8427   3B91 74            mov d, b
8428   3B92 32            mov bl, [d]
8429   3B93 A7 00         mov bh, 0
8430   3B95 38 00 00      mov c, 0
8431   3B98             ; --- START RELATIONAL
8432   3B98 D7            push a
8433   3B99 11            mov a, b
8434   3B9A FD 2E 5F 00   mov32 cb, $0000005f
8434   3B9E 00 00 
8435   3BA0 B0            cmp a, b
8436   3BA1 FD 71         seq ; ==
8437   3BA3 E4            pop a
8438   3BA4             ; --- END RELATIONAL
8439   3BA4 FD A8         sor a, b ; ||
8440   3BA6 11            mov a, b
8441   3BA7 3B 8F 42      mov d, _prog ; $prog
8442   3BAA 32            mov bl, [d]
8443   3BAB A7 00         mov bh, 0
8444   3BAD 38 00 00      mov c, 0
8445   3BB0 74            mov d, b
8446   3BB1 32            mov bl, [d]
8447   3BB2 A7 00         mov bh, 0
8448   3BB4 38 00 00      mov c, 0
8449   3BB7             ; --- START RELATIONAL
8450   3BB7 D7            push a
8451   3BB8 11            mov a, b
8452   3BB9 FD 2E 2D 00   mov32 cb, $0000002d
8452   3BBD 00 00 
8453   3BBF B0            cmp a, b
8454   3BC0 FD 71         seq ; ==
8455   3BC2 E4            pop a
8456   3BC3             ; --- END RELATIONAL
8457   3BC3 FD A8         sor a, b ; ||
8458   3BC5 11            mov a, b
8459   3BC6 3B 8F 42      mov d, _prog ; $prog
8460   3BC9 32            mov bl, [d]
8461   3BCA A7 00         mov bh, 0
8462   3BCC 38 00 00      mov c, 0
8463   3BCF 74            mov d, b
8464   3BD0 32            mov bl, [d]
8465   3BD1 A7 00         mov bh, 0
8466   3BD3 38 00 00      mov c, 0
8467   3BD6             ; --- START RELATIONAL
8468   3BD6 D7            push a
8469   3BD7 11            mov a, b
8470   3BD8 FD 2E 2E 00   mov32 cb, $0000002e
8470   3BDC 00 00 
8471   3BDE B0            cmp a, b
8472   3BDF FD 71         seq ; ==
8473   3BE1 E4            pop a
8474   3BE2             ; --- END RELATIONAL
8475   3BE2 FD A8         sor a, b ; ||
8476   3BE4 E4            pop a
8477   3BE5             ; --- END LOGICAL OR
8478   3BE5 C0 00 00      cmp b, 0
8479   3BE8 C6 1D 3C      je _while164_exit
8480   3BEB             _while164_block:
8481   3BEB             ; *t++ = *prog++; 
8482   3BEB FA 00 00      lea d, [bp + 0] ; $t
8483   3BEE 32            mov bl, [d]
8484   3BEF A7 00         mov bh, 0
8485   3BF1 38 00 00      mov c, 0
8486   3BF4 FD 77         inc b
8487   3BF6 FA 00 00      lea d, [bp + 0] ; $t
8488   3BF9 FD 3E         mov [d], bl
8489   3BFB FD 7D         dec b
8490   3BFD D8            push b
8491   3BFE 3B 8F 42      mov d, _prog ; $prog
8492   3C01 32            mov bl, [d]
8493   3C02 A7 00         mov bh, 0
8494   3C04 38 00 00      mov c, 0
8495   3C07 FD 77         inc b
8496   3C09 3B 8F 42      mov d, _prog ; $prog
8497   3C0C FD 3E         mov [d], bl
8498   3C0E FD 7D         dec b
8499   3C10 74            mov d, b
8500   3C11 32            mov bl, [d]
8501   3C12 A7 00         mov bh, 0
8502   3C14 38 00 00      mov c, 0
8503   3C17 E7            pop d
8504   3C18 FD 3E         mov [d], bl
8505   3C1A 0A AA 3A      jmp _while164_cond
8506   3C1D             _while164_exit:
8507   3C1D             ; *t = '\0'; 
8508   3C1D FA 00 00      lea d, [bp + 0] ; $t
8509   3C20 32            mov bl, [d]
8510   3C21 A7 00         mov bh, 0
8511   3C23 38 00 00      mov c, 0
8512   3C26 D8            push b
8513   3C27 FD 2E 00 00   mov32 cb, $00000000
8513   3C2B 00 00 
8514   3C2D E7            pop d
8515   3C2E FD 3E         mov [d], bl
8516   3C30 F9            leave
8517   3C31 09            ret
8518   3C32             ; --- END TEXT SEGMENT
8519   3C32             
8520   3C32             ; --- BEGIN DATA SEGMENT
8521   3C32 00          _transient_area: .fill 1, 0
8522   3C33 00 00 00 00 _command_data: .fill 512, 0
8522   3C37 00 00 00 00 
8522   3C3B 00 00 00 00 
8522   3C3F 00 00 00 00 
8522   3C43 00 00 00 00 
8522   3C47 00 00 00 00 
8522   3C4B 00 00 00 00 
8522   3C4F 00 00 00 00 
8522   3C53 00 00 00 00 
8522   3C57 00 00 00 00 
8522   3C5B 00 00 00 00 
8522   3C5F 00 00 00 00 
8522   3C63 00 00 00 00 
8522   3C67 00 00 00 00 
8522   3C6B 00 00 00 00 
8522   3C6F 00 00 00 00 
8522   3C73 00 00 00 00 
8522   3C77 00 00 00 00 
8522   3C7B 00 00 00 00 
8522   3C7F 00 00 00 00 
8522   3C83 00 00 00 00 
8522   3C87 00 00 00 00 
8522   3C8B 00 00 00 00 
8522   3C8F 00 00 00 00 
8522   3C93 00 00 00 00 
8522   3C97 00 00 00 00 
8522   3C9B 00 00 00 00 
8522   3C9F 00 00 00 00 
8522   3CA3 00 00 00 00 
8522   3CA7 00 00 00 00 
8522   3CAB 00 00 00 00 
8522   3CAF 00 00 00 00 
8522   3CB3 00 00 00 00 
8522   3CB7 00 00 00 00 
8522   3CBB 00 00 00 00 
8522   3CBF 00 00 00 00 
8522   3CC3 00 00 00 00 
8522   3CC7 00 00 00 00 
8522   3CCB 00 00 00 00 
8522   3CCF 00 00 00 00 
8522   3CD3 00 00 00 00 
8522   3CD7 00 00 00 00 
8522   3CDB 00 00 00 00 
8522   3CDF 00 00 00 00 
8522   3CE3 00 00 00 00 
8522   3CE7 00 00 00 00 
8522   3CEB 00 00 00 00 
8522   3CEF 00 00 00 00 
8522   3CF3 00 00 00 00 
8522   3CF7 00 00 00 00 
8522   3CFB 00 00 00 00 
8522   3CFF 00 00 00 00 
8522   3D03 00 00 00 00 
8522   3D07 00 00 00 00 
8522   3D0B 00 00 00 00 
8522   3D0F 00 00 00 00 
8522   3D13 00 00 00 00 
8522   3D17 00 00 00 00 
8522   3D1B 00 00 00 00 
8522   3D1F 00 00 00 00 
8522   3D23 00 00 00 00 
8522   3D27 00 00 00 00 
8522   3D2B 00 00 00 00 
8522   3D2F 00 00 00 00 
8522   3D33 00 00 00 00 
8522   3D37 00 00 00 00 
8522   3D3B 00 00 00 00 
8522   3D3F 00 00 00 00 
8522   3D43 00 00 00 00 
8522   3D47 00 00 00 00 
8522   3D4B 00 00 00 00 
8522   3D4F 00 00 00 00 
8522   3D53 00 00 00 00 
8522   3D57 00 00 00 00 
8522   3D5B 00 00 00 00 
8522   3D5F 00 00 00 00 
8522   3D63 00 00 00 00 
8522   3D67 00 00 00 00 
8522   3D6B 00 00 00 00 
8522   3D6F 00 00 00 00 
8522   3D73 00 00 00 00 
8522   3D77 00 00 00 00 
8522   3D7B 00 00 00 00 
8522   3D7F 00 00 00 00 
8522   3D83 00 00 00 00 
8522   3D87 00 00 00 00 
8522   3D8B 00 00 00 00 
8522   3D8F 00 00 00 00 
8522   3D93 00 00 00 00 
8522   3D97 00 00 00 00 
8522   3D9B 00 00 00 00 
8522   3D9F 00 00 00 00 
8522   3DA3 00 00 00 00 
8522   3DA7 00 00 00 00 
8522   3DAB 00 00 00 00 
8522   3DAF 00 00 00 00 
8522   3DB3 00 00 00 00 
8522   3DB7 00 00 00 00 
8522   3DBB 00 00 00 00 
8522   3DBF 00 00 00 00 
8522   3DC3 00 00 00 00 
8522   3DC7 00 00 00 00 
8522   3DCB 00 00 00 00 
8522   3DCF 00 00 00 00 
8522   3DD3 00 00 00 00 
8522   3DD7 00 00 00 00 
8522   3DDB 00 00 00 00 
8522   3DDF 00 00 00 00 
8522   3DE3 00 00 00 00 
8522   3DE7 00 00 00 00 
8522   3DEB 00 00 00 00 
8522   3DEF 00 00 00 00 
8522   3DF3 00 00 00 00 
8522   3DF7 00 00 00 00 
8522   3DFB 00 00 00 00 
8522   3DFF 00 00 00 00 
8522   3E03 00 00 00 00 
8522   3E07 00 00 00 00 
8522   3E0B 00 00 00 00 
8522   3E0F 00 00 00 00 
8522   3E13 00 00 00 00 
8522   3E17 00 00 00 00 
8522   3E1B 00 00 00 00 
8522   3E1F 00 00 00 00 
8522   3E23 00 00 00 00 
8522   3E27 00 00 00 00 
8522   3E2B 00 00 00 00 
8522   3E2F 00 00 00 00 
8523   3E33 00 00 00 00 _path_data: .fill 256, 0
8523   3E37 00 00 00 00 
8523   3E3B 00 00 00 00 
8523   3E3F 00 00 00 00 
8523   3E43 00 00 00 00 
8523   3E47 00 00 00 00 
8523   3E4B 00 00 00 00 
8523   3E4F 00 00 00 00 
8523   3E53 00 00 00 00 
8523   3E57 00 00 00 00 
8523   3E5B 00 00 00 00 
8523   3E5F 00 00 00 00 
8523   3E63 00 00 00 00 
8523   3E67 00 00 00 00 
8523   3E6B 00 00 00 00 
8523   3E6F 00 00 00 00 
8523   3E73 00 00 00 00 
8523   3E77 00 00 00 00 
8523   3E7B 00 00 00 00 
8523   3E7F 00 00 00 00 
8523   3E83 00 00 00 00 
8523   3E87 00 00 00 00 
8523   3E8B 00 00 00 00 
8523   3E8F 00 00 00 00 
8523   3E93 00 00 00 00 
8523   3E97 00 00 00 00 
8523   3E9B 00 00 00 00 
8523   3E9F 00 00 00 00 
8523   3EA3 00 00 00 00 
8523   3EA7 00 00 00 00 
8523   3EAB 00 00 00 00 
8523   3EAF 00 00 00 00 
8523   3EB3 00 00 00 00 
8523   3EB7 00 00 00 00 
8523   3EBB 00 00 00 00 
8523   3EBF 00 00 00 00 
8523   3EC3 00 00 00 00 
8523   3EC7 00 00 00 00 
8523   3ECB 00 00 00 00 
8523   3ECF 00 00 00 00 
8523   3ED3 00 00 00 00 
8523   3ED7 00 00 00 00 
8523   3EDB 00 00 00 00 
8523   3EDF 00 00 00 00 
8523   3EE3 00 00 00 00 
8523   3EE7 00 00 00 00 
8523   3EEB 00 00 00 00 
8523   3EEF 00 00 00 00 
8523   3EF3 00 00 00 00 
8523   3EF7 00 00 00 00 
8523   3EFB 00 00 00 00 
8523   3EFF 00 00 00 00 
8523   3F03 00 00 00 00 
8523   3F07 00 00 00 00 
8523   3F0B 00 00 00 00 
8523   3F0F 00 00 00 00 
8523   3F13 00 00 00 00 
8523   3F17 00 00 00 00 
8523   3F1B 00 00 00 00 
8523   3F1F 00 00 00 00 
8523   3F23 00 00 00 00 
8523   3F27 00 00 00 00 
8523   3F2B 00 00 00 00 
8523   3F2F 00 00 00 00 
8524   3F33 00 00 00 00 _temp_data: .fill 256, 0
8524   3F37 00 00 00 00 
8524   3F3B 00 00 00 00 
8524   3F3F 00 00 00 00 
8524   3F43 00 00 00 00 
8524   3F47 00 00 00 00 
8524   3F4B 00 00 00 00 
8524   3F4F 00 00 00 00 
8524   3F53 00 00 00 00 
8524   3F57 00 00 00 00 
8524   3F5B 00 00 00 00 
8524   3F5F 00 00 00 00 
8524   3F63 00 00 00 00 
8524   3F67 00 00 00 00 
8524   3F6B 00 00 00 00 
8524   3F6F 00 00 00 00 
8524   3F73 00 00 00 00 
8524   3F77 00 00 00 00 
8524   3F7B 00 00 00 00 
8524   3F7F 00 00 00 00 
8524   3F83 00 00 00 00 
8524   3F87 00 00 00 00 
8524   3F8B 00 00 00 00 
8524   3F8F 00 00 00 00 
8524   3F93 00 00 00 00 
8524   3F97 00 00 00 00 
8524   3F9B 00 00 00 00 
8524   3F9F 00 00 00 00 
8524   3FA3 00 00 00 00 
8524   3FA7 00 00 00 00 
8524   3FAB 00 00 00 00 
8524   3FAF 00 00 00 00 
8524   3FB3 00 00 00 00 
8524   3FB7 00 00 00 00 
8524   3FBB 00 00 00 00 
8524   3FBF 00 00 00 00 
8524   3FC3 00 00 00 00 
8524   3FC7 00 00 00 00 
8524   3FCB 00 00 00 00 
8524   3FCF 00 00 00 00 
8524   3FD3 00 00 00 00 
8524   3FD7 00 00 00 00 
8524   3FDB 00 00 00 00 
8524   3FDF 00 00 00 00 
8524   3FE3 00 00 00 00 
8524   3FE7 00 00 00 00 
8524   3FEB 00 00 00 00 
8524   3FEF 00 00 00 00 
8524   3FF3 00 00 00 00 
8524   3FF7 00 00 00 00 
8524   3FFB 00 00 00 00 
8524   3FFF 00 00 00 00 
8524   4003 00 00 00 00 
8524   4007 00 00 00 00 
8524   400B 00 00 00 00 
8524   400F 00 00 00 00 
8524   4013 00 00 00 00 
8524   4017 00 00 00 00 
8524   401B 00 00 00 00 
8524   401F 00 00 00 00 
8524   4023 00 00 00 00 
8524   4027 00 00 00 00 
8524   402B 00 00 00 00 
8524   402F 00 00 00 00 
8525   4033 00 00 00 00 _argument_data: .fill 256, 0
8525   4037 00 00 00 00 
8525   403B 00 00 00 00 
8525   403F 00 00 00 00 
8525   4043 00 00 00 00 
8525   4047 00 00 00 00 
8525   404B 00 00 00 00 
8525   404F 00 00 00 00 
8525   4053 00 00 00 00 
8525   4057 00 00 00 00 
8525   405B 00 00 00 00 
8525   405F 00 00 00 00 
8525   4063 00 00 00 00 
8525   4067 00 00 00 00 
8525   406B 00 00 00 00 
8525   406F 00 00 00 00 
8525   4073 00 00 00 00 
8525   4077 00 00 00 00 
8525   407B 00 00 00 00 
8525   407F 00 00 00 00 
8525   4083 00 00 00 00 
8525   4087 00 00 00 00 
8525   408B 00 00 00 00 
8525   408F 00 00 00 00 
8525   4093 00 00 00 00 
8525   4097 00 00 00 00 
8525   409B 00 00 00 00 
8525   409F 00 00 00 00 
8525   40A3 00 00 00 00 
8525   40A7 00 00 00 00 
8525   40AB 00 00 00 00 
8525   40AF 00 00 00 00 
8525   40B3 00 00 00 00 
8525   40B7 00 00 00 00 
8525   40BB 00 00 00 00 
8525   40BF 00 00 00 00 
8525   40C3 00 00 00 00 
8525   40C7 00 00 00 00 
8525   40CB 00 00 00 00 
8525   40CF 00 00 00 00 
8525   40D3 00 00 00 00 
8525   40D7 00 00 00 00 
8525   40DB 00 00 00 00 
8525   40DF 00 00 00 00 
8525   40E3 00 00 00 00 
8525   40E7 00 00 00 00 
8525   40EB 00 00 00 00 
8525   40EF 00 00 00 00 
8525   40F3 00 00 00 00 
8525   40F7 00 00 00 00 
8525   40FB 00 00 00 00 
8525   40FF 00 00 00 00 
8525   4103 00 00 00 00 
8525   4107 00 00 00 00 
8525   410B 00 00 00 00 
8525   410F 00 00 00 00 
8525   4113 00 00 00 00 
8525   4117 00 00 00 00 
8525   411B 00 00 00 00 
8525   411F 00 00 00 00 
8525   4123 00 00 00 00 
8525   4127 00 00 00 00 
8525   412B 00 00 00 00 
8525   412F 00 00 00 00 
8526   4133 00 00 00 00 _last_cmd_data: .fill 128, 0
8526   4137 00 00 00 00 
8526   413B 00 00 00 00 
8526   413F 00 00 00 00 
8526   4143 00 00 00 00 
8526   4147 00 00 00 00 
8526   414B 00 00 00 00 
8526   414F 00 00 00 00 
8526   4153 00 00 00 00 
8526   4157 00 00 00 00 
8526   415B 00 00 00 00 
8526   415F 00 00 00 00 
8526   4163 00 00 00 00 
8526   4167 00 00 00 00 
8526   416B 00 00 00 00 
8526   416F 00 00 00 00 
8526   4173 00 00 00 00 
8526   4177 00 00 00 00 
8526   417B 00 00 00 00 
8526   417F 00 00 00 00 
8526   4183 00 00 00 00 
8526   4187 00 00 00 00 
8526   418B 00 00 00 00 
8526   418F 00 00 00 00 
8526   4193 00 00 00 00 
8526   4197 00 00 00 00 
8526   419B 00 00 00 00 
8526   419F 00 00 00 00 
8526   41A3 00 00 00 00 
8526   41A7 00 00 00 00 
8526   41AB 00 00 00 00 
8526   41AF 00 00 00 00 
8527   41B3 00 00 00 00 _variables_data: .fill 210, 0
8527   41B7 00 00 00 00 
8527   41BB 00 00 00 00 
8527   41BF 00 00 00 00 
8527   41C3 00 00 00 00 
8527   41C7 00 00 00 00 
8527   41CB 00 00 00 00 
8527   41CF 00 00 00 00 
8527   41D3 00 00 00 00 
8527   41D7 00 00 00 00 
8527   41DB 00 00 00 00 
8527   41DF 00 00 00 00 
8527   41E3 00 00 00 00 
8527   41E7 00 00 00 00 
8527   41EB 00 00 00 00 
8527   41EF 00 00 00 00 
8527   41F3 00 00 00 00 
8527   41F7 00 00 00 00 
8527   41FB 00 00 00 00 
8527   41FF 00 00 00 00 
8527   4203 00 00 00 00 
8527   4207 00 00 00 00 
8527   420B 00 00 00 00 
8527   420F 00 00 00 00 
8527   4213 00 00 00 00 
8527   4217 00 00 00 00 
8527   421B 00 00 00 00 
8527   421F 00 00 00 00 
8527   4223 00 00 00 00 
8527   4227 00 00 00 00 
8527   422B 00 00 00 00 
8527   422F 00 00 00 00 
8527   4233 00 00 00 00 
8527   4237 00 00 00 00 
8527   423B 00 00 00 00 
8527   423F 00 00 00 00 
8527   4243 00 00 00 00 
8527   4247 00 00 00 00 
8527   424B 00 00 00 00 
8527   424F 00 00 00 00 
8527   4253 00 00 00 00 
8527   4257 00 00 00 00 
8527   425B 00 00 00 00 
8527   425F 00 00 00 00 
8527   4263 00 00 00 00 
8527   4267 00 00 00 00 
8527   426B 00 00 00 00 
8527   426F 00 00 00 00 
8527   4273 00 00 00 00 
8527   4277 00 00 00 00 
8527   427B 00 00 00 00 
8527   427F 00 00 00 00 
8527   4283 00 00 
8528   4285 00 00       _vars_tos: .fill 2, 0
8529   4287 00 00       _rng_state: .dw $0000
8530   4289 00 00       _free_list: .dw 0
8531   428B 00 00       _tok: .fill 2, 0
8532   428D 00 00       _toktype: .fill 2, 0
8533   428F 00          _prog: .fill 1, 0
8534   4290 00 00 00 00 _token_data: .fill 256, 0
8534   4294 00 00 00 00 
8534   4298 00 00 00 00 
8534   429C 00 00 00 00 
8534   42A0 00 00 00 00 
8534   42A4 00 00 00 00 
8534   42A8 00 00 00 00 
8534   42AC 00 00 00 00 
8534   42B0 00 00 00 00 
8534   42B4 00 00 00 00 
8534   42B8 00 00 00 00 
8534   42BC 00 00 00 00 
8534   42C0 00 00 00 00 
8534   42C4 00 00 00 00 
8534   42C8 00 00 00 00 
8534   42CC 00 00 00 00 
8534   42D0 00 00 00 00 
8534   42D4 00 00 00 00 
8534   42D8 00 00 00 00 
8534   42DC 00 00 00 00 
8534   42E0 00 00 00 00 
8534   42E4 00 00 00 00 
8534   42E8 00 00 00 00 
8534   42EC 00 00 00 00 
8534   42F0 00 00 00 00 
8534   42F4 00 00 00 00 
8534   42F8 00 00 00 00 
8534   42FC 00 00 00 00 
8534   4300 00 00 00 00 
8534   4304 00 00 00 00 
8534   4308 00 00 00 00 
8534   430C 00 00 00 00 
8534   4310 00 00 00 00 
8534   4314 00 00 00 00 
8534   4318 00 00 00 00 
8534   431C 00 00 00 00 
8534   4320 00 00 00 00 
8534   4324 00 00 00 00 
8534   4328 00 00 00 00 
8534   432C 00 00 00 00 
8534   4330 00 00 00 00 
8534   4334 00 00 00 00 
8534   4338 00 00 00 00 
8534   433C 00 00 00 00 
8534   4340 00 00 00 00 
8534   4344 00 00 00 00 
8534   4348 00 00 00 00 
8534   434C 00 00 00 00 
8534   4350 00 00 00 00 
8534   4354 00 00 00 00 
8534   4358 00 00 00 00 
8534   435C 00 00 00 00 
8534   4360 00 00 00 00 
8534   4364 00 00 00 00 
8534   4368 00 00 00 00 
8534   436C 00 00 00 00 
8534   4370 00 00 00 00 
8534   4374 00 00 00 00 
8534   4378 00 00 00 00 
8534   437C 00 00 00 00 
8534   4380 00 00 00 00 
8534   4384 00 00 00 00 
8534   4388 00 00 00 00 
8534   438C 00 00 00 00 
8535   4390 00 00 00 00 _string_const_data: .fill 256, 0
8535   4394 00 00 00 00 
8535   4398 00 00 00 00 
8535   439C 00 00 00 00 
8535   43A0 00 00 00 00 
8535   43A4 00 00 00 00 
8535   43A8 00 00 00 00 
8535   43AC 00 00 00 00 
8535   43B0 00 00 00 00 
8535   43B4 00 00 00 00 
8535   43B8 00 00 00 00 
8535   43BC 00 00 00 00 
8535   43C0 00 00 00 00 
8535   43C4 00 00 00 00 
8535   43C8 00 00 00 00 
8535   43CC 00 00 00 00 
8535   43D0 00 00 00 00 
8535   43D4 00 00 00 00 
8535   43D8 00 00 00 00 
8535   43DC 00 00 00 00 
8535   43E0 00 00 00 00 
8535   43E4 00 00 00 00 
8535   43E8 00 00 00 00 
8535   43EC 00 00 00 00 
8535   43F0 00 00 00 00 
8535   43F4 00 00 00 00 
8535   43F8 00 00 00 00 
8535   43FC 00 00 00 00 
8535   4400 00 00 00 00 
8535   4404 00 00 00 00 
8535   4408 00 00 00 00 
8535   440C 00 00 00 00 
8535   4410 00 00 00 00 
8535   4414 00 00 00 00 
8535   4418 00 00 00 00 
8535   441C 00 00 00 00 
8535   4420 00 00 00 00 
8535   4424 00 00 00 00 
8535   4428 00 00 00 00 
8535   442C 00 00 00 00 
8535   4430 00 00 00 00 
8535   4434 00 00 00 00 
8535   4438 00 00 00 00 
8535   443C 00 00 00 00 
8535   4440 00 00 00 00 
8535   4444 00 00 00 00 
8535   4448 00 00 00 00 
8535   444C 00 00 00 00 
8535   4450 00 00 00 00 
8535   4454 00 00 00 00 
8535   4458 00 00 00 00 
8535   445C 00 00 00 00 
8535   4460 00 00 00 00 
8535   4464 00 00 00 00 
8535   4468 00 00 00 00 
8535   446C 00 00 00 00 
8535   4470 00 00 00 00 
8535   4474 00 00 00 00 
8535   4478 00 00 00 00 
8535   447C 00 00 00 00 
8535   4480 00 00 00 00 
8535   4484 00 00 00 00 
8535   4488 00 00 00 00 
8535   448C 00 00 00 00 
8536   4490 00          _s0: .db "", 0
8537   4491 70 61 74 68 _s1: .db "path", 0
8537   4495 00 
8538   4496 68 6F 6D 65 _s2: .db "home", 0
8538   449A 00 
8539   449B 2F 65 74 63 _s3: .db "/etc/shell.cfg", 0
8539   449F 2F 73 68 65 
8539   44A3 6C 6C 2E 63 
8539   44A7 66 67 00 
8540   44AA 72 6F 6F 74 _s4: .db "root@Sol-1:", 0
8540   44AE 40 53 6F 6C 
8540   44B2 2D 31 3A 00 
8541   44B6 20 23 20 00 _s5: .db " # ", 0
8542   44BA 0A 0D 00    _s6: .db "\n\r", 0
8543   44BD 63 64 00    _s7: .db "cd", 0
8544   44C0 73 68 65 6C _s8: .db "shell", 0
8544   44C4 6C 00 
8545   44C6 31 32 33 00 _s9: .db "123", 0
8546   44CA 2F 00       _s10: .db "/", 0
8547   44CC 45 72 72 6F _s11: .db "Error: Variable does not exist.", 0
8547   44D0 72 3A 20 56 
8547   44D4 61 72 69 61 
8547   44D8 62 6C 65 20 
8547   44DC 64 6F 65 73 
8547   44E0 20 6E 6F 74 
8547   44E4 20 65 78 69 
8547   44E8 73 74 2E 00 
8548   44EC 25 64 00    _s12: .db "%d", 0
8549   44EF 55 6E 64 65 _s13: .db "Undeclared variable.", 0
8549   44F3 63 6C 61 72 
8549   44F7 65 64 20 76 
8549   44FB 61 72 69 61 
8549   44FF 62 6C 65 2E 
8549   4503 00 
8550   4504 3B 00       _s14: .db ";", 0
8551   4506 44 6F 75 62 _s15: .db "Double quotes expected", 0
8551   450A 6C 65 20 71 
8551   450E 75 6F 74 65 
8551   4512 73 20 65 78 
8551   4516 70 65 63 74 
8551   451A 65 64 00 
8552   451D 0A 45 72 72 _s16: .db "\nError: ", 0
8552   4521 6F 72 3A 20 
8552   4525 00 
8553   4526 0A 00       _s17: .db "\n", 0
8554   4528 55 6E 65 78 _s18: .db "Unexpected format in printf.", 0
8554   452C 70 65 63 74 
8554   4530 65 64 20 66 
8554   4534 6F 72 6D 61 
8554   4538 74 20 69 6E 
8554   453C 20 70 72 69 
8554   4540 6E 74 66 2E 
8554   4544 00 
8555   4545 45 72 72 6F _s19: .db "Error: Unknown argument type.\n", 0
8555   4549 72 3A 20 55 
8555   454D 6E 6B 6E 6F 
8555   4551 77 6E 20 61 
8555   4555 72 67 75 6D 
8555   4559 65 6E 74 20 
8555   455D 74 79 70 65 
8555   4561 2E 0A 00 
8556   4564             
8557   4564 66 45       _heap_top: .dw _heap
8558   4566 00          _heap: .db 0
8559   4567             ; --- END DATA SEGMENT
8560   4567             
8561   4567             .end
tasm: Number of errors = 2
