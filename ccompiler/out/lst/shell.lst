0001   0000             ; --- FILENAME: ../solarium/usr/bin/shell.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             sys_break        .EQU  $0000
0002+  0000             sys_rtc          .EQU  $0001
0003+  0000             sys_ide          .EQU  $0002
0004+  0000             sys_io           .EQU  $0003
0005+  0000             sys_filesystem   .EQU  $0004
0006+  0000             sys_create_proc  .EQU  $0005
0007+  0000             sys_list_proc    .EQU  $0006
0008+  0000             sys_datetime     .EQU  $0007
0009+  0000             sys_reboot       .EQU  $0008
0010+  0000             sys_pause_proc   .EQU  $0009
0011+  0000             sys_resume_proc  .EQU  $000a
0012+  0000             sys_terminate_proc .EQU  $000b
0013+  0000             sys_system       .EQU  $000c
0014+  0000             sys_fdc          .EQU  $000d
0015+  0000             text_org         .EQU  $0400
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0000             
0005   0000             ; --- BEGIN TEXT SEGMENT
0006   0400             .org text_org
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; char *p; 
0011   0408 52 02 00      sub sp, 2
0012   040B             ; char *t; 
0013   040B 52 02 00      sub sp, 2
0014   040E             ; char *temp_prog; 
0015   040E 52 02 00      sub sp, 2
0016   0411             ; char varname[ID_LEN]; 
0017   0411 52 01 00      sub sp, 1
0018   0414             ; char is_assignment; 
0019   0414 52 01 00      sub sp, 1
0020   0417             ; char variable_str[128]; 
0021   0417 52 80 00      sub sp, 128
0022   041A             ; int variable_int; 
0023   041A 52 02 00      sub sp, 2
0024   041D             ; int var_index; 
0025   041D 52 02 00      sub sp, 2
0026   0420             ; int i; 
0027   0420 52 02 00      sub sp, 2
0028   0423             ; new_str_var("path", "", 64); 
0029   0423             ; --- START FUNCTION CALL
0030   0423 FD 2E 40 00   mov32 cb, $00000040
0030   0427 00 00 
0031   0429 FD AB         swp b
0032   042B D8            push b
0033   042C 26 DF 40      mov b, _s0 ; ""
0034   042F FD AB         swp b
0035   0431 D8            push b
0036   0432 26 E0 40      mov b, _s1 ; "path"
0037   0435 FD AB         swp b
0038   0437 D8            push b
0039   0438 07 0E 0B      call new_str_var
0040   043B 51 06 00      add sp, 6
0041   043E             ; --- END FUNCTION CALL
0042   043E             ; new_str_var("home", "", 64); 
0043   043E             ; --- START FUNCTION CALL
0044   043E FD 2E 40 00   mov32 cb, $00000040
0044   0442 00 00 
0045   0444 FD AB         swp b
0046   0446 D8            push b
0047   0447 26 DF 40      mov b, _s0 ; ""
0048   044A FD AB         swp b
0049   044C D8            push b
0050   044D 26 E5 40      mov b, _s2 ; "home"
0051   0450 FD AB         swp b
0052   0452 D8            push b
0053   0453 07 0E 0B      call new_str_var
0054   0456 51 06 00      add sp, 6
0055   0459             ; --- END FUNCTION CALL
0056   0459             ; read_config("/etc/shell.cfg", "path", variables[0].as_string); 
0057   0459             ; --- START FUNCTION CALL
0058   0459 3B 05 3E      mov d, _variables_data ; $variables
0059   045C D7            push a
0060   045D DA            push d
0061   045E FD 2E 00 00   mov32 cb, $00000000
0061   0462 00 00 
0062   0464 E7            pop d
0063   0465 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0064   0469 E4            pop a
0065   046A 58 11 00      add d, 17
0066   046D 2A            mov b, [d]
0067   046E 38 00 00      mov c, 0
0068   0471 FD AB         swp b
0069   0473 D8            push b
0070   0474 26 E0 40      mov b, _s1 ; "path"
0071   0477 FD AB         swp b
0072   0479 D8            push b
0073   047A 26 EA 40      mov b, _s3 ; "/etc/shell.cfg"
0074   047D FD AB         swp b
0075   047F D8            push b
0076   0480 07 C0 11      call read_config
0077   0483 51 06 00      add sp, 6
0078   0486             ; --- END FUNCTION CALL
0079   0486             ; read_config("/etc/shell.cfg", "home", variables[1].as_string); 
0080   0486             ; --- START FUNCTION CALL
0081   0486 3B 05 3E      mov d, _variables_data ; $variables
0082   0489 D7            push a
0083   048A DA            push d
0084   048B FD 2E 01 00   mov32 cb, $00000001
0084   048F 00 00 
0085   0491 E7            pop d
0086   0492 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0087   0496 E4            pop a
0088   0497 58 11 00      add d, 17
0089   049A 2A            mov b, [d]
0090   049B 38 00 00      mov c, 0
0091   049E FD AB         swp b
0092   04A0 D8            push b
0093   04A1 26 E5 40      mov b, _s2 ; "home"
0094   04A4 FD AB         swp b
0095   04A6 D8            push b
0096   04A7 26 EA 40      mov b, _s3 ; "/etc/shell.cfg"
0097   04AA FD AB         swp b
0098   04AC D8            push b
0099   04AD 07 C0 11      call read_config
0100   04B0 51 06 00      add sp, 6
0101   04B3             ; --- END FUNCTION CALL
0102   04B3             ; for(;;){ 
0103   04B3             _for1_init:
0104   04B3             _for1_cond:
0105   04B3             _for1_block:
0106   04B3             ; printf("root@Sol-1:");  
0107   04B3             ; --- START FUNCTION CALL
0108   04B3 26 F9 40      mov b, _s4 ; "root@Sol-1:"
0109   04B6 FD AB         swp b
0110   04B8 D8            push b
0111   04B9 07 D0 25      call printf
0112   04BC 51 02 00      add sp, 2
0113   04BF             ; --- END FUNCTION CALL
0114   04BF             ; print_cwd();  
0115   04BF             ; --- START FUNCTION CALL
0116   04BF 07 9D 11      call print_cwd
0117   04C2             ; printf(" # "); 
0118   04C2             ; --- START FUNCTION CALL
0119   04C2 26 05 41      mov b, _s5 ; " # "
0120   04C5 FD AB         swp b
0121   04C7 D8            push b
0122   04C8 07 D0 25      call printf
0123   04CB 51 02 00      add sp, 2
0124   04CE             ; --- END FUNCTION CALL
0125   04CE             ; gets(command); 
0126   04CE             ; --- START FUNCTION CALL
0127   04CE 3B 85 38      mov d, _command_data ; $command
0128   04D1 2D            mov b, d
0129   04D2 38 00 00      mov c, 0
0130   04D5 FD AB         swp b
0131   04D7 D8            push b
0132   04D8 07 78 33      call gets
0133   04DB 51 02 00      add sp, 2
0134   04DE             ; --- END FUNCTION CALL
0135   04DE             ; printf("\n\r"); 
0136   04DE             ; --- START FUNCTION CALL
0137   04DE 26 09 41      mov b, _s6 ; "\n\r"
0138   04E1 FD AB         swp b
0139   04E3 D8            push b
0140   04E4 07 D0 25      call printf
0141   04E7 51 02 00      add sp, 2
0142   04EA             ; --- END FUNCTION CALL
0143   04EA             ; if(command[0]) strcpy(last_cmd, command); 
0144   04EA             _if2_cond:
0145   04EA 3B 85 38      mov d, _command_data ; $command
0146   04ED D7            push a
0147   04EE DA            push d
0148   04EF FD 2E 00 00   mov32 cb, $00000000
0148   04F3 00 00 
0149   04F5 E7            pop d
0150   04F6 5A            add d, b
0151   04F7 E4            pop a
0152   04F8 32            mov bl, [d]
0153   04F9 A7 00         mov bh, 0
0154   04FB 38 00 00      mov c, 0
0155   04FE C0 00 00      cmp b, 0
0156   0501 C6 21 05      je _if2_exit
0157   0504             _if2_TRUE:
0158   0504             ; strcpy(last_cmd, command); 
0159   0504             ; --- START FUNCTION CALL
0160   0504 3B 85 38      mov d, _command_data ; $command
0161   0507 2D            mov b, d
0162   0508 38 00 00      mov c, 0
0163   050B FD AB         swp b
0164   050D D8            push b
0165   050E 3B 85 3D      mov d, _last_cmd_data ; $last_cmd
0166   0511 2D            mov b, d
0167   0512 38 00 00      mov c, 0
0168   0515 FD AB         swp b
0169   0517 D8            push b
0170   0518 07 E0 12      call strcpy
0171   051B 51 04 00      add sp, 4
0172   051E             ; --- END FUNCTION CALL
0173   051E 0A 21 05      jmp _if2_exit
0174   0521             _if2_exit:
0175   0521             ; prog = command; 
0176   0521 3B DD 3E      mov d, _prog ; $prog
0177   0524 DA            push d
0178   0525 3B 85 38      mov d, _command_data ; $command
0179   0528 2D            mov b, d
0180   0529 38 00 00      mov c, 0
0181   052C E7            pop d
0182   052D FD 43         mov [d], b
0183   052F             ; for(;;){ 
0184   052F             _for3_init:
0185   052F             _for3_cond:
0186   052F             _for3_block:
0187   052F             ; temp_prog = prog; 
0188   052F FA FB FF      lea d, [bp + -5] ; $temp_prog
0189   0532 DA            push d
0190   0533 3B DD 3E      mov d, _prog ; $prog
0191   0536 2A            mov b, [d]
0192   0537 38 00 00      mov c, 0
0193   053A E7            pop d
0194   053B FD 43         mov [d], b
0195   053D             ; get(); 
0196   053D             ; --- START FUNCTION CALL
0197   053D 07 6D 13      call get
0198   0540             ; if(tok == SEMICOLON) get(); 
0199   0540             _if4_cond:
0200   0540 3B D9 3E      mov d, _tok ; $tok
0201   0543 2A            mov b, [d]
0202   0544 38 00 00      mov c, 0
0203   0547             ; --- START RELATIONAL
0204   0547 D7            push a
0205   0548 11            mov a, b
0206   0549 FD 2E 23 00   mov32 cb, $23 ; enum element: SEMICOLON
0206   054D 00 00 
0207   054F B0            cmp a, b
0208   0550 FD 71         seq ; ==
0209   0552 E4            pop a
0210   0553             ; --- END RELATIONAL
0211   0553 C0 00 00      cmp b, 0
0212   0556 C6 5F 05      je _if4_exit
0213   0559             _if4_TRUE:
0214   0559             ; get(); 
0215   0559             ; --- START FUNCTION CALL
0216   0559 07 6D 13      call get
0217   055C 0A 5F 05      jmp _if4_exit
0218   055F             _if4_exit:
0219   055F             ; if(toktype == END) break; // check for empty input 
0220   055F             _if5_cond:
0221   055F 3B DB 3E      mov d, _toktype ; $toktype
0222   0562 2A            mov b, [d]
0223   0563 38 00 00      mov c, 0
0224   0566             ; --- START RELATIONAL
0225   0566 D7            push a
0226   0567 11            mov a, b
0227   0568 FD 2E 06 00   mov32 cb, $6 ; enum element: END
0227   056C 00 00 
0228   056E B0            cmp a, b
0229   056F FD 71         seq ; ==
0230   0571 E4            pop a
0231   0572             ; --- END RELATIONAL
0232   0572 C0 00 00      cmp b, 0
0233   0575 C6 7E 05      je _if5_exit
0234   0578             _if5_TRUE:
0235   0578             ; break; // check for empty input 
0236   0578 0A BD 0A      jmp _for3_exit ; for break
0237   057B 0A 7E 05      jmp _if5_exit
0238   057E             _if5_exit:
0239   057E             ; is_assignment = 0; 
0240   057E FA F9 FF      lea d, [bp + -7] ; $is_assignment
0241   0581 DA            push d
0242   0582 FD 2E 00 00   mov32 cb, $00000000
0242   0586 00 00 
0243   0588 E7            pop d
0244   0589 FD 3E         mov [d], bl
0245   058B             ; if(toktype == IDENTIFIER){ 
0246   058B             _if6_cond:
0247   058B 3B DB 3E      mov d, _toktype ; $toktype
0248   058E 2A            mov b, [d]
0249   058F 38 00 00      mov c, 0
0250   0592             ; --- START RELATIONAL
0251   0592 D7            push a
0252   0593 11            mov a, b
0253   0594 FD 2E 05 00   mov32 cb, $5 ; enum element: IDENTIFIER
0253   0598 00 00 
0254   059A B0            cmp a, b
0255   059B FD 71         seq ; ==
0256   059D E4            pop a
0257   059E             ; --- END RELATIONAL
0258   059E C0 00 00      cmp b, 0
0259   05A1 C6 E0 05      je _if6_exit
0260   05A4             _if6_TRUE:
0261   05A4             ; strcpy(varname, token); 
0262   05A4             ; --- START FUNCTION CALL
0263   05A4 3B DF 3E      mov d, _token_data ; $token
0264   05A7 2D            mov b, d
0265   05A8 38 00 00      mov c, 0
0266   05AB FD AB         swp b
0267   05AD D8            push b
0268   05AE FA FA FF      lea d, [bp + -6] ; $varname
0269   05B1 32            mov bl, [d]
0270   05B2 A7 00         mov bh, 0
0271   05B4 38 00 00      mov c, 0
0272   05B7 FD AB         swp b
0273   05B9 D8            push b
0274   05BA 07 E0 12      call strcpy
0275   05BD 51 04 00      add sp, 4
0276   05C0             ; --- END FUNCTION CALL
0277   05C0             ; get(); 
0278   05C0             ; --- START FUNCTION CALL
0279   05C0 07 6D 13      call get
0280   05C3             ; is_assignment = tok == ASSIGNMENT; 
0281   05C3 FA F9 FF      lea d, [bp + -7] ; $is_assignment
0282   05C6 DA            push d
0283   05C7 3B D9 3E      mov d, _tok ; $tok
0284   05CA 2A            mov b, [d]
0285   05CB 38 00 00      mov c, 0
0286   05CE             ; --- START RELATIONAL
0287   05CE D7            push a
0288   05CF 11            mov a, b
0289   05D0 FD 2E 11 00   mov32 cb, $11 ; enum element: ASSIGNMENT
0289   05D4 00 00 
0290   05D6 B0            cmp a, b
0291   05D7 FD 71         seq ; ==
0292   05D9 E4            pop a
0293   05DA             ; --- END RELATIONAL
0294   05DA E7            pop d
0295   05DB FD 3E         mov [d], bl
0296   05DD 0A E0 05      jmp _if6_exit
0297   05E0             _if6_exit:
0298   05E0             ; if(is_assignment){ 
0299   05E0             _if7_cond:
0300   05E0 FA F9 FF      lea d, [bp + -7] ; $is_assignment
0301   05E3 32            mov bl, [d]
0302   05E4 A7 00         mov bh, 0
0303   05E6 38 00 00      mov c, 0
0304   05E9 C0 00 00      cmp b, 0
0305   05EC C6 CC 06      je _if7_else
0306   05EF             _if7_TRUE:
0307   05EF             ; get(); 
0308   05EF             ; --- START FUNCTION CALL
0309   05EF 07 6D 13      call get
0310   05F2             ; if(toktype == INTEGER_CONST) set_int_var(varname, atoi(token)); 
0311   05F2             _if8_cond:
0312   05F2 3B DB 3E      mov d, _toktype ; $toktype
0313   05F5 2A            mov b, [d]
0314   05F6 38 00 00      mov c, 0
0315   05F9             ; --- START RELATIONAL
0316   05F9 D7            push a
0317   05FA 11            mov a, b
0318   05FB FD 2E 04 00   mov32 cb, $4 ; enum element: INTEGER_CONST
0318   05FF 00 00 
0319   0601 B0            cmp a, b
0320   0602 FD 71         seq ; ==
0321   0604 E4            pop a
0322   0605             ; --- END RELATIONAL
0323   0605 C0 00 00      cmp b, 0
0324   0608 C6 33 06      je _if8_else
0325   060B             _if8_TRUE:
0326   060B             ; set_int_var(varname, atoi(token)); 
0327   060B             ; --- START FUNCTION CALL
0328   060B             ; --- START FUNCTION CALL
0329   060B 3B DF 3E      mov d, _token_data ; $token
0330   060E 2D            mov b, d
0331   060F 38 00 00      mov c, 0
0332   0612 FD AB         swp b
0333   0614 D8            push b
0334   0615 07 36 34      call atoi
0335   0618 51 02 00      add sp, 2
0336   061B             ; --- END FUNCTION CALL
0337   061B FD AB         swp b
0338   061D D8            push b
0339   061E FA FA FF      lea d, [bp + -6] ; $varname
0340   0621 32            mov bl, [d]
0341   0622 A7 00         mov bh, 0
0342   0624 38 00 00      mov c, 0
0343   0627 FD AB         swp b
0344   0629 D8            push b
0345   062A 07 8C 0C      call set_int_var
0346   062D 51 04 00      add sp, 4
0347   0630             ; --- END FUNCTION CALL
0348   0630 0A C9 06      jmp _if8_exit
0349   0633             _if8_else:
0350   0633             ; if(toktype == STRING_CONST) new_str_var(varname, string_const, strlen(string_const)); 
0351   0633             _if9_cond:
0352   0633 3B DB 3E      mov d, _toktype ; $toktype
0353   0636 2A            mov b, [d]
0354   0637 38 00 00      mov c, 0
0355   063A             ; --- START RELATIONAL
0356   063A D7            push a
0357   063B 11            mov a, b
0358   063C FD 2E 03 00   mov32 cb, $3 ; enum element: STRING_CONST
0358   0640 00 00 
0359   0642 B0            cmp a, b
0360   0643 FD 71         seq ; ==
0361   0645 E4            pop a
0362   0646             ; --- END RELATIONAL
0363   0646 C0 00 00      cmp b, 0
0364   0649 C6 7E 06      je _if9_else
0365   064C             _if9_TRUE:
0366   064C             ; new_str_var(varname, string_const, strlen(string_const)); 
0367   064C             ; --- START FUNCTION CALL
0368   064C             ; --- START FUNCTION CALL
0369   064C 3B DF 3F      mov d, _string_const_data ; $string_const
0370   064F 2D            mov b, d
0371   0650 38 00 00      mov c, 0
0372   0653 FD AB         swp b
0373   0655 D8            push b
0374   0656 07 FE 32      call strlen
0375   0659 51 02 00      add sp, 2
0376   065C             ; --- END FUNCTION CALL
0377   065C FD AB         swp b
0378   065E D8            push b
0379   065F 3B DF 3F      mov d, _string_const_data ; $string_const
0380   0662 2D            mov b, d
0381   0663 38 00 00      mov c, 0
0382   0666 FD AB         swp b
0383   0668 D8            push b
0384   0669 FA FA FF      lea d, [bp + -6] ; $varname
0385   066C 32            mov bl, [d]
0386   066D A7 00         mov bh, 0
0387   066F 38 00 00      mov c, 0
0388   0672 FD AB         swp b
0389   0674 D8            push b
0390   0675 07 0E 0B      call new_str_var
0391   0678 51 06 00      add sp, 6
0392   067B             ; --- END FUNCTION CALL
0393   067B 0A C9 06      jmp _if9_exit
0394   067E             _if9_else:
0395   067E             ; if(toktype == IDENTIFIER) new_str_var(varname, token, strlen(token)); 
0396   067E             _if10_cond:
0397   067E 3B DB 3E      mov d, _toktype ; $toktype
0398   0681 2A            mov b, [d]
0399   0682 38 00 00      mov c, 0
0400   0685             ; --- START RELATIONAL
0401   0685 D7            push a
0402   0686 11            mov a, b
0403   0687 FD 2E 05 00   mov32 cb, $5 ; enum element: IDENTIFIER
0403   068B 00 00 
0404   068D B0            cmp a, b
0405   068E FD 71         seq ; ==
0406   0690 E4            pop a
0407   0691             ; --- END RELATIONAL
0408   0691 C0 00 00      cmp b, 0
0409   0694 C6 C9 06      je _if10_exit
0410   0697             _if10_TRUE:
0411   0697             ; new_str_var(varname, token, strlen(token)); 
0412   0697             ; --- START FUNCTION CALL
0413   0697             ; --- START FUNCTION CALL
0414   0697 3B DF 3E      mov d, _token_data ; $token
0415   069A 2D            mov b, d
0416   069B 38 00 00      mov c, 0
0417   069E FD AB         swp b
0418   06A0 D8            push b
0419   06A1 07 FE 32      call strlen
0420   06A4 51 02 00      add sp, 2
0421   06A7             ; --- END FUNCTION CALL
0422   06A7 FD AB         swp b
0423   06A9 D8            push b
0424   06AA 3B DF 3E      mov d, _token_data ; $token
0425   06AD 2D            mov b, d
0426   06AE 38 00 00      mov c, 0
0427   06B1 FD AB         swp b
0428   06B3 D8            push b
0429   06B4 FA FA FF      lea d, [bp + -6] ; $varname
0430   06B7 32            mov bl, [d]
0431   06B8 A7 00         mov bh, 0
0432   06BA 38 00 00      mov c, 0
0433   06BD FD AB         swp b
0434   06BF D8            push b
0435   06C0 07 0E 0B      call new_str_var
0436   06C3 51 06 00      add sp, 6
0437   06C6             ; --- END FUNCTION CALL
0438   06C6 0A C9 06      jmp _if10_exit
0439   06C9             _if10_exit:
0440   06C9             _if9_exit:
0441   06C9             _if8_exit:
0442   06C9 0A BA 0A      jmp _if7_exit
0443   06CC             _if7_else:
0444   06CC             ; prog = temp_prog; 
0445   06CC 3B DD 3E      mov d, _prog ; $prog
0446   06CF DA            push d
0447   06D0 FA FB FF      lea d, [bp + -5] ; $temp_prog
0448   06D3 2A            mov b, [d]
0449   06D4 38 00 00      mov c, 0
0450   06D7 E7            pop d
0451   06D8 FD 43         mov [d], b
0452   06DA             ; get(); 
0453   06DA             ; --- START FUNCTION CALL
0454   06DA 07 6D 13      call get
0455   06DD             ; if(!strcmp(token, "cd")) command_cd(); 
0456   06DD             _if11_cond:
0457   06DD             ; --- START FUNCTION CALL
0458   06DD 26 0C 41      mov b, _s7 ; "cd"
0459   06E0 FD AB         swp b
0460   06E2 D8            push b
0461   06E3 3B DF 3E      mov d, _token_data ; $token
0462   06E6 2D            mov b, d
0463   06E7 38 00 00      mov c, 0
0464   06EA FD AB         swp b
0465   06EC D8            push b
0466   06ED 07 97 31      call strcmp
0467   06F0 51 04 00      add sp, 4
0468   06F3             ; --- END FUNCTION CALL
0469   06F3 C0 00 00      cmp b, 0
0470   06F6 C6 FF 06      je _if11_else
0471   06F9             _if11_TRUE:
0472   06F9             ; command_cd(); 
0473   06F9             ; --- START FUNCTION CALL
0474   06F9 07 67 10      call command_cd
0475   06FC 0A BA 0A      jmp _if11_exit
0476   06FF             _if11_else:
0477   06FF             ; if(!strcmp(token, "shell")) command_shell(); 
0478   06FF             _if12_cond:
0479   06FF             ; --- START FUNCTION CALL
0480   06FF 26 0F 41      mov b, _s8 ; "shell"
0481   0702 FD AB         swp b
0482   0704 D8            push b
0483   0705 3B DF 3E      mov d, _token_data ; $token
0484   0708 2D            mov b, d
0485   0709 38 00 00      mov c, 0
0486   070C FD AB         swp b
0487   070E D8            push b
0488   070F 07 97 31      call strcmp
0489   0712 51 04 00      add sp, 4
0490   0715             ; --- END FUNCTION CALL
0491   0715 C0 00 00      cmp b, 0
0492   0718 C6 21 07      je _if12_else
0493   071B             _if12_TRUE:
0494   071B             ; command_shell(); 
0495   071B             ; --- START FUNCTION CALL
0496   071B 07 B6 11      call command_shell
0497   071E 0A BA 0A      jmp _if12_exit
0498   0721             _if12_else:
0499   0721             ; back(); 
0500   0721             ; --- START FUNCTION CALL
0501   0721 07 25 36      call back
0502   0724             ; get_path(); 
0503   0724             ; --- START FUNCTION CALL
0504   0724 07 9D 36      call get_path
0505   0727             ; strcpy(path, token); // save file path 
0506   0727             ; --- START FUNCTION CALL
0507   0727 3B DF 3E      mov d, _token_data ; $token
0508   072A 2D            mov b, d
0509   072B 38 00 00      mov c, 0
0510   072E FD AB         swp b
0511   0730 D8            push b
0512   0731 3B 85 3A      mov d, _path_data ; $path
0513   0734 2D            mov b, d
0514   0735 38 00 00      mov c, 0
0515   0738 FD AB         swp b
0516   073A D8            push b
0517   073B 07 E0 12      call strcpy
0518   073E 51 04 00      add sp, 4
0519   0741             ; --- END FUNCTION CALL
0520   0741             ; for(i = 0; i < 256; i++) argument[i] = 0; 
0521   0741             _for13_init:
0522   0741 FA 73 FF      lea d, [bp + -141] ; $i
0523   0744 DA            push d
0524   0745 FD 2E 00 00   mov32 cb, $00000000
0524   0749 00 00 
0525   074B E7            pop d
0526   074C FD 43         mov [d], b
0527   074E             _for13_cond:
0528   074E FA 73 FF      lea d, [bp + -141] ; $i
0529   0751 2A            mov b, [d]
0530   0752 38 00 00      mov c, 0
0531   0755             ; --- START RELATIONAL
0532   0755 D7            push a
0533   0756 11            mov a, b
0534   0757 FD 2E 00 01   mov32 cb, $00000100
0534   075B 00 00 
0535   075D B0            cmp a, b
0536   075E FD 73         slt ; < (signed)
0537   0760 E4            pop a
0538   0761             ; --- END RELATIONAL
0539   0761 C0 00 00      cmp b, 0
0540   0764 C6 93 07      je _for13_exit
0541   0767             _for13_block:
0542   0767             ; argument[i] = 0; 
0543   0767 3B 85 3C      mov d, _argument_data ; $argument
0544   076A D7            push a
0545   076B DA            push d
0546   076C FA 73 FF      lea d, [bp + -141] ; $i
0547   076F 2A            mov b, [d]
0548   0770 38 00 00      mov c, 0
0549   0773 E7            pop d
0550   0774 5A            add d, b
0551   0775 E4            pop a
0552   0776 DA            push d
0553   0777 FD 2E 00 00   mov32 cb, $00000000
0553   077B 00 00 
0554   077D E7            pop d
0555   077E FD 3E         mov [d], bl
0556   0780             _for13_update:
0557   0780 FA 73 FF      lea d, [bp + -141] ; $i
0558   0783 2A            mov b, [d]
0559   0784 38 00 00      mov c, 0
0560   0787 11            mov a, b
0561   0788 FD 77         inc b
0562   078A FA 73 FF      lea d, [bp + -141] ; $i
0563   078D FD 43         mov [d], b
0564   078F 27            mov b, a
0565   0790 0A 4E 07      jmp _for13_cond
0566   0793             _for13_exit:
0567   0793             ; get(); 
0568   0793             ; --- START FUNCTION CALL
0569   0793 07 6D 13      call get
0570   0796             ; if(tok != SEMICOLON && toktype != END){ 
0571   0796             _if14_cond:
0572   0796 3B D9 3E      mov d, _tok ; $tok
0573   0799 2A            mov b, [d]
0574   079A 38 00 00      mov c, 0
0575   079D             ; --- START RELATIONAL
0576   079D D7            push a
0577   079E 11            mov a, b
0578   079F FD 2E 23 00   mov32 cb, $23 ; enum element: SEMICOLON
0578   07A3 00 00 
0579   07A5 B0            cmp a, b
0580   07A6 FD 72         sneq ; !=
0581   07A8 E4            pop a
0582   07A9             ; --- END RELATIONAL
0583   07A9             ; --- START LOGICAL AND
0584   07A9 D7            push a
0585   07AA 11            mov a, b
0586   07AB 3B DB 3E      mov d, _toktype ; $toktype
0587   07AE 2A            mov b, [d]
0588   07AF 38 00 00      mov c, 0
0589   07B2             ; --- START RELATIONAL
0590   07B2 D7            push a
0591   07B3 11            mov a, b
0592   07B4 FD 2E 06 00   mov32 cb, $6 ; enum element: END
0592   07B8 00 00 
0593   07BA B0            cmp a, b
0594   07BB FD 72         sneq ; !=
0595   07BD E4            pop a
0596   07BE             ; --- END RELATIONAL
0597   07BE FD A7         sand a, b
0598   07C0 E4            pop a
0599   07C1             ; --- END LOGICAL AND
0600   07C1 C0 00 00      cmp b, 0
0601   07C4 C6 69 09      je _if14_exit
0602   07C7             _if14_TRUE:
0603   07C7             ; back(); 
0604   07C7             ; --- START FUNCTION CALL
0605   07C7 07 25 36      call back
0606   07CA             ; p = argument; 
0607   07CA FA FF FF      lea d, [bp + -1] ; $p
0608   07CD DA            push d
0609   07CE 3B 85 3C      mov d, _argument_data ; $argument
0610   07D1 2D            mov b, d
0611   07D2 38 00 00      mov c, 0
0612   07D5 E7            pop d
0613   07D6 FD 43         mov [d], b
0614   07D8             ; do{ 
0615   07D8             _do15_block:
0616   07D8             ; if(*prog == '$'){ 
0617   07D8             _if16_cond:
0618   07D8 3B DD 3E      mov d, _prog ; $prog
0619   07DB 2A            mov b, [d]
0620   07DC 38 00 00      mov c, 0
0621   07DF 74            mov d, b
0622   07E0 32            mov bl, [d]
0623   07E1 A7 00         mov bh, 0
0624   07E3 38 00 00      mov c, 0
0625   07E6             ; --- START RELATIONAL
0626   07E6 D7            push a
0627   07E7 11            mov a, b
0628   07E8 FD 2E 24 00   mov32 cb, $00000024
0628   07EC 00 00 
0629   07EE B0            cmp a, b
0630   07EF FD 71         seq ; ==
0631   07F1 E4            pop a
0632   07F2             ; --- END RELATIONAL
0633   07F2 C0 00 00      cmp b, 0
0634   07F5 C6 EB 08      je _if16_else
0635   07F8             _if16_TRUE:
0636   07F8             ; prog++; 
0637   07F8 3B DD 3E      mov d, _prog ; $prog
0638   07FB 2A            mov b, [d]
0639   07FC 38 00 00      mov c, 0
0640   07FF FD 77         inc b
0641   0801 3B DD 3E      mov d, _prog ; $prog
0642   0804 FD 43         mov [d], b
0643   0806 FD 7D         dec b
0644   0808             ; get(); // get variable name 
0645   0808             ; --- START FUNCTION CALL
0646   0808 07 6D 13      call get
0647   080B             ; var_index = get_var_index(token); 
0648   080B FA 75 FF      lea d, [bp + -139] ; $var_index
0649   080E DA            push d
0650   080F             ; --- START FUNCTION CALL
0651   080F 3B DF 3E      mov d, _token_data ; $token
0652   0812 2D            mov b, d
0653   0813 38 00 00      mov c, 0
0654   0816 FD AB         swp b
0655   0818 D8            push b
0656   0819 07 B9 0D      call get_var_index
0657   081C 51 02 00      add sp, 2
0658   081F             ; --- END FUNCTION CALL
0659   081F E7            pop d
0660   0820 FD 43         mov [d], b
0661   0822             ; if(var_index != -1){ 
0662   0822             _if17_cond:
0663   0822 FA 75 FF      lea d, [bp + -139] ; $var_index
0664   0825 2A            mov b, [d]
0665   0826 38 00 00      mov c, 0
0666   0829             ; --- START RELATIONAL
0667   0829 D7            push a
0668   082A 11            mov a, b
0669   082B FD 2E FF FF   mov32 cb, $ffffffff
0669   082F FF FF 
0670   0831 B0            cmp a, b
0671   0832 FD 72         sneq ; !=
0672   0834 E4            pop a
0673   0835             ; --- END RELATIONAL
0674   0835 C0 00 00      cmp b, 0
0675   0838 C6 E8 08      je _if17_exit
0676   083B             _if17_TRUE:
0677   083B             ; if(get_var_type(token) == SHELL_VAR_TYP_INT) strcat(argument, "123"); 
0678   083B             _if18_cond:
0679   083B             ; --- START FUNCTION CALL
0680   083B 3B DF 3E      mov d, _token_data ; $token
0681   083E 2D            mov b, d
0682   083F 38 00 00      mov c, 0
0683   0842 FD AB         swp b
0684   0844 D8            push b
0685   0845 07 3F 0E      call get_var_type
0686   0848 51 02 00      add sp, 2
0687   084B             ; --- END FUNCTION CALL
0688   084B             ; --- START RELATIONAL
0689   084B D7            push a
0690   084C 11            mov a, b
0691   084D FD 2E 01 00   mov32 cb, $1 ; enum element: SHELL_VAR_TYP_INT
0691   0851 00 00 
0692   0853 B0            cmp a, b
0693   0854 FD 71         seq ; ==
0694   0856 E4            pop a
0695   0857             ; --- END RELATIONAL
0696   0857 C0 00 00      cmp b, 0
0697   085A C6 76 08      je _if18_else
0698   085D             _if18_TRUE:
0699   085D             ; strcat(argument, "123"); 
0700   085D             ; --- START FUNCTION CALL
0701   085D 26 15 41      mov b, _s9 ; "123"
0702   0860 FD AB         swp b
0703   0862 D8            push b
0704   0863 3B 85 3C      mov d, _argument_data ; $argument
0705   0866 2D            mov b, d
0706   0867 38 00 00      mov c, 0
0707   086A FD AB         swp b
0708   086C D8            push b
0709   086D 07 1B 32      call strcat
0710   0870 51 04 00      add sp, 4
0711   0873             ; --- END FUNCTION CALL
0712   0873 0A BE 08      jmp _if18_exit
0713   0876             _if18_else:
0714   0876             ; if(get_var_type(token) == SHELL_VAR_TYP_STR) strcat(argument, get_shell_var_strval(var_index)); 
0715   0876             _if19_cond:
0716   0876             ; --- START FUNCTION CALL
0717   0876 3B DF 3E      mov d, _token_data ; $token
0718   0879 2D            mov b, d
0719   087A 38 00 00      mov c, 0
0720   087D FD AB         swp b
0721   087F D8            push b
0722   0880 07 3F 0E      call get_var_type
0723   0883 51 02 00      add sp, 2
0724   0886             ; --- END FUNCTION CALL
0725   0886             ; --- START RELATIONAL
0726   0886 D7            push a
0727   0887 11            mov a, b
0728   0888 FD 2E 00 00   mov32 cb, $0 ; enum element: SHELL_VAR_TYP_STR
0728   088C 00 00 
0729   088E B0            cmp a, b
0730   088F FD 71         seq ; ==
0731   0891 E4            pop a
0732   0892             ; --- END RELATIONAL
0733   0892 C0 00 00      cmp b, 0
0734   0895 C6 BE 08      je _if19_exit
0735   0898             _if19_TRUE:
0736   0898             ; strcat(argument, get_shell_var_strval(var_index)); 
0737   0898             ; --- START FUNCTION CALL
0738   0898             ; --- START FUNCTION CALL
0739   0898 FA 75 FF      lea d, [bp + -139] ; $var_index
0740   089B 2A            mov b, [d]
0741   089C 38 00 00      mov c, 0
0742   089F FD AB         swp b
0743   08A1 D8            push b
0744   08A2 07 0F 10      call get_shell_var_strval
0745   08A5 51 02 00      add sp, 2
0746   08A8             ; --- END FUNCTION CALL
0747   08A8 FD AB         swp b
0748   08AA D8            push b
0749   08AB 3B 85 3C      mov d, _argument_data ; $argument
0750   08AE 2D            mov b, d
0751   08AF 38 00 00      mov c, 0
0752   08B2 FD AB         swp b
0753   08B4 D8            push b
0754   08B5 07 1B 32      call strcat
0755   08B8 51 04 00      add sp, 4
0756   08BB             ; --- END FUNCTION CALL
0757   08BB 0A BE 08      jmp _if19_exit
0758   08BE             _if19_exit:
0759   08BE             _if18_exit:
0760   08BE             ; while(*p) p++; 
0761   08BE             _while20_cond:
0762   08BE FA FF FF      lea d, [bp + -1] ; $p
0763   08C1 2A            mov b, [d]
0764   08C2 38 00 00      mov c, 0
0765   08C5 74            mov d, b
0766   08C6 32            mov bl, [d]
0767   08C7 A7 00         mov bh, 0
0768   08C9 38 00 00      mov c, 0
0769   08CC C0 00 00      cmp b, 0
0770   08CF C6 E5 08      je _while20_exit
0771   08D2             _while20_block:
0772   08D2             ; p++; 
0773   08D2 FA FF FF      lea d, [bp + -1] ; $p
0774   08D5 2A            mov b, [d]
0775   08D6 38 00 00      mov c, 0
0776   08D9 FD 77         inc b
0777   08DB FA FF FF      lea d, [bp + -1] ; $p
0778   08DE FD 43         mov [d], b
0779   08E0 FD 7D         dec b
0780   08E2 0A BE 08      jmp _while20_cond
0781   08E5             _while20_exit:
0782   08E5 0A E8 08      jmp _if17_exit
0783   08E8             _if17_exit:
0784   08E8 0A 16 09      jmp _if16_exit
0785   08EB             _if16_else:
0786   08EB             ; *p++ = *prog++; 
0787   08EB FA FF FF      lea d, [bp + -1] ; $p
0788   08EE 2A            mov b, [d]
0789   08EF 38 00 00      mov c, 0
0790   08F2 FD 77         inc b
0791   08F4 FA FF FF      lea d, [bp + -1] ; $p
0792   08F7 FD 43         mov [d], b
0793   08F9 FD 7D         dec b
0794   08FB D8            push b
0795   08FC 3B DD 3E      mov d, _prog ; $prog
0796   08FF 2A            mov b, [d]
0797   0900 38 00 00      mov c, 0
0798   0903 FD 77         inc b
0799   0905 3B DD 3E      mov d, _prog ; $prog
0800   0908 FD 43         mov [d], b
0801   090A FD 7D         dec b
0802   090C 74            mov d, b
0803   090D 32            mov bl, [d]
0804   090E A7 00         mov bh, 0
0805   0910 38 00 00      mov c, 0
0806   0913 E7            pop d
0807   0914 FD 3E         mov [d], bl
0808   0916             _if16_exit:
0809   0916             ; } while(*prog != '\0' && *prog != ';'); 
0810   0916             _do15_cond:
0811   0916 3B DD 3E      mov d, _prog ; $prog
0812   0919 2A            mov b, [d]
0813   091A 38 00 00      mov c, 0
0814   091D 74            mov d, b
0815   091E 32            mov bl, [d]
0816   091F A7 00         mov bh, 0
0817   0921 38 00 00      mov c, 0
0818   0924             ; --- START RELATIONAL
0819   0924 D7            push a
0820   0925 11            mov a, b
0821   0926 FD 2E 00 00   mov32 cb, $00000000
0821   092A 00 00 
0822   092C B0            cmp a, b
0823   092D FD 72         sneq ; !=
0824   092F E4            pop a
0825   0930             ; --- END RELATIONAL
0826   0930             ; --- START LOGICAL AND
0827   0930 D7            push a
0828   0931 11            mov a, b
0829   0932 3B DD 3E      mov d, _prog ; $prog
0830   0935 2A            mov b, [d]
0831   0936 38 00 00      mov c, 0
0832   0939 74            mov d, b
0833   093A 32            mov bl, [d]
0834   093B A7 00         mov bh, 0
0835   093D 38 00 00      mov c, 0
0836   0940             ; --- START RELATIONAL
0837   0940 D7            push a
0838   0941 11            mov a, b
0839   0942 FD 2E 3B 00   mov32 cb, $0000003b
0839   0946 00 00 
0840   0948 B0            cmp a, b
0841   0949 FD 72         sneq ; !=
0842   094B E4            pop a
0843   094C             ; --- END RELATIONAL
0844   094C FD A7         sand a, b
0845   094E E4            pop a
0846   094F             ; --- END LOGICAL AND
0847   094F C0 01 00      cmp b, 1
0848   0952 C6 D8 07      je _do15_block
0849   0955             _do15_exit:
0850   0955             ; *p = '\0'; 
0851   0955 FA FF FF      lea d, [bp + -1] ; $p
0852   0958 2A            mov b, [d]
0853   0959 38 00 00      mov c, 0
0854   095C D8            push b
0855   095D FD 2E 00 00   mov32 cb, $00000000
0855   0961 00 00 
0856   0963 E7            pop d
0857   0964 FD 3E         mov [d], bl
0858   0966 0A 69 09      jmp _if14_exit
0859   0969             _if14_exit:
0860   0969             ; if(*path == '/' || *path == '.') spawn_new_proc(path, argument); 
0861   0969             _if21_cond:
0862   0969 3B 85 3A      mov d, _path_data ; $path
0863   096C 2D            mov b, d
0864   096D 38 00 00      mov c, 0
0865   0970 74            mov d, b
0866   0971 32            mov bl, [d]
0867   0972 A7 00         mov bh, 0
0868   0974 38 00 00      mov c, 0
0869   0977             ; --- START RELATIONAL
0870   0977 D7            push a
0871   0978 11            mov a, b
0872   0979 FD 2E 2F 00   mov32 cb, $0000002f
0872   097D 00 00 
0873   097F B0            cmp a, b
0874   0980 FD 71         seq ; ==
0875   0982 E4            pop a
0876   0983             ; --- END RELATIONAL
0877   0983             ; --- START LOGICAL OR
0878   0983 D7            push a
0879   0984 11            mov a, b
0880   0985 3B 85 3A      mov d, _path_data ; $path
0881   0988 2D            mov b, d
0882   0989 38 00 00      mov c, 0
0883   098C 74            mov d, b
0884   098D 32            mov bl, [d]
0885   098E A7 00         mov bh, 0
0886   0990 38 00 00      mov c, 0
0887   0993             ; --- START RELATIONAL
0888   0993 D7            push a
0889   0994 11            mov a, b
0890   0995 FD 2E 2E 00   mov32 cb, $0000002e
0890   0999 00 00 
0891   099B B0            cmp a, b
0892   099C FD 71         seq ; ==
0893   099E E4            pop a
0894   099F             ; --- END RELATIONAL
0895   099F FD A8         sor a, b ; ||
0896   09A1 E4            pop a
0897   09A2             ; --- END LOGICAL OR
0898   09A2 C0 00 00      cmp b, 0
0899   09A5 C6 C5 09      je _if21_else
0900   09A8             _if21_TRUE:
0901   09A8             ; spawn_new_proc(path, argument); 
0902   09A8             ; --- START FUNCTION CALL
0903   09A8 3B 85 3C      mov d, _argument_data ; $argument
0904   09AB 2D            mov b, d
0905   09AC 38 00 00      mov c, 0
0906   09AF FD AB         swp b
0907   09B1 D8            push b
0908   09B2 3B 85 3A      mov d, _path_data ; $path
0909   09B5 2D            mov b, d
0910   09B6 38 00 00      mov c, 0
0911   09B9 FD AB         swp b
0912   09BB D8            push b
0913   09BC 07 A6 11      call spawn_new_proc
0914   09BF 51 04 00      add sp, 4
0915   09C2             ; --- END FUNCTION CALL
0916   09C2 0A BA 0A      jmp _if21_exit
0917   09C5             _if21_else:
0918   09C5             ; temp_prog = prog; 
0919   09C5 FA FB FF      lea d, [bp + -5] ; $temp_prog
0920   09C8 DA            push d
0921   09C9 3B DD 3E      mov d, _prog ; $prog
0922   09CC 2A            mov b, [d]
0923   09CD 38 00 00      mov c, 0
0924   09D0 E7            pop d
0925   09D1 FD 43         mov [d], b
0926   09D3             ; prog = variables[0].as_string; 
0927   09D3 3B DD 3E      mov d, _prog ; $prog
0928   09D6 DA            push d
0929   09D7 3B 05 3E      mov d, _variables_data ; $variables
0930   09DA D7            push a
0931   09DB DA            push d
0932   09DC FD 2E 00 00   mov32 cb, $00000000
0932   09E0 00 00 
0933   09E2 E7            pop d
0934   09E3 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0935   09E7 E4            pop a
0936   09E8 58 11 00      add d, 17
0937   09EB 2A            mov b, [d]
0938   09EC 38 00 00      mov c, 0
0939   09EF E7            pop d
0940   09F0 FD 43         mov [d], b
0941   09F2             ; for(;;){ 
0942   09F2             _for22_init:
0943   09F2             _for22_cond:
0944   09F2             _for22_block:
0945   09F2             ; get(); 
0946   09F2             ; --- START FUNCTION CALL
0947   09F2 07 6D 13      call get
0948   09F5             ; if(toktype == END){ 
0949   09F5             _if23_cond:
0950   09F5 3B DB 3E      mov d, _toktype ; $toktype
0951   09F8 2A            mov b, [d]
0952   09F9 38 00 00      mov c, 0
0953   09FC             ; --- START RELATIONAL
0954   09FC D7            push a
0955   09FD 11            mov a, b
0956   09FE FD 2E 06 00   mov32 cb, $6 ; enum element: END
0956   0A02 00 00 
0957   0A04 B0            cmp a, b
0958   0A05 FD 71         seq ; ==
0959   0A07 E4            pop a
0960   0A08             ; --- END RELATIONAL
0961   0A08 C0 00 00      cmp b, 0
0962   0A0B C6 14 0A      je _if23_else
0963   0A0E             _if23_TRUE:
0964   0A0E             ; break; 
0965   0A0E 0A AC 0A      jmp _for22_exit ; for break
0966   0A11 0A 17 0A      jmp _if23_exit
0967   0A14             _if23_else:
0968   0A14             ; back(); 
0969   0A14             ; --- START FUNCTION CALL
0970   0A14 07 25 36      call back
0971   0A17             _if23_exit:
0972   0A17             ; get_path(); 
0973   0A17             ; --- START FUNCTION CALL
0974   0A17 07 9D 36      call get_path
0975   0A1A             ; strcpy(temp, token); 
0976   0A1A             ; --- START FUNCTION CALL
0977   0A1A 3B DF 3E      mov d, _token_data ; $token
0978   0A1D 2D            mov b, d
0979   0A1E 38 00 00      mov c, 0
0980   0A21 FD AB         swp b
0981   0A23 D8            push b
0982   0A24 3B 85 3B      mov d, _temp_data ; $temp
0983   0A27 2D            mov b, d
0984   0A28 38 00 00      mov c, 0
0985   0A2B FD AB         swp b
0986   0A2D D8            push b
0987   0A2E 07 E0 12      call strcpy
0988   0A31 51 04 00      add sp, 4
0989   0A34             ; --- END FUNCTION CALL
0990   0A34             ; strcat(temp, "/"); 
0991   0A34             ; --- START FUNCTION CALL
0992   0A34 26 19 41      mov b, _s10 ; "/"
0993   0A37 FD AB         swp b
0994   0A39 D8            push b
0995   0A3A 3B 85 3B      mov d, _temp_data ; $temp
0996   0A3D 2D            mov b, d
0997   0A3E 38 00 00      mov c, 0
0998   0A41 FD AB         swp b
0999   0A43 D8            push b
1000   0A44 07 1B 32      call strcat
1001   0A47 51 04 00      add sp, 4
1002   0A4A             ; --- END FUNCTION CALL
1003   0A4A             ; strcat(temp, path); // form full filepath with ENV_PATH + given filename 
1004   0A4A             ; --- START FUNCTION CALL
1005   0A4A 3B 85 3A      mov d, _path_data ; $path
1006   0A4D 2D            mov b, d
1007   0A4E 38 00 00      mov c, 0
1008   0A51 FD AB         swp b
1009   0A53 D8            push b
1010   0A54 3B 85 3B      mov d, _temp_data ; $temp
1011   0A57 2D            mov b, d
1012   0A58 38 00 00      mov c, 0
1013   0A5B FD AB         swp b
1014   0A5D D8            push b
1015   0A5E 07 1B 32      call strcat
1016   0A61 51 04 00      add sp, 4
1017   0A64             ; --- END FUNCTION CALL
1018   0A64             ; if(file_exists(temp) != 0){ 
1019   0A64             _if24_cond:
1020   0A64             ; --- START FUNCTION CALL
1021   0A64 3B 85 3B      mov d, _temp_data ; $temp
1022   0A67 2D            mov b, d
1023   0A68 38 00 00      mov c, 0
1024   0A6B FD AB         swp b
1025   0A6D D8            push b
1026   0A6E 07 4B 10      call file_exists
1027   0A71 51 02 00      add sp, 2
1028   0A74             ; --- END FUNCTION CALL
1029   0A74             ; --- START RELATIONAL
1030   0A74 D7            push a
1031   0A75 11            mov a, b
1032   0A76 FD 2E 00 00   mov32 cb, $00000000
1032   0A7A 00 00 
1033   0A7C B0            cmp a, b
1034   0A7D FD 72         sneq ; !=
1035   0A7F E4            pop a
1036   0A80             ; --- END RELATIONAL
1037   0A80 C0 00 00      cmp b, 0
1038   0A83 C6 A6 0A      je _if24_exit
1039   0A86             _if24_TRUE:
1040   0A86             ; spawn_new_proc(temp, argument); 
1041   0A86             ; --- START FUNCTION CALL
1042   0A86 3B 85 3C      mov d, _argument_data ; $argument
1043   0A89 2D            mov b, d
1044   0A8A 38 00 00      mov c, 0
1045   0A8D FD AB         swp b
1046   0A8F D8            push b
1047   0A90 3B 85 3B      mov d, _temp_data ; $temp
1048   0A93 2D            mov b, d
1049   0A94 38 00 00      mov c, 0
1050   0A97 FD AB         swp b
1051   0A99 D8            push b
1052   0A9A 07 A6 11      call spawn_new_proc
1053   0A9D 51 04 00      add sp, 4
1054   0AA0             ; --- END FUNCTION CALL
1055   0AA0             ; break; 
1056   0AA0 0A AC 0A      jmp _for22_exit ; for break
1057   0AA3 0A A6 0A      jmp _if24_exit
1058   0AA6             _if24_exit:
1059   0AA6             ; get(); // get separator 
1060   0AA6             ; --- START FUNCTION CALL
1061   0AA6 07 6D 13      call get
1062   0AA9             _for22_update:
1063   0AA9 0A F2 09      jmp _for22_cond
1064   0AAC             _for22_exit:
1065   0AAC             ; prog = temp_prog; 
1066   0AAC 3B DD 3E      mov d, _prog ; $prog
1067   0AAF DA            push d
1068   0AB0 FA FB FF      lea d, [bp + -5] ; $temp_prog
1069   0AB3 2A            mov b, [d]
1070   0AB4 38 00 00      mov c, 0
1071   0AB7 E7            pop d
1072   0AB8 FD 43         mov [d], b
1073   0ABA             _if21_exit:
1074   0ABA             _if12_exit:
1075   0ABA             _if11_exit:
1076   0ABA             _if7_exit:
1077   0ABA             _for3_update:
1078   0ABA 0A 2F 05      jmp _for3_cond
1079   0ABD             _for3_exit:
1080   0ABD             _for1_update:
1081   0ABD 0A B3 04      jmp _for1_cond
1082   0AC0             _for1_exit:
1083   0AC0 05 0B         syscall sys_terminate_proc
1084   0AC2             
1085   0AC2             last_cmd_insert:
1086   0AC2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1087   0AC5             ; if(last_cmd[0]){ 
1088   0AC5             _if25_cond:
1089   0AC5 3B 85 3D      mov d, _last_cmd_data ; $last_cmd
1090   0AC8 D7            push a
1091   0AC9 DA            push d
1092   0ACA FD 2E 00 00   mov32 cb, $00000000
1092   0ACE 00 00 
1093   0AD0 E7            pop d
1094   0AD1 5A            add d, b
1095   0AD2 E4            pop a
1096   0AD3 32            mov bl, [d]
1097   0AD4 A7 00         mov bh, 0
1098   0AD6 38 00 00      mov c, 0
1099   0AD9 C0 00 00      cmp b, 0
1100   0ADC C6 0C 0B      je _if25_exit
1101   0ADF             _if25_TRUE:
1102   0ADF             ; strcpy(command, last_cmd); 
1103   0ADF             ; --- START FUNCTION CALL
1104   0ADF 3B 85 3D      mov d, _last_cmd_data ; $last_cmd
1105   0AE2 2D            mov b, d
1106   0AE3 38 00 00      mov c, 0
1107   0AE6 FD AB         swp b
1108   0AE8 D8            push b
1109   0AE9 3B 85 38      mov d, _command_data ; $command
1110   0AEC 2D            mov b, d
1111   0AED 38 00 00      mov c, 0
1112   0AF0 FD AB         swp b
1113   0AF2 D8            push b
1114   0AF3 07 E0 12      call strcpy
1115   0AF6 51 04 00      add sp, 4
1116   0AF9             ; --- END FUNCTION CALL
1117   0AF9             ; printf(command); 
1118   0AF9             ; --- START FUNCTION CALL
1119   0AF9 3B 85 38      mov d, _command_data ; $command
1120   0AFC 2D            mov b, d
1121   0AFD 38 00 00      mov c, 0
1122   0B00 FD AB         swp b
1123   0B02 D8            push b
1124   0B03 07 D0 25      call printf
1125   0B06 51 02 00      add sp, 2
1126   0B09             ; --- END FUNCTION CALL
1127   0B09 0A 0C 0B      jmp _if25_exit
1128   0B0C             _if25_exit:
1129   0B0C F9            leave
1130   0B0D 09            ret
1131   0B0E             
1132   0B0E             new_str_var:
1133   0B0E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1134   0B11             ; variables[vars_tos].var_type = SHELL_VAR_TYP_STR; 
1135   0B11 3B 05 3E      mov d, _variables_data ; $variables
1136   0B14 D7            push a
1137   0B15 DA            push d
1138   0B16 3B D7 3E      mov d, _vars_tos ; $vars_tos
1139   0B19 2A            mov b, [d]
1140   0B1A 38 00 00      mov c, 0
1141   0B1D E7            pop d
1142   0B1E FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1143   0B22 E4            pop a
1144   0B23 58 10 00      add d, 16
1145   0B26 DA            push d
1146   0B27 FD 2E 00 00   mov32 cb, $0 ; enum element: SHELL_VAR_TYP_STR
1146   0B2B 00 00 
1147   0B2D E7            pop d
1148   0B2E FD 3E         mov [d], bl
1149   0B30             ; variables[vars_tos].as_string = alloc(64); 
1150   0B30 3B 05 3E      mov d, _variables_data ; $variables
1151   0B33 D7            push a
1152   0B34 DA            push d
1153   0B35 3B D7 3E      mov d, _vars_tos ; $vars_tos
1154   0B38 2A            mov b, [d]
1155   0B39 38 00 00      mov c, 0
1156   0B3C E7            pop d
1157   0B3D FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1158   0B41 E4            pop a
1159   0B42 58 11 00      add d, 17
1160   0B45 DA            push d
1161   0B46             ; --- START FUNCTION CALL
1162   0B46 FD 2E 40 00   mov32 cb, $00000040
1162   0B4A 00 00 
1163   0B4C FD AB         swp b
1164   0B4E D8            push b
1165   0B4F 07 AF 12      call alloc
1166   0B52 51 02 00      add sp, 2
1167   0B55             ; --- END FUNCTION CALL
1168   0B55 E7            pop d
1169   0B56 FD 43         mov [d], b
1170   0B58             ; strcpy(variables[vars_tos].varname, varname); 
1171   0B58             ; --- START FUNCTION CALL
1172   0B58 FA 05 00      lea d, [bp + 5] ; $varname
1173   0B5B 2A            mov b, [d]
1174   0B5C 38 00 00      mov c, 0
1175   0B5F FD AB         swp b
1176   0B61 D8            push b
1177   0B62 3B 05 3E      mov d, _variables_data ; $variables
1178   0B65 D7            push a
1179   0B66 DA            push d
1180   0B67 3B D7 3E      mov d, _vars_tos ; $vars_tos
1181   0B6A 2A            mov b, [d]
1182   0B6B 38 00 00      mov c, 0
1183   0B6E E7            pop d
1184   0B6F FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1185   0B73 E4            pop a
1186   0B74 58 00 00      add d, 0
1187   0B77 2D            mov b, d
1188   0B78 38 00 00      mov c, 0
1189   0B7B FD AB         swp b
1190   0B7D D8            push b
1191   0B7E 07 E0 12      call strcpy
1192   0B81 51 04 00      add sp, 4
1193   0B84             ; --- END FUNCTION CALL
1194   0B84             ; strcpy(variables[vars_tos].as_string, strval); 
1195   0B84             ; --- START FUNCTION CALL
1196   0B84 FA 07 00      lea d, [bp + 7] ; $strval
1197   0B87 2A            mov b, [d]
1198   0B88 38 00 00      mov c, 0
1199   0B8B FD AB         swp b
1200   0B8D D8            push b
1201   0B8E 3B 05 3E      mov d, _variables_data ; $variables
1202   0B91 D7            push a
1203   0B92 DA            push d
1204   0B93 3B D7 3E      mov d, _vars_tos ; $vars_tos
1205   0B96 2A            mov b, [d]
1206   0B97 38 00 00      mov c, 0
1207   0B9A E7            pop d
1208   0B9B FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1209   0B9F E4            pop a
1210   0BA0 58 11 00      add d, 17
1211   0BA3 2A            mov b, [d]
1212   0BA4 38 00 00      mov c, 0
1213   0BA7 FD AB         swp b
1214   0BA9 D8            push b
1215   0BAA 07 E0 12      call strcpy
1216   0BAD 51 04 00      add sp, 4
1217   0BB0             ; --- END FUNCTION CALL
1218   0BB0             ; vars_tos++; 
1219   0BB0 3B D7 3E      mov d, _vars_tos ; $vars_tos
1220   0BB3 2A            mov b, [d]
1221   0BB4 38 00 00      mov c, 0
1222   0BB7 11            mov a, b
1223   0BB8 FD 77         inc b
1224   0BBA 3B D7 3E      mov d, _vars_tos ; $vars_tos
1225   0BBD FD 43         mov [d], b
1226   0BBF 27            mov b, a
1227   0BC0             ; return vars_tos - 1; 
1228   0BC0 3B D7 3E      mov d, _vars_tos ; $vars_tos
1229   0BC3 2A            mov b, [d]
1230   0BC4 38 00 00      mov c, 0
1231   0BC7             ; --- START TERMS
1232   0BC7 D7            push a
1233   0BC8 11            mov a, b
1234   0BC9 FD 2E 01 00   mov32 cb, $00000001
1234   0BCD 00 00 
1235   0BCF 60            sub a, b
1236   0BD0 27            mov b, a
1237   0BD1 E4            pop a
1238   0BD2             ; --- END TERMS
1239   0BD2 F9            leave
1240   0BD3 09            ret
1241   0BD4             
1242   0BD4             set_str_var:
1243   0BD4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1244   0BD7             ; int var_index; 
1245   0BD7 52 02 00      sub sp, 2
1246   0BDA             ; for(var_index = 0; var_index < vars_tos; var_index++){ 
1247   0BDA             _for26_init:
1248   0BDA FA FF FF      lea d, [bp + -1] ; $var_index
1249   0BDD DA            push d
1250   0BDE FD 2E 00 00   mov32 cb, $00000000
1250   0BE2 00 00 
1251   0BE4 E7            pop d
1252   0BE5 FD 43         mov [d], b
1253   0BE7             _for26_cond:
1254   0BE7 FA FF FF      lea d, [bp + -1] ; $var_index
1255   0BEA 2A            mov b, [d]
1256   0BEB 38 00 00      mov c, 0
1257   0BEE             ; --- START RELATIONAL
1258   0BEE D7            push a
1259   0BEF 11            mov a, b
1260   0BF0 3B D7 3E      mov d, _vars_tos ; $vars_tos
1261   0BF3 2A            mov b, [d]
1262   0BF4 38 00 00      mov c, 0
1263   0BF7 B0            cmp a, b
1264   0BF8 FD 73         slt ; < (signed)
1265   0BFA E4            pop a
1266   0BFB             ; --- END RELATIONAL
1267   0BFB C0 00 00      cmp b, 0
1268   0BFE C6 7E 0C      je _for26_exit
1269   0C01             _for26_block:
1270   0C01             ; if(!strcmp(variables[var_index].varname, varname)){ 
1271   0C01             _if27_cond:
1272   0C01             ; --- START FUNCTION CALL
1273   0C01 FA 05 00      lea d, [bp + 5] ; $varname
1274   0C04 2A            mov b, [d]
1275   0C05 38 00 00      mov c, 0
1276   0C08 FD AB         swp b
1277   0C0A D8            push b
1278   0C0B 3B 05 3E      mov d, _variables_data ; $variables
1279   0C0E D7            push a
1280   0C0F DA            push d
1281   0C10 FA FF FF      lea d, [bp + -1] ; $var_index
1282   0C13 2A            mov b, [d]
1283   0C14 38 00 00      mov c, 0
1284   0C17 E7            pop d
1285   0C18 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1286   0C1C E4            pop a
1287   0C1D 58 00 00      add d, 0
1288   0C20 2D            mov b, d
1289   0C21 38 00 00      mov c, 0
1290   0C24 FD AB         swp b
1291   0C26 D8            push b
1292   0C27 07 97 31      call strcmp
1293   0C2A 51 04 00      add sp, 4
1294   0C2D             ; --- END FUNCTION CALL
1295   0C2D C0 00 00      cmp b, 0
1296   0C30 C6 6B 0C      je _if27_exit
1297   0C33             _if27_TRUE:
1298   0C33             ; strcpy(variables[var_index].as_string, strval); 
1299   0C33             ; --- START FUNCTION CALL
1300   0C33 FA 07 00      lea d, [bp + 7] ; $strval
1301   0C36 2A            mov b, [d]
1302   0C37 38 00 00      mov c, 0
1303   0C3A FD AB         swp b
1304   0C3C D8            push b
1305   0C3D 3B 05 3E      mov d, _variables_data ; $variables
1306   0C40 D7            push a
1307   0C41 DA            push d
1308   0C42 FA FF FF      lea d, [bp + -1] ; $var_index
1309   0C45 2A            mov b, [d]
1310   0C46 38 00 00      mov c, 0
1311   0C49 E7            pop d
1312   0C4A FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1313   0C4E E4            pop a
1314   0C4F 58 11 00      add d, 17
1315   0C52 2A            mov b, [d]
1316   0C53 38 00 00      mov c, 0
1317   0C56 FD AB         swp b
1318   0C58 D8            push b
1319   0C59 07 E0 12      call strcpy
1320   0C5C 51 04 00      add sp, 4
1321   0C5F             ; --- END FUNCTION CALL
1322   0C5F             ; return var_index; 
1323   0C5F FA FF FF      lea d, [bp + -1] ; $var_index
1324   0C62 2A            mov b, [d]
1325   0C63 38 00 00      mov c, 0
1326   0C66 F9            leave
1327   0C67 09            ret
1328   0C68 0A 6B 0C      jmp _if27_exit
1329   0C6B             _if27_exit:
1330   0C6B             _for26_update:
1331   0C6B FA FF FF      lea d, [bp + -1] ; $var_index
1332   0C6E 2A            mov b, [d]
1333   0C6F 38 00 00      mov c, 0
1334   0C72 11            mov a, b
1335   0C73 FD 77         inc b
1336   0C75 FA FF FF      lea d, [bp + -1] ; $var_index
1337   0C78 FD 43         mov [d], b
1338   0C7A 27            mov b, a
1339   0C7B 0A E7 0B      jmp _for26_cond
1340   0C7E             _for26_exit:
1341   0C7E             ; printf("Error: Variable does not exist."); 
1342   0C7E             ; --- START FUNCTION CALL
1343   0C7E 26 1B 41      mov b, _s11 ; "Error: Variable does not exist."
1344   0C81 FD AB         swp b
1345   0C83 D8            push b
1346   0C84 07 D0 25      call printf
1347   0C87 51 02 00      add sp, 2
1348   0C8A             ; --- END FUNCTION CALL
1349   0C8A F9            leave
1350   0C8B 09            ret
1351   0C8C             
1352   0C8C             set_int_var:
1353   0C8C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1354   0C8F             ; int i; 
1355   0C8F 52 02 00      sub sp, 2
1356   0C92             ; for(i = 0; i < vars_tos; i++){ 
1357   0C92             _for28_init:
1358   0C92 FA FF FF      lea d, [bp + -1] ; $i
1359   0C95 DA            push d
1360   0C96 FD 2E 00 00   mov32 cb, $00000000
1360   0C9A 00 00 
1361   0C9C E7            pop d
1362   0C9D FD 43         mov [d], b
1363   0C9F             _for28_cond:
1364   0C9F FA FF FF      lea d, [bp + -1] ; $i
1365   0CA2 2A            mov b, [d]
1366   0CA3 38 00 00      mov c, 0
1367   0CA6             ; --- START RELATIONAL
1368   0CA6 D7            push a
1369   0CA7 11            mov a, b
1370   0CA8 3B D7 3E      mov d, _vars_tos ; $vars_tos
1371   0CAB 2A            mov b, [d]
1372   0CAC 38 00 00      mov c, 0
1373   0CAF B0            cmp a, b
1374   0CB0 FD 73         slt ; < (signed)
1375   0CB2 E4            pop a
1376   0CB3             ; --- END RELATIONAL
1377   0CB3 C0 00 00      cmp b, 0
1378   0CB6 C6 2A 0D      je _for28_exit
1379   0CB9             _for28_block:
1380   0CB9             ; if(!strcmp(variables[i].varname, varname)){ 
1381   0CB9             _if29_cond:
1382   0CB9             ; --- START FUNCTION CALL
1383   0CB9 FA 05 00      lea d, [bp + 5] ; $varname
1384   0CBC 2A            mov b, [d]
1385   0CBD 38 00 00      mov c, 0
1386   0CC0 FD AB         swp b
1387   0CC2 D8            push b
1388   0CC3 3B 05 3E      mov d, _variables_data ; $variables
1389   0CC6 D7            push a
1390   0CC7 DA            push d
1391   0CC8 FA FF FF      lea d, [bp + -1] ; $i
1392   0CCB 2A            mov b, [d]
1393   0CCC 38 00 00      mov c, 0
1394   0CCF E7            pop d
1395   0CD0 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1396   0CD4 E4            pop a
1397   0CD5 58 00 00      add d, 0
1398   0CD8 2D            mov b, d
1399   0CD9 38 00 00      mov c, 0
1400   0CDC FD AB         swp b
1401   0CDE D8            push b
1402   0CDF 07 97 31      call strcmp
1403   0CE2 51 04 00      add sp, 4
1404   0CE5             ; --- END FUNCTION CALL
1405   0CE5 C0 00 00      cmp b, 0
1406   0CE8 C6 17 0D      je _if29_exit
1407   0CEB             _if29_TRUE:
1408   0CEB             ; variables[vars_tos].as_int = as_int; 
1409   0CEB 3B 05 3E      mov d, _variables_data ; $variables
1410   0CEE D7            push a
1411   0CEF DA            push d
1412   0CF0 3B D7 3E      mov d, _vars_tos ; $vars_tos
1413   0CF3 2A            mov b, [d]
1414   0CF4 38 00 00      mov c, 0
1415   0CF7 E7            pop d
1416   0CF8 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1417   0CFC E4            pop a
1418   0CFD 58 13 00      add d, 19
1419   0D00 DA            push d
1420   0D01 FA 07 00      lea d, [bp + 7] ; $as_int
1421   0D04 2A            mov b, [d]
1422   0D05 38 00 00      mov c, 0
1423   0D08 E7            pop d
1424   0D09 FD 43         mov [d], b
1425   0D0B             ; return i; 
1426   0D0B FA FF FF      lea d, [bp + -1] ; $i
1427   0D0E 2A            mov b, [d]
1428   0D0F 38 00 00      mov c, 0
1429   0D12 F9            leave
1430   0D13 09            ret
1431   0D14 0A 17 0D      jmp _if29_exit
1432   0D17             _if29_exit:
1433   0D17             _for28_update:
1434   0D17 FA FF FF      lea d, [bp + -1] ; $i
1435   0D1A 2A            mov b, [d]
1436   0D1B 38 00 00      mov c, 0
1437   0D1E 11            mov a, b
1438   0D1F FD 77         inc b
1439   0D21 FA FF FF      lea d, [bp + -1] ; $i
1440   0D24 FD 43         mov [d], b
1441   0D26 27            mov b, a
1442   0D27 0A 9F 0C      jmp _for28_cond
1443   0D2A             _for28_exit:
1444   0D2A             ; variables[vars_tos].var_type = SHELL_VAR_TYP_INT; 
1445   0D2A 3B 05 3E      mov d, _variables_data ; $variables
1446   0D2D D7            push a
1447   0D2E DA            push d
1448   0D2F 3B D7 3E      mov d, _vars_tos ; $vars_tos
1449   0D32 2A            mov b, [d]
1450   0D33 38 00 00      mov c, 0
1451   0D36 E7            pop d
1452   0D37 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1453   0D3B E4            pop a
1454   0D3C 58 10 00      add d, 16
1455   0D3F DA            push d
1456   0D40 FD 2E 01 00   mov32 cb, $1 ; enum element: SHELL_VAR_TYP_INT
1456   0D44 00 00 
1457   0D46 E7            pop d
1458   0D47 FD 3E         mov [d], bl
1459   0D49             ; strcpy(variables[vars_tos].varname, varname); 
1460   0D49             ; --- START FUNCTION CALL
1461   0D49 FA 05 00      lea d, [bp + 5] ; $varname
1462   0D4C 2A            mov b, [d]
1463   0D4D 38 00 00      mov c, 0
1464   0D50 FD AB         swp b
1465   0D52 D8            push b
1466   0D53 3B 05 3E      mov d, _variables_data ; $variables
1467   0D56 D7            push a
1468   0D57 DA            push d
1469   0D58 3B D7 3E      mov d, _vars_tos ; $vars_tos
1470   0D5B 2A            mov b, [d]
1471   0D5C 38 00 00      mov c, 0
1472   0D5F E7            pop d
1473   0D60 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1474   0D64 E4            pop a
1475   0D65 58 00 00      add d, 0
1476   0D68 2D            mov b, d
1477   0D69 38 00 00      mov c, 0
1478   0D6C FD AB         swp b
1479   0D6E D8            push b
1480   0D6F 07 E0 12      call strcpy
1481   0D72 51 04 00      add sp, 4
1482   0D75             ; --- END FUNCTION CALL
1483   0D75             ; variables[vars_tos].as_int = as_int; 
1484   0D75 3B 05 3E      mov d, _variables_data ; $variables
1485   0D78 D7            push a
1486   0D79 DA            push d
1487   0D7A 3B D7 3E      mov d, _vars_tos ; $vars_tos
1488   0D7D 2A            mov b, [d]
1489   0D7E 38 00 00      mov c, 0
1490   0D81 E7            pop d
1491   0D82 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1492   0D86 E4            pop a
1493   0D87 58 13 00      add d, 19
1494   0D8A DA            push d
1495   0D8B FA 07 00      lea d, [bp + 7] ; $as_int
1496   0D8E 2A            mov b, [d]
1497   0D8F 38 00 00      mov c, 0
1498   0D92 E7            pop d
1499   0D93 FD 43         mov [d], b
1500   0D95             ; vars_tos++; 
1501   0D95 3B D7 3E      mov d, _vars_tos ; $vars_tos
1502   0D98 2A            mov b, [d]
1503   0D99 38 00 00      mov c, 0
1504   0D9C 11            mov a, b
1505   0D9D FD 77         inc b
1506   0D9F 3B D7 3E      mov d, _vars_tos ; $vars_tos
1507   0DA2 FD 43         mov [d], b
1508   0DA4 27            mov b, a
1509   0DA5             ; return vars_tos - 1; 
1510   0DA5 3B D7 3E      mov d, _vars_tos ; $vars_tos
1511   0DA8 2A            mov b, [d]
1512   0DA9 38 00 00      mov c, 0
1513   0DAC             ; --- START TERMS
1514   0DAC D7            push a
1515   0DAD 11            mov a, b
1516   0DAE FD 2E 01 00   mov32 cb, $00000001
1516   0DB2 00 00 
1517   0DB4 60            sub a, b
1518   0DB5 27            mov b, a
1519   0DB6 E4            pop a
1520   0DB7             ; --- END TERMS
1521   0DB7 F9            leave
1522   0DB8 09            ret
1523   0DB9             
1524   0DB9             get_var_index:
1525   0DB9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1526   0DBC             ; int i; 
1527   0DBC 52 02 00      sub sp, 2
1528   0DBF             ; for(i = 0; i < vars_tos; i++) 
1529   0DBF             _for30_init:
1530   0DBF FA FF FF      lea d, [bp + -1] ; $i
1531   0DC2 DA            push d
1532   0DC3 FD 2E 00 00   mov32 cb, $00000000
1532   0DC7 00 00 
1533   0DC9 E7            pop d
1534   0DCA FD 43         mov [d], b
1535   0DCC             _for30_cond:
1536   0DCC FA FF FF      lea d, [bp + -1] ; $i
1537   0DCF 2A            mov b, [d]
1538   0DD0 38 00 00      mov c, 0
1539   0DD3             ; --- START RELATIONAL
1540   0DD3 D7            push a
1541   0DD4 11            mov a, b
1542   0DD5 3B D7 3E      mov d, _vars_tos ; $vars_tos
1543   0DD8 2A            mov b, [d]
1544   0DD9 38 00 00      mov c, 0
1545   0DDC B0            cmp a, b
1546   0DDD FD 73         slt ; < (signed)
1547   0DDF E4            pop a
1548   0DE0             ; --- END RELATIONAL
1549   0DE0 C0 00 00      cmp b, 0
1550   0DE3 C6 37 0E      je _for30_exit
1551   0DE6             _for30_block:
1552   0DE6             ; if(!strcmp(variables[i].varname, varname)) return i; 
1553   0DE6             _if31_cond:
1554   0DE6             ; --- START FUNCTION CALL
1555   0DE6 FA 05 00      lea d, [bp + 5] ; $varname
1556   0DE9 2A            mov b, [d]
1557   0DEA 38 00 00      mov c, 0
1558   0DED FD AB         swp b
1559   0DEF D8            push b
1560   0DF0 3B 05 3E      mov d, _variables_data ; $variables
1561   0DF3 D7            push a
1562   0DF4 DA            push d
1563   0DF5 FA FF FF      lea d, [bp + -1] ; $i
1564   0DF8 2A            mov b, [d]
1565   0DF9 38 00 00      mov c, 0
1566   0DFC E7            pop d
1567   0DFD FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1568   0E01 E4            pop a
1569   0E02 58 00 00      add d, 0
1570   0E05 2D            mov b, d
1571   0E06 38 00 00      mov c, 0
1572   0E09 FD AB         swp b
1573   0E0B D8            push b
1574   0E0C 07 97 31      call strcmp
1575   0E0F 51 04 00      add sp, 4
1576   0E12             ; --- END FUNCTION CALL
1577   0E12 C0 00 00      cmp b, 0
1578   0E15 C6 24 0E      je _if31_exit
1579   0E18             _if31_TRUE:
1580   0E18             ; return i; 
1581   0E18 FA FF FF      lea d, [bp + -1] ; $i
1582   0E1B 2A            mov b, [d]
1583   0E1C 38 00 00      mov c, 0
1584   0E1F F9            leave
1585   0E20 09            ret
1586   0E21 0A 24 0E      jmp _if31_exit
1587   0E24             _if31_exit:
1588   0E24             _for30_update:
1589   0E24 FA FF FF      lea d, [bp + -1] ; $i
1590   0E27 2A            mov b, [d]
1591   0E28 38 00 00      mov c, 0
1592   0E2B 11            mov a, b
1593   0E2C FD 77         inc b
1594   0E2E FA FF FF      lea d, [bp + -1] ; $i
1595   0E31 FD 43         mov [d], b
1596   0E33 27            mov b, a
1597   0E34 0A CC 0D      jmp _for30_cond
1598   0E37             _for30_exit:
1599   0E37             ; return -1; 
1600   0E37 FD 2E FF FF   mov32 cb, $ffffffff
1600   0E3B FF FF 
1601   0E3D F9            leave
1602   0E3E 09            ret
1603   0E3F             
1604   0E3F             get_var_type:
1605   0E3F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1606   0E42             ; int i; 
1607   0E42 52 02 00      sub sp, 2
1608   0E45             ; for(i = 0; i < vars_tos; i++) 
1609   0E45             _for32_init:
1610   0E45 FA FF FF      lea d, [bp + -1] ; $i
1611   0E48 DA            push d
1612   0E49 FD 2E 00 00   mov32 cb, $00000000
1612   0E4D 00 00 
1613   0E4F E7            pop d
1614   0E50 FD 43         mov [d], b
1615   0E52             _for32_cond:
1616   0E52 FA FF FF      lea d, [bp + -1] ; $i
1617   0E55 2A            mov b, [d]
1618   0E56 38 00 00      mov c, 0
1619   0E59             ; --- START RELATIONAL
1620   0E59 D7            push a
1621   0E5A 11            mov a, b
1622   0E5B 3B D7 3E      mov d, _vars_tos ; $vars_tos
1623   0E5E 2A            mov b, [d]
1624   0E5F 38 00 00      mov c, 0
1625   0E62 B0            cmp a, b
1626   0E63 FD 73         slt ; < (signed)
1627   0E65 E4            pop a
1628   0E66             ; --- END RELATIONAL
1629   0E66 C0 00 00      cmp b, 0
1630   0E69 C6 D1 0E      je _for32_exit
1631   0E6C             _for32_block:
1632   0E6C             ; if(!strcmp(variables[i].varname, varname)) return variables[i].var_type; 
1633   0E6C             _if33_cond:
1634   0E6C             ; --- START FUNCTION CALL
1635   0E6C FA 05 00      lea d, [bp + 5] ; $varname
1636   0E6F 2A            mov b, [d]
1637   0E70 38 00 00      mov c, 0
1638   0E73 FD AB         swp b
1639   0E75 D8            push b
1640   0E76 3B 05 3E      mov d, _variables_data ; $variables
1641   0E79 D7            push a
1642   0E7A DA            push d
1643   0E7B FA FF FF      lea d, [bp + -1] ; $i
1644   0E7E 2A            mov b, [d]
1645   0E7F 38 00 00      mov c, 0
1646   0E82 E7            pop d
1647   0E83 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1648   0E87 E4            pop a
1649   0E88 58 00 00      add d, 0
1650   0E8B 2D            mov b, d
1651   0E8C 38 00 00      mov c, 0
1652   0E8F FD AB         swp b
1653   0E91 D8            push b
1654   0E92 07 97 31      call strcmp
1655   0E95 51 04 00      add sp, 4
1656   0E98             ; --- END FUNCTION CALL
1657   0E98 C0 00 00      cmp b, 0
1658   0E9B C6 BE 0E      je _if33_exit
1659   0E9E             _if33_TRUE:
1660   0E9E             ; return variables[i].var_type; 
1661   0E9E 3B 05 3E      mov d, _variables_data ; $variables
1662   0EA1 D7            push a
1663   0EA2 DA            push d
1664   0EA3 FA FF FF      lea d, [bp + -1] ; $i
1665   0EA6 2A            mov b, [d]
1666   0EA7 38 00 00      mov c, 0
1667   0EAA E7            pop d
1668   0EAB FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1669   0EAF E4            pop a
1670   0EB0 58 10 00      add d, 16
1671   0EB3 32            mov bl, [d]
1672   0EB4 A7 00         mov bh, 0
1673   0EB6 38 00 00      mov c, 0
1674   0EB9 F9            leave
1675   0EBA 09            ret
1676   0EBB 0A BE 0E      jmp _if33_exit
1677   0EBE             _if33_exit:
1678   0EBE             _for32_update:
1679   0EBE FA FF FF      lea d, [bp + -1] ; $i
1680   0EC1 2A            mov b, [d]
1681   0EC2 38 00 00      mov c, 0
1682   0EC5 11            mov a, b
1683   0EC6 FD 77         inc b
1684   0EC8 FA FF FF      lea d, [bp + -1] ; $i
1685   0ECB FD 43         mov [d], b
1686   0ECD 27            mov b, a
1687   0ECE 0A 52 0E      jmp _for32_cond
1688   0ED1             _for32_exit:
1689   0ED1             ; return -1; 
1690   0ED1 FD 2E FF FF   mov32 cb, $ffffffff
1690   0ED5 FF FF 
1691   0ED7 F9            leave
1692   0ED8 09            ret
1693   0ED9             
1694   0ED9             show_var:
1695   0ED9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1696   0EDC             ; int i; 
1697   0EDC 52 02 00      sub sp, 2
1698   0EDF             ; for(i = 0; i < vars_tos; i++){ 
1699   0EDF             _for34_init:
1700   0EDF FA FF FF      lea d, [bp + -1] ; $i
1701   0EE2 DA            push d
1702   0EE3 FD 2E 00 00   mov32 cb, $00000000
1702   0EE7 00 00 
1703   0EE9 E7            pop d
1704   0EEA FD 43         mov [d], b
1705   0EEC             _for34_cond:
1706   0EEC FA FF FF      lea d, [bp + -1] ; $i
1707   0EEF 2A            mov b, [d]
1708   0EF0 38 00 00      mov c, 0
1709   0EF3             ; --- START RELATIONAL
1710   0EF3 D7            push a
1711   0EF4 11            mov a, b
1712   0EF5 3B D7 3E      mov d, _vars_tos ; $vars_tos
1713   0EF8 2A            mov b, [d]
1714   0EF9 38 00 00      mov c, 0
1715   0EFC B0            cmp a, b
1716   0EFD FD 73         slt ; < (signed)
1717   0EFF E4            pop a
1718   0F00             ; --- END RELATIONAL
1719   0F00 C0 00 00      cmp b, 0
1720   0F03 C6 01 10      je _for34_exit
1721   0F06             _for34_block:
1722   0F06             ; if(!strcmp(variables[i].varname, varname)){ 
1723   0F06             _if35_cond:
1724   0F06             ; --- START FUNCTION CALL
1725   0F06 FA 05 00      lea d, [bp + 5] ; $varname
1726   0F09 2A            mov b, [d]
1727   0F0A 38 00 00      mov c, 0
1728   0F0D FD AB         swp b
1729   0F0F D8            push b
1730   0F10 3B 05 3E      mov d, _variables_data ; $variables
1731   0F13 D7            push a
1732   0F14 DA            push d
1733   0F15 FA FF FF      lea d, [bp + -1] ; $i
1734   0F18 2A            mov b, [d]
1735   0F19 38 00 00      mov c, 0
1736   0F1C E7            pop d
1737   0F1D FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1738   0F21 E4            pop a
1739   0F22 58 00 00      add d, 0
1740   0F25 2D            mov b, d
1741   0F26 38 00 00      mov c, 0
1742   0F29 FD AB         swp b
1743   0F2B D8            push b
1744   0F2C 07 97 31      call strcmp
1745   0F2F 51 04 00      add sp, 4
1746   0F32             ; --- END FUNCTION CALL
1747   0F32 C0 00 00      cmp b, 0
1748   0F35 C6 EE 0F      je _if35_exit
1749   0F38             _if35_TRUE:
1750   0F38             ; if(variables[i].var_type == SHELL_VAR_TYP_INT){ 
1751   0F38             _if36_cond:
1752   0F38 3B 05 3E      mov d, _variables_data ; $variables
1753   0F3B D7            push a
1754   0F3C DA            push d
1755   0F3D FA FF FF      lea d, [bp + -1] ; $i
1756   0F40 2A            mov b, [d]
1757   0F41 38 00 00      mov c, 0
1758   0F44 E7            pop d
1759   0F45 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1760   0F49 E4            pop a
1761   0F4A 58 10 00      add d, 16
1762   0F4D 32            mov bl, [d]
1763   0F4E A7 00         mov bh, 0
1764   0F50 38 00 00      mov c, 0
1765   0F53             ; --- START RELATIONAL
1766   0F53 D7            push a
1767   0F54 11            mov a, b
1768   0F55 FD 2E 01 00   mov32 cb, $1 ; enum element: SHELL_VAR_TYP_INT
1768   0F59 00 00 
1769   0F5B B0            cmp a, b
1770   0F5C FD 71         seq ; ==
1771   0F5E E4            pop a
1772   0F5F             ; --- END RELATIONAL
1773   0F5F C0 00 00      cmp b, 0
1774   0F62 C6 90 0F      je _if36_else
1775   0F65             _if36_TRUE:
1776   0F65             ; printf("%d", variables[i].as_int); 
1777   0F65             ; --- START FUNCTION CALL
1778   0F65 3B 05 3E      mov d, _variables_data ; $variables
1779   0F68 D7            push a
1780   0F69 DA            push d
1781   0F6A FA FF FF      lea d, [bp + -1] ; $i
1782   0F6D 2A            mov b, [d]
1783   0F6E 38 00 00      mov c, 0
1784   0F71 E7            pop d
1785   0F72 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1786   0F76 E4            pop a
1787   0F77 58 13 00      add d, 19
1788   0F7A 2A            mov b, [d]
1789   0F7B 38 00 00      mov c, 0
1790   0F7E FD AB         swp b
1791   0F80 D8            push b
1792   0F81 26 3B 41      mov b, _s12 ; "%d"
1793   0F84 FD AB         swp b
1794   0F86 D8            push b
1795   0F87 07 D0 25      call printf
1796   0F8A 51 04 00      add sp, 4
1797   0F8D             ; --- END FUNCTION CALL
1798   0F8D 0A E2 0F      jmp _if36_exit
1799   0F90             _if36_else:
1800   0F90             ; if(variables[i].var_type == SHELL_VAR_TYP_STR){ 
1801   0F90             _if37_cond:
1802   0F90 3B 05 3E      mov d, _variables_data ; $variables
1803   0F93 D7            push a
1804   0F94 DA            push d
1805   0F95 FA FF FF      lea d, [bp + -1] ; $i
1806   0F98 2A            mov b, [d]
1807   0F99 38 00 00      mov c, 0
1808   0F9C E7            pop d
1809   0F9D FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1810   0FA1 E4            pop a
1811   0FA2 58 10 00      add d, 16
1812   0FA5 32            mov bl, [d]
1813   0FA6 A7 00         mov bh, 0
1814   0FA8 38 00 00      mov c, 0
1815   0FAB             ; --- START RELATIONAL
1816   0FAB D7            push a
1817   0FAC 11            mov a, b
1818   0FAD FD 2E 00 00   mov32 cb, $0 ; enum element: SHELL_VAR_TYP_STR
1818   0FB1 00 00 
1819   0FB3 B0            cmp a, b
1820   0FB4 FD 71         seq ; ==
1821   0FB6 E4            pop a
1822   0FB7             ; --- END RELATIONAL
1823   0FB7 C0 00 00      cmp b, 0
1824   0FBA C6 E2 0F      je _if37_exit
1825   0FBD             _if37_TRUE:
1826   0FBD             ; printf(variables[i].as_string); 
1827   0FBD             ; --- START FUNCTION CALL
1828   0FBD 3B 05 3E      mov d, _variables_data ; $variables
1829   0FC0 D7            push a
1830   0FC1 DA            push d
1831   0FC2 FA FF FF      lea d, [bp + -1] ; $i
1832   0FC5 2A            mov b, [d]
1833   0FC6 38 00 00      mov c, 0
1834   0FC9 E7            pop d
1835   0FCA FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1836   0FCE E4            pop a
1837   0FCF 58 11 00      add d, 17
1838   0FD2 2A            mov b, [d]
1839   0FD3 38 00 00      mov c, 0
1840   0FD6 FD AB         swp b
1841   0FD8 D8            push b
1842   0FD9 07 D0 25      call printf
1843   0FDC 51 02 00      add sp, 2
1844   0FDF             ; --- END FUNCTION CALL
1845   0FDF 0A E2 0F      jmp _if37_exit
1846   0FE2             _if37_exit:
1847   0FE2             _if36_exit:
1848   0FE2             ; return i; 
1849   0FE2 FA FF FF      lea d, [bp + -1] ; $i
1850   0FE5 2A            mov b, [d]
1851   0FE6 38 00 00      mov c, 0
1852   0FE9 F9            leave
1853   0FEA 09            ret
1854   0FEB 0A EE 0F      jmp _if35_exit
1855   0FEE             _if35_exit:
1856   0FEE             _for34_update:
1857   0FEE FA FF FF      lea d, [bp + -1] ; $i
1858   0FF1 2A            mov b, [d]
1859   0FF2 38 00 00      mov c, 0
1860   0FF5 11            mov a, b
1861   0FF6 FD 77         inc b
1862   0FF8 FA FF FF      lea d, [bp + -1] ; $i
1863   0FFB FD 43         mov [d], b
1864   0FFD 27            mov b, a
1865   0FFE 0A EC 0E      jmp _for34_cond
1866   1001             _for34_exit:
1867   1001             ; error("Undeclared variable."); 
1868   1001             ; --- START FUNCTION CALL
1869   1001 26 3E 41      mov b, _s13 ; "Undeclared variable."
1870   1004 FD AB         swp b
1871   1006 D8            push b
1872   1007 07 A3 25      call error
1873   100A 51 02 00      add sp, 2
1874   100D             ; --- END FUNCTION CALL
1875   100D F9            leave
1876   100E 09            ret
1877   100F             
1878   100F             get_shell_var_strval:
1879   100F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1880   1012             ; return variables[index].as_string; 
1881   1012 3B 05 3E      mov d, _variables_data ; $variables
1882   1015 D7            push a
1883   1016 DA            push d
1884   1017 FA 05 00      lea d, [bp + 5] ; $index
1885   101A 2A            mov b, [d]
1886   101B 38 00 00      mov c, 0
1887   101E E7            pop d
1888   101F FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1889   1023 E4            pop a
1890   1024 58 11 00      add d, 17
1891   1027 2A            mov b, [d]
1892   1028 38 00 00      mov c, 0
1893   102B F9            leave
1894   102C 09            ret
1895   102D             
1896   102D             get_shell_var_intval:
1897   102D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1898   1030             ; return variables[index].as_int; 
1899   1030 3B 05 3E      mov d, _variables_data ; $variables
1900   1033 D7            push a
1901   1034 DA            push d
1902   1035 FA 05 00      lea d, [bp + 5] ; $index
1903   1038 2A            mov b, [d]
1904   1039 38 00 00      mov c, 0
1905   103C E7            pop d
1906   103D FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
1907   1041 E4            pop a
1908   1042 58 13 00      add d, 19
1909   1045 2A            mov b, [d]
1910   1046 38 00 00      mov c, 0
1911   1049 F9            leave
1912   104A 09            ret
1913   104B             
1914   104B             file_exists:
1915   104B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1916   104E             ; int file_exists; 
1917   104E 52 02 00      sub sp, 2
1918   1051             ; --- BEGIN INLINE ASM SEGMENT
1919   1051 FA 05 00      lea d, [bp + 5] ; $filename
1920   1054 FD 2A         mov d, [d]
1921   1056 19 15         mov al, 21
1922   1058 05 04         syscall sys_filesystem
1923   105A FA FF FF      lea d, [bp + -1] ; $file_exists
1924   105D 43            mov [d], a
1925   105E             ; --- END INLINE ASM SEGMENT
1926   105E             ; return file_exists; 
1927   105E FA FF FF      lea d, [bp + -1] ; $file_exists
1928   1061 2A            mov b, [d]
1929   1062 38 00 00      mov c, 0
1930   1065 F9            leave
1931   1066 09            ret
1932   1067             
1933   1067             command_cd:
1934   1067 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1935   106A             ; int dirID; 
1936   106A 52 02 00      sub sp, 2
1937   106D             ; *path = '\0'; 
1938   106D 3B 85 3A      mov d, _path_data ; $path
1939   1070 2D            mov b, d
1940   1071 38 00 00      mov c, 0
1941   1074 D8            push b
1942   1075 FD 2E 00 00   mov32 cb, $00000000
1942   1079 00 00 
1943   107B E7            pop d
1944   107C FD 3E         mov [d], bl
1945   107E             ; get(); 
1946   107E             ; --- START FUNCTION CALL
1947   107E 07 6D 13      call get
1948   1081             ; if(toktype == END || tok == SEMICOLON || tok == BITWISE_NOT){ 
1949   1081             _if38_cond:
1950   1081 3B DB 3E      mov d, _toktype ; $toktype
1951   1084 2A            mov b, [d]
1952   1085 38 00 00      mov c, 0
1953   1088             ; --- START RELATIONAL
1954   1088 D7            push a
1955   1089 11            mov a, b
1956   108A FD 2E 06 00   mov32 cb, $6 ; enum element: END
1956   108E 00 00 
1957   1090 B0            cmp a, b
1958   1091 FD 71         seq ; ==
1959   1093 E4            pop a
1960   1094             ; --- END RELATIONAL
1961   1094             ; --- START LOGICAL OR
1962   1094 D7            push a
1963   1095 11            mov a, b
1964   1096 3B D9 3E      mov d, _tok ; $tok
1965   1099 2A            mov b, [d]
1966   109A 38 00 00      mov c, 0
1967   109D             ; --- START RELATIONAL
1968   109D D7            push a
1969   109E 11            mov a, b
1970   109F FD 2E 23 00   mov32 cb, $23 ; enum element: SEMICOLON
1970   10A3 00 00 
1971   10A5 B0            cmp a, b
1972   10A6 FD 71         seq ; ==
1973   10A8 E4            pop a
1974   10A9             ; --- END RELATIONAL
1975   10A9 FD A8         sor a, b ; ||
1976   10AB 11            mov a, b
1977   10AC 3B D9 3E      mov d, _tok ; $tok
1978   10AF 2A            mov b, [d]
1979   10B0 38 00 00      mov c, 0
1980   10B3             ; --- START RELATIONAL
1981   10B3 D7            push a
1982   10B4 11            mov a, b
1983   10B5 FD 2E 19 00   mov32 cb, $19 ; enum element: BITWISE_NOT
1983   10B9 00 00 
1984   10BB B0            cmp a, b
1985   10BC FD 71         seq ; ==
1986   10BE E4            pop a
1987   10BF             ; --- END RELATIONAL
1988   10BF FD A8         sor a, b ; ||
1989   10C1 E4            pop a
1990   10C2             ; --- END LOGICAL OR
1991   10C2 C0 00 00      cmp b, 0
1992   10C5 C6 EF 10      je _if38_else
1993   10C8             _if38_TRUE:
1994   10C8             ; back(); 
1995   10C8             ; --- START FUNCTION CALL
1996   10C8 07 25 36      call back
1997   10CB             ; cd_to_dir(variables[1].as_string); 
1998   10CB             ; --- START FUNCTION CALL
1999   10CB 3B 05 3E      mov d, _variables_data ; $variables
2000   10CE D7            push a
2001   10CF DA            push d
2002   10D0 FD 2E 01 00   mov32 cb, $00000001
2002   10D4 00 00 
2003   10D6 E7            pop d
2004   10D7 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
2005   10DB E4            pop a
2006   10DC 58 11 00      add d, 17
2007   10DF 2A            mov b, [d]
2008   10E0 38 00 00      mov c, 0
2009   10E3 FD AB         swp b
2010   10E5 D8            push b
2011   10E6 07 62 11      call cd_to_dir
2012   10E9 51 02 00      add sp, 2
2013   10EC             ; --- END FUNCTION CALL
2014   10EC 0A 60 11      jmp _if38_exit
2015   10EF             _if38_else:
2016   10EF             ; for(;;){ 
2017   10EF             _for39_init:
2018   10EF             _for39_cond:
2019   10EF             _for39_block:
2020   10EF             ; strcat(path, token); 
2021   10EF             ; --- START FUNCTION CALL
2022   10EF 3B DF 3E      mov d, _token_data ; $token
2023   10F2 2D            mov b, d
2024   10F3 38 00 00      mov c, 0
2025   10F6 FD AB         swp b
2026   10F8 D8            push b
2027   10F9 3B 85 3A      mov d, _path_data ; $path
2028   10FC 2D            mov b, d
2029   10FD 38 00 00      mov c, 0
2030   1100 FD AB         swp b
2031   1102 D8            push b
2032   1103 07 1B 32      call strcat
2033   1106 51 04 00      add sp, 4
2034   1109             ; --- END FUNCTION CALL
2035   1109             ; get(); 
2036   1109             ; --- START FUNCTION CALL
2037   1109 07 6D 13      call get
2038   110C             ; if(toktype == END) break; 
2039   110C             _if40_cond:
2040   110C 3B DB 3E      mov d, _toktype ; $toktype
2041   110F 2A            mov b, [d]
2042   1110 38 00 00      mov c, 0
2043   1113             ; --- START RELATIONAL
2044   1113 D7            push a
2045   1114 11            mov a, b
2046   1115 FD 2E 06 00   mov32 cb, $6 ; enum element: END
2046   1119 00 00 
2047   111B B0            cmp a, b
2048   111C FD 71         seq ; ==
2049   111E E4            pop a
2050   111F             ; --- END RELATIONAL
2051   111F C0 00 00      cmp b, 0
2052   1122 C6 2B 11      je _if40_else
2053   1125             _if40_TRUE:
2054   1125             ; break; 
2055   1125 0A 50 11      jmp _for39_exit ; for break
2056   1128 0A 4D 11      jmp _if40_exit
2057   112B             _if40_else:
2058   112B             ; if(tok == SEMICOLON){ 
2059   112B             _if41_cond:
2060   112B 3B D9 3E      mov d, _tok ; $tok
2061   112E 2A            mov b, [d]
2062   112F 38 00 00      mov c, 0
2063   1132             ; --- START RELATIONAL
2064   1132 D7            push a
2065   1133 11            mov a, b
2066   1134 FD 2E 23 00   mov32 cb, $23 ; enum element: SEMICOLON
2066   1138 00 00 
2067   113A B0            cmp a, b
2068   113B FD 71         seq ; ==
2069   113D E4            pop a
2070   113E             ; --- END RELATIONAL
2071   113E C0 00 00      cmp b, 0
2072   1141 C6 4D 11      je _if41_exit
2073   1144             _if41_TRUE:
2074   1144             ; back(); 
2075   1144             ; --- START FUNCTION CALL
2076   1144 07 25 36      call back
2077   1147             ; break; 
2078   1147 0A 50 11      jmp _for39_exit ; for break
2079   114A 0A 4D 11      jmp _if41_exit
2080   114D             _if41_exit:
2081   114D             _if40_exit:
2082   114D             _for39_update:
2083   114D 0A EF 10      jmp _for39_cond
2084   1150             _for39_exit:
2085   1150             ; cd_to_dir(path); 
2086   1150             ; --- START FUNCTION CALL
2087   1150 3B 85 3A      mov d, _path_data ; $path
2088   1153 2D            mov b, d
2089   1154 38 00 00      mov c, 0
2090   1157 FD AB         swp b
2091   1159 D8            push b
2092   115A 07 62 11      call cd_to_dir
2093   115D 51 02 00      add sp, 2
2094   1160             ; --- END FUNCTION CALL
2095   1160             _if38_exit:
2096   1160 F9            leave
2097   1161 09            ret
2098   1162             
2099   1162             cd_to_dir:
2100   1162 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2101   1165             ; int dirID; 
2102   1165 52 02 00      sub sp, 2
2103   1168             ; --- BEGIN INLINE ASM SEGMENT
2104   1168 FA 05 00      lea d, [bp + 5] ; $dir
2105   116B FD 2A         mov d, [d]
2106   116D 19 13         mov al, 19
2107   116F 05 04         syscall sys_filesystem ; get dirID in 'A'
2108   1171 FA FF FF      lea d, [bp + -1] ; $dirID
2109   1174 FD 2A         mov d, [d]
2110   1176 43            mov [d], a ; set dirID
2111   1177 D7            push a
2112   1178             ; --- END INLINE ASM SEGMENT
2113   1178             ; if(dirID != -1){ 
2114   1178             _if42_cond:
2115   1178 FA FF FF      lea d, [bp + -1] ; $dirID
2116   117B 2A            mov b, [d]
2117   117C 38 00 00      mov c, 0
2118   117F             ; --- START RELATIONAL
2119   117F D7            push a
2120   1180 11            mov a, b
2121   1181 FD 2E FF FF   mov32 cb, $ffffffff
2121   1185 FF FF 
2122   1187 B0            cmp a, b
2123   1188 FD 72         sneq ; !=
2124   118A E4            pop a
2125   118B             ; --- END RELATIONAL
2126   118B C0 00 00      cmp b, 0
2127   118E C6 9A 11      je _if42_else
2128   1191             _if42_TRUE:
2129   1191             ; --- BEGIN INLINE ASM SEGMENT
2130   1191 E4            pop a
2131   1192 27            mov b, a
2132   1193 19 03         mov al, 3
2133   1195 05 04         syscall sys_filesystem
2134   1197             ; --- END INLINE ASM SEGMENT
2135   1197 0A 9B 11      jmp _if42_exit
2136   119A             _if42_else:
2137   119A             ; --- BEGIN INLINE ASM SEGMENT
2138   119A E4            pop a
2139   119B             ; --- END INLINE ASM SEGMENT
2140   119B             _if42_exit:
2141   119B F9            leave
2142   119C 09            ret
2143   119D             
2144   119D             print_cwd:
2145   119D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2146   11A0             ; --- BEGIN INLINE ASM SEGMENT
2147   11A0 19 12         mov al, 18
2148   11A2 05 04         syscall sys_filesystem        ; print current directory
2149   11A4             ; --- END INLINE ASM SEGMENT
2150   11A4 F9            leave
2151   11A5 09            ret
2152   11A6             
2153   11A6             spawn_new_proc:
2154   11A6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2155   11A9             ; --- BEGIN INLINE ASM SEGMENT
2156   11A9 FA 07 00      lea d, [bp + 7] ; $args
2157   11AC 2A            mov b, [d]
2158   11AD FA 05 00      lea d, [bp + 5] ; $executable_path
2159   11B0 FD 2A         mov d, [d]
out/shell.asm line 2160: Label not found: (sys_spawn_proc)
out/shell.asm line 2160: Unused data in MS byte of argument. (200)
2160   11B2 05 00         syscall sys_spawn_proc
2161   11B4             ; --- END INLINE ASM SEGMENT
2162   11B4 F9            leave
2163   11B5 09            ret
2164   11B6             
2165   11B6             command_shell:
2166   11B6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2167   11B9 F9            leave
2168   11BA 09            ret
2169   11BB             
2170   11BB             command_fg:
2171   11BB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2172   11BE F9            leave
2173   11BF 09            ret
2174   11C0             
2175   11C0             read_config:
2176   11C0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2177   11C3             ; transient_area = alloc(16385); 
2178   11C3 3B 83 38      mov d, _transient_area ; $transient_area
2179   11C6 DA            push d
2180   11C7             ; --- START FUNCTION CALL
2181   11C7 FD 2E 01 40   mov32 cb, $00004001
2181   11CB 00 00 
2182   11CD FD AB         swp b
2183   11CF D8            push b
2184   11D0 07 AF 12      call alloc
2185   11D3 51 02 00      add sp, 2
2186   11D6             ; --- END FUNCTION CALL
2187   11D6 E7            pop d
2188   11D7 FD 43         mov [d], b
2189   11D9             ; *value = '\0'; 
2190   11D9 FA 09 00      lea d, [bp + 9] ; $value
2191   11DC 2A            mov b, [d]
2192   11DD 38 00 00      mov c, 0
2193   11E0 D8            push b
2194   11E1 FD 2E 00 00   mov32 cb, $00000000
2194   11E5 00 00 
2195   11E7 E7            pop d
2196   11E8 FD 3E         mov [d], bl
2197   11EA             ; loadfile(filename, transient_area); 
2198   11EA             ; --- START FUNCTION CALL
2199   11EA 3B 83 38      mov d, _transient_area ; $transient_area
2200   11ED 2A            mov b, [d]
2201   11EE 38 00 00      mov c, 0
2202   11F1 FD AB         swp b
2203   11F3 D8            push b
2204   11F4 FA 05 00      lea d, [bp + 5] ; $filename
2205   11F7 2A            mov b, [d]
2206   11F8 38 00 00      mov c, 0
2207   11FB FD AB         swp b
2208   11FD D8            push b
2209   11FE 07 5A 13      call loadfile
2210   1201 51 04 00      add sp, 4
2211   1204             ; --- END FUNCTION CALL
2212   1204             ; prog = transient_area; 
2213   1204 3B DD 3E      mov d, _prog ; $prog
2214   1207 DA            push d
2215   1208 3B 83 38      mov d, _transient_area ; $transient_area
2216   120B 2A            mov b, [d]
2217   120C 38 00 00      mov c, 0
2218   120F E7            pop d
2219   1210 FD 43         mov [d], b
2220   1212             ; for(;;){ 
2221   1212             _for43_init:
2222   1212             _for43_cond:
2223   1212             _for43_block:
2224   1212             ; get(); 
2225   1212             ; --- START FUNCTION CALL
2226   1212 07 6D 13      call get
2227   1215             ; if(toktype == END) break; 
2228   1215             _if44_cond:
2229   1215 3B DB 3E      mov d, _toktype ; $toktype
2230   1218 2A            mov b, [d]
2231   1219 38 00 00      mov c, 0
2232   121C             ; --- START RELATIONAL
2233   121C D7            push a
2234   121D 11            mov a, b
2235   121E FD 2E 06 00   mov32 cb, $6 ; enum element: END
2235   1222 00 00 
2236   1224 B0            cmp a, b
2237   1225 FD 71         seq ; ==
2238   1227 E4            pop a
2239   1228             ; --- END RELATIONAL
2240   1228 C0 00 00      cmp b, 0
2241   122B C6 34 12      je _if44_exit
2242   122E             _if44_TRUE:
2243   122E             ; break; 
2244   122E 0A 9E 12      jmp _for43_exit ; for break
2245   1231 0A 34 12      jmp _if44_exit
2246   1234             _if44_exit:
2247   1234             ; if(!strcmp(entry_name, token)){ 
2248   1234             _if45_cond:
2249   1234             ; --- START FUNCTION CALL
2250   1234 3B DF 3E      mov d, _token_data ; $token
2251   1237 2D            mov b, d
2252   1238 38 00 00      mov c, 0
2253   123B FD AB         swp b
2254   123D D8            push b
2255   123E FA 07 00      lea d, [bp + 7] ; $entry_name
2256   1241 2A            mov b, [d]
2257   1242 38 00 00      mov c, 0
2258   1245 FD AB         swp b
2259   1247 D8            push b
2260   1248 07 97 31      call strcmp
2261   124B 51 04 00      add sp, 4
2262   124E             ; --- END FUNCTION CALL
2263   124E C0 00 00      cmp b, 0
2264   1251 C6 9B 12      je _if45_exit
2265   1254             _if45_TRUE:
2266   1254             ; get(); // get '=' 
2267   1254             ; --- START FUNCTION CALL
2268   1254 07 6D 13      call get
2269   1257             ; for(;;){ 
2270   1257             _for46_init:
2271   1257             _for46_cond:
2272   1257             _for46_block:
2273   1257             ; get(); 
2274   1257             ; --- START FUNCTION CALL
2275   1257 07 6D 13      call get
2276   125A             ; if(!strcmp(token, ";")) return; 
2277   125A             _if47_cond:
2278   125A             ; --- START FUNCTION CALL
2279   125A 26 53 41      mov b, _s14 ; ";"
2280   125D FD AB         swp b
2281   125F D8            push b
2282   1260 3B DF 3E      mov d, _token_data ; $token
2283   1263 2D            mov b, d
2284   1264 38 00 00      mov c, 0
2285   1267 FD AB         swp b
2286   1269 D8            push b
2287   126A 07 97 31      call strcmp
2288   126D 51 04 00      add sp, 4
2289   1270             ; --- END FUNCTION CALL
2290   1270 C0 00 00      cmp b, 0
2291   1273 C6 7B 12      je _if47_exit
2292   1276             _if47_TRUE:
2293   1276             ; return; 
2294   1276 F9            leave
2295   1277 09            ret
2296   1278 0A 7B 12      jmp _if47_exit
2297   127B             _if47_exit:
2298   127B             ; strcat(value, token); 
2299   127B             ; --- START FUNCTION CALL
2300   127B 3B DF 3E      mov d, _token_data ; $token
2301   127E 2D            mov b, d
2302   127F 38 00 00      mov c, 0
2303   1282 FD AB         swp b
2304   1284 D8            push b
2305   1285 FA 09 00      lea d, [bp + 9] ; $value
2306   1288 2A            mov b, [d]
2307   1289 38 00 00      mov c, 0
2308   128C FD AB         swp b
2309   128E D8            push b
2310   128F 07 1B 32      call strcat
2311   1292 51 04 00      add sp, 4
2312   1295             ; --- END FUNCTION CALL
2313   1295             _for46_update:
2314   1295 0A 57 12      jmp _for46_cond
2315   1298             _for46_exit:
2316   1298 0A 9B 12      jmp _if45_exit
2317   129B             _if45_exit:
2318   129B             _for43_update:
2319   129B 0A 12 12      jmp _for43_cond
2320   129E             _for43_exit:
2321   129E             ; free(16385); 
2322   129E             ; --- START FUNCTION CALL
2323   129E FD 2E 01 40   mov32 cb, $00004001
2323   12A2 00 00 
2324   12A4 FD AB         swp b
2325   12A6 D8            push b
2326   12A7 07 59 33      call free
2327   12AA 51 02 00      add sp, 2
2328   12AD             ; --- END FUNCTION CALL
2329   12AD F9            leave
2330   12AE 09            ret
2331   12AF             
2332   12AF             alloc:
2333   12AF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2334   12B2             ; heap_top = heap_top + bytes; 
2335   12B2 3B B3 41      mov d, _heap_top ; $heap_top
2336   12B5 DA            push d
2337   12B6 3B B3 41      mov d, _heap_top ; $heap_top
2338   12B9 2A            mov b, [d]
2339   12BA 38 00 00      mov c, 0
2340   12BD             ; --- START TERMS
2341   12BD D7            push a
2342   12BE 11            mov a, b
2343   12BF FA 05 00      lea d, [bp + 5] ; $bytes
2344   12C2 2A            mov b, [d]
2345   12C3 38 00 00      mov c, 0
2346   12C6 56            add b, a
2347   12C7 E4            pop a
2348   12C8             ; --- END TERMS
2349   12C8 E7            pop d
2350   12C9 FD 43         mov [d], b
2351   12CB             ; return heap_top - bytes; 
2352   12CB 3B B3 41      mov d, _heap_top ; $heap_top
2353   12CE 2A            mov b, [d]
2354   12CF 38 00 00      mov c, 0
2355   12D2             ; --- START TERMS
2356   12D2 D7            push a
2357   12D3 11            mov a, b
2358   12D4 FA 05 00      lea d, [bp + 5] ; $bytes
2359   12D7 2A            mov b, [d]
2360   12D8 38 00 00      mov c, 0
2361   12DB 60            sub a, b
2362   12DC 27            mov b, a
2363   12DD E4            pop a
2364   12DE             ; --- END TERMS
2365   12DE F9            leave
2366   12DF 09            ret
2367   12E0             
2368   12E0             strcpy:
2369   12E0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2370   12E3             ; char *psrc; 
2371   12E3 52 02 00      sub sp, 2
2372   12E6             ; char *pdest; 
2373   12E6 52 02 00      sub sp, 2
2374   12E9             ; psrc = src; 
2375   12E9 FA FF FF      lea d, [bp + -1] ; $psrc
2376   12EC DA            push d
2377   12ED FA 07 00      lea d, [bp + 7] ; $src
2378   12F0 2A            mov b, [d]
2379   12F1 38 00 00      mov c, 0
2380   12F4 E7            pop d
2381   12F5 FD 43         mov [d], b
2382   12F7             ; pdest = dest; 
2383   12F7 FA FD FF      lea d, [bp + -3] ; $pdest
2384   12FA DA            push d
2385   12FB FA 05 00      lea d, [bp + 5] ; $dest
2386   12FE 2A            mov b, [d]
2387   12FF 38 00 00      mov c, 0
2388   1302 E7            pop d
2389   1303 FD 43         mov [d], b
2390   1305             ; while(*psrc) *pdest++ = *psrc++; 
2391   1305             _while48_cond:
2392   1305 FA FF FF      lea d, [bp + -1] ; $psrc
2393   1308 2A            mov b, [d]
2394   1309 38 00 00      mov c, 0
2395   130C 74            mov d, b
2396   130D 32            mov bl, [d]
2397   130E A7 00         mov bh, 0
2398   1310 38 00 00      mov c, 0
2399   1313 C0 00 00      cmp b, 0
2400   1316 C6 47 13      je _while48_exit
2401   1319             _while48_block:
2402   1319             ; *pdest++ = *psrc++; 
2403   1319 FA FD FF      lea d, [bp + -3] ; $pdest
2404   131C 2A            mov b, [d]
2405   131D 38 00 00      mov c, 0
2406   1320 FD 77         inc b
2407   1322 FA FD FF      lea d, [bp + -3] ; $pdest
2408   1325 FD 43         mov [d], b
2409   1327 FD 7D         dec b
2410   1329 D8            push b
2411   132A FA FF FF      lea d, [bp + -1] ; $psrc
2412   132D 2A            mov b, [d]
2413   132E 38 00 00      mov c, 0
2414   1331 FD 77         inc b
2415   1333 FA FF FF      lea d, [bp + -1] ; $psrc
2416   1336 FD 43         mov [d], b
2417   1338 FD 7D         dec b
2418   133A 74            mov d, b
2419   133B 32            mov bl, [d]
2420   133C A7 00         mov bh, 0
2421   133E 38 00 00      mov c, 0
2422   1341 E7            pop d
2423   1342 FD 3E         mov [d], bl
2424   1344 0A 05 13      jmp _while48_cond
2425   1347             _while48_exit:
2426   1347             ; *pdest = '\0'; 
2427   1347 FA FD FF      lea d, [bp + -3] ; $pdest
2428   134A 2A            mov b, [d]
2429   134B 38 00 00      mov c, 0
2430   134E D8            push b
2431   134F FD 2E 00 00   mov32 cb, $00000000
2431   1353 00 00 
2432   1355 E7            pop d
2433   1356 FD 3E         mov [d], bl
2434   1358 F9            leave
2435   1359 09            ret
2436   135A             
2437   135A             loadfile:
2438   135A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2439   135D             ; --- BEGIN INLINE ASM SEGMENT
2440   135D FA 07 00      lea d, [bp + 7] ; $destination
2441   1360 15            mov a, [d]
2442   1361 4F            mov di, a
2443   1362 FA 05 00      lea d, [bp + 5] ; $filename
2444   1365 FD 2A         mov d, [d]
2445   1367 19 14         mov al, 20
2446   1369 05 04         syscall sys_filesystem
2447   136B             ; --- END INLINE ASM SEGMENT
2448   136B F9            leave
2449   136C 09            ret
2450   136D             
2451   136D             get:
2452   136D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2453   1370             ; char *t; 
2454   1370 52 02 00      sub sp, 2
2455   1373             ; *token = '\0'; 
2456   1373 3B DF 3E      mov d, _token_data ; $token
2457   1376 2D            mov b, d
2458   1377 38 00 00      mov c, 0
2459   137A D8            push b
2460   137B FD 2E 00 00   mov32 cb, $00000000
2460   137F 00 00 
2461   1381 E7            pop d
2462   1382 FD 3E         mov [d], bl
2463   1384             ; tok = 0; 
2464   1384 3B D9 3E      mov d, _tok ; $tok
2465   1387 DA            push d
2466   1388 FD 2E 00 00   mov32 cb, $00000000
2466   138C 00 00 
2467   138E E7            pop d
2468   138F FD 43         mov [d], b
2469   1391             ; toktype = 0; 
2470   1391 3B DB 3E      mov d, _toktype ; $toktype
2471   1394 DA            push d
2472   1395 FD 2E 00 00   mov32 cb, $00000000
2472   1399 00 00 
2473   139B E7            pop d
2474   139C FD 43         mov [d], b
2475   139E             ; t = token; 
2476   139E FA FF FF      lea d, [bp + -1] ; $t
2477   13A1 DA            push d
2478   13A2 3B DF 3E      mov d, _token_data ; $token
2479   13A5 2D            mov b, d
2480   13A6 38 00 00      mov c, 0
2481   13A9 E7            pop d
2482   13AA FD 43         mov [d], b
2483   13AC             ; while(is_space(*prog)) prog++; 
2484   13AC             _while49_cond:
2485   13AC             ; --- START FUNCTION CALL
2486   13AC 3B DD 3E      mov d, _prog ; $prog
2487   13AF 2A            mov b, [d]
2488   13B0 38 00 00      mov c, 0
2489   13B3 74            mov d, b
2490   13B4 32            mov bl, [d]
2491   13B5 A7 00         mov bh, 0
2492   13B7 38 00 00      mov c, 0
2493   13BA DD            push bl
2494   13BB 07 8B 24      call is_space
2495   13BE 51 01 00      add sp, 1
2496   13C1             ; --- END FUNCTION CALL
2497   13C1 C0 00 00      cmp b, 0
2498   13C4 C6 DA 13      je _while49_exit
2499   13C7             _while49_block:
2500   13C7             ; prog++; 
2501   13C7 3B DD 3E      mov d, _prog ; $prog
2502   13CA 2A            mov b, [d]
2503   13CB 38 00 00      mov c, 0
2504   13CE FD 77         inc b
2505   13D0 3B DD 3E      mov d, _prog ; $prog
2506   13D3 FD 43         mov [d], b
2507   13D5 FD 7D         dec b
2508   13D7 0A AC 13      jmp _while49_cond
2509   13DA             _while49_exit:
2510   13DA             ; if(*prog == '\0'){ 
2511   13DA             _if50_cond:
2512   13DA 3B DD 3E      mov d, _prog ; $prog
2513   13DD 2A            mov b, [d]
2514   13DE 38 00 00      mov c, 0
2515   13E1 74            mov d, b
2516   13E2 32            mov bl, [d]
2517   13E3 A7 00         mov bh, 0
2518   13E5 38 00 00      mov c, 0
2519   13E8             ; --- START RELATIONAL
2520   13E8 D7            push a
2521   13E9 11            mov a, b
2522   13EA FD 2E 00 00   mov32 cb, $00000000
2522   13EE 00 00 
2523   13F0 B0            cmp a, b
2524   13F1 FD 71         seq ; ==
2525   13F3 E4            pop a
2526   13F4             ; --- END RELATIONAL
2527   13F4 C0 00 00      cmp b, 0
2528   13F7 C6 0C 14      je _if50_exit
2529   13FA             _if50_TRUE:
2530   13FA             ; toktype = END; 
2531   13FA 3B DB 3E      mov d, _toktype ; $toktype
2532   13FD DA            push d
2533   13FE FD 2E 06 00   mov32 cb, $6 ; enum element: END
2533   1402 00 00 
2534   1404 E7            pop d
2535   1405 FD 43         mov [d], b
2536   1407             ; return; 
2537   1407 F9            leave
2538   1408 09            ret
2539   1409 0A 0C 14      jmp _if50_exit
2540   140C             _if50_exit:
2541   140C             ; if(is_digit(*prog)){ 
2542   140C             _if51_cond:
2543   140C             ; --- START FUNCTION CALL
2544   140C 3B DD 3E      mov d, _prog ; $prog
2545   140F 2A            mov b, [d]
2546   1410 38 00 00      mov c, 0
2547   1413 74            mov d, b
2548   1414 32            mov bl, [d]
2549   1415 A7 00         mov bh, 0
2550   1417 38 00 00      mov c, 0
2551   141A DD            push bl
2552   141B 07 EF 24      call is_digit
2553   141E 51 01 00      add sp, 1
2554   1421             ; --- END FUNCTION CALL
2555   1421 C0 00 00      cmp b, 0
2556   1424 C6 93 14      je _if51_else
2557   1427             _if51_TRUE:
2558   1427             ; while(is_digit(*prog)){ 
2559   1427             _while52_cond:
2560   1427             ; --- START FUNCTION CALL
2561   1427 3B DD 3E      mov d, _prog ; $prog
2562   142A 2A            mov b, [d]
2563   142B 38 00 00      mov c, 0
2564   142E 74            mov d, b
2565   142F 32            mov bl, [d]
2566   1430 A7 00         mov bh, 0
2567   1432 38 00 00      mov c, 0
2568   1435 DD            push bl
2569   1436 07 EF 24      call is_digit
2570   1439 51 01 00      add sp, 1
2571   143C             ; --- END FUNCTION CALL
2572   143C C0 00 00      cmp b, 0
2573   143F C6 70 14      je _while52_exit
2574   1442             _while52_block:
2575   1442             ; *t++ = *prog++; 
2576   1442 FA FF FF      lea d, [bp + -1] ; $t
2577   1445 2A            mov b, [d]
2578   1446 38 00 00      mov c, 0
2579   1449 FD 77         inc b
2580   144B FA FF FF      lea d, [bp + -1] ; $t
2581   144E FD 43         mov [d], b
2582   1450 FD 7D         dec b
2583   1452 D8            push b
2584   1453 3B DD 3E      mov d, _prog ; $prog
2585   1456 2A            mov b, [d]
2586   1457 38 00 00      mov c, 0
2587   145A FD 77         inc b
2588   145C 3B DD 3E      mov d, _prog ; $prog
2589   145F FD 43         mov [d], b
2590   1461 FD 7D         dec b
2591   1463 74            mov d, b
2592   1464 32            mov bl, [d]
2593   1465 A7 00         mov bh, 0
2594   1467 38 00 00      mov c, 0
2595   146A E7            pop d
2596   146B FD 3E         mov [d], bl
2597   146D 0A 27 14      jmp _while52_cond
2598   1470             _while52_exit:
2599   1470             ; *t = '\0'; 
2600   1470 FA FF FF      lea d, [bp + -1] ; $t
2601   1473 2A            mov b, [d]
2602   1474 38 00 00      mov c, 0
2603   1477 D8            push b
2604   1478 FD 2E 00 00   mov32 cb, $00000000
2604   147C 00 00 
2605   147E E7            pop d
2606   147F FD 3E         mov [d], bl
2607   1481             ; toktype = INTEGER_CONST; 
2608   1481 3B DB 3E      mov d, _toktype ; $toktype
2609   1484 DA            push d
2610   1485 FD 2E 04 00   mov32 cb, $4 ; enum element: INTEGER_CONST
2610   1489 00 00 
2611   148B E7            pop d
2612   148C FD 43         mov [d], b
2613   148E             ; return; // return to avoid *t = '\0' line at the end of function 
2614   148E F9            leave
2615   148F 09            ret
2616   1490 0A 78 24      jmp _if51_exit
2617   1493             _if51_else:
2618   1493             ; if(is_alpha(*prog)){ 
2619   1493             _if53_cond:
2620   1493             ; --- START FUNCTION CALL
2621   1493 3B DD 3E      mov d, _prog ; $prog
2622   1496 2A            mov b, [d]
2623   1497 38 00 00      mov c, 0
2624   149A 74            mov d, b
2625   149B 32            mov bl, [d]
2626   149C A7 00         mov bh, 0
2627   149E 38 00 00      mov c, 0
2628   14A1 DD            push bl
2629   14A2 07 23 25      call is_alpha
2630   14A5 51 01 00      add sp, 1
2631   14A8             ; --- END FUNCTION CALL
2632   14A8 C0 00 00      cmp b, 0
2633   14AB C6 32 15      je _if53_else
2634   14AE             _if53_TRUE:
2635   14AE             ; while(is_alpha(*prog) || is_digit(*prog)){ 
2636   14AE             _while54_cond:
2637   14AE             ; --- START FUNCTION CALL
2638   14AE 3B DD 3E      mov d, _prog ; $prog
2639   14B1 2A            mov b, [d]
2640   14B2 38 00 00      mov c, 0
2641   14B5 74            mov d, b
2642   14B6 32            mov bl, [d]
2643   14B7 A7 00         mov bh, 0
2644   14B9 38 00 00      mov c, 0
2645   14BC DD            push bl
2646   14BD 07 23 25      call is_alpha
2647   14C0 51 01 00      add sp, 1
2648   14C3             ; --- END FUNCTION CALL
2649   14C3             ; --- START LOGICAL OR
2650   14C3 D7            push a
2651   14C4 11            mov a, b
2652   14C5             ; --- START FUNCTION CALL
2653   14C5 3B DD 3E      mov d, _prog ; $prog
2654   14C8 2A            mov b, [d]
2655   14C9 38 00 00      mov c, 0
2656   14CC 74            mov d, b
2657   14CD 32            mov bl, [d]
2658   14CE A7 00         mov bh, 0
2659   14D0 38 00 00      mov c, 0
2660   14D3 DD            push bl
2661   14D4 07 EF 24      call is_digit
2662   14D7 51 01 00      add sp, 1
2663   14DA             ; --- END FUNCTION CALL
2664   14DA FD A8         sor a, b ; ||
2665   14DC E4            pop a
2666   14DD             ; --- END LOGICAL OR
2667   14DD C0 00 00      cmp b, 0
2668   14E0 C6 11 15      je _while54_exit
2669   14E3             _while54_block:
2670   14E3             ; *t++ = *prog++; 
2671   14E3 FA FF FF      lea d, [bp + -1] ; $t
2672   14E6 2A            mov b, [d]
2673   14E7 38 00 00      mov c, 0
2674   14EA FD 77         inc b
2675   14EC FA FF FF      lea d, [bp + -1] ; $t
2676   14EF FD 43         mov [d], b
2677   14F1 FD 7D         dec b
2678   14F3 D8            push b
2679   14F4 3B DD 3E      mov d, _prog ; $prog
2680   14F7 2A            mov b, [d]
2681   14F8 38 00 00      mov c, 0
2682   14FB FD 77         inc b
2683   14FD 3B DD 3E      mov d, _prog ; $prog
2684   1500 FD 43         mov [d], b
2685   1502 FD 7D         dec b
2686   1504 74            mov d, b
2687   1505 32            mov bl, [d]
2688   1506 A7 00         mov bh, 0
2689   1508 38 00 00      mov c, 0
2690   150B E7            pop d
2691   150C FD 3E         mov [d], bl
2692   150E 0A AE 14      jmp _while54_cond
2693   1511             _while54_exit:
2694   1511             ; *t = '\0'; 
2695   1511 FA FF FF      lea d, [bp + -1] ; $t
2696   1514 2A            mov b, [d]
2697   1515 38 00 00      mov c, 0
2698   1518 D8            push b
2699   1519 FD 2E 00 00   mov32 cb, $00000000
2699   151D 00 00 
2700   151F E7            pop d
2701   1520 FD 3E         mov [d], bl
2702   1522             ; toktype = IDENTIFIER; 
2703   1522 3B DB 3E      mov d, _toktype ; $toktype
2704   1525 DA            push d
2705   1526 FD 2E 05 00   mov32 cb, $5 ; enum element: IDENTIFIER
2705   152A 00 00 
2706   152C E7            pop d
2707   152D FD 43         mov [d], b
2708   152F 0A 78 24      jmp _if53_exit
2709   1532             _if53_else:
2710   1532             ; if(*prog == '\"'){ 
2711   1532             _if55_cond:
2712   1532 3B DD 3E      mov d, _prog ; $prog
2713   1535 2A            mov b, [d]
2714   1536 38 00 00      mov c, 0
2715   1539 74            mov d, b
2716   153A 32            mov bl, [d]
2717   153B A7 00         mov bh, 0
2718   153D 38 00 00      mov c, 0
2719   1540             ; --- START RELATIONAL
2720   1540 D7            push a
2721   1541 11            mov a, b
2722   1542 FD 2E 22 00   mov32 cb, $00000022
2722   1546 00 00 
2723   1548 B0            cmp a, b
2724   1549 FD 71         seq ; ==
2725   154B E4            pop a
2726   154C             ; --- END RELATIONAL
2727   154C C0 00 00      cmp b, 0
2728   154F C6 5A 16      je _if55_else
2729   1552             _if55_TRUE:
2730   1552             ; *t++ = '\"'; 
2731   1552 FA FF FF      lea d, [bp + -1] ; $t
2732   1555 2A            mov b, [d]
2733   1556 38 00 00      mov c, 0
2734   1559 FD 77         inc b
2735   155B FA FF FF      lea d, [bp + -1] ; $t
2736   155E FD 43         mov [d], b
2737   1560 FD 7D         dec b
2738   1562 D8            push b
2739   1563 FD 2E 22 00   mov32 cb, $00000022
2739   1567 00 00 
2740   1569 E7            pop d
2741   156A FD 3E         mov [d], bl
2742   156C             ; prog++; 
2743   156C 3B DD 3E      mov d, _prog ; $prog
2744   156F 2A            mov b, [d]
2745   1570 38 00 00      mov c, 0
2746   1573 FD 77         inc b
2747   1575 3B DD 3E      mov d, _prog ; $prog
2748   1578 FD 43         mov [d], b
2749   157A FD 7D         dec b
2750   157C             ; while(*prog != '\"' && *prog){ 
2751   157C             _while56_cond:
2752   157C 3B DD 3E      mov d, _prog ; $prog
2753   157F 2A            mov b, [d]
2754   1580 38 00 00      mov c, 0
2755   1583 74            mov d, b
2756   1584 32            mov bl, [d]
2757   1585 A7 00         mov bh, 0
2758   1587 38 00 00      mov c, 0
2759   158A             ; --- START RELATIONAL
2760   158A D7            push a
2761   158B 11            mov a, b
2762   158C FD 2E 22 00   mov32 cb, $00000022
2762   1590 00 00 
2763   1592 B0            cmp a, b
2764   1593 FD 72         sneq ; !=
2765   1595 E4            pop a
2766   1596             ; --- END RELATIONAL
2767   1596             ; --- START LOGICAL AND
2768   1596 D7            push a
2769   1597 11            mov a, b
2770   1598 3B DD 3E      mov d, _prog ; $prog
2771   159B 2A            mov b, [d]
2772   159C 38 00 00      mov c, 0
2773   159F 74            mov d, b
2774   15A0 32            mov bl, [d]
2775   15A1 A7 00         mov bh, 0
2776   15A3 38 00 00      mov c, 0
2777   15A6 FD A7         sand a, b
2778   15A8 E4            pop a
2779   15A9             ; --- END LOGICAL AND
2780   15A9 C0 00 00      cmp b, 0
2781   15AC C6 DD 15      je _while56_exit
2782   15AF             _while56_block:
2783   15AF             ; *t++ = *prog++; 
2784   15AF FA FF FF      lea d, [bp + -1] ; $t
2785   15B2 2A            mov b, [d]
2786   15B3 38 00 00      mov c, 0
2787   15B6 FD 77         inc b
2788   15B8 FA FF FF      lea d, [bp + -1] ; $t
2789   15BB FD 43         mov [d], b
2790   15BD FD 7D         dec b
2791   15BF D8            push b
2792   15C0 3B DD 3E      mov d, _prog ; $prog
2793   15C3 2A            mov b, [d]
2794   15C4 38 00 00      mov c, 0
2795   15C7 FD 77         inc b
2796   15C9 3B DD 3E      mov d, _prog ; $prog
2797   15CC FD 43         mov [d], b
2798   15CE FD 7D         dec b
2799   15D0 74            mov d, b
2800   15D1 32            mov bl, [d]
2801   15D2 A7 00         mov bh, 0
2802   15D4 38 00 00      mov c, 0
2803   15D7 E7            pop d
2804   15D8 FD 3E         mov [d], bl
2805   15DA 0A 7C 15      jmp _while56_cond
2806   15DD             _while56_exit:
2807   15DD             ; if(*prog != '\"') error("Double quotes expected"); 
2808   15DD             _if57_cond:
2809   15DD 3B DD 3E      mov d, _prog ; $prog
2810   15E0 2A            mov b, [d]
2811   15E1 38 00 00      mov c, 0
2812   15E4 74            mov d, b
2813   15E5 32            mov bl, [d]
2814   15E6 A7 00         mov bh, 0
2815   15E8 38 00 00      mov c, 0
2816   15EB             ; --- START RELATIONAL
2817   15EB D7            push a
2818   15EC 11            mov a, b
2819   15ED FD 2E 22 00   mov32 cb, $00000022
2819   15F1 00 00 
2820   15F3 B0            cmp a, b
2821   15F4 FD 72         sneq ; !=
2822   15F6 E4            pop a
2823   15F7             ; --- END RELATIONAL
2824   15F7 C0 00 00      cmp b, 0
2825   15FA C6 0C 16      je _if57_exit
2826   15FD             _if57_TRUE:
2827   15FD             ; error("Double quotes expected"); 
2828   15FD             ; --- START FUNCTION CALL
2829   15FD 26 55 41      mov b, _s15 ; "Double quotes expected"
2830   1600 FD AB         swp b
2831   1602 D8            push b
2832   1603 07 A3 25      call error
2833   1606 51 02 00      add sp, 2
2834   1609             ; --- END FUNCTION CALL
2835   1609 0A 0C 16      jmp _if57_exit
2836   160C             _if57_exit:
2837   160C             ; *t++ = '\"'; 
2838   160C FA FF FF      lea d, [bp + -1] ; $t
2839   160F 2A            mov b, [d]
2840   1610 38 00 00      mov c, 0
2841   1613 FD 77         inc b
2842   1615 FA FF FF      lea d, [bp + -1] ; $t
2843   1618 FD 43         mov [d], b
2844   161A FD 7D         dec b
2845   161C D8            push b
2846   161D FD 2E 22 00   mov32 cb, $00000022
2846   1621 00 00 
2847   1623 E7            pop d
2848   1624 FD 3E         mov [d], bl
2849   1626             ; prog++; 
2850   1626 3B DD 3E      mov d, _prog ; $prog
2851   1629 2A            mov b, [d]
2852   162A 38 00 00      mov c, 0
2853   162D FD 77         inc b
2854   162F 3B DD 3E      mov d, _prog ; $prog
2855   1632 FD 43         mov [d], b
2856   1634 FD 7D         dec b
2857   1636             ; toktype = STRING_CONST; 
2858   1636 3B DB 3E      mov d, _toktype ; $toktype
2859   1639 DA            push d
2860   163A FD 2E 03 00   mov32 cb, $3 ; enum element: STRING_CONST
2860   163E 00 00 
2861   1640 E7            pop d
2862   1641 FD 43         mov [d], b
2863   1643             ; *t = '\0'; 
2864   1643 FA FF FF      lea d, [bp + -1] ; $t
2865   1646 2A            mov b, [d]
2866   1647 38 00 00      mov c, 0
2867   164A D8            push b
2868   164B FD 2E 00 00   mov32 cb, $00000000
2868   164F 00 00 
2869   1651 E7            pop d
2870   1652 FD 3E         mov [d], bl
2871   1654             ; convert_constant(); // converts this string token qith quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
2872   1654             ; --- START FUNCTION CALL
2873   1654 07 CD 2E      call convert_constant
2874   1657 0A 78 24      jmp _if55_exit
2875   165A             _if55_else:
2876   165A             ; if(*prog == '#'){ 
2877   165A             _if58_cond:
2878   165A 3B DD 3E      mov d, _prog ; $prog
2879   165D 2A            mov b, [d]
2880   165E 38 00 00      mov c, 0
2881   1661 74            mov d, b
2882   1662 32            mov bl, [d]
2883   1663 A7 00         mov bh, 0
2884   1665 38 00 00      mov c, 0
2885   1668             ; --- START RELATIONAL
2886   1668 D7            push a
2887   1669 11            mov a, b
2888   166A FD 2E 23 00   mov32 cb, $00000023
2888   166E 00 00 
2889   1670 B0            cmp a, b
2890   1671 FD 71         seq ; ==
2891   1673 E4            pop a
2892   1674             ; --- END RELATIONAL
2893   1674 C0 00 00      cmp b, 0
2894   1677 C6 C2 16      je _if58_else
2895   167A             _if58_TRUE:
2896   167A             ; *t++ = *prog++; 
2897   167A FA FF FF      lea d, [bp + -1] ; $t
2898   167D 2A            mov b, [d]
2899   167E 38 00 00      mov c, 0
2900   1681 FD 77         inc b
2901   1683 FA FF FF      lea d, [bp + -1] ; $t
2902   1686 FD 43         mov [d], b
2903   1688 FD 7D         dec b
2904   168A D8            push b
2905   168B 3B DD 3E      mov d, _prog ; $prog
2906   168E 2A            mov b, [d]
2907   168F 38 00 00      mov c, 0
2908   1692 FD 77         inc b
2909   1694 3B DD 3E      mov d, _prog ; $prog
2910   1697 FD 43         mov [d], b
2911   1699 FD 7D         dec b
2912   169B 74            mov d, b
2913   169C 32            mov bl, [d]
2914   169D A7 00         mov bh, 0
2915   169F 38 00 00      mov c, 0
2916   16A2 E7            pop d
2917   16A3 FD 3E         mov [d], bl
2918   16A5             ; tok = HASH; 
2919   16A5 3B D9 3E      mov d, _tok ; $tok
2920   16A8 DA            push d
2921   16A9 FD 2E 15 00   mov32 cb, $15 ; enum element: HASH
2921   16AD 00 00 
2922   16AF E7            pop d
2923   16B0 FD 43         mov [d], b
2924   16B2             ; toktype = DELIMITER;   
2925   16B2 3B DB 3E      mov d, _toktype ; $toktype
2926   16B5 DA            push d
2927   16B6 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
2927   16BA 00 00 
2928   16BC E7            pop d
2929   16BD FD 43         mov [d], b
2930   16BF 0A 78 24      jmp _if58_exit
2931   16C2             _if58_else:
2932   16C2             ; if(*prog == '{'){ 
2933   16C2             _if59_cond:
2934   16C2 3B DD 3E      mov d, _prog ; $prog
2935   16C5 2A            mov b, [d]
2936   16C6 38 00 00      mov c, 0
2937   16C9 74            mov d, b
2938   16CA 32            mov bl, [d]
2939   16CB A7 00         mov bh, 0
2940   16CD 38 00 00      mov c, 0
2941   16D0             ; --- START RELATIONAL
2942   16D0 D7            push a
2943   16D1 11            mov a, b
2944   16D2 FD 2E 7B 00   mov32 cb, $0000007b
2944   16D6 00 00 
2945   16D8 B0            cmp a, b
2946   16D9 FD 71         seq ; ==
2947   16DB E4            pop a
2948   16DC             ; --- END RELATIONAL
2949   16DC C0 00 00      cmp b, 0
2950   16DF C6 2A 17      je _if59_else
2951   16E2             _if59_TRUE:
2952   16E2             ; *t++ = *prog++; 
2953   16E2 FA FF FF      lea d, [bp + -1] ; $t
2954   16E5 2A            mov b, [d]
2955   16E6 38 00 00      mov c, 0
2956   16E9 FD 77         inc b
2957   16EB FA FF FF      lea d, [bp + -1] ; $t
2958   16EE FD 43         mov [d], b
2959   16F0 FD 7D         dec b
2960   16F2 D8            push b
2961   16F3 3B DD 3E      mov d, _prog ; $prog
2962   16F6 2A            mov b, [d]
2963   16F7 38 00 00      mov c, 0
2964   16FA FD 77         inc b
2965   16FC 3B DD 3E      mov d, _prog ; $prog
2966   16FF FD 43         mov [d], b
2967   1701 FD 7D         dec b
2968   1703 74            mov d, b
2969   1704 32            mov bl, [d]
2970   1705 A7 00         mov bh, 0
2971   1707 38 00 00      mov c, 0
2972   170A E7            pop d
2973   170B FD 3E         mov [d], bl
2974   170D             ; tok = OPENING_BRACE; 
2975   170D 3B D9 3E      mov d, _tok ; $tok
2976   1710 DA            push d
2977   1711 FD 2E 1E 00   mov32 cb, $1e ; enum element: OPENING_BRACE
2977   1715 00 00 
2978   1717 E7            pop d
2979   1718 FD 43         mov [d], b
2980   171A             ; toktype = DELIMITER;   
2981   171A 3B DB 3E      mov d, _toktype ; $toktype
2982   171D DA            push d
2983   171E FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
2983   1722 00 00 
2984   1724 E7            pop d
2985   1725 FD 43         mov [d], b
2986   1727 0A 78 24      jmp _if59_exit
2987   172A             _if59_else:
2988   172A             ; if(*prog == '}'){ 
2989   172A             _if60_cond:
2990   172A 3B DD 3E      mov d, _prog ; $prog
2991   172D 2A            mov b, [d]
2992   172E 38 00 00      mov c, 0
2993   1731 74            mov d, b
2994   1732 32            mov bl, [d]
2995   1733 A7 00         mov bh, 0
2996   1735 38 00 00      mov c, 0
2997   1738             ; --- START RELATIONAL
2998   1738 D7            push a
2999   1739 11            mov a, b
3000   173A FD 2E 7D 00   mov32 cb, $0000007d
3000   173E 00 00 
3001   1740 B0            cmp a, b
3002   1741 FD 71         seq ; ==
3003   1743 E4            pop a
3004   1744             ; --- END RELATIONAL
3005   1744 C0 00 00      cmp b, 0
3006   1747 C6 92 17      je _if60_else
3007   174A             _if60_TRUE:
3008   174A             ; *t++ = *prog++; 
3009   174A FA FF FF      lea d, [bp + -1] ; $t
3010   174D 2A            mov b, [d]
3011   174E 38 00 00      mov c, 0
3012   1751 FD 77         inc b
3013   1753 FA FF FF      lea d, [bp + -1] ; $t
3014   1756 FD 43         mov [d], b
3015   1758 FD 7D         dec b
3016   175A D8            push b
3017   175B 3B DD 3E      mov d, _prog ; $prog
3018   175E 2A            mov b, [d]
3019   175F 38 00 00      mov c, 0
3020   1762 FD 77         inc b
3021   1764 3B DD 3E      mov d, _prog ; $prog
3022   1767 FD 43         mov [d], b
3023   1769 FD 7D         dec b
3024   176B 74            mov d, b
3025   176C 32            mov bl, [d]
3026   176D A7 00         mov bh, 0
3027   176F 38 00 00      mov c, 0
3028   1772 E7            pop d
3029   1773 FD 3E         mov [d], bl
3030   1775             ; tok = CLOSING_BRACE; 
3031   1775 3B D9 3E      mov d, _tok ; $tok
3032   1778 DA            push d
3033   1779 FD 2E 1F 00   mov32 cb, $1f ; enum element: CLOSING_BRACE
3033   177D 00 00 
3034   177F E7            pop d
3035   1780 FD 43         mov [d], b
3036   1782             ; toktype = DELIMITER;   
3037   1782 3B DB 3E      mov d, _toktype ; $toktype
3038   1785 DA            push d
3039   1786 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3039   178A 00 00 
3040   178C E7            pop d
3041   178D FD 43         mov [d], b
3042   178F 0A 78 24      jmp _if60_exit
3043   1792             _if60_else:
3044   1792             ; if(*prog == '['){ 
3045   1792             _if61_cond:
3046   1792 3B DD 3E      mov d, _prog ; $prog
3047   1795 2A            mov b, [d]
3048   1796 38 00 00      mov c, 0
3049   1799 74            mov d, b
3050   179A 32            mov bl, [d]
3051   179B A7 00         mov bh, 0
3052   179D 38 00 00      mov c, 0
3053   17A0             ; --- START RELATIONAL
3054   17A0 D7            push a
3055   17A1 11            mov a, b
3056   17A2 FD 2E 5B 00   mov32 cb, $0000005b
3056   17A6 00 00 
3057   17A8 B0            cmp a, b
3058   17A9 FD 71         seq ; ==
3059   17AB E4            pop a
3060   17AC             ; --- END RELATIONAL
3061   17AC C0 00 00      cmp b, 0
3062   17AF C6 FA 17      je _if61_else
3063   17B2             _if61_TRUE:
3064   17B2             ; *t++ = *prog++; 
3065   17B2 FA FF FF      lea d, [bp + -1] ; $t
3066   17B5 2A            mov b, [d]
3067   17B6 38 00 00      mov c, 0
3068   17B9 FD 77         inc b
3069   17BB FA FF FF      lea d, [bp + -1] ; $t
3070   17BE FD 43         mov [d], b
3071   17C0 FD 7D         dec b
3072   17C2 D8            push b
3073   17C3 3B DD 3E      mov d, _prog ; $prog
3074   17C6 2A            mov b, [d]
3075   17C7 38 00 00      mov c, 0
3076   17CA FD 77         inc b
3077   17CC 3B DD 3E      mov d, _prog ; $prog
3078   17CF FD 43         mov [d], b
3079   17D1 FD 7D         dec b
3080   17D3 74            mov d, b
3081   17D4 32            mov bl, [d]
3082   17D5 A7 00         mov bh, 0
3083   17D7 38 00 00      mov c, 0
3084   17DA E7            pop d
3085   17DB FD 3E         mov [d], bl
3086   17DD             ; tok = OPENING_BRACKET; 
3087   17DD 3B D9 3E      mov d, _tok ; $tok
3088   17E0 DA            push d
3089   17E1 FD 2E 20 00   mov32 cb, $20 ; enum element: OPENING_BRACKET
3089   17E5 00 00 
3090   17E7 E7            pop d
3091   17E8 FD 43         mov [d], b
3092   17EA             ; toktype = DELIMITER;   
3093   17EA 3B DB 3E      mov d, _toktype ; $toktype
3094   17ED DA            push d
3095   17EE FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3095   17F2 00 00 
3096   17F4 E7            pop d
3097   17F5 FD 43         mov [d], b
3098   17F7 0A 78 24      jmp _if61_exit
3099   17FA             _if61_else:
3100   17FA             ; if(*prog == ']'){ 
3101   17FA             _if62_cond:
3102   17FA 3B DD 3E      mov d, _prog ; $prog
3103   17FD 2A            mov b, [d]
3104   17FE 38 00 00      mov c, 0
3105   1801 74            mov d, b
3106   1802 32            mov bl, [d]
3107   1803 A7 00         mov bh, 0
3108   1805 38 00 00      mov c, 0
3109   1808             ; --- START RELATIONAL
3110   1808 D7            push a
3111   1809 11            mov a, b
3112   180A FD 2E 5D 00   mov32 cb, $0000005d
3112   180E 00 00 
3113   1810 B0            cmp a, b
3114   1811 FD 71         seq ; ==
3115   1813 E4            pop a
3116   1814             ; --- END RELATIONAL
3117   1814 C0 00 00      cmp b, 0
3118   1817 C6 62 18      je _if62_else
3119   181A             _if62_TRUE:
3120   181A             ; *t++ = *prog++; 
3121   181A FA FF FF      lea d, [bp + -1] ; $t
3122   181D 2A            mov b, [d]
3123   181E 38 00 00      mov c, 0
3124   1821 FD 77         inc b
3125   1823 FA FF FF      lea d, [bp + -1] ; $t
3126   1826 FD 43         mov [d], b
3127   1828 FD 7D         dec b
3128   182A D8            push b
3129   182B 3B DD 3E      mov d, _prog ; $prog
3130   182E 2A            mov b, [d]
3131   182F 38 00 00      mov c, 0
3132   1832 FD 77         inc b
3133   1834 3B DD 3E      mov d, _prog ; $prog
3134   1837 FD 43         mov [d], b
3135   1839 FD 7D         dec b
3136   183B 74            mov d, b
3137   183C 32            mov bl, [d]
3138   183D A7 00         mov bh, 0
3139   183F 38 00 00      mov c, 0
3140   1842 E7            pop d
3141   1843 FD 3E         mov [d], bl
3142   1845             ; tok = CLOSING_BRACKET; 
3143   1845 3B D9 3E      mov d, _tok ; $tok
3144   1848 DA            push d
3145   1849 FD 2E 21 00   mov32 cb, $21 ; enum element: CLOSING_BRACKET
3145   184D 00 00 
3146   184F E7            pop d
3147   1850 FD 43         mov [d], b
3148   1852             ; toktype = DELIMITER;   
3149   1852 3B DB 3E      mov d, _toktype ; $toktype
3150   1855 DA            push d
3151   1856 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3151   185A 00 00 
3152   185C E7            pop d
3153   185D FD 43         mov [d], b
3154   185F 0A 78 24      jmp _if62_exit
3155   1862             _if62_else:
3156   1862             ; if(*prog == '='){ 
3157   1862             _if63_cond:
3158   1862 3B DD 3E      mov d, _prog ; $prog
3159   1865 2A            mov b, [d]
3160   1866 38 00 00      mov c, 0
3161   1869 74            mov d, b
3162   186A 32            mov bl, [d]
3163   186B A7 00         mov bh, 0
3164   186D 38 00 00      mov c, 0
3165   1870             ; --- START RELATIONAL
3166   1870 D7            push a
3167   1871 11            mov a, b
3168   1872 FD 2E 3D 00   mov32 cb, $0000003d
3168   1876 00 00 
3169   1878 B0            cmp a, b
3170   1879 FD 71         seq ; ==
3171   187B E4            pop a
3172   187C             ; --- END RELATIONAL
3173   187C C0 00 00      cmp b, 0
3174   187F C6 25 19      je _if63_else
3175   1882             _if63_TRUE:
3176   1882             ; *t++ = *prog++; 
3177   1882 FA FF FF      lea d, [bp + -1] ; $t
3178   1885 2A            mov b, [d]
3179   1886 38 00 00      mov c, 0
3180   1889 FD 77         inc b
3181   188B FA FF FF      lea d, [bp + -1] ; $t
3182   188E FD 43         mov [d], b
3183   1890 FD 7D         dec b
3184   1892 D8            push b
3185   1893 3B DD 3E      mov d, _prog ; $prog
3186   1896 2A            mov b, [d]
3187   1897 38 00 00      mov c, 0
3188   189A FD 77         inc b
3189   189C 3B DD 3E      mov d, _prog ; $prog
3190   189F FD 43         mov [d], b
3191   18A1 FD 7D         dec b
3192   18A3 74            mov d, b
3193   18A4 32            mov bl, [d]
3194   18A5 A7 00         mov bh, 0
3195   18A7 38 00 00      mov c, 0
3196   18AA E7            pop d
3197   18AB FD 3E         mov [d], bl
3198   18AD             ; if (*prog == '='){ 
3199   18AD             _if64_cond:
3200   18AD 3B DD 3E      mov d, _prog ; $prog
3201   18B0 2A            mov b, [d]
3202   18B1 38 00 00      mov c, 0
3203   18B4 74            mov d, b
3204   18B5 32            mov bl, [d]
3205   18B6 A7 00         mov bh, 0
3206   18B8 38 00 00      mov c, 0
3207   18BB             ; --- START RELATIONAL
3208   18BB D7            push a
3209   18BC 11            mov a, b
3210   18BD FD 2E 3D 00   mov32 cb, $0000003d
3210   18C1 00 00 
3211   18C3 B0            cmp a, b
3212   18C4 FD 71         seq ; ==
3213   18C6 E4            pop a
3214   18C7             ; --- END RELATIONAL
3215   18C7 C0 00 00      cmp b, 0
3216   18CA C6 08 19      je _if64_else
3217   18CD             _if64_TRUE:
3218   18CD             ; *t++ = *prog++; 
3219   18CD FA FF FF      lea d, [bp + -1] ; $t
3220   18D0 2A            mov b, [d]
3221   18D1 38 00 00      mov c, 0
3222   18D4 FD 77         inc b
3223   18D6 FA FF FF      lea d, [bp + -1] ; $t
3224   18D9 FD 43         mov [d], b
3225   18DB FD 7D         dec b
3226   18DD D8            push b
3227   18DE 3B DD 3E      mov d, _prog ; $prog
3228   18E1 2A            mov b, [d]
3229   18E2 38 00 00      mov c, 0
3230   18E5 FD 77         inc b
3231   18E7 3B DD 3E      mov d, _prog ; $prog
3232   18EA FD 43         mov [d], b
3233   18EC FD 7D         dec b
3234   18EE 74            mov d, b
3235   18EF 32            mov bl, [d]
3236   18F0 A7 00         mov bh, 0
3237   18F2 38 00 00      mov c, 0
3238   18F5 E7            pop d
3239   18F6 FD 3E         mov [d], bl
3240   18F8             ; tok = EQUAL; 
3241   18F8 3B D9 3E      mov d, _tok ; $tok
3242   18FB DA            push d
3243   18FC FD 2E 08 00   mov32 cb, $8 ; enum element: EQUAL
3243   1900 00 00 
3244   1902 E7            pop d
3245   1903 FD 43         mov [d], b
3246   1905 0A 15 19      jmp _if64_exit
3247   1908             _if64_else:
3248   1908             ; tok = ASSIGNMENT; 
3249   1908 3B D9 3E      mov d, _tok ; $tok
3250   190B DA            push d
3251   190C FD 2E 11 00   mov32 cb, $11 ; enum element: ASSIGNMENT
3251   1910 00 00 
3252   1912 E7            pop d
3253   1913 FD 43         mov [d], b
3254   1915             _if64_exit:
3255   1915             ; toktype = DELIMITER;   
3256   1915 3B DB 3E      mov d, _toktype ; $toktype
3257   1918 DA            push d
3258   1919 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3258   191D 00 00 
3259   191F E7            pop d
3260   1920 FD 43         mov [d], b
3261   1922 0A 78 24      jmp _if63_exit
3262   1925             _if63_else:
3263   1925             ; if(*prog == '&'){ 
3264   1925             _if65_cond:
3265   1925 3B DD 3E      mov d, _prog ; $prog
3266   1928 2A            mov b, [d]
3267   1929 38 00 00      mov c, 0
3268   192C 74            mov d, b
3269   192D 32            mov bl, [d]
3270   192E A7 00         mov bh, 0
3271   1930 38 00 00      mov c, 0
3272   1933             ; --- START RELATIONAL
3273   1933 D7            push a
3274   1934 11            mov a, b
3275   1935 FD 2E 26 00   mov32 cb, $00000026
3275   1939 00 00 
3276   193B B0            cmp a, b
3277   193C FD 71         seq ; ==
3278   193E E4            pop a
3279   193F             ; --- END RELATIONAL
3280   193F C0 00 00      cmp b, 0
3281   1942 C6 E8 19      je _if65_else
3282   1945             _if65_TRUE:
3283   1945             ; *t++ = *prog++; 
3284   1945 FA FF FF      lea d, [bp + -1] ; $t
3285   1948 2A            mov b, [d]
3286   1949 38 00 00      mov c, 0
3287   194C FD 77         inc b
3288   194E FA FF FF      lea d, [bp + -1] ; $t
3289   1951 FD 43         mov [d], b
3290   1953 FD 7D         dec b
3291   1955 D8            push b
3292   1956 3B DD 3E      mov d, _prog ; $prog
3293   1959 2A            mov b, [d]
3294   195A 38 00 00      mov c, 0
3295   195D FD 77         inc b
3296   195F 3B DD 3E      mov d, _prog ; $prog
3297   1962 FD 43         mov [d], b
3298   1964 FD 7D         dec b
3299   1966 74            mov d, b
3300   1967 32            mov bl, [d]
3301   1968 A7 00         mov bh, 0
3302   196A 38 00 00      mov c, 0
3303   196D E7            pop d
3304   196E FD 3E         mov [d], bl
3305   1970             ; if(*prog == '&'){ 
3306   1970             _if66_cond:
3307   1970 3B DD 3E      mov d, _prog ; $prog
3308   1973 2A            mov b, [d]
3309   1974 38 00 00      mov c, 0
3310   1977 74            mov d, b
3311   1978 32            mov bl, [d]
3312   1979 A7 00         mov bh, 0
3313   197B 38 00 00      mov c, 0
3314   197E             ; --- START RELATIONAL
3315   197E D7            push a
3316   197F 11            mov a, b
3317   1980 FD 2E 26 00   mov32 cb, $00000026
3317   1984 00 00 
3318   1986 B0            cmp a, b
3319   1987 FD 71         seq ; ==
3320   1989 E4            pop a
3321   198A             ; --- END RELATIONAL
3322   198A C0 00 00      cmp b, 0
3323   198D C6 CB 19      je _if66_else
3324   1990             _if66_TRUE:
3325   1990             ; *t++ = *prog++; 
3326   1990 FA FF FF      lea d, [bp + -1] ; $t
3327   1993 2A            mov b, [d]
3328   1994 38 00 00      mov c, 0
3329   1997 FD 77         inc b
3330   1999 FA FF FF      lea d, [bp + -1] ; $t
3331   199C FD 43         mov [d], b
3332   199E FD 7D         dec b
3333   19A0 D8            push b
3334   19A1 3B DD 3E      mov d, _prog ; $prog
3335   19A4 2A            mov b, [d]
3336   19A5 38 00 00      mov c, 0
3337   19A8 FD 77         inc b
3338   19AA 3B DD 3E      mov d, _prog ; $prog
3339   19AD FD 43         mov [d], b
3340   19AF FD 7D         dec b
3341   19B1 74            mov d, b
3342   19B2 32            mov bl, [d]
3343   19B3 A7 00         mov bh, 0
3344   19B5 38 00 00      mov c, 0
3345   19B8 E7            pop d
3346   19B9 FD 3E         mov [d], bl
3347   19BB             ; tok = LOGICAL_AND; 
3348   19BB 3B D9 3E      mov d, _tok ; $tok
3349   19BE DA            push d
3350   19BF FD 2E 0E 00   mov32 cb, $e ; enum element: LOGICAL_AND
3350   19C3 00 00 
3351   19C5 E7            pop d
3352   19C6 FD 43         mov [d], b
3353   19C8 0A D8 19      jmp _if66_exit
3354   19CB             _if66_else:
3355   19CB             ; tok = AMPERSAND; 
3356   19CB 3B D9 3E      mov d, _tok ; $tok
3357   19CE DA            push d
3358   19CF FD 2E 16 00   mov32 cb, $16 ; enum element: AMPERSAND
3358   19D3 00 00 
3359   19D5 E7            pop d
3360   19D6 FD 43         mov [d], b
3361   19D8             _if66_exit:
3362   19D8             ; toktype = DELIMITER;   
3363   19D8 3B DB 3E      mov d, _toktype ; $toktype
3364   19DB DA            push d
3365   19DC FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3365   19E0 00 00 
3366   19E2 E7            pop d
3367   19E3 FD 43         mov [d], b
3368   19E5 0A 78 24      jmp _if65_exit
3369   19E8             _if65_else:
3370   19E8             ; if(*prog == '|'){ 
3371   19E8             _if67_cond:
3372   19E8 3B DD 3E      mov d, _prog ; $prog
3373   19EB 2A            mov b, [d]
3374   19EC 38 00 00      mov c, 0
3375   19EF 74            mov d, b
3376   19F0 32            mov bl, [d]
3377   19F1 A7 00         mov bh, 0
3378   19F3 38 00 00      mov c, 0
3379   19F6             ; --- START RELATIONAL
3380   19F6 D7            push a
3381   19F7 11            mov a, b
3382   19F8 FD 2E 7C 00   mov32 cb, $0000007c
3382   19FC 00 00 
3383   19FE B0            cmp a, b
3384   19FF FD 71         seq ; ==
3385   1A01 E4            pop a
3386   1A02             ; --- END RELATIONAL
3387   1A02 C0 00 00      cmp b, 0
3388   1A05 C6 AB 1A      je _if67_else
3389   1A08             _if67_TRUE:
3390   1A08             ; *t++ = *prog++; 
3391   1A08 FA FF FF      lea d, [bp + -1] ; $t
3392   1A0B 2A            mov b, [d]
3393   1A0C 38 00 00      mov c, 0
3394   1A0F FD 77         inc b
3395   1A11 FA FF FF      lea d, [bp + -1] ; $t
3396   1A14 FD 43         mov [d], b
3397   1A16 FD 7D         dec b
3398   1A18 D8            push b
3399   1A19 3B DD 3E      mov d, _prog ; $prog
3400   1A1C 2A            mov b, [d]
3401   1A1D 38 00 00      mov c, 0
3402   1A20 FD 77         inc b
3403   1A22 3B DD 3E      mov d, _prog ; $prog
3404   1A25 FD 43         mov [d], b
3405   1A27 FD 7D         dec b
3406   1A29 74            mov d, b
3407   1A2A 32            mov bl, [d]
3408   1A2B A7 00         mov bh, 0
3409   1A2D 38 00 00      mov c, 0
3410   1A30 E7            pop d
3411   1A31 FD 3E         mov [d], bl
3412   1A33             ; if (*prog == '|'){ 
3413   1A33             _if68_cond:
3414   1A33 3B DD 3E      mov d, _prog ; $prog
3415   1A36 2A            mov b, [d]
3416   1A37 38 00 00      mov c, 0
3417   1A3A 74            mov d, b
3418   1A3B 32            mov bl, [d]
3419   1A3C A7 00         mov bh, 0
3420   1A3E 38 00 00      mov c, 0
3421   1A41             ; --- START RELATIONAL
3422   1A41 D7            push a
3423   1A42 11            mov a, b
3424   1A43 FD 2E 7C 00   mov32 cb, $0000007c
3424   1A47 00 00 
3425   1A49 B0            cmp a, b
3426   1A4A FD 71         seq ; ==
3427   1A4C E4            pop a
3428   1A4D             ; --- END RELATIONAL
3429   1A4D C0 00 00      cmp b, 0
3430   1A50 C6 8E 1A      je _if68_else
3431   1A53             _if68_TRUE:
3432   1A53             ; *t++ = *prog++; 
3433   1A53 FA FF FF      lea d, [bp + -1] ; $t
3434   1A56 2A            mov b, [d]
3435   1A57 38 00 00      mov c, 0
3436   1A5A FD 77         inc b
3437   1A5C FA FF FF      lea d, [bp + -1] ; $t
3438   1A5F FD 43         mov [d], b
3439   1A61 FD 7D         dec b
3440   1A63 D8            push b
3441   1A64 3B DD 3E      mov d, _prog ; $prog
3442   1A67 2A            mov b, [d]
3443   1A68 38 00 00      mov c, 0
3444   1A6B FD 77         inc b
3445   1A6D 3B DD 3E      mov d, _prog ; $prog
3446   1A70 FD 43         mov [d], b
3447   1A72 FD 7D         dec b
3448   1A74 74            mov d, b
3449   1A75 32            mov bl, [d]
3450   1A76 A7 00         mov bh, 0
3451   1A78 38 00 00      mov c, 0
3452   1A7B E7            pop d
3453   1A7C FD 3E         mov [d], bl
3454   1A7E             ; tok = LOGICAL_OR; 
3455   1A7E 3B D9 3E      mov d, _tok ; $tok
3456   1A81 DA            push d
3457   1A82 FD 2E 0F 00   mov32 cb, $f ; enum element: LOGICAL_OR
3457   1A86 00 00 
3458   1A88 E7            pop d
3459   1A89 FD 43         mov [d], b
3460   1A8B 0A 9B 1A      jmp _if68_exit
3461   1A8E             _if68_else:
3462   1A8E             ; tok = BITWISE_OR; 
3463   1A8E 3B D9 3E      mov d, _tok ; $tok
3464   1A91 DA            push d
3465   1A92 FD 2E 18 00   mov32 cb, $18 ; enum element: BITWISE_OR
3465   1A96 00 00 
3466   1A98 E7            pop d
3467   1A99 FD 43         mov [d], b
3468   1A9B             _if68_exit:
3469   1A9B             ; toktype = DELIMITER;   
3470   1A9B 3B DB 3E      mov d, _toktype ; $toktype
3471   1A9E DA            push d
3472   1A9F FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3472   1AA3 00 00 
3473   1AA5 E7            pop d
3474   1AA6 FD 43         mov [d], b
3475   1AA8 0A 78 24      jmp _if67_exit
3476   1AAB             _if67_else:
3477   1AAB             ; if(*prog == '~'){ 
3478   1AAB             _if69_cond:
3479   1AAB 3B DD 3E      mov d, _prog ; $prog
3480   1AAE 2A            mov b, [d]
3481   1AAF 38 00 00      mov c, 0
3482   1AB2 74            mov d, b
3483   1AB3 32            mov bl, [d]
3484   1AB4 A7 00         mov bh, 0
3485   1AB6 38 00 00      mov c, 0
3486   1AB9             ; --- START RELATIONAL
3487   1AB9 D7            push a
3488   1ABA 11            mov a, b
3489   1ABB FD 2E 7E 00   mov32 cb, $0000007e
3489   1ABF 00 00 
3490   1AC1 B0            cmp a, b
3491   1AC2 FD 71         seq ; ==
3492   1AC4 E4            pop a
3493   1AC5             ; --- END RELATIONAL
3494   1AC5 C0 00 00      cmp b, 0
3495   1AC8 C6 13 1B      je _if69_else
3496   1ACB             _if69_TRUE:
3497   1ACB             ; *t++ = *prog++; 
3498   1ACB FA FF FF      lea d, [bp + -1] ; $t
3499   1ACE 2A            mov b, [d]
3500   1ACF 38 00 00      mov c, 0
3501   1AD2 FD 77         inc b
3502   1AD4 FA FF FF      lea d, [bp + -1] ; $t
3503   1AD7 FD 43         mov [d], b
3504   1AD9 FD 7D         dec b
3505   1ADB D8            push b
3506   1ADC 3B DD 3E      mov d, _prog ; $prog
3507   1ADF 2A            mov b, [d]
3508   1AE0 38 00 00      mov c, 0
3509   1AE3 FD 77         inc b
3510   1AE5 3B DD 3E      mov d, _prog ; $prog
3511   1AE8 FD 43         mov [d], b
3512   1AEA FD 7D         dec b
3513   1AEC 74            mov d, b
3514   1AED 32            mov bl, [d]
3515   1AEE A7 00         mov bh, 0
3516   1AF0 38 00 00      mov c, 0
3517   1AF3 E7            pop d
3518   1AF4 FD 3E         mov [d], bl
3519   1AF6             ; tok = BITWISE_NOT; 
3520   1AF6 3B D9 3E      mov d, _tok ; $tok
3521   1AF9 DA            push d
3522   1AFA FD 2E 19 00   mov32 cb, $19 ; enum element: BITWISE_NOT
3522   1AFE 00 00 
3523   1B00 E7            pop d
3524   1B01 FD 43         mov [d], b
3525   1B03             ; toktype = DELIMITER;   
3526   1B03 3B DB 3E      mov d, _toktype ; $toktype
3527   1B06 DA            push d
3528   1B07 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3528   1B0B 00 00 
3529   1B0D E7            pop d
3530   1B0E FD 43         mov [d], b
3531   1B10 0A 78 24      jmp _if69_exit
3532   1B13             _if69_else:
3533   1B13             ; if(*prog == '<'){ 
3534   1B13             _if70_cond:
3535   1B13 3B DD 3E      mov d, _prog ; $prog
3536   1B16 2A            mov b, [d]
3537   1B17 38 00 00      mov c, 0
3538   1B1A 74            mov d, b
3539   1B1B 32            mov bl, [d]
3540   1B1C A7 00         mov bh, 0
3541   1B1E 38 00 00      mov c, 0
3542   1B21             ; --- START RELATIONAL
3543   1B21 D7            push a
3544   1B22 11            mov a, b
3545   1B23 FD 2E 3C 00   mov32 cb, $0000003c
3545   1B27 00 00 
3546   1B29 B0            cmp a, b
3547   1B2A FD 71         seq ; ==
3548   1B2C E4            pop a
3549   1B2D             ; --- END RELATIONAL
3550   1B2D C0 00 00      cmp b, 0
3551   1B30 C6 31 1C      je _if70_else
3552   1B33             _if70_TRUE:
3553   1B33             ; *t++ = *prog++; 
3554   1B33 FA FF FF      lea d, [bp + -1] ; $t
3555   1B36 2A            mov b, [d]
3556   1B37 38 00 00      mov c, 0
3557   1B3A FD 77         inc b
3558   1B3C FA FF FF      lea d, [bp + -1] ; $t
3559   1B3F FD 43         mov [d], b
3560   1B41 FD 7D         dec b
3561   1B43 D8            push b
3562   1B44 3B DD 3E      mov d, _prog ; $prog
3563   1B47 2A            mov b, [d]
3564   1B48 38 00 00      mov c, 0
3565   1B4B FD 77         inc b
3566   1B4D 3B DD 3E      mov d, _prog ; $prog
3567   1B50 FD 43         mov [d], b
3568   1B52 FD 7D         dec b
3569   1B54 74            mov d, b
3570   1B55 32            mov bl, [d]
3571   1B56 A7 00         mov bh, 0
3572   1B58 38 00 00      mov c, 0
3573   1B5B E7            pop d
3574   1B5C FD 3E         mov [d], bl
3575   1B5E             ; if (*prog == '='){ 
3576   1B5E             _if71_cond:
3577   1B5E 3B DD 3E      mov d, _prog ; $prog
3578   1B61 2A            mov b, [d]
3579   1B62 38 00 00      mov c, 0
3580   1B65 74            mov d, b
3581   1B66 32            mov bl, [d]
3582   1B67 A7 00         mov bh, 0
3583   1B69 38 00 00      mov c, 0
3584   1B6C             ; --- START RELATIONAL
3585   1B6C D7            push a
3586   1B6D 11            mov a, b
3587   1B6E FD 2E 3D 00   mov32 cb, $0000003d
3587   1B72 00 00 
3588   1B74 B0            cmp a, b
3589   1B75 FD 71         seq ; ==
3590   1B77 E4            pop a
3591   1B78             ; --- END RELATIONAL
3592   1B78 C0 00 00      cmp b, 0
3593   1B7B C6 B9 1B      je _if71_else
3594   1B7E             _if71_TRUE:
3595   1B7E             ; *t++ = *prog++; 
3596   1B7E FA FF FF      lea d, [bp + -1] ; $t
3597   1B81 2A            mov b, [d]
3598   1B82 38 00 00      mov c, 0
3599   1B85 FD 77         inc b
3600   1B87 FA FF FF      lea d, [bp + -1] ; $t
3601   1B8A FD 43         mov [d], b
3602   1B8C FD 7D         dec b
3603   1B8E D8            push b
3604   1B8F 3B DD 3E      mov d, _prog ; $prog
3605   1B92 2A            mov b, [d]
3606   1B93 38 00 00      mov c, 0
3607   1B96 FD 77         inc b
3608   1B98 3B DD 3E      mov d, _prog ; $prog
3609   1B9B FD 43         mov [d], b
3610   1B9D FD 7D         dec b
3611   1B9F 74            mov d, b
3612   1BA0 32            mov bl, [d]
3613   1BA1 A7 00         mov bh, 0
3614   1BA3 38 00 00      mov c, 0
3615   1BA6 E7            pop d
3616   1BA7 FD 3E         mov [d], bl
3617   1BA9             ; tok = LESS_THAN_OR_EQUAL; 
3618   1BA9 3B D9 3E      mov d, _tok ; $tok
3619   1BAC DA            push d
3620   1BAD FD 2E 0B 00   mov32 cb, $b ; enum element: LESS_THAN_OR_EQUAL
3620   1BB1 00 00 
3621   1BB3 E7            pop d
3622   1BB4 FD 43         mov [d], b
3623   1BB6 0A 21 1C      jmp _if71_exit
3624   1BB9             _if71_else:
3625   1BB9             ; if (*prog == '<'){ 
3626   1BB9             _if72_cond:
3627   1BB9 3B DD 3E      mov d, _prog ; $prog
3628   1BBC 2A            mov b, [d]
3629   1BBD 38 00 00      mov c, 0
3630   1BC0 74            mov d, b
3631   1BC1 32            mov bl, [d]
3632   1BC2 A7 00         mov bh, 0
3633   1BC4 38 00 00      mov c, 0
3634   1BC7             ; --- START RELATIONAL
3635   1BC7 D7            push a
3636   1BC8 11            mov a, b
3637   1BC9 FD 2E 3C 00   mov32 cb, $0000003c
3637   1BCD 00 00 
3638   1BCF B0            cmp a, b
3639   1BD0 FD 71         seq ; ==
3640   1BD2 E4            pop a
3641   1BD3             ; --- END RELATIONAL
3642   1BD3 C0 00 00      cmp b, 0
3643   1BD6 C6 14 1C      je _if72_else
3644   1BD9             _if72_TRUE:
3645   1BD9             ; *t++ = *prog++; 
3646   1BD9 FA FF FF      lea d, [bp + -1] ; $t
3647   1BDC 2A            mov b, [d]
3648   1BDD 38 00 00      mov c, 0
3649   1BE0 FD 77         inc b
3650   1BE2 FA FF FF      lea d, [bp + -1] ; $t
3651   1BE5 FD 43         mov [d], b
3652   1BE7 FD 7D         dec b
3653   1BE9 D8            push b
3654   1BEA 3B DD 3E      mov d, _prog ; $prog
3655   1BED 2A            mov b, [d]
3656   1BEE 38 00 00      mov c, 0
3657   1BF1 FD 77         inc b
3658   1BF3 3B DD 3E      mov d, _prog ; $prog
3659   1BF6 FD 43         mov [d], b
3660   1BF8 FD 7D         dec b
3661   1BFA 74            mov d, b
3662   1BFB 32            mov bl, [d]
3663   1BFC A7 00         mov bh, 0
3664   1BFE 38 00 00      mov c, 0
3665   1C01 E7            pop d
3666   1C02 FD 3E         mov [d], bl
3667   1C04             ; tok = BITWISE_SHL; 
3668   1C04 3B D9 3E      mov d, _tok ; $tok
3669   1C07 DA            push d
3670   1C08 FD 2E 1A 00   mov32 cb, $1a ; enum element: BITWISE_SHL
3670   1C0C 00 00 
3671   1C0E E7            pop d
3672   1C0F FD 43         mov [d], b
3673   1C11 0A 21 1C      jmp _if72_exit
3674   1C14             _if72_else:
3675   1C14             ; tok = LESS_THAN; 
3676   1C14 3B D9 3E      mov d, _tok ; $tok
3677   1C17 DA            push d
3678   1C18 FD 2E 0A 00   mov32 cb, $a ; enum element: LESS_THAN
3678   1C1C 00 00 
3679   1C1E E7            pop d
3680   1C1F FD 43         mov [d], b
3681   1C21             _if72_exit:
3682   1C21             _if71_exit:
3683   1C21             ; toktype = DELIMITER;   
3684   1C21 3B DB 3E      mov d, _toktype ; $toktype
3685   1C24 DA            push d
3686   1C25 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3686   1C29 00 00 
3687   1C2B E7            pop d
3688   1C2C FD 43         mov [d], b
3689   1C2E 0A 78 24      jmp _if70_exit
3690   1C31             _if70_else:
3691   1C31             ; if(*prog == '>'){ 
3692   1C31             _if73_cond:
3693   1C31 3B DD 3E      mov d, _prog ; $prog
3694   1C34 2A            mov b, [d]
3695   1C35 38 00 00      mov c, 0
3696   1C38 74            mov d, b
3697   1C39 32            mov bl, [d]
3698   1C3A A7 00         mov bh, 0
3699   1C3C 38 00 00      mov c, 0
3700   1C3F             ; --- START RELATIONAL
3701   1C3F D7            push a
3702   1C40 11            mov a, b
3703   1C41 FD 2E 3E 00   mov32 cb, $0000003e
3703   1C45 00 00 
3704   1C47 B0            cmp a, b
3705   1C48 FD 71         seq ; ==
3706   1C4A E4            pop a
3707   1C4B             ; --- END RELATIONAL
3708   1C4B C0 00 00      cmp b, 0
3709   1C4E C6 4F 1D      je _if73_else
3710   1C51             _if73_TRUE:
3711   1C51             ; *t++ = *prog++; 
3712   1C51 FA FF FF      lea d, [bp + -1] ; $t
3713   1C54 2A            mov b, [d]
3714   1C55 38 00 00      mov c, 0
3715   1C58 FD 77         inc b
3716   1C5A FA FF FF      lea d, [bp + -1] ; $t
3717   1C5D FD 43         mov [d], b
3718   1C5F FD 7D         dec b
3719   1C61 D8            push b
3720   1C62 3B DD 3E      mov d, _prog ; $prog
3721   1C65 2A            mov b, [d]
3722   1C66 38 00 00      mov c, 0
3723   1C69 FD 77         inc b
3724   1C6B 3B DD 3E      mov d, _prog ; $prog
3725   1C6E FD 43         mov [d], b
3726   1C70 FD 7D         dec b
3727   1C72 74            mov d, b
3728   1C73 32            mov bl, [d]
3729   1C74 A7 00         mov bh, 0
3730   1C76 38 00 00      mov c, 0
3731   1C79 E7            pop d
3732   1C7A FD 3E         mov [d], bl
3733   1C7C             ; if (*prog == '='){ 
3734   1C7C             _if74_cond:
3735   1C7C 3B DD 3E      mov d, _prog ; $prog
3736   1C7F 2A            mov b, [d]
3737   1C80 38 00 00      mov c, 0
3738   1C83 74            mov d, b
3739   1C84 32            mov bl, [d]
3740   1C85 A7 00         mov bh, 0
3741   1C87 38 00 00      mov c, 0
3742   1C8A             ; --- START RELATIONAL
3743   1C8A D7            push a
3744   1C8B 11            mov a, b
3745   1C8C FD 2E 3D 00   mov32 cb, $0000003d
3745   1C90 00 00 
3746   1C92 B0            cmp a, b
3747   1C93 FD 71         seq ; ==
3748   1C95 E4            pop a
3749   1C96             ; --- END RELATIONAL
3750   1C96 C0 00 00      cmp b, 0
3751   1C99 C6 D7 1C      je _if74_else
3752   1C9C             _if74_TRUE:
3753   1C9C             ; *t++ = *prog++; 
3754   1C9C FA FF FF      lea d, [bp + -1] ; $t
3755   1C9F 2A            mov b, [d]
3756   1CA0 38 00 00      mov c, 0
3757   1CA3 FD 77         inc b
3758   1CA5 FA FF FF      lea d, [bp + -1] ; $t
3759   1CA8 FD 43         mov [d], b
3760   1CAA FD 7D         dec b
3761   1CAC D8            push b
3762   1CAD 3B DD 3E      mov d, _prog ; $prog
3763   1CB0 2A            mov b, [d]
3764   1CB1 38 00 00      mov c, 0
3765   1CB4 FD 77         inc b
3766   1CB6 3B DD 3E      mov d, _prog ; $prog
3767   1CB9 FD 43         mov [d], b
3768   1CBB FD 7D         dec b
3769   1CBD 74            mov d, b
3770   1CBE 32            mov bl, [d]
3771   1CBF A7 00         mov bh, 0
3772   1CC1 38 00 00      mov c, 0
3773   1CC4 E7            pop d
3774   1CC5 FD 3E         mov [d], bl
3775   1CC7             ; tok = GREATER_THAN_OR_EQUAL; 
3776   1CC7 3B D9 3E      mov d, _tok ; $tok
3777   1CCA DA            push d
3778   1CCB FD 2E 0D 00   mov32 cb, $d ; enum element: GREATER_THAN_OR_EQUAL
3778   1CCF 00 00 
3779   1CD1 E7            pop d
3780   1CD2 FD 43         mov [d], b
3781   1CD4 0A 3F 1D      jmp _if74_exit
3782   1CD7             _if74_else:
3783   1CD7             ; if (*prog == '>'){ 
3784   1CD7             _if75_cond:
3785   1CD7 3B DD 3E      mov d, _prog ; $prog
3786   1CDA 2A            mov b, [d]
3787   1CDB 38 00 00      mov c, 0
3788   1CDE 74            mov d, b
3789   1CDF 32            mov bl, [d]
3790   1CE0 A7 00         mov bh, 0
3791   1CE2 38 00 00      mov c, 0
3792   1CE5             ; --- START RELATIONAL
3793   1CE5 D7            push a
3794   1CE6 11            mov a, b
3795   1CE7 FD 2E 3E 00   mov32 cb, $0000003e
3795   1CEB 00 00 
3796   1CED B0            cmp a, b
3797   1CEE FD 71         seq ; ==
3798   1CF0 E4            pop a
3799   1CF1             ; --- END RELATIONAL
3800   1CF1 C0 00 00      cmp b, 0
3801   1CF4 C6 32 1D      je _if75_else
3802   1CF7             _if75_TRUE:
3803   1CF7             ; *t++ = *prog++; 
3804   1CF7 FA FF FF      lea d, [bp + -1] ; $t
3805   1CFA 2A            mov b, [d]
3806   1CFB 38 00 00      mov c, 0
3807   1CFE FD 77         inc b
3808   1D00 FA FF FF      lea d, [bp + -1] ; $t
3809   1D03 FD 43         mov [d], b
3810   1D05 FD 7D         dec b
3811   1D07 D8            push b
3812   1D08 3B DD 3E      mov d, _prog ; $prog
3813   1D0B 2A            mov b, [d]
3814   1D0C 38 00 00      mov c, 0
3815   1D0F FD 77         inc b
3816   1D11 3B DD 3E      mov d, _prog ; $prog
3817   1D14 FD 43         mov [d], b
3818   1D16 FD 7D         dec b
3819   1D18 74            mov d, b
3820   1D19 32            mov bl, [d]
3821   1D1A A7 00         mov bh, 0
3822   1D1C 38 00 00      mov c, 0
3823   1D1F E7            pop d
3824   1D20 FD 3E         mov [d], bl
3825   1D22             ; tok = BITWISE_SHR; 
3826   1D22 3B D9 3E      mov d, _tok ; $tok
3827   1D25 DA            push d
3828   1D26 FD 2E 1B 00   mov32 cb, $1b ; enum element: BITWISE_SHR
3828   1D2A 00 00 
3829   1D2C E7            pop d
3830   1D2D FD 43         mov [d], b
3831   1D2F 0A 3F 1D      jmp _if75_exit
3832   1D32             _if75_else:
3833   1D32             ; tok = GREATER_THAN; 
3834   1D32 3B D9 3E      mov d, _tok ; $tok
3835   1D35 DA            push d
3836   1D36 FD 2E 0C 00   mov32 cb, $c ; enum element: GREATER_THAN
3836   1D3A 00 00 
3837   1D3C E7            pop d
3838   1D3D FD 43         mov [d], b
3839   1D3F             _if75_exit:
3840   1D3F             _if74_exit:
3841   1D3F             ; toktype = DELIMITER;   
3842   1D3F 3B DB 3E      mov d, _toktype ; $toktype
3843   1D42 DA            push d
3844   1D43 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3844   1D47 00 00 
3845   1D49 E7            pop d
3846   1D4A FD 43         mov [d], b
3847   1D4C 0A 78 24      jmp _if73_exit
3848   1D4F             _if73_else:
3849   1D4F             ; if(*prog == '!'){ 
3850   1D4F             _if76_cond:
3851   1D4F 3B DD 3E      mov d, _prog ; $prog
3852   1D52 2A            mov b, [d]
3853   1D53 38 00 00      mov c, 0
3854   1D56 74            mov d, b
3855   1D57 32            mov bl, [d]
3856   1D58 A7 00         mov bh, 0
3857   1D5A 38 00 00      mov c, 0
3858   1D5D             ; --- START RELATIONAL
3859   1D5D D7            push a
3860   1D5E 11            mov a, b
3861   1D5F FD 2E 21 00   mov32 cb, $00000021
3861   1D63 00 00 
3862   1D65 B0            cmp a, b
3863   1D66 FD 71         seq ; ==
3864   1D68 E4            pop a
3865   1D69             ; --- END RELATIONAL
3866   1D69 C0 00 00      cmp b, 0
3867   1D6C C6 12 1E      je _if76_else
3868   1D6F             _if76_TRUE:
3869   1D6F             ; *t++ = *prog++; 
3870   1D6F FA FF FF      lea d, [bp + -1] ; $t
3871   1D72 2A            mov b, [d]
3872   1D73 38 00 00      mov c, 0
3873   1D76 FD 77         inc b
3874   1D78 FA FF FF      lea d, [bp + -1] ; $t
3875   1D7B FD 43         mov [d], b
3876   1D7D FD 7D         dec b
3877   1D7F D8            push b
3878   1D80 3B DD 3E      mov d, _prog ; $prog
3879   1D83 2A            mov b, [d]
3880   1D84 38 00 00      mov c, 0
3881   1D87 FD 77         inc b
3882   1D89 3B DD 3E      mov d, _prog ; $prog
3883   1D8C FD 43         mov [d], b
3884   1D8E FD 7D         dec b
3885   1D90 74            mov d, b
3886   1D91 32            mov bl, [d]
3887   1D92 A7 00         mov bh, 0
3888   1D94 38 00 00      mov c, 0
3889   1D97 E7            pop d
3890   1D98 FD 3E         mov [d], bl
3891   1D9A             ; if(*prog == '='){ 
3892   1D9A             _if77_cond:
3893   1D9A 3B DD 3E      mov d, _prog ; $prog
3894   1D9D 2A            mov b, [d]
3895   1D9E 38 00 00      mov c, 0
3896   1DA1 74            mov d, b
3897   1DA2 32            mov bl, [d]
3898   1DA3 A7 00         mov bh, 0
3899   1DA5 38 00 00      mov c, 0
3900   1DA8             ; --- START RELATIONAL
3901   1DA8 D7            push a
3902   1DA9 11            mov a, b
3903   1DAA FD 2E 3D 00   mov32 cb, $0000003d
3903   1DAE 00 00 
3904   1DB0 B0            cmp a, b
3905   1DB1 FD 71         seq ; ==
3906   1DB3 E4            pop a
3907   1DB4             ; --- END RELATIONAL
3908   1DB4 C0 00 00      cmp b, 0
3909   1DB7 C6 F5 1D      je _if77_else
3910   1DBA             _if77_TRUE:
3911   1DBA             ; *t++ = *prog++; 
3912   1DBA FA FF FF      lea d, [bp + -1] ; $t
3913   1DBD 2A            mov b, [d]
3914   1DBE 38 00 00      mov c, 0
3915   1DC1 FD 77         inc b
3916   1DC3 FA FF FF      lea d, [bp + -1] ; $t
3917   1DC6 FD 43         mov [d], b
3918   1DC8 FD 7D         dec b
3919   1DCA D8            push b
3920   1DCB 3B DD 3E      mov d, _prog ; $prog
3921   1DCE 2A            mov b, [d]
3922   1DCF 38 00 00      mov c, 0
3923   1DD2 FD 77         inc b
3924   1DD4 3B DD 3E      mov d, _prog ; $prog
3925   1DD7 FD 43         mov [d], b
3926   1DD9 FD 7D         dec b
3927   1DDB 74            mov d, b
3928   1DDC 32            mov bl, [d]
3929   1DDD A7 00         mov bh, 0
3930   1DDF 38 00 00      mov c, 0
3931   1DE2 E7            pop d
3932   1DE3 FD 3E         mov [d], bl
3933   1DE5             ; tok = NOT_EQUAL; 
3934   1DE5 3B D9 3E      mov d, _tok ; $tok
3935   1DE8 DA            push d
3936   1DE9 FD 2E 09 00   mov32 cb, $9 ; enum element: NOT_EQUAL
3936   1DED 00 00 
3937   1DEF E7            pop d
3938   1DF0 FD 43         mov [d], b
3939   1DF2 0A 02 1E      jmp _if77_exit
3940   1DF5             _if77_else:
3941   1DF5             ; tok = LOGICAL_NOT; 
3942   1DF5 3B D9 3E      mov d, _tok ; $tok
3943   1DF8 DA            push d
3944   1DF9 FD 2E 10 00   mov32 cb, $10 ; enum element: LOGICAL_NOT
3944   1DFD 00 00 
3945   1DFF E7            pop d
3946   1E00 FD 43         mov [d], b
3947   1E02             _if77_exit:
3948   1E02             ; toktype = DELIMITER;   
3949   1E02 3B DB 3E      mov d, _toktype ; $toktype
3950   1E05 DA            push d
3951   1E06 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
3951   1E0A 00 00 
3952   1E0C E7            pop d
3953   1E0D FD 43         mov [d], b
3954   1E0F 0A 78 24      jmp _if76_exit
3955   1E12             _if76_else:
3956   1E12             ; if(*prog == '+'){ 
3957   1E12             _if78_cond:
3958   1E12 3B DD 3E      mov d, _prog ; $prog
3959   1E15 2A            mov b, [d]
3960   1E16 38 00 00      mov c, 0
3961   1E19 74            mov d, b
3962   1E1A 32            mov bl, [d]
3963   1E1B A7 00         mov bh, 0
3964   1E1D 38 00 00      mov c, 0
3965   1E20             ; --- START RELATIONAL
3966   1E20 D7            push a
3967   1E21 11            mov a, b
3968   1E22 FD 2E 2B 00   mov32 cb, $0000002b
3968   1E26 00 00 
3969   1E28 B0            cmp a, b
3970   1E29 FD 71         seq ; ==
3971   1E2B E4            pop a
3972   1E2C             ; --- END RELATIONAL
3973   1E2C C0 00 00      cmp b, 0
3974   1E2F C6 D5 1E      je _if78_else
3975   1E32             _if78_TRUE:
3976   1E32             ; *t++ = *prog++; 
3977   1E32 FA FF FF      lea d, [bp + -1] ; $t
3978   1E35 2A            mov b, [d]
3979   1E36 38 00 00      mov c, 0
3980   1E39 FD 77         inc b
3981   1E3B FA FF FF      lea d, [bp + -1] ; $t
3982   1E3E FD 43         mov [d], b
3983   1E40 FD 7D         dec b
3984   1E42 D8            push b
3985   1E43 3B DD 3E      mov d, _prog ; $prog
3986   1E46 2A            mov b, [d]
3987   1E47 38 00 00      mov c, 0
3988   1E4A FD 77         inc b
3989   1E4C 3B DD 3E      mov d, _prog ; $prog
3990   1E4F FD 43         mov [d], b
3991   1E51 FD 7D         dec b
3992   1E53 74            mov d, b
3993   1E54 32            mov bl, [d]
3994   1E55 A7 00         mov bh, 0
3995   1E57 38 00 00      mov c, 0
3996   1E5A E7            pop d
3997   1E5B FD 3E         mov [d], bl
3998   1E5D             ; if(*prog == '+'){ 
3999   1E5D             _if79_cond:
4000   1E5D 3B DD 3E      mov d, _prog ; $prog
4001   1E60 2A            mov b, [d]
4002   1E61 38 00 00      mov c, 0
4003   1E64 74            mov d, b
4004   1E65 32            mov bl, [d]
4005   1E66 A7 00         mov bh, 0
4006   1E68 38 00 00      mov c, 0
4007   1E6B             ; --- START RELATIONAL
4008   1E6B D7            push a
4009   1E6C 11            mov a, b
4010   1E6D FD 2E 2B 00   mov32 cb, $0000002b
4010   1E71 00 00 
4011   1E73 B0            cmp a, b
4012   1E74 FD 71         seq ; ==
4013   1E76 E4            pop a
4014   1E77             ; --- END RELATIONAL
4015   1E77 C0 00 00      cmp b, 0
4016   1E7A C6 B8 1E      je _if79_else
4017   1E7D             _if79_TRUE:
4018   1E7D             ; *t++ = *prog++; 
4019   1E7D FA FF FF      lea d, [bp + -1] ; $t
4020   1E80 2A            mov b, [d]
4021   1E81 38 00 00      mov c, 0
4022   1E84 FD 77         inc b
4023   1E86 FA FF FF      lea d, [bp + -1] ; $t
4024   1E89 FD 43         mov [d], b
4025   1E8B FD 7D         dec b
4026   1E8D D8            push b
4027   1E8E 3B DD 3E      mov d, _prog ; $prog
4028   1E91 2A            mov b, [d]
4029   1E92 38 00 00      mov c, 0
4030   1E95 FD 77         inc b
4031   1E97 3B DD 3E      mov d, _prog ; $prog
4032   1E9A FD 43         mov [d], b
4033   1E9C FD 7D         dec b
4034   1E9E 74            mov d, b
4035   1E9F 32            mov bl, [d]
4036   1EA0 A7 00         mov bh, 0
4037   1EA2 38 00 00      mov c, 0
4038   1EA5 E7            pop d
4039   1EA6 FD 3E         mov [d], bl
4040   1EA8             ; tok = INCREMENT; 
4041   1EA8 3B D9 3E      mov d, _tok ; $tok
4042   1EAB DA            push d
4043   1EAC FD 2E 05 00   mov32 cb, $5 ; enum element: INCREMENT
4043   1EB0 00 00 
4044   1EB2 E7            pop d
4045   1EB3 FD 43         mov [d], b
4046   1EB5 0A C5 1E      jmp _if79_exit
4047   1EB8             _if79_else:
4048   1EB8             ; tok = PLUS; 
4049   1EB8 3B D9 3E      mov d, _tok ; $tok
4050   1EBB DA            push d
4051   1EBC FD 2E 01 00   mov32 cb, $1 ; enum element: PLUS
4051   1EC0 00 00 
4052   1EC2 E7            pop d
4053   1EC3 FD 43         mov [d], b
4054   1EC5             _if79_exit:
4055   1EC5             ; toktype = DELIMITER;   
4056   1EC5 3B DB 3E      mov d, _toktype ; $toktype
4057   1EC8 DA            push d
4058   1EC9 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4058   1ECD 00 00 
4059   1ECF E7            pop d
4060   1ED0 FD 43         mov [d], b
4061   1ED2 0A 78 24      jmp _if78_exit
4062   1ED5             _if78_else:
4063   1ED5             ; if(*prog == '-'){ 
4064   1ED5             _if80_cond:
4065   1ED5 3B DD 3E      mov d, _prog ; $prog
4066   1ED8 2A            mov b, [d]
4067   1ED9 38 00 00      mov c, 0
4068   1EDC 74            mov d, b
4069   1EDD 32            mov bl, [d]
4070   1EDE A7 00         mov bh, 0
4071   1EE0 38 00 00      mov c, 0
4072   1EE3             ; --- START RELATIONAL
4073   1EE3 D7            push a
4074   1EE4 11            mov a, b
4075   1EE5 FD 2E 2D 00   mov32 cb, $0000002d
4075   1EE9 00 00 
4076   1EEB B0            cmp a, b
4077   1EEC FD 71         seq ; ==
4078   1EEE E4            pop a
4079   1EEF             ; --- END RELATIONAL
4080   1EEF C0 00 00      cmp b, 0
4081   1EF2 C6 98 1F      je _if80_else
4082   1EF5             _if80_TRUE:
4083   1EF5             ; *t++ = *prog++; 
4084   1EF5 FA FF FF      lea d, [bp + -1] ; $t
4085   1EF8 2A            mov b, [d]
4086   1EF9 38 00 00      mov c, 0
4087   1EFC FD 77         inc b
4088   1EFE FA FF FF      lea d, [bp + -1] ; $t
4089   1F01 FD 43         mov [d], b
4090   1F03 FD 7D         dec b
4091   1F05 D8            push b
4092   1F06 3B DD 3E      mov d, _prog ; $prog
4093   1F09 2A            mov b, [d]
4094   1F0A 38 00 00      mov c, 0
4095   1F0D FD 77         inc b
4096   1F0F 3B DD 3E      mov d, _prog ; $prog
4097   1F12 FD 43         mov [d], b
4098   1F14 FD 7D         dec b
4099   1F16 74            mov d, b
4100   1F17 32            mov bl, [d]
4101   1F18 A7 00         mov bh, 0
4102   1F1A 38 00 00      mov c, 0
4103   1F1D E7            pop d
4104   1F1E FD 3E         mov [d], bl
4105   1F20             ; if(*prog == '-'){ 
4106   1F20             _if81_cond:
4107   1F20 3B DD 3E      mov d, _prog ; $prog
4108   1F23 2A            mov b, [d]
4109   1F24 38 00 00      mov c, 0
4110   1F27 74            mov d, b
4111   1F28 32            mov bl, [d]
4112   1F29 A7 00         mov bh, 0
4113   1F2B 38 00 00      mov c, 0
4114   1F2E             ; --- START RELATIONAL
4115   1F2E D7            push a
4116   1F2F 11            mov a, b
4117   1F30 FD 2E 2D 00   mov32 cb, $0000002d
4117   1F34 00 00 
4118   1F36 B0            cmp a, b
4119   1F37 FD 71         seq ; ==
4120   1F39 E4            pop a
4121   1F3A             ; --- END RELATIONAL
4122   1F3A C0 00 00      cmp b, 0
4123   1F3D C6 7B 1F      je _if81_else
4124   1F40             _if81_TRUE:
4125   1F40             ; *t++ = *prog++; 
4126   1F40 FA FF FF      lea d, [bp + -1] ; $t
4127   1F43 2A            mov b, [d]
4128   1F44 38 00 00      mov c, 0
4129   1F47 FD 77         inc b
4130   1F49 FA FF FF      lea d, [bp + -1] ; $t
4131   1F4C FD 43         mov [d], b
4132   1F4E FD 7D         dec b
4133   1F50 D8            push b
4134   1F51 3B DD 3E      mov d, _prog ; $prog
4135   1F54 2A            mov b, [d]
4136   1F55 38 00 00      mov c, 0
4137   1F58 FD 77         inc b
4138   1F5A 3B DD 3E      mov d, _prog ; $prog
4139   1F5D FD 43         mov [d], b
4140   1F5F FD 7D         dec b
4141   1F61 74            mov d, b
4142   1F62 32            mov bl, [d]
4143   1F63 A7 00         mov bh, 0
4144   1F65 38 00 00      mov c, 0
4145   1F68 E7            pop d
4146   1F69 FD 3E         mov [d], bl
4147   1F6B             ; tok = DECREMENT; 
4148   1F6B 3B D9 3E      mov d, _tok ; $tok
4149   1F6E DA            push d
4150   1F6F FD 2E 06 00   mov32 cb, $6 ; enum element: DECREMENT
4150   1F73 00 00 
4151   1F75 E7            pop d
4152   1F76 FD 43         mov [d], b
4153   1F78 0A 88 1F      jmp _if81_exit
4154   1F7B             _if81_else:
4155   1F7B             ; tok = MINUS; 
4156   1F7B 3B D9 3E      mov d, _tok ; $tok
4157   1F7E DA            push d
4158   1F7F FD 2E 02 00   mov32 cb, $2 ; enum element: MINUS
4158   1F83 00 00 
4159   1F85 E7            pop d
4160   1F86 FD 43         mov [d], b
4161   1F88             _if81_exit:
4162   1F88             ; toktype = DELIMITER;   
4163   1F88 3B DB 3E      mov d, _toktype ; $toktype
4164   1F8B DA            push d
4165   1F8C FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4165   1F90 00 00 
4166   1F92 E7            pop d
4167   1F93 FD 43         mov [d], b
4168   1F95 0A 78 24      jmp _if80_exit
4169   1F98             _if80_else:
4170   1F98             ; if(*prog == '$'){ 
4171   1F98             _if82_cond:
4172   1F98 3B DD 3E      mov d, _prog ; $prog
4173   1F9B 2A            mov b, [d]
4174   1F9C 38 00 00      mov c, 0
4175   1F9F 74            mov d, b
4176   1FA0 32            mov bl, [d]
4177   1FA1 A7 00         mov bh, 0
4178   1FA3 38 00 00      mov c, 0
4179   1FA6             ; --- START RELATIONAL
4180   1FA6 D7            push a
4181   1FA7 11            mov a, b
4182   1FA8 FD 2E 24 00   mov32 cb, $00000024
4182   1FAC 00 00 
4183   1FAE B0            cmp a, b
4184   1FAF FD 71         seq ; ==
4185   1FB1 E4            pop a
4186   1FB2             ; --- END RELATIONAL
4187   1FB2 C0 00 00      cmp b, 0
4188   1FB5 C6 00 20      je _if82_else
4189   1FB8             _if82_TRUE:
4190   1FB8             ; *t++ = *prog++; 
4191   1FB8 FA FF FF      lea d, [bp + -1] ; $t
4192   1FBB 2A            mov b, [d]
4193   1FBC 38 00 00      mov c, 0
4194   1FBF FD 77         inc b
4195   1FC1 FA FF FF      lea d, [bp + -1] ; $t
4196   1FC4 FD 43         mov [d], b
4197   1FC6 FD 7D         dec b
4198   1FC8 D8            push b
4199   1FC9 3B DD 3E      mov d, _prog ; $prog
4200   1FCC 2A            mov b, [d]
4201   1FCD 38 00 00      mov c, 0
4202   1FD0 FD 77         inc b
4203   1FD2 3B DD 3E      mov d, _prog ; $prog
4204   1FD5 FD 43         mov [d], b
4205   1FD7 FD 7D         dec b
4206   1FD9 74            mov d, b
4207   1FDA 32            mov bl, [d]
4208   1FDB A7 00         mov bh, 0
4209   1FDD 38 00 00      mov c, 0
4210   1FE0 E7            pop d
4211   1FE1 FD 3E         mov [d], bl
4212   1FE3             ; tok = DOLLAR; 
4213   1FE3 3B D9 3E      mov d, _tok ; $tok
4214   1FE6 DA            push d
4215   1FE7 FD 2E 12 00   mov32 cb, $12 ; enum element: DOLLAR
4215   1FEB 00 00 
4216   1FED E7            pop d
4217   1FEE FD 43         mov [d], b
4218   1FF0             ; toktype = DELIMITER;   
4219   1FF0 3B DB 3E      mov d, _toktype ; $toktype
4220   1FF3 DA            push d
4221   1FF4 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4221   1FF8 00 00 
4222   1FFA E7            pop d
4223   1FFB FD 43         mov [d], b
4224   1FFD 0A 78 24      jmp _if82_exit
4225   2000             _if82_else:
4226   2000             ; if(*prog == '^'){ 
4227   2000             _if83_cond:
4228   2000 3B DD 3E      mov d, _prog ; $prog
4229   2003 2A            mov b, [d]
4230   2004 38 00 00      mov c, 0
4231   2007 74            mov d, b
4232   2008 32            mov bl, [d]
4233   2009 A7 00         mov bh, 0
4234   200B 38 00 00      mov c, 0
4235   200E             ; --- START RELATIONAL
4236   200E D7            push a
4237   200F 11            mov a, b
4238   2010 FD 2E 5E 00   mov32 cb, $0000005e
4238   2014 00 00 
4239   2016 B0            cmp a, b
4240   2017 FD 71         seq ; ==
4241   2019 E4            pop a
4242   201A             ; --- END RELATIONAL
4243   201A C0 00 00      cmp b, 0
4244   201D C6 68 20      je _if83_else
4245   2020             _if83_TRUE:
4246   2020             ; *t++ = *prog++; 
4247   2020 FA FF FF      lea d, [bp + -1] ; $t
4248   2023 2A            mov b, [d]
4249   2024 38 00 00      mov c, 0
4250   2027 FD 77         inc b
4251   2029 FA FF FF      lea d, [bp + -1] ; $t
4252   202C FD 43         mov [d], b
4253   202E FD 7D         dec b
4254   2030 D8            push b
4255   2031 3B DD 3E      mov d, _prog ; $prog
4256   2034 2A            mov b, [d]
4257   2035 38 00 00      mov c, 0
4258   2038 FD 77         inc b
4259   203A 3B DD 3E      mov d, _prog ; $prog
4260   203D FD 43         mov [d], b
4261   203F FD 7D         dec b
4262   2041 74            mov d, b
4263   2042 32            mov bl, [d]
4264   2043 A7 00         mov bh, 0
4265   2045 38 00 00      mov c, 0
4266   2048 E7            pop d
4267   2049 FD 3E         mov [d], bl
4268   204B             ; tok = BITWISE_XOR; 
4269   204B 3B D9 3E      mov d, _tok ; $tok
4270   204E DA            push d
4271   204F FD 2E 17 00   mov32 cb, $17 ; enum element: BITWISE_XOR
4271   2053 00 00 
4272   2055 E7            pop d
4273   2056 FD 43         mov [d], b
4274   2058             ; toktype = DELIMITER;   
4275   2058 3B DB 3E      mov d, _toktype ; $toktype
4276   205B DA            push d
4277   205C FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4277   2060 00 00 
4278   2062 E7            pop d
4279   2063 FD 43         mov [d], b
4280   2065 0A 78 24      jmp _if83_exit
4281   2068             _if83_else:
4282   2068             ; if(*prog == '@'){ 
4283   2068             _if84_cond:
4284   2068 3B DD 3E      mov d, _prog ; $prog
4285   206B 2A            mov b, [d]
4286   206C 38 00 00      mov c, 0
4287   206F 74            mov d, b
4288   2070 32            mov bl, [d]
4289   2071 A7 00         mov bh, 0
4290   2073 38 00 00      mov c, 0
4291   2076             ; --- START RELATIONAL
4292   2076 D7            push a
4293   2077 11            mov a, b
4294   2078 FD 2E 40 00   mov32 cb, $00000040
4294   207C 00 00 
4295   207E B0            cmp a, b
4296   207F FD 71         seq ; ==
4297   2081 E4            pop a
4298   2082             ; --- END RELATIONAL
4299   2082 C0 00 00      cmp b, 0
4300   2085 C6 D0 20      je _if84_else
4301   2088             _if84_TRUE:
4302   2088             ; *t++ = *prog++; 
4303   2088 FA FF FF      lea d, [bp + -1] ; $t
4304   208B 2A            mov b, [d]
4305   208C 38 00 00      mov c, 0
4306   208F FD 77         inc b
4307   2091 FA FF FF      lea d, [bp + -1] ; $t
4308   2094 FD 43         mov [d], b
4309   2096 FD 7D         dec b
4310   2098 D8            push b
4311   2099 3B DD 3E      mov d, _prog ; $prog
4312   209C 2A            mov b, [d]
4313   209D 38 00 00      mov c, 0
4314   20A0 FD 77         inc b
4315   20A2 3B DD 3E      mov d, _prog ; $prog
4316   20A5 FD 43         mov [d], b
4317   20A7 FD 7D         dec b
4318   20A9 74            mov d, b
4319   20AA 32            mov bl, [d]
4320   20AB A7 00         mov bh, 0
4321   20AD 38 00 00      mov c, 0
4322   20B0 E7            pop d
4323   20B1 FD 3E         mov [d], bl
4324   20B3             ; tok = AT; 
4325   20B3 3B D9 3E      mov d, _tok ; $tok
4326   20B6 DA            push d
4327   20B7 FD 2E 14 00   mov32 cb, $14 ; enum element: AT
4327   20BB 00 00 
4328   20BD E7            pop d
4329   20BE FD 43         mov [d], b
4330   20C0             ; toktype = DELIMITER;   
4331   20C0 3B DB 3E      mov d, _toktype ; $toktype
4332   20C3 DA            push d
4333   20C4 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4333   20C8 00 00 
4334   20CA E7            pop d
4335   20CB FD 43         mov [d], b
4336   20CD 0A 78 24      jmp _if84_exit
4337   20D0             _if84_else:
4338   20D0             ; if(*prog == '*'){ 
4339   20D0             _if85_cond:
4340   20D0 3B DD 3E      mov d, _prog ; $prog
4341   20D3 2A            mov b, [d]
4342   20D4 38 00 00      mov c, 0
4343   20D7 74            mov d, b
4344   20D8 32            mov bl, [d]
4345   20D9 A7 00         mov bh, 0
4346   20DB 38 00 00      mov c, 0
4347   20DE             ; --- START RELATIONAL
4348   20DE D7            push a
4349   20DF 11            mov a, b
4350   20E0 FD 2E 2A 00   mov32 cb, $0000002a
4350   20E4 00 00 
4351   20E6 B0            cmp a, b
4352   20E7 FD 71         seq ; ==
4353   20E9 E4            pop a
4354   20EA             ; --- END RELATIONAL
4355   20EA C0 00 00      cmp b, 0
4356   20ED C6 38 21      je _if85_else
4357   20F0             _if85_TRUE:
4358   20F0             ; *t++ = *prog++; 
4359   20F0 FA FF FF      lea d, [bp + -1] ; $t
4360   20F3 2A            mov b, [d]
4361   20F4 38 00 00      mov c, 0
4362   20F7 FD 77         inc b
4363   20F9 FA FF FF      lea d, [bp + -1] ; $t
4364   20FC FD 43         mov [d], b
4365   20FE FD 7D         dec b
4366   2100 D8            push b
4367   2101 3B DD 3E      mov d, _prog ; $prog
4368   2104 2A            mov b, [d]
4369   2105 38 00 00      mov c, 0
4370   2108 FD 77         inc b
4371   210A 3B DD 3E      mov d, _prog ; $prog
4372   210D FD 43         mov [d], b
4373   210F FD 7D         dec b
4374   2111 74            mov d, b
4375   2112 32            mov bl, [d]
4376   2113 A7 00         mov bh, 0
4377   2115 38 00 00      mov c, 0
4378   2118 E7            pop d
4379   2119 FD 3E         mov [d], bl
4380   211B             ; tok = STAR; 
4381   211B 3B D9 3E      mov d, _tok ; $tok
4382   211E DA            push d
4383   211F FD 2E 03 00   mov32 cb, $3 ; enum element: STAR
4383   2123 00 00 
4384   2125 E7            pop d
4385   2126 FD 43         mov [d], b
4386   2128             ; toktype = DELIMITER;   
4387   2128 3B DB 3E      mov d, _toktype ; $toktype
4388   212B DA            push d
4389   212C FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4389   2130 00 00 
4390   2132 E7            pop d
4391   2133 FD 43         mov [d], b
4392   2135 0A 78 24      jmp _if85_exit
4393   2138             _if85_else:
4394   2138             ; if(*prog == '/'){ 
4395   2138             _if86_cond:
4396   2138 3B DD 3E      mov d, _prog ; $prog
4397   213B 2A            mov b, [d]
4398   213C 38 00 00      mov c, 0
4399   213F 74            mov d, b
4400   2140 32            mov bl, [d]
4401   2141 A7 00         mov bh, 0
4402   2143 38 00 00      mov c, 0
4403   2146             ; --- START RELATIONAL
4404   2146 D7            push a
4405   2147 11            mov a, b
4406   2148 FD 2E 2F 00   mov32 cb, $0000002f
4406   214C 00 00 
4407   214E B0            cmp a, b
4408   214F FD 71         seq ; ==
4409   2151 E4            pop a
4410   2152             ; --- END RELATIONAL
4411   2152 C0 00 00      cmp b, 0
4412   2155 C6 A0 21      je _if86_else
4413   2158             _if86_TRUE:
4414   2158             ; *t++ = *prog++; 
4415   2158 FA FF FF      lea d, [bp + -1] ; $t
4416   215B 2A            mov b, [d]
4417   215C 38 00 00      mov c, 0
4418   215F FD 77         inc b
4419   2161 FA FF FF      lea d, [bp + -1] ; $t
4420   2164 FD 43         mov [d], b
4421   2166 FD 7D         dec b
4422   2168 D8            push b
4423   2169 3B DD 3E      mov d, _prog ; $prog
4424   216C 2A            mov b, [d]
4425   216D 38 00 00      mov c, 0
4426   2170 FD 77         inc b
4427   2172 3B DD 3E      mov d, _prog ; $prog
4428   2175 FD 43         mov [d], b
4429   2177 FD 7D         dec b
4430   2179 74            mov d, b
4431   217A 32            mov bl, [d]
4432   217B A7 00         mov bh, 0
4433   217D 38 00 00      mov c, 0
4434   2180 E7            pop d
4435   2181 FD 3E         mov [d], bl
4436   2183             ; tok = FSLASH; 
4437   2183 3B D9 3E      mov d, _tok ; $tok
4438   2186 DA            push d
4439   2187 FD 2E 04 00   mov32 cb, $4 ; enum element: FSLASH
4439   218B 00 00 
4440   218D E7            pop d
4441   218E FD 43         mov [d], b
4442   2190             ; toktype = DELIMITER;   
4443   2190 3B DB 3E      mov d, _toktype ; $toktype
4444   2193 DA            push d
4445   2194 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4445   2198 00 00 
4446   219A E7            pop d
4447   219B FD 43         mov [d], b
4448   219D 0A 78 24      jmp _if86_exit
4449   21A0             _if86_else:
4450   21A0             ; if(*prog == '%'){ 
4451   21A0             _if87_cond:
4452   21A0 3B DD 3E      mov d, _prog ; $prog
4453   21A3 2A            mov b, [d]
4454   21A4 38 00 00      mov c, 0
4455   21A7 74            mov d, b
4456   21A8 32            mov bl, [d]
4457   21A9 A7 00         mov bh, 0
4458   21AB 38 00 00      mov c, 0
4459   21AE             ; --- START RELATIONAL
4460   21AE D7            push a
4461   21AF 11            mov a, b
4462   21B0 FD 2E 25 00   mov32 cb, $00000025
4462   21B4 00 00 
4463   21B6 B0            cmp a, b
4464   21B7 FD 71         seq ; ==
4465   21B9 E4            pop a
4466   21BA             ; --- END RELATIONAL
4467   21BA C0 00 00      cmp b, 0
4468   21BD C6 08 22      je _if87_else
4469   21C0             _if87_TRUE:
4470   21C0             ; *t++ = *prog++; 
4471   21C0 FA FF FF      lea d, [bp + -1] ; $t
4472   21C3 2A            mov b, [d]
4473   21C4 38 00 00      mov c, 0
4474   21C7 FD 77         inc b
4475   21C9 FA FF FF      lea d, [bp + -1] ; $t
4476   21CC FD 43         mov [d], b
4477   21CE FD 7D         dec b
4478   21D0 D8            push b
4479   21D1 3B DD 3E      mov d, _prog ; $prog
4480   21D4 2A            mov b, [d]
4481   21D5 38 00 00      mov c, 0
4482   21D8 FD 77         inc b
4483   21DA 3B DD 3E      mov d, _prog ; $prog
4484   21DD FD 43         mov [d], b
4485   21DF FD 7D         dec b
4486   21E1 74            mov d, b
4487   21E2 32            mov bl, [d]
4488   21E3 A7 00         mov bh, 0
4489   21E5 38 00 00      mov c, 0
4490   21E8 E7            pop d
4491   21E9 FD 3E         mov [d], bl
4492   21EB             ; tok = MOD; 
4493   21EB 3B D9 3E      mov d, _tok ; $tok
4494   21EE DA            push d
4495   21EF FD 2E 07 00   mov32 cb, $7 ; enum element: MOD
4495   21F3 00 00 
4496   21F5 E7            pop d
4497   21F6 FD 43         mov [d], b
4498   21F8             ; toktype = DELIMITER;   
4499   21F8 3B DB 3E      mov d, _toktype ; $toktype
4500   21FB DA            push d
4501   21FC FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4501   2200 00 00 
4502   2202 E7            pop d
4503   2203 FD 43         mov [d], b
4504   2205 0A 78 24      jmp _if87_exit
4505   2208             _if87_else:
4506   2208             ; if(*prog == '('){ 
4507   2208             _if88_cond:
4508   2208 3B DD 3E      mov d, _prog ; $prog
4509   220B 2A            mov b, [d]
4510   220C 38 00 00      mov c, 0
4511   220F 74            mov d, b
4512   2210 32            mov bl, [d]
4513   2211 A7 00         mov bh, 0
4514   2213 38 00 00      mov c, 0
4515   2216             ; --- START RELATIONAL
4516   2216 D7            push a
4517   2217 11            mov a, b
4518   2218 FD 2E 28 00   mov32 cb, $00000028
4518   221C 00 00 
4519   221E B0            cmp a, b
4520   221F FD 71         seq ; ==
4521   2221 E4            pop a
4522   2222             ; --- END RELATIONAL
4523   2222 C0 00 00      cmp b, 0
4524   2225 C6 70 22      je _if88_else
4525   2228             _if88_TRUE:
4526   2228             ; *t++ = *prog++; 
4527   2228 FA FF FF      lea d, [bp + -1] ; $t
4528   222B 2A            mov b, [d]
4529   222C 38 00 00      mov c, 0
4530   222F FD 77         inc b
4531   2231 FA FF FF      lea d, [bp + -1] ; $t
4532   2234 FD 43         mov [d], b
4533   2236 FD 7D         dec b
4534   2238 D8            push b
4535   2239 3B DD 3E      mov d, _prog ; $prog
4536   223C 2A            mov b, [d]
4537   223D 38 00 00      mov c, 0
4538   2240 FD 77         inc b
4539   2242 3B DD 3E      mov d, _prog ; $prog
4540   2245 FD 43         mov [d], b
4541   2247 FD 7D         dec b
4542   2249 74            mov d, b
4543   224A 32            mov bl, [d]
4544   224B A7 00         mov bh, 0
4545   224D 38 00 00      mov c, 0
4546   2250 E7            pop d
4547   2251 FD 3E         mov [d], bl
4548   2253             ; tok = OPENING_PAREN; 
4549   2253 3B D9 3E      mov d, _tok ; $tok
4550   2256 DA            push d
4551   2257 FD 2E 1C 00   mov32 cb, $1c ; enum element: OPENING_PAREN
4551   225B 00 00 
4552   225D E7            pop d
4553   225E FD 43         mov [d], b
4554   2260             ; toktype = DELIMITER;   
4555   2260 3B DB 3E      mov d, _toktype ; $toktype
4556   2263 DA            push d
4557   2264 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4557   2268 00 00 
4558   226A E7            pop d
4559   226B FD 43         mov [d], b
4560   226D 0A 78 24      jmp _if88_exit
4561   2270             _if88_else:
4562   2270             ; if(*prog == ')'){ 
4563   2270             _if89_cond:
4564   2270 3B DD 3E      mov d, _prog ; $prog
4565   2273 2A            mov b, [d]
4566   2274 38 00 00      mov c, 0
4567   2277 74            mov d, b
4568   2278 32            mov bl, [d]
4569   2279 A7 00         mov bh, 0
4570   227B 38 00 00      mov c, 0
4571   227E             ; --- START RELATIONAL
4572   227E D7            push a
4573   227F 11            mov a, b
4574   2280 FD 2E 29 00   mov32 cb, $00000029
4574   2284 00 00 
4575   2286 B0            cmp a, b
4576   2287 FD 71         seq ; ==
4577   2289 E4            pop a
4578   228A             ; --- END RELATIONAL
4579   228A C0 00 00      cmp b, 0
4580   228D C6 D8 22      je _if89_else
4581   2290             _if89_TRUE:
4582   2290             ; *t++ = *prog++; 
4583   2290 FA FF FF      lea d, [bp + -1] ; $t
4584   2293 2A            mov b, [d]
4585   2294 38 00 00      mov c, 0
4586   2297 FD 77         inc b
4587   2299 FA FF FF      lea d, [bp + -1] ; $t
4588   229C FD 43         mov [d], b
4589   229E FD 7D         dec b
4590   22A0 D8            push b
4591   22A1 3B DD 3E      mov d, _prog ; $prog
4592   22A4 2A            mov b, [d]
4593   22A5 38 00 00      mov c, 0
4594   22A8 FD 77         inc b
4595   22AA 3B DD 3E      mov d, _prog ; $prog
4596   22AD FD 43         mov [d], b
4597   22AF FD 7D         dec b
4598   22B1 74            mov d, b
4599   22B2 32            mov bl, [d]
4600   22B3 A7 00         mov bh, 0
4601   22B5 38 00 00      mov c, 0
4602   22B8 E7            pop d
4603   22B9 FD 3E         mov [d], bl
4604   22BB             ; tok = CLOSING_PAREN; 
4605   22BB 3B D9 3E      mov d, _tok ; $tok
4606   22BE DA            push d
4607   22BF FD 2E 1D 00   mov32 cb, $1d ; enum element: CLOSING_PAREN
4607   22C3 00 00 
4608   22C5 E7            pop d
4609   22C6 FD 43         mov [d], b
4610   22C8             ; toktype = DELIMITER;   
4611   22C8 3B DB 3E      mov d, _toktype ; $toktype
4612   22CB DA            push d
4613   22CC FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4613   22D0 00 00 
4614   22D2 E7            pop d
4615   22D3 FD 43         mov [d], b
4616   22D5 0A 78 24      jmp _if89_exit
4617   22D8             _if89_else:
4618   22D8             ; if(*prog == ';'){ 
4619   22D8             _if90_cond:
4620   22D8 3B DD 3E      mov d, _prog ; $prog
4621   22DB 2A            mov b, [d]
4622   22DC 38 00 00      mov c, 0
4623   22DF 74            mov d, b
4624   22E0 32            mov bl, [d]
4625   22E1 A7 00         mov bh, 0
4626   22E3 38 00 00      mov c, 0
4627   22E6             ; --- START RELATIONAL
4628   22E6 D7            push a
4629   22E7 11            mov a, b
4630   22E8 FD 2E 3B 00   mov32 cb, $0000003b
4630   22EC 00 00 
4631   22EE B0            cmp a, b
4632   22EF FD 71         seq ; ==
4633   22F1 E4            pop a
4634   22F2             ; --- END RELATIONAL
4635   22F2 C0 00 00      cmp b, 0
4636   22F5 C6 40 23      je _if90_else
4637   22F8             _if90_TRUE:
4638   22F8             ; *t++ = *prog++; 
4639   22F8 FA FF FF      lea d, [bp + -1] ; $t
4640   22FB 2A            mov b, [d]
4641   22FC 38 00 00      mov c, 0
4642   22FF FD 77         inc b
4643   2301 FA FF FF      lea d, [bp + -1] ; $t
4644   2304 FD 43         mov [d], b
4645   2306 FD 7D         dec b
4646   2308 D8            push b
4647   2309 3B DD 3E      mov d, _prog ; $prog
4648   230C 2A            mov b, [d]
4649   230D 38 00 00      mov c, 0
4650   2310 FD 77         inc b
4651   2312 3B DD 3E      mov d, _prog ; $prog
4652   2315 FD 43         mov [d], b
4653   2317 FD 7D         dec b
4654   2319 74            mov d, b
4655   231A 32            mov bl, [d]
4656   231B A7 00         mov bh, 0
4657   231D 38 00 00      mov c, 0
4658   2320 E7            pop d
4659   2321 FD 3E         mov [d], bl
4660   2323             ; tok = SEMICOLON; 
4661   2323 3B D9 3E      mov d, _tok ; $tok
4662   2326 DA            push d
4663   2327 FD 2E 23 00   mov32 cb, $23 ; enum element: SEMICOLON
4663   232B 00 00 
4664   232D E7            pop d
4665   232E FD 43         mov [d], b
4666   2330             ; toktype = DELIMITER;   
4667   2330 3B DB 3E      mov d, _toktype ; $toktype
4668   2333 DA            push d
4669   2334 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4669   2338 00 00 
4670   233A E7            pop d
4671   233B FD 43         mov [d], b
4672   233D 0A 78 24      jmp _if90_exit
4673   2340             _if90_else:
4674   2340             ; if(*prog == ':'){ 
4675   2340             _if91_cond:
4676   2340 3B DD 3E      mov d, _prog ; $prog
4677   2343 2A            mov b, [d]
4678   2344 38 00 00      mov c, 0
4679   2347 74            mov d, b
4680   2348 32            mov bl, [d]
4681   2349 A7 00         mov bh, 0
4682   234B 38 00 00      mov c, 0
4683   234E             ; --- START RELATIONAL
4684   234E D7            push a
4685   234F 11            mov a, b
4686   2350 FD 2E 3A 00   mov32 cb, $0000003a
4686   2354 00 00 
4687   2356 B0            cmp a, b
4688   2357 FD 71         seq ; ==
4689   2359 E4            pop a
4690   235A             ; --- END RELATIONAL
4691   235A C0 00 00      cmp b, 0
4692   235D C6 A8 23      je _if91_else
4693   2360             _if91_TRUE:
4694   2360             ; *t++ = *prog++; 
4695   2360 FA FF FF      lea d, [bp + -1] ; $t
4696   2363 2A            mov b, [d]
4697   2364 38 00 00      mov c, 0
4698   2367 FD 77         inc b
4699   2369 FA FF FF      lea d, [bp + -1] ; $t
4700   236C FD 43         mov [d], b
4701   236E FD 7D         dec b
4702   2370 D8            push b
4703   2371 3B DD 3E      mov d, _prog ; $prog
4704   2374 2A            mov b, [d]
4705   2375 38 00 00      mov c, 0
4706   2378 FD 77         inc b
4707   237A 3B DD 3E      mov d, _prog ; $prog
4708   237D FD 43         mov [d], b
4709   237F FD 7D         dec b
4710   2381 74            mov d, b
4711   2382 32            mov bl, [d]
4712   2383 A7 00         mov bh, 0
4713   2385 38 00 00      mov c, 0
4714   2388 E7            pop d
4715   2389 FD 3E         mov [d], bl
4716   238B             ; tok = COLON; 
4717   238B 3B D9 3E      mov d, _tok ; $tok
4718   238E DA            push d
4719   238F FD 2E 22 00   mov32 cb, $22 ; enum element: COLON
4719   2393 00 00 
4720   2395 E7            pop d
4721   2396 FD 43         mov [d], b
4722   2398             ; toktype = DELIMITER;   
4723   2398 3B DB 3E      mov d, _toktype ; $toktype
4724   239B DA            push d
4725   239C FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4725   23A0 00 00 
4726   23A2 E7            pop d
4727   23A3 FD 43         mov [d], b
4728   23A5 0A 78 24      jmp _if91_exit
4729   23A8             _if91_else:
4730   23A8             ; if(*prog == ','){ 
4731   23A8             _if92_cond:
4732   23A8 3B DD 3E      mov d, _prog ; $prog
4733   23AB 2A            mov b, [d]
4734   23AC 38 00 00      mov c, 0
4735   23AF 74            mov d, b
4736   23B0 32            mov bl, [d]
4737   23B1 A7 00         mov bh, 0
4738   23B3 38 00 00      mov c, 0
4739   23B6             ; --- START RELATIONAL
4740   23B6 D7            push a
4741   23B7 11            mov a, b
4742   23B8 FD 2E 2C 00   mov32 cb, $0000002c
4742   23BC 00 00 
4743   23BE B0            cmp a, b
4744   23BF FD 71         seq ; ==
4745   23C1 E4            pop a
4746   23C2             ; --- END RELATIONAL
4747   23C2 C0 00 00      cmp b, 0
4748   23C5 C6 10 24      je _if92_else
4749   23C8             _if92_TRUE:
4750   23C8             ; *t++ = *prog++; 
4751   23C8 FA FF FF      lea d, [bp + -1] ; $t
4752   23CB 2A            mov b, [d]
4753   23CC 38 00 00      mov c, 0
4754   23CF FD 77         inc b
4755   23D1 FA FF FF      lea d, [bp + -1] ; $t
4756   23D4 FD 43         mov [d], b
4757   23D6 FD 7D         dec b
4758   23D8 D8            push b
4759   23D9 3B DD 3E      mov d, _prog ; $prog
4760   23DC 2A            mov b, [d]
4761   23DD 38 00 00      mov c, 0
4762   23E0 FD 77         inc b
4763   23E2 3B DD 3E      mov d, _prog ; $prog
4764   23E5 FD 43         mov [d], b
4765   23E7 FD 7D         dec b
4766   23E9 74            mov d, b
4767   23EA 32            mov bl, [d]
4768   23EB A7 00         mov bh, 0
4769   23ED 38 00 00      mov c, 0
4770   23F0 E7            pop d
4771   23F1 FD 3E         mov [d], bl
4772   23F3             ; tok = COMMA; 
4773   23F3 3B D9 3E      mov d, _tok ; $tok
4774   23F6 DA            push d
4775   23F7 FD 2E 24 00   mov32 cb, $24 ; enum element: COMMA
4775   23FB 00 00 
4776   23FD E7            pop d
4777   23FE FD 43         mov [d], b
4778   2400             ; toktype = DELIMITER;   
4779   2400 3B DB 3E      mov d, _toktype ; $toktype
4780   2403 DA            push d
4781   2404 FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4781   2408 00 00 
4782   240A E7            pop d
4783   240B FD 43         mov [d], b
4784   240D 0A 78 24      jmp _if92_exit
4785   2410             _if92_else:
4786   2410             ; if(*prog == '.'){ 
4787   2410             _if93_cond:
4788   2410 3B DD 3E      mov d, _prog ; $prog
4789   2413 2A            mov b, [d]
4790   2414 38 00 00      mov c, 0
4791   2417 74            mov d, b
4792   2418 32            mov bl, [d]
4793   2419 A7 00         mov bh, 0
4794   241B 38 00 00      mov c, 0
4795   241E             ; --- START RELATIONAL
4796   241E D7            push a
4797   241F 11            mov a, b
4798   2420 FD 2E 2E 00   mov32 cb, $0000002e
4798   2424 00 00 
4799   2426 B0            cmp a, b
4800   2427 FD 71         seq ; ==
4801   2429 E4            pop a
4802   242A             ; --- END RELATIONAL
4803   242A C0 00 00      cmp b, 0
4804   242D C6 78 24      je _if93_exit
4805   2430             _if93_TRUE:
4806   2430             ; *t++ = *prog++; 
4807   2430 FA FF FF      lea d, [bp + -1] ; $t
4808   2433 2A            mov b, [d]
4809   2434 38 00 00      mov c, 0
4810   2437 FD 77         inc b
4811   2439 FA FF FF      lea d, [bp + -1] ; $t
4812   243C FD 43         mov [d], b
4813   243E FD 7D         dec b
4814   2440 D8            push b
4815   2441 3B DD 3E      mov d, _prog ; $prog
4816   2444 2A            mov b, [d]
4817   2445 38 00 00      mov c, 0
4818   2448 FD 77         inc b
4819   244A 3B DD 3E      mov d, _prog ; $prog
4820   244D FD 43         mov [d], b
4821   244F FD 7D         dec b
4822   2451 74            mov d, b
4823   2452 32            mov bl, [d]
4824   2453 A7 00         mov bh, 0
4825   2455 38 00 00      mov c, 0
4826   2458 E7            pop d
4827   2459 FD 3E         mov [d], bl
4828   245B             ; tok = DOT; 
4829   245B 3B D9 3E      mov d, _tok ; $tok
4830   245E DA            push d
4831   245F FD 2E 25 00   mov32 cb, $25 ; enum element: DOT
4831   2463 00 00 
4832   2465 E7            pop d
4833   2466 FD 43         mov [d], b
4834   2468             ; toktype = DELIMITER;   
4835   2468 3B DB 3E      mov d, _toktype ; $toktype
4836   246B DA            push d
4837   246C FD 2E 01 00   mov32 cb, $1 ; enum element: DELIMITER
4837   2470 00 00 
4838   2472 E7            pop d
4839   2473 FD 43         mov [d], b
4840   2475 0A 78 24      jmp _if93_exit
4841   2478             _if93_exit:
4842   2478             _if92_exit:
4843   2478             _if91_exit:
4844   2478             _if90_exit:
4845   2478             _if89_exit:
4846   2478             _if88_exit:
4847   2478             _if87_exit:
4848   2478             _if86_exit:
4849   2478             _if85_exit:
4850   2478             _if84_exit:
4851   2478             _if83_exit:
4852   2478             _if82_exit:
4853   2478             _if80_exit:
4854   2478             _if78_exit:
4855   2478             _if76_exit:
4856   2478             _if73_exit:
4857   2478             _if70_exit:
4858   2478             _if69_exit:
4859   2478             _if67_exit:
4860   2478             _if65_exit:
4861   2478             _if63_exit:
4862   2478             _if62_exit:
4863   2478             _if61_exit:
4864   2478             _if60_exit:
4865   2478             _if59_exit:
4866   2478             _if58_exit:
4867   2478             _if55_exit:
4868   2478             _if53_exit:
4869   2478             _if51_exit:
4870   2478             ; *t = '\0'; 
4871   2478 FA FF FF      lea d, [bp + -1] ; $t
4872   247B 2A            mov b, [d]
4873   247C 38 00 00      mov c, 0
4874   247F D8            push b
4875   2480 FD 2E 00 00   mov32 cb, $00000000
4875   2484 00 00 
4876   2486 E7            pop d
4877   2487 FD 3E         mov [d], bl
4878   2489 F9            leave
4879   248A 09            ret
4880   248B             
4881   248B             is_space:
4882   248B F8 00 00      enter 0 ; (push bp; mov bp, sp)
4883   248E             ; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
4884   248E FA 05 00      lea d, [bp + 5] ; $c
4885   2491 32            mov bl, [d]
4886   2492 A7 00         mov bh, 0
4887   2494 38 00 00      mov c, 0
4888   2497             ; --- START RELATIONAL
4889   2497 D7            push a
4890   2498 11            mov a, b
4891   2499 FD 2E 20 00   mov32 cb, $00000020
4891   249D 00 00 
4892   249F B0            cmp a, b
4893   24A0 FD 71         seq ; ==
4894   24A2 E4            pop a
4895   24A3             ; --- END RELATIONAL
4896   24A3             ; --- START LOGICAL OR
4897   24A3 D7            push a
4898   24A4 11            mov a, b
4899   24A5 FA 05 00      lea d, [bp + 5] ; $c
4900   24A8 32            mov bl, [d]
4901   24A9 A7 00         mov bh, 0
4902   24AB 38 00 00      mov c, 0
4903   24AE             ; --- START RELATIONAL
4904   24AE D7            push a
4905   24AF 11            mov a, b
4906   24B0 FD 2E 09 00   mov32 cb, $00000009
4906   24B4 00 00 
4907   24B6 B0            cmp a, b
4908   24B7 FD 71         seq ; ==
4909   24B9 E4            pop a
4910   24BA             ; --- END RELATIONAL
4911   24BA FD A8         sor a, b ; ||
4912   24BC 11            mov a, b
4913   24BD FA 05 00      lea d, [bp + 5] ; $c
4914   24C0 32            mov bl, [d]
4915   24C1 A7 00         mov bh, 0
4916   24C3 38 00 00      mov c, 0
4917   24C6             ; --- START RELATIONAL
4918   24C6 D7            push a
4919   24C7 11            mov a, b
4920   24C8 FD 2E 0A 00   mov32 cb, $0000000a
4920   24CC 00 00 
4921   24CE B0            cmp a, b
4922   24CF FD 71         seq ; ==
4923   24D1 E4            pop a
4924   24D2             ; --- END RELATIONAL
4925   24D2 FD A8         sor a, b ; ||
4926   24D4 11            mov a, b
4927   24D5 FA 05 00      lea d, [bp + 5] ; $c
4928   24D8 32            mov bl, [d]
4929   24D9 A7 00         mov bh, 0
4930   24DB 38 00 00      mov c, 0
4931   24DE             ; --- START RELATIONAL
4932   24DE D7            push a
4933   24DF 11            mov a, b
4934   24E0 FD 2E 0D 00   mov32 cb, $0000000d
4934   24E4 00 00 
4935   24E6 B0            cmp a, b
4936   24E7 FD 71         seq ; ==
4937   24E9 E4            pop a
4938   24EA             ; --- END RELATIONAL
4939   24EA FD A8         sor a, b ; ||
4940   24EC E4            pop a
4941   24ED             ; --- END LOGICAL OR
4942   24ED F9            leave
4943   24EE 09            ret
4944   24EF             
4945   24EF             is_digit:
4946   24EF F8 00 00      enter 0 ; (push bp; mov bp, sp)
4947   24F2             ; return c >= '0' && c <= '9'; 
4948   24F2 FA 05 00      lea d, [bp + 5] ; $c
4949   24F5 32            mov bl, [d]
4950   24F6 A7 00         mov bh, 0
4951   24F8 38 00 00      mov c, 0
4952   24FB             ; --- START RELATIONAL
4953   24FB D7            push a
4954   24FC 11            mov a, b
4955   24FD FD 2E 30 00   mov32 cb, $00000030
4955   2501 00 00 
4956   2503 B0            cmp a, b
4957   2504 FD 80         sge ; >=
4958   2506 E4            pop a
4959   2507             ; --- END RELATIONAL
4960   2507             ; --- START LOGICAL AND
4961   2507 D7            push a
4962   2508 11            mov a, b
4963   2509 FA 05 00      lea d, [bp + 5] ; $c
4964   250C 32            mov bl, [d]
4965   250D A7 00         mov bh, 0
4966   250F 38 00 00      mov c, 0
4967   2512             ; --- START RELATIONAL
4968   2512 D7            push a
4969   2513 11            mov a, b
4970   2514 FD 2E 39 00   mov32 cb, $00000039
4970   2518 00 00 
4971   251A B0            cmp a, b
4972   251B FD 74         sle ; <= (signed)
4973   251D E4            pop a
4974   251E             ; --- END RELATIONAL
4975   251E FD A7         sand a, b
4976   2520 E4            pop a
4977   2521             ; --- END LOGICAL AND
4978   2521 F9            leave
4979   2522 09            ret
4980   2523             
4981   2523             is_alpha:
4982   2523 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4983   2526             ; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
4984   2526 FA 05 00      lea d, [bp + 5] ; $c
4985   2529 32            mov bl, [d]
4986   252A A7 00         mov bh, 0
4987   252C 38 00 00      mov c, 0
4988   252F             ; --- START RELATIONAL
4989   252F D7            push a
4990   2530 11            mov a, b
4991   2531 FD 2E 61 00   mov32 cb, $00000061
4991   2535 00 00 
4992   2537 B0            cmp a, b
4993   2538 FD 80         sge ; >=
4994   253A E4            pop a
4995   253B             ; --- END RELATIONAL
4996   253B             ; --- START LOGICAL AND
4997   253B D7            push a
4998   253C 11            mov a, b
4999   253D FA 05 00      lea d, [bp + 5] ; $c
5000   2540 32            mov bl, [d]
5001   2541 A7 00         mov bh, 0
5002   2543 38 00 00      mov c, 0
5003   2546             ; --- START RELATIONAL
5004   2546 D7            push a
5005   2547 11            mov a, b
5006   2548 FD 2E 7A 00   mov32 cb, $0000007a
5006   254C 00 00 
5007   254E B0            cmp a, b
5008   254F FD 74         sle ; <= (signed)
5009   2551 E4            pop a
5010   2552             ; --- END RELATIONAL
5011   2552 FD A7         sand a, b
5012   2554 E4            pop a
5013   2555             ; --- END LOGICAL AND
5014   2555             ; --- START LOGICAL OR
5015   2555 D7            push a
5016   2556 11            mov a, b
5017   2557 FA 05 00      lea d, [bp + 5] ; $c
5018   255A 32            mov bl, [d]
5019   255B A7 00         mov bh, 0
5020   255D 38 00 00      mov c, 0
5021   2560             ; --- START RELATIONAL
5022   2560 D7            push a
5023   2561 11            mov a, b
5024   2562 FD 2E 41 00   mov32 cb, $00000041
5024   2566 00 00 
5025   2568 B0            cmp a, b
5026   2569 FD 80         sge ; >=
5027   256B E4            pop a
5028   256C             ; --- END RELATIONAL
5029   256C             ; --- START LOGICAL AND
5030   256C D7            push a
5031   256D 11            mov a, b
5032   256E FA 05 00      lea d, [bp + 5] ; $c
5033   2571 32            mov bl, [d]
5034   2572 A7 00         mov bh, 0
5035   2574 38 00 00      mov c, 0
5036   2577             ; --- START RELATIONAL
5037   2577 D7            push a
5038   2578 11            mov a, b
5039   2579 FD 2E 5A 00   mov32 cb, $0000005a
5039   257D 00 00 
5040   257F B0            cmp a, b
5041   2580 FD 74         sle ; <= (signed)
5042   2582 E4            pop a
5043   2583             ; --- END RELATIONAL
5044   2583 FD A7         sand a, b
5045   2585 E4            pop a
5046   2586             ; --- END LOGICAL AND
5047   2586 FD A8         sor a, b ; ||
5048   2588 11            mov a, b
5049   2589 FA 05 00      lea d, [bp + 5] ; $c
5050   258C 32            mov bl, [d]
5051   258D A7 00         mov bh, 0
5052   258F 38 00 00      mov c, 0
5053   2592             ; --- START RELATIONAL
5054   2592 D7            push a
5055   2593 11            mov a, b
5056   2594 FD 2E 5F 00   mov32 cb, $0000005f
5056   2598 00 00 
5057   259A B0            cmp a, b
5058   259B FD 71         seq ; ==
5059   259D E4            pop a
5060   259E             ; --- END RELATIONAL
5061   259E FD A8         sor a, b ; ||
5062   25A0 E4            pop a
5063   25A1             ; --- END LOGICAL OR
5064   25A1 F9            leave
5065   25A2 09            ret
5066   25A3             
5067   25A3             error:
5068   25A3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5069   25A6             ; printf("\nError: "); 
5070   25A6             ; --- START FUNCTION CALL
5071   25A6 26 6C 41      mov b, _s16 ; "\nError: "
5072   25A9 FD AB         swp b
5073   25AB D8            push b
5074   25AC 07 D0 25      call printf
5075   25AF 51 02 00      add sp, 2
5076   25B2             ; --- END FUNCTION CALL
5077   25B2             ; printf(msg); 
5078   25B2             ; --- START FUNCTION CALL
5079   25B2 FA 05 00      lea d, [bp + 5] ; $msg
5080   25B5 2A            mov b, [d]
5081   25B6 38 00 00      mov c, 0
5082   25B9 FD AB         swp b
5083   25BB D8            push b
5084   25BC 07 D0 25      call printf
5085   25BF 51 02 00      add sp, 2
5086   25C2             ; --- END FUNCTION CALL
5087   25C2             ; printf("\n"); 
5088   25C2             ; --- START FUNCTION CALL
5089   25C2 26 75 41      mov b, _s17 ; "\n"
5090   25C5 FD AB         swp b
5091   25C7 D8            push b
5092   25C8 07 D0 25      call printf
5093   25CB 51 02 00      add sp, 2
5094   25CE             ; --- END FUNCTION CALL
5095   25CE F9            leave
5096   25CF 09            ret
5097   25D0             
5098   25D0             printf:
5099   25D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5100   25D3             ; char *p, *format_p; 
5101   25D3 52 02 00      sub sp, 2
5102   25D6 52 02 00      sub sp, 2
5103   25D9             ; format_p = format; 
5104   25D9 FA FD FF      lea d, [bp + -3] ; $format_p
5105   25DC DA            push d
5106   25DD FA 05 00      lea d, [bp + 5] ; $format
5107   25E0 2A            mov b, [d]
5108   25E1 38 00 00      mov c, 0
5109   25E4 E7            pop d
5110   25E5 FD 43         mov [d], b
5111   25E7             ; p = &format + 2; 
5112   25E7 FA FF FF      lea d, [bp + -1] ; $p
5113   25EA DA            push d
5114   25EB FA 05 00      lea d, [bp + 5] ; $format
5115   25EE 2D            mov b, d
5116   25EF             ; --- START TERMS
5117   25EF D7            push a
5118   25F0 11            mov a, b
5119   25F1 FD 2E 02 00   mov32 cb, $00000002
5119   25F5 00 00 
5120   25F7 56            add b, a
5121   25F8 E4            pop a
5122   25F9             ; --- END TERMS
5123   25F9 E7            pop d
5124   25FA FD 43         mov [d], b
5125   25FC             ; for(;;){ 
5126   25FC             _for94_init:
5127   25FC             _for94_cond:
5128   25FC             _for94_block:
5129   25FC             ; if(!*format_p) break; 
5130   25FC             _if95_cond:
5131   25FC FA FD FF      lea d, [bp + -3] ; $format_p
5132   25FF 2A            mov b, [d]
5133   2600 38 00 00      mov c, 0
5134   2603 74            mov d, b
5135   2604 32            mov bl, [d]
5136   2605 A7 00         mov bh, 0
5137   2607 38 00 00      mov c, 0
5138   260A C0 00 00      cmp b, 0
5139   260D FD 71         seq ; !
5140   260F C0 00 00      cmp b, 0
5141   2612 C6 1B 26      je _if95_else
5142   2615             _if95_TRUE:
5143   2615             ; break; 
5144   2615 0A BB 28      jmp _for94_exit ; for break
5145   2618 0A A8 28      jmp _if95_exit
5146   261B             _if95_else:
5147   261B             ; if(*format_p == '%'){ 
5148   261B             _if96_cond:
5149   261B FA FD FF      lea d, [bp + -3] ; $format_p
5150   261E 2A            mov b, [d]
5151   261F 38 00 00      mov c, 0
5152   2622 74            mov d, b
5153   2623 32            mov bl, [d]
5154   2624 A7 00         mov bh, 0
5155   2626 38 00 00      mov c, 0
5156   2629             ; --- START RELATIONAL
5157   2629 D7            push a
5158   262A 11            mov a, b
5159   262B FD 2E 25 00   mov32 cb, $00000025
5159   262F 00 00 
5160   2631 B0            cmp a, b
5161   2632 FD 71         seq ; ==
5162   2634 E4            pop a
5163   2635             ; --- END RELATIONAL
5164   2635 C0 00 00      cmp b, 0
5165   2638 C6 93 28      je _if96_else
5166   263B             _if96_TRUE:
5167   263B             ; format_p++; 
5168   263B FA FD FF      lea d, [bp + -3] ; $format_p
5169   263E 2A            mov b, [d]
5170   263F 38 00 00      mov c, 0
5171   2642 FD 77         inc b
5172   2644 FA FD FF      lea d, [bp + -3] ; $format_p
5173   2647 FD 43         mov [d], b
5174   2649 FD 7D         dec b
5175   264B             ; switch(*format_p){ 
5176   264B             _switch97_expr:
5177   264B FA FD FF      lea d, [bp + -3] ; $format_p
5178   264E 2A            mov b, [d]
5179   264F 38 00 00      mov c, 0
5180   2652 74            mov d, b
5181   2653 32            mov bl, [d]
5182   2654 A7 00         mov bh, 0
5183   2656 38 00 00      mov c, 0
5184   2659             _switch97_comparisons:
5185   2659 C1 6C         cmp bl, $6c
5186   265B C6 87 26      je _switch97_case0
5187   265E C1 4C         cmp bl, $4c
5188   2660 C6 87 26      je _switch97_case1
5189   2663 C1 64         cmp bl, $64
5190   2665 C6 97 27      je _switch97_case2
5191   2668 C1 69         cmp bl, $69
5192   266A C6 97 27      je _switch97_case3
5193   266D C1 75         cmp bl, $75
5194   266F C6 C7 27      je _switch97_case4
5195   2672 C1 78         cmp bl, $78
5196   2674 C6 F7 27      je _switch97_case5
5197   2677 C1 63         cmp bl, $63
5198   2679 C6 27 28      je _switch97_case6
5199   267C C1 73         cmp bl, $73
5200   267E C6 57 28      je _switch97_case7
5201   2681 0A 84 28      jmp _switch97_default
5202   2684 0A 90 28      jmp _switch97_exit
5203   2687             _switch97_case0:
5204   2687             _switch97_case1:
5205   2687             ; format_p++; 
5206   2687 FA FD FF      lea d, [bp + -3] ; $format_p
5207   268A 2A            mov b, [d]
5208   268B 38 00 00      mov c, 0
5209   268E FD 77         inc b
5210   2690 FA FD FF      lea d, [bp + -3] ; $format_p
5211   2693 FD 43         mov [d], b
5212   2695 FD 7D         dec b
5213   2697             ; if(*format_p == 'd' || *format_p == 'i') 
5214   2697             _if98_cond:
5215   2697 FA FD FF      lea d, [bp + -3] ; $format_p
5216   269A 2A            mov b, [d]
5217   269B 38 00 00      mov c, 0
5218   269E 74            mov d, b
5219   269F 32            mov bl, [d]
5220   26A0 A7 00         mov bh, 0
5221   26A2 38 00 00      mov c, 0
5222   26A5             ; --- START RELATIONAL
5223   26A5 D7            push a
5224   26A6 11            mov a, b
5225   26A7 FD 2E 64 00   mov32 cb, $00000064
5225   26AB 00 00 
5226   26AD B0            cmp a, b
5227   26AE FD 71         seq ; ==
5228   26B0 E4            pop a
5229   26B1             ; --- END RELATIONAL
5230   26B1             ; --- START LOGICAL OR
5231   26B1 D7            push a
5232   26B2 11            mov a, b
5233   26B3 FA FD FF      lea d, [bp + -3] ; $format_p
5234   26B6 2A            mov b, [d]
5235   26B7 38 00 00      mov c, 0
5236   26BA 74            mov d, b
5237   26BB 32            mov bl, [d]
5238   26BC A7 00         mov bh, 0
5239   26BE 38 00 00      mov c, 0
5240   26C1             ; --- START RELATIONAL
5241   26C1 D7            push a
5242   26C2 11            mov a, b
5243   26C3 FD 2E 69 00   mov32 cb, $00000069
5243   26C7 00 00 
5244   26C9 B0            cmp a, b
5245   26CA FD 71         seq ; ==
5246   26CC E4            pop a
5247   26CD             ; --- END RELATIONAL
5248   26CD FD A8         sor a, b ; ||
5249   26CF E4            pop a
5250   26D0             ; --- END LOGICAL OR
5251   26D0 C0 00 00      cmp b, 0
5252   26D3 C6 F4 26      je _if98_else
5253   26D6             _if98_TRUE:
5254   26D6             ; print_signed_long(*(long *)p); 
5255   26D6             ; --- START FUNCTION CALL
5256   26D6 FA FF FF      lea d, [bp + -1] ; $p
5257   26D9 2A            mov b, [d]
5258   26DA 38 00 00      mov c, 0
5259   26DD 74            mov d, b
5260   26DE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
5261   26E1 FD 39         mov c, b ; And place it into C
5262   26E3 2A            mov b, [d] ; Lower Word in B
5263   26E4 12            mov a, c
5264   26E5 FD AA         swp a
5265   26E7 D7            push a
5266   26E8 FD AB         swp b
5267   26EA D8            push b
5268   26EB 07 BD 28      call print_signed_long
5269   26EE 51 04 00      add sp, 4
5270   26F1             ; --- END FUNCTION CALL
5271   26F1 0A 7C 27      jmp _if98_exit
5272   26F4             _if98_else:
5273   26F4             ; if(*format_p == 'u') 
5274   26F4             _if99_cond:
5275   26F4 FA FD FF      lea d, [bp + -3] ; $format_p
5276   26F7 2A            mov b, [d]
5277   26F8 38 00 00      mov c, 0
5278   26FB 74            mov d, b
5279   26FC 32            mov bl, [d]
5280   26FD A7 00         mov bh, 0
5281   26FF 38 00 00      mov c, 0
5282   2702             ; --- START RELATIONAL
5283   2702 D7            push a
5284   2703 11            mov a, b
5285   2704 FD 2E 75 00   mov32 cb, $00000075
5285   2708 00 00 
5286   270A B0            cmp a, b
5287   270B FD 71         seq ; ==
5288   270D E4            pop a
5289   270E             ; --- END RELATIONAL
5290   270E C0 00 00      cmp b, 0
5291   2711 C6 32 27      je _if99_else
5292   2714             _if99_TRUE:
5293   2714             ; print_unsigned_long(*(unsigned long *)p); 
5294   2714             ; --- START FUNCTION CALL
5295   2714 FA FF FF      lea d, [bp + -1] ; $p
5296   2717 2A            mov b, [d]
5297   2718 38 00 00      mov c, 0
5298   271B 74            mov d, b
5299   271C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
5300   271F FD 39         mov c, b ; And place it into C
5301   2721 2A            mov b, [d] ; Lower Word in B
5302   2722 12            mov a, c
5303   2723 FD AA         swp a
5304   2725 D7            push a
5305   2726 FD AB         swp b
5306   2728 D8            push b
5307   2729 07 50 2A      call print_unsigned_long
5308   272C 51 04 00      add sp, 4
5309   272F             ; --- END FUNCTION CALL
5310   272F 0A 7C 27      jmp _if99_exit
5311   2732             _if99_else:
5312   2732             ; if(*format_p == 'x') 
5313   2732             _if100_cond:
5314   2732 FA FD FF      lea d, [bp + -3] ; $format_p
5315   2735 2A            mov b, [d]
5316   2736 38 00 00      mov c, 0
5317   2739 74            mov d, b
5318   273A 32            mov bl, [d]
5319   273B A7 00         mov bh, 0
5320   273D 38 00 00      mov c, 0
5321   2740             ; --- START RELATIONAL
5322   2740 D7            push a
5323   2741 11            mov a, b
5324   2742 FD 2E 78 00   mov32 cb, $00000078
5324   2746 00 00 
5325   2748 B0            cmp a, b
5326   2749 FD 71         seq ; ==
5327   274B E4            pop a
5328   274C             ; --- END RELATIONAL
5329   274C C0 00 00      cmp b, 0
5330   274F C6 70 27      je _if100_else
5331   2752             _if100_TRUE:
5332   2752             ; printx32(*(long int *)p); 
5333   2752             ; --- START FUNCTION CALL
5334   2752 FA FF FF      lea d, [bp + -1] ; $p
5335   2755 2A            mov b, [d]
5336   2756 38 00 00      mov c, 0
5337   2759 74            mov d, b
5338   275A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
5339   275D FD 39         mov c, b ; And place it into C
5340   275F 2A            mov b, [d] ; Lower Word in B
5341   2760 12            mov a, c
5342   2761 FD AA         swp a
5343   2763 D7            push a
5344   2764 FD AB         swp b
5345   2766 D8            push b
5346   2767 07 84 2B      call printx32
5347   276A 51 04 00      add sp, 4
5348   276D             ; --- END FUNCTION CALL
5349   276D 0A 7C 27      jmp _if100_exit
5350   2770             _if100_else:
5351   2770             ; err("Unexpected format in printf."); 
5352   2770             ; --- START FUNCTION CALL
5353   2770 26 77 41      mov b, _s18 ; "Unexpected format in printf."
5354   2773 FD AB         swp b
5355   2775 D8            push b
5356   2776 07 E4 2B      call err
5357   2779 51 02 00      add sp, 2
5358   277C             ; --- END FUNCTION CALL
5359   277C             _if100_exit:
5360   277C             _if99_exit:
5361   277C             _if98_exit:
5362   277C             ; p = p + 4; 
5363   277C FA FF FF      lea d, [bp + -1] ; $p
5364   277F DA            push d
5365   2780 FA FF FF      lea d, [bp + -1] ; $p
5366   2783 2A            mov b, [d]
5367   2784 38 00 00      mov c, 0
5368   2787             ; --- START TERMS
5369   2787 D7            push a
5370   2788 11            mov a, b
5371   2789 FD 2E 04 00   mov32 cb, $00000004
5371   278D 00 00 
5372   278F 56            add b, a
5373   2790 E4            pop a
5374   2791             ; --- END TERMS
5375   2791 E7            pop d
5376   2792 FD 43         mov [d], b
5377   2794             ; break; 
5378   2794 0A 90 28      jmp _switch97_exit ; case break
5379   2797             _switch97_case2:
5380   2797             _switch97_case3:
5381   2797             ; print_signed(*(int*)p); 
5382   2797             ; --- START FUNCTION CALL
5383   2797 FA FF FF      lea d, [bp + -1] ; $p
5384   279A 2A            mov b, [d]
5385   279B 38 00 00      mov c, 0
5386   279E 74            mov d, b
5387   279F 2A            mov b, [d]
5388   27A0 38 00 00      mov c, 0
5389   27A3 FD AB         swp b
5390   27A5 D8            push b
5391   27A6 07 12 2C      call print_signed
5392   27A9 51 02 00      add sp, 2
5393   27AC             ; --- END FUNCTION CALL
5394   27AC             ; p = p + 2; 
5395   27AC FA FF FF      lea d, [bp + -1] ; $p
5396   27AF DA            push d
5397   27B0 FA FF FF      lea d, [bp + -1] ; $p
5398   27B3 2A            mov b, [d]
5399   27B4 38 00 00      mov c, 0
5400   27B7             ; --- START TERMS
5401   27B7 D7            push a
5402   27B8 11            mov a, b
5403   27B9 FD 2E 02 00   mov32 cb, $00000002
5403   27BD 00 00 
5404   27BF 56            add b, a
5405   27C0 E4            pop a
5406   27C1             ; --- END TERMS
5407   27C1 E7            pop d
5408   27C2 FD 43         mov [d], b
5409   27C4             ; break; 
5410   27C4 0A 90 28      jmp _switch97_exit ; case break
5411   27C7             _switch97_case4:
5412   27C7             ; print_unsigned(*(unsigned int*)p); 
5413   27C7             ; --- START FUNCTION CALL
5414   27C7 FA FF FF      lea d, [bp + -1] ; $p
5415   27CA 2A            mov b, [d]
5416   27CB 38 00 00      mov c, 0
5417   27CE 74            mov d, b
5418   27CF 2A            mov b, [d]
5419   27D0 38 00 00      mov c, 0
5420   27D3 FD AB         swp b
5421   27D5 D8            push b
5422   27D6 07 63 2D      call print_unsigned
5423   27D9 51 02 00      add sp, 2
5424   27DC             ; --- END FUNCTION CALL
5425   27DC             ; p = p + 2; 
5426   27DC FA FF FF      lea d, [bp + -1] ; $p
5427   27DF DA            push d
5428   27E0 FA FF FF      lea d, [bp + -1] ; $p
5429   27E3 2A            mov b, [d]
5430   27E4 38 00 00      mov c, 0
5431   27E7             ; --- START TERMS
5432   27E7 D7            push a
5433   27E8 11            mov a, b
5434   27E9 FD 2E 02 00   mov32 cb, $00000002
5434   27ED 00 00 
5435   27EF 56            add b, a
5436   27F0 E4            pop a
5437   27F1             ; --- END TERMS
5438   27F1 E7            pop d
5439   27F2 FD 43         mov [d], b
5440   27F4             ; break; 
5441   27F4 0A 90 28      jmp _switch97_exit ; case break
5442   27F7             _switch97_case5:
5443   27F7             ; printx16(*(int*)p); 
5444   27F7             ; --- START FUNCTION CALL
5445   27F7 FA FF FF      lea d, [bp + -1] ; $p
5446   27FA 2A            mov b, [d]
5447   27FB 38 00 00      mov c, 0
5448   27FE 74            mov d, b
5449   27FF 2A            mov b, [d]
5450   2800 38 00 00      mov c, 0
5451   2803 FD AB         swp b
5452   2805 D8            push b
5453   2806 07 7B 2E      call printx16
5454   2809 51 02 00      add sp, 2
5455   280C             ; --- END FUNCTION CALL
5456   280C             ; p = p + 2; 
5457   280C FA FF FF      lea d, [bp + -1] ; $p
5458   280F DA            push d
5459   2810 FA FF FF      lea d, [bp + -1] ; $p
5460   2813 2A            mov b, [d]
5461   2814 38 00 00      mov c, 0
5462   2817             ; --- START TERMS
5463   2817 D7            push a
5464   2818 11            mov a, b
5465   2819 FD 2E 02 00   mov32 cb, $00000002
5465   281D 00 00 
5466   281F 56            add b, a
5467   2820 E4            pop a
5468   2821             ; --- END TERMS
5469   2821 E7            pop d
5470   2822 FD 43         mov [d], b
5471   2824             ; break; 
5472   2824 0A 90 28      jmp _switch97_exit ; case break
5473   2827             _switch97_case6:
5474   2827             ; putchar(*(char*)p); 
5475   2827             ; --- START FUNCTION CALL
5476   2827 FA FF FF      lea d, [bp + -1] ; $p
5477   282A 2A            mov b, [d]
5478   282B 38 00 00      mov c, 0
5479   282E 74            mov d, b
5480   282F 32            mov bl, [d]
5481   2830 A7 00         mov bh, 0
5482   2832 38 00 00      mov c, 0
5483   2835 DD            push bl
5484   2836 07 42 2A      call putchar
5485   2839 51 01 00      add sp, 1
5486   283C             ; --- END FUNCTION CALL
5487   283C             ; p = p + 2; 
5488   283C FA FF FF      lea d, [bp + -1] ; $p
5489   283F DA            push d
5490   2840 FA FF FF      lea d, [bp + -1] ; $p
5491   2843 2A            mov b, [d]
5492   2844 38 00 00      mov c, 0
5493   2847             ; --- START TERMS
5494   2847 D7            push a
5495   2848 11            mov a, b
5496   2849 FD 2E 02 00   mov32 cb, $00000002
5496   284D 00 00 
5497   284F 56            add b, a
5498   2850 E4            pop a
5499   2851             ; --- END TERMS
5500   2851 E7            pop d
5501   2852 FD 43         mov [d], b
5502   2854             ; break; 
5503   2854 0A 90 28      jmp _switch97_exit ; case break
5504   2857             _switch97_case7:
5505   2857             ; print(*(char**)p); 
5506   2857             ; --- START FUNCTION CALL
5507   2857 FA FF FF      lea d, [bp + -1] ; $p
5508   285A 2A            mov b, [d]
5509   285B 38 00 00      mov c, 0
5510   285E 74            mov d, b
5511   285F 2A            mov b, [d]
5512   2860 FD AB         swp b
5513   2862 D8            push b
5514   2863 07 F9 2B      call print
5515   2866 51 02 00      add sp, 2
5516   2869             ; --- END FUNCTION CALL
5517   2869             ; p = p + 2; 
5518   2869 FA FF FF      lea d, [bp + -1] ; $p
5519   286C DA            push d
5520   286D FA FF FF      lea d, [bp + -1] ; $p
5521   2870 2A            mov b, [d]
5522   2871 38 00 00      mov c, 0
5523   2874             ; --- START TERMS
5524   2874 D7            push a
5525   2875 11            mov a, b
5526   2876 FD 2E 02 00   mov32 cb, $00000002
5526   287A 00 00 
5527   287C 56            add b, a
5528   287D E4            pop a
5529   287E             ; --- END TERMS
5530   287E E7            pop d
5531   287F FD 43         mov [d], b
5532   2881             ; break; 
5533   2881 0A 90 28      jmp _switch97_exit ; case break
5534   2884             _switch97_default:
5535   2884             ; print("Error: Unknown argument type.\n"); 
5536   2884             ; --- START FUNCTION CALL
5537   2884 26 94 41      mov b, _s19 ; "Error: Unknown argument type.\n"
5538   2887 FD AB         swp b
5539   2889 D8            push b
5540   288A 07 F9 2B      call print
5541   288D 51 02 00      add sp, 2
5542   2890             ; --- END FUNCTION CALL
5543   2890             _switch97_exit:
5544   2890 0A A8 28      jmp _if96_exit
5545   2893             _if96_else:
5546   2893             ; putchar(*format_p); 
5547   2893             ; --- START FUNCTION CALL
5548   2893 FA FD FF      lea d, [bp + -3] ; $format_p
5549   2896 2A            mov b, [d]
5550   2897 38 00 00      mov c, 0
5551   289A 74            mov d, b
5552   289B 32            mov bl, [d]
5553   289C A7 00         mov bh, 0
5554   289E 38 00 00      mov c, 0
5555   28A1 DD            push bl
5556   28A2 07 42 2A      call putchar
5557   28A5 51 01 00      add sp, 1
5558   28A8             ; --- END FUNCTION CALL
5559   28A8             _if96_exit:
5560   28A8             _if95_exit:
5561   28A8             ; format_p++; 
5562   28A8 FA FD FF      lea d, [bp + -3] ; $format_p
5563   28AB 2A            mov b, [d]
5564   28AC 38 00 00      mov c, 0
5565   28AF FD 77         inc b
5566   28B1 FA FD FF      lea d, [bp + -3] ; $format_p
5567   28B4 FD 43         mov [d], b
5568   28B6 FD 7D         dec b
5569   28B8             _for94_update:
5570   28B8 0A FC 25      jmp _for94_cond
5571   28BB             _for94_exit:
5572   28BB F9            leave
5573   28BC 09            ret
5574   28BD             
5575   28BD             print_signed_long:
5576   28BD F8 00 00      enter 0 ; (push bp; mov bp, sp)
5577   28C0             ; char digits[10]; 
5578   28C0 52 0A 00      sub sp, 10
5579   28C3             ; int i = 0; 
5580   28C3 52 02 00      sub sp, 2
5581   28C6             ; --- START LOCAL VAR INITIALIZATION
5582   28C6 FA F5 FF      lea d, [bp + -11] ; $i
5583   28C9 DA            push d
5584   28CA FD 2E 00 00   mov32 cb, $00000000
5584   28CE 00 00 
5585   28D0 E7            pop d
5586   28D1 FD 43         mov [d], b
5587   28D3             ; --- END LOCAL VAR INITIALIZATION
5588   28D3             ; if (num < 0) { 
5589   28D3             _if101_cond:
5590   28D3 FA 05 00      lea d, [bp + 5] ; $num
5591   28D6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
5592   28D9 FD 39         mov c, b ; And place it into C
5593   28DB 2A            mov b, [d] ; Lower Word in B
5594   28DC             ; --- START RELATIONAL
5595   28DC D7            push a
5596   28DD FD D8         push g
5597   28DF 11            mov a, b
5598   28E0 FD 7A         mov g, c
5599   28E2 FD 2E 00 00   mov32 cb, $00000000
5599   28E6 00 00 
5600   28E8 FD AF         cmp32 ga, cb
5601   28EA FD 73         slt ; <
5602   28EC FD F1         pop g
5603   28EE E4            pop a
5604   28EF             ; --- END RELATIONAL
5605   28EF C0 00 00      cmp b, 0
5606   28F2 C6 24 29      je _if101_else
5607   28F5             _if101_TRUE:
5608   28F5             ; putchar('-'); 
5609   28F5             ; --- START FUNCTION CALL
5610   28F5 FD 2E 2D 00   mov32 cb, $0000002d
5610   28F9 00 00 
5611   28FB DD            push bl
5612   28FC 07 42 2A      call putchar
5613   28FF 51 01 00      add sp, 1
5614   2902             ; --- END FUNCTION CALL
5615   2902             ; num = -num; 
5616   2902 FA 05 00      lea d, [bp + 5] ; $num
5617   2905 DA            push d
5618   2906 FA 05 00      lea d, [bp + 5] ; $num
5619   2909 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
5620   290C FD 39         mov c, b ; And place it into C
5621   290E 2A            mov b, [d] ; Lower Word in B
5622   290F 12            mov a, c
5623   2910 95            not a
5624   2911 97            not b
5625   2912 55 01 00      add b, 1
5626   2915 5B 00 00      adc a, 0
5627   2918 39            mov c, a
5628   2919 E7            pop d
5629   291A FD 43         mov [d], b
5630   291C 28            mov b, c
5631   291D FD 44 02 00   mov [d + 2], b
5632   2921 0A 58 29      jmp _if101_exit
5633   2924             _if101_else:
5634   2924             ; if (num == 0) { 
5635   2924             _if102_cond:
5636   2924 FA 05 00      lea d, [bp + 5] ; $num
5637   2927 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
5638   292A FD 39         mov c, b ; And place it into C
5639   292C 2A            mov b, [d] ; Lower Word in B
5640   292D             ; --- START RELATIONAL
5641   292D D7            push a
5642   292E FD D8         push g
5643   2930 11            mov a, b
5644   2931 FD 7A         mov g, c
5645   2933 FD 2E 00 00   mov32 cb, $00000000
5645   2937 00 00 
5646   2939 FD AF         cmp32 ga, cb
5647   293B FD 71         seq ; ==
5648   293D FD F1         pop g
5649   293F E4            pop a
5650   2940             ; --- END RELATIONAL
5651   2940 C0 00 00      cmp b, 0
5652   2943 C6 58 29      je _if102_exit
5653   2946             _if102_TRUE:
5654   2946             ; putchar('0'); 
5655   2946             ; --- START FUNCTION CALL
5656   2946 FD 2E 30 00   mov32 cb, $00000030
5656   294A 00 00 
5657   294C DD            push bl
5658   294D 07 42 2A      call putchar
5659   2950 51 01 00      add sp, 1
5660   2953             ; --- END FUNCTION CALL
5661   2953             ; return; 
5662   2953 F9            leave
5663   2954 09            ret
5664   2955 0A 58 29      jmp _if102_exit
5665   2958             _if102_exit:
5666   2958             _if101_exit:
5667   2958             ; while (num > 0) { 
5668   2958             _while103_cond:
5669   2958 FA 05 00      lea d, [bp + 5] ; $num
5670   295B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
5671   295E FD 39         mov c, b ; And place it into C
5672   2960 2A            mov b, [d] ; Lower Word in B
5673   2961             ; --- START RELATIONAL
5674   2961 D7            push a
5675   2962 FD D8         push g
5676   2964 11            mov a, b
5677   2965 FD 7A         mov g, c
5678   2967 FD 2E 00 00   mov32 cb, $00000000
5678   296B 00 00 
5679   296D FD AF         cmp32 ga, cb
5680   296F FD 7F         sgt
5681   2971 FD F1         pop g
5682   2973 E4            pop a
5683   2974             ; --- END RELATIONAL
5684   2974 C0 00 00      cmp b, 0
5685   2977 C6 F8 29      je _while103_exit
5686   297A             _while103_block:
5687   297A             ; digits[i] = '0' + (num % 10); 
5688   297A FA F7 FF      lea d, [bp + -9] ; $digits
5689   297D D7            push a
5690   297E DA            push d
5691   297F FA F5 FF      lea d, [bp + -11] ; $i
5692   2982 2A            mov b, [d]
5693   2983 38 00 00      mov c, 0
5694   2986 E7            pop d
5695   2987 5A            add d, b
5696   2988 E4            pop a
5697   2989 DA            push d
5698   298A FD 2E 30 00   mov32 cb, $00000030
5698   298E 00 00 
5699   2990             ; --- START TERMS
5700   2990 D7            push a
5701   2991 11            mov a, b
5702   2992 FA 05 00      lea d, [bp + 5] ; $num
5703   2995 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
5704   2998 FD 39         mov c, b ; And place it into C
5705   299A 2A            mov b, [d] ; Lower Word in B
5706   299B             ; --- START FACTORS
5707   299B D7            push a
5708   299C FD D8         push g
5709   299E 11            mov a, b
5710   299F FD 7A         mov g, c
5711   29A1 FD 2E 0A 00   mov32 cb, $0000000a
5711   29A5 00 00 
5712   29A7 FD D8         push g ; save 'g' as the div instruction uses it
5713   29A9 AE            div a, b ; %, a: quotient, b: remainder
5714   29AA 11            mov a, b
5715   29AB FD F1         pop g
5716   29AD FD 38         mov c, g
5717   29AF 27            mov b, a
5718   29B0 FD F1         pop g
5719   29B2 E4            pop a
5720   29B3             ; --- END FACTORS
5721   29B3 FD 15         add32 cb, ga
5722   29B5 E4            pop a
5723   29B6             ; --- END TERMS
5724   29B6 E7            pop d
5725   29B7 FD 3E         mov [d], bl
5726   29B9             ; num = num / 10; 
5727   29B9 FA 05 00      lea d, [bp + 5] ; $num
5728   29BC DA            push d
5729   29BD FA 05 00      lea d, [bp + 5] ; $num
5730   29C0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
5731   29C3 FD 39         mov c, b ; And place it into C
5732   29C5 2A            mov b, [d] ; Lower Word in B
5733   29C6             ; --- START FACTORS
5734   29C6 D7            push a
5735   29C7 FD D8         push g
5736   29C9 11            mov a, b
5737   29CA FD 7A         mov g, c
5738   29CC FD 2E 0A 00   mov32 cb, $0000000a
5738   29D0 00 00 
5739   29D2 FD D8         push g ; save 'g' as the div instruction uses it
5740   29D4 AE            div a, b ; /, a: quotient, b: remainder
5741   29D5 FD F1         pop g
5742   29D7 FD 38         mov c, g
5743   29D9 27            mov b, a
5744   29DA FD F1         pop g
5745   29DC E4            pop a
5746   29DD             ; --- END FACTORS
5747   29DD E7            pop d
5748   29DE FD 43         mov [d], b
5749   29E0 28            mov b, c
5750   29E1 FD 44 02 00   mov [d + 2], b
5751   29E5             ; i++; 
5752   29E5 FA F5 FF      lea d, [bp + -11] ; $i
5753   29E8 2A            mov b, [d]
5754   29E9 38 00 00      mov c, 0
5755   29EC 11            mov a, b
5756   29ED FD 77         inc b
5757   29EF FA F5 FF      lea d, [bp + -11] ; $i
5758   29F2 FD 43         mov [d], b
5759   29F4 27            mov b, a
5760   29F5 0A 58 29      jmp _while103_cond
5761   29F8             _while103_exit:
5762   29F8             ; while (i > 0) { 
5763   29F8             _while110_cond:
5764   29F8 FA F5 FF      lea d, [bp + -11] ; $i
5765   29FB 2A            mov b, [d]
5766   29FC 38 00 00      mov c, 0
5767   29FF             ; --- START RELATIONAL
5768   29FF D7            push a
5769   2A00 11            mov a, b
5770   2A01 FD 2E 00 00   mov32 cb, $00000000
5770   2A05 00 00 
5771   2A07 B0            cmp a, b
5772   2A08 FD 7F         sgt ; >
5773   2A0A E4            pop a
5774   2A0B             ; --- END RELATIONAL
5775   2A0B C0 00 00      cmp b, 0
5776   2A0E C6 40 2A      je _while110_exit
5777   2A11             _while110_block:
5778   2A11             ; i--; 
5779   2A11 FA F5 FF      lea d, [bp + -11] ; $i
5780   2A14 2A            mov b, [d]
5781   2A15 38 00 00      mov c, 0
5782   2A18 11            mov a, b
5783   2A19 FD 7D         dec b
5784   2A1B FA F5 FF      lea d, [bp + -11] ; $i
5785   2A1E FD 43         mov [d], b
5786   2A20 27            mov b, a
5787   2A21             ; putchar(digits[i]); 
5788   2A21             ; --- START FUNCTION CALL
5789   2A21 FA F7 FF      lea d, [bp + -9] ; $digits
5790   2A24 D7            push a
5791   2A25 DA            push d
5792   2A26 FA F5 FF      lea d, [bp + -11] ; $i
5793   2A29 2A            mov b, [d]
5794   2A2A 38 00 00      mov c, 0
5795   2A2D E7            pop d
5796   2A2E 5A            add d, b
5797   2A2F E4            pop a
5798   2A30 32            mov bl, [d]
5799   2A31 A7 00         mov bh, 0
5800   2A33 38 00 00      mov c, 0
5801   2A36 DD            push bl
5802   2A37 07 42 2A      call putchar
5803   2A3A 51 01 00      add sp, 1
5804   2A3D             ; --- END FUNCTION CALL
5805   2A3D 0A F8 29      jmp _while110_cond
5806   2A40             _while110_exit:
5807   2A40 F9            leave
5808   2A41 09            ret
5809   2A42             
5810   2A42             putchar:
5811   2A42 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5812   2A45             ; --- BEGIN INLINE ASM SEGMENT
5813   2A45 FA 05 00      lea d, [bp + 5] ; $c
5814   2A48 1E            mov al, [d]
5815   2A49 23            mov ah, al
5816   2A4A 19 00         mov al, 0
5817   2A4C 05 03         syscall sys_io      ; char in AH
5818   2A4E             ; --- END INLINE ASM SEGMENT
5819   2A4E F9            leave
5820   2A4F 09            ret
5821   2A50             
5822   2A50             print_unsigned_long:
5823   2A50 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5824   2A53             ; char digits[10]; 
5825   2A53 52 0A 00      sub sp, 10
5826   2A56             ; int i; 
5827   2A56 52 02 00      sub sp, 2
5828   2A59             ; i = 0; 
5829   2A59 FA F5 FF      lea d, [bp + -11] ; $i
5830   2A5C DA            push d
5831   2A5D FD 2E 00 00   mov32 cb, $00000000
5831   2A61 00 00 
5832   2A63 E7            pop d
5833   2A64 FD 43         mov [d], b
5834   2A66             ; if(num == 0){ 
5835   2A66             _if111_cond:
5836   2A66 FA 05 00      lea d, [bp + 5] ; $num
5837   2A69 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
5838   2A6C FD 39         mov c, b ; And place it into C
5839   2A6E 2A            mov b, [d] ; Lower Word in B
5840   2A6F             ; --- START RELATIONAL
5841   2A6F D7            push a
5842   2A70 FD D8         push g
5843   2A72 11            mov a, b
5844   2A73 FD 7A         mov g, c
5845   2A75 FD 2E 00 00   mov32 cb, $00000000
5845   2A79 00 00 
5846   2A7B FD AF         cmp32 ga, cb
5847   2A7D FD 71         seq ; ==
5848   2A7F FD F1         pop g
5849   2A81 E4            pop a
5850   2A82             ; --- END RELATIONAL
5851   2A82 C0 00 00      cmp b, 0
5852   2A85 C6 9A 2A      je _if111_exit
5853   2A88             _if111_TRUE:
5854   2A88             ; putchar('0'); 
5855   2A88             ; --- START FUNCTION CALL
5856   2A88 FD 2E 30 00   mov32 cb, $00000030
5856   2A8C 00 00 
5857   2A8E DD            push bl
5858   2A8F 07 42 2A      call putchar
5859   2A92 51 01 00      add sp, 1
5860   2A95             ; --- END FUNCTION CALL
5861   2A95             ; return; 
5862   2A95 F9            leave
5863   2A96 09            ret
5864   2A97 0A 9A 2A      jmp _if111_exit
5865   2A9A             _if111_exit:
5866   2A9A             ; while (num > 0) { 
5867   2A9A             _while112_cond:
5868   2A9A FA 05 00      lea d, [bp + 5] ; $num
5869   2A9D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
5870   2AA0 FD 39         mov c, b ; And place it into C
5871   2AA2 2A            mov b, [d] ; Lower Word in B
5872   2AA3             ; --- START RELATIONAL
5873   2AA3 D7            push a
5874   2AA4 FD D8         push g
5875   2AA6 11            mov a, b
5876   2AA7 FD 7A         mov g, c
5877   2AA9 FD 2E 00 00   mov32 cb, $00000000
5877   2AAD 00 00 
5878   2AAF FD AF         cmp32 ga, cb
5879   2AB1 FD 81         sgu
5880   2AB3 FD F1         pop g
5881   2AB5 E4            pop a
5882   2AB6             ; --- END RELATIONAL
5883   2AB6 C0 00 00      cmp b, 0
5884   2AB9 C6 3A 2B      je _while112_exit
5885   2ABC             _while112_block:
5886   2ABC             ; digits[i] = '0' + (num % 10); 
5887   2ABC FA F7 FF      lea d, [bp + -9] ; $digits
5888   2ABF D7            push a
5889   2AC0 DA            push d
5890   2AC1 FA F5 FF      lea d, [bp + -11] ; $i
5891   2AC4 2A            mov b, [d]
5892   2AC5 38 00 00      mov c, 0
5893   2AC8 E7            pop d
5894   2AC9 5A            add d, b
5895   2ACA E4            pop a
5896   2ACB DA            push d
5897   2ACC FD 2E 30 00   mov32 cb, $00000030
5897   2AD0 00 00 
5898   2AD2             ; --- START TERMS
5899   2AD2 D7            push a
5900   2AD3 11            mov a, b
5901   2AD4 FA 05 00      lea d, [bp + 5] ; $num
5902   2AD7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
5903   2ADA FD 39         mov c, b ; And place it into C
5904   2ADC 2A            mov b, [d] ; Lower Word in B
5905   2ADD             ; --- START FACTORS
5906   2ADD D7            push a
5907   2ADE FD D8         push g
5908   2AE0 11            mov a, b
5909   2AE1 FD 7A         mov g, c
5910   2AE3 FD 2E 0A 00   mov32 cb, $0000000a
5910   2AE7 00 00 
5911   2AE9 FD D8         push g ; save 'g' as the div instruction uses it
5912   2AEB AE            div a, b ; %, a: quotient, b: remainder
5913   2AEC 11            mov a, b
5914   2AED FD F1         pop g
5915   2AEF FD 38         mov c, g
5916   2AF1 27            mov b, a
5917   2AF2 FD F1         pop g
5918   2AF4 E4            pop a
5919   2AF5             ; --- END FACTORS
5920   2AF5 FD 15         add32 cb, ga
5921   2AF7 E4            pop a
5922   2AF8             ; --- END TERMS
5923   2AF8 E7            pop d
5924   2AF9 FD 3E         mov [d], bl
5925   2AFB             ; num = num / 10; 
5926   2AFB FA 05 00      lea d, [bp + 5] ; $num
5927   2AFE DA            push d
5928   2AFF FA 05 00      lea d, [bp + 5] ; $num
5929   2B02 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
5930   2B05 FD 39         mov c, b ; And place it into C
5931   2B07 2A            mov b, [d] ; Lower Word in B
5932   2B08             ; --- START FACTORS
5933   2B08 D7            push a
5934   2B09 FD D8         push g
5935   2B0B 11            mov a, b
5936   2B0C FD 7A         mov g, c
5937   2B0E FD 2E 0A 00   mov32 cb, $0000000a
5937   2B12 00 00 
5938   2B14 FD D8         push g ; save 'g' as the div instruction uses it
5939   2B16 AE            div a, b ; /, a: quotient, b: remainder
5940   2B17 FD F1         pop g
5941   2B19 FD 38         mov c, g
5942   2B1B 27            mov b, a
5943   2B1C FD F1         pop g
5944   2B1E E4            pop a
5945   2B1F             ; --- END FACTORS
5946   2B1F E7            pop d
5947   2B20 FD 43         mov [d], b
5948   2B22 28            mov b, c
5949   2B23 FD 44 02 00   mov [d + 2], b
5950   2B27             ; i++; 
5951   2B27 FA F5 FF      lea d, [bp + -11] ; $i
5952   2B2A 2A            mov b, [d]
5953   2B2B 38 00 00      mov c, 0
5954   2B2E 11            mov a, b
5955   2B2F FD 77         inc b
5956   2B31 FA F5 FF      lea d, [bp + -11] ; $i
5957   2B34 FD 43         mov [d], b
5958   2B36 27            mov b, a
5959   2B37 0A 9A 2A      jmp _while112_cond
5960   2B3A             _while112_exit:
5961   2B3A             ; while (i > 0) { 
5962   2B3A             _while119_cond:
5963   2B3A FA F5 FF      lea d, [bp + -11] ; $i
5964   2B3D 2A            mov b, [d]
5965   2B3E 38 00 00      mov c, 0
5966   2B41             ; --- START RELATIONAL
5967   2B41 D7            push a
5968   2B42 11            mov a, b
5969   2B43 FD 2E 00 00   mov32 cb, $00000000
5969   2B47 00 00 
5970   2B49 B0            cmp a, b
5971   2B4A FD 7F         sgt ; >
5972   2B4C E4            pop a
5973   2B4D             ; --- END RELATIONAL
5974   2B4D C0 00 00      cmp b, 0
5975   2B50 C6 82 2B      je _while119_exit
5976   2B53             _while119_block:
5977   2B53             ; i--; 
5978   2B53 FA F5 FF      lea d, [bp + -11] ; $i
5979   2B56 2A            mov b, [d]
5980   2B57 38 00 00      mov c, 0
5981   2B5A 11            mov a, b
5982   2B5B FD 7D         dec b
5983   2B5D FA F5 FF      lea d, [bp + -11] ; $i
5984   2B60 FD 43         mov [d], b
5985   2B62 27            mov b, a
5986   2B63             ; putchar(digits[i]); 
5987   2B63             ; --- START FUNCTION CALL
5988   2B63 FA F7 FF      lea d, [bp + -9] ; $digits
5989   2B66 D7            push a
5990   2B67 DA            push d
5991   2B68 FA F5 FF      lea d, [bp + -11] ; $i
5992   2B6B 2A            mov b, [d]
5993   2B6C 38 00 00      mov c, 0
5994   2B6F E7            pop d
5995   2B70 5A            add d, b
5996   2B71 E4            pop a
5997   2B72 32            mov bl, [d]
5998   2B73 A7 00         mov bh, 0
5999   2B75 38 00 00      mov c, 0
6000   2B78 DD            push bl
6001   2B79 07 42 2A      call putchar
6002   2B7C 51 01 00      add sp, 1
6003   2B7F             ; --- END FUNCTION CALL
6004   2B7F 0A 3A 2B      jmp _while119_cond
6005   2B82             _while119_exit:
6006   2B82 F9            leave
6007   2B83 09            ret
6008   2B84             
6009   2B84             printx32:
6010   2B84 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6011   2B87             ; --- BEGIN INLINE ASM SEGMENT
6012   2B87 FA 05 00      lea d, [bp + 5] ; $hex
6013   2B8A 2B 02 00      mov b, [d+2]
6014   2B8D 07 96 2B      call print_u16x_printx32
6015   2B90 2A            mov b, [d]
6016   2B91 07 96 2B      call print_u16x_printx32
6017   2B94             ; --- END INLINE ASM SEGMENT
6018   2B94             ; return; 
6019   2B94 F9            leave
6020   2B95 09            ret
6021   2B96             ; --- BEGIN INLINE ASM SEGMENT
6022   2B96             print_u16x_printx32:
6023   2B96 D7            push a
6024   2B97 D8            push b
6025   2B98 DD            push bl
6026   2B99 30            mov bl, bh
6027   2B9A 07 B8 2B      call _itoa_printx32        ; convert bh to char in A
6028   2B9D 2F            mov bl, al        ; save al
6029   2B9E 19 00         mov al, 0
6030   2BA0 05 03         syscall sys_io        ; display AH
6031   2BA2 24            mov ah, bl        ; retrieve al
6032   2BA3 19 00         mov al, 0
6033   2BA5 05 03         syscall sys_io        ; display AL
6034   2BA7 EA            pop bl
6035   2BA8 07 B8 2B      call _itoa_printx32        ; convert bh to char in A
6036   2BAB 2F            mov bl, al        ; save al
6037   2BAC 19 00         mov al, 0
6038   2BAE 05 03         syscall sys_io        ; display AH
6039   2BB0 24            mov ah, bl        ; retrieve al
6040   2BB1 19 00         mov al, 0
6041   2BB3 05 03         syscall sys_io        ; display AL
6042   2BB5 E5            pop b
6043   2BB6 E4            pop a
6044   2BB7 09            ret
6045   2BB8             _itoa_printx32:
6046   2BB8 DA            push d
6047   2BB9 D8            push b
6048   2BBA A7 00         mov bh, 0
6049   2BBC FD A4 04      shr bl, 4  
6050   2BBF 74            mov d, b
6051   2BC0 1F D2 2B      mov al, [d + s_hex_digits_printx32]
6052   2BC3 23            mov ah, al
6053   2BC4 E5            pop b
6054   2BC5 D8            push b
6055   2BC6 A7 00         mov bh, 0
6056   2BC8 FD 87 0F      and bl, $0F
6057   2BCB 74            mov d, b
6058   2BCC 1F D2 2B      mov al, [d + s_hex_digits_printx32]
6059   2BCF E5            pop b
6060   2BD0 E7            pop d
6061   2BD1 09            ret
6062   2BD2 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
6062   2BD6 34 35 36 37 
6062   2BDA 38 39 41 42 
6062   2BDE 43 44 45 46 
6063   2BE2             ; --- END INLINE ASM SEGMENT
6064   2BE2 F9            leave
6065   2BE3 09            ret
6066   2BE4             
6067   2BE4             err:
6068   2BE4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6069   2BE7             ; print(e); 
6070   2BE7             ; --- START FUNCTION CALL
6071   2BE7 FA 05 00      lea d, [bp + 5] ; $e
6072   2BEA 2A            mov b, [d]
6073   2BEB 38 00 00      mov c, 0
6074   2BEE FD AB         swp b
6075   2BF0 D8            push b
6076   2BF1 07 F9 2B      call print
6077   2BF4 51 02 00      add sp, 2
6078   2BF7             ; --- END FUNCTION CALL
6079   2BF7 F9            leave
6080   2BF8 09            ret
6081   2BF9             
6082   2BF9             print:
6083   2BF9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6084   2BFC             ; --- BEGIN INLINE ASM SEGMENT
6085   2BFC FA 05 00      lea d, [bp + 5] ; $s
6086   2BFF FD 2A         mov d, [d]
6087   2C01             _puts_L1_print:
6088   2C01 1E            mov al, [d]
6089   2C02 B9 00         cmp al, 0
6090   2C04 C6 10 2C      jz _puts_END_print
6091   2C07 23            mov ah, al
6092   2C08 19 00         mov al, 0
6093   2C0A 05 03         syscall sys_io
6094   2C0C 79            inc d
6095   2C0D 0A 01 2C      jmp _puts_L1_print
6096   2C10             _puts_END_print:
6097   2C10             ; --- END INLINE ASM SEGMENT
6098   2C10 F9            leave
6099   2C11 09            ret
6100   2C12             
6101   2C12             print_signed:
6102   2C12 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6103   2C15             ; char digits[5]; 
6104   2C15 52 05 00      sub sp, 5
6105   2C18             ; int i = 0; 
6106   2C18 52 02 00      sub sp, 2
6107   2C1B             ; --- START LOCAL VAR INITIALIZATION
6108   2C1B FA FA FF      lea d, [bp + -6] ; $i
6109   2C1E DA            push d
6110   2C1F FD 2E 00 00   mov32 cb, $00000000
6110   2C23 00 00 
6111   2C25 E7            pop d
6112   2C26 FD 43         mov [d], b
6113   2C28             ; --- END LOCAL VAR INITIALIZATION
6114   2C28             ; if (num < 0) { 
6115   2C28             _if120_cond:
6116   2C28 FA 05 00      lea d, [bp + 5] ; $num
6117   2C2B 2A            mov b, [d]
6118   2C2C 38 00 00      mov c, 0
6119   2C2F             ; --- START RELATIONAL
6120   2C2F D7            push a
6121   2C30 11            mov a, b
6122   2C31 FD 2E 00 00   mov32 cb, $00000000
6122   2C35 00 00 
6123   2C37 B0            cmp a, b
6124   2C38 FD 73         slt ; < (signed)
6125   2C3A E4            pop a
6126   2C3B             ; --- END RELATIONAL
6127   2C3B C0 00 00      cmp b, 0
6128   2C3E C6 61 2C      je _if120_else
6129   2C41             _if120_TRUE:
6130   2C41             ; putchar('-'); 
6131   2C41             ; --- START FUNCTION CALL
6132   2C41 FD 2E 2D 00   mov32 cb, $0000002d
6132   2C45 00 00 
6133   2C47 DD            push bl
6134   2C48 07 42 2A      call putchar
6135   2C4B 51 01 00      add sp, 1
6136   2C4E             ; --- END FUNCTION CALL
6137   2C4E             ; num = -num; 
6138   2C4E FA 05 00      lea d, [bp + 5] ; $num
6139   2C51 DA            push d
6140   2C52 FA 05 00      lea d, [bp + 5] ; $num
6141   2C55 2A            mov b, [d]
6142   2C56 38 00 00      mov c, 0
6143   2C59 FD 97         neg b
6144   2C5B E7            pop d
6145   2C5C FD 43         mov [d], b
6146   2C5E 0A 8C 2C      jmp _if120_exit
6147   2C61             _if120_else:
6148   2C61             ; if (num == 0) { 
6149   2C61             _if121_cond:
6150   2C61 FA 05 00      lea d, [bp + 5] ; $num
6151   2C64 2A            mov b, [d]
6152   2C65 38 00 00      mov c, 0
6153   2C68             ; --- START RELATIONAL
6154   2C68 D7            push a
6155   2C69 11            mov a, b
6156   2C6A FD 2E 00 00   mov32 cb, $00000000
6156   2C6E 00 00 
6157   2C70 B0            cmp a, b
6158   2C71 FD 71         seq ; ==
6159   2C73 E4            pop a
6160   2C74             ; --- END RELATIONAL
6161   2C74 C0 00 00      cmp b, 0
6162   2C77 C6 8C 2C      je _if121_exit
6163   2C7A             _if121_TRUE:
6164   2C7A             ; putchar('0'); 
6165   2C7A             ; --- START FUNCTION CALL
6166   2C7A FD 2E 30 00   mov32 cb, $00000030
6166   2C7E 00 00 
6167   2C80 DD            push bl
6168   2C81 07 42 2A      call putchar
6169   2C84 51 01 00      add sp, 1
6170   2C87             ; --- END FUNCTION CALL
6171   2C87             ; return; 
6172   2C87 F9            leave
6173   2C88 09            ret
6174   2C89 0A 8C 2C      jmp _if121_exit
6175   2C8C             _if121_exit:
6176   2C8C             _if120_exit:
6177   2C8C             ; while (num > 0) { 
6178   2C8C             _while122_cond:
6179   2C8C FA 05 00      lea d, [bp + 5] ; $num
6180   2C8F 2A            mov b, [d]
6181   2C90 38 00 00      mov c, 0
6182   2C93             ; --- START RELATIONAL
6183   2C93 D7            push a
6184   2C94 11            mov a, b
6185   2C95 FD 2E 00 00   mov32 cb, $00000000
6185   2C99 00 00 
6186   2C9B B0            cmp a, b
6187   2C9C FD 7F         sgt ; >
6188   2C9E E4            pop a
6189   2C9F             ; --- END RELATIONAL
6190   2C9F C0 00 00      cmp b, 0
6191   2CA2 C6 19 2D      je _while122_exit
6192   2CA5             _while122_block:
6193   2CA5             ; digits[i] = '0' + (num % 10); 
6194   2CA5 FA FC FF      lea d, [bp + -4] ; $digits
6195   2CA8 D7            push a
6196   2CA9 DA            push d
6197   2CAA FA FA FF      lea d, [bp + -6] ; $i
6198   2CAD 2A            mov b, [d]
6199   2CAE 38 00 00      mov c, 0
6200   2CB1 E7            pop d
6201   2CB2 5A            add d, b
6202   2CB3 E4            pop a
6203   2CB4 DA            push d
6204   2CB5 FD 2E 30 00   mov32 cb, $00000030
6204   2CB9 00 00 
6205   2CBB             ; --- START TERMS
6206   2CBB D7            push a
6207   2CBC 11            mov a, b
6208   2CBD FA 05 00      lea d, [bp + 5] ; $num
6209   2CC0 2A            mov b, [d]
6210   2CC1 38 00 00      mov c, 0
6211   2CC4             ; --- START FACTORS
6212   2CC4 D7            push a
6213   2CC5 FD D8         push g
6214   2CC7 11            mov a, b
6215   2CC8 FD 7A         mov g, c
6216   2CCA FD 2E 0A 00   mov32 cb, $0000000a
6216   2CCE 00 00 
6217   2CD0 FD D8         push g ; save 'g' as the div instruction uses it
6218   2CD2 AE            div a, b ; %, a: quotient, b: remainder
6219   2CD3 11            mov a, b
6220   2CD4 FD F1         pop g
6221   2CD6 FD 38         mov c, g
6222   2CD8 27            mov b, a
6223   2CD9 FD F1         pop g
6224   2CDB E4            pop a
6225   2CDC             ; --- END FACTORS
6226   2CDC 56            add b, a
6227   2CDD E4            pop a
6228   2CDE             ; --- END TERMS
6229   2CDE E7            pop d
6230   2CDF FD 3E         mov [d], bl
6231   2CE1             ; num = num / 10; 
6232   2CE1 FA 05 00      lea d, [bp + 5] ; $num
6233   2CE4 DA            push d
6234   2CE5 FA 05 00      lea d, [bp + 5] ; $num
6235   2CE8 2A            mov b, [d]
6236   2CE9 38 00 00      mov c, 0
6237   2CEC             ; --- START FACTORS
6238   2CEC D7            push a
6239   2CED FD D8         push g
6240   2CEF 11            mov a, b
6241   2CF0 FD 7A         mov g, c
6242   2CF2 FD 2E 0A 00   mov32 cb, $0000000a
6242   2CF6 00 00 
6243   2CF8 FD D8         push g ; save 'g' as the div instruction uses it
6244   2CFA AE            div a, b ; /, a: quotient, b: remainder
6245   2CFB FD F1         pop g
6246   2CFD FD 38         mov c, g
6247   2CFF 27            mov b, a
6248   2D00 FD F1         pop g
6249   2D02 E4            pop a
6250   2D03             ; --- END FACTORS
6251   2D03 E7            pop d
6252   2D04 FD 43         mov [d], b
6253   2D06             ; i++; 
6254   2D06 FA FA FF      lea d, [bp + -6] ; $i
6255   2D09 2A            mov b, [d]
6256   2D0A 38 00 00      mov c, 0
6257   2D0D 11            mov a, b
6258   2D0E FD 77         inc b
6259   2D10 FA FA FF      lea d, [bp + -6] ; $i
6260   2D13 FD 43         mov [d], b
6261   2D15 27            mov b, a
6262   2D16 0A 8C 2C      jmp _while122_cond
6263   2D19             _while122_exit:
6264   2D19             ; while (i > 0) { 
6265   2D19             _while129_cond:
6266   2D19 FA FA FF      lea d, [bp + -6] ; $i
6267   2D1C 2A            mov b, [d]
6268   2D1D 38 00 00      mov c, 0
6269   2D20             ; --- START RELATIONAL
6270   2D20 D7            push a
6271   2D21 11            mov a, b
6272   2D22 FD 2E 00 00   mov32 cb, $00000000
6272   2D26 00 00 
6273   2D28 B0            cmp a, b
6274   2D29 FD 7F         sgt ; >
6275   2D2B E4            pop a
6276   2D2C             ; --- END RELATIONAL
6277   2D2C C0 00 00      cmp b, 0
6278   2D2F C6 61 2D      je _while129_exit
6279   2D32             _while129_block:
6280   2D32             ; i--; 
6281   2D32 FA FA FF      lea d, [bp + -6] ; $i
6282   2D35 2A            mov b, [d]
6283   2D36 38 00 00      mov c, 0
6284   2D39 11            mov a, b
6285   2D3A FD 7D         dec b
6286   2D3C FA FA FF      lea d, [bp + -6] ; $i
6287   2D3F FD 43         mov [d], b
6288   2D41 27            mov b, a
6289   2D42             ; putchar(digits[i]); 
6290   2D42             ; --- START FUNCTION CALL
6291   2D42 FA FC FF      lea d, [bp + -4] ; $digits
6292   2D45 D7            push a
6293   2D46 DA            push d
6294   2D47 FA FA FF      lea d, [bp + -6] ; $i
6295   2D4A 2A            mov b, [d]
6296   2D4B 38 00 00      mov c, 0
6297   2D4E E7            pop d
6298   2D4F 5A            add d, b
6299   2D50 E4            pop a
6300   2D51 32            mov bl, [d]
6301   2D52 A7 00         mov bh, 0
6302   2D54 38 00 00      mov c, 0
6303   2D57 DD            push bl
6304   2D58 07 42 2A      call putchar
6305   2D5B 51 01 00      add sp, 1
6306   2D5E             ; --- END FUNCTION CALL
6307   2D5E 0A 19 2D      jmp _while129_cond
6308   2D61             _while129_exit:
6309   2D61 F9            leave
6310   2D62 09            ret
6311   2D63             
6312   2D63             print_unsigned:
6313   2D63 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6314   2D66             ; char digits[5]; 
6315   2D66 52 05 00      sub sp, 5
6316   2D69             ; int i; 
6317   2D69 52 02 00      sub sp, 2
6318   2D6C             ; i = 0; 
6319   2D6C FA FA FF      lea d, [bp + -6] ; $i
6320   2D6F DA            push d
6321   2D70 FD 2E 00 00   mov32 cb, $00000000
6321   2D74 00 00 
6322   2D76 E7            pop d
6323   2D77 FD 43         mov [d], b
6324   2D79             ; if(num == 0){ 
6325   2D79             _if130_cond:
6326   2D79 FA 05 00      lea d, [bp + 5] ; $num
6327   2D7C 2A            mov b, [d]
6328   2D7D 38 00 00      mov c, 0
6329   2D80             ; --- START RELATIONAL
6330   2D80 D7            push a
6331   2D81 11            mov a, b
6332   2D82 FD 2E 00 00   mov32 cb, $00000000
6332   2D86 00 00 
6333   2D88 B0            cmp a, b
6334   2D89 FD 71         seq ; ==
6335   2D8B E4            pop a
6336   2D8C             ; --- END RELATIONAL
6337   2D8C C0 00 00      cmp b, 0
6338   2D8F C6 A4 2D      je _if130_exit
6339   2D92             _if130_TRUE:
6340   2D92             ; putchar('0'); 
6341   2D92             ; --- START FUNCTION CALL
6342   2D92 FD 2E 30 00   mov32 cb, $00000030
6342   2D96 00 00 
6343   2D98 DD            push bl
6344   2D99 07 42 2A      call putchar
6345   2D9C 51 01 00      add sp, 1
6346   2D9F             ; --- END FUNCTION CALL
6347   2D9F             ; return; 
6348   2D9F F9            leave
6349   2DA0 09            ret
6350   2DA1 0A A4 2D      jmp _if130_exit
6351   2DA4             _if130_exit:
6352   2DA4             ; while (num > 0) { 
6353   2DA4             _while131_cond:
6354   2DA4 FA 05 00      lea d, [bp + 5] ; $num
6355   2DA7 2A            mov b, [d]
6356   2DA8 38 00 00      mov c, 0
6357   2DAB             ; --- START RELATIONAL
6358   2DAB D7            push a
6359   2DAC 11            mov a, b
6360   2DAD FD 2E 00 00   mov32 cb, $00000000
6360   2DB1 00 00 
6361   2DB3 B0            cmp a, b
6362   2DB4 FD 81         sgu ; > (unsigned)
6363   2DB6 E4            pop a
6364   2DB7             ; --- END RELATIONAL
6365   2DB7 C0 00 00      cmp b, 0
6366   2DBA C6 31 2E      je _while131_exit
6367   2DBD             _while131_block:
6368   2DBD             ; digits[i] = '0' + (num % 10); 
6369   2DBD FA FC FF      lea d, [bp + -4] ; $digits
6370   2DC0 D7            push a
6371   2DC1 DA            push d
6372   2DC2 FA FA FF      lea d, [bp + -6] ; $i
6373   2DC5 2A            mov b, [d]
6374   2DC6 38 00 00      mov c, 0
6375   2DC9 E7            pop d
6376   2DCA 5A            add d, b
6377   2DCB E4            pop a
6378   2DCC DA            push d
6379   2DCD FD 2E 30 00   mov32 cb, $00000030
6379   2DD1 00 00 
6380   2DD3             ; --- START TERMS
6381   2DD3 D7            push a
6382   2DD4 11            mov a, b
6383   2DD5 FA 05 00      lea d, [bp + 5] ; $num
6384   2DD8 2A            mov b, [d]
6385   2DD9 38 00 00      mov c, 0
6386   2DDC             ; --- START FACTORS
6387   2DDC D7            push a
6388   2DDD FD D8         push g
6389   2DDF 11            mov a, b
6390   2DE0 FD 7A         mov g, c
6391   2DE2 FD 2E 0A 00   mov32 cb, $0000000a
6391   2DE6 00 00 
6392   2DE8 FD D8         push g ; save 'g' as the div instruction uses it
6393   2DEA AE            div a, b ; %, a: quotient, b: remainder
6394   2DEB 11            mov a, b
6395   2DEC FD F1         pop g
6396   2DEE FD 38         mov c, g
6397   2DF0 27            mov b, a
6398   2DF1 FD F1         pop g
6399   2DF3 E4            pop a
6400   2DF4             ; --- END FACTORS
6401   2DF4 56            add b, a
6402   2DF5 E4            pop a
6403   2DF6             ; --- END TERMS
6404   2DF6 E7            pop d
6405   2DF7 FD 3E         mov [d], bl
6406   2DF9             ; num = num / 10; 
6407   2DF9 FA 05 00      lea d, [bp + 5] ; $num
6408   2DFC DA            push d
6409   2DFD FA 05 00      lea d, [bp + 5] ; $num
6410   2E00 2A            mov b, [d]
6411   2E01 38 00 00      mov c, 0
6412   2E04             ; --- START FACTORS
6413   2E04 D7            push a
6414   2E05 FD D8         push g
6415   2E07 11            mov a, b
6416   2E08 FD 7A         mov g, c
6417   2E0A FD 2E 0A 00   mov32 cb, $0000000a
6417   2E0E 00 00 
6418   2E10 FD D8         push g ; save 'g' as the div instruction uses it
6419   2E12 AE            div a, b ; /, a: quotient, b: remainder
6420   2E13 FD F1         pop g
6421   2E15 FD 38         mov c, g
6422   2E17 27            mov b, a
6423   2E18 FD F1         pop g
6424   2E1A E4            pop a
6425   2E1B             ; --- END FACTORS
6426   2E1B E7            pop d
6427   2E1C FD 43         mov [d], b
6428   2E1E             ; i++; 
6429   2E1E FA FA FF      lea d, [bp + -6] ; $i
6430   2E21 2A            mov b, [d]
6431   2E22 38 00 00      mov c, 0
6432   2E25 11            mov a, b
6433   2E26 FD 77         inc b
6434   2E28 FA FA FF      lea d, [bp + -6] ; $i
6435   2E2B FD 43         mov [d], b
6436   2E2D 27            mov b, a
6437   2E2E 0A A4 2D      jmp _while131_cond
6438   2E31             _while131_exit:
6439   2E31             ; while (i > 0) { 
6440   2E31             _while138_cond:
6441   2E31 FA FA FF      lea d, [bp + -6] ; $i
6442   2E34 2A            mov b, [d]
6443   2E35 38 00 00      mov c, 0
6444   2E38             ; --- START RELATIONAL
6445   2E38 D7            push a
6446   2E39 11            mov a, b
6447   2E3A FD 2E 00 00   mov32 cb, $00000000
6447   2E3E 00 00 
6448   2E40 B0            cmp a, b
6449   2E41 FD 7F         sgt ; >
6450   2E43 E4            pop a
6451   2E44             ; --- END RELATIONAL
6452   2E44 C0 00 00      cmp b, 0
6453   2E47 C6 79 2E      je _while138_exit
6454   2E4A             _while138_block:
6455   2E4A             ; i--; 
6456   2E4A FA FA FF      lea d, [bp + -6] ; $i
6457   2E4D 2A            mov b, [d]
6458   2E4E 38 00 00      mov c, 0
6459   2E51 11            mov a, b
6460   2E52 FD 7D         dec b
6461   2E54 FA FA FF      lea d, [bp + -6] ; $i
6462   2E57 FD 43         mov [d], b
6463   2E59 27            mov b, a
6464   2E5A             ; putchar(digits[i]); 
6465   2E5A             ; --- START FUNCTION CALL
6466   2E5A FA FC FF      lea d, [bp + -4] ; $digits
6467   2E5D D7            push a
6468   2E5E DA            push d
6469   2E5F FA FA FF      lea d, [bp + -6] ; $i
6470   2E62 2A            mov b, [d]
6471   2E63 38 00 00      mov c, 0
6472   2E66 E7            pop d
6473   2E67 5A            add d, b
6474   2E68 E4            pop a
6475   2E69 32            mov bl, [d]
6476   2E6A A7 00         mov bh, 0
6477   2E6C 38 00 00      mov c, 0
6478   2E6F DD            push bl
6479   2E70 07 42 2A      call putchar
6480   2E73 51 01 00      add sp, 1
6481   2E76             ; --- END FUNCTION CALL
6482   2E76 0A 31 2E      jmp _while138_cond
6483   2E79             _while138_exit:
6484   2E79 F9            leave
6485   2E7A 09            ret
6486   2E7B             
6487   2E7B             printx16:
6488   2E7B F8 00 00      enter 0 ; (push bp; mov bp, sp)
6489   2E7E             ; --- BEGIN INLINE ASM SEGMENT
6490   2E7E FA 05 00      lea d, [bp + 5] ; $hex
6491   2E81 2A            mov b, [d]
6492   2E82             print_u16x_printx16:
6493   2E82 DD            push bl
6494   2E83 30            mov bl, bh
6495   2E84 07 A1 2E      call _itoa_printx16        ; convert bh to char in A
6496   2E87 2F            mov bl, al        ; save al
6497   2E88 19 00         mov al, 0
6498   2E8A 05 03         syscall sys_io        ; display AH
6499   2E8C 24            mov ah, bl        ; retrieve al
6500   2E8D 19 00         mov al, 0
6501   2E8F 05 03         syscall sys_io        ; display AL
6502   2E91 EA            pop bl
6503   2E92 07 A1 2E      call _itoa_printx16        ; convert bh to char in A
6504   2E95 2F            mov bl, al        ; save al
6505   2E96 19 00         mov al, 0
6506   2E98 05 03         syscall sys_io        ; display AH
6507   2E9A 24            mov ah, bl        ; retrieve al
6508   2E9B 19 00         mov al, 0
6509   2E9D 05 03         syscall sys_io        ; display AL
6510   2E9F             ; --- END INLINE ASM SEGMENT
6511   2E9F             ; return; 
6512   2E9F F9            leave
6513   2EA0 09            ret
6514   2EA1             ; --- BEGIN INLINE ASM SEGMENT
6515   2EA1             _itoa_printx16:
6516   2EA1 DA            push d
6517   2EA2 D8            push b
6518   2EA3 A7 00         mov bh, 0
6519   2EA5 FD A4 04      shr bl, 4  
6520   2EA8 74            mov d, b
6521   2EA9 1F BB 2E      mov al, [d + s_hex_digits_printx16]
6522   2EAC 23            mov ah, al
6523   2EAD E5            pop b
6524   2EAE D8            push b
6525   2EAF A7 00         mov bh, 0
6526   2EB1 FD 87 0F      and bl, $0F
6527   2EB4 74            mov d, b
6528   2EB5 1F BB 2E      mov al, [d + s_hex_digits_printx16]
6529   2EB8 E5            pop b
6530   2EB9 E7            pop d
6531   2EBA 09            ret
6532   2EBB 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
6532   2EBF 34 35 36 37 
6532   2EC3 38 39 41 42 
6532   2EC7 43 44 45 46 
6533   2ECB             ; --- END INLINE ASM SEGMENT
6534   2ECB F9            leave
6535   2ECC 09            ret
6536   2ECD             
6537   2ECD             convert_constant:
6538   2ECD F8 00 00      enter 0 ; (push bp; mov bp, sp)
6539   2ED0             ; char *s; 
6540   2ED0 52 02 00      sub sp, 2
6541   2ED3             ; char *t; 
6542   2ED3 52 02 00      sub sp, 2
6543   2ED6             ; t = token; 
6544   2ED6 FA FD FF      lea d, [bp + -3] ; $t
6545   2ED9 DA            push d
6546   2EDA 3B DF 3E      mov d, _token_data ; $token
6547   2EDD 2D            mov b, d
6548   2EDE 38 00 00      mov c, 0
6549   2EE1 E7            pop d
6550   2EE2 FD 43         mov [d], b
6551   2EE4             ; s = string_const; 
6552   2EE4 FA FF FF      lea d, [bp + -1] ; $s
6553   2EE7 DA            push d
6554   2EE8 3B DF 3F      mov d, _string_const_data ; $string_const
6555   2EEB 2D            mov b, d
6556   2EEC 38 00 00      mov c, 0
6557   2EEF E7            pop d
6558   2EF0 FD 43         mov [d], b
6559   2EF2             ; if(toktype == CHAR_CONST){ 
6560   2EF2             _if139_cond:
6561   2EF2 3B DB 3E      mov d, _toktype ; $toktype
6562   2EF5 2A            mov b, [d]
6563   2EF6 38 00 00      mov c, 0
6564   2EF9             ; --- START RELATIONAL
6565   2EF9 D7            push a
6566   2EFA 11            mov a, b
6567   2EFB FD 2E 02 00   mov32 cb, $2 ; enum element: CHAR_CONST
6567   2EFF 00 00 
6568   2F01 B0            cmp a, b
6569   2F02 FD 71         seq ; ==
6570   2F04 E4            pop a
6571   2F05             ; --- END RELATIONAL
6572   2F05 C0 00 00      cmp b, 0
6573   2F08 C6 F7 30      je _if139_else
6574   2F0B             _if139_TRUE:
6575   2F0B             ; t++; 
6576   2F0B FA FD FF      lea d, [bp + -3] ; $t
6577   2F0E 2A            mov b, [d]
6578   2F0F 38 00 00      mov c, 0
6579   2F12 FD 77         inc b
6580   2F14 FA FD FF      lea d, [bp + -3] ; $t
6581   2F17 FD 43         mov [d], b
6582   2F19 FD 7D         dec b
6583   2F1B             ; if(*t == '\\'){ 
6584   2F1B             _if140_cond:
6585   2F1B FA FD FF      lea d, [bp + -3] ; $t
6586   2F1E 2A            mov b, [d]
6587   2F1F 38 00 00      mov c, 0
6588   2F22 74            mov d, b
6589   2F23 32            mov bl, [d]
6590   2F24 A7 00         mov bh, 0
6591   2F26 38 00 00      mov c, 0
6592   2F29             ; --- START RELATIONAL
6593   2F29 D7            push a
6594   2F2A 11            mov a, b
6595   2F2B FD 2E 5C 00   mov32 cb, $0000005c
6595   2F2F 00 00 
6596   2F31 B0            cmp a, b
6597   2F32 FD 71         seq ; ==
6598   2F34 E4            pop a
6599   2F35             ; --- END RELATIONAL
6600   2F35 C0 00 00      cmp b, 0
6601   2F38 C6 D2 30      je _if140_else
6602   2F3B             _if140_TRUE:
6603   2F3B             ; t++; 
6604   2F3B FA FD FF      lea d, [bp + -3] ; $t
6605   2F3E 2A            mov b, [d]
6606   2F3F 38 00 00      mov c, 0
6607   2F42 FD 77         inc b
6608   2F44 FA FD FF      lea d, [bp + -3] ; $t
6609   2F47 FD 43         mov [d], b
6610   2F49 FD 7D         dec b
6611   2F4B             ; switch(*t){ 
6612   2F4B             _switch141_expr:
6613   2F4B FA FD FF      lea d, [bp + -3] ; $t
6614   2F4E 2A            mov b, [d]
6615   2F4F 38 00 00      mov c, 0
6616   2F52 74            mov d, b
6617   2F53 32            mov bl, [d]
6618   2F54 A7 00         mov bh, 0
6619   2F56 38 00 00      mov c, 0
6620   2F59             _switch141_comparisons:
6621   2F59 C1 30         cmp bl, $30
6622   2F5B C6 93 2F      je _switch141_case0
6623   2F5E C1 61         cmp bl, $61
6624   2F60 C6 B0 2F      je _switch141_case1
6625   2F63 C1 62         cmp bl, $62
6626   2F65 C6 CD 2F      je _switch141_case2
6627   2F68 C1 66         cmp bl, $66
6628   2F6A C6 EA 2F      je _switch141_case3
6629   2F6D C1 6E         cmp bl, $6e
6630   2F6F C6 07 30      je _switch141_case4
6631   2F72 C1 72         cmp bl, $72
6632   2F74 C6 24 30      je _switch141_case5
6633   2F77 C1 74         cmp bl, $74
6634   2F79 C6 41 30      je _switch141_case6
6635   2F7C C1 76         cmp bl, $76
6636   2F7E C6 5E 30      je _switch141_case7
6637   2F81 C1 5C         cmp bl, $5c
6638   2F83 C6 7B 30      je _switch141_case8
6639   2F86 C1 27         cmp bl, $27
6640   2F88 C6 98 30      je _switch141_case9
6641   2F8B C1 22         cmp bl, $22
6642   2F8D C6 B5 30      je _switch141_case10
6643   2F90 0A CF 30      jmp _switch141_exit
6644   2F93             _switch141_case0:
6645   2F93             ; *s++ = '\0'; 
6646   2F93 FA FF FF      lea d, [bp + -1] ; $s
6647   2F96 2A            mov b, [d]
6648   2F97 38 00 00      mov c, 0
6649   2F9A FD 77         inc b
6650   2F9C FA FF FF      lea d, [bp + -1] ; $s
6651   2F9F FD 43         mov [d], b
6652   2FA1 FD 7D         dec b
6653   2FA3 D8            push b
6654   2FA4 FD 2E 00 00   mov32 cb, $00000000
6654   2FA8 00 00 
6655   2FAA E7            pop d
6656   2FAB FD 3E         mov [d], bl
6657   2FAD             ; break; 
6658   2FAD 0A CF 30      jmp _switch141_exit ; case break
6659   2FB0             _switch141_case1:
6660   2FB0             ; *s++ = '\a'; 
6661   2FB0 FA FF FF      lea d, [bp + -1] ; $s
6662   2FB3 2A            mov b, [d]
6663   2FB4 38 00 00      mov c, 0
6664   2FB7 FD 77         inc b
6665   2FB9 FA FF FF      lea d, [bp + -1] ; $s
6666   2FBC FD 43         mov [d], b
6667   2FBE FD 7D         dec b
6668   2FC0 D8            push b
6669   2FC1 FD 2E 07 00   mov32 cb, $00000007
6669   2FC5 00 00 
6670   2FC7 E7            pop d
6671   2FC8 FD 3E         mov [d], bl
6672   2FCA             ; break; 
6673   2FCA 0A CF 30      jmp _switch141_exit ; case break
6674   2FCD             _switch141_case2:
6675   2FCD             ; *s++ = '\b'; 
6676   2FCD FA FF FF      lea d, [bp + -1] ; $s
6677   2FD0 2A            mov b, [d]
6678   2FD1 38 00 00      mov c, 0
6679   2FD4 FD 77         inc b
6680   2FD6 FA FF FF      lea d, [bp + -1] ; $s
6681   2FD9 FD 43         mov [d], b
6682   2FDB FD 7D         dec b
6683   2FDD D8            push b
6684   2FDE FD 2E 08 00   mov32 cb, $00000008
6684   2FE2 00 00 
6685   2FE4 E7            pop d
6686   2FE5 FD 3E         mov [d], bl
6687   2FE7             ; break;   
6688   2FE7 0A CF 30      jmp _switch141_exit ; case break
6689   2FEA             _switch141_case3:
6690   2FEA             ; *s++ = '\f'; 
6691   2FEA FA FF FF      lea d, [bp + -1] ; $s
6692   2FED 2A            mov b, [d]
6693   2FEE 38 00 00      mov c, 0
6694   2FF1 FD 77         inc b
6695   2FF3 FA FF FF      lea d, [bp + -1] ; $s
6696   2FF6 FD 43         mov [d], b
6697   2FF8 FD 7D         dec b
6698   2FFA D8            push b
6699   2FFB FD 2E 0C 00   mov32 cb, $0000000c
6699   2FFF 00 00 
6700   3001 E7            pop d
6701   3002 FD 3E         mov [d], bl
6702   3004             ; break; 
6703   3004 0A CF 30      jmp _switch141_exit ; case break
6704   3007             _switch141_case4:
6705   3007             ; *s++ = '\n'; 
6706   3007 FA FF FF      lea d, [bp + -1] ; $s
6707   300A 2A            mov b, [d]
6708   300B 38 00 00      mov c, 0
6709   300E FD 77         inc b
6710   3010 FA FF FF      lea d, [bp + -1] ; $s
6711   3013 FD 43         mov [d], b
6712   3015 FD 7D         dec b
6713   3017 D8            push b
6714   3018 FD 2E 0A 00   mov32 cb, $0000000a
6714   301C 00 00 
6715   301E E7            pop d
6716   301F FD 3E         mov [d], bl
6717   3021             ; break; 
6718   3021 0A CF 30      jmp _switch141_exit ; case break
6719   3024             _switch141_case5:
6720   3024             ; *s++ = '\r'; 
6721   3024 FA FF FF      lea d, [bp + -1] ; $s
6722   3027 2A            mov b, [d]
6723   3028 38 00 00      mov c, 0
6724   302B FD 77         inc b
6725   302D FA FF FF      lea d, [bp + -1] ; $s
6726   3030 FD 43         mov [d], b
6727   3032 FD 7D         dec b
6728   3034 D8            push b
6729   3035 FD 2E 0D 00   mov32 cb, $0000000d
6729   3039 00 00 
6730   303B E7            pop d
6731   303C FD 3E         mov [d], bl
6732   303E             ; break; 
6733   303E 0A CF 30      jmp _switch141_exit ; case break
6734   3041             _switch141_case6:
6735   3041             ; *s++ = '\t'; 
6736   3041 FA FF FF      lea d, [bp + -1] ; $s
6737   3044 2A            mov b, [d]
6738   3045 38 00 00      mov c, 0
6739   3048 FD 77         inc b
6740   304A FA FF FF      lea d, [bp + -1] ; $s
6741   304D FD 43         mov [d], b
6742   304F FD 7D         dec b
6743   3051 D8            push b
6744   3052 FD 2E 09 00   mov32 cb, $00000009
6744   3056 00 00 
6745   3058 E7            pop d
6746   3059 FD 3E         mov [d], bl
6747   305B             ; break; 
6748   305B 0A CF 30      jmp _switch141_exit ; case break
6749   305E             _switch141_case7:
6750   305E             ; *s++ = '\v'; 
6751   305E FA FF FF      lea d, [bp + -1] ; $s
6752   3061 2A            mov b, [d]
6753   3062 38 00 00      mov c, 0
6754   3065 FD 77         inc b
6755   3067 FA FF FF      lea d, [bp + -1] ; $s
6756   306A FD 43         mov [d], b
6757   306C FD 7D         dec b
6758   306E D8            push b
6759   306F FD 2E 0B 00   mov32 cb, $0000000b
6759   3073 00 00 
6760   3075 E7            pop d
6761   3076 FD 3E         mov [d], bl
6762   3078             ; break; 
6763   3078 0A CF 30      jmp _switch141_exit ; case break
6764   307B             _switch141_case8:
6765   307B             ; *s++ = '\\'; 
6766   307B FA FF FF      lea d, [bp + -1] ; $s
6767   307E 2A            mov b, [d]
6768   307F 38 00 00      mov c, 0
6769   3082 FD 77         inc b
6770   3084 FA FF FF      lea d, [bp + -1] ; $s
6771   3087 FD 43         mov [d], b
6772   3089 FD 7D         dec b
6773   308B D8            push b
6774   308C FD 2E 5C 00   mov32 cb, $0000005c
6774   3090 00 00 
6775   3092 E7            pop d
6776   3093 FD 3E         mov [d], bl
6777   3095             ; break; 
6778   3095 0A CF 30      jmp _switch141_exit ; case break
6779   3098             _switch141_case9:
6780   3098             ; *s++ = '\''; 
6781   3098 FA FF FF      lea d, [bp + -1] ; $s
6782   309B 2A            mov b, [d]
6783   309C 38 00 00      mov c, 0
6784   309F FD 77         inc b
6785   30A1 FA FF FF      lea d, [bp + -1] ; $s
6786   30A4 FD 43         mov [d], b
6787   30A6 FD 7D         dec b
6788   30A8 D8            push b
6789   30A9 FD 2E 27 00   mov32 cb, $00000027
6789   30AD 00 00 
6790   30AF E7            pop d
6791   30B0 FD 3E         mov [d], bl
6792   30B2             ; break; 
6793   30B2 0A CF 30      jmp _switch141_exit ; case break
6794   30B5             _switch141_case10:
6795   30B5             ; *s++ = '\"'; 
6796   30B5 FA FF FF      lea d, [bp + -1] ; $s
6797   30B8 2A            mov b, [d]
6798   30B9 38 00 00      mov c, 0
6799   30BC FD 77         inc b
6800   30BE FA FF FF      lea d, [bp + -1] ; $s
6801   30C1 FD 43         mov [d], b
6802   30C3 FD 7D         dec b
6803   30C5 D8            push b
6804   30C6 FD 2E 22 00   mov32 cb, $00000022
6804   30CA 00 00 
6805   30CC E7            pop d
6806   30CD FD 3E         mov [d], bl
6807   30CF             _switch141_exit:
6808   30CF 0A F4 30      jmp _if140_exit
6809   30D2             _if140_else:
6810   30D2             ; *s++ = *t; 
6811   30D2 FA FF FF      lea d, [bp + -1] ; $s
6812   30D5 2A            mov b, [d]
6813   30D6 38 00 00      mov c, 0
6814   30D9 FD 77         inc b
6815   30DB FA FF FF      lea d, [bp + -1] ; $s
6816   30DE FD 43         mov [d], b
6817   30E0 FD 7D         dec b
6818   30E2 D8            push b
6819   30E3 FA FD FF      lea d, [bp + -3] ; $t
6820   30E6 2A            mov b, [d]
6821   30E7 38 00 00      mov c, 0
6822   30EA 74            mov d, b
6823   30EB 32            mov bl, [d]
6824   30EC A7 00         mov bh, 0
6825   30EE 38 00 00      mov c, 0
6826   30F1 E7            pop d
6827   30F2 FD 3E         mov [d], bl
6828   30F4             _if140_exit:
6829   30F4 0A 84 31      jmp _if139_exit
6830   30F7             _if139_else:
6831   30F7             ; if(toktype == STRING_CONST){ 
6832   30F7             _if142_cond:
6833   30F7 3B DB 3E      mov d, _toktype ; $toktype
6834   30FA 2A            mov b, [d]
6835   30FB 38 00 00      mov c, 0
6836   30FE             ; --- START RELATIONAL
6837   30FE D7            push a
6838   30FF 11            mov a, b
6839   3100 FD 2E 03 00   mov32 cb, $3 ; enum element: STRING_CONST
6839   3104 00 00 
6840   3106 B0            cmp a, b
6841   3107 FD 71         seq ; ==
6842   3109 E4            pop a
6843   310A             ; --- END RELATIONAL
6844   310A C0 00 00      cmp b, 0
6845   310D C6 84 31      je _if142_exit
6846   3110             _if142_TRUE:
6847   3110             ; t++; 
6848   3110 FA FD FF      lea d, [bp + -3] ; $t
6849   3113 2A            mov b, [d]
6850   3114 38 00 00      mov c, 0
6851   3117 FD 77         inc b
6852   3119 FA FD FF      lea d, [bp + -3] ; $t
6853   311C FD 43         mov [d], b
6854   311E FD 7D         dec b
6855   3120             ; while(*t != '\"' && *t){ 
6856   3120             _while143_cond:
6857   3120 FA FD FF      lea d, [bp + -3] ; $t
6858   3123 2A            mov b, [d]
6859   3124 38 00 00      mov c, 0
6860   3127 74            mov d, b
6861   3128 32            mov bl, [d]
6862   3129 A7 00         mov bh, 0
6863   312B 38 00 00      mov c, 0
6864   312E             ; --- START RELATIONAL
6865   312E D7            push a
6866   312F 11            mov a, b
6867   3130 FD 2E 22 00   mov32 cb, $00000022
6867   3134 00 00 
6868   3136 B0            cmp a, b
6869   3137 FD 72         sneq ; !=
6870   3139 E4            pop a
6871   313A             ; --- END RELATIONAL
6872   313A             ; --- START LOGICAL AND
6873   313A D7            push a
6874   313B 11            mov a, b
6875   313C FA FD FF      lea d, [bp + -3] ; $t
6876   313F 2A            mov b, [d]
6877   3140 38 00 00      mov c, 0
6878   3143 74            mov d, b
6879   3144 32            mov bl, [d]
6880   3145 A7 00         mov bh, 0
6881   3147 38 00 00      mov c, 0
6882   314A FD A7         sand a, b
6883   314C E4            pop a
6884   314D             ; --- END LOGICAL AND
6885   314D C0 00 00      cmp b, 0
6886   3150 C6 81 31      je _while143_exit
6887   3153             _while143_block:
6888   3153             ; *s++ = *t++; 
6889   3153 FA FF FF      lea d, [bp + -1] ; $s
6890   3156 2A            mov b, [d]
6891   3157 38 00 00      mov c, 0
6892   315A FD 77         inc b
6893   315C FA FF FF      lea d, [bp + -1] ; $s
6894   315F FD 43         mov [d], b
6895   3161 FD 7D         dec b
6896   3163 D8            push b
6897   3164 FA FD FF      lea d, [bp + -3] ; $t
6898   3167 2A            mov b, [d]
6899   3168 38 00 00      mov c, 0
6900   316B FD 77         inc b
6901   316D FA FD FF      lea d, [bp + -3] ; $t
6902   3170 FD 43         mov [d], b
6903   3172 FD 7D         dec b
6904   3174 74            mov d, b
6905   3175 32            mov bl, [d]
6906   3176 A7 00         mov bh, 0
6907   3178 38 00 00      mov c, 0
6908   317B E7            pop d
6909   317C FD 3E         mov [d], bl
6910   317E 0A 20 31      jmp _while143_cond
6911   3181             _while143_exit:
6912   3181 0A 84 31      jmp _if142_exit
6913   3184             _if142_exit:
6914   3184             _if139_exit:
6915   3184             ; *s = '\0'; 
6916   3184 FA FF FF      lea d, [bp + -1] ; $s
6917   3187 2A            mov b, [d]
6918   3188 38 00 00      mov c, 0
6919   318B D8            push b
6920   318C FD 2E 00 00   mov32 cb, $00000000
6920   3190 00 00 
6921   3192 E7            pop d
6922   3193 FD 3E         mov [d], bl
6923   3195 F9            leave
6924   3196 09            ret
6925   3197             
6926   3197             strcmp:
6927   3197 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6928   319A             ; while (*s1 && (*s1 == *s2)) { 
6929   319A             _while144_cond:
6930   319A FA 05 00      lea d, [bp + 5] ; $s1
6931   319D 2A            mov b, [d]
6932   319E 38 00 00      mov c, 0
6933   31A1 74            mov d, b
6934   31A2 32            mov bl, [d]
6935   31A3 A7 00         mov bh, 0
6936   31A5 38 00 00      mov c, 0
6937   31A8             ; --- START LOGICAL AND
6938   31A8 D7            push a
6939   31A9 11            mov a, b
6940   31AA FA 05 00      lea d, [bp + 5] ; $s1
6941   31AD 2A            mov b, [d]
6942   31AE 38 00 00      mov c, 0
6943   31B1 74            mov d, b
6944   31B2 32            mov bl, [d]
6945   31B3 A7 00         mov bh, 0
6946   31B5 38 00 00      mov c, 0
6947   31B8             ; --- START RELATIONAL
6948   31B8 D7            push a
6949   31B9 11            mov a, b
6950   31BA FA 07 00      lea d, [bp + 7] ; $s2
6951   31BD 2A            mov b, [d]
6952   31BE 38 00 00      mov c, 0
6953   31C1 74            mov d, b
6954   31C2 32            mov bl, [d]
6955   31C3 A7 00         mov bh, 0
6956   31C5 38 00 00      mov c, 0
6957   31C8 B0            cmp a, b
6958   31C9 FD 71         seq ; ==
6959   31CB E4            pop a
6960   31CC             ; --- END RELATIONAL
6961   31CC FD A7         sand a, b
6962   31CE E4            pop a
6963   31CF             ; --- END LOGICAL AND
6964   31CF C0 00 00      cmp b, 0
6965   31D2 C6 F8 31      je _while144_exit
6966   31D5             _while144_block:
6967   31D5             ; s1++; 
6968   31D5 FA 05 00      lea d, [bp + 5] ; $s1
6969   31D8 2A            mov b, [d]
6970   31D9 38 00 00      mov c, 0
6971   31DC FD 77         inc b
6972   31DE FA 05 00      lea d, [bp + 5] ; $s1
6973   31E1 FD 43         mov [d], b
6974   31E3 FD 7D         dec b
6975   31E5             ; s2++; 
6976   31E5 FA 07 00      lea d, [bp + 7] ; $s2
6977   31E8 2A            mov b, [d]
6978   31E9 38 00 00      mov c, 0
6979   31EC FD 77         inc b
6980   31EE FA 07 00      lea d, [bp + 7] ; $s2
6981   31F1 FD 43         mov [d], b
6982   31F3 FD 7D         dec b
6983   31F5 0A 9A 31      jmp _while144_cond
6984   31F8             _while144_exit:
6985   31F8             ; return *s1 - *s2; 
6986   31F8 FA 05 00      lea d, [bp + 5] ; $s1
6987   31FB 2A            mov b, [d]
6988   31FC 38 00 00      mov c, 0
6989   31FF 74            mov d, b
6990   3200 32            mov bl, [d]
6991   3201 A7 00         mov bh, 0
6992   3203 38 00 00      mov c, 0
6993   3206             ; --- START TERMS
6994   3206 D7            push a
6995   3207 11            mov a, b
6996   3208 FA 07 00      lea d, [bp + 7] ; $s2
6997   320B 2A            mov b, [d]
6998   320C 38 00 00      mov c, 0
6999   320F 74            mov d, b
7000   3210 32            mov bl, [d]
7001   3211 A7 00         mov bh, 0
7002   3213 38 00 00      mov c, 0
7003   3216 60            sub a, b
7004   3217 27            mov b, a
7005   3218 E4            pop a
7006   3219             ; --- END TERMS
7007   3219 F9            leave
7008   321A 09            ret
7009   321B             
7010   321B             strcat:
7011   321B F8 00 00      enter 0 ; (push bp; mov bp, sp)
7012   321E             ; int dest_len; 
7013   321E 52 02 00      sub sp, 2
7014   3221             ; int i; 
7015   3221 52 02 00      sub sp, 2
7016   3224             ; dest_len = strlen(dest); 
7017   3224 FA FF FF      lea d, [bp + -1] ; $dest_len
7018   3227 DA            push d
7019   3228             ; --- START FUNCTION CALL
7020   3228 FA 05 00      lea d, [bp + 5] ; $dest
7021   322B 2A            mov b, [d]
7022   322C 38 00 00      mov c, 0
7023   322F FD AB         swp b
7024   3231 D8            push b
7025   3232 07 FE 32      call strlen
7026   3235 51 02 00      add sp, 2
7027   3238             ; --- END FUNCTION CALL
7028   3238 E7            pop d
7029   3239 FD 43         mov [d], b
7030   323B             ; for (i = 0; src[i] != 0; i=i+1) { 
7031   323B             _for145_init:
7032   323B FA FD FF      lea d, [bp + -3] ; $i
7033   323E DA            push d
7034   323F FD 2E 00 00   mov32 cb, $00000000
7034   3243 00 00 
7035   3245 E7            pop d
7036   3246 FD 43         mov [d], b
7037   3248             _for145_cond:
7038   3248 FA 07 00      lea d, [bp + 7] ; $src
7039   324B FD 2A         mov d, [d]
7040   324D D7            push a
7041   324E DA            push d
7042   324F FA FD FF      lea d, [bp + -3] ; $i
7043   3252 2A            mov b, [d]
7044   3253 38 00 00      mov c, 0
7045   3256 E7            pop d
7046   3257 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
7047   325B E4            pop a
7048   325C 32            mov bl, [d]
7049   325D A7 00         mov bh, 0
7050   325F 38 00 00      mov c, 0
7051   3262             ; --- START RELATIONAL
7052   3262 D7            push a
7053   3263 11            mov a, b
7054   3264 FD 2E 00 00   mov32 cb, $00000000
7054   3268 00 00 
7055   326A B0            cmp a, b
7056   326B FD 72         sneq ; !=
7057   326D E4            pop a
7058   326E             ; --- END RELATIONAL
7059   326E C0 00 00      cmp b, 0
7060   3271 C6 CC 32      je _for145_exit
7061   3274             _for145_block:
7062   3274             ; dest[dest_len + i] = src[i]; 
7063   3274 FA 05 00      lea d, [bp + 5] ; $dest
7064   3277 FD 2A         mov d, [d]
7065   3279 D7            push a
7066   327A DA            push d
7067   327B FA FF FF      lea d, [bp + -1] ; $dest_len
7068   327E 2A            mov b, [d]
7069   327F 38 00 00      mov c, 0
7070   3282             ; --- START TERMS
7071   3282 D7            push a
7072   3283 11            mov a, b
7073   3284 FA FD FF      lea d, [bp + -3] ; $i
7074   3287 2A            mov b, [d]
7075   3288 38 00 00      mov c, 0
7076   328B 56            add b, a
7077   328C E4            pop a
7078   328D             ; --- END TERMS
7079   328D E7            pop d
7080   328E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
7081   3292 E4            pop a
7082   3293 DA            push d
7083   3294 FA 07 00      lea d, [bp + 7] ; $src
7084   3297 FD 2A         mov d, [d]
7085   3299 D7            push a
7086   329A DA            push d
7087   329B FA FD FF      lea d, [bp + -3] ; $i
7088   329E 2A            mov b, [d]
7089   329F 38 00 00      mov c, 0
7090   32A2 E7            pop d
7091   32A3 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
7092   32A7 E4            pop a
7093   32A8 32            mov bl, [d]
7094   32A9 A7 00         mov bh, 0
7095   32AB 38 00 00      mov c, 0
7096   32AE E7            pop d
7097   32AF FD 3E         mov [d], bl
7098   32B1             _for145_update:
7099   32B1 FA FD FF      lea d, [bp + -3] ; $i
7100   32B4 DA            push d
7101   32B5 FA FD FF      lea d, [bp + -3] ; $i
7102   32B8 2A            mov b, [d]
7103   32B9 38 00 00      mov c, 0
7104   32BC             ; --- START TERMS
7105   32BC D7            push a
7106   32BD 11            mov a, b
7107   32BE FD 2E 01 00   mov32 cb, $00000001
7107   32C2 00 00 
7108   32C4 56            add b, a
7109   32C5 E4            pop a
7110   32C6             ; --- END TERMS
7111   32C6 E7            pop d
7112   32C7 FD 43         mov [d], b
7113   32C9 0A 48 32      jmp _for145_cond
7114   32CC             _for145_exit:
7115   32CC             ; dest[dest_len + i] = 0; 
7116   32CC FA 05 00      lea d, [bp + 5] ; $dest
7117   32CF FD 2A         mov d, [d]
7118   32D1 D7            push a
7119   32D2 DA            push d
7120   32D3 FA FF FF      lea d, [bp + -1] ; $dest_len
7121   32D6 2A            mov b, [d]
7122   32D7 38 00 00      mov c, 0
7123   32DA             ; --- START TERMS
7124   32DA D7            push a
7125   32DB 11            mov a, b
7126   32DC FA FD FF      lea d, [bp + -3] ; $i
7127   32DF 2A            mov b, [d]
7128   32E0 38 00 00      mov c, 0
7129   32E3 56            add b, a
7130   32E4 E4            pop a
7131   32E5             ; --- END TERMS
7132   32E5 E7            pop d
7133   32E6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
7134   32EA E4            pop a
7135   32EB DA            push d
7136   32EC FD 2E 00 00   mov32 cb, $00000000
7136   32F0 00 00 
7137   32F2 E7            pop d
7138   32F3 FD 3E         mov [d], bl
7139   32F5             ; return dest; 
7140   32F5 FA 05 00      lea d, [bp + 5] ; $dest
7141   32F8 2A            mov b, [d]
7142   32F9 38 00 00      mov c, 0
7143   32FC F9            leave
7144   32FD 09            ret
7145   32FE             
7146   32FE             strlen:
7147   32FE F8 00 00      enter 0 ; (push bp; mov bp, sp)
7148   3301             ; int length; 
7149   3301 52 02 00      sub sp, 2
7150   3304             ; length = 0; 
7151   3304 FA FF FF      lea d, [bp + -1] ; $length
7152   3307 DA            push d
7153   3308 FD 2E 00 00   mov32 cb, $00000000
7153   330C 00 00 
7154   330E E7            pop d
7155   330F FD 43         mov [d], b
7156   3311             ; while (str[length] != 0) { 
7157   3311             _while146_cond:
7158   3311 FA 05 00      lea d, [bp + 5] ; $str
7159   3314 FD 2A         mov d, [d]
7160   3316 D7            push a
7161   3317 DA            push d
7162   3318 FA FF FF      lea d, [bp + -1] ; $length
7163   331B 2A            mov b, [d]
7164   331C 38 00 00      mov c, 0
7165   331F E7            pop d
7166   3320 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
7167   3324 E4            pop a
7168   3325 32            mov bl, [d]
7169   3326 A7 00         mov bh, 0
7170   3328 38 00 00      mov c, 0
7171   332B             ; --- START RELATIONAL
7172   332B D7            push a
7173   332C 11            mov a, b
7174   332D FD 2E 00 00   mov32 cb, $00000000
7174   3331 00 00 
7175   3333 B0            cmp a, b
7176   3334 FD 72         sneq ; !=
7177   3336 E4            pop a
7178   3337             ; --- END RELATIONAL
7179   3337 C0 00 00      cmp b, 0
7180   333A C6 50 33      je _while146_exit
7181   333D             _while146_block:
7182   333D             ; length++; 
7183   333D FA FF FF      lea d, [bp + -1] ; $length
7184   3340 2A            mov b, [d]
7185   3341 38 00 00      mov c, 0
7186   3344 11            mov a, b
7187   3345 FD 77         inc b
7188   3347 FA FF FF      lea d, [bp + -1] ; $length
7189   334A FD 43         mov [d], b
7190   334C 27            mov b, a
7191   334D 0A 11 33      jmp _while146_cond
7192   3350             _while146_exit:
7193   3350             ; return length; 
7194   3350 FA FF FF      lea d, [bp + -1] ; $length
7195   3353 2A            mov b, [d]
7196   3354 38 00 00      mov c, 0
7197   3357 F9            leave
7198   3358 09            ret
7199   3359             
7200   3359             free:
7201   3359 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7202   335C             ; return heap_top = heap_top - bytes; 
7203   335C 3B B3 41      mov d, _heap_top ; $heap_top
7204   335F DA            push d
7205   3360 3B B3 41      mov d, _heap_top ; $heap_top
7206   3363 2A            mov b, [d]
7207   3364 38 00 00      mov c, 0
7208   3367             ; --- START TERMS
7209   3367 D7            push a
7210   3368 11            mov a, b
7211   3369 FA 05 00      lea d, [bp + 5] ; $bytes
7212   336C 2A            mov b, [d]
7213   336D 38 00 00      mov c, 0
7214   3370 60            sub a, b
7215   3371 27            mov b, a
7216   3372 E4            pop a
7217   3373             ; --- END TERMS
7218   3373 E7            pop d
7219   3374 FD 43         mov [d], b
7220   3376 F9            leave
7221   3377 09            ret
7222   3378             
7223   3378             gets:
7224   3378 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7225   337B             ; --- BEGIN INLINE ASM SEGMENT
7226   337B FA 05 00      lea d, [bp + 5] ; $s
7227   337E 15            mov a, [d]
7228   337F 3C            mov d, a
7229   3380 07 95 33      call _gets_gets
7230   3383             ; --- END INLINE ASM SEGMENT
7231   3383             ; return strlen(s); 
7232   3383             ; --- START FUNCTION CALL
7233   3383 FA 05 00      lea d, [bp + 5] ; $s
7234   3386 2A            mov b, [d]
7235   3387 38 00 00      mov c, 0
7236   338A FD AB         swp b
7237   338C D8            push b
7238   338D 07 FE 32      call strlen
7239   3390 51 02 00      add sp, 2
7240   3393             ; --- END FUNCTION CALL
7241   3393 F9            leave
7242   3394 09            ret
7243   3395             ; --- BEGIN INLINE ASM SEGMENT
7244   3395             _gets_gets:
7245   3395 D7            push a
7246   3396 DA            push d
7247   3397             _gets_loop_gets:
7248   3397 19 01         mov al, 1
7249   3399 05 03         syscall sys_io      ; receive in AH
7250   339B B9 00         cmp al, 0        ; check error code (AL)
7251   339D C6 97 33      je _gets_loop_gets      ; if no char received, retry
7252   33A0 76 1B         cmp ah, 27
7253   33A2 C6 C3 33      je _gets_ansi_esc_gets
7254   33A5 76 0A         cmp ah, $0A        ; LF
7255   33A7 C6 2E 34      je _gets_end_gets
7256   33AA 76 0D         cmp ah, $0D        ; CR
7257   33AC C6 2E 34      je _gets_end_gets
7258   33AF 76 5C         cmp ah, $5C        ; '\\'
7259   33B1 C6 EF 33      je _gets_escape_gets
7260   33B4 76 08         cmp ah, $08      ; check for backspace
7261   33B6 C6 BF 33      je _gets_backspace_gets
7262   33B9 1A            mov al, ah
7263   33BA 3E            mov [d], al
7264   33BB 79            inc d
7265   33BC 0A 97 33      jmp _gets_loop_gets
7266   33BF             _gets_backspace_gets:
7267   33BF 7F            dec d
7268   33C0 0A 97 33      jmp _gets_loop_gets
7269   33C3             _gets_ansi_esc_gets:
7270   33C3 19 01         mov al, 1
7271   33C5 05 03         syscall sys_io        ; receive in AH without echo
7272   33C7 B9 00         cmp al, 0          ; check error code (AL)
7273   33C9 C6 C3 33      je _gets_ansi_esc_gets    ; if no char received, retry
7274   33CC 76 5B         cmp ah, '['
7275   33CE C7 97 33      jne _gets_loop_gets
7276   33D1             _gets_ansi_esc_2_gets:
7277   33D1 19 01         mov al, 1
7278   33D3 05 03         syscall sys_io          ; receive in AH without echo
7279   33D5 B9 00         cmp al, 0            ; check error code (AL)
7280   33D7 C6 D1 33      je _gets_ansi_esc_2_gets  ; if no char received, retry
7281   33DA 76 44         cmp ah, 'D'
7282   33DC C6 E7 33      je _gets_left_arrow_gets
7283   33DF 76 43         cmp ah, 'C'
7284   33E1 C6 EB 33      je _gets_right_arrow_gets
7285   33E4 0A 97 33      jmp _gets_loop_gets
7286   33E7             _gets_left_arrow_gets:
7287   33E7 7F            dec d
7288   33E8 0A 97 33      jmp _gets_loop_gets
7289   33EB             _gets_right_arrow_gets:
7290   33EB 79            inc d
7291   33EC 0A 97 33      jmp _gets_loop_gets
7292   33EF             _gets_escape_gets:
7293   33EF 19 01         mov al, 1
7294   33F1 05 03         syscall sys_io      ; receive in AH
7295   33F3 B9 00         cmp al, 0        ; check error code (AL)
7296   33F5 C6 EF 33      je _gets_escape_gets      ; if no char received, retry
7297   33F8 76 6E         cmp ah, 'n'
7298   33FA C6 19 34      je _gets_LF_gets
7299   33FD 76 72         cmp ah, 'r'
7300   33FF C6 20 34      je _gets_CR_gets
7301   3402 76 30         cmp ah, '0'
7302   3404 C6 27 34      je _gets_NULL_gets
7303   3407 76 5C         cmp ah, $5C  
7304   3409 C6 12 34      je _gets_slash_gets
7305   340C 1A            mov al, ah        ; if not a known escape, it is just a normal letter
7306   340D 3E            mov [d], al
7307   340E 79            inc d
7308   340F 0A 97 33      jmp _gets_loop_gets
7309   3412             _gets_slash_gets:
7310   3412 19 5C         mov al, $5C
7311   3414 3E            mov [d], al
7312   3415 79            inc d
7313   3416 0A 97 33      jmp _gets_loop_gets
7314   3419             _gets_LF_gets:
7315   3419 19 0A         mov al, $0A
7316   341B 3E            mov [d], al
7317   341C 79            inc d
7318   341D 0A 97 33      jmp _gets_loop_gets
7319   3420             _gets_CR_gets:
7320   3420 19 0D         mov al, $0D
7321   3422 3E            mov [d], al
7322   3423 79            inc d
7323   3424 0A 97 33      jmp _gets_loop_gets
7324   3427             _gets_NULL_gets:
7325   3427 19 00         mov al, $00
7326   3429 3E            mov [d], al
7327   342A 79            inc d
7328   342B 0A 97 33      jmp _gets_loop_gets
7329   342E             _gets_end_gets:
7330   342E 19 00         mov al, 0
7331   3430 3E            mov [d], al        ; terminate string
7332   3431 E7            pop d
7333   3432 E4            pop a
7334   3433 09            ret
7335   3434             ; --- END INLINE ASM SEGMENT
7336   3434 F9            leave
7337   3435 09            ret
7338   3436             
7339   3436             atoi:
7340   3436 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7341   3439             ; int result = 0;  // Initialize result 
7342   3439 52 02 00      sub sp, 2
7343   343C             ; --- START LOCAL VAR INITIALIZATION
7344   343C FA FF FF      lea d, [bp + -1] ; $result
7345   343F DA            push d
7346   3440 FD 2E 00 00   mov32 cb, $00000000
7346   3444 00 00 
7347   3446 E7            pop d
7348   3447 FD 43         mov [d], b
7349   3449             ; --- END LOCAL VAR INITIALIZATION
7350   3449             ; int sign = 1;    // Initialize sign as positive 
7351   3449 52 02 00      sub sp, 2
7352   344C             ; --- START LOCAL VAR INITIALIZATION
7353   344C FA FD FF      lea d, [bp + -3] ; $sign
7354   344F DA            push d
7355   3450 FD 2E 01 00   mov32 cb, $00000001
7355   3454 00 00 
7356   3456 E7            pop d
7357   3457 FD 43         mov [d], b
7358   3459             ; --- END LOCAL VAR INITIALIZATION
7359   3459             ; while (*str == ' ') str++; 
7360   3459             _while147_cond:
7361   3459 FA 05 00      lea d, [bp + 5] ; $str
7362   345C 2A            mov b, [d]
7363   345D 38 00 00      mov c, 0
7364   3460 74            mov d, b
7365   3461 32            mov bl, [d]
7366   3462 A7 00         mov bh, 0
7367   3464 38 00 00      mov c, 0
7368   3467             ; --- START RELATIONAL
7369   3467 D7            push a
7370   3468 11            mov a, b
7371   3469 FD 2E 20 00   mov32 cb, $00000020
7371   346D 00 00 
7372   346F B0            cmp a, b
7373   3470 FD 71         seq ; ==
7374   3472 E4            pop a
7375   3473             ; --- END RELATIONAL
7376   3473 C0 00 00      cmp b, 0
7377   3476 C6 8C 34      je _while147_exit
7378   3479             _while147_block:
7379   3479             ; str++; 
7380   3479 FA 05 00      lea d, [bp + 5] ; $str
7381   347C 2A            mov b, [d]
7382   347D 38 00 00      mov c, 0
7383   3480 FD 77         inc b
7384   3482 FA 05 00      lea d, [bp + 5] ; $str
7385   3485 FD 43         mov [d], b
7386   3487 FD 7D         dec b
7387   3489 0A 59 34      jmp _while147_cond
7388   348C             _while147_exit:
7389   348C             ; if (*str == '-' || *str == '+') { 
7390   348C             _if148_cond:
7391   348C FA 05 00      lea d, [bp + 5] ; $str
7392   348F 2A            mov b, [d]
7393   3490 38 00 00      mov c, 0
7394   3493 74            mov d, b
7395   3494 32            mov bl, [d]
7396   3495 A7 00         mov bh, 0
7397   3497 38 00 00      mov c, 0
7398   349A             ; --- START RELATIONAL
7399   349A D7            push a
7400   349B 11            mov a, b
7401   349C FD 2E 2D 00   mov32 cb, $0000002d
7401   34A0 00 00 
7402   34A2 B0            cmp a, b
7403   34A3 FD 71         seq ; ==
7404   34A5 E4            pop a
7405   34A6             ; --- END RELATIONAL
7406   34A6             ; --- START LOGICAL OR
7407   34A6 D7            push a
7408   34A7 11            mov a, b
7409   34A8 FA 05 00      lea d, [bp + 5] ; $str
7410   34AB 2A            mov b, [d]
7411   34AC 38 00 00      mov c, 0
7412   34AF 74            mov d, b
7413   34B0 32            mov bl, [d]
7414   34B1 A7 00         mov bh, 0
7415   34B3 38 00 00      mov c, 0
7416   34B6             ; --- START RELATIONAL
7417   34B6 D7            push a
7418   34B7 11            mov a, b
7419   34B8 FD 2E 2B 00   mov32 cb, $0000002b
7419   34BC 00 00 
7420   34BE B0            cmp a, b
7421   34BF FD 71         seq ; ==
7422   34C1 E4            pop a
7423   34C2             ; --- END RELATIONAL
7424   34C2 FD A8         sor a, b ; ||
7425   34C4 E4            pop a
7426   34C5             ; --- END LOGICAL OR
7427   34C5 C0 00 00      cmp b, 0
7428   34C8 C6 0E 35      je _if148_exit
7429   34CB             _if148_TRUE:
7430   34CB             ; if (*str == '-') sign = -1; 
7431   34CB             _if149_cond:
7432   34CB FA 05 00      lea d, [bp + 5] ; $str
7433   34CE 2A            mov b, [d]
7434   34CF 38 00 00      mov c, 0
7435   34D2 74            mov d, b
7436   34D3 32            mov bl, [d]
7437   34D4 A7 00         mov bh, 0
7438   34D6 38 00 00      mov c, 0
7439   34D9             ; --- START RELATIONAL
7440   34D9 D7            push a
7441   34DA 11            mov a, b
7442   34DB FD 2E 2D 00   mov32 cb, $0000002d
7442   34DF 00 00 
7443   34E1 B0            cmp a, b
7444   34E2 FD 71         seq ; ==
7445   34E4 E4            pop a
7446   34E5             ; --- END RELATIONAL
7447   34E5 C0 00 00      cmp b, 0
7448   34E8 C6 FB 34      je _if149_exit
7449   34EB             _if149_TRUE:
7450   34EB             ; sign = -1; 
7451   34EB FA FD FF      lea d, [bp + -3] ; $sign
7452   34EE DA            push d
7453   34EF FD 2E FF FF   mov32 cb, $ffffffff
7453   34F3 FF FF 
7454   34F5 E7            pop d
7455   34F6 FD 43         mov [d], b
7456   34F8 0A FB 34      jmp _if149_exit
7457   34FB             _if149_exit:
7458   34FB             ; str++; 
7459   34FB FA 05 00      lea d, [bp + 5] ; $str
7460   34FE 2A            mov b, [d]
7461   34FF 38 00 00      mov c, 0
7462   3502 FD 77         inc b
7463   3504 FA 05 00      lea d, [bp + 5] ; $str
7464   3507 FD 43         mov [d], b
7465   3509 FD 7D         dec b
7466   350B 0A 0E 35      jmp _if148_exit
7467   350E             _if148_exit:
7468   350E             ; while (*str >= '0' && *str <= '9') { 
7469   350E             _while150_cond:
7470   350E FA 05 00      lea d, [bp + 5] ; $str
7471   3511 2A            mov b, [d]
7472   3512 38 00 00      mov c, 0
7473   3515 74            mov d, b
7474   3516 32            mov bl, [d]
7475   3517 A7 00         mov bh, 0
7476   3519 38 00 00      mov c, 0
7477   351C             ; --- START RELATIONAL
7478   351C D7            push a
7479   351D 11            mov a, b
7480   351E FD 2E 30 00   mov32 cb, $00000030
7480   3522 00 00 
7481   3524 B0            cmp a, b
7482   3525 FD 82         sgeu ; >= (unsigned)
7483   3527 E4            pop a
7484   3528             ; --- END RELATIONAL
7485   3528             ; --- START LOGICAL AND
7486   3528 D7            push a
7487   3529 11            mov a, b
7488   352A FA 05 00      lea d, [bp + 5] ; $str
7489   352D 2A            mov b, [d]
7490   352E 38 00 00      mov c, 0
7491   3531 74            mov d, b
7492   3532 32            mov bl, [d]
7493   3533 A7 00         mov bh, 0
7494   3535 38 00 00      mov c, 0
7495   3538             ; --- START RELATIONAL
7496   3538 D7            push a
7497   3539 11            mov a, b
7498   353A FD 2E 39 00   mov32 cb, $00000039
7498   353E 00 00 
7499   3540 B0            cmp a, b
7500   3541 FD 76         sleu ; <= (unsigned)
7501   3543 E4            pop a
7502   3544             ; --- END RELATIONAL
7503   3544 FD A7         sand a, b
7504   3546 E4            pop a
7505   3547             ; --- END LOGICAL AND
7506   3547 C0 00 00      cmp b, 0
7507   354A C6 D6 35      je _while150_exit
7508   354D             _while150_block:
7509   354D             ; result = result * 10 + (*str - '0'); 
7510   354D FA FF FF      lea d, [bp + -1] ; $result
7511   3550 DA            push d
7512   3551 FA FF FF      lea d, [bp + -1] ; $result
7513   3554 2A            mov b, [d]
7514   3555 38 00 00      mov c, 0
7515   3558             ; --- START FACTORS
7516   3558 D7            push a
7517   3559 FD D8         push g
7518   355B 11            mov a, b
7519   355C FD 7A         mov g, c
7520   355E FD 2E 0A 00   mov32 cb, $0000000a
7520   3562 00 00 
7521   3564 D7            push a     ; save left operand
7522   3565 8E            xor a, b   ; xor sign bits
7523   3566 FD AA         swp a      ; swap bytes
7524   3568 83            mov cl, al ; save result of xor into 'dl'
7525   3569 E4            pop a      ; restore left side operator
7526   356A DF            push cl    ; save result of xor above
7527   356B FD AA         swp a  
7528   356D 93 80         test al, $80  
7529   356F FD AA         swp a  
7530   3571 C6 76 35      jz skip_invert_a_152  
7531   3574 FD 95         neg a 
7532   3576             skip_invert_a_152:   
7533   3576 FD AB         swp b
7534   3578 FD 93 80      test bl, $80  
7535   357B FD AB         swp b
7536   357D C6 82 35      jz skip_invert_b_152  
7537   3580 FD 97         neg b 
7538   3582             skip_invert_b_152:   
7539   3582 AC            mul a, b ; *
7540   3583 FD 78         mov g, a
7541   3585 11            mov a, b
7542   3586 EA            pop bl
7543   3587 FD 93 80      test bl, $80
7544   358A C6 97 35      jz _same_signs_152
7545   358D 2F            mov bl, al
7546   358E 95            not a
7547   358F FD 97         neg b
7548   3591 5B 00 00      adc a, 0
7549   3594 FD 78         mov g, a
7550   3596 11            mov a, b
7551   3597             _same_signs_152:
7552   3597 FD 38         mov c, g
7553   3599 27            mov b, a
7554   359A FD F1         pop g
7555   359C E4            pop a
7556   359D             ; --- END FACTORS
7557   359D             ; --- START TERMS
7558   359D D7            push a
7559   359E FD D8         push g
7560   35A0 11            mov a, b
7561   35A1 FD 7A         mov g, c
7562   35A3 FA 05 00      lea d, [bp + 5] ; $str
7563   35A6 2A            mov b, [d]
7564   35A7 38 00 00      mov c, 0
7565   35AA 74            mov d, b
7566   35AB 32            mov bl, [d]
7567   35AC A7 00         mov bh, 0
7568   35AE 38 00 00      mov c, 0
7569   35B1             ; --- START TERMS
7570   35B1 D7            push a
7571   35B2 11            mov a, b
7572   35B3 FD 2E 30 00   mov32 cb, $00000030
7572   35B7 00 00 
7573   35B9 60            sub a, b
7574   35BA 27            mov b, a
7575   35BB E4            pop a
7576   35BC             ; --- END TERMS
7577   35BC 56            add b, a
7578   35BD FD F1         pop g
7579   35BF E4            pop a
7580   35C0             ; --- END TERMS
7581   35C0 E7            pop d
7582   35C1 FD 43         mov [d], b
7583   35C3             ; str++; 
7584   35C3 FA 05 00      lea d, [bp + 5] ; $str
7585   35C6 2A            mov b, [d]
7586   35C7 38 00 00      mov c, 0
7587   35CA FD 77         inc b
7588   35CC FA 05 00      lea d, [bp + 5] ; $str
7589   35CF FD 43         mov [d], b
7590   35D1 FD 7D         dec b
7591   35D3 0A 0E 35      jmp _while150_cond
7592   35D6             _while150_exit:
7593   35D6             ; return sign * result; 
7594   35D6 FA FD FF      lea d, [bp + -3] ; $sign
7595   35D9 2A            mov b, [d]
7596   35DA 38 00 00      mov c, 0
7597   35DD             ; --- START FACTORS
7598   35DD D7            push a
7599   35DE FD D8         push g
7600   35E0 11            mov a, b
7601   35E1 FD 7A         mov g, c
7602   35E3 FA FF FF      lea d, [bp + -1] ; $result
7603   35E6 2A            mov b, [d]
7604   35E7 38 00 00      mov c, 0
7605   35EA D7            push a     ; save left operand
7606   35EB 8E            xor a, b   ; xor sign bits
7607   35EC FD AA         swp a      ; swap bytes
7608   35EE 83            mov cl, al ; save result of xor into 'dl'
7609   35EF E4            pop a      ; restore left side operator
7610   35F0 DF            push cl    ; save result of xor above
7611   35F1 FD AA         swp a  
7612   35F3 93 80         test al, $80  
7613   35F5 FD AA         swp a  
7614   35F7 C6 FC 35      jz skip_invert_a_154  
7615   35FA FD 95         neg a 
7616   35FC             skip_invert_a_154:   
7617   35FC FD AB         swp b
7618   35FE FD 93 80      test bl, $80  
7619   3601 FD AB         swp b
7620   3603 C6 08 36      jz skip_invert_b_154  
7621   3606 FD 97         neg b 
7622   3608             skip_invert_b_154:   
7623   3608 AC            mul a, b ; *
7624   3609 FD 78         mov g, a
7625   360B 11            mov a, b
7626   360C EA            pop bl
7627   360D FD 93 80      test bl, $80
7628   3610 C6 1D 36      jz _same_signs_154
7629   3613 2F            mov bl, al
7630   3614 95            not a
7631   3615 FD 97         neg b
7632   3617 5B 00 00      adc a, 0
7633   361A FD 78         mov g, a
7634   361C 11            mov a, b
7635   361D             _same_signs_154:
7636   361D FD 38         mov c, g
7637   361F 27            mov b, a
7638   3620 FD F1         pop g
7639   3622 E4            pop a
7640   3623             ; --- END FACTORS
7641   3623 F9            leave
7642   3624 09            ret
7643   3625             
7644   3625             back:
7645   3625 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7646   3628             ; char *t; 
7647   3628 52 02 00      sub sp, 2
7648   362B             ; t = token; 
7649   362B FA FF FF      lea d, [bp + -1] ; $t
7650   362E DA            push d
7651   362F 3B DF 3E      mov d, _token_data ; $token
7652   3632 2D            mov b, d
7653   3633 38 00 00      mov c, 0
7654   3636 E7            pop d
7655   3637 FD 43         mov [d], b
7656   3639             ; while(*t++) prog--; 
7657   3639             _while155_cond:
7658   3639 FA FF FF      lea d, [bp + -1] ; $t
7659   363C 2A            mov b, [d]
7660   363D 38 00 00      mov c, 0
7661   3640 FD 77         inc b
7662   3642 FA FF FF      lea d, [bp + -1] ; $t
7663   3645 FD 43         mov [d], b
7664   3647 FD 7D         dec b
7665   3649 74            mov d, b
7666   364A 32            mov bl, [d]
7667   364B A7 00         mov bh, 0
7668   364D 38 00 00      mov c, 0
7669   3650 C0 00 00      cmp b, 0
7670   3653 C6 69 36      je _while155_exit
7671   3656             _while155_block:
7672   3656             ; prog--; 
7673   3656 3B DD 3E      mov d, _prog ; $prog
7674   3659 2A            mov b, [d]
7675   365A 38 00 00      mov c, 0
7676   365D FD 7D         dec b
7677   365F 3B DD 3E      mov d, _prog ; $prog
7678   3662 FD 43         mov [d], b
7679   3664 FD 77         inc b
7680   3666 0A 39 36      jmp _while155_cond
7681   3669             _while155_exit:
7682   3669             ; tok = TOK_UNDEF; 
7683   3669 3B D9 3E      mov d, _tok ; $tok
7684   366C DA            push d
7685   366D FD 2E 00 00   mov32 cb, $0 ; enum element: TOK_UNDEF
7685   3671 00 00 
7686   3673 E7            pop d
7687   3674 FD 43         mov [d], b
7688   3676             ; toktype = TYPE_UNDEF; 
7689   3676 3B DB 3E      mov d, _toktype ; $toktype
7690   3679 DA            push d
7691   367A FD 2E 00 00   mov32 cb, $0 ; enum element: TYPE_UNDEF
7691   367E 00 00 
7692   3680 E7            pop d
7693   3681 FD 43         mov [d], b
7694   3683             ; token[0] = '\0'; 
7695   3683 3B DF 3E      mov d, _token_data ; $token
7696   3686 D7            push a
7697   3687 DA            push d
7698   3688 FD 2E 00 00   mov32 cb, $00000000
7698   368C 00 00 
7699   368E E7            pop d
7700   368F 5A            add d, b
7701   3690 E4            pop a
7702   3691 DA            push d
7703   3692 FD 2E 00 00   mov32 cb, $00000000
7703   3696 00 00 
7704   3698 E7            pop d
7705   3699 FD 3E         mov [d], bl
7706   369B F9            leave
7707   369C 09            ret
7708   369D             
7709   369D             get_path:
7710   369D F8 00 00      enter 0 ; (push bp; mov bp, sp)
7711   36A0             ; char *t; 
7712   36A0 52 02 00      sub sp, 2
7713   36A3             ; *token = '\0'; 
7714   36A3 3B DF 3E      mov d, _token_data ; $token
7715   36A6 2D            mov b, d
7716   36A7 38 00 00      mov c, 0
7717   36AA D8            push b
7718   36AB FD 2E 00 00   mov32 cb, $00000000
7718   36AF 00 00 
7719   36B1 E7            pop d
7720   36B2 FD 3E         mov [d], bl
7721   36B4             ; t = token; 
7722   36B4 FA FF FF      lea d, [bp + -1] ; $t
7723   36B7 DA            push d
7724   36B8 3B DF 3E      mov d, _token_data ; $token
7725   36BB 2D            mov b, d
7726   36BC 38 00 00      mov c, 0
7727   36BF E7            pop d
7728   36C0 FD 43         mov [d], b
7729   36C2             ; while(is_space(*prog)) prog++; 
7730   36C2             _while156_cond:
7731   36C2             ; --- START FUNCTION CALL
7732   36C2 3B DD 3E      mov d, _prog ; $prog
7733   36C5 2A            mov b, [d]
7734   36C6 38 00 00      mov c, 0
7735   36C9 74            mov d, b
7736   36CA 32            mov bl, [d]
7737   36CB A7 00         mov bh, 0
7738   36CD 38 00 00      mov c, 0
7739   36D0 DD            push bl
7740   36D1 07 8B 24      call is_space
7741   36D4 51 01 00      add sp, 1
7742   36D7             ; --- END FUNCTION CALL
7743   36D7 C0 00 00      cmp b, 0
7744   36DA C6 F0 36      je _while156_exit
7745   36DD             _while156_block:
7746   36DD             ; prog++; 
7747   36DD 3B DD 3E      mov d, _prog ; $prog
7748   36E0 2A            mov b, [d]
7749   36E1 38 00 00      mov c, 0
7750   36E4 FD 77         inc b
7751   36E6 3B DD 3E      mov d, _prog ; $prog
7752   36E9 FD 43         mov [d], b
7753   36EB FD 7D         dec b
7754   36ED 0A C2 36      jmp _while156_cond
7755   36F0             _while156_exit:
7756   36F0             ; if(*prog == '\0'){ 
7757   36F0             _if157_cond:
7758   36F0 3B DD 3E      mov d, _prog ; $prog
7759   36F3 2A            mov b, [d]
7760   36F4 38 00 00      mov c, 0
7761   36F7 74            mov d, b
7762   36F8 32            mov bl, [d]
7763   36F9 A7 00         mov bh, 0
7764   36FB 38 00 00      mov c, 0
7765   36FE             ; --- START RELATIONAL
7766   36FE D7            push a
7767   36FF 11            mov a, b
7768   3700 FD 2E 00 00   mov32 cb, $00000000
7768   3704 00 00 
7769   3706 B0            cmp a, b
7770   3707 FD 71         seq ; ==
7771   3709 E4            pop a
7772   370A             ; --- END RELATIONAL
7773   370A C0 00 00      cmp b, 0
7774   370D C6 15 37      je _if157_exit
7775   3710             _if157_TRUE:
7776   3710             ; return; 
7777   3710 F9            leave
7778   3711 09            ret
7779   3712 0A 15 37      jmp _if157_exit
7780   3715             _if157_exit:
7781   3715             ; while( 
7782   3715             _while158_cond:
7783   3715 3B DD 3E      mov d, _prog ; $prog
7784   3718 2A            mov b, [d]
7785   3719 38 00 00      mov c, 0
7786   371C 74            mov d, b
7787   371D 32            mov bl, [d]
7788   371E A7 00         mov bh, 0
7789   3720 38 00 00      mov c, 0
7790   3723             ; --- START RELATIONAL
7791   3723 D7            push a
7792   3724 11            mov a, b
7793   3725 FD 2E 61 00   mov32 cb, $00000061
7793   3729 00 00 
7794   372B B0            cmp a, b
7795   372C FD 82         sgeu ; >= (unsigned)
7796   372E E4            pop a
7797   372F             ; --- END RELATIONAL
7798   372F             ; --- START LOGICAL AND
7799   372F D7            push a
7800   3730 11            mov a, b
7801   3731 3B DD 3E      mov d, _prog ; $prog
7802   3734 2A            mov b, [d]
7803   3735 38 00 00      mov c, 0
7804   3738 74            mov d, b
7805   3739 32            mov bl, [d]
7806   373A A7 00         mov bh, 0
7807   373C 38 00 00      mov c, 0
7808   373F             ; --- START RELATIONAL
7809   373F D7            push a
7810   3740 11            mov a, b
7811   3741 FD 2E 7A 00   mov32 cb, $0000007a
7811   3745 00 00 
7812   3747 B0            cmp a, b
7813   3748 FD 76         sleu ; <= (unsigned)
7814   374A E4            pop a
7815   374B             ; --- END RELATIONAL
7816   374B FD A7         sand a, b
7817   374D E4            pop a
7818   374E             ; --- END LOGICAL AND
7819   374E             ; --- START LOGICAL OR
7820   374E D7            push a
7821   374F 11            mov a, b
7822   3750 3B DD 3E      mov d, _prog ; $prog
7823   3753 2A            mov b, [d]
7824   3754 38 00 00      mov c, 0
7825   3757 74            mov d, b
7826   3758 32            mov bl, [d]
7827   3759 A7 00         mov bh, 0
7828   375B 38 00 00      mov c, 0
7829   375E             ; --- START RELATIONAL
7830   375E D7            push a
7831   375F 11            mov a, b
7832   3760 FD 2E 41 00   mov32 cb, $00000041
7832   3764 00 00 
7833   3766 B0            cmp a, b
7834   3767 FD 82         sgeu ; >= (unsigned)
7835   3769 E4            pop a
7836   376A             ; --- END RELATIONAL
7837   376A             ; --- START LOGICAL AND
7838   376A D7            push a
7839   376B 11            mov a, b
7840   376C 3B DD 3E      mov d, _prog ; $prog
7841   376F 2A            mov b, [d]
7842   3770 38 00 00      mov c, 0
7843   3773 74            mov d, b
7844   3774 32            mov bl, [d]
7845   3775 A7 00         mov bh, 0
7846   3777 38 00 00      mov c, 0
7847   377A             ; --- START RELATIONAL
7848   377A D7            push a
7849   377B 11            mov a, b
7850   377C FD 2E 5A 00   mov32 cb, $0000005a
7850   3780 00 00 
7851   3782 B0            cmp a, b
7852   3783 FD 76         sleu ; <= (unsigned)
7853   3785 E4            pop a
7854   3786             ; --- END RELATIONAL
7855   3786 FD A7         sand a, b
7856   3788 E4            pop a
7857   3789             ; --- END LOGICAL AND
7858   3789 FD A8         sor a, b ; ||
7859   378B 11            mov a, b
7860   378C 3B DD 3E      mov d, _prog ; $prog
7861   378F 2A            mov b, [d]
7862   3790 38 00 00      mov c, 0
7863   3793 74            mov d, b
7864   3794 32            mov bl, [d]
7865   3795 A7 00         mov bh, 0
7866   3797 38 00 00      mov c, 0
7867   379A             ; --- START RELATIONAL
7868   379A D7            push a
7869   379B 11            mov a, b
7870   379C FD 2E 30 00   mov32 cb, $00000030
7870   37A0 00 00 
7871   37A2 B0            cmp a, b
7872   37A3 FD 82         sgeu ; >= (unsigned)
7873   37A5 E4            pop a
7874   37A6             ; --- END RELATIONAL
7875   37A6             ; --- START LOGICAL AND
7876   37A6 D7            push a
7877   37A7 11            mov a, b
7878   37A8 3B DD 3E      mov d, _prog ; $prog
7879   37AB 2A            mov b, [d]
7880   37AC 38 00 00      mov c, 0
7881   37AF 74            mov d, b
7882   37B0 32            mov bl, [d]
7883   37B1 A7 00         mov bh, 0
7884   37B3 38 00 00      mov c, 0
7885   37B6             ; --- START RELATIONAL
7886   37B6 D7            push a
7887   37B7 11            mov a, b
7888   37B8 FD 2E 39 00   mov32 cb, $00000039
7888   37BC 00 00 
7889   37BE B0            cmp a, b
7890   37BF FD 76         sleu ; <= (unsigned)
7891   37C1 E4            pop a
7892   37C2             ; --- END RELATIONAL
7893   37C2 FD A7         sand a, b
7894   37C4 E4            pop a
7895   37C5             ; --- END LOGICAL AND
7896   37C5 FD A8         sor a, b ; ||
7897   37C7 11            mov a, b
7898   37C8 3B DD 3E      mov d, _prog ; $prog
7899   37CB 2A            mov b, [d]
7900   37CC 38 00 00      mov c, 0
7901   37CF 74            mov d, b
7902   37D0 32            mov bl, [d]
7903   37D1 A7 00         mov bh, 0
7904   37D3 38 00 00      mov c, 0
7905   37D6             ; --- START RELATIONAL
7906   37D6 D7            push a
7907   37D7 11            mov a, b
7908   37D8 FD 2E 2F 00   mov32 cb, $0000002f
7908   37DC 00 00 
7909   37DE B0            cmp a, b
7910   37DF FD 71         seq ; ==
7911   37E1 E4            pop a
7912   37E2             ; --- END RELATIONAL
7913   37E2 FD A8         sor a, b ; ||
7914   37E4 11            mov a, b
7915   37E5 3B DD 3E      mov d, _prog ; $prog
7916   37E8 2A            mov b, [d]
7917   37E9 38 00 00      mov c, 0
7918   37EC 74            mov d, b
7919   37ED 32            mov bl, [d]
7920   37EE A7 00         mov bh, 0
7921   37F0 38 00 00      mov c, 0
7922   37F3             ; --- START RELATIONAL
7923   37F3 D7            push a
7924   37F4 11            mov a, b
7925   37F5 FD 2E 5F 00   mov32 cb, $0000005f
7925   37F9 00 00 
7926   37FB B0            cmp a, b
7927   37FC FD 71         seq ; ==
7928   37FE E4            pop a
7929   37FF             ; --- END RELATIONAL
7930   37FF FD A8         sor a, b ; ||
7931   3801 11            mov a, b
7932   3802 3B DD 3E      mov d, _prog ; $prog
7933   3805 2A            mov b, [d]
7934   3806 38 00 00      mov c, 0
7935   3809 74            mov d, b
7936   380A 32            mov bl, [d]
7937   380B A7 00         mov bh, 0
7938   380D 38 00 00      mov c, 0
7939   3810             ; --- START RELATIONAL
7940   3810 D7            push a
7941   3811 11            mov a, b
7942   3812 FD 2E 2D 00   mov32 cb, $0000002d
7942   3816 00 00 
7943   3818 B0            cmp a, b
7944   3819 FD 71         seq ; ==
7945   381B E4            pop a
7946   381C             ; --- END RELATIONAL
7947   381C FD A8         sor a, b ; ||
7948   381E 11            mov a, b
7949   381F 3B DD 3E      mov d, _prog ; $prog
7950   3822 2A            mov b, [d]
7951   3823 38 00 00      mov c, 0
7952   3826 74            mov d, b
7953   3827 32            mov bl, [d]
7954   3828 A7 00         mov bh, 0
7955   382A 38 00 00      mov c, 0
7956   382D             ; --- START RELATIONAL
7957   382D D7            push a
7958   382E 11            mov a, b
7959   382F FD 2E 2E 00   mov32 cb, $0000002e
7959   3833 00 00 
7960   3835 B0            cmp a, b
7961   3836 FD 71         seq ; ==
7962   3838 E4            pop a
7963   3839             ; --- END RELATIONAL
7964   3839 FD A8         sor a, b ; ||
7965   383B E4            pop a
7966   383C             ; --- END LOGICAL OR
7967   383C C0 00 00      cmp b, 0
7968   383F C6 70 38      je _while158_exit
7969   3842             _while158_block:
7970   3842             ; *t++ = *prog++; 
7971   3842 FA FF FF      lea d, [bp + -1] ; $t
7972   3845 2A            mov b, [d]
7973   3846 38 00 00      mov c, 0
7974   3849 FD 77         inc b
7975   384B FA FF FF      lea d, [bp + -1] ; $t
7976   384E FD 43         mov [d], b
7977   3850 FD 7D         dec b
7978   3852 D8            push b
7979   3853 3B DD 3E      mov d, _prog ; $prog
7980   3856 2A            mov b, [d]
7981   3857 38 00 00      mov c, 0
7982   385A FD 77         inc b
7983   385C 3B DD 3E      mov d, _prog ; $prog
7984   385F FD 43         mov [d], b
7985   3861 FD 7D         dec b
7986   3863 74            mov d, b
7987   3864 32            mov bl, [d]
7988   3865 A7 00         mov bh, 0
7989   3867 38 00 00      mov c, 0
7990   386A E7            pop d
7991   386B FD 3E         mov [d], bl
7992   386D 0A 15 37      jmp _while158_cond
7993   3870             _while158_exit:
7994   3870             ; *t = '\0'; 
7995   3870 FA FF FF      lea d, [bp + -1] ; $t
7996   3873 2A            mov b, [d]
7997   3874 38 00 00      mov c, 0
7998   3877 D8            push b
7999   3878 FD 2E 00 00   mov32 cb, $00000000
7999   387C 00 00 
8000   387E E7            pop d
8001   387F FD 3E         mov [d], bl
8002   3881 F9            leave
8003   3882 09            ret
8004   3883             ; --- END TEXT SEGMENT
8005   3883             
8006   3883             ; --- BEGIN DATA SEGMENT
8007   3883 00 00       _transient_area: .fill 2, 0
8008   3885 00 00 00 00 _command_data: .fill 512, 0
8008   3889 00 00 00 00 
8008   388D 00 00 00 00 
8008   3891 00 00 00 00 
8008   3895 00 00 00 00 
8008   3899 00 00 00 00 
8008   389D 00 00 00 00 
8008   38A1 00 00 00 00 
8008   38A5 00 00 00 00 
8008   38A9 00 00 00 00 
8008   38AD 00 00 00 00 
8008   38B1 00 00 00 00 
8008   38B5 00 00 00 00 
8008   38B9 00 00 00 00 
8008   38BD 00 00 00 00 
8008   38C1 00 00 00 00 
8008   38C5 00 00 00 00 
8008   38C9 00 00 00 00 
8008   38CD 00 00 00 00 
8008   38D1 00 00 00 00 
8008   38D5 00 00 00 00 
8008   38D9 00 00 00 00 
8008   38DD 00 00 00 00 
8008   38E1 00 00 00 00 
8008   38E5 00 00 00 00 
8008   38E9 00 00 00 00 
8008   38ED 00 00 00 00 
8008   38F1 00 00 00 00 
8008   38F5 00 00 00 00 
8008   38F9 00 00 00 00 
8008   38FD 00 00 00 00 
8008   3901 00 00 00 00 
8008   3905 00 00 00 00 
8008   3909 00 00 00 00 
8008   390D 00 00 00 00 
8008   3911 00 00 00 00 
8008   3915 00 00 00 00 
8008   3919 00 00 00 00 
8008   391D 00 00 00 00 
8008   3921 00 00 00 00 
8008   3925 00 00 00 00 
8008   3929 00 00 00 00 
8008   392D 00 00 00 00 
8008   3931 00 00 00 00 
8008   3935 00 00 00 00 
8008   3939 00 00 00 00 
8008   393D 00 00 00 00 
8008   3941 00 00 00 00 
8008   3945 00 00 00 00 
8008   3949 00 00 00 00 
8008   394D 00 00 00 00 
8008   3951 00 00 00 00 
8008   3955 00 00 00 00 
8008   3959 00 00 00 00 
8008   395D 00 00 00 00 
8008   3961 00 00 00 00 
8008   3965 00 00 00 00 
8008   3969 00 00 00 00 
8008   396D 00 00 00 00 
8008   3971 00 00 00 00 
8008   3975 00 00 00 00 
8008   3979 00 00 00 00 
8008   397D 00 00 00 00 
8008   3981 00 00 00 00 
8008   3985 00 00 00 00 
8008   3989 00 00 00 00 
8008   398D 00 00 00 00 
8008   3991 00 00 00 00 
8008   3995 00 00 00 00 
8008   3999 00 00 00 00 
8008   399D 00 00 00 00 
8008   39A1 00 00 00 00 
8008   39A5 00 00 00 00 
8008   39A9 00 00 00 00 
8008   39AD 00 00 00 00 
8008   39B1 00 00 00 00 
8008   39B5 00 00 00 00 
8008   39B9 00 00 00 00 
8008   39BD 00 00 00 00 
8008   39C1 00 00 00 00 
8008   39C5 00 00 00 00 
8008   39C9 00 00 00 00 
8008   39CD 00 00 00 00 
8008   39D1 00 00 00 00 
8008   39D5 00 00 00 00 
8008   39D9 00 00 00 00 
8008   39DD 00 00 00 00 
8008   39E1 00 00 00 00 
8008   39E5 00 00 00 00 
8008   39E9 00 00 00 00 
8008   39ED 00 00 00 00 
8008   39F1 00 00 00 00 
8008   39F5 00 00 00 00 
8008   39F9 00 00 00 00 
8008   39FD 00 00 00 00 
8008   3A01 00 00 00 00 
8008   3A05 00 00 00 00 
8008   3A09 00 00 00 00 
8008   3A0D 00 00 00 00 
8008   3A11 00 00 00 00 
8008   3A15 00 00 00 00 
8008   3A19 00 00 00 00 
8008   3A1D 00 00 00 00 
8008   3A21 00 00 00 00 
8008   3A25 00 00 00 00 
8008   3A29 00 00 00 00 
8008   3A2D 00 00 00 00 
8008   3A31 00 00 00 00 
8008   3A35 00 00 00 00 
8008   3A39 00 00 00 00 
8008   3A3D 00 00 00 00 
8008   3A41 00 00 00 00 
8008   3A45 00 00 00 00 
8008   3A49 00 00 00 00 
8008   3A4D 00 00 00 00 
8008   3A51 00 00 00 00 
8008   3A55 00 00 00 00 
8008   3A59 00 00 00 00 
8008   3A5D 00 00 00 00 
8008   3A61 00 00 00 00 
8008   3A65 00 00 00 00 
8008   3A69 00 00 00 00 
8008   3A6D 00 00 00 00 
8008   3A71 00 00 00 00 
8008   3A75 00 00 00 00 
8008   3A79 00 00 00 00 
8008   3A7D 00 00 00 00 
8008   3A81 00 00 00 00 
8009   3A85 00 00 00 00 _path_data: .fill 256, 0
8009   3A89 00 00 00 00 
8009   3A8D 00 00 00 00 
8009   3A91 00 00 00 00 
8009   3A95 00 00 00 00 
8009   3A99 00 00 00 00 
8009   3A9D 00 00 00 00 
8009   3AA1 00 00 00 00 
8009   3AA5 00 00 00 00 
8009   3AA9 00 00 00 00 
8009   3AAD 00 00 00 00 
8009   3AB1 00 00 00 00 
8009   3AB5 00 00 00 00 
8009   3AB9 00 00 00 00 
8009   3ABD 00 00 00 00 
8009   3AC1 00 00 00 00 
8009   3AC5 00 00 00 00 
8009   3AC9 00 00 00 00 
8009   3ACD 00 00 00 00 
8009   3AD1 00 00 00 00 
8009   3AD5 00 00 00 00 
8009   3AD9 00 00 00 00 
8009   3ADD 00 00 00 00 
8009   3AE1 00 00 00 00 
8009   3AE5 00 00 00 00 
8009   3AE9 00 00 00 00 
8009   3AED 00 00 00 00 
8009   3AF1 00 00 00 00 
8009   3AF5 00 00 00 00 
8009   3AF9 00 00 00 00 
8009   3AFD 00 00 00 00 
8009   3B01 00 00 00 00 
8009   3B05 00 00 00 00 
8009   3B09 00 00 00 00 
8009   3B0D 00 00 00 00 
8009   3B11 00 00 00 00 
8009   3B15 00 00 00 00 
8009   3B19 00 00 00 00 
8009   3B1D 00 00 00 00 
8009   3B21 00 00 00 00 
8009   3B25 00 00 00 00 
8009   3B29 00 00 00 00 
8009   3B2D 00 00 00 00 
8009   3B31 00 00 00 00 
8009   3B35 00 00 00 00 
8009   3B39 00 00 00 00 
8009   3B3D 00 00 00 00 
8009   3B41 00 00 00 00 
8009   3B45 00 00 00 00 
8009   3B49 00 00 00 00 
8009   3B4D 00 00 00 00 
8009   3B51 00 00 00 00 
8009   3B55 00 00 00 00 
8009   3B59 00 00 00 00 
8009   3B5D 00 00 00 00 
8009   3B61 00 00 00 00 
8009   3B65 00 00 00 00 
8009   3B69 00 00 00 00 
8009   3B6D 00 00 00 00 
8009   3B71 00 00 00 00 
8009   3B75 00 00 00 00 
8009   3B79 00 00 00 00 
8009   3B7D 00 00 00 00 
8009   3B81 00 00 00 00 
8010   3B85 00 00 00 00 _temp_data: .fill 256, 0
8010   3B89 00 00 00 00 
8010   3B8D 00 00 00 00 
8010   3B91 00 00 00 00 
8010   3B95 00 00 00 00 
8010   3B99 00 00 00 00 
8010   3B9D 00 00 00 00 
8010   3BA1 00 00 00 00 
8010   3BA5 00 00 00 00 
8010   3BA9 00 00 00 00 
8010   3BAD 00 00 00 00 
8010   3BB1 00 00 00 00 
8010   3BB5 00 00 00 00 
8010   3BB9 00 00 00 00 
8010   3BBD 00 00 00 00 
8010   3BC1 00 00 00 00 
8010   3BC5 00 00 00 00 
8010   3BC9 00 00 00 00 
8010   3BCD 00 00 00 00 
8010   3BD1 00 00 00 00 
8010   3BD5 00 00 00 00 
8010   3BD9 00 00 00 00 
8010   3BDD 00 00 00 00 
8010   3BE1 00 00 00 00 
8010   3BE5 00 00 00 00 
8010   3BE9 00 00 00 00 
8010   3BED 00 00 00 00 
8010   3BF1 00 00 00 00 
8010   3BF5 00 00 00 00 
8010   3BF9 00 00 00 00 
8010   3BFD 00 00 00 00 
8010   3C01 00 00 00 00 
8010   3C05 00 00 00 00 
8010   3C09 00 00 00 00 
8010   3C0D 00 00 00 00 
8010   3C11 00 00 00 00 
8010   3C15 00 00 00 00 
8010   3C19 00 00 00 00 
8010   3C1D 00 00 00 00 
8010   3C21 00 00 00 00 
8010   3C25 00 00 00 00 
8010   3C29 00 00 00 00 
8010   3C2D 00 00 00 00 
8010   3C31 00 00 00 00 
8010   3C35 00 00 00 00 
8010   3C39 00 00 00 00 
8010   3C3D 00 00 00 00 
8010   3C41 00 00 00 00 
8010   3C45 00 00 00 00 
8010   3C49 00 00 00 00 
8010   3C4D 00 00 00 00 
8010   3C51 00 00 00 00 
8010   3C55 00 00 00 00 
8010   3C59 00 00 00 00 
8010   3C5D 00 00 00 00 
8010   3C61 00 00 00 00 
8010   3C65 00 00 00 00 
8010   3C69 00 00 00 00 
8010   3C6D 00 00 00 00 
8010   3C71 00 00 00 00 
8010   3C75 00 00 00 00 
8010   3C79 00 00 00 00 
8010   3C7D 00 00 00 00 
8010   3C81 00 00 00 00 
8011   3C85 00 00 00 00 _argument_data: .fill 256, 0
8011   3C89 00 00 00 00 
8011   3C8D 00 00 00 00 
8011   3C91 00 00 00 00 
8011   3C95 00 00 00 00 
8011   3C99 00 00 00 00 
8011   3C9D 00 00 00 00 
8011   3CA1 00 00 00 00 
8011   3CA5 00 00 00 00 
8011   3CA9 00 00 00 00 
8011   3CAD 00 00 00 00 
8011   3CB1 00 00 00 00 
8011   3CB5 00 00 00 00 
8011   3CB9 00 00 00 00 
8011   3CBD 00 00 00 00 
8011   3CC1 00 00 00 00 
8011   3CC5 00 00 00 00 
8011   3CC9 00 00 00 00 
8011   3CCD 00 00 00 00 
8011   3CD1 00 00 00 00 
8011   3CD5 00 00 00 00 
8011   3CD9 00 00 00 00 
8011   3CDD 00 00 00 00 
8011   3CE1 00 00 00 00 
8011   3CE5 00 00 00 00 
8011   3CE9 00 00 00 00 
8011   3CED 00 00 00 00 
8011   3CF1 00 00 00 00 
8011   3CF5 00 00 00 00 
8011   3CF9 00 00 00 00 
8011   3CFD 00 00 00 00 
8011   3D01 00 00 00 00 
8011   3D05 00 00 00 00 
8011   3D09 00 00 00 00 
8011   3D0D 00 00 00 00 
8011   3D11 00 00 00 00 
8011   3D15 00 00 00 00 
8011   3D19 00 00 00 00 
8011   3D1D 00 00 00 00 
8011   3D21 00 00 00 00 
8011   3D25 00 00 00 00 
8011   3D29 00 00 00 00 
8011   3D2D 00 00 00 00 
8011   3D31 00 00 00 00 
8011   3D35 00 00 00 00 
8011   3D39 00 00 00 00 
8011   3D3D 00 00 00 00 
8011   3D41 00 00 00 00 
8011   3D45 00 00 00 00 
8011   3D49 00 00 00 00 
8011   3D4D 00 00 00 00 
8011   3D51 00 00 00 00 
8011   3D55 00 00 00 00 
8011   3D59 00 00 00 00 
8011   3D5D 00 00 00 00 
8011   3D61 00 00 00 00 
8011   3D65 00 00 00 00 
8011   3D69 00 00 00 00 
8011   3D6D 00 00 00 00 
8011   3D71 00 00 00 00 
8011   3D75 00 00 00 00 
8011   3D79 00 00 00 00 
8011   3D7D 00 00 00 00 
8011   3D81 00 00 00 00 
8012   3D85 00 00 00 00 _last_cmd_data: .fill 128, 0
8012   3D89 00 00 00 00 
8012   3D8D 00 00 00 00 
8012   3D91 00 00 00 00 
8012   3D95 00 00 00 00 
8012   3D99 00 00 00 00 
8012   3D9D 00 00 00 00 
8012   3DA1 00 00 00 00 
8012   3DA5 00 00 00 00 
8012   3DA9 00 00 00 00 
8012   3DAD 00 00 00 00 
8012   3DB1 00 00 00 00 
8012   3DB5 00 00 00 00 
8012   3DB9 00 00 00 00 
8012   3DBD 00 00 00 00 
8012   3DC1 00 00 00 00 
8012   3DC5 00 00 00 00 
8012   3DC9 00 00 00 00 
8012   3DCD 00 00 00 00 
8012   3DD1 00 00 00 00 
8012   3DD5 00 00 00 00 
8012   3DD9 00 00 00 00 
8012   3DDD 00 00 00 00 
8012   3DE1 00 00 00 00 
8012   3DE5 00 00 00 00 
8012   3DE9 00 00 00 00 
8012   3DED 00 00 00 00 
8012   3DF1 00 00 00 00 
8012   3DF5 00 00 00 00 
8012   3DF9 00 00 00 00 
8012   3DFD 00 00 00 00 
8012   3E01 00 00 00 00 
8013   3E05 00 00 00 00 _variables_data: .fill 210, 0
8013   3E09 00 00 00 00 
8013   3E0D 00 00 00 00 
8013   3E11 00 00 00 00 
8013   3E15 00 00 00 00 
8013   3E19 00 00 00 00 
8013   3E1D 00 00 00 00 
8013   3E21 00 00 00 00 
8013   3E25 00 00 00 00 
8013   3E29 00 00 00 00 
8013   3E2D 00 00 00 00 
8013   3E31 00 00 00 00 
8013   3E35 00 00 00 00 
8013   3E39 00 00 00 00 
8013   3E3D 00 00 00 00 
8013   3E41 00 00 00 00 
8013   3E45 00 00 00 00 
8013   3E49 00 00 00 00 
8013   3E4D 00 00 00 00 
8013   3E51 00 00 00 00 
8013   3E55 00 00 00 00 
8013   3E59 00 00 00 00 
8013   3E5D 00 00 00 00 
8013   3E61 00 00 00 00 
8013   3E65 00 00 00 00 
8013   3E69 00 00 00 00 
8013   3E6D 00 00 00 00 
8013   3E71 00 00 00 00 
8013   3E75 00 00 00 00 
8013   3E79 00 00 00 00 
8013   3E7D 00 00 00 00 
8013   3E81 00 00 00 00 
8013   3E85 00 00 00 00 
8013   3E89 00 00 00 00 
8013   3E8D 00 00 00 00 
8013   3E91 00 00 00 00 
8013   3E95 00 00 00 00 
8013   3E99 00 00 00 00 
8013   3E9D 00 00 00 00 
8013   3EA1 00 00 00 00 
8013   3EA5 00 00 00 00 
8013   3EA9 00 00 00 00 
8013   3EAD 00 00 00 00 
8013   3EB1 00 00 00 00 
8013   3EB5 00 00 00 00 
8013   3EB9 00 00 00 00 
8013   3EBD 00 00 00 00 
8013   3EC1 00 00 00 00 
8013   3EC5 00 00 00 00 
8013   3EC9 00 00 00 00 
8013   3ECD 00 00 00 00 
8013   3ED1 00 00 00 00 
8013   3ED5 00 00 
8014   3ED7 00 00       _vars_tos: .fill 2, 0
8015   3ED9 00 00       _tok: .fill 2, 0
8016   3EDB 00 00       _toktype: .fill 2, 0
8017   3EDD 00 00       _prog: .fill 2, 0
8018   3EDF 00 00 00 00 _token_data: .fill 256, 0
8018   3EE3 00 00 00 00 
8018   3EE7 00 00 00 00 
8018   3EEB 00 00 00 00 
8018   3EEF 00 00 00 00 
8018   3EF3 00 00 00 00 
8018   3EF7 00 00 00 00 
8018   3EFB 00 00 00 00 
8018   3EFF 00 00 00 00 
8018   3F03 00 00 00 00 
8018   3F07 00 00 00 00 
8018   3F0B 00 00 00 00 
8018   3F0F 00 00 00 00 
8018   3F13 00 00 00 00 
8018   3F17 00 00 00 00 
8018   3F1B 00 00 00 00 
8018   3F1F 00 00 00 00 
8018   3F23 00 00 00 00 
8018   3F27 00 00 00 00 
8018   3F2B 00 00 00 00 
8018   3F2F 00 00 00 00 
8018   3F33 00 00 00 00 
8018   3F37 00 00 00 00 
8018   3F3B 00 00 00 00 
8018   3F3F 00 00 00 00 
8018   3F43 00 00 00 00 
8018   3F47 00 00 00 00 
8018   3F4B 00 00 00 00 
8018   3F4F 00 00 00 00 
8018   3F53 00 00 00 00 
8018   3F57 00 00 00 00 
8018   3F5B 00 00 00 00 
8018   3F5F 00 00 00 00 
8018   3F63 00 00 00 00 
8018   3F67 00 00 00 00 
8018   3F6B 00 00 00 00 
8018   3F6F 00 00 00 00 
8018   3F73 00 00 00 00 
8018   3F77 00 00 00 00 
8018   3F7B 00 00 00 00 
8018   3F7F 00 00 00 00 
8018   3F83 00 00 00 00 
8018   3F87 00 00 00 00 
8018   3F8B 00 00 00 00 
8018   3F8F 00 00 00 00 
8018   3F93 00 00 00 00 
8018   3F97 00 00 00 00 
8018   3F9B 00 00 00 00 
8018   3F9F 00 00 00 00 
8018   3FA3 00 00 00 00 
8018   3FA7 00 00 00 00 
8018   3FAB 00 00 00 00 
8018   3FAF 00 00 00 00 
8018   3FB3 00 00 00 00 
8018   3FB7 00 00 00 00 
8018   3FBB 00 00 00 00 
8018   3FBF 00 00 00 00 
8018   3FC3 00 00 00 00 
8018   3FC7 00 00 00 00 
8018   3FCB 00 00 00 00 
8018   3FCF 00 00 00 00 
8018   3FD3 00 00 00 00 
8018   3FD7 00 00 00 00 
8018   3FDB 00 00 00 00 
8019   3FDF 00 00 00 00 _string_const_data: .fill 256, 0
8019   3FE3 00 00 00 00 
8019   3FE7 00 00 00 00 
8019   3FEB 00 00 00 00 
8019   3FEF 00 00 00 00 
8019   3FF3 00 00 00 00 
8019   3FF7 00 00 00 00 
8019   3FFB 00 00 00 00 
8019   3FFF 00 00 00 00 
8019   4003 00 00 00 00 
8019   4007 00 00 00 00 
8019   400B 00 00 00 00 
8019   400F 00 00 00 00 
8019   4013 00 00 00 00 
8019   4017 00 00 00 00 
8019   401B 00 00 00 00 
8019   401F 00 00 00 00 
8019   4023 00 00 00 00 
8019   4027 00 00 00 00 
8019   402B 00 00 00 00 
8019   402F 00 00 00 00 
8019   4033 00 00 00 00 
8019   4037 00 00 00 00 
8019   403B 00 00 00 00 
8019   403F 00 00 00 00 
8019   4043 00 00 00 00 
8019   4047 00 00 00 00 
8019   404B 00 00 00 00 
8019   404F 00 00 00 00 
8019   4053 00 00 00 00 
8019   4057 00 00 00 00 
8019   405B 00 00 00 00 
8019   405F 00 00 00 00 
8019   4063 00 00 00 00 
8019   4067 00 00 00 00 
8019   406B 00 00 00 00 
8019   406F 00 00 00 00 
8019   4073 00 00 00 00 
8019   4077 00 00 00 00 
8019   407B 00 00 00 00 
8019   407F 00 00 00 00 
8019   4083 00 00 00 00 
8019   4087 00 00 00 00 
8019   408B 00 00 00 00 
8019   408F 00 00 00 00 
8019   4093 00 00 00 00 
8019   4097 00 00 00 00 
8019   409B 00 00 00 00 
8019   409F 00 00 00 00 
8019   40A3 00 00 00 00 
8019   40A7 00 00 00 00 
8019   40AB 00 00 00 00 
8019   40AF 00 00 00 00 
8019   40B3 00 00 00 00 
8019   40B7 00 00 00 00 
8019   40BB 00 00 00 00 
8019   40BF 00 00 00 00 
8019   40C3 00 00 00 00 
8019   40C7 00 00 00 00 
8019   40CB 00 00 00 00 
8019   40CF 00 00 00 00 
8019   40D3 00 00 00 00 
8019   40D7 00 00 00 00 
8019   40DB 00 00 00 00 
8020   40DF 00          _s0: .db "", 0
8021   40E0 70 61 74 68 _s1: .db "path", 0
8021   40E4 00 
8022   40E5 68 6F 6D 65 _s2: .db "home", 0
8022   40E9 00 
8023   40EA 2F 65 74 63 _s3: .db "/etc/shell.cfg", 0
8023   40EE 2F 73 68 65 
8023   40F2 6C 6C 2E 63 
8023   40F6 66 67 00 
8024   40F9 72 6F 6F 74 _s4: .db "root@Sol-1:", 0
8024   40FD 40 53 6F 6C 
8024   4101 2D 31 3A 00 
8025   4105 20 23 20 00 _s5: .db " # ", 0
8026   4109 0A 0D 00    _s6: .db "\n\r", 0
8027   410C 63 64 00    _s7: .db "cd", 0
8028   410F 73 68 65 6C _s8: .db "shell", 0
8028   4113 6C 00 
8029   4115 31 32 33 00 _s9: .db "123", 0
8030   4119 2F 00       _s10: .db "/", 0
8031   411B 45 72 72 6F _s11: .db "Error: Variable does not exist.", 0
8031   411F 72 3A 20 56 
8031   4123 61 72 69 61 
8031   4127 62 6C 65 20 
8031   412B 64 6F 65 73 
8031   412F 20 6E 6F 74 
8031   4133 20 65 78 69 
8031   4137 73 74 2E 00 
8032   413B 25 64 00    _s12: .db "%d", 0
8033   413E 55 6E 64 65 _s13: .db "Undeclared variable.", 0
8033   4142 63 6C 61 72 
8033   4146 65 64 20 76 
8033   414A 61 72 69 61 
8033   414E 62 6C 65 2E 
8033   4152 00 
8034   4153 3B 00       _s14: .db ";", 0
8035   4155 44 6F 75 62 _s15: .db "Double quotes expected", 0
8035   4159 6C 65 20 71 
8035   415D 75 6F 74 65 
8035   4161 73 20 65 78 
8035   4165 70 65 63 74 
8035   4169 65 64 00 
8036   416C 0A 45 72 72 _s16: .db "\nError: ", 0
8036   4170 6F 72 3A 20 
8036   4174 00 
8037   4175 0A 00       _s17: .db "\n", 0
8038   4177 55 6E 65 78 _s18: .db "Unexpected format in printf.", 0
8038   417B 70 65 63 74 
8038   417F 65 64 20 66 
8038   4183 6F 72 6D 61 
8038   4187 74 20 69 6E 
8038   418B 20 70 72 69 
8038   418F 6E 74 66 2E 
8038   4193 00 
8039   4194 45 72 72 6F _s19: .db "Error: Unknown argument type.\n", 0
8039   4198 72 3A 20 55 
8039   419C 6E 6B 6E 6F 
8039   41A0 77 6E 20 61 
8039   41A4 72 67 75 6D 
8039   41A8 65 6E 74 20 
8039   41AC 74 79 70 65 
8039   41B0 2E 0A 00 
8040   41B3             
8041   41B3 B5 41       _heap_top: .dw _heap
8042   41B5 00          _heap: .db 0
8043   41B6             ; --- END DATA SEGMENT
8044   41B6             
8045   41B6             .end
tasm: Number of errors = 2
