0001   0000             ; --- FILENAME: ctestsuite/testsuite1.c
0002   0000             ; --- DATE:     28-06-2025 at 00:19:24
0003   0000             .include "lib/asm/kernel.exp"
0001+  0000             fdc_irq_event    .EQU  $195a
0002+  0000             sys_break        .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_create_proc  .EQU  $0005
0008+  0000             sys_list_proc    .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_fdc          .EQU  $000d
0016+  0000             text_org         .EQU  $0400
0004   0000             .include "lib/asm/bios.exp"
0001+  0000             bios_reset_vector .equ  $01c0
0002+  0000             ide_buffer       .equ  $8204
0003+  0000             boot_origin      .equ  $8004
0004+  0000             bios_uart        .equ  $0002
0005+  0000             bios_ide         .equ  $0003
0005   0000             
0006   0000             ; --- BEGIN TEXT SEGMENT
0007   0400             .org text_org
0008   0400             main:
0009   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0010   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0011   0408             ; int pass[10]; 
0012   0408 52 14 00      sub sp, 20
0013   040B             ; int i; 
0014   040B 52 02 00      sub sp, 2
0015   040E             ; int nbr_tests = 10; 
0016   040E 52 02 00      sub sp, 2
0017   0411             ; --- START LOCAL VAR INITIALIZATION
0018   0411 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0019   0414 DA            push d
0020   0415 FD 2E 0A 00   mov32 cb, $0000000a
0020   0419 00 00 
0021   041B E7            pop d
0022   041C FD 43         mov [d], b
0023   041E             ; --- END LOCAL VAR INITIALIZATION
0024   041E             ; for(i = 0; i < nbr_tests; i++){ 
0025   041E             _for1_init:
0026   041E FA EB FF      lea d, [bp + -21] ; $i
0027   0421 DA            push d
0028   0422 FD 2E 00 00   mov32 cb, $00000000
0028   0426 00 00 
0029   0428 E7            pop d
0030   0429 FD 43         mov [d], b
0031   042B             _for1_cond:
0032   042B FA EB FF      lea d, [bp + -21] ; $i
0033   042E 2A            mov b, [d]
0034   042F 38 00 00      mov c, 0
0035   0432             ; --- START RELATIONAL
0036   0432 D7            push a
0037   0433 11            mov a, b
0038   0434 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0039   0437 2A            mov b, [d]
0040   0438 38 00 00      mov c, 0
0041   043B B0            cmp a, b
0042   043C FD 73         slt ; < (signed)
0043   043E E4            pop a
0044   043F             ; --- END RELATIONAL
0045   043F C0 00 00      cmp b, 0
0046   0442 C6 74 04      je _for1_exit
0047   0445             _for1_block:
0048   0445             ; pass[i] = -1; 
0049   0445 FA ED FF      lea d, [bp + -19] ; $pass
0050   0448 D7            push a
0051   0449 DA            push d
0052   044A FA EB FF      lea d, [bp + -21] ; $i
0053   044D 2A            mov b, [d]
0054   044E 38 00 00      mov c, 0
0055   0451 E7            pop d
0056   0452 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0057   0456 E4            pop a
0058   0457 DA            push d
0059   0458 FD 2E FF FF   mov32 cb, $ffffffff
0059   045C FF FF 
0060   045E E7            pop d
0061   045F FD 43         mov [d], b
0062   0461             _for1_update:
0063   0461 FA EB FF      lea d, [bp + -21] ; $i
0064   0464 2A            mov b, [d]
0065   0465 38 00 00      mov c, 0
0066   0468 11            mov a, b
0067   0469 FD 77         inc b
0068   046B FA EB FF      lea d, [bp + -21] ; $i
0069   046E FD 43         mov [d], b
0070   0470 27            mov b, a
0071   0471 0A 2B 04      jmp _for1_cond
0072   0474             _for1_exit:
0073   0474             ; pass[0] = test0(); 
0074   0474 FA ED FF      lea d, [bp + -19] ; $pass
0075   0477 D7            push a
0076   0478 DA            push d
0077   0479 FD 2E 00 00   mov32 cb, $00000000
0077   047D 00 00 
0078   047F E7            pop d
0079   0480 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0080   0484 E4            pop a
0081   0485 DA            push d
0082   0486             ; --- START FUNCTION CALL
0083   0486 07 CF 05      call test0
0084   0489 E7            pop d
0085   048A FD 43         mov [d], b
0086   048C             ; pass[1] = test1(); 
0087   048C FA ED FF      lea d, [bp + -19] ; $pass
0088   048F D7            push a
0089   0490 DA            push d
0090   0491 FD 2E 01 00   mov32 cb, $00000001
0090   0495 00 00 
0091   0497 E7            pop d
0092   0498 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0093   049C E4            pop a
0094   049D DA            push d
0095   049E             ; --- START FUNCTION CALL
0096   049E 07 22 07      call test1
0097   04A1 E7            pop d
0098   04A2 FD 43         mov [d], b
0099   04A4             ; pass[2] = test2(); 
0100   04A4 FA ED FF      lea d, [bp + -19] ; $pass
0101   04A7 D7            push a
0102   04A8 DA            push d
0103   04A9 FD 2E 02 00   mov32 cb, $00000002
0103   04AD 00 00 
0104   04AF E7            pop d
0105   04B0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0106   04B4 E4            pop a
0107   04B5 DA            push d
0108   04B6             ; --- START FUNCTION CALL
0109   04B6 07 C1 09      call test2
0110   04B9 E7            pop d
0111   04BA FD 43         mov [d], b
0112   04BC             ; pass[3] = test3(); 
0113   04BC FA ED FF      lea d, [bp + -19] ; $pass
0114   04BF D7            push a
0115   04C0 DA            push d
0116   04C1 FD 2E 03 00   mov32 cb, $00000003
0116   04C5 00 00 
0117   04C7 E7            pop d
0118   04C8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0119   04CC E4            pop a
0120   04CD DA            push d
0121   04CE             ; --- START FUNCTION CALL
0122   04CE 07 C0 0B      call test3
0123   04D1 E7            pop d
0124   04D2 FD 43         mov [d], b
0125   04D4             ; pass[4] = test4(); 
0126   04D4 FA ED FF      lea d, [bp + -19] ; $pass
0127   04D7 D7            push a
0128   04D8 DA            push d
0129   04D9 FD 2E 04 00   mov32 cb, $00000004
0129   04DD 00 00 
0130   04DF E7            pop d
0131   04E0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0132   04E4 E4            pop a
0133   04E5 DA            push d
0134   04E6             ; --- START FUNCTION CALL
0135   04E6 07 65 0E      call test4
0136   04E9 E7            pop d
0137   04EA FD 43         mov [d], b
0138   04EC             ; pass[5] = test5(); 
0139   04EC FA ED FF      lea d, [bp + -19] ; $pass
0140   04EF D7            push a
0141   04F0 DA            push d
0142   04F1 FD 2E 05 00   mov32 cb, $00000005
0142   04F5 00 00 
0143   04F7 E7            pop d
0144   04F8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0145   04FC E4            pop a
0146   04FD DA            push d
0147   04FE             ; --- START FUNCTION CALL
0148   04FE 07 E1 12      call test5
0149   0501 E7            pop d
0150   0502 FD 43         mov [d], b
0151   0504             ; pass[6] = test6(); 
0152   0504 FA ED FF      lea d, [bp + -19] ; $pass
0153   0507 D7            push a
0154   0508 DA            push d
0155   0509 FD 2E 06 00   mov32 cb, $00000006
0155   050D 00 00 
0156   050F E7            pop d
0157   0510 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0158   0514 E4            pop a
0159   0515 DA            push d
0160   0516             ; --- START FUNCTION CALL
0161   0516 07 1F 14      call test6
0162   0519 E7            pop d
0163   051A FD 43         mov [d], b
0164   051C             ; pass[7] = test7(); 
0165   051C FA ED FF      lea d, [bp + -19] ; $pass
0166   051F D7            push a
0167   0520 DA            push d
0168   0521 FD 2E 07 00   mov32 cb, $00000007
0168   0525 00 00 
0169   0527 E7            pop d
0170   0528 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0171   052C E4            pop a
0172   052D DA            push d
0173   052E             ; --- START FUNCTION CALL
0174   052E 07 D8 15      call test7
0175   0531 E7            pop d
0176   0532 FD 43         mov [d], b
0177   0534             ; pass[8] = test8(); 
0178   0534 FA ED FF      lea d, [bp + -19] ; $pass
0179   0537 D7            push a
0180   0538 DA            push d
0181   0539 FD 2E 08 00   mov32 cb, $00000008
0181   053D 00 00 
0182   053F E7            pop d
0183   0540 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0184   0544 E4            pop a
0185   0545 DA            push d
0186   0546             ; --- START FUNCTION CALL
0187   0546 07 A9 17      call test8
0188   0549 E7            pop d
0189   054A FD 43         mov [d], b
0190   054C             ; pass[9] = test9(); 
0191   054C FA ED FF      lea d, [bp + -19] ; $pass
0192   054F D7            push a
0193   0550 DA            push d
0194   0551 FD 2E 09 00   mov32 cb, $00000009
0194   0555 00 00 
0195   0557 E7            pop d
0196   0558 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0197   055C E4            pop a
0198   055D DA            push d
0199   055E             ; --- START FUNCTION CALL
0200   055E 07 65 19      call test9
0201   0561 E7            pop d
0202   0562 FD 43         mov [d], b
0203   0564             ; for(i = 0; i < nbr_tests; i++) 
0204   0564             _for2_init:
0205   0564 FA EB FF      lea d, [bp + -21] ; $i
0206   0567 DA            push d
0207   0568 FD 2E 00 00   mov32 cb, $00000000
0207   056C 00 00 
0208   056E E7            pop d
0209   056F FD 43         mov [d], b
0210   0571             _for2_cond:
0211   0571 FA EB FF      lea d, [bp + -21] ; $i
0212   0574 2A            mov b, [d]
0213   0575 38 00 00      mov c, 0
0214   0578             ; --- START RELATIONAL
0215   0578 D7            push a
0216   0579 11            mov a, b
0217   057A FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0218   057D 2A            mov b, [d]
0219   057E 38 00 00      mov c, 0
0220   0581 B0            cmp a, b
0221   0582 FD 73         slt ; < (signed)
0222   0584 E4            pop a
0223   0585             ; --- END RELATIONAL
0224   0585 C0 00 00      cmp b, 0
0225   0588 C6 CD 05      je _for2_exit
0226   058B             _for2_block:
0227   058B             ; printf("Test %d, Result: %d\n", i, pass[i]); 
0228   058B             ; --- START FUNCTION CALL
0229   058B FA ED FF      lea d, [bp + -19] ; $pass
0230   058E D7            push a
0231   058F DA            push d
0232   0590 FA EB FF      lea d, [bp + -21] ; $i
0233   0593 2A            mov b, [d]
0234   0594 38 00 00      mov c, 0
0235   0597 E7            pop d
0236   0598 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0237   059C E4            pop a
0238   059D 2A            mov b, [d]
0239   059E 38 00 00      mov c, 0
0240   05A1 FD AB         swp b
0241   05A3 D8            push b
0242   05A4 FA EB FF      lea d, [bp + -21] ; $i
0243   05A7 2A            mov b, [d]
0244   05A8 38 00 00      mov c, 0
0245   05AB FD AB         swp b
0246   05AD D8            push b
0247   05AE 26 DD 24      mov b, _s0 ; "Test %d, Result: %d\n"
0248   05B1 FD AB         swp b
0249   05B3 D8            push b
0250   05B4 07 39 1B      call printf
0251   05B7 51 06 00      add sp, 6
0252   05BA             ; --- END FUNCTION CALL
0253   05BA             _for2_update:
0254   05BA FA EB FF      lea d, [bp + -21] ; $i
0255   05BD 2A            mov b, [d]
0256   05BE 38 00 00      mov c, 0
0257   05C1 11            mov a, b
0258   05C2 FD 77         inc b
0259   05C4 FA EB FF      lea d, [bp + -21] ; $i
0260   05C7 FD 43         mov [d], b
0261   05C9 27            mov b, a
0262   05CA 0A 71 05      jmp _for2_cond
0263   05CD             _for2_exit:
0264   05CD 05 0B         syscall sys_terminate_proc
0265   05CF             
0266   05CF             test0:
0267   05CF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0268   05D2             ; int i; 
0269   05D2 52 02 00      sub sp, 2
0270   05D5             ; int pass = 1; 
0271   05D5 52 02 00      sub sp, 2
0272   05D8             ; --- START LOCAL VAR INITIALIZATION
0273   05D8 FA FD FF      lea d, [bp + -3] ; $pass
0274   05DB DA            push d
0275   05DC FD 2E 01 00   mov32 cb, $00000001
0275   05E0 00 00 
0276   05E2 E7            pop d
0277   05E3 FD 43         mov [d], b
0278   05E5             ; --- END LOCAL VAR INITIALIZATION
0279   05E5             ; for (i = 0; i < 5; i++){ 
0280   05E5             _for3_init:
0281   05E5 FA FF FF      lea d, [bp + -1] ; $i
0282   05E8 DA            push d
0283   05E9 FD 2E 00 00   mov32 cb, $00000000
0283   05ED 00 00 
0284   05EF E7            pop d
0285   05F0 FD 43         mov [d], b
0286   05F2             _for3_cond:
0287   05F2 FA FF FF      lea d, [bp + -1] ; $i
0288   05F5 2A            mov b, [d]
0289   05F6 38 00 00      mov c, 0
0290   05F9             ; --- START RELATIONAL
0291   05F9 D7            push a
0292   05FA 11            mov a, b
0293   05FB FD 2E 05 00   mov32 cb, $00000005
0293   05FF 00 00 
0294   0601 B0            cmp a, b
0295   0602 FD 73         slt ; < (signed)
0296   0604 E4            pop a
0297   0605             ; --- END RELATIONAL
0298   0605 C0 00 00      cmp b, 0
0299   0608 C6 5F 06      je _for3_exit
0300   060B             _for3_block:
0301   060B             ; gca1[i] = 'A' + i; 
0302   060B 3B 4D 24      mov d, _gca1_data ; $gca1
0303   060E D7            push a
0304   060F DA            push d
0305   0610 FA FF FF      lea d, [bp + -1] ; $i
0306   0613 2A            mov b, [d]
0307   0614 38 00 00      mov c, 0
0308   0617 E7            pop d
0309   0618 5A            add d, b
0310   0619 E4            pop a
0311   061A DA            push d
0312   061B FD 2E 41 00   mov32 cb, $00000041
0312   061F 00 00 
0313   0621             ; --- START TERMS
0314   0621 D7            push a
0315   0622 11            mov a, b
0316   0623 FA FF FF      lea d, [bp + -1] ; $i
0317   0626 2A            mov b, [d]
0318   0627 38 00 00      mov c, 0
0319   062A 56            add b, a
0320   062B E4            pop a
0321   062C             ; --- END TERMS
0322   062C E7            pop d
0323   062D FD 3E         mov [d], bl
0324   062F             ; gia1[i] = i; 
0325   062F 3B 52 24      mov d, _gia1_data ; $gia1
0326   0632 D7            push a
0327   0633 DA            push d
0328   0634 FA FF FF      lea d, [bp + -1] ; $i
0329   0637 2A            mov b, [d]
0330   0638 38 00 00      mov c, 0
0331   063B E7            pop d
0332   063C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0333   0640 E4            pop a
0334   0641 DA            push d
0335   0642 FA FF FF      lea d, [bp + -1] ; $i
0336   0645 2A            mov b, [d]
0337   0646 38 00 00      mov c, 0
0338   0649 E7            pop d
0339   064A FD 43         mov [d], b
0340   064C             _for3_update:
0341   064C FA FF FF      lea d, [bp + -1] ; $i
0342   064F 2A            mov b, [d]
0343   0650 38 00 00      mov c, 0
0344   0653 11            mov a, b
0345   0654 FD 77         inc b
0346   0656 FA FF FF      lea d, [bp + -1] ; $i
0347   0659 FD 43         mov [d], b
0348   065B 27            mov b, a
0349   065C 0A F2 05      jmp _for3_cond
0350   065F             _for3_exit:
0351   065F             ; for (i = 0; i < 5; i++){ 
0352   065F             _for4_init:
0353   065F FA FF FF      lea d, [bp + -1] ; $i
0354   0662 DA            push d
0355   0663 FD 2E 00 00   mov32 cb, $00000000
0355   0667 00 00 
0356   0669 E7            pop d
0357   066A FD 43         mov [d], b
0358   066C             _for4_cond:
0359   066C FA FF FF      lea d, [bp + -1] ; $i
0360   066F 2A            mov b, [d]
0361   0670 38 00 00      mov c, 0
0362   0673             ; --- START RELATIONAL
0363   0673 D7            push a
0364   0674 11            mov a, b
0365   0675 FD 2E 05 00   mov32 cb, $00000005
0365   0679 00 00 
0366   067B B0            cmp a, b
0367   067C FD 73         slt ; < (signed)
0368   067E E4            pop a
0369   067F             ; --- END RELATIONAL
0370   067F C0 00 00      cmp b, 0
0371   0682 C6 19 07      je _for4_exit
0372   0685             _for4_block:
0373   0685             ; if(gca1[i] != 'A' + i){ 
0374   0685             _if5_cond:
0375   0685 3B 4D 24      mov d, _gca1_data ; $gca1
0376   0688 D7            push a
0377   0689 DA            push d
0378   068A FA FF FF      lea d, [bp + -1] ; $i
0379   068D 2A            mov b, [d]
0380   068E 38 00 00      mov c, 0
0381   0691 E7            pop d
0382   0692 5A            add d, b
0383   0693 E4            pop a
0384   0694 32            mov bl, [d]
0385   0695 A7 00         mov bh, 0
0386   0697 38 00 00      mov c, 0
0387   069A             ; --- START RELATIONAL
0388   069A D7            push a
0389   069B 11            mov a, b
0390   069C FD 2E 41 00   mov32 cb, $00000041
0390   06A0 00 00 
0391   06A2             ; --- START TERMS
0392   06A2 D7            push a
0393   06A3 11            mov a, b
0394   06A4 FA FF FF      lea d, [bp + -1] ; $i
0395   06A7 2A            mov b, [d]
0396   06A8 38 00 00      mov c, 0
0397   06AB 56            add b, a
0398   06AC E4            pop a
0399   06AD             ; --- END TERMS
0400   06AD B0            cmp a, b
0401   06AE FD 72         sneq ; !=
0402   06B0 E4            pop a
0403   06B1             ; --- END RELATIONAL
0404   06B1 C0 00 00      cmp b, 0
0405   06B4 C6 CA 06      je _if5_exit
0406   06B7             _if5_TRUE:
0407   06B7             ; pass = 0; 
0408   06B7 FA FD FF      lea d, [bp + -3] ; $pass
0409   06BA DA            push d
0410   06BB FD 2E 00 00   mov32 cb, $00000000
0410   06BF 00 00 
0411   06C1 E7            pop d
0412   06C2 FD 43         mov [d], b
0413   06C4             ; break; 
0414   06C4 0A 19 07      jmp _for4_exit ; for break
0415   06C7 0A CA 06      jmp _if5_exit
0416   06CA             _if5_exit:
0417   06CA             ; if(gia1[i] != i){ 
0418   06CA             _if6_cond:
0419   06CA 3B 52 24      mov d, _gia1_data ; $gia1
0420   06CD D7            push a
0421   06CE DA            push d
0422   06CF FA FF FF      lea d, [bp + -1] ; $i
0423   06D2 2A            mov b, [d]
0424   06D3 38 00 00      mov c, 0
0425   06D6 E7            pop d
0426   06D7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0427   06DB E4            pop a
0428   06DC 2A            mov b, [d]
0429   06DD 38 00 00      mov c, 0
0430   06E0             ; --- START RELATIONAL
0431   06E0 D7            push a
0432   06E1 11            mov a, b
0433   06E2 FA FF FF      lea d, [bp + -1] ; $i
0434   06E5 2A            mov b, [d]
0435   06E6 38 00 00      mov c, 0
0436   06E9 B0            cmp a, b
0437   06EA FD 72         sneq ; !=
0438   06EC E4            pop a
0439   06ED             ; --- END RELATIONAL
0440   06ED C0 00 00      cmp b, 0
0441   06F0 C6 06 07      je _if6_exit
0442   06F3             _if6_TRUE:
0443   06F3             ; pass = 0; 
0444   06F3 FA FD FF      lea d, [bp + -3] ; $pass
0445   06F6 DA            push d
0446   06F7 FD 2E 00 00   mov32 cb, $00000000
0446   06FB 00 00 
0447   06FD E7            pop d
0448   06FE FD 43         mov [d], b
0449   0700             ; break; 
0450   0700 0A 19 07      jmp _for4_exit ; for break
0451   0703 0A 06 07      jmp _if6_exit
0452   0706             _if6_exit:
0453   0706             _for4_update:
0454   0706 FA FF FF      lea d, [bp + -1] ; $i
0455   0709 2A            mov b, [d]
0456   070A 38 00 00      mov c, 0
0457   070D 11            mov a, b
0458   070E FD 77         inc b
0459   0710 FA FF FF      lea d, [bp + -1] ; $i
0460   0713 FD 43         mov [d], b
0461   0715 27            mov b, a
0462   0716 0A 6C 06      jmp _for4_cond
0463   0719             _for4_exit:
0464   0719             ; return pass; 
0465   0719 FA FD FF      lea d, [bp + -3] ; $pass
0466   071C 2A            mov b, [d]
0467   071D 38 00 00      mov c, 0
0468   0720 F9            leave
0469   0721 09            ret
0470   0722             
0471   0722             test1:
0472   0722 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0473   0725             ; int i, j; 
0474   0725 52 02 00      sub sp, 2
0475   0728 52 02 00      sub sp, 2
0476   072B             ; int pass = 1; 
0477   072B 52 02 00      sub sp, 2
0478   072E             ; --- START LOCAL VAR INITIALIZATION
0479   072E FA FB FF      lea d, [bp + -5] ; $pass
0480   0731 DA            push d
0481   0732 FD 2E 01 00   mov32 cb, $00000001
0481   0736 00 00 
0482   0738 E7            pop d
0483   0739 FD 43         mov [d], b
0484   073B             ; --- END LOCAL VAR INITIALIZATION
0485   073B             ; for (i = 0; i < 5; i++){ 
0486   073B             _for7_init:
0487   073B FA FF FF      lea d, [bp + -1] ; $i
0488   073E DA            push d
0489   073F FD 2E 00 00   mov32 cb, $00000000
0489   0743 00 00 
0490   0745 E7            pop d
0491   0746 FD 43         mov [d], b
0492   0748             _for7_cond:
0493   0748 FA FF FF      lea d, [bp + -1] ; $i
0494   074B 2A            mov b, [d]
0495   074C 38 00 00      mov c, 0
0496   074F             ; --- START RELATIONAL
0497   074F D7            push a
0498   0750 11            mov a, b
0499   0751 FD 2E 05 00   mov32 cb, $00000005
0499   0755 00 00 
0500   0757 B0            cmp a, b
0501   0758 FD 73         slt ; < (signed)
0502   075A E4            pop a
0503   075B             ; --- END RELATIONAL
0504   075B C0 00 00      cmp b, 0
0505   075E C6 57 08      je _for7_exit
0506   0761             _for7_block:
0507   0761             ; for (j = 0; j < 5; j++){ 
0508   0761             _for8_init:
0509   0761 FA FD FF      lea d, [bp + -3] ; $j
0510   0764 DA            push d
0511   0765 FD 2E 00 00   mov32 cb, $00000000
0511   0769 00 00 
0512   076B E7            pop d
0513   076C FD 43         mov [d], b
0514   076E             _for8_cond:
0515   076E FA FD FF      lea d, [bp + -3] ; $j
0516   0771 2A            mov b, [d]
0517   0772 38 00 00      mov c, 0
0518   0775             ; --- START RELATIONAL
0519   0775 D7            push a
0520   0776 11            mov a, b
0521   0777 FD 2E 05 00   mov32 cb, $00000005
0521   077B 00 00 
0522   077D B0            cmp a, b
0523   077E FD 73         slt ; < (signed)
0524   0780 E4            pop a
0525   0781             ; --- END RELATIONAL
0526   0781 C0 00 00      cmp b, 0
0527   0784 C6 44 08      je _for8_exit
0528   0787             _for8_block:
0529   0787             ; gca2[i][j] = 'A' + i + j; 
0530   0787 3B 5C 24      mov d, _gca2_data ; $gca2
0531   078A D7            push a
0532   078B DA            push d
0533   078C FA FF FF      lea d, [bp + -1] ; $i
0534   078F 2A            mov b, [d]
0535   0790 38 00 00      mov c, 0
0536   0793 E7            pop d
0537   0794 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
0538   0798 DA            push d
0539   0799 FA FD FF      lea d, [bp + -3] ; $j
0540   079C 2A            mov b, [d]
0541   079D 38 00 00      mov c, 0
0542   07A0 E7            pop d
0543   07A1 5A            add d, b
0544   07A2 E4            pop a
0545   07A3 DA            push d
0546   07A4 FD 2E 41 00   mov32 cb, $00000041
0546   07A8 00 00 
0547   07AA             ; --- START TERMS
0548   07AA D7            push a
0549   07AB 11            mov a, b
0550   07AC FA FF FF      lea d, [bp + -1] ; $i
0551   07AF 2A            mov b, [d]
0552   07B0 38 00 00      mov c, 0
0553   07B3 56            add b, a
0554   07B4 11            mov a, b
0555   07B5 FA FD FF      lea d, [bp + -3] ; $j
0556   07B8 2A            mov b, [d]
0557   07B9 38 00 00      mov c, 0
0558   07BC 56            add b, a
0559   07BD E4            pop a
0560   07BE             ; --- END TERMS
0561   07BE E7            pop d
0562   07BF FD 3E         mov [d], bl
0563   07C1             ; gia2[i][j] = i * j; 
0564   07C1 3B 75 24      mov d, _gia2_data ; $gia2
0565   07C4 D7            push a
0566   07C5 DA            push d
0567   07C6 FA FF FF      lea d, [bp + -1] ; $i
0568   07C9 2A            mov b, [d]
0569   07CA 38 00 00      mov c, 0
0570   07CD E7            pop d
0571   07CE FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
0572   07D2 DA            push d
0573   07D3 FA FD FF      lea d, [bp + -3] ; $j
0574   07D6 2A            mov b, [d]
0575   07D7 38 00 00      mov c, 0
0576   07DA E7            pop d
0577   07DB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0578   07DF E4            pop a
0579   07E0 DA            push d
0580   07E1 FA FF FF      lea d, [bp + -1] ; $i
0581   07E4 2A            mov b, [d]
0582   07E5 38 00 00      mov c, 0
0583   07E8             ; --- START FACTORS
0584   07E8 D7            push a
0585   07E9 FD D8         push g
0586   07EB 11            mov a, b
0587   07EC FD 7A         mov g, c
0588   07EE FA FD FF      lea d, [bp + -3] ; $j
0589   07F1 2A            mov b, [d]
0590   07F2 38 00 00      mov c, 0
0591   07F5 D7            push a     ; save left operand
0592   07F6 8E            xor a, b   ; xor sign bits
0593   07F7 FD AA         swp a      ; swap bytes
0594   07F9 83            mov cl, al ; save result of xor into 'dl'
0595   07FA E4            pop a      ; restore left side operator
0596   07FB DF            push cl    ; save result of xor above
0597   07FC FD AA         swp a  
0598   07FE 93 80         test al, $80  
0599   0800 FD AA         swp a  
0600   0802 C6 07 08      jz skip_invert_a_10  
0601   0805 FD 95         neg a 
0602   0807             skip_invert_a_10:   
0603   0807 FD AB         swp b
0604   0809 FD 93 80      test bl, $80  
0605   080C FD AB         swp b
0606   080E C6 13 08      jz skip_invert_b_10  
0607   0811 FD 97         neg b 
0608   0813             skip_invert_b_10:   
0609   0813 AC            mul a, b ; *
0610   0814 FD 78         mov g, a
0611   0816 11            mov a, b
0612   0817 EA            pop bl
0613   0818 FD 93 80      test bl, $80
0614   081B C6 28 08      jz _same_signs_10
0615   081E 2F            mov bl, al
0616   081F 95            not a
0617   0820 FD 97         neg b
0618   0822 5B 00 00      adc a, 0
0619   0825 FD 78         mov g, a
0620   0827 11            mov a, b
0621   0828             _same_signs_10:
0622   0828 FD 38         mov c, g
0623   082A 27            mov b, a
0624   082B FD F1         pop g
0625   082D E4            pop a
0626   082E             ; --- END FACTORS
0627   082E E7            pop d
0628   082F FD 43         mov [d], b
0629   0831             _for8_update:
0630   0831 FA FD FF      lea d, [bp + -3] ; $j
0631   0834 2A            mov b, [d]
0632   0835 38 00 00      mov c, 0
0633   0838 11            mov a, b
0634   0839 FD 77         inc b
0635   083B FA FD FF      lea d, [bp + -3] ; $j
0636   083E FD 43         mov [d], b
0637   0840 27            mov b, a
0638   0841 0A 6E 07      jmp _for8_cond
0639   0844             _for8_exit:
0640   0844             _for7_update:
0641   0844 FA FF FF      lea d, [bp + -1] ; $i
0642   0847 2A            mov b, [d]
0643   0848 38 00 00      mov c, 0
0644   084B 11            mov a, b
0645   084C FD 77         inc b
0646   084E FA FF FF      lea d, [bp + -1] ; $i
0647   0851 FD 43         mov [d], b
0648   0853 27            mov b, a
0649   0854 0A 48 07      jmp _for7_cond
0650   0857             _for7_exit:
0651   0857             ; for (i = 0; i < 5; i++){ 
0652   0857             _for11_init:
0653   0857 FA FF FF      lea d, [bp + -1] ; $i
0654   085A DA            push d
0655   085B FD 2E 00 00   mov32 cb, $00000000
0655   085F 00 00 
0656   0861 E7            pop d
0657   0862 FD 43         mov [d], b
0658   0864             _for11_cond:
0659   0864 FA FF FF      lea d, [bp + -1] ; $i
0660   0867 2A            mov b, [d]
0661   0868 38 00 00      mov c, 0
0662   086B             ; --- START RELATIONAL
0663   086B D7            push a
0664   086C 11            mov a, b
0665   086D FD 2E 05 00   mov32 cb, $00000005
0665   0871 00 00 
0666   0873 B0            cmp a, b
0667   0874 FD 73         slt ; < (signed)
0668   0876 E4            pop a
0669   0877             ; --- END RELATIONAL
0670   0877 C0 00 00      cmp b, 0
0671   087A C6 B8 09      je _for11_exit
0672   087D             _for11_block:
0673   087D             ; for (j = 0; j < 5; j++){ 
0674   087D             _for12_init:
0675   087D FA FD FF      lea d, [bp + -3] ; $j
0676   0880 DA            push d
0677   0881 FD 2E 00 00   mov32 cb, $00000000
0677   0885 00 00 
0678   0887 E7            pop d
0679   0888 FD 43         mov [d], b
0680   088A             _for12_cond:
0681   088A FA FD FF      lea d, [bp + -3] ; $j
0682   088D 2A            mov b, [d]
0683   088E 38 00 00      mov c, 0
0684   0891             ; --- START RELATIONAL
0685   0891 D7            push a
0686   0892 11            mov a, b
0687   0893 FD 2E 05 00   mov32 cb, $00000005
0687   0897 00 00 
0688   0899 B0            cmp a, b
0689   089A FD 73         slt ; < (signed)
0690   089C E4            pop a
0691   089D             ; --- END RELATIONAL
0692   089D C0 00 00      cmp b, 0
0693   08A0 C6 A5 09      je _for12_exit
0694   08A3             _for12_block:
0695   08A3             ; if(gca2[i][j] != 'A' + i + j){ 
0696   08A3             _if13_cond:
0697   08A3 3B 5C 24      mov d, _gca2_data ; $gca2
0698   08A6 D7            push a
0699   08A7 DA            push d
0700   08A8 FA FF FF      lea d, [bp + -1] ; $i
0701   08AB 2A            mov b, [d]
0702   08AC 38 00 00      mov c, 0
0703   08AF E7            pop d
0704   08B0 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
0705   08B4 DA            push d
0706   08B5 FA FD FF      lea d, [bp + -3] ; $j
0707   08B8 2A            mov b, [d]
0708   08B9 38 00 00      mov c, 0
0709   08BC E7            pop d
0710   08BD 5A            add d, b
0711   08BE E4            pop a
0712   08BF 32            mov bl, [d]
0713   08C0 A7 00         mov bh, 0
0714   08C2 38 00 00      mov c, 0
0715   08C5             ; --- START RELATIONAL
0716   08C5 D7            push a
0717   08C6 11            mov a, b
0718   08C7 FD 2E 41 00   mov32 cb, $00000041
0718   08CB 00 00 
0719   08CD             ; --- START TERMS
0720   08CD D7            push a
0721   08CE 11            mov a, b
0722   08CF FA FF FF      lea d, [bp + -1] ; $i
0723   08D2 2A            mov b, [d]
0724   08D3 38 00 00      mov c, 0
0725   08D6 56            add b, a
0726   08D7 11            mov a, b
0727   08D8 FA FD FF      lea d, [bp + -3] ; $j
0728   08DB 2A            mov b, [d]
0729   08DC 38 00 00      mov c, 0
0730   08DF 56            add b, a
0731   08E0 E4            pop a
0732   08E1             ; --- END TERMS
0733   08E1 B0            cmp a, b
0734   08E2 FD 72         sneq ; !=
0735   08E4 E4            pop a
0736   08E5             ; --- END RELATIONAL
0737   08E5 C0 00 00      cmp b, 0
0738   08E8 C6 FE 08      je _if13_exit
0739   08EB             _if13_TRUE:
0740   08EB             ; pass = 0; 
0741   08EB FA FB FF      lea d, [bp + -5] ; $pass
0742   08EE DA            push d
0743   08EF FD 2E 00 00   mov32 cb, $00000000
0743   08F3 00 00 
0744   08F5 E7            pop d
0745   08F6 FD 43         mov [d], b
0746   08F8             ; break; 
0747   08F8 0A A5 09      jmp _for12_exit ; for break
0748   08FB 0A FE 08      jmp _if13_exit
0749   08FE             _if13_exit:
0750   08FE             ; if(gia2[i][j] != i * j){ 
0751   08FE             _if14_cond:
0752   08FE 3B 75 24      mov d, _gia2_data ; $gia2
0753   0901 D7            push a
0754   0902 DA            push d
0755   0903 FA FF FF      lea d, [bp + -1] ; $i
0756   0906 2A            mov b, [d]
0757   0907 38 00 00      mov c, 0
0758   090A E7            pop d
0759   090B FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
0760   090F DA            push d
0761   0910 FA FD FF      lea d, [bp + -3] ; $j
0762   0913 2A            mov b, [d]
0763   0914 38 00 00      mov c, 0
0764   0917 E7            pop d
0765   0918 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0766   091C E4            pop a
0767   091D 2A            mov b, [d]
0768   091E 38 00 00      mov c, 0
0769   0921             ; --- START RELATIONAL
0770   0921 D7            push a
0771   0922 11            mov a, b
0772   0923 FA FF FF      lea d, [bp + -1] ; $i
0773   0926 2A            mov b, [d]
0774   0927 38 00 00      mov c, 0
0775   092A             ; --- START FACTORS
0776   092A D7            push a
0777   092B FD D8         push g
0778   092D 11            mov a, b
0779   092E FD 7A         mov g, c
0780   0930 FA FD FF      lea d, [bp + -3] ; $j
0781   0933 2A            mov b, [d]
0782   0934 38 00 00      mov c, 0
0783   0937 D7            push a     ; save left operand
0784   0938 8E            xor a, b   ; xor sign bits
0785   0939 FD AA         swp a      ; swap bytes
0786   093B 83            mov cl, al ; save result of xor into 'dl'
0787   093C E4            pop a      ; restore left side operator
0788   093D DF            push cl    ; save result of xor above
0789   093E FD AA         swp a  
0790   0940 93 80         test al, $80  
0791   0942 FD AA         swp a  
0792   0944 C6 49 09      jz skip_invert_a_16  
0793   0947 FD 95         neg a 
0794   0949             skip_invert_a_16:   
0795   0949 FD AB         swp b
0796   094B FD 93 80      test bl, $80  
0797   094E FD AB         swp b
0798   0950 C6 55 09      jz skip_invert_b_16  
0799   0953 FD 97         neg b 
0800   0955             skip_invert_b_16:   
0801   0955 AC            mul a, b ; *
0802   0956 FD 78         mov g, a
0803   0958 11            mov a, b
0804   0959 EA            pop bl
0805   095A FD 93 80      test bl, $80
0806   095D C6 6A 09      jz _same_signs_16
0807   0960 2F            mov bl, al
0808   0961 95            not a
0809   0962 FD 97         neg b
0810   0964 5B 00 00      adc a, 0
0811   0967 FD 78         mov g, a
0812   0969 11            mov a, b
0813   096A             _same_signs_16:
0814   096A FD 38         mov c, g
0815   096C 27            mov b, a
0816   096D FD F1         pop g
0817   096F E4            pop a
0818   0970             ; --- END FACTORS
0819   0970 FD 22 00 00   mov g, 0
0820   0974 FD AF         cmp32 ga, cb
0821   0976 FD 72         sneq ; !=
0822   0978 E4            pop a
0823   0979             ; --- END RELATIONAL
0824   0979 C0 00 00      cmp b, 0
0825   097C C6 92 09      je _if14_exit
0826   097F             _if14_TRUE:
0827   097F             ; pass = 0; 
0828   097F FA FB FF      lea d, [bp + -5] ; $pass
0829   0982 DA            push d
0830   0983 FD 2E 00 00   mov32 cb, $00000000
0830   0987 00 00 
0831   0989 E7            pop d
0832   098A FD 43         mov [d], b
0833   098C             ; break; 
0834   098C 0A A5 09      jmp _for12_exit ; for break
0835   098F 0A 92 09      jmp _if14_exit
0836   0992             _if14_exit:
0837   0992             _for12_update:
0838   0992 FA FD FF      lea d, [bp + -3] ; $j
0839   0995 2A            mov b, [d]
0840   0996 38 00 00      mov c, 0
0841   0999 11            mov a, b
0842   099A FD 77         inc b
0843   099C FA FD FF      lea d, [bp + -3] ; $j
0844   099F FD 43         mov [d], b
0845   09A1 27            mov b, a
0846   09A2 0A 8A 08      jmp _for12_cond
0847   09A5             _for12_exit:
0848   09A5             _for11_update:
0849   09A5 FA FF FF      lea d, [bp + -1] ; $i
0850   09A8 2A            mov b, [d]
0851   09A9 38 00 00      mov c, 0
0852   09AC 11            mov a, b
0853   09AD FD 77         inc b
0854   09AF FA FF FF      lea d, [bp + -1] ; $i
0855   09B2 FD 43         mov [d], b
0856   09B4 27            mov b, a
0857   09B5 0A 64 08      jmp _for11_cond
0858   09B8             _for11_exit:
0859   09B8             ; return pass; 
0860   09B8 FA FB FF      lea d, [bp + -5] ; $pass
0861   09BB 2A            mov b, [d]
0862   09BC 38 00 00      mov c, 0
0863   09BF F9            leave
0864   09C0 09            ret
0865   09C1             
0866   09C1             test2:
0867   09C1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0868   09C4             ; int i, j; 
0869   09C4 52 02 00      sub sp, 2
0870   09C7 52 02 00      sub sp, 2
0871   09CA             ; char lca[5]; 
0872   09CA 52 05 00      sub sp, 5
0873   09CD             ; int lia[5]; 
0874   09CD 52 0A 00      sub sp, 10
0875   09D0             ; int pass = 1; 
0876   09D0 52 02 00      sub sp, 2
0877   09D3             ; --- START LOCAL VAR INITIALIZATION
0878   09D3 FA EC FF      lea d, [bp + -20] ; $pass
0879   09D6 DA            push d
0880   09D7 FD 2E 01 00   mov32 cb, $00000001
0880   09DB 00 00 
0881   09DD E7            pop d
0882   09DE FD 43         mov [d], b
0883   09E0             ; --- END LOCAL VAR INITIALIZATION
0884   09E0             ; for (i = 0; i < 5; i++){ 
0885   09E0             _for17_init:
0886   09E0 FA FF FF      lea d, [bp + -1] ; $i
0887   09E3 DA            push d
0888   09E4 FD 2E 00 00   mov32 cb, $00000000
0888   09E8 00 00 
0889   09EA E7            pop d
0890   09EB FD 43         mov [d], b
0891   09ED             _for17_cond:
0892   09ED FA FF FF      lea d, [bp + -1] ; $i
0893   09F0 2A            mov b, [d]
0894   09F1 38 00 00      mov c, 0
0895   09F4             ; --- START RELATIONAL
0896   09F4 D7            push a
0897   09F5 11            mov a, b
0898   09F6 FD 2E 05 00   mov32 cb, $00000005
0898   09FA 00 00 
0899   09FC B0            cmp a, b
0900   09FD FD 73         slt ; < (signed)
0901   09FF E4            pop a
0902   0A00             ; --- END RELATIONAL
0903   0A00 C0 00 00      cmp b, 0
0904   0A03 C6 A9 0A      je _for17_exit
0905   0A06             _for17_block:
0906   0A06             ; lca[i] = 'A' + i + j; 
0907   0A06 FA F8 FF      lea d, [bp + -8] ; $lca
0908   0A09 D7            push a
0909   0A0A DA            push d
0910   0A0B FA FF FF      lea d, [bp + -1] ; $i
0911   0A0E 2A            mov b, [d]
0912   0A0F 38 00 00      mov c, 0
0913   0A12 E7            pop d
0914   0A13 5A            add d, b
0915   0A14 E4            pop a
0916   0A15 DA            push d
0917   0A16 FD 2E 41 00   mov32 cb, $00000041
0917   0A1A 00 00 
0918   0A1C             ; --- START TERMS
0919   0A1C D7            push a
0920   0A1D 11            mov a, b
0921   0A1E FA FF FF      lea d, [bp + -1] ; $i
0922   0A21 2A            mov b, [d]
0923   0A22 38 00 00      mov c, 0
0924   0A25 56            add b, a
0925   0A26 11            mov a, b
0926   0A27 FA FD FF      lea d, [bp + -3] ; $j
0927   0A2A 2A            mov b, [d]
0928   0A2B 38 00 00      mov c, 0
0929   0A2E 56            add b, a
0930   0A2F E4            pop a
0931   0A30             ; --- END TERMS
0932   0A30 E7            pop d
0933   0A31 FD 3E         mov [d], bl
0934   0A33             ; lia[i] = i * j; 
0935   0A33 FA EE FF      lea d, [bp + -18] ; $lia
0936   0A36 D7            push a
0937   0A37 DA            push d
0938   0A38 FA FF FF      lea d, [bp + -1] ; $i
0939   0A3B 2A            mov b, [d]
0940   0A3C 38 00 00      mov c, 0
0941   0A3F E7            pop d
0942   0A40 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0943   0A44 E4            pop a
0944   0A45 DA            push d
0945   0A46 FA FF FF      lea d, [bp + -1] ; $i
0946   0A49 2A            mov b, [d]
0947   0A4A 38 00 00      mov c, 0
0948   0A4D             ; --- START FACTORS
0949   0A4D D7            push a
0950   0A4E FD D8         push g
0951   0A50 11            mov a, b
0952   0A51 FD 7A         mov g, c
0953   0A53 FA FD FF      lea d, [bp + -3] ; $j
0954   0A56 2A            mov b, [d]
0955   0A57 38 00 00      mov c, 0
0956   0A5A D7            push a     ; save left operand
0957   0A5B 8E            xor a, b   ; xor sign bits
0958   0A5C FD AA         swp a      ; swap bytes
0959   0A5E 83            mov cl, al ; save result of xor into 'dl'
0960   0A5F E4            pop a      ; restore left side operator
0961   0A60 DF            push cl    ; save result of xor above
0962   0A61 FD AA         swp a  
0963   0A63 93 80         test al, $80  
0964   0A65 FD AA         swp a  
0965   0A67 C6 6C 0A      jz skip_invert_a_19  
0966   0A6A FD 95         neg a 
0967   0A6C             skip_invert_a_19:   
0968   0A6C FD AB         swp b
0969   0A6E FD 93 80      test bl, $80  
0970   0A71 FD AB         swp b
0971   0A73 C6 78 0A      jz skip_invert_b_19  
0972   0A76 FD 97         neg b 
0973   0A78             skip_invert_b_19:   
0974   0A78 AC            mul a, b ; *
0975   0A79 FD 78         mov g, a
0976   0A7B 11            mov a, b
0977   0A7C EA            pop bl
0978   0A7D FD 93 80      test bl, $80
0979   0A80 C6 8D 0A      jz _same_signs_19
0980   0A83 2F            mov bl, al
0981   0A84 95            not a
0982   0A85 FD 97         neg b
0983   0A87 5B 00 00      adc a, 0
0984   0A8A FD 78         mov g, a
0985   0A8C 11            mov a, b
0986   0A8D             _same_signs_19:
0987   0A8D FD 38         mov c, g
0988   0A8F 27            mov b, a
0989   0A90 FD F1         pop g
0990   0A92 E4            pop a
0991   0A93             ; --- END FACTORS
0992   0A93 E7            pop d
0993   0A94 FD 43         mov [d], b
0994   0A96             _for17_update:
0995   0A96 FA FF FF      lea d, [bp + -1] ; $i
0996   0A99 2A            mov b, [d]
0997   0A9A 38 00 00      mov c, 0
0998   0A9D 11            mov a, b
0999   0A9E FD 77         inc b
1000   0AA0 FA FF FF      lea d, [bp + -1] ; $i
1001   0AA3 FD 43         mov [d], b
1002   0AA5 27            mov b, a
1003   0AA6 0A ED 09      jmp _for17_cond
1004   0AA9             _for17_exit:
1005   0AA9             ; for (i = 0; i < 5; i++){ 
1006   0AA9             _for20_init:
1007   0AA9 FA FF FF      lea d, [bp + -1] ; $i
1008   0AAC DA            push d
1009   0AAD FD 2E 00 00   mov32 cb, $00000000
1009   0AB1 00 00 
1010   0AB3 E7            pop d
1011   0AB4 FD 43         mov [d], b
1012   0AB6             _for20_cond:
1013   0AB6 FA FF FF      lea d, [bp + -1] ; $i
1014   0AB9 2A            mov b, [d]
1015   0ABA 38 00 00      mov c, 0
1016   0ABD             ; --- START RELATIONAL
1017   0ABD D7            push a
1018   0ABE 11            mov a, b
1019   0ABF FD 2E 05 00   mov32 cb, $00000005
1019   0AC3 00 00 
1020   0AC5 B0            cmp a, b
1021   0AC6 FD 73         slt ; < (signed)
1022   0AC8 E4            pop a
1023   0AC9             ; --- END RELATIONAL
1024   0AC9 C0 00 00      cmp b, 0
1025   0ACC C6 B7 0B      je _for20_exit
1026   0ACF             _for20_block:
1027   0ACF             ; if(lca[i] != 'A' + i + j){ 
1028   0ACF             _if21_cond:
1029   0ACF FA F8 FF      lea d, [bp + -8] ; $lca
1030   0AD2 D7            push a
1031   0AD3 DA            push d
1032   0AD4 FA FF FF      lea d, [bp + -1] ; $i
1033   0AD7 2A            mov b, [d]
1034   0AD8 38 00 00      mov c, 0
1035   0ADB E7            pop d
1036   0ADC 5A            add d, b
1037   0ADD E4            pop a
1038   0ADE 32            mov bl, [d]
1039   0ADF A7 00         mov bh, 0
1040   0AE1 38 00 00      mov c, 0
1041   0AE4             ; --- START RELATIONAL
1042   0AE4 D7            push a
1043   0AE5 11            mov a, b
1044   0AE6 FD 2E 41 00   mov32 cb, $00000041
1044   0AEA 00 00 
1045   0AEC             ; --- START TERMS
1046   0AEC D7            push a
1047   0AED 11            mov a, b
1048   0AEE FA FF FF      lea d, [bp + -1] ; $i
1049   0AF1 2A            mov b, [d]
1050   0AF2 38 00 00      mov c, 0
1051   0AF5 56            add b, a
1052   0AF6 11            mov a, b
1053   0AF7 FA FD FF      lea d, [bp + -3] ; $j
1054   0AFA 2A            mov b, [d]
1055   0AFB 38 00 00      mov c, 0
1056   0AFE 56            add b, a
1057   0AFF E4            pop a
1058   0B00             ; --- END TERMS
1059   0B00 B0            cmp a, b
1060   0B01 FD 72         sneq ; !=
1061   0B03 E4            pop a
1062   0B04             ; --- END RELATIONAL
1063   0B04 C0 00 00      cmp b, 0
1064   0B07 C6 1D 0B      je _if21_exit
1065   0B0A             _if21_TRUE:
1066   0B0A             ; pass = 0; 
1067   0B0A FA EC FF      lea d, [bp + -20] ; $pass
1068   0B0D DA            push d
1069   0B0E FD 2E 00 00   mov32 cb, $00000000
1069   0B12 00 00 
1070   0B14 E7            pop d
1071   0B15 FD 43         mov [d], b
1072   0B17             ; break; 
1073   0B17 0A B7 0B      jmp _for20_exit ; for break
1074   0B1A 0A 1D 0B      jmp _if21_exit
1075   0B1D             _if21_exit:
1076   0B1D             ; if(lia[i] != i * j){ 
1077   0B1D             _if22_cond:
1078   0B1D FA EE FF      lea d, [bp + -18] ; $lia
1079   0B20 D7            push a
1080   0B21 DA            push d
1081   0B22 FA FF FF      lea d, [bp + -1] ; $i
1082   0B25 2A            mov b, [d]
1083   0B26 38 00 00      mov c, 0
1084   0B29 E7            pop d
1085   0B2A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1086   0B2E E4            pop a
1087   0B2F 2A            mov b, [d]
1088   0B30 38 00 00      mov c, 0
1089   0B33             ; --- START RELATIONAL
1090   0B33 D7            push a
1091   0B34 11            mov a, b
1092   0B35 FA FF FF      lea d, [bp + -1] ; $i
1093   0B38 2A            mov b, [d]
1094   0B39 38 00 00      mov c, 0
1095   0B3C             ; --- START FACTORS
1096   0B3C D7            push a
1097   0B3D FD D8         push g
1098   0B3F 11            mov a, b
1099   0B40 FD 7A         mov g, c
1100   0B42 FA FD FF      lea d, [bp + -3] ; $j
1101   0B45 2A            mov b, [d]
1102   0B46 38 00 00      mov c, 0
1103   0B49 D7            push a     ; save left operand
1104   0B4A 8E            xor a, b   ; xor sign bits
1105   0B4B FD AA         swp a      ; swap bytes
1106   0B4D 83            mov cl, al ; save result of xor into 'dl'
1107   0B4E E4            pop a      ; restore left side operator
1108   0B4F DF            push cl    ; save result of xor above
1109   0B50 FD AA         swp a  
1110   0B52 93 80         test al, $80  
1111   0B54 FD AA         swp a  
1112   0B56 C6 5B 0B      jz skip_invert_a_24  
1113   0B59 FD 95         neg a 
1114   0B5B             skip_invert_a_24:   
1115   0B5B FD AB         swp b
1116   0B5D FD 93 80      test bl, $80  
1117   0B60 FD AB         swp b
1118   0B62 C6 67 0B      jz skip_invert_b_24  
1119   0B65 FD 97         neg b 
1120   0B67             skip_invert_b_24:   
1121   0B67 AC            mul a, b ; *
1122   0B68 FD 78         mov g, a
1123   0B6A 11            mov a, b
1124   0B6B EA            pop bl
1125   0B6C FD 93 80      test bl, $80
1126   0B6F C6 7C 0B      jz _same_signs_24
1127   0B72 2F            mov bl, al
1128   0B73 95            not a
1129   0B74 FD 97         neg b
1130   0B76 5B 00 00      adc a, 0
1131   0B79 FD 78         mov g, a
1132   0B7B 11            mov a, b
1133   0B7C             _same_signs_24:
1134   0B7C FD 38         mov c, g
1135   0B7E 27            mov b, a
1136   0B7F FD F1         pop g
1137   0B81 E4            pop a
1138   0B82             ; --- END FACTORS
1139   0B82 FD 22 00 00   mov g, 0
1140   0B86 FD AF         cmp32 ga, cb
1141   0B88 FD 72         sneq ; !=
1142   0B8A E4            pop a
1143   0B8B             ; --- END RELATIONAL
1144   0B8B C0 00 00      cmp b, 0
1145   0B8E C6 A4 0B      je _if22_exit
1146   0B91             _if22_TRUE:
1147   0B91             ; pass = 0; 
1148   0B91 FA EC FF      lea d, [bp + -20] ; $pass
1149   0B94 DA            push d
1150   0B95 FD 2E 00 00   mov32 cb, $00000000
1150   0B99 00 00 
1151   0B9B E7            pop d
1152   0B9C FD 43         mov [d], b
1153   0B9E             ; break; 
1154   0B9E 0A B7 0B      jmp _for20_exit ; for break
1155   0BA1 0A A4 0B      jmp _if22_exit
1156   0BA4             _if22_exit:
1157   0BA4             _for20_update:
1158   0BA4 FA FF FF      lea d, [bp + -1] ; $i
1159   0BA7 2A            mov b, [d]
1160   0BA8 38 00 00      mov c, 0
1161   0BAB 11            mov a, b
1162   0BAC FD 77         inc b
1163   0BAE FA FF FF      lea d, [bp + -1] ; $i
1164   0BB1 FD 43         mov [d], b
1165   0BB3 27            mov b, a
1166   0BB4 0A B6 0A      jmp _for20_cond
1167   0BB7             _for20_exit:
1168   0BB7             ; return pass; 
1169   0BB7 FA EC FF      lea d, [bp + -20] ; $pass
1170   0BBA 2A            mov b, [d]
1171   0BBB 38 00 00      mov c, 0
1172   0BBE F9            leave
1173   0BBF 09            ret
1174   0BC0             
1175   0BC0             test3:
1176   0BC0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1177   0BC3             ; int i, j; 
1178   0BC3 52 02 00      sub sp, 2
1179   0BC6 52 02 00      sub sp, 2
1180   0BC9             ; char lca[5][5]; 
1181   0BC9 52 19 00      sub sp, 25
1182   0BCC             ; int lia[5][5]; 
1183   0BCC 52 32 00      sub sp, 50
1184   0BCF             ; int pass = 1; 
1185   0BCF 52 02 00      sub sp, 2
1186   0BD2             ; --- START LOCAL VAR INITIALIZATION
1187   0BD2 FA B0 FF      lea d, [bp + -80] ; $pass
1188   0BD5 DA            push d
1189   0BD6 FD 2E 01 00   mov32 cb, $00000001
1189   0BDA 00 00 
1190   0BDC E7            pop d
1191   0BDD FD 43         mov [d], b
1192   0BDF             ; --- END LOCAL VAR INITIALIZATION
1193   0BDF             ; for (i = 0; i < 5; i++){ 
1194   0BDF             _for25_init:
1195   0BDF FA FF FF      lea d, [bp + -1] ; $i
1196   0BE2 DA            push d
1197   0BE3 FD 2E 00 00   mov32 cb, $00000000
1197   0BE7 00 00 
1198   0BE9 E7            pop d
1199   0BEA FD 43         mov [d], b
1200   0BEC             _for25_cond:
1201   0BEC FA FF FF      lea d, [bp + -1] ; $i
1202   0BEF 2A            mov b, [d]
1203   0BF0 38 00 00      mov c, 0
1204   0BF3             ; --- START RELATIONAL
1205   0BF3 D7            push a
1206   0BF4 11            mov a, b
1207   0BF5 FD 2E 05 00   mov32 cb, $00000005
1207   0BF9 00 00 
1208   0BFB B0            cmp a, b
1209   0BFC FD 73         slt ; < (signed)
1210   0BFE E4            pop a
1211   0BFF             ; --- END RELATIONAL
1212   0BFF C0 00 00      cmp b, 0
1213   0C02 C6 FB 0C      je _for25_exit
1214   0C05             _for25_block:
1215   0C05             ; for (j = 0; j < 5; j++){ 
1216   0C05             _for26_init:
1217   0C05 FA FD FF      lea d, [bp + -3] ; $j
1218   0C08 DA            push d
1219   0C09 FD 2E 00 00   mov32 cb, $00000000
1219   0C0D 00 00 
1220   0C0F E7            pop d
1221   0C10 FD 43         mov [d], b
1222   0C12             _for26_cond:
1223   0C12 FA FD FF      lea d, [bp + -3] ; $j
1224   0C15 2A            mov b, [d]
1225   0C16 38 00 00      mov c, 0
1226   0C19             ; --- START RELATIONAL
1227   0C19 D7            push a
1228   0C1A 11            mov a, b
1229   0C1B FD 2E 05 00   mov32 cb, $00000005
1229   0C1F 00 00 
1230   0C21 B0            cmp a, b
1231   0C22 FD 73         slt ; < (signed)
1232   0C24 E4            pop a
1233   0C25             ; --- END RELATIONAL
1234   0C25 C0 00 00      cmp b, 0
1235   0C28 C6 E8 0C      je _for26_exit
1236   0C2B             _for26_block:
1237   0C2B             ; lca[i][j] = 'A' + i + j; 
1238   0C2B FA E4 FF      lea d, [bp + -28] ; $lca
1239   0C2E D7            push a
1240   0C2F DA            push d
1241   0C30 FA FF FF      lea d, [bp + -1] ; $i
1242   0C33 2A            mov b, [d]
1243   0C34 38 00 00      mov c, 0
1244   0C37 E7            pop d
1245   0C38 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
1246   0C3C DA            push d
1247   0C3D FA FD FF      lea d, [bp + -3] ; $j
1248   0C40 2A            mov b, [d]
1249   0C41 38 00 00      mov c, 0
1250   0C44 E7            pop d
1251   0C45 5A            add d, b
1252   0C46 E4            pop a
1253   0C47 DA            push d
1254   0C48 FD 2E 41 00   mov32 cb, $00000041
1254   0C4C 00 00 
1255   0C4E             ; --- START TERMS
1256   0C4E D7            push a
1257   0C4F 11            mov a, b
1258   0C50 FA FF FF      lea d, [bp + -1] ; $i
1259   0C53 2A            mov b, [d]
1260   0C54 38 00 00      mov c, 0
1261   0C57 56            add b, a
1262   0C58 11            mov a, b
1263   0C59 FA FD FF      lea d, [bp + -3] ; $j
1264   0C5C 2A            mov b, [d]
1265   0C5D 38 00 00      mov c, 0
1266   0C60 56            add b, a
1267   0C61 E4            pop a
1268   0C62             ; --- END TERMS
1269   0C62 E7            pop d
1270   0C63 FD 3E         mov [d], bl
1271   0C65             ; lia[i][j] = i * j; 
1272   0C65 FA B2 FF      lea d, [bp + -78] ; $lia
1273   0C68 D7            push a
1274   0C69 DA            push d
1275   0C6A FA FF FF      lea d, [bp + -1] ; $i
1276   0C6D 2A            mov b, [d]
1277   0C6E 38 00 00      mov c, 0
1278   0C71 E7            pop d
1279   0C72 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
1280   0C76 DA            push d
1281   0C77 FA FD FF      lea d, [bp + -3] ; $j
1282   0C7A 2A            mov b, [d]
1283   0C7B 38 00 00      mov c, 0
1284   0C7E E7            pop d
1285   0C7F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1286   0C83 E4            pop a
1287   0C84 DA            push d
1288   0C85 FA FF FF      lea d, [bp + -1] ; $i
1289   0C88 2A            mov b, [d]
1290   0C89 38 00 00      mov c, 0
1291   0C8C             ; --- START FACTORS
1292   0C8C D7            push a
1293   0C8D FD D8         push g
1294   0C8F 11            mov a, b
1295   0C90 FD 7A         mov g, c
1296   0C92 FA FD FF      lea d, [bp + -3] ; $j
1297   0C95 2A            mov b, [d]
1298   0C96 38 00 00      mov c, 0
1299   0C99 D7            push a     ; save left operand
1300   0C9A 8E            xor a, b   ; xor sign bits
1301   0C9B FD AA         swp a      ; swap bytes
1302   0C9D 83            mov cl, al ; save result of xor into 'dl'
1303   0C9E E4            pop a      ; restore left side operator
1304   0C9F DF            push cl    ; save result of xor above
1305   0CA0 FD AA         swp a  
1306   0CA2 93 80         test al, $80  
1307   0CA4 FD AA         swp a  
1308   0CA6 C6 AB 0C      jz skip_invert_a_28  
1309   0CA9 FD 95         neg a 
1310   0CAB             skip_invert_a_28:   
1311   0CAB FD AB         swp b
1312   0CAD FD 93 80      test bl, $80  
1313   0CB0 FD AB         swp b
1314   0CB2 C6 B7 0C      jz skip_invert_b_28  
1315   0CB5 FD 97         neg b 
1316   0CB7             skip_invert_b_28:   
1317   0CB7 AC            mul a, b ; *
1318   0CB8 FD 78         mov g, a
1319   0CBA 11            mov a, b
1320   0CBB EA            pop bl
1321   0CBC FD 93 80      test bl, $80
1322   0CBF C6 CC 0C      jz _same_signs_28
1323   0CC2 2F            mov bl, al
1324   0CC3 95            not a
1325   0CC4 FD 97         neg b
1326   0CC6 5B 00 00      adc a, 0
1327   0CC9 FD 78         mov g, a
1328   0CCB 11            mov a, b
1329   0CCC             _same_signs_28:
1330   0CCC FD 38         mov c, g
1331   0CCE 27            mov b, a
1332   0CCF FD F1         pop g
1333   0CD1 E4            pop a
1334   0CD2             ; --- END FACTORS
1335   0CD2 E7            pop d
1336   0CD3 FD 43         mov [d], b
1337   0CD5             _for26_update:
1338   0CD5 FA FD FF      lea d, [bp + -3] ; $j
1339   0CD8 2A            mov b, [d]
1340   0CD9 38 00 00      mov c, 0
1341   0CDC 11            mov a, b
1342   0CDD FD 77         inc b
1343   0CDF FA FD FF      lea d, [bp + -3] ; $j
1344   0CE2 FD 43         mov [d], b
1345   0CE4 27            mov b, a
1346   0CE5 0A 12 0C      jmp _for26_cond
1347   0CE8             _for26_exit:
1348   0CE8             _for25_update:
1349   0CE8 FA FF FF      lea d, [bp + -1] ; $i
1350   0CEB 2A            mov b, [d]
1351   0CEC 38 00 00      mov c, 0
1352   0CEF 11            mov a, b
1353   0CF0 FD 77         inc b
1354   0CF2 FA FF FF      lea d, [bp + -1] ; $i
1355   0CF5 FD 43         mov [d], b
1356   0CF7 27            mov b, a
1357   0CF8 0A EC 0B      jmp _for25_cond
1358   0CFB             _for25_exit:
1359   0CFB             ; for (i = 0; i < 5; i++){ 
1360   0CFB             _for29_init:
1361   0CFB FA FF FF      lea d, [bp + -1] ; $i
1362   0CFE DA            push d
1363   0CFF FD 2E 00 00   mov32 cb, $00000000
1363   0D03 00 00 
1364   0D05 E7            pop d
1365   0D06 FD 43         mov [d], b
1366   0D08             _for29_cond:
1367   0D08 FA FF FF      lea d, [bp + -1] ; $i
1368   0D0B 2A            mov b, [d]
1369   0D0C 38 00 00      mov c, 0
1370   0D0F             ; --- START RELATIONAL
1371   0D0F D7            push a
1372   0D10 11            mov a, b
1373   0D11 FD 2E 05 00   mov32 cb, $00000005
1373   0D15 00 00 
1374   0D17 B0            cmp a, b
1375   0D18 FD 73         slt ; < (signed)
1376   0D1A E4            pop a
1377   0D1B             ; --- END RELATIONAL
1378   0D1B C0 00 00      cmp b, 0
1379   0D1E C6 5C 0E      je _for29_exit
1380   0D21             _for29_block:
1381   0D21             ; for (j = 0; j < 5; j++){ 
1382   0D21             _for30_init:
1383   0D21 FA FD FF      lea d, [bp + -3] ; $j
1384   0D24 DA            push d
1385   0D25 FD 2E 00 00   mov32 cb, $00000000
1385   0D29 00 00 
1386   0D2B E7            pop d
1387   0D2C FD 43         mov [d], b
1388   0D2E             _for30_cond:
1389   0D2E FA FD FF      lea d, [bp + -3] ; $j
1390   0D31 2A            mov b, [d]
1391   0D32 38 00 00      mov c, 0
1392   0D35             ; --- START RELATIONAL
1393   0D35 D7            push a
1394   0D36 11            mov a, b
1395   0D37 FD 2E 05 00   mov32 cb, $00000005
1395   0D3B 00 00 
1396   0D3D B0            cmp a, b
1397   0D3E FD 73         slt ; < (signed)
1398   0D40 E4            pop a
1399   0D41             ; --- END RELATIONAL
1400   0D41 C0 00 00      cmp b, 0
1401   0D44 C6 49 0E      je _for30_exit
1402   0D47             _for30_block:
1403   0D47             ; if(lca[i][j] != 'A' + i + j){ 
1404   0D47             _if31_cond:
1405   0D47 FA E4 FF      lea d, [bp + -28] ; $lca
1406   0D4A D7            push a
1407   0D4B DA            push d
1408   0D4C FA FF FF      lea d, [bp + -1] ; $i
1409   0D4F 2A            mov b, [d]
1410   0D50 38 00 00      mov c, 0
1411   0D53 E7            pop d
1412   0D54 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
1413   0D58 DA            push d
1414   0D59 FA FD FF      lea d, [bp + -3] ; $j
1415   0D5C 2A            mov b, [d]
1416   0D5D 38 00 00      mov c, 0
1417   0D60 E7            pop d
1418   0D61 5A            add d, b
1419   0D62 E4            pop a
1420   0D63 32            mov bl, [d]
1421   0D64 A7 00         mov bh, 0
1422   0D66 38 00 00      mov c, 0
1423   0D69             ; --- START RELATIONAL
1424   0D69 D7            push a
1425   0D6A 11            mov a, b
1426   0D6B FD 2E 41 00   mov32 cb, $00000041
1426   0D6F 00 00 
1427   0D71             ; --- START TERMS
1428   0D71 D7            push a
1429   0D72 11            mov a, b
1430   0D73 FA FF FF      lea d, [bp + -1] ; $i
1431   0D76 2A            mov b, [d]
1432   0D77 38 00 00      mov c, 0
1433   0D7A 56            add b, a
1434   0D7B 11            mov a, b
1435   0D7C FA FD FF      lea d, [bp + -3] ; $j
1436   0D7F 2A            mov b, [d]
1437   0D80 38 00 00      mov c, 0
1438   0D83 56            add b, a
1439   0D84 E4            pop a
1440   0D85             ; --- END TERMS
1441   0D85 B0            cmp a, b
1442   0D86 FD 72         sneq ; !=
1443   0D88 E4            pop a
1444   0D89             ; --- END RELATIONAL
1445   0D89 C0 00 00      cmp b, 0
1446   0D8C C6 A2 0D      je _if31_exit
1447   0D8F             _if31_TRUE:
1448   0D8F             ; pass = 0; 
1449   0D8F FA B0 FF      lea d, [bp + -80] ; $pass
1450   0D92 DA            push d
1451   0D93 FD 2E 00 00   mov32 cb, $00000000
1451   0D97 00 00 
1452   0D99 E7            pop d
1453   0D9A FD 43         mov [d], b
1454   0D9C             ; break; 
1455   0D9C 0A 49 0E      jmp _for30_exit ; for break
1456   0D9F 0A A2 0D      jmp _if31_exit
1457   0DA2             _if31_exit:
1458   0DA2             ; if(lia[i][j] != i * j){ 
1459   0DA2             _if32_cond:
1460   0DA2 FA B2 FF      lea d, [bp + -78] ; $lia
1461   0DA5 D7            push a
1462   0DA6 DA            push d
1463   0DA7 FA FF FF      lea d, [bp + -1] ; $i
1464   0DAA 2A            mov b, [d]
1465   0DAB 38 00 00      mov c, 0
1466   0DAE E7            pop d
1467   0DAF FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
1468   0DB3 DA            push d
1469   0DB4 FA FD FF      lea d, [bp + -3] ; $j
1470   0DB7 2A            mov b, [d]
1471   0DB8 38 00 00      mov c, 0
1472   0DBB E7            pop d
1473   0DBC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1474   0DC0 E4            pop a
1475   0DC1 2A            mov b, [d]
1476   0DC2 38 00 00      mov c, 0
1477   0DC5             ; --- START RELATIONAL
1478   0DC5 D7            push a
1479   0DC6 11            mov a, b
1480   0DC7 FA FF FF      lea d, [bp + -1] ; $i
1481   0DCA 2A            mov b, [d]
1482   0DCB 38 00 00      mov c, 0
1483   0DCE             ; --- START FACTORS
1484   0DCE D7            push a
1485   0DCF FD D8         push g
1486   0DD1 11            mov a, b
1487   0DD2 FD 7A         mov g, c
1488   0DD4 FA FD FF      lea d, [bp + -3] ; $j
1489   0DD7 2A            mov b, [d]
1490   0DD8 38 00 00      mov c, 0
1491   0DDB D7            push a     ; save left operand
1492   0DDC 8E            xor a, b   ; xor sign bits
1493   0DDD FD AA         swp a      ; swap bytes
1494   0DDF 83            mov cl, al ; save result of xor into 'dl'
1495   0DE0 E4            pop a      ; restore left side operator
1496   0DE1 DF            push cl    ; save result of xor above
1497   0DE2 FD AA         swp a  
1498   0DE4 93 80         test al, $80  
1499   0DE6 FD AA         swp a  
1500   0DE8 C6 ED 0D      jz skip_invert_a_34  
1501   0DEB FD 95         neg a 
1502   0DED             skip_invert_a_34:   
1503   0DED FD AB         swp b
1504   0DEF FD 93 80      test bl, $80  
1505   0DF2 FD AB         swp b
1506   0DF4 C6 F9 0D      jz skip_invert_b_34  
1507   0DF7 FD 97         neg b 
1508   0DF9             skip_invert_b_34:   
1509   0DF9 AC            mul a, b ; *
1510   0DFA FD 78         mov g, a
1511   0DFC 11            mov a, b
1512   0DFD EA            pop bl
1513   0DFE FD 93 80      test bl, $80
1514   0E01 C6 0E 0E      jz _same_signs_34
1515   0E04 2F            mov bl, al
1516   0E05 95            not a
1517   0E06 FD 97         neg b
1518   0E08 5B 00 00      adc a, 0
1519   0E0B FD 78         mov g, a
1520   0E0D 11            mov a, b
1521   0E0E             _same_signs_34:
1522   0E0E FD 38         mov c, g
1523   0E10 27            mov b, a
1524   0E11 FD F1         pop g
1525   0E13 E4            pop a
1526   0E14             ; --- END FACTORS
1527   0E14 FD 22 00 00   mov g, 0
1528   0E18 FD AF         cmp32 ga, cb
1529   0E1A FD 72         sneq ; !=
1530   0E1C E4            pop a
1531   0E1D             ; --- END RELATIONAL
1532   0E1D C0 00 00      cmp b, 0
1533   0E20 C6 36 0E      je _if32_exit
1534   0E23             _if32_TRUE:
1535   0E23             ; pass = 0; 
1536   0E23 FA B0 FF      lea d, [bp + -80] ; $pass
1537   0E26 DA            push d
1538   0E27 FD 2E 00 00   mov32 cb, $00000000
1538   0E2B 00 00 
1539   0E2D E7            pop d
1540   0E2E FD 43         mov [d], b
1541   0E30             ; break; 
1542   0E30 0A 49 0E      jmp _for30_exit ; for break
1543   0E33 0A 36 0E      jmp _if32_exit
1544   0E36             _if32_exit:
1545   0E36             _for30_update:
1546   0E36 FA FD FF      lea d, [bp + -3] ; $j
1547   0E39 2A            mov b, [d]
1548   0E3A 38 00 00      mov c, 0
1549   0E3D 11            mov a, b
1550   0E3E FD 77         inc b
1551   0E40 FA FD FF      lea d, [bp + -3] ; $j
1552   0E43 FD 43         mov [d], b
1553   0E45 27            mov b, a
1554   0E46 0A 2E 0D      jmp _for30_cond
1555   0E49             _for30_exit:
1556   0E49             _for29_update:
1557   0E49 FA FF FF      lea d, [bp + -1] ; $i
1558   0E4C 2A            mov b, [d]
1559   0E4D 38 00 00      mov c, 0
1560   0E50 11            mov a, b
1561   0E51 FD 77         inc b
1562   0E53 FA FF FF      lea d, [bp + -1] ; $i
1563   0E56 FD 43         mov [d], b
1564   0E58 27            mov b, a
1565   0E59 0A 08 0D      jmp _for29_cond
1566   0E5C             _for29_exit:
1567   0E5C             ; return pass; 
1568   0E5C FA B0 FF      lea d, [bp + -80] ; $pass
1569   0E5F 2A            mov b, [d]
1570   0E60 38 00 00      mov c, 0
1571   0E63 F9            leave
1572   0E64 09            ret
1573   0E65             
1574   0E65             test4:
1575   0E65 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1576   0E68             ; int a, b, c; 
1577   0E68 52 02 00      sub sp, 2
1578   0E6B 52 02 00      sub sp, 2
1579   0E6E 52 02 00      sub sp, 2
1580   0E71             ; int result; 
1581   0E71 52 02 00      sub sp, 2
1582   0E74             ; int pass = 1; 
1583   0E74 52 02 00      sub sp, 2
1584   0E77             ; --- START LOCAL VAR INITIALIZATION
1585   0E77 FA F7 FF      lea d, [bp + -9] ; $pass
1586   0E7A DA            push d
1587   0E7B FD 2E 01 00   mov32 cb, $00000001
1587   0E7F 00 00 
1588   0E81 E7            pop d
1589   0E82 FD 43         mov [d], b
1590   0E84             ; --- END LOCAL VAR INITIALIZATION
1591   0E84             ; result = 1 && 1 && 1; 
1592   0E84 FA F9 FF      lea d, [bp + -7] ; $result
1593   0E87 DA            push d
1594   0E88 FD 2E 01 00   mov32 cb, $00000001
1594   0E8C 00 00 
1595   0E8E             ; --- START LOGICAL AND
1596   0E8E D7            push a
1597   0E8F 11            mov a, b
1598   0E90 FD 2E 01 00   mov32 cb, $00000001
1598   0E94 00 00 
1599   0E96 FD A7         sand a, b
1600   0E98 11            mov a, b
1601   0E99 FD 2E 01 00   mov32 cb, $00000001
1601   0E9D 00 00 
1602   0E9F FD A7         sand a, b
1603   0EA1 E4            pop a
1604   0EA2             ; --- END LOGICAL AND
1605   0EA2 E7            pop d
1606   0EA3 FD 43         mov [d], b
1607   0EA5             ; pass = pass && result == 1; 
1608   0EA5 FA F7 FF      lea d, [bp + -9] ; $pass
1609   0EA8 DA            push d
1610   0EA9 FA F7 FF      lea d, [bp + -9] ; $pass
1611   0EAC 2A            mov b, [d]
1612   0EAD 38 00 00      mov c, 0
1613   0EB0             ; --- START LOGICAL AND
1614   0EB0 D7            push a
1615   0EB1 11            mov a, b
1616   0EB2 FA F9 FF      lea d, [bp + -7] ; $result
1617   0EB5 2A            mov b, [d]
1618   0EB6 38 00 00      mov c, 0
1619   0EB9             ; --- START RELATIONAL
1620   0EB9 D7            push a
1621   0EBA 11            mov a, b
1622   0EBB FD 2E 01 00   mov32 cb, $00000001
1622   0EBF 00 00 
1623   0EC1 B0            cmp a, b
1624   0EC2 FD 71         seq ; ==
1625   0EC4 E4            pop a
1626   0EC5             ; --- END RELATIONAL
1627   0EC5 FD A7         sand a, b
1628   0EC7 E4            pop a
1629   0EC8             ; --- END LOGICAL AND
1630   0EC8 E7            pop d
1631   0EC9 FD 43         mov [d], b
1632   0ECB             ; result = 1 && 0 && 1; 
1633   0ECB FA F9 FF      lea d, [bp + -7] ; $result
1634   0ECE DA            push d
1635   0ECF FD 2E 01 00   mov32 cb, $00000001
1635   0ED3 00 00 
1636   0ED5             ; --- START LOGICAL AND
1637   0ED5 D7            push a
1638   0ED6 11            mov a, b
1639   0ED7 FD 2E 00 00   mov32 cb, $00000000
1639   0EDB 00 00 
1640   0EDD FD A7         sand a, b
1641   0EDF 11            mov a, b
1642   0EE0 FD 2E 01 00   mov32 cb, $00000001
1642   0EE4 00 00 
1643   0EE6 FD A7         sand a, b
1644   0EE8 E4            pop a
1645   0EE9             ; --- END LOGICAL AND
1646   0EE9 E7            pop d
1647   0EEA FD 43         mov [d], b
1648   0EEC             ; pass = pass && result == 0; 
1649   0EEC FA F7 FF      lea d, [bp + -9] ; $pass
1650   0EEF DA            push d
1651   0EF0 FA F7 FF      lea d, [bp + -9] ; $pass
1652   0EF3 2A            mov b, [d]
1653   0EF4 38 00 00      mov c, 0
1654   0EF7             ; --- START LOGICAL AND
1655   0EF7 D7            push a
1656   0EF8 11            mov a, b
1657   0EF9 FA F9 FF      lea d, [bp + -7] ; $result
1658   0EFC 2A            mov b, [d]
1659   0EFD 38 00 00      mov c, 0
1660   0F00             ; --- START RELATIONAL
1661   0F00 D7            push a
1662   0F01 11            mov a, b
1663   0F02 FD 2E 00 00   mov32 cb, $00000000
1663   0F06 00 00 
1664   0F08 B0            cmp a, b
1665   0F09 FD 71         seq ; ==
1666   0F0B E4            pop a
1667   0F0C             ; --- END RELATIONAL
1668   0F0C FD A7         sand a, b
1669   0F0E E4            pop a
1670   0F0F             ; --- END LOGICAL AND
1671   0F0F E7            pop d
1672   0F10 FD 43         mov [d], b
1673   0F12             ; result = 1 || 1 || 1; 
1674   0F12 FA F9 FF      lea d, [bp + -7] ; $result
1675   0F15 DA            push d
1676   0F16 FD 2E 01 00   mov32 cb, $00000001
1676   0F1A 00 00 
1677   0F1C             ; --- START LOGICAL OR
1678   0F1C D7            push a
1679   0F1D 11            mov a, b
1680   0F1E FD 2E 01 00   mov32 cb, $00000001
1680   0F22 00 00 
1681   0F24 FD A8         sor a, b ; ||
1682   0F26 11            mov a, b
1683   0F27 FD 2E 01 00   mov32 cb, $00000001
1683   0F2B 00 00 
1684   0F2D FD A8         sor a, b ; ||
1685   0F2F E4            pop a
1686   0F30             ; --- END LOGICAL OR
1687   0F30 E7            pop d
1688   0F31 FD 43         mov [d], b
1689   0F33             ; pass = pass && result == 1; 
1690   0F33 FA F7 FF      lea d, [bp + -9] ; $pass
1691   0F36 DA            push d
1692   0F37 FA F7 FF      lea d, [bp + -9] ; $pass
1693   0F3A 2A            mov b, [d]
1694   0F3B 38 00 00      mov c, 0
1695   0F3E             ; --- START LOGICAL AND
1696   0F3E D7            push a
1697   0F3F 11            mov a, b
1698   0F40 FA F9 FF      lea d, [bp + -7] ; $result
1699   0F43 2A            mov b, [d]
1700   0F44 38 00 00      mov c, 0
1701   0F47             ; --- START RELATIONAL
1702   0F47 D7            push a
1703   0F48 11            mov a, b
1704   0F49 FD 2E 01 00   mov32 cb, $00000001
1704   0F4D 00 00 
1705   0F4F B0            cmp a, b
1706   0F50 FD 71         seq ; ==
1707   0F52 E4            pop a
1708   0F53             ; --- END RELATIONAL
1709   0F53 FD A7         sand a, b
1710   0F55 E4            pop a
1711   0F56             ; --- END LOGICAL AND
1712   0F56 E7            pop d
1713   0F57 FD 43         mov [d], b
1714   0F59             ; result = 0 || 1 || 0; 
1715   0F59 FA F9 FF      lea d, [bp + -7] ; $result
1716   0F5C DA            push d
1717   0F5D FD 2E 00 00   mov32 cb, $00000000
1717   0F61 00 00 
1718   0F63             ; --- START LOGICAL OR
1719   0F63 D7            push a
1720   0F64 11            mov a, b
1721   0F65 FD 2E 01 00   mov32 cb, $00000001
1721   0F69 00 00 
1722   0F6B FD A8         sor a, b ; ||
1723   0F6D 11            mov a, b
1724   0F6E FD 2E 00 00   mov32 cb, $00000000
1724   0F72 00 00 
1725   0F74 FD A8         sor a, b ; ||
1726   0F76 E4            pop a
1727   0F77             ; --- END LOGICAL OR
1728   0F77 E7            pop d
1729   0F78 FD 43         mov [d], b
1730   0F7A             ; pass = pass && result == 1; 
1731   0F7A FA F7 FF      lea d, [bp + -9] ; $pass
1732   0F7D DA            push d
1733   0F7E FA F7 FF      lea d, [bp + -9] ; $pass
1734   0F81 2A            mov b, [d]
1735   0F82 38 00 00      mov c, 0
1736   0F85             ; --- START LOGICAL AND
1737   0F85 D7            push a
1738   0F86 11            mov a, b
1739   0F87 FA F9 FF      lea d, [bp + -7] ; $result
1740   0F8A 2A            mov b, [d]
1741   0F8B 38 00 00      mov c, 0
1742   0F8E             ; --- START RELATIONAL
1743   0F8E D7            push a
1744   0F8F 11            mov a, b
1745   0F90 FD 2E 01 00   mov32 cb, $00000001
1745   0F94 00 00 
1746   0F96 B0            cmp a, b
1747   0F97 FD 71         seq ; ==
1748   0F99 E4            pop a
1749   0F9A             ; --- END RELATIONAL
1750   0F9A FD A7         sand a, b
1751   0F9C E4            pop a
1752   0F9D             ; --- END LOGICAL AND
1753   0F9D E7            pop d
1754   0F9E FD 43         mov [d], b
1755   0FA0             ; result = 1 || 0 && 1; 
1756   0FA0 FA F9 FF      lea d, [bp + -7] ; $result
1757   0FA3 DA            push d
1758   0FA4 FD 2E 01 00   mov32 cb, $00000001
1758   0FA8 00 00 
1759   0FAA             ; --- START LOGICAL OR
1760   0FAA D7            push a
1761   0FAB 11            mov a, b
1762   0FAC FD 2E 00 00   mov32 cb, $00000000
1762   0FB0 00 00 
1763   0FB2             ; --- START LOGICAL AND
1764   0FB2 D7            push a
1765   0FB3 11            mov a, b
1766   0FB4 FD 2E 01 00   mov32 cb, $00000001
1766   0FB8 00 00 
1767   0FBA FD A7         sand a, b
1768   0FBC E4            pop a
1769   0FBD             ; --- END LOGICAL AND
1770   0FBD FD A8         sor a, b ; ||
1771   0FBF E4            pop a
1772   0FC0             ; --- END LOGICAL OR
1773   0FC0 E7            pop d
1774   0FC1 FD 43         mov [d], b
1775   0FC3             ; pass = pass && result == 1; 
1776   0FC3 FA F7 FF      lea d, [bp + -9] ; $pass
1777   0FC6 DA            push d
1778   0FC7 FA F7 FF      lea d, [bp + -9] ; $pass
1779   0FCA 2A            mov b, [d]
1780   0FCB 38 00 00      mov c, 0
1781   0FCE             ; --- START LOGICAL AND
1782   0FCE D7            push a
1783   0FCF 11            mov a, b
1784   0FD0 FA F9 FF      lea d, [bp + -7] ; $result
1785   0FD3 2A            mov b, [d]
1786   0FD4 38 00 00      mov c, 0
1787   0FD7             ; --- START RELATIONAL
1788   0FD7 D7            push a
1789   0FD8 11            mov a, b
1790   0FD9 FD 2E 01 00   mov32 cb, $00000001
1790   0FDD 00 00 
1791   0FDF B0            cmp a, b
1792   0FE0 FD 71         seq ; ==
1793   0FE2 E4            pop a
1794   0FE3             ; --- END RELATIONAL
1795   0FE3 FD A7         sand a, b
1796   0FE5 E4            pop a
1797   0FE6             ; --- END LOGICAL AND
1798   0FE6 E7            pop d
1799   0FE7 FD 43         mov [d], b
1800   0FE9             ; result = 0 || 0 || 0; 
1801   0FE9 FA F9 FF      lea d, [bp + -7] ; $result
1802   0FEC DA            push d
1803   0FED FD 2E 00 00   mov32 cb, $00000000
1803   0FF1 00 00 
1804   0FF3             ; --- START LOGICAL OR
1805   0FF3 D7            push a
1806   0FF4 11            mov a, b
1807   0FF5 FD 2E 00 00   mov32 cb, $00000000
1807   0FF9 00 00 
1808   0FFB FD A8         sor a, b ; ||
1809   0FFD 11            mov a, b
1810   0FFE FD 2E 00 00   mov32 cb, $00000000
1810   1002 00 00 
1811   1004 FD A8         sor a, b ; ||
1812   1006 E4            pop a
1813   1007             ; --- END LOGICAL OR
1814   1007 E7            pop d
1815   1008 FD 43         mov [d], b
1816   100A             ; pass = pass && result == 0; 
1817   100A FA F7 FF      lea d, [bp + -9] ; $pass
1818   100D DA            push d
1819   100E FA F7 FF      lea d, [bp + -9] ; $pass
1820   1011 2A            mov b, [d]
1821   1012 38 00 00      mov c, 0
1822   1015             ; --- START LOGICAL AND
1823   1015 D7            push a
1824   1016 11            mov a, b
1825   1017 FA F9 FF      lea d, [bp + -7] ; $result
1826   101A 2A            mov b, [d]
1827   101B 38 00 00      mov c, 0
1828   101E             ; --- START RELATIONAL
1829   101E D7            push a
1830   101F 11            mov a, b
1831   1020 FD 2E 00 00   mov32 cb, $00000000
1831   1024 00 00 
1832   1026 B0            cmp a, b
1833   1027 FD 71         seq ; ==
1834   1029 E4            pop a
1835   102A             ; --- END RELATIONAL
1836   102A FD A7         sand a, b
1837   102C E4            pop a
1838   102D             ; --- END LOGICAL AND
1839   102D E7            pop d
1840   102E FD 43         mov [d], b
1841   1030             ; a = 1; b = 1; c = 1; 
1842   1030 FA FF FF      lea d, [bp + -1] ; $a
1843   1033 DA            push d
1844   1034 FD 2E 01 00   mov32 cb, $00000001
1844   1038 00 00 
1845   103A E7            pop d
1846   103B FD 43         mov [d], b
1847   103D             ; b = 1; c = 1; 
1848   103D FA FD FF      lea d, [bp + -3] ; $b
1849   1040 DA            push d
1850   1041 FD 2E 01 00   mov32 cb, $00000001
1850   1045 00 00 
1851   1047 E7            pop d
1852   1048 FD 43         mov [d], b
1853   104A             ; c = 1; 
1854   104A FA FB FF      lea d, [bp + -5] ; $c
1855   104D DA            push d
1856   104E FD 2E 01 00   mov32 cb, $00000001
1856   1052 00 00 
1857   1054 E7            pop d
1858   1055 FD 43         mov [d], b
1859   1057             ; result = a && b && c; 
1860   1057 FA F9 FF      lea d, [bp + -7] ; $result
1861   105A DA            push d
1862   105B FA FF FF      lea d, [bp + -1] ; $a
1863   105E 2A            mov b, [d]
1864   105F 38 00 00      mov c, 0
1865   1062             ; --- START LOGICAL AND
1866   1062 D7            push a
1867   1063 11            mov a, b
1868   1064 FA FD FF      lea d, [bp + -3] ; $b
1869   1067 2A            mov b, [d]
1870   1068 38 00 00      mov c, 0
1871   106B FD A7         sand a, b
1872   106D 11            mov a, b
1873   106E FA FB FF      lea d, [bp + -5] ; $c
1874   1071 2A            mov b, [d]
1875   1072 38 00 00      mov c, 0
1876   1075 FD A7         sand a, b
1877   1077 E4            pop a
1878   1078             ; --- END LOGICAL AND
1879   1078 E7            pop d
1880   1079 FD 43         mov [d], b
1881   107B             ; pass = pass && result == 1; 
1882   107B FA F7 FF      lea d, [bp + -9] ; $pass
1883   107E DA            push d
1884   107F FA F7 FF      lea d, [bp + -9] ; $pass
1885   1082 2A            mov b, [d]
1886   1083 38 00 00      mov c, 0
1887   1086             ; --- START LOGICAL AND
1888   1086 D7            push a
1889   1087 11            mov a, b
1890   1088 FA F9 FF      lea d, [bp + -7] ; $result
1891   108B 2A            mov b, [d]
1892   108C 38 00 00      mov c, 0
1893   108F             ; --- START RELATIONAL
1894   108F D7            push a
1895   1090 11            mov a, b
1896   1091 FD 2E 01 00   mov32 cb, $00000001
1896   1095 00 00 
1897   1097 B0            cmp a, b
1898   1098 FD 71         seq ; ==
1899   109A E4            pop a
1900   109B             ; --- END RELATIONAL
1901   109B FD A7         sand a, b
1902   109D E4            pop a
1903   109E             ; --- END LOGICAL AND
1904   109E E7            pop d
1905   109F FD 43         mov [d], b
1906   10A1             ; a = 1; b = 0; c = 1; 
1907   10A1 FA FF FF      lea d, [bp + -1] ; $a
1908   10A4 DA            push d
1909   10A5 FD 2E 01 00   mov32 cb, $00000001
1909   10A9 00 00 
1910   10AB E7            pop d
1911   10AC FD 43         mov [d], b
1912   10AE             ; b = 0; c = 1; 
1913   10AE FA FD FF      lea d, [bp + -3] ; $b
1914   10B1 DA            push d
1915   10B2 FD 2E 00 00   mov32 cb, $00000000
1915   10B6 00 00 
1916   10B8 E7            pop d
1917   10B9 FD 43         mov [d], b
1918   10BB             ; c = 1; 
1919   10BB FA FB FF      lea d, [bp + -5] ; $c
1920   10BE DA            push d
1921   10BF FD 2E 01 00   mov32 cb, $00000001
1921   10C3 00 00 
1922   10C5 E7            pop d
1923   10C6 FD 43         mov [d], b
1924   10C8             ; result = a && b && c; 
1925   10C8 FA F9 FF      lea d, [bp + -7] ; $result
1926   10CB DA            push d
1927   10CC FA FF FF      lea d, [bp + -1] ; $a
1928   10CF 2A            mov b, [d]
1929   10D0 38 00 00      mov c, 0
1930   10D3             ; --- START LOGICAL AND
1931   10D3 D7            push a
1932   10D4 11            mov a, b
1933   10D5 FA FD FF      lea d, [bp + -3] ; $b
1934   10D8 2A            mov b, [d]
1935   10D9 38 00 00      mov c, 0
1936   10DC FD A7         sand a, b
1937   10DE 11            mov a, b
1938   10DF FA FB FF      lea d, [bp + -5] ; $c
1939   10E2 2A            mov b, [d]
1940   10E3 38 00 00      mov c, 0
1941   10E6 FD A7         sand a, b
1942   10E8 E4            pop a
1943   10E9             ; --- END LOGICAL AND
1944   10E9 E7            pop d
1945   10EA FD 43         mov [d], b
1946   10EC             ; pass = pass && result == 0; 
1947   10EC FA F7 FF      lea d, [bp + -9] ; $pass
1948   10EF DA            push d
1949   10F0 FA F7 FF      lea d, [bp + -9] ; $pass
1950   10F3 2A            mov b, [d]
1951   10F4 38 00 00      mov c, 0
1952   10F7             ; --- START LOGICAL AND
1953   10F7 D7            push a
1954   10F8 11            mov a, b
1955   10F9 FA F9 FF      lea d, [bp + -7] ; $result
1956   10FC 2A            mov b, [d]
1957   10FD 38 00 00      mov c, 0
1958   1100             ; --- START RELATIONAL
1959   1100 D7            push a
1960   1101 11            mov a, b
1961   1102 FD 2E 00 00   mov32 cb, $00000000
1961   1106 00 00 
1962   1108 B0            cmp a, b
1963   1109 FD 71         seq ; ==
1964   110B E4            pop a
1965   110C             ; --- END RELATIONAL
1966   110C FD A7         sand a, b
1967   110E E4            pop a
1968   110F             ; --- END LOGICAL AND
1969   110F E7            pop d
1970   1110 FD 43         mov [d], b
1971   1112             ; a = 1; b = 1; c = 1; 
1972   1112 FA FF FF      lea d, [bp + -1] ; $a
1973   1115 DA            push d
1974   1116 FD 2E 01 00   mov32 cb, $00000001
1974   111A 00 00 
1975   111C E7            pop d
1976   111D FD 43         mov [d], b
1977   111F             ; b = 1; c = 1; 
1978   111F FA FD FF      lea d, [bp + -3] ; $b
1979   1122 DA            push d
1980   1123 FD 2E 01 00   mov32 cb, $00000001
1980   1127 00 00 
1981   1129 E7            pop d
1982   112A FD 43         mov [d], b
1983   112C             ; c = 1; 
1984   112C FA FB FF      lea d, [bp + -5] ; $c
1985   112F DA            push d
1986   1130 FD 2E 01 00   mov32 cb, $00000001
1986   1134 00 00 
1987   1136 E7            pop d
1988   1137 FD 43         mov [d], b
1989   1139             ; result = a || b || b; 
1990   1139 FA F9 FF      lea d, [bp + -7] ; $result
1991   113C DA            push d
1992   113D FA FF FF      lea d, [bp + -1] ; $a
1993   1140 2A            mov b, [d]
1994   1141 38 00 00      mov c, 0
1995   1144             ; --- START LOGICAL OR
1996   1144 D7            push a
1997   1145 11            mov a, b
1998   1146 FA FD FF      lea d, [bp + -3] ; $b
1999   1149 2A            mov b, [d]
2000   114A 38 00 00      mov c, 0
2001   114D FD A8         sor a, b ; ||
2002   114F 11            mov a, b
2003   1150 FA FD FF      lea d, [bp + -3] ; $b
2004   1153 2A            mov b, [d]
2005   1154 38 00 00      mov c, 0
2006   1157 FD A8         sor a, b ; ||
2007   1159 E4            pop a
2008   115A             ; --- END LOGICAL OR
2009   115A E7            pop d
2010   115B FD 43         mov [d], b
2011   115D             ; pass = pass && result == 1; 
2012   115D FA F7 FF      lea d, [bp + -9] ; $pass
2013   1160 DA            push d
2014   1161 FA F7 FF      lea d, [bp + -9] ; $pass
2015   1164 2A            mov b, [d]
2016   1165 38 00 00      mov c, 0
2017   1168             ; --- START LOGICAL AND
2018   1168 D7            push a
2019   1169 11            mov a, b
2020   116A FA F9 FF      lea d, [bp + -7] ; $result
2021   116D 2A            mov b, [d]
2022   116E 38 00 00      mov c, 0
2023   1171             ; --- START RELATIONAL
2024   1171 D7            push a
2025   1172 11            mov a, b
2026   1173 FD 2E 01 00   mov32 cb, $00000001
2026   1177 00 00 
2027   1179 B0            cmp a, b
2028   117A FD 71         seq ; ==
2029   117C E4            pop a
2030   117D             ; --- END RELATIONAL
2031   117D FD A7         sand a, b
2032   117F E4            pop a
2033   1180             ; --- END LOGICAL AND
2034   1180 E7            pop d
2035   1181 FD 43         mov [d], b
2036   1183             ; a = 0; b = 1; c = 0; 
2037   1183 FA FF FF      lea d, [bp + -1] ; $a
2038   1186 DA            push d
2039   1187 FD 2E 00 00   mov32 cb, $00000000
2039   118B 00 00 
2040   118D E7            pop d
2041   118E FD 43         mov [d], b
2042   1190             ; b = 1; c = 0; 
2043   1190 FA FD FF      lea d, [bp + -3] ; $b
2044   1193 DA            push d
2045   1194 FD 2E 01 00   mov32 cb, $00000001
2045   1198 00 00 
2046   119A E7            pop d
2047   119B FD 43         mov [d], b
2048   119D             ; c = 0; 
2049   119D FA FB FF      lea d, [bp + -5] ; $c
2050   11A0 DA            push d
2051   11A1 FD 2E 00 00   mov32 cb, $00000000
2051   11A5 00 00 
2052   11A7 E7            pop d
2053   11A8 FD 43         mov [d], b
2054   11AA             ; result = a || b || b; 
2055   11AA FA F9 FF      lea d, [bp + -7] ; $result
2056   11AD DA            push d
2057   11AE FA FF FF      lea d, [bp + -1] ; $a
2058   11B1 2A            mov b, [d]
2059   11B2 38 00 00      mov c, 0
2060   11B5             ; --- START LOGICAL OR
2061   11B5 D7            push a
2062   11B6 11            mov a, b
2063   11B7 FA FD FF      lea d, [bp + -3] ; $b
2064   11BA 2A            mov b, [d]
2065   11BB 38 00 00      mov c, 0
2066   11BE FD A8         sor a, b ; ||
2067   11C0 11            mov a, b
2068   11C1 FA FD FF      lea d, [bp + -3] ; $b
2069   11C4 2A            mov b, [d]
2070   11C5 38 00 00      mov c, 0
2071   11C8 FD A8         sor a, b ; ||
2072   11CA E4            pop a
2073   11CB             ; --- END LOGICAL OR
2074   11CB E7            pop d
2075   11CC FD 43         mov [d], b
2076   11CE             ; pass = pass && result == 1; 
2077   11CE FA F7 FF      lea d, [bp + -9] ; $pass
2078   11D1 DA            push d
2079   11D2 FA F7 FF      lea d, [bp + -9] ; $pass
2080   11D5 2A            mov b, [d]
2081   11D6 38 00 00      mov c, 0
2082   11D9             ; --- START LOGICAL AND
2083   11D9 D7            push a
2084   11DA 11            mov a, b
2085   11DB FA F9 FF      lea d, [bp + -7] ; $result
2086   11DE 2A            mov b, [d]
2087   11DF 38 00 00      mov c, 0
2088   11E2             ; --- START RELATIONAL
2089   11E2 D7            push a
2090   11E3 11            mov a, b
2091   11E4 FD 2E 01 00   mov32 cb, $00000001
2091   11E8 00 00 
2092   11EA B0            cmp a, b
2093   11EB FD 71         seq ; ==
2094   11ED E4            pop a
2095   11EE             ; --- END RELATIONAL
2096   11EE FD A7         sand a, b
2097   11F0 E4            pop a
2098   11F1             ; --- END LOGICAL AND
2099   11F1 E7            pop d
2100   11F2 FD 43         mov [d], b
2101   11F4             ; a = 1; b = 0; c = 1; 
2102   11F4 FA FF FF      lea d, [bp + -1] ; $a
2103   11F7 DA            push d
2104   11F8 FD 2E 01 00   mov32 cb, $00000001
2104   11FC 00 00 
2105   11FE E7            pop d
2106   11FF FD 43         mov [d], b
2107   1201             ; b = 0; c = 1; 
2108   1201 FA FD FF      lea d, [bp + -3] ; $b
2109   1204 DA            push d
2110   1205 FD 2E 00 00   mov32 cb, $00000000
2110   1209 00 00 
2111   120B E7            pop d
2112   120C FD 43         mov [d], b
2113   120E             ; c = 1; 
2114   120E FA FB FF      lea d, [bp + -5] ; $c
2115   1211 DA            push d
2116   1212 FD 2E 01 00   mov32 cb, $00000001
2116   1216 00 00 
2117   1218 E7            pop d
2118   1219 FD 43         mov [d], b
2119   121B             ; result = a || b && b; 
2120   121B FA F9 FF      lea d, [bp + -7] ; $result
2121   121E DA            push d
2122   121F FA FF FF      lea d, [bp + -1] ; $a
2123   1222 2A            mov b, [d]
2124   1223 38 00 00      mov c, 0
2125   1226             ; --- START LOGICAL OR
2126   1226 D7            push a
2127   1227 11            mov a, b
2128   1228 FA FD FF      lea d, [bp + -3] ; $b
2129   122B 2A            mov b, [d]
2130   122C 38 00 00      mov c, 0
2131   122F             ; --- START LOGICAL AND
2132   122F D7            push a
2133   1230 11            mov a, b
2134   1231 FA FD FF      lea d, [bp + -3] ; $b
2135   1234 2A            mov b, [d]
2136   1235 38 00 00      mov c, 0
2137   1238 FD A7         sand a, b
2138   123A E4            pop a
2139   123B             ; --- END LOGICAL AND
2140   123B FD A8         sor a, b ; ||
2141   123D E4            pop a
2142   123E             ; --- END LOGICAL OR
2143   123E E7            pop d
2144   123F FD 43         mov [d], b
2145   1241             ; pass = pass && result == 1; 
2146   1241 FA F7 FF      lea d, [bp + -9] ; $pass
2147   1244 DA            push d
2148   1245 FA F7 FF      lea d, [bp + -9] ; $pass
2149   1248 2A            mov b, [d]
2150   1249 38 00 00      mov c, 0
2151   124C             ; --- START LOGICAL AND
2152   124C D7            push a
2153   124D 11            mov a, b
2154   124E FA F9 FF      lea d, [bp + -7] ; $result
2155   1251 2A            mov b, [d]
2156   1252 38 00 00      mov c, 0
2157   1255             ; --- START RELATIONAL
2158   1255 D7            push a
2159   1256 11            mov a, b
2160   1257 FD 2E 01 00   mov32 cb, $00000001
2160   125B 00 00 
2161   125D B0            cmp a, b
2162   125E FD 71         seq ; ==
2163   1260 E4            pop a
2164   1261             ; --- END RELATIONAL
2165   1261 FD A7         sand a, b
2166   1263 E4            pop a
2167   1264             ; --- END LOGICAL AND
2168   1264 E7            pop d
2169   1265 FD 43         mov [d], b
2170   1267             ; a = 0; b = 0; c = 0; 
2171   1267 FA FF FF      lea d, [bp + -1] ; $a
2172   126A DA            push d
2173   126B FD 2E 00 00   mov32 cb, $00000000
2173   126F 00 00 
2174   1271 E7            pop d
2175   1272 FD 43         mov [d], b
2176   1274             ; b = 0; c = 0; 
2177   1274 FA FD FF      lea d, [bp + -3] ; $b
2178   1277 DA            push d
2179   1278 FD 2E 00 00   mov32 cb, $00000000
2179   127C 00 00 
2180   127E E7            pop d
2181   127F FD 43         mov [d], b
2182   1281             ; c = 0; 
2183   1281 FA FB FF      lea d, [bp + -5] ; $c
2184   1284 DA            push d
2185   1285 FD 2E 00 00   mov32 cb, $00000000
2185   1289 00 00 
2186   128B E7            pop d
2187   128C FD 43         mov [d], b
2188   128E             ; result = a || b || b; 
2189   128E FA F9 FF      lea d, [bp + -7] ; $result
2190   1291 DA            push d
2191   1292 FA FF FF      lea d, [bp + -1] ; $a
2192   1295 2A            mov b, [d]
2193   1296 38 00 00      mov c, 0
2194   1299             ; --- START LOGICAL OR
2195   1299 D7            push a
2196   129A 11            mov a, b
2197   129B FA FD FF      lea d, [bp + -3] ; $b
2198   129E 2A            mov b, [d]
2199   129F 38 00 00      mov c, 0
2200   12A2 FD A8         sor a, b ; ||
2201   12A4 11            mov a, b
2202   12A5 FA FD FF      lea d, [bp + -3] ; $b
2203   12A8 2A            mov b, [d]
2204   12A9 38 00 00      mov c, 0
2205   12AC FD A8         sor a, b ; ||
2206   12AE E4            pop a
2207   12AF             ; --- END LOGICAL OR
2208   12AF E7            pop d
2209   12B0 FD 43         mov [d], b
2210   12B2             ; pass = pass && result == 0; 
2211   12B2 FA F7 FF      lea d, [bp + -9] ; $pass
2212   12B5 DA            push d
2213   12B6 FA F7 FF      lea d, [bp + -9] ; $pass
2214   12B9 2A            mov b, [d]
2215   12BA 38 00 00      mov c, 0
2216   12BD             ; --- START LOGICAL AND
2217   12BD D7            push a
2218   12BE 11            mov a, b
2219   12BF FA F9 FF      lea d, [bp + -7] ; $result
2220   12C2 2A            mov b, [d]
2221   12C3 38 00 00      mov c, 0
2222   12C6             ; --- START RELATIONAL
2223   12C6 D7            push a
2224   12C7 11            mov a, b
2225   12C8 FD 2E 00 00   mov32 cb, $00000000
2225   12CC 00 00 
2226   12CE B0            cmp a, b
2227   12CF FD 71         seq ; ==
2228   12D1 E4            pop a
2229   12D2             ; --- END RELATIONAL
2230   12D2 FD A7         sand a, b
2231   12D4 E4            pop a
2232   12D5             ; --- END LOGICAL AND
2233   12D5 E7            pop d
2234   12D6 FD 43         mov [d], b
2235   12D8             ; return pass; 
2236   12D8 FA F7 FF      lea d, [bp + -9] ; $pass
2237   12DB 2A            mov b, [d]
2238   12DC 38 00 00      mov c, 0
2239   12DF F9            leave
2240   12E0 09            ret
2241   12E1             
2242   12E1             test5:
2243   12E1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2244   12E4             ; int pass; 
2245   12E4 52 02 00      sub sp, 2
2246   12E7             ; int i, j, k; 
2247   12E7 52 02 00      sub sp, 2
2248   12EA 52 02 00      sub sp, 2
2249   12ED 52 02 00      sub sp, 2
2250   12F0             ; int a1[5]; 
2251   12F0 52 0A 00      sub sp, 10
2252   12F3             ; int a2[5]; 
2253   12F3 52 0A 00      sub sp, 10
2254   12F6             ; int a3[5]; 
2255   12F6 52 0A 00      sub sp, 10
2256   12F9             ; i = 1; 
2257   12F9 FA FD FF      lea d, [bp + -3] ; $i
2258   12FC DA            push d
2259   12FD FD 2E 01 00   mov32 cb, $00000001
2259   1301 00 00 
2260   1303 E7            pop d
2261   1304 FD 43         mov [d], b
2262   1306             ; j = 1; 
2263   1306 FA FB FF      lea d, [bp + -5] ; $j
2264   1309 DA            push d
2265   130A FD 2E 01 00   mov32 cb, $00000001
2265   130E 00 00 
2266   1310 E7            pop d
2267   1311 FD 43         mov [d], b
2268   1313             ; k = 1; 
2269   1313 FA F9 FF      lea d, [bp + -7] ; $k
2270   1316 DA            push d
2271   1317 FD 2E 01 00   mov32 cb, $00000001
2271   131B 00 00 
2272   131D E7            pop d
2273   131E FD 43         mov [d], b
2274   1320             ; a1[3] = 1; 
2275   1320 FA EF FF      lea d, [bp + -17] ; $a1
2276   1323 D7            push a
2277   1324 DA            push d
2278   1325 FD 2E 03 00   mov32 cb, $00000003
2278   1329 00 00 
2279   132B E7            pop d
2280   132C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2281   1330 E4            pop a
2282   1331 DA            push d
2283   1332 FD 2E 01 00   mov32 cb, $00000001
2283   1336 00 00 
2284   1338 E7            pop d
2285   1339 FD 43         mov [d], b
2286   133B             ; a2[2] = 1; 
2287   133B FA E5 FF      lea d, [bp + -27] ; $a2
2288   133E D7            push a
2289   133F DA            push d
2290   1340 FD 2E 02 00   mov32 cb, $00000002
2290   1344 00 00 
2291   1346 E7            pop d
2292   1347 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2293   134B E4            pop a
2294   134C DA            push d
2295   134D FD 2E 01 00   mov32 cb, $00000001
2295   1351 00 00 
2296   1353 E7            pop d
2297   1354 FD 43         mov [d], b
2298   1356             ; a3[a2[a1[i + j + (k && 1) + (1 && 0)] + (i && 1)] + (0 || j)] = 56; 
2299   1356 FA DB FF      lea d, [bp + -37] ; $a3
2300   1359 D7            push a
2301   135A DA            push d
2302   135B FA E5 FF      lea d, [bp + -27] ; $a2
2303   135E D7            push a
2304   135F DA            push d
2305   1360 FA EF FF      lea d, [bp + -17] ; $a1
2306   1363 D7            push a
2307   1364 DA            push d
2308   1365 FA FD FF      lea d, [bp + -3] ; $i
2309   1368 2A            mov b, [d]
2310   1369 38 00 00      mov c, 0
2311   136C             ; --- START TERMS
2312   136C D7            push a
2313   136D 11            mov a, b
2314   136E FA FB FF      lea d, [bp + -5] ; $j
2315   1371 2A            mov b, [d]
2316   1372 38 00 00      mov c, 0
2317   1375 56            add b, a
2318   1376 11            mov a, b
2319   1377 FA F9 FF      lea d, [bp + -7] ; $k
2320   137A 2A            mov b, [d]
2321   137B 38 00 00      mov c, 0
2322   137E             ; --- START LOGICAL AND
2323   137E D7            push a
2324   137F 11            mov a, b
2325   1380 FD 2E 01 00   mov32 cb, $00000001
2325   1384 00 00 
2326   1386 FD A7         sand a, b
2327   1388 E4            pop a
2328   1389             ; --- END LOGICAL AND
2329   1389 56            add b, a
2330   138A 11            mov a, b
2331   138B FD 2E 01 00   mov32 cb, $00000001
2331   138F 00 00 
2332   1391             ; --- START LOGICAL AND
2333   1391 D7            push a
2334   1392 11            mov a, b
2335   1393 FD 2E 00 00   mov32 cb, $00000000
2335   1397 00 00 
2336   1399 FD A7         sand a, b
2337   139B E4            pop a
2338   139C             ; --- END LOGICAL AND
2339   139C 56            add b, a
2340   139D E4            pop a
2341   139E             ; --- END TERMS
2342   139E E7            pop d
2343   139F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2344   13A3 E4            pop a
2345   13A4 2A            mov b, [d]
2346   13A5 38 00 00      mov c, 0
2347   13A8             ; --- START TERMS
2348   13A8 D7            push a
2349   13A9 11            mov a, b
2350   13AA FA FD FF      lea d, [bp + -3] ; $i
2351   13AD 2A            mov b, [d]
2352   13AE 38 00 00      mov c, 0
2353   13B1             ; --- START LOGICAL AND
2354   13B1 D7            push a
2355   13B2 11            mov a, b
2356   13B3 FD 2E 01 00   mov32 cb, $00000001
2356   13B7 00 00 
2357   13B9 FD A7         sand a, b
2358   13BB E4            pop a
2359   13BC             ; --- END LOGICAL AND
2360   13BC 56            add b, a
2361   13BD E4            pop a
2362   13BE             ; --- END TERMS
2363   13BE E7            pop d
2364   13BF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2365   13C3 E4            pop a
2366   13C4 2A            mov b, [d]
2367   13C5 38 00 00      mov c, 0
2368   13C8             ; --- START TERMS
2369   13C8 D7            push a
2370   13C9 11            mov a, b
2371   13CA FD 2E 00 00   mov32 cb, $00000000
2371   13CE 00 00 
2372   13D0             ; --- START LOGICAL OR
2373   13D0 D7            push a
2374   13D1 11            mov a, b
2375   13D2 FA FB FF      lea d, [bp + -5] ; $j
2376   13D5 2A            mov b, [d]
2377   13D6 38 00 00      mov c, 0
2378   13D9 FD A8         sor a, b ; ||
2379   13DB E4            pop a
2380   13DC             ; --- END LOGICAL OR
2381   13DC 56            add b, a
2382   13DD E4            pop a
2383   13DE             ; --- END TERMS
2384   13DE E7            pop d
2385   13DF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2386   13E3 E4            pop a
2387   13E4 DA            push d
2388   13E5 FD 2E 38 00   mov32 cb, $00000038
2388   13E9 00 00 
2389   13EB E7            pop d
2390   13EC FD 43         mov [d], b
2391   13EE             ; pass = a3[2] == 56; 
2392   13EE FA FF FF      lea d, [bp + -1] ; $pass
2393   13F1 DA            push d
2394   13F2 FA DB FF      lea d, [bp + -37] ; $a3
2395   13F5 D7            push a
2396   13F6 DA            push d
2397   13F7 FD 2E 02 00   mov32 cb, $00000002
2397   13FB 00 00 
2398   13FD E7            pop d
2399   13FE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2400   1402 E4            pop a
2401   1403 2A            mov b, [d]
2402   1404 38 00 00      mov c, 0
2403   1407             ; --- START RELATIONAL
2404   1407 D7            push a
2405   1408 11            mov a, b
2406   1409 FD 2E 38 00   mov32 cb, $00000038
2406   140D 00 00 
2407   140F B0            cmp a, b
2408   1410 FD 71         seq ; ==
2409   1412 E4            pop a
2410   1413             ; --- END RELATIONAL
2411   1413 E7            pop d
2412   1414 FD 43         mov [d], b
2413   1416             ; return pass; 
2414   1416 FA FF FF      lea d, [bp + -1] ; $pass
2415   1419 2A            mov b, [d]
2416   141A 38 00 00      mov c, 0
2417   141D F9            leave
2418   141E 09            ret
2419   141F             
2420   141F             test6:
2421   141F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2422   1422             ; int pass = 1; 
2423   1422 52 02 00      sub sp, 2
2424   1425             ; --- START LOCAL VAR INITIALIZATION
2425   1425 FA FF FF      lea d, [bp + -1] ; $pass
2426   1428 DA            push d
2427   1429 FD 2E 01 00   mov32 cb, $00000001
2427   142D 00 00 
2428   142F E7            pop d
2429   1430 FD 43         mov [d], b
2430   1432             ; --- END LOCAL VAR INITIALIZATION
2431   1432             ; int i, j, k; 
2432   1432 52 02 00      sub sp, 2
2433   1435 52 02 00      sub sp, 2
2434   1438 52 02 00      sub sp, 2
2435   143B             ; test6_struct.c1 = 'A'; 
2436   143B 3B A7 24      mov d, _test6_struct_data ; $test6_struct
2437   143E 58 00 00      add d, 0
2438   1441 DA            push d
2439   1442 FD 2E 41 00   mov32 cb, $00000041
2439   1446 00 00 
2440   1448 E7            pop d
2441   1449 FD 3E         mov [d], bl
2442   144B             ; pass = pass && test6_struct.c1 == 'A'; 
2443   144B FA FF FF      lea d, [bp + -1] ; $pass
2444   144E DA            push d
2445   144F FA FF FF      lea d, [bp + -1] ; $pass
2446   1452 2A            mov b, [d]
2447   1453 38 00 00      mov c, 0
2448   1456             ; --- START LOGICAL AND
2449   1456 D7            push a
2450   1457 11            mov a, b
2451   1458 3B A7 24      mov d, _test6_struct_data ; $test6_struct
2452   145B 58 00 00      add d, 0
2453   145E 32            mov bl, [d]
2454   145F A7 00         mov bh, 0
2455   1461 38 00 00      mov c, 0
2456   1464             ; --- START RELATIONAL
2457   1464 D7            push a
2458   1465 11            mov a, b
2459   1466 FD 2E 41 00   mov32 cb, $00000041
2459   146A 00 00 
2460   146C B0            cmp a, b
2461   146D FD 71         seq ; ==
2462   146F E4            pop a
2463   1470             ; --- END RELATIONAL
2464   1470 FD A7         sand a, b
2465   1472 E4            pop a
2466   1473             ; --- END LOGICAL AND
2467   1473 E7            pop d
2468   1474 FD 43         mov [d], b
2469   1476             ; for(i = 0; i < 5; i++){ 
2470   1476             _for35_init:
2471   1476 FA FD FF      lea d, [bp + -3] ; $i
2472   1479 DA            push d
2473   147A FD 2E 00 00   mov32 cb, $00000000
2473   147E 00 00 
2474   1480 E7            pop d
2475   1481 FD 43         mov [d], b
2476   1483             _for35_cond:
2477   1483 FA FD FF      lea d, [bp + -3] ; $i
2478   1486 2A            mov b, [d]
2479   1487 38 00 00      mov c, 0
2480   148A             ; --- START RELATIONAL
2481   148A D7            push a
2482   148B 11            mov a, b
2483   148C FD 2E 05 00   mov32 cb, $00000005
2483   1490 00 00 
2484   1492 B0            cmp a, b
2485   1493 FD 73         slt ; < (signed)
2486   1495 E4            pop a
2487   1496             ; --- END RELATIONAL
2488   1496 C0 00 00      cmp b, 0
2489   1499 C6 04 15      je _for35_exit
2490   149C             _for35_block:
2491   149C             ; test6_struct.ca[i] = i; 
2492   149C 3B A7 24      mov d, _test6_struct_data ; $test6_struct
2493   149F 58 01 00      add d, 1
2494   14A2 D7            push a
2495   14A3 DA            push d
2496   14A4 FA FD FF      lea d, [bp + -3] ; $i
2497   14A7 2A            mov b, [d]
2498   14A8 38 00 00      mov c, 0
2499   14AB E7            pop d
2500   14AC 5A            add d, b
2501   14AD E4            pop a
2502   14AE DA            push d
2503   14AF FA FD FF      lea d, [bp + -3] ; $i
2504   14B2 2A            mov b, [d]
2505   14B3 38 00 00      mov c, 0
2506   14B6 E7            pop d
2507   14B7 FD 3E         mov [d], bl
2508   14B9             ; pass = pass && test6_struct.ca[i] == i; 
2509   14B9 FA FF FF      lea d, [bp + -1] ; $pass
2510   14BC DA            push d
2511   14BD FA FF FF      lea d, [bp + -1] ; $pass
2512   14C0 2A            mov b, [d]
2513   14C1 38 00 00      mov c, 0
2514   14C4             ; --- START LOGICAL AND
2515   14C4 D7            push a
2516   14C5 11            mov a, b
2517   14C6 3B A7 24      mov d, _test6_struct_data ; $test6_struct
2518   14C9 58 01 00      add d, 1
2519   14CC D7            push a
2520   14CD DA            push d
2521   14CE FA FD FF      lea d, [bp + -3] ; $i
2522   14D1 2A            mov b, [d]
2523   14D2 38 00 00      mov c, 0
2524   14D5 E7            pop d
2525   14D6 5A            add d, b
2526   14D7 E4            pop a
2527   14D8 32            mov bl, [d]
2528   14D9 A7 00         mov bh, 0
2529   14DB 38 00 00      mov c, 0
2530   14DE             ; --- START RELATIONAL
2531   14DE D7            push a
2532   14DF 11            mov a, b
2533   14E0 FA FD FF      lea d, [bp + -3] ; $i
2534   14E3 2A            mov b, [d]
2535   14E4 38 00 00      mov c, 0
2536   14E7 B0            cmp a, b
2537   14E8 FD 71         seq ; ==
2538   14EA E4            pop a
2539   14EB             ; --- END RELATIONAL
2540   14EB FD A7         sand a, b
2541   14ED E4            pop a
2542   14EE             ; --- END LOGICAL AND
2543   14EE E7            pop d
2544   14EF FD 43         mov [d], b
2545   14F1             _for35_update:
2546   14F1 FA FD FF      lea d, [bp + -3] ; $i
2547   14F4 2A            mov b, [d]
2548   14F5 38 00 00      mov c, 0
2549   14F8 11            mov a, b
2550   14F9 FD 77         inc b
2551   14FB FA FD FF      lea d, [bp + -3] ; $i
2552   14FE FD 43         mov [d], b
2553   1500 27            mov b, a
2554   1501 0A 83 14      jmp _for35_cond
2555   1504             _for35_exit:
2556   1504             ; test6_struct.i1 = 55555; 
2557   1504 3B A7 24      mov d, _test6_struct_data ; $test6_struct
2558   1507 58 06 00      add d, 6
2559   150A DA            push d
2560   150B FD 2E 03 D9   mov32 cb, $0000d903
2560   150F 00 00 
2561   1511 E7            pop d
2562   1512 FD 43         mov [d], b
2563   1514             ; pass = pass && test6_struct.i1 == 55555; 
2564   1514 FA FF FF      lea d, [bp + -1] ; $pass
2565   1517 DA            push d
2566   1518 FA FF FF      lea d, [bp + -1] ; $pass
2567   151B 2A            mov b, [d]
2568   151C 38 00 00      mov c, 0
2569   151F             ; --- START LOGICAL AND
2570   151F D7            push a
2571   1520 11            mov a, b
2572   1521 3B A7 24      mov d, _test6_struct_data ; $test6_struct
2573   1524 58 06 00      add d, 6
2574   1527 2A            mov b, [d]
2575   1528 38 00 00      mov c, 0
2576   152B             ; --- START RELATIONAL
2577   152B D7            push a
2578   152C 11            mov a, b
2579   152D FD 2E 03 D9   mov32 cb, $0000d903
2579   1531 00 00 
2580   1533 B0            cmp a, b
2581   1534 FD 71         seq ; ==
2582   1536 E4            pop a
2583   1537             ; --- END RELATIONAL
2584   1537 FD A7         sand a, b
2585   1539 E4            pop a
2586   153A             ; --- END LOGICAL AND
2587   153A E7            pop d
2588   153B FD 43         mov [d], b
2589   153D             ; for(i = 0; i < 5; i++){ 
2590   153D             _for36_init:
2591   153D FA FD FF      lea d, [bp + -3] ; $i
2592   1540 DA            push d
2593   1541 FD 2E 00 00   mov32 cb, $00000000
2593   1545 00 00 
2594   1547 E7            pop d
2595   1548 FD 43         mov [d], b
2596   154A             _for36_cond:
2597   154A FA FD FF      lea d, [bp + -3] ; $i
2598   154D 2A            mov b, [d]
2599   154E 38 00 00      mov c, 0
2600   1551             ; --- START RELATIONAL
2601   1551 D7            push a
2602   1552 11            mov a, b
2603   1553 FD 2E 05 00   mov32 cb, $00000005
2603   1557 00 00 
2604   1559 B0            cmp a, b
2605   155A FD 73         slt ; < (signed)
2606   155C E4            pop a
2607   155D             ; --- END RELATIONAL
2608   155D C0 00 00      cmp b, 0
2609   1560 C6 CF 15      je _for36_exit
2610   1563             _for36_block:
2611   1563             ; test6_struct.ia[i] = i; 
2612   1563 3B A7 24      mov d, _test6_struct_data ; $test6_struct
2613   1566 58 08 00      add d, 8
2614   1569 D7            push a
2615   156A DA            push d
2616   156B FA FD FF      lea d, [bp + -3] ; $i
2617   156E 2A            mov b, [d]
2618   156F 38 00 00      mov c, 0
2619   1572 E7            pop d
2620   1573 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2621   1577 E4            pop a
2622   1578 DA            push d
2623   1579 FA FD FF      lea d, [bp + -3] ; $i
2624   157C 2A            mov b, [d]
2625   157D 38 00 00      mov c, 0
2626   1580 E7            pop d
2627   1581 FD 43         mov [d], b
2628   1583             ; pass = pass && test6_struct.ia[i] == i; 
2629   1583 FA FF FF      lea d, [bp + -1] ; $pass
2630   1586 DA            push d
2631   1587 FA FF FF      lea d, [bp + -1] ; $pass
2632   158A 2A            mov b, [d]
2633   158B 38 00 00      mov c, 0
2634   158E             ; --- START LOGICAL AND
2635   158E D7            push a
2636   158F 11            mov a, b
2637   1590 3B A7 24      mov d, _test6_struct_data ; $test6_struct
2638   1593 58 08 00      add d, 8
2639   1596 D7            push a
2640   1597 DA            push d
2641   1598 FA FD FF      lea d, [bp + -3] ; $i
2642   159B 2A            mov b, [d]
2643   159C 38 00 00      mov c, 0
2644   159F E7            pop d
2645   15A0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2646   15A4 E4            pop a
2647   15A5 2A            mov b, [d]
2648   15A6 38 00 00      mov c, 0
2649   15A9             ; --- START RELATIONAL
2650   15A9 D7            push a
2651   15AA 11            mov a, b
2652   15AB FA FD FF      lea d, [bp + -3] ; $i
2653   15AE 2A            mov b, [d]
2654   15AF 38 00 00      mov c, 0
2655   15B2 B0            cmp a, b
2656   15B3 FD 71         seq ; ==
2657   15B5 E4            pop a
2658   15B6             ; --- END RELATIONAL
2659   15B6 FD A7         sand a, b
2660   15B8 E4            pop a
2661   15B9             ; --- END LOGICAL AND
2662   15B9 E7            pop d
2663   15BA FD 43         mov [d], b
2664   15BC             _for36_update:
2665   15BC FA FD FF      lea d, [bp + -3] ; $i
2666   15BF 2A            mov b, [d]
2667   15C0 38 00 00      mov c, 0
2668   15C3 11            mov a, b
2669   15C4 FD 77         inc b
2670   15C6 FA FD FF      lea d, [bp + -3] ; $i
2671   15C9 FD 43         mov [d], b
2672   15CB 27            mov b, a
2673   15CC 0A 4A 15      jmp _for36_cond
2674   15CF             _for36_exit:
2675   15CF             ; return pass; 
2676   15CF FA FF FF      lea d, [bp + -1] ; $pass
2677   15D2 2A            mov b, [d]
2678   15D3 38 00 00      mov c, 0
2679   15D6 F9            leave
2680   15D7 09            ret
2681   15D8             
2682   15D8             test7:
2683   15D8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2684   15DB             ; int pass = 1; 
2685   15DB 52 02 00      sub sp, 2
2686   15DE             ; --- START LOCAL VAR INITIALIZATION
2687   15DE FA FF FF      lea d, [bp + -1] ; $pass
2688   15E1 DA            push d
2689   15E2 FD 2E 01 00   mov32 cb, $00000001
2689   15E6 00 00 
2690   15E8 E7            pop d
2691   15E9 FD 43         mov [d], b
2692   15EB             ; --- END LOCAL VAR INITIALIZATION
2693   15EB             ; int i, j, k; 
2694   15EB 52 02 00      sub sp, 2
2695   15EE 52 02 00      sub sp, 2
2696   15F1 52 02 00      sub sp, 2
2697   15F4             ; test7_struct.test7_substruct.c1 = 'A'; 
2698   15F4 3B B9 24      mov d, _test7_struct_data ; $test7_struct
2699   15F7 58 06 00      add d, 6
2700   15FA 58 00 00      add d, 0
2701   15FD DA            push d
2702   15FE FD 2E 41 00   mov32 cb, $00000041
2702   1602 00 00 
2703   1604 E7            pop d
2704   1605 FD 3E         mov [d], bl
2705   1607             ; pass = pass && test7_struct.test7_substruct.c1 == 'A'; 
2706   1607 FA FF FF      lea d, [bp + -1] ; $pass
2707   160A DA            push d
2708   160B FA FF FF      lea d, [bp + -1] ; $pass
2709   160E 2A            mov b, [d]
2710   160F 38 00 00      mov c, 0
2711   1612             ; --- START LOGICAL AND
2712   1612 D7            push a
2713   1613 11            mov a, b
2714   1614 3B B9 24      mov d, _test7_struct_data ; $test7_struct
2715   1617 58 06 00      add d, 6
2716   161A 58 00 00      add d, 0
2717   161D 32            mov bl, [d]
2718   161E A7 00         mov bh, 0
2719   1620 38 00 00      mov c, 0
2720   1623             ; --- START RELATIONAL
2721   1623 D7            push a
2722   1624 11            mov a, b
2723   1625 FD 2E 41 00   mov32 cb, $00000041
2723   1629 00 00 
2724   162B B0            cmp a, b
2725   162C FD 71         seq ; ==
2726   162E E4            pop a
2727   162F             ; --- END RELATIONAL
2728   162F FD A7         sand a, b
2729   1631 E4            pop a
2730   1632             ; --- END LOGICAL AND
2731   1632 E7            pop d
2732   1633 FD 43         mov [d], b
2733   1635             ; for(i = 0; i < 5; i++){ 
2734   1635             _for37_init:
2735   1635 FA FD FF      lea d, [bp + -3] ; $i
2736   1638 DA            push d
2737   1639 FD 2E 00 00   mov32 cb, $00000000
2737   163D 00 00 
2738   163F E7            pop d
2739   1640 FD 43         mov [d], b
2740   1642             _for37_cond:
2741   1642 FA FD FF      lea d, [bp + -3] ; $i
2742   1645 2A            mov b, [d]
2743   1646 38 00 00      mov c, 0
2744   1649             ; --- START RELATIONAL
2745   1649 D7            push a
2746   164A 11            mov a, b
2747   164B FD 2E 05 00   mov32 cb, $00000005
2747   164F 00 00 
2748   1651 B0            cmp a, b
2749   1652 FD 73         slt ; < (signed)
2750   1654 E4            pop a
2751   1655             ; --- END RELATIONAL
2752   1655 C0 00 00      cmp b, 0
2753   1658 C6 C9 16      je _for37_exit
2754   165B             _for37_block:
2755   165B             ; test7_struct.test7_substruct.ca[i] = i; 
2756   165B 3B B9 24      mov d, _test7_struct_data ; $test7_struct
2757   165E 58 06 00      add d, 6
2758   1661 58 01 00      add d, 1
2759   1664 D7            push a
2760   1665 DA            push d
2761   1666 FA FD FF      lea d, [bp + -3] ; $i
2762   1669 2A            mov b, [d]
2763   166A 38 00 00      mov c, 0
2764   166D E7            pop d
2765   166E 5A            add d, b
2766   166F E4            pop a
2767   1670 DA            push d
2768   1671 FA FD FF      lea d, [bp + -3] ; $i
2769   1674 2A            mov b, [d]
2770   1675 38 00 00      mov c, 0
2771   1678 E7            pop d
2772   1679 FD 3E         mov [d], bl
2773   167B             ; pass = pass && test7_struct.test7_substruct.ca[i] == i; 
2774   167B FA FF FF      lea d, [bp + -1] ; $pass
2775   167E DA            push d
2776   167F FA FF FF      lea d, [bp + -1] ; $pass
2777   1682 2A            mov b, [d]
2778   1683 38 00 00      mov c, 0
2779   1686             ; --- START LOGICAL AND
2780   1686 D7            push a
2781   1687 11            mov a, b
2782   1688 3B B9 24      mov d, _test7_struct_data ; $test7_struct
2783   168B 58 06 00      add d, 6
2784   168E 58 01 00      add d, 1
2785   1691 D7            push a
2786   1692 DA            push d
2787   1693 FA FD FF      lea d, [bp + -3] ; $i
2788   1696 2A            mov b, [d]
2789   1697 38 00 00      mov c, 0
2790   169A E7            pop d
2791   169B 5A            add d, b
2792   169C E4            pop a
2793   169D 32            mov bl, [d]
2794   169E A7 00         mov bh, 0
2795   16A0 38 00 00      mov c, 0
2796   16A3             ; --- START RELATIONAL
2797   16A3 D7            push a
2798   16A4 11            mov a, b
2799   16A5 FA FD FF      lea d, [bp + -3] ; $i
2800   16A8 2A            mov b, [d]
2801   16A9 38 00 00      mov c, 0
2802   16AC B0            cmp a, b
2803   16AD FD 71         seq ; ==
2804   16AF E4            pop a
2805   16B0             ; --- END RELATIONAL
2806   16B0 FD A7         sand a, b
2807   16B2 E4            pop a
2808   16B3             ; --- END LOGICAL AND
2809   16B3 E7            pop d
2810   16B4 FD 43         mov [d], b
2811   16B6             _for37_update:
2812   16B6 FA FD FF      lea d, [bp + -3] ; $i
2813   16B9 2A            mov b, [d]
2814   16BA 38 00 00      mov c, 0
2815   16BD 11            mov a, b
2816   16BE FD 77         inc b
2817   16C0 FA FD FF      lea d, [bp + -3] ; $i
2818   16C3 FD 43         mov [d], b
2819   16C5 27            mov b, a
2820   16C6 0A 42 16      jmp _for37_cond
2821   16C9             _for37_exit:
2822   16C9             ; test7_struct.test7_substruct.i1 = 55555; 
2823   16C9 3B B9 24      mov d, _test7_struct_data ; $test7_struct
2824   16CC 58 06 00      add d, 6
2825   16CF 58 06 00      add d, 6
2826   16D2 DA            push d
2827   16D3 FD 2E 03 D9   mov32 cb, $0000d903
2827   16D7 00 00 
2828   16D9 E7            pop d
2829   16DA FD 43         mov [d], b
2830   16DC             ; pass = pass && test7_struct.test7_substruct.i1 == 55555; 
2831   16DC FA FF FF      lea d, [bp + -1] ; $pass
2832   16DF DA            push d
2833   16E0 FA FF FF      lea d, [bp + -1] ; $pass
2834   16E3 2A            mov b, [d]
2835   16E4 38 00 00      mov c, 0
2836   16E7             ; --- START LOGICAL AND
2837   16E7 D7            push a
2838   16E8 11            mov a, b
2839   16E9 3B B9 24      mov d, _test7_struct_data ; $test7_struct
2840   16EC 58 06 00      add d, 6
2841   16EF 58 06 00      add d, 6
2842   16F2 2A            mov b, [d]
2843   16F3 38 00 00      mov c, 0
2844   16F6             ; --- START RELATIONAL
2845   16F6 D7            push a
2846   16F7 11            mov a, b
2847   16F8 FD 2E 03 D9   mov32 cb, $0000d903
2847   16FC 00 00 
2848   16FE B0            cmp a, b
2849   16FF FD 71         seq ; ==
2850   1701 E4            pop a
2851   1702             ; --- END RELATIONAL
2852   1702 FD A7         sand a, b
2853   1704 E4            pop a
2854   1705             ; --- END LOGICAL AND
2855   1705 E7            pop d
2856   1706 FD 43         mov [d], b
2857   1708             ; for(i = 0; i < 5; i++){ 
2858   1708             _for38_init:
2859   1708 FA FD FF      lea d, [bp + -3] ; $i
2860   170B DA            push d
2861   170C FD 2E 00 00   mov32 cb, $00000000
2861   1710 00 00 
2862   1712 E7            pop d
2863   1713 FD 43         mov [d], b
2864   1715             _for38_cond:
2865   1715 FA FD FF      lea d, [bp + -3] ; $i
2866   1718 2A            mov b, [d]
2867   1719 38 00 00      mov c, 0
2868   171C             ; --- START RELATIONAL
2869   171C D7            push a
2870   171D 11            mov a, b
2871   171E FD 2E 05 00   mov32 cb, $00000005
2871   1722 00 00 
2872   1724 B0            cmp a, b
2873   1725 FD 73         slt ; < (signed)
2874   1727 E4            pop a
2875   1728             ; --- END RELATIONAL
2876   1728 C0 00 00      cmp b, 0
2877   172B C6 A0 17      je _for38_exit
2878   172E             _for38_block:
2879   172E             ; test7_struct.test7_substruct.ia[i] = i; 
2880   172E 3B B9 24      mov d, _test7_struct_data ; $test7_struct
2881   1731 58 06 00      add d, 6
2882   1734 58 08 00      add d, 8
2883   1737 D7            push a
2884   1738 DA            push d
2885   1739 FA FD FF      lea d, [bp + -3] ; $i
2886   173C 2A            mov b, [d]
2887   173D 38 00 00      mov c, 0
2888   1740 E7            pop d
2889   1741 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2890   1745 E4            pop a
2891   1746 DA            push d
2892   1747 FA FD FF      lea d, [bp + -3] ; $i
2893   174A 2A            mov b, [d]
2894   174B 38 00 00      mov c, 0
2895   174E E7            pop d
2896   174F FD 43         mov [d], b
2897   1751             ; pass = pass && test7_struct.test7_substruct.ia[i] == i; 
2898   1751 FA FF FF      lea d, [bp + -1] ; $pass
2899   1754 DA            push d
2900   1755 FA FF FF      lea d, [bp + -1] ; $pass
2901   1758 2A            mov b, [d]
2902   1759 38 00 00      mov c, 0
2903   175C             ; --- START LOGICAL AND
2904   175C D7            push a
2905   175D 11            mov a, b
2906   175E 3B B9 24      mov d, _test7_struct_data ; $test7_struct
2907   1761 58 06 00      add d, 6
2908   1764 58 08 00      add d, 8
2909   1767 D7            push a
2910   1768 DA            push d
2911   1769 FA FD FF      lea d, [bp + -3] ; $i
2912   176C 2A            mov b, [d]
2913   176D 38 00 00      mov c, 0
2914   1770 E7            pop d
2915   1771 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2916   1775 E4            pop a
2917   1776 2A            mov b, [d]
2918   1777 38 00 00      mov c, 0
2919   177A             ; --- START RELATIONAL
2920   177A D7            push a
2921   177B 11            mov a, b
2922   177C FA FD FF      lea d, [bp + -3] ; $i
2923   177F 2A            mov b, [d]
2924   1780 38 00 00      mov c, 0
2925   1783 B0            cmp a, b
2926   1784 FD 71         seq ; ==
2927   1786 E4            pop a
2928   1787             ; --- END RELATIONAL
2929   1787 FD A7         sand a, b
2930   1789 E4            pop a
2931   178A             ; --- END LOGICAL AND
2932   178A E7            pop d
2933   178B FD 43         mov [d], b
2934   178D             _for38_update:
2935   178D FA FD FF      lea d, [bp + -3] ; $i
2936   1790 2A            mov b, [d]
2937   1791 38 00 00      mov c, 0
2938   1794 11            mov a, b
2939   1795 FD 77         inc b
2940   1797 FA FD FF      lea d, [bp + -3] ; $i
2941   179A FD 43         mov [d], b
2942   179C 27            mov b, a
2943   179D 0A 15 17      jmp _for38_cond
2944   17A0             _for38_exit:
2945   17A0             ; return pass; 
2946   17A0 FA FF FF      lea d, [bp + -1] ; $pass
2947   17A3 2A            mov b, [d]
2948   17A4 38 00 00      mov c, 0
2949   17A7 F9            leave
2950   17A8 09            ret
2951   17A9             
2952   17A9             test8:
2953   17A9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2954   17AC             ; int pass = 1; 
2955   17AC 52 02 00      sub sp, 2
2956   17AF             ; --- START LOCAL VAR INITIALIZATION
2957   17AF FA FF FF      lea d, [bp + -1] ; $pass
2958   17B2 DA            push d
2959   17B3 FD 2E 01 00   mov32 cb, $00000001
2959   17B7 00 00 
2960   17B9 E7            pop d
2961   17BA FD 43         mov [d], b
2962   17BC             ; --- END LOCAL VAR INITIALIZATION
2963   17BC             ; int i, j, k; 
2964   17BC 52 02 00      sub sp, 2
2965   17BF 52 02 00      sub sp, 2
2966   17C2 52 02 00      sub sp, 2
2967   17C5             ; struct t_test8_struct test8_struct; 
2968   17C5 52 12 00      sub sp, 18
2969   17C8             ; test8_struct.c1 = 'A'; 
2970   17C8 FA E7 FF      lea d, [bp + -25] ; $test8_struct
2971   17CB 58 00 00      add d, 0
2972   17CE DA            push d
2973   17CF FD 2E 41 00   mov32 cb, $00000041
2973   17D3 00 00 
2974   17D5 E7            pop d
2975   17D6 FD 3E         mov [d], bl
2976   17D8             ; pass = pass && test8_struct.c1 == 'A'; 
2977   17D8 FA FF FF      lea d, [bp + -1] ; $pass
2978   17DB DA            push d
2979   17DC FA FF FF      lea d, [bp + -1] ; $pass
2980   17DF 2A            mov b, [d]
2981   17E0 38 00 00      mov c, 0
2982   17E3             ; --- START LOGICAL AND
2983   17E3 D7            push a
2984   17E4 11            mov a, b
2985   17E5 FA E7 FF      lea d, [bp + -25] ; $test8_struct
2986   17E8 58 00 00      add d, 0
2987   17EB 32            mov bl, [d]
2988   17EC A7 00         mov bh, 0
2989   17EE 38 00 00      mov c, 0
2990   17F1             ; --- START RELATIONAL
2991   17F1 D7            push a
2992   17F2 11            mov a, b
2993   17F3 FD 2E 41 00   mov32 cb, $00000041
2993   17F7 00 00 
2994   17F9 B0            cmp a, b
2995   17FA FD 71         seq ; ==
2996   17FC E4            pop a
2997   17FD             ; --- END RELATIONAL
2998   17FD FD A7         sand a, b
2999   17FF E4            pop a
3000   1800             ; --- END LOGICAL AND
3001   1800 E7            pop d
3002   1801 FD 43         mov [d], b
3003   1803             ; for(i = 0; i < 5; i++){ 
3004   1803             _for39_init:
3005   1803 FA FD FF      lea d, [bp + -3] ; $i
3006   1806 DA            push d
3007   1807 FD 2E 00 00   mov32 cb, $00000000
3007   180B 00 00 
3008   180D E7            pop d
3009   180E FD 43         mov [d], b
3010   1810             _for39_cond:
3011   1810 FA FD FF      lea d, [bp + -3] ; $i
3012   1813 2A            mov b, [d]
3013   1814 38 00 00      mov c, 0
3014   1817             ; --- START RELATIONAL
3015   1817 D7            push a
3016   1818 11            mov a, b
3017   1819 FD 2E 05 00   mov32 cb, $00000005
3017   181D 00 00 
3018   181F B0            cmp a, b
3019   1820 FD 73         slt ; < (signed)
3020   1822 E4            pop a
3021   1823             ; --- END RELATIONAL
3022   1823 C0 00 00      cmp b, 0
3023   1826 C6 91 18      je _for39_exit
3024   1829             _for39_block:
3025   1829             ; test8_struct.ca[i] = i; 
3026   1829 FA E7 FF      lea d, [bp + -25] ; $test8_struct
3027   182C 58 01 00      add d, 1
3028   182F D7            push a
3029   1830 DA            push d
3030   1831 FA FD FF      lea d, [bp + -3] ; $i
3031   1834 2A            mov b, [d]
3032   1835 38 00 00      mov c, 0
3033   1838 E7            pop d
3034   1839 5A            add d, b
3035   183A E4            pop a
3036   183B DA            push d
3037   183C FA FD FF      lea d, [bp + -3] ; $i
3038   183F 2A            mov b, [d]
3039   1840 38 00 00      mov c, 0
3040   1843 E7            pop d
3041   1844 FD 3E         mov [d], bl
3042   1846             ; pass = pass && test8_struct.ca[i] == i; 
3043   1846 FA FF FF      lea d, [bp + -1] ; $pass
3044   1849 DA            push d
3045   184A FA FF FF      lea d, [bp + -1] ; $pass
3046   184D 2A            mov b, [d]
3047   184E 38 00 00      mov c, 0
3048   1851             ; --- START LOGICAL AND
3049   1851 D7            push a
3050   1852 11            mov a, b
3051   1853 FA E7 FF      lea d, [bp + -25] ; $test8_struct
3052   1856 58 01 00      add d, 1
3053   1859 D7            push a
3054   185A DA            push d
3055   185B FA FD FF      lea d, [bp + -3] ; $i
3056   185E 2A            mov b, [d]
3057   185F 38 00 00      mov c, 0
3058   1862 E7            pop d
3059   1863 5A            add d, b
3060   1864 E4            pop a
3061   1865 32            mov bl, [d]
3062   1866 A7 00         mov bh, 0
3063   1868 38 00 00      mov c, 0
3064   186B             ; --- START RELATIONAL
3065   186B D7            push a
3066   186C 11            mov a, b
3067   186D FA FD FF      lea d, [bp + -3] ; $i
3068   1870 2A            mov b, [d]
3069   1871 38 00 00      mov c, 0
3070   1874 B0            cmp a, b
3071   1875 FD 71         seq ; ==
3072   1877 E4            pop a
3073   1878             ; --- END RELATIONAL
3074   1878 FD A7         sand a, b
3075   187A E4            pop a
3076   187B             ; --- END LOGICAL AND
3077   187B E7            pop d
3078   187C FD 43         mov [d], b
3079   187E             _for39_update:
3080   187E FA FD FF      lea d, [bp + -3] ; $i
3081   1881 2A            mov b, [d]
3082   1882 38 00 00      mov c, 0
3083   1885 11            mov a, b
3084   1886 FD 77         inc b
3085   1888 FA FD FF      lea d, [bp + -3] ; $i
3086   188B FD 43         mov [d], b
3087   188D 27            mov b, a
3088   188E 0A 10 18      jmp _for39_cond
3089   1891             _for39_exit:
3090   1891             ; test8_struct.i1 = 55555; 
3091   1891 FA E7 FF      lea d, [bp + -25] ; $test8_struct
3092   1894 58 06 00      add d, 6
3093   1897 DA            push d
3094   1898 FD 2E 03 D9   mov32 cb, $0000d903
3094   189C 00 00 
3095   189E E7            pop d
3096   189F FD 43         mov [d], b
3097   18A1             ; pass = pass && test8_struct.i1 == 55555; 
3098   18A1 FA FF FF      lea d, [bp + -1] ; $pass
3099   18A4 DA            push d
3100   18A5 FA FF FF      lea d, [bp + -1] ; $pass
3101   18A8 2A            mov b, [d]
3102   18A9 38 00 00      mov c, 0
3103   18AC             ; --- START LOGICAL AND
3104   18AC D7            push a
3105   18AD 11            mov a, b
3106   18AE FA E7 FF      lea d, [bp + -25] ; $test8_struct
3107   18B1 58 06 00      add d, 6
3108   18B4 2A            mov b, [d]
3109   18B5 38 00 00      mov c, 0
3110   18B8             ; --- START RELATIONAL
3111   18B8 D7            push a
3112   18B9 11            mov a, b
3113   18BA FD 2E 03 D9   mov32 cb, $0000d903
3113   18BE 00 00 
3114   18C0 B0            cmp a, b
3115   18C1 FD 71         seq ; ==
3116   18C3 E4            pop a
3117   18C4             ; --- END RELATIONAL
3118   18C4 FD A7         sand a, b
3119   18C6 E4            pop a
3120   18C7             ; --- END LOGICAL AND
3121   18C7 E7            pop d
3122   18C8 FD 43         mov [d], b
3123   18CA             ; for(i = 0; i < 5; i++){ 
3124   18CA             _for40_init:
3125   18CA FA FD FF      lea d, [bp + -3] ; $i
3126   18CD DA            push d
3127   18CE FD 2E 00 00   mov32 cb, $00000000
3127   18D2 00 00 
3128   18D4 E7            pop d
3129   18D5 FD 43         mov [d], b
3130   18D7             _for40_cond:
3131   18D7 FA FD FF      lea d, [bp + -3] ; $i
3132   18DA 2A            mov b, [d]
3133   18DB 38 00 00      mov c, 0
3134   18DE             ; --- START RELATIONAL
3135   18DE D7            push a
3136   18DF 11            mov a, b
3137   18E0 FD 2E 05 00   mov32 cb, $00000005
3137   18E4 00 00 
3138   18E6 B0            cmp a, b
3139   18E7 FD 73         slt ; < (signed)
3140   18E9 E4            pop a
3141   18EA             ; --- END RELATIONAL
3142   18EA C0 00 00      cmp b, 0
3143   18ED C6 5C 19      je _for40_exit
3144   18F0             _for40_block:
3145   18F0             ; test8_struct.ia[i] = i; 
3146   18F0 FA E7 FF      lea d, [bp + -25] ; $test8_struct
3147   18F3 58 08 00      add d, 8
3148   18F6 D7            push a
3149   18F7 DA            push d
3150   18F8 FA FD FF      lea d, [bp + -3] ; $i
3151   18FB 2A            mov b, [d]
3152   18FC 38 00 00      mov c, 0
3153   18FF E7            pop d
3154   1900 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3155   1904 E4            pop a
3156   1905 DA            push d
3157   1906 FA FD FF      lea d, [bp + -3] ; $i
3158   1909 2A            mov b, [d]
3159   190A 38 00 00      mov c, 0
3160   190D E7            pop d
3161   190E FD 43         mov [d], b
3162   1910             ; pass = pass && test8_struct.ia[i] == i; 
3163   1910 FA FF FF      lea d, [bp + -1] ; $pass
3164   1913 DA            push d
3165   1914 FA FF FF      lea d, [bp + -1] ; $pass
3166   1917 2A            mov b, [d]
3167   1918 38 00 00      mov c, 0
3168   191B             ; --- START LOGICAL AND
3169   191B D7            push a
3170   191C 11            mov a, b
3171   191D FA E7 FF      lea d, [bp + -25] ; $test8_struct
3172   1920 58 08 00      add d, 8
3173   1923 D7            push a
3174   1924 DA            push d
3175   1925 FA FD FF      lea d, [bp + -3] ; $i
3176   1928 2A            mov b, [d]
3177   1929 38 00 00      mov c, 0
3178   192C E7            pop d
3179   192D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3180   1931 E4            pop a
3181   1932 2A            mov b, [d]
3182   1933 38 00 00      mov c, 0
3183   1936             ; --- START RELATIONAL
3184   1936 D7            push a
3185   1937 11            mov a, b
3186   1938 FA FD FF      lea d, [bp + -3] ; $i
3187   193B 2A            mov b, [d]
3188   193C 38 00 00      mov c, 0
3189   193F B0            cmp a, b
3190   1940 FD 71         seq ; ==
3191   1942 E4            pop a
3192   1943             ; --- END RELATIONAL
3193   1943 FD A7         sand a, b
3194   1945 E4            pop a
3195   1946             ; --- END LOGICAL AND
3196   1946 E7            pop d
3197   1947 FD 43         mov [d], b
3198   1949             _for40_update:
3199   1949 FA FD FF      lea d, [bp + -3] ; $i
3200   194C 2A            mov b, [d]
3201   194D 38 00 00      mov c, 0
3202   1950 11            mov a, b
3203   1951 FD 77         inc b
3204   1953 FA FD FF      lea d, [bp + -3] ; $i
3205   1956 FD 43         mov [d], b
3206   1958 27            mov b, a
3207   1959 0A D7 18      jmp _for40_cond
3208   195C             _for40_exit:
3209   195C             ; return pass; 
3210   195C FA FF FF      lea d, [bp + -1] ; $pass
3211   195F 2A            mov b, [d]
3212   1960 38 00 00      mov c, 0
3213   1963 F9            leave
3214   1964 09            ret
3215   1965             
3216   1965             test9:
3217   1965 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3218   1968             ; int pass = 1; 
3219   1968 52 02 00      sub sp, 2
3220   196B             ; --- START LOCAL VAR INITIALIZATION
3221   196B FA FF FF      lea d, [bp + -1] ; $pass
3222   196E DA            push d
3223   196F FD 2E 01 00   mov32 cb, $00000001
3223   1973 00 00 
3224   1975 E7            pop d
3225   1976 FD 43         mov [d], b
3226   1978             ; --- END LOCAL VAR INITIALIZATION
3227   1978             ; int i, j, k; 
3228   1978 52 02 00      sub sp, 2
3229   197B 52 02 00      sub sp, 2
3230   197E 52 02 00      sub sp, 2
3231   1981             ; struct t_test9_struct test9_struct; 
3232   1981 52 24 00      sub sp, 36
3233   1984             ; test9_struct.test9_substruct.c1 = 'A'; 
3234   1984 FA D5 FF      lea d, [bp + -43] ; $test9_struct
3235   1987 58 06 00      add d, 6
3236   198A 58 00 00      add d, 0
3237   198D DA            push d
3238   198E FD 2E 41 00   mov32 cb, $00000041
3238   1992 00 00 
3239   1994 E7            pop d
3240   1995 FD 3E         mov [d], bl
3241   1997             ; pass = pass && test9_struct.test9_substruct.c1 == 'A'; 
3242   1997 FA FF FF      lea d, [bp + -1] ; $pass
3243   199A DA            push d
3244   199B FA FF FF      lea d, [bp + -1] ; $pass
3245   199E 2A            mov b, [d]
3246   199F 38 00 00      mov c, 0
3247   19A2             ; --- START LOGICAL AND
3248   19A2 D7            push a
3249   19A3 11            mov a, b
3250   19A4 FA D5 FF      lea d, [bp + -43] ; $test9_struct
3251   19A7 58 06 00      add d, 6
3252   19AA 58 00 00      add d, 0
3253   19AD 32            mov bl, [d]
3254   19AE A7 00         mov bh, 0
3255   19B0 38 00 00      mov c, 0
3256   19B3             ; --- START RELATIONAL
3257   19B3 D7            push a
3258   19B4 11            mov a, b
3259   19B5 FD 2E 41 00   mov32 cb, $00000041
3259   19B9 00 00 
3260   19BB B0            cmp a, b
3261   19BC FD 71         seq ; ==
3262   19BE E4            pop a
3263   19BF             ; --- END RELATIONAL
3264   19BF FD A7         sand a, b
3265   19C1 E4            pop a
3266   19C2             ; --- END LOGICAL AND
3267   19C2 E7            pop d
3268   19C3 FD 43         mov [d], b
3269   19C5             ; for(i = 0; i < 5; i++){ 
3270   19C5             _for41_init:
3271   19C5 FA FD FF      lea d, [bp + -3] ; $i
3272   19C8 DA            push d
3273   19C9 FD 2E 00 00   mov32 cb, $00000000
3273   19CD 00 00 
3274   19CF E7            pop d
3275   19D0 FD 43         mov [d], b
3276   19D2             _for41_cond:
3277   19D2 FA FD FF      lea d, [bp + -3] ; $i
3278   19D5 2A            mov b, [d]
3279   19D6 38 00 00      mov c, 0
3280   19D9             ; --- START RELATIONAL
3281   19D9 D7            push a
3282   19DA 11            mov a, b
3283   19DB FD 2E 05 00   mov32 cb, $00000005
3283   19DF 00 00 
3284   19E1 B0            cmp a, b
3285   19E2 FD 73         slt ; < (signed)
3286   19E4 E4            pop a
3287   19E5             ; --- END RELATIONAL
3288   19E5 C0 00 00      cmp b, 0
3289   19E8 C6 59 1A      je _for41_exit
3290   19EB             _for41_block:
3291   19EB             ; test9_struct.test9_substruct.ca[i] = i; 
3292   19EB FA D5 FF      lea d, [bp + -43] ; $test9_struct
3293   19EE 58 06 00      add d, 6
3294   19F1 58 01 00      add d, 1
3295   19F4 D7            push a
3296   19F5 DA            push d
3297   19F6 FA FD FF      lea d, [bp + -3] ; $i
3298   19F9 2A            mov b, [d]
3299   19FA 38 00 00      mov c, 0
3300   19FD E7            pop d
3301   19FE 5A            add d, b
3302   19FF E4            pop a
3303   1A00 DA            push d
3304   1A01 FA FD FF      lea d, [bp + -3] ; $i
3305   1A04 2A            mov b, [d]
3306   1A05 38 00 00      mov c, 0
3307   1A08 E7            pop d
3308   1A09 FD 3E         mov [d], bl
3309   1A0B             ; pass = pass && test9_struct.test9_substruct.ca[i] == i; 
3310   1A0B FA FF FF      lea d, [bp + -1] ; $pass
3311   1A0E DA            push d
3312   1A0F FA FF FF      lea d, [bp + -1] ; $pass
3313   1A12 2A            mov b, [d]
3314   1A13 38 00 00      mov c, 0
3315   1A16             ; --- START LOGICAL AND
3316   1A16 D7            push a
3317   1A17 11            mov a, b
3318   1A18 FA D5 FF      lea d, [bp + -43] ; $test9_struct
3319   1A1B 58 06 00      add d, 6
3320   1A1E 58 01 00      add d, 1
3321   1A21 D7            push a
3322   1A22 DA            push d
3323   1A23 FA FD FF      lea d, [bp + -3] ; $i
3324   1A26 2A            mov b, [d]
3325   1A27 38 00 00      mov c, 0
3326   1A2A E7            pop d
3327   1A2B 5A            add d, b
3328   1A2C E4            pop a
3329   1A2D 32            mov bl, [d]
3330   1A2E A7 00         mov bh, 0
3331   1A30 38 00 00      mov c, 0
3332   1A33             ; --- START RELATIONAL
3333   1A33 D7            push a
3334   1A34 11            mov a, b
3335   1A35 FA FD FF      lea d, [bp + -3] ; $i
3336   1A38 2A            mov b, [d]
3337   1A39 38 00 00      mov c, 0
3338   1A3C B0            cmp a, b
3339   1A3D FD 71         seq ; ==
3340   1A3F E4            pop a
3341   1A40             ; --- END RELATIONAL
3342   1A40 FD A7         sand a, b
3343   1A42 E4            pop a
3344   1A43             ; --- END LOGICAL AND
3345   1A43 E7            pop d
3346   1A44 FD 43         mov [d], b
3347   1A46             _for41_update:
3348   1A46 FA FD FF      lea d, [bp + -3] ; $i
3349   1A49 2A            mov b, [d]
3350   1A4A 38 00 00      mov c, 0
3351   1A4D 11            mov a, b
3352   1A4E FD 77         inc b
3353   1A50 FA FD FF      lea d, [bp + -3] ; $i
3354   1A53 FD 43         mov [d], b
3355   1A55 27            mov b, a
3356   1A56 0A D2 19      jmp _for41_cond
3357   1A59             _for41_exit:
3358   1A59             ; test9_struct.test9_substruct.i1 = 55555; 
3359   1A59 FA D5 FF      lea d, [bp + -43] ; $test9_struct
3360   1A5C 58 06 00      add d, 6
3361   1A5F 58 06 00      add d, 6
3362   1A62 DA            push d
3363   1A63 FD 2E 03 D9   mov32 cb, $0000d903
3363   1A67 00 00 
3364   1A69 E7            pop d
3365   1A6A FD 43         mov [d], b
3366   1A6C             ; pass = pass && test9_struct.test9_substruct.i1 == 55555; 
3367   1A6C FA FF FF      lea d, [bp + -1] ; $pass
3368   1A6F DA            push d
3369   1A70 FA FF FF      lea d, [bp + -1] ; $pass
3370   1A73 2A            mov b, [d]
3371   1A74 38 00 00      mov c, 0
3372   1A77             ; --- START LOGICAL AND
3373   1A77 D7            push a
3374   1A78 11            mov a, b
3375   1A79 FA D5 FF      lea d, [bp + -43] ; $test9_struct
3376   1A7C 58 06 00      add d, 6
3377   1A7F 58 06 00      add d, 6
3378   1A82 2A            mov b, [d]
3379   1A83 38 00 00      mov c, 0
3380   1A86             ; --- START RELATIONAL
3381   1A86 D7            push a
3382   1A87 11            mov a, b
3383   1A88 FD 2E 03 D9   mov32 cb, $0000d903
3383   1A8C 00 00 
3384   1A8E B0            cmp a, b
3385   1A8F FD 71         seq ; ==
3386   1A91 E4            pop a
3387   1A92             ; --- END RELATIONAL
3388   1A92 FD A7         sand a, b
3389   1A94 E4            pop a
3390   1A95             ; --- END LOGICAL AND
3391   1A95 E7            pop d
3392   1A96 FD 43         mov [d], b
3393   1A98             ; for(i = 0; i < 5; i++){ 
3394   1A98             _for42_init:
3395   1A98 FA FD FF      lea d, [bp + -3] ; $i
3396   1A9B DA            push d
3397   1A9C FD 2E 00 00   mov32 cb, $00000000
3397   1AA0 00 00 
3398   1AA2 E7            pop d
3399   1AA3 FD 43         mov [d], b
3400   1AA5             _for42_cond:
3401   1AA5 FA FD FF      lea d, [bp + -3] ; $i
3402   1AA8 2A            mov b, [d]
3403   1AA9 38 00 00      mov c, 0
3404   1AAC             ; --- START RELATIONAL
3405   1AAC D7            push a
3406   1AAD 11            mov a, b
3407   1AAE FD 2E 05 00   mov32 cb, $00000005
3407   1AB2 00 00 
3408   1AB4 B0            cmp a, b
3409   1AB5 FD 73         slt ; < (signed)
3410   1AB7 E4            pop a
3411   1AB8             ; --- END RELATIONAL
3412   1AB8 C0 00 00      cmp b, 0
3413   1ABB C6 30 1B      je _for42_exit
3414   1ABE             _for42_block:
3415   1ABE             ; test9_struct.test9_substruct.ia[i] = i; 
3416   1ABE FA D5 FF      lea d, [bp + -43] ; $test9_struct
3417   1AC1 58 06 00      add d, 6
3418   1AC4 58 08 00      add d, 8
3419   1AC7 D7            push a
3420   1AC8 DA            push d
3421   1AC9 FA FD FF      lea d, [bp + -3] ; $i
3422   1ACC 2A            mov b, [d]
3423   1ACD 38 00 00      mov c, 0
3424   1AD0 E7            pop d
3425   1AD1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3426   1AD5 E4            pop a
3427   1AD6 DA            push d
3428   1AD7 FA FD FF      lea d, [bp + -3] ; $i
3429   1ADA 2A            mov b, [d]
3430   1ADB 38 00 00      mov c, 0
3431   1ADE E7            pop d
3432   1ADF FD 43         mov [d], b
3433   1AE1             ; pass = pass && test9_struct.test9_substruct.ia[i] == i; 
3434   1AE1 FA FF FF      lea d, [bp + -1] ; $pass
3435   1AE4 DA            push d
3436   1AE5 FA FF FF      lea d, [bp + -1] ; $pass
3437   1AE8 2A            mov b, [d]
3438   1AE9 38 00 00      mov c, 0
3439   1AEC             ; --- START LOGICAL AND
3440   1AEC D7            push a
3441   1AED 11            mov a, b
3442   1AEE FA D5 FF      lea d, [bp + -43] ; $test9_struct
3443   1AF1 58 06 00      add d, 6
3444   1AF4 58 08 00      add d, 8
3445   1AF7 D7            push a
3446   1AF8 DA            push d
3447   1AF9 FA FD FF      lea d, [bp + -3] ; $i
3448   1AFC 2A            mov b, [d]
3449   1AFD 38 00 00      mov c, 0
3450   1B00 E7            pop d
3451   1B01 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3452   1B05 E4            pop a
3453   1B06 2A            mov b, [d]
3454   1B07 38 00 00      mov c, 0
3455   1B0A             ; --- START RELATIONAL
3456   1B0A D7            push a
3457   1B0B 11            mov a, b
3458   1B0C FA FD FF      lea d, [bp + -3] ; $i
3459   1B0F 2A            mov b, [d]
3460   1B10 38 00 00      mov c, 0
3461   1B13 B0            cmp a, b
3462   1B14 FD 71         seq ; ==
3463   1B16 E4            pop a
3464   1B17             ; --- END RELATIONAL
3465   1B17 FD A7         sand a, b
3466   1B19 E4            pop a
3467   1B1A             ; --- END LOGICAL AND
3468   1B1A E7            pop d
3469   1B1B FD 43         mov [d], b
3470   1B1D             _for42_update:
3471   1B1D FA FD FF      lea d, [bp + -3] ; $i
3472   1B20 2A            mov b, [d]
3473   1B21 38 00 00      mov c, 0
3474   1B24 11            mov a, b
3475   1B25 FD 77         inc b
3476   1B27 FA FD FF      lea d, [bp + -3] ; $i
3477   1B2A FD 43         mov [d], b
3478   1B2C 27            mov b, a
3479   1B2D 0A A5 1A      jmp _for42_cond
3480   1B30             _for42_exit:
3481   1B30             ; return pass; 
3482   1B30 FA FF FF      lea d, [bp + -1] ; $pass
3483   1B33 2A            mov b, [d]
3484   1B34 38 00 00      mov c, 0
3485   1B37 F9            leave
3486   1B38 09            ret
3487   1B39             
3488   1B39             printf:
3489   1B39 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3490   1B3C             ; char *p, *format_p; 
3491   1B3C 52 02 00      sub sp, 2
3492   1B3F 52 02 00      sub sp, 2
3493   1B42             ; format_p = format; 
3494   1B42 FA FD FF      lea d, [bp + -3] ; $format_p
3495   1B45 DA            push d
3496   1B46 FA 05 00      lea d, [bp + 5] ; $format
3497   1B49 2A            mov b, [d]
3498   1B4A 38 00 00      mov c, 0
3499   1B4D E7            pop d
3500   1B4E FD 43         mov [d], b
3501   1B50             ; p = &format + 2; 
3502   1B50 FA FF FF      lea d, [bp + -1] ; $p
3503   1B53 DA            push d
3504   1B54 FA 05 00      lea d, [bp + 5] ; $format
3505   1B57 2D            mov b, d
3506   1B58             ; --- START TERMS
3507   1B58 D7            push a
3508   1B59 11            mov a, b
3509   1B5A FD 2E 02 00   mov32 cb, $00000002
3509   1B5E 00 00 
3510   1B60 56            add b, a
3511   1B61 E4            pop a
3512   1B62             ; --- END TERMS
3513   1B62 E7            pop d
3514   1B63 FD 43         mov [d], b
3515   1B65             ; for(;;){ 
3516   1B65             _for43_init:
3517   1B65             _for43_cond:
3518   1B65             _for43_block:
3519   1B65             ; if(!*format_p) break; 
3520   1B65             _if44_cond:
3521   1B65 FA FD FF      lea d, [bp + -3] ; $format_p
3522   1B68 2A            mov b, [d]
3523   1B69 38 00 00      mov c, 0
3524   1B6C 74            mov d, b
3525   1B6D 32            mov bl, [d]
3526   1B6E A7 00         mov bh, 0
3527   1B70 38 00 00      mov c, 0
3528   1B73 C0 00 00      cmp b, 0
3529   1B76 FD 71         seq ; !
3530   1B78 C0 00 00      cmp b, 0
3531   1B7B C6 84 1B      je _if44_else
3532   1B7E             _if44_TRUE:
3533   1B7E             ; break; 
3534   1B7E 0A 24 1E      jmp _for43_exit ; for break
3535   1B81 0A 11 1E      jmp _if44_exit
3536   1B84             _if44_else:
3537   1B84             ; if(*format_p == '%'){ 
3538   1B84             _if45_cond:
3539   1B84 FA FD FF      lea d, [bp + -3] ; $format_p
3540   1B87 2A            mov b, [d]
3541   1B88 38 00 00      mov c, 0
3542   1B8B 74            mov d, b
3543   1B8C 32            mov bl, [d]
3544   1B8D A7 00         mov bh, 0
3545   1B8F 38 00 00      mov c, 0
3546   1B92             ; --- START RELATIONAL
3547   1B92 D7            push a
3548   1B93 11            mov a, b
3549   1B94 FD 2E 25 00   mov32 cb, $00000025
3549   1B98 00 00 
3550   1B9A B0            cmp a, b
3551   1B9B FD 71         seq ; ==
3552   1B9D E4            pop a
3553   1B9E             ; --- END RELATIONAL
3554   1B9E C0 00 00      cmp b, 0
3555   1BA1 C6 FC 1D      je _if45_else
3556   1BA4             _if45_TRUE:
3557   1BA4             ; format_p++; 
3558   1BA4 FA FD FF      lea d, [bp + -3] ; $format_p
3559   1BA7 2A            mov b, [d]
3560   1BA8 38 00 00      mov c, 0
3561   1BAB FD 77         inc b
3562   1BAD FA FD FF      lea d, [bp + -3] ; $format_p
3563   1BB0 FD 43         mov [d], b
3564   1BB2 FD 7D         dec b
3565   1BB4             ; switch(*format_p){ 
3566   1BB4             _switch46_expr:
3567   1BB4 FA FD FF      lea d, [bp + -3] ; $format_p
3568   1BB7 2A            mov b, [d]
3569   1BB8 38 00 00      mov c, 0
3570   1BBB 74            mov d, b
3571   1BBC 32            mov bl, [d]
3572   1BBD A7 00         mov bh, 0
3573   1BBF 38 00 00      mov c, 0
3574   1BC2             _switch46_comparisons:
3575   1BC2 C1 6C         cmp bl, $6c
3576   1BC4 C6 F0 1B      je _switch46_case0
3577   1BC7 C1 4C         cmp bl, $4c
3578   1BC9 C6 F0 1B      je _switch46_case1
3579   1BCC C1 64         cmp bl, $64
3580   1BCE C6 00 1D      je _switch46_case2
3581   1BD1 C1 69         cmp bl, $69
3582   1BD3 C6 00 1D      je _switch46_case3
3583   1BD6 C1 75         cmp bl, $75
3584   1BD8 C6 30 1D      je _switch46_case4
3585   1BDB C1 78         cmp bl, $78
3586   1BDD C6 60 1D      je _switch46_case5
3587   1BE0 C1 63         cmp bl, $63
3588   1BE2 C6 90 1D      je _switch46_case6
3589   1BE5 C1 73         cmp bl, $73
3590   1BE7 C6 C0 1D      je _switch46_case7
3591   1BEA 0A ED 1D      jmp _switch46_default
3592   1BED 0A F9 1D      jmp _switch46_exit
3593   1BF0             _switch46_case0:
3594   1BF0             _switch46_case1:
3595   1BF0             ; format_p++; 
3596   1BF0 FA FD FF      lea d, [bp + -3] ; $format_p
3597   1BF3 2A            mov b, [d]
3598   1BF4 38 00 00      mov c, 0
3599   1BF7 FD 77         inc b
3600   1BF9 FA FD FF      lea d, [bp + -3] ; $format_p
3601   1BFC FD 43         mov [d], b
3602   1BFE FD 7D         dec b
3603   1C00             ; if(*format_p == 'd' || *format_p == 'i') 
3604   1C00             _if47_cond:
3605   1C00 FA FD FF      lea d, [bp + -3] ; $format_p
3606   1C03 2A            mov b, [d]
3607   1C04 38 00 00      mov c, 0
3608   1C07 74            mov d, b
3609   1C08 32            mov bl, [d]
3610   1C09 A7 00         mov bh, 0
3611   1C0B 38 00 00      mov c, 0
3612   1C0E             ; --- START RELATIONAL
3613   1C0E D7            push a
3614   1C0F 11            mov a, b
3615   1C10 FD 2E 64 00   mov32 cb, $00000064
3615   1C14 00 00 
3616   1C16 B0            cmp a, b
3617   1C17 FD 71         seq ; ==
3618   1C19 E4            pop a
3619   1C1A             ; --- END RELATIONAL
3620   1C1A             ; --- START LOGICAL OR
3621   1C1A D7            push a
3622   1C1B 11            mov a, b
3623   1C1C FA FD FF      lea d, [bp + -3] ; $format_p
3624   1C1F 2A            mov b, [d]
3625   1C20 38 00 00      mov c, 0
3626   1C23 74            mov d, b
3627   1C24 32            mov bl, [d]
3628   1C25 A7 00         mov bh, 0
3629   1C27 38 00 00      mov c, 0
3630   1C2A             ; --- START RELATIONAL
3631   1C2A D7            push a
3632   1C2B 11            mov a, b
3633   1C2C FD 2E 69 00   mov32 cb, $00000069
3633   1C30 00 00 
3634   1C32 B0            cmp a, b
3635   1C33 FD 71         seq ; ==
3636   1C35 E4            pop a
3637   1C36             ; --- END RELATIONAL
3638   1C36 FD A8         sor a, b ; ||
3639   1C38 E4            pop a
3640   1C39             ; --- END LOGICAL OR
3641   1C39 C0 00 00      cmp b, 0
3642   1C3C C6 5D 1C      je _if47_else
3643   1C3F             _if47_TRUE:
3644   1C3F             ; print_signed_long(*(long *)p); 
3645   1C3F             ; --- START FUNCTION CALL
3646   1C3F FA FF FF      lea d, [bp + -1] ; $p
3647   1C42 2A            mov b, [d]
3648   1C43 38 00 00      mov c, 0
3649   1C46 74            mov d, b
3650   1C47 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3651   1C4A FD 39         mov c, b ; And place it into C
3652   1C4C 2A            mov b, [d] ; Lower Word in B
3653   1C4D 12            mov a, c
3654   1C4E FD AA         swp a
3655   1C50 D7            push a
3656   1C51 FD AB         swp b
3657   1C53 D8            push b
3658   1C54 07 26 1E      call print_signed_long
3659   1C57 51 04 00      add sp, 4
3660   1C5A             ; --- END FUNCTION CALL
3661   1C5A 0A E5 1C      jmp _if47_exit
3662   1C5D             _if47_else:
3663   1C5D             ; if(*format_p == 'u') 
3664   1C5D             _if48_cond:
3665   1C5D FA FD FF      lea d, [bp + -3] ; $format_p
3666   1C60 2A            mov b, [d]
3667   1C61 38 00 00      mov c, 0
3668   1C64 74            mov d, b
3669   1C65 32            mov bl, [d]
3670   1C66 A7 00         mov bh, 0
3671   1C68 38 00 00      mov c, 0
3672   1C6B             ; --- START RELATIONAL
3673   1C6B D7            push a
3674   1C6C 11            mov a, b
3675   1C6D FD 2E 75 00   mov32 cb, $00000075
3675   1C71 00 00 
3676   1C73 B0            cmp a, b
3677   1C74 FD 71         seq ; ==
3678   1C76 E4            pop a
3679   1C77             ; --- END RELATIONAL
3680   1C77 C0 00 00      cmp b, 0
3681   1C7A C6 9B 1C      je _if48_else
3682   1C7D             _if48_TRUE:
3683   1C7D             ; print_unsigned_long(*(unsigned long *)p); 
3684   1C7D             ; --- START FUNCTION CALL
3685   1C7D FA FF FF      lea d, [bp + -1] ; $p
3686   1C80 2A            mov b, [d]
3687   1C81 38 00 00      mov c, 0
3688   1C84 74            mov d, b
3689   1C85 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3690   1C88 FD 39         mov c, b ; And place it into C
3691   1C8A 2A            mov b, [d] ; Lower Word in B
3692   1C8B 12            mov a, c
3693   1C8C FD AA         swp a
3694   1C8E D7            push a
3695   1C8F FD AB         swp b
3696   1C91 D8            push b
3697   1C92 07 C6 1F      call print_unsigned_long
3698   1C95 51 04 00      add sp, 4
3699   1C98             ; --- END FUNCTION CALL
3700   1C98 0A E5 1C      jmp _if48_exit
3701   1C9B             _if48_else:
3702   1C9B             ; if(*format_p == 'x') 
3703   1C9B             _if49_cond:
3704   1C9B FA FD FF      lea d, [bp + -3] ; $format_p
3705   1C9E 2A            mov b, [d]
3706   1C9F 38 00 00      mov c, 0
3707   1CA2 74            mov d, b
3708   1CA3 32            mov bl, [d]
3709   1CA4 A7 00         mov bh, 0
3710   1CA6 38 00 00      mov c, 0
3711   1CA9             ; --- START RELATIONAL
3712   1CA9 D7            push a
3713   1CAA 11            mov a, b
3714   1CAB FD 2E 78 00   mov32 cb, $00000078
3714   1CAF 00 00 
3715   1CB1 B0            cmp a, b
3716   1CB2 FD 71         seq ; ==
3717   1CB4 E4            pop a
3718   1CB5             ; --- END RELATIONAL
3719   1CB5 C0 00 00      cmp b, 0
3720   1CB8 C6 D9 1C      je _if49_else
3721   1CBB             _if49_TRUE:
3722   1CBB             ; printx32(*(long int *)p); 
3723   1CBB             ; --- START FUNCTION CALL
3724   1CBB FA FF FF      lea d, [bp + -1] ; $p
3725   1CBE 2A            mov b, [d]
3726   1CBF 38 00 00      mov c, 0
3727   1CC2 74            mov d, b
3728   1CC3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3729   1CC6 FD 39         mov c, b ; And place it into C
3730   1CC8 2A            mov b, [d] ; Lower Word in B
3731   1CC9 12            mov a, c
3732   1CCA FD AA         swp a
3733   1CCC D7            push a
3734   1CCD FD AB         swp b
3735   1CCF D8            push b
3736   1CD0 07 04 21      call printx32
3737   1CD3 51 04 00      add sp, 4
3738   1CD6             ; --- END FUNCTION CALL
3739   1CD6 0A E5 1C      jmp _if49_exit
3740   1CD9             _if49_else:
3741   1CD9             ; err("Unexpected format in printf."); 
3742   1CD9             ; --- START FUNCTION CALL
3743   1CD9 26 F2 24      mov b, _s1 ; "Unexpected format in printf."
3744   1CDC FD AB         swp b
3745   1CDE D8            push b
3746   1CDF 07 64 21      call err
3747   1CE2 51 02 00      add sp, 2
3748   1CE5             ; --- END FUNCTION CALL
3749   1CE5             _if49_exit:
3750   1CE5             _if48_exit:
3751   1CE5             _if47_exit:
3752   1CE5             ; p = p + 4; 
3753   1CE5 FA FF FF      lea d, [bp + -1] ; $p
3754   1CE8 DA            push d
3755   1CE9 FA FF FF      lea d, [bp + -1] ; $p
3756   1CEC 2A            mov b, [d]
3757   1CED 38 00 00      mov c, 0
3758   1CF0             ; --- START TERMS
3759   1CF0 D7            push a
3760   1CF1 11            mov a, b
3761   1CF2 FD 2E 04 00   mov32 cb, $00000004
3761   1CF6 00 00 
3762   1CF8 56            add b, a
3763   1CF9 E4            pop a
3764   1CFA             ; --- END TERMS
3765   1CFA E7            pop d
3766   1CFB FD 43         mov [d], b
3767   1CFD             ; break; 
3768   1CFD 0A F9 1D      jmp _switch46_exit ; case break
3769   1D00             _switch46_case2:
3770   1D00             _switch46_case3:
3771   1D00             ; print_signed(*(int*)p); 
3772   1D00             ; --- START FUNCTION CALL
3773   1D00 FA FF FF      lea d, [bp + -1] ; $p
3774   1D03 2A            mov b, [d]
3775   1D04 38 00 00      mov c, 0
3776   1D07 74            mov d, b
3777   1D08 2A            mov b, [d]
3778   1D09 38 00 00      mov c, 0
3779   1D0C FD AB         swp b
3780   1D0E D8            push b
3781   1D0F 07 92 21      call print_signed
3782   1D12 51 02 00      add sp, 2
3783   1D15             ; --- END FUNCTION CALL
3784   1D15             ; p = p + 2; 
3785   1D15 FA FF FF      lea d, [bp + -1] ; $p
3786   1D18 DA            push d
3787   1D19 FA FF FF      lea d, [bp + -1] ; $p
3788   1D1C 2A            mov b, [d]
3789   1D1D 38 00 00      mov c, 0
3790   1D20             ; --- START TERMS
3791   1D20 D7            push a
3792   1D21 11            mov a, b
3793   1D22 FD 2E 02 00   mov32 cb, $00000002
3793   1D26 00 00 
3794   1D28 56            add b, a
3795   1D29 E4            pop a
3796   1D2A             ; --- END TERMS
3797   1D2A E7            pop d
3798   1D2B FD 43         mov [d], b
3799   1D2D             ; break; 
3800   1D2D 0A F9 1D      jmp _switch46_exit ; case break
3801   1D30             _switch46_case4:
3802   1D30             ; print_unsigned(*(unsigned int*)p); 
3803   1D30             ; --- START FUNCTION CALL
3804   1D30 FA FF FF      lea d, [bp + -1] ; $p
3805   1D33 2A            mov b, [d]
3806   1D34 38 00 00      mov c, 0
3807   1D37 74            mov d, b
3808   1D38 2A            mov b, [d]
3809   1D39 38 00 00      mov c, 0
3810   1D3C FD AB         swp b
3811   1D3E D8            push b
3812   1D3F 07 E3 22      call print_unsigned
3813   1D42 51 02 00      add sp, 2
3814   1D45             ; --- END FUNCTION CALL
3815   1D45             ; p = p + 2; 
3816   1D45 FA FF FF      lea d, [bp + -1] ; $p
3817   1D48 DA            push d
3818   1D49 FA FF FF      lea d, [bp + -1] ; $p
3819   1D4C 2A            mov b, [d]
3820   1D4D 38 00 00      mov c, 0
3821   1D50             ; --- START TERMS
3822   1D50 D7            push a
3823   1D51 11            mov a, b
3824   1D52 FD 2E 02 00   mov32 cb, $00000002
3824   1D56 00 00 
3825   1D58 56            add b, a
3826   1D59 E4            pop a
3827   1D5A             ; --- END TERMS
3828   1D5A E7            pop d
3829   1D5B FD 43         mov [d], b
3830   1D5D             ; break; 
3831   1D5D 0A F9 1D      jmp _switch46_exit ; case break
3832   1D60             _switch46_case5:
3833   1D60             ; printx16(*(int*)p); 
3834   1D60             ; --- START FUNCTION CALL
3835   1D60 FA FF FF      lea d, [bp + -1] ; $p
3836   1D63 2A            mov b, [d]
3837   1D64 38 00 00      mov c, 0
3838   1D67 74            mov d, b
3839   1D68 2A            mov b, [d]
3840   1D69 38 00 00      mov c, 0
3841   1D6C FD AB         swp b
3842   1D6E D8            push b
3843   1D6F 07 FB 23      call printx16
3844   1D72 51 02 00      add sp, 2
3845   1D75             ; --- END FUNCTION CALL
3846   1D75             ; p = p + 2; 
3847   1D75 FA FF FF      lea d, [bp + -1] ; $p
3848   1D78 DA            push d
3849   1D79 FA FF FF      lea d, [bp + -1] ; $p
3850   1D7C 2A            mov b, [d]
3851   1D7D 38 00 00      mov c, 0
3852   1D80             ; --- START TERMS
3853   1D80 D7            push a
3854   1D81 11            mov a, b
3855   1D82 FD 2E 02 00   mov32 cb, $00000002
3855   1D86 00 00 
3856   1D88 56            add b, a
3857   1D89 E4            pop a
3858   1D8A             ; --- END TERMS
3859   1D8A E7            pop d
3860   1D8B FD 43         mov [d], b
3861   1D8D             ; break; 
3862   1D8D 0A F9 1D      jmp _switch46_exit ; case break
3863   1D90             _switch46_case6:
3864   1D90             ; putchar(*(char*)p); 
3865   1D90             ; --- START FUNCTION CALL
3866   1D90 FA FF FF      lea d, [bp + -1] ; $p
3867   1D93 2A            mov b, [d]
3868   1D94 38 00 00      mov c, 0
3869   1D97 74            mov d, b
3870   1D98 32            mov bl, [d]
3871   1D99 A7 00         mov bh, 0
3872   1D9B 38 00 00      mov c, 0
3873   1D9E DD            push bl
3874   1D9F 07 B8 1F      call putchar
3875   1DA2 51 01 00      add sp, 1
3876   1DA5             ; --- END FUNCTION CALL
3877   1DA5             ; p = p + 2; 
3878   1DA5 FA FF FF      lea d, [bp + -1] ; $p
3879   1DA8 DA            push d
3880   1DA9 FA FF FF      lea d, [bp + -1] ; $p
3881   1DAC 2A            mov b, [d]
3882   1DAD 38 00 00      mov c, 0
3883   1DB0             ; --- START TERMS
3884   1DB0 D7            push a
3885   1DB1 11            mov a, b
3886   1DB2 FD 2E 02 00   mov32 cb, $00000002
3886   1DB6 00 00 
3887   1DB8 56            add b, a
3888   1DB9 E4            pop a
3889   1DBA             ; --- END TERMS
3890   1DBA E7            pop d
3891   1DBB FD 43         mov [d], b
3892   1DBD             ; break; 
3893   1DBD 0A F9 1D      jmp _switch46_exit ; case break
3894   1DC0             _switch46_case7:
3895   1DC0             ; print(*(char**)p); 
3896   1DC0             ; --- START FUNCTION CALL
3897   1DC0 FA FF FF      lea d, [bp + -1] ; $p
3898   1DC3 2A            mov b, [d]
3899   1DC4 38 00 00      mov c, 0
3900   1DC7 74            mov d, b
3901   1DC8 2A            mov b, [d]
3902   1DC9 FD AB         swp b
3903   1DCB D8            push b
3904   1DCC 07 79 21      call print
3905   1DCF 51 02 00      add sp, 2
3906   1DD2             ; --- END FUNCTION CALL
3907   1DD2             ; p = p + 2; 
3908   1DD2 FA FF FF      lea d, [bp + -1] ; $p
3909   1DD5 DA            push d
3910   1DD6 FA FF FF      lea d, [bp + -1] ; $p
3911   1DD9 2A            mov b, [d]
3912   1DDA 38 00 00      mov c, 0
3913   1DDD             ; --- START TERMS
3914   1DDD D7            push a
3915   1DDE 11            mov a, b
3916   1DDF FD 2E 02 00   mov32 cb, $00000002
3916   1DE3 00 00 
3917   1DE5 56            add b, a
3918   1DE6 E4            pop a
3919   1DE7             ; --- END TERMS
3920   1DE7 E7            pop d
3921   1DE8 FD 43         mov [d], b
3922   1DEA             ; break; 
3923   1DEA 0A F9 1D      jmp _switch46_exit ; case break
3924   1DED             _switch46_default:
3925   1DED             ; print("Error: Unknown argument type.\n"); 
3926   1DED             ; --- START FUNCTION CALL
3927   1DED 26 0F 25      mov b, _s2 ; "Error: Unknown argument type.\n"
3928   1DF0 FD AB         swp b
3929   1DF2 D8            push b
3930   1DF3 07 79 21      call print
3931   1DF6 51 02 00      add sp, 2
3932   1DF9             ; --- END FUNCTION CALL
3933   1DF9             _switch46_exit:
3934   1DF9 0A 11 1E      jmp _if45_exit
3935   1DFC             _if45_else:
3936   1DFC             ; putchar(*format_p); 
3937   1DFC             ; --- START FUNCTION CALL
3938   1DFC FA FD FF      lea d, [bp + -3] ; $format_p
3939   1DFF 2A            mov b, [d]
3940   1E00 38 00 00      mov c, 0
3941   1E03 74            mov d, b
3942   1E04 32            mov bl, [d]
3943   1E05 A7 00         mov bh, 0
3944   1E07 38 00 00      mov c, 0
3945   1E0A DD            push bl
3946   1E0B 07 B8 1F      call putchar
3947   1E0E 51 01 00      add sp, 1
3948   1E11             ; --- END FUNCTION CALL
3949   1E11             _if45_exit:
3950   1E11             _if44_exit:
3951   1E11             ; format_p++; 
3952   1E11 FA FD FF      lea d, [bp + -3] ; $format_p
3953   1E14 2A            mov b, [d]
3954   1E15 38 00 00      mov c, 0
3955   1E18 FD 77         inc b
3956   1E1A FA FD FF      lea d, [bp + -3] ; $format_p
3957   1E1D FD 43         mov [d], b
3958   1E1F FD 7D         dec b
3959   1E21             _for43_update:
3960   1E21 0A 65 1B      jmp _for43_cond
3961   1E24             _for43_exit:
3962   1E24 F9            leave
3963   1E25 09            ret
3964   1E26             
3965   1E26             print_signed_long:
3966   1E26 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3967   1E29             ; char digits[10]; 
3968   1E29 52 0A 00      sub sp, 10
3969   1E2C             ; int i = 0; 
3970   1E2C 52 02 00      sub sp, 2
3971   1E2F             ; --- START LOCAL VAR INITIALIZATION
3972   1E2F FA F5 FF      lea d, [bp + -11] ; $i
3973   1E32 DA            push d
3974   1E33 FD 2E 00 00   mov32 cb, $00000000
3974   1E37 00 00 
3975   1E39 E7            pop d
3976   1E3A FD 43         mov [d], b
3977   1E3C             ; --- END LOCAL VAR INITIALIZATION
3978   1E3C             ; if (num < 0) { 
3979   1E3C             _if50_cond:
3980   1E3C FA 05 00      lea d, [bp + 5] ; $num
3981   1E3F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3982   1E42 FD 39         mov c, b ; And place it into C
3983   1E44 2A            mov b, [d] ; Lower Word in B
3984   1E45             ; --- START RELATIONAL
3985   1E45 D7            push a
3986   1E46 FD D8         push g
3987   1E48 11            mov a, b
3988   1E49 FD 7A         mov g, c
3989   1E4B FD 2E 00 00   mov32 cb, $00000000
3989   1E4F 00 00 
3990   1E51 38 00 00      mov c, 0
3991   1E54 FD AF         cmp32 ga, cb
3992   1E56 FD 73         slt ; <
3993   1E58 FD F1         pop g
3994   1E5A E4            pop a
3995   1E5B             ; --- END RELATIONAL
3996   1E5B C0 00 00      cmp b, 0
3997   1E5E C6 90 1E      je _if50_else
3998   1E61             _if50_TRUE:
3999   1E61             ; putchar('-'); 
4000   1E61             ; --- START FUNCTION CALL
4001   1E61 FD 2E 2D 00   mov32 cb, $0000002d
4001   1E65 00 00 
4002   1E67 DD            push bl
4003   1E68 07 B8 1F      call putchar
4004   1E6B 51 01 00      add sp, 1
4005   1E6E             ; --- END FUNCTION CALL
4006   1E6E             ; num = -num; 
4007   1E6E FA 05 00      lea d, [bp + 5] ; $num
4008   1E71 DA            push d
4009   1E72 FA 05 00      lea d, [bp + 5] ; $num
4010   1E75 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4011   1E78 FD 39         mov c, b ; And place it into C
4012   1E7A 2A            mov b, [d] ; Lower Word in B
4013   1E7B 12            mov a, c
4014   1E7C 95            not a
4015   1E7D 97            not b
4016   1E7E 55 01 00      add b, 1
4017   1E81 5B 00 00      adc a, 0
4018   1E84 39            mov c, a
4019   1E85 E7            pop d
4020   1E86 FD 43         mov [d], b
4021   1E88 28            mov b, c
4022   1E89 FD 44 02 00   mov [d + 2], b
4023   1E8D 0A C7 1E      jmp _if50_exit
4024   1E90             _if50_else:
4025   1E90             ; if (num == 0) { 
4026   1E90             _if51_cond:
4027   1E90 FA 05 00      lea d, [bp + 5] ; $num
4028   1E93 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4029   1E96 FD 39         mov c, b ; And place it into C
4030   1E98 2A            mov b, [d] ; Lower Word in B
4031   1E99             ; --- START RELATIONAL
4032   1E99 D7            push a
4033   1E9A FD D8         push g
4034   1E9C 11            mov a, b
4035   1E9D FD 7A         mov g, c
4036   1E9F FD 2E 00 00   mov32 cb, $00000000
4036   1EA3 00 00 
4037   1EA5 38 00 00      mov c, 0
4038   1EA8 FD AF         cmp32 ga, cb
4039   1EAA FD 71         seq ; ==
4040   1EAC FD F1         pop g
4041   1EAE E4            pop a
4042   1EAF             ; --- END RELATIONAL
4043   1EAF C0 00 00      cmp b, 0
4044   1EB2 C6 C7 1E      je _if51_exit
4045   1EB5             _if51_TRUE:
4046   1EB5             ; putchar('0'); 
4047   1EB5             ; --- START FUNCTION CALL
4048   1EB5 FD 2E 30 00   mov32 cb, $00000030
4048   1EB9 00 00 
4049   1EBB DD            push bl
4050   1EBC 07 B8 1F      call putchar
4051   1EBF 51 01 00      add sp, 1
4052   1EC2             ; --- END FUNCTION CALL
4053   1EC2             ; return; 
4054   1EC2 F9            leave
4055   1EC3 09            ret
4056   1EC4 0A C7 1E      jmp _if51_exit
4057   1EC7             _if51_exit:
4058   1EC7             _if50_exit:
4059   1EC7             ; while (num > 0) { 
4060   1EC7             _while52_cond:
4061   1EC7 FA 05 00      lea d, [bp + 5] ; $num
4062   1ECA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4063   1ECD FD 39         mov c, b ; And place it into C
4064   1ECF 2A            mov b, [d] ; Lower Word in B
4065   1ED0             ; --- START RELATIONAL
4066   1ED0 D7            push a
4067   1ED1 FD D8         push g
4068   1ED3 11            mov a, b
4069   1ED4 FD 7A         mov g, c
4070   1ED6 FD 2E 00 00   mov32 cb, $00000000
4070   1EDA 00 00 
4071   1EDC 38 00 00      mov c, 0
4072   1EDF FD AF         cmp32 ga, cb
4073   1EE1 FD 7F         sgt
4074   1EE3 FD F1         pop g
4075   1EE5 E4            pop a
4076   1EE6             ; --- END RELATIONAL
4077   1EE6 C0 00 00      cmp b, 0
4078   1EE9 C6 6E 1F      je _while52_exit
4079   1EEC             _while52_block:
4080   1EEC             ; digits[i] = '0' + (num % 10); 
4081   1EEC FA F7 FF      lea d, [bp + -9] ; $digits
4082   1EEF D7            push a
4083   1EF0 DA            push d
4084   1EF1 FA F5 FF      lea d, [bp + -11] ; $i
4085   1EF4 2A            mov b, [d]
4086   1EF5 38 00 00      mov c, 0
4087   1EF8 E7            pop d
4088   1EF9 5A            add d, b
4089   1EFA E4            pop a
4090   1EFB DA            push d
4091   1EFC FD 2E 30 00   mov32 cb, $00000030
4091   1F00 00 00 
4092   1F02             ; --- START TERMS
4093   1F02 D7            push a
4094   1F03 11            mov a, b
4095   1F04 FA 05 00      lea d, [bp + 5] ; $num
4096   1F07 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4097   1F0A FD 39         mov c, b ; And place it into C
4098   1F0C 2A            mov b, [d] ; Lower Word in B
4099   1F0D             ; --- START FACTORS
4100   1F0D D7            push a
4101   1F0E FD D8         push g
4102   1F10 11            mov a, b
4103   1F11 FD 7A         mov g, c
4104   1F13 FD 2E 0A 00   mov32 cb, $0000000a
4104   1F17 00 00 
4105   1F19 FD D8         push g ; save 'g' as the div instruction uses it
4106   1F1B AE            div a, b ; %, a: quotient, b: remainder
4107   1F1C 11            mov a, b
4108   1F1D FD F1         pop g
4109   1F1F FD 38         mov c, g
4110   1F21 27            mov b, a
4111   1F22 FD F1         pop g
4112   1F24 E4            pop a
4113   1F25             ; --- END FACTORS
4114   1F25 FD 22 00 00   mov g, 0
4115   1F29 FD 15         add32 cb, ga
4116   1F2B E4            pop a
4117   1F2C             ; --- END TERMS
4118   1F2C E7            pop d
4119   1F2D FD 3E         mov [d], bl
4120   1F2F             ; num = num / 10; 
4121   1F2F FA 05 00      lea d, [bp + 5] ; $num
4122   1F32 DA            push d
4123   1F33 FA 05 00      lea d, [bp + 5] ; $num
4124   1F36 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4125   1F39 FD 39         mov c, b ; And place it into C
4126   1F3B 2A            mov b, [d] ; Lower Word in B
4127   1F3C             ; --- START FACTORS
4128   1F3C D7            push a
4129   1F3D FD D8         push g
4130   1F3F 11            mov a, b
4131   1F40 FD 7A         mov g, c
4132   1F42 FD 2E 0A 00   mov32 cb, $0000000a
4132   1F46 00 00 
4133   1F48 FD D8         push g ; save 'g' as the div instruction uses it
4134   1F4A AE            div a, b ; /, a: quotient, b: remainder
4135   1F4B FD F1         pop g
4136   1F4D FD 38         mov c, g
4137   1F4F 27            mov b, a
4138   1F50 FD F1         pop g
4139   1F52 E4            pop a
4140   1F53             ; --- END FACTORS
4141   1F53 E7            pop d
4142   1F54 FD 43         mov [d], b
4143   1F56 28            mov b, c
4144   1F57 FD 44 02 00   mov [d + 2], b
4145   1F5B             ; i++; 
4146   1F5B FA F5 FF      lea d, [bp + -11] ; $i
4147   1F5E 2A            mov b, [d]
4148   1F5F 38 00 00      mov c, 0
4149   1F62 11            mov a, b
4150   1F63 FD 77         inc b
4151   1F65 FA F5 FF      lea d, [bp + -11] ; $i
4152   1F68 FD 43         mov [d], b
4153   1F6A 27            mov b, a
4154   1F6B 0A C7 1E      jmp _while52_cond
4155   1F6E             _while52_exit:
4156   1F6E             ; while (i > 0) { 
4157   1F6E             _while59_cond:
4158   1F6E FA F5 FF      lea d, [bp + -11] ; $i
4159   1F71 2A            mov b, [d]
4160   1F72 38 00 00      mov c, 0
4161   1F75             ; --- START RELATIONAL
4162   1F75 D7            push a
4163   1F76 11            mov a, b
4164   1F77 FD 2E 00 00   mov32 cb, $00000000
4164   1F7B 00 00 
4165   1F7D B0            cmp a, b
4166   1F7E FD 7F         sgt ; >
4167   1F80 E4            pop a
4168   1F81             ; --- END RELATIONAL
4169   1F81 C0 00 00      cmp b, 0
4170   1F84 C6 B6 1F      je _while59_exit
4171   1F87             _while59_block:
4172   1F87             ; i--; 
4173   1F87 FA F5 FF      lea d, [bp + -11] ; $i
4174   1F8A 2A            mov b, [d]
4175   1F8B 38 00 00      mov c, 0
4176   1F8E 11            mov a, b
4177   1F8F FD 7D         dec b
4178   1F91 FA F5 FF      lea d, [bp + -11] ; $i
4179   1F94 FD 43         mov [d], b
4180   1F96 27            mov b, a
4181   1F97             ; putchar(digits[i]); 
4182   1F97             ; --- START FUNCTION CALL
4183   1F97 FA F7 FF      lea d, [bp + -9] ; $digits
4184   1F9A D7            push a
4185   1F9B DA            push d
4186   1F9C FA F5 FF      lea d, [bp + -11] ; $i
4187   1F9F 2A            mov b, [d]
4188   1FA0 38 00 00      mov c, 0
4189   1FA3 E7            pop d
4190   1FA4 5A            add d, b
4191   1FA5 E4            pop a
4192   1FA6 32            mov bl, [d]
4193   1FA7 A7 00         mov bh, 0
4194   1FA9 38 00 00      mov c, 0
4195   1FAC DD            push bl
4196   1FAD 07 B8 1F      call putchar
4197   1FB0 51 01 00      add sp, 1
4198   1FB3             ; --- END FUNCTION CALL
4199   1FB3 0A 6E 1F      jmp _while59_cond
4200   1FB6             _while59_exit:
4201   1FB6 F9            leave
4202   1FB7 09            ret
4203   1FB8             
4204   1FB8             putchar:
4205   1FB8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4206   1FBB             ; --- BEGIN INLINE ASM SEGMENT
4207   1FBB FA 05 00      lea d, [bp + 5] ; $c
4208   1FBE 1E            mov al, [d]
4209   1FBF 23            mov ah, al
4210   1FC0 19 00         mov al, 0
4211   1FC2 05 03         syscall sys_io      ; char in AH
4212   1FC4             ; --- END INLINE ASM SEGMENT
4213   1FC4 F9            leave
4214   1FC5 09            ret
4215   1FC6             
4216   1FC6             print_unsigned_long:
4217   1FC6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4218   1FC9             ; char digits[10]; 
4219   1FC9 52 0A 00      sub sp, 10
4220   1FCC             ; int i; 
4221   1FCC 52 02 00      sub sp, 2
4222   1FCF             ; i = 0; 
4223   1FCF FA F5 FF      lea d, [bp + -11] ; $i
4224   1FD2 DA            push d
4225   1FD3 FD 2E 00 00   mov32 cb, $00000000
4225   1FD7 00 00 
4226   1FD9 E7            pop d
4227   1FDA FD 43         mov [d], b
4228   1FDC             ; if(num == 0){ 
4229   1FDC             _if60_cond:
4230   1FDC FA 05 00      lea d, [bp + 5] ; $num
4231   1FDF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4232   1FE2 FD 39         mov c, b ; And place it into C
4233   1FE4 2A            mov b, [d] ; Lower Word in B
4234   1FE5             ; --- START RELATIONAL
4235   1FE5 D7            push a
4236   1FE6 FD D8         push g
4237   1FE8 11            mov a, b
4238   1FE9 FD 7A         mov g, c
4239   1FEB FD 2E 00 00   mov32 cb, $00000000
4239   1FEF 00 00 
4240   1FF1 38 00 00      mov c, 0
4241   1FF4 FD AF         cmp32 ga, cb
4242   1FF6 FD 71         seq ; ==
4243   1FF8 FD F1         pop g
4244   1FFA E4            pop a
4245   1FFB             ; --- END RELATIONAL
4246   1FFB C0 00 00      cmp b, 0
4247   1FFE C6 13 20      je _if60_exit
4248   2001             _if60_TRUE:
4249   2001             ; putchar('0'); 
4250   2001             ; --- START FUNCTION CALL
4251   2001 FD 2E 30 00   mov32 cb, $00000030
4251   2005 00 00 
4252   2007 DD            push bl
4253   2008 07 B8 1F      call putchar
4254   200B 51 01 00      add sp, 1
4255   200E             ; --- END FUNCTION CALL
4256   200E             ; return; 
4257   200E F9            leave
4258   200F 09            ret
4259   2010 0A 13 20      jmp _if60_exit
4260   2013             _if60_exit:
4261   2013             ; while (num > 0) { 
4262   2013             _while61_cond:
4263   2013 FA 05 00      lea d, [bp + 5] ; $num
4264   2016 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4265   2019 FD 39         mov c, b ; And place it into C
4266   201B 2A            mov b, [d] ; Lower Word in B
4267   201C             ; --- START RELATIONAL
4268   201C D7            push a
4269   201D FD D8         push g
4270   201F 11            mov a, b
4271   2020 FD 7A         mov g, c
4272   2022 FD 2E 00 00   mov32 cb, $00000000
4272   2026 00 00 
4273   2028 38 00 00      mov c, 0
4274   202B FD AF         cmp32 ga, cb
4275   202D FD 81         sgu
4276   202F FD F1         pop g
4277   2031 E4            pop a
4278   2032             ; --- END RELATIONAL
4279   2032 C0 00 00      cmp b, 0
4280   2035 C6 BA 20      je _while61_exit
4281   2038             _while61_block:
4282   2038             ; digits[i] = '0' + (num % 10); 
4283   2038 FA F7 FF      lea d, [bp + -9] ; $digits
4284   203B D7            push a
4285   203C DA            push d
4286   203D FA F5 FF      lea d, [bp + -11] ; $i
4287   2040 2A            mov b, [d]
4288   2041 38 00 00      mov c, 0
4289   2044 E7            pop d
4290   2045 5A            add d, b
4291   2046 E4            pop a
4292   2047 DA            push d
4293   2048 FD 2E 30 00   mov32 cb, $00000030
4293   204C 00 00 
4294   204E             ; --- START TERMS
4295   204E D7            push a
4296   204F 11            mov a, b
4297   2050 FA 05 00      lea d, [bp + 5] ; $num
4298   2053 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4299   2056 FD 39         mov c, b ; And place it into C
4300   2058 2A            mov b, [d] ; Lower Word in B
4301   2059             ; --- START FACTORS
4302   2059 D7            push a
4303   205A FD D8         push g
4304   205C 11            mov a, b
4305   205D FD 7A         mov g, c
4306   205F FD 2E 0A 00   mov32 cb, $0000000a
4306   2063 00 00 
4307   2065 FD D8         push g ; save 'g' as the div instruction uses it
4308   2067 AE            div a, b ; %, a: quotient, b: remainder
4309   2068 11            mov a, b
4310   2069 FD F1         pop g
4311   206B FD 38         mov c, g
4312   206D 27            mov b, a
4313   206E FD F1         pop g
4314   2070 E4            pop a
4315   2071             ; --- END FACTORS
4316   2071 FD 22 00 00   mov g, 0
4317   2075 FD 15         add32 cb, ga
4318   2077 E4            pop a
4319   2078             ; --- END TERMS
4320   2078 E7            pop d
4321   2079 FD 3E         mov [d], bl
4322   207B             ; num = num / 10; 
4323   207B FA 05 00      lea d, [bp + 5] ; $num
4324   207E DA            push d
4325   207F FA 05 00      lea d, [bp + 5] ; $num
4326   2082 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4327   2085 FD 39         mov c, b ; And place it into C
4328   2087 2A            mov b, [d] ; Lower Word in B
4329   2088             ; --- START FACTORS
4330   2088 D7            push a
4331   2089 FD D8         push g
4332   208B 11            mov a, b
4333   208C FD 7A         mov g, c
4334   208E FD 2E 0A 00   mov32 cb, $0000000a
4334   2092 00 00 
4335   2094 FD D8         push g ; save 'g' as the div instruction uses it
4336   2096 AE            div a, b ; /, a: quotient, b: remainder
4337   2097 FD F1         pop g
4338   2099 FD 38         mov c, g
4339   209B 27            mov b, a
4340   209C FD F1         pop g
4341   209E E4            pop a
4342   209F             ; --- END FACTORS
4343   209F E7            pop d
4344   20A0 FD 43         mov [d], b
4345   20A2 28            mov b, c
4346   20A3 FD 44 02 00   mov [d + 2], b
4347   20A7             ; i++; 
4348   20A7 FA F5 FF      lea d, [bp + -11] ; $i
4349   20AA 2A            mov b, [d]
4350   20AB 38 00 00      mov c, 0
4351   20AE 11            mov a, b
4352   20AF FD 77         inc b
4353   20B1 FA F5 FF      lea d, [bp + -11] ; $i
4354   20B4 FD 43         mov [d], b
4355   20B6 27            mov b, a
4356   20B7 0A 13 20      jmp _while61_cond
4357   20BA             _while61_exit:
4358   20BA             ; while (i > 0) { 
4359   20BA             _while68_cond:
4360   20BA FA F5 FF      lea d, [bp + -11] ; $i
4361   20BD 2A            mov b, [d]
4362   20BE 38 00 00      mov c, 0
4363   20C1             ; --- START RELATIONAL
4364   20C1 D7            push a
4365   20C2 11            mov a, b
4366   20C3 FD 2E 00 00   mov32 cb, $00000000
4366   20C7 00 00 
4367   20C9 B0            cmp a, b
4368   20CA FD 7F         sgt ; >
4369   20CC E4            pop a
4370   20CD             ; --- END RELATIONAL
4371   20CD C0 00 00      cmp b, 0
4372   20D0 C6 02 21      je _while68_exit
4373   20D3             _while68_block:
4374   20D3             ; i--; 
4375   20D3 FA F5 FF      lea d, [bp + -11] ; $i
4376   20D6 2A            mov b, [d]
4377   20D7 38 00 00      mov c, 0
4378   20DA 11            mov a, b
4379   20DB FD 7D         dec b
4380   20DD FA F5 FF      lea d, [bp + -11] ; $i
4381   20E0 FD 43         mov [d], b
4382   20E2 27            mov b, a
4383   20E3             ; putchar(digits[i]); 
4384   20E3             ; --- START FUNCTION CALL
4385   20E3 FA F7 FF      lea d, [bp + -9] ; $digits
4386   20E6 D7            push a
4387   20E7 DA            push d
4388   20E8 FA F5 FF      lea d, [bp + -11] ; $i
4389   20EB 2A            mov b, [d]
4390   20EC 38 00 00      mov c, 0
4391   20EF E7            pop d
4392   20F0 5A            add d, b
4393   20F1 E4            pop a
4394   20F2 32            mov bl, [d]
4395   20F3 A7 00         mov bh, 0
4396   20F5 38 00 00      mov c, 0
4397   20F8 DD            push bl
4398   20F9 07 B8 1F      call putchar
4399   20FC 51 01 00      add sp, 1
4400   20FF             ; --- END FUNCTION CALL
4401   20FF 0A BA 20      jmp _while68_cond
4402   2102             _while68_exit:
4403   2102 F9            leave
4404   2103 09            ret
4405   2104             
4406   2104             printx32:
4407   2104 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4408   2107             ; --- BEGIN INLINE ASM SEGMENT
4409   2107 FA 05 00      lea d, [bp + 5] ; $hex
4410   210A 2B 02 00      mov b, [d+2]
4411   210D 07 16 21      call print_u16x_printx32
4412   2110 2A            mov b, [d]
4413   2111 07 16 21      call print_u16x_printx32
4414   2114             ; --- END INLINE ASM SEGMENT
4415   2114             ; return; 
4416   2114 F9            leave
4417   2115 09            ret
4418   2116             ; --- BEGIN INLINE ASM SEGMENT
4419   2116             print_u16x_printx32:
4420   2116 D7            push a
4421   2117 D8            push b
4422   2118 DD            push bl
4423   2119 30            mov bl, bh
4424   211A 07 38 21      call _itoa_printx32        ; convert bh to char in A
4425   211D 2F            mov bl, al        ; save al
4426   211E 19 00         mov al, 0
4427   2120 05 03         syscall sys_io        ; display AH
4428   2122 24            mov ah, bl        ; retrieve al
4429   2123 19 00         mov al, 0
4430   2125 05 03         syscall sys_io        ; display AL
4431   2127 EA            pop bl
4432   2128 07 38 21      call _itoa_printx32        ; convert bh to char in A
4433   212B 2F            mov bl, al        ; save al
4434   212C 19 00         mov al, 0
4435   212E 05 03         syscall sys_io        ; display AH
4436   2130 24            mov ah, bl        ; retrieve al
4437   2131 19 00         mov al, 0
4438   2133 05 03         syscall sys_io        ; display AL
4439   2135 E5            pop b
4440   2136 E4            pop a
4441   2137 09            ret
4442   2138             _itoa_printx32:
4443   2138 DA            push d
4444   2139 D8            push b
4445   213A A7 00         mov bh, 0
4446   213C FD A4 04      shr bl, 4  
4447   213F 74            mov d, b
4448   2140 1F 52 21      mov al, [d + s_hex_digits_printx32]
4449   2143 23            mov ah, al
4450   2144 E5            pop b
4451   2145 D8            push b
4452   2146 A7 00         mov bh, 0
4453   2148 FD 87 0F      and bl, $0F
4454   214B 74            mov d, b
4455   214C 1F 52 21      mov al, [d + s_hex_digits_printx32]
4456   214F E5            pop b
4457   2150 E7            pop d
4458   2151 09            ret
4459   2152 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
4459   2156 34 35 36 37 
4459   215A 38 39 41 42 
4459   215E 43 44 45 46 
4460   2162             ; --- END INLINE ASM SEGMENT
4461   2162 F9            leave
4462   2163 09            ret
4463   2164             
4464   2164             err:
4465   2164 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4466   2167             ; print(e); 
4467   2167             ; --- START FUNCTION CALL
4468   2167 FA 05 00      lea d, [bp + 5] ; $e
4469   216A 2A            mov b, [d]
4470   216B 38 00 00      mov c, 0
4471   216E FD AB         swp b
4472   2170 D8            push b
4473   2171 07 79 21      call print
4474   2174 51 02 00      add sp, 2
4475   2177             ; --- END FUNCTION CALL
4476   2177 F9            leave
4477   2178 09            ret
4478   2179             
4479   2179             print:
4480   2179 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4481   217C             ; --- BEGIN INLINE ASM SEGMENT
4482   217C FA 05 00      lea d, [bp + 5] ; $s
4483   217F FD 2A         mov d, [d]
4484   2181             _puts_L1_print:
4485   2181 1E            mov al, [d]
4486   2182 B9 00         cmp al, 0
4487   2184 C6 90 21      jz _puts_END_print
4488   2187 23            mov ah, al
4489   2188 19 00         mov al, 0
4490   218A 05 03         syscall sys_io
4491   218C 79            inc d
4492   218D 0A 81 21      jmp _puts_L1_print
4493   2190             _puts_END_print:
4494   2190             ; --- END INLINE ASM SEGMENT
4495   2190 F9            leave
4496   2191 09            ret
4497   2192             
4498   2192             print_signed:
4499   2192 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4500   2195             ; char digits[5]; 
4501   2195 52 05 00      sub sp, 5
4502   2198             ; int i = 0; 
4503   2198 52 02 00      sub sp, 2
4504   219B             ; --- START LOCAL VAR INITIALIZATION
4505   219B FA FA FF      lea d, [bp + -6] ; $i
4506   219E DA            push d
4507   219F FD 2E 00 00   mov32 cb, $00000000
4507   21A3 00 00 
4508   21A5 E7            pop d
4509   21A6 FD 43         mov [d], b
4510   21A8             ; --- END LOCAL VAR INITIALIZATION
4511   21A8             ; if (num < 0) { 
4512   21A8             _if69_cond:
4513   21A8 FA 05 00      lea d, [bp + 5] ; $num
4514   21AB 2A            mov b, [d]
4515   21AC 38 00 00      mov c, 0
4516   21AF             ; --- START RELATIONAL
4517   21AF D7            push a
4518   21B0 11            mov a, b
4519   21B1 FD 2E 00 00   mov32 cb, $00000000
4519   21B5 00 00 
4520   21B7 B0            cmp a, b
4521   21B8 FD 73         slt ; < (signed)
4522   21BA E4            pop a
4523   21BB             ; --- END RELATIONAL
4524   21BB C0 00 00      cmp b, 0
4525   21BE C6 E1 21      je _if69_else
4526   21C1             _if69_TRUE:
4527   21C1             ; putchar('-'); 
4528   21C1             ; --- START FUNCTION CALL
4529   21C1 FD 2E 2D 00   mov32 cb, $0000002d
4529   21C5 00 00 
4530   21C7 DD            push bl
4531   21C8 07 B8 1F      call putchar
4532   21CB 51 01 00      add sp, 1
4533   21CE             ; --- END FUNCTION CALL
4534   21CE             ; num = -num; 
4535   21CE FA 05 00      lea d, [bp + 5] ; $num
4536   21D1 DA            push d
4537   21D2 FA 05 00      lea d, [bp + 5] ; $num
4538   21D5 2A            mov b, [d]
4539   21D6 38 00 00      mov c, 0
4540   21D9 FD 97         neg b
4541   21DB E7            pop d
4542   21DC FD 43         mov [d], b
4543   21DE 0A 0C 22      jmp _if69_exit
4544   21E1             _if69_else:
4545   21E1             ; if (num == 0) { 
4546   21E1             _if70_cond:
4547   21E1 FA 05 00      lea d, [bp + 5] ; $num
4548   21E4 2A            mov b, [d]
4549   21E5 38 00 00      mov c, 0
4550   21E8             ; --- START RELATIONAL
4551   21E8 D7            push a
4552   21E9 11            mov a, b
4553   21EA FD 2E 00 00   mov32 cb, $00000000
4553   21EE 00 00 
4554   21F0 B0            cmp a, b
4555   21F1 FD 71         seq ; ==
4556   21F3 E4            pop a
4557   21F4             ; --- END RELATIONAL
4558   21F4 C0 00 00      cmp b, 0
4559   21F7 C6 0C 22      je _if70_exit
4560   21FA             _if70_TRUE:
4561   21FA             ; putchar('0'); 
4562   21FA             ; --- START FUNCTION CALL
4563   21FA FD 2E 30 00   mov32 cb, $00000030
4563   21FE 00 00 
4564   2200 DD            push bl
4565   2201 07 B8 1F      call putchar
4566   2204 51 01 00      add sp, 1
4567   2207             ; --- END FUNCTION CALL
4568   2207             ; return; 
4569   2207 F9            leave
4570   2208 09            ret
4571   2209 0A 0C 22      jmp _if70_exit
4572   220C             _if70_exit:
4573   220C             _if69_exit:
4574   220C             ; while (num > 0) { 
4575   220C             _while71_cond:
4576   220C FA 05 00      lea d, [bp + 5] ; $num
4577   220F 2A            mov b, [d]
4578   2210 38 00 00      mov c, 0
4579   2213             ; --- START RELATIONAL
4580   2213 D7            push a
4581   2214 11            mov a, b
4582   2215 FD 2E 00 00   mov32 cb, $00000000
4582   2219 00 00 
4583   221B B0            cmp a, b
4584   221C FD 7F         sgt ; >
4585   221E E4            pop a
4586   221F             ; --- END RELATIONAL
4587   221F C0 00 00      cmp b, 0
4588   2222 C6 99 22      je _while71_exit
4589   2225             _while71_block:
4590   2225             ; digits[i] = '0' + (num % 10); 
4591   2225 FA FC FF      lea d, [bp + -4] ; $digits
4592   2228 D7            push a
4593   2229 DA            push d
4594   222A FA FA FF      lea d, [bp + -6] ; $i
4595   222D 2A            mov b, [d]
4596   222E 38 00 00      mov c, 0
4597   2231 E7            pop d
4598   2232 5A            add d, b
4599   2233 E4            pop a
4600   2234 DA            push d
4601   2235 FD 2E 30 00   mov32 cb, $00000030
4601   2239 00 00 
4602   223B             ; --- START TERMS
4603   223B D7            push a
4604   223C 11            mov a, b
4605   223D FA 05 00      lea d, [bp + 5] ; $num
4606   2240 2A            mov b, [d]
4607   2241 38 00 00      mov c, 0
4608   2244             ; --- START FACTORS
4609   2244 D7            push a
4610   2245 FD D8         push g
4611   2247 11            mov a, b
4612   2248 FD 7A         mov g, c
4613   224A FD 2E 0A 00   mov32 cb, $0000000a
4613   224E 00 00 
4614   2250 FD D8         push g ; save 'g' as the div instruction uses it
4615   2252 AE            div a, b ; %, a: quotient, b: remainder
4616   2253 11            mov a, b
4617   2254 FD F1         pop g
4618   2256 FD 38         mov c, g
4619   2258 27            mov b, a
4620   2259 FD F1         pop g
4621   225B E4            pop a
4622   225C             ; --- END FACTORS
4623   225C 56            add b, a
4624   225D E4            pop a
4625   225E             ; --- END TERMS
4626   225E E7            pop d
4627   225F FD 3E         mov [d], bl
4628   2261             ; num = num / 10; 
4629   2261 FA 05 00      lea d, [bp + 5] ; $num
4630   2264 DA            push d
4631   2265 FA 05 00      lea d, [bp + 5] ; $num
4632   2268 2A            mov b, [d]
4633   2269 38 00 00      mov c, 0
4634   226C             ; --- START FACTORS
4635   226C D7            push a
4636   226D FD D8         push g
4637   226F 11            mov a, b
4638   2270 FD 7A         mov g, c
4639   2272 FD 2E 0A 00   mov32 cb, $0000000a
4639   2276 00 00 
4640   2278 FD D8         push g ; save 'g' as the div instruction uses it
4641   227A AE            div a, b ; /, a: quotient, b: remainder
4642   227B FD F1         pop g
4643   227D FD 38         mov c, g
4644   227F 27            mov b, a
4645   2280 FD F1         pop g
4646   2282 E4            pop a
4647   2283             ; --- END FACTORS
4648   2283 E7            pop d
4649   2284 FD 43         mov [d], b
4650   2286             ; i++; 
4651   2286 FA FA FF      lea d, [bp + -6] ; $i
4652   2289 2A            mov b, [d]
4653   228A 38 00 00      mov c, 0
4654   228D 11            mov a, b
4655   228E FD 77         inc b
4656   2290 FA FA FF      lea d, [bp + -6] ; $i
4657   2293 FD 43         mov [d], b
4658   2295 27            mov b, a
4659   2296 0A 0C 22      jmp _while71_cond
4660   2299             _while71_exit:
4661   2299             ; while (i > 0) { 
4662   2299             _while78_cond:
4663   2299 FA FA FF      lea d, [bp + -6] ; $i
4664   229C 2A            mov b, [d]
4665   229D 38 00 00      mov c, 0
4666   22A0             ; --- START RELATIONAL
4667   22A0 D7            push a
4668   22A1 11            mov a, b
4669   22A2 FD 2E 00 00   mov32 cb, $00000000
4669   22A6 00 00 
4670   22A8 B0            cmp a, b
4671   22A9 FD 7F         sgt ; >
4672   22AB E4            pop a
4673   22AC             ; --- END RELATIONAL
4674   22AC C0 00 00      cmp b, 0
4675   22AF C6 E1 22      je _while78_exit
4676   22B2             _while78_block:
4677   22B2             ; i--; 
4678   22B2 FA FA FF      lea d, [bp + -6] ; $i
4679   22B5 2A            mov b, [d]
4680   22B6 38 00 00      mov c, 0
4681   22B9 11            mov a, b
4682   22BA FD 7D         dec b
4683   22BC FA FA FF      lea d, [bp + -6] ; $i
4684   22BF FD 43         mov [d], b
4685   22C1 27            mov b, a
4686   22C2             ; putchar(digits[i]); 
4687   22C2             ; --- START FUNCTION CALL
4688   22C2 FA FC FF      lea d, [bp + -4] ; $digits
4689   22C5 D7            push a
4690   22C6 DA            push d
4691   22C7 FA FA FF      lea d, [bp + -6] ; $i
4692   22CA 2A            mov b, [d]
4693   22CB 38 00 00      mov c, 0
4694   22CE E7            pop d
4695   22CF 5A            add d, b
4696   22D0 E4            pop a
4697   22D1 32            mov bl, [d]
4698   22D2 A7 00         mov bh, 0
4699   22D4 38 00 00      mov c, 0
4700   22D7 DD            push bl
4701   22D8 07 B8 1F      call putchar
4702   22DB 51 01 00      add sp, 1
4703   22DE             ; --- END FUNCTION CALL
4704   22DE 0A 99 22      jmp _while78_cond
4705   22E1             _while78_exit:
4706   22E1 F9            leave
4707   22E2 09            ret
4708   22E3             
4709   22E3             print_unsigned:
4710   22E3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4711   22E6             ; char digits[5]; 
4712   22E6 52 05 00      sub sp, 5
4713   22E9             ; int i; 
4714   22E9 52 02 00      sub sp, 2
4715   22EC             ; i = 0; 
4716   22EC FA FA FF      lea d, [bp + -6] ; $i
4717   22EF DA            push d
4718   22F0 FD 2E 00 00   mov32 cb, $00000000
4718   22F4 00 00 
4719   22F6 E7            pop d
4720   22F7 FD 43         mov [d], b
4721   22F9             ; if(num == 0){ 
4722   22F9             _if79_cond:
4723   22F9 FA 05 00      lea d, [bp + 5] ; $num
4724   22FC 2A            mov b, [d]
4725   22FD 38 00 00      mov c, 0
4726   2300             ; --- START RELATIONAL
4727   2300 D7            push a
4728   2301 11            mov a, b
4729   2302 FD 2E 00 00   mov32 cb, $00000000
4729   2306 00 00 
4730   2308 B0            cmp a, b
4731   2309 FD 71         seq ; ==
4732   230B E4            pop a
4733   230C             ; --- END RELATIONAL
4734   230C C0 00 00      cmp b, 0
4735   230F C6 24 23      je _if79_exit
4736   2312             _if79_TRUE:
4737   2312             ; putchar('0'); 
4738   2312             ; --- START FUNCTION CALL
4739   2312 FD 2E 30 00   mov32 cb, $00000030
4739   2316 00 00 
4740   2318 DD            push bl
4741   2319 07 B8 1F      call putchar
4742   231C 51 01 00      add sp, 1
4743   231F             ; --- END FUNCTION CALL
4744   231F             ; return; 
4745   231F F9            leave
4746   2320 09            ret
4747   2321 0A 24 23      jmp _if79_exit
4748   2324             _if79_exit:
4749   2324             ; while (num > 0) { 
4750   2324             _while80_cond:
4751   2324 FA 05 00      lea d, [bp + 5] ; $num
4752   2327 2A            mov b, [d]
4753   2328 38 00 00      mov c, 0
4754   232B             ; --- START RELATIONAL
4755   232B D7            push a
4756   232C 11            mov a, b
4757   232D FD 2E 00 00   mov32 cb, $00000000
4757   2331 00 00 
4758   2333 B0            cmp a, b
4759   2334 FD 81         sgu ; > (unsigned)
4760   2336 E4            pop a
4761   2337             ; --- END RELATIONAL
4762   2337 C0 00 00      cmp b, 0
4763   233A C6 B1 23      je _while80_exit
4764   233D             _while80_block:
4765   233D             ; digits[i] = '0' + (num % 10); 
4766   233D FA FC FF      lea d, [bp + -4] ; $digits
4767   2340 D7            push a
4768   2341 DA            push d
4769   2342 FA FA FF      lea d, [bp + -6] ; $i
4770   2345 2A            mov b, [d]
4771   2346 38 00 00      mov c, 0
4772   2349 E7            pop d
4773   234A 5A            add d, b
4774   234B E4            pop a
4775   234C DA            push d
4776   234D FD 2E 30 00   mov32 cb, $00000030
4776   2351 00 00 
4777   2353             ; --- START TERMS
4778   2353 D7            push a
4779   2354 11            mov a, b
4780   2355 FA 05 00      lea d, [bp + 5] ; $num
4781   2358 2A            mov b, [d]
4782   2359 38 00 00      mov c, 0
4783   235C             ; --- START FACTORS
4784   235C D7            push a
4785   235D FD D8         push g
4786   235F 11            mov a, b
4787   2360 FD 7A         mov g, c
4788   2362 FD 2E 0A 00   mov32 cb, $0000000a
4788   2366 00 00 
4789   2368 FD D8         push g ; save 'g' as the div instruction uses it
4790   236A AE            div a, b ; %, a: quotient, b: remainder
4791   236B 11            mov a, b
4792   236C FD F1         pop g
4793   236E FD 38         mov c, g
4794   2370 27            mov b, a
4795   2371 FD F1         pop g
4796   2373 E4            pop a
4797   2374             ; --- END FACTORS
4798   2374 56            add b, a
4799   2375 E4            pop a
4800   2376             ; --- END TERMS
4801   2376 E7            pop d
4802   2377 FD 3E         mov [d], bl
4803   2379             ; num = num / 10; 
4804   2379 FA 05 00      lea d, [bp + 5] ; $num
4805   237C DA            push d
4806   237D FA 05 00      lea d, [bp + 5] ; $num
4807   2380 2A            mov b, [d]
4808   2381 38 00 00      mov c, 0
4809   2384             ; --- START FACTORS
4810   2384 D7            push a
4811   2385 FD D8         push g
4812   2387 11            mov a, b
4813   2388 FD 7A         mov g, c
4814   238A FD 2E 0A 00   mov32 cb, $0000000a
4814   238E 00 00 
4815   2390 FD D8         push g ; save 'g' as the div instruction uses it
4816   2392 AE            div a, b ; /, a: quotient, b: remainder
4817   2393 FD F1         pop g
4818   2395 FD 38         mov c, g
4819   2397 27            mov b, a
4820   2398 FD F1         pop g
4821   239A E4            pop a
4822   239B             ; --- END FACTORS
4823   239B E7            pop d
4824   239C FD 43         mov [d], b
4825   239E             ; i++; 
4826   239E FA FA FF      lea d, [bp + -6] ; $i
4827   23A1 2A            mov b, [d]
4828   23A2 38 00 00      mov c, 0
4829   23A5 11            mov a, b
4830   23A6 FD 77         inc b
4831   23A8 FA FA FF      lea d, [bp + -6] ; $i
4832   23AB FD 43         mov [d], b
4833   23AD 27            mov b, a
4834   23AE 0A 24 23      jmp _while80_cond
4835   23B1             _while80_exit:
4836   23B1             ; while (i > 0) { 
4837   23B1             _while87_cond:
4838   23B1 FA FA FF      lea d, [bp + -6] ; $i
4839   23B4 2A            mov b, [d]
4840   23B5 38 00 00      mov c, 0
4841   23B8             ; --- START RELATIONAL
4842   23B8 D7            push a
4843   23B9 11            mov a, b
4844   23BA FD 2E 00 00   mov32 cb, $00000000
4844   23BE 00 00 
4845   23C0 B0            cmp a, b
4846   23C1 FD 7F         sgt ; >
4847   23C3 E4            pop a
4848   23C4             ; --- END RELATIONAL
4849   23C4 C0 00 00      cmp b, 0
4850   23C7 C6 F9 23      je _while87_exit
4851   23CA             _while87_block:
4852   23CA             ; i--; 
4853   23CA FA FA FF      lea d, [bp + -6] ; $i
4854   23CD 2A            mov b, [d]
4855   23CE 38 00 00      mov c, 0
4856   23D1 11            mov a, b
4857   23D2 FD 7D         dec b
4858   23D4 FA FA FF      lea d, [bp + -6] ; $i
4859   23D7 FD 43         mov [d], b
4860   23D9 27            mov b, a
4861   23DA             ; putchar(digits[i]); 
4862   23DA             ; --- START FUNCTION CALL
4863   23DA FA FC FF      lea d, [bp + -4] ; $digits
4864   23DD D7            push a
4865   23DE DA            push d
4866   23DF FA FA FF      lea d, [bp + -6] ; $i
4867   23E2 2A            mov b, [d]
4868   23E3 38 00 00      mov c, 0
4869   23E6 E7            pop d
4870   23E7 5A            add d, b
4871   23E8 E4            pop a
4872   23E9 32            mov bl, [d]
4873   23EA A7 00         mov bh, 0
4874   23EC 38 00 00      mov c, 0
4875   23EF DD            push bl
4876   23F0 07 B8 1F      call putchar
4877   23F3 51 01 00      add sp, 1
4878   23F6             ; --- END FUNCTION CALL
4879   23F6 0A B1 23      jmp _while87_cond
4880   23F9             _while87_exit:
4881   23F9 F9            leave
4882   23FA 09            ret
4883   23FB             
4884   23FB             printx16:
4885   23FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
4886   23FE             ; --- BEGIN INLINE ASM SEGMENT
4887   23FE FA 05 00      lea d, [bp + 5] ; $hex
4888   2401 2A            mov b, [d]
4889   2402             print_u16x_printx16:
4890   2402 DD            push bl
4891   2403 30            mov bl, bh
4892   2404 07 21 24      call _itoa_printx16        ; convert bh to char in A
4893   2407 2F            mov bl, al        ; save al
4894   2408 19 00         mov al, 0
4895   240A 05 03         syscall sys_io        ; display AH
4896   240C 24            mov ah, bl        ; retrieve al
4897   240D 19 00         mov al, 0
4898   240F 05 03         syscall sys_io        ; display AL
4899   2411 EA            pop bl
4900   2412 07 21 24      call _itoa_printx16        ; convert bh to char in A
4901   2415 2F            mov bl, al        ; save al
4902   2416 19 00         mov al, 0
4903   2418 05 03         syscall sys_io        ; display AH
4904   241A 24            mov ah, bl        ; retrieve al
4905   241B 19 00         mov al, 0
4906   241D 05 03         syscall sys_io        ; display AL
4907   241F             ; --- END INLINE ASM SEGMENT
4908   241F             ; return; 
4909   241F F9            leave
4910   2420 09            ret
4911   2421             ; --- BEGIN INLINE ASM SEGMENT
4912   2421             _itoa_printx16:
4913   2421 DA            push d
4914   2422 D8            push b
4915   2423 A7 00         mov bh, 0
4916   2425 FD A4 04      shr bl, 4  
4917   2428 74            mov d, b
4918   2429 1F 3B 24      mov al, [d + s_hex_digits_printx16]
4919   242C 23            mov ah, al
4920   242D E5            pop b
4921   242E D8            push b
4922   242F A7 00         mov bh, 0
4923   2431 FD 87 0F      and bl, $0F
4924   2434 74            mov d, b
4925   2435 1F 3B 24      mov al, [d + s_hex_digits_printx16]
4926   2438 E5            pop b
4927   2439 E7            pop d
4928   243A 09            ret
4929   243B 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
4929   243F 34 35 36 37 
4929   2443 38 39 41 42 
4929   2447 43 44 45 46 
4930   244B             ; --- END INLINE ASM SEGMENT
4931   244B F9            leave
4932   244C 09            ret
4933   244D             ; --- END TEXT SEGMENT
4934   244D             
4935   244D             ; --- BEGIN DATA SEGMENT
4936   244D 30 31 32 33 _gca1_data: .db $30,$31,$32,$33,$34,
4936   2451 34 
4937   2452 00 00 01 00 _gia1_data: .dw $0000,$0001,$0002,$0003,$0004,
4937   2456 02 00 03 00 
4937   245A 04 00 
4938   245C 00 00 00 00 _gca2_data: .fill 25, 0
4938   2460 00 00 00 00 
4938   2464 00 00 00 00 
4938   2468 00 00 00 00 
4938   246C 00 00 00 00 
4938   2470 00 00 00 00 
4938   2474 00 
4939   2475 00 00 00 00 _gia2_data: .fill 50, 0
4939   2479 00 00 00 00 
4939   247D 00 00 00 00 
4939   2481 00 00 00 00 
4939   2485 00 00 00 00 
4939   2489 00 00 00 00 
4939   248D 00 00 00 00 
4939   2491 00 00 00 00 
4939   2495 00 00 00 00 
4939   2499 00 00 00 00 
4939   249D 00 00 00 00 
4939   24A1 00 00 00 00 
4939   24A5 00 00 
4940   24A7 00 00 00 00 _test6_struct_data: .fill 18, 0
4940   24AB 00 00 00 00 
4940   24AF 00 00 00 00 
4940   24B3 00 00 00 00 
4940   24B7 00 00 
4941   24B9 00 00 00 00 _test7_struct_data: .fill 36, 0
4941   24BD 00 00 00 00 
4941   24C1 00 00 00 00 
4941   24C5 00 00 00 00 
4941   24C9 00 00 00 00 
4941   24CD 00 00 00 00 
4941   24D1 00 00 00 00 
4941   24D5 00 00 00 00 
4941   24D9 00 00 00 00 
4942   24DD 54 65 73 74 _s0: .db "Test %d, Result: %d\n", 0
4942   24E1 20 25 64 2C 
4942   24E5 20 52 65 73 
4942   24E9 75 6C 74 3A 
4942   24ED 20 25 64 0A 
4942   24F1 00 
4943   24F2 55 6E 65 78 _s1: .db "Unexpected format in printf.", 0
4943   24F6 70 65 63 74 
4943   24FA 65 64 20 66 
4943   24FE 6F 72 6D 61 
4943   2502 74 20 69 6E 
4943   2506 20 70 72 69 
4943   250A 6E 74 66 2E 
4943   250E 00 
4944   250F 45 72 72 6F _s2: .db "Error: Unknown argument type.\n", 0
4944   2513 72 3A 20 55 
4944   2517 6E 6B 6E 6F 
4944   251B 77 6E 20 61 
4944   251F 72 67 75 6D 
4944   2523 65 6E 74 20 
4944   2527 74 79 70 65 
4944   252B 2E 0A 00 
4945   252E             
4946   252E 30 25       _heap_top: .dw _heap
4947   2530 00          _heap: .db 0
4948   2531             ; --- END DATA SEGMENT
4949   2531             
4950   2531             .end
tasm: Number of errors = 0
