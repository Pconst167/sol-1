0001   0000             ; --- FILENAME: ctestsuite/testsuite1.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             sys_break        .EQU  $0000
0002+  0000             sys_rtc          .EQU  $0001
0003+  0000             sys_ide          .EQU  $0002
0004+  0000             sys_io           .EQU  $0003
0005+  0000             sys_filesystem   .EQU  $0004
0006+  0000             sys_create_proc  .EQU  $0005
0007+  0000             sys_list_proc    .EQU  $0006
0008+  0000             sys_datetime     .EQU  $0007
0009+  0000             sys_reboot       .EQU  $0008
0010+  0000             sys_pause_proc   .EQU  $0009
0011+  0000             sys_resume_proc  .EQU  $000a
0012+  0000             sys_terminate_proc .EQU  $000b
0013+  0000             sys_system       .EQU  $000c
0014+  0000             sys_fdc          .EQU  $000d
0015+  0000             text_org         .EQU  $0400
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0000             
0005   0000             ; --- BEGIN TEXT SEGMENT
0006   0400             .org text_org
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; int pass[10]; 
0011   0408 52 14 00      sub sp, 20
0012   040B             ; int i; 
0013   040B 52 02 00      sub sp, 2
0014   040E             ; int nbr_tests = 10; 
0015   040E 52 02 00      sub sp, 2
0016   0411             ; --- START LOCAL VAR INITIALIZATION
0017   0411 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0018   0414 DA            push d
0019   0415 FD 2E 0A 00   mov32 cb, $0000000a
0019   0419 00 00 
0020   041B E7            pop d
0021   041C FD 43         mov [d], b
0022   041E             ; --- END LOCAL VAR INITIALIZATION
0023   041E             ; for(i = 0; i < nbr_tests; i++){ 
0024   041E             _for1_init:
0025   041E FA EB FF      lea d, [bp + -21] ; $i
0026   0421 DA            push d
0027   0422 FD 2E 00 00   mov32 cb, $00000000
0027   0426 00 00 
0028   0428 E7            pop d
0029   0429 FD 43         mov [d], b
0030   042B             _for1_cond:
0031   042B FA EB FF      lea d, [bp + -21] ; $i
0032   042E 2A            mov b, [d]
0033   042F 38 00 00      mov c, 0
0034   0432             ; --- START RELATIONAL
0035   0432 D7            push a
0036   0433 11            mov a, b
0037   0434 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0038   0437 2A            mov b, [d]
0039   0438 38 00 00      mov c, 0
0040   043B B0            cmp a, b
0041   043C FD 73         slt ; < (signed)
0042   043E E4            pop a
0043   043F             ; --- END RELATIONAL
0044   043F C0 00 00      cmp b, 0
0045   0442 C6 74 04      je _for1_exit
0046   0445             _for1_block:
0047   0445             ; pass[i] = -1; 
0048   0445 FA ED FF      lea d, [bp + -19] ; $pass
0049   0448 D7            push a
0050   0449 DA            push d
0051   044A FA EB FF      lea d, [bp + -21] ; $i
0052   044D 2A            mov b, [d]
0053   044E 38 00 00      mov c, 0
0054   0451 E7            pop d
0055   0452 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0056   0456 E4            pop a
0057   0457 DA            push d
0058   0458 FD 2E FF FF   mov32 cb, $ffffffff
0058   045C FF FF 
0059   045E E7            pop d
0060   045F FD 43         mov [d], b
0061   0461             _for1_update:
0062   0461 FA EB FF      lea d, [bp + -21] ; $i
0063   0464 2A            mov b, [d]
0064   0465 38 00 00      mov c, 0
0065   0468 11            mov a, b
0066   0469 FD 77         inc b
0067   046B FA EB FF      lea d, [bp + -21] ; $i
0068   046E FD 43         mov [d], b
0069   0470 27            mov b, a
0070   0471 0A 2B 04      jmp _for1_cond
0071   0474             _for1_exit:
0072   0474             ; pass[0] = test0(); 
0073   0474 FA ED FF      lea d, [bp + -19] ; $pass
0074   0477 D7            push a
0075   0478 DA            push d
0076   0479 FD 2E 00 00   mov32 cb, $00000000
0076   047D 00 00 
0077   047F E7            pop d
0078   0480 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0079   0484 E4            pop a
0080   0485 DA            push d
0081   0486             ; --- START FUNCTION CALL
0082   0486 07 CF 05      call test0
0083   0489 E7            pop d
0084   048A FD 43         mov [d], b
0085   048C             ; pass[1] = test1(); 
0086   048C FA ED FF      lea d, [bp + -19] ; $pass
0087   048F D7            push a
0088   0490 DA            push d
0089   0491 FD 2E 01 00   mov32 cb, $00000001
0089   0495 00 00 
0090   0497 E7            pop d
0091   0498 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0092   049C E4            pop a
0093   049D DA            push d
0094   049E             ; --- START FUNCTION CALL
0095   049E 07 22 07      call test1
0096   04A1 E7            pop d
0097   04A2 FD 43         mov [d], b
0098   04A4             ; pass[2] = test2(); 
0099   04A4 FA ED FF      lea d, [bp + -19] ; $pass
0100   04A7 D7            push a
0101   04A8 DA            push d
0102   04A9 FD 2E 02 00   mov32 cb, $00000002
0102   04AD 00 00 
0103   04AF E7            pop d
0104   04B0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0105   04B4 E4            pop a
0106   04B5 DA            push d
0107   04B6             ; --- START FUNCTION CALL
0108   04B6 07 C1 09      call test2
0109   04B9 E7            pop d
0110   04BA FD 43         mov [d], b
0111   04BC             ; pass[3] = test3(); 
0112   04BC FA ED FF      lea d, [bp + -19] ; $pass
0113   04BF D7            push a
0114   04C0 DA            push d
0115   04C1 FD 2E 03 00   mov32 cb, $00000003
0115   04C5 00 00 
0116   04C7 E7            pop d
0117   04C8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0118   04CC E4            pop a
0119   04CD DA            push d
0120   04CE             ; --- START FUNCTION CALL
0121   04CE 07 C0 0B      call test3
0122   04D1 E7            pop d
0123   04D2 FD 43         mov [d], b
0124   04D4             ; pass[4] = test4(); 
0125   04D4 FA ED FF      lea d, [bp + -19] ; $pass
0126   04D7 D7            push a
0127   04D8 DA            push d
0128   04D9 FD 2E 04 00   mov32 cb, $00000004
0128   04DD 00 00 
0129   04DF E7            pop d
0130   04E0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0131   04E4 E4            pop a
0132   04E5 DA            push d
0133   04E6             ; --- START FUNCTION CALL
0134   04E6 07 65 0E      call test4
0135   04E9 E7            pop d
0136   04EA FD 43         mov [d], b
0137   04EC             ; pass[5] = test5(); 
0138   04EC FA ED FF      lea d, [bp + -19] ; $pass
0139   04EF D7            push a
0140   04F0 DA            push d
0141   04F1 FD 2E 05 00   mov32 cb, $00000005
0141   04F5 00 00 
0142   04F7 E7            pop d
0143   04F8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0144   04FC E4            pop a
0145   04FD DA            push d
0146   04FE             ; --- START FUNCTION CALL
0147   04FE 07 E1 12      call test5
0148   0501 E7            pop d
0149   0502 FD 43         mov [d], b
0150   0504             ; pass[6] = test6(); 
0151   0504 FA ED FF      lea d, [bp + -19] ; $pass
0152   0507 D7            push a
0153   0508 DA            push d
0154   0509 FD 2E 06 00   mov32 cb, $00000006
0154   050D 00 00 
0155   050F E7            pop d
0156   0510 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0157   0514 E4            pop a
0158   0515 DA            push d
0159   0516             ; --- START FUNCTION CALL
0160   0516 07 1F 14      call test6
0161   0519 E7            pop d
0162   051A FD 43         mov [d], b
0163   051C             ; pass[7] = test7(); 
0164   051C FA ED FF      lea d, [bp + -19] ; $pass
0165   051F D7            push a
0166   0520 DA            push d
0167   0521 FD 2E 07 00   mov32 cb, $00000007
0167   0525 00 00 
0168   0527 E7            pop d
0169   0528 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0170   052C E4            pop a
0171   052D DA            push d
0172   052E             ; --- START FUNCTION CALL
0173   052E 07 D8 15      call test7
0174   0531 E7            pop d
0175   0532 FD 43         mov [d], b
0176   0534             ; pass[8] = test8(); 
0177   0534 FA ED FF      lea d, [bp + -19] ; $pass
0178   0537 D7            push a
0179   0538 DA            push d
0180   0539 FD 2E 08 00   mov32 cb, $00000008
0180   053D 00 00 
0181   053F E7            pop d
0182   0540 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0183   0544 E4            pop a
0184   0545 DA            push d
0185   0546             ; --- START FUNCTION CALL
0186   0546 07 A9 17      call test8
0187   0549 E7            pop d
0188   054A FD 43         mov [d], b
0189   054C             ; pass[9] = test9(); 
0190   054C FA ED FF      lea d, [bp + -19] ; $pass
0191   054F D7            push a
0192   0550 DA            push d
0193   0551 FD 2E 09 00   mov32 cb, $00000009
0193   0555 00 00 
0194   0557 E7            pop d
0195   0558 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0196   055C E4            pop a
0197   055D DA            push d
0198   055E             ; --- START FUNCTION CALL
0199   055E 07 65 19      call test9
0200   0561 E7            pop d
0201   0562 FD 43         mov [d], b
0202   0564             ; for(i = 0; i < nbr_tests; i++) 
0203   0564             _for2_init:
0204   0564 FA EB FF      lea d, [bp + -21] ; $i
0205   0567 DA            push d
0206   0568 FD 2E 00 00   mov32 cb, $00000000
0206   056C 00 00 
0207   056E E7            pop d
0208   056F FD 43         mov [d], b
0209   0571             _for2_cond:
0210   0571 FA EB FF      lea d, [bp + -21] ; $i
0211   0574 2A            mov b, [d]
0212   0575 38 00 00      mov c, 0
0213   0578             ; --- START RELATIONAL
0214   0578 D7            push a
0215   0579 11            mov a, b
0216   057A FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0217   057D 2A            mov b, [d]
0218   057E 38 00 00      mov c, 0
0219   0581 B0            cmp a, b
0220   0582 FD 73         slt ; < (signed)
0221   0584 E4            pop a
0222   0585             ; --- END RELATIONAL
0223   0585 C0 00 00      cmp b, 0
0224   0588 C6 CD 05      je _for2_exit
0225   058B             _for2_block:
0226   058B             ; printf("Test %d, Result: %d\n", i, pass[i]); 
0227   058B             ; --- START FUNCTION CALL
0228   058B FA ED FF      lea d, [bp + -19] ; $pass
0229   058E D7            push a
0230   058F DA            push d
0231   0590 FA EB FF      lea d, [bp + -21] ; $i
0232   0593 2A            mov b, [d]
0233   0594 38 00 00      mov c, 0
0234   0597 E7            pop d
0235   0598 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0236   059C E4            pop a
0237   059D 2A            mov b, [d]
0238   059E 38 00 00      mov c, 0
0239   05A1 FD AB         swp b
0240   05A3 D8            push b
0241   05A4 FA EB FF      lea d, [bp + -21] ; $i
0242   05A7 2A            mov b, [d]
0243   05A8 38 00 00      mov c, 0
0244   05AB FD AB         swp b
0245   05AD D8            push b
0246   05AE 26 DD 24      mov b, _s0 ; "Test %d, Result: %d\n"
0247   05B1 FD AB         swp b
0248   05B3 D8            push b
0249   05B4 07 39 1B      call printf
0250   05B7 51 06 00      add sp, 6
0251   05BA             ; --- END FUNCTION CALL
0252   05BA             _for2_update:
0253   05BA FA EB FF      lea d, [bp + -21] ; $i
0254   05BD 2A            mov b, [d]
0255   05BE 38 00 00      mov c, 0
0256   05C1 11            mov a, b
0257   05C2 FD 77         inc b
0258   05C4 FA EB FF      lea d, [bp + -21] ; $i
0259   05C7 FD 43         mov [d], b
0260   05C9 27            mov b, a
0261   05CA 0A 71 05      jmp _for2_cond
0262   05CD             _for2_exit:
0263   05CD 05 0B         syscall sys_terminate_proc
0264   05CF             
0265   05CF             test0:
0266   05CF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0267   05D2             ; int i; 
0268   05D2 52 02 00      sub sp, 2
0269   05D5             ; int pass = 1; 
0270   05D5 52 02 00      sub sp, 2
0271   05D8             ; --- START LOCAL VAR INITIALIZATION
0272   05D8 FA FD FF      lea d, [bp + -3] ; $pass
0273   05DB DA            push d
0274   05DC FD 2E 01 00   mov32 cb, $00000001
0274   05E0 00 00 
0275   05E2 E7            pop d
0276   05E3 FD 43         mov [d], b
0277   05E5             ; --- END LOCAL VAR INITIALIZATION
0278   05E5             ; for (i = 0; i < 5; i++){ 
0279   05E5             _for3_init:
0280   05E5 FA FF FF      lea d, [bp + -1] ; $i
0281   05E8 DA            push d
0282   05E9 FD 2E 00 00   mov32 cb, $00000000
0282   05ED 00 00 
0283   05EF E7            pop d
0284   05F0 FD 43         mov [d], b
0285   05F2             _for3_cond:
0286   05F2 FA FF FF      lea d, [bp + -1] ; $i
0287   05F5 2A            mov b, [d]
0288   05F6 38 00 00      mov c, 0
0289   05F9             ; --- START RELATIONAL
0290   05F9 D7            push a
0291   05FA 11            mov a, b
0292   05FB FD 2E 05 00   mov32 cb, $00000005
0292   05FF 00 00 
0293   0601 B0            cmp a, b
0294   0602 FD 73         slt ; < (signed)
0295   0604 E4            pop a
0296   0605             ; --- END RELATIONAL
0297   0605 C0 00 00      cmp b, 0
0298   0608 C6 5F 06      je _for3_exit
0299   060B             _for3_block:
0300   060B             ; gca1[i] = 'A' + i; 
0301   060B 3B 4D 24      mov d, _gca1_data ; $gca1
0302   060E D7            push a
0303   060F DA            push d
0304   0610 FA FF FF      lea d, [bp + -1] ; $i
0305   0613 2A            mov b, [d]
0306   0614 38 00 00      mov c, 0
0307   0617 E7            pop d
0308   0618 5A            add d, b
0309   0619 E4            pop a
0310   061A DA            push d
0311   061B FD 2E 41 00   mov32 cb, $00000041
0311   061F 00 00 
0312   0621             ; --- START TERMS
0313   0621 D7            push a
0314   0622 11            mov a, b
0315   0623 FA FF FF      lea d, [bp + -1] ; $i
0316   0626 2A            mov b, [d]
0317   0627 38 00 00      mov c, 0
0318   062A 56            add b, a
0319   062B E4            pop a
0320   062C             ; --- END TERMS
0321   062C E7            pop d
0322   062D FD 3E         mov [d], bl
0323   062F             ; gia1[i] = i; 
0324   062F 3B 52 24      mov d, _gia1_data ; $gia1
0325   0632 D7            push a
0326   0633 DA            push d
0327   0634 FA FF FF      lea d, [bp + -1] ; $i
0328   0637 2A            mov b, [d]
0329   0638 38 00 00      mov c, 0
0330   063B E7            pop d
0331   063C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0332   0640 E4            pop a
0333   0641 DA            push d
0334   0642 FA FF FF      lea d, [bp + -1] ; $i
0335   0645 2A            mov b, [d]
0336   0646 38 00 00      mov c, 0
0337   0649 E7            pop d
0338   064A FD 43         mov [d], b
0339   064C             _for3_update:
0340   064C FA FF FF      lea d, [bp + -1] ; $i
0341   064F 2A            mov b, [d]
0342   0650 38 00 00      mov c, 0
0343   0653 11            mov a, b
0344   0654 FD 77         inc b
0345   0656 FA FF FF      lea d, [bp + -1] ; $i
0346   0659 FD 43         mov [d], b
0347   065B 27            mov b, a
0348   065C 0A F2 05      jmp _for3_cond
0349   065F             _for3_exit:
0350   065F             ; for (i = 0; i < 5; i++){ 
0351   065F             _for4_init:
0352   065F FA FF FF      lea d, [bp + -1] ; $i
0353   0662 DA            push d
0354   0663 FD 2E 00 00   mov32 cb, $00000000
0354   0667 00 00 
0355   0669 E7            pop d
0356   066A FD 43         mov [d], b
0357   066C             _for4_cond:
0358   066C FA FF FF      lea d, [bp + -1] ; $i
0359   066F 2A            mov b, [d]
0360   0670 38 00 00      mov c, 0
0361   0673             ; --- START RELATIONAL
0362   0673 D7            push a
0363   0674 11            mov a, b
0364   0675 FD 2E 05 00   mov32 cb, $00000005
0364   0679 00 00 
0365   067B B0            cmp a, b
0366   067C FD 73         slt ; < (signed)
0367   067E E4            pop a
0368   067F             ; --- END RELATIONAL
0369   067F C0 00 00      cmp b, 0
0370   0682 C6 19 07      je _for4_exit
0371   0685             _for4_block:
0372   0685             ; if(gca1[i] != 'A' + i){ 
0373   0685             _if5_cond:
0374   0685 3B 4D 24      mov d, _gca1_data ; $gca1
0375   0688 D7            push a
0376   0689 DA            push d
0377   068A FA FF FF      lea d, [bp + -1] ; $i
0378   068D 2A            mov b, [d]
0379   068E 38 00 00      mov c, 0
0380   0691 E7            pop d
0381   0692 5A            add d, b
0382   0693 E4            pop a
0383   0694 32            mov bl, [d]
0384   0695 A7 00         mov bh, 0
0385   0697 38 00 00      mov c, 0
0386   069A             ; --- START RELATIONAL
0387   069A D7            push a
0388   069B 11            mov a, b
0389   069C FD 2E 41 00   mov32 cb, $00000041
0389   06A0 00 00 
0390   06A2             ; --- START TERMS
0391   06A2 D7            push a
0392   06A3 11            mov a, b
0393   06A4 FA FF FF      lea d, [bp + -1] ; $i
0394   06A7 2A            mov b, [d]
0395   06A8 38 00 00      mov c, 0
0396   06AB 56            add b, a
0397   06AC E4            pop a
0398   06AD             ; --- END TERMS
0399   06AD B0            cmp a, b
0400   06AE FD 72         sneq ; !=
0401   06B0 E4            pop a
0402   06B1             ; --- END RELATIONAL
0403   06B1 C0 00 00      cmp b, 0
0404   06B4 C6 CA 06      je _if5_exit
0405   06B7             _if5_TRUE:
0406   06B7             ; pass = 0; 
0407   06B7 FA FD FF      lea d, [bp + -3] ; $pass
0408   06BA DA            push d
0409   06BB FD 2E 00 00   mov32 cb, $00000000
0409   06BF 00 00 
0410   06C1 E7            pop d
0411   06C2 FD 43         mov [d], b
0412   06C4             ; break; 
0413   06C4 0A 19 07      jmp _for4_exit ; for break
0414   06C7 0A CA 06      jmp _if5_exit
0415   06CA             _if5_exit:
0416   06CA             ; if(gia1[i] != i){ 
0417   06CA             _if6_cond:
0418   06CA 3B 52 24      mov d, _gia1_data ; $gia1
0419   06CD D7            push a
0420   06CE DA            push d
0421   06CF FA FF FF      lea d, [bp + -1] ; $i
0422   06D2 2A            mov b, [d]
0423   06D3 38 00 00      mov c, 0
0424   06D6 E7            pop d
0425   06D7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0426   06DB E4            pop a
0427   06DC 2A            mov b, [d]
0428   06DD 38 00 00      mov c, 0
0429   06E0             ; --- START RELATIONAL
0430   06E0 D7            push a
0431   06E1 11            mov a, b
0432   06E2 FA FF FF      lea d, [bp + -1] ; $i
0433   06E5 2A            mov b, [d]
0434   06E6 38 00 00      mov c, 0
0435   06E9 B0            cmp a, b
0436   06EA FD 72         sneq ; !=
0437   06EC E4            pop a
0438   06ED             ; --- END RELATIONAL
0439   06ED C0 00 00      cmp b, 0
0440   06F0 C6 06 07      je _if6_exit
0441   06F3             _if6_TRUE:
0442   06F3             ; pass = 0; 
0443   06F3 FA FD FF      lea d, [bp + -3] ; $pass
0444   06F6 DA            push d
0445   06F7 FD 2E 00 00   mov32 cb, $00000000
0445   06FB 00 00 
0446   06FD E7            pop d
0447   06FE FD 43         mov [d], b
0448   0700             ; break; 
0449   0700 0A 19 07      jmp _for4_exit ; for break
0450   0703 0A 06 07      jmp _if6_exit
0451   0706             _if6_exit:
0452   0706             _for4_update:
0453   0706 FA FF FF      lea d, [bp + -1] ; $i
0454   0709 2A            mov b, [d]
0455   070A 38 00 00      mov c, 0
0456   070D 11            mov a, b
0457   070E FD 77         inc b
0458   0710 FA FF FF      lea d, [bp + -1] ; $i
0459   0713 FD 43         mov [d], b
0460   0715 27            mov b, a
0461   0716 0A 6C 06      jmp _for4_cond
0462   0719             _for4_exit:
0463   0719             ; return pass; 
0464   0719 FA FD FF      lea d, [bp + -3] ; $pass
0465   071C 2A            mov b, [d]
0466   071D 38 00 00      mov c, 0
0467   0720 F9            leave
0468   0721 09            ret
0469   0722             
0470   0722             test1:
0471   0722 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0472   0725             ; int i, j; 
0473   0725 52 02 00      sub sp, 2
0474   0728 52 02 00      sub sp, 2
0475   072B             ; int pass = 1; 
0476   072B 52 02 00      sub sp, 2
0477   072E             ; --- START LOCAL VAR INITIALIZATION
0478   072E FA FB FF      lea d, [bp + -5] ; $pass
0479   0731 DA            push d
0480   0732 FD 2E 01 00   mov32 cb, $00000001
0480   0736 00 00 
0481   0738 E7            pop d
0482   0739 FD 43         mov [d], b
0483   073B             ; --- END LOCAL VAR INITIALIZATION
0484   073B             ; for (i = 0; i < 5; i++){ 
0485   073B             _for7_init:
0486   073B FA FF FF      lea d, [bp + -1] ; $i
0487   073E DA            push d
0488   073F FD 2E 00 00   mov32 cb, $00000000
0488   0743 00 00 
0489   0745 E7            pop d
0490   0746 FD 43         mov [d], b
0491   0748             _for7_cond:
0492   0748 FA FF FF      lea d, [bp + -1] ; $i
0493   074B 2A            mov b, [d]
0494   074C 38 00 00      mov c, 0
0495   074F             ; --- START RELATIONAL
0496   074F D7            push a
0497   0750 11            mov a, b
0498   0751 FD 2E 05 00   mov32 cb, $00000005
0498   0755 00 00 
0499   0757 B0            cmp a, b
0500   0758 FD 73         slt ; < (signed)
0501   075A E4            pop a
0502   075B             ; --- END RELATIONAL
0503   075B C0 00 00      cmp b, 0
0504   075E C6 57 08      je _for7_exit
0505   0761             _for7_block:
0506   0761             ; for (j = 0; j < 5; j++){ 
0507   0761             _for8_init:
0508   0761 FA FD FF      lea d, [bp + -3] ; $j
0509   0764 DA            push d
0510   0765 FD 2E 00 00   mov32 cb, $00000000
0510   0769 00 00 
0511   076B E7            pop d
0512   076C FD 43         mov [d], b
0513   076E             _for8_cond:
0514   076E FA FD FF      lea d, [bp + -3] ; $j
0515   0771 2A            mov b, [d]
0516   0772 38 00 00      mov c, 0
0517   0775             ; --- START RELATIONAL
0518   0775 D7            push a
0519   0776 11            mov a, b
0520   0777 FD 2E 05 00   mov32 cb, $00000005
0520   077B 00 00 
0521   077D B0            cmp a, b
0522   077E FD 73         slt ; < (signed)
0523   0780 E4            pop a
0524   0781             ; --- END RELATIONAL
0525   0781 C0 00 00      cmp b, 0
0526   0784 C6 44 08      je _for8_exit
0527   0787             _for8_block:
0528   0787             ; gca2[i][j] = 'A' + i + j; 
0529   0787 3B 5C 24      mov d, _gca2_data ; $gca2
0530   078A D7            push a
0531   078B DA            push d
0532   078C FA FF FF      lea d, [bp + -1] ; $i
0533   078F 2A            mov b, [d]
0534   0790 38 00 00      mov c, 0
0535   0793 E7            pop d
0536   0794 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
0537   0798 DA            push d
0538   0799 FA FD FF      lea d, [bp + -3] ; $j
0539   079C 2A            mov b, [d]
0540   079D 38 00 00      mov c, 0
0541   07A0 E7            pop d
0542   07A1 5A            add d, b
0543   07A2 E4            pop a
0544   07A3 DA            push d
0545   07A4 FD 2E 41 00   mov32 cb, $00000041
0545   07A8 00 00 
0546   07AA             ; --- START TERMS
0547   07AA D7            push a
0548   07AB 11            mov a, b
0549   07AC FA FF FF      lea d, [bp + -1] ; $i
0550   07AF 2A            mov b, [d]
0551   07B0 38 00 00      mov c, 0
0552   07B3 56            add b, a
0553   07B4 11            mov a, b
0554   07B5 FA FD FF      lea d, [bp + -3] ; $j
0555   07B8 2A            mov b, [d]
0556   07B9 38 00 00      mov c, 0
0557   07BC 56            add b, a
0558   07BD E4            pop a
0559   07BE             ; --- END TERMS
0560   07BE E7            pop d
0561   07BF FD 3E         mov [d], bl
0562   07C1             ; gia2[i][j] = i * j; 
0563   07C1 3B 75 24      mov d, _gia2_data ; $gia2
0564   07C4 D7            push a
0565   07C5 DA            push d
0566   07C6 FA FF FF      lea d, [bp + -1] ; $i
0567   07C9 2A            mov b, [d]
0568   07CA 38 00 00      mov c, 0
0569   07CD E7            pop d
0570   07CE FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
0571   07D2 DA            push d
0572   07D3 FA FD FF      lea d, [bp + -3] ; $j
0573   07D6 2A            mov b, [d]
0574   07D7 38 00 00      mov c, 0
0575   07DA E7            pop d
0576   07DB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0577   07DF E4            pop a
0578   07E0 DA            push d
0579   07E1 FA FF FF      lea d, [bp + -1] ; $i
0580   07E4 2A            mov b, [d]
0581   07E5 38 00 00      mov c, 0
0582   07E8             ; --- START FACTORS
0583   07E8 D7            push a
0584   07E9 FD D8         push g
0585   07EB 11            mov a, b
0586   07EC FD 7A         mov g, c
0587   07EE FA FD FF      lea d, [bp + -3] ; $j
0588   07F1 2A            mov b, [d]
0589   07F2 38 00 00      mov c, 0
0590   07F5 D7            push a     ; save left operand
0591   07F6 8E            xor a, b   ; xor sign bits
0592   07F7 FD AA         swp a      ; swap bytes
0593   07F9 83            mov cl, al ; save result of xor into 'dl'
0594   07FA E4            pop a      ; restore left side operator
0595   07FB DF            push cl    ; save result of xor above
0596   07FC FD AA         swp a  
0597   07FE 93 80         test al, $80  
0598   0800 FD AA         swp a  
0599   0802 C6 07 08      jz skip_invert_a_10  
0600   0805 FD 95         neg a 
0601   0807             skip_invert_a_10:   
0602   0807 FD AB         swp b
0603   0809 FD 93 80      test bl, $80  
0604   080C FD AB         swp b
0605   080E C6 13 08      jz skip_invert_b_10  
0606   0811 FD 97         neg b 
0607   0813             skip_invert_b_10:   
0608   0813 AC            mul a, b ; *
0609   0814 FD 78         mov g, a
0610   0816 11            mov a, b
0611   0817 EA            pop bl
0612   0818 FD 93 80      test bl, $80
0613   081B C6 28 08      jz _same_signs_10
0614   081E 2F            mov bl, al
0615   081F 95            not a
0616   0820 FD 97         neg b
0617   0822 5B 00 00      adc a, 0
0618   0825 FD 78         mov g, a
0619   0827 11            mov a, b
0620   0828             _same_signs_10:
0621   0828 FD 38         mov c, g
0622   082A 27            mov b, a
0623   082B FD F1         pop g
0624   082D E4            pop a
0625   082E             ; --- END FACTORS
0626   082E E7            pop d
0627   082F FD 43         mov [d], b
0628   0831             _for8_update:
0629   0831 FA FD FF      lea d, [bp + -3] ; $j
0630   0834 2A            mov b, [d]
0631   0835 38 00 00      mov c, 0
0632   0838 11            mov a, b
0633   0839 FD 77         inc b
0634   083B FA FD FF      lea d, [bp + -3] ; $j
0635   083E FD 43         mov [d], b
0636   0840 27            mov b, a
0637   0841 0A 6E 07      jmp _for8_cond
0638   0844             _for8_exit:
0639   0844             _for7_update:
0640   0844 FA FF FF      lea d, [bp + -1] ; $i
0641   0847 2A            mov b, [d]
0642   0848 38 00 00      mov c, 0
0643   084B 11            mov a, b
0644   084C FD 77         inc b
0645   084E FA FF FF      lea d, [bp + -1] ; $i
0646   0851 FD 43         mov [d], b
0647   0853 27            mov b, a
0648   0854 0A 48 07      jmp _for7_cond
0649   0857             _for7_exit:
0650   0857             ; for (i = 0; i < 5; i++){ 
0651   0857             _for11_init:
0652   0857 FA FF FF      lea d, [bp + -1] ; $i
0653   085A DA            push d
0654   085B FD 2E 00 00   mov32 cb, $00000000
0654   085F 00 00 
0655   0861 E7            pop d
0656   0862 FD 43         mov [d], b
0657   0864             _for11_cond:
0658   0864 FA FF FF      lea d, [bp + -1] ; $i
0659   0867 2A            mov b, [d]
0660   0868 38 00 00      mov c, 0
0661   086B             ; --- START RELATIONAL
0662   086B D7            push a
0663   086C 11            mov a, b
0664   086D FD 2E 05 00   mov32 cb, $00000005
0664   0871 00 00 
0665   0873 B0            cmp a, b
0666   0874 FD 73         slt ; < (signed)
0667   0876 E4            pop a
0668   0877             ; --- END RELATIONAL
0669   0877 C0 00 00      cmp b, 0
0670   087A C6 B8 09      je _for11_exit
0671   087D             _for11_block:
0672   087D             ; for (j = 0; j < 5; j++){ 
0673   087D             _for12_init:
0674   087D FA FD FF      lea d, [bp + -3] ; $j
0675   0880 DA            push d
0676   0881 FD 2E 00 00   mov32 cb, $00000000
0676   0885 00 00 
0677   0887 E7            pop d
0678   0888 FD 43         mov [d], b
0679   088A             _for12_cond:
0680   088A FA FD FF      lea d, [bp + -3] ; $j
0681   088D 2A            mov b, [d]
0682   088E 38 00 00      mov c, 0
0683   0891             ; --- START RELATIONAL
0684   0891 D7            push a
0685   0892 11            mov a, b
0686   0893 FD 2E 05 00   mov32 cb, $00000005
0686   0897 00 00 
0687   0899 B0            cmp a, b
0688   089A FD 73         slt ; < (signed)
0689   089C E4            pop a
0690   089D             ; --- END RELATIONAL
0691   089D C0 00 00      cmp b, 0
0692   08A0 C6 A5 09      je _for12_exit
0693   08A3             _for12_block:
0694   08A3             ; if(gca2[i][j] != 'A' + i + j){ 
0695   08A3             _if13_cond:
0696   08A3 3B 5C 24      mov d, _gca2_data ; $gca2
0697   08A6 D7            push a
0698   08A7 DA            push d
0699   08A8 FA FF FF      lea d, [bp + -1] ; $i
0700   08AB 2A            mov b, [d]
0701   08AC 38 00 00      mov c, 0
0702   08AF E7            pop d
0703   08B0 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
0704   08B4 DA            push d
0705   08B5 FA FD FF      lea d, [bp + -3] ; $j
0706   08B8 2A            mov b, [d]
0707   08B9 38 00 00      mov c, 0
0708   08BC E7            pop d
0709   08BD 5A            add d, b
0710   08BE E4            pop a
0711   08BF 32            mov bl, [d]
0712   08C0 A7 00         mov bh, 0
0713   08C2 38 00 00      mov c, 0
0714   08C5             ; --- START RELATIONAL
0715   08C5 D7            push a
0716   08C6 11            mov a, b
0717   08C7 FD 2E 41 00   mov32 cb, $00000041
0717   08CB 00 00 
0718   08CD             ; --- START TERMS
0719   08CD D7            push a
0720   08CE 11            mov a, b
0721   08CF FA FF FF      lea d, [bp + -1] ; $i
0722   08D2 2A            mov b, [d]
0723   08D3 38 00 00      mov c, 0
0724   08D6 56            add b, a
0725   08D7 11            mov a, b
0726   08D8 FA FD FF      lea d, [bp + -3] ; $j
0727   08DB 2A            mov b, [d]
0728   08DC 38 00 00      mov c, 0
0729   08DF 56            add b, a
0730   08E0 E4            pop a
0731   08E1             ; --- END TERMS
0732   08E1 B0            cmp a, b
0733   08E2 FD 72         sneq ; !=
0734   08E4 E4            pop a
0735   08E5             ; --- END RELATIONAL
0736   08E5 C0 00 00      cmp b, 0
0737   08E8 C6 FE 08      je _if13_exit
0738   08EB             _if13_TRUE:
0739   08EB             ; pass = 0; 
0740   08EB FA FB FF      lea d, [bp + -5] ; $pass
0741   08EE DA            push d
0742   08EF FD 2E 00 00   mov32 cb, $00000000
0742   08F3 00 00 
0743   08F5 E7            pop d
0744   08F6 FD 43         mov [d], b
0745   08F8             ; break; 
0746   08F8 0A A5 09      jmp _for12_exit ; for break
0747   08FB 0A FE 08      jmp _if13_exit
0748   08FE             _if13_exit:
0749   08FE             ; if(gia2[i][j] != i * j){ 
0750   08FE             _if14_cond:
0751   08FE 3B 75 24      mov d, _gia2_data ; $gia2
0752   0901 D7            push a
0753   0902 DA            push d
0754   0903 FA FF FF      lea d, [bp + -1] ; $i
0755   0906 2A            mov b, [d]
0756   0907 38 00 00      mov c, 0
0757   090A E7            pop d
0758   090B FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
0759   090F DA            push d
0760   0910 FA FD FF      lea d, [bp + -3] ; $j
0761   0913 2A            mov b, [d]
0762   0914 38 00 00      mov c, 0
0763   0917 E7            pop d
0764   0918 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0765   091C E4            pop a
0766   091D 2A            mov b, [d]
0767   091E 38 00 00      mov c, 0
0768   0921             ; --- START RELATIONAL
0769   0921 D7            push a
0770   0922 11            mov a, b
0771   0923 FA FF FF      lea d, [bp + -1] ; $i
0772   0926 2A            mov b, [d]
0773   0927 38 00 00      mov c, 0
0774   092A             ; --- START FACTORS
0775   092A D7            push a
0776   092B FD D8         push g
0777   092D 11            mov a, b
0778   092E FD 7A         mov g, c
0779   0930 FA FD FF      lea d, [bp + -3] ; $j
0780   0933 2A            mov b, [d]
0781   0934 38 00 00      mov c, 0
0782   0937 D7            push a     ; save left operand
0783   0938 8E            xor a, b   ; xor sign bits
0784   0939 FD AA         swp a      ; swap bytes
0785   093B 83            mov cl, al ; save result of xor into 'dl'
0786   093C E4            pop a      ; restore left side operator
0787   093D DF            push cl    ; save result of xor above
0788   093E FD AA         swp a  
0789   0940 93 80         test al, $80  
0790   0942 FD AA         swp a  
0791   0944 C6 49 09      jz skip_invert_a_16  
0792   0947 FD 95         neg a 
0793   0949             skip_invert_a_16:   
0794   0949 FD AB         swp b
0795   094B FD 93 80      test bl, $80  
0796   094E FD AB         swp b
0797   0950 C6 55 09      jz skip_invert_b_16  
0798   0953 FD 97         neg b 
0799   0955             skip_invert_b_16:   
0800   0955 AC            mul a, b ; *
0801   0956 FD 78         mov g, a
0802   0958 11            mov a, b
0803   0959 EA            pop bl
0804   095A FD 93 80      test bl, $80
0805   095D C6 6A 09      jz _same_signs_16
0806   0960 2F            mov bl, al
0807   0961 95            not a
0808   0962 FD 97         neg b
0809   0964 5B 00 00      adc a, 0
0810   0967 FD 78         mov g, a
0811   0969 11            mov a, b
0812   096A             _same_signs_16:
0813   096A FD 38         mov c, g
0814   096C 27            mov b, a
0815   096D FD F1         pop g
0816   096F E4            pop a
0817   0970             ; --- END FACTORS
0818   0970 FD 22 00 00   mov g, 0
0819   0974 FD AF         cmp32 ga, cb
0820   0976 FD 72         sneq ; !=
0821   0978 E4            pop a
0822   0979             ; --- END RELATIONAL
0823   0979 C0 00 00      cmp b, 0
0824   097C C6 92 09      je _if14_exit
0825   097F             _if14_TRUE:
0826   097F             ; pass = 0; 
0827   097F FA FB FF      lea d, [bp + -5] ; $pass
0828   0982 DA            push d
0829   0983 FD 2E 00 00   mov32 cb, $00000000
0829   0987 00 00 
0830   0989 E7            pop d
0831   098A FD 43         mov [d], b
0832   098C             ; break; 
0833   098C 0A A5 09      jmp _for12_exit ; for break
0834   098F 0A 92 09      jmp _if14_exit
0835   0992             _if14_exit:
0836   0992             _for12_update:
0837   0992 FA FD FF      lea d, [bp + -3] ; $j
0838   0995 2A            mov b, [d]
0839   0996 38 00 00      mov c, 0
0840   0999 11            mov a, b
0841   099A FD 77         inc b
0842   099C FA FD FF      lea d, [bp + -3] ; $j
0843   099F FD 43         mov [d], b
0844   09A1 27            mov b, a
0845   09A2 0A 8A 08      jmp _for12_cond
0846   09A5             _for12_exit:
0847   09A5             _for11_update:
0848   09A5 FA FF FF      lea d, [bp + -1] ; $i
0849   09A8 2A            mov b, [d]
0850   09A9 38 00 00      mov c, 0
0851   09AC 11            mov a, b
0852   09AD FD 77         inc b
0853   09AF FA FF FF      lea d, [bp + -1] ; $i
0854   09B2 FD 43         mov [d], b
0855   09B4 27            mov b, a
0856   09B5 0A 64 08      jmp _for11_cond
0857   09B8             _for11_exit:
0858   09B8             ; return pass; 
0859   09B8 FA FB FF      lea d, [bp + -5] ; $pass
0860   09BB 2A            mov b, [d]
0861   09BC 38 00 00      mov c, 0
0862   09BF F9            leave
0863   09C0 09            ret
0864   09C1             
0865   09C1             test2:
0866   09C1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0867   09C4             ; int i, j; 
0868   09C4 52 02 00      sub sp, 2
0869   09C7 52 02 00      sub sp, 2
0870   09CA             ; char lca[5]; 
0871   09CA 52 05 00      sub sp, 5
0872   09CD             ; int lia[5]; 
0873   09CD 52 0A 00      sub sp, 10
0874   09D0             ; int pass = 1; 
0875   09D0 52 02 00      sub sp, 2
0876   09D3             ; --- START LOCAL VAR INITIALIZATION
0877   09D3 FA EC FF      lea d, [bp + -20] ; $pass
0878   09D6 DA            push d
0879   09D7 FD 2E 01 00   mov32 cb, $00000001
0879   09DB 00 00 
0880   09DD E7            pop d
0881   09DE FD 43         mov [d], b
0882   09E0             ; --- END LOCAL VAR INITIALIZATION
0883   09E0             ; for (i = 0; i < 5; i++){ 
0884   09E0             _for17_init:
0885   09E0 FA FF FF      lea d, [bp + -1] ; $i
0886   09E3 DA            push d
0887   09E4 FD 2E 00 00   mov32 cb, $00000000
0887   09E8 00 00 
0888   09EA E7            pop d
0889   09EB FD 43         mov [d], b
0890   09ED             _for17_cond:
0891   09ED FA FF FF      lea d, [bp + -1] ; $i
0892   09F0 2A            mov b, [d]
0893   09F1 38 00 00      mov c, 0
0894   09F4             ; --- START RELATIONAL
0895   09F4 D7            push a
0896   09F5 11            mov a, b
0897   09F6 FD 2E 05 00   mov32 cb, $00000005
0897   09FA 00 00 
0898   09FC B0            cmp a, b
0899   09FD FD 73         slt ; < (signed)
0900   09FF E4            pop a
0901   0A00             ; --- END RELATIONAL
0902   0A00 C0 00 00      cmp b, 0
0903   0A03 C6 A9 0A      je _for17_exit
0904   0A06             _for17_block:
0905   0A06             ; lca[i] = 'A' + i + j; 
0906   0A06 FA F8 FF      lea d, [bp + -8] ; $lca
0907   0A09 D7            push a
0908   0A0A DA            push d
0909   0A0B FA FF FF      lea d, [bp + -1] ; $i
0910   0A0E 2A            mov b, [d]
0911   0A0F 38 00 00      mov c, 0
0912   0A12 E7            pop d
0913   0A13 5A            add d, b
0914   0A14 E4            pop a
0915   0A15 DA            push d
0916   0A16 FD 2E 41 00   mov32 cb, $00000041
0916   0A1A 00 00 
0917   0A1C             ; --- START TERMS
0918   0A1C D7            push a
0919   0A1D 11            mov a, b
0920   0A1E FA FF FF      lea d, [bp + -1] ; $i
0921   0A21 2A            mov b, [d]
0922   0A22 38 00 00      mov c, 0
0923   0A25 56            add b, a
0924   0A26 11            mov a, b
0925   0A27 FA FD FF      lea d, [bp + -3] ; $j
0926   0A2A 2A            mov b, [d]
0927   0A2B 38 00 00      mov c, 0
0928   0A2E 56            add b, a
0929   0A2F E4            pop a
0930   0A30             ; --- END TERMS
0931   0A30 E7            pop d
0932   0A31 FD 3E         mov [d], bl
0933   0A33             ; lia[i] = i * j; 
0934   0A33 FA EE FF      lea d, [bp + -18] ; $lia
0935   0A36 D7            push a
0936   0A37 DA            push d
0937   0A38 FA FF FF      lea d, [bp + -1] ; $i
0938   0A3B 2A            mov b, [d]
0939   0A3C 38 00 00      mov c, 0
0940   0A3F E7            pop d
0941   0A40 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0942   0A44 E4            pop a
0943   0A45 DA            push d
0944   0A46 FA FF FF      lea d, [bp + -1] ; $i
0945   0A49 2A            mov b, [d]
0946   0A4A 38 00 00      mov c, 0
0947   0A4D             ; --- START FACTORS
0948   0A4D D7            push a
0949   0A4E FD D8         push g
0950   0A50 11            mov a, b
0951   0A51 FD 7A         mov g, c
0952   0A53 FA FD FF      lea d, [bp + -3] ; $j
0953   0A56 2A            mov b, [d]
0954   0A57 38 00 00      mov c, 0
0955   0A5A D7            push a     ; save left operand
0956   0A5B 8E            xor a, b   ; xor sign bits
0957   0A5C FD AA         swp a      ; swap bytes
0958   0A5E 83            mov cl, al ; save result of xor into 'dl'
0959   0A5F E4            pop a      ; restore left side operator
0960   0A60 DF            push cl    ; save result of xor above
0961   0A61 FD AA         swp a  
0962   0A63 93 80         test al, $80  
0963   0A65 FD AA         swp a  
0964   0A67 C6 6C 0A      jz skip_invert_a_19  
0965   0A6A FD 95         neg a 
0966   0A6C             skip_invert_a_19:   
0967   0A6C FD AB         swp b
0968   0A6E FD 93 80      test bl, $80  
0969   0A71 FD AB         swp b
0970   0A73 C6 78 0A      jz skip_invert_b_19  
0971   0A76 FD 97         neg b 
0972   0A78             skip_invert_b_19:   
0973   0A78 AC            mul a, b ; *
0974   0A79 FD 78         mov g, a
0975   0A7B 11            mov a, b
0976   0A7C EA            pop bl
0977   0A7D FD 93 80      test bl, $80
0978   0A80 C6 8D 0A      jz _same_signs_19
0979   0A83 2F            mov bl, al
0980   0A84 95            not a
0981   0A85 FD 97         neg b
0982   0A87 5B 00 00      adc a, 0
0983   0A8A FD 78         mov g, a
0984   0A8C 11            mov a, b
0985   0A8D             _same_signs_19:
0986   0A8D FD 38         mov c, g
0987   0A8F 27            mov b, a
0988   0A90 FD F1         pop g
0989   0A92 E4            pop a
0990   0A93             ; --- END FACTORS
0991   0A93 E7            pop d
0992   0A94 FD 43         mov [d], b
0993   0A96             _for17_update:
0994   0A96 FA FF FF      lea d, [bp + -1] ; $i
0995   0A99 2A            mov b, [d]
0996   0A9A 38 00 00      mov c, 0
0997   0A9D 11            mov a, b
0998   0A9E FD 77         inc b
0999   0AA0 FA FF FF      lea d, [bp + -1] ; $i
1000   0AA3 FD 43         mov [d], b
1001   0AA5 27            mov b, a
1002   0AA6 0A ED 09      jmp _for17_cond
1003   0AA9             _for17_exit:
1004   0AA9             ; for (i = 0; i < 5; i++){ 
1005   0AA9             _for20_init:
1006   0AA9 FA FF FF      lea d, [bp + -1] ; $i
1007   0AAC DA            push d
1008   0AAD FD 2E 00 00   mov32 cb, $00000000
1008   0AB1 00 00 
1009   0AB3 E7            pop d
1010   0AB4 FD 43         mov [d], b
1011   0AB6             _for20_cond:
1012   0AB6 FA FF FF      lea d, [bp + -1] ; $i
1013   0AB9 2A            mov b, [d]
1014   0ABA 38 00 00      mov c, 0
1015   0ABD             ; --- START RELATIONAL
1016   0ABD D7            push a
1017   0ABE 11            mov a, b
1018   0ABF FD 2E 05 00   mov32 cb, $00000005
1018   0AC3 00 00 
1019   0AC5 B0            cmp a, b
1020   0AC6 FD 73         slt ; < (signed)
1021   0AC8 E4            pop a
1022   0AC9             ; --- END RELATIONAL
1023   0AC9 C0 00 00      cmp b, 0
1024   0ACC C6 B7 0B      je _for20_exit
1025   0ACF             _for20_block:
1026   0ACF             ; if(lca[i] != 'A' + i + j){ 
1027   0ACF             _if21_cond:
1028   0ACF FA F8 FF      lea d, [bp + -8] ; $lca
1029   0AD2 D7            push a
1030   0AD3 DA            push d
1031   0AD4 FA FF FF      lea d, [bp + -1] ; $i
1032   0AD7 2A            mov b, [d]
1033   0AD8 38 00 00      mov c, 0
1034   0ADB E7            pop d
1035   0ADC 5A            add d, b
1036   0ADD E4            pop a
1037   0ADE 32            mov bl, [d]
1038   0ADF A7 00         mov bh, 0
1039   0AE1 38 00 00      mov c, 0
1040   0AE4             ; --- START RELATIONAL
1041   0AE4 D7            push a
1042   0AE5 11            mov a, b
1043   0AE6 FD 2E 41 00   mov32 cb, $00000041
1043   0AEA 00 00 
1044   0AEC             ; --- START TERMS
1045   0AEC D7            push a
1046   0AED 11            mov a, b
1047   0AEE FA FF FF      lea d, [bp + -1] ; $i
1048   0AF1 2A            mov b, [d]
1049   0AF2 38 00 00      mov c, 0
1050   0AF5 56            add b, a
1051   0AF6 11            mov a, b
1052   0AF7 FA FD FF      lea d, [bp + -3] ; $j
1053   0AFA 2A            mov b, [d]
1054   0AFB 38 00 00      mov c, 0
1055   0AFE 56            add b, a
1056   0AFF E4            pop a
1057   0B00             ; --- END TERMS
1058   0B00 B0            cmp a, b
1059   0B01 FD 72         sneq ; !=
1060   0B03 E4            pop a
1061   0B04             ; --- END RELATIONAL
1062   0B04 C0 00 00      cmp b, 0
1063   0B07 C6 1D 0B      je _if21_exit
1064   0B0A             _if21_TRUE:
1065   0B0A             ; pass = 0; 
1066   0B0A FA EC FF      lea d, [bp + -20] ; $pass
1067   0B0D DA            push d
1068   0B0E FD 2E 00 00   mov32 cb, $00000000
1068   0B12 00 00 
1069   0B14 E7            pop d
1070   0B15 FD 43         mov [d], b
1071   0B17             ; break; 
1072   0B17 0A B7 0B      jmp _for20_exit ; for break
1073   0B1A 0A 1D 0B      jmp _if21_exit
1074   0B1D             _if21_exit:
1075   0B1D             ; if(lia[i] != i * j){ 
1076   0B1D             _if22_cond:
1077   0B1D FA EE FF      lea d, [bp + -18] ; $lia
1078   0B20 D7            push a
1079   0B21 DA            push d
1080   0B22 FA FF FF      lea d, [bp + -1] ; $i
1081   0B25 2A            mov b, [d]
1082   0B26 38 00 00      mov c, 0
1083   0B29 E7            pop d
1084   0B2A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1085   0B2E E4            pop a
1086   0B2F 2A            mov b, [d]
1087   0B30 38 00 00      mov c, 0
1088   0B33             ; --- START RELATIONAL
1089   0B33 D7            push a
1090   0B34 11            mov a, b
1091   0B35 FA FF FF      lea d, [bp + -1] ; $i
1092   0B38 2A            mov b, [d]
1093   0B39 38 00 00      mov c, 0
1094   0B3C             ; --- START FACTORS
1095   0B3C D7            push a
1096   0B3D FD D8         push g
1097   0B3F 11            mov a, b
1098   0B40 FD 7A         mov g, c
1099   0B42 FA FD FF      lea d, [bp + -3] ; $j
1100   0B45 2A            mov b, [d]
1101   0B46 38 00 00      mov c, 0
1102   0B49 D7            push a     ; save left operand
1103   0B4A 8E            xor a, b   ; xor sign bits
1104   0B4B FD AA         swp a      ; swap bytes
1105   0B4D 83            mov cl, al ; save result of xor into 'dl'
1106   0B4E E4            pop a      ; restore left side operator
1107   0B4F DF            push cl    ; save result of xor above
1108   0B50 FD AA         swp a  
1109   0B52 93 80         test al, $80  
1110   0B54 FD AA         swp a  
1111   0B56 C6 5B 0B      jz skip_invert_a_24  
1112   0B59 FD 95         neg a 
1113   0B5B             skip_invert_a_24:   
1114   0B5B FD AB         swp b
1115   0B5D FD 93 80      test bl, $80  
1116   0B60 FD AB         swp b
1117   0B62 C6 67 0B      jz skip_invert_b_24  
1118   0B65 FD 97         neg b 
1119   0B67             skip_invert_b_24:   
1120   0B67 AC            mul a, b ; *
1121   0B68 FD 78         mov g, a
1122   0B6A 11            mov a, b
1123   0B6B EA            pop bl
1124   0B6C FD 93 80      test bl, $80
1125   0B6F C6 7C 0B      jz _same_signs_24
1126   0B72 2F            mov bl, al
1127   0B73 95            not a
1128   0B74 FD 97         neg b
1129   0B76 5B 00 00      adc a, 0
1130   0B79 FD 78         mov g, a
1131   0B7B 11            mov a, b
1132   0B7C             _same_signs_24:
1133   0B7C FD 38         mov c, g
1134   0B7E 27            mov b, a
1135   0B7F FD F1         pop g
1136   0B81 E4            pop a
1137   0B82             ; --- END FACTORS
1138   0B82 FD 22 00 00   mov g, 0
1139   0B86 FD AF         cmp32 ga, cb
1140   0B88 FD 72         sneq ; !=
1141   0B8A E4            pop a
1142   0B8B             ; --- END RELATIONAL
1143   0B8B C0 00 00      cmp b, 0
1144   0B8E C6 A4 0B      je _if22_exit
1145   0B91             _if22_TRUE:
1146   0B91             ; pass = 0; 
1147   0B91 FA EC FF      lea d, [bp + -20] ; $pass
1148   0B94 DA            push d
1149   0B95 FD 2E 00 00   mov32 cb, $00000000
1149   0B99 00 00 
1150   0B9B E7            pop d
1151   0B9C FD 43         mov [d], b
1152   0B9E             ; break; 
1153   0B9E 0A B7 0B      jmp _for20_exit ; for break
1154   0BA1 0A A4 0B      jmp _if22_exit
1155   0BA4             _if22_exit:
1156   0BA4             _for20_update:
1157   0BA4 FA FF FF      lea d, [bp + -1] ; $i
1158   0BA7 2A            mov b, [d]
1159   0BA8 38 00 00      mov c, 0
1160   0BAB 11            mov a, b
1161   0BAC FD 77         inc b
1162   0BAE FA FF FF      lea d, [bp + -1] ; $i
1163   0BB1 FD 43         mov [d], b
1164   0BB3 27            mov b, a
1165   0BB4 0A B6 0A      jmp _for20_cond
1166   0BB7             _for20_exit:
1167   0BB7             ; return pass; 
1168   0BB7 FA EC FF      lea d, [bp + -20] ; $pass
1169   0BBA 2A            mov b, [d]
1170   0BBB 38 00 00      mov c, 0
1171   0BBE F9            leave
1172   0BBF 09            ret
1173   0BC0             
1174   0BC0             test3:
1175   0BC0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1176   0BC3             ; int i, j; 
1177   0BC3 52 02 00      sub sp, 2
1178   0BC6 52 02 00      sub sp, 2
1179   0BC9             ; char lca[5][5]; 
1180   0BC9 52 19 00      sub sp, 25
1181   0BCC             ; int lia[5][5]; 
1182   0BCC 52 32 00      sub sp, 50
1183   0BCF             ; int pass = 1; 
1184   0BCF 52 02 00      sub sp, 2
1185   0BD2             ; --- START LOCAL VAR INITIALIZATION
1186   0BD2 FA B0 FF      lea d, [bp + -80] ; $pass
1187   0BD5 DA            push d
1188   0BD6 FD 2E 01 00   mov32 cb, $00000001
1188   0BDA 00 00 
1189   0BDC E7            pop d
1190   0BDD FD 43         mov [d], b
1191   0BDF             ; --- END LOCAL VAR INITIALIZATION
1192   0BDF             ; for (i = 0; i < 5; i++){ 
1193   0BDF             _for25_init:
1194   0BDF FA FF FF      lea d, [bp + -1] ; $i
1195   0BE2 DA            push d
1196   0BE3 FD 2E 00 00   mov32 cb, $00000000
1196   0BE7 00 00 
1197   0BE9 E7            pop d
1198   0BEA FD 43         mov [d], b
1199   0BEC             _for25_cond:
1200   0BEC FA FF FF      lea d, [bp + -1] ; $i
1201   0BEF 2A            mov b, [d]
1202   0BF0 38 00 00      mov c, 0
1203   0BF3             ; --- START RELATIONAL
1204   0BF3 D7            push a
1205   0BF4 11            mov a, b
1206   0BF5 FD 2E 05 00   mov32 cb, $00000005
1206   0BF9 00 00 
1207   0BFB B0            cmp a, b
1208   0BFC FD 73         slt ; < (signed)
1209   0BFE E4            pop a
1210   0BFF             ; --- END RELATIONAL
1211   0BFF C0 00 00      cmp b, 0
1212   0C02 C6 FB 0C      je _for25_exit
1213   0C05             _for25_block:
1214   0C05             ; for (j = 0; j < 5; j++){ 
1215   0C05             _for26_init:
1216   0C05 FA FD FF      lea d, [bp + -3] ; $j
1217   0C08 DA            push d
1218   0C09 FD 2E 00 00   mov32 cb, $00000000
1218   0C0D 00 00 
1219   0C0F E7            pop d
1220   0C10 FD 43         mov [d], b
1221   0C12             _for26_cond:
1222   0C12 FA FD FF      lea d, [bp + -3] ; $j
1223   0C15 2A            mov b, [d]
1224   0C16 38 00 00      mov c, 0
1225   0C19             ; --- START RELATIONAL
1226   0C19 D7            push a
1227   0C1A 11            mov a, b
1228   0C1B FD 2E 05 00   mov32 cb, $00000005
1228   0C1F 00 00 
1229   0C21 B0            cmp a, b
1230   0C22 FD 73         slt ; < (signed)
1231   0C24 E4            pop a
1232   0C25             ; --- END RELATIONAL
1233   0C25 C0 00 00      cmp b, 0
1234   0C28 C6 E8 0C      je _for26_exit
1235   0C2B             _for26_block:
1236   0C2B             ; lca[i][j] = 'A' + i + j; 
1237   0C2B FA E4 FF      lea d, [bp + -28] ; $lca
1238   0C2E D7            push a
1239   0C2F DA            push d
1240   0C30 FA FF FF      lea d, [bp + -1] ; $i
1241   0C33 2A            mov b, [d]
1242   0C34 38 00 00      mov c, 0
1243   0C37 E7            pop d
1244   0C38 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
1245   0C3C DA            push d
1246   0C3D FA FD FF      lea d, [bp + -3] ; $j
1247   0C40 2A            mov b, [d]
1248   0C41 38 00 00      mov c, 0
1249   0C44 E7            pop d
1250   0C45 5A            add d, b
1251   0C46 E4            pop a
1252   0C47 DA            push d
1253   0C48 FD 2E 41 00   mov32 cb, $00000041
1253   0C4C 00 00 
1254   0C4E             ; --- START TERMS
1255   0C4E D7            push a
1256   0C4F 11            mov a, b
1257   0C50 FA FF FF      lea d, [bp + -1] ; $i
1258   0C53 2A            mov b, [d]
1259   0C54 38 00 00      mov c, 0
1260   0C57 56            add b, a
1261   0C58 11            mov a, b
1262   0C59 FA FD FF      lea d, [bp + -3] ; $j
1263   0C5C 2A            mov b, [d]
1264   0C5D 38 00 00      mov c, 0
1265   0C60 56            add b, a
1266   0C61 E4            pop a
1267   0C62             ; --- END TERMS
1268   0C62 E7            pop d
1269   0C63 FD 3E         mov [d], bl
1270   0C65             ; lia[i][j] = i * j; 
1271   0C65 FA B2 FF      lea d, [bp + -78] ; $lia
1272   0C68 D7            push a
1273   0C69 DA            push d
1274   0C6A FA FF FF      lea d, [bp + -1] ; $i
1275   0C6D 2A            mov b, [d]
1276   0C6E 38 00 00      mov c, 0
1277   0C71 E7            pop d
1278   0C72 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
1279   0C76 DA            push d
1280   0C77 FA FD FF      lea d, [bp + -3] ; $j
1281   0C7A 2A            mov b, [d]
1282   0C7B 38 00 00      mov c, 0
1283   0C7E E7            pop d
1284   0C7F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1285   0C83 E4            pop a
1286   0C84 DA            push d
1287   0C85 FA FF FF      lea d, [bp + -1] ; $i
1288   0C88 2A            mov b, [d]
1289   0C89 38 00 00      mov c, 0
1290   0C8C             ; --- START FACTORS
1291   0C8C D7            push a
1292   0C8D FD D8         push g
1293   0C8F 11            mov a, b
1294   0C90 FD 7A         mov g, c
1295   0C92 FA FD FF      lea d, [bp + -3] ; $j
1296   0C95 2A            mov b, [d]
1297   0C96 38 00 00      mov c, 0
1298   0C99 D7            push a     ; save left operand
1299   0C9A 8E            xor a, b   ; xor sign bits
1300   0C9B FD AA         swp a      ; swap bytes
1301   0C9D 83            mov cl, al ; save result of xor into 'dl'
1302   0C9E E4            pop a      ; restore left side operator
1303   0C9F DF            push cl    ; save result of xor above
1304   0CA0 FD AA         swp a  
1305   0CA2 93 80         test al, $80  
1306   0CA4 FD AA         swp a  
1307   0CA6 C6 AB 0C      jz skip_invert_a_28  
1308   0CA9 FD 95         neg a 
1309   0CAB             skip_invert_a_28:   
1310   0CAB FD AB         swp b
1311   0CAD FD 93 80      test bl, $80  
1312   0CB0 FD AB         swp b
1313   0CB2 C6 B7 0C      jz skip_invert_b_28  
1314   0CB5 FD 97         neg b 
1315   0CB7             skip_invert_b_28:   
1316   0CB7 AC            mul a, b ; *
1317   0CB8 FD 78         mov g, a
1318   0CBA 11            mov a, b
1319   0CBB EA            pop bl
1320   0CBC FD 93 80      test bl, $80
1321   0CBF C6 CC 0C      jz _same_signs_28
1322   0CC2 2F            mov bl, al
1323   0CC3 95            not a
1324   0CC4 FD 97         neg b
1325   0CC6 5B 00 00      adc a, 0
1326   0CC9 FD 78         mov g, a
1327   0CCB 11            mov a, b
1328   0CCC             _same_signs_28:
1329   0CCC FD 38         mov c, g
1330   0CCE 27            mov b, a
1331   0CCF FD F1         pop g
1332   0CD1 E4            pop a
1333   0CD2             ; --- END FACTORS
1334   0CD2 E7            pop d
1335   0CD3 FD 43         mov [d], b
1336   0CD5             _for26_update:
1337   0CD5 FA FD FF      lea d, [bp + -3] ; $j
1338   0CD8 2A            mov b, [d]
1339   0CD9 38 00 00      mov c, 0
1340   0CDC 11            mov a, b
1341   0CDD FD 77         inc b
1342   0CDF FA FD FF      lea d, [bp + -3] ; $j
1343   0CE2 FD 43         mov [d], b
1344   0CE4 27            mov b, a
1345   0CE5 0A 12 0C      jmp _for26_cond
1346   0CE8             _for26_exit:
1347   0CE8             _for25_update:
1348   0CE8 FA FF FF      lea d, [bp + -1] ; $i
1349   0CEB 2A            mov b, [d]
1350   0CEC 38 00 00      mov c, 0
1351   0CEF 11            mov a, b
1352   0CF0 FD 77         inc b
1353   0CF2 FA FF FF      lea d, [bp + -1] ; $i
1354   0CF5 FD 43         mov [d], b
1355   0CF7 27            mov b, a
1356   0CF8 0A EC 0B      jmp _for25_cond
1357   0CFB             _for25_exit:
1358   0CFB             ; for (i = 0; i < 5; i++){ 
1359   0CFB             _for29_init:
1360   0CFB FA FF FF      lea d, [bp + -1] ; $i
1361   0CFE DA            push d
1362   0CFF FD 2E 00 00   mov32 cb, $00000000
1362   0D03 00 00 
1363   0D05 E7            pop d
1364   0D06 FD 43         mov [d], b
1365   0D08             _for29_cond:
1366   0D08 FA FF FF      lea d, [bp + -1] ; $i
1367   0D0B 2A            mov b, [d]
1368   0D0C 38 00 00      mov c, 0
1369   0D0F             ; --- START RELATIONAL
1370   0D0F D7            push a
1371   0D10 11            mov a, b
1372   0D11 FD 2E 05 00   mov32 cb, $00000005
1372   0D15 00 00 
1373   0D17 B0            cmp a, b
1374   0D18 FD 73         slt ; < (signed)
1375   0D1A E4            pop a
1376   0D1B             ; --- END RELATIONAL
1377   0D1B C0 00 00      cmp b, 0
1378   0D1E C6 5C 0E      je _for29_exit
1379   0D21             _for29_block:
1380   0D21             ; for (j = 0; j < 5; j++){ 
1381   0D21             _for30_init:
1382   0D21 FA FD FF      lea d, [bp + -3] ; $j
1383   0D24 DA            push d
1384   0D25 FD 2E 00 00   mov32 cb, $00000000
1384   0D29 00 00 
1385   0D2B E7            pop d
1386   0D2C FD 43         mov [d], b
1387   0D2E             _for30_cond:
1388   0D2E FA FD FF      lea d, [bp + -3] ; $j
1389   0D31 2A            mov b, [d]
1390   0D32 38 00 00      mov c, 0
1391   0D35             ; --- START RELATIONAL
1392   0D35 D7            push a
1393   0D36 11            mov a, b
1394   0D37 FD 2E 05 00   mov32 cb, $00000005
1394   0D3B 00 00 
1395   0D3D B0            cmp a, b
1396   0D3E FD 73         slt ; < (signed)
1397   0D40 E4            pop a
1398   0D41             ; --- END RELATIONAL
1399   0D41 C0 00 00      cmp b, 0
1400   0D44 C6 49 0E      je _for30_exit
1401   0D47             _for30_block:
1402   0D47             ; if(lca[i][j] != 'A' + i + j){ 
1403   0D47             _if31_cond:
1404   0D47 FA E4 FF      lea d, [bp + -28] ; $lca
1405   0D4A D7            push a
1406   0D4B DA            push d
1407   0D4C FA FF FF      lea d, [bp + -1] ; $i
1408   0D4F 2A            mov b, [d]
1409   0D50 38 00 00      mov c, 0
1410   0D53 E7            pop d
1411   0D54 FD 13 05 00   mma 5 ; mov a, 5; mul a, b; add d, b
1412   0D58 DA            push d
1413   0D59 FA FD FF      lea d, [bp + -3] ; $j
1414   0D5C 2A            mov b, [d]
1415   0D5D 38 00 00      mov c, 0
1416   0D60 E7            pop d
1417   0D61 5A            add d, b
1418   0D62 E4            pop a
1419   0D63 32            mov bl, [d]
1420   0D64 A7 00         mov bh, 0
1421   0D66 38 00 00      mov c, 0
1422   0D69             ; --- START RELATIONAL
1423   0D69 D7            push a
1424   0D6A 11            mov a, b
1425   0D6B FD 2E 41 00   mov32 cb, $00000041
1425   0D6F 00 00 
1426   0D71             ; --- START TERMS
1427   0D71 D7            push a
1428   0D72 11            mov a, b
1429   0D73 FA FF FF      lea d, [bp + -1] ; $i
1430   0D76 2A            mov b, [d]
1431   0D77 38 00 00      mov c, 0
1432   0D7A 56            add b, a
1433   0D7B 11            mov a, b
1434   0D7C FA FD FF      lea d, [bp + -3] ; $j
1435   0D7F 2A            mov b, [d]
1436   0D80 38 00 00      mov c, 0
1437   0D83 56            add b, a
1438   0D84 E4            pop a
1439   0D85             ; --- END TERMS
1440   0D85 B0            cmp a, b
1441   0D86 FD 72         sneq ; !=
1442   0D88 E4            pop a
1443   0D89             ; --- END RELATIONAL
1444   0D89 C0 00 00      cmp b, 0
1445   0D8C C6 A2 0D      je _if31_exit
1446   0D8F             _if31_TRUE:
1447   0D8F             ; pass = 0; 
1448   0D8F FA B0 FF      lea d, [bp + -80] ; $pass
1449   0D92 DA            push d
1450   0D93 FD 2E 00 00   mov32 cb, $00000000
1450   0D97 00 00 
1451   0D99 E7            pop d
1452   0D9A FD 43         mov [d], b
1453   0D9C             ; break; 
1454   0D9C 0A 49 0E      jmp _for30_exit ; for break
1455   0D9F 0A A2 0D      jmp _if31_exit
1456   0DA2             _if31_exit:
1457   0DA2             ; if(lia[i][j] != i * j){ 
1458   0DA2             _if32_cond:
1459   0DA2 FA B2 FF      lea d, [bp + -78] ; $lia
1460   0DA5 D7            push a
1461   0DA6 DA            push d
1462   0DA7 FA FF FF      lea d, [bp + -1] ; $i
1463   0DAA 2A            mov b, [d]
1464   0DAB 38 00 00      mov c, 0
1465   0DAE E7            pop d
1466   0DAF FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
1467   0DB3 DA            push d
1468   0DB4 FA FD FF      lea d, [bp + -3] ; $j
1469   0DB7 2A            mov b, [d]
1470   0DB8 38 00 00      mov c, 0
1471   0DBB E7            pop d
1472   0DBC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1473   0DC0 E4            pop a
1474   0DC1 2A            mov b, [d]
1475   0DC2 38 00 00      mov c, 0
1476   0DC5             ; --- START RELATIONAL
1477   0DC5 D7            push a
1478   0DC6 11            mov a, b
1479   0DC7 FA FF FF      lea d, [bp + -1] ; $i
1480   0DCA 2A            mov b, [d]
1481   0DCB 38 00 00      mov c, 0
1482   0DCE             ; --- START FACTORS
1483   0DCE D7            push a
1484   0DCF FD D8         push g
1485   0DD1 11            mov a, b
1486   0DD2 FD 7A         mov g, c
1487   0DD4 FA FD FF      lea d, [bp + -3] ; $j
1488   0DD7 2A            mov b, [d]
1489   0DD8 38 00 00      mov c, 0
1490   0DDB D7            push a     ; save left operand
1491   0DDC 8E            xor a, b   ; xor sign bits
1492   0DDD FD AA         swp a      ; swap bytes
1493   0DDF 83            mov cl, al ; save result of xor into 'dl'
1494   0DE0 E4            pop a      ; restore left side operator
1495   0DE1 DF            push cl    ; save result of xor above
1496   0DE2 FD AA         swp a  
1497   0DE4 93 80         test al, $80  
1498   0DE6 FD AA         swp a  
1499   0DE8 C6 ED 0D      jz skip_invert_a_34  
1500   0DEB FD 95         neg a 
1501   0DED             skip_invert_a_34:   
1502   0DED FD AB         swp b
1503   0DEF FD 93 80      test bl, $80  
1504   0DF2 FD AB         swp b
1505   0DF4 C6 F9 0D      jz skip_invert_b_34  
1506   0DF7 FD 97         neg b 
1507   0DF9             skip_invert_b_34:   
1508   0DF9 AC            mul a, b ; *
1509   0DFA FD 78         mov g, a
1510   0DFC 11            mov a, b
1511   0DFD EA            pop bl
1512   0DFE FD 93 80      test bl, $80
1513   0E01 C6 0E 0E      jz _same_signs_34
1514   0E04 2F            mov bl, al
1515   0E05 95            not a
1516   0E06 FD 97         neg b
1517   0E08 5B 00 00      adc a, 0
1518   0E0B FD 78         mov g, a
1519   0E0D 11            mov a, b
1520   0E0E             _same_signs_34:
1521   0E0E FD 38         mov c, g
1522   0E10 27            mov b, a
1523   0E11 FD F1         pop g
1524   0E13 E4            pop a
1525   0E14             ; --- END FACTORS
1526   0E14 FD 22 00 00   mov g, 0
1527   0E18 FD AF         cmp32 ga, cb
1528   0E1A FD 72         sneq ; !=
1529   0E1C E4            pop a
1530   0E1D             ; --- END RELATIONAL
1531   0E1D C0 00 00      cmp b, 0
1532   0E20 C6 36 0E      je _if32_exit
1533   0E23             _if32_TRUE:
1534   0E23             ; pass = 0; 
1535   0E23 FA B0 FF      lea d, [bp + -80] ; $pass
1536   0E26 DA            push d
1537   0E27 FD 2E 00 00   mov32 cb, $00000000
1537   0E2B 00 00 
1538   0E2D E7            pop d
1539   0E2E FD 43         mov [d], b
1540   0E30             ; break; 
1541   0E30 0A 49 0E      jmp _for30_exit ; for break
1542   0E33 0A 36 0E      jmp _if32_exit
1543   0E36             _if32_exit:
1544   0E36             _for30_update:
1545   0E36 FA FD FF      lea d, [bp + -3] ; $j
1546   0E39 2A            mov b, [d]
1547   0E3A 38 00 00      mov c, 0
1548   0E3D 11            mov a, b
1549   0E3E FD 77         inc b
1550   0E40 FA FD FF      lea d, [bp + -3] ; $j
1551   0E43 FD 43         mov [d], b
1552   0E45 27            mov b, a
1553   0E46 0A 2E 0D      jmp _for30_cond
1554   0E49             _for30_exit:
1555   0E49             _for29_update:
1556   0E49 FA FF FF      lea d, [bp + -1] ; $i
1557   0E4C 2A            mov b, [d]
1558   0E4D 38 00 00      mov c, 0
1559   0E50 11            mov a, b
1560   0E51 FD 77         inc b
1561   0E53 FA FF FF      lea d, [bp + -1] ; $i
1562   0E56 FD 43         mov [d], b
1563   0E58 27            mov b, a
1564   0E59 0A 08 0D      jmp _for29_cond
1565   0E5C             _for29_exit:
1566   0E5C             ; return pass; 
1567   0E5C FA B0 FF      lea d, [bp + -80] ; $pass
1568   0E5F 2A            mov b, [d]
1569   0E60 38 00 00      mov c, 0
1570   0E63 F9            leave
1571   0E64 09            ret
1572   0E65             
1573   0E65             test4:
1574   0E65 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1575   0E68             ; int a, b, c; 
1576   0E68 52 02 00      sub sp, 2
1577   0E6B 52 02 00      sub sp, 2
1578   0E6E 52 02 00      sub sp, 2
1579   0E71             ; int result; 
1580   0E71 52 02 00      sub sp, 2
1581   0E74             ; int pass = 1; 
1582   0E74 52 02 00      sub sp, 2
1583   0E77             ; --- START LOCAL VAR INITIALIZATION
1584   0E77 FA F7 FF      lea d, [bp + -9] ; $pass
1585   0E7A DA            push d
1586   0E7B FD 2E 01 00   mov32 cb, $00000001
1586   0E7F 00 00 
1587   0E81 E7            pop d
1588   0E82 FD 43         mov [d], b
1589   0E84             ; --- END LOCAL VAR INITIALIZATION
1590   0E84             ; result = 1 && 1 && 1; 
1591   0E84 FA F9 FF      lea d, [bp + -7] ; $result
1592   0E87 DA            push d
1593   0E88 FD 2E 01 00   mov32 cb, $00000001
1593   0E8C 00 00 
1594   0E8E             ; --- START LOGICAL AND
1595   0E8E D7            push a
1596   0E8F 11            mov a, b
1597   0E90 FD 2E 01 00   mov32 cb, $00000001
1597   0E94 00 00 
1598   0E96 FD A7         sand a, b
1599   0E98 11            mov a, b
1600   0E99 FD 2E 01 00   mov32 cb, $00000001
1600   0E9D 00 00 
1601   0E9F FD A7         sand a, b
1602   0EA1 E4            pop a
1603   0EA2             ; --- END LOGICAL AND
1604   0EA2 E7            pop d
1605   0EA3 FD 43         mov [d], b
1606   0EA5             ; pass = pass && result == 1; 
1607   0EA5 FA F7 FF      lea d, [bp + -9] ; $pass
1608   0EA8 DA            push d
1609   0EA9 FA F7 FF      lea d, [bp + -9] ; $pass
1610   0EAC 2A            mov b, [d]
1611   0EAD 38 00 00      mov c, 0
1612   0EB0             ; --- START LOGICAL AND
1613   0EB0 D7            push a
1614   0EB1 11            mov a, b
1615   0EB2 FA F9 FF      lea d, [bp + -7] ; $result
1616   0EB5 2A            mov b, [d]
1617   0EB6 38 00 00      mov c, 0
1618   0EB9             ; --- START RELATIONAL
1619   0EB9 D7            push a
1620   0EBA 11            mov a, b
1621   0EBB FD 2E 01 00   mov32 cb, $00000001
1621   0EBF 00 00 
1622   0EC1 B0            cmp a, b
1623   0EC2 FD 71         seq ; ==
1624   0EC4 E4            pop a
1625   0EC5             ; --- END RELATIONAL
1626   0EC5 FD A7         sand a, b
1627   0EC7 E4            pop a
1628   0EC8             ; --- END LOGICAL AND
1629   0EC8 E7            pop d
1630   0EC9 FD 43         mov [d], b
1631   0ECB             ; result = 1 && 0 && 1; 
1632   0ECB FA F9 FF      lea d, [bp + -7] ; $result
1633   0ECE DA            push d
1634   0ECF FD 2E 01 00   mov32 cb, $00000001
1634   0ED3 00 00 
1635   0ED5             ; --- START LOGICAL AND
1636   0ED5 D7            push a
1637   0ED6 11            mov a, b
1638   0ED7 FD 2E 00 00   mov32 cb, $00000000
1638   0EDB 00 00 
1639   0EDD FD A7         sand a, b
1640   0EDF 11            mov a, b
1641   0EE0 FD 2E 01 00   mov32 cb, $00000001
1641   0EE4 00 00 
1642   0EE6 FD A7         sand a, b
1643   0EE8 E4            pop a
1644   0EE9             ; --- END LOGICAL AND
1645   0EE9 E7            pop d
1646   0EEA FD 43         mov [d], b
1647   0EEC             ; pass = pass && result == 0; 
1648   0EEC FA F7 FF      lea d, [bp + -9] ; $pass
1649   0EEF DA            push d
1650   0EF0 FA F7 FF      lea d, [bp + -9] ; $pass
1651   0EF3 2A            mov b, [d]
1652   0EF4 38 00 00      mov c, 0
1653   0EF7             ; --- START LOGICAL AND
1654   0EF7 D7            push a
1655   0EF8 11            mov a, b
1656   0EF9 FA F9 FF      lea d, [bp + -7] ; $result
1657   0EFC 2A            mov b, [d]
1658   0EFD 38 00 00      mov c, 0
1659   0F00             ; --- START RELATIONAL
1660   0F00 D7            push a
1661   0F01 11            mov a, b
1662   0F02 FD 2E 00 00   mov32 cb, $00000000
1662   0F06 00 00 
1663   0F08 B0            cmp a, b
1664   0F09 FD 71         seq ; ==
1665   0F0B E4            pop a
1666   0F0C             ; --- END RELATIONAL
1667   0F0C FD A7         sand a, b
1668   0F0E E4            pop a
1669   0F0F             ; --- END LOGICAL AND
1670   0F0F E7            pop d
1671   0F10 FD 43         mov [d], b
1672   0F12             ; result = 1 || 1 || 1; 
1673   0F12 FA F9 FF      lea d, [bp + -7] ; $result
1674   0F15 DA            push d
1675   0F16 FD 2E 01 00   mov32 cb, $00000001
1675   0F1A 00 00 
1676   0F1C             ; --- START LOGICAL OR
1677   0F1C D7            push a
1678   0F1D 11            mov a, b
1679   0F1E FD 2E 01 00   mov32 cb, $00000001
1679   0F22 00 00 
1680   0F24 FD A8         sor a, b ; ||
1681   0F26 11            mov a, b
1682   0F27 FD 2E 01 00   mov32 cb, $00000001
1682   0F2B 00 00 
1683   0F2D FD A8         sor a, b ; ||
1684   0F2F E4            pop a
1685   0F30             ; --- END LOGICAL OR
1686   0F30 E7            pop d
1687   0F31 FD 43         mov [d], b
1688   0F33             ; pass = pass && result == 1; 
1689   0F33 FA F7 FF      lea d, [bp + -9] ; $pass
1690   0F36 DA            push d
1691   0F37 FA F7 FF      lea d, [bp + -9] ; $pass
1692   0F3A 2A            mov b, [d]
1693   0F3B 38 00 00      mov c, 0
1694   0F3E             ; --- START LOGICAL AND
1695   0F3E D7            push a
1696   0F3F 11            mov a, b
1697   0F40 FA F9 FF      lea d, [bp + -7] ; $result
1698   0F43 2A            mov b, [d]
1699   0F44 38 00 00      mov c, 0
1700   0F47             ; --- START RELATIONAL
1701   0F47 D7            push a
1702   0F48 11            mov a, b
1703   0F49 FD 2E 01 00   mov32 cb, $00000001
1703   0F4D 00 00 
1704   0F4F B0            cmp a, b
1705   0F50 FD 71         seq ; ==
1706   0F52 E4            pop a
1707   0F53             ; --- END RELATIONAL
1708   0F53 FD A7         sand a, b
1709   0F55 E4            pop a
1710   0F56             ; --- END LOGICAL AND
1711   0F56 E7            pop d
1712   0F57 FD 43         mov [d], b
1713   0F59             ; result = 0 || 1 || 0; 
1714   0F59 FA F9 FF      lea d, [bp + -7] ; $result
1715   0F5C DA            push d
1716   0F5D FD 2E 00 00   mov32 cb, $00000000
1716   0F61 00 00 
1717   0F63             ; --- START LOGICAL OR
1718   0F63 D7            push a
1719   0F64 11            mov a, b
1720   0F65 FD 2E 01 00   mov32 cb, $00000001
1720   0F69 00 00 
1721   0F6B FD A8         sor a, b ; ||
1722   0F6D 11            mov a, b
1723   0F6E FD 2E 00 00   mov32 cb, $00000000
1723   0F72 00 00 
1724   0F74 FD A8         sor a, b ; ||
1725   0F76 E4            pop a
1726   0F77             ; --- END LOGICAL OR
1727   0F77 E7            pop d
1728   0F78 FD 43         mov [d], b
1729   0F7A             ; pass = pass && result == 1; 
1730   0F7A FA F7 FF      lea d, [bp + -9] ; $pass
1731   0F7D DA            push d
1732   0F7E FA F7 FF      lea d, [bp + -9] ; $pass
1733   0F81 2A            mov b, [d]
1734   0F82 38 00 00      mov c, 0
1735   0F85             ; --- START LOGICAL AND
1736   0F85 D7            push a
1737   0F86 11            mov a, b
1738   0F87 FA F9 FF      lea d, [bp + -7] ; $result
1739   0F8A 2A            mov b, [d]
1740   0F8B 38 00 00      mov c, 0
1741   0F8E             ; --- START RELATIONAL
1742   0F8E D7            push a
1743   0F8F 11            mov a, b
1744   0F90 FD 2E 01 00   mov32 cb, $00000001
1744   0F94 00 00 
1745   0F96 B0            cmp a, b
1746   0F97 FD 71         seq ; ==
1747   0F99 E4            pop a
1748   0F9A             ; --- END RELATIONAL
1749   0F9A FD A7         sand a, b
1750   0F9C E4            pop a
1751   0F9D             ; --- END LOGICAL AND
1752   0F9D E7            pop d
1753   0F9E FD 43         mov [d], b
1754   0FA0             ; result = 1 || 0 && 1; 
1755   0FA0 FA F9 FF      lea d, [bp + -7] ; $result
1756   0FA3 DA            push d
1757   0FA4 FD 2E 01 00   mov32 cb, $00000001
1757   0FA8 00 00 
1758   0FAA             ; --- START LOGICAL OR
1759   0FAA D7            push a
1760   0FAB 11            mov a, b
1761   0FAC FD 2E 00 00   mov32 cb, $00000000
1761   0FB0 00 00 
1762   0FB2             ; --- START LOGICAL AND
1763   0FB2 D7            push a
1764   0FB3 11            mov a, b
1765   0FB4 FD 2E 01 00   mov32 cb, $00000001
1765   0FB8 00 00 
1766   0FBA FD A7         sand a, b
1767   0FBC E4            pop a
1768   0FBD             ; --- END LOGICAL AND
1769   0FBD FD A8         sor a, b ; ||
1770   0FBF E4            pop a
1771   0FC0             ; --- END LOGICAL OR
1772   0FC0 E7            pop d
1773   0FC1 FD 43         mov [d], b
1774   0FC3             ; pass = pass && result == 1; 
1775   0FC3 FA F7 FF      lea d, [bp + -9] ; $pass
1776   0FC6 DA            push d
1777   0FC7 FA F7 FF      lea d, [bp + -9] ; $pass
1778   0FCA 2A            mov b, [d]
1779   0FCB 38 00 00      mov c, 0
1780   0FCE             ; --- START LOGICAL AND
1781   0FCE D7            push a
1782   0FCF 11            mov a, b
1783   0FD0 FA F9 FF      lea d, [bp + -7] ; $result
1784   0FD3 2A            mov b, [d]
1785   0FD4 38 00 00      mov c, 0
1786   0FD7             ; --- START RELATIONAL
1787   0FD7 D7            push a
1788   0FD8 11            mov a, b
1789   0FD9 FD 2E 01 00   mov32 cb, $00000001
1789   0FDD 00 00 
1790   0FDF B0            cmp a, b
1791   0FE0 FD 71         seq ; ==
1792   0FE2 E4            pop a
1793   0FE3             ; --- END RELATIONAL
1794   0FE3 FD A7         sand a, b
1795   0FE5 E4            pop a
1796   0FE6             ; --- END LOGICAL AND
1797   0FE6 E7            pop d
1798   0FE7 FD 43         mov [d], b
1799   0FE9             ; result = 0 || 0 || 0; 
1800   0FE9 FA F9 FF      lea d, [bp + -7] ; $result
1801   0FEC DA            push d
1802   0FED FD 2E 00 00   mov32 cb, $00000000
1802   0FF1 00 00 
1803   0FF3             ; --- START LOGICAL OR
1804   0FF3 D7            push a
1805   0FF4 11            mov a, b
1806   0FF5 FD 2E 00 00   mov32 cb, $00000000
1806   0FF9 00 00 
1807   0FFB FD A8         sor a, b ; ||
1808   0FFD 11            mov a, b
1809   0FFE FD 2E 00 00   mov32 cb, $00000000
1809   1002 00 00 
1810   1004 FD A8         sor a, b ; ||
1811   1006 E4            pop a
1812   1007             ; --- END LOGICAL OR
1813   1007 E7            pop d
1814   1008 FD 43         mov [d], b
1815   100A             ; pass = pass && result == 0; 
1816   100A FA F7 FF      lea d, [bp + -9] ; $pass
1817   100D DA            push d
1818   100E FA F7 FF      lea d, [bp + -9] ; $pass
1819   1011 2A            mov b, [d]
1820   1012 38 00 00      mov c, 0
1821   1015             ; --- START LOGICAL AND
1822   1015 D7            push a
1823   1016 11            mov a, b
1824   1017 FA F9 FF      lea d, [bp + -7] ; $result
1825   101A 2A            mov b, [d]
1826   101B 38 00 00      mov c, 0
1827   101E             ; --- START RELATIONAL
1828   101E D7            push a
1829   101F 11            mov a, b
1830   1020 FD 2E 00 00   mov32 cb, $00000000
1830   1024 00 00 
1831   1026 B0            cmp a, b
1832   1027 FD 71         seq ; ==
1833   1029 E4            pop a
1834   102A             ; --- END RELATIONAL
1835   102A FD A7         sand a, b
1836   102C E4            pop a
1837   102D             ; --- END LOGICAL AND
1838   102D E7            pop d
1839   102E FD 43         mov [d], b
1840   1030             ; a = 1; b = 1; c = 1; 
1841   1030 FA FF FF      lea d, [bp + -1] ; $a
1842   1033 DA            push d
1843   1034 FD 2E 01 00   mov32 cb, $00000001
1843   1038 00 00 
1844   103A E7            pop d
1845   103B FD 43         mov [d], b
1846   103D             ; b = 1; c = 1; 
1847   103D FA FD FF      lea d, [bp + -3] ; $b
1848   1040 DA            push d
1849   1041 FD 2E 01 00   mov32 cb, $00000001
1849   1045 00 00 
1850   1047 E7            pop d
1851   1048 FD 43         mov [d], b
1852   104A             ; c = 1; 
1853   104A FA FB FF      lea d, [bp + -5] ; $c
1854   104D DA            push d
1855   104E FD 2E 01 00   mov32 cb, $00000001
1855   1052 00 00 
1856   1054 E7            pop d
1857   1055 FD 43         mov [d], b
1858   1057             ; result = a && b && c; 
1859   1057 FA F9 FF      lea d, [bp + -7] ; $result
1860   105A DA            push d
1861   105B FA FF FF      lea d, [bp + -1] ; $a
1862   105E 2A            mov b, [d]
1863   105F 38 00 00      mov c, 0
1864   1062             ; --- START LOGICAL AND
1865   1062 D7            push a
1866   1063 11            mov a, b
1867   1064 FA FD FF      lea d, [bp + -3] ; $b
1868   1067 2A            mov b, [d]
1869   1068 38 00 00      mov c, 0
1870   106B FD A7         sand a, b
1871   106D 11            mov a, b
1872   106E FA FB FF      lea d, [bp + -5] ; $c
1873   1071 2A            mov b, [d]
1874   1072 38 00 00      mov c, 0
1875   1075 FD A7         sand a, b
1876   1077 E4            pop a
1877   1078             ; --- END LOGICAL AND
1878   1078 E7            pop d
1879   1079 FD 43         mov [d], b
1880   107B             ; pass = pass && result == 1; 
1881   107B FA F7 FF      lea d, [bp + -9] ; $pass
1882   107E DA            push d
1883   107F FA F7 FF      lea d, [bp + -9] ; $pass
1884   1082 2A            mov b, [d]
1885   1083 38 00 00      mov c, 0
1886   1086             ; --- START LOGICAL AND
1887   1086 D7            push a
1888   1087 11            mov a, b
1889   1088 FA F9 FF      lea d, [bp + -7] ; $result
1890   108B 2A            mov b, [d]
1891   108C 38 00 00      mov c, 0
1892   108F             ; --- START RELATIONAL
1893   108F D7            push a
1894   1090 11            mov a, b
1895   1091 FD 2E 01 00   mov32 cb, $00000001
1895   1095 00 00 
1896   1097 B0            cmp a, b
1897   1098 FD 71         seq ; ==
1898   109A E4            pop a
1899   109B             ; --- END RELATIONAL
1900   109B FD A7         sand a, b
1901   109D E4            pop a
1902   109E             ; --- END LOGICAL AND
1903   109E E7            pop d
1904   109F FD 43         mov [d], b
1905   10A1             ; a = 1; b = 0; c = 1; 
1906   10A1 FA FF FF      lea d, [bp + -1] ; $a
1907   10A4 DA            push d
1908   10A5 FD 2E 01 00   mov32 cb, $00000001
1908   10A9 00 00 
1909   10AB E7            pop d
1910   10AC FD 43         mov [d], b
1911   10AE             ; b = 0; c = 1; 
1912   10AE FA FD FF      lea d, [bp + -3] ; $b
1913   10B1 DA            push d
1914   10B2 FD 2E 00 00   mov32 cb, $00000000
1914   10B6 00 00 
1915   10B8 E7            pop d
1916   10B9 FD 43         mov [d], b
1917   10BB             ; c = 1; 
1918   10BB FA FB FF      lea d, [bp + -5] ; $c
1919   10BE DA            push d
1920   10BF FD 2E 01 00   mov32 cb, $00000001
1920   10C3 00 00 
1921   10C5 E7            pop d
1922   10C6 FD 43         mov [d], b
1923   10C8             ; result = a && b && c; 
1924   10C8 FA F9 FF      lea d, [bp + -7] ; $result
1925   10CB DA            push d
1926   10CC FA FF FF      lea d, [bp + -1] ; $a
1927   10CF 2A            mov b, [d]
1928   10D0 38 00 00      mov c, 0
1929   10D3             ; --- START LOGICAL AND
1930   10D3 D7            push a
1931   10D4 11            mov a, b
1932   10D5 FA FD FF      lea d, [bp + -3] ; $b
1933   10D8 2A            mov b, [d]
1934   10D9 38 00 00      mov c, 0
1935   10DC FD A7         sand a, b
1936   10DE 11            mov a, b
1937   10DF FA FB FF      lea d, [bp + -5] ; $c
1938   10E2 2A            mov b, [d]
1939   10E3 38 00 00      mov c, 0
1940   10E6 FD A7         sand a, b
1941   10E8 E4            pop a
1942   10E9             ; --- END LOGICAL AND
1943   10E9 E7            pop d
1944   10EA FD 43         mov [d], b
1945   10EC             ; pass = pass && result == 0; 
1946   10EC FA F7 FF      lea d, [bp + -9] ; $pass
1947   10EF DA            push d
1948   10F0 FA F7 FF      lea d, [bp + -9] ; $pass
1949   10F3 2A            mov b, [d]
1950   10F4 38 00 00      mov c, 0
1951   10F7             ; --- START LOGICAL AND
1952   10F7 D7            push a
1953   10F8 11            mov a, b
1954   10F9 FA F9 FF      lea d, [bp + -7] ; $result
1955   10FC 2A            mov b, [d]
1956   10FD 38 00 00      mov c, 0
1957   1100             ; --- START RELATIONAL
1958   1100 D7            push a
1959   1101 11            mov a, b
1960   1102 FD 2E 00 00   mov32 cb, $00000000
1960   1106 00 00 
1961   1108 B0            cmp a, b
1962   1109 FD 71         seq ; ==
1963   110B E4            pop a
1964   110C             ; --- END RELATIONAL
1965   110C FD A7         sand a, b
1966   110E E4            pop a
1967   110F             ; --- END LOGICAL AND
1968   110F E7            pop d
1969   1110 FD 43         mov [d], b
1970   1112             ; a = 1; b = 1; c = 1; 
1971   1112 FA FF FF      lea d, [bp + -1] ; $a
1972   1115 DA            push d
1973   1116 FD 2E 01 00   mov32 cb, $00000001
1973   111A 00 00 
1974   111C E7            pop d
1975   111D FD 43         mov [d], b
1976   111F             ; b = 1; c = 1; 
1977   111F FA FD FF      lea d, [bp + -3] ; $b
1978   1122 DA            push d
1979   1123 FD 2E 01 00   mov32 cb, $00000001
1979   1127 00 00 
1980   1129 E7            pop d
1981   112A FD 43         mov [d], b
1982   112C             ; c = 1; 
1983   112C FA FB FF      lea d, [bp + -5] ; $c
1984   112F DA            push d
1985   1130 FD 2E 01 00   mov32 cb, $00000001
1985   1134 00 00 
1986   1136 E7            pop d
1987   1137 FD 43         mov [d], b
1988   1139             ; result = a || b || b; 
1989   1139 FA F9 FF      lea d, [bp + -7] ; $result
1990   113C DA            push d
1991   113D FA FF FF      lea d, [bp + -1] ; $a
1992   1140 2A            mov b, [d]
1993   1141 38 00 00      mov c, 0
1994   1144             ; --- START LOGICAL OR
1995   1144 D7            push a
1996   1145 11            mov a, b
1997   1146 FA FD FF      lea d, [bp + -3] ; $b
1998   1149 2A            mov b, [d]
1999   114A 38 00 00      mov c, 0
2000   114D FD A8         sor a, b ; ||
2001   114F 11            mov a, b
2002   1150 FA FD FF      lea d, [bp + -3] ; $b
2003   1153 2A            mov b, [d]
2004   1154 38 00 00      mov c, 0
2005   1157 FD A8         sor a, b ; ||
2006   1159 E4            pop a
2007   115A             ; --- END LOGICAL OR
2008   115A E7            pop d
2009   115B FD 43         mov [d], b
2010   115D             ; pass = pass && result == 1; 
2011   115D FA F7 FF      lea d, [bp + -9] ; $pass
2012   1160 DA            push d
2013   1161 FA F7 FF      lea d, [bp + -9] ; $pass
2014   1164 2A            mov b, [d]
2015   1165 38 00 00      mov c, 0
2016   1168             ; --- START LOGICAL AND
2017   1168 D7            push a
2018   1169 11            mov a, b
2019   116A FA F9 FF      lea d, [bp + -7] ; $result
2020   116D 2A            mov b, [d]
2021   116E 38 00 00      mov c, 0
2022   1171             ; --- START RELATIONAL
2023   1171 D7            push a
2024   1172 11            mov a, b
2025   1173 FD 2E 01 00   mov32 cb, $00000001
2025   1177 00 00 
2026   1179 B0            cmp a, b
2027   117A FD 71         seq ; ==
2028   117C E4            pop a
2029   117D             ; --- END RELATIONAL
2030   117D FD A7         sand a, b
2031   117F E4            pop a
2032   1180             ; --- END LOGICAL AND
2033   1180 E7            pop d
2034   1181 FD 43         mov [d], b
2035   1183             ; a = 0; b = 1; c = 0; 
2036   1183 FA FF FF      lea d, [bp + -1] ; $a
2037   1186 DA            push d
2038   1187 FD 2E 00 00   mov32 cb, $00000000
2038   118B 00 00 
2039   118D E7            pop d
2040   118E FD 43         mov [d], b
2041   1190             ; b = 1; c = 0; 
2042   1190 FA FD FF      lea d, [bp + -3] ; $b
2043   1193 DA            push d
2044   1194 FD 2E 01 00   mov32 cb, $00000001
2044   1198 00 00 
2045   119A E7            pop d
2046   119B FD 43         mov [d], b
2047   119D             ; c = 0; 
2048   119D FA FB FF      lea d, [bp + -5] ; $c
2049   11A0 DA            push d
2050   11A1 FD 2E 00 00   mov32 cb, $00000000
2050   11A5 00 00 
2051   11A7 E7            pop d
2052   11A8 FD 43         mov [d], b
2053   11AA             ; result = a || b || b; 
2054   11AA FA F9 FF      lea d, [bp + -7] ; $result
2055   11AD DA            push d
2056   11AE FA FF FF      lea d, [bp + -1] ; $a
2057   11B1 2A            mov b, [d]
2058   11B2 38 00 00      mov c, 0
2059   11B5             ; --- START LOGICAL OR
2060   11B5 D7            push a
2061   11B6 11            mov a, b
2062   11B7 FA FD FF      lea d, [bp + -3] ; $b
2063   11BA 2A            mov b, [d]
2064   11BB 38 00 00      mov c, 0
2065   11BE FD A8         sor a, b ; ||
2066   11C0 11            mov a, b
2067   11C1 FA FD FF      lea d, [bp + -3] ; $b
2068   11C4 2A            mov b, [d]
2069   11C5 38 00 00      mov c, 0
2070   11C8 FD A8         sor a, b ; ||
2071   11CA E4            pop a
2072   11CB             ; --- END LOGICAL OR
2073   11CB E7            pop d
2074   11CC FD 43         mov [d], b
2075   11CE             ; pass = pass && result == 1; 
2076   11CE FA F7 FF      lea d, [bp + -9] ; $pass
2077   11D1 DA            push d
2078   11D2 FA F7 FF      lea d, [bp + -9] ; $pass
2079   11D5 2A            mov b, [d]
2080   11D6 38 00 00      mov c, 0
2081   11D9             ; --- START LOGICAL AND
2082   11D9 D7            push a
2083   11DA 11            mov a, b
2084   11DB FA F9 FF      lea d, [bp + -7] ; $result
2085   11DE 2A            mov b, [d]
2086   11DF 38 00 00      mov c, 0
2087   11E2             ; --- START RELATIONAL
2088   11E2 D7            push a
2089   11E3 11            mov a, b
2090   11E4 FD 2E 01 00   mov32 cb, $00000001
2090   11E8 00 00 
2091   11EA B0            cmp a, b
2092   11EB FD 71         seq ; ==
2093   11ED E4            pop a
2094   11EE             ; --- END RELATIONAL
2095   11EE FD A7         sand a, b
2096   11F0 E4            pop a
2097   11F1             ; --- END LOGICAL AND
2098   11F1 E7            pop d
2099   11F2 FD 43         mov [d], b
2100   11F4             ; a = 1; b = 0; c = 1; 
2101   11F4 FA FF FF      lea d, [bp + -1] ; $a
2102   11F7 DA            push d
2103   11F8 FD 2E 01 00   mov32 cb, $00000001
2103   11FC 00 00 
2104   11FE E7            pop d
2105   11FF FD 43         mov [d], b
2106   1201             ; b = 0; c = 1; 
2107   1201 FA FD FF      lea d, [bp + -3] ; $b
2108   1204 DA            push d
2109   1205 FD 2E 00 00   mov32 cb, $00000000
2109   1209 00 00 
2110   120B E7            pop d
2111   120C FD 43         mov [d], b
2112   120E             ; c = 1; 
2113   120E FA FB FF      lea d, [bp + -5] ; $c
2114   1211 DA            push d
2115   1212 FD 2E 01 00   mov32 cb, $00000001
2115   1216 00 00 
2116   1218 E7            pop d
2117   1219 FD 43         mov [d], b
2118   121B             ; result = a || b && b; 
2119   121B FA F9 FF      lea d, [bp + -7] ; $result
2120   121E DA            push d
2121   121F FA FF FF      lea d, [bp + -1] ; $a
2122   1222 2A            mov b, [d]
2123   1223 38 00 00      mov c, 0
2124   1226             ; --- START LOGICAL OR
2125   1226 D7            push a
2126   1227 11            mov a, b
2127   1228 FA FD FF      lea d, [bp + -3] ; $b
2128   122B 2A            mov b, [d]
2129   122C 38 00 00      mov c, 0
2130   122F             ; --- START LOGICAL AND
2131   122F D7            push a
2132   1230 11            mov a, b
2133   1231 FA FD FF      lea d, [bp + -3] ; $b
2134   1234 2A            mov b, [d]
2135   1235 38 00 00      mov c, 0
2136   1238 FD A7         sand a, b
2137   123A E4            pop a
2138   123B             ; --- END LOGICAL AND
2139   123B FD A8         sor a, b ; ||
2140   123D E4            pop a
2141   123E             ; --- END LOGICAL OR
2142   123E E7            pop d
2143   123F FD 43         mov [d], b
2144   1241             ; pass = pass && result == 1; 
2145   1241 FA F7 FF      lea d, [bp + -9] ; $pass
2146   1244 DA            push d
2147   1245 FA F7 FF      lea d, [bp + -9] ; $pass
2148   1248 2A            mov b, [d]
2149   1249 38 00 00      mov c, 0
2150   124C             ; --- START LOGICAL AND
2151   124C D7            push a
2152   124D 11            mov a, b
2153   124E FA F9 FF      lea d, [bp + -7] ; $result
2154   1251 2A            mov b, [d]
2155   1252 38 00 00      mov c, 0
2156   1255             ; --- START RELATIONAL
2157   1255 D7            push a
2158   1256 11            mov a, b
2159   1257 FD 2E 01 00   mov32 cb, $00000001
2159   125B 00 00 
2160   125D B0            cmp a, b
2161   125E FD 71         seq ; ==
2162   1260 E4            pop a
2163   1261             ; --- END RELATIONAL
2164   1261 FD A7         sand a, b
2165   1263 E4            pop a
2166   1264             ; --- END LOGICAL AND
2167   1264 E7            pop d
2168   1265 FD 43         mov [d], b
2169   1267             ; a = 0; b = 0; c = 0; 
2170   1267 FA FF FF      lea d, [bp + -1] ; $a
2171   126A DA            push d
2172   126B FD 2E 00 00   mov32 cb, $00000000
2172   126F 00 00 
2173   1271 E7            pop d
2174   1272 FD 43         mov [d], b
2175   1274             ; b = 0; c = 0; 
2176   1274 FA FD FF      lea d, [bp + -3] ; $b
2177   1277 DA            push d
2178   1278 FD 2E 00 00   mov32 cb, $00000000
2178   127C 00 00 
2179   127E E7            pop d
2180   127F FD 43         mov [d], b
2181   1281             ; c = 0; 
2182   1281 FA FB FF      lea d, [bp + -5] ; $c
2183   1284 DA            push d
2184   1285 FD 2E 00 00   mov32 cb, $00000000
2184   1289 00 00 
2185   128B E7            pop d
2186   128C FD 43         mov [d], b
2187   128E             ; result = a || b || b; 
2188   128E FA F9 FF      lea d, [bp + -7] ; $result
2189   1291 DA            push d
2190   1292 FA FF FF      lea d, [bp + -1] ; $a
2191   1295 2A            mov b, [d]
2192   1296 38 00 00      mov c, 0
2193   1299             ; --- START LOGICAL OR
2194   1299 D7            push a
2195   129A 11            mov a, b
2196   129B FA FD FF      lea d, [bp + -3] ; $b
2197   129E 2A            mov b, [d]
2198   129F 38 00 00      mov c, 0
2199   12A2 FD A8         sor a, b ; ||
2200   12A4 11            mov a, b
2201   12A5 FA FD FF      lea d, [bp + -3] ; $b
2202   12A8 2A            mov b, [d]
2203   12A9 38 00 00      mov c, 0
2204   12AC FD A8         sor a, b ; ||
2205   12AE E4            pop a
2206   12AF             ; --- END LOGICAL OR
2207   12AF E7            pop d
2208   12B0 FD 43         mov [d], b
2209   12B2             ; pass = pass && result == 0; 
2210   12B2 FA F7 FF      lea d, [bp + -9] ; $pass
2211   12B5 DA            push d
2212   12B6 FA F7 FF      lea d, [bp + -9] ; $pass
2213   12B9 2A            mov b, [d]
2214   12BA 38 00 00      mov c, 0
2215   12BD             ; --- START LOGICAL AND
2216   12BD D7            push a
2217   12BE 11            mov a, b
2218   12BF FA F9 FF      lea d, [bp + -7] ; $result
2219   12C2 2A            mov b, [d]
2220   12C3 38 00 00      mov c, 0
2221   12C6             ; --- START RELATIONAL
2222   12C6 D7            push a
2223   12C7 11            mov a, b
2224   12C8 FD 2E 00 00   mov32 cb, $00000000
2224   12CC 00 00 
2225   12CE B0            cmp a, b
2226   12CF FD 71         seq ; ==
2227   12D1 E4            pop a
2228   12D2             ; --- END RELATIONAL
2229   12D2 FD A7         sand a, b
2230   12D4 E4            pop a
2231   12D5             ; --- END LOGICAL AND
2232   12D5 E7            pop d
2233   12D6 FD 43         mov [d], b
2234   12D8             ; return pass; 
2235   12D8 FA F7 FF      lea d, [bp + -9] ; $pass
2236   12DB 2A            mov b, [d]
2237   12DC 38 00 00      mov c, 0
2238   12DF F9            leave
2239   12E0 09            ret
2240   12E1             
2241   12E1             test5:
2242   12E1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2243   12E4             ; int pass; 
2244   12E4 52 02 00      sub sp, 2
2245   12E7             ; int i, j, k; 
2246   12E7 52 02 00      sub sp, 2
2247   12EA 52 02 00      sub sp, 2
2248   12ED 52 02 00      sub sp, 2
2249   12F0             ; int a1[5]; 
2250   12F0 52 0A 00      sub sp, 10
2251   12F3             ; int a2[5]; 
2252   12F3 52 0A 00      sub sp, 10
2253   12F6             ; int a3[5]; 
2254   12F6 52 0A 00      sub sp, 10
2255   12F9             ; i = 1; 
2256   12F9 FA FD FF      lea d, [bp + -3] ; $i
2257   12FC DA            push d
2258   12FD FD 2E 01 00   mov32 cb, $00000001
2258   1301 00 00 
2259   1303 E7            pop d
2260   1304 FD 43         mov [d], b
2261   1306             ; j = 1; 
2262   1306 FA FB FF      lea d, [bp + -5] ; $j
2263   1309 DA            push d
2264   130A FD 2E 01 00   mov32 cb, $00000001
2264   130E 00 00 
2265   1310 E7            pop d
2266   1311 FD 43         mov [d], b
2267   1313             ; k = 1; 
2268   1313 FA F9 FF      lea d, [bp + -7] ; $k
2269   1316 DA            push d
2270   1317 FD 2E 01 00   mov32 cb, $00000001
2270   131B 00 00 
2271   131D E7            pop d
2272   131E FD 43         mov [d], b
2273   1320             ; a1[3] = 1; 
2274   1320 FA EF FF      lea d, [bp + -17] ; $a1
2275   1323 D7            push a
2276   1324 DA            push d
2277   1325 FD 2E 03 00   mov32 cb, $00000003
2277   1329 00 00 
2278   132B E7            pop d
2279   132C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2280   1330 E4            pop a
2281   1331 DA            push d
2282   1332 FD 2E 01 00   mov32 cb, $00000001
2282   1336 00 00 
2283   1338 E7            pop d
2284   1339 FD 43         mov [d], b
2285   133B             ; a2[2] = 1; 
2286   133B FA E5 FF      lea d, [bp + -27] ; $a2
2287   133E D7            push a
2288   133F DA            push d
2289   1340 FD 2E 02 00   mov32 cb, $00000002
2289   1344 00 00 
2290   1346 E7            pop d
2291   1347 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2292   134B E4            pop a
2293   134C DA            push d
2294   134D FD 2E 01 00   mov32 cb, $00000001
2294   1351 00 00 
2295   1353 E7            pop d
2296   1354 FD 43         mov [d], b
2297   1356             ; a3[a2[a1[i + j + (k && 1) + (1 && 0)] + (i && 1)] + (0 || j)] = 56; 
2298   1356 FA DB FF      lea d, [bp + -37] ; $a3
2299   1359 D7            push a
2300   135A DA            push d
2301   135B FA E5 FF      lea d, [bp + -27] ; $a2
2302   135E D7            push a
2303   135F DA            push d
2304   1360 FA EF FF      lea d, [bp + -17] ; $a1
2305   1363 D7            push a
2306   1364 DA            push d
2307   1365 FA FD FF      lea d, [bp + -3] ; $i
2308   1368 2A            mov b, [d]
2309   1369 38 00 00      mov c, 0
2310   136C             ; --- START TERMS
2311   136C D7            push a
2312   136D 11            mov a, b
2313   136E FA FB FF      lea d, [bp + -5] ; $j
2314   1371 2A            mov b, [d]
2315   1372 38 00 00      mov c, 0
2316   1375 56            add b, a
2317   1376 11            mov a, b
2318   1377 FA F9 FF      lea d, [bp + -7] ; $k
2319   137A 2A            mov b, [d]
2320   137B 38 00 00      mov c, 0
2321   137E             ; --- START LOGICAL AND
2322   137E D7            push a
2323   137F 11            mov a, b
2324   1380 FD 2E 01 00   mov32 cb, $00000001
2324   1384 00 00 
2325   1386 FD A7         sand a, b
2326   1388 E4            pop a
2327   1389             ; --- END LOGICAL AND
2328   1389 56            add b, a
2329   138A 11            mov a, b
2330   138B FD 2E 01 00   mov32 cb, $00000001
2330   138F 00 00 
2331   1391             ; --- START LOGICAL AND
2332   1391 D7            push a
2333   1392 11            mov a, b
2334   1393 FD 2E 00 00   mov32 cb, $00000000
2334   1397 00 00 
2335   1399 FD A7         sand a, b
2336   139B E4            pop a
2337   139C             ; --- END LOGICAL AND
2338   139C 56            add b, a
2339   139D E4            pop a
2340   139E             ; --- END TERMS
2341   139E E7            pop d
2342   139F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2343   13A3 E4            pop a
2344   13A4 2A            mov b, [d]
2345   13A5 38 00 00      mov c, 0
2346   13A8             ; --- START TERMS
2347   13A8 D7            push a
2348   13A9 11            mov a, b
2349   13AA FA FD FF      lea d, [bp + -3] ; $i
2350   13AD 2A            mov b, [d]
2351   13AE 38 00 00      mov c, 0
2352   13B1             ; --- START LOGICAL AND
2353   13B1 D7            push a
2354   13B2 11            mov a, b
2355   13B3 FD 2E 01 00   mov32 cb, $00000001
2355   13B7 00 00 
2356   13B9 FD A7         sand a, b
2357   13BB E4            pop a
2358   13BC             ; --- END LOGICAL AND
2359   13BC 56            add b, a
2360   13BD E4            pop a
2361   13BE             ; --- END TERMS
2362   13BE E7            pop d
2363   13BF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2364   13C3 E4            pop a
2365   13C4 2A            mov b, [d]
2366   13C5 38 00 00      mov c, 0
2367   13C8             ; --- START TERMS
2368   13C8 D7            push a
2369   13C9 11            mov a, b
2370   13CA FD 2E 00 00   mov32 cb, $00000000
2370   13CE 00 00 
2371   13D0             ; --- START LOGICAL OR
2372   13D0 D7            push a
2373   13D1 11            mov a, b
2374   13D2 FA FB FF      lea d, [bp + -5] ; $j
2375   13D5 2A            mov b, [d]
2376   13D6 38 00 00      mov c, 0
2377   13D9 FD A8         sor a, b ; ||
2378   13DB E4            pop a
2379   13DC             ; --- END LOGICAL OR
2380   13DC 56            add b, a
2381   13DD E4            pop a
2382   13DE             ; --- END TERMS
2383   13DE E7            pop d
2384   13DF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2385   13E3 E4            pop a
2386   13E4 DA            push d
2387   13E5 FD 2E 38 00   mov32 cb, $00000038
2387   13E9 00 00 
2388   13EB E7            pop d
2389   13EC FD 43         mov [d], b
2390   13EE             ; pass = a3[2] == 56; 
2391   13EE FA FF FF      lea d, [bp + -1] ; $pass
2392   13F1 DA            push d
2393   13F2 FA DB FF      lea d, [bp + -37] ; $a3
2394   13F5 D7            push a
2395   13F6 DA            push d
2396   13F7 FD 2E 02 00   mov32 cb, $00000002
2396   13FB 00 00 
2397   13FD E7            pop d
2398   13FE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2399   1402 E4            pop a
2400   1403 2A            mov b, [d]
2401   1404 38 00 00      mov c, 0
2402   1407             ; --- START RELATIONAL
2403   1407 D7            push a
2404   1408 11            mov a, b
2405   1409 FD 2E 38 00   mov32 cb, $00000038
2405   140D 00 00 
2406   140F B0            cmp a, b
2407   1410 FD 71         seq ; ==
2408   1412 E4            pop a
2409   1413             ; --- END RELATIONAL
2410   1413 E7            pop d
2411   1414 FD 43         mov [d], b
2412   1416             ; return pass; 
2413   1416 FA FF FF      lea d, [bp + -1] ; $pass
2414   1419 2A            mov b, [d]
2415   141A 38 00 00      mov c, 0
2416   141D F9            leave
2417   141E 09            ret
2418   141F             
2419   141F             test6:
2420   141F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2421   1422             ; int pass = 1; 
2422   1422 52 02 00      sub sp, 2
2423   1425             ; --- START LOCAL VAR INITIALIZATION
2424   1425 FA FF FF      lea d, [bp + -1] ; $pass
2425   1428 DA            push d
2426   1429 FD 2E 01 00   mov32 cb, $00000001
2426   142D 00 00 
2427   142F E7            pop d
2428   1430 FD 43         mov [d], b
2429   1432             ; --- END LOCAL VAR INITIALIZATION
2430   1432             ; int i, j, k; 
2431   1432 52 02 00      sub sp, 2
2432   1435 52 02 00      sub sp, 2
2433   1438 52 02 00      sub sp, 2
2434   143B             ; test6_struct.c1 = 'A'; 
2435   143B 3B A7 24      mov d, _test6_struct_data ; $test6_struct
2436   143E 58 00 00      add d, 0
2437   1441 DA            push d
2438   1442 FD 2E 41 00   mov32 cb, $00000041
2438   1446 00 00 
2439   1448 E7            pop d
2440   1449 FD 3E         mov [d], bl
2441   144B             ; pass = pass && test6_struct.c1 == 'A'; 
2442   144B FA FF FF      lea d, [bp + -1] ; $pass
2443   144E DA            push d
2444   144F FA FF FF      lea d, [bp + -1] ; $pass
2445   1452 2A            mov b, [d]
2446   1453 38 00 00      mov c, 0
2447   1456             ; --- START LOGICAL AND
2448   1456 D7            push a
2449   1457 11            mov a, b
2450   1458 3B A7 24      mov d, _test6_struct_data ; $test6_struct
2451   145B 58 00 00      add d, 0
2452   145E 32            mov bl, [d]
2453   145F A7 00         mov bh, 0
2454   1461 38 00 00      mov c, 0
2455   1464             ; --- START RELATIONAL
2456   1464 D7            push a
2457   1465 11            mov a, b
2458   1466 FD 2E 41 00   mov32 cb, $00000041
2458   146A 00 00 
2459   146C B0            cmp a, b
2460   146D FD 71         seq ; ==
2461   146F E4            pop a
2462   1470             ; --- END RELATIONAL
2463   1470 FD A7         sand a, b
2464   1472 E4            pop a
2465   1473             ; --- END LOGICAL AND
2466   1473 E7            pop d
2467   1474 FD 43         mov [d], b
2468   1476             ; for(i = 0; i < 5; i++){ 
2469   1476             _for35_init:
2470   1476 FA FD FF      lea d, [bp + -3] ; $i
2471   1479 DA            push d
2472   147A FD 2E 00 00   mov32 cb, $00000000
2472   147E 00 00 
2473   1480 E7            pop d
2474   1481 FD 43         mov [d], b
2475   1483             _for35_cond:
2476   1483 FA FD FF      lea d, [bp + -3] ; $i
2477   1486 2A            mov b, [d]
2478   1487 38 00 00      mov c, 0
2479   148A             ; --- START RELATIONAL
2480   148A D7            push a
2481   148B 11            mov a, b
2482   148C FD 2E 05 00   mov32 cb, $00000005
2482   1490 00 00 
2483   1492 B0            cmp a, b
2484   1493 FD 73         slt ; < (signed)
2485   1495 E4            pop a
2486   1496             ; --- END RELATIONAL
2487   1496 C0 00 00      cmp b, 0
2488   1499 C6 04 15      je _for35_exit
2489   149C             _for35_block:
2490   149C             ; test6_struct.ca[i] = i; 
2491   149C 3B A7 24      mov d, _test6_struct_data ; $test6_struct
2492   149F 58 01 00      add d, 1
2493   14A2 D7            push a
2494   14A3 DA            push d
2495   14A4 FA FD FF      lea d, [bp + -3] ; $i
2496   14A7 2A            mov b, [d]
2497   14A8 38 00 00      mov c, 0
2498   14AB E7            pop d
2499   14AC 5A            add d, b
2500   14AD E4            pop a
2501   14AE DA            push d
2502   14AF FA FD FF      lea d, [bp + -3] ; $i
2503   14B2 2A            mov b, [d]
2504   14B3 38 00 00      mov c, 0
2505   14B6 E7            pop d
2506   14B7 FD 3E         mov [d], bl
2507   14B9             ; pass = pass && test6_struct.ca[i] == i; 
2508   14B9 FA FF FF      lea d, [bp + -1] ; $pass
2509   14BC DA            push d
2510   14BD FA FF FF      lea d, [bp + -1] ; $pass
2511   14C0 2A            mov b, [d]
2512   14C1 38 00 00      mov c, 0
2513   14C4             ; --- START LOGICAL AND
2514   14C4 D7            push a
2515   14C5 11            mov a, b
2516   14C6 3B A7 24      mov d, _test6_struct_data ; $test6_struct
2517   14C9 58 01 00      add d, 1
2518   14CC D7            push a
2519   14CD DA            push d
2520   14CE FA FD FF      lea d, [bp + -3] ; $i
2521   14D1 2A            mov b, [d]
2522   14D2 38 00 00      mov c, 0
2523   14D5 E7            pop d
2524   14D6 5A            add d, b
2525   14D7 E4            pop a
2526   14D8 32            mov bl, [d]
2527   14D9 A7 00         mov bh, 0
2528   14DB 38 00 00      mov c, 0
2529   14DE             ; --- START RELATIONAL
2530   14DE D7            push a
2531   14DF 11            mov a, b
2532   14E0 FA FD FF      lea d, [bp + -3] ; $i
2533   14E3 2A            mov b, [d]
2534   14E4 38 00 00      mov c, 0
2535   14E7 B0            cmp a, b
2536   14E8 FD 71         seq ; ==
2537   14EA E4            pop a
2538   14EB             ; --- END RELATIONAL
2539   14EB FD A7         sand a, b
2540   14ED E4            pop a
2541   14EE             ; --- END LOGICAL AND
2542   14EE E7            pop d
2543   14EF FD 43         mov [d], b
2544   14F1             _for35_update:
2545   14F1 FA FD FF      lea d, [bp + -3] ; $i
2546   14F4 2A            mov b, [d]
2547   14F5 38 00 00      mov c, 0
2548   14F8 11            mov a, b
2549   14F9 FD 77         inc b
2550   14FB FA FD FF      lea d, [bp + -3] ; $i
2551   14FE FD 43         mov [d], b
2552   1500 27            mov b, a
2553   1501 0A 83 14      jmp _for35_cond
2554   1504             _for35_exit:
2555   1504             ; test6_struct.i1 = 55555; 
2556   1504 3B A7 24      mov d, _test6_struct_data ; $test6_struct
2557   1507 58 06 00      add d, 6
2558   150A DA            push d
2559   150B FD 2E 03 D9   mov32 cb, $0000d903
2559   150F 00 00 
2560   1511 E7            pop d
2561   1512 FD 43         mov [d], b
2562   1514             ; pass = pass && test6_struct.i1 == 55555; 
2563   1514 FA FF FF      lea d, [bp + -1] ; $pass
2564   1517 DA            push d
2565   1518 FA FF FF      lea d, [bp + -1] ; $pass
2566   151B 2A            mov b, [d]
2567   151C 38 00 00      mov c, 0
2568   151F             ; --- START LOGICAL AND
2569   151F D7            push a
2570   1520 11            mov a, b
2571   1521 3B A7 24      mov d, _test6_struct_data ; $test6_struct
2572   1524 58 06 00      add d, 6
2573   1527 2A            mov b, [d]
2574   1528 38 00 00      mov c, 0
2575   152B             ; --- START RELATIONAL
2576   152B D7            push a
2577   152C 11            mov a, b
2578   152D FD 2E 03 D9   mov32 cb, $0000d903
2578   1531 00 00 
2579   1533 B0            cmp a, b
2580   1534 FD 71         seq ; ==
2581   1536 E4            pop a
2582   1537             ; --- END RELATIONAL
2583   1537 FD A7         sand a, b
2584   1539 E4            pop a
2585   153A             ; --- END LOGICAL AND
2586   153A E7            pop d
2587   153B FD 43         mov [d], b
2588   153D             ; for(i = 0; i < 5; i++){ 
2589   153D             _for36_init:
2590   153D FA FD FF      lea d, [bp + -3] ; $i
2591   1540 DA            push d
2592   1541 FD 2E 00 00   mov32 cb, $00000000
2592   1545 00 00 
2593   1547 E7            pop d
2594   1548 FD 43         mov [d], b
2595   154A             _for36_cond:
2596   154A FA FD FF      lea d, [bp + -3] ; $i
2597   154D 2A            mov b, [d]
2598   154E 38 00 00      mov c, 0
2599   1551             ; --- START RELATIONAL
2600   1551 D7            push a
2601   1552 11            mov a, b
2602   1553 FD 2E 05 00   mov32 cb, $00000005
2602   1557 00 00 
2603   1559 B0            cmp a, b
2604   155A FD 73         slt ; < (signed)
2605   155C E4            pop a
2606   155D             ; --- END RELATIONAL
2607   155D C0 00 00      cmp b, 0
2608   1560 C6 CF 15      je _for36_exit
2609   1563             _for36_block:
2610   1563             ; test6_struct.ia[i] = i; 
2611   1563 3B A7 24      mov d, _test6_struct_data ; $test6_struct
2612   1566 58 08 00      add d, 8
2613   1569 D7            push a
2614   156A DA            push d
2615   156B FA FD FF      lea d, [bp + -3] ; $i
2616   156E 2A            mov b, [d]
2617   156F 38 00 00      mov c, 0
2618   1572 E7            pop d
2619   1573 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2620   1577 E4            pop a
2621   1578 DA            push d
2622   1579 FA FD FF      lea d, [bp + -3] ; $i
2623   157C 2A            mov b, [d]
2624   157D 38 00 00      mov c, 0
2625   1580 E7            pop d
2626   1581 FD 43         mov [d], b
2627   1583             ; pass = pass && test6_struct.ia[i] == i; 
2628   1583 FA FF FF      lea d, [bp + -1] ; $pass
2629   1586 DA            push d
2630   1587 FA FF FF      lea d, [bp + -1] ; $pass
2631   158A 2A            mov b, [d]
2632   158B 38 00 00      mov c, 0
2633   158E             ; --- START LOGICAL AND
2634   158E D7            push a
2635   158F 11            mov a, b
2636   1590 3B A7 24      mov d, _test6_struct_data ; $test6_struct
2637   1593 58 08 00      add d, 8
2638   1596 D7            push a
2639   1597 DA            push d
2640   1598 FA FD FF      lea d, [bp + -3] ; $i
2641   159B 2A            mov b, [d]
2642   159C 38 00 00      mov c, 0
2643   159F E7            pop d
2644   15A0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2645   15A4 E4            pop a
2646   15A5 2A            mov b, [d]
2647   15A6 38 00 00      mov c, 0
2648   15A9             ; --- START RELATIONAL
2649   15A9 D7            push a
2650   15AA 11            mov a, b
2651   15AB FA FD FF      lea d, [bp + -3] ; $i
2652   15AE 2A            mov b, [d]
2653   15AF 38 00 00      mov c, 0
2654   15B2 B0            cmp a, b
2655   15B3 FD 71         seq ; ==
2656   15B5 E4            pop a
2657   15B6             ; --- END RELATIONAL
2658   15B6 FD A7         sand a, b
2659   15B8 E4            pop a
2660   15B9             ; --- END LOGICAL AND
2661   15B9 E7            pop d
2662   15BA FD 43         mov [d], b
2663   15BC             _for36_update:
2664   15BC FA FD FF      lea d, [bp + -3] ; $i
2665   15BF 2A            mov b, [d]
2666   15C0 38 00 00      mov c, 0
2667   15C3 11            mov a, b
2668   15C4 FD 77         inc b
2669   15C6 FA FD FF      lea d, [bp + -3] ; $i
2670   15C9 FD 43         mov [d], b
2671   15CB 27            mov b, a
2672   15CC 0A 4A 15      jmp _for36_cond
2673   15CF             _for36_exit:
2674   15CF             ; return pass; 
2675   15CF FA FF FF      lea d, [bp + -1] ; $pass
2676   15D2 2A            mov b, [d]
2677   15D3 38 00 00      mov c, 0
2678   15D6 F9            leave
2679   15D7 09            ret
2680   15D8             
2681   15D8             test7:
2682   15D8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2683   15DB             ; int pass = 1; 
2684   15DB 52 02 00      sub sp, 2
2685   15DE             ; --- START LOCAL VAR INITIALIZATION
2686   15DE FA FF FF      lea d, [bp + -1] ; $pass
2687   15E1 DA            push d
2688   15E2 FD 2E 01 00   mov32 cb, $00000001
2688   15E6 00 00 
2689   15E8 E7            pop d
2690   15E9 FD 43         mov [d], b
2691   15EB             ; --- END LOCAL VAR INITIALIZATION
2692   15EB             ; int i, j, k; 
2693   15EB 52 02 00      sub sp, 2
2694   15EE 52 02 00      sub sp, 2
2695   15F1 52 02 00      sub sp, 2
2696   15F4             ; test7_struct.test7_substruct.c1 = 'A'; 
2697   15F4 3B B9 24      mov d, _test7_struct_data ; $test7_struct
2698   15F7 58 06 00      add d, 6
2699   15FA 58 00 00      add d, 0
2700   15FD DA            push d
2701   15FE FD 2E 41 00   mov32 cb, $00000041
2701   1602 00 00 
2702   1604 E7            pop d
2703   1605 FD 3E         mov [d], bl
2704   1607             ; pass = pass && test7_struct.test7_substruct.c1 == 'A'; 
2705   1607 FA FF FF      lea d, [bp + -1] ; $pass
2706   160A DA            push d
2707   160B FA FF FF      lea d, [bp + -1] ; $pass
2708   160E 2A            mov b, [d]
2709   160F 38 00 00      mov c, 0
2710   1612             ; --- START LOGICAL AND
2711   1612 D7            push a
2712   1613 11            mov a, b
2713   1614 3B B9 24      mov d, _test7_struct_data ; $test7_struct
2714   1617 58 06 00      add d, 6
2715   161A 58 00 00      add d, 0
2716   161D 32            mov bl, [d]
2717   161E A7 00         mov bh, 0
2718   1620 38 00 00      mov c, 0
2719   1623             ; --- START RELATIONAL
2720   1623 D7            push a
2721   1624 11            mov a, b
2722   1625 FD 2E 41 00   mov32 cb, $00000041
2722   1629 00 00 
2723   162B B0            cmp a, b
2724   162C FD 71         seq ; ==
2725   162E E4            pop a
2726   162F             ; --- END RELATIONAL
2727   162F FD A7         sand a, b
2728   1631 E4            pop a
2729   1632             ; --- END LOGICAL AND
2730   1632 E7            pop d
2731   1633 FD 43         mov [d], b
2732   1635             ; for(i = 0; i < 5; i++){ 
2733   1635             _for37_init:
2734   1635 FA FD FF      lea d, [bp + -3] ; $i
2735   1638 DA            push d
2736   1639 FD 2E 00 00   mov32 cb, $00000000
2736   163D 00 00 
2737   163F E7            pop d
2738   1640 FD 43         mov [d], b
2739   1642             _for37_cond:
2740   1642 FA FD FF      lea d, [bp + -3] ; $i
2741   1645 2A            mov b, [d]
2742   1646 38 00 00      mov c, 0
2743   1649             ; --- START RELATIONAL
2744   1649 D7            push a
2745   164A 11            mov a, b
2746   164B FD 2E 05 00   mov32 cb, $00000005
2746   164F 00 00 
2747   1651 B0            cmp a, b
2748   1652 FD 73         slt ; < (signed)
2749   1654 E4            pop a
2750   1655             ; --- END RELATIONAL
2751   1655 C0 00 00      cmp b, 0
2752   1658 C6 C9 16      je _for37_exit
2753   165B             _for37_block:
2754   165B             ; test7_struct.test7_substruct.ca[i] = i; 
2755   165B 3B B9 24      mov d, _test7_struct_data ; $test7_struct
2756   165E 58 06 00      add d, 6
2757   1661 58 01 00      add d, 1
2758   1664 D7            push a
2759   1665 DA            push d
2760   1666 FA FD FF      lea d, [bp + -3] ; $i
2761   1669 2A            mov b, [d]
2762   166A 38 00 00      mov c, 0
2763   166D E7            pop d
2764   166E 5A            add d, b
2765   166F E4            pop a
2766   1670 DA            push d
2767   1671 FA FD FF      lea d, [bp + -3] ; $i
2768   1674 2A            mov b, [d]
2769   1675 38 00 00      mov c, 0
2770   1678 E7            pop d
2771   1679 FD 3E         mov [d], bl
2772   167B             ; pass = pass && test7_struct.test7_substruct.ca[i] == i; 
2773   167B FA FF FF      lea d, [bp + -1] ; $pass
2774   167E DA            push d
2775   167F FA FF FF      lea d, [bp + -1] ; $pass
2776   1682 2A            mov b, [d]
2777   1683 38 00 00      mov c, 0
2778   1686             ; --- START LOGICAL AND
2779   1686 D7            push a
2780   1687 11            mov a, b
2781   1688 3B B9 24      mov d, _test7_struct_data ; $test7_struct
2782   168B 58 06 00      add d, 6
2783   168E 58 01 00      add d, 1
2784   1691 D7            push a
2785   1692 DA            push d
2786   1693 FA FD FF      lea d, [bp + -3] ; $i
2787   1696 2A            mov b, [d]
2788   1697 38 00 00      mov c, 0
2789   169A E7            pop d
2790   169B 5A            add d, b
2791   169C E4            pop a
2792   169D 32            mov bl, [d]
2793   169E A7 00         mov bh, 0
2794   16A0 38 00 00      mov c, 0
2795   16A3             ; --- START RELATIONAL
2796   16A3 D7            push a
2797   16A4 11            mov a, b
2798   16A5 FA FD FF      lea d, [bp + -3] ; $i
2799   16A8 2A            mov b, [d]
2800   16A9 38 00 00      mov c, 0
2801   16AC B0            cmp a, b
2802   16AD FD 71         seq ; ==
2803   16AF E4            pop a
2804   16B0             ; --- END RELATIONAL
2805   16B0 FD A7         sand a, b
2806   16B2 E4            pop a
2807   16B3             ; --- END LOGICAL AND
2808   16B3 E7            pop d
2809   16B4 FD 43         mov [d], b
2810   16B6             _for37_update:
2811   16B6 FA FD FF      lea d, [bp + -3] ; $i
2812   16B9 2A            mov b, [d]
2813   16BA 38 00 00      mov c, 0
2814   16BD 11            mov a, b
2815   16BE FD 77         inc b
2816   16C0 FA FD FF      lea d, [bp + -3] ; $i
2817   16C3 FD 43         mov [d], b
2818   16C5 27            mov b, a
2819   16C6 0A 42 16      jmp _for37_cond
2820   16C9             _for37_exit:
2821   16C9             ; test7_struct.test7_substruct.i1 = 55555; 
2822   16C9 3B B9 24      mov d, _test7_struct_data ; $test7_struct
2823   16CC 58 06 00      add d, 6
2824   16CF 58 06 00      add d, 6
2825   16D2 DA            push d
2826   16D3 FD 2E 03 D9   mov32 cb, $0000d903
2826   16D7 00 00 
2827   16D9 E7            pop d
2828   16DA FD 43         mov [d], b
2829   16DC             ; pass = pass && test7_struct.test7_substruct.i1 == 55555; 
2830   16DC FA FF FF      lea d, [bp + -1] ; $pass
2831   16DF DA            push d
2832   16E0 FA FF FF      lea d, [bp + -1] ; $pass
2833   16E3 2A            mov b, [d]
2834   16E4 38 00 00      mov c, 0
2835   16E7             ; --- START LOGICAL AND
2836   16E7 D7            push a
2837   16E8 11            mov a, b
2838   16E9 3B B9 24      mov d, _test7_struct_data ; $test7_struct
2839   16EC 58 06 00      add d, 6
2840   16EF 58 06 00      add d, 6
2841   16F2 2A            mov b, [d]
2842   16F3 38 00 00      mov c, 0
2843   16F6             ; --- START RELATIONAL
2844   16F6 D7            push a
2845   16F7 11            mov a, b
2846   16F8 FD 2E 03 D9   mov32 cb, $0000d903
2846   16FC 00 00 
2847   16FE B0            cmp a, b
2848   16FF FD 71         seq ; ==
2849   1701 E4            pop a
2850   1702             ; --- END RELATIONAL
2851   1702 FD A7         sand a, b
2852   1704 E4            pop a
2853   1705             ; --- END LOGICAL AND
2854   1705 E7            pop d
2855   1706 FD 43         mov [d], b
2856   1708             ; for(i = 0; i < 5; i++){ 
2857   1708             _for38_init:
2858   1708 FA FD FF      lea d, [bp + -3] ; $i
2859   170B DA            push d
2860   170C FD 2E 00 00   mov32 cb, $00000000
2860   1710 00 00 
2861   1712 E7            pop d
2862   1713 FD 43         mov [d], b
2863   1715             _for38_cond:
2864   1715 FA FD FF      lea d, [bp + -3] ; $i
2865   1718 2A            mov b, [d]
2866   1719 38 00 00      mov c, 0
2867   171C             ; --- START RELATIONAL
2868   171C D7            push a
2869   171D 11            mov a, b
2870   171E FD 2E 05 00   mov32 cb, $00000005
2870   1722 00 00 
2871   1724 B0            cmp a, b
2872   1725 FD 73         slt ; < (signed)
2873   1727 E4            pop a
2874   1728             ; --- END RELATIONAL
2875   1728 C0 00 00      cmp b, 0
2876   172B C6 A0 17      je _for38_exit
2877   172E             _for38_block:
2878   172E             ; test7_struct.test7_substruct.ia[i] = i; 
2879   172E 3B B9 24      mov d, _test7_struct_data ; $test7_struct
2880   1731 58 06 00      add d, 6
2881   1734 58 08 00      add d, 8
2882   1737 D7            push a
2883   1738 DA            push d
2884   1739 FA FD FF      lea d, [bp + -3] ; $i
2885   173C 2A            mov b, [d]
2886   173D 38 00 00      mov c, 0
2887   1740 E7            pop d
2888   1741 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2889   1745 E4            pop a
2890   1746 DA            push d
2891   1747 FA FD FF      lea d, [bp + -3] ; $i
2892   174A 2A            mov b, [d]
2893   174B 38 00 00      mov c, 0
2894   174E E7            pop d
2895   174F FD 43         mov [d], b
2896   1751             ; pass = pass && test7_struct.test7_substruct.ia[i] == i; 
2897   1751 FA FF FF      lea d, [bp + -1] ; $pass
2898   1754 DA            push d
2899   1755 FA FF FF      lea d, [bp + -1] ; $pass
2900   1758 2A            mov b, [d]
2901   1759 38 00 00      mov c, 0
2902   175C             ; --- START LOGICAL AND
2903   175C D7            push a
2904   175D 11            mov a, b
2905   175E 3B B9 24      mov d, _test7_struct_data ; $test7_struct
2906   1761 58 06 00      add d, 6
2907   1764 58 08 00      add d, 8
2908   1767 D7            push a
2909   1768 DA            push d
2910   1769 FA FD FF      lea d, [bp + -3] ; $i
2911   176C 2A            mov b, [d]
2912   176D 38 00 00      mov c, 0
2913   1770 E7            pop d
2914   1771 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2915   1775 E4            pop a
2916   1776 2A            mov b, [d]
2917   1777 38 00 00      mov c, 0
2918   177A             ; --- START RELATIONAL
2919   177A D7            push a
2920   177B 11            mov a, b
2921   177C FA FD FF      lea d, [bp + -3] ; $i
2922   177F 2A            mov b, [d]
2923   1780 38 00 00      mov c, 0
2924   1783 B0            cmp a, b
2925   1784 FD 71         seq ; ==
2926   1786 E4            pop a
2927   1787             ; --- END RELATIONAL
2928   1787 FD A7         sand a, b
2929   1789 E4            pop a
2930   178A             ; --- END LOGICAL AND
2931   178A E7            pop d
2932   178B FD 43         mov [d], b
2933   178D             _for38_update:
2934   178D FA FD FF      lea d, [bp + -3] ; $i
2935   1790 2A            mov b, [d]
2936   1791 38 00 00      mov c, 0
2937   1794 11            mov a, b
2938   1795 FD 77         inc b
2939   1797 FA FD FF      lea d, [bp + -3] ; $i
2940   179A FD 43         mov [d], b
2941   179C 27            mov b, a
2942   179D 0A 15 17      jmp _for38_cond
2943   17A0             _for38_exit:
2944   17A0             ; return pass; 
2945   17A0 FA FF FF      lea d, [bp + -1] ; $pass
2946   17A3 2A            mov b, [d]
2947   17A4 38 00 00      mov c, 0
2948   17A7 F9            leave
2949   17A8 09            ret
2950   17A9             
2951   17A9             test8:
2952   17A9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2953   17AC             ; int pass = 1; 
2954   17AC 52 02 00      sub sp, 2
2955   17AF             ; --- START LOCAL VAR INITIALIZATION
2956   17AF FA FF FF      lea d, [bp + -1] ; $pass
2957   17B2 DA            push d
2958   17B3 FD 2E 01 00   mov32 cb, $00000001
2958   17B7 00 00 
2959   17B9 E7            pop d
2960   17BA FD 43         mov [d], b
2961   17BC             ; --- END LOCAL VAR INITIALIZATION
2962   17BC             ; int i, j, k; 
2963   17BC 52 02 00      sub sp, 2
2964   17BF 52 02 00      sub sp, 2
2965   17C2 52 02 00      sub sp, 2
2966   17C5             ; struct t_test8_struct test8_struct; 
2967   17C5 52 12 00      sub sp, 18
2968   17C8             ; test8_struct.c1 = 'A'; 
2969   17C8 FA E7 FF      lea d, [bp + -25] ; $test8_struct
2970   17CB 58 00 00      add d, 0
2971   17CE DA            push d
2972   17CF FD 2E 41 00   mov32 cb, $00000041
2972   17D3 00 00 
2973   17D5 E7            pop d
2974   17D6 FD 3E         mov [d], bl
2975   17D8             ; pass = pass && test8_struct.c1 == 'A'; 
2976   17D8 FA FF FF      lea d, [bp + -1] ; $pass
2977   17DB DA            push d
2978   17DC FA FF FF      lea d, [bp + -1] ; $pass
2979   17DF 2A            mov b, [d]
2980   17E0 38 00 00      mov c, 0
2981   17E3             ; --- START LOGICAL AND
2982   17E3 D7            push a
2983   17E4 11            mov a, b
2984   17E5 FA E7 FF      lea d, [bp + -25] ; $test8_struct
2985   17E8 58 00 00      add d, 0
2986   17EB 32            mov bl, [d]
2987   17EC A7 00         mov bh, 0
2988   17EE 38 00 00      mov c, 0
2989   17F1             ; --- START RELATIONAL
2990   17F1 D7            push a
2991   17F2 11            mov a, b
2992   17F3 FD 2E 41 00   mov32 cb, $00000041
2992   17F7 00 00 
2993   17F9 B0            cmp a, b
2994   17FA FD 71         seq ; ==
2995   17FC E4            pop a
2996   17FD             ; --- END RELATIONAL
2997   17FD FD A7         sand a, b
2998   17FF E4            pop a
2999   1800             ; --- END LOGICAL AND
3000   1800 E7            pop d
3001   1801 FD 43         mov [d], b
3002   1803             ; for(i = 0; i < 5; i++){ 
3003   1803             _for39_init:
3004   1803 FA FD FF      lea d, [bp + -3] ; $i
3005   1806 DA            push d
3006   1807 FD 2E 00 00   mov32 cb, $00000000
3006   180B 00 00 
3007   180D E7            pop d
3008   180E FD 43         mov [d], b
3009   1810             _for39_cond:
3010   1810 FA FD FF      lea d, [bp + -3] ; $i
3011   1813 2A            mov b, [d]
3012   1814 38 00 00      mov c, 0
3013   1817             ; --- START RELATIONAL
3014   1817 D7            push a
3015   1818 11            mov a, b
3016   1819 FD 2E 05 00   mov32 cb, $00000005
3016   181D 00 00 
3017   181F B0            cmp a, b
3018   1820 FD 73         slt ; < (signed)
3019   1822 E4            pop a
3020   1823             ; --- END RELATIONAL
3021   1823 C0 00 00      cmp b, 0
3022   1826 C6 91 18      je _for39_exit
3023   1829             _for39_block:
3024   1829             ; test8_struct.ca[i] = i; 
3025   1829 FA E7 FF      lea d, [bp + -25] ; $test8_struct
3026   182C 58 01 00      add d, 1
3027   182F D7            push a
3028   1830 DA            push d
3029   1831 FA FD FF      lea d, [bp + -3] ; $i
3030   1834 2A            mov b, [d]
3031   1835 38 00 00      mov c, 0
3032   1838 E7            pop d
3033   1839 5A            add d, b
3034   183A E4            pop a
3035   183B DA            push d
3036   183C FA FD FF      lea d, [bp + -3] ; $i
3037   183F 2A            mov b, [d]
3038   1840 38 00 00      mov c, 0
3039   1843 E7            pop d
3040   1844 FD 3E         mov [d], bl
3041   1846             ; pass = pass && test8_struct.ca[i] == i; 
3042   1846 FA FF FF      lea d, [bp + -1] ; $pass
3043   1849 DA            push d
3044   184A FA FF FF      lea d, [bp + -1] ; $pass
3045   184D 2A            mov b, [d]
3046   184E 38 00 00      mov c, 0
3047   1851             ; --- START LOGICAL AND
3048   1851 D7            push a
3049   1852 11            mov a, b
3050   1853 FA E7 FF      lea d, [bp + -25] ; $test8_struct
3051   1856 58 01 00      add d, 1
3052   1859 D7            push a
3053   185A DA            push d
3054   185B FA FD FF      lea d, [bp + -3] ; $i
3055   185E 2A            mov b, [d]
3056   185F 38 00 00      mov c, 0
3057   1862 E7            pop d
3058   1863 5A            add d, b
3059   1864 E4            pop a
3060   1865 32            mov bl, [d]
3061   1866 A7 00         mov bh, 0
3062   1868 38 00 00      mov c, 0
3063   186B             ; --- START RELATIONAL
3064   186B D7            push a
3065   186C 11            mov a, b
3066   186D FA FD FF      lea d, [bp + -3] ; $i
3067   1870 2A            mov b, [d]
3068   1871 38 00 00      mov c, 0
3069   1874 B0            cmp a, b
3070   1875 FD 71         seq ; ==
3071   1877 E4            pop a
3072   1878             ; --- END RELATIONAL
3073   1878 FD A7         sand a, b
3074   187A E4            pop a
3075   187B             ; --- END LOGICAL AND
3076   187B E7            pop d
3077   187C FD 43         mov [d], b
3078   187E             _for39_update:
3079   187E FA FD FF      lea d, [bp + -3] ; $i
3080   1881 2A            mov b, [d]
3081   1882 38 00 00      mov c, 0
3082   1885 11            mov a, b
3083   1886 FD 77         inc b
3084   1888 FA FD FF      lea d, [bp + -3] ; $i
3085   188B FD 43         mov [d], b
3086   188D 27            mov b, a
3087   188E 0A 10 18      jmp _for39_cond
3088   1891             _for39_exit:
3089   1891             ; test8_struct.i1 = 55555; 
3090   1891 FA E7 FF      lea d, [bp + -25] ; $test8_struct
3091   1894 58 06 00      add d, 6
3092   1897 DA            push d
3093   1898 FD 2E 03 D9   mov32 cb, $0000d903
3093   189C 00 00 
3094   189E E7            pop d
3095   189F FD 43         mov [d], b
3096   18A1             ; pass = pass && test8_struct.i1 == 55555; 
3097   18A1 FA FF FF      lea d, [bp + -1] ; $pass
3098   18A4 DA            push d
3099   18A5 FA FF FF      lea d, [bp + -1] ; $pass
3100   18A8 2A            mov b, [d]
3101   18A9 38 00 00      mov c, 0
3102   18AC             ; --- START LOGICAL AND
3103   18AC D7            push a
3104   18AD 11            mov a, b
3105   18AE FA E7 FF      lea d, [bp + -25] ; $test8_struct
3106   18B1 58 06 00      add d, 6
3107   18B4 2A            mov b, [d]
3108   18B5 38 00 00      mov c, 0
3109   18B8             ; --- START RELATIONAL
3110   18B8 D7            push a
3111   18B9 11            mov a, b
3112   18BA FD 2E 03 D9   mov32 cb, $0000d903
3112   18BE 00 00 
3113   18C0 B0            cmp a, b
3114   18C1 FD 71         seq ; ==
3115   18C3 E4            pop a
3116   18C4             ; --- END RELATIONAL
3117   18C4 FD A7         sand a, b
3118   18C6 E4            pop a
3119   18C7             ; --- END LOGICAL AND
3120   18C7 E7            pop d
3121   18C8 FD 43         mov [d], b
3122   18CA             ; for(i = 0; i < 5; i++){ 
3123   18CA             _for40_init:
3124   18CA FA FD FF      lea d, [bp + -3] ; $i
3125   18CD DA            push d
3126   18CE FD 2E 00 00   mov32 cb, $00000000
3126   18D2 00 00 
3127   18D4 E7            pop d
3128   18D5 FD 43         mov [d], b
3129   18D7             _for40_cond:
3130   18D7 FA FD FF      lea d, [bp + -3] ; $i
3131   18DA 2A            mov b, [d]
3132   18DB 38 00 00      mov c, 0
3133   18DE             ; --- START RELATIONAL
3134   18DE D7            push a
3135   18DF 11            mov a, b
3136   18E0 FD 2E 05 00   mov32 cb, $00000005
3136   18E4 00 00 
3137   18E6 B0            cmp a, b
3138   18E7 FD 73         slt ; < (signed)
3139   18E9 E4            pop a
3140   18EA             ; --- END RELATIONAL
3141   18EA C0 00 00      cmp b, 0
3142   18ED C6 5C 19      je _for40_exit
3143   18F0             _for40_block:
3144   18F0             ; test8_struct.ia[i] = i; 
3145   18F0 FA E7 FF      lea d, [bp + -25] ; $test8_struct
3146   18F3 58 08 00      add d, 8
3147   18F6 D7            push a
3148   18F7 DA            push d
3149   18F8 FA FD FF      lea d, [bp + -3] ; $i
3150   18FB 2A            mov b, [d]
3151   18FC 38 00 00      mov c, 0
3152   18FF E7            pop d
3153   1900 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3154   1904 E4            pop a
3155   1905 DA            push d
3156   1906 FA FD FF      lea d, [bp + -3] ; $i
3157   1909 2A            mov b, [d]
3158   190A 38 00 00      mov c, 0
3159   190D E7            pop d
3160   190E FD 43         mov [d], b
3161   1910             ; pass = pass && test8_struct.ia[i] == i; 
3162   1910 FA FF FF      lea d, [bp + -1] ; $pass
3163   1913 DA            push d
3164   1914 FA FF FF      lea d, [bp + -1] ; $pass
3165   1917 2A            mov b, [d]
3166   1918 38 00 00      mov c, 0
3167   191B             ; --- START LOGICAL AND
3168   191B D7            push a
3169   191C 11            mov a, b
3170   191D FA E7 FF      lea d, [bp + -25] ; $test8_struct
3171   1920 58 08 00      add d, 8
3172   1923 D7            push a
3173   1924 DA            push d
3174   1925 FA FD FF      lea d, [bp + -3] ; $i
3175   1928 2A            mov b, [d]
3176   1929 38 00 00      mov c, 0
3177   192C E7            pop d
3178   192D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3179   1931 E4            pop a
3180   1932 2A            mov b, [d]
3181   1933 38 00 00      mov c, 0
3182   1936             ; --- START RELATIONAL
3183   1936 D7            push a
3184   1937 11            mov a, b
3185   1938 FA FD FF      lea d, [bp + -3] ; $i
3186   193B 2A            mov b, [d]
3187   193C 38 00 00      mov c, 0
3188   193F B0            cmp a, b
3189   1940 FD 71         seq ; ==
3190   1942 E4            pop a
3191   1943             ; --- END RELATIONAL
3192   1943 FD A7         sand a, b
3193   1945 E4            pop a
3194   1946             ; --- END LOGICAL AND
3195   1946 E7            pop d
3196   1947 FD 43         mov [d], b
3197   1949             _for40_update:
3198   1949 FA FD FF      lea d, [bp + -3] ; $i
3199   194C 2A            mov b, [d]
3200   194D 38 00 00      mov c, 0
3201   1950 11            mov a, b
3202   1951 FD 77         inc b
3203   1953 FA FD FF      lea d, [bp + -3] ; $i
3204   1956 FD 43         mov [d], b
3205   1958 27            mov b, a
3206   1959 0A D7 18      jmp _for40_cond
3207   195C             _for40_exit:
3208   195C             ; return pass; 
3209   195C FA FF FF      lea d, [bp + -1] ; $pass
3210   195F 2A            mov b, [d]
3211   1960 38 00 00      mov c, 0
3212   1963 F9            leave
3213   1964 09            ret
3214   1965             
3215   1965             test9:
3216   1965 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3217   1968             ; int pass = 1; 
3218   1968 52 02 00      sub sp, 2
3219   196B             ; --- START LOCAL VAR INITIALIZATION
3220   196B FA FF FF      lea d, [bp + -1] ; $pass
3221   196E DA            push d
3222   196F FD 2E 01 00   mov32 cb, $00000001
3222   1973 00 00 
3223   1975 E7            pop d
3224   1976 FD 43         mov [d], b
3225   1978             ; --- END LOCAL VAR INITIALIZATION
3226   1978             ; int i, j, k; 
3227   1978 52 02 00      sub sp, 2
3228   197B 52 02 00      sub sp, 2
3229   197E 52 02 00      sub sp, 2
3230   1981             ; struct t_test9_struct test9_struct; 
3231   1981 52 24 00      sub sp, 36
3232   1984             ; test9_struct.test9_substruct.c1 = 'A'; 
3233   1984 FA D5 FF      lea d, [bp + -43] ; $test9_struct
3234   1987 58 06 00      add d, 6
3235   198A 58 00 00      add d, 0
3236   198D DA            push d
3237   198E FD 2E 41 00   mov32 cb, $00000041
3237   1992 00 00 
3238   1994 E7            pop d
3239   1995 FD 3E         mov [d], bl
3240   1997             ; pass = pass && test9_struct.test9_substruct.c1 == 'A'; 
3241   1997 FA FF FF      lea d, [bp + -1] ; $pass
3242   199A DA            push d
3243   199B FA FF FF      lea d, [bp + -1] ; $pass
3244   199E 2A            mov b, [d]
3245   199F 38 00 00      mov c, 0
3246   19A2             ; --- START LOGICAL AND
3247   19A2 D7            push a
3248   19A3 11            mov a, b
3249   19A4 FA D5 FF      lea d, [bp + -43] ; $test9_struct
3250   19A7 58 06 00      add d, 6
3251   19AA 58 00 00      add d, 0
3252   19AD 32            mov bl, [d]
3253   19AE A7 00         mov bh, 0
3254   19B0 38 00 00      mov c, 0
3255   19B3             ; --- START RELATIONAL
3256   19B3 D7            push a
3257   19B4 11            mov a, b
3258   19B5 FD 2E 41 00   mov32 cb, $00000041
3258   19B9 00 00 
3259   19BB B0            cmp a, b
3260   19BC FD 71         seq ; ==
3261   19BE E4            pop a
3262   19BF             ; --- END RELATIONAL
3263   19BF FD A7         sand a, b
3264   19C1 E4            pop a
3265   19C2             ; --- END LOGICAL AND
3266   19C2 E7            pop d
3267   19C3 FD 43         mov [d], b
3268   19C5             ; for(i = 0; i < 5; i++){ 
3269   19C5             _for41_init:
3270   19C5 FA FD FF      lea d, [bp + -3] ; $i
3271   19C8 DA            push d
3272   19C9 FD 2E 00 00   mov32 cb, $00000000
3272   19CD 00 00 
3273   19CF E7            pop d
3274   19D0 FD 43         mov [d], b
3275   19D2             _for41_cond:
3276   19D2 FA FD FF      lea d, [bp + -3] ; $i
3277   19D5 2A            mov b, [d]
3278   19D6 38 00 00      mov c, 0
3279   19D9             ; --- START RELATIONAL
3280   19D9 D7            push a
3281   19DA 11            mov a, b
3282   19DB FD 2E 05 00   mov32 cb, $00000005
3282   19DF 00 00 
3283   19E1 B0            cmp a, b
3284   19E2 FD 73         slt ; < (signed)
3285   19E4 E4            pop a
3286   19E5             ; --- END RELATIONAL
3287   19E5 C0 00 00      cmp b, 0
3288   19E8 C6 59 1A      je _for41_exit
3289   19EB             _for41_block:
3290   19EB             ; test9_struct.test9_substruct.ca[i] = i; 
3291   19EB FA D5 FF      lea d, [bp + -43] ; $test9_struct
3292   19EE 58 06 00      add d, 6
3293   19F1 58 01 00      add d, 1
3294   19F4 D7            push a
3295   19F5 DA            push d
3296   19F6 FA FD FF      lea d, [bp + -3] ; $i
3297   19F9 2A            mov b, [d]
3298   19FA 38 00 00      mov c, 0
3299   19FD E7            pop d
3300   19FE 5A            add d, b
3301   19FF E4            pop a
3302   1A00 DA            push d
3303   1A01 FA FD FF      lea d, [bp + -3] ; $i
3304   1A04 2A            mov b, [d]
3305   1A05 38 00 00      mov c, 0
3306   1A08 E7            pop d
3307   1A09 FD 3E         mov [d], bl
3308   1A0B             ; pass = pass && test9_struct.test9_substruct.ca[i] == i; 
3309   1A0B FA FF FF      lea d, [bp + -1] ; $pass
3310   1A0E DA            push d
3311   1A0F FA FF FF      lea d, [bp + -1] ; $pass
3312   1A12 2A            mov b, [d]
3313   1A13 38 00 00      mov c, 0
3314   1A16             ; --- START LOGICAL AND
3315   1A16 D7            push a
3316   1A17 11            mov a, b
3317   1A18 FA D5 FF      lea d, [bp + -43] ; $test9_struct
3318   1A1B 58 06 00      add d, 6
3319   1A1E 58 01 00      add d, 1
3320   1A21 D7            push a
3321   1A22 DA            push d
3322   1A23 FA FD FF      lea d, [bp + -3] ; $i
3323   1A26 2A            mov b, [d]
3324   1A27 38 00 00      mov c, 0
3325   1A2A E7            pop d
3326   1A2B 5A            add d, b
3327   1A2C E4            pop a
3328   1A2D 32            mov bl, [d]
3329   1A2E A7 00         mov bh, 0
3330   1A30 38 00 00      mov c, 0
3331   1A33             ; --- START RELATIONAL
3332   1A33 D7            push a
3333   1A34 11            mov a, b
3334   1A35 FA FD FF      lea d, [bp + -3] ; $i
3335   1A38 2A            mov b, [d]
3336   1A39 38 00 00      mov c, 0
3337   1A3C B0            cmp a, b
3338   1A3D FD 71         seq ; ==
3339   1A3F E4            pop a
3340   1A40             ; --- END RELATIONAL
3341   1A40 FD A7         sand a, b
3342   1A42 E4            pop a
3343   1A43             ; --- END LOGICAL AND
3344   1A43 E7            pop d
3345   1A44 FD 43         mov [d], b
3346   1A46             _for41_update:
3347   1A46 FA FD FF      lea d, [bp + -3] ; $i
3348   1A49 2A            mov b, [d]
3349   1A4A 38 00 00      mov c, 0
3350   1A4D 11            mov a, b
3351   1A4E FD 77         inc b
3352   1A50 FA FD FF      lea d, [bp + -3] ; $i
3353   1A53 FD 43         mov [d], b
3354   1A55 27            mov b, a
3355   1A56 0A D2 19      jmp _for41_cond
3356   1A59             _for41_exit:
3357   1A59             ; test9_struct.test9_substruct.i1 = 55555; 
3358   1A59 FA D5 FF      lea d, [bp + -43] ; $test9_struct
3359   1A5C 58 06 00      add d, 6
3360   1A5F 58 06 00      add d, 6
3361   1A62 DA            push d
3362   1A63 FD 2E 03 D9   mov32 cb, $0000d903
3362   1A67 00 00 
3363   1A69 E7            pop d
3364   1A6A FD 43         mov [d], b
3365   1A6C             ; pass = pass && test9_struct.test9_substruct.i1 == 55555; 
3366   1A6C FA FF FF      lea d, [bp + -1] ; $pass
3367   1A6F DA            push d
3368   1A70 FA FF FF      lea d, [bp + -1] ; $pass
3369   1A73 2A            mov b, [d]
3370   1A74 38 00 00      mov c, 0
3371   1A77             ; --- START LOGICAL AND
3372   1A77 D7            push a
3373   1A78 11            mov a, b
3374   1A79 FA D5 FF      lea d, [bp + -43] ; $test9_struct
3375   1A7C 58 06 00      add d, 6
3376   1A7F 58 06 00      add d, 6
3377   1A82 2A            mov b, [d]
3378   1A83 38 00 00      mov c, 0
3379   1A86             ; --- START RELATIONAL
3380   1A86 D7            push a
3381   1A87 11            mov a, b
3382   1A88 FD 2E 03 D9   mov32 cb, $0000d903
3382   1A8C 00 00 
3383   1A8E B0            cmp a, b
3384   1A8F FD 71         seq ; ==
3385   1A91 E4            pop a
3386   1A92             ; --- END RELATIONAL
3387   1A92 FD A7         sand a, b
3388   1A94 E4            pop a
3389   1A95             ; --- END LOGICAL AND
3390   1A95 E7            pop d
3391   1A96 FD 43         mov [d], b
3392   1A98             ; for(i = 0; i < 5; i++){ 
3393   1A98             _for42_init:
3394   1A98 FA FD FF      lea d, [bp + -3] ; $i
3395   1A9B DA            push d
3396   1A9C FD 2E 00 00   mov32 cb, $00000000
3396   1AA0 00 00 
3397   1AA2 E7            pop d
3398   1AA3 FD 43         mov [d], b
3399   1AA5             _for42_cond:
3400   1AA5 FA FD FF      lea d, [bp + -3] ; $i
3401   1AA8 2A            mov b, [d]
3402   1AA9 38 00 00      mov c, 0
3403   1AAC             ; --- START RELATIONAL
3404   1AAC D7            push a
3405   1AAD 11            mov a, b
3406   1AAE FD 2E 05 00   mov32 cb, $00000005
3406   1AB2 00 00 
3407   1AB4 B0            cmp a, b
3408   1AB5 FD 73         slt ; < (signed)
3409   1AB7 E4            pop a
3410   1AB8             ; --- END RELATIONAL
3411   1AB8 C0 00 00      cmp b, 0
3412   1ABB C6 30 1B      je _for42_exit
3413   1ABE             _for42_block:
3414   1ABE             ; test9_struct.test9_substruct.ia[i] = i; 
3415   1ABE FA D5 FF      lea d, [bp + -43] ; $test9_struct
3416   1AC1 58 06 00      add d, 6
3417   1AC4 58 08 00      add d, 8
3418   1AC7 D7            push a
3419   1AC8 DA            push d
3420   1AC9 FA FD FF      lea d, [bp + -3] ; $i
3421   1ACC 2A            mov b, [d]
3422   1ACD 38 00 00      mov c, 0
3423   1AD0 E7            pop d
3424   1AD1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3425   1AD5 E4            pop a
3426   1AD6 DA            push d
3427   1AD7 FA FD FF      lea d, [bp + -3] ; $i
3428   1ADA 2A            mov b, [d]
3429   1ADB 38 00 00      mov c, 0
3430   1ADE E7            pop d
3431   1ADF FD 43         mov [d], b
3432   1AE1             ; pass = pass && test9_struct.test9_substruct.ia[i] == i; 
3433   1AE1 FA FF FF      lea d, [bp + -1] ; $pass
3434   1AE4 DA            push d
3435   1AE5 FA FF FF      lea d, [bp + -1] ; $pass
3436   1AE8 2A            mov b, [d]
3437   1AE9 38 00 00      mov c, 0
3438   1AEC             ; --- START LOGICAL AND
3439   1AEC D7            push a
3440   1AED 11            mov a, b
3441   1AEE FA D5 FF      lea d, [bp + -43] ; $test9_struct
3442   1AF1 58 06 00      add d, 6
3443   1AF4 58 08 00      add d, 8
3444   1AF7 D7            push a
3445   1AF8 DA            push d
3446   1AF9 FA FD FF      lea d, [bp + -3] ; $i
3447   1AFC 2A            mov b, [d]
3448   1AFD 38 00 00      mov c, 0
3449   1B00 E7            pop d
3450   1B01 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3451   1B05 E4            pop a
3452   1B06 2A            mov b, [d]
3453   1B07 38 00 00      mov c, 0
3454   1B0A             ; --- START RELATIONAL
3455   1B0A D7            push a
3456   1B0B 11            mov a, b
3457   1B0C FA FD FF      lea d, [bp + -3] ; $i
3458   1B0F 2A            mov b, [d]
3459   1B10 38 00 00      mov c, 0
3460   1B13 B0            cmp a, b
3461   1B14 FD 71         seq ; ==
3462   1B16 E4            pop a
3463   1B17             ; --- END RELATIONAL
3464   1B17 FD A7         sand a, b
3465   1B19 E4            pop a
3466   1B1A             ; --- END LOGICAL AND
3467   1B1A E7            pop d
3468   1B1B FD 43         mov [d], b
3469   1B1D             _for42_update:
3470   1B1D FA FD FF      lea d, [bp + -3] ; $i
3471   1B20 2A            mov b, [d]
3472   1B21 38 00 00      mov c, 0
3473   1B24 11            mov a, b
3474   1B25 FD 77         inc b
3475   1B27 FA FD FF      lea d, [bp + -3] ; $i
3476   1B2A FD 43         mov [d], b
3477   1B2C 27            mov b, a
3478   1B2D 0A A5 1A      jmp _for42_cond
3479   1B30             _for42_exit:
3480   1B30             ; return pass; 
3481   1B30 FA FF FF      lea d, [bp + -1] ; $pass
3482   1B33 2A            mov b, [d]
3483   1B34 38 00 00      mov c, 0
3484   1B37 F9            leave
3485   1B38 09            ret
3486   1B39             
3487   1B39             printf:
3488   1B39 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3489   1B3C             ; char *p, *format_p; 
3490   1B3C 52 02 00      sub sp, 2
3491   1B3F 52 02 00      sub sp, 2
3492   1B42             ; format_p = format; 
3493   1B42 FA FD FF      lea d, [bp + -3] ; $format_p
3494   1B45 DA            push d
3495   1B46 FA 05 00      lea d, [bp + 5] ; $format
3496   1B49 2A            mov b, [d]
3497   1B4A 38 00 00      mov c, 0
3498   1B4D E7            pop d
3499   1B4E FD 43         mov [d], b
3500   1B50             ; p = &format + 2; 
3501   1B50 FA FF FF      lea d, [bp + -1] ; $p
3502   1B53 DA            push d
3503   1B54 FA 05 00      lea d, [bp + 5] ; $format
3504   1B57 2D            mov b, d
3505   1B58             ; --- START TERMS
3506   1B58 D7            push a
3507   1B59 11            mov a, b
3508   1B5A FD 2E 02 00   mov32 cb, $00000002
3508   1B5E 00 00 
3509   1B60 56            add b, a
3510   1B61 E4            pop a
3511   1B62             ; --- END TERMS
3512   1B62 E7            pop d
3513   1B63 FD 43         mov [d], b
3514   1B65             ; for(;;){ 
3515   1B65             _for43_init:
3516   1B65             _for43_cond:
3517   1B65             _for43_block:
3518   1B65             ; if(!*format_p) break; 
3519   1B65             _if44_cond:
3520   1B65 FA FD FF      lea d, [bp + -3] ; $format_p
3521   1B68 2A            mov b, [d]
3522   1B69 38 00 00      mov c, 0
3523   1B6C 74            mov d, b
3524   1B6D 32            mov bl, [d]
3525   1B6E A7 00         mov bh, 0
3526   1B70 38 00 00      mov c, 0
3527   1B73 C0 00 00      cmp b, 0
3528   1B76 FD 71         seq ; !
3529   1B78 C0 00 00      cmp b, 0
3530   1B7B C6 84 1B      je _if44_else
3531   1B7E             _if44_TRUE:
3532   1B7E             ; break; 
3533   1B7E 0A 24 1E      jmp _for43_exit ; for break
3534   1B81 0A 11 1E      jmp _if44_exit
3535   1B84             _if44_else:
3536   1B84             ; if(*format_p == '%'){ 
3537   1B84             _if45_cond:
3538   1B84 FA FD FF      lea d, [bp + -3] ; $format_p
3539   1B87 2A            mov b, [d]
3540   1B88 38 00 00      mov c, 0
3541   1B8B 74            mov d, b
3542   1B8C 32            mov bl, [d]
3543   1B8D A7 00         mov bh, 0
3544   1B8F 38 00 00      mov c, 0
3545   1B92             ; --- START RELATIONAL
3546   1B92 D7            push a
3547   1B93 11            mov a, b
3548   1B94 FD 2E 25 00   mov32 cb, $00000025
3548   1B98 00 00 
3549   1B9A B0            cmp a, b
3550   1B9B FD 71         seq ; ==
3551   1B9D E4            pop a
3552   1B9E             ; --- END RELATIONAL
3553   1B9E C0 00 00      cmp b, 0
3554   1BA1 C6 FC 1D      je _if45_else
3555   1BA4             _if45_TRUE:
3556   1BA4             ; format_p++; 
3557   1BA4 FA FD FF      lea d, [bp + -3] ; $format_p
3558   1BA7 2A            mov b, [d]
3559   1BA8 38 00 00      mov c, 0
3560   1BAB FD 77         inc b
3561   1BAD FA FD FF      lea d, [bp + -3] ; $format_p
3562   1BB0 FD 43         mov [d], b
3563   1BB2 FD 7D         dec b
3564   1BB4             ; switch(*format_p){ 
3565   1BB4             _switch46_expr:
3566   1BB4 FA FD FF      lea d, [bp + -3] ; $format_p
3567   1BB7 2A            mov b, [d]
3568   1BB8 38 00 00      mov c, 0
3569   1BBB 74            mov d, b
3570   1BBC 32            mov bl, [d]
3571   1BBD A7 00         mov bh, 0
3572   1BBF 38 00 00      mov c, 0
3573   1BC2             _switch46_comparisons:
3574   1BC2 C1 6C         cmp bl, $6c
3575   1BC4 C6 F0 1B      je _switch46_case0
3576   1BC7 C1 4C         cmp bl, $4c
3577   1BC9 C6 F0 1B      je _switch46_case1
3578   1BCC C1 64         cmp bl, $64
3579   1BCE C6 00 1D      je _switch46_case2
3580   1BD1 C1 69         cmp bl, $69
3581   1BD3 C6 00 1D      je _switch46_case3
3582   1BD6 C1 75         cmp bl, $75
3583   1BD8 C6 30 1D      je _switch46_case4
3584   1BDB C1 78         cmp bl, $78
3585   1BDD C6 60 1D      je _switch46_case5
3586   1BE0 C1 63         cmp bl, $63
3587   1BE2 C6 90 1D      je _switch46_case6
3588   1BE5 C1 73         cmp bl, $73
3589   1BE7 C6 C0 1D      je _switch46_case7
3590   1BEA 0A ED 1D      jmp _switch46_default
3591   1BED 0A F9 1D      jmp _switch46_exit
3592   1BF0             _switch46_case0:
3593   1BF0             _switch46_case1:
3594   1BF0             ; format_p++; 
3595   1BF0 FA FD FF      lea d, [bp + -3] ; $format_p
3596   1BF3 2A            mov b, [d]
3597   1BF4 38 00 00      mov c, 0
3598   1BF7 FD 77         inc b
3599   1BF9 FA FD FF      lea d, [bp + -3] ; $format_p
3600   1BFC FD 43         mov [d], b
3601   1BFE FD 7D         dec b
3602   1C00             ; if(*format_p == 'd' || *format_p == 'i') 
3603   1C00             _if47_cond:
3604   1C00 FA FD FF      lea d, [bp + -3] ; $format_p
3605   1C03 2A            mov b, [d]
3606   1C04 38 00 00      mov c, 0
3607   1C07 74            mov d, b
3608   1C08 32            mov bl, [d]
3609   1C09 A7 00         mov bh, 0
3610   1C0B 38 00 00      mov c, 0
3611   1C0E             ; --- START RELATIONAL
3612   1C0E D7            push a
3613   1C0F 11            mov a, b
3614   1C10 FD 2E 64 00   mov32 cb, $00000064
3614   1C14 00 00 
3615   1C16 B0            cmp a, b
3616   1C17 FD 71         seq ; ==
3617   1C19 E4            pop a
3618   1C1A             ; --- END RELATIONAL
3619   1C1A             ; --- START LOGICAL OR
3620   1C1A D7            push a
3621   1C1B 11            mov a, b
3622   1C1C FA FD FF      lea d, [bp + -3] ; $format_p
3623   1C1F 2A            mov b, [d]
3624   1C20 38 00 00      mov c, 0
3625   1C23 74            mov d, b
3626   1C24 32            mov bl, [d]
3627   1C25 A7 00         mov bh, 0
3628   1C27 38 00 00      mov c, 0
3629   1C2A             ; --- START RELATIONAL
3630   1C2A D7            push a
3631   1C2B 11            mov a, b
3632   1C2C FD 2E 69 00   mov32 cb, $00000069
3632   1C30 00 00 
3633   1C32 B0            cmp a, b
3634   1C33 FD 71         seq ; ==
3635   1C35 E4            pop a
3636   1C36             ; --- END RELATIONAL
3637   1C36 FD A8         sor a, b ; ||
3638   1C38 E4            pop a
3639   1C39             ; --- END LOGICAL OR
3640   1C39 C0 00 00      cmp b, 0
3641   1C3C C6 5D 1C      je _if47_else
3642   1C3F             _if47_TRUE:
3643   1C3F             ; print_signed_long(*(long *)p); 
3644   1C3F             ; --- START FUNCTION CALL
3645   1C3F FA FF FF      lea d, [bp + -1] ; $p
3646   1C42 2A            mov b, [d]
3647   1C43 38 00 00      mov c, 0
3648   1C46 74            mov d, b
3649   1C47 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3650   1C4A FD 39         mov c, b ; And place it into C
3651   1C4C 2A            mov b, [d] ; Lower Word in B
3652   1C4D 12            mov a, c
3653   1C4E FD AA         swp a
3654   1C50 D7            push a
3655   1C51 FD AB         swp b
3656   1C53 D8            push b
3657   1C54 07 26 1E      call print_signed_long
3658   1C57 51 04 00      add sp, 4
3659   1C5A             ; --- END FUNCTION CALL
3660   1C5A 0A E5 1C      jmp _if47_exit
3661   1C5D             _if47_else:
3662   1C5D             ; if(*format_p == 'u') 
3663   1C5D             _if48_cond:
3664   1C5D FA FD FF      lea d, [bp + -3] ; $format_p
3665   1C60 2A            mov b, [d]
3666   1C61 38 00 00      mov c, 0
3667   1C64 74            mov d, b
3668   1C65 32            mov bl, [d]
3669   1C66 A7 00         mov bh, 0
3670   1C68 38 00 00      mov c, 0
3671   1C6B             ; --- START RELATIONAL
3672   1C6B D7            push a
3673   1C6C 11            mov a, b
3674   1C6D FD 2E 75 00   mov32 cb, $00000075
3674   1C71 00 00 
3675   1C73 B0            cmp a, b
3676   1C74 FD 71         seq ; ==
3677   1C76 E4            pop a
3678   1C77             ; --- END RELATIONAL
3679   1C77 C0 00 00      cmp b, 0
3680   1C7A C6 9B 1C      je _if48_else
3681   1C7D             _if48_TRUE:
3682   1C7D             ; print_unsigned_long(*(unsigned long *)p); 
3683   1C7D             ; --- START FUNCTION CALL
3684   1C7D FA FF FF      lea d, [bp + -1] ; $p
3685   1C80 2A            mov b, [d]
3686   1C81 38 00 00      mov c, 0
3687   1C84 74            mov d, b
3688   1C85 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3689   1C88 FD 39         mov c, b ; And place it into C
3690   1C8A 2A            mov b, [d] ; Lower Word in B
3691   1C8B 12            mov a, c
3692   1C8C FD AA         swp a
3693   1C8E D7            push a
3694   1C8F FD AB         swp b
3695   1C91 D8            push b
3696   1C92 07 C6 1F      call print_unsigned_long
3697   1C95 51 04 00      add sp, 4
3698   1C98             ; --- END FUNCTION CALL
3699   1C98 0A E5 1C      jmp _if48_exit
3700   1C9B             _if48_else:
3701   1C9B             ; if(*format_p == 'x') 
3702   1C9B             _if49_cond:
3703   1C9B FA FD FF      lea d, [bp + -3] ; $format_p
3704   1C9E 2A            mov b, [d]
3705   1C9F 38 00 00      mov c, 0
3706   1CA2 74            mov d, b
3707   1CA3 32            mov bl, [d]
3708   1CA4 A7 00         mov bh, 0
3709   1CA6 38 00 00      mov c, 0
3710   1CA9             ; --- START RELATIONAL
3711   1CA9 D7            push a
3712   1CAA 11            mov a, b
3713   1CAB FD 2E 78 00   mov32 cb, $00000078
3713   1CAF 00 00 
3714   1CB1 B0            cmp a, b
3715   1CB2 FD 71         seq ; ==
3716   1CB4 E4            pop a
3717   1CB5             ; --- END RELATIONAL
3718   1CB5 C0 00 00      cmp b, 0
3719   1CB8 C6 D9 1C      je _if49_else
3720   1CBB             _if49_TRUE:
3721   1CBB             ; printx32(*(long int *)p); 
3722   1CBB             ; --- START FUNCTION CALL
3723   1CBB FA FF FF      lea d, [bp + -1] ; $p
3724   1CBE 2A            mov b, [d]
3725   1CBF 38 00 00      mov c, 0
3726   1CC2 74            mov d, b
3727   1CC3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3728   1CC6 FD 39         mov c, b ; And place it into C
3729   1CC8 2A            mov b, [d] ; Lower Word in B
3730   1CC9 12            mov a, c
3731   1CCA FD AA         swp a
3732   1CCC D7            push a
3733   1CCD FD AB         swp b
3734   1CCF D8            push b
3735   1CD0 07 04 21      call printx32
3736   1CD3 51 04 00      add sp, 4
3737   1CD6             ; --- END FUNCTION CALL
3738   1CD6 0A E5 1C      jmp _if49_exit
3739   1CD9             _if49_else:
3740   1CD9             ; err("Unexpected format in printf."); 
3741   1CD9             ; --- START FUNCTION CALL
3742   1CD9 26 F2 24      mov b, _s1 ; "Unexpected format in printf."
3743   1CDC FD AB         swp b
3744   1CDE D8            push b
3745   1CDF 07 64 21      call err
3746   1CE2 51 02 00      add sp, 2
3747   1CE5             ; --- END FUNCTION CALL
3748   1CE5             _if49_exit:
3749   1CE5             _if48_exit:
3750   1CE5             _if47_exit:
3751   1CE5             ; p = p + 4; 
3752   1CE5 FA FF FF      lea d, [bp + -1] ; $p
3753   1CE8 DA            push d
3754   1CE9 FA FF FF      lea d, [bp + -1] ; $p
3755   1CEC 2A            mov b, [d]
3756   1CED 38 00 00      mov c, 0
3757   1CF0             ; --- START TERMS
3758   1CF0 D7            push a
3759   1CF1 11            mov a, b
3760   1CF2 FD 2E 04 00   mov32 cb, $00000004
3760   1CF6 00 00 
3761   1CF8 56            add b, a
3762   1CF9 E4            pop a
3763   1CFA             ; --- END TERMS
3764   1CFA E7            pop d
3765   1CFB FD 43         mov [d], b
3766   1CFD             ; break; 
3767   1CFD 0A F9 1D      jmp _switch46_exit ; case break
3768   1D00             _switch46_case2:
3769   1D00             _switch46_case3:
3770   1D00             ; print_signed(*(int*)p); 
3771   1D00             ; --- START FUNCTION CALL
3772   1D00 FA FF FF      lea d, [bp + -1] ; $p
3773   1D03 2A            mov b, [d]
3774   1D04 38 00 00      mov c, 0
3775   1D07 74            mov d, b
3776   1D08 2A            mov b, [d]
3777   1D09 38 00 00      mov c, 0
3778   1D0C FD AB         swp b
3779   1D0E D8            push b
3780   1D0F 07 92 21      call print_signed
3781   1D12 51 02 00      add sp, 2
3782   1D15             ; --- END FUNCTION CALL
3783   1D15             ; p = p + 2; 
3784   1D15 FA FF FF      lea d, [bp + -1] ; $p
3785   1D18 DA            push d
3786   1D19 FA FF FF      lea d, [bp + -1] ; $p
3787   1D1C 2A            mov b, [d]
3788   1D1D 38 00 00      mov c, 0
3789   1D20             ; --- START TERMS
3790   1D20 D7            push a
3791   1D21 11            mov a, b
3792   1D22 FD 2E 02 00   mov32 cb, $00000002
3792   1D26 00 00 
3793   1D28 56            add b, a
3794   1D29 E4            pop a
3795   1D2A             ; --- END TERMS
3796   1D2A E7            pop d
3797   1D2B FD 43         mov [d], b
3798   1D2D             ; break; 
3799   1D2D 0A F9 1D      jmp _switch46_exit ; case break
3800   1D30             _switch46_case4:
3801   1D30             ; print_unsigned(*(unsigned int*)p); 
3802   1D30             ; --- START FUNCTION CALL
3803   1D30 FA FF FF      lea d, [bp + -1] ; $p
3804   1D33 2A            mov b, [d]
3805   1D34 38 00 00      mov c, 0
3806   1D37 74            mov d, b
3807   1D38 2A            mov b, [d]
3808   1D39 38 00 00      mov c, 0
3809   1D3C FD AB         swp b
3810   1D3E D8            push b
3811   1D3F 07 E3 22      call print_unsigned
3812   1D42 51 02 00      add sp, 2
3813   1D45             ; --- END FUNCTION CALL
3814   1D45             ; p = p + 2; 
3815   1D45 FA FF FF      lea d, [bp + -1] ; $p
3816   1D48 DA            push d
3817   1D49 FA FF FF      lea d, [bp + -1] ; $p
3818   1D4C 2A            mov b, [d]
3819   1D4D 38 00 00      mov c, 0
3820   1D50             ; --- START TERMS
3821   1D50 D7            push a
3822   1D51 11            mov a, b
3823   1D52 FD 2E 02 00   mov32 cb, $00000002
3823   1D56 00 00 
3824   1D58 56            add b, a
3825   1D59 E4            pop a
3826   1D5A             ; --- END TERMS
3827   1D5A E7            pop d
3828   1D5B FD 43         mov [d], b
3829   1D5D             ; break; 
3830   1D5D 0A F9 1D      jmp _switch46_exit ; case break
3831   1D60             _switch46_case5:
3832   1D60             ; printx16(*(int*)p); 
3833   1D60             ; --- START FUNCTION CALL
3834   1D60 FA FF FF      lea d, [bp + -1] ; $p
3835   1D63 2A            mov b, [d]
3836   1D64 38 00 00      mov c, 0
3837   1D67 74            mov d, b
3838   1D68 2A            mov b, [d]
3839   1D69 38 00 00      mov c, 0
3840   1D6C FD AB         swp b
3841   1D6E D8            push b
3842   1D6F 07 FB 23      call printx16
3843   1D72 51 02 00      add sp, 2
3844   1D75             ; --- END FUNCTION CALL
3845   1D75             ; p = p + 2; 
3846   1D75 FA FF FF      lea d, [bp + -1] ; $p
3847   1D78 DA            push d
3848   1D79 FA FF FF      lea d, [bp + -1] ; $p
3849   1D7C 2A            mov b, [d]
3850   1D7D 38 00 00      mov c, 0
3851   1D80             ; --- START TERMS
3852   1D80 D7            push a
3853   1D81 11            mov a, b
3854   1D82 FD 2E 02 00   mov32 cb, $00000002
3854   1D86 00 00 
3855   1D88 56            add b, a
3856   1D89 E4            pop a
3857   1D8A             ; --- END TERMS
3858   1D8A E7            pop d
3859   1D8B FD 43         mov [d], b
3860   1D8D             ; break; 
3861   1D8D 0A F9 1D      jmp _switch46_exit ; case break
3862   1D90             _switch46_case6:
3863   1D90             ; putchar(*(char*)p); 
3864   1D90             ; --- START FUNCTION CALL
3865   1D90 FA FF FF      lea d, [bp + -1] ; $p
3866   1D93 2A            mov b, [d]
3867   1D94 38 00 00      mov c, 0
3868   1D97 74            mov d, b
3869   1D98 32            mov bl, [d]
3870   1D99 A7 00         mov bh, 0
3871   1D9B 38 00 00      mov c, 0
3872   1D9E DD            push bl
3873   1D9F 07 B8 1F      call putchar
3874   1DA2 51 01 00      add sp, 1
3875   1DA5             ; --- END FUNCTION CALL
3876   1DA5             ; p = p + 2; 
3877   1DA5 FA FF FF      lea d, [bp + -1] ; $p
3878   1DA8 DA            push d
3879   1DA9 FA FF FF      lea d, [bp + -1] ; $p
3880   1DAC 2A            mov b, [d]
3881   1DAD 38 00 00      mov c, 0
3882   1DB0             ; --- START TERMS
3883   1DB0 D7            push a
3884   1DB1 11            mov a, b
3885   1DB2 FD 2E 02 00   mov32 cb, $00000002
3885   1DB6 00 00 
3886   1DB8 56            add b, a
3887   1DB9 E4            pop a
3888   1DBA             ; --- END TERMS
3889   1DBA E7            pop d
3890   1DBB FD 43         mov [d], b
3891   1DBD             ; break; 
3892   1DBD 0A F9 1D      jmp _switch46_exit ; case break
3893   1DC0             _switch46_case7:
3894   1DC0             ; print(*(char**)p); 
3895   1DC0             ; --- START FUNCTION CALL
3896   1DC0 FA FF FF      lea d, [bp + -1] ; $p
3897   1DC3 2A            mov b, [d]
3898   1DC4 38 00 00      mov c, 0
3899   1DC7 74            mov d, b
3900   1DC8 2A            mov b, [d]
3901   1DC9 FD AB         swp b
3902   1DCB D8            push b
3903   1DCC 07 79 21      call print
3904   1DCF 51 02 00      add sp, 2
3905   1DD2             ; --- END FUNCTION CALL
3906   1DD2             ; p = p + 2; 
3907   1DD2 FA FF FF      lea d, [bp + -1] ; $p
3908   1DD5 DA            push d
3909   1DD6 FA FF FF      lea d, [bp + -1] ; $p
3910   1DD9 2A            mov b, [d]
3911   1DDA 38 00 00      mov c, 0
3912   1DDD             ; --- START TERMS
3913   1DDD D7            push a
3914   1DDE 11            mov a, b
3915   1DDF FD 2E 02 00   mov32 cb, $00000002
3915   1DE3 00 00 
3916   1DE5 56            add b, a
3917   1DE6 E4            pop a
3918   1DE7             ; --- END TERMS
3919   1DE7 E7            pop d
3920   1DE8 FD 43         mov [d], b
3921   1DEA             ; break; 
3922   1DEA 0A F9 1D      jmp _switch46_exit ; case break
3923   1DED             _switch46_default:
3924   1DED             ; print("Error: Unknown argument type.\n"); 
3925   1DED             ; --- START FUNCTION CALL
3926   1DED 26 0F 25      mov b, _s2 ; "Error: Unknown argument type.\n"
3927   1DF0 FD AB         swp b
3928   1DF2 D8            push b
3929   1DF3 07 79 21      call print
3930   1DF6 51 02 00      add sp, 2
3931   1DF9             ; --- END FUNCTION CALL
3932   1DF9             _switch46_exit:
3933   1DF9 0A 11 1E      jmp _if45_exit
3934   1DFC             _if45_else:
3935   1DFC             ; putchar(*format_p); 
3936   1DFC             ; --- START FUNCTION CALL
3937   1DFC FA FD FF      lea d, [bp + -3] ; $format_p
3938   1DFF 2A            mov b, [d]
3939   1E00 38 00 00      mov c, 0
3940   1E03 74            mov d, b
3941   1E04 32            mov bl, [d]
3942   1E05 A7 00         mov bh, 0
3943   1E07 38 00 00      mov c, 0
3944   1E0A DD            push bl
3945   1E0B 07 B8 1F      call putchar
3946   1E0E 51 01 00      add sp, 1
3947   1E11             ; --- END FUNCTION CALL
3948   1E11             _if45_exit:
3949   1E11             _if44_exit:
3950   1E11             ; format_p++; 
3951   1E11 FA FD FF      lea d, [bp + -3] ; $format_p
3952   1E14 2A            mov b, [d]
3953   1E15 38 00 00      mov c, 0
3954   1E18 FD 77         inc b
3955   1E1A FA FD FF      lea d, [bp + -3] ; $format_p
3956   1E1D FD 43         mov [d], b
3957   1E1F FD 7D         dec b
3958   1E21             _for43_update:
3959   1E21 0A 65 1B      jmp _for43_cond
3960   1E24             _for43_exit:
3961   1E24 F9            leave
3962   1E25 09            ret
3963   1E26             
3964   1E26             print_signed_long:
3965   1E26 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3966   1E29             ; char digits[10]; 
3967   1E29 52 0A 00      sub sp, 10
3968   1E2C             ; int i = 0; 
3969   1E2C 52 02 00      sub sp, 2
3970   1E2F             ; --- START LOCAL VAR INITIALIZATION
3971   1E2F FA F5 FF      lea d, [bp + -11] ; $i
3972   1E32 DA            push d
3973   1E33 FD 2E 00 00   mov32 cb, $00000000
3973   1E37 00 00 
3974   1E39 E7            pop d
3975   1E3A FD 43         mov [d], b
3976   1E3C             ; --- END LOCAL VAR INITIALIZATION
3977   1E3C             ; if (num < 0) { 
3978   1E3C             _if50_cond:
3979   1E3C FA 05 00      lea d, [bp + 5] ; $num
3980   1E3F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3981   1E42 FD 39         mov c, b ; And place it into C
3982   1E44 2A            mov b, [d] ; Lower Word in B
3983   1E45             ; --- START RELATIONAL
3984   1E45 D7            push a
3985   1E46 FD D8         push g
3986   1E48 11            mov a, b
3987   1E49 FD 7A         mov g, c
3988   1E4B FD 2E 00 00   mov32 cb, $00000000
3988   1E4F 00 00 
3989   1E51 38 00 00      mov c, 0
3990   1E54 FD AF         cmp32 ga, cb
3991   1E56 FD 73         slt ; <
3992   1E58 FD F1         pop g
3993   1E5A E4            pop a
3994   1E5B             ; --- END RELATIONAL
3995   1E5B C0 00 00      cmp b, 0
3996   1E5E C6 90 1E      je _if50_else
3997   1E61             _if50_TRUE:
3998   1E61             ; putchar('-'); 
3999   1E61             ; --- START FUNCTION CALL
4000   1E61 FD 2E 2D 00   mov32 cb, $0000002d
4000   1E65 00 00 
4001   1E67 DD            push bl
4002   1E68 07 B8 1F      call putchar
4003   1E6B 51 01 00      add sp, 1
4004   1E6E             ; --- END FUNCTION CALL
4005   1E6E             ; num = -num; 
4006   1E6E FA 05 00      lea d, [bp + 5] ; $num
4007   1E71 DA            push d
4008   1E72 FA 05 00      lea d, [bp + 5] ; $num
4009   1E75 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4010   1E78 FD 39         mov c, b ; And place it into C
4011   1E7A 2A            mov b, [d] ; Lower Word in B
4012   1E7B 12            mov a, c
4013   1E7C 95            not a
4014   1E7D 97            not b
4015   1E7E 55 01 00      add b, 1
4016   1E81 5B 00 00      adc a, 0
4017   1E84 39            mov c, a
4018   1E85 E7            pop d
4019   1E86 FD 43         mov [d], b
4020   1E88 28            mov b, c
4021   1E89 FD 44 02 00   mov [d + 2], b
4022   1E8D 0A C7 1E      jmp _if50_exit
4023   1E90             _if50_else:
4024   1E90             ; if (num == 0) { 
4025   1E90             _if51_cond:
4026   1E90 FA 05 00      lea d, [bp + 5] ; $num
4027   1E93 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4028   1E96 FD 39         mov c, b ; And place it into C
4029   1E98 2A            mov b, [d] ; Lower Word in B
4030   1E99             ; --- START RELATIONAL
4031   1E99 D7            push a
4032   1E9A FD D8         push g
4033   1E9C 11            mov a, b
4034   1E9D FD 7A         mov g, c
4035   1E9F FD 2E 00 00   mov32 cb, $00000000
4035   1EA3 00 00 
4036   1EA5 38 00 00      mov c, 0
4037   1EA8 FD AF         cmp32 ga, cb
4038   1EAA FD 71         seq ; ==
4039   1EAC FD F1         pop g
4040   1EAE E4            pop a
4041   1EAF             ; --- END RELATIONAL
4042   1EAF C0 00 00      cmp b, 0
4043   1EB2 C6 C7 1E      je _if51_exit
4044   1EB5             _if51_TRUE:
4045   1EB5             ; putchar('0'); 
4046   1EB5             ; --- START FUNCTION CALL
4047   1EB5 FD 2E 30 00   mov32 cb, $00000030
4047   1EB9 00 00 
4048   1EBB DD            push bl
4049   1EBC 07 B8 1F      call putchar
4050   1EBF 51 01 00      add sp, 1
4051   1EC2             ; --- END FUNCTION CALL
4052   1EC2             ; return; 
4053   1EC2 F9            leave
4054   1EC3 09            ret
4055   1EC4 0A C7 1E      jmp _if51_exit
4056   1EC7             _if51_exit:
4057   1EC7             _if50_exit:
4058   1EC7             ; while (num > 0) { 
4059   1EC7             _while52_cond:
4060   1EC7 FA 05 00      lea d, [bp + 5] ; $num
4061   1ECA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4062   1ECD FD 39         mov c, b ; And place it into C
4063   1ECF 2A            mov b, [d] ; Lower Word in B
4064   1ED0             ; --- START RELATIONAL
4065   1ED0 D7            push a
4066   1ED1 FD D8         push g
4067   1ED3 11            mov a, b
4068   1ED4 FD 7A         mov g, c
4069   1ED6 FD 2E 00 00   mov32 cb, $00000000
4069   1EDA 00 00 
4070   1EDC 38 00 00      mov c, 0
4071   1EDF FD AF         cmp32 ga, cb
4072   1EE1 FD 7F         sgt
4073   1EE3 FD F1         pop g
4074   1EE5 E4            pop a
4075   1EE6             ; --- END RELATIONAL
4076   1EE6 C0 00 00      cmp b, 0
4077   1EE9 C6 6E 1F      je _while52_exit
4078   1EEC             _while52_block:
4079   1EEC             ; digits[i] = '0' + (num % 10); 
4080   1EEC FA F7 FF      lea d, [bp + -9] ; $digits
4081   1EEF D7            push a
4082   1EF0 DA            push d
4083   1EF1 FA F5 FF      lea d, [bp + -11] ; $i
4084   1EF4 2A            mov b, [d]
4085   1EF5 38 00 00      mov c, 0
4086   1EF8 E7            pop d
4087   1EF9 5A            add d, b
4088   1EFA E4            pop a
4089   1EFB DA            push d
4090   1EFC FD 2E 30 00   mov32 cb, $00000030
4090   1F00 00 00 
4091   1F02             ; --- START TERMS
4092   1F02 D7            push a
4093   1F03 11            mov a, b
4094   1F04 FA 05 00      lea d, [bp + 5] ; $num
4095   1F07 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4096   1F0A FD 39         mov c, b ; And place it into C
4097   1F0C 2A            mov b, [d] ; Lower Word in B
4098   1F0D             ; --- START FACTORS
4099   1F0D D7            push a
4100   1F0E FD D8         push g
4101   1F10 11            mov a, b
4102   1F11 FD 7A         mov g, c
4103   1F13 FD 2E 0A 00   mov32 cb, $0000000a
4103   1F17 00 00 
4104   1F19 FD D8         push g ; save 'g' as the div instruction uses it
4105   1F1B AE            div a, b ; %, a: quotient, b: remainder
4106   1F1C 11            mov a, b
4107   1F1D FD F1         pop g
4108   1F1F FD 38         mov c, g
4109   1F21 27            mov b, a
4110   1F22 FD F1         pop g
4111   1F24 E4            pop a
4112   1F25             ; --- END FACTORS
4113   1F25 FD 22 00 00   mov g, 0
4114   1F29 FD 15         add32 cb, ga
4115   1F2B E4            pop a
4116   1F2C             ; --- END TERMS
4117   1F2C E7            pop d
4118   1F2D FD 3E         mov [d], bl
4119   1F2F             ; num = num / 10; 
4120   1F2F FA 05 00      lea d, [bp + 5] ; $num
4121   1F32 DA            push d
4122   1F33 FA 05 00      lea d, [bp + 5] ; $num
4123   1F36 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4124   1F39 FD 39         mov c, b ; And place it into C
4125   1F3B 2A            mov b, [d] ; Lower Word in B
4126   1F3C             ; --- START FACTORS
4127   1F3C D7            push a
4128   1F3D FD D8         push g
4129   1F3F 11            mov a, b
4130   1F40 FD 7A         mov g, c
4131   1F42 FD 2E 0A 00   mov32 cb, $0000000a
4131   1F46 00 00 
4132   1F48 FD D8         push g ; save 'g' as the div instruction uses it
4133   1F4A AE            div a, b ; /, a: quotient, b: remainder
4134   1F4B FD F1         pop g
4135   1F4D FD 38         mov c, g
4136   1F4F 27            mov b, a
4137   1F50 FD F1         pop g
4138   1F52 E4            pop a
4139   1F53             ; --- END FACTORS
4140   1F53 E7            pop d
4141   1F54 FD 43         mov [d], b
4142   1F56 28            mov b, c
4143   1F57 FD 44 02 00   mov [d + 2], b
4144   1F5B             ; i++; 
4145   1F5B FA F5 FF      lea d, [bp + -11] ; $i
4146   1F5E 2A            mov b, [d]
4147   1F5F 38 00 00      mov c, 0
4148   1F62 11            mov a, b
4149   1F63 FD 77         inc b
4150   1F65 FA F5 FF      lea d, [bp + -11] ; $i
4151   1F68 FD 43         mov [d], b
4152   1F6A 27            mov b, a
4153   1F6B 0A C7 1E      jmp _while52_cond
4154   1F6E             _while52_exit:
4155   1F6E             ; while (i > 0) { 
4156   1F6E             _while59_cond:
4157   1F6E FA F5 FF      lea d, [bp + -11] ; $i
4158   1F71 2A            mov b, [d]
4159   1F72 38 00 00      mov c, 0
4160   1F75             ; --- START RELATIONAL
4161   1F75 D7            push a
4162   1F76 11            mov a, b
4163   1F77 FD 2E 00 00   mov32 cb, $00000000
4163   1F7B 00 00 
4164   1F7D B0            cmp a, b
4165   1F7E FD 7F         sgt ; >
4166   1F80 E4            pop a
4167   1F81             ; --- END RELATIONAL
4168   1F81 C0 00 00      cmp b, 0
4169   1F84 C6 B6 1F      je _while59_exit
4170   1F87             _while59_block:
4171   1F87             ; i--; 
4172   1F87 FA F5 FF      lea d, [bp + -11] ; $i
4173   1F8A 2A            mov b, [d]
4174   1F8B 38 00 00      mov c, 0
4175   1F8E 11            mov a, b
4176   1F8F FD 7D         dec b
4177   1F91 FA F5 FF      lea d, [bp + -11] ; $i
4178   1F94 FD 43         mov [d], b
4179   1F96 27            mov b, a
4180   1F97             ; putchar(digits[i]); 
4181   1F97             ; --- START FUNCTION CALL
4182   1F97 FA F7 FF      lea d, [bp + -9] ; $digits
4183   1F9A D7            push a
4184   1F9B DA            push d
4185   1F9C FA F5 FF      lea d, [bp + -11] ; $i
4186   1F9F 2A            mov b, [d]
4187   1FA0 38 00 00      mov c, 0
4188   1FA3 E7            pop d
4189   1FA4 5A            add d, b
4190   1FA5 E4            pop a
4191   1FA6 32            mov bl, [d]
4192   1FA7 A7 00         mov bh, 0
4193   1FA9 38 00 00      mov c, 0
4194   1FAC DD            push bl
4195   1FAD 07 B8 1F      call putchar
4196   1FB0 51 01 00      add sp, 1
4197   1FB3             ; --- END FUNCTION CALL
4198   1FB3 0A 6E 1F      jmp _while59_cond
4199   1FB6             _while59_exit:
4200   1FB6 F9            leave
4201   1FB7 09            ret
4202   1FB8             
4203   1FB8             putchar:
4204   1FB8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4205   1FBB             ; --- BEGIN INLINE ASM SEGMENT
4206   1FBB FA 05 00      lea d, [bp + 5] ; $c
4207   1FBE 1E            mov al, [d]
4208   1FBF 23            mov ah, al
4209   1FC0 19 00         mov al, 0
4210   1FC2 05 03         syscall sys_io      ; char in AH
4211   1FC4             ; --- END INLINE ASM SEGMENT
4212   1FC4 F9            leave
4213   1FC5 09            ret
4214   1FC6             
4215   1FC6             print_unsigned_long:
4216   1FC6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4217   1FC9             ; char digits[10]; 
4218   1FC9 52 0A 00      sub sp, 10
4219   1FCC             ; int i; 
4220   1FCC 52 02 00      sub sp, 2
4221   1FCF             ; i = 0; 
4222   1FCF FA F5 FF      lea d, [bp + -11] ; $i
4223   1FD2 DA            push d
4224   1FD3 FD 2E 00 00   mov32 cb, $00000000
4224   1FD7 00 00 
4225   1FD9 E7            pop d
4226   1FDA FD 43         mov [d], b
4227   1FDC             ; if(num == 0){ 
4228   1FDC             _if60_cond:
4229   1FDC FA 05 00      lea d, [bp + 5] ; $num
4230   1FDF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4231   1FE2 FD 39         mov c, b ; And place it into C
4232   1FE4 2A            mov b, [d] ; Lower Word in B
4233   1FE5             ; --- START RELATIONAL
4234   1FE5 D7            push a
4235   1FE6 FD D8         push g
4236   1FE8 11            mov a, b
4237   1FE9 FD 7A         mov g, c
4238   1FEB FD 2E 00 00   mov32 cb, $00000000
4238   1FEF 00 00 
4239   1FF1 38 00 00      mov c, 0
4240   1FF4 FD AF         cmp32 ga, cb
4241   1FF6 FD 71         seq ; ==
4242   1FF8 FD F1         pop g
4243   1FFA E4            pop a
4244   1FFB             ; --- END RELATIONAL
4245   1FFB C0 00 00      cmp b, 0
4246   1FFE C6 13 20      je _if60_exit
4247   2001             _if60_TRUE:
4248   2001             ; putchar('0'); 
4249   2001             ; --- START FUNCTION CALL
4250   2001 FD 2E 30 00   mov32 cb, $00000030
4250   2005 00 00 
4251   2007 DD            push bl
4252   2008 07 B8 1F      call putchar
4253   200B 51 01 00      add sp, 1
4254   200E             ; --- END FUNCTION CALL
4255   200E             ; return; 
4256   200E F9            leave
4257   200F 09            ret
4258   2010 0A 13 20      jmp _if60_exit
4259   2013             _if60_exit:
4260   2013             ; while (num > 0) { 
4261   2013             _while61_cond:
4262   2013 FA 05 00      lea d, [bp + 5] ; $num
4263   2016 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4264   2019 FD 39         mov c, b ; And place it into C
4265   201B 2A            mov b, [d] ; Lower Word in B
4266   201C             ; --- START RELATIONAL
4267   201C D7            push a
4268   201D FD D8         push g
4269   201F 11            mov a, b
4270   2020 FD 7A         mov g, c
4271   2022 FD 2E 00 00   mov32 cb, $00000000
4271   2026 00 00 
4272   2028 38 00 00      mov c, 0
4273   202B FD AF         cmp32 ga, cb
4274   202D FD 81         sgu
4275   202F FD F1         pop g
4276   2031 E4            pop a
4277   2032             ; --- END RELATIONAL
4278   2032 C0 00 00      cmp b, 0
4279   2035 C6 BA 20      je _while61_exit
4280   2038             _while61_block:
4281   2038             ; digits[i] = '0' + (num % 10); 
4282   2038 FA F7 FF      lea d, [bp + -9] ; $digits
4283   203B D7            push a
4284   203C DA            push d
4285   203D FA F5 FF      lea d, [bp + -11] ; $i
4286   2040 2A            mov b, [d]
4287   2041 38 00 00      mov c, 0
4288   2044 E7            pop d
4289   2045 5A            add d, b
4290   2046 E4            pop a
4291   2047 DA            push d
4292   2048 FD 2E 30 00   mov32 cb, $00000030
4292   204C 00 00 
4293   204E             ; --- START TERMS
4294   204E D7            push a
4295   204F 11            mov a, b
4296   2050 FA 05 00      lea d, [bp + 5] ; $num
4297   2053 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4298   2056 FD 39         mov c, b ; And place it into C
4299   2058 2A            mov b, [d] ; Lower Word in B
4300   2059             ; --- START FACTORS
4301   2059 D7            push a
4302   205A FD D8         push g
4303   205C 11            mov a, b
4304   205D FD 7A         mov g, c
4305   205F FD 2E 0A 00   mov32 cb, $0000000a
4305   2063 00 00 
4306   2065 FD D8         push g ; save 'g' as the div instruction uses it
4307   2067 AE            div a, b ; %, a: quotient, b: remainder
4308   2068 11            mov a, b
4309   2069 FD F1         pop g
4310   206B FD 38         mov c, g
4311   206D 27            mov b, a
4312   206E FD F1         pop g
4313   2070 E4            pop a
4314   2071             ; --- END FACTORS
4315   2071 FD 22 00 00   mov g, 0
4316   2075 FD 15         add32 cb, ga
4317   2077 E4            pop a
4318   2078             ; --- END TERMS
4319   2078 E7            pop d
4320   2079 FD 3E         mov [d], bl
4321   207B             ; num = num / 10; 
4322   207B FA 05 00      lea d, [bp + 5] ; $num
4323   207E DA            push d
4324   207F FA 05 00      lea d, [bp + 5] ; $num
4325   2082 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4326   2085 FD 39         mov c, b ; And place it into C
4327   2087 2A            mov b, [d] ; Lower Word in B
4328   2088             ; --- START FACTORS
4329   2088 D7            push a
4330   2089 FD D8         push g
4331   208B 11            mov a, b
4332   208C FD 7A         mov g, c
4333   208E FD 2E 0A 00   mov32 cb, $0000000a
4333   2092 00 00 
4334   2094 FD D8         push g ; save 'g' as the div instruction uses it
4335   2096 AE            div a, b ; /, a: quotient, b: remainder
4336   2097 FD F1         pop g
4337   2099 FD 38         mov c, g
4338   209B 27            mov b, a
4339   209C FD F1         pop g
4340   209E E4            pop a
4341   209F             ; --- END FACTORS
4342   209F E7            pop d
4343   20A0 FD 43         mov [d], b
4344   20A2 28            mov b, c
4345   20A3 FD 44 02 00   mov [d + 2], b
4346   20A7             ; i++; 
4347   20A7 FA F5 FF      lea d, [bp + -11] ; $i
4348   20AA 2A            mov b, [d]
4349   20AB 38 00 00      mov c, 0
4350   20AE 11            mov a, b
4351   20AF FD 77         inc b
4352   20B1 FA F5 FF      lea d, [bp + -11] ; $i
4353   20B4 FD 43         mov [d], b
4354   20B6 27            mov b, a
4355   20B7 0A 13 20      jmp _while61_cond
4356   20BA             _while61_exit:
4357   20BA             ; while (i > 0) { 
4358   20BA             _while68_cond:
4359   20BA FA F5 FF      lea d, [bp + -11] ; $i
4360   20BD 2A            mov b, [d]
4361   20BE 38 00 00      mov c, 0
4362   20C1             ; --- START RELATIONAL
4363   20C1 D7            push a
4364   20C2 11            mov a, b
4365   20C3 FD 2E 00 00   mov32 cb, $00000000
4365   20C7 00 00 
4366   20C9 B0            cmp a, b
4367   20CA FD 7F         sgt ; >
4368   20CC E4            pop a
4369   20CD             ; --- END RELATIONAL
4370   20CD C0 00 00      cmp b, 0
4371   20D0 C6 02 21      je _while68_exit
4372   20D3             _while68_block:
4373   20D3             ; i--; 
4374   20D3 FA F5 FF      lea d, [bp + -11] ; $i
4375   20D6 2A            mov b, [d]
4376   20D7 38 00 00      mov c, 0
4377   20DA 11            mov a, b
4378   20DB FD 7D         dec b
4379   20DD FA F5 FF      lea d, [bp + -11] ; $i
4380   20E0 FD 43         mov [d], b
4381   20E2 27            mov b, a
4382   20E3             ; putchar(digits[i]); 
4383   20E3             ; --- START FUNCTION CALL
4384   20E3 FA F7 FF      lea d, [bp + -9] ; $digits
4385   20E6 D7            push a
4386   20E7 DA            push d
4387   20E8 FA F5 FF      lea d, [bp + -11] ; $i
4388   20EB 2A            mov b, [d]
4389   20EC 38 00 00      mov c, 0
4390   20EF E7            pop d
4391   20F0 5A            add d, b
4392   20F1 E4            pop a
4393   20F2 32            mov bl, [d]
4394   20F3 A7 00         mov bh, 0
4395   20F5 38 00 00      mov c, 0
4396   20F8 DD            push bl
4397   20F9 07 B8 1F      call putchar
4398   20FC 51 01 00      add sp, 1
4399   20FF             ; --- END FUNCTION CALL
4400   20FF 0A BA 20      jmp _while68_cond
4401   2102             _while68_exit:
4402   2102 F9            leave
4403   2103 09            ret
4404   2104             
4405   2104             printx32:
4406   2104 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4407   2107             ; --- BEGIN INLINE ASM SEGMENT
4408   2107 FA 05 00      lea d, [bp + 5] ; $hex
4409   210A 2B 02 00      mov b, [d+2]
4410   210D 07 16 21      call print_u16x_printx32
4411   2110 2A            mov b, [d]
4412   2111 07 16 21      call print_u16x_printx32
4413   2114             ; --- END INLINE ASM SEGMENT
4414   2114             ; return; 
4415   2114 F9            leave
4416   2115 09            ret
4417   2116             ; --- BEGIN INLINE ASM SEGMENT
4418   2116             print_u16x_printx32:
4419   2116 D7            push a
4420   2117 D8            push b
4421   2118 DD            push bl
4422   2119 30            mov bl, bh
4423   211A 07 38 21      call _itoa_printx32        ; convert bh to char in A
4424   211D 2F            mov bl, al        ; save al
4425   211E 19 00         mov al, 0
4426   2120 05 03         syscall sys_io        ; display AH
4427   2122 24            mov ah, bl        ; retrieve al
4428   2123 19 00         mov al, 0
4429   2125 05 03         syscall sys_io        ; display AL
4430   2127 EA            pop bl
4431   2128 07 38 21      call _itoa_printx32        ; convert bh to char in A
4432   212B 2F            mov bl, al        ; save al
4433   212C 19 00         mov al, 0
4434   212E 05 03         syscall sys_io        ; display AH
4435   2130 24            mov ah, bl        ; retrieve al
4436   2131 19 00         mov al, 0
4437   2133 05 03         syscall sys_io        ; display AL
4438   2135 E5            pop b
4439   2136 E4            pop a
4440   2137 09            ret
4441   2138             _itoa_printx32:
4442   2138 DA            push d
4443   2139 D8            push b
4444   213A A7 00         mov bh, 0
4445   213C FD A4 04      shr bl, 4  
4446   213F 74            mov d, b
4447   2140 1F 52 21      mov al, [d + s_hex_digits_printx32]
4448   2143 23            mov ah, al
4449   2144 E5            pop b
4450   2145 D8            push b
4451   2146 A7 00         mov bh, 0
4452   2148 FD 87 0F      and bl, $0F
4453   214B 74            mov d, b
4454   214C 1F 52 21      mov al, [d + s_hex_digits_printx32]
4455   214F E5            pop b
4456   2150 E7            pop d
4457   2151 09            ret
4458   2152 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
4458   2156 34 35 36 37 
4458   215A 38 39 41 42 
4458   215E 43 44 45 46 
4459   2162             ; --- END INLINE ASM SEGMENT
4460   2162 F9            leave
4461   2163 09            ret
4462   2164             
4463   2164             err:
4464   2164 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4465   2167             ; print(e); 
4466   2167             ; --- START FUNCTION CALL
4467   2167 FA 05 00      lea d, [bp + 5] ; $e
4468   216A 2A            mov b, [d]
4469   216B 38 00 00      mov c, 0
4470   216E FD AB         swp b
4471   2170 D8            push b
4472   2171 07 79 21      call print
4473   2174 51 02 00      add sp, 2
4474   2177             ; --- END FUNCTION CALL
4475   2177 F9            leave
4476   2178 09            ret
4477   2179             
4478   2179             print:
4479   2179 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4480   217C             ; --- BEGIN INLINE ASM SEGMENT
4481   217C FA 05 00      lea d, [bp + 5] ; $s
4482   217F FD 2A         mov d, [d]
4483   2181             _puts_L1_print:
4484   2181 1E            mov al, [d]
4485   2182 B9 00         cmp al, 0
4486   2184 C6 90 21      jz _puts_END_print
4487   2187 23            mov ah, al
4488   2188 19 00         mov al, 0
4489   218A 05 03         syscall sys_io
4490   218C 79            inc d
4491   218D 0A 81 21      jmp _puts_L1_print
4492   2190             _puts_END_print:
4493   2190             ; --- END INLINE ASM SEGMENT
4494   2190 F9            leave
4495   2191 09            ret
4496   2192             
4497   2192             print_signed:
4498   2192 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4499   2195             ; char digits[5]; 
4500   2195 52 05 00      sub sp, 5
4501   2198             ; int i = 0; 
4502   2198 52 02 00      sub sp, 2
4503   219B             ; --- START LOCAL VAR INITIALIZATION
4504   219B FA FA FF      lea d, [bp + -6] ; $i
4505   219E DA            push d
4506   219F FD 2E 00 00   mov32 cb, $00000000
4506   21A3 00 00 
4507   21A5 E7            pop d
4508   21A6 FD 43         mov [d], b
4509   21A8             ; --- END LOCAL VAR INITIALIZATION
4510   21A8             ; if (num < 0) { 
4511   21A8             _if69_cond:
4512   21A8 FA 05 00      lea d, [bp + 5] ; $num
4513   21AB 2A            mov b, [d]
4514   21AC 38 00 00      mov c, 0
4515   21AF             ; --- START RELATIONAL
4516   21AF D7            push a
4517   21B0 11            mov a, b
4518   21B1 FD 2E 00 00   mov32 cb, $00000000
4518   21B5 00 00 
4519   21B7 B0            cmp a, b
4520   21B8 FD 73         slt ; < (signed)
4521   21BA E4            pop a
4522   21BB             ; --- END RELATIONAL
4523   21BB C0 00 00      cmp b, 0
4524   21BE C6 E1 21      je _if69_else
4525   21C1             _if69_TRUE:
4526   21C1             ; putchar('-'); 
4527   21C1             ; --- START FUNCTION CALL
4528   21C1 FD 2E 2D 00   mov32 cb, $0000002d
4528   21C5 00 00 
4529   21C7 DD            push bl
4530   21C8 07 B8 1F      call putchar
4531   21CB 51 01 00      add sp, 1
4532   21CE             ; --- END FUNCTION CALL
4533   21CE             ; num = -num; 
4534   21CE FA 05 00      lea d, [bp + 5] ; $num
4535   21D1 DA            push d
4536   21D2 FA 05 00      lea d, [bp + 5] ; $num
4537   21D5 2A            mov b, [d]
4538   21D6 38 00 00      mov c, 0
4539   21D9 FD 97         neg b
4540   21DB E7            pop d
4541   21DC FD 43         mov [d], b
4542   21DE 0A 0C 22      jmp _if69_exit
4543   21E1             _if69_else:
4544   21E1             ; if (num == 0) { 
4545   21E1             _if70_cond:
4546   21E1 FA 05 00      lea d, [bp + 5] ; $num
4547   21E4 2A            mov b, [d]
4548   21E5 38 00 00      mov c, 0
4549   21E8             ; --- START RELATIONAL
4550   21E8 D7            push a
4551   21E9 11            mov a, b
4552   21EA FD 2E 00 00   mov32 cb, $00000000
4552   21EE 00 00 
4553   21F0 B0            cmp a, b
4554   21F1 FD 71         seq ; ==
4555   21F3 E4            pop a
4556   21F4             ; --- END RELATIONAL
4557   21F4 C0 00 00      cmp b, 0
4558   21F7 C6 0C 22      je _if70_exit
4559   21FA             _if70_TRUE:
4560   21FA             ; putchar('0'); 
4561   21FA             ; --- START FUNCTION CALL
4562   21FA FD 2E 30 00   mov32 cb, $00000030
4562   21FE 00 00 
4563   2200 DD            push bl
4564   2201 07 B8 1F      call putchar
4565   2204 51 01 00      add sp, 1
4566   2207             ; --- END FUNCTION CALL
4567   2207             ; return; 
4568   2207 F9            leave
4569   2208 09            ret
4570   2209 0A 0C 22      jmp _if70_exit
4571   220C             _if70_exit:
4572   220C             _if69_exit:
4573   220C             ; while (num > 0) { 
4574   220C             _while71_cond:
4575   220C FA 05 00      lea d, [bp + 5] ; $num
4576   220F 2A            mov b, [d]
4577   2210 38 00 00      mov c, 0
4578   2213             ; --- START RELATIONAL
4579   2213 D7            push a
4580   2214 11            mov a, b
4581   2215 FD 2E 00 00   mov32 cb, $00000000
4581   2219 00 00 
4582   221B B0            cmp a, b
4583   221C FD 7F         sgt ; >
4584   221E E4            pop a
4585   221F             ; --- END RELATIONAL
4586   221F C0 00 00      cmp b, 0
4587   2222 C6 99 22      je _while71_exit
4588   2225             _while71_block:
4589   2225             ; digits[i] = '0' + (num % 10); 
4590   2225 FA FC FF      lea d, [bp + -4] ; $digits
4591   2228 D7            push a
4592   2229 DA            push d
4593   222A FA FA FF      lea d, [bp + -6] ; $i
4594   222D 2A            mov b, [d]
4595   222E 38 00 00      mov c, 0
4596   2231 E7            pop d
4597   2232 5A            add d, b
4598   2233 E4            pop a
4599   2234 DA            push d
4600   2235 FD 2E 30 00   mov32 cb, $00000030
4600   2239 00 00 
4601   223B             ; --- START TERMS
4602   223B D7            push a
4603   223C 11            mov a, b
4604   223D FA 05 00      lea d, [bp + 5] ; $num
4605   2240 2A            mov b, [d]
4606   2241 38 00 00      mov c, 0
4607   2244             ; --- START FACTORS
4608   2244 D7            push a
4609   2245 FD D8         push g
4610   2247 11            mov a, b
4611   2248 FD 7A         mov g, c
4612   224A FD 2E 0A 00   mov32 cb, $0000000a
4612   224E 00 00 
4613   2250 FD D8         push g ; save 'g' as the div instruction uses it
4614   2252 AE            div a, b ; %, a: quotient, b: remainder
4615   2253 11            mov a, b
4616   2254 FD F1         pop g
4617   2256 FD 38         mov c, g
4618   2258 27            mov b, a
4619   2259 FD F1         pop g
4620   225B E4            pop a
4621   225C             ; --- END FACTORS
4622   225C 56            add b, a
4623   225D E4            pop a
4624   225E             ; --- END TERMS
4625   225E E7            pop d
4626   225F FD 3E         mov [d], bl
4627   2261             ; num = num / 10; 
4628   2261 FA 05 00      lea d, [bp + 5] ; $num
4629   2264 DA            push d
4630   2265 FA 05 00      lea d, [bp + 5] ; $num
4631   2268 2A            mov b, [d]
4632   2269 38 00 00      mov c, 0
4633   226C             ; --- START FACTORS
4634   226C D7            push a
4635   226D FD D8         push g
4636   226F 11            mov a, b
4637   2270 FD 7A         mov g, c
4638   2272 FD 2E 0A 00   mov32 cb, $0000000a
4638   2276 00 00 
4639   2278 FD D8         push g ; save 'g' as the div instruction uses it
4640   227A AE            div a, b ; /, a: quotient, b: remainder
4641   227B FD F1         pop g
4642   227D FD 38         mov c, g
4643   227F 27            mov b, a
4644   2280 FD F1         pop g
4645   2282 E4            pop a
4646   2283             ; --- END FACTORS
4647   2283 E7            pop d
4648   2284 FD 43         mov [d], b
4649   2286             ; i++; 
4650   2286 FA FA FF      lea d, [bp + -6] ; $i
4651   2289 2A            mov b, [d]
4652   228A 38 00 00      mov c, 0
4653   228D 11            mov a, b
4654   228E FD 77         inc b
4655   2290 FA FA FF      lea d, [bp + -6] ; $i
4656   2293 FD 43         mov [d], b
4657   2295 27            mov b, a
4658   2296 0A 0C 22      jmp _while71_cond
4659   2299             _while71_exit:
4660   2299             ; while (i > 0) { 
4661   2299             _while78_cond:
4662   2299 FA FA FF      lea d, [bp + -6] ; $i
4663   229C 2A            mov b, [d]
4664   229D 38 00 00      mov c, 0
4665   22A0             ; --- START RELATIONAL
4666   22A0 D7            push a
4667   22A1 11            mov a, b
4668   22A2 FD 2E 00 00   mov32 cb, $00000000
4668   22A6 00 00 
4669   22A8 B0            cmp a, b
4670   22A9 FD 7F         sgt ; >
4671   22AB E4            pop a
4672   22AC             ; --- END RELATIONAL
4673   22AC C0 00 00      cmp b, 0
4674   22AF C6 E1 22      je _while78_exit
4675   22B2             _while78_block:
4676   22B2             ; i--; 
4677   22B2 FA FA FF      lea d, [bp + -6] ; $i
4678   22B5 2A            mov b, [d]
4679   22B6 38 00 00      mov c, 0
4680   22B9 11            mov a, b
4681   22BA FD 7D         dec b
4682   22BC FA FA FF      lea d, [bp + -6] ; $i
4683   22BF FD 43         mov [d], b
4684   22C1 27            mov b, a
4685   22C2             ; putchar(digits[i]); 
4686   22C2             ; --- START FUNCTION CALL
4687   22C2 FA FC FF      lea d, [bp + -4] ; $digits
4688   22C5 D7            push a
4689   22C6 DA            push d
4690   22C7 FA FA FF      lea d, [bp + -6] ; $i
4691   22CA 2A            mov b, [d]
4692   22CB 38 00 00      mov c, 0
4693   22CE E7            pop d
4694   22CF 5A            add d, b
4695   22D0 E4            pop a
4696   22D1 32            mov bl, [d]
4697   22D2 A7 00         mov bh, 0
4698   22D4 38 00 00      mov c, 0
4699   22D7 DD            push bl
4700   22D8 07 B8 1F      call putchar
4701   22DB 51 01 00      add sp, 1
4702   22DE             ; --- END FUNCTION CALL
4703   22DE 0A 99 22      jmp _while78_cond
4704   22E1             _while78_exit:
4705   22E1 F9            leave
4706   22E2 09            ret
4707   22E3             
4708   22E3             print_unsigned:
4709   22E3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4710   22E6             ; char digits[5]; 
4711   22E6 52 05 00      sub sp, 5
4712   22E9             ; int i; 
4713   22E9 52 02 00      sub sp, 2
4714   22EC             ; i = 0; 
4715   22EC FA FA FF      lea d, [bp + -6] ; $i
4716   22EF DA            push d
4717   22F0 FD 2E 00 00   mov32 cb, $00000000
4717   22F4 00 00 
4718   22F6 E7            pop d
4719   22F7 FD 43         mov [d], b
4720   22F9             ; if(num == 0){ 
4721   22F9             _if79_cond:
4722   22F9 FA 05 00      lea d, [bp + 5] ; $num
4723   22FC 2A            mov b, [d]
4724   22FD 38 00 00      mov c, 0
4725   2300             ; --- START RELATIONAL
4726   2300 D7            push a
4727   2301 11            mov a, b
4728   2302 FD 2E 00 00   mov32 cb, $00000000
4728   2306 00 00 
4729   2308 B0            cmp a, b
4730   2309 FD 71         seq ; ==
4731   230B E4            pop a
4732   230C             ; --- END RELATIONAL
4733   230C C0 00 00      cmp b, 0
4734   230F C6 24 23      je _if79_exit
4735   2312             _if79_TRUE:
4736   2312             ; putchar('0'); 
4737   2312             ; --- START FUNCTION CALL
4738   2312 FD 2E 30 00   mov32 cb, $00000030
4738   2316 00 00 
4739   2318 DD            push bl
4740   2319 07 B8 1F      call putchar
4741   231C 51 01 00      add sp, 1
4742   231F             ; --- END FUNCTION CALL
4743   231F             ; return; 
4744   231F F9            leave
4745   2320 09            ret
4746   2321 0A 24 23      jmp _if79_exit
4747   2324             _if79_exit:
4748   2324             ; while (num > 0) { 
4749   2324             _while80_cond:
4750   2324 FA 05 00      lea d, [bp + 5] ; $num
4751   2327 2A            mov b, [d]
4752   2328 38 00 00      mov c, 0
4753   232B             ; --- START RELATIONAL
4754   232B D7            push a
4755   232C 11            mov a, b
4756   232D FD 2E 00 00   mov32 cb, $00000000
4756   2331 00 00 
4757   2333 B0            cmp a, b
4758   2334 FD 81         sgu ; > (unsigned)
4759   2336 E4            pop a
4760   2337             ; --- END RELATIONAL
4761   2337 C0 00 00      cmp b, 0
4762   233A C6 B1 23      je _while80_exit
4763   233D             _while80_block:
4764   233D             ; digits[i] = '0' + (num % 10); 
4765   233D FA FC FF      lea d, [bp + -4] ; $digits
4766   2340 D7            push a
4767   2341 DA            push d
4768   2342 FA FA FF      lea d, [bp + -6] ; $i
4769   2345 2A            mov b, [d]
4770   2346 38 00 00      mov c, 0
4771   2349 E7            pop d
4772   234A 5A            add d, b
4773   234B E4            pop a
4774   234C DA            push d
4775   234D FD 2E 30 00   mov32 cb, $00000030
4775   2351 00 00 
4776   2353             ; --- START TERMS
4777   2353 D7            push a
4778   2354 11            mov a, b
4779   2355 FA 05 00      lea d, [bp + 5] ; $num
4780   2358 2A            mov b, [d]
4781   2359 38 00 00      mov c, 0
4782   235C             ; --- START FACTORS
4783   235C D7            push a
4784   235D FD D8         push g
4785   235F 11            mov a, b
4786   2360 FD 7A         mov g, c
4787   2362 FD 2E 0A 00   mov32 cb, $0000000a
4787   2366 00 00 
4788   2368 FD D8         push g ; save 'g' as the div instruction uses it
4789   236A AE            div a, b ; %, a: quotient, b: remainder
4790   236B 11            mov a, b
4791   236C FD F1         pop g
4792   236E FD 38         mov c, g
4793   2370 27            mov b, a
4794   2371 FD F1         pop g
4795   2373 E4            pop a
4796   2374             ; --- END FACTORS
4797   2374 56            add b, a
4798   2375 E4            pop a
4799   2376             ; --- END TERMS
4800   2376 E7            pop d
4801   2377 FD 3E         mov [d], bl
4802   2379             ; num = num / 10; 
4803   2379 FA 05 00      lea d, [bp + 5] ; $num
4804   237C DA            push d
4805   237D FA 05 00      lea d, [bp + 5] ; $num
4806   2380 2A            mov b, [d]
4807   2381 38 00 00      mov c, 0
4808   2384             ; --- START FACTORS
4809   2384 D7            push a
4810   2385 FD D8         push g
4811   2387 11            mov a, b
4812   2388 FD 7A         mov g, c
4813   238A FD 2E 0A 00   mov32 cb, $0000000a
4813   238E 00 00 
4814   2390 FD D8         push g ; save 'g' as the div instruction uses it
4815   2392 AE            div a, b ; /, a: quotient, b: remainder
4816   2393 FD F1         pop g
4817   2395 FD 38         mov c, g
4818   2397 27            mov b, a
4819   2398 FD F1         pop g
4820   239A E4            pop a
4821   239B             ; --- END FACTORS
4822   239B E7            pop d
4823   239C FD 43         mov [d], b
4824   239E             ; i++; 
4825   239E FA FA FF      lea d, [bp + -6] ; $i
4826   23A1 2A            mov b, [d]
4827   23A2 38 00 00      mov c, 0
4828   23A5 11            mov a, b
4829   23A6 FD 77         inc b
4830   23A8 FA FA FF      lea d, [bp + -6] ; $i
4831   23AB FD 43         mov [d], b
4832   23AD 27            mov b, a
4833   23AE 0A 24 23      jmp _while80_cond
4834   23B1             _while80_exit:
4835   23B1             ; while (i > 0) { 
4836   23B1             _while87_cond:
4837   23B1 FA FA FF      lea d, [bp + -6] ; $i
4838   23B4 2A            mov b, [d]
4839   23B5 38 00 00      mov c, 0
4840   23B8             ; --- START RELATIONAL
4841   23B8 D7            push a
4842   23B9 11            mov a, b
4843   23BA FD 2E 00 00   mov32 cb, $00000000
4843   23BE 00 00 
4844   23C0 B0            cmp a, b
4845   23C1 FD 7F         sgt ; >
4846   23C3 E4            pop a
4847   23C4             ; --- END RELATIONAL
4848   23C4 C0 00 00      cmp b, 0
4849   23C7 C6 F9 23      je _while87_exit
4850   23CA             _while87_block:
4851   23CA             ; i--; 
4852   23CA FA FA FF      lea d, [bp + -6] ; $i
4853   23CD 2A            mov b, [d]
4854   23CE 38 00 00      mov c, 0
4855   23D1 11            mov a, b
4856   23D2 FD 7D         dec b
4857   23D4 FA FA FF      lea d, [bp + -6] ; $i
4858   23D7 FD 43         mov [d], b
4859   23D9 27            mov b, a
4860   23DA             ; putchar(digits[i]); 
4861   23DA             ; --- START FUNCTION CALL
4862   23DA FA FC FF      lea d, [bp + -4] ; $digits
4863   23DD D7            push a
4864   23DE DA            push d
4865   23DF FA FA FF      lea d, [bp + -6] ; $i
4866   23E2 2A            mov b, [d]
4867   23E3 38 00 00      mov c, 0
4868   23E6 E7            pop d
4869   23E7 5A            add d, b
4870   23E8 E4            pop a
4871   23E9 32            mov bl, [d]
4872   23EA A7 00         mov bh, 0
4873   23EC 38 00 00      mov c, 0
4874   23EF DD            push bl
4875   23F0 07 B8 1F      call putchar
4876   23F3 51 01 00      add sp, 1
4877   23F6             ; --- END FUNCTION CALL
4878   23F6 0A B1 23      jmp _while87_cond
4879   23F9             _while87_exit:
4880   23F9 F9            leave
4881   23FA 09            ret
4882   23FB             
4883   23FB             printx16:
4884   23FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
4885   23FE             ; --- BEGIN INLINE ASM SEGMENT
4886   23FE FA 05 00      lea d, [bp + 5] ; $hex
4887   2401 2A            mov b, [d]
4888   2402             print_u16x_printx16:
4889   2402 DD            push bl
4890   2403 30            mov bl, bh
4891   2404 07 21 24      call _itoa_printx16        ; convert bh to char in A
4892   2407 2F            mov bl, al        ; save al
4893   2408 19 00         mov al, 0
4894   240A 05 03         syscall sys_io        ; display AH
4895   240C 24            mov ah, bl        ; retrieve al
4896   240D 19 00         mov al, 0
4897   240F 05 03         syscall sys_io        ; display AL
4898   2411 EA            pop bl
4899   2412 07 21 24      call _itoa_printx16        ; convert bh to char in A
4900   2415 2F            mov bl, al        ; save al
4901   2416 19 00         mov al, 0
4902   2418 05 03         syscall sys_io        ; display AH
4903   241A 24            mov ah, bl        ; retrieve al
4904   241B 19 00         mov al, 0
4905   241D 05 03         syscall sys_io        ; display AL
4906   241F             ; --- END INLINE ASM SEGMENT
4907   241F             ; return; 
4908   241F F9            leave
4909   2420 09            ret
4910   2421             ; --- BEGIN INLINE ASM SEGMENT
4911   2421             _itoa_printx16:
4912   2421 DA            push d
4913   2422 D8            push b
4914   2423 A7 00         mov bh, 0
4915   2425 FD A4 04      shr bl, 4  
4916   2428 74            mov d, b
4917   2429 1F 3B 24      mov al, [d + s_hex_digits_printx16]
4918   242C 23            mov ah, al
4919   242D E5            pop b
4920   242E D8            push b
4921   242F A7 00         mov bh, 0
4922   2431 FD 87 0F      and bl, $0F
4923   2434 74            mov d, b
4924   2435 1F 3B 24      mov al, [d + s_hex_digits_printx16]
4925   2438 E5            pop b
4926   2439 E7            pop d
4927   243A 09            ret
4928   243B 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
4928   243F 34 35 36 37 
4928   2443 38 39 41 42 
4928   2447 43 44 45 46 
4929   244B             ; --- END INLINE ASM SEGMENT
4930   244B F9            leave
4931   244C 09            ret
4932   244D             ; --- END TEXT SEGMENT
4933   244D             
4934   244D             ; --- BEGIN DATA SEGMENT
4935   244D 30 31 32 33 _gca1_data: .db $30,$31,$32,$33,$34,
4935   2451 34 
4936   2452 00 00 01 00 _gia1_data: .dw $0000,$0001,$0002,$0003,$0004,
4936   2456 02 00 03 00 
4936   245A 04 00 
4937   245C 00 00 00 00 _gca2_data: .fill 25, 0
4937   2460 00 00 00 00 
4937   2464 00 00 00 00 
4937   2468 00 00 00 00 
4937   246C 00 00 00 00 
4937   2470 00 00 00 00 
4937   2474 00 
4938   2475 00 00 00 00 _gia2_data: .fill 50, 0
4938   2479 00 00 00 00 
4938   247D 00 00 00 00 
4938   2481 00 00 00 00 
4938   2485 00 00 00 00 
4938   2489 00 00 00 00 
4938   248D 00 00 00 00 
4938   2491 00 00 00 00 
4938   2495 00 00 00 00 
4938   2499 00 00 00 00 
4938   249D 00 00 00 00 
4938   24A1 00 00 00 00 
4938   24A5 00 00 
4939   24A7 00 00 00 00 _test6_struct_data: .fill 18, 0
4939   24AB 00 00 00 00 
4939   24AF 00 00 00 00 
4939   24B3 00 00 00 00 
4939   24B7 00 00 
4940   24B9 00 00 00 00 _test7_struct_data: .fill 36, 0
4940   24BD 00 00 00 00 
4940   24C1 00 00 00 00 
4940   24C5 00 00 00 00 
4940   24C9 00 00 00 00 
4940   24CD 00 00 00 00 
4940   24D1 00 00 00 00 
4940   24D5 00 00 00 00 
4940   24D9 00 00 00 00 
4941   24DD 54 65 73 74 _s0: .db "Test %d, Result: %d\n", 0
4941   24E1 20 25 64 2C 
4941   24E5 20 52 65 73 
4941   24E9 75 6C 74 3A 
4941   24ED 20 25 64 0A 
4941   24F1 00 
4942   24F2 55 6E 65 78 _s1: .db "Unexpected format in printf.", 0
4942   24F6 70 65 63 74 
4942   24FA 65 64 20 66 
4942   24FE 6F 72 6D 61 
4942   2502 74 20 69 6E 
4942   2506 20 70 72 69 
4942   250A 6E 74 66 2E 
4942   250E 00 
4943   250F 45 72 72 6F _s2: .db "Error: Unknown argument type.\n", 0
4943   2513 72 3A 20 55 
4943   2517 6E 6B 6E 6F 
4943   251B 77 6E 20 61 
4943   251F 72 67 75 6D 
4943   2523 65 6E 74 20 
4943   2527 74 79 70 65 
4943   252B 2E 0A 00 
4944   252E             
4945   252E 30 25       _heap_top: .dw _heap
4946   2530 00          _heap: .db 0
4947   2531             ; --- END DATA SEGMENT
4948   2531             
4949   2531             .end
tasm: Number of errors = 0
