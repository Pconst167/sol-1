0001   0000             ; --- FILENAME: programs/wireworld.c
0002   0000             ; --- DATE:     04-07-2025 at 00:37:38
0003   0000             .include "lib/asm/kernel.exp"
0001+  0000             fdc_al_restore   .EQU  $0000
0002+  0000             fdc_al_step      .EQU  $0001
0003+  0000             fdc_al_step_in   .EQU  $0002
0004+  0000             fdc_al_step_out  .EQU  $0003
0005+  0000             fdc_al_seek      .EQU  $0004
0006+  0000             fdc_al_format_128 .EQU  $0005
0007+  0000             fdc_al_format_512 .EQU  $0006
0008+  0000             fdc_al_read_addr .EQU  $0007
0009+  0000             fdc_al_read_track .EQU  $0008
0010+  0000             fdc_al_read_sect .EQU  $0009
0011+  0000             fdc_al_write_sect .EQU  $000a
0012+  0000             fdc_al_force_int .EQU  $000b
0013+  0000             fdc_al_status0   .EQU  $000c
0014+  0000             fdc_al_status1   .EQU  $000d
0015+  0000             noname._fdc_config .EQU  $ffc0
0016+  0000             noname._fdc_status_0 .EQU  $ffc1
0017+  0000             noname._fdc_stat_cmd .EQU  $ffc8
0018+  0000             sys_break        .EQU  $0000
0019+  0000             sys_rtc          .EQU  $0001
0020+  0000             sys_ide          .EQU  $0002
0021+  0000             sys_io           .EQU  $0003
0022+  0000             sys_filesystem   .EQU  $0004
0023+  0000             sys_create_proc  .EQU  $0005
0024+  0000             sys_list_proc    .EQU  $0006
0025+  0000             sys_datetime     .EQU  $0007
0026+  0000             sys_reboot       .EQU  $0008
0027+  0000             sys_pause_proc   .EQU  $0009
0028+  0000             sys_resume_proc  .EQU  $000a
0029+  0000             sys_terminate_proc .EQU  $000b
0030+  0000             sys_system       .EQU  $000c
0031+  0000             sys_fdc          .EQU  $000d
0032+  0000             text_org         .EQU  $0400
0004   0000             .include "lib/asm/bios.exp"
0001+  0000             bios_reset_vector .equ  $01c0
0002+  0000             ide_buffer       .equ  $8204
0003+  0000             boot_origin      .equ  $8004
0004+  0000             bios_uart        .equ  $0002
0005+  0000             bios_ide         .equ  $0003
0005   0000             
0006   0000             ; --- BEGIN TEXT SEGMENT
0007   0400             .org text_org
0008   0400             main:
0009   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0010   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0011   0408             ; int i; 
0012   0408 52 02 00      sub sp, 2
0013   040B             ; grid[5][5] = CONDUCTOR; 
0014   040B 3B 17 0C      mov d, _grid_data ; $grid
0015   040E D7            push a
0016   040F DA            push d
0017   0410 FD 2E 05 00   mov32 cb, $00000005
0017   0414 00 00 
0018   0416 E7            pop d
0019   0417 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0020   041B DA            push d
0021   041C FD 2E 05 00   mov32 cb, $00000005
0021   0420 00 00 
0022   0422 E7            pop d
0023   0423 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0024   0427 E4            pop a
0025   0428 DA            push d
0026   0429 FD 2E 01 00   mov32 cb, $1 ; enum element: CONDUCTOR
0026   042D 00 00 
0027   042F E7            pop d
0028   0430 FD 43         mov [d], b
0029   0432             ; grid[6][5] = ELECTRON_HEAD; 
0030   0432 3B 17 0C      mov d, _grid_data ; $grid
0031   0435 D7            push a
0032   0436 DA            push d
0033   0437 FD 2E 06 00   mov32 cb, $00000006
0033   043B 00 00 
0034   043D E7            pop d
0035   043E FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0036   0442 DA            push d
0037   0443 FD 2E 05 00   mov32 cb, $00000005
0037   0447 00 00 
0038   0449 E7            pop d
0039   044A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0040   044E E4            pop a
0041   044F DA            push d
0042   0450 FD 2E 02 00   mov32 cb, $2 ; enum element: ELECTRON_HEAD
0042   0454 00 00 
0043   0456 E7            pop d
0044   0457 FD 43         mov [d], b
0045   0459             ; grid[7][5] = CONDUCTOR; 
0046   0459 3B 17 0C      mov d, _grid_data ; $grid
0047   045C D7            push a
0048   045D DA            push d
0049   045E FD 2E 07 00   mov32 cb, $00000007
0049   0462 00 00 
0050   0464 E7            pop d
0051   0465 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0052   0469 DA            push d
0053   046A FD 2E 05 00   mov32 cb, $00000005
0053   046E 00 00 
0054   0470 E7            pop d
0055   0471 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0056   0475 E4            pop a
0057   0476 DA            push d
0058   0477 FD 2E 01 00   mov32 cb, $1 ; enum element: CONDUCTOR
0058   047B 00 00 
0059   047D E7            pop d
0060   047E FD 43         mov [d], b
0061   0480             ; grid[6][6] = ELECTRON_TAIL; 
0062   0480 3B 17 0C      mov d, _grid_data ; $grid
0063   0483 D7            push a
0064   0484 DA            push d
0065   0485 FD 2E 06 00   mov32 cb, $00000006
0065   0489 00 00 
0066   048B E7            pop d
0067   048C FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0068   0490 DA            push d
0069   0491 FD 2E 06 00   mov32 cb, $00000006
0069   0495 00 00 
0070   0497 E7            pop d
0071   0498 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0072   049C E4            pop a
0073   049D DA            push d
0074   049E FD 2E 03 00   mov32 cb, $3 ; enum element: ELECTRON_TAIL
0074   04A2 00 00 
0075   04A4 E7            pop d
0076   04A5 FD 43         mov [d], b
0077   04A7             ; grid[6][7] = CONDUCTOR; 
0078   04A7 3B 17 0C      mov d, _grid_data ; $grid
0079   04AA D7            push a
0080   04AB DA            push d
0081   04AC FD 2E 06 00   mov32 cb, $00000006
0081   04B0 00 00 
0082   04B2 E7            pop d
0083   04B3 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0084   04B7 DA            push d
0085   04B8 FD 2E 07 00   mov32 cb, $00000007
0085   04BC 00 00 
0086   04BE E7            pop d
0087   04BF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0088   04C3 E4            pop a
0089   04C4 DA            push d
0090   04C5 FD 2E 01 00   mov32 cb, $1 ; enum element: CONDUCTOR
0090   04C9 00 00 
0091   04CB E7            pop d
0092   04CC FD 43         mov [d], b
0093   04CE             ; grid[5][10] = CONDUCTOR; 
0094   04CE 3B 17 0C      mov d, _grid_data ; $grid
0095   04D1 D7            push a
0096   04D2 DA            push d
0097   04D3 FD 2E 05 00   mov32 cb, $00000005
0097   04D7 00 00 
0098   04D9 E7            pop d
0099   04DA FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0100   04DE DA            push d
0101   04DF FD 2E 0A 00   mov32 cb, $0000000a
0101   04E3 00 00 
0102   04E5 E7            pop d
0103   04E6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0104   04EA E4            pop a
0105   04EB DA            push d
0106   04EC FD 2E 01 00   mov32 cb, $1 ; enum element: CONDUCTOR
0106   04F0 00 00 
0107   04F2 E7            pop d
0108   04F3 FD 43         mov [d], b
0109   04F5             ; grid[6][10] = ELECTRON_HEAD; 
0110   04F5 3B 17 0C      mov d, _grid_data ; $grid
0111   04F8 D7            push a
0112   04F9 DA            push d
0113   04FA FD 2E 06 00   mov32 cb, $00000006
0113   04FE 00 00 
0114   0500 E7            pop d
0115   0501 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0116   0505 DA            push d
0117   0506 FD 2E 0A 00   mov32 cb, $0000000a
0117   050A 00 00 
0118   050C E7            pop d
0119   050D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0120   0511 E4            pop a
0121   0512 DA            push d
0122   0513 FD 2E 02 00   mov32 cb, $2 ; enum element: ELECTRON_HEAD
0122   0517 00 00 
0123   0519 E7            pop d
0124   051A FD 43         mov [d], b
0125   051C             ; grid[7][10] = CONDUCTOR; 
0126   051C 3B 17 0C      mov d, _grid_data ; $grid
0127   051F D7            push a
0128   0520 DA            push d
0129   0521 FD 2E 07 00   mov32 cb, $00000007
0129   0525 00 00 
0130   0527 E7            pop d
0131   0528 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0132   052C DA            push d
0133   052D FD 2E 0A 00   mov32 cb, $0000000a
0133   0531 00 00 
0134   0533 E7            pop d
0135   0534 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0136   0538 E4            pop a
0137   0539 DA            push d
0138   053A FD 2E 01 00   mov32 cb, $1 ; enum element: CONDUCTOR
0138   053E 00 00 
0139   0540 E7            pop d
0140   0541 FD 43         mov [d], b
0141   0543             ; grid[6][11] = ELECTRON_TAIL; 
0142   0543 3B 17 0C      mov d, _grid_data ; $grid
0143   0546 D7            push a
0144   0547 DA            push d
0145   0548 FD 2E 06 00   mov32 cb, $00000006
0145   054C 00 00 
0146   054E E7            pop d
0147   054F FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0148   0553 DA            push d
0149   0554 FD 2E 0B 00   mov32 cb, $0000000b
0149   0558 00 00 
0150   055A E7            pop d
0151   055B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0152   055F E4            pop a
0153   0560 DA            push d
0154   0561 FD 2E 03 00   mov32 cb, $3 ; enum element: ELECTRON_TAIL
0154   0565 00 00 
0155   0567 E7            pop d
0156   0568 FD 43         mov [d], b
0157   056A             ; grid[6][12] = CONDUCTOR; 
0158   056A 3B 17 0C      mov d, _grid_data ; $grid
0159   056D D7            push a
0160   056E DA            push d
0161   056F FD 2E 06 00   mov32 cb, $00000006
0161   0573 00 00 
0162   0575 E7            pop d
0163   0576 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0164   057A DA            push d
0165   057B FD 2E 0C 00   mov32 cb, $0000000c
0165   057F 00 00 
0166   0581 E7            pop d
0167   0582 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0168   0586 E4            pop a
0169   0587 DA            push d
0170   0588 FD 2E 01 00   mov32 cb, $1 ; enum element: CONDUCTOR
0170   058C 00 00 
0171   058E E7            pop d
0172   058F FD 43         mov [d], b
0173   0591             ; for (i = 8; i <= 14; i++) { 
0174   0591             _for1_init:
0175   0591 FA FF FF      lea d, [bp + -1] ; $i
0176   0594 DA            push d
0177   0595 FD 2E 08 00   mov32 cb, $00000008
0177   0599 00 00 
0178   059B E7            pop d
0179   059C FD 43         mov [d], b
0180   059E             _for1_cond:
0181   059E FA FF FF      lea d, [bp + -1] ; $i
0182   05A1 2A            mov b, [d]
0183   05A2 38 00 00      mov c, 0
0184   05A5             ; --- START RELATIONAL
0185   05A5 D7            push a
0186   05A6 11            mov a, b
0187   05A7 FD 2E 0E 00   mov32 cb, $0000000e
0187   05AB 00 00 
0188   05AD B0            cmp a, b
0189   05AE FD 74         sle ; <= (signed)
0190   05B0 E4            pop a
0191   05B1             ; --- END RELATIONAL
0192   05B1 C0 00 00      cmp b, 0
0193   05B4 C6 F2 05      je _for1_exit
0194   05B7             _for1_block:
0195   05B7             ; grid[7][i] = CONDUCTOR; 
0196   05B7 3B 17 0C      mov d, _grid_data ; $grid
0197   05BA D7            push a
0198   05BB DA            push d
0199   05BC FD 2E 07 00   mov32 cb, $00000007
0199   05C0 00 00 
0200   05C2 E7            pop d
0201   05C3 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0202   05C7 DA            push d
0203   05C8 FA FF FF      lea d, [bp + -1] ; $i
0204   05CB 2A            mov b, [d]
0205   05CC 38 00 00      mov c, 0
0206   05CF E7            pop d
0207   05D0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0208   05D4 E4            pop a
0209   05D5 DA            push d
0210   05D6 FD 2E 01 00   mov32 cb, $1 ; enum element: CONDUCTOR
0210   05DA 00 00 
0211   05DC E7            pop d
0212   05DD FD 43         mov [d], b
0213   05DF             _for1_update:
0214   05DF FA FF FF      lea d, [bp + -1] ; $i
0215   05E2 2A            mov b, [d]
0216   05E3 38 00 00      mov c, 0
0217   05E6 11            mov a, b
0218   05E7 FD 77         inc b
0219   05E9 FA FF FF      lea d, [bp + -1] ; $i
0220   05EC FD 43         mov [d], b
0221   05EE 27            mov b, a
0222   05EF 0A 9E 05      jmp _for1_cond
0223   05F2             _for1_exit:
0224   05F2             ; grid[7][15] = CONDUCTOR; 
0225   05F2 3B 17 0C      mov d, _grid_data ; $grid
0226   05F5 D7            push a
0227   05F6 DA            push d
0228   05F7 FD 2E 07 00   mov32 cb, $00000007
0228   05FB 00 00 
0229   05FD E7            pop d
0230   05FE FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0231   0602 DA            push d
0232   0603 FD 2E 0F 00   mov32 cb, $0000000f
0232   0607 00 00 
0233   0609 E7            pop d
0234   060A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0235   060E E4            pop a
0236   060F DA            push d
0237   0610 FD 2E 01 00   mov32 cb, $1 ; enum element: CONDUCTOR
0237   0614 00 00 
0238   0616 E7            pop d
0239   0617 FD 43         mov [d], b
0240   0619             ; grid[6][15] = ELECTRON_TAIL; 
0241   0619 3B 17 0C      mov d, _grid_data ; $grid
0242   061C D7            push a
0243   061D DA            push d
0244   061E FD 2E 06 00   mov32 cb, $00000006
0244   0622 00 00 
0245   0624 E7            pop d
0246   0625 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0247   0629 DA            push d
0248   062A FD 2E 0F 00   mov32 cb, $0000000f
0248   062E 00 00 
0249   0630 E7            pop d
0250   0631 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0251   0635 E4            pop a
0252   0636 DA            push d
0253   0637 FD 2E 03 00   mov32 cb, $3 ; enum element: ELECTRON_TAIL
0253   063B 00 00 
0254   063D E7            pop d
0255   063E FD 43         mov [d], b
0256   0640             ; grid[8][15] = ELECTRON_TAIL; 
0257   0640 3B 17 0C      mov d, _grid_data ; $grid
0258   0643 D7            push a
0259   0644 DA            push d
0260   0645 FD 2E 08 00   mov32 cb, $00000008
0260   0649 00 00 
0261   064B E7            pop d
0262   064C FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0263   0650 DA            push d
0264   0651 FD 2E 0F 00   mov32 cb, $0000000f
0264   0655 00 00 
0265   0657 E7            pop d
0266   0658 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0267   065C E4            pop a
0268   065D DA            push d
0269   065E FD 2E 03 00   mov32 cb, $3 ; enum element: ELECTRON_TAIL
0269   0662 00 00 
0270   0664 E7            pop d
0271   0665 FD 43         mov [d], b
0272   0667             ; grid[6][16] = CONDUCTOR; 
0273   0667 3B 17 0C      mov d, _grid_data ; $grid
0274   066A D7            push a
0275   066B DA            push d
0276   066C FD 2E 06 00   mov32 cb, $00000006
0276   0670 00 00 
0277   0672 E7            pop d
0278   0673 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0279   0677 DA            push d
0280   0678 FD 2E 10 00   mov32 cb, $00000010
0280   067C 00 00 
0281   067E E7            pop d
0282   067F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0283   0683 E4            pop a
0284   0684 DA            push d
0285   0685 FD 2E 01 00   mov32 cb, $1 ; enum element: CONDUCTOR
0285   0689 00 00 
0286   068B E7            pop d
0287   068C FD 43         mov [d], b
0288   068E             ; grid[8][16] = CONDUCTOR; 
0289   068E 3B 17 0C      mov d, _grid_data ; $grid
0290   0691 D7            push a
0291   0692 DA            push d
0292   0693 FD 2E 08 00   mov32 cb, $00000008
0292   0697 00 00 
0293   0699 E7            pop d
0294   069A FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0295   069E DA            push d
0296   069F FD 2E 10 00   mov32 cb, $00000010
0296   06A3 00 00 
0297   06A5 E7            pop d
0298   06A6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0299   06AA E4            pop a
0300   06AB DA            push d
0301   06AC FD 2E 01 00   mov32 cb, $1 ; enum element: CONDUCTOR
0301   06B0 00 00 
0302   06B2 E7            pop d
0303   06B3 FD 43         mov [d], b
0304   06B5             ; for (i = 17; i <= 25; i++) { 
0305   06B5             _for2_init:
0306   06B5 FA FF FF      lea d, [bp + -1] ; $i
0307   06B8 DA            push d
0308   06B9 FD 2E 11 00   mov32 cb, $00000011
0308   06BD 00 00 
0309   06BF E7            pop d
0310   06C0 FD 43         mov [d], b
0311   06C2             _for2_cond:
0312   06C2 FA FF FF      lea d, [bp + -1] ; $i
0313   06C5 2A            mov b, [d]
0314   06C6 38 00 00      mov c, 0
0315   06C9             ; --- START RELATIONAL
0316   06C9 D7            push a
0317   06CA 11            mov a, b
0318   06CB FD 2E 19 00   mov32 cb, $00000019
0318   06CF 00 00 
0319   06D1 B0            cmp a, b
0320   06D2 FD 74         sle ; <= (signed)
0321   06D4 E4            pop a
0322   06D5             ; --- END RELATIONAL
0323   06D5 C0 00 00      cmp b, 0
0324   06D8 C6 16 07      je _for2_exit
0325   06DB             _for2_block:
0326   06DB             ; grid[7][i] = CONDUCTOR; 
0327   06DB 3B 17 0C      mov d, _grid_data ; $grid
0328   06DE D7            push a
0329   06DF DA            push d
0330   06E0 FD 2E 07 00   mov32 cb, $00000007
0330   06E4 00 00 
0331   06E6 E7            pop d
0332   06E7 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0333   06EB DA            push d
0334   06EC FA FF FF      lea d, [bp + -1] ; $i
0335   06EF 2A            mov b, [d]
0336   06F0 38 00 00      mov c, 0
0337   06F3 E7            pop d
0338   06F4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0339   06F8 E4            pop a
0340   06F9 DA            push d
0341   06FA FD 2E 01 00   mov32 cb, $1 ; enum element: CONDUCTOR
0341   06FE 00 00 
0342   0700 E7            pop d
0343   0701 FD 43         mov [d], b
0344   0703             _for2_update:
0345   0703 FA FF FF      lea d, [bp + -1] ; $i
0346   0706 2A            mov b, [d]
0347   0707 38 00 00      mov c, 0
0348   070A 11            mov a, b
0349   070B FD 77         inc b
0350   070D FA FF FF      lea d, [bp + -1] ; $i
0351   0710 FD 43         mov [d], b
0352   0712 27            mov b, a
0353   0713 0A C2 06      jmp _for2_cond
0354   0716             _for2_exit:
0355   0716             ; while (1) { 
0356   0716             _while3_cond:
0357   0716 FD 2E 01 00   mov32 cb, $00000001
0357   071A 00 00 
0358   071C C0 00 00      cmp b, 0
0359   071F C6 2B 07      je _while3_exit
0360   0722             _while3_block:
0361   0722             ; print_grid(); 
0362   0722             ; --- START FUNCTION CALL
0363   0722 07 34 07      call print_grid
0364   0725             ; iterate(); 
0365   0725             ; --- START FUNCTION CALL
0366   0725 07 3C 08      call iterate
0367   0728 0A 16 07      jmp _while3_cond
0368   072B             _while3_exit:
0369   072B             ; return 0; 
0370   072B FD 2E 00 00   mov32 cb, $00000000
0370   072F 00 00 
0371   0731 F9            leave
0372   0732 05 0B         syscall sys_terminate_proc
0373   0734             
0374   0734             print_grid:
0375   0734 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0376   0737             ; for (y = 0; y < 20; ++y) { 
0377   0737             _for4_init:
0378   0737 3B 99 18      mov d, _y ; $y
0379   073A DA            push d
0380   073B FD 2E 00 00   mov32 cb, $00000000
0380   073F 00 00 
0381   0741 E7            pop d
0382   0742 FD 43         mov [d], b
0383   0744             _for4_cond:
0384   0744 3B 99 18      mov d, _y ; $y
0385   0747 2A            mov b, [d]
0386   0748 38 00 00      mov c, 0
0387   074B             ; --- START RELATIONAL
0388   074B D7            push a
0389   074C 11            mov a, b
0390   074D FD 2E 14 00   mov32 cb, $00000014
0390   0751 00 00 
0391   0753 B0            cmp a, b
0392   0754 FD 73         slt ; < (signed)
0393   0756 E4            pop a
0394   0757             ; --- END RELATIONAL
0395   0757 C0 00 00      cmp b, 0
0396   075A C6 3A 08      je _for4_exit
0397   075D             _for4_block:
0398   075D             ; for (x = 0; x < 40; ++x) { 
0399   075D             _for5_init:
0400   075D 3B 97 18      mov d, _x ; $x
0401   0760 DA            push d
0402   0761 FD 2E 00 00   mov32 cb, $00000000
0402   0765 00 00 
0403   0767 E7            pop d
0404   0768 FD 43         mov [d], b
0405   076A             _for5_cond:
0406   076A 3B 97 18      mov d, _x ; $x
0407   076D 2A            mov b, [d]
0408   076E 38 00 00      mov c, 0
0409   0771             ; --- START RELATIONAL
0410   0771 D7            push a
0411   0772 11            mov a, b
0412   0773 FD 2E 28 00   mov32 cb, $00000028
0412   0777 00 00 
0413   0779 B0            cmp a, b
0414   077A FD 73         slt ; < (signed)
0415   077C E4            pop a
0416   077D             ; --- END RELATIONAL
0417   077D C0 00 00      cmp b, 0
0418   0780 C6 1F 08      je _for5_exit
0419   0783             _for5_block:
0420   0783             ; switch (grid[y][x]) { 
0421   0783             _switch6_expr:
0422   0783 3B 17 0C      mov d, _grid_data ; $grid
0423   0786 D7            push a
0424   0787 DA            push d
0425   0788 3B 99 18      mov d, _y ; $y
0426   078B 2A            mov b, [d]
0427   078C 38 00 00      mov c, 0
0428   078F E7            pop d
0429   0790 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0430   0794 DA            push d
0431   0795 3B 97 18      mov d, _x ; $x
0432   0798 2A            mov b, [d]
0433   0799 38 00 00      mov c, 0
0434   079C E7            pop d
0435   079D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0436   07A1 E4            pop a
0437   07A2 2A            mov b, [d]
0438   07A3 38 00 00      mov c, 0
0439   07A6             _switch6_comparisons:
0440   07A6 C0 00 00      cmp b, 0
0441   07A9 C6 C1 07      je _switch6_case0
0442   07AC C0 01 00      cmp b, 1
0443   07AF C6 D1 07      je _switch6_case1
0444   07B2 C0 02 00      cmp b, 2
0445   07B5 C6 E1 07      je _switch6_case2
0446   07B8 C0 03 00      cmp b, 3
0447   07BB C6 F1 07      je _switch6_case3
0448   07BE 0A 01 08      jmp _switch6_exit
0449   07C1             _switch6_case0:
0450   07C1             ; c = ' '; break; 
0451   07C1 3B A5 18      mov d, _c ; $c
0452   07C4 DA            push d
0453   07C5 FD 2E 20 00   mov32 cb, $00000020
0453   07C9 00 00 
0454   07CB E7            pop d
0455   07CC FD 3E         mov [d], bl
0456   07CE             ; break; 
0457   07CE 0A 01 08      jmp _switch6_exit ; case break
0458   07D1             _switch6_case1:
0459   07D1             ; c = '*'; break; 
0460   07D1 3B A5 18      mov d, _c ; $c
0461   07D4 DA            push d
0462   07D5 FD 2E 2A 00   mov32 cb, $0000002a
0462   07D9 00 00 
0463   07DB E7            pop d
0464   07DC FD 3E         mov [d], bl
0465   07DE             ; break; 
0466   07DE 0A 01 08      jmp _switch6_exit ; case break
0467   07E1             _switch6_case2:
0468   07E1             ; c = 'H'; break; 
0469   07E1 3B A5 18      mov d, _c ; $c
0470   07E4 DA            push d
0471   07E5 FD 2E 48 00   mov32 cb, $00000048
0471   07E9 00 00 
0472   07EB E7            pop d
0473   07EC FD 3E         mov [d], bl
0474   07EE             ; break; 
0475   07EE 0A 01 08      jmp _switch6_exit ; case break
0476   07F1             _switch6_case3:
0477   07F1             ; c = 'T'; break; 
0478   07F1 3B A5 18      mov d, _c ; $c
0479   07F4 DA            push d
0480   07F5 FD 2E 54 00   mov32 cb, $00000054
0480   07F9 00 00 
0481   07FB E7            pop d
0482   07FC FD 3E         mov [d], bl
0483   07FE             ; break; 
0484   07FE 0A 01 08      jmp _switch6_exit ; case break
0485   0801             _switch6_exit:
0486   0801             ; putchar(c); 
0487   0801             ; --- START FUNCTION CALL
0488   0801 3B A5 18      mov d, _c ; $c
0489   0804 32            mov bl, [d]
0490   0805 A7 00         mov bh, 0
0491   0807 38 00 00      mov c, 0
0492   080A DD            push bl
0493   080B 07 09 0C      call putchar
0494   080E 51 01 00      add sp, 1
0495   0811             ; --- END FUNCTION CALL
0496   0811             _for5_update:
0497   0811 3B 97 18      mov d, _x ; $x
0498   0814 2A            mov b, [d]
0499   0815 FD 77         inc b
0500   0817 3B 97 18      mov d, _x ; $x
0501   081A FD 43         mov [d], b
0502   081C 0A 6A 07      jmp _for5_cond
0503   081F             _for5_exit:
0504   081F             ; putchar('\n'); 
0505   081F             ; --- START FUNCTION CALL
0506   081F FD 2E 0A 00   mov32 cb, $0000000a
0506   0823 00 00 
0507   0825 DD            push bl
0508   0826 07 09 0C      call putchar
0509   0829 51 01 00      add sp, 1
0510   082C             ; --- END FUNCTION CALL
0511   082C             _for4_update:
0512   082C 3B 99 18      mov d, _y ; $y
0513   082F 2A            mov b, [d]
0514   0830 FD 77         inc b
0515   0832 3B 99 18      mov d, _y ; $y
0516   0835 FD 43         mov [d], b
0517   0837 0A 44 07      jmp _for4_cond
0518   083A             _for4_exit:
0519   083A             ; return; 
0520   083A F9            leave
0521   083B 09            ret
0522   083C             
0523   083C             iterate:
0524   083C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0525   083F             ; for (y = 0; y < 20; ++y){ 
0526   083F             _for7_init:
0527   083F 3B 99 18      mov d, _y ; $y
0528   0842 DA            push d
0529   0843 FD 2E 00 00   mov32 cb, $00000000
0529   0847 00 00 
0530   0849 E7            pop d
0531   084A FD 43         mov [d], b
0532   084C             _for7_cond:
0533   084C 3B 99 18      mov d, _y ; $y
0534   084F 2A            mov b, [d]
0535   0850 38 00 00      mov c, 0
0536   0853             ; --- START RELATIONAL
0537   0853 D7            push a
0538   0854 11            mov a, b
0539   0855 FD 2E 14 00   mov32 cb, $00000014
0539   0859 00 00 
0540   085B B0            cmp a, b
0541   085C FD 73         slt ; < (signed)
0542   085E E4            pop a
0543   085F             ; --- END RELATIONAL
0544   085F C0 00 00      cmp b, 0
0545   0862 C6 59 0B      je _for7_exit
0546   0865             _for7_block:
0547   0865             ; for (x = 0; x < 40; ++x){ 
0548   0865             _for8_init:
0549   0865 3B 97 18      mov d, _x ; $x
0550   0868 DA            push d
0551   0869 FD 2E 00 00   mov32 cb, $00000000
0551   086D 00 00 
0552   086F E7            pop d
0553   0870 FD 43         mov [d], b
0554   0872             _for8_cond:
0555   0872 3B 97 18      mov d, _x ; $x
0556   0875 2A            mov b, [d]
0557   0876 38 00 00      mov c, 0
0558   0879             ; --- START RELATIONAL
0559   0879 D7            push a
0560   087A 11            mov a, b
0561   087B FD 2E 28 00   mov32 cb, $00000028
0561   087F 00 00 
0562   0881 B0            cmp a, b
0563   0882 FD 73         slt ; < (signed)
0564   0884 E4            pop a
0565   0885             ; --- END RELATIONAL
0566   0885 C0 00 00      cmp b, 0
0567   0888 C6 4B 0B      je _for8_exit
0568   088B             _for8_block:
0569   088B             ; head_count = 0; 
0570   088B 3B A3 18      mov d, _head_count ; $head_count
0571   088E DA            push d
0572   088F FD 2E 00 00   mov32 cb, $00000000
0572   0893 00 00 
0573   0895 E7            pop d
0574   0896 FD 43         mov [d], b
0575   0898             ; for (dy = -1; dy <= 1; dy++){ 
0576   0898             _for9_init:
0577   0898 3B 9D 18      mov d, _dy ; $dy
0578   089B DA            push d
0579   089C FD 2E FF FF   mov32 cb, $ffffffff
0579   08A0 FF FF 
0580   08A2 E7            pop d
0581   08A3 FD 43         mov [d], b
0582   08A5             _for9_cond:
0583   08A5 3B 9D 18      mov d, _dy ; $dy
0584   08A8 2A            mov b, [d]
0585   08A9 38 00 00      mov c, 0
0586   08AC             ; --- START RELATIONAL
0587   08AC D7            push a
0588   08AD 11            mov a, b
0589   08AE FD 2E 01 00   mov32 cb, $00000001
0589   08B2 00 00 
0590   08B4 B0            cmp a, b
0591   08B5 FD 74         sle ; <= (signed)
0592   08B7 E4            pop a
0593   08B8             ; --- END RELATIONAL
0594   08B8 C0 00 00      cmp b, 0
0595   08BB C6 15 0A      je _for9_exit
0596   08BE             _for9_block:
0597   08BE             ; for (dx = -1; dx <= 1; dx++) { 
0598   08BE             _for10_init:
0599   08BE 3B 9B 18      mov d, _dx ; $dx
0600   08C1 DA            push d
0601   08C2 FD 2E FF FF   mov32 cb, $ffffffff
0601   08C6 FF FF 
0602   08C8 E7            pop d
0603   08C9 FD 43         mov [d], b
0604   08CB             _for10_cond:
0605   08CB 3B 9B 18      mov d, _dx ; $dx
0606   08CE 2A            mov b, [d]
0607   08CF 38 00 00      mov c, 0
0608   08D2             ; --- START RELATIONAL
0609   08D2 D7            push a
0610   08D3 11            mov a, b
0611   08D4 FD 2E 01 00   mov32 cb, $00000001
0611   08D8 00 00 
0612   08DA B0            cmp a, b
0613   08DB FD 74         sle ; <= (signed)
0614   08DD E4            pop a
0615   08DE             ; --- END RELATIONAL
0616   08DE C0 00 00      cmp b, 0
0617   08E1 C6 02 0A      je _for10_exit
0618   08E4             _for10_block:
0619   08E4             ; if (dx == 0 && dy == 0) continue; 
0620   08E4             _if11_cond:
0621   08E4 3B 9B 18      mov d, _dx ; $dx
0622   08E7 2A            mov b, [d]
0623   08E8 38 00 00      mov c, 0
0624   08EB             ; --- START RELATIONAL
0625   08EB D7            push a
0626   08EC 11            mov a, b
0627   08ED FD 2E 00 00   mov32 cb, $00000000
0627   08F1 00 00 
0628   08F3 B0            cmp a, b
0629   08F4 FD 71         seq ; ==
0630   08F6 E4            pop a
0631   08F7             ; --- END RELATIONAL
0632   08F7             ; --- START LOGICAL AND
0633   08F7 D7            push a
0634   08F8 11            mov a, b
0635   08F9 3B 9D 18      mov d, _dy ; $dy
0636   08FC 2A            mov b, [d]
0637   08FD 38 00 00      mov c, 0
0638   0900             ; --- START RELATIONAL
0639   0900 D7            push a
0640   0901 11            mov a, b
0641   0902 FD 2E 00 00   mov32 cb, $00000000
0641   0906 00 00 
0642   0908 B0            cmp a, b
0643   0909 FD 71         seq ; ==
0644   090B E4            pop a
0645   090C             ; --- END RELATIONAL
0646   090C FD A7         sand a, b
0647   090E E4            pop a
0648   090F             ; --- END LOGICAL AND
0649   090F C0 00 00      cmp b, 0
0650   0912 C6 1B 09      je _if11_exit
0651   0915             _if11_TRUE:
0652   0915             ; continue; 
0653   0915 0A EF 09      jmp _for10_update ; for continue
0654   0918 0A 1B 09      jmp _if11_exit
0655   091B             _if11_exit:
0656   091B             ; nx = x + dx; 
0657   091B 3B 9F 18      mov d, _nx ; $nx
0658   091E DA            push d
0659   091F 3B 97 18      mov d, _x ; $x
0660   0922 2A            mov b, [d]
0661   0923 38 00 00      mov c, 0
0662   0926             ; --- START TERMS
0663   0926 D7            push a
0664   0927 11            mov a, b
0665   0928 3B 9B 18      mov d, _dx ; $dx
0666   092B 2A            mov b, [d]
0667   092C 38 00 00      mov c, 0
0668   092F 56            add b, a
0669   0930 E4            pop a
0670   0931             ; --- END TERMS
0671   0931 E7            pop d
0672   0932 FD 43         mov [d], b
0673   0934             ; ny = y + dy; 
0674   0934 3B A1 18      mov d, _ny ; $ny
0675   0937 DA            push d
0676   0938 3B 99 18      mov d, _y ; $y
0677   093B 2A            mov b, [d]
0678   093C 38 00 00      mov c, 0
0679   093F             ; --- START TERMS
0680   093F D7            push a
0681   0940 11            mov a, b
0682   0941 3B 9D 18      mov d, _dy ; $dy
0683   0944 2A            mov b, [d]
0684   0945 38 00 00      mov c, 0
0685   0948 56            add b, a
0686   0949 E4            pop a
0687   094A             ; --- END TERMS
0688   094A E7            pop d
0689   094B FD 43         mov [d], b
0690   094D             ; if (nx >= 0 && nx < 40 && ny >= 0 && ny < 20 && grid[ny][nx] == ELECTRON_HEAD){ 
0691   094D             _if12_cond:
0692   094D 3B 9F 18      mov d, _nx ; $nx
0693   0950 2A            mov b, [d]
0694   0951 38 00 00      mov c, 0
0695   0954             ; --- START RELATIONAL
0696   0954 D7            push a
0697   0955 11            mov a, b
0698   0956 FD 2E 00 00   mov32 cb, $00000000
0698   095A 00 00 
0699   095C B0            cmp a, b
0700   095D FD 80         sge ; >=
0701   095F E4            pop a
0702   0960             ; --- END RELATIONAL
0703   0960             ; --- START LOGICAL AND
0704   0960 D7            push a
0705   0961 11            mov a, b
0706   0962 3B 9F 18      mov d, _nx ; $nx
0707   0965 2A            mov b, [d]
0708   0966 38 00 00      mov c, 0
0709   0969             ; --- START RELATIONAL
0710   0969 D7            push a
0711   096A 11            mov a, b
0712   096B FD 2E 28 00   mov32 cb, $00000028
0712   096F 00 00 
0713   0971 B0            cmp a, b
0714   0972 FD 73         slt ; < (signed)
0715   0974 E4            pop a
0716   0975             ; --- END RELATIONAL
0717   0975 FD A7         sand a, b
0718   0977 11            mov a, b
0719   0978 3B A1 18      mov d, _ny ; $ny
0720   097B 2A            mov b, [d]
0721   097C 38 00 00      mov c, 0
0722   097F             ; --- START RELATIONAL
0723   097F D7            push a
0724   0980 11            mov a, b
0725   0981 FD 2E 00 00   mov32 cb, $00000000
0725   0985 00 00 
0726   0987 B0            cmp a, b
0727   0988 FD 80         sge ; >=
0728   098A E4            pop a
0729   098B             ; --- END RELATIONAL
0730   098B FD A7         sand a, b
0731   098D 11            mov a, b
0732   098E 3B A1 18      mov d, _ny ; $ny
0733   0991 2A            mov b, [d]
0734   0992 38 00 00      mov c, 0
0735   0995             ; --- START RELATIONAL
0736   0995 D7            push a
0737   0996 11            mov a, b
0738   0997 FD 2E 14 00   mov32 cb, $00000014
0738   099B 00 00 
0739   099D B0            cmp a, b
0740   099E FD 73         slt ; < (signed)
0741   09A0 E4            pop a
0742   09A1             ; --- END RELATIONAL
0743   09A1 FD A7         sand a, b
0744   09A3 11            mov a, b
0745   09A4 3B 17 0C      mov d, _grid_data ; $grid
0746   09A7 D7            push a
0747   09A8 DA            push d
0748   09A9 3B A1 18      mov d, _ny ; $ny
0749   09AC 2A            mov b, [d]
0750   09AD 38 00 00      mov c, 0
0751   09B0 E7            pop d
0752   09B1 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0753   09B5 DA            push d
0754   09B6 3B 9F 18      mov d, _nx ; $nx
0755   09B9 2A            mov b, [d]
0756   09BA 38 00 00      mov c, 0
0757   09BD E7            pop d
0758   09BE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0759   09C2 E4            pop a
0760   09C3 2A            mov b, [d]
0761   09C4 38 00 00      mov c, 0
0762   09C7             ; --- START RELATIONAL
0763   09C7 D7            push a
0764   09C8 11            mov a, b
0765   09C9 FD 2E 02 00   mov32 cb, $2 ; enum element: ELECTRON_HEAD
0765   09CD 00 00 
0766   09CF B0            cmp a, b
0767   09D0 FD 71         seq ; ==
0768   09D2 E4            pop a
0769   09D3             ; --- END RELATIONAL
0770   09D3 FD A7         sand a, b
0771   09D5 E4            pop a
0772   09D6             ; --- END LOGICAL AND
0773   09D6 C0 00 00      cmp b, 0
0774   09D9 C6 EF 09      je _if12_exit
0775   09DC             _if12_TRUE:
0776   09DC             ; head_count++; 
0777   09DC 3B A3 18      mov d, _head_count ; $head_count
0778   09DF 2A            mov b, [d]
0779   09E0 38 00 00      mov c, 0
0780   09E3 11            mov a, b
0781   09E4 FD 77         inc b
0782   09E6 3B A3 18      mov d, _head_count ; $head_count
0783   09E9 FD 43         mov [d], b
0784   09EB 27            mov b, a
0785   09EC 0A EF 09      jmp _if12_exit
0786   09EF             _if12_exit:
0787   09EF             _for10_update:
0788   09EF 3B 9B 18      mov d, _dx ; $dx
0789   09F2 2A            mov b, [d]
0790   09F3 38 00 00      mov c, 0
0791   09F6 11            mov a, b
0792   09F7 FD 77         inc b
0793   09F9 3B 9B 18      mov d, _dx ; $dx
0794   09FC FD 43         mov [d], b
0795   09FE 27            mov b, a
0796   09FF 0A CB 08      jmp _for10_cond
0797   0A02             _for10_exit:
0798   0A02             _for9_update:
0799   0A02 3B 9D 18      mov d, _dy ; $dy
0800   0A05 2A            mov b, [d]
0801   0A06 38 00 00      mov c, 0
0802   0A09 11            mov a, b
0803   0A0A FD 77         inc b
0804   0A0C 3B 9D 18      mov d, _dy ; $dy
0805   0A0F FD 43         mov [d], b
0806   0A11 27            mov b, a
0807   0A12 0A A5 08      jmp _for9_cond
0808   0A15             _for9_exit:
0809   0A15             ; switch (grid[y][x]) { 
0810   0A15             _switch13_expr:
0811   0A15 3B 17 0C      mov d, _grid_data ; $grid
0812   0A18 D7            push a
0813   0A19 DA            push d
0814   0A1A 3B 99 18      mov d, _y ; $y
0815   0A1D 2A            mov b, [d]
0816   0A1E 38 00 00      mov c, 0
0817   0A21 E7            pop d
0818   0A22 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0819   0A26 DA            push d
0820   0A27 3B 97 18      mov d, _x ; $x
0821   0A2A 2A            mov b, [d]
0822   0A2B 38 00 00      mov c, 0
0823   0A2E E7            pop d
0824   0A2F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0825   0A33 E4            pop a
0826   0A34 2A            mov b, [d]
0827   0A35 38 00 00      mov c, 0
0828   0A38             _switch13_comparisons:
0829   0A38 C0 00 00      cmp b, 0
0830   0A3B C6 53 0A      je _switch13_case0
0831   0A3E C0 01 00      cmp b, 1
0832   0A41 C6 7F 0A      je _switch13_case1
0833   0A44 C0 02 00      cmp b, 2
0834   0A47 C6 E5 0A      je _switch13_case2
0835   0A4A C0 03 00      cmp b, 3
0836   0A4D C6 11 0B      je _switch13_case3
0837   0A50 0A 3D 0B      jmp _switch13_exit
0838   0A53             _switch13_case0:
0839   0A53             ; new_grid[y][x] = EMPTY; break; 
0840   0A53 3B 57 12      mov d, _new_grid_data ; $new_grid
0841   0A56 D7            push a
0842   0A57 DA            push d
0843   0A58 3B 99 18      mov d, _y ; $y
0844   0A5B 2A            mov b, [d]
0845   0A5C 38 00 00      mov c, 0
0846   0A5F E7            pop d
0847   0A60 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0848   0A64 DA            push d
0849   0A65 3B 97 18      mov d, _x ; $x
0850   0A68 2A            mov b, [d]
0851   0A69 38 00 00      mov c, 0
0852   0A6C E7            pop d
0853   0A6D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0854   0A71 E4            pop a
0855   0A72 DA            push d
0856   0A73 FD 2E 00 00   mov32 cb, $0 ; enum element: EMPTY
0856   0A77 00 00 
0857   0A79 E7            pop d
0858   0A7A FD 43         mov [d], b
0859   0A7C             ; break; 
0860   0A7C 0A 3D 0B      jmp _switch13_exit ; case break
0861   0A7F             _switch13_case1:
0862   0A7F             ; new_grid[y][x] = (head_count == 1 || head_count == 2) ? ELECTRON_HEAD : CONDUCTOR; break; 
0863   0A7F 3B 57 12      mov d, _new_grid_data ; $new_grid
0864   0A82 D7            push a
0865   0A83 DA            push d
0866   0A84 3B 99 18      mov d, _y ; $y
0867   0A87 2A            mov b, [d]
0868   0A88 38 00 00      mov c, 0
0869   0A8B E7            pop d
0870   0A8C FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0871   0A90 DA            push d
0872   0A91 3B 97 18      mov d, _x ; $x
0873   0A94 2A            mov b, [d]
0874   0A95 38 00 00      mov c, 0
0875   0A98 E7            pop d
0876   0A99 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0877   0A9D E4            pop a
0878   0A9E DA            push d
0879   0A9F             _ternary14_cond:
0880   0A9F 3B A3 18      mov d, _head_count ; $head_count
0881   0AA2 2A            mov b, [d]
0882   0AA3 38 00 00      mov c, 0
0883   0AA6             ; --- START RELATIONAL
0884   0AA6 D7            push a
0885   0AA7 11            mov a, b
0886   0AA8 FD 2E 01 00   mov32 cb, $00000001
0886   0AAC 00 00 
0887   0AAE B0            cmp a, b
0888   0AAF FD 71         seq ; ==
0889   0AB1 E4            pop a
0890   0AB2             ; --- END RELATIONAL
0891   0AB2             ; --- START LOGICAL OR
0892   0AB2 D7            push a
0893   0AB3 11            mov a, b
0894   0AB4 3B A3 18      mov d, _head_count ; $head_count
0895   0AB7 2A            mov b, [d]
0896   0AB8 38 00 00      mov c, 0
0897   0ABB             ; --- START RELATIONAL
0898   0ABB D7            push a
0899   0ABC 11            mov a, b
0900   0ABD FD 2E 02 00   mov32 cb, $00000002
0900   0AC1 00 00 
0901   0AC3 B0            cmp a, b
0902   0AC4 FD 71         seq ; ==
0903   0AC6 E4            pop a
0904   0AC7             ; --- END RELATIONAL
0905   0AC7 FD A8         sor a, b ; ||
0906   0AC9 E4            pop a
0907   0ACA             ; --- END LOGICAL OR
0908   0ACA C0 00 00      cmp b, 0
0909   0ACD C6 D9 0A      je _ternary14_FALSE
0910   0AD0             _ternary14_TRUE:
0911   0AD0 FD 2E 02 00   mov32 cb, $2 ; enum element: ELECTRON_HEAD
0911   0AD4 00 00 
0912   0AD6 0A DF 0A      jmp _ternary14_exit
0913   0AD9             _ternary14_FALSE:
0914   0AD9 FD 2E 01 00   mov32 cb, $1 ; enum element: CONDUCTOR
0914   0ADD 00 00 
0915   0ADF             _ternary14_exit:
0916   0ADF E7            pop d
0917   0AE0 FD 43         mov [d], b
0918   0AE2             ; break; 
0919   0AE2 0A 3D 0B      jmp _switch13_exit ; case break
0920   0AE5             _switch13_case2:
0921   0AE5             ; new_grid[y][x] = ELECTRON_TAIL; break; 
0922   0AE5 3B 57 12      mov d, _new_grid_data ; $new_grid
0923   0AE8 D7            push a
0924   0AE9 DA            push d
0925   0AEA 3B 99 18      mov d, _y ; $y
0926   0AED 2A            mov b, [d]
0927   0AEE 38 00 00      mov c, 0
0928   0AF1 E7            pop d
0929   0AF2 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0930   0AF6 DA            push d
0931   0AF7 3B 97 18      mov d, _x ; $x
0932   0AFA 2A            mov b, [d]
0933   0AFB 38 00 00      mov c, 0
0934   0AFE E7            pop d
0935   0AFF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0936   0B03 E4            pop a
0937   0B04 DA            push d
0938   0B05 FD 2E 03 00   mov32 cb, $3 ; enum element: ELECTRON_TAIL
0938   0B09 00 00 
0939   0B0B E7            pop d
0940   0B0C FD 43         mov [d], b
0941   0B0E             ; break; 
0942   0B0E 0A 3D 0B      jmp _switch13_exit ; case break
0943   0B11             _switch13_case3:
0944   0B11             ; new_grid[y][x] = CONDUCTOR; break; 
0945   0B11 3B 57 12      mov d, _new_grid_data ; $new_grid
0946   0B14 D7            push a
0947   0B15 DA            push d
0948   0B16 3B 99 18      mov d, _y ; $y
0949   0B19 2A            mov b, [d]
0950   0B1A 38 00 00      mov c, 0
0951   0B1D E7            pop d
0952   0B1E FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0953   0B22 DA            push d
0954   0B23 3B 97 18      mov d, _x ; $x
0955   0B26 2A            mov b, [d]
0956   0B27 38 00 00      mov c, 0
0957   0B2A E7            pop d
0958   0B2B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0959   0B2F E4            pop a
0960   0B30 DA            push d
0961   0B31 FD 2E 01 00   mov32 cb, $1 ; enum element: CONDUCTOR
0961   0B35 00 00 
0962   0B37 E7            pop d
0963   0B38 FD 43         mov [d], b
0964   0B3A             ; break; 
0965   0B3A 0A 3D 0B      jmp _switch13_exit ; case break
0966   0B3D             _switch13_exit:
0967   0B3D             _for8_update:
0968   0B3D 3B 97 18      mov d, _x ; $x
0969   0B40 2A            mov b, [d]
0970   0B41 FD 77         inc b
0971   0B43 3B 97 18      mov d, _x ; $x
0972   0B46 FD 43         mov [d], b
0973   0B48 0A 72 08      jmp _for8_cond
0974   0B4B             _for8_exit:
0975   0B4B             _for7_update:
0976   0B4B 3B 99 18      mov d, _y ; $y
0977   0B4E 2A            mov b, [d]
0978   0B4F FD 77         inc b
0979   0B51 3B 99 18      mov d, _y ; $y
0980   0B54 FD 43         mov [d], b
0981   0B56 0A 4C 08      jmp _for7_cond
0982   0B59             _for7_exit:
0983   0B59             ; for (y = 0; y < 20; ++y) { 
0984   0B59             _for15_init:
0985   0B59 3B 99 18      mov d, _y ; $y
0986   0B5C DA            push d
0987   0B5D FD 2E 00 00   mov32 cb, $00000000
0987   0B61 00 00 
0988   0B63 E7            pop d
0989   0B64 FD 43         mov [d], b
0990   0B66             _for15_cond:
0991   0B66 3B 99 18      mov d, _y ; $y
0992   0B69 2A            mov b, [d]
0993   0B6A 38 00 00      mov c, 0
0994   0B6D             ; --- START RELATIONAL
0995   0B6D D7            push a
0996   0B6E 11            mov a, b
0997   0B6F FD 2E 14 00   mov32 cb, $00000014
0997   0B73 00 00 
0998   0B75 B0            cmp a, b
0999   0B76 FD 73         slt ; < (signed)
1000   0B78 E4            pop a
1001   0B79             ; --- END RELATIONAL
1002   0B79 C0 00 00      cmp b, 0
1003   0B7C C6 07 0C      je _for15_exit
1004   0B7F             _for15_block:
1005   0B7F             ; for (x = 0; x < 40; ++x) { 
1006   0B7F             _for16_init:
1007   0B7F 3B 97 18      mov d, _x ; $x
1008   0B82 DA            push d
1009   0B83 FD 2E 00 00   mov32 cb, $00000000
1009   0B87 00 00 
1010   0B89 E7            pop d
1011   0B8A FD 43         mov [d], b
1012   0B8C             _for16_cond:
1013   0B8C 3B 97 18      mov d, _x ; $x
1014   0B8F 2A            mov b, [d]
1015   0B90 38 00 00      mov c, 0
1016   0B93             ; --- START RELATIONAL
1017   0B93 D7            push a
1018   0B94 11            mov a, b
1019   0B95 FD 2E 28 00   mov32 cb, $00000028
1019   0B99 00 00 
1020   0B9B B0            cmp a, b
1021   0B9C FD 73         slt ; < (signed)
1022   0B9E E4            pop a
1023   0B9F             ; --- END RELATIONAL
1024   0B9F C0 00 00      cmp b, 0
1025   0BA2 C6 F9 0B      je _for16_exit
1026   0BA5             _for16_block:
1027   0BA5             ; grid[y][x] = new_grid[y][x]; 
1028   0BA5 3B 17 0C      mov d, _grid_data ; $grid
1029   0BA8 D7            push a
1030   0BA9 DA            push d
1031   0BAA 3B 99 18      mov d, _y ; $y
1032   0BAD 2A            mov b, [d]
1033   0BAE 38 00 00      mov c, 0
1034   0BB1 E7            pop d
1035   0BB2 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
1036   0BB6 DA            push d
1037   0BB7 3B 97 18      mov d, _x ; $x
1038   0BBA 2A            mov b, [d]
1039   0BBB 38 00 00      mov c, 0
1040   0BBE E7            pop d
1041   0BBF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1042   0BC3 E4            pop a
1043   0BC4 DA            push d
1044   0BC5 3B 57 12      mov d, _new_grid_data ; $new_grid
1045   0BC8 D7            push a
1046   0BC9 DA            push d
1047   0BCA 3B 99 18      mov d, _y ; $y
1048   0BCD 2A            mov b, [d]
1049   0BCE 38 00 00      mov c, 0
1050   0BD1 E7            pop d
1051   0BD2 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
1052   0BD6 DA            push d
1053   0BD7 3B 97 18      mov d, _x ; $x
1054   0BDA 2A            mov b, [d]
1055   0BDB 38 00 00      mov c, 0
1056   0BDE E7            pop d
1057   0BDF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1058   0BE3 E4            pop a
1059   0BE4 2A            mov b, [d]
1060   0BE5 38 00 00      mov c, 0
1061   0BE8 E7            pop d
1062   0BE9 FD 43         mov [d], b
1063   0BEB             _for16_update:
1064   0BEB 3B 97 18      mov d, _x ; $x
1065   0BEE 2A            mov b, [d]
1066   0BEF FD 77         inc b
1067   0BF1 3B 97 18      mov d, _x ; $x
1068   0BF4 FD 43         mov [d], b
1069   0BF6 0A 8C 0B      jmp _for16_cond
1070   0BF9             _for16_exit:
1071   0BF9             _for15_update:
1072   0BF9 3B 99 18      mov d, _y ; $y
1073   0BFC 2A            mov b, [d]
1074   0BFD FD 77         inc b
1075   0BFF 3B 99 18      mov d, _y ; $y
1076   0C02 FD 43         mov [d], b
1077   0C04 0A 66 0B      jmp _for15_cond
1078   0C07             _for15_exit:
1079   0C07             ; return; 
1080   0C07 F9            leave
1081   0C08 09            ret
1082   0C09             
1083   0C09             putchar:
1084   0C09 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1085   0C0C             ; --- BEGIN INLINE ASM SEGMENT
1086   0C0C FA 05 00      lea d, [bp + 5] ; $c
1087   0C0F 1E            mov al, [d]
1088   0C10 23            mov ah, al
1089   0C11 19 00         mov al, 0
1090   0C13 05 03         syscall sys_io      ; char in AH
1091   0C15             ; --- END INLINE ASM SEGMENT
1092   0C15 F9            leave
1093   0C16 09            ret
1094   0C17             ; --- END TEXT SEGMENT
1095   0C17             
1096   0C17             ; --- BEGIN DATA SEGMENT
1097   0C17 00 00 00 00 _grid_data: .fill 1600, 0
1097   0C1B 00 00 00 00 
1097   0C1F 00 00 00 00 
1097   0C23 00 00 00 00 
1097   0C27 00 00 00 00 
1097   0C2B 00 00 00 00 
1097   0C2F 00 00 00 00 
1097   0C33 00 00 00 00 
1097   0C37 00 00 00 00 
1097   0C3B 00 00 00 00 
1097   0C3F 00 00 00 00 
1097   0C43 00 00 00 00 
1097   0C47 00 00 00 00 
1097   0C4B 00 00 00 00 
1097   0C4F 00 00 00 00 
1097   0C53 00 00 00 00 
1097   0C57 00 00 00 00 
1097   0C5B 00 00 00 00 
1097   0C5F 00 00 00 00 
1097   0C63 00 00 00 00 
1097   0C67 00 00 00 00 
1097   0C6B 00 00 00 00 
1097   0C6F 00 00 00 00 
1097   0C73 00 00 00 00 
1097   0C77 00 00 00 00 
1097   0C7B 00 00 00 00 
1097   0C7F 00 00 00 00 
1097   0C83 00 00 00 00 
1097   0C87 00 00 00 00 
1097   0C8B 00 00 00 00 
1097   0C8F 00 00 00 00 
1097   0C93 00 00 00 00 
1097   0C97 00 00 00 00 
1097   0C9B 00 00 00 00 
1097   0C9F 00 00 00 00 
1097   0CA3 00 00 00 00 
1097   0CA7 00 00 00 00 
1097   0CAB 00 00 00 00 
1097   0CAF 00 00 00 00 
1097   0CB3 00 00 00 00 
1097   0CB7 00 00 00 00 
1097   0CBB 00 00 00 00 
1097   0CBF 00 00 00 00 
1097   0CC3 00 00 00 00 
1097   0CC7 00 00 00 00 
1097   0CCB 00 00 00 00 
1097   0CCF 00 00 00 00 
1097   0CD3 00 00 00 00 
1097   0CD7 00 00 00 00 
1097   0CDB 00 00 00 00 
1097   0CDF 00 00 00 00 
1097   0CE3 00 00 00 00 
1097   0CE7 00 00 00 00 
1097   0CEB 00 00 00 00 
1097   0CEF 00 00 00 00 
1097   0CF3 00 00 00 00 
1097   0CF7 00 00 00 00 
1097   0CFB 00 00 00 00 
1097   0CFF 00 00 00 00 
1097   0D03 00 00 00 00 
1097   0D07 00 00 00 00 
1097   0D0B 00 00 00 00 
1097   0D0F 00 00 00 00 
1097   0D13 00 00 00 00 
1097   0D17 00 00 00 00 
1097   0D1B 00 00 00 00 
1097   0D1F 00 00 00 00 
1097   0D23 00 00 00 00 
1097   0D27 00 00 00 00 
1097   0D2B 00 00 00 00 
1097   0D2F 00 00 00 00 
1097   0D33 00 00 00 00 
1097   0D37 00 00 00 00 
1097   0D3B 00 00 00 00 
1097   0D3F 00 00 00 00 
1097   0D43 00 00 00 00 
1097   0D47 00 00 00 00 
1097   0D4B 00 00 00 00 
1097   0D4F 00 00 00 00 
1097   0D53 00 00 00 00 
1097   0D57 00 00 00 00 
1097   0D5B 00 00 00 00 
1097   0D5F 00 00 00 00 
1097   0D63 00 00 00 00 
1097   0D67 00 00 00 00 
1097   0D6B 00 00 00 00 
1097   0D6F 00 00 00 00 
1097   0D73 00 00 00 00 
1097   0D77 00 00 00 00 
1097   0D7B 00 00 00 00 
1097   0D7F 00 00 00 00 
1097   0D83 00 00 00 00 
1097   0D87 00 00 00 00 
1097   0D8B 00 00 00 00 
1097   0D8F 00 00 00 00 
1097   0D93 00 00 00 00 
1097   0D97 00 00 00 00 
1097   0D9B 00 00 00 00 
1097   0D9F 00 00 00 00 
1097   0DA3 00 00 00 00 
1097   0DA7 00 00 00 00 
1097   0DAB 00 00 00 00 
1097   0DAF 00 00 00 00 
1097   0DB3 00 00 00 00 
1097   0DB7 00 00 00 00 
1097   0DBB 00 00 00 00 
1097   0DBF 00 00 00 00 
1097   0DC3 00 00 00 00 
1097   0DC7 00 00 00 00 
1097   0DCB 00 00 00 00 
1097   0DCF 00 00 00 00 
1097   0DD3 00 00 00 00 
1097   0DD7 00 00 00 00 
1097   0DDB 00 00 00 00 
1097   0DDF 00 00 00 00 
1097   0DE3 00 00 00 00 
1097   0DE7 00 00 00 00 
1097   0DEB 00 00 00 00 
1097   0DEF 00 00 00 00 
1097   0DF3 00 00 00 00 
1097   0DF7 00 00 00 00 
1097   0DFB 00 00 00 00 
1097   0DFF 00 00 00 00 
1097   0E03 00 00 00 00 
1097   0E07 00 00 00 00 
1097   0E0B 00 00 00 00 
1097   0E0F 00 00 00 00 
1097   0E13 00 00 00 00 
1097   0E17 00 00 00 00 
1097   0E1B 00 00 00 00 
1097   0E1F 00 00 00 00 
1097   0E23 00 00 00 00 
1097   0E27 00 00 00 00 
1097   0E2B 00 00 00 00 
1097   0E2F 00 00 00 00 
1097   0E33 00 00 00 00 
1097   0E37 00 00 00 00 
1097   0E3B 00 00 00 00 
1097   0E3F 00 00 00 00 
1097   0E43 00 00 00 00 
1097   0E47 00 00 00 00 
1097   0E4B 00 00 00 00 
1097   0E4F 00 00 00 00 
1097   0E53 00 00 00 00 
1097   0E57 00 00 00 00 
1097   0E5B 00 00 00 00 
1097   0E5F 00 00 00 00 
1097   0E63 00 00 00 00 
1097   0E67 00 00 00 00 
1097   0E6B 00 00 00 00 
1097   0E6F 00 00 00 00 
1097   0E73 00 00 00 00 
1097   0E77 00 00 00 00 
1097   0E7B 00 00 00 00 
1097   0E7F 00 00 00 00 
1097   0E83 00 00 00 00 
1097   0E87 00 00 00 00 
1097   0E8B 00 00 00 00 
1097   0E8F 00 00 00 00 
1097   0E93 00 00 00 00 
1097   0E97 00 00 00 00 
1097   0E9B 00 00 00 00 
1097   0E9F 00 00 00 00 
1097   0EA3 00 00 00 00 
1097   0EA7 00 00 00 00 
1097   0EAB 00 00 00 00 
1097   0EAF 00 00 00 00 
1097   0EB3 00 00 00 00 
1097   0EB7 00 00 00 00 
1097   0EBB 00 00 00 00 
1097   0EBF 00 00 00 00 
1097   0EC3 00 00 00 00 
1097   0EC7 00 00 00 00 
1097   0ECB 00 00 00 00 
1097   0ECF 00 00 00 00 
1097   0ED3 00 00 00 00 
1097   0ED7 00 00 00 00 
1097   0EDB 00 00 00 00 
1097   0EDF 00 00 00 00 
1097   0EE3 00 00 00 00 
1097   0EE7 00 00 00 00 
1097   0EEB 00 00 00 00 
1097   0EEF 00 00 00 00 
1097   0EF3 00 00 00 00 
1097   0EF7 00 00 00 00 
1097   0EFB 00 00 00 00 
1097   0EFF 00 00 00 00 
1097   0F03 00 00 00 00 
1097   0F07 00 00 00 00 
1097   0F0B 00 00 00 00 
1097   0F0F 00 00 00 00 
1097   0F13 00 00 00 00 
1097   0F17 00 00 00 00 
1097   0F1B 00 00 00 00 
1097   0F1F 00 00 00 00 
1097   0F23 00 00 00 00 
1097   0F27 00 00 00 00 
1097   0F2B 00 00 00 00 
1097   0F2F 00 00 00 00 
1097   0F33 00 00 00 00 
1097   0F37 00 00 00 00 
1097   0F3B 00 00 00 00 
1097   0F3F 00 00 00 00 
1097   0F43 00 00 00 00 
1097   0F47 00 00 00 00 
1097   0F4B 00 00 00 00 
1097   0F4F 00 00 00 00 
1097   0F53 00 00 00 00 
1097   0F57 00 00 00 00 
1097   0F5B 00 00 00 00 
1097   0F5F 00 00 00 00 
1097   0F63 00 00 00 00 
1097   0F67 00 00 00 00 
1097   0F6B 00 00 00 00 
1097   0F6F 00 00 00 00 
1097   0F73 00 00 00 00 
1097   0F77 00 00 00 00 
1097   0F7B 00 00 00 00 
1097   0F7F 00 00 00 00 
1097   0F83 00 00 00 00 
1097   0F87 00 00 00 00 
1097   0F8B 00 00 00 00 
1097   0F8F 00 00 00 00 
1097   0F93 00 00 00 00 
1097   0F97 00 00 00 00 
1097   0F9B 00 00 00 00 
1097   0F9F 00 00 00 00 
1097   0FA3 00 00 00 00 
1097   0FA7 00 00 00 00 
1097   0FAB 00 00 00 00 
1097   0FAF 00 00 00 00 
1097   0FB3 00 00 00 00 
1097   0FB7 00 00 00 00 
1097   0FBB 00 00 00 00 
1097   0FBF 00 00 00 00 
1097   0FC3 00 00 00 00 
1097   0FC7 00 00 00 00 
1097   0FCB 00 00 00 00 
1097   0FCF 00 00 00 00 
1097   0FD3 00 00 00 00 
1097   0FD7 00 00 00 00 
1097   0FDB 00 00 00 00 
1097   0FDF 00 00 00 00 
1097   0FE3 00 00 00 00 
1097   0FE7 00 00 00 00 
1097   0FEB 00 00 00 00 
1097   0FEF 00 00 00 00 
1097   0FF3 00 00 00 00 
1097   0FF7 00 00 00 00 
1097   0FFB 00 00 00 00 
1097   0FFF 00 00 00 00 
1097   1003 00 00 00 00 
1097   1007 00 00 00 00 
1097   100B 00 00 00 00 
1097   100F 00 00 00 00 
1097   1013 00 00 00 00 
1097   1017 00 00 00 00 
1097   101B 00 00 00 00 
1097   101F 00 00 00 00 
1097   1023 00 00 00 00 
1097   1027 00 00 00 00 
1097   102B 00 00 00 00 
1097   102F 00 00 00 00 
1097   1033 00 00 00 00 
1097   1037 00 00 00 00 
1097   103B 00 00 00 00 
1097   103F 00 00 00 00 
1097   1043 00 00 00 00 
1097   1047 00 00 00 00 
1097   104B 00 00 00 00 
1097   104F 00 00 00 00 
1097   1053 00 00 00 00 
1097   1057 00 00 00 00 
1097   105B 00 00 00 00 
1097   105F 00 00 00 00 
1097   1063 00 00 00 00 
1097   1067 00 00 00 00 
1097   106B 00 00 00 00 
1097   106F 00 00 00 00 
1097   1073 00 00 00 00 
1097   1077 00 00 00 00 
1097   107B 00 00 00 00 
1097   107F 00 00 00 00 
1097   1083 00 00 00 00 
1097   1087 00 00 00 00 
1097   108B 00 00 00 00 
1097   108F 00 00 00 00 
1097   1093 00 00 00 00 
1097   1097 00 00 00 00 
1097   109B 00 00 00 00 
1097   109F 00 00 00 00 
1097   10A3 00 00 00 00 
1097   10A7 00 00 00 00 
1097   10AB 00 00 00 00 
1097   10AF 00 00 00 00 
1097   10B3 00 00 00 00 
1097   10B7 00 00 00 00 
1097   10BB 00 00 00 00 
1097   10BF 00 00 00 00 
1097   10C3 00 00 00 00 
1097   10C7 00 00 00 00 
1097   10CB 00 00 00 00 
1097   10CF 00 00 00 00 
1097   10D3 00 00 00 00 
1097   10D7 00 00 00 00 
1097   10DB 00 00 00 00 
1097   10DF 00 00 00 00 
1097   10E3 00 00 00 00 
1097   10E7 00 00 00 00 
1097   10EB 00 00 00 00 
1097   10EF 00 00 00 00 
1097   10F3 00 00 00 00 
1097   10F7 00 00 00 00 
1097   10FB 00 00 00 00 
1097   10FF 00 00 00 00 
1097   1103 00 00 00 00 
1097   1107 00 00 00 00 
1097   110B 00 00 00 00 
1097   110F 00 00 00 00 
1097   1113 00 00 00 00 
1097   1117 00 00 00 00 
1097   111B 00 00 00 00 
1097   111F 00 00 00 00 
1097   1123 00 00 00 00 
1097   1127 00 00 00 00 
1097   112B 00 00 00 00 
1097   112F 00 00 00 00 
1097   1133 00 00 00 00 
1097   1137 00 00 00 00 
1097   113B 00 00 00 00 
1097   113F 00 00 00 00 
1097   1143 00 00 00 00 
1097   1147 00 00 00 00 
1097   114B 00 00 00 00 
1097   114F 00 00 00 00 
1097   1153 00 00 00 00 
1097   1157 00 00 00 00 
1097   115B 00 00 00 00 
1097   115F 00 00 00 00 
1097   1163 00 00 00 00 
1097   1167 00 00 00 00 
1097   116B 00 00 00 00 
1097   116F 00 00 00 00 
1097   1173 00 00 00 00 
1097   1177 00 00 00 00 
1097   117B 00 00 00 00 
1097   117F 00 00 00 00 
1097   1183 00 00 00 00 
1097   1187 00 00 00 00 
1097   118B 00 00 00 00 
1097   118F 00 00 00 00 
1097   1193 00 00 00 00 
1097   1197 00 00 00 00 
1097   119B 00 00 00 00 
1097   119F 00 00 00 00 
1097   11A3 00 00 00 00 
1097   11A7 00 00 00 00 
1097   11AB 00 00 00 00 
1097   11AF 00 00 00 00 
1097   11B3 00 00 00 00 
1097   11B7 00 00 00 00 
1097   11BB 00 00 00 00 
1097   11BF 00 00 00 00 
1097   11C3 00 00 00 00 
1097   11C7 00 00 00 00 
1097   11CB 00 00 00 00 
1097   11CF 00 00 00 00 
1097   11D3 00 00 00 00 
1097   11D7 00 00 00 00 
1097   11DB 00 00 00 00 
1097   11DF 00 00 00 00 
1097   11E3 00 00 00 00 
1097   11E7 00 00 00 00 
1097   11EB 00 00 00 00 
1097   11EF 00 00 00 00 
1097   11F3 00 00 00 00 
1097   11F7 00 00 00 00 
1097   11FB 00 00 00 00 
1097   11FF 00 00 00 00 
1097   1203 00 00 00 00 
1097   1207 00 00 00 00 
1097   120B 00 00 00 00 
1097   120F 00 00 00 00 
1097   1213 00 00 00 00 
1097   1217 00 00 00 00 
1097   121B 00 00 00 00 
1097   121F 00 00 00 00 
1097   1223 00 00 00 00 
1097   1227 00 00 00 00 
1097   122B 00 00 00 00 
1097   122F 00 00 00 00 
1097   1233 00 00 00 00 
1097   1237 00 00 00 00 
1097   123B 00 00 00 00 
1097   123F 00 00 00 00 
1097   1243 00 00 00 00 
1097   1247 00 00 00 00 
1097   124B 00 00 00 00 
1097   124F 00 00 00 00 
1097   1253 00 00 00 00 
1098   1257 00 00 00 00 _new_grid_data: .fill 1600, 0
1098   125B 00 00 00 00 
1098   125F 00 00 00 00 
1098   1263 00 00 00 00 
1098   1267 00 00 00 00 
1098   126B 00 00 00 00 
1098   126F 00 00 00 00 
1098   1273 00 00 00 00 
1098   1277 00 00 00 00 
1098   127B 00 00 00 00 
1098   127F 00 00 00 00 
1098   1283 00 00 00 00 
1098   1287 00 00 00 00 
1098   128B 00 00 00 00 
1098   128F 00 00 00 00 
1098   1293 00 00 00 00 
1098   1297 00 00 00 00 
1098   129B 00 00 00 00 
1098   129F 00 00 00 00 
1098   12A3 00 00 00 00 
1098   12A7 00 00 00 00 
1098   12AB 00 00 00 00 
1098   12AF 00 00 00 00 
1098   12B3 00 00 00 00 
1098   12B7 00 00 00 00 
1098   12BB 00 00 00 00 
1098   12BF 00 00 00 00 
1098   12C3 00 00 00 00 
1098   12C7 00 00 00 00 
1098   12CB 00 00 00 00 
1098   12CF 00 00 00 00 
1098   12D3 00 00 00 00 
1098   12D7 00 00 00 00 
1098   12DB 00 00 00 00 
1098   12DF 00 00 00 00 
1098   12E3 00 00 00 00 
1098   12E7 00 00 00 00 
1098   12EB 00 00 00 00 
1098   12EF 00 00 00 00 
1098   12F3 00 00 00 00 
1098   12F7 00 00 00 00 
1098   12FB 00 00 00 00 
1098   12FF 00 00 00 00 
1098   1303 00 00 00 00 
1098   1307 00 00 00 00 
1098   130B 00 00 00 00 
1098   130F 00 00 00 00 
1098   1313 00 00 00 00 
1098   1317 00 00 00 00 
1098   131B 00 00 00 00 
1098   131F 00 00 00 00 
1098   1323 00 00 00 00 
1098   1327 00 00 00 00 
1098   132B 00 00 00 00 
1098   132F 00 00 00 00 
1098   1333 00 00 00 00 
1098   1337 00 00 00 00 
1098   133B 00 00 00 00 
1098   133F 00 00 00 00 
1098   1343 00 00 00 00 
1098   1347 00 00 00 00 
1098   134B 00 00 00 00 
1098   134F 00 00 00 00 
1098   1353 00 00 00 00 
1098   1357 00 00 00 00 
1098   135B 00 00 00 00 
1098   135F 00 00 00 00 
1098   1363 00 00 00 00 
1098   1367 00 00 00 00 
1098   136B 00 00 00 00 
1098   136F 00 00 00 00 
1098   1373 00 00 00 00 
1098   1377 00 00 00 00 
1098   137B 00 00 00 00 
1098   137F 00 00 00 00 
1098   1383 00 00 00 00 
1098   1387 00 00 00 00 
1098   138B 00 00 00 00 
1098   138F 00 00 00 00 
1098   1393 00 00 00 00 
1098   1397 00 00 00 00 
1098   139B 00 00 00 00 
1098   139F 00 00 00 00 
1098   13A3 00 00 00 00 
1098   13A7 00 00 00 00 
1098   13AB 00 00 00 00 
1098   13AF 00 00 00 00 
1098   13B3 00 00 00 00 
1098   13B7 00 00 00 00 
1098   13BB 00 00 00 00 
1098   13BF 00 00 00 00 
1098   13C3 00 00 00 00 
1098   13C7 00 00 00 00 
1098   13CB 00 00 00 00 
1098   13CF 00 00 00 00 
1098   13D3 00 00 00 00 
1098   13D7 00 00 00 00 
1098   13DB 00 00 00 00 
1098   13DF 00 00 00 00 
1098   13E3 00 00 00 00 
1098   13E7 00 00 00 00 
1098   13EB 00 00 00 00 
1098   13EF 00 00 00 00 
1098   13F3 00 00 00 00 
1098   13F7 00 00 00 00 
1098   13FB 00 00 00 00 
1098   13FF 00 00 00 00 
1098   1403 00 00 00 00 
1098   1407 00 00 00 00 
1098   140B 00 00 00 00 
1098   140F 00 00 00 00 
1098   1413 00 00 00 00 
1098   1417 00 00 00 00 
1098   141B 00 00 00 00 
1098   141F 00 00 00 00 
1098   1423 00 00 00 00 
1098   1427 00 00 00 00 
1098   142B 00 00 00 00 
1098   142F 00 00 00 00 
1098   1433 00 00 00 00 
1098   1437 00 00 00 00 
1098   143B 00 00 00 00 
1098   143F 00 00 00 00 
1098   1443 00 00 00 00 
1098   1447 00 00 00 00 
1098   144B 00 00 00 00 
1098   144F 00 00 00 00 
1098   1453 00 00 00 00 
1098   1457 00 00 00 00 
1098   145B 00 00 00 00 
1098   145F 00 00 00 00 
1098   1463 00 00 00 00 
1098   1467 00 00 00 00 
1098   146B 00 00 00 00 
1098   146F 00 00 00 00 
1098   1473 00 00 00 00 
1098   1477 00 00 00 00 
1098   147B 00 00 00 00 
1098   147F 00 00 00 00 
1098   1483 00 00 00 00 
1098   1487 00 00 00 00 
1098   148B 00 00 00 00 
1098   148F 00 00 00 00 
1098   1493 00 00 00 00 
1098   1497 00 00 00 00 
1098   149B 00 00 00 00 
1098   149F 00 00 00 00 
1098   14A3 00 00 00 00 
1098   14A7 00 00 00 00 
1098   14AB 00 00 00 00 
1098   14AF 00 00 00 00 
1098   14B3 00 00 00 00 
1098   14B7 00 00 00 00 
1098   14BB 00 00 00 00 
1098   14BF 00 00 00 00 
1098   14C3 00 00 00 00 
1098   14C7 00 00 00 00 
1098   14CB 00 00 00 00 
1098   14CF 00 00 00 00 
1098   14D3 00 00 00 00 
1098   14D7 00 00 00 00 
1098   14DB 00 00 00 00 
1098   14DF 00 00 00 00 
1098   14E3 00 00 00 00 
1098   14E7 00 00 00 00 
1098   14EB 00 00 00 00 
1098   14EF 00 00 00 00 
1098   14F3 00 00 00 00 
1098   14F7 00 00 00 00 
1098   14FB 00 00 00 00 
1098   14FF 00 00 00 00 
1098   1503 00 00 00 00 
1098   1507 00 00 00 00 
1098   150B 00 00 00 00 
1098   150F 00 00 00 00 
1098   1513 00 00 00 00 
1098   1517 00 00 00 00 
1098   151B 00 00 00 00 
1098   151F 00 00 00 00 
1098   1523 00 00 00 00 
1098   1527 00 00 00 00 
1098   152B 00 00 00 00 
1098   152F 00 00 00 00 
1098   1533 00 00 00 00 
1098   1537 00 00 00 00 
1098   153B 00 00 00 00 
1098   153F 00 00 00 00 
1098   1543 00 00 00 00 
1098   1547 00 00 00 00 
1098   154B 00 00 00 00 
1098   154F 00 00 00 00 
1098   1553 00 00 00 00 
1098   1557 00 00 00 00 
1098   155B 00 00 00 00 
1098   155F 00 00 00 00 
1098   1563 00 00 00 00 
1098   1567 00 00 00 00 
1098   156B 00 00 00 00 
1098   156F 00 00 00 00 
1098   1573 00 00 00 00 
1098   1577 00 00 00 00 
1098   157B 00 00 00 00 
1098   157F 00 00 00 00 
1098   1583 00 00 00 00 
1098   1587 00 00 00 00 
1098   158B 00 00 00 00 
1098   158F 00 00 00 00 
1098   1593 00 00 00 00 
1098   1597 00 00 00 00 
1098   159B 00 00 00 00 
1098   159F 00 00 00 00 
1098   15A3 00 00 00 00 
1098   15A7 00 00 00 00 
1098   15AB 00 00 00 00 
1098   15AF 00 00 00 00 
1098   15B3 00 00 00 00 
1098   15B7 00 00 00 00 
1098   15BB 00 00 00 00 
1098   15BF 00 00 00 00 
1098   15C3 00 00 00 00 
1098   15C7 00 00 00 00 
1098   15CB 00 00 00 00 
1098   15CF 00 00 00 00 
1098   15D3 00 00 00 00 
1098   15D7 00 00 00 00 
1098   15DB 00 00 00 00 
1098   15DF 00 00 00 00 
1098   15E3 00 00 00 00 
1098   15E7 00 00 00 00 
1098   15EB 00 00 00 00 
1098   15EF 00 00 00 00 
1098   15F3 00 00 00 00 
1098   15F7 00 00 00 00 
1098   15FB 00 00 00 00 
1098   15FF 00 00 00 00 
1098   1603 00 00 00 00 
1098   1607 00 00 00 00 
1098   160B 00 00 00 00 
1098   160F 00 00 00 00 
1098   1613 00 00 00 00 
1098   1617 00 00 00 00 
1098   161B 00 00 00 00 
1098   161F 00 00 00 00 
1098   1623 00 00 00 00 
1098   1627 00 00 00 00 
1098   162B 00 00 00 00 
1098   162F 00 00 00 00 
1098   1633 00 00 00 00 
1098   1637 00 00 00 00 
1098   163B 00 00 00 00 
1098   163F 00 00 00 00 
1098   1643 00 00 00 00 
1098   1647 00 00 00 00 
1098   164B 00 00 00 00 
1098   164F 00 00 00 00 
1098   1653 00 00 00 00 
1098   1657 00 00 00 00 
1098   165B 00 00 00 00 
1098   165F 00 00 00 00 
1098   1663 00 00 00 00 
1098   1667 00 00 00 00 
1098   166B 00 00 00 00 
1098   166F 00 00 00 00 
1098   1673 00 00 00 00 
1098   1677 00 00 00 00 
1098   167B 00 00 00 00 
1098   167F 00 00 00 00 
1098   1683 00 00 00 00 
1098   1687 00 00 00 00 
1098   168B 00 00 00 00 
1098   168F 00 00 00 00 
1098   1693 00 00 00 00 
1098   1697 00 00 00 00 
1098   169B 00 00 00 00 
1098   169F 00 00 00 00 
1098   16A3 00 00 00 00 
1098   16A7 00 00 00 00 
1098   16AB 00 00 00 00 
1098   16AF 00 00 00 00 
1098   16B3 00 00 00 00 
1098   16B7 00 00 00 00 
1098   16BB 00 00 00 00 
1098   16BF 00 00 00 00 
1098   16C3 00 00 00 00 
1098   16C7 00 00 00 00 
1098   16CB 00 00 00 00 
1098   16CF 00 00 00 00 
1098   16D3 00 00 00 00 
1098   16D7 00 00 00 00 
1098   16DB 00 00 00 00 
1098   16DF 00 00 00 00 
1098   16E3 00 00 00 00 
1098   16E7 00 00 00 00 
1098   16EB 00 00 00 00 
1098   16EF 00 00 00 00 
1098   16F3 00 00 00 00 
1098   16F7 00 00 00 00 
1098   16FB 00 00 00 00 
1098   16FF 00 00 00 00 
1098   1703 00 00 00 00 
1098   1707 00 00 00 00 
1098   170B 00 00 00 00 
1098   170F 00 00 00 00 
1098   1713 00 00 00 00 
1098   1717 00 00 00 00 
1098   171B 00 00 00 00 
1098   171F 00 00 00 00 
1098   1723 00 00 00 00 
1098   1727 00 00 00 00 
1098   172B 00 00 00 00 
1098   172F 00 00 00 00 
1098   1733 00 00 00 00 
1098   1737 00 00 00 00 
1098   173B 00 00 00 00 
1098   173F 00 00 00 00 
1098   1743 00 00 00 00 
1098   1747 00 00 00 00 
1098   174B 00 00 00 00 
1098   174F 00 00 00 00 
1098   1753 00 00 00 00 
1098   1757 00 00 00 00 
1098   175B 00 00 00 00 
1098   175F 00 00 00 00 
1098   1763 00 00 00 00 
1098   1767 00 00 00 00 
1098   176B 00 00 00 00 
1098   176F 00 00 00 00 
1098   1773 00 00 00 00 
1098   1777 00 00 00 00 
1098   177B 00 00 00 00 
1098   177F 00 00 00 00 
1098   1783 00 00 00 00 
1098   1787 00 00 00 00 
1098   178B 00 00 00 00 
1098   178F 00 00 00 00 
1098   1793 00 00 00 00 
1098   1797 00 00 00 00 
1098   179B 00 00 00 00 
1098   179F 00 00 00 00 
1098   17A3 00 00 00 00 
1098   17A7 00 00 00 00 
1098   17AB 00 00 00 00 
1098   17AF 00 00 00 00 
1098   17B3 00 00 00 00 
1098   17B7 00 00 00 00 
1098   17BB 00 00 00 00 
1098   17BF 00 00 00 00 
1098   17C3 00 00 00 00 
1098   17C7 00 00 00 00 
1098   17CB 00 00 00 00 
1098   17CF 00 00 00 00 
1098   17D3 00 00 00 00 
1098   17D7 00 00 00 00 
1098   17DB 00 00 00 00 
1098   17DF 00 00 00 00 
1098   17E3 00 00 00 00 
1098   17E7 00 00 00 00 
1098   17EB 00 00 00 00 
1098   17EF 00 00 00 00 
1098   17F3 00 00 00 00 
1098   17F7 00 00 00 00 
1098   17FB 00 00 00 00 
1098   17FF 00 00 00 00 
1098   1803 00 00 00 00 
1098   1807 00 00 00 00 
1098   180B 00 00 00 00 
1098   180F 00 00 00 00 
1098   1813 00 00 00 00 
1098   1817 00 00 00 00 
1098   181B 00 00 00 00 
1098   181F 00 00 00 00 
1098   1823 00 00 00 00 
1098   1827 00 00 00 00 
1098   182B 00 00 00 00 
1098   182F 00 00 00 00 
1098   1833 00 00 00 00 
1098   1837 00 00 00 00 
1098   183B 00 00 00 00 
1098   183F 00 00 00 00 
1098   1843 00 00 00 00 
1098   1847 00 00 00 00 
1098   184B 00 00 00 00 
1098   184F 00 00 00 00 
1098   1853 00 00 00 00 
1098   1857 00 00 00 00 
1098   185B 00 00 00 00 
1098   185F 00 00 00 00 
1098   1863 00 00 00 00 
1098   1867 00 00 00 00 
1098   186B 00 00 00 00 
1098   186F 00 00 00 00 
1098   1873 00 00 00 00 
1098   1877 00 00 00 00 
1098   187B 00 00 00 00 
1098   187F 00 00 00 00 
1098   1883 00 00 00 00 
1098   1887 00 00 00 00 
1098   188B 00 00 00 00 
1098   188F 00 00 00 00 
1098   1893 00 00 00 00 
1099   1897 00 00       _x: .fill 2, 0
1100   1899 00 00       _y: .fill 2, 0
1101   189B 00 00       _dx: .fill 2, 0
1102   189D 00 00       _dy: .fill 2, 0
1103   189F 00 00       _nx: .fill 2, 0
1104   18A1 00 00       _ny: .fill 2, 0
1105   18A3 00 00       _head_count: .fill 2, 0
1106   18A5 00          _c: .fill 1, 0
1107   18A6             
1108   18A6 A8 18       _heap_top: .dw _heap
1109   18A8 00          _heap: .db 0
1110   18A9             ; --- END DATA SEGMENT
1111   18A9             
1112   18A9             .end
tasm: Number of errors = 0
