0001   0000             ; --- FILENAME: games/startrek.c
0002   0000             ; --- DATE:     08-07-2025 at 11:41:51
0003   0000             .include "lib/asm/kernel.exp"
0001+  0000             fdc_al_restore   .EQU  $0000
0002+  0000             fdc_al_step      .EQU  $0001
0003+  0000             fdc_al_step_in   .EQU  $0002
0004+  0000             fdc_al_step_out  .EQU  $0003
0005+  0000             fdc_al_seek      .EQU  $0004
0006+  0000             fdc_al_format_128 .EQU  $0005
0007+  0000             fdc_al_formatdisk_128 .EQU  $0006
0008+  0000             fdc_al_format_512 .EQU  $0007
0009+  0000             fdc_al_formatdisk_512 .EQU  $0008
0010+  0000             fdc_al_read_addr .EQU  $0009
0011+  0000             fdc_al_read_track .EQU  $000a
0012+  0000             fdc_al_read_sect .EQU  $000b
0013+  0000             fdc_al_write_sect .EQU  $000c
0014+  0000             fdc_al_force_int .EQU  $000d
0015+  0000             fdc_al_status0   .EQU  $000e
0016+  0000             fdc_al_status1   .EQU  $000f
0017+  0000             noname._7seg_display .EQU  $ffb0
0018+  0000             noname._fdc_config .EQU  $ffc0
0019+  0000             noname._fdc_status_0 .EQU  $ffc1
0020+  0000             noname._fdc_stat_cmd .EQU  $ffc8
0021+  0000             sys_break        .EQU  $0000
0022+  0000             sys_rtc          .EQU  $0001
0023+  0000             sys_ide          .EQU  $0002
0024+  0000             sys_io           .EQU  $0003
0025+  0000             sys_filesystem   .EQU  $0004
0026+  0000             sys_create_proc  .EQU  $0005
0027+  0000             sys_list_proc    .EQU  $0006
0028+  0000             sys_datetime     .EQU  $0007
0029+  0000             sys_reboot       .EQU  $0008
0030+  0000             sys_pause_proc   .EQU  $0009
0031+  0000             sys_resume_proc  .EQU  $000a
0032+  0000             sys_terminate_proc .EQU  $000b
0033+  0000             sys_system       .EQU  $000c
0034+  0000             sys_fdc          .EQU  $000d
0035+  0000             text_org         .EQU  $0400
0004   0000             .include "lib/asm/bios.exp"
0001+  0000             bios_reset_vector .equ  $01c0
0002+  0000             ide_buffer       .equ  $8204
0003+  0000             boot_origin      .equ  $8004
0004+  0000             bios_uart        .equ  $0002
0005+  0000             bios_ide         .equ  $0003
0005   0000             
0006   0000             ; --- BEGIN TEXT SEGMENT
0007   0400             .org text_org
0008   0400             main:
0009   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0010   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0011   0408             ; intro(); 
0012   0408             ; --- START FUNCTION CALL
0013   0408 07 05 0A      call intro
0014   040B             ; new_game(); 
0015   040B             ; --- START FUNCTION CALL
0016   040B 07 A8 0A      call new_game
0017   040E             ; return 0; 
0018   040E FD 2E 00 00   mov32 cb, $00000000
0018   0412 00 00 
0019   0414 F9            leave
0020   0415 05 0B         syscall sys_terminate_proc
0021   0417             
0022   0417             TO_FIXED:
0023   0417 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0024   041A             ; return x * 10; 
0025   041A FA 05 00      lea d, [bp + 5] ; $x
0026   041D 2A            mov b, [d]
0027   041E 38 00 00      mov c, 0
0028   0421             ; --- START FACTORS
0029   0421 D7            push a
0030   0422 FD D8         push g
0031   0424 11            mov a, b
0032   0425 FD 7A         mov g, c
0033   0427 FD 2E 0A 00   mov32 cb, $0000000a
0033   042B 00 00 
0034   042D D7            push a     ; save left operand
0035   042E 8E            xor a, b   ; xor sign bits
0036   042F FD AA         swp a      ; swap bytes
0037   0431 83            mov cl, al ; save result of xor into 'dl'
0038   0432 E4            pop a      ; restore left side operator
0039   0433 DF            push cl    ; save result of xor above
0040   0434 FD AA         swp a  
0041   0436 93 80         test al, $80  
0042   0438 FD AA         swp a  
0043   043A C6 3F 04      jz skip_invert_a_2  
0044   043D FD 95         neg a 
0045   043F             skip_invert_a_2:   
0046   043F FD AB         swp b
0047   0441 FD 93 80      test bl, $80  
0048   0444 FD AB         swp b
0049   0446 C6 4B 04      jz skip_invert_b_2  
0050   0449 FD 97         neg b 
0051   044B             skip_invert_b_2:   
0052   044B AC            mul a, b ; *
0053   044C FD 78         mov g, a
0054   044E 11            mov a, b
0055   044F EA            pop bl
0056   0450 FD 93 80      test bl, $80
0057   0453 C6 60 04      jz _same_signs_2
0058   0456 2F            mov bl, al
0059   0457 95            not a
0060   0458 FD 97         neg b
0061   045A 5B 00 00      adc a, 0
0062   045D FD 78         mov g, a
0063   045F 11            mov a, b
0064   0460             _same_signs_2:
0065   0460 FD 38         mov c, g
0066   0462 27            mov b, a
0067   0463 FD F1         pop g
0068   0465 E4            pop a
0069   0466             ; --- END FACTORS
0070   0466 F9            leave
0071   0467 09            ret
0072   0468             
0073   0468             FROM_FIXED:
0074   0468 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0075   046B             ; return x / 10; 
0076   046B FA 05 00      lea d, [bp + 5] ; $x
0077   046E 2A            mov b, [d]
0078   046F 38 00 00      mov c, 0
0079   0472             ; --- START FACTORS
0080   0472 D7            push a
0081   0473 FD D8         push g
0082   0475 11            mov a, b
0083   0476 FD 7A         mov g, c
0084   0478 FD 2E 0A 00   mov32 cb, $0000000a
0084   047C 00 00 
0085   047E FD D8         push g ; save 'g' as the div instruction uses it
0086   0480 AE            div a, b ; /, a: quotient, b: remainder
0087   0481 FD F1         pop g
0088   0483 FD 38         mov c, g
0089   0485 27            mov b, a
0090   0486 FD F1         pop g
0091   0488 E4            pop a
0092   0489             ; --- END FACTORS
0093   0489 F9            leave
0094   048A 09            ret
0095   048B             
0096   048B             TO_FIXED00:
0097   048B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0098   048E             ; return x * 100; 
0099   048E FA 05 00      lea d, [bp + 5] ; $x
0100   0491 2A            mov b, [d]
0101   0492 38 00 00      mov c, 0
0102   0495             ; --- START FACTORS
0103   0495 D7            push a
0104   0496 FD D8         push g
0105   0498 11            mov a, b
0106   0499 FD 7A         mov g, c
0107   049B FD 2E 64 00   mov32 cb, $00000064
0107   049F 00 00 
0108   04A1 D7            push a     ; save left operand
0109   04A2 8E            xor a, b   ; xor sign bits
0110   04A3 FD AA         swp a      ; swap bytes
0111   04A5 83            mov cl, al ; save result of xor into 'dl'
0112   04A6 E4            pop a      ; restore left side operator
0113   04A7 DF            push cl    ; save result of xor above
0114   04A8 FD AA         swp a  
0115   04AA 93 80         test al, $80  
0116   04AC FD AA         swp a  
0117   04AE C6 B3 04      jz skip_invert_a_6  
0118   04B1 FD 95         neg a 
0119   04B3             skip_invert_a_6:   
0120   04B3 FD AB         swp b
0121   04B5 FD 93 80      test bl, $80  
0122   04B8 FD AB         swp b
0123   04BA C6 BF 04      jz skip_invert_b_6  
0124   04BD FD 97         neg b 
0125   04BF             skip_invert_b_6:   
0126   04BF AC            mul a, b ; *
0127   04C0 FD 78         mov g, a
0128   04C2 11            mov a, b
0129   04C3 EA            pop bl
0130   04C4 FD 93 80      test bl, $80
0131   04C7 C6 D4 04      jz _same_signs_6
0132   04CA 2F            mov bl, al
0133   04CB 95            not a
0134   04CC FD 97         neg b
0135   04CE 5B 00 00      adc a, 0
0136   04D1 FD 78         mov g, a
0137   04D3 11            mov a, b
0138   04D4             _same_signs_6:
0139   04D4 FD 38         mov c, g
0140   04D6 27            mov b, a
0141   04D7 FD F1         pop g
0142   04D9 E4            pop a
0143   04DA             ; --- END FACTORS
0144   04DA F9            leave
0145   04DB 09            ret
0146   04DC             
0147   04DC             FROM_FIXED00:
0148   04DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0149   04DF             ; return x / 100; 
0150   04DF FA 05 00      lea d, [bp + 5] ; $x
0151   04E2 2A            mov b, [d]
0152   04E3 38 00 00      mov c, 0
0153   04E6             ; --- START FACTORS
0154   04E6 D7            push a
0155   04E7 FD D8         push g
0156   04E9 11            mov a, b
0157   04EA FD 7A         mov g, c
0158   04EC FD 2E 64 00   mov32 cb, $00000064
0158   04F0 00 00 
0159   04F2 FD D8         push g ; save 'g' as the div instruction uses it
0160   04F4 AE            div a, b ; /, a: quotient, b: remainder
0161   04F5 FD F1         pop g
0162   04F7 FD 38         mov c, g
0163   04F9 27            mov b, a
0164   04FA FD F1         pop g
0165   04FC E4            pop a
0166   04FD             ; --- END FACTORS
0167   04FD F9            leave
0168   04FE 09            ret
0169   04FF             
0170   04FF             get_rand:
0171   04FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0172   0502             ; unsigned int         r ; 
0173   0502 52 02 00      sub sp, 2
0174   0505             ; r = rand(); 
0175   0505 FA FF FF      lea d, [bp + -1] ; $r
0176   0508 DA            push d
0177   0509             ; --- START FUNCTION CALL
0178   0509 07 E2 5E      call rand
0179   050C E7            pop d
0180   050D FD 43         mov [d], b
0181   050F             ; r = (r >> 8) | (r << 8); 
0182   050F FA FF FF      lea d, [bp + -1] ; $r
0183   0512 DA            push d
0184   0513 FA FF FF      lea d, [bp + -1] ; $r
0185   0516 2A            mov b, [d]
0186   0517 38 00 00      mov c, 0
0187   051A             ; --- START SHIFT
0188   051A D7            push a
0189   051B 11            mov a, b
0190   051C FD 2E 08 00   mov32 cb, $00000008
0190   0520 00 00 
0191   0522 FD 39         mov c, b
0192   0524 A1            shr a, cl
0193   0525 27            mov b, a
0194   0526 E4            pop a
0195   0527             ; --- END SHIFT
0196   0527 D7            push a
0197   0528 11            mov a, b
0198   0529 FA FF FF      lea d, [bp + -1] ; $r
0199   052C 2A            mov b, [d]
0200   052D 38 00 00      mov c, 0
0201   0530             ; --- START SHIFT
0202   0530 D7            push a
0203   0531 11            mov a, b
0204   0532 FD 2E 08 00   mov32 cb, $00000008
0204   0536 00 00 
0205   0538 FD 39         mov c, b
0206   053A 9D            shl a, cl
0207   053B 27            mov b, a
0208   053C E4            pop a
0209   053D             ; --- END SHIFT
0210   053D FD 70         or b, a ; |
0211   053F E4            pop a
0212   0540 E7            pop d
0213   0541 FD 43         mov [d], b
0214   0543             ; return ((r % spread) + 1); 
0215   0543 FA FF FF      lea d, [bp + -1] ; $r
0216   0546 2A            mov b, [d]
0217   0547 38 00 00      mov c, 0
0218   054A             ; --- START FACTORS
0219   054A D7            push a
0220   054B FD D8         push g
0221   054D 11            mov a, b
0222   054E FD 7A         mov g, c
0223   0550 FA 05 00      lea d, [bp + 5] ; $spread
0224   0553 2A            mov b, [d]
0225   0554 38 00 00      mov c, 0
0226   0557 FD D8         push g ; save 'g' as the div instruction uses it
0227   0559 AE            div a, b ; %, a: quotient, b: remainder
0228   055A 11            mov a, b
0229   055B FD F1         pop g
0230   055D FD 38         mov c, g
0231   055F 27            mov b, a
0232   0560 FD F1         pop g
0233   0562 E4            pop a
0234   0563             ; --- END FACTORS
0235   0563             ; --- START TERMS
0236   0563 D7            push a
0237   0564 11            mov a, b
0238   0565 FD 2E 01 00   mov32 cb, $00000001
0238   0569 00 00 
0239   056B 56            add b, a
0240   056C E4            pop a
0241   056D             ; --- END TERMS
0242   056D F9            leave
0243   056E 09            ret
0244   056F             
0245   056F             rand8:
0246   056F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0247   0572             ; return (get_rand(8)); 
0248   0572             ; --- START FUNCTION CALL
0249   0572 FD 2E 08 00   mov32 cb, $00000008
0249   0576 00 00 
0250   0578 FD AB         swp b
0251   057A D8            push b
0252   057B 07 FF 04      call get_rand
0253   057E 51 02 00      add sp, 2
0254   0581             ; --- END FUNCTION CALL
0255   0581 F9            leave
0256   0582 09            ret
0257   0583             
0258   0583             input:
0259   0583 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0260   0586             ; int c; 
0261   0586 52 02 00      sub sp, 2
0262   0589             ; while((c = getchar()) != '\n') { 
0263   0589             _while17_cond:
0264   0589 FA FF FF      lea d, [bp + -1] ; $c
0265   058C DA            push d
0266   058D             ; --- START FUNCTION CALL
0267   058D 07 57 5E      call getchar
0268   0590 E7            pop d
0269   0591 FD 43         mov [d], b
0270   0593             ; --- START RELATIONAL
0271   0593 D7            push a
0272   0594 11            mov a, b
0273   0595 FD 2E 0A 00   mov32 cb, $0000000a
0273   0599 00 00 
0274   059B B0            cmp a, b
0275   059C FD 72         sneq ; !=
0276   059E E4            pop a
0277   059F             ; --- END RELATIONAL
0278   059F C0 00 00      cmp b, 0
0279   05A2 C6 1E 06      je _while17_exit
0280   05A5             _while17_block:
0281   05A5             ; if (c == -1) 
0282   05A5             _if18_cond:
0283   05A5 FA FF FF      lea d, [bp + -1] ; $c
0284   05A8 2A            mov b, [d]
0285   05A9 38 00 00      mov c, 0
0286   05AC             ; --- START RELATIONAL
0287   05AC D7            push a
0288   05AD 11            mov a, b
0289   05AE FD 2E FF FF   mov32 cb, $ffffffff
0289   05B2 FF FF 
0290   05B4 B0            cmp a, b
0291   05B5 FD 71         seq ; ==
0292   05B7 E4            pop a
0293   05B8             ; --- END RELATIONAL
0294   05B8 C0 00 00      cmp b, 0
0295   05BB C6 D0 05      je _if18_exit
0296   05BE             _if18_TRUE:
0297   05BE             ; exit(1); 
0298   05BE             ; --- START FUNCTION CALL
0299   05BE FD 2E 01 00   mov32 cb, $00000001
0299   05C2 00 00 
0300   05C4 FD AB         swp b
0301   05C6 D8            push b
0302   05C7 07 71 5E      call exit
0303   05CA 51 02 00      add sp, 2
0304   05CD             ; --- END FUNCTION CALL
0305   05CD 0A D0 05      jmp _if18_exit
0306   05D0             _if18_exit:
0307   05D0             ; if (l > 1) { 
0308   05D0             _if19_cond:
0309   05D0 FA 07 00      lea d, [bp + 7] ; $l
0310   05D3 32            mov bl, [d]
0311   05D4 A7 00         mov bh, 0
0312   05D6 38 00 00      mov c, 0
0313   05D9             ; --- START RELATIONAL
0314   05D9 D7            push a
0315   05DA 11            mov a, b
0316   05DB FD 2E 01 00   mov32 cb, $00000001
0316   05DF 00 00 
0317   05E1 B0            cmp a, b
0318   05E2 FD 81         sgu ; > (unsigned)
0319   05E4 E4            pop a
0320   05E5             ; --- END RELATIONAL
0321   05E5 C0 00 00      cmp b, 0
0322   05E8 C6 1B 06      je _if19_exit
0323   05EB             _if19_TRUE:
0324   05EB             ; *b++ = c; 
0325   05EB FA 05 00      lea d, [bp + 5] ; $b
0326   05EE 2A            mov b, [d]
0327   05EF 38 00 00      mov c, 0
0328   05F2 FD 77         inc b
0329   05F4 FA 05 00      lea d, [bp + 5] ; $b
0330   05F7 FD 43         mov [d], b
0331   05F9 FD 7D         dec b
0332   05FB D8            push b
0333   05FC FA FF FF      lea d, [bp + -1] ; $c
0334   05FF 2A            mov b, [d]
0335   0600 38 00 00      mov c, 0
0336   0603 E7            pop d
0337   0604 FD 3E         mov [d], bl
0338   0606             ; l--; 
0339   0606 FA 07 00      lea d, [bp + 7] ; $l
0340   0609 32            mov bl, [d]
0341   060A A7 00         mov bh, 0
0342   060C 38 00 00      mov c, 0
0343   060F FD 7D         dec b
0344   0611 FA 07 00      lea d, [bp + 7] ; $l
0345   0614 FD 3E         mov [d], bl
0346   0616 FD 77         inc b
0347   0618 0A 1B 06      jmp _if19_exit
0348   061B             _if19_exit:
0349   061B 0A 89 05      jmp _while17_cond
0350   061E             _while17_exit:
0351   061E             ; *b = 0; 
0352   061E FA 05 00      lea d, [bp + 5] ; $b
0353   0621 2A            mov b, [d]
0354   0622 38 00 00      mov c, 0
0355   0625 D8            push b
0356   0626 FD 2E 00 00   mov32 cb, $00000000
0356   062A 00 00 
0357   062C E7            pop d
0358   062D FD 3E         mov [d], bl
0359   062F F9            leave
0360   0630 09            ret
0361   0631             
0362   0631             yesno:
0363   0631 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0364   0634             ; char b[2]; 
0365   0634 52 02 00      sub sp, 2
0366   0637             ; input(b,2); 
0367   0637             ; --- START FUNCTION CALL
0368   0637 FD 2E 02 00   mov32 cb, $00000002
0368   063B 00 00 
0369   063D DD            push bl
0370   063E FA FF FF      lea d, [bp + -1] ; $b
0371   0641 2D            mov b, d
0372   0642 38 00 00      mov c, 0
0373   0645 FD AB         swp b
0374   0647 D8            push b
0375   0648 07 83 05      call input
0376   064B 51 03 00      add sp, 3
0377   064E             ; --- END FUNCTION CALL
0378   064E             ; tolower(*b); 
0379   064E             ; --- START FUNCTION CALL
0380   064E FA FF FF      lea d, [bp + -1] ; $b
0381   0651 2D            mov b, d
0382   0652 38 00 00      mov c, 0
0383   0655 74            mov d, b
0384   0656 32            mov bl, [d]
0385   0657 A7 00         mov bh, 0
0386   0659 38 00 00      mov c, 0
0387   065C DD            push bl
0388   065D 07 7C 5E      call tolower
0389   0660 51 01 00      add sp, 1
0390   0663             ; --- END FUNCTION CALL
0391   0663             ; return 1; 
0392   0663 FD 2E 01 00   mov32 cb, $00000001
0392   0667 00 00 
0393   0669 F9            leave
0394   066A 09            ret
0395   066B             ; return 0; 
0396   066B FD 2E 00 00   mov32 cb, $00000000
0396   066F 00 00 
0397   0671 F9            leave
0398   0672 09            ret
0399   0673             
0400   0673             input_f00:
0401   0673 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0402   0676             ; int        v; 
0403   0676 52 02 00      sub sp, 2
0404   0679             ; char buf[8]; 
0405   0679 52 08 00      sub sp, 8
0406   067C             ; char *x; 
0407   067C 52 02 00      sub sp, 2
0408   067F             ; input(buf, 8); 
0409   067F             ; --- START FUNCTION CALL
0410   067F FD 2E 08 00   mov32 cb, $00000008
0410   0683 00 00 
0411   0685 DD            push bl
0412   0686 FA F7 FF      lea d, [bp + -9] ; $buf
0413   0689 2D            mov b, d
0414   068A 38 00 00      mov c, 0
0415   068D FD AB         swp b
0416   068F D8            push b
0417   0690 07 83 05      call input
0418   0693 51 03 00      add sp, 3
0419   0696             ; --- END FUNCTION CALL
0420   0696             ; x = buf; 
0421   0696 FA F5 FF      lea d, [bp + -11] ; $x
0422   0699 DA            push d
0423   069A FA F7 FF      lea d, [bp + -9] ; $buf
0424   069D 2D            mov b, d
0425   069E 38 00 00      mov c, 0
0426   06A1 E7            pop d
0427   06A2 FD 43         mov [d], b
0428   06A4             ; if (!is_digit(*x)) 
0429   06A4             _if20_cond:
0430   06A4             ; --- START FUNCTION CALL
0431   06A4 FA F5 FF      lea d, [bp + -11] ; $x
0432   06A7 2A            mov b, [d]
0433   06A8 38 00 00      mov c, 0
0434   06AB 74            mov d, b
0435   06AC 32            mov bl, [d]
0436   06AD A7 00         mov bh, 0
0437   06AF 38 00 00      mov c, 0
0438   06B2 DD            push bl
0439   06B3 07 75 6B      call is_digit
0440   06B6 51 01 00      add sp, 1
0441   06B9             ; --- END FUNCTION CALL
0442   06B9 C0 00 00      cmp b, 0
0443   06BC C6 CA 06      je _if20_exit
0444   06BF             _if20_TRUE:
0445   06BF             ; return -1; 
0446   06BF FD 2E FF FF   mov32 cb, $ffffffff
0446   06C3 FF FF 
0447   06C5 F9            leave
0448   06C6 09            ret
0449   06C7 0A CA 06      jmp _if20_exit
0450   06CA             _if20_exit:
0451   06CA             ; v = 100 * (*x++ - '0'); 
0452   06CA FA FF FF      lea d, [bp + -1] ; $v
0453   06CD DA            push d
0454   06CE FD 2E 64 00   mov32 cb, $00000064
0454   06D2 00 00 
0455   06D4             ; --- START FACTORS
0456   06D4 D7            push a
0457   06D5 FD D8         push g
0458   06D7 11            mov a, b
0459   06D8 FD 7A         mov g, c
0460   06DA FA F5 FF      lea d, [bp + -11] ; $x
0461   06DD 2A            mov b, [d]
0462   06DE 38 00 00      mov c, 0
0463   06E1 FD 77         inc b
0464   06E3 FA F5 FF      lea d, [bp + -11] ; $x
0465   06E6 FD 43         mov [d], b
0466   06E8 FD 7D         dec b
0467   06EA 74            mov d, b
0468   06EB 32            mov bl, [d]
0469   06EC A7 00         mov bh, 0
0470   06EE 38 00 00      mov c, 0
0471   06F1             ; --- START TERMS
0472   06F1 D7            push a
0473   06F2 11            mov a, b
0474   06F3 FD 2E 30 00   mov32 cb, $00000030
0474   06F7 00 00 
0475   06F9 60            sub a, b
0476   06FA 27            mov b, a
0477   06FB E4            pop a
0478   06FC             ; --- END TERMS
0479   06FC D7            push a     ; save left operand
0480   06FD 8E            xor a, b   ; xor sign bits
0481   06FE FD AA         swp a      ; swap bytes
0482   0700 83            mov cl, al ; save result of xor into 'dl'
0483   0701 E4            pop a      ; restore left side operator
0484   0702 DF            push cl    ; save result of xor above
0485   0703 FD AA         swp a  
0486   0705 93 80         test al, $80  
0487   0707 FD AA         swp a  
0488   0709 C6 0E 07      jz skip_invert_a_22  
0489   070C FD 95         neg a 
0490   070E             skip_invert_a_22:   
0491   070E FD AB         swp b
0492   0710 FD 93 80      test bl, $80  
0493   0713 FD AB         swp b
0494   0715 C6 1A 07      jz skip_invert_b_22  
0495   0718 FD 97         neg b 
0496   071A             skip_invert_b_22:   
0497   071A AC            mul a, b ; *
0498   071B FD 78         mov g, a
0499   071D 11            mov a, b
0500   071E EA            pop bl
0501   071F FD 93 80      test bl, $80
0502   0722 C6 2F 07      jz _same_signs_22
0503   0725 2F            mov bl, al
0504   0726 95            not a
0505   0727 FD 97         neg b
0506   0729 5B 00 00      adc a, 0
0507   072C FD 78         mov g, a
0508   072E 11            mov a, b
0509   072F             _same_signs_22:
0510   072F FD 38         mov c, g
0511   0731 27            mov b, a
0512   0732 FD F1         pop g
0513   0734 E4            pop a
0514   0735             ; --- END FACTORS
0515   0735 E7            pop d
0516   0736 FD 43         mov [d], b
0517   0738             ; if (*x == 0) 
0518   0738             _if23_cond:
0519   0738 FA F5 FF      lea d, [bp + -11] ; $x
0520   073B 2A            mov b, [d]
0521   073C 38 00 00      mov c, 0
0522   073F 74            mov d, b
0523   0740 32            mov bl, [d]
0524   0741 A7 00         mov bh, 0
0525   0743 38 00 00      mov c, 0
0526   0746             ; --- START RELATIONAL
0527   0746 D7            push a
0528   0747 11            mov a, b
0529   0748 FD 2E 00 00   mov32 cb, $00000000
0529   074C 00 00 
0530   074E B0            cmp a, b
0531   074F FD 71         seq ; ==
0532   0751 E4            pop a
0533   0752             ; --- END RELATIONAL
0534   0752 C0 00 00      cmp b, 0
0535   0755 C6 64 07      je _if23_exit
0536   0758             _if23_TRUE:
0537   0758             ; return v; 
0538   0758 FA FF FF      lea d, [bp + -1] ; $v
0539   075B 2A            mov b, [d]
0540   075C 38 00 00      mov c, 0
0541   075F F9            leave
0542   0760 09            ret
0543   0761 0A 64 07      jmp _if23_exit
0544   0764             _if23_exit:
0545   0764             ; if (*x++ != '.') 
0546   0764             _if24_cond:
0547   0764 FA F5 FF      lea d, [bp + -11] ; $x
0548   0767 2A            mov b, [d]
0549   0768 38 00 00      mov c, 0
0550   076B FD 77         inc b
0551   076D FA F5 FF      lea d, [bp + -11] ; $x
0552   0770 FD 43         mov [d], b
0553   0772 FD 7D         dec b
0554   0774 74            mov d, b
0555   0775 32            mov bl, [d]
0556   0776 A7 00         mov bh, 0
0557   0778 38 00 00      mov c, 0
0558   077B             ; --- START RELATIONAL
0559   077B D7            push a
0560   077C 11            mov a, b
0561   077D FD 2E 2E 00   mov32 cb, $0000002e
0561   0781 00 00 
0562   0783 B0            cmp a, b
0563   0784 FD 72         sneq ; !=
0564   0786 E4            pop a
0565   0787             ; --- END RELATIONAL
0566   0787 C0 00 00      cmp b, 0
0567   078A C6 98 07      je _if24_exit
0568   078D             _if24_TRUE:
0569   078D             ; return -1; 
0570   078D FD 2E FF FF   mov32 cb, $ffffffff
0570   0791 FF FF 
0571   0793 F9            leave
0572   0794 09            ret
0573   0795 0A 98 07      jmp _if24_exit
0574   0798             _if24_exit:
0575   0798             ; if (!is_digit(*x)) 
0576   0798             _if25_cond:
0577   0798             ; --- START FUNCTION CALL
0578   0798 FA F5 FF      lea d, [bp + -11] ; $x
0579   079B 2A            mov b, [d]
0580   079C 38 00 00      mov c, 0
0581   079F 74            mov d, b
0582   07A0 32            mov bl, [d]
0583   07A1 A7 00         mov bh, 0
0584   07A3 38 00 00      mov c, 0
0585   07A6 DD            push bl
0586   07A7 07 75 6B      call is_digit
0587   07AA 51 01 00      add sp, 1
0588   07AD             ; --- END FUNCTION CALL
0589   07AD C0 00 00      cmp b, 0
0590   07B0 C6 BE 07      je _if25_exit
0591   07B3             _if25_TRUE:
0592   07B3             ; return -1; 
0593   07B3 FD 2E FF FF   mov32 cb, $ffffffff
0593   07B7 FF FF 
0594   07B9 F9            leave
0595   07BA 09            ret
0596   07BB 0A BE 07      jmp _if25_exit
0597   07BE             _if25_exit:
0598   07BE             ; v = v + 10 * (*x++ - '0'); 
0599   07BE FA FF FF      lea d, [bp + -1] ; $v
0600   07C1 DA            push d
0601   07C2 FA FF FF      lea d, [bp + -1] ; $v
0602   07C5 2A            mov b, [d]
0603   07C6 38 00 00      mov c, 0
0604   07C9             ; --- START TERMS
0605   07C9 D7            push a
0606   07CA 11            mov a, b
0607   07CB FD 2E 0A 00   mov32 cb, $0000000a
0607   07CF 00 00 
0608   07D1             ; --- START FACTORS
0609   07D1 D7            push a
0610   07D2 FD D8         push g
0611   07D4 11            mov a, b
0612   07D5 FD 7A         mov g, c
0613   07D7 FA F5 FF      lea d, [bp + -11] ; $x
0614   07DA 2A            mov b, [d]
0615   07DB 38 00 00      mov c, 0
0616   07DE FD 77         inc b
0617   07E0 FA F5 FF      lea d, [bp + -11] ; $x
0618   07E3 FD 43         mov [d], b
0619   07E5 FD 7D         dec b
0620   07E7 74            mov d, b
0621   07E8 32            mov bl, [d]
0622   07E9 A7 00         mov bh, 0
0623   07EB 38 00 00      mov c, 0
0624   07EE             ; --- START TERMS
0625   07EE D7            push a
0626   07EF 11            mov a, b
0627   07F0 FD 2E 30 00   mov32 cb, $00000030
0627   07F4 00 00 
0628   07F6 60            sub a, b
0629   07F7 27            mov b, a
0630   07F8 E4            pop a
0631   07F9             ; --- END TERMS
0632   07F9 D7            push a     ; save left operand
0633   07FA 8E            xor a, b   ; xor sign bits
0634   07FB FD AA         swp a      ; swap bytes
0635   07FD 83            mov cl, al ; save result of xor into 'dl'
0636   07FE E4            pop a      ; restore left side operator
0637   07FF DF            push cl    ; save result of xor above
0638   0800 FD AA         swp a  
0639   0802 93 80         test al, $80  
0640   0804 FD AA         swp a  
0641   0806 C6 0B 08      jz skip_invert_a_27  
0642   0809 FD 95         neg a 
0643   080B             skip_invert_a_27:   
0644   080B FD AB         swp b
0645   080D FD 93 80      test bl, $80  
0646   0810 FD AB         swp b
0647   0812 C6 17 08      jz skip_invert_b_27  
0648   0815 FD 97         neg b 
0649   0817             skip_invert_b_27:   
0650   0817 AC            mul a, b ; *
0651   0818 FD 78         mov g, a
0652   081A 11            mov a, b
0653   081B EA            pop bl
0654   081C FD 93 80      test bl, $80
0655   081F C6 2C 08      jz _same_signs_27
0656   0822 2F            mov bl, al
0657   0823 95            not a
0658   0824 FD 97         neg b
0659   0826 5B 00 00      adc a, 0
0660   0829 FD 78         mov g, a
0661   082B 11            mov a, b
0662   082C             _same_signs_27:
0663   082C FD 38         mov c, g
0664   082E 27            mov b, a
0665   082F FD F1         pop g
0666   0831 E4            pop a
0667   0832             ; --- END FACTORS
0668   0832 56            add b, a
0669   0833 E4            pop a
0670   0834             ; --- END TERMS
0671   0834 E7            pop d
0672   0835 FD 43         mov [d], b
0673   0837             ; if (!*x) 
0674   0837             _if28_cond:
0675   0837 FA F5 FF      lea d, [bp + -11] ; $x
0676   083A 2A            mov b, [d]
0677   083B 38 00 00      mov c, 0
0678   083E 74            mov d, b
0679   083F 32            mov bl, [d]
0680   0840 A7 00         mov bh, 0
0681   0842 38 00 00      mov c, 0
0682   0845 C0 00 00      cmp b, 0
0683   0848 FD 71         seq ; !
0684   084A C0 00 00      cmp b, 0
0685   084D C6 5C 08      je _if28_exit
0686   0850             _if28_TRUE:
0687   0850             ; return v; 
0688   0850 FA FF FF      lea d, [bp + -1] ; $v
0689   0853 2A            mov b, [d]
0690   0854 38 00 00      mov c, 0
0691   0857 F9            leave
0692   0858 09            ret
0693   0859 0A 5C 08      jmp _if28_exit
0694   085C             _if28_exit:
0695   085C             ; if (!is_digit(*x)) 
0696   085C             _if29_cond:
0697   085C             ; --- START FUNCTION CALL
0698   085C FA F5 FF      lea d, [bp + -11] ; $x
0699   085F 2A            mov b, [d]
0700   0860 38 00 00      mov c, 0
0701   0863 74            mov d, b
0702   0864 32            mov bl, [d]
0703   0865 A7 00         mov bh, 0
0704   0867 38 00 00      mov c, 0
0705   086A DD            push bl
0706   086B 07 75 6B      call is_digit
0707   086E 51 01 00      add sp, 1
0708   0871             ; --- END FUNCTION CALL
0709   0871 C0 00 00      cmp b, 0
0710   0874 C6 82 08      je _if29_exit
0711   0877             _if29_TRUE:
0712   0877             ; return -1; 
0713   0877 FD 2E FF FF   mov32 cb, $ffffffff
0713   087B FF FF 
0714   087D F9            leave
0715   087E 09            ret
0716   087F 0A 82 08      jmp _if29_exit
0717   0882             _if29_exit:
0718   0882             ; v = v + *x++ - '0'; 
0719   0882 FA FF FF      lea d, [bp + -1] ; $v
0720   0885 DA            push d
0721   0886 FA FF FF      lea d, [bp + -1] ; $v
0722   0889 2A            mov b, [d]
0723   088A 38 00 00      mov c, 0
0724   088D             ; --- START TERMS
0725   088D D7            push a
0726   088E 11            mov a, b
0727   088F FA F5 FF      lea d, [bp + -11] ; $x
0728   0892 2A            mov b, [d]
0729   0893 38 00 00      mov c, 0
0730   0896 FD 77         inc b
0731   0898 FA F5 FF      lea d, [bp + -11] ; $x
0732   089B FD 43         mov [d], b
0733   089D FD 7D         dec b
0734   089F 74            mov d, b
0735   08A0 32            mov bl, [d]
0736   08A1 A7 00         mov bh, 0
0737   08A3 38 00 00      mov c, 0
0738   08A6 56            add b, a
0739   08A7 11            mov a, b
0740   08A8 FD 2E 30 00   mov32 cb, $00000030
0740   08AC 00 00 
0741   08AE 60            sub a, b
0742   08AF 27            mov b, a
0743   08B0 E4            pop a
0744   08B1             ; --- END TERMS
0745   08B1 E7            pop d
0746   08B2 FD 43         mov [d], b
0747   08B4             ; return v; 
0748   08B4 FA FF FF      lea d, [bp + -1] ; $v
0749   08B7 2A            mov b, [d]
0750   08B8 38 00 00      mov c, 0
0751   08BB F9            leave
0752   08BC 09            ret
0753   08BD             
0754   08BD             input_int:
0755   08BD F8 00 00      enter 0 ; (push bp; mov bp, sp)
0756   08C0             ; char x[8]; 
0757   08C0 52 08 00      sub sp, 8
0758   08C3             ; input(x, 8); 
0759   08C3             ; --- START FUNCTION CALL
0760   08C3 FD 2E 08 00   mov32 cb, $00000008
0760   08C7 00 00 
0761   08C9 DD            push bl
0762   08CA FA F9 FF      lea d, [bp + -7] ; $x
0763   08CD 2D            mov b, d
0764   08CE 38 00 00      mov c, 0
0765   08D1 FD AB         swp b
0766   08D3 D8            push b
0767   08D4 07 83 05      call input
0768   08D7 51 03 00      add sp, 3
0769   08DA             ; --- END FUNCTION CALL
0770   08DA             ; if (!is_digit(*x)) 
0771   08DA             _if30_cond:
0772   08DA             ; --- START FUNCTION CALL
0773   08DA FA F9 FF      lea d, [bp + -7] ; $x
0774   08DD 2D            mov b, d
0775   08DE 38 00 00      mov c, 0
0776   08E1 74            mov d, b
0777   08E2 32            mov bl, [d]
0778   08E3 A7 00         mov bh, 0
0779   08E5 38 00 00      mov c, 0
0780   08E8 DD            push bl
0781   08E9 07 75 6B      call is_digit
0782   08EC 51 01 00      add sp, 1
0783   08EF             ; --- END FUNCTION CALL
0784   08EF C0 00 00      cmp b, 0
0785   08F2 C6 00 09      je _if30_exit
0786   08F5             _if30_TRUE:
0787   08F5             ; return -1; 
0788   08F5 FD 2E FF FF   mov32 cb, $ffffffff
0788   08F9 FF FF 
0789   08FB F9            leave
0790   08FC 09            ret
0791   08FD 0A 00 09      jmp _if30_exit
0792   0900             _if30_exit:
0793   0900             ; return atoi(x); 
0794   0900             ; --- START FUNCTION CALL
0795   0900 FA F9 FF      lea d, [bp + -7] ; $x
0796   0903 2D            mov b, d
0797   0904 38 00 00      mov c, 0
0798   0907 FD AB         swp b
0799   0909 D8            push b
0800   090A 07 DA 6B      call atoi
0801   090D 51 02 00      add sp, 2
0802   0910             ; --- END FUNCTION CALL
0803   0910 F9            leave
0804   0911 09            ret
0805   0912             
0806   0912             print100:
0807   0912 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0808   0915             ; static char buf[16]; 
0809   0915 52 10 00      sub sp, 16
0810   0918             ; char *p; 
0811   0918 52 02 00      sub sp, 2
0812   091B             ; *p = buf; 
0813   091B FA FF FF      lea d, [bp + -1] ; $p
0814   091E 2A            mov b, [d]
0815   091F 38 00 00      mov c, 0
0816   0922 D8            push b
0817   0923 3B 92 70      mov d, st_print100_buf_dt ; static buf
0818   0926 2D            mov b, d
0819   0927 38 00 00      mov c, 0
0820   092A E7            pop d
0821   092B FD 3E         mov [d], bl
0822   092D             ; if (v < 0) { 
0823   092D             _if31_cond:
0824   092D FA 05 00      lea d, [bp + 5] ; $v
0825   0930 2A            mov b, [d]
0826   0931 38 00 00      mov c, 0
0827   0934             ; --- START RELATIONAL
0828   0934 D7            push a
0829   0935 11            mov a, b
0830   0936 FD 2E 00 00   mov32 cb, $00000000
0830   093A 00 00 
0831   093C B0            cmp a, b
0832   093D FD 73         slt ; < (signed)
0833   093F E4            pop a
0834   0940             ; --- END RELATIONAL
0835   0940 C0 00 00      cmp b, 0
0836   0943 C6 73 09      je _if31_exit
0837   0946             _if31_TRUE:
0838   0946             ; v = -v; 
0839   0946 FA 05 00      lea d, [bp + 5] ; $v
0840   0949 DA            push d
0841   094A FA 05 00      lea d, [bp + 5] ; $v
0842   094D 2A            mov b, [d]
0843   094E 38 00 00      mov c, 0
0844   0951 FD 97         neg b
0845   0953 E7            pop d
0846   0954 FD 43         mov [d], b
0847   0956             ; *p++ = '-'; 
0848   0956 FA FF FF      lea d, [bp + -1] ; $p
0849   0959 2A            mov b, [d]
0850   095A 38 00 00      mov c, 0
0851   095D FD 77         inc b
0852   095F FA FF FF      lea d, [bp + -1] ; $p
0853   0962 FD 43         mov [d], b
0854   0964 FD 7D         dec b
0855   0966 D8            push b
0856   0967 FD 2E 2D 00   mov32 cb, $0000002d
0856   096B 00 00 
0857   096D E7            pop d
0858   096E FD 3E         mov [d], bl
0859   0970 0A 73 09      jmp _if31_exit
0860   0973             _if31_exit:
0861   0973             ; return buf; 
0862   0973 3B 92 70      mov d, st_print100_buf_dt ; static buf
0863   0976 2D            mov b, d
0864   0977 38 00 00      mov c, 0
0865   097A F9            leave
0866   097B 09            ret
0867   097C             
0868   097C             inoperable:
0869   097C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0870   097F             ; if (damage[u] < 0) { 
0871   097F             _if32_cond:
0872   097F 3B AE 6E      mov d, _damage_data ; $damage
0873   0982 D7            push a
0874   0983 DA            push d
0875   0984 FA 05 00      lea d, [bp + 5] ; $u
0876   0987 32            mov bl, [d]
0877   0988 A7 00         mov bh, 0
0878   098A 38 00 00      mov c, 0
0879   098D E7            pop d
0880   098E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0881   0992 E4            pop a
0882   0993 2A            mov b, [d]
0883   0994 38 00 00      mov c, 0
0884   0997             ; --- START RELATIONAL
0885   0997 D7            push a
0886   0998 11            mov a, b
0887   0999 FD 2E 00 00   mov32 cb, $00000000
0887   099D 00 00 
0888   099F B0            cmp a, b
0889   09A0 FD 73         slt ; < (signed)
0890   09A2 E4            pop a
0891   09A3             ; --- END RELATIONAL
0892   09A3 C0 00 00      cmp b, 0
0893   09A6 C6 FD 09      je _if32_exit
0894   09A9             _if32_TRUE:
0895   09A9             ; printf("%s %s inoperable.\n", 
0896   09A9             ; --- START FUNCTION CALL
0897   09A9             _ternary34_cond:
0898   09A9 FA 05 00      lea d, [bp + 5] ; $u
0899   09AC 32            mov bl, [d]
0900   09AD A7 00         mov bh, 0
0901   09AF 38 00 00      mov c, 0
0902   09B2             ; --- START RELATIONAL
0903   09B2 D7            push a
0904   09B3 11            mov a, b
0905   09B4 FD 2E 05 00   mov32 cb, $00000005
0905   09B8 00 00 
0906   09BA B0            cmp a, b
0907   09BB FD 71         seq ; ==
0908   09BD E4            pop a
0909   09BE             ; --- END RELATIONAL
0910   09BE C0 00 00      cmp b, 0
0911   09C1 C6 CA 09      je _ternary34_FALSE
0912   09C4             _ternary34_TRUE:
0913   09C4 26 C8 71      mov b, _s30 ; "are"
0914   09C7 0A CD 09      jmp _ternary34_exit
0915   09CA             _ternary34_FALSE:
0916   09CA 26 CC 71      mov b, _s31 ; "is"
0917   09CD             _ternary34_exit:
0918   09CD FD AB         swp b
0919   09CF D8            push b
0920   09D0             ; --- START FUNCTION CALL
0921   09D0 FA 05 00      lea d, [bp + 5] ; $u
0922   09D3 32            mov bl, [d]
0923   09D4 A7 00         mov bh, 0
0924   09D6 38 00 00      mov c, 0
0925   09D9 AB            snex b
0926   09DA FD AB         swp b
0927   09DC D8            push b
0928   09DD 07 9F 59      call get_device_name
0929   09E0 51 02 00      add sp, 2
0930   09E3             ; --- END FUNCTION CALL
0931   09E3 FD AB         swp b
0932   09E5 D8            push b
0933   09E6 26 CF 71      mov b, _s32 ; "%s %s inoperable.\n"
0934   09E9 FD AB         swp b
0935   09EB D8            push b
0936   09EC 07 B4 60      call printf
0937   09EF 51 06 00      add sp, 6
0938   09F2             ; --- END FUNCTION CALL
0939   09F2             ; return 1; 
0940   09F2 FD 2E 01 00   mov32 cb, $00000001
0940   09F6 00 00 
0941   09F8 F9            leave
0942   09F9 09            ret
0943   09FA 0A FD 09      jmp _if32_exit
0944   09FD             _if32_exit:
0945   09FD             ; return 0; 
0946   09FD FD 2E 00 00   mov32 cb, $00000000
0946   0A01 00 00 
0947   0A03 F9            leave
0948   0A04 09            ret
0949   0A05             
0950   0A05             intro:
0951   0A05 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0952   0A08             ; showfile("startrek.intro"); 
0953   0A08             ; --- START FUNCTION CALL
0954   0A08 26 E2 71      mov b, _s33 ; "startrek.intro"
0955   0A0B FD AB         swp b
0956   0A0D D8            push b
0957   0A0E 07 52 5E      call showfile
0958   0A11 51 02 00      add sp, 2
0959   0A14             ; --- END FUNCTION CALL
0960   0A14             ; if (yesno()) 
0961   0A14             _if35_cond:
0962   0A14             ; --- START FUNCTION CALL
0963   0A14 07 31 06      call yesno
0964   0A17 C0 00 00      cmp b, 0
0965   0A1A C6 2C 0A      je _if35_exit
0966   0A1D             _if35_TRUE:
0967   0A1D             ; showfile("startrek.doc"); 
0968   0A1D             ; --- START FUNCTION CALL
0969   0A1D 26 F1 71      mov b, _s34 ; "startrek.doc"
0970   0A20 FD AB         swp b
0971   0A22 D8            push b
0972   0A23 07 52 5E      call showfile
0973   0A26 51 02 00      add sp, 2
0974   0A29             ; --- END FUNCTION CALL
0975   0A29 0A 2C 0A      jmp _if35_exit
0976   0A2C             _if35_exit:
0977   0A2C             ; showfile("startrek.logo"); 
0978   0A2C             ; --- START FUNCTION CALL
0979   0A2C 26 FE 71      mov b, _s35 ; "startrek.logo"
0980   0A2F FD AB         swp b
0981   0A31 D8            push b
0982   0A32 07 52 5E      call showfile
0983   0A35 51 02 00      add sp, 2
0984   0A38             ; --- END FUNCTION CALL
0985   0A38             ; stardate = TO_FIXED((get_rand(20) + 20) * 100); 
0986   0A38 3B C6 6E      mov d, _stardate ; $stardate
0987   0A3B DA            push d
0988   0A3C             ; --- START FUNCTION CALL
0989   0A3C             ; --- START FUNCTION CALL
0990   0A3C FD 2E 14 00   mov32 cb, $00000014
0990   0A40 00 00 
0991   0A42 FD AB         swp b
0992   0A44 D8            push b
0993   0A45 07 FF 04      call get_rand
0994   0A48 51 02 00      add sp, 2
0995   0A4B             ; --- END FUNCTION CALL
0996   0A4B             ; --- START TERMS
0997   0A4B D7            push a
0998   0A4C 11            mov a, b
0999   0A4D FD 2E 14 00   mov32 cb, $00000014
0999   0A51 00 00 
1000   0A53 56            add b, a
1001   0A54 E4            pop a
1002   0A55             ; --- END TERMS
1003   0A55             ; --- START FACTORS
1004   0A55 D7            push a
1005   0A56 FD D8         push g
1006   0A58 11            mov a, b
1007   0A59 FD 7A         mov g, c
1008   0A5B FD 2E 64 00   mov32 cb, $00000064
1008   0A5F 00 00 
1009   0A61 D7            push a     ; save left operand
1010   0A62 8E            xor a, b   ; xor sign bits
1011   0A63 FD AA         swp a      ; swap bytes
1012   0A65 83            mov cl, al ; save result of xor into 'dl'
1013   0A66 E4            pop a      ; restore left side operator
1014   0A67 DF            push cl    ; save result of xor above
1015   0A68 FD AA         swp a  
1016   0A6A 93 80         test al, $80  
1017   0A6C FD AA         swp a  
1018   0A6E C6 73 0A      jz skip_invert_a_39  
1019   0A71 FD 95         neg a 
1020   0A73             skip_invert_a_39:   
1021   0A73 FD AB         swp b
1022   0A75 FD 93 80      test bl, $80  
1023   0A78 FD AB         swp b
1024   0A7A C6 7F 0A      jz skip_invert_b_39  
1025   0A7D FD 97         neg b 
1026   0A7F             skip_invert_b_39:   
1027   0A7F AC            mul a, b ; *
1028   0A80 FD 78         mov g, a
1029   0A82 11            mov a, b
1030   0A83 EA            pop bl
1031   0A84 FD 93 80      test bl, $80
1032   0A87 C6 94 0A      jz _same_signs_39
1033   0A8A 2F            mov bl, al
1034   0A8B 95            not a
1035   0A8C FD 97         neg b
1036   0A8E 5B 00 00      adc a, 0
1037   0A91 FD 78         mov g, a
1038   0A93 11            mov a, b
1039   0A94             _same_signs_39:
1040   0A94 FD 38         mov c, g
1041   0A96 27            mov b, a
1042   0A97 FD F1         pop g
1043   0A99 E4            pop a
1044   0A9A             ; --- END FACTORS
1045   0A9A FD AB         swp b
1046   0A9C D8            push b
1047   0A9D 07 17 04      call TO_FIXED
1048   0AA0 51 02 00      add sp, 2
1049   0AA3             ; --- END FUNCTION CALL
1050   0AA3 E7            pop d
1051   0AA4 FD 43         mov [d], b
1052   0AA6 F9            leave
1053   0AA7 09            ret
1054   0AA8             
1055   0AA8             new_game:
1056   0AA8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1057   0AAB             ; char cmd[4]; 
1058   0AAB 52 04 00      sub sp, 4
1059   0AAE             ; initialize(); 
1060   0AAE             ; --- START FUNCTION CALL
1061   0AAE 07 67 0D      call initialize
1062   0AB1             ; new_quadrant(); 
1063   0AB1             ; --- START FUNCTION CALL
1064   0AB1 07 A6 12      call new_quadrant
1065   0AB4             ; short_range_scan(); 
1066   0AB4             ; --- START FUNCTION CALL
1067   0AB4 07 94 25      call short_range_scan
1068   0AB7             ; while (1) { 
1069   0AB7             _while40_cond:
1070   0AB7 FD 2E 01 00   mov32 cb, $00000001
1070   0ABB 00 00 
1071   0ABD C0 00 00      cmp b, 0
1072   0AC0 C6 65 0D      je _while40_exit
1073   0AC3             _while40_block:
1074   0AC3             ; if (shield + energy <= 10 && (energy < 10 || damage[7] < 0)) { 
1075   0AC3             _if41_cond:
1076   0AC3 3B A7 6E      mov d, _shield ; $shield
1077   0AC6 2A            mov b, [d]
1078   0AC7 38 00 00      mov c, 0
1079   0ACA             ; --- START TERMS
1080   0ACA D7            push a
1081   0ACB 11            mov a, b
1082   0ACC 3B EC 6D      mov d, _energy ; $energy
1083   0ACF 2A            mov b, [d]
1084   0AD0 38 00 00      mov c, 0
1085   0AD3 56            add b, a
1086   0AD4 E4            pop a
1087   0AD5             ; --- END TERMS
1088   0AD5             ; --- START RELATIONAL
1089   0AD5 D7            push a
1090   0AD6 11            mov a, b
1091   0AD7 FD 2E 0A 00   mov32 cb, $0000000a
1091   0ADB 00 00 
1092   0ADD B0            cmp a, b
1093   0ADE FD 74         sle ; <= (signed)
1094   0AE0 E4            pop a
1095   0AE1             ; --- END RELATIONAL
1096   0AE1             ; --- START LOGICAL AND
1097   0AE1 D7            push a
1098   0AE2 11            mov a, b
1099   0AE3 3B EC 6D      mov d, _energy ; $energy
1100   0AE6 2A            mov b, [d]
1101   0AE7 38 00 00      mov c, 0
1102   0AEA             ; --- START RELATIONAL
1103   0AEA D7            push a
1104   0AEB 11            mov a, b
1105   0AEC FD 2E 0A 00   mov32 cb, $0000000a
1105   0AF0 00 00 
1106   0AF2 B0            cmp a, b
1107   0AF3 FD 73         slt ; < (signed)
1108   0AF5 E4            pop a
1109   0AF6             ; --- END RELATIONAL
1110   0AF6             ; --- START LOGICAL OR
1111   0AF6 D7            push a
1112   0AF7 11            mov a, b
1113   0AF8 3B AE 6E      mov d, _damage_data ; $damage
1114   0AFB D7            push a
1115   0AFC DA            push d
1116   0AFD FD 2E 07 00   mov32 cb, $00000007
1116   0B01 00 00 
1117   0B03 E7            pop d
1118   0B04 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1119   0B08 E4            pop a
1120   0B09 2A            mov b, [d]
1121   0B0A 38 00 00      mov c, 0
1122   0B0D             ; --- START RELATIONAL
1123   0B0D D7            push a
1124   0B0E 11            mov a, b
1125   0B0F FD 2E 00 00   mov32 cb, $00000000
1125   0B13 00 00 
1126   0B15 B0            cmp a, b
1127   0B16 FD 73         slt ; < (signed)
1128   0B18 E4            pop a
1129   0B19             ; --- END RELATIONAL
1130   0B19 FD A8         sor a, b ; ||
1131   0B1B E4            pop a
1132   0B1C             ; --- END LOGICAL OR
1133   0B1C FD A7         sand a, b
1134   0B1E E4            pop a
1135   0B1F             ; --- END LOGICAL AND
1136   0B1F C0 00 00      cmp b, 0
1137   0B22 C6 37 0B      je _if41_exit
1138   0B25             _if41_TRUE:
1139   0B25             ; showfile("startrek.fatal"); 
1140   0B25             ; --- START FUNCTION CALL
1141   0B25 26 0C 72      mov b, _s36 ; "startrek.fatal"
1142   0B28 FD AB         swp b
1143   0B2A D8            push b
1144   0B2B 07 52 5E      call showfile
1145   0B2E 51 02 00      add sp, 2
1146   0B31             ; --- END FUNCTION CALL
1147   0B31             ; end_of_time(); 
1148   0B31             ; --- START FUNCTION CALL
1149   0B31 07 0E 4F      call end_of_time
1150   0B34 0A 37 0B      jmp _if41_exit
1151   0B37             _if41_exit:
1152   0B37             ; puts("Command? "); 
1153   0B37             ; --- START FUNCTION CALL
1154   0B37 26 1B 72      mov b, _s37 ; "Command? "
1155   0B3A FD AB         swp b
1156   0B3C D8            push b
1157   0B3D 07 C8 69      call puts
1158   0B40 51 02 00      add sp, 2
1159   0B43             ; --- END FUNCTION CALL
1160   0B43             ; input(cmd, 4); 
1161   0B43             ; --- START FUNCTION CALL
1162   0B43 FD 2E 04 00   mov32 cb, $00000004
1162   0B47 00 00 
1163   0B49 DD            push bl
1164   0B4A FA FD FF      lea d, [bp + -3] ; $cmd
1165   0B4D 2D            mov b, d
1166   0B4E 38 00 00      mov c, 0
1167   0B51 FD AB         swp b
1168   0B53 D8            push b
1169   0B54 07 83 05      call input
1170   0B57 51 03 00      add sp, 3
1171   0B5A             ; --- END FUNCTION CALL
1172   0B5A             ; putchar('\n'); 
1173   0B5A             ; --- START FUNCTION CALL
1174   0B5A FD 2E 0A 00   mov32 cb, $0000000a
1174   0B5E 00 00 
1175   0B60 DD            push bl
1176   0B61 07 33 65      call putchar
1177   0B64 51 01 00      add sp, 1
1178   0B67             ; --- END FUNCTION CALL
1179   0B67             ; if (!strncmp(cmd, "nav", 3)) 
1180   0B67             _if42_cond:
1181   0B67             ; --- START FUNCTION CALL
1182   0B67 FD 2E 03 00   mov32 cb, $00000003
1182   0B6B 00 00 
1183   0B6D FD AB         swp b
1184   0B6F D8            push b
1185   0B70 26 25 72      mov b, _s38 ; "nav"
1186   0B73 FD AB         swp b
1187   0B75 D8            push b
1188   0B76 FA FD FF      lea d, [bp + -3] ; $cmd
1189   0B79 2D            mov b, d
1190   0B7A 38 00 00      mov c, 0
1191   0B7D FD AB         swp b
1192   0B7F D8            push b
1193   0B80 07 4E 6A      call strncmp
1194   0B83 51 06 00      add sp, 6
1195   0B86             ; --- END FUNCTION CALL
1196   0B86 C0 00 00      cmp b, 0
1197   0B89 C6 92 0B      je _if42_else
1198   0B8C             _if42_TRUE:
1199   0B8C             ; course_control(); 
1200   0B8C             ; --- START FUNCTION CALL
1201   0B8C 07 1A 17      call course_control
1202   0B8F 0A 62 0D      jmp _if42_exit
1203   0B92             _if42_else:
1204   0B92             ; if (!strncmp(cmd, "srs", 3)) 
1205   0B92             _if43_cond:
1206   0B92             ; --- START FUNCTION CALL
1207   0B92 FD 2E 03 00   mov32 cb, $00000003
1207   0B96 00 00 
1208   0B98 FD AB         swp b
1209   0B9A D8            push b
1210   0B9B 26 29 72      mov b, _s39 ; "srs"
1211   0B9E FD AB         swp b
1212   0BA0 D8            push b
1213   0BA1 FA FD FF      lea d, [bp + -3] ; $cmd
1214   0BA4 2D            mov b, d
1215   0BA5 38 00 00      mov c, 0
1216   0BA8 FD AB         swp b
1217   0BAA D8            push b
1218   0BAB 07 4E 6A      call strncmp
1219   0BAE 51 06 00      add sp, 6
1220   0BB1             ; --- END FUNCTION CALL
1221   0BB1 C0 00 00      cmp b, 0
1222   0BB4 C6 BD 0B      je _if43_else
1223   0BB7             _if43_TRUE:
1224   0BB7             ; short_range_scan(); 
1225   0BB7             ; --- START FUNCTION CALL
1226   0BB7 07 94 25      call short_range_scan
1227   0BBA 0A 62 0D      jmp _if43_exit
1228   0BBD             _if43_else:
1229   0BBD             ; if (!strncmp(cmd, "lrs", 3)) 
1230   0BBD             _if44_cond:
1231   0BBD             ; --- START FUNCTION CALL
1232   0BBD FD 2E 03 00   mov32 cb, $00000003
1232   0BC1 00 00 
1233   0BC3 FD AB         swp b
1234   0BC5 D8            push b
1235   0BC6 26 2D 72      mov b, _s40 ; "lrs"
1236   0BC9 FD AB         swp b
1237   0BCB D8            push b
1238   0BCC FA FD FF      lea d, [bp + -3] ; $cmd
1239   0BCF 2D            mov b, d
1240   0BD0 38 00 00      mov c, 0
1241   0BD3 FD AB         swp b
1242   0BD5 D8            push b
1243   0BD6 07 4E 6A      call strncmp
1244   0BD9 51 06 00      add sp, 6
1245   0BDC             ; --- END FUNCTION CALL
1246   0BDC C0 00 00      cmp b, 0
1247   0BDF C6 E8 0B      je _if44_else
1248   0BE2             _if44_TRUE:
1249   0BE2             ; long_range_scan(); 
1250   0BE2             ; --- START FUNCTION CALL
1251   0BE2 07 3E 2B      call long_range_scan
1252   0BE5 0A 62 0D      jmp _if44_exit
1253   0BE8             _if44_else:
1254   0BE8             ; if (!strncmp(cmd, "pha", 3)) 
1255   0BE8             _if45_cond:
1256   0BE8             ; --- START FUNCTION CALL
1257   0BE8 FD 2E 03 00   mov32 cb, $00000003
1257   0BEC 00 00 
1258   0BEE FD AB         swp b
1259   0BF0 D8            push b
1260   0BF1 26 31 72      mov b, _s41 ; "pha"
1261   0BF4 FD AB         swp b
1262   0BF6 D8            push b
1263   0BF7 FA FD FF      lea d, [bp + -3] ; $cmd
1264   0BFA 2D            mov b, d
1265   0BFB 38 00 00      mov c, 0
1266   0BFE FD AB         swp b
1267   0C00 D8            push b
1268   0C01 07 4E 6A      call strncmp
1269   0C04 51 06 00      add sp, 6
1270   0C07             ; --- END FUNCTION CALL
1271   0C07 C0 00 00      cmp b, 0
1272   0C0A C6 13 0C      je _if45_else
1273   0C0D             _if45_TRUE:
1274   0C0D             ; phaser_control(); 
1275   0C0D             ; --- START FUNCTION CALL
1276   0C0D 07 E6 2D      call phaser_control
1277   0C10 0A 62 0D      jmp _if45_exit
1278   0C13             _if45_else:
1279   0C13             ; if (!strncmp(cmd, "tor", 3)) 
1280   0C13             _if46_cond:
1281   0C13             ; --- START FUNCTION CALL
1282   0C13 FD 2E 03 00   mov32 cb, $00000003
1282   0C17 00 00 
1283   0C19 FD AB         swp b
1284   0C1B D8            push b
1285   0C1C 26 35 72      mov b, _s42 ; "tor"
1286   0C1F FD AB         swp b
1287   0C21 D8            push b
1288   0C22 FA FD FF      lea d, [bp + -3] ; $cmd
1289   0C25 2D            mov b, d
1290   0C26 38 00 00      mov c, 0
1291   0C29 FD AB         swp b
1292   0C2B D8            push b
1293   0C2C 07 4E 6A      call strncmp
1294   0C2F 51 06 00      add sp, 6
1295   0C32             ; --- END FUNCTION CALL
1296   0C32 C0 00 00      cmp b, 0
1297   0C35 C6 3E 0C      je _if46_else
1298   0C38             _if46_TRUE:
1299   0C38             ; photon_torpedoes(); 
1300   0C38             ; --- START FUNCTION CALL
1301   0C38 07 59 33      call photon_torpedoes
1302   0C3B 0A 62 0D      jmp _if46_exit
1303   0C3E             _if46_else:
1304   0C3E             ; if (!strncmp(cmd, "shi", 3)) 
1305   0C3E             _if47_cond:
1306   0C3E             ; --- START FUNCTION CALL
1307   0C3E FD 2E 03 00   mov32 cb, $00000003
1307   0C42 00 00 
1308   0C44 FD AB         swp b
1309   0C46 D8            push b
1310   0C47 26 39 72      mov b, _s43 ; "shi"
1311   0C4A FD AB         swp b
1312   0C4C D8            push b
1313   0C4D FA FD FF      lea d, [bp + -3] ; $cmd
1314   0C50 2D            mov b, d
1315   0C51 38 00 00      mov c, 0
1316   0C54 FD AB         swp b
1317   0C56 D8            push b
1318   0C57 07 4E 6A      call strncmp
1319   0C5A 51 06 00      add sp, 6
1320   0C5D             ; --- END FUNCTION CALL
1321   0C5D C0 00 00      cmp b, 0
1322   0C60 C6 69 0C      je _if47_else
1323   0C63             _if47_TRUE:
1324   0C63             ; shield_control(); 
1325   0C63             ; --- START FUNCTION CALL
1326   0C63 07 E6 3E      call shield_control
1327   0C66 0A 62 0D      jmp _if47_exit
1328   0C69             _if47_else:
1329   0C69             ; if (!strncmp(cmd, "dam", 3)) 
1330   0C69             _if48_cond:
1331   0C69             ; --- START FUNCTION CALL
1332   0C69 FD 2E 03 00   mov32 cb, $00000003
1332   0C6D 00 00 
1333   0C6F FD AB         swp b
1334   0C71 D8            push b
1335   0C72 26 3D 72      mov b, _s44 ; "dam"
1336   0C75 FD AB         swp b
1337   0C77 D8            push b
1338   0C78 FA FD FF      lea d, [bp + -3] ; $cmd
1339   0C7B 2D            mov b, d
1340   0C7C 38 00 00      mov c, 0
1341   0C7F FD AB         swp b
1342   0C81 D8            push b
1343   0C82 07 4E 6A      call strncmp
1344   0C85 51 06 00      add sp, 6
1345   0C88             ; --- END FUNCTION CALL
1346   0C88 C0 00 00      cmp b, 0
1347   0C8B C6 94 0C      je _if48_else
1348   0C8E             _if48_TRUE:
1349   0C8E             ; damage_control(); 
1350   0C8E             ; --- START FUNCTION CALL
1351   0C8E 07 FE 3B      call damage_control
1352   0C91 0A 62 0D      jmp _if48_exit
1353   0C94             _if48_else:
1354   0C94             ; if (!strncmp(cmd, "com", 3)) 
1355   0C94             _if49_cond:
1356   0C94             ; --- START FUNCTION CALL
1357   0C94 FD 2E 03 00   mov32 cb, $00000003
1357   0C98 00 00 
1358   0C9A FD AB         swp b
1359   0C9C D8            push b
1360   0C9D 26 41 72      mov b, _s45 ; "com"
1361   0CA0 FD AB         swp b
1362   0CA2 D8            push b
1363   0CA3 FA FD FF      lea d, [bp + -3] ; $cmd
1364   0CA6 2D            mov b, d
1365   0CA7 38 00 00      mov c, 0
1366   0CAA FD AB         swp b
1367   0CAC D8            push b
1368   0CAD 07 4E 6A      call strncmp
1369   0CB0 51 06 00      add sp, 6
1370   0CB3             ; --- END FUNCTION CALL
1371   0CB3 C0 00 00      cmp b, 0
1372   0CB6 C6 BF 0C      je _if49_else
1373   0CB9             _if49_TRUE:
1374   0CB9             ; library_computer(); 
1375   0CB9             ; --- START FUNCTION CALL
1376   0CB9 07 EF 3F      call library_computer
1377   0CBC 0A 62 0D      jmp _if49_exit
1378   0CBF             _if49_else:
1379   0CBF             ; if (!strncmp(cmd, "xxx", 3)) 
1380   0CBF             _if50_cond:
1381   0CBF             ; --- START FUNCTION CALL
1382   0CBF FD 2E 03 00   mov32 cb, $00000003
1382   0CC3 00 00 
1383   0CC5 FD AB         swp b
1384   0CC7 D8            push b
1385   0CC8 26 45 72      mov b, _s46 ; "xxx"
1386   0CCB FD AB         swp b
1387   0CCD D8            push b
1388   0CCE FA FD FF      lea d, [bp + -3] ; $cmd
1389   0CD1 2D            mov b, d
1390   0CD2 38 00 00      mov c, 0
1391   0CD5 FD AB         swp b
1392   0CD7 D8            push b
1393   0CD8 07 4E 6A      call strncmp
1394   0CDB 51 06 00      add sp, 6
1395   0CDE             ; --- END FUNCTION CALL
1396   0CDE C0 00 00      cmp b, 0
1397   0CE1 C6 EA 0C      je _if50_else
1398   0CE4             _if50_TRUE:
1399   0CE4             ; resign_commision(); 
1400   0CE4             ; --- START FUNCTION CALL
1401   0CE4 07 35 4F      call resign_commision
1402   0CE7 0A 62 0D      jmp _if50_exit
1403   0CEA             _if50_else:
1404   0CEA             ; puts("Enter one of the following:\n"); 
1405   0CEA             ; --- START FUNCTION CALL
1406   0CEA 26 49 72      mov b, _s47 ; "Enter one of the following:\n"
1407   0CED FD AB         swp b
1408   0CEF D8            push b
1409   0CF0 07 C8 69      call puts
1410   0CF3 51 02 00      add sp, 2
1411   0CF6             ; --- END FUNCTION CALL
1412   0CF6             ; puts("  nav - To Set Course"); 
1413   0CF6             ; --- START FUNCTION CALL
1414   0CF6 26 66 72      mov b, _s48 ; "  nav - To Set Course"
1415   0CF9 FD AB         swp b
1416   0CFB D8            push b
1417   0CFC 07 C8 69      call puts
1418   0CFF 51 02 00      add sp, 2
1419   0D02             ; --- END FUNCTION CALL
1420   0D02             ; puts("  srs - Short Range Sensors"); 
1421   0D02             ; --- START FUNCTION CALL
1422   0D02 26 7C 72      mov b, _s49 ; "  srs - Short Range Sensors"
1423   0D05 FD AB         swp b
1424   0D07 D8            push b
1425   0D08 07 C8 69      call puts
1426   0D0B 51 02 00      add sp, 2
1427   0D0E             ; --- END FUNCTION CALL
1428   0D0E             ; puts("  lrs - Long Range Sensors"); 
1429   0D0E             ; --- START FUNCTION CALL
1430   0D0E 26 98 72      mov b, _s50 ; "  lrs - Long Range Sensors"
1431   0D11 FD AB         swp b
1432   0D13 D8            push b
1433   0D14 07 C8 69      call puts
1434   0D17 51 02 00      add sp, 2
1435   0D1A             ; --- END FUNCTION CALL
1436   0D1A             ; puts("  pha - Phasers"); 
1437   0D1A             ; --- START FUNCTION CALL
1438   0D1A 26 B3 72      mov b, _s51 ; "  pha - Phasers"
1439   0D1D FD AB         swp b
1440   0D1F D8            push b
1441   0D20 07 C8 69      call puts
1442   0D23 51 02 00      add sp, 2
1443   0D26             ; --- END FUNCTION CALL
1444   0D26             ; puts("  tor - Photon Torpedoes"); 
1445   0D26             ; --- START FUNCTION CALL
1446   0D26 26 C3 72      mov b, _s52 ; "  tor - Photon Torpedoes"
1447   0D29 FD AB         swp b
1448   0D2B D8            push b
1449   0D2C 07 C8 69      call puts
1450   0D2F 51 02 00      add sp, 2
1451   0D32             ; --- END FUNCTION CALL
1452   0D32             ; puts("  shi - Shield Control"); 
1453   0D32             ; --- START FUNCTION CALL
1454   0D32 26 DC 72      mov b, _s53 ; "  shi - Shield Control"
1455   0D35 FD AB         swp b
1456   0D37 D8            push b
1457   0D38 07 C8 69      call puts
1458   0D3B 51 02 00      add sp, 2
1459   0D3E             ; --- END FUNCTION CALL
1460   0D3E             ; puts("  dam - Damage Control"); 
1461   0D3E             ; --- START FUNCTION CALL
1462   0D3E 26 F3 72      mov b, _s54 ; "  dam - Damage Control"
1463   0D41 FD AB         swp b
1464   0D43 D8            push b
1465   0D44 07 C8 69      call puts
1466   0D47 51 02 00      add sp, 2
1467   0D4A             ; --- END FUNCTION CALL
1468   0D4A             ; puts("  com - Library Computer"); 
1469   0D4A             ; --- START FUNCTION CALL
1470   0D4A 26 0A 73      mov b, _s55 ; "  com - Library Computer"
1471   0D4D FD AB         swp b
1472   0D4F D8            push b
1473   0D50 07 C8 69      call puts
1474   0D53 51 02 00      add sp, 2
1475   0D56             ; --- END FUNCTION CALL
1476   0D56             ; puts("  xxx - Resign Command\n"); 
1477   0D56             ; --- START FUNCTION CALL
1478   0D56 26 23 73      mov b, _s56 ; "  xxx - Resign Command\n"
1479   0D59 FD AB         swp b
1480   0D5B D8            push b
1481   0D5C 07 C8 69      call puts
1482   0D5F 51 02 00      add sp, 2
1483   0D62             ; --- END FUNCTION CALL
1484   0D62             _if50_exit:
1485   0D62             _if49_exit:
1486   0D62             _if48_exit:
1487   0D62             _if47_exit:
1488   0D62             _if46_exit:
1489   0D62             _if45_exit:
1490   0D62             _if44_exit:
1491   0D62             _if43_exit:
1492   0D62             _if42_exit:
1493   0D62 0A B7 0A      jmp _while40_cond
1494   0D65             _while40_exit:
1495   0D65 F9            leave
1496   0D66 09            ret
1497   0D67             
1498   0D67             initialize:
1499   0D67 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1500   0D6A             ; int i, j; 
1501   0D6A 52 02 00      sub sp, 2
1502   0D6D 52 02 00      sub sp, 2
1503   0D70             ; unsigned char        yp, xp; 
1504   0D70 52 01 00      sub sp, 1
1505   0D73 52 01 00      sub sp, 1
1506   0D76             ; unsigned char        r; 
1507   0D76 52 01 00      sub sp, 1
1508   0D79             ; time_start = FROM_FIXED(stardate); 
1509   0D79 3B AA 6E      mov d, _time_start ; $time_start
1510   0D7C DA            push d
1511   0D7D             ; --- START FUNCTION CALL
1512   0D7D 3B C6 6E      mov d, _stardate ; $stardate
1513   0D80 2A            mov b, [d]
1514   0D81 38 00 00      mov c, 0
1515   0D84 FD AB         swp b
1516   0D86 D8            push b
1517   0D87 07 68 04      call FROM_FIXED
1518   0D8A 51 02 00      add sp, 2
1519   0D8D             ; --- END FUNCTION CALL
1520   0D8D E7            pop d
1521   0D8E FD 43         mov [d], b
1522   0D90             ; time_up = 25 + get_rand(10); 
1523   0D90 3B AC 6E      mov d, _time_up ; $time_up
1524   0D93 DA            push d
1525   0D94 FD 2E 19 00   mov32 cb, $00000019
1525   0D98 00 00 
1526   0D9A             ; --- START TERMS
1527   0D9A D7            push a
1528   0D9B 11            mov a, b
1529   0D9C             ; --- START FUNCTION CALL
1530   0D9C FD 2E 0A 00   mov32 cb, $0000000a
1530   0DA0 00 00 
1531   0DA2 FD AB         swp b
1532   0DA4 D8            push b
1533   0DA5 07 FF 04      call get_rand
1534   0DA8 51 02 00      add sp, 2
1535   0DAB             ; --- END FUNCTION CALL
1536   0DAB 56            add b, a
1537   0DAC E4            pop a
1538   0DAD             ; --- END TERMS
1539   0DAD E7            pop d
1540   0DAE FD 43         mov [d], b
1541   0DB0             ; docked = 0; 
1542   0DB0 3B EB 6D      mov d, _docked ; $docked
1543   0DB3 DA            push d
1544   0DB4 FD 2E 00 00   mov32 cb, $00000000
1544   0DB8 00 00 
1545   0DBA E7            pop d
1546   0DBB FD 3E         mov [d], bl
1547   0DBD             ; energy = energy0; 
1548   0DBD 3B EC 6D      mov d, _energy ; $energy
1549   0DC0 DA            push d
1550   0DC1 3B EE 6D      mov d, _energy0 ; $energy0
1551   0DC4 2A            mov b, [d]
1552   0DC5 38 00 00      mov c, 0
1553   0DC8 E7            pop d
1554   0DC9 FD 43         mov [d], b
1555   0DCB             ; torps = torps0; 
1556   0DCB 3B A1 6E      mov d, _torps ; $torps
1557   0DCE DA            push d
1558   0DCF 3B A2 6E      mov d, _torps0 ; $torps0
1559   0DD2 32            mov bl, [d]
1560   0DD3 A7 00         mov bh, 0
1561   0DD5 38 00 00      mov c, 0
1562   0DD8 E7            pop d
1563   0DD9 FD 3E         mov [d], bl
1564   0DDB             ; shield = 0; 
1565   0DDB 3B A7 6E      mov d, _shield ; $shield
1566   0DDE DA            push d
1567   0DDF FD 2E 00 00   mov32 cb, $00000000
1567   0DE3 00 00 
1568   0DE5 E7            pop d
1569   0DE6 FD 43         mov [d], b
1570   0DE8             ; quad_y = rand8(); 
1571   0DE8 3B A3 6E      mov d, _quad_y ; $quad_y
1572   0DEB DA            push d
1573   0DEC             ; --- START FUNCTION CALL
1574   0DEC 07 6F 05      call rand8
1575   0DEF E7            pop d
1576   0DF0 FD 43         mov [d], b
1577   0DF2             ; quad_x = rand8(); 
1578   0DF2 3B A5 6E      mov d, _quad_x ; $quad_x
1579   0DF5 DA            push d
1580   0DF6             ; --- START FUNCTION CALL
1581   0DF6 07 6F 05      call rand8
1582   0DF9 E7            pop d
1583   0DFA FD 43         mov [d], b
1584   0DFC             ; ship_y = TO_FIXED00(rand8()); 
1585   0DFC 3B C2 6E      mov d, _ship_y ; $ship_y
1586   0DFF DA            push d
1587   0E00             ; --- START FUNCTION CALL
1588   0E00             ; --- START FUNCTION CALL
1589   0E00 07 6F 05      call rand8
1590   0E03 AB            snex b
1591   0E04 FD AB         swp b
1592   0E06 D8            push b
1593   0E07 07 8B 04      call TO_FIXED00
1594   0E0A 51 02 00      add sp, 2
1595   0E0D             ; --- END FUNCTION CALL
1596   0E0D E7            pop d
1597   0E0E FD 43         mov [d], b
1598   0E10             ; ship_x = TO_FIXED00(rand8()); 
1599   0E10 3B C4 6E      mov d, _ship_x ; $ship_x
1600   0E13 DA            push d
1601   0E14             ; --- START FUNCTION CALL
1602   0E14             ; --- START FUNCTION CALL
1603   0E14 07 6F 05      call rand8
1604   0E17 AB            snex b
1605   0E18 FD AB         swp b
1606   0E1A D8            push b
1607   0E1B 07 8B 04      call TO_FIXED00
1608   0E1E 51 02 00      add sp, 2
1609   0E21             ; --- END FUNCTION CALL
1610   0E21 E7            pop d
1611   0E22 FD 43         mov [d], b
1612   0E24             ; for (i = 1; i <= 8; i++) 
1613   0E24             _for51_init:
1614   0E24 FA FF FF      lea d, [bp + -1] ; $i
1615   0E27 DA            push d
1616   0E28 FD 2E 01 00   mov32 cb, $00000001
1616   0E2C 00 00 
1617   0E2E E7            pop d
1618   0E2F FD 43         mov [d], b
1619   0E31             _for51_cond:
1620   0E31 FA FF FF      lea d, [bp + -1] ; $i
1621   0E34 2A            mov b, [d]
1622   0E35 38 00 00      mov c, 0
1623   0E38             ; --- START RELATIONAL
1624   0E38 D7            push a
1625   0E39 11            mov a, b
1626   0E3A FD 2E 08 00   mov32 cb, $00000008
1626   0E3E 00 00 
1627   0E40 B0            cmp a, b
1628   0E41 FD 74         sle ; <= (signed)
1629   0E43 E4            pop a
1630   0E44             ; --- END RELATIONAL
1631   0E44 C0 00 00      cmp b, 0
1632   0E47 C6 79 0E      je _for51_exit
1633   0E4A             _for51_block:
1634   0E4A             ; damage[i] = 0; 
1635   0E4A 3B AE 6E      mov d, _damage_data ; $damage
1636   0E4D D7            push a
1637   0E4E DA            push d
1638   0E4F FA FF FF      lea d, [bp + -1] ; $i
1639   0E52 2A            mov b, [d]
1640   0E53 38 00 00      mov c, 0
1641   0E56 E7            pop d
1642   0E57 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1643   0E5B E4            pop a
1644   0E5C DA            push d
1645   0E5D FD 2E 00 00   mov32 cb, $00000000
1645   0E61 00 00 
1646   0E63 E7            pop d
1647   0E64 FD 43         mov [d], b
1648   0E66             _for51_update:
1649   0E66 FA FF FF      lea d, [bp + -1] ; $i
1650   0E69 2A            mov b, [d]
1651   0E6A 38 00 00      mov c, 0
1652   0E6D 11            mov a, b
1653   0E6E FD 77         inc b
1654   0E70 FA FF FF      lea d, [bp + -1] ; $i
1655   0E73 FD 43         mov [d], b
1656   0E75 27            mov b, a
1657   0E76 0A 31 0E      jmp _for51_cond
1658   0E79             _for51_exit:
1659   0E79             ; for (i = 1; i <= 8; i++) { 
1660   0E79             _for52_init:
1661   0E79 FA FF FF      lea d, [bp + -1] ; $i
1662   0E7C DA            push d
1663   0E7D FD 2E 01 00   mov32 cb, $00000001
1663   0E81 00 00 
1664   0E83 E7            pop d
1665   0E84 FD 43         mov [d], b
1666   0E86             _for52_cond:
1667   0E86 FA FF FF      lea d, [bp + -1] ; $i
1668   0E89 2A            mov b, [d]
1669   0E8A 38 00 00      mov c, 0
1670   0E8D             ; --- START RELATIONAL
1671   0E8D D7            push a
1672   0E8E 11            mov a, b
1673   0E8F FD 2E 08 00   mov32 cb, $00000008
1673   0E93 00 00 
1674   0E95 B0            cmp a, b
1675   0E96 FD 74         sle ; <= (signed)
1676   0E98 E4            pop a
1677   0E99             ; --- END RELATIONAL
1678   0E99 C0 00 00      cmp b, 0
1679   0E9C C6 5F 10      je _for52_exit
1680   0E9F             _for52_block:
1681   0E9F             ; for (j = 1; j <= 8; j++) { 
1682   0E9F             _for53_init:
1683   0E9F FA FD FF      lea d, [bp + -3] ; $j
1684   0EA2 DA            push d
1685   0EA3 FD 2E 01 00   mov32 cb, $00000001
1685   0EA7 00 00 
1686   0EA9 E7            pop d
1687   0EAA FD 43         mov [d], b
1688   0EAC             _for53_cond:
1689   0EAC FA FD FF      lea d, [bp + -3] ; $j
1690   0EAF 2A            mov b, [d]
1691   0EB0 38 00 00      mov c, 0
1692   0EB3             ; --- START RELATIONAL
1693   0EB3 D7            push a
1694   0EB4 11            mov a, b
1695   0EB5 FD 2E 08 00   mov32 cb, $00000008
1695   0EB9 00 00 
1696   0EBB B0            cmp a, b
1697   0EBC FD 74         sle ; <= (signed)
1698   0EBE E4            pop a
1699   0EBF             ; --- END RELATIONAL
1700   0EBF C0 00 00      cmp b, 0
1701   0EC2 C6 4C 10      je _for53_exit
1702   0EC5             _for53_block:
1703   0EC5             ; r = get_rand(100); 
1704   0EC5 FA FA FF      lea d, [bp + -6] ; $r
1705   0EC8 DA            push d
1706   0EC9             ; --- START FUNCTION CALL
1707   0EC9 FD 2E 64 00   mov32 cb, $00000064
1707   0ECD 00 00 
1708   0ECF FD AB         swp b
1709   0ED1 D8            push b
1710   0ED2 07 FF 04      call get_rand
1711   0ED5 51 02 00      add sp, 2
1712   0ED8             ; --- END FUNCTION CALL
1713   0ED8 E7            pop d
1714   0ED9 FD 3E         mov [d], bl
1715   0EDB             ; klingons = 0; 
1716   0EDB 3B 9E 6E      mov d, _klingons ; $klingons
1717   0EDE DA            push d
1718   0EDF FD 2E 00 00   mov32 cb, $00000000
1718   0EE3 00 00 
1719   0EE5 E7            pop d
1720   0EE6 FD 3E         mov [d], bl
1721   0EE8             ; if (r > 98) 
1722   0EE8             _if54_cond:
1723   0EE8 FA FA FF      lea d, [bp + -6] ; $r
1724   0EEB 32            mov bl, [d]
1725   0EEC A7 00         mov bh, 0
1726   0EEE 38 00 00      mov c, 0
1727   0EF1             ; --- START RELATIONAL
1728   0EF1 D7            push a
1729   0EF2 11            mov a, b
1730   0EF3 FD 2E 62 00   mov32 cb, $00000062
1730   0EF7 00 00 
1731   0EF9 B0            cmp a, b
1732   0EFA FD 81         sgu ; > (unsigned)
1733   0EFC E4            pop a
1734   0EFD             ; --- END RELATIONAL
1735   0EFD C0 00 00      cmp b, 0
1736   0F00 C6 13 0F      je _if54_else
1737   0F03             _if54_TRUE:
1738   0F03             ; klingons = 3; 
1739   0F03 3B 9E 6E      mov d, _klingons ; $klingons
1740   0F06 DA            push d
1741   0F07 FD 2E 03 00   mov32 cb, $00000003
1741   0F0B 00 00 
1742   0F0D E7            pop d
1743   0F0E FD 3E         mov [d], bl
1744   0F10 0A 69 0F      jmp _if54_exit
1745   0F13             _if54_else:
1746   0F13             ; if (r > 95) 
1747   0F13             _if55_cond:
1748   0F13 FA FA FF      lea d, [bp + -6] ; $r
1749   0F16 32            mov bl, [d]
1750   0F17 A7 00         mov bh, 0
1751   0F19 38 00 00      mov c, 0
1752   0F1C             ; --- START RELATIONAL
1753   0F1C D7            push a
1754   0F1D 11            mov a, b
1755   0F1E FD 2E 5F 00   mov32 cb, $0000005f
1755   0F22 00 00 
1756   0F24 B0            cmp a, b
1757   0F25 FD 81         sgu ; > (unsigned)
1758   0F27 E4            pop a
1759   0F28             ; --- END RELATIONAL
1760   0F28 C0 00 00      cmp b, 0
1761   0F2B C6 3E 0F      je _if55_else
1762   0F2E             _if55_TRUE:
1763   0F2E             ; klingons = 2; 
1764   0F2E 3B 9E 6E      mov d, _klingons ; $klingons
1765   0F31 DA            push d
1766   0F32 FD 2E 02 00   mov32 cb, $00000002
1766   0F36 00 00 
1767   0F38 E7            pop d
1768   0F39 FD 3E         mov [d], bl
1769   0F3B 0A 69 0F      jmp _if55_exit
1770   0F3E             _if55_else:
1771   0F3E             ; if (r > 80) 
1772   0F3E             _if56_cond:
1773   0F3E FA FA FF      lea d, [bp + -6] ; $r
1774   0F41 32            mov bl, [d]
1775   0F42 A7 00         mov bh, 0
1776   0F44 38 00 00      mov c, 0
1777   0F47             ; --- START RELATIONAL
1778   0F47 D7            push a
1779   0F48 11            mov a, b
1780   0F49 FD 2E 50 00   mov32 cb, $00000050
1780   0F4D 00 00 
1781   0F4F B0            cmp a, b
1782   0F50 FD 81         sgu ; > (unsigned)
1783   0F52 E4            pop a
1784   0F53             ; --- END RELATIONAL
1785   0F53 C0 00 00      cmp b, 0
1786   0F56 C6 69 0F      je _if56_exit
1787   0F59             _if56_TRUE:
1788   0F59             ; klingons = 1; 
1789   0F59 3B 9E 6E      mov d, _klingons ; $klingons
1790   0F5C DA            push d
1791   0F5D FD 2E 01 00   mov32 cb, $00000001
1791   0F61 00 00 
1792   0F63 E7            pop d
1793   0F64 FD 3E         mov [d], bl
1794   0F66 0A 69 0F      jmp _if56_exit
1795   0F69             _if56_exit:
1796   0F69             _if55_exit:
1797   0F69             _if54_exit:
1798   0F69             ; klingons_left = klingons_left + klingons; 
1799   0F69 3B A0 6E      mov d, _klingons_left ; $klingons_left
1800   0F6C DA            push d
1801   0F6D 3B A0 6E      mov d, _klingons_left ; $klingons_left
1802   0F70 32            mov bl, [d]
1803   0F71 A7 00         mov bh, 0
1804   0F73 38 00 00      mov c, 0
1805   0F76             ; --- START TERMS
1806   0F76 D7            push a
1807   0F77 11            mov a, b
1808   0F78 3B 9E 6E      mov d, _klingons ; $klingons
1809   0F7B 32            mov bl, [d]
1810   0F7C A7 00         mov bh, 0
1811   0F7E 38 00 00      mov c, 0
1812   0F81 56            add b, a
1813   0F82 E4            pop a
1814   0F83             ; --- END TERMS
1815   0F83 E7            pop d
1816   0F84 FD 3E         mov [d], bl
1817   0F86             ; starbases = 0; 
1818   0F86 3B C9 6D      mov d, _starbases ; $starbases
1819   0F89 DA            push d
1820   0F8A FD 2E 00 00   mov32 cb, $00000000
1820   0F8E 00 00 
1821   0F90 E7            pop d
1822   0F91 FD 3E         mov [d], bl
1823   0F93             ; if (get_rand(100) > 96) 
1824   0F93             _if57_cond:
1825   0F93             ; --- START FUNCTION CALL
1826   0F93 FD 2E 64 00   mov32 cb, $00000064
1826   0F97 00 00 
1827   0F99 FD AB         swp b
1828   0F9B D8            push b
1829   0F9C 07 FF 04      call get_rand
1830   0F9F 51 02 00      add sp, 2
1831   0FA2             ; --- END FUNCTION CALL
1832   0FA2             ; --- START RELATIONAL
1833   0FA2 D7            push a
1834   0FA3 11            mov a, b
1835   0FA4 FD 2E 60 00   mov32 cb, $00000060
1835   0FA8 00 00 
1836   0FAA B0            cmp a, b
1837   0FAB FD 7F         sgt ; >
1838   0FAD E4            pop a
1839   0FAE             ; --- END RELATIONAL
1840   0FAE C0 00 00      cmp b, 0
1841   0FB1 C6 C4 0F      je _if57_exit
1842   0FB4             _if57_TRUE:
1843   0FB4             ; starbases = 1; 
1844   0FB4 3B C9 6D      mov d, _starbases ; $starbases
1845   0FB7 DA            push d
1846   0FB8 FD 2E 01 00   mov32 cb, $00000001
1846   0FBC 00 00 
1847   0FBE E7            pop d
1848   0FBF FD 3E         mov [d], bl
1849   0FC1 0A C4 0F      jmp _if57_exit
1850   0FC4             _if57_exit:
1851   0FC4             ; starbases_left = starbases_left + starbases; 
1852   0FC4 3B CC 6D      mov d, _starbases_left ; $starbases_left
1853   0FC7 DA            push d
1854   0FC8 3B CC 6D      mov d, _starbases_left ; $starbases_left
1855   0FCB 32            mov bl, [d]
1856   0FCC A7 00         mov bh, 0
1857   0FCE 38 00 00      mov c, 0
1858   0FD1             ; --- START TERMS
1859   0FD1 D7            push a
1860   0FD2 11            mov a, b
1861   0FD3 3B C9 6D      mov d, _starbases ; $starbases
1862   0FD6 32            mov bl, [d]
1863   0FD7 A7 00         mov bh, 0
1864   0FD9 38 00 00      mov c, 0
1865   0FDC 56            add b, a
1866   0FDD E4            pop a
1867   0FDE             ; --- END TERMS
1868   0FDE E7            pop d
1869   0FDF FD 3E         mov [d], bl
1870   0FE1             ; map[i][j] = (klingons << 8) + (starbases << 4) + rand8(); 
1871   0FE1 3B F0 6D      mov d, _map_data ; $map
1872   0FE4 D7            push a
1873   0FE5 DA            push d
1874   0FE6 FA FF FF      lea d, [bp + -1] ; $i
1875   0FE9 2A            mov b, [d]
1876   0FEA 38 00 00      mov c, 0
1877   0FED E7            pop d
1878   0FEE FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1879   0FF2 DA            push d
1880   0FF3 FA FD FF      lea d, [bp + -3] ; $j
1881   0FF6 2A            mov b, [d]
1882   0FF7 38 00 00      mov c, 0
1883   0FFA E7            pop d
1884   0FFB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1885   0FFF E4            pop a
1886   1000 DA            push d
1887   1001 3B 9E 6E      mov d, _klingons ; $klingons
1888   1004 32            mov bl, [d]
1889   1005 A7 00         mov bh, 0
1890   1007 38 00 00      mov c, 0
1891   100A             ; --- START SHIFT
1892   100A D7            push a
1893   100B 11            mov a, b
1894   100C FD 2E 08 00   mov32 cb, $00000008
1894   1010 00 00 
1895   1012 FD 39         mov c, b
1896   1014 9D            shl a, cl
1897   1015 27            mov b, a
1898   1016 E4            pop a
1899   1017             ; --- END SHIFT
1900   1017             ; --- START TERMS
1901   1017 D7            push a
1902   1018 11            mov a, b
1903   1019 3B C9 6D      mov d, _starbases ; $starbases
1904   101C 32            mov bl, [d]
1905   101D A7 00         mov bh, 0
1906   101F 38 00 00      mov c, 0
1907   1022             ; --- START SHIFT
1908   1022 D7            push a
1909   1023 11            mov a, b
1910   1024 FD 2E 04 00   mov32 cb, $00000004
1910   1028 00 00 
1911   102A FD 39         mov c, b
1912   102C 9D            shl a, cl
1913   102D 27            mov b, a
1914   102E E4            pop a
1915   102F             ; --- END SHIFT
1916   102F 56            add b, a
1917   1030 11            mov a, b
1918   1031             ; --- START FUNCTION CALL
1919   1031 07 6F 05      call rand8
1920   1034 56            add b, a
1921   1035 E4            pop a
1922   1036             ; --- END TERMS
1923   1036 E7            pop d
1924   1037 FD 43         mov [d], b
1925   1039             _for53_update:
1926   1039 FA FD FF      lea d, [bp + -3] ; $j
1927   103C 2A            mov b, [d]
1928   103D 38 00 00      mov c, 0
1929   1040 11            mov a, b
1930   1041 FD 77         inc b
1931   1043 FA FD FF      lea d, [bp + -3] ; $j
1932   1046 FD 43         mov [d], b
1933   1048 27            mov b, a
1934   1049 0A AC 0E      jmp _for53_cond
1935   104C             _for53_exit:
1936   104C             _for52_update:
1937   104C FA FF FF      lea d, [bp + -1] ; $i
1938   104F 2A            mov b, [d]
1939   1050 38 00 00      mov c, 0
1940   1053 11            mov a, b
1941   1054 FD 77         inc b
1942   1056 FA FF FF      lea d, [bp + -1] ; $i
1943   1059 FD 43         mov [d], b
1944   105B 27            mov b, a
1945   105C 0A 86 0E      jmp _for52_cond
1946   105F             _for52_exit:
1947   105F             ; if (klingons_left > time_up) 
1948   105F             _if58_cond:
1949   105F 3B A0 6E      mov d, _klingons_left ; $klingons_left
1950   1062 32            mov bl, [d]
1951   1063 A7 00         mov bh, 0
1952   1065 38 00 00      mov c, 0
1953   1068             ; --- START RELATIONAL
1954   1068 D7            push a
1955   1069 11            mov a, b
1956   106A 3B AC 6E      mov d, _time_up ; $time_up
1957   106D 2A            mov b, [d]
1958   106E 38 00 00      mov c, 0
1959   1071 B0            cmp a, b
1960   1072 FD 81         sgu ; > (unsigned)
1961   1074 E4            pop a
1962   1075             ; --- END RELATIONAL
1963   1075 C0 00 00      cmp b, 0
1964   1078 C6 98 10      je _if58_exit
1965   107B             _if58_TRUE:
1966   107B             ; time_up = klingons_left + 1; 
1967   107B 3B AC 6E      mov d, _time_up ; $time_up
1968   107E DA            push d
1969   107F 3B A0 6E      mov d, _klingons_left ; $klingons_left
1970   1082 32            mov bl, [d]
1971   1083 A7 00         mov bh, 0
1972   1085 38 00 00      mov c, 0
1973   1088             ; --- START TERMS
1974   1088 D7            push a
1975   1089 11            mov a, b
1976   108A FD 2E 01 00   mov32 cb, $00000001
1976   108E 00 00 
1977   1090 56            add b, a
1978   1091 E4            pop a
1979   1092             ; --- END TERMS
1980   1092 E7            pop d
1981   1093 FD 43         mov [d], b
1982   1095 0A 98 10      jmp _if58_exit
1983   1098             _if58_exit:
1984   1098             ; if (starbases_left == 0) { 
1985   1098             _if59_cond:
1986   1098 3B CC 6D      mov d, _starbases_left ; $starbases_left
1987   109B 32            mov bl, [d]
1988   109C A7 00         mov bh, 0
1989   109E 38 00 00      mov c, 0
1990   10A1             ; --- START RELATIONAL
1991   10A1 D7            push a
1992   10A2 11            mov a, b
1993   10A3 FD 2E 00 00   mov32 cb, $00000000
1993   10A7 00 00 
1994   10A9 B0            cmp a, b
1995   10AA FD 71         seq ; ==
1996   10AC E4            pop a
1997   10AD             ; --- END RELATIONAL
1998   10AD C0 00 00      cmp b, 0
1999   10B0 C6 F4 11      je _if59_exit
2000   10B3             _if59_TRUE:
2001   10B3             ; yp = rand8(); 
2002   10B3 FA FC FF      lea d, [bp + -4] ; $yp
2003   10B6 DA            push d
2004   10B7             ; --- START FUNCTION CALL
2005   10B7 07 6F 05      call rand8
2006   10BA E7            pop d
2007   10BB FD 3E         mov [d], bl
2008   10BD             ; xp = rand8(); 
2009   10BD FA FB FF      lea d, [bp + -5] ; $xp
2010   10C0 DA            push d
2011   10C1             ; --- START FUNCTION CALL
2012   10C1 07 6F 05      call rand8
2013   10C4 E7            pop d
2014   10C5 FD 3E         mov [d], bl
2015   10C7             ; if (map[yp][xp] < 0x200) { 
2016   10C7             _if60_cond:
2017   10C7 3B F0 6D      mov d, _map_data ; $map
2018   10CA D7            push a
2019   10CB DA            push d
2020   10CC FA FC FF      lea d, [bp + -4] ; $yp
2021   10CF 32            mov bl, [d]
2022   10D0 A7 00         mov bh, 0
2023   10D2 38 00 00      mov c, 0
2024   10D5 E7            pop d
2025   10D6 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2026   10DA DA            push d
2027   10DB FA FB FF      lea d, [bp + -5] ; $xp
2028   10DE 32            mov bl, [d]
2029   10DF A7 00         mov bh, 0
2030   10E1 38 00 00      mov c, 0
2031   10E4 E7            pop d
2032   10E5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2033   10E9 E4            pop a
2034   10EA 2A            mov b, [d]
2035   10EB 38 00 00      mov c, 0
2036   10EE             ; --- START RELATIONAL
2037   10EE D7            push a
2038   10EF 11            mov a, b
2039   10F0 FD 2E 00 02   mov32 cb, $00000200
2039   10F4 00 00 
2040   10F6 B0            cmp a, b
2041   10F7 FD 75         slu ; < (unsigned)
2042   10F9 E4            pop a
2043   10FA             ; --- END RELATIONAL
2044   10FA C0 00 00      cmp b, 0
2045   10FD C6 7A 11      je _if60_exit
2046   1100             _if60_TRUE:
2047   1100             ; map[yp][xp] = map[yp][xp] + (1 << 8); 
2048   1100 3B F0 6D      mov d, _map_data ; $map
2049   1103 D7            push a
2050   1104 DA            push d
2051   1105 FA FC FF      lea d, [bp + -4] ; $yp
2052   1108 32            mov bl, [d]
2053   1109 A7 00         mov bh, 0
2054   110B 38 00 00      mov c, 0
2055   110E E7            pop d
2056   110F FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2057   1113 DA            push d
2058   1114 FA FB FF      lea d, [bp + -5] ; $xp
2059   1117 32            mov bl, [d]
2060   1118 A7 00         mov bh, 0
2061   111A 38 00 00      mov c, 0
2062   111D E7            pop d
2063   111E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2064   1122 E4            pop a
2065   1123 DA            push d
2066   1124 3B F0 6D      mov d, _map_data ; $map
2067   1127 D7            push a
2068   1128 DA            push d
2069   1129 FA FC FF      lea d, [bp + -4] ; $yp
2070   112C 32            mov bl, [d]
2071   112D A7 00         mov bh, 0
2072   112F 38 00 00      mov c, 0
2073   1132 E7            pop d
2074   1133 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2075   1137 DA            push d
2076   1138 FA FB FF      lea d, [bp + -5] ; $xp
2077   113B 32            mov bl, [d]
2078   113C A7 00         mov bh, 0
2079   113E 38 00 00      mov c, 0
2080   1141 E7            pop d
2081   1142 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2082   1146 E4            pop a
2083   1147 2A            mov b, [d]
2084   1148 38 00 00      mov c, 0
2085   114B             ; --- START TERMS
2086   114B D7            push a
2087   114C 11            mov a, b
2088   114D FD 2E 01 00   mov32 cb, $00000001
2088   1151 00 00 
2089   1153             ; --- START SHIFT
2090   1153 D7            push a
2091   1154 11            mov a, b
2092   1155 FD 2E 08 00   mov32 cb, $00000008
2092   1159 00 00 
2093   115B FD 39         mov c, b
2094   115D 9D            shl a, cl
2095   115E 27            mov b, a
2096   115F E4            pop a
2097   1160             ; --- END SHIFT
2098   1160 56            add b, a
2099   1161 E4            pop a
2100   1162             ; --- END TERMS
2101   1162 E7            pop d
2102   1163 FD 43         mov [d], b
2103   1165             ; klingons_left++; 
2104   1165 3B A0 6E      mov d, _klingons_left ; $klingons_left
2105   1168 32            mov bl, [d]
2106   1169 A7 00         mov bh, 0
2107   116B 38 00 00      mov c, 0
2108   116E FD 77         inc b
2109   1170 3B A0 6E      mov d, _klingons_left ; $klingons_left
2110   1173 FD 3E         mov [d], bl
2111   1175 FD 7D         dec b
2112   1177 0A 7A 11      jmp _if60_exit
2113   117A             _if60_exit:
2114   117A             ; map[yp][xp] = map[yp][xp] + (1 << 4); 
2115   117A 3B F0 6D      mov d, _map_data ; $map
2116   117D D7            push a
2117   117E DA            push d
2118   117F FA FC FF      lea d, [bp + -4] ; $yp
2119   1182 32            mov bl, [d]
2120   1183 A7 00         mov bh, 0
2121   1185 38 00 00      mov c, 0
2122   1188 E7            pop d
2123   1189 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2124   118D DA            push d
2125   118E FA FB FF      lea d, [bp + -5] ; $xp
2126   1191 32            mov bl, [d]
2127   1192 A7 00         mov bh, 0
2128   1194 38 00 00      mov c, 0
2129   1197 E7            pop d
2130   1198 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2131   119C E4            pop a
2132   119D DA            push d
2133   119E 3B F0 6D      mov d, _map_data ; $map
2134   11A1 D7            push a
2135   11A2 DA            push d
2136   11A3 FA FC FF      lea d, [bp + -4] ; $yp
2137   11A6 32            mov bl, [d]
2138   11A7 A7 00         mov bh, 0
2139   11A9 38 00 00      mov c, 0
2140   11AC E7            pop d
2141   11AD FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2142   11B1 DA            push d
2143   11B2 FA FB FF      lea d, [bp + -5] ; $xp
2144   11B5 32            mov bl, [d]
2145   11B6 A7 00         mov bh, 0
2146   11B8 38 00 00      mov c, 0
2147   11BB E7            pop d
2148   11BC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2149   11C0 E4            pop a
2150   11C1 2A            mov b, [d]
2151   11C2 38 00 00      mov c, 0
2152   11C5             ; --- START TERMS
2153   11C5 D7            push a
2154   11C6 11            mov a, b
2155   11C7 FD 2E 01 00   mov32 cb, $00000001
2155   11CB 00 00 
2156   11CD             ; --- START SHIFT
2157   11CD D7            push a
2158   11CE 11            mov a, b
2159   11CF FD 2E 04 00   mov32 cb, $00000004
2159   11D3 00 00 
2160   11D5 FD 39         mov c, b
2161   11D7 9D            shl a, cl
2162   11D8 27            mov b, a
2163   11D9 E4            pop a
2164   11DA             ; --- END SHIFT
2165   11DA 56            add b, a
2166   11DB E4            pop a
2167   11DC             ; --- END TERMS
2168   11DC E7            pop d
2169   11DD FD 43         mov [d], b
2170   11DF             ; starbases_left++; 
2171   11DF 3B CC 6D      mov d, _starbases_left ; $starbases_left
2172   11E2 32            mov bl, [d]
2173   11E3 A7 00         mov bh, 0
2174   11E5 38 00 00      mov c, 0
2175   11E8 FD 77         inc b
2176   11EA 3B CC 6D      mov d, _starbases_left ; $starbases_left
2177   11ED FD 3E         mov [d], bl
2178   11EF FD 7D         dec b
2179   11F1 0A F4 11      jmp _if59_exit
2180   11F4             _if59_exit:
2181   11F4             ; total_klingons = klingons_left; 
2182   11F4 3B 9F 6E      mov d, _total_klingons ; $total_klingons
2183   11F7 DA            push d
2184   11F8 3B A0 6E      mov d, _klingons_left ; $klingons_left
2185   11FB 32            mov bl, [d]
2186   11FC A7 00         mov bh, 0
2187   11FE 38 00 00      mov c, 0
2188   1201 E7            pop d
2189   1202 FD 3E         mov [d], bl
2190   1204             ; if (starbases_left != 1) { 
2191   1204             _if61_cond:
2192   1204 3B CC 6D      mov d, _starbases_left ; $starbases_left
2193   1207 32            mov bl, [d]
2194   1208 A7 00         mov bh, 0
2195   120A 38 00 00      mov c, 0
2196   120D             ; --- START RELATIONAL
2197   120D D7            push a
2198   120E 11            mov a, b
2199   120F FD 2E 01 00   mov32 cb, $00000001
2199   1213 00 00 
2200   1215 B0            cmp a, b
2201   1216 FD 72         sneq ; !=
2202   1218 E4            pop a
2203   1219             ; --- END RELATIONAL
2204   1219 C0 00 00      cmp b, 0
2205   121C C6 4E 12      je _if61_exit
2206   121F             _if61_TRUE:
2207   121F             ; strcpy(plural_2, "s"); 
2208   121F             ; --- START FUNCTION CALL
2209   121F 26 3B 73      mov b, _s57 ; "s"
2210   1222 FD AB         swp b
2211   1224 D8            push b
2212   1225 3B BF 6F      mov d, _plural_2_data ; $plural_2
2213   1228 2D            mov b, d
2214   1229 38 00 00      mov c, 0
2215   122C FD AB         swp b
2216   122E D8            push b
2217   122F 07 FC 5E      call strcpy
2218   1232 51 04 00      add sp, 4
2219   1235             ; --- END FUNCTION CALL
2220   1235             ; strcpy(plural, "are"); 
2221   1235             ; --- START FUNCTION CALL
2222   1235 26 C8 71      mov b, _s30 ; "are"
2223   1238 FD AB         swp b
2224   123A D8            push b
2225   123B 3B C1 6F      mov d, _plural_data ; $plural
2226   123E 2D            mov b, d
2227   123F 38 00 00      mov c, 0
2228   1242 FD AB         swp b
2229   1244 D8            push b
2230   1245 07 FC 5E      call strcpy
2231   1248 51 04 00      add sp, 4
2232   124B             ; --- END FUNCTION CALL
2233   124B 0A 4E 12      jmp _if61_exit
2234   124E             _if61_exit:
2235   124E             ; getchar(); 
2236   124E             ; --- START FUNCTION CALL
2237   124E 07 57 5E      call getchar
2238   1251 F9            leave
2239   1252 09            ret
2240   1253             
2241   1253             place_ship:
2242   1253 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2243   1256             ; quad[FROM_FIXED00(ship_y) - 1][FROM_FIXED00(ship_x) - 1] = 		4      ; 
2244   1256 3B C8 6E      mov d, _quad_data ; $quad
2245   1259 D7            push a
2246   125A DA            push d
2247   125B             ; --- START FUNCTION CALL
2248   125B 3B C2 6E      mov d, _ship_y ; $ship_y
2249   125E 2A            mov b, [d]
2250   125F 38 00 00      mov c, 0
2251   1262 FD AB         swp b
2252   1264 D8            push b
2253   1265 07 DC 04      call FROM_FIXED00
2254   1268 51 02 00      add sp, 2
2255   126B             ; --- END FUNCTION CALL
2256   126B             ; --- START TERMS
2257   126B D7            push a
2258   126C 11            mov a, b
2259   126D FD 2E 01 00   mov32 cb, $00000001
2259   1271 00 00 
2260   1273 60            sub a, b
2261   1274 27            mov b, a
2262   1275 E4            pop a
2263   1276             ; --- END TERMS
2264   1276 E7            pop d
2265   1277 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
2266   127B DA            push d
2267   127C             ; --- START FUNCTION CALL
2268   127C 3B C4 6E      mov d, _ship_x ; $ship_x
2269   127F 2A            mov b, [d]
2270   1280 38 00 00      mov c, 0
2271   1283 FD AB         swp b
2272   1285 D8            push b
2273   1286 07 DC 04      call FROM_FIXED00
2274   1289 51 02 00      add sp, 2
2275   128C             ; --- END FUNCTION CALL
2276   128C             ; --- START TERMS
2277   128C D7            push a
2278   128D 11            mov a, b
2279   128E FD 2E 01 00   mov32 cb, $00000001
2279   1292 00 00 
2280   1294 60            sub a, b
2281   1295 27            mov b, a
2282   1296 E4            pop a
2283   1297             ; --- END TERMS
2284   1297 E7            pop d
2285   1298 5A            add d, b
2286   1299 E4            pop a
2287   129A DA            push d
2288   129B FD 2E 04 00   mov32 cb, $00000004
2288   129F 00 00 
2289   12A1 E7            pop d
2290   12A2 FD 3E         mov [d], bl
2291   12A4 F9            leave
2292   12A5 09            ret
2293   12A6             
2294   12A6             new_quadrant:
2295   12A6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2296   12A9             ; int i; 
2297   12A9 52 02 00      sub sp, 2
2298   12AC             ; unsigned int         tmp; 
2299   12AC 52 02 00      sub sp, 2
2300   12AF             ; struct klingon *k; 
2301   12AF 52 02 00      sub sp, 2
2302   12B2             ; k = &kdata; 
2303   12B2 FA FB FF      lea d, [bp + -5] ; $k
2304   12B5 DA            push d
2305   12B6 3B 92 6E      mov d, _kdata_data ; $kdata
2306   12B9 2D            mov b, d
2307   12BA E7            pop d
2308   12BB FD 43         mov [d], b
2309   12BD             ; klingons = 0; 
2310   12BD 3B 9E 6E      mov d, _klingons ; $klingons
2311   12C0 DA            push d
2312   12C1 FD 2E 00 00   mov32 cb, $00000000
2312   12C5 00 00 
2313   12C7 E7            pop d
2314   12C8 FD 3E         mov [d], bl
2315   12CA             ; starbases = 0; 
2316   12CA 3B C9 6D      mov d, _starbases ; $starbases
2317   12CD DA            push d
2318   12CE FD 2E 00 00   mov32 cb, $00000000
2318   12D2 00 00 
2319   12D4 E7            pop d
2320   12D5 FD 3E         mov [d], bl
2321   12D7             ; stars = 0; 
2322   12D7 3B A9 6E      mov d, _stars ; $stars
2323   12DA DA            push d
2324   12DB FD 2E 00 00   mov32 cb, $00000000
2324   12DF 00 00 
2325   12E1 E7            pop d
2326   12E2 FD 3E         mov [d], bl
2327   12E4             ; d4 = get_rand(50) - 1; 
2328   12E4 3B C0 6E      mov d, _d4 ; $d4
2329   12E7 DA            push d
2330   12E8             ; --- START FUNCTION CALL
2331   12E8 FD 2E 32 00   mov32 cb, $00000032
2331   12EC 00 00 
2332   12EE FD AB         swp b
2333   12F0 D8            push b
2334   12F1 07 FF 04      call get_rand
2335   12F4 51 02 00      add sp, 2
2336   12F7             ; --- END FUNCTION CALL
2337   12F7             ; --- START TERMS
2338   12F7 D7            push a
2339   12F8 11            mov a, b
2340   12F9 FD 2E 01 00   mov32 cb, $00000001
2340   12FD 00 00 
2341   12FF 60            sub a, b
2342   1300 27            mov b, a
2343   1301 E4            pop a
2344   1302             ; --- END TERMS
2345   1302 E7            pop d
2346   1303 FD 43         mov [d], b
2347   1305             ; map[quad_y][quad_x] = map[quad_y][quad_x] |  0x1000		           ; 
2348   1305 3B F0 6D      mov d, _map_data ; $map
2349   1308 D7            push a
2350   1309 DA            push d
2351   130A 3B A3 6E      mov d, _quad_y ; $quad_y
2352   130D 2A            mov b, [d]
2353   130E 38 00 00      mov c, 0
2354   1311 E7            pop d
2355   1312 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2356   1316 DA            push d
2357   1317 3B A5 6E      mov d, _quad_x ; $quad_x
2358   131A 2A            mov b, [d]
2359   131B 38 00 00      mov c, 0
2360   131E E7            pop d
2361   131F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2362   1323 E4            pop a
2363   1324 DA            push d
2364   1325 3B F0 6D      mov d, _map_data ; $map
2365   1328 D7            push a
2366   1329 DA            push d
2367   132A 3B A3 6E      mov d, _quad_y ; $quad_y
2368   132D 2A            mov b, [d]
2369   132E 38 00 00      mov c, 0
2370   1331 E7            pop d
2371   1332 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2372   1336 DA            push d
2373   1337 3B A5 6E      mov d, _quad_x ; $quad_x
2374   133A 2A            mov b, [d]
2375   133B 38 00 00      mov c, 0
2376   133E E7            pop d
2377   133F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2378   1343 E4            pop a
2379   1344 2A            mov b, [d]
2380   1345 38 00 00      mov c, 0
2381   1348 D7            push a
2382   1349 11            mov a, b
2383   134A FD 2E 00 10   mov32 cb, $00001000
2383   134E 00 00 
2384   1350 FD 70         or b, a ; |
2385   1352 E4            pop a
2386   1353 E7            pop d
2387   1354 FD 43         mov [d], b
2388   1356             ; if (quad_y >= 1 && quad_y <= 8 && quad_x >= 1 && quad_x <= 8) { 
2389   1356             _if62_cond:
2390   1356 3B A3 6E      mov d, _quad_y ; $quad_y
2391   1359 2A            mov b, [d]
2392   135A 38 00 00      mov c, 0
2393   135D             ; --- START RELATIONAL
2394   135D D7            push a
2395   135E 11            mov a, b
2396   135F FD 2E 01 00   mov32 cb, $00000001
2396   1363 00 00 
2397   1365 B0            cmp a, b
2398   1366 FD 80         sge ; >=
2399   1368 E4            pop a
2400   1369             ; --- END RELATIONAL
2401   1369             ; --- START LOGICAL AND
2402   1369 D7            push a
2403   136A 11            mov a, b
2404   136B 3B A3 6E      mov d, _quad_y ; $quad_y
2405   136E 2A            mov b, [d]
2406   136F 38 00 00      mov c, 0
2407   1372             ; --- START RELATIONAL
2408   1372 D7            push a
2409   1373 11            mov a, b
2410   1374 FD 2E 08 00   mov32 cb, $00000008
2410   1378 00 00 
2411   137A B0            cmp a, b
2412   137B FD 74         sle ; <= (signed)
2413   137D E4            pop a
2414   137E             ; --- END RELATIONAL
2415   137E FD A7         sand a, b
2416   1380 11            mov a, b
2417   1381 3B A5 6E      mov d, _quad_x ; $quad_x
2418   1384 2A            mov b, [d]
2419   1385 38 00 00      mov c, 0
2420   1388             ; --- START RELATIONAL
2421   1388 D7            push a
2422   1389 11            mov a, b
2423   138A FD 2E 01 00   mov32 cb, $00000001
2423   138E 00 00 
2424   1390 B0            cmp a, b
2425   1391 FD 80         sge ; >=
2426   1393 E4            pop a
2427   1394             ; --- END RELATIONAL
2428   1394 FD A7         sand a, b
2429   1396 11            mov a, b
2430   1397 3B A5 6E      mov d, _quad_x ; $quad_x
2431   139A 2A            mov b, [d]
2432   139B 38 00 00      mov c, 0
2433   139E             ; --- START RELATIONAL
2434   139E D7            push a
2435   139F 11            mov a, b
2436   13A0 FD 2E 08 00   mov32 cb, $00000008
2436   13A4 00 00 
2437   13A6 B0            cmp a, b
2438   13A7 FD 74         sle ; <= (signed)
2439   13A9 E4            pop a
2440   13AA             ; --- END RELATIONAL
2441   13AA FD A7         sand a, b
2442   13AC E4            pop a
2443   13AD             ; --- END LOGICAL AND
2444   13AD C0 00 00      cmp b, 0
2445   13B0 C6 31 14      je _if62_exit
2446   13B3             _if62_TRUE:
2447   13B3             ; quadrant_name(0, quad_y, quad_x); 
2448   13B3             ; --- START FUNCTION CALL
2449   13B3 3B A5 6E      mov d, _quad_x ; $quad_x
2450   13B6 2A            mov b, [d]
2451   13B7 38 00 00      mov c, 0
2452   13BA DD            push bl
2453   13BB 3B A3 6E      mov d, _quad_y ; $quad_y
2454   13BE 2A            mov b, [d]
2455   13BF 38 00 00      mov c, 0
2456   13C2 DD            push bl
2457   13C3 FD 2E 00 00   mov32 cb, $00000000
2457   13C7 00 00 
2458   13C9 DD            push bl
2459   13CA 07 FB 59      call quadrant_name
2460   13CD 51 03 00      add sp, 3
2461   13D0             ; --- END FUNCTION CALL
2462   13D0             ; if (TO_FIXED(time_start) != stardate) 
2463   13D0             _if63_cond:
2464   13D0             ; --- START FUNCTION CALL
2465   13D0 3B AA 6E      mov d, _time_start ; $time_start
2466   13D3 2A            mov b, [d]
2467   13D4 38 00 00      mov c, 0
2468   13D7 FD AB         swp b
2469   13D9 D8            push b
2470   13DA 07 17 04      call TO_FIXED
2471   13DD 51 02 00      add sp, 2
2472   13E0             ; --- END FUNCTION CALL
2473   13E0             ; --- START RELATIONAL
2474   13E0 D7            push a
2475   13E1 11            mov a, b
2476   13E2 3B C6 6E      mov d, _stardate ; $stardate
2477   13E5 2A            mov b, [d]
2478   13E6 38 00 00      mov c, 0
2479   13E9 B0            cmp a, b
2480   13EA FD 72         sneq ; !=
2481   13EC E4            pop a
2482   13ED             ; --- END RELATIONAL
2483   13ED C0 00 00      cmp b, 0
2484   13F0 C6 0C 14      je _if63_else
2485   13F3             _if63_TRUE:
2486   13F3             ; printf("Now entering %s quadrant...\n\n", quadname); 
2487   13F3             ; --- START FUNCTION CALL
2488   13F3 3B 08 6F      mov d, _quadname_data ; $quadname
2489   13F6 2D            mov b, d
2490   13F7 38 00 00      mov c, 0
2491   13FA FD AB         swp b
2492   13FC D8            push b
2493   13FD 26 3D 73      mov b, _s58 ; "Now entering %s quadrant...\n\n"
2494   1400 FD AB         swp b
2495   1402 D8            push b
2496   1403 07 B4 60      call printf
2497   1406 51 04 00      add sp, 4
2498   1409             ; --- END FUNCTION CALL
2499   1409 0A 2E 14      jmp _if63_exit
2500   140C             _if63_else:
2501   140C             ; puts("\nYour mission begins with your starship located"); 
2502   140C             ; --- START FUNCTION CALL
2503   140C 26 5B 73      mov b, _s59 ; "\nYour mission begins with your starship located"
2504   140F FD AB         swp b
2505   1411 D8            push b
2506   1412 07 C8 69      call puts
2507   1415 51 02 00      add sp, 2
2508   1418             ; --- END FUNCTION CALL
2509   1418             ; printf("in the galactic quadrant %s.\n\n", quadname); 
2510   1418             ; --- START FUNCTION CALL
2511   1418 3B 08 6F      mov d, _quadname_data ; $quadname
2512   141B 2D            mov b, d
2513   141C 38 00 00      mov c, 0
2514   141F FD AB         swp b
2515   1421 D8            push b
2516   1422 26 8B 73      mov b, _s60 ; "in the galactic quadrant %s.\n\n"
2517   1425 FD AB         swp b
2518   1427 D8            push b
2519   1428 07 B4 60      call printf
2520   142B 51 04 00      add sp, 4
2521   142E             ; --- END FUNCTION CALL
2522   142E             _if63_exit:
2523   142E 0A 31 14      jmp _if62_exit
2524   1431             _if62_exit:
2525   1431             ; tmp = map[quad_y][quad_x]; 
2526   1431 FA FD FF      lea d, [bp + -3] ; $tmp
2527   1434 DA            push d
2528   1435 3B F0 6D      mov d, _map_data ; $map
2529   1438 D7            push a
2530   1439 DA            push d
2531   143A 3B A3 6E      mov d, _quad_y ; $quad_y
2532   143D 2A            mov b, [d]
2533   143E 38 00 00      mov c, 0
2534   1441 E7            pop d
2535   1442 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2536   1446 DA            push d
2537   1447 3B A5 6E      mov d, _quad_x ; $quad_x
2538   144A 2A            mov b, [d]
2539   144B 38 00 00      mov c, 0
2540   144E E7            pop d
2541   144F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2542   1453 E4            pop a
2543   1454 2A            mov b, [d]
2544   1455 38 00 00      mov c, 0
2545   1458 E7            pop d
2546   1459 FD 43         mov [d], b
2547   145B             ; klingons = (tmp >> 8) & 0x0F; 
2548   145B 3B 9E 6E      mov d, _klingons ; $klingons
2549   145E DA            push d
2550   145F FA FD FF      lea d, [bp + -3] ; $tmp
2551   1462 2A            mov b, [d]
2552   1463 38 00 00      mov c, 0
2553   1466             ; --- START SHIFT
2554   1466 D7            push a
2555   1467 11            mov a, b
2556   1468 FD 2E 08 00   mov32 cb, $00000008
2556   146C 00 00 
2557   146E FD 39         mov c, b
2558   1470 A1            shr a, cl
2559   1471 27            mov b, a
2560   1472 E4            pop a
2561   1473             ; --- END SHIFT
2562   1473 D7            push a
2563   1474 11            mov a, b
2564   1475 FD 2E 0F 00   mov32 cb, $0000000f
2564   1479 00 00 
2565   147B FD 92         and b, a ; &
2566   147D E4            pop a
2567   147E E7            pop d
2568   147F FD 3E         mov [d], bl
2569   1481             ; starbases = (tmp >> 4) & 0x0F; 
2570   1481 3B C9 6D      mov d, _starbases ; $starbases
2571   1484 DA            push d
2572   1485 FA FD FF      lea d, [bp + -3] ; $tmp
2573   1488 2A            mov b, [d]
2574   1489 38 00 00      mov c, 0
2575   148C             ; --- START SHIFT
2576   148C D7            push a
2577   148D 11            mov a, b
2578   148E FD 2E 04 00   mov32 cb, $00000004
2578   1492 00 00 
2579   1494 FD 39         mov c, b
2580   1496 A1            shr a, cl
2581   1497 27            mov b, a
2582   1498 E4            pop a
2583   1499             ; --- END SHIFT
2584   1499 D7            push a
2585   149A 11            mov a, b
2586   149B FD 2E 0F 00   mov32 cb, $0000000f
2586   149F 00 00 
2587   14A1 FD 92         and b, a ; &
2588   14A3 E4            pop a
2589   14A4 E7            pop d
2590   14A5 FD 3E         mov [d], bl
2591   14A7             ; stars = tmp & 0x0F; 
2592   14A7 3B A9 6E      mov d, _stars ; $stars
2593   14AA DA            push d
2594   14AB FA FD FF      lea d, [bp + -3] ; $tmp
2595   14AE 2A            mov b, [d]
2596   14AF 38 00 00      mov c, 0
2597   14B2 D7            push a
2598   14B3 11            mov a, b
2599   14B4 FD 2E 0F 00   mov32 cb, $0000000f
2599   14B8 00 00 
2600   14BA FD 92         and b, a ; &
2601   14BC E4            pop a
2602   14BD E7            pop d
2603   14BE FD 3E         mov [d], bl
2604   14C0             ; if (klingons > 0) { 
2605   14C0             _if64_cond:
2606   14C0 3B 9E 6E      mov d, _klingons ; $klingons
2607   14C3 32            mov bl, [d]
2608   14C4 A7 00         mov bh, 0
2609   14C6 38 00 00      mov c, 0
2610   14C9             ; --- START RELATIONAL
2611   14C9 D7            push a
2612   14CA 11            mov a, b
2613   14CB FD 2E 00 00   mov32 cb, $00000000
2613   14CF 00 00 
2614   14D1 B0            cmp a, b
2615   14D2 FD 81         sgu ; > (unsigned)
2616   14D4 E4            pop a
2617   14D5             ; --- END RELATIONAL
2618   14D5 C0 00 00      cmp b, 0
2619   14D8 C6 12 15      je _if64_exit
2620   14DB             _if64_TRUE:
2621   14DB             ; printf("Combat Area  Condition Red\n"); 
2622   14DB             ; --- START FUNCTION CALL
2623   14DB 26 AA 73      mov b, _s61 ; "Combat Area  Condition Red\n"
2624   14DE FD AB         swp b
2625   14E0 D8            push b
2626   14E1 07 B4 60      call printf
2627   14E4 51 02 00      add sp, 2
2628   14E7             ; --- END FUNCTION CALL
2629   14E7             ; if (shield < 200) 
2630   14E7             _if65_cond:
2631   14E7 3B A7 6E      mov d, _shield ; $shield
2632   14EA 2A            mov b, [d]
2633   14EB 38 00 00      mov c, 0
2634   14EE             ; --- START RELATIONAL
2635   14EE D7            push a
2636   14EF 11            mov a, b
2637   14F0 FD 2E C8 00   mov32 cb, $000000c8
2637   14F4 00 00 
2638   14F6 B0            cmp a, b
2639   14F7 FD 73         slt ; < (signed)
2640   14F9 E4            pop a
2641   14FA             ; --- END RELATIONAL
2642   14FA C0 00 00      cmp b, 0
2643   14FD C6 0F 15      je _if65_exit
2644   1500             _if65_TRUE:
2645   1500             ; printf("Shields Dangerously Low\n"); 
2646   1500             ; --- START FUNCTION CALL
2647   1500 26 C6 73      mov b, _s62 ; "Shields Dangerously Low\n"
2648   1503 FD AB         swp b
2649   1505 D8            push b
2650   1506 07 B4 60      call printf
2651   1509 51 02 00      add sp, 2
2652   150C             ; --- END FUNCTION CALL
2653   150C 0A 0F 15      jmp _if65_exit
2654   150F             _if65_exit:
2655   150F 0A 12 15      jmp _if64_exit
2656   1512             _if64_exit:
2657   1512             ; for (i = 1; i <= 3; i++) { 
2658   1512             _for66_init:
2659   1512 FA FF FF      lea d, [bp + -1] ; $i
2660   1515 DA            push d
2661   1516 FD 2E 01 00   mov32 cb, $00000001
2661   151A 00 00 
2662   151C E7            pop d
2663   151D FD 43         mov [d], b
2664   151F             _for66_cond:
2665   151F FA FF FF      lea d, [bp + -1] ; $i
2666   1522 2A            mov b, [d]
2667   1523 38 00 00      mov c, 0
2668   1526             ; --- START RELATIONAL
2669   1526 D7            push a
2670   1527 11            mov a, b
2671   1528 FD 2E 03 00   mov32 cb, $00000003
2671   152C 00 00 
2672   152E B0            cmp a, b
2673   152F FD 74         sle ; <= (signed)
2674   1531 E4            pop a
2675   1532             ; --- END RELATIONAL
2676   1532 C0 00 00      cmp b, 0
2677   1535 C6 93 15      je _for66_exit
2678   1538             _for66_block:
2679   1538             ; k->y = 0; 
2680   1538 FA FB FF      lea d, [bp + -5] ; $k
2681   153B FD 2A         mov d, [d]
2682   153D 58 00 00      add d, 0
2683   1540 DA            push d
2684   1541 FD 2E 00 00   mov32 cb, $00000000
2684   1545 00 00 
2685   1547 E7            pop d
2686   1548 FD 3E         mov [d], bl
2687   154A             ; k->x = 0; 
2688   154A FA FB FF      lea d, [bp + -5] ; $k
2689   154D FD 2A         mov d, [d]
2690   154F 58 01 00      add d, 1
2691   1552 DA            push d
2692   1553 FD 2E 00 00   mov32 cb, $00000000
2692   1557 00 00 
2693   1559 E7            pop d
2694   155A FD 3E         mov [d], bl
2695   155C             ; k->energy = 0; 
2696   155C FA FB FF      lea d, [bp + -5] ; $k
2697   155F FD 2A         mov d, [d]
2698   1561 58 02 00      add d, 2
2699   1564 DA            push d
2700   1565 FD 2E 00 00   mov32 cb, $00000000
2700   1569 00 00 
2701   156B E7            pop d
2702   156C FD 43         mov [d], b
2703   156E             ; k++; 
2704   156E FA FB FF      lea d, [bp + -5] ; $k
2705   1571 2A            mov b, [d]
2706   1572 38 00 00      mov c, 0
2707   1575 11            mov a, b
2708   1576 FD 77         inc b
2709   1578 FD 77         inc b
2710   157A FA FB FF      lea d, [bp + -5] ; $k
2711   157D FD 43         mov [d], b
2712   157F 27            mov b, a
2713   1580             _for66_update:
2714   1580 FA FF FF      lea d, [bp + -1] ; $i
2715   1583 2A            mov b, [d]
2716   1584 38 00 00      mov c, 0
2717   1587 11            mov a, b
2718   1588 FD 77         inc b
2719   158A FA FF FF      lea d, [bp + -1] ; $i
2720   158D FD 43         mov [d], b
2721   158F 27            mov b, a
2722   1590 0A 1F 15      jmp _for66_cond
2723   1593             _for66_exit:
2724   1593             ; memset(quad, 		0       , 64); 
2725   1593             ; --- START FUNCTION CALL
2726   1593 FD 2E 40 00   mov32 cb, $00000040
2726   1597 00 00 
2727   1599 FD AB         swp b
2728   159B D8            push b
2729   159C FD 2E 00 00   mov32 cb, $00000000
2729   15A0 00 00 
2730   15A2 DD            push bl
2731   15A3 3B C8 6E      mov d, _quad_data ; $quad
2732   15A6 2D            mov b, d
2733   15A7 38 00 00      mov c, 0
2734   15AA FD AB         swp b
2735   15AC D8            push b
2736   15AD 07 E6 69      call memset
2737   15B0 51 05 00      add sp, 5
2738   15B3             ; --- END FUNCTION CALL
2739   15B3             ; place_ship(); 
2740   15B3             ; --- START FUNCTION CALL
2741   15B3 07 53 12      call place_ship
2742   15B6             ; if (klingons > 0) { 
2743   15B6             _if67_cond:
2744   15B6 3B 9E 6E      mov d, _klingons ; $klingons
2745   15B9 32            mov bl, [d]
2746   15BA A7 00         mov bh, 0
2747   15BC 38 00 00      mov c, 0
2748   15BF             ; --- START RELATIONAL
2749   15BF D7            push a
2750   15C0 11            mov a, b
2751   15C1 FD 2E 00 00   mov32 cb, $00000000
2751   15C5 00 00 
2752   15C7 B0            cmp a, b
2753   15C8 FD 81         sgu ; > (unsigned)
2754   15CA E4            pop a
2755   15CB             ; --- END RELATIONAL
2756   15CB C0 00 00      cmp b, 0
2757   15CE C6 84 16      je _if67_exit
2758   15D1             _if67_TRUE:
2759   15D1             ; k = kdata; 
2760   15D1 FA FB FF      lea d, [bp + -5] ; $k
2761   15D4 DA            push d
2762   15D5 3B 92 6E      mov d, _kdata_data ; $kdata
2763   15D8 2D            mov b, d
2764   15D9 38 00 00      mov c, 0
2765   15DC E7            pop d
2766   15DD FD 43         mov [d], b
2767   15DF             ; for (i = 0; i < klingons; i++) { 
2768   15DF             _for68_init:
2769   15DF FA FF FF      lea d, [bp + -1] ; $i
2770   15E2 DA            push d
2771   15E3 FD 2E 00 00   mov32 cb, $00000000
2771   15E7 00 00 
2772   15E9 E7            pop d
2773   15EA FD 43         mov [d], b
2774   15EC             _for68_cond:
2775   15EC FA FF FF      lea d, [bp + -1] ; $i
2776   15EF 2A            mov b, [d]
2777   15F0 38 00 00      mov c, 0
2778   15F3             ; --- START RELATIONAL
2779   15F3 D7            push a
2780   15F4 11            mov a, b
2781   15F5 3B 9E 6E      mov d, _klingons ; $klingons
2782   15F8 32            mov bl, [d]
2783   15F9 A7 00         mov bh, 0
2784   15FB 38 00 00      mov c, 0
2785   15FE B0            cmp a, b
2786   15FF FD 73         slt ; < (signed)
2787   1601 E4            pop a
2788   1602             ; --- END RELATIONAL
2789   1602 C0 00 00      cmp b, 0
2790   1605 C6 81 16      je _for68_exit
2791   1608             _for68_block:
2792   1608             ; find_set_empty_place(	3         , k->y, k->x); 
2793   1608             ; --- START FUNCTION CALL
2794   1608 FA FB FF      lea d, [bp + -5] ; $k
2795   160B FD 2A         mov d, [d]
2796   160D 58 01 00      add d, 1
2797   1610 32            mov bl, [d]
2798   1611 A7 00         mov bh, 0
2799   1613 38 00 00      mov c, 0
2800   1616 FD AB         swp b
2801   1618 D8            push b
2802   1619 FA FB FF      lea d, [bp + -5] ; $k
2803   161C FD 2A         mov d, [d]
2804   161E 58 00 00      add d, 0
2805   1621 32            mov bl, [d]
2806   1622 A7 00         mov bh, 0
2807   1624 38 00 00      mov c, 0
2808   1627 FD AB         swp b
2809   1629 D8            push b
2810   162A FD 2E 03 00   mov32 cb, $00000003
2810   162E 00 00 
2811   1630 DD            push bl
2812   1631 07 AB 58      call find_set_empty_place
2813   1634 51 05 00      add sp, 5
2814   1637             ; --- END FUNCTION CALL
2815   1637             ; k->energy = 100 + get_rand(200); 
2816   1637 FA FB FF      lea d, [bp + -5] ; $k
2817   163A FD 2A         mov d, [d]
2818   163C 58 02 00      add d, 2
2819   163F DA            push d
2820   1640 FD 2E 64 00   mov32 cb, $00000064
2820   1644 00 00 
2821   1646             ; --- START TERMS
2822   1646 D7            push a
2823   1647 11            mov a, b
2824   1648             ; --- START FUNCTION CALL
2825   1648 FD 2E C8 00   mov32 cb, $000000c8
2825   164C 00 00 
2826   164E FD AB         swp b
2827   1650 D8            push b
2828   1651 07 FF 04      call get_rand
2829   1654 51 02 00      add sp, 2
2830   1657             ; --- END FUNCTION CALL
2831   1657 56            add b, a
2832   1658 E4            pop a
2833   1659             ; --- END TERMS
2834   1659 E7            pop d
2835   165A FD 43         mov [d], b
2836   165C             ; k++; 
2837   165C FA FB FF      lea d, [bp + -5] ; $k
2838   165F 2A            mov b, [d]
2839   1660 38 00 00      mov c, 0
2840   1663 11            mov a, b
2841   1664 FD 77         inc b
2842   1666 FD 77         inc b
2843   1668 FA FB FF      lea d, [bp + -5] ; $k
2844   166B FD 43         mov [d], b
2845   166D 27            mov b, a
2846   166E             _for68_update:
2847   166E FA FF FF      lea d, [bp + -1] ; $i
2848   1671 2A            mov b, [d]
2849   1672 38 00 00      mov c, 0
2850   1675 11            mov a, b
2851   1676 FD 77         inc b
2852   1678 FA FF FF      lea d, [bp + -1] ; $i
2853   167B FD 43         mov [d], b
2854   167D 27            mov b, a
2855   167E 0A EC 15      jmp _for68_cond
2856   1681             _for68_exit:
2857   1681 0A 84 16      jmp _if67_exit
2858   1684             _if67_exit:
2859   1684             ; if (starbases > 0) 
2860   1684             _if69_cond:
2861   1684 3B C9 6D      mov d, _starbases ; $starbases
2862   1687 32            mov bl, [d]
2863   1688 A7 00         mov bh, 0
2864   168A 38 00 00      mov c, 0
2865   168D             ; --- START RELATIONAL
2866   168D D7            push a
2867   168E 11            mov a, b
2868   168F FD 2E 00 00   mov32 cb, $00000000
2868   1693 00 00 
2869   1695 B0            cmp a, b
2870   1696 FD 7F         sgt ; >
2871   1698 E4            pop a
2872   1699             ; --- END RELATIONAL
2873   1699 C0 00 00      cmp b, 0
2874   169C C6 BD 16      je _if69_exit
2875   169F             _if69_TRUE:
2876   169F             ; find_set_empty_place(		2      , &base_y, &base_x); 
2877   169F             ; --- START FUNCTION CALL
2878   169F 3B CB 6D      mov d, _base_x ; $base_x
2879   16A2 2D            mov b, d
2880   16A3 FD AB         swp b
2881   16A5 D8            push b
2882   16A6 3B CA 6D      mov d, _base_y ; $base_y
2883   16A9 2D            mov b, d
2884   16AA FD AB         swp b
2885   16AC D8            push b
2886   16AD FD 2E 02 00   mov32 cb, $00000002
2886   16B1 00 00 
2887   16B3 DD            push bl
2888   16B4 07 AB 58      call find_set_empty_place
2889   16B7 51 05 00      add sp, 5
2890   16BA             ; --- END FUNCTION CALL
2891   16BA 0A BD 16      jmp _if69_exit
2892   16BD             _if69_exit:
2893   16BD             ; for (i = 1; i <= stars; i++) 
2894   16BD             _for70_init:
2895   16BD FA FF FF      lea d, [bp + -1] ; $i
2896   16C0 DA            push d
2897   16C1 FD 2E 01 00   mov32 cb, $00000001
2897   16C5 00 00 
2898   16C7 E7            pop d
2899   16C8 FD 43         mov [d], b
2900   16CA             _for70_cond:
2901   16CA FA FF FF      lea d, [bp + -1] ; $i
2902   16CD 2A            mov b, [d]
2903   16CE 38 00 00      mov c, 0
2904   16D1             ; --- START RELATIONAL
2905   16D1 D7            push a
2906   16D2 11            mov a, b
2907   16D3 3B A9 6E      mov d, _stars ; $stars
2908   16D6 32            mov bl, [d]
2909   16D7 A7 00         mov bh, 0
2910   16D9 38 00 00      mov c, 0
2911   16DC B0            cmp a, b
2912   16DD FD 74         sle ; <= (signed)
2913   16DF E4            pop a
2914   16E0             ; --- END RELATIONAL
2915   16E0 C0 00 00      cmp b, 0
2916   16E3 C6 18 17      je _for70_exit
2917   16E6             _for70_block:
2918   16E6             ; find_set_empty_place(		1      ,  0    ,  0    ); 
2919   16E6             ; --- START FUNCTION CALL
2920   16E6 FD 2E 00 00   mov32 cb, $00000000
2920   16EA 00 00 
2921   16EC FD AB         swp b
2922   16EE D8            push b
2923   16EF FD 2E 00 00   mov32 cb, $00000000
2923   16F3 00 00 
2924   16F5 FD AB         swp b
2925   16F7 D8            push b
2926   16F8 FD 2E 01 00   mov32 cb, $00000001
2926   16FC 00 00 
2927   16FE DD            push bl
2928   16FF 07 AB 58      call find_set_empty_place
2929   1702 51 05 00      add sp, 5
2930   1705             ; --- END FUNCTION CALL
2931   1705             _for70_update:
2932   1705 FA FF FF      lea d, [bp + -1] ; $i
2933   1708 2A            mov b, [d]
2934   1709 38 00 00      mov c, 0
2935   170C 11            mov a, b
2936   170D FD 77         inc b
2937   170F FA FF FF      lea d, [bp + -1] ; $i
2938   1712 FD 43         mov [d], b
2939   1714 27            mov b, a
2940   1715 0A CA 16      jmp _for70_cond
2941   1718             _for70_exit:
2942   1718 F9            leave
2943   1719 09            ret
2944   171A             
2945   171A             course_control:
2946   171A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2947   171D             ; int i; 
2948   171D 52 02 00      sub sp, 2
2949   1720             ; int        c1; 
2950   1720 52 02 00      sub sp, 2
2951   1723             ; int        warp; 
2952   1723 52 02 00      sub sp, 2
2953   1726             ; unsigned int         n; 
2954   1726 52 02 00      sub sp, 2
2955   1729             ; int c2, c3, c4; 
2956   1729 52 02 00      sub sp, 2
2957   172C 52 02 00      sub sp, 2
2958   172F 52 02 00      sub sp, 2
2959   1732             ; int        z1, z2; 
2960   1732 52 02 00      sub sp, 2
2961   1735 52 02 00      sub sp, 2
2962   1738             ; int        x1, x2; 
2963   1738 52 02 00      sub sp, 2
2964   173B 52 02 00      sub sp, 2
2965   173E             ; int        x, y; 
2966   173E 52 02 00      sub sp, 2
2967   1741 52 02 00      sub sp, 2
2968   1744             ; unsigned char        outside = 0;		/* Outside galaxy flag */ 
2969   1744 52 01 00      sub sp, 1
2970   1747             ; --- START LOCAL VAR INITIALIZATION
2971   1747 FA E6 FF      lea d, [bp + -26] ; $outside
2972   174A DA            push d
2973   174B FD 2E 00 00   mov32 cb, $00000000
2973   174F 00 00 
2974   1751 E7            pop d
2975   1752 FD 3E         mov [d], bl
2976   1754             ; --- END LOCAL VAR INITIALIZATION
2977   1754             ; unsigned char        quad_y_old; 
2978   1754 52 01 00      sub sp, 1
2979   1757             ; unsigned char        quad_x_old; 
2980   1757 52 01 00      sub sp, 1
2981   175A             ; puts("Course (0-9): " ); 
2982   175A             ; --- START FUNCTION CALL
2983   175A 26 DF 73      mov b, _s63 ; "Course (0-9): "
2984   175D FD AB         swp b
2985   175F D8            push b
2986   1760 07 C8 69      call puts
2987   1763 51 02 00      add sp, 2
2988   1766             ; --- END FUNCTION CALL
2989   1766             ; c1 = input_f00(); 
2990   1766 FA FD FF      lea d, [bp + -3] ; $c1
2991   1769 DA            push d
2992   176A             ; --- START FUNCTION CALL
2993   176A 07 73 06      call input_f00
2994   176D E7            pop d
2995   176E FD 43         mov [d], b
2996   1770             ; if (c1 == 900) 
2997   1770             _if71_cond:
2998   1770 FA FD FF      lea d, [bp + -3] ; $c1
2999   1773 2A            mov b, [d]
3000   1774 38 00 00      mov c, 0
3001   1777             ; --- START RELATIONAL
3002   1777 D7            push a
3003   1778 11            mov a, b
3004   1779 FD 2E 84 03   mov32 cb, $00000384
3004   177D 00 00 
3005   177F B0            cmp a, b
3006   1780 FD 71         seq ; ==
3007   1782 E4            pop a
3008   1783             ; --- END RELATIONAL
3009   1783 C0 00 00      cmp b, 0
3010   1786 C6 99 17      je _if71_exit
3011   1789             _if71_TRUE:
3012   1789             ; c1 = 100; 
3013   1789 FA FD FF      lea d, [bp + -3] ; $c1
3014   178C DA            push d
3015   178D FD 2E 64 00   mov32 cb, $00000064
3015   1791 00 00 
3016   1793 E7            pop d
3017   1794 FD 43         mov [d], b
3018   1796 0A 99 17      jmp _if71_exit
3019   1799             _if71_exit:
3020   1799             ; if (c1 < 0 || c1 > 900) { 
3021   1799             _if72_cond:
3022   1799 FA FD FF      lea d, [bp + -3] ; $c1
3023   179C 2A            mov b, [d]
3024   179D 38 00 00      mov c, 0
3025   17A0             ; --- START RELATIONAL
3026   17A0 D7            push a
3027   17A1 11            mov a, b
3028   17A2 FD 2E 00 00   mov32 cb, $00000000
3028   17A6 00 00 
3029   17A8 B0            cmp a, b
3030   17A9 FD 73         slt ; < (signed)
3031   17AB E4            pop a
3032   17AC             ; --- END RELATIONAL
3033   17AC             ; --- START LOGICAL OR
3034   17AC D7            push a
3035   17AD 11            mov a, b
3036   17AE FA FD FF      lea d, [bp + -3] ; $c1
3037   17B1 2A            mov b, [d]
3038   17B2 38 00 00      mov c, 0
3039   17B5             ; --- START RELATIONAL
3040   17B5 D7            push a
3041   17B6 11            mov a, b
3042   17B7 FD 2E 84 03   mov32 cb, $00000384
3042   17BB 00 00 
3043   17BD B0            cmp a, b
3044   17BE FD 7F         sgt ; >
3045   17C0 E4            pop a
3046   17C1             ; --- END RELATIONAL
3047   17C1 FD A8         sor a, b ; ||
3048   17C3 E4            pop a
3049   17C4             ; --- END LOGICAL OR
3050   17C4 C0 00 00      cmp b, 0
3051   17C7 C6 E5 17      je _if72_exit
3052   17CA             _if72_TRUE:
3053   17CA             ; printf("Lt. Sulu%s", inc_1); 
3054   17CA             ; --- START FUNCTION CALL
3055   17CA 3B 3C 6F      mov d, _inc_1 ; $inc_1
3056   17CD 2A            mov b, [d]
3057   17CE 38 00 00      mov c, 0
3058   17D1 FD AB         swp b
3059   17D3 D8            push b
3060   17D4 26 EE 73      mov b, _s64 ; "Lt. Sulu%s"
3061   17D7 FD AB         swp b
3062   17D9 D8            push b
3063   17DA 07 B4 60      call printf
3064   17DD 51 04 00      add sp, 4
3065   17E0             ; --- END FUNCTION CALL
3066   17E0             ; return; 
3067   17E0 F9            leave
3068   17E1 09            ret
3069   17E2 0A E5 17      jmp _if72_exit
3070   17E5             _if72_exit:
3071   17E5             ; if (damage[1] < 0) 
3072   17E5             _if73_cond:
3073   17E5 3B AE 6E      mov d, _damage_data ; $damage
3074   17E8 D7            push a
3075   17E9 DA            push d
3076   17EA FD 2E 01 00   mov32 cb, $00000001
3076   17EE 00 00 
3077   17F0 E7            pop d
3078   17F1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3079   17F5 E4            pop a
3080   17F6 2A            mov b, [d]
3081   17F7 38 00 00      mov c, 0
3082   17FA             ; --- START RELATIONAL
3083   17FA D7            push a
3084   17FB 11            mov a, b
3085   17FC FD 2E 00 00   mov32 cb, $00000000
3085   1800 00 00 
3086   1802 B0            cmp a, b
3087   1803 FD 73         slt ; < (signed)
3088   1805 E4            pop a
3089   1806             ; --- END RELATIONAL
3090   1806 C0 00 00      cmp b, 0
3091   1809 C6 25 18      je _if73_exit
3092   180C             _if73_TRUE:
3093   180C             ; strcpy(warpmax, "0.2"); 
3094   180C             ; --- START FUNCTION CALL
3095   180C 26 F9 73      mov b, _s65 ; "0.2"
3096   180F FD AB         swp b
3097   1811 D8            push b
3098   1812 3B C5 6F      mov d, _warpmax_data ; $warpmax
3099   1815 2D            mov b, d
3100   1816 38 00 00      mov c, 0
3101   1819 FD AB         swp b
3102   181B D8            push b
3103   181C 07 FC 5E      call strcpy
3104   181F 51 04 00      add sp, 4
3105   1822             ; --- END FUNCTION CALL
3106   1822 0A 25 18      jmp _if73_exit
3107   1825             _if73_exit:
3108   1825             ; printf("Warp Factor (0-%s): ", warpmax); 
3109   1825             ; --- START FUNCTION CALL
3110   1825 3B C5 6F      mov d, _warpmax_data ; $warpmax
3111   1828 2D            mov b, d
3112   1829 38 00 00      mov c, 0
3113   182C FD AB         swp b
3114   182E D8            push b
3115   182F 26 FD 73      mov b, _s66 ; "Warp Factor (0-%s): "
3116   1832 FD AB         swp b
3117   1834 D8            push b
3118   1835 07 B4 60      call printf
3119   1838 51 04 00      add sp, 4
3120   183B             ; --- END FUNCTION CALL
3121   183B             ; warp = input_f00(); 
3122   183B FA FB FF      lea d, [bp + -5] ; $warp
3123   183E DA            push d
3124   183F             ; --- START FUNCTION CALL
3125   183F 07 73 06      call input_f00
3126   1842 E7            pop d
3127   1843 FD 43         mov [d], b
3128   1845             ; if (damage[1] < 0 && warp > 20) { 
3129   1845             _if74_cond:
3130   1845 3B AE 6E      mov d, _damage_data ; $damage
3131   1848 D7            push a
3132   1849 DA            push d
3133   184A FD 2E 01 00   mov32 cb, $00000001
3133   184E 00 00 
3134   1850 E7            pop d
3135   1851 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3136   1855 E4            pop a
3137   1856 2A            mov b, [d]
3138   1857 38 00 00      mov c, 0
3139   185A             ; --- START RELATIONAL
3140   185A D7            push a
3141   185B 11            mov a, b
3142   185C FD 2E 00 00   mov32 cb, $00000000
3142   1860 00 00 
3143   1862 B0            cmp a, b
3144   1863 FD 73         slt ; < (signed)
3145   1865 E4            pop a
3146   1866             ; --- END RELATIONAL
3147   1866             ; --- START LOGICAL AND
3148   1866 D7            push a
3149   1867 11            mov a, b
3150   1868 FA FB FF      lea d, [bp + -5] ; $warp
3151   186B 2A            mov b, [d]
3152   186C 38 00 00      mov c, 0
3153   186F             ; --- START RELATIONAL
3154   186F D7            push a
3155   1870 11            mov a, b
3156   1871 FD 2E 14 00   mov32 cb, $00000014
3156   1875 00 00 
3157   1877 B0            cmp a, b
3158   1878 FD 7F         sgt ; >
3159   187A E4            pop a
3160   187B             ; --- END RELATIONAL
3161   187B FD A7         sand a, b
3162   187D E4            pop a
3163   187E             ; --- END LOGICAL AND
3164   187E C0 00 00      cmp b, 0
3165   1881 C6 95 18      je _if74_exit
3166   1884             _if74_TRUE:
3167   1884             ; printf("Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"); 
3168   1884             ; --- START FUNCTION CALL
3169   1884 26 12 74      mov b, _s67 ; "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"
3170   1887 FD AB         swp b
3171   1889 D8            push b
3172   188A 07 B4 60      call printf
3173   188D 51 02 00      add sp, 2
3174   1890             ; --- END FUNCTION CALL
3175   1890             ; return; 
3176   1890 F9            leave
3177   1891 09            ret
3178   1892 0A 95 18      jmp _if74_exit
3179   1895             _if74_exit:
3180   1895             ; if (warp <= 0) 
3181   1895             _if75_cond:
3182   1895 FA FB FF      lea d, [bp + -5] ; $warp
3183   1898 2A            mov b, [d]
3184   1899 38 00 00      mov c, 0
3185   189C             ; --- START RELATIONAL
3186   189C D7            push a
3187   189D 11            mov a, b
3188   189E FD 2E 00 00   mov32 cb, $00000000
3188   18A2 00 00 
3189   18A4 B0            cmp a, b
3190   18A5 FD 74         sle ; <= (signed)
3191   18A7 E4            pop a
3192   18A8             ; --- END RELATIONAL
3193   18A8 C0 00 00      cmp b, 0
3194   18AB C6 B3 18      je _if75_exit
3195   18AE             _if75_TRUE:
3196   18AE             ; return; 
3197   18AE F9            leave
3198   18AF 09            ret
3199   18B0 0A B3 18      jmp _if75_exit
3200   18B3             _if75_exit:
3201   18B3             ; if (warp > 800) { 
3202   18B3             _if76_cond:
3203   18B3 FA FB FF      lea d, [bp + -5] ; $warp
3204   18B6 2A            mov b, [d]
3205   18B7 38 00 00      mov c, 0
3206   18BA             ; --- START RELATIONAL
3207   18BA D7            push a
3208   18BB 11            mov a, b
3209   18BC FD 2E 20 03   mov32 cb, $00000320
3209   18C0 00 00 
3210   18C2 B0            cmp a, b
3211   18C3 FD 7F         sgt ; >
3212   18C5 E4            pop a
3213   18C6             ; --- END RELATIONAL
3214   18C6 C0 00 00      cmp b, 0
3215   18C9 C6 F0 18      je _if76_exit
3216   18CC             _if76_TRUE:
3217   18CC             ; printf("Chief Engineer Scott reports:\n  The engines won't take warp %s!\n\n", print100(warp)); 
3218   18CC             ; --- START FUNCTION CALL
3219   18CC             ; --- START FUNCTION CALL
3220   18CC FA FB FF      lea d, [bp + -5] ; $warp
3221   18CF 2A            mov b, [d]
3222   18D0 38 00 00      mov c, 0
3223   18D3 FD AB         swp b
3224   18D5 D8            push b
3225   18D6 07 12 09      call print100
3226   18D9 51 02 00      add sp, 2
3227   18DC             ; --- END FUNCTION CALL
3228   18DC FD AB         swp b
3229   18DE D8            push b
3230   18DF 26 48 74      mov b, _s68 ; "Chief Engineer Scott reports:\n  The engines won't take warp %s!\n\n"
3231   18E2 FD AB         swp b
3232   18E4 D8            push b
3233   18E5 07 B4 60      call printf
3234   18E8 51 04 00      add sp, 4
3235   18EB             ; --- END FUNCTION CALL
3236   18EB             ; return; 
3237   18EB F9            leave
3238   18EC 09            ret
3239   18ED 0A F0 18      jmp _if76_exit
3240   18F0             _if76_exit:
3241   18F0             ; n = warp * 8; 
3242   18F0 FA F9 FF      lea d, [bp + -7] ; $n
3243   18F3 DA            push d
3244   18F4 FA FB FF      lea d, [bp + -5] ; $warp
3245   18F7 2A            mov b, [d]
3246   18F8 38 00 00      mov c, 0
3247   18FB             ; --- START FACTORS
3248   18FB D7            push a
3249   18FC FD D8         push g
3250   18FE 11            mov a, b
3251   18FF FD 7A         mov g, c
3252   1901 FD 2E 08 00   mov32 cb, $00000008
3252   1905 00 00 
3253   1907 D7            push a     ; save left operand
3254   1908 8E            xor a, b   ; xor sign bits
3255   1909 FD AA         swp a      ; swap bytes
3256   190B 83            mov cl, al ; save result of xor into 'dl'
3257   190C E4            pop a      ; restore left side operator
3258   190D DF            push cl    ; save result of xor above
3259   190E FD AA         swp a  
3260   1910 93 80         test al, $80  
3261   1912 FD AA         swp a  
3262   1914 C6 19 19      jz skip_invert_a_78  
3263   1917 FD 95         neg a 
3264   1919             skip_invert_a_78:   
3265   1919 FD AB         swp b
3266   191B FD 93 80      test bl, $80  
3267   191E FD AB         swp b
3268   1920 C6 25 19      jz skip_invert_b_78  
3269   1923 FD 97         neg b 
3270   1925             skip_invert_b_78:   
3271   1925 AC            mul a, b ; *
3272   1926 FD 78         mov g, a
3273   1928 11            mov a, b
3274   1929 EA            pop bl
3275   192A FD 93 80      test bl, $80
3276   192D C6 3A 19      jz _same_signs_78
3277   1930 2F            mov bl, al
3278   1931 95            not a
3279   1932 FD 97         neg b
3280   1934 5B 00 00      adc a, 0
3281   1937 FD 78         mov g, a
3282   1939 11            mov a, b
3283   193A             _same_signs_78:
3284   193A FD 38         mov c, g
3285   193C 27            mov b, a
3286   193D FD F1         pop g
3287   193F E4            pop a
3288   1940             ; --- END FACTORS
3289   1940 E7            pop d
3290   1941 FD 43         mov [d], b
3291   1943             ; n = cint100(n);	 
3292   1943 FA F9 FF      lea d, [bp + -7] ; $n
3293   1946 DA            push d
3294   1947             ; --- START FUNCTION CALL
3295   1947 FA F9 FF      lea d, [bp + -7] ; $n
3296   194A 2A            mov b, [d]
3297   194B 38 00 00      mov c, 0
3298   194E FD AB         swp b
3299   1950 D8            push b
3300   1951 07 25 5E      call cint100
3301   1954 51 02 00      add sp, 2
3302   1957             ; --- END FUNCTION CALL
3303   1957 E7            pop d
3304   1958 FD 43         mov [d], b
3305   195A             ; if (energy - n < 0) { 
3306   195A             _if79_cond:
3307   195A 3B EC 6D      mov d, _energy ; $energy
3308   195D 2A            mov b, [d]
3309   195E 38 00 00      mov c, 0
3310   1961             ; --- START TERMS
3311   1961 D7            push a
3312   1962 11            mov a, b
3313   1963 FA F9 FF      lea d, [bp + -7] ; $n
3314   1966 2A            mov b, [d]
3315   1967 38 00 00      mov c, 0
3316   196A 60            sub a, b
3317   196B 27            mov b, a
3318   196C E4            pop a
3319   196D             ; --- END TERMS
3320   196D             ; --- START RELATIONAL
3321   196D D7            push a
3322   196E 11            mov a, b
3323   196F FD 2E 00 00   mov32 cb, $00000000
3323   1973 00 00 
3324   1975 B0            cmp a, b
3325   1976 FD 75         slu ; < (unsigned)
3326   1978 E4            pop a
3327   1979             ; --- END RELATIONAL
3328   1979 C0 00 00      cmp b, 0
3329   197C C6 FC 19      je _if79_exit
3330   197F             _if79_TRUE:
3331   197F             ; printf("Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", print100(warp)); 
3332   197F             ; --- START FUNCTION CALL
3333   197F             ; --- START FUNCTION CALL
3334   197F FA FB FF      lea d, [bp + -5] ; $warp
3335   1982 2A            mov b, [d]
3336   1983 38 00 00      mov c, 0
3337   1986 FD AB         swp b
3338   1988 D8            push b
3339   1989 07 12 09      call print100
3340   198C 51 02 00      add sp, 2
3341   198F             ; --- END FUNCTION CALL
3342   198F FD AB         swp b
3343   1991 D8            push b
3344   1992 26 89 74      mov b, _s69 ; "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n"
3345   1995 FD AB         swp b
3346   1997 D8            push b
3347   1998 07 B4 60      call printf
3348   199B 51 04 00      add sp, 4
3349   199E             ; --- END FUNCTION CALL
3350   199E             ; if (shield >= n && damage[7] >= 0) { 
3351   199E             _if80_cond:
3352   199E 3B A7 6E      mov d, _shield ; $shield
3353   19A1 2A            mov b, [d]
3354   19A2 38 00 00      mov c, 0
3355   19A5             ; --- START RELATIONAL
3356   19A5 D7            push a
3357   19A6 11            mov a, b
3358   19A7 FA F9 FF      lea d, [bp + -7] ; $n
3359   19AA 2A            mov b, [d]
3360   19AB 38 00 00      mov c, 0
3361   19AE B0            cmp a, b
3362   19AF FD 80         sge ; >=
3363   19B1 E4            pop a
3364   19B2             ; --- END RELATIONAL
3365   19B2             ; --- START LOGICAL AND
3366   19B2 D7            push a
3367   19B3 11            mov a, b
3368   19B4 3B AE 6E      mov d, _damage_data ; $damage
3369   19B7 D7            push a
3370   19B8 DA            push d
3371   19B9 FD 2E 07 00   mov32 cb, $00000007
3371   19BD 00 00 
3372   19BF E7            pop d
3373   19C0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3374   19C4 E4            pop a
3375   19C5 2A            mov b, [d]
3376   19C6 38 00 00      mov c, 0
3377   19C9             ; --- START RELATIONAL
3378   19C9 D7            push a
3379   19CA 11            mov a, b
3380   19CB FD 2E 00 00   mov32 cb, $00000000
3380   19CF 00 00 
3381   19D1 B0            cmp a, b
3382   19D2 FD 80         sge ; >=
3383   19D4 E4            pop a
3384   19D5             ; --- END RELATIONAL
3385   19D5 FD A7         sand a, b
3386   19D7 E4            pop a
3387   19D8             ; --- END LOGICAL AND
3388   19D8 C0 00 00      cmp b, 0
3389   19DB C6 F7 19      je _if80_exit
3390   19DE             _if80_TRUE:
3391   19DE             ; printf("Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", shield); 
3392   19DE             ; --- START FUNCTION CALL
3393   19DE 3B A7 6E      mov d, _shield ; $shield
3394   19E1 2A            mov b, [d]
3395   19E2 38 00 00      mov c, 0
3396   19E5 FD AB         swp b
3397   19E7 D8            push b
3398   19E8 26 DC 74      mov b, _s70 ; "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n"
3399   19EB FD AB         swp b
3400   19ED D8            push b
3401   19EE 07 B4 60      call printf
3402   19F1 51 04 00      add sp, 4
3403   19F4             ; --- END FUNCTION CALL
3404   19F4 0A F7 19      jmp _if80_exit
3405   19F7             _if80_exit:
3406   19F7             ; return; 
3407   19F7 F9            leave
3408   19F8 09            ret
3409   19F9 0A FC 19      jmp _if79_exit
3410   19FC             _if79_exit:
3411   19FC             ; klingons_move(); 
3412   19FC             ; --- START FUNCTION CALL
3413   19FC 07 77 50      call klingons_move
3414   19FF             ; repair_damage(warp); 
3415   19FF             ; --- START FUNCTION CALL
3416   19FF FA FB FF      lea d, [bp + -5] ; $warp
3417   1A02 2A            mov b, [d]
3418   1A03 38 00 00      mov c, 0
3419   1A06 FD AB         swp b
3420   1A08 D8            push b
3421   1A09 07 63 55      call repair_damage
3422   1A0C 51 02 00      add sp, 2
3423   1A0F             ; --- END FUNCTION CALL
3424   1A0F             ; z1 = FROM_FIXED00(ship_y); 
3425   1A0F FA F1 FF      lea d, [bp + -15] ; $z1
3426   1A12 DA            push d
3427   1A13             ; --- START FUNCTION CALL
3428   1A13 3B C2 6E      mov d, _ship_y ; $ship_y
3429   1A16 2A            mov b, [d]
3430   1A17 38 00 00      mov c, 0
3431   1A1A FD AB         swp b
3432   1A1C D8            push b
3433   1A1D 07 DC 04      call FROM_FIXED00
3434   1A20 51 02 00      add sp, 2
3435   1A23             ; --- END FUNCTION CALL
3436   1A23 E7            pop d
3437   1A24 FD 43         mov [d], b
3438   1A26             ; z2 = FROM_FIXED00(ship_x); 
3439   1A26 FA EF FF      lea d, [bp + -17] ; $z2
3440   1A29 DA            push d
3441   1A2A             ; --- START FUNCTION CALL
3442   1A2A 3B C4 6E      mov d, _ship_x ; $ship_x
3443   1A2D 2A            mov b, [d]
3444   1A2E 38 00 00      mov c, 0
3445   1A31 FD AB         swp b
3446   1A33 D8            push b
3447   1A34 07 DC 04      call FROM_FIXED00
3448   1A37 51 02 00      add sp, 2
3449   1A3A             ; --- END FUNCTION CALL
3450   1A3A E7            pop d
3451   1A3B FD 43         mov [d], b
3452   1A3D             ; quad[z1+-1][z2+-1] = 		0       ; 
3453   1A3D 3B C8 6E      mov d, _quad_data ; $quad
3454   1A40 D7            push a
3455   1A41 DA            push d
3456   1A42 FA F1 FF      lea d, [bp + -15] ; $z1
3457   1A45 2A            mov b, [d]
3458   1A46 38 00 00      mov c, 0
3459   1A49             ; --- START TERMS
3460   1A49 D7            push a
3461   1A4A 11            mov a, b
3462   1A4B FD 2E FF FF   mov32 cb, $ffffffff
3462   1A4F FF FF 
3463   1A51 56            add b, a
3464   1A52 E4            pop a
3465   1A53             ; --- END TERMS
3466   1A53 E7            pop d
3467   1A54 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
3468   1A58 DA            push d
3469   1A59 FA EF FF      lea d, [bp + -17] ; $z2
3470   1A5C 2A            mov b, [d]
3471   1A5D 38 00 00      mov c, 0
3472   1A60             ; --- START TERMS
3473   1A60 D7            push a
3474   1A61 11            mov a, b
3475   1A62 FD 2E FF FF   mov32 cb, $ffffffff
3475   1A66 FF FF 
3476   1A68 56            add b, a
3477   1A69 E4            pop a
3478   1A6A             ; --- END TERMS
3479   1A6A E7            pop d
3480   1A6B 5A            add d, b
3481   1A6C E4            pop a
3482   1A6D DA            push d
3483   1A6E FD 2E 00 00   mov32 cb, $00000000
3483   1A72 00 00 
3484   1A74 E7            pop d
3485   1A75 FD 3E         mov [d], bl
3486   1A77             ; c2 = FROM_FIXED00(c1);	/* Integer part */ 
3487   1A77 FA F7 FF      lea d, [bp + -9] ; $c2
3488   1A7A DA            push d
3489   1A7B             ; --- START FUNCTION CALL
3490   1A7B FA FD FF      lea d, [bp + -3] ; $c1
3491   1A7E 2A            mov b, [d]
3492   1A7F 38 00 00      mov c, 0
3493   1A82 FD AB         swp b
3494   1A84 D8            push b
3495   1A85 07 DC 04      call FROM_FIXED00
3496   1A88 51 02 00      add sp, 2
3497   1A8B             ; --- END FUNCTION CALL
3498   1A8B E7            pop d
3499   1A8C FD 43         mov [d], b
3500   1A8E             ; c3 = c2 + 1;		/* Next integer part */ 
3501   1A8E FA F5 FF      lea d, [bp + -11] ; $c3
3502   1A91 DA            push d
3503   1A92 FA F7 FF      lea d, [bp + -9] ; $c2
3504   1A95 2A            mov b, [d]
3505   1A96 38 00 00      mov c, 0
3506   1A99             ; --- START TERMS
3507   1A99 D7            push a
3508   1A9A 11            mov a, b
3509   1A9B FD 2E 01 00   mov32 cb, $00000001
3509   1A9F 00 00 
3510   1AA1 56            add b, a
3511   1AA2 E4            pop a
3512   1AA3             ; --- END TERMS
3513   1AA3 E7            pop d
3514   1AA4 FD 43         mov [d], b
3515   1AA6             ; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
3516   1AA6 FA F3 FF      lea d, [bp + -13] ; $c4
3517   1AA9 DA            push d
3518   1AAA FA FD FF      lea d, [bp + -3] ; $c1
3519   1AAD 2A            mov b, [d]
3520   1AAE 38 00 00      mov c, 0
3521   1AB1             ; --- START TERMS
3522   1AB1 D7            push a
3523   1AB2 11            mov a, b
3524   1AB3             ; --- START FUNCTION CALL
3525   1AB3 FA F7 FF      lea d, [bp + -9] ; $c2
3526   1AB6 2A            mov b, [d]
3527   1AB7 38 00 00      mov c, 0
3528   1ABA FD AB         swp b
3529   1ABC D8            push b
3530   1ABD 07 8B 04      call TO_FIXED00
3531   1AC0 51 02 00      add sp, 2
3532   1AC3             ; --- END FUNCTION CALL
3533   1AC3 60            sub a, b
3534   1AC4 27            mov b, a
3535   1AC5 E4            pop a
3536   1AC6             ; --- END TERMS
3537   1AC6 E7            pop d
3538   1AC7 FD 43         mov [d], b
3539   1AC9             ; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
3540   1AC9 FA ED FF      lea d, [bp + -19] ; $x1
3541   1ACC DA            push d
3542   1ACD FD 2E 64 00   mov32 cb, $00000064
3542   1AD1 00 00 
3543   1AD3             ; --- START FACTORS
3544   1AD3 D7            push a
3545   1AD4 FD D8         push g
3546   1AD6 11            mov a, b
3547   1AD7 FD 7A         mov g, c
3548   1AD9 3B CD 6D      mov d, _c_data ; $c
3549   1ADC D7            push a
3550   1ADD DA            push d
3551   1ADE FD 2E 01 00   mov32 cb, $00000001
3551   1AE2 00 00 
3552   1AE4 E7            pop d
3553   1AE5 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3554   1AE9 DA            push d
3555   1AEA FA F7 FF      lea d, [bp + -9] ; $c2
3556   1AED 2A            mov b, [d]
3557   1AEE 38 00 00      mov c, 0
3558   1AF1 E7            pop d
3559   1AF2 5A            add d, b
3560   1AF3 E4            pop a
3561   1AF4 32            mov bl, [d]
3562   1AF5 A7 00         mov bh, 0
3563   1AF7 38 00 00      mov c, 0
3564   1AFA D7            push a     ; save left operand
3565   1AFB 8E            xor a, b   ; xor sign bits
3566   1AFC FD AA         swp a      ; swap bytes
3567   1AFE 83            mov cl, al ; save result of xor into 'dl'
3568   1AFF E4            pop a      ; restore left side operator
3569   1B00 DF            push cl    ; save result of xor above
3570   1B01 FD AA         swp a  
3571   1B03 93 80         test al, $80  
3572   1B05 FD AA         swp a  
3573   1B07 C6 0C 1B      jz skip_invert_a_83  
3574   1B0A FD 95         neg a 
3575   1B0C             skip_invert_a_83:   
3576   1B0C FD AB         swp b
3577   1B0E FD 93 80      test bl, $80  
3578   1B11 FD AB         swp b
3579   1B13 C6 18 1B      jz skip_invert_b_83  
3580   1B16 FD 97         neg b 
3581   1B18             skip_invert_b_83:   
3582   1B18 AC            mul a, b ; *
3583   1B19 FD 78         mov g, a
3584   1B1B 11            mov a, b
3585   1B1C EA            pop bl
3586   1B1D FD 93 80      test bl, $80
3587   1B20 C6 2D 1B      jz _same_signs_83
3588   1B23 2F            mov bl, al
3589   1B24 95            not a
3590   1B25 FD 97         neg b
3591   1B27 5B 00 00      adc a, 0
3592   1B2A FD 78         mov g, a
3593   1B2C 11            mov a, b
3594   1B2D             _same_signs_83:
3595   1B2D FD 38         mov c, g
3596   1B2F 27            mov b, a
3597   1B30 FD F1         pop g
3598   1B32 E4            pop a
3599   1B33             ; --- END FACTORS
3600   1B33             ; --- START TERMS
3601   1B33 D7            push a
3602   1B34 FD D8         push g
3603   1B36 11            mov a, b
3604   1B37 FD 7A         mov g, c
3605   1B39 3B CD 6D      mov d, _c_data ; $c
3606   1B3C D7            push a
3607   1B3D DA            push d
3608   1B3E FD 2E 01 00   mov32 cb, $00000001
3608   1B42 00 00 
3609   1B44 E7            pop d
3610   1B45 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3611   1B49 DA            push d
3612   1B4A FA F5 FF      lea d, [bp + -11] ; $c3
3613   1B4D 2A            mov b, [d]
3614   1B4E 38 00 00      mov c, 0
3615   1B51 E7            pop d
3616   1B52 5A            add d, b
3617   1B53 E4            pop a
3618   1B54 32            mov bl, [d]
3619   1B55 A7 00         mov bh, 0
3620   1B57 38 00 00      mov c, 0
3621   1B5A             ; --- START TERMS
3622   1B5A D7            push a
3623   1B5B 11            mov a, b
3624   1B5C 3B CD 6D      mov d, _c_data ; $c
3625   1B5F D7            push a
3626   1B60 DA            push d
3627   1B61 FD 2E 01 00   mov32 cb, $00000001
3627   1B65 00 00 
3628   1B67 E7            pop d
3629   1B68 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3630   1B6C DA            push d
3631   1B6D FA F7 FF      lea d, [bp + -9] ; $c2
3632   1B70 2A            mov b, [d]
3633   1B71 38 00 00      mov c, 0
3634   1B74 E7            pop d
3635   1B75 5A            add d, b
3636   1B76 E4            pop a
3637   1B77 32            mov bl, [d]
3638   1B78 A7 00         mov bh, 0
3639   1B7A 38 00 00      mov c, 0
3640   1B7D 60            sub a, b
3641   1B7E 27            mov b, a
3642   1B7F E4            pop a
3643   1B80             ; --- END TERMS
3644   1B80             ; --- START FACTORS
3645   1B80 D7            push a
3646   1B81 FD D8         push g
3647   1B83 11            mov a, b
3648   1B84 FD 7A         mov g, c
3649   1B86 FA F3 FF      lea d, [bp + -13] ; $c4
3650   1B89 2A            mov b, [d]
3651   1B8A 38 00 00      mov c, 0
3652   1B8D D7            push a     ; save left operand
3653   1B8E 8E            xor a, b   ; xor sign bits
3654   1B8F FD AA         swp a      ; swap bytes
3655   1B91 83            mov cl, al ; save result of xor into 'dl'
3656   1B92 E4            pop a      ; restore left side operator
3657   1B93 DF            push cl    ; save result of xor above
3658   1B94 FD AA         swp a  
3659   1B96 93 80         test al, $80  
3660   1B98 FD AA         swp a  
3661   1B9A C6 9F 1B      jz skip_invert_a_84  
3662   1B9D FD 95         neg a 
3663   1B9F             skip_invert_a_84:   
3664   1B9F FD AB         swp b
3665   1BA1 FD 93 80      test bl, $80  
3666   1BA4 FD AB         swp b
3667   1BA6 C6 AB 1B      jz skip_invert_b_84  
3668   1BA9 FD 97         neg b 
3669   1BAB             skip_invert_b_84:   
3670   1BAB AC            mul a, b ; *
3671   1BAC FD 78         mov g, a
3672   1BAE 11            mov a, b
3673   1BAF EA            pop bl
3674   1BB0 FD 93 80      test bl, $80
3675   1BB3 C6 C0 1B      jz _same_signs_84
3676   1BB6 2F            mov bl, al
3677   1BB7 95            not a
3678   1BB8 FD 97         neg b
3679   1BBA 5B 00 00      adc a, 0
3680   1BBD FD 78         mov g, a
3681   1BBF 11            mov a, b
3682   1BC0             _same_signs_84:
3683   1BC0 FD 38         mov c, g
3684   1BC2 27            mov b, a
3685   1BC3 FD F1         pop g
3686   1BC5 E4            pop a
3687   1BC6             ; --- END FACTORS
3688   1BC6 FD 15         add32 cb, ga
3689   1BC8 FD F1         pop g
3690   1BCA E4            pop a
3691   1BCB             ; --- END TERMS
3692   1BCB E7            pop d
3693   1BCC FD 43         mov [d], b
3694   1BCE             ; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
3695   1BCE FA EB FF      lea d, [bp + -21] ; $x2
3696   1BD1 DA            push d
3697   1BD2 FD 2E 64 00   mov32 cb, $00000064
3697   1BD6 00 00 
3698   1BD8             ; --- START FACTORS
3699   1BD8 D7            push a
3700   1BD9 FD D8         push g
3701   1BDB 11            mov a, b
3702   1BDC FD 7A         mov g, c
3703   1BDE 3B CD 6D      mov d, _c_data ; $c
3704   1BE1 D7            push a
3705   1BE2 DA            push d
3706   1BE3 FD 2E 02 00   mov32 cb, $00000002
3706   1BE7 00 00 
3707   1BE9 E7            pop d
3708   1BEA FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3709   1BEE DA            push d
3710   1BEF FA F7 FF      lea d, [bp + -9] ; $c2
3711   1BF2 2A            mov b, [d]
3712   1BF3 38 00 00      mov c, 0
3713   1BF6 E7            pop d
3714   1BF7 5A            add d, b
3715   1BF8 E4            pop a
3716   1BF9 32            mov bl, [d]
3717   1BFA A7 00         mov bh, 0
3718   1BFC 38 00 00      mov c, 0
3719   1BFF D7            push a     ; save left operand
3720   1C00 8E            xor a, b   ; xor sign bits
3721   1C01 FD AA         swp a      ; swap bytes
3722   1C03 83            mov cl, al ; save result of xor into 'dl'
3723   1C04 E4            pop a      ; restore left side operator
3724   1C05 DF            push cl    ; save result of xor above
3725   1C06 FD AA         swp a  
3726   1C08 93 80         test al, $80  
3727   1C0A FD AA         swp a  
3728   1C0C C6 11 1C      jz skip_invert_a_87  
3729   1C0F FD 95         neg a 
3730   1C11             skip_invert_a_87:   
3731   1C11 FD AB         swp b
3732   1C13 FD 93 80      test bl, $80  
3733   1C16 FD AB         swp b
3734   1C18 C6 1D 1C      jz skip_invert_b_87  
3735   1C1B FD 97         neg b 
3736   1C1D             skip_invert_b_87:   
3737   1C1D AC            mul a, b ; *
3738   1C1E FD 78         mov g, a
3739   1C20 11            mov a, b
3740   1C21 EA            pop bl
3741   1C22 FD 93 80      test bl, $80
3742   1C25 C6 32 1C      jz _same_signs_87
3743   1C28 2F            mov bl, al
3744   1C29 95            not a
3745   1C2A FD 97         neg b
3746   1C2C 5B 00 00      adc a, 0
3747   1C2F FD 78         mov g, a
3748   1C31 11            mov a, b
3749   1C32             _same_signs_87:
3750   1C32 FD 38         mov c, g
3751   1C34 27            mov b, a
3752   1C35 FD F1         pop g
3753   1C37 E4            pop a
3754   1C38             ; --- END FACTORS
3755   1C38             ; --- START TERMS
3756   1C38 D7            push a
3757   1C39 FD D8         push g
3758   1C3B 11            mov a, b
3759   1C3C FD 7A         mov g, c
3760   1C3E 3B CD 6D      mov d, _c_data ; $c
3761   1C41 D7            push a
3762   1C42 DA            push d
3763   1C43 FD 2E 02 00   mov32 cb, $00000002
3763   1C47 00 00 
3764   1C49 E7            pop d
3765   1C4A FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3766   1C4E DA            push d
3767   1C4F FA F5 FF      lea d, [bp + -11] ; $c3
3768   1C52 2A            mov b, [d]
3769   1C53 38 00 00      mov c, 0
3770   1C56 E7            pop d
3771   1C57 5A            add d, b
3772   1C58 E4            pop a
3773   1C59 32            mov bl, [d]
3774   1C5A A7 00         mov bh, 0
3775   1C5C 38 00 00      mov c, 0
3776   1C5F             ; --- START TERMS
3777   1C5F D7            push a
3778   1C60 11            mov a, b
3779   1C61 3B CD 6D      mov d, _c_data ; $c
3780   1C64 D7            push a
3781   1C65 DA            push d
3782   1C66 FD 2E 02 00   mov32 cb, $00000002
3782   1C6A 00 00 
3783   1C6C E7            pop d
3784   1C6D FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3785   1C71 DA            push d
3786   1C72 FA F7 FF      lea d, [bp + -9] ; $c2
3787   1C75 2A            mov b, [d]
3788   1C76 38 00 00      mov c, 0
3789   1C79 E7            pop d
3790   1C7A 5A            add d, b
3791   1C7B E4            pop a
3792   1C7C 32            mov bl, [d]
3793   1C7D A7 00         mov bh, 0
3794   1C7F 38 00 00      mov c, 0
3795   1C82 60            sub a, b
3796   1C83 27            mov b, a
3797   1C84 E4            pop a
3798   1C85             ; --- END TERMS
3799   1C85             ; --- START FACTORS
3800   1C85 D7            push a
3801   1C86 FD D8         push g
3802   1C88 11            mov a, b
3803   1C89 FD 7A         mov g, c
3804   1C8B FA F3 FF      lea d, [bp + -13] ; $c4
3805   1C8E 2A            mov b, [d]
3806   1C8F 38 00 00      mov c, 0
3807   1C92 D7            push a     ; save left operand
3808   1C93 8E            xor a, b   ; xor sign bits
3809   1C94 FD AA         swp a      ; swap bytes
3810   1C96 83            mov cl, al ; save result of xor into 'dl'
3811   1C97 E4            pop a      ; restore left side operator
3812   1C98 DF            push cl    ; save result of xor above
3813   1C99 FD AA         swp a  
3814   1C9B 93 80         test al, $80  
3815   1C9D FD AA         swp a  
3816   1C9F C6 A4 1C      jz skip_invert_a_88  
3817   1CA2 FD 95         neg a 
3818   1CA4             skip_invert_a_88:   
3819   1CA4 FD AB         swp b
3820   1CA6 FD 93 80      test bl, $80  
3821   1CA9 FD AB         swp b
3822   1CAB C6 B0 1C      jz skip_invert_b_88  
3823   1CAE FD 97         neg b 
3824   1CB0             skip_invert_b_88:   
3825   1CB0 AC            mul a, b ; *
3826   1CB1 FD 78         mov g, a
3827   1CB3 11            mov a, b
3828   1CB4 EA            pop bl
3829   1CB5 FD 93 80      test bl, $80
3830   1CB8 C6 C5 1C      jz _same_signs_88
3831   1CBB 2F            mov bl, al
3832   1CBC 95            not a
3833   1CBD FD 97         neg b
3834   1CBF 5B 00 00      adc a, 0
3835   1CC2 FD 78         mov g, a
3836   1CC4 11            mov a, b
3837   1CC5             _same_signs_88:
3838   1CC5 FD 38         mov c, g
3839   1CC7 27            mov b, a
3840   1CC8 FD F1         pop g
3841   1CCA E4            pop a
3842   1CCB             ; --- END FACTORS
3843   1CCB FD 15         add32 cb, ga
3844   1CCD FD F1         pop g
3845   1CCF E4            pop a
3846   1CD0             ; --- END TERMS
3847   1CD0 E7            pop d
3848   1CD1 FD 43         mov [d], b
3849   1CD3             ; x = ship_y; 
3850   1CD3 FA E9 FF      lea d, [bp + -23] ; $x
3851   1CD6 DA            push d
3852   1CD7 3B C2 6E      mov d, _ship_y ; $ship_y
3853   1CDA 2A            mov b, [d]
3854   1CDB 38 00 00      mov c, 0
3855   1CDE E7            pop d
3856   1CDF FD 43         mov [d], b
3857   1CE1             ; y = ship_x; 
3858   1CE1 FA E7 FF      lea d, [bp + -25] ; $y
3859   1CE4 DA            push d
3860   1CE5 3B C4 6E      mov d, _ship_x ; $ship_x
3861   1CE8 2A            mov b, [d]
3862   1CE9 38 00 00      mov c, 0
3863   1CEC E7            pop d
3864   1CED FD 43         mov [d], b
3865   1CEF             ; for (i = 1; i <= n; i++) { 
3866   1CEF             _for89_init:
3867   1CEF FA FF FF      lea d, [bp + -1] ; $i
3868   1CF2 DA            push d
3869   1CF3 FD 2E 01 00   mov32 cb, $00000001
3869   1CF7 00 00 
3870   1CF9 E7            pop d
3871   1CFA FD 43         mov [d], b
3872   1CFC             _for89_cond:
3873   1CFC FA FF FF      lea d, [bp + -1] ; $i
3874   1CFF 2A            mov b, [d]
3875   1D00 38 00 00      mov c, 0
3876   1D03             ; --- START RELATIONAL
3877   1D03 D7            push a
3878   1D04 11            mov a, b
3879   1D05 FA F9 FF      lea d, [bp + -7] ; $n
3880   1D08 2A            mov b, [d]
3881   1D09 38 00 00      mov c, 0
3882   1D0C B0            cmp a, b
3883   1D0D FD 74         sle ; <= (signed)
3884   1D0F E4            pop a
3885   1D10             ; --- END RELATIONAL
3886   1D10 C0 00 00      cmp b, 0
3887   1D13 C6 1B 24      je _for89_exit
3888   1D16             _for89_block:
3889   1D16             ; ship_y = ship_y + x1; 
3890   1D16 3B C2 6E      mov d, _ship_y ; $ship_y
3891   1D19 DA            push d
3892   1D1A 3B C2 6E      mov d, _ship_y ; $ship_y
3893   1D1D 2A            mov b, [d]
3894   1D1E 38 00 00      mov c, 0
3895   1D21             ; --- START TERMS
3896   1D21 D7            push a
3897   1D22 11            mov a, b
3898   1D23 FA ED FF      lea d, [bp + -19] ; $x1
3899   1D26 2A            mov b, [d]
3900   1D27 38 00 00      mov c, 0
3901   1D2A 56            add b, a
3902   1D2B E4            pop a
3903   1D2C             ; --- END TERMS
3904   1D2C E7            pop d
3905   1D2D FD 43         mov [d], b
3906   1D2F             ; ship_x = ship_x + x2; 
3907   1D2F 3B C4 6E      mov d, _ship_x ; $ship_x
3908   1D32 DA            push d
3909   1D33 3B C4 6E      mov d, _ship_x ; $ship_x
3910   1D36 2A            mov b, [d]
3911   1D37 38 00 00      mov c, 0
3912   1D3A             ; --- START TERMS
3913   1D3A D7            push a
3914   1D3B 11            mov a, b
3915   1D3C FA EB FF      lea d, [bp + -21] ; $x2
3916   1D3F 2A            mov b, [d]
3917   1D40 38 00 00      mov c, 0
3918   1D43 56            add b, a
3919   1D44 E4            pop a
3920   1D45             ; --- END TERMS
3921   1D45 E7            pop d
3922   1D46 FD 43         mov [d], b
3923   1D48             ; z1 = FROM_FIXED00(ship_y); 
3924   1D48 FA F1 FF      lea d, [bp + -15] ; $z1
3925   1D4B DA            push d
3926   1D4C             ; --- START FUNCTION CALL
3927   1D4C 3B C2 6E      mov d, _ship_y ; $ship_y
3928   1D4F 2A            mov b, [d]
3929   1D50 38 00 00      mov c, 0
3930   1D53 FD AB         swp b
3931   1D55 D8            push b
3932   1D56 07 DC 04      call FROM_FIXED00
3933   1D59 51 02 00      add sp, 2
3934   1D5C             ; --- END FUNCTION CALL
3935   1D5C E7            pop d
3936   1D5D FD 43         mov [d], b
3937   1D5F             ; z2 = FROM_FIXED00(ship_x);	/* ?? cint100 ?? */ 
3938   1D5F FA EF FF      lea d, [bp + -17] ; $z2
3939   1D62 DA            push d
3940   1D63             ; --- START FUNCTION CALL
3941   1D63 3B C4 6E      mov d, _ship_x ; $ship_x
3942   1D66 2A            mov b, [d]
3943   1D67 38 00 00      mov c, 0
3944   1D6A FD AB         swp b
3945   1D6C D8            push b
3946   1D6D 07 DC 04      call FROM_FIXED00
3947   1D70 51 02 00      add sp, 2
3948   1D73             ; --- END FUNCTION CALL
3949   1D73 E7            pop d
3950   1D74 FD 43         mov [d], b
3951   1D76             ; if (z1 < 1 || z1 >= 9 || z2 < 1 || z2 >= 9) { 
3952   1D76             _if90_cond:
3953   1D76 FA F1 FF      lea d, [bp + -15] ; $z1
3954   1D79 2A            mov b, [d]
3955   1D7A 38 00 00      mov c, 0
3956   1D7D             ; --- START RELATIONAL
3957   1D7D D7            push a
3958   1D7E 11            mov a, b
3959   1D7F FD 2E 01 00   mov32 cb, $00000001
3959   1D83 00 00 
3960   1D85 B0            cmp a, b
3961   1D86 FD 73         slt ; < (signed)
3962   1D88 E4            pop a
3963   1D89             ; --- END RELATIONAL
3964   1D89             ; --- START LOGICAL OR
3965   1D89 D7            push a
3966   1D8A 11            mov a, b
3967   1D8B FA F1 FF      lea d, [bp + -15] ; $z1
3968   1D8E 2A            mov b, [d]
3969   1D8F 38 00 00      mov c, 0
3970   1D92             ; --- START RELATIONAL
3971   1D92 D7            push a
3972   1D93 11            mov a, b
3973   1D94 FD 2E 09 00   mov32 cb, $00000009
3973   1D98 00 00 
3974   1D9A B0            cmp a, b
3975   1D9B FD 80         sge ; >=
3976   1D9D E4            pop a
3977   1D9E             ; --- END RELATIONAL
3978   1D9E FD A8         sor a, b ; ||
3979   1DA0 11            mov a, b
3980   1DA1 FA EF FF      lea d, [bp + -17] ; $z2
3981   1DA4 2A            mov b, [d]
3982   1DA5 38 00 00      mov c, 0
3983   1DA8             ; --- START RELATIONAL
3984   1DA8 D7            push a
3985   1DA9 11            mov a, b
3986   1DAA FD 2E 01 00   mov32 cb, $00000001
3986   1DAE 00 00 
3987   1DB0 B0            cmp a, b
3988   1DB1 FD 73         slt ; < (signed)
3989   1DB3 E4            pop a
3990   1DB4             ; --- END RELATIONAL
3991   1DB4 FD A8         sor a, b ; ||
3992   1DB6 11            mov a, b
3993   1DB7 FA EF FF      lea d, [bp + -17] ; $z2
3994   1DBA 2A            mov b, [d]
3995   1DBB 38 00 00      mov c, 0
3996   1DBE             ; --- START RELATIONAL
3997   1DBE D7            push a
3998   1DBF 11            mov a, b
3999   1DC0 FD 2E 09 00   mov32 cb, $00000009
3999   1DC4 00 00 
4000   1DC6 B0            cmp a, b
4001   1DC7 FD 80         sge ; >=
4002   1DC9 E4            pop a
4003   1DCA             ; --- END RELATIONAL
4004   1DCA FD A8         sor a, b ; ||
4005   1DCC E4            pop a
4006   1DCD             ; --- END LOGICAL OR
4007   1DCD C0 00 00      cmp b, 0
4008   1DD0 C6 51 23      je _if90_exit
4009   1DD3             _if90_TRUE:
4010   1DD3             ; outside = 0;		/* Outside galaxy flag */ 
4011   1DD3 FA E6 FF      lea d, [bp + -26] ; $outside
4012   1DD6 DA            push d
4013   1DD7 FD 2E 00 00   mov32 cb, $00000000
4013   1DDB 00 00 
4014   1DDD E7            pop d
4015   1DDE FD 3E         mov [d], bl
4016   1DE0             ; quad_y_old = quad_y; 
4017   1DE0 FA E5 FF      lea d, [bp + -27] ; $quad_y_old
4018   1DE3 DA            push d
4019   1DE4 3B A3 6E      mov d, _quad_y ; $quad_y
4020   1DE7 2A            mov b, [d]
4021   1DE8 38 00 00      mov c, 0
4022   1DEB E7            pop d
4023   1DEC FD 3E         mov [d], bl
4024   1DEE             ; quad_x_old = quad_x; 
4025   1DEE FA E4 FF      lea d, [bp + -28] ; $quad_x_old
4026   1DF1 DA            push d
4027   1DF2 3B A5 6E      mov d, _quad_x ; $quad_x
4028   1DF5 2A            mov b, [d]
4029   1DF6 38 00 00      mov c, 0
4030   1DF9 E7            pop d
4031   1DFA FD 3E         mov [d], bl
4032   1DFC             ; x = (800 * quad_y) + x + (n * x1); 
4033   1DFC FA E9 FF      lea d, [bp + -23] ; $x
4034   1DFF DA            push d
4035   1E00 FD 2E 20 03   mov32 cb, $00000320
4035   1E04 00 00 
4036   1E06             ; --- START FACTORS
4037   1E06 D7            push a
4038   1E07 FD D8         push g
4039   1E09 11            mov a, b
4040   1E0A FD 7A         mov g, c
4041   1E0C 3B A3 6E      mov d, _quad_y ; $quad_y
4042   1E0F 2A            mov b, [d]
4043   1E10 38 00 00      mov c, 0
4044   1E13 D7            push a     ; save left operand
4045   1E14 8E            xor a, b   ; xor sign bits
4046   1E15 FD AA         swp a      ; swap bytes
4047   1E17 83            mov cl, al ; save result of xor into 'dl'
4048   1E18 E4            pop a      ; restore left side operator
4049   1E19 DF            push cl    ; save result of xor above
4050   1E1A FD AA         swp a  
4051   1E1C 93 80         test al, $80  
4052   1E1E FD AA         swp a  
4053   1E20 C6 25 1E      jz skip_invert_a_96  
4054   1E23 FD 95         neg a 
4055   1E25             skip_invert_a_96:   
4056   1E25 FD AB         swp b
4057   1E27 FD 93 80      test bl, $80  
4058   1E2A FD AB         swp b
4059   1E2C C6 31 1E      jz skip_invert_b_96  
4060   1E2F FD 97         neg b 
4061   1E31             skip_invert_b_96:   
4062   1E31 AC            mul a, b ; *
4063   1E32 FD 78         mov g, a
4064   1E34 11            mov a, b
4065   1E35 EA            pop bl
4066   1E36 FD 93 80      test bl, $80
4067   1E39 C6 46 1E      jz _same_signs_96
4068   1E3C 2F            mov bl, al
4069   1E3D 95            not a
4070   1E3E FD 97         neg b
4071   1E40 5B 00 00      adc a, 0
4072   1E43 FD 78         mov g, a
4073   1E45 11            mov a, b
4074   1E46             _same_signs_96:
4075   1E46 FD 38         mov c, g
4076   1E48 27            mov b, a
4077   1E49 FD F1         pop g
4078   1E4B E4            pop a
4079   1E4C             ; --- END FACTORS
4080   1E4C             ; --- START TERMS
4081   1E4C D7            push a
4082   1E4D FD D8         push g
4083   1E4F 11            mov a, b
4084   1E50 FD 7A         mov g, c
4085   1E52 FA E9 FF      lea d, [bp + -23] ; $x
4086   1E55 2A            mov b, [d]
4087   1E56 38 00 00      mov c, 0
4088   1E59 38 00 00      mov c, 0
4089   1E5C FD 15         add32 cb, ga
4090   1E5E 11            mov a, b
4091   1E5F FD 7A         mov g, c
4092   1E61 FA F9 FF      lea d, [bp + -7] ; $n
4093   1E64 2A            mov b, [d]
4094   1E65 38 00 00      mov c, 0
4095   1E68             ; --- START FACTORS
4096   1E68 D7            push a
4097   1E69 FD D8         push g
4098   1E6B 11            mov a, b
4099   1E6C FD 7A         mov g, c
4100   1E6E FA ED FF      lea d, [bp + -19] ; $x1
4101   1E71 2A            mov b, [d]
4102   1E72 38 00 00      mov c, 0
4103   1E75 D7            push a     ; save left operand
4104   1E76 8E            xor a, b   ; xor sign bits
4105   1E77 FD AA         swp a      ; swap bytes
4106   1E79 83            mov cl, al ; save result of xor into 'dl'
4107   1E7A E4            pop a      ; restore left side operator
4108   1E7B DF            push cl    ; save result of xor above
4109   1E7C FD AA         swp a  
4110   1E7E 93 80         test al, $80  
4111   1E80 FD AA         swp a  
4112   1E82 C6 87 1E      jz skip_invert_a_98  
4113   1E85 FD 95         neg a 
4114   1E87             skip_invert_a_98:   
4115   1E87 FD AB         swp b
4116   1E89 FD 93 80      test bl, $80  
4117   1E8C FD AB         swp b
4118   1E8E C6 93 1E      jz skip_invert_b_98  
4119   1E91 FD 97         neg b 
4120   1E93             skip_invert_b_98:   
4121   1E93 AC            mul a, b ; *
4122   1E94 FD 78         mov g, a
4123   1E96 11            mov a, b
4124   1E97 EA            pop bl
4125   1E98 FD 93 80      test bl, $80
4126   1E9B C6 A8 1E      jz _same_signs_98
4127   1E9E 2F            mov bl, al
4128   1E9F 95            not a
4129   1EA0 FD 97         neg b
4130   1EA2 5B 00 00      adc a, 0
4131   1EA5 FD 78         mov g, a
4132   1EA7 11            mov a, b
4133   1EA8             _same_signs_98:
4134   1EA8 FD 38         mov c, g
4135   1EAA 27            mov b, a
4136   1EAB FD F1         pop g
4137   1EAD E4            pop a
4138   1EAE             ; --- END FACTORS
4139   1EAE FD 15         add32 cb, ga
4140   1EB0 FD F1         pop g
4141   1EB2 E4            pop a
4142   1EB3             ; --- END TERMS
4143   1EB3 E7            pop d
4144   1EB4 FD 43         mov [d], b
4145   1EB6             ; y = (800 * quad_x) + y + (n * x2); 
4146   1EB6 FA E7 FF      lea d, [bp + -25] ; $y
4147   1EB9 DA            push d
4148   1EBA FD 2E 20 03   mov32 cb, $00000320
4148   1EBE 00 00 
4149   1EC0             ; --- START FACTORS
4150   1EC0 D7            push a
4151   1EC1 FD D8         push g
4152   1EC3 11            mov a, b
4153   1EC4 FD 7A         mov g, c
4154   1EC6 3B A5 6E      mov d, _quad_x ; $quad_x
4155   1EC9 2A            mov b, [d]
4156   1ECA 38 00 00      mov c, 0
4157   1ECD D7            push a     ; save left operand
4158   1ECE 8E            xor a, b   ; xor sign bits
4159   1ECF FD AA         swp a      ; swap bytes
4160   1ED1 83            mov cl, al ; save result of xor into 'dl'
4161   1ED2 E4            pop a      ; restore left side operator
4162   1ED3 DF            push cl    ; save result of xor above
4163   1ED4 FD AA         swp a  
4164   1ED6 93 80         test al, $80  
4165   1ED8 FD AA         swp a  
4166   1EDA C6 DF 1E      jz skip_invert_a_104  
4167   1EDD FD 95         neg a 
4168   1EDF             skip_invert_a_104:   
4169   1EDF FD AB         swp b
4170   1EE1 FD 93 80      test bl, $80  
4171   1EE4 FD AB         swp b
4172   1EE6 C6 EB 1E      jz skip_invert_b_104  
4173   1EE9 FD 97         neg b 
4174   1EEB             skip_invert_b_104:   
4175   1EEB AC            mul a, b ; *
4176   1EEC FD 78         mov g, a
4177   1EEE 11            mov a, b
4178   1EEF EA            pop bl
4179   1EF0 FD 93 80      test bl, $80
4180   1EF3 C6 00 1F      jz _same_signs_104
4181   1EF6 2F            mov bl, al
4182   1EF7 95            not a
4183   1EF8 FD 97         neg b
4184   1EFA 5B 00 00      adc a, 0
4185   1EFD FD 78         mov g, a
4186   1EFF 11            mov a, b
4187   1F00             _same_signs_104:
4188   1F00 FD 38         mov c, g
4189   1F02 27            mov b, a
4190   1F03 FD F1         pop g
4191   1F05 E4            pop a
4192   1F06             ; --- END FACTORS
4193   1F06             ; --- START TERMS
4194   1F06 D7            push a
4195   1F07 FD D8         push g
4196   1F09 11            mov a, b
4197   1F0A FD 7A         mov g, c
4198   1F0C FA E7 FF      lea d, [bp + -25] ; $y
4199   1F0F 2A            mov b, [d]
4200   1F10 38 00 00      mov c, 0
4201   1F13 38 00 00      mov c, 0
4202   1F16 FD 15         add32 cb, ga
4203   1F18 11            mov a, b
4204   1F19 FD 7A         mov g, c
4205   1F1B FA F9 FF      lea d, [bp + -7] ; $n
4206   1F1E 2A            mov b, [d]
4207   1F1F 38 00 00      mov c, 0
4208   1F22             ; --- START FACTORS
4209   1F22 D7            push a
4210   1F23 FD D8         push g
4211   1F25 11            mov a, b
4212   1F26 FD 7A         mov g, c
4213   1F28 FA EB FF      lea d, [bp + -21] ; $x2
4214   1F2B 2A            mov b, [d]
4215   1F2C 38 00 00      mov c, 0
4216   1F2F D7            push a     ; save left operand
4217   1F30 8E            xor a, b   ; xor sign bits
4218   1F31 FD AA         swp a      ; swap bytes
4219   1F33 83            mov cl, al ; save result of xor into 'dl'
4220   1F34 E4            pop a      ; restore left side operator
4221   1F35 DF            push cl    ; save result of xor above
4222   1F36 FD AA         swp a  
4223   1F38 93 80         test al, $80  
4224   1F3A FD AA         swp a  
4225   1F3C C6 41 1F      jz skip_invert_a_106  
4226   1F3F FD 95         neg a 
4227   1F41             skip_invert_a_106:   
4228   1F41 FD AB         swp b
4229   1F43 FD 93 80      test bl, $80  
4230   1F46 FD AB         swp b
4231   1F48 C6 4D 1F      jz skip_invert_b_106  
4232   1F4B FD 97         neg b 
4233   1F4D             skip_invert_b_106:   
4234   1F4D AC            mul a, b ; *
4235   1F4E FD 78         mov g, a
4236   1F50 11            mov a, b
4237   1F51 EA            pop bl
4238   1F52 FD 93 80      test bl, $80
4239   1F55 C6 62 1F      jz _same_signs_106
4240   1F58 2F            mov bl, al
4241   1F59 95            not a
4242   1F5A FD 97         neg b
4243   1F5C 5B 00 00      adc a, 0
4244   1F5F FD 78         mov g, a
4245   1F61 11            mov a, b
4246   1F62             _same_signs_106:
4247   1F62 FD 38         mov c, g
4248   1F64 27            mov b, a
4249   1F65 FD F1         pop g
4250   1F67 E4            pop a
4251   1F68             ; --- END FACTORS
4252   1F68 FD 15         add32 cb, ga
4253   1F6A FD F1         pop g
4254   1F6C E4            pop a
4255   1F6D             ; --- END TERMS
4256   1F6D E7            pop d
4257   1F6E FD 43         mov [d], b
4258   1F70             ; quad_y = x / 800;	/* Fixed point to int and divide by 8 */ 
4259   1F70 3B A3 6E      mov d, _quad_y ; $quad_y
4260   1F73 DA            push d
4261   1F74 FA E9 FF      lea d, [bp + -23] ; $x
4262   1F77 2A            mov b, [d]
4263   1F78 38 00 00      mov c, 0
4264   1F7B             ; --- START FACTORS
4265   1F7B D7            push a
4266   1F7C FD D8         push g
4267   1F7E 11            mov a, b
4268   1F7F FD 7A         mov g, c
4269   1F81 FD 2E 20 03   mov32 cb, $00000320
4269   1F85 00 00 
4270   1F87 FD D8         push g ; save 'g' as the div instruction uses it
4271   1F89 AE            div a, b ; /, a: quotient, b: remainder
4272   1F8A FD F1         pop g
4273   1F8C FD 38         mov c, g
4274   1F8E 27            mov b, a
4275   1F8F FD F1         pop g
4276   1F91 E4            pop a
4277   1F92             ; --- END FACTORS
4278   1F92 E7            pop d
4279   1F93 FD 43         mov [d], b
4280   1F95             ; quad_x = y / 800;	/* Ditto */ 
4281   1F95 3B A5 6E      mov d, _quad_x ; $quad_x
4282   1F98 DA            push d
4283   1F99 FA E7 FF      lea d, [bp + -25] ; $y
4284   1F9C 2A            mov b, [d]
4285   1F9D 38 00 00      mov c, 0
4286   1FA0             ; --- START FACTORS
4287   1FA0 D7            push a
4288   1FA1 FD D8         push g
4289   1FA3 11            mov a, b
4290   1FA4 FD 7A         mov g, c
4291   1FA6 FD 2E 20 03   mov32 cb, $00000320
4291   1FAA 00 00 
4292   1FAC FD D8         push g ; save 'g' as the div instruction uses it
4293   1FAE AE            div a, b ; /, a: quotient, b: remainder
4294   1FAF FD F1         pop g
4295   1FB1 FD 38         mov c, g
4296   1FB3 27            mov b, a
4297   1FB4 FD F1         pop g
4298   1FB6 E4            pop a
4299   1FB7             ; --- END FACTORS
4300   1FB7 E7            pop d
4301   1FB8 FD 43         mov [d], b
4302   1FBA             ; ship_y = x - (quad_y * 800); 
4303   1FBA 3B C2 6E      mov d, _ship_y ; $ship_y
4304   1FBD DA            push d
4305   1FBE FA E9 FF      lea d, [bp + -23] ; $x
4306   1FC1 2A            mov b, [d]
4307   1FC2 38 00 00      mov c, 0
4308   1FC5             ; --- START TERMS
4309   1FC5 D7            push a
4310   1FC6 11            mov a, b
4311   1FC7 3B A3 6E      mov d, _quad_y ; $quad_y
4312   1FCA 2A            mov b, [d]
4313   1FCB 38 00 00      mov c, 0
4314   1FCE             ; --- START FACTORS
4315   1FCE D7            push a
4316   1FCF FD D8         push g
4317   1FD1 11            mov a, b
4318   1FD2 FD 7A         mov g, c
4319   1FD4 FD 2E 20 03   mov32 cb, $00000320
4319   1FD8 00 00 
4320   1FDA D7            push a     ; save left operand
4321   1FDB 8E            xor a, b   ; xor sign bits
4322   1FDC FD AA         swp a      ; swap bytes
4323   1FDE 83            mov cl, al ; save result of xor into 'dl'
4324   1FDF E4            pop a      ; restore left side operator
4325   1FE0 DF            push cl    ; save result of xor above
4326   1FE1 FD AA         swp a  
4327   1FE3 93 80         test al, $80  
4328   1FE5 FD AA         swp a  
4329   1FE7 C6 EC 1F      jz skip_invert_a_114  
4330   1FEA FD 95         neg a 
4331   1FEC             skip_invert_a_114:   
4332   1FEC FD AB         swp b
4333   1FEE FD 93 80      test bl, $80  
4334   1FF1 FD AB         swp b
4335   1FF3 C6 F8 1F      jz skip_invert_b_114  
4336   1FF6 FD 97         neg b 
4337   1FF8             skip_invert_b_114:   
4338   1FF8 AC            mul a, b ; *
4339   1FF9 FD 78         mov g, a
4340   1FFB 11            mov a, b
4341   1FFC EA            pop bl
4342   1FFD FD 93 80      test bl, $80
4343   2000 C6 0D 20      jz _same_signs_114
4344   2003 2F            mov bl, al
4345   2004 95            not a
4346   2005 FD 97         neg b
4347   2007 5B 00 00      adc a, 0
4348   200A FD 78         mov g, a
4349   200C 11            mov a, b
4350   200D             _same_signs_114:
4351   200D FD 38         mov c, g
4352   200F 27            mov b, a
4353   2010 FD F1         pop g
4354   2012 E4            pop a
4355   2013             ; --- END FACTORS
4356   2013 FD 22 00 00   mov g, 0
4357   2017 FD 1C         sub32 ga, cb
4358   2019 27            mov b, a
4359   201A FD 38         mov c, g
4360   201C E4            pop a
4361   201D             ; --- END TERMS
4362   201D E7            pop d
4363   201E FD 43         mov [d], b
4364   2020             ; ship_x = y - (quad_x * 800); 
4365   2020 3B C4 6E      mov d, _ship_x ; $ship_x
4366   2023 DA            push d
4367   2024 FA E7 FF      lea d, [bp + -25] ; $y
4368   2027 2A            mov b, [d]
4369   2028 38 00 00      mov c, 0
4370   202B             ; --- START TERMS
4371   202B D7            push a
4372   202C 11            mov a, b
4373   202D 3B A5 6E      mov d, _quad_x ; $quad_x
4374   2030 2A            mov b, [d]
4375   2031 38 00 00      mov c, 0
4376   2034             ; --- START FACTORS
4377   2034 D7            push a
4378   2035 FD D8         push g
4379   2037 11            mov a, b
4380   2038 FD 7A         mov g, c
4381   203A FD 2E 20 03   mov32 cb, $00000320
4381   203E 00 00 
4382   2040 D7            push a     ; save left operand
4383   2041 8E            xor a, b   ; xor sign bits
4384   2042 FD AA         swp a      ; swap bytes
4385   2044 83            mov cl, al ; save result of xor into 'dl'
4386   2045 E4            pop a      ; restore left side operator
4387   2046 DF            push cl    ; save result of xor above
4388   2047 FD AA         swp a  
4389   2049 93 80         test al, $80  
4390   204B FD AA         swp a  
4391   204D C6 52 20      jz skip_invert_a_118  
4392   2050 FD 95         neg a 
4393   2052             skip_invert_a_118:   
4394   2052 FD AB         swp b
4395   2054 FD 93 80      test bl, $80  
4396   2057 FD AB         swp b
4397   2059 C6 5E 20      jz skip_invert_b_118  
4398   205C FD 97         neg b 
4399   205E             skip_invert_b_118:   
4400   205E AC            mul a, b ; *
4401   205F FD 78         mov g, a
4402   2061 11            mov a, b
4403   2062 EA            pop bl
4404   2063 FD 93 80      test bl, $80
4405   2066 C6 73 20      jz _same_signs_118
4406   2069 2F            mov bl, al
4407   206A 95            not a
4408   206B FD 97         neg b
4409   206D 5B 00 00      adc a, 0
4410   2070 FD 78         mov g, a
4411   2072 11            mov a, b
4412   2073             _same_signs_118:
4413   2073 FD 38         mov c, g
4414   2075 27            mov b, a
4415   2076 FD F1         pop g
4416   2078 E4            pop a
4417   2079             ; --- END FACTORS
4418   2079 FD 22 00 00   mov g, 0
4419   207D FD 1C         sub32 ga, cb
4420   207F 27            mov b, a
4421   2080 FD 38         mov c, g
4422   2082 E4            pop a
4423   2083             ; --- END TERMS
4424   2083 E7            pop d
4425   2084 FD 43         mov [d], b
4426   2086             ; if (ship_y < 100) { 
4427   2086             _if119_cond:
4428   2086 3B C2 6E      mov d, _ship_y ; $ship_y
4429   2089 2A            mov b, [d]
4430   208A 38 00 00      mov c, 0
4431   208D             ; --- START RELATIONAL
4432   208D D7            push a
4433   208E 11            mov a, b
4434   208F FD 2E 64 00   mov32 cb, $00000064
4434   2093 00 00 
4435   2095 B0            cmp a, b
4436   2096 FD 73         slt ; < (signed)
4437   2098 E4            pop a
4438   2099             ; --- END RELATIONAL
4439   2099 C0 00 00      cmp b, 0
4440   209C C6 D3 20      je _if119_exit
4441   209F             _if119_TRUE:
4442   209F             ; quad_y = quad_y - 1; 
4443   209F 3B A3 6E      mov d, _quad_y ; $quad_y
4444   20A2 DA            push d
4445   20A3 3B A3 6E      mov d, _quad_y ; $quad_y
4446   20A6 2A            mov b, [d]
4447   20A7 38 00 00      mov c, 0
4448   20AA             ; --- START TERMS
4449   20AA D7            push a
4450   20AB 11            mov a, b
4451   20AC FD 2E 01 00   mov32 cb, $00000001
4451   20B0 00 00 
4452   20B2 60            sub a, b
4453   20B3 27            mov b, a
4454   20B4 E4            pop a
4455   20B5             ; --- END TERMS
4456   20B5 E7            pop d
4457   20B6 FD 43         mov [d], b
4458   20B8             ; ship_y = ship_y + 800; 
4459   20B8 3B C2 6E      mov d, _ship_y ; $ship_y
4460   20BB DA            push d
4461   20BC 3B C2 6E      mov d, _ship_y ; $ship_y
4462   20BF 2A            mov b, [d]
4463   20C0 38 00 00      mov c, 0
4464   20C3             ; --- START TERMS
4465   20C3 D7            push a
4466   20C4 11            mov a, b
4467   20C5 FD 2E 20 03   mov32 cb, $00000320
4467   20C9 00 00 
4468   20CB 56            add b, a
4469   20CC E4            pop a
4470   20CD             ; --- END TERMS
4471   20CD E7            pop d
4472   20CE FD 43         mov [d], b
4473   20D0 0A D3 20      jmp _if119_exit
4474   20D3             _if119_exit:
4475   20D3             ; if (ship_x < 100) { 
4476   20D3             _if120_cond:
4477   20D3 3B C4 6E      mov d, _ship_x ; $ship_x
4478   20D6 2A            mov b, [d]
4479   20D7 38 00 00      mov c, 0
4480   20DA             ; --- START RELATIONAL
4481   20DA D7            push a
4482   20DB 11            mov a, b
4483   20DC FD 2E 64 00   mov32 cb, $00000064
4483   20E0 00 00 
4484   20E2 B0            cmp a, b
4485   20E3 FD 73         slt ; < (signed)
4486   20E5 E4            pop a
4487   20E6             ; --- END RELATIONAL
4488   20E6 C0 00 00      cmp b, 0
4489   20E9 C6 20 21      je _if120_exit
4490   20EC             _if120_TRUE:
4491   20EC             ; quad_x = quad_x - 1; 
4492   20EC 3B A5 6E      mov d, _quad_x ; $quad_x
4493   20EF DA            push d
4494   20F0 3B A5 6E      mov d, _quad_x ; $quad_x
4495   20F3 2A            mov b, [d]
4496   20F4 38 00 00      mov c, 0
4497   20F7             ; --- START TERMS
4498   20F7 D7            push a
4499   20F8 11            mov a, b
4500   20F9 FD 2E 01 00   mov32 cb, $00000001
4500   20FD 00 00 
4501   20FF 60            sub a, b
4502   2100 27            mov b, a
4503   2101 E4            pop a
4504   2102             ; --- END TERMS
4505   2102 E7            pop d
4506   2103 FD 43         mov [d], b
4507   2105             ; ship_x = ship_x + 800; 
4508   2105 3B C4 6E      mov d, _ship_x ; $ship_x
4509   2108 DA            push d
4510   2109 3B C4 6E      mov d, _ship_x ; $ship_x
4511   210C 2A            mov b, [d]
4512   210D 38 00 00      mov c, 0
4513   2110             ; --- START TERMS
4514   2110 D7            push a
4515   2111 11            mov a, b
4516   2112 FD 2E 20 03   mov32 cb, $00000320
4516   2116 00 00 
4517   2118 56            add b, a
4518   2119 E4            pop a
4519   211A             ; --- END TERMS
4520   211A E7            pop d
4521   211B FD 43         mov [d], b
4522   211D 0A 20 21      jmp _if120_exit
4523   2120             _if120_exit:
4524   2120             ; if (quad_y < 1) { 
4525   2120             _if121_cond:
4526   2120 3B A3 6E      mov d, _quad_y ; $quad_y
4527   2123 2A            mov b, [d]
4528   2124 38 00 00      mov c, 0
4529   2127             ; --- START RELATIONAL
4530   2127 D7            push a
4531   2128 11            mov a, b
4532   2129 FD 2E 01 00   mov32 cb, $00000001
4532   212D 00 00 
4533   212F B0            cmp a, b
4534   2130 FD 73         slt ; < (signed)
4535   2132 E4            pop a
4536   2133             ; --- END RELATIONAL
4537   2133 C0 00 00      cmp b, 0
4538   2136 C6 63 21      je _if121_exit
4539   2139             _if121_TRUE:
4540   2139             ; outside = 1; 
4541   2139 FA E6 FF      lea d, [bp + -26] ; $outside
4542   213C DA            push d
4543   213D FD 2E 01 00   mov32 cb, $00000001
4543   2141 00 00 
4544   2143 E7            pop d
4545   2144 FD 3E         mov [d], bl
4546   2146             ; quad_y = 1; 
4547   2146 3B A3 6E      mov d, _quad_y ; $quad_y
4548   2149 DA            push d
4549   214A FD 2E 01 00   mov32 cb, $00000001
4549   214E 00 00 
4550   2150 E7            pop d
4551   2151 FD 43         mov [d], b
4552   2153             ; ship_y = 100; 
4553   2153 3B C2 6E      mov d, _ship_y ; $ship_y
4554   2156 DA            push d
4555   2157 FD 2E 64 00   mov32 cb, $00000064
4555   215B 00 00 
4556   215D E7            pop d
4557   215E FD 43         mov [d], b
4558   2160 0A 63 21      jmp _if121_exit
4559   2163             _if121_exit:
4560   2163             ; if (quad_y > 8) { 
4561   2163             _if122_cond:
4562   2163 3B A3 6E      mov d, _quad_y ; $quad_y
4563   2166 2A            mov b, [d]
4564   2167 38 00 00      mov c, 0
4565   216A             ; --- START RELATIONAL
4566   216A D7            push a
4567   216B 11            mov a, b
4568   216C FD 2E 08 00   mov32 cb, $00000008
4568   2170 00 00 
4569   2172 B0            cmp a, b
4570   2173 FD 7F         sgt ; >
4571   2175 E4            pop a
4572   2176             ; --- END RELATIONAL
4573   2176 C0 00 00      cmp b, 0
4574   2179 C6 A6 21      je _if122_exit
4575   217C             _if122_TRUE:
4576   217C             ; outside = 1; 
4577   217C FA E6 FF      lea d, [bp + -26] ; $outside
4578   217F DA            push d
4579   2180 FD 2E 01 00   mov32 cb, $00000001
4579   2184 00 00 
4580   2186 E7            pop d
4581   2187 FD 3E         mov [d], bl
4582   2189             ; quad_y = 8; 
4583   2189 3B A3 6E      mov d, _quad_y ; $quad_y
4584   218C DA            push d
4585   218D FD 2E 08 00   mov32 cb, $00000008
4585   2191 00 00 
4586   2193 E7            pop d
4587   2194 FD 43         mov [d], b
4588   2196             ; ship_y = 800; 
4589   2196 3B C2 6E      mov d, _ship_y ; $ship_y
4590   2199 DA            push d
4591   219A FD 2E 20 03   mov32 cb, $00000320
4591   219E 00 00 
4592   21A0 E7            pop d
4593   21A1 FD 43         mov [d], b
4594   21A3 0A A6 21      jmp _if122_exit
4595   21A6             _if122_exit:
4596   21A6             ; if (quad_x < 1) { 
4597   21A6             _if123_cond:
4598   21A6 3B A5 6E      mov d, _quad_x ; $quad_x
4599   21A9 2A            mov b, [d]
4600   21AA 38 00 00      mov c, 0
4601   21AD             ; --- START RELATIONAL
4602   21AD D7            push a
4603   21AE 11            mov a, b
4604   21AF FD 2E 01 00   mov32 cb, $00000001
4604   21B3 00 00 
4605   21B5 B0            cmp a, b
4606   21B6 FD 73         slt ; < (signed)
4607   21B8 E4            pop a
4608   21B9             ; --- END RELATIONAL
4609   21B9 C0 00 00      cmp b, 0
4610   21BC C6 E9 21      je _if123_exit
4611   21BF             _if123_TRUE:
4612   21BF             ; outside = 1; 
4613   21BF FA E6 FF      lea d, [bp + -26] ; $outside
4614   21C2 DA            push d
4615   21C3 FD 2E 01 00   mov32 cb, $00000001
4615   21C7 00 00 
4616   21C9 E7            pop d
4617   21CA FD 3E         mov [d], bl
4618   21CC             ; quad_x = 1; 
4619   21CC 3B A5 6E      mov d, _quad_x ; $quad_x
4620   21CF DA            push d
4621   21D0 FD 2E 01 00   mov32 cb, $00000001
4621   21D4 00 00 
4622   21D6 E7            pop d
4623   21D7 FD 43         mov [d], b
4624   21D9             ; ship_x = 100; 
4625   21D9 3B C4 6E      mov d, _ship_x ; $ship_x
4626   21DC DA            push d
4627   21DD FD 2E 64 00   mov32 cb, $00000064
4627   21E1 00 00 
4628   21E3 E7            pop d
4629   21E4 FD 43         mov [d], b
4630   21E6 0A E9 21      jmp _if123_exit
4631   21E9             _if123_exit:
4632   21E9             ; if (quad_x > 8) { 
4633   21E9             _if124_cond:
4634   21E9 3B A5 6E      mov d, _quad_x ; $quad_x
4635   21EC 2A            mov b, [d]
4636   21ED 38 00 00      mov c, 0
4637   21F0             ; --- START RELATIONAL
4638   21F0 D7            push a
4639   21F1 11            mov a, b
4640   21F2 FD 2E 08 00   mov32 cb, $00000008
4640   21F6 00 00 
4641   21F8 B0            cmp a, b
4642   21F9 FD 7F         sgt ; >
4643   21FB E4            pop a
4644   21FC             ; --- END RELATIONAL
4645   21FC C0 00 00      cmp b, 0
4646   21FF C6 2C 22      je _if124_exit
4647   2202             _if124_TRUE:
4648   2202             ; outside = 1; 
4649   2202 FA E6 FF      lea d, [bp + -26] ; $outside
4650   2205 DA            push d
4651   2206 FD 2E 01 00   mov32 cb, $00000001
4651   220A 00 00 
4652   220C E7            pop d
4653   220D FD 3E         mov [d], bl
4654   220F             ; quad_x = 8; 
4655   220F 3B A5 6E      mov d, _quad_x ; $quad_x
4656   2212 DA            push d
4657   2213 FD 2E 08 00   mov32 cb, $00000008
4657   2217 00 00 
4658   2219 E7            pop d
4659   221A FD 43         mov [d], b
4660   221C             ; ship_x = 800; 
4661   221C 3B C4 6E      mov d, _ship_x ; $ship_x
4662   221F DA            push d
4663   2220 FD 2E 20 03   mov32 cb, $00000320
4663   2224 00 00 
4664   2226 E7            pop d
4665   2227 FD 43         mov [d], b
4666   2229 0A 2C 22      jmp _if124_exit
4667   222C             _if124_exit:
4668   222C             ; if (outside == 1) { 
4669   222C             _if125_cond:
4670   222C FA E6 FF      lea d, [bp + -26] ; $outside
4671   222F 32            mov bl, [d]
4672   2230 A7 00         mov bh, 0
4673   2232 38 00 00      mov c, 0
4674   2235             ; --- START RELATIONAL
4675   2235 D7            push a
4676   2236 11            mov a, b
4677   2237 FD 2E 01 00   mov32 cb, $00000001
4677   223B 00 00 
4678   223D B0            cmp a, b
4679   223E FD 71         seq ; ==
4680   2240 E4            pop a
4681   2241             ; --- END RELATIONAL
4682   2241 C0 00 00      cmp b, 0
4683   2244 C6 90 22      je _if125_exit
4684   2247             _if125_TRUE:
4685   2247             ; printf("LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", FROM_FIXED00(ship_y), 
4686   2247             ; --- START FUNCTION CALL
4687   2247 3B A5 6E      mov d, _quad_x ; $quad_x
4688   224A 2A            mov b, [d]
4689   224B 38 00 00      mov c, 0
4690   224E FD AB         swp b
4691   2250 D8            push b
4692   2251 3B A3 6E      mov d, _quad_y ; $quad_y
4693   2254 2A            mov b, [d]
4694   2255 38 00 00      mov c, 0
4695   2258 FD AB         swp b
4696   225A D8            push b
4697   225B             ; --- START FUNCTION CALL
4698   225B 3B C4 6E      mov d, _ship_x ; $ship_x
4699   225E 2A            mov b, [d]
4700   225F 38 00 00      mov c, 0
4701   2262 FD AB         swp b
4702   2264 D8            push b
4703   2265 07 DC 04      call FROM_FIXED00
4704   2268 51 02 00      add sp, 2
4705   226B             ; --- END FUNCTION CALL
4706   226B FD AB         swp b
4707   226D D8            push b
4708   226E             ; --- START FUNCTION CALL
4709   226E 3B C2 6E      mov d, _ship_y ; $ship_y
4710   2271 2A            mov b, [d]
4711   2272 38 00 00      mov c, 0
4712   2275 FD AB         swp b
4713   2277 D8            push b
4714   2278 07 DC 04      call FROM_FIXED00
4715   227B 51 02 00      add sp, 2
4716   227E             ; --- END FUNCTION CALL
4717   227E FD AB         swp b
4718   2280 D8            push b
4719   2281 26 36 75      mov b, _s71 ; "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n"
4720   2284 FD AB         swp b
4721   2286 D8            push b
4722   2287 07 B4 60      call printf
4723   228A 51 0A 00      add sp, 10
4724   228D             ; --- END FUNCTION CALL
4725   228D 0A 90 22      jmp _if125_exit
4726   2290             _if125_exit:
4727   2290             ; maneuver_energy(n); 
4728   2290             ; --- START FUNCTION CALL
4729   2290 FA F9 FF      lea d, [bp + -7] ; $n
4730   2293 2A            mov b, [d]
4731   2294 38 00 00      mov c, 0
4732   2297 FD AB         swp b
4733   2299 D8            push b
4734   229A 07 F4 24      call maneuver_energy
4735   229D 51 02 00      add sp, 2
4736   22A0             ; --- END FUNCTION CALL
4737   22A0             ; if (FROM_FIXED(stardate) > time_start + time_up) 
4738   22A0             _if126_cond:
4739   22A0             ; --- START FUNCTION CALL
4740   22A0 3B C6 6E      mov d, _stardate ; $stardate
4741   22A3 2A            mov b, [d]
4742   22A4 38 00 00      mov c, 0
4743   22A7 FD AB         swp b
4744   22A9 D8            push b
4745   22AA 07 68 04      call FROM_FIXED
4746   22AD 51 02 00      add sp, 2
4747   22B0             ; --- END FUNCTION CALL
4748   22B0             ; --- START RELATIONAL
4749   22B0 D7            push a
4750   22B1 11            mov a, b
4751   22B2 3B AA 6E      mov d, _time_start ; $time_start
4752   22B5 2A            mov b, [d]
4753   22B6 38 00 00      mov c, 0
4754   22B9             ; --- START TERMS
4755   22B9 D7            push a
4756   22BA 11            mov a, b
4757   22BB 3B AC 6E      mov d, _time_up ; $time_up
4758   22BE 2A            mov b, [d]
4759   22BF 38 00 00      mov c, 0
4760   22C2 56            add b, a
4761   22C3 E4            pop a
4762   22C4             ; --- END TERMS
4763   22C4 B0            cmp a, b
4764   22C5 FD 7F         sgt ; >
4765   22C7 E4            pop a
4766   22C8             ; --- END RELATIONAL
4767   22C8 C0 00 00      cmp b, 0
4768   22CB C6 D4 22      je _if126_exit
4769   22CE             _if126_TRUE:
4770   22CE             ; end_of_time(); 
4771   22CE             ; --- START FUNCTION CALL
4772   22CE 07 0E 4F      call end_of_time
4773   22D1 0A D4 22      jmp _if126_exit
4774   22D4             _if126_exit:
4775   22D4             ; if (quad_y != quad_y_old || quad_x != quad_x_old) { 
4776   22D4             _if127_cond:
4777   22D4 3B A3 6E      mov d, _quad_y ; $quad_y
4778   22D7 2A            mov b, [d]
4779   22D8 38 00 00      mov c, 0
4780   22DB             ; --- START RELATIONAL
4781   22DB D7            push a
4782   22DC 11            mov a, b
4783   22DD FA E5 FF      lea d, [bp + -27] ; $quad_y_old
4784   22E0 32            mov bl, [d]
4785   22E1 A7 00         mov bh, 0
4786   22E3 38 00 00      mov c, 0
4787   22E6 B0            cmp a, b
4788   22E7 FD 72         sneq ; !=
4789   22E9 E4            pop a
4790   22EA             ; --- END RELATIONAL
4791   22EA             ; --- START LOGICAL OR
4792   22EA D7            push a
4793   22EB 11            mov a, b
4794   22EC 3B A5 6E      mov d, _quad_x ; $quad_x
4795   22EF 2A            mov b, [d]
4796   22F0 38 00 00      mov c, 0
4797   22F3             ; --- START RELATIONAL
4798   22F3 D7            push a
4799   22F4 11            mov a, b
4800   22F5 FA E4 FF      lea d, [bp + -28] ; $quad_x_old
4801   22F8 32            mov bl, [d]
4802   22F9 A7 00         mov bh, 0
4803   22FB 38 00 00      mov c, 0
4804   22FE B0            cmp a, b
4805   22FF FD 72         sneq ; !=
4806   2301 E4            pop a
4807   2302             ; --- END RELATIONAL
4808   2302 FD A8         sor a, b ; ||
4809   2304 E4            pop a
4810   2305             ; --- END LOGICAL OR
4811   2305 C0 00 00      cmp b, 0
4812   2308 C6 32 23      je _if127_exit
4813   230B             _if127_TRUE:
4814   230B             ; stardate = stardate + TO_FIXED(1); 
4815   230B 3B C6 6E      mov d, _stardate ; $stardate
4816   230E DA            push d
4817   230F 3B C6 6E      mov d, _stardate ; $stardate
4818   2312 2A            mov b, [d]
4819   2313 38 00 00      mov c, 0
4820   2316             ; --- START TERMS
4821   2316 D7            push a
4822   2317 11            mov a, b
4823   2318             ; --- START FUNCTION CALL
4824   2318 FD 2E 01 00   mov32 cb, $00000001
4824   231C 00 00 
4825   231E FD AB         swp b
4826   2320 D8            push b
4827   2321 07 17 04      call TO_FIXED
4828   2324 51 02 00      add sp, 2
4829   2327             ; --- END FUNCTION CALL
4830   2327 56            add b, a
4831   2328 E4            pop a
4832   2329             ; --- END TERMS
4833   2329 E7            pop d
4834   232A FD 43         mov [d], b
4835   232C             ; new_quadrant(); 
4836   232C             ; --- START FUNCTION CALL
4837   232C 07 A6 12      call new_quadrant
4838   232F 0A 32 23      jmp _if127_exit
4839   2332             _if127_exit:
4840   2332             ; complete_maneuver(warp, n); 
4841   2332             ; --- START FUNCTION CALL
4842   2332 FA F9 FF      lea d, [bp + -7] ; $n
4843   2335 2A            mov b, [d]
4844   2336 38 00 00      mov c, 0
4845   2339 FD AB         swp b
4846   233B D8            push b
4847   233C FA FB FF      lea d, [bp + -5] ; $warp
4848   233F 2A            mov b, [d]
4849   2340 38 00 00      mov c, 0
4850   2343 FD AB         swp b
4851   2345 D8            push b
4852   2346 07 37 24      call complete_maneuver
4853   2349 51 04 00      add sp, 4
4854   234C             ; --- END FUNCTION CALL
4855   234C             ; return; 
4856   234C F9            leave
4857   234D 09            ret
4858   234E 0A 51 23      jmp _if90_exit
4859   2351             _if90_exit:
4860   2351             ; if (quad[z1+-1][z2+-1] != 		0       ) {	/* Sector not empty */ 
4861   2351             _if128_cond:
4862   2351 3B C8 6E      mov d, _quad_data ; $quad
4863   2354 D7            push a
4864   2355 DA            push d
4865   2356 FA F1 FF      lea d, [bp + -15] ; $z1
4866   2359 2A            mov b, [d]
4867   235A 38 00 00      mov c, 0
4868   235D             ; --- START TERMS
4869   235D D7            push a
4870   235E 11            mov a, b
4871   235F FD 2E FF FF   mov32 cb, $ffffffff
4871   2363 FF FF 
4872   2365 56            add b, a
4873   2366 E4            pop a
4874   2367             ; --- END TERMS
4875   2367 E7            pop d
4876   2368 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
4877   236C DA            push d
4878   236D FA EF FF      lea d, [bp + -17] ; $z2
4879   2370 2A            mov b, [d]
4880   2371 38 00 00      mov c, 0
4881   2374             ; --- START TERMS
4882   2374 D7            push a
4883   2375 11            mov a, b
4884   2376 FD 2E FF FF   mov32 cb, $ffffffff
4884   237A FF FF 
4885   237C 56            add b, a
4886   237D E4            pop a
4887   237E             ; --- END TERMS
4888   237E E7            pop d
4889   237F 5A            add d, b
4890   2380 E4            pop a
4891   2381 32            mov bl, [d]
4892   2382 A7 00         mov bh, 0
4893   2384 38 00 00      mov c, 0
4894   2387             ; --- START RELATIONAL
4895   2387 D7            push a
4896   2388 11            mov a, b
4897   2389 FD 2E 00 00   mov32 cb, $00000000
4897   238D 00 00 
4898   238F B0            cmp a, b
4899   2390 FD 72         sneq ; !=
4900   2392 E4            pop a
4901   2393             ; --- END RELATIONAL
4902   2393 C0 00 00      cmp b, 0
4903   2396 C6 08 24      je _if128_exit
4904   2399             _if128_TRUE:
4905   2399             ; ship_y = ship_y - x1; 
4906   2399 3B C2 6E      mov d, _ship_y ; $ship_y
4907   239C DA            push d
4908   239D 3B C2 6E      mov d, _ship_y ; $ship_y
4909   23A0 2A            mov b, [d]
4910   23A1 38 00 00      mov c, 0
4911   23A4             ; --- START TERMS
4912   23A4 D7            push a
4913   23A5 11            mov a, b
4914   23A6 FA ED FF      lea d, [bp + -19] ; $x1
4915   23A9 2A            mov b, [d]
4916   23AA 38 00 00      mov c, 0
4917   23AD 60            sub a, b
4918   23AE 27            mov b, a
4919   23AF E4            pop a
4920   23B0             ; --- END TERMS
4921   23B0 E7            pop d
4922   23B1 FD 43         mov [d], b
4923   23B3             ; ship_x = ship_x - x2; 
4924   23B3 3B C4 6E      mov d, _ship_x ; $ship_x
4925   23B6 DA            push d
4926   23B7 3B C4 6E      mov d, _ship_x ; $ship_x
4927   23BA 2A            mov b, [d]
4928   23BB 38 00 00      mov c, 0
4929   23BE             ; --- START TERMS
4930   23BE D7            push a
4931   23BF 11            mov a, b
4932   23C0 FA EB FF      lea d, [bp + -21] ; $x2
4933   23C3 2A            mov b, [d]
4934   23C4 38 00 00      mov c, 0
4935   23C7 60            sub a, b
4936   23C8 27            mov b, a
4937   23C9 E4            pop a
4938   23CA             ; --- END TERMS
4939   23CA E7            pop d
4940   23CB FD 43         mov [d], b
4941   23CD             ; printf("Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", z1, z2); 
4942   23CD             ; --- START FUNCTION CALL
4943   23CD FA EF FF      lea d, [bp + -17] ; $z2
4944   23D0 2A            mov b, [d]
4945   23D1 38 00 00      mov c, 0
4946   23D4 FD AB         swp b
4947   23D6 D8            push b
4948   23D7 FA F1 FF      lea d, [bp + -15] ; $z1
4949   23DA 2A            mov b, [d]
4950   23DB 38 00 00      mov c, 0
4951   23DE FD AB         swp b
4952   23E0 D8            push b
4953   23E1 26 2D 76      mov b, _s72 ; "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n"
4954   23E4 FD AB         swp b
4955   23E6 D8            push b
4956   23E7 07 B4 60      call printf
4957   23EA 51 06 00      add sp, 6
4958   23ED             ; --- END FUNCTION CALL
4959   23ED             ; i = n + 1; 
4960   23ED FA FF FF      lea d, [bp + -1] ; $i
4961   23F0 DA            push d
4962   23F1 FA F9 FF      lea d, [bp + -7] ; $n
4963   23F4 2A            mov b, [d]
4964   23F5 38 00 00      mov c, 0
4965   23F8             ; --- START TERMS
4966   23F8 D7            push a
4967   23F9 11            mov a, b
4968   23FA FD 2E 01 00   mov32 cb, $00000001
4968   23FE 00 00 
4969   2400 56            add b, a
4970   2401 E4            pop a
4971   2402             ; --- END TERMS
4972   2402 E7            pop d
4973   2403 FD 43         mov [d], b
4974   2405 0A 08 24      jmp _if128_exit
4975   2408             _if128_exit:
4976   2408             _for89_update:
4977   2408 FA FF FF      lea d, [bp + -1] ; $i
4978   240B 2A            mov b, [d]
4979   240C 38 00 00      mov c, 0
4980   240F 11            mov a, b
4981   2410 FD 77         inc b
4982   2412 FA FF FF      lea d, [bp + -1] ; $i
4983   2415 FD 43         mov [d], b
4984   2417 27            mov b, a
4985   2418 0A FC 1C      jmp _for89_cond
4986   241B             _for89_exit:
4987   241B             ; complete_maneuver(warp, n); 
4988   241B             ; --- START FUNCTION CALL
4989   241B FA F9 FF      lea d, [bp + -7] ; $n
4990   241E 2A            mov b, [d]
4991   241F 38 00 00      mov c, 0
4992   2422 FD AB         swp b
4993   2424 D8            push b
4994   2425 FA FB FF      lea d, [bp + -5] ; $warp
4995   2428 2A            mov b, [d]
4996   2429 38 00 00      mov c, 0
4997   242C FD AB         swp b
4998   242E D8            push b
4999   242F 07 37 24      call complete_maneuver
5000   2432 51 04 00      add sp, 4
5001   2435             ; --- END FUNCTION CALL
5002   2435 F9            leave
5003   2436 09            ret
5004   2437             
5005   2437             complete_maneuver:
5006   2437 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5007   243A             ; unsigned int         time_used; 
5008   243A 52 02 00      sub sp, 2
5009   243D             ; place_ship(); 
5010   243D             ; --- START FUNCTION CALL
5011   243D 07 53 12      call place_ship
5012   2440             ; maneuver_energy(n); 
5013   2440             ; --- START FUNCTION CALL
5014   2440 FA 07 00      lea d, [bp + 7] ; $n
5015   2443 2A            mov b, [d]
5016   2444 38 00 00      mov c, 0
5017   2447 FD AB         swp b
5018   2449 D8            push b
5019   244A 07 F4 24      call maneuver_energy
5020   244D 51 02 00      add sp, 2
5021   2450             ; --- END FUNCTION CALL
5022   2450             ; time_used = TO_FIXED(1); 
5023   2450 FA FF FF      lea d, [bp + -1] ; $time_used
5024   2453 DA            push d
5025   2454             ; --- START FUNCTION CALL
5026   2454 FD 2E 01 00   mov32 cb, $00000001
5026   2458 00 00 
5027   245A FD AB         swp b
5028   245C D8            push b
5029   245D 07 17 04      call TO_FIXED
5030   2460 51 02 00      add sp, 2
5031   2463             ; --- END FUNCTION CALL
5032   2463 E7            pop d
5033   2464 FD 43         mov [d], b
5034   2466             ; if (warp < 100) 
5035   2466             _if129_cond:
5036   2466 FA 05 00      lea d, [bp + 5] ; $warp
5037   2469 2A            mov b, [d]
5038   246A 38 00 00      mov c, 0
5039   246D             ; --- START RELATIONAL
5040   246D D7            push a
5041   246E 11            mov a, b
5042   246F FD 2E 64 00   mov32 cb, $00000064
5042   2473 00 00 
5043   2475 B0            cmp a, b
5044   2476 FD 75         slu ; < (unsigned)
5045   2478 E4            pop a
5046   2479             ; --- END RELATIONAL
5047   2479 C0 00 00      cmp b, 0
5048   247C C6 A2 24      je _if129_exit
5049   247F             _if129_TRUE:
5050   247F             ; time_used = TO_FIXED(FROM_FIXED00(warp)); 
5051   247F FA FF FF      lea d, [bp + -1] ; $time_used
5052   2482 DA            push d
5053   2483             ; --- START FUNCTION CALL
5054   2483             ; --- START FUNCTION CALL
5055   2483 FA 05 00      lea d, [bp + 5] ; $warp
5056   2486 2A            mov b, [d]
5057   2487 38 00 00      mov c, 0
5058   248A FD AB         swp b
5059   248C D8            push b
5060   248D 07 DC 04      call FROM_FIXED00
5061   2490 51 02 00      add sp, 2
5062   2493             ; --- END FUNCTION CALL
5063   2493 FD AB         swp b
5064   2495 D8            push b
5065   2496 07 17 04      call TO_FIXED
5066   2499 51 02 00      add sp, 2
5067   249C             ; --- END FUNCTION CALL
5068   249C E7            pop d
5069   249D FD 43         mov [d], b
5070   249F 0A A2 24      jmp _if129_exit
5071   24A2             _if129_exit:
5072   24A2             ; stardate = stardate + time_used; 
5073   24A2 3B C6 6E      mov d, _stardate ; $stardate
5074   24A5 DA            push d
5075   24A6 3B C6 6E      mov d, _stardate ; $stardate
5076   24A9 2A            mov b, [d]
5077   24AA 38 00 00      mov c, 0
5078   24AD             ; --- START TERMS
5079   24AD D7            push a
5080   24AE 11            mov a, b
5081   24AF FA FF FF      lea d, [bp + -1] ; $time_used
5082   24B2 2A            mov b, [d]
5083   24B3 38 00 00      mov c, 0
5084   24B6 56            add b, a
5085   24B7 E4            pop a
5086   24B8             ; --- END TERMS
5087   24B8 E7            pop d
5088   24B9 FD 43         mov [d], b
5089   24BB             ; if (FROM_FIXED(stardate) > time_start + time_up) 
5090   24BB             _if130_cond:
5091   24BB             ; --- START FUNCTION CALL
5092   24BB 3B C6 6E      mov d, _stardate ; $stardate
5093   24BE 2A            mov b, [d]
5094   24BF 38 00 00      mov c, 0
5095   24C2 FD AB         swp b
5096   24C4 D8            push b
5097   24C5 07 68 04      call FROM_FIXED
5098   24C8 51 02 00      add sp, 2
5099   24CB             ; --- END FUNCTION CALL
5100   24CB             ; --- START RELATIONAL
5101   24CB D7            push a
5102   24CC 11            mov a, b
5103   24CD 3B AA 6E      mov d, _time_start ; $time_start
5104   24D0 2A            mov b, [d]
5105   24D1 38 00 00      mov c, 0
5106   24D4             ; --- START TERMS
5107   24D4 D7            push a
5108   24D5 11            mov a, b
5109   24D6 3B AC 6E      mov d, _time_up ; $time_up
5110   24D9 2A            mov b, [d]
5111   24DA 38 00 00      mov c, 0
5112   24DD 56            add b, a
5113   24DE E4            pop a
5114   24DF             ; --- END TERMS
5115   24DF B0            cmp a, b
5116   24E0 FD 7F         sgt ; >
5117   24E2 E4            pop a
5118   24E3             ; --- END RELATIONAL
5119   24E3 C0 00 00      cmp b, 0
5120   24E6 C6 EF 24      je _if130_exit
5121   24E9             _if130_TRUE:
5122   24E9             ; end_of_time(); 
5123   24E9             ; --- START FUNCTION CALL
5124   24E9 07 0E 4F      call end_of_time
5125   24EC 0A EF 24      jmp _if130_exit
5126   24EF             _if130_exit:
5127   24EF             ; short_range_scan(); 
5128   24EF             ; --- START FUNCTION CALL
5129   24EF 07 94 25      call short_range_scan
5130   24F2 F9            leave
5131   24F3 09            ret
5132   24F4             
5133   24F4             maneuver_energy:
5134   24F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5135   24F7             ; energy = energy - n + 10; 
5136   24F7 3B EC 6D      mov d, _energy ; $energy
5137   24FA DA            push d
5138   24FB 3B EC 6D      mov d, _energy ; $energy
5139   24FE 2A            mov b, [d]
5140   24FF 38 00 00      mov c, 0
5141   2502             ; --- START TERMS
5142   2502 D7            push a
5143   2503 11            mov a, b
5144   2504 FA 05 00      lea d, [bp + 5] ; $n
5145   2507 2A            mov b, [d]
5146   2508 38 00 00      mov c, 0
5147   250B 60            sub a, b
5148   250C 27            mov b, a
5149   250D 11            mov a, b
5150   250E FD 2E 0A 00   mov32 cb, $0000000a
5150   2512 00 00 
5151   2514 56            add b, a
5152   2515 E4            pop a
5153   2516             ; --- END TERMS
5154   2516 E7            pop d
5155   2517 FD 43         mov [d], b
5156   2519             ; if (energy >= 0) 
5157   2519             _if131_cond:
5158   2519 3B EC 6D      mov d, _energy ; $energy
5159   251C 2A            mov b, [d]
5160   251D 38 00 00      mov c, 0
5161   2520             ; --- START RELATIONAL
5162   2520 D7            push a
5163   2521 11            mov a, b
5164   2522 FD 2E 00 00   mov32 cb, $00000000
5164   2526 00 00 
5165   2528 B0            cmp a, b
5166   2529 FD 80         sge ; >=
5167   252B E4            pop a
5168   252C             ; --- END RELATIONAL
5169   252C C0 00 00      cmp b, 0
5170   252F C6 37 25      je _if131_exit
5171   2532             _if131_TRUE:
5172   2532             ; return; 
5173   2532 F9            leave
5174   2533 09            ret
5175   2534 0A 37 25      jmp _if131_exit
5176   2537             _if131_exit:
5177   2537             ; puts("Shield Control supplies energy to complete maneuver.\n"); 
5178   2537             ; --- START FUNCTION CALL
5179   2537 26 6E 76      mov b, _s73 ; "Shield Control supplies energy to complete maneuver.\n"
5180   253A FD AB         swp b
5181   253C D8            push b
5182   253D 07 C8 69      call puts
5183   2540 51 02 00      add sp, 2
5184   2543             ; --- END FUNCTION CALL
5185   2543             ; shield = shield + energy; 
5186   2543 3B A7 6E      mov d, _shield ; $shield
5187   2546 DA            push d
5188   2547 3B A7 6E      mov d, _shield ; $shield
5189   254A 2A            mov b, [d]
5190   254B 38 00 00      mov c, 0
5191   254E             ; --- START TERMS
5192   254E D7            push a
5193   254F 11            mov a, b
5194   2550 3B EC 6D      mov d, _energy ; $energy
5195   2553 2A            mov b, [d]
5196   2554 38 00 00      mov c, 0
5197   2557 56            add b, a
5198   2558 E4            pop a
5199   2559             ; --- END TERMS
5200   2559 E7            pop d
5201   255A FD 43         mov [d], b
5202   255C             ; energy = 0; 
5203   255C 3B EC 6D      mov d, _energy ; $energy
5204   255F DA            push d
5205   2560 FD 2E 00 00   mov32 cb, $00000000
5205   2564 00 00 
5206   2566 E7            pop d
5207   2567 FD 43         mov [d], b
5208   2569             ; if (shield <= 0) 
5209   2569             _if132_cond:
5210   2569 3B A7 6E      mov d, _shield ; $shield
5211   256C 2A            mov b, [d]
5212   256D 38 00 00      mov c, 0
5213   2570             ; --- START RELATIONAL
5214   2570 D7            push a
5215   2571 11            mov a, b
5216   2572 FD 2E 00 00   mov32 cb, $00000000
5216   2576 00 00 
5217   2578 B0            cmp a, b
5218   2579 FD 74         sle ; <= (signed)
5219   257B E4            pop a
5220   257C             ; --- END RELATIONAL
5221   257C C0 00 00      cmp b, 0
5222   257F C6 92 25      je _if132_exit
5223   2582             _if132_TRUE:
5224   2582             ; shield = 0; 
5225   2582 3B A7 6E      mov d, _shield ; $shield
5226   2585 DA            push d
5227   2586 FD 2E 00 00   mov32 cb, $00000000
5227   258A 00 00 
5228   258C E7            pop d
5229   258D FD 43         mov [d], b
5230   258F 0A 92 25      jmp _if132_exit
5231   2592             _if132_exit:
5232   2592 F9            leave
5233   2593 09            ret
5234   2594             
5235   2594             short_range_scan:
5236   2594 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5237   2597             ; int i, j; 
5238   2597 52 02 00      sub sp, 2
5239   259A 52 02 00      sub sp, 2
5240   259D             ; char *sC = "GREEN"; 
5241   259D 52 02 00      sub sp, 2
5242   25A0             ; --- START LOCAL VAR INITIALIZATION
5243   25A0 FA FB FF      lea d, [bp + -5] ; $sC
5244   25A3 DA            push d
5245   25A4 26 A4 76      mov b, _s74 ; "GREEN"
5246   25A7 E7            pop d
5247   25A8 FD 43         mov [d], b
5248   25AA             ; --- END LOCAL VAR INITIALIZATION
5249   25AA             ; if (energy < energy0 / 10) 
5250   25AA             _if133_cond:
5251   25AA 3B EC 6D      mov d, _energy ; $energy
5252   25AD 2A            mov b, [d]
5253   25AE 38 00 00      mov c, 0
5254   25B1             ; --- START RELATIONAL
5255   25B1 D7            push a
5256   25B2 11            mov a, b
5257   25B3 3B EE 6D      mov d, _energy0 ; $energy0
5258   25B6 2A            mov b, [d]
5259   25B7 38 00 00      mov c, 0
5260   25BA             ; --- START FACTORS
5261   25BA D7            push a
5262   25BB FD D8         push g
5263   25BD 11            mov a, b
5264   25BE FD 7A         mov g, c
5265   25C0 FD 2E 0A 00   mov32 cb, $0000000a
5265   25C4 00 00 
5266   25C6 FD D8         push g ; save 'g' as the div instruction uses it
5267   25C8 AE            div a, b ; /, a: quotient, b: remainder
5268   25C9 FD F1         pop g
5269   25CB FD 38         mov c, g
5270   25CD 27            mov b, a
5271   25CE FD F1         pop g
5272   25D0 E4            pop a
5273   25D1             ; --- END FACTORS
5274   25D1 B0            cmp a, b
5275   25D2 FD 73         slt ; < (signed)
5276   25D4 E4            pop a
5277   25D5             ; --- END RELATIONAL
5278   25D5 C0 00 00      cmp b, 0
5279   25D8 C6 E8 25      je _if133_exit
5280   25DB             _if133_TRUE:
5281   25DB             ; sC = "YELLOW"; 
5282   25DB FA FB FF      lea d, [bp + -5] ; $sC
5283   25DE DA            push d
5284   25DF 26 AA 76      mov b, _s75 ; "YELLOW"
5285   25E2 E7            pop d
5286   25E3 FD 43         mov [d], b
5287   25E5 0A E8 25      jmp _if133_exit
5288   25E8             _if133_exit:
5289   25E8             ; if (klingons > 0) 
5290   25E8             _if136_cond:
5291   25E8 3B 9E 6E      mov d, _klingons ; $klingons
5292   25EB 32            mov bl, [d]
5293   25EC A7 00         mov bh, 0
5294   25EE 38 00 00      mov c, 0
5295   25F1             ; --- START RELATIONAL
5296   25F1 D7            push a
5297   25F2 11            mov a, b
5298   25F3 FD 2E 00 00   mov32 cb, $00000000
5298   25F7 00 00 
5299   25F9 B0            cmp a, b
5300   25FA FD 81         sgu ; > (unsigned)
5301   25FC E4            pop a
5302   25FD             ; --- END RELATIONAL
5303   25FD C0 00 00      cmp b, 0
5304   2600 C6 10 26      je _if136_exit
5305   2603             _if136_TRUE:
5306   2603             ; sC = "*RED*"; 
5307   2603 FA FB FF      lea d, [bp + -5] ; $sC
5308   2606 DA            push d
5309   2607 26 B1 76      mov b, _s76 ; "*RED*"
5310   260A E7            pop d
5311   260B FD 43         mov [d], b
5312   260D 0A 10 26      jmp _if136_exit
5313   2610             _if136_exit:
5314   2610             ; docked = 0; 
5315   2610 3B EB 6D      mov d, _docked ; $docked
5316   2613 DA            push d
5317   2614 FD 2E 00 00   mov32 cb, $00000000
5317   2618 00 00 
5318   261A E7            pop d
5319   261B FD 3E         mov [d], bl
5320   261D             ; for (i = (int) (FROM_FIXED00(ship_y) - 1); i <= (int) (FROM_FIXED00(ship_y) + 1); i++) 
5321   261D             _for137_init:
5322   261D FA FF FF      lea d, [bp + -1] ; $i
5323   2620 DA            push d
5324   2621             ; --- START FUNCTION CALL
5325   2621 3B C2 6E      mov d, _ship_y ; $ship_y
5326   2624 2A            mov b, [d]
5327   2625 38 00 00      mov c, 0
5328   2628 FD AB         swp b
5329   262A D8            push b
5330   262B 07 DC 04      call FROM_FIXED00
5331   262E 51 02 00      add sp, 2
5332   2631             ; --- END FUNCTION CALL
5333   2631             ; --- START TERMS
5334   2631 D7            push a
5335   2632 11            mov a, b
5336   2633 FD 2E 01 00   mov32 cb, $00000001
5336   2637 00 00 
5337   2639 60            sub a, b
5338   263A 27            mov b, a
5339   263B E4            pop a
5340   263C             ; --- END TERMS
5341   263C E7            pop d
5342   263D FD 43         mov [d], b
5343   263F             _for137_cond:
5344   263F FA FF FF      lea d, [bp + -1] ; $i
5345   2642 2A            mov b, [d]
5346   2643 38 00 00      mov c, 0
5347   2646             ; --- START RELATIONAL
5348   2646 D7            push a
5349   2647 11            mov a, b
5350   2648             ; --- START FUNCTION CALL
5351   2648 3B C2 6E      mov d, _ship_y ; $ship_y
5352   264B 2A            mov b, [d]
5353   264C 38 00 00      mov c, 0
5354   264F FD AB         swp b
5355   2651 D8            push b
5356   2652 07 DC 04      call FROM_FIXED00
5357   2655 51 02 00      add sp, 2
5358   2658             ; --- END FUNCTION CALL
5359   2658             ; --- START TERMS
5360   2658 D7            push a
5361   2659 11            mov a, b
5362   265A FD 2E 01 00   mov32 cb, $00000001
5362   265E 00 00 
5363   2660 56            add b, a
5364   2661 E4            pop a
5365   2662             ; --- END TERMS
5366   2662 B0            cmp a, b
5367   2663 FD 74         sle ; <= (signed)
5368   2665 E4            pop a
5369   2666             ; --- END RELATIONAL
5370   2666 C0 00 00      cmp b, 0
5371   2669 C6 DA 27      je _for137_exit
5372   266C             _for137_block:
5373   266C             ; for (j = (int) (FROM_FIXED00(ship_x) - 1); j <= (int) (FROM_FIXED00(ship_x) + 1); j++) 
5374   266C             _for138_init:
5375   266C FA FD FF      lea d, [bp + -3] ; $j
5376   266F DA            push d
5377   2670             ; --- START FUNCTION CALL
5378   2670 3B C4 6E      mov d, _ship_x ; $ship_x
5379   2673 2A            mov b, [d]
5380   2674 38 00 00      mov c, 0
5381   2677 FD AB         swp b
5382   2679 D8            push b
5383   267A 07 DC 04      call FROM_FIXED00
5384   267D 51 02 00      add sp, 2
5385   2680             ; --- END FUNCTION CALL
5386   2680             ; --- START TERMS
5387   2680 D7            push a
5388   2681 11            mov a, b
5389   2682 FD 2E 01 00   mov32 cb, $00000001
5389   2686 00 00 
5390   2688 60            sub a, b
5391   2689 27            mov b, a
5392   268A E4            pop a
5393   268B             ; --- END TERMS
5394   268B E7            pop d
5395   268C FD 43         mov [d], b
5396   268E             _for138_cond:
5397   268E FA FD FF      lea d, [bp + -3] ; $j
5398   2691 2A            mov b, [d]
5399   2692 38 00 00      mov c, 0
5400   2695             ; --- START RELATIONAL
5401   2695 D7            push a
5402   2696 11            mov a, b
5403   2697             ; --- START FUNCTION CALL
5404   2697 3B C4 6E      mov d, _ship_x ; $ship_x
5405   269A 2A            mov b, [d]
5406   269B 38 00 00      mov c, 0
5407   269E FD AB         swp b
5408   26A0 D8            push b
5409   26A1 07 DC 04      call FROM_FIXED00
5410   26A4 51 02 00      add sp, 2
5411   26A7             ; --- END FUNCTION CALL
5412   26A7             ; --- START TERMS
5413   26A7 D7            push a
5414   26A8 11            mov a, b
5415   26A9 FD 2E 01 00   mov32 cb, $00000001
5415   26AD 00 00 
5416   26AF 56            add b, a
5417   26B0 E4            pop a
5418   26B1             ; --- END TERMS
5419   26B1 B0            cmp a, b
5420   26B2 FD 74         sle ; <= (signed)
5421   26B4 E4            pop a
5422   26B5             ; --- END RELATIONAL
5423   26B5 C0 00 00      cmp b, 0
5424   26B8 C6 C7 27      je _for138_exit
5425   26BB             _for138_block:
5426   26BB             ; if (i >= 1 && i <= 8 && j >= 1 && j <= 8) { 
5427   26BB             _if139_cond:
5428   26BB FA FF FF      lea d, [bp + -1] ; $i
5429   26BE 2A            mov b, [d]
5430   26BF 38 00 00      mov c, 0
5431   26C2             ; --- START RELATIONAL
5432   26C2 D7            push a
5433   26C3 11            mov a, b
5434   26C4 FD 2E 01 00   mov32 cb, $00000001
5434   26C8 00 00 
5435   26CA B0            cmp a, b
5436   26CB FD 80         sge ; >=
5437   26CD E4            pop a
5438   26CE             ; --- END RELATIONAL
5439   26CE             ; --- START LOGICAL AND
5440   26CE D7            push a
5441   26CF 11            mov a, b
5442   26D0 FA FF FF      lea d, [bp + -1] ; $i
5443   26D3 2A            mov b, [d]
5444   26D4 38 00 00      mov c, 0
5445   26D7             ; --- START RELATIONAL
5446   26D7 D7            push a
5447   26D8 11            mov a, b
5448   26D9 FD 2E 08 00   mov32 cb, $00000008
5448   26DD 00 00 
5449   26DF B0            cmp a, b
5450   26E0 FD 74         sle ; <= (signed)
5451   26E2 E4            pop a
5452   26E3             ; --- END RELATIONAL
5453   26E3 FD A7         sand a, b
5454   26E5 11            mov a, b
5455   26E6 FA FD FF      lea d, [bp + -3] ; $j
5456   26E9 2A            mov b, [d]
5457   26EA 38 00 00      mov c, 0
5458   26ED             ; --- START RELATIONAL
5459   26ED D7            push a
5460   26EE 11            mov a, b
5461   26EF FD 2E 01 00   mov32 cb, $00000001
5461   26F3 00 00 
5462   26F5 B0            cmp a, b
5463   26F6 FD 80         sge ; >=
5464   26F8 E4            pop a
5465   26F9             ; --- END RELATIONAL
5466   26F9 FD A7         sand a, b
5467   26FB 11            mov a, b
5468   26FC FA FD FF      lea d, [bp + -3] ; $j
5469   26FF 2A            mov b, [d]
5470   2700 38 00 00      mov c, 0
5471   2703             ; --- START RELATIONAL
5472   2703 D7            push a
5473   2704 11            mov a, b
5474   2705 FD 2E 08 00   mov32 cb, $00000008
5474   2709 00 00 
5475   270B B0            cmp a, b
5476   270C FD 74         sle ; <= (signed)
5477   270E E4            pop a
5478   270F             ; --- END RELATIONAL
5479   270F FD A7         sand a, b
5480   2711 E4            pop a
5481   2712             ; --- END LOGICAL AND
5482   2712 C0 00 00      cmp b, 0
5483   2715 C6 B4 27      je _if139_exit
5484   2718             _if139_TRUE:
5485   2718             ; if (quad[i+-1][j+-1] == 		2      ) { 
5486   2718             _if140_cond:
5487   2718 3B C8 6E      mov d, _quad_data ; $quad
5488   271B D7            push a
5489   271C DA            push d
5490   271D FA FF FF      lea d, [bp + -1] ; $i
5491   2720 2A            mov b, [d]
5492   2721 38 00 00      mov c, 0
5493   2724             ; --- START TERMS
5494   2724 D7            push a
5495   2725 11            mov a, b
5496   2726 FD 2E FF FF   mov32 cb, $ffffffff
5496   272A FF FF 
5497   272C 56            add b, a
5498   272D E4            pop a
5499   272E             ; --- END TERMS
5500   272E E7            pop d
5501   272F FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
5502   2733 DA            push d
5503   2734 FA FD FF      lea d, [bp + -3] ; $j
5504   2737 2A            mov b, [d]
5505   2738 38 00 00      mov c, 0
5506   273B             ; --- START TERMS
5507   273B D7            push a
5508   273C 11            mov a, b
5509   273D FD 2E FF FF   mov32 cb, $ffffffff
5509   2741 FF FF 
5510   2743 56            add b, a
5511   2744 E4            pop a
5512   2745             ; --- END TERMS
5513   2745 E7            pop d
5514   2746 5A            add d, b
5515   2747 E4            pop a
5516   2748 32            mov bl, [d]
5517   2749 A7 00         mov bh, 0
5518   274B 38 00 00      mov c, 0
5519   274E             ; --- START RELATIONAL
5520   274E D7            push a
5521   274F 11            mov a, b
5522   2750 FD 2E 02 00   mov32 cb, $00000002
5522   2754 00 00 
5523   2756 B0            cmp a, b
5524   2757 FD 71         seq ; ==
5525   2759 E4            pop a
5526   275A             ; --- END RELATIONAL
5527   275A C0 00 00      cmp b, 0
5528   275D C6 B1 27      je _if140_exit
5529   2760             _if140_TRUE:
5530   2760             ; docked = 1; 
5531   2760 3B EB 6D      mov d, _docked ; $docked
5532   2763 DA            push d
5533   2764 FD 2E 01 00   mov32 cb, $00000001
5533   2768 00 00 
5534   276A E7            pop d
5535   276B FD 3E         mov [d], bl
5536   276D             ; sC = "DOCKED"; 
5537   276D FA FB FF      lea d, [bp + -5] ; $sC
5538   2770 DA            push d
5539   2771 26 B7 76      mov b, _s77 ; "DOCKED"
5540   2774 E7            pop d
5541   2775 FD 43         mov [d], b
5542   2777             ; energy = energy0; 
5543   2777 3B EC 6D      mov d, _energy ; $energy
5544   277A DA            push d
5545   277B 3B EE 6D      mov d, _energy0 ; $energy0
5546   277E 2A            mov b, [d]
5547   277F 38 00 00      mov c, 0
5548   2782 E7            pop d
5549   2783 FD 43         mov [d], b
5550   2785             ; torps = torps0; 
5551   2785 3B A1 6E      mov d, _torps ; $torps
5552   2788 DA            push d
5553   2789 3B A2 6E      mov d, _torps0 ; $torps0
5554   278C 32            mov bl, [d]
5555   278D A7 00         mov bh, 0
5556   278F 38 00 00      mov c, 0
5557   2792 E7            pop d
5558   2793 FD 3E         mov [d], bl
5559   2795             ; puts("Shields dropped for docking purposes."); 
5560   2795             ; --- START FUNCTION CALL
5561   2795 26 BE 76      mov b, _s78 ; "Shields dropped for docking purposes."
5562   2798 FD AB         swp b
5563   279A D8            push b
5564   279B 07 C8 69      call puts
5565   279E 51 02 00      add sp, 2
5566   27A1             ; --- END FUNCTION CALL
5567   27A1             ; shield = 0; 
5568   27A1 3B A7 6E      mov d, _shield ; $shield
5569   27A4 DA            push d
5570   27A5 FD 2E 00 00   mov32 cb, $00000000
5570   27A9 00 00 
5571   27AB E7            pop d
5572   27AC FD 43         mov [d], b
5573   27AE 0A B1 27      jmp _if140_exit
5574   27B1             _if140_exit:
5575   27B1 0A B4 27      jmp _if139_exit
5576   27B4             _if139_exit:
5577   27B4             _for138_update:
5578   27B4 FA FD FF      lea d, [bp + -3] ; $j
5579   27B7 2A            mov b, [d]
5580   27B8 38 00 00      mov c, 0
5581   27BB 11            mov a, b
5582   27BC FD 77         inc b
5583   27BE FA FD FF      lea d, [bp + -3] ; $j
5584   27C1 FD 43         mov [d], b
5585   27C3 27            mov b, a
5586   27C4 0A 8E 26      jmp _for138_cond
5587   27C7             _for138_exit:
5588   27C7             _for137_update:
5589   27C7 FA FF FF      lea d, [bp + -1] ; $i
5590   27CA 2A            mov b, [d]
5591   27CB 38 00 00      mov c, 0
5592   27CE 11            mov a, b
5593   27CF FD 77         inc b
5594   27D1 FA FF FF      lea d, [bp + -1] ; $i
5595   27D4 FD 43         mov [d], b
5596   27D6 27            mov b, a
5597   27D7 0A 3F 26      jmp _for137_cond
5598   27DA             _for137_exit:
5599   27DA             ; if (damage[2] < 0) { 
5600   27DA             _if141_cond:
5601   27DA 3B AE 6E      mov d, _damage_data ; $damage
5602   27DD D7            push a
5603   27DE DA            push d
5604   27DF FD 2E 02 00   mov32 cb, $00000002
5604   27E3 00 00 
5605   27E5 E7            pop d
5606   27E6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5607   27EA E4            pop a
5608   27EB 2A            mov b, [d]
5609   27EC 38 00 00      mov c, 0
5610   27EF             ; --- START RELATIONAL
5611   27EF D7            push a
5612   27F0 11            mov a, b
5613   27F1 FD 2E 00 00   mov32 cb, $00000000
5613   27F5 00 00 
5614   27F7 B0            cmp a, b
5615   27F8 FD 73         slt ; < (signed)
5616   27FA E4            pop a
5617   27FB             ; --- END RELATIONAL
5618   27FB C0 00 00      cmp b, 0
5619   27FE C6 12 28      je _if141_exit
5620   2801             _if141_TRUE:
5621   2801             ; puts("\n*** Short Range Sensors are out ***"); 
5622   2801             ; --- START FUNCTION CALL
5623   2801 26 E4 76      mov b, _s79 ; "\n*** Short Range Sensors are out ***"
5624   2804 FD AB         swp b
5625   2806 D8            push b
5626   2807 07 C8 69      call puts
5627   280A 51 02 00      add sp, 2
5628   280D             ; --- END FUNCTION CALL
5629   280D             ; return; 
5630   280D F9            leave
5631   280E 09            ret
5632   280F 0A 12 28      jmp _if141_exit
5633   2812             _if141_exit:
5634   2812             ; puts(srs_1); 
5635   2812             ; --- START FUNCTION CALL
5636   2812 3B E2 6F      mov d, _srs_1 ; $srs_1
5637   2815 2A            mov b, [d]
5638   2816 38 00 00      mov c, 0
5639   2819 FD AB         swp b
5640   281B D8            push b
5641   281C 07 C8 69      call puts
5642   281F 51 02 00      add sp, 2
5643   2822             ; --- END FUNCTION CALL
5644   2822             ; for (i = 0; i < 8; i++) { 
5645   2822             _for142_init:
5646   2822 FA FF FF      lea d, [bp + -1] ; $i
5647   2825 DA            push d
5648   2826 FD 2E 00 00   mov32 cb, $00000000
5648   282A 00 00 
5649   282C E7            pop d
5650   282D FD 43         mov [d], b
5651   282F             _for142_cond:
5652   282F FA FF FF      lea d, [bp + -1] ; $i
5653   2832 2A            mov b, [d]
5654   2833 38 00 00      mov c, 0
5655   2836             ; --- START RELATIONAL
5656   2836 D7            push a
5657   2837 11            mov a, b
5658   2838 FD 2E 08 00   mov32 cb, $00000008
5658   283C 00 00 
5659   283E B0            cmp a, b
5660   283F FD 73         slt ; < (signed)
5661   2841 E4            pop a
5662   2842             ; --- END RELATIONAL
5663   2842 C0 00 00      cmp b, 0
5664   2845 C6 9C 2A      je _for142_exit
5665   2848             _for142_block:
5666   2848             ; for (j = 0; j < 8; j++) 
5667   2848             _for143_init:
5668   2848 FA FD FF      lea d, [bp + -3] ; $j
5669   284B DA            push d
5670   284C FD 2E 00 00   mov32 cb, $00000000
5670   2850 00 00 
5671   2852 E7            pop d
5672   2853 FD 43         mov [d], b
5673   2855             _for143_cond:
5674   2855 FA FD FF      lea d, [bp + -3] ; $j
5675   2858 2A            mov b, [d]
5676   2859 38 00 00      mov c, 0
5677   285C             ; --- START RELATIONAL
5678   285C D7            push a
5679   285D 11            mov a, b
5680   285E FD 2E 08 00   mov32 cb, $00000008
5680   2862 00 00 
5681   2864 B0            cmp a, b
5682   2865 FD 73         slt ; < (signed)
5683   2867 E4            pop a
5684   2868             ; --- END RELATIONAL
5685   2868 C0 00 00      cmp b, 0
5686   286B C6 BB 28      je _for143_exit
5687   286E             _for143_block:
5688   286E             ; puts(tilestr[quad[i][j]]); 
5689   286E             ; --- START FUNCTION CALL
5690   286E 3B E4 6F      mov d, _tilestr_data ; $tilestr
5691   2871 D7            push a
5692   2872 DA            push d
5693   2873 3B C8 6E      mov d, _quad_data ; $quad
5694   2876 D7            push a
5695   2877 DA            push d
5696   2878 FA FF FF      lea d, [bp + -1] ; $i
5697   287B 2A            mov b, [d]
5698   287C 38 00 00      mov c, 0
5699   287F E7            pop d
5700   2880 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
5701   2884 DA            push d
5702   2885 FA FD FF      lea d, [bp + -3] ; $j
5703   2888 2A            mov b, [d]
5704   2889 38 00 00      mov c, 0
5705   288C E7            pop d
5706   288D 5A            add d, b
5707   288E E4            pop a
5708   288F 32            mov bl, [d]
5709   2890 A7 00         mov bh, 0
5710   2892 38 00 00      mov c, 0
5711   2895 E7            pop d
5712   2896 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5713   289A E4            pop a
5714   289B 2A            mov b, [d]
5715   289C 38 00 00      mov c, 0
5716   289F FD AB         swp b
5717   28A1 D8            push b
5718   28A2 07 C8 69      call puts
5719   28A5 51 02 00      add sp, 2
5720   28A8             ; --- END FUNCTION CALL
5721   28A8             _for143_update:
5722   28A8 FA FD FF      lea d, [bp + -3] ; $j
5723   28AB 2A            mov b, [d]
5724   28AC 38 00 00      mov c, 0
5725   28AF 11            mov a, b
5726   28B0 FD 77         inc b
5727   28B2 FA FD FF      lea d, [bp + -3] ; $j
5728   28B5 FD 43         mov [d], b
5729   28B7 27            mov b, a
5730   28B8 0A 55 28      jmp _for143_cond
5731   28BB             _for143_exit:
5732   28BB             ; if (i == 0) 
5733   28BB             _if144_cond:
5734   28BB FA FF FF      lea d, [bp + -1] ; $i
5735   28BE 2A            mov b, [d]
5736   28BF 38 00 00      mov c, 0
5737   28C2             ; --- START RELATIONAL
5738   28C2 D7            push a
5739   28C3 11            mov a, b
5740   28C4 FD 2E 00 00   mov32 cb, $00000000
5740   28C8 00 00 
5741   28CA B0            cmp a, b
5742   28CB FD 71         seq ; ==
5743   28CD E4            pop a
5744   28CE             ; --- END RELATIONAL
5745   28CE C0 00 00      cmp b, 0
5746   28D1 C6 F6 28      je _if144_exit
5747   28D4             _if144_TRUE:
5748   28D4             ; printf("    Stardate            %d\n", FROM_FIXED(stardate)); 
5749   28D4             ; --- START FUNCTION CALL
5750   28D4             ; --- START FUNCTION CALL
5751   28D4 3B C6 6E      mov d, _stardate ; $stardate
5752   28D7 2A            mov b, [d]
5753   28D8 38 00 00      mov c, 0
5754   28DB FD AB         swp b
5755   28DD D8            push b
5756   28DE 07 68 04      call FROM_FIXED
5757   28E1 51 02 00      add sp, 2
5758   28E4             ; --- END FUNCTION CALL
5759   28E4 FD AB         swp b
5760   28E6 D8            push b
5761   28E7 26 09 77      mov b, _s80 ; "    Stardate            %d\n"
5762   28EA FD AB         swp b
5763   28EC D8            push b
5764   28ED 07 B4 60      call printf
5765   28F0 51 04 00      add sp, 4
5766   28F3             ; --- END FUNCTION CALL
5767   28F3 0A F6 28      jmp _if144_exit
5768   28F6             _if144_exit:
5769   28F6             ; if (i == 1) 
5770   28F6             _if145_cond:
5771   28F6 FA FF FF      lea d, [bp + -1] ; $i
5772   28F9 2A            mov b, [d]
5773   28FA 38 00 00      mov c, 0
5774   28FD             ; --- START RELATIONAL
5775   28FD D7            push a
5776   28FE 11            mov a, b
5777   28FF FD 2E 01 00   mov32 cb, $00000001
5777   2903 00 00 
5778   2905 B0            cmp a, b
5779   2906 FD 71         seq ; ==
5780   2908 E4            pop a
5781   2909             ; --- END RELATIONAL
5782   2909 C0 00 00      cmp b, 0
5783   290C C6 28 29      je _if145_exit
5784   290F             _if145_TRUE:
5785   290F             ; printf("    Condition           %s\n", sC); 
5786   290F             ; --- START FUNCTION CALL
5787   290F FA FB FF      lea d, [bp + -5] ; $sC
5788   2912 2A            mov b, [d]
5789   2913 38 00 00      mov c, 0
5790   2916 FD AB         swp b
5791   2918 D8            push b
5792   2919 26 25 77      mov b, _s81 ; "    Condition           %s\n"
5793   291C FD AB         swp b
5794   291E D8            push b
5795   291F 07 B4 60      call printf
5796   2922 51 04 00      add sp, 4
5797   2925             ; --- END FUNCTION CALL
5798   2925 0A 28 29      jmp _if145_exit
5799   2928             _if145_exit:
5800   2928             ; if (i == 2) 
5801   2928             _if146_cond:
5802   2928 FA FF FF      lea d, [bp + -1] ; $i
5803   292B 2A            mov b, [d]
5804   292C 38 00 00      mov c, 0
5805   292F             ; --- START RELATIONAL
5806   292F D7            push a
5807   2930 11            mov a, b
5808   2931 FD 2E 02 00   mov32 cb, $00000002
5808   2935 00 00 
5809   2937 B0            cmp a, b
5810   2938 FD 71         seq ; ==
5811   293A E4            pop a
5812   293B             ; --- END RELATIONAL
5813   293B C0 00 00      cmp b, 0
5814   293E C6 64 29      je _if146_exit
5815   2941             _if146_TRUE:
5816   2941             ; printf("    Quadrant            %d, %d\n", quad_y, quad_x); 
5817   2941             ; --- START FUNCTION CALL
5818   2941 3B A5 6E      mov d, _quad_x ; $quad_x
5819   2944 2A            mov b, [d]
5820   2945 38 00 00      mov c, 0
5821   2948 FD AB         swp b
5822   294A D8            push b
5823   294B 3B A3 6E      mov d, _quad_y ; $quad_y
5824   294E 2A            mov b, [d]
5825   294F 38 00 00      mov c, 0
5826   2952 FD AB         swp b
5827   2954 D8            push b
5828   2955 26 41 77      mov b, _s82 ; "    Quadrant            %d, %d\n"
5829   2958 FD AB         swp b
5830   295A D8            push b
5831   295B 07 B4 60      call printf
5832   295E 51 06 00      add sp, 6
5833   2961             ; --- END FUNCTION CALL
5834   2961 0A 64 29      jmp _if146_exit
5835   2964             _if146_exit:
5836   2964             ; if (i == 3) 
5837   2964             _if147_cond:
5838   2964 FA FF FF      lea d, [bp + -1] ; $i
5839   2967 2A            mov b, [d]
5840   2968 38 00 00      mov c, 0
5841   296B             ; --- START RELATIONAL
5842   296B D7            push a
5843   296C 11            mov a, b
5844   296D FD 2E 03 00   mov32 cb, $00000003
5844   2971 00 00 
5845   2973 B0            cmp a, b
5846   2974 FD 71         seq ; ==
5847   2976 E4            pop a
5848   2977             ; --- END RELATIONAL
5849   2977 C0 00 00      cmp b, 0
5850   297A C6 B2 29      je _if147_exit
5851   297D             _if147_TRUE:
5852   297D             ; printf("    Sector              %d, %d\n", FROM_FIXED00(ship_y), FROM_FIXED00(ship_x)); 
5853   297D             ; --- START FUNCTION CALL
5854   297D             ; --- START FUNCTION CALL
5855   297D 3B C4 6E      mov d, _ship_x ; $ship_x
5856   2980 2A            mov b, [d]
5857   2981 38 00 00      mov c, 0
5858   2984 FD AB         swp b
5859   2986 D8            push b
5860   2987 07 DC 04      call FROM_FIXED00
5861   298A 51 02 00      add sp, 2
5862   298D             ; --- END FUNCTION CALL
5863   298D FD AB         swp b
5864   298F D8            push b
5865   2990             ; --- START FUNCTION CALL
5866   2990 3B C2 6E      mov d, _ship_y ; $ship_y
5867   2993 2A            mov b, [d]
5868   2994 38 00 00      mov c, 0
5869   2997 FD AB         swp b
5870   2999 D8            push b
5871   299A 07 DC 04      call FROM_FIXED00
5872   299D 51 02 00      add sp, 2
5873   29A0             ; --- END FUNCTION CALL
5874   29A0 FD AB         swp b
5875   29A2 D8            push b
5876   29A3 26 61 77      mov b, _s83 ; "    Sector              %d, %d\n"
5877   29A6 FD AB         swp b
5878   29A8 D8            push b
5879   29A9 07 B4 60      call printf
5880   29AC 51 06 00      add sp, 6
5881   29AF             ; --- END FUNCTION CALL
5882   29AF 0A B2 29      jmp _if147_exit
5883   29B2             _if147_exit:
5884   29B2             ; if (i == 4) 
5885   29B2             _if148_cond:
5886   29B2 FA FF FF      lea d, [bp + -1] ; $i
5887   29B5 2A            mov b, [d]
5888   29B6 38 00 00      mov c, 0
5889   29B9             ; --- START RELATIONAL
5890   29B9 D7            push a
5891   29BA 11            mov a, b
5892   29BB FD 2E 04 00   mov32 cb, $00000004
5892   29BF 00 00 
5893   29C1 B0            cmp a, b
5894   29C2 FD 71         seq ; ==
5895   29C4 E4            pop a
5896   29C5             ; --- END RELATIONAL
5897   29C5 C0 00 00      cmp b, 0
5898   29C8 C6 E6 29      je _if148_exit
5899   29CB             _if148_TRUE:
5900   29CB             ; printf("    Photon Torpedoes    %d\n", torps); 
5901   29CB             ; --- START FUNCTION CALL
5902   29CB 3B A1 6E      mov d, _torps ; $torps
5903   29CE 32            mov bl, [d]
5904   29CF A7 00         mov bh, 0
5905   29D1 38 00 00      mov c, 0
5906   29D4 FD AB         swp b
5907   29D6 D8            push b
5908   29D7 26 81 77      mov b, _s84 ; "    Photon Torpedoes    %d\n"
5909   29DA FD AB         swp b
5910   29DC D8            push b
5911   29DD 07 B4 60      call printf
5912   29E0 51 03 00      add sp, 3
5913   29E3             ; --- END FUNCTION CALL
5914   29E3 0A E6 29      jmp _if148_exit
5915   29E6             _if148_exit:
5916   29E6             ; if (i == 5) 
5917   29E6             _if149_cond:
5918   29E6 FA FF FF      lea d, [bp + -1] ; $i
5919   29E9 2A            mov b, [d]
5920   29EA 38 00 00      mov c, 0
5921   29ED             ; --- START RELATIONAL
5922   29ED D7            push a
5923   29EE 11            mov a, b
5924   29EF FD 2E 05 00   mov32 cb, $00000005
5924   29F3 00 00 
5925   29F5 B0            cmp a, b
5926   29F6 FD 71         seq ; ==
5927   29F8 E4            pop a
5928   29F9             ; --- END RELATIONAL
5929   29F9 C0 00 00      cmp b, 0
5930   29FC C6 23 2A      je _if149_exit
5931   29FF             _if149_TRUE:
5932   29FF             ; printf("    Total Energy        %d\n", energy + shield); 
5933   29FF             ; --- START FUNCTION CALL
5934   29FF 3B EC 6D      mov d, _energy ; $energy
5935   2A02 2A            mov b, [d]
5936   2A03 38 00 00      mov c, 0
5937   2A06             ; --- START TERMS
5938   2A06 D7            push a
5939   2A07 11            mov a, b
5940   2A08 3B A7 6E      mov d, _shield ; $shield
5941   2A0B 2A            mov b, [d]
5942   2A0C 38 00 00      mov c, 0
5943   2A0F 56            add b, a
5944   2A10 E4            pop a
5945   2A11             ; --- END TERMS
5946   2A11 FD AB         swp b
5947   2A13 D8            push b
5948   2A14 26 9D 77      mov b, _s85 ; "    Total Energy        %d\n"
5949   2A17 FD AB         swp b
5950   2A19 D8            push b
5951   2A1A 07 B4 60      call printf
5952   2A1D 51 04 00      add sp, 4
5953   2A20             ; --- END FUNCTION CALL
5954   2A20 0A 23 2A      jmp _if149_exit
5955   2A23             _if149_exit:
5956   2A23             ; if (i == 6) 
5957   2A23             _if150_cond:
5958   2A23 FA FF FF      lea d, [bp + -1] ; $i
5959   2A26 2A            mov b, [d]
5960   2A27 38 00 00      mov c, 0
5961   2A2A             ; --- START RELATIONAL
5962   2A2A D7            push a
5963   2A2B 11            mov a, b
5964   2A2C FD 2E 06 00   mov32 cb, $00000006
5964   2A30 00 00 
5965   2A32 B0            cmp a, b
5966   2A33 FD 71         seq ; ==
5967   2A35 E4            pop a
5968   2A36             ; --- END RELATIONAL
5969   2A36 C0 00 00      cmp b, 0
5970   2A39 C6 55 2A      je _if150_exit
5971   2A3C             _if150_TRUE:
5972   2A3C             ; printf("    Shields             %d\n", shield); 
5973   2A3C             ; --- START FUNCTION CALL
5974   2A3C 3B A7 6E      mov d, _shield ; $shield
5975   2A3F 2A            mov b, [d]
5976   2A40 38 00 00      mov c, 0
5977   2A43 FD AB         swp b
5978   2A45 D8            push b
5979   2A46 26 B9 77      mov b, _s86 ; "    Shields             %d\n"
5980   2A49 FD AB         swp b
5981   2A4B D8            push b
5982   2A4C 07 B4 60      call printf
5983   2A4F 51 04 00      add sp, 4
5984   2A52             ; --- END FUNCTION CALL
5985   2A52 0A 55 2A      jmp _if150_exit
5986   2A55             _if150_exit:
5987   2A55             ; if (i == 7) 
5988   2A55             _if151_cond:
5989   2A55 FA FF FF      lea d, [bp + -1] ; $i
5990   2A58 2A            mov b, [d]
5991   2A59 38 00 00      mov c, 0
5992   2A5C             ; --- START RELATIONAL
5993   2A5C D7            push a
5994   2A5D 11            mov a, b
5995   2A5E FD 2E 07 00   mov32 cb, $00000007
5995   2A62 00 00 
5996   2A64 B0            cmp a, b
5997   2A65 FD 71         seq ; ==
5998   2A67 E4            pop a
5999   2A68             ; --- END RELATIONAL
6000   2A68 C0 00 00      cmp b, 0
6001   2A6B C6 89 2A      je _if151_exit
6002   2A6E             _if151_TRUE:
6003   2A6E             ; printf("    Klingons Remaining  %d\n", klingons_left); 
6004   2A6E             ; --- START FUNCTION CALL
6005   2A6E 3B A0 6E      mov d, _klingons_left ; $klingons_left
6006   2A71 32            mov bl, [d]
6007   2A72 A7 00         mov bh, 0
6008   2A74 38 00 00      mov c, 0
6009   2A77 FD AB         swp b
6010   2A79 D8            push b
6011   2A7A 26 D5 77      mov b, _s87 ; "    Klingons Remaining  %d\n"
6012   2A7D FD AB         swp b
6013   2A7F D8            push b
6014   2A80 07 B4 60      call printf
6015   2A83 51 03 00      add sp, 3
6016   2A86             ; --- END FUNCTION CALL
6017   2A86 0A 89 2A      jmp _if151_exit
6018   2A89             _if151_exit:
6019   2A89             _for142_update:
6020   2A89 FA FF FF      lea d, [bp + -1] ; $i
6021   2A8C 2A            mov b, [d]
6022   2A8D 38 00 00      mov c, 0
6023   2A90 11            mov a, b
6024   2A91 FD 77         inc b
6025   2A93 FA FF FF      lea d, [bp + -1] ; $i
6026   2A96 FD 43         mov [d], b
6027   2A98 27            mov b, a
6028   2A99 0A 2F 28      jmp _for142_cond
6029   2A9C             _for142_exit:
6030   2A9C             ; puts(srs_1); 
6031   2A9C             ; --- START FUNCTION CALL
6032   2A9C 3B E2 6F      mov d, _srs_1 ; $srs_1
6033   2A9F 2A            mov b, [d]
6034   2AA0 38 00 00      mov c, 0
6035   2AA3 FD AB         swp b
6036   2AA5 D8            push b
6037   2AA6 07 C8 69      call puts
6038   2AA9 51 02 00      add sp, 2
6039   2AAC             ; --- END FUNCTION CALL
6040   2AAC             ; putchar('\n'); 
6041   2AAC             ; --- START FUNCTION CALL
6042   2AAC FD 2E 0A 00   mov32 cb, $0000000a
6042   2AB0 00 00 
6043   2AB2 DD            push bl
6044   2AB3 07 33 65      call putchar
6045   2AB6 51 01 00      add sp, 1
6046   2AB9             ; --- END FUNCTION CALL
6047   2AB9             ; return; 
6048   2AB9 F9            leave
6049   2ABA 09            ret
6050   2ABB             
6051   2ABB             put1bcd:
6052   2ABB F8 00 00      enter 0 ; (push bp; mov bp, sp)
6053   2ABE             ; v = v & 0x0F; 
6054   2ABE FA 05 00      lea d, [bp + 5] ; $v
6055   2AC1 DA            push d
6056   2AC2 FA 05 00      lea d, [bp + 5] ; $v
6057   2AC5 32            mov bl, [d]
6058   2AC6 A7 00         mov bh, 0
6059   2AC8 38 00 00      mov c, 0
6060   2ACB D7            push a
6061   2ACC 11            mov a, b
6062   2ACD FD 2E 0F 00   mov32 cb, $0000000f
6062   2AD1 00 00 
6063   2AD3 FD 92         and b, a ; &
6064   2AD5 E4            pop a
6065   2AD6 E7            pop d
6066   2AD7 FD 3E         mov [d], bl
6067   2AD9             ; putchar('0' + v); 
6068   2AD9             ; --- START FUNCTION CALL
6069   2AD9 FD 2E 30 00   mov32 cb, $00000030
6069   2ADD 00 00 
6070   2ADF             ; --- START TERMS
6071   2ADF D7            push a
6072   2AE0 11            mov a, b
6073   2AE1 FA 05 00      lea d, [bp + 5] ; $v
6074   2AE4 32            mov bl, [d]
6075   2AE5 A7 00         mov bh, 0
6076   2AE7 38 00 00      mov c, 0
6077   2AEA 56            add b, a
6078   2AEB E4            pop a
6079   2AEC             ; --- END TERMS
6080   2AEC DD            push bl
6081   2AED 07 33 65      call putchar
6082   2AF0 51 01 00      add sp, 1
6083   2AF3             ; --- END FUNCTION CALL
6084   2AF3 F9            leave
6085   2AF4 09            ret
6086   2AF5             
6087   2AF5             putbcd:
6088   2AF5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6089   2AF8             ; put1bcd(x >> 8); 
6090   2AF8             ; --- START FUNCTION CALL
6091   2AF8 FA 05 00      lea d, [bp + 5] ; $x
6092   2AFB 2A            mov b, [d]
6093   2AFC 38 00 00      mov c, 0
6094   2AFF             ; --- START SHIFT
6095   2AFF D7            push a
6096   2B00 11            mov a, b
6097   2B01 FD 2E 08 00   mov32 cb, $00000008
6097   2B05 00 00 
6098   2B07 FD 39         mov c, b
6099   2B09 A1            shr a, cl
6100   2B0A 27            mov b, a
6101   2B0B E4            pop a
6102   2B0C             ; --- END SHIFT
6103   2B0C DD            push bl
6104   2B0D 07 BB 2A      call put1bcd
6105   2B10 51 01 00      add sp, 1
6106   2B13             ; --- END FUNCTION CALL
6107   2B13             ; put1bcd(x >> 4); 
6108   2B13             ; --- START FUNCTION CALL
6109   2B13 FA 05 00      lea d, [bp + 5] ; $x
6110   2B16 2A            mov b, [d]
6111   2B17 38 00 00      mov c, 0
6112   2B1A             ; --- START SHIFT
6113   2B1A D7            push a
6114   2B1B 11            mov a, b
6115   2B1C FD 2E 04 00   mov32 cb, $00000004
6115   2B20 00 00 
6116   2B22 FD 39         mov c, b
6117   2B24 A1            shr a, cl
6118   2B25 27            mov b, a
6119   2B26 E4            pop a
6120   2B27             ; --- END SHIFT
6121   2B27 DD            push bl
6122   2B28 07 BB 2A      call put1bcd
6123   2B2B 51 01 00      add sp, 1
6124   2B2E             ; --- END FUNCTION CALL
6125   2B2E             ; put1bcd(x); 
6126   2B2E             ; --- START FUNCTION CALL
6127   2B2E FA 05 00      lea d, [bp + 5] ; $x
6128   2B31 2A            mov b, [d]
6129   2B32 38 00 00      mov c, 0
6130   2B35 DD            push bl
6131   2B36 07 BB 2A      call put1bcd
6132   2B39 51 01 00      add sp, 1
6133   2B3C             ; --- END FUNCTION CALL
6134   2B3C F9            leave
6135   2B3D 09            ret
6136   2B3E             
6137   2B3E             long_range_scan:
6138   2B3E F8 00 00      enter 0 ; (push bp; mov bp, sp)
6139   2B41             ; int i, j; 
6140   2B41 52 02 00      sub sp, 2
6141   2B44 52 02 00      sub sp, 2
6142   2B47             ; if (inoperable(3)) 
6143   2B47             _if152_cond:
6144   2B47             ; --- START FUNCTION CALL
6145   2B47 FD 2E 03 00   mov32 cb, $00000003
6145   2B4B 00 00 
6146   2B4D DD            push bl
6147   2B4E 07 7C 09      call inoperable
6148   2B51 51 01 00      add sp, 1
6149   2B54             ; --- END FUNCTION CALL
6150   2B54 C0 00 00      cmp b, 0
6151   2B57 C6 5F 2B      je _if152_exit
6152   2B5A             _if152_TRUE:
6153   2B5A             ; return; 
6154   2B5A F9            leave
6155   2B5B 09            ret
6156   2B5C 0A 5F 2B      jmp _if152_exit
6157   2B5F             _if152_exit:
6158   2B5F             ; printf("Long Range Scan for Quadrant %d, %d\n\n", quad_y, quad_x); 
6159   2B5F             ; --- START FUNCTION CALL
6160   2B5F 3B A5 6E      mov d, _quad_x ; $quad_x
6161   2B62 2A            mov b, [d]
6162   2B63 38 00 00      mov c, 0
6163   2B66 FD AB         swp b
6164   2B68 D8            push b
6165   2B69 3B A3 6E      mov d, _quad_y ; $quad_y
6166   2B6C 2A            mov b, [d]
6167   2B6D 38 00 00      mov c, 0
6168   2B70 FD AB         swp b
6169   2B72 D8            push b
6170   2B73 26 F1 77      mov b, _s88 ; "Long Range Scan for Quadrant %d, %d\n\n"
6171   2B76 FD AB         swp b
6172   2B78 D8            push b
6173   2B79 07 B4 60      call printf
6174   2B7C 51 06 00      add sp, 6
6175   2B7F             ; --- END FUNCTION CALL
6176   2B7F             ; for (i = quad_y - 1; i <= quad_y + 1; i++) { 
6177   2B7F             _for153_init:
6178   2B7F FA FF FF      lea d, [bp + -1] ; $i
6179   2B82 DA            push d
6180   2B83 3B A3 6E      mov d, _quad_y ; $quad_y
6181   2B86 2A            mov b, [d]
6182   2B87 38 00 00      mov c, 0
6183   2B8A             ; --- START TERMS
6184   2B8A D7            push a
6185   2B8B 11            mov a, b
6186   2B8C FD 2E 01 00   mov32 cb, $00000001
6186   2B90 00 00 
6187   2B92 60            sub a, b
6188   2B93 27            mov b, a
6189   2B94 E4            pop a
6190   2B95             ; --- END TERMS
6191   2B95 E7            pop d
6192   2B96 FD 43         mov [d], b
6193   2B98             _for153_cond:
6194   2B98 FA FF FF      lea d, [bp + -1] ; $i
6195   2B9B 2A            mov b, [d]
6196   2B9C 38 00 00      mov c, 0
6197   2B9F             ; --- START RELATIONAL
6198   2B9F D7            push a
6199   2BA0 11            mov a, b
6200   2BA1 3B A3 6E      mov d, _quad_y ; $quad_y
6201   2BA4 2A            mov b, [d]
6202   2BA5 38 00 00      mov c, 0
6203   2BA8             ; --- START TERMS
6204   2BA8 D7            push a
6205   2BA9 11            mov a, b
6206   2BAA FD 2E 01 00   mov32 cb, $00000001
6206   2BAE 00 00 
6207   2BB0 56            add b, a
6208   2BB1 E4            pop a
6209   2BB2             ; --- END TERMS
6210   2BB2 B0            cmp a, b
6211   2BB3 FD 74         sle ; <= (signed)
6212   2BB5 E4            pop a
6213   2BB6             ; --- END RELATIONAL
6214   2BB6 C0 00 00      cmp b, 0
6215   2BB9 C6 44 2D      je _for153_exit
6216   2BBC             _for153_block:
6217   2BBC             ; printf("%s:", lrs_1); 
6218   2BBC             ; --- START FUNCTION CALL
6219   2BBC 3B 0D 70      mov d, _lrs_1 ; $lrs_1
6220   2BBF 2A            mov b, [d]
6221   2BC0 38 00 00      mov c, 0
6222   2BC3 FD AB         swp b
6223   2BC5 D8            push b
6224   2BC6 26 17 78      mov b, _s89 ; "%s:"
6225   2BC9 FD AB         swp b
6226   2BCB D8            push b
6227   2BCC 07 B4 60      call printf
6228   2BCF 51 04 00      add sp, 4
6229   2BD2             ; --- END FUNCTION CALL
6230   2BD2             ; for (j = quad_x - 1; j <= quad_x + 1; j++) { 
6231   2BD2             _for154_init:
6232   2BD2 FA FD FF      lea d, [bp + -3] ; $j
6233   2BD5 DA            push d
6234   2BD6 3B A5 6E      mov d, _quad_x ; $quad_x
6235   2BD9 2A            mov b, [d]
6236   2BDA 38 00 00      mov c, 0
6237   2BDD             ; --- START TERMS
6238   2BDD D7            push a
6239   2BDE 11            mov a, b
6240   2BDF FD 2E 01 00   mov32 cb, $00000001
6240   2BE3 00 00 
6241   2BE5 60            sub a, b
6242   2BE6 27            mov b, a
6243   2BE7 E4            pop a
6244   2BE8             ; --- END TERMS
6245   2BE8 E7            pop d
6246   2BE9 FD 43         mov [d], b
6247   2BEB             _for154_cond:
6248   2BEB FA FD FF      lea d, [bp + -3] ; $j
6249   2BEE 2A            mov b, [d]
6250   2BEF 38 00 00      mov c, 0
6251   2BF2             ; --- START RELATIONAL
6252   2BF2 D7            push a
6253   2BF3 11            mov a, b
6254   2BF4 3B A5 6E      mov d, _quad_x ; $quad_x
6255   2BF7 2A            mov b, [d]
6256   2BF8 38 00 00      mov c, 0
6257   2BFB             ; --- START TERMS
6258   2BFB D7            push a
6259   2BFC 11            mov a, b
6260   2BFD FD 2E 01 00   mov32 cb, $00000001
6260   2C01 00 00 
6261   2C03 56            add b, a
6262   2C04 E4            pop a
6263   2C05             ; --- END TERMS
6264   2C05 B0            cmp a, b
6265   2C06 FD 74         sle ; <= (signed)
6266   2C08 E4            pop a
6267   2C09             ; --- END RELATIONAL
6268   2C09 C0 00 00      cmp b, 0
6269   2C0C C6 24 2D      je _for154_exit
6270   2C0F             _for154_block:
6271   2C0F             ; putchar(' '); 
6272   2C0F             ; --- START FUNCTION CALL
6273   2C0F FD 2E 20 00   mov32 cb, $00000020
6273   2C13 00 00 
6274   2C15 DD            push bl
6275   2C16 07 33 65      call putchar
6276   2C19 51 01 00      add sp, 1
6277   2C1C             ; --- END FUNCTION CALL
6278   2C1C             ; if (i > 0 && i <= 8 && j > 0 && j <= 8) { 
6279   2C1C             _if155_cond:
6280   2C1C FA FF FF      lea d, [bp + -1] ; $i
6281   2C1F 2A            mov b, [d]
6282   2C20 38 00 00      mov c, 0
6283   2C23             ; --- START RELATIONAL
6284   2C23 D7            push a
6285   2C24 11            mov a, b
6286   2C25 FD 2E 00 00   mov32 cb, $00000000
6286   2C29 00 00 
6287   2C2B B0            cmp a, b
6288   2C2C FD 7F         sgt ; >
6289   2C2E E4            pop a
6290   2C2F             ; --- END RELATIONAL
6291   2C2F             ; --- START LOGICAL AND
6292   2C2F D7            push a
6293   2C30 11            mov a, b
6294   2C31 FA FF FF      lea d, [bp + -1] ; $i
6295   2C34 2A            mov b, [d]
6296   2C35 38 00 00      mov c, 0
6297   2C38             ; --- START RELATIONAL
6298   2C38 D7            push a
6299   2C39 11            mov a, b
6300   2C3A FD 2E 08 00   mov32 cb, $00000008
6300   2C3E 00 00 
6301   2C40 B0            cmp a, b
6302   2C41 FD 74         sle ; <= (signed)
6303   2C43 E4            pop a
6304   2C44             ; --- END RELATIONAL
6305   2C44 FD A7         sand a, b
6306   2C46 11            mov a, b
6307   2C47 FA FD FF      lea d, [bp + -3] ; $j
6308   2C4A 2A            mov b, [d]
6309   2C4B 38 00 00      mov c, 0
6310   2C4E             ; --- START RELATIONAL
6311   2C4E D7            push a
6312   2C4F 11            mov a, b
6313   2C50 FD 2E 00 00   mov32 cb, $00000000
6313   2C54 00 00 
6314   2C56 B0            cmp a, b
6315   2C57 FD 7F         sgt ; >
6316   2C59 E4            pop a
6317   2C5A             ; --- END RELATIONAL
6318   2C5A FD A7         sand a, b
6319   2C5C 11            mov a, b
6320   2C5D FA FD FF      lea d, [bp + -3] ; $j
6321   2C60 2A            mov b, [d]
6322   2C61 38 00 00      mov c, 0
6323   2C64             ; --- START RELATIONAL
6324   2C64 D7            push a
6325   2C65 11            mov a, b
6326   2C66 FD 2E 08 00   mov32 cb, $00000008
6326   2C6A 00 00 
6327   2C6C B0            cmp a, b
6328   2C6D FD 74         sle ; <= (signed)
6329   2C6F E4            pop a
6330   2C70             ; --- END RELATIONAL
6331   2C70 FD A7         sand a, b
6332   2C72 E4            pop a
6333   2C73             ; --- END LOGICAL AND
6334   2C73 C0 00 00      cmp b, 0
6335   2C76 C6 F9 2C      je _if155_else
6336   2C79             _if155_TRUE:
6337   2C79             ; map[i][j] = map[i][j] |  0x1000		           ; 
6338   2C79 3B F0 6D      mov d, _map_data ; $map
6339   2C7C D7            push a
6340   2C7D DA            push d
6341   2C7E FA FF FF      lea d, [bp + -1] ; $i
6342   2C81 2A            mov b, [d]
6343   2C82 38 00 00      mov c, 0
6344   2C85 E7            pop d
6345   2C86 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6346   2C8A DA            push d
6347   2C8B FA FD FF      lea d, [bp + -3] ; $j
6348   2C8E 2A            mov b, [d]
6349   2C8F 38 00 00      mov c, 0
6350   2C92 E7            pop d
6351   2C93 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6352   2C97 E4            pop a
6353   2C98 DA            push d
6354   2C99 3B F0 6D      mov d, _map_data ; $map
6355   2C9C D7            push a
6356   2C9D DA            push d
6357   2C9E FA FF FF      lea d, [bp + -1] ; $i
6358   2CA1 2A            mov b, [d]
6359   2CA2 38 00 00      mov c, 0
6360   2CA5 E7            pop d
6361   2CA6 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6362   2CAA DA            push d
6363   2CAB FA FD FF      lea d, [bp + -3] ; $j
6364   2CAE 2A            mov b, [d]
6365   2CAF 38 00 00      mov c, 0
6366   2CB2 E7            pop d
6367   2CB3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6368   2CB7 E4            pop a
6369   2CB8 2A            mov b, [d]
6370   2CB9 38 00 00      mov c, 0
6371   2CBC D7            push a
6372   2CBD 11            mov a, b
6373   2CBE FD 2E 00 10   mov32 cb, $00001000
6373   2CC2 00 00 
6374   2CC4 FD 70         or b, a ; |
6375   2CC6 E4            pop a
6376   2CC7 E7            pop d
6377   2CC8 FD 43         mov [d], b
6378   2CCA             ; putbcd(map[i][j]); 
6379   2CCA             ; --- START FUNCTION CALL
6380   2CCA 3B F0 6D      mov d, _map_data ; $map
6381   2CCD D7            push a
6382   2CCE DA            push d
6383   2CCF FA FF FF      lea d, [bp + -1] ; $i
6384   2CD2 2A            mov b, [d]
6385   2CD3 38 00 00      mov c, 0
6386   2CD6 E7            pop d
6387   2CD7 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6388   2CDB DA            push d
6389   2CDC FA FD FF      lea d, [bp + -3] ; $j
6390   2CDF 2A            mov b, [d]
6391   2CE0 38 00 00      mov c, 0
6392   2CE3 E7            pop d
6393   2CE4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6394   2CE8 E4            pop a
6395   2CE9 2A            mov b, [d]
6396   2CEA 38 00 00      mov c, 0
6397   2CED FD AB         swp b
6398   2CEF D8            push b
6399   2CF0 07 F5 2A      call putbcd
6400   2CF3 51 02 00      add sp, 2
6401   2CF6             ; --- END FUNCTION CALL
6402   2CF6 0A 05 2D      jmp _if155_exit
6403   2CF9             _if155_else:
6404   2CF9             ; puts("***"); 
6405   2CF9             ; --- START FUNCTION CALL
6406   2CF9 26 1B 78      mov b, _s90 ; "***"
6407   2CFC FD AB         swp b
6408   2CFE D8            push b
6409   2CFF 07 C8 69      call puts
6410   2D02 51 02 00      add sp, 2
6411   2D05             ; --- END FUNCTION CALL
6412   2D05             _if155_exit:
6413   2D05             ; puts(" :"); 
6414   2D05             ; --- START FUNCTION CALL
6415   2D05 26 1F 78      mov b, _s91 ; " :"
6416   2D08 FD AB         swp b
6417   2D0A D8            push b
6418   2D0B 07 C8 69      call puts
6419   2D0E 51 02 00      add sp, 2
6420   2D11             ; --- END FUNCTION CALL
6421   2D11             _for154_update:
6422   2D11 FA FD FF      lea d, [bp + -3] ; $j
6423   2D14 2A            mov b, [d]
6424   2D15 38 00 00      mov c, 0
6425   2D18 11            mov a, b
6426   2D19 FD 77         inc b
6427   2D1B FA FD FF      lea d, [bp + -3] ; $j
6428   2D1E FD 43         mov [d], b
6429   2D20 27            mov b, a
6430   2D21 0A EB 2B      jmp _for154_cond
6431   2D24             _for154_exit:
6432   2D24             ; putchar('\n'); 
6433   2D24             ; --- START FUNCTION CALL
6434   2D24 FD 2E 0A 00   mov32 cb, $0000000a
6434   2D28 00 00 
6435   2D2A DD            push bl
6436   2D2B 07 33 65      call putchar
6437   2D2E 51 01 00      add sp, 1
6438   2D31             ; --- END FUNCTION CALL
6439   2D31             _for153_update:
6440   2D31 FA FF FF      lea d, [bp + -1] ; $i
6441   2D34 2A            mov b, [d]
6442   2D35 38 00 00      mov c, 0
6443   2D38 11            mov a, b
6444   2D39 FD 77         inc b
6445   2D3B FA FF FF      lea d, [bp + -1] ; $i
6446   2D3E FD 43         mov [d], b
6447   2D40 27            mov b, a
6448   2D41 0A 98 2B      jmp _for153_cond
6449   2D44             _for153_exit:
6450   2D44             ; printf("%s\n", lrs_1); 
6451   2D44             ; --- START FUNCTION CALL
6452   2D44 3B 0D 70      mov d, _lrs_1 ; $lrs_1
6453   2D47 2A            mov b, [d]
6454   2D48 38 00 00      mov c, 0
6455   2D4B FD AB         swp b
6456   2D4D D8            push b
6457   2D4E 26 22 78      mov b, _s92 ; "%s\n"
6458   2D51 FD AB         swp b
6459   2D53 D8            push b
6460   2D54 07 B4 60      call printf
6461   2D57 51 04 00      add sp, 4
6462   2D5A             ; --- END FUNCTION CALL
6463   2D5A F9            leave
6464   2D5B 09            ret
6465   2D5C             
6466   2D5C             no_klingon:
6467   2D5C F8 00 00      enter 0 ; (push bp; mov bp, sp)
6468   2D5F             ; if (klingons <= 0) { 
6469   2D5F             _if156_cond:
6470   2D5F 3B 9E 6E      mov d, _klingons ; $klingons
6471   2D62 32            mov bl, [d]
6472   2D63 A7 00         mov bh, 0
6473   2D65 38 00 00      mov c, 0
6474   2D68             ; --- START RELATIONAL
6475   2D68 D7            push a
6476   2D69 11            mov a, b
6477   2D6A FD 2E 00 00   mov32 cb, $00000000
6477   2D6E 00 00 
6478   2D70 B0            cmp a, b
6479   2D71 FD 76         sleu ; <= (unsigned)
6480   2D73 E4            pop a
6481   2D74             ; --- END RELATIONAL
6482   2D74 C0 00 00      cmp b, 0
6483   2D77 C6 91 2D      je _if156_exit
6484   2D7A             _if156_TRUE:
6485   2D7A             ; puts("Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"); 
6486   2D7A             ; --- START FUNCTION CALL
6487   2D7A 26 26 78      mov b, _s93 ; "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"
6488   2D7D FD AB         swp b
6489   2D7F D8            push b
6490   2D80 07 C8 69      call puts
6491   2D83 51 02 00      add sp, 2
6492   2D86             ; --- END FUNCTION CALL
6493   2D86             ; return 1; 
6494   2D86 FD 2E 01 00   mov32 cb, $00000001
6494   2D8A 00 00 
6495   2D8C F9            leave
6496   2D8D 09            ret
6497   2D8E 0A 91 2D      jmp _if156_exit
6498   2D91             _if156_exit:
6499   2D91             ; return 0; 
6500   2D91 FD 2E 00 00   mov32 cb, $00000000
6500   2D95 00 00 
6501   2D97 F9            leave
6502   2D98 09            ret
6503   2D99             
6504   2D99             wipe_klingon:
6505   2D99 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6506   2D9C             ; quad[k->y+-1][k->x+-1] = 		0       ; 
6507   2D9C 3B C8 6E      mov d, _quad_data ; $quad
6508   2D9F D7            push a
6509   2DA0 DA            push d
6510   2DA1 FA 05 00      lea d, [bp + 5] ; $k
6511   2DA4 FD 2A         mov d, [d]
6512   2DA6 58 00 00      add d, 0
6513   2DA9 32            mov bl, [d]
6514   2DAA A7 00         mov bh, 0
6515   2DAC 38 00 00      mov c, 0
6516   2DAF             ; --- START TERMS
6517   2DAF D7            push a
6518   2DB0 11            mov a, b
6519   2DB1 FD 2E FF FF   mov32 cb, $ffffffff
6519   2DB5 FF FF 
6520   2DB7 56            add b, a
6521   2DB8 E4            pop a
6522   2DB9             ; --- END TERMS
6523   2DB9 E7            pop d
6524   2DBA FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
6525   2DBE DA            push d
6526   2DBF FA 05 00      lea d, [bp + 5] ; $k
6527   2DC2 FD 2A         mov d, [d]
6528   2DC4 58 01 00      add d, 1
6529   2DC7 32            mov bl, [d]
6530   2DC8 A7 00         mov bh, 0
6531   2DCA 38 00 00      mov c, 0
6532   2DCD             ; --- START TERMS
6533   2DCD D7            push a
6534   2DCE 11            mov a, b
6535   2DCF FD 2E FF FF   mov32 cb, $ffffffff
6535   2DD3 FF FF 
6536   2DD5 56            add b, a
6537   2DD6 E4            pop a
6538   2DD7             ; --- END TERMS
6539   2DD7 E7            pop d
6540   2DD8 5A            add d, b
6541   2DD9 E4            pop a
6542   2DDA DA            push d
6543   2DDB FD 2E 00 00   mov32 cb, $00000000
6543   2DDF 00 00 
6544   2DE1 E7            pop d
6545   2DE2 FD 3E         mov [d], bl
6546   2DE4 F9            leave
6547   2DE5 09            ret
6548   2DE6             
6549   2DE6             phaser_control:
6550   2DE6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6551   2DE9             ; int i; 
6552   2DE9 52 02 00      sub sp, 2
6553   2DEC             ; long int        phaser_energy; 
6554   2DEC 52 04 00      sub sp, 4
6555   2DEF             ; long unsigned int         h1; 
6556   2DEF 52 04 00      sub sp, 4
6557   2DF2             ; int h; 
6558   2DF2 52 02 00      sub sp, 2
6559   2DF5             ; struct klingon *k; 
6560   2DF5 52 02 00      sub sp, 2
6561   2DF8             ; k = &kdata; 
6562   2DF8 FA F3 FF      lea d, [bp + -13] ; $k
6563   2DFB DA            push d
6564   2DFC 3B 92 6E      mov d, _kdata_data ; $kdata
6565   2DFF 2D            mov b, d
6566   2E00 E7            pop d
6567   2E01 FD 43         mov [d], b
6568   2E03             ; if (inoperable(4)) 
6569   2E03             _if157_cond:
6570   2E03             ; --- START FUNCTION CALL
6571   2E03 FD 2E 04 00   mov32 cb, $00000004
6571   2E07 00 00 
6572   2E09 DD            push bl
6573   2E0A 07 7C 09      call inoperable
6574   2E0D 51 01 00      add sp, 1
6575   2E10             ; --- END FUNCTION CALL
6576   2E10 C0 00 00      cmp b, 0
6577   2E13 C6 1B 2E      je _if157_exit
6578   2E16             _if157_TRUE:
6579   2E16             ; return; 
6580   2E16 F9            leave
6581   2E17 09            ret
6582   2E18 0A 1B 2E      jmp _if157_exit
6583   2E1B             _if157_exit:
6584   2E1B             ; if (no_klingon()) 
6585   2E1B             _if158_cond:
6586   2E1B             ; --- START FUNCTION CALL
6587   2E1B 07 5C 2D      call no_klingon
6588   2E1E C0 00 00      cmp b, 0
6589   2E21 C6 29 2E      je _if158_exit
6590   2E24             _if158_TRUE:
6591   2E24             ; return; 
6592   2E24 F9            leave
6593   2E25 09            ret
6594   2E26 0A 29 2E      jmp _if158_exit
6595   2E29             _if158_exit:
6596   2E29             ; if (damage[8] < 0) 
6597   2E29             _if159_cond:
6598   2E29 3B AE 6E      mov d, _damage_data ; $damage
6599   2E2C D7            push a
6600   2E2D DA            push d
6601   2E2E FD 2E 08 00   mov32 cb, $00000008
6601   2E32 00 00 
6602   2E34 E7            pop d
6603   2E35 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6604   2E39 E4            pop a
6605   2E3A 2A            mov b, [d]
6606   2E3B 38 00 00      mov c, 0
6607   2E3E             ; --- START RELATIONAL
6608   2E3E D7            push a
6609   2E3F 11            mov a, b
6610   2E40 FD 2E 00 00   mov32 cb, $00000000
6610   2E44 00 00 
6611   2E46 B0            cmp a, b
6612   2E47 FD 73         slt ; < (signed)
6613   2E49 E4            pop a
6614   2E4A             ; --- END RELATIONAL
6615   2E4A C0 00 00      cmp b, 0
6616   2E4D C6 5F 2E      je _if159_exit
6617   2E50             _if159_TRUE:
6618   2E50             ; puts("Computer failure hampers accuracy."); 
6619   2E50             ; --- START FUNCTION CALL
6620   2E50 26 77 78      mov b, _s94 ; "Computer failure hampers accuracy."
6621   2E53 FD AB         swp b
6622   2E55 D8            push b
6623   2E56 07 C8 69      call puts
6624   2E59 51 02 00      add sp, 2
6625   2E5C             ; --- END FUNCTION CALL
6626   2E5C 0A 5F 2E      jmp _if159_exit
6627   2E5F             _if159_exit:
6628   2E5F             ; printf("Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", energy); 
6629   2E5F             ; --- START FUNCTION CALL
6630   2E5F 3B EC 6D      mov d, _energy ; $energy
6631   2E62 2A            mov b, [d]
6632   2E63 38 00 00      mov c, 0
6633   2E66 FD AB         swp b
6634   2E68 D8            push b
6635   2E69 26 9A 78      mov b, _s95 ; "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: "
6636   2E6C FD AB         swp b
6637   2E6E D8            push b
6638   2E6F 07 B4 60      call printf
6639   2E72 51 04 00      add sp, 4
6640   2E75             ; --- END FUNCTION CALL
6641   2E75             ; phaser_energy = input_int(); 
6642   2E75 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6643   2E78 DA            push d
6644   2E79             ; --- START FUNCTION CALL
6645   2E79 07 BD 08      call input_int
6646   2E7C E7            pop d
6647   2E7D FD 43         mov [d], b
6648   2E7F 26 00 00      mov b, 0
6649   2E82 FD 44 02 00   mov [d + 2], b
6650   2E86             ; if (phaser_energy <= 0) 
6651   2E86             _if160_cond:
6652   2E86 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6653   2E89 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6654   2E8C FD 39         mov c, b ; And place it into C
6655   2E8E 2A            mov b, [d] ; Lower Word in B
6656   2E8F             ; --- START RELATIONAL
6657   2E8F D7            push a
6658   2E90 FD D8         push g
6659   2E92 11            mov a, b
6660   2E93 FD 7A         mov g, c
6661   2E95 FD 2E 00 00   mov32 cb, $00000000
6661   2E99 00 00 
6662   2E9B 38 00 00      mov c, 0
6663   2E9E FD AF         cmp32 ga, cb
6664   2EA0 FD 74         sle
6665   2EA2 FD F1         pop g
6666   2EA4 E4            pop a
6667   2EA5             ; --- END RELATIONAL
6668   2EA5 C0 00 00      cmp b, 0
6669   2EA8 C6 B0 2E      je _if160_exit
6670   2EAB             _if160_TRUE:
6671   2EAB             ; return; 
6672   2EAB F9            leave
6673   2EAC 09            ret
6674   2EAD 0A B0 2E      jmp _if160_exit
6675   2EB0             _if160_exit:
6676   2EB0             ; if (energy - phaser_energy < 0) { 
6677   2EB0             _if161_cond:
6678   2EB0 3B EC 6D      mov d, _energy ; $energy
6679   2EB3 2A            mov b, [d]
6680   2EB4 38 00 00      mov c, 0
6681   2EB7             ; --- START TERMS
6682   2EB7 D7            push a
6683   2EB8 11            mov a, b
6684   2EB9 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6685   2EBC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6686   2EBF FD 39         mov c, b ; And place it into C
6687   2EC1 2A            mov b, [d] ; Lower Word in B
6688   2EC2 FD 22 00 00   mov g, 0
6689   2EC6 FD 1C         sub32 ga, cb
6690   2EC8 27            mov b, a
6691   2EC9 FD 38         mov c, g
6692   2ECB E4            pop a
6693   2ECC             ; --- END TERMS
6694   2ECC             ; --- START RELATIONAL
6695   2ECC D7            push a
6696   2ECD FD D8         push g
6697   2ECF 11            mov a, b
6698   2ED0 FD 7A         mov g, c
6699   2ED2 FD 2E 00 00   mov32 cb, $00000000
6699   2ED6 00 00 
6700   2ED8 38 00 00      mov c, 0
6701   2EDB FD AF         cmp32 ga, cb
6702   2EDD FD 73         slt ; <
6703   2EDF FD F1         pop g
6704   2EE1 E4            pop a
6705   2EE2             ; --- END RELATIONAL
6706   2EE2 C0 00 00      cmp b, 0
6707   2EE5 C6 F9 2E      je _if161_exit
6708   2EE8             _if161_TRUE:
6709   2EE8             ; puts("Not enough energy available.\n"); 
6710   2EE8             ; --- START FUNCTION CALL
6711   2EE8 26 ED 78      mov b, _s96 ; "Not enough energy available.\n"
6712   2EEB FD AB         swp b
6713   2EED D8            push b
6714   2EEE 07 C8 69      call puts
6715   2EF1 51 02 00      add sp, 2
6716   2EF4             ; --- END FUNCTION CALL
6717   2EF4             ; return; 
6718   2EF4 F9            leave
6719   2EF5 09            ret
6720   2EF6 0A F9 2E      jmp _if161_exit
6721   2EF9             _if161_exit:
6722   2EF9             ; energy = energy -  phaser_energy; 
6723   2EF9 3B EC 6D      mov d, _energy ; $energy
6724   2EFC DA            push d
6725   2EFD 3B EC 6D      mov d, _energy ; $energy
6726   2F00 2A            mov b, [d]
6727   2F01 38 00 00      mov c, 0
6728   2F04             ; --- START TERMS
6729   2F04 D7            push a
6730   2F05 11            mov a, b
6731   2F06 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6732   2F09 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6733   2F0C FD 39         mov c, b ; And place it into C
6734   2F0E 2A            mov b, [d] ; Lower Word in B
6735   2F0F FD 22 00 00   mov g, 0
6736   2F13 FD 1C         sub32 ga, cb
6737   2F15 27            mov b, a
6738   2F16 FD 38         mov c, g
6739   2F18 E4            pop a
6740   2F19             ; --- END TERMS
6741   2F19 E7            pop d
6742   2F1A FD 43         mov [d], b
6743   2F1C             ; if (damage[8] < 0) 
6744   2F1C             _if162_cond:
6745   2F1C 3B AE 6E      mov d, _damage_data ; $damage
6746   2F1F D7            push a
6747   2F20 DA            push d
6748   2F21 FD 2E 08 00   mov32 cb, $00000008
6748   2F25 00 00 
6749   2F27 E7            pop d
6750   2F28 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6751   2F2C E4            pop a
6752   2F2D 2A            mov b, [d]
6753   2F2E 38 00 00      mov c, 0
6754   2F31             ; --- START RELATIONAL
6755   2F31 D7            push a
6756   2F32 11            mov a, b
6757   2F33 FD 2E 00 00   mov32 cb, $00000000
6757   2F37 00 00 
6758   2F39 B0            cmp a, b
6759   2F3A FD 73         slt ; < (signed)
6760   2F3C E4            pop a
6761   2F3D             ; --- END RELATIONAL
6762   2F3D C0 00 00      cmp b, 0
6763   2F40 C6 A9 2F      je _if162_else
6764   2F43             _if162_TRUE:
6765   2F43             ; phaser_energy =phaser_energy * get_rand(100); 
6766   2F43 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6767   2F46 DA            push d
6768   2F47 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6769   2F4A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6770   2F4D FD 39         mov c, b ; And place it into C
6771   2F4F 2A            mov b, [d] ; Lower Word in B
6772   2F50             ; --- START FACTORS
6773   2F50 D7            push a
6774   2F51 FD D8         push g
6775   2F53 11            mov a, b
6776   2F54 FD 7A         mov g, c
6777   2F56             ; --- START FUNCTION CALL
6778   2F56 FD 2E 64 00   mov32 cb, $00000064
6778   2F5A 00 00 
6779   2F5C FD AB         swp b
6780   2F5E D8            push b
6781   2F5F 07 FF 04      call get_rand
6782   2F62 51 02 00      add sp, 2
6783   2F65             ; --- END FUNCTION CALL
6784   2F65 D7            push a     ; save left operand
6785   2F66 8E            xor a, b   ; xor sign bits
6786   2F67 FD AA         swp a      ; swap bytes
6787   2F69 83            mov cl, al ; save result of xor into 'dl'
6788   2F6A E4            pop a      ; restore left side operator
6789   2F6B DF            push cl    ; save result of xor above
6790   2F6C FD AA         swp a  
6791   2F6E 93 80         test al, $80  
6792   2F70 FD AA         swp a  
6793   2F72 C6 77 2F      jz skip_invert_a_164  
6794   2F75 FD 95         neg a 
6795   2F77             skip_invert_a_164:   
6796   2F77 FD AB         swp b
6797   2F79 FD 93 80      test bl, $80  
6798   2F7C FD AB         swp b
6799   2F7E C6 83 2F      jz skip_invert_b_164  
6800   2F81 FD 97         neg b 
6801   2F83             skip_invert_b_164:   
6802   2F83 AC            mul a, b ; *
6803   2F84 FD 78         mov g, a
6804   2F86 11            mov a, b
6805   2F87 EA            pop bl
6806   2F88 FD 93 80      test bl, $80
6807   2F8B C6 98 2F      jz _same_signs_164
6808   2F8E 2F            mov bl, al
6809   2F8F 95            not a
6810   2F90 FD 97         neg b
6811   2F92 5B 00 00      adc a, 0
6812   2F95 FD 78         mov g, a
6813   2F97 11            mov a, b
6814   2F98             _same_signs_164:
6815   2F98 FD 38         mov c, g
6816   2F9A 27            mov b, a
6817   2F9B FD F1         pop g
6818   2F9D E4            pop a
6819   2F9E             ; --- END FACTORS
6820   2F9E E7            pop d
6821   2F9F FD 43         mov [d], b
6822   2FA1 28            mov b, c
6823   2FA2 FD 44 02 00   mov [d + 2], b
6824   2FA6 0A 03 30      jmp _if162_exit
6825   2FA9             _if162_else:
6826   2FA9             ; phaser_energy = phaser_energy* 100; 
6827   2FA9 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6828   2FAC DA            push d
6829   2FAD FA FB FF      lea d, [bp + -5] ; $phaser_energy
6830   2FB0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6831   2FB3 FD 39         mov c, b ; And place it into C
6832   2FB5 2A            mov b, [d] ; Lower Word in B
6833   2FB6             ; --- START FACTORS
6834   2FB6 D7            push a
6835   2FB7 FD D8         push g
6836   2FB9 11            mov a, b
6837   2FBA FD 7A         mov g, c
6838   2FBC FD 2E 64 00   mov32 cb, $00000064
6838   2FC0 00 00 
6839   2FC2 D7            push a     ; save left operand
6840   2FC3 8E            xor a, b   ; xor sign bits
6841   2FC4 FD AA         swp a      ; swap bytes
6842   2FC6 83            mov cl, al ; save result of xor into 'dl'
6843   2FC7 E4            pop a      ; restore left side operator
6844   2FC8 DF            push cl    ; save result of xor above
6845   2FC9 FD AA         swp a  
6846   2FCB 93 80         test al, $80  
6847   2FCD FD AA         swp a  
6848   2FCF C6 D4 2F      jz skip_invert_a_166  
6849   2FD2 FD 95         neg a 
6850   2FD4             skip_invert_a_166:   
6851   2FD4 FD AB         swp b
6852   2FD6 FD 93 80      test bl, $80  
6853   2FD9 FD AB         swp b
6854   2FDB C6 E0 2F      jz skip_invert_b_166  
6855   2FDE FD 97         neg b 
6856   2FE0             skip_invert_b_166:   
6857   2FE0 AC            mul a, b ; *
6858   2FE1 FD 78         mov g, a
6859   2FE3 11            mov a, b
6860   2FE4 EA            pop bl
6861   2FE5 FD 93 80      test bl, $80
6862   2FE8 C6 F5 2F      jz _same_signs_166
6863   2FEB 2F            mov bl, al
6864   2FEC 95            not a
6865   2FED FD 97         neg b
6866   2FEF 5B 00 00      adc a, 0
6867   2FF2 FD 78         mov g, a
6868   2FF4 11            mov a, b
6869   2FF5             _same_signs_166:
6870   2FF5 FD 38         mov c, g
6871   2FF7 27            mov b, a
6872   2FF8 FD F1         pop g
6873   2FFA E4            pop a
6874   2FFB             ; --- END FACTORS
6875   2FFB E7            pop d
6876   2FFC FD 43         mov [d], b
6877   2FFE 28            mov b, c
6878   2FFF FD 44 02 00   mov [d + 2], b
6879   3003             _if162_exit:
6880   3003             ; h1 = phaser_energy / klingons; 
6881   3003 FA F7 FF      lea d, [bp + -9] ; $h1
6882   3006 DA            push d
6883   3007 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6884   300A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6885   300D FD 39         mov c, b ; And place it into C
6886   300F 2A            mov b, [d] ; Lower Word in B
6887   3010             ; --- START FACTORS
6888   3010 D7            push a
6889   3011 FD D8         push g
6890   3013 11            mov a, b
6891   3014 FD 7A         mov g, c
6892   3016 3B 9E 6E      mov d, _klingons ; $klingons
6893   3019 32            mov bl, [d]
6894   301A A7 00         mov bh, 0
6895   301C 38 00 00      mov c, 0
6896   301F FD D8         push g ; save 'g' as the div instruction uses it
6897   3021 AE            div a, b ; /, a: quotient, b: remainder
6898   3022 FD F1         pop g
6899   3024 FD 38         mov c, g
6900   3026 27            mov b, a
6901   3027 FD F1         pop g
6902   3029 E4            pop a
6903   302A             ; --- END FACTORS
6904   302A E7            pop d
6905   302B FD 43         mov [d], b
6906   302D 28            mov b, c
6907   302E FD 44 02 00   mov [d + 2], b
6908   3032             ; for (i = 0; i <= 2; i++) { 
6909   3032             _for169_init:
6910   3032 FA FF FF      lea d, [bp + -1] ; $i
6911   3035 DA            push d
6912   3036 FD 2E 00 00   mov32 cb, $00000000
6912   303A 00 00 
6913   303C E7            pop d
6914   303D FD 43         mov [d], b
6915   303F             _for169_cond:
6916   303F FA FF FF      lea d, [bp + -1] ; $i
6917   3042 2A            mov b, [d]
6918   3043 38 00 00      mov c, 0
6919   3046             ; --- START RELATIONAL
6920   3046 D7            push a
6921   3047 11            mov a, b
6922   3048 FD 2E 02 00   mov32 cb, $00000002
6922   304C 00 00 
6923   304E B0            cmp a, b
6924   304F FD 74         sle ; <= (signed)
6925   3051 E4            pop a
6926   3052             ; --- END RELATIONAL
6927   3052 C0 00 00      cmp b, 0
6928   3055 C6 54 33      je _for169_exit
6929   3058             _for169_block:
6930   3058             ; if (k->energy > 0) { 
6931   3058             _if170_cond:
6932   3058 FA F3 FF      lea d, [bp + -13] ; $k
6933   305B FD 2A         mov d, [d]
6934   305D 58 02 00      add d, 2
6935   3060 2A            mov b, [d]
6936   3061 38 00 00      mov c, 0
6937   3064             ; --- START RELATIONAL
6938   3064 D7            push a
6939   3065 11            mov a, b
6940   3066 FD 2E 00 00   mov32 cb, $00000000
6940   306A 00 00 
6941   306C B0            cmp a, b
6942   306D FD 7F         sgt ; >
6943   306F E4            pop a
6944   3070             ; --- END RELATIONAL
6945   3070 C0 00 00      cmp b, 0
6946   3073 C6 2F 33      je _if170_exit
6947   3076             _if170_TRUE:
6948   3076             ; h1 = h1 * (get_rand(100) + 200); 
6949   3076 FA F7 FF      lea d, [bp + -9] ; $h1
6950   3079 DA            push d
6951   307A FA F7 FF      lea d, [bp + -9] ; $h1
6952   307D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6953   3080 FD 39         mov c, b ; And place it into C
6954   3082 2A            mov b, [d] ; Lower Word in B
6955   3083             ; --- START FACTORS
6956   3083 D7            push a
6957   3084 FD D8         push g
6958   3086 11            mov a, b
6959   3087 FD 7A         mov g, c
6960   3089             ; --- START FUNCTION CALL
6961   3089 FD 2E 64 00   mov32 cb, $00000064
6961   308D 00 00 
6962   308F FD AB         swp b
6963   3091 D8            push b
6964   3092 07 FF 04      call get_rand
6965   3095 51 02 00      add sp, 2
6966   3098             ; --- END FUNCTION CALL
6967   3098             ; --- START TERMS
6968   3098 D7            push a
6969   3099 11            mov a, b
6970   309A FD 2E C8 00   mov32 cb, $000000c8
6970   309E 00 00 
6971   30A0 56            add b, a
6972   30A1 E4            pop a
6973   30A2             ; --- END TERMS
6974   30A2 D7            push a     ; save left operand
6975   30A3 8E            xor a, b   ; xor sign bits
6976   30A4 FD AA         swp a      ; swap bytes
6977   30A6 83            mov cl, al ; save result of xor into 'dl'
6978   30A7 E4            pop a      ; restore left side operator
6979   30A8 DF            push cl    ; save result of xor above
6980   30A9 FD AA         swp a  
6981   30AB 93 80         test al, $80  
6982   30AD FD AA         swp a  
6983   30AF C6 B4 30      jz skip_invert_a_172  
6984   30B2 FD 95         neg a 
6985   30B4             skip_invert_a_172:   
6986   30B4 FD AB         swp b
6987   30B6 FD 93 80      test bl, $80  
6988   30B9 FD AB         swp b
6989   30BB C6 C0 30      jz skip_invert_b_172  
6990   30BE FD 97         neg b 
6991   30C0             skip_invert_b_172:   
6992   30C0 AC            mul a, b ; *
6993   30C1 FD 78         mov g, a
6994   30C3 11            mov a, b
6995   30C4 EA            pop bl
6996   30C5 FD 93 80      test bl, $80
6997   30C8 C6 D5 30      jz _same_signs_172
6998   30CB 2F            mov bl, al
6999   30CC 95            not a
7000   30CD FD 97         neg b
7001   30CF 5B 00 00      adc a, 0
7002   30D2 FD 78         mov g, a
7003   30D4 11            mov a, b
7004   30D5             _same_signs_172:
7005   30D5 FD 38         mov c, g
7006   30D7 27            mov b, a
7007   30D8 FD F1         pop g
7008   30DA E4            pop a
7009   30DB             ; --- END FACTORS
7010   30DB E7            pop d
7011   30DC FD 43         mov [d], b
7012   30DE 28            mov b, c
7013   30DF FD 44 02 00   mov [d + 2], b
7014   30E3             ; h1 =h1/ distance_to(k); 
7015   30E3 FA F7 FF      lea d, [bp + -9] ; $h1
7016   30E6 DA            push d
7017   30E7 FA F7 FF      lea d, [bp + -9] ; $h1
7018   30EA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
7019   30ED FD 39         mov c, b ; And place it into C
7020   30EF 2A            mov b, [d] ; Lower Word in B
7021   30F0             ; --- START FACTORS
7022   30F0 D7            push a
7023   30F1 FD D8         push g
7024   30F3 11            mov a, b
7025   30F4 FD 7A         mov g, c
7026   30F6             ; --- START FUNCTION CALL
7027   30F6 FA F3 FF      lea d, [bp + -13] ; $k
7028   30F9 2A            mov b, [d]
7029   30FA 38 00 00      mov c, 0
7030   30FD FD AB         swp b
7031   30FF D8            push b
7032   3100 07 93 5D      call distance_to
7033   3103 51 02 00      add sp, 2
7034   3106             ; --- END FUNCTION CALL
7035   3106 FD D8         push g ; save 'g' as the div instruction uses it
7036   3108 AE            div a, b ; /, a: quotient, b: remainder
7037   3109 FD F1         pop g
7038   310B FD 38         mov c, g
7039   310D 27            mov b, a
7040   310E FD F1         pop g
7041   3110 E4            pop a
7042   3111             ; --- END FACTORS
7043   3111 E7            pop d
7044   3112 FD 43         mov [d], b
7045   3114 28            mov b, c
7046   3115 FD 44 02 00   mov [d + 2], b
7047   3119             ; if (h1 <= 15 * k->energy) {	/* was 0.15 */ 
7048   3119             _if175_cond:
7049   3119 FA F7 FF      lea d, [bp + -9] ; $h1
7050   311C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
7051   311F FD 39         mov c, b ; And place it into C
7052   3121 2A            mov b, [d] ; Lower Word in B
7053   3122             ; --- START RELATIONAL
7054   3122 D7            push a
7055   3123 FD D8         push g
7056   3125 11            mov a, b
7057   3126 FD 7A         mov g, c
7058   3128 FD 2E 0F 00   mov32 cb, $0000000f
7058   312C 00 00 
7059   312E             ; --- START FACTORS
7060   312E D7            push a
7061   312F FD D8         push g
7062   3131 11            mov a, b
7063   3132 FD 7A         mov g, c
7064   3134 FA F3 FF      lea d, [bp + -13] ; $k
7065   3137 FD 2A         mov d, [d]
7066   3139 58 02 00      add d, 2
7067   313C 2A            mov b, [d]
7068   313D 38 00 00      mov c, 0
7069   3140 D7            push a     ; save left operand
7070   3141 8E            xor a, b   ; xor sign bits
7071   3142 FD AA         swp a      ; swap bytes
7072   3144 83            mov cl, al ; save result of xor into 'dl'
7073   3145 E4            pop a      ; restore left side operator
7074   3146 DF            push cl    ; save result of xor above
7075   3147 FD AA         swp a  
7076   3149 93 80         test al, $80  
7077   314B FD AA         swp a  
7078   314D C6 52 31      jz skip_invert_a_177  
7079   3150 FD 95         neg a 
7080   3152             skip_invert_a_177:   
7081   3152 FD AB         swp b
7082   3154 FD 93 80      test bl, $80  
7083   3157 FD AB         swp b
7084   3159 C6 5E 31      jz skip_invert_b_177  
7085   315C FD 97         neg b 
7086   315E             skip_invert_b_177:   
7087   315E AC            mul a, b ; *
7088   315F FD 78         mov g, a
7089   3161 11            mov a, b
7090   3162 EA            pop bl
7091   3163 FD 93 80      test bl, $80
7092   3166 C6 73 31      jz _same_signs_177
7093   3169 2F            mov bl, al
7094   316A 95            not a
7095   316B FD 97         neg b
7096   316D 5B 00 00      adc a, 0
7097   3170 FD 78         mov g, a
7098   3172 11            mov a, b
7099   3173             _same_signs_177:
7100   3173 FD 38         mov c, g
7101   3175 27            mov b, a
7102   3176 FD F1         pop g
7103   3178 E4            pop a
7104   3179             ; --- END FACTORS
7105   3179 FD AF         cmp32 ga, cb
7106   317B FD 76         sleu
7107   317D FD F1         pop g
7108   317F E4            pop a
7109   3180             ; --- END RELATIONAL
7110   3180 C0 00 00      cmp b, 0
7111   3183 C6 B7 31      je _if175_else
7112   3186             _if175_TRUE:
7113   3186             ; printf("Sensors show no damage to enemy at %d, %d\n\n", k->y, k->x); 
7114   3186             ; --- START FUNCTION CALL
7115   3186 FA F3 FF      lea d, [bp + -13] ; $k
7116   3189 FD 2A         mov d, [d]
7117   318B 58 01 00      add d, 1
7118   318E 32            mov bl, [d]
7119   318F A7 00         mov bh, 0
7120   3191 38 00 00      mov c, 0
7121   3194 FD AB         swp b
7122   3196 D8            push b
7123   3197 FA F3 FF      lea d, [bp + -13] ; $k
7124   319A FD 2A         mov d, [d]
7125   319C 58 00 00      add d, 0
7126   319F 32            mov bl, [d]
7127   31A0 A7 00         mov bh, 0
7128   31A2 38 00 00      mov c, 0
7129   31A5 FD AB         swp b
7130   31A7 D8            push b
7131   31A8 26 0B 79      mov b, _s97 ; "Sensors show no damage to enemy at %d, %d\n\n"
7132   31AB FD AB         swp b
7133   31AD D8            push b
7134   31AE 07 B4 60      call printf
7135   31B1 51 04 00      add sp, 4
7136   31B4             ; --- END FUNCTION CALL
7137   31B4 0A 2C 33      jmp _if175_exit
7138   31B7             _if175_else:
7139   31B7             ; h = FROM_FIXED00(h1); 
7140   31B7 FA F5 FF      lea d, [bp + -11] ; $h
7141   31BA DA            push d
7142   31BB             ; --- START FUNCTION CALL
7143   31BB FA F7 FF      lea d, [bp + -9] ; $h1
7144   31BE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
7145   31C1 FD 39         mov c, b ; And place it into C
7146   31C3 2A            mov b, [d] ; Lower Word in B
7147   31C4 FD AB         swp b
7148   31C6 D8            push b
7149   31C7 07 DC 04      call FROM_FIXED00
7150   31CA 51 02 00      add sp, 2
7151   31CD             ; --- END FUNCTION CALL
7152   31CD E7            pop d
7153   31CE FD 43         mov [d], b
7154   31D0             ; k->energy = k->energy - h; 
7155   31D0 FA F3 FF      lea d, [bp + -13] ; $k
7156   31D3 FD 2A         mov d, [d]
7157   31D5 58 02 00      add d, 2
7158   31D8 DA            push d
7159   31D9 FA F3 FF      lea d, [bp + -13] ; $k
7160   31DC FD 2A         mov d, [d]
7161   31DE 58 02 00      add d, 2
7162   31E1 2A            mov b, [d]
7163   31E2 38 00 00      mov c, 0
7164   31E5             ; --- START TERMS
7165   31E5 D7            push a
7166   31E6 11            mov a, b
7167   31E7 FA F5 FF      lea d, [bp + -11] ; $h
7168   31EA 2A            mov b, [d]
7169   31EB 38 00 00      mov c, 0
7170   31EE 60            sub a, b
7171   31EF 27            mov b, a
7172   31F0 E4            pop a
7173   31F1             ; --- END TERMS
7174   31F1 E7            pop d
7175   31F2 FD 43         mov [d], b
7176   31F4             ; printf("%d unit hit on Klingon at sector %d, %d\n", 
7177   31F4             ; --- START FUNCTION CALL
7178   31F4 FA F3 FF      lea d, [bp + -13] ; $k
7179   31F7 FD 2A         mov d, [d]
7180   31F9 58 01 00      add d, 1
7181   31FC 32            mov bl, [d]
7182   31FD A7 00         mov bh, 0
7183   31FF 38 00 00      mov c, 0
7184   3202 FD AB         swp b
7185   3204 D8            push b
7186   3205 FA F3 FF      lea d, [bp + -13] ; $k
7187   3208 FD 2A         mov d, [d]
7188   320A 58 00 00      add d, 0
7189   320D 32            mov bl, [d]
7190   320E A7 00         mov bh, 0
7191   3210 38 00 00      mov c, 0
7192   3213 FD AB         swp b
7193   3215 D8            push b
7194   3216 FA F5 FF      lea d, [bp + -11] ; $h
7195   3219 2A            mov b, [d]
7196   321A 38 00 00      mov c, 0
7197   321D FD AB         swp b
7198   321F D8            push b
7199   3220 26 37 79      mov b, _s98 ; "%d unit hit on Klingon at sector %d, %d\n"
7200   3223 FD AB         swp b
7201   3225 D8            push b
7202   3226 07 B4 60      call printf
7203   3229 51 06 00      add sp, 6
7204   322C             ; --- END FUNCTION CALL
7205   322C             ; if (k->energy <= 0) { 
7206   322C             _if178_cond:
7207   322C FA F3 FF      lea d, [bp + -13] ; $k
7208   322F FD 2A         mov d, [d]
7209   3231 58 02 00      add d, 2
7210   3234 2A            mov b, [d]
7211   3235 38 00 00      mov c, 0
7212   3238             ; --- START RELATIONAL
7213   3238 D7            push a
7214   3239 11            mov a, b
7215   323A FD 2E 00 00   mov32 cb, $00000000
7215   323E 00 00 
7216   3240 B0            cmp a, b
7217   3241 FD 74         sle ; <= (signed)
7218   3243 E4            pop a
7219   3244             ; --- END RELATIONAL
7220   3244 C0 00 00      cmp b, 0
7221   3247 C6 11 33      je _if178_else
7222   324A             _if178_TRUE:
7223   324A             ; puts("*** Klingon Destroyed ***\n"); 
7224   324A             ; --- START FUNCTION CALL
7225   324A 26 60 79      mov b, _s99 ; "*** Klingon Destroyed ***\n"
7226   324D FD AB         swp b
7227   324F D8            push b
7228   3250 07 C8 69      call puts
7229   3253 51 02 00      add sp, 2
7230   3256             ; --- END FUNCTION CALL
7231   3256             ; klingons--; 
7232   3256 3B 9E 6E      mov d, _klingons ; $klingons
7233   3259 32            mov bl, [d]
7234   325A A7 00         mov bh, 0
7235   325C 38 00 00      mov c, 0
7236   325F FD 7D         dec b
7237   3261 3B 9E 6E      mov d, _klingons ; $klingons
7238   3264 FD 3E         mov [d], bl
7239   3266 FD 77         inc b
7240   3268             ; klingons_left--; 
7241   3268 3B A0 6E      mov d, _klingons_left ; $klingons_left
7242   326B 32            mov bl, [d]
7243   326C A7 00         mov bh, 0
7244   326E 38 00 00      mov c, 0
7245   3271 FD 7D         dec b
7246   3273 3B A0 6E      mov d, _klingons_left ; $klingons_left
7247   3276 FD 3E         mov [d], bl
7248   3278 FD 77         inc b
7249   327A             ; wipe_klingon(k); 
7250   327A             ; --- START FUNCTION CALL
7251   327A FA F3 FF      lea d, [bp + -13] ; $k
7252   327D 2A            mov b, [d]
7253   327E 38 00 00      mov c, 0
7254   3281 FD AB         swp b
7255   3283 D8            push b
7256   3284 07 99 2D      call wipe_klingon
7257   3287 51 02 00      add sp, 2
7258   328A             ; --- END FUNCTION CALL
7259   328A             ; k->energy = 0; 
7260   328A FA F3 FF      lea d, [bp + -13] ; $k
7261   328D FD 2A         mov d, [d]
7262   328F 58 02 00      add d, 2
7263   3292 DA            push d
7264   3293 FD 2E 00 00   mov32 cb, $00000000
7264   3297 00 00 
7265   3299 E7            pop d
7266   329A FD 43         mov [d], b
7267   329C             ; map[quad_y][quad_x] = map[quad_y][quad_x] - 0x100; 
7268   329C 3B F0 6D      mov d, _map_data ; $map
7269   329F D7            push a
7270   32A0 DA            push d
7271   32A1 3B A3 6E      mov d, _quad_y ; $quad_y
7272   32A4 2A            mov b, [d]
7273   32A5 38 00 00      mov c, 0
7274   32A8 E7            pop d
7275   32A9 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
7276   32AD DA            push d
7277   32AE 3B A5 6E      mov d, _quad_x ; $quad_x
7278   32B1 2A            mov b, [d]
7279   32B2 38 00 00      mov c, 0
7280   32B5 E7            pop d
7281   32B6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7282   32BA E4            pop a
7283   32BB DA            push d
7284   32BC 3B F0 6D      mov d, _map_data ; $map
7285   32BF D7            push a
7286   32C0 DA            push d
7287   32C1 3B A3 6E      mov d, _quad_y ; $quad_y
7288   32C4 2A            mov b, [d]
7289   32C5 38 00 00      mov c, 0
7290   32C8 E7            pop d
7291   32C9 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
7292   32CD DA            push d
7293   32CE 3B A5 6E      mov d, _quad_x ; $quad_x
7294   32D1 2A            mov b, [d]
7295   32D2 38 00 00      mov c, 0
7296   32D5 E7            pop d
7297   32D6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7298   32DA E4            pop a
7299   32DB 2A            mov b, [d]
7300   32DC 38 00 00      mov c, 0
7301   32DF             ; --- START TERMS
7302   32DF D7            push a
7303   32E0 11            mov a, b
7304   32E1 FD 2E 00 01   mov32 cb, $00000100
7304   32E5 00 00 
7305   32E7 60            sub a, b
7306   32E8 27            mov b, a
7307   32E9 E4            pop a
7308   32EA             ; --- END TERMS
7309   32EA E7            pop d
7310   32EB FD 43         mov [d], b
7311   32ED             ; if (klingons_left <= 0) 
7312   32ED             _if179_cond:
7313   32ED 3B A0 6E      mov d, _klingons_left ; $klingons_left
7314   32F0 32            mov bl, [d]
7315   32F1 A7 00         mov bh, 0
7316   32F3 38 00 00      mov c, 0
7317   32F6             ; --- START RELATIONAL
7318   32F6 D7            push a
7319   32F7 11            mov a, b
7320   32F8 FD 2E 00 00   mov32 cb, $00000000
7320   32FC 00 00 
7321   32FE B0            cmp a, b
7322   32FF FD 76         sleu ; <= (unsigned)
7323   3301 E4            pop a
7324   3302             ; --- END RELATIONAL
7325   3302 C0 00 00      cmp b, 0
7326   3305 C6 0E 33      je _if179_exit
7327   3308             _if179_TRUE:
7328   3308             ; won_game(); 
7329   3308             ; --- START FUNCTION CALL
7330   3308 07 55 4F      call won_game
7331   330B 0A 0E 33      jmp _if179_exit
7332   330E             _if179_exit:
7333   330E 0A 2C 33      jmp _if178_exit
7334   3311             _if178_else:
7335   3311             ; printf("   (Sensors show %d units remaining.)\n\n", k->energy); 
7336   3311             ; --- START FUNCTION CALL
7337   3311 FA F3 FF      lea d, [bp + -13] ; $k
7338   3314 FD 2A         mov d, [d]
7339   3316 58 02 00      add d, 2
7340   3319 2A            mov b, [d]
7341   331A 38 00 00      mov c, 0
7342   331D FD AB         swp b
7343   331F D8            push b
7344   3320 26 7B 79      mov b, _s100 ; "   (Sensors show %d units remaining.)\n\n"
7345   3323 FD AB         swp b
7346   3325 D8            push b
7347   3326 07 B4 60      call printf
7348   3329 51 04 00      add sp, 4
7349   332C             ; --- END FUNCTION CALL
7350   332C             _if178_exit:
7351   332C             _if175_exit:
7352   332C 0A 2F 33      jmp _if170_exit
7353   332F             _if170_exit:
7354   332F             ; k++; 
7355   332F FA F3 FF      lea d, [bp + -13] ; $k
7356   3332 2A            mov b, [d]
7357   3333 38 00 00      mov c, 0
7358   3336 11            mov a, b
7359   3337 FD 77         inc b
7360   3339 FD 77         inc b
7361   333B FA F3 FF      lea d, [bp + -13] ; $k
7362   333E FD 43         mov [d], b
7363   3340 27            mov b, a
7364   3341             _for169_update:
7365   3341 FA FF FF      lea d, [bp + -1] ; $i
7366   3344 2A            mov b, [d]
7367   3345 38 00 00      mov c, 0
7368   3348 11            mov a, b
7369   3349 FD 77         inc b
7370   334B FA FF FF      lea d, [bp + -1] ; $i
7371   334E FD 43         mov [d], b
7372   3350 27            mov b, a
7373   3351 0A 3F 30      jmp _for169_cond
7374   3354             _for169_exit:
7375   3354             ; klingons_shoot(); 
7376   3354             ; --- START FUNCTION CALL
7377   3354 07 3B 51      call klingons_shoot
7378   3357 F9            leave
7379   3358 09            ret
7380   3359             
7381   3359             photon_torpedoes:
7382   3359 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7383   335C             ; int x3, y3; 
7384   335C 52 02 00      sub sp, 2
7385   335F 52 02 00      sub sp, 2
7386   3362             ; int        c1; 
7387   3362 52 02 00      sub sp, 2
7388   3365             ; int c2, c3, c4; 
7389   3365 52 02 00      sub sp, 2
7390   3368 52 02 00      sub sp, 2
7391   336B 52 02 00      sub sp, 2
7392   336E             ; int        x, y, x1, x2; 
7393   336E 52 02 00      sub sp, 2
7394   3371 52 02 00      sub sp, 2
7395   3374 52 02 00      sub sp, 2
7396   3377 52 02 00      sub sp, 2
7397   337A             ; if (torps <= 0) { 
7398   337A             _if180_cond:
7399   337A 3B A1 6E      mov d, _torps ; $torps
7400   337D 32            mov bl, [d]
7401   337E A7 00         mov bh, 0
7402   3380 38 00 00      mov c, 0
7403   3383             ; --- START RELATIONAL
7404   3383 D7            push a
7405   3384 11            mov a, b
7406   3385 FD 2E 00 00   mov32 cb, $00000000
7406   3389 00 00 
7407   338B B0            cmp a, b
7408   338C FD 76         sleu ; <= (unsigned)
7409   338E E4            pop a
7410   338F             ; --- END RELATIONAL
7411   338F C0 00 00      cmp b, 0
7412   3392 C6 A6 33      je _if180_exit
7413   3395             _if180_TRUE:
7414   3395             ; puts("All photon torpedoes expended"); 
7415   3395             ; --- START FUNCTION CALL
7416   3395 26 A3 79      mov b, _s101 ; "All photon torpedoes expended"
7417   3398 FD AB         swp b
7418   339A D8            push b
7419   339B 07 C8 69      call puts
7420   339E 51 02 00      add sp, 2
7421   33A1             ; --- END FUNCTION CALL
7422   33A1             ; return; 
7423   33A1 F9            leave
7424   33A2 09            ret
7425   33A3 0A A6 33      jmp _if180_exit
7426   33A6             _if180_exit:
7427   33A6             ; if (inoperable(5)) 
7428   33A6             _if181_cond:
7429   33A6             ; --- START FUNCTION CALL
7430   33A6 FD 2E 05 00   mov32 cb, $00000005
7430   33AA 00 00 
7431   33AC DD            push bl
7432   33AD 07 7C 09      call inoperable
7433   33B0 51 01 00      add sp, 1
7434   33B3             ; --- END FUNCTION CALL
7435   33B3 C0 00 00      cmp b, 0
7436   33B6 C6 BE 33      je _if181_exit
7437   33B9             _if181_TRUE:
7438   33B9             ; return; 
7439   33B9 F9            leave
7440   33BA 09            ret
7441   33BB 0A BE 33      jmp _if181_exit
7442   33BE             _if181_exit:
7443   33BE             ; puts("Course (0-9): "); 
7444   33BE             ; --- START FUNCTION CALL
7445   33BE 26 DF 73      mov b, _s63 ; "Course (0-9): "
7446   33C1 FD AB         swp b
7447   33C3 D8            push b
7448   33C4 07 C8 69      call puts
7449   33C7 51 02 00      add sp, 2
7450   33CA             ; --- END FUNCTION CALL
7451   33CA             ; c1 = input_f00(); 
7452   33CA FA FB FF      lea d, [bp + -5] ; $c1
7453   33CD DA            push d
7454   33CE             ; --- START FUNCTION CALL
7455   33CE 07 73 06      call input_f00
7456   33D1 E7            pop d
7457   33D2 FD 43         mov [d], b
7458   33D4             ; if (c1 == 900) 
7459   33D4             _if182_cond:
7460   33D4 FA FB FF      lea d, [bp + -5] ; $c1
7461   33D7 2A            mov b, [d]
7462   33D8 38 00 00      mov c, 0
7463   33DB             ; --- START RELATIONAL
7464   33DB D7            push a
7465   33DC 11            mov a, b
7466   33DD FD 2E 84 03   mov32 cb, $00000384
7466   33E1 00 00 
7467   33E3 B0            cmp a, b
7468   33E4 FD 71         seq ; ==
7469   33E6 E4            pop a
7470   33E7             ; --- END RELATIONAL
7471   33E7 C0 00 00      cmp b, 0
7472   33EA C6 FD 33      je _if182_exit
7473   33ED             _if182_TRUE:
7474   33ED             ; c1 = 100; 
7475   33ED FA FB FF      lea d, [bp + -5] ; $c1
7476   33F0 DA            push d
7477   33F1 FD 2E 64 00   mov32 cb, $00000064
7477   33F5 00 00 
7478   33F7 E7            pop d
7479   33F8 FD 43         mov [d], b
7480   33FA 0A FD 33      jmp _if182_exit
7481   33FD             _if182_exit:
7482   33FD             ; if (c1 < 100 || c1 >= 900) { 
7483   33FD             _if183_cond:
7484   33FD FA FB FF      lea d, [bp + -5] ; $c1
7485   3400 2A            mov b, [d]
7486   3401 38 00 00      mov c, 0
7487   3404             ; --- START RELATIONAL
7488   3404 D7            push a
7489   3405 11            mov a, b
7490   3406 FD 2E 64 00   mov32 cb, $00000064
7490   340A 00 00 
7491   340C B0            cmp a, b
7492   340D FD 73         slt ; < (signed)
7493   340F E4            pop a
7494   3410             ; --- END RELATIONAL
7495   3410             ; --- START LOGICAL OR
7496   3410 D7            push a
7497   3411 11            mov a, b
7498   3412 FA FB FF      lea d, [bp + -5] ; $c1
7499   3415 2A            mov b, [d]
7500   3416 38 00 00      mov c, 0
7501   3419             ; --- START RELATIONAL
7502   3419 D7            push a
7503   341A 11            mov a, b
7504   341B FD 2E 84 03   mov32 cb, $00000384
7504   341F 00 00 
7505   3421 B0            cmp a, b
7506   3422 FD 80         sge ; >=
7507   3424 E4            pop a
7508   3425             ; --- END RELATIONAL
7509   3425 FD A8         sor a, b ; ||
7510   3427 E4            pop a
7511   3428             ; --- END LOGICAL OR
7512   3428 C0 00 00      cmp b, 0
7513   342B C6 49 34      je _if183_exit
7514   342E             _if183_TRUE:
7515   342E             ; printf("Ensign Chekov%s", inc_1); 
7516   342E             ; --- START FUNCTION CALL
7517   342E 3B 3C 6F      mov d, _inc_1 ; $inc_1
7518   3431 2A            mov b, [d]
7519   3432 38 00 00      mov c, 0
7520   3435 FD AB         swp b
7521   3437 D8            push b
7522   3438 26 C1 79      mov b, _s102 ; "Ensign Chekov%s"
7523   343B FD AB         swp b
7524   343D D8            push b
7525   343E 07 B4 60      call printf
7526   3441 51 04 00      add sp, 4
7527   3444             ; --- END FUNCTION CALL
7528   3444             ; return; 
7529   3444 F9            leave
7530   3445 09            ret
7531   3446 0A 49 34      jmp _if183_exit
7532   3449             _if183_exit:
7533   3449             ; energy = energy - 2; 
7534   3449 3B EC 6D      mov d, _energy ; $energy
7535   344C DA            push d
7536   344D 3B EC 6D      mov d, _energy ; $energy
7537   3450 2A            mov b, [d]
7538   3451 38 00 00      mov c, 0
7539   3454             ; --- START TERMS
7540   3454 D7            push a
7541   3455 11            mov a, b
7542   3456 FD 2E 02 00   mov32 cb, $00000002
7542   345A 00 00 
7543   345C 60            sub a, b
7544   345D 27            mov b, a
7545   345E E4            pop a
7546   345F             ; --- END TERMS
7547   345F E7            pop d
7548   3460 FD 43         mov [d], b
7549   3462             ; torps--; 
7550   3462 3B A1 6E      mov d, _torps ; $torps
7551   3465 32            mov bl, [d]
7552   3466 A7 00         mov bh, 0
7553   3468 38 00 00      mov c, 0
7554   346B FD 7D         dec b
7555   346D 3B A1 6E      mov d, _torps ; $torps
7556   3470 FD 3E         mov [d], bl
7557   3472 FD 77         inc b
7558   3474             ; c2 = FROM_FIXED00(c1);	/* Integer part */ 
7559   3474 FA F9 FF      lea d, [bp + -7] ; $c2
7560   3477 DA            push d
7561   3478             ; --- START FUNCTION CALL
7562   3478 FA FB FF      lea d, [bp + -5] ; $c1
7563   347B 2A            mov b, [d]
7564   347C 38 00 00      mov c, 0
7565   347F FD AB         swp b
7566   3481 D8            push b
7567   3482 07 DC 04      call FROM_FIXED00
7568   3485 51 02 00      add sp, 2
7569   3488             ; --- END FUNCTION CALL
7570   3488 E7            pop d
7571   3489 FD 43         mov [d], b
7572   348B             ; c3 = c2 + 1;		/* Next integer part */ 
7573   348B FA F7 FF      lea d, [bp + -9] ; $c3
7574   348E DA            push d
7575   348F FA F9 FF      lea d, [bp + -7] ; $c2
7576   3492 2A            mov b, [d]
7577   3493 38 00 00      mov c, 0
7578   3496             ; --- START TERMS
7579   3496 D7            push a
7580   3497 11            mov a, b
7581   3498 FD 2E 01 00   mov32 cb, $00000001
7581   349C 00 00 
7582   349E 56            add b, a
7583   349F E4            pop a
7584   34A0             ; --- END TERMS
7585   34A0 E7            pop d
7586   34A1 FD 43         mov [d], b
7587   34A3             ; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
7588   34A3 FA F5 FF      lea d, [bp + -11] ; $c4
7589   34A6 DA            push d
7590   34A7 FA FB FF      lea d, [bp + -5] ; $c1
7591   34AA 2A            mov b, [d]
7592   34AB 38 00 00      mov c, 0
7593   34AE             ; --- START TERMS
7594   34AE D7            push a
7595   34AF 11            mov a, b
7596   34B0             ; --- START FUNCTION CALL
7597   34B0 FA F9 FF      lea d, [bp + -7] ; $c2
7598   34B3 2A            mov b, [d]
7599   34B4 38 00 00      mov c, 0
7600   34B7 FD AB         swp b
7601   34B9 D8            push b
7602   34BA 07 8B 04      call TO_FIXED00
7603   34BD 51 02 00      add sp, 2
7604   34C0             ; --- END FUNCTION CALL
7605   34C0 60            sub a, b
7606   34C1 27            mov b, a
7607   34C2 E4            pop a
7608   34C3             ; --- END TERMS
7609   34C3 E7            pop d
7610   34C4 FD 43         mov [d], b
7611   34C6             ; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
7612   34C6 FA EF FF      lea d, [bp + -17] ; $x1
7613   34C9 DA            push d
7614   34CA FD 2E 64 00   mov32 cb, $00000064
7614   34CE 00 00 
7615   34D0             ; --- START FACTORS
7616   34D0 D7            push a
7617   34D1 FD D8         push g
7618   34D3 11            mov a, b
7619   34D4 FD 7A         mov g, c
7620   34D6 3B CD 6D      mov d, _c_data ; $c
7621   34D9 D7            push a
7622   34DA DA            push d
7623   34DB FD 2E 01 00   mov32 cb, $00000001
7623   34DF 00 00 
7624   34E1 E7            pop d
7625   34E2 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7626   34E6 DA            push d
7627   34E7 FA F9 FF      lea d, [bp + -7] ; $c2
7628   34EA 2A            mov b, [d]
7629   34EB 38 00 00      mov c, 0
7630   34EE E7            pop d
7631   34EF 5A            add d, b
7632   34F0 E4            pop a
7633   34F1 32            mov bl, [d]
7634   34F2 A7 00         mov bh, 0
7635   34F4 38 00 00      mov c, 0
7636   34F7 D7            push a     ; save left operand
7637   34F8 8E            xor a, b   ; xor sign bits
7638   34F9 FD AA         swp a      ; swap bytes
7639   34FB 83            mov cl, al ; save result of xor into 'dl'
7640   34FC E4            pop a      ; restore left side operator
7641   34FD DF            push cl    ; save result of xor above
7642   34FE FD AA         swp a  
7643   3500 93 80         test al, $80  
7644   3502 FD AA         swp a  
7645   3504 C6 09 35      jz skip_invert_a_186  
7646   3507 FD 95         neg a 
7647   3509             skip_invert_a_186:   
7648   3509 FD AB         swp b
7649   350B FD 93 80      test bl, $80  
7650   350E FD AB         swp b
7651   3510 C6 15 35      jz skip_invert_b_186  
7652   3513 FD 97         neg b 
7653   3515             skip_invert_b_186:   
7654   3515 AC            mul a, b ; *
7655   3516 FD 78         mov g, a
7656   3518 11            mov a, b
7657   3519 EA            pop bl
7658   351A FD 93 80      test bl, $80
7659   351D C6 2A 35      jz _same_signs_186
7660   3520 2F            mov bl, al
7661   3521 95            not a
7662   3522 FD 97         neg b
7663   3524 5B 00 00      adc a, 0
7664   3527 FD 78         mov g, a
7665   3529 11            mov a, b
7666   352A             _same_signs_186:
7667   352A FD 38         mov c, g
7668   352C 27            mov b, a
7669   352D FD F1         pop g
7670   352F E4            pop a
7671   3530             ; --- END FACTORS
7672   3530             ; --- START TERMS
7673   3530 D7            push a
7674   3531 FD D8         push g
7675   3533 11            mov a, b
7676   3534 FD 7A         mov g, c
7677   3536 3B CD 6D      mov d, _c_data ; $c
7678   3539 D7            push a
7679   353A DA            push d
7680   353B FD 2E 01 00   mov32 cb, $00000001
7680   353F 00 00 
7681   3541 E7            pop d
7682   3542 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7683   3546 DA            push d
7684   3547 FA F7 FF      lea d, [bp + -9] ; $c3
7685   354A 2A            mov b, [d]
7686   354B 38 00 00      mov c, 0
7687   354E E7            pop d
7688   354F 5A            add d, b
7689   3550 E4            pop a
7690   3551 32            mov bl, [d]
7691   3552 A7 00         mov bh, 0
7692   3554 38 00 00      mov c, 0
7693   3557             ; --- START TERMS
7694   3557 D7            push a
7695   3558 11            mov a, b
7696   3559 3B CD 6D      mov d, _c_data ; $c
7697   355C D7            push a
7698   355D DA            push d
7699   355E FD 2E 01 00   mov32 cb, $00000001
7699   3562 00 00 
7700   3564 E7            pop d
7701   3565 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7702   3569 DA            push d
7703   356A FA F9 FF      lea d, [bp + -7] ; $c2
7704   356D 2A            mov b, [d]
7705   356E 38 00 00      mov c, 0
7706   3571 E7            pop d
7707   3572 5A            add d, b
7708   3573 E4            pop a
7709   3574 32            mov bl, [d]
7710   3575 A7 00         mov bh, 0
7711   3577 38 00 00      mov c, 0
7712   357A 60            sub a, b
7713   357B 27            mov b, a
7714   357C E4            pop a
7715   357D             ; --- END TERMS
7716   357D             ; --- START FACTORS
7717   357D D7            push a
7718   357E FD D8         push g
7719   3580 11            mov a, b
7720   3581 FD 7A         mov g, c
7721   3583 FA F5 FF      lea d, [bp + -11] ; $c4
7722   3586 2A            mov b, [d]
7723   3587 38 00 00      mov c, 0
7724   358A D7            push a     ; save left operand
7725   358B 8E            xor a, b   ; xor sign bits
7726   358C FD AA         swp a      ; swap bytes
7727   358E 83            mov cl, al ; save result of xor into 'dl'
7728   358F E4            pop a      ; restore left side operator
7729   3590 DF            push cl    ; save result of xor above
7730   3591 FD AA         swp a  
7731   3593 93 80         test al, $80  
7732   3595 FD AA         swp a  
7733   3597 C6 9C 35      jz skip_invert_a_187  
7734   359A FD 95         neg a 
7735   359C             skip_invert_a_187:   
7736   359C FD AB         swp b
7737   359E FD 93 80      test bl, $80  
7738   35A1 FD AB         swp b
7739   35A3 C6 A8 35      jz skip_invert_b_187  
7740   35A6 FD 97         neg b 
7741   35A8             skip_invert_b_187:   
7742   35A8 AC            mul a, b ; *
7743   35A9 FD 78         mov g, a
7744   35AB 11            mov a, b
7745   35AC EA            pop bl
7746   35AD FD 93 80      test bl, $80
7747   35B0 C6 BD 35      jz _same_signs_187
7748   35B3 2F            mov bl, al
7749   35B4 95            not a
7750   35B5 FD 97         neg b
7751   35B7 5B 00 00      adc a, 0
7752   35BA FD 78         mov g, a
7753   35BC 11            mov a, b
7754   35BD             _same_signs_187:
7755   35BD FD 38         mov c, g
7756   35BF 27            mov b, a
7757   35C0 FD F1         pop g
7758   35C2 E4            pop a
7759   35C3             ; --- END FACTORS
7760   35C3 FD 15         add32 cb, ga
7761   35C5 FD F1         pop g
7762   35C7 E4            pop a
7763   35C8             ; --- END TERMS
7764   35C8 E7            pop d
7765   35C9 FD 43         mov [d], b
7766   35CB             ; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
7767   35CB FA ED FF      lea d, [bp + -19] ; $x2
7768   35CE DA            push d
7769   35CF FD 2E 64 00   mov32 cb, $00000064
7769   35D3 00 00 
7770   35D5             ; --- START FACTORS
7771   35D5 D7            push a
7772   35D6 FD D8         push g
7773   35D8 11            mov a, b
7774   35D9 FD 7A         mov g, c
7775   35DB 3B CD 6D      mov d, _c_data ; $c
7776   35DE D7            push a
7777   35DF DA            push d
7778   35E0 FD 2E 02 00   mov32 cb, $00000002
7778   35E4 00 00 
7779   35E6 E7            pop d
7780   35E7 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7781   35EB DA            push d
7782   35EC FA F9 FF      lea d, [bp + -7] ; $c2
7783   35EF 2A            mov b, [d]
7784   35F0 38 00 00      mov c, 0
7785   35F3 E7            pop d
7786   35F4 5A            add d, b
7787   35F5 E4            pop a
7788   35F6 32            mov bl, [d]
7789   35F7 A7 00         mov bh, 0
7790   35F9 38 00 00      mov c, 0
7791   35FC D7            push a     ; save left operand
7792   35FD 8E            xor a, b   ; xor sign bits
7793   35FE FD AA         swp a      ; swap bytes
7794   3600 83            mov cl, al ; save result of xor into 'dl'
7795   3601 E4            pop a      ; restore left side operator
7796   3602 DF            push cl    ; save result of xor above
7797   3603 FD AA         swp a  
7798   3605 93 80         test al, $80  
7799   3607 FD AA         swp a  
7800   3609 C6 0E 36      jz skip_invert_a_190  
7801   360C FD 95         neg a 
7802   360E             skip_invert_a_190:   
7803   360E FD AB         swp b
7804   3610 FD 93 80      test bl, $80  
7805   3613 FD AB         swp b
7806   3615 C6 1A 36      jz skip_invert_b_190  
7807   3618 FD 97         neg b 
7808   361A             skip_invert_b_190:   
7809   361A AC            mul a, b ; *
7810   361B FD 78         mov g, a
7811   361D 11            mov a, b
7812   361E EA            pop bl
7813   361F FD 93 80      test bl, $80
7814   3622 C6 2F 36      jz _same_signs_190
7815   3625 2F            mov bl, al
7816   3626 95            not a
7817   3627 FD 97         neg b
7818   3629 5B 00 00      adc a, 0
7819   362C FD 78         mov g, a
7820   362E 11            mov a, b
7821   362F             _same_signs_190:
7822   362F FD 38         mov c, g
7823   3631 27            mov b, a
7824   3632 FD F1         pop g
7825   3634 E4            pop a
7826   3635             ; --- END FACTORS
7827   3635             ; --- START TERMS
7828   3635 D7            push a
7829   3636 FD D8         push g
7830   3638 11            mov a, b
7831   3639 FD 7A         mov g, c
7832   363B 3B CD 6D      mov d, _c_data ; $c
7833   363E D7            push a
7834   363F DA            push d
7835   3640 FD 2E 02 00   mov32 cb, $00000002
7835   3644 00 00 
7836   3646 E7            pop d
7837   3647 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7838   364B DA            push d
7839   364C FA F7 FF      lea d, [bp + -9] ; $c3
7840   364F 2A            mov b, [d]
7841   3650 38 00 00      mov c, 0
7842   3653 E7            pop d
7843   3654 5A            add d, b
7844   3655 E4            pop a
7845   3656 32            mov bl, [d]
7846   3657 A7 00         mov bh, 0
7847   3659 38 00 00      mov c, 0
7848   365C             ; --- START TERMS
7849   365C D7            push a
7850   365D 11            mov a, b
7851   365E 3B CD 6D      mov d, _c_data ; $c
7852   3661 D7            push a
7853   3662 DA            push d
7854   3663 FD 2E 02 00   mov32 cb, $00000002
7854   3667 00 00 
7855   3669 E7            pop d
7856   366A FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7857   366E DA            push d
7858   366F FA F9 FF      lea d, [bp + -7] ; $c2
7859   3672 2A            mov b, [d]
7860   3673 38 00 00      mov c, 0
7861   3676 E7            pop d
7862   3677 5A            add d, b
7863   3678 E4            pop a
7864   3679 32            mov bl, [d]
7865   367A A7 00         mov bh, 0
7866   367C 38 00 00      mov c, 0
7867   367F 60            sub a, b
7868   3680 27            mov b, a
7869   3681 E4            pop a
7870   3682             ; --- END TERMS
7871   3682             ; --- START FACTORS
7872   3682 D7            push a
7873   3683 FD D8         push g
7874   3685 11            mov a, b
7875   3686 FD 7A         mov g, c
7876   3688 FA F5 FF      lea d, [bp + -11] ; $c4
7877   368B 2A            mov b, [d]
7878   368C 38 00 00      mov c, 0
7879   368F D7            push a     ; save left operand
7880   3690 8E            xor a, b   ; xor sign bits
7881   3691 FD AA         swp a      ; swap bytes
7882   3693 83            mov cl, al ; save result of xor into 'dl'
7883   3694 E4            pop a      ; restore left side operator
7884   3695 DF            push cl    ; save result of xor above
7885   3696 FD AA         swp a  
7886   3698 93 80         test al, $80  
7887   369A FD AA         swp a  
7888   369C C6 A1 36      jz skip_invert_a_191  
7889   369F FD 95         neg a 
7890   36A1             skip_invert_a_191:   
7891   36A1 FD AB         swp b
7892   36A3 FD 93 80      test bl, $80  
7893   36A6 FD AB         swp b
7894   36A8 C6 AD 36      jz skip_invert_b_191  
7895   36AB FD 97         neg b 
7896   36AD             skip_invert_b_191:   
7897   36AD AC            mul a, b ; *
7898   36AE FD 78         mov g, a
7899   36B0 11            mov a, b
7900   36B1 EA            pop bl
7901   36B2 FD 93 80      test bl, $80
7902   36B5 C6 C2 36      jz _same_signs_191
7903   36B8 2F            mov bl, al
7904   36B9 95            not a
7905   36BA FD 97         neg b
7906   36BC 5B 00 00      adc a, 0
7907   36BF FD 78         mov g, a
7908   36C1 11            mov a, b
7909   36C2             _same_signs_191:
7910   36C2 FD 38         mov c, g
7911   36C4 27            mov b, a
7912   36C5 FD F1         pop g
7913   36C7 E4            pop a
7914   36C8             ; --- END FACTORS
7915   36C8 FD 15         add32 cb, ga
7916   36CA FD F1         pop g
7917   36CC E4            pop a
7918   36CD             ; --- END TERMS
7919   36CD E7            pop d
7920   36CE FD 43         mov [d], b
7921   36D0             ; x = ship_y + x1; 
7922   36D0 FA F3 FF      lea d, [bp + -13] ; $x
7923   36D3 DA            push d
7924   36D4 3B C2 6E      mov d, _ship_y ; $ship_y
7925   36D7 2A            mov b, [d]
7926   36D8 38 00 00      mov c, 0
7927   36DB             ; --- START TERMS
7928   36DB D7            push a
7929   36DC 11            mov a, b
7930   36DD FA EF FF      lea d, [bp + -17] ; $x1
7931   36E0 2A            mov b, [d]
7932   36E1 38 00 00      mov c, 0
7933   36E4 56            add b, a
7934   36E5 E4            pop a
7935   36E6             ; --- END TERMS
7936   36E6 E7            pop d
7937   36E7 FD 43         mov [d], b
7938   36E9             ; y = ship_x + x2; 
7939   36E9 FA F1 FF      lea d, [bp + -15] ; $y
7940   36EC DA            push d
7941   36ED 3B C4 6E      mov d, _ship_x ; $ship_x
7942   36F0 2A            mov b, [d]
7943   36F1 38 00 00      mov c, 0
7944   36F4             ; --- START TERMS
7945   36F4 D7            push a
7946   36F5 11            mov a, b
7947   36F6 FA ED FF      lea d, [bp + -19] ; $x2
7948   36F9 2A            mov b, [d]
7949   36FA 38 00 00      mov c, 0
7950   36FD 56            add b, a
7951   36FE E4            pop a
7952   36FF             ; --- END TERMS
7953   36FF E7            pop d
7954   3700 FD 43         mov [d], b
7955   3702             ; x3 = FROM_FIXED00(x); 
7956   3702 FA FF FF      lea d, [bp + -1] ; $x3
7957   3705 DA            push d
7958   3706             ; --- START FUNCTION CALL
7959   3706 FA F3 FF      lea d, [bp + -13] ; $x
7960   3709 2A            mov b, [d]
7961   370A 38 00 00      mov c, 0
7962   370D FD AB         swp b
7963   370F D8            push b
7964   3710 07 DC 04      call FROM_FIXED00
7965   3713 51 02 00      add sp, 2
7966   3716             ; --- END FUNCTION CALL
7967   3716 E7            pop d
7968   3717 FD 43         mov [d], b
7969   3719             ; y3 = FROM_FIXED00(y); 
7970   3719 FA FD FF      lea d, [bp + -3] ; $y3
7971   371C DA            push d
7972   371D             ; --- START FUNCTION CALL
7973   371D FA F1 FF      lea d, [bp + -15] ; $y
7974   3720 2A            mov b, [d]
7975   3721 38 00 00      mov c, 0
7976   3724 FD AB         swp b
7977   3726 D8            push b
7978   3727 07 DC 04      call FROM_FIXED00
7979   372A 51 02 00      add sp, 2
7980   372D             ; --- END FUNCTION CALL
7981   372D E7            pop d
7982   372E FD 43         mov [d], b
7983   3730             ; puts("Torpedo Track:"); 
7984   3730             ; --- START FUNCTION CALL
7985   3730 26 D1 79      mov b, _s103 ; "Torpedo Track:"
7986   3733 FD AB         swp b
7987   3735 D8            push b
7988   3736 07 C8 69      call puts
7989   3739 51 02 00      add sp, 2
7990   373C             ; --- END FUNCTION CALL
7991   373C             ; while (x3 >= 1 && x3 <= 8 && y3 >= 1 && y3 <= 8) { 
7992   373C             _while192_cond:
7993   373C FA FF FF      lea d, [bp + -1] ; $x3
7994   373F 2A            mov b, [d]
7995   3740 38 00 00      mov c, 0
7996   3743             ; --- START RELATIONAL
7997   3743 D7            push a
7998   3744 11            mov a, b
7999   3745 FD 2E 01 00   mov32 cb, $00000001
7999   3749 00 00 
8000   374B B0            cmp a, b
8001   374C FD 80         sge ; >=
8002   374E E4            pop a
8003   374F             ; --- END RELATIONAL
8004   374F             ; --- START LOGICAL AND
8005   374F D7            push a
8006   3750 11            mov a, b
8007   3751 FA FF FF      lea d, [bp + -1] ; $x3
8008   3754 2A            mov b, [d]
8009   3755 38 00 00      mov c, 0
8010   3758             ; --- START RELATIONAL
8011   3758 D7            push a
8012   3759 11            mov a, b
8013   375A FD 2E 08 00   mov32 cb, $00000008
8013   375E 00 00 
8014   3760 B0            cmp a, b
8015   3761 FD 74         sle ; <= (signed)
8016   3763 E4            pop a
8017   3764             ; --- END RELATIONAL
8018   3764 FD A7         sand a, b
8019   3766 11            mov a, b
8020   3767 FA FD FF      lea d, [bp + -3] ; $y3
8021   376A 2A            mov b, [d]
8022   376B 38 00 00      mov c, 0
8023   376E             ; --- START RELATIONAL
8024   376E D7            push a
8025   376F 11            mov a, b
8026   3770 FD 2E 01 00   mov32 cb, $00000001
8026   3774 00 00 
8027   3776 B0            cmp a, b
8028   3777 FD 80         sge ; >=
8029   3779 E4            pop a
8030   377A             ; --- END RELATIONAL
8031   377A FD A7         sand a, b
8032   377C 11            mov a, b
8033   377D FA FD FF      lea d, [bp + -3] ; $y3
8034   3780 2A            mov b, [d]
8035   3781 38 00 00      mov c, 0
8036   3784             ; --- START RELATIONAL
8037   3784 D7            push a
8038   3785 11            mov a, b
8039   3786 FD 2E 08 00   mov32 cb, $00000008
8039   378A 00 00 
8040   378C B0            cmp a, b
8041   378D FD 74         sle ; <= (signed)
8042   378F E4            pop a
8043   3790             ; --- END RELATIONAL
8044   3790 FD A7         sand a, b
8045   3792 E4            pop a
8046   3793             ; --- END LOGICAL AND
8047   3793 C0 00 00      cmp b, 0
8048   3796 C6 AF 38      je _while192_exit
8049   3799             _while192_block:
8050   3799             ; unsigned char        p; 
8051   3799 52 01 00      sub sp, 1
8052   379C             ; printf("    %d, %d\n", x3, y3); 
8053   379C             ; --- START FUNCTION CALL
8054   379C FA FD FF      lea d, [bp + -3] ; $y3
8055   379F 2A            mov b, [d]
8056   37A0 38 00 00      mov c, 0
8057   37A3 FD AB         swp b
8058   37A5 D8            push b
8059   37A6 FA FF FF      lea d, [bp + -1] ; $x3
8060   37A9 2A            mov b, [d]
8061   37AA 38 00 00      mov c, 0
8062   37AD FD AB         swp b
8063   37AF D8            push b
8064   37B0 26 E0 79      mov b, _s104 ; "    %d, %d\n"
8065   37B3 FD AB         swp b
8066   37B5 D8            push b
8067   37B6 07 B4 60      call printf
8068   37B9 51 06 00      add sp, 6
8069   37BC             ; --- END FUNCTION CALL
8070   37BC             ; p = quad[x3+-1][y3+-1]; 
8071   37BC FA EC FF      lea d, [bp + -20] ; $p
8072   37BF DA            push d
8073   37C0 3B C8 6E      mov d, _quad_data ; $quad
8074   37C3 D7            push a
8075   37C4 DA            push d
8076   37C5 FA FF FF      lea d, [bp + -1] ; $x3
8077   37C8 2A            mov b, [d]
8078   37C9 38 00 00      mov c, 0
8079   37CC             ; --- START TERMS
8080   37CC D7            push a
8081   37CD 11            mov a, b
8082   37CE FD 2E FF FF   mov32 cb, $ffffffff
8082   37D2 FF FF 
8083   37D4 56            add b, a
8084   37D5 E4            pop a
8085   37D6             ; --- END TERMS
8086   37D6 E7            pop d
8087   37D7 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8088   37DB DA            push d
8089   37DC FA FD FF      lea d, [bp + -3] ; $y3
8090   37DF 2A            mov b, [d]
8091   37E0 38 00 00      mov c, 0
8092   37E3             ; --- START TERMS
8093   37E3 D7            push a
8094   37E4 11            mov a, b
8095   37E5 FD 2E FF FF   mov32 cb, $ffffffff
8095   37E9 FF FF 
8096   37EB 56            add b, a
8097   37EC E4            pop a
8098   37ED             ; --- END TERMS
8099   37ED E7            pop d
8100   37EE 5A            add d, b
8101   37EF E4            pop a
8102   37F0 32            mov bl, [d]
8103   37F1 A7 00         mov bh, 0
8104   37F3 38 00 00      mov c, 0
8105   37F6 E7            pop d
8106   37F7 FD 3E         mov [d], bl
8107   37F9             ; if (p != 		0        && p != 		4      ) { 
8108   37F9             _if193_cond:
8109   37F9 FA EC FF      lea d, [bp + -20] ; $p
8110   37FC 32            mov bl, [d]
8111   37FD A7 00         mov bh, 0
8112   37FF 38 00 00      mov c, 0
8113   3802             ; --- START RELATIONAL
8114   3802 D7            push a
8115   3803 11            mov a, b
8116   3804 FD 2E 00 00   mov32 cb, $00000000
8116   3808 00 00 
8117   380A B0            cmp a, b
8118   380B FD 72         sneq ; !=
8119   380D E4            pop a
8120   380E             ; --- END RELATIONAL
8121   380E             ; --- START LOGICAL AND
8122   380E D7            push a
8123   380F 11            mov a, b
8124   3810 FA EC FF      lea d, [bp + -20] ; $p
8125   3813 32            mov bl, [d]
8126   3814 A7 00         mov bh, 0
8127   3816 38 00 00      mov c, 0
8128   3819             ; --- START RELATIONAL
8129   3819 D7            push a
8130   381A 11            mov a, b
8131   381B FD 2E 04 00   mov32 cb, $00000004
8131   381F 00 00 
8132   3821 B0            cmp a, b
8133   3822 FD 72         sneq ; !=
8134   3824 E4            pop a
8135   3825             ; --- END RELATIONAL
8136   3825 FD A7         sand a, b
8137   3827 E4            pop a
8138   3828             ; --- END LOGICAL AND
8139   3828 C0 00 00      cmp b, 0
8140   382B C6 4C 38      je _if193_exit
8141   382E             _if193_TRUE:
8142   382E             ; torpedo_hit(x3, y3); 
8143   382E             ; --- START FUNCTION CALL
8144   382E FA FD FF      lea d, [bp + -3] ; $y3
8145   3831 2A            mov b, [d]
8146   3832 38 00 00      mov c, 0
8147   3835 DD            push bl
8148   3836 FA FF FF      lea d, [bp + -1] ; $x3
8149   3839 2A            mov b, [d]
8150   383A 38 00 00      mov c, 0
8151   383D DD            push bl
8152   383E 07 C0 38      call torpedo_hit
8153   3841 51 02 00      add sp, 2
8154   3844             ; --- END FUNCTION CALL
8155   3844             ; klingons_shoot(); 
8156   3844             ; --- START FUNCTION CALL
8157   3844 07 3B 51      call klingons_shoot
8158   3847             ; return; 
8159   3847 F9            leave
8160   3848 09            ret
8161   3849 0A 4C 38      jmp _if193_exit
8162   384C             _if193_exit:
8163   384C             ; x = x + x1; 
8164   384C FA F3 FF      lea d, [bp + -13] ; $x
8165   384F DA            push d
8166   3850 FA F3 FF      lea d, [bp + -13] ; $x
8167   3853 2A            mov b, [d]
8168   3854 38 00 00      mov c, 0
8169   3857             ; --- START TERMS
8170   3857 D7            push a
8171   3858 11            mov a, b
8172   3859 FA EF FF      lea d, [bp + -17] ; $x1
8173   385C 2A            mov b, [d]
8174   385D 38 00 00      mov c, 0
8175   3860 56            add b, a
8176   3861 E4            pop a
8177   3862             ; --- END TERMS
8178   3862 E7            pop d
8179   3863 FD 43         mov [d], b
8180   3865             ; y = y + x2; 
8181   3865 FA F1 FF      lea d, [bp + -15] ; $y
8182   3868 DA            push d
8183   3869 FA F1 FF      lea d, [bp + -15] ; $y
8184   386C 2A            mov b, [d]
8185   386D 38 00 00      mov c, 0
8186   3870             ; --- START TERMS
8187   3870 D7            push a
8188   3871 11            mov a, b
8189   3872 FA ED FF      lea d, [bp + -19] ; $x2
8190   3875 2A            mov b, [d]
8191   3876 38 00 00      mov c, 0
8192   3879 56            add b, a
8193   387A E4            pop a
8194   387B             ; --- END TERMS
8195   387B E7            pop d
8196   387C FD 43         mov [d], b
8197   387E             ; x3 = FROM_FIXED00(x); 
8198   387E FA FF FF      lea d, [bp + -1] ; $x3
8199   3881 DA            push d
8200   3882             ; --- START FUNCTION CALL
8201   3882 FA F3 FF      lea d, [bp + -13] ; $x
8202   3885 2A            mov b, [d]
8203   3886 38 00 00      mov c, 0
8204   3889 FD AB         swp b
8205   388B D8            push b
8206   388C 07 DC 04      call FROM_FIXED00
8207   388F 51 02 00      add sp, 2
8208   3892             ; --- END FUNCTION CALL
8209   3892 E7            pop d
8210   3893 FD 43         mov [d], b
8211   3895             ; y3 = FROM_FIXED00(y); 
8212   3895 FA FD FF      lea d, [bp + -3] ; $y3
8213   3898 DA            push d
8214   3899             ; --- START FUNCTION CALL
8215   3899 FA F1 FF      lea d, [bp + -15] ; $y
8216   389C 2A            mov b, [d]
8217   389D 38 00 00      mov c, 0
8218   38A0 FD AB         swp b
8219   38A2 D8            push b
8220   38A3 07 DC 04      call FROM_FIXED00
8221   38A6 51 02 00      add sp, 2
8222   38A9             ; --- END FUNCTION CALL
8223   38A9 E7            pop d
8224   38AA FD 43         mov [d], b
8225   38AC 0A 3C 37      jmp _while192_cond
8226   38AF             _while192_exit:
8227   38AF             ; puts("Torpedo Missed\n"); 
8228   38AF             ; --- START FUNCTION CALL
8229   38AF 26 EC 79      mov b, _s105 ; "Torpedo Missed\n"
8230   38B2 FD AB         swp b
8231   38B4 D8            push b
8232   38B5 07 C8 69      call puts
8233   38B8 51 02 00      add sp, 2
8234   38BB             ; --- END FUNCTION CALL
8235   38BB             ; klingons_shoot(); 
8236   38BB             ; --- START FUNCTION CALL
8237   38BB 07 3B 51      call klingons_shoot
8238   38BE F9            leave
8239   38BF 09            ret
8240   38C0             
8241   38C0             torpedo_hit:
8242   38C0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8243   38C3             ; int i; 
8244   38C3 52 02 00      sub sp, 2
8245   38C6             ; struct klingon *k; 
8246   38C6 52 02 00      sub sp, 2
8247   38C9             ; switch(quad[yp+-1][xp+-1]) { 
8248   38C9             _switch194_expr:
8249   38C9 3B C8 6E      mov d, _quad_data ; $quad
8250   38CC D7            push a
8251   38CD DA            push d
8252   38CE FA 05 00      lea d, [bp + 5] ; $yp
8253   38D1 32            mov bl, [d]
8254   38D2 A7 00         mov bh, 0
8255   38D4 38 00 00      mov c, 0
8256   38D7             ; --- START TERMS
8257   38D7 D7            push a
8258   38D8 11            mov a, b
8259   38D9 FD 2E FF FF   mov32 cb, $ffffffff
8259   38DD FF FF 
8260   38DF 56            add b, a
8261   38E0 E4            pop a
8262   38E1             ; --- END TERMS
8263   38E1 E7            pop d
8264   38E2 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8265   38E6 DA            push d
8266   38E7 FA 06 00      lea d, [bp + 6] ; $xp
8267   38EA 32            mov bl, [d]
8268   38EB A7 00         mov bh, 0
8269   38ED 38 00 00      mov c, 0
8270   38F0             ; --- START TERMS
8271   38F0 D7            push a
8272   38F1 11            mov a, b
8273   38F2 FD 2E FF FF   mov32 cb, $ffffffff
8273   38F6 FF FF 
8274   38F8 56            add b, a
8275   38F9 E4            pop a
8276   38FA             ; --- END TERMS
8277   38FA E7            pop d
8278   38FB 5A            add d, b
8279   38FC E4            pop a
8280   38FD 32            mov bl, [d]
8281   38FE A7 00         mov bh, 0
8282   3900 38 00 00      mov c, 0
8283   3903             _switch194_comparisons:
8284   3903 C0 01 00      cmp b, 1
8285   3906 C6 18 39      je _switch194_case0
8286   3909 C0 03 00      cmp b, 3
8287   390C C6 3E 39      je _switch194_case1
8288   390F C0 02 00      cmp b, 2
8289   3912 C6 96 3A      je _switch194_case2
8290   3915 0A BE 3B      jmp _switch194_exit
8291   3918             _switch194_case0:
8292   3918             ; printf("Star at %d, %d absorbed torpedo energy.\n\n", yp, xp); 
8293   3918             ; --- START FUNCTION CALL
8294   3918 FA 06 00      lea d, [bp + 6] ; $xp
8295   391B 32            mov bl, [d]
8296   391C A7 00         mov bh, 0
8297   391E 38 00 00      mov c, 0
8298   3921 FD AB         swp b
8299   3923 D8            push b
8300   3924 FA 05 00      lea d, [bp + 5] ; $yp
8301   3927 32            mov bl, [d]
8302   3928 A7 00         mov bh, 0
8303   392A 38 00 00      mov c, 0
8304   392D FD AB         swp b
8305   392F D8            push b
8306   3930 26 FC 79      mov b, _s106 ; "Star at %d, %d absorbed torpedo energy.\n\n"
8307   3933 FD AB         swp b
8308   3935 D8            push b
8309   3936 07 B4 60      call printf
8310   3939 51 04 00      add sp, 4
8311   393C             ; --- END FUNCTION CALL
8312   393C             ; return; 
8313   393C F9            leave
8314   393D 09            ret
8315   393E             _switch194_case1:
8316   393E             ; puts("*** Klingon Destroyed ***\n"); 
8317   393E             ; --- START FUNCTION CALL
8318   393E 26 60 79      mov b, _s99 ; "*** Klingon Destroyed ***\n"
8319   3941 FD AB         swp b
8320   3943 D8            push b
8321   3944 07 C8 69      call puts
8322   3947 51 02 00      add sp, 2
8323   394A             ; --- END FUNCTION CALL
8324   394A             ; klingons--; 
8325   394A 3B 9E 6E      mov d, _klingons ; $klingons
8326   394D 32            mov bl, [d]
8327   394E A7 00         mov bh, 0
8328   3950 38 00 00      mov c, 0
8329   3953 FD 7D         dec b
8330   3955 3B 9E 6E      mov d, _klingons ; $klingons
8331   3958 FD 3E         mov [d], bl
8332   395A FD 77         inc b
8333   395C             ; klingons_left--; 
8334   395C 3B A0 6E      mov d, _klingons_left ; $klingons_left
8335   395F 32            mov bl, [d]
8336   3960 A7 00         mov bh, 0
8337   3962 38 00 00      mov c, 0
8338   3965 FD 7D         dec b
8339   3967 3B A0 6E      mov d, _klingons_left ; $klingons_left
8340   396A FD 3E         mov [d], bl
8341   396C FD 77         inc b
8342   396E             ; if (klingons_left <= 0) 
8343   396E             _if195_cond:
8344   396E 3B A0 6E      mov d, _klingons_left ; $klingons_left
8345   3971 32            mov bl, [d]
8346   3972 A7 00         mov bh, 0
8347   3974 38 00 00      mov c, 0
8348   3977             ; --- START RELATIONAL
8349   3977 D7            push a
8350   3978 11            mov a, b
8351   3979 FD 2E 00 00   mov32 cb, $00000000
8351   397D 00 00 
8352   397F B0            cmp a, b
8353   3980 FD 76         sleu ; <= (unsigned)
8354   3982 E4            pop a
8355   3983             ; --- END RELATIONAL
8356   3983 C0 00 00      cmp b, 0
8357   3986 C6 8F 39      je _if195_exit
8358   3989             _if195_TRUE:
8359   3989             ; won_game(); 
8360   3989             ; --- START FUNCTION CALL
8361   3989 07 55 4F      call won_game
8362   398C 0A 8F 39      jmp _if195_exit
8363   398F             _if195_exit:
8364   398F             ; k = kdata; 
8365   398F FA FD FF      lea d, [bp + -3] ; $k
8366   3992 DA            push d
8367   3993 3B 92 6E      mov d, _kdata_data ; $kdata
8368   3996 2D            mov b, d
8369   3997 38 00 00      mov c, 0
8370   399A E7            pop d
8371   399B FD 43         mov [d], b
8372   399D             ; for (i = 0; i <= 2; i++) { 
8373   399D             _for196_init:
8374   399D FA FF FF      lea d, [bp + -1] ; $i
8375   39A0 DA            push d
8376   39A1 FD 2E 00 00   mov32 cb, $00000000
8376   39A5 00 00 
8377   39A7 E7            pop d
8378   39A8 FD 43         mov [d], b
8379   39AA             _for196_cond:
8380   39AA FA FF FF      lea d, [bp + -1] ; $i
8381   39AD 2A            mov b, [d]
8382   39AE 38 00 00      mov c, 0
8383   39B1             ; --- START RELATIONAL
8384   39B1 D7            push a
8385   39B2 11            mov a, b
8386   39B3 FD 2E 02 00   mov32 cb, $00000002
8386   39B7 00 00 
8387   39B9 B0            cmp a, b
8388   39BA FD 74         sle ; <= (signed)
8389   39BC E4            pop a
8390   39BD             ; --- END RELATIONAL
8391   39BD C0 00 00      cmp b, 0
8392   39C0 C6 42 3A      je _for196_exit
8393   39C3             _for196_block:
8394   39C3             ; if (yp == k->y && xp == k->x) 
8395   39C3             _if197_cond:
8396   39C3 FA 05 00      lea d, [bp + 5] ; $yp
8397   39C6 32            mov bl, [d]
8398   39C7 A7 00         mov bh, 0
8399   39C9 38 00 00      mov c, 0
8400   39CC             ; --- START RELATIONAL
8401   39CC D7            push a
8402   39CD 11            mov a, b
8403   39CE FA FD FF      lea d, [bp + -3] ; $k
8404   39D1 FD 2A         mov d, [d]
8405   39D3 58 00 00      add d, 0
8406   39D6 32            mov bl, [d]
8407   39D7 A7 00         mov bh, 0
8408   39D9 38 00 00      mov c, 0
8409   39DC B0            cmp a, b
8410   39DD FD 71         seq ; ==
8411   39DF E4            pop a
8412   39E0             ; --- END RELATIONAL
8413   39E0             ; --- START LOGICAL AND
8414   39E0 D7            push a
8415   39E1 11            mov a, b
8416   39E2 FA 06 00      lea d, [bp + 6] ; $xp
8417   39E5 32            mov bl, [d]
8418   39E6 A7 00         mov bh, 0
8419   39E8 38 00 00      mov c, 0
8420   39EB             ; --- START RELATIONAL
8421   39EB D7            push a
8422   39EC 11            mov a, b
8423   39ED FA FD FF      lea d, [bp + -3] ; $k
8424   39F0 FD 2A         mov d, [d]
8425   39F2 58 01 00      add d, 1
8426   39F5 32            mov bl, [d]
8427   39F6 A7 00         mov bh, 0
8428   39F8 38 00 00      mov c, 0
8429   39FB B0            cmp a, b
8430   39FC FD 71         seq ; ==
8431   39FE E4            pop a
8432   39FF             ; --- END RELATIONAL
8433   39FF FD A7         sand a, b
8434   3A01 E4            pop a
8435   3A02             ; --- END LOGICAL AND
8436   3A02 C0 00 00      cmp b, 0
8437   3A05 C6 1D 3A      je _if197_exit
8438   3A08             _if197_TRUE:
8439   3A08             ; k->energy = 0; 
8440   3A08 FA FD FF      lea d, [bp + -3] ; $k
8441   3A0B FD 2A         mov d, [d]
8442   3A0D 58 02 00      add d, 2
8443   3A10 DA            push d
8444   3A11 FD 2E 00 00   mov32 cb, $00000000
8444   3A15 00 00 
8445   3A17 E7            pop d
8446   3A18 FD 43         mov [d], b
8447   3A1A 0A 1D 3A      jmp _if197_exit
8448   3A1D             _if197_exit:
8449   3A1D             ; k++; 
8450   3A1D FA FD FF      lea d, [bp + -3] ; $k
8451   3A20 2A            mov b, [d]
8452   3A21 38 00 00      mov c, 0
8453   3A24 11            mov a, b
8454   3A25 FD 77         inc b
8455   3A27 FD 77         inc b
8456   3A29 FA FD FF      lea d, [bp + -3] ; $k
8457   3A2C FD 43         mov [d], b
8458   3A2E 27            mov b, a
8459   3A2F             _for196_update:
8460   3A2F FA FF FF      lea d, [bp + -1] ; $i
8461   3A32 2A            mov b, [d]
8462   3A33 38 00 00      mov c, 0
8463   3A36 11            mov a, b
8464   3A37 FD 77         inc b
8465   3A39 FA FF FF      lea d, [bp + -1] ; $i
8466   3A3C FD 43         mov [d], b
8467   3A3E 27            mov b, a
8468   3A3F 0A AA 39      jmp _for196_cond
8469   3A42             _for196_exit:
8470   3A42             ; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x100; 
8471   3A42 3B F0 6D      mov d, _map_data ; $map
8472   3A45 D7            push a
8473   3A46 DA            push d
8474   3A47 3B A3 6E      mov d, _quad_y ; $quad_y
8475   3A4A 2A            mov b, [d]
8476   3A4B 38 00 00      mov c, 0
8477   3A4E E7            pop d
8478   3A4F FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8479   3A53 DA            push d
8480   3A54 3B A5 6E      mov d, _quad_x ; $quad_x
8481   3A57 2A            mov b, [d]
8482   3A58 38 00 00      mov c, 0
8483   3A5B E7            pop d
8484   3A5C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8485   3A60 E4            pop a
8486   3A61 DA            push d
8487   3A62 3B F0 6D      mov d, _map_data ; $map
8488   3A65 D7            push a
8489   3A66 DA            push d
8490   3A67 3B A3 6E      mov d, _quad_y ; $quad_y
8491   3A6A 2A            mov b, [d]
8492   3A6B 38 00 00      mov c, 0
8493   3A6E E7            pop d
8494   3A6F FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8495   3A73 DA            push d
8496   3A74 3B A5 6E      mov d, _quad_x ; $quad_x
8497   3A77 2A            mov b, [d]
8498   3A78 38 00 00      mov c, 0
8499   3A7B E7            pop d
8500   3A7C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8501   3A80 E4            pop a
8502   3A81 2A            mov b, [d]
8503   3A82 38 00 00      mov c, 0
8504   3A85             ; --- START TERMS
8505   3A85 D7            push a
8506   3A86 11            mov a, b
8507   3A87 FD 2E 00 01   mov32 cb, $00000100
8507   3A8B 00 00 
8508   3A8D 60            sub a, b
8509   3A8E 27            mov b, a
8510   3A8F E4            pop a
8511   3A90             ; --- END TERMS
8512   3A90 E7            pop d
8513   3A91 FD 43         mov [d], b
8514   3A93             ; break; 
8515   3A93 0A BE 3B      jmp _switch194_exit ; case break
8516   3A96             _switch194_case2:
8517   3A96             ; puts("*** Starbase Destroyed ***"); 
8518   3A96             ; --- START FUNCTION CALL
8519   3A96 26 26 7A      mov b, _s107 ; "*** Starbase Destroyed ***"
8520   3A99 FD AB         swp b
8521   3A9B D8            push b
8522   3A9C 07 C8 69      call puts
8523   3A9F 51 02 00      add sp, 2
8524   3AA2             ; --- END FUNCTION CALL
8525   3AA2             ; starbases--; 
8526   3AA2 3B C9 6D      mov d, _starbases ; $starbases
8527   3AA5 32            mov bl, [d]
8528   3AA6 A7 00         mov bh, 0
8529   3AA8 38 00 00      mov c, 0
8530   3AAB FD 7D         dec b
8531   3AAD 3B C9 6D      mov d, _starbases ; $starbases
8532   3AB0 FD 3E         mov [d], bl
8533   3AB2 FD 77         inc b
8534   3AB4             ; starbases_left--; 
8535   3AB4 3B CC 6D      mov d, _starbases_left ; $starbases_left
8536   3AB7 32            mov bl, [d]
8537   3AB8 A7 00         mov bh, 0
8538   3ABA 38 00 00      mov c, 0
8539   3ABD FD 7D         dec b
8540   3ABF 3B CC 6D      mov d, _starbases_left ; $starbases_left
8541   3AC2 FD 3E         mov [d], bl
8542   3AC4 FD 77         inc b
8543   3AC6             ; if (starbases_left <= 0 && klingons_left <= FROM_FIXED(stardate) - time_start - time_up) { 
8544   3AC6             _if198_cond:
8545   3AC6 3B CC 6D      mov d, _starbases_left ; $starbases_left
8546   3AC9 32            mov bl, [d]
8547   3ACA A7 00         mov bh, 0
8548   3ACC 38 00 00      mov c, 0
8549   3ACF             ; --- START RELATIONAL
8550   3ACF D7            push a
8551   3AD0 11            mov a, b
8552   3AD1 FD 2E 00 00   mov32 cb, $00000000
8552   3AD5 00 00 
8553   3AD7 B0            cmp a, b
8554   3AD8 FD 74         sle ; <= (signed)
8555   3ADA E4            pop a
8556   3ADB             ; --- END RELATIONAL
8557   3ADB             ; --- START LOGICAL AND
8558   3ADB D7            push a
8559   3ADC 11            mov a, b
8560   3ADD 3B A0 6E      mov d, _klingons_left ; $klingons_left
8561   3AE0 32            mov bl, [d]
8562   3AE1 A7 00         mov bh, 0
8563   3AE3 38 00 00      mov c, 0
8564   3AE6             ; --- START RELATIONAL
8565   3AE6 D7            push a
8566   3AE7 11            mov a, b
8567   3AE8             ; --- START FUNCTION CALL
8568   3AE8 3B C6 6E      mov d, _stardate ; $stardate
8569   3AEB 2A            mov b, [d]
8570   3AEC 38 00 00      mov c, 0
8571   3AEF FD AB         swp b
8572   3AF1 D8            push b
8573   3AF2 07 68 04      call FROM_FIXED
8574   3AF5 51 02 00      add sp, 2
8575   3AF8             ; --- END FUNCTION CALL
8576   3AF8             ; --- START TERMS
8577   3AF8 D7            push a
8578   3AF9 11            mov a, b
8579   3AFA 3B AA 6E      mov d, _time_start ; $time_start
8580   3AFD 2A            mov b, [d]
8581   3AFE 38 00 00      mov c, 0
8582   3B01 60            sub a, b
8583   3B02 27            mov b, a
8584   3B03 11            mov a, b
8585   3B04 3B AC 6E      mov d, _time_up ; $time_up
8586   3B07 2A            mov b, [d]
8587   3B08 38 00 00      mov c, 0
8588   3B0B 60            sub a, b
8589   3B0C 27            mov b, a
8590   3B0D E4            pop a
8591   3B0E             ; --- END TERMS
8592   3B0E B0            cmp a, b
8593   3B0F FD 76         sleu ; <= (unsigned)
8594   3B11 E4            pop a
8595   3B12             ; --- END RELATIONAL
8596   3B12 FD A7         sand a, b
8597   3B14 E4            pop a
8598   3B15             ; --- END LOGICAL AND
8599   3B15 C0 00 00      cmp b, 0
8600   3B18 C6 51 3B      je _if198_exit
8601   3B1B             _if198_TRUE:
8602   3B1B             ; puts("That does it, Captain!!"); 
8603   3B1B             ; --- START FUNCTION CALL
8604   3B1B 26 41 7A      mov b, _s108 ; "That does it, Captain!!"
8605   3B1E FD AB         swp b
8606   3B20 D8            push b
8607   3B21 07 C8 69      call puts
8608   3B24 51 02 00      add sp, 2
8609   3B27             ; --- END FUNCTION CALL
8610   3B27             ; puts("You are hereby relieved of command\n"); 
8611   3B27             ; --- START FUNCTION CALL
8612   3B27 26 59 7A      mov b, _s109 ; "You are hereby relieved of command\n"
8613   3B2A FD AB         swp b
8614   3B2C D8            push b
8615   3B2D 07 C8 69      call puts
8616   3B30 51 02 00      add sp, 2
8617   3B33             ; --- END FUNCTION CALL
8618   3B33             ; puts("and sentenced to 99 stardates of hard"); 
8619   3B33             ; --- START FUNCTION CALL
8620   3B33 26 7D 7A      mov b, _s110 ; "and sentenced to 99 stardates of hard"
8621   3B36 FD AB         swp b
8622   3B38 D8            push b
8623   3B39 07 C8 69      call puts
8624   3B3C 51 02 00      add sp, 2
8625   3B3F             ; --- END FUNCTION CALL
8626   3B3F             ; puts("labor on Cygnus 12!!\n"); 
8627   3B3F             ; --- START FUNCTION CALL
8628   3B3F 26 A3 7A      mov b, _s111 ; "labor on Cygnus 12!!\n"
8629   3B42 FD AB         swp b
8630   3B44 D8            push b
8631   3B45 07 C8 69      call puts
8632   3B48 51 02 00      add sp, 2
8633   3B4B             ; --- END FUNCTION CALL
8634   3B4B             ; resign_commision(); 
8635   3B4B             ; --- START FUNCTION CALL
8636   3B4B 07 35 4F      call resign_commision
8637   3B4E 0A 51 3B      jmp _if198_exit
8638   3B51             _if198_exit:
8639   3B51             ; puts("Starfleet Command reviewing your record to consider\n court martial!\n"); 
8640   3B51             ; --- START FUNCTION CALL
8641   3B51 26 B9 7A      mov b, _s112 ; "Starfleet Command reviewing your record to consider\n court martial!\n"
8642   3B54 FD AB         swp b
8643   3B56 D8            push b
8644   3B57 07 C8 69      call puts
8645   3B5A 51 02 00      add sp, 2
8646   3B5D             ; --- END FUNCTION CALL
8647   3B5D             ; docked = 0;		/* Undock */ 
8648   3B5D 3B EB 6D      mov d, _docked ; $docked
8649   3B60 DA            push d
8650   3B61 FD 2E 00 00   mov32 cb, $00000000
8650   3B65 00 00 
8651   3B67 E7            pop d
8652   3B68 FD 3E         mov [d], bl
8653   3B6A             ; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x10; 
8654   3B6A 3B F0 6D      mov d, _map_data ; $map
8655   3B6D D7            push a
8656   3B6E DA            push d
8657   3B6F 3B A3 6E      mov d, _quad_y ; $quad_y
8658   3B72 2A            mov b, [d]
8659   3B73 38 00 00      mov c, 0
8660   3B76 E7            pop d
8661   3B77 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8662   3B7B DA            push d
8663   3B7C 3B A5 6E      mov d, _quad_x ; $quad_x
8664   3B7F 2A            mov b, [d]
8665   3B80 38 00 00      mov c, 0
8666   3B83 E7            pop d
8667   3B84 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8668   3B88 E4            pop a
8669   3B89 DA            push d
8670   3B8A 3B F0 6D      mov d, _map_data ; $map
8671   3B8D D7            push a
8672   3B8E DA            push d
8673   3B8F 3B A3 6E      mov d, _quad_y ; $quad_y
8674   3B92 2A            mov b, [d]
8675   3B93 38 00 00      mov c, 0
8676   3B96 E7            pop d
8677   3B97 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8678   3B9B DA            push d
8679   3B9C 3B A5 6E      mov d, _quad_x ; $quad_x
8680   3B9F 2A            mov b, [d]
8681   3BA0 38 00 00      mov c, 0
8682   3BA3 E7            pop d
8683   3BA4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8684   3BA8 E4            pop a
8685   3BA9 2A            mov b, [d]
8686   3BAA 38 00 00      mov c, 0
8687   3BAD             ; --- START TERMS
8688   3BAD D7            push a
8689   3BAE 11            mov a, b
8690   3BAF FD 2E 10 00   mov32 cb, $00000010
8690   3BB3 00 00 
8691   3BB5 60            sub a, b
8692   3BB6 27            mov b, a
8693   3BB7 E4            pop a
8694   3BB8             ; --- END TERMS
8695   3BB8 E7            pop d
8696   3BB9 FD 43         mov [d], b
8697   3BBB             ; break; 
8698   3BBB 0A BE 3B      jmp _switch194_exit ; case break
8699   3BBE             _switch194_exit:
8700   3BBE             ; quad[yp+-1][xp+-1] = 		0       ; 
8701   3BBE 3B C8 6E      mov d, _quad_data ; $quad
8702   3BC1 D7            push a
8703   3BC2 DA            push d
8704   3BC3 FA 05 00      lea d, [bp + 5] ; $yp
8705   3BC6 32            mov bl, [d]
8706   3BC7 A7 00         mov bh, 0
8707   3BC9 38 00 00      mov c, 0
8708   3BCC             ; --- START TERMS
8709   3BCC D7            push a
8710   3BCD 11            mov a, b
8711   3BCE FD 2E FF FF   mov32 cb, $ffffffff
8711   3BD2 FF FF 
8712   3BD4 56            add b, a
8713   3BD5 E4            pop a
8714   3BD6             ; --- END TERMS
8715   3BD6 E7            pop d
8716   3BD7 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8717   3BDB DA            push d
8718   3BDC FA 06 00      lea d, [bp + 6] ; $xp
8719   3BDF 32            mov bl, [d]
8720   3BE0 A7 00         mov bh, 0
8721   3BE2 38 00 00      mov c, 0
8722   3BE5             ; --- START TERMS
8723   3BE5 D7            push a
8724   3BE6 11            mov a, b
8725   3BE7 FD 2E FF FF   mov32 cb, $ffffffff
8725   3BEB FF FF 
8726   3BED 56            add b, a
8727   3BEE E4            pop a
8728   3BEF             ; --- END TERMS
8729   3BEF E7            pop d
8730   3BF0 5A            add d, b
8731   3BF1 E4            pop a
8732   3BF2 DA            push d
8733   3BF3 FD 2E 00 00   mov32 cb, $00000000
8733   3BF7 00 00 
8734   3BF9 E7            pop d
8735   3BFA FD 3E         mov [d], bl
8736   3BFC F9            leave
8737   3BFD 09            ret
8738   3BFE             
8739   3BFE             damage_control:
8740   3BFE F8 00 00      enter 0 ; (push bp; mov bp, sp)
8741   3C01             ; int        repair_cost = 0; 
8742   3C01 52 02 00      sub sp, 2
8743   3C04             ; --- START LOCAL VAR INITIALIZATION
8744   3C04 FA FF FF      lea d, [bp + -1] ; $repair_cost
8745   3C07 DA            push d
8746   3C08 FD 2E 00 00   mov32 cb, $00000000
8746   3C0C 00 00 
8747   3C0E E7            pop d
8748   3C0F FD 43         mov [d], b
8749   3C11             ; --- END LOCAL VAR INITIALIZATION
8750   3C11             ; int i; 
8751   3C11 52 02 00      sub sp, 2
8752   3C14             ; if (damage[6] < 0) 
8753   3C14             _if199_cond:
8754   3C14 3B AE 6E      mov d, _damage_data ; $damage
8755   3C17 D7            push a
8756   3C18 DA            push d
8757   3C19 FD 2E 06 00   mov32 cb, $00000006
8757   3C1D 00 00 
8758   3C1F E7            pop d
8759   3C20 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8760   3C24 E4            pop a
8761   3C25 2A            mov b, [d]
8762   3C26 38 00 00      mov c, 0
8763   3C29             ; --- START RELATIONAL
8764   3C29 D7            push a
8765   3C2A 11            mov a, b
8766   3C2B FD 2E 00 00   mov32 cb, $00000000
8766   3C2F 00 00 
8767   3C31 B0            cmp a, b
8768   3C32 FD 73         slt ; < (signed)
8769   3C34 E4            pop a
8770   3C35             ; --- END RELATIONAL
8771   3C35 C0 00 00      cmp b, 0
8772   3C38 C6 4A 3C      je _if199_exit
8773   3C3B             _if199_TRUE:
8774   3C3B             ; puts("Damage Control report not available."); 
8775   3C3B             ; --- START FUNCTION CALL
8776   3C3B 26 FE 7A      mov b, _s113 ; "Damage Control report not available."
8777   3C3E FD AB         swp b
8778   3C40 D8            push b
8779   3C41 07 C8 69      call puts
8780   3C44 51 02 00      add sp, 2
8781   3C47             ; --- END FUNCTION CALL
8782   3C47 0A 4A 3C      jmp _if199_exit
8783   3C4A             _if199_exit:
8784   3C4A             ; if (docked) { 
8785   3C4A             _if200_cond:
8786   3C4A 3B EB 6D      mov d, _docked ; $docked
8787   3C4D 32            mov bl, [d]
8788   3C4E A7 00         mov bh, 0
8789   3C50 38 00 00      mov c, 0
8790   3C53 C0 00 00      cmp b, 0
8791   3C56 C6 26 3E      je _if200_exit
8792   3C59             _if200_TRUE:
8793   3C59             ; repair_cost = 0; 
8794   3C59 FA FF FF      lea d, [bp + -1] ; $repair_cost
8795   3C5C DA            push d
8796   3C5D FD 2E 00 00   mov32 cb, $00000000
8796   3C61 00 00 
8797   3C63 E7            pop d
8798   3C64 FD 43         mov [d], b
8799   3C66             ; for (i = 1; i <= 8; i++) 
8800   3C66             _for201_init:
8801   3C66 FA FD FF      lea d, [bp + -3] ; $i
8802   3C69 DA            push d
8803   3C6A FD 2E 01 00   mov32 cb, $00000001
8803   3C6E 00 00 
8804   3C70 E7            pop d
8805   3C71 FD 43         mov [d], b
8806   3C73             _for201_cond:
8807   3C73 FA FD FF      lea d, [bp + -3] ; $i
8808   3C76 2A            mov b, [d]
8809   3C77 38 00 00      mov c, 0
8810   3C7A             ; --- START RELATIONAL
8811   3C7A D7            push a
8812   3C7B 11            mov a, b
8813   3C7C FD 2E 08 00   mov32 cb, $00000008
8813   3C80 00 00 
8814   3C82 B0            cmp a, b
8815   3C83 FD 74         sle ; <= (signed)
8816   3C85 E4            pop a
8817   3C86             ; --- END RELATIONAL
8818   3C86 C0 00 00      cmp b, 0
8819   3C89 C6 E2 3C      je _for201_exit
8820   3C8C             _for201_block:
8821   3C8C             ; if (damage[i] < 0) 
8822   3C8C             _if202_cond:
8823   3C8C 3B AE 6E      mov d, _damage_data ; $damage
8824   3C8F D7            push a
8825   3C90 DA            push d
8826   3C91 FA FD FF      lea d, [bp + -3] ; $i
8827   3C94 2A            mov b, [d]
8828   3C95 38 00 00      mov c, 0
8829   3C98 E7            pop d
8830   3C99 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8831   3C9D E4            pop a
8832   3C9E 2A            mov b, [d]
8833   3C9F 38 00 00      mov c, 0
8834   3CA2             ; --- START RELATIONAL
8835   3CA2 D7            push a
8836   3CA3 11            mov a, b
8837   3CA4 FD 2E 00 00   mov32 cb, $00000000
8837   3CA8 00 00 
8838   3CAA B0            cmp a, b
8839   3CAB FD 73         slt ; < (signed)
8840   3CAD E4            pop a
8841   3CAE             ; --- END RELATIONAL
8842   3CAE C0 00 00      cmp b, 0
8843   3CB1 C6 CF 3C      je _if202_exit
8844   3CB4             _if202_TRUE:
8845   3CB4             ; repair_cost = repair_cost + 10; 
8846   3CB4 FA FF FF      lea d, [bp + -1] ; $repair_cost
8847   3CB7 DA            push d
8848   3CB8 FA FF FF      lea d, [bp + -1] ; $repair_cost
8849   3CBB 2A            mov b, [d]
8850   3CBC 38 00 00      mov c, 0
8851   3CBF             ; --- START TERMS
8852   3CBF D7            push a
8853   3CC0 11            mov a, b
8854   3CC1 FD 2E 0A 00   mov32 cb, $0000000a
8854   3CC5 00 00 
8855   3CC7 56            add b, a
8856   3CC8 E4            pop a
8857   3CC9             ; --- END TERMS
8858   3CC9 E7            pop d
8859   3CCA FD 43         mov [d], b
8860   3CCC 0A CF 3C      jmp _if202_exit
8861   3CCF             _if202_exit:
8862   3CCF             _for201_update:
8863   3CCF FA FD FF      lea d, [bp + -3] ; $i
8864   3CD2 2A            mov b, [d]
8865   3CD3 38 00 00      mov c, 0
8866   3CD6 11            mov a, b
8867   3CD7 FD 77         inc b
8868   3CD9 FA FD FF      lea d, [bp + -3] ; $i
8869   3CDC FD 43         mov [d], b
8870   3CDE 27            mov b, a
8871   3CDF 0A 73 3C      jmp _for201_cond
8872   3CE2             _for201_exit:
8873   3CE2             ; if (repair_cost) { 
8874   3CE2             _if203_cond:
8875   3CE2 FA FF FF      lea d, [bp + -1] ; $repair_cost
8876   3CE5 2A            mov b, [d]
8877   3CE6 38 00 00      mov c, 0
8878   3CE9 C0 00 00      cmp b, 0
8879   3CEC C6 23 3E      je _if203_exit
8880   3CEF             _if203_TRUE:
8881   3CEF             ; repair_cost = repair_cost + d4; 
8882   3CEF FA FF FF      lea d, [bp + -1] ; $repair_cost
8883   3CF2 DA            push d
8884   3CF3 FA FF FF      lea d, [bp + -1] ; $repair_cost
8885   3CF6 2A            mov b, [d]
8886   3CF7 38 00 00      mov c, 0
8887   3CFA             ; --- START TERMS
8888   3CFA D7            push a
8889   3CFB 11            mov a, b
8890   3CFC 3B C0 6E      mov d, _d4 ; $d4
8891   3CFF 2A            mov b, [d]
8892   3D00 38 00 00      mov c, 0
8893   3D03 56            add b, a
8894   3D04 E4            pop a
8895   3D05             ; --- END TERMS
8896   3D05 E7            pop d
8897   3D06 FD 43         mov [d], b
8898   3D08             ; if (repair_cost >= 100) 
8899   3D08             _if204_cond:
8900   3D08 FA FF FF      lea d, [bp + -1] ; $repair_cost
8901   3D0B 2A            mov b, [d]
8902   3D0C 38 00 00      mov c, 0
8903   3D0F             ; --- START RELATIONAL
8904   3D0F D7            push a
8905   3D10 11            mov a, b
8906   3D11 FD 2E 64 00   mov32 cb, $00000064
8906   3D15 00 00 
8907   3D17 B0            cmp a, b
8908   3D18 FD 80         sge ; >=
8909   3D1A E4            pop a
8910   3D1B             ; --- END RELATIONAL
8911   3D1B C0 00 00      cmp b, 0
8912   3D1E C6 31 3D      je _if204_exit
8913   3D21             _if204_TRUE:
8914   3D21             ; repair_cost = 90;	/* 0.9 */ 
8915   3D21 FA FF FF      lea d, [bp + -1] ; $repair_cost
8916   3D24 DA            push d
8917   3D25 FD 2E 5A 00   mov32 cb, $0000005a
8917   3D29 00 00 
8918   3D2B E7            pop d
8919   3D2C FD 43         mov [d], b
8920   3D2E 0A 31 3D      jmp _if204_exit
8921   3D31             _if204_exit:
8922   3D31             ; printf("\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? ", print100(repair_cost)); 
8923   3D31             ; --- START FUNCTION CALL
8924   3D31             ; --- START FUNCTION CALL
8925   3D31 FA FF FF      lea d, [bp + -1] ; $repair_cost
8926   3D34 2A            mov b, [d]
8927   3D35 38 00 00      mov c, 0
8928   3D38 FD AB         swp b
8929   3D3A D8            push b
8930   3D3B 07 12 09      call print100
8931   3D3E 51 02 00      add sp, 2
8932   3D41             ; --- END FUNCTION CALL
8933   3D41 FD AB         swp b
8934   3D43 D8            push b
8935   3D44 26 23 7B      mov b, _s114 ; "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? "
8936   3D47 FD AB         swp b
8937   3D49 D8            push b
8938   3D4A 07 B4 60      call printf
8939   3D4D 51 04 00      add sp, 4
8940   3D50             ; --- END FUNCTION CALL
8941   3D50             ; if (yesno()) { 
8942   3D50             _if205_cond:
8943   3D50             ; --- START FUNCTION CALL
8944   3D50 07 31 06      call yesno
8945   3D53 C0 00 00      cmp b, 0
8946   3D56 C6 1E 3E      je _if205_exit
8947   3D59             _if205_TRUE:
8948   3D59             ; for (i = 1; i <= 8; i++) 
8949   3D59             _for206_init:
8950   3D59 FA FD FF      lea d, [bp + -3] ; $i
8951   3D5C DA            push d
8952   3D5D FD 2E 01 00   mov32 cb, $00000001
8952   3D61 00 00 
8953   3D63 E7            pop d
8954   3D64 FD 43         mov [d], b
8955   3D66             _for206_cond:
8956   3D66 FA FD FF      lea d, [bp + -3] ; $i
8957   3D69 2A            mov b, [d]
8958   3D6A 38 00 00      mov c, 0
8959   3D6D             ; --- START RELATIONAL
8960   3D6D D7            push a
8961   3D6E 11            mov a, b
8962   3D6F FD 2E 08 00   mov32 cb, $00000008
8962   3D73 00 00 
8963   3D75 B0            cmp a, b
8964   3D76 FD 74         sle ; <= (signed)
8965   3D78 E4            pop a
8966   3D79             ; --- END RELATIONAL
8967   3D79 C0 00 00      cmp b, 0
8968   3D7C C6 D9 3D      je _for206_exit
8969   3D7F             _for206_block:
8970   3D7F             ; if (damage[i] < 0) 
8971   3D7F             _if207_cond:
8972   3D7F 3B AE 6E      mov d, _damage_data ; $damage
8973   3D82 D7            push a
8974   3D83 DA            push d
8975   3D84 FA FD FF      lea d, [bp + -3] ; $i
8976   3D87 2A            mov b, [d]
8977   3D88 38 00 00      mov c, 0
8978   3D8B E7            pop d
8979   3D8C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8980   3D90 E4            pop a
8981   3D91 2A            mov b, [d]
8982   3D92 38 00 00      mov c, 0
8983   3D95             ; --- START RELATIONAL
8984   3D95 D7            push a
8985   3D96 11            mov a, b
8986   3D97 FD 2E 00 00   mov32 cb, $00000000
8986   3D9B 00 00 
8987   3D9D B0            cmp a, b
8988   3D9E FD 73         slt ; < (signed)
8989   3DA0 E4            pop a
8990   3DA1             ; --- END RELATIONAL
8991   3DA1 C0 00 00      cmp b, 0
8992   3DA4 C6 C6 3D      je _if207_exit
8993   3DA7             _if207_TRUE:
8994   3DA7             ; damage[i] = 0; 
8995   3DA7 3B AE 6E      mov d, _damage_data ; $damage
8996   3DAA D7            push a
8997   3DAB DA            push d
8998   3DAC FA FD FF      lea d, [bp + -3] ; $i
8999   3DAF 2A            mov b, [d]
9000   3DB0 38 00 00      mov c, 0
9001   3DB3 E7            pop d
9002   3DB4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9003   3DB8 E4            pop a
9004   3DB9 DA            push d
9005   3DBA FD 2E 00 00   mov32 cb, $00000000
9005   3DBE 00 00 
9006   3DC0 E7            pop d
9007   3DC1 FD 43         mov [d], b
9008   3DC3 0A C6 3D      jmp _if207_exit
9009   3DC6             _if207_exit:
9010   3DC6             _for206_update:
9011   3DC6 FA FD FF      lea d, [bp + -3] ; $i
9012   3DC9 2A            mov b, [d]
9013   3DCA 38 00 00      mov c, 0
9014   3DCD 11            mov a, b
9015   3DCE FD 77         inc b
9016   3DD0 FA FD FF      lea d, [bp + -3] ; $i
9017   3DD3 FD 43         mov [d], b
9018   3DD5 27            mov b, a
9019   3DD6 0A 66 3D      jmp _for206_cond
9020   3DD9             _for206_exit:
9021   3DD9             ; stardate = stardate + (repair_cost + 5)/10 + 1; 
9022   3DD9 3B C6 6E      mov d, _stardate ; $stardate
9023   3DDC DA            push d
9024   3DDD 3B C6 6E      mov d, _stardate ; $stardate
9025   3DE0 2A            mov b, [d]
9026   3DE1 38 00 00      mov c, 0
9027   3DE4             ; --- START TERMS
9028   3DE4 D7            push a
9029   3DE5 11            mov a, b
9030   3DE6 FA FF FF      lea d, [bp + -1] ; $repair_cost
9031   3DE9 2A            mov b, [d]
9032   3DEA 38 00 00      mov c, 0
9033   3DED             ; --- START TERMS
9034   3DED D7            push a
9035   3DEE 11            mov a, b
9036   3DEF FD 2E 05 00   mov32 cb, $00000005
9036   3DF3 00 00 
9037   3DF5 56            add b, a
9038   3DF6 E4            pop a
9039   3DF7             ; --- END TERMS
9040   3DF7             ; --- START FACTORS
9041   3DF7 D7            push a
9042   3DF8 FD D8         push g
9043   3DFA 11            mov a, b
9044   3DFB FD 7A         mov g, c
9045   3DFD FD 2E 0A 00   mov32 cb, $0000000a
9045   3E01 00 00 
9046   3E03 FD D8         push g ; save 'g' as the div instruction uses it
9047   3E05 AE            div a, b ; /, a: quotient, b: remainder
9048   3E06 FD F1         pop g
9049   3E08 FD 38         mov c, g
9050   3E0A 27            mov b, a
9051   3E0B FD F1         pop g
9052   3E0D E4            pop a
9053   3E0E             ; --- END FACTORS
9054   3E0E 56            add b, a
9055   3E0F 11            mov a, b
9056   3E10 FD 2E 01 00   mov32 cb, $00000001
9056   3E14 00 00 
9057   3E16 56            add b, a
9058   3E17 E4            pop a
9059   3E18             ; --- END TERMS
9060   3E18 E7            pop d
9061   3E19 FD 43         mov [d], b
9062   3E1B 0A 1E 3E      jmp _if205_exit
9063   3E1E             _if205_exit:
9064   3E1E             ; return; 
9065   3E1E F9            leave
9066   3E1F 09            ret
9067   3E20 0A 23 3E      jmp _if203_exit
9068   3E23             _if203_exit:
9069   3E23 0A 26 3E      jmp _if200_exit
9070   3E26             _if200_exit:
9071   3E26             ; if (damage[6] < 0) 
9072   3E26             _if210_cond:
9073   3E26 3B AE 6E      mov d, _damage_data ; $damage
9074   3E29 D7            push a
9075   3E2A DA            push d
9076   3E2B FD 2E 06 00   mov32 cb, $00000006
9076   3E2F 00 00 
9077   3E31 E7            pop d
9078   3E32 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9079   3E36 E4            pop a
9080   3E37 2A            mov b, [d]
9081   3E38 38 00 00      mov c, 0
9082   3E3B             ; --- START RELATIONAL
9083   3E3B D7            push a
9084   3E3C 11            mov a, b
9085   3E3D FD 2E 00 00   mov32 cb, $00000000
9085   3E41 00 00 
9086   3E43 B0            cmp a, b
9087   3E44 FD 73         slt ; < (signed)
9088   3E46 E4            pop a
9089   3E47             ; --- END RELATIONAL
9090   3E47 C0 00 00      cmp b, 0
9091   3E4A C6 52 3E      je _if210_exit
9092   3E4D             _if210_TRUE:
9093   3E4D             ; return; 
9094   3E4D F9            leave
9095   3E4E 09            ret
9096   3E4F 0A 52 3E      jmp _if210_exit
9097   3E52             _if210_exit:
9098   3E52             ; puts("Device            State of Repair"); 
9099   3E52             ; --- START FUNCTION CALL
9100   3E52 26 B1 7B      mov b, _s115 ; "Device            State of Repair"
9101   3E55 FD AB         swp b
9102   3E57 D8            push b
9103   3E58 07 C8 69      call puts
9104   3E5B 51 02 00      add sp, 2
9105   3E5E             ; --- END FUNCTION CALL
9106   3E5E             ; for (i = 1; i <= 8; i++) 
9107   3E5E             _for211_init:
9108   3E5E FA FD FF      lea d, [bp + -3] ; $i
9109   3E61 DA            push d
9110   3E62 FD 2E 01 00   mov32 cb, $00000001
9110   3E66 00 00 
9111   3E68 E7            pop d
9112   3E69 FD 43         mov [d], b
9113   3E6B             _for211_cond:
9114   3E6B FA FD FF      lea d, [bp + -3] ; $i
9115   3E6E 2A            mov b, [d]
9116   3E6F 38 00 00      mov c, 0
9117   3E72             ; --- START RELATIONAL
9118   3E72 D7            push a
9119   3E73 11            mov a, b
9120   3E74 FD 2E 08 00   mov32 cb, $00000008
9120   3E78 00 00 
9121   3E7A B0            cmp a, b
9122   3E7B FD 74         sle ; <= (signed)
9123   3E7D E4            pop a
9124   3E7E             ; --- END RELATIONAL
9125   3E7E C0 00 00      cmp b, 0
9126   3E81 C6 D8 3E      je _for211_exit
9127   3E84             _for211_block:
9128   3E84             ; printf("%-25s%6s\n", get_device_name(i), print100(damage[i])); 
9129   3E84             ; --- START FUNCTION CALL
9130   3E84             ; --- START FUNCTION CALL
9131   3E84 3B AE 6E      mov d, _damage_data ; $damage
9132   3E87 D7            push a
9133   3E88 DA            push d
9134   3E89 FA FD FF      lea d, [bp + -3] ; $i
9135   3E8C 2A            mov b, [d]
9136   3E8D 38 00 00      mov c, 0
9137   3E90 E7            pop d
9138   3E91 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9139   3E95 E4            pop a
9140   3E96 2A            mov b, [d]
9141   3E97 38 00 00      mov c, 0
9142   3E9A FD AB         swp b
9143   3E9C D8            push b
9144   3E9D 07 12 09      call print100
9145   3EA0 51 02 00      add sp, 2
9146   3EA3             ; --- END FUNCTION CALL
9147   3EA3 FD AB         swp b
9148   3EA5 D8            push b
9149   3EA6             ; --- START FUNCTION CALL
9150   3EA6 FA FD FF      lea d, [bp + -3] ; $i
9151   3EA9 2A            mov b, [d]
9152   3EAA 38 00 00      mov c, 0
9153   3EAD FD AB         swp b
9154   3EAF D8            push b
9155   3EB0 07 9F 59      call get_device_name
9156   3EB3 51 02 00      add sp, 2
9157   3EB6             ; --- END FUNCTION CALL
9158   3EB6 FD AB         swp b
9159   3EB8 D8            push b
9160   3EB9 26 D3 7B      mov b, _s116 ; "%-25s%6s\n"
9161   3EBC FD AB         swp b
9162   3EBE D8            push b
9163   3EBF 07 B4 60      call printf
9164   3EC2 51 06 00      add sp, 6
9165   3EC5             ; --- END FUNCTION CALL
9166   3EC5             _for211_update:
9167   3EC5 FA FD FF      lea d, [bp + -3] ; $i
9168   3EC8 2A            mov b, [d]
9169   3EC9 38 00 00      mov c, 0
9170   3ECC 11            mov a, b
9171   3ECD FD 77         inc b
9172   3ECF FA FD FF      lea d, [bp + -3] ; $i
9173   3ED2 FD 43         mov [d], b
9174   3ED4 27            mov b, a
9175   3ED5 0A 6B 3E      jmp _for211_cond
9176   3ED8             _for211_exit:
9177   3ED8             ; printf("\n"); 
9178   3ED8             ; --- START FUNCTION CALL
9179   3ED8 26 DD 7B      mov b, _s117 ; "\n"
9180   3EDB FD AB         swp b
9181   3EDD D8            push b
9182   3EDE 07 B4 60      call printf
9183   3EE1 51 02 00      add sp, 2
9184   3EE4             ; --- END FUNCTION CALL
9185   3EE4 F9            leave
9186   3EE5 09            ret
9187   3EE6             
9188   3EE6             shield_control:
9189   3EE6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9190   3EE9             ; int i; 
9191   3EE9 52 02 00      sub sp, 2
9192   3EEC             ; if (inoperable(7)) 
9193   3EEC             _if212_cond:
9194   3EEC             ; --- START FUNCTION CALL
9195   3EEC FD 2E 07 00   mov32 cb, $00000007
9195   3EF0 00 00 
9196   3EF2 DD            push bl
9197   3EF3 07 7C 09      call inoperable
9198   3EF6 51 01 00      add sp, 1
9199   3EF9             ; --- END FUNCTION CALL
9200   3EF9 C0 00 00      cmp b, 0
9201   3EFC C6 04 3F      je _if212_exit
9202   3EFF             _if212_TRUE:
9203   3EFF             ; return; 
9204   3EFF F9            leave
9205   3F00 09            ret
9206   3F01 0A 04 3F      jmp _if212_exit
9207   3F04             _if212_exit:
9208   3F04             ; printf("Energy available = %d\n\n Input number of units to shields: ", energy + shield); 
9209   3F04             ; --- START FUNCTION CALL
9210   3F04 3B EC 6D      mov d, _energy ; $energy
9211   3F07 2A            mov b, [d]
9212   3F08 38 00 00      mov c, 0
9213   3F0B             ; --- START TERMS
9214   3F0B D7            push a
9215   3F0C 11            mov a, b
9216   3F0D 3B A7 6E      mov d, _shield ; $shield
9217   3F10 2A            mov b, [d]
9218   3F11 38 00 00      mov c, 0
9219   3F14 56            add b, a
9220   3F15 E4            pop a
9221   3F16             ; --- END TERMS
9222   3F16 FD AB         swp b
9223   3F18 D8            push b
9224   3F19 26 DF 7B      mov b, _s118 ; "Energy available = %d\n\n Input number of units to shields: "
9225   3F1C FD AB         swp b
9226   3F1E D8            push b
9227   3F1F 07 B4 60      call printf
9228   3F22 51 04 00      add sp, 4
9229   3F25             ; --- END FUNCTION CALL
9230   3F25             ; i = input_int(); 
9231   3F25 FA FF FF      lea d, [bp + -1] ; $i
9232   3F28 DA            push d
9233   3F29             ; --- START FUNCTION CALL
9234   3F29 07 BD 08      call input_int
9235   3F2C E7            pop d
9236   3F2D FD 43         mov [d], b
9237   3F2F             ; if (i < 0 || shield == i) { 
9238   3F2F             _if213_cond:
9239   3F2F FA FF FF      lea d, [bp + -1] ; $i
9240   3F32 2A            mov b, [d]
9241   3F33 38 00 00      mov c, 0
9242   3F36             ; --- START RELATIONAL
9243   3F36 D7            push a
9244   3F37 11            mov a, b
9245   3F38 FD 2E 00 00   mov32 cb, $00000000
9245   3F3C 00 00 
9246   3F3E B0            cmp a, b
9247   3F3F FD 73         slt ; < (signed)
9248   3F41 E4            pop a
9249   3F42             ; --- END RELATIONAL
9250   3F42             ; --- START LOGICAL OR
9251   3F42 D7            push a
9252   3F43 11            mov a, b
9253   3F44 3B A7 6E      mov d, _shield ; $shield
9254   3F47 2A            mov b, [d]
9255   3F48 38 00 00      mov c, 0
9256   3F4B             ; --- START RELATIONAL
9257   3F4B D7            push a
9258   3F4C 11            mov a, b
9259   3F4D FA FF FF      lea d, [bp + -1] ; $i
9260   3F50 2A            mov b, [d]
9261   3F51 38 00 00      mov c, 0
9262   3F54 B0            cmp a, b
9263   3F55 FD 71         seq ; ==
9264   3F57 E4            pop a
9265   3F58             ; --- END RELATIONAL
9266   3F58 FD A8         sor a, b ; ||
9267   3F5A E4            pop a
9268   3F5B             ; --- END LOGICAL OR
9269   3F5B C0 00 00      cmp b, 0
9270   3F5E C6 72 3F      je _if213_exit
9271   3F61             _if213_TRUE:
9272   3F61             ; puts("<Shields Unchanged>\n"); 
9273   3F61             ; --- START FUNCTION CALL
9274   3F61 26 1A 7C      mov b, _s119 ; "<Shields Unchanged>\n"
9275   3F64 FD AB         swp b
9276   3F66 D8            push b
9277   3F67 07 C8 69      call puts
9278   3F6A 51 02 00      add sp, 2
9279   3F6D             ; --- END FUNCTION CALL
9280   3F6D             ; return; 
9281   3F6D F9            leave
9282   3F6E 09            ret
9283   3F6F 0A 72 3F      jmp _if213_exit
9284   3F72             _if213_exit:
9285   3F72             ; if (i >= energy + shield) { 
9286   3F72             _if214_cond:
9287   3F72 FA FF FF      lea d, [bp + -1] ; $i
9288   3F75 2A            mov b, [d]
9289   3F76 38 00 00      mov c, 0
9290   3F79             ; --- START RELATIONAL
9291   3F79 D7            push a
9292   3F7A 11            mov a, b
9293   3F7B 3B EC 6D      mov d, _energy ; $energy
9294   3F7E 2A            mov b, [d]
9295   3F7F 38 00 00      mov c, 0
9296   3F82             ; --- START TERMS
9297   3F82 D7            push a
9298   3F83 11            mov a, b
9299   3F84 3B A7 6E      mov d, _shield ; $shield
9300   3F87 2A            mov b, [d]
9301   3F88 38 00 00      mov c, 0
9302   3F8B 56            add b, a
9303   3F8C E4            pop a
9304   3F8D             ; --- END TERMS
9305   3F8D B0            cmp a, b
9306   3F8E FD 80         sge ; >=
9307   3F90 E4            pop a
9308   3F91             ; --- END RELATIONAL
9309   3F91 C0 00 00      cmp b, 0
9310   3F94 C6 A6 3F      je _if214_exit
9311   3F97             _if214_TRUE:
9312   3F97             ; puts("Shield Control Reports:\n  'This is not the Federation Treasury.'"); 
9313   3F97             ; --- START FUNCTION CALL
9314   3F97 26 2F 7C      mov b, _s120 ; "Shield Control Reports:\n  'This is not the Federation Treasury.'"
9315   3F9A FD AB         swp b
9316   3F9C D8            push b
9317   3F9D 07 C8 69      call puts
9318   3FA0 51 02 00      add sp, 2
9319   3FA3             ; --- END FUNCTION CALL
9320   3FA3 0A A6 3F      jmp _if214_exit
9321   3FA6             _if214_exit:
9322   3FA6             ; energy = energy + shield - i; 
9323   3FA6 3B EC 6D      mov d, _energy ; $energy
9324   3FA9 DA            push d
9325   3FAA 3B EC 6D      mov d, _energy ; $energy
9326   3FAD 2A            mov b, [d]
9327   3FAE 38 00 00      mov c, 0
9328   3FB1             ; --- START TERMS
9329   3FB1 D7            push a
9330   3FB2 11            mov a, b
9331   3FB3 3B A7 6E      mov d, _shield ; $shield
9332   3FB6 2A            mov b, [d]
9333   3FB7 38 00 00      mov c, 0
9334   3FBA 56            add b, a
9335   3FBB 11            mov a, b
9336   3FBC FA FF FF      lea d, [bp + -1] ; $i
9337   3FBF 2A            mov b, [d]
9338   3FC0 38 00 00      mov c, 0
9339   3FC3 60            sub a, b
9340   3FC4 27            mov b, a
9341   3FC5 E4            pop a
9342   3FC6             ; --- END TERMS
9343   3FC6 E7            pop d
9344   3FC7 FD 43         mov [d], b
9345   3FC9             ; shield = i; 
9346   3FC9 3B A7 6E      mov d, _shield ; $shield
9347   3FCC DA            push d
9348   3FCD FA FF FF      lea d, [bp + -1] ; $i
9349   3FD0 2A            mov b, [d]
9350   3FD1 38 00 00      mov c, 0
9351   3FD4 E7            pop d
9352   3FD5 FD 43         mov [d], b
9353   3FD7             ; printf("Deflector Control Room report:\n  'Shields now at %d units per your command.'\n\n", shield); 
9354   3FD7             ; --- START FUNCTION CALL
9355   3FD7 3B A7 6E      mov d, _shield ; $shield
9356   3FDA 2A            mov b, [d]
9357   3FDB 38 00 00      mov c, 0
9358   3FDE FD AB         swp b
9359   3FE0 D8            push b
9360   3FE1 26 70 7C      mov b, _s121 ; "Deflector Control Room report:\n  'Shields now at %d units per your command.'\n\n"
9361   3FE4 FD AB         swp b
9362   3FE6 D8            push b
9363   3FE7 07 B4 60      call printf
9364   3FEA 51 04 00      add sp, 4
9365   3FED             ; --- END FUNCTION CALL
9366   3FED F9            leave
9367   3FEE 09            ret
9368   3FEF             
9369   3FEF             library_computer:
9370   3FEF F8 00 00      enter 0 ; (push bp; mov bp, sp)
9371   3FF2             ; if (inoperable(8)) 
9372   3FF2             _if215_cond:
9373   3FF2             ; --- START FUNCTION CALL
9374   3FF2 FD 2E 08 00   mov32 cb, $00000008
9374   3FF6 00 00 
9375   3FF8 DD            push bl
9376   3FF9 07 7C 09      call inoperable
9377   3FFC 51 01 00      add sp, 1
9378   3FFF             ; --- END FUNCTION CALL
9379   3FFF C0 00 00      cmp b, 0
9380   4002 C6 0A 40      je _if215_exit
9381   4005             _if215_TRUE:
9382   4005             ; return; 
9383   4005 F9            leave
9384   4006 09            ret
9385   4007 0A 0A 40      jmp _if215_exit
9386   400A             _if215_exit:
9387   400A             ; puts("Computer active and awating command: "); 
9388   400A             ; --- START FUNCTION CALL
9389   400A 26 BF 7C      mov b, _s122 ; "Computer active and awating command: "
9390   400D FD AB         swp b
9391   400F D8            push b
9392   4010 07 C8 69      call puts
9393   4013 51 02 00      add sp, 2
9394   4016             ; --- END FUNCTION CALL
9395   4016             ; switch(input_int()) { 
9396   4016             _switch216_expr:
9397   4016             ; --- START FUNCTION CALL
9398   4016 07 BD 08      call input_int
9399   4019             _switch216_comparisons:
9400   4019 C0 FF FF      cmp b, -1
9401   401C C6 49 40      je _switch216_case0
9402   401F C0 00 00      cmp b, 0
9403   4022 C6 4C 40      je _switch216_case1
9404   4025 C0 01 00      cmp b, 1
9405   4028 C6 52 40      je _switch216_case2
9406   402B C0 02 00      cmp b, 2
9407   402E C6 58 40      je _switch216_case3
9408   4031 C0 03 00      cmp b, 3
9409   4034 C6 5E 40      je _switch216_case4
9410   4037 C0 04 00      cmp b, 4
9411   403A C6 64 40      je _switch216_case5
9412   403D C0 05 00      cmp b, 5
9413   4040 C6 6A 40      je _switch216_case6
9414   4043 0A 70 40      jmp _switch216_default
9415   4046 0A C4 40      jmp _switch216_exit
9416   4049             _switch216_case0:
9417   4049             ; break; 
9418   4049 0A C4 40      jmp _switch216_exit ; case break
9419   404C             _switch216_case1:
9420   404C             ; galactic_record(); 
9421   404C             ; --- START FUNCTION CALL
9422   404C 07 C6 40      call galactic_record
9423   404F             ; break; 
9424   404F 0A C4 40      jmp _switch216_exit ; case break
9425   4052             _switch216_case2:
9426   4052             ; status_report(); 
9427   4052             ; --- START FUNCTION CALL
9428   4052 07 2D 42      call status_report
9429   4055             ; break; 
9430   4055 0A C4 40      jmp _switch216_exit ; case break
9431   4058             _switch216_case3:
9432   4058             ; torpedo_data(); 
9433   4058             ; --- START FUNCTION CALL
9434   4058 07 95 43      call torpedo_data
9435   405B             ; break; 
9436   405B 0A C4 40      jmp _switch216_exit ; case break
9437   405E             _switch216_case4:
9438   405E             ; nav_data(); 
9439   405E             ; --- START FUNCTION CALL
9440   405E 07 D7 44      call nav_data
9441   4061             ; break; 
9442   4061 0A C4 40      jmp _switch216_exit ; case break
9443   4064             _switch216_case5:
9444   4064             ; dirdist_calc(); 
9445   4064             ; --- START FUNCTION CALL
9446   4064 07 4E 45      call dirdist_calc
9447   4067             ; break; 
9448   4067 0A C4 40      jmp _switch216_exit ; case break
9449   406A             _switch216_case6:
9450   406A             ; galaxy_map(); 
9451   406A             ; --- START FUNCTION CALL
9452   406A 07 1B 47      call galaxy_map
9453   406D             ; break; 
9454   406D 0A C4 40      jmp _switch216_exit ; case break
9455   4070             _switch216_default:
9456   4070             ; puts("Functions available from Library-Computer:\n\n"); 
9457   4070             ; --- START FUNCTION CALL
9458   4070 26 E5 7C      mov b, _s123 ; "Functions available from Library-Computer:\n\n"
9459   4073 FD AB         swp b
9460   4075 D8            push b
9461   4076 07 C8 69      call puts
9462   4079 51 02 00      add sp, 2
9463   407C             ; --- END FUNCTION CALL
9464   407C             ; puts("   0 = Cumulative Galactic Record\n"); 
9465   407C             ; --- START FUNCTION CALL
9466   407C 26 12 7D      mov b, _s124 ; "   0 = Cumulative Galactic Record\n"
9467   407F FD AB         swp b
9468   4081 D8            push b
9469   4082 07 C8 69      call puts
9470   4085 51 02 00      add sp, 2
9471   4088             ; --- END FUNCTION CALL
9472   4088             ; puts("   1 = Status Report\n"); 
9473   4088             ; --- START FUNCTION CALL
9474   4088 26 35 7D      mov b, _s125 ; "   1 = Status Report\n"
9475   408B FD AB         swp b
9476   408D D8            push b
9477   408E 07 C8 69      call puts
9478   4091 51 02 00      add sp, 2
9479   4094             ; --- END FUNCTION CALL
9480   4094             ; puts("   2 = Photon Torpedo Data\n"); 
9481   4094             ; --- START FUNCTION CALL
9482   4094 26 4B 7D      mov b, _s126 ; "   2 = Photon Torpedo Data\n"
9483   4097 FD AB         swp b
9484   4099 D8            push b
9485   409A 07 C8 69      call puts
9486   409D 51 02 00      add sp, 2
9487   40A0             ; --- END FUNCTION CALL
9488   40A0             ; puts("   3 = Starbase Nav Data\n"); 
9489   40A0             ; --- START FUNCTION CALL
9490   40A0 26 67 7D      mov b, _s127 ; "   3 = Starbase Nav Data\n"
9491   40A3 FD AB         swp b
9492   40A5 D8            push b
9493   40A6 07 C8 69      call puts
9494   40A9 51 02 00      add sp, 2
9495   40AC             ; --- END FUNCTION CALL
9496   40AC             ; puts("   4 = Direction/Distance Calculator\n"); 
9497   40AC             ; --- START FUNCTION CALL
9498   40AC 26 81 7D      mov b, _s128 ; "   4 = Direction/Distance Calculator\n"
9499   40AF FD AB         swp b
9500   40B1 D8            push b
9501   40B2 07 C8 69      call puts
9502   40B5 51 02 00      add sp, 2
9503   40B8             ; --- END FUNCTION CALL
9504   40B8             ; puts("   5 = Galaxy 'Region Name' Map\n"); 
9505   40B8             ; --- START FUNCTION CALL
9506   40B8 26 A7 7D      mov b, _s129 ; "   5 = Galaxy 'Region Name' Map\n"
9507   40BB FD AB         swp b
9508   40BD D8            push b
9509   40BE 07 C8 69      call puts
9510   40C1 51 02 00      add sp, 2
9511   40C4             ; --- END FUNCTION CALL
9512   40C4             _switch216_exit:
9513   40C4 F9            leave
9514   40C5 09            ret
9515   40C6             
9516   40C6             galactic_record:
9517   40C6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9518   40C9             ; int i, j; 
9519   40C9 52 02 00      sub sp, 2
9520   40CC 52 02 00      sub sp, 2
9521   40CF             ; printf("\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", quad_y, quad_x); 
9522   40CF             ; --- START FUNCTION CALL
9523   40CF 3B A5 6E      mov d, _quad_x ; $quad_x
9524   40D2 2A            mov b, [d]
9525   40D3 38 00 00      mov c, 0
9526   40D6 FD AB         swp b
9527   40D8 D8            push b
9528   40D9 3B A3 6E      mov d, _quad_y ; $quad_y
9529   40DC 2A            mov b, [d]
9530   40DD 38 00 00      mov c, 0
9531   40E0 FD AB         swp b
9532   40E2 D8            push b
9533   40E3 26 C8 7D      mov b, _s130 ; "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n"
9534   40E6 FD AB         swp b
9535   40E8 D8            push b
9536   40E9 07 B4 60      call printf
9537   40EC 51 06 00      add sp, 6
9538   40EF             ; --- END FUNCTION CALL
9539   40EF             ; puts("     1     2     3     4     5     6     7     8"); 
9540   40EF             ; --- START FUNCTION CALL
9541   40EF 26 FD 7D      mov b, _s131 ; "     1     2     3     4     5     6     7     8"
9542   40F2 FD AB         swp b
9543   40F4 D8            push b
9544   40F5 07 C8 69      call puts
9545   40F8 51 02 00      add sp, 2
9546   40FB             ; --- END FUNCTION CALL
9547   40FB             ; for (i = 1; i <= 8; i++) { 
9548   40FB             _for217_init:
9549   40FB FA FF FF      lea d, [bp + -1] ; $i
9550   40FE DA            push d
9551   40FF FD 2E 01 00   mov32 cb, $00000001
9551   4103 00 00 
9552   4105 E7            pop d
9553   4106 FD 43         mov [d], b
9554   4108             _for217_cond:
9555   4108 FA FF FF      lea d, [bp + -1] ; $i
9556   410B 2A            mov b, [d]
9557   410C 38 00 00      mov c, 0
9558   410F             ; --- START RELATIONAL
9559   410F D7            push a
9560   4110 11            mov a, b
9561   4111 FD 2E 08 00   mov32 cb, $00000008
9561   4115 00 00 
9562   4117 B0            cmp a, b
9563   4118 FD 74         sle ; <= (signed)
9564   411A E4            pop a
9565   411B             ; --- END RELATIONAL
9566   411B C0 00 00      cmp b, 0
9567   411E C6 15 42      je _for217_exit
9568   4121             _for217_block:
9569   4121             ; printf("%s%d", gr_1, i); 
9570   4121             ; --- START FUNCTION CALL
9571   4121 FA FF FF      lea d, [bp + -1] ; $i
9572   4124 2A            mov b, [d]
9573   4125 38 00 00      mov c, 0
9574   4128 FD AB         swp b
9575   412A D8            push b
9576   412B 3B 43 70      mov d, _gr_1 ; $gr_1
9577   412E 2A            mov b, [d]
9578   412F 38 00 00      mov c, 0
9579   4132 FD AB         swp b
9580   4134 D8            push b
9581   4135 26 2E 7E      mov b, _s132 ; "%s%d"
9582   4138 FD AB         swp b
9583   413A D8            push b
9584   413B 07 B4 60      call printf
9585   413E 51 06 00      add sp, 6
9586   4141             ; --- END FUNCTION CALL
9587   4141             ; for (j = 1; j <= 8; j++) { 
9588   4141             _for218_init:
9589   4141 FA FD FF      lea d, [bp + -3] ; $j
9590   4144 DA            push d
9591   4145 FD 2E 01 00   mov32 cb, $00000001
9591   4149 00 00 
9592   414B E7            pop d
9593   414C FD 43         mov [d], b
9594   414E             _for218_cond:
9595   414E FA FD FF      lea d, [bp + -3] ; $j
9596   4151 2A            mov b, [d]
9597   4152 38 00 00      mov c, 0
9598   4155             ; --- START RELATIONAL
9599   4155 D7            push a
9600   4156 11            mov a, b
9601   4157 FD 2E 08 00   mov32 cb, $00000008
9601   415B 00 00 
9602   415D B0            cmp a, b
9603   415E FD 74         sle ; <= (signed)
9604   4160 E4            pop a
9605   4161             ; --- END RELATIONAL
9606   4161 C0 00 00      cmp b, 0
9607   4164 C6 F5 41      je _for218_exit
9608   4167             _for218_block:
9609   4167             ; printf("   "); 
9610   4167             ; --- START FUNCTION CALL
9611   4167 26 B4 71      mov b, _s25 ; "   "
9612   416A FD AB         swp b
9613   416C D8            push b
9614   416D 07 B4 60      call printf
9615   4170 51 02 00      add sp, 2
9616   4173             ; --- END FUNCTION CALL
9617   4173             ; if (map[i][j] &  0x1000		           ) 
9618   4173             _if219_cond:
9619   4173 3B F0 6D      mov d, _map_data ; $map
9620   4176 D7            push a
9621   4177 DA            push d
9622   4178 FA FF FF      lea d, [bp + -1] ; $i
9623   417B 2A            mov b, [d]
9624   417C 38 00 00      mov c, 0
9625   417F E7            pop d
9626   4180 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9627   4184 DA            push d
9628   4185 FA FD FF      lea d, [bp + -3] ; $j
9629   4188 2A            mov b, [d]
9630   4189 38 00 00      mov c, 0
9631   418C E7            pop d
9632   418D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9633   4191 E4            pop a
9634   4192 2A            mov b, [d]
9635   4193 38 00 00      mov c, 0
9636   4196 D7            push a
9637   4197 11            mov a, b
9638   4198 FD 2E 00 10   mov32 cb, $00001000
9638   419C 00 00 
9639   419E FD 92         and b, a ; &
9640   41A0 E4            pop a
9641   41A1 C0 00 00      cmp b, 0
9642   41A4 C6 D6 41      je _if219_else
9643   41A7             _if219_TRUE:
9644   41A7             ; putbcd(map[i][j]); 
9645   41A7             ; --- START FUNCTION CALL
9646   41A7 3B F0 6D      mov d, _map_data ; $map
9647   41AA D7            push a
9648   41AB DA            push d
9649   41AC FA FF FF      lea d, [bp + -1] ; $i
9650   41AF 2A            mov b, [d]
9651   41B0 38 00 00      mov c, 0
9652   41B3 E7            pop d
9653   41B4 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9654   41B8 DA            push d
9655   41B9 FA FD FF      lea d, [bp + -3] ; $j
9656   41BC 2A            mov b, [d]
9657   41BD 38 00 00      mov c, 0
9658   41C0 E7            pop d
9659   41C1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9660   41C5 E4            pop a
9661   41C6 2A            mov b, [d]
9662   41C7 38 00 00      mov c, 0
9663   41CA FD AB         swp b
9664   41CC D8            push b
9665   41CD 07 F5 2A      call putbcd
9666   41D0 51 02 00      add sp, 2
9667   41D3             ; --- END FUNCTION CALL
9668   41D3 0A E2 41      jmp _if219_exit
9669   41D6             _if219_else:
9670   41D6             ; printf("***"); 
9671   41D6             ; --- START FUNCTION CALL
9672   41D6 26 1B 78      mov b, _s90 ; "***"
9673   41D9 FD AB         swp b
9674   41DB D8            push b
9675   41DC 07 B4 60      call printf
9676   41DF 51 02 00      add sp, 2
9677   41E2             ; --- END FUNCTION CALL
9678   41E2             _if219_exit:
9679   41E2             _for218_update:
9680   41E2 FA FD FF      lea d, [bp + -3] ; $j
9681   41E5 2A            mov b, [d]
9682   41E6 38 00 00      mov c, 0
9683   41E9 11            mov a, b
9684   41EA FD 77         inc b
9685   41EC FA FD FF      lea d, [bp + -3] ; $j
9686   41EF FD 43         mov [d], b
9687   41F1 27            mov b, a
9688   41F2 0A 4E 41      jmp _for218_cond
9689   41F5             _for218_exit:
9690   41F5             ; putchar('\n'); 
9691   41F5             ; --- START FUNCTION CALL
9692   41F5 FD 2E 0A 00   mov32 cb, $0000000a
9692   41F9 00 00 
9693   41FB DD            push bl
9694   41FC 07 33 65      call putchar
9695   41FF 51 01 00      add sp, 1
9696   4202             ; --- END FUNCTION CALL
9697   4202             _for217_update:
9698   4202 FA FF FF      lea d, [bp + -1] ; $i
9699   4205 2A            mov b, [d]
9700   4206 38 00 00      mov c, 0
9701   4209 11            mov a, b
9702   420A FD 77         inc b
9703   420C FA FF FF      lea d, [bp + -1] ; $i
9704   420F FD 43         mov [d], b
9705   4211 27            mov b, a
9706   4212 0A 08 41      jmp _for217_cond
9707   4215             _for217_exit:
9708   4215             ; printf("%s\n", gr_1); 
9709   4215             ; --- START FUNCTION CALL
9710   4215 3B 43 70      mov d, _gr_1 ; $gr_1
9711   4218 2A            mov b, [d]
9712   4219 38 00 00      mov c, 0
9713   421C FD AB         swp b
9714   421E D8            push b
9715   421F 26 22 78      mov b, _s92 ; "%s\n"
9716   4222 FD AB         swp b
9717   4224 D8            push b
9718   4225 07 B4 60      call printf
9719   4228 51 04 00      add sp, 4
9720   422B             ; --- END FUNCTION CALL
9721   422B F9            leave
9722   422C 09            ret
9723   422D             
9724   422D             status_report:
9725   422D F8 00 00      enter 0 ; (push bp; mov bp, sp)
9726   4230             ; char *plural; 
9727   4230 52 02 00      sub sp, 2
9728   4233             ; plural = str_s + 1; 
9729   4233 FA FF FF      lea d, [bp + -1] ; $plural
9730   4236 DA            push d
9731   4237 3B 47 70      mov d, _str_s ; $str_s
9732   423A 2A            mov b, [d]
9733   423B 38 00 00      mov c, 0
9734   423E             ; --- START TERMS
9735   423E D7            push a
9736   423F 11            mov a, b
9737   4240 FD 2E 01 00   mov32 cb, $00000001
9737   4244 00 00 
9738   4246 56            add b, a
9739   4247 E4            pop a
9740   4248             ; --- END TERMS
9741   4248 E7            pop d
9742   4249 FD 43         mov [d], b
9743   424B             ; unsigned int         left; 
9744   424B 52 02 00      sub sp, 2
9745   424E             ; left = TO_FIXED(time_start + time_up) - stardate; 
9746   424E FA FD FF      lea d, [bp + -3] ; $left
9747   4251 DA            push d
9748   4252             ; --- START FUNCTION CALL
9749   4252 3B AA 6E      mov d, _time_start ; $time_start
9750   4255 2A            mov b, [d]
9751   4256 38 00 00      mov c, 0
9752   4259             ; --- START TERMS
9753   4259 D7            push a
9754   425A 11            mov a, b
9755   425B 3B AC 6E      mov d, _time_up ; $time_up
9756   425E 2A            mov b, [d]
9757   425F 38 00 00      mov c, 0
9758   4262 56            add b, a
9759   4263 E4            pop a
9760   4264             ; --- END TERMS
9761   4264 FD AB         swp b
9762   4266 D8            push b
9763   4267 07 17 04      call TO_FIXED
9764   426A 51 02 00      add sp, 2
9765   426D             ; --- END FUNCTION CALL
9766   426D             ; --- START TERMS
9767   426D D7            push a
9768   426E 11            mov a, b
9769   426F 3B C6 6E      mov d, _stardate ; $stardate
9770   4272 2A            mov b, [d]
9771   4273 38 00 00      mov c, 0
9772   4276 60            sub a, b
9773   4277 27            mov b, a
9774   4278 E4            pop a
9775   4279             ; --- END TERMS
9776   4279 E7            pop d
9777   427A FD 43         mov [d], b
9778   427C             ; puts("   Status Report:\n"); 
9779   427C             ; --- START FUNCTION CALL
9780   427C 26 33 7E      mov b, _s133 ; "   Status Report:\n"
9781   427F FD AB         swp b
9782   4281 D8            push b
9783   4282 07 C8 69      call puts
9784   4285 51 02 00      add sp, 2
9785   4288             ; --- END FUNCTION CALL
9786   4288             ; if (klingons_left > 1) 
9787   4288             _if220_cond:
9788   4288 3B A0 6E      mov d, _klingons_left ; $klingons_left
9789   428B 32            mov bl, [d]
9790   428C A7 00         mov bh, 0
9791   428E 38 00 00      mov c, 0
9792   4291             ; --- START RELATIONAL
9793   4291 D7            push a
9794   4292 11            mov a, b
9795   4293 FD 2E 01 00   mov32 cb, $00000001
9795   4297 00 00 
9796   4299 B0            cmp a, b
9797   429A FD 81         sgu ; > (unsigned)
9798   429C E4            pop a
9799   429D             ; --- END RELATIONAL
9800   429D C0 00 00      cmp b, 0
9801   42A0 C6 B4 42      je _if220_exit
9802   42A3             _if220_TRUE:
9803   42A3             ; plural = str_s; 
9804   42A3 FA FF FF      lea d, [bp + -1] ; $plural
9805   42A6 DA            push d
9806   42A7 3B 47 70      mov d, _str_s ; $str_s
9807   42AA 2A            mov b, [d]
9808   42AB 38 00 00      mov c, 0
9809   42AE E7            pop d
9810   42AF FD 43         mov [d], b
9811   42B1 0A B4 42      jmp _if220_exit
9812   42B4             _if220_exit:
9813   42B4             ; printf("Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 
9814   42B4             ; --- START FUNCTION CALL
9815   42B4 FA FD FF      lea d, [bp + -3] ; $left
9816   42B7 2A            mov b, [d]
9817   42B8 38 00 00      mov c, 0
9818   42BB             ; --- START FACTORS
9819   42BB D7            push a
9820   42BC FD D8         push g
9821   42BE 11            mov a, b
9822   42BF FD 7A         mov g, c
9823   42C1 FD 2E 0A 00   mov32 cb, $0000000a
9823   42C5 00 00 
9824   42C7 FD D8         push g ; save 'g' as the div instruction uses it
9825   42C9 AE            div a, b ; %, a: quotient, b: remainder
9826   42CA 11            mov a, b
9827   42CB FD F1         pop g
9828   42CD FD 38         mov c, g
9829   42CF 27            mov b, a
9830   42D0 FD F1         pop g
9831   42D2 E4            pop a
9832   42D3             ; --- END FACTORS
9833   42D3 FD AB         swp b
9834   42D5 D8            push b
9835   42D6             ; --- START FUNCTION CALL
9836   42D6 FA FD FF      lea d, [bp + -3] ; $left
9837   42D9 2A            mov b, [d]
9838   42DA 38 00 00      mov c, 0
9839   42DD FD AB         swp b
9840   42DF D8            push b
9841   42E0 07 68 04      call FROM_FIXED
9842   42E3 51 02 00      add sp, 2
9843   42E6             ; --- END FUNCTION CALL
9844   42E6 FD AB         swp b
9845   42E8 D8            push b
9846   42E9 3B A0 6E      mov d, _klingons_left ; $klingons_left
9847   42EC 32            mov bl, [d]
9848   42ED A7 00         mov bh, 0
9849   42EF 38 00 00      mov c, 0
9850   42F2 FD AB         swp b
9851   42F4 D8            push b
9852   42F5 FA FF FF      lea d, [bp + -1] ; $plural
9853   42F8 2A            mov b, [d]
9854   42F9 38 00 00      mov c, 0
9855   42FC FD AB         swp b
9856   42FE D8            push b
9857   42FF 26 46 7E      mov b, _s134 ; "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n"
9858   4302 FD AB         swp b
9859   4304 D8            push b
9860   4305 07 B4 60      call printf
9861   4308 51 09 00      add sp, 9
9862   430B             ; --- END FUNCTION CALL
9863   430B             ; if (starbases_left < 1) { 
9864   430B             _if225_cond:
9865   430B 3B CC 6D      mov d, _starbases_left ; $starbases_left
9866   430E 32            mov bl, [d]
9867   430F A7 00         mov bh, 0
9868   4311 38 00 00      mov c, 0
9869   4314             ; --- START RELATIONAL
9870   4314 D7            push a
9871   4315 11            mov a, b
9872   4316 FD 2E 01 00   mov32 cb, $00000001
9872   431A 00 00 
9873   431C B0            cmp a, b
9874   431D FD 73         slt ; < (signed)
9875   431F E4            pop a
9876   4320             ; --- END RELATIONAL
9877   4320 C0 00 00      cmp b, 0
9878   4323 C6 35 43      je _if225_else
9879   4326             _if225_TRUE:
9880   4326             ; puts("Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"); 
9881   4326             ; --- START FUNCTION CALL
9882   4326 26 88 7E      mov b, _s135 ; "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"
9883   4329 FD AB         swp b
9884   432B D8            push b
9885   432C 07 C8 69      call puts
9886   432F 51 02 00      add sp, 2
9887   4332             ; --- END FUNCTION CALL
9888   4332 0A 93 43      jmp _if225_exit
9889   4335             _if225_else:
9890   4335             ; plural = str_s; 
9891   4335 FA FF FF      lea d, [bp + -1] ; $plural
9892   4338 DA            push d
9893   4339 3B 47 70      mov d, _str_s ; $str_s
9894   433C 2A            mov b, [d]
9895   433D 38 00 00      mov c, 0
9896   4340 E7            pop d
9897   4341 FD 43         mov [d], b
9898   4343             ; if (starbases_left < 2) 
9899   4343             _if226_cond:
9900   4343 3B CC 6D      mov d, _starbases_left ; $starbases_left
9901   4346 32            mov bl, [d]
9902   4347 A7 00         mov bh, 0
9903   4349 38 00 00      mov c, 0
9904   434C             ; --- START RELATIONAL
9905   434C D7            push a
9906   434D 11            mov a, b
9907   434E FD 2E 02 00   mov32 cb, $00000002
9907   4352 00 00 
9908   4354 B0            cmp a, b
9909   4355 FD 73         slt ; < (signed)
9910   4357 E4            pop a
9911   4358             ; --- END RELATIONAL
9912   4358 C0 00 00      cmp b, 0
9913   435B C6 71 43      je _if226_exit
9914   435E             _if226_TRUE:
9915   435E             ; plural++; 
9916   435E FA FF FF      lea d, [bp + -1] ; $plural
9917   4361 2A            mov b, [d]
9918   4362 38 00 00      mov c, 0
9919   4365 FD 77         inc b
9920   4367 FA FF FF      lea d, [bp + -1] ; $plural
9921   436A FD 43         mov [d], b
9922   436C FD 7D         dec b
9923   436E 0A 71 43      jmp _if226_exit
9924   4371             _if226_exit:
9925   4371             ; printf("The Federation is maintaining %d starbase%s in the galaxy\n\n", starbases_left, plural); 
9926   4371             ; --- START FUNCTION CALL
9927   4371 FA FF FF      lea d, [bp + -1] ; $plural
9928   4374 2A            mov b, [d]
9929   4375 38 00 00      mov c, 0
9930   4378 FD AB         swp b
9931   437A D8            push b
9932   437B 3B CC 6D      mov d, _starbases_left ; $starbases_left
9933   437E 32            mov bl, [d]
9934   437F A7 00         mov bh, 0
9935   4381 38 00 00      mov c, 0
9936   4384 FD AB         swp b
9937   4386 D8            push b
9938   4387 26 DF 7E      mov b, _s136 ; "The Federation is maintaining %d starbase%s in the galaxy\n\n"
9939   438A FD AB         swp b
9940   438C D8            push b
9941   438D 07 B4 60      call printf
9942   4390 51 05 00      add sp, 5
9943   4393             ; --- END FUNCTION CALL
9944   4393             _if225_exit:
9945   4393 F9            leave
9946   4394 09            ret
9947   4395             
9948   4395             torpedo_data:
9949   4395 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9950   4398             ; int i; 
9951   4398 52 02 00      sub sp, 2
9952   439B             ; char *plural; 
9953   439B 52 02 00      sub sp, 2
9954   439E             ; plural = str_s + 1; 
9955   439E FA FD FF      lea d, [bp + -3] ; $plural
9956   43A1 DA            push d
9957   43A2 3B 47 70      mov d, _str_s ; $str_s
9958   43A5 2A            mov b, [d]
9959   43A6 38 00 00      mov c, 0
9960   43A9             ; --- START TERMS
9961   43A9 D7            push a
9962   43AA 11            mov a, b
9963   43AB FD 2E 01 00   mov32 cb, $00000001
9963   43AF 00 00 
9964   43B1 56            add b, a
9965   43B2 E4            pop a
9966   43B3             ; --- END TERMS
9967   43B3 E7            pop d
9968   43B4 FD 43         mov [d], b
9969   43B6             ; struct klingon *k; 
9970   43B6 52 02 00      sub sp, 2
9971   43B9             ; if (no_klingon()) 
9972   43B9             _if227_cond:
9973   43B9             ; --- START FUNCTION CALL
9974   43B9 07 5C 2D      call no_klingon
9975   43BC C0 00 00      cmp b, 0
9976   43BF C6 C7 43      je _if227_exit
9977   43C2             _if227_TRUE:
9978   43C2             ; return; 
9979   43C2 F9            leave
9980   43C3 09            ret
9981   43C4 0A C7 43      jmp _if227_exit
9982   43C7             _if227_exit:
9983   43C7             ; if (klingons > 1) 
9984   43C7             _if228_cond:
9985   43C7 3B 9E 6E      mov d, _klingons ; $klingons
9986   43CA 32            mov bl, [d]
9987   43CB A7 00         mov bh, 0
9988   43CD 38 00 00      mov c, 0
9989   43D0             ; --- START RELATIONAL
9990   43D0 D7            push a
9991   43D1 11            mov a, b
9992   43D2 FD 2E 01 00   mov32 cb, $00000001
9992   43D6 00 00 
9993   43D8 B0            cmp a, b
9994   43D9 FD 81         sgu ; > (unsigned)
9995   43DB E4            pop a
9996   43DC             ; --- END RELATIONAL
9997   43DC C0 00 00      cmp b, 0
9998   43DF C6 F5 43      je _if228_exit
9999   43E2             _if228_TRUE:
10000  43E2             ; plural--; 
10001  43E2 FA FD FF      lea d, [bp + -3] ; $plural
10002  43E5 2A            mov b, [d]
10003  43E6 38 00 00      mov c, 0
10004  43E9 FD 7D         dec b
10005  43EB FA FD FF      lea d, [bp + -3] ; $plural
10006  43EE FD 43         mov [d], b
10007  43F0 FD 77         inc b
10008  43F2 0A F5 43      jmp _if228_exit
10009  43F5             _if228_exit:
10010  43F5             ; printf("From Enterprise to Klingon battlecriuser%s:\n\n", plural); 
10011  43F5             ; --- START FUNCTION CALL
10012  43F5 FA FD FF      lea d, [bp + -3] ; $plural
10013  43F8 2A            mov b, [d]
10014  43F9 38 00 00      mov c, 0
10015  43FC FD AB         swp b
10016  43FE D8            push b
10017  43FF 26 1B 7F      mov b, _s137 ; "From Enterprise to Klingon battlecriuser%s:\n\n"
10018  4402 FD AB         swp b
10019  4404 D8            push b
10020  4405 07 B4 60      call printf
10021  4408 51 04 00      add sp, 4
10022  440B             ; --- END FUNCTION CALL
10023  440B             ; k = kdata; 
10024  440B FA FB FF      lea d, [bp + -5] ; $k
10025  440E DA            push d
10026  440F 3B 92 6E      mov d, _kdata_data ; $kdata
10027  4412 2D            mov b, d
10028  4413 38 00 00      mov c, 0
10029  4416 E7            pop d
10030  4417 FD 43         mov [d], b
10031  4419             ; for (i = 0; i <= 2; i++) { 
10032  4419             _for229_init:
10033  4419 FA FF FF      lea d, [bp + -1] ; $i
10034  441C DA            push d
10035  441D FD 2E 00 00   mov32 cb, $00000000
10035  4421 00 00 
10036  4423 E7            pop d
10037  4424 FD 43         mov [d], b
10038  4426             _for229_cond:
10039  4426 FA FF FF      lea d, [bp + -1] ; $i
10040  4429 2A            mov b, [d]
10041  442A 38 00 00      mov c, 0
10042  442D             ; --- START RELATIONAL
10043  442D D7            push a
10044  442E 11            mov a, b
10045  442F FD 2E 02 00   mov32 cb, $00000002
10045  4433 00 00 
10046  4435 B0            cmp a, b
10047  4436 FD 74         sle ; <= (signed)
10048  4438 E4            pop a
10049  4439             ; --- END RELATIONAL
10050  4439 C0 00 00      cmp b, 0
10051  443C C6 D5 44      je _for229_exit
10052  443F             _for229_block:
10053  443F             ; if (k->energy > 0) { 
10054  443F             _if230_cond:
10055  443F FA FB FF      lea d, [bp + -5] ; $k
10056  4442 FD 2A         mov d, [d]
10057  4444 58 02 00      add d, 2
10058  4447 2A            mov b, [d]
10059  4448 38 00 00      mov c, 0
10060  444B             ; --- START RELATIONAL
10061  444B D7            push a
10062  444C 11            mov a, b
10063  444D FD 2E 00 00   mov32 cb, $00000000
10063  4451 00 00 
10064  4453 B0            cmp a, b
10065  4454 FD 7F         sgt ; >
10066  4456 E4            pop a
10067  4457             ; --- END RELATIONAL
10068  4457 C0 00 00      cmp b, 0
10069  445A C6 B0 44      je _if230_exit
10070  445D             _if230_TRUE:
10071  445D             ; compute_vector(TO_FIXED00(k->y), 
10072  445D             ; --- START FUNCTION CALL
10073  445D 3B C4 6E      mov d, _ship_x ; $ship_x
10074  4460 2A            mov b, [d]
10075  4461 38 00 00      mov c, 0
10076  4464 FD AB         swp b
10077  4466 D8            push b
10078  4467 3B C2 6E      mov d, _ship_y ; $ship_y
10079  446A 2A            mov b, [d]
10080  446B 38 00 00      mov c, 0
10081  446E FD AB         swp b
10082  4470 D8            push b
10083  4471             ; --- START FUNCTION CALL
10084  4471 FA FB FF      lea d, [bp + -5] ; $k
10085  4474 FD 2A         mov d, [d]
10086  4476 58 01 00      add d, 1
10087  4479 32            mov bl, [d]
10088  447A A7 00         mov bh, 0
10089  447C 38 00 00      mov c, 0
10090  447F AB            snex b
10091  4480 FD AB         swp b
10092  4482 D8            push b
10093  4483 07 8B 04      call TO_FIXED00
10094  4486 51 02 00      add sp, 2
10095  4489             ; --- END FUNCTION CALL
10096  4489 FD AB         swp b
10097  448B D8            push b
10098  448C             ; --- START FUNCTION CALL
10099  448C FA FB FF      lea d, [bp + -5] ; $k
10100  448F FD 2A         mov d, [d]
10101  4491 58 00 00      add d, 0
10102  4494 32            mov bl, [d]
10103  4495 A7 00         mov bh, 0
10104  4497 38 00 00      mov c, 0
10105  449A AB            snex b
10106  449B FD AB         swp b
10107  449D D8            push b
10108  449E 07 8B 04      call TO_FIXED00
10109  44A1 51 02 00      add sp, 2
10110  44A4             ; --- END FUNCTION CALL
10111  44A4 FD AB         swp b
10112  44A6 D8            push b
10113  44A7 07 87 49      call compute_vector
10114  44AA 51 08 00      add sp, 8
10115  44AD             ; --- END FUNCTION CALL
10116  44AD 0A B0 44      jmp _if230_exit
10117  44B0             _if230_exit:
10118  44B0             ; k++; 
10119  44B0 FA FB FF      lea d, [bp + -5] ; $k
10120  44B3 2A            mov b, [d]
10121  44B4 38 00 00      mov c, 0
10122  44B7 11            mov a, b
10123  44B8 FD 77         inc b
10124  44BA FD 77         inc b
10125  44BC FA FB FF      lea d, [bp + -5] ; $k
10126  44BF FD 43         mov [d], b
10127  44C1 27            mov b, a
10128  44C2             _for229_update:
10129  44C2 FA FF FF      lea d, [bp + -1] ; $i
10130  44C5 2A            mov b, [d]
10131  44C6 38 00 00      mov c, 0
10132  44C9 11            mov a, b
10133  44CA FD 77         inc b
10134  44CC FA FF FF      lea d, [bp + -1] ; $i
10135  44CF FD 43         mov [d], b
10136  44D1 27            mov b, a
10137  44D2 0A 26 44      jmp _for229_cond
10138  44D5             _for229_exit:
10139  44D5 F9            leave
10140  44D6 09            ret
10141  44D7             
10142  44D7             nav_data:
10143  44D7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10144  44DA             ; if (starbases <= 0) { 
10145  44DA             _if231_cond:
10146  44DA 3B C9 6D      mov d, _starbases ; $starbases
10147  44DD 32            mov bl, [d]
10148  44DE A7 00         mov bh, 0
10149  44E0 38 00 00      mov c, 0
10150  44E3             ; --- START RELATIONAL
10151  44E3 D7            push a
10152  44E4 11            mov a, b
10153  44E5 FD 2E 00 00   mov32 cb, $00000000
10153  44E9 00 00 
10154  44EB B0            cmp a, b
10155  44EC FD 74         sle ; <= (signed)
10156  44EE E4            pop a
10157  44EF             ; --- END RELATIONAL
10158  44EF C0 00 00      cmp b, 0
10159  44F2 C6 06 45      je _if231_exit
10160  44F5             _if231_TRUE:
10161  44F5             ; puts("Mr. Spock reports,\n  'Sensors show no starbases in this quadrant.'\n"); 
10162  44F5             ; --- START FUNCTION CALL
10163  44F5 26 49 7F      mov b, _s138 ; "Mr. Spock reports,\n  'Sensors show no starbases in this quadrant.'\n"
10164  44F8 FD AB         swp b
10165  44FA D8            push b
10166  44FB 07 C8 69      call puts
10167  44FE 51 02 00      add sp, 2
10168  4501             ; --- END FUNCTION CALL
10169  4501             ; return; 
10170  4501 F9            leave
10171  4502 09            ret
10172  4503 0A 06 45      jmp _if231_exit
10173  4506             _if231_exit:
10174  4506             ; compute_vector(TO_FIXED00(base_y), TO_FIXED00(base_x), ship_y, ship_x); 
10175  4506             ; --- START FUNCTION CALL
10176  4506 3B C4 6E      mov d, _ship_x ; $ship_x
10177  4509 2A            mov b, [d]
10178  450A 38 00 00      mov c, 0
10179  450D FD AB         swp b
10180  450F D8            push b
10181  4510 3B C2 6E      mov d, _ship_y ; $ship_y
10182  4513 2A            mov b, [d]
10183  4514 38 00 00      mov c, 0
10184  4517 FD AB         swp b
10185  4519 D8            push b
10186  451A             ; --- START FUNCTION CALL
10187  451A 3B CB 6D      mov d, _base_x ; $base_x
10188  451D 32            mov bl, [d]
10189  451E A7 00         mov bh, 0
10190  4520 38 00 00      mov c, 0
10191  4523 AB            snex b
10192  4524 FD AB         swp b
10193  4526 D8            push b
10194  4527 07 8B 04      call TO_FIXED00
10195  452A 51 02 00      add sp, 2
10196  452D             ; --- END FUNCTION CALL
10197  452D FD AB         swp b
10198  452F D8            push b
10199  4530             ; --- START FUNCTION CALL
10200  4530 3B CA 6D      mov d, _base_y ; $base_y
10201  4533 32            mov bl, [d]
10202  4534 A7 00         mov bh, 0
10203  4536 38 00 00      mov c, 0
10204  4539 AB            snex b
10205  453A FD AB         swp b
10206  453C D8            push b
10207  453D 07 8B 04      call TO_FIXED00
10208  4540 51 02 00      add sp, 2
10209  4543             ; --- END FUNCTION CALL
10210  4543 FD AB         swp b
10211  4545 D8            push b
10212  4546 07 87 49      call compute_vector
10213  4549 51 08 00      add sp, 8
10214  454C             ; --- END FUNCTION CALL
10215  454C F9            leave
10216  454D 09            ret
10217  454E             
10218  454E             dirdist_calc:
10219  454E F8 00 00      enter 0 ; (push bp; mov bp, sp)
10220  4551             ; int        c1, a, w1, x; 
10221  4551 52 02 00      sub sp, 2
10222  4554 52 02 00      sub sp, 2
10223  4557 52 02 00      sub sp, 2
10224  455A 52 02 00      sub sp, 2
10225  455D             ; printf("Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 
10226  455D             ; --- START FUNCTION CALL
10227  455D             ; --- START FUNCTION CALL
10228  455D 3B C4 6E      mov d, _ship_x ; $ship_x
10229  4560 2A            mov b, [d]
10230  4561 38 00 00      mov c, 0
10231  4564 FD AB         swp b
10232  4566 D8            push b
10233  4567 07 DC 04      call FROM_FIXED00
10234  456A 51 02 00      add sp, 2
10235  456D             ; --- END FUNCTION CALL
10236  456D FD AB         swp b
10237  456F D8            push b
10238  4570             ; --- START FUNCTION CALL
10239  4570 3B C2 6E      mov d, _ship_y ; $ship_y
10240  4573 2A            mov b, [d]
10241  4574 38 00 00      mov c, 0
10242  4577 FD AB         swp b
10243  4579 D8            push b
10244  457A 07 DC 04      call FROM_FIXED00
10245  457D 51 02 00      add sp, 2
10246  4580             ; --- END FUNCTION CALL
10247  4580 FD AB         swp b
10248  4582 D8            push b
10249  4583 3B A5 6E      mov d, _quad_x ; $quad_x
10250  4586 2A            mov b, [d]
10251  4587 38 00 00      mov c, 0
10252  458A FD AB         swp b
10253  458C D8            push b
10254  458D 3B A3 6E      mov d, _quad_y ; $quad_y
10255  4590 2A            mov b, [d]
10256  4591 38 00 00      mov c, 0
10257  4594 FD AB         swp b
10258  4596 D8            push b
10259  4597 26 8D 7F      mov b, _s139 ; "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: "
10260  459A FD AB         swp b
10261  459C D8            push b
10262  459D 07 B4 60      call printf
10263  45A0 51 0A 00      add sp, 10
10264  45A3             ; --- END FUNCTION CALL
10265  45A3             ; c1 = TO_FIXED00(input_int()); 
10266  45A3 FA FF FF      lea d, [bp + -1] ; $c1
10267  45A6 DA            push d
10268  45A7             ; --- START FUNCTION CALL
10269  45A7             ; --- START FUNCTION CALL
10270  45A7 07 BD 08      call input_int
10271  45AA FD AB         swp b
10272  45AC D8            push b
10273  45AD 07 8B 04      call TO_FIXED00
10274  45B0 51 02 00      add sp, 2
10275  45B3             ; --- END FUNCTION CALL
10276  45B3 E7            pop d
10277  45B4 FD 43         mov [d], b
10278  45B6             ; if (c1 < 0 || c1 > 900 ) 
10279  45B6             _if232_cond:
10280  45B6 FA FF FF      lea d, [bp + -1] ; $c1
10281  45B9 2A            mov b, [d]
10282  45BA 38 00 00      mov c, 0
10283  45BD             ; --- START RELATIONAL
10284  45BD D7            push a
10285  45BE 11            mov a, b
10286  45BF FD 2E 00 00   mov32 cb, $00000000
10286  45C3 00 00 
10287  45C5 B0            cmp a, b
10288  45C6 FD 73         slt ; < (signed)
10289  45C8 E4            pop a
10290  45C9             ; --- END RELATIONAL
10291  45C9             ; --- START LOGICAL OR
10292  45C9 D7            push a
10293  45CA 11            mov a, b
10294  45CB FA FF FF      lea d, [bp + -1] ; $c1
10295  45CE 2A            mov b, [d]
10296  45CF 38 00 00      mov c, 0
10297  45D2             ; --- START RELATIONAL
10298  45D2 D7            push a
10299  45D3 11            mov a, b
10300  45D4 FD 2E 84 03   mov32 cb, $00000384
10300  45D8 00 00 
10301  45DA B0            cmp a, b
10302  45DB FD 7F         sgt ; >
10303  45DD E4            pop a
10304  45DE             ; --- END RELATIONAL
10305  45DE FD A8         sor a, b ; ||
10306  45E0 E4            pop a
10307  45E1             ; --- END LOGICAL OR
10308  45E1 C0 00 00      cmp b, 0
10309  45E4 C6 EC 45      je _if232_exit
10310  45E7             _if232_TRUE:
10311  45E7             ; return; 
10312  45E7 F9            leave
10313  45E8 09            ret
10314  45E9 0A EC 45      jmp _if232_exit
10315  45EC             _if232_exit:
10316  45EC             ; puts("Please enter initial Y coordinate: "); 
10317  45EC             ; --- START FUNCTION CALL
10318  45EC 26 F9 7F      mov b, _s140 ; "Please enter initial Y coordinate: "
10319  45EF FD AB         swp b
10320  45F1 D8            push b
10321  45F2 07 C8 69      call puts
10322  45F5 51 02 00      add sp, 2
10323  45F8             ; --- END FUNCTION CALL
10324  45F8             ; a = TO_FIXED00(input_int()); 
10325  45F8 FA FD FF      lea d, [bp + -3] ; $a
10326  45FB DA            push d
10327  45FC             ; --- START FUNCTION CALL
10328  45FC             ; --- START FUNCTION CALL
10329  45FC 07 BD 08      call input_int
10330  45FF FD AB         swp b
10331  4601 D8            push b
10332  4602 07 8B 04      call TO_FIXED00
10333  4605 51 02 00      add sp, 2
10334  4608             ; --- END FUNCTION CALL
10335  4608 E7            pop d
10336  4609 FD 43         mov [d], b
10337  460B             ; if (a < 0 || a > 900) 
10338  460B             _if233_cond:
10339  460B FA FD FF      lea d, [bp + -3] ; $a
10340  460E 2A            mov b, [d]
10341  460F 38 00 00      mov c, 0
10342  4612             ; --- START RELATIONAL
10343  4612 D7            push a
10344  4613 11            mov a, b
10345  4614 FD 2E 00 00   mov32 cb, $00000000
10345  4618 00 00 
10346  461A B0            cmp a, b
10347  461B FD 73         slt ; < (signed)
10348  461D E4            pop a
10349  461E             ; --- END RELATIONAL
10350  461E             ; --- START LOGICAL OR
10351  461E D7            push a
10352  461F 11            mov a, b
10353  4620 FA FD FF      lea d, [bp + -3] ; $a
10354  4623 2A            mov b, [d]
10355  4624 38 00 00      mov c, 0
10356  4627             ; --- START RELATIONAL
10357  4627 D7            push a
10358  4628 11            mov a, b
10359  4629 FD 2E 84 03   mov32 cb, $00000384
10359  462D 00 00 
10360  462F B0            cmp a, b
10361  4630 FD 7F         sgt ; >
10362  4632 E4            pop a
10363  4633             ; --- END RELATIONAL
10364  4633 FD A8         sor a, b ; ||
10365  4635 E4            pop a
10366  4636             ; --- END LOGICAL OR
10367  4636 C0 00 00      cmp b, 0
10368  4639 C6 41 46      je _if233_exit
10369  463C             _if233_TRUE:
10370  463C             ; return; 
10371  463C F9            leave
10372  463D 09            ret
10373  463E 0A 41 46      jmp _if233_exit
10374  4641             _if233_exit:
10375  4641             ; puts("Please enter final X coordinate: "); 
10376  4641             ; --- START FUNCTION CALL
10377  4641 26 1D 80      mov b, _s141 ; "Please enter final X coordinate: "
10378  4644 FD AB         swp b
10379  4646 D8            push b
10380  4647 07 C8 69      call puts
10381  464A 51 02 00      add sp, 2
10382  464D             ; --- END FUNCTION CALL
10383  464D             ; w1 = TO_FIXED00(input_int()); 
10384  464D FA FB FF      lea d, [bp + -5] ; $w1
10385  4650 DA            push d
10386  4651             ; --- START FUNCTION CALL
10387  4651             ; --- START FUNCTION CALL
10388  4651 07 BD 08      call input_int
10389  4654 FD AB         swp b
10390  4656 D8            push b
10391  4657 07 8B 04      call TO_FIXED00
10392  465A 51 02 00      add sp, 2
10393  465D             ; --- END FUNCTION CALL
10394  465D E7            pop d
10395  465E FD 43         mov [d], b
10396  4660             ; if (w1 < 0 || w1 > 900) 
10397  4660             _if234_cond:
10398  4660 FA FB FF      lea d, [bp + -5] ; $w1
10399  4663 2A            mov b, [d]
10400  4664 38 00 00      mov c, 0
10401  4667             ; --- START RELATIONAL
10402  4667 D7            push a
10403  4668 11            mov a, b
10404  4669 FD 2E 00 00   mov32 cb, $00000000
10404  466D 00 00 
10405  466F B0            cmp a, b
10406  4670 FD 73         slt ; < (signed)
10407  4672 E4            pop a
10408  4673             ; --- END RELATIONAL
10409  4673             ; --- START LOGICAL OR
10410  4673 D7            push a
10411  4674 11            mov a, b
10412  4675 FA FB FF      lea d, [bp + -5] ; $w1
10413  4678 2A            mov b, [d]
10414  4679 38 00 00      mov c, 0
10415  467C             ; --- START RELATIONAL
10416  467C D7            push a
10417  467D 11            mov a, b
10418  467E FD 2E 84 03   mov32 cb, $00000384
10418  4682 00 00 
10419  4684 B0            cmp a, b
10420  4685 FD 7F         sgt ; >
10421  4687 E4            pop a
10422  4688             ; --- END RELATIONAL
10423  4688 FD A8         sor a, b ; ||
10424  468A E4            pop a
10425  468B             ; --- END LOGICAL OR
10426  468B C0 00 00      cmp b, 0
10427  468E C6 96 46      je _if234_exit
10428  4691             _if234_TRUE:
10429  4691             ; return; 
10430  4691 F9            leave
10431  4692 09            ret
10432  4693 0A 96 46      jmp _if234_exit
10433  4696             _if234_exit:
10434  4696             ; puts("Please enter final Y coordinate: "); 
10435  4696             ; --- START FUNCTION CALL
10436  4696 26 3F 80      mov b, _s142 ; "Please enter final Y coordinate: "
10437  4699 FD AB         swp b
10438  469B D8            push b
10439  469C 07 C8 69      call puts
10440  469F 51 02 00      add sp, 2
10441  46A2             ; --- END FUNCTION CALL
10442  46A2             ; x = TO_FIXED00(input_int()); 
10443  46A2 FA F9 FF      lea d, [bp + -7] ; $x
10444  46A5 DA            push d
10445  46A6             ; --- START FUNCTION CALL
10446  46A6             ; --- START FUNCTION CALL
10447  46A6 07 BD 08      call input_int
10448  46A9 FD AB         swp b
10449  46AB D8            push b
10450  46AC 07 8B 04      call TO_FIXED00
10451  46AF 51 02 00      add sp, 2
10452  46B2             ; --- END FUNCTION CALL
10453  46B2 E7            pop d
10454  46B3 FD 43         mov [d], b
10455  46B5             ; if (x < 0 || x > 900) 
10456  46B5             _if235_cond:
10457  46B5 FA F9 FF      lea d, [bp + -7] ; $x
10458  46B8 2A            mov b, [d]
10459  46B9 38 00 00      mov c, 0
10460  46BC             ; --- START RELATIONAL
10461  46BC D7            push a
10462  46BD 11            mov a, b
10463  46BE FD 2E 00 00   mov32 cb, $00000000
10463  46C2 00 00 
10464  46C4 B0            cmp a, b
10465  46C5 FD 73         slt ; < (signed)
10466  46C7 E4            pop a
10467  46C8             ; --- END RELATIONAL
10468  46C8             ; --- START LOGICAL OR
10469  46C8 D7            push a
10470  46C9 11            mov a, b
10471  46CA FA F9 FF      lea d, [bp + -7] ; $x
10472  46CD 2A            mov b, [d]
10473  46CE 38 00 00      mov c, 0
10474  46D1             ; --- START RELATIONAL
10475  46D1 D7            push a
10476  46D2 11            mov a, b
10477  46D3 FD 2E 84 03   mov32 cb, $00000384
10477  46D7 00 00 
10478  46D9 B0            cmp a, b
10479  46DA FD 7F         sgt ; >
10480  46DC E4            pop a
10481  46DD             ; --- END RELATIONAL
10482  46DD FD A8         sor a, b ; ||
10483  46DF E4            pop a
10484  46E0             ; --- END LOGICAL OR
10485  46E0 C0 00 00      cmp b, 0
10486  46E3 C6 EB 46      je _if235_exit
10487  46E6             _if235_TRUE:
10488  46E6             ; return; 
10489  46E6 F9            leave
10490  46E7 09            ret
10491  46E8 0A EB 46      jmp _if235_exit
10492  46EB             _if235_exit:
10493  46EB             ; compute_vector(w1, x, c1, a); 
10494  46EB             ; --- START FUNCTION CALL
10495  46EB FA FD FF      lea d, [bp + -3] ; $a
10496  46EE 2A            mov b, [d]
10497  46EF 38 00 00      mov c, 0
10498  46F2 FD AB         swp b
10499  46F4 D8            push b
10500  46F5 FA FF FF      lea d, [bp + -1] ; $c1
10501  46F8 2A            mov b, [d]
10502  46F9 38 00 00      mov c, 0
10503  46FC FD AB         swp b
10504  46FE D8            push b
10505  46FF FA F9 FF      lea d, [bp + -7] ; $x
10506  4702 2A            mov b, [d]
10507  4703 38 00 00      mov c, 0
10508  4706 FD AB         swp b
10509  4708 D8            push b
10510  4709 FA FB FF      lea d, [bp + -5] ; $w1
10511  470C 2A            mov b, [d]
10512  470D 38 00 00      mov c, 0
10513  4710 FD AB         swp b
10514  4712 D8            push b
10515  4713 07 87 49      call compute_vector
10516  4716 51 08 00      add sp, 8
10517  4719             ; --- END FUNCTION CALL
10518  4719 F9            leave
10519  471A 09            ret
10520  471B             
10521  471B             galaxy_map:
10522  471B F8 00 00      enter 0 ; (push bp; mov bp, sp)
10523  471E             ; int i, j, j0; 
10524  471E 52 02 00      sub sp, 2
10525  4721 52 02 00      sub sp, 2
10526  4724 52 02 00      sub sp, 2
10527  4727             ; printf("\n                   The Galaxy\n\n"); 
10528  4727             ; --- START FUNCTION CALL
10529  4727 26 61 80      mov b, _s143 ; "\n                   The Galaxy\n\n"
10530  472A FD AB         swp b
10531  472C D8            push b
10532  472D 07 B4 60      call printf
10533  4730 51 02 00      add sp, 2
10534  4733             ; --- END FUNCTION CALL
10535  4733             ; printf("    1     2     3     4     5     6     7     8\n"); 
10536  4733             ; --- START FUNCTION CALL
10537  4733 26 82 80      mov b, _s144 ; "    1     2     3     4     5     6     7     8\n"
10538  4736 FD AB         swp b
10539  4738 D8            push b
10540  4739 07 B4 60      call printf
10541  473C 51 02 00      add sp, 2
10542  473F             ; --- END FUNCTION CALL
10543  473F             ; for (i = 1; i <= 8; i++) { 
10544  473F             _for236_init:
10545  473F FA FF FF      lea d, [bp + -1] ; $i
10546  4742 DA            push d
10547  4743 FD 2E 01 00   mov32 cb, $00000001
10547  4747 00 00 
10548  4749 E7            pop d
10549  474A FD 43         mov [d], b
10550  474C             _for236_cond:
10551  474C FA FF FF      lea d, [bp + -1] ; $i
10552  474F 2A            mov b, [d]
10553  4750 38 00 00      mov c, 0
10554  4753             ; --- START RELATIONAL
10555  4753 D7            push a
10556  4754 11            mov a, b
10557  4755 FD 2E 08 00   mov32 cb, $00000008
10557  4759 00 00 
10558  475B B0            cmp a, b
10559  475C FD 74         sle ; <= (signed)
10560  475E E4            pop a
10561  475F             ; --- END RELATIONAL
10562  475F C0 00 00      cmp b, 0
10563  4762 C6 75 49      je _for236_exit
10564  4765             _for236_block:
10565  4765             ; printf("%s%d ", gm_1, i); 
10566  4765             ; --- START FUNCTION CALL
10567  4765 FA FF FF      lea d, [bp + -1] ; $i
10568  4768 2A            mov b, [d]
10569  4769 38 00 00      mov c, 0
10570  476C FD AB         swp b
10571  476E D8            push b
10572  476F 3B 7C 70      mov d, _gm_1 ; $gm_1
10573  4772 2A            mov b, [d]
10574  4773 38 00 00      mov c, 0
10575  4776 FD AB         swp b
10576  4778 D8            push b
10577  4779 26 B3 80      mov b, _s145 ; "%s%d "
10578  477C FD AB         swp b
10579  477E D8            push b
10580  477F 07 B4 60      call printf
10581  4782 51 06 00      add sp, 6
10582  4785             ; --- END FUNCTION CALL
10583  4785             ; quadrant_name(1, i, 1); 
10584  4785             ; --- START FUNCTION CALL
10585  4785 FD 2E 01 00   mov32 cb, $00000001
10585  4789 00 00 
10586  478B DD            push bl
10587  478C FA FF FF      lea d, [bp + -1] ; $i
10588  478F 2A            mov b, [d]
10589  4790 38 00 00      mov c, 0
10590  4793 DD            push bl
10591  4794 FD 2E 01 00   mov32 cb, $00000001
10591  4798 00 00 
10592  479A DD            push bl
10593  479B 07 FB 59      call quadrant_name
10594  479E 51 03 00      add sp, 3
10595  47A1             ; --- END FUNCTION CALL
10596  47A1             ; j0 = (int) (11 - (strlen(quadname) / 2)); 
10597  47A1 FA FB FF      lea d, [bp + -5] ; $j0
10598  47A4 DA            push d
10599  47A5 FD 2E 0B 00   mov32 cb, $0000000b
10599  47A9 00 00 
10600  47AB             ; --- START TERMS
10601  47AB D7            push a
10602  47AC 11            mov a, b
10603  47AD             ; --- START FUNCTION CALL
10604  47AD 3B 08 6F      mov d, _quadname_data ; $quadname
10605  47B0 2D            mov b, d
10606  47B1 38 00 00      mov c, 0
10607  47B4 FD AB         swp b
10608  47B6 D8            push b
10609  47B7 07 59 60      call strlen
10610  47BA 51 02 00      add sp, 2
10611  47BD             ; --- END FUNCTION CALL
10612  47BD             ; --- START FACTORS
10613  47BD D7            push a
10614  47BE FD D8         push g
10615  47C0 11            mov a, b
10616  47C1 FD 7A         mov g, c
10617  47C3 FD 2E 02 00   mov32 cb, $00000002
10617  47C7 00 00 
10618  47C9 FD D8         push g ; save 'g' as the div instruction uses it
10619  47CB AE            div a, b ; /, a: quotient, b: remainder
10620  47CC FD F1         pop g
10621  47CE FD 38         mov c, g
10622  47D0 27            mov b, a
10623  47D1 FD F1         pop g
10624  47D3 E4            pop a
10625  47D4             ; --- END FACTORS
10626  47D4 60            sub a, b
10627  47D5 27            mov b, a
10628  47D6 E4            pop a
10629  47D7             ; --- END TERMS
10630  47D7 E7            pop d
10631  47D8 FD 43         mov [d], b
10632  47DA             ; for (j = 0; j < j0; j++) 
10633  47DA             _for245_init:
10634  47DA FA FD FF      lea d, [bp + -3] ; $j
10635  47DD DA            push d
10636  47DE FD 2E 00 00   mov32 cb, $00000000
10636  47E2 00 00 
10637  47E4 E7            pop d
10638  47E5 FD 43         mov [d], b
10639  47E7             _for245_cond:
10640  47E7 FA FD FF      lea d, [bp + -3] ; $j
10641  47EA 2A            mov b, [d]
10642  47EB 38 00 00      mov c, 0
10643  47EE             ; --- START RELATIONAL
10644  47EE D7            push a
10645  47EF 11            mov a, b
10646  47F0 FA FB FF      lea d, [bp + -5] ; $j0
10647  47F3 2A            mov b, [d]
10648  47F4 38 00 00      mov c, 0
10649  47F7 B0            cmp a, b
10650  47F8 FD 73         slt ; < (signed)
10651  47FA E4            pop a
10652  47FB             ; --- END RELATIONAL
10653  47FB C0 00 00      cmp b, 0
10654  47FE C6 21 48      je _for245_exit
10655  4801             _for245_block:
10656  4801             ; putchar(' '); 
10657  4801             ; --- START FUNCTION CALL
10658  4801 FD 2E 20 00   mov32 cb, $00000020
10658  4805 00 00 
10659  4807 DD            push bl
10660  4808 07 33 65      call putchar
10661  480B 51 01 00      add sp, 1
10662  480E             ; --- END FUNCTION CALL
10663  480E             _for245_update:
10664  480E FA FD FF      lea d, [bp + -3] ; $j
10665  4811 2A            mov b, [d]
10666  4812 38 00 00      mov c, 0
10667  4815 11            mov a, b
10668  4816 FD 77         inc b
10669  4818 FA FD FF      lea d, [bp + -3] ; $j
10670  481B FD 43         mov [d], b
10671  481D 27            mov b, a
10672  481E 0A E7 47      jmp _for245_cond
10673  4821             _for245_exit:
10674  4821             ; puts(quadname); 
10675  4821             ; --- START FUNCTION CALL
10676  4821 3B 08 6F      mov d, _quadname_data ; $quadname
10677  4824 2D            mov b, d
10678  4825 38 00 00      mov c, 0
10679  4828 FD AB         swp b
10680  482A D8            push b
10681  482B 07 C8 69      call puts
10682  482E 51 02 00      add sp, 2
10683  4831             ; --- END FUNCTION CALL
10684  4831             ; for (j = 0; j < j0; j++) 
10685  4831             _for246_init:
10686  4831 FA FD FF      lea d, [bp + -3] ; $j
10687  4834 DA            push d
10688  4835 FD 2E 00 00   mov32 cb, $00000000
10688  4839 00 00 
10689  483B E7            pop d
10690  483C FD 43         mov [d], b
10691  483E             _for246_cond:
10692  483E FA FD FF      lea d, [bp + -3] ; $j
10693  4841 2A            mov b, [d]
10694  4842 38 00 00      mov c, 0
10695  4845             ; --- START RELATIONAL
10696  4845 D7            push a
10697  4846 11            mov a, b
10698  4847 FA FB FF      lea d, [bp + -5] ; $j0
10699  484A 2A            mov b, [d]
10700  484B 38 00 00      mov c, 0
10701  484E B0            cmp a, b
10702  484F FD 73         slt ; < (signed)
10703  4851 E4            pop a
10704  4852             ; --- END RELATIONAL
10705  4852 C0 00 00      cmp b, 0
10706  4855 C6 78 48      je _for246_exit
10707  4858             _for246_block:
10708  4858             ; putchar(' '); 
10709  4858             ; --- START FUNCTION CALL
10710  4858 FD 2E 20 00   mov32 cb, $00000020
10710  485C 00 00 
10711  485E DD            push bl
10712  485F 07 33 65      call putchar
10713  4862 51 01 00      add sp, 1
10714  4865             ; --- END FUNCTION CALL
10715  4865             _for246_update:
10716  4865 FA FD FF      lea d, [bp + -3] ; $j
10717  4868 2A            mov b, [d]
10718  4869 38 00 00      mov c, 0
10719  486C 11            mov a, b
10720  486D FD 77         inc b
10721  486F FA FD FF      lea d, [bp + -3] ; $j
10722  4872 FD 43         mov [d], b
10723  4874 27            mov b, a
10724  4875 0A 3E 48      jmp _for246_cond
10725  4878             _for246_exit:
10726  4878             ; if (!(strlen(quadname) % 2)) 
10727  4878             _if247_cond:
10728  4878             ; --- START FUNCTION CALL
10729  4878 3B 08 6F      mov d, _quadname_data ; $quadname
10730  487B 2D            mov b, d
10731  487C 38 00 00      mov c, 0
10732  487F FD AB         swp b
10733  4881 D8            push b
10734  4882 07 59 60      call strlen
10735  4885 51 02 00      add sp, 2
10736  4888             ; --- END FUNCTION CALL
10737  4888             ; --- START FACTORS
10738  4888 D7            push a
10739  4889 FD D8         push g
10740  488B 11            mov a, b
10741  488C FD 7A         mov g, c
10742  488E FD 2E 02 00   mov32 cb, $00000002
10742  4892 00 00 
10743  4894 FD D8         push g ; save 'g' as the div instruction uses it
10744  4896 AE            div a, b ; %, a: quotient, b: remainder
10745  4897 11            mov a, b
10746  4898 FD F1         pop g
10747  489A FD 38         mov c, g
10748  489C 27            mov b, a
10749  489D FD F1         pop g
10750  489F E4            pop a
10751  48A0             ; --- END FACTORS
10752  48A0 C0 00 00      cmp b, 0
10753  48A3 C6 B6 48      je _if247_exit
10754  48A6             _if247_TRUE:
10755  48A6             ; putchar(' '); 
10756  48A6             ; --- START FUNCTION CALL
10757  48A6 FD 2E 20 00   mov32 cb, $00000020
10757  48AA 00 00 
10758  48AC DD            push bl
10759  48AD 07 33 65      call putchar
10760  48B0 51 01 00      add sp, 1
10761  48B3             ; --- END FUNCTION CALL
10762  48B3 0A B6 48      jmp _if247_exit
10763  48B6             _if247_exit:
10764  48B6             ; quadrant_name(1, i, 5); 
10765  48B6             ; --- START FUNCTION CALL
10766  48B6 FD 2E 05 00   mov32 cb, $00000005
10766  48BA 00 00 
10767  48BC DD            push bl
10768  48BD FA FF FF      lea d, [bp + -1] ; $i
10769  48C0 2A            mov b, [d]
10770  48C1 38 00 00      mov c, 0
10771  48C4 DD            push bl
10772  48C5 FD 2E 01 00   mov32 cb, $00000001
10772  48C9 00 00 
10773  48CB DD            push bl
10774  48CC 07 FB 59      call quadrant_name
10775  48CF 51 03 00      add sp, 3
10776  48D2             ; --- END FUNCTION CALL
10777  48D2             ; j0 = (int) (12 - (strlen(quadname) / 2)); 
10778  48D2 FA FB FF      lea d, [bp + -5] ; $j0
10779  48D5 DA            push d
10780  48D6 FD 2E 0C 00   mov32 cb, $0000000c
10780  48DA 00 00 
10781  48DC             ; --- START TERMS
10782  48DC D7            push a
10783  48DD 11            mov a, b
10784  48DE             ; --- START FUNCTION CALL
10785  48DE 3B 08 6F      mov d, _quadname_data ; $quadname
10786  48E1 2D            mov b, d
10787  48E2 38 00 00      mov c, 0
10788  48E5 FD AB         swp b
10789  48E7 D8            push b
10790  48E8 07 59 60      call strlen
10791  48EB 51 02 00      add sp, 2
10792  48EE             ; --- END FUNCTION CALL
10793  48EE             ; --- START FACTORS
10794  48EE D7            push a
10795  48EF FD D8         push g
10796  48F1 11            mov a, b
10797  48F2 FD 7A         mov g, c
10798  48F4 FD 2E 02 00   mov32 cb, $00000002
10798  48F8 00 00 
10799  48FA FD D8         push g ; save 'g' as the div instruction uses it
10800  48FC AE            div a, b ; /, a: quotient, b: remainder
10801  48FD FD F1         pop g
10802  48FF FD 38         mov c, g
10803  4901 27            mov b, a
10804  4902 FD F1         pop g
10805  4904 E4            pop a
10806  4905             ; --- END FACTORS
10807  4905 60            sub a, b
10808  4906 27            mov b, a
10809  4907 E4            pop a
10810  4908             ; --- END TERMS
10811  4908 E7            pop d
10812  4909 FD 43         mov [d], b
10813  490B             ; for (j = 0; j < j0; j++) 
10814  490B             _for260_init:
10815  490B FA FD FF      lea d, [bp + -3] ; $j
10816  490E DA            push d
10817  490F FD 2E 00 00   mov32 cb, $00000000
10817  4913 00 00 
10818  4915 E7            pop d
10819  4916 FD 43         mov [d], b
10820  4918             _for260_cond:
10821  4918 FA FD FF      lea d, [bp + -3] ; $j
10822  491B 2A            mov b, [d]
10823  491C 38 00 00      mov c, 0
10824  491F             ; --- START RELATIONAL
10825  491F D7            push a
10826  4920 11            mov a, b
10827  4921 FA FB FF      lea d, [bp + -5] ; $j0
10828  4924 2A            mov b, [d]
10829  4925 38 00 00      mov c, 0
10830  4928 B0            cmp a, b
10831  4929 FD 73         slt ; < (signed)
10832  492B E4            pop a
10833  492C             ; --- END RELATIONAL
10834  492C C0 00 00      cmp b, 0
10835  492F C6 52 49      je _for260_exit
10836  4932             _for260_block:
10837  4932             ; putchar(' '); 
10838  4932             ; --- START FUNCTION CALL
10839  4932 FD 2E 20 00   mov32 cb, $00000020
10839  4936 00 00 
10840  4938 DD            push bl
10841  4939 07 33 65      call putchar
10842  493C 51 01 00      add sp, 1
10843  493F             ; --- END FUNCTION CALL
10844  493F             _for260_update:
10845  493F FA FD FF      lea d, [bp + -3] ; $j
10846  4942 2A            mov b, [d]
10847  4943 38 00 00      mov c, 0
10848  4946 11            mov a, b
10849  4947 FD 77         inc b
10850  4949 FA FD FF      lea d, [bp + -3] ; $j
10851  494C FD 43         mov [d], b
10852  494E 27            mov b, a
10853  494F 0A 18 49      jmp _for260_cond
10854  4952             _for260_exit:
10855  4952             ; puts(quadname); 
10856  4952             ; --- START FUNCTION CALL
10857  4952 3B 08 6F      mov d, _quadname_data ; $quadname
10858  4955 2D            mov b, d
10859  4956 38 00 00      mov c, 0
10860  4959 FD AB         swp b
10861  495B D8            push b
10862  495C 07 C8 69      call puts
10863  495F 51 02 00      add sp, 2
10864  4962             ; --- END FUNCTION CALL
10865  4962             _for236_update:
10866  4962 FA FF FF      lea d, [bp + -1] ; $i
10867  4965 2A            mov b, [d]
10868  4966 38 00 00      mov c, 0
10869  4969 11            mov a, b
10870  496A FD 77         inc b
10871  496C FA FF FF      lea d, [bp + -1] ; $i
10872  496F FD 43         mov [d], b
10873  4971 27            mov b, a
10874  4972 0A 4C 47      jmp _for236_cond
10875  4975             _for236_exit:
10876  4975             ; puts(gm_1); 
10877  4975             ; --- START FUNCTION CALL
10878  4975 3B 7C 70      mov d, _gm_1 ; $gm_1
10879  4978 2A            mov b, [d]
10880  4979 38 00 00      mov c, 0
10881  497C FD AB         swp b
10882  497E D8            push b
10883  497F 07 C8 69      call puts
10884  4982 51 02 00      add sp, 2
10885  4985             ; --- END FUNCTION CALL
10886  4985 F9            leave
10887  4986 09            ret
10888  4987             
10889  4987             compute_vector:
10890  4987 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10891  498A             ; long unsigned int         xl, al; 
10892  498A 52 04 00      sub sp, 4
10893  498D 52 04 00      sub sp, 4
10894  4990             ; puts("  DIRECTION = "); 
10895  4990             ; --- START FUNCTION CALL
10896  4990 26 B9 80      mov b, _s146 ; "  DIRECTION = "
10897  4993 FD AB         swp b
10898  4995 D8            push b
10899  4996 07 C8 69      call puts
10900  4999 51 02 00      add sp, 2
10901  499C             ; --- END FUNCTION CALL
10902  499C             ; x = x - a; 
10903  499C FA 07 00      lea d, [bp + 7] ; $x
10904  499F DA            push d
10905  49A0 FA 07 00      lea d, [bp + 7] ; $x
10906  49A3 2A            mov b, [d]
10907  49A4 38 00 00      mov c, 0
10908  49A7             ; --- START TERMS
10909  49A7 D7            push a
10910  49A8 11            mov a, b
10911  49A9 FA 0B 00      lea d, [bp + 11] ; $a
10912  49AC 2A            mov b, [d]
10913  49AD 38 00 00      mov c, 0
10914  49B0 60            sub a, b
10915  49B1 27            mov b, a
10916  49B2 E4            pop a
10917  49B3             ; --- END TERMS
10918  49B3 E7            pop d
10919  49B4 FD 43         mov [d], b
10920  49B6             ; a = c1 - w1; 
10921  49B6 FA 0B 00      lea d, [bp + 11] ; $a
10922  49B9 DA            push d
10923  49BA FA 09 00      lea d, [bp + 9] ; $c1
10924  49BD 2A            mov b, [d]
10925  49BE 38 00 00      mov c, 0
10926  49C1             ; --- START TERMS
10927  49C1 D7            push a
10928  49C2 11            mov a, b
10929  49C3 FA 05 00      lea d, [bp + 5] ; $w1
10930  49C6 2A            mov b, [d]
10931  49C7 38 00 00      mov c, 0
10932  49CA 60            sub a, b
10933  49CB 27            mov b, a
10934  49CC E4            pop a
10935  49CD             ; --- END TERMS
10936  49CD E7            pop d
10937  49CE FD 43         mov [d], b
10938  49D0             ; xl = abs(x); 
10939  49D0 FA FD FF      lea d, [bp + -3] ; $xl
10940  49D3 DA            push d
10941  49D4             ; --- START FUNCTION CALL
10942  49D4 FA 07 00      lea d, [bp + 7] ; $x
10943  49D7 2A            mov b, [d]
10944  49D8 38 00 00      mov c, 0
10945  49DB FD AB         swp b
10946  49DD D8            push b
10947  49DE 07 A9 6B      call abs
10948  49E1 51 02 00      add sp, 2
10949  49E4             ; --- END FUNCTION CALL
10950  49E4 E7            pop d
10951  49E5 FD 43         mov [d], b
10952  49E7 26 00 00      mov b, 0
10953  49EA FD 44 02 00   mov [d + 2], b
10954  49EE             ; al = abs(a); 
10955  49EE FA F9 FF      lea d, [bp + -7] ; $al
10956  49F1 DA            push d
10957  49F2             ; --- START FUNCTION CALL
10958  49F2 FA 0B 00      lea d, [bp + 11] ; $a
10959  49F5 2A            mov b, [d]
10960  49F6 38 00 00      mov c, 0
10961  49F9 FD AB         swp b
10962  49FB D8            push b
10963  49FC 07 A9 6B      call abs
10964  49FF 51 02 00      add sp, 2
10965  4A02             ; --- END FUNCTION CALL
10966  4A02 E7            pop d
10967  4A03 FD 43         mov [d], b
10968  4A05 26 00 00      mov b, 0
10969  4A08 FD 44 02 00   mov [d + 2], b
10970  4A0C             ; if (x < 0) { 
10971  4A0C             _if261_cond:
10972  4A0C FA 07 00      lea d, [bp + 7] ; $x
10973  4A0F 2A            mov b, [d]
10974  4A10 38 00 00      mov c, 0
10975  4A13             ; --- START RELATIONAL
10976  4A13 D7            push a
10977  4A14 11            mov a, b
10978  4A15 FD 2E 00 00   mov32 cb, $00000000
10978  4A19 00 00 
10979  4A1B B0            cmp a, b
10980  4A1C FD 73         slt ; < (signed)
10981  4A1E E4            pop a
10982  4A1F             ; --- END RELATIONAL
10983  4A1F C0 00 00      cmp b, 0
10984  4A22 C6 76 4C      je _if261_else
10985  4A25             _if261_TRUE:
10986  4A25             ; if (a > 0) { 
10987  4A25             _if262_cond:
10988  4A25 FA 0B 00      lea d, [bp + 11] ; $a
10989  4A28 2A            mov b, [d]
10990  4A29 38 00 00      mov c, 0
10991  4A2C             ; --- START RELATIONAL
10992  4A2C D7            push a
10993  4A2D 11            mov a, b
10994  4A2E FD 2E 00 00   mov32 cb, $00000000
10994  4A32 00 00 
10995  4A34 B0            cmp a, b
10996  4A35 FD 7F         sgt ; >
10997  4A37 E4            pop a
10998  4A38             ; --- END RELATIONAL
10999  4A38 C0 00 00      cmp b, 0
11000  4A3B C6 3B 4C      je _if262_else
11001  4A3E             _if262_TRUE:
11002  4A3E             ; c1 = 300; 
11003  4A3E FA 09 00      lea d, [bp + 9] ; $c1
11004  4A41 DA            push d
11005  4A42 FD 2E 2C 01   mov32 cb, $0000012c
11005  4A46 00 00 
11006  4A48 E7            pop d
11007  4A49 FD 43         mov [d], b
11008  4A4B             ; if (al >= xl) 
11009  4A4B             _if263_cond:
11010  4A4B FA F9 FF      lea d, [bp + -7] ; $al
11011  4A4E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11012  4A51 FD 39         mov c, b ; And place it into C
11013  4A53 2A            mov b, [d] ; Lower Word in B
11014  4A54             ; --- START RELATIONAL
11015  4A54 D7            push a
11016  4A55 FD D8         push g
11017  4A57 11            mov a, b
11018  4A58 FD 7A         mov g, c
11019  4A5A FA FD FF      lea d, [bp + -3] ; $xl
11020  4A5D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11021  4A60 FD 39         mov c, b ; And place it into C
11022  4A62 2A            mov b, [d] ; Lower Word in B
11023  4A63 FD AF         cmp32 ga, cb
11024  4A65 FD 82         sgeu
11025  4A67 FD F1         pop g
11026  4A69 E4            pop a
11027  4A6A             ; --- END RELATIONAL
11028  4A6A C0 00 00      cmp b, 0
11029  4A6D C6 03 4B      je _if263_else
11030  4A70             _if263_TRUE:
11031  4A70             ; printf("%s", print100(c1 + ((xl * 100) / al))); 
11032  4A70             ; --- START FUNCTION CALL
11033  4A70             ; --- START FUNCTION CALL
11034  4A70 FA 09 00      lea d, [bp + 9] ; $c1
11035  4A73 2A            mov b, [d]
11036  4A74 38 00 00      mov c, 0
11037  4A77             ; --- START TERMS
11038  4A77 D7            push a
11039  4A78 11            mov a, b
11040  4A79 FA FD FF      lea d, [bp + -3] ; $xl
11041  4A7C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11042  4A7F FD 39         mov c, b ; And place it into C
11043  4A81 2A            mov b, [d] ; Lower Word in B
11044  4A82             ; --- START FACTORS
11045  4A82 D7            push a
11046  4A83 FD D8         push g
11047  4A85 11            mov a, b
11048  4A86 FD 7A         mov g, c
11049  4A88 FD 2E 64 00   mov32 cb, $00000064
11049  4A8C 00 00 
11050  4A8E D7            push a     ; save left operand
11051  4A8F 8E            xor a, b   ; xor sign bits
11052  4A90 FD AA         swp a      ; swap bytes
11053  4A92 83            mov cl, al ; save result of xor into 'dl'
11054  4A93 E4            pop a      ; restore left side operator
11055  4A94 DF            push cl    ; save result of xor above
11056  4A95 FD AA         swp a  
11057  4A97 93 80         test al, $80  
11058  4A99 FD AA         swp a  
11059  4A9B C6 A0 4A      jz skip_invert_a_310  
11060  4A9E FD 95         neg a 
11061  4AA0             skip_invert_a_310:   
11062  4AA0 FD AB         swp b
11063  4AA2 FD 93 80      test bl, $80  
11064  4AA5 FD AB         swp b
11065  4AA7 C6 AC 4A      jz skip_invert_b_310  
11066  4AAA FD 97         neg b 
11067  4AAC             skip_invert_b_310:   
11068  4AAC AC            mul a, b ; *
11069  4AAD FD 78         mov g, a
11070  4AAF 11            mov a, b
11071  4AB0 EA            pop bl
11072  4AB1 FD 93 80      test bl, $80
11073  4AB4 C6 C1 4A      jz _same_signs_310
11074  4AB7 2F            mov bl, al
11075  4AB8 95            not a
11076  4AB9 FD 97         neg b
11077  4ABB 5B 00 00      adc a, 0
11078  4ABE FD 78         mov g, a
11079  4AC0 11            mov a, b
11080  4AC1             _same_signs_310:
11081  4AC1 FD 38         mov c, g
11082  4AC3 27            mov b, a
11083  4AC4 FD F1         pop g
11084  4AC6 E4            pop a
11085  4AC7             ; --- END FACTORS
11086  4AC7             ; --- START FACTORS
11087  4AC7 D7            push a
11088  4AC8 FD D8         push g
11089  4ACA 11            mov a, b
11090  4ACB FD 7A         mov g, c
11091  4ACD FA F9 FF      lea d, [bp + -7] ; $al
11092  4AD0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11093  4AD3 FD 39         mov c, b ; And place it into C
11094  4AD5 2A            mov b, [d] ; Lower Word in B
11095  4AD6 FD D8         push g ; save 'g' as the div instruction uses it
11096  4AD8 AE            div a, b ; /, a: quotient, b: remainder
11097  4AD9 FD F1         pop g
11098  4ADB FD 38         mov c, g
11099  4ADD 27            mov b, a
11100  4ADE FD F1         pop g
11101  4AE0 E4            pop a
11102  4AE1             ; --- END FACTORS
11103  4AE1 FD 22 00 00   mov g, 0
11104  4AE5 FD 15         add32 cb, ga
11105  4AE7 E4            pop a
11106  4AE8             ; --- END TERMS
11107  4AE8 FD AB         swp b
11108  4AEA D8            push b
11109  4AEB 07 12 09      call print100
11110  4AEE 51 02 00      add sp, 2
11111  4AF1             ; --- END FUNCTION CALL
11112  4AF1 FD AB         swp b
11113  4AF3 D8            push b
11114  4AF4 26 C8 80      mov b, _s147 ; "%s"
11115  4AF7 FD AB         swp b
11116  4AF9 D8            push b
11117  4AFA 07 B4 60      call printf
11118  4AFD 51 04 00      add sp, 4
11119  4B00             ; --- END FUNCTION CALL
11120  4B00 0A EF 4B      jmp _if263_exit
11121  4B03             _if263_else:
11122  4B03             ; printf("%s", print100(c1 + ((((xl * 2) - al) * 100)  / xl))); 
11123  4B03             ; --- START FUNCTION CALL
11124  4B03             ; --- START FUNCTION CALL
11125  4B03 FA 09 00      lea d, [bp + 9] ; $c1
11126  4B06 2A            mov b, [d]
11127  4B07 38 00 00      mov c, 0
11128  4B0A             ; --- START TERMS
11129  4B0A D7            push a
11130  4B0B 11            mov a, b
11131  4B0C FA FD FF      lea d, [bp + -3] ; $xl
11132  4B0F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11133  4B12 FD 39         mov c, b ; And place it into C
11134  4B14 2A            mov b, [d] ; Lower Word in B
11135  4B15             ; --- START FACTORS
11136  4B15 D7            push a
11137  4B16 FD D8         push g
11138  4B18 11            mov a, b
11139  4B19 FD 7A         mov g, c
11140  4B1B FD 2E 02 00   mov32 cb, $00000002
11140  4B1F 00 00 
11141  4B21 D7            push a     ; save left operand
11142  4B22 8E            xor a, b   ; xor sign bits
11143  4B23 FD AA         swp a      ; swap bytes
11144  4B25 83            mov cl, al ; save result of xor into 'dl'
11145  4B26 E4            pop a      ; restore left side operator
11146  4B27 DF            push cl    ; save result of xor above
11147  4B28 FD AA         swp a  
11148  4B2A 93 80         test al, $80  
11149  4B2C FD AA         swp a  
11150  4B2E C6 33 4B      jz skip_invert_a_485  
11151  4B31 FD 95         neg a 
11152  4B33             skip_invert_a_485:   
11153  4B33 FD AB         swp b
11154  4B35 FD 93 80      test bl, $80  
11155  4B38 FD AB         swp b
11156  4B3A C6 3F 4B      jz skip_invert_b_485  
11157  4B3D FD 97         neg b 
11158  4B3F             skip_invert_b_485:   
11159  4B3F AC            mul a, b ; *
11160  4B40 FD 78         mov g, a
11161  4B42 11            mov a, b
11162  4B43 EA            pop bl
11163  4B44 FD 93 80      test bl, $80
11164  4B47 C6 54 4B      jz _same_signs_485
11165  4B4A 2F            mov bl, al
11166  4B4B 95            not a
11167  4B4C FD 97         neg b
11168  4B4E 5B 00 00      adc a, 0
11169  4B51 FD 78         mov g, a
11170  4B53 11            mov a, b
11171  4B54             _same_signs_485:
11172  4B54 FD 38         mov c, g
11173  4B56 27            mov b, a
11174  4B57 FD F1         pop g
11175  4B59 E4            pop a
11176  4B5A             ; --- END FACTORS
11177  4B5A             ; --- START TERMS
11178  4B5A D7            push a
11179  4B5B FD D8         push g
11180  4B5D 11            mov a, b
11181  4B5E FD 7A         mov g, c
11182  4B60 FA F9 FF      lea d, [bp + -7] ; $al
11183  4B63 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11184  4B66 FD 39         mov c, b ; And place it into C
11185  4B68 2A            mov b, [d] ; Lower Word in B
11186  4B69 FD 1C         sub32 ga, cb
11187  4B6B 27            mov b, a
11188  4B6C FD 38         mov c, g
11189  4B6E FD F1         pop g
11190  4B70 E4            pop a
11191  4B71             ; --- END TERMS
11192  4B71             ; --- START FACTORS
11193  4B71 D7            push a
11194  4B72 FD D8         push g
11195  4B74 11            mov a, b
11196  4B75 FD 7A         mov g, c
11197  4B77 FD 2E 64 00   mov32 cb, $00000064
11197  4B7B 00 00 
11198  4B7D D7            push a     ; save left operand
11199  4B7E 8E            xor a, b   ; xor sign bits
11200  4B7F FD AA         swp a      ; swap bytes
11201  4B81 83            mov cl, al ; save result of xor into 'dl'
11202  4B82 E4            pop a      ; restore left side operator
11203  4B83 DF            push cl    ; save result of xor above
11204  4B84 FD AA         swp a  
11205  4B86 93 80         test al, $80  
11206  4B88 FD AA         swp a  
11207  4B8A C6 8F 4B      jz skip_invert_a_486  
11208  4B8D FD 95         neg a 
11209  4B8F             skip_invert_a_486:   
11210  4B8F FD AB         swp b
11211  4B91 FD 93 80      test bl, $80  
11212  4B94 FD AB         swp b
11213  4B96 C6 9B 4B      jz skip_invert_b_486  
11214  4B99 FD 97         neg b 
11215  4B9B             skip_invert_b_486:   
11216  4B9B AC            mul a, b ; *
11217  4B9C FD 78         mov g, a
11218  4B9E 11            mov a, b
11219  4B9F EA            pop bl
11220  4BA0 FD 93 80      test bl, $80
11221  4BA3 C6 B0 4B      jz _same_signs_486
11222  4BA6 2F            mov bl, al
11223  4BA7 95            not a
11224  4BA8 FD 97         neg b
11225  4BAA 5B 00 00      adc a, 0
11226  4BAD FD 78         mov g, a
11227  4BAF 11            mov a, b
11228  4BB0             _same_signs_486:
11229  4BB0 FD 38         mov c, g
11230  4BB2 27            mov b, a
11231  4BB3 FD F1         pop g
11232  4BB5 E4            pop a
11233  4BB6             ; --- END FACTORS
11234  4BB6             ; --- START FACTORS
11235  4BB6 D7            push a
11236  4BB7 FD D8         push g
11237  4BB9 11            mov a, b
11238  4BBA FD 7A         mov g, c
11239  4BBC FA FD FF      lea d, [bp + -3] ; $xl
11240  4BBF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11241  4BC2 FD 39         mov c, b ; And place it into C
11242  4BC4 2A            mov b, [d] ; Lower Word in B
11243  4BC5 FD D8         push g ; save 'g' as the div instruction uses it
11244  4BC7 AE            div a, b ; /, a: quotient, b: remainder
11245  4BC8 FD F1         pop g
11246  4BCA FD 38         mov c, g
11247  4BCC 27            mov b, a
11248  4BCD FD F1         pop g
11249  4BCF E4            pop a
11250  4BD0             ; --- END FACTORS
11251  4BD0 FD 22 00 00   mov g, 0
11252  4BD4 FD 15         add32 cb, ga
11253  4BD6 E4            pop a
11254  4BD7             ; --- END TERMS
11255  4BD7 FD AB         swp b
11256  4BD9 D8            push b
11257  4BDA 07 12 09      call print100
11258  4BDD 51 02 00      add sp, 2
11259  4BE0             ; --- END FUNCTION CALL
11260  4BE0 FD AB         swp b
11261  4BE2 D8            push b
11262  4BE3 26 C8 80      mov b, _s147 ; "%s"
11263  4BE6 FD AB         swp b
11264  4BE8 D8            push b
11265  4BE9 07 B4 60      call printf
11266  4BEC 51 04 00      add sp, 4
11267  4BEF             ; --- END FUNCTION CALL
11268  4BEF             _if263_exit:
11269  4BEF             ; printf(dist_1, print100((x > a) ? x : a)); 
11270  4BEF             ; --- START FUNCTION CALL
11271  4BEF             ; --- START FUNCTION CALL
11272  4BEF             _ternary491_cond:
11273  4BEF FA 07 00      lea d, [bp + 7] ; $x
11274  4BF2 2A            mov b, [d]
11275  4BF3 38 00 00      mov c, 0
11276  4BF6             ; --- START RELATIONAL
11277  4BF6 D7            push a
11278  4BF7 11            mov a, b
11279  4BF8 FA 0B 00      lea d, [bp + 11] ; $a
11280  4BFB 2A            mov b, [d]
11281  4BFC 38 00 00      mov c, 0
11282  4BFF B0            cmp a, b
11283  4C00 FD 7F         sgt ; >
11284  4C02 E4            pop a
11285  4C03             ; --- END RELATIONAL
11286  4C03 C0 00 00      cmp b, 0
11287  4C06 C6 13 4C      je _ternary491_FALSE
11288  4C09             _ternary491_TRUE:
11289  4C09 FA 07 00      lea d, [bp + 7] ; $x
11290  4C0C 2A            mov b, [d]
11291  4C0D 38 00 00      mov c, 0
11292  4C10 0A 1A 4C      jmp _ternary491_exit
11293  4C13             _ternary491_FALSE:
11294  4C13 FA 0B 00      lea d, [bp + 11] ; $a
11295  4C16 2A            mov b, [d]
11296  4C17 38 00 00      mov c, 0
11297  4C1A             _ternary491_exit:
11298  4C1A FD AB         swp b
11299  4C1C D8            push b
11300  4C1D 07 12 09      call print100
11301  4C20 51 02 00      add sp, 2
11302  4C23             ; --- END FUNCTION CALL
11303  4C23 FD AB         swp b
11304  4C25 D8            push b
11305  4C26 3B 90 70      mov d, _dist_1 ; $dist_1
11306  4C29 2A            mov b, [d]
11307  4C2A 38 00 00      mov c, 0
11308  4C2D FD AB         swp b
11309  4C2F D8            push b
11310  4C30 07 B4 60      call printf
11311  4C33 51 04 00      add sp, 4
11312  4C36             ; --- END FUNCTION CALL
11313  4C36             ; return; 
11314  4C36 F9            leave
11315  4C37 09            ret
11316  4C38 0A 73 4C      jmp _if262_exit
11317  4C3B             _if262_else:
11318  4C3B             ; if (x != 0){ 
11319  4C3B             _if492_cond:
11320  4C3B FA 07 00      lea d, [bp + 7] ; $x
11321  4C3E 2A            mov b, [d]
11322  4C3F 38 00 00      mov c, 0
11323  4C42             ; --- START RELATIONAL
11324  4C42 D7            push a
11325  4C43 11            mov a, b
11326  4C44 FD 2E 00 00   mov32 cb, $00000000
11326  4C48 00 00 
11327  4C4A B0            cmp a, b
11328  4C4B FD 72         sneq ; !=
11329  4C4D E4            pop a
11330  4C4E             ; --- END RELATIONAL
11331  4C4E C0 00 00      cmp b, 0
11332  4C51 C6 66 4C      je _if492_else
11333  4C54             _if492_TRUE:
11334  4C54             ; c1 = 500; 
11335  4C54 FA 09 00      lea d, [bp + 9] ; $c1
11336  4C57 DA            push d
11337  4C58 FD 2E F4 01   mov32 cb, $000001f4
11337  4C5C 00 00 
11338  4C5E E7            pop d
11339  4C5F FD 43         mov [d], b
11340  4C61             ; return; 
11341  4C61 F9            leave
11342  4C62 09            ret
11343  4C63 0A 73 4C      jmp _if492_exit
11344  4C66             _if492_else:
11345  4C66             ; c1 = 700; 
11346  4C66 FA 09 00      lea d, [bp + 9] ; $c1
11347  4C69 DA            push d
11348  4C6A FD 2E BC 02   mov32 cb, $000002bc
11348  4C6E 00 00 
11349  4C70 E7            pop d
11350  4C71 FD 43         mov [d], b
11351  4C73             _if492_exit:
11352  4C73             _if262_exit:
11353  4C73 0A F8 4E      jmp _if261_exit
11354  4C76             _if261_else:
11355  4C76             ; if (a < 0) { 
11356  4C76             _if493_cond:
11357  4C76 FA 0B 00      lea d, [bp + 11] ; $a
11358  4C79 2A            mov b, [d]
11359  4C7A 38 00 00      mov c, 0
11360  4C7D             ; --- START RELATIONAL
11361  4C7D D7            push a
11362  4C7E 11            mov a, b
11363  4C7F FD 2E 00 00   mov32 cb, $00000000
11363  4C83 00 00 
11364  4C85 B0            cmp a, b
11365  4C86 FD 73         slt ; < (signed)
11366  4C88 E4            pop a
11367  4C89             ; --- END RELATIONAL
11368  4C89 C0 00 00      cmp b, 0
11369  4C8C C6 9F 4C      je _if493_else
11370  4C8F             _if493_TRUE:
11371  4C8F             ; c1 = 700; 
11372  4C8F FA 09 00      lea d, [bp + 9] ; $c1
11373  4C92 DA            push d
11374  4C93 FD 2E BC 02   mov32 cb, $000002bc
11374  4C97 00 00 
11375  4C99 E7            pop d
11376  4C9A FD 43         mov [d], b
11377  4C9C 0A F8 4E      jmp _if493_exit
11378  4C9F             _if493_else:
11379  4C9F             ; if (x > 0) { 
11380  4C9F             _if494_cond:
11381  4C9F FA 07 00      lea d, [bp + 7] ; $x
11382  4CA2 2A            mov b, [d]
11383  4CA3 38 00 00      mov c, 0
11384  4CA6             ; --- START RELATIONAL
11385  4CA6 D7            push a
11386  4CA7 11            mov a, b
11387  4CA8 FD 2E 00 00   mov32 cb, $00000000
11387  4CAC 00 00 
11388  4CAE B0            cmp a, b
11389  4CAF FD 7F         sgt ; >
11390  4CB1 E4            pop a
11391  4CB2             ; --- END RELATIONAL
11392  4CB2 C0 00 00      cmp b, 0
11393  4CB5 C6 C8 4C      je _if494_else
11394  4CB8             _if494_TRUE:
11395  4CB8             ; c1 = 100; 
11396  4CB8 FA 09 00      lea d, [bp + 9] ; $c1
11397  4CBB DA            push d
11398  4CBC FD 2E 64 00   mov32 cb, $00000064
11398  4CC0 00 00 
11399  4CC2 E7            pop d
11400  4CC3 FD 43         mov [d], b
11401  4CC5 0A F8 4E      jmp _if494_exit
11402  4CC8             _if494_else:
11403  4CC8             ; if (a == 0) { 
11404  4CC8             _if495_cond:
11405  4CC8 FA 0B 00      lea d, [bp + 11] ; $a
11406  4CCB 2A            mov b, [d]
11407  4CCC 38 00 00      mov c, 0
11408  4CCF             ; --- START RELATIONAL
11409  4CCF D7            push a
11410  4CD0 11            mov a, b
11411  4CD1 FD 2E 00 00   mov32 cb, $00000000
11411  4CD5 00 00 
11412  4CD7 B0            cmp a, b
11413  4CD8 FD 71         seq ; ==
11414  4CDA E4            pop a
11415  4CDB             ; --- END RELATIONAL
11416  4CDB C0 00 00      cmp b, 0
11417  4CDE C6 F1 4C      je _if495_else
11418  4CE1             _if495_TRUE:
11419  4CE1             ; c1 = 500; 
11420  4CE1 FA 09 00      lea d, [bp + 9] ; $c1
11421  4CE4 DA            push d
11422  4CE5 FD 2E F4 01   mov32 cb, $000001f4
11422  4CE9 00 00 
11423  4CEB E7            pop d
11424  4CEC FD 43         mov [d], b
11425  4CEE 0A F8 4E      jmp _if495_exit
11426  4CF1             _if495_else:
11427  4CF1             ; c1 = 100; 
11428  4CF1 FA 09 00      lea d, [bp + 9] ; $c1
11429  4CF4 DA            push d
11430  4CF5 FD 2E 64 00   mov32 cb, $00000064
11430  4CF9 00 00 
11431  4CFB E7            pop d
11432  4CFC FD 43         mov [d], b
11433  4CFE             ; if (al <= xl) 
11434  4CFE             _if496_cond:
11435  4CFE FA F9 FF      lea d, [bp + -7] ; $al
11436  4D01 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11437  4D04 FD 39         mov c, b ; And place it into C
11438  4D06 2A            mov b, [d] ; Lower Word in B
11439  4D07             ; --- START RELATIONAL
11440  4D07 D7            push a
11441  4D08 FD D8         push g
11442  4D0A 11            mov a, b
11443  4D0B FD 7A         mov g, c
11444  4D0D FA FD FF      lea d, [bp + -3] ; $xl
11445  4D10 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11446  4D13 FD 39         mov c, b ; And place it into C
11447  4D15 2A            mov b, [d] ; Lower Word in B
11448  4D16 FD AF         cmp32 ga, cb
11449  4D18 FD 76         sleu
11450  4D1A FD F1         pop g
11451  4D1C E4            pop a
11452  4D1D             ; --- END RELATIONAL
11453  4D1D C0 00 00      cmp b, 0
11454  4D20 C6 B6 4D      je _if496_else
11455  4D23             _if496_TRUE:
11456  4D23             ; printf("%s", print100(c1 + ((al * 100) / xl))); 
11457  4D23             ; --- START FUNCTION CALL
11458  4D23             ; --- START FUNCTION CALL
11459  4D23 FA 09 00      lea d, [bp + 9] ; $c1
11460  4D26 2A            mov b, [d]
11461  4D27 38 00 00      mov c, 0
11462  4D2A             ; --- START TERMS
11463  4D2A D7            push a
11464  4D2B 11            mov a, b
11465  4D2C FA F9 FF      lea d, [bp + -7] ; $al
11466  4D2F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11467  4D32 FD 39         mov c, b ; And place it into C
11468  4D34 2A            mov b, [d] ; Lower Word in B
11469  4D35             ; --- START FACTORS
11470  4D35 D7            push a
11471  4D36 FD D8         push g
11472  4D38 11            mov a, b
11473  4D39 FD 7A         mov g, c
11474  4D3B FD 2E 64 00   mov32 cb, $00000064
11474  4D3F 00 00 
11475  4D41 D7            push a     ; save left operand
11476  4D42 8E            xor a, b   ; xor sign bits
11477  4D43 FD AA         swp a      ; swap bytes
11478  4D45 83            mov cl, al ; save result of xor into 'dl'
11479  4D46 E4            pop a      ; restore left side operator
11480  4D47 DF            push cl    ; save result of xor above
11481  4D48 FD AA         swp a  
11482  4D4A 93 80         test al, $80  
11483  4D4C FD AA         swp a  
11484  4D4E C6 53 4D      jz skip_invert_a_543  
11485  4D51 FD 95         neg a 
11486  4D53             skip_invert_a_543:   
11487  4D53 FD AB         swp b
11488  4D55 FD 93 80      test bl, $80  
11489  4D58 FD AB         swp b
11490  4D5A C6 5F 4D      jz skip_invert_b_543  
11491  4D5D FD 97         neg b 
11492  4D5F             skip_invert_b_543:   
11493  4D5F AC            mul a, b ; *
11494  4D60 FD 78         mov g, a
11495  4D62 11            mov a, b
11496  4D63 EA            pop bl
11497  4D64 FD 93 80      test bl, $80
11498  4D67 C6 74 4D      jz _same_signs_543
11499  4D6A 2F            mov bl, al
11500  4D6B 95            not a
11501  4D6C FD 97         neg b
11502  4D6E 5B 00 00      adc a, 0
11503  4D71 FD 78         mov g, a
11504  4D73 11            mov a, b
11505  4D74             _same_signs_543:
11506  4D74 FD 38         mov c, g
11507  4D76 27            mov b, a
11508  4D77 FD F1         pop g
11509  4D79 E4            pop a
11510  4D7A             ; --- END FACTORS
11511  4D7A             ; --- START FACTORS
11512  4D7A D7            push a
11513  4D7B FD D8         push g
11514  4D7D 11            mov a, b
11515  4D7E FD 7A         mov g, c
11516  4D80 FA FD FF      lea d, [bp + -3] ; $xl
11517  4D83 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11518  4D86 FD 39         mov c, b ; And place it into C
11519  4D88 2A            mov b, [d] ; Lower Word in B
11520  4D89 FD D8         push g ; save 'g' as the div instruction uses it
11521  4D8B AE            div a, b ; /, a: quotient, b: remainder
11522  4D8C FD F1         pop g
11523  4D8E FD 38         mov c, g
11524  4D90 27            mov b, a
11525  4D91 FD F1         pop g
11526  4D93 E4            pop a
11527  4D94             ; --- END FACTORS
11528  4D94 FD 22 00 00   mov g, 0
11529  4D98 FD 15         add32 cb, ga
11530  4D9A E4            pop a
11531  4D9B             ; --- END TERMS
11532  4D9B FD AB         swp b
11533  4D9D D8            push b
11534  4D9E 07 12 09      call print100
11535  4DA1 51 02 00      add sp, 2
11536  4DA4             ; --- END FUNCTION CALL
11537  4DA4 FD AB         swp b
11538  4DA6 D8            push b
11539  4DA7 26 C8 80      mov b, _s147 ; "%s"
11540  4DAA FD AB         swp b
11541  4DAC D8            push b
11542  4DAD 07 B4 60      call printf
11543  4DB0 51 04 00      add sp, 4
11544  4DB3             ; --- END FUNCTION CALL
11545  4DB3 0A A2 4E      jmp _if496_exit
11546  4DB6             _if496_else:
11547  4DB6             ; printf("%s", print100(c1 + ((((al * 2) - xl) * 100) / al))); 
11548  4DB6             ; --- START FUNCTION CALL
11549  4DB6             ; --- START FUNCTION CALL
11550  4DB6 FA 09 00      lea d, [bp + 9] ; $c1
11551  4DB9 2A            mov b, [d]
11552  4DBA 38 00 00      mov c, 0
11553  4DBD             ; --- START TERMS
11554  4DBD D7            push a
11555  4DBE 11            mov a, b
11556  4DBF FA F9 FF      lea d, [bp + -7] ; $al
11557  4DC2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11558  4DC5 FD 39         mov c, b ; And place it into C
11559  4DC7 2A            mov b, [d] ; Lower Word in B
11560  4DC8             ; --- START FACTORS
11561  4DC8 D7            push a
11562  4DC9 FD D8         push g
11563  4DCB 11            mov a, b
11564  4DCC FD 7A         mov g, c
11565  4DCE FD 2E 02 00   mov32 cb, $00000002
11565  4DD2 00 00 
11566  4DD4 D7            push a     ; save left operand
11567  4DD5 8E            xor a, b   ; xor sign bits
11568  4DD6 FD AA         swp a      ; swap bytes
11569  4DD8 83            mov cl, al ; save result of xor into 'dl'
11570  4DD9 E4            pop a      ; restore left side operator
11571  4DDA DF            push cl    ; save result of xor above
11572  4DDB FD AA         swp a  
11573  4DDD 93 80         test al, $80  
11574  4DDF FD AA         swp a  
11575  4DE1 C6 E6 4D      jz skip_invert_a_718  
11576  4DE4 FD 95         neg a 
11577  4DE6             skip_invert_a_718:   
11578  4DE6 FD AB         swp b
11579  4DE8 FD 93 80      test bl, $80  
11580  4DEB FD AB         swp b
11581  4DED C6 F2 4D      jz skip_invert_b_718  
11582  4DF0 FD 97         neg b 
11583  4DF2             skip_invert_b_718:   
11584  4DF2 AC            mul a, b ; *
11585  4DF3 FD 78         mov g, a
11586  4DF5 11            mov a, b
11587  4DF6 EA            pop bl
11588  4DF7 FD 93 80      test bl, $80
11589  4DFA C6 07 4E      jz _same_signs_718
11590  4DFD 2F            mov bl, al
11591  4DFE 95            not a
11592  4DFF FD 97         neg b
11593  4E01 5B 00 00      adc a, 0
11594  4E04 FD 78         mov g, a
11595  4E06 11            mov a, b
11596  4E07             _same_signs_718:
11597  4E07 FD 38         mov c, g
11598  4E09 27            mov b, a
11599  4E0A FD F1         pop g
11600  4E0C E4            pop a
11601  4E0D             ; --- END FACTORS
11602  4E0D             ; --- START TERMS
11603  4E0D D7            push a
11604  4E0E FD D8         push g
11605  4E10 11            mov a, b
11606  4E11 FD 7A         mov g, c
11607  4E13 FA FD FF      lea d, [bp + -3] ; $xl
11608  4E16 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11609  4E19 FD 39         mov c, b ; And place it into C
11610  4E1B 2A            mov b, [d] ; Lower Word in B
11611  4E1C FD 1C         sub32 ga, cb
11612  4E1E 27            mov b, a
11613  4E1F FD 38         mov c, g
11614  4E21 FD F1         pop g
11615  4E23 E4            pop a
11616  4E24             ; --- END TERMS
11617  4E24             ; --- START FACTORS
11618  4E24 D7            push a
11619  4E25 FD D8         push g
11620  4E27 11            mov a, b
11621  4E28 FD 7A         mov g, c
11622  4E2A FD 2E 64 00   mov32 cb, $00000064
11622  4E2E 00 00 
11623  4E30 D7            push a     ; save left operand
11624  4E31 8E            xor a, b   ; xor sign bits
11625  4E32 FD AA         swp a      ; swap bytes
11626  4E34 83            mov cl, al ; save result of xor into 'dl'
11627  4E35 E4            pop a      ; restore left side operator
11628  4E36 DF            push cl    ; save result of xor above
11629  4E37 FD AA         swp a  
11630  4E39 93 80         test al, $80  
11631  4E3B FD AA         swp a  
11632  4E3D C6 42 4E      jz skip_invert_a_719  
11633  4E40 FD 95         neg a 
11634  4E42             skip_invert_a_719:   
11635  4E42 FD AB         swp b
11636  4E44 FD 93 80      test bl, $80  
11637  4E47 FD AB         swp b
11638  4E49 C6 4E 4E      jz skip_invert_b_719  
11639  4E4C FD 97         neg b 
11640  4E4E             skip_invert_b_719:   
11641  4E4E AC            mul a, b ; *
11642  4E4F FD 78         mov g, a
11643  4E51 11            mov a, b
11644  4E52 EA            pop bl
11645  4E53 FD 93 80      test bl, $80
11646  4E56 C6 63 4E      jz _same_signs_719
11647  4E59 2F            mov bl, al
11648  4E5A 95            not a
11649  4E5B FD 97         neg b
11650  4E5D 5B 00 00      adc a, 0
11651  4E60 FD 78         mov g, a
11652  4E62 11            mov a, b
11653  4E63             _same_signs_719:
11654  4E63 FD 38         mov c, g
11655  4E65 27            mov b, a
11656  4E66 FD F1         pop g
11657  4E68 E4            pop a
11658  4E69             ; --- END FACTORS
11659  4E69             ; --- START FACTORS
11660  4E69 D7            push a
11661  4E6A FD D8         push g
11662  4E6C 11            mov a, b
11663  4E6D FD 7A         mov g, c
11664  4E6F FA F9 FF      lea d, [bp + -7] ; $al
11665  4E72 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11666  4E75 FD 39         mov c, b ; And place it into C
11667  4E77 2A            mov b, [d] ; Lower Word in B
11668  4E78 FD D8         push g ; save 'g' as the div instruction uses it
11669  4E7A AE            div a, b ; /, a: quotient, b: remainder
11670  4E7B FD F1         pop g
11671  4E7D FD 38         mov c, g
11672  4E7F 27            mov b, a
11673  4E80 FD F1         pop g
11674  4E82 E4            pop a
11675  4E83             ; --- END FACTORS
11676  4E83 FD 22 00 00   mov g, 0
11677  4E87 FD 15         add32 cb, ga
11678  4E89 E4            pop a
11679  4E8A             ; --- END TERMS
11680  4E8A FD AB         swp b
11681  4E8C D8            push b
11682  4E8D 07 12 09      call print100
11683  4E90 51 02 00      add sp, 2
11684  4E93             ; --- END FUNCTION CALL
11685  4E93 FD AB         swp b
11686  4E95 D8            push b
11687  4E96 26 C8 80      mov b, _s147 ; "%s"
11688  4E99 FD AB         swp b
11689  4E9B D8            push b
11690  4E9C 07 B4 60      call printf
11691  4E9F 51 04 00      add sp, 4
11692  4EA2             ; --- END FUNCTION CALL
11693  4EA2             _if496_exit:
11694  4EA2             ; printf(dist_1, print100((xl > al) ? xl : al)); 
11695  4EA2             ; --- START FUNCTION CALL
11696  4EA2             ; --- START FUNCTION CALL
11697  4EA2             _ternary724_cond:
11698  4EA2 FA FD FF      lea d, [bp + -3] ; $xl
11699  4EA5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11700  4EA8 FD 39         mov c, b ; And place it into C
11701  4EAA 2A            mov b, [d] ; Lower Word in B
11702  4EAB             ; --- START RELATIONAL
11703  4EAB D7            push a
11704  4EAC FD D8         push g
11705  4EAE 11            mov a, b
11706  4EAF FD 7A         mov g, c
11707  4EB1 FA F9 FF      lea d, [bp + -7] ; $al
11708  4EB4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11709  4EB7 FD 39         mov c, b ; And place it into C
11710  4EB9 2A            mov b, [d] ; Lower Word in B
11711  4EBA FD AF         cmp32 ga, cb
11712  4EBC FD 81         sgu
11713  4EBE FD F1         pop g
11714  4EC0 E4            pop a
11715  4EC1             ; --- END RELATIONAL
11716  4EC1 C0 00 00      cmp b, 0
11717  4EC4 C6 D3 4E      je _ternary724_FALSE
11718  4EC7             _ternary724_TRUE:
11719  4EC7 FA FD FF      lea d, [bp + -3] ; $xl
11720  4ECA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11721  4ECD FD 39         mov c, b ; And place it into C
11722  4ECF 2A            mov b, [d] ; Lower Word in B
11723  4ED0 0A DC 4E      jmp _ternary724_exit
11724  4ED3             _ternary724_FALSE:
11725  4ED3 FA F9 FF      lea d, [bp + -7] ; $al
11726  4ED6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11727  4ED9 FD 39         mov c, b ; And place it into C
11728  4EDB 2A            mov b, [d] ; Lower Word in B
11729  4EDC             _ternary724_exit:
11730  4EDC FD AB         swp b
11731  4EDE D8            push b
11732  4EDF 07 12 09      call print100
11733  4EE2 51 02 00      add sp, 2
11734  4EE5             ; --- END FUNCTION CALL
11735  4EE5 FD AB         swp b
11736  4EE7 D8            push b
11737  4EE8 3B 90 70      mov d, _dist_1 ; $dist_1
11738  4EEB 2A            mov b, [d]
11739  4EEC 38 00 00      mov c, 0
11740  4EEF FD AB         swp b
11741  4EF1 D8            push b
11742  4EF2 07 B4 60      call printf
11743  4EF5 51 04 00      add sp, 4
11744  4EF8             ; --- END FUNCTION CALL
11745  4EF8             _if495_exit:
11746  4EF8             _if494_exit:
11747  4EF8             _if493_exit:
11748  4EF8             _if261_exit:
11749  4EF8 F9            leave
11750  4EF9 09            ret
11751  4EFA             
11752  4EFA             ship_destroyed:
11753  4EFA F8 00 00      enter 0 ; (push bp; mov bp, sp)
11754  4EFD             ; puts("The Enterprise has been destroyed. The Federation will be conquered.\n"); 
11755  4EFD             ; --- START FUNCTION CALL
11756  4EFD 26 CB 80      mov b, _s148 ; "The Enterprise has been destroyed. The Federation will be conquered.\n"
11757  4F00 FD AB         swp b
11758  4F02 D8            push b
11759  4F03 07 C8 69      call puts
11760  4F06 51 02 00      add sp, 2
11761  4F09             ; --- END FUNCTION CALL
11762  4F09             ; end_of_time(); 
11763  4F09             ; --- START FUNCTION CALL
11764  4F09 07 0E 4F      call end_of_time
11765  4F0C F9            leave
11766  4F0D 09            ret
11767  4F0E             
11768  4F0E             end_of_time:
11769  4F0E F8 00 00      enter 0 ; (push bp; mov bp, sp)
11770  4F11             ; printf("It is stardate %d.\n\n",  FROM_FIXED(stardate)); 
11771  4F11             ; --- START FUNCTION CALL
11772  4F11             ; --- START FUNCTION CALL
11773  4F11 3B C6 6E      mov d, _stardate ; $stardate
11774  4F14 2A            mov b, [d]
11775  4F15 38 00 00      mov c, 0
11776  4F18 FD AB         swp b
11777  4F1A D8            push b
11778  4F1B 07 68 04      call FROM_FIXED
11779  4F1E 51 02 00      add sp, 2
11780  4F21             ; --- END FUNCTION CALL
11781  4F21 FD AB         swp b
11782  4F23 D8            push b
11783  4F24 26 11 81      mov b, _s149 ; "It is stardate %d.\n\n"
11784  4F27 FD AB         swp b
11785  4F29 D8            push b
11786  4F2A 07 B4 60      call printf
11787  4F2D 51 04 00      add sp, 4
11788  4F30             ; --- END FUNCTION CALL
11789  4F30             ; resign_commision(); 
11790  4F30             ; --- START FUNCTION CALL
11791  4F30 07 35 4F      call resign_commision
11792  4F33 F9            leave
11793  4F34 09            ret
11794  4F35             
11795  4F35             resign_commision:
11796  4F35 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11797  4F38             ; printf("There were %d Klingon Battlecruisers left at the end of your mission.\n\n", klingons_left); 
11798  4F38             ; --- START FUNCTION CALL
11799  4F38 3B A0 6E      mov d, _klingons_left ; $klingons_left
11800  4F3B 32            mov bl, [d]
11801  4F3C A7 00         mov bh, 0
11802  4F3E 38 00 00      mov c, 0
11803  4F41 FD AB         swp b
11804  4F43 D8            push b
11805  4F44 26 26 81      mov b, _s150 ; "There were %d Klingon Battlecruisers left at the end of your mission.\n\n"
11806  4F47 FD AB         swp b
11807  4F49 D8            push b
11808  4F4A 07 B4 60      call printf
11809  4F4D 51 03 00      add sp, 3
11810  4F50             ; --- END FUNCTION CALL
11811  4F50             ; end_of_game(); 
11812  4F50             ; --- START FUNCTION CALL
11813  4F50 07 FB 4F      call end_of_game
11814  4F53 F9            leave
11815  4F54 09            ret
11816  4F55             
11817  4F55             won_game:
11818  4F55 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11819  4F58             ; puts("Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"); 
11820  4F58             ; --- START FUNCTION CALL
11821  4F58 26 6E 81      mov b, _s151 ; "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"
11822  4F5B FD AB         swp b
11823  4F5D D8            push b
11824  4F5E 07 C8 69      call puts
11825  4F61 51 02 00      add sp, 2
11826  4F64             ; --- END FUNCTION CALL
11827  4F64             ; if (FROM_FIXED(stardate) - time_start > 0) 
11828  4F64             _if725_cond:
11829  4F64             ; --- START FUNCTION CALL
11830  4F64 3B C6 6E      mov d, _stardate ; $stardate
11831  4F67 2A            mov b, [d]
11832  4F68 38 00 00      mov c, 0
11833  4F6B FD AB         swp b
11834  4F6D D8            push b
11835  4F6E 07 68 04      call FROM_FIXED
11836  4F71 51 02 00      add sp, 2
11837  4F74             ; --- END FUNCTION CALL
11838  4F74             ; --- START TERMS
11839  4F74 D7            push a
11840  4F75 11            mov a, b
11841  4F76 3B AA 6E      mov d, _time_start ; $time_start
11842  4F79 2A            mov b, [d]
11843  4F7A 38 00 00      mov c, 0
11844  4F7D 60            sub a, b
11845  4F7E 27            mov b, a
11846  4F7F E4            pop a
11847  4F80             ; --- END TERMS
11848  4F80             ; --- START RELATIONAL
11849  4F80 D7            push a
11850  4F81 11            mov a, b
11851  4F82 FD 2E 00 00   mov32 cb, $00000000
11851  4F86 00 00 
11852  4F88 B0            cmp a, b
11853  4F89 FD 81         sgu ; > (unsigned)
11854  4F8B E4            pop a
11855  4F8C             ; --- END RELATIONAL
11856  4F8C C0 00 00      cmp b, 0
11857  4F8F C6 F6 4F      je _if725_exit
11858  4F92             _if725_TRUE:
11859  4F92             ; printf("Your efficiency rating is %s\n", 
11860  4F92             ; --- START FUNCTION CALL
11861  4F92             ; --- START FUNCTION CALL
11862  4F92             ; --- START FUNCTION CALL
11863  4F92             ; --- START FUNCTION CALL
11864  4F92 3B 9F 6E      mov d, _total_klingons ; $total_klingons
11865  4F95 32            mov bl, [d]
11866  4F96 A7 00         mov bh, 0
11867  4F98 38 00 00      mov c, 0
11868  4F9B AB            snex b
11869  4F9C FD AB         swp b
11870  4F9E D8            push b
11871  4F9F 07 8B 04      call TO_FIXED00
11872  4FA2 51 02 00      add sp, 2
11873  4FA5             ; --- END FUNCTION CALL
11874  4FA5             ; --- START FACTORS
11875  4FA5 D7            push a
11876  4FA6 FD D8         push g
11877  4FA8 11            mov a, b
11878  4FA9 FD 7A         mov g, c
11879  4FAB             ; --- START FUNCTION CALL
11880  4FAB 3B C6 6E      mov d, _stardate ; $stardate
11881  4FAE 2A            mov b, [d]
11882  4FAF 38 00 00      mov c, 0
11883  4FB2 FD AB         swp b
11884  4FB4 D8            push b
11885  4FB5 07 68 04      call FROM_FIXED
11886  4FB8 51 02 00      add sp, 2
11887  4FBB             ; --- END FUNCTION CALL
11888  4FBB             ; --- START TERMS
11889  4FBB D7            push a
11890  4FBC 11            mov a, b
11891  4FBD 3B AA 6E      mov d, _time_start ; $time_start
11892  4FC0 2A            mov b, [d]
11893  4FC1 38 00 00      mov c, 0
11894  4FC4 60            sub a, b
11895  4FC5 27            mov b, a
11896  4FC6 E4            pop a
11897  4FC7             ; --- END TERMS
11898  4FC7 FD D8         push g ; save 'g' as the div instruction uses it
11899  4FC9 AE            div a, b ; /, a: quotient, b: remainder
11900  4FCA FD F1         pop g
11901  4FCC FD 38         mov c, g
11902  4FCE 27            mov b, a
11903  4FCF FD F1         pop g
11904  4FD1 E4            pop a
11905  4FD2             ; --- END FACTORS
11906  4FD2 FD AB         swp b
11907  4FD4 D8            push b
11908  4FD5 07 70 5C      call square00
11909  4FD8 51 02 00      add sp, 2
11910  4FDB             ; --- END FUNCTION CALL
11911  4FDB FD AB         swp b
11912  4FDD D8            push b
11913  4FDE 07 12 09      call print100
11914  4FE1 51 02 00      add sp, 2
11915  4FE4             ; --- END FUNCTION CALL
11916  4FE4 FD AB         swp b
11917  4FE6 D8            push b
11918  4FE7 26 D6 81      mov b, _s152 ; "Your efficiency rating is %s\n"
11919  4FEA FD AB         swp b
11920  4FEC D8            push b
11921  4FED 07 B4 60      call printf
11922  4FF0 51 04 00      add sp, 4
11923  4FF3             ; --- END FUNCTION CALL
11924  4FF3 0A F6 4F      jmp _if725_exit
11925  4FF6             _if725_exit:
11926  4FF6             ; end_of_game(); 
11927  4FF6             ; --- START FUNCTION CALL
11928  4FF6 07 FB 4F      call end_of_game
11929  4FF9 F9            leave
11930  4FFA 09            ret
11931  4FFB             
11932  4FFB             end_of_game:
11933  4FFB F8 00 00      enter 0 ; (push bp; mov bp, sp)
11934  4FFE             ; char x[4]; 
11935  4FFE 52 04 00      sub sp, 4
11936  5001             ; if (starbases_left > 0) { 
11937  5001             _if742_cond:
11938  5001 3B CC 6D      mov d, _starbases_left ; $starbases_left
11939  5004 32            mov bl, [d]
11940  5005 A7 00         mov bh, 0
11941  5007 38 00 00      mov c, 0
11942  500A             ; --- START RELATIONAL
11943  500A D7            push a
11944  500B 11            mov a, b
11945  500C FD 2E 00 00   mov32 cb, $00000000
11945  5010 00 00 
11946  5012 B0            cmp a, b
11947  5013 FD 7F         sgt ; >
11948  5015 E4            pop a
11949  5016             ; --- END RELATIONAL
11950  5016 C0 00 00      cmp b, 0
11951  5019 C6 66 50      je _if742_exit
11952  501C             _if742_TRUE:
11953  501C             ; puts("The Federation is in need of a new starship commander"); 
11954  501C             ; --- START FUNCTION CALL
11955  501C 26 F4 81      mov b, _s153 ; "The Federation is in need of a new starship commander"
11956  501F FD AB         swp b
11957  5021 D8            push b
11958  5022 07 C8 69      call puts
11959  5025 51 02 00      add sp, 2
11960  5028             ; --- END FUNCTION CALL
11961  5028             ; puts(" for a similar mission.\n"); 
11962  5028             ; --- START FUNCTION CALL
11963  5028 26 2A 82      mov b, _s154 ; " for a similar mission.\n"
11964  502B FD AB         swp b
11965  502D D8            push b
11966  502E 07 C8 69      call puts
11967  5031 51 02 00      add sp, 2
11968  5034             ; --- END FUNCTION CALL
11969  5034             ; puts("If there is a volunteer, let him step forward and"); 
11970  5034             ; --- START FUNCTION CALL
11971  5034 26 43 82      mov b, _s155 ; "If there is a volunteer, let him step forward and"
11972  5037 FD AB         swp b
11973  5039 D8            push b
11974  503A 07 C8 69      call puts
11975  503D 51 02 00      add sp, 2
11976  5040             ; --- END FUNCTION CALL
11977  5040             ; puts(" enter 'aye': "); 
11978  5040             ; --- START FUNCTION CALL
11979  5040 26 75 82      mov b, _s156 ; " enter 'aye': "
11980  5043 FD AB         swp b
11981  5045 D8            push b
11982  5046 07 C8 69      call puts
11983  5049 51 02 00      add sp, 2
11984  504C             ; --- END FUNCTION CALL
11985  504C             ; input(x,4); 
11986  504C             ; --- START FUNCTION CALL
11987  504C FD 2E 04 00   mov32 cb, $00000004
11987  5050 00 00 
11988  5052 DD            push bl
11989  5053 FA FD FF      lea d, [bp + -3] ; $x
11990  5056 2D            mov b, d
11991  5057 38 00 00      mov c, 0
11992  505A FD AB         swp b
11993  505C D8            push b
11994  505D 07 83 05      call input
11995  5060 51 03 00      add sp, 3
11996  5063             ; --- END FUNCTION CALL
11997  5063 0A 66 50      jmp _if742_exit
11998  5066             _if742_exit:
11999  5066             ; exit(1); 
12000  5066             ; --- START FUNCTION CALL
12001  5066 FD 2E 01 00   mov32 cb, $00000001
12001  506A 00 00 
12002  506C FD AB         swp b
12003  506E D8            push b
12004  506F 07 71 5E      call exit
12005  5072 51 02 00      add sp, 2
12006  5075             ; --- END FUNCTION CALL
12007  5075 F9            leave
12008  5076 09            ret
12009  5077             
12010  5077             klingons_move:
12011  5077 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12012  507A             ; int i; 
12013  507A 52 02 00      sub sp, 2
12014  507D             ; struct klingon *k; 
12015  507D 52 02 00      sub sp, 2
12016  5080             ; k = &kdata; 
12017  5080 FA FD FF      lea d, [bp + -3] ; $k
12018  5083 DA            push d
12019  5084 3B 92 6E      mov d, _kdata_data ; $kdata
12020  5087 2D            mov b, d
12021  5088 E7            pop d
12022  5089 FD 43         mov [d], b
12023  508B             ; for (i = 0; i <= 2; i++) { 
12024  508B             _for743_init:
12025  508B FA FF FF      lea d, [bp + -1] ; $i
12026  508E DA            push d
12027  508F FD 2E 00 00   mov32 cb, $00000000
12027  5093 00 00 
12028  5095 E7            pop d
12029  5096 FD 43         mov [d], b
12030  5098             _for743_cond:
12031  5098 FA FF FF      lea d, [bp + -1] ; $i
12032  509B 2A            mov b, [d]
12033  509C 38 00 00      mov c, 0
12034  509F             ; --- START RELATIONAL
12035  509F D7            push a
12036  50A0 11            mov a, b
12037  50A1 FD 2E 02 00   mov32 cb, $00000002
12037  50A5 00 00 
12038  50A7 B0            cmp a, b
12039  50A8 FD 74         sle ; <= (signed)
12040  50AA E4            pop a
12041  50AB             ; --- END RELATIONAL
12042  50AB C0 00 00      cmp b, 0
12043  50AE C6 36 51      je _for743_exit
12044  50B1             _for743_block:
12045  50B1             ; if (k->energy > 0) { 
12046  50B1             _if744_cond:
12047  50B1 FA FD FF      lea d, [bp + -3] ; $k
12048  50B4 FD 2A         mov d, [d]
12049  50B6 58 02 00      add d, 2
12050  50B9 2A            mov b, [d]
12051  50BA 38 00 00      mov c, 0
12052  50BD             ; --- START RELATIONAL
12053  50BD D7            push a
12054  50BE 11            mov a, b
12055  50BF FD 2E 00 00   mov32 cb, $00000000
12055  50C3 00 00 
12056  50C5 B0            cmp a, b
12057  50C6 FD 7F         sgt ; >
12058  50C8 E4            pop a
12059  50C9             ; --- END RELATIONAL
12060  50C9 C0 00 00      cmp b, 0
12061  50CC C6 11 51      je _if744_exit
12062  50CF             _if744_TRUE:
12063  50CF             ; wipe_klingon(k); 
12064  50CF             ; --- START FUNCTION CALL
12065  50CF FA FD FF      lea d, [bp + -3] ; $k
12066  50D2 2A            mov b, [d]
12067  50D3 38 00 00      mov c, 0
12068  50D6 FD AB         swp b
12069  50D8 D8            push b
12070  50D9 07 99 2D      call wipe_klingon
12071  50DC 51 02 00      add sp, 2
12072  50DF             ; --- END FUNCTION CALL
12073  50DF             ; find_set_empty_place(	3         , k->y, k->x); 
12074  50DF             ; --- START FUNCTION CALL
12075  50DF FA FD FF      lea d, [bp + -3] ; $k
12076  50E2 FD 2A         mov d, [d]
12077  50E4 58 01 00      add d, 1
12078  50E7 32            mov bl, [d]
12079  50E8 A7 00         mov bh, 0
12080  50EA 38 00 00      mov c, 0
12081  50ED FD AB         swp b
12082  50EF D8            push b
12083  50F0 FA FD FF      lea d, [bp + -3] ; $k
12084  50F3 FD 2A         mov d, [d]
12085  50F5 58 00 00      add d, 0
12086  50F8 32            mov bl, [d]
12087  50F9 A7 00         mov bh, 0
12088  50FB 38 00 00      mov c, 0
12089  50FE FD AB         swp b
12090  5100 D8            push b
12091  5101 FD 2E 03 00   mov32 cb, $00000003
12091  5105 00 00 
12092  5107 DD            push bl
12093  5108 07 AB 58      call find_set_empty_place
12094  510B 51 05 00      add sp, 5
12095  510E             ; --- END FUNCTION CALL
12096  510E 0A 11 51      jmp _if744_exit
12097  5111             _if744_exit:
12098  5111             ; k++; 
12099  5111 FA FD FF      lea d, [bp + -3] ; $k
12100  5114 2A            mov b, [d]
12101  5115 38 00 00      mov c, 0
12102  5118 11            mov a, b
12103  5119 FD 77         inc b
12104  511B FD 77         inc b
12105  511D FA FD FF      lea d, [bp + -3] ; $k
12106  5120 FD 43         mov [d], b
12107  5122 27            mov b, a
12108  5123             _for743_update:
12109  5123 FA FF FF      lea d, [bp + -1] ; $i
12110  5126 2A            mov b, [d]
12111  5127 38 00 00      mov c, 0
12112  512A 11            mov a, b
12113  512B FD 77         inc b
12114  512D FA FF FF      lea d, [bp + -1] ; $i
12115  5130 FD 43         mov [d], b
12116  5132 27            mov b, a
12117  5133 0A 98 50      jmp _for743_cond
12118  5136             _for743_exit:
12119  5136             ; klingons_shoot(); 
12120  5136             ; --- START FUNCTION CALL
12121  5136 07 3B 51      call klingons_shoot
12122  5139 F9            leave
12123  513A 09            ret
12124  513B             
12125  513B             klingons_shoot:
12126  513B F8 00 00      enter 0 ; (push bp; mov bp, sp)
12127  513E             ; unsigned char        r; 
12128  513E 52 01 00      sub sp, 1
12129  5141             ; long unsigned int         h; 
12130  5141 52 04 00      sub sp, 4
12131  5144             ; unsigned char        i; 
12132  5144 52 01 00      sub sp, 1
12133  5147             ; struct klingon *k; 
12134  5147 52 02 00      sub sp, 2
12135  514A             ; long unsigned int         ratio; 
12136  514A 52 04 00      sub sp, 4
12137  514D             ; k = &kdata; 
12138  514D FA F9 FF      lea d, [bp + -7] ; $k
12139  5150 DA            push d
12140  5151 3B 92 6E      mov d, _kdata_data ; $kdata
12141  5154 2D            mov b, d
12142  5155 E7            pop d
12143  5156 FD 43         mov [d], b
12144  5158             ; if (klingons <= 0) 
12145  5158             _if745_cond:
12146  5158 3B 9E 6E      mov d, _klingons ; $klingons
12147  515B 32            mov bl, [d]
12148  515C A7 00         mov bh, 0
12149  515E 38 00 00      mov c, 0
12150  5161             ; --- START RELATIONAL
12151  5161 D7            push a
12152  5162 11            mov a, b
12153  5163 FD 2E 00 00   mov32 cb, $00000000
12153  5167 00 00 
12154  5169 B0            cmp a, b
12155  516A FD 76         sleu ; <= (unsigned)
12156  516C E4            pop a
12157  516D             ; --- END RELATIONAL
12158  516D C0 00 00      cmp b, 0
12159  5170 C6 78 51      je _if745_exit
12160  5173             _if745_TRUE:
12161  5173             ; return; 
12162  5173 F9            leave
12163  5174 09            ret
12164  5175 0A 78 51      jmp _if745_exit
12165  5178             _if745_exit:
12166  5178             ; if (docked) { 
12167  5178             _if746_cond:
12168  5178 3B EB 6D      mov d, _docked ; $docked
12169  517B 32            mov bl, [d]
12170  517C A7 00         mov bh, 0
12171  517E 38 00 00      mov c, 0
12172  5181 C0 00 00      cmp b, 0
12173  5184 C6 98 51      je _if746_exit
12174  5187             _if746_TRUE:
12175  5187             ; puts("Starbase shields protect the Enterprise\n"); 
12176  5187             ; --- START FUNCTION CALL
12177  5187 26 84 82      mov b, _s157 ; "Starbase shields protect the Enterprise\n"
12178  518A FD AB         swp b
12179  518C D8            push b
12180  518D 07 C8 69      call puts
12181  5190 51 02 00      add sp, 2
12182  5193             ; --- END FUNCTION CALL
12183  5193             ; return; 
12184  5193 F9            leave
12185  5194 09            ret
12186  5195 0A 98 51      jmp _if746_exit
12187  5198             _if746_exit:
12188  5198             ; for (i = 0; i <= 2; i++) { 
12189  5198             _for747_init:
12190  5198 FA FB FF      lea d, [bp + -5] ; $i
12191  519B DA            push d
12192  519C FD 2E 00 00   mov32 cb, $00000000
12192  51A0 00 00 
12193  51A2 E7            pop d
12194  51A3 FD 3E         mov [d], bl
12195  51A5             _for747_cond:
12196  51A5 FA FB FF      lea d, [bp + -5] ; $i
12197  51A8 32            mov bl, [d]
12198  51A9 A7 00         mov bh, 0
12199  51AB 38 00 00      mov c, 0
12200  51AE             ; --- START RELATIONAL
12201  51AE D7            push a
12202  51AF 11            mov a, b
12203  51B0 FD 2E 02 00   mov32 cb, $00000002
12203  51B4 00 00 
12204  51B6 B0            cmp a, b
12205  51B7 FD 76         sleu ; <= (unsigned)
12206  51B9 E4            pop a
12207  51BA             ; --- END RELATIONAL
12208  51BA C0 00 00      cmp b, 0
12209  51BD C6 61 55      je _for747_exit
12210  51C0             _for747_block:
12211  51C0             ; if (k->energy > 0) { 
12212  51C0             _if748_cond:
12213  51C0 FA F9 FF      lea d, [bp + -7] ; $k
12214  51C3 FD 2A         mov d, [d]
12215  51C5 58 02 00      add d, 2
12216  51C8 2A            mov b, [d]
12217  51C9 38 00 00      mov c, 0
12218  51CC             ; --- START RELATIONAL
12219  51CC D7            push a
12220  51CD 11            mov a, b
12221  51CE FD 2E 00 00   mov32 cb, $00000000
12221  51D2 00 00 
12222  51D4 B0            cmp a, b
12223  51D5 FD 7F         sgt ; >
12224  51D7 E4            pop a
12225  51D8             ; --- END RELATIONAL
12226  51D8 C0 00 00      cmp b, 0
12227  51DB C6 3A 55      je _if748_exit
12228  51DE             _if748_TRUE:
12229  51DE             ; h = k->energy * (200UL + get_rand(100)); 
12230  51DE FA FC FF      lea d, [bp + -4] ; $h
12231  51E1 DA            push d
12232  51E2 FA F9 FF      lea d, [bp + -7] ; $k
12233  51E5 FD 2A         mov d, [d]
12234  51E7 58 02 00      add d, 2
12235  51EA 2A            mov b, [d]
12236  51EB 38 00 00      mov c, 0
12237  51EE             ; --- START FACTORS
12238  51EE D7            push a
12239  51EF FD D8         push g
12240  51F1 11            mov a, b
12241  51F2 FD 7A         mov g, c
12242  51F4 FD 2E C8 00   mov32 cb, $000000c8
12242  51F8 00 00 
12243  51FA             ; --- START TERMS
12244  51FA D7            push a
12245  51FB FD D8         push g
12246  51FD 11            mov a, b
12247  51FE FD 7A         mov g, c
12248  5200             ; --- START FUNCTION CALL
12249  5200 FD 2E 64 00   mov32 cb, $00000064
12249  5204 00 00 
12250  5206 FD AB         swp b
12251  5208 D8            push b
12252  5209 07 FF 04      call get_rand
12253  520C 51 02 00      add sp, 2
12254  520F             ; --- END FUNCTION CALL
12255  520F 38 00 00      mov c, 0
12256  5212 FD 15         add32 cb, ga
12257  5214 FD F1         pop g
12258  5216 E4            pop a
12259  5217             ; --- END TERMS
12260  5217 D7            push a     ; save left operand
12261  5218 8E            xor a, b   ; xor sign bits
12262  5219 FD AA         swp a      ; swap bytes
12263  521B 83            mov cl, al ; save result of xor into 'dl'
12264  521C E4            pop a      ; restore left side operator
12265  521D DF            push cl    ; save result of xor above
12266  521E FD AA         swp a  
12267  5220 93 80         test al, $80  
12268  5222 FD AA         swp a  
12269  5224 C6 29 52      jz skip_invert_a_750  
12270  5227 FD 95         neg a 
12271  5229             skip_invert_a_750:   
12272  5229 FD AB         swp b
12273  522B FD 93 80      test bl, $80  
12274  522E FD AB         swp b
12275  5230 C6 35 52      jz skip_invert_b_750  
12276  5233 FD 97         neg b 
12277  5235             skip_invert_b_750:   
12278  5235 AC            mul a, b ; *
12279  5236 FD 78         mov g, a
12280  5238 11            mov a, b
12281  5239 EA            pop bl
12282  523A FD 93 80      test bl, $80
12283  523D C6 4A 52      jz _same_signs_750
12284  5240 2F            mov bl, al
12285  5241 95            not a
12286  5242 FD 97         neg b
12287  5244 5B 00 00      adc a, 0
12288  5247 FD 78         mov g, a
12289  5249 11            mov a, b
12290  524A             _same_signs_750:
12291  524A FD 38         mov c, g
12292  524C 27            mov b, a
12293  524D FD F1         pop g
12294  524F E4            pop a
12295  5250             ; --- END FACTORS
12296  5250 E7            pop d
12297  5251 FD 43         mov [d], b
12298  5253 28            mov b, c
12299  5254 FD 44 02 00   mov [d + 2], b
12300  5258             ; h =h* 100;	/* Ready for division in fixed */ 
12301  5258 FA FC FF      lea d, [bp + -4] ; $h
12302  525B DA            push d
12303  525C FA FC FF      lea d, [bp + -4] ; $h
12304  525F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12305  5262 FD 39         mov c, b ; And place it into C
12306  5264 2A            mov b, [d] ; Lower Word in B
12307  5265             ; --- START FACTORS
12308  5265 D7            push a
12309  5266 FD D8         push g
12310  5268 11            mov a, b
12311  5269 FD 7A         mov g, c
12312  526B FD 2E 64 00   mov32 cb, $00000064
12312  526F 00 00 
12313  5271 D7            push a     ; save left operand
12314  5272 8E            xor a, b   ; xor sign bits
12315  5273 FD AA         swp a      ; swap bytes
12316  5275 83            mov cl, al ; save result of xor into 'dl'
12317  5276 E4            pop a      ; restore left side operator
12318  5277 DF            push cl    ; save result of xor above
12319  5278 FD AA         swp a  
12320  527A 93 80         test al, $80  
12321  527C FD AA         swp a  
12322  527E C6 83 52      jz skip_invert_a_752  
12323  5281 FD 95         neg a 
12324  5283             skip_invert_a_752:   
12325  5283 FD AB         swp b
12326  5285 FD 93 80      test bl, $80  
12327  5288 FD AB         swp b
12328  528A C6 8F 52      jz skip_invert_b_752  
12329  528D FD 97         neg b 
12330  528F             skip_invert_b_752:   
12331  528F AC            mul a, b ; *
12332  5290 FD 78         mov g, a
12333  5292 11            mov a, b
12334  5293 EA            pop bl
12335  5294 FD 93 80      test bl, $80
12336  5297 C6 A4 52      jz _same_signs_752
12337  529A 2F            mov bl, al
12338  529B 95            not a
12339  529C FD 97         neg b
12340  529E 5B 00 00      adc a, 0
12341  52A1 FD 78         mov g, a
12342  52A3 11            mov a, b
12343  52A4             _same_signs_752:
12344  52A4 FD 38         mov c, g
12345  52A6 27            mov b, a
12346  52A7 FD F1         pop g
12347  52A9 E4            pop a
12348  52AA             ; --- END FACTORS
12349  52AA E7            pop d
12350  52AB FD 43         mov [d], b
12351  52AD 28            mov b, c
12352  52AE FD 44 02 00   mov [d + 2], b
12353  52B2             ; h =h/ distance_to(k); 
12354  52B2 FA FC FF      lea d, [bp + -4] ; $h
12355  52B5 DA            push d
12356  52B6 FA FC FF      lea d, [bp + -4] ; $h
12357  52B9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12358  52BC FD 39         mov c, b ; And place it into C
12359  52BE 2A            mov b, [d] ; Lower Word in B
12360  52BF             ; --- START FACTORS
12361  52BF D7            push a
12362  52C0 FD D8         push g
12363  52C2 11            mov a, b
12364  52C3 FD 7A         mov g, c
12365  52C5             ; --- START FUNCTION CALL
12366  52C5 FA F9 FF      lea d, [bp + -7] ; $k
12367  52C8 2A            mov b, [d]
12368  52C9 38 00 00      mov c, 0
12369  52CC FD AB         swp b
12370  52CE D8            push b
12371  52CF 07 93 5D      call distance_to
12372  52D2 51 02 00      add sp, 2
12373  52D5             ; --- END FUNCTION CALL
12374  52D5 FD D8         push g ; save 'g' as the div instruction uses it
12375  52D7 AE            div a, b ; /, a: quotient, b: remainder
12376  52D8 FD F1         pop g
12377  52DA FD 38         mov c, g
12378  52DC 27            mov b, a
12379  52DD FD F1         pop g
12380  52DF E4            pop a
12381  52E0             ; --- END FACTORS
12382  52E0 E7            pop d
12383  52E1 FD 43         mov [d], b
12384  52E3 28            mov b, c
12385  52E4 FD 44 02 00   mov [d + 2], b
12386  52E8             ; shield = shield - FROM_FIXED00(h); 
12387  52E8 3B A7 6E      mov d, _shield ; $shield
12388  52EB DA            push d
12389  52EC 3B A7 6E      mov d, _shield ; $shield
12390  52EF 2A            mov b, [d]
12391  52F0 38 00 00      mov c, 0
12392  52F3             ; --- START TERMS
12393  52F3 D7            push a
12394  52F4 11            mov a, b
12395  52F5             ; --- START FUNCTION CALL
12396  52F5 FA FC FF      lea d, [bp + -4] ; $h
12397  52F8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12398  52FB FD 39         mov c, b ; And place it into C
12399  52FD 2A            mov b, [d] ; Lower Word in B
12400  52FE FD AB         swp b
12401  5300 D8            push b
12402  5301 07 DC 04      call FROM_FIXED00
12403  5304 51 02 00      add sp, 2
12404  5307             ; --- END FUNCTION CALL
12405  5307 60            sub a, b
12406  5308 27            mov b, a
12407  5309 E4            pop a
12408  530A             ; --- END TERMS
12409  530A E7            pop d
12410  530B FD 43         mov [d], b
12411  530D             ; k->energy = (k->energy * 100) / (300 + get_rand(100)); 
12412  530D FA F9 FF      lea d, [bp + -7] ; $k
12413  5310 FD 2A         mov d, [d]
12414  5312 58 02 00      add d, 2
12415  5315 DA            push d
12416  5316 FA F9 FF      lea d, [bp + -7] ; $k
12417  5319 FD 2A         mov d, [d]
12418  531B 58 02 00      add d, 2
12419  531E 2A            mov b, [d]
12420  531F 38 00 00      mov c, 0
12421  5322             ; --- START FACTORS
12422  5322 D7            push a
12423  5323 FD D8         push g
12424  5325 11            mov a, b
12425  5326 FD 7A         mov g, c
12426  5328 FD 2E 64 00   mov32 cb, $00000064
12426  532C 00 00 
12427  532E D7            push a     ; save left operand
12428  532F 8E            xor a, b   ; xor sign bits
12429  5330 FD AA         swp a      ; swap bytes
12430  5332 83            mov cl, al ; save result of xor into 'dl'
12431  5333 E4            pop a      ; restore left side operator
12432  5334 DF            push cl    ; save result of xor above
12433  5335 FD AA         swp a  
12434  5337 93 80         test al, $80  
12435  5339 FD AA         swp a  
12436  533B C6 40 53      jz skip_invert_a_759  
12437  533E FD 95         neg a 
12438  5340             skip_invert_a_759:   
12439  5340 FD AB         swp b
12440  5342 FD 93 80      test bl, $80  
12441  5345 FD AB         swp b
12442  5347 C6 4C 53      jz skip_invert_b_759  
12443  534A FD 97         neg b 
12444  534C             skip_invert_b_759:   
12445  534C AC            mul a, b ; *
12446  534D FD 78         mov g, a
12447  534F 11            mov a, b
12448  5350 EA            pop bl
12449  5351 FD 93 80      test bl, $80
12450  5354 C6 61 53      jz _same_signs_759
12451  5357 2F            mov bl, al
12452  5358 95            not a
12453  5359 FD 97         neg b
12454  535B 5B 00 00      adc a, 0
12455  535E FD 78         mov g, a
12456  5360 11            mov a, b
12457  5361             _same_signs_759:
12458  5361 FD 38         mov c, g
12459  5363 27            mov b, a
12460  5364 FD F1         pop g
12461  5366 E4            pop a
12462  5367             ; --- END FACTORS
12463  5367             ; --- START FACTORS
12464  5367 D7            push a
12465  5368 FD D8         push g
12466  536A 11            mov a, b
12467  536B FD 7A         mov g, c
12468  536D FD 2E 2C 01   mov32 cb, $0000012c
12468  5371 00 00 
12469  5373             ; --- START TERMS
12470  5373 D7            push a
12471  5374 11            mov a, b
12472  5375             ; --- START FUNCTION CALL
12473  5375 FD 2E 64 00   mov32 cb, $00000064
12473  5379 00 00 
12474  537B FD AB         swp b
12475  537D D8            push b
12476  537E 07 FF 04      call get_rand
12477  5381 51 02 00      add sp, 2
12478  5384             ; --- END FUNCTION CALL
12479  5384 56            add b, a
12480  5385 E4            pop a
12481  5386             ; --- END TERMS
12482  5386 FD D8         push g ; save 'g' as the div instruction uses it
12483  5388 AE            div a, b ; /, a: quotient, b: remainder
12484  5389 FD F1         pop g
12485  538B FD 38         mov c, g
12486  538D 27            mov b, a
12487  538E FD F1         pop g
12488  5390 E4            pop a
12489  5391             ; --- END FACTORS
12490  5391 E7            pop d
12491  5392 FD 43         mov [d], b
12492  5394             ; printf("%d unit hit on Enterprise from sector %d, %d\n", (unsigned)FROM_FIXED00(h), k->y, k->x); 
12493  5394             ; --- START FUNCTION CALL
12494  5394 FA F9 FF      lea d, [bp + -7] ; $k
12495  5397 FD 2A         mov d, [d]
12496  5399 58 01 00      add d, 1
12497  539C 32            mov bl, [d]
12498  539D A7 00         mov bh, 0
12499  539F 38 00 00      mov c, 0
12500  53A2 FD AB         swp b
12501  53A4 D8            push b
12502  53A5 FA F9 FF      lea d, [bp + -7] ; $k
12503  53A8 FD 2A         mov d, [d]
12504  53AA 58 00 00      add d, 0
12505  53AD 32            mov bl, [d]
12506  53AE A7 00         mov bh, 0
12507  53B0 38 00 00      mov c, 0
12508  53B3 FD AB         swp b
12509  53B5 D8            push b
12510  53B6 FA FC FF      lea d, [bp + -4] ; $h
12511  53B9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12512  53BC FD 39         mov c, b ; And place it into C
12513  53BE 2A            mov b, [d] ; Lower Word in B
12514  53BF FD AB         swp b
12515  53C1 D8            push b
12516  53C2 26 AD 82      mov b, _s158 ; "%d unit hit on Enterprise from sector %d, %d\n"
12517  53C5 FD AB         swp b
12518  53C7 D8            push b
12519  53C8 07 B4 60      call printf
12520  53CB 51 06 00      add sp, 6
12521  53CE             ; --- END FUNCTION CALL
12522  53CE             ; if (shield <= 0) { 
12523  53CE             _if761_cond:
12524  53CE 3B A7 6E      mov d, _shield ; $shield
12525  53D1 2A            mov b, [d]
12526  53D2 38 00 00      mov c, 0
12527  53D5             ; --- START RELATIONAL
12528  53D5 D7            push a
12529  53D6 11            mov a, b
12530  53D7 FD 2E 00 00   mov32 cb, $00000000
12530  53DB 00 00 
12531  53DD B0            cmp a, b
12532  53DE FD 74         sle ; <= (signed)
12533  53E0 E4            pop a
12534  53E1             ; --- END RELATIONAL
12535  53E1 C0 00 00      cmp b, 0
12536  53E4 C6 FA 53      je _if761_exit
12537  53E7             _if761_TRUE:
12538  53E7             ; putchar('\n'); 
12539  53E7             ; --- START FUNCTION CALL
12540  53E7 FD 2E 0A 00   mov32 cb, $0000000a
12540  53EB 00 00 
12541  53ED DD            push bl
12542  53EE 07 33 65      call putchar
12543  53F1 51 01 00      add sp, 1
12544  53F4             ; --- END FUNCTION CALL
12545  53F4             ; ship_destroyed(); 
12546  53F4             ; --- START FUNCTION CALL
12547  53F4 07 FA 4E      call ship_destroyed
12548  53F7 0A FA 53      jmp _if761_exit
12549  53FA             _if761_exit:
12550  53FA             ; printf("    <Shields down to %d units>\n\n", shield); 
12551  53FA             ; --- START FUNCTION CALL
12552  53FA 3B A7 6E      mov d, _shield ; $shield
12553  53FD 2A            mov b, [d]
12554  53FE 38 00 00      mov c, 0
12555  5401 FD AB         swp b
12556  5403 D8            push b
12557  5404 26 DB 82      mov b, _s159 ; "    <Shields down to %d units>\n\n"
12558  5407 FD AB         swp b
12559  5409 D8            push b
12560  540A 07 B4 60      call printf
12561  540D 51 04 00      add sp, 4
12562  5410             ; --- END FUNCTION CALL
12563  5410             ; if (h >= 20) { 
12564  5410             _if762_cond:
12565  5410 FA FC FF      lea d, [bp + -4] ; $h
12566  5413 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12567  5416 FD 39         mov c, b ; And place it into C
12568  5418 2A            mov b, [d] ; Lower Word in B
12569  5419             ; --- START RELATIONAL
12570  5419 D7            push a
12571  541A FD D8         push g
12572  541C 11            mov a, b
12573  541D FD 7A         mov g, c
12574  541F FD 2E 14 00   mov32 cb, $00000014
12574  5423 00 00 
12575  5425 38 00 00      mov c, 0
12576  5428 FD AF         cmp32 ga, cb
12577  542A FD 82         sgeu
12578  542C FD F1         pop g
12579  542E E4            pop a
12580  542F             ; --- END RELATIONAL
12581  542F C0 00 00      cmp b, 0
12582  5432 C6 37 55      je _if762_exit
12583  5435             _if762_TRUE:
12584  5435             ; ratio = ((int)h)/shield; 
12585  5435 FA F5 FF      lea d, [bp + -11] ; $ratio
12586  5438 DA            push d
12587  5439 FA FC FF      lea d, [bp + -4] ; $h
12588  543C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12589  543F FD 39         mov c, b ; And place it into C
12590  5441 2A            mov b, [d] ; Lower Word in B
12591  5442             ; --- START FACTORS
12592  5442 D7            push a
12593  5443 FD D8         push g
12594  5445 11            mov a, b
12595  5446 FD 7A         mov g, c
12596  5448 3B A7 6E      mov d, _shield ; $shield
12597  544B 2A            mov b, [d]
12598  544C 38 00 00      mov c, 0
12599  544F FD D8         push g ; save 'g' as the div instruction uses it
12600  5451 AE            div a, b ; /, a: quotient, b: remainder
12601  5452 FD F1         pop g
12602  5454 FD 38         mov c, g
12603  5456 27            mov b, a
12604  5457 FD F1         pop g
12605  5459 E4            pop a
12606  545A             ; --- END FACTORS
12607  545A E7            pop d
12608  545B FD 43         mov [d], b
12609  545D 26 00 00      mov b, 0
12610  5460 FD 44 02 00   mov [d + 2], b
12611  5464             ; if (get_rand(10) <= 6 && ratio > 2) { 
12612  5464             _if765_cond:
12613  5464             ; --- START FUNCTION CALL
12614  5464 FD 2E 0A 00   mov32 cb, $0000000a
12614  5468 00 00 
12615  546A FD AB         swp b
12616  546C D8            push b
12617  546D 07 FF 04      call get_rand
12618  5470 51 02 00      add sp, 2
12619  5473             ; --- END FUNCTION CALL
12620  5473             ; --- START RELATIONAL
12621  5473 D7            push a
12622  5474 11            mov a, b
12623  5475 FD 2E 06 00   mov32 cb, $00000006
12623  5479 00 00 
12624  547B B0            cmp a, b
12625  547C FD 74         sle ; <= (signed)
12626  547E E4            pop a
12627  547F             ; --- END RELATIONAL
12628  547F             ; --- START LOGICAL AND
12629  547F D7            push a
12630  5480 11            mov a, b
12631  5481 FA F5 FF      lea d, [bp + -11] ; $ratio
12632  5484 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12633  5487 FD 39         mov c, b ; And place it into C
12634  5489 2A            mov b, [d] ; Lower Word in B
12635  548A             ; --- START RELATIONAL
12636  548A D7            push a
12637  548B FD D8         push g
12638  548D 11            mov a, b
12639  548E FD 7A         mov g, c
12640  5490 FD 2E 02 00   mov32 cb, $00000002
12640  5494 00 00 
12641  5496 38 00 00      mov c, 0
12642  5499 FD AF         cmp32 ga, cb
12643  549B FD 81         sgu
12644  549D FD F1         pop g
12645  549F E4            pop a
12646  54A0             ; --- END RELATIONAL
12647  54A0 FD A7         sand a, b
12648  54A2 E4            pop a
12649  54A3             ; --- END LOGICAL AND
12650  54A3 C0 00 00      cmp b, 0
12651  54A6 C6 34 55      je _if765_exit
12652  54A9             _if765_TRUE:
12653  54A9             ; r = rand8(); 
12654  54A9 FA 00 00      lea d, [bp + 0] ; $r
12655  54AC DA            push d
12656  54AD             ; --- START FUNCTION CALL
12657  54AD 07 6F 05      call rand8
12658  54B0 E7            pop d
12659  54B1 FD 3E         mov [d], bl
12660  54B3             ; damage[r] =damage[r] - ratio + get_rand(50); 
12661  54B3 3B AE 6E      mov d, _damage_data ; $damage
12662  54B6 D7            push a
12663  54B7 DA            push d
12664  54B8 FA 00 00      lea d, [bp + 0] ; $r
12665  54BB 32            mov bl, [d]
12666  54BC A7 00         mov bh, 0
12667  54BE 38 00 00      mov c, 0
12668  54C1 E7            pop d
12669  54C2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12670  54C6 E4            pop a
12671  54C7 DA            push d
12672  54C8 3B AE 6E      mov d, _damage_data ; $damage
12673  54CB D7            push a
12674  54CC DA            push d
12675  54CD FA 00 00      lea d, [bp + 0] ; $r
12676  54D0 32            mov bl, [d]
12677  54D1 A7 00         mov bh, 0
12678  54D3 38 00 00      mov c, 0
12679  54D6 E7            pop d
12680  54D7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12681  54DB E4            pop a
12682  54DC 2A            mov b, [d]
12683  54DD 38 00 00      mov c, 0
12684  54E0             ; --- START TERMS
12685  54E0 D7            push a
12686  54E1 11            mov a, b
12687  54E2 FA F5 FF      lea d, [bp + -11] ; $ratio
12688  54E5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12689  54E8 FD 39         mov c, b ; And place it into C
12690  54EA 2A            mov b, [d] ; Lower Word in B
12691  54EB FD 22 00 00   mov g, 0
12692  54EF FD 1C         sub32 ga, cb
12693  54F1 27            mov b, a
12694  54F2 FD 38         mov c, g
12695  54F4 11            mov a, b
12696  54F5 FD 7A         mov g, c
12697  54F7             ; --- START FUNCTION CALL
12698  54F7 FD 2E 32 00   mov32 cb, $00000032
12698  54FB 00 00 
12699  54FD FD AB         swp b
12700  54FF D8            push b
12701  5500 07 FF 04      call get_rand
12702  5503 51 02 00      add sp, 2
12703  5506             ; --- END FUNCTION CALL
12704  5506 38 00 00      mov c, 0
12705  5509 FD 15         add32 cb, ga
12706  550B E4            pop a
12707  550C             ; --- END TERMS
12708  550C E7            pop d
12709  550D FD 43         mov [d], b
12710  550F             ; printf("Damage Control reports\n'%s' damaged by hit\n\n", get_device_name(r)); 
12711  550F             ; --- START FUNCTION CALL
12712  550F             ; --- START FUNCTION CALL
12713  550F FA 00 00      lea d, [bp + 0] ; $r
12714  5512 32            mov bl, [d]
12715  5513 A7 00         mov bh, 0
12716  5515 38 00 00      mov c, 0
12717  5518 AB            snex b
12718  5519 FD AB         swp b
12719  551B D8            push b
12720  551C 07 9F 59      call get_device_name
12721  551F 51 02 00      add sp, 2
12722  5522             ; --- END FUNCTION CALL
12723  5522 FD AB         swp b
12724  5524 D8            push b
12725  5525 26 FC 82      mov b, _s160 ; "Damage Control reports\n'%s' damaged by hit\n\n"
12726  5528 FD AB         swp b
12727  552A D8            push b
12728  552B 07 B4 60      call printf
12729  552E 51 04 00      add sp, 4
12730  5531             ; --- END FUNCTION CALL
12731  5531 0A 34 55      jmp _if765_exit
12732  5534             _if765_exit:
12733  5534 0A 37 55      jmp _if762_exit
12734  5537             _if762_exit:
12735  5537 0A 3A 55      jmp _if748_exit
12736  553A             _if748_exit:
12737  553A             ; k++; 
12738  553A FA F9 FF      lea d, [bp + -7] ; $k
12739  553D 2A            mov b, [d]
12740  553E 38 00 00      mov c, 0
12741  5541 11            mov a, b
12742  5542 FD 77         inc b
12743  5544 FD 77         inc b
12744  5546 FA F9 FF      lea d, [bp + -7] ; $k
12745  5549 FD 43         mov [d], b
12746  554B 27            mov b, a
12747  554C             _for747_update:
12748  554C FA FB FF      lea d, [bp + -5] ; $i
12749  554F 32            mov bl, [d]
12750  5550 A7 00         mov bh, 0
12751  5552 38 00 00      mov c, 0
12752  5555 FD 77         inc b
12753  5557 FA FB FF      lea d, [bp + -5] ; $i
12754  555A FD 3E         mov [d], bl
12755  555C FD 7D         dec b
12756  555E 0A A5 51      jmp _for747_cond
12757  5561             _for747_exit:
12758  5561 F9            leave
12759  5562 09            ret
12760  5563             
12761  5563             repair_damage:
12762  5563 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12763  5566             ; int i; 
12764  5566 52 02 00      sub sp, 2
12765  5569             ; int d1; 
12766  5569 52 02 00      sub sp, 2
12767  556C             ; unsigned int         repair_factor;		/* Repair Factor */ 
12768  556C 52 02 00      sub sp, 2
12769  556F             ; repair_factor = warp; 
12770  556F FA FB FF      lea d, [bp + -5] ; $repair_factor
12771  5572 DA            push d
12772  5573 FA 05 00      lea d, [bp + 5] ; $warp
12773  5576 2A            mov b, [d]
12774  5577 38 00 00      mov c, 0
12775  557A E7            pop d
12776  557B FD 43         mov [d], b
12777  557D             ; if (warp >= 100) 
12778  557D             _if766_cond:
12779  557D FA 05 00      lea d, [bp + 5] ; $warp
12780  5580 2A            mov b, [d]
12781  5581 38 00 00      mov c, 0
12782  5584             ; --- START RELATIONAL
12783  5584 D7            push a
12784  5585 11            mov a, b
12785  5586 FD 2E 64 00   mov32 cb, $00000064
12785  558A 00 00 
12786  558C B0            cmp a, b
12787  558D FD 82         sgeu ; >= (unsigned)
12788  558F E4            pop a
12789  5590             ; --- END RELATIONAL
12790  5590 C0 00 00      cmp b, 0
12791  5593 C6 AF 55      je _if766_exit
12792  5596             _if766_TRUE:
12793  5596             ; repair_factor = TO_FIXED00(1); 
12794  5596 FA FB FF      lea d, [bp + -5] ; $repair_factor
12795  5599 DA            push d
12796  559A             ; --- START FUNCTION CALL
12797  559A FD 2E 01 00   mov32 cb, $00000001
12797  559E 00 00 
12798  55A0 FD AB         swp b
12799  55A2 D8            push b
12800  55A3 07 8B 04      call TO_FIXED00
12801  55A6 51 02 00      add sp, 2
12802  55A9             ; --- END FUNCTION CALL
12803  55A9 E7            pop d
12804  55AA FD 43         mov [d], b
12805  55AC 0A AF 55      jmp _if766_exit
12806  55AF             _if766_exit:
12807  55AF             ; for (i = 1; i <= 8; i++) { 
12808  55AF             _for767_init:
12809  55AF FA FF FF      lea d, [bp + -1] ; $i
12810  55B2 DA            push d
12811  55B3 FD 2E 01 00   mov32 cb, $00000001
12811  55B7 00 00 
12812  55B9 E7            pop d
12813  55BA FD 43         mov [d], b
12814  55BC             _for767_cond:
12815  55BC FA FF FF      lea d, [bp + -1] ; $i
12816  55BF 2A            mov b, [d]
12817  55C0 38 00 00      mov c, 0
12818  55C3             ; --- START RELATIONAL
12819  55C3 D7            push a
12820  55C4 11            mov a, b
12821  55C5 FD 2E 08 00   mov32 cb, $00000008
12821  55C9 00 00 
12822  55CB B0            cmp a, b
12823  55CC FD 74         sle ; <= (signed)
12824  55CE E4            pop a
12825  55CF             ; --- END RELATIONAL
12826  55CF C0 00 00      cmp b, 0
12827  55D2 C6 57 57      je _for767_exit
12828  55D5             _for767_block:
12829  55D5             ; if (damage[i] < 0) { 
12830  55D5             _if768_cond:
12831  55D5 3B AE 6E      mov d, _damage_data ; $damage
12832  55D8 D7            push a
12833  55D9 DA            push d
12834  55DA FA FF FF      lea d, [bp + -1] ; $i
12835  55DD 2A            mov b, [d]
12836  55DE 38 00 00      mov c, 0
12837  55E1 E7            pop d
12838  55E2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12839  55E6 E4            pop a
12840  55E7 2A            mov b, [d]
12841  55E8 38 00 00      mov c, 0
12842  55EB             ; --- START RELATIONAL
12843  55EB D7            push a
12844  55EC 11            mov a, b
12845  55ED FD 2E 00 00   mov32 cb, $00000000
12845  55F1 00 00 
12846  55F3 B0            cmp a, b
12847  55F4 FD 73         slt ; < (signed)
12848  55F6 E4            pop a
12849  55F7             ; --- END RELATIONAL
12850  55F7 C0 00 00      cmp b, 0
12851  55FA C6 44 57      je _if768_exit
12852  55FD             _if768_TRUE:
12853  55FD             ; damage[i] = damage[i] + repair_factor; 
12854  55FD 3B AE 6E      mov d, _damage_data ; $damage
12855  5600 D7            push a
12856  5601 DA            push d
12857  5602 FA FF FF      lea d, [bp + -1] ; $i
12858  5605 2A            mov b, [d]
12859  5606 38 00 00      mov c, 0
12860  5609 E7            pop d
12861  560A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12862  560E E4            pop a
12863  560F DA            push d
12864  5610 3B AE 6E      mov d, _damage_data ; $damage
12865  5613 D7            push a
12866  5614 DA            push d
12867  5615 FA FF FF      lea d, [bp + -1] ; $i
12868  5618 2A            mov b, [d]
12869  5619 38 00 00      mov c, 0
12870  561C E7            pop d
12871  561D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12872  5621 E4            pop a
12873  5622 2A            mov b, [d]
12874  5623 38 00 00      mov c, 0
12875  5626             ; --- START TERMS
12876  5626 D7            push a
12877  5627 11            mov a, b
12878  5628 FA FB FF      lea d, [bp + -5] ; $repair_factor
12879  562B 2A            mov b, [d]
12880  562C 38 00 00      mov c, 0
12881  562F 56            add b, a
12882  5630 E4            pop a
12883  5631             ; --- END TERMS
12884  5631 E7            pop d
12885  5632 FD 43         mov [d], b
12886  5634             ; if (damage[i] > -10 && damage[i] < 0)	/* -0.1 */ 
12887  5634             _if769_cond:
12888  5634 3B AE 6E      mov d, _damage_data ; $damage
12889  5637 D7            push a
12890  5638 DA            push d
12891  5639 FA FF FF      lea d, [bp + -1] ; $i
12892  563C 2A            mov b, [d]
12893  563D 38 00 00      mov c, 0
12894  5640 E7            pop d
12895  5641 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12896  5645 E4            pop a
12897  5646 2A            mov b, [d]
12898  5647 38 00 00      mov c, 0
12899  564A             ; --- START RELATIONAL
12900  564A D7            push a
12901  564B 11            mov a, b
12902  564C FD 2E F6 FF   mov32 cb, $fffffff6
12902  5650 FF FF 
12903  5652 B0            cmp a, b
12904  5653 FD 7F         sgt ; >
12905  5655 E4            pop a
12906  5656             ; --- END RELATIONAL
12907  5656             ; --- START LOGICAL AND
12908  5656 D7            push a
12909  5657 11            mov a, b
12910  5658 3B AE 6E      mov d, _damage_data ; $damage
12911  565B D7            push a
12912  565C DA            push d
12913  565D FA FF FF      lea d, [bp + -1] ; $i
12914  5660 2A            mov b, [d]
12915  5661 38 00 00      mov c, 0
12916  5664 E7            pop d
12917  5665 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12918  5669 E4            pop a
12919  566A 2A            mov b, [d]
12920  566B 38 00 00      mov c, 0
12921  566E             ; --- START RELATIONAL
12922  566E D7            push a
12923  566F 11            mov a, b
12924  5670 FD 2E 00 00   mov32 cb, $00000000
12924  5674 00 00 
12925  5676 B0            cmp a, b
12926  5677 FD 73         slt ; < (signed)
12927  5679 E4            pop a
12928  567A             ; --- END RELATIONAL
12929  567A FD A7         sand a, b
12930  567C E4            pop a
12931  567D             ; --- END LOGICAL AND
12932  567D C0 00 00      cmp b, 0
12933  5680 C6 A2 56      je _if769_else
12934  5683             _if769_TRUE:
12935  5683             ; damage[i] = -10; 
12936  5683 3B AE 6E      mov d, _damage_data ; $damage
12937  5686 D7            push a
12938  5687 DA            push d
12939  5688 FA FF FF      lea d, [bp + -1] ; $i
12940  568B 2A            mov b, [d]
12941  568C 38 00 00      mov c, 0
12942  568F E7            pop d
12943  5690 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12944  5694 E4            pop a
12945  5695 DA            push d
12946  5696 FD 2E F6 FF   mov32 cb, $fffffff6
12946  569A FF FF 
12947  569C E7            pop d
12948  569D FD 43         mov [d], b
12949  569F 0A 41 57      jmp _if769_exit
12950  56A2             _if769_else:
12951  56A2             ; if (damage[i] >= 0) { 
12952  56A2             _if770_cond:
12953  56A2 3B AE 6E      mov d, _damage_data ; $damage
12954  56A5 D7            push a
12955  56A6 DA            push d
12956  56A7 FA FF FF      lea d, [bp + -1] ; $i
12957  56AA 2A            mov b, [d]
12958  56AB 38 00 00      mov c, 0
12959  56AE E7            pop d
12960  56AF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12961  56B3 E4            pop a
12962  56B4 2A            mov b, [d]
12963  56B5 38 00 00      mov c, 0
12964  56B8             ; --- START RELATIONAL
12965  56B8 D7            push a
12966  56B9 11            mov a, b
12967  56BA FD 2E 00 00   mov32 cb, $00000000
12967  56BE 00 00 
12968  56C0 B0            cmp a, b
12969  56C1 FD 80         sge ; >=
12970  56C3 E4            pop a
12971  56C4             ; --- END RELATIONAL
12972  56C4 C0 00 00      cmp b, 0
12973  56C7 C6 41 57      je _if770_exit
12974  56CA             _if770_TRUE:
12975  56CA             ; if (d1 != 1) { 
12976  56CA             _if771_cond:
12977  56CA FA FD FF      lea d, [bp + -3] ; $d1
12978  56CD 2A            mov b, [d]
12979  56CE 38 00 00      mov c, 0
12980  56D1             ; --- START RELATIONAL
12981  56D1 D7            push a
12982  56D2 11            mov a, b
12983  56D3 FD 2E 01 00   mov32 cb, $00000001
12983  56D7 00 00 
12984  56D9 B0            cmp a, b
12985  56DA FD 72         sneq ; !=
12986  56DC E4            pop a
12987  56DD             ; --- END RELATIONAL
12988  56DD C0 00 00      cmp b, 0
12989  56E0 C6 03 57      je _if771_exit
12990  56E3             _if771_TRUE:
12991  56E3             ; d1 = 1; 
12992  56E3 FA FD FF      lea d, [bp + -3] ; $d1
12993  56E6 DA            push d
12994  56E7 FD 2E 01 00   mov32 cb, $00000001
12994  56EB 00 00 
12995  56ED E7            pop d
12996  56EE FD 43         mov [d], b
12997  56F0             ; puts(dcr_1); 
12998  56F0             ; --- START FUNCTION CALL
12999  56F0 3B BD 6F      mov d, _dcr_1 ; $dcr_1
13000  56F3 2A            mov b, [d]
13001  56F4 38 00 00      mov c, 0
13002  56F7 FD AB         swp b
13003  56F9 D8            push b
13004  56FA 07 C8 69      call puts
13005  56FD 51 02 00      add sp, 2
13006  5700             ; --- END FUNCTION CALL
13007  5700 0A 03 57      jmp _if771_exit
13008  5703             _if771_exit:
13009  5703             ; printf("    %s repair completed\n\n", 
13010  5703             ; --- START FUNCTION CALL
13011  5703             ; --- START FUNCTION CALL
13012  5703 FA FF FF      lea d, [bp + -1] ; $i
13013  5706 2A            mov b, [d]
13014  5707 38 00 00      mov c, 0
13015  570A FD AB         swp b
13016  570C D8            push b
13017  570D 07 9F 59      call get_device_name
13018  5710 51 02 00      add sp, 2
13019  5713             ; --- END FUNCTION CALL
13020  5713 FD AB         swp b
13021  5715 D8            push b
13022  5716 26 29 83      mov b, _s161 ; "    %s repair completed\n\n"
13023  5719 FD AB         swp b
13024  571B D8            push b
13025  571C 07 B4 60      call printf
13026  571F 51 04 00      add sp, 4
13027  5722             ; --- END FUNCTION CALL
13028  5722             ; damage[i] = 0; 
13029  5722 3B AE 6E      mov d, _damage_data ; $damage
13030  5725 D7            push a
13031  5726 DA            push d
13032  5727 FA FF FF      lea d, [bp + -1] ; $i
13033  572A 2A            mov b, [d]
13034  572B 38 00 00      mov c, 0
13035  572E E7            pop d
13036  572F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13037  5733 E4            pop a
13038  5734 DA            push d
13039  5735 FD 2E 00 00   mov32 cb, $00000000
13039  5739 00 00 
13040  573B E7            pop d
13041  573C FD 43         mov [d], b
13042  573E 0A 41 57      jmp _if770_exit
13043  5741             _if770_exit:
13044  5741             _if769_exit:
13045  5741 0A 44 57      jmp _if768_exit
13046  5744             _if768_exit:
13047  5744             _for767_update:
13048  5744 FA FF FF      lea d, [bp + -1] ; $i
13049  5747 2A            mov b, [d]
13050  5748 38 00 00      mov c, 0
13051  574B 11            mov a, b
13052  574C FD 77         inc b
13053  574E FA FF FF      lea d, [bp + -1] ; $i
13054  5751 FD 43         mov [d], b
13055  5753 27            mov b, a
13056  5754 0A BC 55      jmp _for767_cond
13057  5757             _for767_exit:
13058  5757             ; unsigned char        r; 
13059  5757 52 01 00      sub sp, 1
13060  575A             ; if (get_rand(10) <= 2) { 
13061  575A             _if772_cond:
13062  575A             ; --- START FUNCTION CALL
13063  575A FD 2E 0A 00   mov32 cb, $0000000a
13063  575E 00 00 
13064  5760 FD AB         swp b
13065  5762 D8            push b
13066  5763 07 FF 04      call get_rand
13067  5766 51 02 00      add sp, 2
13068  5769             ; --- END FUNCTION CALL
13069  5769             ; --- START RELATIONAL
13070  5769 D7            push a
13071  576A 11            mov a, b
13072  576B FD 2E 02 00   mov32 cb, $00000002
13072  576F 00 00 
13073  5771 B0            cmp a, b
13074  5772 FD 74         sle ; <= (signed)
13075  5774 E4            pop a
13076  5775             ; --- END RELATIONAL
13077  5775 C0 00 00      cmp b, 0
13078  5778 C6 A9 58      je _if772_exit
13079  577B             _if772_TRUE:
13080  577B             ; r = rand8(); 
13081  577B FA FA FF      lea d, [bp + -6] ; $r
13082  577E DA            push d
13083  577F             ; --- START FUNCTION CALL
13084  577F 07 6F 05      call rand8
13085  5782 E7            pop d
13086  5783 FD 3E         mov [d], bl
13087  5785             ; if (get_rand(10) < 6) { 
13088  5785             _if773_cond:
13089  5785             ; --- START FUNCTION CALL
13090  5785 FD 2E 0A 00   mov32 cb, $0000000a
13090  5789 00 00 
13091  578B FD AB         swp b
13092  578D D8            push b
13093  578E 07 FF 04      call get_rand
13094  5791 51 02 00      add sp, 2
13095  5794             ; --- END FUNCTION CALL
13096  5794             ; --- START RELATIONAL
13097  5794 D7            push a
13098  5795 11            mov a, b
13099  5796 FD 2E 06 00   mov32 cb, $00000006
13099  579A 00 00 
13100  579C B0            cmp a, b
13101  579D FD 73         slt ; < (signed)
13102  579F E4            pop a
13103  57A0             ; --- END RELATIONAL
13104  57A0 C0 00 00      cmp b, 0
13105  57A3 C6 29 58      je _if773_else
13106  57A6             _if773_TRUE:
13107  57A6             ; damage[r] =damage[r]- (get_rand(500) + 100); 
13108  57A6 3B AE 6E      mov d, _damage_data ; $damage
13109  57A9 D7            push a
13110  57AA DA            push d
13111  57AB FA FA FF      lea d, [bp + -6] ; $r
13112  57AE 32            mov bl, [d]
13113  57AF A7 00         mov bh, 0
13114  57B1 38 00 00      mov c, 0
13115  57B4 E7            pop d
13116  57B5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13117  57B9 E4            pop a
13118  57BA DA            push d
13119  57BB 3B AE 6E      mov d, _damage_data ; $damage
13120  57BE D7            push a
13121  57BF DA            push d
13122  57C0 FA FA FF      lea d, [bp + -6] ; $r
13123  57C3 32            mov bl, [d]
13124  57C4 A7 00         mov bh, 0
13125  57C6 38 00 00      mov c, 0
13126  57C9 E7            pop d
13127  57CA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13128  57CE E4            pop a
13129  57CF 2A            mov b, [d]
13130  57D0 38 00 00      mov c, 0
13131  57D3             ; --- START TERMS
13132  57D3 D7            push a
13133  57D4 11            mov a, b
13134  57D5             ; --- START FUNCTION CALL
13135  57D5 FD 2E F4 01   mov32 cb, $000001f4
13135  57D9 00 00 
13136  57DB FD AB         swp b
13137  57DD D8            push b
13138  57DE 07 FF 04      call get_rand
13139  57E1 51 02 00      add sp, 2
13140  57E4             ; --- END FUNCTION CALL
13141  57E4             ; --- START TERMS
13142  57E4 D7            push a
13143  57E5 11            mov a, b
13144  57E6 FD 2E 64 00   mov32 cb, $00000064
13144  57EA 00 00 
13145  57EC 56            add b, a
13146  57ED E4            pop a
13147  57EE             ; --- END TERMS
13148  57EE 60            sub a, b
13149  57EF 27            mov b, a
13150  57F0 E4            pop a
13151  57F1             ; --- END TERMS
13152  57F1 E7            pop d
13153  57F2 FD 43         mov [d], b
13154  57F4             ; puts(dcr_1); 
13155  57F4             ; --- START FUNCTION CALL
13156  57F4 3B BD 6F      mov d, _dcr_1 ; $dcr_1
13157  57F7 2A            mov b, [d]
13158  57F8 38 00 00      mov c, 0
13159  57FB FD AB         swp b
13160  57FD D8            push b
13161  57FE 07 C8 69      call puts
13162  5801 51 02 00      add sp, 2
13163  5804             ; --- END FUNCTION CALL
13164  5804             ; printf("    %s damaged\n\n", get_device_name(r)); 
13165  5804             ; --- START FUNCTION CALL
13166  5804             ; --- START FUNCTION CALL
13167  5804 FA FA FF      lea d, [bp + -6] ; $r
13168  5807 32            mov bl, [d]
13169  5808 A7 00         mov bh, 0
13170  580A 38 00 00      mov c, 0
13171  580D AB            snex b
13172  580E FD AB         swp b
13173  5810 D8            push b
13174  5811 07 9F 59      call get_device_name
13175  5814 51 02 00      add sp, 2
13176  5817             ; --- END FUNCTION CALL
13177  5817 FD AB         swp b
13178  5819 D8            push b
13179  581A 26 43 83      mov b, _s162 ; "    %s damaged\n\n"
13180  581D FD AB         swp b
13181  581F D8            push b
13182  5820 07 B4 60      call printf
13183  5823 51 04 00      add sp, 4
13184  5826             ; --- END FUNCTION CALL
13185  5826 0A A6 58      jmp _if773_exit
13186  5829             _if773_else:
13187  5829             ; damage[r] = damage[r] + get_rand(300) + 100; 
13188  5829 3B AE 6E      mov d, _damage_data ; $damage
13189  582C D7            push a
13190  582D DA            push d
13191  582E FA FA FF      lea d, [bp + -6] ; $r
13192  5831 32            mov bl, [d]
13193  5832 A7 00         mov bh, 0
13194  5834 38 00 00      mov c, 0
13195  5837 E7            pop d
13196  5838 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13197  583C E4            pop a
13198  583D DA            push d
13199  583E 3B AE 6E      mov d, _damage_data ; $damage
13200  5841 D7            push a
13201  5842 DA            push d
13202  5843 FA FA FF      lea d, [bp + -6] ; $r
13203  5846 32            mov bl, [d]
13204  5847 A7 00         mov bh, 0
13205  5849 38 00 00      mov c, 0
13206  584C E7            pop d
13207  584D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13208  5851 E4            pop a
13209  5852 2A            mov b, [d]
13210  5853 38 00 00      mov c, 0
13211  5856             ; --- START TERMS
13212  5856 D7            push a
13213  5857 11            mov a, b
13214  5858             ; --- START FUNCTION CALL
13215  5858 FD 2E 2C 01   mov32 cb, $0000012c
13215  585C 00 00 
13216  585E FD AB         swp b
13217  5860 D8            push b
13218  5861 07 FF 04      call get_rand
13219  5864 51 02 00      add sp, 2
13220  5867             ; --- END FUNCTION CALL
13221  5867 56            add b, a
13222  5868 11            mov a, b
13223  5869 FD 2E 64 00   mov32 cb, $00000064
13223  586D 00 00 
13224  586F 56            add b, a
13225  5870 E4            pop a
13226  5871             ; --- END TERMS
13227  5871 E7            pop d
13228  5872 FD 43         mov [d], b
13229  5874             ; puts(dcr_1); 
13230  5874             ; --- START FUNCTION CALL
13231  5874 3B BD 6F      mov d, _dcr_1 ; $dcr_1
13232  5877 2A            mov b, [d]
13233  5878 38 00 00      mov c, 0
13234  587B FD AB         swp b
13235  587D D8            push b
13236  587E 07 C8 69      call puts
13237  5881 51 02 00      add sp, 2
13238  5884             ; --- END FUNCTION CALL
13239  5884             ; printf("    %s state of repair improved\n\n", 
13240  5884             ; --- START FUNCTION CALL
13241  5884             ; --- START FUNCTION CALL
13242  5884 FA FA FF      lea d, [bp + -6] ; $r
13243  5887 32            mov bl, [d]
13244  5888 A7 00         mov bh, 0
13245  588A 38 00 00      mov c, 0
13246  588D AB            snex b
13247  588E FD AB         swp b
13248  5890 D8            push b
13249  5891 07 9F 59      call get_device_name
13250  5894 51 02 00      add sp, 2
13251  5897             ; --- END FUNCTION CALL
13252  5897 FD AB         swp b
13253  5899 D8            push b
13254  589A 26 54 83      mov b, _s163 ; "    %s state of repair improved\n\n"
13255  589D FD AB         swp b
13256  589F D8            push b
13257  58A0 07 B4 60      call printf
13258  58A3 51 04 00      add sp, 4
13259  58A6             ; --- END FUNCTION CALL
13260  58A6             _if773_exit:
13261  58A6 0A A9 58      jmp _if772_exit
13262  58A9             _if772_exit:
13263  58A9 F9            leave
13264  58AA 09            ret
13265  58AB             
13266  58AB             find_set_empty_place:
13267  58AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
13268  58AE             ; unsigned char        r1, r2; 
13269  58AE 52 01 00      sub sp, 1
13270  58B1 52 01 00      sub sp, 1
13271  58B4             ; do { 
13272  58B4             _do774_block:
13273  58B4             ; r1 = rand8(); 
13274  58B4 FA 00 00      lea d, [bp + 0] ; $r1
13275  58B7 DA            push d
13276  58B8             ; --- START FUNCTION CALL
13277  58B8 07 6F 05      call rand8
13278  58BB E7            pop d
13279  58BC FD 3E         mov [d], bl
13280  58BE             ; r2 = rand8(); 
13281  58BE FA FF FF      lea d, [bp + -1] ; $r2
13282  58C1 DA            push d
13283  58C2             ; --- START FUNCTION CALL
13284  58C2 07 6F 05      call rand8
13285  58C5 E7            pop d
13286  58C6 FD 3E         mov [d], bl
13287  58C8             ; } while (quad[r1+-1][r2+-1] != 		0        ); 
13288  58C8             _do774_cond:
13289  58C8 3B C8 6E      mov d, _quad_data ; $quad
13290  58CB D7            push a
13291  58CC DA            push d
13292  58CD FA 00 00      lea d, [bp + 0] ; $r1
13293  58D0 32            mov bl, [d]
13294  58D1 A7 00         mov bh, 0
13295  58D3 38 00 00      mov c, 0
13296  58D6             ; --- START TERMS
13297  58D6 D7            push a
13298  58D7 11            mov a, b
13299  58D8 FD 2E FF FF   mov32 cb, $ffffffff
13299  58DC FF FF 
13300  58DE 56            add b, a
13301  58DF E4            pop a
13302  58E0             ; --- END TERMS
13303  58E0 E7            pop d
13304  58E1 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
13305  58E5 DA            push d
13306  58E6 FA FF FF      lea d, [bp + -1] ; $r2
13307  58E9 32            mov bl, [d]
13308  58EA A7 00         mov bh, 0
13309  58EC 38 00 00      mov c, 0
13310  58EF             ; --- START TERMS
13311  58EF D7            push a
13312  58F0 11            mov a, b
13313  58F1 FD 2E FF FF   mov32 cb, $ffffffff
13313  58F5 FF FF 
13314  58F7 56            add b, a
13315  58F8 E4            pop a
13316  58F9             ; --- END TERMS
13317  58F9 E7            pop d
13318  58FA 5A            add d, b
13319  58FB E4            pop a
13320  58FC 32            mov bl, [d]
13321  58FD A7 00         mov bh, 0
13322  58FF 38 00 00      mov c, 0
13323  5902             ; --- START RELATIONAL
13324  5902 D7            push a
13325  5903 11            mov a, b
13326  5904 FD 2E 00 00   mov32 cb, $00000000
13326  5908 00 00 
13327  590A B0            cmp a, b
13328  590B FD 72         sneq ; !=
13329  590D E4            pop a
13330  590E             ; --- END RELATIONAL
13331  590E C0 01 00      cmp b, 1
13332  5911 C6 B4 58      je _do774_block
13333  5914             _do774_exit:
13334  5914             ; quad[r1+-1][r2+-1] = t; 
13335  5914 3B C8 6E      mov d, _quad_data ; $quad
13336  5917 D7            push a
13337  5918 DA            push d
13338  5919 FA 00 00      lea d, [bp + 0] ; $r1
13339  591C 32            mov bl, [d]
13340  591D A7 00         mov bh, 0
13341  591F 38 00 00      mov c, 0
13342  5922             ; --- START TERMS
13343  5922 D7            push a
13344  5923 11            mov a, b
13345  5924 FD 2E FF FF   mov32 cb, $ffffffff
13345  5928 FF FF 
13346  592A 56            add b, a
13347  592B E4            pop a
13348  592C             ; --- END TERMS
13349  592C E7            pop d
13350  592D FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
13351  5931 DA            push d
13352  5932 FA FF FF      lea d, [bp + -1] ; $r2
13353  5935 32            mov bl, [d]
13354  5936 A7 00         mov bh, 0
13355  5938 38 00 00      mov c, 0
13356  593B             ; --- START TERMS
13357  593B D7            push a
13358  593C 11            mov a, b
13359  593D FD 2E FF FF   mov32 cb, $ffffffff
13359  5941 FF FF 
13360  5943 56            add b, a
13361  5944 E4            pop a
13362  5945             ; --- END TERMS
13363  5945 E7            pop d
13364  5946 5A            add d, b
13365  5947 E4            pop a
13366  5948 DA            push d
13367  5949 FA 05 00      lea d, [bp + 5] ; $t
13368  594C 32            mov bl, [d]
13369  594D A7 00         mov bh, 0
13370  594F 38 00 00      mov c, 0
13371  5952 E7            pop d
13372  5953 FD 3E         mov [d], bl
13373  5955             ; if (z1) 
13374  5955             _if775_cond:
13375  5955 FA 06 00      lea d, [bp + 6] ; $z1
13376  5958 2A            mov b, [d]
13377  5959 38 00 00      mov c, 0
13378  595C C0 00 00      cmp b, 0
13379  595F C6 79 59      je _if775_exit
13380  5962             _if775_TRUE:
13381  5962             ; *z1 = r1; 
13382  5962 FA 06 00      lea d, [bp + 6] ; $z1
13383  5965 2A            mov b, [d]
13384  5966 38 00 00      mov c, 0
13385  5969 D8            push b
13386  596A FA 00 00      lea d, [bp + 0] ; $r1
13387  596D 32            mov bl, [d]
13388  596E A7 00         mov bh, 0
13389  5970 38 00 00      mov c, 0
13390  5973 E7            pop d
13391  5974 FD 3E         mov [d], bl
13392  5976 0A 79 59      jmp _if775_exit
13393  5979             _if775_exit:
13394  5979             ; if (z2) 
13395  5979             _if776_cond:
13396  5979 FA 08 00      lea d, [bp + 8] ; $z2
13397  597C 2A            mov b, [d]
13398  597D 38 00 00      mov c, 0
13399  5980 C0 00 00      cmp b, 0
13400  5983 C6 9D 59      je _if776_exit
13401  5986             _if776_TRUE:
13402  5986             ; *z2 = r2; 
13403  5986 FA 08 00      lea d, [bp + 8] ; $z2
13404  5989 2A            mov b, [d]
13405  598A 38 00 00      mov c, 0
13406  598D D8            push b
13407  598E FA FF FF      lea d, [bp + -1] ; $r2
13408  5991 32            mov bl, [d]
13409  5992 A7 00         mov bh, 0
13410  5994 38 00 00      mov c, 0
13411  5997 E7            pop d
13412  5998 FD 3E         mov [d], bl
13413  599A 0A 9D 59      jmp _if776_exit
13414  599D             _if776_exit:
13415  599D F9            leave
13416  599E 09            ret
13417  599F             
13418  599F             get_device_name:
13419  599F F8 00 00      enter 0 ; (push bp; mov bp, sp)
13420  59A2             ; if (n < 0 || n > 8) 
13421  59A2             _if777_cond:
13422  59A2 FA 05 00      lea d, [bp + 5] ; $n
13423  59A5 2A            mov b, [d]
13424  59A6 38 00 00      mov c, 0
13425  59A9             ; --- START RELATIONAL
13426  59A9 D7            push a
13427  59AA 11            mov a, b
13428  59AB FD 2E 00 00   mov32 cb, $00000000
13428  59AF 00 00 
13429  59B1 B0            cmp a, b
13430  59B2 FD 73         slt ; < (signed)
13431  59B4 E4            pop a
13432  59B5             ; --- END RELATIONAL
13433  59B5             ; --- START LOGICAL OR
13434  59B5 D7            push a
13435  59B6 11            mov a, b
13436  59B7 FA 05 00      lea d, [bp + 5] ; $n
13437  59BA 2A            mov b, [d]
13438  59BB 38 00 00      mov c, 0
13439  59BE             ; --- START RELATIONAL
13440  59BE D7            push a
13441  59BF 11            mov a, b
13442  59C0 FD 2E 08 00   mov32 cb, $00000008
13442  59C4 00 00 
13443  59C6 B0            cmp a, b
13444  59C7 FD 7F         sgt ; >
13445  59C9 E4            pop a
13446  59CA             ; --- END RELATIONAL
13447  59CA FD A8         sor a, b ; ||
13448  59CC E4            pop a
13449  59CD             ; --- END LOGICAL OR
13450  59CD C0 00 00      cmp b, 0
13451  59D0 C6 E3 59      je _if777_exit
13452  59D3             _if777_TRUE:
13453  59D3             ; n = 0; 
13454  59D3 FA 05 00      lea d, [bp + 5] ; $n
13455  59D6 DA            push d
13456  59D7 FD 2E 00 00   mov32 cb, $00000000
13456  59DB 00 00 
13457  59DD E7            pop d
13458  59DE FD 43         mov [d], b
13459  59E0 0A E3 59      jmp _if777_exit
13460  59E3             _if777_exit:
13461  59E3             ; return device_name[n]; 
13462  59E3 3B 82 6F      mov d, _device_name_data ; $device_name
13463  59E6 D7            push a
13464  59E7 DA            push d
13465  59E8 FA 05 00      lea d, [bp + 5] ; $n
13466  59EB 2A            mov b, [d]
13467  59EC 38 00 00      mov c, 0
13468  59EF E7            pop d
13469  59F0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13470  59F4 E4            pop a
13471  59F5 2A            mov b, [d]
13472  59F6 38 00 00      mov c, 0
13473  59F9 F9            leave
13474  59FA 09            ret
13475  59FB             
13476  59FB             quadrant_name:
13477  59FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
13478  59FE             ; static char *sect_name[] = { "", " I", " II", " III", " IV" }; 
13479  59FE 52 14 00      sub sp, 20
13480  5A01             ; if (y < 1 || y > 8 || x < 1 || x > 8) 
13481  5A01             _if778_cond:
13482  5A01 FA 06 00      lea d, [bp + 6] ; $y
13483  5A04 32            mov bl, [d]
13484  5A05 A7 00         mov bh, 0
13485  5A07 38 00 00      mov c, 0
13486  5A0A             ; --- START RELATIONAL
13487  5A0A D7            push a
13488  5A0B 11            mov a, b
13489  5A0C FD 2E 01 00   mov32 cb, $00000001
13489  5A10 00 00 
13490  5A12 B0            cmp a, b
13491  5A13 FD 75         slu ; < (unsigned)
13492  5A15 E4            pop a
13493  5A16             ; --- END RELATIONAL
13494  5A16             ; --- START LOGICAL OR
13495  5A16 D7            push a
13496  5A17 11            mov a, b
13497  5A18 FA 06 00      lea d, [bp + 6] ; $y
13498  5A1B 32            mov bl, [d]
13499  5A1C A7 00         mov bh, 0
13500  5A1E 38 00 00      mov c, 0
13501  5A21             ; --- START RELATIONAL
13502  5A21 D7            push a
13503  5A22 11            mov a, b
13504  5A23 FD 2E 08 00   mov32 cb, $00000008
13504  5A27 00 00 
13505  5A29 B0            cmp a, b
13506  5A2A FD 81         sgu ; > (unsigned)
13507  5A2C E4            pop a
13508  5A2D             ; --- END RELATIONAL
13509  5A2D FD A8         sor a, b ; ||
13510  5A2F 11            mov a, b
13511  5A30 FA 07 00      lea d, [bp + 7] ; $x
13512  5A33 32            mov bl, [d]
13513  5A34 A7 00         mov bh, 0
13514  5A36 38 00 00      mov c, 0
13515  5A39             ; --- START RELATIONAL
13516  5A39 D7            push a
13517  5A3A 11            mov a, b
13518  5A3B FD 2E 01 00   mov32 cb, $00000001
13518  5A3F 00 00 
13519  5A41 B0            cmp a, b
13520  5A42 FD 75         slu ; < (unsigned)
13521  5A44 E4            pop a
13522  5A45             ; --- END RELATIONAL
13523  5A45 FD A8         sor a, b ; ||
13524  5A47 11            mov a, b
13525  5A48 FA 07 00      lea d, [bp + 7] ; $x
13526  5A4B 32            mov bl, [d]
13527  5A4C A7 00         mov bh, 0
13528  5A4E 38 00 00      mov c, 0
13529  5A51             ; --- START RELATIONAL
13530  5A51 D7            push a
13531  5A52 11            mov a, b
13532  5A53 FD 2E 08 00   mov32 cb, $00000008
13532  5A57 00 00 
13533  5A59 B0            cmp a, b
13534  5A5A FD 81         sgu ; > (unsigned)
13535  5A5C E4            pop a
13536  5A5D             ; --- END RELATIONAL
13537  5A5D FD A8         sor a, b ; ||
13538  5A5F E4            pop a
13539  5A60             ; --- END LOGICAL OR
13540  5A60 C0 00 00      cmp b, 0
13541  5A63 C6 7F 5A      je _if778_exit
13542  5A66             _if778_TRUE:
13543  5A66             ; strcpy(quadname, "Unknown"); 
13544  5A66             ; --- START FUNCTION CALL
13545  5A66 26 86 83      mov b, _s168 ; "Unknown"
13546  5A69 FD AB         swp b
13547  5A6B D8            push b
13548  5A6C 3B 08 6F      mov d, _quadname_data ; $quadname
13549  5A6F 2D            mov b, d
13550  5A70 38 00 00      mov c, 0
13551  5A73 FD AB         swp b
13552  5A75 D8            push b
13553  5A76 07 FC 5E      call strcpy
13554  5A79 51 04 00      add sp, 4
13555  5A7C             ; --- END FUNCTION CALL
13556  5A7C 0A 7F 5A      jmp _if778_exit
13557  5A7F             _if778_exit:
13558  5A7F             ; if (x <= 4) 
13559  5A7F             _if779_cond:
13560  5A7F FA 07 00      lea d, [bp + 7] ; $x
13561  5A82 32            mov bl, [d]
13562  5A83 A7 00         mov bh, 0
13563  5A85 38 00 00      mov c, 0
13564  5A88             ; --- START RELATIONAL
13565  5A88 D7            push a
13566  5A89 11            mov a, b
13567  5A8A FD 2E 04 00   mov32 cb, $00000004
13567  5A8E 00 00 
13568  5A90 B0            cmp a, b
13569  5A91 FD 76         sleu ; <= (unsigned)
13570  5A93 E4            pop a
13571  5A94             ; --- END RELATIONAL
13572  5A94 C0 00 00      cmp b, 0
13573  5A97 C6 C8 5A      je _if779_else
13574  5A9A             _if779_TRUE:
13575  5A9A             ; strcpy(quadname, quad_name[y]); 
13576  5A9A             ; --- START FUNCTION CALL
13577  5A9A 3B 3E 6F      mov d, _quad_name_data ; $quad_name
13578  5A9D D7            push a
13579  5A9E DA            push d
13580  5A9F FA 06 00      lea d, [bp + 6] ; $y
13581  5AA2 32            mov bl, [d]
13582  5AA3 A7 00         mov bh, 0
13583  5AA5 38 00 00      mov c, 0
13584  5AA8 E7            pop d
13585  5AA9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13586  5AAD E4            pop a
13587  5AAE 2A            mov b, [d]
13588  5AAF 38 00 00      mov c, 0
13589  5AB2 FD AB         swp b
13590  5AB4 D8            push b
13591  5AB5 3B 08 6F      mov d, _quadname_data ; $quadname
13592  5AB8 2D            mov b, d
13593  5AB9 38 00 00      mov c, 0
13594  5ABC FD AB         swp b
13595  5ABE D8            push b
13596  5ABF 07 FC 5E      call strcpy
13597  5AC2 51 04 00      add sp, 4
13598  5AC5             ; --- END FUNCTION CALL
13599  5AC5 0A FD 5A      jmp _if779_exit
13600  5AC8             _if779_else:
13601  5AC8             ; strcpy(quadname, quad_name[y + 8]); 
13602  5AC8             ; --- START FUNCTION CALL
13603  5AC8 3B 3E 6F      mov d, _quad_name_data ; $quad_name
13604  5ACB D7            push a
13605  5ACC DA            push d
13606  5ACD FA 06 00      lea d, [bp + 6] ; $y
13607  5AD0 32            mov bl, [d]
13608  5AD1 A7 00         mov bh, 0
13609  5AD3 38 00 00      mov c, 0
13610  5AD6             ; --- START TERMS
13611  5AD6 D7            push a
13612  5AD7 11            mov a, b
13613  5AD8 FD 2E 08 00   mov32 cb, $00000008
13613  5ADC 00 00 
13614  5ADE 56            add b, a
13615  5ADF E4            pop a
13616  5AE0             ; --- END TERMS
13617  5AE0 E7            pop d
13618  5AE1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13619  5AE5 E4            pop a
13620  5AE6 2A            mov b, [d]
13621  5AE7 38 00 00      mov c, 0
13622  5AEA FD AB         swp b
13623  5AEC D8            push b
13624  5AED 3B 08 6F      mov d, _quadname_data ; $quadname
13625  5AF0 2D            mov b, d
13626  5AF1 38 00 00      mov c, 0
13627  5AF4 FD AB         swp b
13628  5AF6 D8            push b
13629  5AF7 07 FC 5E      call strcpy
13630  5AFA 51 04 00      add sp, 4
13631  5AFD             ; --- END FUNCTION CALL
13632  5AFD             _if779_exit:
13633  5AFD             ; if (small != 1) { 
13634  5AFD             _if780_cond:
13635  5AFD FA 05 00      lea d, [bp + 5] ; $small
13636  5B00 32            mov bl, [d]
13637  5B01 A7 00         mov bh, 0
13638  5B03 38 00 00      mov c, 0
13639  5B06             ; --- START RELATIONAL
13640  5B06 D7            push a
13641  5B07 11            mov a, b
13642  5B08 FD 2E 01 00   mov32 cb, $00000001
13642  5B0C 00 00 
13643  5B0E B0            cmp a, b
13644  5B0F FD 72         sneq ; !=
13645  5B11 E4            pop a
13646  5B12             ; --- END RELATIONAL
13647  5B12 C0 00 00      cmp b, 0
13648  5B15 C6 7F 5B      je _if780_exit
13649  5B18             _if780_TRUE:
13650  5B18             ; if (x > 4) 
13651  5B18             _if781_cond:
13652  5B18 FA 07 00      lea d, [bp + 7] ; $x
13653  5B1B 32            mov bl, [d]
13654  5B1C A7 00         mov bh, 0
13655  5B1E 38 00 00      mov c, 0
13656  5B21             ; --- START RELATIONAL
13657  5B21 D7            push a
13658  5B22 11            mov a, b
13659  5B23 FD 2E 04 00   mov32 cb, $00000004
13659  5B27 00 00 
13660  5B29 B0            cmp a, b
13661  5B2A FD 81         sgu ; > (unsigned)
13662  5B2C E4            pop a
13663  5B2D             ; --- END RELATIONAL
13664  5B2D C0 00 00      cmp b, 0
13665  5B30 C6 51 5B      je _if781_exit
13666  5B33             _if781_TRUE:
13667  5B33             ; x = x - 4; 
13668  5B33 FA 07 00      lea d, [bp + 7] ; $x
13669  5B36 DA            push d
13670  5B37 FA 07 00      lea d, [bp + 7] ; $x
13671  5B3A 32            mov bl, [d]
13672  5B3B A7 00         mov bh, 0
13673  5B3D 38 00 00      mov c, 0
13674  5B40             ; --- START TERMS
13675  5B40 D7            push a
13676  5B41 11            mov a, b
13677  5B42 FD 2E 04 00   mov32 cb, $00000004
13677  5B46 00 00 
13678  5B48 60            sub a, b
13679  5B49 27            mov b, a
13680  5B4A E4            pop a
13681  5B4B             ; --- END TERMS
13682  5B4B E7            pop d
13683  5B4C FD 3E         mov [d], bl
13684  5B4E 0A 51 5B      jmp _if781_exit
13685  5B51             _if781_exit:
13686  5B51             ; strcat(quadname, sect_name[x]); 
13687  5B51             ; --- START FUNCTION CALL
13688  5B51 3B A2 70      mov d, st_quadrant_name_sect_name_dt ; static sect_name
13689  5B54 D7            push a
13690  5B55 DA            push d
13691  5B56 FA 07 00      lea d, [bp + 7] ; $x
13692  5B59 32            mov bl, [d]
13693  5B5A A7 00         mov bh, 0
13694  5B5C 38 00 00      mov c, 0
13695  5B5F E7            pop d
13696  5B60 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13697  5B64 E4            pop a
13698  5B65 2A            mov b, [d]
13699  5B66 38 00 00      mov c, 0
13700  5B69 FD AB         swp b
13701  5B6B D8            push b
13702  5B6C 3B 08 6F      mov d, _quadname_data ; $quadname
13703  5B6F 2D            mov b, d
13704  5B70 38 00 00      mov c, 0
13705  5B73 FD AB         swp b
13706  5B75 D8            push b
13707  5B76 07 76 5F      call strcat
13708  5B79 51 04 00      add sp, 4
13709  5B7C             ; --- END FUNCTION CALL
13710  5B7C 0A 7F 5B      jmp _if780_exit
13711  5B7F             _if780_exit:
13712  5B7F             ; return; 
13713  5B7F F9            leave
13714  5B80 09            ret
13715  5B81             
13716  5B81             isqrt:
13717  5B81 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13718  5B84             ; unsigned int         b, q, r, t; 
13719  5B84 52 02 00      sub sp, 2
13720  5B87 52 02 00      sub sp, 2
13721  5B8A 52 02 00      sub sp, 2
13722  5B8D 52 02 00      sub sp, 2
13723  5B90             ; b = 0x4000; 
13724  5B90 FA FF FF      lea d, [bp + -1] ; $b
13725  5B93 DA            push d
13726  5B94 FD 2E 00 40   mov32 cb, $00004000
13726  5B98 00 00 
13727  5B9A E7            pop d
13728  5B9B FD 43         mov [d], b
13729  5B9D             ; q = 0; 
13730  5B9D FA FD FF      lea d, [bp + -3] ; $q
13731  5BA0 DA            push d
13732  5BA1 FD 2E 00 00   mov32 cb, $00000000
13732  5BA5 00 00 
13733  5BA7 E7            pop d
13734  5BA8 FD 43         mov [d], b
13735  5BAA             ; r = i; 
13736  5BAA FA FB FF      lea d, [bp + -5] ; $r
13737  5BAD DA            push d
13738  5BAE FA 05 00      lea d, [bp + 5] ; $i
13739  5BB1 2A            mov b, [d]
13740  5BB2 38 00 00      mov c, 0
13741  5BB5 E7            pop d
13742  5BB6 FD 43         mov [d], b
13743  5BB8             ; while (b) { 
13744  5BB8             _while782_cond:
13745  5BB8 FA FF FF      lea d, [bp + -1] ; $b
13746  5BBB 2A            mov b, [d]
13747  5BBC 38 00 00      mov c, 0
13748  5BBF C0 00 00      cmp b, 0
13749  5BC2 C6 67 5C      je _while782_exit
13750  5BC5             _while782_block:
13751  5BC5             ; t = q + b; 
13752  5BC5 FA F9 FF      lea d, [bp + -7] ; $t
13753  5BC8 DA            push d
13754  5BC9 FA FD FF      lea d, [bp + -3] ; $q
13755  5BCC 2A            mov b, [d]
13756  5BCD 38 00 00      mov c, 0
13757  5BD0             ; --- START TERMS
13758  5BD0 D7            push a
13759  5BD1 11            mov a, b
13760  5BD2 FA FF FF      lea d, [bp + -1] ; $b
13761  5BD5 2A            mov b, [d]
13762  5BD6 38 00 00      mov c, 0
13763  5BD9 56            add b, a
13764  5BDA E4            pop a
13765  5BDB             ; --- END TERMS
13766  5BDB E7            pop d
13767  5BDC FD 43         mov [d], b
13768  5BDE             ; q =q>> 1; 
13769  5BDE FA FD FF      lea d, [bp + -3] ; $q
13770  5BE1 DA            push d
13771  5BE2 FA FD FF      lea d, [bp + -3] ; $q
13772  5BE5 2A            mov b, [d]
13773  5BE6 38 00 00      mov c, 0
13774  5BE9             ; --- START SHIFT
13775  5BE9 D7            push a
13776  5BEA 11            mov a, b
13777  5BEB FD 2E 01 00   mov32 cb, $00000001
13777  5BEF 00 00 
13778  5BF1 FD 39         mov c, b
13779  5BF3 A1            shr a, cl
13780  5BF4 27            mov b, a
13781  5BF5 E4            pop a
13782  5BF6             ; --- END SHIFT
13783  5BF6 E7            pop d
13784  5BF7 FD 43         mov [d], b
13785  5BF9             ; if (r >= t) { 
13786  5BF9             _if783_cond:
13787  5BF9 FA FB FF      lea d, [bp + -5] ; $r
13788  5BFC 2A            mov b, [d]
13789  5BFD 38 00 00      mov c, 0
13790  5C00             ; --- START RELATIONAL
13791  5C00 D7            push a
13792  5C01 11            mov a, b
13793  5C02 FA F9 FF      lea d, [bp + -7] ; $t
13794  5C05 2A            mov b, [d]
13795  5C06 38 00 00      mov c, 0
13796  5C09 B0            cmp a, b
13797  5C0A FD 82         sgeu ; >= (unsigned)
13798  5C0C E4            pop a
13799  5C0D             ; --- END RELATIONAL
13800  5C0D C0 00 00      cmp b, 0
13801  5C10 C6 49 5C      je _if783_exit
13802  5C13             _if783_TRUE:
13803  5C13             ; r =r- t; 
13804  5C13 FA FB FF      lea d, [bp + -5] ; $r
13805  5C16 DA            push d
13806  5C17 FA FB FF      lea d, [bp + -5] ; $r
13807  5C1A 2A            mov b, [d]
13808  5C1B 38 00 00      mov c, 0
13809  5C1E             ; --- START TERMS
13810  5C1E D7            push a
13811  5C1F 11            mov a, b
13812  5C20 FA F9 FF      lea d, [bp + -7] ; $t
13813  5C23 2A            mov b, [d]
13814  5C24 38 00 00      mov c, 0
13815  5C27 60            sub a, b
13816  5C28 27            mov b, a
13817  5C29 E4            pop a
13818  5C2A             ; --- END TERMS
13819  5C2A E7            pop d
13820  5C2B FD 43         mov [d], b
13821  5C2D             ; q = q + b; 
13822  5C2D FA FD FF      lea d, [bp + -3] ; $q
13823  5C30 DA            push d
13824  5C31 FA FD FF      lea d, [bp + -3] ; $q
13825  5C34 2A            mov b, [d]
13826  5C35 38 00 00      mov c, 0
13827  5C38             ; --- START TERMS
13828  5C38 D7            push a
13829  5C39 11            mov a, b
13830  5C3A FA FF FF      lea d, [bp + -1] ; $b
13831  5C3D 2A            mov b, [d]
13832  5C3E 38 00 00      mov c, 0
13833  5C41 56            add b, a
13834  5C42 E4            pop a
13835  5C43             ; --- END TERMS
13836  5C43 E7            pop d
13837  5C44 FD 43         mov [d], b
13838  5C46 0A 49 5C      jmp _if783_exit
13839  5C49             _if783_exit:
13840  5C49             ; b =b>> 2; 
13841  5C49 FA FF FF      lea d, [bp + -1] ; $b
13842  5C4C DA            push d
13843  5C4D FA FF FF      lea d, [bp + -1] ; $b
13844  5C50 2A            mov b, [d]
13845  5C51 38 00 00      mov c, 0
13846  5C54             ; --- START SHIFT
13847  5C54 D7            push a
13848  5C55 11            mov a, b
13849  5C56 FD 2E 02 00   mov32 cb, $00000002
13849  5C5A 00 00 
13850  5C5C FD 39         mov c, b
13851  5C5E A1            shr a, cl
13852  5C5F 27            mov b, a
13853  5C60 E4            pop a
13854  5C61             ; --- END SHIFT
13855  5C61 E7            pop d
13856  5C62 FD 43         mov [d], b
13857  5C64 0A B8 5B      jmp _while782_cond
13858  5C67             _while782_exit:
13859  5C67             ; return q; 
13860  5C67 FA FD FF      lea d, [bp + -3] ; $q
13861  5C6A 2A            mov b, [d]
13862  5C6B 38 00 00      mov c, 0
13863  5C6E F9            leave
13864  5C6F 09            ret
13865  5C70             
13866  5C70             square00:
13867  5C70 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13868  5C73             ; if (abs(t) > 181) { 
13869  5C73             _if784_cond:
13870  5C73             ; --- START FUNCTION CALL
13871  5C73 FA 05 00      lea d, [bp + 5] ; $t
13872  5C76 2A            mov b, [d]
13873  5C77 38 00 00      mov c, 0
13874  5C7A FD AB         swp b
13875  5C7C D8            push b
13876  5C7D 07 A9 6B      call abs
13877  5C80 51 02 00      add sp, 2
13878  5C83             ; --- END FUNCTION CALL
13879  5C83             ; --- START RELATIONAL
13880  5C83 D7            push a
13881  5C84 11            mov a, b
13882  5C85 FD 2E B5 00   mov32 cb, $000000b5
13882  5C89 00 00 
13883  5C8B B0            cmp a, b
13884  5C8C FD 7F         sgt ; >
13885  5C8E E4            pop a
13886  5C8F             ; --- END RELATIONAL
13887  5C8F C0 00 00      cmp b, 0
13888  5C92 C6 11 5D      je _if784_else
13889  5C95             _if784_TRUE:
13890  5C95             ; t =t/ 10; 
13891  5C95 FA 05 00      lea d, [bp + 5] ; $t
13892  5C98 DA            push d
13893  5C99 FA 05 00      lea d, [bp + 5] ; $t
13894  5C9C 2A            mov b, [d]
13895  5C9D 38 00 00      mov c, 0
13896  5CA0             ; --- START FACTORS
13897  5CA0 D7            push a
13898  5CA1 FD D8         push g
13899  5CA3 11            mov a, b
13900  5CA4 FD 7A         mov g, c
13901  5CA6 FD 2E 0A 00   mov32 cb, $0000000a
13901  5CAA 00 00 
13902  5CAC FD D8         push g ; save 'g' as the div instruction uses it
13903  5CAE AE            div a, b ; /, a: quotient, b: remainder
13904  5CAF FD F1         pop g
13905  5CB1 FD 38         mov c, g
13906  5CB3 27            mov b, a
13907  5CB4 FD F1         pop g
13908  5CB6 E4            pop a
13909  5CB7             ; --- END FACTORS
13910  5CB7 E7            pop d
13911  5CB8 FD 43         mov [d], b
13912  5CBA             ; t =t* t; 
13913  5CBA FA 05 00      lea d, [bp + 5] ; $t
13914  5CBD DA            push d
13915  5CBE FA 05 00      lea d, [bp + 5] ; $t
13916  5CC1 2A            mov b, [d]
13917  5CC2 38 00 00      mov c, 0
13918  5CC5             ; --- START FACTORS
13919  5CC5 D7            push a
13920  5CC6 FD D8         push g
13921  5CC8 11            mov a, b
13922  5CC9 FD 7A         mov g, c
13923  5CCB FA 05 00      lea d, [bp + 5] ; $t
13924  5CCE 2A            mov b, [d]
13925  5CCF 38 00 00      mov c, 0
13926  5CD2 D7            push a     ; save left operand
13927  5CD3 8E            xor a, b   ; xor sign bits
13928  5CD4 FD AA         swp a      ; swap bytes
13929  5CD6 83            mov cl, al ; save result of xor into 'dl'
13930  5CD7 E4            pop a      ; restore left side operator
13931  5CD8 DF            push cl    ; save result of xor above
13932  5CD9 FD AA         swp a  
13933  5CDB 93 80         test al, $80  
13934  5CDD FD AA         swp a  
13935  5CDF C6 E4 5C      jz skip_invert_a_788  
13936  5CE2 FD 95         neg a 
13937  5CE4             skip_invert_a_788:   
13938  5CE4 FD AB         swp b
13939  5CE6 FD 93 80      test bl, $80  
13940  5CE9 FD AB         swp b
13941  5CEB C6 F0 5C      jz skip_invert_b_788  
13942  5CEE FD 97         neg b 
13943  5CF0             skip_invert_b_788:   
13944  5CF0 AC            mul a, b ; *
13945  5CF1 FD 78         mov g, a
13946  5CF3 11            mov a, b
13947  5CF4 EA            pop bl
13948  5CF5 FD 93 80      test bl, $80
13949  5CF8 C6 05 5D      jz _same_signs_788
13950  5CFB 2F            mov bl, al
13951  5CFC 95            not a
13952  5CFD FD 97         neg b
13953  5CFF 5B 00 00      adc a, 0
13954  5D02 FD 78         mov g, a
13955  5D04 11            mov a, b
13956  5D05             _same_signs_788:
13957  5D05 FD 38         mov c, g
13958  5D07 27            mov b, a
13959  5D08 FD F1         pop g
13960  5D0A E4            pop a
13961  5D0B             ; --- END FACTORS
13962  5D0B E7            pop d
13963  5D0C FD 43         mov [d], b
13964  5D0E 0A 8A 5D      jmp _if784_exit
13965  5D11             _if784_else:
13966  5D11             ; t =t* t; 
13967  5D11 FA 05 00      lea d, [bp + 5] ; $t
13968  5D14 DA            push d
13969  5D15 FA 05 00      lea d, [bp + 5] ; $t
13970  5D18 2A            mov b, [d]
13971  5D19 38 00 00      mov c, 0
13972  5D1C             ; --- START FACTORS
13973  5D1C D7            push a
13974  5D1D FD D8         push g
13975  5D1F 11            mov a, b
13976  5D20 FD 7A         mov g, c
13977  5D22 FA 05 00      lea d, [bp + 5] ; $t
13978  5D25 2A            mov b, [d]
13979  5D26 38 00 00      mov c, 0
13980  5D29 D7            push a     ; save left operand
13981  5D2A 8E            xor a, b   ; xor sign bits
13982  5D2B FD AA         swp a      ; swap bytes
13983  5D2D 83            mov cl, al ; save result of xor into 'dl'
13984  5D2E E4            pop a      ; restore left side operator
13985  5D2F DF            push cl    ; save result of xor above
13986  5D30 FD AA         swp a  
13987  5D32 93 80         test al, $80  
13988  5D34 FD AA         swp a  
13989  5D36 C6 3B 5D      jz skip_invert_a_790  
13990  5D39 FD 95         neg a 
13991  5D3B             skip_invert_a_790:   
13992  5D3B FD AB         swp b
13993  5D3D FD 93 80      test bl, $80  
13994  5D40 FD AB         swp b
13995  5D42 C6 47 5D      jz skip_invert_b_790  
13996  5D45 FD 97         neg b 
13997  5D47             skip_invert_b_790:   
13998  5D47 AC            mul a, b ; *
13999  5D48 FD 78         mov g, a
14000  5D4A 11            mov a, b
14001  5D4B EA            pop bl
14002  5D4C FD 93 80      test bl, $80
14003  5D4F C6 5C 5D      jz _same_signs_790
14004  5D52 2F            mov bl, al
14005  5D53 95            not a
14006  5D54 FD 97         neg b
14007  5D56 5B 00 00      adc a, 0
14008  5D59 FD 78         mov g, a
14009  5D5B 11            mov a, b
14010  5D5C             _same_signs_790:
14011  5D5C FD 38         mov c, g
14012  5D5E 27            mov b, a
14013  5D5F FD F1         pop g
14014  5D61 E4            pop a
14015  5D62             ; --- END FACTORS
14016  5D62 E7            pop d
14017  5D63 FD 43         mov [d], b
14018  5D65             ; t =t/ 100; 
14019  5D65 FA 05 00      lea d, [bp + 5] ; $t
14020  5D68 DA            push d
14021  5D69 FA 05 00      lea d, [bp + 5] ; $t
14022  5D6C 2A            mov b, [d]
14023  5D6D 38 00 00      mov c, 0
14024  5D70             ; --- START FACTORS
14025  5D70 D7            push a
14026  5D71 FD D8         push g
14027  5D73 11            mov a, b
14028  5D74 FD 7A         mov g, c
14029  5D76 FD 2E 64 00   mov32 cb, $00000064
14029  5D7A 00 00 
14030  5D7C FD D8         push g ; save 'g' as the div instruction uses it
14031  5D7E AE            div a, b ; /, a: quotient, b: remainder
14032  5D7F FD F1         pop g
14033  5D81 FD 38         mov c, g
14034  5D83 27            mov b, a
14035  5D84 FD F1         pop g
14036  5D86 E4            pop a
14037  5D87             ; --- END FACTORS
14038  5D87 E7            pop d
14039  5D88 FD 43         mov [d], b
14040  5D8A             _if784_exit:
14041  5D8A             ; return t; 
14042  5D8A FA 05 00      lea d, [bp + 5] ; $t
14043  5D8D 2A            mov b, [d]
14044  5D8E 38 00 00      mov c, 0
14045  5D91 F9            leave
14046  5D92 09            ret
14047  5D93             
14048  5D93             distance_to:
14049  5D93 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14050  5D96             ; unsigned int         j; 
14051  5D96 52 02 00      sub sp, 2
14052  5D99             ; j = square00(TO_FIXED00(k->y) - ship_y); 
14053  5D99 FA FF FF      lea d, [bp + -1] ; $j
14054  5D9C DA            push d
14055  5D9D             ; --- START FUNCTION CALL
14056  5D9D             ; --- START FUNCTION CALL
14057  5D9D FA 05 00      lea d, [bp + 5] ; $k
14058  5DA0 FD 2A         mov d, [d]
14059  5DA2 58 00 00      add d, 0
14060  5DA5 32            mov bl, [d]
14061  5DA6 A7 00         mov bh, 0
14062  5DA8 38 00 00      mov c, 0
14063  5DAB AB            snex b
14064  5DAC FD AB         swp b
14065  5DAE D8            push b
14066  5DAF 07 8B 04      call TO_FIXED00
14067  5DB2 51 02 00      add sp, 2
14068  5DB5             ; --- END FUNCTION CALL
14069  5DB5             ; --- START TERMS
14070  5DB5 D7            push a
14071  5DB6 11            mov a, b
14072  5DB7 3B C2 6E      mov d, _ship_y ; $ship_y
14073  5DBA 2A            mov b, [d]
14074  5DBB 38 00 00      mov c, 0
14075  5DBE 60            sub a, b
14076  5DBF 27            mov b, a
14077  5DC0 E4            pop a
14078  5DC1             ; --- END TERMS
14079  5DC1 FD AB         swp b
14080  5DC3 D8            push b
14081  5DC4 07 70 5C      call square00
14082  5DC7 51 02 00      add sp, 2
14083  5DCA             ; --- END FUNCTION CALL
14084  5DCA E7            pop d
14085  5DCB FD 43         mov [d], b
14086  5DCD             ; j = j + square00(TO_FIXED00(k->x) - ship_x); 
14087  5DCD FA FF FF      lea d, [bp + -1] ; $j
14088  5DD0 DA            push d
14089  5DD1 FA FF FF      lea d, [bp + -1] ; $j
14090  5DD4 2A            mov b, [d]
14091  5DD5 38 00 00      mov c, 0
14092  5DD8             ; --- START TERMS
14093  5DD8 D7            push a
14094  5DD9 11            mov a, b
14095  5DDA             ; --- START FUNCTION CALL
14096  5DDA             ; --- START FUNCTION CALL
14097  5DDA FA 05 00      lea d, [bp + 5] ; $k
14098  5DDD FD 2A         mov d, [d]
14099  5DDF 58 01 00      add d, 1
14100  5DE2 32            mov bl, [d]
14101  5DE3 A7 00         mov bh, 0
14102  5DE5 38 00 00      mov c, 0
14103  5DE8 AB            snex b
14104  5DE9 FD AB         swp b
14105  5DEB D8            push b
14106  5DEC 07 8B 04      call TO_FIXED00
14107  5DEF 51 02 00      add sp, 2
14108  5DF2             ; --- END FUNCTION CALL
14109  5DF2             ; --- START TERMS
14110  5DF2 D7            push a
14111  5DF3 11            mov a, b
14112  5DF4 3B C4 6E      mov d, _ship_x ; $ship_x
14113  5DF7 2A            mov b, [d]
14114  5DF8 38 00 00      mov c, 0
14115  5DFB 60            sub a, b
14116  5DFC 27            mov b, a
14117  5DFD E4            pop a
14118  5DFE             ; --- END TERMS
14119  5DFE FD AB         swp b
14120  5E00 D8            push b
14121  5E01 07 70 5C      call square00
14122  5E04 51 02 00      add sp, 2
14123  5E07             ; --- END FUNCTION CALL
14124  5E07 56            add b, a
14125  5E08 E4            pop a
14126  5E09             ; --- END TERMS
14127  5E09 E7            pop d
14128  5E0A FD 43         mov [d], b
14129  5E0C             ; j = isqrt(j); 
14130  5E0C FA FF FF      lea d, [bp + -1] ; $j
14131  5E0F DA            push d
14132  5E10             ; --- START FUNCTION CALL
14133  5E10 FA FF FF      lea d, [bp + -1] ; $j
14134  5E13 2A            mov b, [d]
14135  5E14 38 00 00      mov c, 0
14136  5E17 FD AB         swp b
14137  5E19 D8            push b
14138  5E1A 07 81 5B      call isqrt
14139  5E1D 51 02 00      add sp, 2
14140  5E20             ; --- END FUNCTION CALL
14141  5E20 E7            pop d
14142  5E21 FD 43         mov [d], b
14143  5E23 F9            leave
14144  5E24 09            ret
14145  5E25             
14146  5E25             cint100:
14147  5E25 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14148  5E28             ; return (d + 50) / 100; 
14149  5E28 FA 05 00      lea d, [bp + 5] ; $d
14150  5E2B 2A            mov b, [d]
14151  5E2C 38 00 00      mov c, 0
14152  5E2F             ; --- START TERMS
14153  5E2F D7            push a
14154  5E30 11            mov a, b
14155  5E31 FD 2E 32 00   mov32 cb, $00000032
14155  5E35 00 00 
14156  5E37 56            add b, a
14157  5E38 E4            pop a
14158  5E39             ; --- END TERMS
14159  5E39             ; --- START FACTORS
14160  5E39 D7            push a
14161  5E3A FD D8         push g
14162  5E3C 11            mov a, b
14163  5E3D FD 7A         mov g, c
14164  5E3F FD 2E 64 00   mov32 cb, $00000064
14164  5E43 00 00 
14165  5E45 FD D8         push g ; save 'g' as the div instruction uses it
14166  5E47 AE            div a, b ; /, a: quotient, b: remainder
14167  5E48 FD F1         pop g
14168  5E4A FD 38         mov c, g
14169  5E4C 27            mov b, a
14170  5E4D FD F1         pop g
14171  5E4F E4            pop a
14172  5E50             ; --- END FACTORS
14173  5E50 F9            leave
14174  5E51 09            ret
14175  5E52             
14176  5E52             showfile:
14177  5E52 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14178  5E55 F9            leave
14179  5E56 09            ret
14180  5E57             
14181  5E57             getchar:
14182  5E57 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14183  5E5A             ; char c; 
14184  5E5A 52 01 00      sub sp, 1
14185  5E5D             ; --- BEGIN INLINE ASM SEGMENT
14186  5E5D 19 01         mov al, 1
14187  5E5F 05 03         syscall sys_io      ; receive in AH
14188  5E61 1A            mov al, ah
14189  5E62 FA 00 00      lea d, [bp + 0] ; $c
14190  5E65 3E            mov [d], al
14191  5E66             ; --- END INLINE ASM SEGMENT
14192  5E66             ; return c; 
14193  5E66 FA 00 00      lea d, [bp + 0] ; $c
14194  5E69 32            mov bl, [d]
14195  5E6A A7 00         mov bh, 0
14196  5E6C 38 00 00      mov c, 0
14197  5E6F F9            leave
14198  5E70 09            ret
14199  5E71             
14200  5E71             exit:
14201  5E71 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14202  5E74             ; --- BEGIN INLINE ASM SEGMENT
14203  5E74 FA 05 00      lea d, [bp + 5] ; $status
14204  5E77 2A            mov b, [d] ; return value
14205  5E78 05 0B         syscall sys_terminate_proc
14206  5E7A             ; --- END INLINE ASM SEGMENT
14207  5E7A F9            leave
14208  5E7B 09            ret
14209  5E7C             
14210  5E7C             tolower:
14211  5E7C F8 00 00      enter 0 ; (push bp; mov bp, sp)
14212  5E7F             ; if (ch >= 'A' && ch <= 'Z')  
14213  5E7F             _if795_cond:
14214  5E7F FA 05 00      lea d, [bp + 5] ; $ch
14215  5E82 32            mov bl, [d]
14216  5E83 A7 00         mov bh, 0
14217  5E85 38 00 00      mov c, 0
14218  5E88             ; --- START RELATIONAL
14219  5E88 D7            push a
14220  5E89 11            mov a, b
14221  5E8A FD 2E 41 00   mov32 cb, $00000041
14221  5E8E 00 00 
14222  5E90 B0            cmp a, b
14223  5E91 FD 80         sge ; >=
14224  5E93 E4            pop a
14225  5E94             ; --- END RELATIONAL
14226  5E94             ; --- START LOGICAL AND
14227  5E94 D7            push a
14228  5E95 11            mov a, b
14229  5E96 FA 05 00      lea d, [bp + 5] ; $ch
14230  5E99 32            mov bl, [d]
14231  5E9A A7 00         mov bh, 0
14232  5E9C 38 00 00      mov c, 0
14233  5E9F             ; --- START RELATIONAL
14234  5E9F D7            push a
14235  5EA0 11            mov a, b
14236  5EA1 FD 2E 5A 00   mov32 cb, $0000005a
14236  5EA5 00 00 
14237  5EA7 B0            cmp a, b
14238  5EA8 FD 74         sle ; <= (signed)
14239  5EAA E4            pop a
14240  5EAB             ; --- END RELATIONAL
14241  5EAB FD A7         sand a, b
14242  5EAD E4            pop a
14243  5EAE             ; --- END LOGICAL AND
14244  5EAE C0 00 00      cmp b, 0
14245  5EB1 C6 D5 5E      je _if795_else
14246  5EB4             _if795_TRUE:
14247  5EB4             ; return ch - 'A' + 'a'; 
14248  5EB4 FA 05 00      lea d, [bp + 5] ; $ch
14249  5EB7 32            mov bl, [d]
14250  5EB8 A7 00         mov bh, 0
14251  5EBA 38 00 00      mov c, 0
14252  5EBD             ; --- START TERMS
14253  5EBD D7            push a
14254  5EBE 11            mov a, b
14255  5EBF FD 2E 41 00   mov32 cb, $00000041
14255  5EC3 00 00 
14256  5EC5 60            sub a, b
14257  5EC6 27            mov b, a
14258  5EC7 11            mov a, b
14259  5EC8 FD 2E 61 00   mov32 cb, $00000061
14259  5ECC 00 00 
14260  5ECE 56            add b, a
14261  5ECF E4            pop a
14262  5ED0             ; --- END TERMS
14263  5ED0 F9            leave
14264  5ED1 09            ret
14265  5ED2 0A E0 5E      jmp _if795_exit
14266  5ED5             _if795_else:
14267  5ED5             ; return ch; 
14268  5ED5 FA 05 00      lea d, [bp + 5] ; $ch
14269  5ED8 32            mov bl, [d]
14270  5ED9 A7 00         mov bh, 0
14271  5EDB 38 00 00      mov c, 0
14272  5EDE F9            leave
14273  5EDF 09            ret
14274  5EE0             _if795_exit:
14275  5EE0 F9            leave
14276  5EE1 09            ret
14277  5EE2             
14278  5EE2             rand:
14279  5EE2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14280  5EE5             ; int  sec; 
14281  5EE5 52 02 00      sub sp, 2
14282  5EE8             ; --- BEGIN INLINE ASM SEGMENT
14283  5EE8 19 00         mov al, 0
14284  5EEA 05 01         syscall sys_rtc					; get seconds
14285  5EEC 1A            mov al, ah
14286  5EED FA FF FF      lea d, [bp + -1] ; $sec
14287  5EF0 1E            mov al, [d]
14288  5EF1 22 00         mov ah, 0
14289  5EF3             ; --- END INLINE ASM SEGMENT
14290  5EF3             ; return sec; 
14291  5EF3 FA FF FF      lea d, [bp + -1] ; $sec
14292  5EF6 2A            mov b, [d]
14293  5EF7 38 00 00      mov c, 0
14294  5EFA F9            leave
14295  5EFB 09            ret
14296  5EFC             
14297  5EFC             strcpy:
14298  5EFC F8 00 00      enter 0 ; (push bp; mov bp, sp)
14299  5EFF             ; char *psrc; 
14300  5EFF 52 02 00      sub sp, 2
14301  5F02             ; char *pdest; 
14302  5F02 52 02 00      sub sp, 2
14303  5F05             ; psrc = src; 
14304  5F05 FA FF FF      lea d, [bp + -1] ; $psrc
14305  5F08 DA            push d
14306  5F09 FA 07 00      lea d, [bp + 7] ; $src
14307  5F0C 2A            mov b, [d]
14308  5F0D 38 00 00      mov c, 0
14309  5F10 E7            pop d
14310  5F11 FD 43         mov [d], b
14311  5F13             ; pdest = dest; 
14312  5F13 FA FD FF      lea d, [bp + -3] ; $pdest
14313  5F16 DA            push d
14314  5F17 FA 05 00      lea d, [bp + 5] ; $dest
14315  5F1A 2A            mov b, [d]
14316  5F1B 38 00 00      mov c, 0
14317  5F1E E7            pop d
14318  5F1F FD 43         mov [d], b
14319  5F21             ; while(*psrc) *pdest++ = *psrc++; 
14320  5F21             _while796_cond:
14321  5F21 FA FF FF      lea d, [bp + -1] ; $psrc
14322  5F24 2A            mov b, [d]
14323  5F25 38 00 00      mov c, 0
14324  5F28 74            mov d, b
14325  5F29 32            mov bl, [d]
14326  5F2A A7 00         mov bh, 0
14327  5F2C 38 00 00      mov c, 0
14328  5F2F C0 00 00      cmp b, 0
14329  5F32 C6 63 5F      je _while796_exit
14330  5F35             _while796_block:
14331  5F35             ; *pdest++ = *psrc++; 
14332  5F35 FA FD FF      lea d, [bp + -3] ; $pdest
14333  5F38 2A            mov b, [d]
14334  5F39 38 00 00      mov c, 0
14335  5F3C FD 77         inc b
14336  5F3E FA FD FF      lea d, [bp + -3] ; $pdest
14337  5F41 FD 43         mov [d], b
14338  5F43 FD 7D         dec b
14339  5F45 D8            push b
14340  5F46 FA FF FF      lea d, [bp + -1] ; $psrc
14341  5F49 2A            mov b, [d]
14342  5F4A 38 00 00      mov c, 0
14343  5F4D FD 77         inc b
14344  5F4F FA FF FF      lea d, [bp + -1] ; $psrc
14345  5F52 FD 43         mov [d], b
14346  5F54 FD 7D         dec b
14347  5F56 74            mov d, b
14348  5F57 32            mov bl, [d]
14349  5F58 A7 00         mov bh, 0
14350  5F5A 38 00 00      mov c, 0
14351  5F5D E7            pop d
14352  5F5E FD 3E         mov [d], bl
14353  5F60 0A 21 5F      jmp _while796_cond
14354  5F63             _while796_exit:
14355  5F63             ; *pdest = '\0'; 
14356  5F63 FA FD FF      lea d, [bp + -3] ; $pdest
14357  5F66 2A            mov b, [d]
14358  5F67 38 00 00      mov c, 0
14359  5F6A D8            push b
14360  5F6B FD 2E 00 00   mov32 cb, $00000000
14360  5F6F 00 00 
14361  5F71 E7            pop d
14362  5F72 FD 3E         mov [d], bl
14363  5F74 F9            leave
14364  5F75 09            ret
14365  5F76             
14366  5F76             strcat:
14367  5F76 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14368  5F79             ; int dest_len; 
14369  5F79 52 02 00      sub sp, 2
14370  5F7C             ; int i; 
14371  5F7C 52 02 00      sub sp, 2
14372  5F7F             ; dest_len = strlen(dest); 
14373  5F7F FA FF FF      lea d, [bp + -1] ; $dest_len
14374  5F82 DA            push d
14375  5F83             ; --- START FUNCTION CALL
14376  5F83 FA 05 00      lea d, [bp + 5] ; $dest
14377  5F86 2A            mov b, [d]
14378  5F87 38 00 00      mov c, 0
14379  5F8A FD AB         swp b
14380  5F8C D8            push b
14381  5F8D 07 59 60      call strlen
14382  5F90 51 02 00      add sp, 2
14383  5F93             ; --- END FUNCTION CALL
14384  5F93 E7            pop d
14385  5F94 FD 43         mov [d], b
14386  5F96             ; for (i = 0; src[i] != 0; i=i+1) { 
14387  5F96             _for797_init:
14388  5F96 FA FD FF      lea d, [bp + -3] ; $i
14389  5F99 DA            push d
14390  5F9A FD 2E 00 00   mov32 cb, $00000000
14390  5F9E 00 00 
14391  5FA0 E7            pop d
14392  5FA1 FD 43         mov [d], b
14393  5FA3             _for797_cond:
14394  5FA3 FA 07 00      lea d, [bp + 7] ; $src
14395  5FA6 FD 2A         mov d, [d]
14396  5FA8 D7            push a
14397  5FA9 DA            push d
14398  5FAA FA FD FF      lea d, [bp + -3] ; $i
14399  5FAD 2A            mov b, [d]
14400  5FAE 38 00 00      mov c, 0
14401  5FB1 E7            pop d
14402  5FB2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
14403  5FB6 E4            pop a
14404  5FB7 32            mov bl, [d]
14405  5FB8 A7 00         mov bh, 0
14406  5FBA 38 00 00      mov c, 0
14407  5FBD             ; --- START RELATIONAL
14408  5FBD D7            push a
14409  5FBE 11            mov a, b
14410  5FBF FD 2E 00 00   mov32 cb, $00000000
14410  5FC3 00 00 
14411  5FC5 B0            cmp a, b
14412  5FC6 FD 72         sneq ; !=
14413  5FC8 E4            pop a
14414  5FC9             ; --- END RELATIONAL
14415  5FC9 C0 00 00      cmp b, 0
14416  5FCC C6 27 60      je _for797_exit
14417  5FCF             _for797_block:
14418  5FCF             ; dest[dest_len + i] = src[i]; 
14419  5FCF FA 05 00      lea d, [bp + 5] ; $dest
14420  5FD2 FD 2A         mov d, [d]
14421  5FD4 D7            push a
14422  5FD5 DA            push d
14423  5FD6 FA FF FF      lea d, [bp + -1] ; $dest_len
14424  5FD9 2A            mov b, [d]
14425  5FDA 38 00 00      mov c, 0
14426  5FDD             ; --- START TERMS
14427  5FDD D7            push a
14428  5FDE 11            mov a, b
14429  5FDF FA FD FF      lea d, [bp + -3] ; $i
14430  5FE2 2A            mov b, [d]
14431  5FE3 38 00 00      mov c, 0
14432  5FE6 56            add b, a
14433  5FE7 E4            pop a
14434  5FE8             ; --- END TERMS
14435  5FE8 E7            pop d
14436  5FE9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
14437  5FED E4            pop a
14438  5FEE DA            push d
14439  5FEF FA 07 00      lea d, [bp + 7] ; $src
14440  5FF2 FD 2A         mov d, [d]
14441  5FF4 D7            push a
14442  5FF5 DA            push d
14443  5FF6 FA FD FF      lea d, [bp + -3] ; $i
14444  5FF9 2A            mov b, [d]
14445  5FFA 38 00 00      mov c, 0
14446  5FFD E7            pop d
14447  5FFE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
14448  6002 E4            pop a
14449  6003 32            mov bl, [d]
14450  6004 A7 00         mov bh, 0
14451  6006 38 00 00      mov c, 0
14452  6009 E7            pop d
14453  600A FD 3E         mov [d], bl
14454  600C             _for797_update:
14455  600C FA FD FF      lea d, [bp + -3] ; $i
14456  600F DA            push d
14457  6010 FA FD FF      lea d, [bp + -3] ; $i
14458  6013 2A            mov b, [d]
14459  6014 38 00 00      mov c, 0
14460  6017             ; --- START TERMS
14461  6017 D7            push a
14462  6018 11            mov a, b
14463  6019 FD 2E 01 00   mov32 cb, $00000001
14463  601D 00 00 
14464  601F 56            add b, a
14465  6020 E4            pop a
14466  6021             ; --- END TERMS
14467  6021 E7            pop d
14468  6022 FD 43         mov [d], b
14469  6024 0A A3 5F      jmp _for797_cond
14470  6027             _for797_exit:
14471  6027             ; dest[dest_len + i] = 0; 
14472  6027 FA 05 00      lea d, [bp + 5] ; $dest
14473  602A FD 2A         mov d, [d]
14474  602C D7            push a
14475  602D DA            push d
14476  602E FA FF FF      lea d, [bp + -1] ; $dest_len
14477  6031 2A            mov b, [d]
14478  6032 38 00 00      mov c, 0
14479  6035             ; --- START TERMS
14480  6035 D7            push a
14481  6036 11            mov a, b
14482  6037 FA FD FF      lea d, [bp + -3] ; $i
14483  603A 2A            mov b, [d]
14484  603B 38 00 00      mov c, 0
14485  603E 56            add b, a
14486  603F E4            pop a
14487  6040             ; --- END TERMS
14488  6040 E7            pop d
14489  6041 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
14490  6045 E4            pop a
14491  6046 DA            push d
14492  6047 FD 2E 00 00   mov32 cb, $00000000
14492  604B 00 00 
14493  604D E7            pop d
14494  604E FD 3E         mov [d], bl
14495  6050             ; return dest; 
14496  6050 FA 05 00      lea d, [bp + 5] ; $dest
14497  6053 2A            mov b, [d]
14498  6054 38 00 00      mov c, 0
14499  6057 F9            leave
14500  6058 09            ret
14501  6059             
14502  6059             strlen:
14503  6059 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14504  605C             ; int length; 
14505  605C 52 02 00      sub sp, 2
14506  605F             ; length = 0; 
14507  605F FA FF FF      lea d, [bp + -1] ; $length
14508  6062 DA            push d
14509  6063 FD 2E 00 00   mov32 cb, $00000000
14509  6067 00 00 
14510  6069 E7            pop d
14511  606A FD 43         mov [d], b
14512  606C             ; while (str[length] != 0) { 
14513  606C             _while798_cond:
14514  606C FA 05 00      lea d, [bp + 5] ; $str
14515  606F FD 2A         mov d, [d]
14516  6071 D7            push a
14517  6072 DA            push d
14518  6073 FA FF FF      lea d, [bp + -1] ; $length
14519  6076 2A            mov b, [d]
14520  6077 38 00 00      mov c, 0
14521  607A E7            pop d
14522  607B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
14523  607F E4            pop a
14524  6080 32            mov bl, [d]
14525  6081 A7 00         mov bh, 0
14526  6083 38 00 00      mov c, 0
14527  6086             ; --- START RELATIONAL
14528  6086 D7            push a
14529  6087 11            mov a, b
14530  6088 FD 2E 00 00   mov32 cb, $00000000
14530  608C 00 00 
14531  608E B0            cmp a, b
14532  608F FD 72         sneq ; !=
14533  6091 E4            pop a
14534  6092             ; --- END RELATIONAL
14535  6092 C0 00 00      cmp b, 0
14536  6095 C6 AB 60      je _while798_exit
14537  6098             _while798_block:
14538  6098             ; length++; 
14539  6098 FA FF FF      lea d, [bp + -1] ; $length
14540  609B 2A            mov b, [d]
14541  609C 38 00 00      mov c, 0
14542  609F 11            mov a, b
14543  60A0 FD 77         inc b
14544  60A2 FA FF FF      lea d, [bp + -1] ; $length
14545  60A5 FD 43         mov [d], b
14546  60A7 27            mov b, a
14547  60A8 0A 6C 60      jmp _while798_cond
14548  60AB             _while798_exit:
14549  60AB             ; return length; 
14550  60AB FA FF FF      lea d, [bp + -1] ; $length
14551  60AE 2A            mov b, [d]
14552  60AF 38 00 00      mov c, 0
14553  60B2 F9            leave
14554  60B3 09            ret
14555  60B4             
14556  60B4             printf:
14557  60B4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14558  60B7             ; char *p, *format_p; 
14559  60B7 52 02 00      sub sp, 2
14560  60BA 52 02 00      sub sp, 2
14561  60BD             ; format_p = format; 
14562  60BD FA FD FF      lea d, [bp + -3] ; $format_p
14563  60C0 DA            push d
14564  60C1 FA 05 00      lea d, [bp + 5] ; $format
14565  60C4 2A            mov b, [d]
14566  60C5 38 00 00      mov c, 0
14567  60C8 E7            pop d
14568  60C9 FD 43         mov [d], b
14569  60CB             ; p = &format + 2; 
14570  60CB FA FF FF      lea d, [bp + -1] ; $p
14571  60CE DA            push d
14572  60CF FA 05 00      lea d, [bp + 5] ; $format
14573  60D2 2D            mov b, d
14574  60D3             ; --- START TERMS
14575  60D3 D7            push a
14576  60D4 11            mov a, b
14577  60D5 FD 2E 02 00   mov32 cb, $00000002
14577  60D9 00 00 
14578  60DB 56            add b, a
14579  60DC E4            pop a
14580  60DD             ; --- END TERMS
14581  60DD E7            pop d
14582  60DE FD 43         mov [d], b
14583  60E0             ; for(;;){ 
14584  60E0             _for799_init:
14585  60E0             _for799_cond:
14586  60E0             _for799_block:
14587  60E0             ; if(!*format_p) break; 
14588  60E0             _if800_cond:
14589  60E0 FA FD FF      lea d, [bp + -3] ; $format_p
14590  60E3 2A            mov b, [d]
14591  60E4 38 00 00      mov c, 0
14592  60E7 74            mov d, b
14593  60E8 32            mov bl, [d]
14594  60E9 A7 00         mov bh, 0
14595  60EB 38 00 00      mov c, 0
14596  60EE C0 00 00      cmp b, 0
14597  60F1 FD 71         seq ; !
14598  60F3 C0 00 00      cmp b, 0
14599  60F6 C6 FF 60      je _if800_else
14600  60F9             _if800_TRUE:
14601  60F9             ; break; 
14602  60F9 0A 9F 63      jmp _for799_exit ; for break
14603  60FC 0A 8C 63      jmp _if800_exit
14604  60FF             _if800_else:
14605  60FF             ; if(*format_p == '%'){ 
14606  60FF             _if801_cond:
14607  60FF FA FD FF      lea d, [bp + -3] ; $format_p
14608  6102 2A            mov b, [d]
14609  6103 38 00 00      mov c, 0
14610  6106 74            mov d, b
14611  6107 32            mov bl, [d]
14612  6108 A7 00         mov bh, 0
14613  610A 38 00 00      mov c, 0
14614  610D             ; --- START RELATIONAL
14615  610D D7            push a
14616  610E 11            mov a, b
14617  610F FD 2E 25 00   mov32 cb, $00000025
14617  6113 00 00 
14618  6115 B0            cmp a, b
14619  6116 FD 71         seq ; ==
14620  6118 E4            pop a
14621  6119             ; --- END RELATIONAL
14622  6119 C0 00 00      cmp b, 0
14623  611C C6 77 63      je _if801_else
14624  611F             _if801_TRUE:
14625  611F             ; format_p++; 
14626  611F FA FD FF      lea d, [bp + -3] ; $format_p
14627  6122 2A            mov b, [d]
14628  6123 38 00 00      mov c, 0
14629  6126 FD 77         inc b
14630  6128 FA FD FF      lea d, [bp + -3] ; $format_p
14631  612B FD 43         mov [d], b
14632  612D FD 7D         dec b
14633  612F             ; switch(*format_p){ 
14634  612F             _switch802_expr:
14635  612F FA FD FF      lea d, [bp + -3] ; $format_p
14636  6132 2A            mov b, [d]
14637  6133 38 00 00      mov c, 0
14638  6136 74            mov d, b
14639  6137 32            mov bl, [d]
14640  6138 A7 00         mov bh, 0
14641  613A 38 00 00      mov c, 0
14642  613D             _switch802_comparisons:
14643  613D C1 6C         cmp bl, $6c
14644  613F C6 6B 61      je _switch802_case0
14645  6142 C1 4C         cmp bl, $4c
14646  6144 C6 6B 61      je _switch802_case1
14647  6147 C1 64         cmp bl, $64
14648  6149 C6 7B 62      je _switch802_case2
14649  614C C1 69         cmp bl, $69
14650  614E C6 7B 62      je _switch802_case3
14651  6151 C1 75         cmp bl, $75
14652  6153 C6 AB 62      je _switch802_case4
14653  6156 C1 78         cmp bl, $78
14654  6158 C6 DB 62      je _switch802_case5
14655  615B C1 63         cmp bl, $63
14656  615D C6 0B 63      je _switch802_case6
14657  6160 C1 73         cmp bl, $73
14658  6162 C6 3B 63      je _switch802_case7
14659  6165 0A 68 63      jmp _switch802_default
14660  6168 0A 74 63      jmp _switch802_exit
14661  616B             _switch802_case0:
14662  616B             _switch802_case1:
14663  616B             ; format_p++; 
14664  616B FA FD FF      lea d, [bp + -3] ; $format_p
14665  616E 2A            mov b, [d]
14666  616F 38 00 00      mov c, 0
14667  6172 FD 77         inc b
14668  6174 FA FD FF      lea d, [bp + -3] ; $format_p
14669  6177 FD 43         mov [d], b
14670  6179 FD 7D         dec b
14671  617B             ; if(*format_p == 'd' || *format_p == 'i') 
14672  617B             _if803_cond:
14673  617B FA FD FF      lea d, [bp + -3] ; $format_p
14674  617E 2A            mov b, [d]
14675  617F 38 00 00      mov c, 0
14676  6182 74            mov d, b
14677  6183 32            mov bl, [d]
14678  6184 A7 00         mov bh, 0
14679  6186 38 00 00      mov c, 0
14680  6189             ; --- START RELATIONAL
14681  6189 D7            push a
14682  618A 11            mov a, b
14683  618B FD 2E 64 00   mov32 cb, $00000064
14683  618F 00 00 
14684  6191 B0            cmp a, b
14685  6192 FD 71         seq ; ==
14686  6194 E4            pop a
14687  6195             ; --- END RELATIONAL
14688  6195             ; --- START LOGICAL OR
14689  6195 D7            push a
14690  6196 11            mov a, b
14691  6197 FA FD FF      lea d, [bp + -3] ; $format_p
14692  619A 2A            mov b, [d]
14693  619B 38 00 00      mov c, 0
14694  619E 74            mov d, b
14695  619F 32            mov bl, [d]
14696  61A0 A7 00         mov bh, 0
14697  61A2 38 00 00      mov c, 0
14698  61A5             ; --- START RELATIONAL
14699  61A5 D7            push a
14700  61A6 11            mov a, b
14701  61A7 FD 2E 69 00   mov32 cb, $00000069
14701  61AB 00 00 
14702  61AD B0            cmp a, b
14703  61AE FD 71         seq ; ==
14704  61B0 E4            pop a
14705  61B1             ; --- END RELATIONAL
14706  61B1 FD A8         sor a, b ; ||
14707  61B3 E4            pop a
14708  61B4             ; --- END LOGICAL OR
14709  61B4 C0 00 00      cmp b, 0
14710  61B7 C6 D8 61      je _if803_else
14711  61BA             _if803_TRUE:
14712  61BA             ; print_signed_long(*(long *)p); 
14713  61BA             ; --- START FUNCTION CALL
14714  61BA FA FF FF      lea d, [bp + -1] ; $p
14715  61BD 2A            mov b, [d]
14716  61BE 38 00 00      mov c, 0
14717  61C1 74            mov d, b
14718  61C2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14719  61C5 FD 39         mov c, b ; And place it into C
14720  61C7 2A            mov b, [d] ; Lower Word in B
14721  61C8 12            mov a, c
14722  61C9 FD AA         swp a
14723  61CB D7            push a
14724  61CC FD AB         swp b
14725  61CE D8            push b
14726  61CF 07 A1 63      call print_signed_long
14727  61D2 51 04 00      add sp, 4
14728  61D5             ; --- END FUNCTION CALL
14729  61D5 0A 60 62      jmp _if803_exit
14730  61D8             _if803_else:
14731  61D8             ; if(*format_p == 'u') 
14732  61D8             _if804_cond:
14733  61D8 FA FD FF      lea d, [bp + -3] ; $format_p
14734  61DB 2A            mov b, [d]
14735  61DC 38 00 00      mov c, 0
14736  61DF 74            mov d, b
14737  61E0 32            mov bl, [d]
14738  61E1 A7 00         mov bh, 0
14739  61E3 38 00 00      mov c, 0
14740  61E6             ; --- START RELATIONAL
14741  61E6 D7            push a
14742  61E7 11            mov a, b
14743  61E8 FD 2E 75 00   mov32 cb, $00000075
14743  61EC 00 00 
14744  61EE B0            cmp a, b
14745  61EF FD 71         seq ; ==
14746  61F1 E4            pop a
14747  61F2             ; --- END RELATIONAL
14748  61F2 C0 00 00      cmp b, 0
14749  61F5 C6 16 62      je _if804_else
14750  61F8             _if804_TRUE:
14751  61F8             ; print_unsigned_long(*(unsigned long *)p); 
14752  61F8             ; --- START FUNCTION CALL
14753  61F8 FA FF FF      lea d, [bp + -1] ; $p
14754  61FB 2A            mov b, [d]
14755  61FC 38 00 00      mov c, 0
14756  61FF 74            mov d, b
14757  6200 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14758  6203 FD 39         mov c, b ; And place it into C
14759  6205 2A            mov b, [d] ; Lower Word in B
14760  6206 12            mov a, c
14761  6207 FD AA         swp a
14762  6209 D7            push a
14763  620A FD AB         swp b
14764  620C D8            push b
14765  620D 07 41 65      call print_unsigned_long
14766  6210 51 04 00      add sp, 4
14767  6213             ; --- END FUNCTION CALL
14768  6213 0A 60 62      jmp _if804_exit
14769  6216             _if804_else:
14770  6216             ; if(*format_p == 'x') 
14771  6216             _if805_cond:
14772  6216 FA FD FF      lea d, [bp + -3] ; $format_p
14773  6219 2A            mov b, [d]
14774  621A 38 00 00      mov c, 0
14775  621D 74            mov d, b
14776  621E 32            mov bl, [d]
14777  621F A7 00         mov bh, 0
14778  6221 38 00 00      mov c, 0
14779  6224             ; --- START RELATIONAL
14780  6224 D7            push a
14781  6225 11            mov a, b
14782  6226 FD 2E 78 00   mov32 cb, $00000078
14782  622A 00 00 
14783  622C B0            cmp a, b
14784  622D FD 71         seq ; ==
14785  622F E4            pop a
14786  6230             ; --- END RELATIONAL
14787  6230 C0 00 00      cmp b, 0
14788  6233 C6 54 62      je _if805_else
14789  6236             _if805_TRUE:
14790  6236             ; printx32(*(long int *)p); 
14791  6236             ; --- START FUNCTION CALL
14792  6236 FA FF FF      lea d, [bp + -1] ; $p
14793  6239 2A            mov b, [d]
14794  623A 38 00 00      mov c, 0
14795  623D 74            mov d, b
14796  623E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14797  6241 FD 39         mov c, b ; And place it into C
14798  6243 2A            mov b, [d] ; Lower Word in B
14799  6244 12            mov a, c
14800  6245 FD AA         swp a
14801  6247 D7            push a
14802  6248 FD AB         swp b
14803  624A D8            push b
14804  624B 07 7F 66      call printx32
14805  624E 51 04 00      add sp, 4
14806  6251             ; --- END FUNCTION CALL
14807  6251 0A 60 62      jmp _if805_exit
14808  6254             _if805_else:
14809  6254             ; err("Unexpected format in printf."); 
14810  6254             ; --- START FUNCTION CALL
14811  6254 26 8E 83      mov b, _s169 ; "Unexpected format in printf."
14812  6257 FD AB         swp b
14813  6259 D8            push b
14814  625A 07 DF 66      call err
14815  625D 51 02 00      add sp, 2
14816  6260             ; --- END FUNCTION CALL
14817  6260             _if805_exit:
14818  6260             _if804_exit:
14819  6260             _if803_exit:
14820  6260             ; p = p + 4; 
14821  6260 FA FF FF      lea d, [bp + -1] ; $p
14822  6263 DA            push d
14823  6264 FA FF FF      lea d, [bp + -1] ; $p
14824  6267 2A            mov b, [d]
14825  6268 38 00 00      mov c, 0
14826  626B             ; --- START TERMS
14827  626B D7            push a
14828  626C 11            mov a, b
14829  626D FD 2E 04 00   mov32 cb, $00000004
14829  6271 00 00 
14830  6273 56            add b, a
14831  6274 E4            pop a
14832  6275             ; --- END TERMS
14833  6275 E7            pop d
14834  6276 FD 43         mov [d], b
14835  6278             ; break; 
14836  6278 0A 74 63      jmp _switch802_exit ; case break
14837  627B             _switch802_case2:
14838  627B             _switch802_case3:
14839  627B             ; print_signed(*(int*)p); 
14840  627B             ; --- START FUNCTION CALL
14841  627B FA FF FF      lea d, [bp + -1] ; $p
14842  627E 2A            mov b, [d]
14843  627F 38 00 00      mov c, 0
14844  6282 74            mov d, b
14845  6283 2A            mov b, [d]
14846  6284 38 00 00      mov c, 0
14847  6287 FD AB         swp b
14848  6289 D8            push b
14849  628A 07 0D 67      call print_signed
14850  628D 51 02 00      add sp, 2
14851  6290             ; --- END FUNCTION CALL
14852  6290             ; p = p + 2; 
14853  6290 FA FF FF      lea d, [bp + -1] ; $p
14854  6293 DA            push d
14855  6294 FA FF FF      lea d, [bp + -1] ; $p
14856  6297 2A            mov b, [d]
14857  6298 38 00 00      mov c, 0
14858  629B             ; --- START TERMS
14859  629B D7            push a
14860  629C 11            mov a, b
14861  629D FD 2E 02 00   mov32 cb, $00000002
14861  62A1 00 00 
14862  62A3 56            add b, a
14863  62A4 E4            pop a
14864  62A5             ; --- END TERMS
14865  62A5 E7            pop d
14866  62A6 FD 43         mov [d], b
14867  62A8             ; break; 
14868  62A8 0A 74 63      jmp _switch802_exit ; case break
14869  62AB             _switch802_case4:
14870  62AB             ; print_unsigned(*(unsigned int*)p); 
14871  62AB             ; --- START FUNCTION CALL
14872  62AB FA FF FF      lea d, [bp + -1] ; $p
14873  62AE 2A            mov b, [d]
14874  62AF 38 00 00      mov c, 0
14875  62B2 74            mov d, b
14876  62B3 2A            mov b, [d]
14877  62B4 38 00 00      mov c, 0
14878  62B7 FD AB         swp b
14879  62B9 D8            push b
14880  62BA 07 5E 68      call print_unsigned
14881  62BD 51 02 00      add sp, 2
14882  62C0             ; --- END FUNCTION CALL
14883  62C0             ; p = p + 2; 
14884  62C0 FA FF FF      lea d, [bp + -1] ; $p
14885  62C3 DA            push d
14886  62C4 FA FF FF      lea d, [bp + -1] ; $p
14887  62C7 2A            mov b, [d]
14888  62C8 38 00 00      mov c, 0
14889  62CB             ; --- START TERMS
14890  62CB D7            push a
14891  62CC 11            mov a, b
14892  62CD FD 2E 02 00   mov32 cb, $00000002
14892  62D1 00 00 
14893  62D3 56            add b, a
14894  62D4 E4            pop a
14895  62D5             ; --- END TERMS
14896  62D5 E7            pop d
14897  62D6 FD 43         mov [d], b
14898  62D8             ; break; 
14899  62D8 0A 74 63      jmp _switch802_exit ; case break
14900  62DB             _switch802_case5:
14901  62DB             ; printx16(*(int*)p); 
14902  62DB             ; --- START FUNCTION CALL
14903  62DB FA FF FF      lea d, [bp + -1] ; $p
14904  62DE 2A            mov b, [d]
14905  62DF 38 00 00      mov c, 0
14906  62E2 74            mov d, b
14907  62E3 2A            mov b, [d]
14908  62E4 38 00 00      mov c, 0
14909  62E7 FD AB         swp b
14910  62E9 D8            push b
14911  62EA 07 76 69      call printx16
14912  62ED 51 02 00      add sp, 2
14913  62F0             ; --- END FUNCTION CALL
14914  62F0             ; p = p + 2; 
14915  62F0 FA FF FF      lea d, [bp + -1] ; $p
14916  62F3 DA            push d
14917  62F4 FA FF FF      lea d, [bp + -1] ; $p
14918  62F7 2A            mov b, [d]
14919  62F8 38 00 00      mov c, 0
14920  62FB             ; --- START TERMS
14921  62FB D7            push a
14922  62FC 11            mov a, b
14923  62FD FD 2E 02 00   mov32 cb, $00000002
14923  6301 00 00 
14924  6303 56            add b, a
14925  6304 E4            pop a
14926  6305             ; --- END TERMS
14927  6305 E7            pop d
14928  6306 FD 43         mov [d], b
14929  6308             ; break; 
14930  6308 0A 74 63      jmp _switch802_exit ; case break
14931  630B             _switch802_case6:
14932  630B             ; putchar(*(char*)p); 
14933  630B             ; --- START FUNCTION CALL
14934  630B FA FF FF      lea d, [bp + -1] ; $p
14935  630E 2A            mov b, [d]
14936  630F 38 00 00      mov c, 0
14937  6312 74            mov d, b
14938  6313 32            mov bl, [d]
14939  6314 A7 00         mov bh, 0
14940  6316 38 00 00      mov c, 0
14941  6319 DD            push bl
14942  631A 07 33 65      call putchar
14943  631D 51 01 00      add sp, 1
14944  6320             ; --- END FUNCTION CALL
14945  6320             ; p = p + 2; 
14946  6320 FA FF FF      lea d, [bp + -1] ; $p
14947  6323 DA            push d
14948  6324 FA FF FF      lea d, [bp + -1] ; $p
14949  6327 2A            mov b, [d]
14950  6328 38 00 00      mov c, 0
14951  632B             ; --- START TERMS
14952  632B D7            push a
14953  632C 11            mov a, b
14954  632D FD 2E 02 00   mov32 cb, $00000002
14954  6331 00 00 
14955  6333 56            add b, a
14956  6334 E4            pop a
14957  6335             ; --- END TERMS
14958  6335 E7            pop d
14959  6336 FD 43         mov [d], b
14960  6338             ; break; 
14961  6338 0A 74 63      jmp _switch802_exit ; case break
14962  633B             _switch802_case7:
14963  633B             ; print(*(char**)p); 
14964  633B             ; --- START FUNCTION CALL
14965  633B FA FF FF      lea d, [bp + -1] ; $p
14966  633E 2A            mov b, [d]
14967  633F 38 00 00      mov c, 0
14968  6342 74            mov d, b
14969  6343 2A            mov b, [d]
14970  6344 FD AB         swp b
14971  6346 D8            push b
14972  6347 07 F4 66      call print
14973  634A 51 02 00      add sp, 2
14974  634D             ; --- END FUNCTION CALL
14975  634D             ; p = p + 2; 
14976  634D FA FF FF      lea d, [bp + -1] ; $p
14977  6350 DA            push d
14978  6351 FA FF FF      lea d, [bp + -1] ; $p
14979  6354 2A            mov b, [d]
14980  6355 38 00 00      mov c, 0
14981  6358             ; --- START TERMS
14982  6358 D7            push a
14983  6359 11            mov a, b
14984  635A FD 2E 02 00   mov32 cb, $00000002
14984  635E 00 00 
14985  6360 56            add b, a
14986  6361 E4            pop a
14987  6362             ; --- END TERMS
14988  6362 E7            pop d
14989  6363 FD 43         mov [d], b
14990  6365             ; break; 
14991  6365 0A 74 63      jmp _switch802_exit ; case break
14992  6368             _switch802_default:
14993  6368             ; print("Error: Unknown argument type.\n"); 
14994  6368             ; --- START FUNCTION CALL
14995  6368 26 AB 83      mov b, _s170 ; "Error: Unknown argument type.\n"
14996  636B FD AB         swp b
14997  636D D8            push b
14998  636E 07 F4 66      call print
14999  6371 51 02 00      add sp, 2
15000  6374             ; --- END FUNCTION CALL
15001  6374             _switch802_exit:
15002  6374 0A 8C 63      jmp _if801_exit
15003  6377             _if801_else:
15004  6377             ; putchar(*format_p); 
15005  6377             ; --- START FUNCTION CALL
15006  6377 FA FD FF      lea d, [bp + -3] ; $format_p
15007  637A 2A            mov b, [d]
15008  637B 38 00 00      mov c, 0
15009  637E 74            mov d, b
15010  637F 32            mov bl, [d]
15011  6380 A7 00         mov bh, 0
15012  6382 38 00 00      mov c, 0
15013  6385 DD            push bl
15014  6386 07 33 65      call putchar
15015  6389 51 01 00      add sp, 1
15016  638C             ; --- END FUNCTION CALL
15017  638C             _if801_exit:
15018  638C             _if800_exit:
15019  638C             ; format_p++; 
15020  638C FA FD FF      lea d, [bp + -3] ; $format_p
15021  638F 2A            mov b, [d]
15022  6390 38 00 00      mov c, 0
15023  6393 FD 77         inc b
15024  6395 FA FD FF      lea d, [bp + -3] ; $format_p
15025  6398 FD 43         mov [d], b
15026  639A FD 7D         dec b
15027  639C             _for799_update:
15028  639C 0A E0 60      jmp _for799_cond
15029  639F             _for799_exit:
15030  639F F9            leave
15031  63A0 09            ret
15032  63A1             
15033  63A1             print_signed_long:
15034  63A1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15035  63A4             ; char digits[10]; 
15036  63A4 52 0A 00      sub sp, 10
15037  63A7             ; int i = 0; 
15038  63A7 52 02 00      sub sp, 2
15039  63AA             ; --- START LOCAL VAR INITIALIZATION
15040  63AA FA F5 FF      lea d, [bp + -11] ; $i
15041  63AD DA            push d
15042  63AE FD 2E 00 00   mov32 cb, $00000000
15042  63B2 00 00 
15043  63B4 E7            pop d
15044  63B5 FD 43         mov [d], b
15045  63B7             ; --- END LOCAL VAR INITIALIZATION
15046  63B7             ; if (num < 0) { 
15047  63B7             _if806_cond:
15048  63B7 FA 05 00      lea d, [bp + 5] ; $num
15049  63BA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15050  63BD FD 39         mov c, b ; And place it into C
15051  63BF 2A            mov b, [d] ; Lower Word in B
15052  63C0             ; --- START RELATIONAL
15053  63C0 D7            push a
15054  63C1 FD D8         push g
15055  63C3 11            mov a, b
15056  63C4 FD 7A         mov g, c
15057  63C6 FD 2E 00 00   mov32 cb, $00000000
15057  63CA 00 00 
15058  63CC 38 00 00      mov c, 0
15059  63CF FD AF         cmp32 ga, cb
15060  63D1 FD 73         slt ; <
15061  63D3 FD F1         pop g
15062  63D5 E4            pop a
15063  63D6             ; --- END RELATIONAL
15064  63D6 C0 00 00      cmp b, 0
15065  63D9 C6 0B 64      je _if806_else
15066  63DC             _if806_TRUE:
15067  63DC             ; putchar('-'); 
15068  63DC             ; --- START FUNCTION CALL
15069  63DC FD 2E 2D 00   mov32 cb, $0000002d
15069  63E0 00 00 
15070  63E2 DD            push bl
15071  63E3 07 33 65      call putchar
15072  63E6 51 01 00      add sp, 1
15073  63E9             ; --- END FUNCTION CALL
15074  63E9             ; num = -num; 
15075  63E9 FA 05 00      lea d, [bp + 5] ; $num
15076  63EC DA            push d
15077  63ED FA 05 00      lea d, [bp + 5] ; $num
15078  63F0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15079  63F3 FD 39         mov c, b ; And place it into C
15080  63F5 2A            mov b, [d] ; Lower Word in B
15081  63F6 12            mov a, c
15082  63F7 95            not a
15083  63F8 97            not b
15084  63F9 55 01 00      add b, 1
15085  63FC 5B 00 00      adc a, 0
15086  63FF 39            mov c, a
15087  6400 E7            pop d
15088  6401 FD 43         mov [d], b
15089  6403 28            mov b, c
15090  6404 FD 44 02 00   mov [d + 2], b
15091  6408 0A 42 64      jmp _if806_exit
15092  640B             _if806_else:
15093  640B             ; if (num == 0) { 
15094  640B             _if807_cond:
15095  640B FA 05 00      lea d, [bp + 5] ; $num
15096  640E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15097  6411 FD 39         mov c, b ; And place it into C
15098  6413 2A            mov b, [d] ; Lower Word in B
15099  6414             ; --- START RELATIONAL
15100  6414 D7            push a
15101  6415 FD D8         push g
15102  6417 11            mov a, b
15103  6418 FD 7A         mov g, c
15104  641A FD 2E 00 00   mov32 cb, $00000000
15104  641E 00 00 
15105  6420 38 00 00      mov c, 0
15106  6423 FD AF         cmp32 ga, cb
15107  6425 FD 71         seq ; ==
15108  6427 FD F1         pop g
15109  6429 E4            pop a
15110  642A             ; --- END RELATIONAL
15111  642A C0 00 00      cmp b, 0
15112  642D C6 42 64      je _if807_exit
15113  6430             _if807_TRUE:
15114  6430             ; putchar('0'); 
15115  6430             ; --- START FUNCTION CALL
15116  6430 FD 2E 30 00   mov32 cb, $00000030
15116  6434 00 00 
15117  6436 DD            push bl
15118  6437 07 33 65      call putchar
15119  643A 51 01 00      add sp, 1
15120  643D             ; --- END FUNCTION CALL
15121  643D             ; return; 
15122  643D F9            leave
15123  643E 09            ret
15124  643F 0A 42 64      jmp _if807_exit
15125  6442             _if807_exit:
15126  6442             _if806_exit:
15127  6442             ; while (num > 0) { 
15128  6442             _while808_cond:
15129  6442 FA 05 00      lea d, [bp + 5] ; $num
15130  6445 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15131  6448 FD 39         mov c, b ; And place it into C
15132  644A 2A            mov b, [d] ; Lower Word in B
15133  644B             ; --- START RELATIONAL
15134  644B D7            push a
15135  644C FD D8         push g
15136  644E 11            mov a, b
15137  644F FD 7A         mov g, c
15138  6451 FD 2E 00 00   mov32 cb, $00000000
15138  6455 00 00 
15139  6457 38 00 00      mov c, 0
15140  645A FD AF         cmp32 ga, cb
15141  645C FD 7F         sgt
15142  645E FD F1         pop g
15143  6460 E4            pop a
15144  6461             ; --- END RELATIONAL
15145  6461 C0 00 00      cmp b, 0
15146  6464 C6 E9 64      je _while808_exit
15147  6467             _while808_block:
15148  6467             ; digits[i] = '0' + (num % 10); 
15149  6467 FA F7 FF      lea d, [bp + -9] ; $digits
15150  646A D7            push a
15151  646B DA            push d
15152  646C FA F5 FF      lea d, [bp + -11] ; $i
15153  646F 2A            mov b, [d]
15154  6470 38 00 00      mov c, 0
15155  6473 E7            pop d
15156  6474 5A            add d, b
15157  6475 E4            pop a
15158  6476 DA            push d
15159  6477 FD 2E 30 00   mov32 cb, $00000030
15159  647B 00 00 
15160  647D             ; --- START TERMS
15161  647D D7            push a
15162  647E 11            mov a, b
15163  647F FA 05 00      lea d, [bp + 5] ; $num
15164  6482 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15165  6485 FD 39         mov c, b ; And place it into C
15166  6487 2A            mov b, [d] ; Lower Word in B
15167  6488             ; --- START FACTORS
15168  6488 D7            push a
15169  6489 FD D8         push g
15170  648B 11            mov a, b
15171  648C FD 7A         mov g, c
15172  648E FD 2E 0A 00   mov32 cb, $0000000a
15172  6492 00 00 
15173  6494 FD D8         push g ; save 'g' as the div instruction uses it
15174  6496 AE            div a, b ; %, a: quotient, b: remainder
15175  6497 11            mov a, b
15176  6498 FD F1         pop g
15177  649A FD 38         mov c, g
15178  649C 27            mov b, a
15179  649D FD F1         pop g
15180  649F E4            pop a
15181  64A0             ; --- END FACTORS
15182  64A0 FD 22 00 00   mov g, 0
15183  64A4 FD 15         add32 cb, ga
15184  64A6 E4            pop a
15185  64A7             ; --- END TERMS
15186  64A7 E7            pop d
15187  64A8 FD 3E         mov [d], bl
15188  64AA             ; num = num / 10; 
15189  64AA FA 05 00      lea d, [bp + 5] ; $num
15190  64AD DA            push d
15191  64AE FA 05 00      lea d, [bp + 5] ; $num
15192  64B1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15193  64B4 FD 39         mov c, b ; And place it into C
15194  64B6 2A            mov b, [d] ; Lower Word in B
15195  64B7             ; --- START FACTORS
15196  64B7 D7            push a
15197  64B8 FD D8         push g
15198  64BA 11            mov a, b
15199  64BB FD 7A         mov g, c
15200  64BD FD 2E 0A 00   mov32 cb, $0000000a
15200  64C1 00 00 
15201  64C3 FD D8         push g ; save 'g' as the div instruction uses it
15202  64C5 AE            div a, b ; /, a: quotient, b: remainder
15203  64C6 FD F1         pop g
15204  64C8 FD 38         mov c, g
15205  64CA 27            mov b, a
15206  64CB FD F1         pop g
15207  64CD E4            pop a
15208  64CE             ; --- END FACTORS
15209  64CE E7            pop d
15210  64CF FD 43         mov [d], b
15211  64D1 28            mov b, c
15212  64D2 FD 44 02 00   mov [d + 2], b
15213  64D6             ; i++; 
15214  64D6 FA F5 FF      lea d, [bp + -11] ; $i
15215  64D9 2A            mov b, [d]
15216  64DA 38 00 00      mov c, 0
15217  64DD 11            mov a, b
15218  64DE FD 77         inc b
15219  64E0 FA F5 FF      lea d, [bp + -11] ; $i
15220  64E3 FD 43         mov [d], b
15221  64E5 27            mov b, a
15222  64E6 0A 42 64      jmp _while808_cond
15223  64E9             _while808_exit:
15224  64E9             ; while (i > 0) { 
15225  64E9             _while815_cond:
15226  64E9 FA F5 FF      lea d, [bp + -11] ; $i
15227  64EC 2A            mov b, [d]
15228  64ED 38 00 00      mov c, 0
15229  64F0             ; --- START RELATIONAL
15230  64F0 D7            push a
15231  64F1 11            mov a, b
15232  64F2 FD 2E 00 00   mov32 cb, $00000000
15232  64F6 00 00 
15233  64F8 B0            cmp a, b
15234  64F9 FD 7F         sgt ; >
15235  64FB E4            pop a
15236  64FC             ; --- END RELATIONAL
15237  64FC C0 00 00      cmp b, 0
15238  64FF C6 31 65      je _while815_exit
15239  6502             _while815_block:
15240  6502             ; i--; 
15241  6502 FA F5 FF      lea d, [bp + -11] ; $i
15242  6505 2A            mov b, [d]
15243  6506 38 00 00      mov c, 0
15244  6509 11            mov a, b
15245  650A FD 7D         dec b
15246  650C FA F5 FF      lea d, [bp + -11] ; $i
15247  650F FD 43         mov [d], b
15248  6511 27            mov b, a
15249  6512             ; putchar(digits[i]); 
15250  6512             ; --- START FUNCTION CALL
15251  6512 FA F7 FF      lea d, [bp + -9] ; $digits
15252  6515 D7            push a
15253  6516 DA            push d
15254  6517 FA F5 FF      lea d, [bp + -11] ; $i
15255  651A 2A            mov b, [d]
15256  651B 38 00 00      mov c, 0
15257  651E E7            pop d
15258  651F 5A            add d, b
15259  6520 E4            pop a
15260  6521 32            mov bl, [d]
15261  6522 A7 00         mov bh, 0
15262  6524 38 00 00      mov c, 0
15263  6527 DD            push bl
15264  6528 07 33 65      call putchar
15265  652B 51 01 00      add sp, 1
15266  652E             ; --- END FUNCTION CALL
15267  652E 0A E9 64      jmp _while815_cond
15268  6531             _while815_exit:
15269  6531 F9            leave
15270  6532 09            ret
15271  6533             
15272  6533             putchar:
15273  6533 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15274  6536             ; --- BEGIN INLINE ASM SEGMENT
15275  6536 FA 05 00      lea d, [bp + 5] ; $c
15276  6539 1E            mov al, [d]
15277  653A 23            mov ah, al
15278  653B 19 00         mov al, 0
15279  653D 05 03         syscall sys_io      ; char in AH
15280  653F             ; --- END INLINE ASM SEGMENT
15281  653F F9            leave
15282  6540 09            ret
15283  6541             
15284  6541             print_unsigned_long:
15285  6541 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15286  6544             ; char digits[10]; 
15287  6544 52 0A 00      sub sp, 10
15288  6547             ; int i; 
15289  6547 52 02 00      sub sp, 2
15290  654A             ; i = 0; 
15291  654A FA F5 FF      lea d, [bp + -11] ; $i
15292  654D DA            push d
15293  654E FD 2E 00 00   mov32 cb, $00000000
15293  6552 00 00 
15294  6554 E7            pop d
15295  6555 FD 43         mov [d], b
15296  6557             ; if(num == 0){ 
15297  6557             _if816_cond:
15298  6557 FA 05 00      lea d, [bp + 5] ; $num
15299  655A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15300  655D FD 39         mov c, b ; And place it into C
15301  655F 2A            mov b, [d] ; Lower Word in B
15302  6560             ; --- START RELATIONAL
15303  6560 D7            push a
15304  6561 FD D8         push g
15305  6563 11            mov a, b
15306  6564 FD 7A         mov g, c
15307  6566 FD 2E 00 00   mov32 cb, $00000000
15307  656A 00 00 
15308  656C 38 00 00      mov c, 0
15309  656F FD AF         cmp32 ga, cb
15310  6571 FD 71         seq ; ==
15311  6573 FD F1         pop g
15312  6575 E4            pop a
15313  6576             ; --- END RELATIONAL
15314  6576 C0 00 00      cmp b, 0
15315  6579 C6 8E 65      je _if816_exit
15316  657C             _if816_TRUE:
15317  657C             ; putchar('0'); 
15318  657C             ; --- START FUNCTION CALL
15319  657C FD 2E 30 00   mov32 cb, $00000030
15319  6580 00 00 
15320  6582 DD            push bl
15321  6583 07 33 65      call putchar
15322  6586 51 01 00      add sp, 1
15323  6589             ; --- END FUNCTION CALL
15324  6589             ; return; 
15325  6589 F9            leave
15326  658A 09            ret
15327  658B 0A 8E 65      jmp _if816_exit
15328  658E             _if816_exit:
15329  658E             ; while (num > 0) { 
15330  658E             _while817_cond:
15331  658E FA 05 00      lea d, [bp + 5] ; $num
15332  6591 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15333  6594 FD 39         mov c, b ; And place it into C
15334  6596 2A            mov b, [d] ; Lower Word in B
15335  6597             ; --- START RELATIONAL
15336  6597 D7            push a
15337  6598 FD D8         push g
15338  659A 11            mov a, b
15339  659B FD 7A         mov g, c
15340  659D FD 2E 00 00   mov32 cb, $00000000
15340  65A1 00 00 
15341  65A3 38 00 00      mov c, 0
15342  65A6 FD AF         cmp32 ga, cb
15343  65A8 FD 81         sgu
15344  65AA FD F1         pop g
15345  65AC E4            pop a
15346  65AD             ; --- END RELATIONAL
15347  65AD C0 00 00      cmp b, 0
15348  65B0 C6 35 66      je _while817_exit
15349  65B3             _while817_block:
15350  65B3             ; digits[i] = '0' + (num % 10); 
15351  65B3 FA F7 FF      lea d, [bp + -9] ; $digits
15352  65B6 D7            push a
15353  65B7 DA            push d
15354  65B8 FA F5 FF      lea d, [bp + -11] ; $i
15355  65BB 2A            mov b, [d]
15356  65BC 38 00 00      mov c, 0
15357  65BF E7            pop d
15358  65C0 5A            add d, b
15359  65C1 E4            pop a
15360  65C2 DA            push d
15361  65C3 FD 2E 30 00   mov32 cb, $00000030
15361  65C7 00 00 
15362  65C9             ; --- START TERMS
15363  65C9 D7            push a
15364  65CA 11            mov a, b
15365  65CB FA 05 00      lea d, [bp + 5] ; $num
15366  65CE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15367  65D1 FD 39         mov c, b ; And place it into C
15368  65D3 2A            mov b, [d] ; Lower Word in B
15369  65D4             ; --- START FACTORS
15370  65D4 D7            push a
15371  65D5 FD D8         push g
15372  65D7 11            mov a, b
15373  65D8 FD 7A         mov g, c
15374  65DA FD 2E 0A 00   mov32 cb, $0000000a
15374  65DE 00 00 
15375  65E0 FD D8         push g ; save 'g' as the div instruction uses it
15376  65E2 AE            div a, b ; %, a: quotient, b: remainder
15377  65E3 11            mov a, b
15378  65E4 FD F1         pop g
15379  65E6 FD 38         mov c, g
15380  65E8 27            mov b, a
15381  65E9 FD F1         pop g
15382  65EB E4            pop a
15383  65EC             ; --- END FACTORS
15384  65EC FD 22 00 00   mov g, 0
15385  65F0 FD 15         add32 cb, ga
15386  65F2 E4            pop a
15387  65F3             ; --- END TERMS
15388  65F3 E7            pop d
15389  65F4 FD 3E         mov [d], bl
15390  65F6             ; num = num / 10; 
15391  65F6 FA 05 00      lea d, [bp + 5] ; $num
15392  65F9 DA            push d
15393  65FA FA 05 00      lea d, [bp + 5] ; $num
15394  65FD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15395  6600 FD 39         mov c, b ; And place it into C
15396  6602 2A            mov b, [d] ; Lower Word in B
15397  6603             ; --- START FACTORS
15398  6603 D7            push a
15399  6604 FD D8         push g
15400  6606 11            mov a, b
15401  6607 FD 7A         mov g, c
15402  6609 FD 2E 0A 00   mov32 cb, $0000000a
15402  660D 00 00 
15403  660F FD D8         push g ; save 'g' as the div instruction uses it
15404  6611 AE            div a, b ; /, a: quotient, b: remainder
15405  6612 FD F1         pop g
15406  6614 FD 38         mov c, g
15407  6616 27            mov b, a
15408  6617 FD F1         pop g
15409  6619 E4            pop a
15410  661A             ; --- END FACTORS
15411  661A E7            pop d
15412  661B FD 43         mov [d], b
15413  661D 28            mov b, c
15414  661E FD 44 02 00   mov [d + 2], b
15415  6622             ; i++; 
15416  6622 FA F5 FF      lea d, [bp + -11] ; $i
15417  6625 2A            mov b, [d]
15418  6626 38 00 00      mov c, 0
15419  6629 11            mov a, b
15420  662A FD 77         inc b
15421  662C FA F5 FF      lea d, [bp + -11] ; $i
15422  662F FD 43         mov [d], b
15423  6631 27            mov b, a
15424  6632 0A 8E 65      jmp _while817_cond
15425  6635             _while817_exit:
15426  6635             ; while (i > 0) { 
15427  6635             _while824_cond:
15428  6635 FA F5 FF      lea d, [bp + -11] ; $i
15429  6638 2A            mov b, [d]
15430  6639 38 00 00      mov c, 0
15431  663C             ; --- START RELATIONAL
15432  663C D7            push a
15433  663D 11            mov a, b
15434  663E FD 2E 00 00   mov32 cb, $00000000
15434  6642 00 00 
15435  6644 B0            cmp a, b
15436  6645 FD 7F         sgt ; >
15437  6647 E4            pop a
15438  6648             ; --- END RELATIONAL
15439  6648 C0 00 00      cmp b, 0
15440  664B C6 7D 66      je _while824_exit
15441  664E             _while824_block:
15442  664E             ; i--; 
15443  664E FA F5 FF      lea d, [bp + -11] ; $i
15444  6651 2A            mov b, [d]
15445  6652 38 00 00      mov c, 0
15446  6655 11            mov a, b
15447  6656 FD 7D         dec b
15448  6658 FA F5 FF      lea d, [bp + -11] ; $i
15449  665B FD 43         mov [d], b
15450  665D 27            mov b, a
15451  665E             ; putchar(digits[i]); 
15452  665E             ; --- START FUNCTION CALL
15453  665E FA F7 FF      lea d, [bp + -9] ; $digits
15454  6661 D7            push a
15455  6662 DA            push d
15456  6663 FA F5 FF      lea d, [bp + -11] ; $i
15457  6666 2A            mov b, [d]
15458  6667 38 00 00      mov c, 0
15459  666A E7            pop d
15460  666B 5A            add d, b
15461  666C E4            pop a
15462  666D 32            mov bl, [d]
15463  666E A7 00         mov bh, 0
15464  6670 38 00 00      mov c, 0
15465  6673 DD            push bl
15466  6674 07 33 65      call putchar
15467  6677 51 01 00      add sp, 1
15468  667A             ; --- END FUNCTION CALL
15469  667A 0A 35 66      jmp _while824_cond
15470  667D             _while824_exit:
15471  667D F9            leave
15472  667E 09            ret
15473  667F             
15474  667F             printx32:
15475  667F F8 00 00      enter 0 ; (push bp; mov bp, sp)
15476  6682             ; --- BEGIN INLINE ASM SEGMENT
15477  6682 FA 05 00      lea d, [bp + 5] ; $hex
15478  6685 2B 02 00      mov b, [d+2]
15479  6688 07 91 66      call print_u16x_printx32
15480  668B 2A            mov b, [d]
15481  668C 07 91 66      call print_u16x_printx32
15482  668F             ; --- END INLINE ASM SEGMENT
15483  668F             ; return; 
15484  668F F9            leave
15485  6690 09            ret
15486  6691             ; --- BEGIN INLINE ASM SEGMENT
15487  6691             print_u16x_printx32:
15488  6691 D7            push a
15489  6692 D8            push b
15490  6693 DD            push bl
15491  6694 30            mov bl, bh
15492  6695 07 B3 66      call _itoa_printx32        ; convert bh to char in A
15493  6698 2F            mov bl, al        ; save al
15494  6699 19 00         mov al, 0
15495  669B 05 03         syscall sys_io        ; display AH
15496  669D 24            mov ah, bl        ; retrieve al
15497  669E 19 00         mov al, 0
15498  66A0 05 03         syscall sys_io        ; display AL
15499  66A2 EA            pop bl
15500  66A3 07 B3 66      call _itoa_printx32        ; convert bh to char in A
15501  66A6 2F            mov bl, al        ; save al
15502  66A7 19 00         mov al, 0
15503  66A9 05 03         syscall sys_io        ; display AH
15504  66AB 24            mov ah, bl        ; retrieve al
15505  66AC 19 00         mov al, 0
15506  66AE 05 03         syscall sys_io        ; display AL
15507  66B0 E5            pop b
15508  66B1 E4            pop a
15509  66B2 09            ret
15510  66B3             _itoa_printx32:
15511  66B3 DA            push d
15512  66B4 D8            push b
15513  66B5 A7 00         mov bh, 0
15514  66B7 FD A4 04      shr bl, 4  
15515  66BA 74            mov d, b
15516  66BB 1F CD 66      mov al, [d + s_hex_digits_printx32]
15517  66BE 23            mov ah, al
15518  66BF E5            pop b
15519  66C0 D8            push b
15520  66C1 A7 00         mov bh, 0
15521  66C3 FD 87 0F      and bl, $0F
15522  66C6 74            mov d, b
15523  66C7 1F CD 66      mov al, [d + s_hex_digits_printx32]
15524  66CA E5            pop b
15525  66CB E7            pop d
15526  66CC 09            ret
15527  66CD 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
15527  66D1 34 35 36 37 
15527  66D5 38 39 41 42 
15527  66D9 43 44 45 46 
15528  66DD             ; --- END INLINE ASM SEGMENT
15529  66DD F9            leave
15530  66DE 09            ret
15531  66DF             
15532  66DF             err:
15533  66DF F8 00 00      enter 0 ; (push bp; mov bp, sp)
15534  66E2             ; print(e); 
15535  66E2             ; --- START FUNCTION CALL
15536  66E2 FA 05 00      lea d, [bp + 5] ; $e
15537  66E5 2A            mov b, [d]
15538  66E6 38 00 00      mov c, 0
15539  66E9 FD AB         swp b
15540  66EB D8            push b
15541  66EC 07 F4 66      call print
15542  66EF 51 02 00      add sp, 2
15543  66F2             ; --- END FUNCTION CALL
15544  66F2 F9            leave
15545  66F3 09            ret
15546  66F4             
15547  66F4             print:
15548  66F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15549  66F7             ; --- BEGIN INLINE ASM SEGMENT
15550  66F7 FA 05 00      lea d, [bp + 5] ; $s
15551  66FA FD 2A         mov d, [d]
15552  66FC             _puts_L1_print:
15553  66FC 1E            mov al, [d]
15554  66FD B9 00         cmp al, 0
15555  66FF C6 0B 67      jz _puts_END_print
15556  6702 23            mov ah, al
15557  6703 19 00         mov al, 0
15558  6705 05 03         syscall sys_io
15559  6707 79            inc d
15560  6708 0A FC 66      jmp _puts_L1_print
15561  670B             _puts_END_print:
15562  670B             ; --- END INLINE ASM SEGMENT
15563  670B F9            leave
15564  670C 09            ret
15565  670D             
15566  670D             print_signed:
15567  670D F8 00 00      enter 0 ; (push bp; mov bp, sp)
15568  6710             ; char digits[5]; 
15569  6710 52 05 00      sub sp, 5
15570  6713             ; int i = 0; 
15571  6713 52 02 00      sub sp, 2
15572  6716             ; --- START LOCAL VAR INITIALIZATION
15573  6716 FA FA FF      lea d, [bp + -6] ; $i
15574  6719 DA            push d
15575  671A FD 2E 00 00   mov32 cb, $00000000
15575  671E 00 00 
15576  6720 E7            pop d
15577  6721 FD 43         mov [d], b
15578  6723             ; --- END LOCAL VAR INITIALIZATION
15579  6723             ; if (num < 0) { 
15580  6723             _if825_cond:
15581  6723 FA 05 00      lea d, [bp + 5] ; $num
15582  6726 2A            mov b, [d]
15583  6727 38 00 00      mov c, 0
15584  672A             ; --- START RELATIONAL
15585  672A D7            push a
15586  672B 11            mov a, b
15587  672C FD 2E 00 00   mov32 cb, $00000000
15587  6730 00 00 
15588  6732 B0            cmp a, b
15589  6733 FD 73         slt ; < (signed)
15590  6735 E4            pop a
15591  6736             ; --- END RELATIONAL
15592  6736 C0 00 00      cmp b, 0
15593  6739 C6 5C 67      je _if825_else
15594  673C             _if825_TRUE:
15595  673C             ; putchar('-'); 
15596  673C             ; --- START FUNCTION CALL
15597  673C FD 2E 2D 00   mov32 cb, $0000002d
15597  6740 00 00 
15598  6742 DD            push bl
15599  6743 07 33 65      call putchar
15600  6746 51 01 00      add sp, 1
15601  6749             ; --- END FUNCTION CALL
15602  6749             ; num = -num; 
15603  6749 FA 05 00      lea d, [bp + 5] ; $num
15604  674C DA            push d
15605  674D FA 05 00      lea d, [bp + 5] ; $num
15606  6750 2A            mov b, [d]
15607  6751 38 00 00      mov c, 0
15608  6754 FD 97         neg b
15609  6756 E7            pop d
15610  6757 FD 43         mov [d], b
15611  6759 0A 87 67      jmp _if825_exit
15612  675C             _if825_else:
15613  675C             ; if (num == 0) { 
15614  675C             _if826_cond:
15615  675C FA 05 00      lea d, [bp + 5] ; $num
15616  675F 2A            mov b, [d]
15617  6760 38 00 00      mov c, 0
15618  6763             ; --- START RELATIONAL
15619  6763 D7            push a
15620  6764 11            mov a, b
15621  6765 FD 2E 00 00   mov32 cb, $00000000
15621  6769 00 00 
15622  676B B0            cmp a, b
15623  676C FD 71         seq ; ==
15624  676E E4            pop a
15625  676F             ; --- END RELATIONAL
15626  676F C0 00 00      cmp b, 0
15627  6772 C6 87 67      je _if826_exit
15628  6775             _if826_TRUE:
15629  6775             ; putchar('0'); 
15630  6775             ; --- START FUNCTION CALL
15631  6775 FD 2E 30 00   mov32 cb, $00000030
15631  6779 00 00 
15632  677B DD            push bl
15633  677C 07 33 65      call putchar
15634  677F 51 01 00      add sp, 1
15635  6782             ; --- END FUNCTION CALL
15636  6782             ; return; 
15637  6782 F9            leave
15638  6783 09            ret
15639  6784 0A 87 67      jmp _if826_exit
15640  6787             _if826_exit:
15641  6787             _if825_exit:
15642  6787             ; while (num > 0) { 
15643  6787             _while827_cond:
15644  6787 FA 05 00      lea d, [bp + 5] ; $num
15645  678A 2A            mov b, [d]
15646  678B 38 00 00      mov c, 0
15647  678E             ; --- START RELATIONAL
15648  678E D7            push a
15649  678F 11            mov a, b
15650  6790 FD 2E 00 00   mov32 cb, $00000000
15650  6794 00 00 
15651  6796 B0            cmp a, b
15652  6797 FD 7F         sgt ; >
15653  6799 E4            pop a
15654  679A             ; --- END RELATIONAL
15655  679A C0 00 00      cmp b, 0
15656  679D C6 14 68      je _while827_exit
15657  67A0             _while827_block:
15658  67A0             ; digits[i] = '0' + (num % 10); 
15659  67A0 FA FC FF      lea d, [bp + -4] ; $digits
15660  67A3 D7            push a
15661  67A4 DA            push d
15662  67A5 FA FA FF      lea d, [bp + -6] ; $i
15663  67A8 2A            mov b, [d]
15664  67A9 38 00 00      mov c, 0
15665  67AC E7            pop d
15666  67AD 5A            add d, b
15667  67AE E4            pop a
15668  67AF DA            push d
15669  67B0 FD 2E 30 00   mov32 cb, $00000030
15669  67B4 00 00 
15670  67B6             ; --- START TERMS
15671  67B6 D7            push a
15672  67B7 11            mov a, b
15673  67B8 FA 05 00      lea d, [bp + 5] ; $num
15674  67BB 2A            mov b, [d]
15675  67BC 38 00 00      mov c, 0
15676  67BF             ; --- START FACTORS
15677  67BF D7            push a
15678  67C0 FD D8         push g
15679  67C2 11            mov a, b
15680  67C3 FD 7A         mov g, c
15681  67C5 FD 2E 0A 00   mov32 cb, $0000000a
15681  67C9 00 00 
15682  67CB FD D8         push g ; save 'g' as the div instruction uses it
15683  67CD AE            div a, b ; %, a: quotient, b: remainder
15684  67CE 11            mov a, b
15685  67CF FD F1         pop g
15686  67D1 FD 38         mov c, g
15687  67D3 27            mov b, a
15688  67D4 FD F1         pop g
15689  67D6 E4            pop a
15690  67D7             ; --- END FACTORS
15691  67D7 56            add b, a
15692  67D8 E4            pop a
15693  67D9             ; --- END TERMS
15694  67D9 E7            pop d
15695  67DA FD 3E         mov [d], bl
15696  67DC             ; num = num / 10; 
15697  67DC FA 05 00      lea d, [bp + 5] ; $num
15698  67DF DA            push d
15699  67E0 FA 05 00      lea d, [bp + 5] ; $num
15700  67E3 2A            mov b, [d]
15701  67E4 38 00 00      mov c, 0
15702  67E7             ; --- START FACTORS
15703  67E7 D7            push a
15704  67E8 FD D8         push g
15705  67EA 11            mov a, b
15706  67EB FD 7A         mov g, c
15707  67ED FD 2E 0A 00   mov32 cb, $0000000a
15707  67F1 00 00 
15708  67F3 FD D8         push g ; save 'g' as the div instruction uses it
15709  67F5 AE            div a, b ; /, a: quotient, b: remainder
15710  67F6 FD F1         pop g
15711  67F8 FD 38         mov c, g
15712  67FA 27            mov b, a
15713  67FB FD F1         pop g
15714  67FD E4            pop a
15715  67FE             ; --- END FACTORS
15716  67FE E7            pop d
15717  67FF FD 43         mov [d], b
15718  6801             ; i++; 
15719  6801 FA FA FF      lea d, [bp + -6] ; $i
15720  6804 2A            mov b, [d]
15721  6805 38 00 00      mov c, 0
15722  6808 11            mov a, b
15723  6809 FD 77         inc b
15724  680B FA FA FF      lea d, [bp + -6] ; $i
15725  680E FD 43         mov [d], b
15726  6810 27            mov b, a
15727  6811 0A 87 67      jmp _while827_cond
15728  6814             _while827_exit:
15729  6814             ; while (i > 0) { 
15730  6814             _while834_cond:
15731  6814 FA FA FF      lea d, [bp + -6] ; $i
15732  6817 2A            mov b, [d]
15733  6818 38 00 00      mov c, 0
15734  681B             ; --- START RELATIONAL
15735  681B D7            push a
15736  681C 11            mov a, b
15737  681D FD 2E 00 00   mov32 cb, $00000000
15737  6821 00 00 
15738  6823 B0            cmp a, b
15739  6824 FD 7F         sgt ; >
15740  6826 E4            pop a
15741  6827             ; --- END RELATIONAL
15742  6827 C0 00 00      cmp b, 0
15743  682A C6 5C 68      je _while834_exit
15744  682D             _while834_block:
15745  682D             ; i--; 
15746  682D FA FA FF      lea d, [bp + -6] ; $i
15747  6830 2A            mov b, [d]
15748  6831 38 00 00      mov c, 0
15749  6834 11            mov a, b
15750  6835 FD 7D         dec b
15751  6837 FA FA FF      lea d, [bp + -6] ; $i
15752  683A FD 43         mov [d], b
15753  683C 27            mov b, a
15754  683D             ; putchar(digits[i]); 
15755  683D             ; --- START FUNCTION CALL
15756  683D FA FC FF      lea d, [bp + -4] ; $digits
15757  6840 D7            push a
15758  6841 DA            push d
15759  6842 FA FA FF      lea d, [bp + -6] ; $i
15760  6845 2A            mov b, [d]
15761  6846 38 00 00      mov c, 0
15762  6849 E7            pop d
15763  684A 5A            add d, b
15764  684B E4            pop a
15765  684C 32            mov bl, [d]
15766  684D A7 00         mov bh, 0
15767  684F 38 00 00      mov c, 0
15768  6852 DD            push bl
15769  6853 07 33 65      call putchar
15770  6856 51 01 00      add sp, 1
15771  6859             ; --- END FUNCTION CALL
15772  6859 0A 14 68      jmp _while834_cond
15773  685C             _while834_exit:
15774  685C F9            leave
15775  685D 09            ret
15776  685E             
15777  685E             print_unsigned:
15778  685E F8 00 00      enter 0 ; (push bp; mov bp, sp)
15779  6861             ; char digits[5]; 
15780  6861 52 05 00      sub sp, 5
15781  6864             ; int i; 
15782  6864 52 02 00      sub sp, 2
15783  6867             ; i = 0; 
15784  6867 FA FA FF      lea d, [bp + -6] ; $i
15785  686A DA            push d
15786  686B FD 2E 00 00   mov32 cb, $00000000
15786  686F 00 00 
15787  6871 E7            pop d
15788  6872 FD 43         mov [d], b
15789  6874             ; if(num == 0){ 
15790  6874             _if835_cond:
15791  6874 FA 05 00      lea d, [bp + 5] ; $num
15792  6877 2A            mov b, [d]
15793  6878 38 00 00      mov c, 0
15794  687B             ; --- START RELATIONAL
15795  687B D7            push a
15796  687C 11            mov a, b
15797  687D FD 2E 00 00   mov32 cb, $00000000
15797  6881 00 00 
15798  6883 B0            cmp a, b
15799  6884 FD 71         seq ; ==
15800  6886 E4            pop a
15801  6887             ; --- END RELATIONAL
15802  6887 C0 00 00      cmp b, 0
15803  688A C6 9F 68      je _if835_exit
15804  688D             _if835_TRUE:
15805  688D             ; putchar('0'); 
15806  688D             ; --- START FUNCTION CALL
15807  688D FD 2E 30 00   mov32 cb, $00000030
15807  6891 00 00 
15808  6893 DD            push bl
15809  6894 07 33 65      call putchar
15810  6897 51 01 00      add sp, 1
15811  689A             ; --- END FUNCTION CALL
15812  689A             ; return; 
15813  689A F9            leave
15814  689B 09            ret
15815  689C 0A 9F 68      jmp _if835_exit
15816  689F             _if835_exit:
15817  689F             ; while (num > 0) { 
15818  689F             _while836_cond:
15819  689F FA 05 00      lea d, [bp + 5] ; $num
15820  68A2 2A            mov b, [d]
15821  68A3 38 00 00      mov c, 0
15822  68A6             ; --- START RELATIONAL
15823  68A6 D7            push a
15824  68A7 11            mov a, b
15825  68A8 FD 2E 00 00   mov32 cb, $00000000
15825  68AC 00 00 
15826  68AE B0            cmp a, b
15827  68AF FD 81         sgu ; > (unsigned)
15828  68B1 E4            pop a
15829  68B2             ; --- END RELATIONAL
15830  68B2 C0 00 00      cmp b, 0
15831  68B5 C6 2C 69      je _while836_exit
15832  68B8             _while836_block:
15833  68B8             ; digits[i] = '0' + (num % 10); 
15834  68B8 FA FC FF      lea d, [bp + -4] ; $digits
15835  68BB D7            push a
15836  68BC DA            push d
15837  68BD FA FA FF      lea d, [bp + -6] ; $i
15838  68C0 2A            mov b, [d]
15839  68C1 38 00 00      mov c, 0
15840  68C4 E7            pop d
15841  68C5 5A            add d, b
15842  68C6 E4            pop a
15843  68C7 DA            push d
15844  68C8 FD 2E 30 00   mov32 cb, $00000030
15844  68CC 00 00 
15845  68CE             ; --- START TERMS
15846  68CE D7            push a
15847  68CF 11            mov a, b
15848  68D0 FA 05 00      lea d, [bp + 5] ; $num
15849  68D3 2A            mov b, [d]
15850  68D4 38 00 00      mov c, 0
15851  68D7             ; --- START FACTORS
15852  68D7 D7            push a
15853  68D8 FD D8         push g
15854  68DA 11            mov a, b
15855  68DB FD 7A         mov g, c
15856  68DD FD 2E 0A 00   mov32 cb, $0000000a
15856  68E1 00 00 
15857  68E3 FD D8         push g ; save 'g' as the div instruction uses it
15858  68E5 AE            div a, b ; %, a: quotient, b: remainder
15859  68E6 11            mov a, b
15860  68E7 FD F1         pop g
15861  68E9 FD 38         mov c, g
15862  68EB 27            mov b, a
15863  68EC FD F1         pop g
15864  68EE E4            pop a
15865  68EF             ; --- END FACTORS
15866  68EF 56            add b, a
15867  68F0 E4            pop a
15868  68F1             ; --- END TERMS
15869  68F1 E7            pop d
15870  68F2 FD 3E         mov [d], bl
15871  68F4             ; num = num / 10; 
15872  68F4 FA 05 00      lea d, [bp + 5] ; $num
15873  68F7 DA            push d
15874  68F8 FA 05 00      lea d, [bp + 5] ; $num
15875  68FB 2A            mov b, [d]
15876  68FC 38 00 00      mov c, 0
15877  68FF             ; --- START FACTORS
15878  68FF D7            push a
15879  6900 FD D8         push g
15880  6902 11            mov a, b
15881  6903 FD 7A         mov g, c
15882  6905 FD 2E 0A 00   mov32 cb, $0000000a
15882  6909 00 00 
15883  690B FD D8         push g ; save 'g' as the div instruction uses it
15884  690D AE            div a, b ; /, a: quotient, b: remainder
15885  690E FD F1         pop g
15886  6910 FD 38         mov c, g
15887  6912 27            mov b, a
15888  6913 FD F1         pop g
15889  6915 E4            pop a
15890  6916             ; --- END FACTORS
15891  6916 E7            pop d
15892  6917 FD 43         mov [d], b
15893  6919             ; i++; 
15894  6919 FA FA FF      lea d, [bp + -6] ; $i
15895  691C 2A            mov b, [d]
15896  691D 38 00 00      mov c, 0
15897  6920 11            mov a, b
15898  6921 FD 77         inc b
15899  6923 FA FA FF      lea d, [bp + -6] ; $i
15900  6926 FD 43         mov [d], b
15901  6928 27            mov b, a
15902  6929 0A 9F 68      jmp _while836_cond
15903  692C             _while836_exit:
15904  692C             ; while (i > 0) { 
15905  692C             _while843_cond:
15906  692C FA FA FF      lea d, [bp + -6] ; $i
15907  692F 2A            mov b, [d]
15908  6930 38 00 00      mov c, 0
15909  6933             ; --- START RELATIONAL
15910  6933 D7            push a
15911  6934 11            mov a, b
15912  6935 FD 2E 00 00   mov32 cb, $00000000
15912  6939 00 00 
15913  693B B0            cmp a, b
15914  693C FD 7F         sgt ; >
15915  693E E4            pop a
15916  693F             ; --- END RELATIONAL
15917  693F C0 00 00      cmp b, 0
15918  6942 C6 74 69      je _while843_exit
15919  6945             _while843_block:
15920  6945             ; i--; 
15921  6945 FA FA FF      lea d, [bp + -6] ; $i
15922  6948 2A            mov b, [d]
15923  6949 38 00 00      mov c, 0
15924  694C 11            mov a, b
15925  694D FD 7D         dec b
15926  694F FA FA FF      lea d, [bp + -6] ; $i
15927  6952 FD 43         mov [d], b
15928  6954 27            mov b, a
15929  6955             ; putchar(digits[i]); 
15930  6955             ; --- START FUNCTION CALL
15931  6955 FA FC FF      lea d, [bp + -4] ; $digits
15932  6958 D7            push a
15933  6959 DA            push d
15934  695A FA FA FF      lea d, [bp + -6] ; $i
15935  695D 2A            mov b, [d]
15936  695E 38 00 00      mov c, 0
15937  6961 E7            pop d
15938  6962 5A            add d, b
15939  6963 E4            pop a
15940  6964 32            mov bl, [d]
15941  6965 A7 00         mov bh, 0
15942  6967 38 00 00      mov c, 0
15943  696A DD            push bl
15944  696B 07 33 65      call putchar
15945  696E 51 01 00      add sp, 1
15946  6971             ; --- END FUNCTION CALL
15947  6971 0A 2C 69      jmp _while843_cond
15948  6974             _while843_exit:
15949  6974 F9            leave
15950  6975 09            ret
15951  6976             
15952  6976             printx16:
15953  6976 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15954  6979             ; --- BEGIN INLINE ASM SEGMENT
15955  6979 FA 05 00      lea d, [bp + 5] ; $hex
15956  697C 2A            mov b, [d]
15957  697D             print_u16x_printx16:
15958  697D DD            push bl
15959  697E 30            mov bl, bh
15960  697F 07 9C 69      call _itoa_printx16        ; convert bh to char in A
15961  6982 2F            mov bl, al        ; save al
15962  6983 19 00         mov al, 0
15963  6985 05 03         syscall sys_io        ; display AH
15964  6987 24            mov ah, bl        ; retrieve al
15965  6988 19 00         mov al, 0
15966  698A 05 03         syscall sys_io        ; display AL
15967  698C EA            pop bl
15968  698D 07 9C 69      call _itoa_printx16        ; convert bh to char in A
15969  6990 2F            mov bl, al        ; save al
15970  6991 19 00         mov al, 0
15971  6993 05 03         syscall sys_io        ; display AH
15972  6995 24            mov ah, bl        ; retrieve al
15973  6996 19 00         mov al, 0
15974  6998 05 03         syscall sys_io        ; display AL
15975  699A             ; --- END INLINE ASM SEGMENT
15976  699A             ; return; 
15977  699A F9            leave
15978  699B 09            ret
15979  699C             ; --- BEGIN INLINE ASM SEGMENT
15980  699C             _itoa_printx16:
15981  699C DA            push d
15982  699D D8            push b
15983  699E A7 00         mov bh, 0
15984  69A0 FD A4 04      shr bl, 4  
15985  69A3 74            mov d, b
15986  69A4 1F B6 69      mov al, [d + s_hex_digits_printx16]
15987  69A7 23            mov ah, al
15988  69A8 E5            pop b
15989  69A9 D8            push b
15990  69AA A7 00         mov bh, 0
15991  69AC FD 87 0F      and bl, $0F
15992  69AF 74            mov d, b
15993  69B0 1F B6 69      mov al, [d + s_hex_digits_printx16]
15994  69B3 E5            pop b
15995  69B4 E7            pop d
15996  69B5 09            ret
15997  69B6 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
15997  69BA 34 35 36 37 
15997  69BE 38 39 41 42 
15997  69C2 43 44 45 46 
15998  69C6             ; --- END INLINE ASM SEGMENT
15999  69C6 F9            leave
16000  69C7 09            ret
16001  69C8             
16002  69C8             puts:
16003  69C8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
16004  69CB             ; --- BEGIN INLINE ASM SEGMENT
16005  69CB FA 05 00      lea d, [bp + 5] ; $s
16006  69CE FD 2A         mov d, [d]
16007  69D0             _puts_L1_puts:
16008  69D0 1E            mov al, [d]
16009  69D1 B9 00         cmp al, 0
16010  69D3 C6 DF 69      jz _puts_END_puts
16011  69D6 23            mov ah, al
16012  69D7 19 00         mov al, 0
16013  69D9 05 03         syscall sys_io
16014  69DB 79            inc d
16015  69DC 0A D0 69      jmp _puts_L1_puts
16016  69DF             _puts_END_puts:
16017  69DF 10 00 0A      mov a, $0A00
16018  69E2 05 03         syscall sys_io
16019  69E4             ; --- END INLINE ASM SEGMENT
16020  69E4 F9            leave
16021  69E5 09            ret
16022  69E6             
16023  69E6             memset:
16024  69E6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
16025  69E9             ; int i; 
16026  69E9 52 02 00      sub sp, 2
16027  69EC             ; for(i = 0; i < size; i++){ 
16028  69EC             _for844_init:
16029  69EC FA FF FF      lea d, [bp + -1] ; $i
16030  69EF DA            push d
16031  69F0 FD 2E 00 00   mov32 cb, $00000000
16031  69F4 00 00 
16032  69F6 E7            pop d
16033  69F7 FD 43         mov [d], b
16034  69F9             _for844_cond:
16035  69F9 FA FF FF      lea d, [bp + -1] ; $i
16036  69FC 2A            mov b, [d]
16037  69FD 38 00 00      mov c, 0
16038  6A00             ; --- START RELATIONAL
16039  6A00 D7            push a
16040  6A01 11            mov a, b
16041  6A02 FA 08 00      lea d, [bp + 8] ; $size
16042  6A05 2A            mov b, [d]
16043  6A06 38 00 00      mov c, 0
16044  6A09 B0            cmp a, b
16045  6A0A FD 73         slt ; < (signed)
16046  6A0C E4            pop a
16047  6A0D             ; --- END RELATIONAL
16048  6A0D C0 00 00      cmp b, 0
16049  6A10 C6 45 6A      je _for844_exit
16050  6A13             _for844_block:
16051  6A13             ; *(s+i) = c; 
16052  6A13 FA 05 00      lea d, [bp + 5] ; $s
16053  6A16 2A            mov b, [d]
16054  6A17 38 00 00      mov c, 0
16055  6A1A             ; --- START TERMS
16056  6A1A D7            push a
16057  6A1B 11            mov a, b
16058  6A1C FA FF FF      lea d, [bp + -1] ; $i
16059  6A1F 2A            mov b, [d]
16060  6A20 38 00 00      mov c, 0
16061  6A23 56            add b, a
16062  6A24 E4            pop a
16063  6A25             ; --- END TERMS
16064  6A25 D8            push b
16065  6A26 FA 07 00      lea d, [bp + 7] ; $c
16066  6A29 32            mov bl, [d]
16067  6A2A A7 00         mov bh, 0
16068  6A2C 38 00 00      mov c, 0
16069  6A2F E7            pop d
16070  6A30 FD 3E         mov [d], bl
16071  6A32             _for844_update:
16072  6A32 FA FF FF      lea d, [bp + -1] ; $i
16073  6A35 2A            mov b, [d]
16074  6A36 38 00 00      mov c, 0
16075  6A39 11            mov a, b
16076  6A3A FD 77         inc b
16077  6A3C FA FF FF      lea d, [bp + -1] ; $i
16078  6A3F FD 43         mov [d], b
16079  6A41 27            mov b, a
16080  6A42 0A F9 69      jmp _for844_cond
16081  6A45             _for844_exit:
16082  6A45             ; return s; 
16083  6A45 FA 05 00      lea d, [bp + 5] ; $s
16084  6A48 2A            mov b, [d]
16085  6A49 38 00 00      mov c, 0
16086  6A4C F9            leave
16087  6A4D 09            ret
16088  6A4E             
16089  6A4E             strncmp:
16090  6A4E F8 00 00      enter 0 ; (push bp; mov bp, sp)
16091  6A51             ; int i; 
16092  6A51 52 02 00      sub sp, 2
16093  6A54             ; for (i = 0; i < n; i++) { 
16094  6A54             _for845_init:
16095  6A54 FA FF FF      lea d, [bp + -1] ; $i
16096  6A57 DA            push d
16097  6A58 FD 2E 00 00   mov32 cb, $00000000
16097  6A5C 00 00 
16098  6A5E E7            pop d
16099  6A5F FD 43         mov [d], b
16100  6A61             _for845_cond:
16101  6A61 FA FF FF      lea d, [bp + -1] ; $i
16102  6A64 2A            mov b, [d]
16103  6A65 38 00 00      mov c, 0
16104  6A68             ; --- START RELATIONAL
16105  6A68 D7            push a
16106  6A69 11            mov a, b
16107  6A6A FA 09 00      lea d, [bp + 9] ; $n
16108  6A6D 2A            mov b, [d]
16109  6A6E 38 00 00      mov c, 0
16110  6A71 B0            cmp a, b
16111  6A72 FD 73         slt ; < (signed)
16112  6A74 E4            pop a
16113  6A75             ; --- END RELATIONAL
16114  6A75 C0 00 00      cmp b, 0
16115  6A78 C6 6D 6B      je _for845_exit
16116  6A7B             _for845_block:
16117  6A7B             ; if (str1[i] != str2[i]) { 
16118  6A7B             _if846_cond:
16119  6A7B FA 05 00      lea d, [bp + 5] ; $str1
16120  6A7E FD 2A         mov d, [d]
16121  6A80 D7            push a
16122  6A81 DA            push d
16123  6A82 FA FF FF      lea d, [bp + -1] ; $i
16124  6A85 2A            mov b, [d]
16125  6A86 38 00 00      mov c, 0
16126  6A89 E7            pop d
16127  6A8A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
16128  6A8E E4            pop a
16129  6A8F 32            mov bl, [d]
16130  6A90 A7 00         mov bh, 0
16131  6A92 38 00 00      mov c, 0
16132  6A95             ; --- START RELATIONAL
16133  6A95 D7            push a
16134  6A96 11            mov a, b
16135  6A97 FA 07 00      lea d, [bp + 7] ; $str2
16136  6A9A FD 2A         mov d, [d]
16137  6A9C D7            push a
16138  6A9D DA            push d
16139  6A9E FA FF FF      lea d, [bp + -1] ; $i
16140  6AA1 2A            mov b, [d]
16141  6AA2 38 00 00      mov c, 0
16142  6AA5 E7            pop d
16143  6AA6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
16144  6AAA E4            pop a
16145  6AAB 32            mov bl, [d]
16146  6AAC A7 00         mov bh, 0
16147  6AAE 38 00 00      mov c, 0
16148  6AB1 B0            cmp a, b
16149  6AB2 FD 72         sneq ; !=
16150  6AB4 E4            pop a
16151  6AB5             ; --- END RELATIONAL
16152  6AB5 C0 00 00      cmp b, 0
16153  6AB8 C6 FD 6A      je _if846_exit
16154  6ABB             _if846_TRUE:
16155  6ABB             ; return (unsigned char)str1[i] - (unsigned char)str2[i]; 
16156  6ABB FA 05 00      lea d, [bp + 5] ; $str1
16157  6ABE FD 2A         mov d, [d]
16158  6AC0 D7            push a
16159  6AC1 DA            push d
16160  6AC2 FA FF FF      lea d, [bp + -1] ; $i
16161  6AC5 2A            mov b, [d]
16162  6AC6 38 00 00      mov c, 0
16163  6AC9 E7            pop d
16164  6ACA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
16165  6ACE E4            pop a
16166  6ACF 32            mov bl, [d]
16167  6AD0 A7 00         mov bh, 0
16168  6AD2 38 00 00      mov c, 0
16169  6AD5 A7 00         mov bh, 0
16170  6AD7             ; --- START TERMS
16171  6AD7 D7            push a
16172  6AD8 11            mov a, b
16173  6AD9 FA 07 00      lea d, [bp + 7] ; $str2
16174  6ADC FD 2A         mov d, [d]
16175  6ADE D7            push a
16176  6ADF DA            push d
16177  6AE0 FA FF FF      lea d, [bp + -1] ; $i
16178  6AE3 2A            mov b, [d]
16179  6AE4 38 00 00      mov c, 0
16180  6AE7 E7            pop d
16181  6AE8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
16182  6AEC E4            pop a
16183  6AED 32            mov bl, [d]
16184  6AEE A7 00         mov bh, 0
16185  6AF0 38 00 00      mov c, 0
16186  6AF3 A7 00         mov bh, 0
16187  6AF5 60            sub a, b
16188  6AF6 27            mov b, a
16189  6AF7 E4            pop a
16190  6AF8             ; --- END TERMS
16191  6AF8 F9            leave
16192  6AF9 09            ret
16193  6AFA 0A FD 6A      jmp _if846_exit
16194  6AFD             _if846_exit:
16195  6AFD             ; if (str1[i] == '\0' || str2[i] == '\0') { 
16196  6AFD             _if847_cond:
16197  6AFD FA 05 00      lea d, [bp + 5] ; $str1
16198  6B00 FD 2A         mov d, [d]
16199  6B02 D7            push a
16200  6B03 DA            push d
16201  6B04 FA FF FF      lea d, [bp + -1] ; $i
16202  6B07 2A            mov b, [d]
16203  6B08 38 00 00      mov c, 0
16204  6B0B E7            pop d
16205  6B0C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
16206  6B10 E4            pop a
16207  6B11 32            mov bl, [d]
16208  6B12 A7 00         mov bh, 0
16209  6B14 38 00 00      mov c, 0
16210  6B17             ; --- START RELATIONAL
16211  6B17 D7            push a
16212  6B18 11            mov a, b
16213  6B19 FD 2E 00 00   mov32 cb, $00000000
16213  6B1D 00 00 
16214  6B1F B0            cmp a, b
16215  6B20 FD 71         seq ; ==
16216  6B22 E4            pop a
16217  6B23             ; --- END RELATIONAL
16218  6B23             ; --- START LOGICAL OR
16219  6B23 D7            push a
16220  6B24 11            mov a, b
16221  6B25 FA 07 00      lea d, [bp + 7] ; $str2
16222  6B28 FD 2A         mov d, [d]
16223  6B2A D7            push a
16224  6B2B DA            push d
16225  6B2C FA FF FF      lea d, [bp + -1] ; $i
16226  6B2F 2A            mov b, [d]
16227  6B30 38 00 00      mov c, 0
16228  6B33 E7            pop d
16229  6B34 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
16230  6B38 E4            pop a
16231  6B39 32            mov bl, [d]
16232  6B3A A7 00         mov bh, 0
16233  6B3C 38 00 00      mov c, 0
16234  6B3F             ; --- START RELATIONAL
16235  6B3F D7            push a
16236  6B40 11            mov a, b
16237  6B41 FD 2E 00 00   mov32 cb, $00000000
16237  6B45 00 00 
16238  6B47 B0            cmp a, b
16239  6B48 FD 71         seq ; ==
16240  6B4A E4            pop a
16241  6B4B             ; --- END RELATIONAL
16242  6B4B FD A8         sor a, b ; ||
16243  6B4D E4            pop a
16244  6B4E             ; --- END LOGICAL OR
16245  6B4E C0 00 00      cmp b, 0
16246  6B51 C6 5A 6B      je _if847_exit
16247  6B54             _if847_TRUE:
16248  6B54             ; break; 
16249  6B54 0A 6D 6B      jmp _for845_exit ; for break
16250  6B57 0A 5A 6B      jmp _if847_exit
16251  6B5A             _if847_exit:
16252  6B5A             _for845_update:
16253  6B5A FA FF FF      lea d, [bp + -1] ; $i
16254  6B5D 2A            mov b, [d]
16255  6B5E 38 00 00      mov c, 0
16256  6B61 11            mov a, b
16257  6B62 FD 77         inc b
16258  6B64 FA FF FF      lea d, [bp + -1] ; $i
16259  6B67 FD 43         mov [d], b
16260  6B69 27            mov b, a
16261  6B6A 0A 61 6A      jmp _for845_cond
16262  6B6D             _for845_exit:
16263  6B6D             ; return 0; 
16264  6B6D FD 2E 00 00   mov32 cb, $00000000
16264  6B71 00 00 
16265  6B73 F9            leave
16266  6B74 09            ret
16267  6B75             
16268  6B75             is_digit:
16269  6B75 F8 00 00      enter 0 ; (push bp; mov bp, sp)
16270  6B78             ; return c >= '0' && c <= '9'; 
16271  6B78 FA 05 00      lea d, [bp + 5] ; $c
16272  6B7B 32            mov bl, [d]
16273  6B7C A7 00         mov bh, 0
16274  6B7E 38 00 00      mov c, 0
16275  6B81             ; --- START RELATIONAL
16276  6B81 D7            push a
16277  6B82 11            mov a, b
16278  6B83 FD 2E 30 00   mov32 cb, $00000030
16278  6B87 00 00 
16279  6B89 B0            cmp a, b
16280  6B8A FD 80         sge ; >=
16281  6B8C E4            pop a
16282  6B8D             ; --- END RELATIONAL
16283  6B8D             ; --- START LOGICAL AND
16284  6B8D D7            push a
16285  6B8E 11            mov a, b
16286  6B8F FA 05 00      lea d, [bp + 5] ; $c
16287  6B92 32            mov bl, [d]
16288  6B93 A7 00         mov bh, 0
16289  6B95 38 00 00      mov c, 0
16290  6B98             ; --- START RELATIONAL
16291  6B98 D7            push a
16292  6B99 11            mov a, b
16293  6B9A FD 2E 39 00   mov32 cb, $00000039
16293  6B9E 00 00 
16294  6BA0 B0            cmp a, b
16295  6BA1 FD 74         sle ; <= (signed)
16296  6BA3 E4            pop a
16297  6BA4             ; --- END RELATIONAL
16298  6BA4 FD A7         sand a, b
16299  6BA6 E4            pop a
16300  6BA7             ; --- END LOGICAL AND
16301  6BA7 F9            leave
16302  6BA8 09            ret
16303  6BA9             
16304  6BA9             abs:
16305  6BA9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
16306  6BAC             ; return i < 0 ? -i : i; 
16307  6BAC             _ternary848_cond:
16308  6BAC FA 05 00      lea d, [bp + 5] ; $i
16309  6BAF 2A            mov b, [d]
16310  6BB0 38 00 00      mov c, 0
16311  6BB3             ; --- START RELATIONAL
16312  6BB3 D7            push a
16313  6BB4 11            mov a, b
16314  6BB5 FD 2E 00 00   mov32 cb, $00000000
16314  6BB9 00 00 
16315  6BBB B0            cmp a, b
16316  6BBC FD 73         slt ; < (signed)
16317  6BBE E4            pop a
16318  6BBF             ; --- END RELATIONAL
16319  6BBF C0 00 00      cmp b, 0
16320  6BC2 C6 D1 6B      je _ternary848_FALSE
16321  6BC5             _ternary848_TRUE:
16322  6BC5 FA 05 00      lea d, [bp + 5] ; $i
16323  6BC8 2A            mov b, [d]
16324  6BC9 38 00 00      mov c, 0
16325  6BCC FD 97         neg b
16326  6BCE 0A D8 6B      jmp _ternary848_exit
16327  6BD1             _ternary848_FALSE:
16328  6BD1 FA 05 00      lea d, [bp + 5] ; $i
16329  6BD4 2A            mov b, [d]
16330  6BD5 38 00 00      mov c, 0
16331  6BD8             _ternary848_exit:
16332  6BD8 F9            leave
16333  6BD9 09            ret
16334  6BDA             
16335  6BDA             atoi:
16336  6BDA F8 00 00      enter 0 ; (push bp; mov bp, sp)
16337  6BDD             ; int result = 0;  // Initialize result 
16338  6BDD 52 02 00      sub sp, 2
16339  6BE0             ; --- START LOCAL VAR INITIALIZATION
16340  6BE0 FA FF FF      lea d, [bp + -1] ; $result
16341  6BE3 DA            push d
16342  6BE4 FD 2E 00 00   mov32 cb, $00000000
16342  6BE8 00 00 
16343  6BEA E7            pop d
16344  6BEB FD 43         mov [d], b
16345  6BED             ; --- END LOCAL VAR INITIALIZATION
16346  6BED             ; int sign = 1;    // Initialize sign as positive 
16347  6BED 52 02 00      sub sp, 2
16348  6BF0             ; --- START LOCAL VAR INITIALIZATION
16349  6BF0 FA FD FF      lea d, [bp + -3] ; $sign
16350  6BF3 DA            push d
16351  6BF4 FD 2E 01 00   mov32 cb, $00000001
16351  6BF8 00 00 
16352  6BFA E7            pop d
16353  6BFB FD 43         mov [d], b
16354  6BFD             ; --- END LOCAL VAR INITIALIZATION
16355  6BFD             ; while (*str == ' ') str++; 
16356  6BFD             _while849_cond:
16357  6BFD FA 05 00      lea d, [bp + 5] ; $str
16358  6C00 2A            mov b, [d]
16359  6C01 38 00 00      mov c, 0
16360  6C04 74            mov d, b
16361  6C05 32            mov bl, [d]
16362  6C06 A7 00         mov bh, 0
16363  6C08 38 00 00      mov c, 0
16364  6C0B             ; --- START RELATIONAL
16365  6C0B D7            push a
16366  6C0C 11            mov a, b
16367  6C0D FD 2E 20 00   mov32 cb, $00000020
16367  6C11 00 00 
16368  6C13 B0            cmp a, b
16369  6C14 FD 71         seq ; ==
16370  6C16 E4            pop a
16371  6C17             ; --- END RELATIONAL
16372  6C17 C0 00 00      cmp b, 0
16373  6C1A C6 30 6C      je _while849_exit
16374  6C1D             _while849_block:
16375  6C1D             ; str++; 
16376  6C1D FA 05 00      lea d, [bp + 5] ; $str
16377  6C20 2A            mov b, [d]
16378  6C21 38 00 00      mov c, 0
16379  6C24 FD 77         inc b
16380  6C26 FA 05 00      lea d, [bp + 5] ; $str
16381  6C29 FD 43         mov [d], b
16382  6C2B FD 7D         dec b
16383  6C2D 0A FD 6B      jmp _while849_cond
16384  6C30             _while849_exit:
16385  6C30             ; if (*str == '-' || *str == '+') { 
16386  6C30             _if850_cond:
16387  6C30 FA 05 00      lea d, [bp + 5] ; $str
16388  6C33 2A            mov b, [d]
16389  6C34 38 00 00      mov c, 0
16390  6C37 74            mov d, b
16391  6C38 32            mov bl, [d]
16392  6C39 A7 00         mov bh, 0
16393  6C3B 38 00 00      mov c, 0
16394  6C3E             ; --- START RELATIONAL
16395  6C3E D7            push a
16396  6C3F 11            mov a, b
16397  6C40 FD 2E 2D 00   mov32 cb, $0000002d
16397  6C44 00 00 
16398  6C46 B0            cmp a, b
16399  6C47 FD 71         seq ; ==
16400  6C49 E4            pop a
16401  6C4A             ; --- END RELATIONAL
16402  6C4A             ; --- START LOGICAL OR
16403  6C4A D7            push a
16404  6C4B 11            mov a, b
16405  6C4C FA 05 00      lea d, [bp + 5] ; $str
16406  6C4F 2A            mov b, [d]
16407  6C50 38 00 00      mov c, 0
16408  6C53 74            mov d, b
16409  6C54 32            mov bl, [d]
16410  6C55 A7 00         mov bh, 0
16411  6C57 38 00 00      mov c, 0
16412  6C5A             ; --- START RELATIONAL
16413  6C5A D7            push a
16414  6C5B 11            mov a, b
16415  6C5C FD 2E 2B 00   mov32 cb, $0000002b
16415  6C60 00 00 
16416  6C62 B0            cmp a, b
16417  6C63 FD 71         seq ; ==
16418  6C65 E4            pop a
16419  6C66             ; --- END RELATIONAL
16420  6C66 FD A8         sor a, b ; ||
16421  6C68 E4            pop a
16422  6C69             ; --- END LOGICAL OR
16423  6C69 C0 00 00      cmp b, 0
16424  6C6C C6 B2 6C      je _if850_exit
16425  6C6F             _if850_TRUE:
16426  6C6F             ; if (*str == '-') sign = -1; 
16427  6C6F             _if851_cond:
16428  6C6F FA 05 00      lea d, [bp + 5] ; $str
16429  6C72 2A            mov b, [d]
16430  6C73 38 00 00      mov c, 0
16431  6C76 74            mov d, b
16432  6C77 32            mov bl, [d]
16433  6C78 A7 00         mov bh, 0
16434  6C7A 38 00 00      mov c, 0
16435  6C7D             ; --- START RELATIONAL
16436  6C7D D7            push a
16437  6C7E 11            mov a, b
16438  6C7F FD 2E 2D 00   mov32 cb, $0000002d
16438  6C83 00 00 
16439  6C85 B0            cmp a, b
16440  6C86 FD 71         seq ; ==
16441  6C88 E4            pop a
16442  6C89             ; --- END RELATIONAL
16443  6C89 C0 00 00      cmp b, 0
16444  6C8C C6 9F 6C      je _if851_exit
16445  6C8F             _if851_TRUE:
16446  6C8F             ; sign = -1; 
16447  6C8F FA FD FF      lea d, [bp + -3] ; $sign
16448  6C92 DA            push d
16449  6C93 FD 2E FF FF   mov32 cb, $ffffffff
16449  6C97 FF FF 
16450  6C99 E7            pop d
16451  6C9A FD 43         mov [d], b
16452  6C9C 0A 9F 6C      jmp _if851_exit
16453  6C9F             _if851_exit:
16454  6C9F             ; str++; 
16455  6C9F FA 05 00      lea d, [bp + 5] ; $str
16456  6CA2 2A            mov b, [d]
16457  6CA3 38 00 00      mov c, 0
16458  6CA6 FD 77         inc b
16459  6CA8 FA 05 00      lea d, [bp + 5] ; $str
16460  6CAB FD 43         mov [d], b
16461  6CAD FD 7D         dec b
16462  6CAF 0A B2 6C      jmp _if850_exit
16463  6CB2             _if850_exit:
16464  6CB2             ; while (*str >= '0' && *str <= '9') { 
16465  6CB2             _while852_cond:
16466  6CB2 FA 05 00      lea d, [bp + 5] ; $str
16467  6CB5 2A            mov b, [d]
16468  6CB6 38 00 00      mov c, 0
16469  6CB9 74            mov d, b
16470  6CBA 32            mov bl, [d]
16471  6CBB A7 00         mov bh, 0
16472  6CBD 38 00 00      mov c, 0
16473  6CC0             ; --- START RELATIONAL
16474  6CC0 D7            push a
16475  6CC1 11            mov a, b
16476  6CC2 FD 2E 30 00   mov32 cb, $00000030
16476  6CC6 00 00 
16477  6CC8 B0            cmp a, b
16478  6CC9 FD 82         sgeu ; >= (unsigned)
16479  6CCB E4            pop a
16480  6CCC             ; --- END RELATIONAL
16481  6CCC             ; --- START LOGICAL AND
16482  6CCC D7            push a
16483  6CCD 11            mov a, b
16484  6CCE FA 05 00      lea d, [bp + 5] ; $str
16485  6CD1 2A            mov b, [d]
16486  6CD2 38 00 00      mov c, 0
16487  6CD5 74            mov d, b
16488  6CD6 32            mov bl, [d]
16489  6CD7 A7 00         mov bh, 0
16490  6CD9 38 00 00      mov c, 0
16491  6CDC             ; --- START RELATIONAL
16492  6CDC D7            push a
16493  6CDD 11            mov a, b
16494  6CDE FD 2E 39 00   mov32 cb, $00000039
16494  6CE2 00 00 
16495  6CE4 B0            cmp a, b
16496  6CE5 FD 76         sleu ; <= (unsigned)
16497  6CE7 E4            pop a
16498  6CE8             ; --- END RELATIONAL
16499  6CE8 FD A7         sand a, b
16500  6CEA E4            pop a
16501  6CEB             ; --- END LOGICAL AND
16502  6CEB C0 00 00      cmp b, 0
16503  6CEE C6 7A 6D      je _while852_exit
16504  6CF1             _while852_block:
16505  6CF1             ; result = result * 10 + (*str - '0'); 
16506  6CF1 FA FF FF      lea d, [bp + -1] ; $result
16507  6CF4 DA            push d
16508  6CF5 FA FF FF      lea d, [bp + -1] ; $result
16509  6CF8 2A            mov b, [d]
16510  6CF9 38 00 00      mov c, 0
16511  6CFC             ; --- START FACTORS
16512  6CFC D7            push a
16513  6CFD FD D8         push g
16514  6CFF 11            mov a, b
16515  6D00 FD 7A         mov g, c
16516  6D02 FD 2E 0A 00   mov32 cb, $0000000a
16516  6D06 00 00 
16517  6D08 D7            push a     ; save left operand
16518  6D09 8E            xor a, b   ; xor sign bits
16519  6D0A FD AA         swp a      ; swap bytes
16520  6D0C 83            mov cl, al ; save result of xor into 'dl'
16521  6D0D E4            pop a      ; restore left side operator
16522  6D0E DF            push cl    ; save result of xor above
16523  6D0F FD AA         swp a  
16524  6D11 93 80         test al, $80  
16525  6D13 FD AA         swp a  
16526  6D15 C6 1A 6D      jz skip_invert_a_854  
16527  6D18 FD 95         neg a 
16528  6D1A             skip_invert_a_854:   
16529  6D1A FD AB         swp b
16530  6D1C FD 93 80      test bl, $80  
16531  6D1F FD AB         swp b
16532  6D21 C6 26 6D      jz skip_invert_b_854  
16533  6D24 FD 97         neg b 
16534  6D26             skip_invert_b_854:   
16535  6D26 AC            mul a, b ; *
16536  6D27 FD 78         mov g, a
16537  6D29 11            mov a, b
16538  6D2A EA            pop bl
16539  6D2B FD 93 80      test bl, $80
16540  6D2E C6 3B 6D      jz _same_signs_854
16541  6D31 2F            mov bl, al
16542  6D32 95            not a
16543  6D33 FD 97         neg b
16544  6D35 5B 00 00      adc a, 0
16545  6D38 FD 78         mov g, a
16546  6D3A 11            mov a, b
16547  6D3B             _same_signs_854:
16548  6D3B FD 38         mov c, g
16549  6D3D 27            mov b, a
16550  6D3E FD F1         pop g
16551  6D40 E4            pop a
16552  6D41             ; --- END FACTORS
16553  6D41             ; --- START TERMS
16554  6D41 D7            push a
16555  6D42 FD D8         push g
16556  6D44 11            mov a, b
16557  6D45 FD 7A         mov g, c
16558  6D47 FA 05 00      lea d, [bp + 5] ; $str
16559  6D4A 2A            mov b, [d]
16560  6D4B 38 00 00      mov c, 0
16561  6D4E 74            mov d, b
16562  6D4F 32            mov bl, [d]
16563  6D50 A7 00         mov bh, 0
16564  6D52 38 00 00      mov c, 0
16565  6D55             ; --- START TERMS
16566  6D55 D7            push a
16567  6D56 11            mov a, b
16568  6D57 FD 2E 30 00   mov32 cb, $00000030
16568  6D5B 00 00 
16569  6D5D 60            sub a, b
16570  6D5E 27            mov b, a
16571  6D5F E4            pop a
16572  6D60             ; --- END TERMS
16573  6D60 56            add b, a
16574  6D61 FD F1         pop g
16575  6D63 E4            pop a
16576  6D64             ; --- END TERMS
16577  6D64 E7            pop d
16578  6D65 FD 43         mov [d], b
16579  6D67             ; str++; 
16580  6D67 FA 05 00      lea d, [bp + 5] ; $str
16581  6D6A 2A            mov b, [d]
16582  6D6B 38 00 00      mov c, 0
16583  6D6E FD 77         inc b
16584  6D70 FA 05 00      lea d, [bp + 5] ; $str
16585  6D73 FD 43         mov [d], b
16586  6D75 FD 7D         dec b
16587  6D77 0A B2 6C      jmp _while852_cond
16588  6D7A             _while852_exit:
16589  6D7A             ; return sign * result; 
16590  6D7A FA FD FF      lea d, [bp + -3] ; $sign
16591  6D7D 2A            mov b, [d]
16592  6D7E 38 00 00      mov c, 0
16593  6D81             ; --- START FACTORS
16594  6D81 D7            push a
16595  6D82 FD D8         push g
16596  6D84 11            mov a, b
16597  6D85 FD 7A         mov g, c
16598  6D87 FA FF FF      lea d, [bp + -1] ; $result
16599  6D8A 2A            mov b, [d]
16600  6D8B 38 00 00      mov c, 0
16601  6D8E D7            push a     ; save left operand
16602  6D8F 8E            xor a, b   ; xor sign bits
16603  6D90 FD AA         swp a      ; swap bytes
16604  6D92 83            mov cl, al ; save result of xor into 'dl'
16605  6D93 E4            pop a      ; restore left side operator
16606  6D94 DF            push cl    ; save result of xor above
16607  6D95 FD AA         swp a  
16608  6D97 93 80         test al, $80  
16609  6D99 FD AA         swp a  
16610  6D9B C6 A0 6D      jz skip_invert_a_856  
16611  6D9E FD 95         neg a 
16612  6DA0             skip_invert_a_856:   
16613  6DA0 FD AB         swp b
16614  6DA2 FD 93 80      test bl, $80  
16615  6DA5 FD AB         swp b
16616  6DA7 C6 AC 6D      jz skip_invert_b_856  
16617  6DAA FD 97         neg b 
16618  6DAC             skip_invert_b_856:   
16619  6DAC AC            mul a, b ; *
16620  6DAD FD 78         mov g, a
16621  6DAF 11            mov a, b
16622  6DB0 EA            pop bl
16623  6DB1 FD 93 80      test bl, $80
16624  6DB4 C6 C1 6D      jz _same_signs_856
16625  6DB7 2F            mov bl, al
16626  6DB8 95            not a
16627  6DB9 FD 97         neg b
16628  6DBB 5B 00 00      adc a, 0
16629  6DBE FD 78         mov g, a
16630  6DC0 11            mov a, b
16631  6DC1             _same_signs_856:
16632  6DC1 FD 38         mov c, g
16633  6DC3 27            mov b, a
16634  6DC4 FD F1         pop g
16635  6DC6 E4            pop a
16636  6DC7             ; --- END FACTORS
16637  6DC7 F9            leave
16638  6DC8 09            ret
16639  6DC9             ; --- END TEXT SEGMENT
16640  6DC9             
16641  6DC9             ; --- BEGIN DATA SEGMENT
16642  6DC9 00          _starbases: .fill 1, 0
16643  6DCA 00          _base_y: .fill 1, 0
16644  6DCB 00          _base_x: .fill 1, 0
16645  6DCC 00          _starbases_left: .fill 1, 0
16646  6DCD 00 00 00 FF _c_data: .db $00,$00,$00,$ff,$ff,$ff,$00,$01,$01,$01,$00,$01,$01,$01,$00,
16646  6DD1 FF FF 00 01 
16646  6DD5 01 01 00 01 
16646  6DD9 01 01 00 
16647  6DDC FF FF FF 00 .db $ff,$ff,$ff,$00,$01,$01,
16647  6DE0 01 01 
16648  6DE2             
16649  6DE2 00 00 00 00 .fill 9, 0
16649  6DE6 00 00 00 00 
16649  6DEA 00 
16650  6DEB 00          _docked: .fill 1, 0
16651  6DEC 00 00       _energy: .fill 2, 0
16652  6DEE B8 0B       _energy0: .dw $0bb8
16653  6DF0 00 00 00 00 _map_data: .fill 162, 0
16653  6DF4 00 00 00 00 
16653  6DF8 00 00 00 00 
16653  6DFC 00 00 00 00 
16653  6E00 00 00 00 00 
16653  6E04 00 00 00 00 
16653  6E08 00 00 00 00 
16653  6E0C 00 00 00 00 
16653  6E10 00 00 00 00 
16653  6E14 00 00 00 00 
16653  6E18 00 00 00 00 
16653  6E1C 00 00 00 00 
16653  6E20 00 00 00 00 
16653  6E24 00 00 00 00 
16653  6E28 00 00 00 00 
16653  6E2C 00 00 00 00 
16653  6E30 00 00 00 00 
16653  6E34 00 00 00 00 
16653  6E38 00 00 00 00 
16653  6E3C 00 00 00 00 
16653  6E40 00 00 00 00 
16653  6E44 00 00 00 00 
16653  6E48 00 00 00 00 
16653  6E4C 00 00 00 00 
16653  6E50 00 00 00 00 
16653  6E54 00 00 00 00 
16653  6E58 00 00 00 00 
16653  6E5C 00 00 00 00 
16653  6E60 00 00 00 00 
16653  6E64 00 00 00 00 
16653  6E68 00 00 00 00 
16653  6E6C 00 00 00 00 
16653  6E70 00 00 00 00 
16653  6E74 00 00 00 00 
16653  6E78 00 00 00 00 
16653  6E7C 00 00 00 00 
16653  6E80 00 00 00 00 
16653  6E84 00 00 00 00 
16653  6E88 00 00 00 00 
16653  6E8C 00 00 00 00 
16653  6E90 00 00 
16654  6E92 00 00 00 00 _kdata_data: .fill 12, 0
16654  6E96 00 00 00 00 
16654  6E9A 00 00 00 00 
16655  6E9E 00          _klingons: .fill 1, 0
16656  6E9F 00          _total_klingons: .fill 1, 0
16657  6EA0 00          _klingons_left: .fill 1, 0
16658  6EA1 00          _torps: .fill 1, 0
16659  6EA2 0A          _torps0: .db $0a
16660  6EA3 00 00       _quad_y: .fill 2, 0
16661  6EA5 00 00       _quad_x: .fill 2, 0
16662  6EA7 00 00       _shield: .fill 2, 0
16663  6EA9 00          _stars: .fill 1, 0
16664  6EAA 00 00       _time_start: .fill 2, 0
16665  6EAC 00 00       _time_up: .fill 2, 0
16666  6EAE 00 00 00 00 _damage_data: .fill 18, 0
16666  6EB2 00 00 00 00 
16666  6EB6 00 00 00 00 
16666  6EBA 00 00 00 00 
16666  6EBE 00 00 
16667  6EC0 00 00       _d4: .fill 2, 0
16668  6EC2 00 00       _ship_y: .fill 2, 0
16669  6EC4 00 00       _ship_x: .fill 2, 0
16670  6EC6 00 00       _stardate: .fill 2, 0
16671  6EC8 00 00 00 00 _quad_data: .fill 64, 0
16671  6ECC 00 00 00 00 
16671  6ED0 00 00 00 00 
16671  6ED4 00 00 00 00 
16671  6ED8 00 00 00 00 
16671  6EDC 00 00 00 00 
16671  6EE0 00 00 00 00 
16671  6EE4 00 00 00 00 
16671  6EE8 00 00 00 00 
16671  6EEC 00 00 00 00 
16671  6EF0 00 00 00 00 
16671  6EF4 00 00 00 00 
16671  6EF8 00 00 00 00 
16671  6EFC 00 00 00 00 
16671  6F00 00 00 00 00 
16671  6F04 00 00 00 00 
16672  6F08 00 00 00 00 _quadname_data: .fill 12, 0
16672  6F0C 00 00 00 00 
16672  6F10 00 00 00 00 
16673  6F14 72 65 70 6F _inc_1_data: .db "reports:\n  Incorrect course data, sir!\n", 0
16673  6F18 72 74 73 3A 
16673  6F1C 0A 20 20 49 
16673  6F20 6E 63 6F 72 
16673  6F24 72 65 63 74 
16673  6F28 20 63 6F 75 
16673  6F2C 72 73 65 20 
16673  6F30 64 61 74 61 
16673  6F34 2C 20 73 69 
16673  6F38 72 21 0A 00 
16674  6F3C 14 6F       _inc_1: .dw _inc_1_data
16675  6F3E B6 70 B7 70 _quad_name_data: .dw _s0, _s1, _s2, _s3, _s4, _s5, _s6, _s7, _s8, _s9, _s10, _s11, _s12, _s13, _s14, 
16675  6F42 BF 70 C5 70 
16675  6F46 CD 70 D2 70 
16675  6F4A DA 70 E1 70 
16675  6F4E ED 70 F4 70 
16675  6F52 FB 70 01 71 
16675  6F56 09 71 14 71 
16675  6F5A 1E 71 
16676  6F5C 26 71 2F 71 .dw _s15, _s16, 
16677  6F60             
16678  6F60 00 00 00 00 .fill 34, 0
16678  6F64 00 00 00 00 
16678  6F68 00 00 00 00 
16678  6F6C 00 00 00 00 
16678  6F70 00 00 00 00 
16678  6F74 00 00 00 00 
16678  6F78 00 00 00 00 
16678  6F7C 00 00 00 00 
16678  6F80 00 00 
16679  6F82 B6 70 35 71 _device_name_data: .dw _s0, _s17, _s18, _s19, _s20, _s21, _s22, _s23, _s24, 
16679  6F86 42 71 56 71 
16679  6F8A 69 71 78 71 
16679  6F8E 85 71 94 71 
16679  6F92 A3 71 
16680  6F94             
16681  6F94 00 00 00 00 .fill 18, 0
16681  6F98 00 00 00 00 
16681  6F9C 00 00 00 00 
16681  6FA0 00 00 00 00 
16681  6FA4 00 00 
16682  6FA6 44 61 6D 61 _dcr_1_data: .db "Damage Control report:", 0
16682  6FAA 67 65 20 43 
16682  6FAE 6F 6E 74 72 
16682  6FB2 6F 6C 20 72 
16682  6FB6 65 70 6F 72 
16682  6FBA 74 3A 00 
16683  6FBD A6 6F       _dcr_1: .dw _dcr_1_data
16684  6FBF 00 00       _plural_2_data: .db $00,$00,
16685  6FC1 69 73 00    _plural_data: .db $69,$73,$00,
16686  6FC4             
16687  6FC4 00          .fill 1, 0
16688  6FC5 08          _warpmax_data: .db $08,
16689  6FC6             
16690  6FC6 00 00 00    .fill 3, 0
16691  6FC9 2D 2D 2D 2D _srs_1_data: .db "------------------------", 0
16691  6FCD 2D 2D 2D 2D 
16691  6FD1 2D 2D 2D 2D 
16691  6FD5 2D 2D 2D 2D 
16691  6FD9 2D 2D 2D 2D 
16691  6FDD 2D 2D 2D 2D 
16691  6FE1 00 
16692  6FE2 C9 6F       _srs_1: .dw _srs_1_data
16693  6FE4 B4 71 B8 71 _tilestr_data: .dw _s25, _s26, _s27, _s28, _s29, 
16693  6FE8 BC 71 C0 71 
16693  6FEC C4 71 
16694  6FEE             
16695  6FEE 00 00 00 00 .fill 10, 0
16695  6FF2 00 00 00 00 
16695  6FF6 00 00 
16696  6FF8 2D 2D 2D 2D _lrs_1_data: .db "-------------------\n", 0
16696  6FFC 2D 2D 2D 2D 
16696  7000 2D 2D 2D 2D 
16696  7004 2D 2D 2D 2D 
16696  7008 2D 2D 2D 0A 
16696  700C 00 
16697  700D F8 6F       _lrs_1: .dw _lrs_1_data
16698  700F 20 20 20 2D _gr_1_data: .db "   ----- ----- ----- ----- ----- ----- ----- -----\n", 0
16698  7013 2D 2D 2D 2D 
16698  7017 20 2D 2D 2D 
16698  701B 2D 2D 20 2D 
16698  701F 2D 2D 2D 2D 
16698  7023 20 2D 2D 2D 
16698  7027 2D 2D 20 2D 
16698  702B 2D 2D 2D 2D 
16698  702F 20 2D 2D 2D 
16698  7033 2D 2D 20 2D 
16698  7037 2D 2D 2D 2D 
16698  703B 20 2D 2D 2D 
16698  703F 2D 2D 0A 00 
16699  7043 0F 70       _gr_1: .dw _gr_1_data
16700  7045 73 00       _str_s_data: .db "s", 0
16701  7047 45 70       _str_s: .dw _str_s_data
16702  7049 20 20 2D 2D _gm_1_data: .db "  ----- ----- ----- ----- ----- ----- ----- -----\n", 0
16702  704D 2D 2D 2D 20 
16702  7051 2D 2D 2D 2D 
16702  7055 2D 20 2D 2D 
16702  7059 2D 2D 2D 20 
16702  705D 2D 2D 2D 2D 
16702  7061 2D 20 2D 2D 
16702  7065 2D 2D 2D 20 
16702  7069 2D 2D 2D 2D 
16702  706D 2D 20 2D 2D 
16702  7071 2D 2D 2D 20 
16702  7075 2D 2D 2D 2D 
16702  7079 2D 0A 00 
16703  707C 49 70       _gm_1: .dw _gm_1_data
16704  707E 20 20 44 49 _dist_1_data: .db "  DISTANCE = %s\n\n", 0
16704  7082 53 54 41 4E 
16704  7086 43 45 20 3D 
16704  708A 20 25 73 0A 
16704  708E 0A 00 
16705  7090 7E 70       _dist_1: .dw _dist_1_data
16706  7092 00 00 00 00 st_print100_buf_dt: .fill 16, 0
16706  7096 00 00 00 00 
16706  709A 00 00 00 00 
16706  709E 00 00 00 00 
16707  70A2             
16708  70A2             st_quadrant_name_sect_name_dt: 
16709  70A2 B6 70 76 83 .dw _s0, _s164, _s165, _s166, _s167, 
16709  70A6 79 83 7D 83 
16709  70AA 82 83 
16710  70AC 00 00 00 00 .fill 10, 0
16710  70B0 00 00 00 00 
16710  70B4 00 00 
16711  70B6 00          _s0: .db "", 0
16712  70B7 41 6E 74 61 _s1: .db "Antares", 0
16712  70BB 72 65 73 00 
16713  70BF 52 69 67 65 _s2: .db "Rigel", 0
16713  70C3 6C 00 
16714  70C5 50 72 6F 63 _s3: .db "Procyon", 0
16714  70C9 79 6F 6E 00 
16715  70CD 56 65 67 61 _s4: .db "Vega", 0
16715  70D1 00 
16716  70D2 43 61 6E 6F _s5: .db "Canopus", 0
16716  70D6 70 75 73 00 
16717  70DA 41 6C 74 61 _s6: .db "Altair", 0
16717  70DE 69 72 00 
16718  70E1 53 61 67 69 _s7: .db "Sagittarius", 0
16718  70E5 74 74 61 72 
16718  70E9 69 75 73 00 
16719  70ED 50 6F 6C 6C _s8: .db "Pollux", 0
16719  70F1 75 78 00 
16720  70F4 53 69 72 69 _s9: .db "Sirius", 0
16720  70F8 75 73 00 
16721  70FB 44 65 6E 65 _s10: .db "Deneb", 0
16721  70FF 62 00 
16722  7101 43 61 70 65 _s11: .db "Capella", 0
16722  7105 6C 6C 61 00 
16723  7109 42 65 74 65 _s12: .db "Betelgeuse", 0
16723  710D 6C 67 65 75 
16723  7111 73 65 00 
16724  7114 41 6C 64 65 _s13: .db "Aldebaran", 0
16724  7118 62 61 72 61 
16724  711C 6E 00 
16725  711E 52 65 67 75 _s14: .db "Regulus", 0
16725  7122 6C 75 73 00 
16726  7126 41 72 63 74 _s15: .db "Arcturus", 0
16726  712A 75 72 75 73 
16726  712E 00 
16727  712F 53 70 69 63 _s16: .db "Spica", 0
16727  7133 61 00 
16728  7135 57 61 72 70 _s17: .db "Warp engines", 0
16728  7139 20 65 6E 67 
16728  713D 69 6E 65 73 
16728  7141 00 
16729  7142 53 68 6F 72 _s18: .db "Short range sensors", 0
16729  7146 74 20 72 61 
16729  714A 6E 67 65 20 
16729  714E 73 65 6E 73 
16729  7152 6F 72 73 00 
16730  7156 4C 6F 6E 67 _s19: .db "Long range sensors", 0
16730  715A 20 72 61 6E 
16730  715E 67 65 20 73 
16730  7162 65 6E 73 6F 
16730  7166 72 73 00 
16731  7169 50 68 61 73 _s20: .db "Phaser control", 0
16731  716D 65 72 20 63 
16731  7171 6F 6E 74 72 
16731  7175 6F 6C 00 
16732  7178 50 68 6F 74 _s21: .db "Photon tubes", 0
16732  717C 6F 6E 20 74 
16732  7180 75 62 65 73 
16732  7184 00 
16733  7185 44 61 6D 61 _s22: .db "Damage control", 0
16733  7189 67 65 20 63 
16733  718D 6F 6E 74 72 
16733  7191 6F 6C 00 
16734  7194 53 68 69 65 _s23: .db "Shield control", 0
16734  7198 6C 64 20 63 
16734  719C 6F 6E 74 72 
16734  71A0 6F 6C 00 
16735  71A3 4C 69 62 72 _s24: .db "Library computer", 0
16735  71A7 61 72 79 20 
16735  71AB 63 6F 6D 70 
16735  71AF 75 74 65 72 
16735  71B3 00 
16736  71B4 20 20 20 00 _s25: .db "   ", 0
16737  71B8 20 2A 20 00 _s26: .db " * ", 0
16738  71BC 3E 21 3C 00 _s27: .db ">!<", 0
16739  71C0 2B 4B 2B 00 _s28: .db "+K+", 0
16740  71C4 3C 2A 3E 00 _s29: .db "<*>", 0
16741  71C8 61 72 65 00 _s30: .db "are", 0
16742  71CC 69 73 00    _s31: .db "is", 0
16743  71CF 25 73 20 25 _s32: .db "%s %s inoperable.\n", 0
16743  71D3 73 20 69 6E 
16743  71D7 6F 70 65 72 
16743  71DB 61 62 6C 65 
16743  71DF 2E 0A 00 
16744  71E2 73 74 61 72 _s33: .db "startrek.intro", 0
16744  71E6 74 72 65 6B 
16744  71EA 2E 69 6E 74 
16744  71EE 72 6F 00 
16745  71F1 73 74 61 72 _s34: .db "startrek.doc", 0
16745  71F5 74 72 65 6B 
16745  71F9 2E 64 6F 63 
16745  71FD 00 
16746  71FE 73 74 61 72 _s35: .db "startrek.logo", 0
16746  7202 74 72 65 6B 
16746  7206 2E 6C 6F 67 
16746  720A 6F 00 
16747  720C 73 74 61 72 _s36: .db "startrek.fatal", 0
16747  7210 74 72 65 6B 
16747  7214 2E 66 61 74 
16747  7218 61 6C 00 
16748  721B 43 6F 6D 6D _s37: .db "Command? ", 0
16748  721F 61 6E 64 3F 
16748  7223 20 00 
16749  7225 6E 61 76 00 _s38: .db "nav", 0
16750  7229 73 72 73 00 _s39: .db "srs", 0
16751  722D 6C 72 73 00 _s40: .db "lrs", 0
16752  7231 70 68 61 00 _s41: .db "pha", 0
16753  7235 74 6F 72 00 _s42: .db "tor", 0
16754  7239 73 68 69 00 _s43: .db "shi", 0
16755  723D 64 61 6D 00 _s44: .db "dam", 0
16756  7241 63 6F 6D 00 _s45: .db "com", 0
16757  7245 78 78 78 00 _s46: .db "xxx", 0
16758  7249 45 6E 74 65 _s47: .db "Enter one of the following:\n", 0
16758  724D 72 20 6F 6E 
16758  7251 65 20 6F 66 
16758  7255 20 74 68 65 
16758  7259 20 66 6F 6C 
16758  725D 6C 6F 77 69 
16758  7261 6E 67 3A 0A 
16758  7265 00 
16759  7266 20 20 6E 61 _s48: .db "  nav - To Set Course", 0
16759  726A 76 20 2D 20 
16759  726E 54 6F 20 53 
16759  7272 65 74 20 43 
16759  7276 6F 75 72 73 
16759  727A 65 00 
16760  727C 20 20 73 72 _s49: .db "  srs - Short Range Sensors", 0
16760  7280 73 20 2D 20 
16760  7284 53 68 6F 72 
16760  7288 74 20 52 61 
16760  728C 6E 67 65 20 
16760  7290 53 65 6E 73 
16760  7294 6F 72 73 00 
16761  7298 20 20 6C 72 _s50: .db "  lrs - Long Range Sensors", 0
16761  729C 73 20 2D 20 
16761  72A0 4C 6F 6E 67 
16761  72A4 20 52 61 6E 
16761  72A8 67 65 20 53 
16761  72AC 65 6E 73 6F 
16761  72B0 72 73 00 
16762  72B3 20 20 70 68 _s51: .db "  pha - Phasers", 0
16762  72B7 61 20 2D 20 
16762  72BB 50 68 61 73 
16762  72BF 65 72 73 00 
16763  72C3 20 20 74 6F _s52: .db "  tor - Photon Torpedoes", 0
16763  72C7 72 20 2D 20 
16763  72CB 50 68 6F 74 
16763  72CF 6F 6E 20 54 
16763  72D3 6F 72 70 65 
16763  72D7 64 6F 65 73 
16763  72DB 00 
16764  72DC 20 20 73 68 _s53: .db "  shi - Shield Control", 0
16764  72E0 69 20 2D 20 
16764  72E4 53 68 69 65 
16764  72E8 6C 64 20 43 
16764  72EC 6F 6E 74 72 
16764  72F0 6F 6C 00 
16765  72F3 20 20 64 61 _s54: .db "  dam - Damage Control", 0
16765  72F7 6D 20 2D 20 
16765  72FB 44 61 6D 61 
16765  72FF 67 65 20 43 
16765  7303 6F 6E 74 72 
16765  7307 6F 6C 00 
16766  730A 20 20 63 6F _s55: .db "  com - Library Computer", 0
16766  730E 6D 20 2D 20 
16766  7312 4C 69 62 72 
16766  7316 61 72 79 20 
16766  731A 43 6F 6D 70 
16766  731E 75 74 65 72 
16766  7322 00 
16767  7323 20 20 78 78 _s56: .db "  xxx - Resign Command\n", 0
16767  7327 78 20 2D 20 
16767  732B 52 65 73 69 
16767  732F 67 6E 20 43 
16767  7333 6F 6D 6D 61 
16767  7337 6E 64 0A 00 
16768  733B 73 00       _s57: .db "s", 0
16769  733D 4E 6F 77 20 _s58: .db "Now entering %s quadrant...\n\n", 0
16769  7341 65 6E 74 65 
16769  7345 72 69 6E 67 
16769  7349 20 25 73 20 
16769  734D 71 75 61 64 
16769  7351 72 61 6E 74 
16769  7355 2E 2E 2E 0A 
16769  7359 0A 00 
16770  735B 0A 59 6F 75 _s59: .db "\nYour mission begins with your starship located", 0
16770  735F 72 20 6D 69 
16770  7363 73 73 69 6F 
16770  7367 6E 20 62 65 
16770  736B 67 69 6E 73 
16770  736F 20 77 69 74 
16770  7373 68 20 79 6F 
16770  7377 75 72 20 73 
16770  737B 74 61 72 73 
16770  737F 68 69 70 20 
16770  7383 6C 6F 63 61 
16770  7387 74 65 64 00 
16771  738B 69 6E 20 74 _s60: .db "in the galactic quadrant %s.\n\n", 0
16771  738F 68 65 20 67 
16771  7393 61 6C 61 63 
16771  7397 74 69 63 20 
16771  739B 71 75 61 64 
16771  739F 72 61 6E 74 
16771  73A3 20 25 73 2E 
16771  73A7 0A 0A 00 
16772  73AA 43 6F 6D 62 _s61: .db "Combat Area  Condition Red\n", 0
16772  73AE 61 74 20 41 
16772  73B2 72 65 61 20 
16772  73B6 20 43 6F 6E 
16772  73BA 64 69 74 69 
16772  73BE 6F 6E 20 52 
16772  73C2 65 64 0A 00 
16773  73C6 53 68 69 65 _s62: .db "Shields Dangerously Low\n", 0
16773  73CA 6C 64 73 20 
16773  73CE 44 61 6E 67 
16773  73D2 65 72 6F 75 
16773  73D6 73 6C 79 20 
16773  73DA 4C 6F 77 0A 
16773  73DE 00 
16774  73DF 43 6F 75 72 _s63: .db "Course (0-9): ", 0
16774  73E3 73 65 20 28 
16774  73E7 30 2D 39 29 
16774  73EB 3A 20 00 
16775  73EE 4C 74 2E 20 _s64: .db "Lt. Sulu%s", 0
16775  73F2 53 75 6C 75 
16775  73F6 25 73 00 
16776  73F9 30 2E 32 00 _s65: .db "0.2", 0
16777  73FD 57 61 72 70 _s66: .db "Warp Factor (0-%s): ", 0
16777  7401 20 46 61 63 
16777  7405 74 6F 72 20 
16777  7409 28 30 2D 25 
16777  740D 73 29 3A 20 
16777  7411 00 
16778  7412 57 61 72 70 _s67: .db "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n", 0
16778  7416 20 45 6E 67 
16778  741A 69 6E 65 73 
16778  741E 20 61 72 65 
16778  7422 20 64 61 6D 
16778  7426 61 67 65 64 
16778  742A 2E 20 4D 61 
16778  742E 78 69 6D 75 
16778  7432 6D 20 73 70 
16778  7436 65 65 64 20 
16778  743A 3D 20 57 61 
16778  743E 72 70 20 30 
16778  7442 2E 32 2E 0A 
16778  7446 0A 00 
16779  7448 43 68 69 65 _s68: .db "Chief Engineer Scott reports:\n  The engines won't take warp %s!\n\n", 0
16779  744C 66 20 45 6E 
16779  7450 67 69 6E 65 
16779  7454 65 72 20 53 
16779  7458 63 6F 74 74 
16779  745C 20 72 65 70 
16779  7460 6F 72 74 73 
16779  7464 3A 0A 20 20 
16779  7468 54 68 65 20 
16779  746C 65 6E 67 69 
16779  7470 6E 65 73 20 
16779  7474 77 6F 6E 27 
16779  7478 74 20 74 61 
16779  747C 6B 65 20 77 
16779  7480 61 72 70 20 
16779  7484 25 73 21 0A 
16779  7488 0A 
16780  7489 45 6E 67 69 _s69: .db "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", 0
16780  748D 6E 65 65 72 
16780  7491 69 6E 67 20 
16780  7495 72 65 70 6F 
16780  7499 72 74 73 3A 
16780  749D 0A 20 20 49 
16780  74A1 6E 73 75 66 
16780  74A5 66 69 63 69 
16780  74A9 65 6E 74 20 
16780  74AD 65 6E 65 72 
16780  74B1 67 79 20 61 
16780  74B5 76 61 69 6C 
16780  74B9 61 62 6C 65 
16780  74BD 20 66 6F 72 
16780  74C1 20 6D 61 6E 
16780  74C5 65 75 76 65 
16780  74C9 72 69 6E 67 
16780  74CD 20 61 74 20 
16780  74D1 77 61 72 70 
16780  74D5 20 25 73 21 
16780  74D9 0A 0A 00 
16781  74DC 44 65 66 6C _s70: .db "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", 0
16781  74E0 65 63 74 6F 
16781  74E4 72 20 43 6F 
16781  74E8 6E 74 72 6F 
16781  74EC 6C 20 52 6F 
16781  74F0 6F 6D 20 61 
16781  74F4 63 6B 6E 6F 
16781  74F8 77 6C 65 64 
16781  74FC 67 65 73 3A 
16781  7500 0A 20 20 25 
16781  7504 64 20 75 6E 
16781  7508 69 74 73 20 
16781  750C 6F 66 20 65 
16781  7510 6E 65 72 67 
16781  7514 79 20 70 72 
16781  7518 65 73 65 6E 
16781  751C 74 6C 79 20 
16781  7520 64 65 70 6C 
16781  7524 6F 79 65 64 
16781  7528 20 74 6F 20 
16781  752C 73 68 69 65 
16781  7530 6C 64 73 2E 
16781  7534 0A 00 
16782  7536 4C 54 2E 20 _s71: .db "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denie"
16782  753A 55 68 75 72 
16782  753E 61 20 72 65 
16782  7542 70 6F 72 74 
16782  7546 73 3A 0A 20 
16782  754A 4D 65 73 73 
16782  754E 61 67 65 20 
16782  7552 66 72 6F 6D 
16782  7556 20 53 74 61 
16782  755A 72 66 6C 65 
16782  755E 65 74 20 43 
16782  7562 6F 6D 6D 61 
16782  7566 6E 64 3A 0A 
16782  756A 0A 20 50 65 
16782  756E 72 6D 69 73 
16782  7572 73 69 6F 6E 
16782  7576 20 74 6F 20 
16782  757A 61 74 74 65 
16782  757E 6D 70 74 20 
16782  7582 63 72 6F 73 
16782  7586 73 69 6E 67 
16782  758A 20 6F 66 20 
16782  758E 67 61 6C 61 
16782  7592 63 74 69 63 
16782  7596 20 70 65 72 
16782  759A 69 6D 65 74 
16782  759E 65 72 0A 20 
16782  75A2 69 73 20 68 
16782  75A6 65 72 65 62 
16782  75AA 79 20 2A 64 
16782  75AE 65 6E 69 65 
16783  75B2 64 2A 2E 20 .db "d*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", 0
16783  75B6 53 68 75 74 
16783  75BA 20 64 6F 77 
16783  75BE 6E 20 79 6F 
16783  75C2 75 72 20 65 
16783  75C6 6E 67 69 6E 
16783  75CA 65 73 2E 0A 
16783  75CE 0A 20 43 68 
16783  75D2 69 65 66 20 
16783  75D6 45 6E 67 69 
16783  75DA 6E 65 65 72 
16783  75DE 20 53 63 6F 
16783  75E2 74 74 20 72 
16783  75E6 65 70 6F 72 
16783  75EA 74 73 3A 0A 
16783  75EE 20 57 61 72 
16783  75F2 70 20 45 6E 
16783  75F6 67 69 6E 65 
16783  75FA 73 20 73 68 
16783  75FE 75 74 20 64 
16783  7602 6F 77 6E 20 
16783  7606 61 74 20 73 
16783  760A 65 63 74 6F 
16783  760E 72 20 25 64 
16783  7612 2C 20 25 64 
16783  7616 20 6F 66 20 
16783  761A 71 75 61 64 
16783  761E 72 61 6E 74 
16783  7622 20 25 64 2C 
16783  7626 20 25 64 2E 
16783  762A 0A 0A 00 
16784  762D 57 61 72 70 _s72: .db "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", 0
16784  7631 20 45 6E 67 
16784  7635 69 6E 65 73 
16784  7639 20 73 68 75 
16784  763D 74 20 64 6F 
16784  7641 77 6E 20 61 
16784  7645 74 20 73 65 
16784  7649 63 74 6F 72 
16784  764D 20 25 64 2C 
16784  7651 20 25 64 20 
16784  7655 64 75 65 20 
16784  7659 74 6F 20 62 
16784  765D 61 64 20 6E 
16784  7661 61 76 69 67 
16784  7665 61 74 69 6F 
16784  7669 6E 2E 0A 0A 
16784  766D 00 
16785  766E 53 68 69 65 _s73: .db "Shield Control supplies energy to complete maneuver.\n", 0
16785  7672 6C 64 20 43 
16785  7676 6F 6E 74 72 
16785  767A 6F 6C 20 73 
16785  767E 75 70 70 6C 
16785  7682 69 65 73 20 
16785  7686 65 6E 65 72 
16785  768A 67 79 20 74 
16785  768E 6F 20 63 6F 
16785  7692 6D 70 6C 65 
16785  7696 74 65 20 6D 
16785  769A 61 6E 65 75 
16785  769E 76 65 72 2E 
16785  76A2 0A 00 
16786  76A4 47 52 45 45 _s74: .db "GREEN", 0
16786  76A8 4E 00 
16787  76AA 59 45 4C 4C _s75: .db "YELLOW", 0
16787  76AE 4F 57 00 
16788  76B1 2A 52 45 44 _s76: .db "*RED*", 0
16788  76B5 2A 00 
16789  76B7 44 4F 43 4B _s77: .db "DOCKED", 0
16789  76BB 45 44 00 
16790  76BE 53 68 69 65 _s78: .db "Shields dropped for docking purposes.", 0
16790  76C2 6C 64 73 20 
16790  76C6 64 72 6F 70 
16790  76CA 70 65 64 20 
16790  76CE 66 6F 72 20 
16790  76D2 64 6F 63 6B 
16790  76D6 69 6E 67 20 
16790  76DA 70 75 72 70 
16790  76DE 6F 73 65 73 
16790  76E2 2E 00 
16791  76E4 0A 2A 2A 2A _s79: .db "\n*** Short Range Sensors are out ***", 0
16791  76E8 20 53 68 6F 
16791  76EC 72 74 20 52 
16791  76F0 61 6E 67 65 
16791  76F4 20 53 65 6E 
16791  76F8 73 6F 72 73 
16791  76FC 20 61 72 65 
16791  7700 20 6F 75 74 
16791  7704 20 2A 2A 2A 
16791  7708 00 
16792  7709 20 20 20 20 _s80: .db "    Stardate            %d\n", 0
16792  770D 53 74 61 72 
16792  7711 64 61 74 65 
16792  7715 20 20 20 20 
16792  7719 20 20 20 20 
16792  771D 20 20 20 20 
16792  7721 25 64 0A 00 
16793  7725 20 20 20 20 _s81: .db "    Condition           %s\n", 0
16793  7729 43 6F 6E 64 
16793  772D 69 74 69 6F 
16793  7731 6E 20 20 20 
16793  7735 20 20 20 20 
16793  7739 20 20 20 20 
16793  773D 25 73 0A 00 
16794  7741 20 20 20 20 _s82: .db "    Quadrant            %d, %d\n", 0
16794  7745 51 75 61 64 
16794  7749 72 61 6E 74 
16794  774D 20 20 20 20 
16794  7751 20 20 20 20 
16794  7755 20 20 20 20 
16794  7759 25 64 2C 20 
16794  775D 25 64 0A 00 
16795  7761 20 20 20 20 _s83: .db "    Sector              %d, %d\n", 0
16795  7765 53 65 63 74 
16795  7769 6F 72 20 20 
16795  776D 20 20 20 20 
16795  7771 20 20 20 20 
16795  7775 20 20 20 20 
16795  7779 25 64 2C 20 
16795  777D 25 64 0A 00 
16796  7781 20 20 20 20 _s84: .db "    Photon Torpedoes    %d\n", 0
16796  7785 50 68 6F 74 
16796  7789 6F 6E 20 54 
16796  778D 6F 72 70 65 
16796  7791 64 6F 65 73 
16796  7795 20 20 20 20 
16796  7799 25 64 0A 00 
16797  779D 20 20 20 20 _s85: .db "    Total Energy        %d\n", 0
16797  77A1 54 6F 74 61 
16797  77A5 6C 20 45 6E 
16797  77A9 65 72 67 79 
16797  77AD 20 20 20 20 
16797  77B1 20 20 20 20 
16797  77B5 25 64 0A 00 
16798  77B9 20 20 20 20 _s86: .db "    Shields             %d\n", 0
16798  77BD 53 68 69 65 
16798  77C1 6C 64 73 20 
16798  77C5 20 20 20 20 
16798  77C9 20 20 20 20 
16798  77CD 20 20 20 20 
16798  77D1 25 64 0A 00 
16799  77D5 20 20 20 20 _s87: .db "    Klingons Remaining  %d\n", 0
16799  77D9 4B 6C 69 6E 
16799  77DD 67 6F 6E 73 
16799  77E1 20 52 65 6D 
16799  77E5 61 69 6E 69 
16799  77E9 6E 67 20 20 
16799  77ED 25 64 0A 00 
16800  77F1 4C 6F 6E 67 _s88: .db "Long Range Scan for Quadrant %d, %d\n\n", 0
16800  77F5 20 52 61 6E 
16800  77F9 67 65 20 53 
16800  77FD 63 61 6E 20 
16800  7801 66 6F 72 20 
16800  7805 51 75 61 64 
16800  7809 72 61 6E 74 
16800  780D 20 25 64 2C 
16800  7811 20 25 64 0A 
16800  7815 0A 00 
16801  7817 25 73 3A 00 _s89: .db "%s:", 0
16802  781B 2A 2A 2A 00 _s90: .db "***", 0
16803  781F 20 3A 00    _s91: .db " :", 0
16804  7822 25 73 0A 00 _s92: .db "%s\n", 0
16805  7826 53 63 69 65 _s93: .db "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n", 0
16805  782A 6E 63 65 20 
16805  782E 4F 66 66 69 
16805  7832 63 65 72 20 
16805  7836 53 70 6F 63 
16805  783A 6B 20 72 65 
16805  783E 70 6F 72 74 
16805  7842 73 3A 0A 20 
16805  7846 20 27 53 65 
16805  784A 6E 73 6F 72 
16805  784E 73 20 73 68 
16805  7852 6F 77 20 6E 
16805  7856 6F 20 65 6E 
16805  785A 65 6D 79 20 
16805  785E 73 68 69 70 
16805  7862 73 20 69 6E 
16805  7866 20 74 68 69 
16805  786A 73 20 71 75 
16805  786E 61 64 72 61 
16805  7872 6E 74 27 0A 
16805  7876 00 
16806  7877 43 6F 6D 70 _s94: .db "Computer failure hampers accuracy.", 0
16806  787B 75 74 65 72 
16806  787F 20 66 61 69 
16806  7883 6C 75 72 65 
16806  7887 20 68 61 6D 
16806  788B 70 65 72 73 
16806  788F 20 61 63 63 
16806  7893 75 72 61 63 
16806  7897 79 2E 00 
16807  789A 50 68 61 73 _s95: .db "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", 0
16807  789E 65 72 73 20 
16807  78A2 6C 6F 63 6B 
16807  78A6 65 64 20 6F 
16807  78AA 6E 20 74 61 
16807  78AE 72 67 65 74 
16807  78B2 3B 0A 20 45 
16807  78B6 6E 65 72 67 
16807  78BA 79 20 61 76 
16807  78BE 61 69 6C 61 
16807  78C2 62 6C 65 20 
16807  78C6 3D 20 25 64 
16807  78CA 20 75 6E 69 
16807  78CE 74 73 0A 0A 
16807  78D2 20 4E 75 6D 
16807  78D6 62 65 72 20 
16807  78DA 6F 66 20 75 
16807  78DE 6E 69 74 73 
16807  78E2 20 74 6F 20 
16807  78E6 66 69 72 65 
16807  78EA 3A 20 00 
16808  78ED 4E 6F 74 20 _s96: .db "Not enough energy available.\n", 0
16808  78F1 65 6E 6F 75 
16808  78F5 67 68 20 65 
16808  78F9 6E 65 72 67 
16808  78FD 79 20 61 76 
16808  7901 61 69 6C 61 
16808  7905 62 6C 65 2E 
16808  7909 0A 00 
16809  790B 53 65 6E 73 _s97: .db "Sensors show no damage to enemy at %d, %d\n\n", 0
16809  790F 6F 72 73 20 
16809  7913 73 68 6F 77 
16809  7917 20 6E 6F 20 
16809  791B 64 61 6D 61 
16809  791F 67 65 20 74 
16809  7923 6F 20 65 6E 
16809  7927 65 6D 79 20 
16809  792B 61 74 20 25 
16809  792F 64 2C 20 25 
16809  7933 64 0A 0A 00 
16810  7937 25 64 20 75 _s98: .db "%d unit hit on Klingon at sector %d, %d\n", 0
16810  793B 6E 69 74 20 
16810  793F 68 69 74 20 
16810  7943 6F 6E 20 4B 
16810  7947 6C 69 6E 67 
16810  794B 6F 6E 20 61 
16810  794F 74 20 73 65 
16810  7953 63 74 6F 72 
16810  7957 20 25 64 2C 
16810  795B 20 25 64 0A 
16810  795F 00 
16811  7960 2A 2A 2A 20 _s99: .db "*** Klingon Destroyed ***\n", 0
16811  7964 4B 6C 69 6E 
16811  7968 67 6F 6E 20 
16811  796C 44 65 73 74 
16811  7970 72 6F 79 65 
16811  7974 64 20 2A 2A 
16811  7978 2A 0A 00 
16812  797B 20 20 20 28 _s100: .db "   (Sensors show %d units remaining.)\n\n", 0
16812  797F 53 65 6E 73 
16812  7983 6F 72 73 20 
16812  7987 73 68 6F 77 
16812  798B 20 25 64 20 
16812  798F 75 6E 69 74 
16812  7993 73 20 72 65 
16812  7997 6D 61 69 6E 
16812  799B 69 6E 67 2E 
16812  799F 29 0A 0A 00 
16813  79A3 41 6C 6C 20 _s101: .db "All photon torpedoes expended", 0
16813  79A7 70 68 6F 74 
16813  79AB 6F 6E 20 74 
16813  79AF 6F 72 70 65 
16813  79B3 64 6F 65 73 
16813  79B7 20 65 78 70 
16813  79BB 65 6E 64 65 
16813  79BF 64 00 
16814  79C1 45 6E 73 69 _s102: .db "Ensign Chekov%s", 0
16814  79C5 67 6E 20 43 
16814  79C9 68 65 6B 6F 
16814  79CD 76 25 73 00 
16815  79D1 54 6F 72 70 _s103: .db "Torpedo Track:", 0
16815  79D5 65 64 6F 20 
16815  79D9 54 72 61 63 
16815  79DD 6B 3A 00 
16816  79E0 20 20 20 20 _s104: .db "    %d, %d\n", 0
16816  79E4 25 64 2C 20 
16816  79E8 25 64 0A 00 
16817  79EC 54 6F 72 70 _s105: .db "Torpedo Missed\n", 0
16817  79F0 65 64 6F 20 
16817  79F4 4D 69 73 73 
16817  79F8 65 64 0A 00 
16818  79FC 53 74 61 72 _s106: .db "Star at %d, %d absorbed torpedo energy.\n\n", 0
16818  7A00 20 61 74 20 
16818  7A04 25 64 2C 20 
16818  7A08 25 64 20 61 
16818  7A0C 62 73 6F 72 
16818  7A10 62 65 64 20 
16818  7A14 74 6F 72 70 
16818  7A18 65 64 6F 20 
16818  7A1C 65 6E 65 72 
16818  7A20 67 79 2E 0A 
16818  7A24 0A 00 
16819  7A26 2A 2A 2A 20 _s107: .db "*** Starbase Destroyed ***", 0
16819  7A2A 53 74 61 72 
16819  7A2E 62 61 73 65 
16819  7A32 20 44 65 73 
16819  7A36 74 72 6F 79 
16819  7A3A 65 64 20 2A 
16819  7A3E 2A 2A 00 
16820  7A41 54 68 61 74 _s108: .db "That does it, Captain!!", 0
16820  7A45 20 64 6F 65 
16820  7A49 73 20 69 74 
16820  7A4D 2C 20 43 61 
16820  7A51 70 74 61 69 
16820  7A55 6E 21 21 00 
16821  7A59 59 6F 75 20 _s109: .db "You are hereby relieved of command\n", 0
16821  7A5D 61 72 65 20 
16821  7A61 68 65 72 65 
16821  7A65 62 79 20 72 
16821  7A69 65 6C 69 65 
16821  7A6D 76 65 64 20 
16821  7A71 6F 66 20 63 
16821  7A75 6F 6D 6D 61 
16821  7A79 6E 64 0A 00 
16822  7A7D 61 6E 64 20 _s110: .db "and sentenced to 99 stardates of hard", 0
16822  7A81 73 65 6E 74 
16822  7A85 65 6E 63 65 
16822  7A89 64 20 74 6F 
16822  7A8D 20 39 39 20 
16822  7A91 73 74 61 72 
16822  7A95 64 61 74 65 
16822  7A99 73 20 6F 66 
16822  7A9D 20 68 61 72 
16822  7AA1 64 00 
16823  7AA3 6C 61 62 6F _s111: .db "labor on Cygnus 12!!\n", 0
16823  7AA7 72 20 6F 6E 
16823  7AAB 20 43 79 67 
16823  7AAF 6E 75 73 20 
16823  7AB3 31 32 21 21 
16823  7AB7 0A 00 
16824  7AB9 53 74 61 72 _s112: .db "Starfleet Command reviewing your record to consider\n court martial!\n", 0
16824  7ABD 66 6C 65 65 
16824  7AC1 74 20 43 6F 
16824  7AC5 6D 6D 61 6E 
16824  7AC9 64 20 72 65 
16824  7ACD 76 69 65 77 
16824  7AD1 69 6E 67 20 
16824  7AD5 79 6F 75 72 
16824  7AD9 20 72 65 63 
16824  7ADD 6F 72 64 20 
16824  7AE1 74 6F 20 63 
16824  7AE5 6F 6E 73 69 
16824  7AE9 64 65 72 0A 
16824  7AED 20 63 6F 75 
16824  7AF1 72 74 20 6D 
16824  7AF5 61 72 74 69 
16824  7AF9 61 6C 21 0A 
16824  7AFD 00 
16825  7AFE 44 61 6D 61 _s113: .db "Damage Control report not available.", 0
16825  7B02 67 65 20 43 
16825  7B06 6F 6E 74 72 
16825  7B0A 6F 6C 20 72 
16825  7B0E 65 70 6F 72 
16825  7B12 74 20 6E 6F 
16825  7B16 74 20 61 76 
16825  7B1A 61 69 6C 61 
16825  7B1E 62 6C 65 2E 
16825  7B22 00 
16826  7B23 0A 54 65 63 _s114: .db "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repa"
16826  7B27 68 6E 69 63 
16826  7B2B 69 61 6E 73 
16826  7B2F 20 73 74 61 
16826  7B33 6E 64 69 6E 
16826  7B37 67 20 62 79 
16826  7B3B 20 74 6F 20 
16826  7B3F 65 66 66 65 
16826  7B43 63 74 20 72 
16826  7B47 65 70 61 69 
16826  7B4B 72 73 20 74 
16826  7B4F 6F 20 79 6F 
16826  7B53 75 72 20 73 
16826  7B57 68 69 70 3B 
16826  7B5B 0A 45 73 74 
16826  7B5F 69 6D 61 74 
16826  7B63 65 64 20 74 
16826  7B67 69 6D 65 20 
16826  7B6B 74 6F 20 72 
16826  7B6F 65 70 61 69 
16826  7B73 72 3A 20 25 
16826  7B77 73 20 73 74 
16826  7B7B 61 72 64 61 
16826  7B7F 74 65 73 2E 
16826  7B83 0A 20 57 69 
16826  7B87 6C 6C 20 79 
16826  7B8B 6F 75 20 61 
16826  7B8F 75 74 68 6F 
16826  7B93 72 69 7A 65 
16826  7B97 20 74 68 65 
16826  7B9B 20 72 65 70 
16826  7B9F 61 
16827  7BA0 69 72 20 6F .db "ir order (y/N)? ", 0
16827  7BA4 72 64 65 72 
16827  7BA8 20 28 79 2F 
16827  7BAC 4E 29 3F 20 
16827  7BB0 00 
16828  7BB1 44 65 76 69 _s115: .db "Device            State of Repair", 0
16828  7BB5 63 65 20 20 
16828  7BB9 20 20 20 20 
16828  7BBD 20 20 20 20 
16828  7BC1 20 20 53 74 
16828  7BC5 61 74 65 20 
16828  7BC9 6F 66 20 52 
16828  7BCD 65 70 61 69 
16828  7BD1 72 00 
16829  7BD3 25 2D 32 35 _s116: .db "%-25s%6s\n", 0
16829  7BD7 73 25 36 73 
16829  7BDB 0A 00 
16830  7BDD 0A 00       _s117: .db "\n", 0
16831  7BDF 45 6E 65 72 _s118: .db "Energy available = %d\n\n Input number of units to shields: ", 0
16831  7BE3 67 79 20 61 
16831  7BE7 76 61 69 6C 
16831  7BEB 61 62 6C 65 
16831  7BEF 20 3D 20 25 
16831  7BF3 64 0A 0A 20 
16831  7BF7 49 6E 70 75 
16831  7BFB 74 20 6E 75 
16831  7BFF 6D 62 65 72 
16831  7C03 20 6F 66 20 
16831  7C07 75 6E 69 74 
16831  7C0B 73 20 74 6F 
16831  7C0F 20 73 68 69 
16831  7C13 65 6C 64 73 
16831  7C17 3A 20 00 
16832  7C1A 3C 53 68 69 _s119: .db "<Shields Unchanged>\n", 0
16832  7C1E 65 6C 64 73 
16832  7C22 20 55 6E 63 
16832  7C26 68 61 6E 67 
16832  7C2A 65 64 3E 0A 
16832  7C2E 00 
16833  7C2F 53 68 69 65 _s120: .db "Shield Control Reports:\n  'This is not the Federation Treasury.'", 0
16833  7C33 6C 64 20 43 
16833  7C37 6F 6E 74 72 
16833  7C3B 6F 6C 20 52 
16833  7C3F 65 70 6F 72 
16833  7C43 74 73 3A 0A 
16833  7C47 20 20 27 54 
16833  7C4B 68 69 73 20 
16833  7C4F 69 73 20 6E 
16833  7C53 6F 74 20 74 
16833  7C57 68 65 20 46 
16833  7C5B 65 64 65 72 
16833  7C5F 61 74 69 6F 
16833  7C63 6E 20 54 72 
16833  7C67 65 61 73 75 
16833  7C6B 72 79 2E 27 
16833  7C6F 00 
16834  7C70 44 65 66 6C _s121: .db "Deflector Control Room report:\n  'Shields now at %d units per your command.'\n\n", 0
16834  7C74 65 63 74 6F 
16834  7C78 72 20 43 6F 
16834  7C7C 6E 74 72 6F 
16834  7C80 6C 20 52 6F 
16834  7C84 6F 6D 20 72 
16834  7C88 65 70 6F 72 
16834  7C8C 74 3A 0A 20 
16834  7C90 20 27 53 68 
16834  7C94 69 65 6C 64 
16834  7C98 73 20 6E 6F 
16834  7C9C 77 20 61 74 
16834  7CA0 20 25 64 20 
16834  7CA4 75 6E 69 74 
16834  7CA8 73 20 70 65 
16834  7CAC 72 20 79 6F 
16834  7CB0 75 72 20 63 
16834  7CB4 6F 6D 6D 61 
16834  7CB8 6E 64 2E 27 
16834  7CBC 0A 0A 00 
16835  7CBF 43 6F 6D 70 _s122: .db "Computer active and awating command: ", 0
16835  7CC3 75 74 65 72 
16835  7CC7 20 61 63 74 
16835  7CCB 69 76 65 20 
16835  7CCF 61 6E 64 20 
16835  7CD3 61 77 61 74 
16835  7CD7 69 6E 67 20 
16835  7CDB 63 6F 6D 6D 
16835  7CDF 61 6E 64 3A 
16835  7CE3 20 00 
16836  7CE5 46 75 6E 63 _s123: .db "Functions available from Library-Computer:\n\n", 0
16836  7CE9 74 69 6F 6E 
16836  7CED 73 20 61 76 
16836  7CF1 61 69 6C 61 
16836  7CF5 62 6C 65 20 
16836  7CF9 66 72 6F 6D 
16836  7CFD 20 4C 69 62 
16836  7D01 72 61 72 79 
16836  7D05 2D 43 6F 6D 
16836  7D09 70 75 74 65 
16836  7D0D 72 3A 0A 0A 
16836  7D11 00 
16837  7D12 20 20 20 30 _s124: .db "   0 = Cumulative Galactic Record\n", 0
16837  7D16 20 3D 20 43 
16837  7D1A 75 6D 75 6C 
16837  7D1E 61 74 69 76 
16837  7D22 65 20 47 61 
16837  7D26 6C 61 63 74 
16837  7D2A 69 63 20 52 
16837  7D2E 65 63 6F 72 
16837  7D32 64 0A 00 
16838  7D35 20 20 20 31 _s125: .db "   1 = Status Report\n", 0
16838  7D39 20 3D 20 53 
16838  7D3D 74 61 74 75 
16838  7D41 73 20 52 65 
16838  7D45 70 6F 72 74 
16838  7D49 0A 00 
16839  7D4B 20 20 20 32 _s126: .db "   2 = Photon Torpedo Data\n", 0
16839  7D4F 20 3D 20 50 
16839  7D53 68 6F 74 6F 
16839  7D57 6E 20 54 6F 
16839  7D5B 72 70 65 64 
16839  7D5F 6F 20 44 61 
16839  7D63 74 61 0A 00 
16840  7D67 20 20 20 33 _s127: .db "   3 = Starbase Nav Data\n", 0
16840  7D6B 20 3D 20 53 
16840  7D6F 74 61 72 62 
16840  7D73 61 73 65 20 
16840  7D77 4E 61 76 20 
16840  7D7B 44 61 74 61 
16840  7D7F 0A 00 
16841  7D81 20 20 20 34 _s128: .db "   4 = Direction/Distance Calculator\n", 0
16841  7D85 20 3D 20 44 
16841  7D89 69 72 65 63 
16841  7D8D 74 69 6F 6E 
16841  7D91 2F 44 69 73 
16841  7D95 74 61 6E 63 
16841  7D99 65 20 43 61 
16841  7D9D 6C 63 75 6C 
16841  7DA1 61 74 6F 72 
16841  7DA5 0A 00 
16842  7DA7 20 20 20 35 _s129: .db "   5 = Galaxy 'Region Name' Map\n", 0
16842  7DAB 20 3D 20 47 
16842  7DAF 61 6C 61 78 
16842  7DB3 79 20 27 52 
16842  7DB7 65 67 69 6F 
16842  7DBB 6E 20 4E 61 
16842  7DBF 6D 65 27 20 
16842  7DC3 4D 61 70 0A 
16842  7DC7 00 
16843  7DC8 0A 20 20 20 _s130: .db "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", 0
16843  7DCC 20 20 43 6F 
16843  7DD0 6D 70 75 74 
16843  7DD4 65 72 20 52 
16843  7DD8 65 63 6F 72 
16843  7DDC 64 20 6F 66 
16843  7DE0 20 47 61 6C 
16843  7DE4 61 78 79 20 
16843  7DE8 66 6F 72 20 
16843  7DEC 51 75 61 64 
16843  7DF0 72 61 6E 74 
16843  7DF4 20 25 64 2C 
16843  7DF8 25 64 0A 0A 
16843  7DFC 00 
16844  7DFD 20 20 20 20 _s131: .db "     1     2     3     4     5     6     7     8", 0
16844  7E01 20 31 20 20 
16844  7E05 20 20 20 32 
16844  7E09 20 20 20 20 
16844  7E0D 20 33 20 20 
16844  7E11 20 20 20 34 
16844  7E15 20 20 20 20 
16844  7E19 20 35 20 20 
16844  7E1D 20 20 20 36 
16844  7E21 20 20 20 20 
16844  7E25 20 37 20 20 
16844  7E29 20 20 20 38 
16844  7E2D 00 
16845  7E2E 25 73 25 64 _s132: .db "%s%d", 0
16845  7E32 00 
16846  7E33 20 20 20 53 _s133: .db "   Status Report:\n", 0
16846  7E37 74 61 74 75 
16846  7E3B 73 20 52 65 
16846  7E3F 70 6F 72 74 
16846  7E43 3A 0A 00 
16847  7E46 4B 6C 69 6E _s134: .db "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 0
16847  7E4A 67 6F 6E 25 
16847  7E4E 73 20 4C 65 
16847  7E52 66 74 3A 20 
16847  7E56 25 64 0A 20 
16847  7E5A 4D 69 73 73 
16847  7E5E 69 6F 6E 20 
16847  7E62 6D 75 73 74 
16847  7E66 20 62 65 20 
16847  7E6A 63 6F 6D 70 
16847  7E6E 6C 65 74 65 
16847  7E72 64 20 69 6E 
16847  7E76 20 25 64 2E 
16847  7E7A 25 64 20 73 
16847  7E7E 74 61 72 64 
16847  7E82 61 74 65 73 
16847  7E86 0A 00 
16848  7E88 59 6F 75 72 _s135: .db "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n", 0
16848  7E8C 20 73 74 75 
16848  7E90 70 69 64 69 
16848  7E94 74 79 20 68 
16848  7E98 61 73 20 6C 
16848  7E9C 65 66 74 20 
16848  7EA0 79 6F 75 20 
16848  7EA4 6F 6E 20 79 
16848  7EA8 6F 75 72 20 
16848  7EAC 6F 77 6E 20 
16848  7EB0 69 6E 20 74 
16848  7EB4 68 65 20 67 
16848  7EB8 61 6C 61 78 
16848  7EBC 79 0A 20 2D 
16848  7EC0 2D 20 79 6F 
16848  7EC4 75 20 68 61 
16848  7EC8 76 65 20 6E 
16848  7ECC 6F 20 73 74 
16848  7ED0 61 72 62 61 
16848  7ED4 73 65 73 20 
16848  7ED8 6C 65 66 74 
16848  7EDC 21 0A 00 
16849  7EDF 54 68 65 20 _s136: .db "The Federation is maintaining %d starbase%s in the galaxy\n\n", 0
16849  7EE3 46 65 64 65 
16849  7EE7 72 61 74 69 
16849  7EEB 6F 6E 20 69 
16849  7EEF 73 20 6D 61 
16849  7EF3 69 6E 74 61 
16849  7EF7 69 6E 69 6E 
16849  7EFB 67 20 25 64 
16849  7EFF 20 73 74 61 
16849  7F03 72 62 61 73 
16849  7F07 65 25 73 20 
16849  7F0B 69 6E 20 74 
16849  7F0F 68 65 20 67 
16849  7F13 61 6C 61 78 
16849  7F17 79 0A 0A 00 
16850  7F1B 46 72 6F 6D _s137: .db "From Enterprise to Klingon battlecriuser%s:\n\n", 0
16850  7F1F 20 45 6E 74 
16850  7F23 65 72 70 72 
16850  7F27 69 73 65 20 
16850  7F2B 74 6F 20 4B 
16850  7F2F 6C 69 6E 67 
16850  7F33 6F 6E 20 62 
16850  7F37 61 74 74 6C 
16850  7F3B 65 63 72 69 
16850  7F3F 75 73 65 72 
16850  7F43 25 73 3A 0A 
16850  7F47 0A 00 
16851  7F49 4D 72 2E 20 _s138: .db "Mr. Spock reports,\n  'Sensors show no starbases in this quadrant.'\n", 0
16851  7F4D 53 70 6F 63 
16851  7F51 6B 20 72 65 
16851  7F55 70 6F 72 74 
16851  7F59 73 2C 0A 20 
16851  7F5D 20 27 53 65 
16851  7F61 6E 73 6F 72 
16851  7F65 73 20 73 68 
16851  7F69 6F 77 20 6E 
16851  7F6D 6F 20 73 74 
16851  7F71 61 72 62 61 
16851  7F75 73 65 73 20 
16851  7F79 69 6E 20 74 
16851  7F7D 68 69 73 20 
16851  7F81 71 75 61 64 
16851  7F85 72 61 6E 74 
16851  7F89 2E 27 0A 00 
16852  7F8D 44 69 72 65 _s139: .db "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 0
16852  7F91 63 74 69 6F 
16852  7F95 6E 2F 44 69 
16852  7F99 73 74 61 6E 
16852  7F9D 63 65 20 43 
16852  7FA1 61 6C 63 75 
16852  7FA5 6C 61 74 6F 
16852  7FA9 72 0A 20 59 
16852  7FAD 6F 75 20 61 
16852  7FB1 72 65 20 61 
16852  7FB5 74 20 71 75 
16852  7FB9 61 64 72 61 
16852  7FBD 6E 74 20 25 
16852  7FC1 64 2C 25 64 
16852  7FC5 20 73 65 63 
16852  7FC9 74 6F 72 20 
16852  7FCD 25 64 2C 25 
16852  7FD1 64 0A 0A 20 
16852  7FD5 50 6C 65 61 
16852  7FD9 73 65 20 65 
16852  7FDD 6E 74 65 72 
16852  7FE1 20 69 6E 69 
16852  7FE5 74 69 61 6C 
16852  7FE9 20 58 20 63 
16852  7FED 6F 6F 72 64 
16852  7FF1 69 6E 61 74 
16852  7FF5 65 3A 20 00 
16853  7FF9 50 6C 65 61 _s140: .db "Please enter initial Y coordinate: ", 0
16853  7FFD 73 65 20 65 
16853  8001 6E 74 65 72 
16853  8005 20 69 6E 69 
16853  8009 74 69 61 6C 
16853  800D 20 59 20 63 
16853  8011 6F 6F 72 64 
16853  8015 69 6E 61 74 
16853  8019 65 3A 20 00 
16854  801D 50 6C 65 61 _s141: .db "Please enter final X coordinate: ", 0
16854  8021 73 65 20 65 
16854  8025 6E 74 65 72 
16854  8029 20 66 69 6E 
16854  802D 61 6C 20 58 
16854  8031 20 63 6F 6F 
16854  8035 72 64 69 6E 
16854  8039 61 74 65 3A 
16854  803D 20 00 
16855  803F 50 6C 65 61 _s142: .db "Please enter final Y coordinate: ", 0
16855  8043 73 65 20 65 
16855  8047 6E 74 65 72 
16855  804B 20 66 69 6E 
16855  804F 61 6C 20 59 
16855  8053 20 63 6F 6F 
16855  8057 72 64 69 6E 
16855  805B 61 74 65 3A 
16855  805F 20 00 
16856  8061 0A 20 20 20 _s143: .db "\n                   The Galaxy\n\n", 0
16856  8065 20 20 20 20 
16856  8069 20 20 20 20 
16856  806D 20 20 20 20 
16856  8071 20 20 20 20 
16856  8075 54 68 65 20 
16856  8079 47 61 6C 61 
16856  807D 78 79 0A 0A 
16856  8081 00 
16857  8082 20 20 20 20 _s144: .db "    1     2     3     4     5     6     7     8\n", 0
16857  8086 31 20 20 20 
16857  808A 20 20 32 20 
16857  808E 20 20 20 20 
16857  8092 33 20 20 20 
16857  8096 20 20 34 20 
16857  809A 20 20 20 20 
16857  809E 35 20 20 20 
16857  80A2 20 20 36 20 
16857  80A6 20 20 20 20 
16857  80AA 37 20 20 20 
16857  80AE 20 20 38 0A 
16857  80B2 00 
16858  80B3 25 73 25 64 _s145: .db "%s%d ", 0
16858  80B7 20 00 
16859  80B9 20 20 44 49 _s146: .db "  DIRECTION = ", 0
16859  80BD 52 45 43 54 
16859  80C1 49 4F 4E 20 
16859  80C5 3D 20 00 
16860  80C8 25 73 00    _s147: .db "%s", 0
16861  80CB 54 68 65 20 _s148: .db "The Enterprise has been destroyed. The Federation will be conquered.\n", 0
16861  80CF 45 6E 74 65 
16861  80D3 72 70 72 69 
16861  80D7 73 65 20 68 
16861  80DB 61 73 20 62 
16861  80DF 65 65 6E 20 
16861  80E3 64 65 73 74 
16861  80E7 72 6F 79 65 
16861  80EB 64 2E 20 54 
16861  80EF 68 65 20 46 
16861  80F3 65 64 65 72 
16861  80F7 61 74 69 6F 
16861  80FB 6E 20 77 69 
16861  80FF 6C 6C 20 62 
16861  8103 65 20 63 6F 
16861  8107 6E 71 75 65 
16861  810B 72 65 64 2E 
16861  810F 0A 00 
16862  8111 49 74 20 69 _s149: .db "It is stardate %d.\n\n", 0
16862  8115 73 20 73 74 
16862  8119 61 72 64 61 
16862  811D 74 65 20 25 
16862  8121 64 2E 0A 0A 
16862  8125 00 
16863  8126 54 68 65 72 _s150: .db "There were %d Klingon Battlecruisers left at the end of your mission.\n\n", 0
16863  812A 65 20 77 65 
16863  812E 72 65 20 25 
16863  8132 64 20 4B 6C 
16863  8136 69 6E 67 6F 
16863  813A 6E 20 42 61 
16863  813E 74 74 6C 65 
16863  8142 63 72 75 69 
16863  8146 73 65 72 73 
16863  814A 20 6C 65 66 
16863  814E 74 20 61 74 
16863  8152 20 74 68 65 
16863  8156 20 65 6E 64 
16863  815A 20 6F 66 20 
16863  815E 79 6F 75 72 
16863  8162 20 6D 69 73 
16863  8166 73 69 6F 6E 
16863  816A 2E 0A 0A 00 
16864  816E 43 6F 6E 67 _s151: .db "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n", 0
16864  8172 72 61 74 75 
16864  8176 6C 61 74 69 
16864  817A 6F 6E 73 2C 
16864  817E 20 43 61 70 
16864  8182 74 61 69 6E 
16864  8186 21 20 20 54 
16864  818A 68 65 20 6C 
16864  818E 61 73 74 20 
16864  8192 4B 6C 69 6E 
16864  8196 67 6F 6E 20 
16864  819A 42 61 74 74 
16864  819E 6C 65 20 43 
16864  81A2 72 75 69 73 
16864  81A6 65 72 0A 20 
16864  81AA 6D 65 6E 61 
16864  81AE 63 69 6E 67 
16864  81B2 20 74 68 65 
16864  81B6 20 46 65 64 
16864  81BA 65 72 61 74 
16864  81BE 69 6F 6E 20 
16864  81C2 68 61 73 20 
16864  81C6 62 65 65 6E 
16864  81CA 20 64 65 73 
16864  81CE 74 6F 79 65 
16864  81D2 64 2E 0A 00 
16865  81D6 59 6F 75 72 _s152: .db "Your efficiency rating is %s\n", 0
16865  81DA 20 65 66 66 
16865  81DE 69 63 69 65 
16865  81E2 6E 63 79 20 
16865  81E6 72 61 74 69 
16865  81EA 6E 67 20 69 
16865  81EE 73 20 25 73 
16865  81F2 0A 00 
16866  81F4 54 68 65 20 _s153: .db "The Federation is in need of a new starship commander", 0
16866  81F8 46 65 64 65 
16866  81FC 72 61 74 69 
16866  8200 6F 6E 20 69 
16866  8204 73 20 69 6E 
16866  8208 20 6E 65 65 
16866  820C 64 20 6F 66 
16866  8210 20 61 20 6E 
16866  8214 65 77 20 73 
16866  8218 74 61 72 73 
16866  821C 68 69 70 20 
16866  8220 63 6F 6D 6D 
16866  8224 61 6E 64 65 
16866  8228 72 00 
16867  822A 20 66 6F 72 _s154: .db " for a similar mission.\n", 0
16867  822E 20 61 20 73 
16867  8232 69 6D 69 6C 
16867  8236 61 72 20 6D 
16867  823A 69 73 73 69 
16867  823E 6F 6E 2E 0A 
16867  8242 00 
16868  8243 49 66 20 74 _s155: .db "If there is a volunteer, let him step forward and", 0
16868  8247 68 65 72 65 
16868  824B 20 69 73 20 
16868  824F 61 20 76 6F 
16868  8253 6C 75 6E 74 
16868  8257 65 65 72 2C 
16868  825B 20 6C 65 74 
16868  825F 20 68 69 6D 
16868  8263 20 73 74 65 
16868  8267 70 20 66 6F 
16868  826B 72 77 61 72 
16868  826F 64 20 61 6E 
16868  8273 64 00 
16869  8275 20 65 6E 74 _s156: .db " enter 'aye': ", 0
16869  8279 65 72 20 27 
16869  827D 61 79 65 27 
16869  8281 3A 20 00 
16870  8284 53 74 61 72 _s157: .db "Starbase shields protect the Enterprise\n", 0
16870  8288 62 61 73 65 
16870  828C 20 73 68 69 
16870  8290 65 6C 64 73 
16870  8294 20 70 72 6F 
16870  8298 74 65 63 74 
16870  829C 20 74 68 65 
16870  82A0 20 45 6E 74 
16870  82A4 65 72 70 72 
16870  82A8 69 73 65 0A 
16870  82AC 00 
16871  82AD 25 64 20 75 _s158: .db "%d unit hit on Enterprise from sector %d, %d\n", 0
16871  82B1 6E 69 74 20 
16871  82B5 68 69 74 20 
16871  82B9 6F 6E 20 45 
16871  82BD 6E 74 65 72 
16871  82C1 70 72 69 73 
16871  82C5 65 20 66 72 
16871  82C9 6F 6D 20 73 
16871  82CD 65 63 74 6F 
16871  82D1 72 20 25 64 
16871  82D5 2C 20 25 64 
16871  82D9 0A 00 
16872  82DB 20 20 20 20 _s159: .db "    <Shields down to %d units>\n\n", 0
16872  82DF 3C 53 68 69 
16872  82E3 65 6C 64 73 
16872  82E7 20 64 6F 77 
16872  82EB 6E 20 74 6F 
16872  82EF 20 25 64 20 
16872  82F3 75 6E 69 74 
16872  82F7 73 3E 0A 0A 
16872  82FB 00 
16873  82FC 44 61 6D 61 _s160: .db "Damage Control reports\n'%s' damaged by hit\n\n", 0
16873  8300 67 65 20 43 
16873  8304 6F 6E 74 72 
16873  8308 6F 6C 20 72 
16873  830C 65 70 6F 72 
16873  8310 74 73 0A 27 
16873  8314 25 73 27 20 
16873  8318 64 61 6D 61 
16873  831C 67 65 64 20 
16873  8320 62 79 20 68 
16873  8324 69 74 0A 0A 
16873  8328 00 
16874  8329 20 20 20 20 _s161: .db "    %s repair completed\n\n", 0
16874  832D 25 73 20 72 
16874  8331 65 70 61 69 
16874  8335 72 20 63 6F 
16874  8339 6D 70 6C 65 
16874  833D 74 65 64 0A 
16874  8341 0A 00 
16875  8343 20 20 20 20 _s162: .db "    %s damaged\n\n", 0
16875  8347 25 73 20 64 
16875  834B 61 6D 61 67 
16875  834F 65 64 0A 0A 
16875  8353 00 
16876  8354 20 20 20 20 _s163: .db "    %s state of repair improved\n\n", 0
16876  8358 25 73 20 73 
16876  835C 74 61 74 65 
16876  8360 20 6F 66 20 
16876  8364 72 65 70 61 
16876  8368 69 72 20 69 
16876  836C 6D 70 72 6F 
16876  8370 76 65 64 0A 
16876  8374 0A 00 
16877  8376 20 49 00    _s164: .db " I", 0
16878  8379 20 49 49 00 _s165: .db " II", 0
16879  837D 20 49 49 49 _s166: .db " III", 0
16879  8381 00 
16880  8382 20 49 56 00 _s167: .db " IV", 0
16881  8386 55 6E 6B 6E _s168: .db "Unknown", 0
16881  838A 6F 77 6E 00 
16882  838E 55 6E 65 78 _s169: .db "Unexpected format in printf.", 0
16882  8392 70 65 63 74 
16882  8396 65 64 20 66 
16882  839A 6F 72 6D 61 
16882  839E 74 20 69 6E 
16882  83A2 20 70 72 69 
16882  83A6 6E 74 66 2E 
16882  83AA 00 
16883  83AB 45 72 72 6F _s170: .db "Error: Unknown argument type.\n", 0
16883  83AF 72 3A 20 55 
16883  83B3 6E 6B 6E 6F 
16883  83B7 77 6E 20 61 
16883  83BB 72 67 75 6D 
16883  83BF 65 6E 74 20 
16883  83C3 74 79 70 65 
16883  83C7 2E 0A 00 
16884  83CA             
16885  83CA CC 83       _heap_top: .dw _heap
16886  83CC 00          _heap: .db 0
16887  83CD             ; --- END DATA SEGMENT
16888  83CD             
16889  83CD             .end
tasm: Number of errors = 0
