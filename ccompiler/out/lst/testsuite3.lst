0001   0000             ; --- FILENAME: ctestsuite/testsuite3.c
0002   0000             ; --- DATE:     24-10-2025 at 20:03:06
0003   0000             .include "lib/asm/kernel.exp"
0001+  0000             fdc_al_restore   .EQU  $0000
0002+  0000             fdc_al_step      .EQU  $0001
0003+  0000             fdc_al_step_in   .EQU  $0002
0004+  0000             fdc_al_step_out  .EQU  $0003
0005+  0000             fdc_al_seek      .EQU  $0004
0006+  0000             fdc_al_format_128 .EQU  $0005
0007+  0000             fdc_al_formatdisk_128 .EQU  $0006
0008+  0000             fdc_al_format_512 .EQU  $0007
0009+  0000             fdc_al_formatdisk_512 .EQU  $0008
0010+  0000             fdc_al_read_addr .EQU  $0009
0011+  0000             fdc_al_read_track .EQU  $000a
0012+  0000             fdc_al_read_sect .EQU  $000b
0013+  0000             fdc_al_write_sect .EQU  $000c
0014+  0000             fdc_al_force_int .EQU  $000d
0015+  0000             fdc_al_status0   .EQU  $000e
0016+  0000             fdc_al_status1   .EQU  $000f
0017+  0000             noname._til311_display .EQU  $ffb0
0018+  0000             noname._fdc_config .EQU  $ffc0
0019+  0000             noname._fdc_status_0 .EQU  $ffc1
0020+  0000             noname._fdc_stat_cmd .EQU  $ffc8
0021+  0000             sys_break        .EQU  $0000
0022+  0000             sys_rtc          .EQU  $0001
0023+  0000             sys_ide          .EQU  $0002
0024+  0000             sys_io           .EQU  $0003
0025+  0000             sys_filesystem   .EQU  $0004
0026+  0000             sys_create_proc  .EQU  $0005
0027+  0000             sys_list_proc    .EQU  $0006
0028+  0000             sys_datetime     .EQU  $0007
0029+  0000             sys_reboot       .EQU  $0008
0030+  0000             sys_pause_proc   .EQU  $0009
0031+  0000             sys_resume_proc  .EQU  $000a
0032+  0000             sys_terminate_proc .EQU  $000b
0033+  0000             sys_system       .EQU  $000c
0034+  0000             sys_fdc          .EQU  $000d
0035+  0000             text_org         .EQU  $0400
0004   0000             .include "lib/asm/bios.exp"
0001+  0000             bios_reset_vector .equ  $01c0
0002+  0000             ide_buffer       .equ  $8204
0003+  0000             boot_origin      .equ  $8004
0004+  0000             bios_uart        .equ  $0002
0005+  0000             bios_ide         .equ  $0003
0005   0000             
0006   0000             ; --- BEGIN TEXT SEGMENT
0007   0400             .org text_org
0008   0400             main:
0009   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0010   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0011   0408             ; int pass = 1; 
0012   0408 52 02 00      sub sp, 2
0013   040B             ; --- START LOCAL VAR INITIALIZATION
0014   040B FA FF FF      lea d, [bp + -1] ; $pass
0015   040E DA            push d
0016   040F FD 2E 01 00   mov32 cb, $00000001
0016   0413 00 00 
0017   0415 E7            pop d
0018   0416 FD 43         mov [d], b
0019   0418             ; --- END LOCAL VAR INITIALIZATION
0020   0418             ; struct s1 ss[5]; 
0021   0418 52 E3 03      sub sp, 995
0022   041B             ; printf("\nassigning values...\n"); 
0023   041B             ; --- START FUNCTION CALL
0024   041B 26 5C 19      mov b, _s0 ; "\nassigning values...\n"
0025   041E FD AB         swp b
0026   0420 D8            push b
0027   0421 07 20 10      call printf
0028   0424 51 02 00      add sp, 2
0029   0427             ; --- END FUNCTION CALL
0030   0427             ; ss[0].c = 'a'; 
0031   0427 FA 1C FC      lea d, [bp + -996] ; $ss
0032   042A D7            push a
0033   042B DA            push d
0034   042C FD 2E 00 00   mov32 cb, $00000000
0034   0430 00 00 
0035   0432 E7            pop d
0036   0433 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0037   0437 E4            pop a
0038   0438 58 00 00      add d, 0
0039   043B DA            push d
0040   043C FD 2E 61 00   mov32 cb, $00000061
0040   0440 00 00 
0041   0442 E7            pop d
0042   0443 FD 3E         mov [d], bl
0043   0445             ; ss[0].i = 123; 
0044   0445 FA 1C FC      lea d, [bp + -996] ; $ss
0045   0448 D7            push a
0046   0449 DA            push d
0047   044A FD 2E 00 00   mov32 cb, $00000000
0047   044E 00 00 
0048   0450 E7            pop d
0049   0451 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0050   0455 E4            pop a
0051   0456 58 01 00      add d, 1
0052   0459 DA            push d
0053   045A FD 2E 7B 00   mov32 cb, $0000007b
0053   045E 00 00 
0054   0460 E7            pop d
0055   0461 FD 43         mov [d], b
0056   0463             ; ss[0].a[0] = 555; 
0057   0463 FA 1C FC      lea d, [bp + -996] ; $ss
0058   0466 D7            push a
0059   0467 DA            push d
0060   0468 FD 2E 00 00   mov32 cb, $00000000
0060   046C 00 00 
0061   046E E7            pop d
0062   046F FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0063   0473 E4            pop a
0064   0474 58 03 00      add d, 3
0065   0477 D7            push a
0066   0478 DA            push d
0067   0479 FD 2E 00 00   mov32 cb, $00000000
0067   047D 00 00 
0068   047F E7            pop d
0069   0480 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0070   0484 E4            pop a
0071   0485 DA            push d
0072   0486 FD 2E 2B 02   mov32 cb, $0000022b
0072   048A 00 00 
0073   048C E7            pop d
0074   048D FD 43         mov [d], b
0075   048F             ; ss[0].a[1] = 666; 
0076   048F FA 1C FC      lea d, [bp + -996] ; $ss
0077   0492 D7            push a
0078   0493 DA            push d
0079   0494 FD 2E 00 00   mov32 cb, $00000000
0079   0498 00 00 
0080   049A E7            pop d
0081   049B FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0082   049F E4            pop a
0083   04A0 58 03 00      add d, 3
0084   04A3 D7            push a
0085   04A4 DA            push d
0086   04A5 FD 2E 01 00   mov32 cb, $00000001
0086   04A9 00 00 
0087   04AB E7            pop d
0088   04AC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0089   04B0 E4            pop a
0090   04B1 DA            push d
0091   04B2 FD 2E 9A 02   mov32 cb, $0000029a
0091   04B6 00 00 
0092   04B8 E7            pop d
0093   04B9 FD 43         mov [d], b
0094   04BB             ; ss[0].a[2] = 777; 
0095   04BB FA 1C FC      lea d, [bp + -996] ; $ss
0096   04BE D7            push a
0097   04BF DA            push d
0098   04C0 FD 2E 00 00   mov32 cb, $00000000
0098   04C4 00 00 
0099   04C6 E7            pop d
0100   04C7 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0101   04CB E4            pop a
0102   04CC 58 03 00      add d, 3
0103   04CF D7            push a
0104   04D0 DA            push d
0105   04D1 FD 2E 02 00   mov32 cb, $00000002
0105   04D5 00 00 
0106   04D7 E7            pop d
0107   04D8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0108   04DC E4            pop a
0109   04DD DA            push d
0110   04DE FD 2E 09 03   mov32 cb, $00000309
0110   04E2 00 00 
0111   04E4 E7            pop d
0112   04E5 FD 43         mov [d], b
0113   04E7             ; ss[0].b[0] = 100; 
0114   04E7 FA 1C FC      lea d, [bp + -996] ; $ss
0115   04EA D7            push a
0116   04EB DA            push d
0117   04EC FD 2E 00 00   mov32 cb, $00000000
0117   04F0 00 00 
0118   04F2 E7            pop d
0119   04F3 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0120   04F7 E4            pop a
0121   04F8 58 17 00      add d, 23
0122   04FB D7            push a
0123   04FC DA            push d
0124   04FD FD 2E 00 00   mov32 cb, $00000000
0124   0501 00 00 
0125   0503 E7            pop d
0126   0504 5A            add d, b
0127   0505 E4            pop a
0128   0506 DA            push d
0129   0507 FD 2E 64 00   mov32 cb, $00000064
0129   050B 00 00 
0130   050D E7            pop d
0131   050E FD 3E         mov [d], bl
0132   0510             ; ss[0].b[1] = 200; 
0133   0510 FA 1C FC      lea d, [bp + -996] ; $ss
0134   0513 D7            push a
0135   0514 DA            push d
0136   0515 FD 2E 00 00   mov32 cb, $00000000
0136   0519 00 00 
0137   051B E7            pop d
0138   051C FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0139   0520 E4            pop a
0140   0521 58 17 00      add d, 23
0141   0524 D7            push a
0142   0525 DA            push d
0143   0526 FD 2E 01 00   mov32 cb, $00000001
0143   052A 00 00 
0144   052C E7            pop d
0145   052D 5A            add d, b
0146   052E E4            pop a
0147   052F DA            push d
0148   0530 FD 2E C8 00   mov32 cb, $000000c8
0148   0534 00 00 
0149   0536 E7            pop d
0150   0537 FD 3E         mov [d], bl
0151   0539             ; ss[0].b[2] = 30; 
0152   0539 FA 1C FC      lea d, [bp + -996] ; $ss
0153   053C D7            push a
0154   053D DA            push d
0155   053E FD 2E 00 00   mov32 cb, $00000000
0155   0542 00 00 
0156   0544 E7            pop d
0157   0545 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0158   0549 E4            pop a
0159   054A 58 17 00      add d, 23
0160   054D D7            push a
0161   054E DA            push d
0162   054F FD 2E 02 00   mov32 cb, $00000002
0162   0553 00 00 
0163   0555 E7            pop d
0164   0556 5A            add d, b
0165   0557 E4            pop a
0166   0558 DA            push d
0167   0559 FD 2E 1E 00   mov32 cb, $0000001e
0167   055D 00 00 
0168   055F E7            pop d
0169   0560 FD 3E         mov [d], bl
0170   0562             ; ss[3].s2[3].cc = 'z'; 
0171   0562 FA 1C FC      lea d, [bp + -996] ; $ss
0172   0565 D7            push a
0173   0566 DA            push d
0174   0567 FD 2E 03 00   mov32 cb, $00000003
0174   056B 00 00 
0175   056D E7            pop d
0176   056E FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0177   0572 E4            pop a
0178   0573 58 21 00      add d, 33
0179   0576 D7            push a
0180   0577 DA            push d
0181   0578 FD 2E 03 00   mov32 cb, $00000003
0181   057C 00 00 
0182   057E E7            pop d
0183   057F FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0184   0583 E4            pop a
0185   0584 58 00 00      add d, 0
0186   0587 DA            push d
0187   0588 FD 2E 7A 00   mov32 cb, $0000007a
0187   058C 00 00 
0188   058E E7            pop d
0189   058F FD 3E         mov [d], bl
0190   0591             ; ss[3].s2[3].ii = 999; 
0191   0591 FA 1C FC      lea d, [bp + -996] ; $ss
0192   0594 D7            push a
0193   0595 DA            push d
0194   0596 FD 2E 03 00   mov32 cb, $00000003
0194   059A 00 00 
0195   059C E7            pop d
0196   059D FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0197   05A1 E4            pop a
0198   05A2 58 21 00      add d, 33
0199   05A5 D7            push a
0200   05A6 DA            push d
0201   05A7 FD 2E 03 00   mov32 cb, $00000003
0201   05AB 00 00 
0202   05AD E7            pop d
0203   05AE FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0204   05B2 E4            pop a
0205   05B3 58 01 00      add d, 1
0206   05B6 DA            push d
0207   05B7 FD 2E E7 03   mov32 cb, $000003e7
0207   05BB 00 00 
0208   05BD E7            pop d
0209   05BE FD 43         mov [d], b
0210   05C0             ; ss[3].s2[3].cc2[0] = 255; 
0211   05C0 FA 1C FC      lea d, [bp + -996] ; $ss
0212   05C3 D7            push a
0213   05C4 DA            push d
0214   05C5 FD 2E 03 00   mov32 cb, $00000003
0214   05C9 00 00 
0215   05CB E7            pop d
0216   05CC FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0217   05D0 E4            pop a
0218   05D1 58 21 00      add d, 33
0219   05D4 D7            push a
0220   05D5 DA            push d
0221   05D6 FD 2E 03 00   mov32 cb, $00000003
0221   05DA 00 00 
0222   05DC E7            pop d
0223   05DD FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0224   05E1 E4            pop a
0225   05E2 58 03 00      add d, 3
0226   05E5 D7            push a
0227   05E6 DA            push d
0228   05E7 FD 2E 00 00   mov32 cb, $00000000
0228   05EB 00 00 
0229   05ED E7            pop d
0230   05EE 5A            add d, b
0231   05EF E4            pop a
0232   05F0 DA            push d
0233   05F1 FD 2E FF 00   mov32 cb, $000000ff
0233   05F5 00 00 
0234   05F7 E7            pop d
0235   05F8 FD 3E         mov [d], bl
0236   05FA             ; ss[3].s2[3].cc2[1] = 128; 
0237   05FA FA 1C FC      lea d, [bp + -996] ; $ss
0238   05FD D7            push a
0239   05FE DA            push d
0240   05FF FD 2E 03 00   mov32 cb, $00000003
0240   0603 00 00 
0241   0605 E7            pop d
0242   0606 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0243   060A E4            pop a
0244   060B 58 21 00      add d, 33
0245   060E D7            push a
0246   060F DA            push d
0247   0610 FD 2E 03 00   mov32 cb, $00000003
0247   0614 00 00 
0248   0616 E7            pop d
0249   0617 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0250   061B E4            pop a
0251   061C 58 03 00      add d, 3
0252   061F D7            push a
0253   0620 DA            push d
0254   0621 FD 2E 01 00   mov32 cb, $00000001
0254   0625 00 00 
0255   0627 E7            pop d
0256   0628 5A            add d, b
0257   0629 E4            pop a
0258   062A DA            push d
0259   062B FD 2E 80 00   mov32 cb, $00000080
0259   062F 00 00 
0260   0631 E7            pop d
0261   0632 FD 3E         mov [d], bl
0262   0634             ; ss[3].s2[3].cc2[2] = 100; 
0263   0634 FA 1C FC      lea d, [bp + -996] ; $ss
0264   0637 D7            push a
0265   0638 DA            push d
0266   0639 FD 2E 03 00   mov32 cb, $00000003
0266   063D 00 00 
0267   063F E7            pop d
0268   0640 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0269   0644 E4            pop a
0270   0645 58 21 00      add d, 33
0271   0648 D7            push a
0272   0649 DA            push d
0273   064A FD 2E 03 00   mov32 cb, $00000003
0273   064E 00 00 
0274   0650 E7            pop d
0275   0651 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0276   0655 E4            pop a
0277   0656 58 03 00      add d, 3
0278   0659 D7            push a
0279   065A DA            push d
0280   065B FD 2E 02 00   mov32 cb, $00000002
0280   065F 00 00 
0281   0661 E7            pop d
0282   0662 5A            add d, b
0283   0663 E4            pop a
0284   0664 DA            push d
0285   0665 FD 2E 64 00   mov32 cb, $00000064
0285   0669 00 00 
0286   066B E7            pop d
0287   066C FD 3E         mov [d], bl
0288   066E             ; ss[3].s2[3].ii2[0] = 65535; 
0289   066E FA 1C FC      lea d, [bp + -996] ; $ss
0290   0671 D7            push a
0291   0672 DA            push d
0292   0673 FD 2E 03 00   mov32 cb, $00000003
0292   0677 00 00 
0293   0679 E7            pop d
0294   067A FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0295   067E E4            pop a
0296   067F 58 21 00      add d, 33
0297   0682 D7            push a
0298   0683 DA            push d
0299   0684 FD 2E 03 00   mov32 cb, $00000003
0299   0688 00 00 
0300   068A E7            pop d
0301   068B FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0302   068F E4            pop a
0303   0690 58 0D 00      add d, 13
0304   0693 D7            push a
0305   0694 DA            push d
0306   0695 FD 2E 00 00   mov32 cb, $00000000
0306   0699 00 00 
0307   069B E7            pop d
0308   069C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0309   06A0 E4            pop a
0310   06A1 DA            push d
0311   06A2 FD 2E FF FF   mov32 cb, $0000ffff
0311   06A6 00 00 
0312   06A8 E7            pop d
0313   06A9 FD 43         mov [d], b
0314   06AB             ; ss[3].s2[3].ii2[1] = 50000; 
0315   06AB FA 1C FC      lea d, [bp + -996] ; $ss
0316   06AE D7            push a
0317   06AF DA            push d
0318   06B0 FD 2E 03 00   mov32 cb, $00000003
0318   06B4 00 00 
0319   06B6 E7            pop d
0320   06B7 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0321   06BB E4            pop a
0322   06BC 58 21 00      add d, 33
0323   06BF D7            push a
0324   06C0 DA            push d
0325   06C1 FD 2E 03 00   mov32 cb, $00000003
0325   06C5 00 00 
0326   06C7 E7            pop d
0327   06C8 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0328   06CC E4            pop a
0329   06CD 58 0D 00      add d, 13
0330   06D0 D7            push a
0331   06D1 DA            push d
0332   06D2 FD 2E 01 00   mov32 cb, $00000001
0332   06D6 00 00 
0333   06D8 E7            pop d
0334   06D9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0335   06DD E4            pop a
0336   06DE DA            push d
0337   06DF FD 2E 50 C3   mov32 cb, $0000c350
0337   06E3 00 00 
0338   06E5 E7            pop d
0339   06E6 FD 43         mov [d], b
0340   06E8             ; ss[3].s2[3].ii2[2] = 20000; 
0341   06E8 FA 1C FC      lea d, [bp + -996] ; $ss
0342   06EB D7            push a
0343   06EC DA            push d
0344   06ED FD 2E 03 00   mov32 cb, $00000003
0344   06F1 00 00 
0345   06F3 E7            pop d
0346   06F4 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0347   06F8 E4            pop a
0348   06F9 58 21 00      add d, 33
0349   06FC D7            push a
0350   06FD DA            push d
0351   06FE FD 2E 03 00   mov32 cb, $00000003
0351   0702 00 00 
0352   0704 E7            pop d
0353   0705 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0354   0709 E4            pop a
0355   070A 58 0D 00      add d, 13
0356   070D D7            push a
0357   070E DA            push d
0358   070F FD 2E 02 00   mov32 cb, $00000002
0358   0713 00 00 
0359   0715 E7            pop d
0360   0716 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0361   071A E4            pop a
0362   071B DA            push d
0363   071C FD 2E 20 4E   mov32 cb, $00004e20
0363   0720 00 00 
0364   0722 E7            pop d
0365   0723 FD 43         mov [d], b
0366   0725             ; ss[3].cc2 = 'b'; 
0367   0725 FA 1C FC      lea d, [bp + -996] ; $ss
0368   0728 D7            push a
0369   0729 DA            push d
0370   072A FD 2E 03 00   mov32 cb, $00000003
0370   072E 00 00 
0371   0730 E7            pop d
0372   0731 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0373   0735 E4            pop a
0374   0736 58 C6 00      add d, 198
0375   0739 DA            push d
0376   073A FD 2E 62 00   mov32 cb, $00000062
0376   073E 00 00 
0377   0740 E7            pop d
0378   0741 FD 3E         mov [d], bl
0379   0743             ; printf("printing assignments...\n"); 
0380   0743             ; --- START FUNCTION CALL
0381   0743 26 72 19      mov b, _s1 ; "printing assignments...\n"
0382   0746 FD AB         swp b
0383   0748 D8            push b
0384   0749 07 20 10      call printf
0385   074C 51 02 00      add sp, 2
0386   074F             ; --- END FUNCTION CALL
0387   074F             ; printf("%c\n", ss[0].c); 
0388   074F             ; --- START FUNCTION CALL
0389   074F FA 1C FC      lea d, [bp + -996] ; $ss
0390   0752 D7            push a
0391   0753 DA            push d
0392   0754 FD 2E 00 00   mov32 cb, $00000000
0392   0758 00 00 
0393   075A E7            pop d
0394   075B FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0395   075F E4            pop a
0396   0760 58 00 00      add d, 0
0397   0763 32            mov bl, [d]
0398   0764 A7 00         mov bh, 0
0399   0766 38 00 00      mov c, 0
0400   0769 FD AB         swp b
0401   076B D8            push b
0402   076C 26 8B 19      mov b, _s2 ; "%c\n"
0403   076F FD AB         swp b
0404   0771 D8            push b
0405   0772 07 20 10      call printf
0406   0775 51 03 00      add sp, 3
0407   0778             ; --- END FUNCTION CALL
0408   0778             ; printf("%d\n", ss[0].i); 
0409   0778             ; --- START FUNCTION CALL
0410   0778 FA 1C FC      lea d, [bp + -996] ; $ss
0411   077B D7            push a
0412   077C DA            push d
0413   077D FD 2E 00 00   mov32 cb, $00000000
0413   0781 00 00 
0414   0783 E7            pop d
0415   0784 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0416   0788 E4            pop a
0417   0789 58 01 00      add d, 1
0418   078C 2A            mov b, [d]
0419   078D 38 00 00      mov c, 0
0420   0790 FD AB         swp b
0421   0792 D8            push b
0422   0793 26 8F 19      mov b, _s3 ; "%d\n"
0423   0796 FD AB         swp b
0424   0798 D8            push b
0425   0799 07 20 10      call printf
0426   079C 51 04 00      add sp, 4
0427   079F             ; --- END FUNCTION CALL
0428   079F             ; printf("%d\n", ss[0].a[0]); 
0429   079F             ; --- START FUNCTION CALL
0430   079F FA 1C FC      lea d, [bp + -996] ; $ss
0431   07A2 D7            push a
0432   07A3 DA            push d
0433   07A4 FD 2E 00 00   mov32 cb, $00000000
0433   07A8 00 00 
0434   07AA E7            pop d
0435   07AB FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0436   07AF E4            pop a
0437   07B0 58 03 00      add d, 3
0438   07B3 D7            push a
0439   07B4 DA            push d
0440   07B5 FD 2E 00 00   mov32 cb, $00000000
0440   07B9 00 00 
0441   07BB E7            pop d
0442   07BC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0443   07C0 E4            pop a
0444   07C1 2A            mov b, [d]
0445   07C2 38 00 00      mov c, 0
0446   07C5 FD AB         swp b
0447   07C7 D8            push b
0448   07C8 26 8F 19      mov b, _s3 ; "%d\n"
0449   07CB FD AB         swp b
0450   07CD D8            push b
0451   07CE 07 20 10      call printf
0452   07D1 51 04 00      add sp, 4
0453   07D4             ; --- END FUNCTION CALL
0454   07D4             ; printf("%d\n", ss[0].a[1]); 
0455   07D4             ; --- START FUNCTION CALL
0456   07D4 FA 1C FC      lea d, [bp + -996] ; $ss
0457   07D7 D7            push a
0458   07D8 DA            push d
0459   07D9 FD 2E 00 00   mov32 cb, $00000000
0459   07DD 00 00 
0460   07DF E7            pop d
0461   07E0 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0462   07E4 E4            pop a
0463   07E5 58 03 00      add d, 3
0464   07E8 D7            push a
0465   07E9 DA            push d
0466   07EA FD 2E 01 00   mov32 cb, $00000001
0466   07EE 00 00 
0467   07F0 E7            pop d
0468   07F1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0469   07F5 E4            pop a
0470   07F6 2A            mov b, [d]
0471   07F7 38 00 00      mov c, 0
0472   07FA FD AB         swp b
0473   07FC D8            push b
0474   07FD 26 8F 19      mov b, _s3 ; "%d\n"
0475   0800 FD AB         swp b
0476   0802 D8            push b
0477   0803 07 20 10      call printf
0478   0806 51 04 00      add sp, 4
0479   0809             ; --- END FUNCTION CALL
0480   0809             ; printf("%d\n", ss[0].a[2]); 
0481   0809             ; --- START FUNCTION CALL
0482   0809 FA 1C FC      lea d, [bp + -996] ; $ss
0483   080C D7            push a
0484   080D DA            push d
0485   080E FD 2E 00 00   mov32 cb, $00000000
0485   0812 00 00 
0486   0814 E7            pop d
0487   0815 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0488   0819 E4            pop a
0489   081A 58 03 00      add d, 3
0490   081D D7            push a
0491   081E DA            push d
0492   081F FD 2E 02 00   mov32 cb, $00000002
0492   0823 00 00 
0493   0825 E7            pop d
0494   0826 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0495   082A E4            pop a
0496   082B 2A            mov b, [d]
0497   082C 38 00 00      mov c, 0
0498   082F FD AB         swp b
0499   0831 D8            push b
0500   0832 26 8F 19      mov b, _s3 ; "%d\n"
0501   0835 FD AB         swp b
0502   0837 D8            push b
0503   0838 07 20 10      call printf
0504   083B 51 04 00      add sp, 4
0505   083E             ; --- END FUNCTION CALL
0506   083E             ; printf("%d\n", ss[0].b[0]); 
0507   083E             ; --- START FUNCTION CALL
0508   083E FA 1C FC      lea d, [bp + -996] ; $ss
0509   0841 D7            push a
0510   0842 DA            push d
0511   0843 FD 2E 00 00   mov32 cb, $00000000
0511   0847 00 00 
0512   0849 E7            pop d
0513   084A FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0514   084E E4            pop a
0515   084F 58 17 00      add d, 23
0516   0852 D7            push a
0517   0853 DA            push d
0518   0854 FD 2E 00 00   mov32 cb, $00000000
0518   0858 00 00 
0519   085A E7            pop d
0520   085B 5A            add d, b
0521   085C E4            pop a
0522   085D 32            mov bl, [d]
0523   085E A7 00         mov bh, 0
0524   0860 38 00 00      mov c, 0
0525   0863 FD AB         swp b
0526   0865 D8            push b
0527   0866 26 8F 19      mov b, _s3 ; "%d\n"
0528   0869 FD AB         swp b
0529   086B D8            push b
0530   086C 07 20 10      call printf
0531   086F 51 03 00      add sp, 3
0532   0872             ; --- END FUNCTION CALL
0533   0872             ; printf("%d\n", ss[0].b[1]); 
0534   0872             ; --- START FUNCTION CALL
0535   0872 FA 1C FC      lea d, [bp + -996] ; $ss
0536   0875 D7            push a
0537   0876 DA            push d
0538   0877 FD 2E 00 00   mov32 cb, $00000000
0538   087B 00 00 
0539   087D E7            pop d
0540   087E FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0541   0882 E4            pop a
0542   0883 58 17 00      add d, 23
0543   0886 D7            push a
0544   0887 DA            push d
0545   0888 FD 2E 01 00   mov32 cb, $00000001
0545   088C 00 00 
0546   088E E7            pop d
0547   088F 5A            add d, b
0548   0890 E4            pop a
0549   0891 32            mov bl, [d]
0550   0892 A7 00         mov bh, 0
0551   0894 38 00 00      mov c, 0
0552   0897 FD AB         swp b
0553   0899 D8            push b
0554   089A 26 8F 19      mov b, _s3 ; "%d\n"
0555   089D FD AB         swp b
0556   089F D8            push b
0557   08A0 07 20 10      call printf
0558   08A3 51 03 00      add sp, 3
0559   08A6             ; --- END FUNCTION CALL
0560   08A6             ; printf("%d\n", ss[0].b[2]); 
0561   08A6             ; --- START FUNCTION CALL
0562   08A6 FA 1C FC      lea d, [bp + -996] ; $ss
0563   08A9 D7            push a
0564   08AA DA            push d
0565   08AB FD 2E 00 00   mov32 cb, $00000000
0565   08AF 00 00 
0566   08B1 E7            pop d
0567   08B2 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0568   08B6 E4            pop a
0569   08B7 58 17 00      add d, 23
0570   08BA D7            push a
0571   08BB DA            push d
0572   08BC FD 2E 02 00   mov32 cb, $00000002
0572   08C0 00 00 
0573   08C2 E7            pop d
0574   08C3 5A            add d, b
0575   08C4 E4            pop a
0576   08C5 32            mov bl, [d]
0577   08C6 A7 00         mov bh, 0
0578   08C8 38 00 00      mov c, 0
0579   08CB FD AB         swp b
0580   08CD D8            push b
0581   08CE 26 8F 19      mov b, _s3 ; "%d\n"
0582   08D1 FD AB         swp b
0583   08D3 D8            push b
0584   08D4 07 20 10      call printf
0585   08D7 51 03 00      add sp, 3
0586   08DA             ; --- END FUNCTION CALL
0587   08DA             ; printf("%c\n", ss[3].s2[3].cc); 
0588   08DA             ; --- START FUNCTION CALL
0589   08DA FA 1C FC      lea d, [bp + -996] ; $ss
0590   08DD D7            push a
0591   08DE DA            push d
0592   08DF FD 2E 03 00   mov32 cb, $00000003
0592   08E3 00 00 
0593   08E5 E7            pop d
0594   08E6 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0595   08EA E4            pop a
0596   08EB 58 21 00      add d, 33
0597   08EE D7            push a
0598   08EF DA            push d
0599   08F0 FD 2E 03 00   mov32 cb, $00000003
0599   08F4 00 00 
0600   08F6 E7            pop d
0601   08F7 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0602   08FB E4            pop a
0603   08FC 58 00 00      add d, 0
0604   08FF 32            mov bl, [d]
0605   0900 A7 00         mov bh, 0
0606   0902 38 00 00      mov c, 0
0607   0905 FD AB         swp b
0608   0907 D8            push b
0609   0908 26 8B 19      mov b, _s2 ; "%c\n"
0610   090B FD AB         swp b
0611   090D D8            push b
0612   090E 07 20 10      call printf
0613   0911 51 03 00      add sp, 3
0614   0914             ; --- END FUNCTION CALL
0615   0914             ; printf("%d\n", ss[3].s2[3].ii); 
0616   0914             ; --- START FUNCTION CALL
0617   0914 FA 1C FC      lea d, [bp + -996] ; $ss
0618   0917 D7            push a
0619   0918 DA            push d
0620   0919 FD 2E 03 00   mov32 cb, $00000003
0620   091D 00 00 
0621   091F E7            pop d
0622   0920 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0623   0924 E4            pop a
0624   0925 58 21 00      add d, 33
0625   0928 D7            push a
0626   0929 DA            push d
0627   092A FD 2E 03 00   mov32 cb, $00000003
0627   092E 00 00 
0628   0930 E7            pop d
0629   0931 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0630   0935 E4            pop a
0631   0936 58 01 00      add d, 1
0632   0939 2A            mov b, [d]
0633   093A 38 00 00      mov c, 0
0634   093D FD AB         swp b
0635   093F D8            push b
0636   0940 26 8F 19      mov b, _s3 ; "%d\n"
0637   0943 FD AB         swp b
0638   0945 D8            push b
0639   0946 07 20 10      call printf
0640   0949 51 04 00      add sp, 4
0641   094C             ; --- END FUNCTION CALL
0642   094C             ; printf("%u\n", ss[3].s2[3].cc2[0]); 
0643   094C             ; --- START FUNCTION CALL
0644   094C FA 1C FC      lea d, [bp + -996] ; $ss
0645   094F D7            push a
0646   0950 DA            push d
0647   0951 FD 2E 03 00   mov32 cb, $00000003
0647   0955 00 00 
0648   0957 E7            pop d
0649   0958 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0650   095C E4            pop a
0651   095D 58 21 00      add d, 33
0652   0960 D7            push a
0653   0961 DA            push d
0654   0962 FD 2E 03 00   mov32 cb, $00000003
0654   0966 00 00 
0655   0968 E7            pop d
0656   0969 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0657   096D E4            pop a
0658   096E 58 03 00      add d, 3
0659   0971 D7            push a
0660   0972 DA            push d
0661   0973 FD 2E 00 00   mov32 cb, $00000000
0661   0977 00 00 
0662   0979 E7            pop d
0663   097A 5A            add d, b
0664   097B E4            pop a
0665   097C 32            mov bl, [d]
0666   097D A7 00         mov bh, 0
0667   097F 38 00 00      mov c, 0
0668   0982 FD AB         swp b
0669   0984 D8            push b
0670   0985 26 93 19      mov b, _s4 ; "%u\n"
0671   0988 FD AB         swp b
0672   098A D8            push b
0673   098B 07 20 10      call printf
0674   098E 51 03 00      add sp, 3
0675   0991             ; --- END FUNCTION CALL
0676   0991             ; printf("%u\n", ss[3].s2[3].cc2[1]); 
0677   0991             ; --- START FUNCTION CALL
0678   0991 FA 1C FC      lea d, [bp + -996] ; $ss
0679   0994 D7            push a
0680   0995 DA            push d
0681   0996 FD 2E 03 00   mov32 cb, $00000003
0681   099A 00 00 
0682   099C E7            pop d
0683   099D FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0684   09A1 E4            pop a
0685   09A2 58 21 00      add d, 33
0686   09A5 D7            push a
0687   09A6 DA            push d
0688   09A7 FD 2E 03 00   mov32 cb, $00000003
0688   09AB 00 00 
0689   09AD E7            pop d
0690   09AE FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0691   09B2 E4            pop a
0692   09B3 58 03 00      add d, 3
0693   09B6 D7            push a
0694   09B7 DA            push d
0695   09B8 FD 2E 01 00   mov32 cb, $00000001
0695   09BC 00 00 
0696   09BE E7            pop d
0697   09BF 5A            add d, b
0698   09C0 E4            pop a
0699   09C1 32            mov bl, [d]
0700   09C2 A7 00         mov bh, 0
0701   09C4 38 00 00      mov c, 0
0702   09C7 FD AB         swp b
0703   09C9 D8            push b
0704   09CA 26 93 19      mov b, _s4 ; "%u\n"
0705   09CD FD AB         swp b
0706   09CF D8            push b
0707   09D0 07 20 10      call printf
0708   09D3 51 03 00      add sp, 3
0709   09D6             ; --- END FUNCTION CALL
0710   09D6             ; printf("%u\n", ss[3].s2[3].cc2[2]); 
0711   09D6             ; --- START FUNCTION CALL
0712   09D6 FA 1C FC      lea d, [bp + -996] ; $ss
0713   09D9 D7            push a
0714   09DA DA            push d
0715   09DB FD 2E 03 00   mov32 cb, $00000003
0715   09DF 00 00 
0716   09E1 E7            pop d
0717   09E2 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0718   09E6 E4            pop a
0719   09E7 58 21 00      add d, 33
0720   09EA D7            push a
0721   09EB DA            push d
0722   09EC FD 2E 03 00   mov32 cb, $00000003
0722   09F0 00 00 
0723   09F2 E7            pop d
0724   09F3 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0725   09F7 E4            pop a
0726   09F8 58 03 00      add d, 3
0727   09FB D7            push a
0728   09FC DA            push d
0729   09FD FD 2E 02 00   mov32 cb, $00000002
0729   0A01 00 00 
0730   0A03 E7            pop d
0731   0A04 5A            add d, b
0732   0A05 E4            pop a
0733   0A06 32            mov bl, [d]
0734   0A07 A7 00         mov bh, 0
0735   0A09 38 00 00      mov c, 0
0736   0A0C FD AB         swp b
0737   0A0E D8            push b
0738   0A0F 26 93 19      mov b, _s4 ; "%u\n"
0739   0A12 FD AB         swp b
0740   0A14 D8            push b
0741   0A15 07 20 10      call printf
0742   0A18 51 03 00      add sp, 3
0743   0A1B             ; --- END FUNCTION CALL
0744   0A1B             ; printf("%u\n", ss[3].s2[3].ii2[0]); 
0745   0A1B             ; --- START FUNCTION CALL
0746   0A1B FA 1C FC      lea d, [bp + -996] ; $ss
0747   0A1E D7            push a
0748   0A1F DA            push d
0749   0A20 FD 2E 03 00   mov32 cb, $00000003
0749   0A24 00 00 
0750   0A26 E7            pop d
0751   0A27 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0752   0A2B E4            pop a
0753   0A2C 58 21 00      add d, 33
0754   0A2F D7            push a
0755   0A30 DA            push d
0756   0A31 FD 2E 03 00   mov32 cb, $00000003
0756   0A35 00 00 
0757   0A37 E7            pop d
0758   0A38 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0759   0A3C E4            pop a
0760   0A3D 58 0D 00      add d, 13
0761   0A40 D7            push a
0762   0A41 DA            push d
0763   0A42 FD 2E 00 00   mov32 cb, $00000000
0763   0A46 00 00 
0764   0A48 E7            pop d
0765   0A49 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0766   0A4D E4            pop a
0767   0A4E 2A            mov b, [d]
0768   0A4F 38 00 00      mov c, 0
0769   0A52 FD AB         swp b
0770   0A54 D8            push b
0771   0A55 26 93 19      mov b, _s4 ; "%u\n"
0772   0A58 FD AB         swp b
0773   0A5A D8            push b
0774   0A5B 07 20 10      call printf
0775   0A5E 51 04 00      add sp, 4
0776   0A61             ; --- END FUNCTION CALL
0777   0A61             ; printf("%u\n", ss[3].s2[3].ii2[1]); 
0778   0A61             ; --- START FUNCTION CALL
0779   0A61 FA 1C FC      lea d, [bp + -996] ; $ss
0780   0A64 D7            push a
0781   0A65 DA            push d
0782   0A66 FD 2E 03 00   mov32 cb, $00000003
0782   0A6A 00 00 
0783   0A6C E7            pop d
0784   0A6D FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0785   0A71 E4            pop a
0786   0A72 58 21 00      add d, 33
0787   0A75 D7            push a
0788   0A76 DA            push d
0789   0A77 FD 2E 03 00   mov32 cb, $00000003
0789   0A7B 00 00 
0790   0A7D E7            pop d
0791   0A7E FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0792   0A82 E4            pop a
0793   0A83 58 0D 00      add d, 13
0794   0A86 D7            push a
0795   0A87 DA            push d
0796   0A88 FD 2E 01 00   mov32 cb, $00000001
0796   0A8C 00 00 
0797   0A8E E7            pop d
0798   0A8F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0799   0A93 E4            pop a
0800   0A94 2A            mov b, [d]
0801   0A95 38 00 00      mov c, 0
0802   0A98 FD AB         swp b
0803   0A9A D8            push b
0804   0A9B 26 93 19      mov b, _s4 ; "%u\n"
0805   0A9E FD AB         swp b
0806   0AA0 D8            push b
0807   0AA1 07 20 10      call printf
0808   0AA4 51 04 00      add sp, 4
0809   0AA7             ; --- END FUNCTION CALL
0810   0AA7             ; printf("%u\n", ss[3].s2[3].ii2[2]); 
0811   0AA7             ; --- START FUNCTION CALL
0812   0AA7 FA 1C FC      lea d, [bp + -996] ; $ss
0813   0AAA D7            push a
0814   0AAB DA            push d
0815   0AAC FD 2E 03 00   mov32 cb, $00000003
0815   0AB0 00 00 
0816   0AB2 E7            pop d
0817   0AB3 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0818   0AB7 E4            pop a
0819   0AB8 58 21 00      add d, 33
0820   0ABB D7            push a
0821   0ABC DA            push d
0822   0ABD FD 2E 03 00   mov32 cb, $00000003
0822   0AC1 00 00 
0823   0AC3 E7            pop d
0824   0AC4 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0825   0AC8 E4            pop a
0826   0AC9 58 0D 00      add d, 13
0827   0ACC D7            push a
0828   0ACD DA            push d
0829   0ACE FD 2E 02 00   mov32 cb, $00000002
0829   0AD2 00 00 
0830   0AD4 E7            pop d
0831   0AD5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0832   0AD9 E4            pop a
0833   0ADA 2A            mov b, [d]
0834   0ADB 38 00 00      mov c, 0
0835   0ADE FD AB         swp b
0836   0AE0 D8            push b
0837   0AE1 26 93 19      mov b, _s4 ; "%u\n"
0838   0AE4 FD AB         swp b
0839   0AE6 D8            push b
0840   0AE7 07 20 10      call printf
0841   0AEA 51 04 00      add sp, 4
0842   0AED             ; --- END FUNCTION CALL
0843   0AED             ; printf("%c\n", ss[3].cc2); 
0844   0AED             ; --- START FUNCTION CALL
0845   0AED FA 1C FC      lea d, [bp + -996] ; $ss
0846   0AF0 D7            push a
0847   0AF1 DA            push d
0848   0AF2 FD 2E 03 00   mov32 cb, $00000003
0848   0AF6 00 00 
0849   0AF8 E7            pop d
0850   0AF9 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0851   0AFD E4            pop a
0852   0AFE 58 C6 00      add d, 198
0853   0B01 32            mov bl, [d]
0854   0B02 A7 00         mov bh, 0
0855   0B04 38 00 00      mov c, 0
0856   0B07 FD AB         swp b
0857   0B09 D8            push b
0858   0B0A 26 8B 19      mov b, _s2 ; "%c\n"
0859   0B0D FD AB         swp b
0860   0B0F D8            push b
0861   0B10 07 20 10      call printf
0862   0B13 51 03 00      add sp, 3
0863   0B16             ; --- END FUNCTION CALL
0864   0B16             ; printf("checking results...\n");     
0865   0B16             ; --- START FUNCTION CALL
0866   0B16 26 97 19      mov b, _s5 ; "checking results...\n"
0867   0B19 FD AB         swp b
0868   0B1B D8            push b
0869   0B1C 07 20 10      call printf
0870   0B1F 51 02 00      add sp, 2
0871   0B22             ; --- END FUNCTION CALL
0872   0B22             ; pass = pass && ss[0].c == 'a'; 
0873   0B22 FA FF FF      lea d, [bp + -1] ; $pass
0874   0B25 DA            push d
0875   0B26 FA FF FF      lea d, [bp + -1] ; $pass
0876   0B29 2A            mov b, [d]
0877   0B2A 38 00 00      mov c, 0
0878   0B2D             ; --- START LOGICAL AND
0879   0B2D D7            push a
0880   0B2E 11            mov a, b
0881   0B2F FA 1C FC      lea d, [bp + -996] ; $ss
0882   0B32 D7            push a
0883   0B33 DA            push d
0884   0B34 FD 2E 00 00   mov32 cb, $00000000
0884   0B38 00 00 
0885   0B3A E7            pop d
0886   0B3B FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0887   0B3F E4            pop a
0888   0B40 58 00 00      add d, 0
0889   0B43 32            mov bl, [d]
0890   0B44 A7 00         mov bh, 0
0891   0B46 38 00 00      mov c, 0
0892   0B49             ; --- START RELATIONAL
0893   0B49 D7            push a
0894   0B4A 11            mov a, b
0895   0B4B FD 2E 61 00   mov32 cb, $00000061
0895   0B4F 00 00 
0896   0B51 B0            cmp a, b
0897   0B52 FD 71         seq ; ==
0898   0B54 E4            pop a
0899   0B55             ; --- END RELATIONAL
0900   0B55 FD A7         sand a, b
0901   0B57 E4            pop a
0902   0B58             ; --- END LOGICAL AND
0903   0B58 E7            pop d
0904   0B59 FD 43         mov [d], b
0905   0B5B             ; pass = pass && ss[0].i == 123; 
0906   0B5B FA FF FF      lea d, [bp + -1] ; $pass
0907   0B5E DA            push d
0908   0B5F FA FF FF      lea d, [bp + -1] ; $pass
0909   0B62 2A            mov b, [d]
0910   0B63 38 00 00      mov c, 0
0911   0B66             ; --- START LOGICAL AND
0912   0B66 D7            push a
0913   0B67 11            mov a, b
0914   0B68 FA 1C FC      lea d, [bp + -996] ; $ss
0915   0B6B D7            push a
0916   0B6C DA            push d
0917   0B6D FD 2E 00 00   mov32 cb, $00000000
0917   0B71 00 00 
0918   0B73 E7            pop d
0919   0B74 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0920   0B78 E4            pop a
0921   0B79 58 01 00      add d, 1
0922   0B7C 2A            mov b, [d]
0923   0B7D 38 00 00      mov c, 0
0924   0B80             ; --- START RELATIONAL
0925   0B80 D7            push a
0926   0B81 11            mov a, b
0927   0B82 FD 2E 7B 00   mov32 cb, $0000007b
0927   0B86 00 00 
0928   0B88 B0            cmp a, b
0929   0B89 FD 71         seq ; ==
0930   0B8B E4            pop a
0931   0B8C             ; --- END RELATIONAL
0932   0B8C FD A7         sand a, b
0933   0B8E E4            pop a
0934   0B8F             ; --- END LOGICAL AND
0935   0B8F E7            pop d
0936   0B90 FD 43         mov [d], b
0937   0B92             ; pass = pass && ss[0].a[0] == 555; 
0938   0B92 FA FF FF      lea d, [bp + -1] ; $pass
0939   0B95 DA            push d
0940   0B96 FA FF FF      lea d, [bp + -1] ; $pass
0941   0B99 2A            mov b, [d]
0942   0B9A 38 00 00      mov c, 0
0943   0B9D             ; --- START LOGICAL AND
0944   0B9D D7            push a
0945   0B9E 11            mov a, b
0946   0B9F FA 1C FC      lea d, [bp + -996] ; $ss
0947   0BA2 D7            push a
0948   0BA3 DA            push d
0949   0BA4 FD 2E 00 00   mov32 cb, $00000000
0949   0BA8 00 00 
0950   0BAA E7            pop d
0951   0BAB FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0952   0BAF E4            pop a
0953   0BB0 58 03 00      add d, 3
0954   0BB3 D7            push a
0955   0BB4 DA            push d
0956   0BB5 FD 2E 00 00   mov32 cb, $00000000
0956   0BB9 00 00 
0957   0BBB E7            pop d
0958   0BBC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0959   0BC0 E4            pop a
0960   0BC1 2A            mov b, [d]
0961   0BC2 38 00 00      mov c, 0
0962   0BC5             ; --- START RELATIONAL
0963   0BC5 D7            push a
0964   0BC6 11            mov a, b
0965   0BC7 FD 2E 2B 02   mov32 cb, $0000022b
0965   0BCB 00 00 
0966   0BCD B0            cmp a, b
0967   0BCE FD 71         seq ; ==
0968   0BD0 E4            pop a
0969   0BD1             ; --- END RELATIONAL
0970   0BD1 FD A7         sand a, b
0971   0BD3 E4            pop a
0972   0BD4             ; --- END LOGICAL AND
0973   0BD4 E7            pop d
0974   0BD5 FD 43         mov [d], b
0975   0BD7             ; pass = pass && ss[0].a[1] == 666; 
0976   0BD7 FA FF FF      lea d, [bp + -1] ; $pass
0977   0BDA DA            push d
0978   0BDB FA FF FF      lea d, [bp + -1] ; $pass
0979   0BDE 2A            mov b, [d]
0980   0BDF 38 00 00      mov c, 0
0981   0BE2             ; --- START LOGICAL AND
0982   0BE2 D7            push a
0983   0BE3 11            mov a, b
0984   0BE4 FA 1C FC      lea d, [bp + -996] ; $ss
0985   0BE7 D7            push a
0986   0BE8 DA            push d
0987   0BE9 FD 2E 00 00   mov32 cb, $00000000
0987   0BED 00 00 
0988   0BEF E7            pop d
0989   0BF0 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0990   0BF4 E4            pop a
0991   0BF5 58 03 00      add d, 3
0992   0BF8 D7            push a
0993   0BF9 DA            push d
0994   0BFA FD 2E 01 00   mov32 cb, $00000001
0994   0BFE 00 00 
0995   0C00 E7            pop d
0996   0C01 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0997   0C05 E4            pop a
0998   0C06 2A            mov b, [d]
0999   0C07 38 00 00      mov c, 0
1000   0C0A             ; --- START RELATIONAL
1001   0C0A D7            push a
1002   0C0B 11            mov a, b
1003   0C0C FD 2E 9A 02   mov32 cb, $0000029a
1003   0C10 00 00 
1004   0C12 B0            cmp a, b
1005   0C13 FD 71         seq ; ==
1006   0C15 E4            pop a
1007   0C16             ; --- END RELATIONAL
1008   0C16 FD A7         sand a, b
1009   0C18 E4            pop a
1010   0C19             ; --- END LOGICAL AND
1011   0C19 E7            pop d
1012   0C1A FD 43         mov [d], b
1013   0C1C             ; pass = pass && ss[0].a[2] == 777; 
1014   0C1C FA FF FF      lea d, [bp + -1] ; $pass
1015   0C1F DA            push d
1016   0C20 FA FF FF      lea d, [bp + -1] ; $pass
1017   0C23 2A            mov b, [d]
1018   0C24 38 00 00      mov c, 0
1019   0C27             ; --- START LOGICAL AND
1020   0C27 D7            push a
1021   0C28 11            mov a, b
1022   0C29 FA 1C FC      lea d, [bp + -996] ; $ss
1023   0C2C D7            push a
1024   0C2D DA            push d
1025   0C2E FD 2E 00 00   mov32 cb, $00000000
1025   0C32 00 00 
1026   0C34 E7            pop d
1027   0C35 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1028   0C39 E4            pop a
1029   0C3A 58 03 00      add d, 3
1030   0C3D D7            push a
1031   0C3E DA            push d
1032   0C3F FD 2E 02 00   mov32 cb, $00000002
1032   0C43 00 00 
1033   0C45 E7            pop d
1034   0C46 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1035   0C4A E4            pop a
1036   0C4B 2A            mov b, [d]
1037   0C4C 38 00 00      mov c, 0
1038   0C4F             ; --- START RELATIONAL
1039   0C4F D7            push a
1040   0C50 11            mov a, b
1041   0C51 FD 2E 09 03   mov32 cb, $00000309
1041   0C55 00 00 
1042   0C57 B0            cmp a, b
1043   0C58 FD 71         seq ; ==
1044   0C5A E4            pop a
1045   0C5B             ; --- END RELATIONAL
1046   0C5B FD A7         sand a, b
1047   0C5D E4            pop a
1048   0C5E             ; --- END LOGICAL AND
1049   0C5E E7            pop d
1050   0C5F FD 43         mov [d], b
1051   0C61             ; pass = pass && ss[0].b[0] == 100; 
1052   0C61 FA FF FF      lea d, [bp + -1] ; $pass
1053   0C64 DA            push d
1054   0C65 FA FF FF      lea d, [bp + -1] ; $pass
1055   0C68 2A            mov b, [d]
1056   0C69 38 00 00      mov c, 0
1057   0C6C             ; --- START LOGICAL AND
1058   0C6C D7            push a
1059   0C6D 11            mov a, b
1060   0C6E FA 1C FC      lea d, [bp + -996] ; $ss
1061   0C71 D7            push a
1062   0C72 DA            push d
1063   0C73 FD 2E 00 00   mov32 cb, $00000000
1063   0C77 00 00 
1064   0C79 E7            pop d
1065   0C7A FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1066   0C7E E4            pop a
1067   0C7F 58 17 00      add d, 23
1068   0C82 D7            push a
1069   0C83 DA            push d
1070   0C84 FD 2E 00 00   mov32 cb, $00000000
1070   0C88 00 00 
1071   0C8A E7            pop d
1072   0C8B 5A            add d, b
1073   0C8C E4            pop a
1074   0C8D 32            mov bl, [d]
1075   0C8E A7 00         mov bh, 0
1076   0C90 38 00 00      mov c, 0
1077   0C93             ; --- START RELATIONAL
1078   0C93 D7            push a
1079   0C94 11            mov a, b
1080   0C95 FD 2E 64 00   mov32 cb, $00000064
1080   0C99 00 00 
1081   0C9B B0            cmp a, b
1082   0C9C FD 71         seq ; ==
1083   0C9E E4            pop a
1084   0C9F             ; --- END RELATIONAL
1085   0C9F FD A7         sand a, b
1086   0CA1 E4            pop a
1087   0CA2             ; --- END LOGICAL AND
1088   0CA2 E7            pop d
1089   0CA3 FD 43         mov [d], b
1090   0CA5             ; pass = pass && ss[0].b[1] == 200; 
1091   0CA5 FA FF FF      lea d, [bp + -1] ; $pass
1092   0CA8 DA            push d
1093   0CA9 FA FF FF      lea d, [bp + -1] ; $pass
1094   0CAC 2A            mov b, [d]
1095   0CAD 38 00 00      mov c, 0
1096   0CB0             ; --- START LOGICAL AND
1097   0CB0 D7            push a
1098   0CB1 11            mov a, b
1099   0CB2 FA 1C FC      lea d, [bp + -996] ; $ss
1100   0CB5 D7            push a
1101   0CB6 DA            push d
1102   0CB7 FD 2E 00 00   mov32 cb, $00000000
1102   0CBB 00 00 
1103   0CBD E7            pop d
1104   0CBE FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1105   0CC2 E4            pop a
1106   0CC3 58 17 00      add d, 23
1107   0CC6 D7            push a
1108   0CC7 DA            push d
1109   0CC8 FD 2E 01 00   mov32 cb, $00000001
1109   0CCC 00 00 
1110   0CCE E7            pop d
1111   0CCF 5A            add d, b
1112   0CD0 E4            pop a
1113   0CD1 32            mov bl, [d]
1114   0CD2 A7 00         mov bh, 0
1115   0CD4 38 00 00      mov c, 0
1116   0CD7             ; --- START RELATIONAL
1117   0CD7 D7            push a
1118   0CD8 11            mov a, b
1119   0CD9 FD 2E C8 00   mov32 cb, $000000c8
1119   0CDD 00 00 
1120   0CDF B0            cmp a, b
1121   0CE0 FD 71         seq ; ==
1122   0CE2 E4            pop a
1123   0CE3             ; --- END RELATIONAL
1124   0CE3 FD A7         sand a, b
1125   0CE5 E4            pop a
1126   0CE6             ; --- END LOGICAL AND
1127   0CE6 E7            pop d
1128   0CE7 FD 43         mov [d], b
1129   0CE9             ; pass = pass && ss[0].b[2] == 30; 
1130   0CE9 FA FF FF      lea d, [bp + -1] ; $pass
1131   0CEC DA            push d
1132   0CED FA FF FF      lea d, [bp + -1] ; $pass
1133   0CF0 2A            mov b, [d]
1134   0CF1 38 00 00      mov c, 0
1135   0CF4             ; --- START LOGICAL AND
1136   0CF4 D7            push a
1137   0CF5 11            mov a, b
1138   0CF6 FA 1C FC      lea d, [bp + -996] ; $ss
1139   0CF9 D7            push a
1140   0CFA DA            push d
1141   0CFB FD 2E 00 00   mov32 cb, $00000000
1141   0CFF 00 00 
1142   0D01 E7            pop d
1143   0D02 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1144   0D06 E4            pop a
1145   0D07 58 17 00      add d, 23
1146   0D0A D7            push a
1147   0D0B DA            push d
1148   0D0C FD 2E 02 00   mov32 cb, $00000002
1148   0D10 00 00 
1149   0D12 E7            pop d
1150   0D13 5A            add d, b
1151   0D14 E4            pop a
1152   0D15 32            mov bl, [d]
1153   0D16 A7 00         mov bh, 0
1154   0D18 38 00 00      mov c, 0
1155   0D1B             ; --- START RELATIONAL
1156   0D1B D7            push a
1157   0D1C 11            mov a, b
1158   0D1D FD 2E 1E 00   mov32 cb, $0000001e
1158   0D21 00 00 
1159   0D23 B0            cmp a, b
1160   0D24 FD 71         seq ; ==
1161   0D26 E4            pop a
1162   0D27             ; --- END RELATIONAL
1163   0D27 FD A7         sand a, b
1164   0D29 E4            pop a
1165   0D2A             ; --- END LOGICAL AND
1166   0D2A E7            pop d
1167   0D2B FD 43         mov [d], b
1168   0D2D             ; pass = pass && ss[3].s2[3].cc == 'z'; 
1169   0D2D FA FF FF      lea d, [bp + -1] ; $pass
1170   0D30 DA            push d
1171   0D31 FA FF FF      lea d, [bp + -1] ; $pass
1172   0D34 2A            mov b, [d]
1173   0D35 38 00 00      mov c, 0
1174   0D38             ; --- START LOGICAL AND
1175   0D38 D7            push a
1176   0D39 11            mov a, b
1177   0D3A FA 1C FC      lea d, [bp + -996] ; $ss
1178   0D3D D7            push a
1179   0D3E DA            push d
1180   0D3F FD 2E 03 00   mov32 cb, $00000003
1180   0D43 00 00 
1181   0D45 E7            pop d
1182   0D46 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1183   0D4A E4            pop a
1184   0D4B 58 21 00      add d, 33
1185   0D4E D7            push a
1186   0D4F DA            push d
1187   0D50 FD 2E 03 00   mov32 cb, $00000003
1187   0D54 00 00 
1188   0D56 E7            pop d
1189   0D57 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
1190   0D5B E4            pop a
1191   0D5C 58 00 00      add d, 0
1192   0D5F 32            mov bl, [d]
1193   0D60 A7 00         mov bh, 0
1194   0D62 38 00 00      mov c, 0
1195   0D65             ; --- START RELATIONAL
1196   0D65 D7            push a
1197   0D66 11            mov a, b
1198   0D67 FD 2E 7A 00   mov32 cb, $0000007a
1198   0D6B 00 00 
1199   0D6D B0            cmp a, b
1200   0D6E FD 71         seq ; ==
1201   0D70 E4            pop a
1202   0D71             ; --- END RELATIONAL
1203   0D71 FD A7         sand a, b
1204   0D73 E4            pop a
1205   0D74             ; --- END LOGICAL AND
1206   0D74 E7            pop d
1207   0D75 FD 43         mov [d], b
1208   0D77             ; pass = pass && ss[3].s2[3].ii == 999; 
1209   0D77 FA FF FF      lea d, [bp + -1] ; $pass
1210   0D7A DA            push d
1211   0D7B FA FF FF      lea d, [bp + -1] ; $pass
1212   0D7E 2A            mov b, [d]
1213   0D7F 38 00 00      mov c, 0
1214   0D82             ; --- START LOGICAL AND
1215   0D82 D7            push a
1216   0D83 11            mov a, b
1217   0D84 FA 1C FC      lea d, [bp + -996] ; $ss
1218   0D87 D7            push a
1219   0D88 DA            push d
1220   0D89 FD 2E 03 00   mov32 cb, $00000003
1220   0D8D 00 00 
1221   0D8F E7            pop d
1222   0D90 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1223   0D94 E4            pop a
1224   0D95 58 21 00      add d, 33
1225   0D98 D7            push a
1226   0D99 DA            push d
1227   0D9A FD 2E 03 00   mov32 cb, $00000003
1227   0D9E 00 00 
1228   0DA0 E7            pop d
1229   0DA1 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
1230   0DA5 E4            pop a
1231   0DA6 58 01 00      add d, 1
1232   0DA9 2A            mov b, [d]
1233   0DAA 38 00 00      mov c, 0
1234   0DAD             ; --- START RELATIONAL
1235   0DAD D7            push a
1236   0DAE 11            mov a, b
1237   0DAF FD 2E E7 03   mov32 cb, $000003e7
1237   0DB3 00 00 
1238   0DB5 B0            cmp a, b
1239   0DB6 FD 71         seq ; ==
1240   0DB8 E4            pop a
1241   0DB9             ; --- END RELATIONAL
1242   0DB9 FD A7         sand a, b
1243   0DBB E4            pop a
1244   0DBC             ; --- END LOGICAL AND
1245   0DBC E7            pop d
1246   0DBD FD 43         mov [d], b
1247   0DBF             ; pass = pass && ss[3].s2[3].cc2[0] == 255; 
1248   0DBF FA FF FF      lea d, [bp + -1] ; $pass
1249   0DC2 DA            push d
1250   0DC3 FA FF FF      lea d, [bp + -1] ; $pass
1251   0DC6 2A            mov b, [d]
1252   0DC7 38 00 00      mov c, 0
1253   0DCA             ; --- START LOGICAL AND
1254   0DCA D7            push a
1255   0DCB 11            mov a, b
1256   0DCC FA 1C FC      lea d, [bp + -996] ; $ss
1257   0DCF D7            push a
1258   0DD0 DA            push d
1259   0DD1 FD 2E 03 00   mov32 cb, $00000003
1259   0DD5 00 00 
1260   0DD7 E7            pop d
1261   0DD8 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1262   0DDC E4            pop a
1263   0DDD 58 21 00      add d, 33
1264   0DE0 D7            push a
1265   0DE1 DA            push d
1266   0DE2 FD 2E 03 00   mov32 cb, $00000003
1266   0DE6 00 00 
1267   0DE8 E7            pop d
1268   0DE9 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
1269   0DED E4            pop a
1270   0DEE 58 03 00      add d, 3
1271   0DF1 D7            push a
1272   0DF2 DA            push d
1273   0DF3 FD 2E 00 00   mov32 cb, $00000000
1273   0DF7 00 00 
1274   0DF9 E7            pop d
1275   0DFA 5A            add d, b
1276   0DFB E4            pop a
1277   0DFC 32            mov bl, [d]
1278   0DFD A7 00         mov bh, 0
1279   0DFF 38 00 00      mov c, 0
1280   0E02             ; --- START RELATIONAL
1281   0E02 D7            push a
1282   0E03 11            mov a, b
1283   0E04 FD 2E FF 00   mov32 cb, $000000ff
1283   0E08 00 00 
1284   0E0A B0            cmp a, b
1285   0E0B FD 71         seq ; ==
1286   0E0D E4            pop a
1287   0E0E             ; --- END RELATIONAL
1288   0E0E FD A7         sand a, b
1289   0E10 E4            pop a
1290   0E11             ; --- END LOGICAL AND
1291   0E11 E7            pop d
1292   0E12 FD 43         mov [d], b
1293   0E14             ; pass = pass && ss[3].s2[3].cc2[1] == 128; 
1294   0E14 FA FF FF      lea d, [bp + -1] ; $pass
1295   0E17 DA            push d
1296   0E18 FA FF FF      lea d, [bp + -1] ; $pass
1297   0E1B 2A            mov b, [d]
1298   0E1C 38 00 00      mov c, 0
1299   0E1F             ; --- START LOGICAL AND
1300   0E1F D7            push a
1301   0E20 11            mov a, b
1302   0E21 FA 1C FC      lea d, [bp + -996] ; $ss
1303   0E24 D7            push a
1304   0E25 DA            push d
1305   0E26 FD 2E 03 00   mov32 cb, $00000003
1305   0E2A 00 00 
1306   0E2C E7            pop d
1307   0E2D FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1308   0E31 E4            pop a
1309   0E32 58 21 00      add d, 33
1310   0E35 D7            push a
1311   0E36 DA            push d
1312   0E37 FD 2E 03 00   mov32 cb, $00000003
1312   0E3B 00 00 
1313   0E3D E7            pop d
1314   0E3E FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
1315   0E42 E4            pop a
1316   0E43 58 03 00      add d, 3
1317   0E46 D7            push a
1318   0E47 DA            push d
1319   0E48 FD 2E 01 00   mov32 cb, $00000001
1319   0E4C 00 00 
1320   0E4E E7            pop d
1321   0E4F 5A            add d, b
1322   0E50 E4            pop a
1323   0E51 32            mov bl, [d]
1324   0E52 A7 00         mov bh, 0
1325   0E54 38 00 00      mov c, 0
1326   0E57             ; --- START RELATIONAL
1327   0E57 D7            push a
1328   0E58 11            mov a, b
1329   0E59 FD 2E 80 00   mov32 cb, $00000080
1329   0E5D 00 00 
1330   0E5F B0            cmp a, b
1331   0E60 FD 71         seq ; ==
1332   0E62 E4            pop a
1333   0E63             ; --- END RELATIONAL
1334   0E63 FD A7         sand a, b
1335   0E65 E4            pop a
1336   0E66             ; --- END LOGICAL AND
1337   0E66 E7            pop d
1338   0E67 FD 43         mov [d], b
1339   0E69             ; pass = pass && ss[3].s2[3].cc2[2] == 100; 
1340   0E69 FA FF FF      lea d, [bp + -1] ; $pass
1341   0E6C DA            push d
1342   0E6D FA FF FF      lea d, [bp + -1] ; $pass
1343   0E70 2A            mov b, [d]
1344   0E71 38 00 00      mov c, 0
1345   0E74             ; --- START LOGICAL AND
1346   0E74 D7            push a
1347   0E75 11            mov a, b
1348   0E76 FA 1C FC      lea d, [bp + -996] ; $ss
1349   0E79 D7            push a
1350   0E7A DA            push d
1351   0E7B FD 2E 03 00   mov32 cb, $00000003
1351   0E7F 00 00 
1352   0E81 E7            pop d
1353   0E82 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1354   0E86 E4            pop a
1355   0E87 58 21 00      add d, 33
1356   0E8A D7            push a
1357   0E8B DA            push d
1358   0E8C FD 2E 03 00   mov32 cb, $00000003
1358   0E90 00 00 
1359   0E92 E7            pop d
1360   0E93 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
1361   0E97 E4            pop a
1362   0E98 58 03 00      add d, 3
1363   0E9B D7            push a
1364   0E9C DA            push d
1365   0E9D FD 2E 02 00   mov32 cb, $00000002
1365   0EA1 00 00 
1366   0EA3 E7            pop d
1367   0EA4 5A            add d, b
1368   0EA5 E4            pop a
1369   0EA6 32            mov bl, [d]
1370   0EA7 A7 00         mov bh, 0
1371   0EA9 38 00 00      mov c, 0
1372   0EAC             ; --- START RELATIONAL
1373   0EAC D7            push a
1374   0EAD 11            mov a, b
1375   0EAE FD 2E 64 00   mov32 cb, $00000064
1375   0EB2 00 00 
1376   0EB4 B0            cmp a, b
1377   0EB5 FD 71         seq ; ==
1378   0EB7 E4            pop a
1379   0EB8             ; --- END RELATIONAL
1380   0EB8 FD A7         sand a, b
1381   0EBA E4            pop a
1382   0EBB             ; --- END LOGICAL AND
1383   0EBB E7            pop d
1384   0EBC FD 43         mov [d], b
1385   0EBE             ; pass = pass && ss[3].s2[3].ii2[0] == 65535; 
1386   0EBE FA FF FF      lea d, [bp + -1] ; $pass
1387   0EC1 DA            push d
1388   0EC2 FA FF FF      lea d, [bp + -1] ; $pass
1389   0EC5 2A            mov b, [d]
1390   0EC6 38 00 00      mov c, 0
1391   0EC9             ; --- START LOGICAL AND
1392   0EC9 D7            push a
1393   0ECA 11            mov a, b
1394   0ECB FA 1C FC      lea d, [bp + -996] ; $ss
1395   0ECE D7            push a
1396   0ECF DA            push d
1397   0ED0 FD 2E 03 00   mov32 cb, $00000003
1397   0ED4 00 00 
1398   0ED6 E7            pop d
1399   0ED7 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1400   0EDB E4            pop a
1401   0EDC 58 21 00      add d, 33
1402   0EDF D7            push a
1403   0EE0 DA            push d
1404   0EE1 FD 2E 03 00   mov32 cb, $00000003
1404   0EE5 00 00 
1405   0EE7 E7            pop d
1406   0EE8 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
1407   0EEC E4            pop a
1408   0EED 58 0D 00      add d, 13
1409   0EF0 D7            push a
1410   0EF1 DA            push d
1411   0EF2 FD 2E 00 00   mov32 cb, $00000000
1411   0EF6 00 00 
1412   0EF8 E7            pop d
1413   0EF9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1414   0EFD E4            pop a
1415   0EFE 2A            mov b, [d]
1416   0EFF 38 00 00      mov c, 0
1417   0F02             ; --- START RELATIONAL
1418   0F02 D7            push a
1419   0F03 11            mov a, b
1420   0F04 FD 2E FF FF   mov32 cb, $0000ffff
1420   0F08 00 00 
1421   0F0A B0            cmp a, b
1422   0F0B FD 71         seq ; ==
1423   0F0D E4            pop a
1424   0F0E             ; --- END RELATIONAL
1425   0F0E FD A7         sand a, b
1426   0F10 E4            pop a
1427   0F11             ; --- END LOGICAL AND
1428   0F11 E7            pop d
1429   0F12 FD 43         mov [d], b
1430   0F14             ; pass = pass && ss[3].s2[3].ii2[1] == 50000; 
1431   0F14 FA FF FF      lea d, [bp + -1] ; $pass
1432   0F17 DA            push d
1433   0F18 FA FF FF      lea d, [bp + -1] ; $pass
1434   0F1B 2A            mov b, [d]
1435   0F1C 38 00 00      mov c, 0
1436   0F1F             ; --- START LOGICAL AND
1437   0F1F D7            push a
1438   0F20 11            mov a, b
1439   0F21 FA 1C FC      lea d, [bp + -996] ; $ss
1440   0F24 D7            push a
1441   0F25 DA            push d
1442   0F26 FD 2E 03 00   mov32 cb, $00000003
1442   0F2A 00 00 
1443   0F2C E7            pop d
1444   0F2D FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1445   0F31 E4            pop a
1446   0F32 58 21 00      add d, 33
1447   0F35 D7            push a
1448   0F36 DA            push d
1449   0F37 FD 2E 03 00   mov32 cb, $00000003
1449   0F3B 00 00 
1450   0F3D E7            pop d
1451   0F3E FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
1452   0F42 E4            pop a
1453   0F43 58 0D 00      add d, 13
1454   0F46 D7            push a
1455   0F47 DA            push d
1456   0F48 FD 2E 01 00   mov32 cb, $00000001
1456   0F4C 00 00 
1457   0F4E E7            pop d
1458   0F4F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1459   0F53 E4            pop a
1460   0F54 2A            mov b, [d]
1461   0F55 38 00 00      mov c, 0
1462   0F58             ; --- START RELATIONAL
1463   0F58 D7            push a
1464   0F59 11            mov a, b
1465   0F5A FD 2E 50 C3   mov32 cb, $0000c350
1465   0F5E 00 00 
1466   0F60 B0            cmp a, b
1467   0F61 FD 71         seq ; ==
1468   0F63 E4            pop a
1469   0F64             ; --- END RELATIONAL
1470   0F64 FD A7         sand a, b
1471   0F66 E4            pop a
1472   0F67             ; --- END LOGICAL AND
1473   0F67 E7            pop d
1474   0F68 FD 43         mov [d], b
1475   0F6A             ; pass = pass && ss[3].s2[3].ii2[2] == 20000; 
1476   0F6A FA FF FF      lea d, [bp + -1] ; $pass
1477   0F6D DA            push d
1478   0F6E FA FF FF      lea d, [bp + -1] ; $pass
1479   0F71 2A            mov b, [d]
1480   0F72 38 00 00      mov c, 0
1481   0F75             ; --- START LOGICAL AND
1482   0F75 D7            push a
1483   0F76 11            mov a, b
1484   0F77 FA 1C FC      lea d, [bp + -996] ; $ss
1485   0F7A D7            push a
1486   0F7B DA            push d
1487   0F7C FD 2E 03 00   mov32 cb, $00000003
1487   0F80 00 00 
1488   0F82 E7            pop d
1489   0F83 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1490   0F87 E4            pop a
1491   0F88 58 21 00      add d, 33
1492   0F8B D7            push a
1493   0F8C DA            push d
1494   0F8D FD 2E 03 00   mov32 cb, $00000003
1494   0F91 00 00 
1495   0F93 E7            pop d
1496   0F94 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
1497   0F98 E4            pop a
1498   0F99 58 0D 00      add d, 13
1499   0F9C D7            push a
1500   0F9D DA            push d
1501   0F9E FD 2E 02 00   mov32 cb, $00000002
1501   0FA2 00 00 
1502   0FA4 E7            pop d
1503   0FA5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1504   0FA9 E4            pop a
1505   0FAA 2A            mov b, [d]
1506   0FAB 38 00 00      mov c, 0
1507   0FAE             ; --- START RELATIONAL
1508   0FAE D7            push a
1509   0FAF 11            mov a, b
1510   0FB0 FD 2E 20 4E   mov32 cb, $00004e20
1510   0FB4 00 00 
1511   0FB6 B0            cmp a, b
1512   0FB7 FD 71         seq ; ==
1513   0FB9 E4            pop a
1514   0FBA             ; --- END RELATIONAL
1515   0FBA FD A7         sand a, b
1516   0FBC E4            pop a
1517   0FBD             ; --- END LOGICAL AND
1518   0FBD E7            pop d
1519   0FBE FD 43         mov [d], b
1520   0FC0             ; pass = pass && ss[3].cc2 == 'b'; 
1521   0FC0 FA FF FF      lea d, [bp + -1] ; $pass
1522   0FC3 DA            push d
1523   0FC4 FA FF FF      lea d, [bp + -1] ; $pass
1524   0FC7 2A            mov b, [d]
1525   0FC8 38 00 00      mov c, 0
1526   0FCB             ; --- START LOGICAL AND
1527   0FCB D7            push a
1528   0FCC 11            mov a, b
1529   0FCD FA 1C FC      lea d, [bp + -996] ; $ss
1530   0FD0 D7            push a
1531   0FD1 DA            push d
1532   0FD2 FD 2E 03 00   mov32 cb, $00000003
1532   0FD6 00 00 
1533   0FD8 E7            pop d
1534   0FD9 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1535   0FDD E4            pop a
1536   0FDE 58 C6 00      add d, 198
1537   0FE1 32            mov bl, [d]
1538   0FE2 A7 00         mov bh, 0
1539   0FE4 38 00 00      mov c, 0
1540   0FE7             ; --- START RELATIONAL
1541   0FE7 D7            push a
1542   0FE8 11            mov a, b
1543   0FE9 FD 2E 62 00   mov32 cb, $00000062
1543   0FED 00 00 
1544   0FEF B0            cmp a, b
1545   0FF0 FD 71         seq ; ==
1546   0FF2 E4            pop a
1547   0FF3             ; --- END RELATIONAL
1548   0FF3 FD A7         sand a, b
1549   0FF5 E4            pop a
1550   0FF6             ; --- END LOGICAL AND
1551   0FF6 E7            pop d
1552   0FF7 FD 43         mov [d], b
1553   0FF9             ; printf("final test result: %s\n", pass ? "passed" : "failed"); 
1554   0FF9             ; --- START FUNCTION CALL
1555   0FF9             _ternary2_cond:
1556   0FF9 FA FF FF      lea d, [bp + -1] ; $pass
1557   0FFC 2A            mov b, [d]
1558   0FFD 38 00 00      mov c, 0
1559   1000 C0 00 00      cmp b, 0
1560   1003 C6 0C 10      je _ternary2_FALSE
1561   1006             _ternary2_TRUE:
1562   1006 26 AC 19      mov b, _s6 ; "passed"
1563   1009 0A 0F 10      jmp _ternary2_exit
1564   100C             _ternary2_FALSE:
1565   100C 26 B3 19      mov b, _s7 ; "failed"
1566   100F             _ternary2_exit:
1567   100F FD AB         swp b
1568   1011 D8            push b
1569   1012 26 BA 19      mov b, _s8 ; "final test result: %s\n"
1570   1015 FD AB         swp b
1571   1017 D8            push b
1572   1018 07 20 10      call printf
1573   101B 51 04 00      add sp, 4
1574   101E             ; --- END FUNCTION CALL
1575   101E 05 0B         syscall sys_terminate_proc
1576   1020             
1577   1020             printf:
1578   1020 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1579   1023             ; char *p, *format_p; 
1580   1023 52 02 00      sub sp, 2
1581   1026 52 02 00      sub sp, 2
1582   1029             ; format_p = format; 
1583   1029 FA FD FF      lea d, [bp + -3] ; $format_p
1584   102C DA            push d
1585   102D FA 05 00      lea d, [bp + 5] ; $format
1586   1030 2A            mov b, [d]
1587   1031 38 00 00      mov c, 0
1588   1034 E7            pop d
1589   1035 FD 43         mov [d], b
1590   1037             ; p = &format + 2; 
1591   1037 FA FF FF      lea d, [bp + -1] ; $p
1592   103A DA            push d
1593   103B FA 05 00      lea d, [bp + 5] ; $format
1594   103E 2D            mov b, d
1595   103F             ; --- START TERMS
1596   103F D7            push a
1597   1040 11            mov a, b
1598   1041 FD 2E 02 00   mov32 cb, $00000002
1598   1045 00 00 
1599   1047 56            add b, a
1600   1048 E4            pop a
1601   1049             ; --- END TERMS
1602   1049 E7            pop d
1603   104A FD 43         mov [d], b
1604   104C             ; for(;;){ 
1605   104C             _for3_init:
1606   104C             _for3_cond:
1607   104C             _for3_block:
1608   104C             ; if(!*format_p) break; 
1609   104C             _if4_cond:
1610   104C FA FD FF      lea d, [bp + -3] ; $format_p
1611   104F 2A            mov b, [d]
1612   1050 38 00 00      mov c, 0
1613   1053 74            mov d, b
1614   1054 32            mov bl, [d]
1615   1055 A7 00         mov bh, 0
1616   1057 38 00 00      mov c, 0
1617   105A C0 00 00      cmp b, 0
1618   105D FD 71         seq ; !
1619   105F C0 00 00      cmp b, 0
1620   1062 C6 6B 10      je _if4_else
1621   1065             _if4_TRUE:
1622   1065             ; break; 
1623   1065 0A 10 13      jmp _for3_exit ; for break
1624   1068 0A FD 12      jmp _if4_exit
1625   106B             _if4_else:
1626   106B             ; if(*format_p == '%'){ 
1627   106B             _if5_cond:
1628   106B FA FD FF      lea d, [bp + -3] ; $format_p
1629   106E 2A            mov b, [d]
1630   106F 38 00 00      mov c, 0
1631   1072 74            mov d, b
1632   1073 32            mov bl, [d]
1633   1074 A7 00         mov bh, 0
1634   1076 38 00 00      mov c, 0
1635   1079             ; --- START RELATIONAL
1636   1079 D7            push a
1637   107A 11            mov a, b
1638   107B FD 2E 25 00   mov32 cb, $00000025
1638   107F 00 00 
1639   1081 B0            cmp a, b
1640   1082 FD 71         seq ; ==
1641   1084 E4            pop a
1642   1085             ; --- END RELATIONAL
1643   1085 C0 00 00      cmp b, 0
1644   1088 C6 E8 12      je _if5_else
1645   108B             _if5_TRUE:
1646   108B             ; format_p++; 
1647   108B FA FD FF      lea d, [bp + -3] ; $format_p
1648   108E 2A            mov b, [d]
1649   108F 38 00 00      mov c, 0
1650   1092 FD 77         inc b
1651   1094 FA FD FF      lea d, [bp + -3] ; $format_p
1652   1097 FD 43         mov [d], b
1653   1099 FD 7D         dec b
1654   109B             ; switch(*format_p){ 
1655   109B             _switch6_expr:
1656   109B FA FD FF      lea d, [bp + -3] ; $format_p
1657   109E 2A            mov b, [d]
1658   109F 38 00 00      mov c, 0
1659   10A2 74            mov d, b
1660   10A3 32            mov bl, [d]
1661   10A4 A7 00         mov bh, 0
1662   10A6 38 00 00      mov c, 0
1663   10A9             _switch6_comparisons:
1664   10A9 C1 6C         cmp bl, $6c
1665   10AB C6 DC 10      je _switch6_case0
1666   10AE C1 4C         cmp bl, $4c
1667   10B0 C6 DC 10      je _switch6_case1
1668   10B3 C1 64         cmp bl, $64
1669   10B5 C6 EC 11      je _switch6_case2
1670   10B8 C1 69         cmp bl, $69
1671   10BA C6 EC 11      je _switch6_case3
1672   10BD C1 75         cmp bl, $75
1673   10BF C6 1C 12      je _switch6_case4
1674   10C2 C1 78         cmp bl, $78
1675   10C4 C6 4C 12      je _switch6_case5
1676   10C7 C1 70         cmp bl, $70
1677   10C9 C6 4C 12      je _switch6_case6
1678   10CC C1 63         cmp bl, $63
1679   10CE C6 7C 12      je _switch6_case7
1680   10D1 C1 73         cmp bl, $73
1681   10D3 C6 AC 12      je _switch6_case8
1682   10D6 0A D9 12      jmp _switch6_default
1683   10D9 0A E5 12      jmp _switch6_exit
1684   10DC             _switch6_case0:
1685   10DC             _switch6_case1:
1686   10DC             ; format_p++; 
1687   10DC FA FD FF      lea d, [bp + -3] ; $format_p
1688   10DF 2A            mov b, [d]
1689   10E0 38 00 00      mov c, 0
1690   10E3 FD 77         inc b
1691   10E5 FA FD FF      lea d, [bp + -3] ; $format_p
1692   10E8 FD 43         mov [d], b
1693   10EA FD 7D         dec b
1694   10EC             ; if(*format_p == 'd' || *format_p == 'i') 
1695   10EC             _if7_cond:
1696   10EC FA FD FF      lea d, [bp + -3] ; $format_p
1697   10EF 2A            mov b, [d]
1698   10F0 38 00 00      mov c, 0
1699   10F3 74            mov d, b
1700   10F4 32            mov bl, [d]
1701   10F5 A7 00         mov bh, 0
1702   10F7 38 00 00      mov c, 0
1703   10FA             ; --- START RELATIONAL
1704   10FA D7            push a
1705   10FB 11            mov a, b
1706   10FC FD 2E 64 00   mov32 cb, $00000064
1706   1100 00 00 
1707   1102 B0            cmp a, b
1708   1103 FD 71         seq ; ==
1709   1105 E4            pop a
1710   1106             ; --- END RELATIONAL
1711   1106             ; --- START LOGICAL OR
1712   1106 D7            push a
1713   1107 11            mov a, b
1714   1108 FA FD FF      lea d, [bp + -3] ; $format_p
1715   110B 2A            mov b, [d]
1716   110C 38 00 00      mov c, 0
1717   110F 74            mov d, b
1718   1110 32            mov bl, [d]
1719   1111 A7 00         mov bh, 0
1720   1113 38 00 00      mov c, 0
1721   1116             ; --- START RELATIONAL
1722   1116 D7            push a
1723   1117 11            mov a, b
1724   1118 FD 2E 69 00   mov32 cb, $00000069
1724   111C 00 00 
1725   111E B0            cmp a, b
1726   111F FD 71         seq ; ==
1727   1121 E4            pop a
1728   1122             ; --- END RELATIONAL
1729   1122 FD A8         sor a, b ; ||
1730   1124 E4            pop a
1731   1125             ; --- END LOGICAL OR
1732   1125 C0 00 00      cmp b, 0
1733   1128 C6 49 11      je _if7_else
1734   112B             _if7_TRUE:
1735   112B             ; print_signed_long(*(long int*)p); 
1736   112B             ; --- START FUNCTION CALL
1737   112B FA FF FF      lea d, [bp + -1] ; $p
1738   112E 2A            mov b, [d]
1739   112F 38 00 00      mov c, 0
1740   1132 74            mov d, b
1741   1133 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1742   1136 FD 39         mov c, b ; And place it into C
1743   1138 2A            mov b, [d] ; Lower Word in B
1744   1139 12            mov a, c
1745   113A FD AA         swp a
1746   113C D7            push a
1747   113D FD AB         swp b
1748   113F D8            push b
1749   1140 07 12 13      call print_signed_long
1750   1143 51 04 00      add sp, 4
1751   1146             ; --- END FUNCTION CALL
1752   1146 0A D1 11      jmp _if7_exit
1753   1149             _if7_else:
1754   1149             ; if(*format_p == 'u') 
1755   1149             _if8_cond:
1756   1149 FA FD FF      lea d, [bp + -3] ; $format_p
1757   114C 2A            mov b, [d]
1758   114D 38 00 00      mov c, 0
1759   1150 74            mov d, b
1760   1151 32            mov bl, [d]
1761   1152 A7 00         mov bh, 0
1762   1154 38 00 00      mov c, 0
1763   1157             ; --- START RELATIONAL
1764   1157 D7            push a
1765   1158 11            mov a, b
1766   1159 FD 2E 75 00   mov32 cb, $00000075
1766   115D 00 00 
1767   115F B0            cmp a, b
1768   1160 FD 71         seq ; ==
1769   1162 E4            pop a
1770   1163             ; --- END RELATIONAL
1771   1163 C0 00 00      cmp b, 0
1772   1166 C6 87 11      je _if8_else
1773   1169             _if8_TRUE:
1774   1169             ; print_unsigned_long(*(unsigned long int*)p); 
1775   1169             ; --- START FUNCTION CALL
1776   1169 FA FF FF      lea d, [bp + -1] ; $p
1777   116C 2A            mov b, [d]
1778   116D 38 00 00      mov c, 0
1779   1170 74            mov d, b
1780   1171 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1781   1174 FD 39         mov c, b ; And place it into C
1782   1176 2A            mov b, [d] ; Lower Word in B
1783   1177 12            mov a, c
1784   1178 FD AA         swp a
1785   117A D7            push a
1786   117B FD AB         swp b
1787   117D D8            push b
1788   117E 07 E9 14      call print_unsigned_long
1789   1181 51 04 00      add sp, 4
1790   1184             ; --- END FUNCTION CALL
1791   1184 0A D1 11      jmp _if8_exit
1792   1187             _if8_else:
1793   1187             ; if(*format_p == 'x') 
1794   1187             _if9_cond:
1795   1187 FA FD FF      lea d, [bp + -3] ; $format_p
1796   118A 2A            mov b, [d]
1797   118B 38 00 00      mov c, 0
1798   118E 74            mov d, b
1799   118F 32            mov bl, [d]
1800   1190 A7 00         mov bh, 0
1801   1192 38 00 00      mov c, 0
1802   1195             ; --- START RELATIONAL
1803   1195 D7            push a
1804   1196 11            mov a, b
1805   1197 FD 2E 78 00   mov32 cb, $00000078
1805   119B 00 00 
1806   119D B0            cmp a, b
1807   119E FD 71         seq ; ==
1808   11A0 E4            pop a
1809   11A1             ; --- END RELATIONAL
1810   11A1 C0 00 00      cmp b, 0
1811   11A4 C6 C5 11      je _if9_else
1812   11A7             _if9_TRUE:
1813   11A7             ; printx32(*(long int *)p); 
1814   11A7             ; --- START FUNCTION CALL
1815   11A7 FA FF FF      lea d, [bp + -1] ; $p
1816   11AA 2A            mov b, [d]
1817   11AB 38 00 00      mov c, 0
1818   11AE 74            mov d, b
1819   11AF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1820   11B2 FD 39         mov c, b ; And place it into C
1821   11B4 2A            mov b, [d] ; Lower Word in B
1822   11B5 12            mov a, c
1823   11B6 FD AA         swp a
1824   11B8 D7            push a
1825   11B9 FD AB         swp b
1826   11BB D8            push b
1827   11BC 07 14 16      call printx32
1828   11BF 51 04 00      add sp, 4
1829   11C2             ; --- END FUNCTION CALL
1830   11C2 0A D1 11      jmp _if9_exit
1831   11C5             _if9_else:
1832   11C5             ; err("Unexpected format in printf."); 
1833   11C5             ; --- START FUNCTION CALL
1834   11C5 26 D1 19      mov b, _s9 ; "Unexpected format in printf."
1835   11C8 FD AB         swp b
1836   11CA D8            push b
1837   11CB 07 74 16      call err
1838   11CE 51 02 00      add sp, 2
1839   11D1             ; --- END FUNCTION CALL
1840   11D1             _if9_exit:
1841   11D1             _if8_exit:
1842   11D1             _if7_exit:
1843   11D1             ; p = p + 4; 
1844   11D1 FA FF FF      lea d, [bp + -1] ; $p
1845   11D4 DA            push d
1846   11D5 FA FF FF      lea d, [bp + -1] ; $p
1847   11D8 2A            mov b, [d]
1848   11D9 38 00 00      mov c, 0
1849   11DC             ; --- START TERMS
1850   11DC D7            push a
1851   11DD 11            mov a, b
1852   11DE FD 2E 04 00   mov32 cb, $00000004
1852   11E2 00 00 
1853   11E4 56            add b, a
1854   11E5 E4            pop a
1855   11E6             ; --- END TERMS
1856   11E6 E7            pop d
1857   11E7 FD 43         mov [d], b
1858   11E9             ; break; 
1859   11E9 0A E5 12      jmp _switch6_exit ; case break
1860   11EC             _switch6_case2:
1861   11EC             _switch6_case3:
1862   11EC             ; print_signed(*(int*)p); 
1863   11EC             ; --- START FUNCTION CALL
1864   11EC FA FF FF      lea d, [bp + -1] ; $p
1865   11EF 2A            mov b, [d]
1866   11F0 38 00 00      mov c, 0
1867   11F3 74            mov d, b
1868   11F4 2A            mov b, [d]
1869   11F5 38 00 00      mov c, 0
1870   11F8 FD AB         swp b
1871   11FA D8            push b
1872   11FB 07 A2 16      call print_signed
1873   11FE 51 02 00      add sp, 2
1874   1201             ; --- END FUNCTION CALL
1875   1201             ; p = p + 2; 
1876   1201 FA FF FF      lea d, [bp + -1] ; $p
1877   1204 DA            push d
1878   1205 FA FF FF      lea d, [bp + -1] ; $p
1879   1208 2A            mov b, [d]
1880   1209 38 00 00      mov c, 0
1881   120C             ; --- START TERMS
1882   120C D7            push a
1883   120D 11            mov a, b
1884   120E FD 2E 02 00   mov32 cb, $00000002
1884   1212 00 00 
1885   1214 56            add b, a
1886   1215 E4            pop a
1887   1216             ; --- END TERMS
1888   1216 E7            pop d
1889   1217 FD 43         mov [d], b
1890   1219             ; break; 
1891   1219 0A E5 12      jmp _switch6_exit ; case break
1892   121C             _switch6_case4:
1893   121C             ; print_unsigned(*(unsigned int*)p); 
1894   121C             ; --- START FUNCTION CALL
1895   121C FA FF FF      lea d, [bp + -1] ; $p
1896   121F 2A            mov b, [d]
1897   1220 38 00 00      mov c, 0
1898   1223 74            mov d, b
1899   1224 2A            mov b, [d]
1900   1225 38 00 00      mov c, 0
1901   1228 FD AB         swp b
1902   122A D8            push b
1903   122B 07 05 18      call print_unsigned
1904   122E 51 02 00      add sp, 2
1905   1231             ; --- END FUNCTION CALL
1906   1231             ; p = p + 2; 
1907   1231 FA FF FF      lea d, [bp + -1] ; $p
1908   1234 DA            push d
1909   1235 FA FF FF      lea d, [bp + -1] ; $p
1910   1238 2A            mov b, [d]
1911   1239 38 00 00      mov c, 0
1912   123C             ; --- START TERMS
1913   123C D7            push a
1914   123D 11            mov a, b
1915   123E FD 2E 02 00   mov32 cb, $00000002
1915   1242 00 00 
1916   1244 56            add b, a
1917   1245 E4            pop a
1918   1246             ; --- END TERMS
1919   1246 E7            pop d
1920   1247 FD 43         mov [d], b
1921   1249             ; break; 
1922   1249 0A E5 12      jmp _switch6_exit ; case break
1923   124C             _switch6_case5:
1924   124C             _switch6_case6:
1925   124C             ; printx16(*(int*)p); 
1926   124C             ; --- START FUNCTION CALL
1927   124C FA FF FF      lea d, [bp + -1] ; $p
1928   124F 2A            mov b, [d]
1929   1250 38 00 00      mov c, 0
1930   1253 74            mov d, b
1931   1254 2A            mov b, [d]
1932   1255 38 00 00      mov c, 0
1933   1258 FD AB         swp b
1934   125A D8            push b
1935   125B 07 0A 19      call printx16
1936   125E 51 02 00      add sp, 2
1937   1261             ; --- END FUNCTION CALL
1938   1261             ; p = p + 2; 
1939   1261 FA FF FF      lea d, [bp + -1] ; $p
1940   1264 DA            push d
1941   1265 FA FF FF      lea d, [bp + -1] ; $p
1942   1268 2A            mov b, [d]
1943   1269 38 00 00      mov c, 0
1944   126C             ; --- START TERMS
1945   126C D7            push a
1946   126D 11            mov a, b
1947   126E FD 2E 02 00   mov32 cb, $00000002
1947   1272 00 00 
1948   1274 56            add b, a
1949   1275 E4            pop a
1950   1276             ; --- END TERMS
1951   1276 E7            pop d
1952   1277 FD 43         mov [d], b
1953   1279             ; break; 
1954   1279 0A E5 12      jmp _switch6_exit ; case break
1955   127C             _switch6_case7:
1956   127C             ; putchar(*(char*)p); 
1957   127C             ; --- START FUNCTION CALL
1958   127C FA FF FF      lea d, [bp + -1] ; $p
1959   127F 2A            mov b, [d]
1960   1280 38 00 00      mov c, 0
1961   1283 74            mov d, b
1962   1284 32            mov bl, [d]
1963   1285 A7 00         mov bh, 0
1964   1287 38 00 00      mov c, 0
1965   128A DD            push bl
1966   128B 07 DB 14      call putchar
1967   128E 51 01 00      add sp, 1
1968   1291             ; --- END FUNCTION CALL
1969   1291             ; p = p + 2; 
1970   1291 FA FF FF      lea d, [bp + -1] ; $p
1971   1294 DA            push d
1972   1295 FA FF FF      lea d, [bp + -1] ; $p
1973   1298 2A            mov b, [d]
1974   1299 38 00 00      mov c, 0
1975   129C             ; --- START TERMS
1976   129C D7            push a
1977   129D 11            mov a, b
1978   129E FD 2E 02 00   mov32 cb, $00000002
1978   12A2 00 00 
1979   12A4 56            add b, a
1980   12A5 E4            pop a
1981   12A6             ; --- END TERMS
1982   12A6 E7            pop d
1983   12A7 FD 43         mov [d], b
1984   12A9             ; break; 
1985   12A9 0A E5 12      jmp _switch6_exit ; case break
1986   12AC             _switch6_case8:
1987   12AC             ; print(*(char**)p); 
1988   12AC             ; --- START FUNCTION CALL
1989   12AC FA FF FF      lea d, [bp + -1] ; $p
1990   12AF 2A            mov b, [d]
1991   12B0 38 00 00      mov c, 0
1992   12B3 74            mov d, b
1993   12B4 2A            mov b, [d]
1994   12B5 FD AB         swp b
1995   12B7 D8            push b
1996   12B8 07 89 16      call print
1997   12BB 51 02 00      add sp, 2
1998   12BE             ; --- END FUNCTION CALL
1999   12BE             ; p = p + 2; 
2000   12BE FA FF FF      lea d, [bp + -1] ; $p
2001   12C1 DA            push d
2002   12C2 FA FF FF      lea d, [bp + -1] ; $p
2003   12C5 2A            mov b, [d]
2004   12C6 38 00 00      mov c, 0
2005   12C9             ; --- START TERMS
2006   12C9 D7            push a
2007   12CA 11            mov a, b
2008   12CB FD 2E 02 00   mov32 cb, $00000002
2008   12CF 00 00 
2009   12D1 56            add b, a
2010   12D2 E4            pop a
2011   12D3             ; --- END TERMS
2012   12D3 E7            pop d
2013   12D4 FD 43         mov [d], b
2014   12D6             ; break; 
2015   12D6 0A E5 12      jmp _switch6_exit ; case break
2016   12D9             _switch6_default:
2017   12D9             ; print("Error: Unknown argument type.\n"); 
2018   12D9             ; --- START FUNCTION CALL
2019   12D9 26 EE 19      mov b, _s10 ; "Error: Unknown argument type.\n"
2020   12DC FD AB         swp b
2021   12DE D8            push b
2022   12DF 07 89 16      call print
2023   12E2 51 02 00      add sp, 2
2024   12E5             ; --- END FUNCTION CALL
2025   12E5             _switch6_exit:
2026   12E5 0A FD 12      jmp _if5_exit
2027   12E8             _if5_else:
2028   12E8             ; putchar(*format_p); 
2029   12E8             ; --- START FUNCTION CALL
2030   12E8 FA FD FF      lea d, [bp + -3] ; $format_p
2031   12EB 2A            mov b, [d]
2032   12EC 38 00 00      mov c, 0
2033   12EF 74            mov d, b
2034   12F0 32            mov bl, [d]
2035   12F1 A7 00         mov bh, 0
2036   12F3 38 00 00      mov c, 0
2037   12F6 DD            push bl
2038   12F7 07 DB 14      call putchar
2039   12FA 51 01 00      add sp, 1
2040   12FD             ; --- END FUNCTION CALL
2041   12FD             _if5_exit:
2042   12FD             _if4_exit:
2043   12FD             ; format_p++; 
2044   12FD FA FD FF      lea d, [bp + -3] ; $format_p
2045   1300 2A            mov b, [d]
2046   1301 38 00 00      mov c, 0
2047   1304 FD 77         inc b
2048   1306 FA FD FF      lea d, [bp + -3] ; $format_p
2049   1309 FD 43         mov [d], b
2050   130B FD 7D         dec b
2051   130D             _for3_update:
2052   130D 0A 4C 10      jmp _for3_cond
2053   1310             _for3_exit:
2054   1310 F9            leave
2055   1311 09            ret
2056   1312             
2057   1312             print_signed_long:
2058   1312 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2059   1315             ; char digits[10];  // fits 2,147,483,647 
2060   1315 52 0A 00      sub sp, 10
2061   1318             ; int i = 0; 
2062   1318 52 02 00      sub sp, 2
2063   131B             ; --- START LOCAL VAR INITIALIZATION
2064   131B FA F5 FF      lea d, [bp + -11] ; $i
2065   131E DA            push d
2066   131F FD 2E 00 00   mov32 cb, $00000000
2066   1323 00 00 
2067   1325 E7            pop d
2068   1326 FD 43         mov [d], b
2069   1328             ; --- END LOCAL VAR INITIALIZATION
2070   1328             ; unsigned long int absval; 
2071   1328 52 04 00      sub sp, 4
2072   132B             ; if (num < 0) { 
2073   132B             _if10_cond:
2074   132B FA 05 00      lea d, [bp + 5] ; $num
2075   132E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2076   1331 FD 39         mov c, b ; And place it into C
2077   1333 2A            mov b, [d] ; Lower Word in B
2078   1334             ; --- START RELATIONAL
2079   1334 D7            push a
2080   1335 FD D8         push g
2081   1337 11            mov a, b
2082   1338 FD 7A         mov g, c
2083   133A FD 2E 00 00   mov32 cb, $00000000
2083   133E 00 00 
2084   1340 38 00 00      mov c, 0
2085   1343 FD AF         cmp32 ga, cb
2086   1345 FD 73         slt ; <
2087   1347 FD F1         pop g
2088   1349 E4            pop a
2089   134A             ; --- END RELATIONAL
2090   134A C0 00 00      cmp b, 0
2091   134D C6 AC 13      je _if10_else
2092   1350             _if10_TRUE:
2093   1350             ; putchar('-'); 
2094   1350             ; --- START FUNCTION CALL
2095   1350 FD 2E 2D 00   mov32 cb, $0000002d
2095   1354 00 00 
2096   1356 DD            push bl
2097   1357 07 DB 14      call putchar
2098   135A 51 01 00      add sp, 1
2099   135D             ; --- END FUNCTION CALL
2100   135D             ; absval = (unsigned long int)(-(num + 1)) + 1; 
2101   135D FA F1 FF      lea d, [bp + -15] ; $absval
2102   1360 DA            push d
2103   1361 FA 05 00      lea d, [bp + 5] ; $num
2104   1364 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2105   1367 FD 39         mov c, b ; And place it into C
2106   1369 2A            mov b, [d] ; Lower Word in B
2107   136A             ; --- START TERMS
2108   136A D7            push a
2109   136B FD D8         push g
2110   136D 11            mov a, b
2111   136E FD 7A         mov g, c
2112   1370 FD 2E 01 00   mov32 cb, $00000001
2112   1374 00 00 
2113   1376 38 00 00      mov c, 0
2114   1379 FD 15         add32 cb, ga
2115   137B FD F1         pop g
2116   137D E4            pop a
2117   137E             ; --- END TERMS
2118   137E 12            mov a, c
2119   137F 95            not a
2120   1380 97            not b
2121   1381 55 01 00      add b, 1
2122   1384 5B 00 00      adc a, 0
2123   1387 39            mov c, a
2124   1388 A7 00         mov bh, 0
2125   138A 38 00 00      mov c, 0
2126   138D             ; --- START TERMS
2127   138D D7            push a
2128   138E FD D8         push g
2129   1390 11            mov a, b
2130   1391 FD 7A         mov g, c
2131   1393 FD 2E 01 00   mov32 cb, $00000001
2131   1397 00 00 
2132   1399 38 00 00      mov c, 0
2133   139C FD 15         add32 cb, ga
2134   139E FD F1         pop g
2135   13A0 E4            pop a
2136   13A1             ; --- END TERMS
2137   13A1 E7            pop d
2138   13A2 FD 43         mov [d], b
2139   13A4 28            mov b, c
2140   13A5 FD 44 02 00   mov [d + 2], b
2141   13A9 0A C6 13      jmp _if10_exit
2142   13AC             _if10_else:
2143   13AC             ; absval = (unsigned long int)num; 
2144   13AC FA F1 FF      lea d, [bp + -15] ; $absval
2145   13AF DA            push d
2146   13B0 FA 05 00      lea d, [bp + 5] ; $num
2147   13B3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2148   13B6 FD 39         mov c, b ; And place it into C
2149   13B8 2A            mov b, [d] ; Lower Word in B
2150   13B9 A7 00         mov bh, 0
2151   13BB 38 00 00      mov c, 0
2152   13BE E7            pop d
2153   13BF FD 43         mov [d], b
2154   13C1 28            mov b, c
2155   13C2 FD 44 02 00   mov [d + 2], b
2156   13C6             _if10_exit:
2157   13C6             ; if (absval == 0) { 
2158   13C6             _if11_cond:
2159   13C6 FA F1 FF      lea d, [bp + -15] ; $absval
2160   13C9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2161   13CC FD 39         mov c, b ; And place it into C
2162   13CE 2A            mov b, [d] ; Lower Word in B
2163   13CF             ; --- START RELATIONAL
2164   13CF D7            push a
2165   13D0 FD D8         push g
2166   13D2 11            mov a, b
2167   13D3 FD 7A         mov g, c
2168   13D5 FD 2E 00 00   mov32 cb, $00000000
2168   13D9 00 00 
2169   13DB 38 00 00      mov c, 0
2170   13DE FD AF         cmp32 ga, cb
2171   13E0 FD 71         seq ; ==
2172   13E2 FD F1         pop g
2173   13E4 E4            pop a
2174   13E5             ; --- END RELATIONAL
2175   13E5 C0 00 00      cmp b, 0
2176   13E8 C6 FD 13      je _if11_exit
2177   13EB             _if11_TRUE:
2178   13EB             ; putchar('0'); 
2179   13EB             ; --- START FUNCTION CALL
2180   13EB FD 2E 30 00   mov32 cb, $00000030
2180   13EF 00 00 
2181   13F1 DD            push bl
2182   13F2 07 DB 14      call putchar
2183   13F5 51 01 00      add sp, 1
2184   13F8             ; --- END FUNCTION CALL
2185   13F8             ; return; 
2186   13F8 F9            leave
2187   13F9 09            ret
2188   13FA 0A FD 13      jmp _if11_exit
2189   13FD             _if11_exit:
2190   13FD             ; while (absval > 0) { 
2191   13FD             _while12_cond:
2192   13FD FA F1 FF      lea d, [bp + -15] ; $absval
2193   1400 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2194   1403 FD 39         mov c, b ; And place it into C
2195   1405 2A            mov b, [d] ; Lower Word in B
2196   1406             ; --- START RELATIONAL
2197   1406 D7            push a
2198   1407 FD D8         push g
2199   1409 11            mov a, b
2200   140A FD 7A         mov g, c
2201   140C FD 2E 00 00   mov32 cb, $00000000
2201   1410 00 00 
2202   1412 38 00 00      mov c, 0
2203   1415 FD AF         cmp32 ga, cb
2204   1417 FD 81         sgu
2205   1419 FD F1         pop g
2206   141B E4            pop a
2207   141C             ; --- END RELATIONAL
2208   141C C0 00 00      cmp b, 0
2209   141F C6 9D 14      je _while12_exit
2210   1422             _while12_block:
2211   1422             ; digits[i++] = '0' + (absval % 10); 
2212   1422 FA F7 FF      lea d, [bp + -9] ; $digits
2213   1425 D7            push a
2214   1426 DA            push d
2215   1427 FA F5 FF      lea d, [bp + -11] ; $i
2216   142A 2A            mov b, [d]
2217   142B 38 00 00      mov c, 0
2218   142E 11            mov a, b
2219   142F FD 77         inc b
2220   1431 FA F5 FF      lea d, [bp + -11] ; $i
2221   1434 FD 43         mov [d], b
2222   1436 27            mov b, a
2223   1437 E7            pop d
2224   1438 5A            add d, b
2225   1439 E4            pop a
2226   143A DA            push d
2227   143B FD 2E 30 00   mov32 cb, $00000030
2227   143F 00 00 
2228   1441             ; --- START TERMS
2229   1441 D7            push a
2230   1442 11            mov a, b
2231   1443 FA F1 FF      lea d, [bp + -15] ; $absval
2232   1446 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2233   1449 FD 39         mov c, b ; And place it into C
2234   144B 2A            mov b, [d] ; Lower Word in B
2235   144C             ; --- START FACTORS
2236   144C D7            push a
2237   144D FD D8         push g
2238   144F 11            mov a, b
2239   1450 FD 7A         mov g, c
2240   1452 FD 2E 0A 00   mov32 cb, $0000000a
2240   1456 00 00 
2241   1458 FD D8         push g ; save 'g' as the div instruction uses it
2242   145A AE            div a, b ; %, a: quotient, b: remainder
2243   145B 11            mov a, b
2244   145C FD F1         pop g
2245   145E FD 38         mov c, g
2246   1460 27            mov b, a
2247   1461 FD F1         pop g
2248   1463 E4            pop a
2249   1464             ; --- END FACTORS
2250   1464 FD 22 00 00   mov g, 0
2251   1468 FD 15         add32 cb, ga
2252   146A E4            pop a
2253   146B             ; --- END TERMS
2254   146B E7            pop d
2255   146C FD 3E         mov [d], bl
2256   146E             ; absval = absval / 10; 
2257   146E FA F1 FF      lea d, [bp + -15] ; $absval
2258   1471 DA            push d
2259   1472 FA F1 FF      lea d, [bp + -15] ; $absval
2260   1475 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2261   1478 FD 39         mov c, b ; And place it into C
2262   147A 2A            mov b, [d] ; Lower Word in B
2263   147B             ; --- START FACTORS
2264   147B D7            push a
2265   147C FD D8         push g
2266   147E 11            mov a, b
2267   147F FD 7A         mov g, c
2268   1481 FD 2E 0A 00   mov32 cb, $0000000a
2268   1485 00 00 
2269   1487 FD D8         push g ; save 'g' as the div instruction uses it
2270   1489 AE            div a, b ; /, a: quotient, b: remainder
2271   148A FD F1         pop g
2272   148C FD 38         mov c, g
2273   148E 27            mov b, a
2274   148F FD F1         pop g
2275   1491 E4            pop a
2276   1492             ; --- END FACTORS
2277   1492 E7            pop d
2278   1493 FD 43         mov [d], b
2279   1495 28            mov b, c
2280   1496 FD 44 02 00   mov [d + 2], b
2281   149A 0A FD 13      jmp _while12_cond
2282   149D             _while12_exit:
2283   149D             ; while (i > 0) { 
2284   149D             _while19_cond:
2285   149D FA F5 FF      lea d, [bp + -11] ; $i
2286   14A0 2A            mov b, [d]
2287   14A1 38 00 00      mov c, 0
2288   14A4             ; --- START RELATIONAL
2289   14A4 D7            push a
2290   14A5 11            mov a, b
2291   14A6 FD 2E 00 00   mov32 cb, $00000000
2291   14AA 00 00 
2292   14AC B0            cmp a, b
2293   14AD FD 7F         sgt ; >
2294   14AF E4            pop a
2295   14B0             ; --- END RELATIONAL
2296   14B0 C0 00 00      cmp b, 0
2297   14B3 C6 D9 14      je _while19_exit
2298   14B6             _while19_block:
2299   14B6             ; putchar(digits[--i]); 
2300   14B6             ; --- START FUNCTION CALL
2301   14B6 FA F7 FF      lea d, [bp + -9] ; $digits
2302   14B9 D7            push a
2303   14BA DA            push d
2304   14BB FA F5 FF      lea d, [bp + -11] ; $i
2305   14BE 2A            mov b, [d]
2306   14BF FD 7D         dec b
2307   14C1 FA F5 FF      lea d, [bp + -11] ; $i
2308   14C4 FD 43         mov [d], b
2309   14C6 E7            pop d
2310   14C7 5A            add d, b
2311   14C8 E4            pop a
2312   14C9 32            mov bl, [d]
2313   14CA A7 00         mov bh, 0
2314   14CC 38 00 00      mov c, 0
2315   14CF DD            push bl
2316   14D0 07 DB 14      call putchar
2317   14D3 51 01 00      add sp, 1
2318   14D6             ; --- END FUNCTION CALL
2319   14D6 0A 9D 14      jmp _while19_cond
2320   14D9             _while19_exit:
2321   14D9 F9            leave
2322   14DA 09            ret
2323   14DB             
2324   14DB             putchar:
2325   14DB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2326   14DE             ; --- BEGIN INLINE ASM SEGMENT
2327   14DE FA 05 00      lea d, [bp + 5] ; $c
2328   14E1 1E            mov al, [d]
2329   14E2 23            mov ah, al
2330   14E3 19 00         mov al, 0
2331   14E5 05 03         syscall sys_io      ; char in AH
2332   14E7             ; --- END INLINE ASM SEGMENT
2333   14E7 F9            leave
2334   14E8 09            ret
2335   14E9             
2336   14E9             print_unsigned_long:
2337   14E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2338   14EC             ; char digits[10]; 
2339   14EC 52 0A 00      sub sp, 10
2340   14EF             ; int i = 0; 
2341   14EF 52 02 00      sub sp, 2
2342   14F2             ; --- START LOCAL VAR INITIALIZATION
2343   14F2 FA F5 FF      lea d, [bp + -11] ; $i
2344   14F5 DA            push d
2345   14F6 FD 2E 00 00   mov32 cb, $00000000
2345   14FA 00 00 
2346   14FC E7            pop d
2347   14FD FD 43         mov [d], b
2348   14FF             ; --- END LOCAL VAR INITIALIZATION
2349   14FF             ; if(num == 0){ 
2350   14FF             _if20_cond:
2351   14FF FA 05 00      lea d, [bp + 5] ; $num
2352   1502 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2353   1505 FD 39         mov c, b ; And place it into C
2354   1507 2A            mov b, [d] ; Lower Word in B
2355   1508             ; --- START RELATIONAL
2356   1508 D7            push a
2357   1509 FD D8         push g
2358   150B 11            mov a, b
2359   150C FD 7A         mov g, c
2360   150E FD 2E 00 00   mov32 cb, $00000000
2360   1512 00 00 
2361   1514 38 00 00      mov c, 0
2362   1517 FD AF         cmp32 ga, cb
2363   1519 FD 71         seq ; ==
2364   151B FD F1         pop g
2365   151D E4            pop a
2366   151E             ; --- END RELATIONAL
2367   151E C0 00 00      cmp b, 0
2368   1521 C6 36 15      je _if20_exit
2369   1524             _if20_TRUE:
2370   1524             ; putchar('0'); 
2371   1524             ; --- START FUNCTION CALL
2372   1524 FD 2E 30 00   mov32 cb, $00000030
2372   1528 00 00 
2373   152A DD            push bl
2374   152B 07 DB 14      call putchar
2375   152E 51 01 00      add sp, 1
2376   1531             ; --- END FUNCTION CALL
2377   1531             ; return; 
2378   1531 F9            leave
2379   1532 09            ret
2380   1533 0A 36 15      jmp _if20_exit
2381   1536             _if20_exit:
2382   1536             ; while (num > 0) { 
2383   1536             _while21_cond:
2384   1536 FA 05 00      lea d, [bp + 5] ; $num
2385   1539 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2386   153C FD 39         mov c, b ; And place it into C
2387   153E 2A            mov b, [d] ; Lower Word in B
2388   153F             ; --- START RELATIONAL
2389   153F D7            push a
2390   1540 FD D8         push g
2391   1542 11            mov a, b
2392   1543 FD 7A         mov g, c
2393   1545 FD 2E 00 00   mov32 cb, $00000000
2393   1549 00 00 
2394   154B 38 00 00      mov c, 0
2395   154E FD AF         cmp32 ga, cb
2396   1550 FD 81         sgu
2397   1552 FD F1         pop g
2398   1554 E4            pop a
2399   1555             ; --- END RELATIONAL
2400   1555 C0 00 00      cmp b, 0
2401   1558 C6 D6 15      je _while21_exit
2402   155B             _while21_block:
2403   155B             ; digits[i++] = '0' + (num % 10); 
2404   155B FA F7 FF      lea d, [bp + -9] ; $digits
2405   155E D7            push a
2406   155F DA            push d
2407   1560 FA F5 FF      lea d, [bp + -11] ; $i
2408   1563 2A            mov b, [d]
2409   1564 38 00 00      mov c, 0
2410   1567 11            mov a, b
2411   1568 FD 77         inc b
2412   156A FA F5 FF      lea d, [bp + -11] ; $i
2413   156D FD 43         mov [d], b
2414   156F 27            mov b, a
2415   1570 E7            pop d
2416   1571 5A            add d, b
2417   1572 E4            pop a
2418   1573 DA            push d
2419   1574 FD 2E 30 00   mov32 cb, $00000030
2419   1578 00 00 
2420   157A             ; --- START TERMS
2421   157A D7            push a
2422   157B 11            mov a, b
2423   157C FA 05 00      lea d, [bp + 5] ; $num
2424   157F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2425   1582 FD 39         mov c, b ; And place it into C
2426   1584 2A            mov b, [d] ; Lower Word in B
2427   1585             ; --- START FACTORS
2428   1585 D7            push a
2429   1586 FD D8         push g
2430   1588 11            mov a, b
2431   1589 FD 7A         mov g, c
2432   158B FD 2E 0A 00   mov32 cb, $0000000a
2432   158F 00 00 
2433   1591 FD D8         push g ; save 'g' as the div instruction uses it
2434   1593 AE            div a, b ; %, a: quotient, b: remainder
2435   1594 11            mov a, b
2436   1595 FD F1         pop g
2437   1597 FD 38         mov c, g
2438   1599 27            mov b, a
2439   159A FD F1         pop g
2440   159C E4            pop a
2441   159D             ; --- END FACTORS
2442   159D FD 22 00 00   mov g, 0
2443   15A1 FD 15         add32 cb, ga
2444   15A3 E4            pop a
2445   15A4             ; --- END TERMS
2446   15A4 E7            pop d
2447   15A5 FD 3E         mov [d], bl
2448   15A7             ; num = num / 10; 
2449   15A7 FA 05 00      lea d, [bp + 5] ; $num
2450   15AA DA            push d
2451   15AB FA 05 00      lea d, [bp + 5] ; $num
2452   15AE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2453   15B1 FD 39         mov c, b ; And place it into C
2454   15B3 2A            mov b, [d] ; Lower Word in B
2455   15B4             ; --- START FACTORS
2456   15B4 D7            push a
2457   15B5 FD D8         push g
2458   15B7 11            mov a, b
2459   15B8 FD 7A         mov g, c
2460   15BA FD 2E 0A 00   mov32 cb, $0000000a
2460   15BE 00 00 
2461   15C0 FD D8         push g ; save 'g' as the div instruction uses it
2462   15C2 AE            div a, b ; /, a: quotient, b: remainder
2463   15C3 FD F1         pop g
2464   15C5 FD 38         mov c, g
2465   15C7 27            mov b, a
2466   15C8 FD F1         pop g
2467   15CA E4            pop a
2468   15CB             ; --- END FACTORS
2469   15CB E7            pop d
2470   15CC FD 43         mov [d], b
2471   15CE 28            mov b, c
2472   15CF FD 44 02 00   mov [d + 2], b
2473   15D3 0A 36 15      jmp _while21_cond
2474   15D6             _while21_exit:
2475   15D6             ; while (i > 0) { 
2476   15D6             _while28_cond:
2477   15D6 FA F5 FF      lea d, [bp + -11] ; $i
2478   15D9 2A            mov b, [d]
2479   15DA 38 00 00      mov c, 0
2480   15DD             ; --- START RELATIONAL
2481   15DD D7            push a
2482   15DE 11            mov a, b
2483   15DF FD 2E 00 00   mov32 cb, $00000000
2483   15E3 00 00 
2484   15E5 B0            cmp a, b
2485   15E6 FD 7F         sgt ; >
2486   15E8 E4            pop a
2487   15E9             ; --- END RELATIONAL
2488   15E9 C0 00 00      cmp b, 0
2489   15EC C6 12 16      je _while28_exit
2490   15EF             _while28_block:
2491   15EF             ; putchar(digits[--i]); 
2492   15EF             ; --- START FUNCTION CALL
2493   15EF FA F7 FF      lea d, [bp + -9] ; $digits
2494   15F2 D7            push a
2495   15F3 DA            push d
2496   15F4 FA F5 FF      lea d, [bp + -11] ; $i
2497   15F7 2A            mov b, [d]
2498   15F8 FD 7D         dec b
2499   15FA FA F5 FF      lea d, [bp + -11] ; $i
2500   15FD FD 43         mov [d], b
2501   15FF E7            pop d
2502   1600 5A            add d, b
2503   1601 E4            pop a
2504   1602 32            mov bl, [d]
2505   1603 A7 00         mov bh, 0
2506   1605 38 00 00      mov c, 0
2507   1608 DD            push bl
2508   1609 07 DB 14      call putchar
2509   160C 51 01 00      add sp, 1
2510   160F             ; --- END FUNCTION CALL
2511   160F 0A D6 15      jmp _while28_cond
2512   1612             _while28_exit:
2513   1612 F9            leave
2514   1613 09            ret
2515   1614             
2516   1614             printx32:
2517   1614 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2518   1617             ; --- BEGIN INLINE ASM SEGMENT
2519   1617 FA 05 00      lea d, [bp + 5] ; $hex
2520   161A 2B 02 00      mov b, [d+2]
2521   161D 07 26 16      call print_u16x_printx32
2522   1620 2A            mov b, [d]
2523   1621 07 26 16      call print_u16x_printx32
2524   1624             ; --- END INLINE ASM SEGMENT
2525   1624             ; return; 
2526   1624 F9            leave
2527   1625 09            ret
2528   1626             ; --- BEGIN INLINE ASM SEGMENT
2529   1626             print_u16x_printx32:
2530   1626 D7            push a
2531   1627 D8            push b
2532   1628 DD            push bl
2533   1629 30            mov bl, bh
2534   162A 07 48 16      call _itoa_printx32        ; convert bh to char in A
2535   162D 2F            mov bl, al        ; save al
2536   162E 19 00         mov al, 0
2537   1630 05 03         syscall sys_io        ; display AH
2538   1632 24            mov ah, bl        ; retrieve al
2539   1633 19 00         mov al, 0
2540   1635 05 03         syscall sys_io        ; display AL
2541   1637 EA            pop bl
2542   1638 07 48 16      call _itoa_printx32        ; convert bh to char in A
2543   163B 2F            mov bl, al        ; save al
2544   163C 19 00         mov al, 0
2545   163E 05 03         syscall sys_io        ; display AH
2546   1640 24            mov ah, bl        ; retrieve al
2547   1641 19 00         mov al, 0
2548   1643 05 03         syscall sys_io        ; display AL
2549   1645 E5            pop b
2550   1646 E4            pop a
2551   1647 09            ret
2552   1648             _itoa_printx32:
2553   1648 DA            push d
2554   1649 D8            push b
2555   164A A7 00         mov bh, 0
2556   164C FD A4 04      shr bl, 4  
2557   164F 74            mov d, b
2558   1650 1F 62 16      mov al, [d + s_hex_digits_printx32]
2559   1653 23            mov ah, al
2560   1654 E5            pop b
2561   1655 D8            push b
2562   1656 A7 00         mov bh, 0
2563   1658 FD 87 0F      and bl, $0F
2564   165B 74            mov d, b
2565   165C 1F 62 16      mov al, [d + s_hex_digits_printx32]
2566   165F E5            pop b
2567   1660 E7            pop d
2568   1661 09            ret
2569   1662 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2569   1666 34 35 36 37 
2569   166A 38 39 41 42 
2569   166E 43 44 45 46 
2570   1672             ; --- END INLINE ASM SEGMENT
2571   1672 F9            leave
2572   1673 09            ret
2573   1674             
2574   1674             err:
2575   1674 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2576   1677             ; print(e); 
2577   1677             ; --- START FUNCTION CALL
2578   1677 FA 05 00      lea d, [bp + 5] ; $e
2579   167A 2A            mov b, [d]
2580   167B 38 00 00      mov c, 0
2581   167E FD AB         swp b
2582   1680 D8            push b
2583   1681 07 89 16      call print
2584   1684 51 02 00      add sp, 2
2585   1687             ; --- END FUNCTION CALL
2586   1687 F9            leave
2587   1688 09            ret
2588   1689             
2589   1689             print:
2590   1689 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2591   168C             ; --- BEGIN INLINE ASM SEGMENT
2592   168C FA 05 00      lea d, [bp + 5] ; $s
2593   168F FD 2A         mov d, [d]
2594   1691             _puts_L1_print:
2595   1691 1E            mov al, [d]
2596   1692 B9 00         cmp al, 0
2597   1694 C6 A0 16      jz _puts_END_print
2598   1697 23            mov ah, al
2599   1698 19 00         mov al, 0
2600   169A 05 03         syscall sys_io
2601   169C 79            inc d
2602   169D 0A 91 16      jmp _puts_L1_print
2603   16A0             _puts_END_print:
2604   16A0             ; --- END INLINE ASM SEGMENT
2605   16A0 F9            leave
2606   16A1 09            ret
2607   16A2             
2608   16A2             print_signed:
2609   16A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2610   16A5             ; char digits[5];  // enough for "-32768" 
2611   16A5 52 05 00      sub sp, 5
2612   16A8             ; int i = 0; 
2613   16A8 52 02 00      sub sp, 2
2614   16AB             ; --- START LOCAL VAR INITIALIZATION
2615   16AB FA FA FF      lea d, [bp + -6] ; $i
2616   16AE DA            push d
2617   16AF FD 2E 00 00   mov32 cb, $00000000
2617   16B3 00 00 
2618   16B5 E7            pop d
2619   16B6 FD 43         mov [d], b
2620   16B8             ; --- END LOCAL VAR INITIALIZATION
2621   16B8             ; unsigned int absval; 
2622   16B8 52 02 00      sub sp, 2
2623   16BB             ; if (num < 0) { 
2624   16BB             _if29_cond:
2625   16BB FA 05 00      lea d, [bp + 5] ; $num
2626   16BE 2A            mov b, [d]
2627   16BF 38 00 00      mov c, 0
2628   16C2             ; --- START RELATIONAL
2629   16C2 D7            push a
2630   16C3 11            mov a, b
2631   16C4 FD 2E 00 00   mov32 cb, $00000000
2631   16C8 00 00 
2632   16CA B0            cmp a, b
2633   16CB FD 73         slt ; < (signed)
2634   16CD E4            pop a
2635   16CE             ; --- END RELATIONAL
2636   16CE C0 00 00      cmp b, 0
2637   16D1 C6 08 17      je _if29_else
2638   16D4             _if29_TRUE:
2639   16D4             ; putchar('-'); 
2640   16D4             ; --- START FUNCTION CALL
2641   16D4 FD 2E 2D 00   mov32 cb, $0000002d
2641   16D8 00 00 
2642   16DA DD            push bl
2643   16DB 07 DB 14      call putchar
2644   16DE 51 01 00      add sp, 1
2645   16E1             ; --- END FUNCTION CALL
2646   16E1             ; absval = (unsigned int)(-(num + 1)) + 1;  // safe for -32768 
2647   16E1 FA F8 FF      lea d, [bp + -8] ; $absval
2648   16E4 DA            push d
2649   16E5 FA 05 00      lea d, [bp + 5] ; $num
2650   16E8 2A            mov b, [d]
2651   16E9 38 00 00      mov c, 0
2652   16EC             ; --- START TERMS
2653   16EC D7            push a
2654   16ED 11            mov a, b
2655   16EE FD 2E 01 00   mov32 cb, $00000001
2655   16F2 00 00 
2656   16F4 56            add b, a
2657   16F5 E4            pop a
2658   16F6             ; --- END TERMS
2659   16F6 FD 97         neg b
2660   16F8             ; --- START TERMS
2661   16F8 D7            push a
2662   16F9 11            mov a, b
2663   16FA FD 2E 01 00   mov32 cb, $00000001
2663   16FE 00 00 
2664   1700 56            add b, a
2665   1701 E4            pop a
2666   1702             ; --- END TERMS
2667   1702 E7            pop d
2668   1703 FD 43         mov [d], b
2669   1705 0A 16 17      jmp _if29_exit
2670   1708             _if29_else:
2671   1708             ; absval = (unsigned int)num; 
2672   1708 FA F8 FF      lea d, [bp + -8] ; $absval
2673   170B DA            push d
2674   170C FA 05 00      lea d, [bp + 5] ; $num
2675   170F 2A            mov b, [d]
2676   1710 38 00 00      mov c, 0
2677   1713 E7            pop d
2678   1714 FD 43         mov [d], b
2679   1716             _if29_exit:
2680   1716             ; if (absval == 0) { 
2681   1716             _if30_cond:
2682   1716 FA F8 FF      lea d, [bp + -8] ; $absval
2683   1719 2A            mov b, [d]
2684   171A 38 00 00      mov c, 0
2685   171D             ; --- START RELATIONAL
2686   171D D7            push a
2687   171E 11            mov a, b
2688   171F FD 2E 00 00   mov32 cb, $00000000
2688   1723 00 00 
2689   1725 B0            cmp a, b
2690   1726 FD 71         seq ; ==
2691   1728 E4            pop a
2692   1729             ; --- END RELATIONAL
2693   1729 C0 00 00      cmp b, 0
2694   172C C6 41 17      je _if30_exit
2695   172F             _if30_TRUE:
2696   172F             ; putchar('0'); 
2697   172F             ; --- START FUNCTION CALL
2698   172F FD 2E 30 00   mov32 cb, $00000030
2698   1733 00 00 
2699   1735 DD            push bl
2700   1736 07 DB 14      call putchar
2701   1739 51 01 00      add sp, 1
2702   173C             ; --- END FUNCTION CALL
2703   173C             ; return; 
2704   173C F9            leave
2705   173D 09            ret
2706   173E 0A 41 17      jmp _if30_exit
2707   1741             _if30_exit:
2708   1741             ; while (absval > 0) { 
2709   1741             _while31_cond:
2710   1741 FA F8 FF      lea d, [bp + -8] ; $absval
2711   1744 2A            mov b, [d]
2712   1745 38 00 00      mov c, 0
2713   1748             ; --- START RELATIONAL
2714   1748 D7            push a
2715   1749 11            mov a, b
2716   174A FD 2E 00 00   mov32 cb, $00000000
2716   174E 00 00 
2717   1750 B0            cmp a, b
2718   1751 FD 81         sgu ; > (unsigned)
2719   1753 E4            pop a
2720   1754             ; --- END RELATIONAL
2721   1754 C0 00 00      cmp b, 0
2722   1757 C6 C7 17      je _while31_exit
2723   175A             _while31_block:
2724   175A             ; digits[i++] = '0' + (absval % 10); 
2725   175A FA FC FF      lea d, [bp + -4] ; $digits
2726   175D D7            push a
2727   175E DA            push d
2728   175F FA FA FF      lea d, [bp + -6] ; $i
2729   1762 2A            mov b, [d]
2730   1763 38 00 00      mov c, 0
2731   1766 11            mov a, b
2732   1767 FD 77         inc b
2733   1769 FA FA FF      lea d, [bp + -6] ; $i
2734   176C FD 43         mov [d], b
2735   176E 27            mov b, a
2736   176F E7            pop d
2737   1770 5A            add d, b
2738   1771 E4            pop a
2739   1772 DA            push d
2740   1773 FD 2E 30 00   mov32 cb, $00000030
2740   1777 00 00 
2741   1779             ; --- START TERMS
2742   1779 D7            push a
2743   177A 11            mov a, b
2744   177B FA F8 FF      lea d, [bp + -8] ; $absval
2745   177E 2A            mov b, [d]
2746   177F 38 00 00      mov c, 0
2747   1782             ; --- START FACTORS
2748   1782 D7            push a
2749   1783 FD D8         push g
2750   1785 11            mov a, b
2751   1786 FD 7A         mov g, c
2752   1788 FD 2E 0A 00   mov32 cb, $0000000a
2752   178C 00 00 
2753   178E FD D8         push g ; save 'g' as the div instruction uses it
2754   1790 AE            div a, b ; %, a: quotient, b: remainder
2755   1791 11            mov a, b
2756   1792 FD F1         pop g
2757   1794 FD 38         mov c, g
2758   1796 27            mov b, a
2759   1797 FD F1         pop g
2760   1799 E4            pop a
2761   179A             ; --- END FACTORS
2762   179A 56            add b, a
2763   179B E4            pop a
2764   179C             ; --- END TERMS
2765   179C E7            pop d
2766   179D FD 3E         mov [d], bl
2767   179F             ; absval = absval / 10; 
2768   179F FA F8 FF      lea d, [bp + -8] ; $absval
2769   17A2 DA            push d
2770   17A3 FA F8 FF      lea d, [bp + -8] ; $absval
2771   17A6 2A            mov b, [d]
2772   17A7 38 00 00      mov c, 0
2773   17AA             ; --- START FACTORS
2774   17AA D7            push a
2775   17AB FD D8         push g
2776   17AD 11            mov a, b
2777   17AE FD 7A         mov g, c
2778   17B0 FD 2E 0A 00   mov32 cb, $0000000a
2778   17B4 00 00 
2779   17B6 FD D8         push g ; save 'g' as the div instruction uses it
2780   17B8 AE            div a, b ; /, a: quotient, b: remainder
2781   17B9 FD F1         pop g
2782   17BB FD 38         mov c, g
2783   17BD 27            mov b, a
2784   17BE FD F1         pop g
2785   17C0 E4            pop a
2786   17C1             ; --- END FACTORS
2787   17C1 E7            pop d
2788   17C2 FD 43         mov [d], b
2789   17C4 0A 41 17      jmp _while31_cond
2790   17C7             _while31_exit:
2791   17C7             ; while (i > 0) { 
2792   17C7             _while38_cond:
2793   17C7 FA FA FF      lea d, [bp + -6] ; $i
2794   17CA 2A            mov b, [d]
2795   17CB 38 00 00      mov c, 0
2796   17CE             ; --- START RELATIONAL
2797   17CE D7            push a
2798   17CF 11            mov a, b
2799   17D0 FD 2E 00 00   mov32 cb, $00000000
2799   17D4 00 00 
2800   17D6 B0            cmp a, b
2801   17D7 FD 7F         sgt ; >
2802   17D9 E4            pop a
2803   17DA             ; --- END RELATIONAL
2804   17DA C0 00 00      cmp b, 0
2805   17DD C6 03 18      je _while38_exit
2806   17E0             _while38_block:
2807   17E0             ; putchar(digits[--i]); 
2808   17E0             ; --- START FUNCTION CALL
2809   17E0 FA FC FF      lea d, [bp + -4] ; $digits
2810   17E3 D7            push a
2811   17E4 DA            push d
2812   17E5 FA FA FF      lea d, [bp + -6] ; $i
2813   17E8 2A            mov b, [d]
2814   17E9 FD 7D         dec b
2815   17EB FA FA FF      lea d, [bp + -6] ; $i
2816   17EE FD 43         mov [d], b
2817   17F0 E7            pop d
2818   17F1 5A            add d, b
2819   17F2 E4            pop a
2820   17F3 32            mov bl, [d]
2821   17F4 A7 00         mov bh, 0
2822   17F6 38 00 00      mov c, 0
2823   17F9 DD            push bl
2824   17FA 07 DB 14      call putchar
2825   17FD 51 01 00      add sp, 1
2826   1800             ; --- END FUNCTION CALL
2827   1800 0A C7 17      jmp _while38_cond
2828   1803             _while38_exit:
2829   1803 F9            leave
2830   1804 09            ret
2831   1805             
2832   1805             print_unsigned:
2833   1805 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2834   1808             ; char digits[5]; 
2835   1808 52 05 00      sub sp, 5
2836   180B             ; int i = 0; 
2837   180B 52 02 00      sub sp, 2
2838   180E             ; --- START LOCAL VAR INITIALIZATION
2839   180E FA FA FF      lea d, [bp + -6] ; $i
2840   1811 DA            push d
2841   1812 FD 2E 00 00   mov32 cb, $00000000
2841   1816 00 00 
2842   1818 E7            pop d
2843   1819 FD 43         mov [d], b
2844   181B             ; --- END LOCAL VAR INITIALIZATION
2845   181B             ; if(num == 0){ 
2846   181B             _if39_cond:
2847   181B FA 05 00      lea d, [bp + 5] ; $num
2848   181E 2A            mov b, [d]
2849   181F 38 00 00      mov c, 0
2850   1822             ; --- START RELATIONAL
2851   1822 D7            push a
2852   1823 11            mov a, b
2853   1824 FD 2E 00 00   mov32 cb, $00000000
2853   1828 00 00 
2854   182A B0            cmp a, b
2855   182B FD 71         seq ; ==
2856   182D E4            pop a
2857   182E             ; --- END RELATIONAL
2858   182E C0 00 00      cmp b, 0
2859   1831 C6 46 18      je _if39_exit
2860   1834             _if39_TRUE:
2861   1834             ; putchar('0'); 
2862   1834             ; --- START FUNCTION CALL
2863   1834 FD 2E 30 00   mov32 cb, $00000030
2863   1838 00 00 
2864   183A DD            push bl
2865   183B 07 DB 14      call putchar
2866   183E 51 01 00      add sp, 1
2867   1841             ; --- END FUNCTION CALL
2868   1841             ; return; 
2869   1841 F9            leave
2870   1842 09            ret
2871   1843 0A 46 18      jmp _if39_exit
2872   1846             _if39_exit:
2873   1846             ; while (num > 0) { 
2874   1846             _while40_cond:
2875   1846 FA 05 00      lea d, [bp + 5] ; $num
2876   1849 2A            mov b, [d]
2877   184A 38 00 00      mov c, 0
2878   184D             ; --- START RELATIONAL
2879   184D D7            push a
2880   184E 11            mov a, b
2881   184F FD 2E 00 00   mov32 cb, $00000000
2881   1853 00 00 
2882   1855 B0            cmp a, b
2883   1856 FD 81         sgu ; > (unsigned)
2884   1858 E4            pop a
2885   1859             ; --- END RELATIONAL
2886   1859 C0 00 00      cmp b, 0
2887   185C C6 CC 18      je _while40_exit
2888   185F             _while40_block:
2889   185F             ; digits[i++] = '0' + (num % 10); 
2890   185F FA FC FF      lea d, [bp + -4] ; $digits
2891   1862 D7            push a
2892   1863 DA            push d
2893   1864 FA FA FF      lea d, [bp + -6] ; $i
2894   1867 2A            mov b, [d]
2895   1868 38 00 00      mov c, 0
2896   186B 11            mov a, b
2897   186C FD 77         inc b
2898   186E FA FA FF      lea d, [bp + -6] ; $i
2899   1871 FD 43         mov [d], b
2900   1873 27            mov b, a
2901   1874 E7            pop d
2902   1875 5A            add d, b
2903   1876 E4            pop a
2904   1877 DA            push d
2905   1878 FD 2E 30 00   mov32 cb, $00000030
2905   187C 00 00 
2906   187E             ; --- START TERMS
2907   187E D7            push a
2908   187F 11            mov a, b
2909   1880 FA 05 00      lea d, [bp + 5] ; $num
2910   1883 2A            mov b, [d]
2911   1884 38 00 00      mov c, 0
2912   1887             ; --- START FACTORS
2913   1887 D7            push a
2914   1888 FD D8         push g
2915   188A 11            mov a, b
2916   188B FD 7A         mov g, c
2917   188D FD 2E 0A 00   mov32 cb, $0000000a
2917   1891 00 00 
2918   1893 FD D8         push g ; save 'g' as the div instruction uses it
2919   1895 AE            div a, b ; %, a: quotient, b: remainder
2920   1896 11            mov a, b
2921   1897 FD F1         pop g
2922   1899 FD 38         mov c, g
2923   189B 27            mov b, a
2924   189C FD F1         pop g
2925   189E E4            pop a
2926   189F             ; --- END FACTORS
2927   189F 56            add b, a
2928   18A0 E4            pop a
2929   18A1             ; --- END TERMS
2930   18A1 E7            pop d
2931   18A2 FD 3E         mov [d], bl
2932   18A4             ; num = num / 10; 
2933   18A4 FA 05 00      lea d, [bp + 5] ; $num
2934   18A7 DA            push d
2935   18A8 FA 05 00      lea d, [bp + 5] ; $num
2936   18AB 2A            mov b, [d]
2937   18AC 38 00 00      mov c, 0
2938   18AF             ; --- START FACTORS
2939   18AF D7            push a
2940   18B0 FD D8         push g
2941   18B2 11            mov a, b
2942   18B3 FD 7A         mov g, c
2943   18B5 FD 2E 0A 00   mov32 cb, $0000000a
2943   18B9 00 00 
2944   18BB FD D8         push g ; save 'g' as the div instruction uses it
2945   18BD AE            div a, b ; /, a: quotient, b: remainder
2946   18BE FD F1         pop g
2947   18C0 FD 38         mov c, g
2948   18C2 27            mov b, a
2949   18C3 FD F1         pop g
2950   18C5 E4            pop a
2951   18C6             ; --- END FACTORS
2952   18C6 E7            pop d
2953   18C7 FD 43         mov [d], b
2954   18C9 0A 46 18      jmp _while40_cond
2955   18CC             _while40_exit:
2956   18CC             ; while (i > 0) { 
2957   18CC             _while47_cond:
2958   18CC FA FA FF      lea d, [bp + -6] ; $i
2959   18CF 2A            mov b, [d]
2960   18D0 38 00 00      mov c, 0
2961   18D3             ; --- START RELATIONAL
2962   18D3 D7            push a
2963   18D4 11            mov a, b
2964   18D5 FD 2E 00 00   mov32 cb, $00000000
2964   18D9 00 00 
2965   18DB B0            cmp a, b
2966   18DC FD 7F         sgt ; >
2967   18DE E4            pop a
2968   18DF             ; --- END RELATIONAL
2969   18DF C0 00 00      cmp b, 0
2970   18E2 C6 08 19      je _while47_exit
2971   18E5             _while47_block:
2972   18E5             ; putchar(digits[--i]); 
2973   18E5             ; --- START FUNCTION CALL
2974   18E5 FA FC FF      lea d, [bp + -4] ; $digits
2975   18E8 D7            push a
2976   18E9 DA            push d
2977   18EA FA FA FF      lea d, [bp + -6] ; $i
2978   18ED 2A            mov b, [d]
2979   18EE FD 7D         dec b
2980   18F0 FA FA FF      lea d, [bp + -6] ; $i
2981   18F3 FD 43         mov [d], b
2982   18F5 E7            pop d
2983   18F6 5A            add d, b
2984   18F7 E4            pop a
2985   18F8 32            mov bl, [d]
2986   18F9 A7 00         mov bh, 0
2987   18FB 38 00 00      mov c, 0
2988   18FE DD            push bl
2989   18FF 07 DB 14      call putchar
2990   1902 51 01 00      add sp, 1
2991   1905             ; --- END FUNCTION CALL
2992   1905 0A CC 18      jmp _while47_cond
2993   1908             _while47_exit:
2994   1908 F9            leave
2995   1909 09            ret
2996   190A             
2997   190A             printx16:
2998   190A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2999   190D             ; --- BEGIN INLINE ASM SEGMENT
3000   190D FA 05 00      lea d, [bp + 5] ; $hex
3001   1910 2A            mov b, [d]
3002   1911             print_u16x_printx16:
3003   1911 DD            push bl
3004   1912 30            mov bl, bh
3005   1913 07 30 19      call _itoa_printx16        ; convert bh to char in A
3006   1916 2F            mov bl, al        ; save al
3007   1917 19 00         mov al, 0
3008   1919 05 03         syscall sys_io        ; display AH
3009   191B 24            mov ah, bl        ; retrieve al
3010   191C 19 00         mov al, 0
3011   191E 05 03         syscall sys_io        ; display AL
3012   1920 EA            pop bl
3013   1921 07 30 19      call _itoa_printx16        ; convert bh to char in A
3014   1924 2F            mov bl, al        ; save al
3015   1925 19 00         mov al, 0
3016   1927 05 03         syscall sys_io        ; display AH
3017   1929 24            mov ah, bl        ; retrieve al
3018   192A 19 00         mov al, 0
3019   192C 05 03         syscall sys_io        ; display AL
3020   192E             ; --- END INLINE ASM SEGMENT
3021   192E             ; return; 
3022   192E F9            leave
3023   192F 09            ret
3024   1930             ; --- BEGIN INLINE ASM SEGMENT
3025   1930             _itoa_printx16:
3026   1930 DA            push d
3027   1931 D8            push b
3028   1932 A7 00         mov bh, 0
3029   1934 FD A4 04      shr bl, 4  
3030   1937 74            mov d, b
3031   1938 1F 4A 19      mov al, [d + s_hex_digits_printx16]
3032   193B 23            mov ah, al
3033   193C E5            pop b
3034   193D D8            push b
3035   193E A7 00         mov bh, 0
3036   1940 FD 87 0F      and bl, $0F
3037   1943 74            mov d, b
3038   1944 1F 4A 19      mov al, [d + s_hex_digits_printx16]
3039   1947 E5            pop b
3040   1948 E7            pop d
3041   1949 09            ret
3042   194A 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
3042   194E 34 35 36 37 
3042   1952 38 39 41 42 
3042   1956 43 44 45 46 
3043   195A             ; --- END INLINE ASM SEGMENT
3044   195A F9            leave
3045   195B 09            ret
3046   195C             ; --- END TEXT SEGMENT
3047   195C             
3048   195C             ; --- BEGIN DATA SEGMENT
3049   195C 0A 61 73 73 _s0: .db "\nassigning values...\n", 0
3049   1960 69 67 6E 69 
3049   1964 6E 67 20 76 
3049   1968 61 6C 75 65 
3049   196C 73 2E 2E 2E 
3049   1970 0A 00 
3050   1972 70 72 69 6E _s1: .db "printing assignments...\n", 0
3050   1976 74 69 6E 67 
3050   197A 20 61 73 73 
3050   197E 69 67 6E 6D 
3050   1982 65 6E 74 73 
3050   1986 2E 2E 2E 0A 
3050   198A 00 
3051   198B 25 63 0A 00 _s2: .db "%c\n", 0
3052   198F 25 64 0A 00 _s3: .db "%d\n", 0
3053   1993 25 75 0A 00 _s4: .db "%u\n", 0
3054   1997 63 68 65 63 _s5: .db "checking results...\n", 0
3054   199B 6B 69 6E 67 
3054   199F 20 72 65 73 
3054   19A3 75 6C 74 73 
3054   19A7 2E 2E 2E 0A 
3054   19AB 00 
3055   19AC 70 61 73 73 _s6: .db "passed", 0
3055   19B0 65 64 00 
3056   19B3 66 61 69 6C _s7: .db "failed", 0
3056   19B7 65 64 00 
3057   19BA 66 69 6E 61 _s8: .db "final test result: %s\n", 0
3057   19BE 6C 20 74 65 
3057   19C2 73 74 20 72 
3057   19C6 65 73 75 6C 
3057   19CA 74 3A 20 25 
3057   19CE 73 0A 00 
3058   19D1 55 6E 65 78 _s9: .db "Unexpected format in printf.", 0
3058   19D5 70 65 63 74 
3058   19D9 65 64 20 66 
3058   19DD 6F 72 6D 61 
3058   19E1 74 20 69 6E 
3058   19E5 20 70 72 69 
3058   19E9 6E 74 66 2E 
3058   19ED 00 
3059   19EE 45 72 72 6F _s10: .db "Error: Unknown argument type.\n", 0
3059   19F2 72 3A 20 55 
3059   19F6 6E 6B 6E 6F 
3059   19FA 77 6E 20 61 
3059   19FE 72 67 75 6D 
3059   1A02 65 6E 74 20 
3059   1A06 74 79 70 65 
3059   1A0A 2E 0A 00 
3060   1A0D             
3061   1A0D 0F 1A       _heap_top: .dw _heap
3062   1A0F 00          _heap: .db 0
3063   1A10             ; --- END DATA SEGMENT
3064   1A10             
3065   1A10             .end
tasm: Number of errors = 0
