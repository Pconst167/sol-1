0001   0000             ; --- FILENAME: ctestsuite/testsuite3.c
0002   0000             ; --- DATE:     28-06-2025 at 00:19:39
0003   0000             .include "lib/asm/kernel.exp"
0001+  0000             fdc_irq_event    .EQU  $195a
0002+  0000             sys_break        .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_create_proc  .EQU  $0005
0008+  0000             sys_list_proc    .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_fdc          .EQU  $000d
0016+  0000             text_org         .EQU  $0400
0004   0000             .include "lib/asm/bios.exp"
0001+  0000             bios_reset_vector .equ  $01c0
0002+  0000             ide_buffer       .equ  $8204
0003+  0000             boot_origin      .equ  $8004
0004+  0000             bios_uart        .equ  $0002
0005+  0000             bios_ide         .equ  $0003
0005   0000             
0006   0000             ; --- BEGIN TEXT SEGMENT
0007   0400             .org text_org
0008   0400             main:
0009   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0010   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0011   0408             ; int pass = 1; 
0012   0408 52 02 00      sub sp, 2
0013   040B             ; --- START LOCAL VAR INITIALIZATION
0014   040B FA FF FF      lea d, [bp + -1] ; $pass
0015   040E DA            push d
0016   040F FD 2E 01 00   mov32 cb, $00000001
0016   0413 00 00 
0017   0415 E7            pop d
0018   0416 FD 43         mov [d], b
0019   0418             ; --- END LOCAL VAR INITIALIZATION
0020   0418             ; struct s1 ss[5]; 
0021   0418 52 E3 03      sub sp, 995
0022   041B             ; printf("\nassigning values...\n"); 
0023   041B             ; --- START FUNCTION CALL
0024   041B 26 34 19      mov b, _s0 ; "\nassigning values...\n"
0025   041E FD AB         swp b
0026   0420 D8            push b
0027   0421 07 20 10      call printf
0028   0424 51 02 00      add sp, 2
0029   0427             ; --- END FUNCTION CALL
0030   0427             ; ss[0].c = 'a'; 
0031   0427 FA 1C FC      lea d, [bp + -996] ; $ss
0032   042A D7            push a
0033   042B DA            push d
0034   042C FD 2E 00 00   mov32 cb, $00000000
0034   0430 00 00 
0035   0432 E7            pop d
0036   0433 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0037   0437 E4            pop a
0038   0438 58 00 00      add d, 0
0039   043B DA            push d
0040   043C FD 2E 61 00   mov32 cb, $00000061
0040   0440 00 00 
0041   0442 E7            pop d
0042   0443 FD 3E         mov [d], bl
0043   0445             ; ss[0].i = 123; 
0044   0445 FA 1C FC      lea d, [bp + -996] ; $ss
0045   0448 D7            push a
0046   0449 DA            push d
0047   044A FD 2E 00 00   mov32 cb, $00000000
0047   044E 00 00 
0048   0450 E7            pop d
0049   0451 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0050   0455 E4            pop a
0051   0456 58 01 00      add d, 1
0052   0459 DA            push d
0053   045A FD 2E 7B 00   mov32 cb, $0000007b
0053   045E 00 00 
0054   0460 E7            pop d
0055   0461 FD 43         mov [d], b
0056   0463             ; ss[0].a[0] = 555; 
0057   0463 FA 1C FC      lea d, [bp + -996] ; $ss
0058   0466 D7            push a
0059   0467 DA            push d
0060   0468 FD 2E 00 00   mov32 cb, $00000000
0060   046C 00 00 
0061   046E E7            pop d
0062   046F FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0063   0473 E4            pop a
0064   0474 58 03 00      add d, 3
0065   0477 D7            push a
0066   0478 DA            push d
0067   0479 FD 2E 00 00   mov32 cb, $00000000
0067   047D 00 00 
0068   047F E7            pop d
0069   0480 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0070   0484 E4            pop a
0071   0485 DA            push d
0072   0486 FD 2E 2B 02   mov32 cb, $0000022b
0072   048A 00 00 
0073   048C E7            pop d
0074   048D FD 43         mov [d], b
0075   048F             ; ss[0].a[1] = 666; 
0076   048F FA 1C FC      lea d, [bp + -996] ; $ss
0077   0492 D7            push a
0078   0493 DA            push d
0079   0494 FD 2E 00 00   mov32 cb, $00000000
0079   0498 00 00 
0080   049A E7            pop d
0081   049B FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0082   049F E4            pop a
0083   04A0 58 03 00      add d, 3
0084   04A3 D7            push a
0085   04A4 DA            push d
0086   04A5 FD 2E 01 00   mov32 cb, $00000001
0086   04A9 00 00 
0087   04AB E7            pop d
0088   04AC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0089   04B0 E4            pop a
0090   04B1 DA            push d
0091   04B2 FD 2E 9A 02   mov32 cb, $0000029a
0091   04B6 00 00 
0092   04B8 E7            pop d
0093   04B9 FD 43         mov [d], b
0094   04BB             ; ss[0].a[2] = 777; 
0095   04BB FA 1C FC      lea d, [bp + -996] ; $ss
0096   04BE D7            push a
0097   04BF DA            push d
0098   04C0 FD 2E 00 00   mov32 cb, $00000000
0098   04C4 00 00 
0099   04C6 E7            pop d
0100   04C7 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0101   04CB E4            pop a
0102   04CC 58 03 00      add d, 3
0103   04CF D7            push a
0104   04D0 DA            push d
0105   04D1 FD 2E 02 00   mov32 cb, $00000002
0105   04D5 00 00 
0106   04D7 E7            pop d
0107   04D8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0108   04DC E4            pop a
0109   04DD DA            push d
0110   04DE FD 2E 09 03   mov32 cb, $00000309
0110   04E2 00 00 
0111   04E4 E7            pop d
0112   04E5 FD 43         mov [d], b
0113   04E7             ; ss[0].b[0] = 100; 
0114   04E7 FA 1C FC      lea d, [bp + -996] ; $ss
0115   04EA D7            push a
0116   04EB DA            push d
0117   04EC FD 2E 00 00   mov32 cb, $00000000
0117   04F0 00 00 
0118   04F2 E7            pop d
0119   04F3 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0120   04F7 E4            pop a
0121   04F8 58 17 00      add d, 23
0122   04FB D7            push a
0123   04FC DA            push d
0124   04FD FD 2E 00 00   mov32 cb, $00000000
0124   0501 00 00 
0125   0503 E7            pop d
0126   0504 5A            add d, b
0127   0505 E4            pop a
0128   0506 DA            push d
0129   0507 FD 2E 64 00   mov32 cb, $00000064
0129   050B 00 00 
0130   050D E7            pop d
0131   050E FD 3E         mov [d], bl
0132   0510             ; ss[0].b[1] = 200; 
0133   0510 FA 1C FC      lea d, [bp + -996] ; $ss
0134   0513 D7            push a
0135   0514 DA            push d
0136   0515 FD 2E 00 00   mov32 cb, $00000000
0136   0519 00 00 
0137   051B E7            pop d
0138   051C FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0139   0520 E4            pop a
0140   0521 58 17 00      add d, 23
0141   0524 D7            push a
0142   0525 DA            push d
0143   0526 FD 2E 01 00   mov32 cb, $00000001
0143   052A 00 00 
0144   052C E7            pop d
0145   052D 5A            add d, b
0146   052E E4            pop a
0147   052F DA            push d
0148   0530 FD 2E C8 00   mov32 cb, $000000c8
0148   0534 00 00 
0149   0536 E7            pop d
0150   0537 FD 3E         mov [d], bl
0151   0539             ; ss[0].b[2] = 30; 
0152   0539 FA 1C FC      lea d, [bp + -996] ; $ss
0153   053C D7            push a
0154   053D DA            push d
0155   053E FD 2E 00 00   mov32 cb, $00000000
0155   0542 00 00 
0156   0544 E7            pop d
0157   0545 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0158   0549 E4            pop a
0159   054A 58 17 00      add d, 23
0160   054D D7            push a
0161   054E DA            push d
0162   054F FD 2E 02 00   mov32 cb, $00000002
0162   0553 00 00 
0163   0555 E7            pop d
0164   0556 5A            add d, b
0165   0557 E4            pop a
0166   0558 DA            push d
0167   0559 FD 2E 1E 00   mov32 cb, $0000001e
0167   055D 00 00 
0168   055F E7            pop d
0169   0560 FD 3E         mov [d], bl
0170   0562             ; ss[3].s2[3].cc = 'z'; 
0171   0562 FA 1C FC      lea d, [bp + -996] ; $ss
0172   0565 D7            push a
0173   0566 DA            push d
0174   0567 FD 2E 03 00   mov32 cb, $00000003
0174   056B 00 00 
0175   056D E7            pop d
0176   056E FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0177   0572 E4            pop a
0178   0573 58 21 00      add d, 33
0179   0576 D7            push a
0180   0577 DA            push d
0181   0578 FD 2E 03 00   mov32 cb, $00000003
0181   057C 00 00 
0182   057E E7            pop d
0183   057F FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0184   0583 E4            pop a
0185   0584 58 00 00      add d, 0
0186   0587 DA            push d
0187   0588 FD 2E 7A 00   mov32 cb, $0000007a
0187   058C 00 00 
0188   058E E7            pop d
0189   058F FD 3E         mov [d], bl
0190   0591             ; ss[3].s2[3].ii = 999; 
0191   0591 FA 1C FC      lea d, [bp + -996] ; $ss
0192   0594 D7            push a
0193   0595 DA            push d
0194   0596 FD 2E 03 00   mov32 cb, $00000003
0194   059A 00 00 
0195   059C E7            pop d
0196   059D FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0197   05A1 E4            pop a
0198   05A2 58 21 00      add d, 33
0199   05A5 D7            push a
0200   05A6 DA            push d
0201   05A7 FD 2E 03 00   mov32 cb, $00000003
0201   05AB 00 00 
0202   05AD E7            pop d
0203   05AE FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0204   05B2 E4            pop a
0205   05B3 58 01 00      add d, 1
0206   05B6 DA            push d
0207   05B7 FD 2E E7 03   mov32 cb, $000003e7
0207   05BB 00 00 
0208   05BD E7            pop d
0209   05BE FD 43         mov [d], b
0210   05C0             ; ss[3].s2[3].cc2[0] = 255; 
0211   05C0 FA 1C FC      lea d, [bp + -996] ; $ss
0212   05C3 D7            push a
0213   05C4 DA            push d
0214   05C5 FD 2E 03 00   mov32 cb, $00000003
0214   05C9 00 00 
0215   05CB E7            pop d
0216   05CC FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0217   05D0 E4            pop a
0218   05D1 58 21 00      add d, 33
0219   05D4 D7            push a
0220   05D5 DA            push d
0221   05D6 FD 2E 03 00   mov32 cb, $00000003
0221   05DA 00 00 
0222   05DC E7            pop d
0223   05DD FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0224   05E1 E4            pop a
0225   05E2 58 03 00      add d, 3
0226   05E5 D7            push a
0227   05E6 DA            push d
0228   05E7 FD 2E 00 00   mov32 cb, $00000000
0228   05EB 00 00 
0229   05ED E7            pop d
0230   05EE 5A            add d, b
0231   05EF E4            pop a
0232   05F0 DA            push d
0233   05F1 FD 2E FF 00   mov32 cb, $000000ff
0233   05F5 00 00 
0234   05F7 E7            pop d
0235   05F8 FD 3E         mov [d], bl
0236   05FA             ; ss[3].s2[3].cc2[1] = 128; 
0237   05FA FA 1C FC      lea d, [bp + -996] ; $ss
0238   05FD D7            push a
0239   05FE DA            push d
0240   05FF FD 2E 03 00   mov32 cb, $00000003
0240   0603 00 00 
0241   0605 E7            pop d
0242   0606 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0243   060A E4            pop a
0244   060B 58 21 00      add d, 33
0245   060E D7            push a
0246   060F DA            push d
0247   0610 FD 2E 03 00   mov32 cb, $00000003
0247   0614 00 00 
0248   0616 E7            pop d
0249   0617 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0250   061B E4            pop a
0251   061C 58 03 00      add d, 3
0252   061F D7            push a
0253   0620 DA            push d
0254   0621 FD 2E 01 00   mov32 cb, $00000001
0254   0625 00 00 
0255   0627 E7            pop d
0256   0628 5A            add d, b
0257   0629 E4            pop a
0258   062A DA            push d
0259   062B FD 2E 80 00   mov32 cb, $00000080
0259   062F 00 00 
0260   0631 E7            pop d
0261   0632 FD 3E         mov [d], bl
0262   0634             ; ss[3].s2[3].cc2[2] = 100; 
0263   0634 FA 1C FC      lea d, [bp + -996] ; $ss
0264   0637 D7            push a
0265   0638 DA            push d
0266   0639 FD 2E 03 00   mov32 cb, $00000003
0266   063D 00 00 
0267   063F E7            pop d
0268   0640 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0269   0644 E4            pop a
0270   0645 58 21 00      add d, 33
0271   0648 D7            push a
0272   0649 DA            push d
0273   064A FD 2E 03 00   mov32 cb, $00000003
0273   064E 00 00 
0274   0650 E7            pop d
0275   0651 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0276   0655 E4            pop a
0277   0656 58 03 00      add d, 3
0278   0659 D7            push a
0279   065A DA            push d
0280   065B FD 2E 02 00   mov32 cb, $00000002
0280   065F 00 00 
0281   0661 E7            pop d
0282   0662 5A            add d, b
0283   0663 E4            pop a
0284   0664 DA            push d
0285   0665 FD 2E 64 00   mov32 cb, $00000064
0285   0669 00 00 
0286   066B E7            pop d
0287   066C FD 3E         mov [d], bl
0288   066E             ; ss[3].s2[3].ii2[0] = 65535; 
0289   066E FA 1C FC      lea d, [bp + -996] ; $ss
0290   0671 D7            push a
0291   0672 DA            push d
0292   0673 FD 2E 03 00   mov32 cb, $00000003
0292   0677 00 00 
0293   0679 E7            pop d
0294   067A FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0295   067E E4            pop a
0296   067F 58 21 00      add d, 33
0297   0682 D7            push a
0298   0683 DA            push d
0299   0684 FD 2E 03 00   mov32 cb, $00000003
0299   0688 00 00 
0300   068A E7            pop d
0301   068B FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0302   068F E4            pop a
0303   0690 58 0D 00      add d, 13
0304   0693 D7            push a
0305   0694 DA            push d
0306   0695 FD 2E 00 00   mov32 cb, $00000000
0306   0699 00 00 
0307   069B E7            pop d
0308   069C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0309   06A0 E4            pop a
0310   06A1 DA            push d
0311   06A2 FD 2E FF FF   mov32 cb, $0000ffff
0311   06A6 00 00 
0312   06A8 E7            pop d
0313   06A9 FD 43         mov [d], b
0314   06AB             ; ss[3].s2[3].ii2[1] = 50000; 
0315   06AB FA 1C FC      lea d, [bp + -996] ; $ss
0316   06AE D7            push a
0317   06AF DA            push d
0318   06B0 FD 2E 03 00   mov32 cb, $00000003
0318   06B4 00 00 
0319   06B6 E7            pop d
0320   06B7 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0321   06BB E4            pop a
0322   06BC 58 21 00      add d, 33
0323   06BF D7            push a
0324   06C0 DA            push d
0325   06C1 FD 2E 03 00   mov32 cb, $00000003
0325   06C5 00 00 
0326   06C7 E7            pop d
0327   06C8 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0328   06CC E4            pop a
0329   06CD 58 0D 00      add d, 13
0330   06D0 D7            push a
0331   06D1 DA            push d
0332   06D2 FD 2E 01 00   mov32 cb, $00000001
0332   06D6 00 00 
0333   06D8 E7            pop d
0334   06D9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0335   06DD E4            pop a
0336   06DE DA            push d
0337   06DF FD 2E 50 C3   mov32 cb, $0000c350
0337   06E3 00 00 
0338   06E5 E7            pop d
0339   06E6 FD 43         mov [d], b
0340   06E8             ; ss[3].s2[3].ii2[2] = 20000; 
0341   06E8 FA 1C FC      lea d, [bp + -996] ; $ss
0342   06EB D7            push a
0343   06EC DA            push d
0344   06ED FD 2E 03 00   mov32 cb, $00000003
0344   06F1 00 00 
0345   06F3 E7            pop d
0346   06F4 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0347   06F8 E4            pop a
0348   06F9 58 21 00      add d, 33
0349   06FC D7            push a
0350   06FD DA            push d
0351   06FE FD 2E 03 00   mov32 cb, $00000003
0351   0702 00 00 
0352   0704 E7            pop d
0353   0705 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0354   0709 E4            pop a
0355   070A 58 0D 00      add d, 13
0356   070D D7            push a
0357   070E DA            push d
0358   070F FD 2E 02 00   mov32 cb, $00000002
0358   0713 00 00 
0359   0715 E7            pop d
0360   0716 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0361   071A E4            pop a
0362   071B DA            push d
0363   071C FD 2E 20 4E   mov32 cb, $00004e20
0363   0720 00 00 
0364   0722 E7            pop d
0365   0723 FD 43         mov [d], b
0366   0725             ; ss[3].cc2 = 'b'; 
0367   0725 FA 1C FC      lea d, [bp + -996] ; $ss
0368   0728 D7            push a
0369   0729 DA            push d
0370   072A FD 2E 03 00   mov32 cb, $00000003
0370   072E 00 00 
0371   0730 E7            pop d
0372   0731 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0373   0735 E4            pop a
0374   0736 58 C6 00      add d, 198
0375   0739 DA            push d
0376   073A FD 2E 62 00   mov32 cb, $00000062
0376   073E 00 00 
0377   0740 E7            pop d
0378   0741 FD 3E         mov [d], bl
0379   0743             ; printf("printing assignments...\n"); 
0380   0743             ; --- START FUNCTION CALL
0381   0743 26 4A 19      mov b, _s1 ; "printing assignments...\n"
0382   0746 FD AB         swp b
0383   0748 D8            push b
0384   0749 07 20 10      call printf
0385   074C 51 02 00      add sp, 2
0386   074F             ; --- END FUNCTION CALL
0387   074F             ; printf("%c\n", ss[0].c); 
0388   074F             ; --- START FUNCTION CALL
0389   074F FA 1C FC      lea d, [bp + -996] ; $ss
0390   0752 D7            push a
0391   0753 DA            push d
0392   0754 FD 2E 00 00   mov32 cb, $00000000
0392   0758 00 00 
0393   075A E7            pop d
0394   075B FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0395   075F E4            pop a
0396   0760 58 00 00      add d, 0
0397   0763 32            mov bl, [d]
0398   0764 A7 00         mov bh, 0
0399   0766 38 00 00      mov c, 0
0400   0769 FD AB         swp b
0401   076B D8            push b
0402   076C 26 63 19      mov b, _s2 ; "%c\n"
0403   076F FD AB         swp b
0404   0771 D8            push b
0405   0772 07 20 10      call printf
0406   0775 51 03 00      add sp, 3
0407   0778             ; --- END FUNCTION CALL
0408   0778             ; printf("%d\n", ss[0].i); 
0409   0778             ; --- START FUNCTION CALL
0410   0778 FA 1C FC      lea d, [bp + -996] ; $ss
0411   077B D7            push a
0412   077C DA            push d
0413   077D FD 2E 00 00   mov32 cb, $00000000
0413   0781 00 00 
0414   0783 E7            pop d
0415   0784 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0416   0788 E4            pop a
0417   0789 58 01 00      add d, 1
0418   078C 2A            mov b, [d]
0419   078D 38 00 00      mov c, 0
0420   0790 FD AB         swp b
0421   0792 D8            push b
0422   0793 26 67 19      mov b, _s3 ; "%d\n"
0423   0796 FD AB         swp b
0424   0798 D8            push b
0425   0799 07 20 10      call printf
0426   079C 51 04 00      add sp, 4
0427   079F             ; --- END FUNCTION CALL
0428   079F             ; printf("%d\n", ss[0].a[0]); 
0429   079F             ; --- START FUNCTION CALL
0430   079F FA 1C FC      lea d, [bp + -996] ; $ss
0431   07A2 D7            push a
0432   07A3 DA            push d
0433   07A4 FD 2E 00 00   mov32 cb, $00000000
0433   07A8 00 00 
0434   07AA E7            pop d
0435   07AB FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0436   07AF E4            pop a
0437   07B0 58 03 00      add d, 3
0438   07B3 D7            push a
0439   07B4 DA            push d
0440   07B5 FD 2E 00 00   mov32 cb, $00000000
0440   07B9 00 00 
0441   07BB E7            pop d
0442   07BC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0443   07C0 E4            pop a
0444   07C1 2A            mov b, [d]
0445   07C2 38 00 00      mov c, 0
0446   07C5 FD AB         swp b
0447   07C7 D8            push b
0448   07C8 26 67 19      mov b, _s3 ; "%d\n"
0449   07CB FD AB         swp b
0450   07CD D8            push b
0451   07CE 07 20 10      call printf
0452   07D1 51 04 00      add sp, 4
0453   07D4             ; --- END FUNCTION CALL
0454   07D4             ; printf("%d\n", ss[0].a[1]); 
0455   07D4             ; --- START FUNCTION CALL
0456   07D4 FA 1C FC      lea d, [bp + -996] ; $ss
0457   07D7 D7            push a
0458   07D8 DA            push d
0459   07D9 FD 2E 00 00   mov32 cb, $00000000
0459   07DD 00 00 
0460   07DF E7            pop d
0461   07E0 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0462   07E4 E4            pop a
0463   07E5 58 03 00      add d, 3
0464   07E8 D7            push a
0465   07E9 DA            push d
0466   07EA FD 2E 01 00   mov32 cb, $00000001
0466   07EE 00 00 
0467   07F0 E7            pop d
0468   07F1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0469   07F5 E4            pop a
0470   07F6 2A            mov b, [d]
0471   07F7 38 00 00      mov c, 0
0472   07FA FD AB         swp b
0473   07FC D8            push b
0474   07FD 26 67 19      mov b, _s3 ; "%d\n"
0475   0800 FD AB         swp b
0476   0802 D8            push b
0477   0803 07 20 10      call printf
0478   0806 51 04 00      add sp, 4
0479   0809             ; --- END FUNCTION CALL
0480   0809             ; printf("%d\n", ss[0].a[2]); 
0481   0809             ; --- START FUNCTION CALL
0482   0809 FA 1C FC      lea d, [bp + -996] ; $ss
0483   080C D7            push a
0484   080D DA            push d
0485   080E FD 2E 00 00   mov32 cb, $00000000
0485   0812 00 00 
0486   0814 E7            pop d
0487   0815 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0488   0819 E4            pop a
0489   081A 58 03 00      add d, 3
0490   081D D7            push a
0491   081E DA            push d
0492   081F FD 2E 02 00   mov32 cb, $00000002
0492   0823 00 00 
0493   0825 E7            pop d
0494   0826 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0495   082A E4            pop a
0496   082B 2A            mov b, [d]
0497   082C 38 00 00      mov c, 0
0498   082F FD AB         swp b
0499   0831 D8            push b
0500   0832 26 67 19      mov b, _s3 ; "%d\n"
0501   0835 FD AB         swp b
0502   0837 D8            push b
0503   0838 07 20 10      call printf
0504   083B 51 04 00      add sp, 4
0505   083E             ; --- END FUNCTION CALL
0506   083E             ; printf("%d\n", ss[0].b[0]); 
0507   083E             ; --- START FUNCTION CALL
0508   083E FA 1C FC      lea d, [bp + -996] ; $ss
0509   0841 D7            push a
0510   0842 DA            push d
0511   0843 FD 2E 00 00   mov32 cb, $00000000
0511   0847 00 00 
0512   0849 E7            pop d
0513   084A FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0514   084E E4            pop a
0515   084F 58 17 00      add d, 23
0516   0852 D7            push a
0517   0853 DA            push d
0518   0854 FD 2E 00 00   mov32 cb, $00000000
0518   0858 00 00 
0519   085A E7            pop d
0520   085B 5A            add d, b
0521   085C E4            pop a
0522   085D 32            mov bl, [d]
0523   085E A7 00         mov bh, 0
0524   0860 38 00 00      mov c, 0
0525   0863 FD AB         swp b
0526   0865 D8            push b
0527   0866 26 67 19      mov b, _s3 ; "%d\n"
0528   0869 FD AB         swp b
0529   086B D8            push b
0530   086C 07 20 10      call printf
0531   086F 51 03 00      add sp, 3
0532   0872             ; --- END FUNCTION CALL
0533   0872             ; printf("%d\n", ss[0].b[1]); 
0534   0872             ; --- START FUNCTION CALL
0535   0872 FA 1C FC      lea d, [bp + -996] ; $ss
0536   0875 D7            push a
0537   0876 DA            push d
0538   0877 FD 2E 00 00   mov32 cb, $00000000
0538   087B 00 00 
0539   087D E7            pop d
0540   087E FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0541   0882 E4            pop a
0542   0883 58 17 00      add d, 23
0543   0886 D7            push a
0544   0887 DA            push d
0545   0888 FD 2E 01 00   mov32 cb, $00000001
0545   088C 00 00 
0546   088E E7            pop d
0547   088F 5A            add d, b
0548   0890 E4            pop a
0549   0891 32            mov bl, [d]
0550   0892 A7 00         mov bh, 0
0551   0894 38 00 00      mov c, 0
0552   0897 FD AB         swp b
0553   0899 D8            push b
0554   089A 26 67 19      mov b, _s3 ; "%d\n"
0555   089D FD AB         swp b
0556   089F D8            push b
0557   08A0 07 20 10      call printf
0558   08A3 51 03 00      add sp, 3
0559   08A6             ; --- END FUNCTION CALL
0560   08A6             ; printf("%d\n", ss[0].b[2]); 
0561   08A6             ; --- START FUNCTION CALL
0562   08A6 FA 1C FC      lea d, [bp + -996] ; $ss
0563   08A9 D7            push a
0564   08AA DA            push d
0565   08AB FD 2E 00 00   mov32 cb, $00000000
0565   08AF 00 00 
0566   08B1 E7            pop d
0567   08B2 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0568   08B6 E4            pop a
0569   08B7 58 17 00      add d, 23
0570   08BA D7            push a
0571   08BB DA            push d
0572   08BC FD 2E 02 00   mov32 cb, $00000002
0572   08C0 00 00 
0573   08C2 E7            pop d
0574   08C3 5A            add d, b
0575   08C4 E4            pop a
0576   08C5 32            mov bl, [d]
0577   08C6 A7 00         mov bh, 0
0578   08C8 38 00 00      mov c, 0
0579   08CB FD AB         swp b
0580   08CD D8            push b
0581   08CE 26 67 19      mov b, _s3 ; "%d\n"
0582   08D1 FD AB         swp b
0583   08D3 D8            push b
0584   08D4 07 20 10      call printf
0585   08D7 51 03 00      add sp, 3
0586   08DA             ; --- END FUNCTION CALL
0587   08DA             ; printf("%c\n", ss[3].s2[3].cc); 
0588   08DA             ; --- START FUNCTION CALL
0589   08DA FA 1C FC      lea d, [bp + -996] ; $ss
0590   08DD D7            push a
0591   08DE DA            push d
0592   08DF FD 2E 03 00   mov32 cb, $00000003
0592   08E3 00 00 
0593   08E5 E7            pop d
0594   08E6 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0595   08EA E4            pop a
0596   08EB 58 21 00      add d, 33
0597   08EE D7            push a
0598   08EF DA            push d
0599   08F0 FD 2E 03 00   mov32 cb, $00000003
0599   08F4 00 00 
0600   08F6 E7            pop d
0601   08F7 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0602   08FB E4            pop a
0603   08FC 58 00 00      add d, 0
0604   08FF 32            mov bl, [d]
0605   0900 A7 00         mov bh, 0
0606   0902 38 00 00      mov c, 0
0607   0905 FD AB         swp b
0608   0907 D8            push b
0609   0908 26 63 19      mov b, _s2 ; "%c\n"
0610   090B FD AB         swp b
0611   090D D8            push b
0612   090E 07 20 10      call printf
0613   0911 51 03 00      add sp, 3
0614   0914             ; --- END FUNCTION CALL
0615   0914             ; printf("%d\n", ss[3].s2[3].ii); 
0616   0914             ; --- START FUNCTION CALL
0617   0914 FA 1C FC      lea d, [bp + -996] ; $ss
0618   0917 D7            push a
0619   0918 DA            push d
0620   0919 FD 2E 03 00   mov32 cb, $00000003
0620   091D 00 00 
0621   091F E7            pop d
0622   0920 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0623   0924 E4            pop a
0624   0925 58 21 00      add d, 33
0625   0928 D7            push a
0626   0929 DA            push d
0627   092A FD 2E 03 00   mov32 cb, $00000003
0627   092E 00 00 
0628   0930 E7            pop d
0629   0931 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0630   0935 E4            pop a
0631   0936 58 01 00      add d, 1
0632   0939 2A            mov b, [d]
0633   093A 38 00 00      mov c, 0
0634   093D FD AB         swp b
0635   093F D8            push b
0636   0940 26 67 19      mov b, _s3 ; "%d\n"
0637   0943 FD AB         swp b
0638   0945 D8            push b
0639   0946 07 20 10      call printf
0640   0949 51 04 00      add sp, 4
0641   094C             ; --- END FUNCTION CALL
0642   094C             ; printf("%u\n", ss[3].s2[3].cc2[0]); 
0643   094C             ; --- START FUNCTION CALL
0644   094C FA 1C FC      lea d, [bp + -996] ; $ss
0645   094F D7            push a
0646   0950 DA            push d
0647   0951 FD 2E 03 00   mov32 cb, $00000003
0647   0955 00 00 
0648   0957 E7            pop d
0649   0958 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0650   095C E4            pop a
0651   095D 58 21 00      add d, 33
0652   0960 D7            push a
0653   0961 DA            push d
0654   0962 FD 2E 03 00   mov32 cb, $00000003
0654   0966 00 00 
0655   0968 E7            pop d
0656   0969 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0657   096D E4            pop a
0658   096E 58 03 00      add d, 3
0659   0971 D7            push a
0660   0972 DA            push d
0661   0973 FD 2E 00 00   mov32 cb, $00000000
0661   0977 00 00 
0662   0979 E7            pop d
0663   097A 5A            add d, b
0664   097B E4            pop a
0665   097C 32            mov bl, [d]
0666   097D A7 00         mov bh, 0
0667   097F 38 00 00      mov c, 0
0668   0982 FD AB         swp b
0669   0984 D8            push b
0670   0985 26 6B 19      mov b, _s4 ; "%u\n"
0671   0988 FD AB         swp b
0672   098A D8            push b
0673   098B 07 20 10      call printf
0674   098E 51 03 00      add sp, 3
0675   0991             ; --- END FUNCTION CALL
0676   0991             ; printf("%u\n", ss[3].s2[3].cc2[1]); 
0677   0991             ; --- START FUNCTION CALL
0678   0991 FA 1C FC      lea d, [bp + -996] ; $ss
0679   0994 D7            push a
0680   0995 DA            push d
0681   0996 FD 2E 03 00   mov32 cb, $00000003
0681   099A 00 00 
0682   099C E7            pop d
0683   099D FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0684   09A1 E4            pop a
0685   09A2 58 21 00      add d, 33
0686   09A5 D7            push a
0687   09A6 DA            push d
0688   09A7 FD 2E 03 00   mov32 cb, $00000003
0688   09AB 00 00 
0689   09AD E7            pop d
0690   09AE FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0691   09B2 E4            pop a
0692   09B3 58 03 00      add d, 3
0693   09B6 D7            push a
0694   09B7 DA            push d
0695   09B8 FD 2E 01 00   mov32 cb, $00000001
0695   09BC 00 00 
0696   09BE E7            pop d
0697   09BF 5A            add d, b
0698   09C0 E4            pop a
0699   09C1 32            mov bl, [d]
0700   09C2 A7 00         mov bh, 0
0701   09C4 38 00 00      mov c, 0
0702   09C7 FD AB         swp b
0703   09C9 D8            push b
0704   09CA 26 6B 19      mov b, _s4 ; "%u\n"
0705   09CD FD AB         swp b
0706   09CF D8            push b
0707   09D0 07 20 10      call printf
0708   09D3 51 03 00      add sp, 3
0709   09D6             ; --- END FUNCTION CALL
0710   09D6             ; printf("%u\n", ss[3].s2[3].cc2[2]); 
0711   09D6             ; --- START FUNCTION CALL
0712   09D6 FA 1C FC      lea d, [bp + -996] ; $ss
0713   09D9 D7            push a
0714   09DA DA            push d
0715   09DB FD 2E 03 00   mov32 cb, $00000003
0715   09DF 00 00 
0716   09E1 E7            pop d
0717   09E2 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0718   09E6 E4            pop a
0719   09E7 58 21 00      add d, 33
0720   09EA D7            push a
0721   09EB DA            push d
0722   09EC FD 2E 03 00   mov32 cb, $00000003
0722   09F0 00 00 
0723   09F2 E7            pop d
0724   09F3 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0725   09F7 E4            pop a
0726   09F8 58 03 00      add d, 3
0727   09FB D7            push a
0728   09FC DA            push d
0729   09FD FD 2E 02 00   mov32 cb, $00000002
0729   0A01 00 00 
0730   0A03 E7            pop d
0731   0A04 5A            add d, b
0732   0A05 E4            pop a
0733   0A06 32            mov bl, [d]
0734   0A07 A7 00         mov bh, 0
0735   0A09 38 00 00      mov c, 0
0736   0A0C FD AB         swp b
0737   0A0E D8            push b
0738   0A0F 26 6B 19      mov b, _s4 ; "%u\n"
0739   0A12 FD AB         swp b
0740   0A14 D8            push b
0741   0A15 07 20 10      call printf
0742   0A18 51 03 00      add sp, 3
0743   0A1B             ; --- END FUNCTION CALL
0744   0A1B             ; printf("%u\n", ss[3].s2[3].ii2[0]); 
0745   0A1B             ; --- START FUNCTION CALL
0746   0A1B FA 1C FC      lea d, [bp + -996] ; $ss
0747   0A1E D7            push a
0748   0A1F DA            push d
0749   0A20 FD 2E 03 00   mov32 cb, $00000003
0749   0A24 00 00 
0750   0A26 E7            pop d
0751   0A27 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0752   0A2B E4            pop a
0753   0A2C 58 21 00      add d, 33
0754   0A2F D7            push a
0755   0A30 DA            push d
0756   0A31 FD 2E 03 00   mov32 cb, $00000003
0756   0A35 00 00 
0757   0A37 E7            pop d
0758   0A38 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0759   0A3C E4            pop a
0760   0A3D 58 0D 00      add d, 13
0761   0A40 D7            push a
0762   0A41 DA            push d
0763   0A42 FD 2E 00 00   mov32 cb, $00000000
0763   0A46 00 00 
0764   0A48 E7            pop d
0765   0A49 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0766   0A4D E4            pop a
0767   0A4E 2A            mov b, [d]
0768   0A4F 38 00 00      mov c, 0
0769   0A52 FD AB         swp b
0770   0A54 D8            push b
0771   0A55 26 6B 19      mov b, _s4 ; "%u\n"
0772   0A58 FD AB         swp b
0773   0A5A D8            push b
0774   0A5B 07 20 10      call printf
0775   0A5E 51 04 00      add sp, 4
0776   0A61             ; --- END FUNCTION CALL
0777   0A61             ; printf("%u\n", ss[3].s2[3].ii2[1]); 
0778   0A61             ; --- START FUNCTION CALL
0779   0A61 FA 1C FC      lea d, [bp + -996] ; $ss
0780   0A64 D7            push a
0781   0A65 DA            push d
0782   0A66 FD 2E 03 00   mov32 cb, $00000003
0782   0A6A 00 00 
0783   0A6C E7            pop d
0784   0A6D FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0785   0A71 E4            pop a
0786   0A72 58 21 00      add d, 33
0787   0A75 D7            push a
0788   0A76 DA            push d
0789   0A77 FD 2E 03 00   mov32 cb, $00000003
0789   0A7B 00 00 
0790   0A7D E7            pop d
0791   0A7E FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0792   0A82 E4            pop a
0793   0A83 58 0D 00      add d, 13
0794   0A86 D7            push a
0795   0A87 DA            push d
0796   0A88 FD 2E 01 00   mov32 cb, $00000001
0796   0A8C 00 00 
0797   0A8E E7            pop d
0798   0A8F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0799   0A93 E4            pop a
0800   0A94 2A            mov b, [d]
0801   0A95 38 00 00      mov c, 0
0802   0A98 FD AB         swp b
0803   0A9A D8            push b
0804   0A9B 26 6B 19      mov b, _s4 ; "%u\n"
0805   0A9E FD AB         swp b
0806   0AA0 D8            push b
0807   0AA1 07 20 10      call printf
0808   0AA4 51 04 00      add sp, 4
0809   0AA7             ; --- END FUNCTION CALL
0810   0AA7             ; printf("%u\n", ss[3].s2[3].ii2[2]); 
0811   0AA7             ; --- START FUNCTION CALL
0812   0AA7 FA 1C FC      lea d, [bp + -996] ; $ss
0813   0AAA D7            push a
0814   0AAB DA            push d
0815   0AAC FD 2E 03 00   mov32 cb, $00000003
0815   0AB0 00 00 
0816   0AB2 E7            pop d
0817   0AB3 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0818   0AB7 E4            pop a
0819   0AB8 58 21 00      add d, 33
0820   0ABB D7            push a
0821   0ABC DA            push d
0822   0ABD FD 2E 03 00   mov32 cb, $00000003
0822   0AC1 00 00 
0823   0AC3 E7            pop d
0824   0AC4 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
0825   0AC8 E4            pop a
0826   0AC9 58 0D 00      add d, 13
0827   0ACC D7            push a
0828   0ACD DA            push d
0829   0ACE FD 2E 02 00   mov32 cb, $00000002
0829   0AD2 00 00 
0830   0AD4 E7            pop d
0831   0AD5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0832   0AD9 E4            pop a
0833   0ADA 2A            mov b, [d]
0834   0ADB 38 00 00      mov c, 0
0835   0ADE FD AB         swp b
0836   0AE0 D8            push b
0837   0AE1 26 6B 19      mov b, _s4 ; "%u\n"
0838   0AE4 FD AB         swp b
0839   0AE6 D8            push b
0840   0AE7 07 20 10      call printf
0841   0AEA 51 04 00      add sp, 4
0842   0AED             ; --- END FUNCTION CALL
0843   0AED             ; printf("%c\n", ss[3].cc2); 
0844   0AED             ; --- START FUNCTION CALL
0845   0AED FA 1C FC      lea d, [bp + -996] ; $ss
0846   0AF0 D7            push a
0847   0AF1 DA            push d
0848   0AF2 FD 2E 03 00   mov32 cb, $00000003
0848   0AF6 00 00 
0849   0AF8 E7            pop d
0850   0AF9 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0851   0AFD E4            pop a
0852   0AFE 58 C6 00      add d, 198
0853   0B01 32            mov bl, [d]
0854   0B02 A7 00         mov bh, 0
0855   0B04 38 00 00      mov c, 0
0856   0B07 FD AB         swp b
0857   0B09 D8            push b
0858   0B0A 26 63 19      mov b, _s2 ; "%c\n"
0859   0B0D FD AB         swp b
0860   0B0F D8            push b
0861   0B10 07 20 10      call printf
0862   0B13 51 03 00      add sp, 3
0863   0B16             ; --- END FUNCTION CALL
0864   0B16             ; printf("checking results...\n");     
0865   0B16             ; --- START FUNCTION CALL
0866   0B16 26 6F 19      mov b, _s5 ; "checking results...\n"
0867   0B19 FD AB         swp b
0868   0B1B D8            push b
0869   0B1C 07 20 10      call printf
0870   0B1F 51 02 00      add sp, 2
0871   0B22             ; --- END FUNCTION CALL
0872   0B22             ; pass = pass && ss[0].c == 'a'; 
0873   0B22 FA FF FF      lea d, [bp + -1] ; $pass
0874   0B25 DA            push d
0875   0B26 FA FF FF      lea d, [bp + -1] ; $pass
0876   0B29 2A            mov b, [d]
0877   0B2A 38 00 00      mov c, 0
0878   0B2D             ; --- START LOGICAL AND
0879   0B2D D7            push a
0880   0B2E 11            mov a, b
0881   0B2F FA 1C FC      lea d, [bp + -996] ; $ss
0882   0B32 D7            push a
0883   0B33 DA            push d
0884   0B34 FD 2E 00 00   mov32 cb, $00000000
0884   0B38 00 00 
0885   0B3A E7            pop d
0886   0B3B FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0887   0B3F E4            pop a
0888   0B40 58 00 00      add d, 0
0889   0B43 32            mov bl, [d]
0890   0B44 A7 00         mov bh, 0
0891   0B46 38 00 00      mov c, 0
0892   0B49             ; --- START RELATIONAL
0893   0B49 D7            push a
0894   0B4A 11            mov a, b
0895   0B4B FD 2E 61 00   mov32 cb, $00000061
0895   0B4F 00 00 
0896   0B51 B0            cmp a, b
0897   0B52 FD 71         seq ; ==
0898   0B54 E4            pop a
0899   0B55             ; --- END RELATIONAL
0900   0B55 FD A7         sand a, b
0901   0B57 E4            pop a
0902   0B58             ; --- END LOGICAL AND
0903   0B58 E7            pop d
0904   0B59 FD 43         mov [d], b
0905   0B5B             ; pass = pass && ss[0].i == 123; 
0906   0B5B FA FF FF      lea d, [bp + -1] ; $pass
0907   0B5E DA            push d
0908   0B5F FA FF FF      lea d, [bp + -1] ; $pass
0909   0B62 2A            mov b, [d]
0910   0B63 38 00 00      mov c, 0
0911   0B66             ; --- START LOGICAL AND
0912   0B66 D7            push a
0913   0B67 11            mov a, b
0914   0B68 FA 1C FC      lea d, [bp + -996] ; $ss
0915   0B6B D7            push a
0916   0B6C DA            push d
0917   0B6D FD 2E 00 00   mov32 cb, $00000000
0917   0B71 00 00 
0918   0B73 E7            pop d
0919   0B74 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0920   0B78 E4            pop a
0921   0B79 58 01 00      add d, 1
0922   0B7C 2A            mov b, [d]
0923   0B7D 38 00 00      mov c, 0
0924   0B80             ; --- START RELATIONAL
0925   0B80 D7            push a
0926   0B81 11            mov a, b
0927   0B82 FD 2E 7B 00   mov32 cb, $0000007b
0927   0B86 00 00 
0928   0B88 B0            cmp a, b
0929   0B89 FD 71         seq ; ==
0930   0B8B E4            pop a
0931   0B8C             ; --- END RELATIONAL
0932   0B8C FD A7         sand a, b
0933   0B8E E4            pop a
0934   0B8F             ; --- END LOGICAL AND
0935   0B8F E7            pop d
0936   0B90 FD 43         mov [d], b
0937   0B92             ; pass = pass && ss[0].a[0] == 555; 
0938   0B92 FA FF FF      lea d, [bp + -1] ; $pass
0939   0B95 DA            push d
0940   0B96 FA FF FF      lea d, [bp + -1] ; $pass
0941   0B99 2A            mov b, [d]
0942   0B9A 38 00 00      mov c, 0
0943   0B9D             ; --- START LOGICAL AND
0944   0B9D D7            push a
0945   0B9E 11            mov a, b
0946   0B9F FA 1C FC      lea d, [bp + -996] ; $ss
0947   0BA2 D7            push a
0948   0BA3 DA            push d
0949   0BA4 FD 2E 00 00   mov32 cb, $00000000
0949   0BA8 00 00 
0950   0BAA E7            pop d
0951   0BAB FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0952   0BAF E4            pop a
0953   0BB0 58 03 00      add d, 3
0954   0BB3 D7            push a
0955   0BB4 DA            push d
0956   0BB5 FD 2E 00 00   mov32 cb, $00000000
0956   0BB9 00 00 
0957   0BBB E7            pop d
0958   0BBC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0959   0BC0 E4            pop a
0960   0BC1 2A            mov b, [d]
0961   0BC2 38 00 00      mov c, 0
0962   0BC5             ; --- START RELATIONAL
0963   0BC5 D7            push a
0964   0BC6 11            mov a, b
0965   0BC7 FD 2E 2B 02   mov32 cb, $0000022b
0965   0BCB 00 00 
0966   0BCD B0            cmp a, b
0967   0BCE FD 71         seq ; ==
0968   0BD0 E4            pop a
0969   0BD1             ; --- END RELATIONAL
0970   0BD1 FD A7         sand a, b
0971   0BD3 E4            pop a
0972   0BD4             ; --- END LOGICAL AND
0973   0BD4 E7            pop d
0974   0BD5 FD 43         mov [d], b
0975   0BD7             ; pass = pass && ss[0].a[1] == 666; 
0976   0BD7 FA FF FF      lea d, [bp + -1] ; $pass
0977   0BDA DA            push d
0978   0BDB FA FF FF      lea d, [bp + -1] ; $pass
0979   0BDE 2A            mov b, [d]
0980   0BDF 38 00 00      mov c, 0
0981   0BE2             ; --- START LOGICAL AND
0982   0BE2 D7            push a
0983   0BE3 11            mov a, b
0984   0BE4 FA 1C FC      lea d, [bp + -996] ; $ss
0985   0BE7 D7            push a
0986   0BE8 DA            push d
0987   0BE9 FD 2E 00 00   mov32 cb, $00000000
0987   0BED 00 00 
0988   0BEF E7            pop d
0989   0BF0 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
0990   0BF4 E4            pop a
0991   0BF5 58 03 00      add d, 3
0992   0BF8 D7            push a
0993   0BF9 DA            push d
0994   0BFA FD 2E 01 00   mov32 cb, $00000001
0994   0BFE 00 00 
0995   0C00 E7            pop d
0996   0C01 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0997   0C05 E4            pop a
0998   0C06 2A            mov b, [d]
0999   0C07 38 00 00      mov c, 0
1000   0C0A             ; --- START RELATIONAL
1001   0C0A D7            push a
1002   0C0B 11            mov a, b
1003   0C0C FD 2E 9A 02   mov32 cb, $0000029a
1003   0C10 00 00 
1004   0C12 B0            cmp a, b
1005   0C13 FD 71         seq ; ==
1006   0C15 E4            pop a
1007   0C16             ; --- END RELATIONAL
1008   0C16 FD A7         sand a, b
1009   0C18 E4            pop a
1010   0C19             ; --- END LOGICAL AND
1011   0C19 E7            pop d
1012   0C1A FD 43         mov [d], b
1013   0C1C             ; pass = pass && ss[0].a[2] == 777; 
1014   0C1C FA FF FF      lea d, [bp + -1] ; $pass
1015   0C1F DA            push d
1016   0C20 FA FF FF      lea d, [bp + -1] ; $pass
1017   0C23 2A            mov b, [d]
1018   0C24 38 00 00      mov c, 0
1019   0C27             ; --- START LOGICAL AND
1020   0C27 D7            push a
1021   0C28 11            mov a, b
1022   0C29 FA 1C FC      lea d, [bp + -996] ; $ss
1023   0C2C D7            push a
1024   0C2D DA            push d
1025   0C2E FD 2E 00 00   mov32 cb, $00000000
1025   0C32 00 00 
1026   0C34 E7            pop d
1027   0C35 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1028   0C39 E4            pop a
1029   0C3A 58 03 00      add d, 3
1030   0C3D D7            push a
1031   0C3E DA            push d
1032   0C3F FD 2E 02 00   mov32 cb, $00000002
1032   0C43 00 00 
1033   0C45 E7            pop d
1034   0C46 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1035   0C4A E4            pop a
1036   0C4B 2A            mov b, [d]
1037   0C4C 38 00 00      mov c, 0
1038   0C4F             ; --- START RELATIONAL
1039   0C4F D7            push a
1040   0C50 11            mov a, b
1041   0C51 FD 2E 09 03   mov32 cb, $00000309
1041   0C55 00 00 
1042   0C57 B0            cmp a, b
1043   0C58 FD 71         seq ; ==
1044   0C5A E4            pop a
1045   0C5B             ; --- END RELATIONAL
1046   0C5B FD A7         sand a, b
1047   0C5D E4            pop a
1048   0C5E             ; --- END LOGICAL AND
1049   0C5E E7            pop d
1050   0C5F FD 43         mov [d], b
1051   0C61             ; pass = pass && ss[0].b[0] == 100; 
1052   0C61 FA FF FF      lea d, [bp + -1] ; $pass
1053   0C64 DA            push d
1054   0C65 FA FF FF      lea d, [bp + -1] ; $pass
1055   0C68 2A            mov b, [d]
1056   0C69 38 00 00      mov c, 0
1057   0C6C             ; --- START LOGICAL AND
1058   0C6C D7            push a
1059   0C6D 11            mov a, b
1060   0C6E FA 1C FC      lea d, [bp + -996] ; $ss
1061   0C71 D7            push a
1062   0C72 DA            push d
1063   0C73 FD 2E 00 00   mov32 cb, $00000000
1063   0C77 00 00 
1064   0C79 E7            pop d
1065   0C7A FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1066   0C7E E4            pop a
1067   0C7F 58 17 00      add d, 23
1068   0C82 D7            push a
1069   0C83 DA            push d
1070   0C84 FD 2E 00 00   mov32 cb, $00000000
1070   0C88 00 00 
1071   0C8A E7            pop d
1072   0C8B 5A            add d, b
1073   0C8C E4            pop a
1074   0C8D 32            mov bl, [d]
1075   0C8E A7 00         mov bh, 0
1076   0C90 38 00 00      mov c, 0
1077   0C93             ; --- START RELATIONAL
1078   0C93 D7            push a
1079   0C94 11            mov a, b
1080   0C95 FD 2E 64 00   mov32 cb, $00000064
1080   0C99 00 00 
1081   0C9B B0            cmp a, b
1082   0C9C FD 71         seq ; ==
1083   0C9E E4            pop a
1084   0C9F             ; --- END RELATIONAL
1085   0C9F FD A7         sand a, b
1086   0CA1 E4            pop a
1087   0CA2             ; --- END LOGICAL AND
1088   0CA2 E7            pop d
1089   0CA3 FD 43         mov [d], b
1090   0CA5             ; pass = pass && ss[0].b[1] == 200; 
1091   0CA5 FA FF FF      lea d, [bp + -1] ; $pass
1092   0CA8 DA            push d
1093   0CA9 FA FF FF      lea d, [bp + -1] ; $pass
1094   0CAC 2A            mov b, [d]
1095   0CAD 38 00 00      mov c, 0
1096   0CB0             ; --- START LOGICAL AND
1097   0CB0 D7            push a
1098   0CB1 11            mov a, b
1099   0CB2 FA 1C FC      lea d, [bp + -996] ; $ss
1100   0CB5 D7            push a
1101   0CB6 DA            push d
1102   0CB7 FD 2E 00 00   mov32 cb, $00000000
1102   0CBB 00 00 
1103   0CBD E7            pop d
1104   0CBE FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1105   0CC2 E4            pop a
1106   0CC3 58 17 00      add d, 23
1107   0CC6 D7            push a
1108   0CC7 DA            push d
1109   0CC8 FD 2E 01 00   mov32 cb, $00000001
1109   0CCC 00 00 
1110   0CCE E7            pop d
1111   0CCF 5A            add d, b
1112   0CD0 E4            pop a
1113   0CD1 32            mov bl, [d]
1114   0CD2 A7 00         mov bh, 0
1115   0CD4 38 00 00      mov c, 0
1116   0CD7             ; --- START RELATIONAL
1117   0CD7 D7            push a
1118   0CD8 11            mov a, b
1119   0CD9 FD 2E C8 00   mov32 cb, $000000c8
1119   0CDD 00 00 
1120   0CDF B0            cmp a, b
1121   0CE0 FD 71         seq ; ==
1122   0CE2 E4            pop a
1123   0CE3             ; --- END RELATIONAL
1124   0CE3 FD A7         sand a, b
1125   0CE5 E4            pop a
1126   0CE6             ; --- END LOGICAL AND
1127   0CE6 E7            pop d
1128   0CE7 FD 43         mov [d], b
1129   0CE9             ; pass = pass && ss[0].b[2] == 30; 
1130   0CE9 FA FF FF      lea d, [bp + -1] ; $pass
1131   0CEC DA            push d
1132   0CED FA FF FF      lea d, [bp + -1] ; $pass
1133   0CF0 2A            mov b, [d]
1134   0CF1 38 00 00      mov c, 0
1135   0CF4             ; --- START LOGICAL AND
1136   0CF4 D7            push a
1137   0CF5 11            mov a, b
1138   0CF6 FA 1C FC      lea d, [bp + -996] ; $ss
1139   0CF9 D7            push a
1140   0CFA DA            push d
1141   0CFB FD 2E 00 00   mov32 cb, $00000000
1141   0CFF 00 00 
1142   0D01 E7            pop d
1143   0D02 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1144   0D06 E4            pop a
1145   0D07 58 17 00      add d, 23
1146   0D0A D7            push a
1147   0D0B DA            push d
1148   0D0C FD 2E 02 00   mov32 cb, $00000002
1148   0D10 00 00 
1149   0D12 E7            pop d
1150   0D13 5A            add d, b
1151   0D14 E4            pop a
1152   0D15 32            mov bl, [d]
1153   0D16 A7 00         mov bh, 0
1154   0D18 38 00 00      mov c, 0
1155   0D1B             ; --- START RELATIONAL
1156   0D1B D7            push a
1157   0D1C 11            mov a, b
1158   0D1D FD 2E 1E 00   mov32 cb, $0000001e
1158   0D21 00 00 
1159   0D23 B0            cmp a, b
1160   0D24 FD 71         seq ; ==
1161   0D26 E4            pop a
1162   0D27             ; --- END RELATIONAL
1163   0D27 FD A7         sand a, b
1164   0D29 E4            pop a
1165   0D2A             ; --- END LOGICAL AND
1166   0D2A E7            pop d
1167   0D2B FD 43         mov [d], b
1168   0D2D             ; pass = pass && ss[3].s2[3].cc == 'z'; 
1169   0D2D FA FF FF      lea d, [bp + -1] ; $pass
1170   0D30 DA            push d
1171   0D31 FA FF FF      lea d, [bp + -1] ; $pass
1172   0D34 2A            mov b, [d]
1173   0D35 38 00 00      mov c, 0
1174   0D38             ; --- START LOGICAL AND
1175   0D38 D7            push a
1176   0D39 11            mov a, b
1177   0D3A FA 1C FC      lea d, [bp + -996] ; $ss
1178   0D3D D7            push a
1179   0D3E DA            push d
1180   0D3F FD 2E 03 00   mov32 cb, $00000003
1180   0D43 00 00 
1181   0D45 E7            pop d
1182   0D46 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1183   0D4A E4            pop a
1184   0D4B 58 21 00      add d, 33
1185   0D4E D7            push a
1186   0D4F DA            push d
1187   0D50 FD 2E 03 00   mov32 cb, $00000003
1187   0D54 00 00 
1188   0D56 E7            pop d
1189   0D57 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
1190   0D5B E4            pop a
1191   0D5C 58 00 00      add d, 0
1192   0D5F 32            mov bl, [d]
1193   0D60 A7 00         mov bh, 0
1194   0D62 38 00 00      mov c, 0
1195   0D65             ; --- START RELATIONAL
1196   0D65 D7            push a
1197   0D66 11            mov a, b
1198   0D67 FD 2E 7A 00   mov32 cb, $0000007a
1198   0D6B 00 00 
1199   0D6D B0            cmp a, b
1200   0D6E FD 71         seq ; ==
1201   0D70 E4            pop a
1202   0D71             ; --- END RELATIONAL
1203   0D71 FD A7         sand a, b
1204   0D73 E4            pop a
1205   0D74             ; --- END LOGICAL AND
1206   0D74 E7            pop d
1207   0D75 FD 43         mov [d], b
1208   0D77             ; pass = pass && ss[3].s2[3].ii == 999; 
1209   0D77 FA FF FF      lea d, [bp + -1] ; $pass
1210   0D7A DA            push d
1211   0D7B FA FF FF      lea d, [bp + -1] ; $pass
1212   0D7E 2A            mov b, [d]
1213   0D7F 38 00 00      mov c, 0
1214   0D82             ; --- START LOGICAL AND
1215   0D82 D7            push a
1216   0D83 11            mov a, b
1217   0D84 FA 1C FC      lea d, [bp + -996] ; $ss
1218   0D87 D7            push a
1219   0D88 DA            push d
1220   0D89 FD 2E 03 00   mov32 cb, $00000003
1220   0D8D 00 00 
1221   0D8F E7            pop d
1222   0D90 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1223   0D94 E4            pop a
1224   0D95 58 21 00      add d, 33
1225   0D98 D7            push a
1226   0D99 DA            push d
1227   0D9A FD 2E 03 00   mov32 cb, $00000003
1227   0D9E 00 00 
1228   0DA0 E7            pop d
1229   0DA1 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
1230   0DA5 E4            pop a
1231   0DA6 58 01 00      add d, 1
1232   0DA9 2A            mov b, [d]
1233   0DAA 38 00 00      mov c, 0
1234   0DAD             ; --- START RELATIONAL
1235   0DAD D7            push a
1236   0DAE 11            mov a, b
1237   0DAF FD 2E E7 03   mov32 cb, $000003e7
1237   0DB3 00 00 
1238   0DB5 B0            cmp a, b
1239   0DB6 FD 71         seq ; ==
1240   0DB8 E4            pop a
1241   0DB9             ; --- END RELATIONAL
1242   0DB9 FD A7         sand a, b
1243   0DBB E4            pop a
1244   0DBC             ; --- END LOGICAL AND
1245   0DBC E7            pop d
1246   0DBD FD 43         mov [d], b
1247   0DBF             ; pass = pass && ss[3].s2[3].cc2[0] == 255; 
1248   0DBF FA FF FF      lea d, [bp + -1] ; $pass
1249   0DC2 DA            push d
1250   0DC3 FA FF FF      lea d, [bp + -1] ; $pass
1251   0DC6 2A            mov b, [d]
1252   0DC7 38 00 00      mov c, 0
1253   0DCA             ; --- START LOGICAL AND
1254   0DCA D7            push a
1255   0DCB 11            mov a, b
1256   0DCC FA 1C FC      lea d, [bp + -996] ; $ss
1257   0DCF D7            push a
1258   0DD0 DA            push d
1259   0DD1 FD 2E 03 00   mov32 cb, $00000003
1259   0DD5 00 00 
1260   0DD7 E7            pop d
1261   0DD8 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1262   0DDC E4            pop a
1263   0DDD 58 21 00      add d, 33
1264   0DE0 D7            push a
1265   0DE1 DA            push d
1266   0DE2 FD 2E 03 00   mov32 cb, $00000003
1266   0DE6 00 00 
1267   0DE8 E7            pop d
1268   0DE9 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
1269   0DED E4            pop a
1270   0DEE 58 03 00      add d, 3
1271   0DF1 D7            push a
1272   0DF2 DA            push d
1273   0DF3 FD 2E 00 00   mov32 cb, $00000000
1273   0DF7 00 00 
1274   0DF9 E7            pop d
1275   0DFA 5A            add d, b
1276   0DFB E4            pop a
1277   0DFC 32            mov bl, [d]
1278   0DFD A7 00         mov bh, 0
1279   0DFF 38 00 00      mov c, 0
1280   0E02             ; --- START RELATIONAL
1281   0E02 D7            push a
1282   0E03 11            mov a, b
1283   0E04 FD 2E FF 00   mov32 cb, $000000ff
1283   0E08 00 00 
1284   0E0A B0            cmp a, b
1285   0E0B FD 71         seq ; ==
1286   0E0D E4            pop a
1287   0E0E             ; --- END RELATIONAL
1288   0E0E FD A7         sand a, b
1289   0E10 E4            pop a
1290   0E11             ; --- END LOGICAL AND
1291   0E11 E7            pop d
1292   0E12 FD 43         mov [d], b
1293   0E14             ; pass = pass && ss[3].s2[3].cc2[1] == 128; 
1294   0E14 FA FF FF      lea d, [bp + -1] ; $pass
1295   0E17 DA            push d
1296   0E18 FA FF FF      lea d, [bp + -1] ; $pass
1297   0E1B 2A            mov b, [d]
1298   0E1C 38 00 00      mov c, 0
1299   0E1F             ; --- START LOGICAL AND
1300   0E1F D7            push a
1301   0E20 11            mov a, b
1302   0E21 FA 1C FC      lea d, [bp + -996] ; $ss
1303   0E24 D7            push a
1304   0E25 DA            push d
1305   0E26 FD 2E 03 00   mov32 cb, $00000003
1305   0E2A 00 00 
1306   0E2C E7            pop d
1307   0E2D FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1308   0E31 E4            pop a
1309   0E32 58 21 00      add d, 33
1310   0E35 D7            push a
1311   0E36 DA            push d
1312   0E37 FD 2E 03 00   mov32 cb, $00000003
1312   0E3B 00 00 
1313   0E3D E7            pop d
1314   0E3E FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
1315   0E42 E4            pop a
1316   0E43 58 03 00      add d, 3
1317   0E46 D7            push a
1318   0E47 DA            push d
1319   0E48 FD 2E 01 00   mov32 cb, $00000001
1319   0E4C 00 00 
1320   0E4E E7            pop d
1321   0E4F 5A            add d, b
1322   0E50 E4            pop a
1323   0E51 32            mov bl, [d]
1324   0E52 A7 00         mov bh, 0
1325   0E54 38 00 00      mov c, 0
1326   0E57             ; --- START RELATIONAL
1327   0E57 D7            push a
1328   0E58 11            mov a, b
1329   0E59 FD 2E 80 00   mov32 cb, $00000080
1329   0E5D 00 00 
1330   0E5F B0            cmp a, b
1331   0E60 FD 71         seq ; ==
1332   0E62 E4            pop a
1333   0E63             ; --- END RELATIONAL
1334   0E63 FD A7         sand a, b
1335   0E65 E4            pop a
1336   0E66             ; --- END LOGICAL AND
1337   0E66 E7            pop d
1338   0E67 FD 43         mov [d], b
1339   0E69             ; pass = pass && ss[3].s2[3].cc2[2] == 100; 
1340   0E69 FA FF FF      lea d, [bp + -1] ; $pass
1341   0E6C DA            push d
1342   0E6D FA FF FF      lea d, [bp + -1] ; $pass
1343   0E70 2A            mov b, [d]
1344   0E71 38 00 00      mov c, 0
1345   0E74             ; --- START LOGICAL AND
1346   0E74 D7            push a
1347   0E75 11            mov a, b
1348   0E76 FA 1C FC      lea d, [bp + -996] ; $ss
1349   0E79 D7            push a
1350   0E7A DA            push d
1351   0E7B FD 2E 03 00   mov32 cb, $00000003
1351   0E7F 00 00 
1352   0E81 E7            pop d
1353   0E82 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1354   0E86 E4            pop a
1355   0E87 58 21 00      add d, 33
1356   0E8A D7            push a
1357   0E8B DA            push d
1358   0E8C FD 2E 03 00   mov32 cb, $00000003
1358   0E90 00 00 
1359   0E92 E7            pop d
1360   0E93 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
1361   0E97 E4            pop a
1362   0E98 58 03 00      add d, 3
1363   0E9B D7            push a
1364   0E9C DA            push d
1365   0E9D FD 2E 02 00   mov32 cb, $00000002
1365   0EA1 00 00 
1366   0EA3 E7            pop d
1367   0EA4 5A            add d, b
1368   0EA5 E4            pop a
1369   0EA6 32            mov bl, [d]
1370   0EA7 A7 00         mov bh, 0
1371   0EA9 38 00 00      mov c, 0
1372   0EAC             ; --- START RELATIONAL
1373   0EAC D7            push a
1374   0EAD 11            mov a, b
1375   0EAE FD 2E 64 00   mov32 cb, $00000064
1375   0EB2 00 00 
1376   0EB4 B0            cmp a, b
1377   0EB5 FD 71         seq ; ==
1378   0EB7 E4            pop a
1379   0EB8             ; --- END RELATIONAL
1380   0EB8 FD A7         sand a, b
1381   0EBA E4            pop a
1382   0EBB             ; --- END LOGICAL AND
1383   0EBB E7            pop d
1384   0EBC FD 43         mov [d], b
1385   0EBE             ; pass = pass && ss[3].s2[3].ii2[0] == 65535; 
1386   0EBE FA FF FF      lea d, [bp + -1] ; $pass
1387   0EC1 DA            push d
1388   0EC2 FA FF FF      lea d, [bp + -1] ; $pass
1389   0EC5 2A            mov b, [d]
1390   0EC6 38 00 00      mov c, 0
1391   0EC9             ; --- START LOGICAL AND
1392   0EC9 D7            push a
1393   0ECA 11            mov a, b
1394   0ECB FA 1C FC      lea d, [bp + -996] ; $ss
1395   0ECE D7            push a
1396   0ECF DA            push d
1397   0ED0 FD 2E 03 00   mov32 cb, $00000003
1397   0ED4 00 00 
1398   0ED6 E7            pop d
1399   0ED7 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1400   0EDB E4            pop a
1401   0EDC 58 21 00      add d, 33
1402   0EDF D7            push a
1403   0EE0 DA            push d
1404   0EE1 FD 2E 03 00   mov32 cb, $00000003
1404   0EE5 00 00 
1405   0EE7 E7            pop d
1406   0EE8 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
1407   0EEC E4            pop a
1408   0EED 58 0D 00      add d, 13
1409   0EF0 D7            push a
1410   0EF1 DA            push d
1411   0EF2 FD 2E 00 00   mov32 cb, $00000000
1411   0EF6 00 00 
1412   0EF8 E7            pop d
1413   0EF9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1414   0EFD E4            pop a
1415   0EFE 2A            mov b, [d]
1416   0EFF 38 00 00      mov c, 0
1417   0F02             ; --- START RELATIONAL
1418   0F02 D7            push a
1419   0F03 11            mov a, b
1420   0F04 FD 2E FF FF   mov32 cb, $0000ffff
1420   0F08 00 00 
1421   0F0A B0            cmp a, b
1422   0F0B FD 71         seq ; ==
1423   0F0D E4            pop a
1424   0F0E             ; --- END RELATIONAL
1425   0F0E FD A7         sand a, b
1426   0F10 E4            pop a
1427   0F11             ; --- END LOGICAL AND
1428   0F11 E7            pop d
1429   0F12 FD 43         mov [d], b
1430   0F14             ; pass = pass && ss[3].s2[3].ii2[1] == 50000; 
1431   0F14 FA FF FF      lea d, [bp + -1] ; $pass
1432   0F17 DA            push d
1433   0F18 FA FF FF      lea d, [bp + -1] ; $pass
1434   0F1B 2A            mov b, [d]
1435   0F1C 38 00 00      mov c, 0
1436   0F1F             ; --- START LOGICAL AND
1437   0F1F D7            push a
1438   0F20 11            mov a, b
1439   0F21 FA 1C FC      lea d, [bp + -996] ; $ss
1440   0F24 D7            push a
1441   0F25 DA            push d
1442   0F26 FD 2E 03 00   mov32 cb, $00000003
1442   0F2A 00 00 
1443   0F2C E7            pop d
1444   0F2D FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1445   0F31 E4            pop a
1446   0F32 58 21 00      add d, 33
1447   0F35 D7            push a
1448   0F36 DA            push d
1449   0F37 FD 2E 03 00   mov32 cb, $00000003
1449   0F3B 00 00 
1450   0F3D E7            pop d
1451   0F3E FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
1452   0F42 E4            pop a
1453   0F43 58 0D 00      add d, 13
1454   0F46 D7            push a
1455   0F47 DA            push d
1456   0F48 FD 2E 01 00   mov32 cb, $00000001
1456   0F4C 00 00 
1457   0F4E E7            pop d
1458   0F4F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1459   0F53 E4            pop a
1460   0F54 2A            mov b, [d]
1461   0F55 38 00 00      mov c, 0
1462   0F58             ; --- START RELATIONAL
1463   0F58 D7            push a
1464   0F59 11            mov a, b
1465   0F5A FD 2E 50 C3   mov32 cb, $0000c350
1465   0F5E 00 00 
1466   0F60 B0            cmp a, b
1467   0F61 FD 71         seq ; ==
1468   0F63 E4            pop a
1469   0F64             ; --- END RELATIONAL
1470   0F64 FD A7         sand a, b
1471   0F66 E4            pop a
1472   0F67             ; --- END LOGICAL AND
1473   0F67 E7            pop d
1474   0F68 FD 43         mov [d], b
1475   0F6A             ; pass = pass && ss[3].s2[3].ii2[2] == 20000; 
1476   0F6A FA FF FF      lea d, [bp + -1] ; $pass
1477   0F6D DA            push d
1478   0F6E FA FF FF      lea d, [bp + -1] ; $pass
1479   0F71 2A            mov b, [d]
1480   0F72 38 00 00      mov c, 0
1481   0F75             ; --- START LOGICAL AND
1482   0F75 D7            push a
1483   0F76 11            mov a, b
1484   0F77 FA 1C FC      lea d, [bp + -996] ; $ss
1485   0F7A D7            push a
1486   0F7B DA            push d
1487   0F7C FD 2E 03 00   mov32 cb, $00000003
1487   0F80 00 00 
1488   0F82 E7            pop d
1489   0F83 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1490   0F87 E4            pop a
1491   0F88 58 21 00      add d, 33
1492   0F8B D7            push a
1493   0F8C DA            push d
1494   0F8D FD 2E 03 00   mov32 cb, $00000003
1494   0F91 00 00 
1495   0F93 E7            pop d
1496   0F94 FD 13 21 00   mma 33 ; mov a, 33; mul a, b; add d, b
1497   0F98 E4            pop a
1498   0F99 58 0D 00      add d, 13
1499   0F9C D7            push a
1500   0F9D DA            push d
1501   0F9E FD 2E 02 00   mov32 cb, $00000002
1501   0FA2 00 00 
1502   0FA4 E7            pop d
1503   0FA5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1504   0FA9 E4            pop a
1505   0FAA 2A            mov b, [d]
1506   0FAB 38 00 00      mov c, 0
1507   0FAE             ; --- START RELATIONAL
1508   0FAE D7            push a
1509   0FAF 11            mov a, b
1510   0FB0 FD 2E 20 4E   mov32 cb, $00004e20
1510   0FB4 00 00 
1511   0FB6 B0            cmp a, b
1512   0FB7 FD 71         seq ; ==
1513   0FB9 E4            pop a
1514   0FBA             ; --- END RELATIONAL
1515   0FBA FD A7         sand a, b
1516   0FBC E4            pop a
1517   0FBD             ; --- END LOGICAL AND
1518   0FBD E7            pop d
1519   0FBE FD 43         mov [d], b
1520   0FC0             ; pass = pass && ss[3].cc2 == 'b'; 
1521   0FC0 FA FF FF      lea d, [bp + -1] ; $pass
1522   0FC3 DA            push d
1523   0FC4 FA FF FF      lea d, [bp + -1] ; $pass
1524   0FC7 2A            mov b, [d]
1525   0FC8 38 00 00      mov c, 0
1526   0FCB             ; --- START LOGICAL AND
1527   0FCB D7            push a
1528   0FCC 11            mov a, b
1529   0FCD FA 1C FC      lea d, [bp + -996] ; $ss
1530   0FD0 D7            push a
1531   0FD1 DA            push d
1532   0FD2 FD 2E 03 00   mov32 cb, $00000003
1532   0FD6 00 00 
1533   0FD8 E7            pop d
1534   0FD9 FD 13 C7 00   mma 199 ; mov a, 199; mul a, b; add d, b
1535   0FDD E4            pop a
1536   0FDE 58 C6 00      add d, 198
1537   0FE1 32            mov bl, [d]
1538   0FE2 A7 00         mov bh, 0
1539   0FE4 38 00 00      mov c, 0
1540   0FE7             ; --- START RELATIONAL
1541   0FE7 D7            push a
1542   0FE8 11            mov a, b
1543   0FE9 FD 2E 62 00   mov32 cb, $00000062
1543   0FED 00 00 
1544   0FEF B0            cmp a, b
1545   0FF0 FD 71         seq ; ==
1546   0FF2 E4            pop a
1547   0FF3             ; --- END RELATIONAL
1548   0FF3 FD A7         sand a, b
1549   0FF5 E4            pop a
1550   0FF6             ; --- END LOGICAL AND
1551   0FF6 E7            pop d
1552   0FF7 FD 43         mov [d], b
1553   0FF9             ; printf("final test result: %s\n", pass ? "passed" : "failed"); 
1554   0FF9             ; --- START FUNCTION CALL
1555   0FF9             _ternary2_cond:
1556   0FF9 FA FF FF      lea d, [bp + -1] ; $pass
1557   0FFC 2A            mov b, [d]
1558   0FFD 38 00 00      mov c, 0
1559   1000 C0 00 00      cmp b, 0
1560   1003 C6 0C 10      je _ternary2_FALSE
1561   1006             _ternary2_TRUE:
1562   1006 26 84 19      mov b, _s6 ; "passed"
1563   1009 0A 0F 10      jmp _ternary2_exit
1564   100C             _ternary2_FALSE:
1565   100C 26 8B 19      mov b, _s7 ; "failed"
1566   100F             _ternary2_exit:
1567   100F FD AB         swp b
1568   1011 D8            push b
1569   1012 26 92 19      mov b, _s8 ; "final test result: %s\n"
1570   1015 FD AB         swp b
1571   1017 D8            push b
1572   1018 07 20 10      call printf
1573   101B 51 04 00      add sp, 4
1574   101E             ; --- END FUNCTION CALL
1575   101E 05 0B         syscall sys_terminate_proc
1576   1020             
1577   1020             printf:
1578   1020 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1579   1023             ; char *p, *format_p; 
1580   1023 52 02 00      sub sp, 2
1581   1026 52 02 00      sub sp, 2
1582   1029             ; format_p = format; 
1583   1029 FA FD FF      lea d, [bp + -3] ; $format_p
1584   102C DA            push d
1585   102D FA 05 00      lea d, [bp + 5] ; $format
1586   1030 2A            mov b, [d]
1587   1031 38 00 00      mov c, 0
1588   1034 E7            pop d
1589   1035 FD 43         mov [d], b
1590   1037             ; p = &format + 2; 
1591   1037 FA FF FF      lea d, [bp + -1] ; $p
1592   103A DA            push d
1593   103B FA 05 00      lea d, [bp + 5] ; $format
1594   103E 2D            mov b, d
1595   103F             ; --- START TERMS
1596   103F D7            push a
1597   1040 11            mov a, b
1598   1041 FD 2E 02 00   mov32 cb, $00000002
1598   1045 00 00 
1599   1047 56            add b, a
1600   1048 E4            pop a
1601   1049             ; --- END TERMS
1602   1049 E7            pop d
1603   104A FD 43         mov [d], b
1604   104C             ; for(;;){ 
1605   104C             _for3_init:
1606   104C             _for3_cond:
1607   104C             _for3_block:
1608   104C             ; if(!*format_p) break; 
1609   104C             _if4_cond:
1610   104C FA FD FF      lea d, [bp + -3] ; $format_p
1611   104F 2A            mov b, [d]
1612   1050 38 00 00      mov c, 0
1613   1053 74            mov d, b
1614   1054 32            mov bl, [d]
1615   1055 A7 00         mov bh, 0
1616   1057 38 00 00      mov c, 0
1617   105A C0 00 00      cmp b, 0
1618   105D FD 71         seq ; !
1619   105F C0 00 00      cmp b, 0
1620   1062 C6 6B 10      je _if4_else
1621   1065             _if4_TRUE:
1622   1065             ; break; 
1623   1065 0A 0B 13      jmp _for3_exit ; for break
1624   1068 0A F8 12      jmp _if4_exit
1625   106B             _if4_else:
1626   106B             ; if(*format_p == '%'){ 
1627   106B             _if5_cond:
1628   106B FA FD FF      lea d, [bp + -3] ; $format_p
1629   106E 2A            mov b, [d]
1630   106F 38 00 00      mov c, 0
1631   1072 74            mov d, b
1632   1073 32            mov bl, [d]
1633   1074 A7 00         mov bh, 0
1634   1076 38 00 00      mov c, 0
1635   1079             ; --- START RELATIONAL
1636   1079 D7            push a
1637   107A 11            mov a, b
1638   107B FD 2E 25 00   mov32 cb, $00000025
1638   107F 00 00 
1639   1081 B0            cmp a, b
1640   1082 FD 71         seq ; ==
1641   1084 E4            pop a
1642   1085             ; --- END RELATIONAL
1643   1085 C0 00 00      cmp b, 0
1644   1088 C6 E3 12      je _if5_else
1645   108B             _if5_TRUE:
1646   108B             ; format_p++; 
1647   108B FA FD FF      lea d, [bp + -3] ; $format_p
1648   108E 2A            mov b, [d]
1649   108F 38 00 00      mov c, 0
1650   1092 FD 77         inc b
1651   1094 FA FD FF      lea d, [bp + -3] ; $format_p
1652   1097 FD 43         mov [d], b
1653   1099 FD 7D         dec b
1654   109B             ; switch(*format_p){ 
1655   109B             _switch6_expr:
1656   109B FA FD FF      lea d, [bp + -3] ; $format_p
1657   109E 2A            mov b, [d]
1658   109F 38 00 00      mov c, 0
1659   10A2 74            mov d, b
1660   10A3 32            mov bl, [d]
1661   10A4 A7 00         mov bh, 0
1662   10A6 38 00 00      mov c, 0
1663   10A9             _switch6_comparisons:
1664   10A9 C1 6C         cmp bl, $6c
1665   10AB C6 D7 10      je _switch6_case0
1666   10AE C1 4C         cmp bl, $4c
1667   10B0 C6 D7 10      je _switch6_case1
1668   10B3 C1 64         cmp bl, $64
1669   10B5 C6 E7 11      je _switch6_case2
1670   10B8 C1 69         cmp bl, $69
1671   10BA C6 E7 11      je _switch6_case3
1672   10BD C1 75         cmp bl, $75
1673   10BF C6 17 12      je _switch6_case4
1674   10C2 C1 78         cmp bl, $78
1675   10C4 C6 47 12      je _switch6_case5
1676   10C7 C1 63         cmp bl, $63
1677   10C9 C6 77 12      je _switch6_case6
1678   10CC C1 73         cmp bl, $73
1679   10CE C6 A7 12      je _switch6_case7
1680   10D1 0A D4 12      jmp _switch6_default
1681   10D4 0A E0 12      jmp _switch6_exit
1682   10D7             _switch6_case0:
1683   10D7             _switch6_case1:
1684   10D7             ; format_p++; 
1685   10D7 FA FD FF      lea d, [bp + -3] ; $format_p
1686   10DA 2A            mov b, [d]
1687   10DB 38 00 00      mov c, 0
1688   10DE FD 77         inc b
1689   10E0 FA FD FF      lea d, [bp + -3] ; $format_p
1690   10E3 FD 43         mov [d], b
1691   10E5 FD 7D         dec b
1692   10E7             ; if(*format_p == 'd' || *format_p == 'i') 
1693   10E7             _if7_cond:
1694   10E7 FA FD FF      lea d, [bp + -3] ; $format_p
1695   10EA 2A            mov b, [d]
1696   10EB 38 00 00      mov c, 0
1697   10EE 74            mov d, b
1698   10EF 32            mov bl, [d]
1699   10F0 A7 00         mov bh, 0
1700   10F2 38 00 00      mov c, 0
1701   10F5             ; --- START RELATIONAL
1702   10F5 D7            push a
1703   10F6 11            mov a, b
1704   10F7 FD 2E 64 00   mov32 cb, $00000064
1704   10FB 00 00 
1705   10FD B0            cmp a, b
1706   10FE FD 71         seq ; ==
1707   1100 E4            pop a
1708   1101             ; --- END RELATIONAL
1709   1101             ; --- START LOGICAL OR
1710   1101 D7            push a
1711   1102 11            mov a, b
1712   1103 FA FD FF      lea d, [bp + -3] ; $format_p
1713   1106 2A            mov b, [d]
1714   1107 38 00 00      mov c, 0
1715   110A 74            mov d, b
1716   110B 32            mov bl, [d]
1717   110C A7 00         mov bh, 0
1718   110E 38 00 00      mov c, 0
1719   1111             ; --- START RELATIONAL
1720   1111 D7            push a
1721   1112 11            mov a, b
1722   1113 FD 2E 69 00   mov32 cb, $00000069
1722   1117 00 00 
1723   1119 B0            cmp a, b
1724   111A FD 71         seq ; ==
1725   111C E4            pop a
1726   111D             ; --- END RELATIONAL
1727   111D FD A8         sor a, b ; ||
1728   111F E4            pop a
1729   1120             ; --- END LOGICAL OR
1730   1120 C0 00 00      cmp b, 0
1731   1123 C6 44 11      je _if7_else
1732   1126             _if7_TRUE:
1733   1126             ; print_signed_long(*(long *)p); 
1734   1126             ; --- START FUNCTION CALL
1735   1126 FA FF FF      lea d, [bp + -1] ; $p
1736   1129 2A            mov b, [d]
1737   112A 38 00 00      mov c, 0
1738   112D 74            mov d, b
1739   112E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1740   1131 FD 39         mov c, b ; And place it into C
1741   1133 2A            mov b, [d] ; Lower Word in B
1742   1134 12            mov a, c
1743   1135 FD AA         swp a
1744   1137 D7            push a
1745   1138 FD AB         swp b
1746   113A D8            push b
1747   113B 07 0D 13      call print_signed_long
1748   113E 51 04 00      add sp, 4
1749   1141             ; --- END FUNCTION CALL
1750   1141 0A CC 11      jmp _if7_exit
1751   1144             _if7_else:
1752   1144             ; if(*format_p == 'u') 
1753   1144             _if8_cond:
1754   1144 FA FD FF      lea d, [bp + -3] ; $format_p
1755   1147 2A            mov b, [d]
1756   1148 38 00 00      mov c, 0
1757   114B 74            mov d, b
1758   114C 32            mov bl, [d]
1759   114D A7 00         mov bh, 0
1760   114F 38 00 00      mov c, 0
1761   1152             ; --- START RELATIONAL
1762   1152 D7            push a
1763   1153 11            mov a, b
1764   1154 FD 2E 75 00   mov32 cb, $00000075
1764   1158 00 00 
1765   115A B0            cmp a, b
1766   115B FD 71         seq ; ==
1767   115D E4            pop a
1768   115E             ; --- END RELATIONAL
1769   115E C0 00 00      cmp b, 0
1770   1161 C6 82 11      je _if8_else
1771   1164             _if8_TRUE:
1772   1164             ; print_unsigned_long(*(unsigned long *)p); 
1773   1164             ; --- START FUNCTION CALL
1774   1164 FA FF FF      lea d, [bp + -1] ; $p
1775   1167 2A            mov b, [d]
1776   1168 38 00 00      mov c, 0
1777   116B 74            mov d, b
1778   116C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1779   116F FD 39         mov c, b ; And place it into C
1780   1171 2A            mov b, [d] ; Lower Word in B
1781   1172 12            mov a, c
1782   1173 FD AA         swp a
1783   1175 D7            push a
1784   1176 FD AB         swp b
1785   1178 D8            push b
1786   1179 07 AD 14      call print_unsigned_long
1787   117C 51 04 00      add sp, 4
1788   117F             ; --- END FUNCTION CALL
1789   117F 0A CC 11      jmp _if8_exit
1790   1182             _if8_else:
1791   1182             ; if(*format_p == 'x') 
1792   1182             _if9_cond:
1793   1182 FA FD FF      lea d, [bp + -3] ; $format_p
1794   1185 2A            mov b, [d]
1795   1186 38 00 00      mov c, 0
1796   1189 74            mov d, b
1797   118A 32            mov bl, [d]
1798   118B A7 00         mov bh, 0
1799   118D 38 00 00      mov c, 0
1800   1190             ; --- START RELATIONAL
1801   1190 D7            push a
1802   1191 11            mov a, b
1803   1192 FD 2E 78 00   mov32 cb, $00000078
1803   1196 00 00 
1804   1198 B0            cmp a, b
1805   1199 FD 71         seq ; ==
1806   119B E4            pop a
1807   119C             ; --- END RELATIONAL
1808   119C C0 00 00      cmp b, 0
1809   119F C6 C0 11      je _if9_else
1810   11A2             _if9_TRUE:
1811   11A2             ; printx32(*(long int *)p); 
1812   11A2             ; --- START FUNCTION CALL
1813   11A2 FA FF FF      lea d, [bp + -1] ; $p
1814   11A5 2A            mov b, [d]
1815   11A6 38 00 00      mov c, 0
1816   11A9 74            mov d, b
1817   11AA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1818   11AD FD 39         mov c, b ; And place it into C
1819   11AF 2A            mov b, [d] ; Lower Word in B
1820   11B0 12            mov a, c
1821   11B1 FD AA         swp a
1822   11B3 D7            push a
1823   11B4 FD AB         swp b
1824   11B6 D8            push b
1825   11B7 07 EB 15      call printx32
1826   11BA 51 04 00      add sp, 4
1827   11BD             ; --- END FUNCTION CALL
1828   11BD 0A CC 11      jmp _if9_exit
1829   11C0             _if9_else:
1830   11C0             ; err("Unexpected format in printf."); 
1831   11C0             ; --- START FUNCTION CALL
1832   11C0 26 A9 19      mov b, _s9 ; "Unexpected format in printf."
1833   11C3 FD AB         swp b
1834   11C5 D8            push b
1835   11C6 07 4B 16      call err
1836   11C9 51 02 00      add sp, 2
1837   11CC             ; --- END FUNCTION CALL
1838   11CC             _if9_exit:
1839   11CC             _if8_exit:
1840   11CC             _if7_exit:
1841   11CC             ; p = p + 4; 
1842   11CC FA FF FF      lea d, [bp + -1] ; $p
1843   11CF DA            push d
1844   11D0 FA FF FF      lea d, [bp + -1] ; $p
1845   11D3 2A            mov b, [d]
1846   11D4 38 00 00      mov c, 0
1847   11D7             ; --- START TERMS
1848   11D7 D7            push a
1849   11D8 11            mov a, b
1850   11D9 FD 2E 04 00   mov32 cb, $00000004
1850   11DD 00 00 
1851   11DF 56            add b, a
1852   11E0 E4            pop a
1853   11E1             ; --- END TERMS
1854   11E1 E7            pop d
1855   11E2 FD 43         mov [d], b
1856   11E4             ; break; 
1857   11E4 0A E0 12      jmp _switch6_exit ; case break
1858   11E7             _switch6_case2:
1859   11E7             _switch6_case3:
1860   11E7             ; print_signed(*(int*)p); 
1861   11E7             ; --- START FUNCTION CALL
1862   11E7 FA FF FF      lea d, [bp + -1] ; $p
1863   11EA 2A            mov b, [d]
1864   11EB 38 00 00      mov c, 0
1865   11EE 74            mov d, b
1866   11EF 2A            mov b, [d]
1867   11F0 38 00 00      mov c, 0
1868   11F3 FD AB         swp b
1869   11F5 D8            push b
1870   11F6 07 79 16      call print_signed
1871   11F9 51 02 00      add sp, 2
1872   11FC             ; --- END FUNCTION CALL
1873   11FC             ; p = p + 2; 
1874   11FC FA FF FF      lea d, [bp + -1] ; $p
1875   11FF DA            push d
1876   1200 FA FF FF      lea d, [bp + -1] ; $p
1877   1203 2A            mov b, [d]
1878   1204 38 00 00      mov c, 0
1879   1207             ; --- START TERMS
1880   1207 D7            push a
1881   1208 11            mov a, b
1882   1209 FD 2E 02 00   mov32 cb, $00000002
1882   120D 00 00 
1883   120F 56            add b, a
1884   1210 E4            pop a
1885   1211             ; --- END TERMS
1886   1211 E7            pop d
1887   1212 FD 43         mov [d], b
1888   1214             ; break; 
1889   1214 0A E0 12      jmp _switch6_exit ; case break
1890   1217             _switch6_case4:
1891   1217             ; print_unsigned(*(unsigned int*)p); 
1892   1217             ; --- START FUNCTION CALL
1893   1217 FA FF FF      lea d, [bp + -1] ; $p
1894   121A 2A            mov b, [d]
1895   121B 38 00 00      mov c, 0
1896   121E 74            mov d, b
1897   121F 2A            mov b, [d]
1898   1220 38 00 00      mov c, 0
1899   1223 FD AB         swp b
1900   1225 D8            push b
1901   1226 07 CA 17      call print_unsigned
1902   1229 51 02 00      add sp, 2
1903   122C             ; --- END FUNCTION CALL
1904   122C             ; p = p + 2; 
1905   122C FA FF FF      lea d, [bp + -1] ; $p
1906   122F DA            push d
1907   1230 FA FF FF      lea d, [bp + -1] ; $p
1908   1233 2A            mov b, [d]
1909   1234 38 00 00      mov c, 0
1910   1237             ; --- START TERMS
1911   1237 D7            push a
1912   1238 11            mov a, b
1913   1239 FD 2E 02 00   mov32 cb, $00000002
1913   123D 00 00 
1914   123F 56            add b, a
1915   1240 E4            pop a
1916   1241             ; --- END TERMS
1917   1241 E7            pop d
1918   1242 FD 43         mov [d], b
1919   1244             ; break; 
1920   1244 0A E0 12      jmp _switch6_exit ; case break
1921   1247             _switch6_case5:
1922   1247             ; printx16(*(int*)p); 
1923   1247             ; --- START FUNCTION CALL
1924   1247 FA FF FF      lea d, [bp + -1] ; $p
1925   124A 2A            mov b, [d]
1926   124B 38 00 00      mov c, 0
1927   124E 74            mov d, b
1928   124F 2A            mov b, [d]
1929   1250 38 00 00      mov c, 0
1930   1253 FD AB         swp b
1931   1255 D8            push b
1932   1256 07 E2 18      call printx16
1933   1259 51 02 00      add sp, 2
1934   125C             ; --- END FUNCTION CALL
1935   125C             ; p = p + 2; 
1936   125C FA FF FF      lea d, [bp + -1] ; $p
1937   125F DA            push d
1938   1260 FA FF FF      lea d, [bp + -1] ; $p
1939   1263 2A            mov b, [d]
1940   1264 38 00 00      mov c, 0
1941   1267             ; --- START TERMS
1942   1267 D7            push a
1943   1268 11            mov a, b
1944   1269 FD 2E 02 00   mov32 cb, $00000002
1944   126D 00 00 
1945   126F 56            add b, a
1946   1270 E4            pop a
1947   1271             ; --- END TERMS
1948   1271 E7            pop d
1949   1272 FD 43         mov [d], b
1950   1274             ; break; 
1951   1274 0A E0 12      jmp _switch6_exit ; case break
1952   1277             _switch6_case6:
1953   1277             ; putchar(*(char*)p); 
1954   1277             ; --- START FUNCTION CALL
1955   1277 FA FF FF      lea d, [bp + -1] ; $p
1956   127A 2A            mov b, [d]
1957   127B 38 00 00      mov c, 0
1958   127E 74            mov d, b
1959   127F 32            mov bl, [d]
1960   1280 A7 00         mov bh, 0
1961   1282 38 00 00      mov c, 0
1962   1285 DD            push bl
1963   1286 07 9F 14      call putchar
1964   1289 51 01 00      add sp, 1
1965   128C             ; --- END FUNCTION CALL
1966   128C             ; p = p + 2; 
1967   128C FA FF FF      lea d, [bp + -1] ; $p
1968   128F DA            push d
1969   1290 FA FF FF      lea d, [bp + -1] ; $p
1970   1293 2A            mov b, [d]
1971   1294 38 00 00      mov c, 0
1972   1297             ; --- START TERMS
1973   1297 D7            push a
1974   1298 11            mov a, b
1975   1299 FD 2E 02 00   mov32 cb, $00000002
1975   129D 00 00 
1976   129F 56            add b, a
1977   12A0 E4            pop a
1978   12A1             ; --- END TERMS
1979   12A1 E7            pop d
1980   12A2 FD 43         mov [d], b
1981   12A4             ; break; 
1982   12A4 0A E0 12      jmp _switch6_exit ; case break
1983   12A7             _switch6_case7:
1984   12A7             ; print(*(char**)p); 
1985   12A7             ; --- START FUNCTION CALL
1986   12A7 FA FF FF      lea d, [bp + -1] ; $p
1987   12AA 2A            mov b, [d]
1988   12AB 38 00 00      mov c, 0
1989   12AE 74            mov d, b
1990   12AF 2A            mov b, [d]
1991   12B0 FD AB         swp b
1992   12B2 D8            push b
1993   12B3 07 60 16      call print
1994   12B6 51 02 00      add sp, 2
1995   12B9             ; --- END FUNCTION CALL
1996   12B9             ; p = p + 2; 
1997   12B9 FA FF FF      lea d, [bp + -1] ; $p
1998   12BC DA            push d
1999   12BD FA FF FF      lea d, [bp + -1] ; $p
2000   12C0 2A            mov b, [d]
2001   12C1 38 00 00      mov c, 0
2002   12C4             ; --- START TERMS
2003   12C4 D7            push a
2004   12C5 11            mov a, b
2005   12C6 FD 2E 02 00   mov32 cb, $00000002
2005   12CA 00 00 
2006   12CC 56            add b, a
2007   12CD E4            pop a
2008   12CE             ; --- END TERMS
2009   12CE E7            pop d
2010   12CF FD 43         mov [d], b
2011   12D1             ; break; 
2012   12D1 0A E0 12      jmp _switch6_exit ; case break
2013   12D4             _switch6_default:
2014   12D4             ; print("Error: Unknown argument type.\n"); 
2015   12D4             ; --- START FUNCTION CALL
2016   12D4 26 C6 19      mov b, _s10 ; "Error: Unknown argument type.\n"
2017   12D7 FD AB         swp b
2018   12D9 D8            push b
2019   12DA 07 60 16      call print
2020   12DD 51 02 00      add sp, 2
2021   12E0             ; --- END FUNCTION CALL
2022   12E0             _switch6_exit:
2023   12E0 0A F8 12      jmp _if5_exit
2024   12E3             _if5_else:
2025   12E3             ; putchar(*format_p); 
2026   12E3             ; --- START FUNCTION CALL
2027   12E3 FA FD FF      lea d, [bp + -3] ; $format_p
2028   12E6 2A            mov b, [d]
2029   12E7 38 00 00      mov c, 0
2030   12EA 74            mov d, b
2031   12EB 32            mov bl, [d]
2032   12EC A7 00         mov bh, 0
2033   12EE 38 00 00      mov c, 0
2034   12F1 DD            push bl
2035   12F2 07 9F 14      call putchar
2036   12F5 51 01 00      add sp, 1
2037   12F8             ; --- END FUNCTION CALL
2038   12F8             _if5_exit:
2039   12F8             _if4_exit:
2040   12F8             ; format_p++; 
2041   12F8 FA FD FF      lea d, [bp + -3] ; $format_p
2042   12FB 2A            mov b, [d]
2043   12FC 38 00 00      mov c, 0
2044   12FF FD 77         inc b
2045   1301 FA FD FF      lea d, [bp + -3] ; $format_p
2046   1304 FD 43         mov [d], b
2047   1306 FD 7D         dec b
2048   1308             _for3_update:
2049   1308 0A 4C 10      jmp _for3_cond
2050   130B             _for3_exit:
2051   130B F9            leave
2052   130C 09            ret
2053   130D             
2054   130D             print_signed_long:
2055   130D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2056   1310             ; char digits[10]; 
2057   1310 52 0A 00      sub sp, 10
2058   1313             ; int i = 0; 
2059   1313 52 02 00      sub sp, 2
2060   1316             ; --- START LOCAL VAR INITIALIZATION
2061   1316 FA F5 FF      lea d, [bp + -11] ; $i
2062   1319 DA            push d
2063   131A FD 2E 00 00   mov32 cb, $00000000
2063   131E 00 00 
2064   1320 E7            pop d
2065   1321 FD 43         mov [d], b
2066   1323             ; --- END LOCAL VAR INITIALIZATION
2067   1323             ; if (num < 0) { 
2068   1323             _if10_cond:
2069   1323 FA 05 00      lea d, [bp + 5] ; $num
2070   1326 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2071   1329 FD 39         mov c, b ; And place it into C
2072   132B 2A            mov b, [d] ; Lower Word in B
2073   132C             ; --- START RELATIONAL
2074   132C D7            push a
2075   132D FD D8         push g
2076   132F 11            mov a, b
2077   1330 FD 7A         mov g, c
2078   1332 FD 2E 00 00   mov32 cb, $00000000
2078   1336 00 00 
2079   1338 38 00 00      mov c, 0
2080   133B FD AF         cmp32 ga, cb
2081   133D FD 73         slt ; <
2082   133F FD F1         pop g
2083   1341 E4            pop a
2084   1342             ; --- END RELATIONAL
2085   1342 C0 00 00      cmp b, 0
2086   1345 C6 77 13      je _if10_else
2087   1348             _if10_TRUE:
2088   1348             ; putchar('-'); 
2089   1348             ; --- START FUNCTION CALL
2090   1348 FD 2E 2D 00   mov32 cb, $0000002d
2090   134C 00 00 
2091   134E DD            push bl
2092   134F 07 9F 14      call putchar
2093   1352 51 01 00      add sp, 1
2094   1355             ; --- END FUNCTION CALL
2095   1355             ; num = -num; 
2096   1355 FA 05 00      lea d, [bp + 5] ; $num
2097   1358 DA            push d
2098   1359 FA 05 00      lea d, [bp + 5] ; $num
2099   135C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2100   135F FD 39         mov c, b ; And place it into C
2101   1361 2A            mov b, [d] ; Lower Word in B
2102   1362 12            mov a, c
2103   1363 95            not a
2104   1364 97            not b
2105   1365 55 01 00      add b, 1
2106   1368 5B 00 00      adc a, 0
2107   136B 39            mov c, a
2108   136C E7            pop d
2109   136D FD 43         mov [d], b
2110   136F 28            mov b, c
2111   1370 FD 44 02 00   mov [d + 2], b
2112   1374 0A AE 13      jmp _if10_exit
2113   1377             _if10_else:
2114   1377             ; if (num == 0) { 
2115   1377             _if11_cond:
2116   1377 FA 05 00      lea d, [bp + 5] ; $num
2117   137A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2118   137D FD 39         mov c, b ; And place it into C
2119   137F 2A            mov b, [d] ; Lower Word in B
2120   1380             ; --- START RELATIONAL
2121   1380 D7            push a
2122   1381 FD D8         push g
2123   1383 11            mov a, b
2124   1384 FD 7A         mov g, c
2125   1386 FD 2E 00 00   mov32 cb, $00000000
2125   138A 00 00 
2126   138C 38 00 00      mov c, 0
2127   138F FD AF         cmp32 ga, cb
2128   1391 FD 71         seq ; ==
2129   1393 FD F1         pop g
2130   1395 E4            pop a
2131   1396             ; --- END RELATIONAL
2132   1396 C0 00 00      cmp b, 0
2133   1399 C6 AE 13      je _if11_exit
2134   139C             _if11_TRUE:
2135   139C             ; putchar('0'); 
2136   139C             ; --- START FUNCTION CALL
2137   139C FD 2E 30 00   mov32 cb, $00000030
2137   13A0 00 00 
2138   13A2 DD            push bl
2139   13A3 07 9F 14      call putchar
2140   13A6 51 01 00      add sp, 1
2141   13A9             ; --- END FUNCTION CALL
2142   13A9             ; return; 
2143   13A9 F9            leave
2144   13AA 09            ret
2145   13AB 0A AE 13      jmp _if11_exit
2146   13AE             _if11_exit:
2147   13AE             _if10_exit:
2148   13AE             ; while (num > 0) { 
2149   13AE             _while12_cond:
2150   13AE FA 05 00      lea d, [bp + 5] ; $num
2151   13B1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2152   13B4 FD 39         mov c, b ; And place it into C
2153   13B6 2A            mov b, [d] ; Lower Word in B
2154   13B7             ; --- START RELATIONAL
2155   13B7 D7            push a
2156   13B8 FD D8         push g
2157   13BA 11            mov a, b
2158   13BB FD 7A         mov g, c
2159   13BD FD 2E 00 00   mov32 cb, $00000000
2159   13C1 00 00 
2160   13C3 38 00 00      mov c, 0
2161   13C6 FD AF         cmp32 ga, cb
2162   13C8 FD 7F         sgt
2163   13CA FD F1         pop g
2164   13CC E4            pop a
2165   13CD             ; --- END RELATIONAL
2166   13CD C0 00 00      cmp b, 0
2167   13D0 C6 55 14      je _while12_exit
2168   13D3             _while12_block:
2169   13D3             ; digits[i] = '0' + (num % 10); 
2170   13D3 FA F7 FF      lea d, [bp + -9] ; $digits
2171   13D6 D7            push a
2172   13D7 DA            push d
2173   13D8 FA F5 FF      lea d, [bp + -11] ; $i
2174   13DB 2A            mov b, [d]
2175   13DC 38 00 00      mov c, 0
2176   13DF E7            pop d
2177   13E0 5A            add d, b
2178   13E1 E4            pop a
2179   13E2 DA            push d
2180   13E3 FD 2E 30 00   mov32 cb, $00000030
2180   13E7 00 00 
2181   13E9             ; --- START TERMS
2182   13E9 D7            push a
2183   13EA 11            mov a, b
2184   13EB FA 05 00      lea d, [bp + 5] ; $num
2185   13EE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2186   13F1 FD 39         mov c, b ; And place it into C
2187   13F3 2A            mov b, [d] ; Lower Word in B
2188   13F4             ; --- START FACTORS
2189   13F4 D7            push a
2190   13F5 FD D8         push g
2191   13F7 11            mov a, b
2192   13F8 FD 7A         mov g, c
2193   13FA FD 2E 0A 00   mov32 cb, $0000000a
2193   13FE 00 00 
2194   1400 FD D8         push g ; save 'g' as the div instruction uses it
2195   1402 AE            div a, b ; %, a: quotient, b: remainder
2196   1403 11            mov a, b
2197   1404 FD F1         pop g
2198   1406 FD 38         mov c, g
2199   1408 27            mov b, a
2200   1409 FD F1         pop g
2201   140B E4            pop a
2202   140C             ; --- END FACTORS
2203   140C FD 22 00 00   mov g, 0
2204   1410 FD 15         add32 cb, ga
2205   1412 E4            pop a
2206   1413             ; --- END TERMS
2207   1413 E7            pop d
2208   1414 FD 3E         mov [d], bl
2209   1416             ; num = num / 10; 
2210   1416 FA 05 00      lea d, [bp + 5] ; $num
2211   1419 DA            push d
2212   141A FA 05 00      lea d, [bp + 5] ; $num
2213   141D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2214   1420 FD 39         mov c, b ; And place it into C
2215   1422 2A            mov b, [d] ; Lower Word in B
2216   1423             ; --- START FACTORS
2217   1423 D7            push a
2218   1424 FD D8         push g
2219   1426 11            mov a, b
2220   1427 FD 7A         mov g, c
2221   1429 FD 2E 0A 00   mov32 cb, $0000000a
2221   142D 00 00 
2222   142F FD D8         push g ; save 'g' as the div instruction uses it
2223   1431 AE            div a, b ; /, a: quotient, b: remainder
2224   1432 FD F1         pop g
2225   1434 FD 38         mov c, g
2226   1436 27            mov b, a
2227   1437 FD F1         pop g
2228   1439 E4            pop a
2229   143A             ; --- END FACTORS
2230   143A E7            pop d
2231   143B FD 43         mov [d], b
2232   143D 28            mov b, c
2233   143E FD 44 02 00   mov [d + 2], b
2234   1442             ; i++; 
2235   1442 FA F5 FF      lea d, [bp + -11] ; $i
2236   1445 2A            mov b, [d]
2237   1446 38 00 00      mov c, 0
2238   1449 11            mov a, b
2239   144A FD 77         inc b
2240   144C FA F5 FF      lea d, [bp + -11] ; $i
2241   144F FD 43         mov [d], b
2242   1451 27            mov b, a
2243   1452 0A AE 13      jmp _while12_cond
2244   1455             _while12_exit:
2245   1455             ; while (i > 0) { 
2246   1455             _while19_cond:
2247   1455 FA F5 FF      lea d, [bp + -11] ; $i
2248   1458 2A            mov b, [d]
2249   1459 38 00 00      mov c, 0
2250   145C             ; --- START RELATIONAL
2251   145C D7            push a
2252   145D 11            mov a, b
2253   145E FD 2E 00 00   mov32 cb, $00000000
2253   1462 00 00 
2254   1464 B0            cmp a, b
2255   1465 FD 7F         sgt ; >
2256   1467 E4            pop a
2257   1468             ; --- END RELATIONAL
2258   1468 C0 00 00      cmp b, 0
2259   146B C6 9D 14      je _while19_exit
2260   146E             _while19_block:
2261   146E             ; i--; 
2262   146E FA F5 FF      lea d, [bp + -11] ; $i
2263   1471 2A            mov b, [d]
2264   1472 38 00 00      mov c, 0
2265   1475 11            mov a, b
2266   1476 FD 7D         dec b
2267   1478 FA F5 FF      lea d, [bp + -11] ; $i
2268   147B FD 43         mov [d], b
2269   147D 27            mov b, a
2270   147E             ; putchar(digits[i]); 
2271   147E             ; --- START FUNCTION CALL
2272   147E FA F7 FF      lea d, [bp + -9] ; $digits
2273   1481 D7            push a
2274   1482 DA            push d
2275   1483 FA F5 FF      lea d, [bp + -11] ; $i
2276   1486 2A            mov b, [d]
2277   1487 38 00 00      mov c, 0
2278   148A E7            pop d
2279   148B 5A            add d, b
2280   148C E4            pop a
2281   148D 32            mov bl, [d]
2282   148E A7 00         mov bh, 0
2283   1490 38 00 00      mov c, 0
2284   1493 DD            push bl
2285   1494 07 9F 14      call putchar
2286   1497 51 01 00      add sp, 1
2287   149A             ; --- END FUNCTION CALL
2288   149A 0A 55 14      jmp _while19_cond
2289   149D             _while19_exit:
2290   149D F9            leave
2291   149E 09            ret
2292   149F             
2293   149F             putchar:
2294   149F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2295   14A2             ; --- BEGIN INLINE ASM SEGMENT
2296   14A2 FA 05 00      lea d, [bp + 5] ; $c
2297   14A5 1E            mov al, [d]
2298   14A6 23            mov ah, al
2299   14A7 19 00         mov al, 0
2300   14A9 05 03         syscall sys_io      ; char in AH
2301   14AB             ; --- END INLINE ASM SEGMENT
2302   14AB F9            leave
2303   14AC 09            ret
2304   14AD             
2305   14AD             print_unsigned_long:
2306   14AD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2307   14B0             ; char digits[10]; 
2308   14B0 52 0A 00      sub sp, 10
2309   14B3             ; int i; 
2310   14B3 52 02 00      sub sp, 2
2311   14B6             ; i = 0; 
2312   14B6 FA F5 FF      lea d, [bp + -11] ; $i
2313   14B9 DA            push d
2314   14BA FD 2E 00 00   mov32 cb, $00000000
2314   14BE 00 00 
2315   14C0 E7            pop d
2316   14C1 FD 43         mov [d], b
2317   14C3             ; if(num == 0){ 
2318   14C3             _if20_cond:
2319   14C3 FA 05 00      lea d, [bp + 5] ; $num
2320   14C6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2321   14C9 FD 39         mov c, b ; And place it into C
2322   14CB 2A            mov b, [d] ; Lower Word in B
2323   14CC             ; --- START RELATIONAL
2324   14CC D7            push a
2325   14CD FD D8         push g
2326   14CF 11            mov a, b
2327   14D0 FD 7A         mov g, c
2328   14D2 FD 2E 00 00   mov32 cb, $00000000
2328   14D6 00 00 
2329   14D8 38 00 00      mov c, 0
2330   14DB FD AF         cmp32 ga, cb
2331   14DD FD 71         seq ; ==
2332   14DF FD F1         pop g
2333   14E1 E4            pop a
2334   14E2             ; --- END RELATIONAL
2335   14E2 C0 00 00      cmp b, 0
2336   14E5 C6 FA 14      je _if20_exit
2337   14E8             _if20_TRUE:
2338   14E8             ; putchar('0'); 
2339   14E8             ; --- START FUNCTION CALL
2340   14E8 FD 2E 30 00   mov32 cb, $00000030
2340   14EC 00 00 
2341   14EE DD            push bl
2342   14EF 07 9F 14      call putchar
2343   14F2 51 01 00      add sp, 1
2344   14F5             ; --- END FUNCTION CALL
2345   14F5             ; return; 
2346   14F5 F9            leave
2347   14F6 09            ret
2348   14F7 0A FA 14      jmp _if20_exit
2349   14FA             _if20_exit:
2350   14FA             ; while (num > 0) { 
2351   14FA             _while21_cond:
2352   14FA FA 05 00      lea d, [bp + 5] ; $num
2353   14FD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2354   1500 FD 39         mov c, b ; And place it into C
2355   1502 2A            mov b, [d] ; Lower Word in B
2356   1503             ; --- START RELATIONAL
2357   1503 D7            push a
2358   1504 FD D8         push g
2359   1506 11            mov a, b
2360   1507 FD 7A         mov g, c
2361   1509 FD 2E 00 00   mov32 cb, $00000000
2361   150D 00 00 
2362   150F 38 00 00      mov c, 0
2363   1512 FD AF         cmp32 ga, cb
2364   1514 FD 81         sgu
2365   1516 FD F1         pop g
2366   1518 E4            pop a
2367   1519             ; --- END RELATIONAL
2368   1519 C0 00 00      cmp b, 0
2369   151C C6 A1 15      je _while21_exit
2370   151F             _while21_block:
2371   151F             ; digits[i] = '0' + (num % 10); 
2372   151F FA F7 FF      lea d, [bp + -9] ; $digits
2373   1522 D7            push a
2374   1523 DA            push d
2375   1524 FA F5 FF      lea d, [bp + -11] ; $i
2376   1527 2A            mov b, [d]
2377   1528 38 00 00      mov c, 0
2378   152B E7            pop d
2379   152C 5A            add d, b
2380   152D E4            pop a
2381   152E DA            push d
2382   152F FD 2E 30 00   mov32 cb, $00000030
2382   1533 00 00 
2383   1535             ; --- START TERMS
2384   1535 D7            push a
2385   1536 11            mov a, b
2386   1537 FA 05 00      lea d, [bp + 5] ; $num
2387   153A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2388   153D FD 39         mov c, b ; And place it into C
2389   153F 2A            mov b, [d] ; Lower Word in B
2390   1540             ; --- START FACTORS
2391   1540 D7            push a
2392   1541 FD D8         push g
2393   1543 11            mov a, b
2394   1544 FD 7A         mov g, c
2395   1546 FD 2E 0A 00   mov32 cb, $0000000a
2395   154A 00 00 
2396   154C FD D8         push g ; save 'g' as the div instruction uses it
2397   154E AE            div a, b ; %, a: quotient, b: remainder
2398   154F 11            mov a, b
2399   1550 FD F1         pop g
2400   1552 FD 38         mov c, g
2401   1554 27            mov b, a
2402   1555 FD F1         pop g
2403   1557 E4            pop a
2404   1558             ; --- END FACTORS
2405   1558 FD 22 00 00   mov g, 0
2406   155C FD 15         add32 cb, ga
2407   155E E4            pop a
2408   155F             ; --- END TERMS
2409   155F E7            pop d
2410   1560 FD 3E         mov [d], bl
2411   1562             ; num = num / 10; 
2412   1562 FA 05 00      lea d, [bp + 5] ; $num
2413   1565 DA            push d
2414   1566 FA 05 00      lea d, [bp + 5] ; $num
2415   1569 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2416   156C FD 39         mov c, b ; And place it into C
2417   156E 2A            mov b, [d] ; Lower Word in B
2418   156F             ; --- START FACTORS
2419   156F D7            push a
2420   1570 FD D8         push g
2421   1572 11            mov a, b
2422   1573 FD 7A         mov g, c
2423   1575 FD 2E 0A 00   mov32 cb, $0000000a
2423   1579 00 00 
2424   157B FD D8         push g ; save 'g' as the div instruction uses it
2425   157D AE            div a, b ; /, a: quotient, b: remainder
2426   157E FD F1         pop g
2427   1580 FD 38         mov c, g
2428   1582 27            mov b, a
2429   1583 FD F1         pop g
2430   1585 E4            pop a
2431   1586             ; --- END FACTORS
2432   1586 E7            pop d
2433   1587 FD 43         mov [d], b
2434   1589 28            mov b, c
2435   158A FD 44 02 00   mov [d + 2], b
2436   158E             ; i++; 
2437   158E FA F5 FF      lea d, [bp + -11] ; $i
2438   1591 2A            mov b, [d]
2439   1592 38 00 00      mov c, 0
2440   1595 11            mov a, b
2441   1596 FD 77         inc b
2442   1598 FA F5 FF      lea d, [bp + -11] ; $i
2443   159B FD 43         mov [d], b
2444   159D 27            mov b, a
2445   159E 0A FA 14      jmp _while21_cond
2446   15A1             _while21_exit:
2447   15A1             ; while (i > 0) { 
2448   15A1             _while28_cond:
2449   15A1 FA F5 FF      lea d, [bp + -11] ; $i
2450   15A4 2A            mov b, [d]
2451   15A5 38 00 00      mov c, 0
2452   15A8             ; --- START RELATIONAL
2453   15A8 D7            push a
2454   15A9 11            mov a, b
2455   15AA FD 2E 00 00   mov32 cb, $00000000
2455   15AE 00 00 
2456   15B0 B0            cmp a, b
2457   15B1 FD 7F         sgt ; >
2458   15B3 E4            pop a
2459   15B4             ; --- END RELATIONAL
2460   15B4 C0 00 00      cmp b, 0
2461   15B7 C6 E9 15      je _while28_exit
2462   15BA             _while28_block:
2463   15BA             ; i--; 
2464   15BA FA F5 FF      lea d, [bp + -11] ; $i
2465   15BD 2A            mov b, [d]
2466   15BE 38 00 00      mov c, 0
2467   15C1 11            mov a, b
2468   15C2 FD 7D         dec b
2469   15C4 FA F5 FF      lea d, [bp + -11] ; $i
2470   15C7 FD 43         mov [d], b
2471   15C9 27            mov b, a
2472   15CA             ; putchar(digits[i]); 
2473   15CA             ; --- START FUNCTION CALL
2474   15CA FA F7 FF      lea d, [bp + -9] ; $digits
2475   15CD D7            push a
2476   15CE DA            push d
2477   15CF FA F5 FF      lea d, [bp + -11] ; $i
2478   15D2 2A            mov b, [d]
2479   15D3 38 00 00      mov c, 0
2480   15D6 E7            pop d
2481   15D7 5A            add d, b
2482   15D8 E4            pop a
2483   15D9 32            mov bl, [d]
2484   15DA A7 00         mov bh, 0
2485   15DC 38 00 00      mov c, 0
2486   15DF DD            push bl
2487   15E0 07 9F 14      call putchar
2488   15E3 51 01 00      add sp, 1
2489   15E6             ; --- END FUNCTION CALL
2490   15E6 0A A1 15      jmp _while28_cond
2491   15E9             _while28_exit:
2492   15E9 F9            leave
2493   15EA 09            ret
2494   15EB             
2495   15EB             printx32:
2496   15EB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2497   15EE             ; --- BEGIN INLINE ASM SEGMENT
2498   15EE FA 05 00      lea d, [bp + 5] ; $hex
2499   15F1 2B 02 00      mov b, [d+2]
2500   15F4 07 FD 15      call print_u16x_printx32
2501   15F7 2A            mov b, [d]
2502   15F8 07 FD 15      call print_u16x_printx32
2503   15FB             ; --- END INLINE ASM SEGMENT
2504   15FB             ; return; 
2505   15FB F9            leave
2506   15FC 09            ret
2507   15FD             ; --- BEGIN INLINE ASM SEGMENT
2508   15FD             print_u16x_printx32:
2509   15FD D7            push a
2510   15FE D8            push b
2511   15FF DD            push bl
2512   1600 30            mov bl, bh
2513   1601 07 1F 16      call _itoa_printx32        ; convert bh to char in A
2514   1604 2F            mov bl, al        ; save al
2515   1605 19 00         mov al, 0
2516   1607 05 03         syscall sys_io        ; display AH
2517   1609 24            mov ah, bl        ; retrieve al
2518   160A 19 00         mov al, 0
2519   160C 05 03         syscall sys_io        ; display AL
2520   160E EA            pop bl
2521   160F 07 1F 16      call _itoa_printx32        ; convert bh to char in A
2522   1612 2F            mov bl, al        ; save al
2523   1613 19 00         mov al, 0
2524   1615 05 03         syscall sys_io        ; display AH
2525   1617 24            mov ah, bl        ; retrieve al
2526   1618 19 00         mov al, 0
2527   161A 05 03         syscall sys_io        ; display AL
2528   161C E5            pop b
2529   161D E4            pop a
2530   161E 09            ret
2531   161F             _itoa_printx32:
2532   161F DA            push d
2533   1620 D8            push b
2534   1621 A7 00         mov bh, 0
2535   1623 FD A4 04      shr bl, 4  
2536   1626 74            mov d, b
2537   1627 1F 39 16      mov al, [d + s_hex_digits_printx32]
2538   162A 23            mov ah, al
2539   162B E5            pop b
2540   162C D8            push b
2541   162D A7 00         mov bh, 0
2542   162F FD 87 0F      and bl, $0F
2543   1632 74            mov d, b
2544   1633 1F 39 16      mov al, [d + s_hex_digits_printx32]
2545   1636 E5            pop b
2546   1637 E7            pop d
2547   1638 09            ret
2548   1639 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2548   163D 34 35 36 37 
2548   1641 38 39 41 42 
2548   1645 43 44 45 46 
2549   1649             ; --- END INLINE ASM SEGMENT
2550   1649 F9            leave
2551   164A 09            ret
2552   164B             
2553   164B             err:
2554   164B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2555   164E             ; print(e); 
2556   164E             ; --- START FUNCTION CALL
2557   164E FA 05 00      lea d, [bp + 5] ; $e
2558   1651 2A            mov b, [d]
2559   1652 38 00 00      mov c, 0
2560   1655 FD AB         swp b
2561   1657 D8            push b
2562   1658 07 60 16      call print
2563   165B 51 02 00      add sp, 2
2564   165E             ; --- END FUNCTION CALL
2565   165E F9            leave
2566   165F 09            ret
2567   1660             
2568   1660             print:
2569   1660 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2570   1663             ; --- BEGIN INLINE ASM SEGMENT
2571   1663 FA 05 00      lea d, [bp + 5] ; $s
2572   1666 FD 2A         mov d, [d]
2573   1668             _puts_L1_print:
2574   1668 1E            mov al, [d]
2575   1669 B9 00         cmp al, 0
2576   166B C6 77 16      jz _puts_END_print
2577   166E 23            mov ah, al
2578   166F 19 00         mov al, 0
2579   1671 05 03         syscall sys_io
2580   1673 79            inc d
2581   1674 0A 68 16      jmp _puts_L1_print
2582   1677             _puts_END_print:
2583   1677             ; --- END INLINE ASM SEGMENT
2584   1677 F9            leave
2585   1678 09            ret
2586   1679             
2587   1679             print_signed:
2588   1679 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2589   167C             ; char digits[5]; 
2590   167C 52 05 00      sub sp, 5
2591   167F             ; int i = 0; 
2592   167F 52 02 00      sub sp, 2
2593   1682             ; --- START LOCAL VAR INITIALIZATION
2594   1682 FA FA FF      lea d, [bp + -6] ; $i
2595   1685 DA            push d
2596   1686 FD 2E 00 00   mov32 cb, $00000000
2596   168A 00 00 
2597   168C E7            pop d
2598   168D FD 43         mov [d], b
2599   168F             ; --- END LOCAL VAR INITIALIZATION
2600   168F             ; if (num < 0) { 
2601   168F             _if29_cond:
2602   168F FA 05 00      lea d, [bp + 5] ; $num
2603   1692 2A            mov b, [d]
2604   1693 38 00 00      mov c, 0
2605   1696             ; --- START RELATIONAL
2606   1696 D7            push a
2607   1697 11            mov a, b
2608   1698 FD 2E 00 00   mov32 cb, $00000000
2608   169C 00 00 
2609   169E B0            cmp a, b
2610   169F FD 73         slt ; < (signed)
2611   16A1 E4            pop a
2612   16A2             ; --- END RELATIONAL
2613   16A2 C0 00 00      cmp b, 0
2614   16A5 C6 C8 16      je _if29_else
2615   16A8             _if29_TRUE:
2616   16A8             ; putchar('-'); 
2617   16A8             ; --- START FUNCTION CALL
2618   16A8 FD 2E 2D 00   mov32 cb, $0000002d
2618   16AC 00 00 
2619   16AE DD            push bl
2620   16AF 07 9F 14      call putchar
2621   16B2 51 01 00      add sp, 1
2622   16B5             ; --- END FUNCTION CALL
2623   16B5             ; num = -num; 
2624   16B5 FA 05 00      lea d, [bp + 5] ; $num
2625   16B8 DA            push d
2626   16B9 FA 05 00      lea d, [bp + 5] ; $num
2627   16BC 2A            mov b, [d]
2628   16BD 38 00 00      mov c, 0
2629   16C0 FD 97         neg b
2630   16C2 E7            pop d
2631   16C3 FD 43         mov [d], b
2632   16C5 0A F3 16      jmp _if29_exit
2633   16C8             _if29_else:
2634   16C8             ; if (num == 0) { 
2635   16C8             _if30_cond:
2636   16C8 FA 05 00      lea d, [bp + 5] ; $num
2637   16CB 2A            mov b, [d]
2638   16CC 38 00 00      mov c, 0
2639   16CF             ; --- START RELATIONAL
2640   16CF D7            push a
2641   16D0 11            mov a, b
2642   16D1 FD 2E 00 00   mov32 cb, $00000000
2642   16D5 00 00 
2643   16D7 B0            cmp a, b
2644   16D8 FD 71         seq ; ==
2645   16DA E4            pop a
2646   16DB             ; --- END RELATIONAL
2647   16DB C0 00 00      cmp b, 0
2648   16DE C6 F3 16      je _if30_exit
2649   16E1             _if30_TRUE:
2650   16E1             ; putchar('0'); 
2651   16E1             ; --- START FUNCTION CALL
2652   16E1 FD 2E 30 00   mov32 cb, $00000030
2652   16E5 00 00 
2653   16E7 DD            push bl
2654   16E8 07 9F 14      call putchar
2655   16EB 51 01 00      add sp, 1
2656   16EE             ; --- END FUNCTION CALL
2657   16EE             ; return; 
2658   16EE F9            leave
2659   16EF 09            ret
2660   16F0 0A F3 16      jmp _if30_exit
2661   16F3             _if30_exit:
2662   16F3             _if29_exit:
2663   16F3             ; while (num > 0) { 
2664   16F3             _while31_cond:
2665   16F3 FA 05 00      lea d, [bp + 5] ; $num
2666   16F6 2A            mov b, [d]
2667   16F7 38 00 00      mov c, 0
2668   16FA             ; --- START RELATIONAL
2669   16FA D7            push a
2670   16FB 11            mov a, b
2671   16FC FD 2E 00 00   mov32 cb, $00000000
2671   1700 00 00 
2672   1702 B0            cmp a, b
2673   1703 FD 7F         sgt ; >
2674   1705 E4            pop a
2675   1706             ; --- END RELATIONAL
2676   1706 C0 00 00      cmp b, 0
2677   1709 C6 80 17      je _while31_exit
2678   170C             _while31_block:
2679   170C             ; digits[i] = '0' + (num % 10); 
2680   170C FA FC FF      lea d, [bp + -4] ; $digits
2681   170F D7            push a
2682   1710 DA            push d
2683   1711 FA FA FF      lea d, [bp + -6] ; $i
2684   1714 2A            mov b, [d]
2685   1715 38 00 00      mov c, 0
2686   1718 E7            pop d
2687   1719 5A            add d, b
2688   171A E4            pop a
2689   171B DA            push d
2690   171C FD 2E 30 00   mov32 cb, $00000030
2690   1720 00 00 
2691   1722             ; --- START TERMS
2692   1722 D7            push a
2693   1723 11            mov a, b
2694   1724 FA 05 00      lea d, [bp + 5] ; $num
2695   1727 2A            mov b, [d]
2696   1728 38 00 00      mov c, 0
2697   172B             ; --- START FACTORS
2698   172B D7            push a
2699   172C FD D8         push g
2700   172E 11            mov a, b
2701   172F FD 7A         mov g, c
2702   1731 FD 2E 0A 00   mov32 cb, $0000000a
2702   1735 00 00 
2703   1737 FD D8         push g ; save 'g' as the div instruction uses it
2704   1739 AE            div a, b ; %, a: quotient, b: remainder
2705   173A 11            mov a, b
2706   173B FD F1         pop g
2707   173D FD 38         mov c, g
2708   173F 27            mov b, a
2709   1740 FD F1         pop g
2710   1742 E4            pop a
2711   1743             ; --- END FACTORS
2712   1743 56            add b, a
2713   1744 E4            pop a
2714   1745             ; --- END TERMS
2715   1745 E7            pop d
2716   1746 FD 3E         mov [d], bl
2717   1748             ; num = num / 10; 
2718   1748 FA 05 00      lea d, [bp + 5] ; $num
2719   174B DA            push d
2720   174C FA 05 00      lea d, [bp + 5] ; $num
2721   174F 2A            mov b, [d]
2722   1750 38 00 00      mov c, 0
2723   1753             ; --- START FACTORS
2724   1753 D7            push a
2725   1754 FD D8         push g
2726   1756 11            mov a, b
2727   1757 FD 7A         mov g, c
2728   1759 FD 2E 0A 00   mov32 cb, $0000000a
2728   175D 00 00 
2729   175F FD D8         push g ; save 'g' as the div instruction uses it
2730   1761 AE            div a, b ; /, a: quotient, b: remainder
2731   1762 FD F1         pop g
2732   1764 FD 38         mov c, g
2733   1766 27            mov b, a
2734   1767 FD F1         pop g
2735   1769 E4            pop a
2736   176A             ; --- END FACTORS
2737   176A E7            pop d
2738   176B FD 43         mov [d], b
2739   176D             ; i++; 
2740   176D FA FA FF      lea d, [bp + -6] ; $i
2741   1770 2A            mov b, [d]
2742   1771 38 00 00      mov c, 0
2743   1774 11            mov a, b
2744   1775 FD 77         inc b
2745   1777 FA FA FF      lea d, [bp + -6] ; $i
2746   177A FD 43         mov [d], b
2747   177C 27            mov b, a
2748   177D 0A F3 16      jmp _while31_cond
2749   1780             _while31_exit:
2750   1780             ; while (i > 0) { 
2751   1780             _while38_cond:
2752   1780 FA FA FF      lea d, [bp + -6] ; $i
2753   1783 2A            mov b, [d]
2754   1784 38 00 00      mov c, 0
2755   1787             ; --- START RELATIONAL
2756   1787 D7            push a
2757   1788 11            mov a, b
2758   1789 FD 2E 00 00   mov32 cb, $00000000
2758   178D 00 00 
2759   178F B0            cmp a, b
2760   1790 FD 7F         sgt ; >
2761   1792 E4            pop a
2762   1793             ; --- END RELATIONAL
2763   1793 C0 00 00      cmp b, 0
2764   1796 C6 C8 17      je _while38_exit
2765   1799             _while38_block:
2766   1799             ; i--; 
2767   1799 FA FA FF      lea d, [bp + -6] ; $i
2768   179C 2A            mov b, [d]
2769   179D 38 00 00      mov c, 0
2770   17A0 11            mov a, b
2771   17A1 FD 7D         dec b
2772   17A3 FA FA FF      lea d, [bp + -6] ; $i
2773   17A6 FD 43         mov [d], b
2774   17A8 27            mov b, a
2775   17A9             ; putchar(digits[i]); 
2776   17A9             ; --- START FUNCTION CALL
2777   17A9 FA FC FF      lea d, [bp + -4] ; $digits
2778   17AC D7            push a
2779   17AD DA            push d
2780   17AE FA FA FF      lea d, [bp + -6] ; $i
2781   17B1 2A            mov b, [d]
2782   17B2 38 00 00      mov c, 0
2783   17B5 E7            pop d
2784   17B6 5A            add d, b
2785   17B7 E4            pop a
2786   17B8 32            mov bl, [d]
2787   17B9 A7 00         mov bh, 0
2788   17BB 38 00 00      mov c, 0
2789   17BE DD            push bl
2790   17BF 07 9F 14      call putchar
2791   17C2 51 01 00      add sp, 1
2792   17C5             ; --- END FUNCTION CALL
2793   17C5 0A 80 17      jmp _while38_cond
2794   17C8             _while38_exit:
2795   17C8 F9            leave
2796   17C9 09            ret
2797   17CA             
2798   17CA             print_unsigned:
2799   17CA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2800   17CD             ; char digits[5]; 
2801   17CD 52 05 00      sub sp, 5
2802   17D0             ; int i; 
2803   17D0 52 02 00      sub sp, 2
2804   17D3             ; i = 0; 
2805   17D3 FA FA FF      lea d, [bp + -6] ; $i
2806   17D6 DA            push d
2807   17D7 FD 2E 00 00   mov32 cb, $00000000
2807   17DB 00 00 
2808   17DD E7            pop d
2809   17DE FD 43         mov [d], b
2810   17E0             ; if(num == 0){ 
2811   17E0             _if39_cond:
2812   17E0 FA 05 00      lea d, [bp + 5] ; $num
2813   17E3 2A            mov b, [d]
2814   17E4 38 00 00      mov c, 0
2815   17E7             ; --- START RELATIONAL
2816   17E7 D7            push a
2817   17E8 11            mov a, b
2818   17E9 FD 2E 00 00   mov32 cb, $00000000
2818   17ED 00 00 
2819   17EF B0            cmp a, b
2820   17F0 FD 71         seq ; ==
2821   17F2 E4            pop a
2822   17F3             ; --- END RELATIONAL
2823   17F3 C0 00 00      cmp b, 0
2824   17F6 C6 0B 18      je _if39_exit
2825   17F9             _if39_TRUE:
2826   17F9             ; putchar('0'); 
2827   17F9             ; --- START FUNCTION CALL
2828   17F9 FD 2E 30 00   mov32 cb, $00000030
2828   17FD 00 00 
2829   17FF DD            push bl
2830   1800 07 9F 14      call putchar
2831   1803 51 01 00      add sp, 1
2832   1806             ; --- END FUNCTION CALL
2833   1806             ; return; 
2834   1806 F9            leave
2835   1807 09            ret
2836   1808 0A 0B 18      jmp _if39_exit
2837   180B             _if39_exit:
2838   180B             ; while (num > 0) { 
2839   180B             _while40_cond:
2840   180B FA 05 00      lea d, [bp + 5] ; $num
2841   180E 2A            mov b, [d]
2842   180F 38 00 00      mov c, 0
2843   1812             ; --- START RELATIONAL
2844   1812 D7            push a
2845   1813 11            mov a, b
2846   1814 FD 2E 00 00   mov32 cb, $00000000
2846   1818 00 00 
2847   181A B0            cmp a, b
2848   181B FD 81         sgu ; > (unsigned)
2849   181D E4            pop a
2850   181E             ; --- END RELATIONAL
2851   181E C0 00 00      cmp b, 0
2852   1821 C6 98 18      je _while40_exit
2853   1824             _while40_block:
2854   1824             ; digits[i] = '0' + (num % 10); 
2855   1824 FA FC FF      lea d, [bp + -4] ; $digits
2856   1827 D7            push a
2857   1828 DA            push d
2858   1829 FA FA FF      lea d, [bp + -6] ; $i
2859   182C 2A            mov b, [d]
2860   182D 38 00 00      mov c, 0
2861   1830 E7            pop d
2862   1831 5A            add d, b
2863   1832 E4            pop a
2864   1833 DA            push d
2865   1834 FD 2E 30 00   mov32 cb, $00000030
2865   1838 00 00 
2866   183A             ; --- START TERMS
2867   183A D7            push a
2868   183B 11            mov a, b
2869   183C FA 05 00      lea d, [bp + 5] ; $num
2870   183F 2A            mov b, [d]
2871   1840 38 00 00      mov c, 0
2872   1843             ; --- START FACTORS
2873   1843 D7            push a
2874   1844 FD D8         push g
2875   1846 11            mov a, b
2876   1847 FD 7A         mov g, c
2877   1849 FD 2E 0A 00   mov32 cb, $0000000a
2877   184D 00 00 
2878   184F FD D8         push g ; save 'g' as the div instruction uses it
2879   1851 AE            div a, b ; %, a: quotient, b: remainder
2880   1852 11            mov a, b
2881   1853 FD F1         pop g
2882   1855 FD 38         mov c, g
2883   1857 27            mov b, a
2884   1858 FD F1         pop g
2885   185A E4            pop a
2886   185B             ; --- END FACTORS
2887   185B 56            add b, a
2888   185C E4            pop a
2889   185D             ; --- END TERMS
2890   185D E7            pop d
2891   185E FD 3E         mov [d], bl
2892   1860             ; num = num / 10; 
2893   1860 FA 05 00      lea d, [bp + 5] ; $num
2894   1863 DA            push d
2895   1864 FA 05 00      lea d, [bp + 5] ; $num
2896   1867 2A            mov b, [d]
2897   1868 38 00 00      mov c, 0
2898   186B             ; --- START FACTORS
2899   186B D7            push a
2900   186C FD D8         push g
2901   186E 11            mov a, b
2902   186F FD 7A         mov g, c
2903   1871 FD 2E 0A 00   mov32 cb, $0000000a
2903   1875 00 00 
2904   1877 FD D8         push g ; save 'g' as the div instruction uses it
2905   1879 AE            div a, b ; /, a: quotient, b: remainder
2906   187A FD F1         pop g
2907   187C FD 38         mov c, g
2908   187E 27            mov b, a
2909   187F FD F1         pop g
2910   1881 E4            pop a
2911   1882             ; --- END FACTORS
2912   1882 E7            pop d
2913   1883 FD 43         mov [d], b
2914   1885             ; i++; 
2915   1885 FA FA FF      lea d, [bp + -6] ; $i
2916   1888 2A            mov b, [d]
2917   1889 38 00 00      mov c, 0
2918   188C 11            mov a, b
2919   188D FD 77         inc b
2920   188F FA FA FF      lea d, [bp + -6] ; $i
2921   1892 FD 43         mov [d], b
2922   1894 27            mov b, a
2923   1895 0A 0B 18      jmp _while40_cond
2924   1898             _while40_exit:
2925   1898             ; while (i > 0) { 
2926   1898             _while47_cond:
2927   1898 FA FA FF      lea d, [bp + -6] ; $i
2928   189B 2A            mov b, [d]
2929   189C 38 00 00      mov c, 0
2930   189F             ; --- START RELATIONAL
2931   189F D7            push a
2932   18A0 11            mov a, b
2933   18A1 FD 2E 00 00   mov32 cb, $00000000
2933   18A5 00 00 
2934   18A7 B0            cmp a, b
2935   18A8 FD 7F         sgt ; >
2936   18AA E4            pop a
2937   18AB             ; --- END RELATIONAL
2938   18AB C0 00 00      cmp b, 0
2939   18AE C6 E0 18      je _while47_exit
2940   18B1             _while47_block:
2941   18B1             ; i--; 
2942   18B1 FA FA FF      lea d, [bp + -6] ; $i
2943   18B4 2A            mov b, [d]
2944   18B5 38 00 00      mov c, 0
2945   18B8 11            mov a, b
2946   18B9 FD 7D         dec b
2947   18BB FA FA FF      lea d, [bp + -6] ; $i
2948   18BE FD 43         mov [d], b
2949   18C0 27            mov b, a
2950   18C1             ; putchar(digits[i]); 
2951   18C1             ; --- START FUNCTION CALL
2952   18C1 FA FC FF      lea d, [bp + -4] ; $digits
2953   18C4 D7            push a
2954   18C5 DA            push d
2955   18C6 FA FA FF      lea d, [bp + -6] ; $i
2956   18C9 2A            mov b, [d]
2957   18CA 38 00 00      mov c, 0
2958   18CD E7            pop d
2959   18CE 5A            add d, b
2960   18CF E4            pop a
2961   18D0 32            mov bl, [d]
2962   18D1 A7 00         mov bh, 0
2963   18D3 38 00 00      mov c, 0
2964   18D6 DD            push bl
2965   18D7 07 9F 14      call putchar
2966   18DA 51 01 00      add sp, 1
2967   18DD             ; --- END FUNCTION CALL
2968   18DD 0A 98 18      jmp _while47_cond
2969   18E0             _while47_exit:
2970   18E0 F9            leave
2971   18E1 09            ret
2972   18E2             
2973   18E2             printx16:
2974   18E2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2975   18E5             ; --- BEGIN INLINE ASM SEGMENT
2976   18E5 FA 05 00      lea d, [bp + 5] ; $hex
2977   18E8 2A            mov b, [d]
2978   18E9             print_u16x_printx16:
2979   18E9 DD            push bl
2980   18EA 30            mov bl, bh
2981   18EB 07 08 19      call _itoa_printx16        ; convert bh to char in A
2982   18EE 2F            mov bl, al        ; save al
2983   18EF 19 00         mov al, 0
2984   18F1 05 03         syscall sys_io        ; display AH
2985   18F3 24            mov ah, bl        ; retrieve al
2986   18F4 19 00         mov al, 0
2987   18F6 05 03         syscall sys_io        ; display AL
2988   18F8 EA            pop bl
2989   18F9 07 08 19      call _itoa_printx16        ; convert bh to char in A
2990   18FC 2F            mov bl, al        ; save al
2991   18FD 19 00         mov al, 0
2992   18FF 05 03         syscall sys_io        ; display AH
2993   1901 24            mov ah, bl        ; retrieve al
2994   1902 19 00         mov al, 0
2995   1904 05 03         syscall sys_io        ; display AL
2996   1906             ; --- END INLINE ASM SEGMENT
2997   1906             ; return; 
2998   1906 F9            leave
2999   1907 09            ret
3000   1908             ; --- BEGIN INLINE ASM SEGMENT
3001   1908             _itoa_printx16:
3002   1908 DA            push d
3003   1909 D8            push b
3004   190A A7 00         mov bh, 0
3005   190C FD A4 04      shr bl, 4  
3006   190F 74            mov d, b
3007   1910 1F 22 19      mov al, [d + s_hex_digits_printx16]
3008   1913 23            mov ah, al
3009   1914 E5            pop b
3010   1915 D8            push b
3011   1916 A7 00         mov bh, 0
3012   1918 FD 87 0F      and bl, $0F
3013   191B 74            mov d, b
3014   191C 1F 22 19      mov al, [d + s_hex_digits_printx16]
3015   191F E5            pop b
3016   1920 E7            pop d
3017   1921 09            ret
3018   1922 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
3018   1926 34 35 36 37 
3018   192A 38 39 41 42 
3018   192E 43 44 45 46 
3019   1932             ; --- END INLINE ASM SEGMENT
3020   1932 F9            leave
3021   1933 09            ret
3022   1934             ; --- END TEXT SEGMENT
3023   1934             
3024   1934             ; --- BEGIN DATA SEGMENT
3025   1934 0A 61 73 73 _s0: .db "\nassigning values...\n", 0
3025   1938 69 67 6E 69 
3025   193C 6E 67 20 76 
3025   1940 61 6C 75 65 
3025   1944 73 2E 2E 2E 
3025   1948 0A 00 
3026   194A 70 72 69 6E _s1: .db "printing assignments...\n", 0
3026   194E 74 69 6E 67 
3026   1952 20 61 73 73 
3026   1956 69 67 6E 6D 
3026   195A 65 6E 74 73 
3026   195E 2E 2E 2E 0A 
3026   1962 00 
3027   1963 25 63 0A 00 _s2: .db "%c\n", 0
3028   1967 25 64 0A 00 _s3: .db "%d\n", 0
3029   196B 25 75 0A 00 _s4: .db "%u\n", 0
3030   196F 63 68 65 63 _s5: .db "checking results...\n", 0
3030   1973 6B 69 6E 67 
3030   1977 20 72 65 73 
3030   197B 75 6C 74 73 
3030   197F 2E 2E 2E 0A 
3030   1983 00 
3031   1984 70 61 73 73 _s6: .db "passed", 0
3031   1988 65 64 00 
3032   198B 66 61 69 6C _s7: .db "failed", 0
3032   198F 65 64 00 
3033   1992 66 69 6E 61 _s8: .db "final test result: %s\n", 0
3033   1996 6C 20 74 65 
3033   199A 73 74 20 72 
3033   199E 65 73 75 6C 
3033   19A2 74 3A 20 25 
3033   19A6 73 0A 00 
3034   19A9 55 6E 65 78 _s9: .db "Unexpected format in printf.", 0
3034   19AD 70 65 63 74 
3034   19B1 65 64 20 66 
3034   19B5 6F 72 6D 61 
3034   19B9 74 20 69 6E 
3034   19BD 20 70 72 69 
3034   19C1 6E 74 66 2E 
3034   19C5 00 
3035   19C6 45 72 72 6F _s10: .db "Error: Unknown argument type.\n", 0
3035   19CA 72 3A 20 55 
3035   19CE 6E 6B 6E 6F 
3035   19D2 77 6E 20 61 
3035   19D6 72 67 75 6D 
3035   19DA 65 6E 74 20 
3035   19DE 74 79 70 65 
3035   19E2 2E 0A 00 
3036   19E5             
3037   19E5 E7 19       _heap_top: .dw _heap
3038   19E7 00          _heap: .db 0
3039   19E8             ; --- END DATA SEGMENT
3040   19E8             
3041   19E8             .end
tasm: Number of errors = 0
