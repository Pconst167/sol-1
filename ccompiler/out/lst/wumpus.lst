0001   0000             ; --- FILENAME: programs/wumpus.c
0002   0000             ; --- DATE:     27-06-2025 at 11:24:23
0003   0000             .include "lib/asm/kernel.exp"
0001+  0000             fdc_irq_event    .EQU  $195a
0002+  0000             sys_break        .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_create_proc  .EQU  $0005
0008+  0000             sys_list_proc    .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_fdc          .EQU  $000d
0016+  0000             text_org         .EQU  $0400
0004   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0005   0000             
0006   0000             ; --- BEGIN TEXT SEGMENT
0007   0400             .org text_org
0008   0400             main:
0009   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0010   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0011   0408             ; int c; 
0012   0408 52 02 00      sub sp, 2
0013   040B             ; c = getlet("INSTRUCTIONS (Y-N): "); 
0014   040B FA FF FF      lea d, [bp + -1] ; $c
0015   040E DA            push d
0016   040F             ; --- START FUNCTION CALL
0017   040F 26 76 18      mov b, _s0 ; "INSTRUCTIONS (Y-N): "
0018   0412 FD AB         swp b
0019   0414 D8            push b
0020   0415 07 93 04      call getlet
0021   0418 51 02 00      add sp, 2
0022   041B             ; --- END FUNCTION CALL
0023   041B E7            pop d
0024   041C FD 43         mov [d], b
0025   041E             ; if (c == 'Y') { 
0026   041E             _if1_cond:
0027   041E FA FF FF      lea d, [bp + -1] ; $c
0028   0421 2A            mov b, [d]
0029   0422 38 00 00      mov c, 0
0030   0425             ; --- START RELATIONAL
0031   0425 D7            push a
0032   0426 11            mov a, b
0033   0427 FD 2E 59 00   mov32 cb, $00000059
0033   042B 00 00 
0034   042D B0            cmp a, b
0035   042E FD 71         seq ; ==
0036   0430 E4            pop a
0037   0431             ; --- END RELATIONAL
0038   0431 C0 00 00      cmp b, 0
0039   0434 C6 3D 04      je _if1_exit
0040   0437             _if1_TRUE:
0041   0437             ; print_instructions(); 
0042   0437             ; --- START FUNCTION CALL
0043   0437 07 F0 04      call print_instructions
0044   043A 0A 3D 04      jmp _if1_exit
0045   043D             _if1_exit:
0046   043D             ; do {  
0047   043D             _do2_block:
0048   043D             ; game_setup(); 
0049   043D             ; --- START FUNCTION CALL
0050   043D 07 9F 11      call game_setup
0051   0440             ; game_play(); 
0052   0440             ; --- START FUNCTION CALL
0053   0440 07 08 13      call game_play
0054   0443             ; } while (getlet("NEW GAME (Y-N): ") != 'N'); 
0055   0443             _do2_cond:
0056   0443             ; --- START FUNCTION CALL
0057   0443 26 8B 18      mov b, _s1 ; "NEW GAME (Y-N): "
0058   0446 FD AB         swp b
0059   0448 D8            push b
0060   0449 07 93 04      call getlet
0061   044C 51 02 00      add sp, 2
0062   044F             ; --- END FUNCTION CALL
0063   044F             ; --- START RELATIONAL
0064   044F D7            push a
0065   0450 11            mov a, b
0066   0451 FD 2E 4E 00   mov32 cb, $0000004e
0066   0455 00 00 
0067   0457 B0            cmp a, b
0068   0458 FD 72         sneq ; !=
0069   045A E4            pop a
0070   045B             ; --- END RELATIONAL
0071   045B C0 01 00      cmp b, 1
0072   045E C6 3D 04      je _do2_block
0073   0461             _do2_exit:
0074   0461             ; return 0; 
0075   0461 FD 2E 00 00   mov32 cb, $00000000
0075   0465 00 00 
0076   0467 F9            leave
0077   0468 05 0B         syscall sys_terminate_proc
0078   046A             
0079   046A             getnum:
0080   046A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0081   046D             ; int n; 
0082   046D 52 02 00      sub sp, 2
0083   0470             ; print(prompt); 
0084   0470             ; --- START FUNCTION CALL
0085   0470 FA 05 00      lea d, [bp + 5] ; $prompt
0086   0473 2A            mov b, [d]
0087   0474 38 00 00      mov c, 0
0088   0477 FD AB         swp b
0089   0479 D8            push b
0090   047A 07 09 15      call print
0091   047D 51 02 00      add sp, 2
0092   0480             ; --- END FUNCTION CALL
0093   0480             ; n = scann(); 
0094   0480 FA FF FF      lea d, [bp + -1] ; $n
0095   0483 DA            push d
0096   0484             ; --- START FUNCTION CALL
0097   0484 07 C8 16      call scann
0098   0487 E7            pop d
0099   0488 FD 43         mov [d], b
0100   048A             ; return n; 
0101   048A FA FF FF      lea d, [bp + -1] ; $n
0102   048D 2A            mov b, [d]
0103   048E 38 00 00      mov c, 0
0104   0491 F9            leave
0105   0492 09            ret
0106   0493             
0107   0493             getlet:
0108   0493 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0109   0496             ; char c = '\n'; 
0110   0496 52 01 00      sub sp, 1
0111   0499             ; --- START LOCAL VAR INITIALIZATION
0112   0499 FA 00 00      lea d, [bp + 0] ; $c
0113   049C DA            push d
0114   049D FD 2E 0A 00   mov32 cb, $0000000a
0114   04A1 00 00 
0115   04A3 E7            pop d
0116   04A4 FD 3E         mov [d], bl
0117   04A6             ; --- END LOCAL VAR INITIALIZATION
0118   04A6             ; print(prompt); 
0119   04A6             ; --- START FUNCTION CALL
0120   04A6 FA 05 00      lea d, [bp + 5] ; $prompt
0121   04A9 2A            mov b, [d]
0122   04AA 38 00 00      mov c, 0
0123   04AD FD AB         swp b
0124   04AF D8            push b
0125   04B0 07 09 15      call print
0126   04B3 51 02 00      add sp, 2
0127   04B6             ; --- END FUNCTION CALL
0128   04B6             ; while (c == '\n') { 
0129   04B6             _while3_cond:
0130   04B6 FA 00 00      lea d, [bp + 0] ; $c
0131   04B9 32            mov bl, [d]
0132   04BA A7 00         mov bh, 0
0133   04BC 38 00 00      mov c, 0
0134   04BF             ; --- START RELATIONAL
0135   04BF D7            push a
0136   04C0 11            mov a, b
0137   04C1 FD 2E 0A 00   mov32 cb, $0000000a
0137   04C5 00 00 
0138   04C7 B0            cmp a, b
0139   04C8 FD 71         seq ; ==
0140   04CA E4            pop a
0141   04CB             ; --- END RELATIONAL
0142   04CB C0 00 00      cmp b, 0
0143   04CE C6 DE 04      je _while3_exit
0144   04D1             _while3_block:
0145   04D1             ; c = getchar(); 
0146   04D1 FA 00 00      lea d, [bp + 0] ; $c
0147   04D4 DA            push d
0148   04D5             ; --- START FUNCTION CALL
0149   04D5 07 22 15      call getchar
0150   04D8 E7            pop d
0151   04D9 FD 3E         mov [d], bl
0152   04DB 0A B6 04      jmp _while3_cond
0153   04DE             _while3_exit:
0154   04DE             ; return toupper(c); 
0155   04DE             ; --- START FUNCTION CALL
0156   04DE FA 00 00      lea d, [bp + 0] ; $c
0157   04E1 32            mov bl, [d]
0158   04E2 A7 00         mov bh, 0
0159   04E4 38 00 00      mov c, 0
0160   04E7 DD            push bl
0161   04E8 07 3C 15      call toupper
0162   04EB 51 01 00      add sp, 1
0163   04EE             ; --- END FUNCTION CALL
0164   04EE F9            leave
0165   04EF 09            ret
0166   04F0             
0167   04F0             print_instructions:
0168   04F0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0169   04F3             ; print("WELCOME TO 'HUNT THE WUMPUS'\n"); 
0170   04F3             ; --- START FUNCTION CALL
0171   04F3 26 9C 18      mov b, _s2 ; "WELCOME TO 'HUNT THE WUMPUS'\n"
0172   04F6 FD AB         swp b
0173   04F8 D8            push b
0174   04F9 07 09 15      call print
0175   04FC 51 02 00      add sp, 2
0176   04FF             ; --- END FUNCTION CALL
0177   04FF             ; print("THE WUMPUS LIVES IN A CAVE OF 20 ROOMS. EACH ROOM\n"); 
0178   04FF             ; --- START FUNCTION CALL
0179   04FF 26 BA 18      mov b, _s3 ; "THE WUMPUS LIVES IN A CAVE OF 20 ROOMS. EACH ROOM\n"
0180   0502 FD AB         swp b
0181   0504 D8            push b
0182   0505 07 09 15      call print
0183   0508 51 02 00      add sp, 2
0184   050B             ; --- END FUNCTION CALL
0185   050B             ; print("HAS 3 TUNNELS LEADING TO OTHER ROOMS.\n");  
0186   050B             ; --- START FUNCTION CALL
0187   050B 26 ED 18      mov b, _s4 ; "HAS 3 TUNNELS LEADING TO OTHER ROOMS.\n"
0188   050E FD AB         swp b
0189   0510 D8            push b
0190   0511 07 09 15      call print
0191   0514 51 02 00      add sp, 2
0192   0517             ; --- END FUNCTION CALL
0193   0517             ; print("LOOK AT A DODECAHEDRON TO SEE HOW THIS WORKS.\n"); 
0194   0517             ; --- START FUNCTION CALL
0195   0517 26 14 19      mov b, _s5 ; "LOOK AT A DODECAHEDRON TO SEE HOW THIS WORKS.\n"
0196   051A FD AB         swp b
0197   051C D8            push b
0198   051D 07 09 15      call print
0199   0520 51 02 00      add sp, 2
0200   0523             ; --- END FUNCTION CALL
0201   0523             ; print("\n"); 
0202   0523             ; --- START FUNCTION CALL
0203   0523 26 43 19      mov b, _s6 ; "\n"
0204   0526 FD AB         swp b
0205   0528 D8            push b
0206   0529 07 09 15      call print
0207   052C 51 02 00      add sp, 2
0208   052F             ; --- END FUNCTION CALL
0209   052F             ; print(" HAZARDS:\n"); 
0210   052F             ; --- START FUNCTION CALL
0211   052F 26 45 19      mov b, _s7 ; " HAZARDS:\n"
0212   0532 FD AB         swp b
0213   0534 D8            push b
0214   0535 07 09 15      call print
0215   0538 51 02 00      add sp, 2
0216   053B             ; --- END FUNCTION CALL
0217   053B             ; print(" BOTTOMLESS PITS: TWO ROOMS HAVE BOTTOMLESS PITS IN THEM\n"); 
0218   053B             ; --- START FUNCTION CALL
0219   053B 26 50 19      mov b, _s8 ; " BOTTOMLESS PITS: TWO ROOMS HAVE BOTTOMLESS PITS IN THEM\n"
0220   053E FD AB         swp b
0221   0540 D8            push b
0222   0541 07 09 15      call print
0223   0544 51 02 00      add sp, 2
0224   0547             ; --- END FUNCTION CALL
0225   0547             ; print(" IF YOU GO THERE, YOU FALL INTO THE PIT (& LOSE!)\n"); 
0226   0547             ; --- START FUNCTION CALL
0227   0547 26 8A 19      mov b, _s9 ; " IF YOU GO THERE, YOU FALL INTO THE PIT (& LOSE!)\n"
0228   054A FD AB         swp b
0229   054C D8            push b
0230   054D 07 09 15      call print
0231   0550 51 02 00      add sp, 2
0232   0553             ; --- END FUNCTION CALL
0233   0553             ; print(" SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n"); 
0234   0553             ; --- START FUNCTION CALL
0235   0553 26 BD 19      mov b, _s10 ; " SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n"
0236   0556 FD AB         swp b
0237   0558 D8            push b
0238   0559 07 09 15      call print
0239   055C 51 02 00      add sp, 2
0240   055F             ; --- END FUNCTION CALL
0241   055F             ; print(" GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"); 
0242   055F             ; --- START FUNCTION CALL
0243   055F 26 F8 19      mov b, _s11 ; " GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"
0244   0562 FD AB         swp b
0245   0564 D8            push b
0246   0565 07 09 15      call print
0247   0568 51 02 00      add sp, 2
0248   056B             ; --- END FUNCTION CALL
0249   056B             ; print(" ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n"); 
0250   056B             ; --- START FUNCTION CALL
0251   056B 26 30 1A      mov b, _s12 ; " ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n"
0252   056E FD AB         swp b
0253   0570 D8            push b
0254   0571 07 09 15      call print
0255   0574 51 02 00      add sp, 2
0256   0577             ; --- END FUNCTION CALL
0257   0577             ; print(" WUMPUS:\n"); 
0258   0577             ; --- START FUNCTION CALL
0259   0577 26 5E 1A      mov b, _s13 ; " WUMPUS:\n"
0260   057A FD AB         swp b
0261   057C D8            push b
0262   057D 07 09 15      call print
0263   0580 51 02 00      add sp, 2
0264   0583             ; --- END FUNCTION CALL
0265   0583             ; print(" THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n"); 
0266   0583             ; --- START FUNCTION CALL
0267   0583 26 68 1A      mov b, _s14 ; " THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n"
0268   0586 FD AB         swp b
0269   0588 D8            push b
0270   0589 07 09 15      call print
0271   058C 51 02 00      add sp, 2
0272   058F             ; --- END FUNCTION CALL
0273   058F             ; print(" FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"); 
0274   058F             ; --- START FUNCTION CALL
0275   058F 26 9F 1A      mov b, _s15 ; " FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"
0276   0592 FD AB         swp b
0277   0594 D8            push b
0278   0595 07 09 15      call print
0279   0598 51 02 00      add sp, 2
0280   059B             ; --- END FUNCTION CALL
0281   059B             ; print(" HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n"); 
0282   059B             ; --- START FUNCTION CALL
0283   059B 26 D2 1A      mov b, _s16 ; " HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n"
0284   059E FD AB         swp b
0285   05A0 D8            push b
0286   05A1 07 09 15      call print
0287   05A4 51 02 00      add sp, 2
0288   05A7             ; --- END FUNCTION CALL
0289   05A7             ; print(" ARROW OR YOU ENTERING HIS ROOM.\n"); 
0290   05A7             ; --- START FUNCTION CALL
0291   05A7 26 0B 1B      mov b, _s17 ; " ARROW OR YOU ENTERING HIS ROOM.\n"
0292   05AA FD AB         swp b
0293   05AC D8            push b
0294   05AD 07 09 15      call print
0295   05B0 51 02 00      add sp, 2
0296   05B3             ; --- END FUNCTION CALL
0297   05B3             ; print(" IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n"); 
0298   05B3             ; --- START FUNCTION CALL
0299   05B3 26 2D 1B      mov b, _s18 ; " IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n"
0300   05B6 FD AB         swp b
0301   05B8 D8            push b
0302   05B9 07 09 15      call print
0303   05BC 51 02 00      add sp, 2
0304   05BF             ; --- END FUNCTION CALL
0305   05BF             ; print(" OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"); 
0306   05BF             ; --- START FUNCTION CALL
0307   05BF 26 5D 1B      mov b, _s19 ; " OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"
0308   05C2 FD AB         swp b
0309   05C4 D8            push b
0310   05C5 07 09 15      call print
0311   05C8 51 02 00      add sp, 2
0312   05CB             ; --- END FUNCTION CALL
0313   05CB             ; print(" ARE, HE EATS YOU UP AND YOU LOSE!\n"); 
0314   05CB             ; --- START FUNCTION CALL
0315   05CB 26 97 1B      mov b, _s20 ; " ARE, HE EATS YOU UP AND YOU LOSE!\n"
0316   05CE FD AB         swp b
0317   05D0 D8            push b
0318   05D1 07 09 15      call print
0319   05D4 51 02 00      add sp, 2
0320   05D7             ; --- END FUNCTION CALL
0321   05D7             ; print("\n"); 
0322   05D7             ; --- START FUNCTION CALL
0323   05D7 26 43 19      mov b, _s6 ; "\n"
0324   05DA FD AB         swp b
0325   05DC D8            push b
0326   05DD 07 09 15      call print
0327   05E0 51 02 00      add sp, 2
0328   05E3             ; --- END FUNCTION CALL
0329   05E3             ; print(" YOU:\n"); 
0330   05E3             ; --- START FUNCTION CALL
0331   05E3 26 BB 1B      mov b, _s21 ; " YOU:\n"
0332   05E6 FD AB         swp b
0333   05E8 D8            push b
0334   05E9 07 09 15      call print
0335   05EC 51 02 00      add sp, 2
0336   05EF             ; --- END FUNCTION CALL
0337   05EF             ; print(" EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"); 
0338   05EF             ; --- START FUNCTION CALL
0339   05EF 26 C2 1B      mov b, _s22 ; " EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"
0340   05F2 FD AB         swp b
0341   05F4 D8            push b
0342   05F5 07 09 15      call print
0343   05F8 51 02 00      add sp, 2
0344   05FB             ; --- END FUNCTION CALL
0345   05FB             ; print(" MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"); 
0346   05FB             ; --- START FUNCTION CALL
0347   05FB 26 F4 1B      mov b, _s23 ; " MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"
0348   05FE FD AB         swp b
0349   0600 D8            push b
0350   0601 07 09 15      call print
0351   0604 51 02 00      add sp, 2
0352   0607             ; --- END FUNCTION CALL
0353   0607             ; print(" ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n"); 
0354   0607             ; --- START FUNCTION CALL
0355   0607 26 27 1C      mov b, _s24 ; " ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n"
0356   060A FD AB         swp b
0357   060C D8            push b
0358   060D 07 09 15      call print
0359   0610 51 02 00      add sp, 2
0360   0613             ; --- END FUNCTION CALL
0361   0613             ; print(" EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n"); 
0362   0613             ; --- START FUNCTION CALL
0363   0613 26 60 1C      mov b, _s25 ; " EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n"
0364   0616 FD AB         swp b
0365   0618 D8            push b
0366   0619 07 09 15      call print
0367   061C 51 02 00      add sp, 2
0368   061F             ; --- END FUNCTION CALL
0369   061F             ; print("   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"); 
0370   061F             ; --- START FUNCTION CALL
0371   061F 26 9A 1C      mov b, _s26 ; "   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"
0372   0622 FD AB         swp b
0373   0624 D8            push b
0374   0625 07 09 15      call print
0375   0628 51 02 00      add sp, 2
0376   062B             ; --- END FUNCTION CALL
0377   062B             ; print("   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n"); 
0378   062B             ; --- START FUNCTION CALL
0379   062B 26 D3 1C      mov b, _s27 ; "   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n"
0380   062E FD AB         swp b
0381   0630 D8            push b
0382   0631 07 09 15      call print
0383   0634 51 02 00      add sp, 2
0384   0637             ; --- END FUNCTION CALL
0385   0637             ; print("   AT RANDOM TO THE NEXT ROOM.\n"); 
0386   0637             ; --- START FUNCTION CALL
0387   0637 26 0D 1D      mov b, _s28 ; "   AT RANDOM TO THE NEXT ROOM.\n"
0388   063A FD AB         swp b
0389   063C D8            push b
0390   063D 07 09 15      call print
0391   0640 51 02 00      add sp, 2
0392   0643             ; --- END FUNCTION CALL
0393   0643             ; print("     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"); 
0394   0643             ; --- START FUNCTION CALL
0395   0643 26 2D 1D      mov b, _s29 ; "     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"
0396   0646 FD AB         swp b
0397   0648 D8            push b
0398   0649 07 09 15      call print
0399   064C 51 02 00      add sp, 2
0400   064F             ; --- END FUNCTION CALL
0401   064F             ; print("     IF THE ARROW HITS YOU, YOU LOSE.\n"); 
0402   064F             ; --- START FUNCTION CALL
0403   064F 26 5A 1D      mov b, _s30 ; "     IF THE ARROW HITS YOU, YOU LOSE.\n"
0404   0652 FD AB         swp b
0405   0654 D8            push b
0406   0655 07 09 15      call print
0407   0658 51 02 00      add sp, 2
0408   065B             ; --- END FUNCTION CALL
0409   065B             ; print(" WARNINGS:\n"); 
0410   065B             ; --- START FUNCTION CALL
0411   065B 26 81 1D      mov b, _s31 ; " WARNINGS:\n"
0412   065E FD AB         swp b
0413   0660 D8            push b
0414   0661 07 09 15      call print
0415   0664 51 02 00      add sp, 2
0416   0667             ; --- END FUNCTION CALL
0417   0667             ; print(" WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n"); 
0418   0667             ; --- START FUNCTION CALL
0419   0667 26 8D 1D      mov b, _s32 ; " WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n"
0420   066A FD AB         swp b
0421   066C D8            push b
0422   066D 07 09 15      call print
0423   0670 51 02 00      add sp, 2
0424   0673             ; --- END FUNCTION CALL
0425   0673             ; print(" THE COMPUTER SAYS:\n"); 
0426   0673             ; --- START FUNCTION CALL
0427   0673 26 C3 1D      mov b, _s33 ; " THE COMPUTER SAYS:\n"
0428   0676 FD AB         swp b
0429   0678 D8            push b
0430   0679 07 09 15      call print
0431   067C 51 02 00      add sp, 2
0432   067F             ; --- END FUNCTION CALL
0433   067F             ; print(" WUMPUS:  'I SMELL A WUMPUS'\n"); 
0434   067F             ; --- START FUNCTION CALL
0435   067F 26 D8 1D      mov b, _s34 ; " WUMPUS:  'I SMELL A WUMPUS'\n"
0436   0682 FD AB         swp b
0437   0684 D8            push b
0438   0685 07 09 15      call print
0439   0688 51 02 00      add sp, 2
0440   068B             ; --- END FUNCTION CALL
0441   068B             ; print(" BAT   :  'BATS NEARBY'\n"); 
0442   068B             ; --- START FUNCTION CALL
0443   068B 26 F6 1D      mov b, _s35 ; " BAT   :  'BATS NEARBY'\n"
0444   068E FD AB         swp b
0445   0690 D8            push b
0446   0691 07 09 15      call print
0447   0694 51 02 00      add sp, 2
0448   0697             ; --- END FUNCTION CALL
0449   0697             ; print(" PIT   :  'I FEEL A DRAFT'\n"); 
0450   0697             ; --- START FUNCTION CALL
0451   0697 26 0F 1E      mov b, _s36 ; " PIT   :  'I FEEL A DRAFT'\n"
0452   069A FD AB         swp b
0453   069C D8            push b
0454   069D 07 09 15      call print
0455   06A0 51 02 00      add sp, 2
0456   06A3             ; --- END FUNCTION CALL
0457   06A3             ; print("\n"); 
0458   06A3             ; --- START FUNCTION CALL
0459   06A3 26 43 19      mov b, _s6 ; "\n"
0460   06A6 FD AB         swp b
0461   06A8 D8            push b
0462   06A9 07 09 15      call print
0463   06AC 51 02 00      add sp, 2
0464   06AF             ; --- END FUNCTION CALL
0465   06AF F9            leave
0466   06B0 09            ret
0467   06B1             
0468   06B1             show_room:
0469   06B1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0470   06B4             ; int room, k; 
0471   06B4 52 02 00      sub sp, 2
0472   06B7 52 02 00      sub sp, 2
0473   06BA             ; print("\n"); 
0474   06BA             ; --- START FUNCTION CALL
0475   06BA 26 43 19      mov b, _s6 ; "\n"
0476   06BD FD AB         swp b
0477   06BF D8            push b
0478   06C0 07 09 15      call print
0479   06C3 51 02 00      add sp, 2
0480   06C6             ; --- END FUNCTION CALL
0481   06C6             ; for (k = 0; k < 3; k++) { 
0482   06C6             _for4_init:
0483   06C6 FA FD FF      lea d, [bp + -3] ; $k
0484   06C9 DA            push d
0485   06CA FD 2E 00 00   mov32 cb, $00000000
0485   06CE 00 00 
0486   06D0 E7            pop d
0487   06D1 FD 43         mov [d], b
0488   06D3             _for4_cond:
0489   06D3 FA FD FF      lea d, [bp + -3] ; $k
0490   06D6 2A            mov b, [d]
0491   06D7 38 00 00      mov c, 0
0492   06DA             ; --- START RELATIONAL
0493   06DA D7            push a
0494   06DB 11            mov a, b
0495   06DC FD 2E 03 00   mov32 cb, $00000003
0495   06E0 00 00 
0496   06E2 B0            cmp a, b
0497   06E3 FD 73         slt ; < (signed)
0498   06E5 E4            pop a
0499   06E6             ; --- END RELATIONAL
0500   06E6 C0 00 00      cmp b, 0
0501   06E9 C6 2A 08      je _for4_exit
0502   06EC             _for4_block:
0503   06EC             ; room = cave[loc[	    0   ]][k]; 
0504   06EC FA FF FF      lea d, [bp + -1] ; $room
0505   06EF DA            push d
0506   06F0 3B FA 17      mov d, _cave_data ; $cave
0507   06F3 D7            push a
0508   06F4 DA            push d
0509   06F5 3B EC 17      mov d, _loc_data ; $loc
0510   06F8 D7            push a
0511   06F9 DA            push d
0512   06FA FD 2E 00 00   mov32 cb, $00000000
0512   06FE 00 00 
0513   0700 E7            pop d
0514   0701 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0515   0705 E4            pop a
0516   0706 2A            mov b, [d]
0517   0707 38 00 00      mov c, 0
0518   070A E7            pop d
0519   070B FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0520   070F DA            push d
0521   0710 FA FD FF      lea d, [bp + -3] ; $k
0522   0713 2A            mov b, [d]
0523   0714 38 00 00      mov c, 0
0524   0717 E7            pop d
0525   0718 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0526   071C E4            pop a
0527   071D 2A            mov b, [d]
0528   071E 38 00 00      mov c, 0
0529   0721 E7            pop d
0530   0722 FD 43         mov [d], b
0531   0724             ; if (room == loc[	1      ]) { 
0532   0724             _if5_cond:
0533   0724 FA FF FF      lea d, [bp + -1] ; $room
0534   0727 2A            mov b, [d]
0535   0728 38 00 00      mov c, 0
0536   072B             ; --- START RELATIONAL
0537   072B D7            push a
0538   072C 11            mov a, b
0539   072D 3B EC 17      mov d, _loc_data ; $loc
0540   0730 D7            push a
0541   0731 DA            push d
0542   0732 FD 2E 01 00   mov32 cb, $00000001
0542   0736 00 00 
0543   0738 E7            pop d
0544   0739 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0545   073D E4            pop a
0546   073E 2A            mov b, [d]
0547   073F 38 00 00      mov c, 0
0548   0742 B0            cmp a, b
0549   0743 FD 71         seq ; ==
0550   0745 E4            pop a
0551   0746             ; --- END RELATIONAL
0552   0746 C0 00 00      cmp b, 0
0553   0749 C6 5B 07      je _if5_else
0554   074C             _if5_TRUE:
0555   074C             ; print("I SMELL A WUMPUS!\n"); 
0556   074C             ; --- START FUNCTION CALL
0557   074C 26 2B 1E      mov b, _s37 ; "I SMELL A WUMPUS!\n"
0558   074F FD AB         swp b
0559   0751 D8            push b
0560   0752 07 09 15      call print
0561   0755 51 02 00      add sp, 2
0562   0758             ; --- END FUNCTION CALL
0563   0758 0A 17 08      jmp _if5_exit
0564   075B             _if5_else:
0565   075B             ; if (room == loc[	2    ] || room == loc[	3    ]) { 
0566   075B             _if6_cond:
0567   075B FA FF FF      lea d, [bp + -1] ; $room
0568   075E 2A            mov b, [d]
0569   075F 38 00 00      mov c, 0
0570   0762             ; --- START RELATIONAL
0571   0762 D7            push a
0572   0763 11            mov a, b
0573   0764 3B EC 17      mov d, _loc_data ; $loc
0574   0767 D7            push a
0575   0768 DA            push d
0576   0769 FD 2E 02 00   mov32 cb, $00000002
0576   076D 00 00 
0577   076F E7            pop d
0578   0770 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0579   0774 E4            pop a
0580   0775 2A            mov b, [d]
0581   0776 38 00 00      mov c, 0
0582   0779 B0            cmp a, b
0583   077A FD 71         seq ; ==
0584   077C E4            pop a
0585   077D             ; --- END RELATIONAL
0586   077D             ; --- START LOGICAL OR
0587   077D D7            push a
0588   077E 11            mov a, b
0589   077F FA FF FF      lea d, [bp + -1] ; $room
0590   0782 2A            mov b, [d]
0591   0783 38 00 00      mov c, 0
0592   0786             ; --- START RELATIONAL
0593   0786 D7            push a
0594   0787 11            mov a, b
0595   0788 3B EC 17      mov d, _loc_data ; $loc
0596   078B D7            push a
0597   078C DA            push d
0598   078D FD 2E 03 00   mov32 cb, $00000003
0598   0791 00 00 
0599   0793 E7            pop d
0600   0794 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0601   0798 E4            pop a
0602   0799 2A            mov b, [d]
0603   079A 38 00 00      mov c, 0
0604   079D B0            cmp a, b
0605   079E FD 71         seq ; ==
0606   07A0 E4            pop a
0607   07A1             ; --- END RELATIONAL
0608   07A1 FD A8         sor a, b ; ||
0609   07A3 E4            pop a
0610   07A4             ; --- END LOGICAL OR
0611   07A4 C0 00 00      cmp b, 0
0612   07A7 C6 B9 07      je _if6_else
0613   07AA             _if6_TRUE:
0614   07AA             ; print("I FEEL A DRAFT\n"); 
0615   07AA             ; --- START FUNCTION CALL
0616   07AA 26 3E 1E      mov b, _s38 ; "I FEEL A DRAFT\n"
0617   07AD FD AB         swp b
0618   07AF D8            push b
0619   07B0 07 09 15      call print
0620   07B3 51 02 00      add sp, 2
0621   07B6             ; --- END FUNCTION CALL
0622   07B6 0A 17 08      jmp _if6_exit
0623   07B9             _if6_else:
0624   07B9             ; if (room == loc[	4     ] || room == loc[	5     ]) { 
0625   07B9             _if7_cond:
0626   07B9 FA FF FF      lea d, [bp + -1] ; $room
0627   07BC 2A            mov b, [d]
0628   07BD 38 00 00      mov c, 0
0629   07C0             ; --- START RELATIONAL
0630   07C0 D7            push a
0631   07C1 11            mov a, b
0632   07C2 3B EC 17      mov d, _loc_data ; $loc
0633   07C5 D7            push a
0634   07C6 DA            push d
0635   07C7 FD 2E 04 00   mov32 cb, $00000004
0635   07CB 00 00 
0636   07CD E7            pop d
0637   07CE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0638   07D2 E4            pop a
0639   07D3 2A            mov b, [d]
0640   07D4 38 00 00      mov c, 0
0641   07D7 B0            cmp a, b
0642   07D8 FD 71         seq ; ==
0643   07DA E4            pop a
0644   07DB             ; --- END RELATIONAL
0645   07DB             ; --- START LOGICAL OR
0646   07DB D7            push a
0647   07DC 11            mov a, b
0648   07DD FA FF FF      lea d, [bp + -1] ; $room
0649   07E0 2A            mov b, [d]
0650   07E1 38 00 00      mov c, 0
0651   07E4             ; --- START RELATIONAL
0652   07E4 D7            push a
0653   07E5 11            mov a, b
0654   07E6 3B EC 17      mov d, _loc_data ; $loc
0655   07E9 D7            push a
0656   07EA DA            push d
0657   07EB FD 2E 05 00   mov32 cb, $00000005
0657   07EF 00 00 
0658   07F1 E7            pop d
0659   07F2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0660   07F6 E4            pop a
0661   07F7 2A            mov b, [d]
0662   07F8 38 00 00      mov c, 0
0663   07FB B0            cmp a, b
0664   07FC FD 71         seq ; ==
0665   07FE E4            pop a
0666   07FF             ; --- END RELATIONAL
0667   07FF FD A8         sor a, b ; ||
0668   0801 E4            pop a
0669   0802             ; --- END LOGICAL OR
0670   0802 C0 00 00      cmp b, 0
0671   0805 C6 17 08      je _if7_exit
0672   0808             _if7_TRUE:
0673   0808             ; print("BATS NEARBY!\n"); 
0674   0808             ; --- START FUNCTION CALL
0675   0808 26 4E 1E      mov b, _s39 ; "BATS NEARBY!\n"
0676   080B FD AB         swp b
0677   080D D8            push b
0678   080E 07 09 15      call print
0679   0811 51 02 00      add sp, 2
0680   0814             ; --- END FUNCTION CALL
0681   0814 0A 17 08      jmp _if7_exit
0682   0817             _if7_exit:
0683   0817             _if6_exit:
0684   0817             _if5_exit:
0685   0817             _for4_update:
0686   0817 FA FD FF      lea d, [bp + -3] ; $k
0687   081A 2A            mov b, [d]
0688   081B 38 00 00      mov c, 0
0689   081E 11            mov a, b
0690   081F FD 77         inc b
0691   0821 FA FD FF      lea d, [bp + -3] ; $k
0692   0824 FD 43         mov [d], b
0693   0826 27            mov b, a
0694   0827 0A D3 06      jmp _for4_cond
0695   082A             _for4_exit:
0696   082A             ; print("YOU ARE IN ROOM "); print_unsigned(loc[	    0   ]+1); print("\n"); 
0697   082A             ; --- START FUNCTION CALL
0698   082A 26 5C 1E      mov b, _s40 ; "YOU ARE IN ROOM "
0699   082D FD AB         swp b
0700   082F D8            push b
0701   0830 07 09 15      call print
0702   0833 51 02 00      add sp, 2
0703   0836             ; --- END FUNCTION CALL
0704   0836             ; print_unsigned(loc[	    0   ]+1); print("\n"); 
0705   0836             ; --- START FUNCTION CALL
0706   0836 3B EC 17      mov d, _loc_data ; $loc
0707   0839 D7            push a
0708   083A DA            push d
0709   083B FD 2E 00 00   mov32 cb, $00000000
0709   083F 00 00 
0710   0841 E7            pop d
0711   0842 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0712   0846 E4            pop a
0713   0847 2A            mov b, [d]
0714   0848 38 00 00      mov c, 0
0715   084B             ; --- START TERMS
0716   084B D7            push a
0717   084C 11            mov a, b
0718   084D FD 2E 01 00   mov32 cb, $00000001
0718   0851 00 00 
0719   0853 56            add b, a
0720   0854 E4            pop a
0721   0855             ; --- END TERMS
0722   0855 FD AB         swp b
0723   0857 D8            push b
0724   0858 07 A2 15      call print_unsigned
0725   085B 51 02 00      add sp, 2
0726   085E             ; --- END FUNCTION CALL
0727   085E             ; print("\n"); 
0728   085E             ; --- START FUNCTION CALL
0729   085E 26 43 19      mov b, _s6 ; "\n"
0730   0861 FD AB         swp b
0731   0863 D8            push b
0732   0864 07 09 15      call print
0733   0867 51 02 00      add sp, 2
0734   086A             ; --- END FUNCTION CALL
0735   086A             ; print("TUNNELS LEAD TO ");  
0736   086A             ; --- START FUNCTION CALL
0737   086A 26 6D 1E      mov b, _s41 ; "TUNNELS LEAD TO "
0738   086D FD AB         swp b
0739   086F D8            push b
0740   0870 07 09 15      call print
0741   0873 51 02 00      add sp, 2
0742   0876             ; --- END FUNCTION CALL
0743   0876             ; print_unsigned(cave[loc[	    0   ]][0]+1); print(", "); 
0744   0876             ; --- START FUNCTION CALL
0745   0876 3B FA 17      mov d, _cave_data ; $cave
0746   0879 D7            push a
0747   087A DA            push d
0748   087B 3B EC 17      mov d, _loc_data ; $loc
0749   087E D7            push a
0750   087F DA            push d
0751   0880 FD 2E 00 00   mov32 cb, $00000000
0751   0884 00 00 
0752   0886 E7            pop d
0753   0887 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0754   088B E4            pop a
0755   088C 2A            mov b, [d]
0756   088D 38 00 00      mov c, 0
0757   0890 E7            pop d
0758   0891 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0759   0895 DA            push d
0760   0896 FD 2E 00 00   mov32 cb, $00000000
0760   089A 00 00 
0761   089C E7            pop d
0762   089D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0763   08A1 E4            pop a
0764   08A2 2A            mov b, [d]
0765   08A3 38 00 00      mov c, 0
0766   08A6             ; --- START TERMS
0767   08A6 D7            push a
0768   08A7 11            mov a, b
0769   08A8 FD 2E 01 00   mov32 cb, $00000001
0769   08AC 00 00 
0770   08AE 56            add b, a
0771   08AF E4            pop a
0772   08B0             ; --- END TERMS
0773   08B0 FD AB         swp b
0774   08B2 D8            push b
0775   08B3 07 A2 15      call print_unsigned
0776   08B6 51 02 00      add sp, 2
0777   08B9             ; --- END FUNCTION CALL
0778   08B9             ; print(", "); 
0779   08B9             ; --- START FUNCTION CALL
0780   08B9 26 7E 1E      mov b, _s42 ; ", "
0781   08BC FD AB         swp b
0782   08BE D8            push b
0783   08BF 07 09 15      call print
0784   08C2 51 02 00      add sp, 2
0785   08C5             ; --- END FUNCTION CALL
0786   08C5             ; print_unsigned(cave[loc[	    0   ]][1]+1); print(", "); 
0787   08C5             ; --- START FUNCTION CALL
0788   08C5 3B FA 17      mov d, _cave_data ; $cave
0789   08C8 D7            push a
0790   08C9 DA            push d
0791   08CA 3B EC 17      mov d, _loc_data ; $loc
0792   08CD D7            push a
0793   08CE DA            push d
0794   08CF FD 2E 00 00   mov32 cb, $00000000
0794   08D3 00 00 
0795   08D5 E7            pop d
0796   08D6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0797   08DA E4            pop a
0798   08DB 2A            mov b, [d]
0799   08DC 38 00 00      mov c, 0
0800   08DF E7            pop d
0801   08E0 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0802   08E4 DA            push d
0803   08E5 FD 2E 01 00   mov32 cb, $00000001
0803   08E9 00 00 
0804   08EB E7            pop d
0805   08EC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0806   08F0 E4            pop a
0807   08F1 2A            mov b, [d]
0808   08F2 38 00 00      mov c, 0
0809   08F5             ; --- START TERMS
0810   08F5 D7            push a
0811   08F6 11            mov a, b
0812   08F7 FD 2E 01 00   mov32 cb, $00000001
0812   08FB 00 00 
0813   08FD 56            add b, a
0814   08FE E4            pop a
0815   08FF             ; --- END TERMS
0816   08FF FD AB         swp b
0817   0901 D8            push b
0818   0902 07 A2 15      call print_unsigned
0819   0905 51 02 00      add sp, 2
0820   0908             ; --- END FUNCTION CALL
0821   0908             ; print(", "); 
0822   0908             ; --- START FUNCTION CALL
0823   0908 26 7E 1E      mov b, _s42 ; ", "
0824   090B FD AB         swp b
0825   090D D8            push b
0826   090E 07 09 15      call print
0827   0911 51 02 00      add sp, 2
0828   0914             ; --- END FUNCTION CALL
0829   0914             ; print_unsigned(cave[loc[	    0   ]][2]+1); 
0830   0914             ; --- START FUNCTION CALL
0831   0914 3B FA 17      mov d, _cave_data ; $cave
0832   0917 D7            push a
0833   0918 DA            push d
0834   0919 3B EC 17      mov d, _loc_data ; $loc
0835   091C D7            push a
0836   091D DA            push d
0837   091E FD 2E 00 00   mov32 cb, $00000000
0837   0922 00 00 
0838   0924 E7            pop d
0839   0925 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0840   0929 E4            pop a
0841   092A 2A            mov b, [d]
0842   092B 38 00 00      mov c, 0
0843   092E E7            pop d
0844   092F FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0845   0933 DA            push d
0846   0934 FD 2E 02 00   mov32 cb, $00000002
0846   0938 00 00 
0847   093A E7            pop d
0848   093B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0849   093F E4            pop a
0850   0940 2A            mov b, [d]
0851   0941 38 00 00      mov c, 0
0852   0944             ; --- START TERMS
0853   0944 D7            push a
0854   0945 11            mov a, b
0855   0946 FD 2E 01 00   mov32 cb, $00000001
0855   094A 00 00 
0856   094C 56            add b, a
0857   094D E4            pop a
0858   094E             ; --- END TERMS
0859   094E FD AB         swp b
0860   0950 D8            push b
0861   0951 07 A2 15      call print_unsigned
0862   0954 51 02 00      add sp, 2
0863   0957             ; --- END FUNCTION CALL
0864   0957             ; print("\n\n"); 
0865   0957             ; --- START FUNCTION CALL
0866   0957 26 81 1E      mov b, _s43 ; "\n\n"
0867   095A FD AB         swp b
0868   095C D8            push b
0869   095D 07 09 15      call print
0870   0960 51 02 00      add sp, 2
0871   0963             ; --- END FUNCTION CALL
0872   0963 F9            leave
0873   0964 09            ret
0874   0965             
0875   0965             move_or_shoot:
0876   0965 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0877   0968             ; int c = -1; 
0878   0968 52 02 00      sub sp, 2
0879   096B             ; --- START LOCAL VAR INITIALIZATION
0880   096B FA FF FF      lea d, [bp + -1] ; $c
0881   096E DA            push d
0882   096F FD 2E FF FF   mov32 cb, $ffffffff
0882   0973 FF FF 
0883   0975 E7            pop d
0884   0976 FD 43         mov [d], b
0885   0978             ; --- END LOCAL VAR INITIALIZATION
0886   0978             ; while ((c != 'S') && (c != 'M')) { 
0887   0978             _while8_cond:
0888   0978 FA FF FF      lea d, [bp + -1] ; $c
0889   097B 2A            mov b, [d]
0890   097C 38 00 00      mov c, 0
0891   097F             ; --- START RELATIONAL
0892   097F D7            push a
0893   0980 11            mov a, b
0894   0981 FD 2E 53 00   mov32 cb, $00000053
0894   0985 00 00 
0895   0987 B0            cmp a, b
0896   0988 FD 72         sneq ; !=
0897   098A E4            pop a
0898   098B             ; --- END RELATIONAL
0899   098B             ; --- START LOGICAL AND
0900   098B D7            push a
0901   098C 11            mov a, b
0902   098D FA FF FF      lea d, [bp + -1] ; $c
0903   0990 2A            mov b, [d]
0904   0991 38 00 00      mov c, 0
0905   0994             ; --- START RELATIONAL
0906   0994 D7            push a
0907   0995 11            mov a, b
0908   0996 FD 2E 4D 00   mov32 cb, $0000004d
0908   099A 00 00 
0909   099C B0            cmp a, b
0910   099D FD 72         sneq ; !=
0911   099F E4            pop a
0912   09A0             ; --- END RELATIONAL
0913   09A0 FD A7         sand a, b
0914   09A2 E4            pop a
0915   09A3             ; --- END LOGICAL AND
0916   09A3 C0 00 00      cmp b, 0
0917   09A6 C6 BF 09      je _while8_exit
0918   09A9             _while8_block:
0919   09A9             ; c = getlet("SHOOT OR MOVE (S-M): "); 
0920   09A9 FA FF FF      lea d, [bp + -1] ; $c
0921   09AC DA            push d
0922   09AD             ; --- START FUNCTION CALL
0923   09AD 26 84 1E      mov b, _s44 ; "SHOOT OR MOVE (S-M): "
0924   09B0 FD AB         swp b
0925   09B2 D8            push b
0926   09B3 07 93 04      call getlet
0927   09B6 51 02 00      add sp, 2
0928   09B9             ; --- END FUNCTION CALL
0929   09B9 E7            pop d
0930   09BA FD 43         mov [d], b
0931   09BC 0A 78 09      jmp _while8_cond
0932   09BF             _while8_exit:
0933   09BF             ; return (c == 'S') ? 1 : 0; 
0934   09BF             _ternary9_cond:
0935   09BF FA FF FF      lea d, [bp + -1] ; $c
0936   09C2 2A            mov b, [d]
0937   09C3 38 00 00      mov c, 0
0938   09C6             ; --- START RELATIONAL
0939   09C6 D7            push a
0940   09C7 11            mov a, b
0941   09C8 FD 2E 53 00   mov32 cb, $00000053
0941   09CC 00 00 
0942   09CE B0            cmp a, b
0943   09CF FD 71         seq ; ==
0944   09D1 E4            pop a
0945   09D2             ; --- END RELATIONAL
0946   09D2 C0 00 00      cmp b, 0
0947   09D5 C6 E1 09      je _ternary9_FALSE
0948   09D8             _ternary9_TRUE:
0949   09D8 FD 2E 01 00   mov32 cb, $00000001
0949   09DC 00 00 
0950   09DE 0A E7 09      jmp _ternary9_exit
0951   09E1             _ternary9_FALSE:
0952   09E1 FD 2E 00 00   mov32 cb, $00000000
0952   09E5 00 00 
0953   09E7             _ternary9_exit:
0954   09E7 F9            leave
0955   09E8 09            ret
0956   09E9             
0957   09E9             move_wumpus:
0958   09E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0959   09EC             ; int k; 
0960   09EC 52 02 00      sub sp, 2
0961   09EF             ; k = rand2() % 4; 
0962   09EF FA FF FF      lea d, [bp + -1] ; $k
0963   09F2 DA            push d
0964   09F3             ; --- START FUNCTION CALL
0965   09F3 07 6A 11      call rand2
0966   09F6             ; --- START FACTORS
0967   09F6 D7            push a
0968   09F7 FD D8         push g
0969   09F9 11            mov a, b
0970   09FA FD 7A         mov g, c
0971   09FC FD 2E 04 00   mov32 cb, $00000004
0971   0A00 00 00 
0972   0A02 FD D8         push g ; save 'g' as the div instruction uses it
0973   0A04 AE            div a, b ; %, a: quotient, b: remainder
0974   0A05 11            mov a, b
0975   0A06 FD F1         pop g
0976   0A08 FD 38         mov c, g
0977   0A0A 27            mov b, a
0978   0A0B FD F1         pop g
0979   0A0D E4            pop a
0980   0A0E             ; --- END FACTORS
0981   0A0E E7            pop d
0982   0A0F FD 43         mov [d], b
0983   0A11             ; if (k < 3) { 
0984   0A11             _if12_cond:
0985   0A11 FA FF FF      lea d, [bp + -1] ; $k
0986   0A14 2A            mov b, [d]
0987   0A15 38 00 00      mov c, 0
0988   0A18             ; --- START RELATIONAL
0989   0A18 D7            push a
0990   0A19 11            mov a, b
0991   0A1A FD 2E 03 00   mov32 cb, $00000003
0991   0A1E 00 00 
0992   0A20 B0            cmp a, b
0993   0A21 FD 73         slt ; < (signed)
0994   0A23 E4            pop a
0995   0A24             ; --- END RELATIONAL
0996   0A24 C0 00 00      cmp b, 0
0997   0A27 C6 73 0A      je _if12_exit
0998   0A2A             _if12_TRUE:
0999   0A2A             ; loc[	1      ] = cave[loc[	1      ]][k]; 
1000   0A2A 3B EC 17      mov d, _loc_data ; $loc
1001   0A2D D7            push a
1002   0A2E DA            push d
1003   0A2F FD 2E 01 00   mov32 cb, $00000001
1003   0A33 00 00 
1004   0A35 E7            pop d
1005   0A36 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1006   0A3A E4            pop a
1007   0A3B DA            push d
1008   0A3C 3B FA 17      mov d, _cave_data ; $cave
1009   0A3F D7            push a
1010   0A40 DA            push d
1011   0A41 3B EC 17      mov d, _loc_data ; $loc
1012   0A44 D7            push a
1013   0A45 DA            push d
1014   0A46 FD 2E 01 00   mov32 cb, $00000001
1014   0A4A 00 00 
1015   0A4C E7            pop d
1016   0A4D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1017   0A51 E4            pop a
1018   0A52 2A            mov b, [d]
1019   0A53 38 00 00      mov c, 0
1020   0A56 E7            pop d
1021   0A57 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1022   0A5B DA            push d
1023   0A5C FA FF FF      lea d, [bp + -1] ; $k
1024   0A5F 2A            mov b, [d]
1025   0A60 38 00 00      mov c, 0
1026   0A63 E7            pop d
1027   0A64 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1028   0A68 E4            pop a
1029   0A69 2A            mov b, [d]
1030   0A6A 38 00 00      mov c, 0
1031   0A6D E7            pop d
1032   0A6E FD 43         mov [d], b
1033   0A70 0A 73 0A      jmp _if12_exit
1034   0A73             _if12_exit:
1035   0A73             ; if (loc[	1      ] == loc[	    0   ]) { 
1036   0A73             _if13_cond:
1037   0A73 3B EC 17      mov d, _loc_data ; $loc
1038   0A76 D7            push a
1039   0A77 DA            push d
1040   0A78 FD 2E 01 00   mov32 cb, $00000001
1040   0A7C 00 00 
1041   0A7E E7            pop d
1042   0A7F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1043   0A83 E4            pop a
1044   0A84 2A            mov b, [d]
1045   0A85 38 00 00      mov c, 0
1046   0A88             ; --- START RELATIONAL
1047   0A88 D7            push a
1048   0A89 11            mov a, b
1049   0A8A 3B EC 17      mov d, _loc_data ; $loc
1050   0A8D D7            push a
1051   0A8E DA            push d
1052   0A8F FD 2E 00 00   mov32 cb, $00000000
1052   0A93 00 00 
1053   0A95 E7            pop d
1054   0A96 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1055   0A9A E4            pop a
1056   0A9B 2A            mov b, [d]
1057   0A9C 38 00 00      mov c, 0
1058   0A9F B0            cmp a, b
1059   0AA0 FD 71         seq ; ==
1060   0AA2 E4            pop a
1061   0AA3             ; --- END RELATIONAL
1062   0AA3 C0 00 00      cmp b, 0
1063   0AA6 C6 C5 0A      je _if13_exit
1064   0AA9             _if13_TRUE:
1065   0AA9             ; print("TSK TSK TSK - WUMPUS GOT YOU!\n"); 
1066   0AA9             ; --- START FUNCTION CALL
1067   0AA9 26 9A 1E      mov b, _s45 ; "TSK TSK TSK - WUMPUS GOT YOU!\n"
1068   0AAC FD AB         swp b
1069   0AAE D8            push b
1070   0AAF 07 09 15      call print
1071   0AB2 51 02 00      add sp, 2
1072   0AB5             ; --- END FUNCTION CALL
1073   0AB5             ; finished = 	2    ; 
1074   0AB5 3B F8 17      mov d, _finished ; $finished
1075   0AB8 DA            push d
1076   0AB9 FD 2E 02 00   mov32 cb, $00000002
1076   0ABD 00 00 
1077   0ABF E7            pop d
1078   0AC0 FD 43         mov [d], b
1079   0AC2 0A C5 0A      jmp _if13_exit
1080   0AC5             _if13_exit:
1081   0AC5 F9            leave
1082   0AC6 09            ret
1083   0AC7             
1084   0AC7             shoot:
1085   0AC7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1086   0ACA             ; int path[5]; 
1087   0ACA 52 0A 00      sub sp, 10
1088   0ACD             ; int scratchloc = -1; 
1089   0ACD 52 02 00      sub sp, 2
1090   0AD0             ; --- START LOCAL VAR INITIALIZATION
1091   0AD0 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1092   0AD3 DA            push d
1093   0AD4 FD 2E FF FF   mov32 cb, $ffffffff
1093   0AD8 FF FF 
1094   0ADA E7            pop d
1095   0ADB FD 43         mov [d], b
1096   0ADD             ; --- END LOCAL VAR INITIALIZATION
1097   0ADD             ; int len, k; 
1098   0ADD 52 02 00      sub sp, 2
1099   0AE0 52 02 00      sub sp, 2
1100   0AE3             ; finished = 	     0   ; 
1101   0AE3 3B F8 17      mov d, _finished ; $finished
1102   0AE6 DA            push d
1103   0AE7 FD 2E 00 00   mov32 cb, $00000000
1103   0AEB 00 00 
1104   0AED E7            pop d
1105   0AEE FD 43         mov [d], b
1106   0AF0             ; len = -1; 
1107   0AF0 FA F3 FF      lea d, [bp + -13] ; $len
1108   0AF3 DA            push d
1109   0AF4 FD 2E FF FF   mov32 cb, $ffffffff
1109   0AF8 FF FF 
1110   0AFA E7            pop d
1111   0AFB FD 43         mov [d], b
1112   0AFD             ; while (len < 1 || len > 5) { 
1113   0AFD             _while14_cond:
1114   0AFD FA F3 FF      lea d, [bp + -13] ; $len
1115   0B00 2A            mov b, [d]
1116   0B01 38 00 00      mov c, 0
1117   0B04             ; --- START RELATIONAL
1118   0B04 D7            push a
1119   0B05 11            mov a, b
1120   0B06 FD 2E 01 00   mov32 cb, $00000001
1120   0B0A 00 00 
1121   0B0C B0            cmp a, b
1122   0B0D FD 73         slt ; < (signed)
1123   0B0F E4            pop a
1124   0B10             ; --- END RELATIONAL
1125   0B10             ; --- START LOGICAL OR
1126   0B10 D7            push a
1127   0B11 11            mov a, b
1128   0B12 FA F3 FF      lea d, [bp + -13] ; $len
1129   0B15 2A            mov b, [d]
1130   0B16 38 00 00      mov c, 0
1131   0B19             ; --- START RELATIONAL
1132   0B19 D7            push a
1133   0B1A 11            mov a, b
1134   0B1B FD 2E 05 00   mov32 cb, $00000005
1134   0B1F 00 00 
1135   0B21 B0            cmp a, b
1136   0B22 FD 7F         sgt ; >
1137   0B24 E4            pop a
1138   0B25             ; --- END RELATIONAL
1139   0B25 FD A8         sor a, b ; ||
1140   0B27 E4            pop a
1141   0B28             ; --- END LOGICAL OR
1142   0B28 C0 00 00      cmp b, 0
1143   0B2B C6 44 0B      je _while14_exit
1144   0B2E             _while14_block:
1145   0B2E             ; len = getnum("\nNUMBER OF ROOMS (1-5): "); 
1146   0B2E FA F3 FF      lea d, [bp + -13] ; $len
1147   0B31 DA            push d
1148   0B32             ; --- START FUNCTION CALL
1149   0B32 26 B9 1E      mov b, _s46 ; "\nNUMBER OF ROOMS (1-5): "
1150   0B35 FD AB         swp b
1151   0B37 D8            push b
1152   0B38 07 6A 04      call getnum
1153   0B3B 51 02 00      add sp, 2
1154   0B3E             ; --- END FUNCTION CALL
1155   0B3E E7            pop d
1156   0B3F FD 43         mov [d], b
1157   0B41 0A FD 0A      jmp _while14_cond
1158   0B44             _while14_exit:
1159   0B44             ; k = 0; 
1160   0B44 FA F1 FF      lea d, [bp + -15] ; $k
1161   0B47 DA            push d
1162   0B48 FD 2E 00 00   mov32 cb, $00000000
1162   0B4C 00 00 
1163   0B4E E7            pop d
1164   0B4F FD 43         mov [d], b
1165   0B51             ; while (k < len) { 
1166   0B51             _while15_cond:
1167   0B51 FA F1 FF      lea d, [bp + -15] ; $k
1168   0B54 2A            mov b, [d]
1169   0B55 38 00 00      mov c, 0
1170   0B58             ; --- START RELATIONAL
1171   0B58 D7            push a
1172   0B59 11            mov a, b
1173   0B5A FA F3 FF      lea d, [bp + -13] ; $len
1174   0B5D 2A            mov b, [d]
1175   0B5E 38 00 00      mov c, 0
1176   0B61 B0            cmp a, b
1177   0B62 FD 73         slt ; < (signed)
1178   0B64 E4            pop a
1179   0B65             ; --- END RELATIONAL
1180   0B65 C0 00 00      cmp b, 0
1181   0B68 C6 18 0C      je _while15_exit
1182   0B6B             _while15_block:
1183   0B6B             ; path[k] = getnum("ROOM #") - 1; 
1184   0B6B FA F7 FF      lea d, [bp + -9] ; $path
1185   0B6E D7            push a
1186   0B6F DA            push d
1187   0B70 FA F1 FF      lea d, [bp + -15] ; $k
1188   0B73 2A            mov b, [d]
1189   0B74 38 00 00      mov c, 0
1190   0B77 E7            pop d
1191   0B78 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1192   0B7C E4            pop a
1193   0B7D DA            push d
1194   0B7E             ; --- START FUNCTION CALL
1195   0B7E 26 D2 1E      mov b, _s47 ; "ROOM #"
1196   0B81 FD AB         swp b
1197   0B83 D8            push b
1198   0B84 07 6A 04      call getnum
1199   0B87 51 02 00      add sp, 2
1200   0B8A             ; --- END FUNCTION CALL
1201   0B8A             ; --- START TERMS
1202   0B8A D7            push a
1203   0B8B 11            mov a, b
1204   0B8C FD 2E 01 00   mov32 cb, $00000001
1204   0B90 00 00 
1205   0B92 60            sub a, b
1206   0B93 27            mov b, a
1207   0B94 E4            pop a
1208   0B95             ; --- END TERMS
1209   0B95 E7            pop d
1210   0B96 FD 43         mov [d], b
1211   0B98             ; if ((k>1) && (path[k] == path[k - 2])) { 
1212   0B98             _if16_cond:
1213   0B98 FA F1 FF      lea d, [bp + -15] ; $k
1214   0B9B 2A            mov b, [d]
1215   0B9C 38 00 00      mov c, 0
1216   0B9F             ; --- START RELATIONAL
1217   0B9F D7            push a
1218   0BA0 11            mov a, b
1219   0BA1 FD 2E 01 00   mov32 cb, $00000001
1219   0BA5 00 00 
1220   0BA7 B0            cmp a, b
1221   0BA8 FD 7F         sgt ; >
1222   0BAA E4            pop a
1223   0BAB             ; --- END RELATIONAL
1224   0BAB             ; --- START LOGICAL AND
1225   0BAB D7            push a
1226   0BAC 11            mov a, b
1227   0BAD FA F7 FF      lea d, [bp + -9] ; $path
1228   0BB0 D7            push a
1229   0BB1 DA            push d
1230   0BB2 FA F1 FF      lea d, [bp + -15] ; $k
1231   0BB5 2A            mov b, [d]
1232   0BB6 38 00 00      mov c, 0
1233   0BB9 E7            pop d
1234   0BBA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1235   0BBE E4            pop a
1236   0BBF 2A            mov b, [d]
1237   0BC0 38 00 00      mov c, 0
1238   0BC3             ; --- START RELATIONAL
1239   0BC3 D7            push a
1240   0BC4 11            mov a, b
1241   0BC5 FA F7 FF      lea d, [bp + -9] ; $path
1242   0BC8 D7            push a
1243   0BC9 DA            push d
1244   0BCA FA F1 FF      lea d, [bp + -15] ; $k
1245   0BCD 2A            mov b, [d]
1246   0BCE 38 00 00      mov c, 0
1247   0BD1             ; --- START TERMS
1248   0BD1 D7            push a
1249   0BD2 11            mov a, b
1250   0BD3 FD 2E 02 00   mov32 cb, $00000002
1250   0BD7 00 00 
1251   0BD9 60            sub a, b
1252   0BDA 27            mov b, a
1253   0BDB E4            pop a
1254   0BDC             ; --- END TERMS
1255   0BDC E7            pop d
1256   0BDD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1257   0BE1 E4            pop a
1258   0BE2 2A            mov b, [d]
1259   0BE3 38 00 00      mov c, 0
1260   0BE6 B0            cmp a, b
1261   0BE7 FD 71         seq ; ==
1262   0BE9 E4            pop a
1263   0BEA             ; --- END RELATIONAL
1264   0BEA FD A7         sand a, b
1265   0BEC E4            pop a
1266   0BED             ; --- END LOGICAL AND
1267   0BED C0 00 00      cmp b, 0
1268   0BF0 C6 05 0C      je _if16_exit
1269   0BF3             _if16_TRUE:
1270   0BF3             ; print("ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n"); 
1271   0BF3             ; --- START FUNCTION CALL
1272   0BF3 26 D9 1E      mov b, _s48 ; "ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n"
1273   0BF6 FD AB         swp b
1274   0BF8 D8            push b
1275   0BF9 07 09 15      call print
1276   0BFC 51 02 00      add sp, 2
1277   0BFF             ; --- END FUNCTION CALL
1278   0BFF             ; continue;  
1279   0BFF 0A 51 0B      jmp _while15_cond ; while continue
1280   0C02 0A 05 0C      jmp _if16_exit
1281   0C05             _if16_exit:
1282   0C05             ; k++; 
1283   0C05 FA F1 FF      lea d, [bp + -15] ; $k
1284   0C08 2A            mov b, [d]
1285   0C09 38 00 00      mov c, 0
1286   0C0C 11            mov a, b
1287   0C0D FD 77         inc b
1288   0C0F FA F1 FF      lea d, [bp + -15] ; $k
1289   0C12 FD 43         mov [d], b
1290   0C14 27            mov b, a
1291   0C15 0A 51 0B      jmp _while15_cond
1292   0C18             _while15_exit:
1293   0C18             ; scratchloc = loc[	    0   ]; 
1294   0C18 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1295   0C1B DA            push d
1296   0C1C 3B EC 17      mov d, _loc_data ; $loc
1297   0C1F D7            push a
1298   0C20 DA            push d
1299   0C21 FD 2E 00 00   mov32 cb, $00000000
1299   0C25 00 00 
1300   0C27 E7            pop d
1301   0C28 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1302   0C2C E4            pop a
1303   0C2D 2A            mov b, [d]
1304   0C2E 38 00 00      mov c, 0
1305   0C31 E7            pop d
1306   0C32 FD 43         mov [d], b
1307   0C34             ; for (k = 0; k < len; k++) { 
1308   0C34             _for17_init:
1309   0C34 FA F1 FF      lea d, [bp + -15] ; $k
1310   0C37 DA            push d
1311   0C38 FD 2E 00 00   mov32 cb, $00000000
1311   0C3C 00 00 
1312   0C3E E7            pop d
1313   0C3F FD 43         mov [d], b
1314   0C41             _for17_cond:
1315   0C41 FA F1 FF      lea d, [bp + -15] ; $k
1316   0C44 2A            mov b, [d]
1317   0C45 38 00 00      mov c, 0
1318   0C48             ; --- START RELATIONAL
1319   0C48 D7            push a
1320   0C49 11            mov a, b
1321   0C4A FA F3 FF      lea d, [bp + -13] ; $len
1322   0C4D 2A            mov b, [d]
1323   0C4E 38 00 00      mov c, 0
1324   0C51 B0            cmp a, b
1325   0C52 FD 73         slt ; < (signed)
1326   0C54 E4            pop a
1327   0C55             ; --- END RELATIONAL
1328   0C55 C0 00 00      cmp b, 0
1329   0C58 C6 3A 0E      je _for17_exit
1330   0C5B             _for17_block:
1331   0C5B             ; if ((cave[scratchloc][0] == path[k]) || 
1332   0C5B             _if18_cond:
1333   0C5B 3B FA 17      mov d, _cave_data ; $cave
1334   0C5E D7            push a
1335   0C5F DA            push d
1336   0C60 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1337   0C63 2A            mov b, [d]
1338   0C64 38 00 00      mov c, 0
1339   0C67 E7            pop d
1340   0C68 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1341   0C6C DA            push d
1342   0C6D FD 2E 00 00   mov32 cb, $00000000
1342   0C71 00 00 
1343   0C73 E7            pop d
1344   0C74 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1345   0C78 E4            pop a
1346   0C79 2A            mov b, [d]
1347   0C7A 38 00 00      mov c, 0
1348   0C7D             ; --- START RELATIONAL
1349   0C7D D7            push a
1350   0C7E 11            mov a, b
1351   0C7F FA F7 FF      lea d, [bp + -9] ; $path
1352   0C82 D7            push a
1353   0C83 DA            push d
1354   0C84 FA F1 FF      lea d, [bp + -15] ; $k
1355   0C87 2A            mov b, [d]
1356   0C88 38 00 00      mov c, 0
1357   0C8B E7            pop d
1358   0C8C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1359   0C90 E4            pop a
1360   0C91 2A            mov b, [d]
1361   0C92 38 00 00      mov c, 0
1362   0C95 B0            cmp a, b
1363   0C96 FD 71         seq ; ==
1364   0C98 E4            pop a
1365   0C99             ; --- END RELATIONAL
1366   0C99             ; --- START LOGICAL OR
1367   0C99 D7            push a
1368   0C9A 11            mov a, b
1369   0C9B 3B FA 17      mov d, _cave_data ; $cave
1370   0C9E D7            push a
1371   0C9F DA            push d
1372   0CA0 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1373   0CA3 2A            mov b, [d]
1374   0CA4 38 00 00      mov c, 0
1375   0CA7 E7            pop d
1376   0CA8 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1377   0CAC DA            push d
1378   0CAD FD 2E 01 00   mov32 cb, $00000001
1378   0CB1 00 00 
1379   0CB3 E7            pop d
1380   0CB4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1381   0CB8 E4            pop a
1382   0CB9 2A            mov b, [d]
1383   0CBA 38 00 00      mov c, 0
1384   0CBD             ; --- START RELATIONAL
1385   0CBD D7            push a
1386   0CBE 11            mov a, b
1387   0CBF FA F7 FF      lea d, [bp + -9] ; $path
1388   0CC2 D7            push a
1389   0CC3 DA            push d
1390   0CC4 FA F1 FF      lea d, [bp + -15] ; $k
1391   0CC7 2A            mov b, [d]
1392   0CC8 38 00 00      mov c, 0
1393   0CCB E7            pop d
1394   0CCC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1395   0CD0 E4            pop a
1396   0CD1 2A            mov b, [d]
1397   0CD2 38 00 00      mov c, 0
1398   0CD5 B0            cmp a, b
1399   0CD6 FD 71         seq ; ==
1400   0CD8 E4            pop a
1401   0CD9             ; --- END RELATIONAL
1402   0CD9 FD A8         sor a, b ; ||
1403   0CDB 11            mov a, b
1404   0CDC 3B FA 17      mov d, _cave_data ; $cave
1405   0CDF D7            push a
1406   0CE0 DA            push d
1407   0CE1 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1408   0CE4 2A            mov b, [d]
1409   0CE5 38 00 00      mov c, 0
1410   0CE8 E7            pop d
1411   0CE9 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1412   0CED DA            push d
1413   0CEE FD 2E 02 00   mov32 cb, $00000002
1413   0CF2 00 00 
1414   0CF4 E7            pop d
1415   0CF5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1416   0CF9 E4            pop a
1417   0CFA 2A            mov b, [d]
1418   0CFB 38 00 00      mov c, 0
1419   0CFE             ; --- START RELATIONAL
1420   0CFE D7            push a
1421   0CFF 11            mov a, b
1422   0D00 FA F7 FF      lea d, [bp + -9] ; $path
1423   0D03 D7            push a
1424   0D04 DA            push d
1425   0D05 FA F1 FF      lea d, [bp + -15] ; $k
1426   0D08 2A            mov b, [d]
1427   0D09 38 00 00      mov c, 0
1428   0D0C E7            pop d
1429   0D0D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1430   0D11 E4            pop a
1431   0D12 2A            mov b, [d]
1432   0D13 38 00 00      mov c, 0
1433   0D16 B0            cmp a, b
1434   0D17 FD 71         seq ; ==
1435   0D19 E4            pop a
1436   0D1A             ; --- END RELATIONAL
1437   0D1A FD A8         sor a, b ; ||
1438   0D1C E4            pop a
1439   0D1D             ; --- END LOGICAL OR
1440   0D1D C0 00 00      cmp b, 0
1441   0D20 C6 43 0D      je _if18_else
1442   0D23             _if18_TRUE:
1443   0D23             ; scratchloc = path[k]; 
1444   0D23 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1445   0D26 DA            push d
1446   0D27 FA F7 FF      lea d, [bp + -9] ; $path
1447   0D2A D7            push a
1448   0D2B DA            push d
1449   0D2C FA F1 FF      lea d, [bp + -15] ; $k
1450   0D2F 2A            mov b, [d]
1451   0D30 38 00 00      mov c, 0
1452   0D33 E7            pop d
1453   0D34 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1454   0D38 E4            pop a
1455   0D39 2A            mov b, [d]
1456   0D3A 38 00 00      mov c, 0
1457   0D3D E7            pop d
1458   0D3E FD 43         mov [d], b
1459   0D40 0A 81 0D      jmp _if18_exit
1460   0D43             _if18_else:
1461   0D43             ; scratchloc = cave[scratchloc][rand2()%3]; 
1462   0D43 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1463   0D46 DA            push d
1464   0D47 3B FA 17      mov d, _cave_data ; $cave
1465   0D4A D7            push a
1466   0D4B DA            push d
1467   0D4C FA F5 FF      lea d, [bp + -11] ; $scratchloc
1468   0D4F 2A            mov b, [d]
1469   0D50 38 00 00      mov c, 0
1470   0D53 E7            pop d
1471   0D54 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1472   0D58 DA            push d
1473   0D59             ; --- START FUNCTION CALL
1474   0D59 07 6A 11      call rand2
1475   0D5C             ; --- START FACTORS
1476   0D5C D7            push a
1477   0D5D FD D8         push g
1478   0D5F 11            mov a, b
1479   0D60 FD 7A         mov g, c
1480   0D62 FD 2E 03 00   mov32 cb, $00000003
1480   0D66 00 00 
1481   0D68 FD D8         push g ; save 'g' as the div instruction uses it
1482   0D6A AE            div a, b ; %, a: quotient, b: remainder
1483   0D6B 11            mov a, b
1484   0D6C FD F1         pop g
1485   0D6E FD 38         mov c, g
1486   0D70 27            mov b, a
1487   0D71 FD F1         pop g
1488   0D73 E4            pop a
1489   0D74             ; --- END FACTORS
1490   0D74 E7            pop d
1491   0D75 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1492   0D79 E4            pop a
1493   0D7A 2A            mov b, [d]
1494   0D7B 38 00 00      mov c, 0
1495   0D7E E7            pop d
1496   0D7F FD 43         mov [d], b
1497   0D81             _if18_exit:
1498   0D81             ; if (scratchloc == loc[	1      ]) { 
1499   0D81             _if23_cond:
1500   0D81 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1501   0D84 2A            mov b, [d]
1502   0D85 38 00 00      mov c, 0
1503   0D88             ; --- START RELATIONAL
1504   0D88 D7            push a
1505   0D89 11            mov a, b
1506   0D8A 3B EC 17      mov d, _loc_data ; $loc
1507   0D8D D7            push a
1508   0D8E DA            push d
1509   0D8F FD 2E 01 00   mov32 cb, $00000001
1509   0D93 00 00 
1510   0D95 E7            pop d
1511   0D96 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1512   0D9A E4            pop a
1513   0D9B 2A            mov b, [d]
1514   0D9C 38 00 00      mov c, 0
1515   0D9F B0            cmp a, b
1516   0DA0 FD 71         seq ; ==
1517   0DA2 E4            pop a
1518   0DA3             ; --- END RELATIONAL
1519   0DA3 C0 00 00      cmp b, 0
1520   0DA6 C6 C5 0D      je _if23_else
1521   0DA9             _if23_TRUE:
1522   0DA9             ; print("AHA! YOU GOT THE WUMPUS!\n"); 
1523   0DA9             ; --- START FUNCTION CALL
1524   0DA9 26 07 1F      mov b, _s49 ; "AHA! YOU GOT THE WUMPUS!\n"
1525   0DAC FD AB         swp b
1526   0DAE D8            push b
1527   0DAF 07 09 15      call print
1528   0DB2 51 02 00      add sp, 2
1529   0DB5             ; --- END FUNCTION CALL
1530   0DB5             ; finished = 	     1   ; 
1531   0DB5 3B F8 17      mov d, _finished ; $finished
1532   0DB8 DA            push d
1533   0DB9 FD 2E 01 00   mov32 cb, $00000001
1533   0DBD 00 00 
1534   0DBF E7            pop d
1535   0DC0 FD 43         mov [d], b
1536   0DC2 0A 09 0E      jmp _if23_exit
1537   0DC5             _if23_else:
1538   0DC5             ; if (scratchloc == loc[	    0   ]) { 
1539   0DC5             _if24_cond:
1540   0DC5 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1541   0DC8 2A            mov b, [d]
1542   0DC9 38 00 00      mov c, 0
1543   0DCC             ; --- START RELATIONAL
1544   0DCC D7            push a
1545   0DCD 11            mov a, b
1546   0DCE 3B EC 17      mov d, _loc_data ; $loc
1547   0DD1 D7            push a
1548   0DD2 DA            push d
1549   0DD3 FD 2E 00 00   mov32 cb, $00000000
1549   0DD7 00 00 
1550   0DD9 E7            pop d
1551   0DDA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1552   0DDE E4            pop a
1553   0DDF 2A            mov b, [d]
1554   0DE0 38 00 00      mov c, 0
1555   0DE3 B0            cmp a, b
1556   0DE4 FD 71         seq ; ==
1557   0DE6 E4            pop a
1558   0DE7             ; --- END RELATIONAL
1559   0DE7 C0 00 00      cmp b, 0
1560   0DEA C6 09 0E      je _if24_exit
1561   0DED             _if24_TRUE:
1562   0DED             ; print("OUCH! ARROW GOT YOU!\n"); 
1563   0DED             ; --- START FUNCTION CALL
1564   0DED 26 21 1F      mov b, _s50 ; "OUCH! ARROW GOT YOU!\n"
1565   0DF0 FD AB         swp b
1566   0DF2 D8            push b
1567   0DF3 07 09 15      call print
1568   0DF6 51 02 00      add sp, 2
1569   0DF9             ; --- END FUNCTION CALL
1570   0DF9             ; finished = 	2    ; 
1571   0DF9 3B F8 17      mov d, _finished ; $finished
1572   0DFC DA            push d
1573   0DFD FD 2E 02 00   mov32 cb, $00000002
1573   0E01 00 00 
1574   0E03 E7            pop d
1575   0E04 FD 43         mov [d], b
1576   0E06 0A 09 0E      jmp _if24_exit
1577   0E09             _if24_exit:
1578   0E09             _if23_exit:
1579   0E09             ; if (finished != 	     0   ) { 
1580   0E09             _if25_cond:
1581   0E09 3B F8 17      mov d, _finished ; $finished
1582   0E0C 2A            mov b, [d]
1583   0E0D 38 00 00      mov c, 0
1584   0E10             ; --- START RELATIONAL
1585   0E10 D7            push a
1586   0E11 11            mov a, b
1587   0E12 FD 2E 00 00   mov32 cb, $00000000
1587   0E16 00 00 
1588   0E18 B0            cmp a, b
1589   0E19 FD 72         sneq ; !=
1590   0E1B E4            pop a
1591   0E1C             ; --- END RELATIONAL
1592   0E1C C0 00 00      cmp b, 0
1593   0E1F C6 27 0E      je _if25_exit
1594   0E22             _if25_TRUE:
1595   0E22             ; return; 
1596   0E22 F9            leave
1597   0E23 09            ret
1598   0E24 0A 27 0E      jmp _if25_exit
1599   0E27             _if25_exit:
1600   0E27             _for17_update:
1601   0E27 FA F1 FF      lea d, [bp + -15] ; $k
1602   0E2A 2A            mov b, [d]
1603   0E2B 38 00 00      mov c, 0
1604   0E2E 11            mov a, b
1605   0E2F FD 77         inc b
1606   0E31 FA F1 FF      lea d, [bp + -15] ; $k
1607   0E34 FD 43         mov [d], b
1608   0E36 27            mov b, a
1609   0E37 0A 41 0C      jmp _for17_cond
1610   0E3A             _for17_exit:
1611   0E3A             ; print("MISSED\n"); 
1612   0E3A             ; --- START FUNCTION CALL
1613   0E3A 26 37 1F      mov b, _s51 ; "MISSED\n"
1614   0E3D FD AB         swp b
1615   0E3F D8            push b
1616   0E40 07 09 15      call print
1617   0E43 51 02 00      add sp, 2
1618   0E46             ; --- END FUNCTION CALL
1619   0E46             ; move_wumpus(); 
1620   0E46             ; --- START FUNCTION CALL
1621   0E46 07 E9 09      call move_wumpus
1622   0E49             ; if (--arrows <= 0) { 
1623   0E49             _if26_cond:
1624   0E49 3B E4 17      mov d, _arrows ; $arrows
1625   0E4C 2A            mov b, [d]
1626   0E4D FD 7D         dec b
1627   0E4F 3B E4 17      mov d, _arrows ; $arrows
1628   0E52 FD 43         mov [d], b
1629   0E54             ; --- START RELATIONAL
1630   0E54 D7            push a
1631   0E55 11            mov a, b
1632   0E56 FD 2E 00 00   mov32 cb, $00000000
1632   0E5A 00 00 
1633   0E5C B0            cmp a, b
1634   0E5D FD 74         sle ; <= (signed)
1635   0E5F E4            pop a
1636   0E60             ; --- END RELATIONAL
1637   0E60 C0 00 00      cmp b, 0
1638   0E63 C6 76 0E      je _if26_exit
1639   0E66             _if26_TRUE:
1640   0E66             ; finished = 	2    ; 
1641   0E66 3B F8 17      mov d, _finished ; $finished
1642   0E69 DA            push d
1643   0E6A FD 2E 02 00   mov32 cb, $00000002
1643   0E6E 00 00 
1644   0E70 E7            pop d
1645   0E71 FD 43         mov [d], b
1646   0E73 0A 76 0E      jmp _if26_exit
1647   0E76             _if26_exit:
1648   0E76 F9            leave
1649   0E77 09            ret
1650   0E78             
1651   0E78             move:
1652   0E78 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1653   0E7B             ; int scratchloc; 
1654   0E7B 52 02 00      sub sp, 2
1655   0E7E             ; scratchloc = -1; 
1656   0E7E FA FF FF      lea d, [bp + -1] ; $scratchloc
1657   0E81 DA            push d
1658   0E82 FD 2E FF FF   mov32 cb, $ffffffff
1658   0E86 FF FF 
1659   0E88 E7            pop d
1660   0E89 FD 43         mov [d], b
1661   0E8B             ; while (scratchloc == -1) { 
1662   0E8B             _while27_cond:
1663   0E8B FA FF FF      lea d, [bp + -1] ; $scratchloc
1664   0E8E 2A            mov b, [d]
1665   0E8F 38 00 00      mov c, 0
1666   0E92             ; --- START RELATIONAL
1667   0E92 D7            push a
1668   0E93 11            mov a, b
1669   0E94 FD 2E FF FF   mov32 cb, $ffffffff
1669   0E98 FF FF 
1670   0E9A B0            cmp a, b
1671   0E9B FD 71         seq ; ==
1672   0E9D E4            pop a
1673   0E9E             ; --- END RELATIONAL
1674   0E9E C0 00 00      cmp b, 0
1675   0EA1 C6 12 10      je _while27_exit
1676   0EA4             _while27_block:
1677   0EA4             ; scratchloc = getnum("\nWHERE TO: ")- 1; 
1678   0EA4 FA FF FF      lea d, [bp + -1] ; $scratchloc
1679   0EA7 DA            push d
1680   0EA8             ; --- START FUNCTION CALL
1681   0EA8 26 3F 1F      mov b, _s52 ; "\nWHERE TO: "
1682   0EAB FD AB         swp b
1683   0EAD D8            push b
1684   0EAE 07 6A 04      call getnum
1685   0EB1 51 02 00      add sp, 2
1686   0EB4             ; --- END FUNCTION CALL
1687   0EB4             ; --- START TERMS
1688   0EB4 D7            push a
1689   0EB5 11            mov a, b
1690   0EB6 FD 2E 01 00   mov32 cb, $00000001
1690   0EBA 00 00 
1691   0EBC 60            sub a, b
1692   0EBD 27            mov b, a
1693   0EBE E4            pop a
1694   0EBF             ; --- END TERMS
1695   0EBF E7            pop d
1696   0EC0 FD 43         mov [d], b
1697   0EC2             ; if (scratchloc < 0 || scratchloc > 19) { 
1698   0EC2             _if28_cond:
1699   0EC2 FA FF FF      lea d, [bp + -1] ; $scratchloc
1700   0EC5 2A            mov b, [d]
1701   0EC6 38 00 00      mov c, 0
1702   0EC9             ; --- START RELATIONAL
1703   0EC9 D7            push a
1704   0ECA 11            mov a, b
1705   0ECB FD 2E 00 00   mov32 cb, $00000000
1705   0ECF 00 00 
1706   0ED1 B0            cmp a, b
1707   0ED2 FD 73         slt ; < (signed)
1708   0ED4 E4            pop a
1709   0ED5             ; --- END RELATIONAL
1710   0ED5             ; --- START LOGICAL OR
1711   0ED5 D7            push a
1712   0ED6 11            mov a, b
1713   0ED7 FA FF FF      lea d, [bp + -1] ; $scratchloc
1714   0EDA 2A            mov b, [d]
1715   0EDB 38 00 00      mov c, 0
1716   0EDE             ; --- START RELATIONAL
1717   0EDE D7            push a
1718   0EDF 11            mov a, b
1719   0EE0 FD 2E 13 00   mov32 cb, $00000013
1719   0EE4 00 00 
1720   0EE6 B0            cmp a, b
1721   0EE7 FD 7F         sgt ; >
1722   0EE9 E4            pop a
1723   0EEA             ; --- END RELATIONAL
1724   0EEA FD A8         sor a, b ; ||
1725   0EEC E4            pop a
1726   0EED             ; --- END LOGICAL OR
1727   0EED C0 00 00      cmp b, 0
1728   0EF0 C6 06 0F      je _if28_exit
1729   0EF3             _if28_TRUE:
1730   0EF3             ; scratchloc = -1; 
1731   0EF3 FA FF FF      lea d, [bp + -1] ; $scratchloc
1732   0EF6 DA            push d
1733   0EF7 FD 2E FF FF   mov32 cb, $ffffffff
1733   0EFB FF FF 
1734   0EFD E7            pop d
1735   0EFE FD 43         mov [d], b
1736   0F00             ; continue; 
1737   0F00 0A 8B 0E      jmp _while27_cond ; while continue
1738   0F03 0A 06 0F      jmp _if28_exit
1739   0F06             _if28_exit:
1740   0F06             ; if ((cave[loc[	    0   ]][0] != scratchloc) & 
1741   0F06             _if29_cond:
1742   0F06 3B FA 17      mov d, _cave_data ; $cave
1743   0F09 D7            push a
1744   0F0A DA            push d
1745   0F0B 3B EC 17      mov d, _loc_data ; $loc
1746   0F0E D7            push a
1747   0F0F DA            push d
1748   0F10 FD 2E 00 00   mov32 cb, $00000000
1748   0F14 00 00 
1749   0F16 E7            pop d
1750   0F17 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1751   0F1B E4            pop a
1752   0F1C 2A            mov b, [d]
1753   0F1D 38 00 00      mov c, 0
1754   0F20 E7            pop d
1755   0F21 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1756   0F25 DA            push d
1757   0F26 FD 2E 00 00   mov32 cb, $00000000
1757   0F2A 00 00 
1758   0F2C E7            pop d
1759   0F2D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1760   0F31 E4            pop a
1761   0F32 2A            mov b, [d]
1762   0F33 38 00 00      mov c, 0
1763   0F36             ; --- START RELATIONAL
1764   0F36 D7            push a
1765   0F37 11            mov a, b
1766   0F38 FA FF FF      lea d, [bp + -1] ; $scratchloc
1767   0F3B 2A            mov b, [d]
1768   0F3C 38 00 00      mov c, 0
1769   0F3F B0            cmp a, b
1770   0F40 FD 72         sneq ; !=
1771   0F42 E4            pop a
1772   0F43             ; --- END RELATIONAL
1773   0F43 D7            push a
1774   0F44 11            mov a, b
1775   0F45 3B FA 17      mov d, _cave_data ; $cave
1776   0F48 D7            push a
1777   0F49 DA            push d
1778   0F4A 3B EC 17      mov d, _loc_data ; $loc
1779   0F4D D7            push a
1780   0F4E DA            push d
1781   0F4F FD 2E 00 00   mov32 cb, $00000000
1781   0F53 00 00 
1782   0F55 E7            pop d
1783   0F56 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1784   0F5A E4            pop a
1785   0F5B 2A            mov b, [d]
1786   0F5C 38 00 00      mov c, 0
1787   0F5F E7            pop d
1788   0F60 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1789   0F64 DA            push d
1790   0F65 FD 2E 01 00   mov32 cb, $00000001
1790   0F69 00 00 
1791   0F6B E7            pop d
1792   0F6C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1793   0F70 E4            pop a
1794   0F71 2A            mov b, [d]
1795   0F72 38 00 00      mov c, 0
1796   0F75             ; --- START RELATIONAL
1797   0F75 D7            push a
1798   0F76 11            mov a, b
1799   0F77 FA FF FF      lea d, [bp + -1] ; $scratchloc
1800   0F7A 2A            mov b, [d]
1801   0F7B 38 00 00      mov c, 0
1802   0F7E B0            cmp a, b
1803   0F7F FD 72         sneq ; !=
1804   0F81 E4            pop a
1805   0F82             ; --- END RELATIONAL
1806   0F82 FD 92         and b, a ; &
1807   0F84 11            mov a, b
1808   0F85 3B FA 17      mov d, _cave_data ; $cave
1809   0F88 D7            push a
1810   0F89 DA            push d
1811   0F8A 3B EC 17      mov d, _loc_data ; $loc
1812   0F8D D7            push a
1813   0F8E DA            push d
1814   0F8F FD 2E 00 00   mov32 cb, $00000000
1814   0F93 00 00 
1815   0F95 E7            pop d
1816   0F96 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1817   0F9A E4            pop a
1818   0F9B 2A            mov b, [d]
1819   0F9C 38 00 00      mov c, 0
1820   0F9F E7            pop d
1821   0FA0 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1822   0FA4 DA            push d
1823   0FA5 FD 2E 02 00   mov32 cb, $00000002
1823   0FA9 00 00 
1824   0FAB E7            pop d
1825   0FAC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1826   0FB0 E4            pop a
1827   0FB1 2A            mov b, [d]
1828   0FB2 38 00 00      mov c, 0
1829   0FB5             ; --- START RELATIONAL
1830   0FB5 D7            push a
1831   0FB6 11            mov a, b
1832   0FB7 FA FF FF      lea d, [bp + -1] ; $scratchloc
1833   0FBA 2A            mov b, [d]
1834   0FBB 38 00 00      mov c, 0
1835   0FBE B0            cmp a, b
1836   0FBF FD 72         sneq ; !=
1837   0FC1 E4            pop a
1838   0FC2             ; --- END RELATIONAL
1839   0FC2 FD 92         and b, a ; &
1840   0FC4 11            mov a, b
1841   0FC5 3B EC 17      mov d, _loc_data ; $loc
1842   0FC8 D7            push a
1843   0FC9 DA            push d
1844   0FCA FD 2E 00 00   mov32 cb, $00000000
1844   0FCE 00 00 
1845   0FD0 E7            pop d
1846   0FD1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1847   0FD5 E4            pop a
1848   0FD6 2A            mov b, [d]
1849   0FD7 38 00 00      mov c, 0
1850   0FDA             ; --- START RELATIONAL
1851   0FDA D7            push a
1852   0FDB 11            mov a, b
1853   0FDC FA FF FF      lea d, [bp + -1] ; $scratchloc
1854   0FDF 2A            mov b, [d]
1855   0FE0 38 00 00      mov c, 0
1856   0FE3 B0            cmp a, b
1857   0FE4 FD 72         sneq ; !=
1858   0FE6 E4            pop a
1859   0FE7             ; --- END RELATIONAL
1860   0FE7 FD 92         and b, a ; &
1861   0FE9 E4            pop a
1862   0FEA C0 00 00      cmp b, 0
1863   0FED C6 0F 10      je _if29_exit
1864   0FF0             _if29_TRUE:
1865   0FF0             ; print("NOT POSSIBLE\n"); 
1866   0FF0             ; --- START FUNCTION CALL
1867   0FF0 26 4B 1F      mov b, _s53 ; "NOT POSSIBLE\n"
1868   0FF3 FD AB         swp b
1869   0FF5 D8            push b
1870   0FF6 07 09 15      call print
1871   0FF9 51 02 00      add sp, 2
1872   0FFC             ; --- END FUNCTION CALL
1873   0FFC             ; scratchloc = -1; 
1874   0FFC FA FF FF      lea d, [bp + -1] ; $scratchloc
1875   0FFF DA            push d
1876   1000 FD 2E FF FF   mov32 cb, $ffffffff
1876   1004 FF FF 
1877   1006 E7            pop d
1878   1007 FD 43         mov [d], b
1879   1009             ; continue; 
1880   1009 0A 8B 0E      jmp _while27_cond ; while continue
1881   100C 0A 0F 10      jmp _if29_exit
1882   100F             _if29_exit:
1883   100F 0A 8B 0E      jmp _while27_cond
1884   1012             _while27_exit:
1885   1012             ; loc[	    0   ] = scratchloc; 
1886   1012 3B EC 17      mov d, _loc_data ; $loc
1887   1015 D7            push a
1888   1016 DA            push d
1889   1017 FD 2E 00 00   mov32 cb, $00000000
1889   101B 00 00 
1890   101D E7            pop d
1891   101E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1892   1022 E4            pop a
1893   1023 DA            push d
1894   1024 FA FF FF      lea d, [bp + -1] ; $scratchloc
1895   1027 2A            mov b, [d]
1896   1028 38 00 00      mov c, 0
1897   102B E7            pop d
1898   102C FD 43         mov [d], b
1899   102E             ; while ((scratchloc == loc[	4     ]) || (scratchloc == loc[	5     ])) { 
1900   102E             _while30_cond:
1901   102E FA FF FF      lea d, [bp + -1] ; $scratchloc
1902   1031 2A            mov b, [d]
1903   1032 38 00 00      mov c, 0
1904   1035             ; --- START RELATIONAL
1905   1035 D7            push a
1906   1036 11            mov a, b
1907   1037 3B EC 17      mov d, _loc_data ; $loc
1908   103A D7            push a
1909   103B DA            push d
1910   103C FD 2E 04 00   mov32 cb, $00000004
1910   1040 00 00 
1911   1042 E7            pop d
1912   1043 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1913   1047 E4            pop a
1914   1048 2A            mov b, [d]
1915   1049 38 00 00      mov c, 0
1916   104C B0            cmp a, b
1917   104D FD 71         seq ; ==
1918   104F E4            pop a
1919   1050             ; --- END RELATIONAL
1920   1050             ; --- START LOGICAL OR
1921   1050 D7            push a
1922   1051 11            mov a, b
1923   1052 FA FF FF      lea d, [bp + -1] ; $scratchloc
1924   1055 2A            mov b, [d]
1925   1056 38 00 00      mov c, 0
1926   1059             ; --- START RELATIONAL
1927   1059 D7            push a
1928   105A 11            mov a, b
1929   105B 3B EC 17      mov d, _loc_data ; $loc
1930   105E D7            push a
1931   105F DA            push d
1932   1060 FD 2E 05 00   mov32 cb, $00000005
1932   1064 00 00 
1933   1066 E7            pop d
1934   1067 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1935   106B E4            pop a
1936   106C 2A            mov b, [d]
1937   106D 38 00 00      mov c, 0
1938   1070 B0            cmp a, b
1939   1071 FD 71         seq ; ==
1940   1073 E4            pop a
1941   1074             ; --- END RELATIONAL
1942   1074 FD A8         sor a, b ; ||
1943   1076 E4            pop a
1944   1077             ; --- END LOGICAL OR
1945   1077 C0 00 00      cmp b, 0
1946   107A C6 C3 10      je _while30_exit
1947   107D             _while30_block:
1948   107D             ; print("ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"); 
1949   107D             ; --- START FUNCTION CALL
1950   107D 26 59 1F      mov b, _s54 ; "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"
1951   1080 FD AB         swp b
1952   1082 D8            push b
1953   1083 07 09 15      call print
1954   1086 51 02 00      add sp, 2
1955   1089             ; --- END FUNCTION CALL
1956   1089             ; scratchloc = loc[	    0   ] = rand2()%20; 
1957   1089 FA FF FF      lea d, [bp + -1] ; $scratchloc
1958   108C DA            push d
1959   108D 3B EC 17      mov d, _loc_data ; $loc
1960   1090 D7            push a
1961   1091 DA            push d
1962   1092 FD 2E 00 00   mov32 cb, $00000000
1962   1096 00 00 
1963   1098 E7            pop d
1964   1099 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1965   109D E4            pop a
1966   109E DA            push d
1967   109F             ; --- START FUNCTION CALL
1968   109F 07 6A 11      call rand2
1969   10A2             ; --- START FACTORS
1970   10A2 D7            push a
1971   10A3 FD D8         push g
1972   10A5 11            mov a, b
1973   10A6 FD 7A         mov g, c
1974   10A8 FD 2E 14 00   mov32 cb, $00000014
1974   10AC 00 00 
1975   10AE FD D8         push g ; save 'g' as the div instruction uses it
1976   10B0 AE            div a, b ; %, a: quotient, b: remainder
1977   10B1 11            mov a, b
1978   10B2 FD F1         pop g
1979   10B4 FD 38         mov c, g
1980   10B6 27            mov b, a
1981   10B7 FD F1         pop g
1982   10B9 E4            pop a
1983   10BA             ; --- END FACTORS
1984   10BA E7            pop d
1985   10BB FD 43         mov [d], b
1986   10BD E7            pop d
1987   10BE FD 43         mov [d], b
1988   10C0 0A 2E 10      jmp _while30_cond
1989   10C3             _while30_exit:
1990   10C3             ; if (scratchloc == loc[	1      ]) { 
1991   10C3             _if33_cond:
1992   10C3 FA FF FF      lea d, [bp + -1] ; $scratchloc
1993   10C6 2A            mov b, [d]
1994   10C7 38 00 00      mov c, 0
1995   10CA             ; --- START RELATIONAL
1996   10CA D7            push a
1997   10CB 11            mov a, b
1998   10CC 3B EC 17      mov d, _loc_data ; $loc
1999   10CF D7            push a
2000   10D0 DA            push d
2001   10D1 FD 2E 01 00   mov32 cb, $00000001
2001   10D5 00 00 
2002   10D7 E7            pop d
2003   10D8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2004   10DC E4            pop a
2005   10DD 2A            mov b, [d]
2006   10DE 38 00 00      mov c, 0
2007   10E1 B0            cmp a, b
2008   10E2 FD 71         seq ; ==
2009   10E4 E4            pop a
2010   10E5             ; --- END RELATIONAL
2011   10E5 C0 00 00      cmp b, 0
2012   10E8 C6 FD 10      je _if33_exit
2013   10EB             _if33_TRUE:
2014   10EB             ; print("... OOPS! BUMPED A WUMPUS!\n"); 
2015   10EB             ; --- START FUNCTION CALL
2016   10EB 26 89 1F      mov b, _s55 ; "... OOPS! BUMPED A WUMPUS!\n"
2017   10EE FD AB         swp b
2018   10F0 D8            push b
2019   10F1 07 09 15      call print
2020   10F4 51 02 00      add sp, 2
2021   10F7             ; --- END FUNCTION CALL
2022   10F7             ; move_wumpus(); 
2023   10F7             ; --- START FUNCTION CALL
2024   10F7 07 E9 09      call move_wumpus
2025   10FA 0A FD 10      jmp _if33_exit
2026   10FD             _if33_exit:
2027   10FD             ; if (scratchloc == loc[	2    ] || scratchloc == loc[	3    ]) { 
2028   10FD             _if34_cond:
2029   10FD FA FF FF      lea d, [bp + -1] ; $scratchloc
2030   1100 2A            mov b, [d]
2031   1101 38 00 00      mov c, 0
2032   1104             ; --- START RELATIONAL
2033   1104 D7            push a
2034   1105 11            mov a, b
2035   1106 3B EC 17      mov d, _loc_data ; $loc
2036   1109 D7            push a
2037   110A DA            push d
2038   110B FD 2E 02 00   mov32 cb, $00000002
2038   110F 00 00 
2039   1111 E7            pop d
2040   1112 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2041   1116 E4            pop a
2042   1117 2A            mov b, [d]
2043   1118 38 00 00      mov c, 0
2044   111B B0            cmp a, b
2045   111C FD 71         seq ; ==
2046   111E E4            pop a
2047   111F             ; --- END RELATIONAL
2048   111F             ; --- START LOGICAL OR
2049   111F D7            push a
2050   1120 11            mov a, b
2051   1121 FA FF FF      lea d, [bp + -1] ; $scratchloc
2052   1124 2A            mov b, [d]
2053   1125 38 00 00      mov c, 0
2054   1128             ; --- START RELATIONAL
2055   1128 D7            push a
2056   1129 11            mov a, b
2057   112A 3B EC 17      mov d, _loc_data ; $loc
2058   112D D7            push a
2059   112E DA            push d
2060   112F FD 2E 03 00   mov32 cb, $00000003
2060   1133 00 00 
2061   1135 E7            pop d
2062   1136 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2063   113A E4            pop a
2064   113B 2A            mov b, [d]
2065   113C 38 00 00      mov c, 0
2066   113F B0            cmp a, b
2067   1140 FD 71         seq ; ==
2068   1142 E4            pop a
2069   1143             ; --- END RELATIONAL
2070   1143 FD A8         sor a, b ; ||
2071   1145 E4            pop a
2072   1146             ; --- END LOGICAL OR
2073   1146 C0 00 00      cmp b, 0
2074   1149 C6 68 11      je _if34_exit
2075   114C             _if34_TRUE:
2076   114C             ; print("YYYYIIIIEEEE . . . FELL IN PIT\n"); 
2077   114C             ; --- START FUNCTION CALL
2078   114C 26 A5 1F      mov b, _s56 ; "YYYYIIIIEEEE . . . FELL IN PIT\n"
2079   114F FD AB         swp b
2080   1151 D8            push b
2081   1152 07 09 15      call print
2082   1155 51 02 00      add sp, 2
2083   1158             ; --- END FUNCTION CALL
2084   1158             ; finished = 	2    ; 
2085   1158 3B F8 17      mov d, _finished ; $finished
2086   115B DA            push d
2087   115C FD 2E 02 00   mov32 cb, $00000002
2087   1160 00 00 
2088   1162 E7            pop d
2089   1163 FD 43         mov [d], b
2090   1165 0A 68 11      jmp _if34_exit
2091   1168             _if34_exit:
2092   1168 F9            leave
2093   1169 09            ret
2094   116A             
2095   116A             rand2:
2096   116A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2097   116D             ; rand_val=rand_val+rand_inc; 
2098   116D 3B E8 17      mov d, _rand_val ; $rand_val
2099   1170 DA            push d
2100   1171 3B E8 17      mov d, _rand_val ; $rand_val
2101   1174 2A            mov b, [d]
2102   1175 38 00 00      mov c, 0
2103   1178             ; --- START TERMS
2104   1178 D7            push a
2105   1179 11            mov a, b
2106   117A 3B EA 17      mov d, _rand_inc ; $rand_inc
2107   117D 2A            mov b, [d]
2108   117E 38 00 00      mov c, 0
2109   1181 56            add b, a
2110   1182 E4            pop a
2111   1183             ; --- END TERMS
2112   1183 E7            pop d
2113   1184 FD 43         mov [d], b
2114   1186             ; rand_inc++; 
2115   1186 3B EA 17      mov d, _rand_inc ; $rand_inc
2116   1189 2A            mov b, [d]
2117   118A 38 00 00      mov c, 0
2118   118D 11            mov a, b
2119   118E FD 77         inc b
2120   1190 3B EA 17      mov d, _rand_inc ; $rand_inc
2121   1193 FD 43         mov [d], b
2122   1195 27            mov b, a
2123   1196             ; return rand_val; 
2124   1196 3B E8 17      mov d, _rand_val ; $rand_val
2125   1199 2A            mov b, [d]
2126   119A 38 00 00      mov c, 0
2127   119D F9            leave
2128   119E 09            ret
2129   119F             
2130   119F             game_setup:
2131   119F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2132   11A2             ; int j, k; 
2133   11A2 52 02 00      sub sp, 2
2134   11A5 52 02 00      sub sp, 2
2135   11A8             ; int v; 
2136   11A8 52 02 00      sub sp, 2
2137   11AB             ; for (j = 0; j < 	6    ; j++) { 
2138   11AB             _for35_init:
2139   11AB FA FF FF      lea d, [bp + -1] ; $j
2140   11AE DA            push d
2141   11AF FD 2E 00 00   mov32 cb, $00000000
2141   11B3 00 00 
2142   11B5 E7            pop d
2143   11B6 FD 43         mov [d], b
2144   11B8             _for35_cond:
2145   11B8 FA FF FF      lea d, [bp + -1] ; $j
2146   11BB 2A            mov b, [d]
2147   11BC 38 00 00      mov c, 0
2148   11BF             ; --- START RELATIONAL
2149   11BF D7            push a
2150   11C0 11            mov a, b
2151   11C1 FD 2E 06 00   mov32 cb, $00000006
2151   11C5 00 00 
2152   11C7 B0            cmp a, b
2153   11C8 FD 73         slt ; < (signed)
2154   11CA E4            pop a
2155   11CB             ; --- END RELATIONAL
2156   11CB C0 00 00      cmp b, 0
2157   11CE C6 06 13      je _for35_exit
2158   11D1             _for35_block:
2159   11D1             ; loc[j] = -1; 
2160   11D1 3B EC 17      mov d, _loc_data ; $loc
2161   11D4 D7            push a
2162   11D5 DA            push d
2163   11D6 FA FF FF      lea d, [bp + -1] ; $j
2164   11D9 2A            mov b, [d]
2165   11DA 38 00 00      mov c, 0
2166   11DD E7            pop d
2167   11DE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2168   11E2 E4            pop a
2169   11E3 DA            push d
2170   11E4 FD 2E FF FF   mov32 cb, $ffffffff
2170   11E8 FF FF 
2171   11EA E7            pop d
2172   11EB FD 43         mov [d], b
2173   11ED             ; while (loc[j] < 0) { 
2174   11ED             _while36_cond:
2175   11ED 3B EC 17      mov d, _loc_data ; $loc
2176   11F0 D7            push a
2177   11F1 DA            push d
2178   11F2 FA FF FF      lea d, [bp + -1] ; $j
2179   11F5 2A            mov b, [d]
2180   11F6 38 00 00      mov c, 0
2181   11F9 E7            pop d
2182   11FA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2183   11FE E4            pop a
2184   11FF 2A            mov b, [d]
2185   1200 38 00 00      mov c, 0
2186   1203             ; --- START RELATIONAL
2187   1203 D7            push a
2188   1204 11            mov a, b
2189   1205 FD 2E 00 00   mov32 cb, $00000000
2189   1209 00 00 
2190   120B B0            cmp a, b
2191   120C FD 73         slt ; < (signed)
2192   120E E4            pop a
2193   120F             ; --- END RELATIONAL
2194   120F C0 00 00      cmp b, 0
2195   1212 C6 F3 12      je _while36_exit
2196   1215             _while36_block:
2197   1215             ; v = rand2(); 
2198   1215 FA FB FF      lea d, [bp + -5] ; $v
2199   1218 DA            push d
2200   1219             ; --- START FUNCTION CALL
2201   1219 07 6A 11      call rand2
2202   121C E7            pop d
2203   121D FD 43         mov [d], b
2204   121F             ; loc[j] = v % 20; 
2205   121F 3B EC 17      mov d, _loc_data ; $loc
2206   1222 D7            push a
2207   1223 DA            push d
2208   1224 FA FF FF      lea d, [bp + -1] ; $j
2209   1227 2A            mov b, [d]
2210   1228 38 00 00      mov c, 0
2211   122B E7            pop d
2212   122C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2213   1230 E4            pop a
2214   1231 DA            push d
2215   1232 FA FB FF      lea d, [bp + -5] ; $v
2216   1235 2A            mov b, [d]
2217   1236 38 00 00      mov c, 0
2218   1239             ; --- START FACTORS
2219   1239 D7            push a
2220   123A FD D8         push g
2221   123C 11            mov a, b
2222   123D FD 7A         mov g, c
2223   123F FD 2E 14 00   mov32 cb, $00000014
2223   1243 00 00 
2224   1245 FD D8         push g ; save 'g' as the div instruction uses it
2225   1247 AE            div a, b ; %, a: quotient, b: remainder
2226   1248 11            mov a, b
2227   1249 FD F1         pop g
2228   124B FD 38         mov c, g
2229   124D 27            mov b, a
2230   124E FD F1         pop g
2231   1250 E4            pop a
2232   1251             ; --- END FACTORS
2233   1251 E7            pop d
2234   1252 FD 43         mov [d], b
2235   1254             ; for (k=0; k < j - 1; k++) { 
2236   1254             _for39_init:
2237   1254 FA FD FF      lea d, [bp + -3] ; $k
2238   1257 DA            push d
2239   1258 FD 2E 00 00   mov32 cb, $00000000
2239   125C 00 00 
2240   125E E7            pop d
2241   125F FD 43         mov [d], b
2242   1261             _for39_cond:
2243   1261 FA FD FF      lea d, [bp + -3] ; $k
2244   1264 2A            mov b, [d]
2245   1265 38 00 00      mov c, 0
2246   1268             ; --- START RELATIONAL
2247   1268 D7            push a
2248   1269 11            mov a, b
2249   126A FA FF FF      lea d, [bp + -1] ; $j
2250   126D 2A            mov b, [d]
2251   126E 38 00 00      mov c, 0
2252   1271             ; --- START TERMS
2253   1271 D7            push a
2254   1272 11            mov a, b
2255   1273 FD 2E 01 00   mov32 cb, $00000001
2255   1277 00 00 
2256   1279 60            sub a, b
2257   127A 27            mov b, a
2258   127B E4            pop a
2259   127C             ; --- END TERMS
2260   127C B0            cmp a, b
2261   127D FD 73         slt ; < (signed)
2262   127F E4            pop a
2263   1280             ; --- END RELATIONAL
2264   1280 C0 00 00      cmp b, 0
2265   1283 C6 F0 12      je _for39_exit
2266   1286             _for39_block:
2267   1286             ; if (loc[j] == loc[k]) { 
2268   1286             _if40_cond:
2269   1286 3B EC 17      mov d, _loc_data ; $loc
2270   1289 D7            push a
2271   128A DA            push d
2272   128B FA FF FF      lea d, [bp + -1] ; $j
2273   128E 2A            mov b, [d]
2274   128F 38 00 00      mov c, 0
2275   1292 E7            pop d
2276   1293 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2277   1297 E4            pop a
2278   1298 2A            mov b, [d]
2279   1299 38 00 00      mov c, 0
2280   129C             ; --- START RELATIONAL
2281   129C D7            push a
2282   129D 11            mov a, b
2283   129E 3B EC 17      mov d, _loc_data ; $loc
2284   12A1 D7            push a
2285   12A2 DA            push d
2286   12A3 FA FD FF      lea d, [bp + -3] ; $k
2287   12A6 2A            mov b, [d]
2288   12A7 38 00 00      mov c, 0
2289   12AA E7            pop d
2290   12AB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2291   12AF E4            pop a
2292   12B0 2A            mov b, [d]
2293   12B1 38 00 00      mov c, 0
2294   12B4 B0            cmp a, b
2295   12B5 FD 71         seq ; ==
2296   12B7 E4            pop a
2297   12B8             ; --- END RELATIONAL
2298   12B8 C0 00 00      cmp b, 0
2299   12BB C6 DD 12      je _if40_exit
2300   12BE             _if40_TRUE:
2301   12BE             ; loc[j] = -1; 
2302   12BE 3B EC 17      mov d, _loc_data ; $loc
2303   12C1 D7            push a
2304   12C2 DA            push d
2305   12C3 FA FF FF      lea d, [bp + -1] ; $j
2306   12C6 2A            mov b, [d]
2307   12C7 38 00 00      mov c, 0
2308   12CA E7            pop d
2309   12CB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2310   12CF E4            pop a
2311   12D0 DA            push d
2312   12D1 FD 2E FF FF   mov32 cb, $ffffffff
2312   12D5 FF FF 
2313   12D7 E7            pop d
2314   12D8 FD 43         mov [d], b
2315   12DA 0A DD 12      jmp _if40_exit
2316   12DD             _if40_exit:
2317   12DD             _for39_update:
2318   12DD FA FD FF      lea d, [bp + -3] ; $k
2319   12E0 2A            mov b, [d]
2320   12E1 38 00 00      mov c, 0
2321   12E4 11            mov a, b
2322   12E5 FD 77         inc b
2323   12E7 FA FD FF      lea d, [bp + -3] ; $k
2324   12EA FD 43         mov [d], b
2325   12EC 27            mov b, a
2326   12ED 0A 61 12      jmp _for39_cond
2327   12F0             _for39_exit:
2328   12F0 0A ED 11      jmp _while36_cond
2329   12F3             _while36_exit:
2330   12F3             _for35_update:
2331   12F3 FA FF FF      lea d, [bp + -1] ; $j
2332   12F6 2A            mov b, [d]
2333   12F7 38 00 00      mov c, 0
2334   12FA 11            mov a, b
2335   12FB FD 77         inc b
2336   12FD FA FF FF      lea d, [bp + -1] ; $j
2337   1300 FD 43         mov [d], b
2338   1302 27            mov b, a
2339   1303 0A B8 11      jmp _for35_cond
2340   1306             _for35_exit:
2341   1306 F9            leave
2342   1307 09            ret
2343   1308             
2344   1308             game_play:
2345   1308 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2346   130B             ; arrows = 5; 
2347   130B 3B E4 17      mov d, _arrows ; $arrows
2348   130E DA            push d
2349   130F FD 2E 05 00   mov32 cb, $00000005
2349   1313 00 00 
2350   1315 E7            pop d
2351   1316 FD 43         mov [d], b
2352   1318             ; print("HUNT THE WUMPUS\n"); 
2353   1318             ; --- START FUNCTION CALL
2354   1318 26 C5 1F      mov b, _s57 ; "HUNT THE WUMPUS\n"
2355   131B FD AB         swp b
2356   131D D8            push b
2357   131E 07 09 15      call print
2358   1321 51 02 00      add sp, 2
2359   1324             ; --- END FUNCTION CALL
2360   1324             ; if (debug) { 
2361   1324             _if41_cond:
2362   1324 3B E6 17      mov d, _debug ; $debug
2363   1327 2A            mov b, [d]
2364   1328 38 00 00      mov c, 0
2365   132B C0 00 00      cmp b, 0
2366   132E C6 38 14      je _if41_exit
2367   1331             _if41_TRUE:
2368   1331             ; print("Wumpus is at "); print_unsigned(loc[	1      ]+1); 
2369   1331             ; --- START FUNCTION CALL
2370   1331 26 D6 1F      mov b, _s58 ; "Wumpus is at "
2371   1334 FD AB         swp b
2372   1336 D8            push b
2373   1337 07 09 15      call print
2374   133A 51 02 00      add sp, 2
2375   133D             ; --- END FUNCTION CALL
2376   133D             ; print_unsigned(loc[	1      ]+1); 
2377   133D             ; --- START FUNCTION CALL
2378   133D 3B EC 17      mov d, _loc_data ; $loc
2379   1340 D7            push a
2380   1341 DA            push d
2381   1342 FD 2E 01 00   mov32 cb, $00000001
2381   1346 00 00 
2382   1348 E7            pop d
2383   1349 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2384   134D E4            pop a
2385   134E 2A            mov b, [d]
2386   134F 38 00 00      mov c, 0
2387   1352             ; --- START TERMS
2388   1352 D7            push a
2389   1353 11            mov a, b
2390   1354 FD 2E 01 00   mov32 cb, $00000001
2390   1358 00 00 
2391   135A 56            add b, a
2392   135B E4            pop a
2393   135C             ; --- END TERMS
2394   135C FD AB         swp b
2395   135E D8            push b
2396   135F 07 A2 15      call print_unsigned
2397   1362 51 02 00      add sp, 2
2398   1365             ; --- END FUNCTION CALL
2399   1365             ; print(", pits at "); print_unsigned(loc[	2    ]+1); 
2400   1365             ; --- START FUNCTION CALL
2401   1365 26 E4 1F      mov b, _s59 ; ", pits at "
2402   1368 FD AB         swp b
2403   136A D8            push b
2404   136B 07 09 15      call print
2405   136E 51 02 00      add sp, 2
2406   1371             ; --- END FUNCTION CALL
2407   1371             ; print_unsigned(loc[	2    ]+1); 
2408   1371             ; --- START FUNCTION CALL
2409   1371 3B EC 17      mov d, _loc_data ; $loc
2410   1374 D7            push a
2411   1375 DA            push d
2412   1376 FD 2E 02 00   mov32 cb, $00000002
2412   137A 00 00 
2413   137C E7            pop d
2414   137D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2415   1381 E4            pop a
2416   1382 2A            mov b, [d]
2417   1383 38 00 00      mov c, 0
2418   1386             ; --- START TERMS
2419   1386 D7            push a
2420   1387 11            mov a, b
2421   1388 FD 2E 01 00   mov32 cb, $00000001
2421   138C 00 00 
2422   138E 56            add b, a
2423   138F E4            pop a
2424   1390             ; --- END TERMS
2425   1390 FD AB         swp b
2426   1392 D8            push b
2427   1393 07 A2 15      call print_unsigned
2428   1396 51 02 00      add sp, 2
2429   1399             ; --- END FUNCTION CALL
2430   1399             ; print(" & "); print_unsigned(loc[	3    ]+1); 
2431   1399             ; --- START FUNCTION CALL
2432   1399 26 EF 1F      mov b, _s60 ; " & "
2433   139C FD AB         swp b
2434   139E D8            push b
2435   139F 07 09 15      call print
2436   13A2 51 02 00      add sp, 2
2437   13A5             ; --- END FUNCTION CALL
2438   13A5             ; print_unsigned(loc[	3    ]+1); 
2439   13A5             ; --- START FUNCTION CALL
2440   13A5 3B EC 17      mov d, _loc_data ; $loc
2441   13A8 D7            push a
2442   13A9 DA            push d
2443   13AA FD 2E 03 00   mov32 cb, $00000003
2443   13AE 00 00 
2444   13B0 E7            pop d
2445   13B1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2446   13B5 E4            pop a
2447   13B6 2A            mov b, [d]
2448   13B7 38 00 00      mov c, 0
2449   13BA             ; --- START TERMS
2450   13BA D7            push a
2451   13BB 11            mov a, b
2452   13BC FD 2E 01 00   mov32 cb, $00000001
2452   13C0 00 00 
2453   13C2 56            add b, a
2454   13C3 E4            pop a
2455   13C4             ; --- END TERMS
2456   13C4 FD AB         swp b
2457   13C6 D8            push b
2458   13C7 07 A2 15      call print_unsigned
2459   13CA 51 02 00      add sp, 2
2460   13CD             ; --- END FUNCTION CALL
2461   13CD             ; print(", bats at "); print_unsigned(loc[	4     ]+1); 
2462   13CD             ; --- START FUNCTION CALL
2463   13CD 26 F3 1F      mov b, _s61 ; ", bats at "
2464   13D0 FD AB         swp b
2465   13D2 D8            push b
2466   13D3 07 09 15      call print
2467   13D6 51 02 00      add sp, 2
2468   13D9             ; --- END FUNCTION CALL
2469   13D9             ; print_unsigned(loc[	4     ]+1); 
2470   13D9             ; --- START FUNCTION CALL
2471   13D9 3B EC 17      mov d, _loc_data ; $loc
2472   13DC D7            push a
2473   13DD DA            push d
2474   13DE FD 2E 04 00   mov32 cb, $00000004
2474   13E2 00 00 
2475   13E4 E7            pop d
2476   13E5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2477   13E9 E4            pop a
2478   13EA 2A            mov b, [d]
2479   13EB 38 00 00      mov c, 0
2480   13EE             ; --- START TERMS
2481   13EE D7            push a
2482   13EF 11            mov a, b
2483   13F0 FD 2E 01 00   mov32 cb, $00000001
2483   13F4 00 00 
2484   13F6 56            add b, a
2485   13F7 E4            pop a
2486   13F8             ; --- END TERMS
2487   13F8 FD AB         swp b
2488   13FA D8            push b
2489   13FB 07 A2 15      call print_unsigned
2490   13FE 51 02 00      add sp, 2
2491   1401             ; --- END FUNCTION CALL
2492   1401             ; print(" & "); print_unsigned(loc[	5     ]+1); 
2493   1401             ; --- START FUNCTION CALL
2494   1401 26 EF 1F      mov b, _s60 ; " & "
2495   1404 FD AB         swp b
2496   1406 D8            push b
2497   1407 07 09 15      call print
2498   140A 51 02 00      add sp, 2
2499   140D             ; --- END FUNCTION CALL
2500   140D             ; print_unsigned(loc[	5     ]+1); 
2501   140D             ; --- START FUNCTION CALL
2502   140D 3B EC 17      mov d, _loc_data ; $loc
2503   1410 D7            push a
2504   1411 DA            push d
2505   1412 FD 2E 05 00   mov32 cb, $00000005
2505   1416 00 00 
2506   1418 E7            pop d
2507   1419 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2508   141D E4            pop a
2509   141E 2A            mov b, [d]
2510   141F 38 00 00      mov c, 0
2511   1422             ; --- START TERMS
2512   1422 D7            push a
2513   1423 11            mov a, b
2514   1424 FD 2E 01 00   mov32 cb, $00000001
2514   1428 00 00 
2515   142A 56            add b, a
2516   142B E4            pop a
2517   142C             ; --- END TERMS
2518   142C FD AB         swp b
2519   142E D8            push b
2520   142F 07 A2 15      call print_unsigned
2521   1432 51 02 00      add sp, 2
2522   1435             ; --- END FUNCTION CALL
2523   1435 0A 38 14      jmp _if41_exit
2524   1438             _if41_exit:
2525   1438             ; finished = 	     0   ; 
2526   1438 3B F8 17      mov d, _finished ; $finished
2527   143B DA            push d
2528   143C FD 2E 00 00   mov32 cb, $00000000
2528   1440 00 00 
2529   1442 E7            pop d
2530   1443 FD 43         mov [d], b
2531   1445             ; while (finished == 	     0   ) { 
2532   1445             _while42_cond:
2533   1445 3B F8 17      mov d, _finished ; $finished
2534   1448 2A            mov b, [d]
2535   1449 38 00 00      mov c, 0
2536   144C             ; --- START RELATIONAL
2537   144C D7            push a
2538   144D 11            mov a, b
2539   144E FD 2E 00 00   mov32 cb, $00000000
2539   1452 00 00 
2540   1454 B0            cmp a, b
2541   1455 FD 71         seq ; ==
2542   1457 E4            pop a
2543   1458             ; --- END RELATIONAL
2544   1458 C0 00 00      cmp b, 0
2545   145B C6 76 14      je _while42_exit
2546   145E             _while42_block:
2547   145E             ; show_room(); 
2548   145E             ; --- START FUNCTION CALL
2549   145E 07 B1 06      call show_room
2550   1461             ; if (move_or_shoot()) { 
2551   1461             _if43_cond:
2552   1461             ; --- START FUNCTION CALL
2553   1461 07 65 09      call move_or_shoot
2554   1464 C0 00 00      cmp b, 0
2555   1467 C6 70 14      je _if43_else
2556   146A             _if43_TRUE:
2557   146A             ; shoot(); 
2558   146A             ; --- START FUNCTION CALL
2559   146A 07 C7 0A      call shoot
2560   146D 0A 73 14      jmp _if43_exit
2561   1470             _if43_else:
2562   1470             ; move(); 
2563   1470             ; --- START FUNCTION CALL
2564   1470 07 78 0E      call move
2565   1473             _if43_exit:
2566   1473 0A 45 14      jmp _while42_cond
2567   1476             _while42_exit:
2568   1476             ; if (finished == 	     1   ) { 
2569   1476             _if44_cond:
2570   1476 3B F8 17      mov d, _finished ; $finished
2571   1479 2A            mov b, [d]
2572   147A 38 00 00      mov c, 0
2573   147D             ; --- START RELATIONAL
2574   147D D7            push a
2575   147E 11            mov a, b
2576   147F FD 2E 01 00   mov32 cb, $00000001
2576   1483 00 00 
2577   1485 B0            cmp a, b
2578   1486 FD 71         seq ; ==
2579   1488 E4            pop a
2580   1489             ; --- END RELATIONAL
2581   1489 C0 00 00      cmp b, 0
2582   148C C6 9E 14      je _if44_exit
2583   148F             _if44_TRUE:
2584   148F             ; print("HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n"); 
2585   148F             ; --- START FUNCTION CALL
2586   148F 26 FE 1F      mov b, _s62 ; "HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n"
2587   1492 FD AB         swp b
2588   1494 D8            push b
2589   1495 07 09 15      call print
2590   1498 51 02 00      add sp, 2
2591   149B             ; --- END FUNCTION CALL
2592   149B 0A 9E 14      jmp _if44_exit
2593   149E             _if44_exit:
2594   149E             ; if (finished == 	2    ) { 
2595   149E             _if45_cond:
2596   149E 3B F8 17      mov d, _finished ; $finished
2597   14A1 2A            mov b, [d]
2598   14A2 38 00 00      mov c, 0
2599   14A5             ; --- START RELATIONAL
2600   14A5 D7            push a
2601   14A6 11            mov a, b
2602   14A7 FD 2E 02 00   mov32 cb, $00000002
2602   14AB 00 00 
2603   14AD B0            cmp a, b
2604   14AE FD 71         seq ; ==
2605   14B0 E4            pop a
2606   14B1             ; --- END RELATIONAL
2607   14B1 C0 00 00      cmp b, 0
2608   14B4 C6 C6 14      je _if45_exit
2609   14B7             _if45_TRUE:
2610   14B7             ; print("HA HA HA - YOU LOSE!\n"); 
2611   14B7             ; --- START FUNCTION CALL
2612   14B7 26 2E 20      mov b, _s63 ; "HA HA HA - YOU LOSE!\n"
2613   14BA FD AB         swp b
2614   14BC D8            push b
2615   14BD 07 09 15      call print
2616   14C0 51 02 00      add sp, 2
2617   14C3             ; --- END FUNCTION CALL
2618   14C3 0A C6 14      jmp _if45_exit
2619   14C6             _if45_exit:
2620   14C6             ; int c; 
2621   14C6 52 02 00      sub sp, 2
2622   14C9             ; c = getlet("NEW GAME (Y-N): "); 
2623   14C9 FA FF FF      lea d, [bp + -1] ; $c
2624   14CC DA            push d
2625   14CD             ; --- START FUNCTION CALL
2626   14CD 26 8B 18      mov b, _s1 ; "NEW GAME (Y-N): "
2627   14D0 FD AB         swp b
2628   14D2 D8            push b
2629   14D3 07 93 04      call getlet
2630   14D6 51 02 00      add sp, 2
2631   14D9             ; --- END FUNCTION CALL
2632   14D9 E7            pop d
2633   14DA FD 43         mov [d], b
2634   14DC             ; if (c == 'N') { 
2635   14DC             _if46_cond:
2636   14DC FA FF FF      lea d, [bp + -1] ; $c
2637   14DF 2A            mov b, [d]
2638   14E0 38 00 00      mov c, 0
2639   14E3             ; --- START RELATIONAL
2640   14E3 D7            push a
2641   14E4 11            mov a, b
2642   14E5 FD 2E 4E 00   mov32 cb, $0000004e
2642   14E9 00 00 
2643   14EB B0            cmp a, b
2644   14EC FD 71         seq ; ==
2645   14EE E4            pop a
2646   14EF             ; --- END RELATIONAL
2647   14EF C0 00 00      cmp b, 0
2648   14F2 C6 07 15      je _if46_exit
2649   14F5             _if46_TRUE:
2650   14F5             ; exit(1); 
2651   14F5             ; --- START FUNCTION CALL
2652   14F5 FD 2E 01 00   mov32 cb, $00000001
2652   14F9 00 00 
2653   14FB FD AB         swp b
2654   14FD D8            push b
2655   14FE 07 D9 17      call exit
2656   1501 51 02 00      add sp, 2
2657   1504             ; --- END FUNCTION CALL
2658   1504 0A 07 15      jmp _if46_exit
2659   1507             _if46_exit:
2660   1507 F9            leave
2661   1508 09            ret
2662   1509             
2663   1509             print:
2664   1509 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2665   150C             ; --- BEGIN INLINE ASM SEGMENT
2666   150C FA 05 00      lea d, [bp + 5] ; $s
2667   150F FD 2A         mov d, [d]
2668   1511             _puts_L1_print:
2669   1511 1E            mov al, [d]
2670   1512 B9 00         cmp al, 0
2671   1514 C6 20 15      jz _puts_END_print
2672   1517 23            mov ah, al
2673   1518 19 00         mov al, 0
2674   151A 05 03         syscall sys_io
2675   151C 79            inc d
2676   151D 0A 11 15      jmp _puts_L1_print
2677   1520             _puts_END_print:
2678   1520             ; --- END INLINE ASM SEGMENT
2679   1520 F9            leave
2680   1521 09            ret
2681   1522             
2682   1522             getchar:
2683   1522 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2684   1525             ; char c; 
2685   1525 52 01 00      sub sp, 1
2686   1528             ; --- BEGIN INLINE ASM SEGMENT
2687   1528 19 01         mov al, 1
2688   152A 05 03         syscall sys_io      ; receive in AH
2689   152C 1A            mov al, ah
2690   152D FA 00 00      lea d, [bp + 0] ; $c
2691   1530 3E            mov [d], al
2692   1531             ; --- END INLINE ASM SEGMENT
2693   1531             ; return c; 
2694   1531 FA 00 00      lea d, [bp + 0] ; $c
2695   1534 32            mov bl, [d]
2696   1535 A7 00         mov bh, 0
2697   1537 38 00 00      mov c, 0
2698   153A F9            leave
2699   153B 09            ret
2700   153C             
2701   153C             toupper:
2702   153C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2703   153F             ; if (ch >= 'a' && ch <= 'z')  
2704   153F             _if47_cond:
2705   153F FA 05 00      lea d, [bp + 5] ; $ch
2706   1542 32            mov bl, [d]
2707   1543 A7 00         mov bh, 0
2708   1545 38 00 00      mov c, 0
2709   1548             ; --- START RELATIONAL
2710   1548 D7            push a
2711   1549 11            mov a, b
2712   154A FD 2E 61 00   mov32 cb, $00000061
2712   154E 00 00 
2713   1550 B0            cmp a, b
2714   1551 FD 80         sge ; >=
2715   1553 E4            pop a
2716   1554             ; --- END RELATIONAL
2717   1554             ; --- START LOGICAL AND
2718   1554 D7            push a
2719   1555 11            mov a, b
2720   1556 FA 05 00      lea d, [bp + 5] ; $ch
2721   1559 32            mov bl, [d]
2722   155A A7 00         mov bh, 0
2723   155C 38 00 00      mov c, 0
2724   155F             ; --- START RELATIONAL
2725   155F D7            push a
2726   1560 11            mov a, b
2727   1561 FD 2E 7A 00   mov32 cb, $0000007a
2727   1565 00 00 
2728   1567 B0            cmp a, b
2729   1568 FD 74         sle ; <= (signed)
2730   156A E4            pop a
2731   156B             ; --- END RELATIONAL
2732   156B FD A7         sand a, b
2733   156D E4            pop a
2734   156E             ; --- END LOGICAL AND
2735   156E C0 00 00      cmp b, 0
2736   1571 C6 95 15      je _if47_else
2737   1574             _if47_TRUE:
2738   1574             ; return ch - 'a' + 'A'; 
2739   1574 FA 05 00      lea d, [bp + 5] ; $ch
2740   1577 32            mov bl, [d]
2741   1578 A7 00         mov bh, 0
2742   157A 38 00 00      mov c, 0
2743   157D             ; --- START TERMS
2744   157D D7            push a
2745   157E 11            mov a, b
2746   157F FD 2E 61 00   mov32 cb, $00000061
2746   1583 00 00 
2747   1585 60            sub a, b
2748   1586 27            mov b, a
2749   1587 11            mov a, b
2750   1588 FD 2E 41 00   mov32 cb, $00000041
2750   158C 00 00 
2751   158E 56            add b, a
2752   158F E4            pop a
2753   1590             ; --- END TERMS
2754   1590 F9            leave
2755   1591 09            ret
2756   1592 0A A0 15      jmp _if47_exit
2757   1595             _if47_else:
2758   1595             ; return ch; 
2759   1595 FA 05 00      lea d, [bp + 5] ; $ch
2760   1598 32            mov bl, [d]
2761   1599 A7 00         mov bh, 0
2762   159B 38 00 00      mov c, 0
2763   159E F9            leave
2764   159F 09            ret
2765   15A0             _if47_exit:
2766   15A0 F9            leave
2767   15A1 09            ret
2768   15A2             
2769   15A2             print_unsigned:
2770   15A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2771   15A5             ; char digits[5]; 
2772   15A5 52 05 00      sub sp, 5
2773   15A8             ; int i; 
2774   15A8 52 02 00      sub sp, 2
2775   15AB             ; i = 0; 
2776   15AB FA FA FF      lea d, [bp + -6] ; $i
2777   15AE DA            push d
2778   15AF FD 2E 00 00   mov32 cb, $00000000
2778   15B3 00 00 
2779   15B5 E7            pop d
2780   15B6 FD 43         mov [d], b
2781   15B8             ; if(num == 0){ 
2782   15B8             _if48_cond:
2783   15B8 FA 05 00      lea d, [bp + 5] ; $num
2784   15BB 2A            mov b, [d]
2785   15BC 38 00 00      mov c, 0
2786   15BF             ; --- START RELATIONAL
2787   15BF D7            push a
2788   15C0 11            mov a, b
2789   15C1 FD 2E 00 00   mov32 cb, $00000000
2789   15C5 00 00 
2790   15C7 B0            cmp a, b
2791   15C8 FD 71         seq ; ==
2792   15CA E4            pop a
2793   15CB             ; --- END RELATIONAL
2794   15CB C0 00 00      cmp b, 0
2795   15CE C6 E3 15      je _if48_exit
2796   15D1             _if48_TRUE:
2797   15D1             ; putchar('0'); 
2798   15D1             ; --- START FUNCTION CALL
2799   15D1 FD 2E 30 00   mov32 cb, $00000030
2799   15D5 00 00 
2800   15D7 DD            push bl
2801   15D8 07 BA 16      call putchar
2802   15DB 51 01 00      add sp, 1
2803   15DE             ; --- END FUNCTION CALL
2804   15DE             ; return; 
2805   15DE F9            leave
2806   15DF 09            ret
2807   15E0 0A E3 15      jmp _if48_exit
2808   15E3             _if48_exit:
2809   15E3             ; while (num > 0) { 
2810   15E3             _while49_cond:
2811   15E3 FA 05 00      lea d, [bp + 5] ; $num
2812   15E6 2A            mov b, [d]
2813   15E7 38 00 00      mov c, 0
2814   15EA             ; --- START RELATIONAL
2815   15EA D7            push a
2816   15EB 11            mov a, b
2817   15EC FD 2E 00 00   mov32 cb, $00000000
2817   15F0 00 00 
2818   15F2 B0            cmp a, b
2819   15F3 FD 81         sgu ; > (unsigned)
2820   15F5 E4            pop a
2821   15F6             ; --- END RELATIONAL
2822   15F6 C0 00 00      cmp b, 0
2823   15F9 C6 70 16      je _while49_exit
2824   15FC             _while49_block:
2825   15FC             ; digits[i] = '0' + (num % 10); 
2826   15FC FA FC FF      lea d, [bp + -4] ; $digits
2827   15FF D7            push a
2828   1600 DA            push d
2829   1601 FA FA FF      lea d, [bp + -6] ; $i
2830   1604 2A            mov b, [d]
2831   1605 38 00 00      mov c, 0
2832   1608 E7            pop d
2833   1609 5A            add d, b
2834   160A E4            pop a
2835   160B DA            push d
2836   160C FD 2E 30 00   mov32 cb, $00000030
2836   1610 00 00 
2837   1612             ; --- START TERMS
2838   1612 D7            push a
2839   1613 11            mov a, b
2840   1614 FA 05 00      lea d, [bp + 5] ; $num
2841   1617 2A            mov b, [d]
2842   1618 38 00 00      mov c, 0
2843   161B             ; --- START FACTORS
2844   161B D7            push a
2845   161C FD D8         push g
2846   161E 11            mov a, b
2847   161F FD 7A         mov g, c
2848   1621 FD 2E 0A 00   mov32 cb, $0000000a
2848   1625 00 00 
2849   1627 FD D8         push g ; save 'g' as the div instruction uses it
2850   1629 AE            div a, b ; %, a: quotient, b: remainder
2851   162A 11            mov a, b
2852   162B FD F1         pop g
2853   162D FD 38         mov c, g
2854   162F 27            mov b, a
2855   1630 FD F1         pop g
2856   1632 E4            pop a
2857   1633             ; --- END FACTORS
2858   1633 56            add b, a
2859   1634 E4            pop a
2860   1635             ; --- END TERMS
2861   1635 E7            pop d
2862   1636 FD 3E         mov [d], bl
2863   1638             ; num = num / 10; 
2864   1638 FA 05 00      lea d, [bp + 5] ; $num
2865   163B DA            push d
2866   163C FA 05 00      lea d, [bp + 5] ; $num
2867   163F 2A            mov b, [d]
2868   1640 38 00 00      mov c, 0
2869   1643             ; --- START FACTORS
2870   1643 D7            push a
2871   1644 FD D8         push g
2872   1646 11            mov a, b
2873   1647 FD 7A         mov g, c
2874   1649 FD 2E 0A 00   mov32 cb, $0000000a
2874   164D 00 00 
2875   164F FD D8         push g ; save 'g' as the div instruction uses it
2876   1651 AE            div a, b ; /, a: quotient, b: remainder
2877   1652 FD F1         pop g
2878   1654 FD 38         mov c, g
2879   1656 27            mov b, a
2880   1657 FD F1         pop g
2881   1659 E4            pop a
2882   165A             ; --- END FACTORS
2883   165A E7            pop d
2884   165B FD 43         mov [d], b
2885   165D             ; i++; 
2886   165D FA FA FF      lea d, [bp + -6] ; $i
2887   1660 2A            mov b, [d]
2888   1661 38 00 00      mov c, 0
2889   1664 11            mov a, b
2890   1665 FD 77         inc b
2891   1667 FA FA FF      lea d, [bp + -6] ; $i
2892   166A FD 43         mov [d], b
2893   166C 27            mov b, a
2894   166D 0A E3 15      jmp _while49_cond
2895   1670             _while49_exit:
2896   1670             ; while (i > 0) { 
2897   1670             _while56_cond:
2898   1670 FA FA FF      lea d, [bp + -6] ; $i
2899   1673 2A            mov b, [d]
2900   1674 38 00 00      mov c, 0
2901   1677             ; --- START RELATIONAL
2902   1677 D7            push a
2903   1678 11            mov a, b
2904   1679 FD 2E 00 00   mov32 cb, $00000000
2904   167D 00 00 
2905   167F B0            cmp a, b
2906   1680 FD 7F         sgt ; >
2907   1682 E4            pop a
2908   1683             ; --- END RELATIONAL
2909   1683 C0 00 00      cmp b, 0
2910   1686 C6 B8 16      je _while56_exit
2911   1689             _while56_block:
2912   1689             ; i--; 
2913   1689 FA FA FF      lea d, [bp + -6] ; $i
2914   168C 2A            mov b, [d]
2915   168D 38 00 00      mov c, 0
2916   1690 11            mov a, b
2917   1691 FD 7D         dec b
2918   1693 FA FA FF      lea d, [bp + -6] ; $i
2919   1696 FD 43         mov [d], b
2920   1698 27            mov b, a
2921   1699             ; putchar(digits[i]); 
2922   1699             ; --- START FUNCTION CALL
2923   1699 FA FC FF      lea d, [bp + -4] ; $digits
2924   169C D7            push a
2925   169D DA            push d
2926   169E FA FA FF      lea d, [bp + -6] ; $i
2927   16A1 2A            mov b, [d]
2928   16A2 38 00 00      mov c, 0
2929   16A5 E7            pop d
2930   16A6 5A            add d, b
2931   16A7 E4            pop a
2932   16A8 32            mov bl, [d]
2933   16A9 A7 00         mov bh, 0
2934   16AB 38 00 00      mov c, 0
2935   16AE DD            push bl
2936   16AF 07 BA 16      call putchar
2937   16B2 51 01 00      add sp, 1
2938   16B5             ; --- END FUNCTION CALL
2939   16B5 0A 70 16      jmp _while56_cond
2940   16B8             _while56_exit:
2941   16B8 F9            leave
2942   16B9 09            ret
2943   16BA             
2944   16BA             putchar:
2945   16BA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2946   16BD             ; --- BEGIN INLINE ASM SEGMENT
2947   16BD FA 05 00      lea d, [bp + 5] ; $c
2948   16C0 1E            mov al, [d]
2949   16C1 23            mov ah, al
2950   16C2 19 00         mov al, 0
2951   16C4 05 03         syscall sys_io      ; char in AH
2952   16C6             ; --- END INLINE ASM SEGMENT
2953   16C6 F9            leave
2954   16C7 09            ret
2955   16C8             
2956   16C8             scann:
2957   16C8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2958   16CB             ; int m; 
2959   16CB 52 02 00      sub sp, 2
2960   16CE             ; --- BEGIN INLINE ASM SEGMENT
2961   16CE F8 08 00      enter 8
2962   16D1 FA F9 FF      lea d, [bp +- 7]
2963   16D4 07 1C 17      call _gets_scann
2964   16D7 07 0C 17      call _strlen_scann      ; get string length in C
2965   16DA 7E            dec c
2966   16DB FD 4E         mov si, d
2967   16DD 12            mov a, c
2968   16DE FD 99         shl a
2969   16E0 3B B9 17      mov d, table_power_scann
2970   16E3 59            add d, a
2971   16E4 38 00 00      mov c, 0
2972   16E7             mul_loop_scann:
2973   16E7 F6            lodsb      ; load ASCII to al
2974   16E8 B9 00         cmp al, 0
2975   16EA C6 FD 16      je mul_exit_scann
2976   16ED 6F 30         sub al, $30    ; make into integer
2977   16EF 22 00         mov ah, 0
2978   16F1 2A            mov b, [d]
2979   16F2 AC            mul a, b      ; result in B since it fits in 16bits
2980   16F3 11            mov a, b
2981   16F4 28            mov b, c
2982   16F5 54            add a, b
2983   16F6 39            mov c, a
2984   16F7 63 02 00      sub d, 2
2985   16FA 0A E7 16      jmp mul_loop_scann
2986   16FD             mul_exit_scann:
2987   16FD 12            mov a, c
2988   16FE F9            leave
2989   16FF FA FF FF      lea d, [bp + -1] ; $m
2990   1702 43            mov [d], a
2991   1703             ; --- END INLINE ASM SEGMENT
2992   1703             ; return m; 
2993   1703 FA FF FF      lea d, [bp + -1] ; $m
2994   1706 2A            mov b, [d]
2995   1707 38 00 00      mov c, 0
2996   170A F9            leave
2997   170B 09            ret
2998   170C             ; --- BEGIN INLINE ASM SEGMENT
2999   170C             _strlen_scann:
3000   170C DA            push d
3001   170D 38 00 00      mov c, 0
3002   1710             _strlen_L1_scann:
3003   1710 BD 00         cmp byte [d], 0
3004   1712 C6 1A 17      je _strlen_ret_scann
3005   1715 79            inc d
3006   1716 78            inc c
3007   1717 0A 10 17      jmp _strlen_L1_scann
3008   171A             _strlen_ret_scann:
3009   171A E7            pop d
3010   171B 09            ret
3011   171C             _gets_scann:
3012   171C DA            push d
3013   171D             _gets_loop_scann:
3014   171D 19 01         mov al, 1
3015   171F 05 03         syscall sys_io      ; receive in AH
3016   1721 B9 00         cmp al, 0        ; check error code (AL)
3017   1723 C6 1D 17      je _gets_loop_scann      ; if no char received, retry
3018   1726 76 1B         cmp ah, 27
3019   1728 C6 49 17      je _gets_ansi_esc_scann
3020   172B 76 0A         cmp ah, $0A        ; LF
3021   172D C6 B4 17      je _gets_end_scann
3022   1730 76 0D         cmp ah, $0D        ; CR
3023   1732 C6 B4 17      je _gets_end_scann
3024   1735 76 5C         cmp ah, $5C        ; '\\'
3025   1737 C6 75 17      je _gets_escape_scann
3026   173A 76 08         cmp ah, $08      ; check for backspace
3027   173C C6 45 17      je _gets_backspace_scann
3028   173F 1A            mov al, ah
3029   1740 3E            mov [d], al
3030   1741 79            inc d
3031   1742 0A 1D 17      jmp _gets_loop_scann
3032   1745             _gets_backspace_scann:
3033   1745 7F            dec d
3034   1746 0A 1D 17      jmp _gets_loop_scann
3035   1749             _gets_ansi_esc_scann:
3036   1749 19 01         mov al, 1
3037   174B 05 03         syscall sys_io        ; receive in AH without echo
3038   174D B9 00         cmp al, 0          ; check error code (AL)
3039   174F C6 49 17      je _gets_ansi_esc_scann    ; if no char received, retry
3040   1752 76 5B         cmp ah, '['
3041   1754 C7 1D 17      jne _gets_loop_scann
3042   1757             _gets_ansi_esc_2_scann:
3043   1757 19 01         mov al, 1
3044   1759 05 03         syscall sys_io          ; receive in AH without echo
3045   175B B9 00         cmp al, 0            ; check error code (AL)
3046   175D C6 57 17      je _gets_ansi_esc_2_scann  ; if no char received, retry
3047   1760 76 44         cmp ah, 'D'
3048   1762 C6 6D 17      je _gets_left_arrow_scann
3049   1765 76 43         cmp ah, 'C'
3050   1767 C6 71 17      je _gets_right_arrow_scann
3051   176A 0A 1D 17      jmp _gets_loop_scann
3052   176D             _gets_left_arrow_scann:
3053   176D 7F            dec d
3054   176E 0A 1D 17      jmp _gets_loop_scann
3055   1771             _gets_right_arrow_scann:
3056   1771 79            inc d
3057   1772 0A 1D 17      jmp _gets_loop_scann
3058   1775             _gets_escape_scann:
3059   1775 19 01         mov al, 1
3060   1777 05 03         syscall sys_io      ; receive in AH
3061   1779 B9 00         cmp al, 0        ; check error code (AL)
3062   177B C6 75 17      je _gets_escape_scann      ; if no char received, retry
3063   177E 76 6E         cmp ah, 'n'
3064   1780 C6 9F 17      je _gets_LF_scann
3065   1783 76 72         cmp ah, 'r'
3066   1785 C6 A6 17      je _gets_CR_scann
3067   1788 76 30         cmp ah, '0'
3068   178A C6 AD 17      je _gets_NULL_scann
3069   178D 76 5C         cmp ah, $5C  
3070   178F C6 98 17      je _gets_slash_scann
3071   1792 1A            mov al, ah        ; if not a known escape, it is just a normal letter
3072   1793 3E            mov [d], al
3073   1794 79            inc d
3074   1795 0A 1D 17      jmp _gets_loop_scann
3075   1798             _gets_slash_scann:
3076   1798 19 5C         mov al, $5C
3077   179A 3E            mov [d], al
3078   179B 79            inc d
3079   179C 0A 1D 17      jmp _gets_loop_scann
3080   179F             _gets_LF_scann:
3081   179F 19 0A         mov al, $0A
3082   17A1 3E            mov [d], al
3083   17A2 79            inc d
3084   17A3 0A 1D 17      jmp _gets_loop_scann
3085   17A6             _gets_CR_scann:
3086   17A6 19 0D         mov al, $0D
3087   17A8 3E            mov [d], al
3088   17A9 79            inc d
3089   17AA 0A 1D 17      jmp _gets_loop_scann
3090   17AD             _gets_NULL_scann:
3091   17AD 19 00         mov al, $00
3092   17AF 3E            mov [d], al
3093   17B0 79            inc d
3094   17B1 0A 1D 17      jmp _gets_loop_scann
3095   17B4             _gets_end_scann:
3096   17B4 19 00         mov al, 0
3097   17B6 3E            mov [d], al        ; terminate string
3098   17B7 E7            pop d
3099   17B8 09            ret
3100   17B9             table_power_scann:
3101   17B9 01 00       .dw 1              ; 1
3102   17BB 0A 00       .dw $A             ; 10
3103   17BD 64 00       .dw $64            ; 100
3104   17BF E8 03       .dw $3E8           ; 1000
3105   17C1 10 27       .dw $2710          ; 10000
3106   17C3 A0 86 01 00 .dw $86A0, $1      ; 100000
3107   17C7 40 42 0F 00 .dw $4240, $F      ; 1000000
3108   17CB 80 96 98 00 .dw $9680, $98     ; 10000000
3109   17CF 00 E1 F5 05 .dw $E100, $5F5    ; 100000000
3110   17D3 00 CA 9A 3B .dw $CA00, $3B9A   ; 1000000000
3111   17D7             ; --- END INLINE ASM SEGMENT
3112   17D7 F9            leave
3113   17D8 09            ret
3114   17D9             
3115   17D9             exit:
3116   17D9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3117   17DC             ; --- BEGIN INLINE ASM SEGMENT
3118   17DC FA 05 00      lea d, [bp + 5] ; $status
3119   17DF 2A            mov b, [d] ; return value
3120   17E0 05 0B         syscall sys_terminate_proc
3121   17E2             ; --- END INLINE ASM SEGMENT
3122   17E2 F9            leave
3123   17E3 09            ret
3124   17E4             ; --- END TEXT SEGMENT
3125   17E4             
3126   17E4             ; --- BEGIN DATA SEGMENT
3127   17E4 00 00       _arrows: .fill 2, 0
3128   17E6 00 00       _debug: .dw $0000
3129   17E8 1D 00       _rand_val: .dw $001d
3130   17EA 01 00       _rand_inc: .dw $0001
3131   17EC 00 00 00 00 _loc_data: .fill 12, 0
3131   17F0 00 00 00 00 
3131   17F4 00 00 00 00 
3132   17F8 00 00       _finished: .fill 2, 0
3133   17FA 01 00 04 00 _cave_data: .dw $0001,$0004,$0007,$0000,$0002,$0009,$0001,$0003,$000b,$0002,$0004,$000d,$0000,$0003,$0005,
3133   17FE 07 00 00 00 
3133   1802 02 00 09 00 
3133   1806 01 00 03 00 
3133   180A 0B 00 02 00 
3133   180E 04 00 0D 00 
3133   1812 00 00 03 00 
3133   1816 05 00 
3134   1818 00 00       .dw 
3135   181A 00 00       .dw 
3136   181C 04 00 06 00 .dw $0004,$0006,$000e,$0005,$0007,$0010,$0000,$0006,$0008,$0007,$0009,$0011,$0001,$0008,$000a,$0009,
3136   1820 0E 00 05 00 
3136   1824 07 00 10 00 
3136   1828 00 00 06 00 
3136   182C 08 00 07 00 
3136   1830 09 00 11 00 
3136   1834 01 00 08 00 
3136   1838 0A 00 09 00 
3137   183C 0B 00 12 00 .dw $000b,$0012,$0002,$000a,$000c,$000b,$000d,$0013,$0003,$000c,$000e,$0005,$000d,$000f,$000e,$0010,
3137   1840 02 00 0A 00 
3137   1844 0C 00 0B 00 
3137   1848 0D 00 13 00 
3137   184C 03 00 0C 00 
3137   1850 0E 00 05 00 
3137   1854 0D 00 0F 00 
3137   1858 0E 00 10 00 
3138   185C 13 00 06 00 .dw $0013,$0006,$000f,$0011,$0008,$0010,$0012,$000a,$0011,$0013,$000c,$000f,$0012,
3138   1860 0F 00 11 00 
3138   1864 08 00 10 00 
3138   1868 12 00 0A 00 
3138   186C 11 00 13 00 
3138   1870 0C 00 0F 00 
3138   1874 12 00 
3139   1876 49 4E 53 54 _s0: .db "INSTRUCTIONS (Y-N): ", 0
3139   187A 52 55 43 54 
3139   187E 49 4F 4E 53 
3139   1882 20 28 59 2D 
3139   1886 4E 29 3A 20 
3139   188A 00 
3140   188B 4E 45 57 20 _s1: .db "NEW GAME (Y-N): ", 0
3140   188F 47 41 4D 45 
3140   1893 20 28 59 2D 
3140   1897 4E 29 3A 20 
3140   189B 00 
3141   189C 57 45 4C 43 _s2: .db "WELCOME TO 'HUNT THE WUMPUS'\n", 0
3141   18A0 4F 4D 45 20 
3141   18A4 54 4F 20 27 
3141   18A8 48 55 4E 54 
3141   18AC 20 54 48 45 
3141   18B0 20 57 55 4D 
3141   18B4 50 55 53 27 
3141   18B8 0A 00 
3142   18BA 54 48 45 20 _s3: .db "THE WUMPUS LIVES IN A CAVE OF 20 ROOMS. EACH ROOM\n", 0
3142   18BE 57 55 4D 50 
3142   18C2 55 53 20 4C 
3142   18C6 49 56 45 53 
3142   18CA 20 49 4E 20 
3142   18CE 41 20 43 41 
3142   18D2 56 45 20 4F 
3142   18D6 46 20 32 30 
3142   18DA 20 52 4F 4F 
3142   18DE 4D 53 2E 20 
3142   18E2 45 41 43 48 
3142   18E6 20 52 4F 4F 
3142   18EA 4D 0A 00 
3143   18ED 48 41 53 20 _s4: .db "HAS 3 TUNNELS LEADING TO OTHER ROOMS.\n", 0
3143   18F1 33 20 54 55 
3143   18F5 4E 4E 45 4C 
3143   18F9 53 20 4C 45 
3143   18FD 41 44 49 4E 
3143   1901 47 20 54 4F 
3143   1905 20 4F 54 48 
3143   1909 45 52 20 52 
3143   190D 4F 4F 4D 53 
3143   1911 2E 0A 00 
3144   1914 4C 4F 4F 4B _s5: .db "LOOK AT A DODECAHEDRON TO SEE HOW THIS WORKS.\n", 0
3144   1918 20 41 54 20 
3144   191C 41 20 44 4F 
3144   1920 44 45 43 41 
3144   1924 48 45 44 52 
3144   1928 4F 4E 20 54 
3144   192C 4F 20 53 45 
3144   1930 45 20 48 4F 
3144   1934 57 20 54 48 
3144   1938 49 53 20 57 
3144   193C 4F 52 4B 53 
3144   1940 2E 0A 00 
3145   1943 0A 00       _s6: .db "\n", 0
3146   1945 20 48 41 5A _s7: .db " HAZARDS:\n", 0
3146   1949 41 52 44 53 
3146   194D 3A 0A 00 
3147   1950 20 42 4F 54 _s8: .db " BOTTOMLESS PITS: TWO ROOMS HAVE BOTTOMLESS PITS IN THEM\n", 0
3147   1954 54 4F 4D 4C 
3147   1958 45 53 53 20 
3147   195C 50 49 54 53 
3147   1960 3A 20 54 57 
3147   1964 4F 20 52 4F 
3147   1968 4F 4D 53 20 
3147   196C 48 41 56 45 
3147   1970 20 42 4F 54 
3147   1974 54 4F 4D 4C 
3147   1978 45 53 53 20 
3147   197C 50 49 54 53 
3147   1980 20 49 4E 20 
3147   1984 54 48 45 4D 
3147   1988 0A 00 
3148   198A 20 49 46 20 _s9: .db " IF YOU GO THERE, YOU FALL INTO THE PIT (& LOSE!)\n", 0
3148   198E 59 4F 55 20 
3148   1992 47 4F 20 54 
3148   1996 48 45 52 45 
3148   199A 2C 20 59 4F 
3148   199E 55 20 46 41 
3148   19A2 4C 4C 20 49 
3148   19A6 4E 54 4F 20 
3148   19AA 54 48 45 20 
3148   19AE 50 49 54 20 
3148   19B2 28 26 20 4C 
3148   19B6 4F 53 45 21 
3148   19BA 29 0A 00 
3149   19BD 20 53 55 50 _s10: .db " SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n", 0
3149   19C1 45 52 20 42 
3149   19C5 41 54 53 20 
3149   19C9 20 20 20 20 
3149   19CD 3A 20 54 57 
3149   19D1 4F 20 4F 54 
3149   19D5 48 45 52 20 
3149   19D9 52 4F 4F 4D 
3149   19DD 53 20 48 41 
3149   19E1 56 45 20 53 
3149   19E5 55 50 45 52 
3149   19E9 20 42 41 54 
3149   19ED 53 2E 20 49 
3149   19F1 46 20 59 4F 
3149   19F5 55 0A 00 
3150   19F8 20 47 4F 20 _s11: .db " GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n", 0
3150   19FC 54 48 45 52 
3150   1A00 45 2C 20 41 
3150   1A04 20 42 41 54 
3150   1A08 20 47 52 41 
3150   1A0C 42 53 20 59 
3150   1A10 4F 55 20 41 
3150   1A14 4E 44 20 54 
3150   1A18 41 4B 45 53 
3150   1A1C 20 59 4F 55 
3150   1A20 20 54 4F 20 
3150   1A24 53 4F 4D 45 
3150   1A28 20 4F 54 48 
3150   1A2C 45 52 0A 00 
3151   1A30 20 52 4F 4F _s12: .db " ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n", 0
3151   1A34 4D 20 41 54 
3151   1A38 20 52 41 4E 
3151   1A3C 44 4F 4D 2E 
3151   1A40 20 28 57 48 
3151   1A44 49 43 48 20 
3151   1A48 4D 41 59 20 
3151   1A4C 42 45 20 54 
3151   1A50 52 4F 55 42 
3151   1A54 4C 45 53 4F 
3151   1A58 4D 45 29 0A 
3151   1A5C 0A 00 
3152   1A5E 20 57 55 4D _s13: .db " WUMPUS:\n", 0
3152   1A62 50 55 53 3A 
3152   1A66 0A 00 
3153   1A68 20 54 48 45 _s14: .db " THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n", 0
3153   1A6C 20 57 55 4D 
3153   1A70 50 55 53 20 
3153   1A74 49 53 20 4E 
3153   1A78 4F 54 20 42 
3153   1A7C 4F 54 48 45 
3153   1A80 52 45 44 20 
3153   1A84 42 59 20 48 
3153   1A88 41 5A 41 52 
3153   1A8C 44 53 20 28 
3153   1A90 48 45 20 48 
3153   1A94 41 53 20 53 
3153   1A98 55 43 4B 45 
3153   1A9C 52 0A 00 
3154   1A9F 20 46 45 45 _s15: .db " FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n", 0
3154   1AA3 54 20 41 4E 
3154   1AA7 44 20 49 53 
3154   1AAB 20 54 4F 4F 
3154   1AAF 20 42 49 47 
3154   1AB3 20 46 4F 52 
3154   1AB7 20 41 20 42 
3154   1ABB 41 54 20 54 
3154   1ABF 4F 20 4C 49 
3154   1AC3 46 54 29 2E 
3154   1AC7 20 20 55 53 
3154   1ACB 55 41 4C 4C 
3154   1ACF 59 0A 00 
3155   1AD2 20 48 45 20 _s16: .db " HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n", 0
3155   1AD6 49 53 20 41 
3155   1ADA 53 4C 45 45 
3155   1ADE 50 2E 20 20 
3155   1AE2 54 57 4F 20 
3155   1AE6 54 48 49 4E 
3155   1AEA 47 53 20 57 
3155   1AEE 41 4B 45 20 
3155   1AF2 48 49 4D 20 
3155   1AF6 55 50 3A 20 
3155   1AFA 59 4F 55 20 
3155   1AFE 53 48 4F 4F 
3155   1B02 54 49 4E 47 
3155   1B06 20 41 4E 0A 
3155   1B0A 00 
3156   1B0B 20 41 52 52 _s17: .db " ARROW OR YOU ENTERING HIS ROOM.\n", 0
3156   1B0F 4F 57 20 4F 
3156   1B13 52 20 59 4F 
3156   1B17 55 20 45 4E 
3156   1B1B 54 45 52 49 
3156   1B1F 4E 47 20 48 
3156   1B23 49 53 20 52 
3156   1B27 4F 4F 4D 2E 
3156   1B2B 0A 00 
3157   1B2D 20 49 46 20 _s18: .db " IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n", 0
3157   1B31 54 48 45 20 
3157   1B35 57 55 4D 50 
3157   1B39 55 53 20 57 
3157   1B3D 41 4B 45 53 
3157   1B41 20 48 45 20 
3157   1B45 4D 4F 56 45 
3157   1B49 53 20 28 50 
3157   1B4D 3D 2E 37 35 
3157   1B51 29 20 4F 4E 
3157   1B55 45 20 52 4F 
3157   1B59 4F 4D 0A 00 
3158   1B5D 20 4F 52 20 _s19: .db " OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n", 0
3158   1B61 53 54 41 59 
3158   1B65 53 20 53 54 
3158   1B69 49 4C 4C 20 
3158   1B6D 28 50 3D 2E 
3158   1B71 32 35 29 2E 
3158   1B75 20 20 41 46 
3158   1B79 54 45 52 20 
3158   1B7D 54 48 41 54 
3158   1B81 2C 20 49 46 
3158   1B85 20 48 45 20 
3158   1B89 49 53 20 57 
3158   1B8D 48 45 52 45 
3158   1B91 20 59 4F 55 
3158   1B95 0A 00 
3159   1B97 20 41 52 45 _s20: .db " ARE, HE EATS YOU UP AND YOU LOSE!\n", 0
3159   1B9B 2C 20 48 45 
3159   1B9F 20 45 41 54 
3159   1BA3 53 20 59 4F 
3159   1BA7 55 20 55 50 
3159   1BAB 20 41 4E 44 
3159   1BAF 20 59 4F 55 
3159   1BB3 20 4C 4F 53 
3159   1BB7 45 21 0A 00 
3160   1BBB 20 59 4F 55 _s21: .db " YOU:\n", 0
3160   1BBF 3A 0A 00 
3161   1BC2 20 45 41 43 _s22: .db " EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n", 0
3161   1BC6 48 20 54 55 
3161   1BCA 52 4E 20 59 
3161   1BCE 4F 55 20 4D 
3161   1BD2 41 59 20 4D 
3161   1BD6 4F 56 45 20 
3161   1BDA 4F 52 20 53 
3161   1BDE 48 4F 4F 54 
3161   1BE2 20 41 20 43 
3161   1BE6 52 4F 4F 4B 
3161   1BEA 45 44 20 41 
3161   1BEE 52 52 4F 57 
3161   1BF2 0A 00 
3162   1BF4 20 4D 4F 56 _s23: .db " MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n", 0
3162   1BF8 49 4E 47 3A 
3162   1BFC 20 20 59 4F 
3162   1C00 55 20 43 41 
3162   1C04 4E 20 4D 4F 
3162   1C08 56 45 20 4F 
3162   1C0C 4E 45 20 52 
3162   1C10 4F 4F 4D 20 
3162   1C14 28 54 48 52 
3162   1C18 55 20 4F 4E 
3162   1C1C 45 20 54 55 
3162   1C20 4E 4E 45 4C 
3162   1C24 29 0A 00 
3163   1C27 20 41 52 52 _s24: .db " ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n", 0
3163   1C2B 4F 57 53 3A 
3163   1C2F 20 20 59 4F 
3163   1C33 55 20 48 41 
3163   1C37 56 45 20 35 
3163   1C3B 20 41 52 52 
3163   1C3F 4F 57 53 2E 
3163   1C43 20 20 59 4F 
3163   1C47 55 20 4C 4F 
3163   1C4B 53 45 20 57 
3163   1C4F 48 45 4E 20 
3163   1C53 59 4F 55 20 
3163   1C57 52 55 4E 20 
3163   1C5B 4F 55 54 0A 
3163   1C5F 00 
3164   1C60 20 45 41 43 _s25: .db " EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n", 0
3164   1C64 48 20 41 52 
3164   1C68 52 4F 57 20 
3164   1C6C 43 41 4E 20 
3164   1C70 47 4F 20 46 
3164   1C74 52 4F 4D 20 
3164   1C78 31 20 54 4F 
3164   1C7C 20 35 20 52 
3164   1C80 4F 4F 4D 53 
3164   1C84 2E 20 59 4F 
3164   1C88 55 20 41 49 
3164   1C8C 4D 20 42 59 
3164   1C90 20 54 45 4C 
3164   1C94 4C 49 4E 47 
3164   1C98 0A 00 
3165   1C9A 20 20 20 54 _s26: .db "   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n", 0
3165   1C9E 48 45 20 43 
3165   1CA2 4F 4D 50 55 
3165   1CA6 54 45 52 20 
3165   1CAA 54 48 45 20 
3165   1CAE 52 4F 4F 4D 
3165   1CB2 23 53 20 59 
3165   1CB6 4F 55 20 57 
3165   1CBA 41 4E 54 20 
3165   1CBE 54 48 45 20 
3165   1CC2 41 52 52 4F 
3165   1CC6 57 20 54 4F 
3165   1CCA 20 47 4F 20 
3165   1CCE 54 4F 2E 0A 
3165   1CD2 00 
3166   1CD3 20 20 20 49 _s27: .db "   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n", 0
3166   1CD7 46 20 54 48 
3166   1CDB 45 20 41 52 
3166   1CDF 52 4F 57 20 
3166   1CE3 43 41 4E 27 
3166   1CE7 54 20 47 4F 
3166   1CEB 20 54 48 41 
3166   1CEF 54 20 57 41 
3166   1CF3 59 20 28 49 
3166   1CF7 46 20 4E 4F 
3166   1CFB 20 54 55 4E 
3166   1CFF 4E 45 4C 29 
3166   1D03 20 49 54 20 
3166   1D07 4D 4F 56 45 
3166   1D0B 53 0A 
3167   1D0D 20 20 20 41 _s28: .db "   AT RANDOM TO THE NEXT ROOM.\n", 0
3167   1D11 54 20 52 41 
3167   1D15 4E 44 4F 4D 
3167   1D19 20 54 4F 20 
3167   1D1D 54 48 45 20 
3167   1D21 4E 45 58 54 
3167   1D25 20 52 4F 4F 
3167   1D29 4D 2E 0A 00 
3168   1D2D 20 20 20 20 _s29: .db "     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n", 0
3168   1D31 20 49 46 20 
3168   1D35 54 48 45 20 
3168   1D39 41 52 52 4F 
3168   1D3D 57 20 48 49 
3168   1D41 54 53 20 54 
3168   1D45 48 45 20 57 
3168   1D49 55 4D 50 55 
3168   1D4D 53 2C 20 59 
3168   1D51 4F 55 20 57 
3168   1D55 49 4E 2E 0A 
3168   1D59 00 
3169   1D5A 20 20 20 20 _s30: .db "     IF THE ARROW HITS YOU, YOU LOSE.\n", 0
3169   1D5E 20 49 46 20 
3169   1D62 54 48 45 20 
3169   1D66 41 52 52 4F 
3169   1D6A 57 20 48 49 
3169   1D6E 54 53 20 59 
3169   1D72 4F 55 2C 20 
3169   1D76 59 4F 55 20 
3169   1D7A 4C 4F 53 45 
3169   1D7E 2E 0A 00 
3170   1D81 20 57 41 52 _s31: .db " WARNINGS:\n", 0
3170   1D85 4E 49 4E 47 
3170   1D89 53 3A 0A 00 
3171   1D8D 20 57 48 45 _s32: .db " WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n", 0
3171   1D91 4E 20 59 4F 
3171   1D95 55 20 41 52 
3171   1D99 45 20 4F 4E 
3171   1D9D 45 20 52 4F 
3171   1DA1 4F 4D 20 41 
3171   1DA5 57 41 59 20 
3171   1DA9 46 52 4F 4D 
3171   1DAD 20 41 20 57 
3171   1DB1 55 4D 50 55 
3171   1DB5 53 20 4F 52 
3171   1DB9 20 48 41 5A 
3171   1DBD 41 52 44 2C 
3171   1DC1 0A 00 
3172   1DC3 20 54 48 45 _s33: .db " THE COMPUTER SAYS:\n", 0
3172   1DC7 20 43 4F 4D 
3172   1DCB 50 55 54 45 
3172   1DCF 52 20 53 41 
3172   1DD3 59 53 3A 0A 
3172   1DD7 00 
3173   1DD8 20 57 55 4D _s34: .db " WUMPUS:  'I SMELL A WUMPUS'\n", 0
3173   1DDC 50 55 53 3A 
3173   1DE0 20 20 27 49 
3173   1DE4 20 53 4D 45 
3173   1DE8 4C 4C 20 41 
3173   1DEC 20 57 55 4D 
3173   1DF0 50 55 53 27 
3173   1DF4 0A 00 
3174   1DF6 20 42 41 54 _s35: .db " BAT   :  'BATS NEARBY'\n", 0
3174   1DFA 20 20 20 3A 
3174   1DFE 20 20 27 42 
3174   1E02 41 54 53 20 
3174   1E06 4E 45 41 52 
3174   1E0A 42 59 27 0A 
3174   1E0E 00 
3175   1E0F 20 50 49 54 _s36: .db " PIT   :  'I FEEL A DRAFT'\n", 0
3175   1E13 20 20 20 3A 
3175   1E17 20 20 27 49 
3175   1E1B 20 46 45 45 
3175   1E1F 4C 20 41 20 
3175   1E23 44 52 41 46 
3175   1E27 54 27 0A 00 
3176   1E2B 49 20 53 4D _s37: .db "I SMELL A WUMPUS!\n", 0
3176   1E2F 45 4C 4C 20 
3176   1E33 41 20 57 55 
3176   1E37 4D 50 55 53 
3176   1E3B 21 0A 00 
3177   1E3E 49 20 46 45 _s38: .db "I FEEL A DRAFT\n", 0
3177   1E42 45 4C 20 41 
3177   1E46 20 44 52 41 
3177   1E4A 46 54 0A 00 
3178   1E4E 42 41 54 53 _s39: .db "BATS NEARBY!\n", 0
3178   1E52 20 4E 45 41 
3178   1E56 52 42 59 21 
3178   1E5A 0A 00 
3179   1E5C 59 4F 55 20 _s40: .db "YOU ARE IN ROOM ", 0
3179   1E60 41 52 45 20 
3179   1E64 49 4E 20 52 
3179   1E68 4F 4F 4D 20 
3179   1E6C 00 
3180   1E6D 54 55 4E 4E _s41: .db "TUNNELS LEAD TO ", 0
3180   1E71 45 4C 53 20 
3180   1E75 4C 45 41 44 
3180   1E79 20 54 4F 20 
3180   1E7D 00 
3181   1E7E 2C 20 00    _s42: .db ", ", 0
3182   1E81 0A 0A 00    _s43: .db "\n\n", 0
3183   1E84 53 48 4F 4F _s44: .db "SHOOT OR MOVE (S-M): ", 0
3183   1E88 54 20 4F 52 
3183   1E8C 20 4D 4F 56 
3183   1E90 45 20 28 53 
3183   1E94 2D 4D 29 3A 
3183   1E98 20 00 
3184   1E9A 54 53 4B 20 _s45: .db "TSK TSK TSK - WUMPUS GOT YOU!\n", 0
3184   1E9E 54 53 4B 20 
3184   1EA2 54 53 4B 20 
3184   1EA6 2D 20 57 55 
3184   1EAA 4D 50 55 53 
3184   1EAE 20 47 4F 54 
3184   1EB2 20 59 4F 55 
3184   1EB6 21 0A 00 
3185   1EB9 0A 4E 55 4D _s46: .db "\nNUMBER OF ROOMS (1-5): ", 0
3185   1EBD 42 45 52 20 
3185   1EC1 4F 46 20 52 
3185   1EC5 4F 4F 4D 53 
3185   1EC9 20 28 31 2D 
3185   1ECD 35 29 3A 20 
3185   1ED1 00 
3186   1ED2 52 4F 4F 4D _s47: .db "ROOM #", 0
3186   1ED6 20 23 00 
3187   1ED9 41 52 52 4F _s48: .db "ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n", 0
3187   1EDD 57 53 20 41 
3187   1EE1 52 45 4E 27 
3187   1EE5 54 20 54 48 
3187   1EE9 41 54 20 43 
3187   1EED 52 4F 4F 4B 
3187   1EF1 45 44 20 2D 
3187   1EF5 20 54 52 59 
3187   1EF9 20 41 4E 4F 
3187   1EFD 54 48 45 52 
3187   1F01 20 52 4F 4F 
3187   1F05 4D 0A 
3188   1F07 41 48 41 21 _s49: .db "AHA! YOU GOT THE WUMPUS!\n", 0
3188   1F0B 20 59 4F 55 
3188   1F0F 20 47 4F 54 
3188   1F13 20 54 48 45 
3188   1F17 20 57 55 4D 
3188   1F1B 50 55 53 21 
3188   1F1F 0A 00 
3189   1F21 4F 55 43 48 _s50: .db "OUCH! ARROW GOT YOU!\n", 0
3189   1F25 21 20 41 52 
3189   1F29 52 4F 57 20 
3189   1F2D 47 4F 54 20 
3189   1F31 59 4F 55 21 
3189   1F35 0A 00 
3190   1F37 4D 49 53 53 _s51: .db "MISSED\n", 0
3190   1F3B 45 44 0A 00 
3191   1F3F 0A 57 48 45 _s52: .db "\nWHERE TO: ", 0
3191   1F43 52 45 20 54 
3191   1F47 4F 3A 20 00 
3192   1F4B 4E 4F 54 20 _s53: .db "NOT POSSIBLE\n", 0
3192   1F4F 50 4F 53 53 
3192   1F53 49 42 4C 45 
3192   1F57 0A 00 
3193   1F59 5A 41 50 2D _s54: .db "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n", 0
3193   1F5D 2D 53 55 50 
3193   1F61 45 52 20 42 
3193   1F65 41 54 20 53 
3193   1F69 4E 41 54 43 
3193   1F6D 48 21 20 45 
3193   1F71 4C 53 45 57 
3193   1F75 48 45 52 45 
3193   1F79 56 49 4C 4C 
3193   1F7D 45 20 46 4F 
3193   1F81 52 20 59 4F 
3193   1F85 55 21 0A 00 
3194   1F89 2E 2E 2E 20 _s55: .db "... OOPS! BUMPED A WUMPUS!\n", 0
3194   1F8D 4F 4F 50 53 
3194   1F91 21 20 42 55 
3194   1F95 4D 50 45 44 
3194   1F99 20 41 20 57 
3194   1F9D 55 4D 50 55 
3194   1FA1 53 21 0A 00 
3195   1FA5 59 59 59 59 _s56: .db "YYYYIIIIEEEE . . . FELL IN PIT\n", 0
3195   1FA9 49 49 49 49 
3195   1FAD 45 45 45 45 
3195   1FB1 20 2E 20 2E 
3195   1FB5 20 2E 20 46 
3195   1FB9 45 4C 4C 20 
3195   1FBD 49 4E 20 50 
3195   1FC1 49 54 0A 00 
3196   1FC5 48 55 4E 54 _s57: .db "HUNT THE WUMPUS\n", 0
3196   1FC9 20 54 48 45 
3196   1FCD 20 57 55 4D 
3196   1FD1 50 55 53 0A 
3196   1FD5 00 
3197   1FD6 57 75 6D 70 _s58: .db "Wumpus is at ", 0
3197   1FDA 75 73 20 69 
3197   1FDE 73 20 61 74 
3197   1FE2 20 00 
3198   1FE4 2C 20 70 69 _s59: .db ", pits at ", 0
3198   1FE8 74 73 20 61 
3198   1FEC 74 20 00 
3199   1FEF 20 26 20 00 _s60: .db " & ", 0
3200   1FF3 2C 20 62 61 _s61: .db ", bats at ", 0
3200   1FF7 74 73 20 61 
3200   1FFB 74 20 00 
3201   1FFE 48 45 45 20 _s62: .db "HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n", 0
3201   2002 48 45 45 20 
3201   2006 48 45 45 20 
3201   200A 2D 20 54 48 
3201   200E 45 20 57 55 
3201   2012 4D 50 55 53 
3201   2016 27 4C 4C 20 
3201   201A 47 45 54 20 
3201   201E 59 4F 55 20 
3201   2022 4E 45 58 54 
3201   2026 20 54 49 4D 
3201   202A 45 21 21 0A 
3202   202E 48 41 20 48 _s63: .db "HA HA HA - YOU LOSE!\n", 0
3202   2032 41 20 48 41 
3202   2036 20 2D 20 59 
3202   203A 4F 55 20 4C 
3202   203E 4F 53 45 21 
3202   2042 0A 00 
3203   2044             
3204   2044 46 20       _heap_top: .dw _heap
3205   2046 00          _heap: .db 0
3206   2047             ; --- END DATA SEGMENT
3207   2047             
3208   2047             .end
tasm: Number of errors = 0
