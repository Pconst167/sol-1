0001   0000             ; --- FILENAME: programs/wumpus.c
0002   0000             ; --- DATE:     22-07-2025 at 15:16:21
0003   0000             .include "lib/asm/kernel.exp"
0001+  0000             fdc_al_restore   .EQU  $0000
0002+  0000             fdc_al_step      .EQU  $0001
0003+  0000             fdc_al_step_in   .EQU  $0002
0004+  0000             fdc_al_step_out  .EQU  $0003
0005+  0000             fdc_al_seek      .EQU  $0004
0006+  0000             fdc_al_format_128 .EQU  $0005
0007+  0000             fdc_al_formatdisk_128 .EQU  $0006
0008+  0000             fdc_al_format_512 .EQU  $0007
0009+  0000             fdc_al_formatdisk_512 .EQU  $0008
0010+  0000             fdc_al_read_addr .EQU  $0009
0011+  0000             fdc_al_read_track .EQU  $000a
0012+  0000             fdc_al_read_sect .EQU  $000b
0013+  0000             fdc_al_write_sect .EQU  $000c
0014+  0000             fdc_al_force_int .EQU  $000d
0015+  0000             fdc_al_status0   .EQU  $000e
0016+  0000             fdc_al_status1   .EQU  $000f
0017+  0000             noname._7seg_display .EQU  $ffb0
0018+  0000             noname._fdc_config .EQU  $ffc0
0019+  0000             noname._fdc_status_0 .EQU  $ffc1
0020+  0000             noname._fdc_stat_cmd .EQU  $ffc8
0021+  0000             sys_break        .EQU  $0000
0022+  0000             sys_rtc          .EQU  $0001
0023+  0000             sys_ide          .EQU  $0002
0024+  0000             sys_io           .EQU  $0003
0025+  0000             sys_filesystem   .EQU  $0004
0026+  0000             sys_create_proc  .EQU  $0005
0027+  0000             sys_list_proc    .EQU  $0006
0028+  0000             sys_datetime     .EQU  $0007
0029+  0000             sys_reboot       .EQU  $0008
0030+  0000             sys_pause_proc   .EQU  $0009
0031+  0000             sys_resume_proc  .EQU  $000a
0032+  0000             sys_terminate_proc .EQU  $000b
0033+  0000             sys_system       .EQU  $000c
0034+  0000             sys_fdc          .EQU  $000d
0035+  0000             text_org         .EQU  $0400
0004   0000             .include "lib/asm/bios.exp"
0001+  0000             bios_reset_vector .equ  $01c0
0002+  0000             ide_buffer       .equ  $8204
0003+  0000             boot_origin      .equ  $8004
0004+  0000             bios_uart        .equ  $0002
0005+  0000             bios_ide         .equ  $0003
0005   0000             
0006   0000             ; --- BEGIN TEXT SEGMENT
0007   0400             .org text_org
0008   0400             main:
0009   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0010   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0011   0408             ; int c; 
0012   0408 52 02 00      sub sp, 2
0013   040B             ; c = getlet("INSTRUCTIONS (Y-N): "); 
0014   040B FA FF FF      lea d, [bp + -1] ; $c
0015   040E DA            push d
0016   040F             ; --- START FUNCTION CALL
0017   040F 26 E6 17      mov b, _s0 ; "INSTRUCTIONS (Y-N): "
0018   0412 FD AB         swp b
0019   0414 D8            push b
0020   0415 07 93 04      call getlet
0021   0418 51 02 00      add sp, 2
0022   041B             ; --- END FUNCTION CALL
0023   041B E7            pop d
0024   041C FD 43         mov [d], b
0025   041E             ; if (c == 'Y') { 
0026   041E             _if1_cond:
0027   041E FA FF FF      lea d, [bp + -1] ; $c
0028   0421 2A            mov b, [d]
0029   0422 38 00 00      mov c, 0
0030   0425             ; --- START RELATIONAL
0031   0425 D7            push a
0032   0426 11            mov a, b
0033   0427 FD 2E 59 00   mov32 cb, $00000059
0033   042B 00 00 
0034   042D B0            cmp a, b
0035   042E FD 71         seq ; ==
0036   0430 E4            pop a
0037   0431             ; --- END RELATIONAL
0038   0431 C0 00 00      cmp b, 0
0039   0434 C6 3D 04      je _if1_exit
0040   0437             _if1_TRUE:
0041   0437             ; print_instructions(); 
0042   0437             ; --- START FUNCTION CALL
0043   0437 07 F0 04      call print_instructions
0044   043A 0A 3D 04      jmp _if1_exit
0045   043D             _if1_exit:
0046   043D             ; do {  
0047   043D             _do2_block:
0048   043D             ; game_setup(); 
0049   043D             ; --- START FUNCTION CALL
0050   043D 07 F7 10      call game_setup
0051   0440             ; game_play(); 
0052   0440             ; --- START FUNCTION CALL
0053   0440 07 60 12      call game_play
0054   0443             ; } while (getlet("NEW GAME (Y-N): ") != 'N'); 
0055   0443             _do2_cond:
0056   0443             ; --- START FUNCTION CALL
0057   0443 26 FB 17      mov b, _s1 ; "NEW GAME (Y-N): "
0058   0446 FD AB         swp b
0059   0448 D8            push b
0060   0449 07 93 04      call getlet
0061   044C 51 02 00      add sp, 2
0062   044F             ; --- END FUNCTION CALL
0063   044F             ; --- START RELATIONAL
0064   044F D7            push a
0065   0450 11            mov a, b
0066   0451 FD 2E 4E 00   mov32 cb, $0000004e
0066   0455 00 00 
0067   0457 B0            cmp a, b
0068   0458 FD 72         sneq ; !=
0069   045A E4            pop a
0070   045B             ; --- END RELATIONAL
0071   045B C0 01 00      cmp b, 1
0072   045E C6 3D 04      je _do2_block
0073   0461             _do2_exit:
0074   0461             ; return 0; 
0075   0461 FD 2E 00 00   mov32 cb, $00000000
0075   0465 00 00 
0076   0467 F9            leave
0077   0468 05 0B         syscall sys_terminate_proc
0078   046A             
0079   046A             getnum:
0080   046A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0081   046D             ; int n; 
0082   046D 52 02 00      sub sp, 2
0083   0470             ; print(prompt); 
0084   0470             ; --- START FUNCTION CALL
0085   0470 FA 05 00      lea d, [bp + 5] ; $prompt
0086   0473 2A            mov b, [d]
0087   0474 38 00 00      mov c, 0
0088   0477 FD AB         swp b
0089   0479 D8            push b
0090   047A 07 79 14      call print
0091   047D 51 02 00      add sp, 2
0092   0480             ; --- END FUNCTION CALL
0093   0480             ; n = scann(); 
0094   0480 FA FF FF      lea d, [bp + -1] ; $n
0095   0483 DA            push d
0096   0484             ; --- START FUNCTION CALL
0097   0484 07 38 16      call scann
0098   0487 E7            pop d
0099   0488 FD 43         mov [d], b
0100   048A             ; return n; 
0101   048A FA FF FF      lea d, [bp + -1] ; $n
0102   048D 2A            mov b, [d]
0103   048E 38 00 00      mov c, 0
0104   0491 F9            leave
0105   0492 09            ret
0106   0493             
0107   0493             getlet:
0108   0493 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0109   0496             ; char c = '\n'; 
0110   0496 52 01 00      sub sp, 1
0111   0499             ; --- START LOCAL VAR INITIALIZATION
0112   0499 FA 00 00      lea d, [bp + 0] ; $c
0113   049C DA            push d
0114   049D FD 2E 0A 00   mov32 cb, $0000000a
0114   04A1 00 00 
0115   04A3 E7            pop d
0116   04A4 FD 3E         mov [d], bl
0117   04A6             ; --- END LOCAL VAR INITIALIZATION
0118   04A6             ; print(prompt); 
0119   04A6             ; --- START FUNCTION CALL
0120   04A6 FA 05 00      lea d, [bp + 5] ; $prompt
0121   04A9 2A            mov b, [d]
0122   04AA 38 00 00      mov c, 0
0123   04AD FD AB         swp b
0124   04AF D8            push b
0125   04B0 07 79 14      call print
0126   04B3 51 02 00      add sp, 2
0127   04B6             ; --- END FUNCTION CALL
0128   04B6             ; while (c == '\n') { 
0129   04B6             _while3_cond:
0130   04B6 FA 00 00      lea d, [bp + 0] ; $c
0131   04B9 32            mov bl, [d]
0132   04BA A7 00         mov bh, 0
0133   04BC 38 00 00      mov c, 0
0134   04BF             ; --- START RELATIONAL
0135   04BF D7            push a
0136   04C0 11            mov a, b
0137   04C1 FD 2E 0A 00   mov32 cb, $0000000a
0137   04C5 00 00 
0138   04C7 B0            cmp a, b
0139   04C8 FD 71         seq ; ==
0140   04CA E4            pop a
0141   04CB             ; --- END RELATIONAL
0142   04CB C0 00 00      cmp b, 0
0143   04CE C6 DE 04      je _while3_exit
0144   04D1             _while3_block:
0145   04D1             ; c = getchar(); 
0146   04D1 FA 00 00      lea d, [bp + 0] ; $c
0147   04D4 DA            push d
0148   04D5             ; --- START FUNCTION CALL
0149   04D5 07 92 14      call getchar
0150   04D8 E7            pop d
0151   04D9 FD 3E         mov [d], bl
0152   04DB 0A B6 04      jmp _while3_cond
0153   04DE             _while3_exit:
0154   04DE             ; return toupper(c); 
0155   04DE             ; --- START FUNCTION CALL
0156   04DE FA 00 00      lea d, [bp + 0] ; $c
0157   04E1 32            mov bl, [d]
0158   04E2 A7 00         mov bh, 0
0159   04E4 38 00 00      mov c, 0
0160   04E7 DD            push bl
0161   04E8 07 AC 14      call toupper
0162   04EB 51 01 00      add sp, 1
0163   04EE             ; --- END FUNCTION CALL
0164   04EE F9            leave
0165   04EF 09            ret
0166   04F0             
0167   04F0             print_instructions:
0168   04F0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0169   04F3             ; print("\n\n"); 
0170   04F3             ; --- START FUNCTION CALL
0171   04F3 26 0C 18      mov b, _s2 ; "\n\n"
0172   04F6 FD AB         swp b
0173   04F8 D8            push b
0174   04F9 07 79 14      call print
0175   04FC 51 02 00      add sp, 2
0176   04FF             ; --- END FUNCTION CALL
0177   04FF             ; print("WELCOME TO HUNT THE WUMPUS\n"); 
0178   04FF             ; --- START FUNCTION CALL
0179   04FF 26 0F 18      mov b, _s3 ; "WELCOME TO HUNT THE WUMPUS\n"
0180   0502 FD AB         swp b
0181   0504 D8            push b
0182   0505 07 79 14      call print
0183   0508 51 02 00      add sp, 2
0184   050B             ; --- END FUNCTION CALL
0185   050B             ; print("THE WUMPUS LIVES IN A CAVE OF 20 ROOMS. EACH ROOM HAS 3 TUNNELS LEADING TO OTHER ROOMS.\n");  
0186   050B             ; --- START FUNCTION CALL
0187   050B 26 2B 18      mov b, _s4 ; "THE WUMPUS LIVES IN A CAVE OF 20 ROOMS. EACH ROOM HAS 3 TUNNELS LEADING TO OTHER ROOMS.\n"
0188   050E FD AB         swp b
0189   0510 D8            push b
0190   0511 07 79 14      call print
0191   0514 51 02 00      add sp, 2
0192   0517             ; --- END FUNCTION CALL
0193   0517             ; print("LOOK AT A DODECAHEDRON TO SEE HOW THIS WORKS.\n\n"); 
0194   0517             ; --- START FUNCTION CALL
0195   0517 26 84 18      mov b, _s5 ; "LOOK AT A DODECAHEDRON TO SEE HOW THIS WORKS.\n\n"
0196   051A FD AB         swp b
0197   051C D8            push b
0198   051D 07 79 14      call print
0199   0520 51 02 00      add sp, 2
0200   0523             ; --- END FUNCTION CALL
0201   0523             ; print(" HAZARDS:\n"); 
0202   0523             ; --- START FUNCTION CALL
0203   0523 26 B4 18      mov b, _s6 ; " HAZARDS:\n"
0204   0526 FD AB         swp b
0205   0528 D8            push b
0206   0529 07 79 14      call print
0207   052C 51 02 00      add sp, 2
0208   052F             ; --- END FUNCTION CALL
0209   052F             ; print(" BOTTOMLESS PITS: TWO ROOMS HAVE BOTTOMLESS PITS IN THEM. IF YOU GO THERE, YOU FALL INTO THE PIT (& LOSE!)\n"); 
0210   052F             ; --- START FUNCTION CALL
0211   052F 26 BF 18      mov b, _s7 ; " BOTTOMLESS PITS: TWO ROOMS HAVE BOTTOMLESS PITS IN THEM. IF YOU GO THERE, YOU FALL INTO THE PIT (& LOSE!)\n"
0212   0532 FD AB         swp b
0213   0534 D8            push b
0214   0535 07 79 14      call print
0215   0538 51 02 00      add sp, 2
0216   053B             ; --- END FUNCTION CALL
0217   053B             ; print(" SUPER BATS: TWO OTHER ROOMS HAVE SUPER BATS. IF YOU GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"); 
0218   053B             ; --- START FUNCTION CALL
0219   053B 26 2B 19      mov b, _s8 ; " SUPER BATS: TWO OTHER ROOMS HAVE SUPER BATS. IF YOU GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"
0220   053E FD AB         swp b
0221   0540 D8            push b
0222   0541 07 79 14      call print
0223   0544 51 02 00      add sp, 2
0224   0547             ; --- END FUNCTION CALL
0225   0547             ; print("   ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n"); 
0226   0547             ; --- START FUNCTION CALL
0227   0547 26 97 19      mov b, _s9 ; "   ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n"
0228   054A FD AB         swp b
0229   054C D8            push b
0230   054D 07 79 14      call print
0231   0550 51 02 00      add sp, 2
0232   0553             ; --- END FUNCTION CALL
0233   0553             ; print(" WUMPUS: THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"); 
0234   0553             ; --- START FUNCTION CALL
0235   0553 26 C7 19      mov b, _s10 ; " WUMPUS: THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"
0236   0556 FD AB         swp b
0237   0558 D8            push b
0238   0559 07 79 14      call print
0239   055C 51 02 00      add sp, 2
0240   055F             ; --- END FUNCTION CALL
0241   055F             ; print("   HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN ARROW OR YOU ENTERING HIS ROOM.\n"); 
0242   055F             ; --- START FUNCTION CALL
0243   055F 26 37 1A      mov b, _s11 ; "   HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN ARROW OR YOU ENTERING HIS ROOM.\n"
0244   0562 FD AB         swp b
0245   0564 D8            push b
0246   0565 07 79 14      call print
0247   0568 51 02 00      add sp, 2
0248   056B             ; --- END FUNCTION CALL
0249   056B             ; print("   IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"); 
0250   056B             ; --- START FUNCTION CALL
0251   056B 26 92 1A      mov b, _s12 ; "   IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"
0252   056E FD AB         swp b
0253   0570 D8            push b
0254   0571 07 79 14      call print
0255   0574 51 02 00      add sp, 2
0256   0577             ; --- END FUNCTION CALL
0257   0577             ; print("   ARE, HE EATS YOU UP AND YOU LOSE!\n\n"); 
0258   0577             ; --- START FUNCTION CALL
0259   0577 26 FC 1A      mov b, _s13 ; "   ARE, HE EATS YOU UP AND YOU LOSE!\n\n"
0260   057A FD AB         swp b
0261   057C D8            push b
0262   057D 07 79 14      call print
0263   0580 51 02 00      add sp, 2
0264   0583             ; --- END FUNCTION CALL
0265   0583             ; print(" YOU: EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"); 
0266   0583             ; --- START FUNCTION CALL
0267   0583 26 23 1B      mov b, _s14 ; " YOU: EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"
0268   0586 FD AB         swp b
0269   0588 D8            push b
0270   0589 07 79 14      call print
0271   058C 51 02 00      add sp, 2
0272   058F             ; --- END FUNCTION CALL
0273   058F             ; print(" MOVING: YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"); 
0274   058F             ; --- START FUNCTION CALL
0275   058F 26 5A 1B      mov b, _s15 ; " MOVING: YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"
0276   0592 FD AB         swp b
0277   0594 D8            push b
0278   0595 07 79 14      call print
0279   0598 51 02 00      add sp, 2
0280   059B             ; --- END FUNCTION CALL
0281   059B             ; print(" ARROWS: YOU HAVE 5 ARROWS. YOU LOSE WHEN YOU RUN OUT\n"); 
0282   059B             ; --- START FUNCTION CALL
0283   059B 26 8C 1B      mov b, _s16 ; " ARROWS: YOU HAVE 5 ARROWS. YOU LOSE WHEN YOU RUN OUT\n"
0284   059E FD AB         swp b
0285   05A0 D8            push b
0286   05A1 07 79 14      call print
0287   05A4 51 02 00      add sp, 2
0288   05A7             ; --- END FUNCTION CALL
0289   05A7             ; print("   EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"); 
0290   05A7             ; --- START FUNCTION CALL
0291   05A7 26 C3 1B      mov b, _s17 ; "   EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"
0292   05AA FD AB         swp b
0293   05AC D8            push b
0294   05AD 07 79 14      call print
0295   05B0 51 02 00      add sp, 2
0296   05B3             ; --- END FUNCTION CALL
0297   05B3             ; print("   IF THE ARROW CANT GO THAT WAY (IF NO TUNNEL) IT MOVES AT RANDOM TO THE NEXT ROOM.\n"); 
0298   05B3             ; --- START FUNCTION CALL
0299   05B3 26 34 1C      mov b, _s18 ; "   IF THE ARROW CANT GO THAT WAY (IF NO TUNNEL) IT MOVES AT RANDOM TO THE NEXT ROOM.\n"
0300   05B6 FD AB         swp b
0301   05B8 D8            push b
0302   05B9 07 79 14      call print
0303   05BC 51 02 00      add sp, 2
0304   05BF             ; --- END FUNCTION CALL
0305   05BF             ; print("   IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"); 
0306   05BF             ; --- START FUNCTION CALL
0307   05BF 26 8A 1C      mov b, _s19 ; "   IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"
0308   05C2 FD AB         swp b
0309   05C4 D8            push b
0310   05C5 07 79 14      call print
0311   05C8 51 02 00      add sp, 2
0312   05CB             ; --- END FUNCTION CALL
0313   05CB             ; print("   IF THE ARROW HITS YOU, YOU LOSE.\n"); 
0314   05CB             ; --- START FUNCTION CALL
0315   05CB 26 B5 1C      mov b, _s20 ; "   IF THE ARROW HITS YOU, YOU LOSE.\n"
0316   05CE FD AB         swp b
0317   05D0 D8            push b
0318   05D1 07 79 14      call print
0319   05D4 51 02 00      add sp, 2
0320   05D7             ; --- END FUNCTION CALL
0321   05D7             ; print(" WARNINGS: WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD, THE COMPUTER SAYS:\n"); 
0322   05D7             ; --- START FUNCTION CALL
0323   05D7 26 DA 1C      mov b, _s21 ; " WARNINGS: WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD, THE COMPUTER SAYS:\n"
0324   05DA FD AB         swp b
0325   05DC D8            push b
0326   05DD 07 79 14      call print
0327   05E0 51 02 00      add sp, 2
0328   05E3             ; --- END FUNCTION CALL
0329   05E3             ; print("   WUMPUS: I SMELL A WUMPUS\n"); 
0330   05E3             ; --- START FUNCTION CALL
0331   05E3 26 2D 1D      mov b, _s22 ; "   WUMPUS: I SMELL A WUMPUS\n"
0332   05E6 FD AB         swp b
0333   05E8 D8            push b
0334   05E9 07 79 14      call print
0335   05EC 51 02 00      add sp, 2
0336   05EF             ; --- END FUNCTION CALL
0337   05EF             ; print("   BAT: BATS NEARBY\n"); 
0338   05EF             ; --- START FUNCTION CALL
0339   05EF 26 4A 1D      mov b, _s23 ; "   BAT: BATS NEARBY\n"
0340   05F2 FD AB         swp b
0341   05F4 D8            push b
0342   05F5 07 79 14      call print
0343   05F8 51 02 00      add sp, 2
0344   05FB             ; --- END FUNCTION CALL
0345   05FB             ; print("   PIT: I FEEL A DRAFT\n\n"); 
0346   05FB             ; --- START FUNCTION CALL
0347   05FB 26 5F 1D      mov b, _s24 ; "   PIT: I FEEL A DRAFT\n\n"
0348   05FE FD AB         swp b
0349   0600 D8            push b
0350   0601 07 79 14      call print
0351   0604 51 02 00      add sp, 2
0352   0607             ; --- END FUNCTION CALL
0353   0607 F9            leave
0354   0608 09            ret
0355   0609             
0356   0609             show_room:
0357   0609 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0358   060C             ; int room, k; 
0359   060C 52 02 00      sub sp, 2
0360   060F 52 02 00      sub sp, 2
0361   0612             ; print("\n"); 
0362   0612             ; --- START FUNCTION CALL
0363   0612 26 78 1D      mov b, _s25 ; "\n"
0364   0615 FD AB         swp b
0365   0617 D8            push b
0366   0618 07 79 14      call print
0367   061B 51 02 00      add sp, 2
0368   061E             ; --- END FUNCTION CALL
0369   061E             ; for (k = 0; k < 3; k++) { 
0370   061E             _for4_init:
0371   061E FA FD FF      lea d, [bp + -3] ; $k
0372   0621 DA            push d
0373   0622 FD 2E 00 00   mov32 cb, $00000000
0373   0626 00 00 
0374   0628 E7            pop d
0375   0629 FD 43         mov [d], b
0376   062B             _for4_cond:
0377   062B FA FD FF      lea d, [bp + -3] ; $k
0378   062E 2A            mov b, [d]
0379   062F 38 00 00      mov c, 0
0380   0632             ; --- START RELATIONAL
0381   0632 D7            push a
0382   0633 11            mov a, b
0383   0634 FD 2E 03 00   mov32 cb, $00000003
0383   0638 00 00 
0384   063A B0            cmp a, b
0385   063B FD 73         slt ; < (signed)
0386   063D E4            pop a
0387   063E             ; --- END RELATIONAL
0388   063E C0 00 00      cmp b, 0
0389   0641 C6 82 07      je _for4_exit
0390   0644             _for4_block:
0391   0644             ; room = cave[loc[      0   ]][k]; 
0392   0644 FA FF FF      lea d, [bp + -1] ; $room
0393   0647 DA            push d
0394   0648 3B 6A 17      mov d, _cave_data ; $cave
0395   064B D7            push a
0396   064C DA            push d
0397   064D 3B 5C 17      mov d, _loc_data ; $loc
0398   0650 D7            push a
0399   0651 DA            push d
0400   0652 FD 2E 00 00   mov32 cb, $00000000
0400   0656 00 00 
0401   0658 E7            pop d
0402   0659 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0403   065D E4            pop a
0404   065E 2A            mov b, [d]
0405   065F 38 00 00      mov c, 0
0406   0662 E7            pop d
0407   0663 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0408   0667 DA            push d
0409   0668 FA FD FF      lea d, [bp + -3] ; $k
0410   066B 2A            mov b, [d]
0411   066C 38 00 00      mov c, 0
0412   066F E7            pop d
0413   0670 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0414   0674 E4            pop a
0415   0675 2A            mov b, [d]
0416   0676 38 00 00      mov c, 0
0417   0679 E7            pop d
0418   067A FD 43         mov [d], b
0419   067C             ; if (room == loc[  1      ]) { 
0420   067C             _if5_cond:
0421   067C FA FF FF      lea d, [bp + -1] ; $room
0422   067F 2A            mov b, [d]
0423   0680 38 00 00      mov c, 0
0424   0683             ; --- START RELATIONAL
0425   0683 D7            push a
0426   0684 11            mov a, b
0427   0685 3B 5C 17      mov d, _loc_data ; $loc
0428   0688 D7            push a
0429   0689 DA            push d
0430   068A FD 2E 01 00   mov32 cb, $00000001
0430   068E 00 00 
0431   0690 E7            pop d
0432   0691 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0433   0695 E4            pop a
0434   0696 2A            mov b, [d]
0435   0697 38 00 00      mov c, 0
0436   069A B0            cmp a, b
0437   069B FD 71         seq ; ==
0438   069D E4            pop a
0439   069E             ; --- END RELATIONAL
0440   069E C0 00 00      cmp b, 0
0441   06A1 C6 B3 06      je _if5_else
0442   06A4             _if5_TRUE:
0443   06A4             ; print("I SMELL A WUMPUS!\n"); 
0444   06A4             ; --- START FUNCTION CALL
0445   06A4 26 7A 1D      mov b, _s26 ; "I SMELL A WUMPUS!\n"
0446   06A7 FD AB         swp b
0447   06A9 D8            push b
0448   06AA 07 79 14      call print
0449   06AD 51 02 00      add sp, 2
0450   06B0             ; --- END FUNCTION CALL
0451   06B0 0A 6F 07      jmp _if5_exit
0452   06B3             _if5_else:
0453   06B3             ; if (room == loc[  2    ] || room == loc[  3    ]) { 
0454   06B3             _if6_cond:
0455   06B3 FA FF FF      lea d, [bp + -1] ; $room
0456   06B6 2A            mov b, [d]
0457   06B7 38 00 00      mov c, 0
0458   06BA             ; --- START RELATIONAL
0459   06BA D7            push a
0460   06BB 11            mov a, b
0461   06BC 3B 5C 17      mov d, _loc_data ; $loc
0462   06BF D7            push a
0463   06C0 DA            push d
0464   06C1 FD 2E 02 00   mov32 cb, $00000002
0464   06C5 00 00 
0465   06C7 E7            pop d
0466   06C8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0467   06CC E4            pop a
0468   06CD 2A            mov b, [d]
0469   06CE 38 00 00      mov c, 0
0470   06D1 B0            cmp a, b
0471   06D2 FD 71         seq ; ==
0472   06D4 E4            pop a
0473   06D5             ; --- END RELATIONAL
0474   06D5             ; --- START LOGICAL OR
0475   06D5 D7            push a
0476   06D6 11            mov a, b
0477   06D7 FA FF FF      lea d, [bp + -1] ; $room
0478   06DA 2A            mov b, [d]
0479   06DB 38 00 00      mov c, 0
0480   06DE             ; --- START RELATIONAL
0481   06DE D7            push a
0482   06DF 11            mov a, b
0483   06E0 3B 5C 17      mov d, _loc_data ; $loc
0484   06E3 D7            push a
0485   06E4 DA            push d
0486   06E5 FD 2E 03 00   mov32 cb, $00000003
0486   06E9 00 00 
0487   06EB E7            pop d
0488   06EC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0489   06F0 E4            pop a
0490   06F1 2A            mov b, [d]
0491   06F2 38 00 00      mov c, 0
0492   06F5 B0            cmp a, b
0493   06F6 FD 71         seq ; ==
0494   06F8 E4            pop a
0495   06F9             ; --- END RELATIONAL
0496   06F9 FD A8         sor a, b ; ||
0497   06FB E4            pop a
0498   06FC             ; --- END LOGICAL OR
0499   06FC C0 00 00      cmp b, 0
0500   06FF C6 11 07      je _if6_else
0501   0702             _if6_TRUE:
0502   0702             ; print("I FEEL A DRAFT\n"); 
0503   0702             ; --- START FUNCTION CALL
0504   0702 26 8D 1D      mov b, _s27 ; "I FEEL A DRAFT\n"
0505   0705 FD AB         swp b
0506   0707 D8            push b
0507   0708 07 79 14      call print
0508   070B 51 02 00      add sp, 2
0509   070E             ; --- END FUNCTION CALL
0510   070E 0A 6F 07      jmp _if6_exit
0511   0711             _if6_else:
0512   0711             ; if (room == loc[  4     ] || room == loc[  5     ]) { 
0513   0711             _if7_cond:
0514   0711 FA FF FF      lea d, [bp + -1] ; $room
0515   0714 2A            mov b, [d]
0516   0715 38 00 00      mov c, 0
0517   0718             ; --- START RELATIONAL
0518   0718 D7            push a
0519   0719 11            mov a, b
0520   071A 3B 5C 17      mov d, _loc_data ; $loc
0521   071D D7            push a
0522   071E DA            push d
0523   071F FD 2E 04 00   mov32 cb, $00000004
0523   0723 00 00 
0524   0725 E7            pop d
0525   0726 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0526   072A E4            pop a
0527   072B 2A            mov b, [d]
0528   072C 38 00 00      mov c, 0
0529   072F B0            cmp a, b
0530   0730 FD 71         seq ; ==
0531   0732 E4            pop a
0532   0733             ; --- END RELATIONAL
0533   0733             ; --- START LOGICAL OR
0534   0733 D7            push a
0535   0734 11            mov a, b
0536   0735 FA FF FF      lea d, [bp + -1] ; $room
0537   0738 2A            mov b, [d]
0538   0739 38 00 00      mov c, 0
0539   073C             ; --- START RELATIONAL
0540   073C D7            push a
0541   073D 11            mov a, b
0542   073E 3B 5C 17      mov d, _loc_data ; $loc
0543   0741 D7            push a
0544   0742 DA            push d
0545   0743 FD 2E 05 00   mov32 cb, $00000005
0545   0747 00 00 
0546   0749 E7            pop d
0547   074A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0548   074E E4            pop a
0549   074F 2A            mov b, [d]
0550   0750 38 00 00      mov c, 0
0551   0753 B0            cmp a, b
0552   0754 FD 71         seq ; ==
0553   0756 E4            pop a
0554   0757             ; --- END RELATIONAL
0555   0757 FD A8         sor a, b ; ||
0556   0759 E4            pop a
0557   075A             ; --- END LOGICAL OR
0558   075A C0 00 00      cmp b, 0
0559   075D C6 6F 07      je _if7_exit
0560   0760             _if7_TRUE:
0561   0760             ; print("BATS NEARBY!\n"); 
0562   0760             ; --- START FUNCTION CALL
0563   0760 26 9D 1D      mov b, _s28 ; "BATS NEARBY!\n"
0564   0763 FD AB         swp b
0565   0765 D8            push b
0566   0766 07 79 14      call print
0567   0769 51 02 00      add sp, 2
0568   076C             ; --- END FUNCTION CALL
0569   076C 0A 6F 07      jmp _if7_exit
0570   076F             _if7_exit:
0571   076F             _if6_exit:
0572   076F             _if5_exit:
0573   076F             _for4_update:
0574   076F FA FD FF      lea d, [bp + -3] ; $k
0575   0772 2A            mov b, [d]
0576   0773 38 00 00      mov c, 0
0577   0776 11            mov a, b
0578   0777 FD 77         inc b
0579   0779 FA FD FF      lea d, [bp + -3] ; $k
0580   077C FD 43         mov [d], b
0581   077E 27            mov b, a
0582   077F 0A 2B 06      jmp _for4_cond
0583   0782             _for4_exit:
0584   0782             ; print("YOU ARE IN ROOM "); print_unsigned(loc[      0   ]+1); print("\n"); 
0585   0782             ; --- START FUNCTION CALL
0586   0782 26 AB 1D      mov b, _s29 ; "YOU ARE IN ROOM "
0587   0785 FD AB         swp b
0588   0787 D8            push b
0589   0788 07 79 14      call print
0590   078B 51 02 00      add sp, 2
0591   078E             ; --- END FUNCTION CALL
0592   078E             ; print_unsigned(loc[      0   ]+1); print("\n"); 
0593   078E             ; --- START FUNCTION CALL
0594   078E 3B 5C 17      mov d, _loc_data ; $loc
0595   0791 D7            push a
0596   0792 DA            push d
0597   0793 FD 2E 00 00   mov32 cb, $00000000
0597   0797 00 00 
0598   0799 E7            pop d
0599   079A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0600   079E E4            pop a
0601   079F 2A            mov b, [d]
0602   07A0 38 00 00      mov c, 0
0603   07A3             ; --- START TERMS
0604   07A3 D7            push a
0605   07A4 11            mov a, b
0606   07A5 FD 2E 01 00   mov32 cb, $00000001
0606   07A9 00 00 
0607   07AB 56            add b, a
0608   07AC E4            pop a
0609   07AD             ; --- END TERMS
0610   07AD FD AB         swp b
0611   07AF D8            push b
0612   07B0 07 12 15      call print_unsigned
0613   07B3 51 02 00      add sp, 2
0614   07B6             ; --- END FUNCTION CALL
0615   07B6             ; print("\n"); 
0616   07B6             ; --- START FUNCTION CALL
0617   07B6 26 78 1D      mov b, _s25 ; "\n"
0618   07B9 FD AB         swp b
0619   07BB D8            push b
0620   07BC 07 79 14      call print
0621   07BF 51 02 00      add sp, 2
0622   07C2             ; --- END FUNCTION CALL
0623   07C2             ; print("TUNNELS LEAD TO ");  
0624   07C2             ; --- START FUNCTION CALL
0625   07C2 26 BC 1D      mov b, _s30 ; "TUNNELS LEAD TO "
0626   07C5 FD AB         swp b
0627   07C7 D8            push b
0628   07C8 07 79 14      call print
0629   07CB 51 02 00      add sp, 2
0630   07CE             ; --- END FUNCTION CALL
0631   07CE             ; print_unsigned(cave[loc[      0   ]][0]+1); print(", "); 
0632   07CE             ; --- START FUNCTION CALL
0633   07CE 3B 6A 17      mov d, _cave_data ; $cave
0634   07D1 D7            push a
0635   07D2 DA            push d
0636   07D3 3B 5C 17      mov d, _loc_data ; $loc
0637   07D6 D7            push a
0638   07D7 DA            push d
0639   07D8 FD 2E 00 00   mov32 cb, $00000000
0639   07DC 00 00 
0640   07DE E7            pop d
0641   07DF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0642   07E3 E4            pop a
0643   07E4 2A            mov b, [d]
0644   07E5 38 00 00      mov c, 0
0645   07E8 E7            pop d
0646   07E9 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0647   07ED DA            push d
0648   07EE FD 2E 00 00   mov32 cb, $00000000
0648   07F2 00 00 
0649   07F4 E7            pop d
0650   07F5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0651   07F9 E4            pop a
0652   07FA 2A            mov b, [d]
0653   07FB 38 00 00      mov c, 0
0654   07FE             ; --- START TERMS
0655   07FE D7            push a
0656   07FF 11            mov a, b
0657   0800 FD 2E 01 00   mov32 cb, $00000001
0657   0804 00 00 
0658   0806 56            add b, a
0659   0807 E4            pop a
0660   0808             ; --- END TERMS
0661   0808 FD AB         swp b
0662   080A D8            push b
0663   080B 07 12 15      call print_unsigned
0664   080E 51 02 00      add sp, 2
0665   0811             ; --- END FUNCTION CALL
0666   0811             ; print(", "); 
0667   0811             ; --- START FUNCTION CALL
0668   0811 26 CD 1D      mov b, _s31 ; ", "
0669   0814 FD AB         swp b
0670   0816 D8            push b
0671   0817 07 79 14      call print
0672   081A 51 02 00      add sp, 2
0673   081D             ; --- END FUNCTION CALL
0674   081D             ; print_unsigned(cave[loc[      0   ]][1]+1); print(", "); 
0675   081D             ; --- START FUNCTION CALL
0676   081D 3B 6A 17      mov d, _cave_data ; $cave
0677   0820 D7            push a
0678   0821 DA            push d
0679   0822 3B 5C 17      mov d, _loc_data ; $loc
0680   0825 D7            push a
0681   0826 DA            push d
0682   0827 FD 2E 00 00   mov32 cb, $00000000
0682   082B 00 00 
0683   082D E7            pop d
0684   082E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0685   0832 E4            pop a
0686   0833 2A            mov b, [d]
0687   0834 38 00 00      mov c, 0
0688   0837 E7            pop d
0689   0838 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0690   083C DA            push d
0691   083D FD 2E 01 00   mov32 cb, $00000001
0691   0841 00 00 
0692   0843 E7            pop d
0693   0844 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0694   0848 E4            pop a
0695   0849 2A            mov b, [d]
0696   084A 38 00 00      mov c, 0
0697   084D             ; --- START TERMS
0698   084D D7            push a
0699   084E 11            mov a, b
0700   084F FD 2E 01 00   mov32 cb, $00000001
0700   0853 00 00 
0701   0855 56            add b, a
0702   0856 E4            pop a
0703   0857             ; --- END TERMS
0704   0857 FD AB         swp b
0705   0859 D8            push b
0706   085A 07 12 15      call print_unsigned
0707   085D 51 02 00      add sp, 2
0708   0860             ; --- END FUNCTION CALL
0709   0860             ; print(", "); 
0710   0860             ; --- START FUNCTION CALL
0711   0860 26 CD 1D      mov b, _s31 ; ", "
0712   0863 FD AB         swp b
0713   0865 D8            push b
0714   0866 07 79 14      call print
0715   0869 51 02 00      add sp, 2
0716   086C             ; --- END FUNCTION CALL
0717   086C             ; print_unsigned(cave[loc[      0   ]][2]+1); 
0718   086C             ; --- START FUNCTION CALL
0719   086C 3B 6A 17      mov d, _cave_data ; $cave
0720   086F D7            push a
0721   0870 DA            push d
0722   0871 3B 5C 17      mov d, _loc_data ; $loc
0723   0874 D7            push a
0724   0875 DA            push d
0725   0876 FD 2E 00 00   mov32 cb, $00000000
0725   087A 00 00 
0726   087C E7            pop d
0727   087D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0728   0881 E4            pop a
0729   0882 2A            mov b, [d]
0730   0883 38 00 00      mov c, 0
0731   0886 E7            pop d
0732   0887 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0733   088B DA            push d
0734   088C FD 2E 02 00   mov32 cb, $00000002
0734   0890 00 00 
0735   0892 E7            pop d
0736   0893 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0737   0897 E4            pop a
0738   0898 2A            mov b, [d]
0739   0899 38 00 00      mov c, 0
0740   089C             ; --- START TERMS
0741   089C D7            push a
0742   089D 11            mov a, b
0743   089E FD 2E 01 00   mov32 cb, $00000001
0743   08A2 00 00 
0744   08A4 56            add b, a
0745   08A5 E4            pop a
0746   08A6             ; --- END TERMS
0747   08A6 FD AB         swp b
0748   08A8 D8            push b
0749   08A9 07 12 15      call print_unsigned
0750   08AC 51 02 00      add sp, 2
0751   08AF             ; --- END FUNCTION CALL
0752   08AF             ; print("\n\n"); 
0753   08AF             ; --- START FUNCTION CALL
0754   08AF 26 0C 18      mov b, _s2 ; "\n\n"
0755   08B2 FD AB         swp b
0756   08B4 D8            push b
0757   08B5 07 79 14      call print
0758   08B8 51 02 00      add sp, 2
0759   08BB             ; --- END FUNCTION CALL
0760   08BB F9            leave
0761   08BC 09            ret
0762   08BD             
0763   08BD             move_or_shoot:
0764   08BD F8 00 00      enter 0 ; (push bp; mov bp, sp)
0765   08C0             ; int c = -1; 
0766   08C0 52 02 00      sub sp, 2
0767   08C3             ; --- START LOCAL VAR INITIALIZATION
0768   08C3 FA FF FF      lea d, [bp + -1] ; $c
0769   08C6 DA            push d
0770   08C7 FD 2E FF FF   mov32 cb, $ffffffff
0770   08CB FF FF 
0771   08CD E7            pop d
0772   08CE FD 43         mov [d], b
0773   08D0             ; --- END LOCAL VAR INITIALIZATION
0774   08D0             ; while ((c != 'S') && (c != 'M')) { 
0775   08D0             _while8_cond:
0776   08D0 FA FF FF      lea d, [bp + -1] ; $c
0777   08D3 2A            mov b, [d]
0778   08D4 38 00 00      mov c, 0
0779   08D7             ; --- START RELATIONAL
0780   08D7 D7            push a
0781   08D8 11            mov a, b
0782   08D9 FD 2E 53 00   mov32 cb, $00000053
0782   08DD 00 00 
0783   08DF B0            cmp a, b
0784   08E0 FD 72         sneq ; !=
0785   08E2 E4            pop a
0786   08E3             ; --- END RELATIONAL
0787   08E3             ; --- START LOGICAL AND
0788   08E3 D7            push a
0789   08E4 11            mov a, b
0790   08E5 FA FF FF      lea d, [bp + -1] ; $c
0791   08E8 2A            mov b, [d]
0792   08E9 38 00 00      mov c, 0
0793   08EC             ; --- START RELATIONAL
0794   08EC D7            push a
0795   08ED 11            mov a, b
0796   08EE FD 2E 4D 00   mov32 cb, $0000004d
0796   08F2 00 00 
0797   08F4 B0            cmp a, b
0798   08F5 FD 72         sneq ; !=
0799   08F7 E4            pop a
0800   08F8             ; --- END RELATIONAL
0801   08F8 FD A7         sand a, b
0802   08FA E4            pop a
0803   08FB             ; --- END LOGICAL AND
0804   08FB C0 00 00      cmp b, 0
0805   08FE C6 17 09      je _while8_exit
0806   0901             _while8_block:
0807   0901             ; c = getlet("SHOOT OR MOVE (S-M): "); 
0808   0901 FA FF FF      lea d, [bp + -1] ; $c
0809   0904 DA            push d
0810   0905             ; --- START FUNCTION CALL
0811   0905 26 D0 1D      mov b, _s32 ; "SHOOT OR MOVE (S-M): "
0812   0908 FD AB         swp b
0813   090A D8            push b
0814   090B 07 93 04      call getlet
0815   090E 51 02 00      add sp, 2
0816   0911             ; --- END FUNCTION CALL
0817   0911 E7            pop d
0818   0912 FD 43         mov [d], b
0819   0914 0A D0 08      jmp _while8_cond
0820   0917             _while8_exit:
0821   0917             ; return (c == 'S') ? 1 : 0; 
0822   0917             _ternary9_cond:
0823   0917 FA FF FF      lea d, [bp + -1] ; $c
0824   091A 2A            mov b, [d]
0825   091B 38 00 00      mov c, 0
0826   091E             ; --- START RELATIONAL
0827   091E D7            push a
0828   091F 11            mov a, b
0829   0920 FD 2E 53 00   mov32 cb, $00000053
0829   0924 00 00 
0830   0926 B0            cmp a, b
0831   0927 FD 71         seq ; ==
0832   0929 E4            pop a
0833   092A             ; --- END RELATIONAL
0834   092A C0 00 00      cmp b, 0
0835   092D C6 39 09      je _ternary9_FALSE
0836   0930             _ternary9_TRUE:
0837   0930 FD 2E 01 00   mov32 cb, $00000001
0837   0934 00 00 
0838   0936 0A 3F 09      jmp _ternary9_exit
0839   0939             _ternary9_FALSE:
0840   0939 FD 2E 00 00   mov32 cb, $00000000
0840   093D 00 00 
0841   093F             _ternary9_exit:
0842   093F F9            leave
0843   0940 09            ret
0844   0941             
0845   0941             move_wumpus:
0846   0941 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0847   0944             ; int k; 
0848   0944 52 02 00      sub sp, 2
0849   0947             ; k = rand2() % 4; 
0850   0947 FA FF FF      lea d, [bp + -1] ; $k
0851   094A DA            push d
0852   094B             ; --- START FUNCTION CALL
0853   094B 07 C2 10      call rand2
0854   094E             ; --- START FACTORS
0855   094E D7            push a
0856   094F FD D8         push g
0857   0951 11            mov a, b
0858   0952 FD 7A         mov g, c
0859   0954 FD 2E 04 00   mov32 cb, $00000004
0859   0958 00 00 
0860   095A FD D8         push g ; save 'g' as the div instruction uses it
0861   095C AE            div a, b ; %, a: quotient, b: remainder
0862   095D 11            mov a, b
0863   095E FD F1         pop g
0864   0960 FD 38         mov c, g
0865   0962 27            mov b, a
0866   0963 FD F1         pop g
0867   0965 E4            pop a
0868   0966             ; --- END FACTORS
0869   0966 E7            pop d
0870   0967 FD 43         mov [d], b
0871   0969             ; if (k < 3) { 
0872   0969             _if12_cond:
0873   0969 FA FF FF      lea d, [bp + -1] ; $k
0874   096C 2A            mov b, [d]
0875   096D 38 00 00      mov c, 0
0876   0970             ; --- START RELATIONAL
0877   0970 D7            push a
0878   0971 11            mov a, b
0879   0972 FD 2E 03 00   mov32 cb, $00000003
0879   0976 00 00 
0880   0978 B0            cmp a, b
0881   0979 FD 73         slt ; < (signed)
0882   097B E4            pop a
0883   097C             ; --- END RELATIONAL
0884   097C C0 00 00      cmp b, 0
0885   097F C6 CB 09      je _if12_exit
0886   0982             _if12_TRUE:
0887   0982             ; loc[  1      ] = cave[loc[  1      ]][k]; 
0888   0982 3B 5C 17      mov d, _loc_data ; $loc
0889   0985 D7            push a
0890   0986 DA            push d
0891   0987 FD 2E 01 00   mov32 cb, $00000001
0891   098B 00 00 
0892   098D E7            pop d
0893   098E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0894   0992 E4            pop a
0895   0993 DA            push d
0896   0994 3B 6A 17      mov d, _cave_data ; $cave
0897   0997 D7            push a
0898   0998 DA            push d
0899   0999 3B 5C 17      mov d, _loc_data ; $loc
0900   099C D7            push a
0901   099D DA            push d
0902   099E FD 2E 01 00   mov32 cb, $00000001
0902   09A2 00 00 
0903   09A4 E7            pop d
0904   09A5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0905   09A9 E4            pop a
0906   09AA 2A            mov b, [d]
0907   09AB 38 00 00      mov c, 0
0908   09AE E7            pop d
0909   09AF FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0910   09B3 DA            push d
0911   09B4 FA FF FF      lea d, [bp + -1] ; $k
0912   09B7 2A            mov b, [d]
0913   09B8 38 00 00      mov c, 0
0914   09BB E7            pop d
0915   09BC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0916   09C0 E4            pop a
0917   09C1 2A            mov b, [d]
0918   09C2 38 00 00      mov c, 0
0919   09C5 E7            pop d
0920   09C6 FD 43         mov [d], b
0921   09C8 0A CB 09      jmp _if12_exit
0922   09CB             _if12_exit:
0923   09CB             ; if (loc[  1      ] == loc[      0   ]) { 
0924   09CB             _if13_cond:
0925   09CB 3B 5C 17      mov d, _loc_data ; $loc
0926   09CE D7            push a
0927   09CF DA            push d
0928   09D0 FD 2E 01 00   mov32 cb, $00000001
0928   09D4 00 00 
0929   09D6 E7            pop d
0930   09D7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0931   09DB E4            pop a
0932   09DC 2A            mov b, [d]
0933   09DD 38 00 00      mov c, 0
0934   09E0             ; --- START RELATIONAL
0935   09E0 D7            push a
0936   09E1 11            mov a, b
0937   09E2 3B 5C 17      mov d, _loc_data ; $loc
0938   09E5 D7            push a
0939   09E6 DA            push d
0940   09E7 FD 2E 00 00   mov32 cb, $00000000
0940   09EB 00 00 
0941   09ED E7            pop d
0942   09EE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0943   09F2 E4            pop a
0944   09F3 2A            mov b, [d]
0945   09F4 38 00 00      mov c, 0
0946   09F7 B0            cmp a, b
0947   09F8 FD 71         seq ; ==
0948   09FA E4            pop a
0949   09FB             ; --- END RELATIONAL
0950   09FB C0 00 00      cmp b, 0
0951   09FE C6 1D 0A      je _if13_exit
0952   0A01             _if13_TRUE:
0953   0A01             ; print("TSK TSK TSK - WUMPUS GOT YOU!\n"); 
0954   0A01             ; --- START FUNCTION CALL
0955   0A01 26 E6 1D      mov b, _s33 ; "TSK TSK TSK - WUMPUS GOT YOU!\n"
0956   0A04 FD AB         swp b
0957   0A06 D8            push b
0958   0A07 07 79 14      call print
0959   0A0A 51 02 00      add sp, 2
0960   0A0D             ; --- END FUNCTION CALL
0961   0A0D             ; finished =   2    ; 
0962   0A0D 3B 68 17      mov d, _finished ; $finished
0963   0A10 DA            push d
0964   0A11 FD 2E 02 00   mov32 cb, $00000002
0964   0A15 00 00 
0965   0A17 E7            pop d
0966   0A18 FD 43         mov [d], b
0967   0A1A 0A 1D 0A      jmp _if13_exit
0968   0A1D             _if13_exit:
0969   0A1D F9            leave
0970   0A1E 09            ret
0971   0A1F             
0972   0A1F             shoot:
0973   0A1F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0974   0A22             ; int path[5]; 
0975   0A22 52 0A 00      sub sp, 10
0976   0A25             ; int scratchloc = -1; 
0977   0A25 52 02 00      sub sp, 2
0978   0A28             ; --- START LOCAL VAR INITIALIZATION
0979   0A28 FA F5 FF      lea d, [bp + -11] ; $scratchloc
0980   0A2B DA            push d
0981   0A2C FD 2E FF FF   mov32 cb, $ffffffff
0981   0A30 FF FF 
0982   0A32 E7            pop d
0983   0A33 FD 43         mov [d], b
0984   0A35             ; --- END LOCAL VAR INITIALIZATION
0985   0A35             ; int len, k; 
0986   0A35 52 02 00      sub sp, 2
0987   0A38 52 02 00      sub sp, 2
0988   0A3B             ; finished =        0   ; 
0989   0A3B 3B 68 17      mov d, _finished ; $finished
0990   0A3E DA            push d
0991   0A3F FD 2E 00 00   mov32 cb, $00000000
0991   0A43 00 00 
0992   0A45 E7            pop d
0993   0A46 FD 43         mov [d], b
0994   0A48             ; len = -1; 
0995   0A48 FA F3 FF      lea d, [bp + -13] ; $len
0996   0A4B DA            push d
0997   0A4C FD 2E FF FF   mov32 cb, $ffffffff
0997   0A50 FF FF 
0998   0A52 E7            pop d
0999   0A53 FD 43         mov [d], b
1000   0A55             ; while (len < 1 || len > 5) { 
1001   0A55             _while14_cond:
1002   0A55 FA F3 FF      lea d, [bp + -13] ; $len
1003   0A58 2A            mov b, [d]
1004   0A59 38 00 00      mov c, 0
1005   0A5C             ; --- START RELATIONAL
1006   0A5C D7            push a
1007   0A5D 11            mov a, b
1008   0A5E FD 2E 01 00   mov32 cb, $00000001
1008   0A62 00 00 
1009   0A64 B0            cmp a, b
1010   0A65 FD 73         slt ; < (signed)
1011   0A67 E4            pop a
1012   0A68             ; --- END RELATIONAL
1013   0A68             ; --- START LOGICAL OR
1014   0A68 D7            push a
1015   0A69 11            mov a, b
1016   0A6A FA F3 FF      lea d, [bp + -13] ; $len
1017   0A6D 2A            mov b, [d]
1018   0A6E 38 00 00      mov c, 0
1019   0A71             ; --- START RELATIONAL
1020   0A71 D7            push a
1021   0A72 11            mov a, b
1022   0A73 FD 2E 05 00   mov32 cb, $00000005
1022   0A77 00 00 
1023   0A79 B0            cmp a, b
1024   0A7A FD 7F         sgt ; >
1025   0A7C E4            pop a
1026   0A7D             ; --- END RELATIONAL
1027   0A7D FD A8         sor a, b ; ||
1028   0A7F E4            pop a
1029   0A80             ; --- END LOGICAL OR
1030   0A80 C0 00 00      cmp b, 0
1031   0A83 C6 9C 0A      je _while14_exit
1032   0A86             _while14_block:
1033   0A86             ; len = getnum("\nNUMBER OF ROOMS (1-5): "); 
1034   0A86 FA F3 FF      lea d, [bp + -13] ; $len
1035   0A89 DA            push d
1036   0A8A             ; --- START FUNCTION CALL
1037   0A8A 26 05 1E      mov b, _s34 ; "\nNUMBER OF ROOMS (1-5): "
1038   0A8D FD AB         swp b
1039   0A8F D8            push b
1040   0A90 07 6A 04      call getnum
1041   0A93 51 02 00      add sp, 2
1042   0A96             ; --- END FUNCTION CALL
1043   0A96 E7            pop d
1044   0A97 FD 43         mov [d], b
1045   0A99 0A 55 0A      jmp _while14_cond
1046   0A9C             _while14_exit:
1047   0A9C             ; k = 0; 
1048   0A9C FA F1 FF      lea d, [bp + -15] ; $k
1049   0A9F DA            push d
1050   0AA0 FD 2E 00 00   mov32 cb, $00000000
1050   0AA4 00 00 
1051   0AA6 E7            pop d
1052   0AA7 FD 43         mov [d], b
1053   0AA9             ; while (k < len) { 
1054   0AA9             _while15_cond:
1055   0AA9 FA F1 FF      lea d, [bp + -15] ; $k
1056   0AAC 2A            mov b, [d]
1057   0AAD 38 00 00      mov c, 0
1058   0AB0             ; --- START RELATIONAL
1059   0AB0 D7            push a
1060   0AB1 11            mov a, b
1061   0AB2 FA F3 FF      lea d, [bp + -13] ; $len
1062   0AB5 2A            mov b, [d]
1063   0AB6 38 00 00      mov c, 0
1064   0AB9 B0            cmp a, b
1065   0ABA FD 73         slt ; < (signed)
1066   0ABC E4            pop a
1067   0ABD             ; --- END RELATIONAL
1068   0ABD C0 00 00      cmp b, 0
1069   0AC0 C6 70 0B      je _while15_exit
1070   0AC3             _while15_block:
1071   0AC3             ; path[k] = getnum("ROOM #") - 1; 
1072   0AC3 FA F7 FF      lea d, [bp + -9] ; $path
1073   0AC6 D7            push a
1074   0AC7 DA            push d
1075   0AC8 FA F1 FF      lea d, [bp + -15] ; $k
1076   0ACB 2A            mov b, [d]
1077   0ACC 38 00 00      mov c, 0
1078   0ACF E7            pop d
1079   0AD0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1080   0AD4 E4            pop a
1081   0AD5 DA            push d
1082   0AD6             ; --- START FUNCTION CALL
1083   0AD6 26 1E 1E      mov b, _s35 ; "ROOM #"
1084   0AD9 FD AB         swp b
1085   0ADB D8            push b
1086   0ADC 07 6A 04      call getnum
1087   0ADF 51 02 00      add sp, 2
1088   0AE2             ; --- END FUNCTION CALL
1089   0AE2             ; --- START TERMS
1090   0AE2 D7            push a
1091   0AE3 11            mov a, b
1092   0AE4 FD 2E 01 00   mov32 cb, $00000001
1092   0AE8 00 00 
1093   0AEA 60            sub a, b
1094   0AEB 27            mov b, a
1095   0AEC E4            pop a
1096   0AED             ; --- END TERMS
1097   0AED E7            pop d
1098   0AEE FD 43         mov [d], b
1099   0AF0             ; if ((k>1) && (path[k] == path[k - 2])) { 
1100   0AF0             _if16_cond:
1101   0AF0 FA F1 FF      lea d, [bp + -15] ; $k
1102   0AF3 2A            mov b, [d]
1103   0AF4 38 00 00      mov c, 0
1104   0AF7             ; --- START RELATIONAL
1105   0AF7 D7            push a
1106   0AF8 11            mov a, b
1107   0AF9 FD 2E 01 00   mov32 cb, $00000001
1107   0AFD 00 00 
1108   0AFF B0            cmp a, b
1109   0B00 FD 7F         sgt ; >
1110   0B02 E4            pop a
1111   0B03             ; --- END RELATIONAL
1112   0B03             ; --- START LOGICAL AND
1113   0B03 D7            push a
1114   0B04 11            mov a, b
1115   0B05 FA F7 FF      lea d, [bp + -9] ; $path
1116   0B08 D7            push a
1117   0B09 DA            push d
1118   0B0A FA F1 FF      lea d, [bp + -15] ; $k
1119   0B0D 2A            mov b, [d]
1120   0B0E 38 00 00      mov c, 0
1121   0B11 E7            pop d
1122   0B12 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1123   0B16 E4            pop a
1124   0B17 2A            mov b, [d]
1125   0B18 38 00 00      mov c, 0
1126   0B1B             ; --- START RELATIONAL
1127   0B1B D7            push a
1128   0B1C 11            mov a, b
1129   0B1D FA F7 FF      lea d, [bp + -9] ; $path
1130   0B20 D7            push a
1131   0B21 DA            push d
1132   0B22 FA F1 FF      lea d, [bp + -15] ; $k
1133   0B25 2A            mov b, [d]
1134   0B26 38 00 00      mov c, 0
1135   0B29             ; --- START TERMS
1136   0B29 D7            push a
1137   0B2A 11            mov a, b
1138   0B2B FD 2E 02 00   mov32 cb, $00000002
1138   0B2F 00 00 
1139   0B31 60            sub a, b
1140   0B32 27            mov b, a
1141   0B33 E4            pop a
1142   0B34             ; --- END TERMS
1143   0B34 E7            pop d
1144   0B35 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1145   0B39 E4            pop a
1146   0B3A 2A            mov b, [d]
1147   0B3B 38 00 00      mov c, 0
1148   0B3E B0            cmp a, b
1149   0B3F FD 71         seq ; ==
1150   0B41 E4            pop a
1151   0B42             ; --- END RELATIONAL
1152   0B42 FD A7         sand a, b
1153   0B44 E4            pop a
1154   0B45             ; --- END LOGICAL AND
1155   0B45 C0 00 00      cmp b, 0
1156   0B48 C6 5D 0B      je _if16_exit
1157   0B4B             _if16_TRUE:
1158   0B4B             ; print("ARROWS ARENT THAT CROOKED - TRY ANOTHER ROOM\n"); 
1159   0B4B             ; --- START FUNCTION CALL
1160   0B4B 26 25 1E      mov b, _s36 ; "ARROWS ARENT THAT CROOKED - TRY ANOTHER ROOM\n"
1161   0B4E FD AB         swp b
1162   0B50 D8            push b
1163   0B51 07 79 14      call print
1164   0B54 51 02 00      add sp, 2
1165   0B57             ; --- END FUNCTION CALL
1166   0B57             ; continue;  
1167   0B57 0A A9 0A      jmp _while15_cond ; while continue
1168   0B5A 0A 5D 0B      jmp _if16_exit
1169   0B5D             _if16_exit:
1170   0B5D             ; k++; 
1171   0B5D FA F1 FF      lea d, [bp + -15] ; $k
1172   0B60 2A            mov b, [d]
1173   0B61 38 00 00      mov c, 0
1174   0B64 11            mov a, b
1175   0B65 FD 77         inc b
1176   0B67 FA F1 FF      lea d, [bp + -15] ; $k
1177   0B6A FD 43         mov [d], b
1178   0B6C 27            mov b, a
1179   0B6D 0A A9 0A      jmp _while15_cond
1180   0B70             _while15_exit:
1181   0B70             ; scratchloc = loc[      0   ]; 
1182   0B70 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1183   0B73 DA            push d
1184   0B74 3B 5C 17      mov d, _loc_data ; $loc
1185   0B77 D7            push a
1186   0B78 DA            push d
1187   0B79 FD 2E 00 00   mov32 cb, $00000000
1187   0B7D 00 00 
1188   0B7F E7            pop d
1189   0B80 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1190   0B84 E4            pop a
1191   0B85 2A            mov b, [d]
1192   0B86 38 00 00      mov c, 0
1193   0B89 E7            pop d
1194   0B8A FD 43         mov [d], b
1195   0B8C             ; for (k = 0; k < len; k++) { 
1196   0B8C             _for17_init:
1197   0B8C FA F1 FF      lea d, [bp + -15] ; $k
1198   0B8F DA            push d
1199   0B90 FD 2E 00 00   mov32 cb, $00000000
1199   0B94 00 00 
1200   0B96 E7            pop d
1201   0B97 FD 43         mov [d], b
1202   0B99             _for17_cond:
1203   0B99 FA F1 FF      lea d, [bp + -15] ; $k
1204   0B9C 2A            mov b, [d]
1205   0B9D 38 00 00      mov c, 0
1206   0BA0             ; --- START RELATIONAL
1207   0BA0 D7            push a
1208   0BA1 11            mov a, b
1209   0BA2 FA F3 FF      lea d, [bp + -13] ; $len
1210   0BA5 2A            mov b, [d]
1211   0BA6 38 00 00      mov c, 0
1212   0BA9 B0            cmp a, b
1213   0BAA FD 73         slt ; < (signed)
1214   0BAC E4            pop a
1215   0BAD             ; --- END RELATIONAL
1216   0BAD C0 00 00      cmp b, 0
1217   0BB0 C6 92 0D      je _for17_exit
1218   0BB3             _for17_block:
1219   0BB3             ; if ((cave[scratchloc][0] == path[k]) || 
1220   0BB3             _if18_cond:
1221   0BB3 3B 6A 17      mov d, _cave_data ; $cave
1222   0BB6 D7            push a
1223   0BB7 DA            push d
1224   0BB8 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1225   0BBB 2A            mov b, [d]
1226   0BBC 38 00 00      mov c, 0
1227   0BBF E7            pop d
1228   0BC0 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1229   0BC4 DA            push d
1230   0BC5 FD 2E 00 00   mov32 cb, $00000000
1230   0BC9 00 00 
1231   0BCB E7            pop d
1232   0BCC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1233   0BD0 E4            pop a
1234   0BD1 2A            mov b, [d]
1235   0BD2 38 00 00      mov c, 0
1236   0BD5             ; --- START RELATIONAL
1237   0BD5 D7            push a
1238   0BD6 11            mov a, b
1239   0BD7 FA F7 FF      lea d, [bp + -9] ; $path
1240   0BDA D7            push a
1241   0BDB DA            push d
1242   0BDC FA F1 FF      lea d, [bp + -15] ; $k
1243   0BDF 2A            mov b, [d]
1244   0BE0 38 00 00      mov c, 0
1245   0BE3 E7            pop d
1246   0BE4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1247   0BE8 E4            pop a
1248   0BE9 2A            mov b, [d]
1249   0BEA 38 00 00      mov c, 0
1250   0BED B0            cmp a, b
1251   0BEE FD 71         seq ; ==
1252   0BF0 E4            pop a
1253   0BF1             ; --- END RELATIONAL
1254   0BF1             ; --- START LOGICAL OR
1255   0BF1 D7            push a
1256   0BF2 11            mov a, b
1257   0BF3 3B 6A 17      mov d, _cave_data ; $cave
1258   0BF6 D7            push a
1259   0BF7 DA            push d
1260   0BF8 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1261   0BFB 2A            mov b, [d]
1262   0BFC 38 00 00      mov c, 0
1263   0BFF E7            pop d
1264   0C00 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1265   0C04 DA            push d
1266   0C05 FD 2E 01 00   mov32 cb, $00000001
1266   0C09 00 00 
1267   0C0B E7            pop d
1268   0C0C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1269   0C10 E4            pop a
1270   0C11 2A            mov b, [d]
1271   0C12 38 00 00      mov c, 0
1272   0C15             ; --- START RELATIONAL
1273   0C15 D7            push a
1274   0C16 11            mov a, b
1275   0C17 FA F7 FF      lea d, [bp + -9] ; $path
1276   0C1A D7            push a
1277   0C1B DA            push d
1278   0C1C FA F1 FF      lea d, [bp + -15] ; $k
1279   0C1F 2A            mov b, [d]
1280   0C20 38 00 00      mov c, 0
1281   0C23 E7            pop d
1282   0C24 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1283   0C28 E4            pop a
1284   0C29 2A            mov b, [d]
1285   0C2A 38 00 00      mov c, 0
1286   0C2D B0            cmp a, b
1287   0C2E FD 71         seq ; ==
1288   0C30 E4            pop a
1289   0C31             ; --- END RELATIONAL
1290   0C31 FD A8         sor a, b ; ||
1291   0C33 11            mov a, b
1292   0C34 3B 6A 17      mov d, _cave_data ; $cave
1293   0C37 D7            push a
1294   0C38 DA            push d
1295   0C39 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1296   0C3C 2A            mov b, [d]
1297   0C3D 38 00 00      mov c, 0
1298   0C40 E7            pop d
1299   0C41 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1300   0C45 DA            push d
1301   0C46 FD 2E 02 00   mov32 cb, $00000002
1301   0C4A 00 00 
1302   0C4C E7            pop d
1303   0C4D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1304   0C51 E4            pop a
1305   0C52 2A            mov b, [d]
1306   0C53 38 00 00      mov c, 0
1307   0C56             ; --- START RELATIONAL
1308   0C56 D7            push a
1309   0C57 11            mov a, b
1310   0C58 FA F7 FF      lea d, [bp + -9] ; $path
1311   0C5B D7            push a
1312   0C5C DA            push d
1313   0C5D FA F1 FF      lea d, [bp + -15] ; $k
1314   0C60 2A            mov b, [d]
1315   0C61 38 00 00      mov c, 0
1316   0C64 E7            pop d
1317   0C65 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1318   0C69 E4            pop a
1319   0C6A 2A            mov b, [d]
1320   0C6B 38 00 00      mov c, 0
1321   0C6E B0            cmp a, b
1322   0C6F FD 71         seq ; ==
1323   0C71 E4            pop a
1324   0C72             ; --- END RELATIONAL
1325   0C72 FD A8         sor a, b ; ||
1326   0C74 E4            pop a
1327   0C75             ; --- END LOGICAL OR
1328   0C75 C0 00 00      cmp b, 0
1329   0C78 C6 9B 0C      je _if18_else
1330   0C7B             _if18_TRUE:
1331   0C7B             ; scratchloc = path[k]; 
1332   0C7B FA F5 FF      lea d, [bp + -11] ; $scratchloc
1333   0C7E DA            push d
1334   0C7F FA F7 FF      lea d, [bp + -9] ; $path
1335   0C82 D7            push a
1336   0C83 DA            push d
1337   0C84 FA F1 FF      lea d, [bp + -15] ; $k
1338   0C87 2A            mov b, [d]
1339   0C88 38 00 00      mov c, 0
1340   0C8B E7            pop d
1341   0C8C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1342   0C90 E4            pop a
1343   0C91 2A            mov b, [d]
1344   0C92 38 00 00      mov c, 0
1345   0C95 E7            pop d
1346   0C96 FD 43         mov [d], b
1347   0C98 0A D9 0C      jmp _if18_exit
1348   0C9B             _if18_else:
1349   0C9B             ; scratchloc = cave[scratchloc][rand2()%3]; 
1350   0C9B FA F5 FF      lea d, [bp + -11] ; $scratchloc
1351   0C9E DA            push d
1352   0C9F 3B 6A 17      mov d, _cave_data ; $cave
1353   0CA2 D7            push a
1354   0CA3 DA            push d
1355   0CA4 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1356   0CA7 2A            mov b, [d]
1357   0CA8 38 00 00      mov c, 0
1358   0CAB E7            pop d
1359   0CAC FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1360   0CB0 DA            push d
1361   0CB1             ; --- START FUNCTION CALL
1362   0CB1 07 C2 10      call rand2
1363   0CB4             ; --- START FACTORS
1364   0CB4 D7            push a
1365   0CB5 FD D8         push g
1366   0CB7 11            mov a, b
1367   0CB8 FD 7A         mov g, c
1368   0CBA FD 2E 03 00   mov32 cb, $00000003
1368   0CBE 00 00 
1369   0CC0 FD D8         push g ; save 'g' as the div instruction uses it
1370   0CC2 AE            div a, b ; %, a: quotient, b: remainder
1371   0CC3 11            mov a, b
1372   0CC4 FD F1         pop g
1373   0CC6 FD 38         mov c, g
1374   0CC8 27            mov b, a
1375   0CC9 FD F1         pop g
1376   0CCB E4            pop a
1377   0CCC             ; --- END FACTORS
1378   0CCC E7            pop d
1379   0CCD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1380   0CD1 E4            pop a
1381   0CD2 2A            mov b, [d]
1382   0CD3 38 00 00      mov c, 0
1383   0CD6 E7            pop d
1384   0CD7 FD 43         mov [d], b
1385   0CD9             _if18_exit:
1386   0CD9             ; if (scratchloc == loc[  1      ]) { 
1387   0CD9             _if23_cond:
1388   0CD9 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1389   0CDC 2A            mov b, [d]
1390   0CDD 38 00 00      mov c, 0
1391   0CE0             ; --- START RELATIONAL
1392   0CE0 D7            push a
1393   0CE1 11            mov a, b
1394   0CE2 3B 5C 17      mov d, _loc_data ; $loc
1395   0CE5 D7            push a
1396   0CE6 DA            push d
1397   0CE7 FD 2E 01 00   mov32 cb, $00000001
1397   0CEB 00 00 
1398   0CED E7            pop d
1399   0CEE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1400   0CF2 E4            pop a
1401   0CF3 2A            mov b, [d]
1402   0CF4 38 00 00      mov c, 0
1403   0CF7 B0            cmp a, b
1404   0CF8 FD 71         seq ; ==
1405   0CFA E4            pop a
1406   0CFB             ; --- END RELATIONAL
1407   0CFB C0 00 00      cmp b, 0
1408   0CFE C6 1D 0D      je _if23_else
1409   0D01             _if23_TRUE:
1410   0D01             ; print("AHA! YOU GOT THE WUMPUS!\n"); 
1411   0D01             ; --- START FUNCTION CALL
1412   0D01 26 53 1E      mov b, _s37 ; "AHA! YOU GOT THE WUMPUS!\n"
1413   0D04 FD AB         swp b
1414   0D06 D8            push b
1415   0D07 07 79 14      call print
1416   0D0A 51 02 00      add sp, 2
1417   0D0D             ; --- END FUNCTION CALL
1418   0D0D             ; finished =        1   ; 
1419   0D0D 3B 68 17      mov d, _finished ; $finished
1420   0D10 DA            push d
1421   0D11 FD 2E 01 00   mov32 cb, $00000001
1421   0D15 00 00 
1422   0D17 E7            pop d
1423   0D18 FD 43         mov [d], b
1424   0D1A 0A 61 0D      jmp _if23_exit
1425   0D1D             _if23_else:
1426   0D1D             ; if (scratchloc == loc[      0   ]) { 
1427   0D1D             _if24_cond:
1428   0D1D FA F5 FF      lea d, [bp + -11] ; $scratchloc
1429   0D20 2A            mov b, [d]
1430   0D21 38 00 00      mov c, 0
1431   0D24             ; --- START RELATIONAL
1432   0D24 D7            push a
1433   0D25 11            mov a, b
1434   0D26 3B 5C 17      mov d, _loc_data ; $loc
1435   0D29 D7            push a
1436   0D2A DA            push d
1437   0D2B FD 2E 00 00   mov32 cb, $00000000
1437   0D2F 00 00 
1438   0D31 E7            pop d
1439   0D32 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1440   0D36 E4            pop a
1441   0D37 2A            mov b, [d]
1442   0D38 38 00 00      mov c, 0
1443   0D3B B0            cmp a, b
1444   0D3C FD 71         seq ; ==
1445   0D3E E4            pop a
1446   0D3F             ; --- END RELATIONAL
1447   0D3F C0 00 00      cmp b, 0
1448   0D42 C6 61 0D      je _if24_exit
1449   0D45             _if24_TRUE:
1450   0D45             ; print("OUCH! ARROW GOT YOU!\n"); 
1451   0D45             ; --- START FUNCTION CALL
1452   0D45 26 6D 1E      mov b, _s38 ; "OUCH! ARROW GOT YOU!\n"
1453   0D48 FD AB         swp b
1454   0D4A D8            push b
1455   0D4B 07 79 14      call print
1456   0D4E 51 02 00      add sp, 2
1457   0D51             ; --- END FUNCTION CALL
1458   0D51             ; finished =   2    ; 
1459   0D51 3B 68 17      mov d, _finished ; $finished
1460   0D54 DA            push d
1461   0D55 FD 2E 02 00   mov32 cb, $00000002
1461   0D59 00 00 
1462   0D5B E7            pop d
1463   0D5C FD 43         mov [d], b
1464   0D5E 0A 61 0D      jmp _if24_exit
1465   0D61             _if24_exit:
1466   0D61             _if23_exit:
1467   0D61             ; if (finished !=        0   ) { 
1468   0D61             _if25_cond:
1469   0D61 3B 68 17      mov d, _finished ; $finished
1470   0D64 2A            mov b, [d]
1471   0D65 38 00 00      mov c, 0
1472   0D68             ; --- START RELATIONAL
1473   0D68 D7            push a
1474   0D69 11            mov a, b
1475   0D6A FD 2E 00 00   mov32 cb, $00000000
1475   0D6E 00 00 
1476   0D70 B0            cmp a, b
1477   0D71 FD 72         sneq ; !=
1478   0D73 E4            pop a
1479   0D74             ; --- END RELATIONAL
1480   0D74 C0 00 00      cmp b, 0
1481   0D77 C6 7F 0D      je _if25_exit
1482   0D7A             _if25_TRUE:
1483   0D7A             ; return; 
1484   0D7A F9            leave
1485   0D7B 09            ret
1486   0D7C 0A 7F 0D      jmp _if25_exit
1487   0D7F             _if25_exit:
1488   0D7F             _for17_update:
1489   0D7F FA F1 FF      lea d, [bp + -15] ; $k
1490   0D82 2A            mov b, [d]
1491   0D83 38 00 00      mov c, 0
1492   0D86 11            mov a, b
1493   0D87 FD 77         inc b
1494   0D89 FA F1 FF      lea d, [bp + -15] ; $k
1495   0D8C FD 43         mov [d], b
1496   0D8E 27            mov b, a
1497   0D8F 0A 99 0B      jmp _for17_cond
1498   0D92             _for17_exit:
1499   0D92             ; print("MISSED\n"); 
1500   0D92             ; --- START FUNCTION CALL
1501   0D92 26 83 1E      mov b, _s39 ; "MISSED\n"
1502   0D95 FD AB         swp b
1503   0D97 D8            push b
1504   0D98 07 79 14      call print
1505   0D9B 51 02 00      add sp, 2
1506   0D9E             ; --- END FUNCTION CALL
1507   0D9E             ; move_wumpus(); 
1508   0D9E             ; --- START FUNCTION CALL
1509   0D9E 07 41 09      call move_wumpus
1510   0DA1             ; if (--arrows <= 0) { 
1511   0DA1             _if26_cond:
1512   0DA1 3B 54 17      mov d, _arrows ; $arrows
1513   0DA4 2A            mov b, [d]
1514   0DA5 FD 7D         dec b
1515   0DA7 3B 54 17      mov d, _arrows ; $arrows
1516   0DAA FD 43         mov [d], b
1517   0DAC             ; --- START RELATIONAL
1518   0DAC D7            push a
1519   0DAD 11            mov a, b
1520   0DAE FD 2E 00 00   mov32 cb, $00000000
1520   0DB2 00 00 
1521   0DB4 B0            cmp a, b
1522   0DB5 FD 74         sle ; <= (signed)
1523   0DB7 E4            pop a
1524   0DB8             ; --- END RELATIONAL
1525   0DB8 C0 00 00      cmp b, 0
1526   0DBB C6 CE 0D      je _if26_exit
1527   0DBE             _if26_TRUE:
1528   0DBE             ; finished =   2    ; 
1529   0DBE 3B 68 17      mov d, _finished ; $finished
1530   0DC1 DA            push d
1531   0DC2 FD 2E 02 00   mov32 cb, $00000002
1531   0DC6 00 00 
1532   0DC8 E7            pop d
1533   0DC9 FD 43         mov [d], b
1534   0DCB 0A CE 0D      jmp _if26_exit
1535   0DCE             _if26_exit:
1536   0DCE F9            leave
1537   0DCF 09            ret
1538   0DD0             
1539   0DD0             move:
1540   0DD0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1541   0DD3             ; int scratchloc; 
1542   0DD3 52 02 00      sub sp, 2
1543   0DD6             ; scratchloc = -1; 
1544   0DD6 FA FF FF      lea d, [bp + -1] ; $scratchloc
1545   0DD9 DA            push d
1546   0DDA FD 2E FF FF   mov32 cb, $ffffffff
1546   0DDE FF FF 
1547   0DE0 E7            pop d
1548   0DE1 FD 43         mov [d], b
1549   0DE3             ; while (scratchloc == -1) { 
1550   0DE3             _while27_cond:
1551   0DE3 FA FF FF      lea d, [bp + -1] ; $scratchloc
1552   0DE6 2A            mov b, [d]
1553   0DE7 38 00 00      mov c, 0
1554   0DEA             ; --- START RELATIONAL
1555   0DEA D7            push a
1556   0DEB 11            mov a, b
1557   0DEC FD 2E FF FF   mov32 cb, $ffffffff
1557   0DF0 FF FF 
1558   0DF2 B0            cmp a, b
1559   0DF3 FD 71         seq ; ==
1560   0DF5 E4            pop a
1561   0DF6             ; --- END RELATIONAL
1562   0DF6 C0 00 00      cmp b, 0
1563   0DF9 C6 6A 0F      je _while27_exit
1564   0DFC             _while27_block:
1565   0DFC             ; scratchloc = getnum("\nWHERE TO: ")- 1; 
1566   0DFC FA FF FF      lea d, [bp + -1] ; $scratchloc
1567   0DFF DA            push d
1568   0E00             ; --- START FUNCTION CALL
1569   0E00 26 8B 1E      mov b, _s40 ; "\nWHERE TO: "
1570   0E03 FD AB         swp b
1571   0E05 D8            push b
1572   0E06 07 6A 04      call getnum
1573   0E09 51 02 00      add sp, 2
1574   0E0C             ; --- END FUNCTION CALL
1575   0E0C             ; --- START TERMS
1576   0E0C D7            push a
1577   0E0D 11            mov a, b
1578   0E0E FD 2E 01 00   mov32 cb, $00000001
1578   0E12 00 00 
1579   0E14 60            sub a, b
1580   0E15 27            mov b, a
1581   0E16 E4            pop a
1582   0E17             ; --- END TERMS
1583   0E17 E7            pop d
1584   0E18 FD 43         mov [d], b
1585   0E1A             ; if (scratchloc < 0 || scratchloc > 19) { 
1586   0E1A             _if28_cond:
1587   0E1A FA FF FF      lea d, [bp + -1] ; $scratchloc
1588   0E1D 2A            mov b, [d]
1589   0E1E 38 00 00      mov c, 0
1590   0E21             ; --- START RELATIONAL
1591   0E21 D7            push a
1592   0E22 11            mov a, b
1593   0E23 FD 2E 00 00   mov32 cb, $00000000
1593   0E27 00 00 
1594   0E29 B0            cmp a, b
1595   0E2A FD 73         slt ; < (signed)
1596   0E2C E4            pop a
1597   0E2D             ; --- END RELATIONAL
1598   0E2D             ; --- START LOGICAL OR
1599   0E2D D7            push a
1600   0E2E 11            mov a, b
1601   0E2F FA FF FF      lea d, [bp + -1] ; $scratchloc
1602   0E32 2A            mov b, [d]
1603   0E33 38 00 00      mov c, 0
1604   0E36             ; --- START RELATIONAL
1605   0E36 D7            push a
1606   0E37 11            mov a, b
1607   0E38 FD 2E 13 00   mov32 cb, $00000013
1607   0E3C 00 00 
1608   0E3E B0            cmp a, b
1609   0E3F FD 7F         sgt ; >
1610   0E41 E4            pop a
1611   0E42             ; --- END RELATIONAL
1612   0E42 FD A8         sor a, b ; ||
1613   0E44 E4            pop a
1614   0E45             ; --- END LOGICAL OR
1615   0E45 C0 00 00      cmp b, 0
1616   0E48 C6 5E 0E      je _if28_exit
1617   0E4B             _if28_TRUE:
1618   0E4B             ; scratchloc = -1; 
1619   0E4B FA FF FF      lea d, [bp + -1] ; $scratchloc
1620   0E4E DA            push d
1621   0E4F FD 2E FF FF   mov32 cb, $ffffffff
1621   0E53 FF FF 
1622   0E55 E7            pop d
1623   0E56 FD 43         mov [d], b
1624   0E58             ; continue; 
1625   0E58 0A E3 0D      jmp _while27_cond ; while continue
1626   0E5B 0A 5E 0E      jmp _if28_exit
1627   0E5E             _if28_exit:
1628   0E5E             ; if ((cave[loc[      0   ]][0] != scratchloc) & 
1629   0E5E             _if29_cond:
1630   0E5E 3B 6A 17      mov d, _cave_data ; $cave
1631   0E61 D7            push a
1632   0E62 DA            push d
1633   0E63 3B 5C 17      mov d, _loc_data ; $loc
1634   0E66 D7            push a
1635   0E67 DA            push d
1636   0E68 FD 2E 00 00   mov32 cb, $00000000
1636   0E6C 00 00 
1637   0E6E E7            pop d
1638   0E6F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1639   0E73 E4            pop a
1640   0E74 2A            mov b, [d]
1641   0E75 38 00 00      mov c, 0
1642   0E78 E7            pop d
1643   0E79 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1644   0E7D DA            push d
1645   0E7E FD 2E 00 00   mov32 cb, $00000000
1645   0E82 00 00 
1646   0E84 E7            pop d
1647   0E85 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1648   0E89 E4            pop a
1649   0E8A 2A            mov b, [d]
1650   0E8B 38 00 00      mov c, 0
1651   0E8E             ; --- START RELATIONAL
1652   0E8E D7            push a
1653   0E8F 11            mov a, b
1654   0E90 FA FF FF      lea d, [bp + -1] ; $scratchloc
1655   0E93 2A            mov b, [d]
1656   0E94 38 00 00      mov c, 0
1657   0E97 B0            cmp a, b
1658   0E98 FD 72         sneq ; !=
1659   0E9A E4            pop a
1660   0E9B             ; --- END RELATIONAL
1661   0E9B D7            push a
1662   0E9C 11            mov a, b
1663   0E9D 3B 6A 17      mov d, _cave_data ; $cave
1664   0EA0 D7            push a
1665   0EA1 DA            push d
1666   0EA2 3B 5C 17      mov d, _loc_data ; $loc
1667   0EA5 D7            push a
1668   0EA6 DA            push d
1669   0EA7 FD 2E 00 00   mov32 cb, $00000000
1669   0EAB 00 00 
1670   0EAD E7            pop d
1671   0EAE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1672   0EB2 E4            pop a
1673   0EB3 2A            mov b, [d]
1674   0EB4 38 00 00      mov c, 0
1675   0EB7 E7            pop d
1676   0EB8 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1677   0EBC DA            push d
1678   0EBD FD 2E 01 00   mov32 cb, $00000001
1678   0EC1 00 00 
1679   0EC3 E7            pop d
1680   0EC4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1681   0EC8 E4            pop a
1682   0EC9 2A            mov b, [d]
1683   0ECA 38 00 00      mov c, 0
1684   0ECD             ; --- START RELATIONAL
1685   0ECD D7            push a
1686   0ECE 11            mov a, b
1687   0ECF FA FF FF      lea d, [bp + -1] ; $scratchloc
1688   0ED2 2A            mov b, [d]
1689   0ED3 38 00 00      mov c, 0
1690   0ED6 B0            cmp a, b
1691   0ED7 FD 72         sneq ; !=
1692   0ED9 E4            pop a
1693   0EDA             ; --- END RELATIONAL
1694   0EDA FD 92         and b, a ; &
1695   0EDC 11            mov a, b
1696   0EDD 3B 6A 17      mov d, _cave_data ; $cave
1697   0EE0 D7            push a
1698   0EE1 DA            push d
1699   0EE2 3B 5C 17      mov d, _loc_data ; $loc
1700   0EE5 D7            push a
1701   0EE6 DA            push d
1702   0EE7 FD 2E 00 00   mov32 cb, $00000000
1702   0EEB 00 00 
1703   0EED E7            pop d
1704   0EEE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1705   0EF2 E4            pop a
1706   0EF3 2A            mov b, [d]
1707   0EF4 38 00 00      mov c, 0
1708   0EF7 E7            pop d
1709   0EF8 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1710   0EFC DA            push d
1711   0EFD FD 2E 02 00   mov32 cb, $00000002
1711   0F01 00 00 
1712   0F03 E7            pop d
1713   0F04 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1714   0F08 E4            pop a
1715   0F09 2A            mov b, [d]
1716   0F0A 38 00 00      mov c, 0
1717   0F0D             ; --- START RELATIONAL
1718   0F0D D7            push a
1719   0F0E 11            mov a, b
1720   0F0F FA FF FF      lea d, [bp + -1] ; $scratchloc
1721   0F12 2A            mov b, [d]
1722   0F13 38 00 00      mov c, 0
1723   0F16 B0            cmp a, b
1724   0F17 FD 72         sneq ; !=
1725   0F19 E4            pop a
1726   0F1A             ; --- END RELATIONAL
1727   0F1A FD 92         and b, a ; &
1728   0F1C 11            mov a, b
1729   0F1D 3B 5C 17      mov d, _loc_data ; $loc
1730   0F20 D7            push a
1731   0F21 DA            push d
1732   0F22 FD 2E 00 00   mov32 cb, $00000000
1732   0F26 00 00 
1733   0F28 E7            pop d
1734   0F29 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1735   0F2D E4            pop a
1736   0F2E 2A            mov b, [d]
1737   0F2F 38 00 00      mov c, 0
1738   0F32             ; --- START RELATIONAL
1739   0F32 D7            push a
1740   0F33 11            mov a, b
1741   0F34 FA FF FF      lea d, [bp + -1] ; $scratchloc
1742   0F37 2A            mov b, [d]
1743   0F38 38 00 00      mov c, 0
1744   0F3B B0            cmp a, b
1745   0F3C FD 72         sneq ; !=
1746   0F3E E4            pop a
1747   0F3F             ; --- END RELATIONAL
1748   0F3F FD 92         and b, a ; &
1749   0F41 E4            pop a
1750   0F42 C0 00 00      cmp b, 0
1751   0F45 C6 67 0F      je _if29_exit
1752   0F48             _if29_TRUE:
1753   0F48             ; print("NOT POSSIBLE\n"); 
1754   0F48             ; --- START FUNCTION CALL
1755   0F48 26 97 1E      mov b, _s41 ; "NOT POSSIBLE\n"
1756   0F4B FD AB         swp b
1757   0F4D D8            push b
1758   0F4E 07 79 14      call print
1759   0F51 51 02 00      add sp, 2
1760   0F54             ; --- END FUNCTION CALL
1761   0F54             ; scratchloc = -1; 
1762   0F54 FA FF FF      lea d, [bp + -1] ; $scratchloc
1763   0F57 DA            push d
1764   0F58 FD 2E FF FF   mov32 cb, $ffffffff
1764   0F5C FF FF 
1765   0F5E E7            pop d
1766   0F5F FD 43         mov [d], b
1767   0F61             ; continue; 
1768   0F61 0A E3 0D      jmp _while27_cond ; while continue
1769   0F64 0A 67 0F      jmp _if29_exit
1770   0F67             _if29_exit:
1771   0F67 0A E3 0D      jmp _while27_cond
1772   0F6A             _while27_exit:
1773   0F6A             ; loc[      0   ] = scratchloc; 
1774   0F6A 3B 5C 17      mov d, _loc_data ; $loc
1775   0F6D D7            push a
1776   0F6E DA            push d
1777   0F6F FD 2E 00 00   mov32 cb, $00000000
1777   0F73 00 00 
1778   0F75 E7            pop d
1779   0F76 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1780   0F7A E4            pop a
1781   0F7B DA            push d
1782   0F7C FA FF FF      lea d, [bp + -1] ; $scratchloc
1783   0F7F 2A            mov b, [d]
1784   0F80 38 00 00      mov c, 0
1785   0F83 E7            pop d
1786   0F84 FD 43         mov [d], b
1787   0F86             ; while ((scratchloc == loc[  4     ]) || (scratchloc == loc[  5     ])) { 
1788   0F86             _while30_cond:
1789   0F86 FA FF FF      lea d, [bp + -1] ; $scratchloc
1790   0F89 2A            mov b, [d]
1791   0F8A 38 00 00      mov c, 0
1792   0F8D             ; --- START RELATIONAL
1793   0F8D D7            push a
1794   0F8E 11            mov a, b
1795   0F8F 3B 5C 17      mov d, _loc_data ; $loc
1796   0F92 D7            push a
1797   0F93 DA            push d
1798   0F94 FD 2E 04 00   mov32 cb, $00000004
1798   0F98 00 00 
1799   0F9A E7            pop d
1800   0F9B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1801   0F9F E4            pop a
1802   0FA0 2A            mov b, [d]
1803   0FA1 38 00 00      mov c, 0
1804   0FA4 B0            cmp a, b
1805   0FA5 FD 71         seq ; ==
1806   0FA7 E4            pop a
1807   0FA8             ; --- END RELATIONAL
1808   0FA8             ; --- START LOGICAL OR
1809   0FA8 D7            push a
1810   0FA9 11            mov a, b
1811   0FAA FA FF FF      lea d, [bp + -1] ; $scratchloc
1812   0FAD 2A            mov b, [d]
1813   0FAE 38 00 00      mov c, 0
1814   0FB1             ; --- START RELATIONAL
1815   0FB1 D7            push a
1816   0FB2 11            mov a, b
1817   0FB3 3B 5C 17      mov d, _loc_data ; $loc
1818   0FB6 D7            push a
1819   0FB7 DA            push d
1820   0FB8 FD 2E 05 00   mov32 cb, $00000005
1820   0FBC 00 00 
1821   0FBE E7            pop d
1822   0FBF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1823   0FC3 E4            pop a
1824   0FC4 2A            mov b, [d]
1825   0FC5 38 00 00      mov c, 0
1826   0FC8 B0            cmp a, b
1827   0FC9 FD 71         seq ; ==
1828   0FCB E4            pop a
1829   0FCC             ; --- END RELATIONAL
1830   0FCC FD A8         sor a, b ; ||
1831   0FCE E4            pop a
1832   0FCF             ; --- END LOGICAL OR
1833   0FCF C0 00 00      cmp b, 0
1834   0FD2 C6 1B 10      je _while30_exit
1835   0FD5             _while30_block:
1836   0FD5             ; print("ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"); 
1837   0FD5             ; --- START FUNCTION CALL
1838   0FD5 26 A5 1E      mov b, _s42 ; "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"
1839   0FD8 FD AB         swp b
1840   0FDA D8            push b
1841   0FDB 07 79 14      call print
1842   0FDE 51 02 00      add sp, 2
1843   0FE1             ; --- END FUNCTION CALL
1844   0FE1             ; scratchloc = loc[      0   ] = rand2()%20; 
1845   0FE1 FA FF FF      lea d, [bp + -1] ; $scratchloc
1846   0FE4 DA            push d
1847   0FE5 3B 5C 17      mov d, _loc_data ; $loc
1848   0FE8 D7            push a
1849   0FE9 DA            push d
1850   0FEA FD 2E 00 00   mov32 cb, $00000000
1850   0FEE 00 00 
1851   0FF0 E7            pop d
1852   0FF1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1853   0FF5 E4            pop a
1854   0FF6 DA            push d
1855   0FF7             ; --- START FUNCTION CALL
1856   0FF7 07 C2 10      call rand2
1857   0FFA             ; --- START FACTORS
1858   0FFA D7            push a
1859   0FFB FD D8         push g
1860   0FFD 11            mov a, b
1861   0FFE FD 7A         mov g, c
1862   1000 FD 2E 14 00   mov32 cb, $00000014
1862   1004 00 00 
1863   1006 FD D8         push g ; save 'g' as the div instruction uses it
1864   1008 AE            div a, b ; %, a: quotient, b: remainder
1865   1009 11            mov a, b
1866   100A FD F1         pop g
1867   100C FD 38         mov c, g
1868   100E 27            mov b, a
1869   100F FD F1         pop g
1870   1011 E4            pop a
1871   1012             ; --- END FACTORS
1872   1012 E7            pop d
1873   1013 FD 43         mov [d], b
1874   1015 E7            pop d
1875   1016 FD 43         mov [d], b
1876   1018 0A 86 0F      jmp _while30_cond
1877   101B             _while30_exit:
1878   101B             ; if (scratchloc == loc[  1      ]) { 
1879   101B             _if33_cond:
1880   101B FA FF FF      lea d, [bp + -1] ; $scratchloc
1881   101E 2A            mov b, [d]
1882   101F 38 00 00      mov c, 0
1883   1022             ; --- START RELATIONAL
1884   1022 D7            push a
1885   1023 11            mov a, b
1886   1024 3B 5C 17      mov d, _loc_data ; $loc
1887   1027 D7            push a
1888   1028 DA            push d
1889   1029 FD 2E 01 00   mov32 cb, $00000001
1889   102D 00 00 
1890   102F E7            pop d
1891   1030 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1892   1034 E4            pop a
1893   1035 2A            mov b, [d]
1894   1036 38 00 00      mov c, 0
1895   1039 B0            cmp a, b
1896   103A FD 71         seq ; ==
1897   103C E4            pop a
1898   103D             ; --- END RELATIONAL
1899   103D C0 00 00      cmp b, 0
1900   1040 C6 55 10      je _if33_exit
1901   1043             _if33_TRUE:
1902   1043             ; print("... OOPS! BUMPED A WUMPUS!\n"); 
1903   1043             ; --- START FUNCTION CALL
1904   1043 26 D5 1E      mov b, _s43 ; "... OOPS! BUMPED A WUMPUS!\n"
1905   1046 FD AB         swp b
1906   1048 D8            push b
1907   1049 07 79 14      call print
1908   104C 51 02 00      add sp, 2
1909   104F             ; --- END FUNCTION CALL
1910   104F             ; move_wumpus(); 
1911   104F             ; --- START FUNCTION CALL
1912   104F 07 41 09      call move_wumpus
1913   1052 0A 55 10      jmp _if33_exit
1914   1055             _if33_exit:
1915   1055             ; if (scratchloc == loc[  2    ] || scratchloc == loc[  3    ]) { 
1916   1055             _if34_cond:
1917   1055 FA FF FF      lea d, [bp + -1] ; $scratchloc
1918   1058 2A            mov b, [d]
1919   1059 38 00 00      mov c, 0
1920   105C             ; --- START RELATIONAL
1921   105C D7            push a
1922   105D 11            mov a, b
1923   105E 3B 5C 17      mov d, _loc_data ; $loc
1924   1061 D7            push a
1925   1062 DA            push d
1926   1063 FD 2E 02 00   mov32 cb, $00000002
1926   1067 00 00 
1927   1069 E7            pop d
1928   106A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1929   106E E4            pop a
1930   106F 2A            mov b, [d]
1931   1070 38 00 00      mov c, 0
1932   1073 B0            cmp a, b
1933   1074 FD 71         seq ; ==
1934   1076 E4            pop a
1935   1077             ; --- END RELATIONAL
1936   1077             ; --- START LOGICAL OR
1937   1077 D7            push a
1938   1078 11            mov a, b
1939   1079 FA FF FF      lea d, [bp + -1] ; $scratchloc
1940   107C 2A            mov b, [d]
1941   107D 38 00 00      mov c, 0
1942   1080             ; --- START RELATIONAL
1943   1080 D7            push a
1944   1081 11            mov a, b
1945   1082 3B 5C 17      mov d, _loc_data ; $loc
1946   1085 D7            push a
1947   1086 DA            push d
1948   1087 FD 2E 03 00   mov32 cb, $00000003
1948   108B 00 00 
1949   108D E7            pop d
1950   108E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1951   1092 E4            pop a
1952   1093 2A            mov b, [d]
1953   1094 38 00 00      mov c, 0
1954   1097 B0            cmp a, b
1955   1098 FD 71         seq ; ==
1956   109A E4            pop a
1957   109B             ; --- END RELATIONAL
1958   109B FD A8         sor a, b ; ||
1959   109D E4            pop a
1960   109E             ; --- END LOGICAL OR
1961   109E C0 00 00      cmp b, 0
1962   10A1 C6 C0 10      je _if34_exit
1963   10A4             _if34_TRUE:
1964   10A4             ; print("YYYYIIIIEEEE . . . FELL IN PIT\n"); 
1965   10A4             ; --- START FUNCTION CALL
1966   10A4 26 F1 1E      mov b, _s44 ; "YYYYIIIIEEEE . . . FELL IN PIT\n"
1967   10A7 FD AB         swp b
1968   10A9 D8            push b
1969   10AA 07 79 14      call print
1970   10AD 51 02 00      add sp, 2
1971   10B0             ; --- END FUNCTION CALL
1972   10B0             ; finished =   2    ; 
1973   10B0 3B 68 17      mov d, _finished ; $finished
1974   10B3 DA            push d
1975   10B4 FD 2E 02 00   mov32 cb, $00000002
1975   10B8 00 00 
1976   10BA E7            pop d
1977   10BB FD 43         mov [d], b
1978   10BD 0A C0 10      jmp _if34_exit
1979   10C0             _if34_exit:
1980   10C0 F9            leave
1981   10C1 09            ret
1982   10C2             
1983   10C2             rand2:
1984   10C2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1985   10C5             ; rand_val=rand_val+rand_inc; 
1986   10C5 3B 58 17      mov d, _rand_val ; $rand_val
1987   10C8 DA            push d
1988   10C9 3B 58 17      mov d, _rand_val ; $rand_val
1989   10CC 2A            mov b, [d]
1990   10CD 38 00 00      mov c, 0
1991   10D0             ; --- START TERMS
1992   10D0 D7            push a
1993   10D1 11            mov a, b
1994   10D2 3B 5A 17      mov d, _rand_inc ; $rand_inc
1995   10D5 2A            mov b, [d]
1996   10D6 38 00 00      mov c, 0
1997   10D9 56            add b, a
1998   10DA E4            pop a
1999   10DB             ; --- END TERMS
2000   10DB E7            pop d
2001   10DC FD 43         mov [d], b
2002   10DE             ; rand_inc++; 
2003   10DE 3B 5A 17      mov d, _rand_inc ; $rand_inc
2004   10E1 2A            mov b, [d]
2005   10E2 38 00 00      mov c, 0
2006   10E5 11            mov a, b
2007   10E6 FD 77         inc b
2008   10E8 3B 5A 17      mov d, _rand_inc ; $rand_inc
2009   10EB FD 43         mov [d], b
2010   10ED 27            mov b, a
2011   10EE             ; return rand_val; 
2012   10EE 3B 58 17      mov d, _rand_val ; $rand_val
2013   10F1 2A            mov b, [d]
2014   10F2 38 00 00      mov c, 0
2015   10F5 F9            leave
2016   10F6 09            ret
2017   10F7             
2018   10F7             game_setup:
2019   10F7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2020   10FA             ; int j, k; 
2021   10FA 52 02 00      sub sp, 2
2022   10FD 52 02 00      sub sp, 2
2023   1100             ; int v; 
2024   1100 52 02 00      sub sp, 2
2025   1103             ; for (j = 0; j <   6    ; j++) { 
2026   1103             _for35_init:
2027   1103 FA FF FF      lea d, [bp + -1] ; $j
2028   1106 DA            push d
2029   1107 FD 2E 00 00   mov32 cb, $00000000
2029   110B 00 00 
2030   110D E7            pop d
2031   110E FD 43         mov [d], b
2032   1110             _for35_cond:
2033   1110 FA FF FF      lea d, [bp + -1] ; $j
2034   1113 2A            mov b, [d]
2035   1114 38 00 00      mov c, 0
2036   1117             ; --- START RELATIONAL
2037   1117 D7            push a
2038   1118 11            mov a, b
2039   1119 FD 2E 06 00   mov32 cb, $00000006
2039   111D 00 00 
2040   111F B0            cmp a, b
2041   1120 FD 73         slt ; < (signed)
2042   1122 E4            pop a
2043   1123             ; --- END RELATIONAL
2044   1123 C0 00 00      cmp b, 0
2045   1126 C6 5E 12      je _for35_exit
2046   1129             _for35_block:
2047   1129             ; loc[j] = -1; 
2048   1129 3B 5C 17      mov d, _loc_data ; $loc
2049   112C D7            push a
2050   112D DA            push d
2051   112E FA FF FF      lea d, [bp + -1] ; $j
2052   1131 2A            mov b, [d]
2053   1132 38 00 00      mov c, 0
2054   1135 E7            pop d
2055   1136 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2056   113A E4            pop a
2057   113B DA            push d
2058   113C FD 2E FF FF   mov32 cb, $ffffffff
2058   1140 FF FF 
2059   1142 E7            pop d
2060   1143 FD 43         mov [d], b
2061   1145             ; while (loc[j] < 0) { 
2062   1145             _while36_cond:
2063   1145 3B 5C 17      mov d, _loc_data ; $loc
2064   1148 D7            push a
2065   1149 DA            push d
2066   114A FA FF FF      lea d, [bp + -1] ; $j
2067   114D 2A            mov b, [d]
2068   114E 38 00 00      mov c, 0
2069   1151 E7            pop d
2070   1152 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2071   1156 E4            pop a
2072   1157 2A            mov b, [d]
2073   1158 38 00 00      mov c, 0
2074   115B             ; --- START RELATIONAL
2075   115B D7            push a
2076   115C 11            mov a, b
2077   115D FD 2E 00 00   mov32 cb, $00000000
2077   1161 00 00 
2078   1163 B0            cmp a, b
2079   1164 FD 73         slt ; < (signed)
2080   1166 E4            pop a
2081   1167             ; --- END RELATIONAL
2082   1167 C0 00 00      cmp b, 0
2083   116A C6 4B 12      je _while36_exit
2084   116D             _while36_block:
2085   116D             ; v = rand2(); 
2086   116D FA FB FF      lea d, [bp + -5] ; $v
2087   1170 DA            push d
2088   1171             ; --- START FUNCTION CALL
2089   1171 07 C2 10      call rand2
2090   1174 E7            pop d
2091   1175 FD 43         mov [d], b
2092   1177             ; loc[j] = v % 20; 
2093   1177 3B 5C 17      mov d, _loc_data ; $loc
2094   117A D7            push a
2095   117B DA            push d
2096   117C FA FF FF      lea d, [bp + -1] ; $j
2097   117F 2A            mov b, [d]
2098   1180 38 00 00      mov c, 0
2099   1183 E7            pop d
2100   1184 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2101   1188 E4            pop a
2102   1189 DA            push d
2103   118A FA FB FF      lea d, [bp + -5] ; $v
2104   118D 2A            mov b, [d]
2105   118E 38 00 00      mov c, 0
2106   1191             ; --- START FACTORS
2107   1191 D7            push a
2108   1192 FD D8         push g
2109   1194 11            mov a, b
2110   1195 FD 7A         mov g, c
2111   1197 FD 2E 14 00   mov32 cb, $00000014
2111   119B 00 00 
2112   119D FD D8         push g ; save 'g' as the div instruction uses it
2113   119F AE            div a, b ; %, a: quotient, b: remainder
2114   11A0 11            mov a, b
2115   11A1 FD F1         pop g
2116   11A3 FD 38         mov c, g
2117   11A5 27            mov b, a
2118   11A6 FD F1         pop g
2119   11A8 E4            pop a
2120   11A9             ; --- END FACTORS
2121   11A9 E7            pop d
2122   11AA FD 43         mov [d], b
2123   11AC             ; for (k=0; k < j - 1; k++) { 
2124   11AC             _for39_init:
2125   11AC FA FD FF      lea d, [bp + -3] ; $k
2126   11AF DA            push d
2127   11B0 FD 2E 00 00   mov32 cb, $00000000
2127   11B4 00 00 
2128   11B6 E7            pop d
2129   11B7 FD 43         mov [d], b
2130   11B9             _for39_cond:
2131   11B9 FA FD FF      lea d, [bp + -3] ; $k
2132   11BC 2A            mov b, [d]
2133   11BD 38 00 00      mov c, 0
2134   11C0             ; --- START RELATIONAL
2135   11C0 D7            push a
2136   11C1 11            mov a, b
2137   11C2 FA FF FF      lea d, [bp + -1] ; $j
2138   11C5 2A            mov b, [d]
2139   11C6 38 00 00      mov c, 0
2140   11C9             ; --- START TERMS
2141   11C9 D7            push a
2142   11CA 11            mov a, b
2143   11CB FD 2E 01 00   mov32 cb, $00000001
2143   11CF 00 00 
2144   11D1 60            sub a, b
2145   11D2 27            mov b, a
2146   11D3 E4            pop a
2147   11D4             ; --- END TERMS
2148   11D4 B0            cmp a, b
2149   11D5 FD 73         slt ; < (signed)
2150   11D7 E4            pop a
2151   11D8             ; --- END RELATIONAL
2152   11D8 C0 00 00      cmp b, 0
2153   11DB C6 48 12      je _for39_exit
2154   11DE             _for39_block:
2155   11DE             ; if (loc[j] == loc[k]) { 
2156   11DE             _if40_cond:
2157   11DE 3B 5C 17      mov d, _loc_data ; $loc
2158   11E1 D7            push a
2159   11E2 DA            push d
2160   11E3 FA FF FF      lea d, [bp + -1] ; $j
2161   11E6 2A            mov b, [d]
2162   11E7 38 00 00      mov c, 0
2163   11EA E7            pop d
2164   11EB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2165   11EF E4            pop a
2166   11F0 2A            mov b, [d]
2167   11F1 38 00 00      mov c, 0
2168   11F4             ; --- START RELATIONAL
2169   11F4 D7            push a
2170   11F5 11            mov a, b
2171   11F6 3B 5C 17      mov d, _loc_data ; $loc
2172   11F9 D7            push a
2173   11FA DA            push d
2174   11FB FA FD FF      lea d, [bp + -3] ; $k
2175   11FE 2A            mov b, [d]
2176   11FF 38 00 00      mov c, 0
2177   1202 E7            pop d
2178   1203 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2179   1207 E4            pop a
2180   1208 2A            mov b, [d]
2181   1209 38 00 00      mov c, 0
2182   120C B0            cmp a, b
2183   120D FD 71         seq ; ==
2184   120F E4            pop a
2185   1210             ; --- END RELATIONAL
2186   1210 C0 00 00      cmp b, 0
2187   1213 C6 35 12      je _if40_exit
2188   1216             _if40_TRUE:
2189   1216             ; loc[j] = -1; 
2190   1216 3B 5C 17      mov d, _loc_data ; $loc
2191   1219 D7            push a
2192   121A DA            push d
2193   121B FA FF FF      lea d, [bp + -1] ; $j
2194   121E 2A            mov b, [d]
2195   121F 38 00 00      mov c, 0
2196   1222 E7            pop d
2197   1223 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2198   1227 E4            pop a
2199   1228 DA            push d
2200   1229 FD 2E FF FF   mov32 cb, $ffffffff
2200   122D FF FF 
2201   122F E7            pop d
2202   1230 FD 43         mov [d], b
2203   1232 0A 35 12      jmp _if40_exit
2204   1235             _if40_exit:
2205   1235             _for39_update:
2206   1235 FA FD FF      lea d, [bp + -3] ; $k
2207   1238 2A            mov b, [d]
2208   1239 38 00 00      mov c, 0
2209   123C 11            mov a, b
2210   123D FD 77         inc b
2211   123F FA FD FF      lea d, [bp + -3] ; $k
2212   1242 FD 43         mov [d], b
2213   1244 27            mov b, a
2214   1245 0A B9 11      jmp _for39_cond
2215   1248             _for39_exit:
2216   1248 0A 45 11      jmp _while36_cond
2217   124B             _while36_exit:
2218   124B             _for35_update:
2219   124B FA FF FF      lea d, [bp + -1] ; $j
2220   124E 2A            mov b, [d]
2221   124F 38 00 00      mov c, 0
2222   1252 11            mov a, b
2223   1253 FD 77         inc b
2224   1255 FA FF FF      lea d, [bp + -1] ; $j
2225   1258 FD 43         mov [d], b
2226   125A 27            mov b, a
2227   125B 0A 10 11      jmp _for35_cond
2228   125E             _for35_exit:
2229   125E F9            leave
2230   125F 09            ret
2231   1260             
2232   1260             game_play:
2233   1260 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2234   1263             ; arrows = 5; 
2235   1263 3B 54 17      mov d, _arrows ; $arrows
2236   1266 DA            push d
2237   1267 FD 2E 05 00   mov32 cb, $00000005
2237   126B 00 00 
2238   126D E7            pop d
2239   126E FD 43         mov [d], b
2240   1270             ; print("*********************\n"); 
2241   1270             ; --- START FUNCTION CALL
2242   1270 26 11 1F      mov b, _s45 ; "*********************\n"
2243   1273 FD AB         swp b
2244   1275 D8            push b
2245   1276 07 79 14      call print
2246   1279 51 02 00      add sp, 2
2247   127C             ; --- END FUNCTION CALL
2248   127C             ; print("** HUNT THE WUMPUS **\n"); 
2249   127C             ; --- START FUNCTION CALL
2250   127C 26 28 1F      mov b, _s46 ; "** HUNT THE WUMPUS **\n"
2251   127F FD AB         swp b
2252   1281 D8            push b
2253   1282 07 79 14      call print
2254   1285 51 02 00      add sp, 2
2255   1288             ; --- END FUNCTION CALL
2256   1288             ; print("*********************\n"); 
2257   1288             ; --- START FUNCTION CALL
2258   1288 26 11 1F      mov b, _s45 ; "*********************\n"
2259   128B FD AB         swp b
2260   128D D8            push b
2261   128E 07 79 14      call print
2262   1291 51 02 00      add sp, 2
2263   1294             ; --- END FUNCTION CALL
2264   1294             ; if (debug) { 
2265   1294             _if41_cond:
2266   1294 3B 56 17      mov d, _debug ; $debug
2267   1297 2A            mov b, [d]
2268   1298 38 00 00      mov c, 0
2269   129B C0 00 00      cmp b, 0
2270   129E C6 A8 13      je _if41_exit
2271   12A1             _if41_TRUE:
2272   12A1             ; print("Wumpus is at "); print_unsigned(loc[  1      ]+1); 
2273   12A1             ; --- START FUNCTION CALL
2274   12A1 26 3F 1F      mov b, _s47 ; "Wumpus is at "
2275   12A4 FD AB         swp b
2276   12A6 D8            push b
2277   12A7 07 79 14      call print
2278   12AA 51 02 00      add sp, 2
2279   12AD             ; --- END FUNCTION CALL
2280   12AD             ; print_unsigned(loc[  1      ]+1); 
2281   12AD             ; --- START FUNCTION CALL
2282   12AD 3B 5C 17      mov d, _loc_data ; $loc
2283   12B0 D7            push a
2284   12B1 DA            push d
2285   12B2 FD 2E 01 00   mov32 cb, $00000001
2285   12B6 00 00 
2286   12B8 E7            pop d
2287   12B9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2288   12BD E4            pop a
2289   12BE 2A            mov b, [d]
2290   12BF 38 00 00      mov c, 0
2291   12C2             ; --- START TERMS
2292   12C2 D7            push a
2293   12C3 11            mov a, b
2294   12C4 FD 2E 01 00   mov32 cb, $00000001
2294   12C8 00 00 
2295   12CA 56            add b, a
2296   12CB E4            pop a
2297   12CC             ; --- END TERMS
2298   12CC FD AB         swp b
2299   12CE D8            push b
2300   12CF 07 12 15      call print_unsigned
2301   12D2 51 02 00      add sp, 2
2302   12D5             ; --- END FUNCTION CALL
2303   12D5             ; print(", pits at "); print_unsigned(loc[  2    ]+1); 
2304   12D5             ; --- START FUNCTION CALL
2305   12D5 26 4D 1F      mov b, _s48 ; ", pits at "
2306   12D8 FD AB         swp b
2307   12DA D8            push b
2308   12DB 07 79 14      call print
2309   12DE 51 02 00      add sp, 2
2310   12E1             ; --- END FUNCTION CALL
2311   12E1             ; print_unsigned(loc[  2    ]+1); 
2312   12E1             ; --- START FUNCTION CALL
2313   12E1 3B 5C 17      mov d, _loc_data ; $loc
2314   12E4 D7            push a
2315   12E5 DA            push d
2316   12E6 FD 2E 02 00   mov32 cb, $00000002
2316   12EA 00 00 
2317   12EC E7            pop d
2318   12ED FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2319   12F1 E4            pop a
2320   12F2 2A            mov b, [d]
2321   12F3 38 00 00      mov c, 0
2322   12F6             ; --- START TERMS
2323   12F6 D7            push a
2324   12F7 11            mov a, b
2325   12F8 FD 2E 01 00   mov32 cb, $00000001
2325   12FC 00 00 
2326   12FE 56            add b, a
2327   12FF E4            pop a
2328   1300             ; --- END TERMS
2329   1300 FD AB         swp b
2330   1302 D8            push b
2331   1303 07 12 15      call print_unsigned
2332   1306 51 02 00      add sp, 2
2333   1309             ; --- END FUNCTION CALL
2334   1309             ; print(" & "); print_unsigned(loc[  3    ]+1); 
2335   1309             ; --- START FUNCTION CALL
2336   1309 26 58 1F      mov b, _s49 ; " & "
2337   130C FD AB         swp b
2338   130E D8            push b
2339   130F 07 79 14      call print
2340   1312 51 02 00      add sp, 2
2341   1315             ; --- END FUNCTION CALL
2342   1315             ; print_unsigned(loc[  3    ]+1); 
2343   1315             ; --- START FUNCTION CALL
2344   1315 3B 5C 17      mov d, _loc_data ; $loc
2345   1318 D7            push a
2346   1319 DA            push d
2347   131A FD 2E 03 00   mov32 cb, $00000003
2347   131E 00 00 
2348   1320 E7            pop d
2349   1321 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2350   1325 E4            pop a
2351   1326 2A            mov b, [d]
2352   1327 38 00 00      mov c, 0
2353   132A             ; --- START TERMS
2354   132A D7            push a
2355   132B 11            mov a, b
2356   132C FD 2E 01 00   mov32 cb, $00000001
2356   1330 00 00 
2357   1332 56            add b, a
2358   1333 E4            pop a
2359   1334             ; --- END TERMS
2360   1334 FD AB         swp b
2361   1336 D8            push b
2362   1337 07 12 15      call print_unsigned
2363   133A 51 02 00      add sp, 2
2364   133D             ; --- END FUNCTION CALL
2365   133D             ; print(", bats at "); print_unsigned(loc[  4     ]+1); 
2366   133D             ; --- START FUNCTION CALL
2367   133D 26 5C 1F      mov b, _s50 ; ", bats at "
2368   1340 FD AB         swp b
2369   1342 D8            push b
2370   1343 07 79 14      call print
2371   1346 51 02 00      add sp, 2
2372   1349             ; --- END FUNCTION CALL
2373   1349             ; print_unsigned(loc[  4     ]+1); 
2374   1349             ; --- START FUNCTION CALL
2375   1349 3B 5C 17      mov d, _loc_data ; $loc
2376   134C D7            push a
2377   134D DA            push d
2378   134E FD 2E 04 00   mov32 cb, $00000004
2378   1352 00 00 
2379   1354 E7            pop d
2380   1355 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2381   1359 E4            pop a
2382   135A 2A            mov b, [d]
2383   135B 38 00 00      mov c, 0
2384   135E             ; --- START TERMS
2385   135E D7            push a
2386   135F 11            mov a, b
2387   1360 FD 2E 01 00   mov32 cb, $00000001
2387   1364 00 00 
2388   1366 56            add b, a
2389   1367 E4            pop a
2390   1368             ; --- END TERMS
2391   1368 FD AB         swp b
2392   136A D8            push b
2393   136B 07 12 15      call print_unsigned
2394   136E 51 02 00      add sp, 2
2395   1371             ; --- END FUNCTION CALL
2396   1371             ; print(" & "); print_unsigned(loc[  5     ]+1); 
2397   1371             ; --- START FUNCTION CALL
2398   1371 26 58 1F      mov b, _s49 ; " & "
2399   1374 FD AB         swp b
2400   1376 D8            push b
2401   1377 07 79 14      call print
2402   137A 51 02 00      add sp, 2
2403   137D             ; --- END FUNCTION CALL
2404   137D             ; print_unsigned(loc[  5     ]+1); 
2405   137D             ; --- START FUNCTION CALL
2406   137D 3B 5C 17      mov d, _loc_data ; $loc
2407   1380 D7            push a
2408   1381 DA            push d
2409   1382 FD 2E 05 00   mov32 cb, $00000005
2409   1386 00 00 
2410   1388 E7            pop d
2411   1389 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2412   138D E4            pop a
2413   138E 2A            mov b, [d]
2414   138F 38 00 00      mov c, 0
2415   1392             ; --- START TERMS
2416   1392 D7            push a
2417   1393 11            mov a, b
2418   1394 FD 2E 01 00   mov32 cb, $00000001
2418   1398 00 00 
2419   139A 56            add b, a
2420   139B E4            pop a
2421   139C             ; --- END TERMS
2422   139C FD AB         swp b
2423   139E D8            push b
2424   139F 07 12 15      call print_unsigned
2425   13A2 51 02 00      add sp, 2
2426   13A5             ; --- END FUNCTION CALL
2427   13A5 0A A8 13      jmp _if41_exit
2428   13A8             _if41_exit:
2429   13A8             ; finished =        0   ; 
2430   13A8 3B 68 17      mov d, _finished ; $finished
2431   13AB DA            push d
2432   13AC FD 2E 00 00   mov32 cb, $00000000
2432   13B0 00 00 
2433   13B2 E7            pop d
2434   13B3 FD 43         mov [d], b
2435   13B5             ; while (finished ==        0   ) { 
2436   13B5             _while42_cond:
2437   13B5 3B 68 17      mov d, _finished ; $finished
2438   13B8 2A            mov b, [d]
2439   13B9 38 00 00      mov c, 0
2440   13BC             ; --- START RELATIONAL
2441   13BC D7            push a
2442   13BD 11            mov a, b
2443   13BE FD 2E 00 00   mov32 cb, $00000000
2443   13C2 00 00 
2444   13C4 B0            cmp a, b
2445   13C5 FD 71         seq ; ==
2446   13C7 E4            pop a
2447   13C8             ; --- END RELATIONAL
2448   13C8 C0 00 00      cmp b, 0
2449   13CB C6 E6 13      je _while42_exit
2450   13CE             _while42_block:
2451   13CE             ; show_room(); 
2452   13CE             ; --- START FUNCTION CALL
2453   13CE 07 09 06      call show_room
2454   13D1             ; if (move_or_shoot()) { 
2455   13D1             _if43_cond:
2456   13D1             ; --- START FUNCTION CALL
2457   13D1 07 BD 08      call move_or_shoot
2458   13D4 C0 00 00      cmp b, 0
2459   13D7 C6 E0 13      je _if43_else
2460   13DA             _if43_TRUE:
2461   13DA             ; shoot(); 
2462   13DA             ; --- START FUNCTION CALL
2463   13DA 07 1F 0A      call shoot
2464   13DD 0A E3 13      jmp _if43_exit
2465   13E0             _if43_else:
2466   13E0             ; move(); 
2467   13E0             ; --- START FUNCTION CALL
2468   13E0 07 D0 0D      call move
2469   13E3             _if43_exit:
2470   13E3 0A B5 13      jmp _while42_cond
2471   13E6             _while42_exit:
2472   13E6             ; if (finished ==        1   ) { 
2473   13E6             _if44_cond:
2474   13E6 3B 68 17      mov d, _finished ; $finished
2475   13E9 2A            mov b, [d]
2476   13EA 38 00 00      mov c, 0
2477   13ED             ; --- START RELATIONAL
2478   13ED D7            push a
2479   13EE 11            mov a, b
2480   13EF FD 2E 01 00   mov32 cb, $00000001
2480   13F3 00 00 
2481   13F5 B0            cmp a, b
2482   13F6 FD 71         seq ; ==
2483   13F8 E4            pop a
2484   13F9             ; --- END RELATIONAL
2485   13F9 C0 00 00      cmp b, 0
2486   13FC C6 0E 14      je _if44_exit
2487   13FF             _if44_TRUE:
2488   13FF             ; print("HEE HEE HEE - THE WUMPUS WILL GET YOU NEXT TIME!!\n"); 
2489   13FF             ; --- START FUNCTION CALL
2490   13FF 26 67 1F      mov b, _s51 ; "HEE HEE HEE - THE WUMPUS WILL GET YOU NEXT TIME!!\n"
2491   1402 FD AB         swp b
2492   1404 D8            push b
2493   1405 07 79 14      call print
2494   1408 51 02 00      add sp, 2
2495   140B             ; --- END FUNCTION CALL
2496   140B 0A 0E 14      jmp _if44_exit
2497   140E             _if44_exit:
2498   140E             ; if (finished ==   2    ) { 
2499   140E             _if45_cond:
2500   140E 3B 68 17      mov d, _finished ; $finished
2501   1411 2A            mov b, [d]
2502   1412 38 00 00      mov c, 0
2503   1415             ; --- START RELATIONAL
2504   1415 D7            push a
2505   1416 11            mov a, b
2506   1417 FD 2E 02 00   mov32 cb, $00000002
2506   141B 00 00 
2507   141D B0            cmp a, b
2508   141E FD 71         seq ; ==
2509   1420 E4            pop a
2510   1421             ; --- END RELATIONAL
2511   1421 C0 00 00      cmp b, 0
2512   1424 C6 36 14      je _if45_exit
2513   1427             _if45_TRUE:
2514   1427             ; print("HA HA HA - YOU LOSE!\n"); 
2515   1427             ; --- START FUNCTION CALL
2516   1427 26 9A 1F      mov b, _s52 ; "HA HA HA - YOU LOSE!\n"
2517   142A FD AB         swp b
2518   142C D8            push b
2519   142D 07 79 14      call print
2520   1430 51 02 00      add sp, 2
2521   1433             ; --- END FUNCTION CALL
2522   1433 0A 36 14      jmp _if45_exit
2523   1436             _if45_exit:
2524   1436             ; int c; 
2525   1436 52 02 00      sub sp, 2
2526   1439             ; c = getlet("NEW GAME (Y-N): "); 
2527   1439 FA FF FF      lea d, [bp + -1] ; $c
2528   143C DA            push d
2529   143D             ; --- START FUNCTION CALL
2530   143D 26 FB 17      mov b, _s1 ; "NEW GAME (Y-N): "
2531   1440 FD AB         swp b
2532   1442 D8            push b
2533   1443 07 93 04      call getlet
2534   1446 51 02 00      add sp, 2
2535   1449             ; --- END FUNCTION CALL
2536   1449 E7            pop d
2537   144A FD 43         mov [d], b
2538   144C             ; if (c == 'N') { 
2539   144C             _if46_cond:
2540   144C FA FF FF      lea d, [bp + -1] ; $c
2541   144F 2A            mov b, [d]
2542   1450 38 00 00      mov c, 0
2543   1453             ; --- START RELATIONAL
2544   1453 D7            push a
2545   1454 11            mov a, b
2546   1455 FD 2E 4E 00   mov32 cb, $0000004e
2546   1459 00 00 
2547   145B B0            cmp a, b
2548   145C FD 71         seq ; ==
2549   145E E4            pop a
2550   145F             ; --- END RELATIONAL
2551   145F C0 00 00      cmp b, 0
2552   1462 C6 77 14      je _if46_exit
2553   1465             _if46_TRUE:
2554   1465             ; exit(1); 
2555   1465             ; --- START FUNCTION CALL
2556   1465 FD 2E 01 00   mov32 cb, $00000001
2556   1469 00 00 
2557   146B FD AB         swp b
2558   146D D8            push b
2559   146E 07 49 17      call exit
2560   1471 51 02 00      add sp, 2
2561   1474             ; --- END FUNCTION CALL
2562   1474 0A 77 14      jmp _if46_exit
2563   1477             _if46_exit:
2564   1477 F9            leave
2565   1478 09            ret
2566   1479             
2567   1479             print:
2568   1479 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2569   147C             ; --- BEGIN INLINE ASM SEGMENT
2570   147C FA 05 00      lea d, [bp + 5] ; $s
2571   147F FD 2A         mov d, [d]
2572   1481             _puts_L1_print:
2573   1481 1E            mov al, [d]
2574   1482 B9 00         cmp al, 0
2575   1484 C6 90 14      jz _puts_END_print
2576   1487 23            mov ah, al
2577   1488 19 00         mov al, 0
2578   148A 05 03         syscall sys_io
2579   148C 79            inc d
2580   148D 0A 81 14      jmp _puts_L1_print
2581   1490             _puts_END_print:
2582   1490             ; --- END INLINE ASM SEGMENT
2583   1490 F9            leave
2584   1491 09            ret
2585   1492             
2586   1492             getchar:
2587   1492 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2588   1495             ; char c; 
2589   1495 52 01 00      sub sp, 1
2590   1498             ; --- BEGIN INLINE ASM SEGMENT
2591   1498 19 01         mov al, 1
2592   149A 05 03         syscall sys_io      ; receive in AH
2593   149C 1A            mov al, ah
2594   149D FA 00 00      lea d, [bp + 0] ; $c
2595   14A0 3E            mov [d], al
2596   14A1             ; --- END INLINE ASM SEGMENT
2597   14A1             ; return c; 
2598   14A1 FA 00 00      lea d, [bp + 0] ; $c
2599   14A4 32            mov bl, [d]
2600   14A5 A7 00         mov bh, 0
2601   14A7 38 00 00      mov c, 0
2602   14AA F9            leave
2603   14AB 09            ret
2604   14AC             
2605   14AC             toupper:
2606   14AC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2607   14AF             ; if (ch >= 'a' && ch <= 'z')  
2608   14AF             _if47_cond:
2609   14AF FA 05 00      lea d, [bp + 5] ; $ch
2610   14B2 32            mov bl, [d]
2611   14B3 A7 00         mov bh, 0
2612   14B5 38 00 00      mov c, 0
2613   14B8             ; --- START RELATIONAL
2614   14B8 D7            push a
2615   14B9 11            mov a, b
2616   14BA FD 2E 61 00   mov32 cb, $00000061
2616   14BE 00 00 
2617   14C0 B0            cmp a, b
2618   14C1 FD 80         sge ; >=
2619   14C3 E4            pop a
2620   14C4             ; --- END RELATIONAL
2621   14C4             ; --- START LOGICAL AND
2622   14C4 D7            push a
2623   14C5 11            mov a, b
2624   14C6 FA 05 00      lea d, [bp + 5] ; $ch
2625   14C9 32            mov bl, [d]
2626   14CA A7 00         mov bh, 0
2627   14CC 38 00 00      mov c, 0
2628   14CF             ; --- START RELATIONAL
2629   14CF D7            push a
2630   14D0 11            mov a, b
2631   14D1 FD 2E 7A 00   mov32 cb, $0000007a
2631   14D5 00 00 
2632   14D7 B0            cmp a, b
2633   14D8 FD 74         sle ; <= (signed)
2634   14DA E4            pop a
2635   14DB             ; --- END RELATIONAL
2636   14DB FD A7         sand a, b
2637   14DD E4            pop a
2638   14DE             ; --- END LOGICAL AND
2639   14DE C0 00 00      cmp b, 0
2640   14E1 C6 05 15      je _if47_else
2641   14E4             _if47_TRUE:
2642   14E4             ; return ch - 'a' + 'A'; 
2643   14E4 FA 05 00      lea d, [bp + 5] ; $ch
2644   14E7 32            mov bl, [d]
2645   14E8 A7 00         mov bh, 0
2646   14EA 38 00 00      mov c, 0
2647   14ED             ; --- START TERMS
2648   14ED D7            push a
2649   14EE 11            mov a, b
2650   14EF FD 2E 61 00   mov32 cb, $00000061
2650   14F3 00 00 
2651   14F5 60            sub a, b
2652   14F6 27            mov b, a
2653   14F7 11            mov a, b
2654   14F8 FD 2E 41 00   mov32 cb, $00000041
2654   14FC 00 00 
2655   14FE 56            add b, a
2656   14FF E4            pop a
2657   1500             ; --- END TERMS
2658   1500 F9            leave
2659   1501 09            ret
2660   1502 0A 10 15      jmp _if47_exit
2661   1505             _if47_else:
2662   1505             ; return ch; 
2663   1505 FA 05 00      lea d, [bp + 5] ; $ch
2664   1508 32            mov bl, [d]
2665   1509 A7 00         mov bh, 0
2666   150B 38 00 00      mov c, 0
2667   150E F9            leave
2668   150F 09            ret
2669   1510             _if47_exit:
2670   1510 F9            leave
2671   1511 09            ret
2672   1512             
2673   1512             print_unsigned:
2674   1512 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2675   1515             ; char digits[5]; 
2676   1515 52 05 00      sub sp, 5
2677   1518             ; int i; 
2678   1518 52 02 00      sub sp, 2
2679   151B             ; i = 0; 
2680   151B FA FA FF      lea d, [bp + -6] ; $i
2681   151E DA            push d
2682   151F FD 2E 00 00   mov32 cb, $00000000
2682   1523 00 00 
2683   1525 E7            pop d
2684   1526 FD 43         mov [d], b
2685   1528             ; if(num == 0){ 
2686   1528             _if48_cond:
2687   1528 FA 05 00      lea d, [bp + 5] ; $num
2688   152B 2A            mov b, [d]
2689   152C 38 00 00      mov c, 0
2690   152F             ; --- START RELATIONAL
2691   152F D7            push a
2692   1530 11            mov a, b
2693   1531 FD 2E 00 00   mov32 cb, $00000000
2693   1535 00 00 
2694   1537 B0            cmp a, b
2695   1538 FD 71         seq ; ==
2696   153A E4            pop a
2697   153B             ; --- END RELATIONAL
2698   153B C0 00 00      cmp b, 0
2699   153E C6 53 15      je _if48_exit
2700   1541             _if48_TRUE:
2701   1541             ; putchar('0'); 
2702   1541             ; --- START FUNCTION CALL
2703   1541 FD 2E 30 00   mov32 cb, $00000030
2703   1545 00 00 
2704   1547 DD            push bl
2705   1548 07 2A 16      call putchar
2706   154B 51 01 00      add sp, 1
2707   154E             ; --- END FUNCTION CALL
2708   154E             ; return; 
2709   154E F9            leave
2710   154F 09            ret
2711   1550 0A 53 15      jmp _if48_exit
2712   1553             _if48_exit:
2713   1553             ; while (num > 0) { 
2714   1553             _while49_cond:
2715   1553 FA 05 00      lea d, [bp + 5] ; $num
2716   1556 2A            mov b, [d]
2717   1557 38 00 00      mov c, 0
2718   155A             ; --- START RELATIONAL
2719   155A D7            push a
2720   155B 11            mov a, b
2721   155C FD 2E 00 00   mov32 cb, $00000000
2721   1560 00 00 
2722   1562 B0            cmp a, b
2723   1563 FD 81         sgu ; > (unsigned)
2724   1565 E4            pop a
2725   1566             ; --- END RELATIONAL
2726   1566 C0 00 00      cmp b, 0
2727   1569 C6 E0 15      je _while49_exit
2728   156C             _while49_block:
2729   156C             ; digits[i] = '0' + (num % 10); 
2730   156C FA FC FF      lea d, [bp + -4] ; $digits
2731   156F D7            push a
2732   1570 DA            push d
2733   1571 FA FA FF      lea d, [bp + -6] ; $i
2734   1574 2A            mov b, [d]
2735   1575 38 00 00      mov c, 0
2736   1578 E7            pop d
2737   1579 5A            add d, b
2738   157A E4            pop a
2739   157B DA            push d
2740   157C FD 2E 30 00   mov32 cb, $00000030
2740   1580 00 00 
2741   1582             ; --- START TERMS
2742   1582 D7            push a
2743   1583 11            mov a, b
2744   1584 FA 05 00      lea d, [bp + 5] ; $num
2745   1587 2A            mov b, [d]
2746   1588 38 00 00      mov c, 0
2747   158B             ; --- START FACTORS
2748   158B D7            push a
2749   158C FD D8         push g
2750   158E 11            mov a, b
2751   158F FD 7A         mov g, c
2752   1591 FD 2E 0A 00   mov32 cb, $0000000a
2752   1595 00 00 
2753   1597 FD D8         push g ; save 'g' as the div instruction uses it
2754   1599 AE            div a, b ; %, a: quotient, b: remainder
2755   159A 11            mov a, b
2756   159B FD F1         pop g
2757   159D FD 38         mov c, g
2758   159F 27            mov b, a
2759   15A0 FD F1         pop g
2760   15A2 E4            pop a
2761   15A3             ; --- END FACTORS
2762   15A3 56            add b, a
2763   15A4 E4            pop a
2764   15A5             ; --- END TERMS
2765   15A5 E7            pop d
2766   15A6 FD 3E         mov [d], bl
2767   15A8             ; num = num / 10; 
2768   15A8 FA 05 00      lea d, [bp + 5] ; $num
2769   15AB DA            push d
2770   15AC FA 05 00      lea d, [bp + 5] ; $num
2771   15AF 2A            mov b, [d]
2772   15B0 38 00 00      mov c, 0
2773   15B3             ; --- START FACTORS
2774   15B3 D7            push a
2775   15B4 FD D8         push g
2776   15B6 11            mov a, b
2777   15B7 FD 7A         mov g, c
2778   15B9 FD 2E 0A 00   mov32 cb, $0000000a
2778   15BD 00 00 
2779   15BF FD D8         push g ; save 'g' as the div instruction uses it
2780   15C1 AE            div a, b ; /, a: quotient, b: remainder
2781   15C2 FD F1         pop g
2782   15C4 FD 38         mov c, g
2783   15C6 27            mov b, a
2784   15C7 FD F1         pop g
2785   15C9 E4            pop a
2786   15CA             ; --- END FACTORS
2787   15CA E7            pop d
2788   15CB FD 43         mov [d], b
2789   15CD             ; i++; 
2790   15CD FA FA FF      lea d, [bp + -6] ; $i
2791   15D0 2A            mov b, [d]
2792   15D1 38 00 00      mov c, 0
2793   15D4 11            mov a, b
2794   15D5 FD 77         inc b
2795   15D7 FA FA FF      lea d, [bp + -6] ; $i
2796   15DA FD 43         mov [d], b
2797   15DC 27            mov b, a
2798   15DD 0A 53 15      jmp _while49_cond
2799   15E0             _while49_exit:
2800   15E0             ; while (i > 0) { 
2801   15E0             _while56_cond:
2802   15E0 FA FA FF      lea d, [bp + -6] ; $i
2803   15E3 2A            mov b, [d]
2804   15E4 38 00 00      mov c, 0
2805   15E7             ; --- START RELATIONAL
2806   15E7 D7            push a
2807   15E8 11            mov a, b
2808   15E9 FD 2E 00 00   mov32 cb, $00000000
2808   15ED 00 00 
2809   15EF B0            cmp a, b
2810   15F0 FD 7F         sgt ; >
2811   15F2 E4            pop a
2812   15F3             ; --- END RELATIONAL
2813   15F3 C0 00 00      cmp b, 0
2814   15F6 C6 28 16      je _while56_exit
2815   15F9             _while56_block:
2816   15F9             ; i--; 
2817   15F9 FA FA FF      lea d, [bp + -6] ; $i
2818   15FC 2A            mov b, [d]
2819   15FD 38 00 00      mov c, 0
2820   1600 11            mov a, b
2821   1601 FD 7D         dec b
2822   1603 FA FA FF      lea d, [bp + -6] ; $i
2823   1606 FD 43         mov [d], b
2824   1608 27            mov b, a
2825   1609             ; putchar(digits[i]); 
2826   1609             ; --- START FUNCTION CALL
2827   1609 FA FC FF      lea d, [bp + -4] ; $digits
2828   160C D7            push a
2829   160D DA            push d
2830   160E FA FA FF      lea d, [bp + -6] ; $i
2831   1611 2A            mov b, [d]
2832   1612 38 00 00      mov c, 0
2833   1615 E7            pop d
2834   1616 5A            add d, b
2835   1617 E4            pop a
2836   1618 32            mov bl, [d]
2837   1619 A7 00         mov bh, 0
2838   161B 38 00 00      mov c, 0
2839   161E DD            push bl
2840   161F 07 2A 16      call putchar
2841   1622 51 01 00      add sp, 1
2842   1625             ; --- END FUNCTION CALL
2843   1625 0A E0 15      jmp _while56_cond
2844   1628             _while56_exit:
2845   1628 F9            leave
2846   1629 09            ret
2847   162A             
2848   162A             putchar:
2849   162A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2850   162D             ; --- BEGIN INLINE ASM SEGMENT
2851   162D FA 05 00      lea d, [bp + 5] ; $c
2852   1630 1E            mov al, [d]
2853   1631 23            mov ah, al
2854   1632 19 00         mov al, 0
2855   1634 05 03         syscall sys_io      ; char in AH
2856   1636             ; --- END INLINE ASM SEGMENT
2857   1636 F9            leave
2858   1637 09            ret
2859   1638             
2860   1638             scann:
2861   1638 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2862   163B             ; int m; 
2863   163B 52 02 00      sub sp, 2
2864   163E             ; --- BEGIN INLINE ASM SEGMENT
2865   163E F8 08 00      enter 8
2866   1641 FA F9 FF      lea d, [bp +- 7]
2867   1644 07 8C 16      call _gets_scann
2868   1647 07 7C 16      call _strlen_scann      ; get string length in C
2869   164A 7E            dec c
2870   164B FD 4E         mov si, d
2871   164D 12            mov a, c
2872   164E FD 99         shl a
2873   1650 3B 29 17      mov d, table_power_scann
2874   1653 59            add d, a
2875   1654 38 00 00      mov c, 0
2876   1657             mul_loop_scann:
2877   1657 F6            lodsb      ; load ASCII to al
2878   1658 B9 00         cmp al, 0
2879   165A C6 6D 16      je mul_exit_scann
2880   165D 6F 30         sub al, $30    ; make into integer
2881   165F 22 00         mov ah, 0
2882   1661 2A            mov b, [d]
2883   1662 AC            mul a, b      ; result in B since it fits in 16bits
2884   1663 11            mov a, b
2885   1664 28            mov b, c
2886   1665 54            add a, b
2887   1666 39            mov c, a
2888   1667 63 02 00      sub d, 2
2889   166A 0A 57 16      jmp mul_loop_scann
2890   166D             mul_exit_scann:
2891   166D 12            mov a, c
2892   166E F9            leave
2893   166F FA FF FF      lea d, [bp + -1] ; $m
2894   1672 43            mov [d], a
2895   1673             ; --- END INLINE ASM SEGMENT
2896   1673             ; return m; 
2897   1673 FA FF FF      lea d, [bp + -1] ; $m
2898   1676 2A            mov b, [d]
2899   1677 38 00 00      mov c, 0
2900   167A F9            leave
2901   167B 09            ret
2902   167C             ; --- BEGIN INLINE ASM SEGMENT
2903   167C             _strlen_scann:
2904   167C DA            push d
2905   167D 38 00 00      mov c, 0
2906   1680             _strlen_L1_scann:
2907   1680 BD 00         cmp byte [d], 0
2908   1682 C6 8A 16      je _strlen_ret_scann
2909   1685 79            inc d
2910   1686 78            inc c
2911   1687 0A 80 16      jmp _strlen_L1_scann
2912   168A             _strlen_ret_scann:
2913   168A E7            pop d
2914   168B 09            ret
2915   168C             _gets_scann:
2916   168C DA            push d
2917   168D             _gets_loop_scann:
2918   168D 19 01         mov al, 1
2919   168F 05 03         syscall sys_io      ; receive in AH
2920   1691 B9 00         cmp al, 0        ; check error code (AL)
2921   1693 C6 8D 16      je _gets_loop_scann      ; if no char received, retry
2922   1696 76 1B         cmp ah, 27
2923   1698 C6 B9 16      je _gets_ansi_esc_scann
2924   169B 76 0A         cmp ah, $0A        ; LF
2925   169D C6 24 17      je _gets_end_scann
2926   16A0 76 0D         cmp ah, $0D        ; CR
2927   16A2 C6 24 17      je _gets_end_scann
2928   16A5 76 5C         cmp ah, $5C        ; '\\'
2929   16A7 C6 E5 16      je _gets_escape_scann
2930   16AA 76 08         cmp ah, $08      ; check for backspace
2931   16AC C6 B5 16      je _gets_backspace_scann
2932   16AF 1A            mov al, ah
2933   16B0 3E            mov [d], al
2934   16B1 79            inc d
2935   16B2 0A 8D 16      jmp _gets_loop_scann
2936   16B5             _gets_backspace_scann:
2937   16B5 7F            dec d
2938   16B6 0A 8D 16      jmp _gets_loop_scann
2939   16B9             _gets_ansi_esc_scann:
2940   16B9 19 01         mov al, 1
2941   16BB 05 03         syscall sys_io        ; receive in AH without echo
2942   16BD B9 00         cmp al, 0          ; check error code (AL)
2943   16BF C6 B9 16      je _gets_ansi_esc_scann    ; if no char received, retry
2944   16C2 76 5B         cmp ah, '['
2945   16C4 C7 8D 16      jne _gets_loop_scann
2946   16C7             _gets_ansi_esc_2_scann:
2947   16C7 19 01         mov al, 1
2948   16C9 05 03         syscall sys_io          ; receive in AH without echo
2949   16CB B9 00         cmp al, 0            ; check error code (AL)
2950   16CD C6 C7 16      je _gets_ansi_esc_2_scann  ; if no char received, retry
2951   16D0 76 44         cmp ah, 'D'
2952   16D2 C6 DD 16      je _gets_left_arrow_scann
2953   16D5 76 43         cmp ah, 'C'
2954   16D7 C6 E1 16      je _gets_right_arrow_scann
2955   16DA 0A 8D 16      jmp _gets_loop_scann
2956   16DD             _gets_left_arrow_scann:
2957   16DD 7F            dec d
2958   16DE 0A 8D 16      jmp _gets_loop_scann
2959   16E1             _gets_right_arrow_scann:
2960   16E1 79            inc d
2961   16E2 0A 8D 16      jmp _gets_loop_scann
2962   16E5             _gets_escape_scann:
2963   16E5 19 01         mov al, 1
2964   16E7 05 03         syscall sys_io      ; receive in AH
2965   16E9 B9 00         cmp al, 0        ; check error code (AL)
2966   16EB C6 E5 16      je _gets_escape_scann      ; if no char received, retry
2967   16EE 76 6E         cmp ah, 'n'
2968   16F0 C6 0F 17      je _gets_LF_scann
2969   16F3 76 72         cmp ah, 'r'
2970   16F5 C6 16 17      je _gets_CR_scann
2971   16F8 76 30         cmp ah, '0'
2972   16FA C6 1D 17      je _gets_NULL_scann
2973   16FD 76 5C         cmp ah, $5C  
2974   16FF C6 08 17      je _gets_slash_scann
2975   1702 1A            mov al, ah        ; if not a known escape, it is just a normal letter
2976   1703 3E            mov [d], al
2977   1704 79            inc d
2978   1705 0A 8D 16      jmp _gets_loop_scann
2979   1708             _gets_slash_scann:
2980   1708 19 5C         mov al, $5C
2981   170A 3E            mov [d], al
2982   170B 79            inc d
2983   170C 0A 8D 16      jmp _gets_loop_scann
2984   170F             _gets_LF_scann:
2985   170F 19 0A         mov al, $0A
2986   1711 3E            mov [d], al
2987   1712 79            inc d
2988   1713 0A 8D 16      jmp _gets_loop_scann
2989   1716             _gets_CR_scann:
2990   1716 19 0D         mov al, $0D
2991   1718 3E            mov [d], al
2992   1719 79            inc d
2993   171A 0A 8D 16      jmp _gets_loop_scann
2994   171D             _gets_NULL_scann:
2995   171D 19 00         mov al, $00
2996   171F 3E            mov [d], al
2997   1720 79            inc d
2998   1721 0A 8D 16      jmp _gets_loop_scann
2999   1724             _gets_end_scann:
3000   1724 19 00         mov al, 0
3001   1726 3E            mov [d], al        ; terminate string
3002   1727 E7            pop d
3003   1728 09            ret
3004   1729             table_power_scann:
3005   1729 01 00       .dw 1              ; 1
3006   172B 0A 00       .dw $A             ; 10
3007   172D 64 00       .dw $64            ; 100
3008   172F E8 03       .dw $3E8           ; 1000
3009   1731 10 27       .dw $2710          ; 10000
3010   1733 A0 86 01 00 .dw $86A0, $1      ; 100000
3011   1737 40 42 0F 00 .dw $4240, $F      ; 1000000
3012   173B 80 96 98 00 .dw $9680, $98     ; 10000000
3013   173F 00 E1 F5 05 .dw $E100, $5F5    ; 100000000
3014   1743 00 CA 9A 3B .dw $CA00, $3B9A   ; 1000000000
3015   1747             ; --- END INLINE ASM SEGMENT
3016   1747 F9            leave
3017   1748 09            ret
3018   1749             
3019   1749             exit:
3020   1749 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3021   174C             ; --- BEGIN INLINE ASM SEGMENT
3022   174C FA 05 00      lea d, [bp + 5] ; $status
3023   174F 2A            mov b, [d] ; return value
3024   1750 05 0B         syscall sys_terminate_proc
3025   1752             ; --- END INLINE ASM SEGMENT
3026   1752 F9            leave
3027   1753 09            ret
3028   1754             ; --- END TEXT SEGMENT
3029   1754             
3030   1754             ; --- BEGIN DATA SEGMENT
3031   1754 00 00       _arrows: .fill 2, 0
3032   1756 00 00       _debug: .dw $0000
3033   1758 1D 00       _rand_val: .dw $001d
3034   175A 01 00       _rand_inc: .dw $0001
3035   175C 00 00 00 00 _loc_data: .fill 12, 0
3035   1760 00 00 00 00 
3035   1764 00 00 00 00 
3036   1768 00 00       _finished: .fill 2, 0
3037   176A 01 00 04 00 _cave_data: .dw $0001,$0004,$0007,$0000,$0002,$0009,$0001,$0003,$000b,$0002,$0004,$000d,$0000,$0003,$0005,
3037   176E 07 00 00 00 
3037   1772 02 00 09 00 
3037   1776 01 00 03 00 
3037   177A 0B 00 02 00 
3037   177E 04 00 0D 00 
3037   1782 00 00 03 00 
3037   1786 05 00 
3038   1788 00 00       .dw 
3039   178A 00 00       .dw 
3040   178C 04 00 06 00 .dw $0004,$0006,$000e,$0005,$0007,$0010,$0000,$0006,$0008,$0007,$0009,$0011,$0001,$0008,$000a,$0009,
3040   1790 0E 00 05 00 
3040   1794 07 00 10 00 
3040   1798 00 00 06 00 
3040   179C 08 00 07 00 
3040   17A0 09 00 11 00 
3040   17A4 01 00 08 00 
3040   17A8 0A 00 09 00 
3041   17AC 0B 00 12 00 .dw $000b,$0012,$0002,$000a,$000c,$000b,$000d,$0013,$0003,$000c,$000e,$0005,$000d,$000f,$000e,$0010,
3041   17B0 02 00 0A 00 
3041   17B4 0C 00 0B 00 
3041   17B8 0D 00 13 00 
3041   17BC 03 00 0C 00 
3041   17C0 0E 00 05 00 
3041   17C4 0D 00 0F 00 
3041   17C8 0E 00 10 00 
3042   17CC 13 00 06 00 .dw $0013,$0006,$000f,$0011,$0008,$0010,$0012,$000a,$0011,$0013,$000c,$000f,$0012,
3042   17D0 0F 00 11 00 
3042   17D4 08 00 10 00 
3042   17D8 12 00 0A 00 
3042   17DC 11 00 13 00 
3042   17E0 0C 00 0F 00 
3042   17E4 12 00 
3043   17E6 49 4E 53 54 _s0: .db "INSTRUCTIONS (Y-N): ", 0
3043   17EA 52 55 43 54 
3043   17EE 49 4F 4E 53 
3043   17F2 20 28 59 2D 
3043   17F6 4E 29 3A 20 
3043   17FA 00 
3044   17FB 4E 45 57 20 _s1: .db "NEW GAME (Y-N): ", 0
3044   17FF 47 41 4D 45 
3044   1803 20 28 59 2D 
3044   1807 4E 29 3A 20 
3044   180B 00 
3045   180C 0A 0A 00    _s2: .db "\n\n", 0
3046   180F 57 45 4C 43 _s3: .db "WELCOME TO HUNT THE WUMPUS\n", 0
3046   1813 4F 4D 45 20 
3046   1817 54 4F 20 48 
3046   181B 55 4E 54 20 
3046   181F 54 48 45 20 
3046   1823 57 55 4D 50 
3046   1827 55 53 0A 00 
3047   182B 54 48 45 20 _s4: .db "THE WUMPUS LIVES IN A CAVE OF 20 ROOMS. EACH ROOM HAS 3 TUNNELS LEADING TO OTHER ROOMS.\n", 0
3047   182F 57 55 4D 50 
3047   1833 55 53 20 4C 
3047   1837 49 56 45 53 
3047   183B 20 49 4E 20 
3047   183F 41 20 43 41 
3047   1843 56 45 20 4F 
3047   1847 46 20 32 30 
3047   184B 20 52 4F 4F 
3047   184F 4D 53 2E 20 
3047   1853 45 41 43 48 
3047   1857 20 52 4F 4F 
3047   185B 4D 20 48 41 
3047   185F 53 20 33 20 
3047   1863 54 55 4E 4E 
3047   1867 45 4C 53 20 
3047   186B 4C 45 41 44 
3047   186F 49 4E 47 20 
3047   1873 54 4F 20 4F 
3047   1877 54 48 45 52 
3047   187B 20 52 4F 4F 
3047   187F 4D 53 2E 0A 
3047   1883 00 
3048   1884 4C 4F 4F 4B _s5: .db "LOOK AT A DODECAHEDRON TO SEE HOW THIS WORKS.\n\n", 0
3048   1888 20 41 54 20 
3048   188C 41 20 44 4F 
3048   1890 44 45 43 41 
3048   1894 48 45 44 52 
3048   1898 4F 4E 20 54 
3048   189C 4F 20 53 45 
3048   18A0 45 20 48 4F 
3048   18A4 57 20 54 48 
3048   18A8 49 53 20 57 
3048   18AC 4F 52 4B 53 
3048   18B0 2E 0A 0A 00 
3049   18B4 20 48 41 5A _s6: .db " HAZARDS:\n", 0
3049   18B8 41 52 44 53 
3049   18BC 3A 0A 00 
3050   18BF 20 42 4F 54 _s7: .db " BOTTOMLESS PITS: TWO ROOMS HAVE BOTTOMLESS PITS IN THEM. IF YOU GO THERE, YOU FALL INTO THE PIT (& LOSE!)\n", 0
3050   18C3 54 4F 4D 4C 
3050   18C7 45 53 53 20 
3050   18CB 50 49 54 53 
3050   18CF 3A 20 54 57 
3050   18D3 4F 20 52 4F 
3050   18D7 4F 4D 53 20 
3050   18DB 48 41 56 45 
3050   18DF 20 42 4F 54 
3050   18E3 54 4F 4D 4C 
3050   18E7 45 53 53 20 
3050   18EB 50 49 54 53 
3050   18EF 20 49 4E 20 
3050   18F3 54 48 45 4D 
3050   18F7 2E 20 49 46 
3050   18FB 20 59 4F 55 
3050   18FF 20 47 4F 20 
3050   1903 54 48 45 52 
3050   1907 45 2C 20 59 
3050   190B 4F 55 20 46 
3050   190F 41 4C 4C 20 
3050   1913 49 4E 54 4F 
3050   1917 20 54 48 45 
3050   191B 20 50 49 54 
3050   191F 20 28 26 20 
3050   1923 4C 4F 53 45 
3050   1927 21 29 0A 00 
3051   192B 20 53 55 50 _s8: .db " SUPER BATS: TWO OTHER ROOMS HAVE SUPER BATS. IF YOU GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n", 0
3051   192F 45 52 20 42 
3051   1933 41 54 53 3A 
3051   1937 20 54 57 4F 
3051   193B 20 4F 54 48 
3051   193F 45 52 20 52 
3051   1943 4F 4F 4D 53 
3051   1947 20 48 41 56 
3051   194B 45 20 53 55 
3051   194F 50 45 52 20 
3051   1953 42 41 54 53 
3051   1957 2E 20 49 46 
3051   195B 20 59 4F 55 
3051   195F 20 47 4F 20 
3051   1963 54 48 45 52 
3051   1967 45 2C 20 41 
3051   196B 20 42 41 54 
3051   196F 20 47 52 41 
3051   1973 42 53 20 59 
3051   1977 4F 55 20 41 
3051   197B 4E 44 20 54 
3051   197F 41 4B 45 53 
3051   1983 20 59 4F 55 
3051   1987 20 54 4F 20 
3051   198B 53 4F 4D 45 
3051   198F 20 4F 54 48 
3051   1993 45 52 0A 00 
3052   1997 20 20 20 52 _s9: .db "   ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n", 0
3052   199B 4F 4F 4D 20 
3052   199F 41 54 20 52 
3052   19A3 41 4E 44 4F 
3052   19A7 4D 2E 20 28 
3052   19AB 57 48 49 43 
3052   19AF 48 20 4D 41 
3052   19B3 59 20 42 45 
3052   19B7 20 54 52 4F 
3052   19BB 55 42 4C 45 
3052   19BF 53 4F 4D 45 
3052   19C3 29 0A 0A 00 
3053   19C7 20 57 55 4D _s10: .db " WUMPUS: THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n", 0
3053   19CB 50 55 53 3A 
3053   19CF 20 54 48 45 
3053   19D3 20 57 55 4D 
3053   19D7 50 55 53 20 
3053   19DB 49 53 20 4E 
3053   19DF 4F 54 20 42 
3053   19E3 4F 54 48 45 
3053   19E7 52 45 44 20 
3053   19EB 42 59 20 48 
3053   19EF 41 5A 41 52 
3053   19F3 44 53 20 28 
3053   19F7 48 45 20 48 
3053   19FB 41 53 20 53 
3053   19FF 55 43 4B 45 
3053   1A03 52 20 46 45 
3053   1A07 45 54 20 41 
3053   1A0B 4E 44 20 49 
3053   1A0F 53 20 54 4F 
3053   1A13 4F 20 42 49 
3053   1A17 47 20 46 4F 
3053   1A1B 52 20 41 20 
3053   1A1F 42 41 54 20 
3053   1A23 54 4F 20 4C 
3053   1A27 49 46 54 29 
3053   1A2B 2E 20 20 55 
3053   1A2F 53 55 41 4C 
3053   1A33 4C 59 0A 00 
3054   1A37 20 20 20 48 _s11: .db "   HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN ARROW OR YOU ENTERING HIS ROOM.\n", 0
3054   1A3B 45 20 49 53 
3054   1A3F 20 41 53 4C 
3054   1A43 45 45 50 2E 
3054   1A47 20 20 54 57 
3054   1A4B 4F 20 54 48 
3054   1A4F 49 4E 47 53 
3054   1A53 20 57 41 4B 
3054   1A57 45 20 48 49 
3054   1A5B 4D 20 55 50 
3054   1A5F 3A 20 59 4F 
3054   1A63 55 20 53 48 
3054   1A67 4F 4F 54 49 
3054   1A6B 4E 47 20 41 
3054   1A6F 4E 20 41 52 
3054   1A73 52 4F 57 20 
3054   1A77 4F 52 20 59 
3054   1A7B 4F 55 20 45 
3054   1A7F 4E 54 45 52 
3054   1A83 49 4E 47 20 
3054   1A87 48 49 53 20 
3054   1A8B 52 4F 4F 4D 
3054   1A8F 2E 0A 00 
3055   1A92 20 20 20 49 _s12: .db "   IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n", 0
3055   1A96 46 20 54 48 
3055   1A9A 45 20 57 55 
3055   1A9E 4D 50 55 53 
3055   1AA2 20 57 41 4B 
3055   1AA6 45 53 20 48 
3055   1AAA 45 20 4D 4F 
3055   1AAE 56 45 53 20 
3055   1AB2 28 50 3D 2E 
3055   1AB6 37 35 29 20 
3055   1ABA 4F 4E 45 20 
3055   1ABE 52 4F 4F 4D 
3055   1AC2 20 4F 52 20 
3055   1AC6 53 54 41 59 
3055   1ACA 53 20 53 54 
3055   1ACE 49 4C 4C 20 
3055   1AD2 28 50 3D 2E 
3055   1AD6 32 35 29 2E 
3055   1ADA 20 20 41 46 
3055   1ADE 54 45 52 20 
3055   1AE2 54 48 41 54 
3055   1AE6 2C 20 49 46 
3055   1AEA 20 48 45 20 
3055   1AEE 49 53 20 57 
3055   1AF2 48 45 52 45 
3055   1AF6 20 59 4F 55 
3055   1AFA 0A 00 
3056   1AFC 20 20 20 41 _s13: .db "   ARE, HE EATS YOU UP AND YOU LOSE!\n\n", 0
3056   1B00 52 45 2C 20 
3056   1B04 48 45 20 45 
3056   1B08 41 54 53 20 
3056   1B0C 59 4F 55 20 
3056   1B10 55 50 20 41 
3056   1B14 4E 44 20 59 
3056   1B18 4F 55 20 4C 
3056   1B1C 4F 53 45 21 
3056   1B20 0A 0A 00 
3057   1B23 20 59 4F 55 _s14: .db " YOU: EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n", 0
3057   1B27 3A 20 45 41 
3057   1B2B 43 48 20 54 
3057   1B2F 55 52 4E 20 
3057   1B33 59 4F 55 20 
3057   1B37 4D 41 59 20 
3057   1B3B 4D 4F 56 45 
3057   1B3F 20 4F 52 20 
3057   1B43 53 48 4F 4F 
3057   1B47 54 20 41 20 
3057   1B4B 43 52 4F 4F 
3057   1B4F 4B 45 44 20 
3057   1B53 41 52 52 4F 
3057   1B57 57 0A 00 
3058   1B5A 20 4D 4F 56 _s15: .db " MOVING: YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n", 0
3058   1B5E 49 4E 47 3A 
3058   1B62 20 59 4F 55 
3058   1B66 20 43 41 4E 
3058   1B6A 20 4D 4F 56 
3058   1B6E 45 20 4F 4E 
3058   1B72 45 20 52 4F 
3058   1B76 4F 4D 20 28 
3058   1B7A 54 48 52 55 
3058   1B7E 20 4F 4E 45 
3058   1B82 20 54 55 4E 
3058   1B86 4E 45 4C 29 
3058   1B8A 0A 00 
3059   1B8C 20 41 52 52 _s16: .db " ARROWS: YOU HAVE 5 ARROWS. YOU LOSE WHEN YOU RUN OUT\n", 0
3059   1B90 4F 57 53 3A 
3059   1B94 20 59 4F 55 
3059   1B98 20 48 41 56 
3059   1B9C 45 20 35 20 
3059   1BA0 41 52 52 4F 
3059   1BA4 57 53 2E 20 
3059   1BA8 59 4F 55 20 
3059   1BAC 4C 4F 53 45 
3059   1BB0 20 57 48 45 
3059   1BB4 4E 20 59 4F 
3059   1BB8 55 20 52 55 
3059   1BBC 4E 20 4F 55 
3059   1BC0 54 0A 00 
3060   1BC3 20 20 20 45 _s17: .db "   EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n", 0
3060   1BC7 41 43 48 20 
3060   1BCB 41 52 52 4F 
3060   1BCF 57 20 43 41 
3060   1BD3 4E 20 47 4F 
3060   1BD7 20 46 52 4F 
3060   1BDB 4D 20 31 20 
3060   1BDF 54 4F 20 35 
3060   1BE3 20 52 4F 4F 
3060   1BE7 4D 53 2E 20 
3060   1BEB 59 4F 55 20 
3060   1BEF 41 49 4D 20 
3060   1BF3 42 59 20 54 
3060   1BF7 45 4C 4C 49 
3060   1BFB 4E 47 20 54 
3060   1BFF 48 45 20 43 
3060   1C03 4F 4D 50 55 
3060   1C07 54 45 52 20 
3060   1C0B 54 48 45 20 
3060   1C0F 52 4F 4F 4D 
3060   1C13 23 53 20 59 
3060   1C17 4F 55 20 57 
3060   1C1B 41 4E 54 20 
3060   1C1F 54 48 45 20 
3060   1C23 41 52 52 4F 
3060   1C27 57 20 54 4F 
3060   1C2B 20 47 4F 20 
3060   1C2F 54 4F 2E 0A 
3060   1C33 00 
3061   1C34 20 20 20 49 _s18: .db "   IF THE ARROW CANT GO THAT WAY (IF NO TUNNEL) IT MOVES AT RANDOM TO THE NEXT ROOM.\n", 0
3061   1C38 46 20 54 48 
3061   1C3C 45 20 41 52 
3061   1C40 52 4F 57 20 
3061   1C44 43 41 4E 54 
3061   1C48 20 47 4F 20 
3061   1C4C 54 48 41 54 
3061   1C50 20 57 41 59 
3061   1C54 20 28 49 46 
3061   1C58 20 4E 4F 20 
3061   1C5C 54 55 4E 4E 
3061   1C60 45 4C 29 20 
3061   1C64 49 54 20 4D 
3061   1C68 4F 56 45 53 
3061   1C6C 20 41 54 20 
3061   1C70 52 41 4E 44 
3061   1C74 4F 4D 20 54 
3061   1C78 4F 20 54 48 
3061   1C7C 45 20 4E 45 
3061   1C80 58 54 20 52 
3061   1C84 4F 4F 4D 2E 
3061   1C88 0A 00 
3062   1C8A 20 20 20 49 _s19: .db "   IF THE ARROW HITS THE WUMPUS, YOU WIN.\n", 0
3062   1C8E 46 20 54 48 
3062   1C92 45 20 41 52 
3062   1C96 52 4F 57 20 
3062   1C9A 48 49 54 53 
3062   1C9E 20 54 48 45 
3062   1CA2 20 57 55 4D 
3062   1CA6 50 55 53 2C 
3062   1CAA 20 59 4F 55 
3062   1CAE 20 57 49 4E 
3062   1CB2 2E 0A 00 
3063   1CB5 20 20 20 49 _s20: .db "   IF THE ARROW HITS YOU, YOU LOSE.\n", 0
3063   1CB9 46 20 54 48 
3063   1CBD 45 20 41 52 
3063   1CC1 52 4F 57 20 
3063   1CC5 48 49 54 53 
3063   1CC9 20 59 4F 55 
3063   1CCD 2C 20 59 4F 
3063   1CD1 55 20 4C 4F 
3063   1CD5 53 45 2E 0A 
3063   1CD9 00 
3064   1CDA 20 57 41 52 _s21: .db " WARNINGS: WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD, THE COMPUTER SAYS:\n", 0
3064   1CDE 4E 49 4E 47 
3064   1CE2 53 3A 20 57 
3064   1CE6 48 45 4E 20 
3064   1CEA 59 4F 55 20 
3064   1CEE 41 52 45 20 
3064   1CF2 4F 4E 45 20 
3064   1CF6 52 4F 4F 4D 
3064   1CFA 20 41 57 41 
3064   1CFE 59 20 46 52 
3064   1D02 4F 4D 20 41 
3064   1D06 20 57 55 4D 
3064   1D0A 50 55 53 20 
3064   1D0E 4F 52 20 48 
3064   1D12 41 5A 41 52 
3064   1D16 44 2C 20 54 
3064   1D1A 48 45 20 43 
3064   1D1E 4F 4D 50 55 
3064   1D22 54 45 52 20 
3064   1D26 53 41 59 53 
3064   1D2A 3A 0A 00 
3065   1D2D 20 20 20 57 _s22: .db "   WUMPUS: I SMELL A WUMPUS\n", 0
3065   1D31 55 4D 50 55 
3065   1D35 53 3A 20 49 
3065   1D39 20 53 4D 45 
3065   1D3D 4C 4C 20 41 
3065   1D41 20 57 55 4D 
3065   1D45 50 55 53 0A 
3065   1D49 00 
3066   1D4A 20 20 20 42 _s23: .db "   BAT: BATS NEARBY\n", 0
3066   1D4E 41 54 3A 20 
3066   1D52 42 41 54 53 
3066   1D56 20 4E 45 41 
3066   1D5A 52 42 59 0A 
3066   1D5E 00 
3067   1D5F 20 20 20 50 _s24: .db "   PIT: I FEEL A DRAFT\n\n", 0
3067   1D63 49 54 3A 20 
3067   1D67 49 20 46 45 
3067   1D6B 45 4C 20 41 
3067   1D6F 20 44 52 41 
3067   1D73 46 54 0A 0A 
3067   1D77 00 
3068   1D78 0A 00       _s25: .db "\n", 0
3069   1D7A 49 20 53 4D _s26: .db "I SMELL A WUMPUS!\n", 0
3069   1D7E 45 4C 4C 20 
3069   1D82 41 20 57 55 
3069   1D86 4D 50 55 53 
3069   1D8A 21 0A 00 
3070   1D8D 49 20 46 45 _s27: .db "I FEEL A DRAFT\n", 0
3070   1D91 45 4C 20 41 
3070   1D95 20 44 52 41 
3070   1D99 46 54 0A 00 
3071   1D9D 42 41 54 53 _s28: .db "BATS NEARBY!\n", 0
3071   1DA1 20 4E 45 41 
3071   1DA5 52 42 59 21 
3071   1DA9 0A 00 
3072   1DAB 59 4F 55 20 _s29: .db "YOU ARE IN ROOM ", 0
3072   1DAF 41 52 45 20 
3072   1DB3 49 4E 20 52 
3072   1DB7 4F 4F 4D 20 
3072   1DBB 00 
3073   1DBC 54 55 4E 4E _s30: .db "TUNNELS LEAD TO ", 0
3073   1DC0 45 4C 53 20 
3073   1DC4 4C 45 41 44 
3073   1DC8 20 54 4F 20 
3073   1DCC 00 
3074   1DCD 2C 20 00    _s31: .db ", ", 0
3075   1DD0 53 48 4F 4F _s32: .db "SHOOT OR MOVE (S-M): ", 0
3075   1DD4 54 20 4F 52 
3075   1DD8 20 4D 4F 56 
3075   1DDC 45 20 28 53 
3075   1DE0 2D 4D 29 3A 
3075   1DE4 20 00 
3076   1DE6 54 53 4B 20 _s33: .db "TSK TSK TSK - WUMPUS GOT YOU!\n", 0
3076   1DEA 54 53 4B 20 
3076   1DEE 54 53 4B 20 
3076   1DF2 2D 20 57 55 
3076   1DF6 4D 50 55 53 
3076   1DFA 20 47 4F 54 
3076   1DFE 20 59 4F 55 
3076   1E02 21 0A 00 
3077   1E05 0A 4E 55 4D _s34: .db "\nNUMBER OF ROOMS (1-5): ", 0
3077   1E09 42 45 52 20 
3077   1E0D 4F 46 20 52 
3077   1E11 4F 4F 4D 53 
3077   1E15 20 28 31 2D 
3077   1E19 35 29 3A 20 
3077   1E1D 00 
3078   1E1E 52 4F 4F 4D _s35: .db "ROOM #", 0
3078   1E22 20 23 00 
3079   1E25 41 52 52 4F _s36: .db "ARROWS ARENT THAT CROOKED - TRY ANOTHER ROOM\n", 0
3079   1E29 57 53 20 41 
3079   1E2D 52 45 4E 54 
3079   1E31 20 54 48 41 
3079   1E35 54 20 43 52 
3079   1E39 4F 4F 4B 45 
3079   1E3D 44 20 2D 20 
3079   1E41 54 52 59 20 
3079   1E45 41 4E 4F 54 
3079   1E49 48 45 52 20 
3079   1E4D 52 4F 4F 4D 
3079   1E51 0A 00 
3080   1E53 41 48 41 21 _s37: .db "AHA! YOU GOT THE WUMPUS!\n", 0
3080   1E57 20 59 4F 55 
3080   1E5B 20 47 4F 54 
3080   1E5F 20 54 48 45 
3080   1E63 20 57 55 4D 
3080   1E67 50 55 53 21 
3080   1E6B 0A 00 
3081   1E6D 4F 55 43 48 _s38: .db "OUCH! ARROW GOT YOU!\n", 0
3081   1E71 21 20 41 52 
3081   1E75 52 4F 57 20 
3081   1E79 47 4F 54 20 
3081   1E7D 59 4F 55 21 
3081   1E81 0A 00 
3082   1E83 4D 49 53 53 _s39: .db "MISSED\n", 0
3082   1E87 45 44 0A 00 
3083   1E8B 0A 57 48 45 _s40: .db "\nWHERE TO: ", 0
3083   1E8F 52 45 20 54 
3083   1E93 4F 3A 20 00 
3084   1E97 4E 4F 54 20 _s41: .db "NOT POSSIBLE\n", 0
3084   1E9B 50 4F 53 53 
3084   1E9F 49 42 4C 45 
3084   1EA3 0A 00 
3085   1EA5 5A 41 50 2D _s42: .db "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n", 0
3085   1EA9 2D 53 55 50 
3085   1EAD 45 52 20 42 
3085   1EB1 41 54 20 53 
3085   1EB5 4E 41 54 43 
3085   1EB9 48 21 20 45 
3085   1EBD 4C 53 45 57 
3085   1EC1 48 45 52 45 
3085   1EC5 56 49 4C 4C 
3085   1EC9 45 20 46 4F 
3085   1ECD 52 20 59 4F 
3085   1ED1 55 21 0A 00 
3086   1ED5 2E 2E 2E 20 _s43: .db "... OOPS! BUMPED A WUMPUS!\n", 0
3086   1ED9 4F 4F 50 53 
3086   1EDD 21 20 42 55 
3086   1EE1 4D 50 45 44 
3086   1EE5 20 41 20 57 
3086   1EE9 55 4D 50 55 
3086   1EED 53 21 0A 00 
3087   1EF1 59 59 59 59 _s44: .db "YYYYIIIIEEEE . . . FELL IN PIT\n", 0
3087   1EF5 49 49 49 49 
3087   1EF9 45 45 45 45 
3087   1EFD 20 2E 20 2E 
3087   1F01 20 2E 20 46 
3087   1F05 45 4C 4C 20 
3087   1F09 49 4E 20 50 
3087   1F0D 49 54 0A 00 
3088   1F11 2A 2A 2A 2A _s45: .db "*********************\n", 0
3088   1F15 2A 2A 2A 2A 
3088   1F19 2A 2A 2A 2A 
3088   1F1D 2A 2A 2A 2A 
3088   1F21 2A 2A 2A 2A 
3088   1F25 2A 0A 00 
3089   1F28 2A 2A 20 48 _s46: .db "** HUNT THE WUMPUS **\n", 0
3089   1F2C 55 4E 54 20 
3089   1F30 54 48 45 20 
3089   1F34 57 55 4D 50 
3089   1F38 55 53 20 2A 
3089   1F3C 2A 0A 00 
3090   1F3F 57 75 6D 70 _s47: .db "Wumpus is at ", 0
3090   1F43 75 73 20 69 
3090   1F47 73 20 61 74 
3090   1F4B 20 00 
3091   1F4D 2C 20 70 69 _s48: .db ", pits at ", 0
3091   1F51 74 73 20 61 
3091   1F55 74 20 00 
3092   1F58 20 26 20 00 _s49: .db " & ", 0
3093   1F5C 2C 20 62 61 _s50: .db ", bats at ", 0
3093   1F60 74 73 20 61 
3093   1F64 74 20 00 
3094   1F67 48 45 45 20 _s51: .db "HEE HEE HEE - THE WUMPUS WILL GET YOU NEXT TIME!!\n", 0
3094   1F6B 48 45 45 20 
3094   1F6F 48 45 45 20 
3094   1F73 2D 20 54 48 
3094   1F77 45 20 57 55 
3094   1F7B 4D 50 55 53 
3094   1F7F 20 57 49 4C 
3094   1F83 4C 20 47 45 
3094   1F87 54 20 59 4F 
3094   1F8B 55 20 4E 45 
3094   1F8F 58 54 20 54 
3094   1F93 49 4D 45 21 
3094   1F97 21 0A 00 
3095   1F9A 48 41 20 48 _s52: .db "HA HA HA - YOU LOSE!\n", 0
3095   1F9E 41 20 48 41 
3095   1FA2 20 2D 20 59 
3095   1FA6 4F 55 20 4C 
3095   1FAA 4F 53 45 21 
3095   1FAE 0A 00 
3096   1FB0             
3097   1FB0 B2 1F       _heap_top: .dw _heap
3098   1FB2 00          _heap: .db 0
3099   1FB3             ; --- END DATA SEGMENT
3100   1FB3             
3101   1FB3             .end
tasm: Number of errors = 0
