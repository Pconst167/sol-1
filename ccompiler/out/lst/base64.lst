0001   0000             ; --- FILENAME: programs/base64.c
0002   0000             ; --- DATE:     24-06-2025 at 13:49:12
0003   0000             .include "lib/asm/kernel.exp"
0001+  0000             fdc_irq_event    .EQU  $195a
0002+  0000             sys_break        .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_create_proc  .EQU  $0005
0008+  0000             sys_list_proc    .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_fdc          .EQU  $000d
0016+  0000             text_org         .EQU  $0400
0004   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0005   0000             
0006   0000             ; --- BEGIN TEXT SEGMENT
0007   0400             .org text_org
0008   0400             main:
0009   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0010   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0011   0408             ; char input[512]; 
0012   0408 52 00 02      sub sp, 512
0013   040B             ; char output[256]; 
0014   040B 52 00 01      sub sp, 256
0015   040E             ; printf("\nEnter a base64 encoded string to decode: "); 
0016   040E             ; --- START FUNCTION CALL
0017   040E 26 B6 1A      mov b, _s0 ; "\nEnter a base64 encoded string to decode: "
0018   0411 FD AB         swp b
0019   0413 D8            push b
0020   0414 07 46 10      call printf
0021   0417 51 02 00      add sp, 2
0022   041A             ; --- END FUNCTION CALL
0023   041A             ; gets(input); 
0024   041A             ; --- START FUNCTION CALL
0025   041A FA 01 FE      lea d, [bp + -511] ; $input
0026   041D 2D            mov b, d
0027   041E 38 00 00      mov c, 0
0028   0421 FD AB         swp b
0029   0423 D8            push b
0030   0424 07 5A 19      call gets
0031   0427 51 02 00      add sp, 2
0032   042A             ; --- END FUNCTION CALL
0033   042A             ; base64_encode(input, output); 
0034   042A             ; --- START FUNCTION CALL
0035   042A FA 01 FD      lea d, [bp + -767] ; $output
0036   042D 2D            mov b, d
0037   042E 38 00 00      mov c, 0
0038   0431 FD AB         swp b
0039   0433 D8            push b
0040   0434 FA 01 FE      lea d, [bp + -511] ; $input
0041   0437 2D            mov b, d
0042   0438 38 00 00      mov c, 0
0043   043B FD AB         swp b
0044   043D D8            push b
0045   043E 07 93 04      call base64_encode
0046   0441 51 04 00      add sp, 4
0047   0444             ; --- END FUNCTION CALL
0048   0444             ; printf("\nEncoded string: %s\n", output); 
0049   0444             ; --- START FUNCTION CALL
0050   0444 FA 01 FD      lea d, [bp + -767] ; $output
0051   0447 2D            mov b, d
0052   0448 38 00 00      mov c, 0
0053   044B FD AB         swp b
0054   044D D8            push b
0055   044E 26 E1 1A      mov b, _s1 ; "\nEncoded string: %s\n"
0056   0451 FD AB         swp b
0057   0453 D8            push b
0058   0454 07 46 10      call printf
0059   0457 51 04 00      add sp, 4
0060   045A             ; --- END FUNCTION CALL
0061   045A             ; base64_decode(output, input); 
0062   045A             ; --- START FUNCTION CALL
0063   045A FA 01 FE      lea d, [bp + -511] ; $input
0064   045D 2D            mov b, d
0065   045E 38 00 00      mov c, 0
0066   0461 FD AB         swp b
0067   0463 D8            push b
0068   0464 FA 01 FD      lea d, [bp + -767] ; $output
0069   0467 2D            mov b, d
0070   0468 38 00 00      mov c, 0
0071   046B FD AB         swp b
0072   046D D8            push b
0073   046E 07 E2 0A      call base64_decode
0074   0471 51 04 00      add sp, 4
0075   0474             ; --- END FUNCTION CALL
0076   0474             ; printf("\nDecoded string: %s\n", input); 
0077   0474             ; --- START FUNCTION CALL
0078   0474 FA 01 FE      lea d, [bp + -511] ; $input
0079   0477 2D            mov b, d
0080   0478 38 00 00      mov c, 0
0081   047B FD AB         swp b
0082   047D D8            push b
0083   047E 26 F6 1A      mov b, _s2 ; "\nDecoded string: %s\n"
0084   0481 FD AB         swp b
0085   0483 D8            push b
0086   0484 07 46 10      call printf
0087   0487 51 04 00      add sp, 4
0088   048A             ; --- END FUNCTION CALL
0089   048A             ; return 0; 
0090   048A FD 2E 00 00   mov32 cb, $00000000
0090   048E 00 00 
0091   0490 F9            leave
0092   0491 05 0B         syscall sys_terminate_proc
0093   0493             
0094   0493             base64_encode:
0095   0493 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0096   0496             ; int i = 0; 
0097   0496 52 02 00      sub sp, 2
0098   0499             ; --- START LOCAL VAR INITIALIZATION
0099   0499 FA FF FF      lea d, [bp + -1] ; $i
0100   049C DA            push d
0101   049D FD 2E 00 00   mov32 cb, $00000000
0101   04A1 00 00 
0102   04A3 E7            pop d
0103   04A4 FD 43         mov [d], b
0104   04A6             ; --- END LOCAL VAR INITIALIZATION
0105   04A6             ; int j = 0; 
0106   04A6 52 02 00      sub sp, 2
0107   04A9             ; --- START LOCAL VAR INITIALIZATION
0108   04A9 FA FD FF      lea d, [bp + -3] ; $j
0109   04AC DA            push d
0110   04AD FD 2E 00 00   mov32 cb, $00000000
0110   04B1 00 00 
0111   04B3 E7            pop d
0112   04B4 FD 43         mov [d], b
0113   04B6             ; --- END LOCAL VAR INITIALIZATION
0114   04B6             ; int k; 
0115   04B6 52 02 00      sub sp, 2
0116   04B9             ; int input_len; 
0117   04B9 52 02 00      sub sp, 2
0118   04BC             ; unsigned char input_buffer[3]; 
0119   04BC 52 03 00      sub sp, 3
0120   04BF             ; unsigned char output_buffer[4]; 
0121   04BF 52 04 00      sub sp, 4
0122   04C2             ; input_len = strlen(input); 
0123   04C2 FA F9 FF      lea d, [bp + -7] ; $input_len
0124   04C5 DA            push d
0125   04C6             ; --- START FUNCTION CALL
0126   04C6 FA 05 00      lea d, [bp + 5] ; $input
0127   04C9 2A            mov b, [d]
0128   04CA 38 00 00      mov c, 0
0129   04CD FD AB         swp b
0130   04CF D8            push b
0131   04D0 07 18 1A      call strlen
0132   04D3 51 02 00      add sp, 2
0133   04D6             ; --- END FUNCTION CALL
0134   04D6 E7            pop d
0135   04D7 FD 43         mov [d], b
0136   04D9             ; while (input_len--) { 
0137   04D9             _while1_cond:
0138   04D9 FA F9 FF      lea d, [bp + -7] ; $input_len
0139   04DC 2A            mov b, [d]
0140   04DD 38 00 00      mov c, 0
0141   04E0 11            mov a, b
0142   04E1 FD 7D         dec b
0143   04E3 FA F9 FF      lea d, [bp + -7] ; $input_len
0144   04E6 FD 43         mov [d], b
0145   04E8 27            mov b, a
0146   04E9 C0 00 00      cmp b, 0
0147   04EC C6 1B 07      je _while1_exit
0148   04EF             _while1_block:
0149   04EF             ; input_buffer[i++] = *(input++); 
0150   04EF FA F6 FF      lea d, [bp + -10] ; $input_buffer
0151   04F2 D7            push a
0152   04F3 DA            push d
0153   04F4 FA FF FF      lea d, [bp + -1] ; $i
0154   04F7 2A            mov b, [d]
0155   04F8 38 00 00      mov c, 0
0156   04FB 11            mov a, b
0157   04FC FD 77         inc b
0158   04FE FA FF FF      lea d, [bp + -1] ; $i
0159   0501 FD 43         mov [d], b
0160   0503 27            mov b, a
0161   0504 E7            pop d
0162   0505 5A            add d, b
0163   0506 E4            pop a
0164   0507 DA            push d
0165   0508 FA 05 00      lea d, [bp + 5] ; $input
0166   050B 2A            mov b, [d]
0167   050C 38 00 00      mov c, 0
0168   050F FD 77         inc b
0169   0511 FA 05 00      lea d, [bp + 5] ; $input
0170   0514 FD 43         mov [d], b
0171   0516 FD 7D         dec b
0172   0518 74            mov d, b
0173   0519 32            mov bl, [d]
0174   051A A7 00         mov bh, 0
0175   051C 38 00 00      mov c, 0
0176   051F E7            pop d
0177   0520 FD 3E         mov [d], bl
0178   0522             ; if (i == 3) { 
0179   0522             _if2_cond:
0180   0522 FA FF FF      lea d, [bp + -1] ; $i
0181   0525 2A            mov b, [d]
0182   0526 38 00 00      mov c, 0
0183   0529             ; --- START RELATIONAL
0184   0529 D7            push a
0185   052A 11            mov a, b
0186   052B FD 2E 03 00   mov32 cb, $00000003
0186   052F 00 00 
0187   0531 B0            cmp a, b
0188   0532 FD 71         seq ; ==
0189   0534 E4            pop a
0190   0535             ; --- END RELATIONAL
0191   0535 C0 00 00      cmp b, 0
0192   0538 C6 18 07      je _if2_exit
0193   053B             _if2_TRUE:
0194   053B             ; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0195   053B FA F2 FF      lea d, [bp + -14] ; $output_buffer
0196   053E D7            push a
0197   053F DA            push d
0198   0540 FD 2E 00 00   mov32 cb, $00000000
0198   0544 00 00 
0199   0546 E7            pop d
0200   0547 5A            add d, b
0201   0548 E4            pop a
0202   0549 DA            push d
0203   054A FA F6 FF      lea d, [bp + -10] ; $input_buffer
0204   054D D7            push a
0205   054E DA            push d
0206   054F FD 2E 00 00   mov32 cb, $00000000
0206   0553 00 00 
0207   0555 E7            pop d
0208   0556 5A            add d, b
0209   0557 E4            pop a
0210   0558 32            mov bl, [d]
0211   0559 A7 00         mov bh, 0
0212   055B 38 00 00      mov c, 0
0213   055E D7            push a
0214   055F 11            mov a, b
0215   0560 FD 2E FC 00   mov32 cb, $000000fc
0215   0564 00 00 
0216   0566 FD 92         and b, a ; &
0217   0568 E4            pop a
0218   0569             ; --- START SHIFT
0219   0569 D7            push a
0220   056A 11            mov a, b
0221   056B FD 2E 02 00   mov32 cb, $00000002
0221   056F 00 00 
0222   0571 FD 39         mov c, b
0223   0573 A5            ashr a, cl
0224   0574 27            mov b, a
0225   0575 E4            pop a
0226   0576             ; --- END SHIFT
0227   0576 E7            pop d
0228   0577 FD 3E         mov [d], bl
0229   0579             ; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0230   0579 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0231   057C D7            push a
0232   057D DA            push d
0233   057E FD 2E 01 00   mov32 cb, $00000001
0233   0582 00 00 
0234   0584 E7            pop d
0235   0585 5A            add d, b
0236   0586 E4            pop a
0237   0587 DA            push d
0238   0588 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0239   058B D7            push a
0240   058C DA            push d
0241   058D FD 2E 00 00   mov32 cb, $00000000
0241   0591 00 00 
0242   0593 E7            pop d
0243   0594 5A            add d, b
0244   0595 E4            pop a
0245   0596 32            mov bl, [d]
0246   0597 A7 00         mov bh, 0
0247   0599 38 00 00      mov c, 0
0248   059C D7            push a
0249   059D 11            mov a, b
0250   059E FD 2E 03 00   mov32 cb, $00000003
0250   05A2 00 00 
0251   05A4 FD 92         and b, a ; &
0252   05A6 E4            pop a
0253   05A7             ; --- START SHIFT
0254   05A7 D7            push a
0255   05A8 11            mov a, b
0256   05A9 FD 2E 04 00   mov32 cb, $00000004
0256   05AD 00 00 
0257   05AF FD 39         mov c, b
0258   05B1 9D            shl a, cl
0259   05B2 27            mov b, a
0260   05B3 E4            pop a
0261   05B4             ; --- END SHIFT
0262   05B4             ; --- START TERMS
0263   05B4 D7            push a
0264   05B5 11            mov a, b
0265   05B6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0266   05B9 D7            push a
0267   05BA DA            push d
0268   05BB FD 2E 01 00   mov32 cb, $00000001
0268   05BF 00 00 
0269   05C1 E7            pop d
0270   05C2 5A            add d, b
0271   05C3 E4            pop a
0272   05C4 32            mov bl, [d]
0273   05C5 A7 00         mov bh, 0
0274   05C7 38 00 00      mov c, 0
0275   05CA D7            push a
0276   05CB 11            mov a, b
0277   05CC FD 2E F0 00   mov32 cb, $000000f0
0277   05D0 00 00 
0278   05D2 FD 92         and b, a ; &
0279   05D4 E4            pop a
0280   05D5             ; --- START SHIFT
0281   05D5 D7            push a
0282   05D6 11            mov a, b
0283   05D7 FD 2E 04 00   mov32 cb, $00000004
0283   05DB 00 00 
0284   05DD FD 39         mov c, b
0285   05DF A5            ashr a, cl
0286   05E0 27            mov b, a
0287   05E1 E4            pop a
0288   05E2             ; --- END SHIFT
0289   05E2 56            add b, a
0290   05E3 E4            pop a
0291   05E4             ; --- END TERMS
0292   05E4 E7            pop d
0293   05E5 FD 3E         mov [d], bl
0294   05E7             ; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0295   05E7 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0296   05EA D7            push a
0297   05EB DA            push d
0298   05EC FD 2E 02 00   mov32 cb, $00000002
0298   05F0 00 00 
0299   05F2 E7            pop d
0300   05F3 5A            add d, b
0301   05F4 E4            pop a
0302   05F5 DA            push d
0303   05F6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0304   05F9 D7            push a
0305   05FA DA            push d
0306   05FB FD 2E 01 00   mov32 cb, $00000001
0306   05FF 00 00 
0307   0601 E7            pop d
0308   0602 5A            add d, b
0309   0603 E4            pop a
0310   0604 32            mov bl, [d]
0311   0605 A7 00         mov bh, 0
0312   0607 38 00 00      mov c, 0
0313   060A D7            push a
0314   060B 11            mov a, b
0315   060C FD 2E 0F 00   mov32 cb, $0000000f
0315   0610 00 00 
0316   0612 FD 92         and b, a ; &
0317   0614 E4            pop a
0318   0615             ; --- START SHIFT
0319   0615 D7            push a
0320   0616 11            mov a, b
0321   0617 FD 2E 02 00   mov32 cb, $00000002
0321   061B 00 00 
0322   061D FD 39         mov c, b
0323   061F 9D            shl a, cl
0324   0620 27            mov b, a
0325   0621 E4            pop a
0326   0622             ; --- END SHIFT
0327   0622             ; --- START TERMS
0328   0622 D7            push a
0329   0623 11            mov a, b
0330   0624 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0331   0627 D7            push a
0332   0628 DA            push d
0333   0629 FD 2E 02 00   mov32 cb, $00000002
0333   062D 00 00 
0334   062F E7            pop d
0335   0630 5A            add d, b
0336   0631 E4            pop a
0337   0632 32            mov bl, [d]
0338   0633 A7 00         mov bh, 0
0339   0635 38 00 00      mov c, 0
0340   0638 D7            push a
0341   0639 11            mov a, b
0342   063A FD 2E C0 00   mov32 cb, $000000c0
0342   063E 00 00 
0343   0640 FD 92         and b, a ; &
0344   0642 E4            pop a
0345   0643             ; --- START SHIFT
0346   0643 D7            push a
0347   0644 11            mov a, b
0348   0645 FD 2E 06 00   mov32 cb, $00000006
0348   0649 00 00 
0349   064B FD 39         mov c, b
0350   064D A5            ashr a, cl
0351   064E 27            mov b, a
0352   064F E4            pop a
0353   0650             ; --- END SHIFT
0354   0650 56            add b, a
0355   0651 E4            pop a
0356   0652             ; --- END TERMS
0357   0652 E7            pop d
0358   0653 FD 3E         mov [d], bl
0359   0655             ; output_buffer[3] = input_buffer[2] & 0x3F; 
0360   0655 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0361   0658 D7            push a
0362   0659 DA            push d
0363   065A FD 2E 03 00   mov32 cb, $00000003
0363   065E 00 00 
0364   0660 E7            pop d
0365   0661 5A            add d, b
0366   0662 E4            pop a
0367   0663 DA            push d
0368   0664 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0369   0667 D7            push a
0370   0668 DA            push d
0371   0669 FD 2E 02 00   mov32 cb, $00000002
0371   066D 00 00 
0372   066F E7            pop d
0373   0670 5A            add d, b
0374   0671 E4            pop a
0375   0672 32            mov bl, [d]
0376   0673 A7 00         mov bh, 0
0377   0675 38 00 00      mov c, 0
0378   0678 D7            push a
0379   0679 11            mov a, b
0380   067A FD 2E 3F 00   mov32 cb, $0000003f
0380   067E 00 00 
0381   0680 FD 92         and b, a ; &
0382   0682 E4            pop a
0383   0683 E7            pop d
0384   0684 FD 3E         mov [d], bl
0385   0686             ; for (i = 0; i < 4; i++) { 
0386   0686             _for3_init:
0387   0686 FA FF FF      lea d, [bp + -1] ; $i
0388   0689 DA            push d
0389   068A FD 2E 00 00   mov32 cb, $00000000
0389   068E 00 00 
0390   0690 E7            pop d
0391   0691 FD 43         mov [d], b
0392   0693             _for3_cond:
0393   0693 FA FF FF      lea d, [bp + -1] ; $i
0394   0696 2A            mov b, [d]
0395   0697 38 00 00      mov c, 0
0396   069A             ; --- START RELATIONAL
0397   069A D7            push a
0398   069B 11            mov a, b
0399   069C FD 2E 04 00   mov32 cb, $00000004
0399   06A0 00 00 
0400   06A2 B0            cmp a, b
0401   06A3 FD 73         slt ; < (signed)
0402   06A5 E4            pop a
0403   06A6             ; --- END RELATIONAL
0404   06A6 C0 00 00      cmp b, 0
0405   06A9 C6 08 07      je _for3_exit
0406   06AC             _for3_block:
0407   06AC             ; output[j++] = base64_table[output_buffer[i]]; 
0408   06AC FA 07 00      lea d, [bp + 7] ; $output
0409   06AF FD 2A         mov d, [d]
0410   06B1 D7            push a
0411   06B2 DA            push d
0412   06B3 FA FD FF      lea d, [bp + -3] ; $j
0413   06B6 2A            mov b, [d]
0414   06B7 38 00 00      mov c, 0
0415   06BA 11            mov a, b
0416   06BB FD 77         inc b
0417   06BD FA FD FF      lea d, [bp + -3] ; $j
0418   06C0 FD 43         mov [d], b
0419   06C2 27            mov b, a
0420   06C3 E7            pop d
0421   06C4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0422   06C8 E4            pop a
0423   06C9 DA            push d
0424   06CA 3B B4 1A      mov d, _base64_table ; $base64_table
0425   06CD FD 2A         mov d, [d]
0426   06CF D7            push a
0427   06D0 DA            push d
0428   06D1 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0429   06D4 D7            push a
0430   06D5 DA            push d
0431   06D6 FA FF FF      lea d, [bp + -1] ; $i
0432   06D9 2A            mov b, [d]
0433   06DA 38 00 00      mov c, 0
0434   06DD E7            pop d
0435   06DE 5A            add d, b
0436   06DF E4            pop a
0437   06E0 32            mov bl, [d]
0438   06E1 A7 00         mov bh, 0
0439   06E3 38 00 00      mov c, 0
0440   06E6 E7            pop d
0441   06E7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0442   06EB E4            pop a
0443   06EC 32            mov bl, [d]
0444   06ED A7 00         mov bh, 0
0445   06EF 38 00 00      mov c, 0
0446   06F2 E7            pop d
0447   06F3 FD 3E         mov [d], bl
0448   06F5             _for3_update:
0449   06F5 FA FF FF      lea d, [bp + -1] ; $i
0450   06F8 2A            mov b, [d]
0451   06F9 38 00 00      mov c, 0
0452   06FC 11            mov a, b
0453   06FD FD 77         inc b
0454   06FF FA FF FF      lea d, [bp + -1] ; $i
0455   0702 FD 43         mov [d], b
0456   0704 27            mov b, a
0457   0705 0A 93 06      jmp _for3_cond
0458   0708             _for3_exit:
0459   0708             ; i = 0; 
0460   0708 FA FF FF      lea d, [bp + -1] ; $i
0461   070B DA            push d
0462   070C FD 2E 00 00   mov32 cb, $00000000
0462   0710 00 00 
0463   0712 E7            pop d
0464   0713 FD 43         mov [d], b
0465   0715 0A 18 07      jmp _if2_exit
0466   0718             _if2_exit:
0467   0718 0A D9 04      jmp _while1_cond
0468   071B             _while1_exit:
0469   071B             ; if (i) { 
0470   071B             _if4_cond:
0471   071B FA FF FF      lea d, [bp + -1] ; $i
0472   071E 2A            mov b, [d]
0473   071F 38 00 00      mov c, 0
0474   0722 C0 00 00      cmp b, 0
0475   0725 C6 71 09      je _if4_exit
0476   0728             _if4_TRUE:
0477   0728             ; for (k = i; k < 3; k++) { 
0478   0728             _for5_init:
0479   0728 FA FB FF      lea d, [bp + -5] ; $k
0480   072B DA            push d
0481   072C FA FF FF      lea d, [bp + -1] ; $i
0482   072F 2A            mov b, [d]
0483   0730 38 00 00      mov c, 0
0484   0733 E7            pop d
0485   0734 FD 43         mov [d], b
0486   0736             _for5_cond:
0487   0736 FA FB FF      lea d, [bp + -5] ; $k
0488   0739 2A            mov b, [d]
0489   073A 38 00 00      mov c, 0
0490   073D             ; --- START RELATIONAL
0491   073D D7            push a
0492   073E 11            mov a, b
0493   073F FD 2E 03 00   mov32 cb, $00000003
0493   0743 00 00 
0494   0745 B0            cmp a, b
0495   0746 FD 73         slt ; < (signed)
0496   0748 E4            pop a
0497   0749             ; --- END RELATIONAL
0498   0749 C0 00 00      cmp b, 0
0499   074C C6 7B 07      je _for5_exit
0500   074F             _for5_block:
0501   074F             ; input_buffer[k] = '\0'; 
0502   074F FA F6 FF      lea d, [bp + -10] ; $input_buffer
0503   0752 D7            push a
0504   0753 DA            push d
0505   0754 FA FB FF      lea d, [bp + -5] ; $k
0506   0757 2A            mov b, [d]
0507   0758 38 00 00      mov c, 0
0508   075B E7            pop d
0509   075C 5A            add d, b
0510   075D E4            pop a
0511   075E DA            push d
0512   075F FD 2E 00 00   mov32 cb, $00000000
0512   0763 00 00 
0513   0765 E7            pop d
0514   0766 FD 3E         mov [d], bl
0515   0768             _for5_update:
0516   0768 FA FB FF      lea d, [bp + -5] ; $k
0517   076B 2A            mov b, [d]
0518   076C 38 00 00      mov c, 0
0519   076F 11            mov a, b
0520   0770 FD 77         inc b
0521   0772 FA FB FF      lea d, [bp + -5] ; $k
0522   0775 FD 43         mov [d], b
0523   0777 27            mov b, a
0524   0778 0A 36 07      jmp _for5_cond
0525   077B             _for5_exit:
0526   077B             ; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0527   077B FA F2 FF      lea d, [bp + -14] ; $output_buffer
0528   077E D7            push a
0529   077F DA            push d
0530   0780 FD 2E 00 00   mov32 cb, $00000000
0530   0784 00 00 
0531   0786 E7            pop d
0532   0787 5A            add d, b
0533   0788 E4            pop a
0534   0789 DA            push d
0535   078A FA F6 FF      lea d, [bp + -10] ; $input_buffer
0536   078D D7            push a
0537   078E DA            push d
0538   078F FD 2E 00 00   mov32 cb, $00000000
0538   0793 00 00 
0539   0795 E7            pop d
0540   0796 5A            add d, b
0541   0797 E4            pop a
0542   0798 32            mov bl, [d]
0543   0799 A7 00         mov bh, 0
0544   079B 38 00 00      mov c, 0
0545   079E D7            push a
0546   079F 11            mov a, b
0547   07A0 FD 2E FC 00   mov32 cb, $000000fc
0547   07A4 00 00 
0548   07A6 FD 92         and b, a ; &
0549   07A8 E4            pop a
0550   07A9             ; --- START SHIFT
0551   07A9 D7            push a
0552   07AA 11            mov a, b
0553   07AB FD 2E 02 00   mov32 cb, $00000002
0553   07AF 00 00 
0554   07B1 FD 39         mov c, b
0555   07B3 A5            ashr a, cl
0556   07B4 27            mov b, a
0557   07B5 E4            pop a
0558   07B6             ; --- END SHIFT
0559   07B6 E7            pop d
0560   07B7 FD 3E         mov [d], bl
0561   07B9             ; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0562   07B9 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0563   07BC D7            push a
0564   07BD DA            push d
0565   07BE FD 2E 01 00   mov32 cb, $00000001
0565   07C2 00 00 
0566   07C4 E7            pop d
0567   07C5 5A            add d, b
0568   07C6 E4            pop a
0569   07C7 DA            push d
0570   07C8 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0571   07CB D7            push a
0572   07CC DA            push d
0573   07CD FD 2E 00 00   mov32 cb, $00000000
0573   07D1 00 00 
0574   07D3 E7            pop d
0575   07D4 5A            add d, b
0576   07D5 E4            pop a
0577   07D6 32            mov bl, [d]
0578   07D7 A7 00         mov bh, 0
0579   07D9 38 00 00      mov c, 0
0580   07DC D7            push a
0581   07DD 11            mov a, b
0582   07DE FD 2E 03 00   mov32 cb, $00000003
0582   07E2 00 00 
0583   07E4 FD 92         and b, a ; &
0584   07E6 E4            pop a
0585   07E7             ; --- START SHIFT
0586   07E7 D7            push a
0587   07E8 11            mov a, b
0588   07E9 FD 2E 04 00   mov32 cb, $00000004
0588   07ED 00 00 
0589   07EF FD 39         mov c, b
0590   07F1 9D            shl a, cl
0591   07F2 27            mov b, a
0592   07F3 E4            pop a
0593   07F4             ; --- END SHIFT
0594   07F4             ; --- START TERMS
0595   07F4 D7            push a
0596   07F5 11            mov a, b
0597   07F6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0598   07F9 D7            push a
0599   07FA DA            push d
0600   07FB FD 2E 01 00   mov32 cb, $00000001
0600   07FF 00 00 
0601   0801 E7            pop d
0602   0802 5A            add d, b
0603   0803 E4            pop a
0604   0804 32            mov bl, [d]
0605   0805 A7 00         mov bh, 0
0606   0807 38 00 00      mov c, 0
0607   080A D7            push a
0608   080B 11            mov a, b
0609   080C FD 2E F0 00   mov32 cb, $000000f0
0609   0810 00 00 
0610   0812 FD 92         and b, a ; &
0611   0814 E4            pop a
0612   0815             ; --- START SHIFT
0613   0815 D7            push a
0614   0816 11            mov a, b
0615   0817 FD 2E 04 00   mov32 cb, $00000004
0615   081B 00 00 
0616   081D FD 39         mov c, b
0617   081F A5            ashr a, cl
0618   0820 27            mov b, a
0619   0821 E4            pop a
0620   0822             ; --- END SHIFT
0621   0822 56            add b, a
0622   0823 E4            pop a
0623   0824             ; --- END TERMS
0624   0824 E7            pop d
0625   0825 FD 3E         mov [d], bl
0626   0827             ; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0627   0827 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0628   082A D7            push a
0629   082B DA            push d
0630   082C FD 2E 02 00   mov32 cb, $00000002
0630   0830 00 00 
0631   0832 E7            pop d
0632   0833 5A            add d, b
0633   0834 E4            pop a
0634   0835 DA            push d
0635   0836 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0636   0839 D7            push a
0637   083A DA            push d
0638   083B FD 2E 01 00   mov32 cb, $00000001
0638   083F 00 00 
0639   0841 E7            pop d
0640   0842 5A            add d, b
0641   0843 E4            pop a
0642   0844 32            mov bl, [d]
0643   0845 A7 00         mov bh, 0
0644   0847 38 00 00      mov c, 0
0645   084A D7            push a
0646   084B 11            mov a, b
0647   084C FD 2E 0F 00   mov32 cb, $0000000f
0647   0850 00 00 
0648   0852 FD 92         and b, a ; &
0649   0854 E4            pop a
0650   0855             ; --- START SHIFT
0651   0855 D7            push a
0652   0856 11            mov a, b
0653   0857 FD 2E 02 00   mov32 cb, $00000002
0653   085B 00 00 
0654   085D FD 39         mov c, b
0655   085F 9D            shl a, cl
0656   0860 27            mov b, a
0657   0861 E4            pop a
0658   0862             ; --- END SHIFT
0659   0862             ; --- START TERMS
0660   0862 D7            push a
0661   0863 11            mov a, b
0662   0864 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0663   0867 D7            push a
0664   0868 DA            push d
0665   0869 FD 2E 02 00   mov32 cb, $00000002
0665   086D 00 00 
0666   086F E7            pop d
0667   0870 5A            add d, b
0668   0871 E4            pop a
0669   0872 32            mov bl, [d]
0670   0873 A7 00         mov bh, 0
0671   0875 38 00 00      mov c, 0
0672   0878 D7            push a
0673   0879 11            mov a, b
0674   087A FD 2E C0 00   mov32 cb, $000000c0
0674   087E 00 00 
0675   0880 FD 92         and b, a ; &
0676   0882 E4            pop a
0677   0883             ; --- START SHIFT
0678   0883 D7            push a
0679   0884 11            mov a, b
0680   0885 FD 2E 06 00   mov32 cb, $00000006
0680   0889 00 00 
0681   088B FD 39         mov c, b
0682   088D A5            ashr a, cl
0683   088E 27            mov b, a
0684   088F E4            pop a
0685   0890             ; --- END SHIFT
0686   0890 56            add b, a
0687   0891 E4            pop a
0688   0892             ; --- END TERMS
0689   0892 E7            pop d
0690   0893 FD 3E         mov [d], bl
0691   0895             ; for (k = 0; k < i + 1; k++) { 
0692   0895             _for6_init:
0693   0895 FA FB FF      lea d, [bp + -5] ; $k
0694   0898 DA            push d
0695   0899 FD 2E 00 00   mov32 cb, $00000000
0695   089D 00 00 
0696   089F E7            pop d
0697   08A0 FD 43         mov [d], b
0698   08A2             _for6_cond:
0699   08A2 FA FB FF      lea d, [bp + -5] ; $k
0700   08A5 2A            mov b, [d]
0701   08A6 38 00 00      mov c, 0
0702   08A9             ; --- START RELATIONAL
0703   08A9 D7            push a
0704   08AA 11            mov a, b
0705   08AB FA FF FF      lea d, [bp + -1] ; $i
0706   08AE 2A            mov b, [d]
0707   08AF 38 00 00      mov c, 0
0708   08B2             ; --- START TERMS
0709   08B2 D7            push a
0710   08B3 11            mov a, b
0711   08B4 FD 2E 01 00   mov32 cb, $00000001
0711   08B8 00 00 
0712   08BA 56            add b, a
0713   08BB E4            pop a
0714   08BC             ; --- END TERMS
0715   08BC B0            cmp a, b
0716   08BD FD 73         slt ; < (signed)
0717   08BF E4            pop a
0718   08C0             ; --- END RELATIONAL
0719   08C0 C0 00 00      cmp b, 0
0720   08C3 C6 22 09      je _for6_exit
0721   08C6             _for6_block:
0722   08C6             ; output[j++] = base64_table[output_buffer[k]]; 
0723   08C6 FA 07 00      lea d, [bp + 7] ; $output
0724   08C9 FD 2A         mov d, [d]
0725   08CB D7            push a
0726   08CC DA            push d
0727   08CD FA FD FF      lea d, [bp + -3] ; $j
0728   08D0 2A            mov b, [d]
0729   08D1 38 00 00      mov c, 0
0730   08D4 11            mov a, b
0731   08D5 FD 77         inc b
0732   08D7 FA FD FF      lea d, [bp + -3] ; $j
0733   08DA FD 43         mov [d], b
0734   08DC 27            mov b, a
0735   08DD E7            pop d
0736   08DE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0737   08E2 E4            pop a
0738   08E3 DA            push d
0739   08E4 3B B4 1A      mov d, _base64_table ; $base64_table
0740   08E7 FD 2A         mov d, [d]
0741   08E9 D7            push a
0742   08EA DA            push d
0743   08EB FA F2 FF      lea d, [bp + -14] ; $output_buffer
0744   08EE D7            push a
0745   08EF DA            push d
0746   08F0 FA FB FF      lea d, [bp + -5] ; $k
0747   08F3 2A            mov b, [d]
0748   08F4 38 00 00      mov c, 0
0749   08F7 E7            pop d
0750   08F8 5A            add d, b
0751   08F9 E4            pop a
0752   08FA 32            mov bl, [d]
0753   08FB A7 00         mov bh, 0
0754   08FD 38 00 00      mov c, 0
0755   0900 E7            pop d
0756   0901 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0757   0905 E4            pop a
0758   0906 32            mov bl, [d]
0759   0907 A7 00         mov bh, 0
0760   0909 38 00 00      mov c, 0
0761   090C E7            pop d
0762   090D FD 3E         mov [d], bl
0763   090F             _for6_update:
0764   090F FA FB FF      lea d, [bp + -5] ; $k
0765   0912 2A            mov b, [d]
0766   0913 38 00 00      mov c, 0
0767   0916 11            mov a, b
0768   0917 FD 77         inc b
0769   0919 FA FB FF      lea d, [bp + -5] ; $k
0770   091C FD 43         mov [d], b
0771   091E 27            mov b, a
0772   091F 0A A2 08      jmp _for6_cond
0773   0922             _for6_exit:
0774   0922             ; while (i++ < 3) { 
0775   0922             _while7_cond:
0776   0922 FA FF FF      lea d, [bp + -1] ; $i
0777   0925 2A            mov b, [d]
0778   0926 38 00 00      mov c, 0
0779   0929 11            mov a, b
0780   092A FD 77         inc b
0781   092C FA FF FF      lea d, [bp + -1] ; $i
0782   092F FD 43         mov [d], b
0783   0931 27            mov b, a
0784   0932             ; --- START RELATIONAL
0785   0932 D7            push a
0786   0933 11            mov a, b
0787   0934 FD 2E 03 00   mov32 cb, $00000003
0787   0938 00 00 
0788   093A B0            cmp a, b
0789   093B FD 73         slt ; < (signed)
0790   093D E4            pop a
0791   093E             ; --- END RELATIONAL
0792   093E C0 00 00      cmp b, 0
0793   0941 C6 6E 09      je _while7_exit
0794   0944             _while7_block:
0795   0944             ; output[j++] = '='; 
0796   0944 FA 07 00      lea d, [bp + 7] ; $output
0797   0947 FD 2A         mov d, [d]
0798   0949 D7            push a
0799   094A DA            push d
0800   094B FA FD FF      lea d, [bp + -3] ; $j
0801   094E 2A            mov b, [d]
0802   094F 38 00 00      mov c, 0
0803   0952 11            mov a, b
0804   0953 FD 77         inc b
0805   0955 FA FD FF      lea d, [bp + -3] ; $j
0806   0958 FD 43         mov [d], b
0807   095A 27            mov b, a
0808   095B E7            pop d
0809   095C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0810   0960 E4            pop a
0811   0961 DA            push d
0812   0962 FD 2E 3D 00   mov32 cb, $0000003d
0812   0966 00 00 
0813   0968 E7            pop d
0814   0969 FD 3E         mov [d], bl
0815   096B 0A 22 09      jmp _while7_cond
0816   096E             _while7_exit:
0817   096E 0A 71 09      jmp _if4_exit
0818   0971             _if4_exit:
0819   0971             ; output[j] = '\0'; 
0820   0971 FA 07 00      lea d, [bp + 7] ; $output
0821   0974 FD 2A         mov d, [d]
0822   0976 D7            push a
0823   0977 DA            push d
0824   0978 FA FD FF      lea d, [bp + -3] ; $j
0825   097B 2A            mov b, [d]
0826   097C 38 00 00      mov c, 0
0827   097F E7            pop d
0828   0980 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0829   0984 E4            pop a
0830   0985 DA            push d
0831   0986 FD 2E 00 00   mov32 cb, $00000000
0831   098A 00 00 
0832   098C E7            pop d
0833   098D FD 3E         mov [d], bl
0834   098F F9            leave
0835   0990 09            ret
0836   0991             
0837   0991             base64_char_value:
0838   0991 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0839   0994             ; if (c >= 'A' && c <= 'Z') return c - 'A'; 
0840   0994             _if8_cond:
0841   0994 FA 05 00      lea d, [bp + 5] ; $c
0842   0997 32            mov bl, [d]
0843   0998 A7 00         mov bh, 0
0844   099A 38 00 00      mov c, 0
0845   099D             ; --- START RELATIONAL
0846   099D D7            push a
0847   099E 11            mov a, b
0848   099F FD 2E 41 00   mov32 cb, $00000041
0848   09A3 00 00 
0849   09A5 B0            cmp a, b
0850   09A6 FD 80         sge ; >=
0851   09A8 E4            pop a
0852   09A9             ; --- END RELATIONAL
0853   09A9             ; --- START LOGICAL AND
0854   09A9 D7            push a
0855   09AA 11            mov a, b
0856   09AB FA 05 00      lea d, [bp + 5] ; $c
0857   09AE 32            mov bl, [d]
0858   09AF A7 00         mov bh, 0
0859   09B1 38 00 00      mov c, 0
0860   09B4             ; --- START RELATIONAL
0861   09B4 D7            push a
0862   09B5 11            mov a, b
0863   09B6 FD 2E 5A 00   mov32 cb, $0000005a
0863   09BA 00 00 
0864   09BC B0            cmp a, b
0865   09BD FD 74         sle ; <= (signed)
0866   09BF E4            pop a
0867   09C0             ; --- END RELATIONAL
0868   09C0 FD A7         sand a, b
0869   09C2 E4            pop a
0870   09C3             ; --- END LOGICAL AND
0871   09C3 C0 00 00      cmp b, 0
0872   09C6 C6 E2 09      je _if8_exit
0873   09C9             _if8_TRUE:
0874   09C9             ; return c - 'A'; 
0875   09C9 FA 05 00      lea d, [bp + 5] ; $c
0876   09CC 32            mov bl, [d]
0877   09CD A7 00         mov bh, 0
0878   09CF 38 00 00      mov c, 0
0879   09D2             ; --- START TERMS
0880   09D2 D7            push a
0881   09D3 11            mov a, b
0882   09D4 FD 2E 41 00   mov32 cb, $00000041
0882   09D8 00 00 
0883   09DA 60            sub a, b
0884   09DB 27            mov b, a
0885   09DC E4            pop a
0886   09DD             ; --- END TERMS
0887   09DD F9            leave
0888   09DE 09            ret
0889   09DF 0A E2 09      jmp _if8_exit
0890   09E2             _if8_exit:
0891   09E2             ; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
0892   09E2             _if9_cond:
0893   09E2 FA 05 00      lea d, [bp + 5] ; $c
0894   09E5 32            mov bl, [d]
0895   09E6 A7 00         mov bh, 0
0896   09E8 38 00 00      mov c, 0
0897   09EB             ; --- START RELATIONAL
0898   09EB D7            push a
0899   09EC 11            mov a, b
0900   09ED FD 2E 61 00   mov32 cb, $00000061
0900   09F1 00 00 
0901   09F3 B0            cmp a, b
0902   09F4 FD 80         sge ; >=
0903   09F6 E4            pop a
0904   09F7             ; --- END RELATIONAL
0905   09F7             ; --- START LOGICAL AND
0906   09F7 D7            push a
0907   09F8 11            mov a, b
0908   09F9 FA 05 00      lea d, [bp + 5] ; $c
0909   09FC 32            mov bl, [d]
0910   09FD A7 00         mov bh, 0
0911   09FF 38 00 00      mov c, 0
0912   0A02             ; --- START RELATIONAL
0913   0A02 D7            push a
0914   0A03 11            mov a, b
0915   0A04 FD 2E 7A 00   mov32 cb, $0000007a
0915   0A08 00 00 
0916   0A0A B0            cmp a, b
0917   0A0B FD 74         sle ; <= (signed)
0918   0A0D E4            pop a
0919   0A0E             ; --- END RELATIONAL
0920   0A0E FD A7         sand a, b
0921   0A10 E4            pop a
0922   0A11             ; --- END LOGICAL AND
0923   0A11 C0 00 00      cmp b, 0
0924   0A14 C6 38 0A      je _if9_exit
0925   0A17             _if9_TRUE:
0926   0A17             ; return c - 'a' + 26; 
0927   0A17 FA 05 00      lea d, [bp + 5] ; $c
0928   0A1A 32            mov bl, [d]
0929   0A1B A7 00         mov bh, 0
0930   0A1D 38 00 00      mov c, 0
0931   0A20             ; --- START TERMS
0932   0A20 D7            push a
0933   0A21 11            mov a, b
0934   0A22 FD 2E 61 00   mov32 cb, $00000061
0934   0A26 00 00 
0935   0A28 60            sub a, b
0936   0A29 27            mov b, a
0937   0A2A 11            mov a, b
0938   0A2B FD 2E 1A 00   mov32 cb, $0000001a
0938   0A2F 00 00 
0939   0A31 56            add b, a
0940   0A32 E4            pop a
0941   0A33             ; --- END TERMS
0942   0A33 F9            leave
0943   0A34 09            ret
0944   0A35 0A 38 0A      jmp _if9_exit
0945   0A38             _if9_exit:
0946   0A38             ; if (c >= '0' && c <= '9') return c - '0' + 52; 
0947   0A38             _if10_cond:
0948   0A38 FA 05 00      lea d, [bp + 5] ; $c
0949   0A3B 32            mov bl, [d]
0950   0A3C A7 00         mov bh, 0
0951   0A3E 38 00 00      mov c, 0
0952   0A41             ; --- START RELATIONAL
0953   0A41 D7            push a
0954   0A42 11            mov a, b
0955   0A43 FD 2E 30 00   mov32 cb, $00000030
0955   0A47 00 00 
0956   0A49 B0            cmp a, b
0957   0A4A FD 80         sge ; >=
0958   0A4C E4            pop a
0959   0A4D             ; --- END RELATIONAL
0960   0A4D             ; --- START LOGICAL AND
0961   0A4D D7            push a
0962   0A4E 11            mov a, b
0963   0A4F FA 05 00      lea d, [bp + 5] ; $c
0964   0A52 32            mov bl, [d]
0965   0A53 A7 00         mov bh, 0
0966   0A55 38 00 00      mov c, 0
0967   0A58             ; --- START RELATIONAL
0968   0A58 D7            push a
0969   0A59 11            mov a, b
0970   0A5A FD 2E 39 00   mov32 cb, $00000039
0970   0A5E 00 00 
0971   0A60 B0            cmp a, b
0972   0A61 FD 74         sle ; <= (signed)
0973   0A63 E4            pop a
0974   0A64             ; --- END RELATIONAL
0975   0A64 FD A7         sand a, b
0976   0A66 E4            pop a
0977   0A67             ; --- END LOGICAL AND
0978   0A67 C0 00 00      cmp b, 0
0979   0A6A C6 8E 0A      je _if10_exit
0980   0A6D             _if10_TRUE:
0981   0A6D             ; return c - '0' + 52; 
0982   0A6D FA 05 00      lea d, [bp + 5] ; $c
0983   0A70 32            mov bl, [d]
0984   0A71 A7 00         mov bh, 0
0985   0A73 38 00 00      mov c, 0
0986   0A76             ; --- START TERMS
0987   0A76 D7            push a
0988   0A77 11            mov a, b
0989   0A78 FD 2E 30 00   mov32 cb, $00000030
0989   0A7C 00 00 
0990   0A7E 60            sub a, b
0991   0A7F 27            mov b, a
0992   0A80 11            mov a, b
0993   0A81 FD 2E 34 00   mov32 cb, $00000034
0993   0A85 00 00 
0994   0A87 56            add b, a
0995   0A88 E4            pop a
0996   0A89             ; --- END TERMS
0997   0A89 F9            leave
0998   0A8A 09            ret
0999   0A8B 0A 8E 0A      jmp _if10_exit
1000   0A8E             _if10_exit:
1001   0A8E             ; if (c == '+') return 62; 
1002   0A8E             _if11_cond:
1003   0A8E FA 05 00      lea d, [bp + 5] ; $c
1004   0A91 32            mov bl, [d]
1005   0A92 A7 00         mov bh, 0
1006   0A94 38 00 00      mov c, 0
1007   0A97             ; --- START RELATIONAL
1008   0A97 D7            push a
1009   0A98 11            mov a, b
1010   0A99 FD 2E 2B 00   mov32 cb, $0000002b
1010   0A9D 00 00 
1011   0A9F B0            cmp a, b
1012   0AA0 FD 71         seq ; ==
1013   0AA2 E4            pop a
1014   0AA3             ; --- END RELATIONAL
1015   0AA3 C0 00 00      cmp b, 0
1016   0AA6 C6 B4 0A      je _if11_exit
1017   0AA9             _if11_TRUE:
1018   0AA9             ; return 62; 
1019   0AA9 FD 2E 3E 00   mov32 cb, $0000003e
1019   0AAD 00 00 
1020   0AAF F9            leave
1021   0AB0 09            ret
1022   0AB1 0A B4 0A      jmp _if11_exit
1023   0AB4             _if11_exit:
1024   0AB4             ; if (c == '/') return 63; 
1025   0AB4             _if12_cond:
1026   0AB4 FA 05 00      lea d, [bp + 5] ; $c
1027   0AB7 32            mov bl, [d]
1028   0AB8 A7 00         mov bh, 0
1029   0ABA 38 00 00      mov c, 0
1030   0ABD             ; --- START RELATIONAL
1031   0ABD D7            push a
1032   0ABE 11            mov a, b
1033   0ABF FD 2E 2F 00   mov32 cb, $0000002f
1033   0AC3 00 00 
1034   0AC5 B0            cmp a, b
1035   0AC6 FD 71         seq ; ==
1036   0AC8 E4            pop a
1037   0AC9             ; --- END RELATIONAL
1038   0AC9 C0 00 00      cmp b, 0
1039   0ACC C6 DA 0A      je _if12_exit
1040   0ACF             _if12_TRUE:
1041   0ACF             ; return 63; 
1042   0ACF FD 2E 3F 00   mov32 cb, $0000003f
1042   0AD3 00 00 
1043   0AD5 F9            leave
1044   0AD6 09            ret
1045   0AD7 0A DA 0A      jmp _if12_exit
1046   0ADA             _if12_exit:
1047   0ADA             ; return -1; 
1048   0ADA FD 2E FF FF   mov32 cb, $ffffffff
1048   0ADE FF FF 
1049   0AE0 F9            leave
1050   0AE1 09            ret
1051   0AE2             
1052   0AE2             base64_decode:
1053   0AE2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1054   0AE5             ; int i = 0, j = 0, k = 0; 
1055   0AE5 52 02 00      sub sp, 2
1056   0AE8             ; --- START LOCAL VAR INITIALIZATION
1057   0AE8 FA FF FF      lea d, [bp + -1] ; $i
1058   0AEB DA            push d
1059   0AEC FD 2E 00 00   mov32 cb, $00000000
1059   0AF0 00 00 
1060   0AF2 E7            pop d
1061   0AF3 FD 43         mov [d], b
1062   0AF5             ; --- END LOCAL VAR INITIALIZATION
1063   0AF5 52 02 00      sub sp, 2
1064   0AF8             ; --- START LOCAL VAR INITIALIZATION
1065   0AF8 FA FD FF      lea d, [bp + -3] ; $j
1066   0AFB DA            push d
1067   0AFC FD 2E 00 00   mov32 cb, $00000000
1067   0B00 00 00 
1068   0B02 E7            pop d
1069   0B03 FD 43         mov [d], b
1070   0B05             ; --- END LOCAL VAR INITIALIZATION
1071   0B05 52 02 00      sub sp, 2
1072   0B08             ; --- START LOCAL VAR INITIALIZATION
1073   0B08 FA FB FF      lea d, [bp + -5] ; $k
1074   0B0B DA            push d
1075   0B0C FD 2E 00 00   mov32 cb, $00000000
1075   0B10 00 00 
1076   0B12 E7            pop d
1077   0B13 FD 43         mov [d], b
1078   0B15             ; --- END LOCAL VAR INITIALIZATION
1079   0B15             ; int input_len; 
1080   0B15 52 02 00      sub sp, 2
1081   0B18             ; unsigned char input_buffer[4]; 
1082   0B18 52 04 00      sub sp, 4
1083   0B1B             ; unsigned char output_buffer[3]; 
1084   0B1B 52 03 00      sub sp, 3
1085   0B1E             ; input_len = strlen(input); 
1086   0B1E FA F9 FF      lea d, [bp + -7] ; $input_len
1087   0B21 DA            push d
1088   0B22             ; --- START FUNCTION CALL
1089   0B22 FA 05 00      lea d, [bp + 5] ; $input
1090   0B25 2A            mov b, [d]
1091   0B26 38 00 00      mov c, 0
1092   0B29 FD AB         swp b
1093   0B2B D8            push b
1094   0B2C 07 18 1A      call strlen
1095   0B2F 51 02 00      add sp, 2
1096   0B32             ; --- END FUNCTION CALL
1097   0B32 E7            pop d
1098   0B33 FD 43         mov [d], b
1099   0B35             ; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1100   0B35             _while13_cond:
1101   0B35 FA F9 FF      lea d, [bp + -7] ; $input_len
1102   0B38 2A            mov b, [d]
1103   0B39 38 00 00      mov c, 0
1104   0B3C 11            mov a, b
1105   0B3D FD 7D         dec b
1106   0B3F FA F9 FF      lea d, [bp + -7] ; $input_len
1107   0B42 FD 43         mov [d], b
1108   0B44 27            mov b, a
1109   0B45             ; --- START LOGICAL AND
1110   0B45 D7            push a
1111   0B46 11            mov a, b
1112   0B47 FA 05 00      lea d, [bp + 5] ; $input
1113   0B4A FD 2A         mov d, [d]
1114   0B4C D7            push a
1115   0B4D DA            push d
1116   0B4E FA FB FF      lea d, [bp + -5] ; $k
1117   0B51 2A            mov b, [d]
1118   0B52 38 00 00      mov c, 0
1119   0B55 E7            pop d
1120   0B56 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1121   0B5A E4            pop a
1122   0B5B 32            mov bl, [d]
1123   0B5C A7 00         mov bh, 0
1124   0B5E 38 00 00      mov c, 0
1125   0B61             ; --- START RELATIONAL
1126   0B61 D7            push a
1127   0B62 11            mov a, b
1128   0B63 FD 2E 3D 00   mov32 cb, $0000003d
1128   0B67 00 00 
1129   0B69 B0            cmp a, b
1130   0B6A FD 72         sneq ; !=
1131   0B6C E4            pop a
1132   0B6D             ; --- END RELATIONAL
1133   0B6D FD A7         sand a, b
1134   0B6F 11            mov a, b
1135   0B70             ; --- START FUNCTION CALL
1136   0B70 FA 05 00      lea d, [bp + 5] ; $input
1137   0B73 FD 2A         mov d, [d]
1138   0B75 D7            push a
1139   0B76 DA            push d
1140   0B77 FA FB FF      lea d, [bp + -5] ; $k
1141   0B7A 2A            mov b, [d]
1142   0B7B 38 00 00      mov c, 0
1143   0B7E E7            pop d
1144   0B7F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1145   0B83 E4            pop a
1146   0B84 32            mov bl, [d]
1147   0B85 A7 00         mov bh, 0
1148   0B87 38 00 00      mov c, 0
1149   0B8A DD            push bl
1150   0B8B 07 91 09      call base64_char_value
1151   0B8E 51 01 00      add sp, 1
1152   0B91             ; --- END FUNCTION CALL
1153   0B91             ; --- START RELATIONAL
1154   0B91 D7            push a
1155   0B92 11            mov a, b
1156   0B93 FD 2E FF FF   mov32 cb, $ffffffff
1156   0B97 FF FF 
1157   0B99 B0            cmp a, b
1158   0B9A FD 72         sneq ; !=
1159   0B9C E4            pop a
1160   0B9D             ; --- END RELATIONAL
1161   0B9D FD A7         sand a, b
1162   0B9F E4            pop a
1163   0BA0             ; --- END LOGICAL AND
1164   0BA0 C0 00 00      cmp b, 0
1165   0BA3 C6 0F 0E      je _while13_exit
1166   0BA6             _while13_block:
1167   0BA6             ; input_buffer[i++] = input[k++]; 
1168   0BA6 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1169   0BA9 D7            push a
1170   0BAA DA            push d
1171   0BAB FA FF FF      lea d, [bp + -1] ; $i
1172   0BAE 2A            mov b, [d]
1173   0BAF 38 00 00      mov c, 0
1174   0BB2 11            mov a, b
1175   0BB3 FD 77         inc b
1176   0BB5 FA FF FF      lea d, [bp + -1] ; $i
1177   0BB8 FD 43         mov [d], b
1178   0BBA 27            mov b, a
1179   0BBB E7            pop d
1180   0BBC 5A            add d, b
1181   0BBD E4            pop a
1182   0BBE DA            push d
1183   0BBF FA 05 00      lea d, [bp + 5] ; $input
1184   0BC2 FD 2A         mov d, [d]
1185   0BC4 D7            push a
1186   0BC5 DA            push d
1187   0BC6 FA FB FF      lea d, [bp + -5] ; $k
1188   0BC9 2A            mov b, [d]
1189   0BCA 38 00 00      mov c, 0
1190   0BCD 11            mov a, b
1191   0BCE FD 77         inc b
1192   0BD0 FA FB FF      lea d, [bp + -5] ; $k
1193   0BD3 FD 43         mov [d], b
1194   0BD5 27            mov b, a
1195   0BD6 E7            pop d
1196   0BD7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1197   0BDB E4            pop a
1198   0BDC 32            mov bl, [d]
1199   0BDD A7 00         mov bh, 0
1200   0BDF 38 00 00      mov c, 0
1201   0BE2 E7            pop d
1202   0BE3 FD 3E         mov [d], bl
1203   0BE5             ; if (i == 4) { 
1204   0BE5             _if14_cond:
1205   0BE5 FA FF FF      lea d, [bp + -1] ; $i
1206   0BE8 2A            mov b, [d]
1207   0BE9 38 00 00      mov c, 0
1208   0BEC             ; --- START RELATIONAL
1209   0BEC D7            push a
1210   0BED 11            mov a, b
1211   0BEE FD 2E 04 00   mov32 cb, $00000004
1211   0BF2 00 00 
1212   0BF4 B0            cmp a, b
1213   0BF5 FD 71         seq ; ==
1214   0BF7 E4            pop a
1215   0BF8             ; --- END RELATIONAL
1216   0BF8 C0 00 00      cmp b, 0
1217   0BFB C6 0C 0E      je _if14_exit
1218   0BFE             _if14_TRUE:
1219   0BFE             ; for (i = 0; i < 4; i++) { 
1220   0BFE             _for15_init:
1221   0BFE FA FF FF      lea d, [bp + -1] ; $i
1222   0C01 DA            push d
1223   0C02 FD 2E 00 00   mov32 cb, $00000000
1223   0C06 00 00 
1224   0C08 E7            pop d
1225   0C09 FD 43         mov [d], b
1226   0C0B             _for15_cond:
1227   0C0B FA FF FF      lea d, [bp + -1] ; $i
1228   0C0E 2A            mov b, [d]
1229   0C0F 38 00 00      mov c, 0
1230   0C12             ; --- START RELATIONAL
1231   0C12 D7            push a
1232   0C13 11            mov a, b
1233   0C14 FD 2E 04 00   mov32 cb, $00000004
1233   0C18 00 00 
1234   0C1A B0            cmp a, b
1235   0C1B FD 73         slt ; < (signed)
1236   0C1D E4            pop a
1237   0C1E             ; --- END RELATIONAL
1238   0C1E C0 00 00      cmp b, 0
1239   0C21 C6 66 0C      je _for15_exit
1240   0C24             _for15_block:
1241   0C24             ; input_buffer[i] = base64_char_value(input_buffer[i]); 
1242   0C24 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1243   0C27 D7            push a
1244   0C28 DA            push d
1245   0C29 FA FF FF      lea d, [bp + -1] ; $i
1246   0C2C 2A            mov b, [d]
1247   0C2D 38 00 00      mov c, 0
1248   0C30 E7            pop d
1249   0C31 5A            add d, b
1250   0C32 E4            pop a
1251   0C33 DA            push d
1252   0C34             ; --- START FUNCTION CALL
1253   0C34 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1254   0C37 D7            push a
1255   0C38 DA            push d
1256   0C39 FA FF FF      lea d, [bp + -1] ; $i
1257   0C3C 2A            mov b, [d]
1258   0C3D 38 00 00      mov c, 0
1259   0C40 E7            pop d
1260   0C41 5A            add d, b
1261   0C42 E4            pop a
1262   0C43 32            mov bl, [d]
1263   0C44 A7 00         mov bh, 0
1264   0C46 38 00 00      mov c, 0
1265   0C49 DD            push bl
1266   0C4A 07 91 09      call base64_char_value
1267   0C4D 51 01 00      add sp, 1
1268   0C50             ; --- END FUNCTION CALL
1269   0C50 E7            pop d
1270   0C51 FD 3E         mov [d], bl
1271   0C53             _for15_update:
1272   0C53 FA FF FF      lea d, [bp + -1] ; $i
1273   0C56 2A            mov b, [d]
1274   0C57 38 00 00      mov c, 0
1275   0C5A 11            mov a, b
1276   0C5B FD 77         inc b
1277   0C5D FA FF FF      lea d, [bp + -1] ; $i
1278   0C60 FD 43         mov [d], b
1279   0C62 27            mov b, a
1280   0C63 0A 0B 0C      jmp _for15_cond
1281   0C66             _for15_exit:
1282   0C66             ; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1283   0C66 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1284   0C69 D7            push a
1285   0C6A DA            push d
1286   0C6B FD 2E 00 00   mov32 cb, $00000000
1286   0C6F 00 00 
1287   0C71 E7            pop d
1288   0C72 5A            add d, b
1289   0C73 E4            pop a
1290   0C74 DA            push d
1291   0C75 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1292   0C78 D7            push a
1293   0C79 DA            push d
1294   0C7A FD 2E 00 00   mov32 cb, $00000000
1294   0C7E 00 00 
1295   0C80 E7            pop d
1296   0C81 5A            add d, b
1297   0C82 E4            pop a
1298   0C83 32            mov bl, [d]
1299   0C84 A7 00         mov bh, 0
1300   0C86 38 00 00      mov c, 0
1301   0C89             ; --- START SHIFT
1302   0C89 D7            push a
1303   0C8A 11            mov a, b
1304   0C8B FD 2E 02 00   mov32 cb, $00000002
1304   0C8F 00 00 
1305   0C91 FD 39         mov c, b
1306   0C93 9D            shl a, cl
1307   0C94 27            mov b, a
1308   0C95 E4            pop a
1309   0C96             ; --- END SHIFT
1310   0C96             ; --- START TERMS
1311   0C96 D7            push a
1312   0C97 11            mov a, b
1313   0C98 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1314   0C9B D7            push a
1315   0C9C DA            push d
1316   0C9D FD 2E 01 00   mov32 cb, $00000001
1316   0CA1 00 00 
1317   0CA3 E7            pop d
1318   0CA4 5A            add d, b
1319   0CA5 E4            pop a
1320   0CA6 32            mov bl, [d]
1321   0CA7 A7 00         mov bh, 0
1322   0CA9 38 00 00      mov c, 0
1323   0CAC D7            push a
1324   0CAD 11            mov a, b
1325   0CAE FD 2E 30 00   mov32 cb, $00000030
1325   0CB2 00 00 
1326   0CB4 FD 92         and b, a ; &
1327   0CB6 E4            pop a
1328   0CB7             ; --- START SHIFT
1329   0CB7 D7            push a
1330   0CB8 11            mov a, b
1331   0CB9 FD 2E 04 00   mov32 cb, $00000004
1331   0CBD 00 00 
1332   0CBF FD 39         mov c, b
1333   0CC1 A5            ashr a, cl
1334   0CC2 27            mov b, a
1335   0CC3 E4            pop a
1336   0CC4             ; --- END SHIFT
1337   0CC4 56            add b, a
1338   0CC5 E4            pop a
1339   0CC6             ; --- END TERMS
1340   0CC6 E7            pop d
1341   0CC7 FD 3E         mov [d], bl
1342   0CC9             ; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1343   0CC9 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1344   0CCC D7            push a
1345   0CCD DA            push d
1346   0CCE FD 2E 01 00   mov32 cb, $00000001
1346   0CD2 00 00 
1347   0CD4 E7            pop d
1348   0CD5 5A            add d, b
1349   0CD6 E4            pop a
1350   0CD7 DA            push d
1351   0CD8 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1352   0CDB D7            push a
1353   0CDC DA            push d
1354   0CDD FD 2E 01 00   mov32 cb, $00000001
1354   0CE1 00 00 
1355   0CE3 E7            pop d
1356   0CE4 5A            add d, b
1357   0CE5 E4            pop a
1358   0CE6 32            mov bl, [d]
1359   0CE7 A7 00         mov bh, 0
1360   0CE9 38 00 00      mov c, 0
1361   0CEC D7            push a
1362   0CED 11            mov a, b
1363   0CEE FD 2E 0F 00   mov32 cb, $0000000f
1363   0CF2 00 00 
1364   0CF4 FD 92         and b, a ; &
1365   0CF6 E4            pop a
1366   0CF7             ; --- START SHIFT
1367   0CF7 D7            push a
1368   0CF8 11            mov a, b
1369   0CF9 FD 2E 04 00   mov32 cb, $00000004
1369   0CFD 00 00 
1370   0CFF FD 39         mov c, b
1371   0D01 9D            shl a, cl
1372   0D02 27            mov b, a
1373   0D03 E4            pop a
1374   0D04             ; --- END SHIFT
1375   0D04             ; --- START TERMS
1376   0D04 D7            push a
1377   0D05 11            mov a, b
1378   0D06 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1379   0D09 D7            push a
1380   0D0A DA            push d
1381   0D0B FD 2E 02 00   mov32 cb, $00000002
1381   0D0F 00 00 
1382   0D11 E7            pop d
1383   0D12 5A            add d, b
1384   0D13 E4            pop a
1385   0D14 32            mov bl, [d]
1386   0D15 A7 00         mov bh, 0
1387   0D17 38 00 00      mov c, 0
1388   0D1A D7            push a
1389   0D1B 11            mov a, b
1390   0D1C FD 2E 3C 00   mov32 cb, $0000003c
1390   0D20 00 00 
1391   0D22 FD 92         and b, a ; &
1392   0D24 E4            pop a
1393   0D25             ; --- START SHIFT
1394   0D25 D7            push a
1395   0D26 11            mov a, b
1396   0D27 FD 2E 02 00   mov32 cb, $00000002
1396   0D2B 00 00 
1397   0D2D FD 39         mov c, b
1398   0D2F A5            ashr a, cl
1399   0D30 27            mov b, a
1400   0D31 E4            pop a
1401   0D32             ; --- END SHIFT
1402   0D32 56            add b, a
1403   0D33 E4            pop a
1404   0D34             ; --- END TERMS
1405   0D34 E7            pop d
1406   0D35 FD 3E         mov [d], bl
1407   0D37             ; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
1408   0D37 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1409   0D3A D7            push a
1410   0D3B DA            push d
1411   0D3C FD 2E 02 00   mov32 cb, $00000002
1411   0D40 00 00 
1412   0D42 E7            pop d
1413   0D43 5A            add d, b
1414   0D44 E4            pop a
1415   0D45 DA            push d
1416   0D46 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1417   0D49 D7            push a
1418   0D4A DA            push d
1419   0D4B FD 2E 02 00   mov32 cb, $00000002
1419   0D4F 00 00 
1420   0D51 E7            pop d
1421   0D52 5A            add d, b
1422   0D53 E4            pop a
1423   0D54 32            mov bl, [d]
1424   0D55 A7 00         mov bh, 0
1425   0D57 38 00 00      mov c, 0
1426   0D5A D7            push a
1427   0D5B 11            mov a, b
1428   0D5C FD 2E 03 00   mov32 cb, $00000003
1428   0D60 00 00 
1429   0D62 FD 92         and b, a ; &
1430   0D64 E4            pop a
1431   0D65             ; --- START SHIFT
1432   0D65 D7            push a
1433   0D66 11            mov a, b
1434   0D67 FD 2E 06 00   mov32 cb, $00000006
1434   0D6B 00 00 
1435   0D6D FD 39         mov c, b
1436   0D6F 9D            shl a, cl
1437   0D70 27            mov b, a
1438   0D71 E4            pop a
1439   0D72             ; --- END SHIFT
1440   0D72             ; --- START TERMS
1441   0D72 D7            push a
1442   0D73 11            mov a, b
1443   0D74 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1444   0D77 D7            push a
1445   0D78 DA            push d
1446   0D79 FD 2E 03 00   mov32 cb, $00000003
1446   0D7D 00 00 
1447   0D7F E7            pop d
1448   0D80 5A            add d, b
1449   0D81 E4            pop a
1450   0D82 32            mov bl, [d]
1451   0D83 A7 00         mov bh, 0
1452   0D85 38 00 00      mov c, 0
1453   0D88 56            add b, a
1454   0D89 E4            pop a
1455   0D8A             ; --- END TERMS
1456   0D8A E7            pop d
1457   0D8B FD 3E         mov [d], bl
1458   0D8D             ; for (i = 0; i < 3; i++) { 
1459   0D8D             _for16_init:
1460   0D8D FA FF FF      lea d, [bp + -1] ; $i
1461   0D90 DA            push d
1462   0D91 FD 2E 00 00   mov32 cb, $00000000
1462   0D95 00 00 
1463   0D97 E7            pop d
1464   0D98 FD 43         mov [d], b
1465   0D9A             _for16_cond:
1466   0D9A FA FF FF      lea d, [bp + -1] ; $i
1467   0D9D 2A            mov b, [d]
1468   0D9E 38 00 00      mov c, 0
1469   0DA1             ; --- START RELATIONAL
1470   0DA1 D7            push a
1471   0DA2 11            mov a, b
1472   0DA3 FD 2E 03 00   mov32 cb, $00000003
1472   0DA7 00 00 
1473   0DA9 B0            cmp a, b
1474   0DAA FD 73         slt ; < (signed)
1475   0DAC E4            pop a
1476   0DAD             ; --- END RELATIONAL
1477   0DAD C0 00 00      cmp b, 0
1478   0DB0 C6 FC 0D      je _for16_exit
1479   0DB3             _for16_block:
1480   0DB3             ; output[j++] = output_buffer[i]; 
1481   0DB3 FA 07 00      lea d, [bp + 7] ; $output
1482   0DB6 FD 2A         mov d, [d]
1483   0DB8 D7            push a
1484   0DB9 DA            push d
1485   0DBA FA FD FF      lea d, [bp + -3] ; $j
1486   0DBD 2A            mov b, [d]
1487   0DBE 38 00 00      mov c, 0
1488   0DC1 11            mov a, b
1489   0DC2 FD 77         inc b
1490   0DC4 FA FD FF      lea d, [bp + -3] ; $j
1491   0DC7 FD 43         mov [d], b
1492   0DC9 27            mov b, a
1493   0DCA E7            pop d
1494   0DCB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1495   0DCF E4            pop a
1496   0DD0 DA            push d
1497   0DD1 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1498   0DD4 D7            push a
1499   0DD5 DA            push d
1500   0DD6 FA FF FF      lea d, [bp + -1] ; $i
1501   0DD9 2A            mov b, [d]
1502   0DDA 38 00 00      mov c, 0
1503   0DDD E7            pop d
1504   0DDE 5A            add d, b
1505   0DDF E4            pop a
1506   0DE0 32            mov bl, [d]
1507   0DE1 A7 00         mov bh, 0
1508   0DE3 38 00 00      mov c, 0
1509   0DE6 E7            pop d
1510   0DE7 FD 3E         mov [d], bl
1511   0DE9             _for16_update:
1512   0DE9 FA FF FF      lea d, [bp + -1] ; $i
1513   0DEC 2A            mov b, [d]
1514   0DED 38 00 00      mov c, 0
1515   0DF0 11            mov a, b
1516   0DF1 FD 77         inc b
1517   0DF3 FA FF FF      lea d, [bp + -1] ; $i
1518   0DF6 FD 43         mov [d], b
1519   0DF8 27            mov b, a
1520   0DF9 0A 9A 0D      jmp _for16_cond
1521   0DFC             _for16_exit:
1522   0DFC             ; i = 0; 
1523   0DFC FA FF FF      lea d, [bp + -1] ; $i
1524   0DFF DA            push d
1525   0E00 FD 2E 00 00   mov32 cb, $00000000
1525   0E04 00 00 
1526   0E06 E7            pop d
1527   0E07 FD 43         mov [d], b
1528   0E09 0A 0C 0E      jmp _if14_exit
1529   0E0C             _if14_exit:
1530   0E0C 0A 35 0B      jmp _while13_cond
1531   0E0F             _while13_exit:
1532   0E0F             ; if (i) { 
1533   0E0F             _if17_cond:
1534   0E0F FA FF FF      lea d, [bp + -1] ; $i
1535   0E12 2A            mov b, [d]
1536   0E13 38 00 00      mov c, 0
1537   0E16 C0 00 00      cmp b, 0
1538   0E19 C6 26 10      je _if17_exit
1539   0E1C             _if17_TRUE:
1540   0E1C             ; for (k = i; k < 4; k++) { 
1541   0E1C             _for18_init:
1542   0E1C FA FB FF      lea d, [bp + -5] ; $k
1543   0E1F DA            push d
1544   0E20 FA FF FF      lea d, [bp + -1] ; $i
1545   0E23 2A            mov b, [d]
1546   0E24 38 00 00      mov c, 0
1547   0E27 E7            pop d
1548   0E28 FD 43         mov [d], b
1549   0E2A             _for18_cond:
1550   0E2A FA FB FF      lea d, [bp + -5] ; $k
1551   0E2D 2A            mov b, [d]
1552   0E2E 38 00 00      mov c, 0
1553   0E31             ; --- START RELATIONAL
1554   0E31 D7            push a
1555   0E32 11            mov a, b
1556   0E33 FD 2E 04 00   mov32 cb, $00000004
1556   0E37 00 00 
1557   0E39 B0            cmp a, b
1558   0E3A FD 73         slt ; < (signed)
1559   0E3C E4            pop a
1560   0E3D             ; --- END RELATIONAL
1561   0E3D C0 00 00      cmp b, 0
1562   0E40 C6 6F 0E      je _for18_exit
1563   0E43             _for18_block:
1564   0E43             ; input_buffer[k] = 0; 
1565   0E43 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1566   0E46 D7            push a
1567   0E47 DA            push d
1568   0E48 FA FB FF      lea d, [bp + -5] ; $k
1569   0E4B 2A            mov b, [d]
1570   0E4C 38 00 00      mov c, 0
1571   0E4F E7            pop d
1572   0E50 5A            add d, b
1573   0E51 E4            pop a
1574   0E52 DA            push d
1575   0E53 FD 2E 00 00   mov32 cb, $00000000
1575   0E57 00 00 
1576   0E59 E7            pop d
1577   0E5A FD 3E         mov [d], bl
1578   0E5C             _for18_update:
1579   0E5C FA FB FF      lea d, [bp + -5] ; $k
1580   0E5F 2A            mov b, [d]
1581   0E60 38 00 00      mov c, 0
1582   0E63 11            mov a, b
1583   0E64 FD 77         inc b
1584   0E66 FA FB FF      lea d, [bp + -5] ; $k
1585   0E69 FD 43         mov [d], b
1586   0E6B 27            mov b, a
1587   0E6C 0A 2A 0E      jmp _for18_cond
1588   0E6F             _for18_exit:
1589   0E6F             ; for (k = 0; k < 4; k++) { 
1590   0E6F             _for19_init:
1591   0E6F FA FB FF      lea d, [bp + -5] ; $k
1592   0E72 DA            push d
1593   0E73 FD 2E 00 00   mov32 cb, $00000000
1593   0E77 00 00 
1594   0E79 E7            pop d
1595   0E7A FD 43         mov [d], b
1596   0E7C             _for19_cond:
1597   0E7C FA FB FF      lea d, [bp + -5] ; $k
1598   0E7F 2A            mov b, [d]
1599   0E80 38 00 00      mov c, 0
1600   0E83             ; --- START RELATIONAL
1601   0E83 D7            push a
1602   0E84 11            mov a, b
1603   0E85 FD 2E 04 00   mov32 cb, $00000004
1603   0E89 00 00 
1604   0E8B B0            cmp a, b
1605   0E8C FD 73         slt ; < (signed)
1606   0E8E E4            pop a
1607   0E8F             ; --- END RELATIONAL
1608   0E8F C0 00 00      cmp b, 0
1609   0E92 C6 D7 0E      je _for19_exit
1610   0E95             _for19_block:
1611   0E95             ; input_buffer[k] = base64_char_value(input_buffer[k]); 
1612   0E95 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1613   0E98 D7            push a
1614   0E99 DA            push d
1615   0E9A FA FB FF      lea d, [bp + -5] ; $k
1616   0E9D 2A            mov b, [d]
1617   0E9E 38 00 00      mov c, 0
1618   0EA1 E7            pop d
1619   0EA2 5A            add d, b
1620   0EA3 E4            pop a
1621   0EA4 DA            push d
1622   0EA5             ; --- START FUNCTION CALL
1623   0EA5 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1624   0EA8 D7            push a
1625   0EA9 DA            push d
1626   0EAA FA FB FF      lea d, [bp + -5] ; $k
1627   0EAD 2A            mov b, [d]
1628   0EAE 38 00 00      mov c, 0
1629   0EB1 E7            pop d
1630   0EB2 5A            add d, b
1631   0EB3 E4            pop a
1632   0EB4 32            mov bl, [d]
1633   0EB5 A7 00         mov bh, 0
1634   0EB7 38 00 00      mov c, 0
1635   0EBA DD            push bl
1636   0EBB 07 91 09      call base64_char_value
1637   0EBE 51 01 00      add sp, 1
1638   0EC1             ; --- END FUNCTION CALL
1639   0EC1 E7            pop d
1640   0EC2 FD 3E         mov [d], bl
1641   0EC4             _for19_update:
1642   0EC4 FA FB FF      lea d, [bp + -5] ; $k
1643   0EC7 2A            mov b, [d]
1644   0EC8 38 00 00      mov c, 0
1645   0ECB 11            mov a, b
1646   0ECC FD 77         inc b
1647   0ECE FA FB FF      lea d, [bp + -5] ; $k
1648   0ED1 FD 43         mov [d], b
1649   0ED3 27            mov b, a
1650   0ED4 0A 7C 0E      jmp _for19_cond
1651   0ED7             _for19_exit:
1652   0ED7             ; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1653   0ED7 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1654   0EDA D7            push a
1655   0EDB DA            push d
1656   0EDC FD 2E 00 00   mov32 cb, $00000000
1656   0EE0 00 00 
1657   0EE2 E7            pop d
1658   0EE3 5A            add d, b
1659   0EE4 E4            pop a
1660   0EE5 DA            push d
1661   0EE6 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1662   0EE9 D7            push a
1663   0EEA DA            push d
1664   0EEB FD 2E 00 00   mov32 cb, $00000000
1664   0EEF 00 00 
1665   0EF1 E7            pop d
1666   0EF2 5A            add d, b
1667   0EF3 E4            pop a
1668   0EF4 32            mov bl, [d]
1669   0EF5 A7 00         mov bh, 0
1670   0EF7 38 00 00      mov c, 0
1671   0EFA             ; --- START SHIFT
1672   0EFA D7            push a
1673   0EFB 11            mov a, b
1674   0EFC FD 2E 02 00   mov32 cb, $00000002
1674   0F00 00 00 
1675   0F02 FD 39         mov c, b
1676   0F04 9D            shl a, cl
1677   0F05 27            mov b, a
1678   0F06 E4            pop a
1679   0F07             ; --- END SHIFT
1680   0F07             ; --- START TERMS
1681   0F07 D7            push a
1682   0F08 11            mov a, b
1683   0F09 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1684   0F0C D7            push a
1685   0F0D DA            push d
1686   0F0E FD 2E 01 00   mov32 cb, $00000001
1686   0F12 00 00 
1687   0F14 E7            pop d
1688   0F15 5A            add d, b
1689   0F16 E4            pop a
1690   0F17 32            mov bl, [d]
1691   0F18 A7 00         mov bh, 0
1692   0F1A 38 00 00      mov c, 0
1693   0F1D D7            push a
1694   0F1E 11            mov a, b
1695   0F1F FD 2E 30 00   mov32 cb, $00000030
1695   0F23 00 00 
1696   0F25 FD 92         and b, a ; &
1697   0F27 E4            pop a
1698   0F28             ; --- START SHIFT
1699   0F28 D7            push a
1700   0F29 11            mov a, b
1701   0F2A FD 2E 04 00   mov32 cb, $00000004
1701   0F2E 00 00 
1702   0F30 FD 39         mov c, b
1703   0F32 A5            ashr a, cl
1704   0F33 27            mov b, a
1705   0F34 E4            pop a
1706   0F35             ; --- END SHIFT
1707   0F35 56            add b, a
1708   0F36 E4            pop a
1709   0F37             ; --- END TERMS
1710   0F37 E7            pop d
1711   0F38 FD 3E         mov [d], bl
1712   0F3A             ; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1713   0F3A FA F2 FF      lea d, [bp + -14] ; $output_buffer
1714   0F3D D7            push a
1715   0F3E DA            push d
1716   0F3F FD 2E 01 00   mov32 cb, $00000001
1716   0F43 00 00 
1717   0F45 E7            pop d
1718   0F46 5A            add d, b
1719   0F47 E4            pop a
1720   0F48 DA            push d
1721   0F49 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1722   0F4C D7            push a
1723   0F4D DA            push d
1724   0F4E FD 2E 01 00   mov32 cb, $00000001
1724   0F52 00 00 
1725   0F54 E7            pop d
1726   0F55 5A            add d, b
1727   0F56 E4            pop a
1728   0F57 32            mov bl, [d]
1729   0F58 A7 00         mov bh, 0
1730   0F5A 38 00 00      mov c, 0
1731   0F5D D7            push a
1732   0F5E 11            mov a, b
1733   0F5F FD 2E 0F 00   mov32 cb, $0000000f
1733   0F63 00 00 
1734   0F65 FD 92         and b, a ; &
1735   0F67 E4            pop a
1736   0F68             ; --- START SHIFT
1737   0F68 D7            push a
1738   0F69 11            mov a, b
1739   0F6A FD 2E 04 00   mov32 cb, $00000004
1739   0F6E 00 00 
1740   0F70 FD 39         mov c, b
1741   0F72 9D            shl a, cl
1742   0F73 27            mov b, a
1743   0F74 E4            pop a
1744   0F75             ; --- END SHIFT
1745   0F75             ; --- START TERMS
1746   0F75 D7            push a
1747   0F76 11            mov a, b
1748   0F77 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1749   0F7A D7            push a
1750   0F7B DA            push d
1751   0F7C FD 2E 02 00   mov32 cb, $00000002
1751   0F80 00 00 
1752   0F82 E7            pop d
1753   0F83 5A            add d, b
1754   0F84 E4            pop a
1755   0F85 32            mov bl, [d]
1756   0F86 A7 00         mov bh, 0
1757   0F88 38 00 00      mov c, 0
1758   0F8B D7            push a
1759   0F8C 11            mov a, b
1760   0F8D FD 2E 3C 00   mov32 cb, $0000003c
1760   0F91 00 00 
1761   0F93 FD 92         and b, a ; &
1762   0F95 E4            pop a
1763   0F96             ; --- START SHIFT
1764   0F96 D7            push a
1765   0F97 11            mov a, b
1766   0F98 FD 2E 02 00   mov32 cb, $00000002
1766   0F9C 00 00 
1767   0F9E FD 39         mov c, b
1768   0FA0 A5            ashr a, cl
1769   0FA1 27            mov b, a
1770   0FA2 E4            pop a
1771   0FA3             ; --- END SHIFT
1772   0FA3 56            add b, a
1773   0FA4 E4            pop a
1774   0FA5             ; --- END TERMS
1775   0FA5 E7            pop d
1776   0FA6 FD 3E         mov [d], bl
1777   0FA8             ; for (k = 0; k < i - 1; k++) { 
1778   0FA8             _for20_init:
1779   0FA8 FA FB FF      lea d, [bp + -5] ; $k
1780   0FAB DA            push d
1781   0FAC FD 2E 00 00   mov32 cb, $00000000
1781   0FB0 00 00 
1782   0FB2 E7            pop d
1783   0FB3 FD 43         mov [d], b
1784   0FB5             _for20_cond:
1785   0FB5 FA FB FF      lea d, [bp + -5] ; $k
1786   0FB8 2A            mov b, [d]
1787   0FB9 38 00 00      mov c, 0
1788   0FBC             ; --- START RELATIONAL
1789   0FBC D7            push a
1790   0FBD 11            mov a, b
1791   0FBE FA FF FF      lea d, [bp + -1] ; $i
1792   0FC1 2A            mov b, [d]
1793   0FC2 38 00 00      mov c, 0
1794   0FC5             ; --- START TERMS
1795   0FC5 D7            push a
1796   0FC6 11            mov a, b
1797   0FC7 FD 2E 01 00   mov32 cb, $00000001
1797   0FCB 00 00 
1798   0FCD 60            sub a, b
1799   0FCE 27            mov b, a
1800   0FCF E4            pop a
1801   0FD0             ; --- END TERMS
1802   0FD0 B0            cmp a, b
1803   0FD1 FD 73         slt ; < (signed)
1804   0FD3 E4            pop a
1805   0FD4             ; --- END RELATIONAL
1806   0FD4 C0 00 00      cmp b, 0
1807   0FD7 C6 23 10      je _for20_exit
1808   0FDA             _for20_block:
1809   0FDA             ; output[j++] = output_buffer[k]; 
1810   0FDA FA 07 00      lea d, [bp + 7] ; $output
1811   0FDD FD 2A         mov d, [d]
1812   0FDF D7            push a
1813   0FE0 DA            push d
1814   0FE1 FA FD FF      lea d, [bp + -3] ; $j
1815   0FE4 2A            mov b, [d]
1816   0FE5 38 00 00      mov c, 0
1817   0FE8 11            mov a, b
1818   0FE9 FD 77         inc b
1819   0FEB FA FD FF      lea d, [bp + -3] ; $j
1820   0FEE FD 43         mov [d], b
1821   0FF0 27            mov b, a
1822   0FF1 E7            pop d
1823   0FF2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1824   0FF6 E4            pop a
1825   0FF7 DA            push d
1826   0FF8 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1827   0FFB D7            push a
1828   0FFC DA            push d
1829   0FFD FA FB FF      lea d, [bp + -5] ; $k
1830   1000 2A            mov b, [d]
1831   1001 38 00 00      mov c, 0
1832   1004 E7            pop d
1833   1005 5A            add d, b
1834   1006 E4            pop a
1835   1007 32            mov bl, [d]
1836   1008 A7 00         mov bh, 0
1837   100A 38 00 00      mov c, 0
1838   100D E7            pop d
1839   100E FD 3E         mov [d], bl
1840   1010             _for20_update:
1841   1010 FA FB FF      lea d, [bp + -5] ; $k
1842   1013 2A            mov b, [d]
1843   1014 38 00 00      mov c, 0
1844   1017 11            mov a, b
1845   1018 FD 77         inc b
1846   101A FA FB FF      lea d, [bp + -5] ; $k
1847   101D FD 43         mov [d], b
1848   101F 27            mov b, a
1849   1020 0A B5 0F      jmp _for20_cond
1850   1023             _for20_exit:
1851   1023 0A 26 10      jmp _if17_exit
1852   1026             _if17_exit:
1853   1026             ; output[j] = '\0'; 
1854   1026 FA 07 00      lea d, [bp + 7] ; $output
1855   1029 FD 2A         mov d, [d]
1856   102B D7            push a
1857   102C DA            push d
1858   102D FA FD FF      lea d, [bp + -3] ; $j
1859   1030 2A            mov b, [d]
1860   1031 38 00 00      mov c, 0
1861   1034 E7            pop d
1862   1035 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1863   1039 E4            pop a
1864   103A DA            push d
1865   103B FD 2E 00 00   mov32 cb, $00000000
1865   103F 00 00 
1866   1041 E7            pop d
1867   1042 FD 3E         mov [d], bl
1868   1044 F9            leave
1869   1045 09            ret
1870   1046             
1871   1046             printf:
1872   1046 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1873   1049             ; char *p, *format_p; 
1874   1049 52 02 00      sub sp, 2
1875   104C 52 02 00      sub sp, 2
1876   104F             ; format_p = format; 
1877   104F FA FD FF      lea d, [bp + -3] ; $format_p
1878   1052 DA            push d
1879   1053 FA 05 00      lea d, [bp + 5] ; $format
1880   1056 2A            mov b, [d]
1881   1057 38 00 00      mov c, 0
1882   105A E7            pop d
1883   105B FD 43         mov [d], b
1884   105D             ; p = &format + 2; 
1885   105D FA FF FF      lea d, [bp + -1] ; $p
1886   1060 DA            push d
1887   1061 FA 05 00      lea d, [bp + 5] ; $format
1888   1064 2D            mov b, d
1889   1065             ; --- START TERMS
1890   1065 D7            push a
1891   1066 11            mov a, b
1892   1067 FD 2E 02 00   mov32 cb, $00000002
1892   106B 00 00 
1893   106D 56            add b, a
1894   106E E4            pop a
1895   106F             ; --- END TERMS
1896   106F E7            pop d
1897   1070 FD 43         mov [d], b
1898   1072             ; for(;;){ 
1899   1072             _for21_init:
1900   1072             _for21_cond:
1901   1072             _for21_block:
1902   1072             ; if(!*format_p) break; 
1903   1072             _if22_cond:
1904   1072 FA FD FF      lea d, [bp + -3] ; $format_p
1905   1075 2A            mov b, [d]
1906   1076 38 00 00      mov c, 0
1907   1079 74            mov d, b
1908   107A 32            mov bl, [d]
1909   107B A7 00         mov bh, 0
1910   107D 38 00 00      mov c, 0
1911   1080 C0 00 00      cmp b, 0
1912   1083 FD 71         seq ; !
1913   1085 C0 00 00      cmp b, 0
1914   1088 C6 91 10      je _if22_else
1915   108B             _if22_TRUE:
1916   108B             ; break; 
1917   108B 0A 31 13      jmp _for21_exit ; for break
1918   108E 0A 1E 13      jmp _if22_exit
1919   1091             _if22_else:
1920   1091             ; if(*format_p == '%'){ 
1921   1091             _if23_cond:
1922   1091 FA FD FF      lea d, [bp + -3] ; $format_p
1923   1094 2A            mov b, [d]
1924   1095 38 00 00      mov c, 0
1925   1098 74            mov d, b
1926   1099 32            mov bl, [d]
1927   109A A7 00         mov bh, 0
1928   109C 38 00 00      mov c, 0
1929   109F             ; --- START RELATIONAL
1930   109F D7            push a
1931   10A0 11            mov a, b
1932   10A1 FD 2E 25 00   mov32 cb, $00000025
1932   10A5 00 00 
1933   10A7 B0            cmp a, b
1934   10A8 FD 71         seq ; ==
1935   10AA E4            pop a
1936   10AB             ; --- END RELATIONAL
1937   10AB C0 00 00      cmp b, 0
1938   10AE C6 09 13      je _if23_else
1939   10B1             _if23_TRUE:
1940   10B1             ; format_p++; 
1941   10B1 FA FD FF      lea d, [bp + -3] ; $format_p
1942   10B4 2A            mov b, [d]
1943   10B5 38 00 00      mov c, 0
1944   10B8 FD 77         inc b
1945   10BA FA FD FF      lea d, [bp + -3] ; $format_p
1946   10BD FD 43         mov [d], b
1947   10BF FD 7D         dec b
1948   10C1             ; switch(*format_p){ 
1949   10C1             _switch24_expr:
1950   10C1 FA FD FF      lea d, [bp + -3] ; $format_p
1951   10C4 2A            mov b, [d]
1952   10C5 38 00 00      mov c, 0
1953   10C8 74            mov d, b
1954   10C9 32            mov bl, [d]
1955   10CA A7 00         mov bh, 0
1956   10CC 38 00 00      mov c, 0
1957   10CF             _switch24_comparisons:
1958   10CF C1 6C         cmp bl, $6c
1959   10D1 C6 FD 10      je _switch24_case0
1960   10D4 C1 4C         cmp bl, $4c
1961   10D6 C6 FD 10      je _switch24_case1
1962   10D9 C1 64         cmp bl, $64
1963   10DB C6 0D 12      je _switch24_case2
1964   10DE C1 69         cmp bl, $69
1965   10E0 C6 0D 12      je _switch24_case3
1966   10E3 C1 75         cmp bl, $75
1967   10E5 C6 3D 12      je _switch24_case4
1968   10E8 C1 78         cmp bl, $78
1969   10EA C6 6D 12      je _switch24_case5
1970   10ED C1 63         cmp bl, $63
1971   10EF C6 9D 12      je _switch24_case6
1972   10F2 C1 73         cmp bl, $73
1973   10F4 C6 CD 12      je _switch24_case7
1974   10F7 0A FA 12      jmp _switch24_default
1975   10FA 0A 06 13      jmp _switch24_exit
1976   10FD             _switch24_case0:
1977   10FD             _switch24_case1:
1978   10FD             ; format_p++; 
1979   10FD FA FD FF      lea d, [bp + -3] ; $format_p
1980   1100 2A            mov b, [d]
1981   1101 38 00 00      mov c, 0
1982   1104 FD 77         inc b
1983   1106 FA FD FF      lea d, [bp + -3] ; $format_p
1984   1109 FD 43         mov [d], b
1985   110B FD 7D         dec b
1986   110D             ; if(*format_p == 'd' || *format_p == 'i') 
1987   110D             _if25_cond:
1988   110D FA FD FF      lea d, [bp + -3] ; $format_p
1989   1110 2A            mov b, [d]
1990   1111 38 00 00      mov c, 0
1991   1114 74            mov d, b
1992   1115 32            mov bl, [d]
1993   1116 A7 00         mov bh, 0
1994   1118 38 00 00      mov c, 0
1995   111B             ; --- START RELATIONAL
1996   111B D7            push a
1997   111C 11            mov a, b
1998   111D FD 2E 64 00   mov32 cb, $00000064
1998   1121 00 00 
1999   1123 B0            cmp a, b
2000   1124 FD 71         seq ; ==
2001   1126 E4            pop a
2002   1127             ; --- END RELATIONAL
2003   1127             ; --- START LOGICAL OR
2004   1127 D7            push a
2005   1128 11            mov a, b
2006   1129 FA FD FF      lea d, [bp + -3] ; $format_p
2007   112C 2A            mov b, [d]
2008   112D 38 00 00      mov c, 0
2009   1130 74            mov d, b
2010   1131 32            mov bl, [d]
2011   1132 A7 00         mov bh, 0
2012   1134 38 00 00      mov c, 0
2013   1137             ; --- START RELATIONAL
2014   1137 D7            push a
2015   1138 11            mov a, b
2016   1139 FD 2E 69 00   mov32 cb, $00000069
2016   113D 00 00 
2017   113F B0            cmp a, b
2018   1140 FD 71         seq ; ==
2019   1142 E4            pop a
2020   1143             ; --- END RELATIONAL
2021   1143 FD A8         sor a, b ; ||
2022   1145 E4            pop a
2023   1146             ; --- END LOGICAL OR
2024   1146 C0 00 00      cmp b, 0
2025   1149 C6 6A 11      je _if25_else
2026   114C             _if25_TRUE:
2027   114C             ; print_signed_long(*(long *)p); 
2028   114C             ; --- START FUNCTION CALL
2029   114C FA FF FF      lea d, [bp + -1] ; $p
2030   114F 2A            mov b, [d]
2031   1150 38 00 00      mov c, 0
2032   1153 74            mov d, b
2033   1154 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2034   1157 FD 39         mov c, b ; And place it into C
2035   1159 2A            mov b, [d] ; Lower Word in B
2036   115A 12            mov a, c
2037   115B FD AA         swp a
2038   115D D7            push a
2039   115E FD AB         swp b
2040   1160 D8            push b
2041   1161 07 33 13      call print_signed_long
2042   1164 51 04 00      add sp, 4
2043   1167             ; --- END FUNCTION CALL
2044   1167 0A F2 11      jmp _if25_exit
2045   116A             _if25_else:
2046   116A             ; if(*format_p == 'u') 
2047   116A             _if26_cond:
2048   116A FA FD FF      lea d, [bp + -3] ; $format_p
2049   116D 2A            mov b, [d]
2050   116E 38 00 00      mov c, 0
2051   1171 74            mov d, b
2052   1172 32            mov bl, [d]
2053   1173 A7 00         mov bh, 0
2054   1175 38 00 00      mov c, 0
2055   1178             ; --- START RELATIONAL
2056   1178 D7            push a
2057   1179 11            mov a, b
2058   117A FD 2E 75 00   mov32 cb, $00000075
2058   117E 00 00 
2059   1180 B0            cmp a, b
2060   1181 FD 71         seq ; ==
2061   1183 E4            pop a
2062   1184             ; --- END RELATIONAL
2063   1184 C0 00 00      cmp b, 0
2064   1187 C6 A8 11      je _if26_else
2065   118A             _if26_TRUE:
2066   118A             ; print_unsigned_long(*(unsigned long *)p); 
2067   118A             ; --- START FUNCTION CALL
2068   118A FA FF FF      lea d, [bp + -1] ; $p
2069   118D 2A            mov b, [d]
2070   118E 38 00 00      mov c, 0
2071   1191 74            mov d, b
2072   1192 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2073   1195 FD 39         mov c, b ; And place it into C
2074   1197 2A            mov b, [d] ; Lower Word in B
2075   1198 12            mov a, c
2076   1199 FD AA         swp a
2077   119B D7            push a
2078   119C FD AB         swp b
2079   119E D8            push b
2080   119F 07 D3 14      call print_unsigned_long
2081   11A2 51 04 00      add sp, 4
2082   11A5             ; --- END FUNCTION CALL
2083   11A5 0A F2 11      jmp _if26_exit
2084   11A8             _if26_else:
2085   11A8             ; if(*format_p == 'x') 
2086   11A8             _if27_cond:
2087   11A8 FA FD FF      lea d, [bp + -3] ; $format_p
2088   11AB 2A            mov b, [d]
2089   11AC 38 00 00      mov c, 0
2090   11AF 74            mov d, b
2091   11B0 32            mov bl, [d]
2092   11B1 A7 00         mov bh, 0
2093   11B3 38 00 00      mov c, 0
2094   11B6             ; --- START RELATIONAL
2095   11B6 D7            push a
2096   11B7 11            mov a, b
2097   11B8 FD 2E 78 00   mov32 cb, $00000078
2097   11BC 00 00 
2098   11BE B0            cmp a, b
2099   11BF FD 71         seq ; ==
2100   11C1 E4            pop a
2101   11C2             ; --- END RELATIONAL
2102   11C2 C0 00 00      cmp b, 0
2103   11C5 C6 E6 11      je _if27_else
2104   11C8             _if27_TRUE:
2105   11C8             ; printx32(*(long int *)p); 
2106   11C8             ; --- START FUNCTION CALL
2107   11C8 FA FF FF      lea d, [bp + -1] ; $p
2108   11CB 2A            mov b, [d]
2109   11CC 38 00 00      mov c, 0
2110   11CF 74            mov d, b
2111   11D0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2112   11D3 FD 39         mov c, b ; And place it into C
2113   11D5 2A            mov b, [d] ; Lower Word in B
2114   11D6 12            mov a, c
2115   11D7 FD AA         swp a
2116   11D9 D7            push a
2117   11DA FD AB         swp b
2118   11DC D8            push b
2119   11DD 07 11 16      call printx32
2120   11E0 51 04 00      add sp, 4
2121   11E3             ; --- END FUNCTION CALL
2122   11E3 0A F2 11      jmp _if27_exit
2123   11E6             _if27_else:
2124   11E6             ; err("Unexpected format in printf."); 
2125   11E6             ; --- START FUNCTION CALL
2126   11E6 26 0B 1B      mov b, _s3 ; "Unexpected format in printf."
2127   11E9 FD AB         swp b
2128   11EB D8            push b
2129   11EC 07 71 16      call err
2130   11EF 51 02 00      add sp, 2
2131   11F2             ; --- END FUNCTION CALL
2132   11F2             _if27_exit:
2133   11F2             _if26_exit:
2134   11F2             _if25_exit:
2135   11F2             ; p = p + 4; 
2136   11F2 FA FF FF      lea d, [bp + -1] ; $p
2137   11F5 DA            push d
2138   11F6 FA FF FF      lea d, [bp + -1] ; $p
2139   11F9 2A            mov b, [d]
2140   11FA 38 00 00      mov c, 0
2141   11FD             ; --- START TERMS
2142   11FD D7            push a
2143   11FE 11            mov a, b
2144   11FF FD 2E 04 00   mov32 cb, $00000004
2144   1203 00 00 
2145   1205 56            add b, a
2146   1206 E4            pop a
2147   1207             ; --- END TERMS
2148   1207 E7            pop d
2149   1208 FD 43         mov [d], b
2150   120A             ; break; 
2151   120A 0A 06 13      jmp _switch24_exit ; case break
2152   120D             _switch24_case2:
2153   120D             _switch24_case3:
2154   120D             ; print_signed(*(int*)p); 
2155   120D             ; --- START FUNCTION CALL
2156   120D FA FF FF      lea d, [bp + -1] ; $p
2157   1210 2A            mov b, [d]
2158   1211 38 00 00      mov c, 0
2159   1214 74            mov d, b
2160   1215 2A            mov b, [d]
2161   1216 38 00 00      mov c, 0
2162   1219 FD AB         swp b
2163   121B D8            push b
2164   121C 07 9F 16      call print_signed
2165   121F 51 02 00      add sp, 2
2166   1222             ; --- END FUNCTION CALL
2167   1222             ; p = p + 2; 
2168   1222 FA FF FF      lea d, [bp + -1] ; $p
2169   1225 DA            push d
2170   1226 FA FF FF      lea d, [bp + -1] ; $p
2171   1229 2A            mov b, [d]
2172   122A 38 00 00      mov c, 0
2173   122D             ; --- START TERMS
2174   122D D7            push a
2175   122E 11            mov a, b
2176   122F FD 2E 02 00   mov32 cb, $00000002
2176   1233 00 00 
2177   1235 56            add b, a
2178   1236 E4            pop a
2179   1237             ; --- END TERMS
2180   1237 E7            pop d
2181   1238 FD 43         mov [d], b
2182   123A             ; break; 
2183   123A 0A 06 13      jmp _switch24_exit ; case break
2184   123D             _switch24_case4:
2185   123D             ; print_unsigned(*(unsigned int*)p); 
2186   123D             ; --- START FUNCTION CALL
2187   123D FA FF FF      lea d, [bp + -1] ; $p
2188   1240 2A            mov b, [d]
2189   1241 38 00 00      mov c, 0
2190   1244 74            mov d, b
2191   1245 2A            mov b, [d]
2192   1246 38 00 00      mov c, 0
2193   1249 FD AB         swp b
2194   124B D8            push b
2195   124C 07 F0 17      call print_unsigned
2196   124F 51 02 00      add sp, 2
2197   1252             ; --- END FUNCTION CALL
2198   1252             ; p = p + 2; 
2199   1252 FA FF FF      lea d, [bp + -1] ; $p
2200   1255 DA            push d
2201   1256 FA FF FF      lea d, [bp + -1] ; $p
2202   1259 2A            mov b, [d]
2203   125A 38 00 00      mov c, 0
2204   125D             ; --- START TERMS
2205   125D D7            push a
2206   125E 11            mov a, b
2207   125F FD 2E 02 00   mov32 cb, $00000002
2207   1263 00 00 
2208   1265 56            add b, a
2209   1266 E4            pop a
2210   1267             ; --- END TERMS
2211   1267 E7            pop d
2212   1268 FD 43         mov [d], b
2213   126A             ; break; 
2214   126A 0A 06 13      jmp _switch24_exit ; case break
2215   126D             _switch24_case5:
2216   126D             ; printx16(*(int*)p); 
2217   126D             ; --- START FUNCTION CALL
2218   126D FA FF FF      lea d, [bp + -1] ; $p
2219   1270 2A            mov b, [d]
2220   1271 38 00 00      mov c, 0
2221   1274 74            mov d, b
2222   1275 2A            mov b, [d]
2223   1276 38 00 00      mov c, 0
2224   1279 FD AB         swp b
2225   127B D8            push b
2226   127C 07 08 19      call printx16
2227   127F 51 02 00      add sp, 2
2228   1282             ; --- END FUNCTION CALL
2229   1282             ; p = p + 2; 
2230   1282 FA FF FF      lea d, [bp + -1] ; $p
2231   1285 DA            push d
2232   1286 FA FF FF      lea d, [bp + -1] ; $p
2233   1289 2A            mov b, [d]
2234   128A 38 00 00      mov c, 0
2235   128D             ; --- START TERMS
2236   128D D7            push a
2237   128E 11            mov a, b
2238   128F FD 2E 02 00   mov32 cb, $00000002
2238   1293 00 00 
2239   1295 56            add b, a
2240   1296 E4            pop a
2241   1297             ; --- END TERMS
2242   1297 E7            pop d
2243   1298 FD 43         mov [d], b
2244   129A             ; break; 
2245   129A 0A 06 13      jmp _switch24_exit ; case break
2246   129D             _switch24_case6:
2247   129D             ; putchar(*(char*)p); 
2248   129D             ; --- START FUNCTION CALL
2249   129D FA FF FF      lea d, [bp + -1] ; $p
2250   12A0 2A            mov b, [d]
2251   12A1 38 00 00      mov c, 0
2252   12A4 74            mov d, b
2253   12A5 32            mov bl, [d]
2254   12A6 A7 00         mov bh, 0
2255   12A8 38 00 00      mov c, 0
2256   12AB DD            push bl
2257   12AC 07 C5 14      call putchar
2258   12AF 51 01 00      add sp, 1
2259   12B2             ; --- END FUNCTION CALL
2260   12B2             ; p = p + 2; 
2261   12B2 FA FF FF      lea d, [bp + -1] ; $p
2262   12B5 DA            push d
2263   12B6 FA FF FF      lea d, [bp + -1] ; $p
2264   12B9 2A            mov b, [d]
2265   12BA 38 00 00      mov c, 0
2266   12BD             ; --- START TERMS
2267   12BD D7            push a
2268   12BE 11            mov a, b
2269   12BF FD 2E 02 00   mov32 cb, $00000002
2269   12C3 00 00 
2270   12C5 56            add b, a
2271   12C6 E4            pop a
2272   12C7             ; --- END TERMS
2273   12C7 E7            pop d
2274   12C8 FD 43         mov [d], b
2275   12CA             ; break; 
2276   12CA 0A 06 13      jmp _switch24_exit ; case break
2277   12CD             _switch24_case7:
2278   12CD             ; print(*(char**)p); 
2279   12CD             ; --- START FUNCTION CALL
2280   12CD FA FF FF      lea d, [bp + -1] ; $p
2281   12D0 2A            mov b, [d]
2282   12D1 38 00 00      mov c, 0
2283   12D4 74            mov d, b
2284   12D5 2A            mov b, [d]
2285   12D6 FD AB         swp b
2286   12D8 D8            push b
2287   12D9 07 86 16      call print
2288   12DC 51 02 00      add sp, 2
2289   12DF             ; --- END FUNCTION CALL
2290   12DF             ; p = p + 2; 
2291   12DF FA FF FF      lea d, [bp + -1] ; $p
2292   12E2 DA            push d
2293   12E3 FA FF FF      lea d, [bp + -1] ; $p
2294   12E6 2A            mov b, [d]
2295   12E7 38 00 00      mov c, 0
2296   12EA             ; --- START TERMS
2297   12EA D7            push a
2298   12EB 11            mov a, b
2299   12EC FD 2E 02 00   mov32 cb, $00000002
2299   12F0 00 00 
2300   12F2 56            add b, a
2301   12F3 E4            pop a
2302   12F4             ; --- END TERMS
2303   12F4 E7            pop d
2304   12F5 FD 43         mov [d], b
2305   12F7             ; break; 
2306   12F7 0A 06 13      jmp _switch24_exit ; case break
2307   12FA             _switch24_default:
2308   12FA             ; print("Error: Unknown argument type.\n"); 
2309   12FA             ; --- START FUNCTION CALL
2310   12FA 26 28 1B      mov b, _s4 ; "Error: Unknown argument type.\n"
2311   12FD FD AB         swp b
2312   12FF D8            push b
2313   1300 07 86 16      call print
2314   1303 51 02 00      add sp, 2
2315   1306             ; --- END FUNCTION CALL
2316   1306             _switch24_exit:
2317   1306 0A 1E 13      jmp _if23_exit
2318   1309             _if23_else:
2319   1309             ; putchar(*format_p); 
2320   1309             ; --- START FUNCTION CALL
2321   1309 FA FD FF      lea d, [bp + -3] ; $format_p
2322   130C 2A            mov b, [d]
2323   130D 38 00 00      mov c, 0
2324   1310 74            mov d, b
2325   1311 32            mov bl, [d]
2326   1312 A7 00         mov bh, 0
2327   1314 38 00 00      mov c, 0
2328   1317 DD            push bl
2329   1318 07 C5 14      call putchar
2330   131B 51 01 00      add sp, 1
2331   131E             ; --- END FUNCTION CALL
2332   131E             _if23_exit:
2333   131E             _if22_exit:
2334   131E             ; format_p++; 
2335   131E FA FD FF      lea d, [bp + -3] ; $format_p
2336   1321 2A            mov b, [d]
2337   1322 38 00 00      mov c, 0
2338   1325 FD 77         inc b
2339   1327 FA FD FF      lea d, [bp + -3] ; $format_p
2340   132A FD 43         mov [d], b
2341   132C FD 7D         dec b
2342   132E             _for21_update:
2343   132E 0A 72 10      jmp _for21_cond
2344   1331             _for21_exit:
2345   1331 F9            leave
2346   1332 09            ret
2347   1333             
2348   1333             print_signed_long:
2349   1333 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2350   1336             ; char digits[10]; 
2351   1336 52 0A 00      sub sp, 10
2352   1339             ; int i = 0; 
2353   1339 52 02 00      sub sp, 2
2354   133C             ; --- START LOCAL VAR INITIALIZATION
2355   133C FA F5 FF      lea d, [bp + -11] ; $i
2356   133F DA            push d
2357   1340 FD 2E 00 00   mov32 cb, $00000000
2357   1344 00 00 
2358   1346 E7            pop d
2359   1347 FD 43         mov [d], b
2360   1349             ; --- END LOCAL VAR INITIALIZATION
2361   1349             ; if (num < 0) { 
2362   1349             _if28_cond:
2363   1349 FA 05 00      lea d, [bp + 5] ; $num
2364   134C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2365   134F FD 39         mov c, b ; And place it into C
2366   1351 2A            mov b, [d] ; Lower Word in B
2367   1352             ; --- START RELATIONAL
2368   1352 D7            push a
2369   1353 FD D8         push g
2370   1355 11            mov a, b
2371   1356 FD 7A         mov g, c
2372   1358 FD 2E 00 00   mov32 cb, $00000000
2372   135C 00 00 
2373   135E 38 00 00      mov c, 0
2374   1361 FD AF         cmp32 ga, cb
2375   1363 FD 73         slt ; <
2376   1365 FD F1         pop g
2377   1367 E4            pop a
2378   1368             ; --- END RELATIONAL
2379   1368 C0 00 00      cmp b, 0
2380   136B C6 9D 13      je _if28_else
2381   136E             _if28_TRUE:
2382   136E             ; putchar('-'); 
2383   136E             ; --- START FUNCTION CALL
2384   136E FD 2E 2D 00   mov32 cb, $0000002d
2384   1372 00 00 
2385   1374 DD            push bl
2386   1375 07 C5 14      call putchar
2387   1378 51 01 00      add sp, 1
2388   137B             ; --- END FUNCTION CALL
2389   137B             ; num = -num; 
2390   137B FA 05 00      lea d, [bp + 5] ; $num
2391   137E DA            push d
2392   137F FA 05 00      lea d, [bp + 5] ; $num
2393   1382 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2394   1385 FD 39         mov c, b ; And place it into C
2395   1387 2A            mov b, [d] ; Lower Word in B
2396   1388 12            mov a, c
2397   1389 95            not a
2398   138A 97            not b
2399   138B 55 01 00      add b, 1
2400   138E 5B 00 00      adc a, 0
2401   1391 39            mov c, a
2402   1392 E7            pop d
2403   1393 FD 43         mov [d], b
2404   1395 28            mov b, c
2405   1396 FD 44 02 00   mov [d + 2], b
2406   139A 0A D4 13      jmp _if28_exit
2407   139D             _if28_else:
2408   139D             ; if (num == 0) { 
2409   139D             _if29_cond:
2410   139D FA 05 00      lea d, [bp + 5] ; $num
2411   13A0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2412   13A3 FD 39         mov c, b ; And place it into C
2413   13A5 2A            mov b, [d] ; Lower Word in B
2414   13A6             ; --- START RELATIONAL
2415   13A6 D7            push a
2416   13A7 FD D8         push g
2417   13A9 11            mov a, b
2418   13AA FD 7A         mov g, c
2419   13AC FD 2E 00 00   mov32 cb, $00000000
2419   13B0 00 00 
2420   13B2 38 00 00      mov c, 0
2421   13B5 FD AF         cmp32 ga, cb
2422   13B7 FD 71         seq ; ==
2423   13B9 FD F1         pop g
2424   13BB E4            pop a
2425   13BC             ; --- END RELATIONAL
2426   13BC C0 00 00      cmp b, 0
2427   13BF C6 D4 13      je _if29_exit
2428   13C2             _if29_TRUE:
2429   13C2             ; putchar('0'); 
2430   13C2             ; --- START FUNCTION CALL
2431   13C2 FD 2E 30 00   mov32 cb, $00000030
2431   13C6 00 00 
2432   13C8 DD            push bl
2433   13C9 07 C5 14      call putchar
2434   13CC 51 01 00      add sp, 1
2435   13CF             ; --- END FUNCTION CALL
2436   13CF             ; return; 
2437   13CF F9            leave
2438   13D0 09            ret
2439   13D1 0A D4 13      jmp _if29_exit
2440   13D4             _if29_exit:
2441   13D4             _if28_exit:
2442   13D4             ; while (num > 0) { 
2443   13D4             _while30_cond:
2444   13D4 FA 05 00      lea d, [bp + 5] ; $num
2445   13D7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2446   13DA FD 39         mov c, b ; And place it into C
2447   13DC 2A            mov b, [d] ; Lower Word in B
2448   13DD             ; --- START RELATIONAL
2449   13DD D7            push a
2450   13DE FD D8         push g
2451   13E0 11            mov a, b
2452   13E1 FD 7A         mov g, c
2453   13E3 FD 2E 00 00   mov32 cb, $00000000
2453   13E7 00 00 
2454   13E9 38 00 00      mov c, 0
2455   13EC FD AF         cmp32 ga, cb
2456   13EE FD 7F         sgt
2457   13F0 FD F1         pop g
2458   13F2 E4            pop a
2459   13F3             ; --- END RELATIONAL
2460   13F3 C0 00 00      cmp b, 0
2461   13F6 C6 7B 14      je _while30_exit
2462   13F9             _while30_block:
2463   13F9             ; digits[i] = '0' + (num % 10); 
2464   13F9 FA F7 FF      lea d, [bp + -9] ; $digits
2465   13FC D7            push a
2466   13FD DA            push d
2467   13FE FA F5 FF      lea d, [bp + -11] ; $i
2468   1401 2A            mov b, [d]
2469   1402 38 00 00      mov c, 0
2470   1405 E7            pop d
2471   1406 5A            add d, b
2472   1407 E4            pop a
2473   1408 DA            push d
2474   1409 FD 2E 30 00   mov32 cb, $00000030
2474   140D 00 00 
2475   140F             ; --- START TERMS
2476   140F D7            push a
2477   1410 11            mov a, b
2478   1411 FA 05 00      lea d, [bp + 5] ; $num
2479   1414 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2480   1417 FD 39         mov c, b ; And place it into C
2481   1419 2A            mov b, [d] ; Lower Word in B
2482   141A             ; --- START FACTORS
2483   141A D7            push a
2484   141B FD D8         push g
2485   141D 11            mov a, b
2486   141E FD 7A         mov g, c
2487   1420 FD 2E 0A 00   mov32 cb, $0000000a
2487   1424 00 00 
2488   1426 FD D8         push g ; save 'g' as the div instruction uses it
2489   1428 AE            div a, b ; %, a: quotient, b: remainder
2490   1429 11            mov a, b
2491   142A FD F1         pop g
2492   142C FD 38         mov c, g
2493   142E 27            mov b, a
2494   142F FD F1         pop g
2495   1431 E4            pop a
2496   1432             ; --- END FACTORS
2497   1432 FD 22 00 00   mov g, 0
2498   1436 FD 15         add32 cb, ga
2499   1438 E4            pop a
2500   1439             ; --- END TERMS
2501   1439 E7            pop d
2502   143A FD 3E         mov [d], bl
2503   143C             ; num = num / 10; 
2504   143C FA 05 00      lea d, [bp + 5] ; $num
2505   143F DA            push d
2506   1440 FA 05 00      lea d, [bp + 5] ; $num
2507   1443 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2508   1446 FD 39         mov c, b ; And place it into C
2509   1448 2A            mov b, [d] ; Lower Word in B
2510   1449             ; --- START FACTORS
2511   1449 D7            push a
2512   144A FD D8         push g
2513   144C 11            mov a, b
2514   144D FD 7A         mov g, c
2515   144F FD 2E 0A 00   mov32 cb, $0000000a
2515   1453 00 00 
2516   1455 FD D8         push g ; save 'g' as the div instruction uses it
2517   1457 AE            div a, b ; /, a: quotient, b: remainder
2518   1458 FD F1         pop g
2519   145A FD 38         mov c, g
2520   145C 27            mov b, a
2521   145D FD F1         pop g
2522   145F E4            pop a
2523   1460             ; --- END FACTORS
2524   1460 E7            pop d
2525   1461 FD 43         mov [d], b
2526   1463 28            mov b, c
2527   1464 FD 44 02 00   mov [d + 2], b
2528   1468             ; i++; 
2529   1468 FA F5 FF      lea d, [bp + -11] ; $i
2530   146B 2A            mov b, [d]
2531   146C 38 00 00      mov c, 0
2532   146F 11            mov a, b
2533   1470 FD 77         inc b
2534   1472 FA F5 FF      lea d, [bp + -11] ; $i
2535   1475 FD 43         mov [d], b
2536   1477 27            mov b, a
2537   1478 0A D4 13      jmp _while30_cond
2538   147B             _while30_exit:
2539   147B             ; while (i > 0) { 
2540   147B             _while37_cond:
2541   147B FA F5 FF      lea d, [bp + -11] ; $i
2542   147E 2A            mov b, [d]
2543   147F 38 00 00      mov c, 0
2544   1482             ; --- START RELATIONAL
2545   1482 D7            push a
2546   1483 11            mov a, b
2547   1484 FD 2E 00 00   mov32 cb, $00000000
2547   1488 00 00 
2548   148A B0            cmp a, b
2549   148B FD 7F         sgt ; >
2550   148D E4            pop a
2551   148E             ; --- END RELATIONAL
2552   148E C0 00 00      cmp b, 0
2553   1491 C6 C3 14      je _while37_exit
2554   1494             _while37_block:
2555   1494             ; i--; 
2556   1494 FA F5 FF      lea d, [bp + -11] ; $i
2557   1497 2A            mov b, [d]
2558   1498 38 00 00      mov c, 0
2559   149B 11            mov a, b
2560   149C FD 7D         dec b
2561   149E FA F5 FF      lea d, [bp + -11] ; $i
2562   14A1 FD 43         mov [d], b
2563   14A3 27            mov b, a
2564   14A4             ; putchar(digits[i]); 
2565   14A4             ; --- START FUNCTION CALL
2566   14A4 FA F7 FF      lea d, [bp + -9] ; $digits
2567   14A7 D7            push a
2568   14A8 DA            push d
2569   14A9 FA F5 FF      lea d, [bp + -11] ; $i
2570   14AC 2A            mov b, [d]
2571   14AD 38 00 00      mov c, 0
2572   14B0 E7            pop d
2573   14B1 5A            add d, b
2574   14B2 E4            pop a
2575   14B3 32            mov bl, [d]
2576   14B4 A7 00         mov bh, 0
2577   14B6 38 00 00      mov c, 0
2578   14B9 DD            push bl
2579   14BA 07 C5 14      call putchar
2580   14BD 51 01 00      add sp, 1
2581   14C0             ; --- END FUNCTION CALL
2582   14C0 0A 7B 14      jmp _while37_cond
2583   14C3             _while37_exit:
2584   14C3 F9            leave
2585   14C4 09            ret
2586   14C5             
2587   14C5             putchar:
2588   14C5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2589   14C8             ; --- BEGIN INLINE ASM SEGMENT
2590   14C8 FA 05 00      lea d, [bp + 5] ; $c
2591   14CB 1E            mov al, [d]
2592   14CC 23            mov ah, al
2593   14CD 19 00         mov al, 0
2594   14CF 05 03         syscall sys_io      ; char in AH
2595   14D1             ; --- END INLINE ASM SEGMENT
2596   14D1 F9            leave
2597   14D2 09            ret
2598   14D3             
2599   14D3             print_unsigned_long:
2600   14D3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2601   14D6             ; char digits[10]; 
2602   14D6 52 0A 00      sub sp, 10
2603   14D9             ; int i; 
2604   14D9 52 02 00      sub sp, 2
2605   14DC             ; i = 0; 
2606   14DC FA F5 FF      lea d, [bp + -11] ; $i
2607   14DF DA            push d
2608   14E0 FD 2E 00 00   mov32 cb, $00000000
2608   14E4 00 00 
2609   14E6 E7            pop d
2610   14E7 FD 43         mov [d], b
2611   14E9             ; if(num == 0){ 
2612   14E9             _if38_cond:
2613   14E9 FA 05 00      lea d, [bp + 5] ; $num
2614   14EC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2615   14EF FD 39         mov c, b ; And place it into C
2616   14F1 2A            mov b, [d] ; Lower Word in B
2617   14F2             ; --- START RELATIONAL
2618   14F2 D7            push a
2619   14F3 FD D8         push g
2620   14F5 11            mov a, b
2621   14F6 FD 7A         mov g, c
2622   14F8 FD 2E 00 00   mov32 cb, $00000000
2622   14FC 00 00 
2623   14FE 38 00 00      mov c, 0
2624   1501 FD AF         cmp32 ga, cb
2625   1503 FD 71         seq ; ==
2626   1505 FD F1         pop g
2627   1507 E4            pop a
2628   1508             ; --- END RELATIONAL
2629   1508 C0 00 00      cmp b, 0
2630   150B C6 20 15      je _if38_exit
2631   150E             _if38_TRUE:
2632   150E             ; putchar('0'); 
2633   150E             ; --- START FUNCTION CALL
2634   150E FD 2E 30 00   mov32 cb, $00000030
2634   1512 00 00 
2635   1514 DD            push bl
2636   1515 07 C5 14      call putchar
2637   1518 51 01 00      add sp, 1
2638   151B             ; --- END FUNCTION CALL
2639   151B             ; return; 
2640   151B F9            leave
2641   151C 09            ret
2642   151D 0A 20 15      jmp _if38_exit
2643   1520             _if38_exit:
2644   1520             ; while (num > 0) { 
2645   1520             _while39_cond:
2646   1520 FA 05 00      lea d, [bp + 5] ; $num
2647   1523 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2648   1526 FD 39         mov c, b ; And place it into C
2649   1528 2A            mov b, [d] ; Lower Word in B
2650   1529             ; --- START RELATIONAL
2651   1529 D7            push a
2652   152A FD D8         push g
2653   152C 11            mov a, b
2654   152D FD 7A         mov g, c
2655   152F FD 2E 00 00   mov32 cb, $00000000
2655   1533 00 00 
2656   1535 38 00 00      mov c, 0
2657   1538 FD AF         cmp32 ga, cb
2658   153A FD 81         sgu
2659   153C FD F1         pop g
2660   153E E4            pop a
2661   153F             ; --- END RELATIONAL
2662   153F C0 00 00      cmp b, 0
2663   1542 C6 C7 15      je _while39_exit
2664   1545             _while39_block:
2665   1545             ; digits[i] = '0' + (num % 10); 
2666   1545 FA F7 FF      lea d, [bp + -9] ; $digits
2667   1548 D7            push a
2668   1549 DA            push d
2669   154A FA F5 FF      lea d, [bp + -11] ; $i
2670   154D 2A            mov b, [d]
2671   154E 38 00 00      mov c, 0
2672   1551 E7            pop d
2673   1552 5A            add d, b
2674   1553 E4            pop a
2675   1554 DA            push d
2676   1555 FD 2E 30 00   mov32 cb, $00000030
2676   1559 00 00 
2677   155B             ; --- START TERMS
2678   155B D7            push a
2679   155C 11            mov a, b
2680   155D FA 05 00      lea d, [bp + 5] ; $num
2681   1560 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2682   1563 FD 39         mov c, b ; And place it into C
2683   1565 2A            mov b, [d] ; Lower Word in B
2684   1566             ; --- START FACTORS
2685   1566 D7            push a
2686   1567 FD D8         push g
2687   1569 11            mov a, b
2688   156A FD 7A         mov g, c
2689   156C FD 2E 0A 00   mov32 cb, $0000000a
2689   1570 00 00 
2690   1572 FD D8         push g ; save 'g' as the div instruction uses it
2691   1574 AE            div a, b ; %, a: quotient, b: remainder
2692   1575 11            mov a, b
2693   1576 FD F1         pop g
2694   1578 FD 38         mov c, g
2695   157A 27            mov b, a
2696   157B FD F1         pop g
2697   157D E4            pop a
2698   157E             ; --- END FACTORS
2699   157E FD 22 00 00   mov g, 0
2700   1582 FD 15         add32 cb, ga
2701   1584 E4            pop a
2702   1585             ; --- END TERMS
2703   1585 E7            pop d
2704   1586 FD 3E         mov [d], bl
2705   1588             ; num = num / 10; 
2706   1588 FA 05 00      lea d, [bp + 5] ; $num
2707   158B DA            push d
2708   158C FA 05 00      lea d, [bp + 5] ; $num
2709   158F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2710   1592 FD 39         mov c, b ; And place it into C
2711   1594 2A            mov b, [d] ; Lower Word in B
2712   1595             ; --- START FACTORS
2713   1595 D7            push a
2714   1596 FD D8         push g
2715   1598 11            mov a, b
2716   1599 FD 7A         mov g, c
2717   159B FD 2E 0A 00   mov32 cb, $0000000a
2717   159F 00 00 
2718   15A1 FD D8         push g ; save 'g' as the div instruction uses it
2719   15A3 AE            div a, b ; /, a: quotient, b: remainder
2720   15A4 FD F1         pop g
2721   15A6 FD 38         mov c, g
2722   15A8 27            mov b, a
2723   15A9 FD F1         pop g
2724   15AB E4            pop a
2725   15AC             ; --- END FACTORS
2726   15AC E7            pop d
2727   15AD FD 43         mov [d], b
2728   15AF 28            mov b, c
2729   15B0 FD 44 02 00   mov [d + 2], b
2730   15B4             ; i++; 
2731   15B4 FA F5 FF      lea d, [bp + -11] ; $i
2732   15B7 2A            mov b, [d]
2733   15B8 38 00 00      mov c, 0
2734   15BB 11            mov a, b
2735   15BC FD 77         inc b
2736   15BE FA F5 FF      lea d, [bp + -11] ; $i
2737   15C1 FD 43         mov [d], b
2738   15C3 27            mov b, a
2739   15C4 0A 20 15      jmp _while39_cond
2740   15C7             _while39_exit:
2741   15C7             ; while (i > 0) { 
2742   15C7             _while46_cond:
2743   15C7 FA F5 FF      lea d, [bp + -11] ; $i
2744   15CA 2A            mov b, [d]
2745   15CB 38 00 00      mov c, 0
2746   15CE             ; --- START RELATIONAL
2747   15CE D7            push a
2748   15CF 11            mov a, b
2749   15D0 FD 2E 00 00   mov32 cb, $00000000
2749   15D4 00 00 
2750   15D6 B0            cmp a, b
2751   15D7 FD 7F         sgt ; >
2752   15D9 E4            pop a
2753   15DA             ; --- END RELATIONAL
2754   15DA C0 00 00      cmp b, 0
2755   15DD C6 0F 16      je _while46_exit
2756   15E0             _while46_block:
2757   15E0             ; i--; 
2758   15E0 FA F5 FF      lea d, [bp + -11] ; $i
2759   15E3 2A            mov b, [d]
2760   15E4 38 00 00      mov c, 0
2761   15E7 11            mov a, b
2762   15E8 FD 7D         dec b
2763   15EA FA F5 FF      lea d, [bp + -11] ; $i
2764   15ED FD 43         mov [d], b
2765   15EF 27            mov b, a
2766   15F0             ; putchar(digits[i]); 
2767   15F0             ; --- START FUNCTION CALL
2768   15F0 FA F7 FF      lea d, [bp + -9] ; $digits
2769   15F3 D7            push a
2770   15F4 DA            push d
2771   15F5 FA F5 FF      lea d, [bp + -11] ; $i
2772   15F8 2A            mov b, [d]
2773   15F9 38 00 00      mov c, 0
2774   15FC E7            pop d
2775   15FD 5A            add d, b
2776   15FE E4            pop a
2777   15FF 32            mov bl, [d]
2778   1600 A7 00         mov bh, 0
2779   1602 38 00 00      mov c, 0
2780   1605 DD            push bl
2781   1606 07 C5 14      call putchar
2782   1609 51 01 00      add sp, 1
2783   160C             ; --- END FUNCTION CALL
2784   160C 0A C7 15      jmp _while46_cond
2785   160F             _while46_exit:
2786   160F F9            leave
2787   1610 09            ret
2788   1611             
2789   1611             printx32:
2790   1611 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2791   1614             ; --- BEGIN INLINE ASM SEGMENT
2792   1614 FA 05 00      lea d, [bp + 5] ; $hex
2793   1617 2B 02 00      mov b, [d+2]
2794   161A 07 23 16      call print_u16x_printx32
2795   161D 2A            mov b, [d]
2796   161E 07 23 16      call print_u16x_printx32
2797   1621             ; --- END INLINE ASM SEGMENT
2798   1621             ; return; 
2799   1621 F9            leave
2800   1622 09            ret
2801   1623             ; --- BEGIN INLINE ASM SEGMENT
2802   1623             print_u16x_printx32:
2803   1623 D7            push a
2804   1624 D8            push b
2805   1625 DD            push bl
2806   1626 30            mov bl, bh
2807   1627 07 45 16      call _itoa_printx32        ; convert bh to char in A
2808   162A 2F            mov bl, al        ; save al
2809   162B 19 00         mov al, 0
2810   162D 05 03         syscall sys_io        ; display AH
2811   162F 24            mov ah, bl        ; retrieve al
2812   1630 19 00         mov al, 0
2813   1632 05 03         syscall sys_io        ; display AL
2814   1634 EA            pop bl
2815   1635 07 45 16      call _itoa_printx32        ; convert bh to char in A
2816   1638 2F            mov bl, al        ; save al
2817   1639 19 00         mov al, 0
2818   163B 05 03         syscall sys_io        ; display AH
2819   163D 24            mov ah, bl        ; retrieve al
2820   163E 19 00         mov al, 0
2821   1640 05 03         syscall sys_io        ; display AL
2822   1642 E5            pop b
2823   1643 E4            pop a
2824   1644 09            ret
2825   1645             _itoa_printx32:
2826   1645 DA            push d
2827   1646 D8            push b
2828   1647 A7 00         mov bh, 0
2829   1649 FD A4 04      shr bl, 4  
2830   164C 74            mov d, b
2831   164D 1F 5F 16      mov al, [d + s_hex_digits_printx32]
2832   1650 23            mov ah, al
2833   1651 E5            pop b
2834   1652 D8            push b
2835   1653 A7 00         mov bh, 0
2836   1655 FD 87 0F      and bl, $0F
2837   1658 74            mov d, b
2838   1659 1F 5F 16      mov al, [d + s_hex_digits_printx32]
2839   165C E5            pop b
2840   165D E7            pop d
2841   165E 09            ret
2842   165F 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2842   1663 34 35 36 37 
2842   1667 38 39 41 42 
2842   166B 43 44 45 46 
2843   166F             ; --- END INLINE ASM SEGMENT
2844   166F F9            leave
2845   1670 09            ret
2846   1671             
2847   1671             err:
2848   1671 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2849   1674             ; print(e); 
2850   1674             ; --- START FUNCTION CALL
2851   1674 FA 05 00      lea d, [bp + 5] ; $e
2852   1677 2A            mov b, [d]
2853   1678 38 00 00      mov c, 0
2854   167B FD AB         swp b
2855   167D D8            push b
2856   167E 07 86 16      call print
2857   1681 51 02 00      add sp, 2
2858   1684             ; --- END FUNCTION CALL
2859   1684 F9            leave
2860   1685 09            ret
2861   1686             
2862   1686             print:
2863   1686 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2864   1689             ; --- BEGIN INLINE ASM SEGMENT
2865   1689 FA 05 00      lea d, [bp + 5] ; $s
2866   168C FD 2A         mov d, [d]
2867   168E             _puts_L1_print:
2868   168E 1E            mov al, [d]
2869   168F B9 00         cmp al, 0
2870   1691 C6 9D 16      jz _puts_END_print
2871   1694 23            mov ah, al
2872   1695 19 00         mov al, 0
2873   1697 05 03         syscall sys_io
2874   1699 79            inc d
2875   169A 0A 8E 16      jmp _puts_L1_print
2876   169D             _puts_END_print:
2877   169D             ; --- END INLINE ASM SEGMENT
2878   169D F9            leave
2879   169E 09            ret
2880   169F             
2881   169F             print_signed:
2882   169F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2883   16A2             ; char digits[5]; 
2884   16A2 52 05 00      sub sp, 5
2885   16A5             ; int i = 0; 
2886   16A5 52 02 00      sub sp, 2
2887   16A8             ; --- START LOCAL VAR INITIALIZATION
2888   16A8 FA FA FF      lea d, [bp + -6] ; $i
2889   16AB DA            push d
2890   16AC FD 2E 00 00   mov32 cb, $00000000
2890   16B0 00 00 
2891   16B2 E7            pop d
2892   16B3 FD 43         mov [d], b
2893   16B5             ; --- END LOCAL VAR INITIALIZATION
2894   16B5             ; if (num < 0) { 
2895   16B5             _if47_cond:
2896   16B5 FA 05 00      lea d, [bp + 5] ; $num
2897   16B8 2A            mov b, [d]
2898   16B9 38 00 00      mov c, 0
2899   16BC             ; --- START RELATIONAL
2900   16BC D7            push a
2901   16BD 11            mov a, b
2902   16BE FD 2E 00 00   mov32 cb, $00000000
2902   16C2 00 00 
2903   16C4 B0            cmp a, b
2904   16C5 FD 73         slt ; < (signed)
2905   16C7 E4            pop a
2906   16C8             ; --- END RELATIONAL
2907   16C8 C0 00 00      cmp b, 0
2908   16CB C6 EE 16      je _if47_else
2909   16CE             _if47_TRUE:
2910   16CE             ; putchar('-'); 
2911   16CE             ; --- START FUNCTION CALL
2912   16CE FD 2E 2D 00   mov32 cb, $0000002d
2912   16D2 00 00 
2913   16D4 DD            push bl
2914   16D5 07 C5 14      call putchar
2915   16D8 51 01 00      add sp, 1
2916   16DB             ; --- END FUNCTION CALL
2917   16DB             ; num = -num; 
2918   16DB FA 05 00      lea d, [bp + 5] ; $num
2919   16DE DA            push d
2920   16DF FA 05 00      lea d, [bp + 5] ; $num
2921   16E2 2A            mov b, [d]
2922   16E3 38 00 00      mov c, 0
2923   16E6 FD 97         neg b
2924   16E8 E7            pop d
2925   16E9 FD 43         mov [d], b
2926   16EB 0A 19 17      jmp _if47_exit
2927   16EE             _if47_else:
2928   16EE             ; if (num == 0) { 
2929   16EE             _if48_cond:
2930   16EE FA 05 00      lea d, [bp + 5] ; $num
2931   16F1 2A            mov b, [d]
2932   16F2 38 00 00      mov c, 0
2933   16F5             ; --- START RELATIONAL
2934   16F5 D7            push a
2935   16F6 11            mov a, b
2936   16F7 FD 2E 00 00   mov32 cb, $00000000
2936   16FB 00 00 
2937   16FD B0            cmp a, b
2938   16FE FD 71         seq ; ==
2939   1700 E4            pop a
2940   1701             ; --- END RELATIONAL
2941   1701 C0 00 00      cmp b, 0
2942   1704 C6 19 17      je _if48_exit
2943   1707             _if48_TRUE:
2944   1707             ; putchar('0'); 
2945   1707             ; --- START FUNCTION CALL
2946   1707 FD 2E 30 00   mov32 cb, $00000030
2946   170B 00 00 
2947   170D DD            push bl
2948   170E 07 C5 14      call putchar
2949   1711 51 01 00      add sp, 1
2950   1714             ; --- END FUNCTION CALL
2951   1714             ; return; 
2952   1714 F9            leave
2953   1715 09            ret
2954   1716 0A 19 17      jmp _if48_exit
2955   1719             _if48_exit:
2956   1719             _if47_exit:
2957   1719             ; while (num > 0) { 
2958   1719             _while49_cond:
2959   1719 FA 05 00      lea d, [bp + 5] ; $num
2960   171C 2A            mov b, [d]
2961   171D 38 00 00      mov c, 0
2962   1720             ; --- START RELATIONAL
2963   1720 D7            push a
2964   1721 11            mov a, b
2965   1722 FD 2E 00 00   mov32 cb, $00000000
2965   1726 00 00 
2966   1728 B0            cmp a, b
2967   1729 FD 7F         sgt ; >
2968   172B E4            pop a
2969   172C             ; --- END RELATIONAL
2970   172C C0 00 00      cmp b, 0
2971   172F C6 A6 17      je _while49_exit
2972   1732             _while49_block:
2973   1732             ; digits[i] = '0' + (num % 10); 
2974   1732 FA FC FF      lea d, [bp + -4] ; $digits
2975   1735 D7            push a
2976   1736 DA            push d
2977   1737 FA FA FF      lea d, [bp + -6] ; $i
2978   173A 2A            mov b, [d]
2979   173B 38 00 00      mov c, 0
2980   173E E7            pop d
2981   173F 5A            add d, b
2982   1740 E4            pop a
2983   1741 DA            push d
2984   1742 FD 2E 30 00   mov32 cb, $00000030
2984   1746 00 00 
2985   1748             ; --- START TERMS
2986   1748 D7            push a
2987   1749 11            mov a, b
2988   174A FA 05 00      lea d, [bp + 5] ; $num
2989   174D 2A            mov b, [d]
2990   174E 38 00 00      mov c, 0
2991   1751             ; --- START FACTORS
2992   1751 D7            push a
2993   1752 FD D8         push g
2994   1754 11            mov a, b
2995   1755 FD 7A         mov g, c
2996   1757 FD 2E 0A 00   mov32 cb, $0000000a
2996   175B 00 00 
2997   175D FD D8         push g ; save 'g' as the div instruction uses it
2998   175F AE            div a, b ; %, a: quotient, b: remainder
2999   1760 11            mov a, b
3000   1761 FD F1         pop g
3001   1763 FD 38         mov c, g
3002   1765 27            mov b, a
3003   1766 FD F1         pop g
3004   1768 E4            pop a
3005   1769             ; --- END FACTORS
3006   1769 56            add b, a
3007   176A E4            pop a
3008   176B             ; --- END TERMS
3009   176B E7            pop d
3010   176C FD 3E         mov [d], bl
3011   176E             ; num = num / 10; 
3012   176E FA 05 00      lea d, [bp + 5] ; $num
3013   1771 DA            push d
3014   1772 FA 05 00      lea d, [bp + 5] ; $num
3015   1775 2A            mov b, [d]
3016   1776 38 00 00      mov c, 0
3017   1779             ; --- START FACTORS
3018   1779 D7            push a
3019   177A FD D8         push g
3020   177C 11            mov a, b
3021   177D FD 7A         mov g, c
3022   177F FD 2E 0A 00   mov32 cb, $0000000a
3022   1783 00 00 
3023   1785 FD D8         push g ; save 'g' as the div instruction uses it
3024   1787 AE            div a, b ; /, a: quotient, b: remainder
3025   1788 FD F1         pop g
3026   178A FD 38         mov c, g
3027   178C 27            mov b, a
3028   178D FD F1         pop g
3029   178F E4            pop a
3030   1790             ; --- END FACTORS
3031   1790 E7            pop d
3032   1791 FD 43         mov [d], b
3033   1793             ; i++; 
3034   1793 FA FA FF      lea d, [bp + -6] ; $i
3035   1796 2A            mov b, [d]
3036   1797 38 00 00      mov c, 0
3037   179A 11            mov a, b
3038   179B FD 77         inc b
3039   179D FA FA FF      lea d, [bp + -6] ; $i
3040   17A0 FD 43         mov [d], b
3041   17A2 27            mov b, a
3042   17A3 0A 19 17      jmp _while49_cond
3043   17A6             _while49_exit:
3044   17A6             ; while (i > 0) { 
3045   17A6             _while56_cond:
3046   17A6 FA FA FF      lea d, [bp + -6] ; $i
3047   17A9 2A            mov b, [d]
3048   17AA 38 00 00      mov c, 0
3049   17AD             ; --- START RELATIONAL
3050   17AD D7            push a
3051   17AE 11            mov a, b
3052   17AF FD 2E 00 00   mov32 cb, $00000000
3052   17B3 00 00 
3053   17B5 B0            cmp a, b
3054   17B6 FD 7F         sgt ; >
3055   17B8 E4            pop a
3056   17B9             ; --- END RELATIONAL
3057   17B9 C0 00 00      cmp b, 0
3058   17BC C6 EE 17      je _while56_exit
3059   17BF             _while56_block:
3060   17BF             ; i--; 
3061   17BF FA FA FF      lea d, [bp + -6] ; $i
3062   17C2 2A            mov b, [d]
3063   17C3 38 00 00      mov c, 0
3064   17C6 11            mov a, b
3065   17C7 FD 7D         dec b
3066   17C9 FA FA FF      lea d, [bp + -6] ; $i
3067   17CC FD 43         mov [d], b
3068   17CE 27            mov b, a
3069   17CF             ; putchar(digits[i]); 
3070   17CF             ; --- START FUNCTION CALL
3071   17CF FA FC FF      lea d, [bp + -4] ; $digits
3072   17D2 D7            push a
3073   17D3 DA            push d
3074   17D4 FA FA FF      lea d, [bp + -6] ; $i
3075   17D7 2A            mov b, [d]
3076   17D8 38 00 00      mov c, 0
3077   17DB E7            pop d
3078   17DC 5A            add d, b
3079   17DD E4            pop a
3080   17DE 32            mov bl, [d]
3081   17DF A7 00         mov bh, 0
3082   17E1 38 00 00      mov c, 0
3083   17E4 DD            push bl
3084   17E5 07 C5 14      call putchar
3085   17E8 51 01 00      add sp, 1
3086   17EB             ; --- END FUNCTION CALL
3087   17EB 0A A6 17      jmp _while56_cond
3088   17EE             _while56_exit:
3089   17EE F9            leave
3090   17EF 09            ret
3091   17F0             
3092   17F0             print_unsigned:
3093   17F0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3094   17F3             ; char digits[5]; 
3095   17F3 52 05 00      sub sp, 5
3096   17F6             ; int i; 
3097   17F6 52 02 00      sub sp, 2
3098   17F9             ; i = 0; 
3099   17F9 FA FA FF      lea d, [bp + -6] ; $i
3100   17FC DA            push d
3101   17FD FD 2E 00 00   mov32 cb, $00000000
3101   1801 00 00 
3102   1803 E7            pop d
3103   1804 FD 43         mov [d], b
3104   1806             ; if(num == 0){ 
3105   1806             _if57_cond:
3106   1806 FA 05 00      lea d, [bp + 5] ; $num
3107   1809 2A            mov b, [d]
3108   180A 38 00 00      mov c, 0
3109   180D             ; --- START RELATIONAL
3110   180D D7            push a
3111   180E 11            mov a, b
3112   180F FD 2E 00 00   mov32 cb, $00000000
3112   1813 00 00 
3113   1815 B0            cmp a, b
3114   1816 FD 71         seq ; ==
3115   1818 E4            pop a
3116   1819             ; --- END RELATIONAL
3117   1819 C0 00 00      cmp b, 0
3118   181C C6 31 18      je _if57_exit
3119   181F             _if57_TRUE:
3120   181F             ; putchar('0'); 
3121   181F             ; --- START FUNCTION CALL
3122   181F FD 2E 30 00   mov32 cb, $00000030
3122   1823 00 00 
3123   1825 DD            push bl
3124   1826 07 C5 14      call putchar
3125   1829 51 01 00      add sp, 1
3126   182C             ; --- END FUNCTION CALL
3127   182C             ; return; 
3128   182C F9            leave
3129   182D 09            ret
3130   182E 0A 31 18      jmp _if57_exit
3131   1831             _if57_exit:
3132   1831             ; while (num > 0) { 
3133   1831             _while58_cond:
3134   1831 FA 05 00      lea d, [bp + 5] ; $num
3135   1834 2A            mov b, [d]
3136   1835 38 00 00      mov c, 0
3137   1838             ; --- START RELATIONAL
3138   1838 D7            push a
3139   1839 11            mov a, b
3140   183A FD 2E 00 00   mov32 cb, $00000000
3140   183E 00 00 
3141   1840 B0            cmp a, b
3142   1841 FD 81         sgu ; > (unsigned)
3143   1843 E4            pop a
3144   1844             ; --- END RELATIONAL
3145   1844 C0 00 00      cmp b, 0
3146   1847 C6 BE 18      je _while58_exit
3147   184A             _while58_block:
3148   184A             ; digits[i] = '0' + (num % 10); 
3149   184A FA FC FF      lea d, [bp + -4] ; $digits
3150   184D D7            push a
3151   184E DA            push d
3152   184F FA FA FF      lea d, [bp + -6] ; $i
3153   1852 2A            mov b, [d]
3154   1853 38 00 00      mov c, 0
3155   1856 E7            pop d
3156   1857 5A            add d, b
3157   1858 E4            pop a
3158   1859 DA            push d
3159   185A FD 2E 30 00   mov32 cb, $00000030
3159   185E 00 00 
3160   1860             ; --- START TERMS
3161   1860 D7            push a
3162   1861 11            mov a, b
3163   1862 FA 05 00      lea d, [bp + 5] ; $num
3164   1865 2A            mov b, [d]
3165   1866 38 00 00      mov c, 0
3166   1869             ; --- START FACTORS
3167   1869 D7            push a
3168   186A FD D8         push g
3169   186C 11            mov a, b
3170   186D FD 7A         mov g, c
3171   186F FD 2E 0A 00   mov32 cb, $0000000a
3171   1873 00 00 
3172   1875 FD D8         push g ; save 'g' as the div instruction uses it
3173   1877 AE            div a, b ; %, a: quotient, b: remainder
3174   1878 11            mov a, b
3175   1879 FD F1         pop g
3176   187B FD 38         mov c, g
3177   187D 27            mov b, a
3178   187E FD F1         pop g
3179   1880 E4            pop a
3180   1881             ; --- END FACTORS
3181   1881 56            add b, a
3182   1882 E4            pop a
3183   1883             ; --- END TERMS
3184   1883 E7            pop d
3185   1884 FD 3E         mov [d], bl
3186   1886             ; num = num / 10; 
3187   1886 FA 05 00      lea d, [bp + 5] ; $num
3188   1889 DA            push d
3189   188A FA 05 00      lea d, [bp + 5] ; $num
3190   188D 2A            mov b, [d]
3191   188E 38 00 00      mov c, 0
3192   1891             ; --- START FACTORS
3193   1891 D7            push a
3194   1892 FD D8         push g
3195   1894 11            mov a, b
3196   1895 FD 7A         mov g, c
3197   1897 FD 2E 0A 00   mov32 cb, $0000000a
3197   189B 00 00 
3198   189D FD D8         push g ; save 'g' as the div instruction uses it
3199   189F AE            div a, b ; /, a: quotient, b: remainder
3200   18A0 FD F1         pop g
3201   18A2 FD 38         mov c, g
3202   18A4 27            mov b, a
3203   18A5 FD F1         pop g
3204   18A7 E4            pop a
3205   18A8             ; --- END FACTORS
3206   18A8 E7            pop d
3207   18A9 FD 43         mov [d], b
3208   18AB             ; i++; 
3209   18AB FA FA FF      lea d, [bp + -6] ; $i
3210   18AE 2A            mov b, [d]
3211   18AF 38 00 00      mov c, 0
3212   18B2 11            mov a, b
3213   18B3 FD 77         inc b
3214   18B5 FA FA FF      lea d, [bp + -6] ; $i
3215   18B8 FD 43         mov [d], b
3216   18BA 27            mov b, a
3217   18BB 0A 31 18      jmp _while58_cond
3218   18BE             _while58_exit:
3219   18BE             ; while (i > 0) { 
3220   18BE             _while65_cond:
3221   18BE FA FA FF      lea d, [bp + -6] ; $i
3222   18C1 2A            mov b, [d]
3223   18C2 38 00 00      mov c, 0
3224   18C5             ; --- START RELATIONAL
3225   18C5 D7            push a
3226   18C6 11            mov a, b
3227   18C7 FD 2E 00 00   mov32 cb, $00000000
3227   18CB 00 00 
3228   18CD B0            cmp a, b
3229   18CE FD 7F         sgt ; >
3230   18D0 E4            pop a
3231   18D1             ; --- END RELATIONAL
3232   18D1 C0 00 00      cmp b, 0
3233   18D4 C6 06 19      je _while65_exit
3234   18D7             _while65_block:
3235   18D7             ; i--; 
3236   18D7 FA FA FF      lea d, [bp + -6] ; $i
3237   18DA 2A            mov b, [d]
3238   18DB 38 00 00      mov c, 0
3239   18DE 11            mov a, b
3240   18DF FD 7D         dec b
3241   18E1 FA FA FF      lea d, [bp + -6] ; $i
3242   18E4 FD 43         mov [d], b
3243   18E6 27            mov b, a
3244   18E7             ; putchar(digits[i]); 
3245   18E7             ; --- START FUNCTION CALL
3246   18E7 FA FC FF      lea d, [bp + -4] ; $digits
3247   18EA D7            push a
3248   18EB DA            push d
3249   18EC FA FA FF      lea d, [bp + -6] ; $i
3250   18EF 2A            mov b, [d]
3251   18F0 38 00 00      mov c, 0
3252   18F3 E7            pop d
3253   18F4 5A            add d, b
3254   18F5 E4            pop a
3255   18F6 32            mov bl, [d]
3256   18F7 A7 00         mov bh, 0
3257   18F9 38 00 00      mov c, 0
3258   18FC DD            push bl
3259   18FD 07 C5 14      call putchar
3260   1900 51 01 00      add sp, 1
3261   1903             ; --- END FUNCTION CALL
3262   1903 0A BE 18      jmp _while65_cond
3263   1906             _while65_exit:
3264   1906 F9            leave
3265   1907 09            ret
3266   1908             
3267   1908             printx16:
3268   1908 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3269   190B             ; --- BEGIN INLINE ASM SEGMENT
3270   190B FA 05 00      lea d, [bp + 5] ; $hex
3271   190E 2A            mov b, [d]
3272   190F             print_u16x_printx16:
3273   190F DD            push bl
3274   1910 30            mov bl, bh
3275   1911 07 2E 19      call _itoa_printx16        ; convert bh to char in A
3276   1914 2F            mov bl, al        ; save al
3277   1915 19 00         mov al, 0
3278   1917 05 03         syscall sys_io        ; display AH
3279   1919 24            mov ah, bl        ; retrieve al
3280   191A 19 00         mov al, 0
3281   191C 05 03         syscall sys_io        ; display AL
3282   191E EA            pop bl
3283   191F 07 2E 19      call _itoa_printx16        ; convert bh to char in A
3284   1922 2F            mov bl, al        ; save al
3285   1923 19 00         mov al, 0
3286   1925 05 03         syscall sys_io        ; display AH
3287   1927 24            mov ah, bl        ; retrieve al
3288   1928 19 00         mov al, 0
3289   192A 05 03         syscall sys_io        ; display AL
3290   192C             ; --- END INLINE ASM SEGMENT
3291   192C             ; return; 
3292   192C F9            leave
3293   192D 09            ret
3294   192E             ; --- BEGIN INLINE ASM SEGMENT
3295   192E             _itoa_printx16:
3296   192E DA            push d
3297   192F D8            push b
3298   1930 A7 00         mov bh, 0
3299   1932 FD A4 04      shr bl, 4  
3300   1935 74            mov d, b
3301   1936 1F 48 19      mov al, [d + s_hex_digits_printx16]
3302   1939 23            mov ah, al
3303   193A E5            pop b
3304   193B D8            push b
3305   193C A7 00         mov bh, 0
3306   193E FD 87 0F      and bl, $0F
3307   1941 74            mov d, b
3308   1942 1F 48 19      mov al, [d + s_hex_digits_printx16]
3309   1945 E5            pop b
3310   1946 E7            pop d
3311   1947 09            ret
3312   1948 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
3312   194C 34 35 36 37 
3312   1950 38 39 41 42 
3312   1954 43 44 45 46 
3313   1958             ; --- END INLINE ASM SEGMENT
3314   1958 F9            leave
3315   1959 09            ret
3316   195A             
3317   195A             gets:
3318   195A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3319   195D             ; --- BEGIN INLINE ASM SEGMENT
3320   195D FA 05 00      lea d, [bp + 5] ; $s
3321   1960 15            mov a, [d]
3322   1961 3C            mov d, a
3323   1962 07 77 19      call _gets_gets
3324   1965             ; --- END INLINE ASM SEGMENT
3325   1965             ; return strlen(s); 
3326   1965             ; --- START FUNCTION CALL
3327   1965 FA 05 00      lea d, [bp + 5] ; $s
3328   1968 2A            mov b, [d]
3329   1969 38 00 00      mov c, 0
3330   196C FD AB         swp b
3331   196E D8            push b
3332   196F 07 18 1A      call strlen
3333   1972 51 02 00      add sp, 2
3334   1975             ; --- END FUNCTION CALL
3335   1975 F9            leave
3336   1976 09            ret
3337   1977             ; --- BEGIN INLINE ASM SEGMENT
3338   1977             _gets_gets:
3339   1977 D7            push a
3340   1978 DA            push d
3341   1979             _gets_loop_gets:
3342   1979 19 01         mov al, 1
3343   197B 05 03         syscall sys_io      ; receive in AH
3344   197D B9 00         cmp al, 0        ; check error code (AL)
3345   197F C6 79 19      je _gets_loop_gets      ; if no char received, retry
3346   1982 76 1B         cmp ah, 27
3347   1984 C6 A5 19      je _gets_ansi_esc_gets
3348   1987 76 0A         cmp ah, $0A        ; LF
3349   1989 C6 10 1A      je _gets_end_gets
3350   198C 76 0D         cmp ah, $0D        ; CR
3351   198E C6 10 1A      je _gets_end_gets
3352   1991 76 5C         cmp ah, $5C        ; '\\'
3353   1993 C6 D1 19      je _gets_escape_gets
3354   1996 76 08         cmp ah, $08      ; check for backspace
3355   1998 C6 A1 19      je _gets_backspace_gets
3356   199B 1A            mov al, ah
3357   199C 3E            mov [d], al
3358   199D 79            inc d
3359   199E 0A 79 19      jmp _gets_loop_gets
3360   19A1             _gets_backspace_gets:
3361   19A1 7F            dec d
3362   19A2 0A 79 19      jmp _gets_loop_gets
3363   19A5             _gets_ansi_esc_gets:
3364   19A5 19 01         mov al, 1
3365   19A7 05 03         syscall sys_io        ; receive in AH without echo
3366   19A9 B9 00         cmp al, 0          ; check error code (AL)
3367   19AB C6 A5 19      je _gets_ansi_esc_gets    ; if no char received, retry
3368   19AE 76 5B         cmp ah, '['
3369   19B0 C7 79 19      jne _gets_loop_gets
3370   19B3             _gets_ansi_esc_2_gets:
3371   19B3 19 01         mov al, 1
3372   19B5 05 03         syscall sys_io          ; receive in AH without echo
3373   19B7 B9 00         cmp al, 0            ; check error code (AL)
3374   19B9 C6 B3 19      je _gets_ansi_esc_2_gets  ; if no char received, retry
3375   19BC 76 44         cmp ah, 'D'
3376   19BE C6 C9 19      je _gets_left_arrow_gets
3377   19C1 76 43         cmp ah, 'C'
3378   19C3 C6 CD 19      je _gets_right_arrow_gets
3379   19C6 0A 79 19      jmp _gets_loop_gets
3380   19C9             _gets_left_arrow_gets:
3381   19C9 7F            dec d
3382   19CA 0A 79 19      jmp _gets_loop_gets
3383   19CD             _gets_right_arrow_gets:
3384   19CD 79            inc d
3385   19CE 0A 79 19      jmp _gets_loop_gets
3386   19D1             _gets_escape_gets:
3387   19D1 19 01         mov al, 1
3388   19D3 05 03         syscall sys_io      ; receive in AH
3389   19D5 B9 00         cmp al, 0        ; check error code (AL)
3390   19D7 C6 D1 19      je _gets_escape_gets      ; if no char received, retry
3391   19DA 76 6E         cmp ah, 'n'
3392   19DC C6 FB 19      je _gets_LF_gets
3393   19DF 76 72         cmp ah, 'r'
3394   19E1 C6 02 1A      je _gets_CR_gets
3395   19E4 76 30         cmp ah, '0'
3396   19E6 C6 09 1A      je _gets_NULL_gets
3397   19E9 76 5C         cmp ah, $5C  
3398   19EB C6 F4 19      je _gets_slash_gets
3399   19EE 1A            mov al, ah        ; if not a known escape, it is just a normal letter
3400   19EF 3E            mov [d], al
3401   19F0 79            inc d
3402   19F1 0A 79 19      jmp _gets_loop_gets
3403   19F4             _gets_slash_gets:
3404   19F4 19 5C         mov al, $5C
3405   19F6 3E            mov [d], al
3406   19F7 79            inc d
3407   19F8 0A 79 19      jmp _gets_loop_gets
3408   19FB             _gets_LF_gets:
3409   19FB 19 0A         mov al, $0A
3410   19FD 3E            mov [d], al
3411   19FE 79            inc d
3412   19FF 0A 79 19      jmp _gets_loop_gets
3413   1A02             _gets_CR_gets:
3414   1A02 19 0D         mov al, $0D
3415   1A04 3E            mov [d], al
3416   1A05 79            inc d
3417   1A06 0A 79 19      jmp _gets_loop_gets
3418   1A09             _gets_NULL_gets:
3419   1A09 19 00         mov al, $00
3420   1A0B 3E            mov [d], al
3421   1A0C 79            inc d
3422   1A0D 0A 79 19      jmp _gets_loop_gets
3423   1A10             _gets_end_gets:
3424   1A10 19 00         mov al, 0
3425   1A12 3E            mov [d], al        ; terminate string
3426   1A13 E7            pop d
3427   1A14 E4            pop a
3428   1A15 09            ret
3429   1A16             ; --- END INLINE ASM SEGMENT
3430   1A16 F9            leave
3431   1A17 09            ret
3432   1A18             
3433   1A18             strlen:
3434   1A18 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3435   1A1B             ; int length; 
3436   1A1B 52 02 00      sub sp, 2
3437   1A1E             ; length = 0; 
3438   1A1E FA FF FF      lea d, [bp + -1] ; $length
3439   1A21 DA            push d
3440   1A22 FD 2E 00 00   mov32 cb, $00000000
3440   1A26 00 00 
3441   1A28 E7            pop d
3442   1A29 FD 43         mov [d], b
3443   1A2B             ; while (str[length] != 0) { 
3444   1A2B             _while66_cond:
3445   1A2B FA 05 00      lea d, [bp + 5] ; $str
3446   1A2E FD 2A         mov d, [d]
3447   1A30 D7            push a
3448   1A31 DA            push d
3449   1A32 FA FF FF      lea d, [bp + -1] ; $length
3450   1A35 2A            mov b, [d]
3451   1A36 38 00 00      mov c, 0
3452   1A39 E7            pop d
3453   1A3A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3454   1A3E E4            pop a
3455   1A3F 32            mov bl, [d]
3456   1A40 A7 00         mov bh, 0
3457   1A42 38 00 00      mov c, 0
3458   1A45             ; --- START RELATIONAL
3459   1A45 D7            push a
3460   1A46 11            mov a, b
3461   1A47 FD 2E 00 00   mov32 cb, $00000000
3461   1A4B 00 00 
3462   1A4D B0            cmp a, b
3463   1A4E FD 72         sneq ; !=
3464   1A50 E4            pop a
3465   1A51             ; --- END RELATIONAL
3466   1A51 C0 00 00      cmp b, 0
3467   1A54 C6 6A 1A      je _while66_exit
3468   1A57             _while66_block:
3469   1A57             ; length++; 
3470   1A57 FA FF FF      lea d, [bp + -1] ; $length
3471   1A5A 2A            mov b, [d]
3472   1A5B 38 00 00      mov c, 0
3473   1A5E 11            mov a, b
3474   1A5F FD 77         inc b
3475   1A61 FA FF FF      lea d, [bp + -1] ; $length
3476   1A64 FD 43         mov [d], b
3477   1A66 27            mov b, a
3478   1A67 0A 2B 1A      jmp _while66_cond
3479   1A6A             _while66_exit:
3480   1A6A             ; return length; 
3481   1A6A FA FF FF      lea d, [bp + -1] ; $length
3482   1A6D 2A            mov b, [d]
3483   1A6E 38 00 00      mov c, 0
3484   1A71 F9            leave
3485   1A72 09            ret
3486   1A73             ; --- END TEXT SEGMENT
3487   1A73             
3488   1A73             ; --- BEGIN DATA SEGMENT
3489   1A73 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
3489   1A77 45 46 47 48 
3489   1A7B 49 4A 4B 4C 
3489   1A7F 4D 4E 4F 50 
3489   1A83 51 52 53 54 
3489   1A87 55 56 57 58 
3489   1A8B 59 5A 61 62 
3489   1A8F 63 64 65 66 
3489   1A93 67 68 69 6A 
3489   1A97 6B 6C 6D 6E 
3489   1A9B 6F 70 71 72 
3489   1A9F 73 74 75 76 
3489   1AA3 77 78 79 7A 
3489   1AA7 30 31 32 33 
3489   1AAB 34 35 36 37 
3489   1AAF 38 39 2B 2F 
3489   1AB3 00 
3490   1AB4 73 1A       _base64_table: .dw _base64_table_data
3491   1AB6 0A 45 6E 74 _s0: .db "\nEnter a base64 encoded string to decode: ", 0
3491   1ABA 65 72 20 61 
3491   1ABE 20 62 61 73 
3491   1AC2 65 36 34 20 
3491   1AC6 65 6E 63 6F 
3491   1ACA 64 65 64 20 
3491   1ACE 73 74 72 69 
3491   1AD2 6E 67 20 74 
3491   1AD6 6F 20 64 65 
3491   1ADA 63 6F 64 65 
3491   1ADE 3A 20 00 
3492   1AE1 0A 45 6E 63 _s1: .db "\nEncoded string: %s\n", 0
3492   1AE5 6F 64 65 64 
3492   1AE9 20 73 74 72 
3492   1AED 69 6E 67 3A 
3492   1AF1 20 25 73 0A 
3492   1AF5 00 
3493   1AF6 0A 44 65 63 _s2: .db "\nDecoded string: %s\n", 0
3493   1AFA 6F 64 65 64 
3493   1AFE 20 73 74 72 
3493   1B02 69 6E 67 3A 
3493   1B06 20 25 73 0A 
3493   1B0A 00 
3494   1B0B 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
3494   1B0F 70 65 63 74 
3494   1B13 65 64 20 66 
3494   1B17 6F 72 6D 61 
3494   1B1B 74 20 69 6E 
3494   1B1F 20 70 72 69 
3494   1B23 6E 74 66 2E 
3494   1B27 00 
3495   1B28 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
3495   1B2C 72 3A 20 55 
3495   1B30 6E 6B 6E 6F 
3495   1B34 77 6E 20 61 
3495   1B38 72 67 75 6D 
3495   1B3C 65 6E 74 20 
3495   1B40 74 79 70 65 
3495   1B44 2E 0A 00 
3496   1B47             
3497   1B47 49 1B       _heap_top: .dw _heap
3498   1B49 00          _heap: .db 0
3499   1B4A             ; --- END DATA SEGMENT
3500   1B4A             
3501   1B4A             .end
tasm: Number of errors = 0
