0001   0000             ; --- FILENAME: ctestsuite/testsuite2.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             sys_break        .EQU  $0000
0002+  0000             sys_rtc          .EQU  $0001
0003+  0000             sys_ide          .EQU  $0002
0004+  0000             sys_io           .EQU  $0003
0005+  0000             sys_filesystem   .EQU  $0004
0006+  0000             sys_create_proc  .EQU  $0005
0007+  0000             sys_list_proc    .EQU  $0006
0008+  0000             sys_datetime     .EQU  $0007
0009+  0000             sys_reboot       .EQU  $0008
0010+  0000             sys_pause_proc   .EQU  $0009
0011+  0000             sys_resume_proc  .EQU  $000a
0012+  0000             sys_terminate_proc .EQU  $000b
0013+  0000             sys_system       .EQU  $000c
0014+  0000             sys_fdc          .EQU  $000d
0015+  0000             text_org         .EQU  $0400
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0000             
0005   0000             ; --- BEGIN TEXT SEGMENT
0006   0400             .org text_org
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; int pass[10]; 
0011   0408 52 14 00      sub sp, 20
0012   040B             ; int i; 
0013   040B 52 02 00      sub sp, 2
0014   040E             ; int nbr_tests = 10; 
0015   040E 52 02 00      sub sp, 2
0016   0411             ; --- START LOCAL VAR INITIALIZATION
0017   0411 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0018   0414 DA            push d
0019   0415 FD 2E 0A 00   mov32 cb, $0000000a
0019   0419 00 00 
0020   041B E7            pop d
0021   041C FD 43         mov [d], b
0022   041E             ; --- END LOCAL VAR INITIALIZATION
0023   041E             ; for(i = 0; i < nbr_tests; i++){ 
0024   041E             _for1_init:
0025   041E FA EB FF      lea d, [bp + -21] ; $i
0026   0421 DA            push d
0027   0422 FD 2E 00 00   mov32 cb, $00000000
0027   0426 00 00 
0028   0428 E7            pop d
0029   0429 FD 43         mov [d], b
0030   042B             _for1_cond:
0031   042B FA EB FF      lea d, [bp + -21] ; $i
0032   042E 2A            mov b, [d]
0033   042F 38 00 00      mov c, 0
0034   0432             ; --- START RELATIONAL
0035   0432 D7            push a
0036   0433 11            mov a, b
0037   0434 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0038   0437 2A            mov b, [d]
0039   0438 38 00 00      mov c, 0
0040   043B B0            cmp a, b
0041   043C FD 73         slt ; < (signed)
0042   043E E4            pop a
0043   043F             ; --- END RELATIONAL
0044   043F C0 00 00      cmp b, 0
0045   0442 C6 74 04      je _for1_exit
0046   0445             _for1_block:
0047   0445             ; pass[i] = -1; 
0048   0445 FA ED FF      lea d, [bp + -19] ; $pass
0049   0448 D7            push a
0050   0449 DA            push d
0051   044A FA EB FF      lea d, [bp + -21] ; $i
0052   044D 2A            mov b, [d]
0053   044E 38 00 00      mov c, 0
0054   0451 E7            pop d
0055   0452 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0056   0456 E4            pop a
0057   0457 DA            push d
0058   0458 FD 2E FF FF   mov32 cb, $ffffffff
0058   045C FF FF 
0059   045E E7            pop d
0060   045F FD 43         mov [d], b
0061   0461             _for1_update:
0062   0461 FA EB FF      lea d, [bp + -21] ; $i
0063   0464 2A            mov b, [d]
0064   0465 38 00 00      mov c, 0
0065   0468 11            mov a, b
0066   0469 FD 77         inc b
0067   046B FA EB FF      lea d, [bp + -21] ; $i
0068   046E FD 43         mov [d], b
0069   0470 27            mov b, a
0070   0471 0A 2B 04      jmp _for1_cond
0071   0474             _for1_exit:
0072   0474             ; pass[0] = test0(); 
0073   0474 FA ED FF      lea d, [bp + -19] ; $pass
0074   0477 D7            push a
0075   0478 DA            push d
0076   0479 FD 2E 00 00   mov32 cb, $00000000
0076   047D 00 00 
0077   047F E7            pop d
0078   0480 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0079   0484 E4            pop a
0080   0485 DA            push d
0081   0486             ; --- START FUNCTION CALL
0082   0486 07 59 05      call test0
0083   0489 E7            pop d
0084   048A FD 43         mov [d], b
0085   048C             ; pass[1] = test1(); 
0086   048C FA ED FF      lea d, [bp + -19] ; $pass
0087   048F D7            push a
0088   0490 DA            push d
0089   0491 FD 2E 01 00   mov32 cb, $00000001
0089   0495 00 00 
0090   0497 E7            pop d
0091   0498 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0092   049C E4            pop a
0093   049D DA            push d
0094   049E             ; --- START FUNCTION CALL
0095   049E 07 55 09      call test1
0096   04A1 E7            pop d
0097   04A2 FD 43         mov [d], b
0098   04A4             ; pass[2] = test2(); 
0099   04A4 FA ED FF      lea d, [bp + -19] ; $pass
0100   04A7 D7            push a
0101   04A8 DA            push d
0102   04A9 FD 2E 02 00   mov32 cb, $00000002
0102   04AD 00 00 
0103   04AF E7            pop d
0104   04B0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0105   04B4 E4            pop a
0106   04B5 DA            push d
0107   04B6             ; --- START FUNCTION CALL
0108   04B6 07 06 0B      call test2
0109   04B9 E7            pop d
0110   04BA FD 43         mov [d], b
0111   04BC             ; pass[3] = test3(st1); 
0112   04BC FA ED FF      lea d, [bp + -19] ; $pass
0113   04BF D7            push a
0114   04C0 DA            push d
0115   04C1 FD 2E 03 00   mov32 cb, $00000003
0115   04C5 00 00 
0116   04C7 E7            pop d
0117   04C8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0118   04CC E4            pop a
0119   04CD DA            push d
0120   04CE             ; --- START FUNCTION CALL
0121   04CE 3B E3 18      mov d, _st1_data ; $st1
0122   04D1 2D            mov b, d
0123   04D2 38 00 00      mov c, 0
0124   04D5 52 0D 00      sub sp, 13
0125   04D8 FD 28         mov si, b
0126   04DA FD FA 01 00   lea d, [sp + 1]
0127   04DE FD 50         mov di, d
0128   04E0 38 0D 00      mov c, 13
0129   04E3 FD F5         rep movsb
0130   04E5 07 96 0D      call test3
0131   04E8 51 0D 00      add sp, 13
0132   04EB             ; --- END FUNCTION CALL
0133   04EB E7            pop d
0134   04EC FD 43         mov [d], b
0135   04EE             ; for(i = 0; i < nbr_tests; i++){ 
0136   04EE             _for2_init:
0137   04EE FA EB FF      lea d, [bp + -21] ; $i
0138   04F1 DA            push d
0139   04F2 FD 2E 00 00   mov32 cb, $00000000
0139   04F6 00 00 
0140   04F8 E7            pop d
0141   04F9 FD 43         mov [d], b
0142   04FB             _for2_cond:
0143   04FB FA EB FF      lea d, [bp + -21] ; $i
0144   04FE 2A            mov b, [d]
0145   04FF 38 00 00      mov c, 0
0146   0502             ; --- START RELATIONAL
0147   0502 D7            push a
0148   0503 11            mov a, b
0149   0504 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0150   0507 2A            mov b, [d]
0151   0508 38 00 00      mov c, 0
0152   050B B0            cmp a, b
0153   050C FD 73         slt ; < (signed)
0154   050E E4            pop a
0155   050F             ; --- END RELATIONAL
0156   050F C0 00 00      cmp b, 0
0157   0512 C6 57 05      je _for2_exit
0158   0515             _for2_block:
0159   0515             ; printf("Test %d, Result: %d\n", i, pass[i]); 
0160   0515             ; --- START FUNCTION CALL
0161   0515 FA ED FF      lea d, [bp + -19] ; $pass
0162   0518 D7            push a
0163   0519 DA            push d
0164   051A FA EB FF      lea d, [bp + -21] ; $i
0165   051D 2A            mov b, [d]
0166   051E 38 00 00      mov c, 0
0167   0521 E7            pop d
0168   0522 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0169   0526 E4            pop a
0170   0527 2A            mov b, [d]
0171   0528 38 00 00      mov c, 0
0172   052B FD AB         swp b
0173   052D D8            push b
0174   052E FA EB FF      lea d, [bp + -21] ; $i
0175   0531 2A            mov b, [d]
0176   0532 38 00 00      mov c, 0
0177   0535 FD AB         swp b
0178   0537 D8            push b
0179   0538 26 F0 18      mov b, _s0 ; "Test %d, Result: %d\n"
0180   053B FD AB         swp b
0181   053D D8            push b
0182   053E 07 CF 0F      call printf
0183   0541 51 06 00      add sp, 6
0184   0544             ; --- END FUNCTION CALL
0185   0544             _for2_update:
0186   0544 FA EB FF      lea d, [bp + -21] ; $i
0187   0547 2A            mov b, [d]
0188   0548 38 00 00      mov c, 0
0189   054B 11            mov a, b
0190   054C FD 77         inc b
0191   054E FA EB FF      lea d, [bp + -21] ; $i
0192   0551 FD 43         mov [d], b
0193   0553 27            mov b, a
0194   0554 0A FB 04      jmp _for2_cond
0195   0557             _for2_exit:
0196   0557 05 0B         syscall sys_terminate_proc
0197   0559             
0198   0559             test0:
0199   0559 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0200   055C             ; int result; 
0201   055C 52 02 00      sub sp, 2
0202   055F             ; int pass = 1; 
0203   055F 52 02 00      sub sp, 2
0204   0562             ; --- START LOCAL VAR INITIALIZATION
0205   0562 FA FD FF      lea d, [bp + -3] ; $pass
0206   0565 DA            push d
0207   0566 FD 2E 01 00   mov32 cb, $00000001
0207   056A 00 00 
0208   056C E7            pop d
0209   056D FD 43         mov [d], b
0210   056F             ; --- END LOCAL VAR INITIALIZATION
0211   056F             ; char c; 
0212   056F 52 01 00      sub sp, 1
0213   0572             ; int i; 
0214   0572 52 02 00      sub sp, 2
0215   0575             ; char ca[5]; 
0216   0575 52 05 00      sub sp, 5
0217   0578             ; int ia[5]; 
0218   0578 52 0A 00      sub sp, 10
0219   057B             ; c = 'A'; 
0220   057B FA FC FF      lea d, [bp + -4] ; $c
0221   057E DA            push d
0222   057F FD 2E 41 00   mov32 cb, $00000041
0222   0583 00 00 
0223   0585 E7            pop d
0224   0586 FD 3E         mov [d], bl
0225   0588             ; i = 55; 
0226   0588 FA FA FF      lea d, [bp + -6] ; $i
0227   058B DA            push d
0228   058C FD 2E 37 00   mov32 cb, $00000037
0228   0590 00 00 
0229   0592 E7            pop d
0230   0593 FD 43         mov [d], b
0231   0595             ; ca[0] = 'A'; 
0232   0595 FA F5 FF      lea d, [bp + -11] ; $ca
0233   0598 D7            push a
0234   0599 DA            push d
0235   059A FD 2E 00 00   mov32 cb, $00000000
0235   059E 00 00 
0236   05A0 E7            pop d
0237   05A1 5A            add d, b
0238   05A2 E4            pop a
0239   05A3 DA            push d
0240   05A4 FD 2E 41 00   mov32 cb, $00000041
0240   05A8 00 00 
0241   05AA E7            pop d
0242   05AB FD 3E         mov [d], bl
0243   05AD             ; ca[1] = 'B'; 
0244   05AD FA F5 FF      lea d, [bp + -11] ; $ca
0245   05B0 D7            push a
0246   05B1 DA            push d
0247   05B2 FD 2E 01 00   mov32 cb, $00000001
0247   05B6 00 00 
0248   05B8 E7            pop d
0249   05B9 5A            add d, b
0250   05BA E4            pop a
0251   05BB DA            push d
0252   05BC FD 2E 42 00   mov32 cb, $00000042
0252   05C0 00 00 
0253   05C2 E7            pop d
0254   05C3 FD 3E         mov [d], bl
0255   05C5             ; ca[2] = 'C'; 
0256   05C5 FA F5 FF      lea d, [bp + -11] ; $ca
0257   05C8 D7            push a
0258   05C9 DA            push d
0259   05CA FD 2E 02 00   mov32 cb, $00000002
0259   05CE 00 00 
0260   05D0 E7            pop d
0261   05D1 5A            add d, b
0262   05D2 E4            pop a
0263   05D3 DA            push d
0264   05D4 FD 2E 43 00   mov32 cb, $00000043
0264   05D8 00 00 
0265   05DA E7            pop d
0266   05DB FD 3E         mov [d], bl
0267   05DD             ; ca[3] = 'D'; 
0268   05DD FA F5 FF      lea d, [bp + -11] ; $ca
0269   05E0 D7            push a
0270   05E1 DA            push d
0271   05E2 FD 2E 03 00   mov32 cb, $00000003
0271   05E6 00 00 
0272   05E8 E7            pop d
0273   05E9 5A            add d, b
0274   05EA E4            pop a
0275   05EB DA            push d
0276   05EC FD 2E 44 00   mov32 cb, $00000044
0276   05F0 00 00 
0277   05F2 E7            pop d
0278   05F3 FD 3E         mov [d], bl
0279   05F5             ; ca[4] = 'E'; 
0280   05F5 FA F5 FF      lea d, [bp + -11] ; $ca
0281   05F8 D7            push a
0282   05F9 DA            push d
0283   05FA FD 2E 04 00   mov32 cb, $00000004
0283   05FE 00 00 
0284   0600 E7            pop d
0285   0601 5A            add d, b
0286   0602 E4            pop a
0287   0603 DA            push d
0288   0604 FD 2E 45 00   mov32 cb, $00000045
0288   0608 00 00 
0289   060A E7            pop d
0290   060B FD 3E         mov [d], bl
0291   060D             ; ia[0] = 0; 
0292   060D FA EB FF      lea d, [bp + -21] ; $ia
0293   0610 D7            push a
0294   0611 DA            push d
0295   0612 FD 2E 00 00   mov32 cb, $00000000
0295   0616 00 00 
0296   0618 E7            pop d
0297   0619 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0298   061D E4            pop a
0299   061E DA            push d
0300   061F FD 2E 00 00   mov32 cb, $00000000
0300   0623 00 00 
0301   0625 E7            pop d
0302   0626 FD 43         mov [d], b
0303   0628             ; ia[1] = 1; 
0304   0628 FA EB FF      lea d, [bp + -21] ; $ia
0305   062B D7            push a
0306   062C DA            push d
0307   062D FD 2E 01 00   mov32 cb, $00000001
0307   0631 00 00 
0308   0633 E7            pop d
0309   0634 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0310   0638 E4            pop a
0311   0639 DA            push d
0312   063A FD 2E 01 00   mov32 cb, $00000001
0312   063E 00 00 
0313   0640 E7            pop d
0314   0641 FD 43         mov [d], b
0315   0643             ; ia[2] = 2; 
0316   0643 FA EB FF      lea d, [bp + -21] ; $ia
0317   0646 D7            push a
0318   0647 DA            push d
0319   0648 FD 2E 02 00   mov32 cb, $00000002
0319   064C 00 00 
0320   064E E7            pop d
0321   064F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0322   0653 E4            pop a
0323   0654 DA            push d
0324   0655 FD 2E 02 00   mov32 cb, $00000002
0324   0659 00 00 
0325   065B E7            pop d
0326   065C FD 43         mov [d], b
0327   065E             ; ia[3] = 3; 
0328   065E FA EB FF      lea d, [bp + -21] ; $ia
0329   0661 D7            push a
0330   0662 DA            push d
0331   0663 FD 2E 03 00   mov32 cb, $00000003
0331   0667 00 00 
0332   0669 E7            pop d
0333   066A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0334   066E E4            pop a
0335   066F DA            push d
0336   0670 FD 2E 03 00   mov32 cb, $00000003
0336   0674 00 00 
0337   0676 E7            pop d
0338   0677 FD 43         mov [d], b
0339   0679             ; ia[4] = 4; 
0340   0679 FA EB FF      lea d, [bp + -21] ; $ia
0341   067C D7            push a
0342   067D DA            push d
0343   067E FD 2E 04 00   mov32 cb, $00000004
0343   0682 00 00 
0344   0684 E7            pop d
0345   0685 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0346   0689 E4            pop a
0347   068A DA            push d
0348   068B FD 2E 04 00   mov32 cb, $00000004
0348   068F 00 00 
0349   0691 E7            pop d
0350   0692 FD 43         mov [d], b
0351   0694             ; pass = pass && test0_subTest0(c, i, ca, ia); 
0352   0694 FA FD FF      lea d, [bp + -3] ; $pass
0353   0697 DA            push d
0354   0698 FA FD FF      lea d, [bp + -3] ; $pass
0355   069B 2A            mov b, [d]
0356   069C 38 00 00      mov c, 0
0357   069F             ; --- START LOGICAL AND
0358   069F D7            push a
0359   06A0 11            mov a, b
0360   06A1             ; --- START FUNCTION CALL
0361   06A1 FA EB FF      lea d, [bp + -21] ; $ia
0362   06A4 2D            mov b, d
0363   06A5 38 00 00      mov c, 0
0364   06A8 FD AB         swp b
0365   06AA D8            push b
0366   06AB FA F5 FF      lea d, [bp + -11] ; $ca
0367   06AE 2D            mov b, d
0368   06AF 38 00 00      mov c, 0
0369   06B2 FD AB         swp b
0370   06B4 D8            push b
0371   06B5 FA FA FF      lea d, [bp + -6] ; $i
0372   06B8 2A            mov b, [d]
0373   06B9 38 00 00      mov c, 0
0374   06BC FD AB         swp b
0375   06BE D8            push b
0376   06BF FA FC FF      lea d, [bp + -4] ; $c
0377   06C2 32            mov bl, [d]
0378   06C3 A7 00         mov bh, 0
0379   06C5 38 00 00      mov c, 0
0380   06C8 DD            push bl
0381   06C9 07 DE 06      call test0_subTest0
0382   06CC 51 07 00      add sp, 7
0383   06CF             ; --- END FUNCTION CALL
0384   06CF FD A7         sand a, b
0385   06D1 E4            pop a
0386   06D2             ; --- END LOGICAL AND
0387   06D2 E7            pop d
0388   06D3 FD 43         mov [d], b
0389   06D5             ; return pass; 
0390   06D5 FA FD FF      lea d, [bp + -3] ; $pass
0391   06D8 2A            mov b, [d]
0392   06D9 38 00 00      mov c, 0
0393   06DC F9            leave
0394   06DD 09            ret
0395   06DE             
0396   06DE             test0_subTest0:
0397   06DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0398   06E1             ; int pass = 1; 
0399   06E1 52 02 00      sub sp, 2
0400   06E4             ; --- START LOCAL VAR INITIALIZATION
0401   06E4 FA FF FF      lea d, [bp + -1] ; $pass
0402   06E7 DA            push d
0403   06E8 FD 2E 01 00   mov32 cb, $00000001
0403   06EC 00 00 
0404   06EE E7            pop d
0405   06EF FD 43         mov [d], b
0406   06F1             ; --- END LOCAL VAR INITIALIZATION
0407   06F1             ; pass = pass && c == 'A'; 
0408   06F1 FA FF FF      lea d, [bp + -1] ; $pass
0409   06F4 DA            push d
0410   06F5 FA FF FF      lea d, [bp + -1] ; $pass
0411   06F8 2A            mov b, [d]
0412   06F9 38 00 00      mov c, 0
0413   06FC             ; --- START LOGICAL AND
0414   06FC D7            push a
0415   06FD 11            mov a, b
0416   06FE FA 05 00      lea d, [bp + 5] ; $c
0417   0701 32            mov bl, [d]
0418   0702 A7 00         mov bh, 0
0419   0704 38 00 00      mov c, 0
0420   0707             ; --- START RELATIONAL
0421   0707 D7            push a
0422   0708 11            mov a, b
0423   0709 FD 2E 41 00   mov32 cb, $00000041
0423   070D 00 00 
0424   070F B0            cmp a, b
0425   0710 FD 71         seq ; ==
0426   0712 E4            pop a
0427   0713             ; --- END RELATIONAL
0428   0713 FD A7         sand a, b
0429   0715 E4            pop a
0430   0716             ; --- END LOGICAL AND
0431   0716 E7            pop d
0432   0717 FD 43         mov [d], b
0433   0719             ; pass = pass && i == 55; 
0434   0719 FA FF FF      lea d, [bp + -1] ; $pass
0435   071C DA            push d
0436   071D FA FF FF      lea d, [bp + -1] ; $pass
0437   0720 2A            mov b, [d]
0438   0721 38 00 00      mov c, 0
0439   0724             ; --- START LOGICAL AND
0440   0724 D7            push a
0441   0725 11            mov a, b
0442   0726 FA 06 00      lea d, [bp + 6] ; $i
0443   0729 2A            mov b, [d]
0444   072A 38 00 00      mov c, 0
0445   072D             ; --- START RELATIONAL
0446   072D D7            push a
0447   072E 11            mov a, b
0448   072F FD 2E 37 00   mov32 cb, $00000037
0448   0733 00 00 
0449   0735 B0            cmp a, b
0450   0736 FD 71         seq ; ==
0451   0738 E4            pop a
0452   0739             ; --- END RELATIONAL
0453   0739 FD A7         sand a, b
0454   073B E4            pop a
0455   073C             ; --- END LOGICAL AND
0456   073C E7            pop d
0457   073D FD 43         mov [d], b
0458   073F             ; pass = pass && ca[0] == 'A'; 
0459   073F FA FF FF      lea d, [bp + -1] ; $pass
0460   0742 DA            push d
0461   0743 FA FF FF      lea d, [bp + -1] ; $pass
0462   0746 2A            mov b, [d]
0463   0747 38 00 00      mov c, 0
0464   074A             ; --- START LOGICAL AND
0465   074A D7            push a
0466   074B 11            mov a, b
0467   074C 2C 08 00      mov b, [bp + 8] ; $ca
0468   074F 74            mov d, b
0469   0750 D7            push a
0470   0751 DA            push d
0471   0752 FD 2E 00 00   mov32 cb, $00000000
0471   0756 00 00 
0472   0758 E7            pop d
0473   0759 5A            add d, b
0474   075A E4            pop a
0475   075B 32            mov bl, [d]
0476   075C A7 00         mov bh, 0
0477   075E 38 00 00      mov c, 0
0478   0761             ; --- START RELATIONAL
0479   0761 D7            push a
0480   0762 11            mov a, b
0481   0763 FD 2E 41 00   mov32 cb, $00000041
0481   0767 00 00 
0482   0769 B0            cmp a, b
0483   076A FD 71         seq ; ==
0484   076C E4            pop a
0485   076D             ; --- END RELATIONAL
0486   076D FD A7         sand a, b
0487   076F E4            pop a
0488   0770             ; --- END LOGICAL AND
0489   0770 E7            pop d
0490   0771 FD 43         mov [d], b
0491   0773             ; pass = pass && ca[1] == 'B'; 
0492   0773 FA FF FF      lea d, [bp + -1] ; $pass
0493   0776 DA            push d
0494   0777 FA FF FF      lea d, [bp + -1] ; $pass
0495   077A 2A            mov b, [d]
0496   077B 38 00 00      mov c, 0
0497   077E             ; --- START LOGICAL AND
0498   077E D7            push a
0499   077F 11            mov a, b
0500   0780 2C 08 00      mov b, [bp + 8] ; $ca
0501   0783 74            mov d, b
0502   0784 D7            push a
0503   0785 DA            push d
0504   0786 FD 2E 01 00   mov32 cb, $00000001
0504   078A 00 00 
0505   078C E7            pop d
0506   078D 5A            add d, b
0507   078E E4            pop a
0508   078F 32            mov bl, [d]
0509   0790 A7 00         mov bh, 0
0510   0792 38 00 00      mov c, 0
0511   0795             ; --- START RELATIONAL
0512   0795 D7            push a
0513   0796 11            mov a, b
0514   0797 FD 2E 42 00   mov32 cb, $00000042
0514   079B 00 00 
0515   079D B0            cmp a, b
0516   079E FD 71         seq ; ==
0517   07A0 E4            pop a
0518   07A1             ; --- END RELATIONAL
0519   07A1 FD A7         sand a, b
0520   07A3 E4            pop a
0521   07A4             ; --- END LOGICAL AND
0522   07A4 E7            pop d
0523   07A5 FD 43         mov [d], b
0524   07A7             ; pass = pass && ca[2] == 'C'; 
0525   07A7 FA FF FF      lea d, [bp + -1] ; $pass
0526   07AA DA            push d
0527   07AB FA FF FF      lea d, [bp + -1] ; $pass
0528   07AE 2A            mov b, [d]
0529   07AF 38 00 00      mov c, 0
0530   07B2             ; --- START LOGICAL AND
0531   07B2 D7            push a
0532   07B3 11            mov a, b
0533   07B4 2C 08 00      mov b, [bp + 8] ; $ca
0534   07B7 74            mov d, b
0535   07B8 D7            push a
0536   07B9 DA            push d
0537   07BA FD 2E 02 00   mov32 cb, $00000002
0537   07BE 00 00 
0538   07C0 E7            pop d
0539   07C1 5A            add d, b
0540   07C2 E4            pop a
0541   07C3 32            mov bl, [d]
0542   07C4 A7 00         mov bh, 0
0543   07C6 38 00 00      mov c, 0
0544   07C9             ; --- START RELATIONAL
0545   07C9 D7            push a
0546   07CA 11            mov a, b
0547   07CB FD 2E 43 00   mov32 cb, $00000043
0547   07CF 00 00 
0548   07D1 B0            cmp a, b
0549   07D2 FD 71         seq ; ==
0550   07D4 E4            pop a
0551   07D5             ; --- END RELATIONAL
0552   07D5 FD A7         sand a, b
0553   07D7 E4            pop a
0554   07D8             ; --- END LOGICAL AND
0555   07D8 E7            pop d
0556   07D9 FD 43         mov [d], b
0557   07DB             ; pass = pass && ca[3] == 'D'; 
0558   07DB FA FF FF      lea d, [bp + -1] ; $pass
0559   07DE DA            push d
0560   07DF FA FF FF      lea d, [bp + -1] ; $pass
0561   07E2 2A            mov b, [d]
0562   07E3 38 00 00      mov c, 0
0563   07E6             ; --- START LOGICAL AND
0564   07E6 D7            push a
0565   07E7 11            mov a, b
0566   07E8 2C 08 00      mov b, [bp + 8] ; $ca
0567   07EB 74            mov d, b
0568   07EC D7            push a
0569   07ED DA            push d
0570   07EE FD 2E 03 00   mov32 cb, $00000003
0570   07F2 00 00 
0571   07F4 E7            pop d
0572   07F5 5A            add d, b
0573   07F6 E4            pop a
0574   07F7 32            mov bl, [d]
0575   07F8 A7 00         mov bh, 0
0576   07FA 38 00 00      mov c, 0
0577   07FD             ; --- START RELATIONAL
0578   07FD D7            push a
0579   07FE 11            mov a, b
0580   07FF FD 2E 44 00   mov32 cb, $00000044
0580   0803 00 00 
0581   0805 B0            cmp a, b
0582   0806 FD 71         seq ; ==
0583   0808 E4            pop a
0584   0809             ; --- END RELATIONAL
0585   0809 FD A7         sand a, b
0586   080B E4            pop a
0587   080C             ; --- END LOGICAL AND
0588   080C E7            pop d
0589   080D FD 43         mov [d], b
0590   080F             ; pass = pass && ca[4] == 'E'; 
0591   080F FA FF FF      lea d, [bp + -1] ; $pass
0592   0812 DA            push d
0593   0813 FA FF FF      lea d, [bp + -1] ; $pass
0594   0816 2A            mov b, [d]
0595   0817 38 00 00      mov c, 0
0596   081A             ; --- START LOGICAL AND
0597   081A D7            push a
0598   081B 11            mov a, b
0599   081C 2C 08 00      mov b, [bp + 8] ; $ca
0600   081F 74            mov d, b
0601   0820 D7            push a
0602   0821 DA            push d
0603   0822 FD 2E 04 00   mov32 cb, $00000004
0603   0826 00 00 
0604   0828 E7            pop d
0605   0829 5A            add d, b
0606   082A E4            pop a
0607   082B 32            mov bl, [d]
0608   082C A7 00         mov bh, 0
0609   082E 38 00 00      mov c, 0
0610   0831             ; --- START RELATIONAL
0611   0831 D7            push a
0612   0832 11            mov a, b
0613   0833 FD 2E 45 00   mov32 cb, $00000045
0613   0837 00 00 
0614   0839 B0            cmp a, b
0615   083A FD 71         seq ; ==
0616   083C E4            pop a
0617   083D             ; --- END RELATIONAL
0618   083D FD A7         sand a, b
0619   083F E4            pop a
0620   0840             ; --- END LOGICAL AND
0621   0840 E7            pop d
0622   0841 FD 43         mov [d], b
0623   0843             ; pass = pass && ia[0] == 0; 
0624   0843 FA FF FF      lea d, [bp + -1] ; $pass
0625   0846 DA            push d
0626   0847 FA FF FF      lea d, [bp + -1] ; $pass
0627   084A 2A            mov b, [d]
0628   084B 38 00 00      mov c, 0
0629   084E             ; --- START LOGICAL AND
0630   084E D7            push a
0631   084F 11            mov a, b
0632   0850 2C 0A 00      mov b, [bp + 10] ; $ia
0633   0853 74            mov d, b
0634   0854 D7            push a
0635   0855 DA            push d
0636   0856 FD 2E 00 00   mov32 cb, $00000000
0636   085A 00 00 
0637   085C E7            pop d
0638   085D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0639   0861 E4            pop a
0640   0862 2A            mov b, [d]
0641   0863 38 00 00      mov c, 0
0642   0866             ; --- START RELATIONAL
0643   0866 D7            push a
0644   0867 11            mov a, b
0645   0868 FD 2E 00 00   mov32 cb, $00000000
0645   086C 00 00 
0646   086E B0            cmp a, b
0647   086F FD 71         seq ; ==
0648   0871 E4            pop a
0649   0872             ; --- END RELATIONAL
0650   0872 FD A7         sand a, b
0651   0874 E4            pop a
0652   0875             ; --- END LOGICAL AND
0653   0875 E7            pop d
0654   0876 FD 43         mov [d], b
0655   0878             ; pass = pass && ia[1] == 1; 
0656   0878 FA FF FF      lea d, [bp + -1] ; $pass
0657   087B DA            push d
0658   087C FA FF FF      lea d, [bp + -1] ; $pass
0659   087F 2A            mov b, [d]
0660   0880 38 00 00      mov c, 0
0661   0883             ; --- START LOGICAL AND
0662   0883 D7            push a
0663   0884 11            mov a, b
0664   0885 2C 0A 00      mov b, [bp + 10] ; $ia
0665   0888 74            mov d, b
0666   0889 D7            push a
0667   088A DA            push d
0668   088B FD 2E 01 00   mov32 cb, $00000001
0668   088F 00 00 
0669   0891 E7            pop d
0670   0892 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0671   0896 E4            pop a
0672   0897 2A            mov b, [d]
0673   0898 38 00 00      mov c, 0
0674   089B             ; --- START RELATIONAL
0675   089B D7            push a
0676   089C 11            mov a, b
0677   089D FD 2E 01 00   mov32 cb, $00000001
0677   08A1 00 00 
0678   08A3 B0            cmp a, b
0679   08A4 FD 71         seq ; ==
0680   08A6 E4            pop a
0681   08A7             ; --- END RELATIONAL
0682   08A7 FD A7         sand a, b
0683   08A9 E4            pop a
0684   08AA             ; --- END LOGICAL AND
0685   08AA E7            pop d
0686   08AB FD 43         mov [d], b
0687   08AD             ; pass = pass && ia[2] == 2; 
0688   08AD FA FF FF      lea d, [bp + -1] ; $pass
0689   08B0 DA            push d
0690   08B1 FA FF FF      lea d, [bp + -1] ; $pass
0691   08B4 2A            mov b, [d]
0692   08B5 38 00 00      mov c, 0
0693   08B8             ; --- START LOGICAL AND
0694   08B8 D7            push a
0695   08B9 11            mov a, b
0696   08BA 2C 0A 00      mov b, [bp + 10] ; $ia
0697   08BD 74            mov d, b
0698   08BE D7            push a
0699   08BF DA            push d
0700   08C0 FD 2E 02 00   mov32 cb, $00000002
0700   08C4 00 00 
0701   08C6 E7            pop d
0702   08C7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0703   08CB E4            pop a
0704   08CC 2A            mov b, [d]
0705   08CD 38 00 00      mov c, 0
0706   08D0             ; --- START RELATIONAL
0707   08D0 D7            push a
0708   08D1 11            mov a, b
0709   08D2 FD 2E 02 00   mov32 cb, $00000002
0709   08D6 00 00 
0710   08D8 B0            cmp a, b
0711   08D9 FD 71         seq ; ==
0712   08DB E4            pop a
0713   08DC             ; --- END RELATIONAL
0714   08DC FD A7         sand a, b
0715   08DE E4            pop a
0716   08DF             ; --- END LOGICAL AND
0717   08DF E7            pop d
0718   08E0 FD 43         mov [d], b
0719   08E2             ; pass = pass && ia[3] == 3; 
0720   08E2 FA FF FF      lea d, [bp + -1] ; $pass
0721   08E5 DA            push d
0722   08E6 FA FF FF      lea d, [bp + -1] ; $pass
0723   08E9 2A            mov b, [d]
0724   08EA 38 00 00      mov c, 0
0725   08ED             ; --- START LOGICAL AND
0726   08ED D7            push a
0727   08EE 11            mov a, b
0728   08EF 2C 0A 00      mov b, [bp + 10] ; $ia
0729   08F2 74            mov d, b
0730   08F3 D7            push a
0731   08F4 DA            push d
0732   08F5 FD 2E 03 00   mov32 cb, $00000003
0732   08F9 00 00 
0733   08FB E7            pop d
0734   08FC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0735   0900 E4            pop a
0736   0901 2A            mov b, [d]
0737   0902 38 00 00      mov c, 0
0738   0905             ; --- START RELATIONAL
0739   0905 D7            push a
0740   0906 11            mov a, b
0741   0907 FD 2E 03 00   mov32 cb, $00000003
0741   090B 00 00 
0742   090D B0            cmp a, b
0743   090E FD 71         seq ; ==
0744   0910 E4            pop a
0745   0911             ; --- END RELATIONAL
0746   0911 FD A7         sand a, b
0747   0913 E4            pop a
0748   0914             ; --- END LOGICAL AND
0749   0914 E7            pop d
0750   0915 FD 43         mov [d], b
0751   0917             ; pass = pass && ia[4] == 4; 
0752   0917 FA FF FF      lea d, [bp + -1] ; $pass
0753   091A DA            push d
0754   091B FA FF FF      lea d, [bp + -1] ; $pass
0755   091E 2A            mov b, [d]
0756   091F 38 00 00      mov c, 0
0757   0922             ; --- START LOGICAL AND
0758   0922 D7            push a
0759   0923 11            mov a, b
0760   0924 2C 0A 00      mov b, [bp + 10] ; $ia
0761   0927 74            mov d, b
0762   0928 D7            push a
0763   0929 DA            push d
0764   092A FD 2E 04 00   mov32 cb, $00000004
0764   092E 00 00 
0765   0930 E7            pop d
0766   0931 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0767   0935 E4            pop a
0768   0936 2A            mov b, [d]
0769   0937 38 00 00      mov c, 0
0770   093A             ; --- START RELATIONAL
0771   093A D7            push a
0772   093B 11            mov a, b
0773   093C FD 2E 04 00   mov32 cb, $00000004
0773   0940 00 00 
0774   0942 B0            cmp a, b
0775   0943 FD 71         seq ; ==
0776   0945 E4            pop a
0777   0946             ; --- END RELATIONAL
0778   0946 FD A7         sand a, b
0779   0948 E4            pop a
0780   0949             ; --- END LOGICAL AND
0781   0949 E7            pop d
0782   094A FD 43         mov [d], b
0783   094C             ; return pass; 
0784   094C FA FF FF      lea d, [bp + -1] ; $pass
0785   094F 2A            mov b, [d]
0786   0950 38 00 00      mov c, 0
0787   0953 F9            leave
0788   0954 09            ret
0789   0955             
0790   0955             test1:
0791   0955 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0792   0958             ; int pass = 1; 
0793   0958 52 02 00      sub sp, 2
0794   095B             ; --- START LOCAL VAR INITIALIZATION
0795   095B FA FF FF      lea d, [bp + -1] ; $pass
0796   095E DA            push d
0797   095F FD 2E 01 00   mov32 cb, $00000001
0797   0963 00 00 
0798   0965 E7            pop d
0799   0966 FD 43         mov [d], b
0800   0968             ; --- END LOCAL VAR INITIALIZATION
0801   0968             ; char ca[5]; 
0802   0968 52 05 00      sub sp, 5
0803   096B             ; char *p; 
0804   096B 52 02 00      sub sp, 2
0805   096E             ; p = ca; 
0806   096E FA F8 FF      lea d, [bp + -8] ; $p
0807   0971 DA            push d
0808   0972 FA FA FF      lea d, [bp + -6] ; $ca
0809   0975 2D            mov b, d
0810   0976 38 00 00      mov c, 0
0811   0979 E7            pop d
0812   097A FD 43         mov [d], b
0813   097C             ; ca[0] = 'A'; 
0814   097C FA FA FF      lea d, [bp + -6] ; $ca
0815   097F D7            push a
0816   0980 DA            push d
0817   0981 FD 2E 00 00   mov32 cb, $00000000
0817   0985 00 00 
0818   0987 E7            pop d
0819   0988 5A            add d, b
0820   0989 E4            pop a
0821   098A DA            push d
0822   098B FD 2E 41 00   mov32 cb, $00000041
0822   098F 00 00 
0823   0991 E7            pop d
0824   0992 FD 3E         mov [d], bl
0825   0994             ; ca[1] = 'B'; 
0826   0994 FA FA FF      lea d, [bp + -6] ; $ca
0827   0997 D7            push a
0828   0998 DA            push d
0829   0999 FD 2E 01 00   mov32 cb, $00000001
0829   099D 00 00 
0830   099F E7            pop d
0831   09A0 5A            add d, b
0832   09A1 E4            pop a
0833   09A2 DA            push d
0834   09A3 FD 2E 42 00   mov32 cb, $00000042
0834   09A7 00 00 
0835   09A9 E7            pop d
0836   09AA FD 3E         mov [d], bl
0837   09AC             ; ca[2] = 'C'; 
0838   09AC FA FA FF      lea d, [bp + -6] ; $ca
0839   09AF D7            push a
0840   09B0 DA            push d
0841   09B1 FD 2E 02 00   mov32 cb, $00000002
0841   09B5 00 00 
0842   09B7 E7            pop d
0843   09B8 5A            add d, b
0844   09B9 E4            pop a
0845   09BA DA            push d
0846   09BB FD 2E 43 00   mov32 cb, $00000043
0846   09BF 00 00 
0847   09C1 E7            pop d
0848   09C2 FD 3E         mov [d], bl
0849   09C4             ; ca[3] = 'D'; 
0850   09C4 FA FA FF      lea d, [bp + -6] ; $ca
0851   09C7 D7            push a
0852   09C8 DA            push d
0853   09C9 FD 2E 03 00   mov32 cb, $00000003
0853   09CD 00 00 
0854   09CF E7            pop d
0855   09D0 5A            add d, b
0856   09D1 E4            pop a
0857   09D2 DA            push d
0858   09D3 FD 2E 44 00   mov32 cb, $00000044
0858   09D7 00 00 
0859   09D9 E7            pop d
0860   09DA FD 3E         mov [d], bl
0861   09DC             ; ca[4] = 'E'; 
0862   09DC FA FA FF      lea d, [bp + -6] ; $ca
0863   09DF D7            push a
0864   09E0 DA            push d
0865   09E1 FD 2E 04 00   mov32 cb, $00000004
0865   09E5 00 00 
0866   09E7 E7            pop d
0867   09E8 5A            add d, b
0868   09E9 E4            pop a
0869   09EA DA            push d
0870   09EB FD 2E 45 00   mov32 cb, $00000045
0870   09EF 00 00 
0871   09F1 E7            pop d
0872   09F2 FD 3E         mov [d], bl
0873   09F4             ; pass = pass && *p == 'A'; 
0874   09F4 FA FF FF      lea d, [bp + -1] ; $pass
0875   09F7 DA            push d
0876   09F8 FA FF FF      lea d, [bp + -1] ; $pass
0877   09FB 2A            mov b, [d]
0878   09FC 38 00 00      mov c, 0
0879   09FF             ; --- START LOGICAL AND
0880   09FF D7            push a
0881   0A00 11            mov a, b
0882   0A01 FA F8 FF      lea d, [bp + -8] ; $p
0883   0A04 2A            mov b, [d]
0884   0A05 38 00 00      mov c, 0
0885   0A08 74            mov d, b
0886   0A09 32            mov bl, [d]
0887   0A0A A7 00         mov bh, 0
0888   0A0C 38 00 00      mov c, 0
0889   0A0F             ; --- START RELATIONAL
0890   0A0F D7            push a
0891   0A10 11            mov a, b
0892   0A11 FD 2E 41 00   mov32 cb, $00000041
0892   0A15 00 00 
0893   0A17 B0            cmp a, b
0894   0A18 FD 71         seq ; ==
0895   0A1A E4            pop a
0896   0A1B             ; --- END RELATIONAL
0897   0A1B FD A7         sand a, b
0898   0A1D E4            pop a
0899   0A1E             ; --- END LOGICAL AND
0900   0A1E E7            pop d
0901   0A1F FD 43         mov [d], b
0902   0A21             ; pass = pass && *(p + 1) == 'B'; 
0903   0A21 FA FF FF      lea d, [bp + -1] ; $pass
0904   0A24 DA            push d
0905   0A25 FA FF FF      lea d, [bp + -1] ; $pass
0906   0A28 2A            mov b, [d]
0907   0A29 38 00 00      mov c, 0
0908   0A2C             ; --- START LOGICAL AND
0909   0A2C D7            push a
0910   0A2D 11            mov a, b
0911   0A2E FA F8 FF      lea d, [bp + -8] ; $p
0912   0A31 2A            mov b, [d]
0913   0A32 38 00 00      mov c, 0
0914   0A35             ; --- START TERMS
0915   0A35 D7            push a
0916   0A36 11            mov a, b
0917   0A37 FD 2E 01 00   mov32 cb, $00000001
0917   0A3B 00 00 
0918   0A3D 56            add b, a
0919   0A3E E4            pop a
0920   0A3F             ; --- END TERMS
0921   0A3F 74            mov d, b
0922   0A40 32            mov bl, [d]
0923   0A41 A7 00         mov bh, 0
0924   0A43 38 00 00      mov c, 0
0925   0A46             ; --- START RELATIONAL
0926   0A46 D7            push a
0927   0A47 11            mov a, b
0928   0A48 FD 2E 42 00   mov32 cb, $00000042
0928   0A4C 00 00 
0929   0A4E B0            cmp a, b
0930   0A4F FD 71         seq ; ==
0931   0A51 E4            pop a
0932   0A52             ; --- END RELATIONAL
0933   0A52 FD A7         sand a, b
0934   0A54 E4            pop a
0935   0A55             ; --- END LOGICAL AND
0936   0A55 E7            pop d
0937   0A56 FD 43         mov [d], b
0938   0A58             ; pass = pass && *(p + 2) == 'C'; 
0939   0A58 FA FF FF      lea d, [bp + -1] ; $pass
0940   0A5B DA            push d
0941   0A5C FA FF FF      lea d, [bp + -1] ; $pass
0942   0A5F 2A            mov b, [d]
0943   0A60 38 00 00      mov c, 0
0944   0A63             ; --- START LOGICAL AND
0945   0A63 D7            push a
0946   0A64 11            mov a, b
0947   0A65 FA F8 FF      lea d, [bp + -8] ; $p
0948   0A68 2A            mov b, [d]
0949   0A69 38 00 00      mov c, 0
0950   0A6C             ; --- START TERMS
0951   0A6C D7            push a
0952   0A6D 11            mov a, b
0953   0A6E FD 2E 02 00   mov32 cb, $00000002
0953   0A72 00 00 
0954   0A74 56            add b, a
0955   0A75 E4            pop a
0956   0A76             ; --- END TERMS
0957   0A76 74            mov d, b
0958   0A77 32            mov bl, [d]
0959   0A78 A7 00         mov bh, 0
0960   0A7A 38 00 00      mov c, 0
0961   0A7D             ; --- START RELATIONAL
0962   0A7D D7            push a
0963   0A7E 11            mov a, b
0964   0A7F FD 2E 43 00   mov32 cb, $00000043
0964   0A83 00 00 
0965   0A85 B0            cmp a, b
0966   0A86 FD 71         seq ; ==
0967   0A88 E4            pop a
0968   0A89             ; --- END RELATIONAL
0969   0A89 FD A7         sand a, b
0970   0A8B E4            pop a
0971   0A8C             ; --- END LOGICAL AND
0972   0A8C E7            pop d
0973   0A8D FD 43         mov [d], b
0974   0A8F             ; pass = pass && *(p + 3) == 'D'; 
0975   0A8F FA FF FF      lea d, [bp + -1] ; $pass
0976   0A92 DA            push d
0977   0A93 FA FF FF      lea d, [bp + -1] ; $pass
0978   0A96 2A            mov b, [d]
0979   0A97 38 00 00      mov c, 0
0980   0A9A             ; --- START LOGICAL AND
0981   0A9A D7            push a
0982   0A9B 11            mov a, b
0983   0A9C FA F8 FF      lea d, [bp + -8] ; $p
0984   0A9F 2A            mov b, [d]
0985   0AA0 38 00 00      mov c, 0
0986   0AA3             ; --- START TERMS
0987   0AA3 D7            push a
0988   0AA4 11            mov a, b
0989   0AA5 FD 2E 03 00   mov32 cb, $00000003
0989   0AA9 00 00 
0990   0AAB 56            add b, a
0991   0AAC E4            pop a
0992   0AAD             ; --- END TERMS
0993   0AAD 74            mov d, b
0994   0AAE 32            mov bl, [d]
0995   0AAF A7 00         mov bh, 0
0996   0AB1 38 00 00      mov c, 0
0997   0AB4             ; --- START RELATIONAL
0998   0AB4 D7            push a
0999   0AB5 11            mov a, b
1000   0AB6 FD 2E 44 00   mov32 cb, $00000044
1000   0ABA 00 00 
1001   0ABC B0            cmp a, b
1002   0ABD FD 71         seq ; ==
1003   0ABF E4            pop a
1004   0AC0             ; --- END RELATIONAL
1005   0AC0 FD A7         sand a, b
1006   0AC2 E4            pop a
1007   0AC3             ; --- END LOGICAL AND
1008   0AC3 E7            pop d
1009   0AC4 FD 43         mov [d], b
1010   0AC6             ; pass = pass && *(p + 4) == 'E'; 
1011   0AC6 FA FF FF      lea d, [bp + -1] ; $pass
1012   0AC9 DA            push d
1013   0ACA FA FF FF      lea d, [bp + -1] ; $pass
1014   0ACD 2A            mov b, [d]
1015   0ACE 38 00 00      mov c, 0
1016   0AD1             ; --- START LOGICAL AND
1017   0AD1 D7            push a
1018   0AD2 11            mov a, b
1019   0AD3 FA F8 FF      lea d, [bp + -8] ; $p
1020   0AD6 2A            mov b, [d]
1021   0AD7 38 00 00      mov c, 0
1022   0ADA             ; --- START TERMS
1023   0ADA D7            push a
1024   0ADB 11            mov a, b
1025   0ADC FD 2E 04 00   mov32 cb, $00000004
1025   0AE0 00 00 
1026   0AE2 56            add b, a
1027   0AE3 E4            pop a
1028   0AE4             ; --- END TERMS
1029   0AE4 74            mov d, b
1030   0AE5 32            mov bl, [d]
1031   0AE6 A7 00         mov bh, 0
1032   0AE8 38 00 00      mov c, 0
1033   0AEB             ; --- START RELATIONAL
1034   0AEB D7            push a
1035   0AEC 11            mov a, b
1036   0AED FD 2E 45 00   mov32 cb, $00000045
1036   0AF1 00 00 
1037   0AF3 B0            cmp a, b
1038   0AF4 FD 71         seq ; ==
1039   0AF6 E4            pop a
1040   0AF7             ; --- END RELATIONAL
1041   0AF7 FD A7         sand a, b
1042   0AF9 E4            pop a
1043   0AFA             ; --- END LOGICAL AND
1044   0AFA E7            pop d
1045   0AFB FD 43         mov [d], b
1046   0AFD             ; return pass; 
1047   0AFD FA FF FF      lea d, [bp + -1] ; $pass
1048   0B00 2A            mov b, [d]
1049   0B01 38 00 00      mov c, 0
1050   0B04 F9            leave
1051   0B05 09            ret
1052   0B06             
1053   0B06             test2:
1054   0B06 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1055   0B09             ; int pass = 1; 
1056   0B09 52 02 00      sub sp, 2
1057   0B0C             ; --- START LOCAL VAR INITIALIZATION
1058   0B0C FA FF FF      lea d, [bp + -1] ; $pass
1059   0B0F DA            push d
1060   0B10 FD 2E 01 00   mov32 cb, $00000001
1060   0B14 00 00 
1061   0B16 E7            pop d
1062   0B17 FD 43         mov [d], b
1063   0B19             ; --- END LOCAL VAR INITIALIZATION
1064   0B19             ; char ca[5]; 
1065   0B19 52 05 00      sub sp, 5
1066   0B1C             ; int indices[5]; 
1067   0B1C 52 0A 00      sub sp, 10
1068   0B1F             ; char *p; 
1069   0B1F 52 02 00      sub sp, 2
1070   0B22             ; p = ca; 
1071   0B22 FA EE FF      lea d, [bp + -18] ; $p
1072   0B25 DA            push d
1073   0B26 FA FA FF      lea d, [bp + -6] ; $ca
1074   0B29 2D            mov b, d
1075   0B2A 38 00 00      mov c, 0
1076   0B2D E7            pop d
1077   0B2E FD 43         mov [d], b
1078   0B30             ; ca[0] = 'A'; 
1079   0B30 FA FA FF      lea d, [bp + -6] ; $ca
1080   0B33 D7            push a
1081   0B34 DA            push d
1082   0B35 FD 2E 00 00   mov32 cb, $00000000
1082   0B39 00 00 
1083   0B3B E7            pop d
1084   0B3C 5A            add d, b
1085   0B3D E4            pop a
1086   0B3E DA            push d
1087   0B3F FD 2E 41 00   mov32 cb, $00000041
1087   0B43 00 00 
1088   0B45 E7            pop d
1089   0B46 FD 3E         mov [d], bl
1090   0B48             ; ca[1] = 'B'; 
1091   0B48 FA FA FF      lea d, [bp + -6] ; $ca
1092   0B4B D7            push a
1093   0B4C DA            push d
1094   0B4D FD 2E 01 00   mov32 cb, $00000001
1094   0B51 00 00 
1095   0B53 E7            pop d
1096   0B54 5A            add d, b
1097   0B55 E4            pop a
1098   0B56 DA            push d
1099   0B57 FD 2E 42 00   mov32 cb, $00000042
1099   0B5B 00 00 
1100   0B5D E7            pop d
1101   0B5E FD 3E         mov [d], bl
1102   0B60             ; ca[2] = 'C'; 
1103   0B60 FA FA FF      lea d, [bp + -6] ; $ca
1104   0B63 D7            push a
1105   0B64 DA            push d
1106   0B65 FD 2E 02 00   mov32 cb, $00000002
1106   0B69 00 00 
1107   0B6B E7            pop d
1108   0B6C 5A            add d, b
1109   0B6D E4            pop a
1110   0B6E DA            push d
1111   0B6F FD 2E 43 00   mov32 cb, $00000043
1111   0B73 00 00 
1112   0B75 E7            pop d
1113   0B76 FD 3E         mov [d], bl
1114   0B78             ; ca[3] = 'D'; 
1115   0B78 FA FA FF      lea d, [bp + -6] ; $ca
1116   0B7B D7            push a
1117   0B7C DA            push d
1118   0B7D FD 2E 03 00   mov32 cb, $00000003
1118   0B81 00 00 
1119   0B83 E7            pop d
1120   0B84 5A            add d, b
1121   0B85 E4            pop a
1122   0B86 DA            push d
1123   0B87 FD 2E 44 00   mov32 cb, $00000044
1123   0B8B 00 00 
1124   0B8D E7            pop d
1125   0B8E FD 3E         mov [d], bl
1126   0B90             ; ca[4] = 'E'; 
1127   0B90 FA FA FF      lea d, [bp + -6] ; $ca
1128   0B93 D7            push a
1129   0B94 DA            push d
1130   0B95 FD 2E 04 00   mov32 cb, $00000004
1130   0B99 00 00 
1131   0B9B E7            pop d
1132   0B9C 5A            add d, b
1133   0B9D E4            pop a
1134   0B9E DA            push d
1135   0B9F FD 2E 45 00   mov32 cb, $00000045
1135   0BA3 00 00 
1136   0BA5 E7            pop d
1137   0BA6 FD 3E         mov [d], bl
1138   0BA8             ; indices[0] = 0; 
1139   0BA8 FA F0 FF      lea d, [bp + -16] ; $indices
1140   0BAB D7            push a
1141   0BAC DA            push d
1142   0BAD FD 2E 00 00   mov32 cb, $00000000
1142   0BB1 00 00 
1143   0BB3 E7            pop d
1144   0BB4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1145   0BB8 E4            pop a
1146   0BB9 DA            push d
1147   0BBA FD 2E 00 00   mov32 cb, $00000000
1147   0BBE 00 00 
1148   0BC0 E7            pop d
1149   0BC1 FD 43         mov [d], b
1150   0BC3             ; indices[1] = 1; 
1151   0BC3 FA F0 FF      lea d, [bp + -16] ; $indices
1152   0BC6 D7            push a
1153   0BC7 DA            push d
1154   0BC8 FD 2E 01 00   mov32 cb, $00000001
1154   0BCC 00 00 
1155   0BCE E7            pop d
1156   0BCF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1157   0BD3 E4            pop a
1158   0BD4 DA            push d
1159   0BD5 FD 2E 01 00   mov32 cb, $00000001
1159   0BD9 00 00 
1160   0BDB E7            pop d
1161   0BDC FD 43         mov [d], b
1162   0BDE             ; indices[2] = 2; 
1163   0BDE FA F0 FF      lea d, [bp + -16] ; $indices
1164   0BE1 D7            push a
1165   0BE2 DA            push d
1166   0BE3 FD 2E 02 00   mov32 cb, $00000002
1166   0BE7 00 00 
1167   0BE9 E7            pop d
1168   0BEA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1169   0BEE E4            pop a
1170   0BEF DA            push d
1171   0BF0 FD 2E 02 00   mov32 cb, $00000002
1171   0BF4 00 00 
1172   0BF6 E7            pop d
1173   0BF7 FD 43         mov [d], b
1174   0BF9             ; indices[3] = 3; 
1175   0BF9 FA F0 FF      lea d, [bp + -16] ; $indices
1176   0BFC D7            push a
1177   0BFD DA            push d
1178   0BFE FD 2E 03 00   mov32 cb, $00000003
1178   0C02 00 00 
1179   0C04 E7            pop d
1180   0C05 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1181   0C09 E4            pop a
1182   0C0A DA            push d
1183   0C0B FD 2E 03 00   mov32 cb, $00000003
1183   0C0F 00 00 
1184   0C11 E7            pop d
1185   0C12 FD 43         mov [d], b
1186   0C14             ; indices[4] = 4; 
1187   0C14 FA F0 FF      lea d, [bp + -16] ; $indices
1188   0C17 D7            push a
1189   0C18 DA            push d
1190   0C19 FD 2E 04 00   mov32 cb, $00000004
1190   0C1D 00 00 
1191   0C1F E7            pop d
1192   0C20 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1193   0C24 E4            pop a
1194   0C25 DA            push d
1195   0C26 FD 2E 04 00   mov32 cb, $00000004
1195   0C2A 00 00 
1196   0C2C E7            pop d
1197   0C2D FD 43         mov [d], b
1198   0C2F             ; pass = pass && *(p + indices[0]) == 'A'; 
1199   0C2F FA FF FF      lea d, [bp + -1] ; $pass
1200   0C32 DA            push d
1201   0C33 FA FF FF      lea d, [bp + -1] ; $pass
1202   0C36 2A            mov b, [d]
1203   0C37 38 00 00      mov c, 0
1204   0C3A             ; --- START LOGICAL AND
1205   0C3A D7            push a
1206   0C3B 11            mov a, b
1207   0C3C FA EE FF      lea d, [bp + -18] ; $p
1208   0C3F 2A            mov b, [d]
1209   0C40 38 00 00      mov c, 0
1210   0C43             ; --- START TERMS
1211   0C43 D7            push a
1212   0C44 11            mov a, b
1213   0C45 FA F0 FF      lea d, [bp + -16] ; $indices
1214   0C48 D7            push a
1215   0C49 DA            push d
1216   0C4A FD 2E 00 00   mov32 cb, $00000000
1216   0C4E 00 00 
1217   0C50 E7            pop d
1218   0C51 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1219   0C55 E4            pop a
1220   0C56 2A            mov b, [d]
1221   0C57 38 00 00      mov c, 0
1222   0C5A 56            add b, a
1223   0C5B E4            pop a
1224   0C5C             ; --- END TERMS
1225   0C5C 74            mov d, b
1226   0C5D 32            mov bl, [d]
1227   0C5E A7 00         mov bh, 0
1228   0C60 38 00 00      mov c, 0
1229   0C63             ; --- START RELATIONAL
1230   0C63 D7            push a
1231   0C64 11            mov a, b
1232   0C65 FD 2E 41 00   mov32 cb, $00000041
1232   0C69 00 00 
1233   0C6B B0            cmp a, b
1234   0C6C FD 71         seq ; ==
1235   0C6E E4            pop a
1236   0C6F             ; --- END RELATIONAL
1237   0C6F FD A7         sand a, b
1238   0C71 E4            pop a
1239   0C72             ; --- END LOGICAL AND
1240   0C72 E7            pop d
1241   0C73 FD 43         mov [d], b
1242   0C75             ; pass = pass && *(p + indices[1]) == 'B'; 
1243   0C75 FA FF FF      lea d, [bp + -1] ; $pass
1244   0C78 DA            push d
1245   0C79 FA FF FF      lea d, [bp + -1] ; $pass
1246   0C7C 2A            mov b, [d]
1247   0C7D 38 00 00      mov c, 0
1248   0C80             ; --- START LOGICAL AND
1249   0C80 D7            push a
1250   0C81 11            mov a, b
1251   0C82 FA EE FF      lea d, [bp + -18] ; $p
1252   0C85 2A            mov b, [d]
1253   0C86 38 00 00      mov c, 0
1254   0C89             ; --- START TERMS
1255   0C89 D7            push a
1256   0C8A 11            mov a, b
1257   0C8B FA F0 FF      lea d, [bp + -16] ; $indices
1258   0C8E D7            push a
1259   0C8F DA            push d
1260   0C90 FD 2E 01 00   mov32 cb, $00000001
1260   0C94 00 00 
1261   0C96 E7            pop d
1262   0C97 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1263   0C9B E4            pop a
1264   0C9C 2A            mov b, [d]
1265   0C9D 38 00 00      mov c, 0
1266   0CA0 56            add b, a
1267   0CA1 E4            pop a
1268   0CA2             ; --- END TERMS
1269   0CA2 74            mov d, b
1270   0CA3 32            mov bl, [d]
1271   0CA4 A7 00         mov bh, 0
1272   0CA6 38 00 00      mov c, 0
1273   0CA9             ; --- START RELATIONAL
1274   0CA9 D7            push a
1275   0CAA 11            mov a, b
1276   0CAB FD 2E 42 00   mov32 cb, $00000042
1276   0CAF 00 00 
1277   0CB1 B0            cmp a, b
1278   0CB2 FD 71         seq ; ==
1279   0CB4 E4            pop a
1280   0CB5             ; --- END RELATIONAL
1281   0CB5 FD A7         sand a, b
1282   0CB7 E4            pop a
1283   0CB8             ; --- END LOGICAL AND
1284   0CB8 E7            pop d
1285   0CB9 FD 43         mov [d], b
1286   0CBB             ; pass = pass && *(p + indices[2]) == 'C'; 
1287   0CBB FA FF FF      lea d, [bp + -1] ; $pass
1288   0CBE DA            push d
1289   0CBF FA FF FF      lea d, [bp + -1] ; $pass
1290   0CC2 2A            mov b, [d]
1291   0CC3 38 00 00      mov c, 0
1292   0CC6             ; --- START LOGICAL AND
1293   0CC6 D7            push a
1294   0CC7 11            mov a, b
1295   0CC8 FA EE FF      lea d, [bp + -18] ; $p
1296   0CCB 2A            mov b, [d]
1297   0CCC 38 00 00      mov c, 0
1298   0CCF             ; --- START TERMS
1299   0CCF D7            push a
1300   0CD0 11            mov a, b
1301   0CD1 FA F0 FF      lea d, [bp + -16] ; $indices
1302   0CD4 D7            push a
1303   0CD5 DA            push d
1304   0CD6 FD 2E 02 00   mov32 cb, $00000002
1304   0CDA 00 00 
1305   0CDC E7            pop d
1306   0CDD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1307   0CE1 E4            pop a
1308   0CE2 2A            mov b, [d]
1309   0CE3 38 00 00      mov c, 0
1310   0CE6 56            add b, a
1311   0CE7 E4            pop a
1312   0CE8             ; --- END TERMS
1313   0CE8 74            mov d, b
1314   0CE9 32            mov bl, [d]
1315   0CEA A7 00         mov bh, 0
1316   0CEC 38 00 00      mov c, 0
1317   0CEF             ; --- START RELATIONAL
1318   0CEF D7            push a
1319   0CF0 11            mov a, b
1320   0CF1 FD 2E 43 00   mov32 cb, $00000043
1320   0CF5 00 00 
1321   0CF7 B0            cmp a, b
1322   0CF8 FD 71         seq ; ==
1323   0CFA E4            pop a
1324   0CFB             ; --- END RELATIONAL
1325   0CFB FD A7         sand a, b
1326   0CFD E4            pop a
1327   0CFE             ; --- END LOGICAL AND
1328   0CFE E7            pop d
1329   0CFF FD 43         mov [d], b
1330   0D01             ; pass = pass && *(p + indices[3]) == 'D'; 
1331   0D01 FA FF FF      lea d, [bp + -1] ; $pass
1332   0D04 DA            push d
1333   0D05 FA FF FF      lea d, [bp + -1] ; $pass
1334   0D08 2A            mov b, [d]
1335   0D09 38 00 00      mov c, 0
1336   0D0C             ; --- START LOGICAL AND
1337   0D0C D7            push a
1338   0D0D 11            mov a, b
1339   0D0E FA EE FF      lea d, [bp + -18] ; $p
1340   0D11 2A            mov b, [d]
1341   0D12 38 00 00      mov c, 0
1342   0D15             ; --- START TERMS
1343   0D15 D7            push a
1344   0D16 11            mov a, b
1345   0D17 FA F0 FF      lea d, [bp + -16] ; $indices
1346   0D1A D7            push a
1347   0D1B DA            push d
1348   0D1C FD 2E 03 00   mov32 cb, $00000003
1348   0D20 00 00 
1349   0D22 E7            pop d
1350   0D23 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1351   0D27 E4            pop a
1352   0D28 2A            mov b, [d]
1353   0D29 38 00 00      mov c, 0
1354   0D2C 56            add b, a
1355   0D2D E4            pop a
1356   0D2E             ; --- END TERMS
1357   0D2E 74            mov d, b
1358   0D2F 32            mov bl, [d]
1359   0D30 A7 00         mov bh, 0
1360   0D32 38 00 00      mov c, 0
1361   0D35             ; --- START RELATIONAL
1362   0D35 D7            push a
1363   0D36 11            mov a, b
1364   0D37 FD 2E 44 00   mov32 cb, $00000044
1364   0D3B 00 00 
1365   0D3D B0            cmp a, b
1366   0D3E FD 71         seq ; ==
1367   0D40 E4            pop a
1368   0D41             ; --- END RELATIONAL
1369   0D41 FD A7         sand a, b
1370   0D43 E4            pop a
1371   0D44             ; --- END LOGICAL AND
1372   0D44 E7            pop d
1373   0D45 FD 43         mov [d], b
1374   0D47             ; pass = pass && *(p + indices[4]) == 'E'; 
1375   0D47 FA FF FF      lea d, [bp + -1] ; $pass
1376   0D4A DA            push d
1377   0D4B FA FF FF      lea d, [bp + -1] ; $pass
1378   0D4E 2A            mov b, [d]
1379   0D4F 38 00 00      mov c, 0
1380   0D52             ; --- START LOGICAL AND
1381   0D52 D7            push a
1382   0D53 11            mov a, b
1383   0D54 FA EE FF      lea d, [bp + -18] ; $p
1384   0D57 2A            mov b, [d]
1385   0D58 38 00 00      mov c, 0
1386   0D5B             ; --- START TERMS
1387   0D5B D7            push a
1388   0D5C 11            mov a, b
1389   0D5D FA F0 FF      lea d, [bp + -16] ; $indices
1390   0D60 D7            push a
1391   0D61 DA            push d
1392   0D62 FD 2E 04 00   mov32 cb, $00000004
1392   0D66 00 00 
1393   0D68 E7            pop d
1394   0D69 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1395   0D6D E4            pop a
1396   0D6E 2A            mov b, [d]
1397   0D6F 38 00 00      mov c, 0
1398   0D72 56            add b, a
1399   0D73 E4            pop a
1400   0D74             ; --- END TERMS
1401   0D74 74            mov d, b
1402   0D75 32            mov bl, [d]
1403   0D76 A7 00         mov bh, 0
1404   0D78 38 00 00      mov c, 0
1405   0D7B             ; --- START RELATIONAL
1406   0D7B D7            push a
1407   0D7C 11            mov a, b
1408   0D7D FD 2E 45 00   mov32 cb, $00000045
1408   0D81 00 00 
1409   0D83 B0            cmp a, b
1410   0D84 FD 71         seq ; ==
1411   0D86 E4            pop a
1412   0D87             ; --- END RELATIONAL
1413   0D87 FD A7         sand a, b
1414   0D89 E4            pop a
1415   0D8A             ; --- END LOGICAL AND
1416   0D8A E7            pop d
1417   0D8B FD 43         mov [d], b
1418   0D8D             ; return pass; 
1419   0D8D FA FF FF      lea d, [bp + -1] ; $pass
1420   0D90 2A            mov b, [d]
1421   0D91 38 00 00      mov c, 0
1422   0D94 F9            leave
1423   0D95 09            ret
1424   0D96             
1425   0D96             test3:
1426   0D96 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1427   0D99             ; int pass = 1; 
1428   0D99 52 02 00      sub sp, 2
1429   0D9C             ; --- START LOCAL VAR INITIALIZATION
1430   0D9C FA FF FF      lea d, [bp + -1] ; $pass
1431   0D9F DA            push d
1432   0DA0 FD 2E 01 00   mov32 cb, $00000001
1432   0DA4 00 00 
1433   0DA6 E7            pop d
1434   0DA7 FD 43         mov [d], b
1435   0DA9             ; --- END LOCAL VAR INITIALIZATION
1436   0DA9             ; st.c = 'A'; 
1437   0DA9 FA 05 00      lea d, [bp + 5] ; $st
1438   0DAC 58 00 00      add d, 0
1439   0DAF DA            push d
1440   0DB0 FD 2E 41 00   mov32 cb, $00000041
1440   0DB4 00 00 
1441   0DB6 E7            pop d
1442   0DB7 FD 3E         mov [d], bl
1443   0DB9             ; st.i = 277; 
1444   0DB9 FA 05 00      lea d, [bp + 5] ; $st
1445   0DBC 58 01 00      add d, 1
1446   0DBF DA            push d
1447   0DC0 FD 2E 15 01   mov32 cb, $00000115
1447   0DC4 00 00 
1448   0DC6 E7            pop d
1449   0DC7 FD 43         mov [d], b
1450   0DC9             ; st.m[0] = 0; 
1451   0DC9 FA 05 00      lea d, [bp + 5] ; $st
1452   0DCC 58 03 00      add d, 3
1453   0DCF D7            push a
1454   0DD0 DA            push d
1455   0DD1 FD 2E 00 00   mov32 cb, $00000000
1455   0DD5 00 00 
1456   0DD7 E7            pop d
1457   0DD8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1458   0DDC E4            pop a
1459   0DDD DA            push d
1460   0DDE FD 2E 00 00   mov32 cb, $00000000
1460   0DE2 00 00 
1461   0DE4 E7            pop d
1462   0DE5 FD 43         mov [d], b
1463   0DE7             ; st.m[1] = 1; 
1464   0DE7 FA 05 00      lea d, [bp + 5] ; $st
1465   0DEA 58 03 00      add d, 3
1466   0DED D7            push a
1467   0DEE DA            push d
1468   0DEF FD 2E 01 00   mov32 cb, $00000001
1468   0DF3 00 00 
1469   0DF5 E7            pop d
1470   0DF6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1471   0DFA E4            pop a
1472   0DFB DA            push d
1473   0DFC FD 2E 01 00   mov32 cb, $00000001
1473   0E00 00 00 
1474   0E02 E7            pop d
1475   0E03 FD 43         mov [d], b
1476   0E05             ; st.m[2] = 2; 
1477   0E05 FA 05 00      lea d, [bp + 5] ; $st
1478   0E08 58 03 00      add d, 3
1479   0E0B D7            push a
1480   0E0C DA            push d
1481   0E0D FD 2E 02 00   mov32 cb, $00000002
1481   0E11 00 00 
1482   0E13 E7            pop d
1483   0E14 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1484   0E18 E4            pop a
1485   0E19 DA            push d
1486   0E1A FD 2E 02 00   mov32 cb, $00000002
1486   0E1E 00 00 
1487   0E20 E7            pop d
1488   0E21 FD 43         mov [d], b
1489   0E23             ; st.m[3] = 3; 
1490   0E23 FA 05 00      lea d, [bp + 5] ; $st
1491   0E26 58 03 00      add d, 3
1492   0E29 D7            push a
1493   0E2A DA            push d
1494   0E2B FD 2E 03 00   mov32 cb, $00000003
1494   0E2F 00 00 
1495   0E31 E7            pop d
1496   0E32 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1497   0E36 E4            pop a
1498   0E37 DA            push d
1499   0E38 FD 2E 03 00   mov32 cb, $00000003
1499   0E3C 00 00 
1500   0E3E E7            pop d
1501   0E3F FD 43         mov [d], b
1502   0E41             ; st.m[4] = 4; 
1503   0E41 FA 05 00      lea d, [bp + 5] ; $st
1504   0E44 58 03 00      add d, 3
1505   0E47 D7            push a
1506   0E48 DA            push d
1507   0E49 FD 2E 04 00   mov32 cb, $00000004
1507   0E4D 00 00 
1508   0E4F E7            pop d
1509   0E50 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1510   0E54 E4            pop a
1511   0E55 DA            push d
1512   0E56 FD 2E 04 00   mov32 cb, $00000004
1512   0E5A 00 00 
1513   0E5C E7            pop d
1514   0E5D FD 43         mov [d], b
1515   0E5F             ; pass = pass && st.c == 'A'; 
1516   0E5F FA FF FF      lea d, [bp + -1] ; $pass
1517   0E62 DA            push d
1518   0E63 FA FF FF      lea d, [bp + -1] ; $pass
1519   0E66 2A            mov b, [d]
1520   0E67 38 00 00      mov c, 0
1521   0E6A             ; --- START LOGICAL AND
1522   0E6A D7            push a
1523   0E6B 11            mov a, b
1524   0E6C FA 05 00      lea d, [bp + 5] ; $st
1525   0E6F 58 00 00      add d, 0
1526   0E72 32            mov bl, [d]
1527   0E73 A7 00         mov bh, 0
1528   0E75 38 00 00      mov c, 0
1529   0E78             ; --- START RELATIONAL
1530   0E78 D7            push a
1531   0E79 11            mov a, b
1532   0E7A FD 2E 41 00   mov32 cb, $00000041
1532   0E7E 00 00 
1533   0E80 B0            cmp a, b
1534   0E81 FD 71         seq ; ==
1535   0E83 E4            pop a
1536   0E84             ; --- END RELATIONAL
1537   0E84 FD A7         sand a, b
1538   0E86 E4            pop a
1539   0E87             ; --- END LOGICAL AND
1540   0E87 E7            pop d
1541   0E88 FD 43         mov [d], b
1542   0E8A             ; pass = pass && st.i == 277; 
1543   0E8A FA FF FF      lea d, [bp + -1] ; $pass
1544   0E8D DA            push d
1545   0E8E FA FF FF      lea d, [bp + -1] ; $pass
1546   0E91 2A            mov b, [d]
1547   0E92 38 00 00      mov c, 0
1548   0E95             ; --- START LOGICAL AND
1549   0E95 D7            push a
1550   0E96 11            mov a, b
1551   0E97 FA 05 00      lea d, [bp + 5] ; $st
1552   0E9A 58 01 00      add d, 1
1553   0E9D 2A            mov b, [d]
1554   0E9E 38 00 00      mov c, 0
1555   0EA1             ; --- START RELATIONAL
1556   0EA1 D7            push a
1557   0EA2 11            mov a, b
1558   0EA3 FD 2E 15 01   mov32 cb, $00000115
1558   0EA7 00 00 
1559   0EA9 B0            cmp a, b
1560   0EAA FD 71         seq ; ==
1561   0EAC E4            pop a
1562   0EAD             ; --- END RELATIONAL
1563   0EAD FD A7         sand a, b
1564   0EAF E4            pop a
1565   0EB0             ; --- END LOGICAL AND
1566   0EB0 E7            pop d
1567   0EB1 FD 43         mov [d], b
1568   0EB3             ; pass = pass && st.m[0] == 0; 
1569   0EB3 FA FF FF      lea d, [bp + -1] ; $pass
1570   0EB6 DA            push d
1571   0EB7 FA FF FF      lea d, [bp + -1] ; $pass
1572   0EBA 2A            mov b, [d]
1573   0EBB 38 00 00      mov c, 0
1574   0EBE             ; --- START LOGICAL AND
1575   0EBE D7            push a
1576   0EBF 11            mov a, b
1577   0EC0 FA 05 00      lea d, [bp + 5] ; $st
1578   0EC3 58 03 00      add d, 3
1579   0EC6 D7            push a
1580   0EC7 DA            push d
1581   0EC8 FD 2E 00 00   mov32 cb, $00000000
1581   0ECC 00 00 
1582   0ECE E7            pop d
1583   0ECF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1584   0ED3 E4            pop a
1585   0ED4 2A            mov b, [d]
1586   0ED5 38 00 00      mov c, 0
1587   0ED8             ; --- START RELATIONAL
1588   0ED8 D7            push a
1589   0ED9 11            mov a, b
1590   0EDA FD 2E 00 00   mov32 cb, $00000000
1590   0EDE 00 00 
1591   0EE0 B0            cmp a, b
1592   0EE1 FD 71         seq ; ==
1593   0EE3 E4            pop a
1594   0EE4             ; --- END RELATIONAL
1595   0EE4 FD A7         sand a, b
1596   0EE6 E4            pop a
1597   0EE7             ; --- END LOGICAL AND
1598   0EE7 E7            pop d
1599   0EE8 FD 43         mov [d], b
1600   0EEA             ; pass = pass && st.m[1] == 1; 
1601   0EEA FA FF FF      lea d, [bp + -1] ; $pass
1602   0EED DA            push d
1603   0EEE FA FF FF      lea d, [bp + -1] ; $pass
1604   0EF1 2A            mov b, [d]
1605   0EF2 38 00 00      mov c, 0
1606   0EF5             ; --- START LOGICAL AND
1607   0EF5 D7            push a
1608   0EF6 11            mov a, b
1609   0EF7 FA 05 00      lea d, [bp + 5] ; $st
1610   0EFA 58 03 00      add d, 3
1611   0EFD D7            push a
1612   0EFE DA            push d
1613   0EFF FD 2E 01 00   mov32 cb, $00000001
1613   0F03 00 00 
1614   0F05 E7            pop d
1615   0F06 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1616   0F0A E4            pop a
1617   0F0B 2A            mov b, [d]
1618   0F0C 38 00 00      mov c, 0
1619   0F0F             ; --- START RELATIONAL
1620   0F0F D7            push a
1621   0F10 11            mov a, b
1622   0F11 FD 2E 01 00   mov32 cb, $00000001
1622   0F15 00 00 
1623   0F17 B0            cmp a, b
1624   0F18 FD 71         seq ; ==
1625   0F1A E4            pop a
1626   0F1B             ; --- END RELATIONAL
1627   0F1B FD A7         sand a, b
1628   0F1D E4            pop a
1629   0F1E             ; --- END LOGICAL AND
1630   0F1E E7            pop d
1631   0F1F FD 43         mov [d], b
1632   0F21             ; pass = pass && st.m[2] == 2; 
1633   0F21 FA FF FF      lea d, [bp + -1] ; $pass
1634   0F24 DA            push d
1635   0F25 FA FF FF      lea d, [bp + -1] ; $pass
1636   0F28 2A            mov b, [d]
1637   0F29 38 00 00      mov c, 0
1638   0F2C             ; --- START LOGICAL AND
1639   0F2C D7            push a
1640   0F2D 11            mov a, b
1641   0F2E FA 05 00      lea d, [bp + 5] ; $st
1642   0F31 58 03 00      add d, 3
1643   0F34 D7            push a
1644   0F35 DA            push d
1645   0F36 FD 2E 02 00   mov32 cb, $00000002
1645   0F3A 00 00 
1646   0F3C E7            pop d
1647   0F3D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1648   0F41 E4            pop a
1649   0F42 2A            mov b, [d]
1650   0F43 38 00 00      mov c, 0
1651   0F46             ; --- START RELATIONAL
1652   0F46 D7            push a
1653   0F47 11            mov a, b
1654   0F48 FD 2E 02 00   mov32 cb, $00000002
1654   0F4C 00 00 
1655   0F4E B0            cmp a, b
1656   0F4F FD 71         seq ; ==
1657   0F51 E4            pop a
1658   0F52             ; --- END RELATIONAL
1659   0F52 FD A7         sand a, b
1660   0F54 E4            pop a
1661   0F55             ; --- END LOGICAL AND
1662   0F55 E7            pop d
1663   0F56 FD 43         mov [d], b
1664   0F58             ; pass = pass && st.m[3] == 3; 
1665   0F58 FA FF FF      lea d, [bp + -1] ; $pass
1666   0F5B DA            push d
1667   0F5C FA FF FF      lea d, [bp + -1] ; $pass
1668   0F5F 2A            mov b, [d]
1669   0F60 38 00 00      mov c, 0
1670   0F63             ; --- START LOGICAL AND
1671   0F63 D7            push a
1672   0F64 11            mov a, b
1673   0F65 FA 05 00      lea d, [bp + 5] ; $st
1674   0F68 58 03 00      add d, 3
1675   0F6B D7            push a
1676   0F6C DA            push d
1677   0F6D FD 2E 03 00   mov32 cb, $00000003
1677   0F71 00 00 
1678   0F73 E7            pop d
1679   0F74 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1680   0F78 E4            pop a
1681   0F79 2A            mov b, [d]
1682   0F7A 38 00 00      mov c, 0
1683   0F7D             ; --- START RELATIONAL
1684   0F7D D7            push a
1685   0F7E 11            mov a, b
1686   0F7F FD 2E 03 00   mov32 cb, $00000003
1686   0F83 00 00 
1687   0F85 B0            cmp a, b
1688   0F86 FD 71         seq ; ==
1689   0F88 E4            pop a
1690   0F89             ; --- END RELATIONAL
1691   0F89 FD A7         sand a, b
1692   0F8B E4            pop a
1693   0F8C             ; --- END LOGICAL AND
1694   0F8C E7            pop d
1695   0F8D FD 43         mov [d], b
1696   0F8F             ; pass = pass && st.m[4] == 4; 
1697   0F8F FA FF FF      lea d, [bp + -1] ; $pass
1698   0F92 DA            push d
1699   0F93 FA FF FF      lea d, [bp + -1] ; $pass
1700   0F96 2A            mov b, [d]
1701   0F97 38 00 00      mov c, 0
1702   0F9A             ; --- START LOGICAL AND
1703   0F9A D7            push a
1704   0F9B 11            mov a, b
1705   0F9C FA 05 00      lea d, [bp + 5] ; $st
1706   0F9F 58 03 00      add d, 3
1707   0FA2 D7            push a
1708   0FA3 DA            push d
1709   0FA4 FD 2E 04 00   mov32 cb, $00000004
1709   0FA8 00 00 
1710   0FAA E7            pop d
1711   0FAB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1712   0FAF E4            pop a
1713   0FB0 2A            mov b, [d]
1714   0FB1 38 00 00      mov c, 0
1715   0FB4             ; --- START RELATIONAL
1716   0FB4 D7            push a
1717   0FB5 11            mov a, b
1718   0FB6 FD 2E 04 00   mov32 cb, $00000004
1718   0FBA 00 00 
1719   0FBC B0            cmp a, b
1720   0FBD FD 71         seq ; ==
1721   0FBF E4            pop a
1722   0FC0             ; --- END RELATIONAL
1723   0FC0 FD A7         sand a, b
1724   0FC2 E4            pop a
1725   0FC3             ; --- END LOGICAL AND
1726   0FC3 E7            pop d
1727   0FC4 FD 43         mov [d], b
1728   0FC6             ; return pass; 
1729   0FC6 FA FF FF      lea d, [bp + -1] ; $pass
1730   0FC9 2A            mov b, [d]
1731   0FCA 38 00 00      mov c, 0
1732   0FCD F9            leave
1733   0FCE 09            ret
1734   0FCF             
1735   0FCF             printf:
1736   0FCF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1737   0FD2             ; char *p, *format_p; 
1738   0FD2 52 02 00      sub sp, 2
1739   0FD5 52 02 00      sub sp, 2
1740   0FD8             ; format_p = format; 
1741   0FD8 FA FD FF      lea d, [bp + -3] ; $format_p
1742   0FDB DA            push d
1743   0FDC FA 05 00      lea d, [bp + 5] ; $format
1744   0FDF 2A            mov b, [d]
1745   0FE0 38 00 00      mov c, 0
1746   0FE3 E7            pop d
1747   0FE4 FD 43         mov [d], b
1748   0FE6             ; p = &format + 2; 
1749   0FE6 FA FF FF      lea d, [bp + -1] ; $p
1750   0FE9 DA            push d
1751   0FEA FA 05 00      lea d, [bp + 5] ; $format
1752   0FED 2D            mov b, d
1753   0FEE             ; --- START TERMS
1754   0FEE D7            push a
1755   0FEF 11            mov a, b
1756   0FF0 FD 2E 02 00   mov32 cb, $00000002
1756   0FF4 00 00 
1757   0FF6 56            add b, a
1758   0FF7 E4            pop a
1759   0FF8             ; --- END TERMS
1760   0FF8 E7            pop d
1761   0FF9 FD 43         mov [d], b
1762   0FFB             ; for(;;){ 
1763   0FFB             _for3_init:
1764   0FFB             _for3_cond:
1765   0FFB             _for3_block:
1766   0FFB             ; if(!*format_p) break; 
1767   0FFB             _if4_cond:
1768   0FFB FA FD FF      lea d, [bp + -3] ; $format_p
1769   0FFE 2A            mov b, [d]
1770   0FFF 38 00 00      mov c, 0
1771   1002 74            mov d, b
1772   1003 32            mov bl, [d]
1773   1004 A7 00         mov bh, 0
1774   1006 38 00 00      mov c, 0
1775   1009 C0 00 00      cmp b, 0
1776   100C FD 71         seq ; !
1777   100E C0 00 00      cmp b, 0
1778   1011 C6 1A 10      je _if4_else
1779   1014             _if4_TRUE:
1780   1014             ; break; 
1781   1014 0A BA 12      jmp _for3_exit ; for break
1782   1017 0A A7 12      jmp _if4_exit
1783   101A             _if4_else:
1784   101A             ; if(*format_p == '%'){ 
1785   101A             _if5_cond:
1786   101A FA FD FF      lea d, [bp + -3] ; $format_p
1787   101D 2A            mov b, [d]
1788   101E 38 00 00      mov c, 0
1789   1021 74            mov d, b
1790   1022 32            mov bl, [d]
1791   1023 A7 00         mov bh, 0
1792   1025 38 00 00      mov c, 0
1793   1028             ; --- START RELATIONAL
1794   1028 D7            push a
1795   1029 11            mov a, b
1796   102A FD 2E 25 00   mov32 cb, $00000025
1796   102E 00 00 
1797   1030 B0            cmp a, b
1798   1031 FD 71         seq ; ==
1799   1033 E4            pop a
1800   1034             ; --- END RELATIONAL
1801   1034 C0 00 00      cmp b, 0
1802   1037 C6 92 12      je _if5_else
1803   103A             _if5_TRUE:
1804   103A             ; format_p++; 
1805   103A FA FD FF      lea d, [bp + -3] ; $format_p
1806   103D 2A            mov b, [d]
1807   103E 38 00 00      mov c, 0
1808   1041 FD 77         inc b
1809   1043 FA FD FF      lea d, [bp + -3] ; $format_p
1810   1046 FD 43         mov [d], b
1811   1048 FD 7D         dec b
1812   104A             ; switch(*format_p){ 
1813   104A             _switch6_expr:
1814   104A FA FD FF      lea d, [bp + -3] ; $format_p
1815   104D 2A            mov b, [d]
1816   104E 38 00 00      mov c, 0
1817   1051 74            mov d, b
1818   1052 32            mov bl, [d]
1819   1053 A7 00         mov bh, 0
1820   1055 38 00 00      mov c, 0
1821   1058             _switch6_comparisons:
1822   1058 C1 6C         cmp bl, $6c
1823   105A C6 86 10      je _switch6_case0
1824   105D C1 4C         cmp bl, $4c
1825   105F C6 86 10      je _switch6_case1
1826   1062 C1 64         cmp bl, $64
1827   1064 C6 96 11      je _switch6_case2
1828   1067 C1 69         cmp bl, $69
1829   1069 C6 96 11      je _switch6_case3
1830   106C C1 75         cmp bl, $75
1831   106E C6 C6 11      je _switch6_case4
1832   1071 C1 78         cmp bl, $78
1833   1073 C6 F6 11      je _switch6_case5
1834   1076 C1 63         cmp bl, $63
1835   1078 C6 26 12      je _switch6_case6
1836   107B C1 73         cmp bl, $73
1837   107D C6 56 12      je _switch6_case7
1838   1080 0A 83 12      jmp _switch6_default
1839   1083 0A 8F 12      jmp _switch6_exit
1840   1086             _switch6_case0:
1841   1086             _switch6_case1:
1842   1086             ; format_p++; 
1843   1086 FA FD FF      lea d, [bp + -3] ; $format_p
1844   1089 2A            mov b, [d]
1845   108A 38 00 00      mov c, 0
1846   108D FD 77         inc b
1847   108F FA FD FF      lea d, [bp + -3] ; $format_p
1848   1092 FD 43         mov [d], b
1849   1094 FD 7D         dec b
1850   1096             ; if(*format_p == 'd' || *format_p == 'i') 
1851   1096             _if7_cond:
1852   1096 FA FD FF      lea d, [bp + -3] ; $format_p
1853   1099 2A            mov b, [d]
1854   109A 38 00 00      mov c, 0
1855   109D 74            mov d, b
1856   109E 32            mov bl, [d]
1857   109F A7 00         mov bh, 0
1858   10A1 38 00 00      mov c, 0
1859   10A4             ; --- START RELATIONAL
1860   10A4 D7            push a
1861   10A5 11            mov a, b
1862   10A6 FD 2E 64 00   mov32 cb, $00000064
1862   10AA 00 00 
1863   10AC B0            cmp a, b
1864   10AD FD 71         seq ; ==
1865   10AF E4            pop a
1866   10B0             ; --- END RELATIONAL
1867   10B0             ; --- START LOGICAL OR
1868   10B0 D7            push a
1869   10B1 11            mov a, b
1870   10B2 FA FD FF      lea d, [bp + -3] ; $format_p
1871   10B5 2A            mov b, [d]
1872   10B6 38 00 00      mov c, 0
1873   10B9 74            mov d, b
1874   10BA 32            mov bl, [d]
1875   10BB A7 00         mov bh, 0
1876   10BD 38 00 00      mov c, 0
1877   10C0             ; --- START RELATIONAL
1878   10C0 D7            push a
1879   10C1 11            mov a, b
1880   10C2 FD 2E 69 00   mov32 cb, $00000069
1880   10C6 00 00 
1881   10C8 B0            cmp a, b
1882   10C9 FD 71         seq ; ==
1883   10CB E4            pop a
1884   10CC             ; --- END RELATIONAL
1885   10CC FD A8         sor a, b ; ||
1886   10CE E4            pop a
1887   10CF             ; --- END LOGICAL OR
1888   10CF C0 00 00      cmp b, 0
1889   10D2 C6 F3 10      je _if7_else
1890   10D5             _if7_TRUE:
1891   10D5             ; print_signed_long(*(long *)p); 
1892   10D5             ; --- START FUNCTION CALL
1893   10D5 FA FF FF      lea d, [bp + -1] ; $p
1894   10D8 2A            mov b, [d]
1895   10D9 38 00 00      mov c, 0
1896   10DC 74            mov d, b
1897   10DD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1898   10E0 FD 39         mov c, b ; And place it into C
1899   10E2 2A            mov b, [d] ; Lower Word in B
1900   10E3 12            mov a, c
1901   10E4 FD AA         swp a
1902   10E6 D7            push a
1903   10E7 FD AB         swp b
1904   10E9 D8            push b
1905   10EA 07 BC 12      call print_signed_long
1906   10ED 51 04 00      add sp, 4
1907   10F0             ; --- END FUNCTION CALL
1908   10F0 0A 7B 11      jmp _if7_exit
1909   10F3             _if7_else:
1910   10F3             ; if(*format_p == 'u') 
1911   10F3             _if8_cond:
1912   10F3 FA FD FF      lea d, [bp + -3] ; $format_p
1913   10F6 2A            mov b, [d]
1914   10F7 38 00 00      mov c, 0
1915   10FA 74            mov d, b
1916   10FB 32            mov bl, [d]
1917   10FC A7 00         mov bh, 0
1918   10FE 38 00 00      mov c, 0
1919   1101             ; --- START RELATIONAL
1920   1101 D7            push a
1921   1102 11            mov a, b
1922   1103 FD 2E 75 00   mov32 cb, $00000075
1922   1107 00 00 
1923   1109 B0            cmp a, b
1924   110A FD 71         seq ; ==
1925   110C E4            pop a
1926   110D             ; --- END RELATIONAL
1927   110D C0 00 00      cmp b, 0
1928   1110 C6 31 11      je _if8_else
1929   1113             _if8_TRUE:
1930   1113             ; print_unsigned_long(*(unsigned long *)p); 
1931   1113             ; --- START FUNCTION CALL
1932   1113 FA FF FF      lea d, [bp + -1] ; $p
1933   1116 2A            mov b, [d]
1934   1117 38 00 00      mov c, 0
1935   111A 74            mov d, b
1936   111B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1937   111E FD 39         mov c, b ; And place it into C
1938   1120 2A            mov b, [d] ; Lower Word in B
1939   1121 12            mov a, c
1940   1122 FD AA         swp a
1941   1124 D7            push a
1942   1125 FD AB         swp b
1943   1127 D8            push b
1944   1128 07 5C 14      call print_unsigned_long
1945   112B 51 04 00      add sp, 4
1946   112E             ; --- END FUNCTION CALL
1947   112E 0A 7B 11      jmp _if8_exit
1948   1131             _if8_else:
1949   1131             ; if(*format_p == 'x') 
1950   1131             _if9_cond:
1951   1131 FA FD FF      lea d, [bp + -3] ; $format_p
1952   1134 2A            mov b, [d]
1953   1135 38 00 00      mov c, 0
1954   1138 74            mov d, b
1955   1139 32            mov bl, [d]
1956   113A A7 00         mov bh, 0
1957   113C 38 00 00      mov c, 0
1958   113F             ; --- START RELATIONAL
1959   113F D7            push a
1960   1140 11            mov a, b
1961   1141 FD 2E 78 00   mov32 cb, $00000078
1961   1145 00 00 
1962   1147 B0            cmp a, b
1963   1148 FD 71         seq ; ==
1964   114A E4            pop a
1965   114B             ; --- END RELATIONAL
1966   114B C0 00 00      cmp b, 0
1967   114E C6 6F 11      je _if9_else
1968   1151             _if9_TRUE:
1969   1151             ; printx32(*(long int *)p); 
1970   1151             ; --- START FUNCTION CALL
1971   1151 FA FF FF      lea d, [bp + -1] ; $p
1972   1154 2A            mov b, [d]
1973   1155 38 00 00      mov c, 0
1974   1158 74            mov d, b
1975   1159 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1976   115C FD 39         mov c, b ; And place it into C
1977   115E 2A            mov b, [d] ; Lower Word in B
1978   115F 12            mov a, c
1979   1160 FD AA         swp a
1980   1162 D7            push a
1981   1163 FD AB         swp b
1982   1165 D8            push b
1983   1166 07 9A 15      call printx32
1984   1169 51 04 00      add sp, 4
1985   116C             ; --- END FUNCTION CALL
1986   116C 0A 7B 11      jmp _if9_exit
1987   116F             _if9_else:
1988   116F             ; err("Unexpected format in printf."); 
1989   116F             ; --- START FUNCTION CALL
1990   116F 26 05 19      mov b, _s1 ; "Unexpected format in printf."
1991   1172 FD AB         swp b
1992   1174 D8            push b
1993   1175 07 FA 15      call err
1994   1178 51 02 00      add sp, 2
1995   117B             ; --- END FUNCTION CALL
1996   117B             _if9_exit:
1997   117B             _if8_exit:
1998   117B             _if7_exit:
1999   117B             ; p = p + 4; 
2000   117B FA FF FF      lea d, [bp + -1] ; $p
2001   117E DA            push d
2002   117F FA FF FF      lea d, [bp + -1] ; $p
2003   1182 2A            mov b, [d]
2004   1183 38 00 00      mov c, 0
2005   1186             ; --- START TERMS
2006   1186 D7            push a
2007   1187 11            mov a, b
2008   1188 FD 2E 04 00   mov32 cb, $00000004
2008   118C 00 00 
2009   118E 56            add b, a
2010   118F E4            pop a
2011   1190             ; --- END TERMS
2012   1190 E7            pop d
2013   1191 FD 43         mov [d], b
2014   1193             ; break; 
2015   1193 0A 8F 12      jmp _switch6_exit ; case break
2016   1196             _switch6_case2:
2017   1196             _switch6_case3:
2018   1196             ; print_signed(*(int*)p); 
2019   1196             ; --- START FUNCTION CALL
2020   1196 FA FF FF      lea d, [bp + -1] ; $p
2021   1199 2A            mov b, [d]
2022   119A 38 00 00      mov c, 0
2023   119D 74            mov d, b
2024   119E 2A            mov b, [d]
2025   119F 38 00 00      mov c, 0
2026   11A2 FD AB         swp b
2027   11A4 D8            push b
2028   11A5 07 28 16      call print_signed
2029   11A8 51 02 00      add sp, 2
2030   11AB             ; --- END FUNCTION CALL
2031   11AB             ; p = p + 2; 
2032   11AB FA FF FF      lea d, [bp + -1] ; $p
2033   11AE DA            push d
2034   11AF FA FF FF      lea d, [bp + -1] ; $p
2035   11B2 2A            mov b, [d]
2036   11B3 38 00 00      mov c, 0
2037   11B6             ; --- START TERMS
2038   11B6 D7            push a
2039   11B7 11            mov a, b
2040   11B8 FD 2E 02 00   mov32 cb, $00000002
2040   11BC 00 00 
2041   11BE 56            add b, a
2042   11BF E4            pop a
2043   11C0             ; --- END TERMS
2044   11C0 E7            pop d
2045   11C1 FD 43         mov [d], b
2046   11C3             ; break; 
2047   11C3 0A 8F 12      jmp _switch6_exit ; case break
2048   11C6             _switch6_case4:
2049   11C6             ; print_unsigned(*(unsigned int*)p); 
2050   11C6             ; --- START FUNCTION CALL
2051   11C6 FA FF FF      lea d, [bp + -1] ; $p
2052   11C9 2A            mov b, [d]
2053   11CA 38 00 00      mov c, 0
2054   11CD 74            mov d, b
2055   11CE 2A            mov b, [d]
2056   11CF 38 00 00      mov c, 0
2057   11D2 FD AB         swp b
2058   11D4 D8            push b
2059   11D5 07 79 17      call print_unsigned
2060   11D8 51 02 00      add sp, 2
2061   11DB             ; --- END FUNCTION CALL
2062   11DB             ; p = p + 2; 
2063   11DB FA FF FF      lea d, [bp + -1] ; $p
2064   11DE DA            push d
2065   11DF FA FF FF      lea d, [bp + -1] ; $p
2066   11E2 2A            mov b, [d]
2067   11E3 38 00 00      mov c, 0
2068   11E6             ; --- START TERMS
2069   11E6 D7            push a
2070   11E7 11            mov a, b
2071   11E8 FD 2E 02 00   mov32 cb, $00000002
2071   11EC 00 00 
2072   11EE 56            add b, a
2073   11EF E4            pop a
2074   11F0             ; --- END TERMS
2075   11F0 E7            pop d
2076   11F1 FD 43         mov [d], b
2077   11F3             ; break; 
2078   11F3 0A 8F 12      jmp _switch6_exit ; case break
2079   11F6             _switch6_case5:
2080   11F6             ; printx16(*(int*)p); 
2081   11F6             ; --- START FUNCTION CALL
2082   11F6 FA FF FF      lea d, [bp + -1] ; $p
2083   11F9 2A            mov b, [d]
2084   11FA 38 00 00      mov c, 0
2085   11FD 74            mov d, b
2086   11FE 2A            mov b, [d]
2087   11FF 38 00 00      mov c, 0
2088   1202 FD AB         swp b
2089   1204 D8            push b
2090   1205 07 91 18      call printx16
2091   1208 51 02 00      add sp, 2
2092   120B             ; --- END FUNCTION CALL
2093   120B             ; p = p + 2; 
2094   120B FA FF FF      lea d, [bp + -1] ; $p
2095   120E DA            push d
2096   120F FA FF FF      lea d, [bp + -1] ; $p
2097   1212 2A            mov b, [d]
2098   1213 38 00 00      mov c, 0
2099   1216             ; --- START TERMS
2100   1216 D7            push a
2101   1217 11            mov a, b
2102   1218 FD 2E 02 00   mov32 cb, $00000002
2102   121C 00 00 
2103   121E 56            add b, a
2104   121F E4            pop a
2105   1220             ; --- END TERMS
2106   1220 E7            pop d
2107   1221 FD 43         mov [d], b
2108   1223             ; break; 
2109   1223 0A 8F 12      jmp _switch6_exit ; case break
2110   1226             _switch6_case6:
2111   1226             ; putchar(*(char*)p); 
2112   1226             ; --- START FUNCTION CALL
2113   1226 FA FF FF      lea d, [bp + -1] ; $p
2114   1229 2A            mov b, [d]
2115   122A 38 00 00      mov c, 0
2116   122D 74            mov d, b
2117   122E 32            mov bl, [d]
2118   122F A7 00         mov bh, 0
2119   1231 38 00 00      mov c, 0
2120   1234 DD            push bl
2121   1235 07 4E 14      call putchar
2122   1238 51 01 00      add sp, 1
2123   123B             ; --- END FUNCTION CALL
2124   123B             ; p = p + 2; 
2125   123B FA FF FF      lea d, [bp + -1] ; $p
2126   123E DA            push d
2127   123F FA FF FF      lea d, [bp + -1] ; $p
2128   1242 2A            mov b, [d]
2129   1243 38 00 00      mov c, 0
2130   1246             ; --- START TERMS
2131   1246 D7            push a
2132   1247 11            mov a, b
2133   1248 FD 2E 02 00   mov32 cb, $00000002
2133   124C 00 00 
2134   124E 56            add b, a
2135   124F E4            pop a
2136   1250             ; --- END TERMS
2137   1250 E7            pop d
2138   1251 FD 43         mov [d], b
2139   1253             ; break; 
2140   1253 0A 8F 12      jmp _switch6_exit ; case break
2141   1256             _switch6_case7:
2142   1256             ; print(*(char**)p); 
2143   1256             ; --- START FUNCTION CALL
2144   1256 FA FF FF      lea d, [bp + -1] ; $p
2145   1259 2A            mov b, [d]
2146   125A 38 00 00      mov c, 0
2147   125D 74            mov d, b
2148   125E 2A            mov b, [d]
2149   125F FD AB         swp b
2150   1261 D8            push b
2151   1262 07 0F 16      call print
2152   1265 51 02 00      add sp, 2
2153   1268             ; --- END FUNCTION CALL
2154   1268             ; p = p + 2; 
2155   1268 FA FF FF      lea d, [bp + -1] ; $p
2156   126B DA            push d
2157   126C FA FF FF      lea d, [bp + -1] ; $p
2158   126F 2A            mov b, [d]
2159   1270 38 00 00      mov c, 0
2160   1273             ; --- START TERMS
2161   1273 D7            push a
2162   1274 11            mov a, b
2163   1275 FD 2E 02 00   mov32 cb, $00000002
2163   1279 00 00 
2164   127B 56            add b, a
2165   127C E4            pop a
2166   127D             ; --- END TERMS
2167   127D E7            pop d
2168   127E FD 43         mov [d], b
2169   1280             ; break; 
2170   1280 0A 8F 12      jmp _switch6_exit ; case break
2171   1283             _switch6_default:
2172   1283             ; print("Error: Unknown argument type.\n"); 
2173   1283             ; --- START FUNCTION CALL
2174   1283 26 22 19      mov b, _s2 ; "Error: Unknown argument type.\n"
2175   1286 FD AB         swp b
2176   1288 D8            push b
2177   1289 07 0F 16      call print
2178   128C 51 02 00      add sp, 2
2179   128F             ; --- END FUNCTION CALL
2180   128F             _switch6_exit:
2181   128F 0A A7 12      jmp _if5_exit
2182   1292             _if5_else:
2183   1292             ; putchar(*format_p); 
2184   1292             ; --- START FUNCTION CALL
2185   1292 FA FD FF      lea d, [bp + -3] ; $format_p
2186   1295 2A            mov b, [d]
2187   1296 38 00 00      mov c, 0
2188   1299 74            mov d, b
2189   129A 32            mov bl, [d]
2190   129B A7 00         mov bh, 0
2191   129D 38 00 00      mov c, 0
2192   12A0 DD            push bl
2193   12A1 07 4E 14      call putchar
2194   12A4 51 01 00      add sp, 1
2195   12A7             ; --- END FUNCTION CALL
2196   12A7             _if5_exit:
2197   12A7             _if4_exit:
2198   12A7             ; format_p++; 
2199   12A7 FA FD FF      lea d, [bp + -3] ; $format_p
2200   12AA 2A            mov b, [d]
2201   12AB 38 00 00      mov c, 0
2202   12AE FD 77         inc b
2203   12B0 FA FD FF      lea d, [bp + -3] ; $format_p
2204   12B3 FD 43         mov [d], b
2205   12B5 FD 7D         dec b
2206   12B7             _for3_update:
2207   12B7 0A FB 0F      jmp _for3_cond
2208   12BA             _for3_exit:
2209   12BA F9            leave
2210   12BB 09            ret
2211   12BC             
2212   12BC             print_signed_long:
2213   12BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2214   12BF             ; char digits[10]; 
2215   12BF 52 0A 00      sub sp, 10
2216   12C2             ; int i = 0; 
2217   12C2 52 02 00      sub sp, 2
2218   12C5             ; --- START LOCAL VAR INITIALIZATION
2219   12C5 FA F5 FF      lea d, [bp + -11] ; $i
2220   12C8 DA            push d
2221   12C9 FD 2E 00 00   mov32 cb, $00000000
2221   12CD 00 00 
2222   12CF E7            pop d
2223   12D0 FD 43         mov [d], b
2224   12D2             ; --- END LOCAL VAR INITIALIZATION
2225   12D2             ; if (num < 0) { 
2226   12D2             _if10_cond:
2227   12D2 FA 05 00      lea d, [bp + 5] ; $num
2228   12D5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2229   12D8 FD 39         mov c, b ; And place it into C
2230   12DA 2A            mov b, [d] ; Lower Word in B
2231   12DB             ; --- START RELATIONAL
2232   12DB D7            push a
2233   12DC FD D8         push g
2234   12DE 11            mov a, b
2235   12DF FD 7A         mov g, c
2236   12E1 FD 2E 00 00   mov32 cb, $00000000
2236   12E5 00 00 
2237   12E7 38 00 00      mov c, 0
2238   12EA FD AF         cmp32 ga, cb
2239   12EC FD 73         slt ; <
2240   12EE FD F1         pop g
2241   12F0 E4            pop a
2242   12F1             ; --- END RELATIONAL
2243   12F1 C0 00 00      cmp b, 0
2244   12F4 C6 26 13      je _if10_else
2245   12F7             _if10_TRUE:
2246   12F7             ; putchar('-'); 
2247   12F7             ; --- START FUNCTION CALL
2248   12F7 FD 2E 2D 00   mov32 cb, $0000002d
2248   12FB 00 00 
2249   12FD DD            push bl
2250   12FE 07 4E 14      call putchar
2251   1301 51 01 00      add sp, 1
2252   1304             ; --- END FUNCTION CALL
2253   1304             ; num = -num; 
2254   1304 FA 05 00      lea d, [bp + 5] ; $num
2255   1307 DA            push d
2256   1308 FA 05 00      lea d, [bp + 5] ; $num
2257   130B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2258   130E FD 39         mov c, b ; And place it into C
2259   1310 2A            mov b, [d] ; Lower Word in B
2260   1311 12            mov a, c
2261   1312 95            not a
2262   1313 97            not b
2263   1314 55 01 00      add b, 1
2264   1317 5B 00 00      adc a, 0
2265   131A 39            mov c, a
2266   131B E7            pop d
2267   131C FD 43         mov [d], b
2268   131E 28            mov b, c
2269   131F FD 44 02 00   mov [d + 2], b
2270   1323 0A 5D 13      jmp _if10_exit
2271   1326             _if10_else:
2272   1326             ; if (num == 0) { 
2273   1326             _if11_cond:
2274   1326 FA 05 00      lea d, [bp + 5] ; $num
2275   1329 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2276   132C FD 39         mov c, b ; And place it into C
2277   132E 2A            mov b, [d] ; Lower Word in B
2278   132F             ; --- START RELATIONAL
2279   132F D7            push a
2280   1330 FD D8         push g
2281   1332 11            mov a, b
2282   1333 FD 7A         mov g, c
2283   1335 FD 2E 00 00   mov32 cb, $00000000
2283   1339 00 00 
2284   133B 38 00 00      mov c, 0
2285   133E FD AF         cmp32 ga, cb
2286   1340 FD 71         seq ; ==
2287   1342 FD F1         pop g
2288   1344 E4            pop a
2289   1345             ; --- END RELATIONAL
2290   1345 C0 00 00      cmp b, 0
2291   1348 C6 5D 13      je _if11_exit
2292   134B             _if11_TRUE:
2293   134B             ; putchar('0'); 
2294   134B             ; --- START FUNCTION CALL
2295   134B FD 2E 30 00   mov32 cb, $00000030
2295   134F 00 00 
2296   1351 DD            push bl
2297   1352 07 4E 14      call putchar
2298   1355 51 01 00      add sp, 1
2299   1358             ; --- END FUNCTION CALL
2300   1358             ; return; 
2301   1358 F9            leave
2302   1359 09            ret
2303   135A 0A 5D 13      jmp _if11_exit
2304   135D             _if11_exit:
2305   135D             _if10_exit:
2306   135D             ; while (num > 0) { 
2307   135D             _while12_cond:
2308   135D FA 05 00      lea d, [bp + 5] ; $num
2309   1360 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2310   1363 FD 39         mov c, b ; And place it into C
2311   1365 2A            mov b, [d] ; Lower Word in B
2312   1366             ; --- START RELATIONAL
2313   1366 D7            push a
2314   1367 FD D8         push g
2315   1369 11            mov a, b
2316   136A FD 7A         mov g, c
2317   136C FD 2E 00 00   mov32 cb, $00000000
2317   1370 00 00 
2318   1372 38 00 00      mov c, 0
2319   1375 FD AF         cmp32 ga, cb
2320   1377 FD 7F         sgt
2321   1379 FD F1         pop g
2322   137B E4            pop a
2323   137C             ; --- END RELATIONAL
2324   137C C0 00 00      cmp b, 0
2325   137F C6 04 14      je _while12_exit
2326   1382             _while12_block:
2327   1382             ; digits[i] = '0' + (num % 10); 
2328   1382 FA F7 FF      lea d, [bp + -9] ; $digits
2329   1385 D7            push a
2330   1386 DA            push d
2331   1387 FA F5 FF      lea d, [bp + -11] ; $i
2332   138A 2A            mov b, [d]
2333   138B 38 00 00      mov c, 0
2334   138E E7            pop d
2335   138F 5A            add d, b
2336   1390 E4            pop a
2337   1391 DA            push d
2338   1392 FD 2E 30 00   mov32 cb, $00000030
2338   1396 00 00 
2339   1398             ; --- START TERMS
2340   1398 D7            push a
2341   1399 11            mov a, b
2342   139A FA 05 00      lea d, [bp + 5] ; $num
2343   139D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2344   13A0 FD 39         mov c, b ; And place it into C
2345   13A2 2A            mov b, [d] ; Lower Word in B
2346   13A3             ; --- START FACTORS
2347   13A3 D7            push a
2348   13A4 FD D8         push g
2349   13A6 11            mov a, b
2350   13A7 FD 7A         mov g, c
2351   13A9 FD 2E 0A 00   mov32 cb, $0000000a
2351   13AD 00 00 
2352   13AF FD D8         push g ; save 'g' as the div instruction uses it
2353   13B1 AE            div a, b ; %, a: quotient, b: remainder
2354   13B2 11            mov a, b
2355   13B3 FD F1         pop g
2356   13B5 FD 38         mov c, g
2357   13B7 27            mov b, a
2358   13B8 FD F1         pop g
2359   13BA E4            pop a
2360   13BB             ; --- END FACTORS
2361   13BB FD 22 00 00   mov g, 0
2362   13BF FD 15         add32 cb, ga
2363   13C1 E4            pop a
2364   13C2             ; --- END TERMS
2365   13C2 E7            pop d
2366   13C3 FD 3E         mov [d], bl
2367   13C5             ; num = num / 10; 
2368   13C5 FA 05 00      lea d, [bp + 5] ; $num
2369   13C8 DA            push d
2370   13C9 FA 05 00      lea d, [bp + 5] ; $num
2371   13CC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2372   13CF FD 39         mov c, b ; And place it into C
2373   13D1 2A            mov b, [d] ; Lower Word in B
2374   13D2             ; --- START FACTORS
2375   13D2 D7            push a
2376   13D3 FD D8         push g
2377   13D5 11            mov a, b
2378   13D6 FD 7A         mov g, c
2379   13D8 FD 2E 0A 00   mov32 cb, $0000000a
2379   13DC 00 00 
2380   13DE FD D8         push g ; save 'g' as the div instruction uses it
2381   13E0 AE            div a, b ; /, a: quotient, b: remainder
2382   13E1 FD F1         pop g
2383   13E3 FD 38         mov c, g
2384   13E5 27            mov b, a
2385   13E6 FD F1         pop g
2386   13E8 E4            pop a
2387   13E9             ; --- END FACTORS
2388   13E9 E7            pop d
2389   13EA FD 43         mov [d], b
2390   13EC 28            mov b, c
2391   13ED FD 44 02 00   mov [d + 2], b
2392   13F1             ; i++; 
2393   13F1 FA F5 FF      lea d, [bp + -11] ; $i
2394   13F4 2A            mov b, [d]
2395   13F5 38 00 00      mov c, 0
2396   13F8 11            mov a, b
2397   13F9 FD 77         inc b
2398   13FB FA F5 FF      lea d, [bp + -11] ; $i
2399   13FE FD 43         mov [d], b
2400   1400 27            mov b, a
2401   1401 0A 5D 13      jmp _while12_cond
2402   1404             _while12_exit:
2403   1404             ; while (i > 0) { 
2404   1404             _while19_cond:
2405   1404 FA F5 FF      lea d, [bp + -11] ; $i
2406   1407 2A            mov b, [d]
2407   1408 38 00 00      mov c, 0
2408   140B             ; --- START RELATIONAL
2409   140B D7            push a
2410   140C 11            mov a, b
2411   140D FD 2E 00 00   mov32 cb, $00000000
2411   1411 00 00 
2412   1413 B0            cmp a, b
2413   1414 FD 7F         sgt ; >
2414   1416 E4            pop a
2415   1417             ; --- END RELATIONAL
2416   1417 C0 00 00      cmp b, 0
2417   141A C6 4C 14      je _while19_exit
2418   141D             _while19_block:
2419   141D             ; i--; 
2420   141D FA F5 FF      lea d, [bp + -11] ; $i
2421   1420 2A            mov b, [d]
2422   1421 38 00 00      mov c, 0
2423   1424 11            mov a, b
2424   1425 FD 7D         dec b
2425   1427 FA F5 FF      lea d, [bp + -11] ; $i
2426   142A FD 43         mov [d], b
2427   142C 27            mov b, a
2428   142D             ; putchar(digits[i]); 
2429   142D             ; --- START FUNCTION CALL
2430   142D FA F7 FF      lea d, [bp + -9] ; $digits
2431   1430 D7            push a
2432   1431 DA            push d
2433   1432 FA F5 FF      lea d, [bp + -11] ; $i
2434   1435 2A            mov b, [d]
2435   1436 38 00 00      mov c, 0
2436   1439 E7            pop d
2437   143A 5A            add d, b
2438   143B E4            pop a
2439   143C 32            mov bl, [d]
2440   143D A7 00         mov bh, 0
2441   143F 38 00 00      mov c, 0
2442   1442 DD            push bl
2443   1443 07 4E 14      call putchar
2444   1446 51 01 00      add sp, 1
2445   1449             ; --- END FUNCTION CALL
2446   1449 0A 04 14      jmp _while19_cond
2447   144C             _while19_exit:
2448   144C F9            leave
2449   144D 09            ret
2450   144E             
2451   144E             putchar:
2452   144E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2453   1451             ; --- BEGIN INLINE ASM SEGMENT
2454   1451 FA 05 00      lea d, [bp + 5] ; $c
2455   1454 1E            mov al, [d]
2456   1455 23            mov ah, al
2457   1456 19 00         mov al, 0
2458   1458 05 03         syscall sys_io      ; char in AH
2459   145A             ; --- END INLINE ASM SEGMENT
2460   145A F9            leave
2461   145B 09            ret
2462   145C             
2463   145C             print_unsigned_long:
2464   145C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2465   145F             ; char digits[10]; 
2466   145F 52 0A 00      sub sp, 10
2467   1462             ; int i; 
2468   1462 52 02 00      sub sp, 2
2469   1465             ; i = 0; 
2470   1465 FA F5 FF      lea d, [bp + -11] ; $i
2471   1468 DA            push d
2472   1469 FD 2E 00 00   mov32 cb, $00000000
2472   146D 00 00 
2473   146F E7            pop d
2474   1470 FD 43         mov [d], b
2475   1472             ; if(num == 0){ 
2476   1472             _if20_cond:
2477   1472 FA 05 00      lea d, [bp + 5] ; $num
2478   1475 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2479   1478 FD 39         mov c, b ; And place it into C
2480   147A 2A            mov b, [d] ; Lower Word in B
2481   147B             ; --- START RELATIONAL
2482   147B D7            push a
2483   147C FD D8         push g
2484   147E 11            mov a, b
2485   147F FD 7A         mov g, c
2486   1481 FD 2E 00 00   mov32 cb, $00000000
2486   1485 00 00 
2487   1487 38 00 00      mov c, 0
2488   148A FD AF         cmp32 ga, cb
2489   148C FD 71         seq ; ==
2490   148E FD F1         pop g
2491   1490 E4            pop a
2492   1491             ; --- END RELATIONAL
2493   1491 C0 00 00      cmp b, 0
2494   1494 C6 A9 14      je _if20_exit
2495   1497             _if20_TRUE:
2496   1497             ; putchar('0'); 
2497   1497             ; --- START FUNCTION CALL
2498   1497 FD 2E 30 00   mov32 cb, $00000030
2498   149B 00 00 
2499   149D DD            push bl
2500   149E 07 4E 14      call putchar
2501   14A1 51 01 00      add sp, 1
2502   14A4             ; --- END FUNCTION CALL
2503   14A4             ; return; 
2504   14A4 F9            leave
2505   14A5 09            ret
2506   14A6 0A A9 14      jmp _if20_exit
2507   14A9             _if20_exit:
2508   14A9             ; while (num > 0) { 
2509   14A9             _while21_cond:
2510   14A9 FA 05 00      lea d, [bp + 5] ; $num
2511   14AC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2512   14AF FD 39         mov c, b ; And place it into C
2513   14B1 2A            mov b, [d] ; Lower Word in B
2514   14B2             ; --- START RELATIONAL
2515   14B2 D7            push a
2516   14B3 FD D8         push g
2517   14B5 11            mov a, b
2518   14B6 FD 7A         mov g, c
2519   14B8 FD 2E 00 00   mov32 cb, $00000000
2519   14BC 00 00 
2520   14BE 38 00 00      mov c, 0
2521   14C1 FD AF         cmp32 ga, cb
2522   14C3 FD 81         sgu
2523   14C5 FD F1         pop g
2524   14C7 E4            pop a
2525   14C8             ; --- END RELATIONAL
2526   14C8 C0 00 00      cmp b, 0
2527   14CB C6 50 15      je _while21_exit
2528   14CE             _while21_block:
2529   14CE             ; digits[i] = '0' + (num % 10); 
2530   14CE FA F7 FF      lea d, [bp + -9] ; $digits
2531   14D1 D7            push a
2532   14D2 DA            push d
2533   14D3 FA F5 FF      lea d, [bp + -11] ; $i
2534   14D6 2A            mov b, [d]
2535   14D7 38 00 00      mov c, 0
2536   14DA E7            pop d
2537   14DB 5A            add d, b
2538   14DC E4            pop a
2539   14DD DA            push d
2540   14DE FD 2E 30 00   mov32 cb, $00000030
2540   14E2 00 00 
2541   14E4             ; --- START TERMS
2542   14E4 D7            push a
2543   14E5 11            mov a, b
2544   14E6 FA 05 00      lea d, [bp + 5] ; $num
2545   14E9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2546   14EC FD 39         mov c, b ; And place it into C
2547   14EE 2A            mov b, [d] ; Lower Word in B
2548   14EF             ; --- START FACTORS
2549   14EF D7            push a
2550   14F0 FD D8         push g
2551   14F2 11            mov a, b
2552   14F3 FD 7A         mov g, c
2553   14F5 FD 2E 0A 00   mov32 cb, $0000000a
2553   14F9 00 00 
2554   14FB FD D8         push g ; save 'g' as the div instruction uses it
2555   14FD AE            div a, b ; %, a: quotient, b: remainder
2556   14FE 11            mov a, b
2557   14FF FD F1         pop g
2558   1501 FD 38         mov c, g
2559   1503 27            mov b, a
2560   1504 FD F1         pop g
2561   1506 E4            pop a
2562   1507             ; --- END FACTORS
2563   1507 FD 22 00 00   mov g, 0
2564   150B FD 15         add32 cb, ga
2565   150D E4            pop a
2566   150E             ; --- END TERMS
2567   150E E7            pop d
2568   150F FD 3E         mov [d], bl
2569   1511             ; num = num / 10; 
2570   1511 FA 05 00      lea d, [bp + 5] ; $num
2571   1514 DA            push d
2572   1515 FA 05 00      lea d, [bp + 5] ; $num
2573   1518 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2574   151B FD 39         mov c, b ; And place it into C
2575   151D 2A            mov b, [d] ; Lower Word in B
2576   151E             ; --- START FACTORS
2577   151E D7            push a
2578   151F FD D8         push g
2579   1521 11            mov a, b
2580   1522 FD 7A         mov g, c
2581   1524 FD 2E 0A 00   mov32 cb, $0000000a
2581   1528 00 00 
2582   152A FD D8         push g ; save 'g' as the div instruction uses it
2583   152C AE            div a, b ; /, a: quotient, b: remainder
2584   152D FD F1         pop g
2585   152F FD 38         mov c, g
2586   1531 27            mov b, a
2587   1532 FD F1         pop g
2588   1534 E4            pop a
2589   1535             ; --- END FACTORS
2590   1535 E7            pop d
2591   1536 FD 43         mov [d], b
2592   1538 28            mov b, c
2593   1539 FD 44 02 00   mov [d + 2], b
2594   153D             ; i++; 
2595   153D FA F5 FF      lea d, [bp + -11] ; $i
2596   1540 2A            mov b, [d]
2597   1541 38 00 00      mov c, 0
2598   1544 11            mov a, b
2599   1545 FD 77         inc b
2600   1547 FA F5 FF      lea d, [bp + -11] ; $i
2601   154A FD 43         mov [d], b
2602   154C 27            mov b, a
2603   154D 0A A9 14      jmp _while21_cond
2604   1550             _while21_exit:
2605   1550             ; while (i > 0) { 
2606   1550             _while28_cond:
2607   1550 FA F5 FF      lea d, [bp + -11] ; $i
2608   1553 2A            mov b, [d]
2609   1554 38 00 00      mov c, 0
2610   1557             ; --- START RELATIONAL
2611   1557 D7            push a
2612   1558 11            mov a, b
2613   1559 FD 2E 00 00   mov32 cb, $00000000
2613   155D 00 00 
2614   155F B0            cmp a, b
2615   1560 FD 7F         sgt ; >
2616   1562 E4            pop a
2617   1563             ; --- END RELATIONAL
2618   1563 C0 00 00      cmp b, 0
2619   1566 C6 98 15      je _while28_exit
2620   1569             _while28_block:
2621   1569             ; i--; 
2622   1569 FA F5 FF      lea d, [bp + -11] ; $i
2623   156C 2A            mov b, [d]
2624   156D 38 00 00      mov c, 0
2625   1570 11            mov a, b
2626   1571 FD 7D         dec b
2627   1573 FA F5 FF      lea d, [bp + -11] ; $i
2628   1576 FD 43         mov [d], b
2629   1578 27            mov b, a
2630   1579             ; putchar(digits[i]); 
2631   1579             ; --- START FUNCTION CALL
2632   1579 FA F7 FF      lea d, [bp + -9] ; $digits
2633   157C D7            push a
2634   157D DA            push d
2635   157E FA F5 FF      lea d, [bp + -11] ; $i
2636   1581 2A            mov b, [d]
2637   1582 38 00 00      mov c, 0
2638   1585 E7            pop d
2639   1586 5A            add d, b
2640   1587 E4            pop a
2641   1588 32            mov bl, [d]
2642   1589 A7 00         mov bh, 0
2643   158B 38 00 00      mov c, 0
2644   158E DD            push bl
2645   158F 07 4E 14      call putchar
2646   1592 51 01 00      add sp, 1
2647   1595             ; --- END FUNCTION CALL
2648   1595 0A 50 15      jmp _while28_cond
2649   1598             _while28_exit:
2650   1598 F9            leave
2651   1599 09            ret
2652   159A             
2653   159A             printx32:
2654   159A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2655   159D             ; --- BEGIN INLINE ASM SEGMENT
2656   159D FA 05 00      lea d, [bp + 5] ; $hex
2657   15A0 2B 02 00      mov b, [d+2]
2658   15A3 07 AC 15      call print_u16x_printx32
2659   15A6 2A            mov b, [d]
2660   15A7 07 AC 15      call print_u16x_printx32
2661   15AA             ; --- END INLINE ASM SEGMENT
2662   15AA             ; return; 
2663   15AA F9            leave
2664   15AB 09            ret
2665   15AC             ; --- BEGIN INLINE ASM SEGMENT
2666   15AC             print_u16x_printx32:
2667   15AC D7            push a
2668   15AD D8            push b
2669   15AE DD            push bl
2670   15AF 30            mov bl, bh
2671   15B0 07 CE 15      call _itoa_printx32        ; convert bh to char in A
2672   15B3 2F            mov bl, al        ; save al
2673   15B4 19 00         mov al, 0
2674   15B6 05 03         syscall sys_io        ; display AH
2675   15B8 24            mov ah, bl        ; retrieve al
2676   15B9 19 00         mov al, 0
2677   15BB 05 03         syscall sys_io        ; display AL
2678   15BD EA            pop bl
2679   15BE 07 CE 15      call _itoa_printx32        ; convert bh to char in A
2680   15C1 2F            mov bl, al        ; save al
2681   15C2 19 00         mov al, 0
2682   15C4 05 03         syscall sys_io        ; display AH
2683   15C6 24            mov ah, bl        ; retrieve al
2684   15C7 19 00         mov al, 0
2685   15C9 05 03         syscall sys_io        ; display AL
2686   15CB E5            pop b
2687   15CC E4            pop a
2688   15CD 09            ret
2689   15CE             _itoa_printx32:
2690   15CE DA            push d
2691   15CF D8            push b
2692   15D0 A7 00         mov bh, 0
2693   15D2 FD A4 04      shr bl, 4  
2694   15D5 74            mov d, b
2695   15D6 1F E8 15      mov al, [d + s_hex_digits_printx32]
2696   15D9 23            mov ah, al
2697   15DA E5            pop b
2698   15DB D8            push b
2699   15DC A7 00         mov bh, 0
2700   15DE FD 87 0F      and bl, $0F
2701   15E1 74            mov d, b
2702   15E2 1F E8 15      mov al, [d + s_hex_digits_printx32]
2703   15E5 E5            pop b
2704   15E6 E7            pop d
2705   15E7 09            ret
2706   15E8 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2706   15EC 34 35 36 37 
2706   15F0 38 39 41 42 
2706   15F4 43 44 45 46 
2707   15F8             ; --- END INLINE ASM SEGMENT
2708   15F8 F9            leave
2709   15F9 09            ret
2710   15FA             
2711   15FA             err:
2712   15FA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2713   15FD             ; print(e); 
2714   15FD             ; --- START FUNCTION CALL
2715   15FD FA 05 00      lea d, [bp + 5] ; $e
2716   1600 2A            mov b, [d]
2717   1601 38 00 00      mov c, 0
2718   1604 FD AB         swp b
2719   1606 D8            push b
2720   1607 07 0F 16      call print
2721   160A 51 02 00      add sp, 2
2722   160D             ; --- END FUNCTION CALL
2723   160D F9            leave
2724   160E 09            ret
2725   160F             
2726   160F             print:
2727   160F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2728   1612             ; --- BEGIN INLINE ASM SEGMENT
2729   1612 FA 05 00      lea d, [bp + 5] ; $s
2730   1615 FD 2A         mov d, [d]
2731   1617             _puts_L1_print:
2732   1617 1E            mov al, [d]
2733   1618 B9 00         cmp al, 0
2734   161A C6 26 16      jz _puts_END_print
2735   161D 23            mov ah, al
2736   161E 19 00         mov al, 0
2737   1620 05 03         syscall sys_io
2738   1622 79            inc d
2739   1623 0A 17 16      jmp _puts_L1_print
2740   1626             _puts_END_print:
2741   1626             ; --- END INLINE ASM SEGMENT
2742   1626 F9            leave
2743   1627 09            ret
2744   1628             
2745   1628             print_signed:
2746   1628 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2747   162B             ; char digits[5]; 
2748   162B 52 05 00      sub sp, 5
2749   162E             ; int i = 0; 
2750   162E 52 02 00      sub sp, 2
2751   1631             ; --- START LOCAL VAR INITIALIZATION
2752   1631 FA FA FF      lea d, [bp + -6] ; $i
2753   1634 DA            push d
2754   1635 FD 2E 00 00   mov32 cb, $00000000
2754   1639 00 00 
2755   163B E7            pop d
2756   163C FD 43         mov [d], b
2757   163E             ; --- END LOCAL VAR INITIALIZATION
2758   163E             ; if (num < 0) { 
2759   163E             _if29_cond:
2760   163E FA 05 00      lea d, [bp + 5] ; $num
2761   1641 2A            mov b, [d]
2762   1642 38 00 00      mov c, 0
2763   1645             ; --- START RELATIONAL
2764   1645 D7            push a
2765   1646 11            mov a, b
2766   1647 FD 2E 00 00   mov32 cb, $00000000
2766   164B 00 00 
2767   164D B0            cmp a, b
2768   164E FD 73         slt ; < (signed)
2769   1650 E4            pop a
2770   1651             ; --- END RELATIONAL
2771   1651 C0 00 00      cmp b, 0
2772   1654 C6 77 16      je _if29_else
2773   1657             _if29_TRUE:
2774   1657             ; putchar('-'); 
2775   1657             ; --- START FUNCTION CALL
2776   1657 FD 2E 2D 00   mov32 cb, $0000002d
2776   165B 00 00 
2777   165D DD            push bl
2778   165E 07 4E 14      call putchar
2779   1661 51 01 00      add sp, 1
2780   1664             ; --- END FUNCTION CALL
2781   1664             ; num = -num; 
2782   1664 FA 05 00      lea d, [bp + 5] ; $num
2783   1667 DA            push d
2784   1668 FA 05 00      lea d, [bp + 5] ; $num
2785   166B 2A            mov b, [d]
2786   166C 38 00 00      mov c, 0
2787   166F FD 97         neg b
2788   1671 E7            pop d
2789   1672 FD 43         mov [d], b
2790   1674 0A A2 16      jmp _if29_exit
2791   1677             _if29_else:
2792   1677             ; if (num == 0) { 
2793   1677             _if30_cond:
2794   1677 FA 05 00      lea d, [bp + 5] ; $num
2795   167A 2A            mov b, [d]
2796   167B 38 00 00      mov c, 0
2797   167E             ; --- START RELATIONAL
2798   167E D7            push a
2799   167F 11            mov a, b
2800   1680 FD 2E 00 00   mov32 cb, $00000000
2800   1684 00 00 
2801   1686 B0            cmp a, b
2802   1687 FD 71         seq ; ==
2803   1689 E4            pop a
2804   168A             ; --- END RELATIONAL
2805   168A C0 00 00      cmp b, 0
2806   168D C6 A2 16      je _if30_exit
2807   1690             _if30_TRUE:
2808   1690             ; putchar('0'); 
2809   1690             ; --- START FUNCTION CALL
2810   1690 FD 2E 30 00   mov32 cb, $00000030
2810   1694 00 00 
2811   1696 DD            push bl
2812   1697 07 4E 14      call putchar
2813   169A 51 01 00      add sp, 1
2814   169D             ; --- END FUNCTION CALL
2815   169D             ; return; 
2816   169D F9            leave
2817   169E 09            ret
2818   169F 0A A2 16      jmp _if30_exit
2819   16A2             _if30_exit:
2820   16A2             _if29_exit:
2821   16A2             ; while (num > 0) { 
2822   16A2             _while31_cond:
2823   16A2 FA 05 00      lea d, [bp + 5] ; $num
2824   16A5 2A            mov b, [d]
2825   16A6 38 00 00      mov c, 0
2826   16A9             ; --- START RELATIONAL
2827   16A9 D7            push a
2828   16AA 11            mov a, b
2829   16AB FD 2E 00 00   mov32 cb, $00000000
2829   16AF 00 00 
2830   16B1 B0            cmp a, b
2831   16B2 FD 7F         sgt ; >
2832   16B4 E4            pop a
2833   16B5             ; --- END RELATIONAL
2834   16B5 C0 00 00      cmp b, 0
2835   16B8 C6 2F 17      je _while31_exit
2836   16BB             _while31_block:
2837   16BB             ; digits[i] = '0' + (num % 10); 
2838   16BB FA FC FF      lea d, [bp + -4] ; $digits
2839   16BE D7            push a
2840   16BF DA            push d
2841   16C0 FA FA FF      lea d, [bp + -6] ; $i
2842   16C3 2A            mov b, [d]
2843   16C4 38 00 00      mov c, 0
2844   16C7 E7            pop d
2845   16C8 5A            add d, b
2846   16C9 E4            pop a
2847   16CA DA            push d
2848   16CB FD 2E 30 00   mov32 cb, $00000030
2848   16CF 00 00 
2849   16D1             ; --- START TERMS
2850   16D1 D7            push a
2851   16D2 11            mov a, b
2852   16D3 FA 05 00      lea d, [bp + 5] ; $num
2853   16D6 2A            mov b, [d]
2854   16D7 38 00 00      mov c, 0
2855   16DA             ; --- START FACTORS
2856   16DA D7            push a
2857   16DB FD D8         push g
2858   16DD 11            mov a, b
2859   16DE FD 7A         mov g, c
2860   16E0 FD 2E 0A 00   mov32 cb, $0000000a
2860   16E4 00 00 
2861   16E6 FD D8         push g ; save 'g' as the div instruction uses it
2862   16E8 AE            div a, b ; %, a: quotient, b: remainder
2863   16E9 11            mov a, b
2864   16EA FD F1         pop g
2865   16EC FD 38         mov c, g
2866   16EE 27            mov b, a
2867   16EF FD F1         pop g
2868   16F1 E4            pop a
2869   16F2             ; --- END FACTORS
2870   16F2 56            add b, a
2871   16F3 E4            pop a
2872   16F4             ; --- END TERMS
2873   16F4 E7            pop d
2874   16F5 FD 3E         mov [d], bl
2875   16F7             ; num = num / 10; 
2876   16F7 FA 05 00      lea d, [bp + 5] ; $num
2877   16FA DA            push d
2878   16FB FA 05 00      lea d, [bp + 5] ; $num
2879   16FE 2A            mov b, [d]
2880   16FF 38 00 00      mov c, 0
2881   1702             ; --- START FACTORS
2882   1702 D7            push a
2883   1703 FD D8         push g
2884   1705 11            mov a, b
2885   1706 FD 7A         mov g, c
2886   1708 FD 2E 0A 00   mov32 cb, $0000000a
2886   170C 00 00 
2887   170E FD D8         push g ; save 'g' as the div instruction uses it
2888   1710 AE            div a, b ; /, a: quotient, b: remainder
2889   1711 FD F1         pop g
2890   1713 FD 38         mov c, g
2891   1715 27            mov b, a
2892   1716 FD F1         pop g
2893   1718 E4            pop a
2894   1719             ; --- END FACTORS
2895   1719 E7            pop d
2896   171A FD 43         mov [d], b
2897   171C             ; i++; 
2898   171C FA FA FF      lea d, [bp + -6] ; $i
2899   171F 2A            mov b, [d]
2900   1720 38 00 00      mov c, 0
2901   1723 11            mov a, b
2902   1724 FD 77         inc b
2903   1726 FA FA FF      lea d, [bp + -6] ; $i
2904   1729 FD 43         mov [d], b
2905   172B 27            mov b, a
2906   172C 0A A2 16      jmp _while31_cond
2907   172F             _while31_exit:
2908   172F             ; while (i > 0) { 
2909   172F             _while38_cond:
2910   172F FA FA FF      lea d, [bp + -6] ; $i
2911   1732 2A            mov b, [d]
2912   1733 38 00 00      mov c, 0
2913   1736             ; --- START RELATIONAL
2914   1736 D7            push a
2915   1737 11            mov a, b
2916   1738 FD 2E 00 00   mov32 cb, $00000000
2916   173C 00 00 
2917   173E B0            cmp a, b
2918   173F FD 7F         sgt ; >
2919   1741 E4            pop a
2920   1742             ; --- END RELATIONAL
2921   1742 C0 00 00      cmp b, 0
2922   1745 C6 77 17      je _while38_exit
2923   1748             _while38_block:
2924   1748             ; i--; 
2925   1748 FA FA FF      lea d, [bp + -6] ; $i
2926   174B 2A            mov b, [d]
2927   174C 38 00 00      mov c, 0
2928   174F 11            mov a, b
2929   1750 FD 7D         dec b
2930   1752 FA FA FF      lea d, [bp + -6] ; $i
2931   1755 FD 43         mov [d], b
2932   1757 27            mov b, a
2933   1758             ; putchar(digits[i]); 
2934   1758             ; --- START FUNCTION CALL
2935   1758 FA FC FF      lea d, [bp + -4] ; $digits
2936   175B D7            push a
2937   175C DA            push d
2938   175D FA FA FF      lea d, [bp + -6] ; $i
2939   1760 2A            mov b, [d]
2940   1761 38 00 00      mov c, 0
2941   1764 E7            pop d
2942   1765 5A            add d, b
2943   1766 E4            pop a
2944   1767 32            mov bl, [d]
2945   1768 A7 00         mov bh, 0
2946   176A 38 00 00      mov c, 0
2947   176D DD            push bl
2948   176E 07 4E 14      call putchar
2949   1771 51 01 00      add sp, 1
2950   1774             ; --- END FUNCTION CALL
2951   1774 0A 2F 17      jmp _while38_cond
2952   1777             _while38_exit:
2953   1777 F9            leave
2954   1778 09            ret
2955   1779             
2956   1779             print_unsigned:
2957   1779 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2958   177C             ; char digits[5]; 
2959   177C 52 05 00      sub sp, 5
2960   177F             ; int i; 
2961   177F 52 02 00      sub sp, 2
2962   1782             ; i = 0; 
2963   1782 FA FA FF      lea d, [bp + -6] ; $i
2964   1785 DA            push d
2965   1786 FD 2E 00 00   mov32 cb, $00000000
2965   178A 00 00 
2966   178C E7            pop d
2967   178D FD 43         mov [d], b
2968   178F             ; if(num == 0){ 
2969   178F             _if39_cond:
2970   178F FA 05 00      lea d, [bp + 5] ; $num
2971   1792 2A            mov b, [d]
2972   1793 38 00 00      mov c, 0
2973   1796             ; --- START RELATIONAL
2974   1796 D7            push a
2975   1797 11            mov a, b
2976   1798 FD 2E 00 00   mov32 cb, $00000000
2976   179C 00 00 
2977   179E B0            cmp a, b
2978   179F FD 71         seq ; ==
2979   17A1 E4            pop a
2980   17A2             ; --- END RELATIONAL
2981   17A2 C0 00 00      cmp b, 0
2982   17A5 C6 BA 17      je _if39_exit
2983   17A8             _if39_TRUE:
2984   17A8             ; putchar('0'); 
2985   17A8             ; --- START FUNCTION CALL
2986   17A8 FD 2E 30 00   mov32 cb, $00000030
2986   17AC 00 00 
2987   17AE DD            push bl
2988   17AF 07 4E 14      call putchar
2989   17B2 51 01 00      add sp, 1
2990   17B5             ; --- END FUNCTION CALL
2991   17B5             ; return; 
2992   17B5 F9            leave
2993   17B6 09            ret
2994   17B7 0A BA 17      jmp _if39_exit
2995   17BA             _if39_exit:
2996   17BA             ; while (num > 0) { 
2997   17BA             _while40_cond:
2998   17BA FA 05 00      lea d, [bp + 5] ; $num
2999   17BD 2A            mov b, [d]
3000   17BE 38 00 00      mov c, 0
3001   17C1             ; --- START RELATIONAL
3002   17C1 D7            push a
3003   17C2 11            mov a, b
3004   17C3 FD 2E 00 00   mov32 cb, $00000000
3004   17C7 00 00 
3005   17C9 B0            cmp a, b
3006   17CA FD 81         sgu ; > (unsigned)
3007   17CC E4            pop a
3008   17CD             ; --- END RELATIONAL
3009   17CD C0 00 00      cmp b, 0
3010   17D0 C6 47 18      je _while40_exit
3011   17D3             _while40_block:
3012   17D3             ; digits[i] = '0' + (num % 10); 
3013   17D3 FA FC FF      lea d, [bp + -4] ; $digits
3014   17D6 D7            push a
3015   17D7 DA            push d
3016   17D8 FA FA FF      lea d, [bp + -6] ; $i
3017   17DB 2A            mov b, [d]
3018   17DC 38 00 00      mov c, 0
3019   17DF E7            pop d
3020   17E0 5A            add d, b
3021   17E1 E4            pop a
3022   17E2 DA            push d
3023   17E3 FD 2E 30 00   mov32 cb, $00000030
3023   17E7 00 00 
3024   17E9             ; --- START TERMS
3025   17E9 D7            push a
3026   17EA 11            mov a, b
3027   17EB FA 05 00      lea d, [bp + 5] ; $num
3028   17EE 2A            mov b, [d]
3029   17EF 38 00 00      mov c, 0
3030   17F2             ; --- START FACTORS
3031   17F2 D7            push a
3032   17F3 FD D8         push g
3033   17F5 11            mov a, b
3034   17F6 FD 7A         mov g, c
3035   17F8 FD 2E 0A 00   mov32 cb, $0000000a
3035   17FC 00 00 
3036   17FE FD D8         push g ; save 'g' as the div instruction uses it
3037   1800 AE            div a, b ; %, a: quotient, b: remainder
3038   1801 11            mov a, b
3039   1802 FD F1         pop g
3040   1804 FD 38         mov c, g
3041   1806 27            mov b, a
3042   1807 FD F1         pop g
3043   1809 E4            pop a
3044   180A             ; --- END FACTORS
3045   180A 56            add b, a
3046   180B E4            pop a
3047   180C             ; --- END TERMS
3048   180C E7            pop d
3049   180D FD 3E         mov [d], bl
3050   180F             ; num = num / 10; 
3051   180F FA 05 00      lea d, [bp + 5] ; $num
3052   1812 DA            push d
3053   1813 FA 05 00      lea d, [bp + 5] ; $num
3054   1816 2A            mov b, [d]
3055   1817 38 00 00      mov c, 0
3056   181A             ; --- START FACTORS
3057   181A D7            push a
3058   181B FD D8         push g
3059   181D 11            mov a, b
3060   181E FD 7A         mov g, c
3061   1820 FD 2E 0A 00   mov32 cb, $0000000a
3061   1824 00 00 
3062   1826 FD D8         push g ; save 'g' as the div instruction uses it
3063   1828 AE            div a, b ; /, a: quotient, b: remainder
3064   1829 FD F1         pop g
3065   182B FD 38         mov c, g
3066   182D 27            mov b, a
3067   182E FD F1         pop g
3068   1830 E4            pop a
3069   1831             ; --- END FACTORS
3070   1831 E7            pop d
3071   1832 FD 43         mov [d], b
3072   1834             ; i++; 
3073   1834 FA FA FF      lea d, [bp + -6] ; $i
3074   1837 2A            mov b, [d]
3075   1838 38 00 00      mov c, 0
3076   183B 11            mov a, b
3077   183C FD 77         inc b
3078   183E FA FA FF      lea d, [bp + -6] ; $i
3079   1841 FD 43         mov [d], b
3080   1843 27            mov b, a
3081   1844 0A BA 17      jmp _while40_cond
3082   1847             _while40_exit:
3083   1847             ; while (i > 0) { 
3084   1847             _while47_cond:
3085   1847 FA FA FF      lea d, [bp + -6] ; $i
3086   184A 2A            mov b, [d]
3087   184B 38 00 00      mov c, 0
3088   184E             ; --- START RELATIONAL
3089   184E D7            push a
3090   184F 11            mov a, b
3091   1850 FD 2E 00 00   mov32 cb, $00000000
3091   1854 00 00 
3092   1856 B0            cmp a, b
3093   1857 FD 7F         sgt ; >
3094   1859 E4            pop a
3095   185A             ; --- END RELATIONAL
3096   185A C0 00 00      cmp b, 0
3097   185D C6 8F 18      je _while47_exit
3098   1860             _while47_block:
3099   1860             ; i--; 
3100   1860 FA FA FF      lea d, [bp + -6] ; $i
3101   1863 2A            mov b, [d]
3102   1864 38 00 00      mov c, 0
3103   1867 11            mov a, b
3104   1868 FD 7D         dec b
3105   186A FA FA FF      lea d, [bp + -6] ; $i
3106   186D FD 43         mov [d], b
3107   186F 27            mov b, a
3108   1870             ; putchar(digits[i]); 
3109   1870             ; --- START FUNCTION CALL
3110   1870 FA FC FF      lea d, [bp + -4] ; $digits
3111   1873 D7            push a
3112   1874 DA            push d
3113   1875 FA FA FF      lea d, [bp + -6] ; $i
3114   1878 2A            mov b, [d]
3115   1879 38 00 00      mov c, 0
3116   187C E7            pop d
3117   187D 5A            add d, b
3118   187E E4            pop a
3119   187F 32            mov bl, [d]
3120   1880 A7 00         mov bh, 0
3121   1882 38 00 00      mov c, 0
3122   1885 DD            push bl
3123   1886 07 4E 14      call putchar
3124   1889 51 01 00      add sp, 1
3125   188C             ; --- END FUNCTION CALL
3126   188C 0A 47 18      jmp _while47_cond
3127   188F             _while47_exit:
3128   188F F9            leave
3129   1890 09            ret
3130   1891             
3131   1891             printx16:
3132   1891 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3133   1894             ; --- BEGIN INLINE ASM SEGMENT
3134   1894 FA 05 00      lea d, [bp + 5] ; $hex
3135   1897 2A            mov b, [d]
3136   1898             print_u16x_printx16:
3137   1898 DD            push bl
3138   1899 30            mov bl, bh
3139   189A 07 B7 18      call _itoa_printx16        ; convert bh to char in A
3140   189D 2F            mov bl, al        ; save al
3141   189E 19 00         mov al, 0
3142   18A0 05 03         syscall sys_io        ; display AH
3143   18A2 24            mov ah, bl        ; retrieve al
3144   18A3 19 00         mov al, 0
3145   18A5 05 03         syscall sys_io        ; display AL
3146   18A7 EA            pop bl
3147   18A8 07 B7 18      call _itoa_printx16        ; convert bh to char in A
3148   18AB 2F            mov bl, al        ; save al
3149   18AC 19 00         mov al, 0
3150   18AE 05 03         syscall sys_io        ; display AH
3151   18B0 24            mov ah, bl        ; retrieve al
3152   18B1 19 00         mov al, 0
3153   18B3 05 03         syscall sys_io        ; display AL
3154   18B5             ; --- END INLINE ASM SEGMENT
3155   18B5             ; return; 
3156   18B5 F9            leave
3157   18B6 09            ret
3158   18B7             ; --- BEGIN INLINE ASM SEGMENT
3159   18B7             _itoa_printx16:
3160   18B7 DA            push d
3161   18B8 D8            push b
3162   18B9 A7 00         mov bh, 0
3163   18BB FD A4 04      shr bl, 4  
3164   18BE 74            mov d, b
3165   18BF 1F D1 18      mov al, [d + s_hex_digits_printx16]
3166   18C2 23            mov ah, al
3167   18C3 E5            pop b
3168   18C4 D8            push b
3169   18C5 A7 00         mov bh, 0
3170   18C7 FD 87 0F      and bl, $0F
3171   18CA 74            mov d, b
3172   18CB 1F D1 18      mov al, [d + s_hex_digits_printx16]
3173   18CE E5            pop b
3174   18CF E7            pop d
3175   18D0 09            ret
3176   18D1 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
3176   18D5 34 35 36 37 
3176   18D9 38 39 41 42 
3176   18DD 43 44 45 46 
3177   18E1             ; --- END INLINE ASM SEGMENT
3178   18E1 F9            leave
3179   18E2 09            ret
3180   18E3             ; --- END TEXT SEGMENT
3181   18E3             
3182   18E3             ; --- BEGIN DATA SEGMENT
3183   18E3 00 00 00 00 _st1_data: .fill 13, 0
3183   18E7 00 00 00 00 
3183   18EB 00 00 00 00 
3183   18EF 00 
3184   18F0 54 65 73 74 _s0: .db "Test %d, Result: %d\n", 0
3184   18F4 20 25 64 2C 
3184   18F8 20 52 65 73 
3184   18FC 75 6C 74 3A 
3184   1900 20 25 64 0A 
3184   1904 00 
3185   1905 55 6E 65 78 _s1: .db "Unexpected format in printf.", 0
3185   1909 70 65 63 74 
3185   190D 65 64 20 66 
3185   1911 6F 72 6D 61 
3185   1915 74 20 69 6E 
3185   1919 20 70 72 69 
3185   191D 6E 74 66 2E 
3185   1921 00 
3186   1922 45 72 72 6F _s2: .db "Error: Unknown argument type.\n", 0
3186   1926 72 3A 20 55 
3186   192A 6E 6B 6E 6F 
3186   192E 77 6E 20 61 
3186   1932 72 67 75 6D 
3186   1936 65 6E 74 20 
3186   193A 74 79 70 65 
3186   193E 2E 0A 00 
3187   1941             
3188   1941 43 19       _heap_top: .dw _heap
3189   1943 00          _heap: .db 0
3190   1944             ; --- END DATA SEGMENT
3191   1944             
3192   1944             .end
tasm: Number of errors = 0
