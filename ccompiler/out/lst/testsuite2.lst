0001   0000             ; --- FILENAME: ctestsuite/testsuite2.c
0002   0000             ; --- DATE:     24-10-2025 at 20:02:22
0003   0000             .include "lib/asm/kernel.exp"
0001+  0000             fdc_al_restore   .EQU  $0000
0002+  0000             fdc_al_step      .EQU  $0001
0003+  0000             fdc_al_step_in   .EQU  $0002
0004+  0000             fdc_al_step_out  .EQU  $0003
0005+  0000             fdc_al_seek      .EQU  $0004
0006+  0000             fdc_al_format_128 .EQU  $0005
0007+  0000             fdc_al_formatdisk_128 .EQU  $0006
0008+  0000             fdc_al_format_512 .EQU  $0007
0009+  0000             fdc_al_formatdisk_512 .EQU  $0008
0010+  0000             fdc_al_read_addr .EQU  $0009
0011+  0000             fdc_al_read_track .EQU  $000a
0012+  0000             fdc_al_read_sect .EQU  $000b
0013+  0000             fdc_al_write_sect .EQU  $000c
0014+  0000             fdc_al_force_int .EQU  $000d
0015+  0000             fdc_al_status0   .EQU  $000e
0016+  0000             fdc_al_status1   .EQU  $000f
0017+  0000             noname._til311_display .EQU  $ffb0
0018+  0000             noname._fdc_config .EQU  $ffc0
0019+  0000             noname._fdc_status_0 .EQU  $ffc1
0020+  0000             noname._fdc_stat_cmd .EQU  $ffc8
0021+  0000             sys_break        .EQU  $0000
0022+  0000             sys_rtc          .EQU  $0001
0023+  0000             sys_ide          .EQU  $0002
0024+  0000             sys_io           .EQU  $0003
0025+  0000             sys_filesystem   .EQU  $0004
0026+  0000             sys_create_proc  .EQU  $0005
0027+  0000             sys_list_proc    .EQU  $0006
0028+  0000             sys_datetime     .EQU  $0007
0029+  0000             sys_reboot       .EQU  $0008
0030+  0000             sys_pause_proc   .EQU  $0009
0031+  0000             sys_resume_proc  .EQU  $000a
0032+  0000             sys_terminate_proc .EQU  $000b
0033+  0000             sys_system       .EQU  $000c
0034+  0000             sys_fdc          .EQU  $000d
0035+  0000             text_org         .EQU  $0400
0004   0000             .include "lib/asm/bios.exp"
0001+  0000             bios_reset_vector .equ  $01c0
0002+  0000             ide_buffer       .equ  $8204
0003+  0000             boot_origin      .equ  $8004
0004+  0000             bios_uart        .equ  $0002
0005+  0000             bios_ide         .equ  $0003
0005   0000             
0006   0000             ; --- BEGIN TEXT SEGMENT
0007   0400             .org text_org
0008   0400             main:
0009   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0010   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0011   0408             ; int pass[10]; 
0012   0408 52 14 00      sub sp, 20
0013   040B             ; int i; 
0014   040B 52 02 00      sub sp, 2
0015   040E             ; int nbr_tests = 10; 
0016   040E 52 02 00      sub sp, 2
0017   0411             ; --- START LOCAL VAR INITIALIZATION
0018   0411 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0019   0414 DA            push d
0020   0415 FD 2E 0A 00   mov32 cb, $0000000a
0020   0419 00 00 
0021   041B E7            pop d
0022   041C FD 43         mov [d], b
0023   041E             ; --- END LOCAL VAR INITIALIZATION
0024   041E             ; for(i = 0; i < nbr_tests; i++){ 
0025   041E             _for1_init:
0026   041E FA EB FF      lea d, [bp + -21] ; $i
0027   0421 DA            push d
0028   0422 FD 2E 00 00   mov32 cb, $00000000
0028   0426 00 00 
0029   0428 E7            pop d
0030   0429 FD 43         mov [d], b
0031   042B             _for1_cond:
0032   042B FA EB FF      lea d, [bp + -21] ; $i
0033   042E 2A            mov b, [d]
0034   042F 38 00 00      mov c, 0
0035   0432             ; --- START RELATIONAL
0036   0432 D7            push a
0037   0433 11            mov a, b
0038   0434 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0039   0437 2A            mov b, [d]
0040   0438 38 00 00      mov c, 0
0041   043B B0            cmp a, b
0042   043C FD 73         slt ; < (signed)
0043   043E E4            pop a
0044   043F             ; --- END RELATIONAL
0045   043F C0 00 00      cmp b, 0
0046   0442 C6 74 04      je _for1_exit
0047   0445             _for1_block:
0048   0445             ; pass[i] = -1; 
0049   0445 FA ED FF      lea d, [bp + -19] ; $pass
0050   0448 D7            push a
0051   0449 DA            push d
0052   044A FA EB FF      lea d, [bp + -21] ; $i
0053   044D 2A            mov b, [d]
0054   044E 38 00 00      mov c, 0
0055   0451 E7            pop d
0056   0452 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0057   0456 E4            pop a
0058   0457 DA            push d
0059   0458 FD 2E FF FF   mov32 cb, $ffffffff
0059   045C FF FF 
0060   045E E7            pop d
0061   045F FD 43         mov [d], b
0062   0461             _for1_update:
0063   0461 FA EB FF      lea d, [bp + -21] ; $i
0064   0464 2A            mov b, [d]
0065   0465 38 00 00      mov c, 0
0066   0468 11            mov a, b
0067   0469 FD 77         inc b
0068   046B FA EB FF      lea d, [bp + -21] ; $i
0069   046E FD 43         mov [d], b
0070   0470 27            mov b, a
0071   0471 0A 2B 04      jmp _for1_cond
0072   0474             _for1_exit:
0073   0474             ; pass[0] = test0(); 
0074   0474 FA ED FF      lea d, [bp + -19] ; $pass
0075   0477 D7            push a
0076   0478 DA            push d
0077   0479 FD 2E 00 00   mov32 cb, $00000000
0077   047D 00 00 
0078   047F E7            pop d
0079   0480 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0080   0484 E4            pop a
0081   0485 DA            push d
0082   0486             ; --- START FUNCTION CALL
0083   0486 07 59 05      call test0
0084   0489 E7            pop d
0085   048A FD 43         mov [d], b
0086   048C             ; pass[1] = test1(); 
0087   048C FA ED FF      lea d, [bp + -19] ; $pass
0088   048F D7            push a
0089   0490 DA            push d
0090   0491 FD 2E 01 00   mov32 cb, $00000001
0090   0495 00 00 
0091   0497 E7            pop d
0092   0498 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0093   049C E4            pop a
0094   049D DA            push d
0095   049E             ; --- START FUNCTION CALL
0096   049E 07 55 09      call test1
0097   04A1 E7            pop d
0098   04A2 FD 43         mov [d], b
0099   04A4             ; pass[2] = test2(); 
0100   04A4 FA ED FF      lea d, [bp + -19] ; $pass
0101   04A7 D7            push a
0102   04A8 DA            push d
0103   04A9 FD 2E 02 00   mov32 cb, $00000002
0103   04AD 00 00 
0104   04AF E7            pop d
0105   04B0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0106   04B4 E4            pop a
0107   04B5 DA            push d
0108   04B6             ; --- START FUNCTION CALL
0109   04B6 07 06 0B      call test2
0110   04B9 E7            pop d
0111   04BA FD 43         mov [d], b
0112   04BC             ; pass[3] = test3(st1); 
0113   04BC FA ED FF      lea d, [bp + -19] ; $pass
0114   04BF D7            push a
0115   04C0 DA            push d
0116   04C1 FD 2E 03 00   mov32 cb, $00000003
0116   04C5 00 00 
0117   04C7 E7            pop d
0118   04C8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0119   04CC E4            pop a
0120   04CD DA            push d
0121   04CE             ; --- START FUNCTION CALL
0122   04CE 3B 0B 19      mov d, _st1_data ; $st1
0123   04D1 2D            mov b, d
0124   04D2 38 00 00      mov c, 0
0125   04D5 52 0D 00      sub sp, 13
0126   04D8 FD 28         mov si, b
0127   04DA FD FA 01 00   lea d, [sp + 1]
0128   04DE FD 50         mov di, d
0129   04E0 38 0D 00      mov c, 13
0130   04E3 FD F5         rep movsb
0131   04E5 07 96 0D      call test3
0132   04E8 51 0D 00      add sp, 13
0133   04EB             ; --- END FUNCTION CALL
0134   04EB E7            pop d
0135   04EC FD 43         mov [d], b
0136   04EE             ; for(i = 0; i < nbr_tests; i++){ 
0137   04EE             _for2_init:
0138   04EE FA EB FF      lea d, [bp + -21] ; $i
0139   04F1 DA            push d
0140   04F2 FD 2E 00 00   mov32 cb, $00000000
0140   04F6 00 00 
0141   04F8 E7            pop d
0142   04F9 FD 43         mov [d], b
0143   04FB             _for2_cond:
0144   04FB FA EB FF      lea d, [bp + -21] ; $i
0145   04FE 2A            mov b, [d]
0146   04FF 38 00 00      mov c, 0
0147   0502             ; --- START RELATIONAL
0148   0502 D7            push a
0149   0503 11            mov a, b
0150   0504 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0151   0507 2A            mov b, [d]
0152   0508 38 00 00      mov c, 0
0153   050B B0            cmp a, b
0154   050C FD 73         slt ; < (signed)
0155   050E E4            pop a
0156   050F             ; --- END RELATIONAL
0157   050F C0 00 00      cmp b, 0
0158   0512 C6 57 05      je _for2_exit
0159   0515             _for2_block:
0160   0515             ; printf("Test %d, Result: %d\n", i, pass[i]); 
0161   0515             ; --- START FUNCTION CALL
0162   0515 FA ED FF      lea d, [bp + -19] ; $pass
0163   0518 D7            push a
0164   0519 DA            push d
0165   051A FA EB FF      lea d, [bp + -21] ; $i
0166   051D 2A            mov b, [d]
0167   051E 38 00 00      mov c, 0
0168   0521 E7            pop d
0169   0522 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0170   0526 E4            pop a
0171   0527 2A            mov b, [d]
0172   0528 38 00 00      mov c, 0
0173   052B FD AB         swp b
0174   052D D8            push b
0175   052E FA EB FF      lea d, [bp + -21] ; $i
0176   0531 2A            mov b, [d]
0177   0532 38 00 00      mov c, 0
0178   0535 FD AB         swp b
0179   0537 D8            push b
0180   0538 26 18 19      mov b, _s0 ; "Test %d, Result: %d\n"
0181   053B FD AB         swp b
0182   053D D8            push b
0183   053E 07 CF 0F      call printf
0184   0541 51 06 00      add sp, 6
0185   0544             ; --- END FUNCTION CALL
0186   0544             _for2_update:
0187   0544 FA EB FF      lea d, [bp + -21] ; $i
0188   0547 2A            mov b, [d]
0189   0548 38 00 00      mov c, 0
0190   054B 11            mov a, b
0191   054C FD 77         inc b
0192   054E FA EB FF      lea d, [bp + -21] ; $i
0193   0551 FD 43         mov [d], b
0194   0553 27            mov b, a
0195   0554 0A FB 04      jmp _for2_cond
0196   0557             _for2_exit:
0197   0557 05 0B         syscall sys_terminate_proc
0198   0559             
0199   0559             test0:
0200   0559 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0201   055C             ; int result; 
0202   055C 52 02 00      sub sp, 2
0203   055F             ; int pass = 1; 
0204   055F 52 02 00      sub sp, 2
0205   0562             ; --- START LOCAL VAR INITIALIZATION
0206   0562 FA FD FF      lea d, [bp + -3] ; $pass
0207   0565 DA            push d
0208   0566 FD 2E 01 00   mov32 cb, $00000001
0208   056A 00 00 
0209   056C E7            pop d
0210   056D FD 43         mov [d], b
0211   056F             ; --- END LOCAL VAR INITIALIZATION
0212   056F             ; char c; 
0213   056F 52 01 00      sub sp, 1
0214   0572             ; int i; 
0215   0572 52 02 00      sub sp, 2
0216   0575             ; char ca[5]; 
0217   0575 52 05 00      sub sp, 5
0218   0578             ; int ia[5]; 
0219   0578 52 0A 00      sub sp, 10
0220   057B             ; c = 'A'; 
0221   057B FA FC FF      lea d, [bp + -4] ; $c
0222   057E DA            push d
0223   057F FD 2E 41 00   mov32 cb, $00000041
0223   0583 00 00 
0224   0585 E7            pop d
0225   0586 FD 3E         mov [d], bl
0226   0588             ; i = 55; 
0227   0588 FA FA FF      lea d, [bp + -6] ; $i
0228   058B DA            push d
0229   058C FD 2E 37 00   mov32 cb, $00000037
0229   0590 00 00 
0230   0592 E7            pop d
0231   0593 FD 43         mov [d], b
0232   0595             ; ca[0] = 'A'; 
0233   0595 FA F5 FF      lea d, [bp + -11] ; $ca
0234   0598 D7            push a
0235   0599 DA            push d
0236   059A FD 2E 00 00   mov32 cb, $00000000
0236   059E 00 00 
0237   05A0 E7            pop d
0238   05A1 5A            add d, b
0239   05A2 E4            pop a
0240   05A3 DA            push d
0241   05A4 FD 2E 41 00   mov32 cb, $00000041
0241   05A8 00 00 
0242   05AA E7            pop d
0243   05AB FD 3E         mov [d], bl
0244   05AD             ; ca[1] = 'B'; 
0245   05AD FA F5 FF      lea d, [bp + -11] ; $ca
0246   05B0 D7            push a
0247   05B1 DA            push d
0248   05B2 FD 2E 01 00   mov32 cb, $00000001
0248   05B6 00 00 
0249   05B8 E7            pop d
0250   05B9 5A            add d, b
0251   05BA E4            pop a
0252   05BB DA            push d
0253   05BC FD 2E 42 00   mov32 cb, $00000042
0253   05C0 00 00 
0254   05C2 E7            pop d
0255   05C3 FD 3E         mov [d], bl
0256   05C5             ; ca[2] = 'C'; 
0257   05C5 FA F5 FF      lea d, [bp + -11] ; $ca
0258   05C8 D7            push a
0259   05C9 DA            push d
0260   05CA FD 2E 02 00   mov32 cb, $00000002
0260   05CE 00 00 
0261   05D0 E7            pop d
0262   05D1 5A            add d, b
0263   05D2 E4            pop a
0264   05D3 DA            push d
0265   05D4 FD 2E 43 00   mov32 cb, $00000043
0265   05D8 00 00 
0266   05DA E7            pop d
0267   05DB FD 3E         mov [d], bl
0268   05DD             ; ca[3] = 'D'; 
0269   05DD FA F5 FF      lea d, [bp + -11] ; $ca
0270   05E0 D7            push a
0271   05E1 DA            push d
0272   05E2 FD 2E 03 00   mov32 cb, $00000003
0272   05E6 00 00 
0273   05E8 E7            pop d
0274   05E9 5A            add d, b
0275   05EA E4            pop a
0276   05EB DA            push d
0277   05EC FD 2E 44 00   mov32 cb, $00000044
0277   05F0 00 00 
0278   05F2 E7            pop d
0279   05F3 FD 3E         mov [d], bl
0280   05F5             ; ca[4] = 'E'; 
0281   05F5 FA F5 FF      lea d, [bp + -11] ; $ca
0282   05F8 D7            push a
0283   05F9 DA            push d
0284   05FA FD 2E 04 00   mov32 cb, $00000004
0284   05FE 00 00 
0285   0600 E7            pop d
0286   0601 5A            add d, b
0287   0602 E4            pop a
0288   0603 DA            push d
0289   0604 FD 2E 45 00   mov32 cb, $00000045
0289   0608 00 00 
0290   060A E7            pop d
0291   060B FD 3E         mov [d], bl
0292   060D             ; ia[0] = 0; 
0293   060D FA EB FF      lea d, [bp + -21] ; $ia
0294   0610 D7            push a
0295   0611 DA            push d
0296   0612 FD 2E 00 00   mov32 cb, $00000000
0296   0616 00 00 
0297   0618 E7            pop d
0298   0619 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0299   061D E4            pop a
0300   061E DA            push d
0301   061F FD 2E 00 00   mov32 cb, $00000000
0301   0623 00 00 
0302   0625 E7            pop d
0303   0626 FD 43         mov [d], b
0304   0628             ; ia[1] = 1; 
0305   0628 FA EB FF      lea d, [bp + -21] ; $ia
0306   062B D7            push a
0307   062C DA            push d
0308   062D FD 2E 01 00   mov32 cb, $00000001
0308   0631 00 00 
0309   0633 E7            pop d
0310   0634 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0311   0638 E4            pop a
0312   0639 DA            push d
0313   063A FD 2E 01 00   mov32 cb, $00000001
0313   063E 00 00 
0314   0640 E7            pop d
0315   0641 FD 43         mov [d], b
0316   0643             ; ia[2] = 2; 
0317   0643 FA EB FF      lea d, [bp + -21] ; $ia
0318   0646 D7            push a
0319   0647 DA            push d
0320   0648 FD 2E 02 00   mov32 cb, $00000002
0320   064C 00 00 
0321   064E E7            pop d
0322   064F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0323   0653 E4            pop a
0324   0654 DA            push d
0325   0655 FD 2E 02 00   mov32 cb, $00000002
0325   0659 00 00 
0326   065B E7            pop d
0327   065C FD 43         mov [d], b
0328   065E             ; ia[3] = 3; 
0329   065E FA EB FF      lea d, [bp + -21] ; $ia
0330   0661 D7            push a
0331   0662 DA            push d
0332   0663 FD 2E 03 00   mov32 cb, $00000003
0332   0667 00 00 
0333   0669 E7            pop d
0334   066A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0335   066E E4            pop a
0336   066F DA            push d
0337   0670 FD 2E 03 00   mov32 cb, $00000003
0337   0674 00 00 
0338   0676 E7            pop d
0339   0677 FD 43         mov [d], b
0340   0679             ; ia[4] = 4; 
0341   0679 FA EB FF      lea d, [bp + -21] ; $ia
0342   067C D7            push a
0343   067D DA            push d
0344   067E FD 2E 04 00   mov32 cb, $00000004
0344   0682 00 00 
0345   0684 E7            pop d
0346   0685 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0347   0689 E4            pop a
0348   068A DA            push d
0349   068B FD 2E 04 00   mov32 cb, $00000004
0349   068F 00 00 
0350   0691 E7            pop d
0351   0692 FD 43         mov [d], b
0352   0694             ; pass = pass && test0_subTest0(c, i, ca, ia); 
0353   0694 FA FD FF      lea d, [bp + -3] ; $pass
0354   0697 DA            push d
0355   0698 FA FD FF      lea d, [bp + -3] ; $pass
0356   069B 2A            mov b, [d]
0357   069C 38 00 00      mov c, 0
0358   069F             ; --- START LOGICAL AND
0359   069F D7            push a
0360   06A0 11            mov a, b
0361   06A1             ; --- START FUNCTION CALL
0362   06A1 FA EB FF      lea d, [bp + -21] ; $ia
0363   06A4 2D            mov b, d
0364   06A5 38 00 00      mov c, 0
0365   06A8 FD AB         swp b
0366   06AA D8            push b
0367   06AB FA F5 FF      lea d, [bp + -11] ; $ca
0368   06AE 2D            mov b, d
0369   06AF 38 00 00      mov c, 0
0370   06B2 FD AB         swp b
0371   06B4 D8            push b
0372   06B5 FA FA FF      lea d, [bp + -6] ; $i
0373   06B8 2A            mov b, [d]
0374   06B9 38 00 00      mov c, 0
0375   06BC FD AB         swp b
0376   06BE D8            push b
0377   06BF FA FC FF      lea d, [bp + -4] ; $c
0378   06C2 32            mov bl, [d]
0379   06C3 A7 00         mov bh, 0
0380   06C5 38 00 00      mov c, 0
0381   06C8 DD            push bl
0382   06C9 07 DE 06      call test0_subTest0
0383   06CC 51 07 00      add sp, 7
0384   06CF             ; --- END FUNCTION CALL
0385   06CF FD A7         sand a, b
0386   06D1 E4            pop a
0387   06D2             ; --- END LOGICAL AND
0388   06D2 E7            pop d
0389   06D3 FD 43         mov [d], b
0390   06D5             ; return pass; 
0391   06D5 FA FD FF      lea d, [bp + -3] ; $pass
0392   06D8 2A            mov b, [d]
0393   06D9 38 00 00      mov c, 0
0394   06DC F9            leave
0395   06DD 09            ret
0396   06DE             
0397   06DE             test0_subTest0:
0398   06DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0399   06E1             ; int pass = 1; 
0400   06E1 52 02 00      sub sp, 2
0401   06E4             ; --- START LOCAL VAR INITIALIZATION
0402   06E4 FA FF FF      lea d, [bp + -1] ; $pass
0403   06E7 DA            push d
0404   06E8 FD 2E 01 00   mov32 cb, $00000001
0404   06EC 00 00 
0405   06EE E7            pop d
0406   06EF FD 43         mov [d], b
0407   06F1             ; --- END LOCAL VAR INITIALIZATION
0408   06F1             ; pass = pass && c == 'A'; 
0409   06F1 FA FF FF      lea d, [bp + -1] ; $pass
0410   06F4 DA            push d
0411   06F5 FA FF FF      lea d, [bp + -1] ; $pass
0412   06F8 2A            mov b, [d]
0413   06F9 38 00 00      mov c, 0
0414   06FC             ; --- START LOGICAL AND
0415   06FC D7            push a
0416   06FD 11            mov a, b
0417   06FE FA 05 00      lea d, [bp + 5] ; $c
0418   0701 32            mov bl, [d]
0419   0702 A7 00         mov bh, 0
0420   0704 38 00 00      mov c, 0
0421   0707             ; --- START RELATIONAL
0422   0707 D7            push a
0423   0708 11            mov a, b
0424   0709 FD 2E 41 00   mov32 cb, $00000041
0424   070D 00 00 
0425   070F B0            cmp a, b
0426   0710 FD 71         seq ; ==
0427   0712 E4            pop a
0428   0713             ; --- END RELATIONAL
0429   0713 FD A7         sand a, b
0430   0715 E4            pop a
0431   0716             ; --- END LOGICAL AND
0432   0716 E7            pop d
0433   0717 FD 43         mov [d], b
0434   0719             ; pass = pass && i == 55; 
0435   0719 FA FF FF      lea d, [bp + -1] ; $pass
0436   071C DA            push d
0437   071D FA FF FF      lea d, [bp + -1] ; $pass
0438   0720 2A            mov b, [d]
0439   0721 38 00 00      mov c, 0
0440   0724             ; --- START LOGICAL AND
0441   0724 D7            push a
0442   0725 11            mov a, b
0443   0726 FA 06 00      lea d, [bp + 6] ; $i
0444   0729 2A            mov b, [d]
0445   072A 38 00 00      mov c, 0
0446   072D             ; --- START RELATIONAL
0447   072D D7            push a
0448   072E 11            mov a, b
0449   072F FD 2E 37 00   mov32 cb, $00000037
0449   0733 00 00 
0450   0735 B0            cmp a, b
0451   0736 FD 71         seq ; ==
0452   0738 E4            pop a
0453   0739             ; --- END RELATIONAL
0454   0739 FD A7         sand a, b
0455   073B E4            pop a
0456   073C             ; --- END LOGICAL AND
0457   073C E7            pop d
0458   073D FD 43         mov [d], b
0459   073F             ; pass = pass && ca[0] == 'A'; 
0460   073F FA FF FF      lea d, [bp + -1] ; $pass
0461   0742 DA            push d
0462   0743 FA FF FF      lea d, [bp + -1] ; $pass
0463   0746 2A            mov b, [d]
0464   0747 38 00 00      mov c, 0
0465   074A             ; --- START LOGICAL AND
0466   074A D7            push a
0467   074B 11            mov a, b
0468   074C 2C 08 00      mov b, [bp + 8] ; $ca
0469   074F 74            mov d, b
0470   0750 D7            push a
0471   0751 DA            push d
0472   0752 FD 2E 00 00   mov32 cb, $00000000
0472   0756 00 00 
0473   0758 E7            pop d
0474   0759 5A            add d, b
0475   075A E4            pop a
0476   075B 32            mov bl, [d]
0477   075C A7 00         mov bh, 0
0478   075E 38 00 00      mov c, 0
0479   0761             ; --- START RELATIONAL
0480   0761 D7            push a
0481   0762 11            mov a, b
0482   0763 FD 2E 41 00   mov32 cb, $00000041
0482   0767 00 00 
0483   0769 B0            cmp a, b
0484   076A FD 71         seq ; ==
0485   076C E4            pop a
0486   076D             ; --- END RELATIONAL
0487   076D FD A7         sand a, b
0488   076F E4            pop a
0489   0770             ; --- END LOGICAL AND
0490   0770 E7            pop d
0491   0771 FD 43         mov [d], b
0492   0773             ; pass = pass && ca[1] == 'B'; 
0493   0773 FA FF FF      lea d, [bp + -1] ; $pass
0494   0776 DA            push d
0495   0777 FA FF FF      lea d, [bp + -1] ; $pass
0496   077A 2A            mov b, [d]
0497   077B 38 00 00      mov c, 0
0498   077E             ; --- START LOGICAL AND
0499   077E D7            push a
0500   077F 11            mov a, b
0501   0780 2C 08 00      mov b, [bp + 8] ; $ca
0502   0783 74            mov d, b
0503   0784 D7            push a
0504   0785 DA            push d
0505   0786 FD 2E 01 00   mov32 cb, $00000001
0505   078A 00 00 
0506   078C E7            pop d
0507   078D 5A            add d, b
0508   078E E4            pop a
0509   078F 32            mov bl, [d]
0510   0790 A7 00         mov bh, 0
0511   0792 38 00 00      mov c, 0
0512   0795             ; --- START RELATIONAL
0513   0795 D7            push a
0514   0796 11            mov a, b
0515   0797 FD 2E 42 00   mov32 cb, $00000042
0515   079B 00 00 
0516   079D B0            cmp a, b
0517   079E FD 71         seq ; ==
0518   07A0 E4            pop a
0519   07A1             ; --- END RELATIONAL
0520   07A1 FD A7         sand a, b
0521   07A3 E4            pop a
0522   07A4             ; --- END LOGICAL AND
0523   07A4 E7            pop d
0524   07A5 FD 43         mov [d], b
0525   07A7             ; pass = pass && ca[2] == 'C'; 
0526   07A7 FA FF FF      lea d, [bp + -1] ; $pass
0527   07AA DA            push d
0528   07AB FA FF FF      lea d, [bp + -1] ; $pass
0529   07AE 2A            mov b, [d]
0530   07AF 38 00 00      mov c, 0
0531   07B2             ; --- START LOGICAL AND
0532   07B2 D7            push a
0533   07B3 11            mov a, b
0534   07B4 2C 08 00      mov b, [bp + 8] ; $ca
0535   07B7 74            mov d, b
0536   07B8 D7            push a
0537   07B9 DA            push d
0538   07BA FD 2E 02 00   mov32 cb, $00000002
0538   07BE 00 00 
0539   07C0 E7            pop d
0540   07C1 5A            add d, b
0541   07C2 E4            pop a
0542   07C3 32            mov bl, [d]
0543   07C4 A7 00         mov bh, 0
0544   07C6 38 00 00      mov c, 0
0545   07C9             ; --- START RELATIONAL
0546   07C9 D7            push a
0547   07CA 11            mov a, b
0548   07CB FD 2E 43 00   mov32 cb, $00000043
0548   07CF 00 00 
0549   07D1 B0            cmp a, b
0550   07D2 FD 71         seq ; ==
0551   07D4 E4            pop a
0552   07D5             ; --- END RELATIONAL
0553   07D5 FD A7         sand a, b
0554   07D7 E4            pop a
0555   07D8             ; --- END LOGICAL AND
0556   07D8 E7            pop d
0557   07D9 FD 43         mov [d], b
0558   07DB             ; pass = pass && ca[3] == 'D'; 
0559   07DB FA FF FF      lea d, [bp + -1] ; $pass
0560   07DE DA            push d
0561   07DF FA FF FF      lea d, [bp + -1] ; $pass
0562   07E2 2A            mov b, [d]
0563   07E3 38 00 00      mov c, 0
0564   07E6             ; --- START LOGICAL AND
0565   07E6 D7            push a
0566   07E7 11            mov a, b
0567   07E8 2C 08 00      mov b, [bp + 8] ; $ca
0568   07EB 74            mov d, b
0569   07EC D7            push a
0570   07ED DA            push d
0571   07EE FD 2E 03 00   mov32 cb, $00000003
0571   07F2 00 00 
0572   07F4 E7            pop d
0573   07F5 5A            add d, b
0574   07F6 E4            pop a
0575   07F7 32            mov bl, [d]
0576   07F8 A7 00         mov bh, 0
0577   07FA 38 00 00      mov c, 0
0578   07FD             ; --- START RELATIONAL
0579   07FD D7            push a
0580   07FE 11            mov a, b
0581   07FF FD 2E 44 00   mov32 cb, $00000044
0581   0803 00 00 
0582   0805 B0            cmp a, b
0583   0806 FD 71         seq ; ==
0584   0808 E4            pop a
0585   0809             ; --- END RELATIONAL
0586   0809 FD A7         sand a, b
0587   080B E4            pop a
0588   080C             ; --- END LOGICAL AND
0589   080C E7            pop d
0590   080D FD 43         mov [d], b
0591   080F             ; pass = pass && ca[4] == 'E'; 
0592   080F FA FF FF      lea d, [bp + -1] ; $pass
0593   0812 DA            push d
0594   0813 FA FF FF      lea d, [bp + -1] ; $pass
0595   0816 2A            mov b, [d]
0596   0817 38 00 00      mov c, 0
0597   081A             ; --- START LOGICAL AND
0598   081A D7            push a
0599   081B 11            mov a, b
0600   081C 2C 08 00      mov b, [bp + 8] ; $ca
0601   081F 74            mov d, b
0602   0820 D7            push a
0603   0821 DA            push d
0604   0822 FD 2E 04 00   mov32 cb, $00000004
0604   0826 00 00 
0605   0828 E7            pop d
0606   0829 5A            add d, b
0607   082A E4            pop a
0608   082B 32            mov bl, [d]
0609   082C A7 00         mov bh, 0
0610   082E 38 00 00      mov c, 0
0611   0831             ; --- START RELATIONAL
0612   0831 D7            push a
0613   0832 11            mov a, b
0614   0833 FD 2E 45 00   mov32 cb, $00000045
0614   0837 00 00 
0615   0839 B0            cmp a, b
0616   083A FD 71         seq ; ==
0617   083C E4            pop a
0618   083D             ; --- END RELATIONAL
0619   083D FD A7         sand a, b
0620   083F E4            pop a
0621   0840             ; --- END LOGICAL AND
0622   0840 E7            pop d
0623   0841 FD 43         mov [d], b
0624   0843             ; pass = pass && ia[0] == 0; 
0625   0843 FA FF FF      lea d, [bp + -1] ; $pass
0626   0846 DA            push d
0627   0847 FA FF FF      lea d, [bp + -1] ; $pass
0628   084A 2A            mov b, [d]
0629   084B 38 00 00      mov c, 0
0630   084E             ; --- START LOGICAL AND
0631   084E D7            push a
0632   084F 11            mov a, b
0633   0850 2C 0A 00      mov b, [bp + 10] ; $ia
0634   0853 74            mov d, b
0635   0854 D7            push a
0636   0855 DA            push d
0637   0856 FD 2E 00 00   mov32 cb, $00000000
0637   085A 00 00 
0638   085C E7            pop d
0639   085D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0640   0861 E4            pop a
0641   0862 2A            mov b, [d]
0642   0863 38 00 00      mov c, 0
0643   0866             ; --- START RELATIONAL
0644   0866 D7            push a
0645   0867 11            mov a, b
0646   0868 FD 2E 00 00   mov32 cb, $00000000
0646   086C 00 00 
0647   086E B0            cmp a, b
0648   086F FD 71         seq ; ==
0649   0871 E4            pop a
0650   0872             ; --- END RELATIONAL
0651   0872 FD A7         sand a, b
0652   0874 E4            pop a
0653   0875             ; --- END LOGICAL AND
0654   0875 E7            pop d
0655   0876 FD 43         mov [d], b
0656   0878             ; pass = pass && ia[1] == 1; 
0657   0878 FA FF FF      lea d, [bp + -1] ; $pass
0658   087B DA            push d
0659   087C FA FF FF      lea d, [bp + -1] ; $pass
0660   087F 2A            mov b, [d]
0661   0880 38 00 00      mov c, 0
0662   0883             ; --- START LOGICAL AND
0663   0883 D7            push a
0664   0884 11            mov a, b
0665   0885 2C 0A 00      mov b, [bp + 10] ; $ia
0666   0888 74            mov d, b
0667   0889 D7            push a
0668   088A DA            push d
0669   088B FD 2E 01 00   mov32 cb, $00000001
0669   088F 00 00 
0670   0891 E7            pop d
0671   0892 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0672   0896 E4            pop a
0673   0897 2A            mov b, [d]
0674   0898 38 00 00      mov c, 0
0675   089B             ; --- START RELATIONAL
0676   089B D7            push a
0677   089C 11            mov a, b
0678   089D FD 2E 01 00   mov32 cb, $00000001
0678   08A1 00 00 
0679   08A3 B0            cmp a, b
0680   08A4 FD 71         seq ; ==
0681   08A6 E4            pop a
0682   08A7             ; --- END RELATIONAL
0683   08A7 FD A7         sand a, b
0684   08A9 E4            pop a
0685   08AA             ; --- END LOGICAL AND
0686   08AA E7            pop d
0687   08AB FD 43         mov [d], b
0688   08AD             ; pass = pass && ia[2] == 2; 
0689   08AD FA FF FF      lea d, [bp + -1] ; $pass
0690   08B0 DA            push d
0691   08B1 FA FF FF      lea d, [bp + -1] ; $pass
0692   08B4 2A            mov b, [d]
0693   08B5 38 00 00      mov c, 0
0694   08B8             ; --- START LOGICAL AND
0695   08B8 D7            push a
0696   08B9 11            mov a, b
0697   08BA 2C 0A 00      mov b, [bp + 10] ; $ia
0698   08BD 74            mov d, b
0699   08BE D7            push a
0700   08BF DA            push d
0701   08C0 FD 2E 02 00   mov32 cb, $00000002
0701   08C4 00 00 
0702   08C6 E7            pop d
0703   08C7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0704   08CB E4            pop a
0705   08CC 2A            mov b, [d]
0706   08CD 38 00 00      mov c, 0
0707   08D0             ; --- START RELATIONAL
0708   08D0 D7            push a
0709   08D1 11            mov a, b
0710   08D2 FD 2E 02 00   mov32 cb, $00000002
0710   08D6 00 00 
0711   08D8 B0            cmp a, b
0712   08D9 FD 71         seq ; ==
0713   08DB E4            pop a
0714   08DC             ; --- END RELATIONAL
0715   08DC FD A7         sand a, b
0716   08DE E4            pop a
0717   08DF             ; --- END LOGICAL AND
0718   08DF E7            pop d
0719   08E0 FD 43         mov [d], b
0720   08E2             ; pass = pass && ia[3] == 3; 
0721   08E2 FA FF FF      lea d, [bp + -1] ; $pass
0722   08E5 DA            push d
0723   08E6 FA FF FF      lea d, [bp + -1] ; $pass
0724   08E9 2A            mov b, [d]
0725   08EA 38 00 00      mov c, 0
0726   08ED             ; --- START LOGICAL AND
0727   08ED D7            push a
0728   08EE 11            mov a, b
0729   08EF 2C 0A 00      mov b, [bp + 10] ; $ia
0730   08F2 74            mov d, b
0731   08F3 D7            push a
0732   08F4 DA            push d
0733   08F5 FD 2E 03 00   mov32 cb, $00000003
0733   08F9 00 00 
0734   08FB E7            pop d
0735   08FC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0736   0900 E4            pop a
0737   0901 2A            mov b, [d]
0738   0902 38 00 00      mov c, 0
0739   0905             ; --- START RELATIONAL
0740   0905 D7            push a
0741   0906 11            mov a, b
0742   0907 FD 2E 03 00   mov32 cb, $00000003
0742   090B 00 00 
0743   090D B0            cmp a, b
0744   090E FD 71         seq ; ==
0745   0910 E4            pop a
0746   0911             ; --- END RELATIONAL
0747   0911 FD A7         sand a, b
0748   0913 E4            pop a
0749   0914             ; --- END LOGICAL AND
0750   0914 E7            pop d
0751   0915 FD 43         mov [d], b
0752   0917             ; pass = pass && ia[4] == 4; 
0753   0917 FA FF FF      lea d, [bp + -1] ; $pass
0754   091A DA            push d
0755   091B FA FF FF      lea d, [bp + -1] ; $pass
0756   091E 2A            mov b, [d]
0757   091F 38 00 00      mov c, 0
0758   0922             ; --- START LOGICAL AND
0759   0922 D7            push a
0760   0923 11            mov a, b
0761   0924 2C 0A 00      mov b, [bp + 10] ; $ia
0762   0927 74            mov d, b
0763   0928 D7            push a
0764   0929 DA            push d
0765   092A FD 2E 04 00   mov32 cb, $00000004
0765   092E 00 00 
0766   0930 E7            pop d
0767   0931 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0768   0935 E4            pop a
0769   0936 2A            mov b, [d]
0770   0937 38 00 00      mov c, 0
0771   093A             ; --- START RELATIONAL
0772   093A D7            push a
0773   093B 11            mov a, b
0774   093C FD 2E 04 00   mov32 cb, $00000004
0774   0940 00 00 
0775   0942 B0            cmp a, b
0776   0943 FD 71         seq ; ==
0777   0945 E4            pop a
0778   0946             ; --- END RELATIONAL
0779   0946 FD A7         sand a, b
0780   0948 E4            pop a
0781   0949             ; --- END LOGICAL AND
0782   0949 E7            pop d
0783   094A FD 43         mov [d], b
0784   094C             ; return pass; 
0785   094C FA FF FF      lea d, [bp + -1] ; $pass
0786   094F 2A            mov b, [d]
0787   0950 38 00 00      mov c, 0
0788   0953 F9            leave
0789   0954 09            ret
0790   0955             
0791   0955             test1:
0792   0955 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0793   0958             ; int pass = 1; 
0794   0958 52 02 00      sub sp, 2
0795   095B             ; --- START LOCAL VAR INITIALIZATION
0796   095B FA FF FF      lea d, [bp + -1] ; $pass
0797   095E DA            push d
0798   095F FD 2E 01 00   mov32 cb, $00000001
0798   0963 00 00 
0799   0965 E7            pop d
0800   0966 FD 43         mov [d], b
0801   0968             ; --- END LOCAL VAR INITIALIZATION
0802   0968             ; char ca[5]; 
0803   0968 52 05 00      sub sp, 5
0804   096B             ; char *p; 
0805   096B 52 02 00      sub sp, 2
0806   096E             ; p = ca; 
0807   096E FA F8 FF      lea d, [bp + -8] ; $p
0808   0971 DA            push d
0809   0972 FA FA FF      lea d, [bp + -6] ; $ca
0810   0975 2D            mov b, d
0811   0976 38 00 00      mov c, 0
0812   0979 E7            pop d
0813   097A FD 43         mov [d], b
0814   097C             ; ca[0] = 'A'; 
0815   097C FA FA FF      lea d, [bp + -6] ; $ca
0816   097F D7            push a
0817   0980 DA            push d
0818   0981 FD 2E 00 00   mov32 cb, $00000000
0818   0985 00 00 
0819   0987 E7            pop d
0820   0988 5A            add d, b
0821   0989 E4            pop a
0822   098A DA            push d
0823   098B FD 2E 41 00   mov32 cb, $00000041
0823   098F 00 00 
0824   0991 E7            pop d
0825   0992 FD 3E         mov [d], bl
0826   0994             ; ca[1] = 'B'; 
0827   0994 FA FA FF      lea d, [bp + -6] ; $ca
0828   0997 D7            push a
0829   0998 DA            push d
0830   0999 FD 2E 01 00   mov32 cb, $00000001
0830   099D 00 00 
0831   099F E7            pop d
0832   09A0 5A            add d, b
0833   09A1 E4            pop a
0834   09A2 DA            push d
0835   09A3 FD 2E 42 00   mov32 cb, $00000042
0835   09A7 00 00 
0836   09A9 E7            pop d
0837   09AA FD 3E         mov [d], bl
0838   09AC             ; ca[2] = 'C'; 
0839   09AC FA FA FF      lea d, [bp + -6] ; $ca
0840   09AF D7            push a
0841   09B0 DA            push d
0842   09B1 FD 2E 02 00   mov32 cb, $00000002
0842   09B5 00 00 
0843   09B7 E7            pop d
0844   09B8 5A            add d, b
0845   09B9 E4            pop a
0846   09BA DA            push d
0847   09BB FD 2E 43 00   mov32 cb, $00000043
0847   09BF 00 00 
0848   09C1 E7            pop d
0849   09C2 FD 3E         mov [d], bl
0850   09C4             ; ca[3] = 'D'; 
0851   09C4 FA FA FF      lea d, [bp + -6] ; $ca
0852   09C7 D7            push a
0853   09C8 DA            push d
0854   09C9 FD 2E 03 00   mov32 cb, $00000003
0854   09CD 00 00 
0855   09CF E7            pop d
0856   09D0 5A            add d, b
0857   09D1 E4            pop a
0858   09D2 DA            push d
0859   09D3 FD 2E 44 00   mov32 cb, $00000044
0859   09D7 00 00 
0860   09D9 E7            pop d
0861   09DA FD 3E         mov [d], bl
0862   09DC             ; ca[4] = 'E'; 
0863   09DC FA FA FF      lea d, [bp + -6] ; $ca
0864   09DF D7            push a
0865   09E0 DA            push d
0866   09E1 FD 2E 04 00   mov32 cb, $00000004
0866   09E5 00 00 
0867   09E7 E7            pop d
0868   09E8 5A            add d, b
0869   09E9 E4            pop a
0870   09EA DA            push d
0871   09EB FD 2E 45 00   mov32 cb, $00000045
0871   09EF 00 00 
0872   09F1 E7            pop d
0873   09F2 FD 3E         mov [d], bl
0874   09F4             ; pass = pass && *p == 'A'; 
0875   09F4 FA FF FF      lea d, [bp + -1] ; $pass
0876   09F7 DA            push d
0877   09F8 FA FF FF      lea d, [bp + -1] ; $pass
0878   09FB 2A            mov b, [d]
0879   09FC 38 00 00      mov c, 0
0880   09FF             ; --- START LOGICAL AND
0881   09FF D7            push a
0882   0A00 11            mov a, b
0883   0A01 FA F8 FF      lea d, [bp + -8] ; $p
0884   0A04 2A            mov b, [d]
0885   0A05 38 00 00      mov c, 0
0886   0A08 74            mov d, b
0887   0A09 32            mov bl, [d]
0888   0A0A A7 00         mov bh, 0
0889   0A0C 38 00 00      mov c, 0
0890   0A0F             ; --- START RELATIONAL
0891   0A0F D7            push a
0892   0A10 11            mov a, b
0893   0A11 FD 2E 41 00   mov32 cb, $00000041
0893   0A15 00 00 
0894   0A17 B0            cmp a, b
0895   0A18 FD 71         seq ; ==
0896   0A1A E4            pop a
0897   0A1B             ; --- END RELATIONAL
0898   0A1B FD A7         sand a, b
0899   0A1D E4            pop a
0900   0A1E             ; --- END LOGICAL AND
0901   0A1E E7            pop d
0902   0A1F FD 43         mov [d], b
0903   0A21             ; pass = pass && *(p + 1) == 'B'; 
0904   0A21 FA FF FF      lea d, [bp + -1] ; $pass
0905   0A24 DA            push d
0906   0A25 FA FF FF      lea d, [bp + -1] ; $pass
0907   0A28 2A            mov b, [d]
0908   0A29 38 00 00      mov c, 0
0909   0A2C             ; --- START LOGICAL AND
0910   0A2C D7            push a
0911   0A2D 11            mov a, b
0912   0A2E FA F8 FF      lea d, [bp + -8] ; $p
0913   0A31 2A            mov b, [d]
0914   0A32 38 00 00      mov c, 0
0915   0A35             ; --- START TERMS
0916   0A35 D7            push a
0917   0A36 11            mov a, b
0918   0A37 FD 2E 01 00   mov32 cb, $00000001
0918   0A3B 00 00 
0919   0A3D 56            add b, a
0920   0A3E E4            pop a
0921   0A3F             ; --- END TERMS
0922   0A3F 74            mov d, b
0923   0A40 32            mov bl, [d]
0924   0A41 A7 00         mov bh, 0
0925   0A43 38 00 00      mov c, 0
0926   0A46             ; --- START RELATIONAL
0927   0A46 D7            push a
0928   0A47 11            mov a, b
0929   0A48 FD 2E 42 00   mov32 cb, $00000042
0929   0A4C 00 00 
0930   0A4E B0            cmp a, b
0931   0A4F FD 71         seq ; ==
0932   0A51 E4            pop a
0933   0A52             ; --- END RELATIONAL
0934   0A52 FD A7         sand a, b
0935   0A54 E4            pop a
0936   0A55             ; --- END LOGICAL AND
0937   0A55 E7            pop d
0938   0A56 FD 43         mov [d], b
0939   0A58             ; pass = pass && *(p + 2) == 'C'; 
0940   0A58 FA FF FF      lea d, [bp + -1] ; $pass
0941   0A5B DA            push d
0942   0A5C FA FF FF      lea d, [bp + -1] ; $pass
0943   0A5F 2A            mov b, [d]
0944   0A60 38 00 00      mov c, 0
0945   0A63             ; --- START LOGICAL AND
0946   0A63 D7            push a
0947   0A64 11            mov a, b
0948   0A65 FA F8 FF      lea d, [bp + -8] ; $p
0949   0A68 2A            mov b, [d]
0950   0A69 38 00 00      mov c, 0
0951   0A6C             ; --- START TERMS
0952   0A6C D7            push a
0953   0A6D 11            mov a, b
0954   0A6E FD 2E 02 00   mov32 cb, $00000002
0954   0A72 00 00 
0955   0A74 56            add b, a
0956   0A75 E4            pop a
0957   0A76             ; --- END TERMS
0958   0A76 74            mov d, b
0959   0A77 32            mov bl, [d]
0960   0A78 A7 00         mov bh, 0
0961   0A7A 38 00 00      mov c, 0
0962   0A7D             ; --- START RELATIONAL
0963   0A7D D7            push a
0964   0A7E 11            mov a, b
0965   0A7F FD 2E 43 00   mov32 cb, $00000043
0965   0A83 00 00 
0966   0A85 B0            cmp a, b
0967   0A86 FD 71         seq ; ==
0968   0A88 E4            pop a
0969   0A89             ; --- END RELATIONAL
0970   0A89 FD A7         sand a, b
0971   0A8B E4            pop a
0972   0A8C             ; --- END LOGICAL AND
0973   0A8C E7            pop d
0974   0A8D FD 43         mov [d], b
0975   0A8F             ; pass = pass && *(p + 3) == 'D'; 
0976   0A8F FA FF FF      lea d, [bp + -1] ; $pass
0977   0A92 DA            push d
0978   0A93 FA FF FF      lea d, [bp + -1] ; $pass
0979   0A96 2A            mov b, [d]
0980   0A97 38 00 00      mov c, 0
0981   0A9A             ; --- START LOGICAL AND
0982   0A9A D7            push a
0983   0A9B 11            mov a, b
0984   0A9C FA F8 FF      lea d, [bp + -8] ; $p
0985   0A9F 2A            mov b, [d]
0986   0AA0 38 00 00      mov c, 0
0987   0AA3             ; --- START TERMS
0988   0AA3 D7            push a
0989   0AA4 11            mov a, b
0990   0AA5 FD 2E 03 00   mov32 cb, $00000003
0990   0AA9 00 00 
0991   0AAB 56            add b, a
0992   0AAC E4            pop a
0993   0AAD             ; --- END TERMS
0994   0AAD 74            mov d, b
0995   0AAE 32            mov bl, [d]
0996   0AAF A7 00         mov bh, 0
0997   0AB1 38 00 00      mov c, 0
0998   0AB4             ; --- START RELATIONAL
0999   0AB4 D7            push a
1000   0AB5 11            mov a, b
1001   0AB6 FD 2E 44 00   mov32 cb, $00000044
1001   0ABA 00 00 
1002   0ABC B0            cmp a, b
1003   0ABD FD 71         seq ; ==
1004   0ABF E4            pop a
1005   0AC0             ; --- END RELATIONAL
1006   0AC0 FD A7         sand a, b
1007   0AC2 E4            pop a
1008   0AC3             ; --- END LOGICAL AND
1009   0AC3 E7            pop d
1010   0AC4 FD 43         mov [d], b
1011   0AC6             ; pass = pass && *(p + 4) == 'E'; 
1012   0AC6 FA FF FF      lea d, [bp + -1] ; $pass
1013   0AC9 DA            push d
1014   0ACA FA FF FF      lea d, [bp + -1] ; $pass
1015   0ACD 2A            mov b, [d]
1016   0ACE 38 00 00      mov c, 0
1017   0AD1             ; --- START LOGICAL AND
1018   0AD1 D7            push a
1019   0AD2 11            mov a, b
1020   0AD3 FA F8 FF      lea d, [bp + -8] ; $p
1021   0AD6 2A            mov b, [d]
1022   0AD7 38 00 00      mov c, 0
1023   0ADA             ; --- START TERMS
1024   0ADA D7            push a
1025   0ADB 11            mov a, b
1026   0ADC FD 2E 04 00   mov32 cb, $00000004
1026   0AE0 00 00 
1027   0AE2 56            add b, a
1028   0AE3 E4            pop a
1029   0AE4             ; --- END TERMS
1030   0AE4 74            mov d, b
1031   0AE5 32            mov bl, [d]
1032   0AE6 A7 00         mov bh, 0
1033   0AE8 38 00 00      mov c, 0
1034   0AEB             ; --- START RELATIONAL
1035   0AEB D7            push a
1036   0AEC 11            mov a, b
1037   0AED FD 2E 45 00   mov32 cb, $00000045
1037   0AF1 00 00 
1038   0AF3 B0            cmp a, b
1039   0AF4 FD 71         seq ; ==
1040   0AF6 E4            pop a
1041   0AF7             ; --- END RELATIONAL
1042   0AF7 FD A7         sand a, b
1043   0AF9 E4            pop a
1044   0AFA             ; --- END LOGICAL AND
1045   0AFA E7            pop d
1046   0AFB FD 43         mov [d], b
1047   0AFD             ; return pass; 
1048   0AFD FA FF FF      lea d, [bp + -1] ; $pass
1049   0B00 2A            mov b, [d]
1050   0B01 38 00 00      mov c, 0
1051   0B04 F9            leave
1052   0B05 09            ret
1053   0B06             
1054   0B06             test2:
1055   0B06 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1056   0B09             ; int pass = 1; 
1057   0B09 52 02 00      sub sp, 2
1058   0B0C             ; --- START LOCAL VAR INITIALIZATION
1059   0B0C FA FF FF      lea d, [bp + -1] ; $pass
1060   0B0F DA            push d
1061   0B10 FD 2E 01 00   mov32 cb, $00000001
1061   0B14 00 00 
1062   0B16 E7            pop d
1063   0B17 FD 43         mov [d], b
1064   0B19             ; --- END LOCAL VAR INITIALIZATION
1065   0B19             ; char ca[5]; 
1066   0B19 52 05 00      sub sp, 5
1067   0B1C             ; int indices[5]; 
1068   0B1C 52 0A 00      sub sp, 10
1069   0B1F             ; char *p; 
1070   0B1F 52 02 00      sub sp, 2
1071   0B22             ; p = ca; 
1072   0B22 FA EE FF      lea d, [bp + -18] ; $p
1073   0B25 DA            push d
1074   0B26 FA FA FF      lea d, [bp + -6] ; $ca
1075   0B29 2D            mov b, d
1076   0B2A 38 00 00      mov c, 0
1077   0B2D E7            pop d
1078   0B2E FD 43         mov [d], b
1079   0B30             ; ca[0] = 'A'; 
1080   0B30 FA FA FF      lea d, [bp + -6] ; $ca
1081   0B33 D7            push a
1082   0B34 DA            push d
1083   0B35 FD 2E 00 00   mov32 cb, $00000000
1083   0B39 00 00 
1084   0B3B E7            pop d
1085   0B3C 5A            add d, b
1086   0B3D E4            pop a
1087   0B3E DA            push d
1088   0B3F FD 2E 41 00   mov32 cb, $00000041
1088   0B43 00 00 
1089   0B45 E7            pop d
1090   0B46 FD 3E         mov [d], bl
1091   0B48             ; ca[1] = 'B'; 
1092   0B48 FA FA FF      lea d, [bp + -6] ; $ca
1093   0B4B D7            push a
1094   0B4C DA            push d
1095   0B4D FD 2E 01 00   mov32 cb, $00000001
1095   0B51 00 00 
1096   0B53 E7            pop d
1097   0B54 5A            add d, b
1098   0B55 E4            pop a
1099   0B56 DA            push d
1100   0B57 FD 2E 42 00   mov32 cb, $00000042
1100   0B5B 00 00 
1101   0B5D E7            pop d
1102   0B5E FD 3E         mov [d], bl
1103   0B60             ; ca[2] = 'C'; 
1104   0B60 FA FA FF      lea d, [bp + -6] ; $ca
1105   0B63 D7            push a
1106   0B64 DA            push d
1107   0B65 FD 2E 02 00   mov32 cb, $00000002
1107   0B69 00 00 
1108   0B6B E7            pop d
1109   0B6C 5A            add d, b
1110   0B6D E4            pop a
1111   0B6E DA            push d
1112   0B6F FD 2E 43 00   mov32 cb, $00000043
1112   0B73 00 00 
1113   0B75 E7            pop d
1114   0B76 FD 3E         mov [d], bl
1115   0B78             ; ca[3] = 'D'; 
1116   0B78 FA FA FF      lea d, [bp + -6] ; $ca
1117   0B7B D7            push a
1118   0B7C DA            push d
1119   0B7D FD 2E 03 00   mov32 cb, $00000003
1119   0B81 00 00 
1120   0B83 E7            pop d
1121   0B84 5A            add d, b
1122   0B85 E4            pop a
1123   0B86 DA            push d
1124   0B87 FD 2E 44 00   mov32 cb, $00000044
1124   0B8B 00 00 
1125   0B8D E7            pop d
1126   0B8E FD 3E         mov [d], bl
1127   0B90             ; ca[4] = 'E'; 
1128   0B90 FA FA FF      lea d, [bp + -6] ; $ca
1129   0B93 D7            push a
1130   0B94 DA            push d
1131   0B95 FD 2E 04 00   mov32 cb, $00000004
1131   0B99 00 00 
1132   0B9B E7            pop d
1133   0B9C 5A            add d, b
1134   0B9D E4            pop a
1135   0B9E DA            push d
1136   0B9F FD 2E 45 00   mov32 cb, $00000045
1136   0BA3 00 00 
1137   0BA5 E7            pop d
1138   0BA6 FD 3E         mov [d], bl
1139   0BA8             ; indices[0] = 0; 
1140   0BA8 FA F0 FF      lea d, [bp + -16] ; $indices
1141   0BAB D7            push a
1142   0BAC DA            push d
1143   0BAD FD 2E 00 00   mov32 cb, $00000000
1143   0BB1 00 00 
1144   0BB3 E7            pop d
1145   0BB4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1146   0BB8 E4            pop a
1147   0BB9 DA            push d
1148   0BBA FD 2E 00 00   mov32 cb, $00000000
1148   0BBE 00 00 
1149   0BC0 E7            pop d
1150   0BC1 FD 43         mov [d], b
1151   0BC3             ; indices[1] = 1; 
1152   0BC3 FA F0 FF      lea d, [bp + -16] ; $indices
1153   0BC6 D7            push a
1154   0BC7 DA            push d
1155   0BC8 FD 2E 01 00   mov32 cb, $00000001
1155   0BCC 00 00 
1156   0BCE E7            pop d
1157   0BCF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1158   0BD3 E4            pop a
1159   0BD4 DA            push d
1160   0BD5 FD 2E 01 00   mov32 cb, $00000001
1160   0BD9 00 00 
1161   0BDB E7            pop d
1162   0BDC FD 43         mov [d], b
1163   0BDE             ; indices[2] = 2; 
1164   0BDE FA F0 FF      lea d, [bp + -16] ; $indices
1165   0BE1 D7            push a
1166   0BE2 DA            push d
1167   0BE3 FD 2E 02 00   mov32 cb, $00000002
1167   0BE7 00 00 
1168   0BE9 E7            pop d
1169   0BEA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1170   0BEE E4            pop a
1171   0BEF DA            push d
1172   0BF0 FD 2E 02 00   mov32 cb, $00000002
1172   0BF4 00 00 
1173   0BF6 E7            pop d
1174   0BF7 FD 43         mov [d], b
1175   0BF9             ; indices[3] = 3; 
1176   0BF9 FA F0 FF      lea d, [bp + -16] ; $indices
1177   0BFC D7            push a
1178   0BFD DA            push d
1179   0BFE FD 2E 03 00   mov32 cb, $00000003
1179   0C02 00 00 
1180   0C04 E7            pop d
1181   0C05 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1182   0C09 E4            pop a
1183   0C0A DA            push d
1184   0C0B FD 2E 03 00   mov32 cb, $00000003
1184   0C0F 00 00 
1185   0C11 E7            pop d
1186   0C12 FD 43         mov [d], b
1187   0C14             ; indices[4] = 4; 
1188   0C14 FA F0 FF      lea d, [bp + -16] ; $indices
1189   0C17 D7            push a
1190   0C18 DA            push d
1191   0C19 FD 2E 04 00   mov32 cb, $00000004
1191   0C1D 00 00 
1192   0C1F E7            pop d
1193   0C20 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1194   0C24 E4            pop a
1195   0C25 DA            push d
1196   0C26 FD 2E 04 00   mov32 cb, $00000004
1196   0C2A 00 00 
1197   0C2C E7            pop d
1198   0C2D FD 43         mov [d], b
1199   0C2F             ; pass = pass && *(p + indices[0]) == 'A'; 
1200   0C2F FA FF FF      lea d, [bp + -1] ; $pass
1201   0C32 DA            push d
1202   0C33 FA FF FF      lea d, [bp + -1] ; $pass
1203   0C36 2A            mov b, [d]
1204   0C37 38 00 00      mov c, 0
1205   0C3A             ; --- START LOGICAL AND
1206   0C3A D7            push a
1207   0C3B 11            mov a, b
1208   0C3C FA EE FF      lea d, [bp + -18] ; $p
1209   0C3F 2A            mov b, [d]
1210   0C40 38 00 00      mov c, 0
1211   0C43             ; --- START TERMS
1212   0C43 D7            push a
1213   0C44 11            mov a, b
1214   0C45 FA F0 FF      lea d, [bp + -16] ; $indices
1215   0C48 D7            push a
1216   0C49 DA            push d
1217   0C4A FD 2E 00 00   mov32 cb, $00000000
1217   0C4E 00 00 
1218   0C50 E7            pop d
1219   0C51 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1220   0C55 E4            pop a
1221   0C56 2A            mov b, [d]
1222   0C57 38 00 00      mov c, 0
1223   0C5A 56            add b, a
1224   0C5B E4            pop a
1225   0C5C             ; --- END TERMS
1226   0C5C 74            mov d, b
1227   0C5D 32            mov bl, [d]
1228   0C5E A7 00         mov bh, 0
1229   0C60 38 00 00      mov c, 0
1230   0C63             ; --- START RELATIONAL
1231   0C63 D7            push a
1232   0C64 11            mov a, b
1233   0C65 FD 2E 41 00   mov32 cb, $00000041
1233   0C69 00 00 
1234   0C6B B0            cmp a, b
1235   0C6C FD 71         seq ; ==
1236   0C6E E4            pop a
1237   0C6F             ; --- END RELATIONAL
1238   0C6F FD A7         sand a, b
1239   0C71 E4            pop a
1240   0C72             ; --- END LOGICAL AND
1241   0C72 E7            pop d
1242   0C73 FD 43         mov [d], b
1243   0C75             ; pass = pass && *(p + indices[1]) == 'B'; 
1244   0C75 FA FF FF      lea d, [bp + -1] ; $pass
1245   0C78 DA            push d
1246   0C79 FA FF FF      lea d, [bp + -1] ; $pass
1247   0C7C 2A            mov b, [d]
1248   0C7D 38 00 00      mov c, 0
1249   0C80             ; --- START LOGICAL AND
1250   0C80 D7            push a
1251   0C81 11            mov a, b
1252   0C82 FA EE FF      lea d, [bp + -18] ; $p
1253   0C85 2A            mov b, [d]
1254   0C86 38 00 00      mov c, 0
1255   0C89             ; --- START TERMS
1256   0C89 D7            push a
1257   0C8A 11            mov a, b
1258   0C8B FA F0 FF      lea d, [bp + -16] ; $indices
1259   0C8E D7            push a
1260   0C8F DA            push d
1261   0C90 FD 2E 01 00   mov32 cb, $00000001
1261   0C94 00 00 
1262   0C96 E7            pop d
1263   0C97 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1264   0C9B E4            pop a
1265   0C9C 2A            mov b, [d]
1266   0C9D 38 00 00      mov c, 0
1267   0CA0 56            add b, a
1268   0CA1 E4            pop a
1269   0CA2             ; --- END TERMS
1270   0CA2 74            mov d, b
1271   0CA3 32            mov bl, [d]
1272   0CA4 A7 00         mov bh, 0
1273   0CA6 38 00 00      mov c, 0
1274   0CA9             ; --- START RELATIONAL
1275   0CA9 D7            push a
1276   0CAA 11            mov a, b
1277   0CAB FD 2E 42 00   mov32 cb, $00000042
1277   0CAF 00 00 
1278   0CB1 B0            cmp a, b
1279   0CB2 FD 71         seq ; ==
1280   0CB4 E4            pop a
1281   0CB5             ; --- END RELATIONAL
1282   0CB5 FD A7         sand a, b
1283   0CB7 E4            pop a
1284   0CB8             ; --- END LOGICAL AND
1285   0CB8 E7            pop d
1286   0CB9 FD 43         mov [d], b
1287   0CBB             ; pass = pass && *(p + indices[2]) == 'C'; 
1288   0CBB FA FF FF      lea d, [bp + -1] ; $pass
1289   0CBE DA            push d
1290   0CBF FA FF FF      lea d, [bp + -1] ; $pass
1291   0CC2 2A            mov b, [d]
1292   0CC3 38 00 00      mov c, 0
1293   0CC6             ; --- START LOGICAL AND
1294   0CC6 D7            push a
1295   0CC7 11            mov a, b
1296   0CC8 FA EE FF      lea d, [bp + -18] ; $p
1297   0CCB 2A            mov b, [d]
1298   0CCC 38 00 00      mov c, 0
1299   0CCF             ; --- START TERMS
1300   0CCF D7            push a
1301   0CD0 11            mov a, b
1302   0CD1 FA F0 FF      lea d, [bp + -16] ; $indices
1303   0CD4 D7            push a
1304   0CD5 DA            push d
1305   0CD6 FD 2E 02 00   mov32 cb, $00000002
1305   0CDA 00 00 
1306   0CDC E7            pop d
1307   0CDD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1308   0CE1 E4            pop a
1309   0CE2 2A            mov b, [d]
1310   0CE3 38 00 00      mov c, 0
1311   0CE6 56            add b, a
1312   0CE7 E4            pop a
1313   0CE8             ; --- END TERMS
1314   0CE8 74            mov d, b
1315   0CE9 32            mov bl, [d]
1316   0CEA A7 00         mov bh, 0
1317   0CEC 38 00 00      mov c, 0
1318   0CEF             ; --- START RELATIONAL
1319   0CEF D7            push a
1320   0CF0 11            mov a, b
1321   0CF1 FD 2E 43 00   mov32 cb, $00000043
1321   0CF5 00 00 
1322   0CF7 B0            cmp a, b
1323   0CF8 FD 71         seq ; ==
1324   0CFA E4            pop a
1325   0CFB             ; --- END RELATIONAL
1326   0CFB FD A7         sand a, b
1327   0CFD E4            pop a
1328   0CFE             ; --- END LOGICAL AND
1329   0CFE E7            pop d
1330   0CFF FD 43         mov [d], b
1331   0D01             ; pass = pass && *(p + indices[3]) == 'D'; 
1332   0D01 FA FF FF      lea d, [bp + -1] ; $pass
1333   0D04 DA            push d
1334   0D05 FA FF FF      lea d, [bp + -1] ; $pass
1335   0D08 2A            mov b, [d]
1336   0D09 38 00 00      mov c, 0
1337   0D0C             ; --- START LOGICAL AND
1338   0D0C D7            push a
1339   0D0D 11            mov a, b
1340   0D0E FA EE FF      lea d, [bp + -18] ; $p
1341   0D11 2A            mov b, [d]
1342   0D12 38 00 00      mov c, 0
1343   0D15             ; --- START TERMS
1344   0D15 D7            push a
1345   0D16 11            mov a, b
1346   0D17 FA F0 FF      lea d, [bp + -16] ; $indices
1347   0D1A D7            push a
1348   0D1B DA            push d
1349   0D1C FD 2E 03 00   mov32 cb, $00000003
1349   0D20 00 00 
1350   0D22 E7            pop d
1351   0D23 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1352   0D27 E4            pop a
1353   0D28 2A            mov b, [d]
1354   0D29 38 00 00      mov c, 0
1355   0D2C 56            add b, a
1356   0D2D E4            pop a
1357   0D2E             ; --- END TERMS
1358   0D2E 74            mov d, b
1359   0D2F 32            mov bl, [d]
1360   0D30 A7 00         mov bh, 0
1361   0D32 38 00 00      mov c, 0
1362   0D35             ; --- START RELATIONAL
1363   0D35 D7            push a
1364   0D36 11            mov a, b
1365   0D37 FD 2E 44 00   mov32 cb, $00000044
1365   0D3B 00 00 
1366   0D3D B0            cmp a, b
1367   0D3E FD 71         seq ; ==
1368   0D40 E4            pop a
1369   0D41             ; --- END RELATIONAL
1370   0D41 FD A7         sand a, b
1371   0D43 E4            pop a
1372   0D44             ; --- END LOGICAL AND
1373   0D44 E7            pop d
1374   0D45 FD 43         mov [d], b
1375   0D47             ; pass = pass && *(p + indices[4]) == 'E'; 
1376   0D47 FA FF FF      lea d, [bp + -1] ; $pass
1377   0D4A DA            push d
1378   0D4B FA FF FF      lea d, [bp + -1] ; $pass
1379   0D4E 2A            mov b, [d]
1380   0D4F 38 00 00      mov c, 0
1381   0D52             ; --- START LOGICAL AND
1382   0D52 D7            push a
1383   0D53 11            mov a, b
1384   0D54 FA EE FF      lea d, [bp + -18] ; $p
1385   0D57 2A            mov b, [d]
1386   0D58 38 00 00      mov c, 0
1387   0D5B             ; --- START TERMS
1388   0D5B D7            push a
1389   0D5C 11            mov a, b
1390   0D5D FA F0 FF      lea d, [bp + -16] ; $indices
1391   0D60 D7            push a
1392   0D61 DA            push d
1393   0D62 FD 2E 04 00   mov32 cb, $00000004
1393   0D66 00 00 
1394   0D68 E7            pop d
1395   0D69 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1396   0D6D E4            pop a
1397   0D6E 2A            mov b, [d]
1398   0D6F 38 00 00      mov c, 0
1399   0D72 56            add b, a
1400   0D73 E4            pop a
1401   0D74             ; --- END TERMS
1402   0D74 74            mov d, b
1403   0D75 32            mov bl, [d]
1404   0D76 A7 00         mov bh, 0
1405   0D78 38 00 00      mov c, 0
1406   0D7B             ; --- START RELATIONAL
1407   0D7B D7            push a
1408   0D7C 11            mov a, b
1409   0D7D FD 2E 45 00   mov32 cb, $00000045
1409   0D81 00 00 
1410   0D83 B0            cmp a, b
1411   0D84 FD 71         seq ; ==
1412   0D86 E4            pop a
1413   0D87             ; --- END RELATIONAL
1414   0D87 FD A7         sand a, b
1415   0D89 E4            pop a
1416   0D8A             ; --- END LOGICAL AND
1417   0D8A E7            pop d
1418   0D8B FD 43         mov [d], b
1419   0D8D             ; return pass; 
1420   0D8D FA FF FF      lea d, [bp + -1] ; $pass
1421   0D90 2A            mov b, [d]
1422   0D91 38 00 00      mov c, 0
1423   0D94 F9            leave
1424   0D95 09            ret
1425   0D96             
1426   0D96             test3:
1427   0D96 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1428   0D99             ; int pass = 1; 
1429   0D99 52 02 00      sub sp, 2
1430   0D9C             ; --- START LOCAL VAR INITIALIZATION
1431   0D9C FA FF FF      lea d, [bp + -1] ; $pass
1432   0D9F DA            push d
1433   0DA0 FD 2E 01 00   mov32 cb, $00000001
1433   0DA4 00 00 
1434   0DA6 E7            pop d
1435   0DA7 FD 43         mov [d], b
1436   0DA9             ; --- END LOCAL VAR INITIALIZATION
1437   0DA9             ; st.c = 'A'; 
1438   0DA9 FA 05 00      lea d, [bp + 5] ; $st
1439   0DAC 58 00 00      add d, 0
1440   0DAF DA            push d
1441   0DB0 FD 2E 41 00   mov32 cb, $00000041
1441   0DB4 00 00 
1442   0DB6 E7            pop d
1443   0DB7 FD 3E         mov [d], bl
1444   0DB9             ; st.i = 277; 
1445   0DB9 FA 05 00      lea d, [bp + 5] ; $st
1446   0DBC 58 01 00      add d, 1
1447   0DBF DA            push d
1448   0DC0 FD 2E 15 01   mov32 cb, $00000115
1448   0DC4 00 00 
1449   0DC6 E7            pop d
1450   0DC7 FD 43         mov [d], b
1451   0DC9             ; st.m[0] = 0; 
1452   0DC9 FA 05 00      lea d, [bp + 5] ; $st
1453   0DCC 58 03 00      add d, 3
1454   0DCF D7            push a
1455   0DD0 DA            push d
1456   0DD1 FD 2E 00 00   mov32 cb, $00000000
1456   0DD5 00 00 
1457   0DD7 E7            pop d
1458   0DD8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1459   0DDC E4            pop a
1460   0DDD DA            push d
1461   0DDE FD 2E 00 00   mov32 cb, $00000000
1461   0DE2 00 00 
1462   0DE4 E7            pop d
1463   0DE5 FD 43         mov [d], b
1464   0DE7             ; st.m[1] = 1; 
1465   0DE7 FA 05 00      lea d, [bp + 5] ; $st
1466   0DEA 58 03 00      add d, 3
1467   0DED D7            push a
1468   0DEE DA            push d
1469   0DEF FD 2E 01 00   mov32 cb, $00000001
1469   0DF3 00 00 
1470   0DF5 E7            pop d
1471   0DF6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1472   0DFA E4            pop a
1473   0DFB DA            push d
1474   0DFC FD 2E 01 00   mov32 cb, $00000001
1474   0E00 00 00 
1475   0E02 E7            pop d
1476   0E03 FD 43         mov [d], b
1477   0E05             ; st.m[2] = 2; 
1478   0E05 FA 05 00      lea d, [bp + 5] ; $st
1479   0E08 58 03 00      add d, 3
1480   0E0B D7            push a
1481   0E0C DA            push d
1482   0E0D FD 2E 02 00   mov32 cb, $00000002
1482   0E11 00 00 
1483   0E13 E7            pop d
1484   0E14 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1485   0E18 E4            pop a
1486   0E19 DA            push d
1487   0E1A FD 2E 02 00   mov32 cb, $00000002
1487   0E1E 00 00 
1488   0E20 E7            pop d
1489   0E21 FD 43         mov [d], b
1490   0E23             ; st.m[3] = 3; 
1491   0E23 FA 05 00      lea d, [bp + 5] ; $st
1492   0E26 58 03 00      add d, 3
1493   0E29 D7            push a
1494   0E2A DA            push d
1495   0E2B FD 2E 03 00   mov32 cb, $00000003
1495   0E2F 00 00 
1496   0E31 E7            pop d
1497   0E32 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1498   0E36 E4            pop a
1499   0E37 DA            push d
1500   0E38 FD 2E 03 00   mov32 cb, $00000003
1500   0E3C 00 00 
1501   0E3E E7            pop d
1502   0E3F FD 43         mov [d], b
1503   0E41             ; st.m[4] = 4; 
1504   0E41 FA 05 00      lea d, [bp + 5] ; $st
1505   0E44 58 03 00      add d, 3
1506   0E47 D7            push a
1507   0E48 DA            push d
1508   0E49 FD 2E 04 00   mov32 cb, $00000004
1508   0E4D 00 00 
1509   0E4F E7            pop d
1510   0E50 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1511   0E54 E4            pop a
1512   0E55 DA            push d
1513   0E56 FD 2E 04 00   mov32 cb, $00000004
1513   0E5A 00 00 
1514   0E5C E7            pop d
1515   0E5D FD 43         mov [d], b
1516   0E5F             ; pass = pass && st.c == 'A'; 
1517   0E5F FA FF FF      lea d, [bp + -1] ; $pass
1518   0E62 DA            push d
1519   0E63 FA FF FF      lea d, [bp + -1] ; $pass
1520   0E66 2A            mov b, [d]
1521   0E67 38 00 00      mov c, 0
1522   0E6A             ; --- START LOGICAL AND
1523   0E6A D7            push a
1524   0E6B 11            mov a, b
1525   0E6C FA 05 00      lea d, [bp + 5] ; $st
1526   0E6F 58 00 00      add d, 0
1527   0E72 32            mov bl, [d]
1528   0E73 A7 00         mov bh, 0
1529   0E75 38 00 00      mov c, 0
1530   0E78             ; --- START RELATIONAL
1531   0E78 D7            push a
1532   0E79 11            mov a, b
1533   0E7A FD 2E 41 00   mov32 cb, $00000041
1533   0E7E 00 00 
1534   0E80 B0            cmp a, b
1535   0E81 FD 71         seq ; ==
1536   0E83 E4            pop a
1537   0E84             ; --- END RELATIONAL
1538   0E84 FD A7         sand a, b
1539   0E86 E4            pop a
1540   0E87             ; --- END LOGICAL AND
1541   0E87 E7            pop d
1542   0E88 FD 43         mov [d], b
1543   0E8A             ; pass = pass && st.i == 277; 
1544   0E8A FA FF FF      lea d, [bp + -1] ; $pass
1545   0E8D DA            push d
1546   0E8E FA FF FF      lea d, [bp + -1] ; $pass
1547   0E91 2A            mov b, [d]
1548   0E92 38 00 00      mov c, 0
1549   0E95             ; --- START LOGICAL AND
1550   0E95 D7            push a
1551   0E96 11            mov a, b
1552   0E97 FA 05 00      lea d, [bp + 5] ; $st
1553   0E9A 58 01 00      add d, 1
1554   0E9D 2A            mov b, [d]
1555   0E9E 38 00 00      mov c, 0
1556   0EA1             ; --- START RELATIONAL
1557   0EA1 D7            push a
1558   0EA2 11            mov a, b
1559   0EA3 FD 2E 15 01   mov32 cb, $00000115
1559   0EA7 00 00 
1560   0EA9 B0            cmp a, b
1561   0EAA FD 71         seq ; ==
1562   0EAC E4            pop a
1563   0EAD             ; --- END RELATIONAL
1564   0EAD FD A7         sand a, b
1565   0EAF E4            pop a
1566   0EB0             ; --- END LOGICAL AND
1567   0EB0 E7            pop d
1568   0EB1 FD 43         mov [d], b
1569   0EB3             ; pass = pass && st.m[0] == 0; 
1570   0EB3 FA FF FF      lea d, [bp + -1] ; $pass
1571   0EB6 DA            push d
1572   0EB7 FA FF FF      lea d, [bp + -1] ; $pass
1573   0EBA 2A            mov b, [d]
1574   0EBB 38 00 00      mov c, 0
1575   0EBE             ; --- START LOGICAL AND
1576   0EBE D7            push a
1577   0EBF 11            mov a, b
1578   0EC0 FA 05 00      lea d, [bp + 5] ; $st
1579   0EC3 58 03 00      add d, 3
1580   0EC6 D7            push a
1581   0EC7 DA            push d
1582   0EC8 FD 2E 00 00   mov32 cb, $00000000
1582   0ECC 00 00 
1583   0ECE E7            pop d
1584   0ECF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1585   0ED3 E4            pop a
1586   0ED4 2A            mov b, [d]
1587   0ED5 38 00 00      mov c, 0
1588   0ED8             ; --- START RELATIONAL
1589   0ED8 D7            push a
1590   0ED9 11            mov a, b
1591   0EDA FD 2E 00 00   mov32 cb, $00000000
1591   0EDE 00 00 
1592   0EE0 B0            cmp a, b
1593   0EE1 FD 71         seq ; ==
1594   0EE3 E4            pop a
1595   0EE4             ; --- END RELATIONAL
1596   0EE4 FD A7         sand a, b
1597   0EE6 E4            pop a
1598   0EE7             ; --- END LOGICAL AND
1599   0EE7 E7            pop d
1600   0EE8 FD 43         mov [d], b
1601   0EEA             ; pass = pass && st.m[1] == 1; 
1602   0EEA FA FF FF      lea d, [bp + -1] ; $pass
1603   0EED DA            push d
1604   0EEE FA FF FF      lea d, [bp + -1] ; $pass
1605   0EF1 2A            mov b, [d]
1606   0EF2 38 00 00      mov c, 0
1607   0EF5             ; --- START LOGICAL AND
1608   0EF5 D7            push a
1609   0EF6 11            mov a, b
1610   0EF7 FA 05 00      lea d, [bp + 5] ; $st
1611   0EFA 58 03 00      add d, 3
1612   0EFD D7            push a
1613   0EFE DA            push d
1614   0EFF FD 2E 01 00   mov32 cb, $00000001
1614   0F03 00 00 
1615   0F05 E7            pop d
1616   0F06 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1617   0F0A E4            pop a
1618   0F0B 2A            mov b, [d]
1619   0F0C 38 00 00      mov c, 0
1620   0F0F             ; --- START RELATIONAL
1621   0F0F D7            push a
1622   0F10 11            mov a, b
1623   0F11 FD 2E 01 00   mov32 cb, $00000001
1623   0F15 00 00 
1624   0F17 B0            cmp a, b
1625   0F18 FD 71         seq ; ==
1626   0F1A E4            pop a
1627   0F1B             ; --- END RELATIONAL
1628   0F1B FD A7         sand a, b
1629   0F1D E4            pop a
1630   0F1E             ; --- END LOGICAL AND
1631   0F1E E7            pop d
1632   0F1F FD 43         mov [d], b
1633   0F21             ; pass = pass && st.m[2] == 2; 
1634   0F21 FA FF FF      lea d, [bp + -1] ; $pass
1635   0F24 DA            push d
1636   0F25 FA FF FF      lea d, [bp + -1] ; $pass
1637   0F28 2A            mov b, [d]
1638   0F29 38 00 00      mov c, 0
1639   0F2C             ; --- START LOGICAL AND
1640   0F2C D7            push a
1641   0F2D 11            mov a, b
1642   0F2E FA 05 00      lea d, [bp + 5] ; $st
1643   0F31 58 03 00      add d, 3
1644   0F34 D7            push a
1645   0F35 DA            push d
1646   0F36 FD 2E 02 00   mov32 cb, $00000002
1646   0F3A 00 00 
1647   0F3C E7            pop d
1648   0F3D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1649   0F41 E4            pop a
1650   0F42 2A            mov b, [d]
1651   0F43 38 00 00      mov c, 0
1652   0F46             ; --- START RELATIONAL
1653   0F46 D7            push a
1654   0F47 11            mov a, b
1655   0F48 FD 2E 02 00   mov32 cb, $00000002
1655   0F4C 00 00 
1656   0F4E B0            cmp a, b
1657   0F4F FD 71         seq ; ==
1658   0F51 E4            pop a
1659   0F52             ; --- END RELATIONAL
1660   0F52 FD A7         sand a, b
1661   0F54 E4            pop a
1662   0F55             ; --- END LOGICAL AND
1663   0F55 E7            pop d
1664   0F56 FD 43         mov [d], b
1665   0F58             ; pass = pass && st.m[3] == 3; 
1666   0F58 FA FF FF      lea d, [bp + -1] ; $pass
1667   0F5B DA            push d
1668   0F5C FA FF FF      lea d, [bp + -1] ; $pass
1669   0F5F 2A            mov b, [d]
1670   0F60 38 00 00      mov c, 0
1671   0F63             ; --- START LOGICAL AND
1672   0F63 D7            push a
1673   0F64 11            mov a, b
1674   0F65 FA 05 00      lea d, [bp + 5] ; $st
1675   0F68 58 03 00      add d, 3
1676   0F6B D7            push a
1677   0F6C DA            push d
1678   0F6D FD 2E 03 00   mov32 cb, $00000003
1678   0F71 00 00 
1679   0F73 E7            pop d
1680   0F74 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1681   0F78 E4            pop a
1682   0F79 2A            mov b, [d]
1683   0F7A 38 00 00      mov c, 0
1684   0F7D             ; --- START RELATIONAL
1685   0F7D D7            push a
1686   0F7E 11            mov a, b
1687   0F7F FD 2E 03 00   mov32 cb, $00000003
1687   0F83 00 00 
1688   0F85 B0            cmp a, b
1689   0F86 FD 71         seq ; ==
1690   0F88 E4            pop a
1691   0F89             ; --- END RELATIONAL
1692   0F89 FD A7         sand a, b
1693   0F8B E4            pop a
1694   0F8C             ; --- END LOGICAL AND
1695   0F8C E7            pop d
1696   0F8D FD 43         mov [d], b
1697   0F8F             ; pass = pass && st.m[4] == 4; 
1698   0F8F FA FF FF      lea d, [bp + -1] ; $pass
1699   0F92 DA            push d
1700   0F93 FA FF FF      lea d, [bp + -1] ; $pass
1701   0F96 2A            mov b, [d]
1702   0F97 38 00 00      mov c, 0
1703   0F9A             ; --- START LOGICAL AND
1704   0F9A D7            push a
1705   0F9B 11            mov a, b
1706   0F9C FA 05 00      lea d, [bp + 5] ; $st
1707   0F9F 58 03 00      add d, 3
1708   0FA2 D7            push a
1709   0FA3 DA            push d
1710   0FA4 FD 2E 04 00   mov32 cb, $00000004
1710   0FA8 00 00 
1711   0FAA E7            pop d
1712   0FAB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1713   0FAF E4            pop a
1714   0FB0 2A            mov b, [d]
1715   0FB1 38 00 00      mov c, 0
1716   0FB4             ; --- START RELATIONAL
1717   0FB4 D7            push a
1718   0FB5 11            mov a, b
1719   0FB6 FD 2E 04 00   mov32 cb, $00000004
1719   0FBA 00 00 
1720   0FBC B0            cmp a, b
1721   0FBD FD 71         seq ; ==
1722   0FBF E4            pop a
1723   0FC0             ; --- END RELATIONAL
1724   0FC0 FD A7         sand a, b
1725   0FC2 E4            pop a
1726   0FC3             ; --- END LOGICAL AND
1727   0FC3 E7            pop d
1728   0FC4 FD 43         mov [d], b
1729   0FC6             ; return pass; 
1730   0FC6 FA FF FF      lea d, [bp + -1] ; $pass
1731   0FC9 2A            mov b, [d]
1732   0FCA 38 00 00      mov c, 0
1733   0FCD F9            leave
1734   0FCE 09            ret
1735   0FCF             
1736   0FCF             printf:
1737   0FCF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1738   0FD2             ; char *p, *format_p; 
1739   0FD2 52 02 00      sub sp, 2
1740   0FD5 52 02 00      sub sp, 2
1741   0FD8             ; format_p = format; 
1742   0FD8 FA FD FF      lea d, [bp + -3] ; $format_p
1743   0FDB DA            push d
1744   0FDC FA 05 00      lea d, [bp + 5] ; $format
1745   0FDF 2A            mov b, [d]
1746   0FE0 38 00 00      mov c, 0
1747   0FE3 E7            pop d
1748   0FE4 FD 43         mov [d], b
1749   0FE6             ; p = &format + 2; 
1750   0FE6 FA FF FF      lea d, [bp + -1] ; $p
1751   0FE9 DA            push d
1752   0FEA FA 05 00      lea d, [bp + 5] ; $format
1753   0FED 2D            mov b, d
1754   0FEE             ; --- START TERMS
1755   0FEE D7            push a
1756   0FEF 11            mov a, b
1757   0FF0 FD 2E 02 00   mov32 cb, $00000002
1757   0FF4 00 00 
1758   0FF6 56            add b, a
1759   0FF7 E4            pop a
1760   0FF8             ; --- END TERMS
1761   0FF8 E7            pop d
1762   0FF9 FD 43         mov [d], b
1763   0FFB             ; for(;;){ 
1764   0FFB             _for3_init:
1765   0FFB             _for3_cond:
1766   0FFB             _for3_block:
1767   0FFB             ; if(!*format_p) break; 
1768   0FFB             _if4_cond:
1769   0FFB FA FD FF      lea d, [bp + -3] ; $format_p
1770   0FFE 2A            mov b, [d]
1771   0FFF 38 00 00      mov c, 0
1772   1002 74            mov d, b
1773   1003 32            mov bl, [d]
1774   1004 A7 00         mov bh, 0
1775   1006 38 00 00      mov c, 0
1776   1009 C0 00 00      cmp b, 0
1777   100C FD 71         seq ; !
1778   100E C0 00 00      cmp b, 0
1779   1011 C6 1A 10      je _if4_else
1780   1014             _if4_TRUE:
1781   1014             ; break; 
1782   1014 0A BF 12      jmp _for3_exit ; for break
1783   1017 0A AC 12      jmp _if4_exit
1784   101A             _if4_else:
1785   101A             ; if(*format_p == '%'){ 
1786   101A             _if5_cond:
1787   101A FA FD FF      lea d, [bp + -3] ; $format_p
1788   101D 2A            mov b, [d]
1789   101E 38 00 00      mov c, 0
1790   1021 74            mov d, b
1791   1022 32            mov bl, [d]
1792   1023 A7 00         mov bh, 0
1793   1025 38 00 00      mov c, 0
1794   1028             ; --- START RELATIONAL
1795   1028 D7            push a
1796   1029 11            mov a, b
1797   102A FD 2E 25 00   mov32 cb, $00000025
1797   102E 00 00 
1798   1030 B0            cmp a, b
1799   1031 FD 71         seq ; ==
1800   1033 E4            pop a
1801   1034             ; --- END RELATIONAL
1802   1034 C0 00 00      cmp b, 0
1803   1037 C6 97 12      je _if5_else
1804   103A             _if5_TRUE:
1805   103A             ; format_p++; 
1806   103A FA FD FF      lea d, [bp + -3] ; $format_p
1807   103D 2A            mov b, [d]
1808   103E 38 00 00      mov c, 0
1809   1041 FD 77         inc b
1810   1043 FA FD FF      lea d, [bp + -3] ; $format_p
1811   1046 FD 43         mov [d], b
1812   1048 FD 7D         dec b
1813   104A             ; switch(*format_p){ 
1814   104A             _switch6_expr:
1815   104A FA FD FF      lea d, [bp + -3] ; $format_p
1816   104D 2A            mov b, [d]
1817   104E 38 00 00      mov c, 0
1818   1051 74            mov d, b
1819   1052 32            mov bl, [d]
1820   1053 A7 00         mov bh, 0
1821   1055 38 00 00      mov c, 0
1822   1058             _switch6_comparisons:
1823   1058 C1 6C         cmp bl, $6c
1824   105A C6 8B 10      je _switch6_case0
1825   105D C1 4C         cmp bl, $4c
1826   105F C6 8B 10      je _switch6_case1
1827   1062 C1 64         cmp bl, $64
1828   1064 C6 9B 11      je _switch6_case2
1829   1067 C1 69         cmp bl, $69
1830   1069 C6 9B 11      je _switch6_case3
1831   106C C1 75         cmp bl, $75
1832   106E C6 CB 11      je _switch6_case4
1833   1071 C1 78         cmp bl, $78
1834   1073 C6 FB 11      je _switch6_case5
1835   1076 C1 70         cmp bl, $70
1836   1078 C6 FB 11      je _switch6_case6
1837   107B C1 63         cmp bl, $63
1838   107D C6 2B 12      je _switch6_case7
1839   1080 C1 73         cmp bl, $73
1840   1082 C6 5B 12      je _switch6_case8
1841   1085 0A 88 12      jmp _switch6_default
1842   1088 0A 94 12      jmp _switch6_exit
1843   108B             _switch6_case0:
1844   108B             _switch6_case1:
1845   108B             ; format_p++; 
1846   108B FA FD FF      lea d, [bp + -3] ; $format_p
1847   108E 2A            mov b, [d]
1848   108F 38 00 00      mov c, 0
1849   1092 FD 77         inc b
1850   1094 FA FD FF      lea d, [bp + -3] ; $format_p
1851   1097 FD 43         mov [d], b
1852   1099 FD 7D         dec b
1853   109B             ; if(*format_p == 'd' || *format_p == 'i') 
1854   109B             _if7_cond:
1855   109B FA FD FF      lea d, [bp + -3] ; $format_p
1856   109E 2A            mov b, [d]
1857   109F 38 00 00      mov c, 0
1858   10A2 74            mov d, b
1859   10A3 32            mov bl, [d]
1860   10A4 A7 00         mov bh, 0
1861   10A6 38 00 00      mov c, 0
1862   10A9             ; --- START RELATIONAL
1863   10A9 D7            push a
1864   10AA 11            mov a, b
1865   10AB FD 2E 64 00   mov32 cb, $00000064
1865   10AF 00 00 
1866   10B1 B0            cmp a, b
1867   10B2 FD 71         seq ; ==
1868   10B4 E4            pop a
1869   10B5             ; --- END RELATIONAL
1870   10B5             ; --- START LOGICAL OR
1871   10B5 D7            push a
1872   10B6 11            mov a, b
1873   10B7 FA FD FF      lea d, [bp + -3] ; $format_p
1874   10BA 2A            mov b, [d]
1875   10BB 38 00 00      mov c, 0
1876   10BE 74            mov d, b
1877   10BF 32            mov bl, [d]
1878   10C0 A7 00         mov bh, 0
1879   10C2 38 00 00      mov c, 0
1880   10C5             ; --- START RELATIONAL
1881   10C5 D7            push a
1882   10C6 11            mov a, b
1883   10C7 FD 2E 69 00   mov32 cb, $00000069
1883   10CB 00 00 
1884   10CD B0            cmp a, b
1885   10CE FD 71         seq ; ==
1886   10D0 E4            pop a
1887   10D1             ; --- END RELATIONAL
1888   10D1 FD A8         sor a, b ; ||
1889   10D3 E4            pop a
1890   10D4             ; --- END LOGICAL OR
1891   10D4 C0 00 00      cmp b, 0
1892   10D7 C6 F8 10      je _if7_else
1893   10DA             _if7_TRUE:
1894   10DA             ; print_signed_long(*(long int*)p); 
1895   10DA             ; --- START FUNCTION CALL
1896   10DA FA FF FF      lea d, [bp + -1] ; $p
1897   10DD 2A            mov b, [d]
1898   10DE 38 00 00      mov c, 0
1899   10E1 74            mov d, b
1900   10E2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1901   10E5 FD 39         mov c, b ; And place it into C
1902   10E7 2A            mov b, [d] ; Lower Word in B
1903   10E8 12            mov a, c
1904   10E9 FD AA         swp a
1905   10EB D7            push a
1906   10EC FD AB         swp b
1907   10EE D8            push b
1908   10EF 07 C1 12      call print_signed_long
1909   10F2 51 04 00      add sp, 4
1910   10F5             ; --- END FUNCTION CALL
1911   10F5 0A 80 11      jmp _if7_exit
1912   10F8             _if7_else:
1913   10F8             ; if(*format_p == 'u') 
1914   10F8             _if8_cond:
1915   10F8 FA FD FF      lea d, [bp + -3] ; $format_p
1916   10FB 2A            mov b, [d]
1917   10FC 38 00 00      mov c, 0
1918   10FF 74            mov d, b
1919   1100 32            mov bl, [d]
1920   1101 A7 00         mov bh, 0
1921   1103 38 00 00      mov c, 0
1922   1106             ; --- START RELATIONAL
1923   1106 D7            push a
1924   1107 11            mov a, b
1925   1108 FD 2E 75 00   mov32 cb, $00000075
1925   110C 00 00 
1926   110E B0            cmp a, b
1927   110F FD 71         seq ; ==
1928   1111 E4            pop a
1929   1112             ; --- END RELATIONAL
1930   1112 C0 00 00      cmp b, 0
1931   1115 C6 36 11      je _if8_else
1932   1118             _if8_TRUE:
1933   1118             ; print_unsigned_long(*(unsigned long int*)p); 
1934   1118             ; --- START FUNCTION CALL
1935   1118 FA FF FF      lea d, [bp + -1] ; $p
1936   111B 2A            mov b, [d]
1937   111C 38 00 00      mov c, 0
1938   111F 74            mov d, b
1939   1120 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1940   1123 FD 39         mov c, b ; And place it into C
1941   1125 2A            mov b, [d] ; Lower Word in B
1942   1126 12            mov a, c
1943   1127 FD AA         swp a
1944   1129 D7            push a
1945   112A FD AB         swp b
1946   112C D8            push b
1947   112D 07 98 14      call print_unsigned_long
1948   1130 51 04 00      add sp, 4
1949   1133             ; --- END FUNCTION CALL
1950   1133 0A 80 11      jmp _if8_exit
1951   1136             _if8_else:
1952   1136             ; if(*format_p == 'x') 
1953   1136             _if9_cond:
1954   1136 FA FD FF      lea d, [bp + -3] ; $format_p
1955   1139 2A            mov b, [d]
1956   113A 38 00 00      mov c, 0
1957   113D 74            mov d, b
1958   113E 32            mov bl, [d]
1959   113F A7 00         mov bh, 0
1960   1141 38 00 00      mov c, 0
1961   1144             ; --- START RELATIONAL
1962   1144 D7            push a
1963   1145 11            mov a, b
1964   1146 FD 2E 78 00   mov32 cb, $00000078
1964   114A 00 00 
1965   114C B0            cmp a, b
1966   114D FD 71         seq ; ==
1967   114F E4            pop a
1968   1150             ; --- END RELATIONAL
1969   1150 C0 00 00      cmp b, 0
1970   1153 C6 74 11      je _if9_else
1971   1156             _if9_TRUE:
1972   1156             ; printx32(*(long int *)p); 
1973   1156             ; --- START FUNCTION CALL
1974   1156 FA FF FF      lea d, [bp + -1] ; $p
1975   1159 2A            mov b, [d]
1976   115A 38 00 00      mov c, 0
1977   115D 74            mov d, b
1978   115E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1979   1161 FD 39         mov c, b ; And place it into C
1980   1163 2A            mov b, [d] ; Lower Word in B
1981   1164 12            mov a, c
1982   1165 FD AA         swp a
1983   1167 D7            push a
1984   1168 FD AB         swp b
1985   116A D8            push b
1986   116B 07 C3 15      call printx32
1987   116E 51 04 00      add sp, 4
1988   1171             ; --- END FUNCTION CALL
1989   1171 0A 80 11      jmp _if9_exit
1990   1174             _if9_else:
1991   1174             ; err("Unexpected format in printf."); 
1992   1174             ; --- START FUNCTION CALL
1993   1174 26 2D 19      mov b, _s1 ; "Unexpected format in printf."
1994   1177 FD AB         swp b
1995   1179 D8            push b
1996   117A 07 23 16      call err
1997   117D 51 02 00      add sp, 2
1998   1180             ; --- END FUNCTION CALL
1999   1180             _if9_exit:
2000   1180             _if8_exit:
2001   1180             _if7_exit:
2002   1180             ; p = p + 4; 
2003   1180 FA FF FF      lea d, [bp + -1] ; $p
2004   1183 DA            push d
2005   1184 FA FF FF      lea d, [bp + -1] ; $p
2006   1187 2A            mov b, [d]
2007   1188 38 00 00      mov c, 0
2008   118B             ; --- START TERMS
2009   118B D7            push a
2010   118C 11            mov a, b
2011   118D FD 2E 04 00   mov32 cb, $00000004
2011   1191 00 00 
2012   1193 56            add b, a
2013   1194 E4            pop a
2014   1195             ; --- END TERMS
2015   1195 E7            pop d
2016   1196 FD 43         mov [d], b
2017   1198             ; break; 
2018   1198 0A 94 12      jmp _switch6_exit ; case break
2019   119B             _switch6_case2:
2020   119B             _switch6_case3:
2021   119B             ; print_signed(*(int*)p); 
2022   119B             ; --- START FUNCTION CALL
2023   119B FA FF FF      lea d, [bp + -1] ; $p
2024   119E 2A            mov b, [d]
2025   119F 38 00 00      mov c, 0
2026   11A2 74            mov d, b
2027   11A3 2A            mov b, [d]
2028   11A4 38 00 00      mov c, 0
2029   11A7 FD AB         swp b
2030   11A9 D8            push b
2031   11AA 07 51 16      call print_signed
2032   11AD 51 02 00      add sp, 2
2033   11B0             ; --- END FUNCTION CALL
2034   11B0             ; p = p + 2; 
2035   11B0 FA FF FF      lea d, [bp + -1] ; $p
2036   11B3 DA            push d
2037   11B4 FA FF FF      lea d, [bp + -1] ; $p
2038   11B7 2A            mov b, [d]
2039   11B8 38 00 00      mov c, 0
2040   11BB             ; --- START TERMS
2041   11BB D7            push a
2042   11BC 11            mov a, b
2043   11BD FD 2E 02 00   mov32 cb, $00000002
2043   11C1 00 00 
2044   11C3 56            add b, a
2045   11C4 E4            pop a
2046   11C5             ; --- END TERMS
2047   11C5 E7            pop d
2048   11C6 FD 43         mov [d], b
2049   11C8             ; break; 
2050   11C8 0A 94 12      jmp _switch6_exit ; case break
2051   11CB             _switch6_case4:
2052   11CB             ; print_unsigned(*(unsigned int*)p); 
2053   11CB             ; --- START FUNCTION CALL
2054   11CB FA FF FF      lea d, [bp + -1] ; $p
2055   11CE 2A            mov b, [d]
2056   11CF 38 00 00      mov c, 0
2057   11D2 74            mov d, b
2058   11D3 2A            mov b, [d]
2059   11D4 38 00 00      mov c, 0
2060   11D7 FD AB         swp b
2061   11D9 D8            push b
2062   11DA 07 B4 17      call print_unsigned
2063   11DD 51 02 00      add sp, 2
2064   11E0             ; --- END FUNCTION CALL
2065   11E0             ; p = p + 2; 
2066   11E0 FA FF FF      lea d, [bp + -1] ; $p
2067   11E3 DA            push d
2068   11E4 FA FF FF      lea d, [bp + -1] ; $p
2069   11E7 2A            mov b, [d]
2070   11E8 38 00 00      mov c, 0
2071   11EB             ; --- START TERMS
2072   11EB D7            push a
2073   11EC 11            mov a, b
2074   11ED FD 2E 02 00   mov32 cb, $00000002
2074   11F1 00 00 
2075   11F3 56            add b, a
2076   11F4 E4            pop a
2077   11F5             ; --- END TERMS
2078   11F5 E7            pop d
2079   11F6 FD 43         mov [d], b
2080   11F8             ; break; 
2081   11F8 0A 94 12      jmp _switch6_exit ; case break
2082   11FB             _switch6_case5:
2083   11FB             _switch6_case6:
2084   11FB             ; printx16(*(int*)p); 
2085   11FB             ; --- START FUNCTION CALL
2086   11FB FA FF FF      lea d, [bp + -1] ; $p
2087   11FE 2A            mov b, [d]
2088   11FF 38 00 00      mov c, 0
2089   1202 74            mov d, b
2090   1203 2A            mov b, [d]
2091   1204 38 00 00      mov c, 0
2092   1207 FD AB         swp b
2093   1209 D8            push b
2094   120A 07 B9 18      call printx16
2095   120D 51 02 00      add sp, 2
2096   1210             ; --- END FUNCTION CALL
2097   1210             ; p = p + 2; 
2098   1210 FA FF FF      lea d, [bp + -1] ; $p
2099   1213 DA            push d
2100   1214 FA FF FF      lea d, [bp + -1] ; $p
2101   1217 2A            mov b, [d]
2102   1218 38 00 00      mov c, 0
2103   121B             ; --- START TERMS
2104   121B D7            push a
2105   121C 11            mov a, b
2106   121D FD 2E 02 00   mov32 cb, $00000002
2106   1221 00 00 
2107   1223 56            add b, a
2108   1224 E4            pop a
2109   1225             ; --- END TERMS
2110   1225 E7            pop d
2111   1226 FD 43         mov [d], b
2112   1228             ; break; 
2113   1228 0A 94 12      jmp _switch6_exit ; case break
2114   122B             _switch6_case7:
2115   122B             ; putchar(*(char*)p); 
2116   122B             ; --- START FUNCTION CALL
2117   122B FA FF FF      lea d, [bp + -1] ; $p
2118   122E 2A            mov b, [d]
2119   122F 38 00 00      mov c, 0
2120   1232 74            mov d, b
2121   1233 32            mov bl, [d]
2122   1234 A7 00         mov bh, 0
2123   1236 38 00 00      mov c, 0
2124   1239 DD            push bl
2125   123A 07 8A 14      call putchar
2126   123D 51 01 00      add sp, 1
2127   1240             ; --- END FUNCTION CALL
2128   1240             ; p = p + 2; 
2129   1240 FA FF FF      lea d, [bp + -1] ; $p
2130   1243 DA            push d
2131   1244 FA FF FF      lea d, [bp + -1] ; $p
2132   1247 2A            mov b, [d]
2133   1248 38 00 00      mov c, 0
2134   124B             ; --- START TERMS
2135   124B D7            push a
2136   124C 11            mov a, b
2137   124D FD 2E 02 00   mov32 cb, $00000002
2137   1251 00 00 
2138   1253 56            add b, a
2139   1254 E4            pop a
2140   1255             ; --- END TERMS
2141   1255 E7            pop d
2142   1256 FD 43         mov [d], b
2143   1258             ; break; 
2144   1258 0A 94 12      jmp _switch6_exit ; case break
2145   125B             _switch6_case8:
2146   125B             ; print(*(char**)p); 
2147   125B             ; --- START FUNCTION CALL
2148   125B FA FF FF      lea d, [bp + -1] ; $p
2149   125E 2A            mov b, [d]
2150   125F 38 00 00      mov c, 0
2151   1262 74            mov d, b
2152   1263 2A            mov b, [d]
2153   1264 FD AB         swp b
2154   1266 D8            push b
2155   1267 07 38 16      call print
2156   126A 51 02 00      add sp, 2
2157   126D             ; --- END FUNCTION CALL
2158   126D             ; p = p + 2; 
2159   126D FA FF FF      lea d, [bp + -1] ; $p
2160   1270 DA            push d
2161   1271 FA FF FF      lea d, [bp + -1] ; $p
2162   1274 2A            mov b, [d]
2163   1275 38 00 00      mov c, 0
2164   1278             ; --- START TERMS
2165   1278 D7            push a
2166   1279 11            mov a, b
2167   127A FD 2E 02 00   mov32 cb, $00000002
2167   127E 00 00 
2168   1280 56            add b, a
2169   1281 E4            pop a
2170   1282             ; --- END TERMS
2171   1282 E7            pop d
2172   1283 FD 43         mov [d], b
2173   1285             ; break; 
2174   1285 0A 94 12      jmp _switch6_exit ; case break
2175   1288             _switch6_default:
2176   1288             ; print("Error: Unknown argument type.\n"); 
2177   1288             ; --- START FUNCTION CALL
2178   1288 26 4A 19      mov b, _s2 ; "Error: Unknown argument type.\n"
2179   128B FD AB         swp b
2180   128D D8            push b
2181   128E 07 38 16      call print
2182   1291 51 02 00      add sp, 2
2183   1294             ; --- END FUNCTION CALL
2184   1294             _switch6_exit:
2185   1294 0A AC 12      jmp _if5_exit
2186   1297             _if5_else:
2187   1297             ; putchar(*format_p); 
2188   1297             ; --- START FUNCTION CALL
2189   1297 FA FD FF      lea d, [bp + -3] ; $format_p
2190   129A 2A            mov b, [d]
2191   129B 38 00 00      mov c, 0
2192   129E 74            mov d, b
2193   129F 32            mov bl, [d]
2194   12A0 A7 00         mov bh, 0
2195   12A2 38 00 00      mov c, 0
2196   12A5 DD            push bl
2197   12A6 07 8A 14      call putchar
2198   12A9 51 01 00      add sp, 1
2199   12AC             ; --- END FUNCTION CALL
2200   12AC             _if5_exit:
2201   12AC             _if4_exit:
2202   12AC             ; format_p++; 
2203   12AC FA FD FF      lea d, [bp + -3] ; $format_p
2204   12AF 2A            mov b, [d]
2205   12B0 38 00 00      mov c, 0
2206   12B3 FD 77         inc b
2207   12B5 FA FD FF      lea d, [bp + -3] ; $format_p
2208   12B8 FD 43         mov [d], b
2209   12BA FD 7D         dec b
2210   12BC             _for3_update:
2211   12BC 0A FB 0F      jmp _for3_cond
2212   12BF             _for3_exit:
2213   12BF F9            leave
2214   12C0 09            ret
2215   12C1             
2216   12C1             print_signed_long:
2217   12C1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2218   12C4             ; char digits[10];  // fits 2,147,483,647 
2219   12C4 52 0A 00      sub sp, 10
2220   12C7             ; int i = 0; 
2221   12C7 52 02 00      sub sp, 2
2222   12CA             ; --- START LOCAL VAR INITIALIZATION
2223   12CA FA F5 FF      lea d, [bp + -11] ; $i
2224   12CD DA            push d
2225   12CE FD 2E 00 00   mov32 cb, $00000000
2225   12D2 00 00 
2226   12D4 E7            pop d
2227   12D5 FD 43         mov [d], b
2228   12D7             ; --- END LOCAL VAR INITIALIZATION
2229   12D7             ; unsigned long int absval; 
2230   12D7 52 04 00      sub sp, 4
2231   12DA             ; if (num < 0) { 
2232   12DA             _if10_cond:
2233   12DA FA 05 00      lea d, [bp + 5] ; $num
2234   12DD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2235   12E0 FD 39         mov c, b ; And place it into C
2236   12E2 2A            mov b, [d] ; Lower Word in B
2237   12E3             ; --- START RELATIONAL
2238   12E3 D7            push a
2239   12E4 FD D8         push g
2240   12E6 11            mov a, b
2241   12E7 FD 7A         mov g, c
2242   12E9 FD 2E 00 00   mov32 cb, $00000000
2242   12ED 00 00 
2243   12EF 38 00 00      mov c, 0
2244   12F2 FD AF         cmp32 ga, cb
2245   12F4 FD 73         slt ; <
2246   12F6 FD F1         pop g
2247   12F8 E4            pop a
2248   12F9             ; --- END RELATIONAL
2249   12F9 C0 00 00      cmp b, 0
2250   12FC C6 5B 13      je _if10_else
2251   12FF             _if10_TRUE:
2252   12FF             ; putchar('-'); 
2253   12FF             ; --- START FUNCTION CALL
2254   12FF FD 2E 2D 00   mov32 cb, $0000002d
2254   1303 00 00 
2255   1305 DD            push bl
2256   1306 07 8A 14      call putchar
2257   1309 51 01 00      add sp, 1
2258   130C             ; --- END FUNCTION CALL
2259   130C             ; absval = (unsigned long int)(-(num + 1)) + 1; 
2260   130C FA F1 FF      lea d, [bp + -15] ; $absval
2261   130F DA            push d
2262   1310 FA 05 00      lea d, [bp + 5] ; $num
2263   1313 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2264   1316 FD 39         mov c, b ; And place it into C
2265   1318 2A            mov b, [d] ; Lower Word in B
2266   1319             ; --- START TERMS
2267   1319 D7            push a
2268   131A FD D8         push g
2269   131C 11            mov a, b
2270   131D FD 7A         mov g, c
2271   131F FD 2E 01 00   mov32 cb, $00000001
2271   1323 00 00 
2272   1325 38 00 00      mov c, 0
2273   1328 FD 15         add32 cb, ga
2274   132A FD F1         pop g
2275   132C E4            pop a
2276   132D             ; --- END TERMS
2277   132D 12            mov a, c
2278   132E 95            not a
2279   132F 97            not b
2280   1330 55 01 00      add b, 1
2281   1333 5B 00 00      adc a, 0
2282   1336 39            mov c, a
2283   1337 A7 00         mov bh, 0
2284   1339 38 00 00      mov c, 0
2285   133C             ; --- START TERMS
2286   133C D7            push a
2287   133D FD D8         push g
2288   133F 11            mov a, b
2289   1340 FD 7A         mov g, c
2290   1342 FD 2E 01 00   mov32 cb, $00000001
2290   1346 00 00 
2291   1348 38 00 00      mov c, 0
2292   134B FD 15         add32 cb, ga
2293   134D FD F1         pop g
2294   134F E4            pop a
2295   1350             ; --- END TERMS
2296   1350 E7            pop d
2297   1351 FD 43         mov [d], b
2298   1353 28            mov b, c
2299   1354 FD 44 02 00   mov [d + 2], b
2300   1358 0A 75 13      jmp _if10_exit
2301   135B             _if10_else:
2302   135B             ; absval = (unsigned long int)num; 
2303   135B FA F1 FF      lea d, [bp + -15] ; $absval
2304   135E DA            push d
2305   135F FA 05 00      lea d, [bp + 5] ; $num
2306   1362 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2307   1365 FD 39         mov c, b ; And place it into C
2308   1367 2A            mov b, [d] ; Lower Word in B
2309   1368 A7 00         mov bh, 0
2310   136A 38 00 00      mov c, 0
2311   136D E7            pop d
2312   136E FD 43         mov [d], b
2313   1370 28            mov b, c
2314   1371 FD 44 02 00   mov [d + 2], b
2315   1375             _if10_exit:
2316   1375             ; if (absval == 0) { 
2317   1375             _if11_cond:
2318   1375 FA F1 FF      lea d, [bp + -15] ; $absval
2319   1378 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2320   137B FD 39         mov c, b ; And place it into C
2321   137D 2A            mov b, [d] ; Lower Word in B
2322   137E             ; --- START RELATIONAL
2323   137E D7            push a
2324   137F FD D8         push g
2325   1381 11            mov a, b
2326   1382 FD 7A         mov g, c
2327   1384 FD 2E 00 00   mov32 cb, $00000000
2327   1388 00 00 
2328   138A 38 00 00      mov c, 0
2329   138D FD AF         cmp32 ga, cb
2330   138F FD 71         seq ; ==
2331   1391 FD F1         pop g
2332   1393 E4            pop a
2333   1394             ; --- END RELATIONAL
2334   1394 C0 00 00      cmp b, 0
2335   1397 C6 AC 13      je _if11_exit
2336   139A             _if11_TRUE:
2337   139A             ; putchar('0'); 
2338   139A             ; --- START FUNCTION CALL
2339   139A FD 2E 30 00   mov32 cb, $00000030
2339   139E 00 00 
2340   13A0 DD            push bl
2341   13A1 07 8A 14      call putchar
2342   13A4 51 01 00      add sp, 1
2343   13A7             ; --- END FUNCTION CALL
2344   13A7             ; return; 
2345   13A7 F9            leave
2346   13A8 09            ret
2347   13A9 0A AC 13      jmp _if11_exit
2348   13AC             _if11_exit:
2349   13AC             ; while (absval > 0) { 
2350   13AC             _while12_cond:
2351   13AC FA F1 FF      lea d, [bp + -15] ; $absval
2352   13AF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2353   13B2 FD 39         mov c, b ; And place it into C
2354   13B4 2A            mov b, [d] ; Lower Word in B
2355   13B5             ; --- START RELATIONAL
2356   13B5 D7            push a
2357   13B6 FD D8         push g
2358   13B8 11            mov a, b
2359   13B9 FD 7A         mov g, c
2360   13BB FD 2E 00 00   mov32 cb, $00000000
2360   13BF 00 00 
2361   13C1 38 00 00      mov c, 0
2362   13C4 FD AF         cmp32 ga, cb
2363   13C6 FD 81         sgu
2364   13C8 FD F1         pop g
2365   13CA E4            pop a
2366   13CB             ; --- END RELATIONAL
2367   13CB C0 00 00      cmp b, 0
2368   13CE C6 4C 14      je _while12_exit
2369   13D1             _while12_block:
2370   13D1             ; digits[i++] = '0' + (absval % 10); 
2371   13D1 FA F7 FF      lea d, [bp + -9] ; $digits
2372   13D4 D7            push a
2373   13D5 DA            push d
2374   13D6 FA F5 FF      lea d, [bp + -11] ; $i
2375   13D9 2A            mov b, [d]
2376   13DA 38 00 00      mov c, 0
2377   13DD 11            mov a, b
2378   13DE FD 77         inc b
2379   13E0 FA F5 FF      lea d, [bp + -11] ; $i
2380   13E3 FD 43         mov [d], b
2381   13E5 27            mov b, a
2382   13E6 E7            pop d
2383   13E7 5A            add d, b
2384   13E8 E4            pop a
2385   13E9 DA            push d
2386   13EA FD 2E 30 00   mov32 cb, $00000030
2386   13EE 00 00 
2387   13F0             ; --- START TERMS
2388   13F0 D7            push a
2389   13F1 11            mov a, b
2390   13F2 FA F1 FF      lea d, [bp + -15] ; $absval
2391   13F5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2392   13F8 FD 39         mov c, b ; And place it into C
2393   13FA 2A            mov b, [d] ; Lower Word in B
2394   13FB             ; --- START FACTORS
2395   13FB D7            push a
2396   13FC FD D8         push g
2397   13FE 11            mov a, b
2398   13FF FD 7A         mov g, c
2399   1401 FD 2E 0A 00   mov32 cb, $0000000a
2399   1405 00 00 
2400   1407 FD D8         push g ; save 'g' as the div instruction uses it
2401   1409 AE            div a, b ; %, a: quotient, b: remainder
2402   140A 11            mov a, b
2403   140B FD F1         pop g
2404   140D FD 38         mov c, g
2405   140F 27            mov b, a
2406   1410 FD F1         pop g
2407   1412 E4            pop a
2408   1413             ; --- END FACTORS
2409   1413 FD 22 00 00   mov g, 0
2410   1417 FD 15         add32 cb, ga
2411   1419 E4            pop a
2412   141A             ; --- END TERMS
2413   141A E7            pop d
2414   141B FD 3E         mov [d], bl
2415   141D             ; absval = absval / 10; 
2416   141D FA F1 FF      lea d, [bp + -15] ; $absval
2417   1420 DA            push d
2418   1421 FA F1 FF      lea d, [bp + -15] ; $absval
2419   1424 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2420   1427 FD 39         mov c, b ; And place it into C
2421   1429 2A            mov b, [d] ; Lower Word in B
2422   142A             ; --- START FACTORS
2423   142A D7            push a
2424   142B FD D8         push g
2425   142D 11            mov a, b
2426   142E FD 7A         mov g, c
2427   1430 FD 2E 0A 00   mov32 cb, $0000000a
2427   1434 00 00 
2428   1436 FD D8         push g ; save 'g' as the div instruction uses it
2429   1438 AE            div a, b ; /, a: quotient, b: remainder
2430   1439 FD F1         pop g
2431   143B FD 38         mov c, g
2432   143D 27            mov b, a
2433   143E FD F1         pop g
2434   1440 E4            pop a
2435   1441             ; --- END FACTORS
2436   1441 E7            pop d
2437   1442 FD 43         mov [d], b
2438   1444 28            mov b, c
2439   1445 FD 44 02 00   mov [d + 2], b
2440   1449 0A AC 13      jmp _while12_cond
2441   144C             _while12_exit:
2442   144C             ; while (i > 0) { 
2443   144C             _while19_cond:
2444   144C FA F5 FF      lea d, [bp + -11] ; $i
2445   144F 2A            mov b, [d]
2446   1450 38 00 00      mov c, 0
2447   1453             ; --- START RELATIONAL
2448   1453 D7            push a
2449   1454 11            mov a, b
2450   1455 FD 2E 00 00   mov32 cb, $00000000
2450   1459 00 00 
2451   145B B0            cmp a, b
2452   145C FD 7F         sgt ; >
2453   145E E4            pop a
2454   145F             ; --- END RELATIONAL
2455   145F C0 00 00      cmp b, 0
2456   1462 C6 88 14      je _while19_exit
2457   1465             _while19_block:
2458   1465             ; putchar(digits[--i]); 
2459   1465             ; --- START FUNCTION CALL
2460   1465 FA F7 FF      lea d, [bp + -9] ; $digits
2461   1468 D7            push a
2462   1469 DA            push d
2463   146A FA F5 FF      lea d, [bp + -11] ; $i
2464   146D 2A            mov b, [d]
2465   146E FD 7D         dec b
2466   1470 FA F5 FF      lea d, [bp + -11] ; $i
2467   1473 FD 43         mov [d], b
2468   1475 E7            pop d
2469   1476 5A            add d, b
2470   1477 E4            pop a
2471   1478 32            mov bl, [d]
2472   1479 A7 00         mov bh, 0
2473   147B 38 00 00      mov c, 0
2474   147E DD            push bl
2475   147F 07 8A 14      call putchar
2476   1482 51 01 00      add sp, 1
2477   1485             ; --- END FUNCTION CALL
2478   1485 0A 4C 14      jmp _while19_cond
2479   1488             _while19_exit:
2480   1488 F9            leave
2481   1489 09            ret
2482   148A             
2483   148A             putchar:
2484   148A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2485   148D             ; --- BEGIN INLINE ASM SEGMENT
2486   148D FA 05 00      lea d, [bp + 5] ; $c
2487   1490 1E            mov al, [d]
2488   1491 23            mov ah, al
2489   1492 19 00         mov al, 0
2490   1494 05 03         syscall sys_io      ; char in AH
2491   1496             ; --- END INLINE ASM SEGMENT
2492   1496 F9            leave
2493   1497 09            ret
2494   1498             
2495   1498             print_unsigned_long:
2496   1498 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2497   149B             ; char digits[10]; 
2498   149B 52 0A 00      sub sp, 10
2499   149E             ; int i = 0; 
2500   149E 52 02 00      sub sp, 2
2501   14A1             ; --- START LOCAL VAR INITIALIZATION
2502   14A1 FA F5 FF      lea d, [bp + -11] ; $i
2503   14A4 DA            push d
2504   14A5 FD 2E 00 00   mov32 cb, $00000000
2504   14A9 00 00 
2505   14AB E7            pop d
2506   14AC FD 43         mov [d], b
2507   14AE             ; --- END LOCAL VAR INITIALIZATION
2508   14AE             ; if(num == 0){ 
2509   14AE             _if20_cond:
2510   14AE FA 05 00      lea d, [bp + 5] ; $num
2511   14B1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2512   14B4 FD 39         mov c, b ; And place it into C
2513   14B6 2A            mov b, [d] ; Lower Word in B
2514   14B7             ; --- START RELATIONAL
2515   14B7 D7            push a
2516   14B8 FD D8         push g
2517   14BA 11            mov a, b
2518   14BB FD 7A         mov g, c
2519   14BD FD 2E 00 00   mov32 cb, $00000000
2519   14C1 00 00 
2520   14C3 38 00 00      mov c, 0
2521   14C6 FD AF         cmp32 ga, cb
2522   14C8 FD 71         seq ; ==
2523   14CA FD F1         pop g
2524   14CC E4            pop a
2525   14CD             ; --- END RELATIONAL
2526   14CD C0 00 00      cmp b, 0
2527   14D0 C6 E5 14      je _if20_exit
2528   14D3             _if20_TRUE:
2529   14D3             ; putchar('0'); 
2530   14D3             ; --- START FUNCTION CALL
2531   14D3 FD 2E 30 00   mov32 cb, $00000030
2531   14D7 00 00 
2532   14D9 DD            push bl
2533   14DA 07 8A 14      call putchar
2534   14DD 51 01 00      add sp, 1
2535   14E0             ; --- END FUNCTION CALL
2536   14E0             ; return; 
2537   14E0 F9            leave
2538   14E1 09            ret
2539   14E2 0A E5 14      jmp _if20_exit
2540   14E5             _if20_exit:
2541   14E5             ; while (num > 0) { 
2542   14E5             _while21_cond:
2543   14E5 FA 05 00      lea d, [bp + 5] ; $num
2544   14E8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2545   14EB FD 39         mov c, b ; And place it into C
2546   14ED 2A            mov b, [d] ; Lower Word in B
2547   14EE             ; --- START RELATIONAL
2548   14EE D7            push a
2549   14EF FD D8         push g
2550   14F1 11            mov a, b
2551   14F2 FD 7A         mov g, c
2552   14F4 FD 2E 00 00   mov32 cb, $00000000
2552   14F8 00 00 
2553   14FA 38 00 00      mov c, 0
2554   14FD FD AF         cmp32 ga, cb
2555   14FF FD 81         sgu
2556   1501 FD F1         pop g
2557   1503 E4            pop a
2558   1504             ; --- END RELATIONAL
2559   1504 C0 00 00      cmp b, 0
2560   1507 C6 85 15      je _while21_exit
2561   150A             _while21_block:
2562   150A             ; digits[i++] = '0' + (num % 10); 
2563   150A FA F7 FF      lea d, [bp + -9] ; $digits
2564   150D D7            push a
2565   150E DA            push d
2566   150F FA F5 FF      lea d, [bp + -11] ; $i
2567   1512 2A            mov b, [d]
2568   1513 38 00 00      mov c, 0
2569   1516 11            mov a, b
2570   1517 FD 77         inc b
2571   1519 FA F5 FF      lea d, [bp + -11] ; $i
2572   151C FD 43         mov [d], b
2573   151E 27            mov b, a
2574   151F E7            pop d
2575   1520 5A            add d, b
2576   1521 E4            pop a
2577   1522 DA            push d
2578   1523 FD 2E 30 00   mov32 cb, $00000030
2578   1527 00 00 
2579   1529             ; --- START TERMS
2580   1529 D7            push a
2581   152A 11            mov a, b
2582   152B FA 05 00      lea d, [bp + 5] ; $num
2583   152E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2584   1531 FD 39         mov c, b ; And place it into C
2585   1533 2A            mov b, [d] ; Lower Word in B
2586   1534             ; --- START FACTORS
2587   1534 D7            push a
2588   1535 FD D8         push g
2589   1537 11            mov a, b
2590   1538 FD 7A         mov g, c
2591   153A FD 2E 0A 00   mov32 cb, $0000000a
2591   153E 00 00 
2592   1540 FD D8         push g ; save 'g' as the div instruction uses it
2593   1542 AE            div a, b ; %, a: quotient, b: remainder
2594   1543 11            mov a, b
2595   1544 FD F1         pop g
2596   1546 FD 38         mov c, g
2597   1548 27            mov b, a
2598   1549 FD F1         pop g
2599   154B E4            pop a
2600   154C             ; --- END FACTORS
2601   154C FD 22 00 00   mov g, 0
2602   1550 FD 15         add32 cb, ga
2603   1552 E4            pop a
2604   1553             ; --- END TERMS
2605   1553 E7            pop d
2606   1554 FD 3E         mov [d], bl
2607   1556             ; num = num / 10; 
2608   1556 FA 05 00      lea d, [bp + 5] ; $num
2609   1559 DA            push d
2610   155A FA 05 00      lea d, [bp + 5] ; $num
2611   155D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2612   1560 FD 39         mov c, b ; And place it into C
2613   1562 2A            mov b, [d] ; Lower Word in B
2614   1563             ; --- START FACTORS
2615   1563 D7            push a
2616   1564 FD D8         push g
2617   1566 11            mov a, b
2618   1567 FD 7A         mov g, c
2619   1569 FD 2E 0A 00   mov32 cb, $0000000a
2619   156D 00 00 
2620   156F FD D8         push g ; save 'g' as the div instruction uses it
2621   1571 AE            div a, b ; /, a: quotient, b: remainder
2622   1572 FD F1         pop g
2623   1574 FD 38         mov c, g
2624   1576 27            mov b, a
2625   1577 FD F1         pop g
2626   1579 E4            pop a
2627   157A             ; --- END FACTORS
2628   157A E7            pop d
2629   157B FD 43         mov [d], b
2630   157D 28            mov b, c
2631   157E FD 44 02 00   mov [d + 2], b
2632   1582 0A E5 14      jmp _while21_cond
2633   1585             _while21_exit:
2634   1585             ; while (i > 0) { 
2635   1585             _while28_cond:
2636   1585 FA F5 FF      lea d, [bp + -11] ; $i
2637   1588 2A            mov b, [d]
2638   1589 38 00 00      mov c, 0
2639   158C             ; --- START RELATIONAL
2640   158C D7            push a
2641   158D 11            mov a, b
2642   158E FD 2E 00 00   mov32 cb, $00000000
2642   1592 00 00 
2643   1594 B0            cmp a, b
2644   1595 FD 7F         sgt ; >
2645   1597 E4            pop a
2646   1598             ; --- END RELATIONAL
2647   1598 C0 00 00      cmp b, 0
2648   159B C6 C1 15      je _while28_exit
2649   159E             _while28_block:
2650   159E             ; putchar(digits[--i]); 
2651   159E             ; --- START FUNCTION CALL
2652   159E FA F7 FF      lea d, [bp + -9] ; $digits
2653   15A1 D7            push a
2654   15A2 DA            push d
2655   15A3 FA F5 FF      lea d, [bp + -11] ; $i
2656   15A6 2A            mov b, [d]
2657   15A7 FD 7D         dec b
2658   15A9 FA F5 FF      lea d, [bp + -11] ; $i
2659   15AC FD 43         mov [d], b
2660   15AE E7            pop d
2661   15AF 5A            add d, b
2662   15B0 E4            pop a
2663   15B1 32            mov bl, [d]
2664   15B2 A7 00         mov bh, 0
2665   15B4 38 00 00      mov c, 0
2666   15B7 DD            push bl
2667   15B8 07 8A 14      call putchar
2668   15BB 51 01 00      add sp, 1
2669   15BE             ; --- END FUNCTION CALL
2670   15BE 0A 85 15      jmp _while28_cond
2671   15C1             _while28_exit:
2672   15C1 F9            leave
2673   15C2 09            ret
2674   15C3             
2675   15C3             printx32:
2676   15C3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2677   15C6             ; --- BEGIN INLINE ASM SEGMENT
2678   15C6 FA 05 00      lea d, [bp + 5] ; $hex
2679   15C9 2B 02 00      mov b, [d+2]
2680   15CC 07 D5 15      call print_u16x_printx32
2681   15CF 2A            mov b, [d]
2682   15D0 07 D5 15      call print_u16x_printx32
2683   15D3             ; --- END INLINE ASM SEGMENT
2684   15D3             ; return; 
2685   15D3 F9            leave
2686   15D4 09            ret
2687   15D5             ; --- BEGIN INLINE ASM SEGMENT
2688   15D5             print_u16x_printx32:
2689   15D5 D7            push a
2690   15D6 D8            push b
2691   15D7 DD            push bl
2692   15D8 30            mov bl, bh
2693   15D9 07 F7 15      call _itoa_printx32        ; convert bh to char in A
2694   15DC 2F            mov bl, al        ; save al
2695   15DD 19 00         mov al, 0
2696   15DF 05 03         syscall sys_io        ; display AH
2697   15E1 24            mov ah, bl        ; retrieve al
2698   15E2 19 00         mov al, 0
2699   15E4 05 03         syscall sys_io        ; display AL
2700   15E6 EA            pop bl
2701   15E7 07 F7 15      call _itoa_printx32        ; convert bh to char in A
2702   15EA 2F            mov bl, al        ; save al
2703   15EB 19 00         mov al, 0
2704   15ED 05 03         syscall sys_io        ; display AH
2705   15EF 24            mov ah, bl        ; retrieve al
2706   15F0 19 00         mov al, 0
2707   15F2 05 03         syscall sys_io        ; display AL
2708   15F4 E5            pop b
2709   15F5 E4            pop a
2710   15F6 09            ret
2711   15F7             _itoa_printx32:
2712   15F7 DA            push d
2713   15F8 D8            push b
2714   15F9 A7 00         mov bh, 0
2715   15FB FD A4 04      shr bl, 4  
2716   15FE 74            mov d, b
2717   15FF 1F 11 16      mov al, [d + s_hex_digits_printx32]
2718   1602 23            mov ah, al
2719   1603 E5            pop b
2720   1604 D8            push b
2721   1605 A7 00         mov bh, 0
2722   1607 FD 87 0F      and bl, $0F
2723   160A 74            mov d, b
2724   160B 1F 11 16      mov al, [d + s_hex_digits_printx32]
2725   160E E5            pop b
2726   160F E7            pop d
2727   1610 09            ret
2728   1611 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2728   1615 34 35 36 37 
2728   1619 38 39 41 42 
2728   161D 43 44 45 46 
2729   1621             ; --- END INLINE ASM SEGMENT
2730   1621 F9            leave
2731   1622 09            ret
2732   1623             
2733   1623             err:
2734   1623 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2735   1626             ; print(e); 
2736   1626             ; --- START FUNCTION CALL
2737   1626 FA 05 00      lea d, [bp + 5] ; $e
2738   1629 2A            mov b, [d]
2739   162A 38 00 00      mov c, 0
2740   162D FD AB         swp b
2741   162F D8            push b
2742   1630 07 38 16      call print
2743   1633 51 02 00      add sp, 2
2744   1636             ; --- END FUNCTION CALL
2745   1636 F9            leave
2746   1637 09            ret
2747   1638             
2748   1638             print:
2749   1638 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2750   163B             ; --- BEGIN INLINE ASM SEGMENT
2751   163B FA 05 00      lea d, [bp + 5] ; $s
2752   163E FD 2A         mov d, [d]
2753   1640             _puts_L1_print:
2754   1640 1E            mov al, [d]
2755   1641 B9 00         cmp al, 0
2756   1643 C6 4F 16      jz _puts_END_print
2757   1646 23            mov ah, al
2758   1647 19 00         mov al, 0
2759   1649 05 03         syscall sys_io
2760   164B 79            inc d
2761   164C 0A 40 16      jmp _puts_L1_print
2762   164F             _puts_END_print:
2763   164F             ; --- END INLINE ASM SEGMENT
2764   164F F9            leave
2765   1650 09            ret
2766   1651             
2767   1651             print_signed:
2768   1651 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2769   1654             ; char digits[5];  // enough for "-32768" 
2770   1654 52 05 00      sub sp, 5
2771   1657             ; int i = 0; 
2772   1657 52 02 00      sub sp, 2
2773   165A             ; --- START LOCAL VAR INITIALIZATION
2774   165A FA FA FF      lea d, [bp + -6] ; $i
2775   165D DA            push d
2776   165E FD 2E 00 00   mov32 cb, $00000000
2776   1662 00 00 
2777   1664 E7            pop d
2778   1665 FD 43         mov [d], b
2779   1667             ; --- END LOCAL VAR INITIALIZATION
2780   1667             ; unsigned int absval; 
2781   1667 52 02 00      sub sp, 2
2782   166A             ; if (num < 0) { 
2783   166A             _if29_cond:
2784   166A FA 05 00      lea d, [bp + 5] ; $num
2785   166D 2A            mov b, [d]
2786   166E 38 00 00      mov c, 0
2787   1671             ; --- START RELATIONAL
2788   1671 D7            push a
2789   1672 11            mov a, b
2790   1673 FD 2E 00 00   mov32 cb, $00000000
2790   1677 00 00 
2791   1679 B0            cmp a, b
2792   167A FD 73         slt ; < (signed)
2793   167C E4            pop a
2794   167D             ; --- END RELATIONAL
2795   167D C0 00 00      cmp b, 0
2796   1680 C6 B7 16      je _if29_else
2797   1683             _if29_TRUE:
2798   1683             ; putchar('-'); 
2799   1683             ; --- START FUNCTION CALL
2800   1683 FD 2E 2D 00   mov32 cb, $0000002d
2800   1687 00 00 
2801   1689 DD            push bl
2802   168A 07 8A 14      call putchar
2803   168D 51 01 00      add sp, 1
2804   1690             ; --- END FUNCTION CALL
2805   1690             ; absval = (unsigned int)(-(num + 1)) + 1;  // safe for -32768 
2806   1690 FA F8 FF      lea d, [bp + -8] ; $absval
2807   1693 DA            push d
2808   1694 FA 05 00      lea d, [bp + 5] ; $num
2809   1697 2A            mov b, [d]
2810   1698 38 00 00      mov c, 0
2811   169B             ; --- START TERMS
2812   169B D7            push a
2813   169C 11            mov a, b
2814   169D FD 2E 01 00   mov32 cb, $00000001
2814   16A1 00 00 
2815   16A3 56            add b, a
2816   16A4 E4            pop a
2817   16A5             ; --- END TERMS
2818   16A5 FD 97         neg b
2819   16A7             ; --- START TERMS
2820   16A7 D7            push a
2821   16A8 11            mov a, b
2822   16A9 FD 2E 01 00   mov32 cb, $00000001
2822   16AD 00 00 
2823   16AF 56            add b, a
2824   16B0 E4            pop a
2825   16B1             ; --- END TERMS
2826   16B1 E7            pop d
2827   16B2 FD 43         mov [d], b
2828   16B4 0A C5 16      jmp _if29_exit
2829   16B7             _if29_else:
2830   16B7             ; absval = (unsigned int)num; 
2831   16B7 FA F8 FF      lea d, [bp + -8] ; $absval
2832   16BA DA            push d
2833   16BB FA 05 00      lea d, [bp + 5] ; $num
2834   16BE 2A            mov b, [d]
2835   16BF 38 00 00      mov c, 0
2836   16C2 E7            pop d
2837   16C3 FD 43         mov [d], b
2838   16C5             _if29_exit:
2839   16C5             ; if (absval == 0) { 
2840   16C5             _if30_cond:
2841   16C5 FA F8 FF      lea d, [bp + -8] ; $absval
2842   16C8 2A            mov b, [d]
2843   16C9 38 00 00      mov c, 0
2844   16CC             ; --- START RELATIONAL
2845   16CC D7            push a
2846   16CD 11            mov a, b
2847   16CE FD 2E 00 00   mov32 cb, $00000000
2847   16D2 00 00 
2848   16D4 B0            cmp a, b
2849   16D5 FD 71         seq ; ==
2850   16D7 E4            pop a
2851   16D8             ; --- END RELATIONAL
2852   16D8 C0 00 00      cmp b, 0
2853   16DB C6 F0 16      je _if30_exit
2854   16DE             _if30_TRUE:
2855   16DE             ; putchar('0'); 
2856   16DE             ; --- START FUNCTION CALL
2857   16DE FD 2E 30 00   mov32 cb, $00000030
2857   16E2 00 00 
2858   16E4 DD            push bl
2859   16E5 07 8A 14      call putchar
2860   16E8 51 01 00      add sp, 1
2861   16EB             ; --- END FUNCTION CALL
2862   16EB             ; return; 
2863   16EB F9            leave
2864   16EC 09            ret
2865   16ED 0A F0 16      jmp _if30_exit
2866   16F0             _if30_exit:
2867   16F0             ; while (absval > 0) { 
2868   16F0             _while31_cond:
2869   16F0 FA F8 FF      lea d, [bp + -8] ; $absval
2870   16F3 2A            mov b, [d]
2871   16F4 38 00 00      mov c, 0
2872   16F7             ; --- START RELATIONAL
2873   16F7 D7            push a
2874   16F8 11            mov a, b
2875   16F9 FD 2E 00 00   mov32 cb, $00000000
2875   16FD 00 00 
2876   16FF B0            cmp a, b
2877   1700 FD 81         sgu ; > (unsigned)
2878   1702 E4            pop a
2879   1703             ; --- END RELATIONAL
2880   1703 C0 00 00      cmp b, 0
2881   1706 C6 76 17      je _while31_exit
2882   1709             _while31_block:
2883   1709             ; digits[i++] = '0' + (absval % 10); 
2884   1709 FA FC FF      lea d, [bp + -4] ; $digits
2885   170C D7            push a
2886   170D DA            push d
2887   170E FA FA FF      lea d, [bp + -6] ; $i
2888   1711 2A            mov b, [d]
2889   1712 38 00 00      mov c, 0
2890   1715 11            mov a, b
2891   1716 FD 77         inc b
2892   1718 FA FA FF      lea d, [bp + -6] ; $i
2893   171B FD 43         mov [d], b
2894   171D 27            mov b, a
2895   171E E7            pop d
2896   171F 5A            add d, b
2897   1720 E4            pop a
2898   1721 DA            push d
2899   1722 FD 2E 30 00   mov32 cb, $00000030
2899   1726 00 00 
2900   1728             ; --- START TERMS
2901   1728 D7            push a
2902   1729 11            mov a, b
2903   172A FA F8 FF      lea d, [bp + -8] ; $absval
2904   172D 2A            mov b, [d]
2905   172E 38 00 00      mov c, 0
2906   1731             ; --- START FACTORS
2907   1731 D7            push a
2908   1732 FD D8         push g
2909   1734 11            mov a, b
2910   1735 FD 7A         mov g, c
2911   1737 FD 2E 0A 00   mov32 cb, $0000000a
2911   173B 00 00 
2912   173D FD D8         push g ; save 'g' as the div instruction uses it
2913   173F AE            div a, b ; %, a: quotient, b: remainder
2914   1740 11            mov a, b
2915   1741 FD F1         pop g
2916   1743 FD 38         mov c, g
2917   1745 27            mov b, a
2918   1746 FD F1         pop g
2919   1748 E4            pop a
2920   1749             ; --- END FACTORS
2921   1749 56            add b, a
2922   174A E4            pop a
2923   174B             ; --- END TERMS
2924   174B E7            pop d
2925   174C FD 3E         mov [d], bl
2926   174E             ; absval = absval / 10; 
2927   174E FA F8 FF      lea d, [bp + -8] ; $absval
2928   1751 DA            push d
2929   1752 FA F8 FF      lea d, [bp + -8] ; $absval
2930   1755 2A            mov b, [d]
2931   1756 38 00 00      mov c, 0
2932   1759             ; --- START FACTORS
2933   1759 D7            push a
2934   175A FD D8         push g
2935   175C 11            mov a, b
2936   175D FD 7A         mov g, c
2937   175F FD 2E 0A 00   mov32 cb, $0000000a
2937   1763 00 00 
2938   1765 FD D8         push g ; save 'g' as the div instruction uses it
2939   1767 AE            div a, b ; /, a: quotient, b: remainder
2940   1768 FD F1         pop g
2941   176A FD 38         mov c, g
2942   176C 27            mov b, a
2943   176D FD F1         pop g
2944   176F E4            pop a
2945   1770             ; --- END FACTORS
2946   1770 E7            pop d
2947   1771 FD 43         mov [d], b
2948   1773 0A F0 16      jmp _while31_cond
2949   1776             _while31_exit:
2950   1776             ; while (i > 0) { 
2951   1776             _while38_cond:
2952   1776 FA FA FF      lea d, [bp + -6] ; $i
2953   1779 2A            mov b, [d]
2954   177A 38 00 00      mov c, 0
2955   177D             ; --- START RELATIONAL
2956   177D D7            push a
2957   177E 11            mov a, b
2958   177F FD 2E 00 00   mov32 cb, $00000000
2958   1783 00 00 
2959   1785 B0            cmp a, b
2960   1786 FD 7F         sgt ; >
2961   1788 E4            pop a
2962   1789             ; --- END RELATIONAL
2963   1789 C0 00 00      cmp b, 0
2964   178C C6 B2 17      je _while38_exit
2965   178F             _while38_block:
2966   178F             ; putchar(digits[--i]); 
2967   178F             ; --- START FUNCTION CALL
2968   178F FA FC FF      lea d, [bp + -4] ; $digits
2969   1792 D7            push a
2970   1793 DA            push d
2971   1794 FA FA FF      lea d, [bp + -6] ; $i
2972   1797 2A            mov b, [d]
2973   1798 FD 7D         dec b
2974   179A FA FA FF      lea d, [bp + -6] ; $i
2975   179D FD 43         mov [d], b
2976   179F E7            pop d
2977   17A0 5A            add d, b
2978   17A1 E4            pop a
2979   17A2 32            mov bl, [d]
2980   17A3 A7 00         mov bh, 0
2981   17A5 38 00 00      mov c, 0
2982   17A8 DD            push bl
2983   17A9 07 8A 14      call putchar
2984   17AC 51 01 00      add sp, 1
2985   17AF             ; --- END FUNCTION CALL
2986   17AF 0A 76 17      jmp _while38_cond
2987   17B2             _while38_exit:
2988   17B2 F9            leave
2989   17B3 09            ret
2990   17B4             
2991   17B4             print_unsigned:
2992   17B4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2993   17B7             ; char digits[5]; 
2994   17B7 52 05 00      sub sp, 5
2995   17BA             ; int i = 0; 
2996   17BA 52 02 00      sub sp, 2
2997   17BD             ; --- START LOCAL VAR INITIALIZATION
2998   17BD FA FA FF      lea d, [bp + -6] ; $i
2999   17C0 DA            push d
3000   17C1 FD 2E 00 00   mov32 cb, $00000000
3000   17C5 00 00 
3001   17C7 E7            pop d
3002   17C8 FD 43         mov [d], b
3003   17CA             ; --- END LOCAL VAR INITIALIZATION
3004   17CA             ; if(num == 0){ 
3005   17CA             _if39_cond:
3006   17CA FA 05 00      lea d, [bp + 5] ; $num
3007   17CD 2A            mov b, [d]
3008   17CE 38 00 00      mov c, 0
3009   17D1             ; --- START RELATIONAL
3010   17D1 D7            push a
3011   17D2 11            mov a, b
3012   17D3 FD 2E 00 00   mov32 cb, $00000000
3012   17D7 00 00 
3013   17D9 B0            cmp a, b
3014   17DA FD 71         seq ; ==
3015   17DC E4            pop a
3016   17DD             ; --- END RELATIONAL
3017   17DD C0 00 00      cmp b, 0
3018   17E0 C6 F5 17      je _if39_exit
3019   17E3             _if39_TRUE:
3020   17E3             ; putchar('0'); 
3021   17E3             ; --- START FUNCTION CALL
3022   17E3 FD 2E 30 00   mov32 cb, $00000030
3022   17E7 00 00 
3023   17E9 DD            push bl
3024   17EA 07 8A 14      call putchar
3025   17ED 51 01 00      add sp, 1
3026   17F0             ; --- END FUNCTION CALL
3027   17F0             ; return; 
3028   17F0 F9            leave
3029   17F1 09            ret
3030   17F2 0A F5 17      jmp _if39_exit
3031   17F5             _if39_exit:
3032   17F5             ; while (num > 0) { 
3033   17F5             _while40_cond:
3034   17F5 FA 05 00      lea d, [bp + 5] ; $num
3035   17F8 2A            mov b, [d]
3036   17F9 38 00 00      mov c, 0
3037   17FC             ; --- START RELATIONAL
3038   17FC D7            push a
3039   17FD 11            mov a, b
3040   17FE FD 2E 00 00   mov32 cb, $00000000
3040   1802 00 00 
3041   1804 B0            cmp a, b
3042   1805 FD 81         sgu ; > (unsigned)
3043   1807 E4            pop a
3044   1808             ; --- END RELATIONAL
3045   1808 C0 00 00      cmp b, 0
3046   180B C6 7B 18      je _while40_exit
3047   180E             _while40_block:
3048   180E             ; digits[i++] = '0' + (num % 10); 
3049   180E FA FC FF      lea d, [bp + -4] ; $digits
3050   1811 D7            push a
3051   1812 DA            push d
3052   1813 FA FA FF      lea d, [bp + -6] ; $i
3053   1816 2A            mov b, [d]
3054   1817 38 00 00      mov c, 0
3055   181A 11            mov a, b
3056   181B FD 77         inc b
3057   181D FA FA FF      lea d, [bp + -6] ; $i
3058   1820 FD 43         mov [d], b
3059   1822 27            mov b, a
3060   1823 E7            pop d
3061   1824 5A            add d, b
3062   1825 E4            pop a
3063   1826 DA            push d
3064   1827 FD 2E 30 00   mov32 cb, $00000030
3064   182B 00 00 
3065   182D             ; --- START TERMS
3066   182D D7            push a
3067   182E 11            mov a, b
3068   182F FA 05 00      lea d, [bp + 5] ; $num
3069   1832 2A            mov b, [d]
3070   1833 38 00 00      mov c, 0
3071   1836             ; --- START FACTORS
3072   1836 D7            push a
3073   1837 FD D8         push g
3074   1839 11            mov a, b
3075   183A FD 7A         mov g, c
3076   183C FD 2E 0A 00   mov32 cb, $0000000a
3076   1840 00 00 
3077   1842 FD D8         push g ; save 'g' as the div instruction uses it
3078   1844 AE            div a, b ; %, a: quotient, b: remainder
3079   1845 11            mov a, b
3080   1846 FD F1         pop g
3081   1848 FD 38         mov c, g
3082   184A 27            mov b, a
3083   184B FD F1         pop g
3084   184D E4            pop a
3085   184E             ; --- END FACTORS
3086   184E 56            add b, a
3087   184F E4            pop a
3088   1850             ; --- END TERMS
3089   1850 E7            pop d
3090   1851 FD 3E         mov [d], bl
3091   1853             ; num = num / 10; 
3092   1853 FA 05 00      lea d, [bp + 5] ; $num
3093   1856 DA            push d
3094   1857 FA 05 00      lea d, [bp + 5] ; $num
3095   185A 2A            mov b, [d]
3096   185B 38 00 00      mov c, 0
3097   185E             ; --- START FACTORS
3098   185E D7            push a
3099   185F FD D8         push g
3100   1861 11            mov a, b
3101   1862 FD 7A         mov g, c
3102   1864 FD 2E 0A 00   mov32 cb, $0000000a
3102   1868 00 00 
3103   186A FD D8         push g ; save 'g' as the div instruction uses it
3104   186C AE            div a, b ; /, a: quotient, b: remainder
3105   186D FD F1         pop g
3106   186F FD 38         mov c, g
3107   1871 27            mov b, a
3108   1872 FD F1         pop g
3109   1874 E4            pop a
3110   1875             ; --- END FACTORS
3111   1875 E7            pop d
3112   1876 FD 43         mov [d], b
3113   1878 0A F5 17      jmp _while40_cond
3114   187B             _while40_exit:
3115   187B             ; while (i > 0) { 
3116   187B             _while47_cond:
3117   187B FA FA FF      lea d, [bp + -6] ; $i
3118   187E 2A            mov b, [d]
3119   187F 38 00 00      mov c, 0
3120   1882             ; --- START RELATIONAL
3121   1882 D7            push a
3122   1883 11            mov a, b
3123   1884 FD 2E 00 00   mov32 cb, $00000000
3123   1888 00 00 
3124   188A B0            cmp a, b
3125   188B FD 7F         sgt ; >
3126   188D E4            pop a
3127   188E             ; --- END RELATIONAL
3128   188E C0 00 00      cmp b, 0
3129   1891 C6 B7 18      je _while47_exit
3130   1894             _while47_block:
3131   1894             ; putchar(digits[--i]); 
3132   1894             ; --- START FUNCTION CALL
3133   1894 FA FC FF      lea d, [bp + -4] ; $digits
3134   1897 D7            push a
3135   1898 DA            push d
3136   1899 FA FA FF      lea d, [bp + -6] ; $i
3137   189C 2A            mov b, [d]
3138   189D FD 7D         dec b
3139   189F FA FA FF      lea d, [bp + -6] ; $i
3140   18A2 FD 43         mov [d], b
3141   18A4 E7            pop d
3142   18A5 5A            add d, b
3143   18A6 E4            pop a
3144   18A7 32            mov bl, [d]
3145   18A8 A7 00         mov bh, 0
3146   18AA 38 00 00      mov c, 0
3147   18AD DD            push bl
3148   18AE 07 8A 14      call putchar
3149   18B1 51 01 00      add sp, 1
3150   18B4             ; --- END FUNCTION CALL
3151   18B4 0A 7B 18      jmp _while47_cond
3152   18B7             _while47_exit:
3153   18B7 F9            leave
3154   18B8 09            ret
3155   18B9             
3156   18B9             printx16:
3157   18B9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3158   18BC             ; --- BEGIN INLINE ASM SEGMENT
3159   18BC FA 05 00      lea d, [bp + 5] ; $hex
3160   18BF 2A            mov b, [d]
3161   18C0             print_u16x_printx16:
3162   18C0 DD            push bl
3163   18C1 30            mov bl, bh
3164   18C2 07 DF 18      call _itoa_printx16        ; convert bh to char in A
3165   18C5 2F            mov bl, al        ; save al
3166   18C6 19 00         mov al, 0
3167   18C8 05 03         syscall sys_io        ; display AH
3168   18CA 24            mov ah, bl        ; retrieve al
3169   18CB 19 00         mov al, 0
3170   18CD 05 03         syscall sys_io        ; display AL
3171   18CF EA            pop bl
3172   18D0 07 DF 18      call _itoa_printx16        ; convert bh to char in A
3173   18D3 2F            mov bl, al        ; save al
3174   18D4 19 00         mov al, 0
3175   18D6 05 03         syscall sys_io        ; display AH
3176   18D8 24            mov ah, bl        ; retrieve al
3177   18D9 19 00         mov al, 0
3178   18DB 05 03         syscall sys_io        ; display AL
3179   18DD             ; --- END INLINE ASM SEGMENT
3180   18DD             ; return; 
3181   18DD F9            leave
3182   18DE 09            ret
3183   18DF             ; --- BEGIN INLINE ASM SEGMENT
3184   18DF             _itoa_printx16:
3185   18DF DA            push d
3186   18E0 D8            push b
3187   18E1 A7 00         mov bh, 0
3188   18E3 FD A4 04      shr bl, 4  
3189   18E6 74            mov d, b
3190   18E7 1F F9 18      mov al, [d + s_hex_digits_printx16]
3191   18EA 23            mov ah, al
3192   18EB E5            pop b
3193   18EC D8            push b
3194   18ED A7 00         mov bh, 0
3195   18EF FD 87 0F      and bl, $0F
3196   18F2 74            mov d, b
3197   18F3 1F F9 18      mov al, [d + s_hex_digits_printx16]
3198   18F6 E5            pop b
3199   18F7 E7            pop d
3200   18F8 09            ret
3201   18F9 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
3201   18FD 34 35 36 37 
3201   1901 38 39 41 42 
3201   1905 43 44 45 46 
3202   1909             ; --- END INLINE ASM SEGMENT
3203   1909 F9            leave
3204   190A 09            ret
3205   190B             ; --- END TEXT SEGMENT
3206   190B             
3207   190B             ; --- BEGIN DATA SEGMENT
3208   190B 00 00 00 00 _st1_data: .fill 13, 0
3208   190F 00 00 00 00 
3208   1913 00 00 00 00 
3208   1917 00 
3209   1918 54 65 73 74 _s0: .db "Test %d, Result: %d\n", 0
3209   191C 20 25 64 2C 
3209   1920 20 52 65 73 
3209   1924 75 6C 74 3A 
3209   1928 20 25 64 0A 
3209   192C 00 
3210   192D 55 6E 65 78 _s1: .db "Unexpected format in printf.", 0
3210   1931 70 65 63 74 
3210   1935 65 64 20 66 
3210   1939 6F 72 6D 61 
3210   193D 74 20 69 6E 
3210   1941 20 70 72 69 
3210   1945 6E 74 66 2E 
3210   1949 00 
3211   194A 45 72 72 6F _s2: .db "Error: Unknown argument type.\n", 0
3211   194E 72 3A 20 55 
3211   1952 6E 6B 6E 6F 
3211   1956 77 6E 20 61 
3211   195A 72 67 75 6D 
3211   195E 65 6E 74 20 
3211   1962 74 79 70 65 
3211   1966 2E 0A 00 
3212   1969             
3213   1969 6B 19       _heap_top: .dw _heap
3214   196B 00          _heap: .db 0
3215   196C             ; --- END DATA SEGMENT
3216   196C             
3217   196C             .end
tasm: Number of errors = 0
