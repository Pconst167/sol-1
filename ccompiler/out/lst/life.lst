0001   0000             ; --- FILENAME: programs/life.c
0002   0000             ; --- DATE:     15-07-2025 at 21:30:27
0003   0000             .include "lib/asm/kernel.exp"
0001+  0000             fdc_al_restore   .EQU  $0000
0002+  0000             fdc_al_step      .EQU  $0001
0003+  0000             fdc_al_step_in   .EQU  $0002
0004+  0000             fdc_al_step_out  .EQU  $0003
0005+  0000             fdc_al_seek      .EQU  $0004
0006+  0000             fdc_al_format_128 .EQU  $0005
0007+  0000             fdc_al_formatdisk_128 .EQU  $0006
0008+  0000             fdc_al_format_512 .EQU  $0007
0009+  0000             fdc_al_formatdisk_512 .EQU  $0008
0010+  0000             fdc_al_read_addr .EQU  $0009
0011+  0000             fdc_al_read_track .EQU  $000a
0012+  0000             fdc_al_read_sect .EQU  $000b
0013+  0000             fdc_al_write_sect .EQU  $000c
0014+  0000             fdc_al_force_int .EQU  $000d
0015+  0000             fdc_al_status0   .EQU  $000e
0016+  0000             fdc_al_status1   .EQU  $000f
0017+  0000             noname._7seg_display .EQU  $ffb0
0018+  0000             noname._fdc_config .EQU  $ffc0
0019+  0000             noname._fdc_status_0 .EQU  $ffc1
0020+  0000             noname._fdc_stat_cmd .EQU  $ffc8
0021+  0000             sys_break        .EQU  $0000
0022+  0000             sys_rtc          .EQU  $0001
0023+  0000             sys_ide          .EQU  $0002
0024+  0000             sys_io           .EQU  $0003
0025+  0000             sys_filesystem   .EQU  $0004
0026+  0000             sys_create_proc  .EQU  $0005
0027+  0000             sys_list_proc    .EQU  $0006
0028+  0000             sys_datetime     .EQU  $0007
0029+  0000             sys_reboot       .EQU  $0008
0030+  0000             sys_pause_proc   .EQU  $0009
0031+  0000             sys_resume_proc  .EQU  $000a
0032+  0000             sys_terminate_proc .EQU  $000b
0033+  0000             sys_system       .EQU  $000c
0034+  0000             sys_fdc          .EQU  $000d
0035+  0000             text_org         .EQU  $0400
0004   0000             .include "lib/asm/bios.exp"
0001+  0000             bios_reset_vector .equ  $01c0
0002+  0000             ide_buffer       .equ  $8204
0003+  0000             boot_origin      .equ  $8004
0004+  0000             bios_uart        .equ  $0002
0005+  0000             bios_ide         .equ  $0003
0005   0000             
0006   0000             ; --- BEGIN TEXT SEGMENT
0007   0400             .org text_org
0008   0400             main:
0009   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0010   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0011   0408             ; int i, j, n; 
0012   0408 52 02 00      sub sp, 2
0013   040B 52 02 00      sub sp, 2
0014   040E 52 02 00      sub sp, 2
0015   0411             ; printf(clear);  // clear the screen once at start 
0016   0411             ; --- START FUNCTION CALL
0017   0411 3B 76 2F      mov d, _clear_data ; $clear
0018   0414 2D            mov b, d
0019   0415 38 00 00      mov c, 0
0020   0418 FD AB         swp b
0021   041A D8            push b
0022   041B 07 D4 0E      call printf
0023   041E 51 02 00      add sp, 2
0024   0421             ; --- END FUNCTION CALL
0025   0421             ; for (i = 0; i <  50      ; i++) 
0026   0421             _for1_init:
0027   0421 FA FF FF      lea d, [bp + -1] ; $i
0028   0424 DA            push d
0029   0425 FD 2E 00 00   mov32 cb, $00000000
0029   0429 00 00 
0030   042B E7            pop d
0031   042C FD 43         mov [d], b
0032   042E             _for1_cond:
0033   042E FA FF FF      lea d, [bp + -1] ; $i
0034   0431 2A            mov b, [d]
0035   0432 38 00 00      mov c, 0
0036   0435             ; --- START RELATIONAL
0037   0435 D7            push a
0038   0436 11            mov a, b
0039   0437 FD 2E 32 00   mov32 cb, $00000032
0039   043B 00 00 
0040   043D B0            cmp a, b
0041   043E FD 73         slt ; < (signed)
0042   0440 E4            pop a
0043   0441             ; --- END RELATIONAL
0044   0441 C0 00 00      cmp b, 0
0045   0444 C6 D5 04      je _for1_exit
0046   0447             _for1_block:
0047   0447             ; for (j = 0; j <   60     ; j++) 
0048   0447             _for2_init:
0049   0447 FA FD FF      lea d, [bp + -3] ; $j
0050   044A DA            push d
0051   044B FD 2E 00 00   mov32 cb, $00000000
0051   044F 00 00 
0052   0451 E7            pop d
0053   0452 FD 43         mov [d], b
0054   0454             _for2_cond:
0055   0454 FA FD FF      lea d, [bp + -3] ; $j
0056   0457 2A            mov b, [d]
0057   0458 38 00 00      mov c, 0
0058   045B             ; --- START RELATIONAL
0059   045B D7            push a
0060   045C 11            mov a, b
0061   045D FD 2E 3C 00   mov32 cb, $0000003c
0061   0461 00 00 
0062   0463 B0            cmp a, b
0063   0464 FD 73         slt ; < (signed)
0064   0466 E4            pop a
0065   0467             ; --- END RELATIONAL
0066   0467 C0 00 00      cmp b, 0
0067   046A C6 C2 04      je _for2_exit
0068   046D             _for2_block:
0069   046D             ; nextState[i][j] = currState[i][j]; 
0070   046D 3B 06 18      mov d, _nextState_data ; $nextState
0071   0470 D7            push a
0072   0471 DA            push d
0073   0472 FA FF FF      lea d, [bp + -1] ; $i
0074   0475 2A            mov b, [d]
0075   0476 38 00 00      mov c, 0
0076   0479 E7            pop d
0077   047A FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
0078   047E DA            push d
0079   047F FA FD FF      lea d, [bp + -3] ; $j
0080   0482 2A            mov b, [d]
0081   0483 38 00 00      mov c, 0
0082   0486 E7            pop d
0083   0487 5A            add d, b
0084   0488 E4            pop a
0085   0489 DA            push d
0086   048A 3B BE 23      mov d, _currState_data ; $currState
0087   048D D7            push a
0088   048E DA            push d
0089   048F FA FF FF      lea d, [bp + -1] ; $i
0090   0492 2A            mov b, [d]
0091   0493 38 00 00      mov c, 0
0092   0496 E7            pop d
0093   0497 FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
0094   049B DA            push d
0095   049C FA FD FF      lea d, [bp + -3] ; $j
0096   049F 2A            mov b, [d]
0097   04A0 38 00 00      mov c, 0
0098   04A3 E7            pop d
0099   04A4 5A            add d, b
0100   04A5 E4            pop a
0101   04A6 32            mov bl, [d]
0102   04A7 A7 00         mov bh, 0
0103   04A9 38 00 00      mov c, 0
0104   04AC E7            pop d
0105   04AD FD 3E         mov [d], bl
0106   04AF             _for2_update:
0107   04AF FA FD FF      lea d, [bp + -3] ; $j
0108   04B2 2A            mov b, [d]
0109   04B3 38 00 00      mov c, 0
0110   04B6 11            mov a, b
0111   04B7 FD 77         inc b
0112   04B9 FA FD FF      lea d, [bp + -3] ; $j
0113   04BC FD 43         mov [d], b
0114   04BE 27            mov b, a
0115   04BF 0A 54 04      jmp _for2_cond
0116   04C2             _for2_exit:
0117   04C2             _for1_update:
0118   04C2 FA FF FF      lea d, [bp + -1] ; $i
0119   04C5 2A            mov b, [d]
0120   04C6 38 00 00      mov c, 0
0121   04C9 11            mov a, b
0122   04CA FD 77         inc b
0123   04CC FA FF FF      lea d, [bp + -1] ; $i
0124   04CF FD 43         mov [d], b
0125   04D1 27            mov b, a
0126   04D2 0A 2E 04      jmp _for1_cond
0127   04D5             _for1_exit:
0128   04D5             ; for (;;) { 
0129   04D5             _for3_init:
0130   04D5             _for3_cond:
0131   04D5             _for3_block:
0132   04D5             ; int min_i =  50      , max_i = 0, min_j =   60     , max_j = 0; 
0133   04D5 52 02 00      sub sp, 2
0134   04D8             ; --- START LOCAL VAR INITIALIZATION
0135   04D8 FA F9 FF      lea d, [bp + -7] ; $min_i
0136   04DB DA            push d
0137   04DC FD 2E 32 00   mov32 cb, $00000032
0137   04E0 00 00 
0138   04E2 E7            pop d
0139   04E3 FD 43         mov [d], b
0140   04E5             ; --- END LOCAL VAR INITIALIZATION
0141   04E5 52 02 00      sub sp, 2
0142   04E8             ; --- START LOCAL VAR INITIALIZATION
0143   04E8 FA F7 FF      lea d, [bp + -9] ; $max_i
0144   04EB DA            push d
0145   04EC FD 2E 00 00   mov32 cb, $00000000
0145   04F0 00 00 
0146   04F2 E7            pop d
0147   04F3 FD 43         mov [d], b
0148   04F5             ; --- END LOCAL VAR INITIALIZATION
0149   04F5 52 02 00      sub sp, 2
0150   04F8             ; --- START LOCAL VAR INITIALIZATION
0151   04F8 FA F5 FF      lea d, [bp + -11] ; $min_j
0152   04FB DA            push d
0153   04FC FD 2E 3C 00   mov32 cb, $0000003c
0153   0500 00 00 
0154   0502 E7            pop d
0155   0503 FD 43         mov [d], b
0156   0505             ; --- END LOCAL VAR INITIALIZATION
0157   0505 52 02 00      sub sp, 2
0158   0508             ; --- START LOCAL VAR INITIALIZATION
0159   0508 FA F3 FF      lea d, [bp + -13] ; $max_j
0160   050B DA            push d
0161   050C FD 2E 00 00   mov32 cb, $00000000
0161   0510 00 00 
0162   0512 E7            pop d
0163   0513 FD 43         mov [d], b
0164   0515             ; --- END LOCAL VAR INITIALIZATION
0165   0515             ; for (i = 1; i <  50       - 1; i++) { 
0166   0515             _for4_init:
0167   0515 FA FF FF      lea d, [bp + -1] ; $i
0168   0518 DA            push d
0169   0519 FD 2E 01 00   mov32 cb, $00000001
0169   051D 00 00 
0170   051F E7            pop d
0171   0520 FD 43         mov [d], b
0172   0522             _for4_cond:
0173   0522 FA FF FF      lea d, [bp + -1] ; $i
0174   0525 2A            mov b, [d]
0175   0526 38 00 00      mov c, 0
0176   0529             ; --- START RELATIONAL
0177   0529 D7            push a
0178   052A 11            mov a, b
0179   052B FD 2E 32 00   mov32 cb, $00000032
0179   052F 00 00 
0180   0531             ; --- START TERMS
0181   0531 D7            push a
0182   0532 11            mov a, b
0183   0533 FD 2E 01 00   mov32 cb, $00000001
0183   0537 00 00 
0184   0539 60            sub a, b
0185   053A 27            mov b, a
0186   053B E4            pop a
0187   053C             ; --- END TERMS
0188   053C B0            cmp a, b
0189   053D FD 73         slt ; < (signed)
0190   053F E4            pop a
0191   0540             ; --- END RELATIONAL
0192   0540 C0 00 00      cmp b, 0
0193   0543 C6 80 06      je _for4_exit
0194   0546             _for4_block:
0195   0546             ; for (j = 1; j <   60      - 1; j++) { 
0196   0546             _for5_init:
0197   0546 FA FD FF      lea d, [bp + -3] ; $j
0198   0549 DA            push d
0199   054A FD 2E 01 00   mov32 cb, $00000001
0199   054E 00 00 
0200   0550 E7            pop d
0201   0551 FD 43         mov [d], b
0202   0553             _for5_cond:
0203   0553 FA FD FF      lea d, [bp + -3] ; $j
0204   0556 2A            mov b, [d]
0205   0557 38 00 00      mov c, 0
0206   055A             ; --- START RELATIONAL
0207   055A D7            push a
0208   055B 11            mov a, b
0209   055C FD 2E 3C 00   mov32 cb, $0000003c
0209   0560 00 00 
0210   0562             ; --- START TERMS
0211   0562 D7            push a
0212   0563 11            mov a, b
0213   0564 FD 2E 01 00   mov32 cb, $00000001
0213   0568 00 00 
0214   056A 60            sub a, b
0215   056B 27            mov b, a
0216   056C E4            pop a
0217   056D             ; --- END TERMS
0218   056D B0            cmp a, b
0219   056E FD 73         slt ; < (signed)
0220   0570 E4            pop a
0221   0571             ; --- END RELATIONAL
0222   0571 C0 00 00      cmp b, 0
0223   0574 C6 6D 06      je _for5_exit
0224   0577             _for5_block:
0225   0577             ; if (currState[i][j] == '@') { 
0226   0577             _if6_cond:
0227   0577 3B BE 23      mov d, _currState_data ; $currState
0228   057A D7            push a
0229   057B DA            push d
0230   057C FA FF FF      lea d, [bp + -1] ; $i
0231   057F 2A            mov b, [d]
0232   0580 38 00 00      mov c, 0
0233   0583 E7            pop d
0234   0584 FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
0235   0588 DA            push d
0236   0589 FA FD FF      lea d, [bp + -3] ; $j
0237   058C 2A            mov b, [d]
0238   058D 38 00 00      mov c, 0
0239   0590 E7            pop d
0240   0591 5A            add d, b
0241   0592 E4            pop a
0242   0593 32            mov bl, [d]
0243   0594 A7 00         mov bh, 0
0244   0596 38 00 00      mov c, 0
0245   0599             ; --- START RELATIONAL
0246   0599 D7            push a
0247   059A 11            mov a, b
0248   059B FD 2E 40 00   mov32 cb, $00000040
0248   059F 00 00 
0249   05A1 B0            cmp a, b
0250   05A2 FD 71         seq ; ==
0251   05A4 E4            pop a
0252   05A5             ; --- END RELATIONAL
0253   05A5 C0 00 00      cmp b, 0
0254   05A8 C6 5A 06      je _if6_exit
0255   05AB             _if6_TRUE:
0256   05AB             ; if (i < min_i) min_i = i; 
0257   05AB             _if7_cond:
0258   05AB FA FF FF      lea d, [bp + -1] ; $i
0259   05AE 2A            mov b, [d]
0260   05AF 38 00 00      mov c, 0
0261   05B2             ; --- START RELATIONAL
0262   05B2 D7            push a
0263   05B3 11            mov a, b
0264   05B4 FA F9 FF      lea d, [bp + -7] ; $min_i
0265   05B7 2A            mov b, [d]
0266   05B8 38 00 00      mov c, 0
0267   05BB B0            cmp a, b
0268   05BC FD 73         slt ; < (signed)
0269   05BE E4            pop a
0270   05BF             ; --- END RELATIONAL
0271   05BF C0 00 00      cmp b, 0
0272   05C2 C6 D6 05      je _if7_exit
0273   05C5             _if7_TRUE:
0274   05C5             ; min_i = i; 
0275   05C5 FA F9 FF      lea d, [bp + -7] ; $min_i
0276   05C8 DA            push d
0277   05C9 FA FF FF      lea d, [bp + -1] ; $i
0278   05CC 2A            mov b, [d]
0279   05CD 38 00 00      mov c, 0
0280   05D0 E7            pop d
0281   05D1 FD 43         mov [d], b
0282   05D3 0A D6 05      jmp _if7_exit
0283   05D6             _if7_exit:
0284   05D6             ; if (i > max_i) max_i = i; 
0285   05D6             _if8_cond:
0286   05D6 FA FF FF      lea d, [bp + -1] ; $i
0287   05D9 2A            mov b, [d]
0288   05DA 38 00 00      mov c, 0
0289   05DD             ; --- START RELATIONAL
0290   05DD D7            push a
0291   05DE 11            mov a, b
0292   05DF FA F7 FF      lea d, [bp + -9] ; $max_i
0293   05E2 2A            mov b, [d]
0294   05E3 38 00 00      mov c, 0
0295   05E6 B0            cmp a, b
0296   05E7 FD 7F         sgt ; >
0297   05E9 E4            pop a
0298   05EA             ; --- END RELATIONAL
0299   05EA C0 00 00      cmp b, 0
0300   05ED C6 01 06      je _if8_exit
0301   05F0             _if8_TRUE:
0302   05F0             ; max_i = i; 
0303   05F0 FA F7 FF      lea d, [bp + -9] ; $max_i
0304   05F3 DA            push d
0305   05F4 FA FF FF      lea d, [bp + -1] ; $i
0306   05F7 2A            mov b, [d]
0307   05F8 38 00 00      mov c, 0
0308   05FB E7            pop d
0309   05FC FD 43         mov [d], b
0310   05FE 0A 01 06      jmp _if8_exit
0311   0601             _if8_exit:
0312   0601             ; if (j < min_j) min_j = j; 
0313   0601             _if9_cond:
0314   0601 FA FD FF      lea d, [bp + -3] ; $j
0315   0604 2A            mov b, [d]
0316   0605 38 00 00      mov c, 0
0317   0608             ; --- START RELATIONAL
0318   0608 D7            push a
0319   0609 11            mov a, b
0320   060A FA F5 FF      lea d, [bp + -11] ; $min_j
0321   060D 2A            mov b, [d]
0322   060E 38 00 00      mov c, 0
0323   0611 B0            cmp a, b
0324   0612 FD 73         slt ; < (signed)
0325   0614 E4            pop a
0326   0615             ; --- END RELATIONAL
0327   0615 C0 00 00      cmp b, 0
0328   0618 C6 2C 06      je _if9_exit
0329   061B             _if9_TRUE:
0330   061B             ; min_j = j; 
0331   061B FA F5 FF      lea d, [bp + -11] ; $min_j
0332   061E DA            push d
0333   061F FA FD FF      lea d, [bp + -3] ; $j
0334   0622 2A            mov b, [d]
0335   0623 38 00 00      mov c, 0
0336   0626 E7            pop d
0337   0627 FD 43         mov [d], b
0338   0629 0A 2C 06      jmp _if9_exit
0339   062C             _if9_exit:
0340   062C             ; if (j > max_j) max_j = j; 
0341   062C             _if10_cond:
0342   062C FA FD FF      lea d, [bp + -3] ; $j
0343   062F 2A            mov b, [d]
0344   0630 38 00 00      mov c, 0
0345   0633             ; --- START RELATIONAL
0346   0633 D7            push a
0347   0634 11            mov a, b
0348   0635 FA F3 FF      lea d, [bp + -13] ; $max_j
0349   0638 2A            mov b, [d]
0350   0639 38 00 00      mov c, 0
0351   063C B0            cmp a, b
0352   063D FD 7F         sgt ; >
0353   063F E4            pop a
0354   0640             ; --- END RELATIONAL
0355   0640 C0 00 00      cmp b, 0
0356   0643 C6 57 06      je _if10_exit
0357   0646             _if10_TRUE:
0358   0646             ; max_j = j; 
0359   0646 FA F3 FF      lea d, [bp + -13] ; $max_j
0360   0649 DA            push d
0361   064A FA FD FF      lea d, [bp + -3] ; $j
0362   064D 2A            mov b, [d]
0363   064E 38 00 00      mov c, 0
0364   0651 E7            pop d
0365   0652 FD 43         mov [d], b
0366   0654 0A 57 06      jmp _if10_exit
0367   0657             _if10_exit:
0368   0657 0A 5A 06      jmp _if6_exit
0369   065A             _if6_exit:
0370   065A             _for5_update:
0371   065A FA FD FF      lea d, [bp + -3] ; $j
0372   065D 2A            mov b, [d]
0373   065E 38 00 00      mov c, 0
0374   0661 11            mov a, b
0375   0662 FD 77         inc b
0376   0664 FA FD FF      lea d, [bp + -3] ; $j
0377   0667 FD 43         mov [d], b
0378   0669 27            mov b, a
0379   066A 0A 53 05      jmp _for5_cond
0380   066D             _for5_exit:
0381   066D             _for4_update:
0382   066D FA FF FF      lea d, [bp + -1] ; $i
0383   0670 2A            mov b, [d]
0384   0671 38 00 00      mov c, 0
0385   0674 11            mov a, b
0386   0675 FD 77         inc b
0387   0677 FA FF FF      lea d, [bp + -1] ; $i
0388   067A FD 43         mov [d], b
0389   067C 27            mov b, a
0390   067D 0A 22 05      jmp _for4_cond
0391   0680             _for4_exit:
0392   0680             ; if (min_i > max_i || min_j > max_j) { 
0393   0680             _if11_cond:
0394   0680 FA F9 FF      lea d, [bp + -7] ; $min_i
0395   0683 2A            mov b, [d]
0396   0684 38 00 00      mov c, 0
0397   0687             ; --- START RELATIONAL
0398   0687 D7            push a
0399   0688 11            mov a, b
0400   0689 FA F7 FF      lea d, [bp + -9] ; $max_i
0401   068C 2A            mov b, [d]
0402   068D 38 00 00      mov c, 0
0403   0690 B0            cmp a, b
0404   0691 FD 7F         sgt ; >
0405   0693 E4            pop a
0406   0694             ; --- END RELATIONAL
0407   0694             ; --- START LOGICAL OR
0408   0694 D7            push a
0409   0695 11            mov a, b
0410   0696 FA F5 FF      lea d, [bp + -11] ; $min_j
0411   0699 2A            mov b, [d]
0412   069A 38 00 00      mov c, 0
0413   069D             ; --- START RELATIONAL
0414   069D D7            push a
0415   069E 11            mov a, b
0416   069F FA F3 FF      lea d, [bp + -13] ; $max_j
0417   06A2 2A            mov b, [d]
0418   06A3 38 00 00      mov c, 0
0419   06A6 B0            cmp a, b
0420   06A7 FD 7F         sgt ; >
0421   06A9 E4            pop a
0422   06AA             ; --- END RELATIONAL
0423   06AA FD A8         sor a, b ; ||
0424   06AC E4            pop a
0425   06AD             ; --- END LOGICAL OR
0426   06AD C0 00 00      cmp b, 0
0427   06B0 C6 E7 06      je _if11_exit
0428   06B3             _if11_TRUE:
0429   06B3             ; moveCursor( 50       + 1, 0); 
0430   06B3             ; --- START FUNCTION CALL
0431   06B3 FD 2E 00 00   mov32 cb, $00000000
0431   06B7 00 00 
0432   06B9 FD AB         swp b
0433   06BB D8            push b
0434   06BC FD 2E 32 00   mov32 cb, $00000032
0434   06C0 00 00 
0435   06C2             ; --- START TERMS
0436   06C2 D7            push a
0437   06C3 11            mov a, b
0438   06C4 FD 2E 01 00   mov32 cb, $00000001
0438   06C8 00 00 
0439   06CA 56            add b, a
0440   06CB E4            pop a
0441   06CC             ; --- END TERMS
0442   06CC FD AB         swp b
0443   06CE D8            push b
0444   06CF 07 48 0E      call moveCursor
0445   06D2 51 04 00      add sp, 4
0446   06D5             ; --- END FUNCTION CALL
0447   06D5             ; puts("All cells dead. Press CTRL+C to quit."); 
0448   06D5             ; --- START FUNCTION CALL
0449   06D5 26 7D 2F      mov b, _s0 ; "All cells dead. Press CTRL+C to quit."
0450   06D8 FD AB         swp b
0451   06DA D8            push b
0452   06DB 07 E8 17      call puts
0453   06DE 51 02 00      add sp, 2
0454   06E1             ; --- END FUNCTION CALL
0455   06E1             ; continue; 
0456   06E1 0A 3C 0E      jmp _for3_update ; for continue
0457   06E4 0A E7 06      jmp _if11_exit
0458   06E7             _if11_exit:
0459   06E7             ; if (min_i > 1) min_i--; 
0460   06E7             _if12_cond:
0461   06E7 FA F9 FF      lea d, [bp + -7] ; $min_i
0462   06EA 2A            mov b, [d]
0463   06EB 38 00 00      mov c, 0
0464   06EE             ; --- START RELATIONAL
0465   06EE D7            push a
0466   06EF 11            mov a, b
0467   06F0 FD 2E 01 00   mov32 cb, $00000001
0467   06F4 00 00 
0468   06F6 B0            cmp a, b
0469   06F7 FD 7F         sgt ; >
0470   06F9 E4            pop a
0471   06FA             ; --- END RELATIONAL
0472   06FA C0 00 00      cmp b, 0
0473   06FD C6 13 07      je _if12_exit
0474   0700             _if12_TRUE:
0475   0700             ; min_i--; 
0476   0700 FA F9 FF      lea d, [bp + -7] ; $min_i
0477   0703 2A            mov b, [d]
0478   0704 38 00 00      mov c, 0
0479   0707 11            mov a, b
0480   0708 FD 7D         dec b
0481   070A FA F9 FF      lea d, [bp + -7] ; $min_i
0482   070D FD 43         mov [d], b
0483   070F 27            mov b, a
0484   0710 0A 13 07      jmp _if12_exit
0485   0713             _if12_exit:
0486   0713             ; if (max_i <  50       - 2) max_i++; 
0487   0713             _if13_cond:
0488   0713 FA F7 FF      lea d, [bp + -9] ; $max_i
0489   0716 2A            mov b, [d]
0490   0717 38 00 00      mov c, 0
0491   071A             ; --- START RELATIONAL
0492   071A D7            push a
0493   071B 11            mov a, b
0494   071C FD 2E 32 00   mov32 cb, $00000032
0494   0720 00 00 
0495   0722             ; --- START TERMS
0496   0722 D7            push a
0497   0723 11            mov a, b
0498   0724 FD 2E 02 00   mov32 cb, $00000002
0498   0728 00 00 
0499   072A 60            sub a, b
0500   072B 27            mov b, a
0501   072C E4            pop a
0502   072D             ; --- END TERMS
0503   072D B0            cmp a, b
0504   072E FD 73         slt ; < (signed)
0505   0730 E4            pop a
0506   0731             ; --- END RELATIONAL
0507   0731 C0 00 00      cmp b, 0
0508   0734 C6 4A 07      je _if13_exit
0509   0737             _if13_TRUE:
0510   0737             ; max_i++; 
0511   0737 FA F7 FF      lea d, [bp + -9] ; $max_i
0512   073A 2A            mov b, [d]
0513   073B 38 00 00      mov c, 0
0514   073E 11            mov a, b
0515   073F FD 77         inc b
0516   0741 FA F7 FF      lea d, [bp + -9] ; $max_i
0517   0744 FD 43         mov [d], b
0518   0746 27            mov b, a
0519   0747 0A 4A 07      jmp _if13_exit
0520   074A             _if13_exit:
0521   074A             ; if (min_j > 1) min_j--; 
0522   074A             _if14_cond:
0523   074A FA F5 FF      lea d, [bp + -11] ; $min_j
0524   074D 2A            mov b, [d]
0525   074E 38 00 00      mov c, 0
0526   0751             ; --- START RELATIONAL
0527   0751 D7            push a
0528   0752 11            mov a, b
0529   0753 FD 2E 01 00   mov32 cb, $00000001
0529   0757 00 00 
0530   0759 B0            cmp a, b
0531   075A FD 7F         sgt ; >
0532   075C E4            pop a
0533   075D             ; --- END RELATIONAL
0534   075D C0 00 00      cmp b, 0
0535   0760 C6 76 07      je _if14_exit
0536   0763             _if14_TRUE:
0537   0763             ; min_j--; 
0538   0763 FA F5 FF      lea d, [bp + -11] ; $min_j
0539   0766 2A            mov b, [d]
0540   0767 38 00 00      mov c, 0
0541   076A 11            mov a, b
0542   076B FD 7D         dec b
0543   076D FA F5 FF      lea d, [bp + -11] ; $min_j
0544   0770 FD 43         mov [d], b
0545   0772 27            mov b, a
0546   0773 0A 76 07      jmp _if14_exit
0547   0776             _if14_exit:
0548   0776             ; if (max_j <   60      - 2) max_j++; 
0549   0776             _if15_cond:
0550   0776 FA F3 FF      lea d, [bp + -13] ; $max_j
0551   0779 2A            mov b, [d]
0552   077A 38 00 00      mov c, 0
0553   077D             ; --- START RELATIONAL
0554   077D D7            push a
0555   077E 11            mov a, b
0556   077F FD 2E 3C 00   mov32 cb, $0000003c
0556   0783 00 00 
0557   0785             ; --- START TERMS
0558   0785 D7            push a
0559   0786 11            mov a, b
0560   0787 FD 2E 02 00   mov32 cb, $00000002
0560   078B 00 00 
0561   078D 60            sub a, b
0562   078E 27            mov b, a
0563   078F E4            pop a
0564   0790             ; --- END TERMS
0565   0790 B0            cmp a, b
0566   0791 FD 73         slt ; < (signed)
0567   0793 E4            pop a
0568   0794             ; --- END RELATIONAL
0569   0794 C0 00 00      cmp b, 0
0570   0797 C6 AD 07      je _if15_exit
0571   079A             _if15_TRUE:
0572   079A             ; max_j++; 
0573   079A FA F3 FF      lea d, [bp + -13] ; $max_j
0574   079D 2A            mov b, [d]
0575   079E 38 00 00      mov c, 0
0576   07A1 11            mov a, b
0577   07A2 FD 77         inc b
0578   07A4 FA F3 FF      lea d, [bp + -13] ; $max_j
0579   07A7 FD 43         mov [d], b
0580   07A9 27            mov b, a
0581   07AA 0A AD 07      jmp _if15_exit
0582   07AD             _if15_exit:
0583   07AD             ; for (i = min_i; i <= max_i; i++) { 
0584   07AD             _for16_init:
0585   07AD FA FF FF      lea d, [bp + -1] ; $i
0586   07B0 DA            push d
0587   07B1 FA F9 FF      lea d, [bp + -7] ; $min_i
0588   07B4 2A            mov b, [d]
0589   07B5 38 00 00      mov c, 0
0590   07B8 E7            pop d
0591   07B9 FD 43         mov [d], b
0592   07BB             _for16_cond:
0593   07BB FA FF FF      lea d, [bp + -1] ; $i
0594   07BE 2A            mov b, [d]
0595   07BF 38 00 00      mov c, 0
0596   07C2             ; --- START RELATIONAL
0597   07C2 D7            push a
0598   07C3 11            mov a, b
0599   07C4 FA F7 FF      lea d, [bp + -9] ; $max_i
0600   07C7 2A            mov b, [d]
0601   07C8 38 00 00      mov c, 0
0602   07CB B0            cmp a, b
0603   07CC FD 74         sle ; <= (signed)
0604   07CE E4            pop a
0605   07CF             ; --- END RELATIONAL
0606   07CF C0 00 00      cmp b, 0
0607   07D2 C6 C5 0B      je _for16_exit
0608   07D5             _for16_block:
0609   07D5             ; for (j = min_j; j <= max_j; j++) { 
0610   07D5             _for17_init:
0611   07D5 FA FD FF      lea d, [bp + -3] ; $j
0612   07D8 DA            push d
0613   07D9 FA F5 FF      lea d, [bp + -11] ; $min_j
0614   07DC 2A            mov b, [d]
0615   07DD 38 00 00      mov c, 0
0616   07E0 E7            pop d
0617   07E1 FD 43         mov [d], b
0618   07E3             _for17_cond:
0619   07E3 FA FD FF      lea d, [bp + -3] ; $j
0620   07E6 2A            mov b, [d]
0621   07E7 38 00 00      mov c, 0
0622   07EA             ; --- START RELATIONAL
0623   07EA D7            push a
0624   07EB 11            mov a, b
0625   07EC FA F3 FF      lea d, [bp + -13] ; $max_j
0626   07EF 2A            mov b, [d]
0627   07F0 38 00 00      mov c, 0
0628   07F3 B0            cmp a, b
0629   07F4 FD 74         sle ; <= (signed)
0630   07F6 E4            pop a
0631   07F7             ; --- END RELATIONAL
0632   07F7 C0 00 00      cmp b, 0
0633   07FA C6 B2 0B      je _for17_exit
0634   07FD             _for17_block:
0635   07FD             ; n = 0; 
0636   07FD FA FB FF      lea d, [bp + -5] ; $n
0637   0800 DA            push d
0638   0801 FD 2E 00 00   mov32 cb, $00000000
0638   0805 00 00 
0639   0807 E7            pop d
0640   0808 FD 43         mov [d], b
0641   080A             ; if (currState[i - 1][j - 1] == '@') n++; 
0642   080A             _if18_cond:
0643   080A 3B BE 23      mov d, _currState_data ; $currState
0644   080D D7            push a
0645   080E DA            push d
0646   080F FA FF FF      lea d, [bp + -1] ; $i
0647   0812 2A            mov b, [d]
0648   0813 38 00 00      mov c, 0
0649   0816             ; --- START TERMS
0650   0816 D7            push a
0651   0817 11            mov a, b
0652   0818 FD 2E 01 00   mov32 cb, $00000001
0652   081C 00 00 
0653   081E 60            sub a, b
0654   081F 27            mov b, a
0655   0820 E4            pop a
0656   0821             ; --- END TERMS
0657   0821 E7            pop d
0658   0822 FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
0659   0826 DA            push d
0660   0827 FA FD FF      lea d, [bp + -3] ; $j
0661   082A 2A            mov b, [d]
0662   082B 38 00 00      mov c, 0
0663   082E             ; --- START TERMS
0664   082E D7            push a
0665   082F 11            mov a, b
0666   0830 FD 2E 01 00   mov32 cb, $00000001
0666   0834 00 00 
0667   0836 60            sub a, b
0668   0837 27            mov b, a
0669   0838 E4            pop a
0670   0839             ; --- END TERMS
0671   0839 E7            pop d
0672   083A 5A            add d, b
0673   083B E4            pop a
0674   083C 32            mov bl, [d]
0675   083D A7 00         mov bh, 0
0676   083F 38 00 00      mov c, 0
0677   0842             ; --- START RELATIONAL
0678   0842 D7            push a
0679   0843 11            mov a, b
0680   0844 FD 2E 40 00   mov32 cb, $00000040
0680   0848 00 00 
0681   084A B0            cmp a, b
0682   084B FD 71         seq ; ==
0683   084D E4            pop a
0684   084E             ; --- END RELATIONAL
0685   084E C0 00 00      cmp b, 0
0686   0851 C6 67 08      je _if18_exit
0687   0854             _if18_TRUE:
0688   0854             ; n++; 
0689   0854 FA FB FF      lea d, [bp + -5] ; $n
0690   0857 2A            mov b, [d]
0691   0858 38 00 00      mov c, 0
0692   085B 11            mov a, b
0693   085C FD 77         inc b
0694   085E FA FB FF      lea d, [bp + -5] ; $n
0695   0861 FD 43         mov [d], b
0696   0863 27            mov b, a
0697   0864 0A 67 08      jmp _if18_exit
0698   0867             _if18_exit:
0699   0867             ; if (currState[i - 1][j    ] == '@') n++; 
0700   0867             _if19_cond:
0701   0867 3B BE 23      mov d, _currState_data ; $currState
0702   086A D7            push a
0703   086B DA            push d
0704   086C FA FF FF      lea d, [bp + -1] ; $i
0705   086F 2A            mov b, [d]
0706   0870 38 00 00      mov c, 0
0707   0873             ; --- START TERMS
0708   0873 D7            push a
0709   0874 11            mov a, b
0710   0875 FD 2E 01 00   mov32 cb, $00000001
0710   0879 00 00 
0711   087B 60            sub a, b
0712   087C 27            mov b, a
0713   087D E4            pop a
0714   087E             ; --- END TERMS
0715   087E E7            pop d
0716   087F FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
0717   0883 DA            push d
0718   0884 FA FD FF      lea d, [bp + -3] ; $j
0719   0887 2A            mov b, [d]
0720   0888 38 00 00      mov c, 0
0721   088B E7            pop d
0722   088C 5A            add d, b
0723   088D E4            pop a
0724   088E 32            mov bl, [d]
0725   088F A7 00         mov bh, 0
0726   0891 38 00 00      mov c, 0
0727   0894             ; --- START RELATIONAL
0728   0894 D7            push a
0729   0895 11            mov a, b
0730   0896 FD 2E 40 00   mov32 cb, $00000040
0730   089A 00 00 
0731   089C B0            cmp a, b
0732   089D FD 71         seq ; ==
0733   089F E4            pop a
0734   08A0             ; --- END RELATIONAL
0735   08A0 C0 00 00      cmp b, 0
0736   08A3 C6 B9 08      je _if19_exit
0737   08A6             _if19_TRUE:
0738   08A6             ; n++; 
0739   08A6 FA FB FF      lea d, [bp + -5] ; $n
0740   08A9 2A            mov b, [d]
0741   08AA 38 00 00      mov c, 0
0742   08AD 11            mov a, b
0743   08AE FD 77         inc b
0744   08B0 FA FB FF      lea d, [bp + -5] ; $n
0745   08B3 FD 43         mov [d], b
0746   08B5 27            mov b, a
0747   08B6 0A B9 08      jmp _if19_exit
0748   08B9             _if19_exit:
0749   08B9             ; if (currState[i - 1][j + 1] == '@') n++; 
0750   08B9             _if20_cond:
0751   08B9 3B BE 23      mov d, _currState_data ; $currState
0752   08BC D7            push a
0753   08BD DA            push d
0754   08BE FA FF FF      lea d, [bp + -1] ; $i
0755   08C1 2A            mov b, [d]
0756   08C2 38 00 00      mov c, 0
0757   08C5             ; --- START TERMS
0758   08C5 D7            push a
0759   08C6 11            mov a, b
0760   08C7 FD 2E 01 00   mov32 cb, $00000001
0760   08CB 00 00 
0761   08CD 60            sub a, b
0762   08CE 27            mov b, a
0763   08CF E4            pop a
0764   08D0             ; --- END TERMS
0765   08D0 E7            pop d
0766   08D1 FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
0767   08D5 DA            push d
0768   08D6 FA FD FF      lea d, [bp + -3] ; $j
0769   08D9 2A            mov b, [d]
0770   08DA 38 00 00      mov c, 0
0771   08DD             ; --- START TERMS
0772   08DD D7            push a
0773   08DE 11            mov a, b
0774   08DF FD 2E 01 00   mov32 cb, $00000001
0774   08E3 00 00 
0775   08E5 56            add b, a
0776   08E6 E4            pop a
0777   08E7             ; --- END TERMS
0778   08E7 E7            pop d
0779   08E8 5A            add d, b
0780   08E9 E4            pop a
0781   08EA 32            mov bl, [d]
0782   08EB A7 00         mov bh, 0
0783   08ED 38 00 00      mov c, 0
0784   08F0             ; --- START RELATIONAL
0785   08F0 D7            push a
0786   08F1 11            mov a, b
0787   08F2 FD 2E 40 00   mov32 cb, $00000040
0787   08F6 00 00 
0788   08F8 B0            cmp a, b
0789   08F9 FD 71         seq ; ==
0790   08FB E4            pop a
0791   08FC             ; --- END RELATIONAL
0792   08FC C0 00 00      cmp b, 0
0793   08FF C6 15 09      je _if20_exit
0794   0902             _if20_TRUE:
0795   0902             ; n++; 
0796   0902 FA FB FF      lea d, [bp + -5] ; $n
0797   0905 2A            mov b, [d]
0798   0906 38 00 00      mov c, 0
0799   0909 11            mov a, b
0800   090A FD 77         inc b
0801   090C FA FB FF      lea d, [bp + -5] ; $n
0802   090F FD 43         mov [d], b
0803   0911 27            mov b, a
0804   0912 0A 15 09      jmp _if20_exit
0805   0915             _if20_exit:
0806   0915             ; if (currState[i    ][j - 1] == '@') n++; 
0807   0915             _if21_cond:
0808   0915 3B BE 23      mov d, _currState_data ; $currState
0809   0918 D7            push a
0810   0919 DA            push d
0811   091A FA FF FF      lea d, [bp + -1] ; $i
0812   091D 2A            mov b, [d]
0813   091E 38 00 00      mov c, 0
0814   0921 E7            pop d
0815   0922 FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
0816   0926 DA            push d
0817   0927 FA FD FF      lea d, [bp + -3] ; $j
0818   092A 2A            mov b, [d]
0819   092B 38 00 00      mov c, 0
0820   092E             ; --- START TERMS
0821   092E D7            push a
0822   092F 11            mov a, b
0823   0930 FD 2E 01 00   mov32 cb, $00000001
0823   0934 00 00 
0824   0936 60            sub a, b
0825   0937 27            mov b, a
0826   0938 E4            pop a
0827   0939             ; --- END TERMS
0828   0939 E7            pop d
0829   093A 5A            add d, b
0830   093B E4            pop a
0831   093C 32            mov bl, [d]
0832   093D A7 00         mov bh, 0
0833   093F 38 00 00      mov c, 0
0834   0942             ; --- START RELATIONAL
0835   0942 D7            push a
0836   0943 11            mov a, b
0837   0944 FD 2E 40 00   mov32 cb, $00000040
0837   0948 00 00 
0838   094A B0            cmp a, b
0839   094B FD 71         seq ; ==
0840   094D E4            pop a
0841   094E             ; --- END RELATIONAL
0842   094E C0 00 00      cmp b, 0
0843   0951 C6 67 09      je _if21_exit
0844   0954             _if21_TRUE:
0845   0954             ; n++; 
0846   0954 FA FB FF      lea d, [bp + -5] ; $n
0847   0957 2A            mov b, [d]
0848   0958 38 00 00      mov c, 0
0849   095B 11            mov a, b
0850   095C FD 77         inc b
0851   095E FA FB FF      lea d, [bp + -5] ; $n
0852   0961 FD 43         mov [d], b
0853   0963 27            mov b, a
0854   0964 0A 67 09      jmp _if21_exit
0855   0967             _if21_exit:
0856   0967             ; if (currState[i    ][j + 1] == '@') n++; 
0857   0967             _if22_cond:
0858   0967 3B BE 23      mov d, _currState_data ; $currState
0859   096A D7            push a
0860   096B DA            push d
0861   096C FA FF FF      lea d, [bp + -1] ; $i
0862   096F 2A            mov b, [d]
0863   0970 38 00 00      mov c, 0
0864   0973 E7            pop d
0865   0974 FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
0866   0978 DA            push d
0867   0979 FA FD FF      lea d, [bp + -3] ; $j
0868   097C 2A            mov b, [d]
0869   097D 38 00 00      mov c, 0
0870   0980             ; --- START TERMS
0871   0980 D7            push a
0872   0981 11            mov a, b
0873   0982 FD 2E 01 00   mov32 cb, $00000001
0873   0986 00 00 
0874   0988 56            add b, a
0875   0989 E4            pop a
0876   098A             ; --- END TERMS
0877   098A E7            pop d
0878   098B 5A            add d, b
0879   098C E4            pop a
0880   098D 32            mov bl, [d]
0881   098E A7 00         mov bh, 0
0882   0990 38 00 00      mov c, 0
0883   0993             ; --- START RELATIONAL
0884   0993 D7            push a
0885   0994 11            mov a, b
0886   0995 FD 2E 40 00   mov32 cb, $00000040
0886   0999 00 00 
0887   099B B0            cmp a, b
0888   099C FD 71         seq ; ==
0889   099E E4            pop a
0890   099F             ; --- END RELATIONAL
0891   099F C0 00 00      cmp b, 0
0892   09A2 C6 B8 09      je _if22_exit
0893   09A5             _if22_TRUE:
0894   09A5             ; n++; 
0895   09A5 FA FB FF      lea d, [bp + -5] ; $n
0896   09A8 2A            mov b, [d]
0897   09A9 38 00 00      mov c, 0
0898   09AC 11            mov a, b
0899   09AD FD 77         inc b
0900   09AF FA FB FF      lea d, [bp + -5] ; $n
0901   09B2 FD 43         mov [d], b
0902   09B4 27            mov b, a
0903   09B5 0A B8 09      jmp _if22_exit
0904   09B8             _if22_exit:
0905   09B8             ; if (currState[i + 1][j - 1] == '@') n++; 
0906   09B8             _if23_cond:
0907   09B8 3B BE 23      mov d, _currState_data ; $currState
0908   09BB D7            push a
0909   09BC DA            push d
0910   09BD FA FF FF      lea d, [bp + -1] ; $i
0911   09C0 2A            mov b, [d]
0912   09C1 38 00 00      mov c, 0
0913   09C4             ; --- START TERMS
0914   09C4 D7            push a
0915   09C5 11            mov a, b
0916   09C6 FD 2E 01 00   mov32 cb, $00000001
0916   09CA 00 00 
0917   09CC 56            add b, a
0918   09CD E4            pop a
0919   09CE             ; --- END TERMS
0920   09CE E7            pop d
0921   09CF FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
0922   09D3 DA            push d
0923   09D4 FA FD FF      lea d, [bp + -3] ; $j
0924   09D7 2A            mov b, [d]
0925   09D8 38 00 00      mov c, 0
0926   09DB             ; --- START TERMS
0927   09DB D7            push a
0928   09DC 11            mov a, b
0929   09DD FD 2E 01 00   mov32 cb, $00000001
0929   09E1 00 00 
0930   09E3 60            sub a, b
0931   09E4 27            mov b, a
0932   09E5 E4            pop a
0933   09E6             ; --- END TERMS
0934   09E6 E7            pop d
0935   09E7 5A            add d, b
0936   09E8 E4            pop a
0937   09E9 32            mov bl, [d]
0938   09EA A7 00         mov bh, 0
0939   09EC 38 00 00      mov c, 0
0940   09EF             ; --- START RELATIONAL
0941   09EF D7            push a
0942   09F0 11            mov a, b
0943   09F1 FD 2E 40 00   mov32 cb, $00000040
0943   09F5 00 00 
0944   09F7 B0            cmp a, b
0945   09F8 FD 71         seq ; ==
0946   09FA E4            pop a
0947   09FB             ; --- END RELATIONAL
0948   09FB C0 00 00      cmp b, 0
0949   09FE C6 14 0A      je _if23_exit
0950   0A01             _if23_TRUE:
0951   0A01             ; n++; 
0952   0A01 FA FB FF      lea d, [bp + -5] ; $n
0953   0A04 2A            mov b, [d]
0954   0A05 38 00 00      mov c, 0
0955   0A08 11            mov a, b
0956   0A09 FD 77         inc b
0957   0A0B FA FB FF      lea d, [bp + -5] ; $n
0958   0A0E FD 43         mov [d], b
0959   0A10 27            mov b, a
0960   0A11 0A 14 0A      jmp _if23_exit
0961   0A14             _if23_exit:
0962   0A14             ; if (currState[i + 1][j    ] == '@') n++; 
0963   0A14             _if24_cond:
0964   0A14 3B BE 23      mov d, _currState_data ; $currState
0965   0A17 D7            push a
0966   0A18 DA            push d
0967   0A19 FA FF FF      lea d, [bp + -1] ; $i
0968   0A1C 2A            mov b, [d]
0969   0A1D 38 00 00      mov c, 0
0970   0A20             ; --- START TERMS
0971   0A20 D7            push a
0972   0A21 11            mov a, b
0973   0A22 FD 2E 01 00   mov32 cb, $00000001
0973   0A26 00 00 
0974   0A28 56            add b, a
0975   0A29 E4            pop a
0976   0A2A             ; --- END TERMS
0977   0A2A E7            pop d
0978   0A2B FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
0979   0A2F DA            push d
0980   0A30 FA FD FF      lea d, [bp + -3] ; $j
0981   0A33 2A            mov b, [d]
0982   0A34 38 00 00      mov c, 0
0983   0A37 E7            pop d
0984   0A38 5A            add d, b
0985   0A39 E4            pop a
0986   0A3A 32            mov bl, [d]
0987   0A3B A7 00         mov bh, 0
0988   0A3D 38 00 00      mov c, 0
0989   0A40             ; --- START RELATIONAL
0990   0A40 D7            push a
0991   0A41 11            mov a, b
0992   0A42 FD 2E 40 00   mov32 cb, $00000040
0992   0A46 00 00 
0993   0A48 B0            cmp a, b
0994   0A49 FD 71         seq ; ==
0995   0A4B E4            pop a
0996   0A4C             ; --- END RELATIONAL
0997   0A4C C0 00 00      cmp b, 0
0998   0A4F C6 65 0A      je _if24_exit
0999   0A52             _if24_TRUE:
1000   0A52             ; n++; 
1001   0A52 FA FB FF      lea d, [bp + -5] ; $n
1002   0A55 2A            mov b, [d]
1003   0A56 38 00 00      mov c, 0
1004   0A59 11            mov a, b
1005   0A5A FD 77         inc b
1006   0A5C FA FB FF      lea d, [bp + -5] ; $n
1007   0A5F FD 43         mov [d], b
1008   0A61 27            mov b, a
1009   0A62 0A 65 0A      jmp _if24_exit
1010   0A65             _if24_exit:
1011   0A65             ; if (currState[i + 1][j + 1] == '@') n++; 
1012   0A65             _if25_cond:
1013   0A65 3B BE 23      mov d, _currState_data ; $currState
1014   0A68 D7            push a
1015   0A69 DA            push d
1016   0A6A FA FF FF      lea d, [bp + -1] ; $i
1017   0A6D 2A            mov b, [d]
1018   0A6E 38 00 00      mov c, 0
1019   0A71             ; --- START TERMS
1020   0A71 D7            push a
1021   0A72 11            mov a, b
1022   0A73 FD 2E 01 00   mov32 cb, $00000001
1022   0A77 00 00 
1023   0A79 56            add b, a
1024   0A7A E4            pop a
1025   0A7B             ; --- END TERMS
1026   0A7B E7            pop d
1027   0A7C FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
1028   0A80 DA            push d
1029   0A81 FA FD FF      lea d, [bp + -3] ; $j
1030   0A84 2A            mov b, [d]
1031   0A85 38 00 00      mov c, 0
1032   0A88             ; --- START TERMS
1033   0A88 D7            push a
1034   0A89 11            mov a, b
1035   0A8A FD 2E 01 00   mov32 cb, $00000001
1035   0A8E 00 00 
1036   0A90 56            add b, a
1037   0A91 E4            pop a
1038   0A92             ; --- END TERMS
1039   0A92 E7            pop d
1040   0A93 5A            add d, b
1041   0A94 E4            pop a
1042   0A95 32            mov bl, [d]
1043   0A96 A7 00         mov bh, 0
1044   0A98 38 00 00      mov c, 0
1045   0A9B             ; --- START RELATIONAL
1046   0A9B D7            push a
1047   0A9C 11            mov a, b
1048   0A9D FD 2E 40 00   mov32 cb, $00000040
1048   0AA1 00 00 
1049   0AA3 B0            cmp a, b
1050   0AA4 FD 71         seq ; ==
1051   0AA6 E4            pop a
1052   0AA7             ; --- END RELATIONAL
1053   0AA7 C0 00 00      cmp b, 0
1054   0AAA C6 C0 0A      je _if25_exit
1055   0AAD             _if25_TRUE:
1056   0AAD             ; n++; 
1057   0AAD FA FB FF      lea d, [bp + -5] ; $n
1058   0AB0 2A            mov b, [d]
1059   0AB1 38 00 00      mov c, 0
1060   0AB4 11            mov a, b
1061   0AB5 FD 77         inc b
1062   0AB7 FA FB FF      lea d, [bp + -5] ; $n
1063   0ABA FD 43         mov [d], b
1064   0ABC 27            mov b, a
1065   0ABD 0A C0 0A      jmp _if25_exit
1066   0AC0             _if25_exit:
1067   0AC0             ; if (currState[i][j] == '@') { 
1068   0AC0             _if26_cond:
1069   0AC0 3B BE 23      mov d, _currState_data ; $currState
1070   0AC3 D7            push a
1071   0AC4 DA            push d
1072   0AC5 FA FF FF      lea d, [bp + -1] ; $i
1073   0AC8 2A            mov b, [d]
1074   0AC9 38 00 00      mov c, 0
1075   0ACC E7            pop d
1076   0ACD FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
1077   0AD1 DA            push d
1078   0AD2 FA FD FF      lea d, [bp + -3] ; $j
1079   0AD5 2A            mov b, [d]
1080   0AD6 38 00 00      mov c, 0
1081   0AD9 E7            pop d
1082   0ADA 5A            add d, b
1083   0ADB E4            pop a
1084   0ADC 32            mov bl, [d]
1085   0ADD A7 00         mov bh, 0
1086   0ADF 38 00 00      mov c, 0
1087   0AE2             ; --- START RELATIONAL
1088   0AE2 D7            push a
1089   0AE3 11            mov a, b
1090   0AE4 FD 2E 40 00   mov32 cb, $00000040
1090   0AE8 00 00 
1091   0AEA B0            cmp a, b
1092   0AEB FD 71         seq ; ==
1093   0AED E4            pop a
1094   0AEE             ; --- END RELATIONAL
1095   0AEE C0 00 00      cmp b, 0
1096   0AF1 C6 57 0B      je _if26_else
1097   0AF4             _if26_TRUE:
1098   0AF4             ; nextState[i][j] = (n < 2 || n > 3) ? ' ' : '@'; 
1099   0AF4 3B 06 18      mov d, _nextState_data ; $nextState
1100   0AF7 D7            push a
1101   0AF8 DA            push d
1102   0AF9 FA FF FF      lea d, [bp + -1] ; $i
1103   0AFC 2A            mov b, [d]
1104   0AFD 38 00 00      mov c, 0
1105   0B00 E7            pop d
1106   0B01 FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
1107   0B05 DA            push d
1108   0B06 FA FD FF      lea d, [bp + -3] ; $j
1109   0B09 2A            mov b, [d]
1110   0B0A 38 00 00      mov c, 0
1111   0B0D E7            pop d
1112   0B0E 5A            add d, b
1113   0B0F E4            pop a
1114   0B10 DA            push d
1115   0B11             _ternary27_cond:
1116   0B11 FA FB FF      lea d, [bp + -5] ; $n
1117   0B14 2A            mov b, [d]
1118   0B15 38 00 00      mov c, 0
1119   0B18             ; --- START RELATIONAL
1120   0B18 D7            push a
1121   0B19 11            mov a, b
1122   0B1A FD 2E 02 00   mov32 cb, $00000002
1122   0B1E 00 00 
1123   0B20 B0            cmp a, b
1124   0B21 FD 73         slt ; < (signed)
1125   0B23 E4            pop a
1126   0B24             ; --- END RELATIONAL
1127   0B24             ; --- START LOGICAL OR
1128   0B24 D7            push a
1129   0B25 11            mov a, b
1130   0B26 FA FB FF      lea d, [bp + -5] ; $n
1131   0B29 2A            mov b, [d]
1132   0B2A 38 00 00      mov c, 0
1133   0B2D             ; --- START RELATIONAL
1134   0B2D D7            push a
1135   0B2E 11            mov a, b
1136   0B2F FD 2E 03 00   mov32 cb, $00000003
1136   0B33 00 00 
1137   0B35 B0            cmp a, b
1138   0B36 FD 7F         sgt ; >
1139   0B38 E4            pop a
1140   0B39             ; --- END RELATIONAL
1141   0B39 FD A8         sor a, b ; ||
1142   0B3B E4            pop a
1143   0B3C             ; --- END LOGICAL OR
1144   0B3C C0 00 00      cmp b, 0
1145   0B3F C6 4B 0B      je _ternary27_FALSE
1146   0B42             _ternary27_TRUE:
1147   0B42 FD 2E 20 00   mov32 cb, $00000020
1147   0B46 00 00 
1148   0B48 0A 51 0B      jmp _ternary27_exit
1149   0B4B             _ternary27_FALSE:
1150   0B4B FD 2E 40 00   mov32 cb, $00000040
1150   0B4F 00 00 
1151   0B51             _ternary27_exit:
1152   0B51 E7            pop d
1153   0B52 FD 3E         mov [d], bl
1154   0B54 0A 9F 0B      jmp _if26_exit
1155   0B57             _if26_else:
1156   0B57             ; nextState[i][j] = (n == 3) ? '@' : ' '; 
1157   0B57 3B 06 18      mov d, _nextState_data ; $nextState
1158   0B5A D7            push a
1159   0B5B DA            push d
1160   0B5C FA FF FF      lea d, [bp + -1] ; $i
1161   0B5F 2A            mov b, [d]
1162   0B60 38 00 00      mov c, 0
1163   0B63 E7            pop d
1164   0B64 FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
1165   0B68 DA            push d
1166   0B69 FA FD FF      lea d, [bp + -3] ; $j
1167   0B6C 2A            mov b, [d]
1168   0B6D 38 00 00      mov c, 0
1169   0B70 E7            pop d
1170   0B71 5A            add d, b
1171   0B72 E4            pop a
1172   0B73 DA            push d
1173   0B74             _ternary28_cond:
1174   0B74 FA FB FF      lea d, [bp + -5] ; $n
1175   0B77 2A            mov b, [d]
1176   0B78 38 00 00      mov c, 0
1177   0B7B             ; --- START RELATIONAL
1178   0B7B D7            push a
1179   0B7C 11            mov a, b
1180   0B7D FD 2E 03 00   mov32 cb, $00000003
1180   0B81 00 00 
1181   0B83 B0            cmp a, b
1182   0B84 FD 71         seq ; ==
1183   0B86 E4            pop a
1184   0B87             ; --- END RELATIONAL
1185   0B87 C0 00 00      cmp b, 0
1186   0B8A C6 96 0B      je _ternary28_FALSE
1187   0B8D             _ternary28_TRUE:
1188   0B8D FD 2E 40 00   mov32 cb, $00000040
1188   0B91 00 00 
1189   0B93 0A 9C 0B      jmp _ternary28_exit
1190   0B96             _ternary28_FALSE:
1191   0B96 FD 2E 20 00   mov32 cb, $00000020
1191   0B9A 00 00 
1192   0B9C             _ternary28_exit:
1193   0B9C E7            pop d
1194   0B9D FD 3E         mov [d], bl
1195   0B9F             _if26_exit:
1196   0B9F             _for17_update:
1197   0B9F FA FD FF      lea d, [bp + -3] ; $j
1198   0BA2 2A            mov b, [d]
1199   0BA3 38 00 00      mov c, 0
1200   0BA6 11            mov a, b
1201   0BA7 FD 77         inc b
1202   0BA9 FA FD FF      lea d, [bp + -3] ; $j
1203   0BAC FD 43         mov [d], b
1204   0BAE 27            mov b, a
1205   0BAF 0A E3 07      jmp _for17_cond
1206   0BB2             _for17_exit:
1207   0BB2             _for16_update:
1208   0BB2 FA FF FF      lea d, [bp + -1] ; $i
1209   0BB5 2A            mov b, [d]
1210   0BB6 38 00 00      mov c, 0
1211   0BB9 11            mov a, b
1212   0BBA FD 77         inc b
1213   0BBC FA FF FF      lea d, [bp + -1] ; $i
1214   0BBF FD 43         mov [d], b
1215   0BC1 27            mov b, a
1216   0BC2 0A BB 07      jmp _for16_cond
1217   0BC5             _for16_exit:
1218   0BC5             ; for (i = min_i; i <= max_i; i++) { 
1219   0BC5             _for29_init:
1220   0BC5 FA FF FF      lea d, [bp + -1] ; $i
1221   0BC8 DA            push d
1222   0BC9 FA F9 FF      lea d, [bp + -7] ; $min_i
1223   0BCC 2A            mov b, [d]
1224   0BCD 38 00 00      mov c, 0
1225   0BD0 E7            pop d
1226   0BD1 FD 43         mov [d], b
1227   0BD3             _for29_cond:
1228   0BD3 FA FF FF      lea d, [bp + -1] ; $i
1229   0BD6 2A            mov b, [d]
1230   0BD7 38 00 00      mov c, 0
1231   0BDA             ; --- START RELATIONAL
1232   0BDA D7            push a
1233   0BDB 11            mov a, b
1234   0BDC FA F7 FF      lea d, [bp + -9] ; $max_i
1235   0BDF 2A            mov b, [d]
1236   0BE0 38 00 00      mov c, 0
1237   0BE3 B0            cmp a, b
1238   0BE4 FD 74         sle ; <= (signed)
1239   0BE6 E4            pop a
1240   0BE7             ; --- END RELATIONAL
1241   0BE7 C0 00 00      cmp b, 0
1242   0BEA C6 56 0D      je _for29_exit
1243   0BED             _for29_block:
1244   0BED             ; int row_changed = 0; 
1245   0BED 52 02 00      sub sp, 2
1246   0BF0             ; --- START LOCAL VAR INITIALIZATION
1247   0BF0 FA F1 FF      lea d, [bp + -15] ; $row_changed
1248   0BF3 DA            push d
1249   0BF4 FD 2E 00 00   mov32 cb, $00000000
1249   0BF8 00 00 
1250   0BFA E7            pop d
1251   0BFB FD 43         mov [d], b
1252   0BFD             ; --- END LOCAL VAR INITIALIZATION
1253   0BFD             ; for (j = min_j; j <= max_j; j++) { 
1254   0BFD             _for30_init:
1255   0BFD FA FD FF      lea d, [bp + -3] ; $j
1256   0C00 DA            push d
1257   0C01 FA F5 FF      lea d, [bp + -11] ; $min_j
1258   0C04 2A            mov b, [d]
1259   0C05 38 00 00      mov c, 0
1260   0C08 E7            pop d
1261   0C09 FD 43         mov [d], b
1262   0C0B             _for30_cond:
1263   0C0B FA FD FF      lea d, [bp + -3] ; $j
1264   0C0E 2A            mov b, [d]
1265   0C0F 38 00 00      mov c, 0
1266   0C12             ; --- START RELATIONAL
1267   0C12 D7            push a
1268   0C13 11            mov a, b
1269   0C14 FA F3 FF      lea d, [bp + -13] ; $max_j
1270   0C17 2A            mov b, [d]
1271   0C18 38 00 00      mov c, 0
1272   0C1B B0            cmp a, b
1273   0C1C FD 74         sle ; <= (signed)
1274   0C1E E4            pop a
1275   0C1F             ; --- END RELATIONAL
1276   0C1F C0 00 00      cmp b, 0
1277   0C22 C6 43 0D      je _for30_exit
1278   0C25             _for30_block:
1279   0C25             ; if (currState[i][j] != nextState[i][j]) { 
1280   0C25             _if31_cond:
1281   0C25 3B BE 23      mov d, _currState_data ; $currState
1282   0C28 D7            push a
1283   0C29 DA            push d
1284   0C2A FA FF FF      lea d, [bp + -1] ; $i
1285   0C2D 2A            mov b, [d]
1286   0C2E 38 00 00      mov c, 0
1287   0C31 E7            pop d
1288   0C32 FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
1289   0C36 DA            push d
1290   0C37 FA FD FF      lea d, [bp + -3] ; $j
1291   0C3A 2A            mov b, [d]
1292   0C3B 38 00 00      mov c, 0
1293   0C3E E7            pop d
1294   0C3F 5A            add d, b
1295   0C40 E4            pop a
1296   0C41 32            mov bl, [d]
1297   0C42 A7 00         mov bh, 0
1298   0C44 38 00 00      mov c, 0
1299   0C47             ; --- START RELATIONAL
1300   0C47 D7            push a
1301   0C48 11            mov a, b
1302   0C49 3B 06 18      mov d, _nextState_data ; $nextState
1303   0C4C D7            push a
1304   0C4D DA            push d
1305   0C4E FA FF FF      lea d, [bp + -1] ; $i
1306   0C51 2A            mov b, [d]
1307   0C52 38 00 00      mov c, 0
1308   0C55 E7            pop d
1309   0C56 FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
1310   0C5A DA            push d
1311   0C5B FA FD FF      lea d, [bp + -3] ; $j
1312   0C5E 2A            mov b, [d]
1313   0C5F 38 00 00      mov c, 0
1314   0C62 E7            pop d
1315   0C63 5A            add d, b
1316   0C64 E4            pop a
1317   0C65 32            mov bl, [d]
1318   0C66 A7 00         mov bh, 0
1319   0C68 38 00 00      mov c, 0
1320   0C6B B0            cmp a, b
1321   0C6C FD 72         sneq ; !=
1322   0C6E E4            pop a
1323   0C6F             ; --- END RELATIONAL
1324   0C6F C0 00 00      cmp b, 0
1325   0C72 C6 06 0D      je _if31_else
1326   0C75             _if31_TRUE:
1327   0C75             ; if (!row_changed) { 
1328   0C75             _if32_cond:
1329   0C75 FA F1 FF      lea d, [bp + -15] ; $row_changed
1330   0C78 2A            mov b, [d]
1331   0C79 38 00 00      mov c, 0
1332   0C7C C0 00 00      cmp b, 0
1333   0C7F C6 AC 0C      je _if32_exit
1334   0C82             _if32_TRUE:
1335   0C82             ; moveCursor(i, min_j); 
1336   0C82             ; --- START FUNCTION CALL
1337   0C82 FA F5 FF      lea d, [bp + -11] ; $min_j
1338   0C85 2A            mov b, [d]
1339   0C86 38 00 00      mov c, 0
1340   0C89 FD AB         swp b
1341   0C8B D8            push b
1342   0C8C FA FF FF      lea d, [bp + -1] ; $i
1343   0C8F 2A            mov b, [d]
1344   0C90 38 00 00      mov c, 0
1345   0C93 FD AB         swp b
1346   0C95 D8            push b
1347   0C96 07 48 0E      call moveCursor
1348   0C99 51 04 00      add sp, 4
1349   0C9C             ; --- END FUNCTION CALL
1350   0C9C             ; row_changed = 1; 
1351   0C9C FA F1 FF      lea d, [bp + -15] ; $row_changed
1352   0C9F DA            push d
1353   0CA0 FD 2E 01 00   mov32 cb, $00000001
1353   0CA4 00 00 
1354   0CA6 E7            pop d
1355   0CA7 FD 43         mov [d], b
1356   0CA9 0A AC 0C      jmp _if32_exit
1357   0CAC             _if32_exit:
1358   0CAC             ; putchar(nextState[i][j] == '@' ? '@' : ' '); 
1359   0CAC             ; --- START FUNCTION CALL
1360   0CAC             _ternary34_cond:
1361   0CAC 3B 06 18      mov d, _nextState_data ; $nextState
1362   0CAF D7            push a
1363   0CB0 DA            push d
1364   0CB1 FA FF FF      lea d, [bp + -1] ; $i
1365   0CB4 2A            mov b, [d]
1366   0CB5 38 00 00      mov c, 0
1367   0CB8 E7            pop d
1368   0CB9 FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
1369   0CBD DA            push d
1370   0CBE FA FD FF      lea d, [bp + -3] ; $j
1371   0CC1 2A            mov b, [d]
1372   0CC2 38 00 00      mov c, 0
1373   0CC5 E7            pop d
1374   0CC6 5A            add d, b
1375   0CC7 E4            pop a
1376   0CC8 32            mov bl, [d]
1377   0CC9 A7 00         mov bh, 0
1378   0CCB 38 00 00      mov c, 0
1379   0CCE             ; --- START RELATIONAL
1380   0CCE D7            push a
1381   0CCF 11            mov a, b
1382   0CD0 FD 2E 40 00   mov32 cb, $00000040
1382   0CD4 00 00 
1383   0CD6 B0            cmp a, b
1384   0CD7 FD 71         seq ; ==
1385   0CD9 E4            pop a
1386   0CDA             ; --- END RELATIONAL
1387   0CDA C0 00 00      cmp b, 0
1388   0CDD C6 E9 0C      je _ternary34_FALSE
1389   0CE0             _ternary34_TRUE:
1390   0CE0 FD 2E 40 00   mov32 cb, $00000040
1390   0CE4 00 00 
1391   0CE6 0A EF 0C      jmp _ternary34_exit
1392   0CE9             _ternary34_FALSE:
1393   0CE9 FD 2E 20 00   mov32 cb, $00000020
1393   0CED 00 00 
1394   0CEF             _ternary34_exit:
1395   0CEF DD            push bl
1396   0CF0 07 53 13      call putchar
1397   0CF3 51 01 00      add sp, 1
1398   0CF6             ; --- END FUNCTION CALL
1399   0CF6             ; putchar(' '); 
1400   0CF6             ; --- START FUNCTION CALL
1401   0CF6 FD 2E 20 00   mov32 cb, $00000020
1401   0CFA 00 00 
1402   0CFC DD            push bl
1403   0CFD 07 53 13      call putchar
1404   0D00 51 01 00      add sp, 1
1405   0D03             ; --- END FUNCTION CALL
1406   0D03 0A 30 0D      jmp _if31_exit
1407   0D06             _if31_else:
1408   0D06             ; if (row_changed) { 
1409   0D06             _if35_cond:
1410   0D06 FA F1 FF      lea d, [bp + -15] ; $row_changed
1411   0D09 2A            mov b, [d]
1412   0D0A 38 00 00      mov c, 0
1413   0D0D C0 00 00      cmp b, 0
1414   0D10 C6 30 0D      je _if35_exit
1415   0D13             _if35_TRUE:
1416   0D13             ; putchar(' '); 
1417   0D13             ; --- START FUNCTION CALL
1418   0D13 FD 2E 20 00   mov32 cb, $00000020
1418   0D17 00 00 
1419   0D19 DD            push bl
1420   0D1A 07 53 13      call putchar
1421   0D1D 51 01 00      add sp, 1
1422   0D20             ; --- END FUNCTION CALL
1423   0D20             ; putchar(' '); 
1424   0D20             ; --- START FUNCTION CALL
1425   0D20 FD 2E 20 00   mov32 cb, $00000020
1425   0D24 00 00 
1426   0D26 DD            push bl
1427   0D27 07 53 13      call putchar
1428   0D2A 51 01 00      add sp, 1
1429   0D2D             ; --- END FUNCTION CALL
1430   0D2D 0A 30 0D      jmp _if35_exit
1431   0D30             _if35_exit:
1432   0D30             _if31_exit:
1433   0D30             _for30_update:
1434   0D30 FA FD FF      lea d, [bp + -3] ; $j
1435   0D33 2A            mov b, [d]
1436   0D34 38 00 00      mov c, 0
1437   0D37 11            mov a, b
1438   0D38 FD 77         inc b
1439   0D3A FA FD FF      lea d, [bp + -3] ; $j
1440   0D3D FD 43         mov [d], b
1441   0D3F 27            mov b, a
1442   0D40 0A 0B 0C      jmp _for30_cond
1443   0D43             _for30_exit:
1444   0D43             _for29_update:
1445   0D43 FA FF FF      lea d, [bp + -1] ; $i
1446   0D46 2A            mov b, [d]
1447   0D47 38 00 00      mov c, 0
1448   0D4A 11            mov a, b
1449   0D4B FD 77         inc b
1450   0D4D FA FF FF      lea d, [bp + -1] ; $i
1451   0D50 FD 43         mov [d], b
1452   0D52 27            mov b, a
1453   0D53 0A D3 0B      jmp _for29_cond
1454   0D56             _for29_exit:
1455   0D56             ; for (i = min_i; i <= max_i; i++) 
1456   0D56             _for36_init:
1457   0D56 FA FF FF      lea d, [bp + -1] ; $i
1458   0D59 DA            push d
1459   0D5A FA F9 FF      lea d, [bp + -7] ; $min_i
1460   0D5D 2A            mov b, [d]
1461   0D5E 38 00 00      mov c, 0
1462   0D61 E7            pop d
1463   0D62 FD 43         mov [d], b
1464   0D64             _for36_cond:
1465   0D64 FA FF FF      lea d, [bp + -1] ; $i
1466   0D67 2A            mov b, [d]
1467   0D68 38 00 00      mov c, 0
1468   0D6B             ; --- START RELATIONAL
1469   0D6B D7            push a
1470   0D6C 11            mov a, b
1471   0D6D FA F7 FF      lea d, [bp + -9] ; $max_i
1472   0D70 2A            mov b, [d]
1473   0D71 38 00 00      mov c, 0
1474   0D74 B0            cmp a, b
1475   0D75 FD 74         sle ; <= (signed)
1476   0D77 E4            pop a
1477   0D78             ; --- END RELATIONAL
1478   0D78 C0 00 00      cmp b, 0
1479   0D7B C6 0E 0E      je _for36_exit
1480   0D7E             _for36_block:
1481   0D7E             ; for (j = min_j; j <= max_j; j++) 
1482   0D7E             _for37_init:
1483   0D7E FA FD FF      lea d, [bp + -3] ; $j
1484   0D81 DA            push d
1485   0D82 FA F5 FF      lea d, [bp + -11] ; $min_j
1486   0D85 2A            mov b, [d]
1487   0D86 38 00 00      mov c, 0
1488   0D89 E7            pop d
1489   0D8A FD 43         mov [d], b
1490   0D8C             _for37_cond:
1491   0D8C FA FD FF      lea d, [bp + -3] ; $j
1492   0D8F 2A            mov b, [d]
1493   0D90 38 00 00      mov c, 0
1494   0D93             ; --- START RELATIONAL
1495   0D93 D7            push a
1496   0D94 11            mov a, b
1497   0D95 FA F3 FF      lea d, [bp + -13] ; $max_j
1498   0D98 2A            mov b, [d]
1499   0D99 38 00 00      mov c, 0
1500   0D9C B0            cmp a, b
1501   0D9D FD 74         sle ; <= (signed)
1502   0D9F E4            pop a
1503   0DA0             ; --- END RELATIONAL
1504   0DA0 C0 00 00      cmp b, 0
1505   0DA3 C6 FB 0D      je _for37_exit
1506   0DA6             _for37_block:
1507   0DA6             ; currState[i][j] = nextState[i][j]; 
1508   0DA6 3B BE 23      mov d, _currState_data ; $currState
1509   0DA9 D7            push a
1510   0DAA DA            push d
1511   0DAB FA FF FF      lea d, [bp + -1] ; $i
1512   0DAE 2A            mov b, [d]
1513   0DAF 38 00 00      mov c, 0
1514   0DB2 E7            pop d
1515   0DB3 FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
1516   0DB7 DA            push d
1517   0DB8 FA FD FF      lea d, [bp + -3] ; $j
1518   0DBB 2A            mov b, [d]
1519   0DBC 38 00 00      mov c, 0
1520   0DBF E7            pop d
1521   0DC0 5A            add d, b
1522   0DC1 E4            pop a
1523   0DC2 DA            push d
1524   0DC3 3B 06 18      mov d, _nextState_data ; $nextState
1525   0DC6 D7            push a
1526   0DC7 DA            push d
1527   0DC8 FA FF FF      lea d, [bp + -1] ; $i
1528   0DCB 2A            mov b, [d]
1529   0DCC 38 00 00      mov c, 0
1530   0DCF E7            pop d
1531   0DD0 FD 13 3C 00   mma 60 ; mov a, 60; mul a, b; add d, b
1532   0DD4 DA            push d
1533   0DD5 FA FD FF      lea d, [bp + -3] ; $j
1534   0DD8 2A            mov b, [d]
1535   0DD9 38 00 00      mov c, 0
1536   0DDC E7            pop d
1537   0DDD 5A            add d, b
1538   0DDE E4            pop a
1539   0DDF 32            mov bl, [d]
1540   0DE0 A7 00         mov bh, 0
1541   0DE2 38 00 00      mov c, 0
1542   0DE5 E7            pop d
1543   0DE6 FD 3E         mov [d], bl
1544   0DE8             _for37_update:
1545   0DE8 FA FD FF      lea d, [bp + -3] ; $j
1546   0DEB 2A            mov b, [d]
1547   0DEC 38 00 00      mov c, 0
1548   0DEF 11            mov a, b
1549   0DF0 FD 77         inc b
1550   0DF2 FA FD FF      lea d, [bp + -3] ; $j
1551   0DF5 FD 43         mov [d], b
1552   0DF7 27            mov b, a
1553   0DF8 0A 8C 0D      jmp _for37_cond
1554   0DFB             _for37_exit:
1555   0DFB             _for36_update:
1556   0DFB FA FF FF      lea d, [bp + -1] ; $i
1557   0DFE 2A            mov b, [d]
1558   0DFF 38 00 00      mov c, 0
1559   0E02 11            mov a, b
1560   0E03 FD 77         inc b
1561   0E05 FA FF FF      lea d, [bp + -1] ; $i
1562   0E08 FD 43         mov [d], b
1563   0E0A 27            mov b, a
1564   0E0B 0A 64 0D      jmp _for36_cond
1565   0E0E             _for36_exit:
1566   0E0E             ; moveCursor( 50       + 1, 0); 
1567   0E0E             ; --- START FUNCTION CALL
1568   0E0E FD 2E 00 00   mov32 cb, $00000000
1568   0E12 00 00 
1569   0E14 FD AB         swp b
1570   0E16 D8            push b
1571   0E17 FD 2E 32 00   mov32 cb, $00000032
1571   0E1B 00 00 
1572   0E1D             ; --- START TERMS
1573   0E1D D7            push a
1574   0E1E 11            mov a, b
1575   0E1F FD 2E 01 00   mov32 cb, $00000001
1575   0E23 00 00 
1576   0E25 56            add b, a
1577   0E26 E4            pop a
1578   0E27             ; --- END TERMS
1579   0E27 FD AB         swp b
1580   0E29 D8            push b
1581   0E2A 07 48 0E      call moveCursor
1582   0E2D 51 04 00      add sp, 4
1583   0E30             ; --- END FUNCTION CALL
1584   0E30             ; puts("Press CTRL+C to quit."); 
1585   0E30             ; --- START FUNCTION CALL
1586   0E30 26 A3 2F      mov b, _s1 ; "Press CTRL+C to quit."
1587   0E33 FD AB         swp b
1588   0E35 D8            push b
1589   0E36 07 E8 17      call puts
1590   0E39 51 02 00      add sp, 2
1591   0E3C             ; --- END FUNCTION CALL
1592   0E3C             _for3_update:
1593   0E3C 0A D5 04      jmp _for3_cond
1594   0E3F             _for3_exit:
1595   0E3F             ; return 0; 
1596   0E3F FD 2E 00 00   mov32 cb, $00000000
1596   0E43 00 00 
1597   0E45 F9            leave
1598   0E46 05 0B         syscall sys_terminate_proc
1599   0E48             
1600   0E48             moveCursor:
1601   0E48 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1602   0E4B             ; printf("\033[%d;%dH", row + 1, col * 2 + 1);  // 1-based ANSI cursor 
1603   0E4B             ; --- START FUNCTION CALL
1604   0E4B FA 07 00      lea d, [bp + 7] ; $col
1605   0E4E 2A            mov b, [d]
1606   0E4F 38 00 00      mov c, 0
1607   0E52             ; --- START FACTORS
1608   0E52 D7            push a
1609   0E53 FD D8         push g
1610   0E55 11            mov a, b
1611   0E56 FD 7A         mov g, c
1612   0E58 FD 2E 02 00   mov32 cb, $00000002
1612   0E5C 00 00 
1613   0E5E D7            push a     ; save left operand
1614   0E5F 8E            xor a, b   ; xor sign bits
1615   0E60 FD AA         swp a      ; swap bytes
1616   0E62 83            mov cl, al ; save result of xor into 'dl'
1617   0E63 E4            pop a      ; restore left side operator
1618   0E64 DF            push cl    ; save result of xor above
1619   0E65 FD AA         swp a  
1620   0E67 93 80         test al, $80  
1621   0E69 FD AA         swp a  
1622   0E6B C6 70 0E      jz skip_invert_a_41  
1623   0E6E FD 95         neg a 
1624   0E70             skip_invert_a_41:   
1625   0E70 FD AB         swp b
1626   0E72 FD 93 80      test bl, $80  
1627   0E75 FD AB         swp b
1628   0E77 C6 7C 0E      jz skip_invert_b_41  
1629   0E7A FD 97         neg b 
1630   0E7C             skip_invert_b_41:   
1631   0E7C AC            mul a, b ; *
1632   0E7D FD 78         mov g, a
1633   0E7F 11            mov a, b
1634   0E80 EA            pop bl
1635   0E81 FD 93 80      test bl, $80
1636   0E84 C6 91 0E      jz _same_signs_41
1637   0E87 2F            mov bl, al
1638   0E88 95            not a
1639   0E89 FD 97         neg b
1640   0E8B 5B 00 00      adc a, 0
1641   0E8E FD 78         mov g, a
1642   0E90 11            mov a, b
1643   0E91             _same_signs_41:
1644   0E91 FD 38         mov c, g
1645   0E93 27            mov b, a
1646   0E94 FD F1         pop g
1647   0E96 E4            pop a
1648   0E97             ; --- END FACTORS
1649   0E97             ; --- START TERMS
1650   0E97 D7            push a
1651   0E98 FD D8         push g
1652   0E9A 11            mov a, b
1653   0E9B FD 7A         mov g, c
1654   0E9D FD 2E 01 00   mov32 cb, $00000001
1654   0EA1 00 00 
1655   0EA3 38 00 00      mov c, 0
1656   0EA6 FD 15         add32 cb, ga
1657   0EA8 FD F1         pop g
1658   0EAA E4            pop a
1659   0EAB             ; --- END TERMS
1660   0EAB 12            mov a, c
1661   0EAC FD AA         swp a
1662   0EAE D7            push a
1663   0EAF FD AB         swp b
1664   0EB1 D8            push b
1665   0EB2 FA 05 00      lea d, [bp + 5] ; $row
1666   0EB5 2A            mov b, [d]
1667   0EB6 38 00 00      mov c, 0
1668   0EB9             ; --- START TERMS
1669   0EB9 D7            push a
1670   0EBA 11            mov a, b
1671   0EBB FD 2E 01 00   mov32 cb, $00000001
1671   0EBF 00 00 
1672   0EC1 56            add b, a
1673   0EC2 E4            pop a
1674   0EC3             ; --- END TERMS
1675   0EC3 FD AB         swp b
1676   0EC5 D8            push b
1677   0EC6 26 B9 2F      mov b, _s2 ; "\033[%d;%dH"
1678   0EC9 FD AB         swp b
1679   0ECB D8            push b
1680   0ECC 07 D4 0E      call printf
1681   0ECF 51 08 00      add sp, 8
1682   0ED2             ; --- END FUNCTION CALL
1683   0ED2 F9            leave
1684   0ED3 09            ret
1685   0ED4             
1686   0ED4             printf:
1687   0ED4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1688   0ED7             ; char *p, *format_p; 
1689   0ED7 52 02 00      sub sp, 2
1690   0EDA 52 02 00      sub sp, 2
1691   0EDD             ; format_p = format; 
1692   0EDD FA FD FF      lea d, [bp + -3] ; $format_p
1693   0EE0 DA            push d
1694   0EE1 FA 05 00      lea d, [bp + 5] ; $format
1695   0EE4 2A            mov b, [d]
1696   0EE5 38 00 00      mov c, 0
1697   0EE8 E7            pop d
1698   0EE9 FD 43         mov [d], b
1699   0EEB             ; p = &format + 2; 
1700   0EEB FA FF FF      lea d, [bp + -1] ; $p
1701   0EEE DA            push d
1702   0EEF FA 05 00      lea d, [bp + 5] ; $format
1703   0EF2 2D            mov b, d
1704   0EF3             ; --- START TERMS
1705   0EF3 D7            push a
1706   0EF4 11            mov a, b
1707   0EF5 FD 2E 02 00   mov32 cb, $00000002
1707   0EF9 00 00 
1708   0EFB 56            add b, a
1709   0EFC E4            pop a
1710   0EFD             ; --- END TERMS
1711   0EFD E7            pop d
1712   0EFE FD 43         mov [d], b
1713   0F00             ; for(;;){ 
1714   0F00             _for42_init:
1715   0F00             _for42_cond:
1716   0F00             _for42_block:
1717   0F00             ; if(!*format_p) break; 
1718   0F00             _if43_cond:
1719   0F00 FA FD FF      lea d, [bp + -3] ; $format_p
1720   0F03 2A            mov b, [d]
1721   0F04 38 00 00      mov c, 0
1722   0F07 74            mov d, b
1723   0F08 32            mov bl, [d]
1724   0F09 A7 00         mov bh, 0
1725   0F0B 38 00 00      mov c, 0
1726   0F0E C0 00 00      cmp b, 0
1727   0F11 FD 71         seq ; !
1728   0F13 C0 00 00      cmp b, 0
1729   0F16 C6 1F 0F      je _if43_else
1730   0F19             _if43_TRUE:
1731   0F19             ; break; 
1732   0F19 0A BF 11      jmp _for42_exit ; for break
1733   0F1C 0A AC 11      jmp _if43_exit
1734   0F1F             _if43_else:
1735   0F1F             ; if(*format_p == '%'){ 
1736   0F1F             _if44_cond:
1737   0F1F FA FD FF      lea d, [bp + -3] ; $format_p
1738   0F22 2A            mov b, [d]
1739   0F23 38 00 00      mov c, 0
1740   0F26 74            mov d, b
1741   0F27 32            mov bl, [d]
1742   0F28 A7 00         mov bh, 0
1743   0F2A 38 00 00      mov c, 0
1744   0F2D             ; --- START RELATIONAL
1745   0F2D D7            push a
1746   0F2E 11            mov a, b
1747   0F2F FD 2E 25 00   mov32 cb, $00000025
1747   0F33 00 00 
1748   0F35 B0            cmp a, b
1749   0F36 FD 71         seq ; ==
1750   0F38 E4            pop a
1751   0F39             ; --- END RELATIONAL
1752   0F39 C0 00 00      cmp b, 0
1753   0F3C C6 97 11      je _if44_else
1754   0F3F             _if44_TRUE:
1755   0F3F             ; format_p++; 
1756   0F3F FA FD FF      lea d, [bp + -3] ; $format_p
1757   0F42 2A            mov b, [d]
1758   0F43 38 00 00      mov c, 0
1759   0F46 FD 77         inc b
1760   0F48 FA FD FF      lea d, [bp + -3] ; $format_p
1761   0F4B FD 43         mov [d], b
1762   0F4D FD 7D         dec b
1763   0F4F             ; switch(*format_p){ 
1764   0F4F             _switch45_expr:
1765   0F4F FA FD FF      lea d, [bp + -3] ; $format_p
1766   0F52 2A            mov b, [d]
1767   0F53 38 00 00      mov c, 0
1768   0F56 74            mov d, b
1769   0F57 32            mov bl, [d]
1770   0F58 A7 00         mov bh, 0
1771   0F5A 38 00 00      mov c, 0
1772   0F5D             _switch45_comparisons:
1773   0F5D C1 6C         cmp bl, $6c
1774   0F5F C6 8B 0F      je _switch45_case0
1775   0F62 C1 4C         cmp bl, $4c
1776   0F64 C6 8B 0F      je _switch45_case1
1777   0F67 C1 64         cmp bl, $64
1778   0F69 C6 9B 10      je _switch45_case2
1779   0F6C C1 69         cmp bl, $69
1780   0F6E C6 9B 10      je _switch45_case3
1781   0F71 C1 75         cmp bl, $75
1782   0F73 C6 CB 10      je _switch45_case4
1783   0F76 C1 78         cmp bl, $78
1784   0F78 C6 FB 10      je _switch45_case5
1785   0F7B C1 63         cmp bl, $63
1786   0F7D C6 2B 11      je _switch45_case6
1787   0F80 C1 73         cmp bl, $73
1788   0F82 C6 5B 11      je _switch45_case7
1789   0F85 0A 88 11      jmp _switch45_default
1790   0F88 0A 94 11      jmp _switch45_exit
1791   0F8B             _switch45_case0:
1792   0F8B             _switch45_case1:
1793   0F8B             ; format_p++; 
1794   0F8B FA FD FF      lea d, [bp + -3] ; $format_p
1795   0F8E 2A            mov b, [d]
1796   0F8F 38 00 00      mov c, 0
1797   0F92 FD 77         inc b
1798   0F94 FA FD FF      lea d, [bp + -3] ; $format_p
1799   0F97 FD 43         mov [d], b
1800   0F99 FD 7D         dec b
1801   0F9B             ; if(*format_p == 'd' || *format_p == 'i') 
1802   0F9B             _if46_cond:
1803   0F9B FA FD FF      lea d, [bp + -3] ; $format_p
1804   0F9E 2A            mov b, [d]
1805   0F9F 38 00 00      mov c, 0
1806   0FA2 74            mov d, b
1807   0FA3 32            mov bl, [d]
1808   0FA4 A7 00         mov bh, 0
1809   0FA6 38 00 00      mov c, 0
1810   0FA9             ; --- START RELATIONAL
1811   0FA9 D7            push a
1812   0FAA 11            mov a, b
1813   0FAB FD 2E 64 00   mov32 cb, $00000064
1813   0FAF 00 00 
1814   0FB1 B0            cmp a, b
1815   0FB2 FD 71         seq ; ==
1816   0FB4 E4            pop a
1817   0FB5             ; --- END RELATIONAL
1818   0FB5             ; --- START LOGICAL OR
1819   0FB5 D7            push a
1820   0FB6 11            mov a, b
1821   0FB7 FA FD FF      lea d, [bp + -3] ; $format_p
1822   0FBA 2A            mov b, [d]
1823   0FBB 38 00 00      mov c, 0
1824   0FBE 74            mov d, b
1825   0FBF 32            mov bl, [d]
1826   0FC0 A7 00         mov bh, 0
1827   0FC2 38 00 00      mov c, 0
1828   0FC5             ; --- START RELATIONAL
1829   0FC5 D7            push a
1830   0FC6 11            mov a, b
1831   0FC7 FD 2E 69 00   mov32 cb, $00000069
1831   0FCB 00 00 
1832   0FCD B0            cmp a, b
1833   0FCE FD 71         seq ; ==
1834   0FD0 E4            pop a
1835   0FD1             ; --- END RELATIONAL
1836   0FD1 FD A8         sor a, b ; ||
1837   0FD3 E4            pop a
1838   0FD4             ; --- END LOGICAL OR
1839   0FD4 C0 00 00      cmp b, 0
1840   0FD7 C6 F8 0F      je _if46_else
1841   0FDA             _if46_TRUE:
1842   0FDA             ; print_signed_long(*(long *)p); 
1843   0FDA             ; --- START FUNCTION CALL
1844   0FDA FA FF FF      lea d, [bp + -1] ; $p
1845   0FDD 2A            mov b, [d]
1846   0FDE 38 00 00      mov c, 0
1847   0FE1 74            mov d, b
1848   0FE2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1849   0FE5 FD 39         mov c, b ; And place it into C
1850   0FE7 2A            mov b, [d] ; Lower Word in B
1851   0FE8 12            mov a, c
1852   0FE9 FD AA         swp a
1853   0FEB D7            push a
1854   0FEC FD AB         swp b
1855   0FEE D8            push b
1856   0FEF 07 C1 11      call print_signed_long
1857   0FF2 51 04 00      add sp, 4
1858   0FF5             ; --- END FUNCTION CALL
1859   0FF5 0A 80 10      jmp _if46_exit
1860   0FF8             _if46_else:
1861   0FF8             ; if(*format_p == 'u') 
1862   0FF8             _if47_cond:
1863   0FF8 FA FD FF      lea d, [bp + -3] ; $format_p
1864   0FFB 2A            mov b, [d]
1865   0FFC 38 00 00      mov c, 0
1866   0FFF 74            mov d, b
1867   1000 32            mov bl, [d]
1868   1001 A7 00         mov bh, 0
1869   1003 38 00 00      mov c, 0
1870   1006             ; --- START RELATIONAL
1871   1006 D7            push a
1872   1007 11            mov a, b
1873   1008 FD 2E 75 00   mov32 cb, $00000075
1873   100C 00 00 
1874   100E B0            cmp a, b
1875   100F FD 71         seq ; ==
1876   1011 E4            pop a
1877   1012             ; --- END RELATIONAL
1878   1012 C0 00 00      cmp b, 0
1879   1015 C6 36 10      je _if47_else
1880   1018             _if47_TRUE:
1881   1018             ; print_unsigned_long(*(unsigned long *)p); 
1882   1018             ; --- START FUNCTION CALL
1883   1018 FA FF FF      lea d, [bp + -1] ; $p
1884   101B 2A            mov b, [d]
1885   101C 38 00 00      mov c, 0
1886   101F 74            mov d, b
1887   1020 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1888   1023 FD 39         mov c, b ; And place it into C
1889   1025 2A            mov b, [d] ; Lower Word in B
1890   1026 12            mov a, c
1891   1027 FD AA         swp a
1892   1029 D7            push a
1893   102A FD AB         swp b
1894   102C D8            push b
1895   102D 07 61 13      call print_unsigned_long
1896   1030 51 04 00      add sp, 4
1897   1033             ; --- END FUNCTION CALL
1898   1033 0A 80 10      jmp _if47_exit
1899   1036             _if47_else:
1900   1036             ; if(*format_p == 'x') 
1901   1036             _if48_cond:
1902   1036 FA FD FF      lea d, [bp + -3] ; $format_p
1903   1039 2A            mov b, [d]
1904   103A 38 00 00      mov c, 0
1905   103D 74            mov d, b
1906   103E 32            mov bl, [d]
1907   103F A7 00         mov bh, 0
1908   1041 38 00 00      mov c, 0
1909   1044             ; --- START RELATIONAL
1910   1044 D7            push a
1911   1045 11            mov a, b
1912   1046 FD 2E 78 00   mov32 cb, $00000078
1912   104A 00 00 
1913   104C B0            cmp a, b
1914   104D FD 71         seq ; ==
1915   104F E4            pop a
1916   1050             ; --- END RELATIONAL
1917   1050 C0 00 00      cmp b, 0
1918   1053 C6 74 10      je _if48_else
1919   1056             _if48_TRUE:
1920   1056             ; printx32(*(long int *)p); 
1921   1056             ; --- START FUNCTION CALL
1922   1056 FA FF FF      lea d, [bp + -1] ; $p
1923   1059 2A            mov b, [d]
1924   105A 38 00 00      mov c, 0
1925   105D 74            mov d, b
1926   105E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1927   1061 FD 39         mov c, b ; And place it into C
1928   1063 2A            mov b, [d] ; Lower Word in B
1929   1064 12            mov a, c
1930   1065 FD AA         swp a
1931   1067 D7            push a
1932   1068 FD AB         swp b
1933   106A D8            push b
1934   106B 07 9F 14      call printx32
1935   106E 51 04 00      add sp, 4
1936   1071             ; --- END FUNCTION CALL
1937   1071 0A 80 10      jmp _if48_exit
1938   1074             _if48_else:
1939   1074             ; err("Unexpected format in printf."); 
1940   1074             ; --- START FUNCTION CALL
1941   1074 26 C2 2F      mov b, _s3 ; "Unexpected format in printf."
1942   1077 FD AB         swp b
1943   1079 D8            push b
1944   107A 07 FF 14      call err
1945   107D 51 02 00      add sp, 2
1946   1080             ; --- END FUNCTION CALL
1947   1080             _if48_exit:
1948   1080             _if47_exit:
1949   1080             _if46_exit:
1950   1080             ; p = p + 4; 
1951   1080 FA FF FF      lea d, [bp + -1] ; $p
1952   1083 DA            push d
1953   1084 FA FF FF      lea d, [bp + -1] ; $p
1954   1087 2A            mov b, [d]
1955   1088 38 00 00      mov c, 0
1956   108B             ; --- START TERMS
1957   108B D7            push a
1958   108C 11            mov a, b
1959   108D FD 2E 04 00   mov32 cb, $00000004
1959   1091 00 00 
1960   1093 56            add b, a
1961   1094 E4            pop a
1962   1095             ; --- END TERMS
1963   1095 E7            pop d
1964   1096 FD 43         mov [d], b
1965   1098             ; break; 
1966   1098 0A 94 11      jmp _switch45_exit ; case break
1967   109B             _switch45_case2:
1968   109B             _switch45_case3:
1969   109B             ; print_signed(*(int*)p); 
1970   109B             ; --- START FUNCTION CALL
1971   109B FA FF FF      lea d, [bp + -1] ; $p
1972   109E 2A            mov b, [d]
1973   109F 38 00 00      mov c, 0
1974   10A2 74            mov d, b
1975   10A3 2A            mov b, [d]
1976   10A4 38 00 00      mov c, 0
1977   10A7 FD AB         swp b
1978   10A9 D8            push b
1979   10AA 07 2D 15      call print_signed
1980   10AD 51 02 00      add sp, 2
1981   10B0             ; --- END FUNCTION CALL
1982   10B0             ; p = p + 2; 
1983   10B0 FA FF FF      lea d, [bp + -1] ; $p
1984   10B3 DA            push d
1985   10B4 FA FF FF      lea d, [bp + -1] ; $p
1986   10B7 2A            mov b, [d]
1987   10B8 38 00 00      mov c, 0
1988   10BB             ; --- START TERMS
1989   10BB D7            push a
1990   10BC 11            mov a, b
1991   10BD FD 2E 02 00   mov32 cb, $00000002
1991   10C1 00 00 
1992   10C3 56            add b, a
1993   10C4 E4            pop a
1994   10C5             ; --- END TERMS
1995   10C5 E7            pop d
1996   10C6 FD 43         mov [d], b
1997   10C8             ; break; 
1998   10C8 0A 94 11      jmp _switch45_exit ; case break
1999   10CB             _switch45_case4:
2000   10CB             ; print_unsigned(*(unsigned int*)p); 
2001   10CB             ; --- START FUNCTION CALL
2002   10CB FA FF FF      lea d, [bp + -1] ; $p
2003   10CE 2A            mov b, [d]
2004   10CF 38 00 00      mov c, 0
2005   10D2 74            mov d, b
2006   10D3 2A            mov b, [d]
2007   10D4 38 00 00      mov c, 0
2008   10D7 FD AB         swp b
2009   10D9 D8            push b
2010   10DA 07 7E 16      call print_unsigned
2011   10DD 51 02 00      add sp, 2
2012   10E0             ; --- END FUNCTION CALL
2013   10E0             ; p = p + 2; 
2014   10E0 FA FF FF      lea d, [bp + -1] ; $p
2015   10E3 DA            push d
2016   10E4 FA FF FF      lea d, [bp + -1] ; $p
2017   10E7 2A            mov b, [d]
2018   10E8 38 00 00      mov c, 0
2019   10EB             ; --- START TERMS
2020   10EB D7            push a
2021   10EC 11            mov a, b
2022   10ED FD 2E 02 00   mov32 cb, $00000002
2022   10F1 00 00 
2023   10F3 56            add b, a
2024   10F4 E4            pop a
2025   10F5             ; --- END TERMS
2026   10F5 E7            pop d
2027   10F6 FD 43         mov [d], b
2028   10F8             ; break; 
2029   10F8 0A 94 11      jmp _switch45_exit ; case break
2030   10FB             _switch45_case5:
2031   10FB             ; printx16(*(int*)p); 
2032   10FB             ; --- START FUNCTION CALL
2033   10FB FA FF FF      lea d, [bp + -1] ; $p
2034   10FE 2A            mov b, [d]
2035   10FF 38 00 00      mov c, 0
2036   1102 74            mov d, b
2037   1103 2A            mov b, [d]
2038   1104 38 00 00      mov c, 0
2039   1107 FD AB         swp b
2040   1109 D8            push b
2041   110A 07 96 17      call printx16
2042   110D 51 02 00      add sp, 2
2043   1110             ; --- END FUNCTION CALL
2044   1110             ; p = p + 2; 
2045   1110 FA FF FF      lea d, [bp + -1] ; $p
2046   1113 DA            push d
2047   1114 FA FF FF      lea d, [bp + -1] ; $p
2048   1117 2A            mov b, [d]
2049   1118 38 00 00      mov c, 0
2050   111B             ; --- START TERMS
2051   111B D7            push a
2052   111C 11            mov a, b
2053   111D FD 2E 02 00   mov32 cb, $00000002
2053   1121 00 00 
2054   1123 56            add b, a
2055   1124 E4            pop a
2056   1125             ; --- END TERMS
2057   1125 E7            pop d
2058   1126 FD 43         mov [d], b
2059   1128             ; break; 
2060   1128 0A 94 11      jmp _switch45_exit ; case break
2061   112B             _switch45_case6:
2062   112B             ; putchar(*(char*)p); 
2063   112B             ; --- START FUNCTION CALL
2064   112B FA FF FF      lea d, [bp + -1] ; $p
2065   112E 2A            mov b, [d]
2066   112F 38 00 00      mov c, 0
2067   1132 74            mov d, b
2068   1133 32            mov bl, [d]
2069   1134 A7 00         mov bh, 0
2070   1136 38 00 00      mov c, 0
2071   1139 DD            push bl
2072   113A 07 53 13      call putchar
2073   113D 51 01 00      add sp, 1
2074   1140             ; --- END FUNCTION CALL
2075   1140             ; p = p + 2; 
2076   1140 FA FF FF      lea d, [bp + -1] ; $p
2077   1143 DA            push d
2078   1144 FA FF FF      lea d, [bp + -1] ; $p
2079   1147 2A            mov b, [d]
2080   1148 38 00 00      mov c, 0
2081   114B             ; --- START TERMS
2082   114B D7            push a
2083   114C 11            mov a, b
2084   114D FD 2E 02 00   mov32 cb, $00000002
2084   1151 00 00 
2085   1153 56            add b, a
2086   1154 E4            pop a
2087   1155             ; --- END TERMS
2088   1155 E7            pop d
2089   1156 FD 43         mov [d], b
2090   1158             ; break; 
2091   1158 0A 94 11      jmp _switch45_exit ; case break
2092   115B             _switch45_case7:
2093   115B             ; print(*(char**)p); 
2094   115B             ; --- START FUNCTION CALL
2095   115B FA FF FF      lea d, [bp + -1] ; $p
2096   115E 2A            mov b, [d]
2097   115F 38 00 00      mov c, 0
2098   1162 74            mov d, b
2099   1163 2A            mov b, [d]
2100   1164 FD AB         swp b
2101   1166 D8            push b
2102   1167 07 14 15      call print
2103   116A 51 02 00      add sp, 2
2104   116D             ; --- END FUNCTION CALL
2105   116D             ; p = p + 2; 
2106   116D FA FF FF      lea d, [bp + -1] ; $p
2107   1170 DA            push d
2108   1171 FA FF FF      lea d, [bp + -1] ; $p
2109   1174 2A            mov b, [d]
2110   1175 38 00 00      mov c, 0
2111   1178             ; --- START TERMS
2112   1178 D7            push a
2113   1179 11            mov a, b
2114   117A FD 2E 02 00   mov32 cb, $00000002
2114   117E 00 00 
2115   1180 56            add b, a
2116   1181 E4            pop a
2117   1182             ; --- END TERMS
2118   1182 E7            pop d
2119   1183 FD 43         mov [d], b
2120   1185             ; break; 
2121   1185 0A 94 11      jmp _switch45_exit ; case break
2122   1188             _switch45_default:
2123   1188             ; print("Error: Unknown argument type.\n"); 
2124   1188             ; --- START FUNCTION CALL
2125   1188 26 DF 2F      mov b, _s4 ; "Error: Unknown argument type.\n"
2126   118B FD AB         swp b
2127   118D D8            push b
2128   118E 07 14 15      call print
2129   1191 51 02 00      add sp, 2
2130   1194             ; --- END FUNCTION CALL
2131   1194             _switch45_exit:
2132   1194 0A AC 11      jmp _if44_exit
2133   1197             _if44_else:
2134   1197             ; putchar(*format_p); 
2135   1197             ; --- START FUNCTION CALL
2136   1197 FA FD FF      lea d, [bp + -3] ; $format_p
2137   119A 2A            mov b, [d]
2138   119B 38 00 00      mov c, 0
2139   119E 74            mov d, b
2140   119F 32            mov bl, [d]
2141   11A0 A7 00         mov bh, 0
2142   11A2 38 00 00      mov c, 0
2143   11A5 DD            push bl
2144   11A6 07 53 13      call putchar
2145   11A9 51 01 00      add sp, 1
2146   11AC             ; --- END FUNCTION CALL
2147   11AC             _if44_exit:
2148   11AC             _if43_exit:
2149   11AC             ; format_p++; 
2150   11AC FA FD FF      lea d, [bp + -3] ; $format_p
2151   11AF 2A            mov b, [d]
2152   11B0 38 00 00      mov c, 0
2153   11B3 FD 77         inc b
2154   11B5 FA FD FF      lea d, [bp + -3] ; $format_p
2155   11B8 FD 43         mov [d], b
2156   11BA FD 7D         dec b
2157   11BC             _for42_update:
2158   11BC 0A 00 0F      jmp _for42_cond
2159   11BF             _for42_exit:
2160   11BF F9            leave
2161   11C0 09            ret
2162   11C1             
2163   11C1             print_signed_long:
2164   11C1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2165   11C4             ; char digits[10]; 
2166   11C4 52 0A 00      sub sp, 10
2167   11C7             ; int i = 0; 
2168   11C7 52 02 00      sub sp, 2
2169   11CA             ; --- START LOCAL VAR INITIALIZATION
2170   11CA FA F5 FF      lea d, [bp + -11] ; $i
2171   11CD DA            push d
2172   11CE FD 2E 00 00   mov32 cb, $00000000
2172   11D2 00 00 
2173   11D4 E7            pop d
2174   11D5 FD 43         mov [d], b
2175   11D7             ; --- END LOCAL VAR INITIALIZATION
2176   11D7             ; if (num < 0) { 
2177   11D7             _if49_cond:
2178   11D7 FA 05 00      lea d, [bp + 5] ; $num
2179   11DA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2180   11DD FD 39         mov c, b ; And place it into C
2181   11DF 2A            mov b, [d] ; Lower Word in B
2182   11E0             ; --- START RELATIONAL
2183   11E0 D7            push a
2184   11E1 FD D8         push g
2185   11E3 11            mov a, b
2186   11E4 FD 7A         mov g, c
2187   11E6 FD 2E 00 00   mov32 cb, $00000000
2187   11EA 00 00 
2188   11EC 38 00 00      mov c, 0
2189   11EF FD AF         cmp32 ga, cb
2190   11F1 FD 73         slt ; <
2191   11F3 FD F1         pop g
2192   11F5 E4            pop a
2193   11F6             ; --- END RELATIONAL
2194   11F6 C0 00 00      cmp b, 0
2195   11F9 C6 2B 12      je _if49_else
2196   11FC             _if49_TRUE:
2197   11FC             ; putchar('-'); 
2198   11FC             ; --- START FUNCTION CALL
2199   11FC FD 2E 2D 00   mov32 cb, $0000002d
2199   1200 00 00 
2200   1202 DD            push bl
2201   1203 07 53 13      call putchar
2202   1206 51 01 00      add sp, 1
2203   1209             ; --- END FUNCTION CALL
2204   1209             ; num = -num; 
2205   1209 FA 05 00      lea d, [bp + 5] ; $num
2206   120C DA            push d
2207   120D FA 05 00      lea d, [bp + 5] ; $num
2208   1210 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2209   1213 FD 39         mov c, b ; And place it into C
2210   1215 2A            mov b, [d] ; Lower Word in B
2211   1216 12            mov a, c
2212   1217 95            not a
2213   1218 97            not b
2214   1219 55 01 00      add b, 1
2215   121C 5B 00 00      adc a, 0
2216   121F 39            mov c, a
2217   1220 E7            pop d
2218   1221 FD 43         mov [d], b
2219   1223 28            mov b, c
2220   1224 FD 44 02 00   mov [d + 2], b
2221   1228 0A 62 12      jmp _if49_exit
2222   122B             _if49_else:
2223   122B             ; if (num == 0) { 
2224   122B             _if50_cond:
2225   122B FA 05 00      lea d, [bp + 5] ; $num
2226   122E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2227   1231 FD 39         mov c, b ; And place it into C
2228   1233 2A            mov b, [d] ; Lower Word in B
2229   1234             ; --- START RELATIONAL
2230   1234 D7            push a
2231   1235 FD D8         push g
2232   1237 11            mov a, b
2233   1238 FD 7A         mov g, c
2234   123A FD 2E 00 00   mov32 cb, $00000000
2234   123E 00 00 
2235   1240 38 00 00      mov c, 0
2236   1243 FD AF         cmp32 ga, cb
2237   1245 FD 71         seq ; ==
2238   1247 FD F1         pop g
2239   1249 E4            pop a
2240   124A             ; --- END RELATIONAL
2241   124A C0 00 00      cmp b, 0
2242   124D C6 62 12      je _if50_exit
2243   1250             _if50_TRUE:
2244   1250             ; putchar('0'); 
2245   1250             ; --- START FUNCTION CALL
2246   1250 FD 2E 30 00   mov32 cb, $00000030
2246   1254 00 00 
2247   1256 DD            push bl
2248   1257 07 53 13      call putchar
2249   125A 51 01 00      add sp, 1
2250   125D             ; --- END FUNCTION CALL
2251   125D             ; return; 
2252   125D F9            leave
2253   125E 09            ret
2254   125F 0A 62 12      jmp _if50_exit
2255   1262             _if50_exit:
2256   1262             _if49_exit:
2257   1262             ; while (num > 0) { 
2258   1262             _while51_cond:
2259   1262 FA 05 00      lea d, [bp + 5] ; $num
2260   1265 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2261   1268 FD 39         mov c, b ; And place it into C
2262   126A 2A            mov b, [d] ; Lower Word in B
2263   126B             ; --- START RELATIONAL
2264   126B D7            push a
2265   126C FD D8         push g
2266   126E 11            mov a, b
2267   126F FD 7A         mov g, c
2268   1271 FD 2E 00 00   mov32 cb, $00000000
2268   1275 00 00 
2269   1277 38 00 00      mov c, 0
2270   127A FD AF         cmp32 ga, cb
2271   127C FD 7F         sgt
2272   127E FD F1         pop g
2273   1280 E4            pop a
2274   1281             ; --- END RELATIONAL
2275   1281 C0 00 00      cmp b, 0
2276   1284 C6 09 13      je _while51_exit
2277   1287             _while51_block:
2278   1287             ; digits[i] = '0' + (num % 10); 
2279   1287 FA F7 FF      lea d, [bp + -9] ; $digits
2280   128A D7            push a
2281   128B DA            push d
2282   128C FA F5 FF      lea d, [bp + -11] ; $i
2283   128F 2A            mov b, [d]
2284   1290 38 00 00      mov c, 0
2285   1293 E7            pop d
2286   1294 5A            add d, b
2287   1295 E4            pop a
2288   1296 DA            push d
2289   1297 FD 2E 30 00   mov32 cb, $00000030
2289   129B 00 00 
2290   129D             ; --- START TERMS
2291   129D D7            push a
2292   129E 11            mov a, b
2293   129F FA 05 00      lea d, [bp + 5] ; $num
2294   12A2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2295   12A5 FD 39         mov c, b ; And place it into C
2296   12A7 2A            mov b, [d] ; Lower Word in B
2297   12A8             ; --- START FACTORS
2298   12A8 D7            push a
2299   12A9 FD D8         push g
2300   12AB 11            mov a, b
2301   12AC FD 7A         mov g, c
2302   12AE FD 2E 0A 00   mov32 cb, $0000000a
2302   12B2 00 00 
2303   12B4 FD D8         push g ; save 'g' as the div instruction uses it
2304   12B6 AE            div a, b ; %, a: quotient, b: remainder
2305   12B7 11            mov a, b
2306   12B8 FD F1         pop g
2307   12BA FD 38         mov c, g
2308   12BC 27            mov b, a
2309   12BD FD F1         pop g
2310   12BF E4            pop a
2311   12C0             ; --- END FACTORS
2312   12C0 FD 22 00 00   mov g, 0
2313   12C4 FD 15         add32 cb, ga
2314   12C6 E4            pop a
2315   12C7             ; --- END TERMS
2316   12C7 E7            pop d
2317   12C8 FD 3E         mov [d], bl
2318   12CA             ; num = num / 10; 
2319   12CA FA 05 00      lea d, [bp + 5] ; $num
2320   12CD DA            push d
2321   12CE FA 05 00      lea d, [bp + 5] ; $num
2322   12D1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2323   12D4 FD 39         mov c, b ; And place it into C
2324   12D6 2A            mov b, [d] ; Lower Word in B
2325   12D7             ; --- START FACTORS
2326   12D7 D7            push a
2327   12D8 FD D8         push g
2328   12DA 11            mov a, b
2329   12DB FD 7A         mov g, c
2330   12DD FD 2E 0A 00   mov32 cb, $0000000a
2330   12E1 00 00 
2331   12E3 FD D8         push g ; save 'g' as the div instruction uses it
2332   12E5 AE            div a, b ; /, a: quotient, b: remainder
2333   12E6 FD F1         pop g
2334   12E8 FD 38         mov c, g
2335   12EA 27            mov b, a
2336   12EB FD F1         pop g
2337   12ED E4            pop a
2338   12EE             ; --- END FACTORS
2339   12EE E7            pop d
2340   12EF FD 43         mov [d], b
2341   12F1 28            mov b, c
2342   12F2 FD 44 02 00   mov [d + 2], b
2343   12F6             ; i++; 
2344   12F6 FA F5 FF      lea d, [bp + -11] ; $i
2345   12F9 2A            mov b, [d]
2346   12FA 38 00 00      mov c, 0
2347   12FD 11            mov a, b
2348   12FE FD 77         inc b
2349   1300 FA F5 FF      lea d, [bp + -11] ; $i
2350   1303 FD 43         mov [d], b
2351   1305 27            mov b, a
2352   1306 0A 62 12      jmp _while51_cond
2353   1309             _while51_exit:
2354   1309             ; while (i > 0) { 
2355   1309             _while58_cond:
2356   1309 FA F5 FF      lea d, [bp + -11] ; $i
2357   130C 2A            mov b, [d]
2358   130D 38 00 00      mov c, 0
2359   1310             ; --- START RELATIONAL
2360   1310 D7            push a
2361   1311 11            mov a, b
2362   1312 FD 2E 00 00   mov32 cb, $00000000
2362   1316 00 00 
2363   1318 B0            cmp a, b
2364   1319 FD 7F         sgt ; >
2365   131B E4            pop a
2366   131C             ; --- END RELATIONAL
2367   131C C0 00 00      cmp b, 0
2368   131F C6 51 13      je _while58_exit
2369   1322             _while58_block:
2370   1322             ; i--; 
2371   1322 FA F5 FF      lea d, [bp + -11] ; $i
2372   1325 2A            mov b, [d]
2373   1326 38 00 00      mov c, 0
2374   1329 11            mov a, b
2375   132A FD 7D         dec b
2376   132C FA F5 FF      lea d, [bp + -11] ; $i
2377   132F FD 43         mov [d], b
2378   1331 27            mov b, a
2379   1332             ; putchar(digits[i]); 
2380   1332             ; --- START FUNCTION CALL
2381   1332 FA F7 FF      lea d, [bp + -9] ; $digits
2382   1335 D7            push a
2383   1336 DA            push d
2384   1337 FA F5 FF      lea d, [bp + -11] ; $i
2385   133A 2A            mov b, [d]
2386   133B 38 00 00      mov c, 0
2387   133E E7            pop d
2388   133F 5A            add d, b
2389   1340 E4            pop a
2390   1341 32            mov bl, [d]
2391   1342 A7 00         mov bh, 0
2392   1344 38 00 00      mov c, 0
2393   1347 DD            push bl
2394   1348 07 53 13      call putchar
2395   134B 51 01 00      add sp, 1
2396   134E             ; --- END FUNCTION CALL
2397   134E 0A 09 13      jmp _while58_cond
2398   1351             _while58_exit:
2399   1351 F9            leave
2400   1352 09            ret
2401   1353             
2402   1353             putchar:
2403   1353 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2404   1356             ; --- BEGIN INLINE ASM SEGMENT
2405   1356 FA 05 00      lea d, [bp + 5] ; $c
2406   1359 1E            mov al, [d]
2407   135A 23            mov ah, al
2408   135B 19 00         mov al, 0
2409   135D 05 03         syscall sys_io      ; char in AH
2410   135F             ; --- END INLINE ASM SEGMENT
2411   135F F9            leave
2412   1360 09            ret
2413   1361             
2414   1361             print_unsigned_long:
2415   1361 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2416   1364             ; char digits[10]; 
2417   1364 52 0A 00      sub sp, 10
2418   1367             ; int i; 
2419   1367 52 02 00      sub sp, 2
2420   136A             ; i = 0; 
2421   136A FA F5 FF      lea d, [bp + -11] ; $i
2422   136D DA            push d
2423   136E FD 2E 00 00   mov32 cb, $00000000
2423   1372 00 00 
2424   1374 E7            pop d
2425   1375 FD 43         mov [d], b
2426   1377             ; if(num == 0){ 
2427   1377             _if59_cond:
2428   1377 FA 05 00      lea d, [bp + 5] ; $num
2429   137A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2430   137D FD 39         mov c, b ; And place it into C
2431   137F 2A            mov b, [d] ; Lower Word in B
2432   1380             ; --- START RELATIONAL
2433   1380 D7            push a
2434   1381 FD D8         push g
2435   1383 11            mov a, b
2436   1384 FD 7A         mov g, c
2437   1386 FD 2E 00 00   mov32 cb, $00000000
2437   138A 00 00 
2438   138C 38 00 00      mov c, 0
2439   138F FD AF         cmp32 ga, cb
2440   1391 FD 71         seq ; ==
2441   1393 FD F1         pop g
2442   1395 E4            pop a
2443   1396             ; --- END RELATIONAL
2444   1396 C0 00 00      cmp b, 0
2445   1399 C6 AE 13      je _if59_exit
2446   139C             _if59_TRUE:
2447   139C             ; putchar('0'); 
2448   139C             ; --- START FUNCTION CALL
2449   139C FD 2E 30 00   mov32 cb, $00000030
2449   13A0 00 00 
2450   13A2 DD            push bl
2451   13A3 07 53 13      call putchar
2452   13A6 51 01 00      add sp, 1
2453   13A9             ; --- END FUNCTION CALL
2454   13A9             ; return; 
2455   13A9 F9            leave
2456   13AA 09            ret
2457   13AB 0A AE 13      jmp _if59_exit
2458   13AE             _if59_exit:
2459   13AE             ; while (num > 0) { 
2460   13AE             _while60_cond:
2461   13AE FA 05 00      lea d, [bp + 5] ; $num
2462   13B1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2463   13B4 FD 39         mov c, b ; And place it into C
2464   13B6 2A            mov b, [d] ; Lower Word in B
2465   13B7             ; --- START RELATIONAL
2466   13B7 D7            push a
2467   13B8 FD D8         push g
2468   13BA 11            mov a, b
2469   13BB FD 7A         mov g, c
2470   13BD FD 2E 00 00   mov32 cb, $00000000
2470   13C1 00 00 
2471   13C3 38 00 00      mov c, 0
2472   13C6 FD AF         cmp32 ga, cb
2473   13C8 FD 81         sgu
2474   13CA FD F1         pop g
2475   13CC E4            pop a
2476   13CD             ; --- END RELATIONAL
2477   13CD C0 00 00      cmp b, 0
2478   13D0 C6 55 14      je _while60_exit
2479   13D3             _while60_block:
2480   13D3             ; digits[i] = '0' + (num % 10); 
2481   13D3 FA F7 FF      lea d, [bp + -9] ; $digits
2482   13D6 D7            push a
2483   13D7 DA            push d
2484   13D8 FA F5 FF      lea d, [bp + -11] ; $i
2485   13DB 2A            mov b, [d]
2486   13DC 38 00 00      mov c, 0
2487   13DF E7            pop d
2488   13E0 5A            add d, b
2489   13E1 E4            pop a
2490   13E2 DA            push d
2491   13E3 FD 2E 30 00   mov32 cb, $00000030
2491   13E7 00 00 
2492   13E9             ; --- START TERMS
2493   13E9 D7            push a
2494   13EA 11            mov a, b
2495   13EB FA 05 00      lea d, [bp + 5] ; $num
2496   13EE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2497   13F1 FD 39         mov c, b ; And place it into C
2498   13F3 2A            mov b, [d] ; Lower Word in B
2499   13F4             ; --- START FACTORS
2500   13F4 D7            push a
2501   13F5 FD D8         push g
2502   13F7 11            mov a, b
2503   13F8 FD 7A         mov g, c
2504   13FA FD 2E 0A 00   mov32 cb, $0000000a
2504   13FE 00 00 
2505   1400 FD D8         push g ; save 'g' as the div instruction uses it
2506   1402 AE            div a, b ; %, a: quotient, b: remainder
2507   1403 11            mov a, b
2508   1404 FD F1         pop g
2509   1406 FD 38         mov c, g
2510   1408 27            mov b, a
2511   1409 FD F1         pop g
2512   140B E4            pop a
2513   140C             ; --- END FACTORS
2514   140C FD 22 00 00   mov g, 0
2515   1410 FD 15         add32 cb, ga
2516   1412 E4            pop a
2517   1413             ; --- END TERMS
2518   1413 E7            pop d
2519   1414 FD 3E         mov [d], bl
2520   1416             ; num = num / 10; 
2521   1416 FA 05 00      lea d, [bp + 5] ; $num
2522   1419 DA            push d
2523   141A FA 05 00      lea d, [bp + 5] ; $num
2524   141D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2525   1420 FD 39         mov c, b ; And place it into C
2526   1422 2A            mov b, [d] ; Lower Word in B
2527   1423             ; --- START FACTORS
2528   1423 D7            push a
2529   1424 FD D8         push g
2530   1426 11            mov a, b
2531   1427 FD 7A         mov g, c
2532   1429 FD 2E 0A 00   mov32 cb, $0000000a
2532   142D 00 00 
2533   142F FD D8         push g ; save 'g' as the div instruction uses it
2534   1431 AE            div a, b ; /, a: quotient, b: remainder
2535   1432 FD F1         pop g
2536   1434 FD 38         mov c, g
2537   1436 27            mov b, a
2538   1437 FD F1         pop g
2539   1439 E4            pop a
2540   143A             ; --- END FACTORS
2541   143A E7            pop d
2542   143B FD 43         mov [d], b
2543   143D 28            mov b, c
2544   143E FD 44 02 00   mov [d + 2], b
2545   1442             ; i++; 
2546   1442 FA F5 FF      lea d, [bp + -11] ; $i
2547   1445 2A            mov b, [d]
2548   1446 38 00 00      mov c, 0
2549   1449 11            mov a, b
2550   144A FD 77         inc b
2551   144C FA F5 FF      lea d, [bp + -11] ; $i
2552   144F FD 43         mov [d], b
2553   1451 27            mov b, a
2554   1452 0A AE 13      jmp _while60_cond
2555   1455             _while60_exit:
2556   1455             ; while (i > 0) { 
2557   1455             _while67_cond:
2558   1455 FA F5 FF      lea d, [bp + -11] ; $i
2559   1458 2A            mov b, [d]
2560   1459 38 00 00      mov c, 0
2561   145C             ; --- START RELATIONAL
2562   145C D7            push a
2563   145D 11            mov a, b
2564   145E FD 2E 00 00   mov32 cb, $00000000
2564   1462 00 00 
2565   1464 B0            cmp a, b
2566   1465 FD 7F         sgt ; >
2567   1467 E4            pop a
2568   1468             ; --- END RELATIONAL
2569   1468 C0 00 00      cmp b, 0
2570   146B C6 9D 14      je _while67_exit
2571   146E             _while67_block:
2572   146E             ; i--; 
2573   146E FA F5 FF      lea d, [bp + -11] ; $i
2574   1471 2A            mov b, [d]
2575   1472 38 00 00      mov c, 0
2576   1475 11            mov a, b
2577   1476 FD 7D         dec b
2578   1478 FA F5 FF      lea d, [bp + -11] ; $i
2579   147B FD 43         mov [d], b
2580   147D 27            mov b, a
2581   147E             ; putchar(digits[i]); 
2582   147E             ; --- START FUNCTION CALL
2583   147E FA F7 FF      lea d, [bp + -9] ; $digits
2584   1481 D7            push a
2585   1482 DA            push d
2586   1483 FA F5 FF      lea d, [bp + -11] ; $i
2587   1486 2A            mov b, [d]
2588   1487 38 00 00      mov c, 0
2589   148A E7            pop d
2590   148B 5A            add d, b
2591   148C E4            pop a
2592   148D 32            mov bl, [d]
2593   148E A7 00         mov bh, 0
2594   1490 38 00 00      mov c, 0
2595   1493 DD            push bl
2596   1494 07 53 13      call putchar
2597   1497 51 01 00      add sp, 1
2598   149A             ; --- END FUNCTION CALL
2599   149A 0A 55 14      jmp _while67_cond
2600   149D             _while67_exit:
2601   149D F9            leave
2602   149E 09            ret
2603   149F             
2604   149F             printx32:
2605   149F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2606   14A2             ; --- BEGIN INLINE ASM SEGMENT
2607   14A2 FA 05 00      lea d, [bp + 5] ; $hex
2608   14A5 2B 02 00      mov b, [d+2]
2609   14A8 07 B1 14      call print_u16x_printx32
2610   14AB 2A            mov b, [d]
2611   14AC 07 B1 14      call print_u16x_printx32
2612   14AF             ; --- END INLINE ASM SEGMENT
2613   14AF             ; return; 
2614   14AF F9            leave
2615   14B0 09            ret
2616   14B1             ; --- BEGIN INLINE ASM SEGMENT
2617   14B1             print_u16x_printx32:
2618   14B1 D7            push a
2619   14B2 D8            push b
2620   14B3 DD            push bl
2621   14B4 30            mov bl, bh
2622   14B5 07 D3 14      call _itoa_printx32        ; convert bh to char in A
2623   14B8 2F            mov bl, al        ; save al
2624   14B9 19 00         mov al, 0
2625   14BB 05 03         syscall sys_io        ; display AH
2626   14BD 24            mov ah, bl        ; retrieve al
2627   14BE 19 00         mov al, 0
2628   14C0 05 03         syscall sys_io        ; display AL
2629   14C2 EA            pop bl
2630   14C3 07 D3 14      call _itoa_printx32        ; convert bh to char in A
2631   14C6 2F            mov bl, al        ; save al
2632   14C7 19 00         mov al, 0
2633   14C9 05 03         syscall sys_io        ; display AH
2634   14CB 24            mov ah, bl        ; retrieve al
2635   14CC 19 00         mov al, 0
2636   14CE 05 03         syscall sys_io        ; display AL
2637   14D0 E5            pop b
2638   14D1 E4            pop a
2639   14D2 09            ret
2640   14D3             _itoa_printx32:
2641   14D3 DA            push d
2642   14D4 D8            push b
2643   14D5 A7 00         mov bh, 0
2644   14D7 FD A4 04      shr bl, 4  
2645   14DA 74            mov d, b
2646   14DB 1F ED 14      mov al, [d + s_hex_digits_printx32]
2647   14DE 23            mov ah, al
2648   14DF E5            pop b
2649   14E0 D8            push b
2650   14E1 A7 00         mov bh, 0
2651   14E3 FD 87 0F      and bl, $0F
2652   14E6 74            mov d, b
2653   14E7 1F ED 14      mov al, [d + s_hex_digits_printx32]
2654   14EA E5            pop b
2655   14EB E7            pop d
2656   14EC 09            ret
2657   14ED 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2657   14F1 34 35 36 37 
2657   14F5 38 39 41 42 
2657   14F9 43 44 45 46 
2658   14FD             ; --- END INLINE ASM SEGMENT
2659   14FD F9            leave
2660   14FE 09            ret
2661   14FF             
2662   14FF             err:
2663   14FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2664   1502             ; print(e); 
2665   1502             ; --- START FUNCTION CALL
2666   1502 FA 05 00      lea d, [bp + 5] ; $e
2667   1505 2A            mov b, [d]
2668   1506 38 00 00      mov c, 0
2669   1509 FD AB         swp b
2670   150B D8            push b
2671   150C 07 14 15      call print
2672   150F 51 02 00      add sp, 2
2673   1512             ; --- END FUNCTION CALL
2674   1512 F9            leave
2675   1513 09            ret
2676   1514             
2677   1514             print:
2678   1514 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2679   1517             ; --- BEGIN INLINE ASM SEGMENT
2680   1517 FA 05 00      lea d, [bp + 5] ; $s
2681   151A FD 2A         mov d, [d]
2682   151C             _puts_L1_print:
2683   151C 1E            mov al, [d]
2684   151D B9 00         cmp al, 0
2685   151F C6 2B 15      jz _puts_END_print
2686   1522 23            mov ah, al
2687   1523 19 00         mov al, 0
2688   1525 05 03         syscall sys_io
2689   1527 79            inc d
2690   1528 0A 1C 15      jmp _puts_L1_print
2691   152B             _puts_END_print:
2692   152B             ; --- END INLINE ASM SEGMENT
2693   152B F9            leave
2694   152C 09            ret
2695   152D             
2696   152D             print_signed:
2697   152D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2698   1530             ; char digits[5]; 
2699   1530 52 05 00      sub sp, 5
2700   1533             ; int i = 0; 
2701   1533 52 02 00      sub sp, 2
2702   1536             ; --- START LOCAL VAR INITIALIZATION
2703   1536 FA FA FF      lea d, [bp + -6] ; $i
2704   1539 DA            push d
2705   153A FD 2E 00 00   mov32 cb, $00000000
2705   153E 00 00 
2706   1540 E7            pop d
2707   1541 FD 43         mov [d], b
2708   1543             ; --- END LOCAL VAR INITIALIZATION
2709   1543             ; if (num < 0) { 
2710   1543             _if68_cond:
2711   1543 FA 05 00      lea d, [bp + 5] ; $num
2712   1546 2A            mov b, [d]
2713   1547 38 00 00      mov c, 0
2714   154A             ; --- START RELATIONAL
2715   154A D7            push a
2716   154B 11            mov a, b
2717   154C FD 2E 00 00   mov32 cb, $00000000
2717   1550 00 00 
2718   1552 B0            cmp a, b
2719   1553 FD 73         slt ; < (signed)
2720   1555 E4            pop a
2721   1556             ; --- END RELATIONAL
2722   1556 C0 00 00      cmp b, 0
2723   1559 C6 7C 15      je _if68_else
2724   155C             _if68_TRUE:
2725   155C             ; putchar('-'); 
2726   155C             ; --- START FUNCTION CALL
2727   155C FD 2E 2D 00   mov32 cb, $0000002d
2727   1560 00 00 
2728   1562 DD            push bl
2729   1563 07 53 13      call putchar
2730   1566 51 01 00      add sp, 1
2731   1569             ; --- END FUNCTION CALL
2732   1569             ; num = -num; 
2733   1569 FA 05 00      lea d, [bp + 5] ; $num
2734   156C DA            push d
2735   156D FA 05 00      lea d, [bp + 5] ; $num
2736   1570 2A            mov b, [d]
2737   1571 38 00 00      mov c, 0
2738   1574 FD 97         neg b
2739   1576 E7            pop d
2740   1577 FD 43         mov [d], b
2741   1579 0A A7 15      jmp _if68_exit
2742   157C             _if68_else:
2743   157C             ; if (num == 0) { 
2744   157C             _if69_cond:
2745   157C FA 05 00      lea d, [bp + 5] ; $num
2746   157F 2A            mov b, [d]
2747   1580 38 00 00      mov c, 0
2748   1583             ; --- START RELATIONAL
2749   1583 D7            push a
2750   1584 11            mov a, b
2751   1585 FD 2E 00 00   mov32 cb, $00000000
2751   1589 00 00 
2752   158B B0            cmp a, b
2753   158C FD 71         seq ; ==
2754   158E E4            pop a
2755   158F             ; --- END RELATIONAL
2756   158F C0 00 00      cmp b, 0
2757   1592 C6 A7 15      je _if69_exit
2758   1595             _if69_TRUE:
2759   1595             ; putchar('0'); 
2760   1595             ; --- START FUNCTION CALL
2761   1595 FD 2E 30 00   mov32 cb, $00000030
2761   1599 00 00 
2762   159B DD            push bl
2763   159C 07 53 13      call putchar
2764   159F 51 01 00      add sp, 1
2765   15A2             ; --- END FUNCTION CALL
2766   15A2             ; return; 
2767   15A2 F9            leave
2768   15A3 09            ret
2769   15A4 0A A7 15      jmp _if69_exit
2770   15A7             _if69_exit:
2771   15A7             _if68_exit:
2772   15A7             ; while (num > 0) { 
2773   15A7             _while70_cond:
2774   15A7 FA 05 00      lea d, [bp + 5] ; $num
2775   15AA 2A            mov b, [d]
2776   15AB 38 00 00      mov c, 0
2777   15AE             ; --- START RELATIONAL
2778   15AE D7            push a
2779   15AF 11            mov a, b
2780   15B0 FD 2E 00 00   mov32 cb, $00000000
2780   15B4 00 00 
2781   15B6 B0            cmp a, b
2782   15B7 FD 7F         sgt ; >
2783   15B9 E4            pop a
2784   15BA             ; --- END RELATIONAL
2785   15BA C0 00 00      cmp b, 0
2786   15BD C6 34 16      je _while70_exit
2787   15C0             _while70_block:
2788   15C0             ; digits[i] = '0' + (num % 10); 
2789   15C0 FA FC FF      lea d, [bp + -4] ; $digits
2790   15C3 D7            push a
2791   15C4 DA            push d
2792   15C5 FA FA FF      lea d, [bp + -6] ; $i
2793   15C8 2A            mov b, [d]
2794   15C9 38 00 00      mov c, 0
2795   15CC E7            pop d
2796   15CD 5A            add d, b
2797   15CE E4            pop a
2798   15CF DA            push d
2799   15D0 FD 2E 30 00   mov32 cb, $00000030
2799   15D4 00 00 
2800   15D6             ; --- START TERMS
2801   15D6 D7            push a
2802   15D7 11            mov a, b
2803   15D8 FA 05 00      lea d, [bp + 5] ; $num
2804   15DB 2A            mov b, [d]
2805   15DC 38 00 00      mov c, 0
2806   15DF             ; --- START FACTORS
2807   15DF D7            push a
2808   15E0 FD D8         push g
2809   15E2 11            mov a, b
2810   15E3 FD 7A         mov g, c
2811   15E5 FD 2E 0A 00   mov32 cb, $0000000a
2811   15E9 00 00 
2812   15EB FD D8         push g ; save 'g' as the div instruction uses it
2813   15ED AE            div a, b ; %, a: quotient, b: remainder
2814   15EE 11            mov a, b
2815   15EF FD F1         pop g
2816   15F1 FD 38         mov c, g
2817   15F3 27            mov b, a
2818   15F4 FD F1         pop g
2819   15F6 E4            pop a
2820   15F7             ; --- END FACTORS
2821   15F7 56            add b, a
2822   15F8 E4            pop a
2823   15F9             ; --- END TERMS
2824   15F9 E7            pop d
2825   15FA FD 3E         mov [d], bl
2826   15FC             ; num = num / 10; 
2827   15FC FA 05 00      lea d, [bp + 5] ; $num
2828   15FF DA            push d
2829   1600 FA 05 00      lea d, [bp + 5] ; $num
2830   1603 2A            mov b, [d]
2831   1604 38 00 00      mov c, 0
2832   1607             ; --- START FACTORS
2833   1607 D7            push a
2834   1608 FD D8         push g
2835   160A 11            mov a, b
2836   160B FD 7A         mov g, c
2837   160D FD 2E 0A 00   mov32 cb, $0000000a
2837   1611 00 00 
2838   1613 FD D8         push g ; save 'g' as the div instruction uses it
2839   1615 AE            div a, b ; /, a: quotient, b: remainder
2840   1616 FD F1         pop g
2841   1618 FD 38         mov c, g
2842   161A 27            mov b, a
2843   161B FD F1         pop g
2844   161D E4            pop a
2845   161E             ; --- END FACTORS
2846   161E E7            pop d
2847   161F FD 43         mov [d], b
2848   1621             ; i++; 
2849   1621 FA FA FF      lea d, [bp + -6] ; $i
2850   1624 2A            mov b, [d]
2851   1625 38 00 00      mov c, 0
2852   1628 11            mov a, b
2853   1629 FD 77         inc b
2854   162B FA FA FF      lea d, [bp + -6] ; $i
2855   162E FD 43         mov [d], b
2856   1630 27            mov b, a
2857   1631 0A A7 15      jmp _while70_cond
2858   1634             _while70_exit:
2859   1634             ; while (i > 0) { 
2860   1634             _while77_cond:
2861   1634 FA FA FF      lea d, [bp + -6] ; $i
2862   1637 2A            mov b, [d]
2863   1638 38 00 00      mov c, 0
2864   163B             ; --- START RELATIONAL
2865   163B D7            push a
2866   163C 11            mov a, b
2867   163D FD 2E 00 00   mov32 cb, $00000000
2867   1641 00 00 
2868   1643 B0            cmp a, b
2869   1644 FD 7F         sgt ; >
2870   1646 E4            pop a
2871   1647             ; --- END RELATIONAL
2872   1647 C0 00 00      cmp b, 0
2873   164A C6 7C 16      je _while77_exit
2874   164D             _while77_block:
2875   164D             ; i--; 
2876   164D FA FA FF      lea d, [bp + -6] ; $i
2877   1650 2A            mov b, [d]
2878   1651 38 00 00      mov c, 0
2879   1654 11            mov a, b
2880   1655 FD 7D         dec b
2881   1657 FA FA FF      lea d, [bp + -6] ; $i
2882   165A FD 43         mov [d], b
2883   165C 27            mov b, a
2884   165D             ; putchar(digits[i]); 
2885   165D             ; --- START FUNCTION CALL
2886   165D FA FC FF      lea d, [bp + -4] ; $digits
2887   1660 D7            push a
2888   1661 DA            push d
2889   1662 FA FA FF      lea d, [bp + -6] ; $i
2890   1665 2A            mov b, [d]
2891   1666 38 00 00      mov c, 0
2892   1669 E7            pop d
2893   166A 5A            add d, b
2894   166B E4            pop a
2895   166C 32            mov bl, [d]
2896   166D A7 00         mov bh, 0
2897   166F 38 00 00      mov c, 0
2898   1672 DD            push bl
2899   1673 07 53 13      call putchar
2900   1676 51 01 00      add sp, 1
2901   1679             ; --- END FUNCTION CALL
2902   1679 0A 34 16      jmp _while77_cond
2903   167C             _while77_exit:
2904   167C F9            leave
2905   167D 09            ret
2906   167E             
2907   167E             print_unsigned:
2908   167E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2909   1681             ; char digits[5]; 
2910   1681 52 05 00      sub sp, 5
2911   1684             ; int i; 
2912   1684 52 02 00      sub sp, 2
2913   1687             ; i = 0; 
2914   1687 FA FA FF      lea d, [bp + -6] ; $i
2915   168A DA            push d
2916   168B FD 2E 00 00   mov32 cb, $00000000
2916   168F 00 00 
2917   1691 E7            pop d
2918   1692 FD 43         mov [d], b
2919   1694             ; if(num == 0){ 
2920   1694             _if78_cond:
2921   1694 FA 05 00      lea d, [bp + 5] ; $num
2922   1697 2A            mov b, [d]
2923   1698 38 00 00      mov c, 0
2924   169B             ; --- START RELATIONAL
2925   169B D7            push a
2926   169C 11            mov a, b
2927   169D FD 2E 00 00   mov32 cb, $00000000
2927   16A1 00 00 
2928   16A3 B0            cmp a, b
2929   16A4 FD 71         seq ; ==
2930   16A6 E4            pop a
2931   16A7             ; --- END RELATIONAL
2932   16A7 C0 00 00      cmp b, 0
2933   16AA C6 BF 16      je _if78_exit
2934   16AD             _if78_TRUE:
2935   16AD             ; putchar('0'); 
2936   16AD             ; --- START FUNCTION CALL
2937   16AD FD 2E 30 00   mov32 cb, $00000030
2937   16B1 00 00 
2938   16B3 DD            push bl
2939   16B4 07 53 13      call putchar
2940   16B7 51 01 00      add sp, 1
2941   16BA             ; --- END FUNCTION CALL
2942   16BA             ; return; 
2943   16BA F9            leave
2944   16BB 09            ret
2945   16BC 0A BF 16      jmp _if78_exit
2946   16BF             _if78_exit:
2947   16BF             ; while (num > 0) { 
2948   16BF             _while79_cond:
2949   16BF FA 05 00      lea d, [bp + 5] ; $num
2950   16C2 2A            mov b, [d]
2951   16C3 38 00 00      mov c, 0
2952   16C6             ; --- START RELATIONAL
2953   16C6 D7            push a
2954   16C7 11            mov a, b
2955   16C8 FD 2E 00 00   mov32 cb, $00000000
2955   16CC 00 00 
2956   16CE B0            cmp a, b
2957   16CF FD 81         sgu ; > (unsigned)
2958   16D1 E4            pop a
2959   16D2             ; --- END RELATIONAL
2960   16D2 C0 00 00      cmp b, 0
2961   16D5 C6 4C 17      je _while79_exit
2962   16D8             _while79_block:
2963   16D8             ; digits[i] = '0' + (num % 10); 
2964   16D8 FA FC FF      lea d, [bp + -4] ; $digits
2965   16DB D7            push a
2966   16DC DA            push d
2967   16DD FA FA FF      lea d, [bp + -6] ; $i
2968   16E0 2A            mov b, [d]
2969   16E1 38 00 00      mov c, 0
2970   16E4 E7            pop d
2971   16E5 5A            add d, b
2972   16E6 E4            pop a
2973   16E7 DA            push d
2974   16E8 FD 2E 30 00   mov32 cb, $00000030
2974   16EC 00 00 
2975   16EE             ; --- START TERMS
2976   16EE D7            push a
2977   16EF 11            mov a, b
2978   16F0 FA 05 00      lea d, [bp + 5] ; $num
2979   16F3 2A            mov b, [d]
2980   16F4 38 00 00      mov c, 0
2981   16F7             ; --- START FACTORS
2982   16F7 D7            push a
2983   16F8 FD D8         push g
2984   16FA 11            mov a, b
2985   16FB FD 7A         mov g, c
2986   16FD FD 2E 0A 00   mov32 cb, $0000000a
2986   1701 00 00 
2987   1703 FD D8         push g ; save 'g' as the div instruction uses it
2988   1705 AE            div a, b ; %, a: quotient, b: remainder
2989   1706 11            mov a, b
2990   1707 FD F1         pop g
2991   1709 FD 38         mov c, g
2992   170B 27            mov b, a
2993   170C FD F1         pop g
2994   170E E4            pop a
2995   170F             ; --- END FACTORS
2996   170F 56            add b, a
2997   1710 E4            pop a
2998   1711             ; --- END TERMS
2999   1711 E7            pop d
3000   1712 FD 3E         mov [d], bl
3001   1714             ; num = num / 10; 
3002   1714 FA 05 00      lea d, [bp + 5] ; $num
3003   1717 DA            push d
3004   1718 FA 05 00      lea d, [bp + 5] ; $num
3005   171B 2A            mov b, [d]
3006   171C 38 00 00      mov c, 0
3007   171F             ; --- START FACTORS
3008   171F D7            push a
3009   1720 FD D8         push g
3010   1722 11            mov a, b
3011   1723 FD 7A         mov g, c
3012   1725 FD 2E 0A 00   mov32 cb, $0000000a
3012   1729 00 00 
3013   172B FD D8         push g ; save 'g' as the div instruction uses it
3014   172D AE            div a, b ; /, a: quotient, b: remainder
3015   172E FD F1         pop g
3016   1730 FD 38         mov c, g
3017   1732 27            mov b, a
3018   1733 FD F1         pop g
3019   1735 E4            pop a
3020   1736             ; --- END FACTORS
3021   1736 E7            pop d
3022   1737 FD 43         mov [d], b
3023   1739             ; i++; 
3024   1739 FA FA FF      lea d, [bp + -6] ; $i
3025   173C 2A            mov b, [d]
3026   173D 38 00 00      mov c, 0
3027   1740 11            mov a, b
3028   1741 FD 77         inc b
3029   1743 FA FA FF      lea d, [bp + -6] ; $i
3030   1746 FD 43         mov [d], b
3031   1748 27            mov b, a
3032   1749 0A BF 16      jmp _while79_cond
3033   174C             _while79_exit:
3034   174C             ; while (i > 0) { 
3035   174C             _while86_cond:
3036   174C FA FA FF      lea d, [bp + -6] ; $i
3037   174F 2A            mov b, [d]
3038   1750 38 00 00      mov c, 0
3039   1753             ; --- START RELATIONAL
3040   1753 D7            push a
3041   1754 11            mov a, b
3042   1755 FD 2E 00 00   mov32 cb, $00000000
3042   1759 00 00 
3043   175B B0            cmp a, b
3044   175C FD 7F         sgt ; >
3045   175E E4            pop a
3046   175F             ; --- END RELATIONAL
3047   175F C0 00 00      cmp b, 0
3048   1762 C6 94 17      je _while86_exit
3049   1765             _while86_block:
3050   1765             ; i--; 
3051   1765 FA FA FF      lea d, [bp + -6] ; $i
3052   1768 2A            mov b, [d]
3053   1769 38 00 00      mov c, 0
3054   176C 11            mov a, b
3055   176D FD 7D         dec b
3056   176F FA FA FF      lea d, [bp + -6] ; $i
3057   1772 FD 43         mov [d], b
3058   1774 27            mov b, a
3059   1775             ; putchar(digits[i]); 
3060   1775             ; --- START FUNCTION CALL
3061   1775 FA FC FF      lea d, [bp + -4] ; $digits
3062   1778 D7            push a
3063   1779 DA            push d
3064   177A FA FA FF      lea d, [bp + -6] ; $i
3065   177D 2A            mov b, [d]
3066   177E 38 00 00      mov c, 0
3067   1781 E7            pop d
3068   1782 5A            add d, b
3069   1783 E4            pop a
3070   1784 32            mov bl, [d]
3071   1785 A7 00         mov bh, 0
3072   1787 38 00 00      mov c, 0
3073   178A DD            push bl
3074   178B 07 53 13      call putchar
3075   178E 51 01 00      add sp, 1
3076   1791             ; --- END FUNCTION CALL
3077   1791 0A 4C 17      jmp _while86_cond
3078   1794             _while86_exit:
3079   1794 F9            leave
3080   1795 09            ret
3081   1796             
3082   1796             printx16:
3083   1796 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3084   1799             ; --- BEGIN INLINE ASM SEGMENT
3085   1799 FA 05 00      lea d, [bp + 5] ; $hex
3086   179C 2A            mov b, [d]
3087   179D             print_u16x_printx16:
3088   179D DD            push bl
3089   179E 30            mov bl, bh
3090   179F 07 BC 17      call _itoa_printx16        ; convert bh to char in A
3091   17A2 2F            mov bl, al        ; save al
3092   17A3 19 00         mov al, 0
3093   17A5 05 03         syscall sys_io        ; display AH
3094   17A7 24            mov ah, bl        ; retrieve al
3095   17A8 19 00         mov al, 0
3096   17AA 05 03         syscall sys_io        ; display AL
3097   17AC EA            pop bl
3098   17AD 07 BC 17      call _itoa_printx16        ; convert bh to char in A
3099   17B0 2F            mov bl, al        ; save al
3100   17B1 19 00         mov al, 0
3101   17B3 05 03         syscall sys_io        ; display AH
3102   17B5 24            mov ah, bl        ; retrieve al
3103   17B6 19 00         mov al, 0
3104   17B8 05 03         syscall sys_io        ; display AL
3105   17BA             ; --- END INLINE ASM SEGMENT
3106   17BA             ; return; 
3107   17BA F9            leave
3108   17BB 09            ret
3109   17BC             ; --- BEGIN INLINE ASM SEGMENT
3110   17BC             _itoa_printx16:
3111   17BC DA            push d
3112   17BD D8            push b
3113   17BE A7 00         mov bh, 0
3114   17C0 FD A4 04      shr bl, 4  
3115   17C3 74            mov d, b
3116   17C4 1F D6 17      mov al, [d + s_hex_digits_printx16]
3117   17C7 23            mov ah, al
3118   17C8 E5            pop b
3119   17C9 D8            push b
3120   17CA A7 00         mov bh, 0
3121   17CC FD 87 0F      and bl, $0F
3122   17CF 74            mov d, b
3123   17D0 1F D6 17      mov al, [d + s_hex_digits_printx16]
3124   17D3 E5            pop b
3125   17D4 E7            pop d
3126   17D5 09            ret
3127   17D6 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
3127   17DA 34 35 36 37 
3127   17DE 38 39 41 42 
3127   17E2 43 44 45 46 
3128   17E6             ; --- END INLINE ASM SEGMENT
3129   17E6 F9            leave
3130   17E7 09            ret
3131   17E8             
3132   17E8             puts:
3133   17E8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3134   17EB             ; --- BEGIN INLINE ASM SEGMENT
3135   17EB FA 05 00      lea d, [bp + 5] ; $s
3136   17EE FD 2A         mov d, [d]
3137   17F0             _puts_L1_puts:
3138   17F0 1E            mov al, [d]
3139   17F1 B9 00         cmp al, 0
3140   17F3 C6 FF 17      jz _puts_END_puts
3141   17F6 23            mov ah, al
3142   17F7 19 00         mov al, 0
3143   17F9 05 03         syscall sys_io
3144   17FB 79            inc d
3145   17FC 0A F0 17      jmp _puts_L1_puts
3146   17FF             _puts_END_puts:
3147   17FF 10 00 0A      mov a, $0A00
3148   1802 05 03         syscall sys_io
3149   1804             ; --- END INLINE ASM SEGMENT
3150   1804 F9            leave
3151   1805 09            ret
3152   1806             ; --- END TEXT SEGMENT
3153   1806             
3154   1806             ; --- BEGIN DATA SEGMENT
3155   1806 00 00 00 00 _nextState_data: .fill 3000, 0
3155   180A 00 00 00 00 
3155   180E 00 00 00 00 
3155   1812 00 00 00 00 
3155   1816 00 00 00 00 
3155   181A 00 00 00 00 
3155   181E 00 00 00 00 
3155   1822 00 00 00 00 
3155   1826 00 00 00 00 
3155   182A 00 00 00 00 
3155   182E 00 00 00 00 
3155   1832 00 00 00 00 
3155   1836 00 00 00 00 
3155   183A 00 00 00 00 
3155   183E 00 00 00 00 
3155   1842 00 00 00 00 
3155   1846 00 00 00 00 
3155   184A 00 00 00 00 
3155   184E 00 00 00 00 
3155   1852 00 00 00 00 
3155   1856 00 00 00 00 
3155   185A 00 00 00 00 
3155   185E 00 00 00 00 
3155   1862 00 00 00 00 
3155   1866 00 00 00 00 
3155   186A 00 00 00 00 
3155   186E 00 00 00 00 
3155   1872 00 00 00 00 
3155   1876 00 00 00 00 
3155   187A 00 00 00 00 
3155   187E 00 00 00 00 
3155   1882 00 00 00 00 
3155   1886 00 00 00 00 
3155   188A 00 00 00 00 
3155   188E 00 00 00 00 
3155   1892 00 00 00 00 
3155   1896 00 00 00 00 
3155   189A 00 00 00 00 
3155   189E 00 00 00 00 
3155   18A2 00 00 00 00 
3155   18A6 00 00 00 00 
3155   18AA 00 00 00 00 
3155   18AE 00 00 00 00 
3155   18B2 00 00 00 00 
3155   18B6 00 00 00 00 
3155   18BA 00 00 00 00 
3155   18BE 00 00 00 00 
3155   18C2 00 00 00 00 
3155   18C6 00 00 00 00 
3155   18CA 00 00 00 00 
3155   18CE 00 00 00 00 
3155   18D2 00 00 00 00 
3155   18D6 00 00 00 00 
3155   18DA 00 00 00 00 
3155   18DE 00 00 00 00 
3155   18E2 00 00 00 00 
3155   18E6 00 00 00 00 
3155   18EA 00 00 00 00 
3155   18EE 00 00 00 00 
3155   18F2 00 00 00 00 
3155   18F6 00 00 00 00 
3155   18FA 00 00 00 00 
3155   18FE 00 00 00 00 
3155   1902 00 00 00 00 
3155   1906 00 00 00 00 
3155   190A 00 00 00 00 
3155   190E 00 00 00 00 
3155   1912 00 00 00 00 
3155   1916 00 00 00 00 
3155   191A 00 00 00 00 
3155   191E 00 00 00 00 
3155   1922 00 00 00 00 
3155   1926 00 00 00 00 
3155   192A 00 00 00 00 
3155   192E 00 00 00 00 
3155   1932 00 00 00 00 
3155   1936 00 00 00 00 
3155   193A 00 00 00 00 
3155   193E 00 00 00 00 
3155   1942 00 00 00 00 
3155   1946 00 00 00 00 
3155   194A 00 00 00 00 
3155   194E 00 00 00 00 
3155   1952 00 00 00 00 
3155   1956 00 00 00 00 
3155   195A 00 00 00 00 
3155   195E 00 00 00 00 
3155   1962 00 00 00 00 
3155   1966 00 00 00 00 
3155   196A 00 00 00 00 
3155   196E 00 00 00 00 
3155   1972 00 00 00 00 
3155   1976 00 00 00 00 
3155   197A 00 00 00 00 
3155   197E 00 00 00 00 
3155   1982 00 00 00 00 
3155   1986 00 00 00 00 
3155   198A 00 00 00 00 
3155   198E 00 00 00 00 
3155   1992 00 00 00 00 
3155   1996 00 00 00 00 
3155   199A 00 00 00 00 
3155   199E 00 00 00 00 
3155   19A2 00 00 00 00 
3155   19A6 00 00 00 00 
3155   19AA 00 00 00 00 
3155   19AE 00 00 00 00 
3155   19B2 00 00 00 00 
3155   19B6 00 00 00 00 
3155   19BA 00 00 00 00 
3155   19BE 00 00 00 00 
3155   19C2 00 00 00 00 
3155   19C6 00 00 00 00 
3155   19CA 00 00 00 00 
3155   19CE 00 00 00 00 
3155   19D2 00 00 00 00 
3155   19D6 00 00 00 00 
3155   19DA 00 00 00 00 
3155   19DE 00 00 00 00 
3155   19E2 00 00 00 00 
3155   19E6 00 00 00 00 
3155   19EA 00 00 00 00 
3155   19EE 00 00 00 00 
3155   19F2 00 00 00 00 
3155   19F6 00 00 00 00 
3155   19FA 00 00 00 00 
3155   19FE 00 00 00 00 
3155   1A02 00 00 00 00 
3155   1A06 00 00 00 00 
3155   1A0A 00 00 00 00 
3155   1A0E 00 00 00 00 
3155   1A12 00 00 00 00 
3155   1A16 00 00 00 00 
3155   1A1A 00 00 00 00 
3155   1A1E 00 00 00 00 
3155   1A22 00 00 00 00 
3155   1A26 00 00 00 00 
3155   1A2A 00 00 00 00 
3155   1A2E 00 00 00 00 
3155   1A32 00 00 00 00 
3155   1A36 00 00 00 00 
3155   1A3A 00 00 00 00 
3155   1A3E 00 00 00 00 
3155   1A42 00 00 00 00 
3155   1A46 00 00 00 00 
3155   1A4A 00 00 00 00 
3155   1A4E 00 00 00 00 
3155   1A52 00 00 00 00 
3155   1A56 00 00 00 00 
3155   1A5A 00 00 00 00 
3155   1A5E 00 00 00 00 
3155   1A62 00 00 00 00 
3155   1A66 00 00 00 00 
3155   1A6A 00 00 00 00 
3155   1A6E 00 00 00 00 
3155   1A72 00 00 00 00 
3155   1A76 00 00 00 00 
3155   1A7A 00 00 00 00 
3155   1A7E 00 00 00 00 
3155   1A82 00 00 00 00 
3155   1A86 00 00 00 00 
3155   1A8A 00 00 00 00 
3155   1A8E 00 00 00 00 
3155   1A92 00 00 00 00 
3155   1A96 00 00 00 00 
3155   1A9A 00 00 00 00 
3155   1A9E 00 00 00 00 
3155   1AA2 00 00 00 00 
3155   1AA6 00 00 00 00 
3155   1AAA 00 00 00 00 
3155   1AAE 00 00 00 00 
3155   1AB2 00 00 00 00 
3155   1AB6 00 00 00 00 
3155   1ABA 00 00 00 00 
3155   1ABE 00 00 00 00 
3155   1AC2 00 00 00 00 
3155   1AC6 00 00 00 00 
3155   1ACA 00 00 00 00 
3155   1ACE 00 00 00 00 
3155   1AD2 00 00 00 00 
3155   1AD6 00 00 00 00 
3155   1ADA 00 00 00 00 
3155   1ADE 00 00 00 00 
3155   1AE2 00 00 00 00 
3155   1AE6 00 00 00 00 
3155   1AEA 00 00 00 00 
3155   1AEE 00 00 00 00 
3155   1AF2 00 00 00 00 
3155   1AF6 00 00 00 00 
3155   1AFA 00 00 00 00 
3155   1AFE 00 00 00 00 
3155   1B02 00 00 00 00 
3155   1B06 00 00 00 00 
3155   1B0A 00 00 00 00 
3155   1B0E 00 00 00 00 
3155   1B12 00 00 00 00 
3155   1B16 00 00 00 00 
3155   1B1A 00 00 00 00 
3155   1B1E 00 00 00 00 
3155   1B22 00 00 00 00 
3155   1B26 00 00 00 00 
3155   1B2A 00 00 00 00 
3155   1B2E 00 00 00 00 
3155   1B32 00 00 00 00 
3155   1B36 00 00 00 00 
3155   1B3A 00 00 00 00 
3155   1B3E 00 00 00 00 
3155   1B42 00 00 00 00 
3155   1B46 00 00 00 00 
3155   1B4A 00 00 00 00 
3155   1B4E 00 00 00 00 
3155   1B52 00 00 00 00 
3155   1B56 00 00 00 00 
3155   1B5A 00 00 00 00 
3155   1B5E 00 00 00 00 
3155   1B62 00 00 00 00 
3155   1B66 00 00 00 00 
3155   1B6A 00 00 00 00 
3155   1B6E 00 00 00 00 
3155   1B72 00 00 00 00 
3155   1B76 00 00 00 00 
3155   1B7A 00 00 00 00 
3155   1B7E 00 00 00 00 
3155   1B82 00 00 00 00 
3155   1B86 00 00 00 00 
3155   1B8A 00 00 00 00 
3155   1B8E 00 00 00 00 
3155   1B92 00 00 00 00 
3155   1B96 00 00 00 00 
3155   1B9A 00 00 00 00 
3155   1B9E 00 00 00 00 
3155   1BA2 00 00 00 00 
3155   1BA6 00 00 00 00 
3155   1BAA 00 00 00 00 
3155   1BAE 00 00 00 00 
3155   1BB2 00 00 00 00 
3155   1BB6 00 00 00 00 
3155   1BBA 00 00 00 00 
3155   1BBE 00 00 00 00 
3155   1BC2 00 00 00 00 
3155   1BC6 00 00 00 00 
3155   1BCA 00 00 00 00 
3155   1BCE 00 00 00 00 
3155   1BD2 00 00 00 00 
3155   1BD6 00 00 00 00 
3155   1BDA 00 00 00 00 
3155   1BDE 00 00 00 00 
3155   1BE2 00 00 00 00 
3155   1BE6 00 00 00 00 
3155   1BEA 00 00 00 00 
3155   1BEE 00 00 00 00 
3155   1BF2 00 00 00 00 
3155   1BF6 00 00 00 00 
3155   1BFA 00 00 00 00 
3155   1BFE 00 00 00 00 
3155   1C02 00 00 00 00 
3155   1C06 00 00 00 00 
3155   1C0A 00 00 00 00 
3155   1C0E 00 00 00 00 
3155   1C12 00 00 00 00 
3155   1C16 00 00 00 00 
3155   1C1A 00 00 00 00 
3155   1C1E 00 00 00 00 
3155   1C22 00 00 00 00 
3155   1C26 00 00 00 00 
3155   1C2A 00 00 00 00 
3155   1C2E 00 00 00 00 
3155   1C32 00 00 00 00 
3155   1C36 00 00 00 00 
3155   1C3A 00 00 00 00 
3155   1C3E 00 00 00 00 
3155   1C42 00 00 00 00 
3155   1C46 00 00 00 00 
3155   1C4A 00 00 00 00 
3155   1C4E 00 00 00 00 
3155   1C52 00 00 00 00 
3155   1C56 00 00 00 00 
3155   1C5A 00 00 00 00 
3155   1C5E 00 00 00 00 
3155   1C62 00 00 00 00 
3155   1C66 00 00 00 00 
3155   1C6A 00 00 00 00 
3155   1C6E 00 00 00 00 
3155   1C72 00 00 00 00 
3155   1C76 00 00 00 00 
3155   1C7A 00 00 00 00 
3155   1C7E 00 00 00 00 
3155   1C82 00 00 00 00 
3155   1C86 00 00 00 00 
3155   1C8A 00 00 00 00 
3155   1C8E 00 00 00 00 
3155   1C92 00 00 00 00 
3155   1C96 00 00 00 00 
3155   1C9A 00 00 00 00 
3155   1C9E 00 00 00 00 
3155   1CA2 00 00 00 00 
3155   1CA6 00 00 00 00 
3155   1CAA 00 00 00 00 
3155   1CAE 00 00 00 00 
3155   1CB2 00 00 00 00 
3155   1CB6 00 00 00 00 
3155   1CBA 00 00 00 00 
3155   1CBE 00 00 00 00 
3155   1CC2 00 00 00 00 
3155   1CC6 00 00 00 00 
3155   1CCA 00 00 00 00 
3155   1CCE 00 00 00 00 
3155   1CD2 00 00 00 00 
3155   1CD6 00 00 00 00 
3155   1CDA 00 00 00 00 
3155   1CDE 00 00 00 00 
3155   1CE2 00 00 00 00 
3155   1CE6 00 00 00 00 
3155   1CEA 00 00 00 00 
3155   1CEE 00 00 00 00 
3155   1CF2 00 00 00 00 
3155   1CF6 00 00 00 00 
3155   1CFA 00 00 00 00 
3155   1CFE 00 00 00 00 
3155   1D02 00 00 00 00 
3155   1D06 00 00 00 00 
3155   1D0A 00 00 00 00 
3155   1D0E 00 00 00 00 
3155   1D12 00 00 00 00 
3155   1D16 00 00 00 00 
3155   1D1A 00 00 00 00 
3155   1D1E 00 00 00 00 
3155   1D22 00 00 00 00 
3155   1D26 00 00 00 00 
3155   1D2A 00 00 00 00 
3155   1D2E 00 00 00 00 
3155   1D32 00 00 00 00 
3155   1D36 00 00 00 00 
3155   1D3A 00 00 00 00 
3155   1D3E 00 00 00 00 
3155   1D42 00 00 00 00 
3155   1D46 00 00 00 00 
3155   1D4A 00 00 00 00 
3155   1D4E 00 00 00 00 
3155   1D52 00 00 00 00 
3155   1D56 00 00 00 00 
3155   1D5A 00 00 00 00 
3155   1D5E 00 00 00 00 
3155   1D62 00 00 00 00 
3155   1D66 00 00 00 00 
3155   1D6A 00 00 00 00 
3155   1D6E 00 00 00 00 
3155   1D72 00 00 00 00 
3155   1D76 00 00 00 00 
3155   1D7A 00 00 00 00 
3155   1D7E 00 00 00 00 
3155   1D82 00 00 00 00 
3155   1D86 00 00 00 00 
3155   1D8A 00 00 00 00 
3155   1D8E 00 00 00 00 
3155   1D92 00 00 00 00 
3155   1D96 00 00 00 00 
3155   1D9A 00 00 00 00 
3155   1D9E 00 00 00 00 
3155   1DA2 00 00 00 00 
3155   1DA6 00 00 00 00 
3155   1DAA 00 00 00 00 
3155   1DAE 00 00 00 00 
3155   1DB2 00 00 00 00 
3155   1DB6 00 00 00 00 
3155   1DBA 00 00 00 00 
3155   1DBE 00 00 00 00 
3155   1DC2 00 00 00 00 
3155   1DC6 00 00 00 00 
3155   1DCA 00 00 00 00 
3155   1DCE 00 00 00 00 
3155   1DD2 00 00 00 00 
3155   1DD6 00 00 00 00 
3155   1DDA 00 00 00 00 
3155   1DDE 00 00 00 00 
3155   1DE2 00 00 00 00 
3155   1DE6 00 00 00 00 
3155   1DEA 00 00 00 00 
3155   1DEE 00 00 00 00 
3155   1DF2 00 00 00 00 
3155   1DF6 00 00 00 00 
3155   1DFA 00 00 00 00 
3155   1DFE 00 00 00 00 
3155   1E02 00 00 00 00 
3155   1E06 00 00 00 00 
3155   1E0A 00 00 00 00 
3155   1E0E 00 00 00 00 
3155   1E12 00 00 00 00 
3155   1E16 00 00 00 00 
3155   1E1A 00 00 00 00 
3155   1E1E 00 00 00 00 
3155   1E22 00 00 00 00 
3155   1E26 00 00 00 00 
3155   1E2A 00 00 00 00 
3155   1E2E 00 00 00 00 
3155   1E32 00 00 00 00 
3155   1E36 00 00 00 00 
3155   1E3A 00 00 00 00 
3155   1E3E 00 00 00 00 
3155   1E42 00 00 00 00 
3155   1E46 00 00 00 00 
3155   1E4A 00 00 00 00 
3155   1E4E 00 00 00 00 
3155   1E52 00 00 00 00 
3155   1E56 00 00 00 00 
3155   1E5A 00 00 00 00 
3155   1E5E 00 00 00 00 
3155   1E62 00 00 00 00 
3155   1E66 00 00 00 00 
3155   1E6A 00 00 00 00 
3155   1E6E 00 00 00 00 
3155   1E72 00 00 00 00 
3155   1E76 00 00 00 00 
3155   1E7A 00 00 00 00 
3155   1E7E 00 00 00 00 
3155   1E82 00 00 00 00 
3155   1E86 00 00 00 00 
3155   1E8A 00 00 00 00 
3155   1E8E 00 00 00 00 
3155   1E92 00 00 00 00 
3155   1E96 00 00 00 00 
3155   1E9A 00 00 00 00 
3155   1E9E 00 00 00 00 
3155   1EA2 00 00 00 00 
3155   1EA6 00 00 00 00 
3155   1EAA 00 00 00 00 
3155   1EAE 00 00 00 00 
3155   1EB2 00 00 00 00 
3155   1EB6 00 00 00 00 
3155   1EBA 00 00 00 00 
3155   1EBE 00 00 00 00 
3155   1EC2 00 00 00 00 
3155   1EC6 00 00 00 00 
3155   1ECA 00 00 00 00 
3155   1ECE 00 00 00 00 
3155   1ED2 00 00 00 00 
3155   1ED6 00 00 00 00 
3155   1EDA 00 00 00 00 
3155   1EDE 00 00 00 00 
3155   1EE2 00 00 00 00 
3155   1EE6 00 00 00 00 
3155   1EEA 00 00 00 00 
3155   1EEE 00 00 00 00 
3155   1EF2 00 00 00 00 
3155   1EF6 00 00 00 00 
3155   1EFA 00 00 00 00 
3155   1EFE 00 00 00 00 
3155   1F02 00 00 00 00 
3155   1F06 00 00 00 00 
3155   1F0A 00 00 00 00 
3155   1F0E 00 00 00 00 
3155   1F12 00 00 00 00 
3155   1F16 00 00 00 00 
3155   1F1A 00 00 00 00 
3155   1F1E 00 00 00 00 
3155   1F22 00 00 00 00 
3155   1F26 00 00 00 00 
3155   1F2A 00 00 00 00 
3155   1F2E 00 00 00 00 
3155   1F32 00 00 00 00 
3155   1F36 00 00 00 00 
3155   1F3A 00 00 00 00 
3155   1F3E 00 00 00 00 
3155   1F42 00 00 00 00 
3155   1F46 00 00 00 00 
3155   1F4A 00 00 00 00 
3155   1F4E 00 00 00 00 
3155   1F52 00 00 00 00 
3155   1F56 00 00 00 00 
3155   1F5A 00 00 00 00 
3155   1F5E 00 00 00 00 
3155   1F62 00 00 00 00 
3155   1F66 00 00 00 00 
3155   1F6A 00 00 00 00 
3155   1F6E 00 00 00 00 
3155   1F72 00 00 00 00 
3155   1F76 00 00 00 00 
3155   1F7A 00 00 00 00 
3155   1F7E 00 00 00 00 
3155   1F82 00 00 00 00 
3155   1F86 00 00 00 00 
3155   1F8A 00 00 00 00 
3155   1F8E 00 00 00 00 
3155   1F92 00 00 00 00 
3155   1F96 00 00 00 00 
3155   1F9A 00 00 00 00 
3155   1F9E 00 00 00 00 
3155   1FA2 00 00 00 00 
3155   1FA6 00 00 00 00 
3155   1FAA 00 00 00 00 
3155   1FAE 00 00 00 00 
3155   1FB2 00 00 00 00 
3155   1FB6 00 00 00 00 
3155   1FBA 00 00 00 00 
3155   1FBE 00 00 00 00 
3155   1FC2 00 00 00 00 
3155   1FC6 00 00 00 00 
3155   1FCA 00 00 00 00 
3155   1FCE 00 00 00 00 
3155   1FD2 00 00 00 00 
3155   1FD6 00 00 00 00 
3155   1FDA 00 00 00 00 
3155   1FDE 00 00 00 00 
3155   1FE2 00 00 00 00 
3155   1FE6 00 00 00 00 
3155   1FEA 00 00 00 00 
3155   1FEE 00 00 00 00 
3155   1FF2 00 00 00 00 
3155   1FF6 00 00 00 00 
3155   1FFA 00 00 00 00 
3155   1FFE 00 00 00 00 
3155   2002 00 00 00 00 
3155   2006 00 00 00 00 
3155   200A 00 00 00 00 
3155   200E 00 00 00 00 
3155   2012 00 00 00 00 
3155   2016 00 00 00 00 
3155   201A 00 00 00 00 
3155   201E 00 00 00 00 
3155   2022 00 00 00 00 
3155   2026 00 00 00 00 
3155   202A 00 00 00 00 
3155   202E 00 00 00 00 
3155   2032 00 00 00 00 
3155   2036 00 00 00 00 
3155   203A 00 00 00 00 
3155   203E 00 00 00 00 
3155   2042 00 00 00 00 
3155   2046 00 00 00 00 
3155   204A 00 00 00 00 
3155   204E 00 00 00 00 
3155   2052 00 00 00 00 
3155   2056 00 00 00 00 
3155   205A 00 00 00 00 
3155   205E 00 00 00 00 
3155   2062 00 00 00 00 
3155   2066 00 00 00 00 
3155   206A 00 00 00 00 
3155   206E 00 00 00 00 
3155   2072 00 00 00 00 
3155   2076 00 00 00 00 
3155   207A 00 00 00 00 
3155   207E 00 00 00 00 
3155   2082 00 00 00 00 
3155   2086 00 00 00 00 
3155   208A 00 00 00 00 
3155   208E 00 00 00 00 
3155   2092 00 00 00 00 
3155   2096 00 00 00 00 
3155   209A 00 00 00 00 
3155   209E 00 00 00 00 
3155   20A2 00 00 00 00 
3155   20A6 00 00 00 00 
3155   20AA 00 00 00 00 
3155   20AE 00 00 00 00 
3155   20B2 00 00 00 00 
3155   20B6 00 00 00 00 
3155   20BA 00 00 00 00 
3155   20BE 00 00 00 00 
3155   20C2 00 00 00 00 
3155   20C6 00 00 00 00 
3155   20CA 00 00 00 00 
3155   20CE 00 00 00 00 
3155   20D2 00 00 00 00 
3155   20D6 00 00 00 00 
3155   20DA 00 00 00 00 
3155   20DE 00 00 00 00 
3155   20E2 00 00 00 00 
3155   20E6 00 00 00 00 
3155   20EA 00 00 00 00 
3155   20EE 00 00 00 00 
3155   20F2 00 00 00 00 
3155   20F6 00 00 00 00 
3155   20FA 00 00 00 00 
3155   20FE 00 00 00 00 
3155   2102 00 00 00 00 
3155   2106 00 00 00 00 
3155   210A 00 00 00 00 
3155   210E 00 00 00 00 
3155   2112 00 00 00 00 
3155   2116 00 00 00 00 
3155   211A 00 00 00 00 
3155   211E 00 00 00 00 
3155   2122 00 00 00 00 
3155   2126 00 00 00 00 
3155   212A 00 00 00 00 
3155   212E 00 00 00 00 
3155   2132 00 00 00 00 
3155   2136 00 00 00 00 
3155   213A 00 00 00 00 
3155   213E 00 00 00 00 
3155   2142 00 00 00 00 
3155   2146 00 00 00 00 
3155   214A 00 00 00 00 
3155   214E 00 00 00 00 
3155   2152 00 00 00 00 
3155   2156 00 00 00 00 
3155   215A 00 00 00 00 
3155   215E 00 00 00 00 
3155   2162 00 00 00 00 
3155   2166 00 00 00 00 
3155   216A 00 00 00 00 
3155   216E 00 00 00 00 
3155   2172 00 00 00 00 
3155   2176 00 00 00 00 
3155   217A 00 00 00 00 
3155   217E 00 00 00 00 
3155   2182 00 00 00 00 
3155   2186 00 00 00 00 
3155   218A 00 00 00 00 
3155   218E 00 00 00 00 
3155   2192 00 00 00 00 
3155   2196 00 00 00 00 
3155   219A 00 00 00 00 
3155   219E 00 00 00 00 
3155   21A2 00 00 00 00 
3155   21A6 00 00 00 00 
3155   21AA 00 00 00 00 
3155   21AE 00 00 00 00 
3155   21B2 00 00 00 00 
3155   21B6 00 00 00 00 
3155   21BA 00 00 00 00 
3155   21BE 00 00 00 00 
3155   21C2 00 00 00 00 
3155   21C6 00 00 00 00 
3155   21CA 00 00 00 00 
3155   21CE 00 00 00 00 
3155   21D2 00 00 00 00 
3155   21D6 00 00 00 00 
3155   21DA 00 00 00 00 
3155   21DE 00 00 00 00 
3155   21E2 00 00 00 00 
3155   21E6 00 00 00 00 
3155   21EA 00 00 00 00 
3155   21EE 00 00 00 00 
3155   21F2 00 00 00 00 
3155   21F6 00 00 00 00 
3155   21FA 00 00 00 00 
3155   21FE 00 00 00 00 
3155   2202 00 00 00 00 
3155   2206 00 00 00 00 
3155   220A 00 00 00 00 
3155   220E 00 00 00 00 
3155   2212 00 00 00 00 
3155   2216 00 00 00 00 
3155   221A 00 00 00 00 
3155   221E 00 00 00 00 
3155   2222 00 00 00 00 
3155   2226 00 00 00 00 
3155   222A 00 00 00 00 
3155   222E 00 00 00 00 
3155   2232 00 00 00 00 
3155   2236 00 00 00 00 
3155   223A 00 00 00 00 
3155   223E 00 00 00 00 
3155   2242 00 00 00 00 
3155   2246 00 00 00 00 
3155   224A 00 00 00 00 
3155   224E 00 00 00 00 
3155   2252 00 00 00 00 
3155   2256 00 00 00 00 
3155   225A 00 00 00 00 
3155   225E 00 00 00 00 
3155   2262 00 00 00 00 
3155   2266 00 00 00 00 
3155   226A 00 00 00 00 
3155   226E 00 00 00 00 
3155   2272 00 00 00 00 
3155   2276 00 00 00 00 
3155   227A 00 00 00 00 
3155   227E 00 00 00 00 
3155   2282 00 00 00 00 
3155   2286 00 00 00 00 
3155   228A 00 00 00 00 
3155   228E 00 00 00 00 
3155   2292 00 00 00 00 
3155   2296 00 00 00 00 
3155   229A 00 00 00 00 
3155   229E 00 00 00 00 
3155   22A2 00 00 00 00 
3155   22A6 00 00 00 00 
3155   22AA 00 00 00 00 
3155   22AE 00 00 00 00 
3155   22B2 00 00 00 00 
3155   22B6 00 00 00 00 
3155   22BA 00 00 00 00 
3155   22BE 00 00 00 00 
3155   22C2 00 00 00 00 
3155   22C6 00 00 00 00 
3155   22CA 00 00 00 00 
3155   22CE 00 00 00 00 
3155   22D2 00 00 00 00 
3155   22D6 00 00 00 00 
3155   22DA 00 00 00 00 
3155   22DE 00 00 00 00 
3155   22E2 00 00 00 00 
3155   22E6 00 00 00 00 
3155   22EA 00 00 00 00 
3155   22EE 00 00 00 00 
3155   22F2 00 00 00 00 
3155   22F6 00 00 00 00 
3155   22FA 00 00 00 00 
3155   22FE 00 00 00 00 
3155   2302 00 00 00 00 
3155   2306 00 00 00 00 
3155   230A 00 00 00 00 
3155   230E 00 00 00 00 
3155   2312 00 00 00 00 
3155   2316 00 00 00 00 
3155   231A 00 00 00 00 
3155   231E 00 00 00 00 
3155   2322 00 00 00 00 
3155   2326 00 00 00 00 
3155   232A 00 00 00 00 
3155   232E 00 00 00 00 
3155   2332 00 00 00 00 
3155   2336 00 00 00 00 
3155   233A 00 00 00 00 
3155   233E 00 00 00 00 
3155   2342 00 00 00 00 
3155   2346 00 00 00 00 
3155   234A 00 00 00 00 
3155   234E 00 00 00 00 
3155   2352 00 00 00 00 
3155   2356 00 00 00 00 
3155   235A 00 00 00 00 
3155   235E 00 00 00 00 
3155   2362 00 00 00 00 
3155   2366 00 00 00 00 
3155   236A 00 00 00 00 
3155   236E 00 00 00 00 
3155   2372 00 00 00 00 
3155   2376 00 00 00 00 
3155   237A 00 00 00 00 
3155   237E 00 00 00 00 
3155   2382 00 00 00 00 
3155   2386 00 00 00 00 
3155   238A 00 00 00 00 
3155   238E 00 00 00 00 
3155   2392 00 00 00 00 
3155   2396 00 00 00 00 
3155   239A 00 00 00 00 
3155   239E 00 00 00 00 
3155   23A2 00 00 00 00 
3155   23A6 00 00 00 00 
3155   23AA 00 00 00 00 
3155   23AE 00 00 00 00 
3155   23B2 00 00 00 00 
3155   23B6 00 00 00 00 
3155   23BA 00 00 00 00 
3156   23BE 20 20 20 20 _currState_data: .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3156   23C2 20 20 20 20 
3156   23C6 20 20 20 20 
3156   23CA 20 20 20 
3157   23CD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3157   23D1 20 20 20 20 
3157   23D5 20 20 20 20 
3157   23D9 20 20 20 20 
3158   23DD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3158   23E1 20 20 20 20 
3158   23E5 20 20 20 20 
3158   23E9 20 20 20 20 
3159   23ED 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3159   23F1 20 20 20 20 
3159   23F5 20 20 20 20 
3159   23F9 20 20 20 20 
3160   23FD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3160   2401 20 20 20 20 
3160   2405 20 20 20 20 
3160   2409 20 20 20 20 
3161   240D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3161   2411 20 20 20 20 
3161   2415 20 20 20 20 
3161   2419 20 20 20 20 
3162   241D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3162   2421 20 20 20 20 
3162   2425 20 20 20 20 
3162   2429 20 20 20 20 
3163   242D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3163   2431 20 20 20 20 
3163   2435 20 20 20 20 
3163   2439 20 20 20 20 
3164   243D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3164   2441 20 20 20 20 
3164   2445 20 20 20 20 
3164   2449 20 20 20 20 
3165   244D 20 20 20 20 .db $20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3165   2451 40 20 20 20 
3165   2455 20 20 20 20 
3165   2459 20 20 20 20 
3166   245D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3166   2461 20 20 20 20 
3166   2465 20 20 20 20 
3166   2469 20 20 20 20 
3167   246D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,
3167   2471 20 20 20 20 
3167   2475 20 20 40 20 
3167   2479 40 20 20 20 
3168   247D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3168   2481 20 20 20 20 
3168   2485 20 20 20 20 
3168   2489 20 20 20 20 
3169   248D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,
3169   2491 20 20 20 20 
3169   2495 40 40 20 20 
3169   2499 20 20 20 20 
3170   249D 40 40 20 20 .db $40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,
3170   24A1 20 20 20 20 
3170   24A5 20 20 20 20 
3170   24A9 20 20 40 40 
3171   24AD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,
3171   24B1 20 20 20 20 
3171   24B5 20 20 20 20 
3171   24B9 20 20 20 40 
3172   24BD 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,
3172   24C1 20 20 20 20 
3172   24C5 40 40 20 20 
3172   24C9 20 20 20 20 
3173   24CD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,
3173   24D1 20 20 40 40 
3173   24D5 20 20 20 20 
3173   24D9 40 40 20 20 
3174   24DD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,
3174   24E1 20 20 40 20 
3174   24E5 20 20 20 20 
3174   24E9 40 20 20 20 
3175   24ED 40 40 20 20 .db $40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3175   24F1 20 20 20 20 
3175   24F5 20 20 20 20 
3175   24F9 20 20 20 20 
3176   24FD 20 20 20 20 .db $20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,
3176   2501 40 40 20 20 
3176   2505 20 20 20 20 
3176   2509 20 20 40 20 
3177   250D 20 20 40 20 .db $20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,
3177   2511 40 40 20 20 
3177   2515 20 20 40 20 
3177   2519 40 20 20 20 
3178   251D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3178   2521 20 20 20 20 
3178   2525 20 20 20 20 
3178   2529 20 20 20 20 
3179   252D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,
3179   2531 20 20 40 20 
3179   2535 20 20 20 20 
3179   2539 40 20 20 20 
3180   253D 20 20 20 20 .db $20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3180   2541 40 20 20 20 
3180   2545 20 20 20 20 
3180   2549 20 20 20 20 
3181   254D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,
3181   2551 20 20 20 20 
3181   2555 20 20 20 20 
3181   2559 20 20 20 40 
3182   255D 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3182   2561 20 20 20 20 
3182   2565 20 20 20 20 
3182   2569 20 20 20 20 
3183   256D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3183   2571 20 20 20 20 
3183   2575 20 20 20 20 
3183   2579 20 20 20 20 
3184   257D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,
3184   2581 20 20 20 20 
3184   2585 40 40 20 20 
3184   2589 20 20 20 20 
3185   258D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3185   2591 20 20 20 20 
3185   2595 20 20 20 20 
3185   2599 20 20 20 20 
3186   259D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3186   25A1 20 20 20 20 
3186   25A5 20 20 20 20 
3186   25A9 20 20 20 20 
3187   25AD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3187   25B1 20 20 20 20 
3187   25B5 20 20 20 20 
3187   25B9 20 20 20 20 
3188   25BD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3188   25C1 20 20 20 20 
3188   25C5 20 20 20 20 
3188   25C9 20 20 20 20 
3189   25CD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3189   25D1 20 20 20 20 
3189   25D5 20 20 20 20 
3189   25D9 20 20 20 20 
3190   25DD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3190   25E1 20 20 20 20 
3190   25E5 20 20 20 20 
3190   25E9 20 20 20 20 
3191   25ED 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3191   25F1 20 20 20 20 
3191   25F5 20 20 20 20 
3191   25F9 20 20 20 20 
3192   25FD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3192   2601 20 20 20 20 
3192   2605 20 20 20 20 
3192   2609 20 20 20 20 
3193   260D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3193   2611 20 20 20 20 
3193   2615 20 20 20 20 
3193   2619 20 20 20 20 
3194   261D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3194   2621 20 20 20 20 
3194   2625 20 20 20 20 
3194   2629 20 20 20 20 
3195   262D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3195   2631 20 20 20 20 
3195   2635 20 20 20 20 
3195   2639 20 20 20 20 
3196   263D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3196   2641 20 20 20 20 
3196   2645 20 20 20 20 
3196   2649 20 20 20 20 
3197   264D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3197   2651 20 20 20 20 
3197   2655 20 20 20 20 
3197   2659 20 20 20 20 
3198   265D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3198   2661 20 20 20 20 
3198   2665 20 20 20 20 
3198   2669 20 20 20 20 
3199   266D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3199   2671 20 20 20 20 
3199   2675 20 20 20 20 
3199   2679 20 20 20 20 
3200   267D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3200   2681 20 20 20 20 
3200   2685 20 20 20 20 
3200   2689 20 20 20 20 
3201   268D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3201   2691 20 20 20 20 
3201   2695 20 20 20 20 
3201   2699 20 20 20 20 
3202   269D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3202   26A1 20 20 20 20 
3202   26A5 20 20 20 20 
3202   26A9 20 20 20 20 
3203   26AD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3203   26B1 20 20 20 20 
3203   26B5 20 20 20 20 
3203   26B9 20 20 20 20 
3204   26BD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3204   26C1 20 20 20 20 
3204   26C5 20 20 20 20 
3204   26C9 20 20 20 20 
3205   26CD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3205   26D1 20 20 20 20 
3205   26D5 20 20 20 20 
3205   26D9 20 20 20 20 
3206   26DD 20          .db $20,
3207   26DE             
3208   26DE 00 00 00 00 .fill 2200, 0
3208   26E2 00 00 00 00 
3208   26E6 00 00 00 00 
3208   26EA 00 00 00 00 
3208   26EE 00 00 00 00 
3208   26F2 00 00 00 00 
3208   26F6 00 00 00 00 
3208   26FA 00 00 00 00 
3208   26FE 00 00 00 00 
3208   2702 00 00 00 00 
3208   2706 00 00 00 00 
3208   270A 00 00 00 00 
3208   270E 00 00 00 00 
3208   2712 00 00 00 00 
3208   2716 00 00 00 00 
3208   271A 00 00 00 00 
3208   271E 00 00 00 00 
3208   2722 00 00 00 00 
3208   2726 00 00 00 00 
3208   272A 00 00 00 00 
3208   272E 00 00 00 00 
3208   2732 00 00 00 00 
3208   2736 00 00 00 00 
3208   273A 00 00 00 00 
3208   273E 00 00 00 00 
3208   2742 00 00 00 00 
3208   2746 00 00 00 00 
3208   274A 00 00 00 00 
3208   274E 00 00 00 00 
3208   2752 00 00 00 00 
3208   2756 00 00 00 00 
3208   275A 00 00 00 00 
3208   275E 00 00 00 00 
3208   2762 00 00 00 00 
3208   2766 00 00 00 00 
3208   276A 00 00 00 00 
3208   276E 00 00 00 00 
3208   2772 00 00 00 00 
3208   2776 00 00 00 00 
3208   277A 00 00 00 00 
3208   277E 00 00 00 00 
3208   2782 00 00 00 00 
3208   2786 00 00 00 00 
3208   278A 00 00 00 00 
3208   278E 00 00 00 00 
3208   2792 00 00 00 00 
3208   2796 00 00 00 00 
3208   279A 00 00 00 00 
3208   279E 00 00 00 00 
3208   27A2 00 00 00 00 
3208   27A6 00 00 00 00 
3208   27AA 00 00 00 00 
3208   27AE 00 00 00 00 
3208   27B2 00 00 00 00 
3208   27B6 00 00 00 00 
3208   27BA 00 00 00 00 
3208   27BE 00 00 00 00 
3208   27C2 00 00 00 00 
3208   27C6 00 00 00 00 
3208   27CA 00 00 00 00 
3208   27CE 00 00 00 00 
3208   27D2 00 00 00 00 
3208   27D6 00 00 00 00 
3208   27DA 00 00 00 00 
3208   27DE 00 00 00 00 
3208   27E2 00 00 00 00 
3208   27E6 00 00 00 00 
3208   27EA 00 00 00 00 
3208   27EE 00 00 00 00 
3208   27F2 00 00 00 00 
3208   27F6 00 00 00 00 
3208   27FA 00 00 00 00 
3208   27FE 00 00 00 00 
3208   2802 00 00 00 00 
3208   2806 00 00 00 00 
3208   280A 00 00 00 00 
3208   280E 00 00 00 00 
3208   2812 00 00 00 00 
3208   2816 00 00 00 00 
3208   281A 00 00 00 00 
3208   281E 00 00 00 00 
3208   2822 00 00 00 00 
3208   2826 00 00 00 00 
3208   282A 00 00 00 00 
3208   282E 00 00 00 00 
3208   2832 00 00 00 00 
3208   2836 00 00 00 00 
3208   283A 00 00 00 00 
3208   283E 00 00 00 00 
3208   2842 00 00 00 00 
3208   2846 00 00 00 00 
3208   284A 00 00 00 00 
3208   284E 00 00 00 00 
3208   2852 00 00 00 00 
3208   2856 00 00 00 00 
3208   285A 00 00 00 00 
3208   285E 00 00 00 00 
3208   2862 00 00 00 00 
3208   2866 00 00 00 00 
3208   286A 00 00 00 00 
3208   286E 00 00 00 00 
3208   2872 00 00 00 00 
3208   2876 00 00 00 00 
3208   287A 00 00 00 00 
3208   287E 00 00 00 00 
3208   2882 00 00 00 00 
3208   2886 00 00 00 00 
3208   288A 00 00 00 00 
3208   288E 00 00 00 00 
3208   2892 00 00 00 00 
3208   2896 00 00 00 00 
3208   289A 00 00 00 00 
3208   289E 00 00 00 00 
3208   28A2 00 00 00 00 
3208   28A6 00 00 00 00 
3208   28AA 00 00 00 00 
3208   28AE 00 00 00 00 
3208   28B2 00 00 00 00 
3208   28B6 00 00 00 00 
3208   28BA 00 00 00 00 
3208   28BE 00 00 00 00 
3208   28C2 00 00 00 00 
3208   28C6 00 00 00 00 
3208   28CA 00 00 00 00 
3208   28CE 00 00 00 00 
3208   28D2 00 00 00 00 
3208   28D6 00 00 00 00 
3208   28DA 00 00 00 00 
3208   28DE 00 00 00 00 
3208   28E2 00 00 00 00 
3208   28E6 00 00 00 00 
3208   28EA 00 00 00 00 
3208   28EE 00 00 00 00 
3208   28F2 00 00 00 00 
3208   28F6 00 00 00 00 
3208   28FA 00 00 00 00 
3208   28FE 00 00 00 00 
3208   2902 00 00 00 00 
3208   2906 00 00 00 00 
3208   290A 00 00 00 00 
3208   290E 00 00 00 00 
3208   2912 00 00 00 00 
3208   2916 00 00 00 00 
3208   291A 00 00 00 00 
3208   291E 00 00 00 00 
3208   2922 00 00 00 00 
3208   2926 00 00 00 00 
3208   292A 00 00 00 00 
3208   292E 00 00 00 00 
3208   2932 00 00 00 00 
3208   2936 00 00 00 00 
3208   293A 00 00 00 00 
3208   293E 00 00 00 00 
3208   2942 00 00 00 00 
3208   2946 00 00 00 00 
3208   294A 00 00 00 00 
3208   294E 00 00 00 00 
3208   2952 00 00 00 00 
3208   2956 00 00 00 00 
3208   295A 00 00 00 00 
3208   295E 00 00 00 00 
3208   2962 00 00 00 00 
3208   2966 00 00 00 00 
3208   296A 00 00 00 00 
3208   296E 00 00 00 00 
3208   2972 00 00 00 00 
3208   2976 00 00 00 00 
3208   297A 00 00 00 00 
3208   297E 00 00 00 00 
3208   2982 00 00 00 00 
3208   2986 00 00 00 00 
3208   298A 00 00 00 00 
3208   298E 00 00 00 00 
3208   2992 00 00 00 00 
3208   2996 00 00 00 00 
3208   299A 00 00 00 00 
3208   299E 00 00 00 00 
3208   29A2 00 00 00 00 
3208   29A6 00 00 00 00 
3208   29AA 00 00 00 00 
3208   29AE 00 00 00 00 
3208   29B2 00 00 00 00 
3208   29B6 00 00 00 00 
3208   29BA 00 00 00 00 
3208   29BE 00 00 00 00 
3208   29C2 00 00 00 00 
3208   29C6 00 00 00 00 
3208   29CA 00 00 00 00 
3208   29CE 00 00 00 00 
3208   29D2 00 00 00 00 
3208   29D6 00 00 00 00 
3208   29DA 00 00 00 00 
3208   29DE 00 00 00 00 
3208   29E2 00 00 00 00 
3208   29E6 00 00 00 00 
3208   29EA 00 00 00 00 
3208   29EE 00 00 00 00 
3208   29F2 00 00 00 00 
3208   29F6 00 00 00 00 
3208   29FA 00 00 00 00 
3208   29FE 00 00 00 00 
3208   2A02 00 00 00 00 
3208   2A06 00 00 00 00 
3208   2A0A 00 00 00 00 
3208   2A0E 00 00 00 00 
3208   2A12 00 00 00 00 
3208   2A16 00 00 00 00 
3208   2A1A 00 00 00 00 
3208   2A1E 00 00 00 00 
3208   2A22 00 00 00 00 
3208   2A26 00 00 00 00 
3208   2A2A 00 00 00 00 
3208   2A2E 00 00 00 00 
3208   2A32 00 00 00 00 
3208   2A36 00 00 00 00 
3208   2A3A 00 00 00 00 
3208   2A3E 00 00 00 00 
3208   2A42 00 00 00 00 
3208   2A46 00 00 00 00 
3208   2A4A 00 00 00 00 
3208   2A4E 00 00 00 00 
3208   2A52 00 00 00 00 
3208   2A56 00 00 00 00 
3208   2A5A 00 00 00 00 
3208   2A5E 00 00 00 00 
3208   2A62 00 00 00 00 
3208   2A66 00 00 00 00 
3208   2A6A 00 00 00 00 
3208   2A6E 00 00 00 00 
3208   2A72 00 00 00 00 
3208   2A76 00 00 00 00 
3208   2A7A 00 00 00 00 
3208   2A7E 00 00 00 00 
3208   2A82 00 00 00 00 
3208   2A86 00 00 00 00 
3208   2A8A 00 00 00 00 
3208   2A8E 00 00 00 00 
3208   2A92 00 00 00 00 
3208   2A96 00 00 00 00 
3208   2A9A 00 00 00 00 
3208   2A9E 00 00 00 00 
3208   2AA2 00 00 00 00 
3208   2AA6 00 00 00 00 
3208   2AAA 00 00 00 00 
3208   2AAE 00 00 00 00 
3208   2AB2 00 00 00 00 
3208   2AB6 00 00 00 00 
3208   2ABA 00 00 00 00 
3208   2ABE 00 00 00 00 
3208   2AC2 00 00 00 00 
3208   2AC6 00 00 00 00 
3208   2ACA 00 00 00 00 
3208   2ACE 00 00 00 00 
3208   2AD2 00 00 00 00 
3208   2AD6 00 00 00 00 
3208   2ADA 00 00 00 00 
3208   2ADE 00 00 00 00 
3208   2AE2 00 00 00 00 
3208   2AE6 00 00 00 00 
3208   2AEA 00 00 00 00 
3208   2AEE 00 00 00 00 
3208   2AF2 00 00 00 00 
3208   2AF6 00 00 00 00 
3208   2AFA 00 00 00 00 
3208   2AFE 00 00 00 00 
3208   2B02 00 00 00 00 
3208   2B06 00 00 00 00 
3208   2B0A 00 00 00 00 
3208   2B0E 00 00 00 00 
3208   2B12 00 00 00 00 
3208   2B16 00 00 00 00 
3208   2B1A 00 00 00 00 
3208   2B1E 00 00 00 00 
3208   2B22 00 00 00 00 
3208   2B26 00 00 00 00 
3208   2B2A 00 00 00 00 
3208   2B2E 00 00 00 00 
3208   2B32 00 00 00 00 
3208   2B36 00 00 00 00 
3208   2B3A 00 00 00 00 
3208   2B3E 00 00 00 00 
3208   2B42 00 00 00 00 
3208   2B46 00 00 00 00 
3208   2B4A 00 00 00 00 
3208   2B4E 00 00 00 00 
3208   2B52 00 00 00 00 
3208   2B56 00 00 00 00 
3208   2B5A 00 00 00 00 
3208   2B5E 00 00 00 00 
3208   2B62 00 00 00 00 
3208   2B66 00 00 00 00 
3208   2B6A 00 00 00 00 
3208   2B6E 00 00 00 00 
3208   2B72 00 00 00 00 
3208   2B76 00 00 00 00 
3208   2B7A 00 00 00 00 
3208   2B7E 00 00 00 00 
3208   2B82 00 00 00 00 
3208   2B86 00 00 00 00 
3208   2B8A 00 00 00 00 
3208   2B8E 00 00 00 00 
3208   2B92 00 00 00 00 
3208   2B96 00 00 00 00 
3208   2B9A 00 00 00 00 
3208   2B9E 00 00 00 00 
3208   2BA2 00 00 00 00 
3208   2BA6 00 00 00 00 
3208   2BAA 00 00 00 00 
3208   2BAE 00 00 00 00 
3208   2BB2 00 00 00 00 
3208   2BB6 00 00 00 00 
3208   2BBA 00 00 00 00 
3208   2BBE 00 00 00 00 
3208   2BC2 00 00 00 00 
3208   2BC6 00 00 00 00 
3208   2BCA 00 00 00 00 
3208   2BCE 00 00 00 00 
3208   2BD2 00 00 00 00 
3208   2BD6 00 00 00 00 
3208   2BDA 00 00 00 00 
3208   2BDE 00 00 00 00 
3208   2BE2 00 00 00 00 
3208   2BE6 00 00 00 00 
3208   2BEA 00 00 00 00 
3208   2BEE 00 00 00 00 
3208   2BF2 00 00 00 00 
3208   2BF6 00 00 00 00 
3208   2BFA 00 00 00 00 
3208   2BFE 00 00 00 00 
3208   2C02 00 00 00 00 
3208   2C06 00 00 00 00 
3208   2C0A 00 00 00 00 
3208   2C0E 00 00 00 00 
3208   2C12 00 00 00 00 
3208   2C16 00 00 00 00 
3208   2C1A 00 00 00 00 
3208   2C1E 00 00 00 00 
3208   2C22 00 00 00 00 
3208   2C26 00 00 00 00 
3208   2C2A 00 00 00 00 
3208   2C2E 00 00 00 00 
3208   2C32 00 00 00 00 
3208   2C36 00 00 00 00 
3208   2C3A 00 00 00 00 
3208   2C3E 00 00 00 00 
3208   2C42 00 00 00 00 
3208   2C46 00 00 00 00 
3208   2C4A 00 00 00 00 
3208   2C4E 00 00 00 00 
3208   2C52 00 00 00 00 
3208   2C56 00 00 00 00 
3208   2C5A 00 00 00 00 
3208   2C5E 00 00 00 00 
3208   2C62 00 00 00 00 
3208   2C66 00 00 00 00 
3208   2C6A 00 00 00 00 
3208   2C6E 00 00 00 00 
3208   2C72 00 00 00 00 
3208   2C76 00 00 00 00 
3208   2C7A 00 00 00 00 
3208   2C7E 00 00 00 00 
3208   2C82 00 00 00 00 
3208   2C86 00 00 00 00 
3208   2C8A 00 00 00 00 
3208   2C8E 00 00 00 00 
3208   2C92 00 00 00 00 
3208   2C96 00 00 00 00 
3208   2C9A 00 00 00 00 
3208   2C9E 00 00 00 00 
3208   2CA2 00 00 00 00 
3208   2CA6 00 00 00 00 
3208   2CAA 00 00 00 00 
3208   2CAE 00 00 00 00 
3208   2CB2 00 00 00 00 
3208   2CB6 00 00 00 00 
3208   2CBA 00 00 00 00 
3208   2CBE 00 00 00 00 
3208   2CC2 00 00 00 00 
3208   2CC6 00 00 00 00 
3208   2CCA 00 00 00 00 
3208   2CCE 00 00 00 00 
3208   2CD2 00 00 00 00 
3208   2CD6 00 00 00 00 
3208   2CDA 00 00 00 00 
3208   2CDE 00 00 00 00 
3208   2CE2 00 00 00 00 
3208   2CE6 00 00 00 00 
3208   2CEA 00 00 00 00 
3208   2CEE 00 00 00 00 
3208   2CF2 00 00 00 00 
3208   2CF6 00 00 00 00 
3208   2CFA 00 00 00 00 
3208   2CFE 00 00 00 00 
3208   2D02 00 00 00 00 
3208   2D06 00 00 00 00 
3208   2D0A 00 00 00 00 
3208   2D0E 00 00 00 00 
3208   2D12 00 00 00 00 
3208   2D16 00 00 00 00 
3208   2D1A 00 00 00 00 
3208   2D1E 00 00 00 00 
3208   2D22 00 00 00 00 
3208   2D26 00 00 00 00 
3208   2D2A 00 00 00 00 
3208   2D2E 00 00 00 00 
3208   2D32 00 00 00 00 
3208   2D36 00 00 00 00 
3208   2D3A 00 00 00 00 
3208   2D3E 00 00 00 00 
3208   2D42 00 00 00 00 
3208   2D46 00 00 00 00 
3208   2D4A 00 00 00 00 
3208   2D4E 00 00 00 00 
3208   2D52 00 00 00 00 
3208   2D56 00 00 00 00 
3208   2D5A 00 00 00 00 
3208   2D5E 00 00 00 00 
3208   2D62 00 00 00 00 
3208   2D66 00 00 00 00 
3208   2D6A 00 00 00 00 
3208   2D6E 00 00 00 00 
3208   2D72 00 00 00 00 
3208   2D76 00 00 00 00 
3208   2D7A 00 00 00 00 
3208   2D7E 00 00 00 00 
3208   2D82 00 00 00 00 
3208   2D86 00 00 00 00 
3208   2D8A 00 00 00 00 
3208   2D8E 00 00 00 00 
3208   2D92 00 00 00 00 
3208   2D96 00 00 00 00 
3208   2D9A 00 00 00 00 
3208   2D9E 00 00 00 00 
3208   2DA2 00 00 00 00 
3208   2DA6 00 00 00 00 
3208   2DAA 00 00 00 00 
3208   2DAE 00 00 00 00 
3208   2DB2 00 00 00 00 
3208   2DB6 00 00 00 00 
3208   2DBA 00 00 00 00 
3208   2DBE 00 00 00 00 
3208   2DC2 00 00 00 00 
3208   2DC6 00 00 00 00 
3208   2DCA 00 00 00 00 
3208   2DCE 00 00 00 00 
3208   2DD2 00 00 00 00 
3208   2DD6 00 00 00 00 
3208   2DDA 00 00 00 00 
3208   2DDE 00 00 00 00 
3208   2DE2 00 00 00 00 
3208   2DE6 00 00 00 00 
3208   2DEA 00 00 00 00 
3208   2DEE 00 00 00 00 
3208   2DF2 00 00 00 00 
3208   2DF6 00 00 00 00 
3208   2DFA 00 00 00 00 
3208   2DFE 00 00 00 00 
3208   2E02 00 00 00 00 
3208   2E06 00 00 00 00 
3208   2E0A 00 00 00 00 
3208   2E0E 00 00 00 00 
3208   2E12 00 00 00 00 
3208   2E16 00 00 00 00 
3208   2E1A 00 00 00 00 
3208   2E1E 00 00 00 00 
3208   2E22 00 00 00 00 
3208   2E26 00 00 00 00 
3208   2E2A 00 00 00 00 
3208   2E2E 00 00 00 00 
3208   2E32 00 00 00 00 
3208   2E36 00 00 00 00 
3208   2E3A 00 00 00 00 
3208   2E3E 00 00 00 00 
3208   2E42 00 00 00 00 
3208   2E46 00 00 00 00 
3208   2E4A 00 00 00 00 
3208   2E4E 00 00 00 00 
3208   2E52 00 00 00 00 
3208   2E56 00 00 00 00 
3208   2E5A 00 00 00 00 
3208   2E5E 00 00 00 00 
3208   2E62 00 00 00 00 
3208   2E66 00 00 00 00 
3208   2E6A 00 00 00 00 
3208   2E6E 00 00 00 00 
3208   2E72 00 00 00 00 
3208   2E76 00 00 00 00 
3208   2E7A 00 00 00 00 
3208   2E7E 00 00 00 00 
3208   2E82 00 00 00 00 
3208   2E86 00 00 00 00 
3208   2E8A 00 00 00 00 
3208   2E8E 00 00 00 00 
3208   2E92 00 00 00 00 
3208   2E96 00 00 00 00 
3208   2E9A 00 00 00 00 
3208   2E9E 00 00 00 00 
3208   2EA2 00 00 00 00 
3208   2EA6 00 00 00 00 
3208   2EAA 00 00 00 00 
3208   2EAE 00 00 00 00 
3208   2EB2 00 00 00 00 
3208   2EB6 00 00 00 00 
3208   2EBA 00 00 00 00 
3208   2EBE 00 00 00 00 
3208   2EC2 00 00 00 00 
3208   2EC6 00 00 00 00 
3208   2ECA 00 00 00 00 
3208   2ECE 00 00 00 00 
3208   2ED2 00 00 00 00 
3208   2ED6 00 00 00 00 
3208   2EDA 00 00 00 00 
3208   2EDE 00 00 00 00 
3208   2EE2 00 00 00 00 
3208   2EE6 00 00 00 00 
3208   2EEA 00 00 00 00 
3208   2EEE 00 00 00 00 
3208   2EF2 00 00 00 00 
3208   2EF6 00 00 00 00 
3208   2EFA 00 00 00 00 
3208   2EFE 00 00 00 00 
3208   2F02 00 00 00 00 
3208   2F06 00 00 00 00 
3208   2F0A 00 00 00 00 
3208   2F0E 00 00 00 00 
3208   2F12 00 00 00 00 
3208   2F16 00 00 00 00 
3208   2F1A 00 00 00 00 
3208   2F1E 00 00 00 00 
3208   2F22 00 00 00 00 
3208   2F26 00 00 00 00 
3208   2F2A 00 00 00 00 
3208   2F2E 00 00 00 00 
3208   2F32 00 00 00 00 
3208   2F36 00 00 00 00 
3208   2F3A 00 00 00 00 
3208   2F3E 00 00 00 00 
3208   2F42 00 00 00 00 
3208   2F46 00 00 00 00 
3208   2F4A 00 00 00 00 
3208   2F4E 00 00 00 00 
3208   2F52 00 00 00 00 
3208   2F56 00 00 00 00 
3208   2F5A 00 00 00 00 
3208   2F5E 00 00 00 00 
3208   2F62 00 00 00 00 
3208   2F66 00 00 00 00 
3208   2F6A 00 00 00 00 
3208   2F6E 00 00 00 00 
3208   2F72 00 00 00 00 
3209   2F76 1B 5B 32 4A _clear_data: .db $1b,$5b,$32,$4a,$00,
3209   2F7A 00 
3210   2F7B             
3211   2F7B 00 00       .fill 2, 0
3212   2F7D 41 6C 6C 20 _s0: .db "All cells dead. Press CTRL+C to quit.", 0
3212   2F81 63 65 6C 6C 
3212   2F85 73 20 64 65 
3212   2F89 61 64 2E 20 
3212   2F8D 50 72 65 73 
3212   2F91 73 20 43 54 
3212   2F95 52 4C 2B 43 
3212   2F99 20 74 6F 20 
3212   2F9D 71 75 69 74 
3212   2FA1 2E 00 
3213   2FA3 50 72 65 73 _s1: .db "Press CTRL+C to quit.", 0
3213   2FA7 73 20 43 54 
3213   2FAB 52 4C 2B 43 
3213   2FAF 20 74 6F 20 
3213   2FB3 71 75 69 74 
3213   2FB7 2E 00 
3214   2FB9 1B 5B 25 64 _s2: .db "\033[%d;%dH", 0
3214   2FBD 3B 25 64 48 
3214   2FC1 00 
3215   2FC2 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
3215   2FC6 70 65 63 74 
3215   2FCA 65 64 20 66 
3215   2FCE 6F 72 6D 61 
3215   2FD2 74 20 69 6E 
3215   2FD6 20 70 72 69 
3215   2FDA 6E 74 66 2E 
3215   2FDE 00 
3216   2FDF 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
3216   2FE3 72 3A 20 55 
3216   2FE7 6E 6B 6E 6F 
3216   2FEB 77 6E 20 61 
3216   2FEF 72 67 75 6D 
3216   2FF3 65 6E 74 20 
3216   2FF7 74 79 70 65 
3216   2FFB 2E 0A 00 
3217   2FFE             
3218   2FFE 00 30       _heap_top: .dw _heap
3219   3000 00          _heap: .db 0
3220   3001             ; --- END DATA SEGMENT
3221   3001             
3222   3001             .end
tasm: Number of errors = 0
