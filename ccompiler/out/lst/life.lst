0001   0000             ; --- FILENAME: programs/life.c
0002   0000             ; --- DATE:     22-07-2025 at 15:14:36
0003   0000             .include "lib/asm/kernel.exp"
0001+  0000             fdc_al_restore   .EQU  $0000
0002+  0000             fdc_al_step      .EQU  $0001
0003+  0000             fdc_al_step_in   .EQU  $0002
0004+  0000             fdc_al_step_out  .EQU  $0003
0005+  0000             fdc_al_seek      .EQU  $0004
0006+  0000             fdc_al_format_128 .EQU  $0005
0007+  0000             fdc_al_formatdisk_128 .EQU  $0006
0008+  0000             fdc_al_format_512 .EQU  $0007
0009+  0000             fdc_al_formatdisk_512 .EQU  $0008
0010+  0000             fdc_al_read_addr .EQU  $0009
0011+  0000             fdc_al_read_track .EQU  $000a
0012+  0000             fdc_al_read_sect .EQU  $000b
0013+  0000             fdc_al_write_sect .EQU  $000c
0014+  0000             fdc_al_force_int .EQU  $000d
0015+  0000             fdc_al_status0   .EQU  $000e
0016+  0000             fdc_al_status1   .EQU  $000f
0017+  0000             noname._7seg_display .EQU  $ffb0
0018+  0000             noname._fdc_config .EQU  $ffc0
0019+  0000             noname._fdc_status_0 .EQU  $ffc1
0020+  0000             noname._fdc_stat_cmd .EQU  $ffc8
0021+  0000             sys_break        .EQU  $0000
0022+  0000             sys_rtc          .EQU  $0001
0023+  0000             sys_ide          .EQU  $0002
0024+  0000             sys_io           .EQU  $0003
0025+  0000             sys_filesystem   .EQU  $0004
0026+  0000             sys_create_proc  .EQU  $0005
0027+  0000             sys_list_proc    .EQU  $0006
0028+  0000             sys_datetime     .EQU  $0007
0029+  0000             sys_reboot       .EQU  $0008
0030+  0000             sys_pause_proc   .EQU  $0009
0031+  0000             sys_resume_proc  .EQU  $000a
0032+  0000             sys_terminate_proc .EQU  $000b
0033+  0000             sys_system       .EQU  $000c
0034+  0000             sys_fdc          .EQU  $000d
0035+  0000             text_org         .EQU  $0400
0004   0000             .include "lib/asm/bios.exp"
0001+  0000             bios_reset_vector .equ  $01c0
0002+  0000             ide_buffer       .equ  $8204
0003+  0000             boot_origin      .equ  $8004
0004+  0000             bios_uart        .equ  $0002
0005+  0000             bios_ide         .equ  $0003
0005   0000             
0006   0000             ; --- BEGIN TEXT SEGMENT
0007   0400             .org text_org
0008   0400             main:
0009   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0010   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0011   0408             ; int i, j; 
0012   0408 52 02 00      sub sp, 2
0013   040B 52 02 00      sub sp, 2
0014   040E             ; int n; 
0015   040E 52 02 00      sub sp, 2
0016   0411             ; for(i = 0; i <  30      ; i++){ 
0017   0411             _for1_init:
0018   0411 FA FF FF      lea d, [bp + -1] ; $i
0019   0414 DA            push d
0020   0415 FD 2E 00 00   mov32 cb, $00000000
0020   0419 00 00 
0021   041B E7            pop d
0022   041C FD 43         mov [d], b
0023   041E             _for1_cond:
0024   041E FA FF FF      lea d, [bp + -1] ; $i
0025   0421 2A            mov b, [d]
0026   0422 38 00 00      mov c, 0
0027   0425             ; --- START RELATIONAL
0028   0425 D7            push a
0029   0426 11            mov a, b
0030   0427 FD 2E 1E 00   mov32 cb, $0000001e
0030   042B 00 00 
0031   042D B0            cmp a, b
0032   042E FD 73         slt ; < (signed)
0033   0430 E4            pop a
0034   0431             ; --- END RELATIONAL
0035   0431 C0 00 00      cmp b, 0
0036   0434 C6 C5 04      je _for1_exit
0037   0437             _for1_block:
0038   0437             ; for(j = 0; j <   40     ; j++){ 
0039   0437             _for2_init:
0040   0437 FA FD FF      lea d, [bp + -3] ; $j
0041   043A DA            push d
0042   043B FD 2E 00 00   mov32 cb, $00000000
0042   043F 00 00 
0043   0441 E7            pop d
0044   0442 FD 43         mov [d], b
0045   0444             _for2_cond:
0046   0444 FA FD FF      lea d, [bp + -3] ; $j
0047   0447 2A            mov b, [d]
0048   0448 38 00 00      mov c, 0
0049   044B             ; --- START RELATIONAL
0050   044B D7            push a
0051   044C 11            mov a, b
0052   044D FD 2E 28 00   mov32 cb, $00000028
0052   0451 00 00 
0053   0453 B0            cmp a, b
0054   0454 FD 73         slt ; < (signed)
0055   0456 E4            pop a
0056   0457             ; --- END RELATIONAL
0057   0457 C0 00 00      cmp b, 0
0058   045A C6 B2 04      je _for2_exit
0059   045D             _for2_block:
0060   045D             ; nextState[i][j] = currState[i][j]; 
0061   045D 3B 97 13      mov d, _nextState_data ; $nextState
0062   0460 D7            push a
0063   0461 DA            push d
0064   0462 FA FF FF      lea d, [bp + -1] ; $i
0065   0465 2A            mov b, [d]
0066   0466 38 00 00      mov c, 0
0067   0469 E7            pop d
0068   046A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0069   046E DA            push d
0070   046F FA FD FF      lea d, [bp + -3] ; $j
0071   0472 2A            mov b, [d]
0072   0473 38 00 00      mov c, 0
0073   0476 E7            pop d
0074   0477 5A            add d, b
0075   0478 E4            pop a
0076   0479 DA            push d
0077   047A 3B 47 18      mov d, _currState_data ; $currState
0078   047D D7            push a
0079   047E DA            push d
0080   047F FA FF FF      lea d, [bp + -1] ; $i
0081   0482 2A            mov b, [d]
0082   0483 38 00 00      mov c, 0
0083   0486 E7            pop d
0084   0487 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0085   048B DA            push d
0086   048C FA FD FF      lea d, [bp + -3] ; $j
0087   048F 2A            mov b, [d]
0088   0490 38 00 00      mov c, 0
0089   0493 E7            pop d
0090   0494 5A            add d, b
0091   0495 E4            pop a
0092   0496 32            mov bl, [d]
0093   0497 A7 00         mov bh, 0
0094   0499 38 00 00      mov c, 0
0095   049C E7            pop d
0096   049D FD 3E         mov [d], bl
0097   049F             _for2_update:
0098   049F FA FD FF      lea d, [bp + -3] ; $j
0099   04A2 2A            mov b, [d]
0100   04A3 38 00 00      mov c, 0
0101   04A6 11            mov a, b
0102   04A7 FD 77         inc b
0103   04A9 FA FD FF      lea d, [bp + -3] ; $j
0104   04AC FD 43         mov [d], b
0105   04AE 27            mov b, a
0106   04AF 0A 44 04      jmp _for2_cond
0107   04B2             _for2_exit:
0108   04B2             _for1_update:
0109   04B2 FA FF FF      lea d, [bp + -1] ; $i
0110   04B5 2A            mov b, [d]
0111   04B6 38 00 00      mov c, 0
0112   04B9 11            mov a, b
0113   04BA FD 77         inc b
0114   04BC FA FF FF      lea d, [bp + -1] ; $i
0115   04BF FD 43         mov [d], b
0116   04C1 27            mov b, a
0117   04C2 0A 1E 04      jmp _for1_cond
0118   04C5             _for1_exit:
0119   04C5             ; for(;;){ 
0120   04C5             _for3_init:
0121   04C5             _for3_cond:
0122   04C5             _for3_block:
0123   04C5             ; for(i = 1; i <  30      +-1; i++){ 
0124   04C5             _for4_init:
0125   04C5 FA FF FF      lea d, [bp + -1] ; $i
0126   04C8 DA            push d
0127   04C9 FD 2E 01 00   mov32 cb, $00000001
0127   04CD 00 00 
0128   04CF E7            pop d
0129   04D0 FD 43         mov [d], b
0130   04D2             _for4_cond:
0131   04D2 FA FF FF      lea d, [bp + -1] ; $i
0132   04D5 2A            mov b, [d]
0133   04D6 38 00 00      mov c, 0
0134   04D9             ; --- START RELATIONAL
0135   04D9 D7            push a
0136   04DA 11            mov a, b
0137   04DB FD 2E 1E 00   mov32 cb, $0000001e
0137   04DF 00 00 
0138   04E1             ; --- START TERMS
0139   04E1 D7            push a
0140   04E2 11            mov a, b
0141   04E3 FD 2E FF FF   mov32 cb, $ffffffff
0141   04E7 FF FF 
0142   04E9 56            add b, a
0143   04EA E4            pop a
0144   04EB             ; --- END TERMS
0145   04EB B0            cmp a, b
0146   04EC FD 73         slt ; < (signed)
0147   04EE E4            pop a
0148   04EF             ; --- END RELATIONAL
0149   04EF C0 00 00      cmp b, 0
0150   04F2 C6 A4 08      je _for4_exit
0151   04F5             _for4_block:
0152   04F5             ; for(j = 1; j <   40     +-1; j++){ 
0153   04F5             _for5_init:
0154   04F5 FA FD FF      lea d, [bp + -3] ; $j
0155   04F8 DA            push d
0156   04F9 FD 2E 01 00   mov32 cb, $00000001
0156   04FD 00 00 
0157   04FF E7            pop d
0158   0500 FD 43         mov [d], b
0159   0502             _for5_cond:
0160   0502 FA FD FF      lea d, [bp + -3] ; $j
0161   0505 2A            mov b, [d]
0162   0506 38 00 00      mov c, 0
0163   0509             ; --- START RELATIONAL
0164   0509 D7            push a
0165   050A 11            mov a, b
0166   050B FD 2E 28 00   mov32 cb, $00000028
0166   050F 00 00 
0167   0511             ; --- START TERMS
0168   0511 D7            push a
0169   0512 11            mov a, b
0170   0513 FD 2E FF FF   mov32 cb, $ffffffff
0170   0517 FF FF 
0171   0519 56            add b, a
0172   051A E4            pop a
0173   051B             ; --- END TERMS
0174   051B B0            cmp a, b
0175   051C FD 73         slt ; < (signed)
0176   051E E4            pop a
0177   051F             ; --- END RELATIONAL
0178   051F C0 00 00      cmp b, 0
0179   0522 C6 91 08      je _for5_exit
0180   0525             _for5_block:
0181   0525             ; n = 0; 
0182   0525 FA FB FF      lea d, [bp + -5] ; $n
0183   0528 DA            push d
0184   0529 FD 2E 00 00   mov32 cb, $00000000
0184   052D 00 00 
0185   052F E7            pop d
0186   0530 FD 43         mov [d], b
0187   0532             ; if(currState[i+-1][j] == '@')			n++; 
0188   0532             _if6_cond:
0189   0532 3B 47 18      mov d, _currState_data ; $currState
0190   0535 D7            push a
0191   0536 DA            push d
0192   0537 FA FF FF      lea d, [bp + -1] ; $i
0193   053A 2A            mov b, [d]
0194   053B 38 00 00      mov c, 0
0195   053E             ; --- START TERMS
0196   053E D7            push a
0197   053F 11            mov a, b
0198   0540 FD 2E FF FF   mov32 cb, $ffffffff
0198   0544 FF FF 
0199   0546 56            add b, a
0200   0547 E4            pop a
0201   0548             ; --- END TERMS
0202   0548 E7            pop d
0203   0549 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0204   054D DA            push d
0205   054E FA FD FF      lea d, [bp + -3] ; $j
0206   0551 2A            mov b, [d]
0207   0552 38 00 00      mov c, 0
0208   0555 E7            pop d
0209   0556 5A            add d, b
0210   0557 E4            pop a
0211   0558 32            mov bl, [d]
0212   0559 A7 00         mov bh, 0
0213   055B 38 00 00      mov c, 0
0214   055E             ; --- START RELATIONAL
0215   055E D7            push a
0216   055F 11            mov a, b
0217   0560 FD 2E 40 00   mov32 cb, $00000040
0217   0564 00 00 
0218   0566 B0            cmp a, b
0219   0567 FD 71         seq ; ==
0220   0569 E4            pop a
0221   056A             ; --- END RELATIONAL
0222   056A C0 00 00      cmp b, 0
0223   056D C6 83 05      je _if6_exit
0224   0570             _if6_TRUE:
0225   0570             ; n++; 
0226   0570 FA FB FF      lea d, [bp + -5] ; $n
0227   0573 2A            mov b, [d]
0228   0574 38 00 00      mov c, 0
0229   0577 11            mov a, b
0230   0578 FD 77         inc b
0231   057A FA FB FF      lea d, [bp + -5] ; $n
0232   057D FD 43         mov [d], b
0233   057F 27            mov b, a
0234   0580 0A 83 05      jmp _if6_exit
0235   0583             _if6_exit:
0236   0583             ; if(currState[i+-1][j+-1] == '@') 	n++; 
0237   0583             _if7_cond:
0238   0583 3B 47 18      mov d, _currState_data ; $currState
0239   0586 D7            push a
0240   0587 DA            push d
0241   0588 FA FF FF      lea d, [bp + -1] ; $i
0242   058B 2A            mov b, [d]
0243   058C 38 00 00      mov c, 0
0244   058F             ; --- START TERMS
0245   058F D7            push a
0246   0590 11            mov a, b
0247   0591 FD 2E FF FF   mov32 cb, $ffffffff
0247   0595 FF FF 
0248   0597 56            add b, a
0249   0598 E4            pop a
0250   0599             ; --- END TERMS
0251   0599 E7            pop d
0252   059A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0253   059E DA            push d
0254   059F FA FD FF      lea d, [bp + -3] ; $j
0255   05A2 2A            mov b, [d]
0256   05A3 38 00 00      mov c, 0
0257   05A6             ; --- START TERMS
0258   05A6 D7            push a
0259   05A7 11            mov a, b
0260   05A8 FD 2E FF FF   mov32 cb, $ffffffff
0260   05AC FF FF 
0261   05AE 56            add b, a
0262   05AF E4            pop a
0263   05B0             ; --- END TERMS
0264   05B0 E7            pop d
0265   05B1 5A            add d, b
0266   05B2 E4            pop a
0267   05B3 32            mov bl, [d]
0268   05B4 A7 00         mov bh, 0
0269   05B6 38 00 00      mov c, 0
0270   05B9             ; --- START RELATIONAL
0271   05B9 D7            push a
0272   05BA 11            mov a, b
0273   05BB FD 2E 40 00   mov32 cb, $00000040
0273   05BF 00 00 
0274   05C1 B0            cmp a, b
0275   05C2 FD 71         seq ; ==
0276   05C4 E4            pop a
0277   05C5             ; --- END RELATIONAL
0278   05C5 C0 00 00      cmp b, 0
0279   05C8 C6 DE 05      je _if7_exit
0280   05CB             _if7_TRUE:
0281   05CB             ; n++; 
0282   05CB FA FB FF      lea d, [bp + -5] ; $n
0283   05CE 2A            mov b, [d]
0284   05CF 38 00 00      mov c, 0
0285   05D2 11            mov a, b
0286   05D3 FD 77         inc b
0287   05D5 FA FB FF      lea d, [bp + -5] ; $n
0288   05D8 FD 43         mov [d], b
0289   05DA 27            mov b, a
0290   05DB 0A DE 05      jmp _if7_exit
0291   05DE             _if7_exit:
0292   05DE             ; if(currState[i+-1][j+1] == '@') 	n++; 
0293   05DE             _if8_cond:
0294   05DE 3B 47 18      mov d, _currState_data ; $currState
0295   05E1 D7            push a
0296   05E2 DA            push d
0297   05E3 FA FF FF      lea d, [bp + -1] ; $i
0298   05E6 2A            mov b, [d]
0299   05E7 38 00 00      mov c, 0
0300   05EA             ; --- START TERMS
0301   05EA D7            push a
0302   05EB 11            mov a, b
0303   05EC FD 2E FF FF   mov32 cb, $ffffffff
0303   05F0 FF FF 
0304   05F2 56            add b, a
0305   05F3 E4            pop a
0306   05F4             ; --- END TERMS
0307   05F4 E7            pop d
0308   05F5 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0309   05F9 DA            push d
0310   05FA FA FD FF      lea d, [bp + -3] ; $j
0311   05FD 2A            mov b, [d]
0312   05FE 38 00 00      mov c, 0
0313   0601             ; --- START TERMS
0314   0601 D7            push a
0315   0602 11            mov a, b
0316   0603 FD 2E 01 00   mov32 cb, $00000001
0316   0607 00 00 
0317   0609 56            add b, a
0318   060A E4            pop a
0319   060B             ; --- END TERMS
0320   060B E7            pop d
0321   060C 5A            add d, b
0322   060D E4            pop a
0323   060E 32            mov bl, [d]
0324   060F A7 00         mov bh, 0
0325   0611 38 00 00      mov c, 0
0326   0614             ; --- START RELATIONAL
0327   0614 D7            push a
0328   0615 11            mov a, b
0329   0616 FD 2E 40 00   mov32 cb, $00000040
0329   061A 00 00 
0330   061C B0            cmp a, b
0331   061D FD 71         seq ; ==
0332   061F E4            pop a
0333   0620             ; --- END RELATIONAL
0334   0620 C0 00 00      cmp b, 0
0335   0623 C6 39 06      je _if8_exit
0336   0626             _if8_TRUE:
0337   0626             ; n++; 
0338   0626 FA FB FF      lea d, [bp + -5] ; $n
0339   0629 2A            mov b, [d]
0340   062A 38 00 00      mov c, 0
0341   062D 11            mov a, b
0342   062E FD 77         inc b
0343   0630 FA FB FF      lea d, [bp + -5] ; $n
0344   0633 FD 43         mov [d], b
0345   0635 27            mov b, a
0346   0636 0A 39 06      jmp _if8_exit
0347   0639             _if8_exit:
0348   0639             ; if(currState[i][j+-1] == '@') 		n++; 
0349   0639             _if9_cond:
0350   0639 3B 47 18      mov d, _currState_data ; $currState
0351   063C D7            push a
0352   063D DA            push d
0353   063E FA FF FF      lea d, [bp + -1] ; $i
0354   0641 2A            mov b, [d]
0355   0642 38 00 00      mov c, 0
0356   0645 E7            pop d
0357   0646 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0358   064A DA            push d
0359   064B FA FD FF      lea d, [bp + -3] ; $j
0360   064E 2A            mov b, [d]
0361   064F 38 00 00      mov c, 0
0362   0652             ; --- START TERMS
0363   0652 D7            push a
0364   0653 11            mov a, b
0365   0654 FD 2E FF FF   mov32 cb, $ffffffff
0365   0658 FF FF 
0366   065A 56            add b, a
0367   065B E4            pop a
0368   065C             ; --- END TERMS
0369   065C E7            pop d
0370   065D 5A            add d, b
0371   065E E4            pop a
0372   065F 32            mov bl, [d]
0373   0660 A7 00         mov bh, 0
0374   0662 38 00 00      mov c, 0
0375   0665             ; --- START RELATIONAL
0376   0665 D7            push a
0377   0666 11            mov a, b
0378   0667 FD 2E 40 00   mov32 cb, $00000040
0378   066B 00 00 
0379   066D B0            cmp a, b
0380   066E FD 71         seq ; ==
0381   0670 E4            pop a
0382   0671             ; --- END RELATIONAL
0383   0671 C0 00 00      cmp b, 0
0384   0674 C6 8A 06      je _if9_exit
0385   0677             _if9_TRUE:
0386   0677             ; n++; 
0387   0677 FA FB FF      lea d, [bp + -5] ; $n
0388   067A 2A            mov b, [d]
0389   067B 38 00 00      mov c, 0
0390   067E 11            mov a, b
0391   067F FD 77         inc b
0392   0681 FA FB FF      lea d, [bp + -5] ; $n
0393   0684 FD 43         mov [d], b
0394   0686 27            mov b, a
0395   0687 0A 8A 06      jmp _if9_exit
0396   068A             _if9_exit:
0397   068A             ; if(currState[i][j+1] == '@') 			n++; 
0398   068A             _if10_cond:
0399   068A 3B 47 18      mov d, _currState_data ; $currState
0400   068D D7            push a
0401   068E DA            push d
0402   068F FA FF FF      lea d, [bp + -1] ; $i
0403   0692 2A            mov b, [d]
0404   0693 38 00 00      mov c, 0
0405   0696 E7            pop d
0406   0697 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0407   069B DA            push d
0408   069C FA FD FF      lea d, [bp + -3] ; $j
0409   069F 2A            mov b, [d]
0410   06A0 38 00 00      mov c, 0
0411   06A3             ; --- START TERMS
0412   06A3 D7            push a
0413   06A4 11            mov a, b
0414   06A5 FD 2E 01 00   mov32 cb, $00000001
0414   06A9 00 00 
0415   06AB 56            add b, a
0416   06AC E4            pop a
0417   06AD             ; --- END TERMS
0418   06AD E7            pop d
0419   06AE 5A            add d, b
0420   06AF E4            pop a
0421   06B0 32            mov bl, [d]
0422   06B1 A7 00         mov bh, 0
0423   06B3 38 00 00      mov c, 0
0424   06B6             ; --- START RELATIONAL
0425   06B6 D7            push a
0426   06B7 11            mov a, b
0427   06B8 FD 2E 40 00   mov32 cb, $00000040
0427   06BC 00 00 
0428   06BE B0            cmp a, b
0429   06BF FD 71         seq ; ==
0430   06C1 E4            pop a
0431   06C2             ; --- END RELATIONAL
0432   06C2 C0 00 00      cmp b, 0
0433   06C5 C6 DB 06      je _if10_exit
0434   06C8             _if10_TRUE:
0435   06C8             ; n++; 
0436   06C8 FA FB FF      lea d, [bp + -5] ; $n
0437   06CB 2A            mov b, [d]
0438   06CC 38 00 00      mov c, 0
0439   06CF 11            mov a, b
0440   06D0 FD 77         inc b
0441   06D2 FA FB FF      lea d, [bp + -5] ; $n
0442   06D5 FD 43         mov [d], b
0443   06D7 27            mov b, a
0444   06D8 0A DB 06      jmp _if10_exit
0445   06DB             _if10_exit:
0446   06DB             ; if(currState[i+1][j+-1] == '@') 	n++; 
0447   06DB             _if11_cond:
0448   06DB 3B 47 18      mov d, _currState_data ; $currState
0449   06DE D7            push a
0450   06DF DA            push d
0451   06E0 FA FF FF      lea d, [bp + -1] ; $i
0452   06E3 2A            mov b, [d]
0453   06E4 38 00 00      mov c, 0
0454   06E7             ; --- START TERMS
0455   06E7 D7            push a
0456   06E8 11            mov a, b
0457   06E9 FD 2E 01 00   mov32 cb, $00000001
0457   06ED 00 00 
0458   06EF 56            add b, a
0459   06F0 E4            pop a
0460   06F1             ; --- END TERMS
0461   06F1 E7            pop d
0462   06F2 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0463   06F6 DA            push d
0464   06F7 FA FD FF      lea d, [bp + -3] ; $j
0465   06FA 2A            mov b, [d]
0466   06FB 38 00 00      mov c, 0
0467   06FE             ; --- START TERMS
0468   06FE D7            push a
0469   06FF 11            mov a, b
0470   0700 FD 2E FF FF   mov32 cb, $ffffffff
0470   0704 FF FF 
0471   0706 56            add b, a
0472   0707 E4            pop a
0473   0708             ; --- END TERMS
0474   0708 E7            pop d
0475   0709 5A            add d, b
0476   070A E4            pop a
0477   070B 32            mov bl, [d]
0478   070C A7 00         mov bh, 0
0479   070E 38 00 00      mov c, 0
0480   0711             ; --- START RELATIONAL
0481   0711 D7            push a
0482   0712 11            mov a, b
0483   0713 FD 2E 40 00   mov32 cb, $00000040
0483   0717 00 00 
0484   0719 B0            cmp a, b
0485   071A FD 71         seq ; ==
0486   071C E4            pop a
0487   071D             ; --- END RELATIONAL
0488   071D C0 00 00      cmp b, 0
0489   0720 C6 36 07      je _if11_exit
0490   0723             _if11_TRUE:
0491   0723             ; n++; 
0492   0723 FA FB FF      lea d, [bp + -5] ; $n
0493   0726 2A            mov b, [d]
0494   0727 38 00 00      mov c, 0
0495   072A 11            mov a, b
0496   072B FD 77         inc b
0497   072D FA FB FF      lea d, [bp + -5] ; $n
0498   0730 FD 43         mov [d], b
0499   0732 27            mov b, a
0500   0733 0A 36 07      jmp _if11_exit
0501   0736             _if11_exit:
0502   0736             ; if(currState[i+1][j] == '@') 			n++; 
0503   0736             _if12_cond:
0504   0736 3B 47 18      mov d, _currState_data ; $currState
0505   0739 D7            push a
0506   073A DA            push d
0507   073B FA FF FF      lea d, [bp + -1] ; $i
0508   073E 2A            mov b, [d]
0509   073F 38 00 00      mov c, 0
0510   0742             ; --- START TERMS
0511   0742 D7            push a
0512   0743 11            mov a, b
0513   0744 FD 2E 01 00   mov32 cb, $00000001
0513   0748 00 00 
0514   074A 56            add b, a
0515   074B E4            pop a
0516   074C             ; --- END TERMS
0517   074C E7            pop d
0518   074D FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0519   0751 DA            push d
0520   0752 FA FD FF      lea d, [bp + -3] ; $j
0521   0755 2A            mov b, [d]
0522   0756 38 00 00      mov c, 0
0523   0759 E7            pop d
0524   075A 5A            add d, b
0525   075B E4            pop a
0526   075C 32            mov bl, [d]
0527   075D A7 00         mov bh, 0
0528   075F 38 00 00      mov c, 0
0529   0762             ; --- START RELATIONAL
0530   0762 D7            push a
0531   0763 11            mov a, b
0532   0764 FD 2E 40 00   mov32 cb, $00000040
0532   0768 00 00 
0533   076A B0            cmp a, b
0534   076B FD 71         seq ; ==
0535   076D E4            pop a
0536   076E             ; --- END RELATIONAL
0537   076E C0 00 00      cmp b, 0
0538   0771 C6 87 07      je _if12_exit
0539   0774             _if12_TRUE:
0540   0774             ; n++; 
0541   0774 FA FB FF      lea d, [bp + -5] ; $n
0542   0777 2A            mov b, [d]
0543   0778 38 00 00      mov c, 0
0544   077B 11            mov a, b
0545   077C FD 77         inc b
0546   077E FA FB FF      lea d, [bp + -5] ; $n
0547   0781 FD 43         mov [d], b
0548   0783 27            mov b, a
0549   0784 0A 87 07      jmp _if12_exit
0550   0787             _if12_exit:
0551   0787             ; if(currState[i+1][j+1] == '@') 		n++; 
0552   0787             _if13_cond:
0553   0787 3B 47 18      mov d, _currState_data ; $currState
0554   078A D7            push a
0555   078B DA            push d
0556   078C FA FF FF      lea d, [bp + -1] ; $i
0557   078F 2A            mov b, [d]
0558   0790 38 00 00      mov c, 0
0559   0793             ; --- START TERMS
0560   0793 D7            push a
0561   0794 11            mov a, b
0562   0795 FD 2E 01 00   mov32 cb, $00000001
0562   0799 00 00 
0563   079B 56            add b, a
0564   079C E4            pop a
0565   079D             ; --- END TERMS
0566   079D E7            pop d
0567   079E FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0568   07A2 DA            push d
0569   07A3 FA FD FF      lea d, [bp + -3] ; $j
0570   07A6 2A            mov b, [d]
0571   07A7 38 00 00      mov c, 0
0572   07AA             ; --- START TERMS
0573   07AA D7            push a
0574   07AB 11            mov a, b
0575   07AC FD 2E 01 00   mov32 cb, $00000001
0575   07B0 00 00 
0576   07B2 56            add b, a
0577   07B3 E4            pop a
0578   07B4             ; --- END TERMS
0579   07B4 E7            pop d
0580   07B5 5A            add d, b
0581   07B6 E4            pop a
0582   07B7 32            mov bl, [d]
0583   07B8 A7 00         mov bh, 0
0584   07BA 38 00 00      mov c, 0
0585   07BD             ; --- START RELATIONAL
0586   07BD D7            push a
0587   07BE 11            mov a, b
0588   07BF FD 2E 40 00   mov32 cb, $00000040
0588   07C3 00 00 
0589   07C5 B0            cmp a, b
0590   07C6 FD 71         seq ; ==
0591   07C8 E4            pop a
0592   07C9             ; --- END RELATIONAL
0593   07C9 C0 00 00      cmp b, 0
0594   07CC C6 E2 07      je _if13_exit
0595   07CF             _if13_TRUE:
0596   07CF             ; n++; 
0597   07CF FA FB FF      lea d, [bp + -5] ; $n
0598   07D2 2A            mov b, [d]
0599   07D3 38 00 00      mov c, 0
0600   07D6 11            mov a, b
0601   07D7 FD 77         inc b
0602   07D9 FA FB FF      lea d, [bp + -5] ; $n
0603   07DC FD 43         mov [d], b
0604   07DE 27            mov b, a
0605   07DF 0A E2 07      jmp _if13_exit
0606   07E2             _if13_exit:
0607   07E2             ; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0608   07E2             _if14_cond:
0609   07E2 FA FB FF      lea d, [bp + -5] ; $n
0610   07E5 2A            mov b, [d]
0611   07E6 38 00 00      mov c, 0
0612   07E9             ; --- START RELATIONAL
0613   07E9 D7            push a
0614   07EA 11            mov a, b
0615   07EB FD 2E 02 00   mov32 cb, $00000002
0615   07EF 00 00 
0616   07F1 B0            cmp a, b
0617   07F2 FD 73         slt ; < (signed)
0618   07F4 E4            pop a
0619   07F5             ; --- END RELATIONAL
0620   07F5             ; --- START LOGICAL OR
0621   07F5 D7            push a
0622   07F6 11            mov a, b
0623   07F7 FA FB FF      lea d, [bp + -5] ; $n
0624   07FA 2A            mov b, [d]
0625   07FB 38 00 00      mov c, 0
0626   07FE             ; --- START RELATIONAL
0627   07FE D7            push a
0628   07FF 11            mov a, b
0629   0800 FD 2E 03 00   mov32 cb, $00000003
0629   0804 00 00 
0630   0806 B0            cmp a, b
0631   0807 FD 7F         sgt ; >
0632   0809 E4            pop a
0633   080A             ; --- END RELATIONAL
0634   080A FD A8         sor a, b ; ||
0635   080C E4            pop a
0636   080D             ; --- END LOGICAL OR
0637   080D C0 00 00      cmp b, 0
0638   0810 C6 3C 08      je _if14_else
0639   0813             _if14_TRUE:
0640   0813             ; nextState[i][j] = ' '; 
0641   0813 3B 97 13      mov d, _nextState_data ; $nextState
0642   0816 D7            push a
0643   0817 DA            push d
0644   0818 FA FF FF      lea d, [bp + -1] ; $i
0645   081B 2A            mov b, [d]
0646   081C 38 00 00      mov c, 0
0647   081F E7            pop d
0648   0820 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0649   0824 DA            push d
0650   0825 FA FD FF      lea d, [bp + -3] ; $j
0651   0828 2A            mov b, [d]
0652   0829 38 00 00      mov c, 0
0653   082C E7            pop d
0654   082D 5A            add d, b
0655   082E E4            pop a
0656   082F DA            push d
0657   0830 FD 2E 20 00   mov32 cb, $00000020
0657   0834 00 00 
0658   0836 E7            pop d
0659   0837 FD 3E         mov [d], bl
0660   0839 0A 7E 08      jmp _if14_exit
0661   083C             _if14_else:
0662   083C             ; if(n == 3) nextState[i][j] = '@'; 
0663   083C             _if15_cond:
0664   083C FA FB FF      lea d, [bp + -5] ; $n
0665   083F 2A            mov b, [d]
0666   0840 38 00 00      mov c, 0
0667   0843             ; --- START RELATIONAL
0668   0843 D7            push a
0669   0844 11            mov a, b
0670   0845 FD 2E 03 00   mov32 cb, $00000003
0670   0849 00 00 
0671   084B B0            cmp a, b
0672   084C FD 71         seq ; ==
0673   084E E4            pop a
0674   084F             ; --- END RELATIONAL
0675   084F C0 00 00      cmp b, 0
0676   0852 C6 7E 08      je _if15_exit
0677   0855             _if15_TRUE:
0678   0855             ; nextState[i][j] = '@'; 
0679   0855 3B 97 13      mov d, _nextState_data ; $nextState
0680   0858 D7            push a
0681   0859 DA            push d
0682   085A FA FF FF      lea d, [bp + -1] ; $i
0683   085D 2A            mov b, [d]
0684   085E 38 00 00      mov c, 0
0685   0861 E7            pop d
0686   0862 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0687   0866 DA            push d
0688   0867 FA FD FF      lea d, [bp + -3] ; $j
0689   086A 2A            mov b, [d]
0690   086B 38 00 00      mov c, 0
0691   086E E7            pop d
0692   086F 5A            add d, b
0693   0870 E4            pop a
0694   0871 DA            push d
0695   0872 FD 2E 40 00   mov32 cb, $00000040
0695   0876 00 00 
0696   0878 E7            pop d
0697   0879 FD 3E         mov [d], bl
0698   087B 0A 7E 08      jmp _if15_exit
0699   087E             _if15_exit:
0700   087E             _if14_exit:
0701   087E             _for5_update:
0702   087E FA FD FF      lea d, [bp + -3] ; $j
0703   0881 2A            mov b, [d]
0704   0882 38 00 00      mov c, 0
0705   0885 11            mov a, b
0706   0886 FD 77         inc b
0707   0888 FA FD FF      lea d, [bp + -3] ; $j
0708   088B FD 43         mov [d], b
0709   088D 27            mov b, a
0710   088E 0A 02 05      jmp _for5_cond
0711   0891             _for5_exit:
0712   0891             _for4_update:
0713   0891 FA FF FF      lea d, [bp + -1] ; $i
0714   0894 2A            mov b, [d]
0715   0895 38 00 00      mov c, 0
0716   0898 11            mov a, b
0717   0899 FD 77         inc b
0718   089B FA FF FF      lea d, [bp + -1] ; $i
0719   089E FD 43         mov [d], b
0720   08A0 27            mov b, a
0721   08A1 0A D2 04      jmp _for4_cond
0722   08A4             _for4_exit:
0723   08A4             ; for(i = 1; i <  30      +-1; i++){ 
0724   08A4             _for16_init:
0725   08A4 FA FF FF      lea d, [bp + -1] ; $i
0726   08A7 DA            push d
0727   08A8 FD 2E 01 00   mov32 cb, $00000001
0727   08AC 00 00 
0728   08AE E7            pop d
0729   08AF FD 43         mov [d], b
0730   08B1             _for16_cond:
0731   08B1 FA FF FF      lea d, [bp + -1] ; $i
0732   08B4 2A            mov b, [d]
0733   08B5 38 00 00      mov c, 0
0734   08B8             ; --- START RELATIONAL
0735   08B8 D7            push a
0736   08B9 11            mov a, b
0737   08BA FD 2E 1E 00   mov32 cb, $0000001e
0737   08BE 00 00 
0738   08C0             ; --- START TERMS
0739   08C0 D7            push a
0740   08C1 11            mov a, b
0741   08C2 FD 2E FF FF   mov32 cb, $ffffffff
0741   08C6 FF FF 
0742   08C8 56            add b, a
0743   08C9 E4            pop a
0744   08CA             ; --- END TERMS
0745   08CA B0            cmp a, b
0746   08CB FD 73         slt ; < (signed)
0747   08CD E4            pop a
0748   08CE             ; --- END RELATIONAL
0749   08CE C0 00 00      cmp b, 0
0750   08D1 C6 6C 09      je _for16_exit
0751   08D4             _for16_block:
0752   08D4             ; for(j = 1; j <   40     +-1; j++){ 
0753   08D4             _for17_init:
0754   08D4 FA FD FF      lea d, [bp + -3] ; $j
0755   08D7 DA            push d
0756   08D8 FD 2E 01 00   mov32 cb, $00000001
0756   08DC 00 00 
0757   08DE E7            pop d
0758   08DF FD 43         mov [d], b
0759   08E1             _for17_cond:
0760   08E1 FA FD FF      lea d, [bp + -3] ; $j
0761   08E4 2A            mov b, [d]
0762   08E5 38 00 00      mov c, 0
0763   08E8             ; --- START RELATIONAL
0764   08E8 D7            push a
0765   08E9 11            mov a, b
0766   08EA FD 2E 28 00   mov32 cb, $00000028
0766   08EE 00 00 
0767   08F0             ; --- START TERMS
0768   08F0 D7            push a
0769   08F1 11            mov a, b
0770   08F2 FD 2E FF FF   mov32 cb, $ffffffff
0770   08F6 FF FF 
0771   08F8 56            add b, a
0772   08F9 E4            pop a
0773   08FA             ; --- END TERMS
0774   08FA B0            cmp a, b
0775   08FB FD 73         slt ; < (signed)
0776   08FD E4            pop a
0777   08FE             ; --- END RELATIONAL
0778   08FE C0 00 00      cmp b, 0
0779   0901 C6 59 09      je _for17_exit
0780   0904             _for17_block:
0781   0904             ; currState[i][j] = nextState[i][j]; 
0782   0904 3B 47 18      mov d, _currState_data ; $currState
0783   0907 D7            push a
0784   0908 DA            push d
0785   0909 FA FF FF      lea d, [bp + -1] ; $i
0786   090C 2A            mov b, [d]
0787   090D 38 00 00      mov c, 0
0788   0910 E7            pop d
0789   0911 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0790   0915 DA            push d
0791   0916 FA FD FF      lea d, [bp + -3] ; $j
0792   0919 2A            mov b, [d]
0793   091A 38 00 00      mov c, 0
0794   091D E7            pop d
0795   091E 5A            add d, b
0796   091F E4            pop a
0797   0920 DA            push d
0798   0921 3B 97 13      mov d, _nextState_data ; $nextState
0799   0924 D7            push a
0800   0925 DA            push d
0801   0926 FA FF FF      lea d, [bp + -1] ; $i
0802   0929 2A            mov b, [d]
0803   092A 38 00 00      mov c, 0
0804   092D E7            pop d
0805   092E FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0806   0932 DA            push d
0807   0933 FA FD FF      lea d, [bp + -3] ; $j
0808   0936 2A            mov b, [d]
0809   0937 38 00 00      mov c, 0
0810   093A E7            pop d
0811   093B 5A            add d, b
0812   093C E4            pop a
0813   093D 32            mov bl, [d]
0814   093E A7 00         mov bh, 0
0815   0940 38 00 00      mov c, 0
0816   0943 E7            pop d
0817   0944 FD 3E         mov [d], bl
0818   0946             _for17_update:
0819   0946 FA FD FF      lea d, [bp + -3] ; $j
0820   0949 2A            mov b, [d]
0821   094A 38 00 00      mov c, 0
0822   094D 11            mov a, b
0823   094E FD 77         inc b
0824   0950 FA FD FF      lea d, [bp + -3] ; $j
0825   0953 FD 43         mov [d], b
0826   0955 27            mov b, a
0827   0956 0A E1 08      jmp _for17_cond
0828   0959             _for17_exit:
0829   0959             _for16_update:
0830   0959 FA FF FF      lea d, [bp + -1] ; $i
0831   095C 2A            mov b, [d]
0832   095D 38 00 00      mov c, 0
0833   0960 11            mov a, b
0834   0961 FD 77         inc b
0835   0963 FA FF FF      lea d, [bp + -1] ; $i
0836   0966 FD 43         mov [d], b
0837   0968 27            mov b, a
0838   0969 0A B1 08      jmp _for16_cond
0839   096C             _for16_exit:
0840   096C             ; printf(clear); 
0841   096C             ; --- START FUNCTION CALL
0842   096C 3B 8C 13      mov d, _clear_data ; $clear
0843   096F 2D            mov b, d
0844   0970 38 00 00      mov c, 0
0845   0973 FD AB         swp b
0846   0975 D8            push b
0847   0976 07 5A 0A      call printf
0848   0979 51 02 00      add sp, 2
0849   097C             ; --- END FUNCTION CALL
0850   097C             ; for(i = 0; i <  30      ; i++){ 
0851   097C             _for18_init:
0852   097C FA FF FF      lea d, [bp + -1] ; $i
0853   097F DA            push d
0854   0980 FD 2E 00 00   mov32 cb, $00000000
0854   0984 00 00 
0855   0986 E7            pop d
0856   0987 FD 43         mov [d], b
0857   0989             _for18_cond:
0858   0989 FA FF FF      lea d, [bp + -1] ; $i
0859   098C 2A            mov b, [d]
0860   098D 38 00 00      mov c, 0
0861   0990             ; --- START RELATIONAL
0862   0990 D7            push a
0863   0991 11            mov a, b
0864   0992 FD 2E 1E 00   mov32 cb, $0000001e
0864   0996 00 00 
0865   0998 B0            cmp a, b
0866   0999 FD 73         slt ; < (signed)
0867   099B E4            pop a
0868   099C             ; --- END RELATIONAL
0869   099C C0 00 00      cmp b, 0
0870   099F C6 49 0A      je _for18_exit
0871   09A2             _for18_block:
0872   09A2             ; for(j = 0; j <   40     ; j++){ 
0873   09A2             _for19_init:
0874   09A2 FA FD FF      lea d, [bp + -3] ; $j
0875   09A5 DA            push d
0876   09A6 FD 2E 00 00   mov32 cb, $00000000
0876   09AA 00 00 
0877   09AC E7            pop d
0878   09AD FD 43         mov [d], b
0879   09AF             _for19_cond:
0880   09AF FA FD FF      lea d, [bp + -3] ; $j
0881   09B2 2A            mov b, [d]
0882   09B3 38 00 00      mov c, 0
0883   09B6             ; --- START RELATIONAL
0884   09B6 D7            push a
0885   09B7 11            mov a, b
0886   09B8 FD 2E 28 00   mov32 cb, $00000028
0886   09BC 00 00 
0887   09BE B0            cmp a, b
0888   09BF FD 73         slt ; < (signed)
0889   09C1 E4            pop a
0890   09C2             ; --- END RELATIONAL
0891   09C2 C0 00 00      cmp b, 0
0892   09C5 C6 2A 0A      je _for19_exit
0893   09C8             _for19_block:
0894   09C8             ; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
0895   09C8             _ternary20_cond:
0896   09C8 3B 47 18      mov d, _currState_data ; $currState
0897   09CB D7            push a
0898   09CC DA            push d
0899   09CD FA FF FF      lea d, [bp + -1] ; $i
0900   09D0 2A            mov b, [d]
0901   09D1 38 00 00      mov c, 0
0902   09D4 E7            pop d
0903   09D5 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0904   09D9 DA            push d
0905   09DA FA FD FF      lea d, [bp + -3] ; $j
0906   09DD 2A            mov b, [d]
0907   09DE 38 00 00      mov c, 0
0908   09E1 E7            pop d
0909   09E2 5A            add d, b
0910   09E3 E4            pop a
0911   09E4 32            mov bl, [d]
0912   09E5 A7 00         mov bh, 0
0913   09E7 38 00 00      mov c, 0
0914   09EA             ; --- START RELATIONAL
0915   09EA D7            push a
0916   09EB 11            mov a, b
0917   09EC FD 2E 40 00   mov32 cb, $00000040
0917   09F0 00 00 
0918   09F2 B0            cmp a, b
0919   09F3 FD 71         seq ; ==
0920   09F5 E4            pop a
0921   09F6             ; --- END RELATIONAL
0922   09F6 C0 00 00      cmp b, 0
0923   09F9 C6 0B 0A      je _ternary20_FALSE
0924   09FC             _ternary20_TRUE:
0925   09FC             ; --- START FUNCTION CALL
0926   09FC 26 F7 1C      mov b, _s0 ; "@ "
0927   09FF FD AB         swp b
0928   0A01 D8            push b
0929   0A02 07 5A 0A      call printf
0930   0A05 51 02 00      add sp, 2
0931   0A08             ; --- END FUNCTION CALL
0932   0A08 0A 17 0A      jmp _ternary20_exit
0933   0A0B             _ternary20_FALSE:
0934   0A0B             ; --- START FUNCTION CALL
0935   0A0B 26 FA 1C      mov b, _s1 ; ". "
0936   0A0E FD AB         swp b
0937   0A10 D8            push b
0938   0A11 07 5A 0A      call printf
0939   0A14 51 02 00      add sp, 2
0940   0A17             ; --- END FUNCTION CALL
0941   0A17             _ternary20_exit:
0942   0A17             _for19_update:
0943   0A17 FA FD FF      lea d, [bp + -3] ; $j
0944   0A1A 2A            mov b, [d]
0945   0A1B 38 00 00      mov c, 0
0946   0A1E 11            mov a, b
0947   0A1F FD 77         inc b
0948   0A21 FA FD FF      lea d, [bp + -3] ; $j
0949   0A24 FD 43         mov [d], b
0950   0A26 27            mov b, a
0951   0A27 0A AF 09      jmp _for19_cond
0952   0A2A             _for19_exit:
0953   0A2A             ; printf("\n\r"); 
0954   0A2A             ; --- START FUNCTION CALL
0955   0A2A 26 FD 1C      mov b, _s2 ; "\n\r"
0956   0A2D FD AB         swp b
0957   0A2F D8            push b
0958   0A30 07 5A 0A      call printf
0959   0A33 51 02 00      add sp, 2
0960   0A36             ; --- END FUNCTION CALL
0961   0A36             _for18_update:
0962   0A36 FA FF FF      lea d, [bp + -1] ; $i
0963   0A39 2A            mov b, [d]
0964   0A3A 38 00 00      mov c, 0
0965   0A3D 11            mov a, b
0966   0A3E FD 77         inc b
0967   0A40 FA FF FF      lea d, [bp + -1] ; $i
0968   0A43 FD 43         mov [d], b
0969   0A45 27            mov b, a
0970   0A46 0A 89 09      jmp _for18_cond
0971   0A49             _for18_exit:
0972   0A49             ; puts("\n\rPress CTRL+C to quit.\n\r"); 
0973   0A49             ; --- START FUNCTION CALL
0974   0A49 26 00 1D      mov b, _s3 ; "\n\rPress CTRL+C to quit.\n\r"
0975   0A4C FD AB         swp b
0976   0A4E D8            push b
0977   0A4F 07 6E 13      call puts
0978   0A52 51 02 00      add sp, 2
0979   0A55             ; --- END FUNCTION CALL
0980   0A55             _for3_update:
0981   0A55 0A C5 04      jmp _for3_cond
0982   0A58             _for3_exit:
0983   0A58 05 0B         syscall sys_terminate_proc
0984   0A5A             
0985   0A5A             printf:
0986   0A5A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0987   0A5D             ; char *p, *format_p; 
0988   0A5D 52 02 00      sub sp, 2
0989   0A60 52 02 00      sub sp, 2
0990   0A63             ; format_p = format; 
0991   0A63 FA FD FF      lea d, [bp + -3] ; $format_p
0992   0A66 DA            push d
0993   0A67 FA 05 00      lea d, [bp + 5] ; $format
0994   0A6A 2A            mov b, [d]
0995   0A6B 38 00 00      mov c, 0
0996   0A6E E7            pop d
0997   0A6F FD 43         mov [d], b
0998   0A71             ; p = &format + 2; 
0999   0A71 FA FF FF      lea d, [bp + -1] ; $p
1000   0A74 DA            push d
1001   0A75 FA 05 00      lea d, [bp + 5] ; $format
1002   0A78 2D            mov b, d
1003   0A79             ; --- START TERMS
1004   0A79 D7            push a
1005   0A7A 11            mov a, b
1006   0A7B FD 2E 02 00   mov32 cb, $00000002
1006   0A7F 00 00 
1007   0A81 56            add b, a
1008   0A82 E4            pop a
1009   0A83             ; --- END TERMS
1010   0A83 E7            pop d
1011   0A84 FD 43         mov [d], b
1012   0A86             ; for(;;){ 
1013   0A86             _for21_init:
1014   0A86             _for21_cond:
1015   0A86             _for21_block:
1016   0A86             ; if(!*format_p) break; 
1017   0A86             _if22_cond:
1018   0A86 FA FD FF      lea d, [bp + -3] ; $format_p
1019   0A89 2A            mov b, [d]
1020   0A8A 38 00 00      mov c, 0
1021   0A8D 74            mov d, b
1022   0A8E 32            mov bl, [d]
1023   0A8F A7 00         mov bh, 0
1024   0A91 38 00 00      mov c, 0
1025   0A94 C0 00 00      cmp b, 0
1026   0A97 FD 71         seq ; !
1027   0A99 C0 00 00      cmp b, 0
1028   0A9C C6 A5 0A      je _if22_else
1029   0A9F             _if22_TRUE:
1030   0A9F             ; break; 
1031   0A9F 0A 45 0D      jmp _for21_exit ; for break
1032   0AA2 0A 32 0D      jmp _if22_exit
1033   0AA5             _if22_else:
1034   0AA5             ; if(*format_p == '%'){ 
1035   0AA5             _if23_cond:
1036   0AA5 FA FD FF      lea d, [bp + -3] ; $format_p
1037   0AA8 2A            mov b, [d]
1038   0AA9 38 00 00      mov c, 0
1039   0AAC 74            mov d, b
1040   0AAD 32            mov bl, [d]
1041   0AAE A7 00         mov bh, 0
1042   0AB0 38 00 00      mov c, 0
1043   0AB3             ; --- START RELATIONAL
1044   0AB3 D7            push a
1045   0AB4 11            mov a, b
1046   0AB5 FD 2E 25 00   mov32 cb, $00000025
1046   0AB9 00 00 
1047   0ABB B0            cmp a, b
1048   0ABC FD 71         seq ; ==
1049   0ABE E4            pop a
1050   0ABF             ; --- END RELATIONAL
1051   0ABF C0 00 00      cmp b, 0
1052   0AC2 C6 1D 0D      je _if23_else
1053   0AC5             _if23_TRUE:
1054   0AC5             ; format_p++; 
1055   0AC5 FA FD FF      lea d, [bp + -3] ; $format_p
1056   0AC8 2A            mov b, [d]
1057   0AC9 38 00 00      mov c, 0
1058   0ACC FD 77         inc b
1059   0ACE FA FD FF      lea d, [bp + -3] ; $format_p
1060   0AD1 FD 43         mov [d], b
1061   0AD3 FD 7D         dec b
1062   0AD5             ; switch(*format_p){ 
1063   0AD5             _switch24_expr:
1064   0AD5 FA FD FF      lea d, [bp + -3] ; $format_p
1065   0AD8 2A            mov b, [d]
1066   0AD9 38 00 00      mov c, 0
1067   0ADC 74            mov d, b
1068   0ADD 32            mov bl, [d]
1069   0ADE A7 00         mov bh, 0
1070   0AE0 38 00 00      mov c, 0
1071   0AE3             _switch24_comparisons:
1072   0AE3 C1 6C         cmp bl, $6c
1073   0AE5 C6 11 0B      je _switch24_case0
1074   0AE8 C1 4C         cmp bl, $4c
1075   0AEA C6 11 0B      je _switch24_case1
1076   0AED C1 64         cmp bl, $64
1077   0AEF C6 21 0C      je _switch24_case2
1078   0AF2 C1 69         cmp bl, $69
1079   0AF4 C6 21 0C      je _switch24_case3
1080   0AF7 C1 75         cmp bl, $75
1081   0AF9 C6 51 0C      je _switch24_case4
1082   0AFC C1 78         cmp bl, $78
1083   0AFE C6 81 0C      je _switch24_case5
1084   0B01 C1 63         cmp bl, $63
1085   0B03 C6 B1 0C      je _switch24_case6
1086   0B06 C1 73         cmp bl, $73
1087   0B08 C6 E1 0C      je _switch24_case7
1088   0B0B 0A 0E 0D      jmp _switch24_default
1089   0B0E 0A 1A 0D      jmp _switch24_exit
1090   0B11             _switch24_case0:
1091   0B11             _switch24_case1:
1092   0B11             ; format_p++; 
1093   0B11 FA FD FF      lea d, [bp + -3] ; $format_p
1094   0B14 2A            mov b, [d]
1095   0B15 38 00 00      mov c, 0
1096   0B18 FD 77         inc b
1097   0B1A FA FD FF      lea d, [bp + -3] ; $format_p
1098   0B1D FD 43         mov [d], b
1099   0B1F FD 7D         dec b
1100   0B21             ; if(*format_p == 'd' || *format_p == 'i') 
1101   0B21             _if25_cond:
1102   0B21 FA FD FF      lea d, [bp + -3] ; $format_p
1103   0B24 2A            mov b, [d]
1104   0B25 38 00 00      mov c, 0
1105   0B28 74            mov d, b
1106   0B29 32            mov bl, [d]
1107   0B2A A7 00         mov bh, 0
1108   0B2C 38 00 00      mov c, 0
1109   0B2F             ; --- START RELATIONAL
1110   0B2F D7            push a
1111   0B30 11            mov a, b
1112   0B31 FD 2E 64 00   mov32 cb, $00000064
1112   0B35 00 00 
1113   0B37 B0            cmp a, b
1114   0B38 FD 71         seq ; ==
1115   0B3A E4            pop a
1116   0B3B             ; --- END RELATIONAL
1117   0B3B             ; --- START LOGICAL OR
1118   0B3B D7            push a
1119   0B3C 11            mov a, b
1120   0B3D FA FD FF      lea d, [bp + -3] ; $format_p
1121   0B40 2A            mov b, [d]
1122   0B41 38 00 00      mov c, 0
1123   0B44 74            mov d, b
1124   0B45 32            mov bl, [d]
1125   0B46 A7 00         mov bh, 0
1126   0B48 38 00 00      mov c, 0
1127   0B4B             ; --- START RELATIONAL
1128   0B4B D7            push a
1129   0B4C 11            mov a, b
1130   0B4D FD 2E 69 00   mov32 cb, $00000069
1130   0B51 00 00 
1131   0B53 B0            cmp a, b
1132   0B54 FD 71         seq ; ==
1133   0B56 E4            pop a
1134   0B57             ; --- END RELATIONAL
1135   0B57 FD A8         sor a, b ; ||
1136   0B59 E4            pop a
1137   0B5A             ; --- END LOGICAL OR
1138   0B5A C0 00 00      cmp b, 0
1139   0B5D C6 7E 0B      je _if25_else
1140   0B60             _if25_TRUE:
1141   0B60             ; print_signed_long(*(long *)p); 
1142   0B60             ; --- START FUNCTION CALL
1143   0B60 FA FF FF      lea d, [bp + -1] ; $p
1144   0B63 2A            mov b, [d]
1145   0B64 38 00 00      mov c, 0
1146   0B67 74            mov d, b
1147   0B68 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1148   0B6B FD 39         mov c, b ; And place it into C
1149   0B6D 2A            mov b, [d] ; Lower Word in B
1150   0B6E 12            mov a, c
1151   0B6F FD AA         swp a
1152   0B71 D7            push a
1153   0B72 FD AB         swp b
1154   0B74 D8            push b
1155   0B75 07 47 0D      call print_signed_long
1156   0B78 51 04 00      add sp, 4
1157   0B7B             ; --- END FUNCTION CALL
1158   0B7B 0A 06 0C      jmp _if25_exit
1159   0B7E             _if25_else:
1160   0B7E             ; if(*format_p == 'u') 
1161   0B7E             _if26_cond:
1162   0B7E FA FD FF      lea d, [bp + -3] ; $format_p
1163   0B81 2A            mov b, [d]
1164   0B82 38 00 00      mov c, 0
1165   0B85 74            mov d, b
1166   0B86 32            mov bl, [d]
1167   0B87 A7 00         mov bh, 0
1168   0B89 38 00 00      mov c, 0
1169   0B8C             ; --- START RELATIONAL
1170   0B8C D7            push a
1171   0B8D 11            mov a, b
1172   0B8E FD 2E 75 00   mov32 cb, $00000075
1172   0B92 00 00 
1173   0B94 B0            cmp a, b
1174   0B95 FD 71         seq ; ==
1175   0B97 E4            pop a
1176   0B98             ; --- END RELATIONAL
1177   0B98 C0 00 00      cmp b, 0
1178   0B9B C6 BC 0B      je _if26_else
1179   0B9E             _if26_TRUE:
1180   0B9E             ; print_unsigned_long(*(unsigned long *)p); 
1181   0B9E             ; --- START FUNCTION CALL
1182   0B9E FA FF FF      lea d, [bp + -1] ; $p
1183   0BA1 2A            mov b, [d]
1184   0BA2 38 00 00      mov c, 0
1185   0BA5 74            mov d, b
1186   0BA6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1187   0BA9 FD 39         mov c, b ; And place it into C
1188   0BAB 2A            mov b, [d] ; Lower Word in B
1189   0BAC 12            mov a, c
1190   0BAD FD AA         swp a
1191   0BAF D7            push a
1192   0BB0 FD AB         swp b
1193   0BB2 D8            push b
1194   0BB3 07 E7 0E      call print_unsigned_long
1195   0BB6 51 04 00      add sp, 4
1196   0BB9             ; --- END FUNCTION CALL
1197   0BB9 0A 06 0C      jmp _if26_exit
1198   0BBC             _if26_else:
1199   0BBC             ; if(*format_p == 'x') 
1200   0BBC             _if27_cond:
1201   0BBC FA FD FF      lea d, [bp + -3] ; $format_p
1202   0BBF 2A            mov b, [d]
1203   0BC0 38 00 00      mov c, 0
1204   0BC3 74            mov d, b
1205   0BC4 32            mov bl, [d]
1206   0BC5 A7 00         mov bh, 0
1207   0BC7 38 00 00      mov c, 0
1208   0BCA             ; --- START RELATIONAL
1209   0BCA D7            push a
1210   0BCB 11            mov a, b
1211   0BCC FD 2E 78 00   mov32 cb, $00000078
1211   0BD0 00 00 
1212   0BD2 B0            cmp a, b
1213   0BD3 FD 71         seq ; ==
1214   0BD5 E4            pop a
1215   0BD6             ; --- END RELATIONAL
1216   0BD6 C0 00 00      cmp b, 0
1217   0BD9 C6 FA 0B      je _if27_else
1218   0BDC             _if27_TRUE:
1219   0BDC             ; printx32(*(long int *)p); 
1220   0BDC             ; --- START FUNCTION CALL
1221   0BDC FA FF FF      lea d, [bp + -1] ; $p
1222   0BDF 2A            mov b, [d]
1223   0BE0 38 00 00      mov c, 0
1224   0BE3 74            mov d, b
1225   0BE4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1226   0BE7 FD 39         mov c, b ; And place it into C
1227   0BE9 2A            mov b, [d] ; Lower Word in B
1228   0BEA 12            mov a, c
1229   0BEB FD AA         swp a
1230   0BED D7            push a
1231   0BEE FD AB         swp b
1232   0BF0 D8            push b
1233   0BF1 07 25 10      call printx32
1234   0BF4 51 04 00      add sp, 4
1235   0BF7             ; --- END FUNCTION CALL
1236   0BF7 0A 06 0C      jmp _if27_exit
1237   0BFA             _if27_else:
1238   0BFA             ; err("Unexpected format in printf."); 
1239   0BFA             ; --- START FUNCTION CALL
1240   0BFA 26 1A 1D      mov b, _s4 ; "Unexpected format in printf."
1241   0BFD FD AB         swp b
1242   0BFF D8            push b
1243   0C00 07 85 10      call err
1244   0C03 51 02 00      add sp, 2
1245   0C06             ; --- END FUNCTION CALL
1246   0C06             _if27_exit:
1247   0C06             _if26_exit:
1248   0C06             _if25_exit:
1249   0C06             ; p = p + 4; 
1250   0C06 FA FF FF      lea d, [bp + -1] ; $p
1251   0C09 DA            push d
1252   0C0A FA FF FF      lea d, [bp + -1] ; $p
1253   0C0D 2A            mov b, [d]
1254   0C0E 38 00 00      mov c, 0
1255   0C11             ; --- START TERMS
1256   0C11 D7            push a
1257   0C12 11            mov a, b
1258   0C13 FD 2E 04 00   mov32 cb, $00000004
1258   0C17 00 00 
1259   0C19 56            add b, a
1260   0C1A E4            pop a
1261   0C1B             ; --- END TERMS
1262   0C1B E7            pop d
1263   0C1C FD 43         mov [d], b
1264   0C1E             ; break; 
1265   0C1E 0A 1A 0D      jmp _switch24_exit ; case break
1266   0C21             _switch24_case2:
1267   0C21             _switch24_case3:
1268   0C21             ; print_signed(*(int*)p); 
1269   0C21             ; --- START FUNCTION CALL
1270   0C21 FA FF FF      lea d, [bp + -1] ; $p
1271   0C24 2A            mov b, [d]
1272   0C25 38 00 00      mov c, 0
1273   0C28 74            mov d, b
1274   0C29 2A            mov b, [d]
1275   0C2A 38 00 00      mov c, 0
1276   0C2D FD AB         swp b
1277   0C2F D8            push b
1278   0C30 07 B3 10      call print_signed
1279   0C33 51 02 00      add sp, 2
1280   0C36             ; --- END FUNCTION CALL
1281   0C36             ; p = p + 2; 
1282   0C36 FA FF FF      lea d, [bp + -1] ; $p
1283   0C39 DA            push d
1284   0C3A FA FF FF      lea d, [bp + -1] ; $p
1285   0C3D 2A            mov b, [d]
1286   0C3E 38 00 00      mov c, 0
1287   0C41             ; --- START TERMS
1288   0C41 D7            push a
1289   0C42 11            mov a, b
1290   0C43 FD 2E 02 00   mov32 cb, $00000002
1290   0C47 00 00 
1291   0C49 56            add b, a
1292   0C4A E4            pop a
1293   0C4B             ; --- END TERMS
1294   0C4B E7            pop d
1295   0C4C FD 43         mov [d], b
1296   0C4E             ; break; 
1297   0C4E 0A 1A 0D      jmp _switch24_exit ; case break
1298   0C51             _switch24_case4:
1299   0C51             ; print_unsigned(*(unsigned int*)p); 
1300   0C51             ; --- START FUNCTION CALL
1301   0C51 FA FF FF      lea d, [bp + -1] ; $p
1302   0C54 2A            mov b, [d]
1303   0C55 38 00 00      mov c, 0
1304   0C58 74            mov d, b
1305   0C59 2A            mov b, [d]
1306   0C5A 38 00 00      mov c, 0
1307   0C5D FD AB         swp b
1308   0C5F D8            push b
1309   0C60 07 04 12      call print_unsigned
1310   0C63 51 02 00      add sp, 2
1311   0C66             ; --- END FUNCTION CALL
1312   0C66             ; p = p + 2; 
1313   0C66 FA FF FF      lea d, [bp + -1] ; $p
1314   0C69 DA            push d
1315   0C6A FA FF FF      lea d, [bp + -1] ; $p
1316   0C6D 2A            mov b, [d]
1317   0C6E 38 00 00      mov c, 0
1318   0C71             ; --- START TERMS
1319   0C71 D7            push a
1320   0C72 11            mov a, b
1321   0C73 FD 2E 02 00   mov32 cb, $00000002
1321   0C77 00 00 
1322   0C79 56            add b, a
1323   0C7A E4            pop a
1324   0C7B             ; --- END TERMS
1325   0C7B E7            pop d
1326   0C7C FD 43         mov [d], b
1327   0C7E             ; break; 
1328   0C7E 0A 1A 0D      jmp _switch24_exit ; case break
1329   0C81             _switch24_case5:
1330   0C81             ; printx16(*(int*)p); 
1331   0C81             ; --- START FUNCTION CALL
1332   0C81 FA FF FF      lea d, [bp + -1] ; $p
1333   0C84 2A            mov b, [d]
1334   0C85 38 00 00      mov c, 0
1335   0C88 74            mov d, b
1336   0C89 2A            mov b, [d]
1337   0C8A 38 00 00      mov c, 0
1338   0C8D FD AB         swp b
1339   0C8F D8            push b
1340   0C90 07 1C 13      call printx16
1341   0C93 51 02 00      add sp, 2
1342   0C96             ; --- END FUNCTION CALL
1343   0C96             ; p = p + 2; 
1344   0C96 FA FF FF      lea d, [bp + -1] ; $p
1345   0C99 DA            push d
1346   0C9A FA FF FF      lea d, [bp + -1] ; $p
1347   0C9D 2A            mov b, [d]
1348   0C9E 38 00 00      mov c, 0
1349   0CA1             ; --- START TERMS
1350   0CA1 D7            push a
1351   0CA2 11            mov a, b
1352   0CA3 FD 2E 02 00   mov32 cb, $00000002
1352   0CA7 00 00 
1353   0CA9 56            add b, a
1354   0CAA E4            pop a
1355   0CAB             ; --- END TERMS
1356   0CAB E7            pop d
1357   0CAC FD 43         mov [d], b
1358   0CAE             ; break; 
1359   0CAE 0A 1A 0D      jmp _switch24_exit ; case break
1360   0CB1             _switch24_case6:
1361   0CB1             ; putchar(*(char*)p); 
1362   0CB1             ; --- START FUNCTION CALL
1363   0CB1 FA FF FF      lea d, [bp + -1] ; $p
1364   0CB4 2A            mov b, [d]
1365   0CB5 38 00 00      mov c, 0
1366   0CB8 74            mov d, b
1367   0CB9 32            mov bl, [d]
1368   0CBA A7 00         mov bh, 0
1369   0CBC 38 00 00      mov c, 0
1370   0CBF DD            push bl
1371   0CC0 07 D9 0E      call putchar
1372   0CC3 51 01 00      add sp, 1
1373   0CC6             ; --- END FUNCTION CALL
1374   0CC6             ; p = p + 2; 
1375   0CC6 FA FF FF      lea d, [bp + -1] ; $p
1376   0CC9 DA            push d
1377   0CCA FA FF FF      lea d, [bp + -1] ; $p
1378   0CCD 2A            mov b, [d]
1379   0CCE 38 00 00      mov c, 0
1380   0CD1             ; --- START TERMS
1381   0CD1 D7            push a
1382   0CD2 11            mov a, b
1383   0CD3 FD 2E 02 00   mov32 cb, $00000002
1383   0CD7 00 00 
1384   0CD9 56            add b, a
1385   0CDA E4            pop a
1386   0CDB             ; --- END TERMS
1387   0CDB E7            pop d
1388   0CDC FD 43         mov [d], b
1389   0CDE             ; break; 
1390   0CDE 0A 1A 0D      jmp _switch24_exit ; case break
1391   0CE1             _switch24_case7:
1392   0CE1             ; print(*(char**)p); 
1393   0CE1             ; --- START FUNCTION CALL
1394   0CE1 FA FF FF      lea d, [bp + -1] ; $p
1395   0CE4 2A            mov b, [d]
1396   0CE5 38 00 00      mov c, 0
1397   0CE8 74            mov d, b
1398   0CE9 2A            mov b, [d]
1399   0CEA FD AB         swp b
1400   0CEC D8            push b
1401   0CED 07 9A 10      call print
1402   0CF0 51 02 00      add sp, 2
1403   0CF3             ; --- END FUNCTION CALL
1404   0CF3             ; p = p + 2; 
1405   0CF3 FA FF FF      lea d, [bp + -1] ; $p
1406   0CF6 DA            push d
1407   0CF7 FA FF FF      lea d, [bp + -1] ; $p
1408   0CFA 2A            mov b, [d]
1409   0CFB 38 00 00      mov c, 0
1410   0CFE             ; --- START TERMS
1411   0CFE D7            push a
1412   0CFF 11            mov a, b
1413   0D00 FD 2E 02 00   mov32 cb, $00000002
1413   0D04 00 00 
1414   0D06 56            add b, a
1415   0D07 E4            pop a
1416   0D08             ; --- END TERMS
1417   0D08 E7            pop d
1418   0D09 FD 43         mov [d], b
1419   0D0B             ; break; 
1420   0D0B 0A 1A 0D      jmp _switch24_exit ; case break
1421   0D0E             _switch24_default:
1422   0D0E             ; print("Error: Unknown argument type.\n"); 
1423   0D0E             ; --- START FUNCTION CALL
1424   0D0E 26 37 1D      mov b, _s5 ; "Error: Unknown argument type.\n"
1425   0D11 FD AB         swp b
1426   0D13 D8            push b
1427   0D14 07 9A 10      call print
1428   0D17 51 02 00      add sp, 2
1429   0D1A             ; --- END FUNCTION CALL
1430   0D1A             _switch24_exit:
1431   0D1A 0A 32 0D      jmp _if23_exit
1432   0D1D             _if23_else:
1433   0D1D             ; putchar(*format_p); 
1434   0D1D             ; --- START FUNCTION CALL
1435   0D1D FA FD FF      lea d, [bp + -3] ; $format_p
1436   0D20 2A            mov b, [d]
1437   0D21 38 00 00      mov c, 0
1438   0D24 74            mov d, b
1439   0D25 32            mov bl, [d]
1440   0D26 A7 00         mov bh, 0
1441   0D28 38 00 00      mov c, 0
1442   0D2B DD            push bl
1443   0D2C 07 D9 0E      call putchar
1444   0D2F 51 01 00      add sp, 1
1445   0D32             ; --- END FUNCTION CALL
1446   0D32             _if23_exit:
1447   0D32             _if22_exit:
1448   0D32             ; format_p++; 
1449   0D32 FA FD FF      lea d, [bp + -3] ; $format_p
1450   0D35 2A            mov b, [d]
1451   0D36 38 00 00      mov c, 0
1452   0D39 FD 77         inc b
1453   0D3B FA FD FF      lea d, [bp + -3] ; $format_p
1454   0D3E FD 43         mov [d], b
1455   0D40 FD 7D         dec b
1456   0D42             _for21_update:
1457   0D42 0A 86 0A      jmp _for21_cond
1458   0D45             _for21_exit:
1459   0D45 F9            leave
1460   0D46 09            ret
1461   0D47             
1462   0D47             print_signed_long:
1463   0D47 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1464   0D4A             ; char digits[10]; 
1465   0D4A 52 0A 00      sub sp, 10
1466   0D4D             ; int i = 0; 
1467   0D4D 52 02 00      sub sp, 2
1468   0D50             ; --- START LOCAL VAR INITIALIZATION
1469   0D50 FA F5 FF      lea d, [bp + -11] ; $i
1470   0D53 DA            push d
1471   0D54 FD 2E 00 00   mov32 cb, $00000000
1471   0D58 00 00 
1472   0D5A E7            pop d
1473   0D5B FD 43         mov [d], b
1474   0D5D             ; --- END LOCAL VAR INITIALIZATION
1475   0D5D             ; if (num < 0) { 
1476   0D5D             _if28_cond:
1477   0D5D FA 05 00      lea d, [bp + 5] ; $num
1478   0D60 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1479   0D63 FD 39         mov c, b ; And place it into C
1480   0D65 2A            mov b, [d] ; Lower Word in B
1481   0D66             ; --- START RELATIONAL
1482   0D66 D7            push a
1483   0D67 FD D8         push g
1484   0D69 11            mov a, b
1485   0D6A FD 7A         mov g, c
1486   0D6C FD 2E 00 00   mov32 cb, $00000000
1486   0D70 00 00 
1487   0D72 38 00 00      mov c, 0
1488   0D75 FD AF         cmp32 ga, cb
1489   0D77 FD 73         slt ; <
1490   0D79 FD F1         pop g
1491   0D7B E4            pop a
1492   0D7C             ; --- END RELATIONAL
1493   0D7C C0 00 00      cmp b, 0
1494   0D7F C6 B1 0D      je _if28_else
1495   0D82             _if28_TRUE:
1496   0D82             ; putchar('-'); 
1497   0D82             ; --- START FUNCTION CALL
1498   0D82 FD 2E 2D 00   mov32 cb, $0000002d
1498   0D86 00 00 
1499   0D88 DD            push bl
1500   0D89 07 D9 0E      call putchar
1501   0D8C 51 01 00      add sp, 1
1502   0D8F             ; --- END FUNCTION CALL
1503   0D8F             ; num = -num; 
1504   0D8F FA 05 00      lea d, [bp + 5] ; $num
1505   0D92 DA            push d
1506   0D93 FA 05 00      lea d, [bp + 5] ; $num
1507   0D96 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1508   0D99 FD 39         mov c, b ; And place it into C
1509   0D9B 2A            mov b, [d] ; Lower Word in B
1510   0D9C 12            mov a, c
1511   0D9D 95            not a
1512   0D9E 97            not b
1513   0D9F 55 01 00      add b, 1
1514   0DA2 5B 00 00      adc a, 0
1515   0DA5 39            mov c, a
1516   0DA6 E7            pop d
1517   0DA7 FD 43         mov [d], b
1518   0DA9 28            mov b, c
1519   0DAA FD 44 02 00   mov [d + 2], b
1520   0DAE 0A E8 0D      jmp _if28_exit
1521   0DB1             _if28_else:
1522   0DB1             ; if (num == 0) { 
1523   0DB1             _if29_cond:
1524   0DB1 FA 05 00      lea d, [bp + 5] ; $num
1525   0DB4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1526   0DB7 FD 39         mov c, b ; And place it into C
1527   0DB9 2A            mov b, [d] ; Lower Word in B
1528   0DBA             ; --- START RELATIONAL
1529   0DBA D7            push a
1530   0DBB FD D8         push g
1531   0DBD 11            mov a, b
1532   0DBE FD 7A         mov g, c
1533   0DC0 FD 2E 00 00   mov32 cb, $00000000
1533   0DC4 00 00 
1534   0DC6 38 00 00      mov c, 0
1535   0DC9 FD AF         cmp32 ga, cb
1536   0DCB FD 71         seq ; ==
1537   0DCD FD F1         pop g
1538   0DCF E4            pop a
1539   0DD0             ; --- END RELATIONAL
1540   0DD0 C0 00 00      cmp b, 0
1541   0DD3 C6 E8 0D      je _if29_exit
1542   0DD6             _if29_TRUE:
1543   0DD6             ; putchar('0'); 
1544   0DD6             ; --- START FUNCTION CALL
1545   0DD6 FD 2E 30 00   mov32 cb, $00000030
1545   0DDA 00 00 
1546   0DDC DD            push bl
1547   0DDD 07 D9 0E      call putchar
1548   0DE0 51 01 00      add sp, 1
1549   0DE3             ; --- END FUNCTION CALL
1550   0DE3             ; return; 
1551   0DE3 F9            leave
1552   0DE4 09            ret
1553   0DE5 0A E8 0D      jmp _if29_exit
1554   0DE8             _if29_exit:
1555   0DE8             _if28_exit:
1556   0DE8             ; while (num > 0) { 
1557   0DE8             _while30_cond:
1558   0DE8 FA 05 00      lea d, [bp + 5] ; $num
1559   0DEB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1560   0DEE FD 39         mov c, b ; And place it into C
1561   0DF0 2A            mov b, [d] ; Lower Word in B
1562   0DF1             ; --- START RELATIONAL
1563   0DF1 D7            push a
1564   0DF2 FD D8         push g
1565   0DF4 11            mov a, b
1566   0DF5 FD 7A         mov g, c
1567   0DF7 FD 2E 00 00   mov32 cb, $00000000
1567   0DFB 00 00 
1568   0DFD 38 00 00      mov c, 0
1569   0E00 FD AF         cmp32 ga, cb
1570   0E02 FD 7F         sgt
1571   0E04 FD F1         pop g
1572   0E06 E4            pop a
1573   0E07             ; --- END RELATIONAL
1574   0E07 C0 00 00      cmp b, 0
1575   0E0A C6 8F 0E      je _while30_exit
1576   0E0D             _while30_block:
1577   0E0D             ; digits[i] = '0' + (num % 10); 
1578   0E0D FA F7 FF      lea d, [bp + -9] ; $digits
1579   0E10 D7            push a
1580   0E11 DA            push d
1581   0E12 FA F5 FF      lea d, [bp + -11] ; $i
1582   0E15 2A            mov b, [d]
1583   0E16 38 00 00      mov c, 0
1584   0E19 E7            pop d
1585   0E1A 5A            add d, b
1586   0E1B E4            pop a
1587   0E1C DA            push d
1588   0E1D FD 2E 30 00   mov32 cb, $00000030
1588   0E21 00 00 
1589   0E23             ; --- START TERMS
1590   0E23 D7            push a
1591   0E24 11            mov a, b
1592   0E25 FA 05 00      lea d, [bp + 5] ; $num
1593   0E28 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1594   0E2B FD 39         mov c, b ; And place it into C
1595   0E2D 2A            mov b, [d] ; Lower Word in B
1596   0E2E             ; --- START FACTORS
1597   0E2E D7            push a
1598   0E2F FD D8         push g
1599   0E31 11            mov a, b
1600   0E32 FD 7A         mov g, c
1601   0E34 FD 2E 0A 00   mov32 cb, $0000000a
1601   0E38 00 00 
1602   0E3A FD D8         push g ; save 'g' as the div instruction uses it
1603   0E3C AE            div a, b ; %, a: quotient, b: remainder
1604   0E3D 11            mov a, b
1605   0E3E FD F1         pop g
1606   0E40 FD 38         mov c, g
1607   0E42 27            mov b, a
1608   0E43 FD F1         pop g
1609   0E45 E4            pop a
1610   0E46             ; --- END FACTORS
1611   0E46 FD 22 00 00   mov g, 0
1612   0E4A FD 15         add32 cb, ga
1613   0E4C E4            pop a
1614   0E4D             ; --- END TERMS
1615   0E4D E7            pop d
1616   0E4E FD 3E         mov [d], bl
1617   0E50             ; num = num / 10; 
1618   0E50 FA 05 00      lea d, [bp + 5] ; $num
1619   0E53 DA            push d
1620   0E54 FA 05 00      lea d, [bp + 5] ; $num
1621   0E57 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1622   0E5A FD 39         mov c, b ; And place it into C
1623   0E5C 2A            mov b, [d] ; Lower Word in B
1624   0E5D             ; --- START FACTORS
1625   0E5D D7            push a
1626   0E5E FD D8         push g
1627   0E60 11            mov a, b
1628   0E61 FD 7A         mov g, c
1629   0E63 FD 2E 0A 00   mov32 cb, $0000000a
1629   0E67 00 00 
1630   0E69 FD D8         push g ; save 'g' as the div instruction uses it
1631   0E6B AE            div a, b ; /, a: quotient, b: remainder
1632   0E6C FD F1         pop g
1633   0E6E FD 38         mov c, g
1634   0E70 27            mov b, a
1635   0E71 FD F1         pop g
1636   0E73 E4            pop a
1637   0E74             ; --- END FACTORS
1638   0E74 E7            pop d
1639   0E75 FD 43         mov [d], b
1640   0E77 28            mov b, c
1641   0E78 FD 44 02 00   mov [d + 2], b
1642   0E7C             ; i++; 
1643   0E7C FA F5 FF      lea d, [bp + -11] ; $i
1644   0E7F 2A            mov b, [d]
1645   0E80 38 00 00      mov c, 0
1646   0E83 11            mov a, b
1647   0E84 FD 77         inc b
1648   0E86 FA F5 FF      lea d, [bp + -11] ; $i
1649   0E89 FD 43         mov [d], b
1650   0E8B 27            mov b, a
1651   0E8C 0A E8 0D      jmp _while30_cond
1652   0E8F             _while30_exit:
1653   0E8F             ; while (i > 0) { 
1654   0E8F             _while37_cond:
1655   0E8F FA F5 FF      lea d, [bp + -11] ; $i
1656   0E92 2A            mov b, [d]
1657   0E93 38 00 00      mov c, 0
1658   0E96             ; --- START RELATIONAL
1659   0E96 D7            push a
1660   0E97 11            mov a, b
1661   0E98 FD 2E 00 00   mov32 cb, $00000000
1661   0E9C 00 00 
1662   0E9E B0            cmp a, b
1663   0E9F FD 7F         sgt ; >
1664   0EA1 E4            pop a
1665   0EA2             ; --- END RELATIONAL
1666   0EA2 C0 00 00      cmp b, 0
1667   0EA5 C6 D7 0E      je _while37_exit
1668   0EA8             _while37_block:
1669   0EA8             ; i--; 
1670   0EA8 FA F5 FF      lea d, [bp + -11] ; $i
1671   0EAB 2A            mov b, [d]
1672   0EAC 38 00 00      mov c, 0
1673   0EAF 11            mov a, b
1674   0EB0 FD 7D         dec b
1675   0EB2 FA F5 FF      lea d, [bp + -11] ; $i
1676   0EB5 FD 43         mov [d], b
1677   0EB7 27            mov b, a
1678   0EB8             ; putchar(digits[i]); 
1679   0EB8             ; --- START FUNCTION CALL
1680   0EB8 FA F7 FF      lea d, [bp + -9] ; $digits
1681   0EBB D7            push a
1682   0EBC DA            push d
1683   0EBD FA F5 FF      lea d, [bp + -11] ; $i
1684   0EC0 2A            mov b, [d]
1685   0EC1 38 00 00      mov c, 0
1686   0EC4 E7            pop d
1687   0EC5 5A            add d, b
1688   0EC6 E4            pop a
1689   0EC7 32            mov bl, [d]
1690   0EC8 A7 00         mov bh, 0
1691   0ECA 38 00 00      mov c, 0
1692   0ECD DD            push bl
1693   0ECE 07 D9 0E      call putchar
1694   0ED1 51 01 00      add sp, 1
1695   0ED4             ; --- END FUNCTION CALL
1696   0ED4 0A 8F 0E      jmp _while37_cond
1697   0ED7             _while37_exit:
1698   0ED7 F9            leave
1699   0ED8 09            ret
1700   0ED9             
1701   0ED9             putchar:
1702   0ED9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1703   0EDC             ; --- BEGIN INLINE ASM SEGMENT
1704   0EDC FA 05 00      lea d, [bp + 5] ; $c
1705   0EDF 1E            mov al, [d]
1706   0EE0 23            mov ah, al
1707   0EE1 19 00         mov al, 0
1708   0EE3 05 03         syscall sys_io      ; char in AH
1709   0EE5             ; --- END INLINE ASM SEGMENT
1710   0EE5 F9            leave
1711   0EE6 09            ret
1712   0EE7             
1713   0EE7             print_unsigned_long:
1714   0EE7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1715   0EEA             ; char digits[10]; 
1716   0EEA 52 0A 00      sub sp, 10
1717   0EED             ; int i; 
1718   0EED 52 02 00      sub sp, 2
1719   0EF0             ; i = 0; 
1720   0EF0 FA F5 FF      lea d, [bp + -11] ; $i
1721   0EF3 DA            push d
1722   0EF4 FD 2E 00 00   mov32 cb, $00000000
1722   0EF8 00 00 
1723   0EFA E7            pop d
1724   0EFB FD 43         mov [d], b
1725   0EFD             ; if(num == 0){ 
1726   0EFD             _if38_cond:
1727   0EFD FA 05 00      lea d, [bp + 5] ; $num
1728   0F00 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1729   0F03 FD 39         mov c, b ; And place it into C
1730   0F05 2A            mov b, [d] ; Lower Word in B
1731   0F06             ; --- START RELATIONAL
1732   0F06 D7            push a
1733   0F07 FD D8         push g
1734   0F09 11            mov a, b
1735   0F0A FD 7A         mov g, c
1736   0F0C FD 2E 00 00   mov32 cb, $00000000
1736   0F10 00 00 
1737   0F12 38 00 00      mov c, 0
1738   0F15 FD AF         cmp32 ga, cb
1739   0F17 FD 71         seq ; ==
1740   0F19 FD F1         pop g
1741   0F1B E4            pop a
1742   0F1C             ; --- END RELATIONAL
1743   0F1C C0 00 00      cmp b, 0
1744   0F1F C6 34 0F      je _if38_exit
1745   0F22             _if38_TRUE:
1746   0F22             ; putchar('0'); 
1747   0F22             ; --- START FUNCTION CALL
1748   0F22 FD 2E 30 00   mov32 cb, $00000030
1748   0F26 00 00 
1749   0F28 DD            push bl
1750   0F29 07 D9 0E      call putchar
1751   0F2C 51 01 00      add sp, 1
1752   0F2F             ; --- END FUNCTION CALL
1753   0F2F             ; return; 
1754   0F2F F9            leave
1755   0F30 09            ret
1756   0F31 0A 34 0F      jmp _if38_exit
1757   0F34             _if38_exit:
1758   0F34             ; while (num > 0) { 
1759   0F34             _while39_cond:
1760   0F34 FA 05 00      lea d, [bp + 5] ; $num
1761   0F37 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1762   0F3A FD 39         mov c, b ; And place it into C
1763   0F3C 2A            mov b, [d] ; Lower Word in B
1764   0F3D             ; --- START RELATIONAL
1765   0F3D D7            push a
1766   0F3E FD D8         push g
1767   0F40 11            mov a, b
1768   0F41 FD 7A         mov g, c
1769   0F43 FD 2E 00 00   mov32 cb, $00000000
1769   0F47 00 00 
1770   0F49 38 00 00      mov c, 0
1771   0F4C FD AF         cmp32 ga, cb
1772   0F4E FD 81         sgu
1773   0F50 FD F1         pop g
1774   0F52 E4            pop a
1775   0F53             ; --- END RELATIONAL
1776   0F53 C0 00 00      cmp b, 0
1777   0F56 C6 DB 0F      je _while39_exit
1778   0F59             _while39_block:
1779   0F59             ; digits[i] = '0' + (num % 10); 
1780   0F59 FA F7 FF      lea d, [bp + -9] ; $digits
1781   0F5C D7            push a
1782   0F5D DA            push d
1783   0F5E FA F5 FF      lea d, [bp + -11] ; $i
1784   0F61 2A            mov b, [d]
1785   0F62 38 00 00      mov c, 0
1786   0F65 E7            pop d
1787   0F66 5A            add d, b
1788   0F67 E4            pop a
1789   0F68 DA            push d
1790   0F69 FD 2E 30 00   mov32 cb, $00000030
1790   0F6D 00 00 
1791   0F6F             ; --- START TERMS
1792   0F6F D7            push a
1793   0F70 11            mov a, b
1794   0F71 FA 05 00      lea d, [bp + 5] ; $num
1795   0F74 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1796   0F77 FD 39         mov c, b ; And place it into C
1797   0F79 2A            mov b, [d] ; Lower Word in B
1798   0F7A             ; --- START FACTORS
1799   0F7A D7            push a
1800   0F7B FD D8         push g
1801   0F7D 11            mov a, b
1802   0F7E FD 7A         mov g, c
1803   0F80 FD 2E 0A 00   mov32 cb, $0000000a
1803   0F84 00 00 
1804   0F86 FD D8         push g ; save 'g' as the div instruction uses it
1805   0F88 AE            div a, b ; %, a: quotient, b: remainder
1806   0F89 11            mov a, b
1807   0F8A FD F1         pop g
1808   0F8C FD 38         mov c, g
1809   0F8E 27            mov b, a
1810   0F8F FD F1         pop g
1811   0F91 E4            pop a
1812   0F92             ; --- END FACTORS
1813   0F92 FD 22 00 00   mov g, 0
1814   0F96 FD 15         add32 cb, ga
1815   0F98 E4            pop a
1816   0F99             ; --- END TERMS
1817   0F99 E7            pop d
1818   0F9A FD 3E         mov [d], bl
1819   0F9C             ; num = num / 10; 
1820   0F9C FA 05 00      lea d, [bp + 5] ; $num
1821   0F9F DA            push d
1822   0FA0 FA 05 00      lea d, [bp + 5] ; $num
1823   0FA3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1824   0FA6 FD 39         mov c, b ; And place it into C
1825   0FA8 2A            mov b, [d] ; Lower Word in B
1826   0FA9             ; --- START FACTORS
1827   0FA9 D7            push a
1828   0FAA FD D8         push g
1829   0FAC 11            mov a, b
1830   0FAD FD 7A         mov g, c
1831   0FAF FD 2E 0A 00   mov32 cb, $0000000a
1831   0FB3 00 00 
1832   0FB5 FD D8         push g ; save 'g' as the div instruction uses it
1833   0FB7 AE            div a, b ; /, a: quotient, b: remainder
1834   0FB8 FD F1         pop g
1835   0FBA FD 38         mov c, g
1836   0FBC 27            mov b, a
1837   0FBD FD F1         pop g
1838   0FBF E4            pop a
1839   0FC0             ; --- END FACTORS
1840   0FC0 E7            pop d
1841   0FC1 FD 43         mov [d], b
1842   0FC3 28            mov b, c
1843   0FC4 FD 44 02 00   mov [d + 2], b
1844   0FC8             ; i++; 
1845   0FC8 FA F5 FF      lea d, [bp + -11] ; $i
1846   0FCB 2A            mov b, [d]
1847   0FCC 38 00 00      mov c, 0
1848   0FCF 11            mov a, b
1849   0FD0 FD 77         inc b
1850   0FD2 FA F5 FF      lea d, [bp + -11] ; $i
1851   0FD5 FD 43         mov [d], b
1852   0FD7 27            mov b, a
1853   0FD8 0A 34 0F      jmp _while39_cond
1854   0FDB             _while39_exit:
1855   0FDB             ; while (i > 0) { 
1856   0FDB             _while46_cond:
1857   0FDB FA F5 FF      lea d, [bp + -11] ; $i
1858   0FDE 2A            mov b, [d]
1859   0FDF 38 00 00      mov c, 0
1860   0FE2             ; --- START RELATIONAL
1861   0FE2 D7            push a
1862   0FE3 11            mov a, b
1863   0FE4 FD 2E 00 00   mov32 cb, $00000000
1863   0FE8 00 00 
1864   0FEA B0            cmp a, b
1865   0FEB FD 7F         sgt ; >
1866   0FED E4            pop a
1867   0FEE             ; --- END RELATIONAL
1868   0FEE C0 00 00      cmp b, 0
1869   0FF1 C6 23 10      je _while46_exit
1870   0FF4             _while46_block:
1871   0FF4             ; i--; 
1872   0FF4 FA F5 FF      lea d, [bp + -11] ; $i
1873   0FF7 2A            mov b, [d]
1874   0FF8 38 00 00      mov c, 0
1875   0FFB 11            mov a, b
1876   0FFC FD 7D         dec b
1877   0FFE FA F5 FF      lea d, [bp + -11] ; $i
1878   1001 FD 43         mov [d], b
1879   1003 27            mov b, a
1880   1004             ; putchar(digits[i]); 
1881   1004             ; --- START FUNCTION CALL
1882   1004 FA F7 FF      lea d, [bp + -9] ; $digits
1883   1007 D7            push a
1884   1008 DA            push d
1885   1009 FA F5 FF      lea d, [bp + -11] ; $i
1886   100C 2A            mov b, [d]
1887   100D 38 00 00      mov c, 0
1888   1010 E7            pop d
1889   1011 5A            add d, b
1890   1012 E4            pop a
1891   1013 32            mov bl, [d]
1892   1014 A7 00         mov bh, 0
1893   1016 38 00 00      mov c, 0
1894   1019 DD            push bl
1895   101A 07 D9 0E      call putchar
1896   101D 51 01 00      add sp, 1
1897   1020             ; --- END FUNCTION CALL
1898   1020 0A DB 0F      jmp _while46_cond
1899   1023             _while46_exit:
1900   1023 F9            leave
1901   1024 09            ret
1902   1025             
1903   1025             printx32:
1904   1025 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1905   1028             ; --- BEGIN INLINE ASM SEGMENT
1906   1028 FA 05 00      lea d, [bp + 5] ; $hex
1907   102B 2B 02 00      mov b, [d+2]
1908   102E 07 37 10      call print_u16x_printx32
1909   1031 2A            mov b, [d]
1910   1032 07 37 10      call print_u16x_printx32
1911   1035             ; --- END INLINE ASM SEGMENT
1912   1035             ; return; 
1913   1035 F9            leave
1914   1036 09            ret
1915   1037             ; --- BEGIN INLINE ASM SEGMENT
1916   1037             print_u16x_printx32:
1917   1037 D7            push a
1918   1038 D8            push b
1919   1039 DD            push bl
1920   103A 30            mov bl, bh
1921   103B 07 59 10      call _itoa_printx32        ; convert bh to char in A
1922   103E 2F            mov bl, al        ; save al
1923   103F 19 00         mov al, 0
1924   1041 05 03         syscall sys_io        ; display AH
1925   1043 24            mov ah, bl        ; retrieve al
1926   1044 19 00         mov al, 0
1927   1046 05 03         syscall sys_io        ; display AL
1928   1048 EA            pop bl
1929   1049 07 59 10      call _itoa_printx32        ; convert bh to char in A
1930   104C 2F            mov bl, al        ; save al
1931   104D 19 00         mov al, 0
1932   104F 05 03         syscall sys_io        ; display AH
1933   1051 24            mov ah, bl        ; retrieve al
1934   1052 19 00         mov al, 0
1935   1054 05 03         syscall sys_io        ; display AL
1936   1056 E5            pop b
1937   1057 E4            pop a
1938   1058 09            ret
1939   1059             _itoa_printx32:
1940   1059 DA            push d
1941   105A D8            push b
1942   105B A7 00         mov bh, 0
1943   105D FD A4 04      shr bl, 4  
1944   1060 74            mov d, b
1945   1061 1F 73 10      mov al, [d + s_hex_digits_printx32]
1946   1064 23            mov ah, al
1947   1065 E5            pop b
1948   1066 D8            push b
1949   1067 A7 00         mov bh, 0
1950   1069 FD 87 0F      and bl, $0F
1951   106C 74            mov d, b
1952   106D 1F 73 10      mov al, [d + s_hex_digits_printx32]
1953   1070 E5            pop b
1954   1071 E7            pop d
1955   1072 09            ret
1956   1073 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
1956   1077 34 35 36 37 
1956   107B 38 39 41 42 
1956   107F 43 44 45 46 
1957   1083             ; --- END INLINE ASM SEGMENT
1958   1083 F9            leave
1959   1084 09            ret
1960   1085             
1961   1085             err:
1962   1085 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1963   1088             ; print(e); 
1964   1088             ; --- START FUNCTION CALL
1965   1088 FA 05 00      lea d, [bp + 5] ; $e
1966   108B 2A            mov b, [d]
1967   108C 38 00 00      mov c, 0
1968   108F FD AB         swp b
1969   1091 D8            push b
1970   1092 07 9A 10      call print
1971   1095 51 02 00      add sp, 2
1972   1098             ; --- END FUNCTION CALL
1973   1098 F9            leave
1974   1099 09            ret
1975   109A             
1976   109A             print:
1977   109A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1978   109D             ; --- BEGIN INLINE ASM SEGMENT
1979   109D FA 05 00      lea d, [bp + 5] ; $s
1980   10A0 FD 2A         mov d, [d]
1981   10A2             _puts_L1_print:
1982   10A2 1E            mov al, [d]
1983   10A3 B9 00         cmp al, 0
1984   10A5 C6 B1 10      jz _puts_END_print
1985   10A8 23            mov ah, al
1986   10A9 19 00         mov al, 0
1987   10AB 05 03         syscall sys_io
1988   10AD 79            inc d
1989   10AE 0A A2 10      jmp _puts_L1_print
1990   10B1             _puts_END_print:
1991   10B1             ; --- END INLINE ASM SEGMENT
1992   10B1 F9            leave
1993   10B2 09            ret
1994   10B3             
1995   10B3             print_signed:
1996   10B3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1997   10B6             ; char digits[5]; 
1998   10B6 52 05 00      sub sp, 5
1999   10B9             ; int i = 0; 
2000   10B9 52 02 00      sub sp, 2
2001   10BC             ; --- START LOCAL VAR INITIALIZATION
2002   10BC FA FA FF      lea d, [bp + -6] ; $i
2003   10BF DA            push d
2004   10C0 FD 2E 00 00   mov32 cb, $00000000
2004   10C4 00 00 
2005   10C6 E7            pop d
2006   10C7 FD 43         mov [d], b
2007   10C9             ; --- END LOCAL VAR INITIALIZATION
2008   10C9             ; if (num < 0) { 
2009   10C9             _if47_cond:
2010   10C9 FA 05 00      lea d, [bp + 5] ; $num
2011   10CC 2A            mov b, [d]
2012   10CD 38 00 00      mov c, 0
2013   10D0             ; --- START RELATIONAL
2014   10D0 D7            push a
2015   10D1 11            mov a, b
2016   10D2 FD 2E 00 00   mov32 cb, $00000000
2016   10D6 00 00 
2017   10D8 B0            cmp a, b
2018   10D9 FD 73         slt ; < (signed)
2019   10DB E4            pop a
2020   10DC             ; --- END RELATIONAL
2021   10DC C0 00 00      cmp b, 0
2022   10DF C6 02 11      je _if47_else
2023   10E2             _if47_TRUE:
2024   10E2             ; putchar('-'); 
2025   10E2             ; --- START FUNCTION CALL
2026   10E2 FD 2E 2D 00   mov32 cb, $0000002d
2026   10E6 00 00 
2027   10E8 DD            push bl
2028   10E9 07 D9 0E      call putchar
2029   10EC 51 01 00      add sp, 1
2030   10EF             ; --- END FUNCTION CALL
2031   10EF             ; num = -num; 
2032   10EF FA 05 00      lea d, [bp + 5] ; $num
2033   10F2 DA            push d
2034   10F3 FA 05 00      lea d, [bp + 5] ; $num
2035   10F6 2A            mov b, [d]
2036   10F7 38 00 00      mov c, 0
2037   10FA FD 97         neg b
2038   10FC E7            pop d
2039   10FD FD 43         mov [d], b
2040   10FF 0A 2D 11      jmp _if47_exit
2041   1102             _if47_else:
2042   1102             ; if (num == 0) { 
2043   1102             _if48_cond:
2044   1102 FA 05 00      lea d, [bp + 5] ; $num
2045   1105 2A            mov b, [d]
2046   1106 38 00 00      mov c, 0
2047   1109             ; --- START RELATIONAL
2048   1109 D7            push a
2049   110A 11            mov a, b
2050   110B FD 2E 00 00   mov32 cb, $00000000
2050   110F 00 00 
2051   1111 B0            cmp a, b
2052   1112 FD 71         seq ; ==
2053   1114 E4            pop a
2054   1115             ; --- END RELATIONAL
2055   1115 C0 00 00      cmp b, 0
2056   1118 C6 2D 11      je _if48_exit
2057   111B             _if48_TRUE:
2058   111B             ; putchar('0'); 
2059   111B             ; --- START FUNCTION CALL
2060   111B FD 2E 30 00   mov32 cb, $00000030
2060   111F 00 00 
2061   1121 DD            push bl
2062   1122 07 D9 0E      call putchar
2063   1125 51 01 00      add sp, 1
2064   1128             ; --- END FUNCTION CALL
2065   1128             ; return; 
2066   1128 F9            leave
2067   1129 09            ret
2068   112A 0A 2D 11      jmp _if48_exit
2069   112D             _if48_exit:
2070   112D             _if47_exit:
2071   112D             ; while (num > 0) { 
2072   112D             _while49_cond:
2073   112D FA 05 00      lea d, [bp + 5] ; $num
2074   1130 2A            mov b, [d]
2075   1131 38 00 00      mov c, 0
2076   1134             ; --- START RELATIONAL
2077   1134 D7            push a
2078   1135 11            mov a, b
2079   1136 FD 2E 00 00   mov32 cb, $00000000
2079   113A 00 00 
2080   113C B0            cmp a, b
2081   113D FD 7F         sgt ; >
2082   113F E4            pop a
2083   1140             ; --- END RELATIONAL
2084   1140 C0 00 00      cmp b, 0
2085   1143 C6 BA 11      je _while49_exit
2086   1146             _while49_block:
2087   1146             ; digits[i] = '0' + (num % 10); 
2088   1146 FA FC FF      lea d, [bp + -4] ; $digits
2089   1149 D7            push a
2090   114A DA            push d
2091   114B FA FA FF      lea d, [bp + -6] ; $i
2092   114E 2A            mov b, [d]
2093   114F 38 00 00      mov c, 0
2094   1152 E7            pop d
2095   1153 5A            add d, b
2096   1154 E4            pop a
2097   1155 DA            push d
2098   1156 FD 2E 30 00   mov32 cb, $00000030
2098   115A 00 00 
2099   115C             ; --- START TERMS
2100   115C D7            push a
2101   115D 11            mov a, b
2102   115E FA 05 00      lea d, [bp + 5] ; $num
2103   1161 2A            mov b, [d]
2104   1162 38 00 00      mov c, 0
2105   1165             ; --- START FACTORS
2106   1165 D7            push a
2107   1166 FD D8         push g
2108   1168 11            mov a, b
2109   1169 FD 7A         mov g, c
2110   116B FD 2E 0A 00   mov32 cb, $0000000a
2110   116F 00 00 
2111   1171 FD D8         push g ; save 'g' as the div instruction uses it
2112   1173 AE            div a, b ; %, a: quotient, b: remainder
2113   1174 11            mov a, b
2114   1175 FD F1         pop g
2115   1177 FD 38         mov c, g
2116   1179 27            mov b, a
2117   117A FD F1         pop g
2118   117C E4            pop a
2119   117D             ; --- END FACTORS
2120   117D 56            add b, a
2121   117E E4            pop a
2122   117F             ; --- END TERMS
2123   117F E7            pop d
2124   1180 FD 3E         mov [d], bl
2125   1182             ; num = num / 10; 
2126   1182 FA 05 00      lea d, [bp + 5] ; $num
2127   1185 DA            push d
2128   1186 FA 05 00      lea d, [bp + 5] ; $num
2129   1189 2A            mov b, [d]
2130   118A 38 00 00      mov c, 0
2131   118D             ; --- START FACTORS
2132   118D D7            push a
2133   118E FD D8         push g
2134   1190 11            mov a, b
2135   1191 FD 7A         mov g, c
2136   1193 FD 2E 0A 00   mov32 cb, $0000000a
2136   1197 00 00 
2137   1199 FD D8         push g ; save 'g' as the div instruction uses it
2138   119B AE            div a, b ; /, a: quotient, b: remainder
2139   119C FD F1         pop g
2140   119E FD 38         mov c, g
2141   11A0 27            mov b, a
2142   11A1 FD F1         pop g
2143   11A3 E4            pop a
2144   11A4             ; --- END FACTORS
2145   11A4 E7            pop d
2146   11A5 FD 43         mov [d], b
2147   11A7             ; i++; 
2148   11A7 FA FA FF      lea d, [bp + -6] ; $i
2149   11AA 2A            mov b, [d]
2150   11AB 38 00 00      mov c, 0
2151   11AE 11            mov a, b
2152   11AF FD 77         inc b
2153   11B1 FA FA FF      lea d, [bp + -6] ; $i
2154   11B4 FD 43         mov [d], b
2155   11B6 27            mov b, a
2156   11B7 0A 2D 11      jmp _while49_cond
2157   11BA             _while49_exit:
2158   11BA             ; while (i > 0) { 
2159   11BA             _while56_cond:
2160   11BA FA FA FF      lea d, [bp + -6] ; $i
2161   11BD 2A            mov b, [d]
2162   11BE 38 00 00      mov c, 0
2163   11C1             ; --- START RELATIONAL
2164   11C1 D7            push a
2165   11C2 11            mov a, b
2166   11C3 FD 2E 00 00   mov32 cb, $00000000
2166   11C7 00 00 
2167   11C9 B0            cmp a, b
2168   11CA FD 7F         sgt ; >
2169   11CC E4            pop a
2170   11CD             ; --- END RELATIONAL
2171   11CD C0 00 00      cmp b, 0
2172   11D0 C6 02 12      je _while56_exit
2173   11D3             _while56_block:
2174   11D3             ; i--; 
2175   11D3 FA FA FF      lea d, [bp + -6] ; $i
2176   11D6 2A            mov b, [d]
2177   11D7 38 00 00      mov c, 0
2178   11DA 11            mov a, b
2179   11DB FD 7D         dec b
2180   11DD FA FA FF      lea d, [bp + -6] ; $i
2181   11E0 FD 43         mov [d], b
2182   11E2 27            mov b, a
2183   11E3             ; putchar(digits[i]); 
2184   11E3             ; --- START FUNCTION CALL
2185   11E3 FA FC FF      lea d, [bp + -4] ; $digits
2186   11E6 D7            push a
2187   11E7 DA            push d
2188   11E8 FA FA FF      lea d, [bp + -6] ; $i
2189   11EB 2A            mov b, [d]
2190   11EC 38 00 00      mov c, 0
2191   11EF E7            pop d
2192   11F0 5A            add d, b
2193   11F1 E4            pop a
2194   11F2 32            mov bl, [d]
2195   11F3 A7 00         mov bh, 0
2196   11F5 38 00 00      mov c, 0
2197   11F8 DD            push bl
2198   11F9 07 D9 0E      call putchar
2199   11FC 51 01 00      add sp, 1
2200   11FF             ; --- END FUNCTION CALL
2201   11FF 0A BA 11      jmp _while56_cond
2202   1202             _while56_exit:
2203   1202 F9            leave
2204   1203 09            ret
2205   1204             
2206   1204             print_unsigned:
2207   1204 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2208   1207             ; char digits[5]; 
2209   1207 52 05 00      sub sp, 5
2210   120A             ; int i; 
2211   120A 52 02 00      sub sp, 2
2212   120D             ; i = 0; 
2213   120D FA FA FF      lea d, [bp + -6] ; $i
2214   1210 DA            push d
2215   1211 FD 2E 00 00   mov32 cb, $00000000
2215   1215 00 00 
2216   1217 E7            pop d
2217   1218 FD 43         mov [d], b
2218   121A             ; if(num == 0){ 
2219   121A             _if57_cond:
2220   121A FA 05 00      lea d, [bp + 5] ; $num
2221   121D 2A            mov b, [d]
2222   121E 38 00 00      mov c, 0
2223   1221             ; --- START RELATIONAL
2224   1221 D7            push a
2225   1222 11            mov a, b
2226   1223 FD 2E 00 00   mov32 cb, $00000000
2226   1227 00 00 
2227   1229 B0            cmp a, b
2228   122A FD 71         seq ; ==
2229   122C E4            pop a
2230   122D             ; --- END RELATIONAL
2231   122D C0 00 00      cmp b, 0
2232   1230 C6 45 12      je _if57_exit
2233   1233             _if57_TRUE:
2234   1233             ; putchar('0'); 
2235   1233             ; --- START FUNCTION CALL
2236   1233 FD 2E 30 00   mov32 cb, $00000030
2236   1237 00 00 
2237   1239 DD            push bl
2238   123A 07 D9 0E      call putchar
2239   123D 51 01 00      add sp, 1
2240   1240             ; --- END FUNCTION CALL
2241   1240             ; return; 
2242   1240 F9            leave
2243   1241 09            ret
2244   1242 0A 45 12      jmp _if57_exit
2245   1245             _if57_exit:
2246   1245             ; while (num > 0) { 
2247   1245             _while58_cond:
2248   1245 FA 05 00      lea d, [bp + 5] ; $num
2249   1248 2A            mov b, [d]
2250   1249 38 00 00      mov c, 0
2251   124C             ; --- START RELATIONAL
2252   124C D7            push a
2253   124D 11            mov a, b
2254   124E FD 2E 00 00   mov32 cb, $00000000
2254   1252 00 00 
2255   1254 B0            cmp a, b
2256   1255 FD 81         sgu ; > (unsigned)
2257   1257 E4            pop a
2258   1258             ; --- END RELATIONAL
2259   1258 C0 00 00      cmp b, 0
2260   125B C6 D2 12      je _while58_exit
2261   125E             _while58_block:
2262   125E             ; digits[i] = '0' + (num % 10); 
2263   125E FA FC FF      lea d, [bp + -4] ; $digits
2264   1261 D7            push a
2265   1262 DA            push d
2266   1263 FA FA FF      lea d, [bp + -6] ; $i
2267   1266 2A            mov b, [d]
2268   1267 38 00 00      mov c, 0
2269   126A E7            pop d
2270   126B 5A            add d, b
2271   126C E4            pop a
2272   126D DA            push d
2273   126E FD 2E 30 00   mov32 cb, $00000030
2273   1272 00 00 
2274   1274             ; --- START TERMS
2275   1274 D7            push a
2276   1275 11            mov a, b
2277   1276 FA 05 00      lea d, [bp + 5] ; $num
2278   1279 2A            mov b, [d]
2279   127A 38 00 00      mov c, 0
2280   127D             ; --- START FACTORS
2281   127D D7            push a
2282   127E FD D8         push g
2283   1280 11            mov a, b
2284   1281 FD 7A         mov g, c
2285   1283 FD 2E 0A 00   mov32 cb, $0000000a
2285   1287 00 00 
2286   1289 FD D8         push g ; save 'g' as the div instruction uses it
2287   128B AE            div a, b ; %, a: quotient, b: remainder
2288   128C 11            mov a, b
2289   128D FD F1         pop g
2290   128F FD 38         mov c, g
2291   1291 27            mov b, a
2292   1292 FD F1         pop g
2293   1294 E4            pop a
2294   1295             ; --- END FACTORS
2295   1295 56            add b, a
2296   1296 E4            pop a
2297   1297             ; --- END TERMS
2298   1297 E7            pop d
2299   1298 FD 3E         mov [d], bl
2300   129A             ; num = num / 10; 
2301   129A FA 05 00      lea d, [bp + 5] ; $num
2302   129D DA            push d
2303   129E FA 05 00      lea d, [bp + 5] ; $num
2304   12A1 2A            mov b, [d]
2305   12A2 38 00 00      mov c, 0
2306   12A5             ; --- START FACTORS
2307   12A5 D7            push a
2308   12A6 FD D8         push g
2309   12A8 11            mov a, b
2310   12A9 FD 7A         mov g, c
2311   12AB FD 2E 0A 00   mov32 cb, $0000000a
2311   12AF 00 00 
2312   12B1 FD D8         push g ; save 'g' as the div instruction uses it
2313   12B3 AE            div a, b ; /, a: quotient, b: remainder
2314   12B4 FD F1         pop g
2315   12B6 FD 38         mov c, g
2316   12B8 27            mov b, a
2317   12B9 FD F1         pop g
2318   12BB E4            pop a
2319   12BC             ; --- END FACTORS
2320   12BC E7            pop d
2321   12BD FD 43         mov [d], b
2322   12BF             ; i++; 
2323   12BF FA FA FF      lea d, [bp + -6] ; $i
2324   12C2 2A            mov b, [d]
2325   12C3 38 00 00      mov c, 0
2326   12C6 11            mov a, b
2327   12C7 FD 77         inc b
2328   12C9 FA FA FF      lea d, [bp + -6] ; $i
2329   12CC FD 43         mov [d], b
2330   12CE 27            mov b, a
2331   12CF 0A 45 12      jmp _while58_cond
2332   12D2             _while58_exit:
2333   12D2             ; while (i > 0) { 
2334   12D2             _while65_cond:
2335   12D2 FA FA FF      lea d, [bp + -6] ; $i
2336   12D5 2A            mov b, [d]
2337   12D6 38 00 00      mov c, 0
2338   12D9             ; --- START RELATIONAL
2339   12D9 D7            push a
2340   12DA 11            mov a, b
2341   12DB FD 2E 00 00   mov32 cb, $00000000
2341   12DF 00 00 
2342   12E1 B0            cmp a, b
2343   12E2 FD 7F         sgt ; >
2344   12E4 E4            pop a
2345   12E5             ; --- END RELATIONAL
2346   12E5 C0 00 00      cmp b, 0
2347   12E8 C6 1A 13      je _while65_exit
2348   12EB             _while65_block:
2349   12EB             ; i--; 
2350   12EB FA FA FF      lea d, [bp + -6] ; $i
2351   12EE 2A            mov b, [d]
2352   12EF 38 00 00      mov c, 0
2353   12F2 11            mov a, b
2354   12F3 FD 7D         dec b
2355   12F5 FA FA FF      lea d, [bp + -6] ; $i
2356   12F8 FD 43         mov [d], b
2357   12FA 27            mov b, a
2358   12FB             ; putchar(digits[i]); 
2359   12FB             ; --- START FUNCTION CALL
2360   12FB FA FC FF      lea d, [bp + -4] ; $digits
2361   12FE D7            push a
2362   12FF DA            push d
2363   1300 FA FA FF      lea d, [bp + -6] ; $i
2364   1303 2A            mov b, [d]
2365   1304 38 00 00      mov c, 0
2366   1307 E7            pop d
2367   1308 5A            add d, b
2368   1309 E4            pop a
2369   130A 32            mov bl, [d]
2370   130B A7 00         mov bh, 0
2371   130D 38 00 00      mov c, 0
2372   1310 DD            push bl
2373   1311 07 D9 0E      call putchar
2374   1314 51 01 00      add sp, 1
2375   1317             ; --- END FUNCTION CALL
2376   1317 0A D2 12      jmp _while65_cond
2377   131A             _while65_exit:
2378   131A F9            leave
2379   131B 09            ret
2380   131C             
2381   131C             printx16:
2382   131C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2383   131F             ; --- BEGIN INLINE ASM SEGMENT
2384   131F FA 05 00      lea d, [bp + 5] ; $hex
2385   1322 2A            mov b, [d]
2386   1323             print_u16x_printx16:
2387   1323 DD            push bl
2388   1324 30            mov bl, bh
2389   1325 07 42 13      call _itoa_printx16        ; convert bh to char in A
2390   1328 2F            mov bl, al        ; save al
2391   1329 19 00         mov al, 0
2392   132B 05 03         syscall sys_io        ; display AH
2393   132D 24            mov ah, bl        ; retrieve al
2394   132E 19 00         mov al, 0
2395   1330 05 03         syscall sys_io        ; display AL
2396   1332 EA            pop bl
2397   1333 07 42 13      call _itoa_printx16        ; convert bh to char in A
2398   1336 2F            mov bl, al        ; save al
2399   1337 19 00         mov al, 0
2400   1339 05 03         syscall sys_io        ; display AH
2401   133B 24            mov ah, bl        ; retrieve al
2402   133C 19 00         mov al, 0
2403   133E 05 03         syscall sys_io        ; display AL
2404   1340             ; --- END INLINE ASM SEGMENT
2405   1340             ; return; 
2406   1340 F9            leave
2407   1341 09            ret
2408   1342             ; --- BEGIN INLINE ASM SEGMENT
2409   1342             _itoa_printx16:
2410   1342 DA            push d
2411   1343 D8            push b
2412   1344 A7 00         mov bh, 0
2413   1346 FD A4 04      shr bl, 4  
2414   1349 74            mov d, b
2415   134A 1F 5C 13      mov al, [d + s_hex_digits_printx16]
2416   134D 23            mov ah, al
2417   134E E5            pop b
2418   134F D8            push b
2419   1350 A7 00         mov bh, 0
2420   1352 FD 87 0F      and bl, $0F
2421   1355 74            mov d, b
2422   1356 1F 5C 13      mov al, [d + s_hex_digits_printx16]
2423   1359 E5            pop b
2424   135A E7            pop d
2425   135B 09            ret
2426   135C 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
2426   1360 34 35 36 37 
2426   1364 38 39 41 42 
2426   1368 43 44 45 46 
2427   136C             ; --- END INLINE ASM SEGMENT
2428   136C F9            leave
2429   136D 09            ret
2430   136E             
2431   136E             puts:
2432   136E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2433   1371             ; --- BEGIN INLINE ASM SEGMENT
2434   1371 FA 05 00      lea d, [bp + 5] ; $s
2435   1374 FD 2A         mov d, [d]
2436   1376             _puts_L1_puts:
2437   1376 1E            mov al, [d]
2438   1377 B9 00         cmp al, 0
2439   1379 C6 85 13      jz _puts_END_puts
2440   137C 23            mov ah, al
2441   137D 19 00         mov al, 0
2442   137F 05 03         syscall sys_io
2443   1381 79            inc d
2444   1382 0A 76 13      jmp _puts_L1_puts
2445   1385             _puts_END_puts:
2446   1385 10 00 0A      mov a, $0A00
2447   1388 05 03         syscall sys_io
2448   138A             ; --- END INLINE ASM SEGMENT
2449   138A F9            leave
2450   138B 09            ret
2451   138C             ; --- END TEXT SEGMENT
2452   138C             
2453   138C             ; --- BEGIN DATA SEGMENT
2454   138C 1B 5B 32 4A _clear_data: .db $1b,$5b,$32,$4a,$1b,$5b,$48,$00,
2454   1390 1B 5B 48 00 
2455   1394             
2456   1394 00 00 00    .fill 3, 0
2457   1397 00 00 00 00 _nextState_data: .fill 1200, 0
2457   139B 00 00 00 00 
2457   139F 00 00 00 00 
2457   13A3 00 00 00 00 
2457   13A7 00 00 00 00 
2457   13AB 00 00 00 00 
2457   13AF 00 00 00 00 
2457   13B3 00 00 00 00 
2457   13B7 00 00 00 00 
2457   13BB 00 00 00 00 
2457   13BF 00 00 00 00 
2457   13C3 00 00 00 00 
2457   13C7 00 00 00 00 
2457   13CB 00 00 00 00 
2457   13CF 00 00 00 00 
2457   13D3 00 00 00 00 
2457   13D7 00 00 00 00 
2457   13DB 00 00 00 00 
2457   13DF 00 00 00 00 
2457   13E3 00 00 00 00 
2457   13E7 00 00 00 00 
2457   13EB 00 00 00 00 
2457   13EF 00 00 00 00 
2457   13F3 00 00 00 00 
2457   13F7 00 00 00 00 
2457   13FB 00 00 00 00 
2457   13FF 00 00 00 00 
2457   1403 00 00 00 00 
2457   1407 00 00 00 00 
2457   140B 00 00 00 00 
2457   140F 00 00 00 00 
2457   1413 00 00 00 00 
2457   1417 00 00 00 00 
2457   141B 00 00 00 00 
2457   141F 00 00 00 00 
2457   1423 00 00 00 00 
2457   1427 00 00 00 00 
2457   142B 00 00 00 00 
2457   142F 00 00 00 00 
2457   1433 00 00 00 00 
2457   1437 00 00 00 00 
2457   143B 00 00 00 00 
2457   143F 00 00 00 00 
2457   1443 00 00 00 00 
2457   1447 00 00 00 00 
2457   144B 00 00 00 00 
2457   144F 00 00 00 00 
2457   1453 00 00 00 00 
2457   1457 00 00 00 00 
2457   145B 00 00 00 00 
2457   145F 00 00 00 00 
2457   1463 00 00 00 00 
2457   1467 00 00 00 00 
2457   146B 00 00 00 00 
2457   146F 00 00 00 00 
2457   1473 00 00 00 00 
2457   1477 00 00 00 00 
2457   147B 00 00 00 00 
2457   147F 00 00 00 00 
2457   1483 00 00 00 00 
2457   1487 00 00 00 00 
2457   148B 00 00 00 00 
2457   148F 00 00 00 00 
2457   1493 00 00 00 00 
2457   1497 00 00 00 00 
2457   149B 00 00 00 00 
2457   149F 00 00 00 00 
2457   14A3 00 00 00 00 
2457   14A7 00 00 00 00 
2457   14AB 00 00 00 00 
2457   14AF 00 00 00 00 
2457   14B3 00 00 00 00 
2457   14B7 00 00 00 00 
2457   14BB 00 00 00 00 
2457   14BF 00 00 00 00 
2457   14C3 00 00 00 00 
2457   14C7 00 00 00 00 
2457   14CB 00 00 00 00 
2457   14CF 00 00 00 00 
2457   14D3 00 00 00 00 
2457   14D7 00 00 00 00 
2457   14DB 00 00 00 00 
2457   14DF 00 00 00 00 
2457   14E3 00 00 00 00 
2457   14E7 00 00 00 00 
2457   14EB 00 00 00 00 
2457   14EF 00 00 00 00 
2457   14F3 00 00 00 00 
2457   14F7 00 00 00 00 
2457   14FB 00 00 00 00 
2457   14FF 00 00 00 00 
2457   1503 00 00 00 00 
2457   1507 00 00 00 00 
2457   150B 00 00 00 00 
2457   150F 00 00 00 00 
2457   1513 00 00 00 00 
2457   1517 00 00 00 00 
2457   151B 00 00 00 00 
2457   151F 00 00 00 00 
2457   1523 00 00 00 00 
2457   1527 00 00 00 00 
2457   152B 00 00 00 00 
2457   152F 00 00 00 00 
2457   1533 00 00 00 00 
2457   1537 00 00 00 00 
2457   153B 00 00 00 00 
2457   153F 00 00 00 00 
2457   1543 00 00 00 00 
2457   1547 00 00 00 00 
2457   154B 00 00 00 00 
2457   154F 00 00 00 00 
2457   1553 00 00 00 00 
2457   1557 00 00 00 00 
2457   155B 00 00 00 00 
2457   155F 00 00 00 00 
2457   1563 00 00 00 00 
2457   1567 00 00 00 00 
2457   156B 00 00 00 00 
2457   156F 00 00 00 00 
2457   1573 00 00 00 00 
2457   1577 00 00 00 00 
2457   157B 00 00 00 00 
2457   157F 00 00 00 00 
2457   1583 00 00 00 00 
2457   1587 00 00 00 00 
2457   158B 00 00 00 00 
2457   158F 00 00 00 00 
2457   1593 00 00 00 00 
2457   1597 00 00 00 00 
2457   159B 00 00 00 00 
2457   159F 00 00 00 00 
2457   15A3 00 00 00 00 
2457   15A7 00 00 00 00 
2457   15AB 00 00 00 00 
2457   15AF 00 00 00 00 
2457   15B3 00 00 00 00 
2457   15B7 00 00 00 00 
2457   15BB 00 00 00 00 
2457   15BF 00 00 00 00 
2457   15C3 00 00 00 00 
2457   15C7 00 00 00 00 
2457   15CB 00 00 00 00 
2457   15CF 00 00 00 00 
2457   15D3 00 00 00 00 
2457   15D7 00 00 00 00 
2457   15DB 00 00 00 00 
2457   15DF 00 00 00 00 
2457   15E3 00 00 00 00 
2457   15E7 00 00 00 00 
2457   15EB 00 00 00 00 
2457   15EF 00 00 00 00 
2457   15F3 00 00 00 00 
2457   15F7 00 00 00 00 
2457   15FB 00 00 00 00 
2457   15FF 00 00 00 00 
2457   1603 00 00 00 00 
2457   1607 00 00 00 00 
2457   160B 00 00 00 00 
2457   160F 00 00 00 00 
2457   1613 00 00 00 00 
2457   1617 00 00 00 00 
2457   161B 00 00 00 00 
2457   161F 00 00 00 00 
2457   1623 00 00 00 00 
2457   1627 00 00 00 00 
2457   162B 00 00 00 00 
2457   162F 00 00 00 00 
2457   1633 00 00 00 00 
2457   1637 00 00 00 00 
2457   163B 00 00 00 00 
2457   163F 00 00 00 00 
2457   1643 00 00 00 00 
2457   1647 00 00 00 00 
2457   164B 00 00 00 00 
2457   164F 00 00 00 00 
2457   1653 00 00 00 00 
2457   1657 00 00 00 00 
2457   165B 00 00 00 00 
2457   165F 00 00 00 00 
2457   1663 00 00 00 00 
2457   1667 00 00 00 00 
2457   166B 00 00 00 00 
2457   166F 00 00 00 00 
2457   1673 00 00 00 00 
2457   1677 00 00 00 00 
2457   167B 00 00 00 00 
2457   167F 00 00 00 00 
2457   1683 00 00 00 00 
2457   1687 00 00 00 00 
2457   168B 00 00 00 00 
2457   168F 00 00 00 00 
2457   1693 00 00 00 00 
2457   1697 00 00 00 00 
2457   169B 00 00 00 00 
2457   169F 00 00 00 00 
2457   16A3 00 00 00 00 
2457   16A7 00 00 00 00 
2457   16AB 00 00 00 00 
2457   16AF 00 00 00 00 
2457   16B3 00 00 00 00 
2457   16B7 00 00 00 00 
2457   16BB 00 00 00 00 
2457   16BF 00 00 00 00 
2457   16C3 00 00 00 00 
2457   16C7 00 00 00 00 
2457   16CB 00 00 00 00 
2457   16CF 00 00 00 00 
2457   16D3 00 00 00 00 
2457   16D7 00 00 00 00 
2457   16DB 00 00 00 00 
2457   16DF 00 00 00 00 
2457   16E3 00 00 00 00 
2457   16E7 00 00 00 00 
2457   16EB 00 00 00 00 
2457   16EF 00 00 00 00 
2457   16F3 00 00 00 00 
2457   16F7 00 00 00 00 
2457   16FB 00 00 00 00 
2457   16FF 00 00 00 00 
2457   1703 00 00 00 00 
2457   1707 00 00 00 00 
2457   170B 00 00 00 00 
2457   170F 00 00 00 00 
2457   1713 00 00 00 00 
2457   1717 00 00 00 00 
2457   171B 00 00 00 00 
2457   171F 00 00 00 00 
2457   1723 00 00 00 00 
2457   1727 00 00 00 00 
2457   172B 00 00 00 00 
2457   172F 00 00 00 00 
2457   1733 00 00 00 00 
2457   1737 00 00 00 00 
2457   173B 00 00 00 00 
2457   173F 00 00 00 00 
2457   1743 00 00 00 00 
2457   1747 00 00 00 00 
2457   174B 00 00 00 00 
2457   174F 00 00 00 00 
2457   1753 00 00 00 00 
2457   1757 00 00 00 00 
2457   175B 00 00 00 00 
2457   175F 00 00 00 00 
2457   1763 00 00 00 00 
2457   1767 00 00 00 00 
2457   176B 00 00 00 00 
2457   176F 00 00 00 00 
2457   1773 00 00 00 00 
2457   1777 00 00 00 00 
2457   177B 00 00 00 00 
2457   177F 00 00 00 00 
2457   1783 00 00 00 00 
2457   1787 00 00 00 00 
2457   178B 00 00 00 00 
2457   178F 00 00 00 00 
2457   1793 00 00 00 00 
2457   1797 00 00 00 00 
2457   179B 00 00 00 00 
2457   179F 00 00 00 00 
2457   17A3 00 00 00 00 
2457   17A7 00 00 00 00 
2457   17AB 00 00 00 00 
2457   17AF 00 00 00 00 
2457   17B3 00 00 00 00 
2457   17B7 00 00 00 00 
2457   17BB 00 00 00 00 
2457   17BF 00 00 00 00 
2457   17C3 00 00 00 00 
2457   17C7 00 00 00 00 
2457   17CB 00 00 00 00 
2457   17CF 00 00 00 00 
2457   17D3 00 00 00 00 
2457   17D7 00 00 00 00 
2457   17DB 00 00 00 00 
2457   17DF 00 00 00 00 
2457   17E3 00 00 00 00 
2457   17E7 00 00 00 00 
2457   17EB 00 00 00 00 
2457   17EF 00 00 00 00 
2457   17F3 00 00 00 00 
2457   17F7 00 00 00 00 
2457   17FB 00 00 00 00 
2457   17FF 00 00 00 00 
2457   1803 00 00 00 00 
2457   1807 00 00 00 00 
2457   180B 00 00 00 00 
2457   180F 00 00 00 00 
2457   1813 00 00 00 00 
2457   1817 00 00 00 00 
2457   181B 00 00 00 00 
2457   181F 00 00 00 00 
2457   1823 00 00 00 00 
2457   1827 00 00 00 00 
2457   182B 00 00 00 00 
2457   182F 00 00 00 00 
2457   1833 00 00 00 00 
2457   1837 00 00 00 00 
2457   183B 00 00 00 00 
2457   183F 00 00 00 00 
2457   1843 00 00 00 00 
2458   1847 20 20 20 20 _currState_data: .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2458   184B 20 20 20 20 
2458   184F 20 20 20 20 
2458   1853 20 20 20 
2459   1856 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2459   185A 20 20 20 20 
2459   185E 20 20 20 20 
2459   1862 20 20 20 20 
2460   1866 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2460   186A 20 20 20 20 
2460   186E 20 20 20 20 
2460   1872 20 20 20 20 
2461   1876 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2461   187A 20 20 20 20 
2461   187E 20 20 20 20 
2461   1882 20 20 20 20 
2462   1886 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2462   188A 20 20 20 20 
2462   188E 20 20 20 20 
2462   1892 20 20 20 20 
2463   1896 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2463   189A 20 20 20 20 
2463   189E 20 20 20 20 
2463   18A2 20 20 20 20 
2464   18A6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2464   18AA 20 20 20 20 
2464   18AE 20 20 20 20 
2464   18B2 20 20 20 20 
2465   18B6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2465   18BA 20 20 20 20 
2465   18BE 20 20 20 20 
2465   18C2 20 20 20 20 
2466   18C6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2466   18CA 20 20 20 20 
2466   18CE 20 20 20 20 
2466   18D2 20 20 20 20 
2467   18D6 20 20 20 20 .db $20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2467   18DA 40 20 20 20 
2467   18DE 20 20 20 20 
2467   18E2 20 20 20 20 
2468   18E6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2468   18EA 20 20 20 20 
2468   18EE 20 20 20 20 
2468   18F2 20 20 20 20 
2469   18F6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,
2469   18FA 20 20 20 20 
2469   18FE 20 20 40 20 
2469   1902 40 20 20 20 
2470   1906 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2470   190A 20 20 20 20 
2470   190E 20 20 20 20 
2470   1912 20 20 20 20 
2471   1916 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,
2471   191A 20 20 20 20 
2471   191E 40 40 20 20 
2471   1922 20 20 20 20 
2472   1926 40 40 20 20 .db $40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,
2472   192A 20 20 20 20 
2472   192E 20 20 20 20 
2472   1932 20 20 40 40 
2473   1936 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,
2473   193A 20 20 20 20 
2473   193E 20 20 20 20 
2473   1942 20 20 20 40 
2474   1946 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,
2474   194A 20 20 20 20 
2474   194E 40 40 20 20 
2474   1952 20 20 20 20 
2475   1956 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,
2475   195A 20 20 40 40 
2475   195E 20 20 20 20 
2475   1962 40 40 20 20 
2476   1966 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,
2476   196A 20 20 40 20 
2476   196E 20 20 20 20 
2476   1972 40 20 20 20 
2477   1976 40 40 20 20 .db $40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2477   197A 20 20 20 20 
2477   197E 20 20 20 20 
2477   1982 20 20 20 20 
2478   1986 20 20 20 20 .db $20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,
2478   198A 40 40 20 20 
2478   198E 20 20 20 20 
2478   1992 20 20 40 20 
2479   1996 20 20 40 20 .db $20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,
2479   199A 40 40 20 20 
2479   199E 20 20 40 20 
2479   19A2 40 20 20 20 
2480   19A6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2480   19AA 20 20 20 20 
2480   19AE 20 20 20 20 
2480   19B2 20 20 20 20 
2481   19B6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,
2481   19BA 20 20 40 20 
2481   19BE 20 20 20 20 
2481   19C2 40 20 20 20 
2482   19C6 20 20 20 20 .db $20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2482   19CA 40 20 20 20 
2482   19CE 20 20 20 20 
2482   19D2 20 20 20 20 
2483   19D6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,
2483   19DA 20 20 20 20 
2483   19DE 20 20 20 20 
2483   19E2 20 20 20 40 
2484   19E6 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2484   19EA 20 20 20 20 
2484   19EE 20 20 20 20 
2484   19F2 20 20 20 20 
2485   19F6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2485   19FA 20 20 20 20 
2485   19FE 20 20 20 20 
2485   1A02 20 20 20 20 
2486   1A06 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,
2486   1A0A 20 20 20 20 
2486   1A0E 40 40 20 20 
2486   1A12 20 20 20 20 
2487   1A16 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2487   1A1A 20 20 20 20 
2487   1A1E 20 20 20 20 
2487   1A22 20 20 20 20 
2488   1A26 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2488   1A2A 20 20 20 20 
2488   1A2E 20 20 20 20 
2488   1A32 20 20 20 20 
2489   1A36 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2489   1A3A 20 20 20 20 
2489   1A3E 20 20 20 20 
2489   1A42 20 20 20 20 
2490   1A46 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2490   1A4A 20 20 20 20 
2490   1A4E 20 20 20 20 
2490   1A52 20 20 20 20 
2491   1A56 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2491   1A5A 20 20 20 20 
2491   1A5E 20 20 20 20 
2491   1A62 20 20 20 20 
2492   1A66 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2492   1A6A 20 20 20 20 
2492   1A6E 20 20 20 20 
2492   1A72 20 20 20 20 
2493   1A76 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2493   1A7A 20 20 20 20 
2493   1A7E 20 20 20 20 
2493   1A82 20 20 20 20 
2494   1A86 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2494   1A8A 20 20 20 20 
2494   1A8E 20 20 20 20 
2494   1A92 20 20 20 20 
2495   1A96 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2495   1A9A 20 20 20 20 
2495   1A9E 20 20 20 20 
2495   1AA2 20 20 20 20 
2496   1AA6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2496   1AAA 20 20 20 20 
2496   1AAE 20 20 20 20 
2496   1AB2 20 20 20 20 
2497   1AB6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2497   1ABA 20 20 20 20 
2497   1ABE 20 20 20 20 
2497   1AC2 20 20 20 20 
2498   1AC6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2498   1ACA 20 20 20 20 
2498   1ACE 20 20 20 20 
2498   1AD2 20 20 20 20 
2499   1AD6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2499   1ADA 20 20 20 20 
2499   1ADE 20 20 20 20 
2499   1AE2 20 20 20 20 
2500   1AE6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2500   1AEA 20 20 20 20 
2500   1AEE 20 20 20 20 
2500   1AF2 20 20 20 20 
2501   1AF6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2501   1AFA 20 20 20 20 
2501   1AFE 20 20 20 20 
2501   1B02 20 20 20 20 
2502   1B06 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2502   1B0A 20 20 20 20 
2502   1B0E 20 20 20 20 
2502   1B12 20 20 20 20 
2503   1B16 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2503   1B1A 20 20 20 20 
2503   1B1E 20 20 20 20 
2503   1B22 20 20 20 20 
2504   1B26 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2504   1B2A 20 20 20 20 
2504   1B2E 20 20 20 20 
2504   1B32 20 20 20 20 
2505   1B36 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2505   1B3A 20 20 20 20 
2505   1B3E 20 20 20 20 
2505   1B42 20 20 20 20 
2506   1B46 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2506   1B4A 20 20 20 20 
2506   1B4E 20 20 20 20 
2506   1B52 20 20 20 20 
2507   1B56 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2507   1B5A 20 20 20 20 
2507   1B5E 20 20 20 20 
2507   1B62 20 20 20 20 
2508   1B66 20          .db $20,
2509   1B67             
2510   1B67 00 00 00 00 .fill 400, 0
2510   1B6B 00 00 00 00 
2510   1B6F 00 00 00 00 
2510   1B73 00 00 00 00 
2510   1B77 00 00 00 00 
2510   1B7B 00 00 00 00 
2510   1B7F 00 00 00 00 
2510   1B83 00 00 00 00 
2510   1B87 00 00 00 00 
2510   1B8B 00 00 00 00 
2510   1B8F 00 00 00 00 
2510   1B93 00 00 00 00 
2510   1B97 00 00 00 00 
2510   1B9B 00 00 00 00 
2510   1B9F 00 00 00 00 
2510   1BA3 00 00 00 00 
2510   1BA7 00 00 00 00 
2510   1BAB 00 00 00 00 
2510   1BAF 00 00 00 00 
2510   1BB3 00 00 00 00 
2510   1BB7 00 00 00 00 
2510   1BBB 00 00 00 00 
2510   1BBF 00 00 00 00 
2510   1BC3 00 00 00 00 
2510   1BC7 00 00 00 00 
2510   1BCB 00 00 00 00 
2510   1BCF 00 00 00 00 
2510   1BD3 00 00 00 00 
2510   1BD7 00 00 00 00 
2510   1BDB 00 00 00 00 
2510   1BDF 00 00 00 00 
2510   1BE3 00 00 00 00 
2510   1BE7 00 00 00 00 
2510   1BEB 00 00 00 00 
2510   1BEF 00 00 00 00 
2510   1BF3 00 00 00 00 
2510   1BF7 00 00 00 00 
2510   1BFB 00 00 00 00 
2510   1BFF 00 00 00 00 
2510   1C03 00 00 00 00 
2510   1C07 00 00 00 00 
2510   1C0B 00 00 00 00 
2510   1C0F 00 00 00 00 
2510   1C13 00 00 00 00 
2510   1C17 00 00 00 00 
2510   1C1B 00 00 00 00 
2510   1C1F 00 00 00 00 
2510   1C23 00 00 00 00 
2510   1C27 00 00 00 00 
2510   1C2B 00 00 00 00 
2510   1C2F 00 00 00 00 
2510   1C33 00 00 00 00 
2510   1C37 00 00 00 00 
2510   1C3B 00 00 00 00 
2510   1C3F 00 00 00 00 
2510   1C43 00 00 00 00 
2510   1C47 00 00 00 00 
2510   1C4B 00 00 00 00 
2510   1C4F 00 00 00 00 
2510   1C53 00 00 00 00 
2510   1C57 00 00 00 00 
2510   1C5B 00 00 00 00 
2510   1C5F 00 00 00 00 
2510   1C63 00 00 00 00 
2510   1C67 00 00 00 00 
2510   1C6B 00 00 00 00 
2510   1C6F 00 00 00 00 
2510   1C73 00 00 00 00 
2510   1C77 00 00 00 00 
2510   1C7B 00 00 00 00 
2510   1C7F 00 00 00 00 
2510   1C83 00 00 00 00 
2510   1C87 00 00 00 00 
2510   1C8B 00 00 00 00 
2510   1C8F 00 00 00 00 
2510   1C93 00 00 00 00 
2510   1C97 00 00 00 00 
2510   1C9B 00 00 00 00 
2510   1C9F 00 00 00 00 
2510   1CA3 00 00 00 00 
2510   1CA7 00 00 00 00 
2510   1CAB 00 00 00 00 
2510   1CAF 00 00 00 00 
2510   1CB3 00 00 00 00 
2510   1CB7 00 00 00 00 
2510   1CBB 00 00 00 00 
2510   1CBF 00 00 00 00 
2510   1CC3 00 00 00 00 
2510   1CC7 00 00 00 00 
2510   1CCB 00 00 00 00 
2510   1CCF 00 00 00 00 
2510   1CD3 00 00 00 00 
2510   1CD7 00 00 00 00 
2510   1CDB 00 00 00 00 
2510   1CDF 00 00 00 00 
2510   1CE3 00 00 00 00 
2510   1CE7 00 00 00 00 
2510   1CEB 00 00 00 00 
2510   1CEF 00 00 00 00 
2510   1CF3 00 00 00 00 
2511   1CF7 40 20 00    _s0: .db "@ ", 0
2512   1CFA 2E 20 00    _s1: .db ". ", 0
2513   1CFD 0A 0D 00    _s2: .db "\n\r", 0
2514   1D00 0A 0D 50 72 _s3: .db "\n\rPress CTRL+C to quit.\n\r", 0
2514   1D04 65 73 73 20 
2514   1D08 43 54 52 4C 
2514   1D0C 2B 43 20 74 
2514   1D10 6F 20 71 75 
2514   1D14 69 74 2E 0A 
2514   1D18 0D 00 
2515   1D1A 55 6E 65 78 _s4: .db "Unexpected format in printf.", 0
2515   1D1E 70 65 63 74 
2515   1D22 65 64 20 66 
2515   1D26 6F 72 6D 61 
2515   1D2A 74 20 69 6E 
2515   1D2E 20 70 72 69 
2515   1D32 6E 74 66 2E 
2515   1D36 00 
2516   1D37 45 72 72 6F _s5: .db "Error: Unknown argument type.\n", 0
2516   1D3B 72 3A 20 55 
2516   1D3F 6E 6B 6E 6F 
2516   1D43 77 6E 20 61 
2516   1D47 72 67 75 6D 
2516   1D4B 65 6E 74 20 
2516   1D4F 74 79 70 65 
2516   1D53 2E 0A 00 
2517   1D56             
2518   1D56 58 1D       _heap_top: .dw _heap
2519   1D58 00          _heap: .db 0
2520   1D59             ; --- END DATA SEGMENT
2521   1D59             
2522   1D59             .end
tasm: Number of errors = 0
