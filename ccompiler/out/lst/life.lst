0001   0000             ; --- FILENAME: programs/life.c
0002   0000             ; --- DATE:     24-06-2025 at 13:49:12
0003   0000             .include "lib/asm/kernel.exp"
0001+  0000             fdc_irq_event    .EQU  $195a
0002+  0000             sys_break        .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_create_proc  .EQU  $0005
0008+  0000             sys_list_proc    .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_fdc          .EQU  $000d
0016+  0000             text_org         .EQU  $0400
0004   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0005   0000             
0006   0000             ; --- BEGIN TEXT SEGMENT
0007   0400             .org text_org
0008   0400             main:
0009   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0010   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0011   0408             ; int i, j; 
0012   0408 52 02 00      sub sp, 2
0013   040B 52 02 00      sub sp, 2
0014   040E             ; int n; 
0015   040E 52 02 00      sub sp, 2
0016   0411             ; for(i = 0; i <  30      ; i++){ 
0017   0411             _for1_init:
0018   0411 FA FF FF      lea d, [bp + -1] ; $i
0019   0414 DA            push d
0020   0415 FD 2E 00 00   mov32 cb, $00000000
0020   0419 00 00 
0021   041B E7            pop d
0022   041C FD 43         mov [d], b
0023   041E             _for1_cond:
0024   041E FA FF FF      lea d, [bp + -1] ; $i
0025   0421 2A            mov b, [d]
0026   0422 38 00 00      mov c, 0
0027   0425             ; --- START RELATIONAL
0028   0425 D7            push a
0029   0426 11            mov a, b
0030   0427 FD 2E 1E 00   mov32 cb, $0000001e
0030   042B 00 00 
0031   042D B0            cmp a, b
0032   042E FD 73         slt ; < (signed)
0033   0430 E4            pop a
0034   0431             ; --- END RELATIONAL
0035   0431 C0 00 00      cmp b, 0
0036   0434 C6 C5 04      je _for1_exit
0037   0437             _for1_block:
0038   0437             ; for(j = 0; j <   40     ; j++){ 
0039   0437             _for2_init:
0040   0437 FA FD FF      lea d, [bp + -3] ; $j
0041   043A DA            push d
0042   043B FD 2E 00 00   mov32 cb, $00000000
0042   043F 00 00 
0043   0441 E7            pop d
0044   0442 FD 43         mov [d], b
0045   0444             _for2_cond:
0046   0444 FA FD FF      lea d, [bp + -3] ; $j
0047   0447 2A            mov b, [d]
0048   0448 38 00 00      mov c, 0
0049   044B             ; --- START RELATIONAL
0050   044B D7            push a
0051   044C 11            mov a, b
0052   044D FD 2E 28 00   mov32 cb, $00000028
0052   0451 00 00 
0053   0453 B0            cmp a, b
0054   0454 FD 73         slt ; < (signed)
0055   0456 E4            pop a
0056   0457             ; --- END RELATIONAL
0057   0457 C0 00 00      cmp b, 0
0058   045A C6 B2 04      je _for2_exit
0059   045D             _for2_block:
0060   045D             ; nextState[i][j] = currState[i][j]; 
0061   045D 3B 21 14      mov d, _nextState_data ; $nextState
0062   0460 D7            push a
0063   0461 DA            push d
0064   0462 FA FF FF      lea d, [bp + -1] ; $i
0065   0465 2A            mov b, [d]
0066   0466 38 00 00      mov c, 0
0067   0469 E7            pop d
0068   046A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0069   046E DA            push d
0070   046F FA FD FF      lea d, [bp + -3] ; $j
0071   0472 2A            mov b, [d]
0072   0473 38 00 00      mov c, 0
0073   0476 E7            pop d
0074   0477 5A            add d, b
0075   0478 E4            pop a
0076   0479 DA            push d
0077   047A 3B D1 18      mov d, _currState_data ; $currState
0078   047D D7            push a
0079   047E DA            push d
0080   047F FA FF FF      lea d, [bp + -1] ; $i
0081   0482 2A            mov b, [d]
0082   0483 38 00 00      mov c, 0
0083   0486 E7            pop d
0084   0487 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0085   048B DA            push d
0086   048C FA FD FF      lea d, [bp + -3] ; $j
0087   048F 2A            mov b, [d]
0088   0490 38 00 00      mov c, 0
0089   0493 E7            pop d
0090   0494 5A            add d, b
0091   0495 E4            pop a
0092   0496 32            mov bl, [d]
0093   0497 A7 00         mov bh, 0
0094   0499 38 00 00      mov c, 0
0095   049C E7            pop d
0096   049D FD 3E         mov [d], bl
0097   049F             _for2_update:
0098   049F FA FD FF      lea d, [bp + -3] ; $j
0099   04A2 2A            mov b, [d]
0100   04A3 38 00 00      mov c, 0
0101   04A6 11            mov a, b
0102   04A7 FD 77         inc b
0103   04A9 FA FD FF      lea d, [bp + -3] ; $j
0104   04AC FD 43         mov [d], b
0105   04AE 27            mov b, a
0106   04AF 0A 44 04      jmp _for2_cond
0107   04B2             _for2_exit:
0108   04B2             _for1_update:
0109   04B2 FA FF FF      lea d, [bp + -1] ; $i
0110   04B5 2A            mov b, [d]
0111   04B6 38 00 00      mov c, 0
0112   04B9 11            mov a, b
0113   04BA FD 77         inc b
0114   04BC FA FF FF      lea d, [bp + -1] ; $i
0115   04BF FD 43         mov [d], b
0116   04C1 27            mov b, a
0117   04C2 0A 1E 04      jmp _for1_cond
0118   04C5             _for1_exit:
0119   04C5             ; for(;;){ 
0120   04C5             _for3_init:
0121   04C5             _for3_cond:
0122   04C5             _for3_block:
0123   04C5             ; for(i = 1; i <  30      +-1; i++){ 
0124   04C5             _for4_init:
0125   04C5 FA FF FF      lea d, [bp + -1] ; $i
0126   04C8 DA            push d
0127   04C9 FD 2E 01 00   mov32 cb, $00000001
0127   04CD 00 00 
0128   04CF E7            pop d
0129   04D0 FD 43         mov [d], b
0130   04D2             _for4_cond:
0131   04D2 FA FF FF      lea d, [bp + -1] ; $i
0132   04D5 2A            mov b, [d]
0133   04D6 38 00 00      mov c, 0
0134   04D9             ; --- START RELATIONAL
0135   04D9 D7            push a
0136   04DA 11            mov a, b
0137   04DB FD 2E 1E 00   mov32 cb, $0000001e
0137   04DF 00 00 
0138   04E1             ; --- START TERMS
0139   04E1 D7            push a
0140   04E2 11            mov a, b
0141   04E3 FD 2E FF FF   mov32 cb, $ffffffff
0141   04E7 FF FF 
0142   04E9 56            add b, a
0143   04EA E4            pop a
0144   04EB             ; --- END TERMS
0145   04EB B0            cmp a, b
0146   04EC FD 73         slt ; < (signed)
0147   04EE E4            pop a
0148   04EF             ; --- END RELATIONAL
0149   04EF C0 00 00      cmp b, 0
0150   04F2 C6 08 06      je _for4_exit
0151   04F5             _for4_block:
0152   04F5             ; for(j = 1; j <   40     +-1; j++){ 
0153   04F5             _for5_init:
0154   04F5 FA FD FF      lea d, [bp + -3] ; $j
0155   04F8 DA            push d
0156   04F9 FD 2E 01 00   mov32 cb, $00000001
0156   04FD 00 00 
0157   04FF E7            pop d
0158   0500 FD 43         mov [d], b
0159   0502             _for5_cond:
0160   0502 FA FD FF      lea d, [bp + -3] ; $j
0161   0505 2A            mov b, [d]
0162   0506 38 00 00      mov c, 0
0163   0509             ; --- START RELATIONAL
0164   0509 D7            push a
0165   050A 11            mov a, b
0166   050B FD 2E 28 00   mov32 cb, $00000028
0166   050F 00 00 
0167   0511             ; --- START TERMS
0168   0511 D7            push a
0169   0512 11            mov a, b
0170   0513 FD 2E FF FF   mov32 cb, $ffffffff
0170   0517 FF FF 
0171   0519 56            add b, a
0172   051A E4            pop a
0173   051B             ; --- END TERMS
0174   051B B0            cmp a, b
0175   051C FD 73         slt ; < (signed)
0176   051E E4            pop a
0177   051F             ; --- END RELATIONAL
0178   051F C0 00 00      cmp b, 0
0179   0522 C6 F5 05      je _for5_exit
0180   0525             _for5_block:
0181   0525             ; n = neighbours(i, j); 
0182   0525 FA FB FF      lea d, [bp + -5] ; $n
0183   0528 DA            push d
0184   0529             ; --- START FUNCTION CALL
0185   0529 FA FD FF      lea d, [bp + -3] ; $j
0186   052C 2A            mov b, [d]
0187   052D 38 00 00      mov c, 0
0188   0530 FD AB         swp b
0189   0532 D8            push b
0190   0533 FA FF FF      lea d, [bp + -1] ; $i
0191   0536 2A            mov b, [d]
0192   0537 38 00 00      mov c, 0
0193   053A FD AB         swp b
0194   053C D8            push b
0195   053D 07 18 08      call neighbours
0196   0540 51 04 00      add sp, 4
0197   0543             ; --- END FUNCTION CALL
0198   0543 E7            pop d
0199   0544 FD 43         mov [d], b
0200   0546             ; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0201   0546             _if6_cond:
0202   0546 FA FB FF      lea d, [bp + -5] ; $n
0203   0549 2A            mov b, [d]
0204   054A 38 00 00      mov c, 0
0205   054D             ; --- START RELATIONAL
0206   054D D7            push a
0207   054E 11            mov a, b
0208   054F FD 2E 02 00   mov32 cb, $00000002
0208   0553 00 00 
0209   0555 B0            cmp a, b
0210   0556 FD 73         slt ; < (signed)
0211   0558 E4            pop a
0212   0559             ; --- END RELATIONAL
0213   0559             ; --- START LOGICAL OR
0214   0559 D7            push a
0215   055A 11            mov a, b
0216   055B FA FB FF      lea d, [bp + -5] ; $n
0217   055E 2A            mov b, [d]
0218   055F 38 00 00      mov c, 0
0219   0562             ; --- START RELATIONAL
0220   0562 D7            push a
0221   0563 11            mov a, b
0222   0564 FD 2E 03 00   mov32 cb, $00000003
0222   0568 00 00 
0223   056A B0            cmp a, b
0224   056B FD 7F         sgt ; >
0225   056D E4            pop a
0226   056E             ; --- END RELATIONAL
0227   056E FD A8         sor a, b ; ||
0228   0570 E4            pop a
0229   0571             ; --- END LOGICAL OR
0230   0571 C0 00 00      cmp b, 0
0231   0574 C6 A0 05      je _if6_else
0232   0577             _if6_TRUE:
0233   0577             ; nextState[i][j] = ' '; 
0234   0577 3B 21 14      mov d, _nextState_data ; $nextState
0235   057A D7            push a
0236   057B DA            push d
0237   057C FA FF FF      lea d, [bp + -1] ; $i
0238   057F 2A            mov b, [d]
0239   0580 38 00 00      mov c, 0
0240   0583 E7            pop d
0241   0584 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0242   0588 DA            push d
0243   0589 FA FD FF      lea d, [bp + -3] ; $j
0244   058C 2A            mov b, [d]
0245   058D 38 00 00      mov c, 0
0246   0590 E7            pop d
0247   0591 5A            add d, b
0248   0592 E4            pop a
0249   0593 DA            push d
0250   0594 FD 2E 20 00   mov32 cb, $00000020
0250   0598 00 00 
0251   059A E7            pop d
0252   059B FD 3E         mov [d], bl
0253   059D 0A E2 05      jmp _if6_exit
0254   05A0             _if6_else:
0255   05A0             ; if(n == 3) nextState[i][j] = '@'; 
0256   05A0             _if7_cond:
0257   05A0 FA FB FF      lea d, [bp + -5] ; $n
0258   05A3 2A            mov b, [d]
0259   05A4 38 00 00      mov c, 0
0260   05A7             ; --- START RELATIONAL
0261   05A7 D7            push a
0262   05A8 11            mov a, b
0263   05A9 FD 2E 03 00   mov32 cb, $00000003
0263   05AD 00 00 
0264   05AF B0            cmp a, b
0265   05B0 FD 71         seq ; ==
0266   05B2 E4            pop a
0267   05B3             ; --- END RELATIONAL
0268   05B3 C0 00 00      cmp b, 0
0269   05B6 C6 E2 05      je _if7_exit
0270   05B9             _if7_TRUE:
0271   05B9             ; nextState[i][j] = '@'; 
0272   05B9 3B 21 14      mov d, _nextState_data ; $nextState
0273   05BC D7            push a
0274   05BD DA            push d
0275   05BE FA FF FF      lea d, [bp + -1] ; $i
0276   05C1 2A            mov b, [d]
0277   05C2 38 00 00      mov c, 0
0278   05C5 E7            pop d
0279   05C6 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0280   05CA DA            push d
0281   05CB FA FD FF      lea d, [bp + -3] ; $j
0282   05CE 2A            mov b, [d]
0283   05CF 38 00 00      mov c, 0
0284   05D2 E7            pop d
0285   05D3 5A            add d, b
0286   05D4 E4            pop a
0287   05D5 DA            push d
0288   05D6 FD 2E 40 00   mov32 cb, $00000040
0288   05DA 00 00 
0289   05DC E7            pop d
0290   05DD FD 3E         mov [d], bl
0291   05DF 0A E2 05      jmp _if7_exit
0292   05E2             _if7_exit:
0293   05E2             _if6_exit:
0294   05E2             _for5_update:
0295   05E2 FA FD FF      lea d, [bp + -3] ; $j
0296   05E5 2A            mov b, [d]
0297   05E6 38 00 00      mov c, 0
0298   05E9 11            mov a, b
0299   05EA FD 77         inc b
0300   05EC FA FD FF      lea d, [bp + -3] ; $j
0301   05EF FD 43         mov [d], b
0302   05F1 27            mov b, a
0303   05F2 0A 02 05      jmp _for5_cond
0304   05F5             _for5_exit:
0305   05F5             _for4_update:
0306   05F5 FA FF FF      lea d, [bp + -1] ; $i
0307   05F8 2A            mov b, [d]
0308   05F9 38 00 00      mov c, 0
0309   05FC 11            mov a, b
0310   05FD FD 77         inc b
0311   05FF FA FF FF      lea d, [bp + -1] ; $i
0312   0602 FD 43         mov [d], b
0313   0604 27            mov b, a
0314   0605 0A D2 04      jmp _for4_cond
0315   0608             _for4_exit:
0316   0608             ; for(i = 1; i <  30      +-1; i++){ 
0317   0608             _for8_init:
0318   0608 FA FF FF      lea d, [bp + -1] ; $i
0319   060B DA            push d
0320   060C FD 2E 01 00   mov32 cb, $00000001
0320   0610 00 00 
0321   0612 E7            pop d
0322   0613 FD 43         mov [d], b
0323   0615             _for8_cond:
0324   0615 FA FF FF      lea d, [bp + -1] ; $i
0325   0618 2A            mov b, [d]
0326   0619 38 00 00      mov c, 0
0327   061C             ; --- START RELATIONAL
0328   061C D7            push a
0329   061D 11            mov a, b
0330   061E FD 2E 1E 00   mov32 cb, $0000001e
0330   0622 00 00 
0331   0624             ; --- START TERMS
0332   0624 D7            push a
0333   0625 11            mov a, b
0334   0626 FD 2E FF FF   mov32 cb, $ffffffff
0334   062A FF FF 
0335   062C 56            add b, a
0336   062D E4            pop a
0337   062E             ; --- END TERMS
0338   062E B0            cmp a, b
0339   062F FD 73         slt ; < (signed)
0340   0631 E4            pop a
0341   0632             ; --- END RELATIONAL
0342   0632 C0 00 00      cmp b, 0
0343   0635 C6 D0 06      je _for8_exit
0344   0638             _for8_block:
0345   0638             ; for(j = 1; j <   40     +-1; j++){ 
0346   0638             _for9_init:
0347   0638 FA FD FF      lea d, [bp + -3] ; $j
0348   063B DA            push d
0349   063C FD 2E 01 00   mov32 cb, $00000001
0349   0640 00 00 
0350   0642 E7            pop d
0351   0643 FD 43         mov [d], b
0352   0645             _for9_cond:
0353   0645 FA FD FF      lea d, [bp + -3] ; $j
0354   0648 2A            mov b, [d]
0355   0649 38 00 00      mov c, 0
0356   064C             ; --- START RELATIONAL
0357   064C D7            push a
0358   064D 11            mov a, b
0359   064E FD 2E 28 00   mov32 cb, $00000028
0359   0652 00 00 
0360   0654             ; --- START TERMS
0361   0654 D7            push a
0362   0655 11            mov a, b
0363   0656 FD 2E FF FF   mov32 cb, $ffffffff
0363   065A FF FF 
0364   065C 56            add b, a
0365   065D E4            pop a
0366   065E             ; --- END TERMS
0367   065E B0            cmp a, b
0368   065F FD 73         slt ; < (signed)
0369   0661 E4            pop a
0370   0662             ; --- END RELATIONAL
0371   0662 C0 00 00      cmp b, 0
0372   0665 C6 BD 06      je _for9_exit
0373   0668             _for9_block:
0374   0668             ; currState[i][j] = nextState[i][j]; 
0375   0668 3B D1 18      mov d, _currState_data ; $currState
0376   066B D7            push a
0377   066C DA            push d
0378   066D FA FF FF      lea d, [bp + -1] ; $i
0379   0670 2A            mov b, [d]
0380   0671 38 00 00      mov c, 0
0381   0674 E7            pop d
0382   0675 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0383   0679 DA            push d
0384   067A FA FD FF      lea d, [bp + -3] ; $j
0385   067D 2A            mov b, [d]
0386   067E 38 00 00      mov c, 0
0387   0681 E7            pop d
0388   0682 5A            add d, b
0389   0683 E4            pop a
0390   0684 DA            push d
0391   0685 3B 21 14      mov d, _nextState_data ; $nextState
0392   0688 D7            push a
0393   0689 DA            push d
0394   068A FA FF FF      lea d, [bp + -1] ; $i
0395   068D 2A            mov b, [d]
0396   068E 38 00 00      mov c, 0
0397   0691 E7            pop d
0398   0692 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0399   0696 DA            push d
0400   0697 FA FD FF      lea d, [bp + -3] ; $j
0401   069A 2A            mov b, [d]
0402   069B 38 00 00      mov c, 0
0403   069E E7            pop d
0404   069F 5A            add d, b
0405   06A0 E4            pop a
0406   06A1 32            mov bl, [d]
0407   06A2 A7 00         mov bh, 0
0408   06A4 38 00 00      mov c, 0
0409   06A7 E7            pop d
0410   06A8 FD 3E         mov [d], bl
0411   06AA             _for9_update:
0412   06AA FA FD FF      lea d, [bp + -3] ; $j
0413   06AD 2A            mov b, [d]
0414   06AE 38 00 00      mov c, 0
0415   06B1 11            mov a, b
0416   06B2 FD 77         inc b
0417   06B4 FA FD FF      lea d, [bp + -3] ; $j
0418   06B7 FD 43         mov [d], b
0419   06B9 27            mov b, a
0420   06BA 0A 45 06      jmp _for9_cond
0421   06BD             _for9_exit:
0422   06BD             _for8_update:
0423   06BD FA FF FF      lea d, [bp + -1] ; $i
0424   06C0 2A            mov b, [d]
0425   06C1 38 00 00      mov c, 0
0426   06C4 11            mov a, b
0427   06C5 FD 77         inc b
0428   06C7 FA FF FF      lea d, [bp + -1] ; $i
0429   06CA FD 43         mov [d], b
0430   06CC 27            mov b, a
0431   06CD 0A 15 06      jmp _for8_cond
0432   06D0             _for8_exit:
0433   06D0             ; printf(clear); 
0434   06D0             ; --- START FUNCTION CALL
0435   06D0 3B 16 14      mov d, _clear_data ; $clear
0436   06D3 2D            mov b, d
0437   06D4 38 00 00      mov c, 0
0438   06D7 FD AB         swp b
0439   06D9 D8            push b
0440   06DA 07 E4 0A      call printf
0441   06DD 51 02 00      add sp, 2
0442   06E0             ; --- END FUNCTION CALL
0443   06E0             ; show(); 
0444   06E0             ; --- START FUNCTION CALL
0445   06E0 07 F4 06      call show
0446   06E3             ; puts("\n\rPress CTRL+C to quit.\n\r"); 
0447   06E3             ; --- START FUNCTION CALL
0448   06E3 26 81 1D      mov b, _s0 ; "\n\rPress CTRL+C to quit.\n\r"
0449   06E6 FD AB         swp b
0450   06E8 D8            push b
0451   06E9 07 F8 13      call puts
0452   06EC 51 02 00      add sp, 2
0453   06EF             ; --- END FUNCTION CALL
0454   06EF             _for3_update:
0455   06EF 0A C5 04      jmp _for3_cond
0456   06F2             _for3_exit:
0457   06F2 05 0B         syscall sys_terminate_proc
0458   06F4             
0459   06F4             show:
0460   06F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0461   06F7             ; int i, j; 
0462   06F7 52 02 00      sub sp, 2
0463   06FA 52 02 00      sub sp, 2
0464   06FD             ; for(i = 0; i <  30      ; i++){ 
0465   06FD             _for10_init:
0466   06FD FA FF FF      lea d, [bp + -1] ; $i
0467   0700 DA            push d
0468   0701 FD 2E 00 00   mov32 cb, $00000000
0468   0705 00 00 
0469   0707 E7            pop d
0470   0708 FD 43         mov [d], b
0471   070A             _for10_cond:
0472   070A FA FF FF      lea d, [bp + -1] ; $i
0473   070D 2A            mov b, [d]
0474   070E 38 00 00      mov c, 0
0475   0711             ; --- START RELATIONAL
0476   0711 D7            push a
0477   0712 11            mov a, b
0478   0713 FD 2E 1E 00   mov32 cb, $0000001e
0478   0717 00 00 
0479   0719 B0            cmp a, b
0480   071A FD 73         slt ; < (signed)
0481   071C E4            pop a
0482   071D             ; --- END RELATIONAL
0483   071D C0 00 00      cmp b, 0
0484   0720 C6 CA 07      je _for10_exit
0485   0723             _for10_block:
0486   0723             ; for(j = 0; j <   40     ; j++){ 
0487   0723             _for11_init:
0488   0723 FA FD FF      lea d, [bp + -3] ; $j
0489   0726 DA            push d
0490   0727 FD 2E 00 00   mov32 cb, $00000000
0490   072B 00 00 
0491   072D E7            pop d
0492   072E FD 43         mov [d], b
0493   0730             _for11_cond:
0494   0730 FA FD FF      lea d, [bp + -3] ; $j
0495   0733 2A            mov b, [d]
0496   0734 38 00 00      mov c, 0
0497   0737             ; --- START RELATIONAL
0498   0737 D7            push a
0499   0738 11            mov a, b
0500   0739 FD 2E 28 00   mov32 cb, $00000028
0500   073D 00 00 
0501   073F B0            cmp a, b
0502   0740 FD 73         slt ; < (signed)
0503   0742 E4            pop a
0504   0743             ; --- END RELATIONAL
0505   0743 C0 00 00      cmp b, 0
0506   0746 C6 AB 07      je _for11_exit
0507   0749             _for11_block:
0508   0749             ; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
0509   0749             _ternary12_cond:
0510   0749 3B D1 18      mov d, _currState_data ; $currState
0511   074C D7            push a
0512   074D DA            push d
0513   074E FA FF FF      lea d, [bp + -1] ; $i
0514   0751 2A            mov b, [d]
0515   0752 38 00 00      mov c, 0
0516   0755 E7            pop d
0517   0756 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0518   075A DA            push d
0519   075B FA FD FF      lea d, [bp + -3] ; $j
0520   075E 2A            mov b, [d]
0521   075F 38 00 00      mov c, 0
0522   0762 E7            pop d
0523   0763 5A            add d, b
0524   0764 E4            pop a
0525   0765 32            mov bl, [d]
0526   0766 A7 00         mov bh, 0
0527   0768 38 00 00      mov c, 0
0528   076B             ; --- START RELATIONAL
0529   076B D7            push a
0530   076C 11            mov a, b
0531   076D FD 2E 40 00   mov32 cb, $00000040
0531   0771 00 00 
0532   0773 B0            cmp a, b
0533   0774 FD 71         seq ; ==
0534   0776 E4            pop a
0535   0777             ; --- END RELATIONAL
0536   0777 C0 00 00      cmp b, 0
0537   077A C6 8C 07      je _ternary12_FALSE
0538   077D             _ternary12_TRUE:
0539   077D             ; --- START FUNCTION CALL
0540   077D 26 9B 1D      mov b, _s1 ; "@ "
0541   0780 FD AB         swp b
0542   0782 D8            push b
0543   0783 07 E4 0A      call printf
0544   0786 51 02 00      add sp, 2
0545   0789             ; --- END FUNCTION CALL
0546   0789 0A 98 07      jmp _ternary12_exit
0547   078C             _ternary12_FALSE:
0548   078C             ; --- START FUNCTION CALL
0549   078C 26 9E 1D      mov b, _s2 ; ". "
0550   078F FD AB         swp b
0551   0791 D8            push b
0552   0792 07 E4 0A      call printf
0553   0795 51 02 00      add sp, 2
0554   0798             ; --- END FUNCTION CALL
0555   0798             _ternary12_exit:
0556   0798             _for11_update:
0557   0798 FA FD FF      lea d, [bp + -3] ; $j
0558   079B 2A            mov b, [d]
0559   079C 38 00 00      mov c, 0
0560   079F 11            mov a, b
0561   07A0 FD 77         inc b
0562   07A2 FA FD FF      lea d, [bp + -3] ; $j
0563   07A5 FD 43         mov [d], b
0564   07A7 27            mov b, a
0565   07A8 0A 30 07      jmp _for11_cond
0566   07AB             _for11_exit:
0567   07AB             ; printf("\n\r"); 
0568   07AB             ; --- START FUNCTION CALL
0569   07AB 26 A1 1D      mov b, _s3 ; "\n\r"
0570   07AE FD AB         swp b
0571   07B0 D8            push b
0572   07B1 07 E4 0A      call printf
0573   07B4 51 02 00      add sp, 2
0574   07B7             ; --- END FUNCTION CALL
0575   07B7             _for10_update:
0576   07B7 FA FF FF      lea d, [bp + -1] ; $i
0577   07BA 2A            mov b, [d]
0578   07BB 38 00 00      mov c, 0
0579   07BE 11            mov a, b
0580   07BF FD 77         inc b
0581   07C1 FA FF FF      lea d, [bp + -1] ; $i
0582   07C4 FD 43         mov [d], b
0583   07C6 27            mov b, a
0584   07C7 0A 0A 07      jmp _for10_cond
0585   07CA             _for10_exit:
0586   07CA F9            leave
0587   07CB 09            ret
0588   07CC             
0589   07CC             alive:
0590   07CC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0591   07CF             ; if(currState[i][j] == '@') return 1; 
0592   07CF             _if13_cond:
0593   07CF 3B D1 18      mov d, _currState_data ; $currState
0594   07D2 D7            push a
0595   07D3 DA            push d
0596   07D4 FA 05 00      lea d, [bp + 5] ; $i
0597   07D7 2A            mov b, [d]
0598   07D8 38 00 00      mov c, 0
0599   07DB E7            pop d
0600   07DC FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0601   07E0 DA            push d
0602   07E1 FA 07 00      lea d, [bp + 7] ; $j
0603   07E4 2A            mov b, [d]
0604   07E5 38 00 00      mov c, 0
0605   07E8 E7            pop d
0606   07E9 5A            add d, b
0607   07EA E4            pop a
0608   07EB 32            mov bl, [d]
0609   07EC A7 00         mov bh, 0
0610   07EE 38 00 00      mov c, 0
0611   07F1             ; --- START RELATIONAL
0612   07F1 D7            push a
0613   07F2 11            mov a, b
0614   07F3 FD 2E 40 00   mov32 cb, $00000040
0614   07F7 00 00 
0615   07F9 B0            cmp a, b
0616   07FA FD 71         seq ; ==
0617   07FC E4            pop a
0618   07FD             ; --- END RELATIONAL
0619   07FD C0 00 00      cmp b, 0
0620   0800 C6 0E 08      je _if13_else
0621   0803             _if13_TRUE:
0622   0803             ; return 1; 
0623   0803 FD 2E 01 00   mov32 cb, $00000001
0623   0807 00 00 
0624   0809 F9            leave
0625   080A 09            ret
0626   080B 0A 16 08      jmp _if13_exit
0627   080E             _if13_else:
0628   080E             ; return 0; 
0629   080E FD 2E 00 00   mov32 cb, $00000000
0629   0812 00 00 
0630   0814 F9            leave
0631   0815 09            ret
0632   0816             _if13_exit:
0633   0816 F9            leave
0634   0817 09            ret
0635   0818             
0636   0818             neighbours:
0637   0818 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0638   081B             ; int count; 
0639   081B 52 02 00      sub sp, 2
0640   081E             ; count = 0; 
0641   081E FA FF FF      lea d, [bp + -1] ; $count
0642   0821 DA            push d
0643   0822 FD 2E 00 00   mov32 cb, $00000000
0643   0826 00 00 
0644   0828 E7            pop d
0645   0829 FD 43         mov [d], b
0646   082B             ; if(currState[i+-1][j] == '@')			count++; 
0647   082B             _if14_cond:
0648   082B 3B D1 18      mov d, _currState_data ; $currState
0649   082E D7            push a
0650   082F DA            push d
0651   0830 FA 05 00      lea d, [bp + 5] ; $i
0652   0833 2A            mov b, [d]
0653   0834 38 00 00      mov c, 0
0654   0837             ; --- START TERMS
0655   0837 D7            push a
0656   0838 11            mov a, b
0657   0839 FD 2E FF FF   mov32 cb, $ffffffff
0657   083D FF FF 
0658   083F 56            add b, a
0659   0840 E4            pop a
0660   0841             ; --- END TERMS
0661   0841 E7            pop d
0662   0842 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0663   0846 DA            push d
0664   0847 FA 07 00      lea d, [bp + 7] ; $j
0665   084A 2A            mov b, [d]
0666   084B 38 00 00      mov c, 0
0667   084E E7            pop d
0668   084F 5A            add d, b
0669   0850 E4            pop a
0670   0851 32            mov bl, [d]
0671   0852 A7 00         mov bh, 0
0672   0854 38 00 00      mov c, 0
0673   0857             ; --- START RELATIONAL
0674   0857 D7            push a
0675   0858 11            mov a, b
0676   0859 FD 2E 40 00   mov32 cb, $00000040
0676   085D 00 00 
0677   085F B0            cmp a, b
0678   0860 FD 71         seq ; ==
0679   0862 E4            pop a
0680   0863             ; --- END RELATIONAL
0681   0863 C0 00 00      cmp b, 0
0682   0866 C6 7C 08      je _if14_exit
0683   0869             _if14_TRUE:
0684   0869             ; count++; 
0685   0869 FA FF FF      lea d, [bp + -1] ; $count
0686   086C 2A            mov b, [d]
0687   086D 38 00 00      mov c, 0
0688   0870 11            mov a, b
0689   0871 FD 77         inc b
0690   0873 FA FF FF      lea d, [bp + -1] ; $count
0691   0876 FD 43         mov [d], b
0692   0878 27            mov b, a
0693   0879 0A 7C 08      jmp _if14_exit
0694   087C             _if14_exit:
0695   087C             ; if(currState[i+-1][j+-1] == '@') 	count++; 
0696   087C             _if15_cond:
0697   087C 3B D1 18      mov d, _currState_data ; $currState
0698   087F D7            push a
0699   0880 DA            push d
0700   0881 FA 05 00      lea d, [bp + 5] ; $i
0701   0884 2A            mov b, [d]
0702   0885 38 00 00      mov c, 0
0703   0888             ; --- START TERMS
0704   0888 D7            push a
0705   0889 11            mov a, b
0706   088A FD 2E FF FF   mov32 cb, $ffffffff
0706   088E FF FF 
0707   0890 56            add b, a
0708   0891 E4            pop a
0709   0892             ; --- END TERMS
0710   0892 E7            pop d
0711   0893 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0712   0897 DA            push d
0713   0898 FA 07 00      lea d, [bp + 7] ; $j
0714   089B 2A            mov b, [d]
0715   089C 38 00 00      mov c, 0
0716   089F             ; --- START TERMS
0717   089F D7            push a
0718   08A0 11            mov a, b
0719   08A1 FD 2E FF FF   mov32 cb, $ffffffff
0719   08A5 FF FF 
0720   08A7 56            add b, a
0721   08A8 E4            pop a
0722   08A9             ; --- END TERMS
0723   08A9 E7            pop d
0724   08AA 5A            add d, b
0725   08AB E4            pop a
0726   08AC 32            mov bl, [d]
0727   08AD A7 00         mov bh, 0
0728   08AF 38 00 00      mov c, 0
0729   08B2             ; --- START RELATIONAL
0730   08B2 D7            push a
0731   08B3 11            mov a, b
0732   08B4 FD 2E 40 00   mov32 cb, $00000040
0732   08B8 00 00 
0733   08BA B0            cmp a, b
0734   08BB FD 71         seq ; ==
0735   08BD E4            pop a
0736   08BE             ; --- END RELATIONAL
0737   08BE C0 00 00      cmp b, 0
0738   08C1 C6 D7 08      je _if15_exit
0739   08C4             _if15_TRUE:
0740   08C4             ; count++; 
0741   08C4 FA FF FF      lea d, [bp + -1] ; $count
0742   08C7 2A            mov b, [d]
0743   08C8 38 00 00      mov c, 0
0744   08CB 11            mov a, b
0745   08CC FD 77         inc b
0746   08CE FA FF FF      lea d, [bp + -1] ; $count
0747   08D1 FD 43         mov [d], b
0748   08D3 27            mov b, a
0749   08D4 0A D7 08      jmp _if15_exit
0750   08D7             _if15_exit:
0751   08D7             ; if(currState[i+-1][j+1] == '@') 	count++; 
0752   08D7             _if16_cond:
0753   08D7 3B D1 18      mov d, _currState_data ; $currState
0754   08DA D7            push a
0755   08DB DA            push d
0756   08DC FA 05 00      lea d, [bp + 5] ; $i
0757   08DF 2A            mov b, [d]
0758   08E0 38 00 00      mov c, 0
0759   08E3             ; --- START TERMS
0760   08E3 D7            push a
0761   08E4 11            mov a, b
0762   08E5 FD 2E FF FF   mov32 cb, $ffffffff
0762   08E9 FF FF 
0763   08EB 56            add b, a
0764   08EC E4            pop a
0765   08ED             ; --- END TERMS
0766   08ED E7            pop d
0767   08EE FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0768   08F2 DA            push d
0769   08F3 FA 07 00      lea d, [bp + 7] ; $j
0770   08F6 2A            mov b, [d]
0771   08F7 38 00 00      mov c, 0
0772   08FA             ; --- START TERMS
0773   08FA D7            push a
0774   08FB 11            mov a, b
0775   08FC FD 2E 01 00   mov32 cb, $00000001
0775   0900 00 00 
0776   0902 56            add b, a
0777   0903 E4            pop a
0778   0904             ; --- END TERMS
0779   0904 E7            pop d
0780   0905 5A            add d, b
0781   0906 E4            pop a
0782   0907 32            mov bl, [d]
0783   0908 A7 00         mov bh, 0
0784   090A 38 00 00      mov c, 0
0785   090D             ; --- START RELATIONAL
0786   090D D7            push a
0787   090E 11            mov a, b
0788   090F FD 2E 40 00   mov32 cb, $00000040
0788   0913 00 00 
0789   0915 B0            cmp a, b
0790   0916 FD 71         seq ; ==
0791   0918 E4            pop a
0792   0919             ; --- END RELATIONAL
0793   0919 C0 00 00      cmp b, 0
0794   091C C6 32 09      je _if16_exit
0795   091F             _if16_TRUE:
0796   091F             ; count++; 
0797   091F FA FF FF      lea d, [bp + -1] ; $count
0798   0922 2A            mov b, [d]
0799   0923 38 00 00      mov c, 0
0800   0926 11            mov a, b
0801   0927 FD 77         inc b
0802   0929 FA FF FF      lea d, [bp + -1] ; $count
0803   092C FD 43         mov [d], b
0804   092E 27            mov b, a
0805   092F 0A 32 09      jmp _if16_exit
0806   0932             _if16_exit:
0807   0932             ; if(currState[i][j+-1] == '@') 		count++; 
0808   0932             _if17_cond:
0809   0932 3B D1 18      mov d, _currState_data ; $currState
0810   0935 D7            push a
0811   0936 DA            push d
0812   0937 FA 05 00      lea d, [bp + 5] ; $i
0813   093A 2A            mov b, [d]
0814   093B 38 00 00      mov c, 0
0815   093E E7            pop d
0816   093F FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0817   0943 DA            push d
0818   0944 FA 07 00      lea d, [bp + 7] ; $j
0819   0947 2A            mov b, [d]
0820   0948 38 00 00      mov c, 0
0821   094B             ; --- START TERMS
0822   094B D7            push a
0823   094C 11            mov a, b
0824   094D FD 2E FF FF   mov32 cb, $ffffffff
0824   0951 FF FF 
0825   0953 56            add b, a
0826   0954 E4            pop a
0827   0955             ; --- END TERMS
0828   0955 E7            pop d
0829   0956 5A            add d, b
0830   0957 E4            pop a
0831   0958 32            mov bl, [d]
0832   0959 A7 00         mov bh, 0
0833   095B 38 00 00      mov c, 0
0834   095E             ; --- START RELATIONAL
0835   095E D7            push a
0836   095F 11            mov a, b
0837   0960 FD 2E 40 00   mov32 cb, $00000040
0837   0964 00 00 
0838   0966 B0            cmp a, b
0839   0967 FD 71         seq ; ==
0840   0969 E4            pop a
0841   096A             ; --- END RELATIONAL
0842   096A C0 00 00      cmp b, 0
0843   096D C6 83 09      je _if17_exit
0844   0970             _if17_TRUE:
0845   0970             ; count++; 
0846   0970 FA FF FF      lea d, [bp + -1] ; $count
0847   0973 2A            mov b, [d]
0848   0974 38 00 00      mov c, 0
0849   0977 11            mov a, b
0850   0978 FD 77         inc b
0851   097A FA FF FF      lea d, [bp + -1] ; $count
0852   097D FD 43         mov [d], b
0853   097F 27            mov b, a
0854   0980 0A 83 09      jmp _if17_exit
0855   0983             _if17_exit:
0856   0983             ; if(currState[i][j+1] == '@') 			count++; 
0857   0983             _if18_cond:
0858   0983 3B D1 18      mov d, _currState_data ; $currState
0859   0986 D7            push a
0860   0987 DA            push d
0861   0988 FA 05 00      lea d, [bp + 5] ; $i
0862   098B 2A            mov b, [d]
0863   098C 38 00 00      mov c, 0
0864   098F E7            pop d
0865   0990 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0866   0994 DA            push d
0867   0995 FA 07 00      lea d, [bp + 7] ; $j
0868   0998 2A            mov b, [d]
0869   0999 38 00 00      mov c, 0
0870   099C             ; --- START TERMS
0871   099C D7            push a
0872   099D 11            mov a, b
0873   099E FD 2E 01 00   mov32 cb, $00000001
0873   09A2 00 00 
0874   09A4 56            add b, a
0875   09A5 E4            pop a
0876   09A6             ; --- END TERMS
0877   09A6 E7            pop d
0878   09A7 5A            add d, b
0879   09A8 E4            pop a
0880   09A9 32            mov bl, [d]
0881   09AA A7 00         mov bh, 0
0882   09AC 38 00 00      mov c, 0
0883   09AF             ; --- START RELATIONAL
0884   09AF D7            push a
0885   09B0 11            mov a, b
0886   09B1 FD 2E 40 00   mov32 cb, $00000040
0886   09B5 00 00 
0887   09B7 B0            cmp a, b
0888   09B8 FD 71         seq ; ==
0889   09BA E4            pop a
0890   09BB             ; --- END RELATIONAL
0891   09BB C0 00 00      cmp b, 0
0892   09BE C6 D4 09      je _if18_exit
0893   09C1             _if18_TRUE:
0894   09C1             ; count++; 
0895   09C1 FA FF FF      lea d, [bp + -1] ; $count
0896   09C4 2A            mov b, [d]
0897   09C5 38 00 00      mov c, 0
0898   09C8 11            mov a, b
0899   09C9 FD 77         inc b
0900   09CB FA FF FF      lea d, [bp + -1] ; $count
0901   09CE FD 43         mov [d], b
0902   09D0 27            mov b, a
0903   09D1 0A D4 09      jmp _if18_exit
0904   09D4             _if18_exit:
0905   09D4             ; if(currState[i+1][j+-1] == '@') 	count++; 
0906   09D4             _if19_cond:
0907   09D4 3B D1 18      mov d, _currState_data ; $currState
0908   09D7 D7            push a
0909   09D8 DA            push d
0910   09D9 FA 05 00      lea d, [bp + 5] ; $i
0911   09DC 2A            mov b, [d]
0912   09DD 38 00 00      mov c, 0
0913   09E0             ; --- START TERMS
0914   09E0 D7            push a
0915   09E1 11            mov a, b
0916   09E2 FD 2E 01 00   mov32 cb, $00000001
0916   09E6 00 00 
0917   09E8 56            add b, a
0918   09E9 E4            pop a
0919   09EA             ; --- END TERMS
0920   09EA E7            pop d
0921   09EB FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0922   09EF DA            push d
0923   09F0 FA 07 00      lea d, [bp + 7] ; $j
0924   09F3 2A            mov b, [d]
0925   09F4 38 00 00      mov c, 0
0926   09F7             ; --- START TERMS
0927   09F7 D7            push a
0928   09F8 11            mov a, b
0929   09F9 FD 2E FF FF   mov32 cb, $ffffffff
0929   09FD FF FF 
0930   09FF 56            add b, a
0931   0A00 E4            pop a
0932   0A01             ; --- END TERMS
0933   0A01 E7            pop d
0934   0A02 5A            add d, b
0935   0A03 E4            pop a
0936   0A04 32            mov bl, [d]
0937   0A05 A7 00         mov bh, 0
0938   0A07 38 00 00      mov c, 0
0939   0A0A             ; --- START RELATIONAL
0940   0A0A D7            push a
0941   0A0B 11            mov a, b
0942   0A0C FD 2E 40 00   mov32 cb, $00000040
0942   0A10 00 00 
0943   0A12 B0            cmp a, b
0944   0A13 FD 71         seq ; ==
0945   0A15 E4            pop a
0946   0A16             ; --- END RELATIONAL
0947   0A16 C0 00 00      cmp b, 0
0948   0A19 C6 2F 0A      je _if19_exit
0949   0A1C             _if19_TRUE:
0950   0A1C             ; count++; 
0951   0A1C FA FF FF      lea d, [bp + -1] ; $count
0952   0A1F 2A            mov b, [d]
0953   0A20 38 00 00      mov c, 0
0954   0A23 11            mov a, b
0955   0A24 FD 77         inc b
0956   0A26 FA FF FF      lea d, [bp + -1] ; $count
0957   0A29 FD 43         mov [d], b
0958   0A2B 27            mov b, a
0959   0A2C 0A 2F 0A      jmp _if19_exit
0960   0A2F             _if19_exit:
0961   0A2F             ; if(currState[i+1][j] == '@') 			count++; 
0962   0A2F             _if20_cond:
0963   0A2F 3B D1 18      mov d, _currState_data ; $currState
0964   0A32 D7            push a
0965   0A33 DA            push d
0966   0A34 FA 05 00      lea d, [bp + 5] ; $i
0967   0A37 2A            mov b, [d]
0968   0A38 38 00 00      mov c, 0
0969   0A3B             ; --- START TERMS
0970   0A3B D7            push a
0971   0A3C 11            mov a, b
0972   0A3D FD 2E 01 00   mov32 cb, $00000001
0972   0A41 00 00 
0973   0A43 56            add b, a
0974   0A44 E4            pop a
0975   0A45             ; --- END TERMS
0976   0A45 E7            pop d
0977   0A46 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0978   0A4A DA            push d
0979   0A4B FA 07 00      lea d, [bp + 7] ; $j
0980   0A4E 2A            mov b, [d]
0981   0A4F 38 00 00      mov c, 0
0982   0A52 E7            pop d
0983   0A53 5A            add d, b
0984   0A54 E4            pop a
0985   0A55 32            mov bl, [d]
0986   0A56 A7 00         mov bh, 0
0987   0A58 38 00 00      mov c, 0
0988   0A5B             ; --- START RELATIONAL
0989   0A5B D7            push a
0990   0A5C 11            mov a, b
0991   0A5D FD 2E 40 00   mov32 cb, $00000040
0991   0A61 00 00 
0992   0A63 B0            cmp a, b
0993   0A64 FD 71         seq ; ==
0994   0A66 E4            pop a
0995   0A67             ; --- END RELATIONAL
0996   0A67 C0 00 00      cmp b, 0
0997   0A6A C6 80 0A      je _if20_exit
0998   0A6D             _if20_TRUE:
0999   0A6D             ; count++; 
1000   0A6D FA FF FF      lea d, [bp + -1] ; $count
1001   0A70 2A            mov b, [d]
1002   0A71 38 00 00      mov c, 0
1003   0A74 11            mov a, b
1004   0A75 FD 77         inc b
1005   0A77 FA FF FF      lea d, [bp + -1] ; $count
1006   0A7A FD 43         mov [d], b
1007   0A7C 27            mov b, a
1008   0A7D 0A 80 0A      jmp _if20_exit
1009   0A80             _if20_exit:
1010   0A80             ; if(currState[i+1][j+1] == '@') 		count++; 
1011   0A80             _if21_cond:
1012   0A80 3B D1 18      mov d, _currState_data ; $currState
1013   0A83 D7            push a
1014   0A84 DA            push d
1015   0A85 FA 05 00      lea d, [bp + 5] ; $i
1016   0A88 2A            mov b, [d]
1017   0A89 38 00 00      mov c, 0
1018   0A8C             ; --- START TERMS
1019   0A8C D7            push a
1020   0A8D 11            mov a, b
1021   0A8E FD 2E 01 00   mov32 cb, $00000001
1021   0A92 00 00 
1022   0A94 56            add b, a
1023   0A95 E4            pop a
1024   0A96             ; --- END TERMS
1025   0A96 E7            pop d
1026   0A97 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
1027   0A9B DA            push d
1028   0A9C FA 07 00      lea d, [bp + 7] ; $j
1029   0A9F 2A            mov b, [d]
1030   0AA0 38 00 00      mov c, 0
1031   0AA3             ; --- START TERMS
1032   0AA3 D7            push a
1033   0AA4 11            mov a, b
1034   0AA5 FD 2E 01 00   mov32 cb, $00000001
1034   0AA9 00 00 
1035   0AAB 56            add b, a
1036   0AAC E4            pop a
1037   0AAD             ; --- END TERMS
1038   0AAD E7            pop d
1039   0AAE 5A            add d, b
1040   0AAF E4            pop a
1041   0AB0 32            mov bl, [d]
1042   0AB1 A7 00         mov bh, 0
1043   0AB3 38 00 00      mov c, 0
1044   0AB6             ; --- START RELATIONAL
1045   0AB6 D7            push a
1046   0AB7 11            mov a, b
1047   0AB8 FD 2E 40 00   mov32 cb, $00000040
1047   0ABC 00 00 
1048   0ABE B0            cmp a, b
1049   0ABF FD 71         seq ; ==
1050   0AC1 E4            pop a
1051   0AC2             ; --- END RELATIONAL
1052   0AC2 C0 00 00      cmp b, 0
1053   0AC5 C6 DB 0A      je _if21_exit
1054   0AC8             _if21_TRUE:
1055   0AC8             ; count++; 
1056   0AC8 FA FF FF      lea d, [bp + -1] ; $count
1057   0ACB 2A            mov b, [d]
1058   0ACC 38 00 00      mov c, 0
1059   0ACF 11            mov a, b
1060   0AD0 FD 77         inc b
1061   0AD2 FA FF FF      lea d, [bp + -1] ; $count
1062   0AD5 FD 43         mov [d], b
1063   0AD7 27            mov b, a
1064   0AD8 0A DB 0A      jmp _if21_exit
1065   0ADB             _if21_exit:
1066   0ADB             ; return count; 
1067   0ADB FA FF FF      lea d, [bp + -1] ; $count
1068   0ADE 2A            mov b, [d]
1069   0ADF 38 00 00      mov c, 0
1070   0AE2 F9            leave
1071   0AE3 09            ret
1072   0AE4             
1073   0AE4             printf:
1074   0AE4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1075   0AE7             ; char *p, *format_p; 
1076   0AE7 52 02 00      sub sp, 2
1077   0AEA 52 02 00      sub sp, 2
1078   0AED             ; format_p = format; 
1079   0AED FA FD FF      lea d, [bp + -3] ; $format_p
1080   0AF0 DA            push d
1081   0AF1 FA 05 00      lea d, [bp + 5] ; $format
1082   0AF4 2A            mov b, [d]
1083   0AF5 38 00 00      mov c, 0
1084   0AF8 E7            pop d
1085   0AF9 FD 43         mov [d], b
1086   0AFB             ; p = &format + 2; 
1087   0AFB FA FF FF      lea d, [bp + -1] ; $p
1088   0AFE DA            push d
1089   0AFF FA 05 00      lea d, [bp + 5] ; $format
1090   0B02 2D            mov b, d
1091   0B03             ; --- START TERMS
1092   0B03 D7            push a
1093   0B04 11            mov a, b
1094   0B05 FD 2E 02 00   mov32 cb, $00000002
1094   0B09 00 00 
1095   0B0B 56            add b, a
1096   0B0C E4            pop a
1097   0B0D             ; --- END TERMS
1098   0B0D E7            pop d
1099   0B0E FD 43         mov [d], b
1100   0B10             ; for(;;){ 
1101   0B10             _for22_init:
1102   0B10             _for22_cond:
1103   0B10             _for22_block:
1104   0B10             ; if(!*format_p) break; 
1105   0B10             _if23_cond:
1106   0B10 FA FD FF      lea d, [bp + -3] ; $format_p
1107   0B13 2A            mov b, [d]
1108   0B14 38 00 00      mov c, 0
1109   0B17 74            mov d, b
1110   0B18 32            mov bl, [d]
1111   0B19 A7 00         mov bh, 0
1112   0B1B 38 00 00      mov c, 0
1113   0B1E C0 00 00      cmp b, 0
1114   0B21 FD 71         seq ; !
1115   0B23 C0 00 00      cmp b, 0
1116   0B26 C6 2F 0B      je _if23_else
1117   0B29             _if23_TRUE:
1118   0B29             ; break; 
1119   0B29 0A CF 0D      jmp _for22_exit ; for break
1120   0B2C 0A BC 0D      jmp _if23_exit
1121   0B2F             _if23_else:
1122   0B2F             ; if(*format_p == '%'){ 
1123   0B2F             _if24_cond:
1124   0B2F FA FD FF      lea d, [bp + -3] ; $format_p
1125   0B32 2A            mov b, [d]
1126   0B33 38 00 00      mov c, 0
1127   0B36 74            mov d, b
1128   0B37 32            mov bl, [d]
1129   0B38 A7 00         mov bh, 0
1130   0B3A 38 00 00      mov c, 0
1131   0B3D             ; --- START RELATIONAL
1132   0B3D D7            push a
1133   0B3E 11            mov a, b
1134   0B3F FD 2E 25 00   mov32 cb, $00000025
1134   0B43 00 00 
1135   0B45 B0            cmp a, b
1136   0B46 FD 71         seq ; ==
1137   0B48 E4            pop a
1138   0B49             ; --- END RELATIONAL
1139   0B49 C0 00 00      cmp b, 0
1140   0B4C C6 A7 0D      je _if24_else
1141   0B4F             _if24_TRUE:
1142   0B4F             ; format_p++; 
1143   0B4F FA FD FF      lea d, [bp + -3] ; $format_p
1144   0B52 2A            mov b, [d]
1145   0B53 38 00 00      mov c, 0
1146   0B56 FD 77         inc b
1147   0B58 FA FD FF      lea d, [bp + -3] ; $format_p
1148   0B5B FD 43         mov [d], b
1149   0B5D FD 7D         dec b
1150   0B5F             ; switch(*format_p){ 
1151   0B5F             _switch25_expr:
1152   0B5F FA FD FF      lea d, [bp + -3] ; $format_p
1153   0B62 2A            mov b, [d]
1154   0B63 38 00 00      mov c, 0
1155   0B66 74            mov d, b
1156   0B67 32            mov bl, [d]
1157   0B68 A7 00         mov bh, 0
1158   0B6A 38 00 00      mov c, 0
1159   0B6D             _switch25_comparisons:
1160   0B6D C1 6C         cmp bl, $6c
1161   0B6F C6 9B 0B      je _switch25_case0
1162   0B72 C1 4C         cmp bl, $4c
1163   0B74 C6 9B 0B      je _switch25_case1
1164   0B77 C1 64         cmp bl, $64
1165   0B79 C6 AB 0C      je _switch25_case2
1166   0B7C C1 69         cmp bl, $69
1167   0B7E C6 AB 0C      je _switch25_case3
1168   0B81 C1 75         cmp bl, $75
1169   0B83 C6 DB 0C      je _switch25_case4
1170   0B86 C1 78         cmp bl, $78
1171   0B88 C6 0B 0D      je _switch25_case5
1172   0B8B C1 63         cmp bl, $63
1173   0B8D C6 3B 0D      je _switch25_case6
1174   0B90 C1 73         cmp bl, $73
1175   0B92 C6 6B 0D      je _switch25_case7
1176   0B95 0A 98 0D      jmp _switch25_default
1177   0B98 0A A4 0D      jmp _switch25_exit
1178   0B9B             _switch25_case0:
1179   0B9B             _switch25_case1:
1180   0B9B             ; format_p++; 
1181   0B9B FA FD FF      lea d, [bp + -3] ; $format_p
1182   0B9E 2A            mov b, [d]
1183   0B9F 38 00 00      mov c, 0
1184   0BA2 FD 77         inc b
1185   0BA4 FA FD FF      lea d, [bp + -3] ; $format_p
1186   0BA7 FD 43         mov [d], b
1187   0BA9 FD 7D         dec b
1188   0BAB             ; if(*format_p == 'd' || *format_p == 'i') 
1189   0BAB             _if26_cond:
1190   0BAB FA FD FF      lea d, [bp + -3] ; $format_p
1191   0BAE 2A            mov b, [d]
1192   0BAF 38 00 00      mov c, 0
1193   0BB2 74            mov d, b
1194   0BB3 32            mov bl, [d]
1195   0BB4 A7 00         mov bh, 0
1196   0BB6 38 00 00      mov c, 0
1197   0BB9             ; --- START RELATIONAL
1198   0BB9 D7            push a
1199   0BBA 11            mov a, b
1200   0BBB FD 2E 64 00   mov32 cb, $00000064
1200   0BBF 00 00 
1201   0BC1 B0            cmp a, b
1202   0BC2 FD 71         seq ; ==
1203   0BC4 E4            pop a
1204   0BC5             ; --- END RELATIONAL
1205   0BC5             ; --- START LOGICAL OR
1206   0BC5 D7            push a
1207   0BC6 11            mov a, b
1208   0BC7 FA FD FF      lea d, [bp + -3] ; $format_p
1209   0BCA 2A            mov b, [d]
1210   0BCB 38 00 00      mov c, 0
1211   0BCE 74            mov d, b
1212   0BCF 32            mov bl, [d]
1213   0BD0 A7 00         mov bh, 0
1214   0BD2 38 00 00      mov c, 0
1215   0BD5             ; --- START RELATIONAL
1216   0BD5 D7            push a
1217   0BD6 11            mov a, b
1218   0BD7 FD 2E 69 00   mov32 cb, $00000069
1218   0BDB 00 00 
1219   0BDD B0            cmp a, b
1220   0BDE FD 71         seq ; ==
1221   0BE0 E4            pop a
1222   0BE1             ; --- END RELATIONAL
1223   0BE1 FD A8         sor a, b ; ||
1224   0BE3 E4            pop a
1225   0BE4             ; --- END LOGICAL OR
1226   0BE4 C0 00 00      cmp b, 0
1227   0BE7 C6 08 0C      je _if26_else
1228   0BEA             _if26_TRUE:
1229   0BEA             ; print_signed_long(*(long *)p); 
1230   0BEA             ; --- START FUNCTION CALL
1231   0BEA FA FF FF      lea d, [bp + -1] ; $p
1232   0BED 2A            mov b, [d]
1233   0BEE 38 00 00      mov c, 0
1234   0BF1 74            mov d, b
1235   0BF2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1236   0BF5 FD 39         mov c, b ; And place it into C
1237   0BF7 2A            mov b, [d] ; Lower Word in B
1238   0BF8 12            mov a, c
1239   0BF9 FD AA         swp a
1240   0BFB D7            push a
1241   0BFC FD AB         swp b
1242   0BFE D8            push b
1243   0BFF 07 D1 0D      call print_signed_long
1244   0C02 51 04 00      add sp, 4
1245   0C05             ; --- END FUNCTION CALL
1246   0C05 0A 90 0C      jmp _if26_exit
1247   0C08             _if26_else:
1248   0C08             ; if(*format_p == 'u') 
1249   0C08             _if27_cond:
1250   0C08 FA FD FF      lea d, [bp + -3] ; $format_p
1251   0C0B 2A            mov b, [d]
1252   0C0C 38 00 00      mov c, 0
1253   0C0F 74            mov d, b
1254   0C10 32            mov bl, [d]
1255   0C11 A7 00         mov bh, 0
1256   0C13 38 00 00      mov c, 0
1257   0C16             ; --- START RELATIONAL
1258   0C16 D7            push a
1259   0C17 11            mov a, b
1260   0C18 FD 2E 75 00   mov32 cb, $00000075
1260   0C1C 00 00 
1261   0C1E B0            cmp a, b
1262   0C1F FD 71         seq ; ==
1263   0C21 E4            pop a
1264   0C22             ; --- END RELATIONAL
1265   0C22 C0 00 00      cmp b, 0
1266   0C25 C6 46 0C      je _if27_else
1267   0C28             _if27_TRUE:
1268   0C28             ; print_unsigned_long(*(unsigned long *)p); 
1269   0C28             ; --- START FUNCTION CALL
1270   0C28 FA FF FF      lea d, [bp + -1] ; $p
1271   0C2B 2A            mov b, [d]
1272   0C2C 38 00 00      mov c, 0
1273   0C2F 74            mov d, b
1274   0C30 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1275   0C33 FD 39         mov c, b ; And place it into C
1276   0C35 2A            mov b, [d] ; Lower Word in B
1277   0C36 12            mov a, c
1278   0C37 FD AA         swp a
1279   0C39 D7            push a
1280   0C3A FD AB         swp b
1281   0C3C D8            push b
1282   0C3D 07 71 0F      call print_unsigned_long
1283   0C40 51 04 00      add sp, 4
1284   0C43             ; --- END FUNCTION CALL
1285   0C43 0A 90 0C      jmp _if27_exit
1286   0C46             _if27_else:
1287   0C46             ; if(*format_p == 'x') 
1288   0C46             _if28_cond:
1289   0C46 FA FD FF      lea d, [bp + -3] ; $format_p
1290   0C49 2A            mov b, [d]
1291   0C4A 38 00 00      mov c, 0
1292   0C4D 74            mov d, b
1293   0C4E 32            mov bl, [d]
1294   0C4F A7 00         mov bh, 0
1295   0C51 38 00 00      mov c, 0
1296   0C54             ; --- START RELATIONAL
1297   0C54 D7            push a
1298   0C55 11            mov a, b
1299   0C56 FD 2E 78 00   mov32 cb, $00000078
1299   0C5A 00 00 
1300   0C5C B0            cmp a, b
1301   0C5D FD 71         seq ; ==
1302   0C5F E4            pop a
1303   0C60             ; --- END RELATIONAL
1304   0C60 C0 00 00      cmp b, 0
1305   0C63 C6 84 0C      je _if28_else
1306   0C66             _if28_TRUE:
1307   0C66             ; printx32(*(long int *)p); 
1308   0C66             ; --- START FUNCTION CALL
1309   0C66 FA FF FF      lea d, [bp + -1] ; $p
1310   0C69 2A            mov b, [d]
1311   0C6A 38 00 00      mov c, 0
1312   0C6D 74            mov d, b
1313   0C6E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1314   0C71 FD 39         mov c, b ; And place it into C
1315   0C73 2A            mov b, [d] ; Lower Word in B
1316   0C74 12            mov a, c
1317   0C75 FD AA         swp a
1318   0C77 D7            push a
1319   0C78 FD AB         swp b
1320   0C7A D8            push b
1321   0C7B 07 AF 10      call printx32
1322   0C7E 51 04 00      add sp, 4
1323   0C81             ; --- END FUNCTION CALL
1324   0C81 0A 90 0C      jmp _if28_exit
1325   0C84             _if28_else:
1326   0C84             ; err("Unexpected format in printf."); 
1327   0C84             ; --- START FUNCTION CALL
1328   0C84 26 A4 1D      mov b, _s4 ; "Unexpected format in printf."
1329   0C87 FD AB         swp b
1330   0C89 D8            push b
1331   0C8A 07 0F 11      call err
1332   0C8D 51 02 00      add sp, 2
1333   0C90             ; --- END FUNCTION CALL
1334   0C90             _if28_exit:
1335   0C90             _if27_exit:
1336   0C90             _if26_exit:
1337   0C90             ; p = p + 4; 
1338   0C90 FA FF FF      lea d, [bp + -1] ; $p
1339   0C93 DA            push d
1340   0C94 FA FF FF      lea d, [bp + -1] ; $p
1341   0C97 2A            mov b, [d]
1342   0C98 38 00 00      mov c, 0
1343   0C9B             ; --- START TERMS
1344   0C9B D7            push a
1345   0C9C 11            mov a, b
1346   0C9D FD 2E 04 00   mov32 cb, $00000004
1346   0CA1 00 00 
1347   0CA3 56            add b, a
1348   0CA4 E4            pop a
1349   0CA5             ; --- END TERMS
1350   0CA5 E7            pop d
1351   0CA6 FD 43         mov [d], b
1352   0CA8             ; break; 
1353   0CA8 0A A4 0D      jmp _switch25_exit ; case break
1354   0CAB             _switch25_case2:
1355   0CAB             _switch25_case3:
1356   0CAB             ; print_signed(*(int*)p); 
1357   0CAB             ; --- START FUNCTION CALL
1358   0CAB FA FF FF      lea d, [bp + -1] ; $p
1359   0CAE 2A            mov b, [d]
1360   0CAF 38 00 00      mov c, 0
1361   0CB2 74            mov d, b
1362   0CB3 2A            mov b, [d]
1363   0CB4 38 00 00      mov c, 0
1364   0CB7 FD AB         swp b
1365   0CB9 D8            push b
1366   0CBA 07 3D 11      call print_signed
1367   0CBD 51 02 00      add sp, 2
1368   0CC0             ; --- END FUNCTION CALL
1369   0CC0             ; p = p + 2; 
1370   0CC0 FA FF FF      lea d, [bp + -1] ; $p
1371   0CC3 DA            push d
1372   0CC4 FA FF FF      lea d, [bp + -1] ; $p
1373   0CC7 2A            mov b, [d]
1374   0CC8 38 00 00      mov c, 0
1375   0CCB             ; --- START TERMS
1376   0CCB D7            push a
1377   0CCC 11            mov a, b
1378   0CCD FD 2E 02 00   mov32 cb, $00000002
1378   0CD1 00 00 
1379   0CD3 56            add b, a
1380   0CD4 E4            pop a
1381   0CD5             ; --- END TERMS
1382   0CD5 E7            pop d
1383   0CD6 FD 43         mov [d], b
1384   0CD8             ; break; 
1385   0CD8 0A A4 0D      jmp _switch25_exit ; case break
1386   0CDB             _switch25_case4:
1387   0CDB             ; print_unsigned(*(unsigned int*)p); 
1388   0CDB             ; --- START FUNCTION CALL
1389   0CDB FA FF FF      lea d, [bp + -1] ; $p
1390   0CDE 2A            mov b, [d]
1391   0CDF 38 00 00      mov c, 0
1392   0CE2 74            mov d, b
1393   0CE3 2A            mov b, [d]
1394   0CE4 38 00 00      mov c, 0
1395   0CE7 FD AB         swp b
1396   0CE9 D8            push b
1397   0CEA 07 8E 12      call print_unsigned
1398   0CED 51 02 00      add sp, 2
1399   0CF0             ; --- END FUNCTION CALL
1400   0CF0             ; p = p + 2; 
1401   0CF0 FA FF FF      lea d, [bp + -1] ; $p
1402   0CF3 DA            push d
1403   0CF4 FA FF FF      lea d, [bp + -1] ; $p
1404   0CF7 2A            mov b, [d]
1405   0CF8 38 00 00      mov c, 0
1406   0CFB             ; --- START TERMS
1407   0CFB D7            push a
1408   0CFC 11            mov a, b
1409   0CFD FD 2E 02 00   mov32 cb, $00000002
1409   0D01 00 00 
1410   0D03 56            add b, a
1411   0D04 E4            pop a
1412   0D05             ; --- END TERMS
1413   0D05 E7            pop d
1414   0D06 FD 43         mov [d], b
1415   0D08             ; break; 
1416   0D08 0A A4 0D      jmp _switch25_exit ; case break
1417   0D0B             _switch25_case5:
1418   0D0B             ; printx16(*(int*)p); 
1419   0D0B             ; --- START FUNCTION CALL
1420   0D0B FA FF FF      lea d, [bp + -1] ; $p
1421   0D0E 2A            mov b, [d]
1422   0D0F 38 00 00      mov c, 0
1423   0D12 74            mov d, b
1424   0D13 2A            mov b, [d]
1425   0D14 38 00 00      mov c, 0
1426   0D17 FD AB         swp b
1427   0D19 D8            push b
1428   0D1A 07 A6 13      call printx16
1429   0D1D 51 02 00      add sp, 2
1430   0D20             ; --- END FUNCTION CALL
1431   0D20             ; p = p + 2; 
1432   0D20 FA FF FF      lea d, [bp + -1] ; $p
1433   0D23 DA            push d
1434   0D24 FA FF FF      lea d, [bp + -1] ; $p
1435   0D27 2A            mov b, [d]
1436   0D28 38 00 00      mov c, 0
1437   0D2B             ; --- START TERMS
1438   0D2B D7            push a
1439   0D2C 11            mov a, b
1440   0D2D FD 2E 02 00   mov32 cb, $00000002
1440   0D31 00 00 
1441   0D33 56            add b, a
1442   0D34 E4            pop a
1443   0D35             ; --- END TERMS
1444   0D35 E7            pop d
1445   0D36 FD 43         mov [d], b
1446   0D38             ; break; 
1447   0D38 0A A4 0D      jmp _switch25_exit ; case break
1448   0D3B             _switch25_case6:
1449   0D3B             ; putchar(*(char*)p); 
1450   0D3B             ; --- START FUNCTION CALL
1451   0D3B FA FF FF      lea d, [bp + -1] ; $p
1452   0D3E 2A            mov b, [d]
1453   0D3F 38 00 00      mov c, 0
1454   0D42 74            mov d, b
1455   0D43 32            mov bl, [d]
1456   0D44 A7 00         mov bh, 0
1457   0D46 38 00 00      mov c, 0
1458   0D49 DD            push bl
1459   0D4A 07 63 0F      call putchar
1460   0D4D 51 01 00      add sp, 1
1461   0D50             ; --- END FUNCTION CALL
1462   0D50             ; p = p + 2; 
1463   0D50 FA FF FF      lea d, [bp + -1] ; $p
1464   0D53 DA            push d
1465   0D54 FA FF FF      lea d, [bp + -1] ; $p
1466   0D57 2A            mov b, [d]
1467   0D58 38 00 00      mov c, 0
1468   0D5B             ; --- START TERMS
1469   0D5B D7            push a
1470   0D5C 11            mov a, b
1471   0D5D FD 2E 02 00   mov32 cb, $00000002
1471   0D61 00 00 
1472   0D63 56            add b, a
1473   0D64 E4            pop a
1474   0D65             ; --- END TERMS
1475   0D65 E7            pop d
1476   0D66 FD 43         mov [d], b
1477   0D68             ; break; 
1478   0D68 0A A4 0D      jmp _switch25_exit ; case break
1479   0D6B             _switch25_case7:
1480   0D6B             ; print(*(char**)p); 
1481   0D6B             ; --- START FUNCTION CALL
1482   0D6B FA FF FF      lea d, [bp + -1] ; $p
1483   0D6E 2A            mov b, [d]
1484   0D6F 38 00 00      mov c, 0
1485   0D72 74            mov d, b
1486   0D73 2A            mov b, [d]
1487   0D74 FD AB         swp b
1488   0D76 D8            push b
1489   0D77 07 24 11      call print
1490   0D7A 51 02 00      add sp, 2
1491   0D7D             ; --- END FUNCTION CALL
1492   0D7D             ; p = p + 2; 
1493   0D7D FA FF FF      lea d, [bp + -1] ; $p
1494   0D80 DA            push d
1495   0D81 FA FF FF      lea d, [bp + -1] ; $p
1496   0D84 2A            mov b, [d]
1497   0D85 38 00 00      mov c, 0
1498   0D88             ; --- START TERMS
1499   0D88 D7            push a
1500   0D89 11            mov a, b
1501   0D8A FD 2E 02 00   mov32 cb, $00000002
1501   0D8E 00 00 
1502   0D90 56            add b, a
1503   0D91 E4            pop a
1504   0D92             ; --- END TERMS
1505   0D92 E7            pop d
1506   0D93 FD 43         mov [d], b
1507   0D95             ; break; 
1508   0D95 0A A4 0D      jmp _switch25_exit ; case break
1509   0D98             _switch25_default:
1510   0D98             ; print("Error: Unknown argument type.\n"); 
1511   0D98             ; --- START FUNCTION CALL
1512   0D98 26 C1 1D      mov b, _s5 ; "Error: Unknown argument type.\n"
1513   0D9B FD AB         swp b
1514   0D9D D8            push b
1515   0D9E 07 24 11      call print
1516   0DA1 51 02 00      add sp, 2
1517   0DA4             ; --- END FUNCTION CALL
1518   0DA4             _switch25_exit:
1519   0DA4 0A BC 0D      jmp _if24_exit
1520   0DA7             _if24_else:
1521   0DA7             ; putchar(*format_p); 
1522   0DA7             ; --- START FUNCTION CALL
1523   0DA7 FA FD FF      lea d, [bp + -3] ; $format_p
1524   0DAA 2A            mov b, [d]
1525   0DAB 38 00 00      mov c, 0
1526   0DAE 74            mov d, b
1527   0DAF 32            mov bl, [d]
1528   0DB0 A7 00         mov bh, 0
1529   0DB2 38 00 00      mov c, 0
1530   0DB5 DD            push bl
1531   0DB6 07 63 0F      call putchar
1532   0DB9 51 01 00      add sp, 1
1533   0DBC             ; --- END FUNCTION CALL
1534   0DBC             _if24_exit:
1535   0DBC             _if23_exit:
1536   0DBC             ; format_p++; 
1537   0DBC FA FD FF      lea d, [bp + -3] ; $format_p
1538   0DBF 2A            mov b, [d]
1539   0DC0 38 00 00      mov c, 0
1540   0DC3 FD 77         inc b
1541   0DC5 FA FD FF      lea d, [bp + -3] ; $format_p
1542   0DC8 FD 43         mov [d], b
1543   0DCA FD 7D         dec b
1544   0DCC             _for22_update:
1545   0DCC 0A 10 0B      jmp _for22_cond
1546   0DCF             _for22_exit:
1547   0DCF F9            leave
1548   0DD0 09            ret
1549   0DD1             
1550   0DD1             print_signed_long:
1551   0DD1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1552   0DD4             ; char digits[10]; 
1553   0DD4 52 0A 00      sub sp, 10
1554   0DD7             ; int i = 0; 
1555   0DD7 52 02 00      sub sp, 2
1556   0DDA             ; --- START LOCAL VAR INITIALIZATION
1557   0DDA FA F5 FF      lea d, [bp + -11] ; $i
1558   0DDD DA            push d
1559   0DDE FD 2E 00 00   mov32 cb, $00000000
1559   0DE2 00 00 
1560   0DE4 E7            pop d
1561   0DE5 FD 43         mov [d], b
1562   0DE7             ; --- END LOCAL VAR INITIALIZATION
1563   0DE7             ; if (num < 0) { 
1564   0DE7             _if29_cond:
1565   0DE7 FA 05 00      lea d, [bp + 5] ; $num
1566   0DEA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1567   0DED FD 39         mov c, b ; And place it into C
1568   0DEF 2A            mov b, [d] ; Lower Word in B
1569   0DF0             ; --- START RELATIONAL
1570   0DF0 D7            push a
1571   0DF1 FD D8         push g
1572   0DF3 11            mov a, b
1573   0DF4 FD 7A         mov g, c
1574   0DF6 FD 2E 00 00   mov32 cb, $00000000
1574   0DFA 00 00 
1575   0DFC 38 00 00      mov c, 0
1576   0DFF FD AF         cmp32 ga, cb
1577   0E01 FD 73         slt ; <
1578   0E03 FD F1         pop g
1579   0E05 E4            pop a
1580   0E06             ; --- END RELATIONAL
1581   0E06 C0 00 00      cmp b, 0
1582   0E09 C6 3B 0E      je _if29_else
1583   0E0C             _if29_TRUE:
1584   0E0C             ; putchar('-'); 
1585   0E0C             ; --- START FUNCTION CALL
1586   0E0C FD 2E 2D 00   mov32 cb, $0000002d
1586   0E10 00 00 
1587   0E12 DD            push bl
1588   0E13 07 63 0F      call putchar
1589   0E16 51 01 00      add sp, 1
1590   0E19             ; --- END FUNCTION CALL
1591   0E19             ; num = -num; 
1592   0E19 FA 05 00      lea d, [bp + 5] ; $num
1593   0E1C DA            push d
1594   0E1D FA 05 00      lea d, [bp + 5] ; $num
1595   0E20 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1596   0E23 FD 39         mov c, b ; And place it into C
1597   0E25 2A            mov b, [d] ; Lower Word in B
1598   0E26 12            mov a, c
1599   0E27 95            not a
1600   0E28 97            not b
1601   0E29 55 01 00      add b, 1
1602   0E2C 5B 00 00      adc a, 0
1603   0E2F 39            mov c, a
1604   0E30 E7            pop d
1605   0E31 FD 43         mov [d], b
1606   0E33 28            mov b, c
1607   0E34 FD 44 02 00   mov [d + 2], b
1608   0E38 0A 72 0E      jmp _if29_exit
1609   0E3B             _if29_else:
1610   0E3B             ; if (num == 0) { 
1611   0E3B             _if30_cond:
1612   0E3B FA 05 00      lea d, [bp + 5] ; $num
1613   0E3E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1614   0E41 FD 39         mov c, b ; And place it into C
1615   0E43 2A            mov b, [d] ; Lower Word in B
1616   0E44             ; --- START RELATIONAL
1617   0E44 D7            push a
1618   0E45 FD D8         push g
1619   0E47 11            mov a, b
1620   0E48 FD 7A         mov g, c
1621   0E4A FD 2E 00 00   mov32 cb, $00000000
1621   0E4E 00 00 
1622   0E50 38 00 00      mov c, 0
1623   0E53 FD AF         cmp32 ga, cb
1624   0E55 FD 71         seq ; ==
1625   0E57 FD F1         pop g
1626   0E59 E4            pop a
1627   0E5A             ; --- END RELATIONAL
1628   0E5A C0 00 00      cmp b, 0
1629   0E5D C6 72 0E      je _if30_exit
1630   0E60             _if30_TRUE:
1631   0E60             ; putchar('0'); 
1632   0E60             ; --- START FUNCTION CALL
1633   0E60 FD 2E 30 00   mov32 cb, $00000030
1633   0E64 00 00 
1634   0E66 DD            push bl
1635   0E67 07 63 0F      call putchar
1636   0E6A 51 01 00      add sp, 1
1637   0E6D             ; --- END FUNCTION CALL
1638   0E6D             ; return; 
1639   0E6D F9            leave
1640   0E6E 09            ret
1641   0E6F 0A 72 0E      jmp _if30_exit
1642   0E72             _if30_exit:
1643   0E72             _if29_exit:
1644   0E72             ; while (num > 0) { 
1645   0E72             _while31_cond:
1646   0E72 FA 05 00      lea d, [bp + 5] ; $num
1647   0E75 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1648   0E78 FD 39         mov c, b ; And place it into C
1649   0E7A 2A            mov b, [d] ; Lower Word in B
1650   0E7B             ; --- START RELATIONAL
1651   0E7B D7            push a
1652   0E7C FD D8         push g
1653   0E7E 11            mov a, b
1654   0E7F FD 7A         mov g, c
1655   0E81 FD 2E 00 00   mov32 cb, $00000000
1655   0E85 00 00 
1656   0E87 38 00 00      mov c, 0
1657   0E8A FD AF         cmp32 ga, cb
1658   0E8C FD 7F         sgt
1659   0E8E FD F1         pop g
1660   0E90 E4            pop a
1661   0E91             ; --- END RELATIONAL
1662   0E91 C0 00 00      cmp b, 0
1663   0E94 C6 19 0F      je _while31_exit
1664   0E97             _while31_block:
1665   0E97             ; digits[i] = '0' + (num % 10); 
1666   0E97 FA F7 FF      lea d, [bp + -9] ; $digits
1667   0E9A D7            push a
1668   0E9B DA            push d
1669   0E9C FA F5 FF      lea d, [bp + -11] ; $i
1670   0E9F 2A            mov b, [d]
1671   0EA0 38 00 00      mov c, 0
1672   0EA3 E7            pop d
1673   0EA4 5A            add d, b
1674   0EA5 E4            pop a
1675   0EA6 DA            push d
1676   0EA7 FD 2E 30 00   mov32 cb, $00000030
1676   0EAB 00 00 
1677   0EAD             ; --- START TERMS
1678   0EAD D7            push a
1679   0EAE 11            mov a, b
1680   0EAF FA 05 00      lea d, [bp + 5] ; $num
1681   0EB2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1682   0EB5 FD 39         mov c, b ; And place it into C
1683   0EB7 2A            mov b, [d] ; Lower Word in B
1684   0EB8             ; --- START FACTORS
1685   0EB8 D7            push a
1686   0EB9 FD D8         push g
1687   0EBB 11            mov a, b
1688   0EBC FD 7A         mov g, c
1689   0EBE FD 2E 0A 00   mov32 cb, $0000000a
1689   0EC2 00 00 
1690   0EC4 FD D8         push g ; save 'g' as the div instruction uses it
1691   0EC6 AE            div a, b ; %, a: quotient, b: remainder
1692   0EC7 11            mov a, b
1693   0EC8 FD F1         pop g
1694   0ECA FD 38         mov c, g
1695   0ECC 27            mov b, a
1696   0ECD FD F1         pop g
1697   0ECF E4            pop a
1698   0ED0             ; --- END FACTORS
1699   0ED0 FD 22 00 00   mov g, 0
1700   0ED4 FD 15         add32 cb, ga
1701   0ED6 E4            pop a
1702   0ED7             ; --- END TERMS
1703   0ED7 E7            pop d
1704   0ED8 FD 3E         mov [d], bl
1705   0EDA             ; num = num / 10; 
1706   0EDA FA 05 00      lea d, [bp + 5] ; $num
1707   0EDD DA            push d
1708   0EDE FA 05 00      lea d, [bp + 5] ; $num
1709   0EE1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1710   0EE4 FD 39         mov c, b ; And place it into C
1711   0EE6 2A            mov b, [d] ; Lower Word in B
1712   0EE7             ; --- START FACTORS
1713   0EE7 D7            push a
1714   0EE8 FD D8         push g
1715   0EEA 11            mov a, b
1716   0EEB FD 7A         mov g, c
1717   0EED FD 2E 0A 00   mov32 cb, $0000000a
1717   0EF1 00 00 
1718   0EF3 FD D8         push g ; save 'g' as the div instruction uses it
1719   0EF5 AE            div a, b ; /, a: quotient, b: remainder
1720   0EF6 FD F1         pop g
1721   0EF8 FD 38         mov c, g
1722   0EFA 27            mov b, a
1723   0EFB FD F1         pop g
1724   0EFD E4            pop a
1725   0EFE             ; --- END FACTORS
1726   0EFE E7            pop d
1727   0EFF FD 43         mov [d], b
1728   0F01 28            mov b, c
1729   0F02 FD 44 02 00   mov [d + 2], b
1730   0F06             ; i++; 
1731   0F06 FA F5 FF      lea d, [bp + -11] ; $i
1732   0F09 2A            mov b, [d]
1733   0F0A 38 00 00      mov c, 0
1734   0F0D 11            mov a, b
1735   0F0E FD 77         inc b
1736   0F10 FA F5 FF      lea d, [bp + -11] ; $i
1737   0F13 FD 43         mov [d], b
1738   0F15 27            mov b, a
1739   0F16 0A 72 0E      jmp _while31_cond
1740   0F19             _while31_exit:
1741   0F19             ; while (i > 0) { 
1742   0F19             _while38_cond:
1743   0F19 FA F5 FF      lea d, [bp + -11] ; $i
1744   0F1C 2A            mov b, [d]
1745   0F1D 38 00 00      mov c, 0
1746   0F20             ; --- START RELATIONAL
1747   0F20 D7            push a
1748   0F21 11            mov a, b
1749   0F22 FD 2E 00 00   mov32 cb, $00000000
1749   0F26 00 00 
1750   0F28 B0            cmp a, b
1751   0F29 FD 7F         sgt ; >
1752   0F2B E4            pop a
1753   0F2C             ; --- END RELATIONAL
1754   0F2C C0 00 00      cmp b, 0
1755   0F2F C6 61 0F      je _while38_exit
1756   0F32             _while38_block:
1757   0F32             ; i--; 
1758   0F32 FA F5 FF      lea d, [bp + -11] ; $i
1759   0F35 2A            mov b, [d]
1760   0F36 38 00 00      mov c, 0
1761   0F39 11            mov a, b
1762   0F3A FD 7D         dec b
1763   0F3C FA F5 FF      lea d, [bp + -11] ; $i
1764   0F3F FD 43         mov [d], b
1765   0F41 27            mov b, a
1766   0F42             ; putchar(digits[i]); 
1767   0F42             ; --- START FUNCTION CALL
1768   0F42 FA F7 FF      lea d, [bp + -9] ; $digits
1769   0F45 D7            push a
1770   0F46 DA            push d
1771   0F47 FA F5 FF      lea d, [bp + -11] ; $i
1772   0F4A 2A            mov b, [d]
1773   0F4B 38 00 00      mov c, 0
1774   0F4E E7            pop d
1775   0F4F 5A            add d, b
1776   0F50 E4            pop a
1777   0F51 32            mov bl, [d]
1778   0F52 A7 00         mov bh, 0
1779   0F54 38 00 00      mov c, 0
1780   0F57 DD            push bl
1781   0F58 07 63 0F      call putchar
1782   0F5B 51 01 00      add sp, 1
1783   0F5E             ; --- END FUNCTION CALL
1784   0F5E 0A 19 0F      jmp _while38_cond
1785   0F61             _while38_exit:
1786   0F61 F9            leave
1787   0F62 09            ret
1788   0F63             
1789   0F63             putchar:
1790   0F63 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1791   0F66             ; --- BEGIN INLINE ASM SEGMENT
1792   0F66 FA 05 00      lea d, [bp + 5] ; $c
1793   0F69 1E            mov al, [d]
1794   0F6A 23            mov ah, al
1795   0F6B 19 00         mov al, 0
1796   0F6D 05 03         syscall sys_io      ; char in AH
1797   0F6F             ; --- END INLINE ASM SEGMENT
1798   0F6F F9            leave
1799   0F70 09            ret
1800   0F71             
1801   0F71             print_unsigned_long:
1802   0F71 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1803   0F74             ; char digits[10]; 
1804   0F74 52 0A 00      sub sp, 10
1805   0F77             ; int i; 
1806   0F77 52 02 00      sub sp, 2
1807   0F7A             ; i = 0; 
1808   0F7A FA F5 FF      lea d, [bp + -11] ; $i
1809   0F7D DA            push d
1810   0F7E FD 2E 00 00   mov32 cb, $00000000
1810   0F82 00 00 
1811   0F84 E7            pop d
1812   0F85 FD 43         mov [d], b
1813   0F87             ; if(num == 0){ 
1814   0F87             _if39_cond:
1815   0F87 FA 05 00      lea d, [bp + 5] ; $num
1816   0F8A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1817   0F8D FD 39         mov c, b ; And place it into C
1818   0F8F 2A            mov b, [d] ; Lower Word in B
1819   0F90             ; --- START RELATIONAL
1820   0F90 D7            push a
1821   0F91 FD D8         push g
1822   0F93 11            mov a, b
1823   0F94 FD 7A         mov g, c
1824   0F96 FD 2E 00 00   mov32 cb, $00000000
1824   0F9A 00 00 
1825   0F9C 38 00 00      mov c, 0
1826   0F9F FD AF         cmp32 ga, cb
1827   0FA1 FD 71         seq ; ==
1828   0FA3 FD F1         pop g
1829   0FA5 E4            pop a
1830   0FA6             ; --- END RELATIONAL
1831   0FA6 C0 00 00      cmp b, 0
1832   0FA9 C6 BE 0F      je _if39_exit
1833   0FAC             _if39_TRUE:
1834   0FAC             ; putchar('0'); 
1835   0FAC             ; --- START FUNCTION CALL
1836   0FAC FD 2E 30 00   mov32 cb, $00000030
1836   0FB0 00 00 
1837   0FB2 DD            push bl
1838   0FB3 07 63 0F      call putchar
1839   0FB6 51 01 00      add sp, 1
1840   0FB9             ; --- END FUNCTION CALL
1841   0FB9             ; return; 
1842   0FB9 F9            leave
1843   0FBA 09            ret
1844   0FBB 0A BE 0F      jmp _if39_exit
1845   0FBE             _if39_exit:
1846   0FBE             ; while (num > 0) { 
1847   0FBE             _while40_cond:
1848   0FBE FA 05 00      lea d, [bp + 5] ; $num
1849   0FC1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1850   0FC4 FD 39         mov c, b ; And place it into C
1851   0FC6 2A            mov b, [d] ; Lower Word in B
1852   0FC7             ; --- START RELATIONAL
1853   0FC7 D7            push a
1854   0FC8 FD D8         push g
1855   0FCA 11            mov a, b
1856   0FCB FD 7A         mov g, c
1857   0FCD FD 2E 00 00   mov32 cb, $00000000
1857   0FD1 00 00 
1858   0FD3 38 00 00      mov c, 0
1859   0FD6 FD AF         cmp32 ga, cb
1860   0FD8 FD 81         sgu
1861   0FDA FD F1         pop g
1862   0FDC E4            pop a
1863   0FDD             ; --- END RELATIONAL
1864   0FDD C0 00 00      cmp b, 0
1865   0FE0 C6 65 10      je _while40_exit
1866   0FE3             _while40_block:
1867   0FE3             ; digits[i] = '0' + (num % 10); 
1868   0FE3 FA F7 FF      lea d, [bp + -9] ; $digits
1869   0FE6 D7            push a
1870   0FE7 DA            push d
1871   0FE8 FA F5 FF      lea d, [bp + -11] ; $i
1872   0FEB 2A            mov b, [d]
1873   0FEC 38 00 00      mov c, 0
1874   0FEF E7            pop d
1875   0FF0 5A            add d, b
1876   0FF1 E4            pop a
1877   0FF2 DA            push d
1878   0FF3 FD 2E 30 00   mov32 cb, $00000030
1878   0FF7 00 00 
1879   0FF9             ; --- START TERMS
1880   0FF9 D7            push a
1881   0FFA 11            mov a, b
1882   0FFB FA 05 00      lea d, [bp + 5] ; $num
1883   0FFE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1884   1001 FD 39         mov c, b ; And place it into C
1885   1003 2A            mov b, [d] ; Lower Word in B
1886   1004             ; --- START FACTORS
1887   1004 D7            push a
1888   1005 FD D8         push g
1889   1007 11            mov a, b
1890   1008 FD 7A         mov g, c
1891   100A FD 2E 0A 00   mov32 cb, $0000000a
1891   100E 00 00 
1892   1010 FD D8         push g ; save 'g' as the div instruction uses it
1893   1012 AE            div a, b ; %, a: quotient, b: remainder
1894   1013 11            mov a, b
1895   1014 FD F1         pop g
1896   1016 FD 38         mov c, g
1897   1018 27            mov b, a
1898   1019 FD F1         pop g
1899   101B E4            pop a
1900   101C             ; --- END FACTORS
1901   101C FD 22 00 00   mov g, 0
1902   1020 FD 15         add32 cb, ga
1903   1022 E4            pop a
1904   1023             ; --- END TERMS
1905   1023 E7            pop d
1906   1024 FD 3E         mov [d], bl
1907   1026             ; num = num / 10; 
1908   1026 FA 05 00      lea d, [bp + 5] ; $num
1909   1029 DA            push d
1910   102A FA 05 00      lea d, [bp + 5] ; $num
1911   102D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1912   1030 FD 39         mov c, b ; And place it into C
1913   1032 2A            mov b, [d] ; Lower Word in B
1914   1033             ; --- START FACTORS
1915   1033 D7            push a
1916   1034 FD D8         push g
1917   1036 11            mov a, b
1918   1037 FD 7A         mov g, c
1919   1039 FD 2E 0A 00   mov32 cb, $0000000a
1919   103D 00 00 
1920   103F FD D8         push g ; save 'g' as the div instruction uses it
1921   1041 AE            div a, b ; /, a: quotient, b: remainder
1922   1042 FD F1         pop g
1923   1044 FD 38         mov c, g
1924   1046 27            mov b, a
1925   1047 FD F1         pop g
1926   1049 E4            pop a
1927   104A             ; --- END FACTORS
1928   104A E7            pop d
1929   104B FD 43         mov [d], b
1930   104D 28            mov b, c
1931   104E FD 44 02 00   mov [d + 2], b
1932   1052             ; i++; 
1933   1052 FA F5 FF      lea d, [bp + -11] ; $i
1934   1055 2A            mov b, [d]
1935   1056 38 00 00      mov c, 0
1936   1059 11            mov a, b
1937   105A FD 77         inc b
1938   105C FA F5 FF      lea d, [bp + -11] ; $i
1939   105F FD 43         mov [d], b
1940   1061 27            mov b, a
1941   1062 0A BE 0F      jmp _while40_cond
1942   1065             _while40_exit:
1943   1065             ; while (i > 0) { 
1944   1065             _while47_cond:
1945   1065 FA F5 FF      lea d, [bp + -11] ; $i
1946   1068 2A            mov b, [d]
1947   1069 38 00 00      mov c, 0
1948   106C             ; --- START RELATIONAL
1949   106C D7            push a
1950   106D 11            mov a, b
1951   106E FD 2E 00 00   mov32 cb, $00000000
1951   1072 00 00 
1952   1074 B0            cmp a, b
1953   1075 FD 7F         sgt ; >
1954   1077 E4            pop a
1955   1078             ; --- END RELATIONAL
1956   1078 C0 00 00      cmp b, 0
1957   107B C6 AD 10      je _while47_exit
1958   107E             _while47_block:
1959   107E             ; i--; 
1960   107E FA F5 FF      lea d, [bp + -11] ; $i
1961   1081 2A            mov b, [d]
1962   1082 38 00 00      mov c, 0
1963   1085 11            mov a, b
1964   1086 FD 7D         dec b
1965   1088 FA F5 FF      lea d, [bp + -11] ; $i
1966   108B FD 43         mov [d], b
1967   108D 27            mov b, a
1968   108E             ; putchar(digits[i]); 
1969   108E             ; --- START FUNCTION CALL
1970   108E FA F7 FF      lea d, [bp + -9] ; $digits
1971   1091 D7            push a
1972   1092 DA            push d
1973   1093 FA F5 FF      lea d, [bp + -11] ; $i
1974   1096 2A            mov b, [d]
1975   1097 38 00 00      mov c, 0
1976   109A E7            pop d
1977   109B 5A            add d, b
1978   109C E4            pop a
1979   109D 32            mov bl, [d]
1980   109E A7 00         mov bh, 0
1981   10A0 38 00 00      mov c, 0
1982   10A3 DD            push bl
1983   10A4 07 63 0F      call putchar
1984   10A7 51 01 00      add sp, 1
1985   10AA             ; --- END FUNCTION CALL
1986   10AA 0A 65 10      jmp _while47_cond
1987   10AD             _while47_exit:
1988   10AD F9            leave
1989   10AE 09            ret
1990   10AF             
1991   10AF             printx32:
1992   10AF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1993   10B2             ; --- BEGIN INLINE ASM SEGMENT
1994   10B2 FA 05 00      lea d, [bp + 5] ; $hex
1995   10B5 2B 02 00      mov b, [d+2]
1996   10B8 07 C1 10      call print_u16x_printx32
1997   10BB 2A            mov b, [d]
1998   10BC 07 C1 10      call print_u16x_printx32
1999   10BF             ; --- END INLINE ASM SEGMENT
2000   10BF             ; return; 
2001   10BF F9            leave
2002   10C0 09            ret
2003   10C1             ; --- BEGIN INLINE ASM SEGMENT
2004   10C1             print_u16x_printx32:
2005   10C1 D7            push a
2006   10C2 D8            push b
2007   10C3 DD            push bl
2008   10C4 30            mov bl, bh
2009   10C5 07 E3 10      call _itoa_printx32        ; convert bh to char in A
2010   10C8 2F            mov bl, al        ; save al
2011   10C9 19 00         mov al, 0
2012   10CB 05 03         syscall sys_io        ; display AH
2013   10CD 24            mov ah, bl        ; retrieve al
2014   10CE 19 00         mov al, 0
2015   10D0 05 03         syscall sys_io        ; display AL
2016   10D2 EA            pop bl
2017   10D3 07 E3 10      call _itoa_printx32        ; convert bh to char in A
2018   10D6 2F            mov bl, al        ; save al
2019   10D7 19 00         mov al, 0
2020   10D9 05 03         syscall sys_io        ; display AH
2021   10DB 24            mov ah, bl        ; retrieve al
2022   10DC 19 00         mov al, 0
2023   10DE 05 03         syscall sys_io        ; display AL
2024   10E0 E5            pop b
2025   10E1 E4            pop a
2026   10E2 09            ret
2027   10E3             _itoa_printx32:
2028   10E3 DA            push d
2029   10E4 D8            push b
2030   10E5 A7 00         mov bh, 0
2031   10E7 FD A4 04      shr bl, 4  
2032   10EA 74            mov d, b
2033   10EB 1F FD 10      mov al, [d + s_hex_digits_printx32]
2034   10EE 23            mov ah, al
2035   10EF E5            pop b
2036   10F0 D8            push b
2037   10F1 A7 00         mov bh, 0
2038   10F3 FD 87 0F      and bl, $0F
2039   10F6 74            mov d, b
2040   10F7 1F FD 10      mov al, [d + s_hex_digits_printx32]
2041   10FA E5            pop b
2042   10FB E7            pop d
2043   10FC 09            ret
2044   10FD 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2044   1101 34 35 36 37 
2044   1105 38 39 41 42 
2044   1109 43 44 45 46 
2045   110D             ; --- END INLINE ASM SEGMENT
2046   110D F9            leave
2047   110E 09            ret
2048   110F             
2049   110F             err:
2050   110F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2051   1112             ; print(e); 
2052   1112             ; --- START FUNCTION CALL
2053   1112 FA 05 00      lea d, [bp + 5] ; $e
2054   1115 2A            mov b, [d]
2055   1116 38 00 00      mov c, 0
2056   1119 FD AB         swp b
2057   111B D8            push b
2058   111C 07 24 11      call print
2059   111F 51 02 00      add sp, 2
2060   1122             ; --- END FUNCTION CALL
2061   1122 F9            leave
2062   1123 09            ret
2063   1124             
2064   1124             print:
2065   1124 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2066   1127             ; --- BEGIN INLINE ASM SEGMENT
2067   1127 FA 05 00      lea d, [bp + 5] ; $s
2068   112A FD 2A         mov d, [d]
2069   112C             _puts_L1_print:
2070   112C 1E            mov al, [d]
2071   112D B9 00         cmp al, 0
2072   112F C6 3B 11      jz _puts_END_print
2073   1132 23            mov ah, al
2074   1133 19 00         mov al, 0
2075   1135 05 03         syscall sys_io
2076   1137 79            inc d
2077   1138 0A 2C 11      jmp _puts_L1_print
2078   113B             _puts_END_print:
2079   113B             ; --- END INLINE ASM SEGMENT
2080   113B F9            leave
2081   113C 09            ret
2082   113D             
2083   113D             print_signed:
2084   113D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2085   1140             ; char digits[5]; 
2086   1140 52 05 00      sub sp, 5
2087   1143             ; int i = 0; 
2088   1143 52 02 00      sub sp, 2
2089   1146             ; --- START LOCAL VAR INITIALIZATION
2090   1146 FA FA FF      lea d, [bp + -6] ; $i
2091   1149 DA            push d
2092   114A FD 2E 00 00   mov32 cb, $00000000
2092   114E 00 00 
2093   1150 E7            pop d
2094   1151 FD 43         mov [d], b
2095   1153             ; --- END LOCAL VAR INITIALIZATION
2096   1153             ; if (num < 0) { 
2097   1153             _if48_cond:
2098   1153 FA 05 00      lea d, [bp + 5] ; $num
2099   1156 2A            mov b, [d]
2100   1157 38 00 00      mov c, 0
2101   115A             ; --- START RELATIONAL
2102   115A D7            push a
2103   115B 11            mov a, b
2104   115C FD 2E 00 00   mov32 cb, $00000000
2104   1160 00 00 
2105   1162 B0            cmp a, b
2106   1163 FD 73         slt ; < (signed)
2107   1165 E4            pop a
2108   1166             ; --- END RELATIONAL
2109   1166 C0 00 00      cmp b, 0
2110   1169 C6 8C 11      je _if48_else
2111   116C             _if48_TRUE:
2112   116C             ; putchar('-'); 
2113   116C             ; --- START FUNCTION CALL
2114   116C FD 2E 2D 00   mov32 cb, $0000002d
2114   1170 00 00 
2115   1172 DD            push bl
2116   1173 07 63 0F      call putchar
2117   1176 51 01 00      add sp, 1
2118   1179             ; --- END FUNCTION CALL
2119   1179             ; num = -num; 
2120   1179 FA 05 00      lea d, [bp + 5] ; $num
2121   117C DA            push d
2122   117D FA 05 00      lea d, [bp + 5] ; $num
2123   1180 2A            mov b, [d]
2124   1181 38 00 00      mov c, 0
2125   1184 FD 97         neg b
2126   1186 E7            pop d
2127   1187 FD 43         mov [d], b
2128   1189 0A B7 11      jmp _if48_exit
2129   118C             _if48_else:
2130   118C             ; if (num == 0) { 
2131   118C             _if49_cond:
2132   118C FA 05 00      lea d, [bp + 5] ; $num
2133   118F 2A            mov b, [d]
2134   1190 38 00 00      mov c, 0
2135   1193             ; --- START RELATIONAL
2136   1193 D7            push a
2137   1194 11            mov a, b
2138   1195 FD 2E 00 00   mov32 cb, $00000000
2138   1199 00 00 
2139   119B B0            cmp a, b
2140   119C FD 71         seq ; ==
2141   119E E4            pop a
2142   119F             ; --- END RELATIONAL
2143   119F C0 00 00      cmp b, 0
2144   11A2 C6 B7 11      je _if49_exit
2145   11A5             _if49_TRUE:
2146   11A5             ; putchar('0'); 
2147   11A5             ; --- START FUNCTION CALL
2148   11A5 FD 2E 30 00   mov32 cb, $00000030
2148   11A9 00 00 
2149   11AB DD            push bl
2150   11AC 07 63 0F      call putchar
2151   11AF 51 01 00      add sp, 1
2152   11B2             ; --- END FUNCTION CALL
2153   11B2             ; return; 
2154   11B2 F9            leave
2155   11B3 09            ret
2156   11B4 0A B7 11      jmp _if49_exit
2157   11B7             _if49_exit:
2158   11B7             _if48_exit:
2159   11B7             ; while (num > 0) { 
2160   11B7             _while50_cond:
2161   11B7 FA 05 00      lea d, [bp + 5] ; $num
2162   11BA 2A            mov b, [d]
2163   11BB 38 00 00      mov c, 0
2164   11BE             ; --- START RELATIONAL
2165   11BE D7            push a
2166   11BF 11            mov a, b
2167   11C0 FD 2E 00 00   mov32 cb, $00000000
2167   11C4 00 00 
2168   11C6 B0            cmp a, b
2169   11C7 FD 7F         sgt ; >
2170   11C9 E4            pop a
2171   11CA             ; --- END RELATIONAL
2172   11CA C0 00 00      cmp b, 0
2173   11CD C6 44 12      je _while50_exit
2174   11D0             _while50_block:
2175   11D0             ; digits[i] = '0' + (num % 10); 
2176   11D0 FA FC FF      lea d, [bp + -4] ; $digits
2177   11D3 D7            push a
2178   11D4 DA            push d
2179   11D5 FA FA FF      lea d, [bp + -6] ; $i
2180   11D8 2A            mov b, [d]
2181   11D9 38 00 00      mov c, 0
2182   11DC E7            pop d
2183   11DD 5A            add d, b
2184   11DE E4            pop a
2185   11DF DA            push d
2186   11E0 FD 2E 30 00   mov32 cb, $00000030
2186   11E4 00 00 
2187   11E6             ; --- START TERMS
2188   11E6 D7            push a
2189   11E7 11            mov a, b
2190   11E8 FA 05 00      lea d, [bp + 5] ; $num
2191   11EB 2A            mov b, [d]
2192   11EC 38 00 00      mov c, 0
2193   11EF             ; --- START FACTORS
2194   11EF D7            push a
2195   11F0 FD D8         push g
2196   11F2 11            mov a, b
2197   11F3 FD 7A         mov g, c
2198   11F5 FD 2E 0A 00   mov32 cb, $0000000a
2198   11F9 00 00 
2199   11FB FD D8         push g ; save 'g' as the div instruction uses it
2200   11FD AE            div a, b ; %, a: quotient, b: remainder
2201   11FE 11            mov a, b
2202   11FF FD F1         pop g
2203   1201 FD 38         mov c, g
2204   1203 27            mov b, a
2205   1204 FD F1         pop g
2206   1206 E4            pop a
2207   1207             ; --- END FACTORS
2208   1207 56            add b, a
2209   1208 E4            pop a
2210   1209             ; --- END TERMS
2211   1209 E7            pop d
2212   120A FD 3E         mov [d], bl
2213   120C             ; num = num / 10; 
2214   120C FA 05 00      lea d, [bp + 5] ; $num
2215   120F DA            push d
2216   1210 FA 05 00      lea d, [bp + 5] ; $num
2217   1213 2A            mov b, [d]
2218   1214 38 00 00      mov c, 0
2219   1217             ; --- START FACTORS
2220   1217 D7            push a
2221   1218 FD D8         push g
2222   121A 11            mov a, b
2223   121B FD 7A         mov g, c
2224   121D FD 2E 0A 00   mov32 cb, $0000000a
2224   1221 00 00 
2225   1223 FD D8         push g ; save 'g' as the div instruction uses it
2226   1225 AE            div a, b ; /, a: quotient, b: remainder
2227   1226 FD F1         pop g
2228   1228 FD 38         mov c, g
2229   122A 27            mov b, a
2230   122B FD F1         pop g
2231   122D E4            pop a
2232   122E             ; --- END FACTORS
2233   122E E7            pop d
2234   122F FD 43         mov [d], b
2235   1231             ; i++; 
2236   1231 FA FA FF      lea d, [bp + -6] ; $i
2237   1234 2A            mov b, [d]
2238   1235 38 00 00      mov c, 0
2239   1238 11            mov a, b
2240   1239 FD 77         inc b
2241   123B FA FA FF      lea d, [bp + -6] ; $i
2242   123E FD 43         mov [d], b
2243   1240 27            mov b, a
2244   1241 0A B7 11      jmp _while50_cond
2245   1244             _while50_exit:
2246   1244             ; while (i > 0) { 
2247   1244             _while57_cond:
2248   1244 FA FA FF      lea d, [bp + -6] ; $i
2249   1247 2A            mov b, [d]
2250   1248 38 00 00      mov c, 0
2251   124B             ; --- START RELATIONAL
2252   124B D7            push a
2253   124C 11            mov a, b
2254   124D FD 2E 00 00   mov32 cb, $00000000
2254   1251 00 00 
2255   1253 B0            cmp a, b
2256   1254 FD 7F         sgt ; >
2257   1256 E4            pop a
2258   1257             ; --- END RELATIONAL
2259   1257 C0 00 00      cmp b, 0
2260   125A C6 8C 12      je _while57_exit
2261   125D             _while57_block:
2262   125D             ; i--; 
2263   125D FA FA FF      lea d, [bp + -6] ; $i
2264   1260 2A            mov b, [d]
2265   1261 38 00 00      mov c, 0
2266   1264 11            mov a, b
2267   1265 FD 7D         dec b
2268   1267 FA FA FF      lea d, [bp + -6] ; $i
2269   126A FD 43         mov [d], b
2270   126C 27            mov b, a
2271   126D             ; putchar(digits[i]); 
2272   126D             ; --- START FUNCTION CALL
2273   126D FA FC FF      lea d, [bp + -4] ; $digits
2274   1270 D7            push a
2275   1271 DA            push d
2276   1272 FA FA FF      lea d, [bp + -6] ; $i
2277   1275 2A            mov b, [d]
2278   1276 38 00 00      mov c, 0
2279   1279 E7            pop d
2280   127A 5A            add d, b
2281   127B E4            pop a
2282   127C 32            mov bl, [d]
2283   127D A7 00         mov bh, 0
2284   127F 38 00 00      mov c, 0
2285   1282 DD            push bl
2286   1283 07 63 0F      call putchar
2287   1286 51 01 00      add sp, 1
2288   1289             ; --- END FUNCTION CALL
2289   1289 0A 44 12      jmp _while57_cond
2290   128C             _while57_exit:
2291   128C F9            leave
2292   128D 09            ret
2293   128E             
2294   128E             print_unsigned:
2295   128E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2296   1291             ; char digits[5]; 
2297   1291 52 05 00      sub sp, 5
2298   1294             ; int i; 
2299   1294 52 02 00      sub sp, 2
2300   1297             ; i = 0; 
2301   1297 FA FA FF      lea d, [bp + -6] ; $i
2302   129A DA            push d
2303   129B FD 2E 00 00   mov32 cb, $00000000
2303   129F 00 00 
2304   12A1 E7            pop d
2305   12A2 FD 43         mov [d], b
2306   12A4             ; if(num == 0){ 
2307   12A4             _if58_cond:
2308   12A4 FA 05 00      lea d, [bp + 5] ; $num
2309   12A7 2A            mov b, [d]
2310   12A8 38 00 00      mov c, 0
2311   12AB             ; --- START RELATIONAL
2312   12AB D7            push a
2313   12AC 11            mov a, b
2314   12AD FD 2E 00 00   mov32 cb, $00000000
2314   12B1 00 00 
2315   12B3 B0            cmp a, b
2316   12B4 FD 71         seq ; ==
2317   12B6 E4            pop a
2318   12B7             ; --- END RELATIONAL
2319   12B7 C0 00 00      cmp b, 0
2320   12BA C6 CF 12      je _if58_exit
2321   12BD             _if58_TRUE:
2322   12BD             ; putchar('0'); 
2323   12BD             ; --- START FUNCTION CALL
2324   12BD FD 2E 30 00   mov32 cb, $00000030
2324   12C1 00 00 
2325   12C3 DD            push bl
2326   12C4 07 63 0F      call putchar
2327   12C7 51 01 00      add sp, 1
2328   12CA             ; --- END FUNCTION CALL
2329   12CA             ; return; 
2330   12CA F9            leave
2331   12CB 09            ret
2332   12CC 0A CF 12      jmp _if58_exit
2333   12CF             _if58_exit:
2334   12CF             ; while (num > 0) { 
2335   12CF             _while59_cond:
2336   12CF FA 05 00      lea d, [bp + 5] ; $num
2337   12D2 2A            mov b, [d]
2338   12D3 38 00 00      mov c, 0
2339   12D6             ; --- START RELATIONAL
2340   12D6 D7            push a
2341   12D7 11            mov a, b
2342   12D8 FD 2E 00 00   mov32 cb, $00000000
2342   12DC 00 00 
2343   12DE B0            cmp a, b
2344   12DF FD 81         sgu ; > (unsigned)
2345   12E1 E4            pop a
2346   12E2             ; --- END RELATIONAL
2347   12E2 C0 00 00      cmp b, 0
2348   12E5 C6 5C 13      je _while59_exit
2349   12E8             _while59_block:
2350   12E8             ; digits[i] = '0' + (num % 10); 
2351   12E8 FA FC FF      lea d, [bp + -4] ; $digits
2352   12EB D7            push a
2353   12EC DA            push d
2354   12ED FA FA FF      lea d, [bp + -6] ; $i
2355   12F0 2A            mov b, [d]
2356   12F1 38 00 00      mov c, 0
2357   12F4 E7            pop d
2358   12F5 5A            add d, b
2359   12F6 E4            pop a
2360   12F7 DA            push d
2361   12F8 FD 2E 30 00   mov32 cb, $00000030
2361   12FC 00 00 
2362   12FE             ; --- START TERMS
2363   12FE D7            push a
2364   12FF 11            mov a, b
2365   1300 FA 05 00      lea d, [bp + 5] ; $num
2366   1303 2A            mov b, [d]
2367   1304 38 00 00      mov c, 0
2368   1307             ; --- START FACTORS
2369   1307 D7            push a
2370   1308 FD D8         push g
2371   130A 11            mov a, b
2372   130B FD 7A         mov g, c
2373   130D FD 2E 0A 00   mov32 cb, $0000000a
2373   1311 00 00 
2374   1313 FD D8         push g ; save 'g' as the div instruction uses it
2375   1315 AE            div a, b ; %, a: quotient, b: remainder
2376   1316 11            mov a, b
2377   1317 FD F1         pop g
2378   1319 FD 38         mov c, g
2379   131B 27            mov b, a
2380   131C FD F1         pop g
2381   131E E4            pop a
2382   131F             ; --- END FACTORS
2383   131F 56            add b, a
2384   1320 E4            pop a
2385   1321             ; --- END TERMS
2386   1321 E7            pop d
2387   1322 FD 3E         mov [d], bl
2388   1324             ; num = num / 10; 
2389   1324 FA 05 00      lea d, [bp + 5] ; $num
2390   1327 DA            push d
2391   1328 FA 05 00      lea d, [bp + 5] ; $num
2392   132B 2A            mov b, [d]
2393   132C 38 00 00      mov c, 0
2394   132F             ; --- START FACTORS
2395   132F D7            push a
2396   1330 FD D8         push g
2397   1332 11            mov a, b
2398   1333 FD 7A         mov g, c
2399   1335 FD 2E 0A 00   mov32 cb, $0000000a
2399   1339 00 00 
2400   133B FD D8         push g ; save 'g' as the div instruction uses it
2401   133D AE            div a, b ; /, a: quotient, b: remainder
2402   133E FD F1         pop g
2403   1340 FD 38         mov c, g
2404   1342 27            mov b, a
2405   1343 FD F1         pop g
2406   1345 E4            pop a
2407   1346             ; --- END FACTORS
2408   1346 E7            pop d
2409   1347 FD 43         mov [d], b
2410   1349             ; i++; 
2411   1349 FA FA FF      lea d, [bp + -6] ; $i
2412   134C 2A            mov b, [d]
2413   134D 38 00 00      mov c, 0
2414   1350 11            mov a, b
2415   1351 FD 77         inc b
2416   1353 FA FA FF      lea d, [bp + -6] ; $i
2417   1356 FD 43         mov [d], b
2418   1358 27            mov b, a
2419   1359 0A CF 12      jmp _while59_cond
2420   135C             _while59_exit:
2421   135C             ; while (i > 0) { 
2422   135C             _while66_cond:
2423   135C FA FA FF      lea d, [bp + -6] ; $i
2424   135F 2A            mov b, [d]
2425   1360 38 00 00      mov c, 0
2426   1363             ; --- START RELATIONAL
2427   1363 D7            push a
2428   1364 11            mov a, b
2429   1365 FD 2E 00 00   mov32 cb, $00000000
2429   1369 00 00 
2430   136B B0            cmp a, b
2431   136C FD 7F         sgt ; >
2432   136E E4            pop a
2433   136F             ; --- END RELATIONAL
2434   136F C0 00 00      cmp b, 0
2435   1372 C6 A4 13      je _while66_exit
2436   1375             _while66_block:
2437   1375             ; i--; 
2438   1375 FA FA FF      lea d, [bp + -6] ; $i
2439   1378 2A            mov b, [d]
2440   1379 38 00 00      mov c, 0
2441   137C 11            mov a, b
2442   137D FD 7D         dec b
2443   137F FA FA FF      lea d, [bp + -6] ; $i
2444   1382 FD 43         mov [d], b
2445   1384 27            mov b, a
2446   1385             ; putchar(digits[i]); 
2447   1385             ; --- START FUNCTION CALL
2448   1385 FA FC FF      lea d, [bp + -4] ; $digits
2449   1388 D7            push a
2450   1389 DA            push d
2451   138A FA FA FF      lea d, [bp + -6] ; $i
2452   138D 2A            mov b, [d]
2453   138E 38 00 00      mov c, 0
2454   1391 E7            pop d
2455   1392 5A            add d, b
2456   1393 E4            pop a
2457   1394 32            mov bl, [d]
2458   1395 A7 00         mov bh, 0
2459   1397 38 00 00      mov c, 0
2460   139A DD            push bl
2461   139B 07 63 0F      call putchar
2462   139E 51 01 00      add sp, 1
2463   13A1             ; --- END FUNCTION CALL
2464   13A1 0A 5C 13      jmp _while66_cond
2465   13A4             _while66_exit:
2466   13A4 F9            leave
2467   13A5 09            ret
2468   13A6             
2469   13A6             printx16:
2470   13A6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2471   13A9             ; --- BEGIN INLINE ASM SEGMENT
2472   13A9 FA 05 00      lea d, [bp + 5] ; $hex
2473   13AC 2A            mov b, [d]
2474   13AD             print_u16x_printx16:
2475   13AD DD            push bl
2476   13AE 30            mov bl, bh
2477   13AF 07 CC 13      call _itoa_printx16        ; convert bh to char in A
2478   13B2 2F            mov bl, al        ; save al
2479   13B3 19 00         mov al, 0
2480   13B5 05 03         syscall sys_io        ; display AH
2481   13B7 24            mov ah, bl        ; retrieve al
2482   13B8 19 00         mov al, 0
2483   13BA 05 03         syscall sys_io        ; display AL
2484   13BC EA            pop bl
2485   13BD 07 CC 13      call _itoa_printx16        ; convert bh to char in A
2486   13C0 2F            mov bl, al        ; save al
2487   13C1 19 00         mov al, 0
2488   13C3 05 03         syscall sys_io        ; display AH
2489   13C5 24            mov ah, bl        ; retrieve al
2490   13C6 19 00         mov al, 0
2491   13C8 05 03         syscall sys_io        ; display AL
2492   13CA             ; --- END INLINE ASM SEGMENT
2493   13CA             ; return; 
2494   13CA F9            leave
2495   13CB 09            ret
2496   13CC             ; --- BEGIN INLINE ASM SEGMENT
2497   13CC             _itoa_printx16:
2498   13CC DA            push d
2499   13CD D8            push b
2500   13CE A7 00         mov bh, 0
2501   13D0 FD A4 04      shr bl, 4  
2502   13D3 74            mov d, b
2503   13D4 1F E6 13      mov al, [d + s_hex_digits_printx16]
2504   13D7 23            mov ah, al
2505   13D8 E5            pop b
2506   13D9 D8            push b
2507   13DA A7 00         mov bh, 0
2508   13DC FD 87 0F      and bl, $0F
2509   13DF 74            mov d, b
2510   13E0 1F E6 13      mov al, [d + s_hex_digits_printx16]
2511   13E3 E5            pop b
2512   13E4 E7            pop d
2513   13E5 09            ret
2514   13E6 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
2514   13EA 34 35 36 37 
2514   13EE 38 39 41 42 
2514   13F2 43 44 45 46 
2515   13F6             ; --- END INLINE ASM SEGMENT
2516   13F6 F9            leave
2517   13F7 09            ret
2518   13F8             
2519   13F8             puts:
2520   13F8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2521   13FB             ; --- BEGIN INLINE ASM SEGMENT
2522   13FB FA 05 00      lea d, [bp + 5] ; $s
2523   13FE FD 2A         mov d, [d]
2524   1400             _puts_L1_puts:
2525   1400 1E            mov al, [d]
2526   1401 B9 00         cmp al, 0
2527   1403 C6 0F 14      jz _puts_END_puts
2528   1406 23            mov ah, al
2529   1407 19 00         mov al, 0
2530   1409 05 03         syscall sys_io
2531   140B 79            inc d
2532   140C 0A 00 14      jmp _puts_L1_puts
2533   140F             _puts_END_puts:
2534   140F 10 00 0A      mov a, $0A00
2535   1412 05 03         syscall sys_io
2536   1414             ; --- END INLINE ASM SEGMENT
2537   1414 F9            leave
2538   1415 09            ret
2539   1416             ; --- END TEXT SEGMENT
2540   1416             
2541   1416             ; --- BEGIN DATA SEGMENT
2542   1416 1B 5B 32 4A _clear_data: .db $1b,$5b,$32,$4a,$1b,$5b,$48,$00,
2542   141A 1B 5B 48 00 
2543   141E             
2544   141E 00 00 00    .fill 3, 0
2545   1421 00 00 00 00 _nextState_data: .fill 1200, 0
2545   1425 00 00 00 00 
2545   1429 00 00 00 00 
2545   142D 00 00 00 00 
2545   1431 00 00 00 00 
2545   1435 00 00 00 00 
2545   1439 00 00 00 00 
2545   143D 00 00 00 00 
2545   1441 00 00 00 00 
2545   1445 00 00 00 00 
2545   1449 00 00 00 00 
2545   144D 00 00 00 00 
2545   1451 00 00 00 00 
2545   1455 00 00 00 00 
2545   1459 00 00 00 00 
2545   145D 00 00 00 00 
2545   1461 00 00 00 00 
2545   1465 00 00 00 00 
2545   1469 00 00 00 00 
2545   146D 00 00 00 00 
2545   1471 00 00 00 00 
2545   1475 00 00 00 00 
2545   1479 00 00 00 00 
2545   147D 00 00 00 00 
2545   1481 00 00 00 00 
2545   1485 00 00 00 00 
2545   1489 00 00 00 00 
2545   148D 00 00 00 00 
2545   1491 00 00 00 00 
2545   1495 00 00 00 00 
2545   1499 00 00 00 00 
2545   149D 00 00 00 00 
2545   14A1 00 00 00 00 
2545   14A5 00 00 00 00 
2545   14A9 00 00 00 00 
2545   14AD 00 00 00 00 
2545   14B1 00 00 00 00 
2545   14B5 00 00 00 00 
2545   14B9 00 00 00 00 
2545   14BD 00 00 00 00 
2545   14C1 00 00 00 00 
2545   14C5 00 00 00 00 
2545   14C9 00 00 00 00 
2545   14CD 00 00 00 00 
2545   14D1 00 00 00 00 
2545   14D5 00 00 00 00 
2545   14D9 00 00 00 00 
2545   14DD 00 00 00 00 
2545   14E1 00 00 00 00 
2545   14E5 00 00 00 00 
2545   14E9 00 00 00 00 
2545   14ED 00 00 00 00 
2545   14F1 00 00 00 00 
2545   14F5 00 00 00 00 
2545   14F9 00 00 00 00 
2545   14FD 00 00 00 00 
2545   1501 00 00 00 00 
2545   1505 00 00 00 00 
2545   1509 00 00 00 00 
2545   150D 00 00 00 00 
2545   1511 00 00 00 00 
2545   1515 00 00 00 00 
2545   1519 00 00 00 00 
2545   151D 00 00 00 00 
2545   1521 00 00 00 00 
2545   1525 00 00 00 00 
2545   1529 00 00 00 00 
2545   152D 00 00 00 00 
2545   1531 00 00 00 00 
2545   1535 00 00 00 00 
2545   1539 00 00 00 00 
2545   153D 00 00 00 00 
2545   1541 00 00 00 00 
2545   1545 00 00 00 00 
2545   1549 00 00 00 00 
2545   154D 00 00 00 00 
2545   1551 00 00 00 00 
2545   1555 00 00 00 00 
2545   1559 00 00 00 00 
2545   155D 00 00 00 00 
2545   1561 00 00 00 00 
2545   1565 00 00 00 00 
2545   1569 00 00 00 00 
2545   156D 00 00 00 00 
2545   1571 00 00 00 00 
2545   1575 00 00 00 00 
2545   1579 00 00 00 00 
2545   157D 00 00 00 00 
2545   1581 00 00 00 00 
2545   1585 00 00 00 00 
2545   1589 00 00 00 00 
2545   158D 00 00 00 00 
2545   1591 00 00 00 00 
2545   1595 00 00 00 00 
2545   1599 00 00 00 00 
2545   159D 00 00 00 00 
2545   15A1 00 00 00 00 
2545   15A5 00 00 00 00 
2545   15A9 00 00 00 00 
2545   15AD 00 00 00 00 
2545   15B1 00 00 00 00 
2545   15B5 00 00 00 00 
2545   15B9 00 00 00 00 
2545   15BD 00 00 00 00 
2545   15C1 00 00 00 00 
2545   15C5 00 00 00 00 
2545   15C9 00 00 00 00 
2545   15CD 00 00 00 00 
2545   15D1 00 00 00 00 
2545   15D5 00 00 00 00 
2545   15D9 00 00 00 00 
2545   15DD 00 00 00 00 
2545   15E1 00 00 00 00 
2545   15E5 00 00 00 00 
2545   15E9 00 00 00 00 
2545   15ED 00 00 00 00 
2545   15F1 00 00 00 00 
2545   15F5 00 00 00 00 
2545   15F9 00 00 00 00 
2545   15FD 00 00 00 00 
2545   1601 00 00 00 00 
2545   1605 00 00 00 00 
2545   1609 00 00 00 00 
2545   160D 00 00 00 00 
2545   1611 00 00 00 00 
2545   1615 00 00 00 00 
2545   1619 00 00 00 00 
2545   161D 00 00 00 00 
2545   1621 00 00 00 00 
2545   1625 00 00 00 00 
2545   1629 00 00 00 00 
2545   162D 00 00 00 00 
2545   1631 00 00 00 00 
2545   1635 00 00 00 00 
2545   1639 00 00 00 00 
2545   163D 00 00 00 00 
2545   1641 00 00 00 00 
2545   1645 00 00 00 00 
2545   1649 00 00 00 00 
2545   164D 00 00 00 00 
2545   1651 00 00 00 00 
2545   1655 00 00 00 00 
2545   1659 00 00 00 00 
2545   165D 00 00 00 00 
2545   1661 00 00 00 00 
2545   1665 00 00 00 00 
2545   1669 00 00 00 00 
2545   166D 00 00 00 00 
2545   1671 00 00 00 00 
2545   1675 00 00 00 00 
2545   1679 00 00 00 00 
2545   167D 00 00 00 00 
2545   1681 00 00 00 00 
2545   1685 00 00 00 00 
2545   1689 00 00 00 00 
2545   168D 00 00 00 00 
2545   1691 00 00 00 00 
2545   1695 00 00 00 00 
2545   1699 00 00 00 00 
2545   169D 00 00 00 00 
2545   16A1 00 00 00 00 
2545   16A5 00 00 00 00 
2545   16A9 00 00 00 00 
2545   16AD 00 00 00 00 
2545   16B1 00 00 00 00 
2545   16B5 00 00 00 00 
2545   16B9 00 00 00 00 
2545   16BD 00 00 00 00 
2545   16C1 00 00 00 00 
2545   16C5 00 00 00 00 
2545   16C9 00 00 00 00 
2545   16CD 00 00 00 00 
2545   16D1 00 00 00 00 
2545   16D5 00 00 00 00 
2545   16D9 00 00 00 00 
2545   16DD 00 00 00 00 
2545   16E1 00 00 00 00 
2545   16E5 00 00 00 00 
2545   16E9 00 00 00 00 
2545   16ED 00 00 00 00 
2545   16F1 00 00 00 00 
2545   16F5 00 00 00 00 
2545   16F9 00 00 00 00 
2545   16FD 00 00 00 00 
2545   1701 00 00 00 00 
2545   1705 00 00 00 00 
2545   1709 00 00 00 00 
2545   170D 00 00 00 00 
2545   1711 00 00 00 00 
2545   1715 00 00 00 00 
2545   1719 00 00 00 00 
2545   171D 00 00 00 00 
2545   1721 00 00 00 00 
2545   1725 00 00 00 00 
2545   1729 00 00 00 00 
2545   172D 00 00 00 00 
2545   1731 00 00 00 00 
2545   1735 00 00 00 00 
2545   1739 00 00 00 00 
2545   173D 00 00 00 00 
2545   1741 00 00 00 00 
2545   1745 00 00 00 00 
2545   1749 00 00 00 00 
2545   174D 00 00 00 00 
2545   1751 00 00 00 00 
2545   1755 00 00 00 00 
2545   1759 00 00 00 00 
2545   175D 00 00 00 00 
2545   1761 00 00 00 00 
2545   1765 00 00 00 00 
2545   1769 00 00 00 00 
2545   176D 00 00 00 00 
2545   1771 00 00 00 00 
2545   1775 00 00 00 00 
2545   1779 00 00 00 00 
2545   177D 00 00 00 00 
2545   1781 00 00 00 00 
2545   1785 00 00 00 00 
2545   1789 00 00 00 00 
2545   178D 00 00 00 00 
2545   1791 00 00 00 00 
2545   1795 00 00 00 00 
2545   1799 00 00 00 00 
2545   179D 00 00 00 00 
2545   17A1 00 00 00 00 
2545   17A5 00 00 00 00 
2545   17A9 00 00 00 00 
2545   17AD 00 00 00 00 
2545   17B1 00 00 00 00 
2545   17B5 00 00 00 00 
2545   17B9 00 00 00 00 
2545   17BD 00 00 00 00 
2545   17C1 00 00 00 00 
2545   17C5 00 00 00 00 
2545   17C9 00 00 00 00 
2545   17CD 00 00 00 00 
2545   17D1 00 00 00 00 
2545   17D5 00 00 00 00 
2545   17D9 00 00 00 00 
2545   17DD 00 00 00 00 
2545   17E1 00 00 00 00 
2545   17E5 00 00 00 00 
2545   17E9 00 00 00 00 
2545   17ED 00 00 00 00 
2545   17F1 00 00 00 00 
2545   17F5 00 00 00 00 
2545   17F9 00 00 00 00 
2545   17FD 00 00 00 00 
2545   1801 00 00 00 00 
2545   1805 00 00 00 00 
2545   1809 00 00 00 00 
2545   180D 00 00 00 00 
2545   1811 00 00 00 00 
2545   1815 00 00 00 00 
2545   1819 00 00 00 00 
2545   181D 00 00 00 00 
2545   1821 00 00 00 00 
2545   1825 00 00 00 00 
2545   1829 00 00 00 00 
2545   182D 00 00 00 00 
2545   1831 00 00 00 00 
2545   1835 00 00 00 00 
2545   1839 00 00 00 00 
2545   183D 00 00 00 00 
2545   1841 00 00 00 00 
2545   1845 00 00 00 00 
2545   1849 00 00 00 00 
2545   184D 00 00 00 00 
2545   1851 00 00 00 00 
2545   1855 00 00 00 00 
2545   1859 00 00 00 00 
2545   185D 00 00 00 00 
2545   1861 00 00 00 00 
2545   1865 00 00 00 00 
2545   1869 00 00 00 00 
2545   186D 00 00 00 00 
2545   1871 00 00 00 00 
2545   1875 00 00 00 00 
2545   1879 00 00 00 00 
2545   187D 00 00 00 00 
2545   1881 00 00 00 00 
2545   1885 00 00 00 00 
2545   1889 00 00 00 00 
2545   188D 00 00 00 00 
2545   1891 00 00 00 00 
2545   1895 00 00 00 00 
2545   1899 00 00 00 00 
2545   189D 00 00 00 00 
2545   18A1 00 00 00 00 
2545   18A5 00 00 00 00 
2545   18A9 00 00 00 00 
2545   18AD 00 00 00 00 
2545   18B1 00 00 00 00 
2545   18B5 00 00 00 00 
2545   18B9 00 00 00 00 
2545   18BD 00 00 00 00 
2545   18C1 00 00 00 00 
2545   18C5 00 00 00 00 
2545   18C9 00 00 00 00 
2545   18CD 00 00 00 00 
2546   18D1 20 20 20 20 _currState_data: .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2546   18D5 20 20 20 20 
2546   18D9 20 20 20 20 
2546   18DD 20 20 20 
2547   18E0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2547   18E4 20 20 20 20 
2547   18E8 20 20 20 20 
2547   18EC 20 20 20 20 
2548   18F0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2548   18F4 20 20 20 20 
2548   18F8 20 20 20 20 
2548   18FC 20 20 20 20 
2549   1900 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2549   1904 20 20 20 20 
2549   1908 20 20 20 20 
2549   190C 20 20 20 20 
2550   1910 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2550   1914 20 20 20 20 
2550   1918 20 20 20 20 
2550   191C 20 20 20 20 
2551   1920 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2551   1924 20 20 20 20 
2551   1928 20 20 20 20 
2551   192C 20 20 20 20 
2552   1930 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2552   1934 20 20 20 20 
2552   1938 20 20 20 20 
2552   193C 20 20 20 20 
2553   1940 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2553   1944 20 20 20 20 
2553   1948 20 20 20 20 
2553   194C 20 20 20 20 
2554   1950 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2554   1954 20 20 20 20 
2554   1958 20 20 20 20 
2554   195C 20 20 20 20 
2555   1960 20 20 20 20 .db $20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2555   1964 40 20 20 20 
2555   1968 20 20 20 20 
2555   196C 20 20 20 20 
2556   1970 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2556   1974 20 20 20 20 
2556   1978 20 20 20 20 
2556   197C 20 20 20 20 
2557   1980 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,
2557   1984 20 20 20 20 
2557   1988 20 20 40 20 
2557   198C 40 20 20 20 
2558   1990 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2558   1994 20 20 20 20 
2558   1998 20 20 20 20 
2558   199C 20 20 20 20 
2559   19A0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,
2559   19A4 20 20 20 20 
2559   19A8 40 40 20 20 
2559   19AC 20 20 20 20 
2560   19B0 40 40 20 20 .db $40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,
2560   19B4 20 20 20 20 
2560   19B8 20 20 20 20 
2560   19BC 20 20 40 40 
2561   19C0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,
2561   19C4 20 20 20 20 
2561   19C8 20 20 20 20 
2561   19CC 20 20 20 40 
2562   19D0 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,
2562   19D4 20 20 20 20 
2562   19D8 40 40 20 20 
2562   19DC 20 20 20 20 
2563   19E0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,
2563   19E4 20 20 40 40 
2563   19E8 20 20 20 20 
2563   19EC 40 40 20 20 
2564   19F0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,
2564   19F4 20 20 40 20 
2564   19F8 20 20 20 20 
2564   19FC 40 20 20 20 
2565   1A00 40 40 20 20 .db $40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2565   1A04 20 20 20 20 
2565   1A08 20 20 20 20 
2565   1A0C 20 20 20 20 
2566   1A10 20 20 20 20 .db $20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,
2566   1A14 40 40 20 20 
2566   1A18 20 20 20 20 
2566   1A1C 20 20 40 20 
2567   1A20 20 20 40 20 .db $20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,
2567   1A24 40 40 20 20 
2567   1A28 20 20 40 20 
2567   1A2C 40 20 20 20 
2568   1A30 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2568   1A34 20 20 20 20 
2568   1A38 20 20 20 20 
2568   1A3C 20 20 20 20 
2569   1A40 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,
2569   1A44 20 20 40 20 
2569   1A48 20 20 20 20 
2569   1A4C 40 20 20 20 
2570   1A50 20 20 20 20 .db $20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2570   1A54 40 20 20 20 
2570   1A58 20 20 20 20 
2570   1A5C 20 20 20 20 
2571   1A60 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,
2571   1A64 20 20 20 20 
2571   1A68 20 20 20 20 
2571   1A6C 20 20 20 40 
2572   1A70 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2572   1A74 20 20 20 20 
2572   1A78 20 20 20 20 
2572   1A7C 20 20 20 20 
2573   1A80 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2573   1A84 20 20 20 20 
2573   1A88 20 20 20 20 
2573   1A8C 20 20 20 20 
2574   1A90 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,
2574   1A94 20 20 20 20 
2574   1A98 40 40 20 20 
2574   1A9C 20 20 20 20 
2575   1AA0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2575   1AA4 20 20 20 20 
2575   1AA8 20 20 20 20 
2575   1AAC 20 20 20 20 
2576   1AB0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2576   1AB4 20 20 20 20 
2576   1AB8 20 20 20 20 
2576   1ABC 20 20 20 20 
2577   1AC0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2577   1AC4 20 20 20 20 
2577   1AC8 20 20 20 20 
2577   1ACC 20 20 20 20 
2578   1AD0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2578   1AD4 20 20 20 20 
2578   1AD8 20 20 20 20 
2578   1ADC 20 20 20 20 
2579   1AE0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2579   1AE4 20 20 20 20 
2579   1AE8 20 20 20 20 
2579   1AEC 20 20 20 20 
2580   1AF0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2580   1AF4 20 20 20 20 
2580   1AF8 20 20 20 20 
2580   1AFC 20 20 20 20 
2581   1B00 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2581   1B04 20 20 20 20 
2581   1B08 20 20 20 20 
2581   1B0C 20 20 20 20 
2582   1B10 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2582   1B14 20 20 20 20 
2582   1B18 20 20 20 20 
2582   1B1C 20 20 20 20 
2583   1B20 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2583   1B24 20 20 20 20 
2583   1B28 20 20 20 20 
2583   1B2C 20 20 20 20 
2584   1B30 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2584   1B34 20 20 20 20 
2584   1B38 20 20 20 20 
2584   1B3C 20 20 20 20 
2585   1B40 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2585   1B44 20 20 20 20 
2585   1B48 20 20 20 20 
2585   1B4C 20 20 20 20 
2586   1B50 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2586   1B54 20 20 20 20 
2586   1B58 20 20 20 20 
2586   1B5C 20 20 20 20 
2587   1B60 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2587   1B64 20 20 20 20 
2587   1B68 20 20 20 20 
2587   1B6C 20 20 20 20 
2588   1B70 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2588   1B74 20 20 20 20 
2588   1B78 20 20 20 20 
2588   1B7C 20 20 20 20 
2589   1B80 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2589   1B84 20 20 20 20 
2589   1B88 20 20 20 20 
2589   1B8C 20 20 20 20 
2590   1B90 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2590   1B94 20 20 20 20 
2590   1B98 20 20 20 20 
2590   1B9C 20 20 20 20 
2591   1BA0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2591   1BA4 20 20 20 20 
2591   1BA8 20 20 20 20 
2591   1BAC 20 20 20 20 
2592   1BB0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2592   1BB4 20 20 20 20 
2592   1BB8 20 20 20 20 
2592   1BBC 20 20 20 20 
2593   1BC0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2593   1BC4 20 20 20 20 
2593   1BC8 20 20 20 20 
2593   1BCC 20 20 20 20 
2594   1BD0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2594   1BD4 20 20 20 20 
2594   1BD8 20 20 20 20 
2594   1BDC 20 20 20 20 
2595   1BE0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2595   1BE4 20 20 20 20 
2595   1BE8 20 20 20 20 
2595   1BEC 20 20 20 20 
2596   1BF0 20          .db $20,
2597   1BF1             
2598   1BF1 00 00 00 00 .fill 400, 0
2598   1BF5 00 00 00 00 
2598   1BF9 00 00 00 00 
2598   1BFD 00 00 00 00 
2598   1C01 00 00 00 00 
2598   1C05 00 00 00 00 
2598   1C09 00 00 00 00 
2598   1C0D 00 00 00 00 
2598   1C11 00 00 00 00 
2598   1C15 00 00 00 00 
2598   1C19 00 00 00 00 
2598   1C1D 00 00 00 00 
2598   1C21 00 00 00 00 
2598   1C25 00 00 00 00 
2598   1C29 00 00 00 00 
2598   1C2D 00 00 00 00 
2598   1C31 00 00 00 00 
2598   1C35 00 00 00 00 
2598   1C39 00 00 00 00 
2598   1C3D 00 00 00 00 
2598   1C41 00 00 00 00 
2598   1C45 00 00 00 00 
2598   1C49 00 00 00 00 
2598   1C4D 00 00 00 00 
2598   1C51 00 00 00 00 
2598   1C55 00 00 00 00 
2598   1C59 00 00 00 00 
2598   1C5D 00 00 00 00 
2598   1C61 00 00 00 00 
2598   1C65 00 00 00 00 
2598   1C69 00 00 00 00 
2598   1C6D 00 00 00 00 
2598   1C71 00 00 00 00 
2598   1C75 00 00 00 00 
2598   1C79 00 00 00 00 
2598   1C7D 00 00 00 00 
2598   1C81 00 00 00 00 
2598   1C85 00 00 00 00 
2598   1C89 00 00 00 00 
2598   1C8D 00 00 00 00 
2598   1C91 00 00 00 00 
2598   1C95 00 00 00 00 
2598   1C99 00 00 00 00 
2598   1C9D 00 00 00 00 
2598   1CA1 00 00 00 00 
2598   1CA5 00 00 00 00 
2598   1CA9 00 00 00 00 
2598   1CAD 00 00 00 00 
2598   1CB1 00 00 00 00 
2598   1CB5 00 00 00 00 
2598   1CB9 00 00 00 00 
2598   1CBD 00 00 00 00 
2598   1CC1 00 00 00 00 
2598   1CC5 00 00 00 00 
2598   1CC9 00 00 00 00 
2598   1CCD 00 00 00 00 
2598   1CD1 00 00 00 00 
2598   1CD5 00 00 00 00 
2598   1CD9 00 00 00 00 
2598   1CDD 00 00 00 00 
2598   1CE1 00 00 00 00 
2598   1CE5 00 00 00 00 
2598   1CE9 00 00 00 00 
2598   1CED 00 00 00 00 
2598   1CF1 00 00 00 00 
2598   1CF5 00 00 00 00 
2598   1CF9 00 00 00 00 
2598   1CFD 00 00 00 00 
2598   1D01 00 00 00 00 
2598   1D05 00 00 00 00 
2598   1D09 00 00 00 00 
2598   1D0D 00 00 00 00 
2598   1D11 00 00 00 00 
2598   1D15 00 00 00 00 
2598   1D19 00 00 00 00 
2598   1D1D 00 00 00 00 
2598   1D21 00 00 00 00 
2598   1D25 00 00 00 00 
2598   1D29 00 00 00 00 
2598   1D2D 00 00 00 00 
2598   1D31 00 00 00 00 
2598   1D35 00 00 00 00 
2598   1D39 00 00 00 00 
2598   1D3D 00 00 00 00 
2598   1D41 00 00 00 00 
2598   1D45 00 00 00 00 
2598   1D49 00 00 00 00 
2598   1D4D 00 00 00 00 
2598   1D51 00 00 00 00 
2598   1D55 00 00 00 00 
2598   1D59 00 00 00 00 
2598   1D5D 00 00 00 00 
2598   1D61 00 00 00 00 
2598   1D65 00 00 00 00 
2598   1D69 00 00 00 00 
2598   1D6D 00 00 00 00 
2598   1D71 00 00 00 00 
2598   1D75 00 00 00 00 
2598   1D79 00 00 00 00 
2598   1D7D 00 00 00 00 
2599   1D81 0A 0D 50 72 _s0: .db "\n\rPress CTRL+C to quit.\n\r", 0
2599   1D85 65 73 73 20 
2599   1D89 43 54 52 4C 
2599   1D8D 2B 43 20 74 
2599   1D91 6F 20 71 75 
2599   1D95 69 74 2E 0A 
2599   1D99 0D 00 
2600   1D9B 40 20 00    _s1: .db "@ ", 0
2601   1D9E 2E 20 00    _s2: .db ". ", 0
2602   1DA1 0A 0D 00    _s3: .db "\n\r", 0
2603   1DA4 55 6E 65 78 _s4: .db "Unexpected format in printf.", 0
2603   1DA8 70 65 63 74 
2603   1DAC 65 64 20 66 
2603   1DB0 6F 72 6D 61 
2603   1DB4 74 20 69 6E 
2603   1DB8 20 70 72 69 
2603   1DBC 6E 74 66 2E 
2603   1DC0 00 
2604   1DC1 45 72 72 6F _s5: .db "Error: Unknown argument type.\n", 0
2604   1DC5 72 3A 20 55 
2604   1DC9 6E 6B 6E 6F 
2604   1DCD 77 6E 20 61 
2604   1DD1 72 67 75 6D 
2604   1DD5 65 6E 74 20 
2604   1DD9 74 79 70 65 
2604   1DDD 2E 0A 00 
2605   1DE0             
2606   1DE0 E2 1D       _heap_top: .dw _heap
2607   1DE2 00          _heap: .db 0
2608   1DE3             ; --- END DATA SEGMENT
2609   1DE3             
2610   1DE3             .end
tasm: Number of errors = 0
