0001   0000             ; --- FILENAME: programs/life.c
0002   0000             ; --- DATE:     26-07-2025 at 18:48:47
0003   0000             .include "lib/asm/kernel.exp"
0001+  0000             fdc_al_restore   .EQU  $0000
0002+  0000             fdc_al_step      .EQU  $0001
0003+  0000             fdc_al_step_in   .EQU  $0002
0004+  0000             fdc_al_step_out  .EQU  $0003
0005+  0000             fdc_al_seek      .EQU  $0004
0006+  0000             fdc_al_format_128 .EQU  $0005
0007+  0000             fdc_al_formatdisk_128 .EQU  $0006
0008+  0000             fdc_al_format_512 .EQU  $0007
0009+  0000             fdc_al_formatdisk_512 .EQU  $0008
0010+  0000             fdc_al_read_addr .EQU  $0009
0011+  0000             fdc_al_read_track .EQU  $000a
0012+  0000             fdc_al_read_sect .EQU  $000b
0013+  0000             fdc_al_write_sect .EQU  $000c
0014+  0000             fdc_al_force_int .EQU  $000d
0015+  0000             fdc_al_status0   .EQU  $000e
0016+  0000             fdc_al_status1   .EQU  $000f
0017+  0000             noname._til311_display .EQU  $ffb0
0018+  0000             noname._fdc_config .EQU  $ffc0
0019+  0000             noname._fdc_status_0 .EQU  $ffc1
0020+  0000             noname._fdc_stat_cmd .EQU  $ffc8
0021+  0000             sys_break        .EQU  $0000
0022+  0000             sys_rtc          .EQU  $0001
0023+  0000             sys_ide          .EQU  $0002
0024+  0000             sys_io           .EQU  $0003
0025+  0000             sys_filesystem   .EQU  $0004
0026+  0000             sys_create_proc  .EQU  $0005
0027+  0000             sys_list_proc    .EQU  $0006
0028+  0000             sys_datetime     .EQU  $0007
0029+  0000             sys_reboot       .EQU  $0008
0030+  0000             sys_pause_proc   .EQU  $0009
0031+  0000             sys_resume_proc  .EQU  $000a
0032+  0000             sys_terminate_proc .EQU  $000b
0033+  0000             sys_system       .EQU  $000c
0034+  0000             sys_fdc          .EQU  $000d
0035+  0000             text_org         .EQU  $0400
0004   0000             .include "lib/asm/bios.exp"
0001+  0000             bios_reset_vector .equ  $01c0
0002+  0000             ide_buffer       .equ  $8204
0003+  0000             boot_origin      .equ  $8004
0004+  0000             bios_uart        .equ  $0002
0005+  0000             bios_ide         .equ  $0003
0005   0000             
0006   0000             ; --- BEGIN TEXT SEGMENT
0007   0400             .org text_org
0008   0400             main:
0009   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0010   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0011   0408             ; int i, j; 
0012   0408 52 02 00      sub sp, 2
0013   040B 52 02 00      sub sp, 2
0014   040E             ; int n; 
0015   040E 52 02 00      sub sp, 2
0016   0411             ; char *p = 0; 
0017   0411 52 02 00      sub sp, 2
0018   0414             ; --- START LOCAL VAR INITIALIZATION
0019   0414 FA F9 FF      lea d, [bp + -7] ; $p
0020   0417 DA            push d
0021   0418 FD 2E 00 00   mov32 cb, $00000000
0021   041C 00 00 
0022   041E E7            pop d
0023   041F FD 43         mov [d], b
0024   0421             ; --- END LOCAL VAR INITIALIZATION
0025   0421             ; for(i = 0; i <  30      ; i++){ 
0026   0421             _for1_init:
0027   0421 FA FF FF      lea d, [bp + -1] ; $i
0028   0424 DA            push d
0029   0425 FD 2E 00 00   mov32 cb, $00000000
0029   0429 00 00 
0030   042B E7            pop d
0031   042C FD 43         mov [d], b
0032   042E             _for1_cond:
0033   042E FA FF FF      lea d, [bp + -1] ; $i
0034   0431 2A            mov b, [d]
0035   0432 38 00 00      mov c, 0
0036   0435             ; --- START RELATIONAL
0037   0435 D7            push a
0038   0436 11            mov a, b
0039   0437 FD 2E 1E 00   mov32 cb, $0000001e
0039   043B 00 00 
0040   043D B0            cmp a, b
0041   043E FD 73         slt ; < (signed)
0042   0440 E4            pop a
0043   0441             ; --- END RELATIONAL
0044   0441 C0 00 00      cmp b, 0
0045   0444 C6 2A 05      je _for1_exit
0046   0447             _for1_block:
0047   0447             ; for(j = 0; j <   40     ; j++){ 
0048   0447             _for2_init:
0049   0447 FA FD FF      lea d, [bp + -3] ; $j
0050   044A DA            push d
0051   044B FD 2E 00 00   mov32 cb, $00000000
0051   044F 00 00 
0052   0451 E7            pop d
0053   0452 FD 43         mov [d], b
0054   0454             _for2_cond:
0055   0454 FA FD FF      lea d, [bp + -3] ; $j
0056   0457 2A            mov b, [d]
0057   0458 38 00 00      mov c, 0
0058   045B             ; --- START RELATIONAL
0059   045B D7            push a
0060   045C 11            mov a, b
0061   045D FD 2E 28 00   mov32 cb, $00000028
0061   0461 00 00 
0062   0463 B0            cmp a, b
0063   0464 FD 73         slt ; < (signed)
0064   0466 E4            pop a
0065   0467             ; --- END RELATIONAL
0066   0467 C0 00 00      cmp b, 0
0067   046A C6 17 05      je _for2_exit
0068   046D             _for2_block:
0069   046D             ; if(*p % 2 == 0) currState[i][j] = '@'; 
0070   046D             _if3_cond:
0071   046D FA F9 FF      lea d, [bp + -7] ; $p
0072   0470 2A            mov b, [d]
0073   0471 38 00 00      mov c, 0
0074   0474 74            mov d, b
0075   0475 32            mov bl, [d]
0076   0476 A7 00         mov bh, 0
0077   0478 38 00 00      mov c, 0
0078   047B             ; --- START FACTORS
0079   047B D7            push a
0080   047C FD D8         push g
0081   047E 11            mov a, b
0082   047F FD 7A         mov g, c
0083   0481 FD 2E 02 00   mov32 cb, $00000002
0083   0485 00 00 
0084   0487 FD D8         push g ; save 'g' as the div instruction uses it
0085   0489 AE            div a, b ; %, a: quotient, b: remainder
0086   048A 11            mov a, b
0087   048B FD F1         pop g
0088   048D FD 38         mov c, g
0089   048F 27            mov b, a
0090   0490 FD F1         pop g
0091   0492 E4            pop a
0092   0493             ; --- END FACTORS
0093   0493             ; --- START RELATIONAL
0094   0493 D7            push a
0095   0494 11            mov a, b
0096   0495 FD 2E 00 00   mov32 cb, $00000000
0096   0499 00 00 
0097   049B B0            cmp a, b
0098   049C FD 71         seq ; ==
0099   049E E4            pop a
0100   049F             ; --- END RELATIONAL
0101   049F C0 00 00      cmp b, 0
0102   04A2 C6 CE 04      je _if3_else
0103   04A5             _if3_TRUE:
0104   04A5             ; currState[i][j] = '@'; 
0105   04A5 3B 60 19      mov d, _currState_data ; $currState
0106   04A8 D7            push a
0107   04A9 DA            push d
0108   04AA FA FF FF      lea d, [bp + -1] ; $i
0109   04AD 2A            mov b, [d]
0110   04AE 38 00 00      mov c, 0
0111   04B1 E7            pop d
0112   04B2 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0113   04B6 DA            push d
0114   04B7 FA FD FF      lea d, [bp + -3] ; $j
0115   04BA 2A            mov b, [d]
0116   04BB 38 00 00      mov c, 0
0117   04BE E7            pop d
0118   04BF 5A            add d, b
0119   04C0 E4            pop a
0120   04C1 DA            push d
0121   04C2 FD 2E 40 00   mov32 cb, $00000040
0121   04C6 00 00 
0122   04C8 E7            pop d
0123   04C9 FD 3E         mov [d], bl
0124   04CB 0A F4 04      jmp _if3_exit
0125   04CE             _if3_else:
0126   04CE             ; currState[i][j] = ' '; 
0127   04CE 3B 60 19      mov d, _currState_data ; $currState
0128   04D1 D7            push a
0129   04D2 DA            push d
0130   04D3 FA FF FF      lea d, [bp + -1] ; $i
0131   04D6 2A            mov b, [d]
0132   04D7 38 00 00      mov c, 0
0133   04DA E7            pop d
0134   04DB FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0135   04DF DA            push d
0136   04E0 FA FD FF      lea d, [bp + -3] ; $j
0137   04E3 2A            mov b, [d]
0138   04E4 38 00 00      mov c, 0
0139   04E7 E7            pop d
0140   04E8 5A            add d, b
0141   04E9 E4            pop a
0142   04EA DA            push d
0143   04EB FD 2E 20 00   mov32 cb, $00000020
0143   04EF 00 00 
0144   04F1 E7            pop d
0145   04F2 FD 3E         mov [d], bl
0146   04F4             _if3_exit:
0147   04F4             ; p++;		 
0148   04F4 FA F9 FF      lea d, [bp + -7] ; $p
0149   04F7 2A            mov b, [d]
0150   04F8 38 00 00      mov c, 0
0151   04FB FD 77         inc b
0152   04FD FA F9 FF      lea d, [bp + -7] ; $p
0153   0500 FD 43         mov [d], b
0154   0502 FD 7D         dec b
0155   0504             _for2_update:
0156   0504 FA FD FF      lea d, [bp + -3] ; $j
0157   0507 2A            mov b, [d]
0158   0508 38 00 00      mov c, 0
0159   050B 11            mov a, b
0160   050C FD 77         inc b
0161   050E FA FD FF      lea d, [bp + -3] ; $j
0162   0511 FD 43         mov [d], b
0163   0513 27            mov b, a
0164   0514 0A 54 04      jmp _for2_cond
0165   0517             _for2_exit:
0166   0517             _for1_update:
0167   0517 FA FF FF      lea d, [bp + -1] ; $i
0168   051A 2A            mov b, [d]
0169   051B 38 00 00      mov c, 0
0170   051E 11            mov a, b
0171   051F FD 77         inc b
0172   0521 FA FF FF      lea d, [bp + -1] ; $i
0173   0524 FD 43         mov [d], b
0174   0526 27            mov b, a
0175   0527 0A 2E 04      jmp _for1_cond
0176   052A             _for1_exit:
0177   052A             ; for(i = 0; i <  30      ; i++){ 
0178   052A             _for6_init:
0179   052A FA FF FF      lea d, [bp + -1] ; $i
0180   052D DA            push d
0181   052E FD 2E 00 00   mov32 cb, $00000000
0181   0532 00 00 
0182   0534 E7            pop d
0183   0535 FD 43         mov [d], b
0184   0537             _for6_cond:
0185   0537 FA FF FF      lea d, [bp + -1] ; $i
0186   053A 2A            mov b, [d]
0187   053B 38 00 00      mov c, 0
0188   053E             ; --- START RELATIONAL
0189   053E D7            push a
0190   053F 11            mov a, b
0191   0540 FD 2E 1E 00   mov32 cb, $0000001e
0191   0544 00 00 
0192   0546 B0            cmp a, b
0193   0547 FD 73         slt ; < (signed)
0194   0549 E4            pop a
0195   054A             ; --- END RELATIONAL
0196   054A C0 00 00      cmp b, 0
0197   054D C6 DE 05      je _for6_exit
0198   0550             _for6_block:
0199   0550             ; for(j = 0; j <   40     ; j++){ 
0200   0550             _for7_init:
0201   0550 FA FD FF      lea d, [bp + -3] ; $j
0202   0553 DA            push d
0203   0554 FD 2E 00 00   mov32 cb, $00000000
0203   0558 00 00 
0204   055A E7            pop d
0205   055B FD 43         mov [d], b
0206   055D             _for7_cond:
0207   055D FA FD FF      lea d, [bp + -3] ; $j
0208   0560 2A            mov b, [d]
0209   0561 38 00 00      mov c, 0
0210   0564             ; --- START RELATIONAL
0211   0564 D7            push a
0212   0565 11            mov a, b
0213   0566 FD 2E 28 00   mov32 cb, $00000028
0213   056A 00 00 
0214   056C B0            cmp a, b
0215   056D FD 73         slt ; < (signed)
0216   056F E4            pop a
0217   0570             ; --- END RELATIONAL
0218   0570 C0 00 00      cmp b, 0
0219   0573 C6 CB 05      je _for7_exit
0220   0576             _for7_block:
0221   0576             ; nextState[i][j] = currState[i][j]; 
0222   0576 3B B0 14      mov d, _nextState_data ; $nextState
0223   0579 D7            push a
0224   057A DA            push d
0225   057B FA FF FF      lea d, [bp + -1] ; $i
0226   057E 2A            mov b, [d]
0227   057F 38 00 00      mov c, 0
0228   0582 E7            pop d
0229   0583 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0230   0587 DA            push d
0231   0588 FA FD FF      lea d, [bp + -3] ; $j
0232   058B 2A            mov b, [d]
0233   058C 38 00 00      mov c, 0
0234   058F E7            pop d
0235   0590 5A            add d, b
0236   0591 E4            pop a
0237   0592 DA            push d
0238   0593 3B 60 19      mov d, _currState_data ; $currState
0239   0596 D7            push a
0240   0597 DA            push d
0241   0598 FA FF FF      lea d, [bp + -1] ; $i
0242   059B 2A            mov b, [d]
0243   059C 38 00 00      mov c, 0
0244   059F E7            pop d
0245   05A0 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0246   05A4 DA            push d
0247   05A5 FA FD FF      lea d, [bp + -3] ; $j
0248   05A8 2A            mov b, [d]
0249   05A9 38 00 00      mov c, 0
0250   05AC E7            pop d
0251   05AD 5A            add d, b
0252   05AE E4            pop a
0253   05AF 32            mov bl, [d]
0254   05B0 A7 00         mov bh, 0
0255   05B2 38 00 00      mov c, 0
0256   05B5 E7            pop d
0257   05B6 FD 3E         mov [d], bl
0258   05B8             _for7_update:
0259   05B8 FA FD FF      lea d, [bp + -3] ; $j
0260   05BB 2A            mov b, [d]
0261   05BC 38 00 00      mov c, 0
0262   05BF 11            mov a, b
0263   05C0 FD 77         inc b
0264   05C2 FA FD FF      lea d, [bp + -3] ; $j
0265   05C5 FD 43         mov [d], b
0266   05C7 27            mov b, a
0267   05C8 0A 5D 05      jmp _for7_cond
0268   05CB             _for7_exit:
0269   05CB             _for6_update:
0270   05CB FA FF FF      lea d, [bp + -1] ; $i
0271   05CE 2A            mov b, [d]
0272   05CF 38 00 00      mov c, 0
0273   05D2 11            mov a, b
0274   05D3 FD 77         inc b
0275   05D5 FA FF FF      lea d, [bp + -1] ; $i
0276   05D8 FD 43         mov [d], b
0277   05DA 27            mov b, a
0278   05DB 0A 37 05      jmp _for6_cond
0279   05DE             _for6_exit:
0280   05DE             ; for(;;){ 
0281   05DE             _for8_init:
0282   05DE             _for8_cond:
0283   05DE             _for8_block:
0284   05DE             ; for(i = 1; i <  30      +-1; i++){ 
0285   05DE             _for9_init:
0286   05DE FA FF FF      lea d, [bp + -1] ; $i
0287   05E1 DA            push d
0288   05E2 FD 2E 01 00   mov32 cb, $00000001
0288   05E6 00 00 
0289   05E8 E7            pop d
0290   05E9 FD 43         mov [d], b
0291   05EB             _for9_cond:
0292   05EB FA FF FF      lea d, [bp + -1] ; $i
0293   05EE 2A            mov b, [d]
0294   05EF 38 00 00      mov c, 0
0295   05F2             ; --- START RELATIONAL
0296   05F2 D7            push a
0297   05F3 11            mov a, b
0298   05F4 FD 2E 1E 00   mov32 cb, $0000001e
0298   05F8 00 00 
0299   05FA             ; --- START TERMS
0300   05FA D7            push a
0301   05FB 11            mov a, b
0302   05FC FD 2E FF FF   mov32 cb, $ffffffff
0302   0600 FF FF 
0303   0602 56            add b, a
0304   0603 E4            pop a
0305   0604             ; --- END TERMS
0306   0604 B0            cmp a, b
0307   0605 FD 73         slt ; < (signed)
0308   0607 E4            pop a
0309   0608             ; --- END RELATIONAL
0310   0608 C0 00 00      cmp b, 0
0311   060B C6 BD 09      je _for9_exit
0312   060E             _for9_block:
0313   060E             ; for(j = 1; j <   40     +-1; j++){ 
0314   060E             _for10_init:
0315   060E FA FD FF      lea d, [bp + -3] ; $j
0316   0611 DA            push d
0317   0612 FD 2E 01 00   mov32 cb, $00000001
0317   0616 00 00 
0318   0618 E7            pop d
0319   0619 FD 43         mov [d], b
0320   061B             _for10_cond:
0321   061B FA FD FF      lea d, [bp + -3] ; $j
0322   061E 2A            mov b, [d]
0323   061F 38 00 00      mov c, 0
0324   0622             ; --- START RELATIONAL
0325   0622 D7            push a
0326   0623 11            mov a, b
0327   0624 FD 2E 28 00   mov32 cb, $00000028
0327   0628 00 00 
0328   062A             ; --- START TERMS
0329   062A D7            push a
0330   062B 11            mov a, b
0331   062C FD 2E FF FF   mov32 cb, $ffffffff
0331   0630 FF FF 
0332   0632 56            add b, a
0333   0633 E4            pop a
0334   0634             ; --- END TERMS
0335   0634 B0            cmp a, b
0336   0635 FD 73         slt ; < (signed)
0337   0637 E4            pop a
0338   0638             ; --- END RELATIONAL
0339   0638 C0 00 00      cmp b, 0
0340   063B C6 AA 09      je _for10_exit
0341   063E             _for10_block:
0342   063E             ; n = 0; 
0343   063E FA FB FF      lea d, [bp + -5] ; $n
0344   0641 DA            push d
0345   0642 FD 2E 00 00   mov32 cb, $00000000
0345   0646 00 00 
0346   0648 E7            pop d
0347   0649 FD 43         mov [d], b
0348   064B             ; if(currState[i+-1][j] == '@')			n++; 
0349   064B             _if11_cond:
0350   064B 3B 60 19      mov d, _currState_data ; $currState
0351   064E D7            push a
0352   064F DA            push d
0353   0650 FA FF FF      lea d, [bp + -1] ; $i
0354   0653 2A            mov b, [d]
0355   0654 38 00 00      mov c, 0
0356   0657             ; --- START TERMS
0357   0657 D7            push a
0358   0658 11            mov a, b
0359   0659 FD 2E FF FF   mov32 cb, $ffffffff
0359   065D FF FF 
0360   065F 56            add b, a
0361   0660 E4            pop a
0362   0661             ; --- END TERMS
0363   0661 E7            pop d
0364   0662 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0365   0666 DA            push d
0366   0667 FA FD FF      lea d, [bp + -3] ; $j
0367   066A 2A            mov b, [d]
0368   066B 38 00 00      mov c, 0
0369   066E E7            pop d
0370   066F 5A            add d, b
0371   0670 E4            pop a
0372   0671 32            mov bl, [d]
0373   0672 A7 00         mov bh, 0
0374   0674 38 00 00      mov c, 0
0375   0677             ; --- START RELATIONAL
0376   0677 D7            push a
0377   0678 11            mov a, b
0378   0679 FD 2E 40 00   mov32 cb, $00000040
0378   067D 00 00 
0379   067F B0            cmp a, b
0380   0680 FD 71         seq ; ==
0381   0682 E4            pop a
0382   0683             ; --- END RELATIONAL
0383   0683 C0 00 00      cmp b, 0
0384   0686 C6 9C 06      je _if11_exit
0385   0689             _if11_TRUE:
0386   0689             ; n++; 
0387   0689 FA FB FF      lea d, [bp + -5] ; $n
0388   068C 2A            mov b, [d]
0389   068D 38 00 00      mov c, 0
0390   0690 11            mov a, b
0391   0691 FD 77         inc b
0392   0693 FA FB FF      lea d, [bp + -5] ; $n
0393   0696 FD 43         mov [d], b
0394   0698 27            mov b, a
0395   0699 0A 9C 06      jmp _if11_exit
0396   069C             _if11_exit:
0397   069C             ; if(currState[i+-1][j+-1] == '@') 	n++; 
0398   069C             _if12_cond:
0399   069C 3B 60 19      mov d, _currState_data ; $currState
0400   069F D7            push a
0401   06A0 DA            push d
0402   06A1 FA FF FF      lea d, [bp + -1] ; $i
0403   06A4 2A            mov b, [d]
0404   06A5 38 00 00      mov c, 0
0405   06A8             ; --- START TERMS
0406   06A8 D7            push a
0407   06A9 11            mov a, b
0408   06AA FD 2E FF FF   mov32 cb, $ffffffff
0408   06AE FF FF 
0409   06B0 56            add b, a
0410   06B1 E4            pop a
0411   06B2             ; --- END TERMS
0412   06B2 E7            pop d
0413   06B3 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0414   06B7 DA            push d
0415   06B8 FA FD FF      lea d, [bp + -3] ; $j
0416   06BB 2A            mov b, [d]
0417   06BC 38 00 00      mov c, 0
0418   06BF             ; --- START TERMS
0419   06BF D7            push a
0420   06C0 11            mov a, b
0421   06C1 FD 2E FF FF   mov32 cb, $ffffffff
0421   06C5 FF FF 
0422   06C7 56            add b, a
0423   06C8 E4            pop a
0424   06C9             ; --- END TERMS
0425   06C9 E7            pop d
0426   06CA 5A            add d, b
0427   06CB E4            pop a
0428   06CC 32            mov bl, [d]
0429   06CD A7 00         mov bh, 0
0430   06CF 38 00 00      mov c, 0
0431   06D2             ; --- START RELATIONAL
0432   06D2 D7            push a
0433   06D3 11            mov a, b
0434   06D4 FD 2E 40 00   mov32 cb, $00000040
0434   06D8 00 00 
0435   06DA B0            cmp a, b
0436   06DB FD 71         seq ; ==
0437   06DD E4            pop a
0438   06DE             ; --- END RELATIONAL
0439   06DE C0 00 00      cmp b, 0
0440   06E1 C6 F7 06      je _if12_exit
0441   06E4             _if12_TRUE:
0442   06E4             ; n++; 
0443   06E4 FA FB FF      lea d, [bp + -5] ; $n
0444   06E7 2A            mov b, [d]
0445   06E8 38 00 00      mov c, 0
0446   06EB 11            mov a, b
0447   06EC FD 77         inc b
0448   06EE FA FB FF      lea d, [bp + -5] ; $n
0449   06F1 FD 43         mov [d], b
0450   06F3 27            mov b, a
0451   06F4 0A F7 06      jmp _if12_exit
0452   06F7             _if12_exit:
0453   06F7             ; if(currState[i+-1][j+1] == '@') 	n++; 
0454   06F7             _if13_cond:
0455   06F7 3B 60 19      mov d, _currState_data ; $currState
0456   06FA D7            push a
0457   06FB DA            push d
0458   06FC FA FF FF      lea d, [bp + -1] ; $i
0459   06FF 2A            mov b, [d]
0460   0700 38 00 00      mov c, 0
0461   0703             ; --- START TERMS
0462   0703 D7            push a
0463   0704 11            mov a, b
0464   0705 FD 2E FF FF   mov32 cb, $ffffffff
0464   0709 FF FF 
0465   070B 56            add b, a
0466   070C E4            pop a
0467   070D             ; --- END TERMS
0468   070D E7            pop d
0469   070E FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0470   0712 DA            push d
0471   0713 FA FD FF      lea d, [bp + -3] ; $j
0472   0716 2A            mov b, [d]
0473   0717 38 00 00      mov c, 0
0474   071A             ; --- START TERMS
0475   071A D7            push a
0476   071B 11            mov a, b
0477   071C FD 2E 01 00   mov32 cb, $00000001
0477   0720 00 00 
0478   0722 56            add b, a
0479   0723 E4            pop a
0480   0724             ; --- END TERMS
0481   0724 E7            pop d
0482   0725 5A            add d, b
0483   0726 E4            pop a
0484   0727 32            mov bl, [d]
0485   0728 A7 00         mov bh, 0
0486   072A 38 00 00      mov c, 0
0487   072D             ; --- START RELATIONAL
0488   072D D7            push a
0489   072E 11            mov a, b
0490   072F FD 2E 40 00   mov32 cb, $00000040
0490   0733 00 00 
0491   0735 B0            cmp a, b
0492   0736 FD 71         seq ; ==
0493   0738 E4            pop a
0494   0739             ; --- END RELATIONAL
0495   0739 C0 00 00      cmp b, 0
0496   073C C6 52 07      je _if13_exit
0497   073F             _if13_TRUE:
0498   073F             ; n++; 
0499   073F FA FB FF      lea d, [bp + -5] ; $n
0500   0742 2A            mov b, [d]
0501   0743 38 00 00      mov c, 0
0502   0746 11            mov a, b
0503   0747 FD 77         inc b
0504   0749 FA FB FF      lea d, [bp + -5] ; $n
0505   074C FD 43         mov [d], b
0506   074E 27            mov b, a
0507   074F 0A 52 07      jmp _if13_exit
0508   0752             _if13_exit:
0509   0752             ; if(currState[i][j+-1] == '@') 		n++; 
0510   0752             _if14_cond:
0511   0752 3B 60 19      mov d, _currState_data ; $currState
0512   0755 D7            push a
0513   0756 DA            push d
0514   0757 FA FF FF      lea d, [bp + -1] ; $i
0515   075A 2A            mov b, [d]
0516   075B 38 00 00      mov c, 0
0517   075E E7            pop d
0518   075F FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0519   0763 DA            push d
0520   0764 FA FD FF      lea d, [bp + -3] ; $j
0521   0767 2A            mov b, [d]
0522   0768 38 00 00      mov c, 0
0523   076B             ; --- START TERMS
0524   076B D7            push a
0525   076C 11            mov a, b
0526   076D FD 2E FF FF   mov32 cb, $ffffffff
0526   0771 FF FF 
0527   0773 56            add b, a
0528   0774 E4            pop a
0529   0775             ; --- END TERMS
0530   0775 E7            pop d
0531   0776 5A            add d, b
0532   0777 E4            pop a
0533   0778 32            mov bl, [d]
0534   0779 A7 00         mov bh, 0
0535   077B 38 00 00      mov c, 0
0536   077E             ; --- START RELATIONAL
0537   077E D7            push a
0538   077F 11            mov a, b
0539   0780 FD 2E 40 00   mov32 cb, $00000040
0539   0784 00 00 
0540   0786 B0            cmp a, b
0541   0787 FD 71         seq ; ==
0542   0789 E4            pop a
0543   078A             ; --- END RELATIONAL
0544   078A C0 00 00      cmp b, 0
0545   078D C6 A3 07      je _if14_exit
0546   0790             _if14_TRUE:
0547   0790             ; n++; 
0548   0790 FA FB FF      lea d, [bp + -5] ; $n
0549   0793 2A            mov b, [d]
0550   0794 38 00 00      mov c, 0
0551   0797 11            mov a, b
0552   0798 FD 77         inc b
0553   079A FA FB FF      lea d, [bp + -5] ; $n
0554   079D FD 43         mov [d], b
0555   079F 27            mov b, a
0556   07A0 0A A3 07      jmp _if14_exit
0557   07A3             _if14_exit:
0558   07A3             ; if(currState[i][j+1] == '@') 			n++; 
0559   07A3             _if15_cond:
0560   07A3 3B 60 19      mov d, _currState_data ; $currState
0561   07A6 D7            push a
0562   07A7 DA            push d
0563   07A8 FA FF FF      lea d, [bp + -1] ; $i
0564   07AB 2A            mov b, [d]
0565   07AC 38 00 00      mov c, 0
0566   07AF E7            pop d
0567   07B0 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0568   07B4 DA            push d
0569   07B5 FA FD FF      lea d, [bp + -3] ; $j
0570   07B8 2A            mov b, [d]
0571   07B9 38 00 00      mov c, 0
0572   07BC             ; --- START TERMS
0573   07BC D7            push a
0574   07BD 11            mov a, b
0575   07BE FD 2E 01 00   mov32 cb, $00000001
0575   07C2 00 00 
0576   07C4 56            add b, a
0577   07C5 E4            pop a
0578   07C6             ; --- END TERMS
0579   07C6 E7            pop d
0580   07C7 5A            add d, b
0581   07C8 E4            pop a
0582   07C9 32            mov bl, [d]
0583   07CA A7 00         mov bh, 0
0584   07CC 38 00 00      mov c, 0
0585   07CF             ; --- START RELATIONAL
0586   07CF D7            push a
0587   07D0 11            mov a, b
0588   07D1 FD 2E 40 00   mov32 cb, $00000040
0588   07D5 00 00 
0589   07D7 B0            cmp a, b
0590   07D8 FD 71         seq ; ==
0591   07DA E4            pop a
0592   07DB             ; --- END RELATIONAL
0593   07DB C0 00 00      cmp b, 0
0594   07DE C6 F4 07      je _if15_exit
0595   07E1             _if15_TRUE:
0596   07E1             ; n++; 
0597   07E1 FA FB FF      lea d, [bp + -5] ; $n
0598   07E4 2A            mov b, [d]
0599   07E5 38 00 00      mov c, 0
0600   07E8 11            mov a, b
0601   07E9 FD 77         inc b
0602   07EB FA FB FF      lea d, [bp + -5] ; $n
0603   07EE FD 43         mov [d], b
0604   07F0 27            mov b, a
0605   07F1 0A F4 07      jmp _if15_exit
0606   07F4             _if15_exit:
0607   07F4             ; if(currState[i+1][j+-1] == '@') 	n++; 
0608   07F4             _if16_cond:
0609   07F4 3B 60 19      mov d, _currState_data ; $currState
0610   07F7 D7            push a
0611   07F8 DA            push d
0612   07F9 FA FF FF      lea d, [bp + -1] ; $i
0613   07FC 2A            mov b, [d]
0614   07FD 38 00 00      mov c, 0
0615   0800             ; --- START TERMS
0616   0800 D7            push a
0617   0801 11            mov a, b
0618   0802 FD 2E 01 00   mov32 cb, $00000001
0618   0806 00 00 
0619   0808 56            add b, a
0620   0809 E4            pop a
0621   080A             ; --- END TERMS
0622   080A E7            pop d
0623   080B FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0624   080F DA            push d
0625   0810 FA FD FF      lea d, [bp + -3] ; $j
0626   0813 2A            mov b, [d]
0627   0814 38 00 00      mov c, 0
0628   0817             ; --- START TERMS
0629   0817 D7            push a
0630   0818 11            mov a, b
0631   0819 FD 2E FF FF   mov32 cb, $ffffffff
0631   081D FF FF 
0632   081F 56            add b, a
0633   0820 E4            pop a
0634   0821             ; --- END TERMS
0635   0821 E7            pop d
0636   0822 5A            add d, b
0637   0823 E4            pop a
0638   0824 32            mov bl, [d]
0639   0825 A7 00         mov bh, 0
0640   0827 38 00 00      mov c, 0
0641   082A             ; --- START RELATIONAL
0642   082A D7            push a
0643   082B 11            mov a, b
0644   082C FD 2E 40 00   mov32 cb, $00000040
0644   0830 00 00 
0645   0832 B0            cmp a, b
0646   0833 FD 71         seq ; ==
0647   0835 E4            pop a
0648   0836             ; --- END RELATIONAL
0649   0836 C0 00 00      cmp b, 0
0650   0839 C6 4F 08      je _if16_exit
0651   083C             _if16_TRUE:
0652   083C             ; n++; 
0653   083C FA FB FF      lea d, [bp + -5] ; $n
0654   083F 2A            mov b, [d]
0655   0840 38 00 00      mov c, 0
0656   0843 11            mov a, b
0657   0844 FD 77         inc b
0658   0846 FA FB FF      lea d, [bp + -5] ; $n
0659   0849 FD 43         mov [d], b
0660   084B 27            mov b, a
0661   084C 0A 4F 08      jmp _if16_exit
0662   084F             _if16_exit:
0663   084F             ; if(currState[i+1][j] == '@') 			n++; 
0664   084F             _if17_cond:
0665   084F 3B 60 19      mov d, _currState_data ; $currState
0666   0852 D7            push a
0667   0853 DA            push d
0668   0854 FA FF FF      lea d, [bp + -1] ; $i
0669   0857 2A            mov b, [d]
0670   0858 38 00 00      mov c, 0
0671   085B             ; --- START TERMS
0672   085B D7            push a
0673   085C 11            mov a, b
0674   085D FD 2E 01 00   mov32 cb, $00000001
0674   0861 00 00 
0675   0863 56            add b, a
0676   0864 E4            pop a
0677   0865             ; --- END TERMS
0678   0865 E7            pop d
0679   0866 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0680   086A DA            push d
0681   086B FA FD FF      lea d, [bp + -3] ; $j
0682   086E 2A            mov b, [d]
0683   086F 38 00 00      mov c, 0
0684   0872 E7            pop d
0685   0873 5A            add d, b
0686   0874 E4            pop a
0687   0875 32            mov bl, [d]
0688   0876 A7 00         mov bh, 0
0689   0878 38 00 00      mov c, 0
0690   087B             ; --- START RELATIONAL
0691   087B D7            push a
0692   087C 11            mov a, b
0693   087D FD 2E 40 00   mov32 cb, $00000040
0693   0881 00 00 
0694   0883 B0            cmp a, b
0695   0884 FD 71         seq ; ==
0696   0886 E4            pop a
0697   0887             ; --- END RELATIONAL
0698   0887 C0 00 00      cmp b, 0
0699   088A C6 A0 08      je _if17_exit
0700   088D             _if17_TRUE:
0701   088D             ; n++; 
0702   088D FA FB FF      lea d, [bp + -5] ; $n
0703   0890 2A            mov b, [d]
0704   0891 38 00 00      mov c, 0
0705   0894 11            mov a, b
0706   0895 FD 77         inc b
0707   0897 FA FB FF      lea d, [bp + -5] ; $n
0708   089A FD 43         mov [d], b
0709   089C 27            mov b, a
0710   089D 0A A0 08      jmp _if17_exit
0711   08A0             _if17_exit:
0712   08A0             ; if(currState[i+1][j+1] == '@') 		n++; 
0713   08A0             _if18_cond:
0714   08A0 3B 60 19      mov d, _currState_data ; $currState
0715   08A3 D7            push a
0716   08A4 DA            push d
0717   08A5 FA FF FF      lea d, [bp + -1] ; $i
0718   08A8 2A            mov b, [d]
0719   08A9 38 00 00      mov c, 0
0720   08AC             ; --- START TERMS
0721   08AC D7            push a
0722   08AD 11            mov a, b
0723   08AE FD 2E 01 00   mov32 cb, $00000001
0723   08B2 00 00 
0724   08B4 56            add b, a
0725   08B5 E4            pop a
0726   08B6             ; --- END TERMS
0727   08B6 E7            pop d
0728   08B7 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0729   08BB DA            push d
0730   08BC FA FD FF      lea d, [bp + -3] ; $j
0731   08BF 2A            mov b, [d]
0732   08C0 38 00 00      mov c, 0
0733   08C3             ; --- START TERMS
0734   08C3 D7            push a
0735   08C4 11            mov a, b
0736   08C5 FD 2E 01 00   mov32 cb, $00000001
0736   08C9 00 00 
0737   08CB 56            add b, a
0738   08CC E4            pop a
0739   08CD             ; --- END TERMS
0740   08CD E7            pop d
0741   08CE 5A            add d, b
0742   08CF E4            pop a
0743   08D0 32            mov bl, [d]
0744   08D1 A7 00         mov bh, 0
0745   08D3 38 00 00      mov c, 0
0746   08D6             ; --- START RELATIONAL
0747   08D6 D7            push a
0748   08D7 11            mov a, b
0749   08D8 FD 2E 40 00   mov32 cb, $00000040
0749   08DC 00 00 
0750   08DE B0            cmp a, b
0751   08DF FD 71         seq ; ==
0752   08E1 E4            pop a
0753   08E2             ; --- END RELATIONAL
0754   08E2 C0 00 00      cmp b, 0
0755   08E5 C6 FB 08      je _if18_exit
0756   08E8             _if18_TRUE:
0757   08E8             ; n++; 
0758   08E8 FA FB FF      lea d, [bp + -5] ; $n
0759   08EB 2A            mov b, [d]
0760   08EC 38 00 00      mov c, 0
0761   08EF 11            mov a, b
0762   08F0 FD 77         inc b
0763   08F2 FA FB FF      lea d, [bp + -5] ; $n
0764   08F5 FD 43         mov [d], b
0765   08F7 27            mov b, a
0766   08F8 0A FB 08      jmp _if18_exit
0767   08FB             _if18_exit:
0768   08FB             ; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0769   08FB             _if19_cond:
0770   08FB FA FB FF      lea d, [bp + -5] ; $n
0771   08FE 2A            mov b, [d]
0772   08FF 38 00 00      mov c, 0
0773   0902             ; --- START RELATIONAL
0774   0902 D7            push a
0775   0903 11            mov a, b
0776   0904 FD 2E 02 00   mov32 cb, $00000002
0776   0908 00 00 
0777   090A B0            cmp a, b
0778   090B FD 73         slt ; < (signed)
0779   090D E4            pop a
0780   090E             ; --- END RELATIONAL
0781   090E             ; --- START LOGICAL OR
0782   090E D7            push a
0783   090F 11            mov a, b
0784   0910 FA FB FF      lea d, [bp + -5] ; $n
0785   0913 2A            mov b, [d]
0786   0914 38 00 00      mov c, 0
0787   0917             ; --- START RELATIONAL
0788   0917 D7            push a
0789   0918 11            mov a, b
0790   0919 FD 2E 03 00   mov32 cb, $00000003
0790   091D 00 00 
0791   091F B0            cmp a, b
0792   0920 FD 7F         sgt ; >
0793   0922 E4            pop a
0794   0923             ; --- END RELATIONAL
0795   0923 FD A8         sor a, b ; ||
0796   0925 E4            pop a
0797   0926             ; --- END LOGICAL OR
0798   0926 C0 00 00      cmp b, 0
0799   0929 C6 55 09      je _if19_else
0800   092C             _if19_TRUE:
0801   092C             ; nextState[i][j] = ' '; 
0802   092C 3B B0 14      mov d, _nextState_data ; $nextState
0803   092F D7            push a
0804   0930 DA            push d
0805   0931 FA FF FF      lea d, [bp + -1] ; $i
0806   0934 2A            mov b, [d]
0807   0935 38 00 00      mov c, 0
0808   0938 E7            pop d
0809   0939 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0810   093D DA            push d
0811   093E FA FD FF      lea d, [bp + -3] ; $j
0812   0941 2A            mov b, [d]
0813   0942 38 00 00      mov c, 0
0814   0945 E7            pop d
0815   0946 5A            add d, b
0816   0947 E4            pop a
0817   0948 DA            push d
0818   0949 FD 2E 20 00   mov32 cb, $00000020
0818   094D 00 00 
0819   094F E7            pop d
0820   0950 FD 3E         mov [d], bl
0821   0952 0A 97 09      jmp _if19_exit
0822   0955             _if19_else:
0823   0955             ; if(n == 3) nextState[i][j] = '@'; 
0824   0955             _if20_cond:
0825   0955 FA FB FF      lea d, [bp + -5] ; $n
0826   0958 2A            mov b, [d]
0827   0959 38 00 00      mov c, 0
0828   095C             ; --- START RELATIONAL
0829   095C D7            push a
0830   095D 11            mov a, b
0831   095E FD 2E 03 00   mov32 cb, $00000003
0831   0962 00 00 
0832   0964 B0            cmp a, b
0833   0965 FD 71         seq ; ==
0834   0967 E4            pop a
0835   0968             ; --- END RELATIONAL
0836   0968 C0 00 00      cmp b, 0
0837   096B C6 97 09      je _if20_exit
0838   096E             _if20_TRUE:
0839   096E             ; nextState[i][j] = '@'; 
0840   096E 3B B0 14      mov d, _nextState_data ; $nextState
0841   0971 D7            push a
0842   0972 DA            push d
0843   0973 FA FF FF      lea d, [bp + -1] ; $i
0844   0976 2A            mov b, [d]
0845   0977 38 00 00      mov c, 0
0846   097A E7            pop d
0847   097B FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0848   097F DA            push d
0849   0980 FA FD FF      lea d, [bp + -3] ; $j
0850   0983 2A            mov b, [d]
0851   0984 38 00 00      mov c, 0
0852   0987 E7            pop d
0853   0988 5A            add d, b
0854   0989 E4            pop a
0855   098A DA            push d
0856   098B FD 2E 40 00   mov32 cb, $00000040
0856   098F 00 00 
0857   0991 E7            pop d
0858   0992 FD 3E         mov [d], bl
0859   0994 0A 97 09      jmp _if20_exit
0860   0997             _if20_exit:
0861   0997             _if19_exit:
0862   0997             _for10_update:
0863   0997 FA FD FF      lea d, [bp + -3] ; $j
0864   099A 2A            mov b, [d]
0865   099B 38 00 00      mov c, 0
0866   099E 11            mov a, b
0867   099F FD 77         inc b
0868   09A1 FA FD FF      lea d, [bp + -3] ; $j
0869   09A4 FD 43         mov [d], b
0870   09A6 27            mov b, a
0871   09A7 0A 1B 06      jmp _for10_cond
0872   09AA             _for10_exit:
0873   09AA             _for9_update:
0874   09AA FA FF FF      lea d, [bp + -1] ; $i
0875   09AD 2A            mov b, [d]
0876   09AE 38 00 00      mov c, 0
0877   09B1 11            mov a, b
0878   09B2 FD 77         inc b
0879   09B4 FA FF FF      lea d, [bp + -1] ; $i
0880   09B7 FD 43         mov [d], b
0881   09B9 27            mov b, a
0882   09BA 0A EB 05      jmp _for9_cond
0883   09BD             _for9_exit:
0884   09BD             ; for(i = 1; i <  30      +-1; i++){ 
0885   09BD             _for21_init:
0886   09BD FA FF FF      lea d, [bp + -1] ; $i
0887   09C0 DA            push d
0888   09C1 FD 2E 01 00   mov32 cb, $00000001
0888   09C5 00 00 
0889   09C7 E7            pop d
0890   09C8 FD 43         mov [d], b
0891   09CA             _for21_cond:
0892   09CA FA FF FF      lea d, [bp + -1] ; $i
0893   09CD 2A            mov b, [d]
0894   09CE 38 00 00      mov c, 0
0895   09D1             ; --- START RELATIONAL
0896   09D1 D7            push a
0897   09D2 11            mov a, b
0898   09D3 FD 2E 1E 00   mov32 cb, $0000001e
0898   09D7 00 00 
0899   09D9             ; --- START TERMS
0900   09D9 D7            push a
0901   09DA 11            mov a, b
0902   09DB FD 2E FF FF   mov32 cb, $ffffffff
0902   09DF FF FF 
0903   09E1 56            add b, a
0904   09E2 E4            pop a
0905   09E3             ; --- END TERMS
0906   09E3 B0            cmp a, b
0907   09E4 FD 73         slt ; < (signed)
0908   09E6 E4            pop a
0909   09E7             ; --- END RELATIONAL
0910   09E7 C0 00 00      cmp b, 0
0911   09EA C6 85 0A      je _for21_exit
0912   09ED             _for21_block:
0913   09ED             ; for(j = 1; j <   40     +-1; j++){ 
0914   09ED             _for22_init:
0915   09ED FA FD FF      lea d, [bp + -3] ; $j
0916   09F0 DA            push d
0917   09F1 FD 2E 01 00   mov32 cb, $00000001
0917   09F5 00 00 
0918   09F7 E7            pop d
0919   09F8 FD 43         mov [d], b
0920   09FA             _for22_cond:
0921   09FA FA FD FF      lea d, [bp + -3] ; $j
0922   09FD 2A            mov b, [d]
0923   09FE 38 00 00      mov c, 0
0924   0A01             ; --- START RELATIONAL
0925   0A01 D7            push a
0926   0A02 11            mov a, b
0927   0A03 FD 2E 28 00   mov32 cb, $00000028
0927   0A07 00 00 
0928   0A09             ; --- START TERMS
0929   0A09 D7            push a
0930   0A0A 11            mov a, b
0931   0A0B FD 2E FF FF   mov32 cb, $ffffffff
0931   0A0F FF FF 
0932   0A11 56            add b, a
0933   0A12 E4            pop a
0934   0A13             ; --- END TERMS
0935   0A13 B0            cmp a, b
0936   0A14 FD 73         slt ; < (signed)
0937   0A16 E4            pop a
0938   0A17             ; --- END RELATIONAL
0939   0A17 C0 00 00      cmp b, 0
0940   0A1A C6 72 0A      je _for22_exit
0941   0A1D             _for22_block:
0942   0A1D             ; currState[i][j] = nextState[i][j]; 
0943   0A1D 3B 60 19      mov d, _currState_data ; $currState
0944   0A20 D7            push a
0945   0A21 DA            push d
0946   0A22 FA FF FF      lea d, [bp + -1] ; $i
0947   0A25 2A            mov b, [d]
0948   0A26 38 00 00      mov c, 0
0949   0A29 E7            pop d
0950   0A2A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0951   0A2E DA            push d
0952   0A2F FA FD FF      lea d, [bp + -3] ; $j
0953   0A32 2A            mov b, [d]
0954   0A33 38 00 00      mov c, 0
0955   0A36 E7            pop d
0956   0A37 5A            add d, b
0957   0A38 E4            pop a
0958   0A39 DA            push d
0959   0A3A 3B B0 14      mov d, _nextState_data ; $nextState
0960   0A3D D7            push a
0961   0A3E DA            push d
0962   0A3F FA FF FF      lea d, [bp + -1] ; $i
0963   0A42 2A            mov b, [d]
0964   0A43 38 00 00      mov c, 0
0965   0A46 E7            pop d
0966   0A47 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0967   0A4B DA            push d
0968   0A4C FA FD FF      lea d, [bp + -3] ; $j
0969   0A4F 2A            mov b, [d]
0970   0A50 38 00 00      mov c, 0
0971   0A53 E7            pop d
0972   0A54 5A            add d, b
0973   0A55 E4            pop a
0974   0A56 32            mov bl, [d]
0975   0A57 A7 00         mov bh, 0
0976   0A59 38 00 00      mov c, 0
0977   0A5C E7            pop d
0978   0A5D FD 3E         mov [d], bl
0979   0A5F             _for22_update:
0980   0A5F FA FD FF      lea d, [bp + -3] ; $j
0981   0A62 2A            mov b, [d]
0982   0A63 38 00 00      mov c, 0
0983   0A66 11            mov a, b
0984   0A67 FD 77         inc b
0985   0A69 FA FD FF      lea d, [bp + -3] ; $j
0986   0A6C FD 43         mov [d], b
0987   0A6E 27            mov b, a
0988   0A6F 0A FA 09      jmp _for22_cond
0989   0A72             _for22_exit:
0990   0A72             _for21_update:
0991   0A72 FA FF FF      lea d, [bp + -1] ; $i
0992   0A75 2A            mov b, [d]
0993   0A76 38 00 00      mov c, 0
0994   0A79 11            mov a, b
0995   0A7A FD 77         inc b
0996   0A7C FA FF FF      lea d, [bp + -1] ; $i
0997   0A7F FD 43         mov [d], b
0998   0A81 27            mov b, a
0999   0A82 0A CA 09      jmp _for21_cond
1000   0A85             _for21_exit:
1001   0A85             ; printf(clear); 
1002   0A85             ; --- START FUNCTION CALL
1003   0A85 3B A5 14      mov d, _clear_data ; $clear
1004   0A88 2D            mov b, d
1005   0A89 38 00 00      mov c, 0
1006   0A8C FD AB         swp b
1007   0A8E D8            push b
1008   0A8F 07 73 0B      call printf
1009   0A92 51 02 00      add sp, 2
1010   0A95             ; --- END FUNCTION CALL
1011   0A95             ; for(i = 0; i <  30      ; i++){ 
1012   0A95             _for23_init:
1013   0A95 FA FF FF      lea d, [bp + -1] ; $i
1014   0A98 DA            push d
1015   0A99 FD 2E 00 00   mov32 cb, $00000000
1015   0A9D 00 00 
1016   0A9F E7            pop d
1017   0AA0 FD 43         mov [d], b
1018   0AA2             _for23_cond:
1019   0AA2 FA FF FF      lea d, [bp + -1] ; $i
1020   0AA5 2A            mov b, [d]
1021   0AA6 38 00 00      mov c, 0
1022   0AA9             ; --- START RELATIONAL
1023   0AA9 D7            push a
1024   0AAA 11            mov a, b
1025   0AAB FD 2E 1E 00   mov32 cb, $0000001e
1025   0AAF 00 00 
1026   0AB1 B0            cmp a, b
1027   0AB2 FD 73         slt ; < (signed)
1028   0AB4 E4            pop a
1029   0AB5             ; --- END RELATIONAL
1030   0AB5 C0 00 00      cmp b, 0
1031   0AB8 C6 62 0B      je _for23_exit
1032   0ABB             _for23_block:
1033   0ABB             ; for(j = 0; j <   40     ; j++){ 
1034   0ABB             _for24_init:
1035   0ABB FA FD FF      lea d, [bp + -3] ; $j
1036   0ABE DA            push d
1037   0ABF FD 2E 00 00   mov32 cb, $00000000
1037   0AC3 00 00 
1038   0AC5 E7            pop d
1039   0AC6 FD 43         mov [d], b
1040   0AC8             _for24_cond:
1041   0AC8 FA FD FF      lea d, [bp + -3] ; $j
1042   0ACB 2A            mov b, [d]
1043   0ACC 38 00 00      mov c, 0
1044   0ACF             ; --- START RELATIONAL
1045   0ACF D7            push a
1046   0AD0 11            mov a, b
1047   0AD1 FD 2E 28 00   mov32 cb, $00000028
1047   0AD5 00 00 
1048   0AD7 B0            cmp a, b
1049   0AD8 FD 73         slt ; < (signed)
1050   0ADA E4            pop a
1051   0ADB             ; --- END RELATIONAL
1052   0ADB C0 00 00      cmp b, 0
1053   0ADE C6 43 0B      je _for24_exit
1054   0AE1             _for24_block:
1055   0AE1             ; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
1056   0AE1             _ternary25_cond:
1057   0AE1 3B 60 19      mov d, _currState_data ; $currState
1058   0AE4 D7            push a
1059   0AE5 DA            push d
1060   0AE6 FA FF FF      lea d, [bp + -1] ; $i
1061   0AE9 2A            mov b, [d]
1062   0AEA 38 00 00      mov c, 0
1063   0AED E7            pop d
1064   0AEE FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
1065   0AF2 DA            push d
1066   0AF3 FA FD FF      lea d, [bp + -3] ; $j
1067   0AF6 2A            mov b, [d]
1068   0AF7 38 00 00      mov c, 0
1069   0AFA E7            pop d
1070   0AFB 5A            add d, b
1071   0AFC E4            pop a
1072   0AFD 32            mov bl, [d]
1073   0AFE A7 00         mov bh, 0
1074   0B00 38 00 00      mov c, 0
1075   0B03             ; --- START RELATIONAL
1076   0B03 D7            push a
1077   0B04 11            mov a, b
1078   0B05 FD 2E 40 00   mov32 cb, $00000040
1078   0B09 00 00 
1079   0B0B B0            cmp a, b
1080   0B0C FD 71         seq ; ==
1081   0B0E E4            pop a
1082   0B0F             ; --- END RELATIONAL
1083   0B0F C0 00 00      cmp b, 0
1084   0B12 C6 24 0B      je _ternary25_FALSE
1085   0B15             _ternary25_TRUE:
1086   0B15             ; --- START FUNCTION CALL
1087   0B15 26 10 1E      mov b, _s0 ; "@ "
1088   0B18 FD AB         swp b
1089   0B1A D8            push b
1090   0B1B 07 73 0B      call printf
1091   0B1E 51 02 00      add sp, 2
1092   0B21             ; --- END FUNCTION CALL
1093   0B21 0A 30 0B      jmp _ternary25_exit
1094   0B24             _ternary25_FALSE:
1095   0B24             ; --- START FUNCTION CALL
1096   0B24 26 13 1E      mov b, _s1 ; ". "
1097   0B27 FD AB         swp b
1098   0B29 D8            push b
1099   0B2A 07 73 0B      call printf
1100   0B2D 51 02 00      add sp, 2
1101   0B30             ; --- END FUNCTION CALL
1102   0B30             _ternary25_exit:
1103   0B30             _for24_update:
1104   0B30 FA FD FF      lea d, [bp + -3] ; $j
1105   0B33 2A            mov b, [d]
1106   0B34 38 00 00      mov c, 0
1107   0B37 11            mov a, b
1108   0B38 FD 77         inc b
1109   0B3A FA FD FF      lea d, [bp + -3] ; $j
1110   0B3D FD 43         mov [d], b
1111   0B3F 27            mov b, a
1112   0B40 0A C8 0A      jmp _for24_cond
1113   0B43             _for24_exit:
1114   0B43             ; printf("\n\r"); 
1115   0B43             ; --- START FUNCTION CALL
1116   0B43 26 16 1E      mov b, _s2 ; "\n\r"
1117   0B46 FD AB         swp b
1118   0B48 D8            push b
1119   0B49 07 73 0B      call printf
1120   0B4C 51 02 00      add sp, 2
1121   0B4F             ; --- END FUNCTION CALL
1122   0B4F             _for23_update:
1123   0B4F FA FF FF      lea d, [bp + -1] ; $i
1124   0B52 2A            mov b, [d]
1125   0B53 38 00 00      mov c, 0
1126   0B56 11            mov a, b
1127   0B57 FD 77         inc b
1128   0B59 FA FF FF      lea d, [bp + -1] ; $i
1129   0B5C FD 43         mov [d], b
1130   0B5E 27            mov b, a
1131   0B5F 0A A2 0A      jmp _for23_cond
1132   0B62             _for23_exit:
1133   0B62             ; puts("\n\rPress CTRL+C to quit.\n\r"); 
1134   0B62             ; --- START FUNCTION CALL
1135   0B62 26 19 1E      mov b, _s3 ; "\n\rPress CTRL+C to quit.\n\r"
1136   0B65 FD AB         swp b
1137   0B67 D8            push b
1138   0B68 07 87 14      call puts
1139   0B6B 51 02 00      add sp, 2
1140   0B6E             ; --- END FUNCTION CALL
1141   0B6E             _for8_update:
1142   0B6E 0A DE 05      jmp _for8_cond
1143   0B71             _for8_exit:
1144   0B71 05 0B         syscall sys_terminate_proc
1145   0B73             
1146   0B73             printf:
1147   0B73 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1148   0B76             ; char *p, *format_p; 
1149   0B76 52 02 00      sub sp, 2
1150   0B79 52 02 00      sub sp, 2
1151   0B7C             ; format_p = format; 
1152   0B7C FA FD FF      lea d, [bp + -3] ; $format_p
1153   0B7F DA            push d
1154   0B80 FA 05 00      lea d, [bp + 5] ; $format
1155   0B83 2A            mov b, [d]
1156   0B84 38 00 00      mov c, 0
1157   0B87 E7            pop d
1158   0B88 FD 43         mov [d], b
1159   0B8A             ; p = &format + 2; 
1160   0B8A FA FF FF      lea d, [bp + -1] ; $p
1161   0B8D DA            push d
1162   0B8E FA 05 00      lea d, [bp + 5] ; $format
1163   0B91 2D            mov b, d
1164   0B92             ; --- START TERMS
1165   0B92 D7            push a
1166   0B93 11            mov a, b
1167   0B94 FD 2E 02 00   mov32 cb, $00000002
1167   0B98 00 00 
1168   0B9A 56            add b, a
1169   0B9B E4            pop a
1170   0B9C             ; --- END TERMS
1171   0B9C E7            pop d
1172   0B9D FD 43         mov [d], b
1173   0B9F             ; for(;;){ 
1174   0B9F             _for26_init:
1175   0B9F             _for26_cond:
1176   0B9F             _for26_block:
1177   0B9F             ; if(!*format_p) break; 
1178   0B9F             _if27_cond:
1179   0B9F FA FD FF      lea d, [bp + -3] ; $format_p
1180   0BA2 2A            mov b, [d]
1181   0BA3 38 00 00      mov c, 0
1182   0BA6 74            mov d, b
1183   0BA7 32            mov bl, [d]
1184   0BA8 A7 00         mov bh, 0
1185   0BAA 38 00 00      mov c, 0
1186   0BAD C0 00 00      cmp b, 0
1187   0BB0 FD 71         seq ; !
1188   0BB2 C0 00 00      cmp b, 0
1189   0BB5 C6 BE 0B      je _if27_else
1190   0BB8             _if27_TRUE:
1191   0BB8             ; break; 
1192   0BB8 0A 5E 0E      jmp _for26_exit ; for break
1193   0BBB 0A 4B 0E      jmp _if27_exit
1194   0BBE             _if27_else:
1195   0BBE             ; if(*format_p == '%'){ 
1196   0BBE             _if28_cond:
1197   0BBE FA FD FF      lea d, [bp + -3] ; $format_p
1198   0BC1 2A            mov b, [d]
1199   0BC2 38 00 00      mov c, 0
1200   0BC5 74            mov d, b
1201   0BC6 32            mov bl, [d]
1202   0BC7 A7 00         mov bh, 0
1203   0BC9 38 00 00      mov c, 0
1204   0BCC             ; --- START RELATIONAL
1205   0BCC D7            push a
1206   0BCD 11            mov a, b
1207   0BCE FD 2E 25 00   mov32 cb, $00000025
1207   0BD2 00 00 
1208   0BD4 B0            cmp a, b
1209   0BD5 FD 71         seq ; ==
1210   0BD7 E4            pop a
1211   0BD8             ; --- END RELATIONAL
1212   0BD8 C0 00 00      cmp b, 0
1213   0BDB C6 36 0E      je _if28_else
1214   0BDE             _if28_TRUE:
1215   0BDE             ; format_p++; 
1216   0BDE FA FD FF      lea d, [bp + -3] ; $format_p
1217   0BE1 2A            mov b, [d]
1218   0BE2 38 00 00      mov c, 0
1219   0BE5 FD 77         inc b
1220   0BE7 FA FD FF      lea d, [bp + -3] ; $format_p
1221   0BEA FD 43         mov [d], b
1222   0BEC FD 7D         dec b
1223   0BEE             ; switch(*format_p){ 
1224   0BEE             _switch29_expr:
1225   0BEE FA FD FF      lea d, [bp + -3] ; $format_p
1226   0BF1 2A            mov b, [d]
1227   0BF2 38 00 00      mov c, 0
1228   0BF5 74            mov d, b
1229   0BF6 32            mov bl, [d]
1230   0BF7 A7 00         mov bh, 0
1231   0BF9 38 00 00      mov c, 0
1232   0BFC             _switch29_comparisons:
1233   0BFC C1 6C         cmp bl, $6c
1234   0BFE C6 2A 0C      je _switch29_case0
1235   0C01 C1 4C         cmp bl, $4c
1236   0C03 C6 2A 0C      je _switch29_case1
1237   0C06 C1 64         cmp bl, $64
1238   0C08 C6 3A 0D      je _switch29_case2
1239   0C0B C1 69         cmp bl, $69
1240   0C0D C6 3A 0D      je _switch29_case3
1241   0C10 C1 75         cmp bl, $75
1242   0C12 C6 6A 0D      je _switch29_case4
1243   0C15 C1 78         cmp bl, $78
1244   0C17 C6 9A 0D      je _switch29_case5
1245   0C1A C1 63         cmp bl, $63
1246   0C1C C6 CA 0D      je _switch29_case6
1247   0C1F C1 73         cmp bl, $73
1248   0C21 C6 FA 0D      je _switch29_case7
1249   0C24 0A 27 0E      jmp _switch29_default
1250   0C27 0A 33 0E      jmp _switch29_exit
1251   0C2A             _switch29_case0:
1252   0C2A             _switch29_case1:
1253   0C2A             ; format_p++; 
1254   0C2A FA FD FF      lea d, [bp + -3] ; $format_p
1255   0C2D 2A            mov b, [d]
1256   0C2E 38 00 00      mov c, 0
1257   0C31 FD 77         inc b
1258   0C33 FA FD FF      lea d, [bp + -3] ; $format_p
1259   0C36 FD 43         mov [d], b
1260   0C38 FD 7D         dec b
1261   0C3A             ; if(*format_p == 'd' || *format_p == 'i') 
1262   0C3A             _if30_cond:
1263   0C3A FA FD FF      lea d, [bp + -3] ; $format_p
1264   0C3D 2A            mov b, [d]
1265   0C3E 38 00 00      mov c, 0
1266   0C41 74            mov d, b
1267   0C42 32            mov bl, [d]
1268   0C43 A7 00         mov bh, 0
1269   0C45 38 00 00      mov c, 0
1270   0C48             ; --- START RELATIONAL
1271   0C48 D7            push a
1272   0C49 11            mov a, b
1273   0C4A FD 2E 64 00   mov32 cb, $00000064
1273   0C4E 00 00 
1274   0C50 B0            cmp a, b
1275   0C51 FD 71         seq ; ==
1276   0C53 E4            pop a
1277   0C54             ; --- END RELATIONAL
1278   0C54             ; --- START LOGICAL OR
1279   0C54 D7            push a
1280   0C55 11            mov a, b
1281   0C56 FA FD FF      lea d, [bp + -3] ; $format_p
1282   0C59 2A            mov b, [d]
1283   0C5A 38 00 00      mov c, 0
1284   0C5D 74            mov d, b
1285   0C5E 32            mov bl, [d]
1286   0C5F A7 00         mov bh, 0
1287   0C61 38 00 00      mov c, 0
1288   0C64             ; --- START RELATIONAL
1289   0C64 D7            push a
1290   0C65 11            mov a, b
1291   0C66 FD 2E 69 00   mov32 cb, $00000069
1291   0C6A 00 00 
1292   0C6C B0            cmp a, b
1293   0C6D FD 71         seq ; ==
1294   0C6F E4            pop a
1295   0C70             ; --- END RELATIONAL
1296   0C70 FD A8         sor a, b ; ||
1297   0C72 E4            pop a
1298   0C73             ; --- END LOGICAL OR
1299   0C73 C0 00 00      cmp b, 0
1300   0C76 C6 97 0C      je _if30_else
1301   0C79             _if30_TRUE:
1302   0C79             ; print_signed_long(*(long *)p); 
1303   0C79             ; --- START FUNCTION CALL
1304   0C79 FA FF FF      lea d, [bp + -1] ; $p
1305   0C7C 2A            mov b, [d]
1306   0C7D 38 00 00      mov c, 0
1307   0C80 74            mov d, b
1308   0C81 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1309   0C84 FD 39         mov c, b ; And place it into C
1310   0C86 2A            mov b, [d] ; Lower Word in B
1311   0C87 12            mov a, c
1312   0C88 FD AA         swp a
1313   0C8A D7            push a
1314   0C8B FD AB         swp b
1315   0C8D D8            push b
1316   0C8E 07 60 0E      call print_signed_long
1317   0C91 51 04 00      add sp, 4
1318   0C94             ; --- END FUNCTION CALL
1319   0C94 0A 1F 0D      jmp _if30_exit
1320   0C97             _if30_else:
1321   0C97             ; if(*format_p == 'u') 
1322   0C97             _if31_cond:
1323   0C97 FA FD FF      lea d, [bp + -3] ; $format_p
1324   0C9A 2A            mov b, [d]
1325   0C9B 38 00 00      mov c, 0
1326   0C9E 74            mov d, b
1327   0C9F 32            mov bl, [d]
1328   0CA0 A7 00         mov bh, 0
1329   0CA2 38 00 00      mov c, 0
1330   0CA5             ; --- START RELATIONAL
1331   0CA5 D7            push a
1332   0CA6 11            mov a, b
1333   0CA7 FD 2E 75 00   mov32 cb, $00000075
1333   0CAB 00 00 
1334   0CAD B0            cmp a, b
1335   0CAE FD 71         seq ; ==
1336   0CB0 E4            pop a
1337   0CB1             ; --- END RELATIONAL
1338   0CB1 C0 00 00      cmp b, 0
1339   0CB4 C6 D5 0C      je _if31_else
1340   0CB7             _if31_TRUE:
1341   0CB7             ; print_unsigned_long(*(unsigned long *)p); 
1342   0CB7             ; --- START FUNCTION CALL
1343   0CB7 FA FF FF      lea d, [bp + -1] ; $p
1344   0CBA 2A            mov b, [d]
1345   0CBB 38 00 00      mov c, 0
1346   0CBE 74            mov d, b
1347   0CBF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1348   0CC2 FD 39         mov c, b ; And place it into C
1349   0CC4 2A            mov b, [d] ; Lower Word in B
1350   0CC5 12            mov a, c
1351   0CC6 FD AA         swp a
1352   0CC8 D7            push a
1353   0CC9 FD AB         swp b
1354   0CCB D8            push b
1355   0CCC 07 00 10      call print_unsigned_long
1356   0CCF 51 04 00      add sp, 4
1357   0CD2             ; --- END FUNCTION CALL
1358   0CD2 0A 1F 0D      jmp _if31_exit
1359   0CD5             _if31_else:
1360   0CD5             ; if(*format_p == 'x') 
1361   0CD5             _if32_cond:
1362   0CD5 FA FD FF      lea d, [bp + -3] ; $format_p
1363   0CD8 2A            mov b, [d]
1364   0CD9 38 00 00      mov c, 0
1365   0CDC 74            mov d, b
1366   0CDD 32            mov bl, [d]
1367   0CDE A7 00         mov bh, 0
1368   0CE0 38 00 00      mov c, 0
1369   0CE3             ; --- START RELATIONAL
1370   0CE3 D7            push a
1371   0CE4 11            mov a, b
1372   0CE5 FD 2E 78 00   mov32 cb, $00000078
1372   0CE9 00 00 
1373   0CEB B0            cmp a, b
1374   0CEC FD 71         seq ; ==
1375   0CEE E4            pop a
1376   0CEF             ; --- END RELATIONAL
1377   0CEF C0 00 00      cmp b, 0
1378   0CF2 C6 13 0D      je _if32_else
1379   0CF5             _if32_TRUE:
1380   0CF5             ; printx32(*(long int *)p); 
1381   0CF5             ; --- START FUNCTION CALL
1382   0CF5 FA FF FF      lea d, [bp + -1] ; $p
1383   0CF8 2A            mov b, [d]
1384   0CF9 38 00 00      mov c, 0
1385   0CFC 74            mov d, b
1386   0CFD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1387   0D00 FD 39         mov c, b ; And place it into C
1388   0D02 2A            mov b, [d] ; Lower Word in B
1389   0D03 12            mov a, c
1390   0D04 FD AA         swp a
1391   0D06 D7            push a
1392   0D07 FD AB         swp b
1393   0D09 D8            push b
1394   0D0A 07 3E 11      call printx32
1395   0D0D 51 04 00      add sp, 4
1396   0D10             ; --- END FUNCTION CALL
1397   0D10 0A 1F 0D      jmp _if32_exit
1398   0D13             _if32_else:
1399   0D13             ; err("Unexpected format in printf."); 
1400   0D13             ; --- START FUNCTION CALL
1401   0D13 26 33 1E      mov b, _s4 ; "Unexpected format in printf."
1402   0D16 FD AB         swp b
1403   0D18 D8            push b
1404   0D19 07 9E 11      call err
1405   0D1C 51 02 00      add sp, 2
1406   0D1F             ; --- END FUNCTION CALL
1407   0D1F             _if32_exit:
1408   0D1F             _if31_exit:
1409   0D1F             _if30_exit:
1410   0D1F             ; p = p + 4; 
1411   0D1F FA FF FF      lea d, [bp + -1] ; $p
1412   0D22 DA            push d
1413   0D23 FA FF FF      lea d, [bp + -1] ; $p
1414   0D26 2A            mov b, [d]
1415   0D27 38 00 00      mov c, 0
1416   0D2A             ; --- START TERMS
1417   0D2A D7            push a
1418   0D2B 11            mov a, b
1419   0D2C FD 2E 04 00   mov32 cb, $00000004
1419   0D30 00 00 
1420   0D32 56            add b, a
1421   0D33 E4            pop a
1422   0D34             ; --- END TERMS
1423   0D34 E7            pop d
1424   0D35 FD 43         mov [d], b
1425   0D37             ; break; 
1426   0D37 0A 33 0E      jmp _switch29_exit ; case break
1427   0D3A             _switch29_case2:
1428   0D3A             _switch29_case3:
1429   0D3A             ; print_signed(*(int*)p); 
1430   0D3A             ; --- START FUNCTION CALL
1431   0D3A FA FF FF      lea d, [bp + -1] ; $p
1432   0D3D 2A            mov b, [d]
1433   0D3E 38 00 00      mov c, 0
1434   0D41 74            mov d, b
1435   0D42 2A            mov b, [d]
1436   0D43 38 00 00      mov c, 0
1437   0D46 FD AB         swp b
1438   0D48 D8            push b
1439   0D49 07 CC 11      call print_signed
1440   0D4C 51 02 00      add sp, 2
1441   0D4F             ; --- END FUNCTION CALL
1442   0D4F             ; p = p + 2; 
1443   0D4F FA FF FF      lea d, [bp + -1] ; $p
1444   0D52 DA            push d
1445   0D53 FA FF FF      lea d, [bp + -1] ; $p
1446   0D56 2A            mov b, [d]
1447   0D57 38 00 00      mov c, 0
1448   0D5A             ; --- START TERMS
1449   0D5A D7            push a
1450   0D5B 11            mov a, b
1451   0D5C FD 2E 02 00   mov32 cb, $00000002
1451   0D60 00 00 
1452   0D62 56            add b, a
1453   0D63 E4            pop a
1454   0D64             ; --- END TERMS
1455   0D64 E7            pop d
1456   0D65 FD 43         mov [d], b
1457   0D67             ; break; 
1458   0D67 0A 33 0E      jmp _switch29_exit ; case break
1459   0D6A             _switch29_case4:
1460   0D6A             ; print_unsigned(*(unsigned int*)p); 
1461   0D6A             ; --- START FUNCTION CALL
1462   0D6A FA FF FF      lea d, [bp + -1] ; $p
1463   0D6D 2A            mov b, [d]
1464   0D6E 38 00 00      mov c, 0
1465   0D71 74            mov d, b
1466   0D72 2A            mov b, [d]
1467   0D73 38 00 00      mov c, 0
1468   0D76 FD AB         swp b
1469   0D78 D8            push b
1470   0D79 07 1D 13      call print_unsigned
1471   0D7C 51 02 00      add sp, 2
1472   0D7F             ; --- END FUNCTION CALL
1473   0D7F             ; p = p + 2; 
1474   0D7F FA FF FF      lea d, [bp + -1] ; $p
1475   0D82 DA            push d
1476   0D83 FA FF FF      lea d, [bp + -1] ; $p
1477   0D86 2A            mov b, [d]
1478   0D87 38 00 00      mov c, 0
1479   0D8A             ; --- START TERMS
1480   0D8A D7            push a
1481   0D8B 11            mov a, b
1482   0D8C FD 2E 02 00   mov32 cb, $00000002
1482   0D90 00 00 
1483   0D92 56            add b, a
1484   0D93 E4            pop a
1485   0D94             ; --- END TERMS
1486   0D94 E7            pop d
1487   0D95 FD 43         mov [d], b
1488   0D97             ; break; 
1489   0D97 0A 33 0E      jmp _switch29_exit ; case break
1490   0D9A             _switch29_case5:
1491   0D9A             ; printx16(*(int*)p); 
1492   0D9A             ; --- START FUNCTION CALL
1493   0D9A FA FF FF      lea d, [bp + -1] ; $p
1494   0D9D 2A            mov b, [d]
1495   0D9E 38 00 00      mov c, 0
1496   0DA1 74            mov d, b
1497   0DA2 2A            mov b, [d]
1498   0DA3 38 00 00      mov c, 0
1499   0DA6 FD AB         swp b
1500   0DA8 D8            push b
1501   0DA9 07 35 14      call printx16
1502   0DAC 51 02 00      add sp, 2
1503   0DAF             ; --- END FUNCTION CALL
1504   0DAF             ; p = p + 2; 
1505   0DAF FA FF FF      lea d, [bp + -1] ; $p
1506   0DB2 DA            push d
1507   0DB3 FA FF FF      lea d, [bp + -1] ; $p
1508   0DB6 2A            mov b, [d]
1509   0DB7 38 00 00      mov c, 0
1510   0DBA             ; --- START TERMS
1511   0DBA D7            push a
1512   0DBB 11            mov a, b
1513   0DBC FD 2E 02 00   mov32 cb, $00000002
1513   0DC0 00 00 
1514   0DC2 56            add b, a
1515   0DC3 E4            pop a
1516   0DC4             ; --- END TERMS
1517   0DC4 E7            pop d
1518   0DC5 FD 43         mov [d], b
1519   0DC7             ; break; 
1520   0DC7 0A 33 0E      jmp _switch29_exit ; case break
1521   0DCA             _switch29_case6:
1522   0DCA             ; putchar(*(char*)p); 
1523   0DCA             ; --- START FUNCTION CALL
1524   0DCA FA FF FF      lea d, [bp + -1] ; $p
1525   0DCD 2A            mov b, [d]
1526   0DCE 38 00 00      mov c, 0
1527   0DD1 74            mov d, b
1528   0DD2 32            mov bl, [d]
1529   0DD3 A7 00         mov bh, 0
1530   0DD5 38 00 00      mov c, 0
1531   0DD8 DD            push bl
1532   0DD9 07 F2 0F      call putchar
1533   0DDC 51 01 00      add sp, 1
1534   0DDF             ; --- END FUNCTION CALL
1535   0DDF             ; p = p + 2; 
1536   0DDF FA FF FF      lea d, [bp + -1] ; $p
1537   0DE2 DA            push d
1538   0DE3 FA FF FF      lea d, [bp + -1] ; $p
1539   0DE6 2A            mov b, [d]
1540   0DE7 38 00 00      mov c, 0
1541   0DEA             ; --- START TERMS
1542   0DEA D7            push a
1543   0DEB 11            mov a, b
1544   0DEC FD 2E 02 00   mov32 cb, $00000002
1544   0DF0 00 00 
1545   0DF2 56            add b, a
1546   0DF3 E4            pop a
1547   0DF4             ; --- END TERMS
1548   0DF4 E7            pop d
1549   0DF5 FD 43         mov [d], b
1550   0DF7             ; break; 
1551   0DF7 0A 33 0E      jmp _switch29_exit ; case break
1552   0DFA             _switch29_case7:
1553   0DFA             ; print(*(char**)p); 
1554   0DFA             ; --- START FUNCTION CALL
1555   0DFA FA FF FF      lea d, [bp + -1] ; $p
1556   0DFD 2A            mov b, [d]
1557   0DFE 38 00 00      mov c, 0
1558   0E01 74            mov d, b
1559   0E02 2A            mov b, [d]
1560   0E03 FD AB         swp b
1561   0E05 D8            push b
1562   0E06 07 B3 11      call print
1563   0E09 51 02 00      add sp, 2
1564   0E0C             ; --- END FUNCTION CALL
1565   0E0C             ; p = p + 2; 
1566   0E0C FA FF FF      lea d, [bp + -1] ; $p
1567   0E0F DA            push d
1568   0E10 FA FF FF      lea d, [bp + -1] ; $p
1569   0E13 2A            mov b, [d]
1570   0E14 38 00 00      mov c, 0
1571   0E17             ; --- START TERMS
1572   0E17 D7            push a
1573   0E18 11            mov a, b
1574   0E19 FD 2E 02 00   mov32 cb, $00000002
1574   0E1D 00 00 
1575   0E1F 56            add b, a
1576   0E20 E4            pop a
1577   0E21             ; --- END TERMS
1578   0E21 E7            pop d
1579   0E22 FD 43         mov [d], b
1580   0E24             ; break; 
1581   0E24 0A 33 0E      jmp _switch29_exit ; case break
1582   0E27             _switch29_default:
1583   0E27             ; print("Error: Unknown argument type.\n"); 
1584   0E27             ; --- START FUNCTION CALL
1585   0E27 26 50 1E      mov b, _s5 ; "Error: Unknown argument type.\n"
1586   0E2A FD AB         swp b
1587   0E2C D8            push b
1588   0E2D 07 B3 11      call print
1589   0E30 51 02 00      add sp, 2
1590   0E33             ; --- END FUNCTION CALL
1591   0E33             _switch29_exit:
1592   0E33 0A 4B 0E      jmp _if28_exit
1593   0E36             _if28_else:
1594   0E36             ; putchar(*format_p); 
1595   0E36             ; --- START FUNCTION CALL
1596   0E36 FA FD FF      lea d, [bp + -3] ; $format_p
1597   0E39 2A            mov b, [d]
1598   0E3A 38 00 00      mov c, 0
1599   0E3D 74            mov d, b
1600   0E3E 32            mov bl, [d]
1601   0E3F A7 00         mov bh, 0
1602   0E41 38 00 00      mov c, 0
1603   0E44 DD            push bl
1604   0E45 07 F2 0F      call putchar
1605   0E48 51 01 00      add sp, 1
1606   0E4B             ; --- END FUNCTION CALL
1607   0E4B             _if28_exit:
1608   0E4B             _if27_exit:
1609   0E4B             ; format_p++; 
1610   0E4B FA FD FF      lea d, [bp + -3] ; $format_p
1611   0E4E 2A            mov b, [d]
1612   0E4F 38 00 00      mov c, 0
1613   0E52 FD 77         inc b
1614   0E54 FA FD FF      lea d, [bp + -3] ; $format_p
1615   0E57 FD 43         mov [d], b
1616   0E59 FD 7D         dec b
1617   0E5B             _for26_update:
1618   0E5B 0A 9F 0B      jmp _for26_cond
1619   0E5E             _for26_exit:
1620   0E5E F9            leave
1621   0E5F 09            ret
1622   0E60             
1623   0E60             print_signed_long:
1624   0E60 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1625   0E63             ; char digits[10]; 
1626   0E63 52 0A 00      sub sp, 10
1627   0E66             ; int i = 0; 
1628   0E66 52 02 00      sub sp, 2
1629   0E69             ; --- START LOCAL VAR INITIALIZATION
1630   0E69 FA F5 FF      lea d, [bp + -11] ; $i
1631   0E6C DA            push d
1632   0E6D FD 2E 00 00   mov32 cb, $00000000
1632   0E71 00 00 
1633   0E73 E7            pop d
1634   0E74 FD 43         mov [d], b
1635   0E76             ; --- END LOCAL VAR INITIALIZATION
1636   0E76             ; if (num < 0) { 
1637   0E76             _if33_cond:
1638   0E76 FA 05 00      lea d, [bp + 5] ; $num
1639   0E79 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1640   0E7C FD 39         mov c, b ; And place it into C
1641   0E7E 2A            mov b, [d] ; Lower Word in B
1642   0E7F             ; --- START RELATIONAL
1643   0E7F D7            push a
1644   0E80 FD D8         push g
1645   0E82 11            mov a, b
1646   0E83 FD 7A         mov g, c
1647   0E85 FD 2E 00 00   mov32 cb, $00000000
1647   0E89 00 00 
1648   0E8B 38 00 00      mov c, 0
1649   0E8E FD AF         cmp32 ga, cb
1650   0E90 FD 73         slt ; <
1651   0E92 FD F1         pop g
1652   0E94 E4            pop a
1653   0E95             ; --- END RELATIONAL
1654   0E95 C0 00 00      cmp b, 0
1655   0E98 C6 CA 0E      je _if33_else
1656   0E9B             _if33_TRUE:
1657   0E9B             ; putchar('-'); 
1658   0E9B             ; --- START FUNCTION CALL
1659   0E9B FD 2E 2D 00   mov32 cb, $0000002d
1659   0E9F 00 00 
1660   0EA1 DD            push bl
1661   0EA2 07 F2 0F      call putchar
1662   0EA5 51 01 00      add sp, 1
1663   0EA8             ; --- END FUNCTION CALL
1664   0EA8             ; num = -num; 
1665   0EA8 FA 05 00      lea d, [bp + 5] ; $num
1666   0EAB DA            push d
1667   0EAC FA 05 00      lea d, [bp + 5] ; $num
1668   0EAF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1669   0EB2 FD 39         mov c, b ; And place it into C
1670   0EB4 2A            mov b, [d] ; Lower Word in B
1671   0EB5 12            mov a, c
1672   0EB6 95            not a
1673   0EB7 97            not b
1674   0EB8 55 01 00      add b, 1
1675   0EBB 5B 00 00      adc a, 0
1676   0EBE 39            mov c, a
1677   0EBF E7            pop d
1678   0EC0 FD 43         mov [d], b
1679   0EC2 28            mov b, c
1680   0EC3 FD 44 02 00   mov [d + 2], b
1681   0EC7 0A 01 0F      jmp _if33_exit
1682   0ECA             _if33_else:
1683   0ECA             ; if (num == 0) { 
1684   0ECA             _if34_cond:
1685   0ECA FA 05 00      lea d, [bp + 5] ; $num
1686   0ECD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1687   0ED0 FD 39         mov c, b ; And place it into C
1688   0ED2 2A            mov b, [d] ; Lower Word in B
1689   0ED3             ; --- START RELATIONAL
1690   0ED3 D7            push a
1691   0ED4 FD D8         push g
1692   0ED6 11            mov a, b
1693   0ED7 FD 7A         mov g, c
1694   0ED9 FD 2E 00 00   mov32 cb, $00000000
1694   0EDD 00 00 
1695   0EDF 38 00 00      mov c, 0
1696   0EE2 FD AF         cmp32 ga, cb
1697   0EE4 FD 71         seq ; ==
1698   0EE6 FD F1         pop g
1699   0EE8 E4            pop a
1700   0EE9             ; --- END RELATIONAL
1701   0EE9 C0 00 00      cmp b, 0
1702   0EEC C6 01 0F      je _if34_exit
1703   0EEF             _if34_TRUE:
1704   0EEF             ; putchar('0'); 
1705   0EEF             ; --- START FUNCTION CALL
1706   0EEF FD 2E 30 00   mov32 cb, $00000030
1706   0EF3 00 00 
1707   0EF5 DD            push bl
1708   0EF6 07 F2 0F      call putchar
1709   0EF9 51 01 00      add sp, 1
1710   0EFC             ; --- END FUNCTION CALL
1711   0EFC             ; return; 
1712   0EFC F9            leave
1713   0EFD 09            ret
1714   0EFE 0A 01 0F      jmp _if34_exit
1715   0F01             _if34_exit:
1716   0F01             _if33_exit:
1717   0F01             ; while (num > 0) { 
1718   0F01             _while35_cond:
1719   0F01 FA 05 00      lea d, [bp + 5] ; $num
1720   0F04 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1721   0F07 FD 39         mov c, b ; And place it into C
1722   0F09 2A            mov b, [d] ; Lower Word in B
1723   0F0A             ; --- START RELATIONAL
1724   0F0A D7            push a
1725   0F0B FD D8         push g
1726   0F0D 11            mov a, b
1727   0F0E FD 7A         mov g, c
1728   0F10 FD 2E 00 00   mov32 cb, $00000000
1728   0F14 00 00 
1729   0F16 38 00 00      mov c, 0
1730   0F19 FD AF         cmp32 ga, cb
1731   0F1B FD 7F         sgt
1732   0F1D FD F1         pop g
1733   0F1F E4            pop a
1734   0F20             ; --- END RELATIONAL
1735   0F20 C0 00 00      cmp b, 0
1736   0F23 C6 A8 0F      je _while35_exit
1737   0F26             _while35_block:
1738   0F26             ; digits[i] = '0' + (num % 10); 
1739   0F26 FA F7 FF      lea d, [bp + -9] ; $digits
1740   0F29 D7            push a
1741   0F2A DA            push d
1742   0F2B FA F5 FF      lea d, [bp + -11] ; $i
1743   0F2E 2A            mov b, [d]
1744   0F2F 38 00 00      mov c, 0
1745   0F32 E7            pop d
1746   0F33 5A            add d, b
1747   0F34 E4            pop a
1748   0F35 DA            push d
1749   0F36 FD 2E 30 00   mov32 cb, $00000030
1749   0F3A 00 00 
1750   0F3C             ; --- START TERMS
1751   0F3C D7            push a
1752   0F3D 11            mov a, b
1753   0F3E FA 05 00      lea d, [bp + 5] ; $num
1754   0F41 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1755   0F44 FD 39         mov c, b ; And place it into C
1756   0F46 2A            mov b, [d] ; Lower Word in B
1757   0F47             ; --- START FACTORS
1758   0F47 D7            push a
1759   0F48 FD D8         push g
1760   0F4A 11            mov a, b
1761   0F4B FD 7A         mov g, c
1762   0F4D FD 2E 0A 00   mov32 cb, $0000000a
1762   0F51 00 00 
1763   0F53 FD D8         push g ; save 'g' as the div instruction uses it
1764   0F55 AE            div a, b ; %, a: quotient, b: remainder
1765   0F56 11            mov a, b
1766   0F57 FD F1         pop g
1767   0F59 FD 38         mov c, g
1768   0F5B 27            mov b, a
1769   0F5C FD F1         pop g
1770   0F5E E4            pop a
1771   0F5F             ; --- END FACTORS
1772   0F5F FD 22 00 00   mov g, 0
1773   0F63 FD 15         add32 cb, ga
1774   0F65 E4            pop a
1775   0F66             ; --- END TERMS
1776   0F66 E7            pop d
1777   0F67 FD 3E         mov [d], bl
1778   0F69             ; num = num / 10; 
1779   0F69 FA 05 00      lea d, [bp + 5] ; $num
1780   0F6C DA            push d
1781   0F6D FA 05 00      lea d, [bp + 5] ; $num
1782   0F70 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1783   0F73 FD 39         mov c, b ; And place it into C
1784   0F75 2A            mov b, [d] ; Lower Word in B
1785   0F76             ; --- START FACTORS
1786   0F76 D7            push a
1787   0F77 FD D8         push g
1788   0F79 11            mov a, b
1789   0F7A FD 7A         mov g, c
1790   0F7C FD 2E 0A 00   mov32 cb, $0000000a
1790   0F80 00 00 
1791   0F82 FD D8         push g ; save 'g' as the div instruction uses it
1792   0F84 AE            div a, b ; /, a: quotient, b: remainder
1793   0F85 FD F1         pop g
1794   0F87 FD 38         mov c, g
1795   0F89 27            mov b, a
1796   0F8A FD F1         pop g
1797   0F8C E4            pop a
1798   0F8D             ; --- END FACTORS
1799   0F8D E7            pop d
1800   0F8E FD 43         mov [d], b
1801   0F90 28            mov b, c
1802   0F91 FD 44 02 00   mov [d + 2], b
1803   0F95             ; i++; 
1804   0F95 FA F5 FF      lea d, [bp + -11] ; $i
1805   0F98 2A            mov b, [d]
1806   0F99 38 00 00      mov c, 0
1807   0F9C 11            mov a, b
1808   0F9D FD 77         inc b
1809   0F9F FA F5 FF      lea d, [bp + -11] ; $i
1810   0FA2 FD 43         mov [d], b
1811   0FA4 27            mov b, a
1812   0FA5 0A 01 0F      jmp _while35_cond
1813   0FA8             _while35_exit:
1814   0FA8             ; while (i > 0) { 
1815   0FA8             _while42_cond:
1816   0FA8 FA F5 FF      lea d, [bp + -11] ; $i
1817   0FAB 2A            mov b, [d]
1818   0FAC 38 00 00      mov c, 0
1819   0FAF             ; --- START RELATIONAL
1820   0FAF D7            push a
1821   0FB0 11            mov a, b
1822   0FB1 FD 2E 00 00   mov32 cb, $00000000
1822   0FB5 00 00 
1823   0FB7 B0            cmp a, b
1824   0FB8 FD 7F         sgt ; >
1825   0FBA E4            pop a
1826   0FBB             ; --- END RELATIONAL
1827   0FBB C0 00 00      cmp b, 0
1828   0FBE C6 F0 0F      je _while42_exit
1829   0FC1             _while42_block:
1830   0FC1             ; i--; 
1831   0FC1 FA F5 FF      lea d, [bp + -11] ; $i
1832   0FC4 2A            mov b, [d]
1833   0FC5 38 00 00      mov c, 0
1834   0FC8 11            mov a, b
1835   0FC9 FD 7D         dec b
1836   0FCB FA F5 FF      lea d, [bp + -11] ; $i
1837   0FCE FD 43         mov [d], b
1838   0FD0 27            mov b, a
1839   0FD1             ; putchar(digits[i]); 
1840   0FD1             ; --- START FUNCTION CALL
1841   0FD1 FA F7 FF      lea d, [bp + -9] ; $digits
1842   0FD4 D7            push a
1843   0FD5 DA            push d
1844   0FD6 FA F5 FF      lea d, [bp + -11] ; $i
1845   0FD9 2A            mov b, [d]
1846   0FDA 38 00 00      mov c, 0
1847   0FDD E7            pop d
1848   0FDE 5A            add d, b
1849   0FDF E4            pop a
1850   0FE0 32            mov bl, [d]
1851   0FE1 A7 00         mov bh, 0
1852   0FE3 38 00 00      mov c, 0
1853   0FE6 DD            push bl
1854   0FE7 07 F2 0F      call putchar
1855   0FEA 51 01 00      add sp, 1
1856   0FED             ; --- END FUNCTION CALL
1857   0FED 0A A8 0F      jmp _while42_cond
1858   0FF0             _while42_exit:
1859   0FF0 F9            leave
1860   0FF1 09            ret
1861   0FF2             
1862   0FF2             putchar:
1863   0FF2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1864   0FF5             ; --- BEGIN INLINE ASM SEGMENT
1865   0FF5 FA 05 00      lea d, [bp + 5] ; $c
1866   0FF8 1E            mov al, [d]
1867   0FF9 23            mov ah, al
1868   0FFA 19 00         mov al, 0
1869   0FFC 05 03         syscall sys_io      ; char in AH
1870   0FFE             ; --- END INLINE ASM SEGMENT
1871   0FFE F9            leave
1872   0FFF 09            ret
1873   1000             
1874   1000             print_unsigned_long:
1875   1000 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1876   1003             ; char digits[10]; 
1877   1003 52 0A 00      sub sp, 10
1878   1006             ; int i; 
1879   1006 52 02 00      sub sp, 2
1880   1009             ; i = 0; 
1881   1009 FA F5 FF      lea d, [bp + -11] ; $i
1882   100C DA            push d
1883   100D FD 2E 00 00   mov32 cb, $00000000
1883   1011 00 00 
1884   1013 E7            pop d
1885   1014 FD 43         mov [d], b
1886   1016             ; if(num == 0){ 
1887   1016             _if43_cond:
1888   1016 FA 05 00      lea d, [bp + 5] ; $num
1889   1019 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1890   101C FD 39         mov c, b ; And place it into C
1891   101E 2A            mov b, [d] ; Lower Word in B
1892   101F             ; --- START RELATIONAL
1893   101F D7            push a
1894   1020 FD D8         push g
1895   1022 11            mov a, b
1896   1023 FD 7A         mov g, c
1897   1025 FD 2E 00 00   mov32 cb, $00000000
1897   1029 00 00 
1898   102B 38 00 00      mov c, 0
1899   102E FD AF         cmp32 ga, cb
1900   1030 FD 71         seq ; ==
1901   1032 FD F1         pop g
1902   1034 E4            pop a
1903   1035             ; --- END RELATIONAL
1904   1035 C0 00 00      cmp b, 0
1905   1038 C6 4D 10      je _if43_exit
1906   103B             _if43_TRUE:
1907   103B             ; putchar('0'); 
1908   103B             ; --- START FUNCTION CALL
1909   103B FD 2E 30 00   mov32 cb, $00000030
1909   103F 00 00 
1910   1041 DD            push bl
1911   1042 07 F2 0F      call putchar
1912   1045 51 01 00      add sp, 1
1913   1048             ; --- END FUNCTION CALL
1914   1048             ; return; 
1915   1048 F9            leave
1916   1049 09            ret
1917   104A 0A 4D 10      jmp _if43_exit
1918   104D             _if43_exit:
1919   104D             ; while (num > 0) { 
1920   104D             _while44_cond:
1921   104D FA 05 00      lea d, [bp + 5] ; $num
1922   1050 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1923   1053 FD 39         mov c, b ; And place it into C
1924   1055 2A            mov b, [d] ; Lower Word in B
1925   1056             ; --- START RELATIONAL
1926   1056 D7            push a
1927   1057 FD D8         push g
1928   1059 11            mov a, b
1929   105A FD 7A         mov g, c
1930   105C FD 2E 00 00   mov32 cb, $00000000
1930   1060 00 00 
1931   1062 38 00 00      mov c, 0
1932   1065 FD AF         cmp32 ga, cb
1933   1067 FD 81         sgu
1934   1069 FD F1         pop g
1935   106B E4            pop a
1936   106C             ; --- END RELATIONAL
1937   106C C0 00 00      cmp b, 0
1938   106F C6 F4 10      je _while44_exit
1939   1072             _while44_block:
1940   1072             ; digits[i] = '0' + (num % 10); 
1941   1072 FA F7 FF      lea d, [bp + -9] ; $digits
1942   1075 D7            push a
1943   1076 DA            push d
1944   1077 FA F5 FF      lea d, [bp + -11] ; $i
1945   107A 2A            mov b, [d]
1946   107B 38 00 00      mov c, 0
1947   107E E7            pop d
1948   107F 5A            add d, b
1949   1080 E4            pop a
1950   1081 DA            push d
1951   1082 FD 2E 30 00   mov32 cb, $00000030
1951   1086 00 00 
1952   1088             ; --- START TERMS
1953   1088 D7            push a
1954   1089 11            mov a, b
1955   108A FA 05 00      lea d, [bp + 5] ; $num
1956   108D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1957   1090 FD 39         mov c, b ; And place it into C
1958   1092 2A            mov b, [d] ; Lower Word in B
1959   1093             ; --- START FACTORS
1960   1093 D7            push a
1961   1094 FD D8         push g
1962   1096 11            mov a, b
1963   1097 FD 7A         mov g, c
1964   1099 FD 2E 0A 00   mov32 cb, $0000000a
1964   109D 00 00 
1965   109F FD D8         push g ; save 'g' as the div instruction uses it
1966   10A1 AE            div a, b ; %, a: quotient, b: remainder
1967   10A2 11            mov a, b
1968   10A3 FD F1         pop g
1969   10A5 FD 38         mov c, g
1970   10A7 27            mov b, a
1971   10A8 FD F1         pop g
1972   10AA E4            pop a
1973   10AB             ; --- END FACTORS
1974   10AB FD 22 00 00   mov g, 0
1975   10AF FD 15         add32 cb, ga
1976   10B1 E4            pop a
1977   10B2             ; --- END TERMS
1978   10B2 E7            pop d
1979   10B3 FD 3E         mov [d], bl
1980   10B5             ; num = num / 10; 
1981   10B5 FA 05 00      lea d, [bp + 5] ; $num
1982   10B8 DA            push d
1983   10B9 FA 05 00      lea d, [bp + 5] ; $num
1984   10BC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1985   10BF FD 39         mov c, b ; And place it into C
1986   10C1 2A            mov b, [d] ; Lower Word in B
1987   10C2             ; --- START FACTORS
1988   10C2 D7            push a
1989   10C3 FD D8         push g
1990   10C5 11            mov a, b
1991   10C6 FD 7A         mov g, c
1992   10C8 FD 2E 0A 00   mov32 cb, $0000000a
1992   10CC 00 00 
1993   10CE FD D8         push g ; save 'g' as the div instruction uses it
1994   10D0 AE            div a, b ; /, a: quotient, b: remainder
1995   10D1 FD F1         pop g
1996   10D3 FD 38         mov c, g
1997   10D5 27            mov b, a
1998   10D6 FD F1         pop g
1999   10D8 E4            pop a
2000   10D9             ; --- END FACTORS
2001   10D9 E7            pop d
2002   10DA FD 43         mov [d], b
2003   10DC 28            mov b, c
2004   10DD FD 44 02 00   mov [d + 2], b
2005   10E1             ; i++; 
2006   10E1 FA F5 FF      lea d, [bp + -11] ; $i
2007   10E4 2A            mov b, [d]
2008   10E5 38 00 00      mov c, 0
2009   10E8 11            mov a, b
2010   10E9 FD 77         inc b
2011   10EB FA F5 FF      lea d, [bp + -11] ; $i
2012   10EE FD 43         mov [d], b
2013   10F0 27            mov b, a
2014   10F1 0A 4D 10      jmp _while44_cond
2015   10F4             _while44_exit:
2016   10F4             ; while (i > 0) { 
2017   10F4             _while51_cond:
2018   10F4 FA F5 FF      lea d, [bp + -11] ; $i
2019   10F7 2A            mov b, [d]
2020   10F8 38 00 00      mov c, 0
2021   10FB             ; --- START RELATIONAL
2022   10FB D7            push a
2023   10FC 11            mov a, b
2024   10FD FD 2E 00 00   mov32 cb, $00000000
2024   1101 00 00 
2025   1103 B0            cmp a, b
2026   1104 FD 7F         sgt ; >
2027   1106 E4            pop a
2028   1107             ; --- END RELATIONAL
2029   1107 C0 00 00      cmp b, 0
2030   110A C6 3C 11      je _while51_exit
2031   110D             _while51_block:
2032   110D             ; i--; 
2033   110D FA F5 FF      lea d, [bp + -11] ; $i
2034   1110 2A            mov b, [d]
2035   1111 38 00 00      mov c, 0
2036   1114 11            mov a, b
2037   1115 FD 7D         dec b
2038   1117 FA F5 FF      lea d, [bp + -11] ; $i
2039   111A FD 43         mov [d], b
2040   111C 27            mov b, a
2041   111D             ; putchar(digits[i]); 
2042   111D             ; --- START FUNCTION CALL
2043   111D FA F7 FF      lea d, [bp + -9] ; $digits
2044   1120 D7            push a
2045   1121 DA            push d
2046   1122 FA F5 FF      lea d, [bp + -11] ; $i
2047   1125 2A            mov b, [d]
2048   1126 38 00 00      mov c, 0
2049   1129 E7            pop d
2050   112A 5A            add d, b
2051   112B E4            pop a
2052   112C 32            mov bl, [d]
2053   112D A7 00         mov bh, 0
2054   112F 38 00 00      mov c, 0
2055   1132 DD            push bl
2056   1133 07 F2 0F      call putchar
2057   1136 51 01 00      add sp, 1
2058   1139             ; --- END FUNCTION CALL
2059   1139 0A F4 10      jmp _while51_cond
2060   113C             _while51_exit:
2061   113C F9            leave
2062   113D 09            ret
2063   113E             
2064   113E             printx32:
2065   113E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2066   1141             ; --- BEGIN INLINE ASM SEGMENT
2067   1141 FA 05 00      lea d, [bp + 5] ; $hex
2068   1144 2B 02 00      mov b, [d+2]
2069   1147 07 50 11      call print_u16x_printx32
2070   114A 2A            mov b, [d]
2071   114B 07 50 11      call print_u16x_printx32
2072   114E             ; --- END INLINE ASM SEGMENT
2073   114E             ; return; 
2074   114E F9            leave
2075   114F 09            ret
2076   1150             ; --- BEGIN INLINE ASM SEGMENT
2077   1150             print_u16x_printx32:
2078   1150 D7            push a
2079   1151 D8            push b
2080   1152 DD            push bl
2081   1153 30            mov bl, bh
2082   1154 07 72 11      call _itoa_printx32        ; convert bh to char in A
2083   1157 2F            mov bl, al        ; save al
2084   1158 19 00         mov al, 0
2085   115A 05 03         syscall sys_io        ; display AH
2086   115C 24            mov ah, bl        ; retrieve al
2087   115D 19 00         mov al, 0
2088   115F 05 03         syscall sys_io        ; display AL
2089   1161 EA            pop bl
2090   1162 07 72 11      call _itoa_printx32        ; convert bh to char in A
2091   1165 2F            mov bl, al        ; save al
2092   1166 19 00         mov al, 0
2093   1168 05 03         syscall sys_io        ; display AH
2094   116A 24            mov ah, bl        ; retrieve al
2095   116B 19 00         mov al, 0
2096   116D 05 03         syscall sys_io        ; display AL
2097   116F E5            pop b
2098   1170 E4            pop a
2099   1171 09            ret
2100   1172             _itoa_printx32:
2101   1172 DA            push d
2102   1173 D8            push b
2103   1174 A7 00         mov bh, 0
2104   1176 FD A4 04      shr bl, 4  
2105   1179 74            mov d, b
2106   117A 1F 8C 11      mov al, [d + s_hex_digits_printx32]
2107   117D 23            mov ah, al
2108   117E E5            pop b
2109   117F D8            push b
2110   1180 A7 00         mov bh, 0
2111   1182 FD 87 0F      and bl, $0F
2112   1185 74            mov d, b
2113   1186 1F 8C 11      mov al, [d + s_hex_digits_printx32]
2114   1189 E5            pop b
2115   118A E7            pop d
2116   118B 09            ret
2117   118C 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2117   1190 34 35 36 37 
2117   1194 38 39 41 42 
2117   1198 43 44 45 46 
2118   119C             ; --- END INLINE ASM SEGMENT
2119   119C F9            leave
2120   119D 09            ret
2121   119E             
2122   119E             err:
2123   119E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2124   11A1             ; print(e); 
2125   11A1             ; --- START FUNCTION CALL
2126   11A1 FA 05 00      lea d, [bp + 5] ; $e
2127   11A4 2A            mov b, [d]
2128   11A5 38 00 00      mov c, 0
2129   11A8 FD AB         swp b
2130   11AA D8            push b
2131   11AB 07 B3 11      call print
2132   11AE 51 02 00      add sp, 2
2133   11B1             ; --- END FUNCTION CALL
2134   11B1 F9            leave
2135   11B2 09            ret
2136   11B3             
2137   11B3             print:
2138   11B3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2139   11B6             ; --- BEGIN INLINE ASM SEGMENT
2140   11B6 FA 05 00      lea d, [bp + 5] ; $s
2141   11B9 FD 2A         mov d, [d]
2142   11BB             _puts_L1_print:
2143   11BB 1E            mov al, [d]
2144   11BC B9 00         cmp al, 0
2145   11BE C6 CA 11      jz _puts_END_print
2146   11C1 23            mov ah, al
2147   11C2 19 00         mov al, 0
2148   11C4 05 03         syscall sys_io
2149   11C6 79            inc d
2150   11C7 0A BB 11      jmp _puts_L1_print
2151   11CA             _puts_END_print:
2152   11CA             ; --- END INLINE ASM SEGMENT
2153   11CA F9            leave
2154   11CB 09            ret
2155   11CC             
2156   11CC             print_signed:
2157   11CC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2158   11CF             ; char digits[5]; 
2159   11CF 52 05 00      sub sp, 5
2160   11D2             ; int i = 0; 
2161   11D2 52 02 00      sub sp, 2
2162   11D5             ; --- START LOCAL VAR INITIALIZATION
2163   11D5 FA FA FF      lea d, [bp + -6] ; $i
2164   11D8 DA            push d
2165   11D9 FD 2E 00 00   mov32 cb, $00000000
2165   11DD 00 00 
2166   11DF E7            pop d
2167   11E0 FD 43         mov [d], b
2168   11E2             ; --- END LOCAL VAR INITIALIZATION
2169   11E2             ; if (num < 0) { 
2170   11E2             _if52_cond:
2171   11E2 FA 05 00      lea d, [bp + 5] ; $num
2172   11E5 2A            mov b, [d]
2173   11E6 38 00 00      mov c, 0
2174   11E9             ; --- START RELATIONAL
2175   11E9 D7            push a
2176   11EA 11            mov a, b
2177   11EB FD 2E 00 00   mov32 cb, $00000000
2177   11EF 00 00 
2178   11F1 B0            cmp a, b
2179   11F2 FD 73         slt ; < (signed)
2180   11F4 E4            pop a
2181   11F5             ; --- END RELATIONAL
2182   11F5 C0 00 00      cmp b, 0
2183   11F8 C6 1B 12      je _if52_else
2184   11FB             _if52_TRUE:
2185   11FB             ; putchar('-'); 
2186   11FB             ; --- START FUNCTION CALL
2187   11FB FD 2E 2D 00   mov32 cb, $0000002d
2187   11FF 00 00 
2188   1201 DD            push bl
2189   1202 07 F2 0F      call putchar
2190   1205 51 01 00      add sp, 1
2191   1208             ; --- END FUNCTION CALL
2192   1208             ; num = -num; 
2193   1208 FA 05 00      lea d, [bp + 5] ; $num
2194   120B DA            push d
2195   120C FA 05 00      lea d, [bp + 5] ; $num
2196   120F 2A            mov b, [d]
2197   1210 38 00 00      mov c, 0
2198   1213 FD 97         neg b
2199   1215 E7            pop d
2200   1216 FD 43         mov [d], b
2201   1218 0A 46 12      jmp _if52_exit
2202   121B             _if52_else:
2203   121B             ; if (num == 0) { 
2204   121B             _if53_cond:
2205   121B FA 05 00      lea d, [bp + 5] ; $num
2206   121E 2A            mov b, [d]
2207   121F 38 00 00      mov c, 0
2208   1222             ; --- START RELATIONAL
2209   1222 D7            push a
2210   1223 11            mov a, b
2211   1224 FD 2E 00 00   mov32 cb, $00000000
2211   1228 00 00 
2212   122A B0            cmp a, b
2213   122B FD 71         seq ; ==
2214   122D E4            pop a
2215   122E             ; --- END RELATIONAL
2216   122E C0 00 00      cmp b, 0
2217   1231 C6 46 12      je _if53_exit
2218   1234             _if53_TRUE:
2219   1234             ; putchar('0'); 
2220   1234             ; --- START FUNCTION CALL
2221   1234 FD 2E 30 00   mov32 cb, $00000030
2221   1238 00 00 
2222   123A DD            push bl
2223   123B 07 F2 0F      call putchar
2224   123E 51 01 00      add sp, 1
2225   1241             ; --- END FUNCTION CALL
2226   1241             ; return; 
2227   1241 F9            leave
2228   1242 09            ret
2229   1243 0A 46 12      jmp _if53_exit
2230   1246             _if53_exit:
2231   1246             _if52_exit:
2232   1246             ; while (num > 0) { 
2233   1246             _while54_cond:
2234   1246 FA 05 00      lea d, [bp + 5] ; $num
2235   1249 2A            mov b, [d]
2236   124A 38 00 00      mov c, 0
2237   124D             ; --- START RELATIONAL
2238   124D D7            push a
2239   124E 11            mov a, b
2240   124F FD 2E 00 00   mov32 cb, $00000000
2240   1253 00 00 
2241   1255 B0            cmp a, b
2242   1256 FD 7F         sgt ; >
2243   1258 E4            pop a
2244   1259             ; --- END RELATIONAL
2245   1259 C0 00 00      cmp b, 0
2246   125C C6 D3 12      je _while54_exit
2247   125F             _while54_block:
2248   125F             ; digits[i] = '0' + (num % 10); 
2249   125F FA FC FF      lea d, [bp + -4] ; $digits
2250   1262 D7            push a
2251   1263 DA            push d
2252   1264 FA FA FF      lea d, [bp + -6] ; $i
2253   1267 2A            mov b, [d]
2254   1268 38 00 00      mov c, 0
2255   126B E7            pop d
2256   126C 5A            add d, b
2257   126D E4            pop a
2258   126E DA            push d
2259   126F FD 2E 30 00   mov32 cb, $00000030
2259   1273 00 00 
2260   1275             ; --- START TERMS
2261   1275 D7            push a
2262   1276 11            mov a, b
2263   1277 FA 05 00      lea d, [bp + 5] ; $num
2264   127A 2A            mov b, [d]
2265   127B 38 00 00      mov c, 0
2266   127E             ; --- START FACTORS
2267   127E D7            push a
2268   127F FD D8         push g
2269   1281 11            mov a, b
2270   1282 FD 7A         mov g, c
2271   1284 FD 2E 0A 00   mov32 cb, $0000000a
2271   1288 00 00 
2272   128A FD D8         push g ; save 'g' as the div instruction uses it
2273   128C AE            div a, b ; %, a: quotient, b: remainder
2274   128D 11            mov a, b
2275   128E FD F1         pop g
2276   1290 FD 38         mov c, g
2277   1292 27            mov b, a
2278   1293 FD F1         pop g
2279   1295 E4            pop a
2280   1296             ; --- END FACTORS
2281   1296 56            add b, a
2282   1297 E4            pop a
2283   1298             ; --- END TERMS
2284   1298 E7            pop d
2285   1299 FD 3E         mov [d], bl
2286   129B             ; num = num / 10; 
2287   129B FA 05 00      lea d, [bp + 5] ; $num
2288   129E DA            push d
2289   129F FA 05 00      lea d, [bp + 5] ; $num
2290   12A2 2A            mov b, [d]
2291   12A3 38 00 00      mov c, 0
2292   12A6             ; --- START FACTORS
2293   12A6 D7            push a
2294   12A7 FD D8         push g
2295   12A9 11            mov a, b
2296   12AA FD 7A         mov g, c
2297   12AC FD 2E 0A 00   mov32 cb, $0000000a
2297   12B0 00 00 
2298   12B2 FD D8         push g ; save 'g' as the div instruction uses it
2299   12B4 AE            div a, b ; /, a: quotient, b: remainder
2300   12B5 FD F1         pop g
2301   12B7 FD 38         mov c, g
2302   12B9 27            mov b, a
2303   12BA FD F1         pop g
2304   12BC E4            pop a
2305   12BD             ; --- END FACTORS
2306   12BD E7            pop d
2307   12BE FD 43         mov [d], b
2308   12C0             ; i++; 
2309   12C0 FA FA FF      lea d, [bp + -6] ; $i
2310   12C3 2A            mov b, [d]
2311   12C4 38 00 00      mov c, 0
2312   12C7 11            mov a, b
2313   12C8 FD 77         inc b
2314   12CA FA FA FF      lea d, [bp + -6] ; $i
2315   12CD FD 43         mov [d], b
2316   12CF 27            mov b, a
2317   12D0 0A 46 12      jmp _while54_cond
2318   12D3             _while54_exit:
2319   12D3             ; while (i > 0) { 
2320   12D3             _while61_cond:
2321   12D3 FA FA FF      lea d, [bp + -6] ; $i
2322   12D6 2A            mov b, [d]
2323   12D7 38 00 00      mov c, 0
2324   12DA             ; --- START RELATIONAL
2325   12DA D7            push a
2326   12DB 11            mov a, b
2327   12DC FD 2E 00 00   mov32 cb, $00000000
2327   12E0 00 00 
2328   12E2 B0            cmp a, b
2329   12E3 FD 7F         sgt ; >
2330   12E5 E4            pop a
2331   12E6             ; --- END RELATIONAL
2332   12E6 C0 00 00      cmp b, 0
2333   12E9 C6 1B 13      je _while61_exit
2334   12EC             _while61_block:
2335   12EC             ; i--; 
2336   12EC FA FA FF      lea d, [bp + -6] ; $i
2337   12EF 2A            mov b, [d]
2338   12F0 38 00 00      mov c, 0
2339   12F3 11            mov a, b
2340   12F4 FD 7D         dec b
2341   12F6 FA FA FF      lea d, [bp + -6] ; $i
2342   12F9 FD 43         mov [d], b
2343   12FB 27            mov b, a
2344   12FC             ; putchar(digits[i]); 
2345   12FC             ; --- START FUNCTION CALL
2346   12FC FA FC FF      lea d, [bp + -4] ; $digits
2347   12FF D7            push a
2348   1300 DA            push d
2349   1301 FA FA FF      lea d, [bp + -6] ; $i
2350   1304 2A            mov b, [d]
2351   1305 38 00 00      mov c, 0
2352   1308 E7            pop d
2353   1309 5A            add d, b
2354   130A E4            pop a
2355   130B 32            mov bl, [d]
2356   130C A7 00         mov bh, 0
2357   130E 38 00 00      mov c, 0
2358   1311 DD            push bl
2359   1312 07 F2 0F      call putchar
2360   1315 51 01 00      add sp, 1
2361   1318             ; --- END FUNCTION CALL
2362   1318 0A D3 12      jmp _while61_cond
2363   131B             _while61_exit:
2364   131B F9            leave
2365   131C 09            ret
2366   131D             
2367   131D             print_unsigned:
2368   131D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2369   1320             ; char digits[5]; 
2370   1320 52 05 00      sub sp, 5
2371   1323             ; int i; 
2372   1323 52 02 00      sub sp, 2
2373   1326             ; i = 0; 
2374   1326 FA FA FF      lea d, [bp + -6] ; $i
2375   1329 DA            push d
2376   132A FD 2E 00 00   mov32 cb, $00000000
2376   132E 00 00 
2377   1330 E7            pop d
2378   1331 FD 43         mov [d], b
2379   1333             ; if(num == 0){ 
2380   1333             _if62_cond:
2381   1333 FA 05 00      lea d, [bp + 5] ; $num
2382   1336 2A            mov b, [d]
2383   1337 38 00 00      mov c, 0
2384   133A             ; --- START RELATIONAL
2385   133A D7            push a
2386   133B 11            mov a, b
2387   133C FD 2E 00 00   mov32 cb, $00000000
2387   1340 00 00 
2388   1342 B0            cmp a, b
2389   1343 FD 71         seq ; ==
2390   1345 E4            pop a
2391   1346             ; --- END RELATIONAL
2392   1346 C0 00 00      cmp b, 0
2393   1349 C6 5E 13      je _if62_exit
2394   134C             _if62_TRUE:
2395   134C             ; putchar('0'); 
2396   134C             ; --- START FUNCTION CALL
2397   134C FD 2E 30 00   mov32 cb, $00000030
2397   1350 00 00 
2398   1352 DD            push bl
2399   1353 07 F2 0F      call putchar
2400   1356 51 01 00      add sp, 1
2401   1359             ; --- END FUNCTION CALL
2402   1359             ; return; 
2403   1359 F9            leave
2404   135A 09            ret
2405   135B 0A 5E 13      jmp _if62_exit
2406   135E             _if62_exit:
2407   135E             ; while (num > 0) { 
2408   135E             _while63_cond:
2409   135E FA 05 00      lea d, [bp + 5] ; $num
2410   1361 2A            mov b, [d]
2411   1362 38 00 00      mov c, 0
2412   1365             ; --- START RELATIONAL
2413   1365 D7            push a
2414   1366 11            mov a, b
2415   1367 FD 2E 00 00   mov32 cb, $00000000
2415   136B 00 00 
2416   136D B0            cmp a, b
2417   136E FD 81         sgu ; > (unsigned)
2418   1370 E4            pop a
2419   1371             ; --- END RELATIONAL
2420   1371 C0 00 00      cmp b, 0
2421   1374 C6 EB 13      je _while63_exit
2422   1377             _while63_block:
2423   1377             ; digits[i] = '0' + (num % 10); 
2424   1377 FA FC FF      lea d, [bp + -4] ; $digits
2425   137A D7            push a
2426   137B DA            push d
2427   137C FA FA FF      lea d, [bp + -6] ; $i
2428   137F 2A            mov b, [d]
2429   1380 38 00 00      mov c, 0
2430   1383 E7            pop d
2431   1384 5A            add d, b
2432   1385 E4            pop a
2433   1386 DA            push d
2434   1387 FD 2E 30 00   mov32 cb, $00000030
2434   138B 00 00 
2435   138D             ; --- START TERMS
2436   138D D7            push a
2437   138E 11            mov a, b
2438   138F FA 05 00      lea d, [bp + 5] ; $num
2439   1392 2A            mov b, [d]
2440   1393 38 00 00      mov c, 0
2441   1396             ; --- START FACTORS
2442   1396 D7            push a
2443   1397 FD D8         push g
2444   1399 11            mov a, b
2445   139A FD 7A         mov g, c
2446   139C FD 2E 0A 00   mov32 cb, $0000000a
2446   13A0 00 00 
2447   13A2 FD D8         push g ; save 'g' as the div instruction uses it
2448   13A4 AE            div a, b ; %, a: quotient, b: remainder
2449   13A5 11            mov a, b
2450   13A6 FD F1         pop g
2451   13A8 FD 38         mov c, g
2452   13AA 27            mov b, a
2453   13AB FD F1         pop g
2454   13AD E4            pop a
2455   13AE             ; --- END FACTORS
2456   13AE 56            add b, a
2457   13AF E4            pop a
2458   13B0             ; --- END TERMS
2459   13B0 E7            pop d
2460   13B1 FD 3E         mov [d], bl
2461   13B3             ; num = num / 10; 
2462   13B3 FA 05 00      lea d, [bp + 5] ; $num
2463   13B6 DA            push d
2464   13B7 FA 05 00      lea d, [bp + 5] ; $num
2465   13BA 2A            mov b, [d]
2466   13BB 38 00 00      mov c, 0
2467   13BE             ; --- START FACTORS
2468   13BE D7            push a
2469   13BF FD D8         push g
2470   13C1 11            mov a, b
2471   13C2 FD 7A         mov g, c
2472   13C4 FD 2E 0A 00   mov32 cb, $0000000a
2472   13C8 00 00 
2473   13CA FD D8         push g ; save 'g' as the div instruction uses it
2474   13CC AE            div a, b ; /, a: quotient, b: remainder
2475   13CD FD F1         pop g
2476   13CF FD 38         mov c, g
2477   13D1 27            mov b, a
2478   13D2 FD F1         pop g
2479   13D4 E4            pop a
2480   13D5             ; --- END FACTORS
2481   13D5 E7            pop d
2482   13D6 FD 43         mov [d], b
2483   13D8             ; i++; 
2484   13D8 FA FA FF      lea d, [bp + -6] ; $i
2485   13DB 2A            mov b, [d]
2486   13DC 38 00 00      mov c, 0
2487   13DF 11            mov a, b
2488   13E0 FD 77         inc b
2489   13E2 FA FA FF      lea d, [bp + -6] ; $i
2490   13E5 FD 43         mov [d], b
2491   13E7 27            mov b, a
2492   13E8 0A 5E 13      jmp _while63_cond
2493   13EB             _while63_exit:
2494   13EB             ; while (i > 0) { 
2495   13EB             _while70_cond:
2496   13EB FA FA FF      lea d, [bp + -6] ; $i
2497   13EE 2A            mov b, [d]
2498   13EF 38 00 00      mov c, 0
2499   13F2             ; --- START RELATIONAL
2500   13F2 D7            push a
2501   13F3 11            mov a, b
2502   13F4 FD 2E 00 00   mov32 cb, $00000000
2502   13F8 00 00 
2503   13FA B0            cmp a, b
2504   13FB FD 7F         sgt ; >
2505   13FD E4            pop a
2506   13FE             ; --- END RELATIONAL
2507   13FE C0 00 00      cmp b, 0
2508   1401 C6 33 14      je _while70_exit
2509   1404             _while70_block:
2510   1404             ; i--; 
2511   1404 FA FA FF      lea d, [bp + -6] ; $i
2512   1407 2A            mov b, [d]
2513   1408 38 00 00      mov c, 0
2514   140B 11            mov a, b
2515   140C FD 7D         dec b
2516   140E FA FA FF      lea d, [bp + -6] ; $i
2517   1411 FD 43         mov [d], b
2518   1413 27            mov b, a
2519   1414             ; putchar(digits[i]); 
2520   1414             ; --- START FUNCTION CALL
2521   1414 FA FC FF      lea d, [bp + -4] ; $digits
2522   1417 D7            push a
2523   1418 DA            push d
2524   1419 FA FA FF      lea d, [bp + -6] ; $i
2525   141C 2A            mov b, [d]
2526   141D 38 00 00      mov c, 0
2527   1420 E7            pop d
2528   1421 5A            add d, b
2529   1422 E4            pop a
2530   1423 32            mov bl, [d]
2531   1424 A7 00         mov bh, 0
2532   1426 38 00 00      mov c, 0
2533   1429 DD            push bl
2534   142A 07 F2 0F      call putchar
2535   142D 51 01 00      add sp, 1
2536   1430             ; --- END FUNCTION CALL
2537   1430 0A EB 13      jmp _while70_cond
2538   1433             _while70_exit:
2539   1433 F9            leave
2540   1434 09            ret
2541   1435             
2542   1435             printx16:
2543   1435 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2544   1438             ; --- BEGIN INLINE ASM SEGMENT
2545   1438 FA 05 00      lea d, [bp + 5] ; $hex
2546   143B 2A            mov b, [d]
2547   143C             print_u16x_printx16:
2548   143C DD            push bl
2549   143D 30            mov bl, bh
2550   143E 07 5B 14      call _itoa_printx16        ; convert bh to char in A
2551   1441 2F            mov bl, al        ; save al
2552   1442 19 00         mov al, 0
2553   1444 05 03         syscall sys_io        ; display AH
2554   1446 24            mov ah, bl        ; retrieve al
2555   1447 19 00         mov al, 0
2556   1449 05 03         syscall sys_io        ; display AL
2557   144B EA            pop bl
2558   144C 07 5B 14      call _itoa_printx16        ; convert bh to char in A
2559   144F 2F            mov bl, al        ; save al
2560   1450 19 00         mov al, 0
2561   1452 05 03         syscall sys_io        ; display AH
2562   1454 24            mov ah, bl        ; retrieve al
2563   1455 19 00         mov al, 0
2564   1457 05 03         syscall sys_io        ; display AL
2565   1459             ; --- END INLINE ASM SEGMENT
2566   1459             ; return; 
2567   1459 F9            leave
2568   145A 09            ret
2569   145B             ; --- BEGIN INLINE ASM SEGMENT
2570   145B             _itoa_printx16:
2571   145B DA            push d
2572   145C D8            push b
2573   145D A7 00         mov bh, 0
2574   145F FD A4 04      shr bl, 4  
2575   1462 74            mov d, b
2576   1463 1F 75 14      mov al, [d + s_hex_digits_printx16]
2577   1466 23            mov ah, al
2578   1467 E5            pop b
2579   1468 D8            push b
2580   1469 A7 00         mov bh, 0
2581   146B FD 87 0F      and bl, $0F
2582   146E 74            mov d, b
2583   146F 1F 75 14      mov al, [d + s_hex_digits_printx16]
2584   1472 E5            pop b
2585   1473 E7            pop d
2586   1474 09            ret
2587   1475 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
2587   1479 34 35 36 37 
2587   147D 38 39 41 42 
2587   1481 43 44 45 46 
2588   1485             ; --- END INLINE ASM SEGMENT
2589   1485 F9            leave
2590   1486 09            ret
2591   1487             
2592   1487             puts:
2593   1487 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2594   148A             ; --- BEGIN INLINE ASM SEGMENT
2595   148A FA 05 00      lea d, [bp + 5] ; $s
2596   148D FD 2A         mov d, [d]
2597   148F             _puts_L1_puts:
2598   148F 1E            mov al, [d]
2599   1490 B9 00         cmp al, 0
2600   1492 C6 9E 14      jz _puts_END_puts
2601   1495 23            mov ah, al
2602   1496 19 00         mov al, 0
2603   1498 05 03         syscall sys_io
2604   149A 79            inc d
2605   149B 0A 8F 14      jmp _puts_L1_puts
2606   149E             _puts_END_puts:
2607   149E 10 00 0A      mov a, $0A00
2608   14A1 05 03         syscall sys_io
2609   14A3             ; --- END INLINE ASM SEGMENT
2610   14A3 F9            leave
2611   14A4 09            ret
2612   14A5             ; --- END TEXT SEGMENT
2613   14A5             
2614   14A5             ; --- BEGIN DATA SEGMENT
2615   14A5 1B 5B 32 4A _clear_data: .db $1b,$5b,$32,$4a,$1b,$5b,$48,$00,
2615   14A9 1B 5B 48 00 
2616   14AD             
2617   14AD 00 00 00    .fill 3, 0
2618   14B0 00 00 00 00 _nextState_data: .fill 1200, 0
2618   14B4 00 00 00 00 
2618   14B8 00 00 00 00 
2618   14BC 00 00 00 00 
2618   14C0 00 00 00 00 
2618   14C4 00 00 00 00 
2618   14C8 00 00 00 00 
2618   14CC 00 00 00 00 
2618   14D0 00 00 00 00 
2618   14D4 00 00 00 00 
2618   14D8 00 00 00 00 
2618   14DC 00 00 00 00 
2618   14E0 00 00 00 00 
2618   14E4 00 00 00 00 
2618   14E8 00 00 00 00 
2618   14EC 00 00 00 00 
2618   14F0 00 00 00 00 
2618   14F4 00 00 00 00 
2618   14F8 00 00 00 00 
2618   14FC 00 00 00 00 
2618   1500 00 00 00 00 
2618   1504 00 00 00 00 
2618   1508 00 00 00 00 
2618   150C 00 00 00 00 
2618   1510 00 00 00 00 
2618   1514 00 00 00 00 
2618   1518 00 00 00 00 
2618   151C 00 00 00 00 
2618   1520 00 00 00 00 
2618   1524 00 00 00 00 
2618   1528 00 00 00 00 
2618   152C 00 00 00 00 
2618   1530 00 00 00 00 
2618   1534 00 00 00 00 
2618   1538 00 00 00 00 
2618   153C 00 00 00 00 
2618   1540 00 00 00 00 
2618   1544 00 00 00 00 
2618   1548 00 00 00 00 
2618   154C 00 00 00 00 
2618   1550 00 00 00 00 
2618   1554 00 00 00 00 
2618   1558 00 00 00 00 
2618   155C 00 00 00 00 
2618   1560 00 00 00 00 
2618   1564 00 00 00 00 
2618   1568 00 00 00 00 
2618   156C 00 00 00 00 
2618   1570 00 00 00 00 
2618   1574 00 00 00 00 
2618   1578 00 00 00 00 
2618   157C 00 00 00 00 
2618   1580 00 00 00 00 
2618   1584 00 00 00 00 
2618   1588 00 00 00 00 
2618   158C 00 00 00 00 
2618   1590 00 00 00 00 
2618   1594 00 00 00 00 
2618   1598 00 00 00 00 
2618   159C 00 00 00 00 
2618   15A0 00 00 00 00 
2618   15A4 00 00 00 00 
2618   15A8 00 00 00 00 
2618   15AC 00 00 00 00 
2618   15B0 00 00 00 00 
2618   15B4 00 00 00 00 
2618   15B8 00 00 00 00 
2618   15BC 00 00 00 00 
2618   15C0 00 00 00 00 
2618   15C4 00 00 00 00 
2618   15C8 00 00 00 00 
2618   15CC 00 00 00 00 
2618   15D0 00 00 00 00 
2618   15D4 00 00 00 00 
2618   15D8 00 00 00 00 
2618   15DC 00 00 00 00 
2618   15E0 00 00 00 00 
2618   15E4 00 00 00 00 
2618   15E8 00 00 00 00 
2618   15EC 00 00 00 00 
2618   15F0 00 00 00 00 
2618   15F4 00 00 00 00 
2618   15F8 00 00 00 00 
2618   15FC 00 00 00 00 
2618   1600 00 00 00 00 
2618   1604 00 00 00 00 
2618   1608 00 00 00 00 
2618   160C 00 00 00 00 
2618   1610 00 00 00 00 
2618   1614 00 00 00 00 
2618   1618 00 00 00 00 
2618   161C 00 00 00 00 
2618   1620 00 00 00 00 
2618   1624 00 00 00 00 
2618   1628 00 00 00 00 
2618   162C 00 00 00 00 
2618   1630 00 00 00 00 
2618   1634 00 00 00 00 
2618   1638 00 00 00 00 
2618   163C 00 00 00 00 
2618   1640 00 00 00 00 
2618   1644 00 00 00 00 
2618   1648 00 00 00 00 
2618   164C 00 00 00 00 
2618   1650 00 00 00 00 
2618   1654 00 00 00 00 
2618   1658 00 00 00 00 
2618   165C 00 00 00 00 
2618   1660 00 00 00 00 
2618   1664 00 00 00 00 
2618   1668 00 00 00 00 
2618   166C 00 00 00 00 
2618   1670 00 00 00 00 
2618   1674 00 00 00 00 
2618   1678 00 00 00 00 
2618   167C 00 00 00 00 
2618   1680 00 00 00 00 
2618   1684 00 00 00 00 
2618   1688 00 00 00 00 
2618   168C 00 00 00 00 
2618   1690 00 00 00 00 
2618   1694 00 00 00 00 
2618   1698 00 00 00 00 
2618   169C 00 00 00 00 
2618   16A0 00 00 00 00 
2618   16A4 00 00 00 00 
2618   16A8 00 00 00 00 
2618   16AC 00 00 00 00 
2618   16B0 00 00 00 00 
2618   16B4 00 00 00 00 
2618   16B8 00 00 00 00 
2618   16BC 00 00 00 00 
2618   16C0 00 00 00 00 
2618   16C4 00 00 00 00 
2618   16C8 00 00 00 00 
2618   16CC 00 00 00 00 
2618   16D0 00 00 00 00 
2618   16D4 00 00 00 00 
2618   16D8 00 00 00 00 
2618   16DC 00 00 00 00 
2618   16E0 00 00 00 00 
2618   16E4 00 00 00 00 
2618   16E8 00 00 00 00 
2618   16EC 00 00 00 00 
2618   16F0 00 00 00 00 
2618   16F4 00 00 00 00 
2618   16F8 00 00 00 00 
2618   16FC 00 00 00 00 
2618   1700 00 00 00 00 
2618   1704 00 00 00 00 
2618   1708 00 00 00 00 
2618   170C 00 00 00 00 
2618   1710 00 00 00 00 
2618   1714 00 00 00 00 
2618   1718 00 00 00 00 
2618   171C 00 00 00 00 
2618   1720 00 00 00 00 
2618   1724 00 00 00 00 
2618   1728 00 00 00 00 
2618   172C 00 00 00 00 
2618   1730 00 00 00 00 
2618   1734 00 00 00 00 
2618   1738 00 00 00 00 
2618   173C 00 00 00 00 
2618   1740 00 00 00 00 
2618   1744 00 00 00 00 
2618   1748 00 00 00 00 
2618   174C 00 00 00 00 
2618   1750 00 00 00 00 
2618   1754 00 00 00 00 
2618   1758 00 00 00 00 
2618   175C 00 00 00 00 
2618   1760 00 00 00 00 
2618   1764 00 00 00 00 
2618   1768 00 00 00 00 
2618   176C 00 00 00 00 
2618   1770 00 00 00 00 
2618   1774 00 00 00 00 
2618   1778 00 00 00 00 
2618   177C 00 00 00 00 
2618   1780 00 00 00 00 
2618   1784 00 00 00 00 
2618   1788 00 00 00 00 
2618   178C 00 00 00 00 
2618   1790 00 00 00 00 
2618   1794 00 00 00 00 
2618   1798 00 00 00 00 
2618   179C 00 00 00 00 
2618   17A0 00 00 00 00 
2618   17A4 00 00 00 00 
2618   17A8 00 00 00 00 
2618   17AC 00 00 00 00 
2618   17B0 00 00 00 00 
2618   17B4 00 00 00 00 
2618   17B8 00 00 00 00 
2618   17BC 00 00 00 00 
2618   17C0 00 00 00 00 
2618   17C4 00 00 00 00 
2618   17C8 00 00 00 00 
2618   17CC 00 00 00 00 
2618   17D0 00 00 00 00 
2618   17D4 00 00 00 00 
2618   17D8 00 00 00 00 
2618   17DC 00 00 00 00 
2618   17E0 00 00 00 00 
2618   17E4 00 00 00 00 
2618   17E8 00 00 00 00 
2618   17EC 00 00 00 00 
2618   17F0 00 00 00 00 
2618   17F4 00 00 00 00 
2618   17F8 00 00 00 00 
2618   17FC 00 00 00 00 
2618   1800 00 00 00 00 
2618   1804 00 00 00 00 
2618   1808 00 00 00 00 
2618   180C 00 00 00 00 
2618   1810 00 00 00 00 
2618   1814 00 00 00 00 
2618   1818 00 00 00 00 
2618   181C 00 00 00 00 
2618   1820 00 00 00 00 
2618   1824 00 00 00 00 
2618   1828 00 00 00 00 
2618   182C 00 00 00 00 
2618   1830 00 00 00 00 
2618   1834 00 00 00 00 
2618   1838 00 00 00 00 
2618   183C 00 00 00 00 
2618   1840 00 00 00 00 
2618   1844 00 00 00 00 
2618   1848 00 00 00 00 
2618   184C 00 00 00 00 
2618   1850 00 00 00 00 
2618   1854 00 00 00 00 
2618   1858 00 00 00 00 
2618   185C 00 00 00 00 
2618   1860 00 00 00 00 
2618   1864 00 00 00 00 
2618   1868 00 00 00 00 
2618   186C 00 00 00 00 
2618   1870 00 00 00 00 
2618   1874 00 00 00 00 
2618   1878 00 00 00 00 
2618   187C 00 00 00 00 
2618   1880 00 00 00 00 
2618   1884 00 00 00 00 
2618   1888 00 00 00 00 
2618   188C 00 00 00 00 
2618   1890 00 00 00 00 
2618   1894 00 00 00 00 
2618   1898 00 00 00 00 
2618   189C 00 00 00 00 
2618   18A0 00 00 00 00 
2618   18A4 00 00 00 00 
2618   18A8 00 00 00 00 
2618   18AC 00 00 00 00 
2618   18B0 00 00 00 00 
2618   18B4 00 00 00 00 
2618   18B8 00 00 00 00 
2618   18BC 00 00 00 00 
2618   18C0 00 00 00 00 
2618   18C4 00 00 00 00 
2618   18C8 00 00 00 00 
2618   18CC 00 00 00 00 
2618   18D0 00 00 00 00 
2618   18D4 00 00 00 00 
2618   18D8 00 00 00 00 
2618   18DC 00 00 00 00 
2618   18E0 00 00 00 00 
2618   18E4 00 00 00 00 
2618   18E8 00 00 00 00 
2618   18EC 00 00 00 00 
2618   18F0 00 00 00 00 
2618   18F4 00 00 00 00 
2618   18F8 00 00 00 00 
2618   18FC 00 00 00 00 
2618   1900 00 00 00 00 
2618   1904 00 00 00 00 
2618   1908 00 00 00 00 
2618   190C 00 00 00 00 
2618   1910 00 00 00 00 
2618   1914 00 00 00 00 
2618   1918 00 00 00 00 
2618   191C 00 00 00 00 
2618   1920 00 00 00 00 
2618   1924 00 00 00 00 
2618   1928 00 00 00 00 
2618   192C 00 00 00 00 
2618   1930 00 00 00 00 
2618   1934 00 00 00 00 
2618   1938 00 00 00 00 
2618   193C 00 00 00 00 
2618   1940 00 00 00 00 
2618   1944 00 00 00 00 
2618   1948 00 00 00 00 
2618   194C 00 00 00 00 
2618   1950 00 00 00 00 
2618   1954 00 00 00 00 
2618   1958 00 00 00 00 
2618   195C 00 00 00 00 
2619   1960 20 20 20 20 _currState_data: .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2619   1964 20 20 20 20 
2619   1968 20 20 20 20 
2619   196C 20 20 20 
2620   196F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2620   1973 20 20 20 20 
2620   1977 20 20 20 20 
2620   197B 20 20 20 20 
2621   197F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2621   1983 20 20 20 20 
2621   1987 20 20 20 20 
2621   198B 20 20 20 20 
2622   198F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2622   1993 20 20 20 20 
2622   1997 20 20 20 20 
2622   199B 20 20 20 20 
2623   199F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2623   19A3 20 20 20 20 
2623   19A7 20 20 20 20 
2623   19AB 20 20 20 20 
2624   19AF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2624   19B3 20 20 20 20 
2624   19B7 20 20 20 20 
2624   19BB 20 20 20 20 
2625   19BF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2625   19C3 20 20 20 20 
2625   19C7 20 20 20 20 
2625   19CB 20 20 20 20 
2626   19CF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2626   19D3 20 20 20 20 
2626   19D7 20 20 20 20 
2626   19DB 20 20 20 20 
2627   19DF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2627   19E3 20 20 20 20 
2627   19E7 20 20 20 20 
2627   19EB 20 20 20 20 
2628   19EF 20 20 20 20 .db $20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2628   19F3 40 20 20 20 
2628   19F7 20 20 20 20 
2628   19FB 20 20 20 20 
2629   19FF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2629   1A03 20 20 20 20 
2629   1A07 20 20 20 20 
2629   1A0B 20 20 20 20 
2630   1A0F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,
2630   1A13 20 20 20 20 
2630   1A17 20 20 40 20 
2630   1A1B 40 20 20 20 
2631   1A1F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2631   1A23 20 20 20 20 
2631   1A27 20 20 20 20 
2631   1A2B 20 20 20 20 
2632   1A2F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,
2632   1A33 20 20 20 20 
2632   1A37 40 40 20 20 
2632   1A3B 20 20 20 20 
2633   1A3F 40 40 20 20 .db $40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,
2633   1A43 20 20 20 20 
2633   1A47 20 20 20 20 
2633   1A4B 20 20 40 40 
2634   1A4F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,
2634   1A53 20 20 20 20 
2634   1A57 20 20 20 20 
2634   1A5B 20 20 20 40 
2635   1A5F 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,
2635   1A63 20 20 20 20 
2635   1A67 40 40 20 20 
2635   1A6B 20 20 20 20 
2636   1A6F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,
2636   1A73 20 20 40 40 
2636   1A77 20 20 20 20 
2636   1A7B 40 40 20 20 
2637   1A7F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,
2637   1A83 20 20 40 20 
2637   1A87 20 20 20 20 
2637   1A8B 40 20 20 20 
2638   1A8F 40 40 20 20 .db $40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2638   1A93 20 20 20 20 
2638   1A97 20 20 20 20 
2638   1A9B 20 20 20 20 
2639   1A9F 20 20 20 20 .db $20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,
2639   1AA3 40 40 20 20 
2639   1AA7 20 20 20 20 
2639   1AAB 20 20 40 20 
2640   1AAF 20 20 40 20 .db $20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,
2640   1AB3 40 40 20 20 
2640   1AB7 20 20 40 20 
2640   1ABB 40 20 20 20 
2641   1ABF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2641   1AC3 20 20 20 20 
2641   1AC7 20 20 20 20 
2641   1ACB 20 20 20 20 
2642   1ACF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,
2642   1AD3 20 20 40 20 
2642   1AD7 20 20 20 20 
2642   1ADB 40 20 20 20 
2643   1ADF 20 20 20 20 .db $20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2643   1AE3 40 20 20 20 
2643   1AE7 20 20 20 20 
2643   1AEB 20 20 20 20 
2644   1AEF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,
2644   1AF3 20 20 20 20 
2644   1AF7 20 20 20 20 
2644   1AFB 20 20 20 40 
2645   1AFF 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2645   1B03 20 20 20 20 
2645   1B07 20 20 20 20 
2645   1B0B 20 20 20 20 
2646   1B0F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2646   1B13 20 20 20 20 
2646   1B17 20 20 20 20 
2646   1B1B 20 20 20 20 
2647   1B1F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,
2647   1B23 20 20 20 20 
2647   1B27 40 40 20 20 
2647   1B2B 20 20 20 20 
2648   1B2F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2648   1B33 20 20 20 20 
2648   1B37 20 20 20 20 
2648   1B3B 20 20 20 20 
2649   1B3F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2649   1B43 20 20 20 20 
2649   1B47 20 20 20 20 
2649   1B4B 20 20 20 20 
2650   1B4F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2650   1B53 20 20 20 20 
2650   1B57 20 20 20 20 
2650   1B5B 20 20 20 20 
2651   1B5F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2651   1B63 20 20 20 20 
2651   1B67 20 20 20 20 
2651   1B6B 20 20 20 20 
2652   1B6F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2652   1B73 20 20 20 20 
2652   1B77 20 20 20 20 
2652   1B7B 20 20 20 20 
2653   1B7F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2653   1B83 20 20 20 20 
2653   1B87 20 20 20 20 
2653   1B8B 20 20 20 20 
2654   1B8F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2654   1B93 20 20 20 20 
2654   1B97 20 20 20 20 
2654   1B9B 20 20 20 20 
2655   1B9F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2655   1BA3 20 20 20 20 
2655   1BA7 20 20 20 20 
2655   1BAB 20 20 20 20 
2656   1BAF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2656   1BB3 20 20 20 20 
2656   1BB7 20 20 20 20 
2656   1BBB 20 20 20 20 
2657   1BBF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2657   1BC3 20 20 20 20 
2657   1BC7 20 20 20 20 
2657   1BCB 20 20 20 20 
2658   1BCF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2658   1BD3 20 20 20 20 
2658   1BD7 20 20 20 20 
2658   1BDB 20 20 20 20 
2659   1BDF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2659   1BE3 20 20 20 20 
2659   1BE7 20 20 20 20 
2659   1BEB 20 20 20 20 
2660   1BEF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2660   1BF3 20 20 20 20 
2660   1BF7 20 20 20 20 
2660   1BFB 20 20 20 20 
2661   1BFF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2661   1C03 20 20 20 20 
2661   1C07 20 20 20 20 
2661   1C0B 20 20 20 20 
2662   1C0F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2662   1C13 20 20 20 20 
2662   1C17 20 20 20 20 
2662   1C1B 20 20 20 20 
2663   1C1F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2663   1C23 20 20 20 20 
2663   1C27 20 20 20 20 
2663   1C2B 20 20 20 20 
2664   1C2F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2664   1C33 20 20 20 20 
2664   1C37 20 20 20 20 
2664   1C3B 20 20 20 20 
2665   1C3F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2665   1C43 20 20 20 20 
2665   1C47 20 20 20 20 
2665   1C4B 20 20 20 20 
2666   1C4F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2666   1C53 20 20 20 20 
2666   1C57 20 20 20 20 
2666   1C5B 20 20 20 20 
2667   1C5F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2667   1C63 20 20 20 20 
2667   1C67 20 20 20 20 
2667   1C6B 20 20 20 20 
2668   1C6F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2668   1C73 20 20 20 20 
2668   1C77 20 20 20 20 
2668   1C7B 20 20 20 20 
2669   1C7F 20          .db $20,
2670   1C80             
2671   1C80 00 00 00 00 .fill 400, 0
2671   1C84 00 00 00 00 
2671   1C88 00 00 00 00 
2671   1C8C 00 00 00 00 
2671   1C90 00 00 00 00 
2671   1C94 00 00 00 00 
2671   1C98 00 00 00 00 
2671   1C9C 00 00 00 00 
2671   1CA0 00 00 00 00 
2671   1CA4 00 00 00 00 
2671   1CA8 00 00 00 00 
2671   1CAC 00 00 00 00 
2671   1CB0 00 00 00 00 
2671   1CB4 00 00 00 00 
2671   1CB8 00 00 00 00 
2671   1CBC 00 00 00 00 
2671   1CC0 00 00 00 00 
2671   1CC4 00 00 00 00 
2671   1CC8 00 00 00 00 
2671   1CCC 00 00 00 00 
2671   1CD0 00 00 00 00 
2671   1CD4 00 00 00 00 
2671   1CD8 00 00 00 00 
2671   1CDC 00 00 00 00 
2671   1CE0 00 00 00 00 
2671   1CE4 00 00 00 00 
2671   1CE8 00 00 00 00 
2671   1CEC 00 00 00 00 
2671   1CF0 00 00 00 00 
2671   1CF4 00 00 00 00 
2671   1CF8 00 00 00 00 
2671   1CFC 00 00 00 00 
2671   1D00 00 00 00 00 
2671   1D04 00 00 00 00 
2671   1D08 00 00 00 00 
2671   1D0C 00 00 00 00 
2671   1D10 00 00 00 00 
2671   1D14 00 00 00 00 
2671   1D18 00 00 00 00 
2671   1D1C 00 00 00 00 
2671   1D20 00 00 00 00 
2671   1D24 00 00 00 00 
2671   1D28 00 00 00 00 
2671   1D2C 00 00 00 00 
2671   1D30 00 00 00 00 
2671   1D34 00 00 00 00 
2671   1D38 00 00 00 00 
2671   1D3C 00 00 00 00 
2671   1D40 00 00 00 00 
2671   1D44 00 00 00 00 
2671   1D48 00 00 00 00 
2671   1D4C 00 00 00 00 
2671   1D50 00 00 00 00 
2671   1D54 00 00 00 00 
2671   1D58 00 00 00 00 
2671   1D5C 00 00 00 00 
2671   1D60 00 00 00 00 
2671   1D64 00 00 00 00 
2671   1D68 00 00 00 00 
2671   1D6C 00 00 00 00 
2671   1D70 00 00 00 00 
2671   1D74 00 00 00 00 
2671   1D78 00 00 00 00 
2671   1D7C 00 00 00 00 
2671   1D80 00 00 00 00 
2671   1D84 00 00 00 00 
2671   1D88 00 00 00 00 
2671   1D8C 00 00 00 00 
2671   1D90 00 00 00 00 
2671   1D94 00 00 00 00 
2671   1D98 00 00 00 00 
2671   1D9C 00 00 00 00 
2671   1DA0 00 00 00 00 
2671   1DA4 00 00 00 00 
2671   1DA8 00 00 00 00 
2671   1DAC 00 00 00 00 
2671   1DB0 00 00 00 00 
2671   1DB4 00 00 00 00 
2671   1DB8 00 00 00 00 
2671   1DBC 00 00 00 00 
2671   1DC0 00 00 00 00 
2671   1DC4 00 00 00 00 
2671   1DC8 00 00 00 00 
2671   1DCC 00 00 00 00 
2671   1DD0 00 00 00 00 
2671   1DD4 00 00 00 00 
2671   1DD8 00 00 00 00 
2671   1DDC 00 00 00 00 
2671   1DE0 00 00 00 00 
2671   1DE4 00 00 00 00 
2671   1DE8 00 00 00 00 
2671   1DEC 00 00 00 00 
2671   1DF0 00 00 00 00 
2671   1DF4 00 00 00 00 
2671   1DF8 00 00 00 00 
2671   1DFC 00 00 00 00 
2671   1E00 00 00 00 00 
2671   1E04 00 00 00 00 
2671   1E08 00 00 00 00 
2671   1E0C 00 00 00 00 
2672   1E10 40 20 00    _s0: .db "@ ", 0
2673   1E13 2E 20 00    _s1: .db ". ", 0
2674   1E16 0A 0D 00    _s2: .db "\n\r", 0
2675   1E19 0A 0D 50 72 _s3: .db "\n\rPress CTRL+C to quit.\n\r", 0
2675   1E1D 65 73 73 20 
2675   1E21 43 54 52 4C 
2675   1E25 2B 43 20 74 
2675   1E29 6F 20 71 75 
2675   1E2D 69 74 2E 0A 
2675   1E31 0D 00 
2676   1E33 55 6E 65 78 _s4: .db "Unexpected format in printf.", 0
2676   1E37 70 65 63 74 
2676   1E3B 65 64 20 66 
2676   1E3F 6F 72 6D 61 
2676   1E43 74 20 69 6E 
2676   1E47 20 70 72 69 
2676   1E4B 6E 74 66 2E 
2676   1E4F 00 
2677   1E50 45 72 72 6F _s5: .db "Error: Unknown argument type.\n", 0
2677   1E54 72 3A 20 55 
2677   1E58 6E 6B 6E 6F 
2677   1E5C 77 6E 20 61 
2677   1E60 72 67 75 6D 
2677   1E64 65 6E 74 20 
2677   1E68 74 79 70 65 
2677   1E6C 2E 0A 00 
2678   1E6F             
2679   1E6F 71 1E       _heap_top: .dw _heap
2680   1E71 00          _heap: .db 0
2681   1E72             ; --- END DATA SEGMENT
2682   1E72             
2683   1E72             .end
tasm: Number of errors = 0
