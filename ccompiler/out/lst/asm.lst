0001   0000             ; --- FILENAME: ../solarium/asm/asm.c
0002   0000             ; --- DATE:     06-07-2025 at 21:33:46
0003   0000             .include "lib/asm/kernel.exp"
0001+  0000             fdc_al_restore   .EQU  $0000
0002+  0000             fdc_al_step      .EQU  $0001
0003+  0000             fdc_al_step_in   .EQU  $0002
0004+  0000             fdc_al_step_out  .EQU  $0003
0005+  0000             fdc_al_seek      .EQU  $0004
0006+  0000             fdc_al_format_128 .EQU  $0005
0007+  0000             fdc_al_formatdisk_128 .EQU  $0006
0008+  0000             fdc_al_format_512 .EQU  $0007
0009+  0000             fdc_al_formatdisk_512 .EQU  $0008
0010+  0000             fdc_al_read_addr .EQU  $0009
0011+  0000             fdc_al_read_track .EQU  $000a
0012+  0000             fdc_al_read_sect .EQU  $000b
0013+  0000             fdc_al_write_sect .EQU  $000c
0014+  0000             fdc_al_force_int .EQU  $000d
0015+  0000             fdc_al_status0   .EQU  $000e
0016+  0000             fdc_al_status1   .EQU  $000f
0017+  0000             noname._7seg_display .EQU  $ffb0
0018+  0000             noname._fdc_config .EQU  $ffc0
0019+  0000             noname._fdc_status_0 .EQU  $ffc1
0020+  0000             noname._fdc_stat_cmd .EQU  $ffc8
0021+  0000             sys_break        .EQU  $0000
0022+  0000             sys_rtc          .EQU  $0001
0023+  0000             sys_ide          .EQU  $0002
0024+  0000             sys_io           .EQU  $0003
0025+  0000             sys_filesystem   .EQU  $0004
0026+  0000             sys_create_proc  .EQU  $0005
0027+  0000             sys_list_proc    .EQU  $0006
0028+  0000             sys_datetime     .EQU  $0007
0029+  0000             sys_reboot       .EQU  $0008
0030+  0000             sys_pause_proc   .EQU  $0009
0031+  0000             sys_resume_proc  .EQU  $000a
0032+  0000             sys_terminate_proc .EQU  $000b
0033+  0000             sys_system       .EQU  $000c
0034+  0000             sys_fdc          .EQU  $000d
0035+  0000             text_org         .EQU  $0400
0004   0000             .include "lib/asm/bios.exp"
0001+  0000             bios_reset_vector .equ  $01c0
0002+  0000             ide_buffer       .equ  $8204
0003+  0000             boot_origin      .equ  $8004
0004+  0000             bios_uart        .equ  $0002
0005+  0000             bios_ide         .equ  $0003
0005   0000             
0006   0000             ; --- BEGIN TEXT SEGMENT
0007   0400             .org text_org
0008   0400             main:
0009   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0010   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0011   0408             ; char *p; 
0012   0408 52 02 00      sub sp, 2
0013   040B             ; printf("\n"); 
0014   040B             ; --- START FUNCTION CALL
0015   040B 26 FC 4F      mov b, _s10 ; "\n"
0016   040E FD AB         swp b
0017   0410 D8            push b
0018   0411 07 8F 3E      call printf
0019   0414 51 02 00      add sp, 2
0020   0417             ; --- END FUNCTION CALL
0021   0417             ; program = malloc(16384); 
0022   0417 3B A7 4F      mov d, _program ; $program
0023   041A DA            push d
0024   041B             ; --- START FUNCTION CALL
0025   041B FD 2E 00 40   mov32 cb, $00004000
0025   041F 00 00 
0026   0421 FD AB         swp b
0027   0423 D8            push b
0028   0424 07 A3 47      call malloc
0029   0427 51 02 00      add sp, 2
0030   042A             ; --- END FUNCTION CALL
0031   042A E7            pop d
0032   042B FD 43         mov [d], b
0033   042D             ; bin_out = malloc(16384); 
0034   042D 3B A9 4F      mov d, _bin_out ; $bin_out
0035   0430 DA            push d
0036   0431             ; --- START FUNCTION CALL
0037   0431 FD 2E 00 40   mov32 cb, $00004000
0037   0435 00 00 
0038   0437 FD AB         swp b
0039   0439 D8            push b
0040   043A 07 A3 47      call malloc
0041   043D 51 02 00      add sp, 2
0042   0440             ; --- END FUNCTION CALL
0043   0440 E7            pop d
0044   0441 FD 43         mov [d], b
0045   0443             ; opcode_table = malloc(12310); 
0046   0443 3B AD 4F      mov d, _opcode_table ; $opcode_table
0047   0446 DA            push d
0048   0447             ; --- START FUNCTION CALL
0049   0447 FD 2E 16 30   mov32 cb, $00003016
0049   044B 00 00 
0050   044D FD AB         swp b
0051   044F D8            push b
0052   0450 07 A3 47      call malloc
0053   0453 51 02 00      add sp, 2
0054   0456             ; --- END FUNCTION CALL
0055   0456 E7            pop d
0056   0457 FD 43         mov [d], b
0057   0459             ; loadfile(0x0000, program); 
0058   0459             ; --- START FUNCTION CALL
0059   0459 3B A7 4F      mov d, _program ; $program
0060   045C 2A            mov b, [d]
0061   045D 38 00 00      mov c, 0
0062   0460 FD AB         swp b
0063   0462 D8            push b
0064   0463 FD 2E 00 00   mov32 cb, $00000000
0064   0467 00 00 
0065   0469 FD AB         swp b
0066   046B D8            push b
0067   046C 07 CF 3D      call loadfile
0068   046F 51 04 00      add sp, 4
0069   0472             ; --- END FUNCTION CALL
0070   0472             ; loadfile("./config.d/op_tbl", opcode_table); 
0071   0472             ; --- START FUNCTION CALL
0072   0472 3B AD 4F      mov d, _opcode_table ; $opcode_table
0073   0475 2A            mov b, [d]
0074   0476 38 00 00      mov c, 0
0075   0479 FD AB         swp b
0076   047B D8            push b
0077   047C 26 FE 4F      mov b, _s11 ; "./config.d/op_tbl"
0078   047F FD AB         swp b
0079   0481 D8            push b
0080   0482 07 CF 3D      call loadfile
0081   0485 51 04 00      add sp, 4
0082   0488             ; --- END FUNCTION CALL
0083   0488             ; p = program; 
0084   0488 FA FF FF      lea d, [bp + -1] ; $p
0085   048B DA            push d
0086   048C 3B A7 4F      mov d, _program ; $program
0087   048F 2A            mov b, [d]
0088   0490 38 00 00      mov c, 0
0089   0493 E7            pop d
0090   0494 FD 43         mov [d], b
0091   0496             ; while(*p) p++; 
0092   0496             _while1_cond:
0093   0496 FA FF FF      lea d, [bp + -1] ; $p
0094   0499 2A            mov b, [d]
0095   049A 38 00 00      mov c, 0
0096   049D 74            mov d, b
0097   049E 32            mov bl, [d]
0098   049F A7 00         mov bh, 0
0099   04A1 38 00 00      mov c, 0
0100   04A4 C0 00 00      cmp b, 0
0101   04A7 C6 BD 04      je _while1_exit
0102   04AA             _while1_block:
0103   04AA             ; p++; 
0104   04AA FA FF FF      lea d, [bp + -1] ; $p
0105   04AD 2A            mov b, [d]
0106   04AE 38 00 00      mov c, 0
0107   04B1 FD 77         inc b
0108   04B3 FA FF FF      lea d, [bp + -1] ; $p
0109   04B6 FD 43         mov [d], b
0110   04B8 FD 7D         dec b
0111   04BA 0A 96 04      jmp _while1_cond
0112   04BD             _while1_exit:
0113   04BD             ; while(is_space(*p)) p--; 
0114   04BD             _while2_cond:
0115   04BD             ; --- START FUNCTION CALL
0116   04BD FA FF FF      lea d, [bp + -1] ; $p
0117   04C0 2A            mov b, [d]
0118   04C1 38 00 00      mov c, 0
0119   04C4 74            mov d, b
0120   04C5 32            mov bl, [d]
0121   04C6 A7 00         mov bh, 0
0122   04C8 38 00 00      mov c, 0
0123   04CB DD            push bl
0124   04CC 07 D4 47      call is_space
0125   04CF 51 01 00      add sp, 1
0126   04D2             ; --- END FUNCTION CALL
0127   04D2 C0 00 00      cmp b, 0
0128   04D5 C6 EB 04      je _while2_exit
0129   04D8             _while2_block:
0130   04D8             ; p--; 
0131   04D8 FA FF FF      lea d, [bp + -1] ; $p
0132   04DB 2A            mov b, [d]
0133   04DC 38 00 00      mov c, 0
0134   04DF FD 7D         dec b
0135   04E1 FA FF FF      lea d, [bp + -1] ; $p
0136   04E4 FD 43         mov [d], b
0137   04E6 FD 77         inc b
0138   04E8 0A BD 04      jmp _while2_cond
0139   04EB             _while2_exit:
0140   04EB             ; p++; 
0141   04EB FA FF FF      lea d, [bp + -1] ; $p
0142   04EE 2A            mov b, [d]
0143   04EF 38 00 00      mov c, 0
0144   04F2 FD 77         inc b
0145   04F4 FA FF FF      lea d, [bp + -1] ; $p
0146   04F7 FD 43         mov [d], b
0147   04F9 FD 7D         dec b
0148   04FB             ; *p = '\0'; 
0149   04FB FA FF FF      lea d, [bp + -1] ; $p
0150   04FE 2A            mov b, [d]
0151   04FF 38 00 00      mov c, 0
0152   0502 D8            push b
0153   0503 FD 2E 00 00   mov32 cb, $00000000
0153   0507 00 00 
0154   0509 E7            pop d
0155   050A FD 3E         mov [d], bl
0156   050C             ; prog = program; 
0157   050C 3B 63 4E      mov d, _prog ; $prog
0158   050F DA            push d
0159   0510 3B A7 4F      mov d, _program ; $program
0160   0513 2A            mov b, [d]
0161   0514 38 00 00      mov c, 0
0162   0517 E7            pop d
0163   0518 FD 43         mov [d], b
0164   051A             ; bin_p = bin_out + _org; 
0165   051A 3B AB 4F      mov d, _bin_p ; $bin_p
0166   051D DA            push d
0167   051E 3B A9 4F      mov d, _bin_out ; $bin_out
0168   0521 2A            mov b, [d]
0169   0522 38 00 00      mov c, 0
0170   0525             ; --- START TERMS
0171   0525 D7            push a
0172   0526 11            mov a, b
0173   0527 3B 5A 4E      mov d, __org ; $_org
0174   052A 2A            mov b, [d]
0175   052B 38 00 00      mov c, 0
0176   052E 56            add b, a
0177   052F E4            pop a
0178   0530             ; --- END TERMS
0179   0530 E7            pop d
0180   0531 FD 43         mov [d], b
0181   0533             ; pc = _org; 
0182   0533 3B 5C 4E      mov d, _pc ; $pc
0183   0536 DA            push d
0184   0537 3B 5A 4E      mov d, __org ; $_org
0185   053A 2A            mov b, [d]
0186   053B 38 00 00      mov c, 0
0187   053E E7            pop d
0188   053F FD 43         mov [d], b
0189   0541             ; prog_size = 0; 
0190   0541 3B C5 4F      mov d, _prog_size ; $prog_size
0191   0544 DA            push d
0192   0545 FD 2E 00 00   mov32 cb, $00000000
0192   0549 00 00 
0193   054B E7            pop d
0194   054C FD 43         mov [d], b
0195   054E             ; label_directive_scan(); 
0196   054E             ; --- START FUNCTION CALL
0197   054E 07 3E 0A      call label_directive_scan
0198   0551             ; prog_size = 0; 
0199   0551 3B C5 4F      mov d, _prog_size ; $prog_size
0200   0554 DA            push d
0201   0555 FD 2E 00 00   mov32 cb, $00000000
0201   0559 00 00 
0202   055B E7            pop d
0203   055C FD 43         mov [d], b
0204   055E             ; parse_text(); 
0205   055E             ; --- START FUNCTION CALL
0206   055E 07 46 1C      call parse_text
0207   0561             ; parse_data(); 
0208   0561             ; --- START FUNCTION CALL
0209   0561 07 69 05      call parse_data
0210   0564             ; display_output(); 
0211   0564             ; --- START FUNCTION CALL
0212   0564 07 88 1E      call display_output
0213   0567 05 0B         syscall sys_terminate_proc
0214   0569             
0215   0569             parse_data:
0216   0569 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0217   056C             ; printf("Parsing DATA section..."); 
0218   056C             ; --- START FUNCTION CALL
0219   056C 26 10 50      mov b, _s12 ; "Parsing DATA section..."
0220   056F FD AB         swp b
0221   0571 D8            push b
0222   0572 07 8F 3E      call printf
0223   0575 51 02 00      add sp, 2
0224   0578             ; --- END FUNCTION CALL
0225   0578             ; for(;;){ 
0226   0578             _for3_init:
0227   0578             _for3_cond:
0228   0578             _for3_block:
0229   0578             ; get(); 
0230   0578             ; --- START FUNCTION CALL
0231   0578 07 92 2B      call get
0232   057B             ; if(toktype == END) error("Data segment not found."); 
0233   057B             _if4_cond:
0234   057B 3B 61 4E      mov d, _toktype ; $toktype
0235   057E 2A            mov b, [d]
0236   057F 38 00 00      mov c, 0
0237   0582             ; --- START RELATIONAL
0238   0582 D7            push a
0239   0583 11            mov a, b
0240   0584 FD 2E 07 00   mov32 cb, $7 ; enum element: END
0240   0588 00 00 
0241   058A B0            cmp a, b
0242   058B FD 71         seq ; ==
0243   058D E4            pop a
0244   058E             ; --- END RELATIONAL
0245   058E C0 00 00      cmp b, 0
0246   0591 C6 A3 05      je _if4_exit
0247   0594             _if4_TRUE:
0248   0594             ; error("Data segment not found."); 
0249   0594             ; --- START FUNCTION CALL
0250   0594 26 28 50      mov b, _s13 ; "Data segment not found."
0251   0597 FD AB         swp b
0252   0599 D8            push b
0253   059A 07 98 39      call error
0254   059D 51 02 00      add sp, 2
0255   05A0             ; --- END FUNCTION CALL
0256   05A0 0A A3 05      jmp _if4_exit
0257   05A3             _if4_exit:
0258   05A3             ; if(tok == DOT){ 
0259   05A3             _if5_cond:
0260   05A3 3B 5F 4E      mov d, _tok ; $tok
0261   05A6 2A            mov b, [d]
0262   05A7 38 00 00      mov c, 0
0263   05AA             ; --- START RELATIONAL
0264   05AA D7            push a
0265   05AB 11            mov a, b
0266   05AC FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
0266   05B0 00 00 
0267   05B2 B0            cmp a, b
0268   05B3 FD 71         seq ; ==
0269   05B5 E4            pop a
0270   05B6             ; --- END RELATIONAL
0271   05B6 C0 00 00      cmp b, 0
0272   05B9 C6 E1 05      je _if5_exit
0273   05BC             _if5_TRUE:
0274   05BC             ; get(); 
0275   05BC             ; --- START FUNCTION CALL
0276   05BC 07 92 2B      call get
0277   05BF             ; if(tok == DATA) break; 
0278   05BF             _if6_cond:
0279   05BF 3B 5F 4E      mov d, _tok ; $tok
0280   05C2 2A            mov b, [d]
0281   05C3 38 00 00      mov c, 0
0282   05C6             ; --- START RELATIONAL
0283   05C6 D7            push a
0284   05C7 11            mov a, b
0285   05C8 FD 2E 03 00   mov32 cb, $3 ; enum element: DATA
0285   05CC 00 00 
0286   05CE B0            cmp a, b
0287   05CF FD 71         seq ; ==
0288   05D1 E4            pop a
0289   05D2             ; --- END RELATIONAL
0290   05D2 C0 00 00      cmp b, 0
0291   05D5 C6 DE 05      je _if6_exit
0292   05D8             _if6_TRUE:
0293   05D8             ; break; 
0294   05D8 0A E4 05      jmp _for3_exit ; for break
0295   05DB 0A DE 05      jmp _if6_exit
0296   05DE             _if6_exit:
0297   05DE 0A E1 05      jmp _if5_exit
0298   05E1             _if5_exit:
0299   05E1             _for3_update:
0300   05E1 0A 78 05      jmp _for3_cond
0301   05E4             _for3_exit:
0302   05E4             ; for(;;){ 
0303   05E4             _for7_init:
0304   05E4             _for7_cond:
0305   05E4             _for7_block:
0306   05E4             ; get(); 
0307   05E4             ; --- START FUNCTION CALL
0308   05E4 07 92 2B      call get
0309   05E7             ; if(tok == SEGMENT_END) break; 
0310   05E7             _if8_cond:
0311   05E7 3B 5F 4E      mov d, _tok ; $tok
0312   05EA 2A            mov b, [d]
0313   05EB 38 00 00      mov c, 0
0314   05EE             ; --- START RELATIONAL
0315   05EE D7            push a
0316   05EF 11            mov a, b
0317   05F0 FD 2E 05 00   mov32 cb, $5 ; enum element: SEGMENT_END
0317   05F4 00 00 
0318   05F6 B0            cmp a, b
0319   05F7 FD 71         seq ; ==
0320   05F9 E4            pop a
0321   05FA             ; --- END RELATIONAL
0322   05FA C0 00 00      cmp b, 0
0323   05FD C6 06 06      je _if8_exit
0324   0600             _if8_TRUE:
0325   0600             ; break; 
0326   0600 0A 45 08      jmp _for7_exit ; for break
0327   0603 0A 06 06      jmp _if8_exit
0328   0606             _if8_exit:
0329   0606             ; if(tok == DB){ 
0330   0606             _if9_cond:
0331   0606 3B 5F 4E      mov d, _tok ; $tok
0332   0609 2A            mov b, [d]
0333   060A 38 00 00      mov c, 0
0334   060D             ; --- START RELATIONAL
0335   060D D7            push a
0336   060E 11            mov a, b
0337   060F FD 2E 06 00   mov32 cb, $6 ; enum element: DB
0337   0613 00 00 
0338   0615 B0            cmp a, b
0339   0616 FD 71         seq ; ==
0340   0618 E4            pop a
0341   0619             ; --- END RELATIONAL
0342   0619 C0 00 00      cmp b, 0
0343   061C C6 19 07      je _if9_else
0344   061F             _if9_TRUE:
0345   061F             ; printf(".db: "); 
0346   061F             ; --- START FUNCTION CALL
0347   061F 26 40 50      mov b, _s14 ; ".db: "
0348   0622 FD AB         swp b
0349   0624 D8            push b
0350   0625 07 8F 3E      call printf
0351   0628 51 02 00      add sp, 2
0352   062B             ; --- END FUNCTION CALL
0353   062B             ; for(;;){ 
0354   062B             _for10_init:
0355   062B             _for10_cond:
0356   062B             _for10_block:
0357   062B             ; get(); 
0358   062B             ; --- START FUNCTION CALL
0359   062B 07 92 2B      call get
0360   062E             ; if(toktype == CHAR_CONST){ 
0361   062E             _if11_cond:
0362   062E 3B 61 4E      mov d, _toktype ; $toktype
0363   0631 2A            mov b, [d]
0364   0632 38 00 00      mov c, 0
0365   0635             ; --- START RELATIONAL
0366   0635 D7            push a
0367   0636 11            mov a, b
0368   0637 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0368   063B 00 00 
0369   063D B0            cmp a, b
0370   063E FD 71         seq ; ==
0371   0640 E4            pop a
0372   0641             ; --- END RELATIONAL
0373   0641 C0 00 00      cmp b, 0
0374   0644 C6 8F 06      je _if11_else
0375   0647             _if11_TRUE:
0376   0647             ; emit_byte(string_const[0], 0); 
0377   0647             ; --- START FUNCTION CALL
0378   0647 FD 2E 00 00   mov32 cb, $00000000
0378   064B 00 00 
0379   064D DD            push bl
0380   064E 3B A5 4E      mov d, _string_const_data ; $string_const
0381   0651 D7            push a
0382   0652 DA            push d
0383   0653 FD 2E 00 00   mov32 cb, $00000000
0383   0657 00 00 
0384   0659 E7            pop d
0385   065A 5A            add d, b
0386   065B E4            pop a
0387   065C 32            mov bl, [d]
0388   065D A7 00         mov bh, 0
0389   065F 38 00 00      mov c, 0
0390   0662 DD            push bl
0391   0663 07 97 27      call emit_byte
0392   0666 51 02 00      add sp, 2
0393   0669             ; --- END FUNCTION CALL
0394   0669             ; printf("%d", string_const[0]); 
0395   0669             ; --- START FUNCTION CALL
0396   0669 3B A5 4E      mov d, _string_const_data ; $string_const
0397   066C D7            push a
0398   066D DA            push d
0399   066E FD 2E 00 00   mov32 cb, $00000000
0399   0672 00 00 
0400   0674 E7            pop d
0401   0675 5A            add d, b
0402   0676 E4            pop a
0403   0677 32            mov bl, [d]
0404   0678 A7 00         mov bh, 0
0405   067A 38 00 00      mov c, 0
0406   067D FD AB         swp b
0407   067F D8            push b
0408   0680 26 46 50      mov b, _s15 ; "%d"
0409   0683 FD AB         swp b
0410   0685 D8            push b
0411   0686 07 8F 3E      call printf
0412   0689 51 03 00      add sp, 3
0413   068C             ; --- END FUNCTION CALL
0414   068C 0A D6 06      jmp _if11_exit
0415   068F             _if11_else:
0416   068F             ; if(toktype == INTEGER_CONST){ 
0417   068F             _if12_cond:
0418   068F 3B 61 4E      mov d, _toktype ; $toktype
0419   0692 2A            mov b, [d]
0420   0693 38 00 00      mov c, 0
0421   0696             ; --- START RELATIONAL
0422   0696 D7            push a
0423   0697 11            mov a, b
0424   0698 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0424   069C 00 00 
0425   069E B0            cmp a, b
0426   069F FD 71         seq ; ==
0427   06A1 E4            pop a
0428   06A2             ; --- END RELATIONAL
0429   06A2 C0 00 00      cmp b, 0
0430   06A5 C6 D6 06      je _if12_exit
0431   06A8             _if12_TRUE:
0432   06A8             ; emit_byte(int_const, 0); 
0433   06A8             ; --- START FUNCTION CALL
0434   06A8 FD 2E 00 00   mov32 cb, $00000000
0434   06AC 00 00 
0435   06AE DD            push bl
0436   06AF 3B A5 4F      mov d, _int_const ; $int_const
0437   06B2 2A            mov b, [d]
0438   06B3 38 00 00      mov c, 0
0439   06B6 DD            push bl
0440   06B7 07 97 27      call emit_byte
0441   06BA 51 02 00      add sp, 2
0442   06BD             ; --- END FUNCTION CALL
0443   06BD             ; printf("%d", int_const); 
0444   06BD             ; --- START FUNCTION CALL
0445   06BD 3B A5 4F      mov d, _int_const ; $int_const
0446   06C0 2A            mov b, [d]
0447   06C1 38 00 00      mov c, 0
0448   06C4 FD AB         swp b
0449   06C6 D8            push b
0450   06C7 26 46 50      mov b, _s15 ; "%d"
0451   06CA FD AB         swp b
0452   06CC D8            push b
0453   06CD 07 8F 3E      call printf
0454   06D0 51 04 00      add sp, 4
0455   06D3             ; --- END FUNCTION CALL
0456   06D3 0A D6 06      jmp _if12_exit
0457   06D6             _if12_exit:
0458   06D6             _if11_exit:
0459   06D6             ; get(); 
0460   06D6             ; --- START FUNCTION CALL
0461   06D6 07 92 2B      call get
0462   06D9             ; if(tok != COMMA){ 
0463   06D9             _if13_cond:
0464   06D9 3B 5F 4E      mov d, _tok ; $tok
0465   06DC 2A            mov b, [d]
0466   06DD 38 00 00      mov c, 0
0467   06E0             ; --- START RELATIONAL
0468   06E0 D7            push a
0469   06E1 11            mov a, b
0470   06E2 FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0470   06E6 00 00 
0471   06E8 B0            cmp a, b
0472   06E9 FD 72         sneq ; !=
0473   06EB E4            pop a
0474   06EC             ; --- END RELATIONAL
0475   06EC C0 00 00      cmp b, 0
0476   06EF C6 FB 06      je _if13_exit
0477   06F2             _if13_TRUE:
0478   06F2             ; back(); 
0479   06F2             ; --- START FUNCTION CALL
0480   06F2 07 05 28      call back
0481   06F5             ; break; 
0482   06F5 0A 0A 07      jmp _for10_exit ; for break
0483   06F8 0A FB 06      jmp _if13_exit
0484   06FB             _if13_exit:
0485   06FB             ; printf(", "); 
0486   06FB             ; --- START FUNCTION CALL
0487   06FB 26 49 50      mov b, _s16 ; ", "
0488   06FE FD AB         swp b
0489   0700 D8            push b
0490   0701 07 8F 3E      call printf
0491   0704 51 02 00      add sp, 2
0492   0707             ; --- END FUNCTION CALL
0493   0707             _for10_update:
0494   0707 0A 2B 06      jmp _for10_cond
0495   070A             _for10_exit:
0496   070A             ; printf("\n"); 
0497   070A             ; --- START FUNCTION CALL
0498   070A 26 FC 4F      mov b, _s10 ; "\n"
0499   070D FD AB         swp b
0500   070F D8            push b
0501   0710 07 8F 3E      call printf
0502   0713 51 02 00      add sp, 2
0503   0716             ; --- END FUNCTION CALL
0504   0716 0A 42 08      jmp _if9_exit
0505   0719             _if9_else:
0506   0719             ; if(tok == DW){ 
0507   0719             _if14_cond:
0508   0719 3B 5F 4E      mov d, _tok ; $tok
0509   071C 2A            mov b, [d]
0510   071D 38 00 00      mov c, 0
0511   0720             ; --- START RELATIONAL
0512   0720 D7            push a
0513   0721 11            mov a, b
0514   0722 FD 2E 07 00   mov32 cb, $7 ; enum element: DW
0514   0726 00 00 
0515   0728 B0            cmp a, b
0516   0729 FD 71         seq ; ==
0517   072B E4            pop a
0518   072C             ; --- END RELATIONAL
0519   072C C0 00 00      cmp b, 0
0520   072F C6 42 08      je _if14_exit
0521   0732             _if14_TRUE:
0522   0732             ; printf(".dw: "); 
0523   0732             ; --- START FUNCTION CALL
0524   0732 26 4C 50      mov b, _s17 ; ".dw: "
0525   0735 FD AB         swp b
0526   0737 D8            push b
0527   0738 07 8F 3E      call printf
0528   073B 51 02 00      add sp, 2
0529   073E             ; --- END FUNCTION CALL
0530   073E             ; for(;;){ 
0531   073E             _for15_init:
0532   073E             _for15_cond:
0533   073E             _for15_block:
0534   073E             ; get(); 
0535   073E             ; --- START FUNCTION CALL
0536   073E 07 92 2B      call get
0537   0741             ; if(toktype == CHAR_CONST){ 
0538   0741             _if16_cond:
0539   0741 3B 61 4E      mov d, _toktype ; $toktype
0540   0744 2A            mov b, [d]
0541   0745 38 00 00      mov c, 0
0542   0748             ; --- START RELATIONAL
0543   0748 D7            push a
0544   0749 11            mov a, b
0545   074A FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0545   074E 00 00 
0546   0750 B0            cmp a, b
0547   0751 FD 71         seq ; ==
0548   0753 E4            pop a
0549   0754             ; --- END RELATIONAL
0550   0754 C0 00 00      cmp b, 0
0551   0757 C6 B6 07      je _if16_else
0552   075A             _if16_TRUE:
0553   075A             ; emit_byte(string_const[0], 0); 
0554   075A             ; --- START FUNCTION CALL
0555   075A FD 2E 00 00   mov32 cb, $00000000
0555   075E 00 00 
0556   0760 DD            push bl
0557   0761 3B A5 4E      mov d, _string_const_data ; $string_const
0558   0764 D7            push a
0559   0765 DA            push d
0560   0766 FD 2E 00 00   mov32 cb, $00000000
0560   076A 00 00 
0561   076C E7            pop d
0562   076D 5A            add d, b
0563   076E E4            pop a
0564   076F 32            mov bl, [d]
0565   0770 A7 00         mov bh, 0
0566   0772 38 00 00      mov c, 0
0567   0775 DD            push bl
0568   0776 07 97 27      call emit_byte
0569   0779 51 02 00      add sp, 2
0570   077C             ; --- END FUNCTION CALL
0571   077C             ; emit_byte(0, 0); 
0572   077C             ; --- START FUNCTION CALL
0573   077C FD 2E 00 00   mov32 cb, $00000000
0573   0780 00 00 
0574   0782 DD            push bl
0575   0783 FD 2E 00 00   mov32 cb, $00000000
0575   0787 00 00 
0576   0789 DD            push bl
0577   078A 07 97 27      call emit_byte
0578   078D 51 02 00      add sp, 2
0579   0790             ; --- END FUNCTION CALL
0580   0790             ; printf("%d", string_const[0]); 
0581   0790             ; --- START FUNCTION CALL
0582   0790 3B A5 4E      mov d, _string_const_data ; $string_const
0583   0793 D7            push a
0584   0794 DA            push d
0585   0795 FD 2E 00 00   mov32 cb, $00000000
0585   0799 00 00 
0586   079B E7            pop d
0587   079C 5A            add d, b
0588   079D E4            pop a
0589   079E 32            mov bl, [d]
0590   079F A7 00         mov bh, 0
0591   07A1 38 00 00      mov c, 0
0592   07A4 FD AB         swp b
0593   07A6 D8            push b
0594   07A7 26 46 50      mov b, _s15 ; "%d"
0595   07AA FD AB         swp b
0596   07AC D8            push b
0597   07AD 07 8F 3E      call printf
0598   07B0 51 03 00      add sp, 3
0599   07B3             ; --- END FUNCTION CALL
0600   07B3 0A FF 07      jmp _if16_exit
0601   07B6             _if16_else:
0602   07B6             ; if(toktype == INTEGER_CONST){ 
0603   07B6             _if17_cond:
0604   07B6 3B 61 4E      mov d, _toktype ; $toktype
0605   07B9 2A            mov b, [d]
0606   07BA 38 00 00      mov c, 0
0607   07BD             ; --- START RELATIONAL
0608   07BD D7            push a
0609   07BE 11            mov a, b
0610   07BF FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0610   07C3 00 00 
0611   07C5 B0            cmp a, b
0612   07C6 FD 71         seq ; ==
0613   07C8 E4            pop a
0614   07C9             ; --- END RELATIONAL
0615   07C9 C0 00 00      cmp b, 0
0616   07CC C6 FF 07      je _if17_exit
0617   07CF             _if17_TRUE:
0618   07CF             ; emit_word(int_const, 0); 
0619   07CF             ; --- START FUNCTION CALL
0620   07CF FD 2E 00 00   mov32 cb, $00000000
0620   07D3 00 00 
0621   07D5 DD            push bl
0622   07D6 3B A5 4F      mov d, _int_const ; $int_const
0623   07D9 2A            mov b, [d]
0624   07DA 38 00 00      mov c, 0
0625   07DD FD AB         swp b
0626   07DF D8            push b
0627   07E0 07 CF 27      call emit_word
0628   07E3 51 03 00      add sp, 3
0629   07E6             ; --- END FUNCTION CALL
0630   07E6             ; printf("%d", int_const); 
0631   07E6             ; --- START FUNCTION CALL
0632   07E6 3B A5 4F      mov d, _int_const ; $int_const
0633   07E9 2A            mov b, [d]
0634   07EA 38 00 00      mov c, 0
0635   07ED FD AB         swp b
0636   07EF D8            push b
0637   07F0 26 46 50      mov b, _s15 ; "%d"
0638   07F3 FD AB         swp b
0639   07F5 D8            push b
0640   07F6 07 8F 3E      call printf
0641   07F9 51 04 00      add sp, 4
0642   07FC             ; --- END FUNCTION CALL
0643   07FC 0A FF 07      jmp _if17_exit
0644   07FF             _if17_exit:
0645   07FF             _if16_exit:
0646   07FF             ; get(); 
0647   07FF             ; --- START FUNCTION CALL
0648   07FF 07 92 2B      call get
0649   0802             ; if(tok != COMMA){ 
0650   0802             _if18_cond:
0651   0802 3B 5F 4E      mov d, _tok ; $tok
0652   0805 2A            mov b, [d]
0653   0806 38 00 00      mov c, 0
0654   0809             ; --- START RELATIONAL
0655   0809 D7            push a
0656   080A 11            mov a, b
0657   080B FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0657   080F 00 00 
0658   0811 B0            cmp a, b
0659   0812 FD 72         sneq ; !=
0660   0814 E4            pop a
0661   0815             ; --- END RELATIONAL
0662   0815 C0 00 00      cmp b, 0
0663   0818 C6 24 08      je _if18_exit
0664   081B             _if18_TRUE:
0665   081B             ; back(); 
0666   081B             ; --- START FUNCTION CALL
0667   081B 07 05 28      call back
0668   081E             ; break; 
0669   081E 0A 33 08      jmp _for15_exit ; for break
0670   0821 0A 24 08      jmp _if18_exit
0671   0824             _if18_exit:
0672   0824             ; printf(", "); 
0673   0824             ; --- START FUNCTION CALL
0674   0824 26 49 50      mov b, _s16 ; ", "
0675   0827 FD AB         swp b
0676   0829 D8            push b
0677   082A 07 8F 3E      call printf
0678   082D 51 02 00      add sp, 2
0679   0830             ; --- END FUNCTION CALL
0680   0830             _for15_update:
0681   0830 0A 3E 07      jmp _for15_cond
0682   0833             _for15_exit:
0683   0833             ; printf("\n"); 
0684   0833             ; --- START FUNCTION CALL
0685   0833 26 FC 4F      mov b, _s10 ; "\n"
0686   0836 FD AB         swp b
0687   0838 D8            push b
0688   0839 07 8F 3E      call printf
0689   083C 51 02 00      add sp, 2
0690   083F             ; --- END FUNCTION CALL
0691   083F 0A 42 08      jmp _if14_exit
0692   0842             _if14_exit:
0693   0842             _if9_exit:
0694   0842             _for7_update:
0695   0842 0A E4 05      jmp _for7_cond
0696   0845             _for7_exit:
0697   0845             ; printf("Done.\n"); 
0698   0845             ; --- START FUNCTION CALL
0699   0845 26 52 50      mov b, _s18 ; "Done.\n"
0700   0848 FD AB         swp b
0701   084A D8            push b
0702   084B 07 8F 3E      call printf
0703   084E 51 02 00      add sp, 2
0704   0851             ; --- END FUNCTION CALL
0705   0851 F9            leave
0706   0852 09            ret
0707   0853             
0708   0853             parse_directive:
0709   0853 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0710   0856             ; get(); 
0711   0856             ; --- START FUNCTION CALL
0712   0856 07 92 2B      call get
0713   0859             ; if(tok == ORG){ 
0714   0859             _if19_cond:
0715   0859 3B 5F 4E      mov d, _tok ; $tok
0716   085C 2A            mov b, [d]
0717   085D 38 00 00      mov c, 0
0718   0860             ; --- START RELATIONAL
0719   0860 D7            push a
0720   0861 11            mov a, b
0721   0862 FD 2E 01 00   mov32 cb, $1 ; enum element: ORG
0721   0866 00 00 
0722   0868 B0            cmp a, b
0723   0869 FD 71         seq ; ==
0724   086B E4            pop a
0725   086C             ; --- END RELATIONAL
0726   086C C0 00 00      cmp b, 0
0727   086F C6 AE 08      je _if19_else
0728   0872             _if19_TRUE:
0729   0872             ; get(); 
0730   0872             ; --- START FUNCTION CALL
0731   0872 07 92 2B      call get
0732   0875             ; if(toktype != INTEGER_CONST) error("Integer constant _expected in .org directive."); 
0733   0875             _if20_cond:
0734   0875 3B 61 4E      mov d, _toktype ; $toktype
0735   0878 2A            mov b, [d]
0736   0879 38 00 00      mov c, 0
0737   087C             ; --- START RELATIONAL
0738   087C D7            push a
0739   087D 11            mov a, b
0740   087E FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0740   0882 00 00 
0741   0884 B0            cmp a, b
0742   0885 FD 72         sneq ; !=
0743   0887 E4            pop a
0744   0888             ; --- END RELATIONAL
0745   0888 C0 00 00      cmp b, 0
0746   088B C6 9D 08      je _if20_exit
0747   088E             _if20_TRUE:
0748   088E             ; error("Integer constant _expected in .org directive."); 
0749   088E             ; --- START FUNCTION CALL
0750   088E 26 59 50      mov b, _s19 ; "Integer constant _expected in .org directive."
0751   0891 FD AB         swp b
0752   0893 D8            push b
0753   0894 07 98 39      call error
0754   0897 51 02 00      add sp, 2
0755   089A             ; --- END FUNCTION CALL
0756   089A 0A 9D 08      jmp _if20_exit
0757   089D             _if20_exit:
0758   089D             ; _org = int_const; 
0759   089D 3B 5A 4E      mov d, __org ; $_org
0760   08A0 DA            push d
0761   08A1 3B A5 4F      mov d, _int_const ; $int_const
0762   08A4 2A            mov b, [d]
0763   08A5 38 00 00      mov c, 0
0764   08A8 E7            pop d
0765   08A9 FD 43         mov [d], b
0766   08AB 0A 3C 0A      jmp _if19_exit
0767   08AE             _if19_else:
0768   08AE             ; if(tok == DB){ 
0769   08AE             _if21_cond:
0770   08AE 3B 5F 4E      mov d, _tok ; $tok
0771   08B1 2A            mov b, [d]
0772   08B2 38 00 00      mov c, 0
0773   08B5             ; --- START RELATIONAL
0774   08B5 D7            push a
0775   08B6 11            mov a, b
0776   08B7 FD 2E 06 00   mov32 cb, $6 ; enum element: DB
0776   08BB 00 00 
0777   08BD B0            cmp a, b
0778   08BE FD 71         seq ; ==
0779   08C0 E4            pop a
0780   08C1             ; --- END RELATIONAL
0781   08C1 C0 00 00      cmp b, 0
0782   08C4 C6 6A 09      je _if21_else
0783   08C7             _if21_TRUE:
0784   08C7             ; for(;;){ 
0785   08C7             _for22_init:
0786   08C7             _for22_cond:
0787   08C7             _for22_block:
0788   08C7             ; get(); 
0789   08C7             ; --- START FUNCTION CALL
0790   08C7 07 92 2B      call get
0791   08CA             ; if(toktype == CHAR_CONST){ 
0792   08CA             _if23_cond:
0793   08CA 3B 61 4E      mov d, _toktype ; $toktype
0794   08CD 2A            mov b, [d]
0795   08CE 38 00 00      mov c, 0
0796   08D1             ; --- START RELATIONAL
0797   08D1 D7            push a
0798   08D2 11            mov a, b
0799   08D3 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0799   08D7 00 00 
0800   08D9 B0            cmp a, b
0801   08DA FD 71         seq ; ==
0802   08DC E4            pop a
0803   08DD             ; --- END RELATIONAL
0804   08DD C0 00 00      cmp b, 0
0805   08E0 C6 0B 09      je _if23_else
0806   08E3             _if23_TRUE:
0807   08E3             ; emit_byte(string_const[0], emit_override); 
0808   08E3             ; --- START FUNCTION CALL
0809   08E3 FA 05 00      lea d, [bp + 5] ; $emit_override
0810   08E6 32            mov bl, [d]
0811   08E7 A7 00         mov bh, 0
0812   08E9 38 00 00      mov c, 0
0813   08EC DD            push bl
0814   08ED 3B A5 4E      mov d, _string_const_data ; $string_const
0815   08F0 D7            push a
0816   08F1 DA            push d
0817   08F2 FD 2E 00 00   mov32 cb, $00000000
0817   08F6 00 00 
0818   08F8 E7            pop d
0819   08F9 5A            add d, b
0820   08FA E4            pop a
0821   08FB 32            mov bl, [d]
0822   08FC A7 00         mov bh, 0
0823   08FE 38 00 00      mov c, 0
0824   0901 DD            push bl
0825   0902 07 97 27      call emit_byte
0826   0905 51 02 00      add sp, 2
0827   0908             ; --- END FUNCTION CALL
0828   0908 0A 3F 09      jmp _if23_exit
0829   090B             _if23_else:
0830   090B             ; if(toktype == INTEGER_CONST){ 
0831   090B             _if24_cond:
0832   090B 3B 61 4E      mov d, _toktype ; $toktype
0833   090E 2A            mov b, [d]
0834   090F 38 00 00      mov c, 0
0835   0912             ; --- START RELATIONAL
0836   0912 D7            push a
0837   0913 11            mov a, b
0838   0914 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0838   0918 00 00 
0839   091A B0            cmp a, b
0840   091B FD 71         seq ; ==
0841   091D E4            pop a
0842   091E             ; --- END RELATIONAL
0843   091E C0 00 00      cmp b, 0
0844   0921 C6 3F 09      je _if24_exit
0845   0924             _if24_TRUE:
0846   0924             ; emit_byte(int_const, emit_override); 
0847   0924             ; --- START FUNCTION CALL
0848   0924 FA 05 00      lea d, [bp + 5] ; $emit_override
0849   0927 32            mov bl, [d]
0850   0928 A7 00         mov bh, 0
0851   092A 38 00 00      mov c, 0
0852   092D DD            push bl
0853   092E 3B A5 4F      mov d, _int_const ; $int_const
0854   0931 2A            mov b, [d]
0855   0932 38 00 00      mov c, 0
0856   0935 DD            push bl
0857   0936 07 97 27      call emit_byte
0858   0939 51 02 00      add sp, 2
0859   093C             ; --- END FUNCTION CALL
0860   093C 0A 3F 09      jmp _if24_exit
0861   093F             _if24_exit:
0862   093F             _if23_exit:
0863   093F             ; get(); 
0864   093F             ; --- START FUNCTION CALL
0865   093F 07 92 2B      call get
0866   0942             ; if(tok != COMMA){ 
0867   0942             _if25_cond:
0868   0942 3B 5F 4E      mov d, _tok ; $tok
0869   0945 2A            mov b, [d]
0870   0946 38 00 00      mov c, 0
0871   0949             ; --- START RELATIONAL
0872   0949 D7            push a
0873   094A 11            mov a, b
0874   094B FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0874   094F 00 00 
0875   0951 B0            cmp a, b
0876   0952 FD 72         sneq ; !=
0877   0954 E4            pop a
0878   0955             ; --- END RELATIONAL
0879   0955 C0 00 00      cmp b, 0
0880   0958 C6 64 09      je _if25_exit
0881   095B             _if25_TRUE:
0882   095B             ; back(); 
0883   095B             ; --- START FUNCTION CALL
0884   095B 07 05 28      call back
0885   095E             ; break; 
0886   095E 0A 67 09      jmp _for22_exit ; for break
0887   0961 0A 64 09      jmp _if25_exit
0888   0964             _if25_exit:
0889   0964             _for22_update:
0890   0964 0A C7 08      jmp _for22_cond
0891   0967             _for22_exit:
0892   0967 0A 3C 0A      jmp _if21_exit
0893   096A             _if21_else:
0894   096A             ; if(tok == DW){ 
0895   096A             _if26_cond:
0896   096A 3B 5F 4E      mov d, _tok ; $tok
0897   096D 2A            mov b, [d]
0898   096E 38 00 00      mov c, 0
0899   0971             ; --- START RELATIONAL
0900   0971 D7            push a
0901   0972 11            mov a, b
0902   0973 FD 2E 07 00   mov32 cb, $7 ; enum element: DW
0902   0977 00 00 
0903   0979 B0            cmp a, b
0904   097A FD 71         seq ; ==
0905   097C E4            pop a
0906   097D             ; --- END RELATIONAL
0907   097D C0 00 00      cmp b, 0
0908   0980 C6 3C 0A      je _if26_exit
0909   0983             _if26_TRUE:
0910   0983             ; for(;;){ 
0911   0983             _for27_init:
0912   0983             _for27_cond:
0913   0983             _for27_block:
0914   0983             ; get(); 
0915   0983             ; --- START FUNCTION CALL
0916   0983 07 92 2B      call get
0917   0986             ; if(toktype == CHAR_CONST){ 
0918   0986             _if28_cond:
0919   0986 3B 61 4E      mov d, _toktype ; $toktype
0920   0989 2A            mov b, [d]
0921   098A 38 00 00      mov c, 0
0922   098D             ; --- START RELATIONAL
0923   098D D7            push a
0924   098E 11            mov a, b
0925   098F FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0925   0993 00 00 
0926   0995 B0            cmp a, b
0927   0996 FD 71         seq ; ==
0928   0998 E4            pop a
0929   0999             ; --- END RELATIONAL
0930   0999 C0 00 00      cmp b, 0
0931   099C C6 DE 09      je _if28_else
0932   099F             _if28_TRUE:
0933   099F             ; emit_byte(string_const[0], emit_override); 
0934   099F             ; --- START FUNCTION CALL
0935   099F FA 05 00      lea d, [bp + 5] ; $emit_override
0936   09A2 32            mov bl, [d]
0937   09A3 A7 00         mov bh, 0
0938   09A5 38 00 00      mov c, 0
0939   09A8 DD            push bl
0940   09A9 3B A5 4E      mov d, _string_const_data ; $string_const
0941   09AC D7            push a
0942   09AD DA            push d
0943   09AE FD 2E 00 00   mov32 cb, $00000000
0943   09B2 00 00 
0944   09B4 E7            pop d
0945   09B5 5A            add d, b
0946   09B6 E4            pop a
0947   09B7 32            mov bl, [d]
0948   09B8 A7 00         mov bh, 0
0949   09BA 38 00 00      mov c, 0
0950   09BD DD            push bl
0951   09BE 07 97 27      call emit_byte
0952   09C1 51 02 00      add sp, 2
0953   09C4             ; --- END FUNCTION CALL
0954   09C4             ; emit_byte(0, emit_override); 
0955   09C4             ; --- START FUNCTION CALL
0956   09C4 FA 05 00      lea d, [bp + 5] ; $emit_override
0957   09C7 32            mov bl, [d]
0958   09C8 A7 00         mov bh, 0
0959   09CA 38 00 00      mov c, 0
0960   09CD DD            push bl
0961   09CE FD 2E 00 00   mov32 cb, $00000000
0961   09D2 00 00 
0962   09D4 DD            push bl
0963   09D5 07 97 27      call emit_byte
0964   09D8 51 02 00      add sp, 2
0965   09DB             ; --- END FUNCTION CALL
0966   09DB 0A 11 0A      jmp _if28_exit
0967   09DE             _if28_else:
0968   09DE             ; if(toktype == INTEGER_CONST){ 
0969   09DE             _if29_cond:
0970   09DE 3B 61 4E      mov d, _toktype ; $toktype
0971   09E1 2A            mov b, [d]
0972   09E2 38 00 00      mov c, 0
0973   09E5             ; --- START RELATIONAL
0974   09E5 D7            push a
0975   09E6 11            mov a, b
0976   09E7 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0976   09EB 00 00 
0977   09ED B0            cmp a, b
0978   09EE FD 71         seq ; ==
0979   09F0 E4            pop a
0980   09F1             ; --- END RELATIONAL
0981   09F1 C0 00 00      cmp b, 0
0982   09F4 C6 11 0A      je _if29_exit
0983   09F7             _if29_TRUE:
0984   09F7             ; emit_word(int_const, 0); 
0985   09F7             ; --- START FUNCTION CALL
0986   09F7 FD 2E 00 00   mov32 cb, $00000000
0986   09FB 00 00 
0987   09FD DD            push bl
0988   09FE 3B A5 4F      mov d, _int_const ; $int_const
0989   0A01 2A            mov b, [d]
0990   0A02 38 00 00      mov c, 0
0991   0A05 FD AB         swp b
0992   0A07 D8            push b
0993   0A08 07 CF 27      call emit_word
0994   0A0B 51 03 00      add sp, 3
0995   0A0E             ; --- END FUNCTION CALL
0996   0A0E 0A 11 0A      jmp _if29_exit
0997   0A11             _if29_exit:
0998   0A11             _if28_exit:
0999   0A11             ; get(); 
1000   0A11             ; --- START FUNCTION CALL
1001   0A11 07 92 2B      call get
1002   0A14             ; if(tok != COMMA){ 
1003   0A14             _if30_cond:
1004   0A14 3B 5F 4E      mov d, _tok ; $tok
1005   0A17 2A            mov b, [d]
1006   0A18 38 00 00      mov c, 0
1007   0A1B             ; --- START RELATIONAL
1008   0A1B D7            push a
1009   0A1C 11            mov a, b
1010   0A1D FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
1010   0A21 00 00 
1011   0A23 B0            cmp a, b
1012   0A24 FD 72         sneq ; !=
1013   0A26 E4            pop a
1014   0A27             ; --- END RELATIONAL
1015   0A27 C0 00 00      cmp b, 0
1016   0A2A C6 36 0A      je _if30_exit
1017   0A2D             _if30_TRUE:
1018   0A2D             ; back(); 
1019   0A2D             ; --- START FUNCTION CALL
1020   0A2D 07 05 28      call back
1021   0A30             ; break; 
1022   0A30 0A 39 0A      jmp _for27_exit ; for break
1023   0A33 0A 36 0A      jmp _if30_exit
1024   0A36             _if30_exit:
1025   0A36             _for27_update:
1026   0A36 0A 83 09      jmp _for27_cond
1027   0A39             _for27_exit:
1028   0A39 0A 3C 0A      jmp _if26_exit
1029   0A3C             _if26_exit:
1030   0A3C             _if21_exit:
1031   0A3C             _if19_exit:
1032   0A3C F9            leave
1033   0A3D 09            ret
1034   0A3E             
1035   0A3E             label_directive_scan:
1036   0A3E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1037   0A41             ; char *temp_prog; 
1038   0A41 52 02 00      sub sp, 2
1039   0A44             ; int i; 
1040   0A44 52 02 00      sub sp, 2
1041   0A47             ; prog = program; 
1042   0A47 3B 63 4E      mov d, _prog ; $prog
1043   0A4A DA            push d
1044   0A4B 3B A7 4F      mov d, _program ; $program
1045   0A4E 2A            mov b, [d]
1046   0A4F 38 00 00      mov c, 0
1047   0A52 E7            pop d
1048   0A53 FD 43         mov [d], b
1049   0A55             ; bin_p = bin_out + _org; 
1050   0A55 3B AB 4F      mov d, _bin_p ; $bin_p
1051   0A58 DA            push d
1052   0A59 3B A9 4F      mov d, _bin_out ; $bin_out
1053   0A5C 2A            mov b, [d]
1054   0A5D 38 00 00      mov c, 0
1055   0A60             ; --- START TERMS
1056   0A60 D7            push a
1057   0A61 11            mov a, b
1058   0A62 3B 5A 4E      mov d, __org ; $_org
1059   0A65 2A            mov b, [d]
1060   0A66 38 00 00      mov c, 0
1061   0A69 56            add b, a
1062   0A6A E4            pop a
1063   0A6B             ; --- END TERMS
1064   0A6B E7            pop d
1065   0A6C FD 43         mov [d], b
1066   0A6E             ; pc = _org; 
1067   0A6E 3B 5C 4E      mov d, _pc ; $pc
1068   0A71 DA            push d
1069   0A72 3B 5A 4E      mov d, __org ; $_org
1070   0A75 2A            mov b, [d]
1071   0A76 38 00 00      mov c, 0
1072   0A79 E7            pop d
1073   0A7A FD 43         mov [d], b
1074   0A7C             ; printf("Parsing labels and directives...\n"); 
1075   0A7C             ; --- START FUNCTION CALL
1076   0A7C 26 87 50      mov b, _s20 ; "Parsing labels and directives...\n"
1077   0A7F FD AB         swp b
1078   0A81 D8            push b
1079   0A82 07 8F 3E      call printf
1080   0A85 51 02 00      add sp, 2
1081   0A88             ; --- END FUNCTION CALL
1082   0A88             ; for(;;){ 
1083   0A88             _for31_init:
1084   0A88             _for31_cond:
1085   0A88             _for31_block:
1086   0A88             ; get(); back(); 
1087   0A88             ; --- START FUNCTION CALL
1088   0A88 07 92 2B      call get
1089   0A8B             ; back(); 
1090   0A8B             ; --- START FUNCTION CALL
1091   0A8B 07 05 28      call back
1092   0A8E             ; temp_prog = prog; 
1093   0A8E FA FF FF      lea d, [bp + -1] ; $temp_prog
1094   0A91 DA            push d
1095   0A92 3B 63 4E      mov d, _prog ; $prog
1096   0A95 2A            mov b, [d]
1097   0A96 38 00 00      mov c, 0
1098   0A99 E7            pop d
1099   0A9A FD 43         mov [d], b
1100   0A9C             ; get(); 
1101   0A9C             ; --- START FUNCTION CALL
1102   0A9C 07 92 2B      call get
1103   0A9F             ; if(toktype == END) break; 
1104   0A9F             _if32_cond:
1105   0A9F 3B 61 4E      mov d, _toktype ; $toktype
1106   0AA2 2A            mov b, [d]
1107   0AA3 38 00 00      mov c, 0
1108   0AA6             ; --- START RELATIONAL
1109   0AA6 D7            push a
1110   0AA7 11            mov a, b
1111   0AA8 FD 2E 07 00   mov32 cb, $7 ; enum element: END
1111   0AAC 00 00 
1112   0AAE B0            cmp a, b
1113   0AAF FD 71         seq ; ==
1114   0AB1 E4            pop a
1115   0AB2             ; --- END RELATIONAL
1116   0AB2 C0 00 00      cmp b, 0
1117   0AB5 C6 BE 0A      je _if32_exit
1118   0AB8             _if32_TRUE:
1119   0AB8             ; break; 
1120   0AB8 0A 88 0B      jmp _for31_exit ; for break
1121   0ABB 0A BE 0A      jmp _if32_exit
1122   0ABE             _if32_exit:
1123   0ABE             ; if(tok == DOT){ 
1124   0ABE             _if33_cond:
1125   0ABE 3B 5F 4E      mov d, _tok ; $tok
1126   0AC1 2A            mov b, [d]
1127   0AC2 38 00 00      mov c, 0
1128   0AC5             ; --- START RELATIONAL
1129   0AC5 D7            push a
1130   0AC6 11            mov a, b
1131   0AC7 FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
1131   0ACB 00 00 
1132   0ACD B0            cmp a, b
1133   0ACE FD 71         seq ; ==
1134   0AD0 E4            pop a
1135   0AD1             ; --- END RELATIONAL
1136   0AD1 C0 00 00      cmp b, 0
1137   0AD4 C6 06 0B      je _if33_else
1138   0AD7             _if33_TRUE:
1139   0AD7             ; get(); 
1140   0AD7             ; --- START FUNCTION CALL
1141   0AD7 07 92 2B      call get
1142   0ADA             ; if(is_directive(token)){ 
1143   0ADA             _if34_cond:
1144   0ADA             ; --- START FUNCTION CALL
1145   0ADA 3B 65 4E      mov d, _token_data ; $token
1146   0ADD 2D            mov b, d
1147   0ADE 38 00 00      mov c, 0
1148   0AE1 FD AB         swp b
1149   0AE3 D8            push b
1150   0AE4 07 AB 21      call is_directive
1151   0AE7 51 02 00      add sp, 2
1152   0AEA             ; --- END FUNCTION CALL
1153   0AEA C0 00 00      cmp b, 0
1154   0AED C6 03 0B      je _if34_exit
1155   0AF0             _if34_TRUE:
1156   0AF0             ; back(); 
1157   0AF0             ; --- START FUNCTION CALL
1158   0AF0 07 05 28      call back
1159   0AF3             ; parse_directive(1); 
1160   0AF3             ; --- START FUNCTION CALL
1161   0AF3 FD 2E 01 00   mov32 cb, $00000001
1161   0AF7 00 00 
1162   0AF9 DD            push bl
1163   0AFA 07 53 08      call parse_directive
1164   0AFD 51 01 00      add sp, 1
1165   0B00             ; --- END FUNCTION CALL
1166   0B00 0A 03 0B      jmp _if34_exit
1167   0B03             _if34_exit:
1168   0B03 0A 85 0B      jmp _if33_exit
1169   0B06             _if33_else:
1170   0B06             ; if(toktype == IDENTIFIER){ 
1171   0B06             _if35_cond:
1172   0B06 3B 61 4E      mov d, _toktype ; $toktype
1173   0B09 2A            mov b, [d]
1174   0B0A 38 00 00      mov c, 0
1175   0B0D             ; --- START RELATIONAL
1176   0B0D D7            push a
1177   0B0E 11            mov a, b
1178   0B0F FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1178   0B13 00 00 
1179   0B15 B0            cmp a, b
1180   0B16 FD 71         seq ; ==
1181   0B18 E4            pop a
1182   0B19             ; --- END RELATIONAL
1183   0B19 C0 00 00      cmp b, 0
1184   0B1C C6 85 0B      je _if35_exit
1185   0B1F             _if35_TRUE:
1186   0B1F             ; get(); 
1187   0B1F             ; --- START FUNCTION CALL
1188   0B1F 07 92 2B      call get
1189   0B22             ; if(tok == COLON){ 
1190   0B22             _if36_cond:
1191   0B22 3B 5F 4E      mov d, _tok ; $tok
1192   0B25 2A            mov b, [d]
1193   0B26 38 00 00      mov c, 0
1194   0B29             ; --- START RELATIONAL
1195   0B29 D7            push a
1196   0B2A 11            mov a, b
1197   0B2B FD 2E 0D 00   mov32 cb, $d ; enum element: COLON
1197   0B2F 00 00 
1198   0B31 B0            cmp a, b
1199   0B32 FD 71         seq ; ==
1200   0B34 E4            pop a
1201   0B35             ; --- END RELATIONAL
1202   0B35 C0 00 00      cmp b, 0
1203   0B38 C6 5B 0B      je _if36_else
1204   0B3B             _if36_TRUE:
1205   0B3B             ; prog = temp_prog; 
1206   0B3B 3B 63 4E      mov d, _prog ; $prog
1207   0B3E DA            push d
1208   0B3F FA FF FF      lea d, [bp + -1] ; $temp_prog
1209   0B42 2A            mov b, [d]
1210   0B43 38 00 00      mov c, 0
1211   0B46 E7            pop d
1212   0B47 FD 43         mov [d], b
1213   0B49             ; parse_label(); 
1214   0B49             ; --- START FUNCTION CALL
1215   0B49 07 E1 21      call parse_label
1216   0B4C             ; printf("."); 
1217   0B4C             ; --- START FUNCTION CALL
1218   0B4C 26 A9 50      mov b, _s21 ; "."
1219   0B4F FD AB         swp b
1220   0B51 D8            push b
1221   0B52 07 8F 3E      call printf
1222   0B55 51 02 00      add sp, 2
1223   0B58             ; --- END FUNCTION CALL
1224   0B58 0A 82 0B      jmp _if36_exit
1225   0B5B             _if36_else:
1226   0B5B             ; prog = temp_prog; 
1227   0B5B 3B 63 4E      mov d, _prog ; $prog
1228   0B5E DA            push d
1229   0B5F FA FF FF      lea d, [bp + -1] ; $temp_prog
1230   0B62 2A            mov b, [d]
1231   0B63 38 00 00      mov c, 0
1232   0B66 E7            pop d
1233   0B67 FD 43         mov [d], b
1234   0B69             ; parse_instr(1);       
1235   0B69             ; --- START FUNCTION CALL
1236   0B69 FD 2E 01 00   mov32 cb, $00000001
1236   0B6D 00 00 
1237   0B6F DD            push bl
1238   0B70 07 94 13      call parse_instr
1239   0B73 51 01 00      add sp, 1
1240   0B76             ; --- END FUNCTION CALL
1241   0B76             ; printf("."); 
1242   0B76             ; --- START FUNCTION CALL
1243   0B76 26 A9 50      mov b, _s21 ; "."
1244   0B79 FD AB         swp b
1245   0B7B D8            push b
1246   0B7C 07 8F 3E      call printf
1247   0B7F 51 02 00      add sp, 2
1248   0B82             ; --- END FUNCTION CALL
1249   0B82             _if36_exit:
1250   0B82 0A 85 0B      jmp _if35_exit
1251   0B85             _if35_exit:
1252   0B85             _if33_exit:
1253   0B85             _for31_update:
1254   0B85 0A 88 0A      jmp _for31_cond
1255   0B88             _for31_exit:
1256   0B88             ; printf("\nDone.\n"); 
1257   0B88             ; --- START FUNCTION CALL
1258   0B88 26 AB 50      mov b, _s22 ; "\nDone.\n"
1259   0B8B FD AB         swp b
1260   0B8D D8            push b
1261   0B8E 07 8F 3E      call printf
1262   0B91 51 02 00      add sp, 2
1263   0B94             ; --- END FUNCTION CALL
1264   0B94             ; printf("Org: %s\n", _org); 
1265   0B94             ; --- START FUNCTION CALL
1266   0B94 3B 5A 4E      mov d, __org ; $_org
1267   0B97 2A            mov b, [d]
1268   0B98 38 00 00      mov c, 0
1269   0B9B FD AB         swp b
1270   0B9D D8            push b
1271   0B9E 26 B3 50      mov b, _s23 ; "Org: %s\n"
1272   0BA1 FD AB         swp b
1273   0BA3 D8            push b
1274   0BA4 07 8F 3E      call printf
1275   0BA7 51 04 00      add sp, 4
1276   0BAA             ; --- END FUNCTION CALL
1277   0BAA             ; printf("\nLabels list:\n"); 
1278   0BAA             ; --- START FUNCTION CALL
1279   0BAA 26 BC 50      mov b, _s24 ; "\nLabels list:\n"
1280   0BAD FD AB         swp b
1281   0BAF D8            push b
1282   0BB0 07 8F 3E      call printf
1283   0BB3 51 02 00      add sp, 2
1284   0BB6             ; --- END FUNCTION CALL
1285   0BB6             ; for(i = 0; label_table[i].name[0]; i++){ 
1286   0BB6             _for37_init:
1287   0BB6 FA FD FF      lea d, [bp + -3] ; $i
1288   0BB9 DA            push d
1289   0BBA FD 2E 00 00   mov32 cb, $00000000
1289   0BBE 00 00 
1290   0BC0 E7            pop d
1291   0BC1 FD 43         mov [d], b
1292   0BC3             _for37_cond:
1293   0BC3 3B 3A 4D      mov d, _label_table_data ; $label_table
1294   0BC6 D7            push a
1295   0BC7 DA            push d
1296   0BC8 FA FD FF      lea d, [bp + -3] ; $i
1297   0BCB 2A            mov b, [d]
1298   0BCC 38 00 00      mov c, 0
1299   0BCF E7            pop d
1300   0BD0 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1301   0BD4 E4            pop a
1302   0BD5 58 00 00      add d, 0
1303   0BD8 D7            push a
1304   0BD9 DA            push d
1305   0BDA FD 2E 00 00   mov32 cb, $00000000
1305   0BDE 00 00 
1306   0BE0 E7            pop d
1307   0BE1 5A            add d, b
1308   0BE2 E4            pop a
1309   0BE3 32            mov bl, [d]
1310   0BE4 A7 00         mov bh, 0
1311   0BE6 38 00 00      mov c, 0
1312   0BE9 C0 00 00      cmp b, 0
1313   0BEC C6 46 0C      je _for37_exit
1314   0BEF             _for37_block:
1315   0BEF             ; printf("%s: %x\n", label_table[i].name, label_table[i].address); 
1316   0BEF             ; --- START FUNCTION CALL
1317   0BEF 3B 3A 4D      mov d, _label_table_data ; $label_table
1318   0BF2 D7            push a
1319   0BF3 DA            push d
1320   0BF4 FA FD FF      lea d, [bp + -3] ; $i
1321   0BF7 2A            mov b, [d]
1322   0BF8 38 00 00      mov c, 0
1323   0BFB E7            pop d
1324   0BFC FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1325   0C00 E4            pop a
1326   0C01 58 10 00      add d, 16
1327   0C04 2A            mov b, [d]
1328   0C05 38 00 00      mov c, 0
1329   0C08 FD AB         swp b
1330   0C0A D8            push b
1331   0C0B 3B 3A 4D      mov d, _label_table_data ; $label_table
1332   0C0E D7            push a
1333   0C0F DA            push d
1334   0C10 FA FD FF      lea d, [bp + -3] ; $i
1335   0C13 2A            mov b, [d]
1336   0C14 38 00 00      mov c, 0
1337   0C17 E7            pop d
1338   0C18 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1339   0C1C E4            pop a
1340   0C1D 58 00 00      add d, 0
1341   0C20 2D            mov b, d
1342   0C21 38 00 00      mov c, 0
1343   0C24 FD AB         swp b
1344   0C26 D8            push b
1345   0C27 26 CB 50      mov b, _s25 ; "%s: %x\n"
1346   0C2A FD AB         swp b
1347   0C2C D8            push b
1348   0C2D 07 8F 3E      call printf
1349   0C30 51 06 00      add sp, 6
1350   0C33             ; --- END FUNCTION CALL
1351   0C33             _for37_update:
1352   0C33 FA FD FF      lea d, [bp + -3] ; $i
1353   0C36 2A            mov b, [d]
1354   0C37 38 00 00      mov c, 0
1355   0C3A 11            mov a, b
1356   0C3B FD 77         inc b
1357   0C3D FA FD FF      lea d, [bp + -3] ; $i
1358   0C40 FD 43         mov [d], b
1359   0C42 27            mov b, a
1360   0C43 0A C3 0B      jmp _for37_cond
1361   0C46             _for37_exit:
1362   0C46             ; printf("\n"); 
1363   0C46             ; --- START FUNCTION CALL
1364   0C46 26 FC 4F      mov b, _s10 ; "\n"
1365   0C49 FD AB         swp b
1366   0C4B D8            push b
1367   0C4C 07 8F 3E      call printf
1368   0C4F 51 02 00      add sp, 2
1369   0C52             ; --- END FUNCTION CALL
1370   0C52 F9            leave
1371   0C53 09            ret
1372   0C54             
1373   0C54             label_parse_instr:
1374   0C54 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1375   0C57             ; char opcode[32]; 
1376   0C57 52 20 00      sub sp, 32
1377   0C5A             ; char code_line[64]; 
1378   0C5A 52 40 00      sub sp, 64
1379   0C5D             ; struct t_opcode op; 
1380   0C5D 52 1A 00      sub sp, 26
1381   0C60             ; int num_operands, num_operands_exp; 
1382   0C60 52 02 00      sub sp, 2
1383   0C63 52 02 00      sub sp, 2
1384   0C66             ; int i, j; 
1385   0C66 52 02 00      sub sp, 2
1386   0C69 52 02 00      sub sp, 2
1387   0C6C             ; char operand_types[3]; // operand types and locations 
1388   0C6C 52 03 00      sub sp, 3
1389   0C6F             ; int old_pc; 
1390   0C6F 52 02 00      sub sp, 2
1391   0C72             ; char has_operands; 
1392   0C72 52 01 00      sub sp, 1
1393   0C75             ; old_pc = pc; 
1394   0C75 FA 7A FF      lea d, [bp + -134] ; $old_pc
1395   0C78 DA            push d
1396   0C79 3B 5C 4E      mov d, _pc ; $pc
1397   0C7C 2A            mov b, [d]
1398   0C7D 38 00 00      mov c, 0
1399   0C80 E7            pop d
1400   0C81 FD 43         mov [d], b
1401   0C83             ; get_line(); 
1402   0C83             ; --- START FUNCTION CALL
1403   0C83 07 75 2A      call get_line
1404   0C86             ; push_prog(); 
1405   0C86             ; --- START FUNCTION CALL
1406   0C86 07 F6 39      call push_prog
1407   0C89             ; strcpy(code_line, string_const); 
1408   0C89             ; --- START FUNCTION CALL
1409   0C89 3B A5 4E      mov d, _string_const_data ; $string_const
1410   0C8C 2D            mov b, d
1411   0C8D 38 00 00      mov c, 0
1412   0C90 FD AB         swp b
1413   0C92 D8            push b
1414   0C93 FA A1 FF      lea d, [bp + -95] ; $code_line
1415   0C96 2D            mov b, d
1416   0C97 38 00 00      mov c, 0
1417   0C9A FD AB         swp b
1418   0C9C D8            push b
1419   0C9D 07 C5 4B      call strcpy
1420   0CA0 51 04 00      add sp, 4
1421   0CA3             ; --- END FUNCTION CALL
1422   0CA3             ; has_operands = 0; 
1423   0CA3 FA 79 FF      lea d, [bp + -135] ; $has_operands
1424   0CA6 DA            push d
1425   0CA7 FD 2E 00 00   mov32 cb, $00000000
1425   0CAB 00 00 
1426   0CAD E7            pop d
1427   0CAE FD 3E         mov [d], bl
1428   0CB0             ; prog = code_line; 
1429   0CB0 3B 63 4E      mov d, _prog ; $prog
1430   0CB3 DA            push d
1431   0CB4 FA A1 FF      lea d, [bp + -95] ; $code_line
1432   0CB7 2D            mov b, d
1433   0CB8 38 00 00      mov c, 0
1434   0CBB E7            pop d
1435   0CBC FD 43         mov [d], b
1436   0CBE             ; get(); // get main opcode 
1437   0CBE             ; --- START FUNCTION CALL
1438   0CBE 07 92 2B      call get
1439   0CC1             ; for(;;){ 
1440   0CC1             _for38_init:
1441   0CC1             _for38_cond:
1442   0CC1             _for38_block:
1443   0CC1             ; get(); 
1444   0CC1             ; --- START FUNCTION CALL
1445   0CC1 07 92 2B      call get
1446   0CC4             ; if(toktype == END) break; 
1447   0CC4             _if39_cond:
1448   0CC4 3B 61 4E      mov d, _toktype ; $toktype
1449   0CC7 2A            mov b, [d]
1450   0CC8 38 00 00      mov c, 0
1451   0CCB             ; --- START RELATIONAL
1452   0CCB D7            push a
1453   0CCC 11            mov a, b
1454   0CCD FD 2E 07 00   mov32 cb, $7 ; enum element: END
1454   0CD1 00 00 
1455   0CD3 B0            cmp a, b
1456   0CD4 FD 71         seq ; ==
1457   0CD6 E4            pop a
1458   0CD7             ; --- END RELATIONAL
1459   0CD7 C0 00 00      cmp b, 0
1460   0CDA C6 E3 0C      je _if39_exit
1461   0CDD             _if39_TRUE:
1462   0CDD             ; break; 
1463   0CDD 0A 3F 0D      jmp _for38_exit ; for break
1464   0CE0 0A E3 0C      jmp _if39_exit
1465   0CE3             _if39_exit:
1466   0CE3             ; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1467   0CE3             _if40_cond:
1468   0CE3 3B 61 4E      mov d, _toktype ; $toktype
1469   0CE6 2A            mov b, [d]
1470   0CE7 38 00 00      mov c, 0
1471   0CEA             ; --- START RELATIONAL
1472   0CEA D7            push a
1473   0CEB 11            mov a, b
1474   0CEC FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
1474   0CF0 00 00 
1475   0CF2 B0            cmp a, b
1476   0CF3 FD 71         seq ; ==
1477   0CF5 E4            pop a
1478   0CF6             ; --- END RELATIONAL
1479   0CF6             ; --- START LOGICAL OR
1480   0CF6 D7            push a
1481   0CF7 11            mov a, b
1482   0CF8 3B 61 4E      mov d, _toktype ; $toktype
1483   0CFB 2A            mov b, [d]
1484   0CFC 38 00 00      mov c, 0
1485   0CFF             ; --- START RELATIONAL
1486   0CFF D7            push a
1487   0D00 11            mov a, b
1488   0D01 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1488   0D05 00 00 
1489   0D07 B0            cmp a, b
1490   0D08 FD 71         seq ; ==
1491   0D0A E4            pop a
1492   0D0B             ; --- END RELATIONAL
1493   0D0B             ; --- START LOGICAL AND
1494   0D0B D7            push a
1495   0D0C 11            mov a, b
1496   0D0D             ; --- START FUNCTION CALL
1497   0D0D 3B 65 4E      mov d, _token_data ; $token
1498   0D10 2D            mov b, d
1499   0D11 38 00 00      mov c, 0
1500   0D14 FD AB         swp b
1501   0D16 D8            push b
1502   0D17 07 36 1F      call is_reserved
1503   0D1A 51 02 00      add sp, 2
1504   0D1D             ; --- END FUNCTION CALL
1505   0D1D FD A7         sand a, b
1506   0D1F E4            pop a
1507   0D20             ; --- END LOGICAL AND
1508   0D20 FD A8         sor a, b ; ||
1509   0D22 E4            pop a
1510   0D23             ; --- END LOGICAL OR
1511   0D23 C0 00 00      cmp b, 0
1512   0D26 C6 3C 0D      je _if40_exit
1513   0D29             _if40_TRUE:
1514   0D29             ; has_operands = 1; 
1515   0D29 FA 79 FF      lea d, [bp + -135] ; $has_operands
1516   0D2C DA            push d
1517   0D2D FD 2E 01 00   mov32 cb, $00000001
1517   0D31 00 00 
1518   0D33 E7            pop d
1519   0D34 FD 3E         mov [d], bl
1520   0D36             ; break; 
1521   0D36 0A 3F 0D      jmp _for38_exit ; for break
1522   0D39 0A 3C 0D      jmp _if40_exit
1523   0D3C             _if40_exit:
1524   0D3C             _for38_update:
1525   0D3C 0A C1 0C      jmp _for38_cond
1526   0D3F             _for38_exit:
1527   0D3F             ; opcode[0] = '\0'; 
1528   0D3F FA E1 FF      lea d, [bp + -31] ; $opcode
1529   0D42 D7            push a
1530   0D43 DA            push d
1531   0D44 FD 2E 00 00   mov32 cb, $00000000
1531   0D48 00 00 
1532   0D4A E7            pop d
1533   0D4B 5A            add d, b
1534   0D4C E4            pop a
1535   0D4D DA            push d
1536   0D4E FD 2E 00 00   mov32 cb, $00000000
1536   0D52 00 00 
1537   0D54 E7            pop d
1538   0D55 FD 3E         mov [d], bl
1539   0D57             ; prog = code_line; 
1540   0D57 3B 63 4E      mov d, _prog ; $prog
1541   0D5A DA            push d
1542   0D5B FA A1 FF      lea d, [bp + -95] ; $code_line
1543   0D5E 2D            mov b, d
1544   0D5F 38 00 00      mov c, 0
1545   0D62 E7            pop d
1546   0D63 FD 43         mov [d], b
1547   0D65             ; if(!has_operands){ 
1548   0D65             _if41_cond:
1549   0D65 FA 79 FF      lea d, [bp + -135] ; $has_operands
1550   0D68 32            mov bl, [d]
1551   0D69 A7 00         mov bh, 0
1552   0D6B 38 00 00      mov c, 0
1553   0D6E C0 00 00      cmp b, 0
1554   0D71 C6 85 0E      je _if41_else
1555   0D74             _if41_TRUE:
1556   0D74             ; get(); 
1557   0D74             ; --- START FUNCTION CALL
1558   0D74 07 92 2B      call get
1559   0D77             ; strcpy(opcode, token); 
1560   0D77             ; --- START FUNCTION CALL
1561   0D77 3B 65 4E      mov d, _token_data ; $token
1562   0D7A 2D            mov b, d
1563   0D7B 38 00 00      mov c, 0
1564   0D7E FD AB         swp b
1565   0D80 D8            push b
1566   0D81 FA E1 FF      lea d, [bp + -31] ; $opcode
1567   0D84 2D            mov b, d
1568   0D85 38 00 00      mov c, 0
1569   0D88 FD AB         swp b
1570   0D8A D8            push b
1571   0D8B 07 C5 4B      call strcpy
1572   0D8E 51 04 00      add sp, 4
1573   0D91             ; --- END FUNCTION CALL
1574   0D91             ; get();  
1575   0D91             ; --- START FUNCTION CALL
1576   0D91 07 92 2B      call get
1577   0D94             ; if(toktype == END){ 
1578   0D94             _if42_cond:
1579   0D94 3B 61 4E      mov d, _toktype ; $toktype
1580   0D97 2A            mov b, [d]
1581   0D98 38 00 00      mov c, 0
1582   0D9B             ; --- START RELATIONAL
1583   0D9B D7            push a
1584   0D9C 11            mov a, b
1585   0D9D FD 2E 07 00   mov32 cb, $7 ; enum element: END
1585   0DA1 00 00 
1586   0DA3 B0            cmp a, b
1587   0DA4 FD 71         seq ; ==
1588   0DA6 E4            pop a
1589   0DA7             ; --- END RELATIONAL
1590   0DA7 C0 00 00      cmp b, 0
1591   0DAA C6 C6 0D      je _if42_else
1592   0DAD             _if42_TRUE:
1593   0DAD             ; strcat(opcode, " ."); 
1594   0DAD             ; --- START FUNCTION CALL
1595   0DAD 26 D3 50      mov b, _s26 ; " ."
1596   0DB0 FD AB         swp b
1597   0DB2 D8            push b
1598   0DB3 FA E1 FF      lea d, [bp + -31] ; $opcode
1599   0DB6 2D            mov b, d
1600   0DB7 38 00 00      mov c, 0
1601   0DBA FD AB         swp b
1602   0DBC D8            push b
1603   0DBD 07 3F 4C      call strcat
1604   0DC0 51 04 00      add sp, 4
1605   0DC3             ; --- END FUNCTION CALL
1606   0DC3 0A 35 0E      jmp _if42_exit
1607   0DC6             _if42_else:
1608   0DC6             ; strcat(opcode, " "); 
1609   0DC6             ; --- START FUNCTION CALL
1610   0DC6 26 D6 50      mov b, _s27 ; " "
1611   0DC9 FD AB         swp b
1612   0DCB D8            push b
1613   0DCC FA E1 FF      lea d, [bp + -31] ; $opcode
1614   0DCF 2D            mov b, d
1615   0DD0 38 00 00      mov c, 0
1616   0DD3 FD AB         swp b
1617   0DD5 D8            push b
1618   0DD6 07 3F 4C      call strcat
1619   0DD9 51 04 00      add sp, 4
1620   0DDC             ; --- END FUNCTION CALL
1621   0DDC             ; strcat(opcode, token); 
1622   0DDC             ; --- START FUNCTION CALL
1623   0DDC 3B 65 4E      mov d, _token_data ; $token
1624   0DDF 2D            mov b, d
1625   0DE0 38 00 00      mov c, 0
1626   0DE3 FD AB         swp b
1627   0DE5 D8            push b
1628   0DE6 FA E1 FF      lea d, [bp + -31] ; $opcode
1629   0DE9 2D            mov b, d
1630   0DEA 38 00 00      mov c, 0
1631   0DED FD AB         swp b
1632   0DEF D8            push b
1633   0DF0 07 3F 4C      call strcat
1634   0DF3 51 04 00      add sp, 4
1635   0DF6             ; --- END FUNCTION CALL
1636   0DF6             ; for(;;){ 
1637   0DF6             _for43_init:
1638   0DF6             _for43_cond:
1639   0DF6             _for43_block:
1640   0DF6             ; get(); 
1641   0DF6             ; --- START FUNCTION CALL
1642   0DF6 07 92 2B      call get
1643   0DF9             ; if(toktype == END) break; 
1644   0DF9             _if44_cond:
1645   0DF9 3B 61 4E      mov d, _toktype ; $toktype
1646   0DFC 2A            mov b, [d]
1647   0DFD 38 00 00      mov c, 0
1648   0E00             ; --- START RELATIONAL
1649   0E00 D7            push a
1650   0E01 11            mov a, b
1651   0E02 FD 2E 07 00   mov32 cb, $7 ; enum element: END
1651   0E06 00 00 
1652   0E08 B0            cmp a, b
1653   0E09 FD 71         seq ; ==
1654   0E0B E4            pop a
1655   0E0C             ; --- END RELATIONAL
1656   0E0C C0 00 00      cmp b, 0
1657   0E0F C6 18 0E      je _if44_exit
1658   0E12             _if44_TRUE:
1659   0E12             ; break; 
1660   0E12 0A 35 0E      jmp _for43_exit ; for break
1661   0E15 0A 18 0E      jmp _if44_exit
1662   0E18             _if44_exit:
1663   0E18             ; strcat(opcode, token); 
1664   0E18             ; --- START FUNCTION CALL
1665   0E18 3B 65 4E      mov d, _token_data ; $token
1666   0E1B 2D            mov b, d
1667   0E1C 38 00 00      mov c, 0
1668   0E1F FD AB         swp b
1669   0E21 D8            push b
1670   0E22 FA E1 FF      lea d, [bp + -31] ; $opcode
1671   0E25 2D            mov b, d
1672   0E26 38 00 00      mov c, 0
1673   0E29 FD AB         swp b
1674   0E2B D8            push b
1675   0E2C 07 3F 4C      call strcat
1676   0E2F 51 04 00      add sp, 4
1677   0E32             ; --- END FUNCTION CALL
1678   0E32             _for43_update:
1679   0E32 0A F6 0D      jmp _for43_cond
1680   0E35             _for43_exit:
1681   0E35             _if42_exit:
1682   0E35             ; op = search_opcode(opcode); 
1683   0E35 FA 87 FF      lea d, [bp + -121] ; $op
1684   0E38 DA            push d
1685   0E39             ; --- START FUNCTION CALL
1686   0E39 FA E1 FF      lea d, [bp + -31] ; $opcode
1687   0E3C 2D            mov b, d
1688   0E3D 38 00 00      mov c, 0
1689   0E40 FD AB         swp b
1690   0E42 D8            push b
1691   0E43 07 14 24      call search_opcode
1692   0E46 51 02 00      add sp, 2
1693   0E49             ; --- END FUNCTION CALL
1694   0E49 E7            pop d
1695   0E4A FD 28         mov si, b
1696   0E4C FD 50         mov di, d
1697   0E4E 38 1A 00      mov c, 26
1698   0E51 FD F5         rep movsb
1699   0E53             ; if(op.opcode_type){ 
1700   0E53             _if45_cond:
1701   0E53 FA 87 FF      lea d, [bp + -121] ; $op
1702   0E56 58 19 00      add d, 25
1703   0E59 32            mov bl, [d]
1704   0E5A A7 00         mov bh, 0
1705   0E5C 38 00 00      mov c, 0
1706   0E5F C0 00 00      cmp b, 0
1707   0E62 C6 75 0E      je _if45_exit
1708   0E65             _if45_TRUE:
1709   0E65             ; forwards(1); 
1710   0E65             ; --- START FUNCTION CALL
1711   0E65 FD 2E 01 00   mov32 cb, $00000001
1711   0E69 00 00 
1712   0E6B DD            push bl
1713   0E6C 07 41 27      call forwards
1714   0E6F 51 01 00      add sp, 1
1715   0E72             ; --- END FUNCTION CALL
1716   0E72 0A 75 0E      jmp _if45_exit
1717   0E75             _if45_exit:
1718   0E75             ; forwards(1); 
1719   0E75             ; --- START FUNCTION CALL
1720   0E75 FD 2E 01 00   mov32 cb, $00000001
1720   0E79 00 00 
1721   0E7B DD            push bl
1722   0E7C 07 41 27      call forwards
1723   0E7F 51 01 00      add sp, 1
1724   0E82             ; --- END FUNCTION CALL
1725   0E82 0A 8F 13      jmp _if41_exit
1726   0E85             _if41_else:
1727   0E85             ; num_operands = 0; 
1728   0E85 FA 85 FF      lea d, [bp + -123] ; $num_operands
1729   0E88 DA            push d
1730   0E89 FD 2E 00 00   mov32 cb, $00000000
1730   0E8D 00 00 
1731   0E8F E7            pop d
1732   0E90 FD 43         mov [d], b
1733   0E92             ; for(;;){ 
1734   0E92             _for46_init:
1735   0E92             _for46_cond:
1736   0E92             _for46_block:
1737   0E92             ; get(); 
1738   0E92             ; --- START FUNCTION CALL
1739   0E92 07 92 2B      call get
1740   0E95             ; if(toktype == END) break; 
1741   0E95             _if47_cond:
1742   0E95 3B 61 4E      mov d, _toktype ; $toktype
1743   0E98 2A            mov b, [d]
1744   0E99 38 00 00      mov c, 0
1745   0E9C             ; --- START RELATIONAL
1746   0E9C D7            push a
1747   0E9D 11            mov a, b
1748   0E9E FD 2E 07 00   mov32 cb, $7 ; enum element: END
1748   0EA2 00 00 
1749   0EA4 B0            cmp a, b
1750   0EA5 FD 71         seq ; ==
1751   0EA7 E4            pop a
1752   0EA8             ; --- END RELATIONAL
1753   0EA8 C0 00 00      cmp b, 0
1754   0EAB C6 B4 0E      je _if47_exit
1755   0EAE             _if47_TRUE:
1756   0EAE             ; break; 
1757   0EAE 0A 10 0F      jmp _for46_exit ; for break
1758   0EB1 0A B4 0E      jmp _if47_exit
1759   0EB4             _if47_exit:
1760   0EB4             ; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1761   0EB4             _if48_cond:
1762   0EB4 3B 61 4E      mov d, _toktype ; $toktype
1763   0EB7 2A            mov b, [d]
1764   0EB8 38 00 00      mov c, 0
1765   0EBB             ; --- START RELATIONAL
1766   0EBB D7            push a
1767   0EBC 11            mov a, b
1768   0EBD FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
1768   0EC1 00 00 
1769   0EC3 B0            cmp a, b
1770   0EC4 FD 71         seq ; ==
1771   0EC6 E4            pop a
1772   0EC7             ; --- END RELATIONAL
1773   0EC7             ; --- START LOGICAL OR
1774   0EC7 D7            push a
1775   0EC8 11            mov a, b
1776   0EC9 3B 61 4E      mov d, _toktype ; $toktype
1777   0ECC 2A            mov b, [d]
1778   0ECD 38 00 00      mov c, 0
1779   0ED0             ; --- START RELATIONAL
1780   0ED0 D7            push a
1781   0ED1 11            mov a, b
1782   0ED2 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1782   0ED6 00 00 
1783   0ED8 B0            cmp a, b
1784   0ED9 FD 71         seq ; ==
1785   0EDB E4            pop a
1786   0EDC             ; --- END RELATIONAL
1787   0EDC             ; --- START LOGICAL AND
1788   0EDC D7            push a
1789   0EDD 11            mov a, b
1790   0EDE             ; --- START FUNCTION CALL
1791   0EDE 3B 65 4E      mov d, _token_data ; $token
1792   0EE1 2D            mov b, d
1793   0EE2 38 00 00      mov c, 0
1794   0EE5 FD AB         swp b
1795   0EE7 D8            push b
1796   0EE8 07 36 1F      call is_reserved
1797   0EEB 51 02 00      add sp, 2
1798   0EEE             ; --- END FUNCTION CALL
1799   0EEE FD A7         sand a, b
1800   0EF0 E4            pop a
1801   0EF1             ; --- END LOGICAL AND
1802   0EF1 FD A8         sor a, b ; ||
1803   0EF3 E4            pop a
1804   0EF4             ; --- END LOGICAL OR
1805   0EF4 C0 00 00      cmp b, 0
1806   0EF7 C6 0D 0F      je _if48_exit
1807   0EFA             _if48_TRUE:
1808   0EFA             ; num_operands++; 
1809   0EFA FA 85 FF      lea d, [bp + -123] ; $num_operands
1810   0EFD 2A            mov b, [d]
1811   0EFE 38 00 00      mov c, 0
1812   0F01 11            mov a, b
1813   0F02 FD 77         inc b
1814   0F04 FA 85 FF      lea d, [bp + -123] ; $num_operands
1815   0F07 FD 43         mov [d], b
1816   0F09 27            mov b, a
1817   0F0A 0A 0D 0F      jmp _if48_exit
1818   0F0D             _if48_exit:
1819   0F0D             _for46_update:
1820   0F0D 0A 92 0E      jmp _for46_cond
1821   0F10             _for46_exit:
1822   0F10             ; if(num_operands > 2) error("Maximum number of operands per instruction is 2."); 
1823   0F10             _if49_cond:
1824   0F10 FA 85 FF      lea d, [bp + -123] ; $num_operands
1825   0F13 2A            mov b, [d]
1826   0F14 38 00 00      mov c, 0
1827   0F17             ; --- START RELATIONAL
1828   0F17 D7            push a
1829   0F18 11            mov a, b
1830   0F19 FD 2E 02 00   mov32 cb, $00000002
1830   0F1D 00 00 
1831   0F1F B0            cmp a, b
1832   0F20 FD 7F         sgt ; >
1833   0F22 E4            pop a
1834   0F23             ; --- END RELATIONAL
1835   0F23 C0 00 00      cmp b, 0
1836   0F26 C6 38 0F      je _if49_exit
1837   0F29             _if49_TRUE:
1838   0F29             ; error("Maximum number of operands per instruction is 2."); 
1839   0F29             ; --- START FUNCTION CALL
1840   0F29 26 D8 50      mov b, _s28 ; "Maximum number of operands per instruction is 2."
1841   0F2C FD AB         swp b
1842   0F2E D8            push b
1843   0F2F 07 98 39      call error
1844   0F32 51 02 00      add sp, 2
1845   0F35             ; --- END FUNCTION CALL
1846   0F35 0A 38 0F      jmp _if49_exit
1847   0F38             _if49_exit:
1848   0F38             ; num_operands_exp = _exp(2, num_operands); 
1849   0F38 FA 83 FF      lea d, [bp + -125] ; $num_operands_exp
1850   0F3B DA            push d
1851   0F3C             ; --- START FUNCTION CALL
1852   0F3C FA 85 FF      lea d, [bp + -123] ; $num_operands
1853   0F3F 2A            mov b, [d]
1854   0F40 38 00 00      mov c, 0
1855   0F43 FD AB         swp b
1856   0F45 D8            push b
1857   0F46 FD 2E 02 00   mov32 cb, $00000002
1857   0F4A 00 00 
1858   0F4C FD AB         swp b
1859   0F4E D8            push b
1860   0F4F 07 E2 3D      call _exp
1861   0F52 51 04 00      add sp, 4
1862   0F55             ; --- END FUNCTION CALL
1863   0F55 E7            pop d
1864   0F56 FD 43         mov [d], b
1865   0F58             ; for(i = 0; i < num_operands_exp; i++){ 
1866   0F58             _for50_init:
1867   0F58 FA 81 FF      lea d, [bp + -127] ; $i
1868   0F5B DA            push d
1869   0F5C FD 2E 00 00   mov32 cb, $00000000
1869   0F60 00 00 
1870   0F62 E7            pop d
1871   0F63 FD 43         mov [d], b
1872   0F65             _for50_cond:
1873   0F65 FA 81 FF      lea d, [bp + -127] ; $i
1874   0F68 2A            mov b, [d]
1875   0F69 38 00 00      mov c, 0
1876   0F6C             ; --- START RELATIONAL
1877   0F6C D7            push a
1878   0F6D 11            mov a, b
1879   0F6E FA 83 FF      lea d, [bp + -125] ; $num_operands_exp
1880   0F71 2A            mov b, [d]
1881   0F72 38 00 00      mov c, 0
1882   0F75 B0            cmp a, b
1883   0F76 FD 73         slt ; < (signed)
1884   0F78 E4            pop a
1885   0F79             ; --- END RELATIONAL
1886   0F79 C0 00 00      cmp b, 0
1887   0F7C C6 8F 13      je _for50_exit
1888   0F7F             _for50_block:
1889   0F7F             ; prog = code_line; 
1890   0F7F 3B 63 4E      mov d, _prog ; $prog
1891   0F82 DA            push d
1892   0F83 FA A1 FF      lea d, [bp + -95] ; $code_line
1893   0F86 2D            mov b, d
1894   0F87 38 00 00      mov c, 0
1895   0F8A E7            pop d
1896   0F8B FD 43         mov [d], b
1897   0F8D             ; get(); 
1898   0F8D             ; --- START FUNCTION CALL
1899   0F8D 07 92 2B      call get
1900   0F90             ; strcpy(opcode, token); 
1901   0F90             ; --- START FUNCTION CALL
1902   0F90 3B 65 4E      mov d, _token_data ; $token
1903   0F93 2D            mov b, d
1904   0F94 38 00 00      mov c, 0
1905   0F97 FD AB         swp b
1906   0F99 D8            push b
1907   0F9A FA E1 FF      lea d, [bp + -31] ; $opcode
1908   0F9D 2D            mov b, d
1909   0F9E 38 00 00      mov c, 0
1910   0FA1 FD AB         swp b
1911   0FA3 D8            push b
1912   0FA4 07 C5 4B      call strcpy
1913   0FA7 51 04 00      add sp, 4
1914   0FAA             ; --- END FUNCTION CALL
1915   0FAA             ; strcat(opcode, " "); 
1916   0FAA             ; --- START FUNCTION CALL
1917   0FAA 26 D6 50      mov b, _s27 ; " "
1918   0FAD FD AB         swp b
1919   0FAF D8            push b
1920   0FB0 FA E1 FF      lea d, [bp + -31] ; $opcode
1921   0FB3 2D            mov b, d
1922   0FB4 38 00 00      mov c, 0
1923   0FB7 FD AB         swp b
1924   0FB9 D8            push b
1925   0FBA 07 3F 4C      call strcat
1926   0FBD 51 04 00      add sp, 4
1927   0FC0             ; --- END FUNCTION CALL
1928   0FC0             ; j = 0; 
1929   0FC0 FA 7F FF      lea d, [bp + -129] ; $j
1930   0FC3 DA            push d
1931   0FC4 FD 2E 00 00   mov32 cb, $00000000
1931   0FC8 00 00 
1932   0FCA E7            pop d
1933   0FCB FD 43         mov [d], b
1934   0FCD             ; for(;;){ 
1935   0FCD             _for51_init:
1936   0FCD             _for51_cond:
1937   0FCD             _for51_block:
1938   0FCD             ; get(); 
1939   0FCD             ; --- START FUNCTION CALL
1940   0FCD 07 92 2B      call get
1941   0FD0             ; if(toktype == END) break; 
1942   0FD0             _if52_cond:
1943   0FD0 3B 61 4E      mov d, _toktype ; $toktype
1944   0FD3 2A            mov b, [d]
1945   0FD4 38 00 00      mov c, 0
1946   0FD7             ; --- START RELATIONAL
1947   0FD7 D7            push a
1948   0FD8 11            mov a, b
1949   0FD9 FD 2E 07 00   mov32 cb, $7 ; enum element: END
1949   0FDD 00 00 
1950   0FDF B0            cmp a, b
1951   0FE0 FD 71         seq ; ==
1952   0FE2 E4            pop a
1953   0FE3             ; --- END RELATIONAL
1954   0FE3 C0 00 00      cmp b, 0
1955   0FE6 C6 EF 0F      je _if52_exit
1956   0FE9             _if52_TRUE:
1957   0FE9             ; break; 
1958   0FE9 0A 72 11      jmp _for51_exit ; for break
1959   0FEC 0A EF 0F      jmp _if52_exit
1960   0FEF             _if52_exit:
1961   0FEF             ; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1962   0FEF             _if53_cond:
1963   0FEF 3B 61 4E      mov d, _toktype ; $toktype
1964   0FF2 2A            mov b, [d]
1965   0FF3 38 00 00      mov c, 0
1966   0FF6             ; --- START RELATIONAL
1967   0FF6 D7            push a
1968   0FF7 11            mov a, b
1969   0FF8 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
1969   0FFC 00 00 
1970   0FFE B0            cmp a, b
1971   0FFF FD 71         seq ; ==
1972   1001 E4            pop a
1973   1002             ; --- END RELATIONAL
1974   1002             ; --- START LOGICAL OR
1975   1002 D7            push a
1976   1003 11            mov a, b
1977   1004 3B 61 4E      mov d, _toktype ; $toktype
1978   1007 2A            mov b, [d]
1979   1008 38 00 00      mov c, 0
1980   100B             ; --- START RELATIONAL
1981   100B D7            push a
1982   100C 11            mov a, b
1983   100D FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1983   1011 00 00 
1984   1013 B0            cmp a, b
1985   1014 FD 71         seq ; ==
1986   1016 E4            pop a
1987   1017             ; --- END RELATIONAL
1988   1017             ; --- START LOGICAL AND
1989   1017 D7            push a
1990   1018 11            mov a, b
1991   1019             ; --- START FUNCTION CALL
1992   1019 3B 65 4E      mov d, _token_data ; $token
1993   101C 2D            mov b, d
1994   101D 38 00 00      mov c, 0
1995   1020 FD AB         swp b
1996   1022 D8            push b
1997   1023 07 36 1F      call is_reserved
1998   1026 51 02 00      add sp, 2
1999   1029             ; --- END FUNCTION CALL
2000   1029 FD A7         sand a, b
2001   102B E4            pop a
2002   102C             ; --- END LOGICAL AND
2003   102C FD A8         sor a, b ; ||
2004   102E E4            pop a
2005   102F             ; --- END LOGICAL OR
2006   102F C0 00 00      cmp b, 0
2007   1032 C6 55 11      je _if53_else
2008   1035             _if53_TRUE:
2009   1035             ; strcat(opcode, symbols[i*2+j]); 
2010   1035             ; --- START FUNCTION CALL
2011   1035 3B C7 4F      mov d, _symbols_data ; $symbols
2012   1038 D7            push a
2013   1039 DA            push d
2014   103A FA 81 FF      lea d, [bp + -127] ; $i
2015   103D 2A            mov b, [d]
2016   103E 38 00 00      mov c, 0
2017   1041             ; --- START FACTORS
2018   1041 D7            push a
2019   1042 FD D8         push g
2020   1044 11            mov a, b
2021   1045 FD 7A         mov g, c
2022   1047 FD 2E 02 00   mov32 cb, $00000002
2022   104B 00 00 
2023   104D D7            push a     ; save left operand
2024   104E 8E            xor a, b   ; xor sign bits
2025   104F FD AA         swp a      ; swap bytes
2026   1051 83            mov cl, al ; save result of xor into 'dl'
2027   1052 E4            pop a      ; restore left side operator
2028   1053 DF            push cl    ; save result of xor above
2029   1054 FD AA         swp a  
2030   1056 93 80         test al, $80  
2031   1058 FD AA         swp a  
2032   105A C6 5F 10      jz skip_invert_a_61  
2033   105D FD 95         neg a 
2034   105F             skip_invert_a_61:   
2035   105F FD AB         swp b
2036   1061 FD 93 80      test bl, $80  
2037   1064 FD AB         swp b
2038   1066 C6 6B 10      jz skip_invert_b_61  
2039   1069 FD 97         neg b 
2040   106B             skip_invert_b_61:   
2041   106B AC            mul a, b ; *
2042   106C FD 78         mov g, a
2043   106E 11            mov a, b
2044   106F EA            pop bl
2045   1070 FD 93 80      test bl, $80
2046   1073 C6 80 10      jz _same_signs_61
2047   1076 2F            mov bl, al
2048   1077 95            not a
2049   1078 FD 97         neg b
2050   107A 5B 00 00      adc a, 0
2051   107D FD 78         mov g, a
2052   107F 11            mov a, b
2053   1080             _same_signs_61:
2054   1080 FD 38         mov c, g
2055   1082 27            mov b, a
2056   1083 FD F1         pop g
2057   1085 E4            pop a
2058   1086             ; --- END FACTORS
2059   1086             ; --- START TERMS
2060   1086 D7            push a
2061   1087 FD D8         push g
2062   1089 11            mov a, b
2063   108A FD 7A         mov g, c
2064   108C FA 7F FF      lea d, [bp + -129] ; $j
2065   108F 2A            mov b, [d]
2066   1090 38 00 00      mov c, 0
2067   1093 38 00 00      mov c, 0
2068   1096 FD 15         add32 cb, ga
2069   1098 FD F1         pop g
2070   109A E4            pop a
2071   109B             ; --- END TERMS
2072   109B E7            pop d
2073   109C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2074   10A0 E4            pop a
2075   10A1 2A            mov b, [d]
2076   10A2 38 00 00      mov c, 0
2077   10A5 FD AB         swp b
2078   10A7 D8            push b
2079   10A8 FA E1 FF      lea d, [bp + -31] ; $opcode
2080   10AB 2D            mov b, d
2081   10AC 38 00 00      mov c, 0
2082   10AF FD AB         swp b
2083   10B1 D8            push b
2084   10B2 07 3F 4C      call strcat
2085   10B5 51 04 00      add sp, 4
2086   10B8             ; --- END FUNCTION CALL
2087   10B8             ; operand_types[j] = *symbols[i*2+j]; 
2088   10B8 FA 7C FF      lea d, [bp + -132] ; $operand_types
2089   10BB D7            push a
2090   10BC DA            push d
2091   10BD FA 7F FF      lea d, [bp + -129] ; $j
2092   10C0 2A            mov b, [d]
2093   10C1 38 00 00      mov c, 0
2094   10C4 E7            pop d
2095   10C5 5A            add d, b
2096   10C6 E4            pop a
2097   10C7 DA            push d
2098   10C8 3B C7 4F      mov d, _symbols_data ; $symbols
2099   10CB D7            push a
2100   10CC DA            push d
2101   10CD FA 81 FF      lea d, [bp + -127] ; $i
2102   10D0 2A            mov b, [d]
2103   10D1 38 00 00      mov c, 0
2104   10D4             ; --- START FACTORS
2105   10D4 D7            push a
2106   10D5 FD D8         push g
2107   10D7 11            mov a, b
2108   10D8 FD 7A         mov g, c
2109   10DA FD 2E 02 00   mov32 cb, $00000002
2109   10DE 00 00 
2110   10E0 D7            push a     ; save left operand
2111   10E1 8E            xor a, b   ; xor sign bits
2112   10E2 FD AA         swp a      ; swap bytes
2113   10E4 83            mov cl, al ; save result of xor into 'dl'
2114   10E5 E4            pop a      ; restore left side operator
2115   10E6 DF            push cl    ; save result of xor above
2116   10E7 FD AA         swp a  
2117   10E9 93 80         test al, $80  
2118   10EB FD AA         swp a  
2119   10ED C6 F2 10      jz skip_invert_a_65  
2120   10F0 FD 95         neg a 
2121   10F2             skip_invert_a_65:   
2122   10F2 FD AB         swp b
2123   10F4 FD 93 80      test bl, $80  
2124   10F7 FD AB         swp b
2125   10F9 C6 FE 10      jz skip_invert_b_65  
2126   10FC FD 97         neg b 
2127   10FE             skip_invert_b_65:   
2128   10FE AC            mul a, b ; *
2129   10FF FD 78         mov g, a
2130   1101 11            mov a, b
2131   1102 EA            pop bl
2132   1103 FD 93 80      test bl, $80
2133   1106 C6 13 11      jz _same_signs_65
2134   1109 2F            mov bl, al
2135   110A 95            not a
2136   110B FD 97         neg b
2137   110D 5B 00 00      adc a, 0
2138   1110 FD 78         mov g, a
2139   1112 11            mov a, b
2140   1113             _same_signs_65:
2141   1113 FD 38         mov c, g
2142   1115 27            mov b, a
2143   1116 FD F1         pop g
2144   1118 E4            pop a
2145   1119             ; --- END FACTORS
2146   1119             ; --- START TERMS
2147   1119 D7            push a
2148   111A FD D8         push g
2149   111C 11            mov a, b
2150   111D FD 7A         mov g, c
2151   111F FA 7F FF      lea d, [bp + -129] ; $j
2152   1122 2A            mov b, [d]
2153   1123 38 00 00      mov c, 0
2154   1126 38 00 00      mov c, 0
2155   1129 FD 15         add32 cb, ga
2156   112B FD F1         pop g
2157   112D E4            pop a
2158   112E             ; --- END TERMS
2159   112E E7            pop d
2160   112F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2161   1133 E4            pop a
2162   1134 2A            mov b, [d]
2163   1135 38 00 00      mov c, 0
2164   1138 74            mov d, b
2165   1139 32            mov bl, [d]
2166   113A A7 00         mov bh, 0
2167   113C 38 00 00      mov c, 0
2168   113F E7            pop d
2169   1140 FD 3E         mov [d], bl
2170   1142             ; j++; 
2171   1142 FA 7F FF      lea d, [bp + -129] ; $j
2172   1145 2A            mov b, [d]
2173   1146 38 00 00      mov c, 0
2174   1149 11            mov a, b
2175   114A FD 77         inc b
2176   114C FA 7F FF      lea d, [bp + -129] ; $j
2177   114F FD 43         mov [d], b
2178   1151 27            mov b, a
2179   1152 0A 6F 11      jmp _if53_exit
2180   1155             _if53_else:
2181   1155             ; strcat(opcode, token); 
2182   1155             ; --- START FUNCTION CALL
2183   1155 3B 65 4E      mov d, _token_data ; $token
2184   1158 2D            mov b, d
2185   1159 38 00 00      mov c, 0
2186   115C FD AB         swp b
2187   115E D8            push b
2188   115F FA E1 FF      lea d, [bp + -31] ; $opcode
2189   1162 2D            mov b, d
2190   1163 38 00 00      mov c, 0
2191   1166 FD AB         swp b
2192   1168 D8            push b
2193   1169 07 3F 4C      call strcat
2194   116C 51 04 00      add sp, 4
2195   116F             ; --- END FUNCTION CALL
2196   116F             _if53_exit:
2197   116F             _for51_update:
2198   116F 0A CD 0F      jmp _for51_cond
2199   1172             _for51_exit:
2200   1172             ; op = search_opcode(opcode); 
2201   1172 FA 87 FF      lea d, [bp + -121] ; $op
2202   1175 DA            push d
2203   1176             ; --- START FUNCTION CALL
2204   1176 FA E1 FF      lea d, [bp + -31] ; $opcode
2205   1179 2D            mov b, d
2206   117A 38 00 00      mov c, 0
2207   117D FD AB         swp b
2208   117F D8            push b
2209   1180 07 14 24      call search_opcode
2210   1183 51 02 00      add sp, 2
2211   1186             ; --- END FUNCTION CALL
2212   1186 E7            pop d
2213   1187 FD 28         mov si, b
2214   1189 FD 50         mov di, d
2215   118B 38 1A 00      mov c, 26
2216   118E FD F5         rep movsb
2217   1190             ; if(op.name[0] == '\0') continue; 
2218   1190             _if66_cond:
2219   1190 FA 87 FF      lea d, [bp + -121] ; $op
2220   1193 58 00 00      add d, 0
2221   1196 D7            push a
2222   1197 DA            push d
2223   1198 FD 2E 00 00   mov32 cb, $00000000
2223   119C 00 00 
2224   119E E7            pop d
2225   119F 5A            add d, b
2226   11A0 E4            pop a
2227   11A1 32            mov bl, [d]
2228   11A2 A7 00         mov bh, 0
2229   11A4 38 00 00      mov c, 0
2230   11A7             ; --- START RELATIONAL
2231   11A7 D7            push a
2232   11A8 11            mov a, b
2233   11A9 FD 2E 00 00   mov32 cb, $00000000
2233   11AD 00 00 
2234   11AF B0            cmp a, b
2235   11B0 FD 71         seq ; ==
2236   11B2 E4            pop a
2237   11B3             ; --- END RELATIONAL
2238   11B3 C0 00 00      cmp b, 0
2239   11B6 C6 BF 11      je _if66_exit
2240   11B9             _if66_TRUE:
2241   11B9             ; continue; 
2242   11B9 0A 7C 13      jmp _for50_update ; for continue
2243   11BC 0A BF 11      jmp _if66_exit
2244   11BF             _if66_exit:
2245   11BF             ; if(op.opcode_type){ 
2246   11BF             _if67_cond:
2247   11BF FA 87 FF      lea d, [bp + -121] ; $op
2248   11C2 58 19 00      add d, 25
2249   11C5 32            mov bl, [d]
2250   11C6 A7 00         mov bh, 0
2251   11C8 38 00 00      mov c, 0
2252   11CB C0 00 00      cmp b, 0
2253   11CE C6 E1 11      je _if67_exit
2254   11D1             _if67_TRUE:
2255   11D1             ; forwards(1); 
2256   11D1             ; --- START FUNCTION CALL
2257   11D1 FD 2E 01 00   mov32 cb, $00000001
2257   11D5 00 00 
2258   11D7 DD            push bl
2259   11D8 07 41 27      call forwards
2260   11DB 51 01 00      add sp, 1
2261   11DE             ; --- END FUNCTION CALL
2262   11DE 0A E1 11      jmp _if67_exit
2263   11E1             _if67_exit:
2264   11E1             ; forwards(1); 
2265   11E1             ; --- START FUNCTION CALL
2266   11E1 FD 2E 01 00   mov32 cb, $00000001
2266   11E5 00 00 
2267   11E7 DD            push bl
2268   11E8 07 41 27      call forwards
2269   11EB 51 01 00      add sp, 1
2270   11EE             ; --- END FUNCTION CALL
2271   11EE             ; prog = code_line; 
2272   11EE 3B 63 4E      mov d, _prog ; $prog
2273   11F1 DA            push d
2274   11F2 FA A1 FF      lea d, [bp + -95] ; $code_line
2275   11F5 2D            mov b, d
2276   11F6 38 00 00      mov c, 0
2277   11F9 E7            pop d
2278   11FA FD 43         mov [d], b
2279   11FC             ; j = 0; 
2280   11FC FA 7F FF      lea d, [bp + -129] ; $j
2281   11FF DA            push d
2282   1200 FD 2E 00 00   mov32 cb, $00000000
2282   1204 00 00 
2283   1206 E7            pop d
2284   1207 FD 43         mov [d], b
2285   1209             ; get(); 
2286   1209             ; --- START FUNCTION CALL
2287   1209 07 92 2B      call get
2288   120C             ; for(;;){ 
2289   120C             _for68_init:
2290   120C             _for68_cond:
2291   120C             _for68_block:
2292   120C             ; get(); 
2293   120C             ; --- START FUNCTION CALL
2294   120C 07 92 2B      call get
2295   120F             ; if(toktype == END) break; 
2296   120F             _if69_cond:
2297   120F 3B 61 4E      mov d, _toktype ; $toktype
2298   1212 2A            mov b, [d]
2299   1213 38 00 00      mov c, 0
2300   1216             ; --- START RELATIONAL
2301   1216 D7            push a
2302   1217 11            mov a, b
2303   1218 FD 2E 07 00   mov32 cb, $7 ; enum element: END
2303   121C 00 00 
2304   121E B0            cmp a, b
2305   121F FD 71         seq ; ==
2306   1221 E4            pop a
2307   1222             ; --- END RELATIONAL
2308   1222 C0 00 00      cmp b, 0
2309   1225 C6 2E 12      je _if69_exit
2310   1228             _if69_TRUE:
2311   1228             ; break; 
2312   1228 0A 79 13      jmp _for68_exit ; for break
2313   122B 0A 2E 12      jmp _if69_exit
2314   122E             _if69_exit:
2315   122E             ; if(toktype == IDENTIFIER && !is_reserved(token)){ 
2316   122E             _if70_cond:
2317   122E 3B 61 4E      mov d, _toktype ; $toktype
2318   1231 2A            mov b, [d]
2319   1232 38 00 00      mov c, 0
2320   1235             ; --- START RELATIONAL
2321   1235 D7            push a
2322   1236 11            mov a, b
2323   1237 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
2323   123B 00 00 
2324   123D B0            cmp a, b
2325   123E FD 71         seq ; ==
2326   1240 E4            pop a
2327   1241             ; --- END RELATIONAL
2328   1241             ; --- START LOGICAL AND
2329   1241 D7            push a
2330   1242 11            mov a, b
2331   1243             ; --- START FUNCTION CALL
2332   1243 3B 65 4E      mov d, _token_data ; $token
2333   1246 2D            mov b, d
2334   1247 38 00 00      mov c, 0
2335   124A FD AB         swp b
2336   124C D8            push b
2337   124D 07 36 1F      call is_reserved
2338   1250 51 02 00      add sp, 2
2339   1253             ; --- END FUNCTION CALL
2340   1253 FD A7         sand a, b
2341   1255 E4            pop a
2342   1256             ; --- END LOGICAL AND
2343   1256 C0 00 00      cmp b, 0
2344   1259 C6 DC 12      je _if70_else
2345   125C             _if70_TRUE:
2346   125C             ; if(operand_types[j] == '#'){ 
2347   125C             _if71_cond:
2348   125C FA 7C FF      lea d, [bp + -132] ; $operand_types
2349   125F D7            push a
2350   1260 DA            push d
2351   1261 FA 7F FF      lea d, [bp + -129] ; $j
2352   1264 2A            mov b, [d]
2353   1265 38 00 00      mov c, 0
2354   1268 E7            pop d
2355   1269 5A            add d, b
2356   126A E4            pop a
2357   126B 32            mov bl, [d]
2358   126C A7 00         mov bh, 0
2359   126E 38 00 00      mov c, 0
2360   1271             ; --- START RELATIONAL
2361   1271 D7            push a
2362   1272 11            mov a, b
2363   1273 FD 2E 23 00   mov32 cb, $00000023
2363   1277 00 00 
2364   1279 B0            cmp a, b
2365   127A FD 71         seq ; ==
2366   127C E4            pop a
2367   127D             ; --- END RELATIONAL
2368   127D C0 00 00      cmp b, 0
2369   1280 C6 92 12      je _if71_else
2370   1283             _if71_TRUE:
2371   1283             ; error("8bit operand _expected but 16bit label given."); 
2372   1283             ; --- START FUNCTION CALL
2373   1283 26 09 51      mov b, _s29 ; "8bit operand _expected but 16bit label given."
2374   1286 FD AB         swp b
2375   1288 D8            push b
2376   1289 07 98 39      call error
2377   128C 51 02 00      add sp, 2
2378   128F             ; --- END FUNCTION CALL
2379   128F 0A C9 12      jmp _if71_exit
2380   1292             _if71_else:
2381   1292             ; if(operand_types[j] == '@'){ 
2382   1292             _if72_cond:
2383   1292 FA 7C FF      lea d, [bp + -132] ; $operand_types
2384   1295 D7            push a
2385   1296 DA            push d
2386   1297 FA 7F FF      lea d, [bp + -129] ; $j
2387   129A 2A            mov b, [d]
2388   129B 38 00 00      mov c, 0
2389   129E E7            pop d
2390   129F 5A            add d, b
2391   12A0 E4            pop a
2392   12A1 32            mov bl, [d]
2393   12A2 A7 00         mov bh, 0
2394   12A4 38 00 00      mov c, 0
2395   12A7             ; --- START RELATIONAL
2396   12A7 D7            push a
2397   12A8 11            mov a, b
2398   12A9 FD 2E 40 00   mov32 cb, $00000040
2398   12AD 00 00 
2399   12AF B0            cmp a, b
2400   12B0 FD 71         seq ; ==
2401   12B2 E4            pop a
2402   12B3             ; --- END RELATIONAL
2403   12B3 C0 00 00      cmp b, 0
2404   12B6 C6 C9 12      je _if72_exit
2405   12B9             _if72_TRUE:
2406   12B9             ; forwards(2); 
2407   12B9             ; --- START FUNCTION CALL
2408   12B9 FD 2E 02 00   mov32 cb, $00000002
2408   12BD 00 00 
2409   12BF DD            push bl
2410   12C0 07 41 27      call forwards
2411   12C3 51 01 00      add sp, 1
2412   12C6             ; --- END FUNCTION CALL
2413   12C6 0A C9 12      jmp _if72_exit
2414   12C9             _if72_exit:
2415   12C9             _if71_exit:
2416   12C9             ; j++; 
2417   12C9 FA 7F FF      lea d, [bp + -129] ; $j
2418   12CC 2A            mov b, [d]
2419   12CD 38 00 00      mov c, 0
2420   12D0 11            mov a, b
2421   12D1 FD 77         inc b
2422   12D3 FA 7F FF      lea d, [bp + -129] ; $j
2423   12D6 FD 43         mov [d], b
2424   12D8 27            mov b, a
2425   12D9 0A 76 13      jmp _if70_exit
2426   12DC             _if70_else:
2427   12DC             ; if(toktype == INTEGER_CONST){ 
2428   12DC             _if73_cond:
2429   12DC 3B 61 4E      mov d, _toktype ; $toktype
2430   12DF 2A            mov b, [d]
2431   12E0 38 00 00      mov c, 0
2432   12E3             ; --- START RELATIONAL
2433   12E3 D7            push a
2434   12E4 11            mov a, b
2435   12E5 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2435   12E9 00 00 
2436   12EB B0            cmp a, b
2437   12EC FD 71         seq ; ==
2438   12EE E4            pop a
2439   12EF             ; --- END RELATIONAL
2440   12EF C0 00 00      cmp b, 0
2441   12F2 C6 76 13      je _if73_exit
2442   12F5             _if73_TRUE:
2443   12F5             ; if(operand_types[j] == '#'){ 
2444   12F5             _if74_cond:
2445   12F5 FA 7C FF      lea d, [bp + -132] ; $operand_types
2446   12F8 D7            push a
2447   12F9 DA            push d
2448   12FA FA 7F FF      lea d, [bp + -129] ; $j
2449   12FD 2A            mov b, [d]
2450   12FE 38 00 00      mov c, 0
2451   1301 E7            pop d
2452   1302 5A            add d, b
2453   1303 E4            pop a
2454   1304 32            mov bl, [d]
2455   1305 A7 00         mov bh, 0
2456   1307 38 00 00      mov c, 0
2457   130A             ; --- START RELATIONAL
2458   130A D7            push a
2459   130B 11            mov a, b
2460   130C FD 2E 23 00   mov32 cb, $00000023
2460   1310 00 00 
2461   1312 B0            cmp a, b
2462   1313 FD 71         seq ; ==
2463   1315 E4            pop a
2464   1316             ; --- END RELATIONAL
2465   1316 C0 00 00      cmp b, 0
2466   1319 C6 2C 13      je _if74_else
2467   131C             _if74_TRUE:
2468   131C             ; forwards(1); 
2469   131C             ; --- START FUNCTION CALL
2470   131C FD 2E 01 00   mov32 cb, $00000001
2470   1320 00 00 
2471   1322 DD            push bl
2472   1323 07 41 27      call forwards
2473   1326 51 01 00      add sp, 1
2474   1329             ; --- END FUNCTION CALL
2475   1329 0A 63 13      jmp _if74_exit
2476   132C             _if74_else:
2477   132C             ; if(operand_types[j] == '@'){ 
2478   132C             _if75_cond:
2479   132C FA 7C FF      lea d, [bp + -132] ; $operand_types
2480   132F D7            push a
2481   1330 DA            push d
2482   1331 FA 7F FF      lea d, [bp + -129] ; $j
2483   1334 2A            mov b, [d]
2484   1335 38 00 00      mov c, 0
2485   1338 E7            pop d
2486   1339 5A            add d, b
2487   133A E4            pop a
2488   133B 32            mov bl, [d]
2489   133C A7 00         mov bh, 0
2490   133E 38 00 00      mov c, 0
2491   1341             ; --- START RELATIONAL
2492   1341 D7            push a
2493   1342 11            mov a, b
2494   1343 FD 2E 40 00   mov32 cb, $00000040
2494   1347 00 00 
2495   1349 B0            cmp a, b
2496   134A FD 71         seq ; ==
2497   134C E4            pop a
2498   134D             ; --- END RELATIONAL
2499   134D C0 00 00      cmp b, 0
2500   1350 C6 63 13      je _if75_exit
2501   1353             _if75_TRUE:
2502   1353             ; forwards(2); 
2503   1353             ; --- START FUNCTION CALL
2504   1353 FD 2E 02 00   mov32 cb, $00000002
2504   1357 00 00 
2505   1359 DD            push bl
2506   135A 07 41 27      call forwards
2507   135D 51 01 00      add sp, 1
2508   1360             ; --- END FUNCTION CALL
2509   1360 0A 63 13      jmp _if75_exit
2510   1363             _if75_exit:
2511   1363             _if74_exit:
2512   1363             ; j++; 
2513   1363 FA 7F FF      lea d, [bp + -129] ; $j
2514   1366 2A            mov b, [d]
2515   1367 38 00 00      mov c, 0
2516   136A 11            mov a, b
2517   136B FD 77         inc b
2518   136D FA 7F FF      lea d, [bp + -129] ; $j
2519   1370 FD 43         mov [d], b
2520   1372 27            mov b, a
2521   1373 0A 76 13      jmp _if73_exit
2522   1376             _if73_exit:
2523   1376             _if70_exit:
2524   1376             _for68_update:
2525   1376 0A 0C 12      jmp _for68_cond
2526   1379             _for68_exit:
2527   1379             ; break; 
2528   1379 0A 8F 13      jmp _for50_exit ; for break
2529   137C             _for50_update:
2530   137C FA 81 FF      lea d, [bp + -127] ; $i
2531   137F 2A            mov b, [d]
2532   1380 38 00 00      mov c, 0
2533   1383 11            mov a, b
2534   1384 FD 77         inc b
2535   1386 FA 81 FF      lea d, [bp + -127] ; $i
2536   1389 FD 43         mov [d], b
2537   138B 27            mov b, a
2538   138C 0A 65 0F      jmp _for50_cond
2539   138F             _for50_exit:
2540   138F             _if41_exit:
2541   138F             ; pop_prog(); 
2542   138F             ; --- START FUNCTION CALL
2543   138F 07 50 3A      call pop_prog
2544   1392 F9            leave
2545   1393 09            ret
2546   1394             
2547   1394             parse_instr:
2548   1394 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2549   1397             ; char opcode[32]; 
2550   1397 52 20 00      sub sp, 32
2551   139A             ; char code_line[64]; 
2552   139A 52 40 00      sub sp, 64
2553   139D             ; struct t_opcode op; 
2554   139D 52 1A 00      sub sp, 26
2555   13A0             ; int instr_len; 
2556   13A0 52 02 00      sub sp, 2
2557   13A3             ; int num_operands, num_operands_exp; 
2558   13A3 52 02 00      sub sp, 2
2559   13A6 52 02 00      sub sp, 2
2560   13A9             ; int i, j; 
2561   13A9 52 02 00      sub sp, 2
2562   13AC 52 02 00      sub sp, 2
2563   13AF             ; char operand_types[3]; // operand types and locations 
2564   13AF 52 03 00      sub sp, 3
2565   13B2             ; int old_pc; 
2566   13B2 52 02 00      sub sp, 2
2567   13B5             ; char has_operands; 
2568   13B5 52 01 00      sub sp, 1
2569   13B8             ; old_pc = pc; 
2570   13B8 FA 78 FF      lea d, [bp + -136] ; $old_pc
2571   13BB DA            push d
2572   13BC 3B 5C 4E      mov d, _pc ; $pc
2573   13BF 2A            mov b, [d]
2574   13C0 38 00 00      mov c, 0
2575   13C3 E7            pop d
2576   13C4 FD 43         mov [d], b
2577   13C6             ; get_line(); 
2578   13C6             ; --- START FUNCTION CALL
2579   13C6 07 75 2A      call get_line
2580   13C9             ; push_prog(); 
2581   13C9             ; --- START FUNCTION CALL
2582   13C9 07 F6 39      call push_prog
2583   13CC             ; strcpy(code_line, string_const); 
2584   13CC             ; --- START FUNCTION CALL
2585   13CC 3B A5 4E      mov d, _string_const_data ; $string_const
2586   13CF 2D            mov b, d
2587   13D0 38 00 00      mov c, 0
2588   13D3 FD AB         swp b
2589   13D5 D8            push b
2590   13D6 FA A1 FF      lea d, [bp + -95] ; $code_line
2591   13D9 2D            mov b, d
2592   13DA 38 00 00      mov c, 0
2593   13DD FD AB         swp b
2594   13DF D8            push b
2595   13E0 07 C5 4B      call strcpy
2596   13E3 51 04 00      add sp, 4
2597   13E6             ; --- END FUNCTION CALL
2598   13E6             ; has_operands = 0; 
2599   13E6 FA 77 FF      lea d, [bp + -137] ; $has_operands
2600   13E9 DA            push d
2601   13EA FD 2E 00 00   mov32 cb, $00000000
2601   13EE 00 00 
2602   13F0 E7            pop d
2603   13F1 FD 3E         mov [d], bl
2604   13F3             ; prog = code_line; 
2605   13F3 3B 63 4E      mov d, _prog ; $prog
2606   13F6 DA            push d
2607   13F7 FA A1 FF      lea d, [bp + -95] ; $code_line
2608   13FA 2D            mov b, d
2609   13FB 38 00 00      mov c, 0
2610   13FE E7            pop d
2611   13FF FD 43         mov [d], b
2612   1401             ; get(); 
2613   1401             ; --- START FUNCTION CALL
2614   1401 07 92 2B      call get
2615   1404             ; for(;;){ 
2616   1404             _for76_init:
2617   1404             _for76_cond:
2618   1404             _for76_block:
2619   1404             ; get(); 
2620   1404             ; --- START FUNCTION CALL
2621   1404 07 92 2B      call get
2622   1407             ; if(toktype == END) break; 
2623   1407             _if77_cond:
2624   1407 3B 61 4E      mov d, _toktype ; $toktype
2625   140A 2A            mov b, [d]
2626   140B 38 00 00      mov c, 0
2627   140E             ; --- START RELATIONAL
2628   140E D7            push a
2629   140F 11            mov a, b
2630   1410 FD 2E 07 00   mov32 cb, $7 ; enum element: END
2630   1414 00 00 
2631   1416 B0            cmp a, b
2632   1417 FD 71         seq ; ==
2633   1419 E4            pop a
2634   141A             ; --- END RELATIONAL
2635   141A C0 00 00      cmp b, 0
2636   141D C6 26 14      je _if77_exit
2637   1420             _if77_TRUE:
2638   1420             ; break; 
2639   1420 0A 76 14      jmp _for76_exit ; for break
2640   1423 0A 26 14      jmp _if77_exit
2641   1426             _if77_exit:
2642   1426             ; if(toktype == INTEGER_CONST || label_exists(token) != -1){ 
2643   1426             _if78_cond:
2644   1426 3B 61 4E      mov d, _toktype ; $toktype
2645   1429 2A            mov b, [d]
2646   142A 38 00 00      mov c, 0
2647   142D             ; --- START RELATIONAL
2648   142D D7            push a
2649   142E 11            mov a, b
2650   142F FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2650   1433 00 00 
2651   1435 B0            cmp a, b
2652   1436 FD 71         seq ; ==
2653   1438 E4            pop a
2654   1439             ; --- END RELATIONAL
2655   1439             ; --- START LOGICAL OR
2656   1439 D7            push a
2657   143A 11            mov a, b
2658   143B             ; --- START FUNCTION CALL
2659   143B 3B 65 4E      mov d, _token_data ; $token
2660   143E 2D            mov b, d
2661   143F 38 00 00      mov c, 0
2662   1442 FD AB         swp b
2663   1444 D8            push b
2664   1445 07 8F 23      call label_exists
2665   1448 51 02 00      add sp, 2
2666   144B             ; --- END FUNCTION CALL
2667   144B             ; --- START RELATIONAL
2668   144B D7            push a
2669   144C 11            mov a, b
2670   144D FD 2E FF FF   mov32 cb, $ffffffff
2670   1451 FF FF 
2671   1453 B0            cmp a, b
2672   1454 FD 72         sneq ; !=
2673   1456 E4            pop a
2674   1457             ; --- END RELATIONAL
2675   1457 FD A8         sor a, b ; ||
2676   1459 E4            pop a
2677   145A             ; --- END LOGICAL OR
2678   145A C0 00 00      cmp b, 0
2679   145D C6 73 14      je _if78_exit
2680   1460             _if78_TRUE:
2681   1460             ; has_operands = 1; 
2682   1460 FA 77 FF      lea d, [bp + -137] ; $has_operands
2683   1463 DA            push d
2684   1464 FD 2E 01 00   mov32 cb, $00000001
2684   1468 00 00 
2685   146A E7            pop d
2686   146B FD 3E         mov [d], bl
2687   146D             ; break; 
2688   146D 0A 76 14      jmp _for76_exit ; for break
2689   1470 0A 73 14      jmp _if78_exit
2690   1473             _if78_exit:
2691   1473             _for76_update:
2692   1473 0A 04 14      jmp _for76_cond
2693   1476             _for76_exit:
2694   1476             ; opcode[0] = '\0'; 
2695   1476 FA E1 FF      lea d, [bp + -31] ; $opcode
2696   1479 D7            push a
2697   147A DA            push d
2698   147B FD 2E 00 00   mov32 cb, $00000000
2698   147F 00 00 
2699   1481 E7            pop d
2700   1482 5A            add d, b
2701   1483 E4            pop a
2702   1484 DA            push d
2703   1485 FD 2E 00 00   mov32 cb, $00000000
2703   1489 00 00 
2704   148B E7            pop d
2705   148C FD 3E         mov [d], bl
2706   148E             ; prog = code_line; 
2707   148E 3B 63 4E      mov d, _prog ; $prog
2708   1491 DA            push d
2709   1492 FA A1 FF      lea d, [bp + -95] ; $code_line
2710   1495 2D            mov b, d
2711   1496 38 00 00      mov c, 0
2712   1499 E7            pop d
2713   149A FD 43         mov [d], b
2714   149C             ; if(!has_operands){ 
2715   149C             _if79_cond:
2716   149C FA 77 FF      lea d, [bp + -137] ; $has_operands
2717   149F 32            mov bl, [d]
2718   14A0 A7 00         mov bh, 0
2719   14A2 38 00 00      mov c, 0
2720   14A5 C0 00 00      cmp b, 0
2721   14A8 C6 2F 16      je _if79_else
2722   14AB             _if79_TRUE:
2723   14AB             ; get(); 
2724   14AB             ; --- START FUNCTION CALL
2725   14AB 07 92 2B      call get
2726   14AE             ; strcpy(opcode, token); 
2727   14AE             ; --- START FUNCTION CALL
2728   14AE 3B 65 4E      mov d, _token_data ; $token
2729   14B1 2D            mov b, d
2730   14B2 38 00 00      mov c, 0
2731   14B5 FD AB         swp b
2732   14B7 D8            push b
2733   14B8 FA E1 FF      lea d, [bp + -31] ; $opcode
2734   14BB 2D            mov b, d
2735   14BC 38 00 00      mov c, 0
2736   14BF FD AB         swp b
2737   14C1 D8            push b
2738   14C2 07 C5 4B      call strcpy
2739   14C5 51 04 00      add sp, 4
2740   14C8             ; --- END FUNCTION CALL
2741   14C8             ; get();  
2742   14C8             ; --- START FUNCTION CALL
2743   14C8 07 92 2B      call get
2744   14CB             ; if(toktype == END){ 
2745   14CB             _if80_cond:
2746   14CB 3B 61 4E      mov d, _toktype ; $toktype
2747   14CE 2A            mov b, [d]
2748   14CF 38 00 00      mov c, 0
2749   14D2             ; --- START RELATIONAL
2750   14D2 D7            push a
2751   14D3 11            mov a, b
2752   14D4 FD 2E 07 00   mov32 cb, $7 ; enum element: END
2752   14D8 00 00 
2753   14DA B0            cmp a, b
2754   14DB FD 71         seq ; ==
2755   14DD E4            pop a
2756   14DE             ; --- END RELATIONAL
2757   14DE C0 00 00      cmp b, 0
2758   14E1 C6 FD 14      je _if80_else
2759   14E4             _if80_TRUE:
2760   14E4             ; strcat(opcode, " ."); 
2761   14E4             ; --- START FUNCTION CALL
2762   14E4 26 D3 50      mov b, _s26 ; " ."
2763   14E7 FD AB         swp b
2764   14E9 D8            push b
2765   14EA FA E1 FF      lea d, [bp + -31] ; $opcode
2766   14ED 2D            mov b, d
2767   14EE 38 00 00      mov c, 0
2768   14F1 FD AB         swp b
2769   14F3 D8            push b
2770   14F4 07 3F 4C      call strcat
2771   14F7 51 04 00      add sp, 4
2772   14FA             ; --- END FUNCTION CALL
2773   14FA 0A 6C 15      jmp _if80_exit
2774   14FD             _if80_else:
2775   14FD             ; strcat(opcode, " "); 
2776   14FD             ; --- START FUNCTION CALL
2777   14FD 26 D6 50      mov b, _s27 ; " "
2778   1500 FD AB         swp b
2779   1502 D8            push b
2780   1503 FA E1 FF      lea d, [bp + -31] ; $opcode
2781   1506 2D            mov b, d
2782   1507 38 00 00      mov c, 0
2783   150A FD AB         swp b
2784   150C D8            push b
2785   150D 07 3F 4C      call strcat
2786   1510 51 04 00      add sp, 4
2787   1513             ; --- END FUNCTION CALL
2788   1513             ; strcat(opcode, token); 
2789   1513             ; --- START FUNCTION CALL
2790   1513 3B 65 4E      mov d, _token_data ; $token
2791   1516 2D            mov b, d
2792   1517 38 00 00      mov c, 0
2793   151A FD AB         swp b
2794   151C D8            push b
2795   151D FA E1 FF      lea d, [bp + -31] ; $opcode
2796   1520 2D            mov b, d
2797   1521 38 00 00      mov c, 0
2798   1524 FD AB         swp b
2799   1526 D8            push b
2800   1527 07 3F 4C      call strcat
2801   152A 51 04 00      add sp, 4
2802   152D             ; --- END FUNCTION CALL
2803   152D             ; for(;;){ 
2804   152D             _for81_init:
2805   152D             _for81_cond:
2806   152D             _for81_block:
2807   152D             ; get(); 
2808   152D             ; --- START FUNCTION CALL
2809   152D 07 92 2B      call get
2810   1530             ; if(toktype == END) break; 
2811   1530             _if82_cond:
2812   1530 3B 61 4E      mov d, _toktype ; $toktype
2813   1533 2A            mov b, [d]
2814   1534 38 00 00      mov c, 0
2815   1537             ; --- START RELATIONAL
2816   1537 D7            push a
2817   1538 11            mov a, b
2818   1539 FD 2E 07 00   mov32 cb, $7 ; enum element: END
2818   153D 00 00 
2819   153F B0            cmp a, b
2820   1540 FD 71         seq ; ==
2821   1542 E4            pop a
2822   1543             ; --- END RELATIONAL
2823   1543 C0 00 00      cmp b, 0
2824   1546 C6 4F 15      je _if82_exit
2825   1549             _if82_TRUE:
2826   1549             ; break; 
2827   1549 0A 6C 15      jmp _for81_exit ; for break
2828   154C 0A 4F 15      jmp _if82_exit
2829   154F             _if82_exit:
2830   154F             ; strcat(opcode, token); 
2831   154F             ; --- START FUNCTION CALL
2832   154F 3B 65 4E      mov d, _token_data ; $token
2833   1552 2D            mov b, d
2834   1553 38 00 00      mov c, 0
2835   1556 FD AB         swp b
2836   1558 D8            push b
2837   1559 FA E1 FF      lea d, [bp + -31] ; $opcode
2838   155C 2D            mov b, d
2839   155D 38 00 00      mov c, 0
2840   1560 FD AB         swp b
2841   1562 D8            push b
2842   1563 07 3F 4C      call strcat
2843   1566 51 04 00      add sp, 4
2844   1569             ; --- END FUNCTION CALL
2845   1569             _for81_update:
2846   1569 0A 2D 15      jmp _for81_cond
2847   156C             _for81_exit:
2848   156C             _if80_exit:
2849   156C             ; op = search_opcode(opcode); 
2850   156C FA 87 FF      lea d, [bp + -121] ; $op
2851   156F DA            push d
2852   1570             ; --- START FUNCTION CALL
2853   1570 FA E1 FF      lea d, [bp + -31] ; $opcode
2854   1573 2D            mov b, d
2855   1574 38 00 00      mov c, 0
2856   1577 FD AB         swp b
2857   1579 D8            push b
2858   157A 07 14 24      call search_opcode
2859   157D 51 02 00      add sp, 2
2860   1580             ; --- END FUNCTION CALL
2861   1580 E7            pop d
2862   1581 FD 28         mov si, b
2863   1583 FD 50         mov di, d
2864   1585 38 1A 00      mov c, 26
2865   1588 FD F5         rep movsb
2866   158A             ; instr_len = 1; 
2867   158A FA 85 FF      lea d, [bp + -123] ; $instr_len
2868   158D DA            push d
2869   158E FD 2E 01 00   mov32 cb, $00000001
2869   1592 00 00 
2870   1594 E7            pop d
2871   1595 FD 43         mov [d], b
2872   1597             ; if(op.opcode_type){ 
2873   1597             _if83_cond:
2874   1597 FA 87 FF      lea d, [bp + -121] ; $op
2875   159A 58 19 00      add d, 25
2876   159D 32            mov bl, [d]
2877   159E A7 00         mov bh, 0
2878   15A0 38 00 00      mov c, 0
2879   15A3 C0 00 00      cmp b, 0
2880   15A6 C6 D3 15      je _if83_exit
2881   15A9             _if83_TRUE:
2882   15A9             ; instr_len++; 
2883   15A9 FA 85 FF      lea d, [bp + -123] ; $instr_len
2884   15AC 2A            mov b, [d]
2885   15AD 38 00 00      mov c, 0
2886   15B0 11            mov a, b
2887   15B1 FD 77         inc b
2888   15B3 FA 85 FF      lea d, [bp + -123] ; $instr_len
2889   15B6 FD 43         mov [d], b
2890   15B8 27            mov b, a
2891   15B9             ; emit_byte(0xFD, emit_override); 
2892   15B9             ; --- START FUNCTION CALL
2893   15B9 FA 05 00      lea d, [bp + 5] ; $emit_override
2894   15BC 32            mov bl, [d]
2895   15BD A7 00         mov bh, 0
2896   15BF 38 00 00      mov c, 0
2897   15C2 DD            push bl
2898   15C3 FD 2E FD 00   mov32 cb, $000000fd
2898   15C7 00 00 
2899   15C9 DD            push bl
2900   15CA 07 97 27      call emit_byte
2901   15CD 51 02 00      add sp, 2
2902   15D0             ; --- END FUNCTION CALL
2903   15D0 0A D3 15      jmp _if83_exit
2904   15D3             _if83_exit:
2905   15D3             ; emit_byte(op.opcode, emit_override); 
2906   15D3             ; --- START FUNCTION CALL
2907   15D3 FA 05 00      lea d, [bp + 5] ; $emit_override
2908   15D6 32            mov bl, [d]
2909   15D7 A7 00         mov bh, 0
2910   15D9 38 00 00      mov c, 0
2911   15DC DD            push bl
2912   15DD FA 87 FF      lea d, [bp + -121] ; $op
2913   15E0 58 18 00      add d, 24
2914   15E3 32            mov bl, [d]
2915   15E4 A7 00         mov bh, 0
2916   15E6 38 00 00      mov c, 0
2917   15E9 DD            push bl
2918   15EA 07 97 27      call emit_byte
2919   15ED 51 02 00      add sp, 2
2920   15F0             ; --- END FUNCTION CALL
2921   15F0             ; if(!emit_override){ 
2922   15F0             _if84_cond:
2923   15F0 FA 05 00      lea d, [bp + 5] ; $emit_override
2924   15F3 32            mov bl, [d]
2925   15F4 A7 00         mov bh, 0
2926   15F6 38 00 00      mov c, 0
2927   15F9 C0 00 00      cmp b, 0
2928   15FC C6 2C 16      je _if84_exit
2929   15FF             _if84_TRUE:
2930   15FF             ; printf("%x(%d): %s\n", old_pc, instr_len, code_line); 
2931   15FF             ; --- START FUNCTION CALL
2932   15FF FA A1 FF      lea d, [bp + -95] ; $code_line
2933   1602 2D            mov b, d
2934   1603 38 00 00      mov c, 0
2935   1606 FD AB         swp b
2936   1608 D8            push b
2937   1609 FA 85 FF      lea d, [bp + -123] ; $instr_len
2938   160C 2A            mov b, [d]
2939   160D 38 00 00      mov c, 0
2940   1610 FD AB         swp b
2941   1612 D8            push b
2942   1613 FA 78 FF      lea d, [bp + -136] ; $old_pc
2943   1616 2A            mov b, [d]
2944   1617 38 00 00      mov c, 0
2945   161A FD AB         swp b
2946   161C D8            push b
2947   161D 26 37 51      mov b, _s30 ; "%x(%d): %s\n"
2948   1620 FD AB         swp b
2949   1622 D8            push b
2950   1623 07 8F 3E      call printf
2951   1626 51 08 00      add sp, 8
2952   1629             ; --- END FUNCTION CALL
2953   1629 0A 2C 16      jmp _if84_exit
2954   162C             _if84_exit:
2955   162C 0A 41 1C      jmp _if79_exit
2956   162F             _if79_else:
2957   162F             ; num_operands = 0; 
2958   162F FA 83 FF      lea d, [bp + -125] ; $num_operands
2959   1632 DA            push d
2960   1633 FD 2E 00 00   mov32 cb, $00000000
2960   1637 00 00 
2961   1639 E7            pop d
2962   163A FD 43         mov [d], b
2963   163C             ; for(;;){ 
2964   163C             _for85_init:
2965   163C             _for85_cond:
2966   163C             _for85_block:
2967   163C             ; get(); 
2968   163C             ; --- START FUNCTION CALL
2969   163C 07 92 2B      call get
2970   163F             ; if(toktype == END) break; 
2971   163F             _if86_cond:
2972   163F 3B 61 4E      mov d, _toktype ; $toktype
2973   1642 2A            mov b, [d]
2974   1643 38 00 00      mov c, 0
2975   1646             ; --- START RELATIONAL
2976   1646 D7            push a
2977   1647 11            mov a, b
2978   1648 FD 2E 07 00   mov32 cb, $7 ; enum element: END
2978   164C 00 00 
2979   164E B0            cmp a, b
2980   164F FD 71         seq ; ==
2981   1651 E4            pop a
2982   1652             ; --- END RELATIONAL
2983   1652 C0 00 00      cmp b, 0
2984   1655 C6 5E 16      je _if86_exit
2985   1658             _if86_TRUE:
2986   1658             ; break; 
2987   1658 0A AE 16      jmp _for85_exit ; for break
2988   165B 0A 5E 16      jmp _if86_exit
2989   165E             _if86_exit:
2990   165E             ; if(toktype == INTEGER_CONST || label_exists(token) != -1) num_operands++; 
2991   165E             _if87_cond:
2992   165E 3B 61 4E      mov d, _toktype ; $toktype
2993   1661 2A            mov b, [d]
2994   1662 38 00 00      mov c, 0
2995   1665             ; --- START RELATIONAL
2996   1665 D7            push a
2997   1666 11            mov a, b
2998   1667 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2998   166B 00 00 
2999   166D B0            cmp a, b
3000   166E FD 71         seq ; ==
3001   1670 E4            pop a
3002   1671             ; --- END RELATIONAL
3003   1671             ; --- START LOGICAL OR
3004   1671 D7            push a
3005   1672 11            mov a, b
3006   1673             ; --- START FUNCTION CALL
3007   1673 3B 65 4E      mov d, _token_data ; $token
3008   1676 2D            mov b, d
3009   1677 38 00 00      mov c, 0
3010   167A FD AB         swp b
3011   167C D8            push b
3012   167D 07 8F 23      call label_exists
3013   1680 51 02 00      add sp, 2
3014   1683             ; --- END FUNCTION CALL
3015   1683             ; --- START RELATIONAL
3016   1683 D7            push a
3017   1684 11            mov a, b
3018   1685 FD 2E FF FF   mov32 cb, $ffffffff
3018   1689 FF FF 
3019   168B B0            cmp a, b
3020   168C FD 72         sneq ; !=
3021   168E E4            pop a
3022   168F             ; --- END RELATIONAL
3023   168F FD A8         sor a, b ; ||
3024   1691 E4            pop a
3025   1692             ; --- END LOGICAL OR
3026   1692 C0 00 00      cmp b, 0
3027   1695 C6 AB 16      je _if87_exit
3028   1698             _if87_TRUE:
3029   1698             ; num_operands++; 
3030   1698 FA 83 FF      lea d, [bp + -125] ; $num_operands
3031   169B 2A            mov b, [d]
3032   169C 38 00 00      mov c, 0
3033   169F 11            mov a, b
3034   16A0 FD 77         inc b
3035   16A2 FA 83 FF      lea d, [bp + -125] ; $num_operands
3036   16A5 FD 43         mov [d], b
3037   16A7 27            mov b, a
3038   16A8 0A AB 16      jmp _if87_exit
3039   16AB             _if87_exit:
3040   16AB             _for85_update:
3041   16AB 0A 3C 16      jmp _for85_cond
3042   16AE             _for85_exit:
3043   16AE             ; if(num_operands > 2) error("Maximum number of operands per instruction is 2."); 
3044   16AE             _if88_cond:
3045   16AE FA 83 FF      lea d, [bp + -125] ; $num_operands
3046   16B1 2A            mov b, [d]
3047   16B2 38 00 00      mov c, 0
3048   16B5             ; --- START RELATIONAL
3049   16B5 D7            push a
3050   16B6 11            mov a, b
3051   16B7 FD 2E 02 00   mov32 cb, $00000002
3051   16BB 00 00 
3052   16BD B0            cmp a, b
3053   16BE FD 7F         sgt ; >
3054   16C0 E4            pop a
3055   16C1             ; --- END RELATIONAL
3056   16C1 C0 00 00      cmp b, 0
3057   16C4 C6 D6 16      je _if88_exit
3058   16C7             _if88_TRUE:
3059   16C7             ; error("Maximum number of operands per instruction is 2."); 
3060   16C7             ; --- START FUNCTION CALL
3061   16C7 26 D8 50      mov b, _s28 ; "Maximum number of operands per instruction is 2."
3062   16CA FD AB         swp b
3063   16CC D8            push b
3064   16CD 07 98 39      call error
3065   16D0 51 02 00      add sp, 2
3066   16D3             ; --- END FUNCTION CALL
3067   16D3 0A D6 16      jmp _if88_exit
3068   16D6             _if88_exit:
3069   16D6             ; num_operands_exp = _exp(2, num_operands); 
3070   16D6 FA 81 FF      lea d, [bp + -127] ; $num_operands_exp
3071   16D9 DA            push d
3072   16DA             ; --- START FUNCTION CALL
3073   16DA FA 83 FF      lea d, [bp + -125] ; $num_operands
3074   16DD 2A            mov b, [d]
3075   16DE 38 00 00      mov c, 0
3076   16E1 FD AB         swp b
3077   16E3 D8            push b
3078   16E4 FD 2E 02 00   mov32 cb, $00000002
3078   16E8 00 00 
3079   16EA FD AB         swp b
3080   16EC D8            push b
3081   16ED 07 E2 3D      call _exp
3082   16F0 51 04 00      add sp, 4
3083   16F3             ; --- END FUNCTION CALL
3084   16F3 E7            pop d
3085   16F4 FD 43         mov [d], b
3086   16F6             ; for(i = 0; i < num_operands_exp; i++){ 
3087   16F6             _for89_init:
3088   16F6 FA 7F FF      lea d, [bp + -129] ; $i
3089   16F9 DA            push d
3090   16FA FD 2E 00 00   mov32 cb, $00000000
3090   16FE 00 00 
3091   1700 E7            pop d
3092   1701 FD 43         mov [d], b
3093   1703             _for89_cond:
3094   1703 FA 7F FF      lea d, [bp + -129] ; $i
3095   1706 2A            mov b, [d]
3096   1707 38 00 00      mov c, 0
3097   170A             ; --- START RELATIONAL
3098   170A D7            push a
3099   170B 11            mov a, b
3100   170C FA 81 FF      lea d, [bp + -127] ; $num_operands_exp
3101   170F 2A            mov b, [d]
3102   1710 38 00 00      mov c, 0
3103   1713 B0            cmp a, b
3104   1714 FD 73         slt ; < (signed)
3105   1716 E4            pop a
3106   1717             ; --- END RELATIONAL
3107   1717 C0 00 00      cmp b, 0
3108   171A C6 41 1C      je _for89_exit
3109   171D             _for89_block:
3110   171D             ; prog = code_line; 
3111   171D 3B 63 4E      mov d, _prog ; $prog
3112   1720 DA            push d
3113   1721 FA A1 FF      lea d, [bp + -95] ; $code_line
3114   1724 2D            mov b, d
3115   1725 38 00 00      mov c, 0
3116   1728 E7            pop d
3117   1729 FD 43         mov [d], b
3118   172B             ; get(); 
3119   172B             ; --- START FUNCTION CALL
3120   172B 07 92 2B      call get
3121   172E             ; strcpy(opcode, token); 
3122   172E             ; --- START FUNCTION CALL
3123   172E 3B 65 4E      mov d, _token_data ; $token
3124   1731 2D            mov b, d
3125   1732 38 00 00      mov c, 0
3126   1735 FD AB         swp b
3127   1737 D8            push b
3128   1738 FA E1 FF      lea d, [bp + -31] ; $opcode
3129   173B 2D            mov b, d
3130   173C 38 00 00      mov c, 0
3131   173F FD AB         swp b
3132   1741 D8            push b
3133   1742 07 C5 4B      call strcpy
3134   1745 51 04 00      add sp, 4
3135   1748             ; --- END FUNCTION CALL
3136   1748             ; strcat(opcode, " "); 
3137   1748             ; --- START FUNCTION CALL
3138   1748 26 D6 50      mov b, _s27 ; " "
3139   174B FD AB         swp b
3140   174D D8            push b
3141   174E FA E1 FF      lea d, [bp + -31] ; $opcode
3142   1751 2D            mov b, d
3143   1752 38 00 00      mov c, 0
3144   1755 FD AB         swp b
3145   1757 D8            push b
3146   1758 07 3F 4C      call strcat
3147   175B 51 04 00      add sp, 4
3148   175E             ; --- END FUNCTION CALL
3149   175E             ; j = 0; 
3150   175E FA 7D FF      lea d, [bp + -131] ; $j
3151   1761 DA            push d
3152   1762 FD 2E 00 00   mov32 cb, $00000000
3152   1766 00 00 
3153   1768 E7            pop d
3154   1769 FD 43         mov [d], b
3155   176B             ; for(;;){ 
3156   176B             _for90_init:
3157   176B             _for90_cond:
3158   176B             _for90_block:
3159   176B             ; get(); 
3160   176B             ; --- START FUNCTION CALL
3161   176B 07 92 2B      call get
3162   176E             ; if(toktype == END) break; 
3163   176E             _if91_cond:
3164   176E 3B 61 4E      mov d, _toktype ; $toktype
3165   1771 2A            mov b, [d]
3166   1772 38 00 00      mov c, 0
3167   1775             ; --- START RELATIONAL
3168   1775 D7            push a
3169   1776 11            mov a, b
3170   1777 FD 2E 07 00   mov32 cb, $7 ; enum element: END
3170   177B 00 00 
3171   177D B0            cmp a, b
3172   177E FD 71         seq ; ==
3173   1780 E4            pop a
3174   1781             ; --- END RELATIONAL
3175   1781 C0 00 00      cmp b, 0
3176   1784 C6 8D 17      je _if91_exit
3177   1787             _if91_TRUE:
3178   1787             ; break; 
3179   1787 0A 04 19      jmp _for90_exit ; for break
3180   178A 0A 8D 17      jmp _if91_exit
3181   178D             _if91_exit:
3182   178D             ; if(toktype == INTEGER_CONST || label_exists(token) != -1){ 
3183   178D             _if92_cond:
3184   178D 3B 61 4E      mov d, _toktype ; $toktype
3185   1790 2A            mov b, [d]
3186   1791 38 00 00      mov c, 0
3187   1794             ; --- START RELATIONAL
3188   1794 D7            push a
3189   1795 11            mov a, b
3190   1796 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
3190   179A 00 00 
3191   179C B0            cmp a, b
3192   179D FD 71         seq ; ==
3193   179F E4            pop a
3194   17A0             ; --- END RELATIONAL
3195   17A0             ; --- START LOGICAL OR
3196   17A0 D7            push a
3197   17A1 11            mov a, b
3198   17A2             ; --- START FUNCTION CALL
3199   17A2 3B 65 4E      mov d, _token_data ; $token
3200   17A5 2D            mov b, d
3201   17A6 38 00 00      mov c, 0
3202   17A9 FD AB         swp b
3203   17AB D8            push b
3204   17AC 07 8F 23      call label_exists
3205   17AF 51 02 00      add sp, 2
3206   17B2             ; --- END FUNCTION CALL
3207   17B2             ; --- START RELATIONAL
3208   17B2 D7            push a
3209   17B3 11            mov a, b
3210   17B4 FD 2E FF FF   mov32 cb, $ffffffff
3210   17B8 FF FF 
3211   17BA B0            cmp a, b
3212   17BB FD 72         sneq ; !=
3213   17BD E4            pop a
3214   17BE             ; --- END RELATIONAL
3215   17BE FD A8         sor a, b ; ||
3216   17C0 E4            pop a
3217   17C1             ; --- END LOGICAL OR
3218   17C1 C0 00 00      cmp b, 0
3219   17C4 C6 E7 18      je _if92_else
3220   17C7             _if92_TRUE:
3221   17C7             ; strcat(opcode, symbols[i*2+j]); 
3222   17C7             ; --- START FUNCTION CALL
3223   17C7 3B C7 4F      mov d, _symbols_data ; $symbols
3224   17CA D7            push a
3225   17CB DA            push d
3226   17CC FA 7F FF      lea d, [bp + -129] ; $i
3227   17CF 2A            mov b, [d]
3228   17D0 38 00 00      mov c, 0
3229   17D3             ; --- START FACTORS
3230   17D3 D7            push a
3231   17D4 FD D8         push g
3232   17D6 11            mov a, b
3233   17D7 FD 7A         mov g, c
3234   17D9 FD 2E 02 00   mov32 cb, $00000002
3234   17DD 00 00 
3235   17DF D7            push a     ; save left operand
3236   17E0 8E            xor a, b   ; xor sign bits
3237   17E1 FD AA         swp a      ; swap bytes
3238   17E3 83            mov cl, al ; save result of xor into 'dl'
3239   17E4 E4            pop a      ; restore left side operator
3240   17E5 DF            push cl    ; save result of xor above
3241   17E6 FD AA         swp a  
3242   17E8 93 80         test al, $80  
3243   17EA FD AA         swp a  
3244   17EC C6 F1 17      jz skip_invert_a_100  
3245   17EF FD 95         neg a 
3246   17F1             skip_invert_a_100:   
3247   17F1 FD AB         swp b
3248   17F3 FD 93 80      test bl, $80  
3249   17F6 FD AB         swp b
3250   17F8 C6 FD 17      jz skip_invert_b_100  
3251   17FB FD 97         neg b 
3252   17FD             skip_invert_b_100:   
3253   17FD AC            mul a, b ; *
3254   17FE FD 78         mov g, a
3255   1800 11            mov a, b
3256   1801 EA            pop bl
3257   1802 FD 93 80      test bl, $80
3258   1805 C6 12 18      jz _same_signs_100
3259   1808 2F            mov bl, al
3260   1809 95            not a
3261   180A FD 97         neg b
3262   180C 5B 00 00      adc a, 0
3263   180F FD 78         mov g, a
3264   1811 11            mov a, b
3265   1812             _same_signs_100:
3266   1812 FD 38         mov c, g
3267   1814 27            mov b, a
3268   1815 FD F1         pop g
3269   1817 E4            pop a
3270   1818             ; --- END FACTORS
3271   1818             ; --- START TERMS
3272   1818 D7            push a
3273   1819 FD D8         push g
3274   181B 11            mov a, b
3275   181C FD 7A         mov g, c
3276   181E FA 7D FF      lea d, [bp + -131] ; $j
3277   1821 2A            mov b, [d]
3278   1822 38 00 00      mov c, 0
3279   1825 38 00 00      mov c, 0
3280   1828 FD 15         add32 cb, ga
3281   182A FD F1         pop g
3282   182C E4            pop a
3283   182D             ; --- END TERMS
3284   182D E7            pop d
3285   182E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3286   1832 E4            pop a
3287   1833 2A            mov b, [d]
3288   1834 38 00 00      mov c, 0
3289   1837 FD AB         swp b
3290   1839 D8            push b
3291   183A FA E1 FF      lea d, [bp + -31] ; $opcode
3292   183D 2D            mov b, d
3293   183E 38 00 00      mov c, 0
3294   1841 FD AB         swp b
3295   1843 D8            push b
3296   1844 07 3F 4C      call strcat
3297   1847 51 04 00      add sp, 4
3298   184A             ; --- END FUNCTION CALL
3299   184A             ; operand_types[j] = *symbols[i*2+j]; 
3300   184A FA 7A FF      lea d, [bp + -134] ; $operand_types
3301   184D D7            push a
3302   184E DA            push d
3303   184F FA 7D FF      lea d, [bp + -131] ; $j
3304   1852 2A            mov b, [d]
3305   1853 38 00 00      mov c, 0
3306   1856 E7            pop d
3307   1857 5A            add d, b
3308   1858 E4            pop a
3309   1859 DA            push d
3310   185A 3B C7 4F      mov d, _symbols_data ; $symbols
3311   185D D7            push a
3312   185E DA            push d
3313   185F FA 7F FF      lea d, [bp + -129] ; $i
3314   1862 2A            mov b, [d]
3315   1863 38 00 00      mov c, 0
3316   1866             ; --- START FACTORS
3317   1866 D7            push a
3318   1867 FD D8         push g
3319   1869 11            mov a, b
3320   186A FD 7A         mov g, c
3321   186C FD 2E 02 00   mov32 cb, $00000002
3321   1870 00 00 
3322   1872 D7            push a     ; save left operand
3323   1873 8E            xor a, b   ; xor sign bits
3324   1874 FD AA         swp a      ; swap bytes
3325   1876 83            mov cl, al ; save result of xor into 'dl'
3326   1877 E4            pop a      ; restore left side operator
3327   1878 DF            push cl    ; save result of xor above
3328   1879 FD AA         swp a  
3329   187B 93 80         test al, $80  
3330   187D FD AA         swp a  
3331   187F C6 84 18      jz skip_invert_a_104  
3332   1882 FD 95         neg a 
3333   1884             skip_invert_a_104:   
3334   1884 FD AB         swp b
3335   1886 FD 93 80      test bl, $80  
3336   1889 FD AB         swp b
3337   188B C6 90 18      jz skip_invert_b_104  
3338   188E FD 97         neg b 
3339   1890             skip_invert_b_104:   
3340   1890 AC            mul a, b ; *
3341   1891 FD 78         mov g, a
3342   1893 11            mov a, b
3343   1894 EA            pop bl
3344   1895 FD 93 80      test bl, $80
3345   1898 C6 A5 18      jz _same_signs_104
3346   189B 2F            mov bl, al
3347   189C 95            not a
3348   189D FD 97         neg b
3349   189F 5B 00 00      adc a, 0
3350   18A2 FD 78         mov g, a
3351   18A4 11            mov a, b
3352   18A5             _same_signs_104:
3353   18A5 FD 38         mov c, g
3354   18A7 27            mov b, a
3355   18A8 FD F1         pop g
3356   18AA E4            pop a
3357   18AB             ; --- END FACTORS
3358   18AB             ; --- START TERMS
3359   18AB D7            push a
3360   18AC FD D8         push g
3361   18AE 11            mov a, b
3362   18AF FD 7A         mov g, c
3363   18B1 FA 7D FF      lea d, [bp + -131] ; $j
3364   18B4 2A            mov b, [d]
3365   18B5 38 00 00      mov c, 0
3366   18B8 38 00 00      mov c, 0
3367   18BB FD 15         add32 cb, ga
3368   18BD FD F1         pop g
3369   18BF E4            pop a
3370   18C0             ; --- END TERMS
3371   18C0 E7            pop d
3372   18C1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3373   18C5 E4            pop a
3374   18C6 2A            mov b, [d]
3375   18C7 38 00 00      mov c, 0
3376   18CA 74            mov d, b
3377   18CB 32            mov bl, [d]
3378   18CC A7 00         mov bh, 0
3379   18CE 38 00 00      mov c, 0
3380   18D1 E7            pop d
3381   18D2 FD 3E         mov [d], bl
3382   18D4             ; j++; 
3383   18D4 FA 7D FF      lea d, [bp + -131] ; $j
3384   18D7 2A            mov b, [d]
3385   18D8 38 00 00      mov c, 0
3386   18DB 11            mov a, b
3387   18DC FD 77         inc b
3388   18DE FA 7D FF      lea d, [bp + -131] ; $j
3389   18E1 FD 43         mov [d], b
3390   18E3 27            mov b, a
3391   18E4 0A 01 19      jmp _if92_exit
3392   18E7             _if92_else:
3393   18E7             ; strcat(opcode, token); 
3394   18E7             ; --- START FUNCTION CALL
3395   18E7 3B 65 4E      mov d, _token_data ; $token
3396   18EA 2D            mov b, d
3397   18EB 38 00 00      mov c, 0
3398   18EE FD AB         swp b
3399   18F0 D8            push b
3400   18F1 FA E1 FF      lea d, [bp + -31] ; $opcode
3401   18F4 2D            mov b, d
3402   18F5 38 00 00      mov c, 0
3403   18F8 FD AB         swp b
3404   18FA D8            push b
3405   18FB 07 3F 4C      call strcat
3406   18FE 51 04 00      add sp, 4
3407   1901             ; --- END FUNCTION CALL
3408   1901             _if92_exit:
3409   1901             _for90_update:
3410   1901 0A 6B 17      jmp _for90_cond
3411   1904             _for90_exit:
3412   1904             ; op = search_opcode(opcode); 
3413   1904 FA 87 FF      lea d, [bp + -121] ; $op
3414   1907 DA            push d
3415   1908             ; --- START FUNCTION CALL
3416   1908 FA E1 FF      lea d, [bp + -31] ; $opcode
3417   190B 2D            mov b, d
3418   190C 38 00 00      mov c, 0
3419   190F FD AB         swp b
3420   1911 D8            push b
3421   1912 07 14 24      call search_opcode
3422   1915 51 02 00      add sp, 2
3423   1918             ; --- END FUNCTION CALL
3424   1918 E7            pop d
3425   1919 FD 28         mov si, b
3426   191B FD 50         mov di, d
3427   191D 38 1A 00      mov c, 26
3428   1920 FD F5         rep movsb
3429   1922             ; if(op.name[0] == '\0') continue; 
3430   1922             _if105_cond:
3431   1922 FA 87 FF      lea d, [bp + -121] ; $op
3432   1925 58 00 00      add d, 0
3433   1928 D7            push a
3434   1929 DA            push d
3435   192A FD 2E 00 00   mov32 cb, $00000000
3435   192E 00 00 
3436   1930 E7            pop d
3437   1931 5A            add d, b
3438   1932 E4            pop a
3439   1933 32            mov bl, [d]
3440   1934 A7 00         mov bh, 0
3441   1936 38 00 00      mov c, 0
3442   1939             ; --- START RELATIONAL
3443   1939 D7            push a
3444   193A 11            mov a, b
3445   193B FD 2E 00 00   mov32 cb, $00000000
3445   193F 00 00 
3446   1941 B0            cmp a, b
3447   1942 FD 71         seq ; ==
3448   1944 E4            pop a
3449   1945             ; --- END RELATIONAL
3450   1945 C0 00 00      cmp b, 0
3451   1948 C6 51 19      je _if105_exit
3452   194B             _if105_TRUE:
3453   194B             ; continue; 
3454   194B 0A 2E 1C      jmp _for89_update ; for continue
3455   194E 0A 51 19      jmp _if105_exit
3456   1951             _if105_exit:
3457   1951             ; instr_len = 1; 
3458   1951 FA 85 FF      lea d, [bp + -123] ; $instr_len
3459   1954 DA            push d
3460   1955 FD 2E 01 00   mov32 cb, $00000001
3460   1959 00 00 
3461   195B E7            pop d
3462   195C FD 43         mov [d], b
3463   195E             ; if(op.opcode_type){ 
3464   195E             _if106_cond:
3465   195E FA 87 FF      lea d, [bp + -121] ; $op
3466   1961 58 19 00      add d, 25
3467   1964 32            mov bl, [d]
3468   1965 A7 00         mov bh, 0
3469   1967 38 00 00      mov c, 0
3470   196A C0 00 00      cmp b, 0
3471   196D C6 9A 19      je _if106_exit
3472   1970             _if106_TRUE:
3473   1970             ; emit_byte(0xFD, emit_override); 
3474   1970             ; --- START FUNCTION CALL
3475   1970 FA 05 00      lea d, [bp + 5] ; $emit_override
3476   1973 32            mov bl, [d]
3477   1974 A7 00         mov bh, 0
3478   1976 38 00 00      mov c, 0
3479   1979 DD            push bl
3480   197A FD 2E FD 00   mov32 cb, $000000fd
3480   197E 00 00 
3481   1980 DD            push bl
3482   1981 07 97 27      call emit_byte
3483   1984 51 02 00      add sp, 2
3484   1987             ; --- END FUNCTION CALL
3485   1987             ; instr_len++; 
3486   1987 FA 85 FF      lea d, [bp + -123] ; $instr_len
3487   198A 2A            mov b, [d]
3488   198B 38 00 00      mov c, 0
3489   198E 11            mov a, b
3490   198F FD 77         inc b
3491   1991 FA 85 FF      lea d, [bp + -123] ; $instr_len
3492   1994 FD 43         mov [d], b
3493   1996 27            mov b, a
3494   1997 0A 9A 19      jmp _if106_exit
3495   199A             _if106_exit:
3496   199A             ; emit_byte(op.opcode, emit_override); 
3497   199A             ; --- START FUNCTION CALL
3498   199A FA 05 00      lea d, [bp + 5] ; $emit_override
3499   199D 32            mov bl, [d]
3500   199E A7 00         mov bh, 0
3501   19A0 38 00 00      mov c, 0
3502   19A3 DD            push bl
3503   19A4 FA 87 FF      lea d, [bp + -121] ; $op
3504   19A7 58 18 00      add d, 24
3505   19AA 32            mov bl, [d]
3506   19AB A7 00         mov bh, 0
3507   19AD 38 00 00      mov c, 0
3508   19B0 DD            push bl
3509   19B1 07 97 27      call emit_byte
3510   19B4 51 02 00      add sp, 2
3511   19B7             ; --- END FUNCTION CALL
3512   19B7             ; prog = code_line; 
3513   19B7 3B 63 4E      mov d, _prog ; $prog
3514   19BA DA            push d
3515   19BB FA A1 FF      lea d, [bp + -95] ; $code_line
3516   19BE 2D            mov b, d
3517   19BF 38 00 00      mov c, 0
3518   19C2 E7            pop d
3519   19C3 FD 43         mov [d], b
3520   19C5             ; j = 0; 
3521   19C5 FA 7D FF      lea d, [bp + -131] ; $j
3522   19C8 DA            push d
3523   19C9 FD 2E 00 00   mov32 cb, $00000000
3523   19CD 00 00 
3524   19CF E7            pop d
3525   19D0 FD 43         mov [d], b
3526   19D2             ; get(); 
3527   19D2             ; --- START FUNCTION CALL
3528   19D2 07 92 2B      call get
3529   19D5             ; for(;;){ 
3530   19D5             _for107_init:
3531   19D5             _for107_cond:
3532   19D5             _for107_block:
3533   19D5             ; get(); 
3534   19D5             ; --- START FUNCTION CALL
3535   19D5 07 92 2B      call get
3536   19D8             ; if(toktype == END) break; 
3537   19D8             _if108_cond:
3538   19D8 3B 61 4E      mov d, _toktype ; $toktype
3539   19DB 2A            mov b, [d]
3540   19DC 38 00 00      mov c, 0
3541   19DF             ; --- START RELATIONAL
3542   19DF D7            push a
3543   19E0 11            mov a, b
3544   19E1 FD 2E 07 00   mov32 cb, $7 ; enum element: END
3544   19E5 00 00 
3545   19E7 B0            cmp a, b
3546   19E8 FD 71         seq ; ==
3547   19EA E4            pop a
3548   19EB             ; --- END RELATIONAL
3549   19EB C0 00 00      cmp b, 0
3550   19EE C6 F7 19      je _if108_exit
3551   19F1             _if108_TRUE:
3552   19F1             ; break; 
3553   19F1 0A EF 1B      jmp _for107_exit ; for break
3554   19F4 0A F7 19      jmp _if108_exit
3555   19F7             _if108_exit:
3556   19F7             ; if(toktype == IDENTIFIER){ 
3557   19F7             _if109_cond:
3558   19F7 3B 61 4E      mov d, _toktype ; $toktype
3559   19FA 2A            mov b, [d]
3560   19FB 38 00 00      mov c, 0
3561   19FE             ; --- START RELATIONAL
3562   19FE D7            push a
3563   19FF 11            mov a, b
3564   1A00 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
3564   1A04 00 00 
3565   1A06 B0            cmp a, b
3566   1A07 FD 71         seq ; ==
3567   1A09 E4            pop a
3568   1A0A             ; --- END RELATIONAL
3569   1A0A C0 00 00      cmp b, 0
3570   1A0D C6 12 1B      je _if109_else
3571   1A10             _if109_TRUE:
3572   1A10             ; if(label_exists(token) != -1){ 
3573   1A10             _if110_cond:
3574   1A10             ; --- START FUNCTION CALL
3575   1A10 3B 65 4E      mov d, _token_data ; $token
3576   1A13 2D            mov b, d
3577   1A14 38 00 00      mov c, 0
3578   1A17 FD AB         swp b
3579   1A19 D8            push b
3580   1A1A 07 8F 23      call label_exists
3581   1A1D 51 02 00      add sp, 2
3582   1A20             ; --- END FUNCTION CALL
3583   1A20             ; --- START RELATIONAL
3584   1A20 D7            push a
3585   1A21 11            mov a, b
3586   1A22 FD 2E FF FF   mov32 cb, $ffffffff
3586   1A26 FF FF 
3587   1A28 B0            cmp a, b
3588   1A29 FD 72         sneq ; !=
3589   1A2B E4            pop a
3590   1A2C             ; --- END RELATIONAL
3591   1A2C C0 00 00      cmp b, 0
3592   1A2F C6 E0 1A      je _if110_else
3593   1A32             _if110_TRUE:
3594   1A32             ; if(operand_types[j] == '#'){ 
3595   1A32             _if111_cond:
3596   1A32 FA 7A FF      lea d, [bp + -134] ; $operand_types
3597   1A35 D7            push a
3598   1A36 DA            push d
3599   1A37 FA 7D FF      lea d, [bp + -131] ; $j
3600   1A3A 2A            mov b, [d]
3601   1A3B 38 00 00      mov c, 0
3602   1A3E E7            pop d
3603   1A3F 5A            add d, b
3604   1A40 E4            pop a
3605   1A41 32            mov bl, [d]
3606   1A42 A7 00         mov bh, 0
3607   1A44 38 00 00      mov c, 0
3608   1A47             ; --- START RELATIONAL
3609   1A47 D7            push a
3610   1A48 11            mov a, b
3611   1A49 FD 2E 23 00   mov32 cb, $00000023
3611   1A4D 00 00 
3612   1A4F B0            cmp a, b
3613   1A50 FD 71         seq ; ==
3614   1A52 E4            pop a
3615   1A53             ; --- END RELATIONAL
3616   1A53 C0 00 00      cmp b, 0
3617   1A56 C6 68 1A      je _if111_else
3618   1A59             _if111_TRUE:
3619   1A59             ; error("8bit operand _expected but 16bit label given."); 
3620   1A59             ; --- START FUNCTION CALL
3621   1A59 26 09 51      mov b, _s29 ; "8bit operand _expected but 16bit label given."
3622   1A5C FD AB         swp b
3623   1A5E D8            push b
3624   1A5F 07 98 39      call error
3625   1A62 51 02 00      add sp, 2
3626   1A65             ; --- END FUNCTION CALL
3627   1A65 0A CD 1A      jmp _if111_exit
3628   1A68             _if111_else:
3629   1A68             ; if(operand_types[j] == '@'){ 
3630   1A68             _if112_cond:
3631   1A68 FA 7A FF      lea d, [bp + -134] ; $operand_types
3632   1A6B D7            push a
3633   1A6C DA            push d
3634   1A6D FA 7D FF      lea d, [bp + -131] ; $j
3635   1A70 2A            mov b, [d]
3636   1A71 38 00 00      mov c, 0
3637   1A74 E7            pop d
3638   1A75 5A            add d, b
3639   1A76 E4            pop a
3640   1A77 32            mov bl, [d]
3641   1A78 A7 00         mov bh, 0
3642   1A7A 38 00 00      mov c, 0
3643   1A7D             ; --- START RELATIONAL
3644   1A7D D7            push a
3645   1A7E 11            mov a, b
3646   1A7F FD 2E 40 00   mov32 cb, $00000040
3646   1A83 00 00 
3647   1A85 B0            cmp a, b
3648   1A86 FD 71         seq ; ==
3649   1A88 E4            pop a
3650   1A89             ; --- END RELATIONAL
3651   1A89 C0 00 00      cmp b, 0
3652   1A8C C6 CD 1A      je _if112_exit
3653   1A8F             _if112_TRUE:
3654   1A8F             ; emit_word(get_label_addr(token), emit_override); 
3655   1A8F             ; --- START FUNCTION CALL
3656   1A8F FA 05 00      lea d, [bp + 5] ; $emit_override
3657   1A92 32            mov bl, [d]
3658   1A93 A7 00         mov bh, 0
3659   1A95 38 00 00      mov c, 0
3660   1A98 DD            push bl
3661   1A99             ; --- START FUNCTION CALL
3662   1A99 3B 65 4E      mov d, _token_data ; $token
3663   1A9C 2D            mov b, d
3664   1A9D 38 00 00      mov c, 0
3665   1AA0 FD AB         swp b
3666   1AA2 D8            push b
3667   1AA3 07 E8 22      call get_label_addr
3668   1AA6 51 02 00      add sp, 2
3669   1AA9             ; --- END FUNCTION CALL
3670   1AA9 FD AB         swp b
3671   1AAB D8            push b
3672   1AAC 07 CF 27      call emit_word
3673   1AAF 51 03 00      add sp, 3
3674   1AB2             ; --- END FUNCTION CALL
3675   1AB2             ; instr_len = instr_len + 2; 
3676   1AB2 FA 85 FF      lea d, [bp + -123] ; $instr_len
3677   1AB5 DA            push d
3678   1AB6 FA 85 FF      lea d, [bp + -123] ; $instr_len
3679   1AB9 2A            mov b, [d]
3680   1ABA 38 00 00      mov c, 0
3681   1ABD             ; --- START TERMS
3682   1ABD D7            push a
3683   1ABE 11            mov a, b
3684   1ABF FD 2E 02 00   mov32 cb, $00000002
3684   1AC3 00 00 
3685   1AC5 56            add b, a
3686   1AC6 E4            pop a
3687   1AC7             ; --- END TERMS
3688   1AC7 E7            pop d
3689   1AC8 FD 43         mov [d], b
3690   1ACA 0A CD 1A      jmp _if112_exit
3691   1ACD             _if112_exit:
3692   1ACD             _if111_exit:
3693   1ACD             ; j++; 
3694   1ACD FA 7D FF      lea d, [bp + -131] ; $j
3695   1AD0 2A            mov b, [d]
3696   1AD1 38 00 00      mov c, 0
3697   1AD4 11            mov a, b
3698   1AD5 FD 77         inc b
3699   1AD7 FA 7D FF      lea d, [bp + -131] ; $j
3700   1ADA FD 43         mov [d], b
3701   1ADC 27            mov b, a
3702   1ADD 0A 0F 1B      jmp _if110_exit
3703   1AE0             _if110_else:
3704   1AE0             ; if(!is_reserved(token)){ 
3705   1AE0             _if113_cond:
3706   1AE0             ; --- START FUNCTION CALL
3707   1AE0 3B 65 4E      mov d, _token_data ; $token
3708   1AE3 2D            mov b, d
3709   1AE4 38 00 00      mov c, 0
3710   1AE7 FD AB         swp b
3711   1AE9 D8            push b
3712   1AEA 07 36 1F      call is_reserved
3713   1AED 51 02 00      add sp, 2
3714   1AF0             ; --- END FUNCTION CALL
3715   1AF0 C0 00 00      cmp b, 0
3716   1AF3 C6 0F 1B      je _if113_exit
3717   1AF6             _if113_TRUE:
3718   1AF6             ; error_s("Undeclared label: ", token); 
3719   1AF6             ; --- START FUNCTION CALL
3720   1AF6 3B 65 4E      mov d, _token_data ; $token
3721   1AF9 2D            mov b, d
3722   1AFA 38 00 00      mov c, 0
3723   1AFD FD AB         swp b
3724   1AFF D8            push b
3725   1B00 26 43 51      mov b, _s31 ; "Undeclared label: "
3726   1B03 FD AB         swp b
3727   1B05 D8            push b
3728   1B06 07 C2 39      call error_s
3729   1B09 51 04 00      add sp, 4
3730   1B0C             ; --- END FUNCTION CALL
3731   1B0C 0A 0F 1B      jmp _if113_exit
3732   1B0F             _if113_exit:
3733   1B0F             _if110_exit:
3734   1B0F 0A EC 1B      jmp _if109_exit
3735   1B12             _if109_else:
3736   1B12             ; if(toktype == INTEGER_CONST){ 
3737   1B12             _if114_cond:
3738   1B12 3B 61 4E      mov d, _toktype ; $toktype
3739   1B15 2A            mov b, [d]
3740   1B16 38 00 00      mov c, 0
3741   1B19             ; --- START RELATIONAL
3742   1B19 D7            push a
3743   1B1A 11            mov a, b
3744   1B1B FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
3744   1B1F 00 00 
3745   1B21 B0            cmp a, b
3746   1B22 FD 71         seq ; ==
3747   1B24 E4            pop a
3748   1B25             ; --- END RELATIONAL
3749   1B25 C0 00 00      cmp b, 0
3750   1B28 C6 EC 1B      je _if114_exit
3751   1B2B             _if114_TRUE:
3752   1B2B             ; if(operand_types[j] == '#'){ 
3753   1B2B             _if115_cond:
3754   1B2B FA 7A FF      lea d, [bp + -134] ; $operand_types
3755   1B2E D7            push a
3756   1B2F DA            push d
3757   1B30 FA 7D FF      lea d, [bp + -131] ; $j
3758   1B33 2A            mov b, [d]
3759   1B34 38 00 00      mov c, 0
3760   1B37 E7            pop d
3761   1B38 5A            add d, b
3762   1B39 E4            pop a
3763   1B3A 32            mov bl, [d]
3764   1B3B A7 00         mov bh, 0
3765   1B3D 38 00 00      mov c, 0
3766   1B40             ; --- START RELATIONAL
3767   1B40 D7            push a
3768   1B41 11            mov a, b
3769   1B42 FD 2E 23 00   mov32 cb, $00000023
3769   1B46 00 00 
3770   1B48 B0            cmp a, b
3771   1B49 FD 71         seq ; ==
3772   1B4B E4            pop a
3773   1B4C             ; --- END RELATIONAL
3774   1B4C C0 00 00      cmp b, 0
3775   1B4F C6 7D 1B      je _if115_else
3776   1B52             _if115_TRUE:
3777   1B52             ; emit_byte(int_const, emit_override); 
3778   1B52             ; --- START FUNCTION CALL
3779   1B52 FA 05 00      lea d, [bp + 5] ; $emit_override
3780   1B55 32            mov bl, [d]
3781   1B56 A7 00         mov bh, 0
3782   1B58 38 00 00      mov c, 0
3783   1B5B DD            push bl
3784   1B5C 3B A5 4F      mov d, _int_const ; $int_const
3785   1B5F 2A            mov b, [d]
3786   1B60 38 00 00      mov c, 0
3787   1B63 DD            push bl
3788   1B64 07 97 27      call emit_byte
3789   1B67 51 02 00      add sp, 2
3790   1B6A             ; --- END FUNCTION CALL
3791   1B6A             ; instr_len++; 
3792   1B6A FA 85 FF      lea d, [bp + -123] ; $instr_len
3793   1B6D 2A            mov b, [d]
3794   1B6E 38 00 00      mov c, 0
3795   1B71 11            mov a, b
3796   1B72 FD 77         inc b
3797   1B74 FA 85 FF      lea d, [bp + -123] ; $instr_len
3798   1B77 FD 43         mov [d], b
3799   1B79 27            mov b, a
3800   1B7A 0A D9 1B      jmp _if115_exit
3801   1B7D             _if115_else:
3802   1B7D             ; if(operand_types[j] == '@'){ 
3803   1B7D             _if116_cond:
3804   1B7D FA 7A FF      lea d, [bp + -134] ; $operand_types
3805   1B80 D7            push a
3806   1B81 DA            push d
3807   1B82 FA 7D FF      lea d, [bp + -131] ; $j
3808   1B85 2A            mov b, [d]
3809   1B86 38 00 00      mov c, 0
3810   1B89 E7            pop d
3811   1B8A 5A            add d, b
3812   1B8B E4            pop a
3813   1B8C 32            mov bl, [d]
3814   1B8D A7 00         mov bh, 0
3815   1B8F 38 00 00      mov c, 0
3816   1B92             ; --- START RELATIONAL
3817   1B92 D7            push a
3818   1B93 11            mov a, b
3819   1B94 FD 2E 40 00   mov32 cb, $00000040
3819   1B98 00 00 
3820   1B9A B0            cmp a, b
3821   1B9B FD 71         seq ; ==
3822   1B9D E4            pop a
3823   1B9E             ; --- END RELATIONAL
3824   1B9E C0 00 00      cmp b, 0
3825   1BA1 C6 D9 1B      je _if116_exit
3826   1BA4             _if116_TRUE:
3827   1BA4             ; emit_word(int_const, emit_override); 
3828   1BA4             ; --- START FUNCTION CALL
3829   1BA4 FA 05 00      lea d, [bp + 5] ; $emit_override
3830   1BA7 32            mov bl, [d]
3831   1BA8 A7 00         mov bh, 0
3832   1BAA 38 00 00      mov c, 0
3833   1BAD DD            push bl
3834   1BAE 3B A5 4F      mov d, _int_const ; $int_const
3835   1BB1 2A            mov b, [d]
3836   1BB2 38 00 00      mov c, 0
3837   1BB5 FD AB         swp b
3838   1BB7 D8            push b
3839   1BB8 07 CF 27      call emit_word
3840   1BBB 51 03 00      add sp, 3
3841   1BBE             ; --- END FUNCTION CALL
3842   1BBE             ; instr_len = instr_len + 2; 
3843   1BBE FA 85 FF      lea d, [bp + -123] ; $instr_len
3844   1BC1 DA            push d
3845   1BC2 FA 85 FF      lea d, [bp + -123] ; $instr_len
3846   1BC5 2A            mov b, [d]
3847   1BC6 38 00 00      mov c, 0
3848   1BC9             ; --- START TERMS
3849   1BC9 D7            push a
3850   1BCA 11            mov a, b
3851   1BCB FD 2E 02 00   mov32 cb, $00000002
3851   1BCF 00 00 
3852   1BD1 56            add b, a
3853   1BD2 E4            pop a
3854   1BD3             ; --- END TERMS
3855   1BD3 E7            pop d
3856   1BD4 FD 43         mov [d], b
3857   1BD6 0A D9 1B      jmp _if116_exit
3858   1BD9             _if116_exit:
3859   1BD9             _if115_exit:
3860   1BD9             ; j++; 
3861   1BD9 FA 7D FF      lea d, [bp + -131] ; $j
3862   1BDC 2A            mov b, [d]
3863   1BDD 38 00 00      mov c, 0
3864   1BE0 11            mov a, b
3865   1BE1 FD 77         inc b
3866   1BE3 FA 7D FF      lea d, [bp + -131] ; $j
3867   1BE6 FD 43         mov [d], b
3868   1BE8 27            mov b, a
3869   1BE9 0A EC 1B      jmp _if114_exit
3870   1BEC             _if114_exit:
3871   1BEC             _if109_exit:
3872   1BEC             _for107_update:
3873   1BEC 0A D5 19      jmp _for107_cond
3874   1BEF             _for107_exit:
3875   1BEF             ; if(!emit_override){ 
3876   1BEF             _if117_cond:
3877   1BEF FA 05 00      lea d, [bp + 5] ; $emit_override
3878   1BF2 32            mov bl, [d]
3879   1BF3 A7 00         mov bh, 0
3880   1BF5 38 00 00      mov c, 0
3881   1BF8 C0 00 00      cmp b, 0
3882   1BFB C6 2B 1C      je _if117_exit
3883   1BFE             _if117_TRUE:
3884   1BFE             ; printf("%x(%d): %s\n", old_pc, instr_len, code_line); 
3885   1BFE             ; --- START FUNCTION CALL
3886   1BFE FA A1 FF      lea d, [bp + -95] ; $code_line
3887   1C01 2D            mov b, d
3888   1C02 38 00 00      mov c, 0
3889   1C05 FD AB         swp b
3890   1C07 D8            push b
3891   1C08 FA 85 FF      lea d, [bp + -123] ; $instr_len
3892   1C0B 2A            mov b, [d]
3893   1C0C 38 00 00      mov c, 0
3894   1C0F FD AB         swp b
3895   1C11 D8            push b
3896   1C12 FA 78 FF      lea d, [bp + -136] ; $old_pc
3897   1C15 2A            mov b, [d]
3898   1C16 38 00 00      mov c, 0
3899   1C19 FD AB         swp b
3900   1C1B D8            push b
3901   1C1C 26 37 51      mov b, _s30 ; "%x(%d): %s\n"
3902   1C1F FD AB         swp b
3903   1C21 D8            push b
3904   1C22 07 8F 3E      call printf
3905   1C25 51 08 00      add sp, 8
3906   1C28             ; --- END FUNCTION CALL
3907   1C28 0A 2B 1C      jmp _if117_exit
3908   1C2B             _if117_exit:
3909   1C2B             ; break; 
3910   1C2B 0A 41 1C      jmp _for89_exit ; for break
3911   1C2E             _for89_update:
3912   1C2E FA 7F FF      lea d, [bp + -129] ; $i
3913   1C31 2A            mov b, [d]
3914   1C32 38 00 00      mov c, 0
3915   1C35 11            mov a, b
3916   1C36 FD 77         inc b
3917   1C38 FA 7F FF      lea d, [bp + -129] ; $i
3918   1C3B FD 43         mov [d], b
3919   1C3D 27            mov b, a
3920   1C3E 0A 03 17      jmp _for89_cond
3921   1C41             _for89_exit:
3922   1C41             _if79_exit:
3923   1C41             ; pop_prog(); 
3924   1C41             ; --- START FUNCTION CALL
3925   1C41 07 50 3A      call pop_prog
3926   1C44 F9            leave
3927   1C45 09            ret
3928   1C46             
3929   1C46             parse_text:
3930   1C46 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3931   1C49             ; char *temp_prog; 
3932   1C49 52 02 00      sub sp, 2
3933   1C4C             ; printf("Parsing TEXT section...\n"); 
3934   1C4C             ; --- START FUNCTION CALL
3935   1C4C 26 56 51      mov b, _s32 ; "Parsing TEXT section...\n"
3936   1C4F FD AB         swp b
3937   1C51 D8            push b
3938   1C52 07 8F 3E      call printf
3939   1C55 51 02 00      add sp, 2
3940   1C58             ; --- END FUNCTION CALL
3941   1C58             ; prog = program; 
3942   1C58 3B 63 4E      mov d, _prog ; $prog
3943   1C5B DA            push d
3944   1C5C 3B A7 4F      mov d, _program ; $program
3945   1C5F 2A            mov b, [d]
3946   1C60 38 00 00      mov c, 0
3947   1C63 E7            pop d
3948   1C64 FD 43         mov [d], b
3949   1C66             ; bin_p = bin_out + _org; 
3950   1C66 3B AB 4F      mov d, _bin_p ; $bin_p
3951   1C69 DA            push d
3952   1C6A 3B A9 4F      mov d, _bin_out ; $bin_out
3953   1C6D 2A            mov b, [d]
3954   1C6E 38 00 00      mov c, 0
3955   1C71             ; --- START TERMS
3956   1C71 D7            push a
3957   1C72 11            mov a, b
3958   1C73 3B 5A 4E      mov d, __org ; $_org
3959   1C76 2A            mov b, [d]
3960   1C77 38 00 00      mov c, 0
3961   1C7A 56            add b, a
3962   1C7B E4            pop a
3963   1C7C             ; --- END TERMS
3964   1C7C E7            pop d
3965   1C7D FD 43         mov [d], b
3966   1C7F             ; pc = _org; 
3967   1C7F 3B 5C 4E      mov d, _pc ; $pc
3968   1C82 DA            push d
3969   1C83 3B 5A 4E      mov d, __org ; $_org
3970   1C86 2A            mov b, [d]
3971   1C87 38 00 00      mov c, 0
3972   1C8A E7            pop d
3973   1C8B FD 43         mov [d], b
3974   1C8D             ; for(;;){ 
3975   1C8D             _for118_init:
3976   1C8D             _for118_cond:
3977   1C8D             _for118_block:
3978   1C8D             ; get(); 
3979   1C8D             ; --- START FUNCTION CALL
3980   1C8D 07 92 2B      call get
3981   1C90             ; if(toktype == END) error("TEXT section not found."); 
3982   1C90             _if119_cond:
3983   1C90 3B 61 4E      mov d, _toktype ; $toktype
3984   1C93 2A            mov b, [d]
3985   1C94 38 00 00      mov c, 0
3986   1C97             ; --- START RELATIONAL
3987   1C97 D7            push a
3988   1C98 11            mov a, b
3989   1C99 FD 2E 07 00   mov32 cb, $7 ; enum element: END
3989   1C9D 00 00 
3990   1C9F B0            cmp a, b
3991   1CA0 FD 71         seq ; ==
3992   1CA2 E4            pop a
3993   1CA3             ; --- END RELATIONAL
3994   1CA3 C0 00 00      cmp b, 0
3995   1CA6 C6 B8 1C      je _if119_exit
3996   1CA9             _if119_TRUE:
3997   1CA9             ; error("TEXT section not found."); 
3998   1CA9             ; --- START FUNCTION CALL
3999   1CA9 26 6F 51      mov b, _s33 ; "TEXT section not found."
4000   1CAC FD AB         swp b
4001   1CAE D8            push b
4002   1CAF 07 98 39      call error
4003   1CB2 51 02 00      add sp, 2
4004   1CB5             ; --- END FUNCTION CALL
4005   1CB5 0A B8 1C      jmp _if119_exit
4006   1CB8             _if119_exit:
4007   1CB8             ; if(tok == TEXT){ 
4008   1CB8             _if120_cond:
4009   1CB8 3B 5F 4E      mov d, _tok ; $tok
4010   1CBB 2A            mov b, [d]
4011   1CBC 38 00 00      mov c, 0
4012   1CBF             ; --- START RELATIONAL
4013   1CBF D7            push a
4014   1CC0 11            mov a, b
4015   1CC1 FD 2E 04 00   mov32 cb, $4 ; enum element: TEXT
4015   1CC5 00 00 
4016   1CC7 B0            cmp a, b
4017   1CC8 FD 71         seq ; ==
4018   1CCA E4            pop a
4019   1CCB             ; --- END RELATIONAL
4020   1CCB C0 00 00      cmp b, 0
4021   1CCE C6 D7 1C      je _if120_exit
4022   1CD1             _if120_TRUE:
4023   1CD1             ; break; 
4024   1CD1 0A DA 1C      jmp _for118_exit ; for break
4025   1CD4 0A D7 1C      jmp _if120_exit
4026   1CD7             _if120_exit:
4027   1CD7             _for118_update:
4028   1CD7 0A 8D 1C      jmp _for118_cond
4029   1CDA             _for118_exit:
4030   1CDA             ; for(;;){ 
4031   1CDA             _for121_init:
4032   1CDA             _for121_cond:
4033   1CDA             _for121_block:
4034   1CDA             ; get(); back(); 
4035   1CDA             ; --- START FUNCTION CALL
4036   1CDA 07 92 2B      call get
4037   1CDD             ; back(); 
4038   1CDD             ; --- START FUNCTION CALL
4039   1CDD 07 05 28      call back
4040   1CE0             ; temp_prog = prog; 
4041   1CE0 FA FF FF      lea d, [bp + -1] ; $temp_prog
4042   1CE3 DA            push d
4043   1CE4 3B 63 4E      mov d, _prog ; $prog
4044   1CE7 2A            mov b, [d]
4045   1CE8 38 00 00      mov c, 0
4046   1CEB E7            pop d
4047   1CEC FD 43         mov [d], b
4048   1CEE             ; get(); 
4049   1CEE             ; --- START FUNCTION CALL
4050   1CEE 07 92 2B      call get
4051   1CF1             ; if(toktype == END) error("TEXT section end not found."); 
4052   1CF1             _if122_cond:
4053   1CF1 3B 61 4E      mov d, _toktype ; $toktype
4054   1CF4 2A            mov b, [d]
4055   1CF5 38 00 00      mov c, 0
4056   1CF8             ; --- START RELATIONAL
4057   1CF8 D7            push a
4058   1CF9 11            mov a, b
4059   1CFA FD 2E 07 00   mov32 cb, $7 ; enum element: END
4059   1CFE 00 00 
4060   1D00 B0            cmp a, b
4061   1D01 FD 71         seq ; ==
4062   1D03 E4            pop a
4063   1D04             ; --- END RELATIONAL
4064   1D04 C0 00 00      cmp b, 0
4065   1D07 C6 19 1D      je _if122_exit
4066   1D0A             _if122_TRUE:
4067   1D0A             ; error("TEXT section end not found."); 
4068   1D0A             ; --- START FUNCTION CALL
4069   1D0A 26 87 51      mov b, _s34 ; "TEXT section end not found."
4070   1D0D FD AB         swp b
4071   1D0F D8            push b
4072   1D10 07 98 39      call error
4073   1D13 51 02 00      add sp, 2
4074   1D16             ; --- END FUNCTION CALL
4075   1D16 0A 19 1D      jmp _if122_exit
4076   1D19             _if122_exit:
4077   1D19             ; if(tok == DOT){ 
4078   1D19             _if123_cond:
4079   1D19 3B 5F 4E      mov d, _tok ; $tok
4080   1D1C 2A            mov b, [d]
4081   1D1D 38 00 00      mov c, 0
4082   1D20             ; --- START RELATIONAL
4083   1D20 D7            push a
4084   1D21 11            mov a, b
4085   1D22 FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
4085   1D26 00 00 
4086   1D28 B0            cmp a, b
4087   1D29 FD 71         seq ; ==
4088   1D2B E4            pop a
4089   1D2C             ; --- END RELATIONAL
4090   1D2C C0 00 00      cmp b, 0
4091   1D2F C6 63 1D      je _if123_else
4092   1D32             _if123_TRUE:
4093   1D32             ; get(); 
4094   1D32             ; --- START FUNCTION CALL
4095   1D32 07 92 2B      call get
4096   1D35             ; if(tok == SEGMENT_END) break; 
4097   1D35             _if124_cond:
4098   1D35 3B 5F 4E      mov d, _tok ; $tok
4099   1D38 2A            mov b, [d]
4100   1D39 38 00 00      mov c, 0
4101   1D3C             ; --- START RELATIONAL
4102   1D3C D7            push a
4103   1D3D 11            mov a, b
4104   1D3E FD 2E 05 00   mov32 cb, $5 ; enum element: SEGMENT_END
4104   1D42 00 00 
4105   1D44 B0            cmp a, b
4106   1D45 FD 71         seq ; ==
4107   1D47 E4            pop a
4108   1D48             ; --- END RELATIONAL
4109   1D48 C0 00 00      cmp b, 0
4110   1D4B C6 54 1D      je _if124_else
4111   1D4E             _if124_TRUE:
4112   1D4E             ; break; 
4113   1D4E 0A BC 1D      jmp _for121_exit ; for break
4114   1D51 0A 60 1D      jmp _if124_exit
4115   1D54             _if124_else:
4116   1D54             ; error("Un_expected directive."); 
4117   1D54             ; --- START FUNCTION CALL
4118   1D54 26 A3 51      mov b, _s35 ; "Un_expected directive."
4119   1D57 FD AB         swp b
4120   1D59 D8            push b
4121   1D5A 07 98 39      call error
4122   1D5D 51 02 00      add sp, 2
4123   1D60             ; --- END FUNCTION CALL
4124   1D60             _if124_exit:
4125   1D60 0A B9 1D      jmp _if123_exit
4126   1D63             _if123_else:
4127   1D63             ; if(toktype == IDENTIFIER){ 
4128   1D63             _if125_cond:
4129   1D63 3B 61 4E      mov d, _toktype ; $toktype
4130   1D66 2A            mov b, [d]
4131   1D67 38 00 00      mov c, 0
4132   1D6A             ; --- START RELATIONAL
4133   1D6A D7            push a
4134   1D6B 11            mov a, b
4135   1D6C FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
4135   1D70 00 00 
4136   1D72 B0            cmp a, b
4137   1D73 FD 71         seq ; ==
4138   1D75 E4            pop a
4139   1D76             ; --- END RELATIONAL
4140   1D76 C0 00 00      cmp b, 0
4141   1D79 C6 B9 1D      je _if125_exit
4142   1D7C             _if125_TRUE:
4143   1D7C             ; get(); 
4144   1D7C             ; --- START FUNCTION CALL
4145   1D7C 07 92 2B      call get
4146   1D7F             ; if(tok != COLON){ 
4147   1D7F             _if126_cond:
4148   1D7F 3B 5F 4E      mov d, _tok ; $tok
4149   1D82 2A            mov b, [d]
4150   1D83 38 00 00      mov c, 0
4151   1D86             ; --- START RELATIONAL
4152   1D86 D7            push a
4153   1D87 11            mov a, b
4154   1D88 FD 2E 0D 00   mov32 cb, $d ; enum element: COLON
4154   1D8C 00 00 
4155   1D8E B0            cmp a, b
4156   1D8F FD 72         sneq ; !=
4157   1D91 E4            pop a
4158   1D92             ; --- END RELATIONAL
4159   1D92 C0 00 00      cmp b, 0
4160   1D95 C6 B6 1D      je _if126_exit
4161   1D98             _if126_TRUE:
4162   1D98             ; prog = temp_prog; 
4163   1D98 3B 63 4E      mov d, _prog ; $prog
4164   1D9B DA            push d
4165   1D9C FA FF FF      lea d, [bp + -1] ; $temp_prog
4166   1D9F 2A            mov b, [d]
4167   1DA0 38 00 00      mov c, 0
4168   1DA3 E7            pop d
4169   1DA4 FD 43         mov [d], b
4170   1DA6             ; parse_instr(0); 
4171   1DA6             ; --- START FUNCTION CALL
4172   1DA6 FD 2E 00 00   mov32 cb, $00000000
4172   1DAA 00 00 
4173   1DAC DD            push bl
4174   1DAD 07 94 13      call parse_instr
4175   1DB0 51 01 00      add sp, 1
4176   1DB3             ; --- END FUNCTION CALL
4177   1DB3 0A B6 1D      jmp _if126_exit
4178   1DB6             _if126_exit:
4179   1DB6 0A B9 1D      jmp _if125_exit
4180   1DB9             _if125_exit:
4181   1DB9             _if123_exit:
4182   1DB9             _for121_update:
4183   1DB9 0A DA 1C      jmp _for121_cond
4184   1DBC             _for121_exit:
4185   1DBC             ; printf("Done.\n\n"); 
4186   1DBC             ; --- START FUNCTION CALL
4187   1DBC 26 BA 51      mov b, _s36 ; "Done.\n\n"
4188   1DBF FD AB         swp b
4189   1DC1 D8            push b
4190   1DC2 07 8F 3E      call printf
4191   1DC5 51 02 00      add sp, 2
4192   1DC8             ; --- END FUNCTION CALL
4193   1DC8 F9            leave
4194   1DC9 09            ret
4195   1DCA             
4196   1DCA             debug:
4197   1DCA F8 00 00      enter 0 ; (push bp; mov bp, sp)
4198   1DCD             ; printf("\n"); 
4199   1DCD             ; --- START FUNCTION CALL
4200   1DCD 26 FC 4F      mov b, _s10 ; "\n"
4201   1DD0 FD AB         swp b
4202   1DD2 D8            push b
4203   1DD3 07 8F 3E      call printf
4204   1DD6 51 02 00      add sp, 2
4205   1DD9             ; --- END FUNCTION CALL
4206   1DD9             ; printf("Prog Offset: %x\n", prog - program); 
4207   1DD9             ; --- START FUNCTION CALL
4208   1DD9 3B 63 4E      mov d, _prog ; $prog
4209   1DDC 2A            mov b, [d]
4210   1DDD 38 00 00      mov c, 0
4211   1DE0             ; --- START TERMS
4212   1DE0 D7            push a
4213   1DE1 11            mov a, b
4214   1DE2 3B A7 4F      mov d, _program ; $program
4215   1DE5 2A            mov b, [d]
4216   1DE6 38 00 00      mov c, 0
4217   1DE9 60            sub a, b
4218   1DEA 27            mov b, a
4219   1DEB E4            pop a
4220   1DEC             ; --- END TERMS
4221   1DEC FD AB         swp b
4222   1DEE D8            push b
4223   1DEF 26 C2 51      mov b, _s37 ; "Prog Offset: %x\n"
4224   1DF2 FD AB         swp b
4225   1DF4 D8            push b
4226   1DF5 07 8F 3E      call printf
4227   1DF8 51 04 00      add sp, 4
4228   1DFB             ; --- END FUNCTION CALL
4229   1DFB             ; printf("Prog value : %c\n", *prog); 
4230   1DFB             ; --- START FUNCTION CALL
4231   1DFB 3B 63 4E      mov d, _prog ; $prog
4232   1DFE 2A            mov b, [d]
4233   1DFF 38 00 00      mov c, 0
4234   1E02 74            mov d, b
4235   1E03 32            mov bl, [d]
4236   1E04 A7 00         mov bh, 0
4237   1E06 38 00 00      mov c, 0
4238   1E09 FD AB         swp b
4239   1E0B D8            push b
4240   1E0C 26 D3 51      mov b, _s38 ; "Prog value : %c\n"
4241   1E0F FD AB         swp b
4242   1E11 D8            push b
4243   1E12 07 8F 3E      call printf
4244   1E15 51 04 00      add sp, 4
4245   1E18             ; --- END FUNCTION CALL
4246   1E18             ; printf("Token      : %s\n", token); 
4247   1E18             ; --- START FUNCTION CALL
4248   1E18 3B 65 4E      mov d, _token_data ; $token
4249   1E1B 2D            mov b, d
4250   1E1C 38 00 00      mov c, 0
4251   1E1F FD AB         swp b
4252   1E21 D8            push b
4253   1E22 26 E4 51      mov b, _s39 ; "Token      : %s\n"
4254   1E25 FD AB         swp b
4255   1E27 D8            push b
4256   1E28 07 8F 3E      call printf
4257   1E2B 51 04 00      add sp, 4
4258   1E2E             ; --- END FUNCTION CALL
4259   1E2E             ; printf("Tok        : %d\n", tok); 
4260   1E2E             ; --- START FUNCTION CALL
4261   1E2E 3B 5F 4E      mov d, _tok ; $tok
4262   1E31 2A            mov b, [d]
4263   1E32 38 00 00      mov c, 0
4264   1E35 FD AB         swp b
4265   1E37 D8            push b
4266   1E38 26 F5 51      mov b, _s40 ; "Tok        : %d\n"
4267   1E3B FD AB         swp b
4268   1E3D D8            push b
4269   1E3E 07 8F 3E      call printf
4270   1E41 51 04 00      add sp, 4
4271   1E44             ; --- END FUNCTION CALL
4272   1E44             ; printf("Toktype    : %d\n", toktype); 
4273   1E44             ; --- START FUNCTION CALL
4274   1E44 3B 61 4E      mov d, _toktype ; $toktype
4275   1E47 2A            mov b, [d]
4276   1E48 38 00 00      mov c, 0
4277   1E4B FD AB         swp b
4278   1E4D D8            push b
4279   1E4E 26 06 52      mov b, _s41 ; "Toktype    : %d\n"
4280   1E51 FD AB         swp b
4281   1E53 D8            push b
4282   1E54 07 8F 3E      call printf
4283   1E57 51 04 00      add sp, 4
4284   1E5A             ; --- END FUNCTION CALL
4285   1E5A             ; printf("StringConst: %s\n", string_const); 
4286   1E5A             ; --- START FUNCTION CALL
4287   1E5A 3B A5 4E      mov d, _string_const_data ; $string_const
4288   1E5D 2D            mov b, d
4289   1E5E 38 00 00      mov c, 0
4290   1E61 FD AB         swp b
4291   1E63 D8            push b
4292   1E64 26 17 52      mov b, _s42 ; "StringConst: %s\n"
4293   1E67 FD AB         swp b
4294   1E69 D8            push b
4295   1E6A 07 8F 3E      call printf
4296   1E6D 51 04 00      add sp, 4
4297   1E70             ; --- END FUNCTION CALL
4298   1E70             ; printf("PC         : %x\n", pc); 
4299   1E70             ; --- START FUNCTION CALL
4300   1E70 3B 5C 4E      mov d, _pc ; $pc
4301   1E73 2A            mov b, [d]
4302   1E74 38 00 00      mov c, 0
4303   1E77 FD AB         swp b
4304   1E79 D8            push b
4305   1E7A 26 28 52      mov b, _s43 ; "PC         : %x\n"
4306   1E7D FD AB         swp b
4307   1E7F D8            push b
4308   1E80 07 8F 3E      call printf
4309   1E83 51 04 00      add sp, 4
4310   1E86             ; --- END FUNCTION CALL
4311   1E86 F9            leave
4312   1E87 09            ret
4313   1E88             
4314   1E88             display_output:
4315   1E88 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4316   1E8B             ; int i; 
4317   1E8B 52 02 00      sub sp, 2
4318   1E8E             ; unsigned char *p; 
4319   1E8E 52 02 00      sub sp, 2
4320   1E91             ; printf("\nAssembly complete.\n"); 
4321   1E91             ; --- START FUNCTION CALL
4322   1E91 26 39 52      mov b, _s44 ; "\nAssembly complete.\n"
4323   1E94 FD AB         swp b
4324   1E96 D8            push b
4325   1E97 07 8F 3E      call printf
4326   1E9A 51 02 00      add sp, 2
4327   1E9D             ; --- END FUNCTION CALL
4328   1E9D             ; printf("Program size: %d\n", prog_size); 
4329   1E9D             ; --- START FUNCTION CALL
4330   1E9D 3B C5 4F      mov d, _prog_size ; $prog_size
4331   1EA0 2A            mov b, [d]
4332   1EA1 38 00 00      mov c, 0
4333   1EA4 FD AB         swp b
4334   1EA6 D8            push b
4335   1EA7 26 4E 52      mov b, _s45 ; "Program size: %d\n"
4336   1EAA FD AB         swp b
4337   1EAC D8            push b
4338   1EAD 07 8F 3E      call printf
4339   1EB0 51 04 00      add sp, 4
4340   1EB3             ; --- END FUNCTION CALL
4341   1EB3             ; printf("Listing: \n"); 
4342   1EB3             ; --- START FUNCTION CALL
4343   1EB3 26 60 52      mov b, _s46 ; "Listing: \n"
4344   1EB6 FD AB         swp b
4345   1EB8 D8            push b
4346   1EB9 07 8F 3E      call printf
4347   1EBC 51 02 00      add sp, 2
4348   1EBF             ; --- END FUNCTION CALL
4349   1EBF             ; p = bin_out + _org; 
4350   1EBF FA FD FF      lea d, [bp + -3] ; $p
4351   1EC2 DA            push d
4352   1EC3 3B A9 4F      mov d, _bin_out ; $bin_out
4353   1EC6 2A            mov b, [d]
4354   1EC7 38 00 00      mov c, 0
4355   1ECA             ; --- START TERMS
4356   1ECA D7            push a
4357   1ECB 11            mov a, b
4358   1ECC 3B 5A 4E      mov d, __org ; $_org
4359   1ECF 2A            mov b, [d]
4360   1ED0 38 00 00      mov c, 0
4361   1ED3 56            add b, a
4362   1ED4 E4            pop a
4363   1ED5             ; --- END TERMS
4364   1ED5 E7            pop d
4365   1ED6 FD 43         mov [d], b
4366   1ED8             ; for(;;){ 
4367   1ED8             _for127_init:
4368   1ED8             _for127_cond:
4369   1ED8             _for127_block:
4370   1ED8             ; if(p == bin_p) break; 
4371   1ED8             _if128_cond:
4372   1ED8 FA FD FF      lea d, [bp + -3] ; $p
4373   1EDB 2A            mov b, [d]
4374   1EDC 38 00 00      mov c, 0
4375   1EDF             ; --- START RELATIONAL
4376   1EDF D7            push a
4377   1EE0 11            mov a, b
4378   1EE1 3B AB 4F      mov d, _bin_p ; $bin_p
4379   1EE4 2A            mov b, [d]
4380   1EE5 38 00 00      mov c, 0
4381   1EE8 B0            cmp a, b
4382   1EE9 FD 71         seq ; ==
4383   1EEB E4            pop a
4384   1EEC             ; --- END RELATIONAL
4385   1EEC C0 00 00      cmp b, 0
4386   1EEF C6 F8 1E      je _if128_exit
4387   1EF2             _if128_TRUE:
4388   1EF2             ; break; 
4389   1EF2 0A 28 1F      jmp _for127_exit ; for break
4390   1EF5 0A F8 1E      jmp _if128_exit
4391   1EF8             _if128_exit:
4392   1EF8             ; printf("%x", *p);  
4393   1EF8             ; --- START FUNCTION CALL
4394   1EF8 FA FD FF      lea d, [bp + -3] ; $p
4395   1EFB 2A            mov b, [d]
4396   1EFC 38 00 00      mov c, 0
4397   1EFF 74            mov d, b
4398   1F00 32            mov bl, [d]
4399   1F01 A7 00         mov bh, 0
4400   1F03 38 00 00      mov c, 0
4401   1F06 FD AB         swp b
4402   1F08 D8            push b
4403   1F09 26 6B 52      mov b, _s47 ; "%x"
4404   1F0C FD AB         swp b
4405   1F0E D8            push b
4406   1F0F 07 8F 3E      call printf
4407   1F12 51 04 00      add sp, 4
4408   1F15             ; --- END FUNCTION CALL
4409   1F15             ; p++; 
4410   1F15 FA FD FF      lea d, [bp + -3] ; $p
4411   1F18 2A            mov b, [d]
4412   1F19 38 00 00      mov c, 0
4413   1F1C FD 77         inc b
4414   1F1E FA FD FF      lea d, [bp + -3] ; $p
4415   1F21 FD 43         mov [d], b
4416   1F23 FD 7D         dec b
4417   1F25             _for127_update:
4418   1F25 0A D8 1E      jmp _for127_cond
4419   1F28             _for127_exit:
4420   1F28             ; printf("\n"); 
4421   1F28             ; --- START FUNCTION CALL
4422   1F28 26 FC 4F      mov b, _s10 ; "\n"
4423   1F2B FD AB         swp b
4424   1F2D D8            push b
4425   1F2E 07 8F 3E      call printf
4426   1F31 51 02 00      add sp, 2
4427   1F34             ; --- END FUNCTION CALL
4428   1F34 F9            leave
4429   1F35 09            ret
4430   1F36             
4431   1F36             is_reserved:
4432   1F36 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4433   1F39             ; return !strcmp(name, "a") 
4434   1F39             ; --- START FUNCTION CALL
4435   1F39 26 6E 52      mov b, _s48 ; "a"
4436   1F3C FD AB         swp b
4437   1F3E D8            push b
4438   1F3F FA 05 00      lea d, [bp + 5] ; $name
4439   1F42 2A            mov b, [d]
4440   1F43 38 00 00      mov c, 0
4441   1F46 FD AB         swp b
4442   1F48 D8            push b
4443   1F49 07 EC 48      call strcmp
4444   1F4C 51 04 00      add sp, 4
4445   1F4F             ; --- END FUNCTION CALL
4446   1F4F             ; --- START LOGICAL OR
4447   1F4F D7            push a
4448   1F50 11            mov a, b
4449   1F51             ; --- START FUNCTION CALL
4450   1F51 26 70 52      mov b, _s49 ; "al"
4451   1F54 FD AB         swp b
4452   1F56 D8            push b
4453   1F57 FA 05 00      lea d, [bp + 5] ; $name
4454   1F5A 2A            mov b, [d]
4455   1F5B 38 00 00      mov c, 0
4456   1F5E FD AB         swp b
4457   1F60 D8            push b
4458   1F61 07 EC 48      call strcmp
4459   1F64 51 04 00      add sp, 4
4460   1F67             ; --- END FUNCTION CALL
4461   1F67 FD A8         sor a, b ; ||
4462   1F69 11            mov a, b
4463   1F6A             ; --- START FUNCTION CALL
4464   1F6A 26 73 52      mov b, _s50 ; "ah"
4465   1F6D FD AB         swp b
4466   1F6F D8            push b
4467   1F70 FA 05 00      lea d, [bp + 5] ; $name
4468   1F73 2A            mov b, [d]
4469   1F74 38 00 00      mov c, 0
4470   1F77 FD AB         swp b
4471   1F79 D8            push b
4472   1F7A 07 EC 48      call strcmp
4473   1F7D 51 04 00      add sp, 4
4474   1F80             ; --- END FUNCTION CALL
4475   1F80 FD A8         sor a, b ; ||
4476   1F82 11            mov a, b
4477   1F83             ; --- START FUNCTION CALL
4478   1F83 26 76 52      mov b, _s51 ; "b"
4479   1F86 FD AB         swp b
4480   1F88 D8            push b
4481   1F89 FA 05 00      lea d, [bp + 5] ; $name
4482   1F8C 2A            mov b, [d]
4483   1F8D 38 00 00      mov c, 0
4484   1F90 FD AB         swp b
4485   1F92 D8            push b
4486   1F93 07 EC 48      call strcmp
4487   1F96 51 04 00      add sp, 4
4488   1F99             ; --- END FUNCTION CALL
4489   1F99 FD A8         sor a, b ; ||
4490   1F9B 11            mov a, b
4491   1F9C             ; --- START FUNCTION CALL
4492   1F9C 26 78 52      mov b, _s52 ; "bl"
4493   1F9F FD AB         swp b
4494   1FA1 D8            push b
4495   1FA2 FA 05 00      lea d, [bp + 5] ; $name
4496   1FA5 2A            mov b, [d]
4497   1FA6 38 00 00      mov c, 0
4498   1FA9 FD AB         swp b
4499   1FAB D8            push b
4500   1FAC 07 EC 48      call strcmp
4501   1FAF 51 04 00      add sp, 4
4502   1FB2             ; --- END FUNCTION CALL
4503   1FB2 FD A8         sor a, b ; ||
4504   1FB4 11            mov a, b
4505   1FB5             ; --- START FUNCTION CALL
4506   1FB5 26 7B 52      mov b, _s53 ; "bh"
4507   1FB8 FD AB         swp b
4508   1FBA D8            push b
4509   1FBB FA 05 00      lea d, [bp + 5] ; $name
4510   1FBE 2A            mov b, [d]
4511   1FBF 38 00 00      mov c, 0
4512   1FC2 FD AB         swp b
4513   1FC4 D8            push b
4514   1FC5 07 EC 48      call strcmp
4515   1FC8 51 04 00      add sp, 4
4516   1FCB             ; --- END FUNCTION CALL
4517   1FCB FD A8         sor a, b ; ||
4518   1FCD 11            mov a, b
4519   1FCE             ; --- START FUNCTION CALL
4520   1FCE 26 7E 52      mov b, _s54 ; "c"
4521   1FD1 FD AB         swp b
4522   1FD3 D8            push b
4523   1FD4 FA 05 00      lea d, [bp + 5] ; $name
4524   1FD7 2A            mov b, [d]
4525   1FD8 38 00 00      mov c, 0
4526   1FDB FD AB         swp b
4527   1FDD D8            push b
4528   1FDE 07 EC 48      call strcmp
4529   1FE1 51 04 00      add sp, 4
4530   1FE4             ; --- END FUNCTION CALL
4531   1FE4 FD A8         sor a, b ; ||
4532   1FE6 11            mov a, b
4533   1FE7             ; --- START FUNCTION CALL
4534   1FE7 26 80 52      mov b, _s55 ; "cl"
4535   1FEA FD AB         swp b
4536   1FEC D8            push b
4537   1FED FA 05 00      lea d, [bp + 5] ; $name
4538   1FF0 2A            mov b, [d]
4539   1FF1 38 00 00      mov c, 0
4540   1FF4 FD AB         swp b
4541   1FF6 D8            push b
4542   1FF7 07 EC 48      call strcmp
4543   1FFA 51 04 00      add sp, 4
4544   1FFD             ; --- END FUNCTION CALL
4545   1FFD FD A8         sor a, b ; ||
4546   1FFF 11            mov a, b
4547   2000             ; --- START FUNCTION CALL
4548   2000 26 83 52      mov b, _s56 ; "ch"
4549   2003 FD AB         swp b
4550   2005 D8            push b
4551   2006 FA 05 00      lea d, [bp + 5] ; $name
4552   2009 2A            mov b, [d]
4553   200A 38 00 00      mov c, 0
4554   200D FD AB         swp b
4555   200F D8            push b
4556   2010 07 EC 48      call strcmp
4557   2013 51 04 00      add sp, 4
4558   2016             ; --- END FUNCTION CALL
4559   2016 FD A8         sor a, b ; ||
4560   2018 11            mov a, b
4561   2019             ; --- START FUNCTION CALL
4562   2019 26 86 52      mov b, _s57 ; "d"
4563   201C FD AB         swp b
4564   201E D8            push b
4565   201F FA 05 00      lea d, [bp + 5] ; $name
4566   2022 2A            mov b, [d]
4567   2023 38 00 00      mov c, 0
4568   2026 FD AB         swp b
4569   2028 D8            push b
4570   2029 07 EC 48      call strcmp
4571   202C 51 04 00      add sp, 4
4572   202F             ; --- END FUNCTION CALL
4573   202F FD A8         sor a, b ; ||
4574   2031 11            mov a, b
4575   2032             ; --- START FUNCTION CALL
4576   2032 26 88 52      mov b, _s58 ; "dl"
4577   2035 FD AB         swp b
4578   2037 D8            push b
4579   2038 FA 05 00      lea d, [bp + 5] ; $name
4580   203B 2A            mov b, [d]
4581   203C 38 00 00      mov c, 0
4582   203F FD AB         swp b
4583   2041 D8            push b
4584   2042 07 EC 48      call strcmp
4585   2045 51 04 00      add sp, 4
4586   2048             ; --- END FUNCTION CALL
4587   2048 FD A8         sor a, b ; ||
4588   204A 11            mov a, b
4589   204B             ; --- START FUNCTION CALL
4590   204B 26 8B 52      mov b, _s59 ; "dh"
4591   204E FD AB         swp b
4592   2050 D8            push b
4593   2051 FA 05 00      lea d, [bp + 5] ; $name
4594   2054 2A            mov b, [d]
4595   2055 38 00 00      mov c, 0
4596   2058 FD AB         swp b
4597   205A D8            push b
4598   205B 07 EC 48      call strcmp
4599   205E 51 04 00      add sp, 4
4600   2061             ; --- END FUNCTION CALL
4601   2061 FD A8         sor a, b ; ||
4602   2063 11            mov a, b
4603   2064             ; --- START FUNCTION CALL
4604   2064 26 8E 52      mov b, _s60 ; "g"
4605   2067 FD AB         swp b
4606   2069 D8            push b
4607   206A FA 05 00      lea d, [bp + 5] ; $name
4608   206D 2A            mov b, [d]
4609   206E 38 00 00      mov c, 0
4610   2071 FD AB         swp b
4611   2073 D8            push b
4612   2074 07 EC 48      call strcmp
4613   2077 51 04 00      add sp, 4
4614   207A             ; --- END FUNCTION CALL
4615   207A FD A8         sor a, b ; ||
4616   207C 11            mov a, b
4617   207D             ; --- START FUNCTION CALL
4618   207D 26 90 52      mov b, _s61 ; "gl"
4619   2080 FD AB         swp b
4620   2082 D8            push b
4621   2083 FA 05 00      lea d, [bp + 5] ; $name
4622   2086 2A            mov b, [d]
4623   2087 38 00 00      mov c, 0
4624   208A FD AB         swp b
4625   208C D8            push b
4626   208D 07 EC 48      call strcmp
4627   2090 51 04 00      add sp, 4
4628   2093             ; --- END FUNCTION CALL
4629   2093 FD A8         sor a, b ; ||
4630   2095 11            mov a, b
4631   2096             ; --- START FUNCTION CALL
4632   2096 26 93 52      mov b, _s62 ; "gh"
4633   2099 FD AB         swp b
4634   209B D8            push b
4635   209C FA 05 00      lea d, [bp + 5] ; $name
4636   209F 2A            mov b, [d]
4637   20A0 38 00 00      mov c, 0
4638   20A3 FD AB         swp b
4639   20A5 D8            push b
4640   20A6 07 EC 48      call strcmp
4641   20A9 51 04 00      add sp, 4
4642   20AC             ; --- END FUNCTION CALL
4643   20AC FD A8         sor a, b ; ||
4644   20AE 11            mov a, b
4645   20AF             ; --- START FUNCTION CALL
4646   20AF 26 96 52      mov b, _s63 ; "pc"
4647   20B2 FD AB         swp b
4648   20B4 D8            push b
4649   20B5 FA 05 00      lea d, [bp + 5] ; $name
4650   20B8 2A            mov b, [d]
4651   20B9 38 00 00      mov c, 0
4652   20BC FD AB         swp b
4653   20BE D8            push b
4654   20BF 07 EC 48      call strcmp
4655   20C2 51 04 00      add sp, 4
4656   20C5             ; --- END FUNCTION CALL
4657   20C5 FD A8         sor a, b ; ||
4658   20C7 11            mov a, b
4659   20C8             ; --- START FUNCTION CALL
4660   20C8 26 99 52      mov b, _s64 ; "sp"
4661   20CB FD AB         swp b
4662   20CD D8            push b
4663   20CE FA 05 00      lea d, [bp + 5] ; $name
4664   20D1 2A            mov b, [d]
4665   20D2 38 00 00      mov c, 0
4666   20D5 FD AB         swp b
4667   20D7 D8            push b
4668   20D8 07 EC 48      call strcmp
4669   20DB 51 04 00      add sp, 4
4670   20DE             ; --- END FUNCTION CALL
4671   20DE FD A8         sor a, b ; ||
4672   20E0 11            mov a, b
4673   20E1             ; --- START FUNCTION CALL
4674   20E1 26 9C 52      mov b, _s65 ; "bp"
4675   20E4 FD AB         swp b
4676   20E6 D8            push b
4677   20E7 FA 05 00      lea d, [bp + 5] ; $name
4678   20EA 2A            mov b, [d]
4679   20EB 38 00 00      mov c, 0
4680   20EE FD AB         swp b
4681   20F0 D8            push b
4682   20F1 07 EC 48      call strcmp
4683   20F4 51 04 00      add sp, 4
4684   20F7             ; --- END FUNCTION CALL
4685   20F7 FD A8         sor a, b ; ||
4686   20F9 11            mov a, b
4687   20FA             ; --- START FUNCTION CALL
4688   20FA 26 9F 52      mov b, _s66 ; "si"
4689   20FD FD AB         swp b
4690   20FF D8            push b
4691   2100 FA 05 00      lea d, [bp + 5] ; $name
4692   2103 2A            mov b, [d]
4693   2104 38 00 00      mov c, 0
4694   2107 FD AB         swp b
4695   2109 D8            push b
4696   210A 07 EC 48      call strcmp
4697   210D 51 04 00      add sp, 4
4698   2110             ; --- END FUNCTION CALL
4699   2110 FD A8         sor a, b ; ||
4700   2112 11            mov a, b
4701   2113             ; --- START FUNCTION CALL
4702   2113 26 A2 52      mov b, _s67 ; "di"
4703   2116 FD AB         swp b
4704   2118 D8            push b
4705   2119 FA 05 00      lea d, [bp + 5] ; $name
4706   211C 2A            mov b, [d]
4707   211D 38 00 00      mov c, 0
4708   2120 FD AB         swp b
4709   2122 D8            push b
4710   2123 07 EC 48      call strcmp
4711   2126 51 04 00      add sp, 4
4712   2129             ; --- END FUNCTION CALL
4713   2129 FD A8         sor a, b ; ||
4714   212B 11            mov a, b
4715   212C             ; --- START FUNCTION CALL
4716   212C 26 A5 52      mov b, _s68 ; "word"
4717   212F FD AB         swp b
4718   2131 D8            push b
4719   2132 FA 05 00      lea d, [bp + 5] ; $name
4720   2135 2A            mov b, [d]
4721   2136 38 00 00      mov c, 0
4722   2139 FD AB         swp b
4723   213B D8            push b
4724   213C 07 EC 48      call strcmp
4725   213F 51 04 00      add sp, 4
4726   2142             ; --- END FUNCTION CALL
4727   2142 FD A8         sor a, b ; ||
4728   2144 11            mov a, b
4729   2145             ; --- START FUNCTION CALL
4730   2145 26 AA 52      mov b, _s69 ; "byte"
4731   2148 FD AB         swp b
4732   214A D8            push b
4733   214B FA 05 00      lea d, [bp + 5] ; $name
4734   214E 2A            mov b, [d]
4735   214F 38 00 00      mov c, 0
4736   2152 FD AB         swp b
4737   2154 D8            push b
4738   2155 07 EC 48      call strcmp
4739   2158 51 04 00      add sp, 4
4740   215B             ; --- END FUNCTION CALL
4741   215B FD A8         sor a, b ; ||
4742   215D 11            mov a, b
4743   215E             ; --- START FUNCTION CALL
4744   215E 26 AF 52      mov b, _s70 ; "cmpsb"
4745   2161 FD AB         swp b
4746   2163 D8            push b
4747   2164 FA 05 00      lea d, [bp + 5] ; $name
4748   2167 2A            mov b, [d]
4749   2168 38 00 00      mov c, 0
4750   216B FD AB         swp b
4751   216D D8            push b
4752   216E 07 EC 48      call strcmp
4753   2171 51 04 00      add sp, 4
4754   2174             ; --- END FUNCTION CALL
4755   2174 FD A8         sor a, b ; ||
4756   2176 11            mov a, b
4757   2177             ; --- START FUNCTION CALL
4758   2177 26 B5 52      mov b, _s71 ; "movsb"
4759   217A FD AB         swp b
4760   217C D8            push b
4761   217D FA 05 00      lea d, [bp + 5] ; $name
4762   2180 2A            mov b, [d]
4763   2181 38 00 00      mov c, 0
4764   2184 FD AB         swp b
4765   2186 D8            push b
4766   2187 07 EC 48      call strcmp
4767   218A 51 04 00      add sp, 4
4768   218D             ; --- END FUNCTION CALL
4769   218D FD A8         sor a, b ; ||
4770   218F 11            mov a, b
4771   2190             ; --- START FUNCTION CALL
4772   2190 26 BB 52      mov b, _s72 ; "stosb"
4773   2193 FD AB         swp b
4774   2195 D8            push b
4775   2196 FA 05 00      lea d, [bp + 5] ; $name
4776   2199 2A            mov b, [d]
4777   219A 38 00 00      mov c, 0
4778   219D FD AB         swp b
4779   219F D8            push b
4780   21A0 07 EC 48      call strcmp
4781   21A3 51 04 00      add sp, 4
4782   21A6             ; --- END FUNCTION CALL
4783   21A6 FD A8         sor a, b ; ||
4784   21A8 E4            pop a
4785   21A9             ; --- END LOGICAL OR
4786   21A9 F9            leave
4787   21AA 09            ret
4788   21AB             
4789   21AB             is_directive:
4790   21AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
4791   21AE             ; return !strcmp(name, "org")  
4792   21AE             ; --- START FUNCTION CALL
4793   21AE 26 D7 4F      mov b, _s0 ; "org"
4794   21B1 FD AB         swp b
4795   21B3 D8            push b
4796   21B4 FA 05 00      lea d, [bp + 5] ; $name
4797   21B7 2A            mov b, [d]
4798   21B8 38 00 00      mov c, 0
4799   21BB FD AB         swp b
4800   21BD D8            push b
4801   21BE 07 EC 48      call strcmp
4802   21C1 51 04 00      add sp, 4
4803   21C4             ; --- END FUNCTION CALL
4804   21C4             ; --- START LOGICAL OR
4805   21C4 D7            push a
4806   21C5 11            mov a, b
4807   21C6             ; --- START FUNCTION CALL
4808   21C6 26 C1 52      mov b, _s73 ; "define"
4809   21C9 FD AB         swp b
4810   21CB D8            push b
4811   21CC FA 05 00      lea d, [bp + 5] ; $name
4812   21CF 2A            mov b, [d]
4813   21D0 38 00 00      mov c, 0
4814   21D3 FD AB         swp b
4815   21D5 D8            push b
4816   21D6 07 EC 48      call strcmp
4817   21D9 51 04 00      add sp, 4
4818   21DC             ; --- END FUNCTION CALL
4819   21DC FD A8         sor a, b ; ||
4820   21DE E4            pop a
4821   21DF             ; --- END LOGICAL OR
4822   21DF F9            leave
4823   21E0 09            ret
4824   21E1             
4825   21E1             parse_label:
4826   21E1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4827   21E4             ; char label_name[ 32      ]; 
4828   21E4 52 20 00      sub sp, 32
4829   21E7             ; get(); 
4830   21E7             ; --- START FUNCTION CALL
4831   21E7 07 92 2B      call get
4832   21EA             ; strcpy(label_name, token); 
4833   21EA             ; --- START FUNCTION CALL
4834   21EA 3B 65 4E      mov d, _token_data ; $token
4835   21ED 2D            mov b, d
4836   21EE 38 00 00      mov c, 0
4837   21F1 FD AB         swp b
4838   21F3 D8            push b
4839   21F4 FA E1 FF      lea d, [bp + -31] ; $label_name
4840   21F7 2D            mov b, d
4841   21F8 38 00 00      mov c, 0
4842   21FB FD AB         swp b
4843   21FD D8            push b
4844   21FE 07 C5 4B      call strcpy
4845   2201 51 04 00      add sp, 4
4846   2204             ; --- END FUNCTION CALL
4847   2204             ; declare_label(label_name, pc); 
4848   2204             ; --- START FUNCTION CALL
4849   2204 3B 5C 4E      mov d, _pc ; $pc
4850   2207 2A            mov b, [d]
4851   2208 38 00 00      mov c, 0
4852   220B FD AB         swp b
4853   220D D8            push b
4854   220E FA E1 FF      lea d, [bp + -31] ; $label_name
4855   2211 2D            mov b, d
4856   2212 38 00 00      mov c, 0
4857   2215 FD AB         swp b
4858   2217 D8            push b
4859   2218 07 23 22      call declare_label
4860   221B 51 04 00      add sp, 4
4861   221E             ; --- END FUNCTION CALL
4862   221E             ; get(); // get ':' 
4863   221E             ; --- START FUNCTION CALL
4864   221E 07 92 2B      call get
4865   2221 F9            leave
4866   2222 09            ret
4867   2223             
4868   2223             declare_label:
4869   2223 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4870   2226             ; int i; 
4871   2226 52 02 00      sub sp, 2
4872   2229             ; for(i = 0; i <  16          ; i++){ 
4873   2229             _for129_init:
4874   2229 FA FF FF      lea d, [bp + -1] ; $i
4875   222C DA            push d
4876   222D FD 2E 00 00   mov32 cb, $00000000
4876   2231 00 00 
4877   2233 E7            pop d
4878   2234 FD 43         mov [d], b
4879   2236             _for129_cond:
4880   2236 FA FF FF      lea d, [bp + -1] ; $i
4881   2239 2A            mov b, [d]
4882   223A 38 00 00      mov c, 0
4883   223D             ; --- START RELATIONAL
4884   223D D7            push a
4885   223E 11            mov a, b
4886   223F FD 2E 10 00   mov32 cb, $00000010
4886   2243 00 00 
4887   2245 B0            cmp a, b
4888   2246 FD 73         slt ; < (signed)
4889   2248 E4            pop a
4890   2249             ; --- END RELATIONAL
4891   2249 C0 00 00      cmp b, 0
4892   224C C6 E6 22      je _for129_exit
4893   224F             _for129_block:
4894   224F             ; if(!label_table[i].name[0]){ 
4895   224F             _if130_cond:
4896   224F 3B 3A 4D      mov d, _label_table_data ; $label_table
4897   2252 D7            push a
4898   2253 DA            push d
4899   2254 FA FF FF      lea d, [bp + -1] ; $i
4900   2257 2A            mov b, [d]
4901   2258 38 00 00      mov c, 0
4902   225B E7            pop d
4903   225C FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4904   2260 E4            pop a
4905   2261 58 00 00      add d, 0
4906   2264 D7            push a
4907   2265 DA            push d
4908   2266 FD 2E 00 00   mov32 cb, $00000000
4908   226A 00 00 
4909   226C E7            pop d
4910   226D 5A            add d, b
4911   226E E4            pop a
4912   226F 32            mov bl, [d]
4913   2270 A7 00         mov bh, 0
4914   2272 38 00 00      mov c, 0
4915   2275 C0 00 00      cmp b, 0
4916   2278 C6 D3 22      je _if130_exit
4917   227B             _if130_TRUE:
4918   227B             ; strcpy(label_table[i].name, name); 
4919   227B             ; --- START FUNCTION CALL
4920   227B FA 05 00      lea d, [bp + 5] ; $name
4921   227E 2A            mov b, [d]
4922   227F 38 00 00      mov c, 0
4923   2282 FD AB         swp b
4924   2284 D8            push b
4925   2285 3B 3A 4D      mov d, _label_table_data ; $label_table
4926   2288 D7            push a
4927   2289 DA            push d
4928   228A FA FF FF      lea d, [bp + -1] ; $i
4929   228D 2A            mov b, [d]
4930   228E 38 00 00      mov c, 0
4931   2291 E7            pop d
4932   2292 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4933   2296 E4            pop a
4934   2297 58 00 00      add d, 0
4935   229A 2D            mov b, d
4936   229B 38 00 00      mov c, 0
4937   229E FD AB         swp b
4938   22A0 D8            push b
4939   22A1 07 C5 4B      call strcpy
4940   22A4 51 04 00      add sp, 4
4941   22A7             ; --- END FUNCTION CALL
4942   22A7             ; label_table[i].address = address; 
4943   22A7 3B 3A 4D      mov d, _label_table_data ; $label_table
4944   22AA D7            push a
4945   22AB DA            push d
4946   22AC FA FF FF      lea d, [bp + -1] ; $i
4947   22AF 2A            mov b, [d]
4948   22B0 38 00 00      mov c, 0
4949   22B3 E7            pop d
4950   22B4 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4951   22B8 E4            pop a
4952   22B9 58 10 00      add d, 16
4953   22BC DA            push d
4954   22BD FA 07 00      lea d, [bp + 7] ; $address
4955   22C0 2A            mov b, [d]
4956   22C1 38 00 00      mov c, 0
4957   22C4 E7            pop d
4958   22C5 FD 43         mov [d], b
4959   22C7             ; return i; 
4960   22C7 FA FF FF      lea d, [bp + -1] ; $i
4961   22CA 2A            mov b, [d]
4962   22CB 38 00 00      mov c, 0
4963   22CE F9            leave
4964   22CF 09            ret
4965   22D0 0A D3 22      jmp _if130_exit
4966   22D3             _if130_exit:
4967   22D3             _for129_update:
4968   22D3 FA FF FF      lea d, [bp + -1] ; $i
4969   22D6 2A            mov b, [d]
4970   22D7 38 00 00      mov c, 0
4971   22DA 11            mov a, b
4972   22DB FD 77         inc b
4973   22DD FA FF FF      lea d, [bp + -1] ; $i
4974   22E0 FD 43         mov [d], b
4975   22E2 27            mov b, a
4976   22E3 0A 36 22      jmp _for129_cond
4977   22E6             _for129_exit:
4978   22E6 F9            leave
4979   22E7 09            ret
4980   22E8             
4981   22E8             get_label_addr:
4982   22E8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4983   22EB             ; int i; 
4984   22EB 52 02 00      sub sp, 2
4985   22EE             ; for(i = 0; i <  16          ; i++){ 
4986   22EE             _for131_init:
4987   22EE FA FF FF      lea d, [bp + -1] ; $i
4988   22F1 DA            push d
4989   22F2 FD 2E 00 00   mov32 cb, $00000000
4989   22F6 00 00 
4990   22F8 E7            pop d
4991   22F9 FD 43         mov [d], b
4992   22FB             _for131_cond:
4993   22FB FA FF FF      lea d, [bp + -1] ; $i
4994   22FE 2A            mov b, [d]
4995   22FF 38 00 00      mov c, 0
4996   2302             ; --- START RELATIONAL
4997   2302 D7            push a
4998   2303 11            mov a, b
4999   2304 FD 2E 10 00   mov32 cb, $00000010
4999   2308 00 00 
5000   230A B0            cmp a, b
5001   230B FD 73         slt ; < (signed)
5002   230D E4            pop a
5003   230E             ; --- END RELATIONAL
5004   230E C0 00 00      cmp b, 0
5005   2311 C6 77 23      je _for131_exit
5006   2314             _for131_block:
5007   2314             ; if(!strcmp(label_table[i].name, name)){ 
5008   2314             _if132_cond:
5009   2314             ; --- START FUNCTION CALL
5010   2314 FA 05 00      lea d, [bp + 5] ; $name
5011   2317 2A            mov b, [d]
5012   2318 38 00 00      mov c, 0
5013   231B FD AB         swp b
5014   231D D8            push b
5015   231E 3B 3A 4D      mov d, _label_table_data ; $label_table
5016   2321 D7            push a
5017   2322 DA            push d
5018   2323 FA FF FF      lea d, [bp + -1] ; $i
5019   2326 2A            mov b, [d]
5020   2327 38 00 00      mov c, 0
5021   232A E7            pop d
5022   232B FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5023   232F E4            pop a
5024   2330 58 00 00      add d, 0
5025   2333 2D            mov b, d
5026   2334 38 00 00      mov c, 0
5027   2337 FD AB         swp b
5028   2339 D8            push b
5029   233A 07 EC 48      call strcmp
5030   233D 51 04 00      add sp, 4
5031   2340             ; --- END FUNCTION CALL
5032   2340 C0 00 00      cmp b, 0
5033   2343 C6 64 23      je _if132_exit
5034   2346             _if132_TRUE:
5035   2346             ; return label_table[i].address; 
5036   2346 3B 3A 4D      mov d, _label_table_data ; $label_table
5037   2349 D7            push a
5038   234A DA            push d
5039   234B FA FF FF      lea d, [bp + -1] ; $i
5040   234E 2A            mov b, [d]
5041   234F 38 00 00      mov c, 0
5042   2352 E7            pop d
5043   2353 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5044   2357 E4            pop a
5045   2358 58 10 00      add d, 16
5046   235B 2A            mov b, [d]
5047   235C 38 00 00      mov c, 0
5048   235F F9            leave
5049   2360 09            ret
5050   2361 0A 64 23      jmp _if132_exit
5051   2364             _if132_exit:
5052   2364             _for131_update:
5053   2364 FA FF FF      lea d, [bp + -1] ; $i
5054   2367 2A            mov b, [d]
5055   2368 38 00 00      mov c, 0
5056   236B 11            mov a, b
5057   236C FD 77         inc b
5058   236E FA FF FF      lea d, [bp + -1] ; $i
5059   2371 FD 43         mov [d], b
5060   2373 27            mov b, a
5061   2374 0A FB 22      jmp _for131_cond
5062   2377             _for131_exit:
5063   2377             ; error_s("Label does not exist: ", name); 
5064   2377             ; --- START FUNCTION CALL
5065   2377 FA 05 00      lea d, [bp + 5] ; $name
5066   237A 2A            mov b, [d]
5067   237B 38 00 00      mov c, 0
5068   237E FD AB         swp b
5069   2380 D8            push b
5070   2381 26 C8 52      mov b, _s74 ; "Label does not exist: "
5071   2384 FD AB         swp b
5072   2386 D8            push b
5073   2387 07 C2 39      call error_s
5074   238A 51 04 00      add sp, 4
5075   238D             ; --- END FUNCTION CALL
5076   238D F9            leave
5077   238E 09            ret
5078   238F             
5079   238F             label_exists:
5080   238F F8 00 00      enter 0 ; (push bp; mov bp, sp)
5081   2392             ; int i; 
5082   2392 52 02 00      sub sp, 2
5083   2395             ; for(i = 0; i <  16          ; i++){ 
5084   2395             _for133_init:
5085   2395 FA FF FF      lea d, [bp + -1] ; $i
5086   2398 DA            push d
5087   2399 FD 2E 00 00   mov32 cb, $00000000
5087   239D 00 00 
5088   239F E7            pop d
5089   23A0 FD 43         mov [d], b
5090   23A2             _for133_cond:
5091   23A2 FA FF FF      lea d, [bp + -1] ; $i
5092   23A5 2A            mov b, [d]
5093   23A6 38 00 00      mov c, 0
5094   23A9             ; --- START RELATIONAL
5095   23A9 D7            push a
5096   23AA 11            mov a, b
5097   23AB FD 2E 10 00   mov32 cb, $00000010
5097   23AF 00 00 
5098   23B1 B0            cmp a, b
5099   23B2 FD 73         slt ; < (signed)
5100   23B4 E4            pop a
5101   23B5             ; --- END RELATIONAL
5102   23B5 C0 00 00      cmp b, 0
5103   23B8 C6 0C 24      je _for133_exit
5104   23BB             _for133_block:
5105   23BB             ; if(!strcmp(label_table[i].name, name)){ 
5106   23BB             _if134_cond:
5107   23BB             ; --- START FUNCTION CALL
5108   23BB FA 05 00      lea d, [bp + 5] ; $name
5109   23BE 2A            mov b, [d]
5110   23BF 38 00 00      mov c, 0
5111   23C2 FD AB         swp b
5112   23C4 D8            push b
5113   23C5 3B 3A 4D      mov d, _label_table_data ; $label_table
5114   23C8 D7            push a
5115   23C9 DA            push d
5116   23CA FA FF FF      lea d, [bp + -1] ; $i
5117   23CD 2A            mov b, [d]
5118   23CE 38 00 00      mov c, 0
5119   23D1 E7            pop d
5120   23D2 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5121   23D6 E4            pop a
5122   23D7 58 00 00      add d, 0
5123   23DA 2D            mov b, d
5124   23DB 38 00 00      mov c, 0
5125   23DE FD AB         swp b
5126   23E0 D8            push b
5127   23E1 07 EC 48      call strcmp
5128   23E4 51 04 00      add sp, 4
5129   23E7             ; --- END FUNCTION CALL
5130   23E7 C0 00 00      cmp b, 0
5131   23EA C6 F9 23      je _if134_exit
5132   23ED             _if134_TRUE:
5133   23ED             ; return i; 
5134   23ED FA FF FF      lea d, [bp + -1] ; $i
5135   23F0 2A            mov b, [d]
5136   23F1 38 00 00      mov c, 0
5137   23F4 F9            leave
5138   23F5 09            ret
5139   23F6 0A F9 23      jmp _if134_exit
5140   23F9             _if134_exit:
5141   23F9             _for133_update:
5142   23F9 FA FF FF      lea d, [bp + -1] ; $i
5143   23FC 2A            mov b, [d]
5144   23FD 38 00 00      mov c, 0
5145   2400 11            mov a, b
5146   2401 FD 77         inc b
5147   2403 FA FF FF      lea d, [bp + -1] ; $i
5148   2406 FD 43         mov [d], b
5149   2408 27            mov b, a
5150   2409 0A A2 23      jmp _for133_cond
5151   240C             _for133_exit:
5152   240C             ; return -1; 
5153   240C FD 2E FF FF   mov32 cb, $ffffffff
5153   2410 FF FF 
5154   2412 F9            leave
5155   2413 09            ret
5156   2414             
5157   2414             search_opcode:
5158   2414 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5159   2417             ; char opcode_str[24]; 
5160   2417 52 18 00      sub sp, 24
5161   241A             ; char opcode_hex[5]; 
5162   241A 52 05 00      sub sp, 5
5163   241D             ; char *hex_p; 
5164   241D 52 02 00      sub sp, 2
5165   2420             ; char *op_p; 
5166   2420 52 02 00      sub sp, 2
5167   2423             ; char *tbl_p; 
5168   2423 52 02 00      sub sp, 2
5169   2426             ; struct t_opcode return_opcode; 
5170   2426 52 1A 00      sub sp, 26
5171   2429             ; tbl_p = opcode_table; 
5172   2429 FA DE FF      lea d, [bp + -34] ; $tbl_p
5173   242C DA            push d
5174   242D 3B AD 4F      mov d, _opcode_table ; $opcode_table
5175   2430 2A            mov b, [d]
5176   2431 38 00 00      mov c, 0
5177   2434 E7            pop d
5178   2435 FD 43         mov [d], b
5179   2437             ; for(;;){ 
5180   2437             _for135_init:
5181   2437             _for135_cond:
5182   2437             _for135_block:
5183   2437             ; op_p = opcode_str; 
5184   2437 FA E0 FF      lea d, [bp + -32] ; $op_p
5185   243A DA            push d
5186   243B FA E9 FF      lea d, [bp + -23] ; $opcode_str
5187   243E 2D            mov b, d
5188   243F 38 00 00      mov c, 0
5189   2442 E7            pop d
5190   2443 FD 43         mov [d], b
5191   2445             ; hex_p = opcode_hex; 
5192   2445 FA E2 FF      lea d, [bp + -30] ; $hex_p
5193   2448 DA            push d
5194   2449 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5195   244C 2D            mov b, d
5196   244D 38 00 00      mov c, 0
5197   2450 E7            pop d
5198   2451 FD 43         mov [d], b
5199   2453             ; while(*tbl_p != ' ') *op_p++ = *tbl_p++; 
5200   2453             _while136_cond:
5201   2453 FA DE FF      lea d, [bp + -34] ; $tbl_p
5202   2456 2A            mov b, [d]
5203   2457 38 00 00      mov c, 0
5204   245A 74            mov d, b
5205   245B 32            mov bl, [d]
5206   245C A7 00         mov bh, 0
5207   245E 38 00 00      mov c, 0
5208   2461             ; --- START RELATIONAL
5209   2461 D7            push a
5210   2462 11            mov a, b
5211   2463 FD 2E 20 00   mov32 cb, $00000020
5211   2467 00 00 
5212   2469 B0            cmp a, b
5213   246A FD 72         sneq ; !=
5214   246C E4            pop a
5215   246D             ; --- END RELATIONAL
5216   246D C0 00 00      cmp b, 0
5217   2470 C6 A1 24      je _while136_exit
5218   2473             _while136_block:
5219   2473             ; *op_p++ = *tbl_p++; 
5220   2473 FA E0 FF      lea d, [bp + -32] ; $op_p
5221   2476 2A            mov b, [d]
5222   2477 38 00 00      mov c, 0
5223   247A FD 77         inc b
5224   247C FA E0 FF      lea d, [bp + -32] ; $op_p
5225   247F FD 43         mov [d], b
5226   2481 FD 7D         dec b
5227   2483 D8            push b
5228   2484 FA DE FF      lea d, [bp + -34] ; $tbl_p
5229   2487 2A            mov b, [d]
5230   2488 38 00 00      mov c, 0
5231   248B FD 77         inc b
5232   248D FA DE FF      lea d, [bp + -34] ; $tbl_p
5233   2490 FD 43         mov [d], b
5234   2492 FD 7D         dec b
5235   2494 74            mov d, b
5236   2495 32            mov bl, [d]
5237   2496 A7 00         mov bh, 0
5238   2498 38 00 00      mov c, 0
5239   249B E7            pop d
5240   249C FD 3E         mov [d], bl
5241   249E 0A 53 24      jmp _while136_cond
5242   24A1             _while136_exit:
5243   24A1             ; *op_p++ = *tbl_p++; 
5244   24A1 FA E0 FF      lea d, [bp + -32] ; $op_p
5245   24A4 2A            mov b, [d]
5246   24A5 38 00 00      mov c, 0
5247   24A8 FD 77         inc b
5248   24AA FA E0 FF      lea d, [bp + -32] ; $op_p
5249   24AD FD 43         mov [d], b
5250   24AF FD 7D         dec b
5251   24B1 D8            push b
5252   24B2 FA DE FF      lea d, [bp + -34] ; $tbl_p
5253   24B5 2A            mov b, [d]
5254   24B6 38 00 00      mov c, 0
5255   24B9 FD 77         inc b
5256   24BB FA DE FF      lea d, [bp + -34] ; $tbl_p
5257   24BE FD 43         mov [d], b
5258   24C0 FD 7D         dec b
5259   24C2 74            mov d, b
5260   24C3 32            mov bl, [d]
5261   24C4 A7 00         mov bh, 0
5262   24C6 38 00 00      mov c, 0
5263   24C9 E7            pop d
5264   24CA FD 3E         mov [d], bl
5265   24CC             ; while(*tbl_p != ' ') *op_p++ = *tbl_p++; 
5266   24CC             _while137_cond:
5267   24CC FA DE FF      lea d, [bp + -34] ; $tbl_p
5268   24CF 2A            mov b, [d]
5269   24D0 38 00 00      mov c, 0
5270   24D3 74            mov d, b
5271   24D4 32            mov bl, [d]
5272   24D5 A7 00         mov bh, 0
5273   24D7 38 00 00      mov c, 0
5274   24DA             ; --- START RELATIONAL
5275   24DA D7            push a
5276   24DB 11            mov a, b
5277   24DC FD 2E 20 00   mov32 cb, $00000020
5277   24E0 00 00 
5278   24E2 B0            cmp a, b
5279   24E3 FD 72         sneq ; !=
5280   24E5 E4            pop a
5281   24E6             ; --- END RELATIONAL
5282   24E6 C0 00 00      cmp b, 0
5283   24E9 C6 1A 25      je _while137_exit
5284   24EC             _while137_block:
5285   24EC             ; *op_p++ = *tbl_p++; 
5286   24EC FA E0 FF      lea d, [bp + -32] ; $op_p
5287   24EF 2A            mov b, [d]
5288   24F0 38 00 00      mov c, 0
5289   24F3 FD 77         inc b
5290   24F5 FA E0 FF      lea d, [bp + -32] ; $op_p
5291   24F8 FD 43         mov [d], b
5292   24FA FD 7D         dec b
5293   24FC D8            push b
5294   24FD FA DE FF      lea d, [bp + -34] ; $tbl_p
5295   2500 2A            mov b, [d]
5296   2501 38 00 00      mov c, 0
5297   2504 FD 77         inc b
5298   2506 FA DE FF      lea d, [bp + -34] ; $tbl_p
5299   2509 FD 43         mov [d], b
5300   250B FD 7D         dec b
5301   250D 74            mov d, b
5302   250E 32            mov bl, [d]
5303   250F A7 00         mov bh, 0
5304   2511 38 00 00      mov c, 0
5305   2514 E7            pop d
5306   2515 FD 3E         mov [d], bl
5307   2517 0A CC 24      jmp _while137_cond
5308   251A             _while137_exit:
5309   251A             ; *op_p = '\0'; 
5310   251A FA E0 FF      lea d, [bp + -32] ; $op_p
5311   251D 2A            mov b, [d]
5312   251E 38 00 00      mov c, 0
5313   2521 D8            push b
5314   2522 FD 2E 00 00   mov32 cb, $00000000
5314   2526 00 00 
5315   2528 E7            pop d
5316   2529 FD 3E         mov [d], bl
5317   252B             ; if(!strcmp(opcode_str, what_opcode)){ 
5318   252B             _if138_cond:
5319   252B             ; --- START FUNCTION CALL
5320   252B FA 05 00      lea d, [bp + 5] ; $what_opcode
5321   252E 2A            mov b, [d]
5322   252F 38 00 00      mov c, 0
5323   2532 FD AB         swp b
5324   2534 D8            push b
5325   2535 FA E9 FF      lea d, [bp + -23] ; $opcode_str
5326   2538 2D            mov b, d
5327   2539 38 00 00      mov c, 0
5328   253C FD AB         swp b
5329   253E D8            push b
5330   253F 07 EC 48      call strcmp
5331   2542 51 04 00      add sp, 4
5332   2545             ; --- END FUNCTION CALL
5333   2545 C0 00 00      cmp b, 0
5334   2548 C6 95 26      je _if138_else
5335   254B             _if138_TRUE:
5336   254B             ; strcpy(return_opcode.name, what_opcode); 
5337   254B             ; --- START FUNCTION CALL
5338   254B FA 05 00      lea d, [bp + 5] ; $what_opcode
5339   254E 2A            mov b, [d]
5340   254F 38 00 00      mov c, 0
5341   2552 FD AB         swp b
5342   2554 D8            push b
5343   2555 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5344   2558 58 00 00      add d, 0
5345   255B 2D            mov b, d
5346   255C 38 00 00      mov c, 0
5347   255F FD AB         swp b
5348   2561 D8            push b
5349   2562 07 C5 4B      call strcpy
5350   2565 51 04 00      add sp, 4
5351   2568             ; --- END FUNCTION CALL
5352   2568             ; while(*tbl_p == ' ') tbl_p++; 
5353   2568             _while139_cond:
5354   2568 FA DE FF      lea d, [bp + -34] ; $tbl_p
5355   256B 2A            mov b, [d]
5356   256C 38 00 00      mov c, 0
5357   256F 74            mov d, b
5358   2570 32            mov bl, [d]
5359   2571 A7 00         mov bh, 0
5360   2573 38 00 00      mov c, 0
5361   2576             ; --- START RELATIONAL
5362   2576 D7            push a
5363   2577 11            mov a, b
5364   2578 FD 2E 20 00   mov32 cb, $00000020
5364   257C 00 00 
5365   257E B0            cmp a, b
5366   257F FD 71         seq ; ==
5367   2581 E4            pop a
5368   2582             ; --- END RELATIONAL
5369   2582 C0 00 00      cmp b, 0
5370   2585 C6 9B 25      je _while139_exit
5371   2588             _while139_block:
5372   2588             ; tbl_p++; 
5373   2588 FA DE FF      lea d, [bp + -34] ; $tbl_p
5374   258B 2A            mov b, [d]
5375   258C 38 00 00      mov c, 0
5376   258F FD 77         inc b
5377   2591 FA DE FF      lea d, [bp + -34] ; $tbl_p
5378   2594 FD 43         mov [d], b
5379   2596 FD 7D         dec b
5380   2598 0A 68 25      jmp _while139_cond
5381   259B             _while139_exit:
5382   259B             ; while(is_hex_digit(*tbl_p)) *hex_p++ = *tbl_p++; // Copy hex opcode 
5383   259B             _while140_cond:
5384   259B             ; --- START FUNCTION CALL
5385   259B FA DE FF      lea d, [bp + -34] ; $tbl_p
5386   259E 2A            mov b, [d]
5387   259F 38 00 00      mov c, 0
5388   25A2 74            mov d, b
5389   25A3 32            mov bl, [d]
5390   25A4 A7 00         mov bh, 0
5391   25A6 38 00 00      mov c, 0
5392   25A9 DD            push bl
5393   25AA 07 DB 29      call is_hex_digit
5394   25AD 51 01 00      add sp, 1
5395   25B0             ; --- END FUNCTION CALL
5396   25B0 C0 00 00      cmp b, 0
5397   25B3 C6 E4 25      je _while140_exit
5398   25B6             _while140_block:
5399   25B6             ; *hex_p++ = *tbl_p++; // Copy hex opcode 
5400   25B6 FA E2 FF      lea d, [bp + -30] ; $hex_p
5401   25B9 2A            mov b, [d]
5402   25BA 38 00 00      mov c, 0
5403   25BD FD 77         inc b
5404   25BF FA E2 FF      lea d, [bp + -30] ; $hex_p
5405   25C2 FD 43         mov [d], b
5406   25C4 FD 7D         dec b
5407   25C6 D8            push b
5408   25C7 FA DE FF      lea d, [bp + -34] ; $tbl_p
5409   25CA 2A            mov b, [d]
5410   25CB 38 00 00      mov c, 0
5411   25CE FD 77         inc b
5412   25D0 FA DE FF      lea d, [bp + -34] ; $tbl_p
5413   25D3 FD 43         mov [d], b
5414   25D5 FD 7D         dec b
5415   25D7 74            mov d, b
5416   25D8 32            mov bl, [d]
5417   25D9 A7 00         mov bh, 0
5418   25DB 38 00 00      mov c, 0
5419   25DE E7            pop d
5420   25DF FD 3E         mov [d], bl
5421   25E1 0A 9B 25      jmp _while140_cond
5422   25E4             _while140_exit:
5423   25E4             ; *hex_p = '\0'; 
5424   25E4 FA E2 FF      lea d, [bp + -30] ; $hex_p
5425   25E7 2A            mov b, [d]
5426   25E8 38 00 00      mov c, 0
5427   25EB D8            push b
5428   25EC FD 2E 00 00   mov32 cb, $00000000
5428   25F0 00 00 
5429   25F2 E7            pop d
5430   25F3 FD 3E         mov [d], bl
5431   25F5             ; if(strlen(opcode_hex) == 4){ 
5432   25F5             _if141_cond:
5433   25F5             ; --- START FUNCTION CALL
5434   25F5 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5435   25F8 2D            mov b, d
5436   25F9 38 00 00      mov c, 0
5437   25FC FD AB         swp b
5438   25FE D8            push b
5439   25FF 07 70 49      call strlen
5440   2602 51 02 00      add sp, 2
5441   2605             ; --- END FUNCTION CALL
5442   2605             ; --- START RELATIONAL
5443   2605 D7            push a
5444   2606 11            mov a, b
5445   2607 FD 2E 04 00   mov32 cb, $00000004
5445   260B 00 00 
5446   260D B0            cmp a, b
5447   260E FD 71         seq ; ==
5448   2610 E4            pop a
5449   2611             ; --- END RELATIONAL
5450   2611 C0 00 00      cmp b, 0
5451   2614 C6 5F 26      je _if141_else
5452   2617             _if141_TRUE:
5453   2617             ; return_opcode.opcode_type = 1; 
5454   2617 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5455   261A 58 19 00      add d, 25
5456   261D DA            push d
5457   261E FD 2E 01 00   mov32 cb, $00000001
5457   2622 00 00 
5458   2624 E7            pop d
5459   2625 FD 3E         mov [d], bl
5460   2627             ; *(opcode_hex + 2) = '\0'; 
5461   2627 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5462   262A 2D            mov b, d
5463   262B 38 00 00      mov c, 0
5464   262E             ; --- START TERMS
5465   262E D7            push a
5466   262F 11            mov a, b
5467   2630 FD 2E 02 00   mov32 cb, $00000002
5467   2634 00 00 
5468   2636 56            add b, a
5469   2637 E4            pop a
5470   2638             ; --- END TERMS
5471   2638 D8            push b
5472   2639 FD 2E 00 00   mov32 cb, $00000000
5472   263D 00 00 
5473   263F E7            pop d
5474   2640 FD 43         mov [d], b
5475   2642             ; return_opcode.opcode = hex_to_int(opcode_hex); 
5476   2642 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5477   2645 58 18 00      add d, 24
5478   2648 DA            push d
5479   2649             ; --- START FUNCTION CALL
5480   2649 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5481   264C 2D            mov b, d
5482   264D 38 00 00      mov c, 0
5483   2650 FD AB         swp b
5484   2652 D8            push b
5485   2653 07 59 3B      call hex_to_int
5486   2656 51 02 00      add sp, 2
5487   2659             ; --- END FUNCTION CALL
5488   2659 E7            pop d
5489   265A FD 3E         mov [d], bl
5490   265C 0A 89 26      jmp _if141_exit
5491   265F             _if141_else:
5492   265F             ; return_opcode.opcode_type = 0; 
5493   265F FA C4 FF      lea d, [bp + -60] ; $return_opcode
5494   2662 58 19 00      add d, 25
5495   2665 DA            push d
5496   2666 FD 2E 00 00   mov32 cb, $00000000
5496   266A 00 00 
5497   266C E7            pop d
5498   266D FD 3E         mov [d], bl
5499   266F             ; return_opcode.opcode = hex_to_int(opcode_hex); 
5500   266F FA C4 FF      lea d, [bp + -60] ; $return_opcode
5501   2672 58 18 00      add d, 24
5502   2675 DA            push d
5503   2676             ; --- START FUNCTION CALL
5504   2676 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5505   2679 2D            mov b, d
5506   267A 38 00 00      mov c, 0
5507   267D FD AB         swp b
5508   267F D8            push b
5509   2680 07 59 3B      call hex_to_int
5510   2683 51 02 00      add sp, 2
5511   2686             ; --- END FUNCTION CALL
5512   2686 E7            pop d
5513   2687 FD 3E         mov [d], bl
5514   2689             _if141_exit:
5515   2689             ; return return_opcode; 
5516   2689 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5517   268C 2D            mov b, d
5518   268D 38 00 00      mov c, 0
5519   2690 F9            leave
5520   2691 09            ret
5521   2692 0A 1A 27      jmp _if138_exit
5522   2695             _if138_else:
5523   2695             ; while(*tbl_p != '\n') tbl_p++; 
5524   2695             _while142_cond:
5525   2695 FA DE FF      lea d, [bp + -34] ; $tbl_p
5526   2698 2A            mov b, [d]
5527   2699 38 00 00      mov c, 0
5528   269C 74            mov d, b
5529   269D 32            mov bl, [d]
5530   269E A7 00         mov bh, 0
5531   26A0 38 00 00      mov c, 0
5532   26A3             ; --- START RELATIONAL
5533   26A3 D7            push a
5534   26A4 11            mov a, b
5535   26A5 FD 2E 0A 00   mov32 cb, $0000000a
5535   26A9 00 00 
5536   26AB B0            cmp a, b
5537   26AC FD 72         sneq ; !=
5538   26AE E4            pop a
5539   26AF             ; --- END RELATIONAL
5540   26AF C0 00 00      cmp b, 0
5541   26B2 C6 C8 26      je _while142_exit
5542   26B5             _while142_block:
5543   26B5             ; tbl_p++; 
5544   26B5 FA DE FF      lea d, [bp + -34] ; $tbl_p
5545   26B8 2A            mov b, [d]
5546   26B9 38 00 00      mov c, 0
5547   26BC FD 77         inc b
5548   26BE FA DE FF      lea d, [bp + -34] ; $tbl_p
5549   26C1 FD 43         mov [d], b
5550   26C3 FD 7D         dec b
5551   26C5 0A 95 26      jmp _while142_cond
5552   26C8             _while142_exit:
5553   26C8             ; while(*tbl_p == '\n') tbl_p++; 
5554   26C8             _while143_cond:
5555   26C8 FA DE FF      lea d, [bp + -34] ; $tbl_p
5556   26CB 2A            mov b, [d]
5557   26CC 38 00 00      mov c, 0
5558   26CF 74            mov d, b
5559   26D0 32            mov bl, [d]
5560   26D1 A7 00         mov bh, 0
5561   26D3 38 00 00      mov c, 0
5562   26D6             ; --- START RELATIONAL
5563   26D6 D7            push a
5564   26D7 11            mov a, b
5565   26D8 FD 2E 0A 00   mov32 cb, $0000000a
5565   26DC 00 00 
5566   26DE B0            cmp a, b
5567   26DF FD 71         seq ; ==
5568   26E1 E4            pop a
5569   26E2             ; --- END RELATIONAL
5570   26E2 C0 00 00      cmp b, 0
5571   26E5 C6 FB 26      je _while143_exit
5572   26E8             _while143_block:
5573   26E8             ; tbl_p++; 
5574   26E8 FA DE FF      lea d, [bp + -34] ; $tbl_p
5575   26EB 2A            mov b, [d]
5576   26EC 38 00 00      mov c, 0
5577   26EF FD 77         inc b
5578   26F1 FA DE FF      lea d, [bp + -34] ; $tbl_p
5579   26F4 FD 43         mov [d], b
5580   26F6 FD 7D         dec b
5581   26F8 0A C8 26      jmp _while143_cond
5582   26FB             _while143_exit:
5583   26FB             ; if(!*tbl_p) break; 
5584   26FB             _if144_cond:
5585   26FB FA DE FF      lea d, [bp + -34] ; $tbl_p
5586   26FE 2A            mov b, [d]
5587   26FF 38 00 00      mov c, 0
5588   2702 74            mov d, b
5589   2703 32            mov bl, [d]
5590   2704 A7 00         mov bh, 0
5591   2706 38 00 00      mov c, 0
5592   2709 C0 00 00      cmp b, 0
5593   270C FD 71         seq ; !
5594   270E C0 00 00      cmp b, 0
5595   2711 C6 1A 27      je _if144_exit
5596   2714             _if144_TRUE:
5597   2714             ; break; 
5598   2714 0A 1D 27      jmp _for135_exit ; for break
5599   2717 0A 1A 27      jmp _if144_exit
5600   271A             _if144_exit:
5601   271A             _if138_exit:
5602   271A             _for135_update:
5603   271A 0A 37 24      jmp _for135_cond
5604   271D             _for135_exit:
5605   271D             ; return_opcode.name[0] = '\0'; 
5606   271D FA C4 FF      lea d, [bp + -60] ; $return_opcode
5607   2720 58 00 00      add d, 0
5608   2723 D7            push a
5609   2724 DA            push d
5610   2725 FD 2E 00 00   mov32 cb, $00000000
5610   2729 00 00 
5611   272B E7            pop d
5612   272C 5A            add d, b
5613   272D E4            pop a
5614   272E DA            push d
5615   272F FD 2E 00 00   mov32 cb, $00000000
5615   2733 00 00 
5616   2735 E7            pop d
5617   2736 FD 3E         mov [d], bl
5618   2738             ; return return_opcode; 
5619   2738 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5620   273B 2D            mov b, d
5621   273C 38 00 00      mov c, 0
5622   273F F9            leave
5623   2740 09            ret
5624   2741             
5625   2741             forwards:
5626   2741 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5627   2744             ; bin_p = bin_p + amount; 
5628   2744 3B AB 4F      mov d, _bin_p ; $bin_p
5629   2747 DA            push d
5630   2748 3B AB 4F      mov d, _bin_p ; $bin_p
5631   274B 2A            mov b, [d]
5632   274C 38 00 00      mov c, 0
5633   274F             ; --- START TERMS
5634   274F D7            push a
5635   2750 11            mov a, b
5636   2751 FA 05 00      lea d, [bp + 5] ; $amount
5637   2754 32            mov bl, [d]
5638   2755 A7 00         mov bh, 0
5639   2757 38 00 00      mov c, 0
5640   275A 56            add b, a
5641   275B E4            pop a
5642   275C             ; --- END TERMS
5643   275C E7            pop d
5644   275D FD 43         mov [d], b
5645   275F             ; prog_size = prog_size + amount; 
5646   275F 3B C5 4F      mov d, _prog_size ; $prog_size
5647   2762 DA            push d
5648   2763 3B C5 4F      mov d, _prog_size ; $prog_size
5649   2766 2A            mov b, [d]
5650   2767 38 00 00      mov c, 0
5651   276A             ; --- START TERMS
5652   276A D7            push a
5653   276B 11            mov a, b
5654   276C FA 05 00      lea d, [bp + 5] ; $amount
5655   276F 32            mov bl, [d]
5656   2770 A7 00         mov bh, 0
5657   2772 38 00 00      mov c, 0
5658   2775 56            add b, a
5659   2776 E4            pop a
5660   2777             ; --- END TERMS
5661   2777 E7            pop d
5662   2778 FD 43         mov [d], b
5663   277A             ; pc = pc + amount; 
5664   277A 3B 5C 4E      mov d, _pc ; $pc
5665   277D DA            push d
5666   277E 3B 5C 4E      mov d, _pc ; $pc
5667   2781 2A            mov b, [d]
5668   2782 38 00 00      mov c, 0
5669   2785             ; --- START TERMS
5670   2785 D7            push a
5671   2786 11            mov a, b
5672   2787 FA 05 00      lea d, [bp + 5] ; $amount
5673   278A 32            mov bl, [d]
5674   278B A7 00         mov bh, 0
5675   278D 38 00 00      mov c, 0
5676   2790 56            add b, a
5677   2791 E4            pop a
5678   2792             ; --- END TERMS
5679   2792 E7            pop d
5680   2793 FD 43         mov [d], b
5681   2795 F9            leave
5682   2796 09            ret
5683   2797             
5684   2797             emit_byte:
5685   2797 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5686   279A             ; if(!emit_override){ 
5687   279A             _if145_cond:
5688   279A FA 06 00      lea d, [bp + 6] ; $emit_override
5689   279D 32            mov bl, [d]
5690   279E A7 00         mov bh, 0
5691   27A0 38 00 00      mov c, 0
5692   27A3 C0 00 00      cmp b, 0
5693   27A6 C6 C0 27      je _if145_exit
5694   27A9             _if145_TRUE:
5695   27A9             ; *bin_p = byte; 
5696   27A9 3B AB 4F      mov d, _bin_p ; $bin_p
5697   27AC 2A            mov b, [d]
5698   27AD 38 00 00      mov c, 0
5699   27B0 D8            push b
5700   27B1 FA 05 00      lea d, [bp + 5] ; $byte
5701   27B4 32            mov bl, [d]
5702   27B5 A7 00         mov bh, 0
5703   27B7 38 00 00      mov c, 0
5704   27BA E7            pop d
5705   27BB FD 3E         mov [d], bl
5706   27BD 0A C0 27      jmp _if145_exit
5707   27C0             _if145_exit:
5708   27C0             ; forwards(1); 
5709   27C0             ; --- START FUNCTION CALL
5710   27C0 FD 2E 01 00   mov32 cb, $00000001
5710   27C4 00 00 
5711   27C6 DD            push bl
5712   27C7 07 41 27      call forwards
5713   27CA 51 01 00      add sp, 1
5714   27CD             ; --- END FUNCTION CALL
5715   27CD F9            leave
5716   27CE 09            ret
5717   27CF             
5718   27CF             emit_word:
5719   27CF F8 00 00      enter 0 ; (push bp; mov bp, sp)
5720   27D2             ; if(!emit_override){ 
5721   27D2             _if146_cond:
5722   27D2 FA 07 00      lea d, [bp + 7] ; $emit_override
5723   27D5 32            mov bl, [d]
5724   27D6 A7 00         mov bh, 0
5725   27D8 38 00 00      mov c, 0
5726   27DB C0 00 00      cmp b, 0
5727   27DE C6 F6 27      je _if146_exit
5728   27E1             _if146_TRUE:
5729   27E1             ; *((int*)bin_p) = word; 
5730   27E1 3B AB 4F      mov d, _bin_p ; $bin_p
5731   27E4 2A            mov b, [d]
5732   27E5 38 00 00      mov c, 0
5733   27E8 D8            push b
5734   27E9 FA 05 00      lea d, [bp + 5] ; $word
5735   27EC 2A            mov b, [d]
5736   27ED 38 00 00      mov c, 0
5737   27F0 E7            pop d
5738   27F1 FD 43         mov [d], b
5739   27F3 0A F6 27      jmp _if146_exit
5740   27F6             _if146_exit:
5741   27F6             ; forwards(2); 
5742   27F6             ; --- START FUNCTION CALL
5743   27F6 FD 2E 02 00   mov32 cb, $00000002
5743   27FA 00 00 
5744   27FC DD            push bl
5745   27FD 07 41 27      call forwards
5746   2800 51 01 00      add sp, 1
5747   2803             ; --- END FUNCTION CALL
5748   2803 F9            leave
5749   2804 09            ret
5750   2805             
5751   2805             back:
5752   2805 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5753   2808             ; char *t; 
5754   2808 52 02 00      sub sp, 2
5755   280B             ; t = token; 
5756   280B FA FF FF      lea d, [bp + -1] ; $t
5757   280E DA            push d
5758   280F 3B 65 4E      mov d, _token_data ; $token
5759   2812 2D            mov b, d
5760   2813 38 00 00      mov c, 0
5761   2816 E7            pop d
5762   2817 FD 43         mov [d], b
5763   2819             ; while(*t){ 
5764   2819             _while147_cond:
5765   2819 FA FF FF      lea d, [bp + -1] ; $t
5766   281C 2A            mov b, [d]
5767   281D 38 00 00      mov c, 0
5768   2820 74            mov d, b
5769   2821 32            mov bl, [d]
5770   2822 A7 00         mov bh, 0
5771   2824 38 00 00      mov c, 0
5772   2827 C0 00 00      cmp b, 0
5773   282A C6 50 28      je _while147_exit
5774   282D             _while147_block:
5775   282D             ; prog--; 
5776   282D 3B 63 4E      mov d, _prog ; $prog
5777   2830 2A            mov b, [d]
5778   2831 38 00 00      mov c, 0
5779   2834 FD 7D         dec b
5780   2836 3B 63 4E      mov d, _prog ; $prog
5781   2839 FD 43         mov [d], b
5782   283B FD 77         inc b
5783   283D             ; t++; 
5784   283D FA FF FF      lea d, [bp + -1] ; $t
5785   2840 2A            mov b, [d]
5786   2841 38 00 00      mov c, 0
5787   2844 FD 77         inc b
5788   2846 FA FF FF      lea d, [bp + -1] ; $t
5789   2849 FD 43         mov [d], b
5790   284B FD 7D         dec b
5791   284D 0A 19 28      jmp _while147_cond
5792   2850             _while147_exit:
5793   2850 F9            leave
5794   2851 09            ret
5795   2852             
5796   2852             get_path:
5797   2852 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5798   2855             ; char *t; 
5799   2855 52 02 00      sub sp, 2
5800   2858             ; *token = '\0'; 
5801   2858 3B 65 4E      mov d, _token_data ; $token
5802   285B 2D            mov b, d
5803   285C 38 00 00      mov c, 0
5804   285F D8            push b
5805   2860 FD 2E 00 00   mov32 cb, $00000000
5805   2864 00 00 
5806   2866 E7            pop d
5807   2867 FD 3E         mov [d], bl
5808   2869             ; tok = 0; 
5809   2869 3B 5F 4E      mov d, _tok ; $tok
5810   286C DA            push d
5811   286D FD 2E 00 00   mov32 cb, $00000000
5811   2871 00 00 
5812   2873 E7            pop d
5813   2874 FD 43         mov [d], b
5814   2876             ; toktype = 0; 
5815   2876 3B 61 4E      mov d, _toktype ; $toktype
5816   2879 DA            push d
5817   287A FD 2E 00 00   mov32 cb, $00000000
5817   287E 00 00 
5818   2880 E7            pop d
5819   2881 FD 43         mov [d], b
5820   2883             ; t = token; 
5821   2883 FA FF FF      lea d, [bp + -1] ; $t
5822   2886 DA            push d
5823   2887 3B 65 4E      mov d, _token_data ; $token
5824   288A 2D            mov b, d
5825   288B 38 00 00      mov c, 0
5826   288E E7            pop d
5827   288F FD 43         mov [d], b
5828   2891             ; while(is_space(*prog)) prog++; 
5829   2891             _while148_cond:
5830   2891             ; --- START FUNCTION CALL
5831   2891 3B 63 4E      mov d, _prog ; $prog
5832   2894 2A            mov b, [d]
5833   2895 38 00 00      mov c, 0
5834   2898 74            mov d, b
5835   2899 32            mov bl, [d]
5836   289A A7 00         mov bh, 0
5837   289C 38 00 00      mov c, 0
5838   289F DD            push bl
5839   28A0 07 D4 47      call is_space
5840   28A3 51 01 00      add sp, 1
5841   28A6             ; --- END FUNCTION CALL
5842   28A6 C0 00 00      cmp b, 0
5843   28A9 C6 BF 28      je _while148_exit
5844   28AC             _while148_block:
5845   28AC             ; prog++; 
5846   28AC 3B 63 4E      mov d, _prog ; $prog
5847   28AF 2A            mov b, [d]
5848   28B0 38 00 00      mov c, 0
5849   28B3 FD 77         inc b
5850   28B5 3B 63 4E      mov d, _prog ; $prog
5851   28B8 FD 43         mov [d], b
5852   28BA FD 7D         dec b
5853   28BC 0A 91 28      jmp _while148_cond
5854   28BF             _while148_exit:
5855   28BF             ; if(*prog == '\0'){ 
5856   28BF             _if149_cond:
5857   28BF 3B 63 4E      mov d, _prog ; $prog
5858   28C2 2A            mov b, [d]
5859   28C3 38 00 00      mov c, 0
5860   28C6 74            mov d, b
5861   28C7 32            mov bl, [d]
5862   28C8 A7 00         mov bh, 0
5863   28CA 38 00 00      mov c, 0
5864   28CD             ; --- START RELATIONAL
5865   28CD D7            push a
5866   28CE 11            mov a, b
5867   28CF FD 2E 00 00   mov32 cb, $00000000
5867   28D3 00 00 
5868   28D5 B0            cmp a, b
5869   28D6 FD 71         seq ; ==
5870   28D8 E4            pop a
5871   28D9             ; --- END RELATIONAL
5872   28D9 C0 00 00      cmp b, 0
5873   28DC C6 F1 28      je _if149_exit
5874   28DF             _if149_TRUE:
5875   28DF             ; toktype = END; 
5876   28DF 3B 61 4E      mov d, _toktype ; $toktype
5877   28E2 DA            push d
5878   28E3 FD 2E 07 00   mov32 cb, $7 ; enum element: END
5878   28E7 00 00 
5879   28E9 E7            pop d
5880   28EA FD 43         mov [d], b
5881   28EC             ; return; 
5882   28EC F9            leave
5883   28ED 09            ret
5884   28EE 0A F1 28      jmp _if149_exit
5885   28F1             _if149_exit:
5886   28F1             ; while(*prog == '/' || is_alpha(*prog) || is_digit(*prog) || *prog == '_' || *prog == '-' || *prog == '.') { 
5887   28F1             _while150_cond:
5888   28F1 3B 63 4E      mov d, _prog ; $prog
5889   28F4 2A            mov b, [d]
5890   28F5 38 00 00      mov c, 0
5891   28F8 74            mov d, b
5892   28F9 32            mov bl, [d]
5893   28FA A7 00         mov bh, 0
5894   28FC 38 00 00      mov c, 0
5895   28FF             ; --- START RELATIONAL
5896   28FF D7            push a
5897   2900 11            mov a, b
5898   2901 FD 2E 2F 00   mov32 cb, $0000002f
5898   2905 00 00 
5899   2907 B0            cmp a, b
5900   2908 FD 71         seq ; ==
5901   290A E4            pop a
5902   290B             ; --- END RELATIONAL
5903   290B             ; --- START LOGICAL OR
5904   290B D7            push a
5905   290C 11            mov a, b
5906   290D             ; --- START FUNCTION CALL
5907   290D 3B 63 4E      mov d, _prog ; $prog
5908   2910 2A            mov b, [d]
5909   2911 38 00 00      mov c, 0
5910   2914 74            mov d, b
5911   2915 32            mov bl, [d]
5912   2916 A7 00         mov bh, 0
5913   2918 38 00 00      mov c, 0
5914   291B DD            push bl
5915   291C 07 38 48      call is_alpha
5916   291F 51 01 00      add sp, 1
5917   2922             ; --- END FUNCTION CALL
5918   2922 FD A8         sor a, b ; ||
5919   2924 11            mov a, b
5920   2925             ; --- START FUNCTION CALL
5921   2925 3B 63 4E      mov d, _prog ; $prog
5922   2928 2A            mov b, [d]
5923   2929 38 00 00      mov c, 0
5924   292C 74            mov d, b
5925   292D 32            mov bl, [d]
5926   292E A7 00         mov bh, 0
5927   2930 38 00 00      mov c, 0
5928   2933 DD            push bl
5929   2934 07 B8 48      call is_digit
5930   2937 51 01 00      add sp, 1
5931   293A             ; --- END FUNCTION CALL
5932   293A FD A8         sor a, b ; ||
5933   293C 11            mov a, b
5934   293D 3B 63 4E      mov d, _prog ; $prog
5935   2940 2A            mov b, [d]
5936   2941 38 00 00      mov c, 0
5937   2944 74            mov d, b
5938   2945 32            mov bl, [d]
5939   2946 A7 00         mov bh, 0
5940   2948 38 00 00      mov c, 0
5941   294B             ; --- START RELATIONAL
5942   294B D7            push a
5943   294C 11            mov a, b
5944   294D FD 2E 5F 00   mov32 cb, $0000005f
5944   2951 00 00 
5945   2953 B0            cmp a, b
5946   2954 FD 71         seq ; ==
5947   2956 E4            pop a
5948   2957             ; --- END RELATIONAL
5949   2957 FD A8         sor a, b ; ||
5950   2959 11            mov a, b
5951   295A 3B 63 4E      mov d, _prog ; $prog
5952   295D 2A            mov b, [d]
5953   295E 38 00 00      mov c, 0
5954   2961 74            mov d, b
5955   2962 32            mov bl, [d]
5956   2963 A7 00         mov bh, 0
5957   2965 38 00 00      mov c, 0
5958   2968             ; --- START RELATIONAL
5959   2968 D7            push a
5960   2969 11            mov a, b
5961   296A FD 2E 2D 00   mov32 cb, $0000002d
5961   296E 00 00 
5962   2970 B0            cmp a, b
5963   2971 FD 71         seq ; ==
5964   2973 E4            pop a
5965   2974             ; --- END RELATIONAL
5966   2974 FD A8         sor a, b ; ||
5967   2976 11            mov a, b
5968   2977 3B 63 4E      mov d, _prog ; $prog
5969   297A 2A            mov b, [d]
5970   297B 38 00 00      mov c, 0
5971   297E 74            mov d, b
5972   297F 32            mov bl, [d]
5973   2980 A7 00         mov bh, 0
5974   2982 38 00 00      mov c, 0
5975   2985             ; --- START RELATIONAL
5976   2985 D7            push a
5977   2986 11            mov a, b
5978   2987 FD 2E 2E 00   mov32 cb, $0000002e
5978   298B 00 00 
5979   298D B0            cmp a, b
5980   298E FD 71         seq ; ==
5981   2990 E4            pop a
5982   2991             ; --- END RELATIONAL
5983   2991 FD A8         sor a, b ; ||
5984   2993 E4            pop a
5985   2994             ; --- END LOGICAL OR
5986   2994 C0 00 00      cmp b, 0
5987   2997 C6 C8 29      je _while150_exit
5988   299A             _while150_block:
5989   299A             ; *t++ = *prog++; 
5990   299A FA FF FF      lea d, [bp + -1] ; $t
5991   299D 2A            mov b, [d]
5992   299E 38 00 00      mov c, 0
5993   29A1 FD 77         inc b
5994   29A3 FA FF FF      lea d, [bp + -1] ; $t
5995   29A6 FD 43         mov [d], b
5996   29A8 FD 7D         dec b
5997   29AA D8            push b
5998   29AB 3B 63 4E      mov d, _prog ; $prog
5999   29AE 2A            mov b, [d]
6000   29AF 38 00 00      mov c, 0
6001   29B2 FD 77         inc b
6002   29B4 3B 63 4E      mov d, _prog ; $prog
6003   29B7 FD 43         mov [d], b
6004   29B9 FD 7D         dec b
6005   29BB 74            mov d, b
6006   29BC 32            mov bl, [d]
6007   29BD A7 00         mov bh, 0
6008   29BF 38 00 00      mov c, 0
6009   29C2 E7            pop d
6010   29C3 FD 3E         mov [d], bl
6011   29C5 0A F1 28      jmp _while150_cond
6012   29C8             _while150_exit:
6013   29C8             ; *t = '\0'; 
6014   29C8 FA FF FF      lea d, [bp + -1] ; $t
6015   29CB 2A            mov b, [d]
6016   29CC 38 00 00      mov c, 0
6017   29CF D8            push b
6018   29D0 FD 2E 00 00   mov32 cb, $00000000
6018   29D4 00 00 
6019   29D6 E7            pop d
6020   29D7 FD 3E         mov [d], bl
6021   29D9 F9            leave
6022   29DA 09            ret
6023   29DB             
6024   29DB             is_hex_digit:
6025   29DB F8 00 00      enter 0 ; (push bp; mov bp, sp)
6026   29DE             ; return c >= '0' && c <= '9' || c >= 'A' && c <= 'F' || c >= 'a' && c <= 'f'; 
6027   29DE FA 05 00      lea d, [bp + 5] ; $c
6028   29E1 32            mov bl, [d]
6029   29E2 A7 00         mov bh, 0
6030   29E4 38 00 00      mov c, 0
6031   29E7             ; --- START RELATIONAL
6032   29E7 D7            push a
6033   29E8 11            mov a, b
6034   29E9 FD 2E 30 00   mov32 cb, $00000030
6034   29ED 00 00 
6035   29EF B0            cmp a, b
6036   29F0 FD 80         sge ; >=
6037   29F2 E4            pop a
6038   29F3             ; --- END RELATIONAL
6039   29F3             ; --- START LOGICAL AND
6040   29F3 D7            push a
6041   29F4 11            mov a, b
6042   29F5 FA 05 00      lea d, [bp + 5] ; $c
6043   29F8 32            mov bl, [d]
6044   29F9 A7 00         mov bh, 0
6045   29FB 38 00 00      mov c, 0
6046   29FE             ; --- START RELATIONAL
6047   29FE D7            push a
6048   29FF 11            mov a, b
6049   2A00 FD 2E 39 00   mov32 cb, $00000039
6049   2A04 00 00 
6050   2A06 B0            cmp a, b
6051   2A07 FD 74         sle ; <= (signed)
6052   2A09 E4            pop a
6053   2A0A             ; --- END RELATIONAL
6054   2A0A FD A7         sand a, b
6055   2A0C E4            pop a
6056   2A0D             ; --- END LOGICAL AND
6057   2A0D             ; --- START LOGICAL OR
6058   2A0D D7            push a
6059   2A0E 11            mov a, b
6060   2A0F FA 05 00      lea d, [bp + 5] ; $c
6061   2A12 32            mov bl, [d]
6062   2A13 A7 00         mov bh, 0
6063   2A15 38 00 00      mov c, 0
6064   2A18             ; --- START RELATIONAL
6065   2A18 D7            push a
6066   2A19 11            mov a, b
6067   2A1A FD 2E 41 00   mov32 cb, $00000041
6067   2A1E 00 00 
6068   2A20 B0            cmp a, b
6069   2A21 FD 80         sge ; >=
6070   2A23 E4            pop a
6071   2A24             ; --- END RELATIONAL
6072   2A24             ; --- START LOGICAL AND
6073   2A24 D7            push a
6074   2A25 11            mov a, b
6075   2A26 FA 05 00      lea d, [bp + 5] ; $c
6076   2A29 32            mov bl, [d]
6077   2A2A A7 00         mov bh, 0
6078   2A2C 38 00 00      mov c, 0
6079   2A2F             ; --- START RELATIONAL
6080   2A2F D7            push a
6081   2A30 11            mov a, b
6082   2A31 FD 2E 46 00   mov32 cb, $00000046
6082   2A35 00 00 
6083   2A37 B0            cmp a, b
6084   2A38 FD 74         sle ; <= (signed)
6085   2A3A E4            pop a
6086   2A3B             ; --- END RELATIONAL
6087   2A3B FD A7         sand a, b
6088   2A3D E4            pop a
6089   2A3E             ; --- END LOGICAL AND
6090   2A3E FD A8         sor a, b ; ||
6091   2A40 11            mov a, b
6092   2A41 FA 05 00      lea d, [bp + 5] ; $c
6093   2A44 32            mov bl, [d]
6094   2A45 A7 00         mov bh, 0
6095   2A47 38 00 00      mov c, 0
6096   2A4A             ; --- START RELATIONAL
6097   2A4A D7            push a
6098   2A4B 11            mov a, b
6099   2A4C FD 2E 61 00   mov32 cb, $00000061
6099   2A50 00 00 
6100   2A52 B0            cmp a, b
6101   2A53 FD 80         sge ; >=
6102   2A55 E4            pop a
6103   2A56             ; --- END RELATIONAL
6104   2A56             ; --- START LOGICAL AND
6105   2A56 D7            push a
6106   2A57 11            mov a, b
6107   2A58 FA 05 00      lea d, [bp + 5] ; $c
6108   2A5B 32            mov bl, [d]
6109   2A5C A7 00         mov bh, 0
6110   2A5E 38 00 00      mov c, 0
6111   2A61             ; --- START RELATIONAL
6112   2A61 D7            push a
6113   2A62 11            mov a, b
6114   2A63 FD 2E 66 00   mov32 cb, $00000066
6114   2A67 00 00 
6115   2A69 B0            cmp a, b
6116   2A6A FD 74         sle ; <= (signed)
6117   2A6C E4            pop a
6118   2A6D             ; --- END RELATIONAL
6119   2A6D FD A7         sand a, b
6120   2A6F E4            pop a
6121   2A70             ; --- END LOGICAL AND
6122   2A70 FD A8         sor a, b ; ||
6123   2A72 E4            pop a
6124   2A73             ; --- END LOGICAL OR
6125   2A73 F9            leave
6126   2A74 09            ret
6127   2A75             
6128   2A75             get_line:
6129   2A75 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6130   2A78             ; char *t; 
6131   2A78 52 02 00      sub sp, 2
6132   2A7B             ; t = string_const; 
6133   2A7B FA FF FF      lea d, [bp + -1] ; $t
6134   2A7E DA            push d
6135   2A7F 3B A5 4E      mov d, _string_const_data ; $string_const
6136   2A82 2D            mov b, d
6137   2A83 38 00 00      mov c, 0
6138   2A86 E7            pop d
6139   2A87 FD 43         mov [d], b
6140   2A89             ; *t = '\0'; 
6141   2A89 FA FF FF      lea d, [bp + -1] ; $t
6142   2A8C 2A            mov b, [d]
6143   2A8D 38 00 00      mov c, 0
6144   2A90 D8            push b
6145   2A91 FD 2E 00 00   mov32 cb, $00000000
6145   2A95 00 00 
6146   2A97 E7            pop d
6147   2A98 FD 3E         mov [d], bl
6148   2A9A             ; while(*prog != 0x0A && *prog != '\0'){ 
6149   2A9A             _while151_cond:
6150   2A9A 3B 63 4E      mov d, _prog ; $prog
6151   2A9D 2A            mov b, [d]
6152   2A9E 38 00 00      mov c, 0
6153   2AA1 74            mov d, b
6154   2AA2 32            mov bl, [d]
6155   2AA3 A7 00         mov bh, 0
6156   2AA5 38 00 00      mov c, 0
6157   2AA8             ; --- START RELATIONAL
6158   2AA8 D7            push a
6159   2AA9 11            mov a, b
6160   2AAA FD 2E 0A 00   mov32 cb, $0000000a
6160   2AAE 00 00 
6161   2AB0 B0            cmp a, b
6162   2AB1 FD 72         sneq ; !=
6163   2AB3 E4            pop a
6164   2AB4             ; --- END RELATIONAL
6165   2AB4             ; --- START LOGICAL AND
6166   2AB4 D7            push a
6167   2AB5 11            mov a, b
6168   2AB6 3B 63 4E      mov d, _prog ; $prog
6169   2AB9 2A            mov b, [d]
6170   2ABA 38 00 00      mov c, 0
6171   2ABD 74            mov d, b
6172   2ABE 32            mov bl, [d]
6173   2ABF A7 00         mov bh, 0
6174   2AC1 38 00 00      mov c, 0
6175   2AC4             ; --- START RELATIONAL
6176   2AC4 D7            push a
6177   2AC5 11            mov a, b
6178   2AC6 FD 2E 00 00   mov32 cb, $00000000
6178   2ACA 00 00 
6179   2ACC B0            cmp a, b
6180   2ACD FD 72         sneq ; !=
6181   2ACF E4            pop a
6182   2AD0             ; --- END RELATIONAL
6183   2AD0 FD A7         sand a, b
6184   2AD2 E4            pop a
6185   2AD3             ; --- END LOGICAL AND
6186   2AD3 C0 00 00      cmp b, 0
6187   2AD6 C6 7F 2B      je _while151_exit
6188   2AD9             _while151_block:
6189   2AD9             ; if(*prog == ';'){ 
6190   2AD9             _if152_cond:
6191   2AD9 3B 63 4E      mov d, _prog ; $prog
6192   2ADC 2A            mov b, [d]
6193   2ADD 38 00 00      mov c, 0
6194   2AE0 74            mov d, b
6195   2AE1 32            mov bl, [d]
6196   2AE2 A7 00         mov bh, 0
6197   2AE4 38 00 00      mov c, 0
6198   2AE7             ; --- START RELATIONAL
6199   2AE7 D7            push a
6200   2AE8 11            mov a, b
6201   2AE9 FD 2E 3B 00   mov32 cb, $0000003b
6201   2AED 00 00 
6202   2AEF B0            cmp a, b
6203   2AF0 FD 71         seq ; ==
6204   2AF2 E4            pop a
6205   2AF3             ; --- END RELATIONAL
6206   2AF3 C0 00 00      cmp b, 0
6207   2AF6 C6 51 2B      je _if152_else
6208   2AF9             _if152_TRUE:
6209   2AF9             ; while(*prog != 0x0A && *prog != '\0') prog++; 
6210   2AF9             _while153_cond:
6211   2AF9 3B 63 4E      mov d, _prog ; $prog
6212   2AFC 2A            mov b, [d]
6213   2AFD 38 00 00      mov c, 0
6214   2B00 74            mov d, b
6215   2B01 32            mov bl, [d]
6216   2B02 A7 00         mov bh, 0
6217   2B04 38 00 00      mov c, 0
6218   2B07             ; --- START RELATIONAL
6219   2B07 D7            push a
6220   2B08 11            mov a, b
6221   2B09 FD 2E 0A 00   mov32 cb, $0000000a
6221   2B0D 00 00 
6222   2B0F B0            cmp a, b
6223   2B10 FD 72         sneq ; !=
6224   2B12 E4            pop a
6225   2B13             ; --- END RELATIONAL
6226   2B13             ; --- START LOGICAL AND
6227   2B13 D7            push a
6228   2B14 11            mov a, b
6229   2B15 3B 63 4E      mov d, _prog ; $prog
6230   2B18 2A            mov b, [d]
6231   2B19 38 00 00      mov c, 0
6232   2B1C 74            mov d, b
6233   2B1D 32            mov bl, [d]
6234   2B1E A7 00         mov bh, 0
6235   2B20 38 00 00      mov c, 0
6236   2B23             ; --- START RELATIONAL
6237   2B23 D7            push a
6238   2B24 11            mov a, b
6239   2B25 FD 2E 00 00   mov32 cb, $00000000
6239   2B29 00 00 
6240   2B2B B0            cmp a, b
6241   2B2C FD 72         sneq ; !=
6242   2B2E E4            pop a
6243   2B2F             ; --- END RELATIONAL
6244   2B2F FD A7         sand a, b
6245   2B31 E4            pop a
6246   2B32             ; --- END LOGICAL AND
6247   2B32 C0 00 00      cmp b, 0
6248   2B35 C6 4B 2B      je _while153_exit
6249   2B38             _while153_block:
6250   2B38             ; prog++; 
6251   2B38 3B 63 4E      mov d, _prog ; $prog
6252   2B3B 2A            mov b, [d]
6253   2B3C 38 00 00      mov c, 0
6254   2B3F FD 77         inc b
6255   2B41 3B 63 4E      mov d, _prog ; $prog
6256   2B44 FD 43         mov [d], b
6257   2B46 FD 7D         dec b
6258   2B48 0A F9 2A      jmp _while153_cond
6259   2B4B             _while153_exit:
6260   2B4B             ; break; 
6261   2B4B 0A 7F 2B      jmp _while151_exit ; while break
6262   2B4E 0A 7C 2B      jmp _if152_exit
6263   2B51             _if152_else:
6264   2B51             ; *t++ = *prog++; 
6265   2B51 FA FF FF      lea d, [bp + -1] ; $t
6266   2B54 2A            mov b, [d]
6267   2B55 38 00 00      mov c, 0
6268   2B58 FD 77         inc b
6269   2B5A FA FF FF      lea d, [bp + -1] ; $t
6270   2B5D FD 43         mov [d], b
6271   2B5F FD 7D         dec b
6272   2B61 D8            push b
6273   2B62 3B 63 4E      mov d, _prog ; $prog
6274   2B65 2A            mov b, [d]
6275   2B66 38 00 00      mov c, 0
6276   2B69 FD 77         inc b
6277   2B6B 3B 63 4E      mov d, _prog ; $prog
6278   2B6E FD 43         mov [d], b
6279   2B70 FD 7D         dec b
6280   2B72 74            mov d, b
6281   2B73 32            mov bl, [d]
6282   2B74 A7 00         mov bh, 0
6283   2B76 38 00 00      mov c, 0
6284   2B79 E7            pop d
6285   2B7A FD 3E         mov [d], bl
6286   2B7C             _if152_exit:
6287   2B7C 0A 9A 2A      jmp _while151_cond
6288   2B7F             _while151_exit:
6289   2B7F             ; *t = '\0'; 
6290   2B7F FA FF FF      lea d, [bp + -1] ; $t
6291   2B82 2A            mov b, [d]
6292   2B83 38 00 00      mov c, 0
6293   2B86 D8            push b
6294   2B87 FD 2E 00 00   mov32 cb, $00000000
6294   2B8B 00 00 
6295   2B8D E7            pop d
6296   2B8E FD 3E         mov [d], bl
6297   2B90 F9            leave
6298   2B91 09            ret
6299   2B92             
6300   2B92             get:
6301   2B92 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6302   2B95             ; char *t; 
6303   2B95 52 02 00      sub sp, 2
6304   2B98             ; char temp_hex[64]; 
6305   2B98 52 40 00      sub sp, 64
6306   2B9B             ; char *p; 
6307   2B9B 52 02 00      sub sp, 2
6308   2B9E             ; *token = '\0'; 
6309   2B9E 3B 65 4E      mov d, _token_data ; $token
6310   2BA1 2D            mov b, d
6311   2BA2 38 00 00      mov c, 0
6312   2BA5 D8            push b
6313   2BA6 FD 2E 00 00   mov32 cb, $00000000
6313   2BAA 00 00 
6314   2BAC E7            pop d
6315   2BAD FD 3E         mov [d], bl
6316   2BAF             ; tok = TOK_UNDEF; 
6317   2BAF 3B 5F 4E      mov d, _tok ; $tok
6318   2BB2 DA            push d
6319   2BB3 FD 2E 00 00   mov32 cb, $0 ; enum element: TOK_UNDEF
6319   2BB7 00 00 
6320   2BB9 E7            pop d
6321   2BBA FD 43         mov [d], b
6322   2BBC             ; toktype = TYPE_UNDEF; 
6323   2BBC 3B 61 4E      mov d, _toktype ; $toktype
6324   2BBF DA            push d
6325   2BC0 FD 2E 00 00   mov32 cb, $0 ; enum element: TYPE_UNDEF
6325   2BC4 00 00 
6326   2BC6 E7            pop d
6327   2BC7 FD 43         mov [d], b
6328   2BC9             ; t = token; 
6329   2BC9 FA FF FF      lea d, [bp + -1] ; $t
6330   2BCC DA            push d
6331   2BCD 3B 65 4E      mov d, _token_data ; $token
6332   2BD0 2D            mov b, d
6333   2BD1 38 00 00      mov c, 0
6334   2BD4 E7            pop d
6335   2BD5 FD 43         mov [d], b
6336   2BD7             ; do{ 
6337   2BD7             _do154_block:
6338   2BD7             ; while(is_space(*prog)) prog++; 
6339   2BD7             _while155_cond:
6340   2BD7             ; --- START FUNCTION CALL
6341   2BD7 3B 63 4E      mov d, _prog ; $prog
6342   2BDA 2A            mov b, [d]
6343   2BDB 38 00 00      mov c, 0
6344   2BDE 74            mov d, b
6345   2BDF 32            mov bl, [d]
6346   2BE0 A7 00         mov bh, 0
6347   2BE2 38 00 00      mov c, 0
6348   2BE5 DD            push bl
6349   2BE6 07 D4 47      call is_space
6350   2BE9 51 01 00      add sp, 1
6351   2BEC             ; --- END FUNCTION CALL
6352   2BEC C0 00 00      cmp b, 0
6353   2BEF C6 05 2C      je _while155_exit
6354   2BF2             _while155_block:
6355   2BF2             ; prog++; 
6356   2BF2 3B 63 4E      mov d, _prog ; $prog
6357   2BF5 2A            mov b, [d]
6358   2BF6 38 00 00      mov c, 0
6359   2BF9 FD 77         inc b
6360   2BFB 3B 63 4E      mov d, _prog ; $prog
6361   2BFE FD 43         mov [d], b
6362   2C00 FD 7D         dec b
6363   2C02 0A D7 2B      jmp _while155_cond
6364   2C05             _while155_exit:
6365   2C05             ; if(*prog == ';'){ 
6366   2C05             _if156_cond:
6367   2C05 3B 63 4E      mov d, _prog ; $prog
6368   2C08 2A            mov b, [d]
6369   2C09 38 00 00      mov c, 0
6370   2C0C 74            mov d, b
6371   2C0D 32            mov bl, [d]
6372   2C0E A7 00         mov bh, 0
6373   2C10 38 00 00      mov c, 0
6374   2C13             ; --- START RELATIONAL
6375   2C13 D7            push a
6376   2C14 11            mov a, b
6377   2C15 FD 2E 3B 00   mov32 cb, $0000003b
6377   2C19 00 00 
6378   2C1B B0            cmp a, b
6379   2C1C FD 71         seq ; ==
6380   2C1E E4            pop a
6381   2C1F             ; --- END RELATIONAL
6382   2C1F C0 00 00      cmp b, 0
6383   2C22 C6 8E 2C      je _if156_exit
6384   2C25             _if156_TRUE:
6385   2C25             ; while(*prog != '\n') prog++; 
6386   2C25             _while157_cond:
6387   2C25 3B 63 4E      mov d, _prog ; $prog
6388   2C28 2A            mov b, [d]
6389   2C29 38 00 00      mov c, 0
6390   2C2C 74            mov d, b
6391   2C2D 32            mov bl, [d]
6392   2C2E A7 00         mov bh, 0
6393   2C30 38 00 00      mov c, 0
6394   2C33             ; --- START RELATIONAL
6395   2C33 D7            push a
6396   2C34 11            mov a, b
6397   2C35 FD 2E 0A 00   mov32 cb, $0000000a
6397   2C39 00 00 
6398   2C3B B0            cmp a, b
6399   2C3C FD 72         sneq ; !=
6400   2C3E E4            pop a
6401   2C3F             ; --- END RELATIONAL
6402   2C3F C0 00 00      cmp b, 0
6403   2C42 C6 58 2C      je _while157_exit
6404   2C45             _while157_block:
6405   2C45             ; prog++; 
6406   2C45 3B 63 4E      mov d, _prog ; $prog
6407   2C48 2A            mov b, [d]
6408   2C49 38 00 00      mov c, 0
6409   2C4C FD 77         inc b
6410   2C4E 3B 63 4E      mov d, _prog ; $prog
6411   2C51 FD 43         mov [d], b
6412   2C53 FD 7D         dec b
6413   2C55 0A 25 2C      jmp _while157_cond
6414   2C58             _while157_exit:
6415   2C58             ; if(*prog == '\n') prog++; 
6416   2C58             _if158_cond:
6417   2C58 3B 63 4E      mov d, _prog ; $prog
6418   2C5B 2A            mov b, [d]
6419   2C5C 38 00 00      mov c, 0
6420   2C5F 74            mov d, b
6421   2C60 32            mov bl, [d]
6422   2C61 A7 00         mov bh, 0
6423   2C63 38 00 00      mov c, 0
6424   2C66             ; --- START RELATIONAL
6425   2C66 D7            push a
6426   2C67 11            mov a, b
6427   2C68 FD 2E 0A 00   mov32 cb, $0000000a
6427   2C6C 00 00 
6428   2C6E B0            cmp a, b
6429   2C6F FD 71         seq ; ==
6430   2C71 E4            pop a
6431   2C72             ; --- END RELATIONAL
6432   2C72 C0 00 00      cmp b, 0
6433   2C75 C6 8B 2C      je _if158_exit
6434   2C78             _if158_TRUE:
6435   2C78             ; prog++; 
6436   2C78 3B 63 4E      mov d, _prog ; $prog
6437   2C7B 2A            mov b, [d]
6438   2C7C 38 00 00      mov c, 0
6439   2C7F FD 77         inc b
6440   2C81 3B 63 4E      mov d, _prog ; $prog
6441   2C84 FD 43         mov [d], b
6442   2C86 FD 7D         dec b
6443   2C88 0A 8B 2C      jmp _if158_exit
6444   2C8B             _if158_exit:
6445   2C8B 0A 8E 2C      jmp _if156_exit
6446   2C8E             _if156_exit:
6447   2C8E             ; } while(is_space(*prog) || *prog == ';'); 
6448   2C8E             _do154_cond:
6449   2C8E             ; --- START FUNCTION CALL
6450   2C8E 3B 63 4E      mov d, _prog ; $prog
6451   2C91 2A            mov b, [d]
6452   2C92 38 00 00      mov c, 0
6453   2C95 74            mov d, b
6454   2C96 32            mov bl, [d]
6455   2C97 A7 00         mov bh, 0
6456   2C99 38 00 00      mov c, 0
6457   2C9C DD            push bl
6458   2C9D 07 D4 47      call is_space
6459   2CA0 51 01 00      add sp, 1
6460   2CA3             ; --- END FUNCTION CALL
6461   2CA3             ; --- START LOGICAL OR
6462   2CA3 D7            push a
6463   2CA4 11            mov a, b
6464   2CA5 3B 63 4E      mov d, _prog ; $prog
6465   2CA8 2A            mov b, [d]
6466   2CA9 38 00 00      mov c, 0
6467   2CAC 74            mov d, b
6468   2CAD 32            mov bl, [d]
6469   2CAE A7 00         mov bh, 0
6470   2CB0 38 00 00      mov c, 0
6471   2CB3             ; --- START RELATIONAL
6472   2CB3 D7            push a
6473   2CB4 11            mov a, b
6474   2CB5 FD 2E 3B 00   mov32 cb, $0000003b
6474   2CB9 00 00 
6475   2CBB B0            cmp a, b
6476   2CBC FD 71         seq ; ==
6477   2CBE E4            pop a
6478   2CBF             ; --- END RELATIONAL
6479   2CBF FD A8         sor a, b ; ||
6480   2CC1 E4            pop a
6481   2CC2             ; --- END LOGICAL OR
6482   2CC2 C0 01 00      cmp b, 1
6483   2CC5 C6 D7 2B      je _do154_block
6484   2CC8             _do154_exit:
6485   2CC8             ; if(*prog == '\0'){ 
6486   2CC8             _if159_cond:
6487   2CC8 3B 63 4E      mov d, _prog ; $prog
6488   2CCB 2A            mov b, [d]
6489   2CCC 38 00 00      mov c, 0
6490   2CCF 74            mov d, b
6491   2CD0 32            mov bl, [d]
6492   2CD1 A7 00         mov bh, 0
6493   2CD3 38 00 00      mov c, 0
6494   2CD6             ; --- START RELATIONAL
6495   2CD6 D7            push a
6496   2CD7 11            mov a, b
6497   2CD8 FD 2E 00 00   mov32 cb, $00000000
6497   2CDC 00 00 
6498   2CDE B0            cmp a, b
6499   2CDF FD 71         seq ; ==
6500   2CE1 E4            pop a
6501   2CE2             ; --- END RELATIONAL
6502   2CE2 C0 00 00      cmp b, 0
6503   2CE5 C6 FA 2C      je _if159_exit
6504   2CE8             _if159_TRUE:
6505   2CE8             ; toktype = END; 
6506   2CE8 3B 61 4E      mov d, _toktype ; $toktype
6507   2CEB DA            push d
6508   2CEC FD 2E 07 00   mov32 cb, $7 ; enum element: END
6508   2CF0 00 00 
6509   2CF2 E7            pop d
6510   2CF3 FD 43         mov [d], b
6511   2CF5             ; return; 
6512   2CF5 F9            leave
6513   2CF6 09            ret
6514   2CF7 0A FA 2C      jmp _if159_exit
6515   2CFA             _if159_exit:
6516   2CFA             ; if(is_alpha(*prog)){ 
6517   2CFA             _if160_cond:
6518   2CFA             ; --- START FUNCTION CALL
6519   2CFA 3B 63 4E      mov d, _prog ; $prog
6520   2CFD 2A            mov b, [d]
6521   2CFE 38 00 00      mov c, 0
6522   2D01 74            mov d, b
6523   2D02 32            mov bl, [d]
6524   2D03 A7 00         mov bh, 0
6525   2D05 38 00 00      mov c, 0
6526   2D08 DD            push bl
6527   2D09 07 38 48      call is_alpha
6528   2D0C 51 01 00      add sp, 1
6529   2D0F             ; --- END FUNCTION CALL
6530   2D0F C0 00 00      cmp b, 0
6531   2D12 C6 D2 2D      je _if160_else
6532   2D15             _if160_TRUE:
6533   2D15             ; while(is_alpha(*prog) || is_digit(*prog)){ 
6534   2D15             _while161_cond:
6535   2D15             ; --- START FUNCTION CALL
6536   2D15 3B 63 4E      mov d, _prog ; $prog
6537   2D18 2A            mov b, [d]
6538   2D19 38 00 00      mov c, 0
6539   2D1C 74            mov d, b
6540   2D1D 32            mov bl, [d]
6541   2D1E A7 00         mov bh, 0
6542   2D20 38 00 00      mov c, 0
6543   2D23 DD            push bl
6544   2D24 07 38 48      call is_alpha
6545   2D27 51 01 00      add sp, 1
6546   2D2A             ; --- END FUNCTION CALL
6547   2D2A             ; --- START LOGICAL OR
6548   2D2A D7            push a
6549   2D2B 11            mov a, b
6550   2D2C             ; --- START FUNCTION CALL
6551   2D2C 3B 63 4E      mov d, _prog ; $prog
6552   2D2F 2A            mov b, [d]
6553   2D30 38 00 00      mov c, 0
6554   2D33 74            mov d, b
6555   2D34 32            mov bl, [d]
6556   2D35 A7 00         mov bh, 0
6557   2D37 38 00 00      mov c, 0
6558   2D3A DD            push bl
6559   2D3B 07 B8 48      call is_digit
6560   2D3E 51 01 00      add sp, 1
6561   2D41             ; --- END FUNCTION CALL
6562   2D41 FD A8         sor a, b ; ||
6563   2D43 E4            pop a
6564   2D44             ; --- END LOGICAL OR
6565   2D44 C0 00 00      cmp b, 0
6566   2D47 C6 78 2D      je _while161_exit
6567   2D4A             _while161_block:
6568   2D4A             ; *t++ = *prog++; 
6569   2D4A FA FF FF      lea d, [bp + -1] ; $t
6570   2D4D 2A            mov b, [d]
6571   2D4E 38 00 00      mov c, 0
6572   2D51 FD 77         inc b
6573   2D53 FA FF FF      lea d, [bp + -1] ; $t
6574   2D56 FD 43         mov [d], b
6575   2D58 FD 7D         dec b
6576   2D5A D8            push b
6577   2D5B 3B 63 4E      mov d, _prog ; $prog
6578   2D5E 2A            mov b, [d]
6579   2D5F 38 00 00      mov c, 0
6580   2D62 FD 77         inc b
6581   2D64 3B 63 4E      mov d, _prog ; $prog
6582   2D67 FD 43         mov [d], b
6583   2D69 FD 7D         dec b
6584   2D6B 74            mov d, b
6585   2D6C 32            mov bl, [d]
6586   2D6D A7 00         mov bh, 0
6587   2D6F 38 00 00      mov c, 0
6588   2D72 E7            pop d
6589   2D73 FD 3E         mov [d], bl
6590   2D75 0A 15 2D      jmp _while161_cond
6591   2D78             _while161_exit:
6592   2D78             ; *t = '\0'; 
6593   2D78 FA FF FF      lea d, [bp + -1] ; $t
6594   2D7B 2A            mov b, [d]
6595   2D7C 38 00 00      mov c, 0
6596   2D7F D8            push b
6597   2D80 FD 2E 00 00   mov32 cb, $00000000
6597   2D84 00 00 
6598   2D86 E7            pop d
6599   2D87 FD 3E         mov [d], bl
6600   2D89             ; if((tok = search_keyword(token)) != -1)  
6601   2D89             _if162_cond:
6602   2D89 3B 5F 4E      mov d, _tok ; $tok
6603   2D8C DA            push d
6604   2D8D             ; --- START FUNCTION CALL
6605   2D8D 3B 65 4E      mov d, _token_data ; $token
6606   2D90 2D            mov b, d
6607   2D91 38 00 00      mov c, 0
6608   2D94 FD AB         swp b
6609   2D96 D8            push b
6610   2D97 07 AA 3A      call search_keyword
6611   2D9A 51 02 00      add sp, 2
6612   2D9D             ; --- END FUNCTION CALL
6613   2D9D E7            pop d
6614   2D9E FD 43         mov [d], b
6615   2DA0             ; --- START RELATIONAL
6616   2DA0 D7            push a
6617   2DA1 11            mov a, b
6618   2DA2 FD 2E FF FF   mov32 cb, $ffffffff
6618   2DA6 FF FF 
6619   2DA8 B0            cmp a, b
6620   2DA9 FD 72         sneq ; !=
6621   2DAB E4            pop a
6622   2DAC             ; --- END RELATIONAL
6623   2DAC C0 00 00      cmp b, 0
6624   2DAF C6 C2 2D      je _if162_else
6625   2DB2             _if162_TRUE:
6626   2DB2             ; toktype = KEYWORD; 
6627   2DB2 3B 61 4E      mov d, _toktype ; $toktype
6628   2DB5 DA            push d
6629   2DB6 FD 2E 01 00   mov32 cb, $1 ; enum element: KEYWORD
6629   2DBA 00 00 
6630   2DBC E7            pop d
6631   2DBD FD 43         mov [d], b
6632   2DBF 0A CF 2D      jmp _if162_exit
6633   2DC2             _if162_else:
6634   2DC2             ; toktype = IDENTIFIER; 
6635   2DC2 3B 61 4E      mov d, _toktype ; $toktype
6636   2DC5 DA            push d
6637   2DC6 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
6637   2DCA 00 00 
6638   2DCC E7            pop d
6639   2DCD FD 43         mov [d], b
6640   2DCF             _if162_exit:
6641   2DCF 0A 3A 36      jmp _if160_exit
6642   2DD2             _if160_else:
6643   2DD2             ; if(is_digit(*prog) || (*prog == '$' && is_hex_digit(*(prog+1)))){ 
6644   2DD2             _if163_cond:
6645   2DD2             ; --- START FUNCTION CALL
6646   2DD2 3B 63 4E      mov d, _prog ; $prog
6647   2DD5 2A            mov b, [d]
6648   2DD6 38 00 00      mov c, 0
6649   2DD9 74            mov d, b
6650   2DDA 32            mov bl, [d]
6651   2DDB A7 00         mov bh, 0
6652   2DDD 38 00 00      mov c, 0
6653   2DE0 DD            push bl
6654   2DE1 07 B8 48      call is_digit
6655   2DE4 51 01 00      add sp, 1
6656   2DE7             ; --- END FUNCTION CALL
6657   2DE7             ; --- START LOGICAL OR
6658   2DE7 D7            push a
6659   2DE8 11            mov a, b
6660   2DE9 3B 63 4E      mov d, _prog ; $prog
6661   2DEC 2A            mov b, [d]
6662   2DED 38 00 00      mov c, 0
6663   2DF0 74            mov d, b
6664   2DF1 32            mov bl, [d]
6665   2DF2 A7 00         mov bh, 0
6666   2DF4 38 00 00      mov c, 0
6667   2DF7             ; --- START RELATIONAL
6668   2DF7 D7            push a
6669   2DF8 11            mov a, b
6670   2DF9 FD 2E 24 00   mov32 cb, $00000024
6670   2DFD 00 00 
6671   2DFF B0            cmp a, b
6672   2E00 FD 71         seq ; ==
6673   2E02 E4            pop a
6674   2E03             ; --- END RELATIONAL
6675   2E03             ; --- START LOGICAL AND
6676   2E03 D7            push a
6677   2E04 11            mov a, b
6678   2E05             ; --- START FUNCTION CALL
6679   2E05 3B 63 4E      mov d, _prog ; $prog
6680   2E08 2A            mov b, [d]
6681   2E09 38 00 00      mov c, 0
6682   2E0C             ; --- START TERMS
6683   2E0C D7            push a
6684   2E0D 11            mov a, b
6685   2E0E FD 2E 01 00   mov32 cb, $00000001
6685   2E12 00 00 
6686   2E14 56            add b, a
6687   2E15 E4            pop a
6688   2E16             ; --- END TERMS
6689   2E16 74            mov d, b
6690   2E17 32            mov bl, [d]
6691   2E18 A7 00         mov bh, 0
6692   2E1A 38 00 00      mov c, 0
6693   2E1D DD            push bl
6694   2E1E 07 DB 29      call is_hex_digit
6695   2E21 51 01 00      add sp, 1
6696   2E24             ; --- END FUNCTION CALL
6697   2E24 FD A7         sand a, b
6698   2E26 E4            pop a
6699   2E27             ; --- END LOGICAL AND
6700   2E27 FD A8         sor a, b ; ||
6701   2E29 E4            pop a
6702   2E2A             ; --- END LOGICAL OR
6703   2E2A C0 00 00      cmp b, 0
6704   2E2D C6 00 30      je _if163_else
6705   2E30             _if163_TRUE:
6706   2E30             ; if(*prog == '$' && is_hex_digit(*(prog+1))){ 
6707   2E30             _if164_cond:
6708   2E30 3B 63 4E      mov d, _prog ; $prog
6709   2E33 2A            mov b, [d]
6710   2E34 38 00 00      mov c, 0
6711   2E37 74            mov d, b
6712   2E38 32            mov bl, [d]
6713   2E39 A7 00         mov bh, 0
6714   2E3B 38 00 00      mov c, 0
6715   2E3E             ; --- START RELATIONAL
6716   2E3E D7            push a
6717   2E3F 11            mov a, b
6718   2E40 FD 2E 24 00   mov32 cb, $00000024
6718   2E44 00 00 
6719   2E46 B0            cmp a, b
6720   2E47 FD 71         seq ; ==
6721   2E49 E4            pop a
6722   2E4A             ; --- END RELATIONAL
6723   2E4A             ; --- START LOGICAL AND
6724   2E4A D7            push a
6725   2E4B 11            mov a, b
6726   2E4C             ; --- START FUNCTION CALL
6727   2E4C 3B 63 4E      mov d, _prog ; $prog
6728   2E4F 2A            mov b, [d]
6729   2E50 38 00 00      mov c, 0
6730   2E53             ; --- START TERMS
6731   2E53 D7            push a
6732   2E54 11            mov a, b
6733   2E55 FD 2E 01 00   mov32 cb, $00000001
6733   2E59 00 00 
6734   2E5B 56            add b, a
6735   2E5C E4            pop a
6736   2E5D             ; --- END TERMS
6737   2E5D 74            mov d, b
6738   2E5E 32            mov bl, [d]
6739   2E5F A7 00         mov bh, 0
6740   2E61 38 00 00      mov c, 0
6741   2E64 DD            push bl
6742   2E65 07 DB 29      call is_hex_digit
6743   2E68 51 01 00      add sp, 1
6744   2E6B             ; --- END FUNCTION CALL
6745   2E6B FD A7         sand a, b
6746   2E6D E4            pop a
6747   2E6E             ; --- END LOGICAL AND
6748   2E6E C0 00 00      cmp b, 0
6749   2E71 C6 7F 2F      je _if164_else
6750   2E74             _if164_TRUE:
6751   2E74             ; *t++ = *prog++; 
6752   2E74 FA FF FF      lea d, [bp + -1] ; $t
6753   2E77 2A            mov b, [d]
6754   2E78 38 00 00      mov c, 0
6755   2E7B FD 77         inc b
6756   2E7D FA FF FF      lea d, [bp + -1] ; $t
6757   2E80 FD 43         mov [d], b
6758   2E82 FD 7D         dec b
6759   2E84 D8            push b
6760   2E85 3B 63 4E      mov d, _prog ; $prog
6761   2E88 2A            mov b, [d]
6762   2E89 38 00 00      mov c, 0
6763   2E8C FD 77         inc b
6764   2E8E 3B 63 4E      mov d, _prog ; $prog
6765   2E91 FD 43         mov [d], b
6766   2E93 FD 7D         dec b
6767   2E95 74            mov d, b
6768   2E96 32            mov bl, [d]
6769   2E97 A7 00         mov bh, 0
6770   2E99 38 00 00      mov c, 0
6771   2E9C E7            pop d
6772   2E9D FD 3E         mov [d], bl
6773   2E9F             ; p = temp_hex; 
6774   2E9F FA BD FF      lea d, [bp + -67] ; $p
6775   2EA2 DA            push d
6776   2EA3 FA BF FF      lea d, [bp + -65] ; $temp_hex
6777   2EA6 2D            mov b, d
6778   2EA7 38 00 00      mov c, 0
6779   2EAA E7            pop d
6780   2EAB FD 43         mov [d], b
6781   2EAD             ; *t++ = *p++ = *prog++; 
6782   2EAD FA FF FF      lea d, [bp + -1] ; $t
6783   2EB0 2A            mov b, [d]
6784   2EB1 38 00 00      mov c, 0
6785   2EB4 FD 77         inc b
6786   2EB6 FA FF FF      lea d, [bp + -1] ; $t
6787   2EB9 FD 43         mov [d], b
6788   2EBB FD 7D         dec b
6789   2EBD D8            push b
6790   2EBE FA BD FF      lea d, [bp + -67] ; $p
6791   2EC1 2A            mov b, [d]
6792   2EC2 38 00 00      mov c, 0
6793   2EC5 FD 77         inc b
6794   2EC7 FA BD FF      lea d, [bp + -67] ; $p
6795   2ECA FD 43         mov [d], b
6796   2ECC FD 7D         dec b
6797   2ECE D8            push b
6798   2ECF 3B 63 4E      mov d, _prog ; $prog
6799   2ED2 2A            mov b, [d]
6800   2ED3 38 00 00      mov c, 0
6801   2ED6 FD 77         inc b
6802   2ED8 3B 63 4E      mov d, _prog ; $prog
6803   2EDB FD 43         mov [d], b
6804   2EDD FD 7D         dec b
6805   2EDF 74            mov d, b
6806   2EE0 32            mov bl, [d]
6807   2EE1 A7 00         mov bh, 0
6808   2EE3 38 00 00      mov c, 0
6809   2EE6 E7            pop d
6810   2EE7 FD 3E         mov [d], bl
6811   2EE9 E7            pop d
6812   2EEA FD 3E         mov [d], bl
6813   2EEC             ; while(is_hex_digit(*prog)){ 
6814   2EEC             _while165_cond:
6815   2EEC             ; --- START FUNCTION CALL
6816   2EEC 3B 63 4E      mov d, _prog ; $prog
6817   2EEF 2A            mov b, [d]
6818   2EF0 38 00 00      mov c, 0
6819   2EF3 74            mov d, b
6820   2EF4 32            mov bl, [d]
6821   2EF5 A7 00         mov bh, 0
6822   2EF7 38 00 00      mov c, 0
6823   2EFA DD            push bl
6824   2EFB 07 DB 29      call is_hex_digit
6825   2EFE 51 01 00      add sp, 1
6826   2F01             ; --- END FUNCTION CALL
6827   2F01 C0 00 00      cmp b, 0
6828   2F04 C6 49 2F      je _while165_exit
6829   2F07             _while165_block:
6830   2F07             ; *t++ = *p++ = *prog++; 
6831   2F07 FA FF FF      lea d, [bp + -1] ; $t
6832   2F0A 2A            mov b, [d]
6833   2F0B 38 00 00      mov c, 0
6834   2F0E FD 77         inc b
6835   2F10 FA FF FF      lea d, [bp + -1] ; $t
6836   2F13 FD 43         mov [d], b
6837   2F15 FD 7D         dec b
6838   2F17 D8            push b
6839   2F18 FA BD FF      lea d, [bp + -67] ; $p
6840   2F1B 2A            mov b, [d]
6841   2F1C 38 00 00      mov c, 0
6842   2F1F FD 77         inc b
6843   2F21 FA BD FF      lea d, [bp + -67] ; $p
6844   2F24 FD 43         mov [d], b
6845   2F26 FD 7D         dec b
6846   2F28 D8            push b
6847   2F29 3B 63 4E      mov d, _prog ; $prog
6848   2F2C 2A            mov b, [d]
6849   2F2D 38 00 00      mov c, 0
6850   2F30 FD 77         inc b
6851   2F32 3B 63 4E      mov d, _prog ; $prog
6852   2F35 FD 43         mov [d], b
6853   2F37 FD 7D         dec b
6854   2F39 74            mov d, b
6855   2F3A 32            mov bl, [d]
6856   2F3B A7 00         mov bh, 0
6857   2F3D 38 00 00      mov c, 0
6858   2F40 E7            pop d
6859   2F41 FD 3E         mov [d], bl
6860   2F43 E7            pop d
6861   2F44 FD 3E         mov [d], bl
6862   2F46 0A EC 2E      jmp _while165_cond
6863   2F49             _while165_exit:
6864   2F49             ; *t = *p = '\0'; 
6865   2F49 FA FF FF      lea d, [bp + -1] ; $t
6866   2F4C 2A            mov b, [d]
6867   2F4D 38 00 00      mov c, 0
6868   2F50 D8            push b
6869   2F51 FA BD FF      lea d, [bp + -67] ; $p
6870   2F54 2A            mov b, [d]
6871   2F55 38 00 00      mov c, 0
6872   2F58 D8            push b
6873   2F59 FD 2E 00 00   mov32 cb, $00000000
6873   2F5D 00 00 
6874   2F5F E7            pop d
6875   2F60 FD 3E         mov [d], bl
6876   2F62 E7            pop d
6877   2F63 FD 3E         mov [d], bl
6878   2F65             ; int_const = hex_to_int(temp_hex); 
6879   2F65 3B A5 4F      mov d, _int_const ; $int_const
6880   2F68 DA            push d
6881   2F69             ; --- START FUNCTION CALL
6882   2F69 FA BF FF      lea d, [bp + -65] ; $temp_hex
6883   2F6C 2D            mov b, d
6884   2F6D 38 00 00      mov c, 0
6885   2F70 FD AB         swp b
6886   2F72 D8            push b
6887   2F73 07 59 3B      call hex_to_int
6888   2F76 51 02 00      add sp, 2
6889   2F79             ; --- END FUNCTION CALL
6890   2F79 E7            pop d
6891   2F7A FD 43         mov [d], b
6892   2F7C 0A F0 2F      jmp _if164_exit
6893   2F7F             _if164_else:
6894   2F7F             ; while(is_digit(*prog)){ 
6895   2F7F             _while166_cond:
6896   2F7F             ; --- START FUNCTION CALL
6897   2F7F 3B 63 4E      mov d, _prog ; $prog
6898   2F82 2A            mov b, [d]
6899   2F83 38 00 00      mov c, 0
6900   2F86 74            mov d, b
6901   2F87 32            mov bl, [d]
6902   2F88 A7 00         mov bh, 0
6903   2F8A 38 00 00      mov c, 0
6904   2F8D DD            push bl
6905   2F8E 07 B8 48      call is_digit
6906   2F91 51 01 00      add sp, 1
6907   2F94             ; --- END FUNCTION CALL
6908   2F94 C0 00 00      cmp b, 0
6909   2F97 C6 C8 2F      je _while166_exit
6910   2F9A             _while166_block:
6911   2F9A             ; *t++ = *prog++; 
6912   2F9A FA FF FF      lea d, [bp + -1] ; $t
6913   2F9D 2A            mov b, [d]
6914   2F9E 38 00 00      mov c, 0
6915   2FA1 FD 77         inc b
6916   2FA3 FA FF FF      lea d, [bp + -1] ; $t
6917   2FA6 FD 43         mov [d], b
6918   2FA8 FD 7D         dec b
6919   2FAA D8            push b
6920   2FAB 3B 63 4E      mov d, _prog ; $prog
6921   2FAE 2A            mov b, [d]
6922   2FAF 38 00 00      mov c, 0
6923   2FB2 FD 77         inc b
6924   2FB4 3B 63 4E      mov d, _prog ; $prog
6925   2FB7 FD 43         mov [d], b
6926   2FB9 FD 7D         dec b
6927   2FBB 74            mov d, b
6928   2FBC 32            mov bl, [d]
6929   2FBD A7 00         mov bh, 0
6930   2FBF 38 00 00      mov c, 0
6931   2FC2 E7            pop d
6932   2FC3 FD 3E         mov [d], bl
6933   2FC5 0A 7F 2F      jmp _while166_cond
6934   2FC8             _while166_exit:
6935   2FC8             ; *t = '\0'; 
6936   2FC8 FA FF FF      lea d, [bp + -1] ; $t
6937   2FCB 2A            mov b, [d]
6938   2FCC 38 00 00      mov c, 0
6939   2FCF D8            push b
6940   2FD0 FD 2E 00 00   mov32 cb, $00000000
6940   2FD4 00 00 
6941   2FD6 E7            pop d
6942   2FD7 FD 3E         mov [d], bl
6943   2FD9             ; int_const = atoi(token); 
6944   2FD9 3B A5 4F      mov d, _int_const ; $int_const
6945   2FDC DA            push d
6946   2FDD             ; --- START FUNCTION CALL
6947   2FDD 3B 65 4E      mov d, _token_data ; $token
6948   2FE0 2D            mov b, d
6949   2FE1 38 00 00      mov c, 0
6950   2FE4 FD AB         swp b
6951   2FE6 D8            push b
6952   2FE7 07 CB 49      call atoi
6953   2FEA 51 02 00      add sp, 2
6954   2FED             ; --- END FUNCTION CALL
6955   2FED E7            pop d
6956   2FEE FD 43         mov [d], b
6957   2FF0             _if164_exit:
6958   2FF0             ; toktype = INTEGER_CONST; 
6959   2FF0 3B 61 4E      mov d, _toktype ; $toktype
6960   2FF3 DA            push d
6961   2FF4 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
6961   2FF8 00 00 
6962   2FFA E7            pop d
6963   2FFB FD 43         mov [d], b
6964   2FFD 0A 3A 36      jmp _if163_exit
6965   3000             _if163_else:
6966   3000             ; if(*prog == '\''){ 
6967   3000             _if167_cond:
6968   3000 3B 63 4E      mov d, _prog ; $prog
6969   3003 2A            mov b, [d]
6970   3004 38 00 00      mov c, 0
6971   3007 74            mov d, b
6972   3008 32            mov bl, [d]
6973   3009 A7 00         mov bh, 0
6974   300B 38 00 00      mov c, 0
6975   300E             ; --- START RELATIONAL
6976   300E D7            push a
6977   300F 11            mov a, b
6978   3010 FD 2E 27 00   mov32 cb, $00000027
6978   3014 00 00 
6979   3016 B0            cmp a, b
6980   3017 FD 71         seq ; ==
6981   3019 E4            pop a
6982   301A             ; --- END RELATIONAL
6983   301A C0 00 00      cmp b, 0
6984   301D C6 6A 31      je _if167_else
6985   3020             _if167_TRUE:
6986   3020             ; *t++ = '\''; 
6987   3020 FA FF FF      lea d, [bp + -1] ; $t
6988   3023 2A            mov b, [d]
6989   3024 38 00 00      mov c, 0
6990   3027 FD 77         inc b
6991   3029 FA FF FF      lea d, [bp + -1] ; $t
6992   302C FD 43         mov [d], b
6993   302E FD 7D         dec b
6994   3030 D8            push b
6995   3031 FD 2E 27 00   mov32 cb, $00000027
6995   3035 00 00 
6996   3037 E7            pop d
6997   3038 FD 3E         mov [d], bl
6998   303A             ; prog++; 
6999   303A 3B 63 4E      mov d, _prog ; $prog
7000   303D 2A            mov b, [d]
7001   303E 38 00 00      mov c, 0
7002   3041 FD 77         inc b
7003   3043 3B 63 4E      mov d, _prog ; $prog
7004   3046 FD 43         mov [d], b
7005   3048 FD 7D         dec b
7006   304A             ; if(*prog == '\\'){ 
7007   304A             _if168_cond:
7008   304A 3B 63 4E      mov d, _prog ; $prog
7009   304D 2A            mov b, [d]
7010   304E 38 00 00      mov c, 0
7011   3051 74            mov d, b
7012   3052 32            mov bl, [d]
7013   3053 A7 00         mov bh, 0
7014   3055 38 00 00      mov c, 0
7015   3058             ; --- START RELATIONAL
7016   3058 D7            push a
7017   3059 11            mov a, b
7018   305A FD 2E 5C 00   mov32 cb, $0000005c
7018   305E 00 00 
7019   3060 B0            cmp a, b
7020   3061 FD 71         seq ; ==
7021   3063 E4            pop a
7022   3064             ; --- END RELATIONAL
7023   3064 C0 00 00      cmp b, 0
7024   3067 C6 C2 30      je _if168_else
7025   306A             _if168_TRUE:
7026   306A             ; *t++ = '\\'; 
7027   306A FA FF FF      lea d, [bp + -1] ; $t
7028   306D 2A            mov b, [d]
7029   306E 38 00 00      mov c, 0
7030   3071 FD 77         inc b
7031   3073 FA FF FF      lea d, [bp + -1] ; $t
7032   3076 FD 43         mov [d], b
7033   3078 FD 7D         dec b
7034   307A D8            push b
7035   307B FD 2E 5C 00   mov32 cb, $0000005c
7035   307F 00 00 
7036   3081 E7            pop d
7037   3082 FD 3E         mov [d], bl
7038   3084             ; prog++; 
7039   3084 3B 63 4E      mov d, _prog ; $prog
7040   3087 2A            mov b, [d]
7041   3088 38 00 00      mov c, 0
7042   308B FD 77         inc b
7043   308D 3B 63 4E      mov d, _prog ; $prog
7044   3090 FD 43         mov [d], b
7045   3092 FD 7D         dec b
7046   3094             ; *t++ = *prog++; 
7047   3094 FA FF FF      lea d, [bp + -1] ; $t
7048   3097 2A            mov b, [d]
7049   3098 38 00 00      mov c, 0
7050   309B FD 77         inc b
7051   309D FA FF FF      lea d, [bp + -1] ; $t
7052   30A0 FD 43         mov [d], b
7053   30A2 FD 7D         dec b
7054   30A4 D8            push b
7055   30A5 3B 63 4E      mov d, _prog ; $prog
7056   30A8 2A            mov b, [d]
7057   30A9 38 00 00      mov c, 0
7058   30AC FD 77         inc b
7059   30AE 3B 63 4E      mov d, _prog ; $prog
7060   30B1 FD 43         mov [d], b
7061   30B3 FD 7D         dec b
7062   30B5 74            mov d, b
7063   30B6 32            mov bl, [d]
7064   30B7 A7 00         mov bh, 0
7065   30B9 38 00 00      mov c, 0
7066   30BC E7            pop d
7067   30BD FD 3E         mov [d], bl
7068   30BF 0A ED 30      jmp _if168_exit
7069   30C2             _if168_else:
7070   30C2             ; *t++ = *prog++; 
7071   30C2 FA FF FF      lea d, [bp + -1] ; $t
7072   30C5 2A            mov b, [d]
7073   30C6 38 00 00      mov c, 0
7074   30C9 FD 77         inc b
7075   30CB FA FF FF      lea d, [bp + -1] ; $t
7076   30CE FD 43         mov [d], b
7077   30D0 FD 7D         dec b
7078   30D2 D8            push b
7079   30D3 3B 63 4E      mov d, _prog ; $prog
7080   30D6 2A            mov b, [d]
7081   30D7 38 00 00      mov c, 0
7082   30DA FD 77         inc b
7083   30DC 3B 63 4E      mov d, _prog ; $prog
7084   30DF FD 43         mov [d], b
7085   30E1 FD 7D         dec b
7086   30E3 74            mov d, b
7087   30E4 32            mov bl, [d]
7088   30E5 A7 00         mov bh, 0
7089   30E7 38 00 00      mov c, 0
7090   30EA E7            pop d
7091   30EB FD 3E         mov [d], bl
7092   30ED             _if168_exit:
7093   30ED             ; if(*prog != '\''){ 
7094   30ED             _if169_cond:
7095   30ED 3B 63 4E      mov d, _prog ; $prog
7096   30F0 2A            mov b, [d]
7097   30F1 38 00 00      mov c, 0
7098   30F4 74            mov d, b
7099   30F5 32            mov bl, [d]
7100   30F6 A7 00         mov bh, 0
7101   30F8 38 00 00      mov c, 0
7102   30FB             ; --- START RELATIONAL
7103   30FB D7            push a
7104   30FC 11            mov a, b
7105   30FD FD 2E 27 00   mov32 cb, $00000027
7105   3101 00 00 
7106   3103 B0            cmp a, b
7107   3104 FD 72         sneq ; !=
7108   3106 E4            pop a
7109   3107             ; --- END RELATIONAL
7110   3107 C0 00 00      cmp b, 0
7111   310A C6 1C 31      je _if169_exit
7112   310D             _if169_TRUE:
7113   310D             ; error("Closing single quotes _expected."); 
7114   310D             ; --- START FUNCTION CALL
7115   310D 26 DF 52      mov b, _s75 ; "Closing single quotes _expected."
7116   3110 FD AB         swp b
7117   3112 D8            push b
7118   3113 07 98 39      call error
7119   3116 51 02 00      add sp, 2
7120   3119             ; --- END FUNCTION CALL
7121   3119 0A 1C 31      jmp _if169_exit
7122   311C             _if169_exit:
7123   311C             ; *t++ = '\''; 
7124   311C FA FF FF      lea d, [bp + -1] ; $t
7125   311F 2A            mov b, [d]
7126   3120 38 00 00      mov c, 0
7127   3123 FD 77         inc b
7128   3125 FA FF FF      lea d, [bp + -1] ; $t
7129   3128 FD 43         mov [d], b
7130   312A FD 7D         dec b
7131   312C D8            push b
7132   312D FD 2E 27 00   mov32 cb, $00000027
7132   3131 00 00 
7133   3133 E7            pop d
7134   3134 FD 3E         mov [d], bl
7135   3136             ; prog++; 
7136   3136 3B 63 4E      mov d, _prog ; $prog
7137   3139 2A            mov b, [d]
7138   313A 38 00 00      mov c, 0
7139   313D FD 77         inc b
7140   313F 3B 63 4E      mov d, _prog ; $prog
7141   3142 FD 43         mov [d], b
7142   3144 FD 7D         dec b
7143   3146             ; toktype = CHAR_CONST; 
7144   3146 3B 61 4E      mov d, _toktype ; $toktype
7145   3149 DA            push d
7146   314A FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
7146   314E 00 00 
7147   3150 E7            pop d
7148   3151 FD 43         mov [d], b
7149   3153             ; *t = '\0'; 
7150   3153 FA FF FF      lea d, [bp + -1] ; $t
7151   3156 2A            mov b, [d]
7152   3157 38 00 00      mov c, 0
7153   315A D8            push b
7154   315B FD 2E 00 00   mov32 cb, $00000000
7154   315F 00 00 
7155   3161 E7            pop d
7156   3162 FD 3E         mov [d], bl
7157   3164             ; convert_constant(); // converts this string token with quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
7158   3164             ; --- START FUNCTION CALL
7159   3164 07 CE 36      call convert_constant
7160   3167 0A 3A 36      jmp _if167_exit
7161   316A             _if167_else:
7162   316A             ; if(*prog == '\"'){ 
7163   316A             _if170_cond:
7164   316A 3B 63 4E      mov d, _prog ; $prog
7165   316D 2A            mov b, [d]
7166   316E 38 00 00      mov c, 0
7167   3171 74            mov d, b
7168   3172 32            mov bl, [d]
7169   3173 A7 00         mov bh, 0
7170   3175 38 00 00      mov c, 0
7171   3178             ; --- START RELATIONAL
7172   3178 D7            push a
7173   3179 11            mov a, b
7174   317A FD 2E 22 00   mov32 cb, $00000022
7174   317E 00 00 
7175   3180 B0            cmp a, b
7176   3181 FD 71         seq ; ==
7177   3183 E4            pop a
7178   3184             ; --- END RELATIONAL
7179   3184 C0 00 00      cmp b, 0
7180   3187 C6 92 32      je _if170_else
7181   318A             _if170_TRUE:
7182   318A             ; *t++ = '\"'; 
7183   318A FA FF FF      lea d, [bp + -1] ; $t
7184   318D 2A            mov b, [d]
7185   318E 38 00 00      mov c, 0
7186   3191 FD 77         inc b
7187   3193 FA FF FF      lea d, [bp + -1] ; $t
7188   3196 FD 43         mov [d], b
7189   3198 FD 7D         dec b
7190   319A D8            push b
7191   319B FD 2E 22 00   mov32 cb, $00000022
7191   319F 00 00 
7192   31A1 E7            pop d
7193   31A2 FD 3E         mov [d], bl
7194   31A4             ; prog++; 
7195   31A4 3B 63 4E      mov d, _prog ; $prog
7196   31A7 2A            mov b, [d]
7197   31A8 38 00 00      mov c, 0
7198   31AB FD 77         inc b
7199   31AD 3B 63 4E      mov d, _prog ; $prog
7200   31B0 FD 43         mov [d], b
7201   31B2 FD 7D         dec b
7202   31B4             ; while(*prog != '\"' && *prog){ 
7203   31B4             _while171_cond:
7204   31B4 3B 63 4E      mov d, _prog ; $prog
7205   31B7 2A            mov b, [d]
7206   31B8 38 00 00      mov c, 0
7207   31BB 74            mov d, b
7208   31BC 32            mov bl, [d]
7209   31BD A7 00         mov bh, 0
7210   31BF 38 00 00      mov c, 0
7211   31C2             ; --- START RELATIONAL
7212   31C2 D7            push a
7213   31C3 11            mov a, b
7214   31C4 FD 2E 22 00   mov32 cb, $00000022
7214   31C8 00 00 
7215   31CA B0            cmp a, b
7216   31CB FD 72         sneq ; !=
7217   31CD E4            pop a
7218   31CE             ; --- END RELATIONAL
7219   31CE             ; --- START LOGICAL AND
7220   31CE D7            push a
7221   31CF 11            mov a, b
7222   31D0 3B 63 4E      mov d, _prog ; $prog
7223   31D3 2A            mov b, [d]
7224   31D4 38 00 00      mov c, 0
7225   31D7 74            mov d, b
7226   31D8 32            mov bl, [d]
7227   31D9 A7 00         mov bh, 0
7228   31DB 38 00 00      mov c, 0
7229   31DE FD A7         sand a, b
7230   31E0 E4            pop a
7231   31E1             ; --- END LOGICAL AND
7232   31E1 C0 00 00      cmp b, 0
7233   31E4 C6 15 32      je _while171_exit
7234   31E7             _while171_block:
7235   31E7             ; *t++ = *prog++; 
7236   31E7 FA FF FF      lea d, [bp + -1] ; $t
7237   31EA 2A            mov b, [d]
7238   31EB 38 00 00      mov c, 0
7239   31EE FD 77         inc b
7240   31F0 FA FF FF      lea d, [bp + -1] ; $t
7241   31F3 FD 43         mov [d], b
7242   31F5 FD 7D         dec b
7243   31F7 D8            push b
7244   31F8 3B 63 4E      mov d, _prog ; $prog
7245   31FB 2A            mov b, [d]
7246   31FC 38 00 00      mov c, 0
7247   31FF FD 77         inc b
7248   3201 3B 63 4E      mov d, _prog ; $prog
7249   3204 FD 43         mov [d], b
7250   3206 FD 7D         dec b
7251   3208 74            mov d, b
7252   3209 32            mov bl, [d]
7253   320A A7 00         mov bh, 0
7254   320C 38 00 00      mov c, 0
7255   320F E7            pop d
7256   3210 FD 3E         mov [d], bl
7257   3212 0A B4 31      jmp _while171_cond
7258   3215             _while171_exit:
7259   3215             ; if(*prog != '\"') error("Double quotes _expected"); 
7260   3215             _if172_cond:
7261   3215 3B 63 4E      mov d, _prog ; $prog
7262   3218 2A            mov b, [d]
7263   3219 38 00 00      mov c, 0
7264   321C 74            mov d, b
7265   321D 32            mov bl, [d]
7266   321E A7 00         mov bh, 0
7267   3220 38 00 00      mov c, 0
7268   3223             ; --- START RELATIONAL
7269   3223 D7            push a
7270   3224 11            mov a, b
7271   3225 FD 2E 22 00   mov32 cb, $00000022
7271   3229 00 00 
7272   322B B0            cmp a, b
7273   322C FD 72         sneq ; !=
7274   322E E4            pop a
7275   322F             ; --- END RELATIONAL
7276   322F C0 00 00      cmp b, 0
7277   3232 C6 44 32      je _if172_exit
7278   3235             _if172_TRUE:
7279   3235             ; error("Double quotes _expected"); 
7280   3235             ; --- START FUNCTION CALL
7281   3235 26 00 53      mov b, _s76 ; "Double quotes _expected"
7282   3238 FD AB         swp b
7283   323A D8            push b
7284   323B 07 98 39      call error
7285   323E 51 02 00      add sp, 2
7286   3241             ; --- END FUNCTION CALL
7287   3241 0A 44 32      jmp _if172_exit
7288   3244             _if172_exit:
7289   3244             ; *t++ = '\"'; 
7290   3244 FA FF FF      lea d, [bp + -1] ; $t
7291   3247 2A            mov b, [d]
7292   3248 38 00 00      mov c, 0
7293   324B FD 77         inc b
7294   324D FA FF FF      lea d, [bp + -1] ; $t
7295   3250 FD 43         mov [d], b
7296   3252 FD 7D         dec b
7297   3254 D8            push b
7298   3255 FD 2E 22 00   mov32 cb, $00000022
7298   3259 00 00 
7299   325B E7            pop d
7300   325C FD 3E         mov [d], bl
7301   325E             ; prog++; 
7302   325E 3B 63 4E      mov d, _prog ; $prog
7303   3261 2A            mov b, [d]
7304   3262 38 00 00      mov c, 0
7305   3265 FD 77         inc b
7306   3267 3B 63 4E      mov d, _prog ; $prog
7307   326A FD 43         mov [d], b
7308   326C FD 7D         dec b
7309   326E             ; toktype = STRING_CONST; 
7310   326E 3B 61 4E      mov d, _toktype ; $toktype
7311   3271 DA            push d
7312   3272 FD 2E 04 00   mov32 cb, $4 ; enum element: STRING_CONST
7312   3276 00 00 
7313   3278 E7            pop d
7314   3279 FD 43         mov [d], b
7315   327B             ; *t = '\0'; 
7316   327B FA FF FF      lea d, [bp + -1] ; $t
7317   327E 2A            mov b, [d]
7318   327F 38 00 00      mov c, 0
7319   3282 D8            push b
7320   3283 FD 2E 00 00   mov32 cb, $00000000
7320   3287 00 00 
7321   3289 E7            pop d
7322   328A FD 3E         mov [d], bl
7323   328C             ; convert_constant(); // converts this string token with quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
7324   328C             ; --- START FUNCTION CALL
7325   328C 07 CE 36      call convert_constant
7326   328F 0A 3A 36      jmp _if170_exit
7327   3292             _if170_else:
7328   3292             ; if(*prog == '['){ 
7329   3292             _if173_cond:
7330   3292 3B 63 4E      mov d, _prog ; $prog
7331   3295 2A            mov b, [d]
7332   3296 38 00 00      mov c, 0
7333   3299 74            mov d, b
7334   329A 32            mov bl, [d]
7335   329B A7 00         mov bh, 0
7336   329D 38 00 00      mov c, 0
7337   32A0             ; --- START RELATIONAL
7338   32A0 D7            push a
7339   32A1 11            mov a, b
7340   32A2 FD 2E 5B 00   mov32 cb, $0000005b
7340   32A6 00 00 
7341   32A8 B0            cmp a, b
7342   32A9 FD 71         seq ; ==
7343   32AB E4            pop a
7344   32AC             ; --- END RELATIONAL
7345   32AC C0 00 00      cmp b, 0
7346   32AF C6 FA 32      je _if173_else
7347   32B2             _if173_TRUE:
7348   32B2             ; *t++ = *prog++; 
7349   32B2 FA FF FF      lea d, [bp + -1] ; $t
7350   32B5 2A            mov b, [d]
7351   32B6 38 00 00      mov c, 0
7352   32B9 FD 77         inc b
7353   32BB FA FF FF      lea d, [bp + -1] ; $t
7354   32BE FD 43         mov [d], b
7355   32C0 FD 7D         dec b
7356   32C2 D8            push b
7357   32C3 3B 63 4E      mov d, _prog ; $prog
7358   32C6 2A            mov b, [d]
7359   32C7 38 00 00      mov c, 0
7360   32CA FD 77         inc b
7361   32CC 3B 63 4E      mov d, _prog ; $prog
7362   32CF FD 43         mov [d], b
7363   32D1 FD 7D         dec b
7364   32D3 74            mov d, b
7365   32D4 32            mov bl, [d]
7366   32D5 A7 00         mov bh, 0
7367   32D7 38 00 00      mov c, 0
7368   32DA E7            pop d
7369   32DB FD 3E         mov [d], bl
7370   32DD             ; tok = OPENING_BRACKET; 
7371   32DD 3B 5F 4E      mov d, _tok ; $tok
7372   32E0 DA            push d
7373   32E1 FD 2E 0B 00   mov32 cb, $b ; enum element: OPENING_BRACKET
7373   32E5 00 00 
7374   32E7 E7            pop d
7375   32E8 FD 43         mov [d], b
7376   32EA             ; toktype = DELIMITER;   
7377   32EA 3B 61 4E      mov d, _toktype ; $toktype
7378   32ED DA            push d
7379   32EE FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7379   32F2 00 00 
7380   32F4 E7            pop d
7381   32F5 FD 43         mov [d], b
7382   32F7 0A 3A 36      jmp _if173_exit
7383   32FA             _if173_else:
7384   32FA             ; if(*prog == ']'){ 
7385   32FA             _if174_cond:
7386   32FA 3B 63 4E      mov d, _prog ; $prog
7387   32FD 2A            mov b, [d]
7388   32FE 38 00 00      mov c, 0
7389   3301 74            mov d, b
7390   3302 32            mov bl, [d]
7391   3303 A7 00         mov bh, 0
7392   3305 38 00 00      mov c, 0
7393   3308             ; --- START RELATIONAL
7394   3308 D7            push a
7395   3309 11            mov a, b
7396   330A FD 2E 5D 00   mov32 cb, $0000005d
7396   330E 00 00 
7397   3310 B0            cmp a, b
7398   3311 FD 71         seq ; ==
7399   3313 E4            pop a
7400   3314             ; --- END RELATIONAL
7401   3314 C0 00 00      cmp b, 0
7402   3317 C6 62 33      je _if174_else
7403   331A             _if174_TRUE:
7404   331A             ; *t++ = *prog++; 
7405   331A FA FF FF      lea d, [bp + -1] ; $t
7406   331D 2A            mov b, [d]
7407   331E 38 00 00      mov c, 0
7408   3321 FD 77         inc b
7409   3323 FA FF FF      lea d, [bp + -1] ; $t
7410   3326 FD 43         mov [d], b
7411   3328 FD 7D         dec b
7412   332A D8            push b
7413   332B 3B 63 4E      mov d, _prog ; $prog
7414   332E 2A            mov b, [d]
7415   332F 38 00 00      mov c, 0
7416   3332 FD 77         inc b
7417   3334 3B 63 4E      mov d, _prog ; $prog
7418   3337 FD 43         mov [d], b
7419   3339 FD 7D         dec b
7420   333B 74            mov d, b
7421   333C 32            mov bl, [d]
7422   333D A7 00         mov bh, 0
7423   333F 38 00 00      mov c, 0
7424   3342 E7            pop d
7425   3343 FD 3E         mov [d], bl
7426   3345             ; tok = CLOSING_BRACKET; 
7427   3345 3B 5F 4E      mov d, _tok ; $tok
7428   3348 DA            push d
7429   3349 FD 2E 0C 00   mov32 cb, $c ; enum element: CLOSING_BRACKET
7429   334D 00 00 
7430   334F E7            pop d
7431   3350 FD 43         mov [d], b
7432   3352             ; toktype = DELIMITER;   
7433   3352 3B 61 4E      mov d, _toktype ; $toktype
7434   3355 DA            push d
7435   3356 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7435   335A 00 00 
7436   335C E7            pop d
7437   335D FD 43         mov [d], b
7438   335F 0A 3A 36      jmp _if174_exit
7439   3362             _if174_else:
7440   3362             ; if(*prog == '+'){ 
7441   3362             _if175_cond:
7442   3362 3B 63 4E      mov d, _prog ; $prog
7443   3365 2A            mov b, [d]
7444   3366 38 00 00      mov c, 0
7445   3369 74            mov d, b
7446   336A 32            mov bl, [d]
7447   336B A7 00         mov bh, 0
7448   336D 38 00 00      mov c, 0
7449   3370             ; --- START RELATIONAL
7450   3370 D7            push a
7451   3371 11            mov a, b
7452   3372 FD 2E 2B 00   mov32 cb, $0000002b
7452   3376 00 00 
7453   3378 B0            cmp a, b
7454   3379 FD 71         seq ; ==
7455   337B E4            pop a
7456   337C             ; --- END RELATIONAL
7457   337C C0 00 00      cmp b, 0
7458   337F C6 CA 33      je _if175_else
7459   3382             _if175_TRUE:
7460   3382             ; *t++ = *prog++; 
7461   3382 FA FF FF      lea d, [bp + -1] ; $t
7462   3385 2A            mov b, [d]
7463   3386 38 00 00      mov c, 0
7464   3389 FD 77         inc b
7465   338B FA FF FF      lea d, [bp + -1] ; $t
7466   338E FD 43         mov [d], b
7467   3390 FD 7D         dec b
7468   3392 D8            push b
7469   3393 3B 63 4E      mov d, _prog ; $prog
7470   3396 2A            mov b, [d]
7471   3397 38 00 00      mov c, 0
7472   339A FD 77         inc b
7473   339C 3B 63 4E      mov d, _prog ; $prog
7474   339F FD 43         mov [d], b
7475   33A1 FD 7D         dec b
7476   33A3 74            mov d, b
7477   33A4 32            mov bl, [d]
7478   33A5 A7 00         mov bh, 0
7479   33A7 38 00 00      mov c, 0
7480   33AA E7            pop d
7481   33AB FD 3E         mov [d], bl
7482   33AD             ; tok = PLUS; 
7483   33AD 3B 5F 4E      mov d, _tok ; $tok
7484   33B0 DA            push d
7485   33B1 FD 2E 08 00   mov32 cb, $8 ; enum element: PLUS
7485   33B5 00 00 
7486   33B7 E7            pop d
7487   33B8 FD 43         mov [d], b
7488   33BA             ; toktype = DELIMITER;   
7489   33BA 3B 61 4E      mov d, _toktype ; $toktype
7490   33BD DA            push d
7491   33BE FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7491   33C2 00 00 
7492   33C4 E7            pop d
7493   33C5 FD 43         mov [d], b
7494   33C7 0A 3A 36      jmp _if175_exit
7495   33CA             _if175_else:
7496   33CA             ; if(*prog == '-'){ 
7497   33CA             _if176_cond:
7498   33CA 3B 63 4E      mov d, _prog ; $prog
7499   33CD 2A            mov b, [d]
7500   33CE 38 00 00      mov c, 0
7501   33D1 74            mov d, b
7502   33D2 32            mov bl, [d]
7503   33D3 A7 00         mov bh, 0
7504   33D5 38 00 00      mov c, 0
7505   33D8             ; --- START RELATIONAL
7506   33D8 D7            push a
7507   33D9 11            mov a, b
7508   33DA FD 2E 2D 00   mov32 cb, $0000002d
7508   33DE 00 00 
7509   33E0 B0            cmp a, b
7510   33E1 FD 71         seq ; ==
7511   33E3 E4            pop a
7512   33E4             ; --- END RELATIONAL
7513   33E4 C0 00 00      cmp b, 0
7514   33E7 C6 32 34      je _if176_else
7515   33EA             _if176_TRUE:
7516   33EA             ; *t++ = *prog++; 
7517   33EA FA FF FF      lea d, [bp + -1] ; $t
7518   33ED 2A            mov b, [d]
7519   33EE 38 00 00      mov c, 0
7520   33F1 FD 77         inc b
7521   33F3 FA FF FF      lea d, [bp + -1] ; $t
7522   33F6 FD 43         mov [d], b
7523   33F8 FD 7D         dec b
7524   33FA D8            push b
7525   33FB 3B 63 4E      mov d, _prog ; $prog
7526   33FE 2A            mov b, [d]
7527   33FF 38 00 00      mov c, 0
7528   3402 FD 77         inc b
7529   3404 3B 63 4E      mov d, _prog ; $prog
7530   3407 FD 43         mov [d], b
7531   3409 FD 7D         dec b
7532   340B 74            mov d, b
7533   340C 32            mov bl, [d]
7534   340D A7 00         mov bh, 0
7535   340F 38 00 00      mov c, 0
7536   3412 E7            pop d
7537   3413 FD 3E         mov [d], bl
7538   3415             ; tok = MINUS; 
7539   3415 3B 5F 4E      mov d, _tok ; $tok
7540   3418 DA            push d
7541   3419 FD 2E 09 00   mov32 cb, $9 ; enum element: MINUS
7541   341D 00 00 
7542   341F E7            pop d
7543   3420 FD 43         mov [d], b
7544   3422             ; toktype = DELIMITER;   
7545   3422 3B 61 4E      mov d, _toktype ; $toktype
7546   3425 DA            push d
7547   3426 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7547   342A 00 00 
7548   342C E7            pop d
7549   342D FD 43         mov [d], b
7550   342F 0A 3A 36      jmp _if176_exit
7551   3432             _if176_else:
7552   3432             ; if(*prog == '$'){ 
7553   3432             _if177_cond:
7554   3432 3B 63 4E      mov d, _prog ; $prog
7555   3435 2A            mov b, [d]
7556   3436 38 00 00      mov c, 0
7557   3439 74            mov d, b
7558   343A 32            mov bl, [d]
7559   343B A7 00         mov bh, 0
7560   343D 38 00 00      mov c, 0
7561   3440             ; --- START RELATIONAL
7562   3440 D7            push a
7563   3441 11            mov a, b
7564   3442 FD 2E 24 00   mov32 cb, $00000024
7564   3446 00 00 
7565   3448 B0            cmp a, b
7566   3449 FD 71         seq ; ==
7567   344B E4            pop a
7568   344C             ; --- END RELATIONAL
7569   344C C0 00 00      cmp b, 0
7570   344F C6 9A 34      je _if177_else
7571   3452             _if177_TRUE:
7572   3452             ; *t++ = *prog++; 
7573   3452 FA FF FF      lea d, [bp + -1] ; $t
7574   3455 2A            mov b, [d]
7575   3456 38 00 00      mov c, 0
7576   3459 FD 77         inc b
7577   345B FA FF FF      lea d, [bp + -1] ; $t
7578   345E FD 43         mov [d], b
7579   3460 FD 7D         dec b
7580   3462 D8            push b
7581   3463 3B 63 4E      mov d, _prog ; $prog
7582   3466 2A            mov b, [d]
7583   3467 38 00 00      mov c, 0
7584   346A FD 77         inc b
7585   346C 3B 63 4E      mov d, _prog ; $prog
7586   346F FD 43         mov [d], b
7587   3471 FD 7D         dec b
7588   3473 74            mov d, b
7589   3474 32            mov bl, [d]
7590   3475 A7 00         mov bh, 0
7591   3477 38 00 00      mov c, 0
7592   347A E7            pop d
7593   347B FD 3E         mov [d], bl
7594   347D             ; tok = DOLLAR; 
7595   347D 3B 5F 4E      mov d, _tok ; $tok
7596   3480 DA            push d
7597   3481 FD 2E 0A 00   mov32 cb, $a ; enum element: DOLLAR
7597   3485 00 00 
7598   3487 E7            pop d
7599   3488 FD 43         mov [d], b
7600   348A             ; toktype = DELIMITER;   
7601   348A 3B 61 4E      mov d, _toktype ; $toktype
7602   348D DA            push d
7603   348E FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7603   3492 00 00 
7604   3494 E7            pop d
7605   3495 FD 43         mov [d], b
7606   3497 0A 3A 36      jmp _if177_exit
7607   349A             _if177_else:
7608   349A             ; if(*prog == ':'){ 
7609   349A             _if178_cond:
7610   349A 3B 63 4E      mov d, _prog ; $prog
7611   349D 2A            mov b, [d]
7612   349E 38 00 00      mov c, 0
7613   34A1 74            mov d, b
7614   34A2 32            mov bl, [d]
7615   34A3 A7 00         mov bh, 0
7616   34A5 38 00 00      mov c, 0
7617   34A8             ; --- START RELATIONAL
7618   34A8 D7            push a
7619   34A9 11            mov a, b
7620   34AA FD 2E 3A 00   mov32 cb, $0000003a
7620   34AE 00 00 
7621   34B0 B0            cmp a, b
7622   34B1 FD 71         seq ; ==
7623   34B3 E4            pop a
7624   34B4             ; --- END RELATIONAL
7625   34B4 C0 00 00      cmp b, 0
7626   34B7 C6 02 35      je _if178_else
7627   34BA             _if178_TRUE:
7628   34BA             ; *t++ = *prog++; 
7629   34BA FA FF FF      lea d, [bp + -1] ; $t
7630   34BD 2A            mov b, [d]
7631   34BE 38 00 00      mov c, 0
7632   34C1 FD 77         inc b
7633   34C3 FA FF FF      lea d, [bp + -1] ; $t
7634   34C6 FD 43         mov [d], b
7635   34C8 FD 7D         dec b
7636   34CA D8            push b
7637   34CB 3B 63 4E      mov d, _prog ; $prog
7638   34CE 2A            mov b, [d]
7639   34CF 38 00 00      mov c, 0
7640   34D2 FD 77         inc b
7641   34D4 3B 63 4E      mov d, _prog ; $prog
7642   34D7 FD 43         mov [d], b
7643   34D9 FD 7D         dec b
7644   34DB 74            mov d, b
7645   34DC 32            mov bl, [d]
7646   34DD A7 00         mov bh, 0
7647   34DF 38 00 00      mov c, 0
7648   34E2 E7            pop d
7649   34E3 FD 3E         mov [d], bl
7650   34E5             ; tok = COLON; 
7651   34E5 3B 5F 4E      mov d, _tok ; $tok
7652   34E8 DA            push d
7653   34E9 FD 2E 0D 00   mov32 cb, $d ; enum element: COLON
7653   34ED 00 00 
7654   34EF E7            pop d
7655   34F0 FD 43         mov [d], b
7656   34F2             ; toktype = DELIMITER;   
7657   34F2 3B 61 4E      mov d, _toktype ; $toktype
7658   34F5 DA            push d
7659   34F6 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7659   34FA 00 00 
7660   34FC E7            pop d
7661   34FD FD 43         mov [d], b
7662   34FF 0A 3A 36      jmp _if178_exit
7663   3502             _if178_else:
7664   3502             ; if(*prog == ';'){ 
7665   3502             _if179_cond:
7666   3502 3B 63 4E      mov d, _prog ; $prog
7667   3505 2A            mov b, [d]
7668   3506 38 00 00      mov c, 0
7669   3509 74            mov d, b
7670   350A 32            mov bl, [d]
7671   350B A7 00         mov bh, 0
7672   350D 38 00 00      mov c, 0
7673   3510             ; --- START RELATIONAL
7674   3510 D7            push a
7675   3511 11            mov a, b
7676   3512 FD 2E 3B 00   mov32 cb, $0000003b
7676   3516 00 00 
7677   3518 B0            cmp a, b
7678   3519 FD 71         seq ; ==
7679   351B E4            pop a
7680   351C             ; --- END RELATIONAL
7681   351C C0 00 00      cmp b, 0
7682   351F C6 6A 35      je _if179_else
7683   3522             _if179_TRUE:
7684   3522             ; *t++ = *prog++; 
7685   3522 FA FF FF      lea d, [bp + -1] ; $t
7686   3525 2A            mov b, [d]
7687   3526 38 00 00      mov c, 0
7688   3529 FD 77         inc b
7689   352B FA FF FF      lea d, [bp + -1] ; $t
7690   352E FD 43         mov [d], b
7691   3530 FD 7D         dec b
7692   3532 D8            push b
7693   3533 3B 63 4E      mov d, _prog ; $prog
7694   3536 2A            mov b, [d]
7695   3537 38 00 00      mov c, 0
7696   353A FD 77         inc b
7697   353C 3B 63 4E      mov d, _prog ; $prog
7698   353F FD 43         mov [d], b
7699   3541 FD 7D         dec b
7700   3543 74            mov d, b
7701   3544 32            mov bl, [d]
7702   3545 A7 00         mov bh, 0
7703   3547 38 00 00      mov c, 0
7704   354A E7            pop d
7705   354B FD 3E         mov [d], bl
7706   354D             ; tok = SEMICOLON; 
7707   354D 3B 5F 4E      mov d, _tok ; $tok
7708   3550 DA            push d
7709   3551 FD 2E 0E 00   mov32 cb, $e ; enum element: SEMICOLON
7709   3555 00 00 
7710   3557 E7            pop d
7711   3558 FD 43         mov [d], b
7712   355A             ; toktype = DELIMITER;   
7713   355A 3B 61 4E      mov d, _toktype ; $toktype
7714   355D DA            push d
7715   355E FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7715   3562 00 00 
7716   3564 E7            pop d
7717   3565 FD 43         mov [d], b
7718   3567 0A 3A 36      jmp _if179_exit
7719   356A             _if179_else:
7720   356A             ; if(*prog == ','){ 
7721   356A             _if180_cond:
7722   356A 3B 63 4E      mov d, _prog ; $prog
7723   356D 2A            mov b, [d]
7724   356E 38 00 00      mov c, 0
7725   3571 74            mov d, b
7726   3572 32            mov bl, [d]
7727   3573 A7 00         mov bh, 0
7728   3575 38 00 00      mov c, 0
7729   3578             ; --- START RELATIONAL
7730   3578 D7            push a
7731   3579 11            mov a, b
7732   357A FD 2E 2C 00   mov32 cb, $0000002c
7732   357E 00 00 
7733   3580 B0            cmp a, b
7734   3581 FD 71         seq ; ==
7735   3583 E4            pop a
7736   3584             ; --- END RELATIONAL
7737   3584 C0 00 00      cmp b, 0
7738   3587 C6 D2 35      je _if180_else
7739   358A             _if180_TRUE:
7740   358A             ; *t++ = *prog++; 
7741   358A FA FF FF      lea d, [bp + -1] ; $t
7742   358D 2A            mov b, [d]
7743   358E 38 00 00      mov c, 0
7744   3591 FD 77         inc b
7745   3593 FA FF FF      lea d, [bp + -1] ; $t
7746   3596 FD 43         mov [d], b
7747   3598 FD 7D         dec b
7748   359A D8            push b
7749   359B 3B 63 4E      mov d, _prog ; $prog
7750   359E 2A            mov b, [d]
7751   359F 38 00 00      mov c, 0
7752   35A2 FD 77         inc b
7753   35A4 3B 63 4E      mov d, _prog ; $prog
7754   35A7 FD 43         mov [d], b
7755   35A9 FD 7D         dec b
7756   35AB 74            mov d, b
7757   35AC 32            mov bl, [d]
7758   35AD A7 00         mov bh, 0
7759   35AF 38 00 00      mov c, 0
7760   35B2 E7            pop d
7761   35B3 FD 3E         mov [d], bl
7762   35B5             ; tok = COMMA; 
7763   35B5 3B 5F 4E      mov d, _tok ; $tok
7764   35B8 DA            push d
7765   35B9 FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
7765   35BD 00 00 
7766   35BF E7            pop d
7767   35C0 FD 43         mov [d], b
7768   35C2             ; toktype = DELIMITER;   
7769   35C2 3B 61 4E      mov d, _toktype ; $toktype
7770   35C5 DA            push d
7771   35C6 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7771   35CA 00 00 
7772   35CC E7            pop d
7773   35CD FD 43         mov [d], b
7774   35CF 0A 3A 36      jmp _if180_exit
7775   35D2             _if180_else:
7776   35D2             ; if(*prog == '.'){ 
7777   35D2             _if181_cond:
7778   35D2 3B 63 4E      mov d, _prog ; $prog
7779   35D5 2A            mov b, [d]
7780   35D6 38 00 00      mov c, 0
7781   35D9 74            mov d, b
7782   35DA 32            mov bl, [d]
7783   35DB A7 00         mov bh, 0
7784   35DD 38 00 00      mov c, 0
7785   35E0             ; --- START RELATIONAL
7786   35E0 D7            push a
7787   35E1 11            mov a, b
7788   35E2 FD 2E 2E 00   mov32 cb, $0000002e
7788   35E6 00 00 
7789   35E8 B0            cmp a, b
7790   35E9 FD 71         seq ; ==
7791   35EB E4            pop a
7792   35EC             ; --- END RELATIONAL
7793   35EC C0 00 00      cmp b, 0
7794   35EF C6 3A 36      je _if181_exit
7795   35F2             _if181_TRUE:
7796   35F2             ; *t++ = *prog++; 
7797   35F2 FA FF FF      lea d, [bp + -1] ; $t
7798   35F5 2A            mov b, [d]
7799   35F6 38 00 00      mov c, 0
7800   35F9 FD 77         inc b
7801   35FB FA FF FF      lea d, [bp + -1] ; $t
7802   35FE FD 43         mov [d], b
7803   3600 FD 7D         dec b
7804   3602 D8            push b
7805   3603 3B 63 4E      mov d, _prog ; $prog
7806   3606 2A            mov b, [d]
7807   3607 38 00 00      mov c, 0
7808   360A FD 77         inc b
7809   360C 3B 63 4E      mov d, _prog ; $prog
7810   360F FD 43         mov [d], b
7811   3611 FD 7D         dec b
7812   3613 74            mov d, b
7813   3614 32            mov bl, [d]
7814   3615 A7 00         mov bh, 0
7815   3617 38 00 00      mov c, 0
7816   361A E7            pop d
7817   361B FD 3E         mov [d], bl
7818   361D             ; tok = DOT; 
7819   361D 3B 5F 4E      mov d, _tok ; $tok
7820   3620 DA            push d
7821   3621 FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
7821   3625 00 00 
7822   3627 E7            pop d
7823   3628 FD 43         mov [d], b
7824   362A             ; toktype = DELIMITER;   
7825   362A 3B 61 4E      mov d, _toktype ; $toktype
7826   362D DA            push d
7827   362E FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7827   3632 00 00 
7828   3634 E7            pop d
7829   3635 FD 43         mov [d], b
7830   3637 0A 3A 36      jmp _if181_exit
7831   363A             _if181_exit:
7832   363A             _if180_exit:
7833   363A             _if179_exit:
7834   363A             _if178_exit:
7835   363A             _if177_exit:
7836   363A             _if176_exit:
7837   363A             _if175_exit:
7838   363A             _if174_exit:
7839   363A             _if173_exit:
7840   363A             _if170_exit:
7841   363A             _if167_exit:
7842   363A             _if163_exit:
7843   363A             _if160_exit:
7844   363A             ; *t = '\0'; 
7845   363A FA FF FF      lea d, [bp + -1] ; $t
7846   363D 2A            mov b, [d]
7847   363E 38 00 00      mov c, 0
7848   3641 D8            push b
7849   3642 FD 2E 00 00   mov32 cb, $00000000
7849   3646 00 00 
7850   3648 E7            pop d
7851   3649 FD 3E         mov [d], bl
7852   364B             ; if(toktype == TYPE_UNDEF){ 
7853   364B             _if182_cond:
7854   364B 3B 61 4E      mov d, _toktype ; $toktype
7855   364E 2A            mov b, [d]
7856   364F 38 00 00      mov c, 0
7857   3652             ; --- START RELATIONAL
7858   3652 D7            push a
7859   3653 11            mov a, b
7860   3654 FD 2E 00 00   mov32 cb, $0 ; enum element: TYPE_UNDEF
7860   3658 00 00 
7861   365A B0            cmp a, b
7862   365B FD 71         seq ; ==
7863   365D E4            pop a
7864   365E             ; --- END RELATIONAL
7865   365E C0 00 00      cmp b, 0
7866   3661 C6 CC 36      je _if182_exit
7867   3664             _if182_TRUE:
7868   3664             ; printf("TOKEN ERROR. Prog: %x\n", (int)(prog-program));  
7869   3664             ; --- START FUNCTION CALL
7870   3664 3B 63 4E      mov d, _prog ; $prog
7871   3667 2A            mov b, [d]
7872   3668 38 00 00      mov c, 0
7873   366B             ; --- START TERMS
7874   366B D7            push a
7875   366C 11            mov a, b
7876   366D 3B A7 4F      mov d, _program ; $program
7877   3670 2A            mov b, [d]
7878   3671 38 00 00      mov c, 0
7879   3674 60            sub a, b
7880   3675 27            mov b, a
7881   3676 E4            pop a
7882   3677             ; --- END TERMS
7883   3677 AB            snex b
7884   3678 FD AB         swp b
7885   367A D8            push b
7886   367B 26 18 53      mov b, _s77 ; "TOKEN ERROR. Prog: %x\n"
7887   367E FD AB         swp b
7888   3680 D8            push b
7889   3681 07 8F 3E      call printf
7890   3684 51 04 00      add sp, 4
7891   3687             ; --- END FUNCTION CALL
7892   3687             ; printf("ProgVal: %x", *prog);  
7893   3687             ; --- START FUNCTION CALL
7894   3687 3B 63 4E      mov d, _prog ; $prog
7895   368A 2A            mov b, [d]
7896   368B 38 00 00      mov c, 0
7897   368E 74            mov d, b
7898   368F 32            mov bl, [d]
7899   3690 A7 00         mov bh, 0
7900   3692 38 00 00      mov c, 0
7901   3695 FD AB         swp b
7902   3697 D8            push b
7903   3698 26 2F 53      mov b, _s78 ; "ProgVal: %x"
7904   369B FD AB         swp b
7905   369D D8            push b
7906   369E 07 8F 3E      call printf
7907   36A1 51 04 00      add sp, 4
7908   36A4             ; --- END FUNCTION CALL
7909   36A4             ; printf("\n Text after prog: %s\n", prog); 
7910   36A4             ; --- START FUNCTION CALL
7911   36A4 3B 63 4E      mov d, _prog ; $prog
7912   36A7 2A            mov b, [d]
7913   36A8 38 00 00      mov c, 0
7914   36AB FD AB         swp b
7915   36AD D8            push b
7916   36AE 26 3B 53      mov b, _s79 ; "\n Text after prog: %s\n"
7917   36B1 FD AB         swp b
7918   36B3 D8            push b
7919   36B4 07 8F 3E      call printf
7920   36B7 51 04 00      add sp, 4
7921   36BA             ; --- END FUNCTION CALL
7922   36BA             ; exit(1); 
7923   36BA             ; --- START FUNCTION CALL
7924   36BA FD 2E 01 00   mov32 cb, $00000001
7924   36BE 00 00 
7925   36C0 FD AB         swp b
7926   36C2 D8            push b
7927   36C3 07 BA 4B      call exit
7928   36C6 51 02 00      add sp, 2
7929   36C9             ; --- END FUNCTION CALL
7930   36C9 0A CC 36      jmp _if182_exit
7931   36CC             _if182_exit:
7932   36CC F9            leave
7933   36CD 09            ret
7934   36CE             
7935   36CE             convert_constant:
7936   36CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
7937   36D1             ; char *s; 
7938   36D1 52 02 00      sub sp, 2
7939   36D4             ; char *t; 
7940   36D4 52 02 00      sub sp, 2
7941   36D7             ; t = token; 
7942   36D7 FA FD FF      lea d, [bp + -3] ; $t
7943   36DA DA            push d
7944   36DB 3B 65 4E      mov d, _token_data ; $token
7945   36DE 2D            mov b, d
7946   36DF 38 00 00      mov c, 0
7947   36E2 E7            pop d
7948   36E3 FD 43         mov [d], b
7949   36E5             ; s = string_const; 
7950   36E5 FA FF FF      lea d, [bp + -1] ; $s
7951   36E8 DA            push d
7952   36E9 3B A5 4E      mov d, _string_const_data ; $string_const
7953   36EC 2D            mov b, d
7954   36ED 38 00 00      mov c, 0
7955   36F0 E7            pop d
7956   36F1 FD 43         mov [d], b
7957   36F3             ; if(toktype == CHAR_CONST){ 
7958   36F3             _if183_cond:
7959   36F3 3B 61 4E      mov d, _toktype ; $toktype
7960   36F6 2A            mov b, [d]
7961   36F7 38 00 00      mov c, 0
7962   36FA             ; --- START RELATIONAL
7963   36FA D7            push a
7964   36FB 11            mov a, b
7965   36FC FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
7965   3700 00 00 
7966   3702 B0            cmp a, b
7967   3703 FD 71         seq ; ==
7968   3705 E4            pop a
7969   3706             ; --- END RELATIONAL
7970   3706 C0 00 00      cmp b, 0
7971   3709 C6 F8 38      je _if183_else
7972   370C             _if183_TRUE:
7973   370C             ; t++; 
7974   370C FA FD FF      lea d, [bp + -3] ; $t
7975   370F 2A            mov b, [d]
7976   3710 38 00 00      mov c, 0
7977   3713 FD 77         inc b
7978   3715 FA FD FF      lea d, [bp + -3] ; $t
7979   3718 FD 43         mov [d], b
7980   371A FD 7D         dec b
7981   371C             ; if(*t == '\\'){ 
7982   371C             _if184_cond:
7983   371C FA FD FF      lea d, [bp + -3] ; $t
7984   371F 2A            mov b, [d]
7985   3720 38 00 00      mov c, 0
7986   3723 74            mov d, b
7987   3724 32            mov bl, [d]
7988   3725 A7 00         mov bh, 0
7989   3727 38 00 00      mov c, 0
7990   372A             ; --- START RELATIONAL
7991   372A D7            push a
7992   372B 11            mov a, b
7993   372C FD 2E 5C 00   mov32 cb, $0000005c
7993   3730 00 00 
7994   3732 B0            cmp a, b
7995   3733 FD 71         seq ; ==
7996   3735 E4            pop a
7997   3736             ; --- END RELATIONAL
7998   3736 C0 00 00      cmp b, 0
7999   3739 C6 D3 38      je _if184_else
8000   373C             _if184_TRUE:
8001   373C             ; t++; 
8002   373C FA FD FF      lea d, [bp + -3] ; $t
8003   373F 2A            mov b, [d]
8004   3740 38 00 00      mov c, 0
8005   3743 FD 77         inc b
8006   3745 FA FD FF      lea d, [bp + -3] ; $t
8007   3748 FD 43         mov [d], b
8008   374A FD 7D         dec b
8009   374C             ; switch(*t){ 
8010   374C             _switch185_expr:
8011   374C FA FD FF      lea d, [bp + -3] ; $t
8012   374F 2A            mov b, [d]
8013   3750 38 00 00      mov c, 0
8014   3753 74            mov d, b
8015   3754 32            mov bl, [d]
8016   3755 A7 00         mov bh, 0
8017   3757 38 00 00      mov c, 0
8018   375A             _switch185_comparisons:
8019   375A C1 30         cmp bl, $30
8020   375C C6 94 37      je _switch185_case0
8021   375F C1 61         cmp bl, $61
8022   3761 C6 B1 37      je _switch185_case1
8023   3764 C1 62         cmp bl, $62
8024   3766 C6 CE 37      je _switch185_case2
8025   3769 C1 66         cmp bl, $66
8026   376B C6 EB 37      je _switch185_case3
8027   376E C1 6E         cmp bl, $6e
8028   3770 C6 08 38      je _switch185_case4
8029   3773 C1 72         cmp bl, $72
8030   3775 C6 25 38      je _switch185_case5
8031   3778 C1 74         cmp bl, $74
8032   377A C6 42 38      je _switch185_case6
8033   377D C1 76         cmp bl, $76
8034   377F C6 5F 38      je _switch185_case7
8035   3782 C1 5C         cmp bl, $5c
8036   3784 C6 7C 38      je _switch185_case8
8037   3787 C1 27         cmp bl, $27
8038   3789 C6 99 38      je _switch185_case9
8039   378C C1 22         cmp bl, $22
8040   378E C6 B6 38      je _switch185_case10
8041   3791 0A D0 38      jmp _switch185_exit
8042   3794             _switch185_case0:
8043   3794             ; *s++ = '\0'; 
8044   3794 FA FF FF      lea d, [bp + -1] ; $s
8045   3797 2A            mov b, [d]
8046   3798 38 00 00      mov c, 0
8047   379B FD 77         inc b
8048   379D FA FF FF      lea d, [bp + -1] ; $s
8049   37A0 FD 43         mov [d], b
8050   37A2 FD 7D         dec b
8051   37A4 D8            push b
8052   37A5 FD 2E 00 00   mov32 cb, $00000000
8052   37A9 00 00 
8053   37AB E7            pop d
8054   37AC FD 3E         mov [d], bl
8055   37AE             ; break; 
8056   37AE 0A D0 38      jmp _switch185_exit ; case break
8057   37B1             _switch185_case1:
8058   37B1             ; *s++ = '\a'; 
8059   37B1 FA FF FF      lea d, [bp + -1] ; $s
8060   37B4 2A            mov b, [d]
8061   37B5 38 00 00      mov c, 0
8062   37B8 FD 77         inc b
8063   37BA FA FF FF      lea d, [bp + -1] ; $s
8064   37BD FD 43         mov [d], b
8065   37BF FD 7D         dec b
8066   37C1 D8            push b
8067   37C2 FD 2E 07 00   mov32 cb, $00000007
8067   37C6 00 00 
8068   37C8 E7            pop d
8069   37C9 FD 3E         mov [d], bl
8070   37CB             ; break; 
8071   37CB 0A D0 38      jmp _switch185_exit ; case break
8072   37CE             _switch185_case2:
8073   37CE             ; *s++ = '\b'; 
8074   37CE FA FF FF      lea d, [bp + -1] ; $s
8075   37D1 2A            mov b, [d]
8076   37D2 38 00 00      mov c, 0
8077   37D5 FD 77         inc b
8078   37D7 FA FF FF      lea d, [bp + -1] ; $s
8079   37DA FD 43         mov [d], b
8080   37DC FD 7D         dec b
8081   37DE D8            push b
8082   37DF FD 2E 08 00   mov32 cb, $00000008
8082   37E3 00 00 
8083   37E5 E7            pop d
8084   37E6 FD 3E         mov [d], bl
8085   37E8             ; break;   
8086   37E8 0A D0 38      jmp _switch185_exit ; case break
8087   37EB             _switch185_case3:
8088   37EB             ; *s++ = '\f'; 
8089   37EB FA FF FF      lea d, [bp + -1] ; $s
8090   37EE 2A            mov b, [d]
8091   37EF 38 00 00      mov c, 0
8092   37F2 FD 77         inc b
8093   37F4 FA FF FF      lea d, [bp + -1] ; $s
8094   37F7 FD 43         mov [d], b
8095   37F9 FD 7D         dec b
8096   37FB D8            push b
8097   37FC FD 2E 0C 00   mov32 cb, $0000000c
8097   3800 00 00 
8098   3802 E7            pop d
8099   3803 FD 3E         mov [d], bl
8100   3805             ; break; 
8101   3805 0A D0 38      jmp _switch185_exit ; case break
8102   3808             _switch185_case4:
8103   3808             ; *s++ = '\n'; 
8104   3808 FA FF FF      lea d, [bp + -1] ; $s
8105   380B 2A            mov b, [d]
8106   380C 38 00 00      mov c, 0
8107   380F FD 77         inc b
8108   3811 FA FF FF      lea d, [bp + -1] ; $s
8109   3814 FD 43         mov [d], b
8110   3816 FD 7D         dec b
8111   3818 D8            push b
8112   3819 FD 2E 0A 00   mov32 cb, $0000000a
8112   381D 00 00 
8113   381F E7            pop d
8114   3820 FD 3E         mov [d], bl
8115   3822             ; break; 
8116   3822 0A D0 38      jmp _switch185_exit ; case break
8117   3825             _switch185_case5:
8118   3825             ; *s++ = '\r'; 
8119   3825 FA FF FF      lea d, [bp + -1] ; $s
8120   3828 2A            mov b, [d]
8121   3829 38 00 00      mov c, 0
8122   382C FD 77         inc b
8123   382E FA FF FF      lea d, [bp + -1] ; $s
8124   3831 FD 43         mov [d], b
8125   3833 FD 7D         dec b
8126   3835 D8            push b
8127   3836 FD 2E 0D 00   mov32 cb, $0000000d
8127   383A 00 00 
8128   383C E7            pop d
8129   383D FD 3E         mov [d], bl
8130   383F             ; break; 
8131   383F 0A D0 38      jmp _switch185_exit ; case break
8132   3842             _switch185_case6:
8133   3842             ; *s++ = '\t'; 
8134   3842 FA FF FF      lea d, [bp + -1] ; $s
8135   3845 2A            mov b, [d]
8136   3846 38 00 00      mov c, 0
8137   3849 FD 77         inc b
8138   384B FA FF FF      lea d, [bp + -1] ; $s
8139   384E FD 43         mov [d], b
8140   3850 FD 7D         dec b
8141   3852 D8            push b
8142   3853 FD 2E 09 00   mov32 cb, $00000009
8142   3857 00 00 
8143   3859 E7            pop d
8144   385A FD 3E         mov [d], bl
8145   385C             ; break; 
8146   385C 0A D0 38      jmp _switch185_exit ; case break
8147   385F             _switch185_case7:
8148   385F             ; *s++ = '\v'; 
8149   385F FA FF FF      lea d, [bp + -1] ; $s
8150   3862 2A            mov b, [d]
8151   3863 38 00 00      mov c, 0
8152   3866 FD 77         inc b
8153   3868 FA FF FF      lea d, [bp + -1] ; $s
8154   386B FD 43         mov [d], b
8155   386D FD 7D         dec b
8156   386F D8            push b
8157   3870 FD 2E 0B 00   mov32 cb, $0000000b
8157   3874 00 00 
8158   3876 E7            pop d
8159   3877 FD 3E         mov [d], bl
8160   3879             ; break; 
8161   3879 0A D0 38      jmp _switch185_exit ; case break
8162   387C             _switch185_case8:
8163   387C             ; *s++ = '\\'; 
8164   387C FA FF FF      lea d, [bp + -1] ; $s
8165   387F 2A            mov b, [d]
8166   3880 38 00 00      mov c, 0
8167   3883 FD 77         inc b
8168   3885 FA FF FF      lea d, [bp + -1] ; $s
8169   3888 FD 43         mov [d], b
8170   388A FD 7D         dec b
8171   388C D8            push b
8172   388D FD 2E 5C 00   mov32 cb, $0000005c
8172   3891 00 00 
8173   3893 E7            pop d
8174   3894 FD 3E         mov [d], bl
8175   3896             ; break; 
8176   3896 0A D0 38      jmp _switch185_exit ; case break
8177   3899             _switch185_case9:
8178   3899             ; *s++ = '\''; 
8179   3899 FA FF FF      lea d, [bp + -1] ; $s
8180   389C 2A            mov b, [d]
8181   389D 38 00 00      mov c, 0
8182   38A0 FD 77         inc b
8183   38A2 FA FF FF      lea d, [bp + -1] ; $s
8184   38A5 FD 43         mov [d], b
8185   38A7 FD 7D         dec b
8186   38A9 D8            push b
8187   38AA FD 2E 27 00   mov32 cb, $00000027
8187   38AE 00 00 
8188   38B0 E7            pop d
8189   38B1 FD 3E         mov [d], bl
8190   38B3             ; break; 
8191   38B3 0A D0 38      jmp _switch185_exit ; case break
8192   38B6             _switch185_case10:
8193   38B6             ; *s++ = '\"'; 
8194   38B6 FA FF FF      lea d, [bp + -1] ; $s
8195   38B9 2A            mov b, [d]
8196   38BA 38 00 00      mov c, 0
8197   38BD FD 77         inc b
8198   38BF FA FF FF      lea d, [bp + -1] ; $s
8199   38C2 FD 43         mov [d], b
8200   38C4 FD 7D         dec b
8201   38C6 D8            push b
8202   38C7 FD 2E 22 00   mov32 cb, $00000022
8202   38CB 00 00 
8203   38CD E7            pop d
8204   38CE FD 3E         mov [d], bl
8205   38D0             _switch185_exit:
8206   38D0 0A F5 38      jmp _if184_exit
8207   38D3             _if184_else:
8208   38D3             ; *s++ = *t; 
8209   38D3 FA FF FF      lea d, [bp + -1] ; $s
8210   38D6 2A            mov b, [d]
8211   38D7 38 00 00      mov c, 0
8212   38DA FD 77         inc b
8213   38DC FA FF FF      lea d, [bp + -1] ; $s
8214   38DF FD 43         mov [d], b
8215   38E1 FD 7D         dec b
8216   38E3 D8            push b
8217   38E4 FA FD FF      lea d, [bp + -3] ; $t
8218   38E7 2A            mov b, [d]
8219   38E8 38 00 00      mov c, 0
8220   38EB 74            mov d, b
8221   38EC 32            mov bl, [d]
8222   38ED A7 00         mov bh, 0
8223   38EF 38 00 00      mov c, 0
8224   38F2 E7            pop d
8225   38F3 FD 3E         mov [d], bl
8226   38F5             _if184_exit:
8227   38F5 0A 85 39      jmp _if183_exit
8228   38F8             _if183_else:
8229   38F8             ; if(toktype == STRING_CONST){ 
8230   38F8             _if186_cond:
8231   38F8 3B 61 4E      mov d, _toktype ; $toktype
8232   38FB 2A            mov b, [d]
8233   38FC 38 00 00      mov c, 0
8234   38FF             ; --- START RELATIONAL
8235   38FF D7            push a
8236   3900 11            mov a, b
8237   3901 FD 2E 04 00   mov32 cb, $4 ; enum element: STRING_CONST
8237   3905 00 00 
8238   3907 B0            cmp a, b
8239   3908 FD 71         seq ; ==
8240   390A E4            pop a
8241   390B             ; --- END RELATIONAL
8242   390B C0 00 00      cmp b, 0
8243   390E C6 85 39      je _if186_exit
8244   3911             _if186_TRUE:
8245   3911             ; t++; 
8246   3911 FA FD FF      lea d, [bp + -3] ; $t
8247   3914 2A            mov b, [d]
8248   3915 38 00 00      mov c, 0
8249   3918 FD 77         inc b
8250   391A FA FD FF      lea d, [bp + -3] ; $t
8251   391D FD 43         mov [d], b
8252   391F FD 7D         dec b
8253   3921             ; while(*t != '\"' && *t){ 
8254   3921             _while187_cond:
8255   3921 FA FD FF      lea d, [bp + -3] ; $t
8256   3924 2A            mov b, [d]
8257   3925 38 00 00      mov c, 0
8258   3928 74            mov d, b
8259   3929 32            mov bl, [d]
8260   392A A7 00         mov bh, 0
8261   392C 38 00 00      mov c, 0
8262   392F             ; --- START RELATIONAL
8263   392F D7            push a
8264   3930 11            mov a, b
8265   3931 FD 2E 22 00   mov32 cb, $00000022
8265   3935 00 00 
8266   3937 B0            cmp a, b
8267   3938 FD 72         sneq ; !=
8268   393A E4            pop a
8269   393B             ; --- END RELATIONAL
8270   393B             ; --- START LOGICAL AND
8271   393B D7            push a
8272   393C 11            mov a, b
8273   393D FA FD FF      lea d, [bp + -3] ; $t
8274   3940 2A            mov b, [d]
8275   3941 38 00 00      mov c, 0
8276   3944 74            mov d, b
8277   3945 32            mov bl, [d]
8278   3946 A7 00         mov bh, 0
8279   3948 38 00 00      mov c, 0
8280   394B FD A7         sand a, b
8281   394D E4            pop a
8282   394E             ; --- END LOGICAL AND
8283   394E C0 00 00      cmp b, 0
8284   3951 C6 82 39      je _while187_exit
8285   3954             _while187_block:
8286   3954             ; *s++ = *t++; 
8287   3954 FA FF FF      lea d, [bp + -1] ; $s
8288   3957 2A            mov b, [d]
8289   3958 38 00 00      mov c, 0
8290   395B FD 77         inc b
8291   395D FA FF FF      lea d, [bp + -1] ; $s
8292   3960 FD 43         mov [d], b
8293   3962 FD 7D         dec b
8294   3964 D8            push b
8295   3965 FA FD FF      lea d, [bp + -3] ; $t
8296   3968 2A            mov b, [d]
8297   3969 38 00 00      mov c, 0
8298   396C FD 77         inc b
8299   396E FA FD FF      lea d, [bp + -3] ; $t
8300   3971 FD 43         mov [d], b
8301   3973 FD 7D         dec b
8302   3975 74            mov d, b
8303   3976 32            mov bl, [d]
8304   3977 A7 00         mov bh, 0
8305   3979 38 00 00      mov c, 0
8306   397C E7            pop d
8307   397D FD 3E         mov [d], bl
8308   397F 0A 21 39      jmp _while187_cond
8309   3982             _while187_exit:
8310   3982 0A 85 39      jmp _if186_exit
8311   3985             _if186_exit:
8312   3985             _if183_exit:
8313   3985             ; *s = '\0'; 
8314   3985 FA FF FF      lea d, [bp + -1] ; $s
8315   3988 2A            mov b, [d]
8316   3989 38 00 00      mov c, 0
8317   398C D8            push b
8318   398D FD 2E 00 00   mov32 cb, $00000000
8318   3991 00 00 
8319   3993 E7            pop d
8320   3994 FD 3E         mov [d], bl
8321   3996 F9            leave
8322   3997 09            ret
8323   3998             
8324   3998             error:
8325   3998 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8326   399B             ; printf("\nError: %s\n", msg); 
8327   399B             ; --- START FUNCTION CALL
8328   399B FA 05 00      lea d, [bp + 5] ; $msg
8329   399E 2A            mov b, [d]
8330   399F 38 00 00      mov c, 0
8331   39A2 FD AB         swp b
8332   39A4 D8            push b
8333   39A5 26 52 53      mov b, _s80 ; "\nError: %s\n"
8334   39A8 FD AB         swp b
8335   39AA D8            push b
8336   39AB 07 8F 3E      call printf
8337   39AE 51 04 00      add sp, 4
8338   39B1             ; --- END FUNCTION CALL
8339   39B1             ; exit(1); 
8340   39B1             ; --- START FUNCTION CALL
8341   39B1 FD 2E 01 00   mov32 cb, $00000001
8341   39B5 00 00 
8342   39B7 FD AB         swp b
8343   39B9 D8            push b
8344   39BA 07 BA 4B      call exit
8345   39BD 51 02 00      add sp, 2
8346   39C0             ; --- END FUNCTION CALL
8347   39C0 F9            leave
8348   39C1 09            ret
8349   39C2             
8350   39C2             error_s:
8351   39C2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8352   39C5             ; printf("\nError: %s %s\n", msg, param); 
8353   39C5             ; --- START FUNCTION CALL
8354   39C5 FA 07 00      lea d, [bp + 7] ; $param
8355   39C8 2A            mov b, [d]
8356   39C9 38 00 00      mov c, 0
8357   39CC FD AB         swp b
8358   39CE D8            push b
8359   39CF FA 05 00      lea d, [bp + 5] ; $msg
8360   39D2 2A            mov b, [d]
8361   39D3 38 00 00      mov c, 0
8362   39D6 FD AB         swp b
8363   39D8 D8            push b
8364   39D9 26 5E 53      mov b, _s81 ; "\nError: %s %s\n"
8365   39DC FD AB         swp b
8366   39DE D8            push b
8367   39DF 07 8F 3E      call printf
8368   39E2 51 06 00      add sp, 6
8369   39E5             ; --- END FUNCTION CALL
8370   39E5             ; exit(1); 
8371   39E5             ; --- START FUNCTION CALL
8372   39E5 FD 2E 01 00   mov32 cb, $00000001
8372   39E9 00 00 
8373   39EB FD AB         swp b
8374   39ED D8            push b
8375   39EE 07 BA 4B      call exit
8376   39F1 51 02 00      add sp, 2
8377   39F4             ; --- END FUNCTION CALL
8378   39F4 F9            leave
8379   39F5 09            ret
8380   39F6             
8381   39F6             push_prog:
8382   39F6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8383   39F9             ; if(prog_tos == 10) error("Cannot push prog. Stack overflow."); 
8384   39F9             _if188_cond:
8385   39F9 3B C3 4F      mov d, _prog_tos ; $prog_tos
8386   39FC 2A            mov b, [d]
8387   39FD 38 00 00      mov c, 0
8388   3A00             ; --- START RELATIONAL
8389   3A00 D7            push a
8390   3A01 11            mov a, b
8391   3A02 FD 2E 0A 00   mov32 cb, $0000000a
8391   3A06 00 00 
8392   3A08 B0            cmp a, b
8393   3A09 FD 71         seq ; ==
8394   3A0B E4            pop a
8395   3A0C             ; --- END RELATIONAL
8396   3A0C C0 00 00      cmp b, 0
8397   3A0F C6 21 3A      je _if188_exit
8398   3A12             _if188_TRUE:
8399   3A12             ; error("Cannot push prog. Stack overflow."); 
8400   3A12             ; --- START FUNCTION CALL
8401   3A12 26 6D 53      mov b, _s82 ; "Cannot push prog. Stack overflow."
8402   3A15 FD AB         swp b
8403   3A17 D8            push b
8404   3A18 07 98 39      call error
8405   3A1B 51 02 00      add sp, 2
8406   3A1E             ; --- END FUNCTION CALL
8407   3A1E 0A 21 3A      jmp _if188_exit
8408   3A21             _if188_exit:
8409   3A21             ; prog_stack[prog_tos] = prog; 
8410   3A21 3B AF 4F      mov d, _prog_stack_data ; $prog_stack
8411   3A24 D7            push a
8412   3A25 DA            push d
8413   3A26 3B C3 4F      mov d, _prog_tos ; $prog_tos
8414   3A29 2A            mov b, [d]
8415   3A2A 38 00 00      mov c, 0
8416   3A2D E7            pop d
8417   3A2E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8418   3A32 E4            pop a
8419   3A33 DA            push d
8420   3A34 3B 63 4E      mov d, _prog ; $prog
8421   3A37 2A            mov b, [d]
8422   3A38 38 00 00      mov c, 0
8423   3A3B E7            pop d
8424   3A3C FD 43         mov [d], b
8425   3A3E             ; prog_tos++; 
8426   3A3E 3B C3 4F      mov d, _prog_tos ; $prog_tos
8427   3A41 2A            mov b, [d]
8428   3A42 38 00 00      mov c, 0
8429   3A45 11            mov a, b
8430   3A46 FD 77         inc b
8431   3A48 3B C3 4F      mov d, _prog_tos ; $prog_tos
8432   3A4B FD 43         mov [d], b
8433   3A4D 27            mov b, a
8434   3A4E F9            leave
8435   3A4F 09            ret
8436   3A50             
8437   3A50             pop_prog:
8438   3A50 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8439   3A53             ; if(prog_tos == 0) error("Cannot pop prog. Stack overflow."); 
8440   3A53             _if189_cond:
8441   3A53 3B C3 4F      mov d, _prog_tos ; $prog_tos
8442   3A56 2A            mov b, [d]
8443   3A57 38 00 00      mov c, 0
8444   3A5A             ; --- START RELATIONAL
8445   3A5A D7            push a
8446   3A5B 11            mov a, b
8447   3A5C FD 2E 00 00   mov32 cb, $00000000
8447   3A60 00 00 
8448   3A62 B0            cmp a, b
8449   3A63 FD 71         seq ; ==
8450   3A65 E4            pop a
8451   3A66             ; --- END RELATIONAL
8452   3A66 C0 00 00      cmp b, 0
8453   3A69 C6 7B 3A      je _if189_exit
8454   3A6C             _if189_TRUE:
8455   3A6C             ; error("Cannot pop prog. Stack overflow."); 
8456   3A6C             ; --- START FUNCTION CALL
8457   3A6C 26 8F 53      mov b, _s83 ; "Cannot pop prog. Stack overflow."
8458   3A6F FD AB         swp b
8459   3A71 D8            push b
8460   3A72 07 98 39      call error
8461   3A75 51 02 00      add sp, 2
8462   3A78             ; --- END FUNCTION CALL
8463   3A78 0A 7B 3A      jmp _if189_exit
8464   3A7B             _if189_exit:
8465   3A7B             ; prog_tos--; 
8466   3A7B 3B C3 4F      mov d, _prog_tos ; $prog_tos
8467   3A7E 2A            mov b, [d]
8468   3A7F 38 00 00      mov c, 0
8469   3A82 11            mov a, b
8470   3A83 FD 7D         dec b
8471   3A85 3B C3 4F      mov d, _prog_tos ; $prog_tos
8472   3A88 FD 43         mov [d], b
8473   3A8A 27            mov b, a
8474   3A8B             ; prog = prog_stack[prog_tos]; 
8475   3A8B 3B 63 4E      mov d, _prog ; $prog
8476   3A8E DA            push d
8477   3A8F 3B AF 4F      mov d, _prog_stack_data ; $prog_stack
8478   3A92 D7            push a
8479   3A93 DA            push d
8480   3A94 3B C3 4F      mov d, _prog_tos ; $prog_tos
8481   3A97 2A            mov b, [d]
8482   3A98 38 00 00      mov c, 0
8483   3A9B E7            pop d
8484   3A9C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8485   3AA0 E4            pop a
8486   3AA1 2A            mov b, [d]
8487   3AA2 38 00 00      mov c, 0
8488   3AA5 E7            pop d
8489   3AA6 FD 43         mov [d], b
8490   3AA8 F9            leave
8491   3AA9 09            ret
8492   3AAA             
8493   3AAA             search_keyword:
8494   3AAA F8 00 00      enter 0 ; (push bp; mov bp, sp)
8495   3AAD             ; int i; 
8496   3AAD 52 02 00      sub sp, 2
8497   3AB0             ; for(i = 0; keywords[i].keyword[0]; i++) 
8498   3AB0             _for190_init:
8499   3AB0 FA FF FF      lea d, [bp + -1] ; $i
8500   3AB3 DA            push d
8501   3AB4 FD 2E 00 00   mov32 cb, $00000000
8501   3AB8 00 00 
8502   3ABA E7            pop d
8503   3ABB FD 43         mov [d], b
8504   3ABD             _for190_cond:
8505   3ABD 3B 22 4D      mov d, _keywords_data ; $keywords
8506   3AC0 D7            push a
8507   3AC1 DA            push d
8508   3AC2 FA FF FF      lea d, [bp + -1] ; $i
8509   3AC5 2A            mov b, [d]
8510   3AC6 38 00 00      mov c, 0
8511   3AC9 E7            pop d
8512   3ACA FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
8513   3ACE E4            pop a
8514   3ACF 58 00 00      add d, 0
8515   3AD2 D7            push a
8516   3AD3 DA            push d
8517   3AD4 FD 2E 00 00   mov32 cb, $00000000
8517   3AD8 00 00 
8518   3ADA E7            pop d
8519   3ADB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
8520   3ADF E4            pop a
8521   3AE0 32            mov bl, [d]
8522   3AE1 A7 00         mov bh, 0
8523   3AE3 38 00 00      mov c, 0
8524   3AE6 C0 00 00      cmp b, 0
8525   3AE9 C6 51 3B      je _for190_exit
8526   3AEC             _for190_block:
8527   3AEC             ; if (!strcmp(keywords[i].keyword, keyword)) return keywords[i].tok; 
8528   3AEC             _if191_cond:
8529   3AEC             ; --- START FUNCTION CALL
8530   3AEC FA 05 00      lea d, [bp + 5] ; $keyword
8531   3AEF 2A            mov b, [d]
8532   3AF0 38 00 00      mov c, 0
8533   3AF3 FD AB         swp b
8534   3AF5 D8            push b
8535   3AF6 3B 22 4D      mov d, _keywords_data ; $keywords
8536   3AF9 D7            push a
8537   3AFA DA            push d
8538   3AFB FA FF FF      lea d, [bp + -1] ; $i
8539   3AFE 2A            mov b, [d]
8540   3AFF 38 00 00      mov c, 0
8541   3B02 E7            pop d
8542   3B03 FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
8543   3B07 E4            pop a
8544   3B08 58 00 00      add d, 0
8545   3B0B 2A            mov b, [d]
8546   3B0C 38 00 00      mov c, 0
8547   3B0F FD AB         swp b
8548   3B11 D8            push b
8549   3B12 07 EC 48      call strcmp
8550   3B15 51 04 00      add sp, 4
8551   3B18             ; --- END FUNCTION CALL
8552   3B18 C0 00 00      cmp b, 0
8553   3B1B C6 3E 3B      je _if191_exit
8554   3B1E             _if191_TRUE:
8555   3B1E             ; return keywords[i].tok; 
8556   3B1E 3B 22 4D      mov d, _keywords_data ; $keywords
8557   3B21 D7            push a
8558   3B22 DA            push d
8559   3B23 FA FF FF      lea d, [bp + -1] ; $i
8560   3B26 2A            mov b, [d]
8561   3B27 38 00 00      mov c, 0
8562   3B2A E7            pop d
8563   3B2B FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
8564   3B2F E4            pop a
8565   3B30 58 02 00      add d, 2
8566   3B33 32            mov bl, [d]
8567   3B34 A7 00         mov bh, 0
8568   3B36 38 00 00      mov c, 0
8569   3B39 F9            leave
8570   3B3A 09            ret
8571   3B3B 0A 3E 3B      jmp _if191_exit
8572   3B3E             _if191_exit:
8573   3B3E             _for190_update:
8574   3B3E FA FF FF      lea d, [bp + -1] ; $i
8575   3B41 2A            mov b, [d]
8576   3B42 38 00 00      mov c, 0
8577   3B45 11            mov a, b
8578   3B46 FD 77         inc b
8579   3B48 FA FF FF      lea d, [bp + -1] ; $i
8580   3B4B FD 43         mov [d], b
8581   3B4D 27            mov b, a
8582   3B4E 0A BD 3A      jmp _for190_cond
8583   3B51             _for190_exit:
8584   3B51             ; return -1; 
8585   3B51 FD 2E FF FF   mov32 cb, $ffffffff
8585   3B55 FF FF 
8586   3B57 F9            leave
8587   3B58 09            ret
8588   3B59             
8589   3B59             hex_to_int:
8590   3B59 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8591   3B5C             ; int value = 0; 
8592   3B5C 52 02 00      sub sp, 2
8593   3B5F             ; --- START LOCAL VAR INITIALIZATION
8594   3B5F FA FF FF      lea d, [bp + -1] ; $value
8595   3B62 DA            push d
8596   3B63 FD 2E 00 00   mov32 cb, $00000000
8596   3B67 00 00 
8597   3B69 E7            pop d
8598   3B6A FD 43         mov [d], b
8599   3B6C             ; --- END LOCAL VAR INITIALIZATION
8600   3B6C             ; int i; 
8601   3B6C 52 02 00      sub sp, 2
8602   3B6F             ; char hex_char; 
8603   3B6F 52 01 00      sub sp, 1
8604   3B72             ; int len; 
8605   3B72 52 02 00      sub sp, 2
8606   3B75             ; len = strlen(hex_string); 
8607   3B75 FA FA FF      lea d, [bp + -6] ; $len
8608   3B78 DA            push d
8609   3B79             ; --- START FUNCTION CALL
8610   3B79 FA 05 00      lea d, [bp + 5] ; $hex_string
8611   3B7C 2A            mov b, [d]
8612   3B7D 38 00 00      mov c, 0
8613   3B80 FD AB         swp b
8614   3B82 D8            push b
8615   3B83 07 70 49      call strlen
8616   3B86 51 02 00      add sp, 2
8617   3B89             ; --- END FUNCTION CALL
8618   3B89 E7            pop d
8619   3B8A FD 43         mov [d], b
8620   3B8C             ; for (i = 0; i < len; i++) { 
8621   3B8C             _for192_init:
8622   3B8C FA FD FF      lea d, [bp + -3] ; $i
8623   3B8F DA            push d
8624   3B90 FD 2E 00 00   mov32 cb, $00000000
8624   3B94 00 00 
8625   3B96 E7            pop d
8626   3B97 FD 43         mov [d], b
8627   3B99             _for192_cond:
8628   3B99 FA FD FF      lea d, [bp + -3] ; $i
8629   3B9C 2A            mov b, [d]
8630   3B9D 38 00 00      mov c, 0
8631   3BA0             ; --- START RELATIONAL
8632   3BA0 D7            push a
8633   3BA1 11            mov a, b
8634   3BA2 FA FA FF      lea d, [bp + -6] ; $len
8635   3BA5 2A            mov b, [d]
8636   3BA6 38 00 00      mov c, 0
8637   3BA9 B0            cmp a, b
8638   3BAA FD 73         slt ; < (signed)
8639   3BAC E4            pop a
8640   3BAD             ; --- END RELATIONAL
8641   3BAD C0 00 00      cmp b, 0
8642   3BB0 C6 C6 3D      je _for192_exit
8643   3BB3             _for192_block:
8644   3BB3             ; hex_char = hex_string[i]; 
8645   3BB3 FA FC FF      lea d, [bp + -4] ; $hex_char
8646   3BB6 DA            push d
8647   3BB7 FA 05 00      lea d, [bp + 5] ; $hex_string
8648   3BBA FD 2A         mov d, [d]
8649   3BBC D7            push a
8650   3BBD DA            push d
8651   3BBE FA FD FF      lea d, [bp + -3] ; $i
8652   3BC1 2A            mov b, [d]
8653   3BC2 38 00 00      mov c, 0
8654   3BC5 E7            pop d
8655   3BC6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
8656   3BCA E4            pop a
8657   3BCB 32            mov bl, [d]
8658   3BCC A7 00         mov bh, 0
8659   3BCE 38 00 00      mov c, 0
8660   3BD1 E7            pop d
8661   3BD2 FD 3E         mov [d], bl
8662   3BD4             ; if (hex_char >= 'a' && hex_char <= 'f')  
8663   3BD4             _if193_cond:
8664   3BD4 FA FC FF      lea d, [bp + -4] ; $hex_char
8665   3BD7 32            mov bl, [d]
8666   3BD8 A7 00         mov bh, 0
8667   3BDA 38 00 00      mov c, 0
8668   3BDD             ; --- START RELATIONAL
8669   3BDD D7            push a
8670   3BDE 11            mov a, b
8671   3BDF FD 2E 61 00   mov32 cb, $00000061
8671   3BE3 00 00 
8672   3BE5 B0            cmp a, b
8673   3BE6 FD 80         sge ; >=
8674   3BE8 E4            pop a
8675   3BE9             ; --- END RELATIONAL
8676   3BE9             ; --- START LOGICAL AND
8677   3BE9 D7            push a
8678   3BEA 11            mov a, b
8679   3BEB FA FC FF      lea d, [bp + -4] ; $hex_char
8680   3BEE 32            mov bl, [d]
8681   3BEF A7 00         mov bh, 0
8682   3BF1 38 00 00      mov c, 0
8683   3BF4             ; --- START RELATIONAL
8684   3BF4 D7            push a
8685   3BF5 11            mov a, b
8686   3BF6 FD 2E 66 00   mov32 cb, $00000066
8686   3BFA 00 00 
8687   3BFC B0            cmp a, b
8688   3BFD FD 74         sle ; <= (signed)
8689   3BFF E4            pop a
8690   3C00             ; --- END RELATIONAL
8691   3C00 FD A7         sand a, b
8692   3C02 E4            pop a
8693   3C03             ; --- END LOGICAL AND
8694   3C03 C0 00 00      cmp b, 0
8695   3C06 C6 89 3C      je _if193_else
8696   3C09             _if193_TRUE:
8697   3C09             ; value = (value * 16) + (hex_char - 'a' + 10); 
8698   3C09 FA FF FF      lea d, [bp + -1] ; $value
8699   3C0C DA            push d
8700   3C0D FA FF FF      lea d, [bp + -1] ; $value
8701   3C10 2A            mov b, [d]
8702   3C11 38 00 00      mov c, 0
8703   3C14             ; --- START FACTORS
8704   3C14 D7            push a
8705   3C15 FD D8         push g
8706   3C17 11            mov a, b
8707   3C18 FD 7A         mov g, c
8708   3C1A FD 2E 10 00   mov32 cb, $00000010
8708   3C1E 00 00 
8709   3C20 D7            push a     ; save left operand
8710   3C21 8E            xor a, b   ; xor sign bits
8711   3C22 FD AA         swp a      ; swap bytes
8712   3C24 83            mov cl, al ; save result of xor into 'dl'
8713   3C25 E4            pop a      ; restore left side operator
8714   3C26 DF            push cl    ; save result of xor above
8715   3C27 FD AA         swp a  
8716   3C29 93 80         test al, $80  
8717   3C2B FD AA         swp a  
8718   3C2D C6 32 3C      jz skip_invert_a_197  
8719   3C30 FD 95         neg a 
8720   3C32             skip_invert_a_197:   
8721   3C32 FD AB         swp b
8722   3C34 FD 93 80      test bl, $80  
8723   3C37 FD AB         swp b
8724   3C39 C6 3E 3C      jz skip_invert_b_197  
8725   3C3C FD 97         neg b 
8726   3C3E             skip_invert_b_197:   
8727   3C3E AC            mul a, b ; *
8728   3C3F FD 78         mov g, a
8729   3C41 11            mov a, b
8730   3C42 EA            pop bl
8731   3C43 FD 93 80      test bl, $80
8732   3C46 C6 53 3C      jz _same_signs_197
8733   3C49 2F            mov bl, al
8734   3C4A 95            not a
8735   3C4B FD 97         neg b
8736   3C4D 5B 00 00      adc a, 0
8737   3C50 FD 78         mov g, a
8738   3C52 11            mov a, b
8739   3C53             _same_signs_197:
8740   3C53 FD 38         mov c, g
8741   3C55 27            mov b, a
8742   3C56 FD F1         pop g
8743   3C58 E4            pop a
8744   3C59             ; --- END FACTORS
8745   3C59             ; --- START TERMS
8746   3C59 D7            push a
8747   3C5A FD D8         push g
8748   3C5C 11            mov a, b
8749   3C5D FD 7A         mov g, c
8750   3C5F FA FC FF      lea d, [bp + -4] ; $hex_char
8751   3C62 32            mov bl, [d]
8752   3C63 A7 00         mov bh, 0
8753   3C65 38 00 00      mov c, 0
8754   3C68             ; --- START TERMS
8755   3C68 D7            push a
8756   3C69 11            mov a, b
8757   3C6A FD 2E 61 00   mov32 cb, $00000061
8757   3C6E 00 00 
8758   3C70 60            sub a, b
8759   3C71 27            mov b, a
8760   3C72 11            mov a, b
8761   3C73 FD 2E 0A 00   mov32 cb, $0000000a
8761   3C77 00 00 
8762   3C79 56            add b, a
8763   3C7A E4            pop a
8764   3C7B             ; --- END TERMS
8765   3C7B 38 00 00      mov c, 0
8766   3C7E FD 15         add32 cb, ga
8767   3C80 FD F1         pop g
8768   3C82 E4            pop a
8769   3C83             ; --- END TERMS
8770   3C83 E7            pop d
8771   3C84 FD 43         mov [d], b
8772   3C86 0A B3 3D      jmp _if193_exit
8773   3C89             _if193_else:
8774   3C89             ; if (hex_char >= 'A' && hex_char <= 'F')  
8775   3C89             _if198_cond:
8776   3C89 FA FC FF      lea d, [bp + -4] ; $hex_char
8777   3C8C 32            mov bl, [d]
8778   3C8D A7 00         mov bh, 0
8779   3C8F 38 00 00      mov c, 0
8780   3C92             ; --- START RELATIONAL
8781   3C92 D7            push a
8782   3C93 11            mov a, b
8783   3C94 FD 2E 41 00   mov32 cb, $00000041
8783   3C98 00 00 
8784   3C9A B0            cmp a, b
8785   3C9B FD 80         sge ; >=
8786   3C9D E4            pop a
8787   3C9E             ; --- END RELATIONAL
8788   3C9E             ; --- START LOGICAL AND
8789   3C9E D7            push a
8790   3C9F 11            mov a, b
8791   3CA0 FA FC FF      lea d, [bp + -4] ; $hex_char
8792   3CA3 32            mov bl, [d]
8793   3CA4 A7 00         mov bh, 0
8794   3CA6 38 00 00      mov c, 0
8795   3CA9             ; --- START RELATIONAL
8796   3CA9 D7            push a
8797   3CAA 11            mov a, b
8798   3CAB FD 2E 46 00   mov32 cb, $00000046
8798   3CAF 00 00 
8799   3CB1 B0            cmp a, b
8800   3CB2 FD 74         sle ; <= (signed)
8801   3CB4 E4            pop a
8802   3CB5             ; --- END RELATIONAL
8803   3CB5 FD A7         sand a, b
8804   3CB7 E4            pop a
8805   3CB8             ; --- END LOGICAL AND
8806   3CB8 C0 00 00      cmp b, 0
8807   3CBB C6 3E 3D      je _if198_else
8808   3CBE             _if198_TRUE:
8809   3CBE             ; value = (value * 16) + (hex_char - 'A' + 10); 
8810   3CBE FA FF FF      lea d, [bp + -1] ; $value
8811   3CC1 DA            push d
8812   3CC2 FA FF FF      lea d, [bp + -1] ; $value
8813   3CC5 2A            mov b, [d]
8814   3CC6 38 00 00      mov c, 0
8815   3CC9             ; --- START FACTORS
8816   3CC9 D7            push a
8817   3CCA FD D8         push g
8818   3CCC 11            mov a, b
8819   3CCD FD 7A         mov g, c
8820   3CCF FD 2E 10 00   mov32 cb, $00000010
8820   3CD3 00 00 
8821   3CD5 D7            push a     ; save left operand
8822   3CD6 8E            xor a, b   ; xor sign bits
8823   3CD7 FD AA         swp a      ; swap bytes
8824   3CD9 83            mov cl, al ; save result of xor into 'dl'
8825   3CDA E4            pop a      ; restore left side operator
8826   3CDB DF            push cl    ; save result of xor above
8827   3CDC FD AA         swp a  
8828   3CDE 93 80         test al, $80  
8829   3CE0 FD AA         swp a  
8830   3CE2 C6 E7 3C      jz skip_invert_a_202  
8831   3CE5 FD 95         neg a 
8832   3CE7             skip_invert_a_202:   
8833   3CE7 FD AB         swp b
8834   3CE9 FD 93 80      test bl, $80  
8835   3CEC FD AB         swp b
8836   3CEE C6 F3 3C      jz skip_invert_b_202  
8837   3CF1 FD 97         neg b 
8838   3CF3             skip_invert_b_202:   
8839   3CF3 AC            mul a, b ; *
8840   3CF4 FD 78         mov g, a
8841   3CF6 11            mov a, b
8842   3CF7 EA            pop bl
8843   3CF8 FD 93 80      test bl, $80
8844   3CFB C6 08 3D      jz _same_signs_202
8845   3CFE 2F            mov bl, al
8846   3CFF 95            not a
8847   3D00 FD 97         neg b
8848   3D02 5B 00 00      adc a, 0
8849   3D05 FD 78         mov g, a
8850   3D07 11            mov a, b
8851   3D08             _same_signs_202:
8852   3D08 FD 38         mov c, g
8853   3D0A 27            mov b, a
8854   3D0B FD F1         pop g
8855   3D0D E4            pop a
8856   3D0E             ; --- END FACTORS
8857   3D0E             ; --- START TERMS
8858   3D0E D7            push a
8859   3D0F FD D8         push g
8860   3D11 11            mov a, b
8861   3D12 FD 7A         mov g, c
8862   3D14 FA FC FF      lea d, [bp + -4] ; $hex_char
8863   3D17 32            mov bl, [d]
8864   3D18 A7 00         mov bh, 0
8865   3D1A 38 00 00      mov c, 0
8866   3D1D             ; --- START TERMS
8867   3D1D D7            push a
8868   3D1E 11            mov a, b
8869   3D1F FD 2E 41 00   mov32 cb, $00000041
8869   3D23 00 00 
8870   3D25 60            sub a, b
8871   3D26 27            mov b, a
8872   3D27 11            mov a, b
8873   3D28 FD 2E 0A 00   mov32 cb, $0000000a
8873   3D2C 00 00 
8874   3D2E 56            add b, a
8875   3D2F E4            pop a
8876   3D30             ; --- END TERMS
8877   3D30 38 00 00      mov c, 0
8878   3D33 FD 15         add32 cb, ga
8879   3D35 FD F1         pop g
8880   3D37 E4            pop a
8881   3D38             ; --- END TERMS
8882   3D38 E7            pop d
8883   3D39 FD 43         mov [d], b
8884   3D3B 0A B3 3D      jmp _if198_exit
8885   3D3E             _if198_else:
8886   3D3E             ; value = (value * 16) + (hex_char - '0'); 
8887   3D3E FA FF FF      lea d, [bp + -1] ; $value
8888   3D41 DA            push d
8889   3D42 FA FF FF      lea d, [bp + -1] ; $value
8890   3D45 2A            mov b, [d]
8891   3D46 38 00 00      mov c, 0
8892   3D49             ; --- START FACTORS
8893   3D49 D7            push a
8894   3D4A FD D8         push g
8895   3D4C 11            mov a, b
8896   3D4D FD 7A         mov g, c
8897   3D4F FD 2E 10 00   mov32 cb, $00000010
8897   3D53 00 00 
8898   3D55 D7            push a     ; save left operand
8899   3D56 8E            xor a, b   ; xor sign bits
8900   3D57 FD AA         swp a      ; swap bytes
8901   3D59 83            mov cl, al ; save result of xor into 'dl'
8902   3D5A E4            pop a      ; restore left side operator
8903   3D5B DF            push cl    ; save result of xor above
8904   3D5C FD AA         swp a  
8905   3D5E 93 80         test al, $80  
8906   3D60 FD AA         swp a  
8907   3D62 C6 67 3D      jz skip_invert_a_206  
8908   3D65 FD 95         neg a 
8909   3D67             skip_invert_a_206:   
8910   3D67 FD AB         swp b
8911   3D69 FD 93 80      test bl, $80  
8912   3D6C FD AB         swp b
8913   3D6E C6 73 3D      jz skip_invert_b_206  
8914   3D71 FD 97         neg b 
8915   3D73             skip_invert_b_206:   
8916   3D73 AC            mul a, b ; *
8917   3D74 FD 78         mov g, a
8918   3D76 11            mov a, b
8919   3D77 EA            pop bl
8920   3D78 FD 93 80      test bl, $80
8921   3D7B C6 88 3D      jz _same_signs_206
8922   3D7E 2F            mov bl, al
8923   3D7F 95            not a
8924   3D80 FD 97         neg b
8925   3D82 5B 00 00      adc a, 0
8926   3D85 FD 78         mov g, a
8927   3D87 11            mov a, b
8928   3D88             _same_signs_206:
8929   3D88 FD 38         mov c, g
8930   3D8A 27            mov b, a
8931   3D8B FD F1         pop g
8932   3D8D E4            pop a
8933   3D8E             ; --- END FACTORS
8934   3D8E             ; --- START TERMS
8935   3D8E D7            push a
8936   3D8F FD D8         push g
8937   3D91 11            mov a, b
8938   3D92 FD 7A         mov g, c
8939   3D94 FA FC FF      lea d, [bp + -4] ; $hex_char
8940   3D97 32            mov bl, [d]
8941   3D98 A7 00         mov bh, 0
8942   3D9A 38 00 00      mov c, 0
8943   3D9D             ; --- START TERMS
8944   3D9D D7            push a
8945   3D9E 11            mov a, b
8946   3D9F FD 2E 30 00   mov32 cb, $00000030
8946   3DA3 00 00 
8947   3DA5 60            sub a, b
8948   3DA6 27            mov b, a
8949   3DA7 E4            pop a
8950   3DA8             ; --- END TERMS
8951   3DA8 38 00 00      mov c, 0
8952   3DAB FD 15         add32 cb, ga
8953   3DAD FD F1         pop g
8954   3DAF E4            pop a
8955   3DB0             ; --- END TERMS
8956   3DB0 E7            pop d
8957   3DB1 FD 43         mov [d], b
8958   3DB3             _if198_exit:
8959   3DB3             _if193_exit:
8960   3DB3             _for192_update:
8961   3DB3 FA FD FF      lea d, [bp + -3] ; $i
8962   3DB6 2A            mov b, [d]
8963   3DB7 38 00 00      mov c, 0
8964   3DBA 11            mov a, b
8965   3DBB FD 77         inc b
8966   3DBD FA FD FF      lea d, [bp + -3] ; $i
8967   3DC0 FD 43         mov [d], b
8968   3DC2 27            mov b, a
8969   3DC3 0A 99 3B      jmp _for192_cond
8970   3DC6             _for192_exit:
8971   3DC6             ; return value; 
8972   3DC6 FA FF FF      lea d, [bp + -1] ; $value
8973   3DC9 2A            mov b, [d]
8974   3DCA 38 00 00      mov c, 0
8975   3DCD F9            leave
8976   3DCE 09            ret
8977   3DCF             
8978   3DCF             loadfile:
8979   3DCF F8 00 00      enter 0 ; (push bp; mov bp, sp)
8980   3DD2             ; --- BEGIN INLINE ASM SEGMENT
8981   3DD2 FA 07 00      lea d, [bp + 7] ; $destination
8982   3DD5 15            mov a, [d]
8983   3DD6 4F            mov di, a
8984   3DD7 FA 05 00      lea d, [bp + 5] ; $filename
8985   3DDA FD 2A         mov d, [d]
8986   3DDC 19 14         mov al, 20
8987   3DDE 05 04         syscall sys_filesystem
8988   3DE0             ; --- END INLINE ASM SEGMENT
8989   3DE0 F9            leave
8990   3DE1 09            ret
8991   3DE2             
8992   3DE2             _exp:
8993   3DE2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8994   3DE5             ; int i; 
8995   3DE5 52 02 00      sub sp, 2
8996   3DE8             ; int result = 1; 
8997   3DE8 52 02 00      sub sp, 2
8998   3DEB             ; --- START LOCAL VAR INITIALIZATION
8999   3DEB FA FD FF      lea d, [bp + -3] ; $result
9000   3DEE DA            push d
9001   3DEF FD 2E 01 00   mov32 cb, $00000001
9001   3DF3 00 00 
9002   3DF5 E7            pop d
9003   3DF6 FD 43         mov [d], b
9004   3DF8             ; --- END LOCAL VAR INITIALIZATION
9005   3DF8             ; for(i = 0; i < _exp; i++){ 
9006   3DF8             _for207_init:
9007   3DF8 FA FF FF      lea d, [bp + -1] ; $i
9008   3DFB DA            push d
9009   3DFC FD 2E 00 00   mov32 cb, $00000000
9009   3E00 00 00 
9010   3E02 E7            pop d
9011   3E03 FD 43         mov [d], b
9012   3E05             _for207_cond:
9013   3E05 FA FF FF      lea d, [bp + -1] ; $i
9014   3E08 2A            mov b, [d]
9015   3E09 38 00 00      mov c, 0
9016   3E0C             ; --- START RELATIONAL
9017   3E0C D7            push a
9018   3E0D 11            mov a, b
9019   3E0E FA 07 00      lea d, [bp + 7] ; $_exp
9020   3E11 2A            mov b, [d]
9021   3E12 38 00 00      mov c, 0
9022   3E15 B0            cmp a, b
9023   3E16 FD 73         slt ; < (signed)
9024   3E18 E4            pop a
9025   3E19             ; --- END RELATIONAL
9026   3E19 C0 00 00      cmp b, 0
9027   3E1C C6 86 3E      je _for207_exit
9028   3E1F             _for207_block:
9029   3E1F             ; result = result * base; 
9030   3E1F FA FD FF      lea d, [bp + -3] ; $result
9031   3E22 DA            push d
9032   3E23 FA FD FF      lea d, [bp + -3] ; $result
9033   3E26 2A            mov b, [d]
9034   3E27 38 00 00      mov c, 0
9035   3E2A             ; --- START FACTORS
9036   3E2A D7            push a
9037   3E2B FD D8         push g
9038   3E2D 11            mov a, b
9039   3E2E FD 7A         mov g, c
9040   3E30 FA 05 00      lea d, [bp + 5] ; $base
9041   3E33 2A            mov b, [d]
9042   3E34 38 00 00      mov c, 0
9043   3E37 D7            push a     ; save left operand
9044   3E38 8E            xor a, b   ; xor sign bits
9045   3E39 FD AA         swp a      ; swap bytes
9046   3E3B 83            mov cl, al ; save result of xor into 'dl'
9047   3E3C E4            pop a      ; restore left side operator
9048   3E3D DF            push cl    ; save result of xor above
9049   3E3E FD AA         swp a  
9050   3E40 93 80         test al, $80  
9051   3E42 FD AA         swp a  
9052   3E44 C6 49 3E      jz skip_invert_a_209  
9053   3E47 FD 95         neg a 
9054   3E49             skip_invert_a_209:   
9055   3E49 FD AB         swp b
9056   3E4B FD 93 80      test bl, $80  
9057   3E4E FD AB         swp b
9058   3E50 C6 55 3E      jz skip_invert_b_209  
9059   3E53 FD 97         neg b 
9060   3E55             skip_invert_b_209:   
9061   3E55 AC            mul a, b ; *
9062   3E56 FD 78         mov g, a
9063   3E58 11            mov a, b
9064   3E59 EA            pop bl
9065   3E5A FD 93 80      test bl, $80
9066   3E5D C6 6A 3E      jz _same_signs_209
9067   3E60 2F            mov bl, al
9068   3E61 95            not a
9069   3E62 FD 97         neg b
9070   3E64 5B 00 00      adc a, 0
9071   3E67 FD 78         mov g, a
9072   3E69 11            mov a, b
9073   3E6A             _same_signs_209:
9074   3E6A FD 38         mov c, g
9075   3E6C 27            mov b, a
9076   3E6D FD F1         pop g
9077   3E6F E4            pop a
9078   3E70             ; --- END FACTORS
9079   3E70 E7            pop d
9080   3E71 FD 43         mov [d], b
9081   3E73             _for207_update:
9082   3E73 FA FF FF      lea d, [bp + -1] ; $i
9083   3E76 2A            mov b, [d]
9084   3E77 38 00 00      mov c, 0
9085   3E7A 11            mov a, b
9086   3E7B FD 77         inc b
9087   3E7D FA FF FF      lea d, [bp + -1] ; $i
9088   3E80 FD 43         mov [d], b
9089   3E82 27            mov b, a
9090   3E83 0A 05 3E      jmp _for207_cond
9091   3E86             _for207_exit:
9092   3E86             ; return result; 
9093   3E86 FA FD FF      lea d, [bp + -3] ; $result
9094   3E89 2A            mov b, [d]
9095   3E8A 38 00 00      mov c, 0
9096   3E8D F9            leave
9097   3E8E 09            ret
9098   3E8F             
9099   3E8F             printf:
9100   3E8F F8 00 00      enter 0 ; (push bp; mov bp, sp)
9101   3E92             ; char *p, *format_p; 
9102   3E92 52 02 00      sub sp, 2
9103   3E95 52 02 00      sub sp, 2
9104   3E98             ; format_p = format; 
9105   3E98 FA FD FF      lea d, [bp + -3] ; $format_p
9106   3E9B DA            push d
9107   3E9C FA 05 00      lea d, [bp + 5] ; $format
9108   3E9F 2A            mov b, [d]
9109   3EA0 38 00 00      mov c, 0
9110   3EA3 E7            pop d
9111   3EA4 FD 43         mov [d], b
9112   3EA6             ; p = &format + 2; 
9113   3EA6 FA FF FF      lea d, [bp + -1] ; $p
9114   3EA9 DA            push d
9115   3EAA FA 05 00      lea d, [bp + 5] ; $format
9116   3EAD 2D            mov b, d
9117   3EAE             ; --- START TERMS
9118   3EAE D7            push a
9119   3EAF 11            mov a, b
9120   3EB0 FD 2E 02 00   mov32 cb, $00000002
9120   3EB4 00 00 
9121   3EB6 56            add b, a
9122   3EB7 E4            pop a
9123   3EB8             ; --- END TERMS
9124   3EB8 E7            pop d
9125   3EB9 FD 43         mov [d], b
9126   3EBB             ; for(;;){ 
9127   3EBB             _for210_init:
9128   3EBB             _for210_cond:
9129   3EBB             _for210_block:
9130   3EBB             ; if(!*format_p) break; 
9131   3EBB             _if211_cond:
9132   3EBB FA FD FF      lea d, [bp + -3] ; $format_p
9133   3EBE 2A            mov b, [d]
9134   3EBF 38 00 00      mov c, 0
9135   3EC2 74            mov d, b
9136   3EC3 32            mov bl, [d]
9137   3EC4 A7 00         mov bh, 0
9138   3EC6 38 00 00      mov c, 0
9139   3EC9 C0 00 00      cmp b, 0
9140   3ECC FD 71         seq ; !
9141   3ECE C0 00 00      cmp b, 0
9142   3ED1 C6 DA 3E      je _if211_else
9143   3ED4             _if211_TRUE:
9144   3ED4             ; break; 
9145   3ED4 0A 7A 41      jmp _for210_exit ; for break
9146   3ED7 0A 67 41      jmp _if211_exit
9147   3EDA             _if211_else:
9148   3EDA             ; if(*format_p == '%'){ 
9149   3EDA             _if212_cond:
9150   3EDA FA FD FF      lea d, [bp + -3] ; $format_p
9151   3EDD 2A            mov b, [d]
9152   3EDE 38 00 00      mov c, 0
9153   3EE1 74            mov d, b
9154   3EE2 32            mov bl, [d]
9155   3EE3 A7 00         mov bh, 0
9156   3EE5 38 00 00      mov c, 0
9157   3EE8             ; --- START RELATIONAL
9158   3EE8 D7            push a
9159   3EE9 11            mov a, b
9160   3EEA FD 2E 25 00   mov32 cb, $00000025
9160   3EEE 00 00 
9161   3EF0 B0            cmp a, b
9162   3EF1 FD 71         seq ; ==
9163   3EF3 E4            pop a
9164   3EF4             ; --- END RELATIONAL
9165   3EF4 C0 00 00      cmp b, 0
9166   3EF7 C6 52 41      je _if212_else
9167   3EFA             _if212_TRUE:
9168   3EFA             ; format_p++; 
9169   3EFA FA FD FF      lea d, [bp + -3] ; $format_p
9170   3EFD 2A            mov b, [d]
9171   3EFE 38 00 00      mov c, 0
9172   3F01 FD 77         inc b
9173   3F03 FA FD FF      lea d, [bp + -3] ; $format_p
9174   3F06 FD 43         mov [d], b
9175   3F08 FD 7D         dec b
9176   3F0A             ; switch(*format_p){ 
9177   3F0A             _switch213_expr:
9178   3F0A FA FD FF      lea d, [bp + -3] ; $format_p
9179   3F0D 2A            mov b, [d]
9180   3F0E 38 00 00      mov c, 0
9181   3F11 74            mov d, b
9182   3F12 32            mov bl, [d]
9183   3F13 A7 00         mov bh, 0
9184   3F15 38 00 00      mov c, 0
9185   3F18             _switch213_comparisons:
9186   3F18 C1 6C         cmp bl, $6c
9187   3F1A C6 46 3F      je _switch213_case0
9188   3F1D C1 4C         cmp bl, $4c
9189   3F1F C6 46 3F      je _switch213_case1
9190   3F22 C1 64         cmp bl, $64
9191   3F24 C6 56 40      je _switch213_case2
9192   3F27 C1 69         cmp bl, $69
9193   3F29 C6 56 40      je _switch213_case3
9194   3F2C C1 75         cmp bl, $75
9195   3F2E C6 86 40      je _switch213_case4
9196   3F31 C1 78         cmp bl, $78
9197   3F33 C6 B6 40      je _switch213_case5
9198   3F36 C1 63         cmp bl, $63
9199   3F38 C6 E6 40      je _switch213_case6
9200   3F3B C1 73         cmp bl, $73
9201   3F3D C6 16 41      je _switch213_case7
9202   3F40 0A 43 41      jmp _switch213_default
9203   3F43 0A 4F 41      jmp _switch213_exit
9204   3F46             _switch213_case0:
9205   3F46             _switch213_case1:
9206   3F46             ; format_p++; 
9207   3F46 FA FD FF      lea d, [bp + -3] ; $format_p
9208   3F49 2A            mov b, [d]
9209   3F4A 38 00 00      mov c, 0
9210   3F4D FD 77         inc b
9211   3F4F FA FD FF      lea d, [bp + -3] ; $format_p
9212   3F52 FD 43         mov [d], b
9213   3F54 FD 7D         dec b
9214   3F56             ; if(*format_p == 'd' || *format_p == 'i') 
9215   3F56             _if214_cond:
9216   3F56 FA FD FF      lea d, [bp + -3] ; $format_p
9217   3F59 2A            mov b, [d]
9218   3F5A 38 00 00      mov c, 0
9219   3F5D 74            mov d, b
9220   3F5E 32            mov bl, [d]
9221   3F5F A7 00         mov bh, 0
9222   3F61 38 00 00      mov c, 0
9223   3F64             ; --- START RELATIONAL
9224   3F64 D7            push a
9225   3F65 11            mov a, b
9226   3F66 FD 2E 64 00   mov32 cb, $00000064
9226   3F6A 00 00 
9227   3F6C B0            cmp a, b
9228   3F6D FD 71         seq ; ==
9229   3F6F E4            pop a
9230   3F70             ; --- END RELATIONAL
9231   3F70             ; --- START LOGICAL OR
9232   3F70 D7            push a
9233   3F71 11            mov a, b
9234   3F72 FA FD FF      lea d, [bp + -3] ; $format_p
9235   3F75 2A            mov b, [d]
9236   3F76 38 00 00      mov c, 0
9237   3F79 74            mov d, b
9238   3F7A 32            mov bl, [d]
9239   3F7B A7 00         mov bh, 0
9240   3F7D 38 00 00      mov c, 0
9241   3F80             ; --- START RELATIONAL
9242   3F80 D7            push a
9243   3F81 11            mov a, b
9244   3F82 FD 2E 69 00   mov32 cb, $00000069
9244   3F86 00 00 
9245   3F88 B0            cmp a, b
9246   3F89 FD 71         seq ; ==
9247   3F8B E4            pop a
9248   3F8C             ; --- END RELATIONAL
9249   3F8C FD A8         sor a, b ; ||
9250   3F8E E4            pop a
9251   3F8F             ; --- END LOGICAL OR
9252   3F8F C0 00 00      cmp b, 0
9253   3F92 C6 B3 3F      je _if214_else
9254   3F95             _if214_TRUE:
9255   3F95             ; print_signed_long(*(long *)p); 
9256   3F95             ; --- START FUNCTION CALL
9257   3F95 FA FF FF      lea d, [bp + -1] ; $p
9258   3F98 2A            mov b, [d]
9259   3F99 38 00 00      mov c, 0
9260   3F9C 74            mov d, b
9261   3F9D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9262   3FA0 FD 39         mov c, b ; And place it into C
9263   3FA2 2A            mov b, [d] ; Lower Word in B
9264   3FA3 12            mov a, c
9265   3FA4 FD AA         swp a
9266   3FA6 D7            push a
9267   3FA7 FD AB         swp b
9268   3FA9 D8            push b
9269   3FAA 07 7C 41      call print_signed_long
9270   3FAD 51 04 00      add sp, 4
9271   3FB0             ; --- END FUNCTION CALL
9272   3FB0 0A 3B 40      jmp _if214_exit
9273   3FB3             _if214_else:
9274   3FB3             ; if(*format_p == 'u') 
9275   3FB3             _if215_cond:
9276   3FB3 FA FD FF      lea d, [bp + -3] ; $format_p
9277   3FB6 2A            mov b, [d]
9278   3FB7 38 00 00      mov c, 0
9279   3FBA 74            mov d, b
9280   3FBB 32            mov bl, [d]
9281   3FBC A7 00         mov bh, 0
9282   3FBE 38 00 00      mov c, 0
9283   3FC1             ; --- START RELATIONAL
9284   3FC1 D7            push a
9285   3FC2 11            mov a, b
9286   3FC3 FD 2E 75 00   mov32 cb, $00000075
9286   3FC7 00 00 
9287   3FC9 B0            cmp a, b
9288   3FCA FD 71         seq ; ==
9289   3FCC E4            pop a
9290   3FCD             ; --- END RELATIONAL
9291   3FCD C0 00 00      cmp b, 0
9292   3FD0 C6 F1 3F      je _if215_else
9293   3FD3             _if215_TRUE:
9294   3FD3             ; print_unsigned_long(*(unsigned long *)p); 
9295   3FD3             ; --- START FUNCTION CALL
9296   3FD3 FA FF FF      lea d, [bp + -1] ; $p
9297   3FD6 2A            mov b, [d]
9298   3FD7 38 00 00      mov c, 0
9299   3FDA 74            mov d, b
9300   3FDB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9301   3FDE FD 39         mov c, b ; And place it into C
9302   3FE0 2A            mov b, [d] ; Lower Word in B
9303   3FE1 12            mov a, c
9304   3FE2 FD AA         swp a
9305   3FE4 D7            push a
9306   3FE5 FD AB         swp b
9307   3FE7 D8            push b
9308   3FE8 07 1C 43      call print_unsigned_long
9309   3FEB 51 04 00      add sp, 4
9310   3FEE             ; --- END FUNCTION CALL
9311   3FEE 0A 3B 40      jmp _if215_exit
9312   3FF1             _if215_else:
9313   3FF1             ; if(*format_p == 'x') 
9314   3FF1             _if216_cond:
9315   3FF1 FA FD FF      lea d, [bp + -3] ; $format_p
9316   3FF4 2A            mov b, [d]
9317   3FF5 38 00 00      mov c, 0
9318   3FF8 74            mov d, b
9319   3FF9 32            mov bl, [d]
9320   3FFA A7 00         mov bh, 0
9321   3FFC 38 00 00      mov c, 0
9322   3FFF             ; --- START RELATIONAL
9323   3FFF D7            push a
9324   4000 11            mov a, b
9325   4001 FD 2E 78 00   mov32 cb, $00000078
9325   4005 00 00 
9326   4007 B0            cmp a, b
9327   4008 FD 71         seq ; ==
9328   400A E4            pop a
9329   400B             ; --- END RELATIONAL
9330   400B C0 00 00      cmp b, 0
9331   400E C6 2F 40      je _if216_else
9332   4011             _if216_TRUE:
9333   4011             ; printx32(*(long int *)p); 
9334   4011             ; --- START FUNCTION CALL
9335   4011 FA FF FF      lea d, [bp + -1] ; $p
9336   4014 2A            mov b, [d]
9337   4015 38 00 00      mov c, 0
9338   4018 74            mov d, b
9339   4019 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9340   401C FD 39         mov c, b ; And place it into C
9341   401E 2A            mov b, [d] ; Lower Word in B
9342   401F 12            mov a, c
9343   4020 FD AA         swp a
9344   4022 D7            push a
9345   4023 FD AB         swp b
9346   4025 D8            push b
9347   4026 07 5A 44      call printx32
9348   4029 51 04 00      add sp, 4
9349   402C             ; --- END FUNCTION CALL
9350   402C 0A 3B 40      jmp _if216_exit
9351   402F             _if216_else:
9352   402F             ; err("Unexpected format in printf."); 
9353   402F             ; --- START FUNCTION CALL
9354   402F 26 B0 53      mov b, _s84 ; "Unexpected format in printf."
9355   4032 FD AB         swp b
9356   4034 D8            push b
9357   4035 07 BA 44      call err
9358   4038 51 02 00      add sp, 2
9359   403B             ; --- END FUNCTION CALL
9360   403B             _if216_exit:
9361   403B             _if215_exit:
9362   403B             _if214_exit:
9363   403B             ; p = p + 4; 
9364   403B FA FF FF      lea d, [bp + -1] ; $p
9365   403E DA            push d
9366   403F FA FF FF      lea d, [bp + -1] ; $p
9367   4042 2A            mov b, [d]
9368   4043 38 00 00      mov c, 0
9369   4046             ; --- START TERMS
9370   4046 D7            push a
9371   4047 11            mov a, b
9372   4048 FD 2E 04 00   mov32 cb, $00000004
9372   404C 00 00 
9373   404E 56            add b, a
9374   404F E4            pop a
9375   4050             ; --- END TERMS
9376   4050 E7            pop d
9377   4051 FD 43         mov [d], b
9378   4053             ; break; 
9379   4053 0A 4F 41      jmp _switch213_exit ; case break
9380   4056             _switch213_case2:
9381   4056             _switch213_case3:
9382   4056             ; print_signed(*(int*)p); 
9383   4056             ; --- START FUNCTION CALL
9384   4056 FA FF FF      lea d, [bp + -1] ; $p
9385   4059 2A            mov b, [d]
9386   405A 38 00 00      mov c, 0
9387   405D 74            mov d, b
9388   405E 2A            mov b, [d]
9389   405F 38 00 00      mov c, 0
9390   4062 FD AB         swp b
9391   4064 D8            push b
9392   4065 07 E8 44      call print_signed
9393   4068 51 02 00      add sp, 2
9394   406B             ; --- END FUNCTION CALL
9395   406B             ; p = p + 2; 
9396   406B FA FF FF      lea d, [bp + -1] ; $p
9397   406E DA            push d
9398   406F FA FF FF      lea d, [bp + -1] ; $p
9399   4072 2A            mov b, [d]
9400   4073 38 00 00      mov c, 0
9401   4076             ; --- START TERMS
9402   4076 D7            push a
9403   4077 11            mov a, b
9404   4078 FD 2E 02 00   mov32 cb, $00000002
9404   407C 00 00 
9405   407E 56            add b, a
9406   407F E4            pop a
9407   4080             ; --- END TERMS
9408   4080 E7            pop d
9409   4081 FD 43         mov [d], b
9410   4083             ; break; 
9411   4083 0A 4F 41      jmp _switch213_exit ; case break
9412   4086             _switch213_case4:
9413   4086             ; print_unsigned(*(unsigned int*)p); 
9414   4086             ; --- START FUNCTION CALL
9415   4086 FA FF FF      lea d, [bp + -1] ; $p
9416   4089 2A            mov b, [d]
9417   408A 38 00 00      mov c, 0
9418   408D 74            mov d, b
9419   408E 2A            mov b, [d]
9420   408F 38 00 00      mov c, 0
9421   4092 FD AB         swp b
9422   4094 D8            push b
9423   4095 07 39 46      call print_unsigned
9424   4098 51 02 00      add sp, 2
9425   409B             ; --- END FUNCTION CALL
9426   409B             ; p = p + 2; 
9427   409B FA FF FF      lea d, [bp + -1] ; $p
9428   409E DA            push d
9429   409F FA FF FF      lea d, [bp + -1] ; $p
9430   40A2 2A            mov b, [d]
9431   40A3 38 00 00      mov c, 0
9432   40A6             ; --- START TERMS
9433   40A6 D7            push a
9434   40A7 11            mov a, b
9435   40A8 FD 2E 02 00   mov32 cb, $00000002
9435   40AC 00 00 
9436   40AE 56            add b, a
9437   40AF E4            pop a
9438   40B0             ; --- END TERMS
9439   40B0 E7            pop d
9440   40B1 FD 43         mov [d], b
9441   40B3             ; break; 
9442   40B3 0A 4F 41      jmp _switch213_exit ; case break
9443   40B6             _switch213_case5:
9444   40B6             ; printx16(*(int*)p); 
9445   40B6             ; --- START FUNCTION CALL
9446   40B6 FA FF FF      lea d, [bp + -1] ; $p
9447   40B9 2A            mov b, [d]
9448   40BA 38 00 00      mov c, 0
9449   40BD 74            mov d, b
9450   40BE 2A            mov b, [d]
9451   40BF 38 00 00      mov c, 0
9452   40C2 FD AB         swp b
9453   40C4 D8            push b
9454   40C5 07 51 47      call printx16
9455   40C8 51 02 00      add sp, 2
9456   40CB             ; --- END FUNCTION CALL
9457   40CB             ; p = p + 2; 
9458   40CB FA FF FF      lea d, [bp + -1] ; $p
9459   40CE DA            push d
9460   40CF FA FF FF      lea d, [bp + -1] ; $p
9461   40D2 2A            mov b, [d]
9462   40D3 38 00 00      mov c, 0
9463   40D6             ; --- START TERMS
9464   40D6 D7            push a
9465   40D7 11            mov a, b
9466   40D8 FD 2E 02 00   mov32 cb, $00000002
9466   40DC 00 00 
9467   40DE 56            add b, a
9468   40DF E4            pop a
9469   40E0             ; --- END TERMS
9470   40E0 E7            pop d
9471   40E1 FD 43         mov [d], b
9472   40E3             ; break; 
9473   40E3 0A 4F 41      jmp _switch213_exit ; case break
9474   40E6             _switch213_case6:
9475   40E6             ; putchar(*(char*)p); 
9476   40E6             ; --- START FUNCTION CALL
9477   40E6 FA FF FF      lea d, [bp + -1] ; $p
9478   40E9 2A            mov b, [d]
9479   40EA 38 00 00      mov c, 0
9480   40ED 74            mov d, b
9481   40EE 32            mov bl, [d]
9482   40EF A7 00         mov bh, 0
9483   40F1 38 00 00      mov c, 0
9484   40F4 DD            push bl
9485   40F5 07 0E 43      call putchar
9486   40F8 51 01 00      add sp, 1
9487   40FB             ; --- END FUNCTION CALL
9488   40FB             ; p = p + 2; 
9489   40FB FA FF FF      lea d, [bp + -1] ; $p
9490   40FE DA            push d
9491   40FF FA FF FF      lea d, [bp + -1] ; $p
9492   4102 2A            mov b, [d]
9493   4103 38 00 00      mov c, 0
9494   4106             ; --- START TERMS
9495   4106 D7            push a
9496   4107 11            mov a, b
9497   4108 FD 2E 02 00   mov32 cb, $00000002
9497   410C 00 00 
9498   410E 56            add b, a
9499   410F E4            pop a
9500   4110             ; --- END TERMS
9501   4110 E7            pop d
9502   4111 FD 43         mov [d], b
9503   4113             ; break; 
9504   4113 0A 4F 41      jmp _switch213_exit ; case break
9505   4116             _switch213_case7:
9506   4116             ; print(*(char**)p); 
9507   4116             ; --- START FUNCTION CALL
9508   4116 FA FF FF      lea d, [bp + -1] ; $p
9509   4119 2A            mov b, [d]
9510   411A 38 00 00      mov c, 0
9511   411D 74            mov d, b
9512   411E 2A            mov b, [d]
9513   411F FD AB         swp b
9514   4121 D8            push b
9515   4122 07 CF 44      call print
9516   4125 51 02 00      add sp, 2
9517   4128             ; --- END FUNCTION CALL
9518   4128             ; p = p + 2; 
9519   4128 FA FF FF      lea d, [bp + -1] ; $p
9520   412B DA            push d
9521   412C FA FF FF      lea d, [bp + -1] ; $p
9522   412F 2A            mov b, [d]
9523   4130 38 00 00      mov c, 0
9524   4133             ; --- START TERMS
9525   4133 D7            push a
9526   4134 11            mov a, b
9527   4135 FD 2E 02 00   mov32 cb, $00000002
9527   4139 00 00 
9528   413B 56            add b, a
9529   413C E4            pop a
9530   413D             ; --- END TERMS
9531   413D E7            pop d
9532   413E FD 43         mov [d], b
9533   4140             ; break; 
9534   4140 0A 4F 41      jmp _switch213_exit ; case break
9535   4143             _switch213_default:
9536   4143             ; print("Error: Unknown argument type.\n"); 
9537   4143             ; --- START FUNCTION CALL
9538   4143 26 CD 53      mov b, _s85 ; "Error: Unknown argument type.\n"
9539   4146 FD AB         swp b
9540   4148 D8            push b
9541   4149 07 CF 44      call print
9542   414C 51 02 00      add sp, 2
9543   414F             ; --- END FUNCTION CALL
9544   414F             _switch213_exit:
9545   414F 0A 67 41      jmp _if212_exit
9546   4152             _if212_else:
9547   4152             ; putchar(*format_p); 
9548   4152             ; --- START FUNCTION CALL
9549   4152 FA FD FF      lea d, [bp + -3] ; $format_p
9550   4155 2A            mov b, [d]
9551   4156 38 00 00      mov c, 0
9552   4159 74            mov d, b
9553   415A 32            mov bl, [d]
9554   415B A7 00         mov bh, 0
9555   415D 38 00 00      mov c, 0
9556   4160 DD            push bl
9557   4161 07 0E 43      call putchar
9558   4164 51 01 00      add sp, 1
9559   4167             ; --- END FUNCTION CALL
9560   4167             _if212_exit:
9561   4167             _if211_exit:
9562   4167             ; format_p++; 
9563   4167 FA FD FF      lea d, [bp + -3] ; $format_p
9564   416A 2A            mov b, [d]
9565   416B 38 00 00      mov c, 0
9566   416E FD 77         inc b
9567   4170 FA FD FF      lea d, [bp + -3] ; $format_p
9568   4173 FD 43         mov [d], b
9569   4175 FD 7D         dec b
9570   4177             _for210_update:
9571   4177 0A BB 3E      jmp _for210_cond
9572   417A             _for210_exit:
9573   417A F9            leave
9574   417B 09            ret
9575   417C             
9576   417C             print_signed_long:
9577   417C F8 00 00      enter 0 ; (push bp; mov bp, sp)
9578   417F             ; char digits[10]; 
9579   417F 52 0A 00      sub sp, 10
9580   4182             ; int i = 0; 
9581   4182 52 02 00      sub sp, 2
9582   4185             ; --- START LOCAL VAR INITIALIZATION
9583   4185 FA F5 FF      lea d, [bp + -11] ; $i
9584   4188 DA            push d
9585   4189 FD 2E 00 00   mov32 cb, $00000000
9585   418D 00 00 
9586   418F E7            pop d
9587   4190 FD 43         mov [d], b
9588   4192             ; --- END LOCAL VAR INITIALIZATION
9589   4192             ; if (num < 0) { 
9590   4192             _if217_cond:
9591   4192 FA 05 00      lea d, [bp + 5] ; $num
9592   4195 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9593   4198 FD 39         mov c, b ; And place it into C
9594   419A 2A            mov b, [d] ; Lower Word in B
9595   419B             ; --- START RELATIONAL
9596   419B D7            push a
9597   419C FD D8         push g
9598   419E 11            mov a, b
9599   419F FD 7A         mov g, c
9600   41A1 FD 2E 00 00   mov32 cb, $00000000
9600   41A5 00 00 
9601   41A7 38 00 00      mov c, 0
9602   41AA FD AF         cmp32 ga, cb
9603   41AC FD 73         slt ; <
9604   41AE FD F1         pop g
9605   41B0 E4            pop a
9606   41B1             ; --- END RELATIONAL
9607   41B1 C0 00 00      cmp b, 0
9608   41B4 C6 E6 41      je _if217_else
9609   41B7             _if217_TRUE:
9610   41B7             ; putchar('-'); 
9611   41B7             ; --- START FUNCTION CALL
9612   41B7 FD 2E 2D 00   mov32 cb, $0000002d
9612   41BB 00 00 
9613   41BD DD            push bl
9614   41BE 07 0E 43      call putchar
9615   41C1 51 01 00      add sp, 1
9616   41C4             ; --- END FUNCTION CALL
9617   41C4             ; num = -num; 
9618   41C4 FA 05 00      lea d, [bp + 5] ; $num
9619   41C7 DA            push d
9620   41C8 FA 05 00      lea d, [bp + 5] ; $num
9621   41CB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9622   41CE FD 39         mov c, b ; And place it into C
9623   41D0 2A            mov b, [d] ; Lower Word in B
9624   41D1 12            mov a, c
9625   41D2 95            not a
9626   41D3 97            not b
9627   41D4 55 01 00      add b, 1
9628   41D7 5B 00 00      adc a, 0
9629   41DA 39            mov c, a
9630   41DB E7            pop d
9631   41DC FD 43         mov [d], b
9632   41DE 28            mov b, c
9633   41DF FD 44 02 00   mov [d + 2], b
9634   41E3 0A 1D 42      jmp _if217_exit
9635   41E6             _if217_else:
9636   41E6             ; if (num == 0) { 
9637   41E6             _if218_cond:
9638   41E6 FA 05 00      lea d, [bp + 5] ; $num
9639   41E9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9640   41EC FD 39         mov c, b ; And place it into C
9641   41EE 2A            mov b, [d] ; Lower Word in B
9642   41EF             ; --- START RELATIONAL
9643   41EF D7            push a
9644   41F0 FD D8         push g
9645   41F2 11            mov a, b
9646   41F3 FD 7A         mov g, c
9647   41F5 FD 2E 00 00   mov32 cb, $00000000
9647   41F9 00 00 
9648   41FB 38 00 00      mov c, 0
9649   41FE FD AF         cmp32 ga, cb
9650   4200 FD 71         seq ; ==
9651   4202 FD F1         pop g
9652   4204 E4            pop a
9653   4205             ; --- END RELATIONAL
9654   4205 C0 00 00      cmp b, 0
9655   4208 C6 1D 42      je _if218_exit
9656   420B             _if218_TRUE:
9657   420B             ; putchar('0'); 
9658   420B             ; --- START FUNCTION CALL
9659   420B FD 2E 30 00   mov32 cb, $00000030
9659   420F 00 00 
9660   4211 DD            push bl
9661   4212 07 0E 43      call putchar
9662   4215 51 01 00      add sp, 1
9663   4218             ; --- END FUNCTION CALL
9664   4218             ; return; 
9665   4218 F9            leave
9666   4219 09            ret
9667   421A 0A 1D 42      jmp _if218_exit
9668   421D             _if218_exit:
9669   421D             _if217_exit:
9670   421D             ; while (num > 0) { 
9671   421D             _while219_cond:
9672   421D FA 05 00      lea d, [bp + 5] ; $num
9673   4220 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9674   4223 FD 39         mov c, b ; And place it into C
9675   4225 2A            mov b, [d] ; Lower Word in B
9676   4226             ; --- START RELATIONAL
9677   4226 D7            push a
9678   4227 FD D8         push g
9679   4229 11            mov a, b
9680   422A FD 7A         mov g, c
9681   422C FD 2E 00 00   mov32 cb, $00000000
9681   4230 00 00 
9682   4232 38 00 00      mov c, 0
9683   4235 FD AF         cmp32 ga, cb
9684   4237 FD 7F         sgt
9685   4239 FD F1         pop g
9686   423B E4            pop a
9687   423C             ; --- END RELATIONAL
9688   423C C0 00 00      cmp b, 0
9689   423F C6 C4 42      je _while219_exit
9690   4242             _while219_block:
9691   4242             ; digits[i] = '0' + (num % 10); 
9692   4242 FA F7 FF      lea d, [bp + -9] ; $digits
9693   4245 D7            push a
9694   4246 DA            push d
9695   4247 FA F5 FF      lea d, [bp + -11] ; $i
9696   424A 2A            mov b, [d]
9697   424B 38 00 00      mov c, 0
9698   424E E7            pop d
9699   424F 5A            add d, b
9700   4250 E4            pop a
9701   4251 DA            push d
9702   4252 FD 2E 30 00   mov32 cb, $00000030
9702   4256 00 00 
9703   4258             ; --- START TERMS
9704   4258 D7            push a
9705   4259 11            mov a, b
9706   425A FA 05 00      lea d, [bp + 5] ; $num
9707   425D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9708   4260 FD 39         mov c, b ; And place it into C
9709   4262 2A            mov b, [d] ; Lower Word in B
9710   4263             ; --- START FACTORS
9711   4263 D7            push a
9712   4264 FD D8         push g
9713   4266 11            mov a, b
9714   4267 FD 7A         mov g, c
9715   4269 FD 2E 0A 00   mov32 cb, $0000000a
9715   426D 00 00 
9716   426F FD D8         push g ; save 'g' as the div instruction uses it
9717   4271 AE            div a, b ; %, a: quotient, b: remainder
9718   4272 11            mov a, b
9719   4273 FD F1         pop g
9720   4275 FD 38         mov c, g
9721   4277 27            mov b, a
9722   4278 FD F1         pop g
9723   427A E4            pop a
9724   427B             ; --- END FACTORS
9725   427B FD 22 00 00   mov g, 0
9726   427F FD 15         add32 cb, ga
9727   4281 E4            pop a
9728   4282             ; --- END TERMS
9729   4282 E7            pop d
9730   4283 FD 3E         mov [d], bl
9731   4285             ; num = num / 10; 
9732   4285 FA 05 00      lea d, [bp + 5] ; $num
9733   4288 DA            push d
9734   4289 FA 05 00      lea d, [bp + 5] ; $num
9735   428C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9736   428F FD 39         mov c, b ; And place it into C
9737   4291 2A            mov b, [d] ; Lower Word in B
9738   4292             ; --- START FACTORS
9739   4292 D7            push a
9740   4293 FD D8         push g
9741   4295 11            mov a, b
9742   4296 FD 7A         mov g, c
9743   4298 FD 2E 0A 00   mov32 cb, $0000000a
9743   429C 00 00 
9744   429E FD D8         push g ; save 'g' as the div instruction uses it
9745   42A0 AE            div a, b ; /, a: quotient, b: remainder
9746   42A1 FD F1         pop g
9747   42A3 FD 38         mov c, g
9748   42A5 27            mov b, a
9749   42A6 FD F1         pop g
9750   42A8 E4            pop a
9751   42A9             ; --- END FACTORS
9752   42A9 E7            pop d
9753   42AA FD 43         mov [d], b
9754   42AC 28            mov b, c
9755   42AD FD 44 02 00   mov [d + 2], b
9756   42B1             ; i++; 
9757   42B1 FA F5 FF      lea d, [bp + -11] ; $i
9758   42B4 2A            mov b, [d]
9759   42B5 38 00 00      mov c, 0
9760   42B8 11            mov a, b
9761   42B9 FD 77         inc b
9762   42BB FA F5 FF      lea d, [bp + -11] ; $i
9763   42BE FD 43         mov [d], b
9764   42C0 27            mov b, a
9765   42C1 0A 1D 42      jmp _while219_cond
9766   42C4             _while219_exit:
9767   42C4             ; while (i > 0) { 
9768   42C4             _while226_cond:
9769   42C4 FA F5 FF      lea d, [bp + -11] ; $i
9770   42C7 2A            mov b, [d]
9771   42C8 38 00 00      mov c, 0
9772   42CB             ; --- START RELATIONAL
9773   42CB D7            push a
9774   42CC 11            mov a, b
9775   42CD FD 2E 00 00   mov32 cb, $00000000
9775   42D1 00 00 
9776   42D3 B0            cmp a, b
9777   42D4 FD 7F         sgt ; >
9778   42D6 E4            pop a
9779   42D7             ; --- END RELATIONAL
9780   42D7 C0 00 00      cmp b, 0
9781   42DA C6 0C 43      je _while226_exit
9782   42DD             _while226_block:
9783   42DD             ; i--; 
9784   42DD FA F5 FF      lea d, [bp + -11] ; $i
9785   42E0 2A            mov b, [d]
9786   42E1 38 00 00      mov c, 0
9787   42E4 11            mov a, b
9788   42E5 FD 7D         dec b
9789   42E7 FA F5 FF      lea d, [bp + -11] ; $i
9790   42EA FD 43         mov [d], b
9791   42EC 27            mov b, a
9792   42ED             ; putchar(digits[i]); 
9793   42ED             ; --- START FUNCTION CALL
9794   42ED FA F7 FF      lea d, [bp + -9] ; $digits
9795   42F0 D7            push a
9796   42F1 DA            push d
9797   42F2 FA F5 FF      lea d, [bp + -11] ; $i
9798   42F5 2A            mov b, [d]
9799   42F6 38 00 00      mov c, 0
9800   42F9 E7            pop d
9801   42FA 5A            add d, b
9802   42FB E4            pop a
9803   42FC 32            mov bl, [d]
9804   42FD A7 00         mov bh, 0
9805   42FF 38 00 00      mov c, 0
9806   4302 DD            push bl
9807   4303 07 0E 43      call putchar
9808   4306 51 01 00      add sp, 1
9809   4309             ; --- END FUNCTION CALL
9810   4309 0A C4 42      jmp _while226_cond
9811   430C             _while226_exit:
9812   430C F9            leave
9813   430D 09            ret
9814   430E             
9815   430E             putchar:
9816   430E F8 00 00      enter 0 ; (push bp; mov bp, sp)
9817   4311             ; --- BEGIN INLINE ASM SEGMENT
9818   4311 FA 05 00      lea d, [bp + 5] ; $c
9819   4314 1E            mov al, [d]
9820   4315 23            mov ah, al
9821   4316 19 00         mov al, 0
9822   4318 05 03         syscall sys_io      ; char in AH
9823   431A             ; --- END INLINE ASM SEGMENT
9824   431A F9            leave
9825   431B 09            ret
9826   431C             
9827   431C             print_unsigned_long:
9828   431C F8 00 00      enter 0 ; (push bp; mov bp, sp)
9829   431F             ; char digits[10]; 
9830   431F 52 0A 00      sub sp, 10
9831   4322             ; int i; 
9832   4322 52 02 00      sub sp, 2
9833   4325             ; i = 0; 
9834   4325 FA F5 FF      lea d, [bp + -11] ; $i
9835   4328 DA            push d
9836   4329 FD 2E 00 00   mov32 cb, $00000000
9836   432D 00 00 
9837   432F E7            pop d
9838   4330 FD 43         mov [d], b
9839   4332             ; if(num == 0){ 
9840   4332             _if227_cond:
9841   4332 FA 05 00      lea d, [bp + 5] ; $num
9842   4335 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9843   4338 FD 39         mov c, b ; And place it into C
9844   433A 2A            mov b, [d] ; Lower Word in B
9845   433B             ; --- START RELATIONAL
9846   433B D7            push a
9847   433C FD D8         push g
9848   433E 11            mov a, b
9849   433F FD 7A         mov g, c
9850   4341 FD 2E 00 00   mov32 cb, $00000000
9850   4345 00 00 
9851   4347 38 00 00      mov c, 0
9852   434A FD AF         cmp32 ga, cb
9853   434C FD 71         seq ; ==
9854   434E FD F1         pop g
9855   4350 E4            pop a
9856   4351             ; --- END RELATIONAL
9857   4351 C0 00 00      cmp b, 0
9858   4354 C6 69 43      je _if227_exit
9859   4357             _if227_TRUE:
9860   4357             ; putchar('0'); 
9861   4357             ; --- START FUNCTION CALL
9862   4357 FD 2E 30 00   mov32 cb, $00000030
9862   435B 00 00 
9863   435D DD            push bl
9864   435E 07 0E 43      call putchar
9865   4361 51 01 00      add sp, 1
9866   4364             ; --- END FUNCTION CALL
9867   4364             ; return; 
9868   4364 F9            leave
9869   4365 09            ret
9870   4366 0A 69 43      jmp _if227_exit
9871   4369             _if227_exit:
9872   4369             ; while (num > 0) { 
9873   4369             _while228_cond:
9874   4369 FA 05 00      lea d, [bp + 5] ; $num
9875   436C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9876   436F FD 39         mov c, b ; And place it into C
9877   4371 2A            mov b, [d] ; Lower Word in B
9878   4372             ; --- START RELATIONAL
9879   4372 D7            push a
9880   4373 FD D8         push g
9881   4375 11            mov a, b
9882   4376 FD 7A         mov g, c
9883   4378 FD 2E 00 00   mov32 cb, $00000000
9883   437C 00 00 
9884   437E 38 00 00      mov c, 0
9885   4381 FD AF         cmp32 ga, cb
9886   4383 FD 81         sgu
9887   4385 FD F1         pop g
9888   4387 E4            pop a
9889   4388             ; --- END RELATIONAL
9890   4388 C0 00 00      cmp b, 0
9891   438B C6 10 44      je _while228_exit
9892   438E             _while228_block:
9893   438E             ; digits[i] = '0' + (num % 10); 
9894   438E FA F7 FF      lea d, [bp + -9] ; $digits
9895   4391 D7            push a
9896   4392 DA            push d
9897   4393 FA F5 FF      lea d, [bp + -11] ; $i
9898   4396 2A            mov b, [d]
9899   4397 38 00 00      mov c, 0
9900   439A E7            pop d
9901   439B 5A            add d, b
9902   439C E4            pop a
9903   439D DA            push d
9904   439E FD 2E 30 00   mov32 cb, $00000030
9904   43A2 00 00 
9905   43A4             ; --- START TERMS
9906   43A4 D7            push a
9907   43A5 11            mov a, b
9908   43A6 FA 05 00      lea d, [bp + 5] ; $num
9909   43A9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9910   43AC FD 39         mov c, b ; And place it into C
9911   43AE 2A            mov b, [d] ; Lower Word in B
9912   43AF             ; --- START FACTORS
9913   43AF D7            push a
9914   43B0 FD D8         push g
9915   43B2 11            mov a, b
9916   43B3 FD 7A         mov g, c
9917   43B5 FD 2E 0A 00   mov32 cb, $0000000a
9917   43B9 00 00 
9918   43BB FD D8         push g ; save 'g' as the div instruction uses it
9919   43BD AE            div a, b ; %, a: quotient, b: remainder
9920   43BE 11            mov a, b
9921   43BF FD F1         pop g
9922   43C1 FD 38         mov c, g
9923   43C3 27            mov b, a
9924   43C4 FD F1         pop g
9925   43C6 E4            pop a
9926   43C7             ; --- END FACTORS
9927   43C7 FD 22 00 00   mov g, 0
9928   43CB FD 15         add32 cb, ga
9929   43CD E4            pop a
9930   43CE             ; --- END TERMS
9931   43CE E7            pop d
9932   43CF FD 3E         mov [d], bl
9933   43D1             ; num = num / 10; 
9934   43D1 FA 05 00      lea d, [bp + 5] ; $num
9935   43D4 DA            push d
9936   43D5 FA 05 00      lea d, [bp + 5] ; $num
9937   43D8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9938   43DB FD 39         mov c, b ; And place it into C
9939   43DD 2A            mov b, [d] ; Lower Word in B
9940   43DE             ; --- START FACTORS
9941   43DE D7            push a
9942   43DF FD D8         push g
9943   43E1 11            mov a, b
9944   43E2 FD 7A         mov g, c
9945   43E4 FD 2E 0A 00   mov32 cb, $0000000a
9945   43E8 00 00 
9946   43EA FD D8         push g ; save 'g' as the div instruction uses it
9947   43EC AE            div a, b ; /, a: quotient, b: remainder
9948   43ED FD F1         pop g
9949   43EF FD 38         mov c, g
9950   43F1 27            mov b, a
9951   43F2 FD F1         pop g
9952   43F4 E4            pop a
9953   43F5             ; --- END FACTORS
9954   43F5 E7            pop d
9955   43F6 FD 43         mov [d], b
9956   43F8 28            mov b, c
9957   43F9 FD 44 02 00   mov [d + 2], b
9958   43FD             ; i++; 
9959   43FD FA F5 FF      lea d, [bp + -11] ; $i
9960   4400 2A            mov b, [d]
9961   4401 38 00 00      mov c, 0
9962   4404 11            mov a, b
9963   4405 FD 77         inc b
9964   4407 FA F5 FF      lea d, [bp + -11] ; $i
9965   440A FD 43         mov [d], b
9966   440C 27            mov b, a
9967   440D 0A 69 43      jmp _while228_cond
9968   4410             _while228_exit:
9969   4410             ; while (i > 0) { 
9970   4410             _while235_cond:
9971   4410 FA F5 FF      lea d, [bp + -11] ; $i
9972   4413 2A            mov b, [d]
9973   4414 38 00 00      mov c, 0
9974   4417             ; --- START RELATIONAL
9975   4417 D7            push a
9976   4418 11            mov a, b
9977   4419 FD 2E 00 00   mov32 cb, $00000000
9977   441D 00 00 
9978   441F B0            cmp a, b
9979   4420 FD 7F         sgt ; >
9980   4422 E4            pop a
9981   4423             ; --- END RELATIONAL
9982   4423 C0 00 00      cmp b, 0
9983   4426 C6 58 44      je _while235_exit
9984   4429             _while235_block:
9985   4429             ; i--; 
9986   4429 FA F5 FF      lea d, [bp + -11] ; $i
9987   442C 2A            mov b, [d]
9988   442D 38 00 00      mov c, 0
9989   4430 11            mov a, b
9990   4431 FD 7D         dec b
9991   4433 FA F5 FF      lea d, [bp + -11] ; $i
9992   4436 FD 43         mov [d], b
9993   4438 27            mov b, a
9994   4439             ; putchar(digits[i]); 
9995   4439             ; --- START FUNCTION CALL
9996   4439 FA F7 FF      lea d, [bp + -9] ; $digits
9997   443C D7            push a
9998   443D DA            push d
9999   443E FA F5 FF      lea d, [bp + -11] ; $i
10000  4441 2A            mov b, [d]
10001  4442 38 00 00      mov c, 0
10002  4445 E7            pop d
10003  4446 5A            add d, b
10004  4447 E4            pop a
10005  4448 32            mov bl, [d]
10006  4449 A7 00         mov bh, 0
10007  444B 38 00 00      mov c, 0
10008  444E DD            push bl
10009  444F 07 0E 43      call putchar
10010  4452 51 01 00      add sp, 1
10011  4455             ; --- END FUNCTION CALL
10012  4455 0A 10 44      jmp _while235_cond
10013  4458             _while235_exit:
10014  4458 F9            leave
10015  4459 09            ret
10016  445A             
10017  445A             printx32:
10018  445A F8 00 00      enter 0 ; (push bp; mov bp, sp)
10019  445D             ; --- BEGIN INLINE ASM SEGMENT
10020  445D FA 05 00      lea d, [bp + 5] ; $hex
10021  4460 2B 02 00      mov b, [d+2]
10022  4463 07 6C 44      call print_u16x_printx32
10023  4466 2A            mov b, [d]
10024  4467 07 6C 44      call print_u16x_printx32
10025  446A             ; --- END INLINE ASM SEGMENT
10026  446A             ; return; 
10027  446A F9            leave
10028  446B 09            ret
10029  446C             ; --- BEGIN INLINE ASM SEGMENT
10030  446C             print_u16x_printx32:
10031  446C D7            push a
10032  446D D8            push b
10033  446E DD            push bl
10034  446F 30            mov bl, bh
10035  4470 07 8E 44      call _itoa_printx32        ; convert bh to char in A
10036  4473 2F            mov bl, al        ; save al
10037  4474 19 00         mov al, 0
10038  4476 05 03         syscall sys_io        ; display AH
10039  4478 24            mov ah, bl        ; retrieve al
10040  4479 19 00         mov al, 0
10041  447B 05 03         syscall sys_io        ; display AL
10042  447D EA            pop bl
10043  447E 07 8E 44      call _itoa_printx32        ; convert bh to char in A
10044  4481 2F            mov bl, al        ; save al
10045  4482 19 00         mov al, 0
10046  4484 05 03         syscall sys_io        ; display AH
10047  4486 24            mov ah, bl        ; retrieve al
10048  4487 19 00         mov al, 0
10049  4489 05 03         syscall sys_io        ; display AL
10050  448B E5            pop b
10051  448C E4            pop a
10052  448D 09            ret
10053  448E             _itoa_printx32:
10054  448E DA            push d
10055  448F D8            push b
10056  4490 A7 00         mov bh, 0
10057  4492 FD A4 04      shr bl, 4  
10058  4495 74            mov d, b
10059  4496 1F A8 44      mov al, [d + s_hex_digits_printx32]
10060  4499 23            mov ah, al
10061  449A E5            pop b
10062  449B D8            push b
10063  449C A7 00         mov bh, 0
10064  449E FD 87 0F      and bl, $0F
10065  44A1 74            mov d, b
10066  44A2 1F A8 44      mov al, [d + s_hex_digits_printx32]
10067  44A5 E5            pop b
10068  44A6 E7            pop d
10069  44A7 09            ret
10070  44A8 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
10070  44AC 34 35 36 37 
10070  44B0 38 39 41 42 
10070  44B4 43 44 45 46 
10071  44B8             ; --- END INLINE ASM SEGMENT
10072  44B8 F9            leave
10073  44B9 09            ret
10074  44BA             
10075  44BA             err:
10076  44BA F8 00 00      enter 0 ; (push bp; mov bp, sp)
10077  44BD             ; print(e); 
10078  44BD             ; --- START FUNCTION CALL
10079  44BD FA 05 00      lea d, [bp + 5] ; $e
10080  44C0 2A            mov b, [d]
10081  44C1 38 00 00      mov c, 0
10082  44C4 FD AB         swp b
10083  44C6 D8            push b
10084  44C7 07 CF 44      call print
10085  44CA 51 02 00      add sp, 2
10086  44CD             ; --- END FUNCTION CALL
10087  44CD F9            leave
10088  44CE 09            ret
10089  44CF             
10090  44CF             print:
10091  44CF F8 00 00      enter 0 ; (push bp; mov bp, sp)
10092  44D2             ; --- BEGIN INLINE ASM SEGMENT
10093  44D2 FA 05 00      lea d, [bp + 5] ; $s
10094  44D5 FD 2A         mov d, [d]
10095  44D7             _puts_L1_print:
10096  44D7 1E            mov al, [d]
10097  44D8 B9 00         cmp al, 0
10098  44DA C6 E6 44      jz _puts_END_print
10099  44DD 23            mov ah, al
10100  44DE 19 00         mov al, 0
10101  44E0 05 03         syscall sys_io
10102  44E2 79            inc d
10103  44E3 0A D7 44      jmp _puts_L1_print
10104  44E6             _puts_END_print:
10105  44E6             ; --- END INLINE ASM SEGMENT
10106  44E6 F9            leave
10107  44E7 09            ret
10108  44E8             
10109  44E8             print_signed:
10110  44E8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10111  44EB             ; char digits[5]; 
10112  44EB 52 05 00      sub sp, 5
10113  44EE             ; int i = 0; 
10114  44EE 52 02 00      sub sp, 2
10115  44F1             ; --- START LOCAL VAR INITIALIZATION
10116  44F1 FA FA FF      lea d, [bp + -6] ; $i
10117  44F4 DA            push d
10118  44F5 FD 2E 00 00   mov32 cb, $00000000
10118  44F9 00 00 
10119  44FB E7            pop d
10120  44FC FD 43         mov [d], b
10121  44FE             ; --- END LOCAL VAR INITIALIZATION
10122  44FE             ; if (num < 0) { 
10123  44FE             _if236_cond:
10124  44FE FA 05 00      lea d, [bp + 5] ; $num
10125  4501 2A            mov b, [d]
10126  4502 38 00 00      mov c, 0
10127  4505             ; --- START RELATIONAL
10128  4505 D7            push a
10129  4506 11            mov a, b
10130  4507 FD 2E 00 00   mov32 cb, $00000000
10130  450B 00 00 
10131  450D B0            cmp a, b
10132  450E FD 73         slt ; < (signed)
10133  4510 E4            pop a
10134  4511             ; --- END RELATIONAL
10135  4511 C0 00 00      cmp b, 0
10136  4514 C6 37 45      je _if236_else
10137  4517             _if236_TRUE:
10138  4517             ; putchar('-'); 
10139  4517             ; --- START FUNCTION CALL
10140  4517 FD 2E 2D 00   mov32 cb, $0000002d
10140  451B 00 00 
10141  451D DD            push bl
10142  451E 07 0E 43      call putchar
10143  4521 51 01 00      add sp, 1
10144  4524             ; --- END FUNCTION CALL
10145  4524             ; num = -num; 
10146  4524 FA 05 00      lea d, [bp + 5] ; $num
10147  4527 DA            push d
10148  4528 FA 05 00      lea d, [bp + 5] ; $num
10149  452B 2A            mov b, [d]
10150  452C 38 00 00      mov c, 0
10151  452F FD 97         neg b
10152  4531 E7            pop d
10153  4532 FD 43         mov [d], b
10154  4534 0A 62 45      jmp _if236_exit
10155  4537             _if236_else:
10156  4537             ; if (num == 0) { 
10157  4537             _if237_cond:
10158  4537 FA 05 00      lea d, [bp + 5] ; $num
10159  453A 2A            mov b, [d]
10160  453B 38 00 00      mov c, 0
10161  453E             ; --- START RELATIONAL
10162  453E D7            push a
10163  453F 11            mov a, b
10164  4540 FD 2E 00 00   mov32 cb, $00000000
10164  4544 00 00 
10165  4546 B0            cmp a, b
10166  4547 FD 71         seq ; ==
10167  4549 E4            pop a
10168  454A             ; --- END RELATIONAL
10169  454A C0 00 00      cmp b, 0
10170  454D C6 62 45      je _if237_exit
10171  4550             _if237_TRUE:
10172  4550             ; putchar('0'); 
10173  4550             ; --- START FUNCTION CALL
10174  4550 FD 2E 30 00   mov32 cb, $00000030
10174  4554 00 00 
10175  4556 DD            push bl
10176  4557 07 0E 43      call putchar
10177  455A 51 01 00      add sp, 1
10178  455D             ; --- END FUNCTION CALL
10179  455D             ; return; 
10180  455D F9            leave
10181  455E 09            ret
10182  455F 0A 62 45      jmp _if237_exit
10183  4562             _if237_exit:
10184  4562             _if236_exit:
10185  4562             ; while (num > 0) { 
10186  4562             _while238_cond:
10187  4562 FA 05 00      lea d, [bp + 5] ; $num
10188  4565 2A            mov b, [d]
10189  4566 38 00 00      mov c, 0
10190  4569             ; --- START RELATIONAL
10191  4569 D7            push a
10192  456A 11            mov a, b
10193  456B FD 2E 00 00   mov32 cb, $00000000
10193  456F 00 00 
10194  4571 B0            cmp a, b
10195  4572 FD 7F         sgt ; >
10196  4574 E4            pop a
10197  4575             ; --- END RELATIONAL
10198  4575 C0 00 00      cmp b, 0
10199  4578 C6 EF 45      je _while238_exit
10200  457B             _while238_block:
10201  457B             ; digits[i] = '0' + (num % 10); 
10202  457B FA FC FF      lea d, [bp + -4] ; $digits
10203  457E D7            push a
10204  457F DA            push d
10205  4580 FA FA FF      lea d, [bp + -6] ; $i
10206  4583 2A            mov b, [d]
10207  4584 38 00 00      mov c, 0
10208  4587 E7            pop d
10209  4588 5A            add d, b
10210  4589 E4            pop a
10211  458A DA            push d
10212  458B FD 2E 30 00   mov32 cb, $00000030
10212  458F 00 00 
10213  4591             ; --- START TERMS
10214  4591 D7            push a
10215  4592 11            mov a, b
10216  4593 FA 05 00      lea d, [bp + 5] ; $num
10217  4596 2A            mov b, [d]
10218  4597 38 00 00      mov c, 0
10219  459A             ; --- START FACTORS
10220  459A D7            push a
10221  459B FD D8         push g
10222  459D 11            mov a, b
10223  459E FD 7A         mov g, c
10224  45A0 FD 2E 0A 00   mov32 cb, $0000000a
10224  45A4 00 00 
10225  45A6 FD D8         push g ; save 'g' as the div instruction uses it
10226  45A8 AE            div a, b ; %, a: quotient, b: remainder
10227  45A9 11            mov a, b
10228  45AA FD F1         pop g
10229  45AC FD 38         mov c, g
10230  45AE 27            mov b, a
10231  45AF FD F1         pop g
10232  45B1 E4            pop a
10233  45B2             ; --- END FACTORS
10234  45B2 56            add b, a
10235  45B3 E4            pop a
10236  45B4             ; --- END TERMS
10237  45B4 E7            pop d
10238  45B5 FD 3E         mov [d], bl
10239  45B7             ; num = num / 10; 
10240  45B7 FA 05 00      lea d, [bp + 5] ; $num
10241  45BA DA            push d
10242  45BB FA 05 00      lea d, [bp + 5] ; $num
10243  45BE 2A            mov b, [d]
10244  45BF 38 00 00      mov c, 0
10245  45C2             ; --- START FACTORS
10246  45C2 D7            push a
10247  45C3 FD D8         push g
10248  45C5 11            mov a, b
10249  45C6 FD 7A         mov g, c
10250  45C8 FD 2E 0A 00   mov32 cb, $0000000a
10250  45CC 00 00 
10251  45CE FD D8         push g ; save 'g' as the div instruction uses it
10252  45D0 AE            div a, b ; /, a: quotient, b: remainder
10253  45D1 FD F1         pop g
10254  45D3 FD 38         mov c, g
10255  45D5 27            mov b, a
10256  45D6 FD F1         pop g
10257  45D8 E4            pop a
10258  45D9             ; --- END FACTORS
10259  45D9 E7            pop d
10260  45DA FD 43         mov [d], b
10261  45DC             ; i++; 
10262  45DC FA FA FF      lea d, [bp + -6] ; $i
10263  45DF 2A            mov b, [d]
10264  45E0 38 00 00      mov c, 0
10265  45E3 11            mov a, b
10266  45E4 FD 77         inc b
10267  45E6 FA FA FF      lea d, [bp + -6] ; $i
10268  45E9 FD 43         mov [d], b
10269  45EB 27            mov b, a
10270  45EC 0A 62 45      jmp _while238_cond
10271  45EF             _while238_exit:
10272  45EF             ; while (i > 0) { 
10273  45EF             _while245_cond:
10274  45EF FA FA FF      lea d, [bp + -6] ; $i
10275  45F2 2A            mov b, [d]
10276  45F3 38 00 00      mov c, 0
10277  45F6             ; --- START RELATIONAL
10278  45F6 D7            push a
10279  45F7 11            mov a, b
10280  45F8 FD 2E 00 00   mov32 cb, $00000000
10280  45FC 00 00 
10281  45FE B0            cmp a, b
10282  45FF FD 7F         sgt ; >
10283  4601 E4            pop a
10284  4602             ; --- END RELATIONAL
10285  4602 C0 00 00      cmp b, 0
10286  4605 C6 37 46      je _while245_exit
10287  4608             _while245_block:
10288  4608             ; i--; 
10289  4608 FA FA FF      lea d, [bp + -6] ; $i
10290  460B 2A            mov b, [d]
10291  460C 38 00 00      mov c, 0
10292  460F 11            mov a, b
10293  4610 FD 7D         dec b
10294  4612 FA FA FF      lea d, [bp + -6] ; $i
10295  4615 FD 43         mov [d], b
10296  4617 27            mov b, a
10297  4618             ; putchar(digits[i]); 
10298  4618             ; --- START FUNCTION CALL
10299  4618 FA FC FF      lea d, [bp + -4] ; $digits
10300  461B D7            push a
10301  461C DA            push d
10302  461D FA FA FF      lea d, [bp + -6] ; $i
10303  4620 2A            mov b, [d]
10304  4621 38 00 00      mov c, 0
10305  4624 E7            pop d
10306  4625 5A            add d, b
10307  4626 E4            pop a
10308  4627 32            mov bl, [d]
10309  4628 A7 00         mov bh, 0
10310  462A 38 00 00      mov c, 0
10311  462D DD            push bl
10312  462E 07 0E 43      call putchar
10313  4631 51 01 00      add sp, 1
10314  4634             ; --- END FUNCTION CALL
10315  4634 0A EF 45      jmp _while245_cond
10316  4637             _while245_exit:
10317  4637 F9            leave
10318  4638 09            ret
10319  4639             
10320  4639             print_unsigned:
10321  4639 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10322  463C             ; char digits[5]; 
10323  463C 52 05 00      sub sp, 5
10324  463F             ; int i; 
10325  463F 52 02 00      sub sp, 2
10326  4642             ; i = 0; 
10327  4642 FA FA FF      lea d, [bp + -6] ; $i
10328  4645 DA            push d
10329  4646 FD 2E 00 00   mov32 cb, $00000000
10329  464A 00 00 
10330  464C E7            pop d
10331  464D FD 43         mov [d], b
10332  464F             ; if(num == 0){ 
10333  464F             _if246_cond:
10334  464F FA 05 00      lea d, [bp + 5] ; $num
10335  4652 2A            mov b, [d]
10336  4653 38 00 00      mov c, 0
10337  4656             ; --- START RELATIONAL
10338  4656 D7            push a
10339  4657 11            mov a, b
10340  4658 FD 2E 00 00   mov32 cb, $00000000
10340  465C 00 00 
10341  465E B0            cmp a, b
10342  465F FD 71         seq ; ==
10343  4661 E4            pop a
10344  4662             ; --- END RELATIONAL
10345  4662 C0 00 00      cmp b, 0
10346  4665 C6 7A 46      je _if246_exit
10347  4668             _if246_TRUE:
10348  4668             ; putchar('0'); 
10349  4668             ; --- START FUNCTION CALL
10350  4668 FD 2E 30 00   mov32 cb, $00000030
10350  466C 00 00 
10351  466E DD            push bl
10352  466F 07 0E 43      call putchar
10353  4672 51 01 00      add sp, 1
10354  4675             ; --- END FUNCTION CALL
10355  4675             ; return; 
10356  4675 F9            leave
10357  4676 09            ret
10358  4677 0A 7A 46      jmp _if246_exit
10359  467A             _if246_exit:
10360  467A             ; while (num > 0) { 
10361  467A             _while247_cond:
10362  467A FA 05 00      lea d, [bp + 5] ; $num
10363  467D 2A            mov b, [d]
10364  467E 38 00 00      mov c, 0
10365  4681             ; --- START RELATIONAL
10366  4681 D7            push a
10367  4682 11            mov a, b
10368  4683 FD 2E 00 00   mov32 cb, $00000000
10368  4687 00 00 
10369  4689 B0            cmp a, b
10370  468A FD 81         sgu ; > (unsigned)
10371  468C E4            pop a
10372  468D             ; --- END RELATIONAL
10373  468D C0 00 00      cmp b, 0
10374  4690 C6 07 47      je _while247_exit
10375  4693             _while247_block:
10376  4693             ; digits[i] = '0' + (num % 10); 
10377  4693 FA FC FF      lea d, [bp + -4] ; $digits
10378  4696 D7            push a
10379  4697 DA            push d
10380  4698 FA FA FF      lea d, [bp + -6] ; $i
10381  469B 2A            mov b, [d]
10382  469C 38 00 00      mov c, 0
10383  469F E7            pop d
10384  46A0 5A            add d, b
10385  46A1 E4            pop a
10386  46A2 DA            push d
10387  46A3 FD 2E 30 00   mov32 cb, $00000030
10387  46A7 00 00 
10388  46A9             ; --- START TERMS
10389  46A9 D7            push a
10390  46AA 11            mov a, b
10391  46AB FA 05 00      lea d, [bp + 5] ; $num
10392  46AE 2A            mov b, [d]
10393  46AF 38 00 00      mov c, 0
10394  46B2             ; --- START FACTORS
10395  46B2 D7            push a
10396  46B3 FD D8         push g
10397  46B5 11            mov a, b
10398  46B6 FD 7A         mov g, c
10399  46B8 FD 2E 0A 00   mov32 cb, $0000000a
10399  46BC 00 00 
10400  46BE FD D8         push g ; save 'g' as the div instruction uses it
10401  46C0 AE            div a, b ; %, a: quotient, b: remainder
10402  46C1 11            mov a, b
10403  46C2 FD F1         pop g
10404  46C4 FD 38         mov c, g
10405  46C6 27            mov b, a
10406  46C7 FD F1         pop g
10407  46C9 E4            pop a
10408  46CA             ; --- END FACTORS
10409  46CA 56            add b, a
10410  46CB E4            pop a
10411  46CC             ; --- END TERMS
10412  46CC E7            pop d
10413  46CD FD 3E         mov [d], bl
10414  46CF             ; num = num / 10; 
10415  46CF FA 05 00      lea d, [bp + 5] ; $num
10416  46D2 DA            push d
10417  46D3 FA 05 00      lea d, [bp + 5] ; $num
10418  46D6 2A            mov b, [d]
10419  46D7 38 00 00      mov c, 0
10420  46DA             ; --- START FACTORS
10421  46DA D7            push a
10422  46DB FD D8         push g
10423  46DD 11            mov a, b
10424  46DE FD 7A         mov g, c
10425  46E0 FD 2E 0A 00   mov32 cb, $0000000a
10425  46E4 00 00 
10426  46E6 FD D8         push g ; save 'g' as the div instruction uses it
10427  46E8 AE            div a, b ; /, a: quotient, b: remainder
10428  46E9 FD F1         pop g
10429  46EB FD 38         mov c, g
10430  46ED 27            mov b, a
10431  46EE FD F1         pop g
10432  46F0 E4            pop a
10433  46F1             ; --- END FACTORS
10434  46F1 E7            pop d
10435  46F2 FD 43         mov [d], b
10436  46F4             ; i++; 
10437  46F4 FA FA FF      lea d, [bp + -6] ; $i
10438  46F7 2A            mov b, [d]
10439  46F8 38 00 00      mov c, 0
10440  46FB 11            mov a, b
10441  46FC FD 77         inc b
10442  46FE FA FA FF      lea d, [bp + -6] ; $i
10443  4701 FD 43         mov [d], b
10444  4703 27            mov b, a
10445  4704 0A 7A 46      jmp _while247_cond
10446  4707             _while247_exit:
10447  4707             ; while (i > 0) { 
10448  4707             _while254_cond:
10449  4707 FA FA FF      lea d, [bp + -6] ; $i
10450  470A 2A            mov b, [d]
10451  470B 38 00 00      mov c, 0
10452  470E             ; --- START RELATIONAL
10453  470E D7            push a
10454  470F 11            mov a, b
10455  4710 FD 2E 00 00   mov32 cb, $00000000
10455  4714 00 00 
10456  4716 B0            cmp a, b
10457  4717 FD 7F         sgt ; >
10458  4719 E4            pop a
10459  471A             ; --- END RELATIONAL
10460  471A C0 00 00      cmp b, 0
10461  471D C6 4F 47      je _while254_exit
10462  4720             _while254_block:
10463  4720             ; i--; 
10464  4720 FA FA FF      lea d, [bp + -6] ; $i
10465  4723 2A            mov b, [d]
10466  4724 38 00 00      mov c, 0
10467  4727 11            mov a, b
10468  4728 FD 7D         dec b
10469  472A FA FA FF      lea d, [bp + -6] ; $i
10470  472D FD 43         mov [d], b
10471  472F 27            mov b, a
10472  4730             ; putchar(digits[i]); 
10473  4730             ; --- START FUNCTION CALL
10474  4730 FA FC FF      lea d, [bp + -4] ; $digits
10475  4733 D7            push a
10476  4734 DA            push d
10477  4735 FA FA FF      lea d, [bp + -6] ; $i
10478  4738 2A            mov b, [d]
10479  4739 38 00 00      mov c, 0
10480  473C E7            pop d
10481  473D 5A            add d, b
10482  473E E4            pop a
10483  473F 32            mov bl, [d]
10484  4740 A7 00         mov bh, 0
10485  4742 38 00 00      mov c, 0
10486  4745 DD            push bl
10487  4746 07 0E 43      call putchar
10488  4749 51 01 00      add sp, 1
10489  474C             ; --- END FUNCTION CALL
10490  474C 0A 07 47      jmp _while254_cond
10491  474F             _while254_exit:
10492  474F F9            leave
10493  4750 09            ret
10494  4751             
10495  4751             printx16:
10496  4751 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10497  4754             ; --- BEGIN INLINE ASM SEGMENT
10498  4754 FA 05 00      lea d, [bp + 5] ; $hex
10499  4757 2A            mov b, [d]
10500  4758             print_u16x_printx16:
10501  4758 DD            push bl
10502  4759 30            mov bl, bh
10503  475A 07 77 47      call _itoa_printx16        ; convert bh to char in A
10504  475D 2F            mov bl, al        ; save al
10505  475E 19 00         mov al, 0
10506  4760 05 03         syscall sys_io        ; display AH
10507  4762 24            mov ah, bl        ; retrieve al
10508  4763 19 00         mov al, 0
10509  4765 05 03         syscall sys_io        ; display AL
10510  4767 EA            pop bl
10511  4768 07 77 47      call _itoa_printx16        ; convert bh to char in A
10512  476B 2F            mov bl, al        ; save al
10513  476C 19 00         mov al, 0
10514  476E 05 03         syscall sys_io        ; display AH
10515  4770 24            mov ah, bl        ; retrieve al
10516  4771 19 00         mov al, 0
10517  4773 05 03         syscall sys_io        ; display AL
10518  4775             ; --- END INLINE ASM SEGMENT
10519  4775             ; return; 
10520  4775 F9            leave
10521  4776 09            ret
10522  4777             ; --- BEGIN INLINE ASM SEGMENT
10523  4777             _itoa_printx16:
10524  4777 DA            push d
10525  4778 D8            push b
10526  4779 A7 00         mov bh, 0
10527  477B FD A4 04      shr bl, 4  
10528  477E 74            mov d, b
10529  477F 1F 91 47      mov al, [d + s_hex_digits_printx16]
10530  4782 23            mov ah, al
10531  4783 E5            pop b
10532  4784 D8            push b
10533  4785 A7 00         mov bh, 0
10534  4787 FD 87 0F      and bl, $0F
10535  478A 74            mov d, b
10536  478B 1F 91 47      mov al, [d + s_hex_digits_printx16]
10537  478E E5            pop b
10538  478F E7            pop d
10539  4790 09            ret
10540  4791 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
10540  4795 34 35 36 37 
10540  4799 38 39 41 42 
10540  479D 43 44 45 46 
10541  47A1             ; --- END INLINE ASM SEGMENT
10542  47A1 F9            leave
10543  47A2 09            ret
10544  47A3             
10545  47A3             malloc:
10546  47A3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10547  47A6             ; heap_top = heap_top + bytes; 
10548  47A6 3B EC 53      mov d, _heap_top ; $heap_top
10549  47A9 DA            push d
10550  47AA 3B EC 53      mov d, _heap_top ; $heap_top
10551  47AD 2A            mov b, [d]
10552  47AE 38 00 00      mov c, 0
10553  47B1             ; --- START TERMS
10554  47B1 D7            push a
10555  47B2 11            mov a, b
10556  47B3 FA 05 00      lea d, [bp + 5] ; $bytes
10557  47B6 2A            mov b, [d]
10558  47B7 38 00 00      mov c, 0
10559  47BA 56            add b, a
10560  47BB E4            pop a
10561  47BC             ; --- END TERMS
10562  47BC E7            pop d
10563  47BD FD 43         mov [d], b
10564  47BF             ; return heap_top - bytes; 
10565  47BF 3B EC 53      mov d, _heap_top ; $heap_top
10566  47C2 2A            mov b, [d]
10567  47C3 38 00 00      mov c, 0
10568  47C6             ; --- START TERMS
10569  47C6 D7            push a
10570  47C7 11            mov a, b
10571  47C8 FA 05 00      lea d, [bp + 5] ; $bytes
10572  47CB 2A            mov b, [d]
10573  47CC 38 00 00      mov c, 0
10574  47CF 60            sub a, b
10575  47D0 27            mov b, a
10576  47D1 E4            pop a
10577  47D2             ; --- END TERMS
10578  47D2 F9            leave
10579  47D3 09            ret
10580  47D4             
10581  47D4             is_space:
10582  47D4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10583  47D7             ; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
10584  47D7 FA 05 00      lea d, [bp + 5] ; $c
10585  47DA 32            mov bl, [d]
10586  47DB A7 00         mov bh, 0
10587  47DD 38 00 00      mov c, 0
10588  47E0             ; --- START RELATIONAL
10589  47E0 D7            push a
10590  47E1 11            mov a, b
10591  47E2 FD 2E 20 00   mov32 cb, $00000020
10591  47E6 00 00 
10592  47E8 B0            cmp a, b
10593  47E9 FD 71         seq ; ==
10594  47EB E4            pop a
10595  47EC             ; --- END RELATIONAL
10596  47EC             ; --- START LOGICAL OR
10597  47EC D7            push a
10598  47ED 11            mov a, b
10599  47EE FA 05 00      lea d, [bp + 5] ; $c
10600  47F1 32            mov bl, [d]
10601  47F2 A7 00         mov bh, 0
10602  47F4 38 00 00      mov c, 0
10603  47F7             ; --- START RELATIONAL
10604  47F7 D7            push a
10605  47F8 11            mov a, b
10606  47F9 FD 2E 09 00   mov32 cb, $00000009
10606  47FD 00 00 
10607  47FF B0            cmp a, b
10608  4800 FD 71         seq ; ==
10609  4802 E4            pop a
10610  4803             ; --- END RELATIONAL
10611  4803 FD A8         sor a, b ; ||
10612  4805 11            mov a, b
10613  4806 FA 05 00      lea d, [bp + 5] ; $c
10614  4809 32            mov bl, [d]
10615  480A A7 00         mov bh, 0
10616  480C 38 00 00      mov c, 0
10617  480F             ; --- START RELATIONAL
10618  480F D7            push a
10619  4810 11            mov a, b
10620  4811 FD 2E 0A 00   mov32 cb, $0000000a
10620  4815 00 00 
10621  4817 B0            cmp a, b
10622  4818 FD 71         seq ; ==
10623  481A E4            pop a
10624  481B             ; --- END RELATIONAL
10625  481B FD A8         sor a, b ; ||
10626  481D 11            mov a, b
10627  481E FA 05 00      lea d, [bp + 5] ; $c
10628  4821 32            mov bl, [d]
10629  4822 A7 00         mov bh, 0
10630  4824 38 00 00      mov c, 0
10631  4827             ; --- START RELATIONAL
10632  4827 D7            push a
10633  4828 11            mov a, b
10634  4829 FD 2E 0D 00   mov32 cb, $0000000d
10634  482D 00 00 
10635  482F B0            cmp a, b
10636  4830 FD 71         seq ; ==
10637  4832 E4            pop a
10638  4833             ; --- END RELATIONAL
10639  4833 FD A8         sor a, b ; ||
10640  4835 E4            pop a
10641  4836             ; --- END LOGICAL OR
10642  4836 F9            leave
10643  4837 09            ret
10644  4838             
10645  4838             is_alpha:
10646  4838 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10647  483B             ; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
10648  483B FA 05 00      lea d, [bp + 5] ; $c
10649  483E 32            mov bl, [d]
10650  483F A7 00         mov bh, 0
10651  4841 38 00 00      mov c, 0
10652  4844             ; --- START RELATIONAL
10653  4844 D7            push a
10654  4845 11            mov a, b
10655  4846 FD 2E 61 00   mov32 cb, $00000061
10655  484A 00 00 
10656  484C B0            cmp a, b
10657  484D FD 80         sge ; >=
10658  484F E4            pop a
10659  4850             ; --- END RELATIONAL
10660  4850             ; --- START LOGICAL AND
10661  4850 D7            push a
10662  4851 11            mov a, b
10663  4852 FA 05 00      lea d, [bp + 5] ; $c
10664  4855 32            mov bl, [d]
10665  4856 A7 00         mov bh, 0
10666  4858 38 00 00      mov c, 0
10667  485B             ; --- START RELATIONAL
10668  485B D7            push a
10669  485C 11            mov a, b
10670  485D FD 2E 7A 00   mov32 cb, $0000007a
10670  4861 00 00 
10671  4863 B0            cmp a, b
10672  4864 FD 74         sle ; <= (signed)
10673  4866 E4            pop a
10674  4867             ; --- END RELATIONAL
10675  4867 FD A7         sand a, b
10676  4869 E4            pop a
10677  486A             ; --- END LOGICAL AND
10678  486A             ; --- START LOGICAL OR
10679  486A D7            push a
10680  486B 11            mov a, b
10681  486C FA 05 00      lea d, [bp + 5] ; $c
10682  486F 32            mov bl, [d]
10683  4870 A7 00         mov bh, 0
10684  4872 38 00 00      mov c, 0
10685  4875             ; --- START RELATIONAL
10686  4875 D7            push a
10687  4876 11            mov a, b
10688  4877 FD 2E 41 00   mov32 cb, $00000041
10688  487B 00 00 
10689  487D B0            cmp a, b
10690  487E FD 80         sge ; >=
10691  4880 E4            pop a
10692  4881             ; --- END RELATIONAL
10693  4881             ; --- START LOGICAL AND
10694  4881 D7            push a
10695  4882 11            mov a, b
10696  4883 FA 05 00      lea d, [bp + 5] ; $c
10697  4886 32            mov bl, [d]
10698  4887 A7 00         mov bh, 0
10699  4889 38 00 00      mov c, 0
10700  488C             ; --- START RELATIONAL
10701  488C D7            push a
10702  488D 11            mov a, b
10703  488E FD 2E 5A 00   mov32 cb, $0000005a
10703  4892 00 00 
10704  4894 B0            cmp a, b
10705  4895 FD 74         sle ; <= (signed)
10706  4897 E4            pop a
10707  4898             ; --- END RELATIONAL
10708  4898 FD A7         sand a, b
10709  489A E4            pop a
10710  489B             ; --- END LOGICAL AND
10711  489B FD A8         sor a, b ; ||
10712  489D 11            mov a, b
10713  489E FA 05 00      lea d, [bp + 5] ; $c
10714  48A1 32            mov bl, [d]
10715  48A2 A7 00         mov bh, 0
10716  48A4 38 00 00      mov c, 0
10717  48A7             ; --- START RELATIONAL
10718  48A7 D7            push a
10719  48A8 11            mov a, b
10720  48A9 FD 2E 5F 00   mov32 cb, $0000005f
10720  48AD 00 00 
10721  48AF B0            cmp a, b
10722  48B0 FD 71         seq ; ==
10723  48B2 E4            pop a
10724  48B3             ; --- END RELATIONAL
10725  48B3 FD A8         sor a, b ; ||
10726  48B5 E4            pop a
10727  48B6             ; --- END LOGICAL OR
10728  48B6 F9            leave
10729  48B7 09            ret
10730  48B8             
10731  48B8             is_digit:
10732  48B8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10733  48BB             ; return c >= '0' && c <= '9'; 
10734  48BB FA 05 00      lea d, [bp + 5] ; $c
10735  48BE 32            mov bl, [d]
10736  48BF A7 00         mov bh, 0
10737  48C1 38 00 00      mov c, 0
10738  48C4             ; --- START RELATIONAL
10739  48C4 D7            push a
10740  48C5 11            mov a, b
10741  48C6 FD 2E 30 00   mov32 cb, $00000030
10741  48CA 00 00 
10742  48CC B0            cmp a, b
10743  48CD FD 80         sge ; >=
10744  48CF E4            pop a
10745  48D0             ; --- END RELATIONAL
10746  48D0             ; --- START LOGICAL AND
10747  48D0 D7            push a
10748  48D1 11            mov a, b
10749  48D2 FA 05 00      lea d, [bp + 5] ; $c
10750  48D5 32            mov bl, [d]
10751  48D6 A7 00         mov bh, 0
10752  48D8 38 00 00      mov c, 0
10753  48DB             ; --- START RELATIONAL
10754  48DB D7            push a
10755  48DC 11            mov a, b
10756  48DD FD 2E 39 00   mov32 cb, $00000039
10756  48E1 00 00 
10757  48E3 B0            cmp a, b
10758  48E4 FD 74         sle ; <= (signed)
10759  48E6 E4            pop a
10760  48E7             ; --- END RELATIONAL
10761  48E7 FD A7         sand a, b
10762  48E9 E4            pop a
10763  48EA             ; --- END LOGICAL AND
10764  48EA F9            leave
10765  48EB 09            ret
10766  48EC             
10767  48EC             strcmp:
10768  48EC F8 00 00      enter 0 ; (push bp; mov bp, sp)
10769  48EF             ; while (*s1 && (*s1 == *s2)) { 
10770  48EF             _while255_cond:
10771  48EF FA 05 00      lea d, [bp + 5] ; $s1
10772  48F2 2A            mov b, [d]
10773  48F3 38 00 00      mov c, 0
10774  48F6 74            mov d, b
10775  48F7 32            mov bl, [d]
10776  48F8 A7 00         mov bh, 0
10777  48FA 38 00 00      mov c, 0
10778  48FD             ; --- START LOGICAL AND
10779  48FD D7            push a
10780  48FE 11            mov a, b
10781  48FF FA 05 00      lea d, [bp + 5] ; $s1
10782  4902 2A            mov b, [d]
10783  4903 38 00 00      mov c, 0
10784  4906 74            mov d, b
10785  4907 32            mov bl, [d]
10786  4908 A7 00         mov bh, 0
10787  490A 38 00 00      mov c, 0
10788  490D             ; --- START RELATIONAL
10789  490D D7            push a
10790  490E 11            mov a, b
10791  490F FA 07 00      lea d, [bp + 7] ; $s2
10792  4912 2A            mov b, [d]
10793  4913 38 00 00      mov c, 0
10794  4916 74            mov d, b
10795  4917 32            mov bl, [d]
10796  4918 A7 00         mov bh, 0
10797  491A 38 00 00      mov c, 0
10798  491D B0            cmp a, b
10799  491E FD 71         seq ; ==
10800  4920 E4            pop a
10801  4921             ; --- END RELATIONAL
10802  4921 FD A7         sand a, b
10803  4923 E4            pop a
10804  4924             ; --- END LOGICAL AND
10805  4924 C0 00 00      cmp b, 0
10806  4927 C6 4D 49      je _while255_exit
10807  492A             _while255_block:
10808  492A             ; s1++; 
10809  492A FA 05 00      lea d, [bp + 5] ; $s1
10810  492D 2A            mov b, [d]
10811  492E 38 00 00      mov c, 0
10812  4931 FD 77         inc b
10813  4933 FA 05 00      lea d, [bp + 5] ; $s1
10814  4936 FD 43         mov [d], b
10815  4938 FD 7D         dec b
10816  493A             ; s2++; 
10817  493A FA 07 00      lea d, [bp + 7] ; $s2
10818  493D 2A            mov b, [d]
10819  493E 38 00 00      mov c, 0
10820  4941 FD 77         inc b
10821  4943 FA 07 00      lea d, [bp + 7] ; $s2
10822  4946 FD 43         mov [d], b
10823  4948 FD 7D         dec b
10824  494A 0A EF 48      jmp _while255_cond
10825  494D             _while255_exit:
10826  494D             ; return *s1 - *s2; 
10827  494D FA 05 00      lea d, [bp + 5] ; $s1
10828  4950 2A            mov b, [d]
10829  4951 38 00 00      mov c, 0
10830  4954 74            mov d, b
10831  4955 32            mov bl, [d]
10832  4956 A7 00         mov bh, 0
10833  4958 38 00 00      mov c, 0
10834  495B             ; --- START TERMS
10835  495B D7            push a
10836  495C 11            mov a, b
10837  495D FA 07 00      lea d, [bp + 7] ; $s2
10838  4960 2A            mov b, [d]
10839  4961 38 00 00      mov c, 0
10840  4964 74            mov d, b
10841  4965 32            mov bl, [d]
10842  4966 A7 00         mov bh, 0
10843  4968 38 00 00      mov c, 0
10844  496B 60            sub a, b
10845  496C 27            mov b, a
10846  496D E4            pop a
10847  496E             ; --- END TERMS
10848  496E F9            leave
10849  496F 09            ret
10850  4970             
10851  4970             strlen:
10852  4970 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10853  4973             ; int length; 
10854  4973 52 02 00      sub sp, 2
10855  4976             ; length = 0; 
10856  4976 FA FF FF      lea d, [bp + -1] ; $length
10857  4979 DA            push d
10858  497A FD 2E 00 00   mov32 cb, $00000000
10858  497E 00 00 
10859  4980 E7            pop d
10860  4981 FD 43         mov [d], b
10861  4983             ; while (str[length] != 0) { 
10862  4983             _while256_cond:
10863  4983 FA 05 00      lea d, [bp + 5] ; $str
10864  4986 FD 2A         mov d, [d]
10865  4988 D7            push a
10866  4989 DA            push d
10867  498A FA FF FF      lea d, [bp + -1] ; $length
10868  498D 2A            mov b, [d]
10869  498E 38 00 00      mov c, 0
10870  4991 E7            pop d
10871  4992 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
10872  4996 E4            pop a
10873  4997 32            mov bl, [d]
10874  4998 A7 00         mov bh, 0
10875  499A 38 00 00      mov c, 0
10876  499D             ; --- START RELATIONAL
10877  499D D7            push a
10878  499E 11            mov a, b
10879  499F FD 2E 00 00   mov32 cb, $00000000
10879  49A3 00 00 
10880  49A5 B0            cmp a, b
10881  49A6 FD 72         sneq ; !=
10882  49A8 E4            pop a
10883  49A9             ; --- END RELATIONAL
10884  49A9 C0 00 00      cmp b, 0
10885  49AC C6 C2 49      je _while256_exit
10886  49AF             _while256_block:
10887  49AF             ; length++; 
10888  49AF FA FF FF      lea d, [bp + -1] ; $length
10889  49B2 2A            mov b, [d]
10890  49B3 38 00 00      mov c, 0
10891  49B6 11            mov a, b
10892  49B7 FD 77         inc b
10893  49B9 FA FF FF      lea d, [bp + -1] ; $length
10894  49BC FD 43         mov [d], b
10895  49BE 27            mov b, a
10896  49BF 0A 83 49      jmp _while256_cond
10897  49C2             _while256_exit:
10898  49C2             ; return length; 
10899  49C2 FA FF FF      lea d, [bp + -1] ; $length
10900  49C5 2A            mov b, [d]
10901  49C6 38 00 00      mov c, 0
10902  49C9 F9            leave
10903  49CA 09            ret
10904  49CB             
10905  49CB             atoi:
10906  49CB F8 00 00      enter 0 ; (push bp; mov bp, sp)
10907  49CE             ; int result = 0;  // Initialize result 
10908  49CE 52 02 00      sub sp, 2
10909  49D1             ; --- START LOCAL VAR INITIALIZATION
10910  49D1 FA FF FF      lea d, [bp + -1] ; $result
10911  49D4 DA            push d
10912  49D5 FD 2E 00 00   mov32 cb, $00000000
10912  49D9 00 00 
10913  49DB E7            pop d
10914  49DC FD 43         mov [d], b
10915  49DE             ; --- END LOCAL VAR INITIALIZATION
10916  49DE             ; int sign = 1;    // Initialize sign as positive 
10917  49DE 52 02 00      sub sp, 2
10918  49E1             ; --- START LOCAL VAR INITIALIZATION
10919  49E1 FA FD FF      lea d, [bp + -3] ; $sign
10920  49E4 DA            push d
10921  49E5 FD 2E 01 00   mov32 cb, $00000001
10921  49E9 00 00 
10922  49EB E7            pop d
10923  49EC FD 43         mov [d], b
10924  49EE             ; --- END LOCAL VAR INITIALIZATION
10925  49EE             ; while (*str == ' ') str++; 
10926  49EE             _while257_cond:
10927  49EE FA 05 00      lea d, [bp + 5] ; $str
10928  49F1 2A            mov b, [d]
10929  49F2 38 00 00      mov c, 0
10930  49F5 74            mov d, b
10931  49F6 32            mov bl, [d]
10932  49F7 A7 00         mov bh, 0
10933  49F9 38 00 00      mov c, 0
10934  49FC             ; --- START RELATIONAL
10935  49FC D7            push a
10936  49FD 11            mov a, b
10937  49FE FD 2E 20 00   mov32 cb, $00000020
10937  4A02 00 00 
10938  4A04 B0            cmp a, b
10939  4A05 FD 71         seq ; ==
10940  4A07 E4            pop a
10941  4A08             ; --- END RELATIONAL
10942  4A08 C0 00 00      cmp b, 0
10943  4A0B C6 21 4A      je _while257_exit
10944  4A0E             _while257_block:
10945  4A0E             ; str++; 
10946  4A0E FA 05 00      lea d, [bp + 5] ; $str
10947  4A11 2A            mov b, [d]
10948  4A12 38 00 00      mov c, 0
10949  4A15 FD 77         inc b
10950  4A17 FA 05 00      lea d, [bp + 5] ; $str
10951  4A1A FD 43         mov [d], b
10952  4A1C FD 7D         dec b
10953  4A1E 0A EE 49      jmp _while257_cond
10954  4A21             _while257_exit:
10955  4A21             ; if (*str == '-' || *str == '+') { 
10956  4A21             _if258_cond:
10957  4A21 FA 05 00      lea d, [bp + 5] ; $str
10958  4A24 2A            mov b, [d]
10959  4A25 38 00 00      mov c, 0
10960  4A28 74            mov d, b
10961  4A29 32            mov bl, [d]
10962  4A2A A7 00         mov bh, 0
10963  4A2C 38 00 00      mov c, 0
10964  4A2F             ; --- START RELATIONAL
10965  4A2F D7            push a
10966  4A30 11            mov a, b
10967  4A31 FD 2E 2D 00   mov32 cb, $0000002d
10967  4A35 00 00 
10968  4A37 B0            cmp a, b
10969  4A38 FD 71         seq ; ==
10970  4A3A E4            pop a
10971  4A3B             ; --- END RELATIONAL
10972  4A3B             ; --- START LOGICAL OR
10973  4A3B D7            push a
10974  4A3C 11            mov a, b
10975  4A3D FA 05 00      lea d, [bp + 5] ; $str
10976  4A40 2A            mov b, [d]
10977  4A41 38 00 00      mov c, 0
10978  4A44 74            mov d, b
10979  4A45 32            mov bl, [d]
10980  4A46 A7 00         mov bh, 0
10981  4A48 38 00 00      mov c, 0
10982  4A4B             ; --- START RELATIONAL
10983  4A4B D7            push a
10984  4A4C 11            mov a, b
10985  4A4D FD 2E 2B 00   mov32 cb, $0000002b
10985  4A51 00 00 
10986  4A53 B0            cmp a, b
10987  4A54 FD 71         seq ; ==
10988  4A56 E4            pop a
10989  4A57             ; --- END RELATIONAL
10990  4A57 FD A8         sor a, b ; ||
10991  4A59 E4            pop a
10992  4A5A             ; --- END LOGICAL OR
10993  4A5A C0 00 00      cmp b, 0
10994  4A5D C6 A3 4A      je _if258_exit
10995  4A60             _if258_TRUE:
10996  4A60             ; if (*str == '-') sign = -1; 
10997  4A60             _if259_cond:
10998  4A60 FA 05 00      lea d, [bp + 5] ; $str
10999  4A63 2A            mov b, [d]
11000  4A64 38 00 00      mov c, 0
11001  4A67 74            mov d, b
11002  4A68 32            mov bl, [d]
11003  4A69 A7 00         mov bh, 0
11004  4A6B 38 00 00      mov c, 0
11005  4A6E             ; --- START RELATIONAL
11006  4A6E D7            push a
11007  4A6F 11            mov a, b
11008  4A70 FD 2E 2D 00   mov32 cb, $0000002d
11008  4A74 00 00 
11009  4A76 B0            cmp a, b
11010  4A77 FD 71         seq ; ==
11011  4A79 E4            pop a
11012  4A7A             ; --- END RELATIONAL
11013  4A7A C0 00 00      cmp b, 0
11014  4A7D C6 90 4A      je _if259_exit
11015  4A80             _if259_TRUE:
11016  4A80             ; sign = -1; 
11017  4A80 FA FD FF      lea d, [bp + -3] ; $sign
11018  4A83 DA            push d
11019  4A84 FD 2E FF FF   mov32 cb, $ffffffff
11019  4A88 FF FF 
11020  4A8A E7            pop d
11021  4A8B FD 43         mov [d], b
11022  4A8D 0A 90 4A      jmp _if259_exit
11023  4A90             _if259_exit:
11024  4A90             ; str++; 
11025  4A90 FA 05 00      lea d, [bp + 5] ; $str
11026  4A93 2A            mov b, [d]
11027  4A94 38 00 00      mov c, 0
11028  4A97 FD 77         inc b
11029  4A99 FA 05 00      lea d, [bp + 5] ; $str
11030  4A9C FD 43         mov [d], b
11031  4A9E FD 7D         dec b
11032  4AA0 0A A3 4A      jmp _if258_exit
11033  4AA3             _if258_exit:
11034  4AA3             ; while (*str >= '0' && *str <= '9') { 
11035  4AA3             _while260_cond:
11036  4AA3 FA 05 00      lea d, [bp + 5] ; $str
11037  4AA6 2A            mov b, [d]
11038  4AA7 38 00 00      mov c, 0
11039  4AAA 74            mov d, b
11040  4AAB 32            mov bl, [d]
11041  4AAC A7 00         mov bh, 0
11042  4AAE 38 00 00      mov c, 0
11043  4AB1             ; --- START RELATIONAL
11044  4AB1 D7            push a
11045  4AB2 11            mov a, b
11046  4AB3 FD 2E 30 00   mov32 cb, $00000030
11046  4AB7 00 00 
11047  4AB9 B0            cmp a, b
11048  4ABA FD 82         sgeu ; >= (unsigned)
11049  4ABC E4            pop a
11050  4ABD             ; --- END RELATIONAL
11051  4ABD             ; --- START LOGICAL AND
11052  4ABD D7            push a
11053  4ABE 11            mov a, b
11054  4ABF FA 05 00      lea d, [bp + 5] ; $str
11055  4AC2 2A            mov b, [d]
11056  4AC3 38 00 00      mov c, 0
11057  4AC6 74            mov d, b
11058  4AC7 32            mov bl, [d]
11059  4AC8 A7 00         mov bh, 0
11060  4ACA 38 00 00      mov c, 0
11061  4ACD             ; --- START RELATIONAL
11062  4ACD D7            push a
11063  4ACE 11            mov a, b
11064  4ACF FD 2E 39 00   mov32 cb, $00000039
11064  4AD3 00 00 
11065  4AD5 B0            cmp a, b
11066  4AD6 FD 76         sleu ; <= (unsigned)
11067  4AD8 E4            pop a
11068  4AD9             ; --- END RELATIONAL
11069  4AD9 FD A7         sand a, b
11070  4ADB E4            pop a
11071  4ADC             ; --- END LOGICAL AND
11072  4ADC C0 00 00      cmp b, 0
11073  4ADF C6 6B 4B      je _while260_exit
11074  4AE2             _while260_block:
11075  4AE2             ; result = result * 10 + (*str - '0'); 
11076  4AE2 FA FF FF      lea d, [bp + -1] ; $result
11077  4AE5 DA            push d
11078  4AE6 FA FF FF      lea d, [bp + -1] ; $result
11079  4AE9 2A            mov b, [d]
11080  4AEA 38 00 00      mov c, 0
11081  4AED             ; --- START FACTORS
11082  4AED D7            push a
11083  4AEE FD D8         push g
11084  4AF0 11            mov a, b
11085  4AF1 FD 7A         mov g, c
11086  4AF3 FD 2E 0A 00   mov32 cb, $0000000a
11086  4AF7 00 00 
11087  4AF9 D7            push a     ; save left operand
11088  4AFA 8E            xor a, b   ; xor sign bits
11089  4AFB FD AA         swp a      ; swap bytes
11090  4AFD 83            mov cl, al ; save result of xor into 'dl'
11091  4AFE E4            pop a      ; restore left side operator
11092  4AFF DF            push cl    ; save result of xor above
11093  4B00 FD AA         swp a  
11094  4B02 93 80         test al, $80  
11095  4B04 FD AA         swp a  
11096  4B06 C6 0B 4B      jz skip_invert_a_262  
11097  4B09 FD 95         neg a 
11098  4B0B             skip_invert_a_262:   
11099  4B0B FD AB         swp b
11100  4B0D FD 93 80      test bl, $80  
11101  4B10 FD AB         swp b
11102  4B12 C6 17 4B      jz skip_invert_b_262  
11103  4B15 FD 97         neg b 
11104  4B17             skip_invert_b_262:   
11105  4B17 AC            mul a, b ; *
11106  4B18 FD 78         mov g, a
11107  4B1A 11            mov a, b
11108  4B1B EA            pop bl
11109  4B1C FD 93 80      test bl, $80
11110  4B1F C6 2C 4B      jz _same_signs_262
11111  4B22 2F            mov bl, al
11112  4B23 95            not a
11113  4B24 FD 97         neg b
11114  4B26 5B 00 00      adc a, 0
11115  4B29 FD 78         mov g, a
11116  4B2B 11            mov a, b
11117  4B2C             _same_signs_262:
11118  4B2C FD 38         mov c, g
11119  4B2E 27            mov b, a
11120  4B2F FD F1         pop g
11121  4B31 E4            pop a
11122  4B32             ; --- END FACTORS
11123  4B32             ; --- START TERMS
11124  4B32 D7            push a
11125  4B33 FD D8         push g
11126  4B35 11            mov a, b
11127  4B36 FD 7A         mov g, c
11128  4B38 FA 05 00      lea d, [bp + 5] ; $str
11129  4B3B 2A            mov b, [d]
11130  4B3C 38 00 00      mov c, 0
11131  4B3F 74            mov d, b
11132  4B40 32            mov bl, [d]
11133  4B41 A7 00         mov bh, 0
11134  4B43 38 00 00      mov c, 0
11135  4B46             ; --- START TERMS
11136  4B46 D7            push a
11137  4B47 11            mov a, b
11138  4B48 FD 2E 30 00   mov32 cb, $00000030
11138  4B4C 00 00 
11139  4B4E 60            sub a, b
11140  4B4F 27            mov b, a
11141  4B50 E4            pop a
11142  4B51             ; --- END TERMS
11143  4B51 56            add b, a
11144  4B52 FD F1         pop g
11145  4B54 E4            pop a
11146  4B55             ; --- END TERMS
11147  4B55 E7            pop d
11148  4B56 FD 43         mov [d], b
11149  4B58             ; str++; 
11150  4B58 FA 05 00      lea d, [bp + 5] ; $str
11151  4B5B 2A            mov b, [d]
11152  4B5C 38 00 00      mov c, 0
11153  4B5F FD 77         inc b
11154  4B61 FA 05 00      lea d, [bp + 5] ; $str
11155  4B64 FD 43         mov [d], b
11156  4B66 FD 7D         dec b
11157  4B68 0A A3 4A      jmp _while260_cond
11158  4B6B             _while260_exit:
11159  4B6B             ; return sign * result; 
11160  4B6B FA FD FF      lea d, [bp + -3] ; $sign
11161  4B6E 2A            mov b, [d]
11162  4B6F 38 00 00      mov c, 0
11163  4B72             ; --- START FACTORS
11164  4B72 D7            push a
11165  4B73 FD D8         push g
11166  4B75 11            mov a, b
11167  4B76 FD 7A         mov g, c
11168  4B78 FA FF FF      lea d, [bp + -1] ; $result
11169  4B7B 2A            mov b, [d]
11170  4B7C 38 00 00      mov c, 0
11171  4B7F D7            push a     ; save left operand
11172  4B80 8E            xor a, b   ; xor sign bits
11173  4B81 FD AA         swp a      ; swap bytes
11174  4B83 83            mov cl, al ; save result of xor into 'dl'
11175  4B84 E4            pop a      ; restore left side operator
11176  4B85 DF            push cl    ; save result of xor above
11177  4B86 FD AA         swp a  
11178  4B88 93 80         test al, $80  
11179  4B8A FD AA         swp a  
11180  4B8C C6 91 4B      jz skip_invert_a_264  
11181  4B8F FD 95         neg a 
11182  4B91             skip_invert_a_264:   
11183  4B91 FD AB         swp b
11184  4B93 FD 93 80      test bl, $80  
11185  4B96 FD AB         swp b
11186  4B98 C6 9D 4B      jz skip_invert_b_264  
11187  4B9B FD 97         neg b 
11188  4B9D             skip_invert_b_264:   
11189  4B9D AC            mul a, b ; *
11190  4B9E FD 78         mov g, a
11191  4BA0 11            mov a, b
11192  4BA1 EA            pop bl
11193  4BA2 FD 93 80      test bl, $80
11194  4BA5 C6 B2 4B      jz _same_signs_264
11195  4BA8 2F            mov bl, al
11196  4BA9 95            not a
11197  4BAA FD 97         neg b
11198  4BAC 5B 00 00      adc a, 0
11199  4BAF FD 78         mov g, a
11200  4BB1 11            mov a, b
11201  4BB2             _same_signs_264:
11202  4BB2 FD 38         mov c, g
11203  4BB4 27            mov b, a
11204  4BB5 FD F1         pop g
11205  4BB7 E4            pop a
11206  4BB8             ; --- END FACTORS
11207  4BB8 F9            leave
11208  4BB9 09            ret
11209  4BBA             
11210  4BBA             exit:
11211  4BBA F8 00 00      enter 0 ; (push bp; mov bp, sp)
11212  4BBD             ; --- BEGIN INLINE ASM SEGMENT
11213  4BBD FA 05 00      lea d, [bp + 5] ; $status
11214  4BC0 2A            mov b, [d] ; return value
11215  4BC1 05 0B         syscall sys_terminate_proc
11216  4BC3             ; --- END INLINE ASM SEGMENT
11217  4BC3 F9            leave
11218  4BC4 09            ret
11219  4BC5             
11220  4BC5             strcpy:
11221  4BC5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11222  4BC8             ; char *psrc; 
11223  4BC8 52 02 00      sub sp, 2
11224  4BCB             ; char *pdest; 
11225  4BCB 52 02 00      sub sp, 2
11226  4BCE             ; psrc = src; 
11227  4BCE FA FF FF      lea d, [bp + -1] ; $psrc
11228  4BD1 DA            push d
11229  4BD2 FA 07 00      lea d, [bp + 7] ; $src
11230  4BD5 2A            mov b, [d]
11231  4BD6 38 00 00      mov c, 0
11232  4BD9 E7            pop d
11233  4BDA FD 43         mov [d], b
11234  4BDC             ; pdest = dest; 
11235  4BDC FA FD FF      lea d, [bp + -3] ; $pdest
11236  4BDF DA            push d
11237  4BE0 FA 05 00      lea d, [bp + 5] ; $dest
11238  4BE3 2A            mov b, [d]
11239  4BE4 38 00 00      mov c, 0
11240  4BE7 E7            pop d
11241  4BE8 FD 43         mov [d], b
11242  4BEA             ; while(*psrc) *pdest++ = *psrc++; 
11243  4BEA             _while265_cond:
11244  4BEA FA FF FF      lea d, [bp + -1] ; $psrc
11245  4BED 2A            mov b, [d]
11246  4BEE 38 00 00      mov c, 0
11247  4BF1 74            mov d, b
11248  4BF2 32            mov bl, [d]
11249  4BF3 A7 00         mov bh, 0
11250  4BF5 38 00 00      mov c, 0
11251  4BF8 C0 00 00      cmp b, 0
11252  4BFB C6 2C 4C      je _while265_exit
11253  4BFE             _while265_block:
11254  4BFE             ; *pdest++ = *psrc++; 
11255  4BFE FA FD FF      lea d, [bp + -3] ; $pdest
11256  4C01 2A            mov b, [d]
11257  4C02 38 00 00      mov c, 0
11258  4C05 FD 77         inc b
11259  4C07 FA FD FF      lea d, [bp + -3] ; $pdest
11260  4C0A FD 43         mov [d], b
11261  4C0C FD 7D         dec b
11262  4C0E D8            push b
11263  4C0F FA FF FF      lea d, [bp + -1] ; $psrc
11264  4C12 2A            mov b, [d]
11265  4C13 38 00 00      mov c, 0
11266  4C16 FD 77         inc b
11267  4C18 FA FF FF      lea d, [bp + -1] ; $psrc
11268  4C1B FD 43         mov [d], b
11269  4C1D FD 7D         dec b
11270  4C1F 74            mov d, b
11271  4C20 32            mov bl, [d]
11272  4C21 A7 00         mov bh, 0
11273  4C23 38 00 00      mov c, 0
11274  4C26 E7            pop d
11275  4C27 FD 3E         mov [d], bl
11276  4C29 0A EA 4B      jmp _while265_cond
11277  4C2C             _while265_exit:
11278  4C2C             ; *pdest = '\0'; 
11279  4C2C FA FD FF      lea d, [bp + -3] ; $pdest
11280  4C2F 2A            mov b, [d]
11281  4C30 38 00 00      mov c, 0
11282  4C33 D8            push b
11283  4C34 FD 2E 00 00   mov32 cb, $00000000
11283  4C38 00 00 
11284  4C3A E7            pop d
11285  4C3B FD 3E         mov [d], bl
11286  4C3D F9            leave
11287  4C3E 09            ret
11288  4C3F             
11289  4C3F             strcat:
11290  4C3F F8 00 00      enter 0 ; (push bp; mov bp, sp)
11291  4C42             ; int dest_len; 
11292  4C42 52 02 00      sub sp, 2
11293  4C45             ; int i; 
11294  4C45 52 02 00      sub sp, 2
11295  4C48             ; dest_len = strlen(dest); 
11296  4C48 FA FF FF      lea d, [bp + -1] ; $dest_len
11297  4C4B DA            push d
11298  4C4C             ; --- START FUNCTION CALL
11299  4C4C FA 05 00      lea d, [bp + 5] ; $dest
11300  4C4F 2A            mov b, [d]
11301  4C50 38 00 00      mov c, 0
11302  4C53 FD AB         swp b
11303  4C55 D8            push b
11304  4C56 07 70 49      call strlen
11305  4C59 51 02 00      add sp, 2
11306  4C5C             ; --- END FUNCTION CALL
11307  4C5C E7            pop d
11308  4C5D FD 43         mov [d], b
11309  4C5F             ; for (i = 0; src[i] != 0; i=i+1) { 
11310  4C5F             _for266_init:
11311  4C5F FA FD FF      lea d, [bp + -3] ; $i
11312  4C62 DA            push d
11313  4C63 FD 2E 00 00   mov32 cb, $00000000
11313  4C67 00 00 
11314  4C69 E7            pop d
11315  4C6A FD 43         mov [d], b
11316  4C6C             _for266_cond:
11317  4C6C FA 07 00      lea d, [bp + 7] ; $src
11318  4C6F FD 2A         mov d, [d]
11319  4C71 D7            push a
11320  4C72 DA            push d
11321  4C73 FA FD FF      lea d, [bp + -3] ; $i
11322  4C76 2A            mov b, [d]
11323  4C77 38 00 00      mov c, 0
11324  4C7A E7            pop d
11325  4C7B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
11326  4C7F E4            pop a
11327  4C80 32            mov bl, [d]
11328  4C81 A7 00         mov bh, 0
11329  4C83 38 00 00      mov c, 0
11330  4C86             ; --- START RELATIONAL
11331  4C86 D7            push a
11332  4C87 11            mov a, b
11333  4C88 FD 2E 00 00   mov32 cb, $00000000
11333  4C8C 00 00 
11334  4C8E B0            cmp a, b
11335  4C8F FD 72         sneq ; !=
11336  4C91 E4            pop a
11337  4C92             ; --- END RELATIONAL
11338  4C92 C0 00 00      cmp b, 0
11339  4C95 C6 F0 4C      je _for266_exit
11340  4C98             _for266_block:
11341  4C98             ; dest[dest_len + i] = src[i]; 
11342  4C98 FA 05 00      lea d, [bp + 5] ; $dest
11343  4C9B FD 2A         mov d, [d]
11344  4C9D D7            push a
11345  4C9E DA            push d
11346  4C9F FA FF FF      lea d, [bp + -1] ; $dest_len
11347  4CA2 2A            mov b, [d]
11348  4CA3 38 00 00      mov c, 0
11349  4CA6             ; --- START TERMS
11350  4CA6 D7            push a
11351  4CA7 11            mov a, b
11352  4CA8 FA FD FF      lea d, [bp + -3] ; $i
11353  4CAB 2A            mov b, [d]
11354  4CAC 38 00 00      mov c, 0
11355  4CAF 56            add b, a
11356  4CB0 E4            pop a
11357  4CB1             ; --- END TERMS
11358  4CB1 E7            pop d
11359  4CB2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
11360  4CB6 E4            pop a
11361  4CB7 DA            push d
11362  4CB8 FA 07 00      lea d, [bp + 7] ; $src
11363  4CBB FD 2A         mov d, [d]
11364  4CBD D7            push a
11365  4CBE DA            push d
11366  4CBF FA FD FF      lea d, [bp + -3] ; $i
11367  4CC2 2A            mov b, [d]
11368  4CC3 38 00 00      mov c, 0
11369  4CC6 E7            pop d
11370  4CC7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
11371  4CCB E4            pop a
11372  4CCC 32            mov bl, [d]
11373  4CCD A7 00         mov bh, 0
11374  4CCF 38 00 00      mov c, 0
11375  4CD2 E7            pop d
11376  4CD3 FD 3E         mov [d], bl
11377  4CD5             _for266_update:
11378  4CD5 FA FD FF      lea d, [bp + -3] ; $i
11379  4CD8 DA            push d
11380  4CD9 FA FD FF      lea d, [bp + -3] ; $i
11381  4CDC 2A            mov b, [d]
11382  4CDD 38 00 00      mov c, 0
11383  4CE0             ; --- START TERMS
11384  4CE0 D7            push a
11385  4CE1 11            mov a, b
11386  4CE2 FD 2E 01 00   mov32 cb, $00000001
11386  4CE6 00 00 
11387  4CE8 56            add b, a
11388  4CE9 E4            pop a
11389  4CEA             ; --- END TERMS
11390  4CEA E7            pop d
11391  4CEB FD 43         mov [d], b
11392  4CED 0A 6C 4C      jmp _for266_cond
11393  4CF0             _for266_exit:
11394  4CF0             ; dest[dest_len + i] = 0; 
11395  4CF0 FA 05 00      lea d, [bp + 5] ; $dest
11396  4CF3 FD 2A         mov d, [d]
11397  4CF5 D7            push a
11398  4CF6 DA            push d
11399  4CF7 FA FF FF      lea d, [bp + -1] ; $dest_len
11400  4CFA 2A            mov b, [d]
11401  4CFB 38 00 00      mov c, 0
11402  4CFE             ; --- START TERMS
11403  4CFE D7            push a
11404  4CFF 11            mov a, b
11405  4D00 FA FD FF      lea d, [bp + -3] ; $i
11406  4D03 2A            mov b, [d]
11407  4D04 38 00 00      mov c, 0
11408  4D07 56            add b, a
11409  4D08 E4            pop a
11410  4D09             ; --- END TERMS
11411  4D09 E7            pop d
11412  4D0A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
11413  4D0E E4            pop a
11414  4D0F DA            push d
11415  4D10 FD 2E 00 00   mov32 cb, $00000000
11415  4D14 00 00 
11416  4D16 E7            pop d
11417  4D17 FD 3E         mov [d], bl
11418  4D19             ; return dest; 
11419  4D19 FA 05 00      lea d, [bp + 5] ; $dest
11420  4D1C 2A            mov b, [d]
11421  4D1D 38 00 00      mov c, 0
11422  4D20 F9            leave
11423  4D21 09            ret
11424  4D22             ; --- END TEXT SEGMENT
11425  4D22             
11426  4D22             ; --- BEGIN DATA SEGMENT
11427  4D22             _keywords_data:
11428  4D22 D7 4F       .dw _s0
11429  4D24 01          .db 1
11430  4D25 DB 4F       .dw _s1
11431  4D27 02          .db 2
11432  4D28 E3 4F       .dw _s2
11433  4D2A 03          .db 3
11434  4D2B E8 4F       .dw _s3
11435  4D2D 04          .db 4
11436  4D2E ED 4F       .dw _s4
11437  4D30 06          .db 6
11438  4D31 F0 4F       .dw _s5
11439  4D33 07          .db 7
11440  4D34 F3 4F       .dw _s6
11441  4D36 05          .db 5
11442  4D37 F7 4F       .dw _s7
11443  4D39 00          .db 0
11444  4D3A 00 00 00 00 _label_table_data: .fill 288, 0
11444  4D3E 00 00 00 00 
11444  4D42 00 00 00 00 
11444  4D46 00 00 00 00 
11444  4D4A 00 00 00 00 
11444  4D4E 00 00 00 00 
11444  4D52 00 00 00 00 
11444  4D56 00 00 00 00 
11444  4D5A 00 00 00 00 
11444  4D5E 00 00 00 00 
11444  4D62 00 00 00 00 
11444  4D66 00 00 00 00 
11444  4D6A 00 00 00 00 
11444  4D6E 00 00 00 00 
11444  4D72 00 00 00 00 
11444  4D76 00 00 00 00 
11444  4D7A 00 00 00 00 
11444  4D7E 00 00 00 00 
11444  4D82 00 00 00 00 
11444  4D86 00 00 00 00 
11444  4D8A 00 00 00 00 
11444  4D8E 00 00 00 00 
11444  4D92 00 00 00 00 
11444  4D96 00 00 00 00 
11444  4D9A 00 00 00 00 
11444  4D9E 00 00 00 00 
11444  4DA2 00 00 00 00 
11444  4DA6 00 00 00 00 
11444  4DAA 00 00 00 00 
11444  4DAE 00 00 00 00 
11444  4DB2 00 00 00 00 
11444  4DB6 00 00 00 00 
11444  4DBA 00 00 00 00 
11444  4DBE 00 00 00 00 
11444  4DC2 00 00 00 00 
11444  4DC6 00 00 00 00 
11444  4DCA 00 00 00 00 
11444  4DCE 00 00 00 00 
11444  4DD2 00 00 00 00 
11444  4DD6 00 00 00 00 
11444  4DDA 00 00 00 00 
11444  4DDE 00 00 00 00 
11444  4DE2 00 00 00 00 
11444  4DE6 00 00 00 00 
11444  4DEA 00 00 00 00 
11444  4DEE 00 00 00 00 
11444  4DF2 00 00 00 00 
11444  4DF6 00 00 00 00 
11444  4DFA 00 00 00 00 
11444  4DFE 00 00 00 00 
11444  4E02 00 00 00 00 
11444  4E06 00 00 00 00 
11444  4E0A 00 00 00 00 
11444  4E0E 00 00 00 00 
11444  4E12 00 00 00 00 
11444  4E16 00 00 00 00 
11444  4E1A 00 00 00 00 
11444  4E1E 00 00 00 00 
11444  4E22 00 00 00 00 
11444  4E26 00 00 00 00 
11444  4E2A 00 00 00 00 
11444  4E2E 00 00 00 00 
11444  4E32 00 00 00 00 
11444  4E36 00 00 00 00 
11444  4E3A 00 00 00 00 
11444  4E3E 00 00 00 00 
11444  4E42 00 00 00 00 
11444  4E46 00 00 00 00 
11444  4E4A 00 00 00 00 
11444  4E4E 00 00 00 00 
11444  4E52 00 00 00 00 
11444  4E56 00 00 00 00 
11445  4E5A 00 04       __org: .dw $0400
11446  4E5C 00 00       _pc: .fill 2, 0
11447  4E5E 01          _print_information: .db $01
11448  4E5F 00 00       _tok: .fill 2, 0
11449  4E61 00 00       _toktype: .fill 2, 0
11450  4E63 00 00       _prog: .fill 2, 0
11451  4E65 00 00 00 00 _token_data: .fill 64, 0
11451  4E69 00 00 00 00 
11451  4E6D 00 00 00 00 
11451  4E71 00 00 00 00 
11451  4E75 00 00 00 00 
11451  4E79 00 00 00 00 
11451  4E7D 00 00 00 00 
11451  4E81 00 00 00 00 
11451  4E85 00 00 00 00 
11451  4E89 00 00 00 00 
11451  4E8D 00 00 00 00 
11451  4E91 00 00 00 00 
11451  4E95 00 00 00 00 
11451  4E99 00 00 00 00 
11451  4E9D 00 00 00 00 
11451  4EA1 00 00 00 00 
11452  4EA5 00 00 00 00 _string_const_data: .fill 256, 0
11452  4EA9 00 00 00 00 
11452  4EAD 00 00 00 00 
11452  4EB1 00 00 00 00 
11452  4EB5 00 00 00 00 
11452  4EB9 00 00 00 00 
11452  4EBD 00 00 00 00 
11452  4EC1 00 00 00 00 
11452  4EC5 00 00 00 00 
11452  4EC9 00 00 00 00 
11452  4ECD 00 00 00 00 
11452  4ED1 00 00 00 00 
11452  4ED5 00 00 00 00 
11452  4ED9 00 00 00 00 
11452  4EDD 00 00 00 00 
11452  4EE1 00 00 00 00 
11452  4EE5 00 00 00 00 
11452  4EE9 00 00 00 00 
11452  4EED 00 00 00 00 
11452  4EF1 00 00 00 00 
11452  4EF5 00 00 00 00 
11452  4EF9 00 00 00 00 
11452  4EFD 00 00 00 00 
11452  4F01 00 00 00 00 
11452  4F05 00 00 00 00 
11452  4F09 00 00 00 00 
11452  4F0D 00 00 00 00 
11452  4F11 00 00 00 00 
11452  4F15 00 00 00 00 
11452  4F19 00 00 00 00 
11452  4F1D 00 00 00 00 
11452  4F21 00 00 00 00 
11452  4F25 00 00 00 00 
11452  4F29 00 00 00 00 
11452  4F2D 00 00 00 00 
11452  4F31 00 00 00 00 
11452  4F35 00 00 00 00 
11452  4F39 00 00 00 00 
11452  4F3D 00 00 00 00 
11452  4F41 00 00 00 00 
11452  4F45 00 00 00 00 
11452  4F49 00 00 00 00 
11452  4F4D 00 00 00 00 
11452  4F51 00 00 00 00 
11452  4F55 00 00 00 00 
11452  4F59 00 00 00 00 
11452  4F5D 00 00 00 00 
11452  4F61 00 00 00 00 
11452  4F65 00 00 00 00 
11452  4F69 00 00 00 00 
11452  4F6D 00 00 00 00 
11452  4F71 00 00 00 00 
11452  4F75 00 00 00 00 
11452  4F79 00 00 00 00 
11452  4F7D 00 00 00 00 
11452  4F81 00 00 00 00 
11452  4F85 00 00 00 00 
11452  4F89 00 00 00 00 
11452  4F8D 00 00 00 00 
11452  4F91 00 00 00 00 
11452  4F95 00 00 00 00 
11452  4F99 00 00 00 00 
11452  4F9D 00 00 00 00 
11452  4FA1 00 00 00 00 
11453  4FA5 00 00       _int_const: .fill 2, 0
11454  4FA7 00 00       _program: .fill 2, 0
11455  4FA9 00 00       _bin_out: .fill 2, 0
11456  4FAB 00 00       _bin_p: .fill 2, 0
11457  4FAD 00 00       _opcode_table: .fill 2, 0
11458  4FAF 00 00 00 00 _prog_stack_data: .fill 20, 0
11458  4FB3 00 00 00 00 
11458  4FB7 00 00 00 00 
11458  4FBB 00 00 00 00 
11458  4FBF 00 00 00 00 
11459  4FC3 00 00       _prog_tos: .fill 2, 0
11460  4FC5 00 00       _prog_size: .fill 2, 0
11461  4FC7 F8 4F FA 4F _symbols_data: .dw _s8, _s9, _s9, _s8, _s8, _s8, _s9, _s9, 
11461  4FCB FA 4F F8 4F 
11461  4FCF F8 4F F8 4F 
11461  4FD3 FA 4F FA 4F 
11462  4FD7 6F 72 67 00 _s0: .db "org", 0
11463  4FDB 69 6E 63 6C _s1: .db "include", 0
11463  4FDF 75 64 65 00 
11464  4FE3 64 61 74 61 _s2: .db "data", 0
11464  4FE7 00 
11465  4FE8 74 65 78 74 _s3: .db "text", 0
11465  4FEC 00 
11466  4FED 64 62 00    _s4: .db "db", 0
11467  4FF0 64 77 00    _s5: .db "dw", 0
11468  4FF3 65 6E 64 00 _s6: .db "end", 0
11469  4FF7 00          _s7: .db "", 0
11470  4FF8 40 00       _s8: .db "@", 0
11471  4FFA 23 00       _s9: .db "#", 0
11472  4FFC 0A 00       _s10: .db "\n", 0
11473  4FFE 2E 2F 63 6F _s11: .db "./config.d/op_tbl", 0
11473  5002 6E 66 69 67 
11473  5006 2E 64 2F 6F 
11473  500A 70 5F 74 62 
11473  500E 6C 00 
11474  5010 50 61 72 73 _s12: .db "Parsing DATA section...", 0
11474  5014 69 6E 67 20 
11474  5018 44 41 54 41 
11474  501C 20 73 65 63 
11474  5020 74 69 6F 6E 
11474  5024 2E 2E 2E 00 
11475  5028 44 61 74 61 _s13: .db "Data segment not found.", 0
11475  502C 20 73 65 67 
11475  5030 6D 65 6E 74 
11475  5034 20 6E 6F 74 
11475  5038 20 66 6F 75 
11475  503C 6E 64 2E 00 
11476  5040 2E 64 62 3A _s14: .db ".db: ", 0
11476  5044 20 00 
11477  5046 25 64 00    _s15: .db "%d", 0
11478  5049 2C 20 00    _s16: .db ", ", 0
11479  504C 2E 64 77 3A _s17: .db ".dw: ", 0
11479  5050 20 00 
11480  5052 44 6F 6E 65 _s18: .db "Done.\n", 0
11480  5056 2E 0A 00 
11481  5059 49 6E 74 65 _s19: .db "Integer constant _expected in .org directive.", 0
11481  505D 67 65 72 20 
11481  5061 63 6F 6E 73 
11481  5065 74 61 6E 74 
11481  5069 20 5F 65 78 
11481  506D 70 65 63 74 
11481  5071 65 64 20 69 
11481  5075 6E 20 2E 6F 
11481  5079 72 67 20 64 
11481  507D 69 72 65 63 
11481  5081 74 69 76 65 
11481  5085 2E 00 
11482  5087 50 61 72 73 _s20: .db "Parsing labels and directives...\n", 0
11482  508B 69 6E 67 20 
11482  508F 6C 61 62 65 
11482  5093 6C 73 20 61 
11482  5097 6E 64 20 64 
11482  509B 69 72 65 63 
11482  509F 74 69 76 65 
11482  50A3 73 2E 2E 2E 
11482  50A7 0A 00 
11483  50A9 2E 00       _s21: .db ".", 0
11484  50AB 0A 44 6F 6E _s22: .db "\nDone.\n", 0
11484  50AF 65 2E 0A 00 
11485  50B3 4F 72 67 3A _s23: .db "Org: %s\n", 0
11485  50B7 20 25 73 0A 
11485  50BB 00 
11486  50BC 0A 4C 61 62 _s24: .db "\nLabels list:\n", 0
11486  50C0 65 6C 73 20 
11486  50C4 6C 69 73 74 
11486  50C8 3A 0A 00 
11487  50CB 25 73 3A 20 _s25: .db "%s: %x\n", 0
11487  50CF 25 78 0A 00 
11488  50D3 20 2E 00    _s26: .db " .", 0
11489  50D6 20 00       _s27: .db " ", 0
11490  50D8 4D 61 78 69 _s28: .db "Maximum number of operands per instruction is 2.", 0
11490  50DC 6D 75 6D 20 
11490  50E0 6E 75 6D 62 
11490  50E4 65 72 20 6F 
11490  50E8 66 20 6F 70 
11490  50EC 65 72 61 6E 
11490  50F0 64 73 20 70 
11490  50F4 65 72 20 69 
11490  50F8 6E 73 74 72 
11490  50FC 75 63 74 69 
11490  5100 6F 6E 20 69 
11490  5104 73 20 32 2E 
11490  5108 00 
11491  5109 38 62 69 74 _s29: .db "8bit operand _expected but 16bit label given.", 0
11491  510D 20 6F 70 65 
11491  5111 72 61 6E 64 
11491  5115 20 5F 65 78 
11491  5119 70 65 63 74 
11491  511D 65 64 20 62 
11491  5121 75 74 20 31 
11491  5125 36 62 69 74 
11491  5129 20 6C 61 62 
11491  512D 65 6C 20 67 
11491  5131 69 76 65 6E 
11491  5135 2E 00 
11492  5137 25 78 28 25 _s30: .db "%x(%d): %s\n", 0
11492  513B 64 29 3A 20 
11492  513F 25 73 0A 00 
11493  5143 55 6E 64 65 _s31: .db "Undeclared label: ", 0
11493  5147 63 6C 61 72 
11493  514B 65 64 20 6C 
11493  514F 61 62 65 6C 
11493  5153 3A 20 00 
11494  5156 50 61 72 73 _s32: .db "Parsing TEXT section...\n", 0
11494  515A 69 6E 67 20 
11494  515E 54 45 58 54 
11494  5162 20 73 65 63 
11494  5166 74 69 6F 6E 
11494  516A 2E 2E 2E 0A 
11494  516E 00 
11495  516F 54 45 58 54 _s33: .db "TEXT section not found.", 0
11495  5173 20 73 65 63 
11495  5177 74 69 6F 6E 
11495  517B 20 6E 6F 74 
11495  517F 20 66 6F 75 
11495  5183 6E 64 2E 00 
11496  5187 54 45 58 54 _s34: .db "TEXT section end not found.", 0
11496  518B 20 73 65 63 
11496  518F 74 69 6F 6E 
11496  5193 20 65 6E 64 
11496  5197 20 6E 6F 74 
11496  519B 20 66 6F 75 
11496  519F 6E 64 2E 00 
11497  51A3 55 6E 5F 65 _s35: .db "Un_expected directive.", 0
11497  51A7 78 70 65 63 
11497  51AB 74 65 64 20 
11497  51AF 64 69 72 65 
11497  51B3 63 74 69 76 
11497  51B7 65 2E 00 
11498  51BA 44 6F 6E 65 _s36: .db "Done.\n\n", 0
11498  51BE 2E 0A 0A 00 
11499  51C2 50 72 6F 67 _s37: .db "Prog Offset: %x\n", 0
11499  51C6 20 4F 66 66 
11499  51CA 73 65 74 3A 
11499  51CE 20 25 78 0A 
11499  51D2 00 
11500  51D3 50 72 6F 67 _s38: .db "Prog value : %c\n", 0
11500  51D7 20 76 61 6C 
11500  51DB 75 65 20 3A 
11500  51DF 20 25 63 0A 
11500  51E3 00 
11501  51E4 54 6F 6B 65 _s39: .db "Token      : %s\n", 0
11501  51E8 6E 20 20 20 
11501  51EC 20 20 20 3A 
11501  51F0 20 25 73 0A 
11501  51F4 00 
11502  51F5 54 6F 6B 20 _s40: .db "Tok        : %d\n", 0
11502  51F9 20 20 20 20 
11502  51FD 20 20 20 3A 
11502  5201 20 25 64 0A 
11502  5205 00 
11503  5206 54 6F 6B 74 _s41: .db "Toktype    : %d\n", 0
11503  520A 79 70 65 20 
11503  520E 20 20 20 3A 
11503  5212 20 25 64 0A 
11503  5216 00 
11504  5217 53 74 72 69 _s42: .db "StringConst: %s\n", 0
11504  521B 6E 67 43 6F 
11504  521F 6E 73 74 3A 
11504  5223 20 25 73 0A 
11504  5227 00 
11505  5228 50 43 20 20 _s43: .db "PC         : %x\n", 0
11505  522C 20 20 20 20 
11505  5230 20 20 20 3A 
11505  5234 20 25 78 0A 
11505  5238 00 
11506  5239 0A 41 73 73 _s44: .db "\nAssembly complete.\n", 0
11506  523D 65 6D 62 6C 
11506  5241 79 20 63 6F 
11506  5245 6D 70 6C 65 
11506  5249 74 65 2E 0A 
11506  524D 00 
11507  524E 50 72 6F 67 _s45: .db "Program size: %d\n", 0
11507  5252 72 61 6D 20 
11507  5256 73 69 7A 65 
11507  525A 3A 20 25 64 
11507  525E 0A 00 
11508  5260 4C 69 73 74 _s46: .db "Listing: \n", 0
11508  5264 69 6E 67 3A 
11508  5268 20 0A 00 
11509  526B 25 78 00    _s47: .db "%x", 0
11510  526E 61 00       _s48: .db "a", 0
11511  5270 61 6C 00    _s49: .db "al", 0
11512  5273 61 68 00    _s50: .db "ah", 0
11513  5276 62 00       _s51: .db "b", 0
11514  5278 62 6C 00    _s52: .db "bl", 0
11515  527B 62 68 00    _s53: .db "bh", 0
11516  527E 63 00       _s54: .db "c", 0
11517  5280 63 6C 00    _s55: .db "cl", 0
11518  5283 63 68 00    _s56: .db "ch", 0
11519  5286 64 00       _s57: .db "d", 0
11520  5288 64 6C 00    _s58: .db "dl", 0
11521  528B 64 68 00    _s59: .db "dh", 0
11522  528E 67 00       _s60: .db "g", 0
11523  5290 67 6C 00    _s61: .db "gl", 0
11524  5293 67 68 00    _s62: .db "gh", 0
11525  5296 70 63 00    _s63: .db "pc", 0
11526  5299 73 70 00    _s64: .db "sp", 0
11527  529C 62 70 00    _s65: .db "bp", 0
11528  529F 73 69 00    _s66: .db "si", 0
11529  52A2 64 69 00    _s67: .db "di", 0
11530  52A5 77 6F 72 64 _s68: .db "word", 0
11530  52A9 00 
11531  52AA 62 79 74 65 _s69: .db "byte", 0
11531  52AE 00 
11532  52AF 63 6D 70 73 _s70: .db "cmpsb", 0
11532  52B3 62 00 
11533  52B5 6D 6F 76 73 _s71: .db "movsb", 0
11533  52B9 62 00 
11534  52BB 73 74 6F 73 _s72: .db "stosb", 0
11534  52BF 62 00 
11535  52C1 64 65 66 69 _s73: .db "define", 0
11535  52C5 6E 65 00 
11536  52C8 4C 61 62 65 _s74: .db "Label does not exist: ", 0
11536  52CC 6C 20 64 6F 
11536  52D0 65 73 20 6E 
11536  52D4 6F 74 20 65 
11536  52D8 78 69 73 74 
11536  52DC 3A 20 00 
11537  52DF 43 6C 6F 73 _s75: .db "Closing single quotes _expected.", 0
11537  52E3 69 6E 67 20 
11537  52E7 73 69 6E 67 
11537  52EB 6C 65 20 71 
11537  52EF 75 6F 74 65 
11537  52F3 73 20 5F 65 
11537  52F7 78 70 65 63 
11537  52FB 74 65 64 2E 
11537  52FF 00 
11538  5300 44 6F 75 62 _s76: .db "Double quotes _expected", 0
11538  5304 6C 65 20 71 
11538  5308 75 6F 74 65 
11538  530C 73 20 5F 65 
11538  5310 78 70 65 63 
11538  5314 74 65 64 00 
11539  5318 54 4F 4B 45 _s77: .db "TOKEN ERROR. Prog: %x\n", 0
11539  531C 4E 20 45 52 
11539  5320 52 4F 52 2E 
11539  5324 20 50 72 6F 
11539  5328 67 3A 20 25 
11539  532C 78 0A 00 
11540  532F 50 72 6F 67 _s78: .db "ProgVal: %x", 0
11540  5333 56 61 6C 3A 
11540  5337 20 25 78 00 
11541  533B 0A 20 54 65 _s79: .db "\n Text after prog: %s\n", 0
11541  533F 78 74 20 61 
11541  5343 66 74 65 72 
11541  5347 20 70 72 6F 
11541  534B 67 3A 20 25 
11541  534F 73 0A 00 
11542  5352 0A 45 72 72 _s80: .db "\nError: %s\n", 0
11542  5356 6F 72 3A 20 
11542  535A 25 73 0A 00 
11543  535E 0A 45 72 72 _s81: .db "\nError: %s %s\n", 0
11543  5362 6F 72 3A 20 
11543  5366 25 73 20 25 
11543  536A 73 0A 00 
11544  536D 43 61 6E 6E _s82: .db "Cannot push prog. Stack overflow.", 0
11544  5371 6F 74 20 70 
11544  5375 75 73 68 20 
11544  5379 70 72 6F 67 
11544  537D 2E 20 53 74 
11544  5381 61 63 6B 20 
11544  5385 6F 76 65 72 
11544  5389 66 6C 6F 77 
11544  538D 2E 00 
11545  538F 43 61 6E 6E _s83: .db "Cannot pop prog. Stack overflow.", 0
11545  5393 6F 74 20 70 
11545  5397 6F 70 20 70 
11545  539B 72 6F 67 2E 
11545  539F 20 53 74 61 
11545  53A3 63 6B 20 6F 
11545  53A7 76 65 72 66 
11545  53AB 6C 6F 77 2E 
11545  53AF 00 
11546  53B0 55 6E 65 78 _s84: .db "Unexpected format in printf.", 0
11546  53B4 70 65 63 74 
11546  53B8 65 64 20 66 
11546  53BC 6F 72 6D 61 
11546  53C0 74 20 69 6E 
11546  53C4 20 70 72 69 
11546  53C8 6E 74 66 2E 
11546  53CC 00 
11547  53CD 45 72 72 6F _s85: .db "Error: Unknown argument type.\n", 0
11547  53D1 72 3A 20 55 
11547  53D5 6E 6B 6E 6F 
11547  53D9 77 6E 20 61 
11547  53DD 72 67 75 6D 
11547  53E1 65 6E 74 20 
11547  53E5 74 79 70 65 
11547  53E9 2E 0A 00 
11548  53EC             
11549  53EC EE 53       _heap_top: .dw _heap
11550  53EE 00          _heap: .db 0
11551  53EF             ; --- END DATA SEGMENT
11552  53EF             
11553  53EF             .end
tasm: Number of errors = 0
