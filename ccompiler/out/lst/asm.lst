0001   0000             ; --- FILENAME: ../solarium/asm/asm.c
0002   0000             ; --- DATE:     15-06-2025 at 01:00:09
0003   0000             .include "lib/asm/kernel.exp"
0001+  0000             sys_break        .EQU  $0000
0002+  0000             sys_rtc          .EQU  $0001
0003+  0000             sys_ide          .EQU  $0002
0004+  0000             sys_io           .EQU  $0003
0005+  0000             sys_filesystem   .EQU  $0004
0006+  0000             sys_create_proc  .EQU  $0005
0007+  0000             sys_list_proc    .EQU  $0006
0008+  0000             sys_datetime     .EQU  $0007
0009+  0000             sys_reboot       .EQU  $0008
0010+  0000             sys_pause_proc   .EQU  $0009
0011+  0000             sys_resume_proc  .EQU  $000a
0012+  0000             sys_terminate_proc .EQU  $000b
0013+  0000             sys_system       .EQU  $000c
0014+  0000             sys_fdc          .EQU  $000d
0015+  0000             text_org         .EQU  $0400
0004   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0005   0000             
0006   0000             ; --- BEGIN TEXT SEGMENT
0007   0400             .org text_org
0008   0400             main:
0009   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0010   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0011   0408             ; char *p; 
0012   0408 52 02 00      sub sp, 2
0013   040B             ; print("\n"); 
0014   040B             ; --- START FUNCTION CALL
0015   040B 26 18 50      mov b, _s10 ; "\n"
0016   040E FD AB         swp b
0017   0410 D8            push b
0018   0411 07 69 3E      call print
0019   0414 51 02 00      add sp, 2
0020   0417             ; --- END FUNCTION CALL
0021   0417             ; program = alloc(16384); 
0022   0417 3B C3 4F      mov d, _program ; $program
0023   041A DA            push d
0024   041B             ; --- START FUNCTION CALL
0025   041B FD 2E 00 40   mov32 cb, $00004000
0025   041F 00 00 
0026   0421 FD AB         swp b
0027   0423 D8            push b
0028   0424 07 82 3E      call alloc
0029   0427 51 02 00      add sp, 2
0030   042A             ; --- END FUNCTION CALL
0031   042A E7            pop d
0032   042B FD 43         mov [d], b
0033   042D             ; bin_out = alloc(16384); 
0034   042D 3B C5 4F      mov d, _bin_out ; $bin_out
0035   0430 DA            push d
0036   0431             ; --- START FUNCTION CALL
0037   0431 FD 2E 00 40   mov32 cb, $00004000
0037   0435 00 00 
0038   0437 FD AB         swp b
0039   0439 D8            push b
0040   043A 07 82 3E      call alloc
0041   043D 51 02 00      add sp, 2
0042   0440             ; --- END FUNCTION CALL
0043   0440 E7            pop d
0044   0441 FD 43         mov [d], b
0045   0443             ; opcode_table = alloc(12310); 
0046   0443 3B C9 4F      mov d, _opcode_table ; $opcode_table
0047   0446 DA            push d
0048   0447             ; --- START FUNCTION CALL
0049   0447 FD 2E 16 30   mov32 cb, $00003016
0049   044B 00 00 
0050   044D FD AB         swp b
0051   044F D8            push b
0052   0450 07 82 3E      call alloc
0053   0453 51 02 00      add sp, 2
0054   0456             ; --- END FUNCTION CALL
0055   0456 E7            pop d
0056   0457 FD 43         mov [d], b
0057   0459             ; loadfile(0x0000, program); 
0058   0459             ; --- START FUNCTION CALL
0059   0459 3B C3 4F      mov d, _program ; $program
0060   045C 2A            mov b, [d]
0061   045D 38 00 00      mov c, 0
0062   0460 FD AB         swp b
0063   0462 D8            push b
0064   0463 FD 2E 00 00   mov32 cb, $00000000
0064   0467 00 00 
0065   0469 FD AB         swp b
0066   046B D8            push b
0067   046C 07 A9 3D      call loadfile
0068   046F 51 04 00      add sp, 4
0069   0472             ; --- END FUNCTION CALL
0070   0472             ; loadfile("./config.d/op_tbl", opcode_table); 
0071   0472             ; --- START FUNCTION CALL
0072   0472 3B C9 4F      mov d, _opcode_table ; $opcode_table
0073   0475 2A            mov b, [d]
0074   0476 38 00 00      mov c, 0
0075   0479 FD AB         swp b
0076   047B D8            push b
0077   047C 26 1A 50      mov b, _s11 ; "./config.d/op_tbl"
0078   047F FD AB         swp b
0079   0481 D8            push b
0080   0482 07 A9 3D      call loadfile
0081   0485 51 04 00      add sp, 4
0082   0488             ; --- END FUNCTION CALL
0083   0488             ; p = program; 
0084   0488 FA FF FF      lea d, [bp + -1] ; $p
0085   048B DA            push d
0086   048C 3B C3 4F      mov d, _program ; $program
0087   048F 2A            mov b, [d]
0088   0490 38 00 00      mov c, 0
0089   0493 E7            pop d
0090   0494 FD 43         mov [d], b
0091   0496             ; while(*p) p++; 
0092   0496             _while1_cond:
0093   0496 FA FF FF      lea d, [bp + -1] ; $p
0094   0499 2A            mov b, [d]
0095   049A 38 00 00      mov c, 0
0096   049D 74            mov d, b
0097   049E 32            mov bl, [d]
0098   049F A7 00         mov bh, 0
0099   04A1 38 00 00      mov c, 0
0100   04A4 C0 00 00      cmp b, 0
0101   04A7 C6 BD 04      je _while1_exit
0102   04AA             _while1_block:
0103   04AA             ; p++; 
0104   04AA FA FF FF      lea d, [bp + -1] ; $p
0105   04AD 2A            mov b, [d]
0106   04AE 38 00 00      mov c, 0
0107   04B1 FD 77         inc b
0108   04B3 FA FF FF      lea d, [bp + -1] ; $p
0109   04B6 FD 43         mov [d], b
0110   04B8 FD 7D         dec b
0111   04BA 0A 96 04      jmp _while1_cond
0112   04BD             _while1_exit:
0113   04BD             ; while(is_space(*p)) p--; 
0114   04BD             _while2_cond:
0115   04BD             ; --- START FUNCTION CALL
0116   04BD FA FF FF      lea d, [bp + -1] ; $p
0117   04C0 2A            mov b, [d]
0118   04C1 38 00 00      mov c, 0
0119   04C4 74            mov d, b
0120   04C5 32            mov bl, [d]
0121   04C6 A7 00         mov bh, 0
0122   04C8 38 00 00      mov c, 0
0123   04CB DD            push bl
0124   04CC 07 B3 3E      call is_space
0125   04CF 51 01 00      add sp, 1
0126   04D2             ; --- END FUNCTION CALL
0127   04D2 C0 00 00      cmp b, 0
0128   04D5 C6 EB 04      je _while2_exit
0129   04D8             _while2_block:
0130   04D8             ; p--; 
0131   04D8 FA FF FF      lea d, [bp + -1] ; $p
0132   04DB 2A            mov b, [d]
0133   04DC 38 00 00      mov c, 0
0134   04DF FD 7D         dec b
0135   04E1 FA FF FF      lea d, [bp + -1] ; $p
0136   04E4 FD 43         mov [d], b
0137   04E6 FD 77         inc b
0138   04E8 0A BD 04      jmp _while2_cond
0139   04EB             _while2_exit:
0140   04EB             ; p++; 
0141   04EB FA FF FF      lea d, [bp + -1] ; $p
0142   04EE 2A            mov b, [d]
0143   04EF 38 00 00      mov c, 0
0144   04F2 FD 77         inc b
0145   04F4 FA FF FF      lea d, [bp + -1] ; $p
0146   04F7 FD 43         mov [d], b
0147   04F9 FD 7D         dec b
0148   04FB             ; *p = '\0'; 
0149   04FB FA FF FF      lea d, [bp + -1] ; $p
0150   04FE 2A            mov b, [d]
0151   04FF 38 00 00      mov c, 0
0152   0502 D8            push b
0153   0503 FD 2E 00 00   mov32 cb, $00000000
0153   0507 00 00 
0154   0509 E7            pop d
0155   050A FD 3E         mov [d], bl
0156   050C             ; prog = program; 
0157   050C 3B 7F 4E      mov d, _prog ; $prog
0158   050F DA            push d
0159   0510 3B C3 4F      mov d, _program ; $program
0160   0513 2A            mov b, [d]
0161   0514 38 00 00      mov c, 0
0162   0517 E7            pop d
0163   0518 FD 43         mov [d], b
0164   051A             ; bin_p = bin_out + _org; 
0165   051A 3B C7 4F      mov d, _bin_p ; $bin_p
0166   051D DA            push d
0167   051E 3B C5 4F      mov d, _bin_out ; $bin_out
0168   0521 2A            mov b, [d]
0169   0522 38 00 00      mov c, 0
0170   0525             ; --- START TERMS
0171   0525 D7            push a
0172   0526 11            mov a, b
0173   0527 3B 76 4E      mov d, __org ; $_org
0174   052A 2A            mov b, [d]
0175   052B 38 00 00      mov c, 0
0176   052E 56            add b, a
0177   052F E4            pop a
0178   0530             ; --- END TERMS
0179   0530 E7            pop d
0180   0531 FD 43         mov [d], b
0181   0533             ; pc = _org; 
0182   0533 3B 78 4E      mov d, _pc ; $pc
0183   0536 DA            push d
0184   0537 3B 76 4E      mov d, __org ; $_org
0185   053A 2A            mov b, [d]
0186   053B 38 00 00      mov c, 0
0187   053E E7            pop d
0188   053F FD 43         mov [d], b
0189   0541             ; prog_size = 0; 
0190   0541 3B E1 4F      mov d, _prog_size ; $prog_size
0191   0544 DA            push d
0192   0545 FD 2E 00 00   mov32 cb, $00000000
0192   0549 00 00 
0193   054B E7            pop d
0194   054C FD 43         mov [d], b
0195   054E             ; label_directive_scan(); 
0196   054E             ; --- START FUNCTION CALL
0197   054E 07 20 0A      call label_directive_scan
0198   0551             ; prog_size = 0; 
0199   0551 3B E1 4F      mov d, _prog_size ; $prog_size
0200   0554 DA            push d
0201   0555 FD 2E 00 00   mov32 cb, $00000000
0201   0559 00 00 
0202   055B E7            pop d
0203   055C FD 43         mov [d], b
0204   055E             ; parse_text(); 
0205   055E             ; --- START FUNCTION CALL
0206   055E 07 28 1C      call parse_text
0207   0561             ; parse_data(); 
0208   0561             ; --- START FUNCTION CALL
0209   0561 07 69 05      call parse_data
0210   0564             ; display_output(); 
0211   0564             ; --- START FUNCTION CALL
0212   0564 07 6A 1E      call display_output
0213   0567 05 0B         syscall sys_terminate_proc
0214   0569             
0215   0569             parse_data:
0216   0569 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0217   056C             ; print("Parsing DATA section..."); 
0218   056C             ; --- START FUNCTION CALL
0219   056C 26 2C 50      mov b, _s12 ; "Parsing DATA section..."
0220   056F FD AB         swp b
0221   0571 D8            push b
0222   0572 07 69 3E      call print
0223   0575 51 02 00      add sp, 2
0224   0578             ; --- END FUNCTION CALL
0225   0578             ; for(;;){ 
0226   0578             _for3_init:
0227   0578             _for3_cond:
0228   0578             _for3_block:
0229   0578             ; get(); 
0230   0578             ; --- START FUNCTION CALL
0231   0578 07 6C 2B      call get
0232   057B             ; if(toktype == END) error("Data segment not found."); 
0233   057B             _if4_cond:
0234   057B 3B 7D 4E      mov d, _toktype ; $toktype
0235   057E 2A            mov b, [d]
0236   057F 38 00 00      mov c, 0
0237   0582             ; --- START RELATIONAL
0238   0582 D7            push a
0239   0583 11            mov a, b
0240   0584 FD 2E 07 00   mov32 cb, $7 ; enum element: END
0240   0588 00 00 
0241   058A B0            cmp a, b
0242   058B FD 71         seq ; ==
0243   058D E4            pop a
0244   058E             ; --- END RELATIONAL
0245   058E C0 00 00      cmp b, 0
0246   0591 C6 A3 05      je _if4_exit
0247   0594             _if4_TRUE:
0248   0594             ; error("Data segment not found."); 
0249   0594             ; --- START FUNCTION CALL
0250   0594 26 44 50      mov b, _s13 ; "Data segment not found."
0251   0597 FD AB         swp b
0252   0599 D8            push b
0253   059A 07 72 39      call error
0254   059D 51 02 00      add sp, 2
0255   05A0             ; --- END FUNCTION CALL
0256   05A0 0A A3 05      jmp _if4_exit
0257   05A3             _if4_exit:
0258   05A3             ; if(tok == DOT){ 
0259   05A3             _if5_cond:
0260   05A3 3B 7B 4E      mov d, _tok ; $tok
0261   05A6 2A            mov b, [d]
0262   05A7 38 00 00      mov c, 0
0263   05AA             ; --- START RELATIONAL
0264   05AA D7            push a
0265   05AB 11            mov a, b
0266   05AC FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
0266   05B0 00 00 
0267   05B2 B0            cmp a, b
0268   05B3 FD 71         seq ; ==
0269   05B5 E4            pop a
0270   05B6             ; --- END RELATIONAL
0271   05B6 C0 00 00      cmp b, 0
0272   05B9 C6 E1 05      je _if5_exit
0273   05BC             _if5_TRUE:
0274   05BC             ; get(); 
0275   05BC             ; --- START FUNCTION CALL
0276   05BC 07 6C 2B      call get
0277   05BF             ; if(tok == DATA) break; 
0278   05BF             _if6_cond:
0279   05BF 3B 7B 4E      mov d, _tok ; $tok
0280   05C2 2A            mov b, [d]
0281   05C3 38 00 00      mov c, 0
0282   05C6             ; --- START RELATIONAL
0283   05C6 D7            push a
0284   05C7 11            mov a, b
0285   05C8 FD 2E 03 00   mov32 cb, $3 ; enum element: DATA
0285   05CC 00 00 
0286   05CE B0            cmp a, b
0287   05CF FD 71         seq ; ==
0288   05D1 E4            pop a
0289   05D2             ; --- END RELATIONAL
0290   05D2 C0 00 00      cmp b, 0
0291   05D5 C6 DE 05      je _if6_exit
0292   05D8             _if6_TRUE:
0293   05D8             ; break; 
0294   05D8 0A E4 05      jmp _for3_exit ; for break
0295   05DB 0A DE 05      jmp _if6_exit
0296   05DE             _if6_exit:
0297   05DE 0A E1 05      jmp _if5_exit
0298   05E1             _if5_exit:
0299   05E1             _for3_update:
0300   05E1 0A 78 05      jmp _for3_cond
0301   05E4             _for3_exit:
0302   05E4             ; for(;;){ 
0303   05E4             _for7_init:
0304   05E4             _for7_cond:
0305   05E4             _for7_block:
0306   05E4             ; get(); 
0307   05E4             ; --- START FUNCTION CALL
0308   05E4 07 6C 2B      call get
0309   05E7             ; if(tok == SEGMENT_END) break; 
0310   05E7             _if8_cond:
0311   05E7 3B 7B 4E      mov d, _tok ; $tok
0312   05EA 2A            mov b, [d]
0313   05EB 38 00 00      mov c, 0
0314   05EE             ; --- START RELATIONAL
0315   05EE D7            push a
0316   05EF 11            mov a, b
0317   05F0 FD 2E 05 00   mov32 cb, $5 ; enum element: SEGMENT_END
0317   05F4 00 00 
0318   05F6 B0            cmp a, b
0319   05F7 FD 71         seq ; ==
0320   05F9 E4            pop a
0321   05FA             ; --- END RELATIONAL
0322   05FA C0 00 00      cmp b, 0
0323   05FD C6 06 06      je _if8_exit
0324   0600             _if8_TRUE:
0325   0600             ; break; 
0326   0600 0A 27 08      jmp _for7_exit ; for break
0327   0603 0A 06 06      jmp _if8_exit
0328   0606             _if8_exit:
0329   0606             ; if(tok == DB){ 
0330   0606             _if9_cond:
0331   0606 3B 7B 4E      mov d, _tok ; $tok
0332   0609 2A            mov b, [d]
0333   060A 38 00 00      mov c, 0
0334   060D             ; --- START RELATIONAL
0335   060D D7            push a
0336   060E 11            mov a, b
0337   060F FD 2E 06 00   mov32 cb, $6 ; enum element: DB
0337   0613 00 00 
0338   0615 B0            cmp a, b
0339   0616 FD 71         seq ; ==
0340   0618 E4            pop a
0341   0619             ; --- END RELATIONAL
0342   0619 C0 00 00      cmp b, 0
0343   061C C6 09 07      je _if9_else
0344   061F             _if9_TRUE:
0345   061F             ; print(".db: "); 
0346   061F             ; --- START FUNCTION CALL
0347   061F 26 5C 50      mov b, _s14 ; ".db: "
0348   0622 FD AB         swp b
0349   0624 D8            push b
0350   0625 07 69 3E      call print
0351   0628 51 02 00      add sp, 2
0352   062B             ; --- END FUNCTION CALL
0353   062B             ; for(;;){ 
0354   062B             _for10_init:
0355   062B             _for10_cond:
0356   062B             _for10_block:
0357   062B             ; get(); 
0358   062B             ; --- START FUNCTION CALL
0359   062B 07 6C 2B      call get
0360   062E             ; if(toktype == CHAR_CONST){ 
0361   062E             _if11_cond:
0362   062E 3B 7D 4E      mov d, _toktype ; $toktype
0363   0631 2A            mov b, [d]
0364   0632 38 00 00      mov c, 0
0365   0635             ; --- START RELATIONAL
0366   0635 D7            push a
0367   0636 11            mov a, b
0368   0637 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0368   063B 00 00 
0369   063D B0            cmp a, b
0370   063E FD 71         seq ; ==
0371   0640 E4            pop a
0372   0641             ; --- END RELATIONAL
0373   0641 C0 00 00      cmp b, 0
0374   0644 C6 87 06      je _if11_else
0375   0647             _if11_TRUE:
0376   0647             ; emit_byte(string_const[0], 0); 
0377   0647             ; --- START FUNCTION CALL
0378   0647 FD 2E 00 00   mov32 cb, $00000000
0378   064B 00 00 
0379   064D DD            push bl
0380   064E 3B C1 4E      mov d, _string_const_data ; $string_const
0381   0651 D7            push a
0382   0652 DA            push d
0383   0653 FD 2E 00 00   mov32 cb, $00000000
0383   0657 00 00 
0384   0659 E7            pop d
0385   065A 5A            add d, b
0386   065B E4            pop a
0387   065C 32            mov bl, [d]
0388   065D A7 00         mov bh, 0
0389   065F 38 00 00      mov c, 0
0390   0662 DD            push bl
0391   0663 07 71 27      call emit_byte
0392   0666 51 02 00      add sp, 2
0393   0669             ; --- END FUNCTION CALL
0394   0669             ; printx8(string_const[0]); 
0395   0669             ; --- START FUNCTION CALL
0396   0669 3B C1 4E      mov d, _string_const_data ; $string_const
0397   066C D7            push a
0398   066D DA            push d
0399   066E FD 2E 00 00   mov32 cb, $00000000
0399   0672 00 00 
0400   0674 E7            pop d
0401   0675 5A            add d, b
0402   0676 E4            pop a
0403   0677 32            mov bl, [d]
0404   0678 A7 00         mov bh, 0
0405   067A 38 00 00      mov c, 0
0406   067D DD            push bl
0407   067E 07 FC 4C      call printx8
0408   0681 51 01 00      add sp, 1
0409   0684             ; --- END FUNCTION CALL
0410   0684 0A C6 06      jmp _if11_exit
0411   0687             _if11_else:
0412   0687             ; if(toktype == INTEGER_CONST){ 
0413   0687             _if12_cond:
0414   0687 3B 7D 4E      mov d, _toktype ; $toktype
0415   068A 2A            mov b, [d]
0416   068B 38 00 00      mov c, 0
0417   068E             ; --- START RELATIONAL
0418   068E D7            push a
0419   068F 11            mov a, b
0420   0690 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0420   0694 00 00 
0421   0696 B0            cmp a, b
0422   0697 FD 71         seq ; ==
0423   0699 E4            pop a
0424   069A             ; --- END RELATIONAL
0425   069A C0 00 00      cmp b, 0
0426   069D C6 C6 06      je _if12_exit
0427   06A0             _if12_TRUE:
0428   06A0             ; emit_byte(int_const, 0); 
0429   06A0             ; --- START FUNCTION CALL
0430   06A0 FD 2E 00 00   mov32 cb, $00000000
0430   06A4 00 00 
0431   06A6 DD            push bl
0432   06A7 3B C1 4F      mov d, _int_const ; $int_const
0433   06AA 2A            mov b, [d]
0434   06AB 38 00 00      mov c, 0
0435   06AE DD            push bl
0436   06AF 07 71 27      call emit_byte
0437   06B2 51 02 00      add sp, 2
0438   06B5             ; --- END FUNCTION CALL
0439   06B5             ; printx8(int_const); 
0440   06B5             ; --- START FUNCTION CALL
0441   06B5 3B C1 4F      mov d, _int_const ; $int_const
0442   06B8 2A            mov b, [d]
0443   06B9 38 00 00      mov c, 0
0444   06BC DD            push bl
0445   06BD 07 FC 4C      call printx8
0446   06C0 51 01 00      add sp, 1
0447   06C3             ; --- END FUNCTION CALL
0448   06C3 0A C6 06      jmp _if12_exit
0449   06C6             _if12_exit:
0450   06C6             _if11_exit:
0451   06C6             ; get(); 
0452   06C6             ; --- START FUNCTION CALL
0453   06C6 07 6C 2B      call get
0454   06C9             ; if(tok != COMMA){ 
0455   06C9             _if13_cond:
0456   06C9 3B 7B 4E      mov d, _tok ; $tok
0457   06CC 2A            mov b, [d]
0458   06CD 38 00 00      mov c, 0
0459   06D0             ; --- START RELATIONAL
0460   06D0 D7            push a
0461   06D1 11            mov a, b
0462   06D2 FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0462   06D6 00 00 
0463   06D8 B0            cmp a, b
0464   06D9 FD 72         sneq ; !=
0465   06DB E4            pop a
0466   06DC             ; --- END RELATIONAL
0467   06DC C0 00 00      cmp b, 0
0468   06DF C6 EB 06      je _if13_exit
0469   06E2             _if13_TRUE:
0470   06E2             ; back(); 
0471   06E2             ; --- START FUNCTION CALL
0472   06E2 07 DF 27      call back
0473   06E5             ; break; 
0474   06E5 0A FA 06      jmp _for10_exit ; for break
0475   06E8 0A EB 06      jmp _if13_exit
0476   06EB             _if13_exit:
0477   06EB             ; print(", "); 
0478   06EB             ; --- START FUNCTION CALL
0479   06EB 26 62 50      mov b, _s15 ; ", "
0480   06EE FD AB         swp b
0481   06F0 D8            push b
0482   06F1 07 69 3E      call print
0483   06F4 51 02 00      add sp, 2
0484   06F7             ; --- END FUNCTION CALL
0485   06F7             _for10_update:
0486   06F7 0A 2B 06      jmp _for10_cond
0487   06FA             _for10_exit:
0488   06FA             ; print("\n"); 
0489   06FA             ; --- START FUNCTION CALL
0490   06FA 26 18 50      mov b, _s10 ; "\n"
0491   06FD FD AB         swp b
0492   06FF D8            push b
0493   0700 07 69 3E      call print
0494   0703 51 02 00      add sp, 2
0495   0706             ; --- END FUNCTION CALL
0496   0706 0A 24 08      jmp _if9_exit
0497   0709             _if9_else:
0498   0709             ; if(tok == DW){ 
0499   0709             _if14_cond:
0500   0709 3B 7B 4E      mov d, _tok ; $tok
0501   070C 2A            mov b, [d]
0502   070D 38 00 00      mov c, 0
0503   0710             ; --- START RELATIONAL
0504   0710 D7            push a
0505   0711 11            mov a, b
0506   0712 FD 2E 07 00   mov32 cb, $7 ; enum element: DW
0506   0716 00 00 
0507   0718 B0            cmp a, b
0508   0719 FD 71         seq ; ==
0509   071B E4            pop a
0510   071C             ; --- END RELATIONAL
0511   071C C0 00 00      cmp b, 0
0512   071F C6 24 08      je _if14_exit
0513   0722             _if14_TRUE:
0514   0722             ; print(".dw: "); 
0515   0722             ; --- START FUNCTION CALL
0516   0722 26 65 50      mov b, _s16 ; ".dw: "
0517   0725 FD AB         swp b
0518   0727 D8            push b
0519   0728 07 69 3E      call print
0520   072B 51 02 00      add sp, 2
0521   072E             ; --- END FUNCTION CALL
0522   072E             ; for(;;){ 
0523   072E             _for15_init:
0524   072E             _for15_cond:
0525   072E             _for15_block:
0526   072E             ; get(); 
0527   072E             ; --- START FUNCTION CALL
0528   072E 07 6C 2B      call get
0529   0731             ; if(toktype == CHAR_CONST){ 
0530   0731             _if16_cond:
0531   0731 3B 7D 4E      mov d, _toktype ; $toktype
0532   0734 2A            mov b, [d]
0533   0735 38 00 00      mov c, 0
0534   0738             ; --- START RELATIONAL
0535   0738 D7            push a
0536   0739 11            mov a, b
0537   073A FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0537   073E 00 00 
0538   0740 B0            cmp a, b
0539   0741 FD 71         seq ; ==
0540   0743 E4            pop a
0541   0744             ; --- END RELATIONAL
0542   0744 C0 00 00      cmp b, 0
0543   0747 C6 9E 07      je _if16_else
0544   074A             _if16_TRUE:
0545   074A             ; emit_byte(string_const[0], 0); 
0546   074A             ; --- START FUNCTION CALL
0547   074A FD 2E 00 00   mov32 cb, $00000000
0547   074E 00 00 
0548   0750 DD            push bl
0549   0751 3B C1 4E      mov d, _string_const_data ; $string_const
0550   0754 D7            push a
0551   0755 DA            push d
0552   0756 FD 2E 00 00   mov32 cb, $00000000
0552   075A 00 00 
0553   075C E7            pop d
0554   075D 5A            add d, b
0555   075E E4            pop a
0556   075F 32            mov bl, [d]
0557   0760 A7 00         mov bh, 0
0558   0762 38 00 00      mov c, 0
0559   0765 DD            push bl
0560   0766 07 71 27      call emit_byte
0561   0769 51 02 00      add sp, 2
0562   076C             ; --- END FUNCTION CALL
0563   076C             ; emit_byte(0, 0); 
0564   076C             ; --- START FUNCTION CALL
0565   076C FD 2E 00 00   mov32 cb, $00000000
0565   0770 00 00 
0566   0772 DD            push bl
0567   0773 FD 2E 00 00   mov32 cb, $00000000
0567   0777 00 00 
0568   0779 DD            push bl
0569   077A 07 71 27      call emit_byte
0570   077D 51 02 00      add sp, 2
0571   0780             ; --- END FUNCTION CALL
0572   0780             ; printx8(string_const[0]); 
0573   0780             ; --- START FUNCTION CALL
0574   0780 3B C1 4E      mov d, _string_const_data ; $string_const
0575   0783 D7            push a
0576   0784 DA            push d
0577   0785 FD 2E 00 00   mov32 cb, $00000000
0577   0789 00 00 
0578   078B E7            pop d
0579   078C 5A            add d, b
0580   078D E4            pop a
0581   078E 32            mov bl, [d]
0582   078F A7 00         mov bh, 0
0583   0791 38 00 00      mov c, 0
0584   0794 DD            push bl
0585   0795 07 FC 4C      call printx8
0586   0798 51 01 00      add sp, 1
0587   079B             ; --- END FUNCTION CALL
0588   079B 0A E1 07      jmp _if16_exit
0589   079E             _if16_else:
0590   079E             ; if(toktype == INTEGER_CONST){ 
0591   079E             _if17_cond:
0592   079E 3B 7D 4E      mov d, _toktype ; $toktype
0593   07A1 2A            mov b, [d]
0594   07A2 38 00 00      mov c, 0
0595   07A5             ; --- START RELATIONAL
0596   07A5 D7            push a
0597   07A6 11            mov a, b
0598   07A7 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0598   07AB 00 00 
0599   07AD B0            cmp a, b
0600   07AE FD 71         seq ; ==
0601   07B0 E4            pop a
0602   07B1             ; --- END RELATIONAL
0603   07B1 C0 00 00      cmp b, 0
0604   07B4 C6 E1 07      je _if17_exit
0605   07B7             _if17_TRUE:
0606   07B7             ; emit_word(int_const, 0); 
0607   07B7             ; --- START FUNCTION CALL
0608   07B7 FD 2E 00 00   mov32 cb, $00000000
0608   07BB 00 00 
0609   07BD DD            push bl
0610   07BE 3B C1 4F      mov d, _int_const ; $int_const
0611   07C1 2A            mov b, [d]
0612   07C2 38 00 00      mov c, 0
0613   07C5 FD AB         swp b
0614   07C7 D8            push b
0615   07C8 07 A9 27      call emit_word
0616   07CB 51 03 00      add sp, 3
0617   07CE             ; --- END FUNCTION CALL
0618   07CE             ; printx16(int_const); 
0619   07CE             ; --- START FUNCTION CALL
0620   07CE 3B C1 4F      mov d, _int_const ; $int_const
0621   07D1 2A            mov b, [d]
0622   07D2 38 00 00      mov c, 0
0623   07D5 FD AB         swp b
0624   07D7 D8            push b
0625   07D8 07 42 4B      call printx16
0626   07DB 51 02 00      add sp, 2
0627   07DE             ; --- END FUNCTION CALL
0628   07DE 0A E1 07      jmp _if17_exit
0629   07E1             _if17_exit:
0630   07E1             _if16_exit:
0631   07E1             ; get(); 
0632   07E1             ; --- START FUNCTION CALL
0633   07E1 07 6C 2B      call get
0634   07E4             ; if(tok != COMMA){ 
0635   07E4             _if18_cond:
0636   07E4 3B 7B 4E      mov d, _tok ; $tok
0637   07E7 2A            mov b, [d]
0638   07E8 38 00 00      mov c, 0
0639   07EB             ; --- START RELATIONAL
0640   07EB D7            push a
0641   07EC 11            mov a, b
0642   07ED FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0642   07F1 00 00 
0643   07F3 B0            cmp a, b
0644   07F4 FD 72         sneq ; !=
0645   07F6 E4            pop a
0646   07F7             ; --- END RELATIONAL
0647   07F7 C0 00 00      cmp b, 0
0648   07FA C6 06 08      je _if18_exit
0649   07FD             _if18_TRUE:
0650   07FD             ; back(); 
0651   07FD             ; --- START FUNCTION CALL
0652   07FD 07 DF 27      call back
0653   0800             ; break; 
0654   0800 0A 15 08      jmp _for15_exit ; for break
0655   0803 0A 06 08      jmp _if18_exit
0656   0806             _if18_exit:
0657   0806             ; print(", "); 
0658   0806             ; --- START FUNCTION CALL
0659   0806 26 62 50      mov b, _s15 ; ", "
0660   0809 FD AB         swp b
0661   080B D8            push b
0662   080C 07 69 3E      call print
0663   080F 51 02 00      add sp, 2
0664   0812             ; --- END FUNCTION CALL
0665   0812             _for15_update:
0666   0812 0A 2E 07      jmp _for15_cond
0667   0815             _for15_exit:
0668   0815             ; print("\n"); 
0669   0815             ; --- START FUNCTION CALL
0670   0815 26 18 50      mov b, _s10 ; "\n"
0671   0818 FD AB         swp b
0672   081A D8            push b
0673   081B 07 69 3E      call print
0674   081E 51 02 00      add sp, 2
0675   0821             ; --- END FUNCTION CALL
0676   0821 0A 24 08      jmp _if14_exit
0677   0824             _if14_exit:
0678   0824             _if9_exit:
0679   0824             _for7_update:
0680   0824 0A E4 05      jmp _for7_cond
0681   0827             _for7_exit:
0682   0827             ; print("Done.\n"); 
0683   0827             ; --- START FUNCTION CALL
0684   0827 26 6B 50      mov b, _s17 ; "Done.\n"
0685   082A FD AB         swp b
0686   082C D8            push b
0687   082D 07 69 3E      call print
0688   0830 51 02 00      add sp, 2
0689   0833             ; --- END FUNCTION CALL
0690   0833 F9            leave
0691   0834 09            ret
0692   0835             
0693   0835             parse_directive:
0694   0835 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0695   0838             ; get(); 
0696   0838             ; --- START FUNCTION CALL
0697   0838 07 6C 2B      call get
0698   083B             ; if(tok == ORG){ 
0699   083B             _if19_cond:
0700   083B 3B 7B 4E      mov d, _tok ; $tok
0701   083E 2A            mov b, [d]
0702   083F 38 00 00      mov c, 0
0703   0842             ; --- START RELATIONAL
0704   0842 D7            push a
0705   0843 11            mov a, b
0706   0844 FD 2E 01 00   mov32 cb, $1 ; enum element: ORG
0706   0848 00 00 
0707   084A B0            cmp a, b
0708   084B FD 71         seq ; ==
0709   084D E4            pop a
0710   084E             ; --- END RELATIONAL
0711   084E C0 00 00      cmp b, 0
0712   0851 C6 90 08      je _if19_else
0713   0854             _if19_TRUE:
0714   0854             ; get(); 
0715   0854             ; --- START FUNCTION CALL
0716   0854 07 6C 2B      call get
0717   0857             ; if(toktype != INTEGER_CONST) error("Integer constant expected in .org directive."); 
0718   0857             _if20_cond:
0719   0857 3B 7D 4E      mov d, _toktype ; $toktype
0720   085A 2A            mov b, [d]
0721   085B 38 00 00      mov c, 0
0722   085E             ; --- START RELATIONAL
0723   085E D7            push a
0724   085F 11            mov a, b
0725   0860 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0725   0864 00 00 
0726   0866 B0            cmp a, b
0727   0867 FD 72         sneq ; !=
0728   0869 E4            pop a
0729   086A             ; --- END RELATIONAL
0730   086A C0 00 00      cmp b, 0
0731   086D C6 7F 08      je _if20_exit
0732   0870             _if20_TRUE:
0733   0870             ; error("Integer constant expected in .org directive."); 
0734   0870             ; --- START FUNCTION CALL
0735   0870 26 72 50      mov b, _s18 ; "Integer constant expected in .org directive."
0736   0873 FD AB         swp b
0737   0875 D8            push b
0738   0876 07 72 39      call error
0739   0879 51 02 00      add sp, 2
0740   087C             ; --- END FUNCTION CALL
0741   087C 0A 7F 08      jmp _if20_exit
0742   087F             _if20_exit:
0743   087F             ; _org = int_const; 
0744   087F 3B 76 4E      mov d, __org ; $_org
0745   0882 DA            push d
0746   0883 3B C1 4F      mov d, _int_const ; $int_const
0747   0886 2A            mov b, [d]
0748   0887 38 00 00      mov c, 0
0749   088A E7            pop d
0750   088B FD 43         mov [d], b
0751   088D 0A 1E 0A      jmp _if19_exit
0752   0890             _if19_else:
0753   0890             ; if(tok == DB){ 
0754   0890             _if21_cond:
0755   0890 3B 7B 4E      mov d, _tok ; $tok
0756   0893 2A            mov b, [d]
0757   0894 38 00 00      mov c, 0
0758   0897             ; --- START RELATIONAL
0759   0897 D7            push a
0760   0898 11            mov a, b
0761   0899 FD 2E 06 00   mov32 cb, $6 ; enum element: DB
0761   089D 00 00 
0762   089F B0            cmp a, b
0763   08A0 FD 71         seq ; ==
0764   08A2 E4            pop a
0765   08A3             ; --- END RELATIONAL
0766   08A3 C0 00 00      cmp b, 0
0767   08A6 C6 4C 09      je _if21_else
0768   08A9             _if21_TRUE:
0769   08A9             ; for(;;){ 
0770   08A9             _for22_init:
0771   08A9             _for22_cond:
0772   08A9             _for22_block:
0773   08A9             ; get(); 
0774   08A9             ; --- START FUNCTION CALL
0775   08A9 07 6C 2B      call get
0776   08AC             ; if(toktype == CHAR_CONST){ 
0777   08AC             _if23_cond:
0778   08AC 3B 7D 4E      mov d, _toktype ; $toktype
0779   08AF 2A            mov b, [d]
0780   08B0 38 00 00      mov c, 0
0781   08B3             ; --- START RELATIONAL
0782   08B3 D7            push a
0783   08B4 11            mov a, b
0784   08B5 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0784   08B9 00 00 
0785   08BB B0            cmp a, b
0786   08BC FD 71         seq ; ==
0787   08BE E4            pop a
0788   08BF             ; --- END RELATIONAL
0789   08BF C0 00 00      cmp b, 0
0790   08C2 C6 ED 08      je _if23_else
0791   08C5             _if23_TRUE:
0792   08C5             ; emit_byte(string_const[0], emit_override); 
0793   08C5             ; --- START FUNCTION CALL
0794   08C5 FA 05 00      lea d, [bp + 5] ; $emit_override
0795   08C8 32            mov bl, [d]
0796   08C9 A7 00         mov bh, 0
0797   08CB 38 00 00      mov c, 0
0798   08CE DD            push bl
0799   08CF 3B C1 4E      mov d, _string_const_data ; $string_const
0800   08D2 D7            push a
0801   08D3 DA            push d
0802   08D4 FD 2E 00 00   mov32 cb, $00000000
0802   08D8 00 00 
0803   08DA E7            pop d
0804   08DB 5A            add d, b
0805   08DC E4            pop a
0806   08DD 32            mov bl, [d]
0807   08DE A7 00         mov bh, 0
0808   08E0 38 00 00      mov c, 0
0809   08E3 DD            push bl
0810   08E4 07 71 27      call emit_byte
0811   08E7 51 02 00      add sp, 2
0812   08EA             ; --- END FUNCTION CALL
0813   08EA 0A 21 09      jmp _if23_exit
0814   08ED             _if23_else:
0815   08ED             ; if(toktype == INTEGER_CONST){ 
0816   08ED             _if24_cond:
0817   08ED 3B 7D 4E      mov d, _toktype ; $toktype
0818   08F0 2A            mov b, [d]
0819   08F1 38 00 00      mov c, 0
0820   08F4             ; --- START RELATIONAL
0821   08F4 D7            push a
0822   08F5 11            mov a, b
0823   08F6 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0823   08FA 00 00 
0824   08FC B0            cmp a, b
0825   08FD FD 71         seq ; ==
0826   08FF E4            pop a
0827   0900             ; --- END RELATIONAL
0828   0900 C0 00 00      cmp b, 0
0829   0903 C6 21 09      je _if24_exit
0830   0906             _if24_TRUE:
0831   0906             ; emit_byte(int_const, emit_override); 
0832   0906             ; --- START FUNCTION CALL
0833   0906 FA 05 00      lea d, [bp + 5] ; $emit_override
0834   0909 32            mov bl, [d]
0835   090A A7 00         mov bh, 0
0836   090C 38 00 00      mov c, 0
0837   090F DD            push bl
0838   0910 3B C1 4F      mov d, _int_const ; $int_const
0839   0913 2A            mov b, [d]
0840   0914 38 00 00      mov c, 0
0841   0917 DD            push bl
0842   0918 07 71 27      call emit_byte
0843   091B 51 02 00      add sp, 2
0844   091E             ; --- END FUNCTION CALL
0845   091E 0A 21 09      jmp _if24_exit
0846   0921             _if24_exit:
0847   0921             _if23_exit:
0848   0921             ; get(); 
0849   0921             ; --- START FUNCTION CALL
0850   0921 07 6C 2B      call get
0851   0924             ; if(tok != COMMA){ 
0852   0924             _if25_cond:
0853   0924 3B 7B 4E      mov d, _tok ; $tok
0854   0927 2A            mov b, [d]
0855   0928 38 00 00      mov c, 0
0856   092B             ; --- START RELATIONAL
0857   092B D7            push a
0858   092C 11            mov a, b
0859   092D FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0859   0931 00 00 
0860   0933 B0            cmp a, b
0861   0934 FD 72         sneq ; !=
0862   0936 E4            pop a
0863   0937             ; --- END RELATIONAL
0864   0937 C0 00 00      cmp b, 0
0865   093A C6 46 09      je _if25_exit
0866   093D             _if25_TRUE:
0867   093D             ; back(); 
0868   093D             ; --- START FUNCTION CALL
0869   093D 07 DF 27      call back
0870   0940             ; break; 
0871   0940 0A 49 09      jmp _for22_exit ; for break
0872   0943 0A 46 09      jmp _if25_exit
0873   0946             _if25_exit:
0874   0946             _for22_update:
0875   0946 0A A9 08      jmp _for22_cond
0876   0949             _for22_exit:
0877   0949 0A 1E 0A      jmp _if21_exit
0878   094C             _if21_else:
0879   094C             ; if(tok == DW){ 
0880   094C             _if26_cond:
0881   094C 3B 7B 4E      mov d, _tok ; $tok
0882   094F 2A            mov b, [d]
0883   0950 38 00 00      mov c, 0
0884   0953             ; --- START RELATIONAL
0885   0953 D7            push a
0886   0954 11            mov a, b
0887   0955 FD 2E 07 00   mov32 cb, $7 ; enum element: DW
0887   0959 00 00 
0888   095B B0            cmp a, b
0889   095C FD 71         seq ; ==
0890   095E E4            pop a
0891   095F             ; --- END RELATIONAL
0892   095F C0 00 00      cmp b, 0
0893   0962 C6 1E 0A      je _if26_exit
0894   0965             _if26_TRUE:
0895   0965             ; for(;;){ 
0896   0965             _for27_init:
0897   0965             _for27_cond:
0898   0965             _for27_block:
0899   0965             ; get(); 
0900   0965             ; --- START FUNCTION CALL
0901   0965 07 6C 2B      call get
0902   0968             ; if(toktype == CHAR_CONST){ 
0903   0968             _if28_cond:
0904   0968 3B 7D 4E      mov d, _toktype ; $toktype
0905   096B 2A            mov b, [d]
0906   096C 38 00 00      mov c, 0
0907   096F             ; --- START RELATIONAL
0908   096F D7            push a
0909   0970 11            mov a, b
0910   0971 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0910   0975 00 00 
0911   0977 B0            cmp a, b
0912   0978 FD 71         seq ; ==
0913   097A E4            pop a
0914   097B             ; --- END RELATIONAL
0915   097B C0 00 00      cmp b, 0
0916   097E C6 C0 09      je _if28_else
0917   0981             _if28_TRUE:
0918   0981             ; emit_byte(string_const[0], emit_override); 
0919   0981             ; --- START FUNCTION CALL
0920   0981 FA 05 00      lea d, [bp + 5] ; $emit_override
0921   0984 32            mov bl, [d]
0922   0985 A7 00         mov bh, 0
0923   0987 38 00 00      mov c, 0
0924   098A DD            push bl
0925   098B 3B C1 4E      mov d, _string_const_data ; $string_const
0926   098E D7            push a
0927   098F DA            push d
0928   0990 FD 2E 00 00   mov32 cb, $00000000
0928   0994 00 00 
0929   0996 E7            pop d
0930   0997 5A            add d, b
0931   0998 E4            pop a
0932   0999 32            mov bl, [d]
0933   099A A7 00         mov bh, 0
0934   099C 38 00 00      mov c, 0
0935   099F DD            push bl
0936   09A0 07 71 27      call emit_byte
0937   09A3 51 02 00      add sp, 2
0938   09A6             ; --- END FUNCTION CALL
0939   09A6             ; emit_byte(0, emit_override); 
0940   09A6             ; --- START FUNCTION CALL
0941   09A6 FA 05 00      lea d, [bp + 5] ; $emit_override
0942   09A9 32            mov bl, [d]
0943   09AA A7 00         mov bh, 0
0944   09AC 38 00 00      mov c, 0
0945   09AF DD            push bl
0946   09B0 FD 2E 00 00   mov32 cb, $00000000
0946   09B4 00 00 
0947   09B6 DD            push bl
0948   09B7 07 71 27      call emit_byte
0949   09BA 51 02 00      add sp, 2
0950   09BD             ; --- END FUNCTION CALL
0951   09BD 0A F3 09      jmp _if28_exit
0952   09C0             _if28_else:
0953   09C0             ; if(toktype == INTEGER_CONST){ 
0954   09C0             _if29_cond:
0955   09C0 3B 7D 4E      mov d, _toktype ; $toktype
0956   09C3 2A            mov b, [d]
0957   09C4 38 00 00      mov c, 0
0958   09C7             ; --- START RELATIONAL
0959   09C7 D7            push a
0960   09C8 11            mov a, b
0961   09C9 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0961   09CD 00 00 
0962   09CF B0            cmp a, b
0963   09D0 FD 71         seq ; ==
0964   09D2 E4            pop a
0965   09D3             ; --- END RELATIONAL
0966   09D3 C0 00 00      cmp b, 0
0967   09D6 C6 F3 09      je _if29_exit
0968   09D9             _if29_TRUE:
0969   09D9             ; emit_word(int_const, 0); 
0970   09D9             ; --- START FUNCTION CALL
0971   09D9 FD 2E 00 00   mov32 cb, $00000000
0971   09DD 00 00 
0972   09DF DD            push bl
0973   09E0 3B C1 4F      mov d, _int_const ; $int_const
0974   09E3 2A            mov b, [d]
0975   09E4 38 00 00      mov c, 0
0976   09E7 FD AB         swp b
0977   09E9 D8            push b
0978   09EA 07 A9 27      call emit_word
0979   09ED 51 03 00      add sp, 3
0980   09F0             ; --- END FUNCTION CALL
0981   09F0 0A F3 09      jmp _if29_exit
0982   09F3             _if29_exit:
0983   09F3             _if28_exit:
0984   09F3             ; get(); 
0985   09F3             ; --- START FUNCTION CALL
0986   09F3 07 6C 2B      call get
0987   09F6             ; if(tok != COMMA){ 
0988   09F6             _if30_cond:
0989   09F6 3B 7B 4E      mov d, _tok ; $tok
0990   09F9 2A            mov b, [d]
0991   09FA 38 00 00      mov c, 0
0992   09FD             ; --- START RELATIONAL
0993   09FD D7            push a
0994   09FE 11            mov a, b
0995   09FF FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0995   0A03 00 00 
0996   0A05 B0            cmp a, b
0997   0A06 FD 72         sneq ; !=
0998   0A08 E4            pop a
0999   0A09             ; --- END RELATIONAL
1000   0A09 C0 00 00      cmp b, 0
1001   0A0C C6 18 0A      je _if30_exit
1002   0A0F             _if30_TRUE:
1003   0A0F             ; back(); 
1004   0A0F             ; --- START FUNCTION CALL
1005   0A0F 07 DF 27      call back
1006   0A12             ; break; 
1007   0A12 0A 1B 0A      jmp _for27_exit ; for break
1008   0A15 0A 18 0A      jmp _if30_exit
1009   0A18             _if30_exit:
1010   0A18             _for27_update:
1011   0A18 0A 65 09      jmp _for27_cond
1012   0A1B             _for27_exit:
1013   0A1B 0A 1E 0A      jmp _if26_exit
1014   0A1E             _if26_exit:
1015   0A1E             _if21_exit:
1016   0A1E             _if19_exit:
1017   0A1E F9            leave
1018   0A1F 09            ret
1019   0A20             
1020   0A20             label_directive_scan:
1021   0A20 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1022   0A23             ; char *temp_prog; 
1023   0A23 52 02 00      sub sp, 2
1024   0A26             ; int i; 
1025   0A26 52 02 00      sub sp, 2
1026   0A29             ; prog = program; 
1027   0A29 3B 7F 4E      mov d, _prog ; $prog
1028   0A2C DA            push d
1029   0A2D 3B C3 4F      mov d, _program ; $program
1030   0A30 2A            mov b, [d]
1031   0A31 38 00 00      mov c, 0
1032   0A34 E7            pop d
1033   0A35 FD 43         mov [d], b
1034   0A37             ; bin_p = bin_out + _org; 
1035   0A37 3B C7 4F      mov d, _bin_p ; $bin_p
1036   0A3A DA            push d
1037   0A3B 3B C5 4F      mov d, _bin_out ; $bin_out
1038   0A3E 2A            mov b, [d]
1039   0A3F 38 00 00      mov c, 0
1040   0A42             ; --- START TERMS
1041   0A42 D7            push a
1042   0A43 11            mov a, b
1043   0A44 3B 76 4E      mov d, __org ; $_org
1044   0A47 2A            mov b, [d]
1045   0A48 38 00 00      mov c, 0
1046   0A4B 56            add b, a
1047   0A4C E4            pop a
1048   0A4D             ; --- END TERMS
1049   0A4D E7            pop d
1050   0A4E FD 43         mov [d], b
1051   0A50             ; pc = _org; 
1052   0A50 3B 78 4E      mov d, _pc ; $pc
1053   0A53 DA            push d
1054   0A54 3B 76 4E      mov d, __org ; $_org
1055   0A57 2A            mov b, [d]
1056   0A58 38 00 00      mov c, 0
1057   0A5B E7            pop d
1058   0A5C FD 43         mov [d], b
1059   0A5E             ; print("Parsing labels and directives...\n"); 
1060   0A5E             ; --- START FUNCTION CALL
1061   0A5E 26 9F 50      mov b, _s19 ; "Parsing labels and directives...\n"
1062   0A61 FD AB         swp b
1063   0A63 D8            push b
1064   0A64 07 69 3E      call print
1065   0A67 51 02 00      add sp, 2
1066   0A6A             ; --- END FUNCTION CALL
1067   0A6A             ; for(;;){ 
1068   0A6A             _for31_init:
1069   0A6A             _for31_cond:
1070   0A6A             _for31_block:
1071   0A6A             ; get(); back(); 
1072   0A6A             ; --- START FUNCTION CALL
1073   0A6A 07 6C 2B      call get
1074   0A6D             ; back(); 
1075   0A6D             ; --- START FUNCTION CALL
1076   0A6D 07 DF 27      call back
1077   0A70             ; temp_prog = prog; 
1078   0A70 FA FF FF      lea d, [bp + -1] ; $temp_prog
1079   0A73 DA            push d
1080   0A74 3B 7F 4E      mov d, _prog ; $prog
1081   0A77 2A            mov b, [d]
1082   0A78 38 00 00      mov c, 0
1083   0A7B E7            pop d
1084   0A7C FD 43         mov [d], b
1085   0A7E             ; get(); 
1086   0A7E             ; --- START FUNCTION CALL
1087   0A7E 07 6C 2B      call get
1088   0A81             ; if(toktype == END) break; 
1089   0A81             _if32_cond:
1090   0A81 3B 7D 4E      mov d, _toktype ; $toktype
1091   0A84 2A            mov b, [d]
1092   0A85 38 00 00      mov c, 0
1093   0A88             ; --- START RELATIONAL
1094   0A88 D7            push a
1095   0A89 11            mov a, b
1096   0A8A FD 2E 07 00   mov32 cb, $7 ; enum element: END
1096   0A8E 00 00 
1097   0A90 B0            cmp a, b
1098   0A91 FD 71         seq ; ==
1099   0A93 E4            pop a
1100   0A94             ; --- END RELATIONAL
1101   0A94 C0 00 00      cmp b, 0
1102   0A97 C6 A0 0A      je _if32_exit
1103   0A9A             _if32_TRUE:
1104   0A9A             ; break; 
1105   0A9A 0A 6A 0B      jmp _for31_exit ; for break
1106   0A9D 0A A0 0A      jmp _if32_exit
1107   0AA0             _if32_exit:
1108   0AA0             ; if(tok == DOT){ 
1109   0AA0             _if33_cond:
1110   0AA0 3B 7B 4E      mov d, _tok ; $tok
1111   0AA3 2A            mov b, [d]
1112   0AA4 38 00 00      mov c, 0
1113   0AA7             ; --- START RELATIONAL
1114   0AA7 D7            push a
1115   0AA8 11            mov a, b
1116   0AA9 FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
1116   0AAD 00 00 
1117   0AAF B0            cmp a, b
1118   0AB0 FD 71         seq ; ==
1119   0AB2 E4            pop a
1120   0AB3             ; --- END RELATIONAL
1121   0AB3 C0 00 00      cmp b, 0
1122   0AB6 C6 E8 0A      je _if33_else
1123   0AB9             _if33_TRUE:
1124   0AB9             ; get(); 
1125   0AB9             ; --- START FUNCTION CALL
1126   0AB9 07 6C 2B      call get
1127   0ABC             ; if(is_directive(token)){ 
1128   0ABC             _if34_cond:
1129   0ABC             ; --- START FUNCTION CALL
1130   0ABC 3B 81 4E      mov d, _token_data ; $token
1131   0ABF 2D            mov b, d
1132   0AC0 38 00 00      mov c, 0
1133   0AC3 FD AB         swp b
1134   0AC5 D8            push b
1135   0AC6 07 85 21      call is_directive
1136   0AC9 51 02 00      add sp, 2
1137   0ACC             ; --- END FUNCTION CALL
1138   0ACC C0 00 00      cmp b, 0
1139   0ACF C6 E5 0A      je _if34_exit
1140   0AD2             _if34_TRUE:
1141   0AD2             ; back(); 
1142   0AD2             ; --- START FUNCTION CALL
1143   0AD2 07 DF 27      call back
1144   0AD5             ; parse_directive(1); 
1145   0AD5             ; --- START FUNCTION CALL
1146   0AD5 FD 2E 01 00   mov32 cb, $00000001
1146   0AD9 00 00 
1147   0ADB DD            push bl
1148   0ADC 07 35 08      call parse_directive
1149   0ADF 51 01 00      add sp, 1
1150   0AE2             ; --- END FUNCTION CALL
1151   0AE2 0A E5 0A      jmp _if34_exit
1152   0AE5             _if34_exit:
1153   0AE5 0A 67 0B      jmp _if33_exit
1154   0AE8             _if33_else:
1155   0AE8             ; if(toktype == IDENTIFIER){ 
1156   0AE8             _if35_cond:
1157   0AE8 3B 7D 4E      mov d, _toktype ; $toktype
1158   0AEB 2A            mov b, [d]
1159   0AEC 38 00 00      mov c, 0
1160   0AEF             ; --- START RELATIONAL
1161   0AEF D7            push a
1162   0AF0 11            mov a, b
1163   0AF1 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1163   0AF5 00 00 
1164   0AF7 B0            cmp a, b
1165   0AF8 FD 71         seq ; ==
1166   0AFA E4            pop a
1167   0AFB             ; --- END RELATIONAL
1168   0AFB C0 00 00      cmp b, 0
1169   0AFE C6 67 0B      je _if35_exit
1170   0B01             _if35_TRUE:
1171   0B01             ; get(); 
1172   0B01             ; --- START FUNCTION CALL
1173   0B01 07 6C 2B      call get
1174   0B04             ; if(tok == COLON){ 
1175   0B04             _if36_cond:
1176   0B04 3B 7B 4E      mov d, _tok ; $tok
1177   0B07 2A            mov b, [d]
1178   0B08 38 00 00      mov c, 0
1179   0B0B             ; --- START RELATIONAL
1180   0B0B D7            push a
1181   0B0C 11            mov a, b
1182   0B0D FD 2E 0D 00   mov32 cb, $d ; enum element: COLON
1182   0B11 00 00 
1183   0B13 B0            cmp a, b
1184   0B14 FD 71         seq ; ==
1185   0B16 E4            pop a
1186   0B17             ; --- END RELATIONAL
1187   0B17 C0 00 00      cmp b, 0
1188   0B1A C6 3D 0B      je _if36_else
1189   0B1D             _if36_TRUE:
1190   0B1D             ; prog = temp_prog; 
1191   0B1D 3B 7F 4E      mov d, _prog ; $prog
1192   0B20 DA            push d
1193   0B21 FA FF FF      lea d, [bp + -1] ; $temp_prog
1194   0B24 2A            mov b, [d]
1195   0B25 38 00 00      mov c, 0
1196   0B28 E7            pop d
1197   0B29 FD 43         mov [d], b
1198   0B2B             ; parse_label(); 
1199   0B2B             ; --- START FUNCTION CALL
1200   0B2B 07 BB 21      call parse_label
1201   0B2E             ; print("."); 
1202   0B2E             ; --- START FUNCTION CALL
1203   0B2E 26 C1 50      mov b, _s20 ; "."
1204   0B31 FD AB         swp b
1205   0B33 D8            push b
1206   0B34 07 69 3E      call print
1207   0B37 51 02 00      add sp, 2
1208   0B3A             ; --- END FUNCTION CALL
1209   0B3A 0A 64 0B      jmp _if36_exit
1210   0B3D             _if36_else:
1211   0B3D             ; prog = temp_prog; 
1212   0B3D 3B 7F 4E      mov d, _prog ; $prog
1213   0B40 DA            push d
1214   0B41 FA FF FF      lea d, [bp + -1] ; $temp_prog
1215   0B44 2A            mov b, [d]
1216   0B45 38 00 00      mov c, 0
1217   0B48 E7            pop d
1218   0B49 FD 43         mov [d], b
1219   0B4B             ; parse_instr(1);       
1220   0B4B             ; --- START FUNCTION CALL
1221   0B4B FD 2E 01 00   mov32 cb, $00000001
1221   0B4F 00 00 
1222   0B51 DD            push bl
1223   0B52 07 76 13      call parse_instr
1224   0B55 51 01 00      add sp, 1
1225   0B58             ; --- END FUNCTION CALL
1226   0B58             ; print("."); 
1227   0B58             ; --- START FUNCTION CALL
1228   0B58 26 C1 50      mov b, _s20 ; "."
1229   0B5B FD AB         swp b
1230   0B5D D8            push b
1231   0B5E 07 69 3E      call print
1232   0B61 51 02 00      add sp, 2
1233   0B64             ; --- END FUNCTION CALL
1234   0B64             _if36_exit:
1235   0B64 0A 67 0B      jmp _if35_exit
1236   0B67             _if35_exit:
1237   0B67             _if33_exit:
1238   0B67             _for31_update:
1239   0B67 0A 6A 0A      jmp _for31_cond
1240   0B6A             _for31_exit:
1241   0B6A             ; print("\nDone.\n"); 
1242   0B6A             ; --- START FUNCTION CALL
1243   0B6A 26 C3 50      mov b, _s21 ; "\nDone.\n"
1244   0B6D FD AB         swp b
1245   0B6F D8            push b
1246   0B70 07 69 3E      call print
1247   0B73 51 02 00      add sp, 2
1248   0B76             ; --- END FUNCTION CALL
1249   0B76             ; printf("Org: %s\n", _org); 
1250   0B76             ; --- START FUNCTION CALL
1251   0B76 3B 76 4E      mov d, __org ; $_org
1252   0B79 2A            mov b, [d]
1253   0B7A 38 00 00      mov c, 0
1254   0B7D FD AB         swp b
1255   0B7F D8            push b
1256   0B80 26 CB 50      mov b, _s22 ; "Org: %s\n"
1257   0B83 FD AB         swp b
1258   0B85 D8            push b
1259   0B86 07 99 42      call printf
1260   0B89 51 04 00      add sp, 4
1261   0B8C             ; --- END FUNCTION CALL
1262   0B8C             ; print("\nLabels list:\n"); 
1263   0B8C             ; --- START FUNCTION CALL
1264   0B8C 26 D4 50      mov b, _s23 ; "\nLabels list:\n"
1265   0B8F FD AB         swp b
1266   0B91 D8            push b
1267   0B92 07 69 3E      call print
1268   0B95 51 02 00      add sp, 2
1269   0B98             ; --- END FUNCTION CALL
1270   0B98             ; for(i = 0; label_table[i].name[0]; i++){ 
1271   0B98             _for37_init:
1272   0B98 FA FD FF      lea d, [bp + -3] ; $i
1273   0B9B DA            push d
1274   0B9C FD 2E 00 00   mov32 cb, $00000000
1274   0BA0 00 00 
1275   0BA2 E7            pop d
1276   0BA3 FD 43         mov [d], b
1277   0BA5             _for37_cond:
1278   0BA5 3B 56 4D      mov d, _label_table_data ; $label_table
1279   0BA8 D7            push a
1280   0BA9 DA            push d
1281   0BAA FA FD FF      lea d, [bp + -3] ; $i
1282   0BAD 2A            mov b, [d]
1283   0BAE 38 00 00      mov c, 0
1284   0BB1 E7            pop d
1285   0BB2 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1286   0BB6 E4            pop a
1287   0BB7 58 00 00      add d, 0
1288   0BBA D7            push a
1289   0BBB DA            push d
1290   0BBC FD 2E 00 00   mov32 cb, $00000000
1290   0BC0 00 00 
1291   0BC2 E7            pop d
1292   0BC3 5A            add d, b
1293   0BC4 E4            pop a
1294   0BC5 32            mov bl, [d]
1295   0BC6 A7 00         mov bh, 0
1296   0BC8 38 00 00      mov c, 0
1297   0BCB C0 00 00      cmp b, 0
1298   0BCE C6 28 0C      je _for37_exit
1299   0BD1             _for37_block:
1300   0BD1             ; printf("%s: %x\n", label_table[i].name, label_table[i].address); 
1301   0BD1             ; --- START FUNCTION CALL
1302   0BD1 3B 56 4D      mov d, _label_table_data ; $label_table
1303   0BD4 D7            push a
1304   0BD5 DA            push d
1305   0BD6 FA FD FF      lea d, [bp + -3] ; $i
1306   0BD9 2A            mov b, [d]
1307   0BDA 38 00 00      mov c, 0
1308   0BDD E7            pop d
1309   0BDE FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1310   0BE2 E4            pop a
1311   0BE3 58 10 00      add d, 16
1312   0BE6 2A            mov b, [d]
1313   0BE7 38 00 00      mov c, 0
1314   0BEA FD AB         swp b
1315   0BEC D8            push b
1316   0BED 3B 56 4D      mov d, _label_table_data ; $label_table
1317   0BF0 D7            push a
1318   0BF1 DA            push d
1319   0BF2 FA FD FF      lea d, [bp + -3] ; $i
1320   0BF5 2A            mov b, [d]
1321   0BF6 38 00 00      mov c, 0
1322   0BF9 E7            pop d
1323   0BFA FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1324   0BFE E4            pop a
1325   0BFF 58 00 00      add d, 0
1326   0C02 2D            mov b, d
1327   0C03 38 00 00      mov c, 0
1328   0C06 FD AB         swp b
1329   0C08 D8            push b
1330   0C09 26 E3 50      mov b, _s24 ; "%s: %x\n"
1331   0C0C FD AB         swp b
1332   0C0E D8            push b
1333   0C0F 07 99 42      call printf
1334   0C12 51 06 00      add sp, 6
1335   0C15             ; --- END FUNCTION CALL
1336   0C15             _for37_update:
1337   0C15 FA FD FF      lea d, [bp + -3] ; $i
1338   0C18 2A            mov b, [d]
1339   0C19 38 00 00      mov c, 0
1340   0C1C 11            mov a, b
1341   0C1D FD 77         inc b
1342   0C1F FA FD FF      lea d, [bp + -3] ; $i
1343   0C22 FD 43         mov [d], b
1344   0C24 27            mov b, a
1345   0C25 0A A5 0B      jmp _for37_cond
1346   0C28             _for37_exit:
1347   0C28             ; print("\n"); 
1348   0C28             ; --- START FUNCTION CALL
1349   0C28 26 18 50      mov b, _s10 ; "\n"
1350   0C2B FD AB         swp b
1351   0C2D D8            push b
1352   0C2E 07 69 3E      call print
1353   0C31 51 02 00      add sp, 2
1354   0C34             ; --- END FUNCTION CALL
1355   0C34 F9            leave
1356   0C35 09            ret
1357   0C36             
1358   0C36             label_parse_instr:
1359   0C36 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1360   0C39             ; char opcode[32]; 
1361   0C39 52 20 00      sub sp, 32
1362   0C3C             ; char code_line[64]; 
1363   0C3C 52 40 00      sub sp, 64
1364   0C3F             ; struct t_opcode op; 
1365   0C3F 52 1A 00      sub sp, 26
1366   0C42             ; int num_operands, num_operandsexp; 
1367   0C42 52 02 00      sub sp, 2
1368   0C45 52 02 00      sub sp, 2
1369   0C48             ; int i, j; 
1370   0C48 52 02 00      sub sp, 2
1371   0C4B 52 02 00      sub sp, 2
1372   0C4E             ; char operand_types[3]; // operand types and locations 
1373   0C4E 52 03 00      sub sp, 3
1374   0C51             ; int old_pc; 
1375   0C51 52 02 00      sub sp, 2
1376   0C54             ; char has_operands; 
1377   0C54 52 01 00      sub sp, 1
1378   0C57             ; old_pc = pc; 
1379   0C57 FA 7A FF      lea d, [bp + -134] ; $old_pc
1380   0C5A DA            push d
1381   0C5B 3B 78 4E      mov d, _pc ; $pc
1382   0C5E 2A            mov b, [d]
1383   0C5F 38 00 00      mov c, 0
1384   0C62 E7            pop d
1385   0C63 FD 43         mov [d], b
1386   0C65             ; get_line(); 
1387   0C65             ; --- START FUNCTION CALL
1388   0C65 07 4F 2A      call get_line
1389   0C68             ; push_prog(); 
1390   0C68             ; --- START FUNCTION CALL
1391   0C68 07 D0 39      call push_prog
1392   0C6B             ; strcpy(code_line, string_const); 
1393   0C6B             ; --- START FUNCTION CALL
1394   0C6B 3B C1 4E      mov d, _string_const_data ; $string_const
1395   0C6E 2D            mov b, d
1396   0C6F 38 00 00      mov c, 0
1397   0C72 FD AB         swp b
1398   0C74 D8            push b
1399   0C75 FA A1 FF      lea d, [bp + -95] ; $code_line
1400   0C78 2D            mov b, d
1401   0C79 38 00 00      mov c, 0
1402   0C7C FD AB         swp b
1403   0C7E D8            push b
1404   0C7F 07 9F 4B      call strcpy
1405   0C82 51 04 00      add sp, 4
1406   0C85             ; --- END FUNCTION CALL
1407   0C85             ; has_operands = 0; 
1408   0C85 FA 79 FF      lea d, [bp + -135] ; $has_operands
1409   0C88 DA            push d
1410   0C89 FD 2E 00 00   mov32 cb, $00000000
1410   0C8D 00 00 
1411   0C8F E7            pop d
1412   0C90 FD 3E         mov [d], bl
1413   0C92             ; prog = code_line; 
1414   0C92 3B 7F 4E      mov d, _prog ; $prog
1415   0C95 DA            push d
1416   0C96 FA A1 FF      lea d, [bp + -95] ; $code_line
1417   0C99 2D            mov b, d
1418   0C9A 38 00 00      mov c, 0
1419   0C9D E7            pop d
1420   0C9E FD 43         mov [d], b
1421   0CA0             ; get(); // get main opcode 
1422   0CA0             ; --- START FUNCTION CALL
1423   0CA0 07 6C 2B      call get
1424   0CA3             ; for(;;){ 
1425   0CA3             _for38_init:
1426   0CA3             _for38_cond:
1427   0CA3             _for38_block:
1428   0CA3             ; get(); 
1429   0CA3             ; --- START FUNCTION CALL
1430   0CA3 07 6C 2B      call get
1431   0CA6             ; if(toktype == END) break; 
1432   0CA6             _if39_cond:
1433   0CA6 3B 7D 4E      mov d, _toktype ; $toktype
1434   0CA9 2A            mov b, [d]
1435   0CAA 38 00 00      mov c, 0
1436   0CAD             ; --- START RELATIONAL
1437   0CAD D7            push a
1438   0CAE 11            mov a, b
1439   0CAF FD 2E 07 00   mov32 cb, $7 ; enum element: END
1439   0CB3 00 00 
1440   0CB5 B0            cmp a, b
1441   0CB6 FD 71         seq ; ==
1442   0CB8 E4            pop a
1443   0CB9             ; --- END RELATIONAL
1444   0CB9 C0 00 00      cmp b, 0
1445   0CBC C6 C5 0C      je _if39_exit
1446   0CBF             _if39_TRUE:
1447   0CBF             ; break; 
1448   0CBF 0A 21 0D      jmp _for38_exit ; for break
1449   0CC2 0A C5 0C      jmp _if39_exit
1450   0CC5             _if39_exit:
1451   0CC5             ; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1452   0CC5             _if40_cond:
1453   0CC5 3B 7D 4E      mov d, _toktype ; $toktype
1454   0CC8 2A            mov b, [d]
1455   0CC9 38 00 00      mov c, 0
1456   0CCC             ; --- START RELATIONAL
1457   0CCC D7            push a
1458   0CCD 11            mov a, b
1459   0CCE FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
1459   0CD2 00 00 
1460   0CD4 B0            cmp a, b
1461   0CD5 FD 71         seq ; ==
1462   0CD7 E4            pop a
1463   0CD8             ; --- END RELATIONAL
1464   0CD8             ; --- START LOGICAL OR
1465   0CD8 D7            push a
1466   0CD9 11            mov a, b
1467   0CDA 3B 7D 4E      mov d, _toktype ; $toktype
1468   0CDD 2A            mov b, [d]
1469   0CDE 38 00 00      mov c, 0
1470   0CE1             ; --- START RELATIONAL
1471   0CE1 D7            push a
1472   0CE2 11            mov a, b
1473   0CE3 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1473   0CE7 00 00 
1474   0CE9 B0            cmp a, b
1475   0CEA FD 71         seq ; ==
1476   0CEC E4            pop a
1477   0CED             ; --- END RELATIONAL
1478   0CED             ; --- START LOGICAL AND
1479   0CED D7            push a
1480   0CEE 11            mov a, b
1481   0CEF             ; --- START FUNCTION CALL
1482   0CEF 3B 81 4E      mov d, _token_data ; $token
1483   0CF2 2D            mov b, d
1484   0CF3 38 00 00      mov c, 0
1485   0CF6 FD AB         swp b
1486   0CF8 D8            push b
1487   0CF9 07 10 1F      call is_reserved
1488   0CFC 51 02 00      add sp, 2
1489   0CFF             ; --- END FUNCTION CALL
1490   0CFF FD A7         sand a, b
1491   0D01 E4            pop a
1492   0D02             ; --- END LOGICAL AND
1493   0D02 FD A8         sor a, b ; ||
1494   0D04 E4            pop a
1495   0D05             ; --- END LOGICAL OR
1496   0D05 C0 00 00      cmp b, 0
1497   0D08 C6 1E 0D      je _if40_exit
1498   0D0B             _if40_TRUE:
1499   0D0B             ; has_operands = 1; 
1500   0D0B FA 79 FF      lea d, [bp + -135] ; $has_operands
1501   0D0E DA            push d
1502   0D0F FD 2E 01 00   mov32 cb, $00000001
1502   0D13 00 00 
1503   0D15 E7            pop d
1504   0D16 FD 3E         mov [d], bl
1505   0D18             ; break; 
1506   0D18 0A 21 0D      jmp _for38_exit ; for break
1507   0D1B 0A 1E 0D      jmp _if40_exit
1508   0D1E             _if40_exit:
1509   0D1E             _for38_update:
1510   0D1E 0A A3 0C      jmp _for38_cond
1511   0D21             _for38_exit:
1512   0D21             ; opcode[0] = '\0'; 
1513   0D21 FA E1 FF      lea d, [bp + -31] ; $opcode
1514   0D24 D7            push a
1515   0D25 DA            push d
1516   0D26 FD 2E 00 00   mov32 cb, $00000000
1516   0D2A 00 00 
1517   0D2C E7            pop d
1518   0D2D 5A            add d, b
1519   0D2E E4            pop a
1520   0D2F DA            push d
1521   0D30 FD 2E 00 00   mov32 cb, $00000000
1521   0D34 00 00 
1522   0D36 E7            pop d
1523   0D37 FD 3E         mov [d], bl
1524   0D39             ; prog = code_line; 
1525   0D39 3B 7F 4E      mov d, _prog ; $prog
1526   0D3C DA            push d
1527   0D3D FA A1 FF      lea d, [bp + -95] ; $code_line
1528   0D40 2D            mov b, d
1529   0D41 38 00 00      mov c, 0
1530   0D44 E7            pop d
1531   0D45 FD 43         mov [d], b
1532   0D47             ; if(!has_operands){ 
1533   0D47             _if41_cond:
1534   0D47 FA 79 FF      lea d, [bp + -135] ; $has_operands
1535   0D4A 32            mov bl, [d]
1536   0D4B A7 00         mov bh, 0
1537   0D4D 38 00 00      mov c, 0
1538   0D50 C0 00 00      cmp b, 0
1539   0D53 C6 67 0E      je _if41_else
1540   0D56             _if41_TRUE:
1541   0D56             ; get(); 
1542   0D56             ; --- START FUNCTION CALL
1543   0D56 07 6C 2B      call get
1544   0D59             ; strcpy(opcode, token); 
1545   0D59             ; --- START FUNCTION CALL
1546   0D59 3B 81 4E      mov d, _token_data ; $token
1547   0D5C 2D            mov b, d
1548   0D5D 38 00 00      mov c, 0
1549   0D60 FD AB         swp b
1550   0D62 D8            push b
1551   0D63 FA E1 FF      lea d, [bp + -31] ; $opcode
1552   0D66 2D            mov b, d
1553   0D67 38 00 00      mov c, 0
1554   0D6A FD AB         swp b
1555   0D6C D8            push b
1556   0D6D 07 9F 4B      call strcpy
1557   0D70 51 04 00      add sp, 4
1558   0D73             ; --- END FUNCTION CALL
1559   0D73             ; get();  
1560   0D73             ; --- START FUNCTION CALL
1561   0D73 07 6C 2B      call get
1562   0D76             ; if(toktype == END){ 
1563   0D76             _if42_cond:
1564   0D76 3B 7D 4E      mov d, _toktype ; $toktype
1565   0D79 2A            mov b, [d]
1566   0D7A 38 00 00      mov c, 0
1567   0D7D             ; --- START RELATIONAL
1568   0D7D D7            push a
1569   0D7E 11            mov a, b
1570   0D7F FD 2E 07 00   mov32 cb, $7 ; enum element: END
1570   0D83 00 00 
1571   0D85 B0            cmp a, b
1572   0D86 FD 71         seq ; ==
1573   0D88 E4            pop a
1574   0D89             ; --- END RELATIONAL
1575   0D89 C0 00 00      cmp b, 0
1576   0D8C C6 A8 0D      je _if42_else
1577   0D8F             _if42_TRUE:
1578   0D8F             ; strcat(opcode, " ."); 
1579   0D8F             ; --- START FUNCTION CALL
1580   0D8F 26 EB 50      mov b, _s25 ; " ."
1581   0D92 FD AB         swp b
1582   0D94 D8            push b
1583   0D95 FA E1 FF      lea d, [bp + -31] ; $opcode
1584   0D98 2D            mov b, d
1585   0D99 38 00 00      mov c, 0
1586   0D9C FD AB         swp b
1587   0D9E D8            push b
1588   0D9F 07 19 4C      call strcat
1589   0DA2 51 04 00      add sp, 4
1590   0DA5             ; --- END FUNCTION CALL
1591   0DA5 0A 17 0E      jmp _if42_exit
1592   0DA8             _if42_else:
1593   0DA8             ; strcat(opcode, " "); 
1594   0DA8             ; --- START FUNCTION CALL
1595   0DA8 26 EE 50      mov b, _s26 ; " "
1596   0DAB FD AB         swp b
1597   0DAD D8            push b
1598   0DAE FA E1 FF      lea d, [bp + -31] ; $opcode
1599   0DB1 2D            mov b, d
1600   0DB2 38 00 00      mov c, 0
1601   0DB5 FD AB         swp b
1602   0DB7 D8            push b
1603   0DB8 07 19 4C      call strcat
1604   0DBB 51 04 00      add sp, 4
1605   0DBE             ; --- END FUNCTION CALL
1606   0DBE             ; strcat(opcode, token); 
1607   0DBE             ; --- START FUNCTION CALL
1608   0DBE 3B 81 4E      mov d, _token_data ; $token
1609   0DC1 2D            mov b, d
1610   0DC2 38 00 00      mov c, 0
1611   0DC5 FD AB         swp b
1612   0DC7 D8            push b
1613   0DC8 FA E1 FF      lea d, [bp + -31] ; $opcode
1614   0DCB 2D            mov b, d
1615   0DCC 38 00 00      mov c, 0
1616   0DCF FD AB         swp b
1617   0DD1 D8            push b
1618   0DD2 07 19 4C      call strcat
1619   0DD5 51 04 00      add sp, 4
1620   0DD8             ; --- END FUNCTION CALL
1621   0DD8             ; for(;;){ 
1622   0DD8             _for43_init:
1623   0DD8             _for43_cond:
1624   0DD8             _for43_block:
1625   0DD8             ; get(); 
1626   0DD8             ; --- START FUNCTION CALL
1627   0DD8 07 6C 2B      call get
1628   0DDB             ; if(toktype == END) break; 
1629   0DDB             _if44_cond:
1630   0DDB 3B 7D 4E      mov d, _toktype ; $toktype
1631   0DDE 2A            mov b, [d]
1632   0DDF 38 00 00      mov c, 0
1633   0DE2             ; --- START RELATIONAL
1634   0DE2 D7            push a
1635   0DE3 11            mov a, b
1636   0DE4 FD 2E 07 00   mov32 cb, $7 ; enum element: END
1636   0DE8 00 00 
1637   0DEA B0            cmp a, b
1638   0DEB FD 71         seq ; ==
1639   0DED E4            pop a
1640   0DEE             ; --- END RELATIONAL
1641   0DEE C0 00 00      cmp b, 0
1642   0DF1 C6 FA 0D      je _if44_exit
1643   0DF4             _if44_TRUE:
1644   0DF4             ; break; 
1645   0DF4 0A 17 0E      jmp _for43_exit ; for break
1646   0DF7 0A FA 0D      jmp _if44_exit
1647   0DFA             _if44_exit:
1648   0DFA             ; strcat(opcode, token); 
1649   0DFA             ; --- START FUNCTION CALL
1650   0DFA 3B 81 4E      mov d, _token_data ; $token
1651   0DFD 2D            mov b, d
1652   0DFE 38 00 00      mov c, 0
1653   0E01 FD AB         swp b
1654   0E03 D8            push b
1655   0E04 FA E1 FF      lea d, [bp + -31] ; $opcode
1656   0E07 2D            mov b, d
1657   0E08 38 00 00      mov c, 0
1658   0E0B FD AB         swp b
1659   0E0D D8            push b
1660   0E0E 07 19 4C      call strcat
1661   0E11 51 04 00      add sp, 4
1662   0E14             ; --- END FUNCTION CALL
1663   0E14             _for43_update:
1664   0E14 0A D8 0D      jmp _for43_cond
1665   0E17             _for43_exit:
1666   0E17             _if42_exit:
1667   0E17             ; op = search_opcode(opcode); 
1668   0E17 FA 87 FF      lea d, [bp + -121] ; $op
1669   0E1A DA            push d
1670   0E1B             ; --- START FUNCTION CALL
1671   0E1B FA E1 FF      lea d, [bp + -31] ; $opcode
1672   0E1E 2D            mov b, d
1673   0E1F 38 00 00      mov c, 0
1674   0E22 FD AB         swp b
1675   0E24 D8            push b
1676   0E25 07 EE 23      call search_opcode
1677   0E28 51 02 00      add sp, 2
1678   0E2B             ; --- END FUNCTION CALL
1679   0E2B E7            pop d
1680   0E2C FD 28         mov si, b
1681   0E2E FD 50         mov di, d
1682   0E30 38 1A 00      mov c, 26
1683   0E33 FD F5         rep movsb
1684   0E35             ; if(op.opcode_type){ 
1685   0E35             _if45_cond:
1686   0E35 FA 87 FF      lea d, [bp + -121] ; $op
1687   0E38 58 19 00      add d, 25
1688   0E3B 32            mov bl, [d]
1689   0E3C A7 00         mov bh, 0
1690   0E3E 38 00 00      mov c, 0
1691   0E41 C0 00 00      cmp b, 0
1692   0E44 C6 57 0E      je _if45_exit
1693   0E47             _if45_TRUE:
1694   0E47             ; forwards(1); 
1695   0E47             ; --- START FUNCTION CALL
1696   0E47 FD 2E 01 00   mov32 cb, $00000001
1696   0E4B 00 00 
1697   0E4D DD            push bl
1698   0E4E 07 1B 27      call forwards
1699   0E51 51 01 00      add sp, 1
1700   0E54             ; --- END FUNCTION CALL
1701   0E54 0A 57 0E      jmp _if45_exit
1702   0E57             _if45_exit:
1703   0E57             ; forwards(1); 
1704   0E57             ; --- START FUNCTION CALL
1705   0E57 FD 2E 01 00   mov32 cb, $00000001
1705   0E5B 00 00 
1706   0E5D DD            push bl
1707   0E5E 07 1B 27      call forwards
1708   0E61 51 01 00      add sp, 1
1709   0E64             ; --- END FUNCTION CALL
1710   0E64 0A 71 13      jmp _if41_exit
1711   0E67             _if41_else:
1712   0E67             ; num_operands = 0; 
1713   0E67 FA 85 FF      lea d, [bp + -123] ; $num_operands
1714   0E6A DA            push d
1715   0E6B FD 2E 00 00   mov32 cb, $00000000
1715   0E6F 00 00 
1716   0E71 E7            pop d
1717   0E72 FD 43         mov [d], b
1718   0E74             ; for(;;){ 
1719   0E74             _for46_init:
1720   0E74             _for46_cond:
1721   0E74             _for46_block:
1722   0E74             ; get(); 
1723   0E74             ; --- START FUNCTION CALL
1724   0E74 07 6C 2B      call get
1725   0E77             ; if(toktype == END) break; 
1726   0E77             _if47_cond:
1727   0E77 3B 7D 4E      mov d, _toktype ; $toktype
1728   0E7A 2A            mov b, [d]
1729   0E7B 38 00 00      mov c, 0
1730   0E7E             ; --- START RELATIONAL
1731   0E7E D7            push a
1732   0E7F 11            mov a, b
1733   0E80 FD 2E 07 00   mov32 cb, $7 ; enum element: END
1733   0E84 00 00 
1734   0E86 B0            cmp a, b
1735   0E87 FD 71         seq ; ==
1736   0E89 E4            pop a
1737   0E8A             ; --- END RELATIONAL
1738   0E8A C0 00 00      cmp b, 0
1739   0E8D C6 96 0E      je _if47_exit
1740   0E90             _if47_TRUE:
1741   0E90             ; break; 
1742   0E90 0A F2 0E      jmp _for46_exit ; for break
1743   0E93 0A 96 0E      jmp _if47_exit
1744   0E96             _if47_exit:
1745   0E96             ; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1746   0E96             _if48_cond:
1747   0E96 3B 7D 4E      mov d, _toktype ; $toktype
1748   0E99 2A            mov b, [d]
1749   0E9A 38 00 00      mov c, 0
1750   0E9D             ; --- START RELATIONAL
1751   0E9D D7            push a
1752   0E9E 11            mov a, b
1753   0E9F FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
1753   0EA3 00 00 
1754   0EA5 B0            cmp a, b
1755   0EA6 FD 71         seq ; ==
1756   0EA8 E4            pop a
1757   0EA9             ; --- END RELATIONAL
1758   0EA9             ; --- START LOGICAL OR
1759   0EA9 D7            push a
1760   0EAA 11            mov a, b
1761   0EAB 3B 7D 4E      mov d, _toktype ; $toktype
1762   0EAE 2A            mov b, [d]
1763   0EAF 38 00 00      mov c, 0
1764   0EB2             ; --- START RELATIONAL
1765   0EB2 D7            push a
1766   0EB3 11            mov a, b
1767   0EB4 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1767   0EB8 00 00 
1768   0EBA B0            cmp a, b
1769   0EBB FD 71         seq ; ==
1770   0EBD E4            pop a
1771   0EBE             ; --- END RELATIONAL
1772   0EBE             ; --- START LOGICAL AND
1773   0EBE D7            push a
1774   0EBF 11            mov a, b
1775   0EC0             ; --- START FUNCTION CALL
1776   0EC0 3B 81 4E      mov d, _token_data ; $token
1777   0EC3 2D            mov b, d
1778   0EC4 38 00 00      mov c, 0
1779   0EC7 FD AB         swp b
1780   0EC9 D8            push b
1781   0ECA 07 10 1F      call is_reserved
1782   0ECD 51 02 00      add sp, 2
1783   0ED0             ; --- END FUNCTION CALL
1784   0ED0 FD A7         sand a, b
1785   0ED2 E4            pop a
1786   0ED3             ; --- END LOGICAL AND
1787   0ED3 FD A8         sor a, b ; ||
1788   0ED5 E4            pop a
1789   0ED6             ; --- END LOGICAL OR
1790   0ED6 C0 00 00      cmp b, 0
1791   0ED9 C6 EF 0E      je _if48_exit
1792   0EDC             _if48_TRUE:
1793   0EDC             ; num_operands++; 
1794   0EDC FA 85 FF      lea d, [bp + -123] ; $num_operands
1795   0EDF 2A            mov b, [d]
1796   0EE0 38 00 00      mov c, 0
1797   0EE3 11            mov a, b
1798   0EE4 FD 77         inc b
1799   0EE6 FA 85 FF      lea d, [bp + -123] ; $num_operands
1800   0EE9 FD 43         mov [d], b
1801   0EEB 27            mov b, a
1802   0EEC 0A EF 0E      jmp _if48_exit
1803   0EEF             _if48_exit:
1804   0EEF             _for46_update:
1805   0EEF 0A 74 0E      jmp _for46_cond
1806   0EF2             _for46_exit:
1807   0EF2             ; if(num_operands > 2) error("Maximum number of operands per instruction is 2."); 
1808   0EF2             _if49_cond:
1809   0EF2 FA 85 FF      lea d, [bp + -123] ; $num_operands
1810   0EF5 2A            mov b, [d]
1811   0EF6 38 00 00      mov c, 0
1812   0EF9             ; --- START RELATIONAL
1813   0EF9 D7            push a
1814   0EFA 11            mov a, b
1815   0EFB FD 2E 02 00   mov32 cb, $00000002
1815   0EFF 00 00 
1816   0F01 B0            cmp a, b
1817   0F02 FD 7F         sgt ; >
1818   0F04 E4            pop a
1819   0F05             ; --- END RELATIONAL
1820   0F05 C0 00 00      cmp b, 0
1821   0F08 C6 1A 0F      je _if49_exit
1822   0F0B             _if49_TRUE:
1823   0F0B             ; error("Maximum number of operands per instruction is 2."); 
1824   0F0B             ; --- START FUNCTION CALL
1825   0F0B 26 F0 50      mov b, _s27 ; "Maximum number of operands per instruction is 2."
1826   0F0E FD AB         swp b
1827   0F10 D8            push b
1828   0F11 07 72 39      call error
1829   0F14 51 02 00      add sp, 2
1830   0F17             ; --- END FUNCTION CALL
1831   0F17 0A 1A 0F      jmp _if49_exit
1832   0F1A             _if49_exit:
1833   0F1A             ; num_operandsexp = exp(2, num_operands); 
1834   0F1A FA 83 FF      lea d, [bp + -125] ; $num_operandsexp
1835   0F1D DA            push d
1836   0F1E             ; --- START FUNCTION CALL
1837   0F1E FA 85 FF      lea d, [bp + -123] ; $num_operands
1838   0F21 2A            mov b, [d]
1839   0F22 38 00 00      mov c, 0
1840   0F25 FD AB         swp b
1841   0F27 D8            push b
1842   0F28 FD 2E 02 00   mov32 cb, $00000002
1842   0F2C 00 00 
1843   0F2E FD AB         swp b
1844   0F30 D8            push b
1845   0F31 07 BC 3D      call exp
1846   0F34 51 04 00      add sp, 4
1847   0F37             ; --- END FUNCTION CALL
1848   0F37 E7            pop d
1849   0F38 FD 43         mov [d], b
1850   0F3A             ; for(i = 0; i < num_operandsexp; i++){ 
1851   0F3A             _for50_init:
1852   0F3A FA 81 FF      lea d, [bp + -127] ; $i
1853   0F3D DA            push d
1854   0F3E FD 2E 00 00   mov32 cb, $00000000
1854   0F42 00 00 
1855   0F44 E7            pop d
1856   0F45 FD 43         mov [d], b
1857   0F47             _for50_cond:
1858   0F47 FA 81 FF      lea d, [bp + -127] ; $i
1859   0F4A 2A            mov b, [d]
1860   0F4B 38 00 00      mov c, 0
1861   0F4E             ; --- START RELATIONAL
1862   0F4E D7            push a
1863   0F4F 11            mov a, b
1864   0F50 FA 83 FF      lea d, [bp + -125] ; $num_operandsexp
1865   0F53 2A            mov b, [d]
1866   0F54 38 00 00      mov c, 0
1867   0F57 B0            cmp a, b
1868   0F58 FD 73         slt ; < (signed)
1869   0F5A E4            pop a
1870   0F5B             ; --- END RELATIONAL
1871   0F5B C0 00 00      cmp b, 0
1872   0F5E C6 71 13      je _for50_exit
1873   0F61             _for50_block:
1874   0F61             ; prog = code_line; 
1875   0F61 3B 7F 4E      mov d, _prog ; $prog
1876   0F64 DA            push d
1877   0F65 FA A1 FF      lea d, [bp + -95] ; $code_line
1878   0F68 2D            mov b, d
1879   0F69 38 00 00      mov c, 0
1880   0F6C E7            pop d
1881   0F6D FD 43         mov [d], b
1882   0F6F             ; get(); 
1883   0F6F             ; --- START FUNCTION CALL
1884   0F6F 07 6C 2B      call get
1885   0F72             ; strcpy(opcode, token); 
1886   0F72             ; --- START FUNCTION CALL
1887   0F72 3B 81 4E      mov d, _token_data ; $token
1888   0F75 2D            mov b, d
1889   0F76 38 00 00      mov c, 0
1890   0F79 FD AB         swp b
1891   0F7B D8            push b
1892   0F7C FA E1 FF      lea d, [bp + -31] ; $opcode
1893   0F7F 2D            mov b, d
1894   0F80 38 00 00      mov c, 0
1895   0F83 FD AB         swp b
1896   0F85 D8            push b
1897   0F86 07 9F 4B      call strcpy
1898   0F89 51 04 00      add sp, 4
1899   0F8C             ; --- END FUNCTION CALL
1900   0F8C             ; strcat(opcode, " "); 
1901   0F8C             ; --- START FUNCTION CALL
1902   0F8C 26 EE 50      mov b, _s26 ; " "
1903   0F8F FD AB         swp b
1904   0F91 D8            push b
1905   0F92 FA E1 FF      lea d, [bp + -31] ; $opcode
1906   0F95 2D            mov b, d
1907   0F96 38 00 00      mov c, 0
1908   0F99 FD AB         swp b
1909   0F9B D8            push b
1910   0F9C 07 19 4C      call strcat
1911   0F9F 51 04 00      add sp, 4
1912   0FA2             ; --- END FUNCTION CALL
1913   0FA2             ; j = 0; 
1914   0FA2 FA 7F FF      lea d, [bp + -129] ; $j
1915   0FA5 DA            push d
1916   0FA6 FD 2E 00 00   mov32 cb, $00000000
1916   0FAA 00 00 
1917   0FAC E7            pop d
1918   0FAD FD 43         mov [d], b
1919   0FAF             ; for(;;){ 
1920   0FAF             _for51_init:
1921   0FAF             _for51_cond:
1922   0FAF             _for51_block:
1923   0FAF             ; get(); 
1924   0FAF             ; --- START FUNCTION CALL
1925   0FAF 07 6C 2B      call get
1926   0FB2             ; if(toktype == END) break; 
1927   0FB2             _if52_cond:
1928   0FB2 3B 7D 4E      mov d, _toktype ; $toktype
1929   0FB5 2A            mov b, [d]
1930   0FB6 38 00 00      mov c, 0
1931   0FB9             ; --- START RELATIONAL
1932   0FB9 D7            push a
1933   0FBA 11            mov a, b
1934   0FBB FD 2E 07 00   mov32 cb, $7 ; enum element: END
1934   0FBF 00 00 
1935   0FC1 B0            cmp a, b
1936   0FC2 FD 71         seq ; ==
1937   0FC4 E4            pop a
1938   0FC5             ; --- END RELATIONAL
1939   0FC5 C0 00 00      cmp b, 0
1940   0FC8 C6 D1 0F      je _if52_exit
1941   0FCB             _if52_TRUE:
1942   0FCB             ; break; 
1943   0FCB 0A 54 11      jmp _for51_exit ; for break
1944   0FCE 0A D1 0F      jmp _if52_exit
1945   0FD1             _if52_exit:
1946   0FD1             ; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1947   0FD1             _if53_cond:
1948   0FD1 3B 7D 4E      mov d, _toktype ; $toktype
1949   0FD4 2A            mov b, [d]
1950   0FD5 38 00 00      mov c, 0
1951   0FD8             ; --- START RELATIONAL
1952   0FD8 D7            push a
1953   0FD9 11            mov a, b
1954   0FDA FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
1954   0FDE 00 00 
1955   0FE0 B0            cmp a, b
1956   0FE1 FD 71         seq ; ==
1957   0FE3 E4            pop a
1958   0FE4             ; --- END RELATIONAL
1959   0FE4             ; --- START LOGICAL OR
1960   0FE4 D7            push a
1961   0FE5 11            mov a, b
1962   0FE6 3B 7D 4E      mov d, _toktype ; $toktype
1963   0FE9 2A            mov b, [d]
1964   0FEA 38 00 00      mov c, 0
1965   0FED             ; --- START RELATIONAL
1966   0FED D7            push a
1967   0FEE 11            mov a, b
1968   0FEF FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1968   0FF3 00 00 
1969   0FF5 B0            cmp a, b
1970   0FF6 FD 71         seq ; ==
1971   0FF8 E4            pop a
1972   0FF9             ; --- END RELATIONAL
1973   0FF9             ; --- START LOGICAL AND
1974   0FF9 D7            push a
1975   0FFA 11            mov a, b
1976   0FFB             ; --- START FUNCTION CALL
1977   0FFB 3B 81 4E      mov d, _token_data ; $token
1978   0FFE 2D            mov b, d
1979   0FFF 38 00 00      mov c, 0
1980   1002 FD AB         swp b
1981   1004 D8            push b
1982   1005 07 10 1F      call is_reserved
1983   1008 51 02 00      add sp, 2
1984   100B             ; --- END FUNCTION CALL
1985   100B FD A7         sand a, b
1986   100D E4            pop a
1987   100E             ; --- END LOGICAL AND
1988   100E FD A8         sor a, b ; ||
1989   1010 E4            pop a
1990   1011             ; --- END LOGICAL OR
1991   1011 C0 00 00      cmp b, 0
1992   1014 C6 37 11      je _if53_else
1993   1017             _if53_TRUE:
1994   1017             ; strcat(opcode, symbols[i*2+j]); 
1995   1017             ; --- START FUNCTION CALL
1996   1017 3B E3 4F      mov d, _symbols_data ; $symbols
1997   101A D7            push a
1998   101B DA            push d
1999   101C FA 81 FF      lea d, [bp + -127] ; $i
2000   101F 2A            mov b, [d]
2001   1020 38 00 00      mov c, 0
2002   1023             ; --- START FACTORS
2003   1023 D7            push a
2004   1024 FD D8         push g
2005   1026 11            mov a, b
2006   1027 FD 7A         mov g, c
2007   1029 FD 2E 02 00   mov32 cb, $00000002
2007   102D 00 00 
2008   102F D7            push a     ; save left operand
2009   1030 8E            xor a, b   ; xor sign bits
2010   1031 FD AA         swp a      ; swap bytes
2011   1033 83            mov cl, al ; save result of xor into 'dl'
2012   1034 E4            pop a      ; restore left side operator
2013   1035 DF            push cl    ; save result of xor above
2014   1036 FD AA         swp a  
2015   1038 93 80         test al, $80  
2016   103A FD AA         swp a  
2017   103C C6 41 10      jz skip_invert_a_61  
2018   103F FD 95         neg a 
2019   1041             skip_invert_a_61:   
2020   1041 FD AB         swp b
2021   1043 FD 93 80      test bl, $80  
2022   1046 FD AB         swp b
2023   1048 C6 4D 10      jz skip_invert_b_61  
2024   104B FD 97         neg b 
2025   104D             skip_invert_b_61:   
2026   104D AC            mul a, b ; *
2027   104E FD 78         mov g, a
2028   1050 11            mov a, b
2029   1051 EA            pop bl
2030   1052 FD 93 80      test bl, $80
2031   1055 C6 62 10      jz _same_signs_61
2032   1058 2F            mov bl, al
2033   1059 95            not a
2034   105A FD 97         neg b
2035   105C 5B 00 00      adc a, 0
2036   105F FD 78         mov g, a
2037   1061 11            mov a, b
2038   1062             _same_signs_61:
2039   1062 FD 38         mov c, g
2040   1064 27            mov b, a
2041   1065 FD F1         pop g
2042   1067 E4            pop a
2043   1068             ; --- END FACTORS
2044   1068             ; --- START TERMS
2045   1068 D7            push a
2046   1069 FD D8         push g
2047   106B 11            mov a, b
2048   106C FD 7A         mov g, c
2049   106E FA 7F FF      lea d, [bp + -129] ; $j
2050   1071 2A            mov b, [d]
2051   1072 38 00 00      mov c, 0
2052   1075 38 00 00      mov c, 0
2053   1078 FD 15         add32 cb, ga
2054   107A FD F1         pop g
2055   107C E4            pop a
2056   107D             ; --- END TERMS
2057   107D E7            pop d
2058   107E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2059   1082 E4            pop a
2060   1083 2A            mov b, [d]
2061   1084 38 00 00      mov c, 0
2062   1087 FD AB         swp b
2063   1089 D8            push b
2064   108A FA E1 FF      lea d, [bp + -31] ; $opcode
2065   108D 2D            mov b, d
2066   108E 38 00 00      mov c, 0
2067   1091 FD AB         swp b
2068   1093 D8            push b
2069   1094 07 19 4C      call strcat
2070   1097 51 04 00      add sp, 4
2071   109A             ; --- END FUNCTION CALL
2072   109A             ; operand_types[j] = *symbols[i*2+j]; 
2073   109A FA 7C FF      lea d, [bp + -132] ; $operand_types
2074   109D D7            push a
2075   109E DA            push d
2076   109F FA 7F FF      lea d, [bp + -129] ; $j
2077   10A2 2A            mov b, [d]
2078   10A3 38 00 00      mov c, 0
2079   10A6 E7            pop d
2080   10A7 5A            add d, b
2081   10A8 E4            pop a
2082   10A9 DA            push d
2083   10AA 3B E3 4F      mov d, _symbols_data ; $symbols
2084   10AD D7            push a
2085   10AE DA            push d
2086   10AF FA 81 FF      lea d, [bp + -127] ; $i
2087   10B2 2A            mov b, [d]
2088   10B3 38 00 00      mov c, 0
2089   10B6             ; --- START FACTORS
2090   10B6 D7            push a
2091   10B7 FD D8         push g
2092   10B9 11            mov a, b
2093   10BA FD 7A         mov g, c
2094   10BC FD 2E 02 00   mov32 cb, $00000002
2094   10C0 00 00 
2095   10C2 D7            push a     ; save left operand
2096   10C3 8E            xor a, b   ; xor sign bits
2097   10C4 FD AA         swp a      ; swap bytes
2098   10C6 83            mov cl, al ; save result of xor into 'dl'
2099   10C7 E4            pop a      ; restore left side operator
2100   10C8 DF            push cl    ; save result of xor above
2101   10C9 FD AA         swp a  
2102   10CB 93 80         test al, $80  
2103   10CD FD AA         swp a  
2104   10CF C6 D4 10      jz skip_invert_a_65  
2105   10D2 FD 95         neg a 
2106   10D4             skip_invert_a_65:   
2107   10D4 FD AB         swp b
2108   10D6 FD 93 80      test bl, $80  
2109   10D9 FD AB         swp b
2110   10DB C6 E0 10      jz skip_invert_b_65  
2111   10DE FD 97         neg b 
2112   10E0             skip_invert_b_65:   
2113   10E0 AC            mul a, b ; *
2114   10E1 FD 78         mov g, a
2115   10E3 11            mov a, b
2116   10E4 EA            pop bl
2117   10E5 FD 93 80      test bl, $80
2118   10E8 C6 F5 10      jz _same_signs_65
2119   10EB 2F            mov bl, al
2120   10EC 95            not a
2121   10ED FD 97         neg b
2122   10EF 5B 00 00      adc a, 0
2123   10F2 FD 78         mov g, a
2124   10F4 11            mov a, b
2125   10F5             _same_signs_65:
2126   10F5 FD 38         mov c, g
2127   10F7 27            mov b, a
2128   10F8 FD F1         pop g
2129   10FA E4            pop a
2130   10FB             ; --- END FACTORS
2131   10FB             ; --- START TERMS
2132   10FB D7            push a
2133   10FC FD D8         push g
2134   10FE 11            mov a, b
2135   10FF FD 7A         mov g, c
2136   1101 FA 7F FF      lea d, [bp + -129] ; $j
2137   1104 2A            mov b, [d]
2138   1105 38 00 00      mov c, 0
2139   1108 38 00 00      mov c, 0
2140   110B FD 15         add32 cb, ga
2141   110D FD F1         pop g
2142   110F E4            pop a
2143   1110             ; --- END TERMS
2144   1110 E7            pop d
2145   1111 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2146   1115 E4            pop a
2147   1116 2A            mov b, [d]
2148   1117 38 00 00      mov c, 0
2149   111A 74            mov d, b
2150   111B 32            mov bl, [d]
2151   111C A7 00         mov bh, 0
2152   111E 38 00 00      mov c, 0
2153   1121 E7            pop d
2154   1122 FD 3E         mov [d], bl
2155   1124             ; j++; 
2156   1124 FA 7F FF      lea d, [bp + -129] ; $j
2157   1127 2A            mov b, [d]
2158   1128 38 00 00      mov c, 0
2159   112B 11            mov a, b
2160   112C FD 77         inc b
2161   112E FA 7F FF      lea d, [bp + -129] ; $j
2162   1131 FD 43         mov [d], b
2163   1133 27            mov b, a
2164   1134 0A 51 11      jmp _if53_exit
2165   1137             _if53_else:
2166   1137             ; strcat(opcode, token); 
2167   1137             ; --- START FUNCTION CALL
2168   1137 3B 81 4E      mov d, _token_data ; $token
2169   113A 2D            mov b, d
2170   113B 38 00 00      mov c, 0
2171   113E FD AB         swp b
2172   1140 D8            push b
2173   1141 FA E1 FF      lea d, [bp + -31] ; $opcode
2174   1144 2D            mov b, d
2175   1145 38 00 00      mov c, 0
2176   1148 FD AB         swp b
2177   114A D8            push b
2178   114B 07 19 4C      call strcat
2179   114E 51 04 00      add sp, 4
2180   1151             ; --- END FUNCTION CALL
2181   1151             _if53_exit:
2182   1151             _for51_update:
2183   1151 0A AF 0F      jmp _for51_cond
2184   1154             _for51_exit:
2185   1154             ; op = search_opcode(opcode); 
2186   1154 FA 87 FF      lea d, [bp + -121] ; $op
2187   1157 DA            push d
2188   1158             ; --- START FUNCTION CALL
2189   1158 FA E1 FF      lea d, [bp + -31] ; $opcode
2190   115B 2D            mov b, d
2191   115C 38 00 00      mov c, 0
2192   115F FD AB         swp b
2193   1161 D8            push b
2194   1162 07 EE 23      call search_opcode
2195   1165 51 02 00      add sp, 2
2196   1168             ; --- END FUNCTION CALL
2197   1168 E7            pop d
2198   1169 FD 28         mov si, b
2199   116B FD 50         mov di, d
2200   116D 38 1A 00      mov c, 26
2201   1170 FD F5         rep movsb
2202   1172             ; if(op.name[0] == '\0') continue; 
2203   1172             _if66_cond:
2204   1172 FA 87 FF      lea d, [bp + -121] ; $op
2205   1175 58 00 00      add d, 0
2206   1178 D7            push a
2207   1179 DA            push d
2208   117A FD 2E 00 00   mov32 cb, $00000000
2208   117E 00 00 
2209   1180 E7            pop d
2210   1181 5A            add d, b
2211   1182 E4            pop a
2212   1183 32            mov bl, [d]
2213   1184 A7 00         mov bh, 0
2214   1186 38 00 00      mov c, 0
2215   1189             ; --- START RELATIONAL
2216   1189 D7            push a
2217   118A 11            mov a, b
2218   118B FD 2E 00 00   mov32 cb, $00000000
2218   118F 00 00 
2219   1191 B0            cmp a, b
2220   1192 FD 71         seq ; ==
2221   1194 E4            pop a
2222   1195             ; --- END RELATIONAL
2223   1195 C0 00 00      cmp b, 0
2224   1198 C6 A1 11      je _if66_exit
2225   119B             _if66_TRUE:
2226   119B             ; continue; 
2227   119B 0A 5E 13      jmp _for50_update ; for continue
2228   119E 0A A1 11      jmp _if66_exit
2229   11A1             _if66_exit:
2230   11A1             ; if(op.opcode_type){ 
2231   11A1             _if67_cond:
2232   11A1 FA 87 FF      lea d, [bp + -121] ; $op
2233   11A4 58 19 00      add d, 25
2234   11A7 32            mov bl, [d]
2235   11A8 A7 00         mov bh, 0
2236   11AA 38 00 00      mov c, 0
2237   11AD C0 00 00      cmp b, 0
2238   11B0 C6 C3 11      je _if67_exit
2239   11B3             _if67_TRUE:
2240   11B3             ; forwards(1); 
2241   11B3             ; --- START FUNCTION CALL
2242   11B3 FD 2E 01 00   mov32 cb, $00000001
2242   11B7 00 00 
2243   11B9 DD            push bl
2244   11BA 07 1B 27      call forwards
2245   11BD 51 01 00      add sp, 1
2246   11C0             ; --- END FUNCTION CALL
2247   11C0 0A C3 11      jmp _if67_exit
2248   11C3             _if67_exit:
2249   11C3             ; forwards(1); 
2250   11C3             ; --- START FUNCTION CALL
2251   11C3 FD 2E 01 00   mov32 cb, $00000001
2251   11C7 00 00 
2252   11C9 DD            push bl
2253   11CA 07 1B 27      call forwards
2254   11CD 51 01 00      add sp, 1
2255   11D0             ; --- END FUNCTION CALL
2256   11D0             ; prog = code_line; 
2257   11D0 3B 7F 4E      mov d, _prog ; $prog
2258   11D3 DA            push d
2259   11D4 FA A1 FF      lea d, [bp + -95] ; $code_line
2260   11D7 2D            mov b, d
2261   11D8 38 00 00      mov c, 0
2262   11DB E7            pop d
2263   11DC FD 43         mov [d], b
2264   11DE             ; j = 0; 
2265   11DE FA 7F FF      lea d, [bp + -129] ; $j
2266   11E1 DA            push d
2267   11E2 FD 2E 00 00   mov32 cb, $00000000
2267   11E6 00 00 
2268   11E8 E7            pop d
2269   11E9 FD 43         mov [d], b
2270   11EB             ; get(); 
2271   11EB             ; --- START FUNCTION CALL
2272   11EB 07 6C 2B      call get
2273   11EE             ; for(;;){ 
2274   11EE             _for68_init:
2275   11EE             _for68_cond:
2276   11EE             _for68_block:
2277   11EE             ; get(); 
2278   11EE             ; --- START FUNCTION CALL
2279   11EE 07 6C 2B      call get
2280   11F1             ; if(toktype == END) break; 
2281   11F1             _if69_cond:
2282   11F1 3B 7D 4E      mov d, _toktype ; $toktype
2283   11F4 2A            mov b, [d]
2284   11F5 38 00 00      mov c, 0
2285   11F8             ; --- START RELATIONAL
2286   11F8 D7            push a
2287   11F9 11            mov a, b
2288   11FA FD 2E 07 00   mov32 cb, $7 ; enum element: END
2288   11FE 00 00 
2289   1200 B0            cmp a, b
2290   1201 FD 71         seq ; ==
2291   1203 E4            pop a
2292   1204             ; --- END RELATIONAL
2293   1204 C0 00 00      cmp b, 0
2294   1207 C6 10 12      je _if69_exit
2295   120A             _if69_TRUE:
2296   120A             ; break; 
2297   120A 0A 5B 13      jmp _for68_exit ; for break
2298   120D 0A 10 12      jmp _if69_exit
2299   1210             _if69_exit:
2300   1210             ; if(toktype == IDENTIFIER && !is_reserved(token)){ 
2301   1210             _if70_cond:
2302   1210 3B 7D 4E      mov d, _toktype ; $toktype
2303   1213 2A            mov b, [d]
2304   1214 38 00 00      mov c, 0
2305   1217             ; --- START RELATIONAL
2306   1217 D7            push a
2307   1218 11            mov a, b
2308   1219 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
2308   121D 00 00 
2309   121F B0            cmp a, b
2310   1220 FD 71         seq ; ==
2311   1222 E4            pop a
2312   1223             ; --- END RELATIONAL
2313   1223             ; --- START LOGICAL AND
2314   1223 D7            push a
2315   1224 11            mov a, b
2316   1225             ; --- START FUNCTION CALL
2317   1225 3B 81 4E      mov d, _token_data ; $token
2318   1228 2D            mov b, d
2319   1229 38 00 00      mov c, 0
2320   122C FD AB         swp b
2321   122E D8            push b
2322   122F 07 10 1F      call is_reserved
2323   1232 51 02 00      add sp, 2
2324   1235             ; --- END FUNCTION CALL
2325   1235 FD A7         sand a, b
2326   1237 E4            pop a
2327   1238             ; --- END LOGICAL AND
2328   1238 C0 00 00      cmp b, 0
2329   123B C6 BE 12      je _if70_else
2330   123E             _if70_TRUE:
2331   123E             ; if(operand_types[j] == '#'){ 
2332   123E             _if71_cond:
2333   123E FA 7C FF      lea d, [bp + -132] ; $operand_types
2334   1241 D7            push a
2335   1242 DA            push d
2336   1243 FA 7F FF      lea d, [bp + -129] ; $j
2337   1246 2A            mov b, [d]
2338   1247 38 00 00      mov c, 0
2339   124A E7            pop d
2340   124B 5A            add d, b
2341   124C E4            pop a
2342   124D 32            mov bl, [d]
2343   124E A7 00         mov bh, 0
2344   1250 38 00 00      mov c, 0
2345   1253             ; --- START RELATIONAL
2346   1253 D7            push a
2347   1254 11            mov a, b
2348   1255 FD 2E 23 00   mov32 cb, $00000023
2348   1259 00 00 
2349   125B B0            cmp a, b
2350   125C FD 71         seq ; ==
2351   125E E4            pop a
2352   125F             ; --- END RELATIONAL
2353   125F C0 00 00      cmp b, 0
2354   1262 C6 74 12      je _if71_else
2355   1265             _if71_TRUE:
2356   1265             ; error("8bit operand expected but 16bit label given."); 
2357   1265             ; --- START FUNCTION CALL
2358   1265 26 21 51      mov b, _s28 ; "8bit operand expected but 16bit label given."
2359   1268 FD AB         swp b
2360   126A D8            push b
2361   126B 07 72 39      call error
2362   126E 51 02 00      add sp, 2
2363   1271             ; --- END FUNCTION CALL
2364   1271 0A AB 12      jmp _if71_exit
2365   1274             _if71_else:
2366   1274             ; if(operand_types[j] == '@'){ 
2367   1274             _if72_cond:
2368   1274 FA 7C FF      lea d, [bp + -132] ; $operand_types
2369   1277 D7            push a
2370   1278 DA            push d
2371   1279 FA 7F FF      lea d, [bp + -129] ; $j
2372   127C 2A            mov b, [d]
2373   127D 38 00 00      mov c, 0
2374   1280 E7            pop d
2375   1281 5A            add d, b
2376   1282 E4            pop a
2377   1283 32            mov bl, [d]
2378   1284 A7 00         mov bh, 0
2379   1286 38 00 00      mov c, 0
2380   1289             ; --- START RELATIONAL
2381   1289 D7            push a
2382   128A 11            mov a, b
2383   128B FD 2E 40 00   mov32 cb, $00000040
2383   128F 00 00 
2384   1291 B0            cmp a, b
2385   1292 FD 71         seq ; ==
2386   1294 E4            pop a
2387   1295             ; --- END RELATIONAL
2388   1295 C0 00 00      cmp b, 0
2389   1298 C6 AB 12      je _if72_exit
2390   129B             _if72_TRUE:
2391   129B             ; forwards(2); 
2392   129B             ; --- START FUNCTION CALL
2393   129B FD 2E 02 00   mov32 cb, $00000002
2393   129F 00 00 
2394   12A1 DD            push bl
2395   12A2 07 1B 27      call forwards
2396   12A5 51 01 00      add sp, 1
2397   12A8             ; --- END FUNCTION CALL
2398   12A8 0A AB 12      jmp _if72_exit
2399   12AB             _if72_exit:
2400   12AB             _if71_exit:
2401   12AB             ; j++; 
2402   12AB FA 7F FF      lea d, [bp + -129] ; $j
2403   12AE 2A            mov b, [d]
2404   12AF 38 00 00      mov c, 0
2405   12B2 11            mov a, b
2406   12B3 FD 77         inc b
2407   12B5 FA 7F FF      lea d, [bp + -129] ; $j
2408   12B8 FD 43         mov [d], b
2409   12BA 27            mov b, a
2410   12BB 0A 58 13      jmp _if70_exit
2411   12BE             _if70_else:
2412   12BE             ; if(toktype == INTEGER_CONST){ 
2413   12BE             _if73_cond:
2414   12BE 3B 7D 4E      mov d, _toktype ; $toktype
2415   12C1 2A            mov b, [d]
2416   12C2 38 00 00      mov c, 0
2417   12C5             ; --- START RELATIONAL
2418   12C5 D7            push a
2419   12C6 11            mov a, b
2420   12C7 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2420   12CB 00 00 
2421   12CD B0            cmp a, b
2422   12CE FD 71         seq ; ==
2423   12D0 E4            pop a
2424   12D1             ; --- END RELATIONAL
2425   12D1 C0 00 00      cmp b, 0
2426   12D4 C6 58 13      je _if73_exit
2427   12D7             _if73_TRUE:
2428   12D7             ; if(operand_types[j] == '#'){ 
2429   12D7             _if74_cond:
2430   12D7 FA 7C FF      lea d, [bp + -132] ; $operand_types
2431   12DA D7            push a
2432   12DB DA            push d
2433   12DC FA 7F FF      lea d, [bp + -129] ; $j
2434   12DF 2A            mov b, [d]
2435   12E0 38 00 00      mov c, 0
2436   12E3 E7            pop d
2437   12E4 5A            add d, b
2438   12E5 E4            pop a
2439   12E6 32            mov bl, [d]
2440   12E7 A7 00         mov bh, 0
2441   12E9 38 00 00      mov c, 0
2442   12EC             ; --- START RELATIONAL
2443   12EC D7            push a
2444   12ED 11            mov a, b
2445   12EE FD 2E 23 00   mov32 cb, $00000023
2445   12F2 00 00 
2446   12F4 B0            cmp a, b
2447   12F5 FD 71         seq ; ==
2448   12F7 E4            pop a
2449   12F8             ; --- END RELATIONAL
2450   12F8 C0 00 00      cmp b, 0
2451   12FB C6 0E 13      je _if74_else
2452   12FE             _if74_TRUE:
2453   12FE             ; forwards(1); 
2454   12FE             ; --- START FUNCTION CALL
2455   12FE FD 2E 01 00   mov32 cb, $00000001
2455   1302 00 00 
2456   1304 DD            push bl
2457   1305 07 1B 27      call forwards
2458   1308 51 01 00      add sp, 1
2459   130B             ; --- END FUNCTION CALL
2460   130B 0A 45 13      jmp _if74_exit
2461   130E             _if74_else:
2462   130E             ; if(operand_types[j] == '@'){ 
2463   130E             _if75_cond:
2464   130E FA 7C FF      lea d, [bp + -132] ; $operand_types
2465   1311 D7            push a
2466   1312 DA            push d
2467   1313 FA 7F FF      lea d, [bp + -129] ; $j
2468   1316 2A            mov b, [d]
2469   1317 38 00 00      mov c, 0
2470   131A E7            pop d
2471   131B 5A            add d, b
2472   131C E4            pop a
2473   131D 32            mov bl, [d]
2474   131E A7 00         mov bh, 0
2475   1320 38 00 00      mov c, 0
2476   1323             ; --- START RELATIONAL
2477   1323 D7            push a
2478   1324 11            mov a, b
2479   1325 FD 2E 40 00   mov32 cb, $00000040
2479   1329 00 00 
2480   132B B0            cmp a, b
2481   132C FD 71         seq ; ==
2482   132E E4            pop a
2483   132F             ; --- END RELATIONAL
2484   132F C0 00 00      cmp b, 0
2485   1332 C6 45 13      je _if75_exit
2486   1335             _if75_TRUE:
2487   1335             ; forwards(2); 
2488   1335             ; --- START FUNCTION CALL
2489   1335 FD 2E 02 00   mov32 cb, $00000002
2489   1339 00 00 
2490   133B DD            push bl
2491   133C 07 1B 27      call forwards
2492   133F 51 01 00      add sp, 1
2493   1342             ; --- END FUNCTION CALL
2494   1342 0A 45 13      jmp _if75_exit
2495   1345             _if75_exit:
2496   1345             _if74_exit:
2497   1345             ; j++; 
2498   1345 FA 7F FF      lea d, [bp + -129] ; $j
2499   1348 2A            mov b, [d]
2500   1349 38 00 00      mov c, 0
2501   134C 11            mov a, b
2502   134D FD 77         inc b
2503   134F FA 7F FF      lea d, [bp + -129] ; $j
2504   1352 FD 43         mov [d], b
2505   1354 27            mov b, a
2506   1355 0A 58 13      jmp _if73_exit
2507   1358             _if73_exit:
2508   1358             _if70_exit:
2509   1358             _for68_update:
2510   1358 0A EE 11      jmp _for68_cond
2511   135B             _for68_exit:
2512   135B             ; break; 
2513   135B 0A 71 13      jmp _for50_exit ; for break
2514   135E             _for50_update:
2515   135E FA 81 FF      lea d, [bp + -127] ; $i
2516   1361 2A            mov b, [d]
2517   1362 38 00 00      mov c, 0
2518   1365 11            mov a, b
2519   1366 FD 77         inc b
2520   1368 FA 81 FF      lea d, [bp + -127] ; $i
2521   136B FD 43         mov [d], b
2522   136D 27            mov b, a
2523   136E 0A 47 0F      jmp _for50_cond
2524   1371             _for50_exit:
2525   1371             _if41_exit:
2526   1371             ; pop_prog(); 
2527   1371             ; --- START FUNCTION CALL
2528   1371 07 2A 3A      call pop_prog
2529   1374 F9            leave
2530   1375 09            ret
2531   1376             
2532   1376             parse_instr:
2533   1376 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2534   1379             ; char opcode[32]; 
2535   1379 52 20 00      sub sp, 32
2536   137C             ; char code_line[64]; 
2537   137C 52 40 00      sub sp, 64
2538   137F             ; struct t_opcode op; 
2539   137F 52 1A 00      sub sp, 26
2540   1382             ; int instr_len; 
2541   1382 52 02 00      sub sp, 2
2542   1385             ; int num_operands, num_operandsexp; 
2543   1385 52 02 00      sub sp, 2
2544   1388 52 02 00      sub sp, 2
2545   138B             ; int i, j; 
2546   138B 52 02 00      sub sp, 2
2547   138E 52 02 00      sub sp, 2
2548   1391             ; char operand_types[3]; // operand types and locations 
2549   1391 52 03 00      sub sp, 3
2550   1394             ; int old_pc; 
2551   1394 52 02 00      sub sp, 2
2552   1397             ; char has_operands; 
2553   1397 52 01 00      sub sp, 1
2554   139A             ; old_pc = pc; 
2555   139A FA 78 FF      lea d, [bp + -136] ; $old_pc
2556   139D DA            push d
2557   139E 3B 78 4E      mov d, _pc ; $pc
2558   13A1 2A            mov b, [d]
2559   13A2 38 00 00      mov c, 0
2560   13A5 E7            pop d
2561   13A6 FD 43         mov [d], b
2562   13A8             ; get_line(); 
2563   13A8             ; --- START FUNCTION CALL
2564   13A8 07 4F 2A      call get_line
2565   13AB             ; push_prog(); 
2566   13AB             ; --- START FUNCTION CALL
2567   13AB 07 D0 39      call push_prog
2568   13AE             ; strcpy(code_line, string_const); 
2569   13AE             ; --- START FUNCTION CALL
2570   13AE 3B C1 4E      mov d, _string_const_data ; $string_const
2571   13B1 2D            mov b, d
2572   13B2 38 00 00      mov c, 0
2573   13B5 FD AB         swp b
2574   13B7 D8            push b
2575   13B8 FA A1 FF      lea d, [bp + -95] ; $code_line
2576   13BB 2D            mov b, d
2577   13BC 38 00 00      mov c, 0
2578   13BF FD AB         swp b
2579   13C1 D8            push b
2580   13C2 07 9F 4B      call strcpy
2581   13C5 51 04 00      add sp, 4
2582   13C8             ; --- END FUNCTION CALL
2583   13C8             ; has_operands = 0; 
2584   13C8 FA 77 FF      lea d, [bp + -137] ; $has_operands
2585   13CB DA            push d
2586   13CC FD 2E 00 00   mov32 cb, $00000000
2586   13D0 00 00 
2587   13D2 E7            pop d
2588   13D3 FD 3E         mov [d], bl
2589   13D5             ; prog = code_line; 
2590   13D5 3B 7F 4E      mov d, _prog ; $prog
2591   13D8 DA            push d
2592   13D9 FA A1 FF      lea d, [bp + -95] ; $code_line
2593   13DC 2D            mov b, d
2594   13DD 38 00 00      mov c, 0
2595   13E0 E7            pop d
2596   13E1 FD 43         mov [d], b
2597   13E3             ; get(); 
2598   13E3             ; --- START FUNCTION CALL
2599   13E3 07 6C 2B      call get
2600   13E6             ; for(;;){ 
2601   13E6             _for76_init:
2602   13E6             _for76_cond:
2603   13E6             _for76_block:
2604   13E6             ; get(); 
2605   13E6             ; --- START FUNCTION CALL
2606   13E6 07 6C 2B      call get
2607   13E9             ; if(toktype == END) break; 
2608   13E9             _if77_cond:
2609   13E9 3B 7D 4E      mov d, _toktype ; $toktype
2610   13EC 2A            mov b, [d]
2611   13ED 38 00 00      mov c, 0
2612   13F0             ; --- START RELATIONAL
2613   13F0 D7            push a
2614   13F1 11            mov a, b
2615   13F2 FD 2E 07 00   mov32 cb, $7 ; enum element: END
2615   13F6 00 00 
2616   13F8 B0            cmp a, b
2617   13F9 FD 71         seq ; ==
2618   13FB E4            pop a
2619   13FC             ; --- END RELATIONAL
2620   13FC C0 00 00      cmp b, 0
2621   13FF C6 08 14      je _if77_exit
2622   1402             _if77_TRUE:
2623   1402             ; break; 
2624   1402 0A 58 14      jmp _for76_exit ; for break
2625   1405 0A 08 14      jmp _if77_exit
2626   1408             _if77_exit:
2627   1408             ; if(toktype == INTEGER_CONST || label_exists(token) != -1){ 
2628   1408             _if78_cond:
2629   1408 3B 7D 4E      mov d, _toktype ; $toktype
2630   140B 2A            mov b, [d]
2631   140C 38 00 00      mov c, 0
2632   140F             ; --- START RELATIONAL
2633   140F D7            push a
2634   1410 11            mov a, b
2635   1411 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2635   1415 00 00 
2636   1417 B0            cmp a, b
2637   1418 FD 71         seq ; ==
2638   141A E4            pop a
2639   141B             ; --- END RELATIONAL
2640   141B             ; --- START LOGICAL OR
2641   141B D7            push a
2642   141C 11            mov a, b
2643   141D             ; --- START FUNCTION CALL
2644   141D 3B 81 4E      mov d, _token_data ; $token
2645   1420 2D            mov b, d
2646   1421 38 00 00      mov c, 0
2647   1424 FD AB         swp b
2648   1426 D8            push b
2649   1427 07 69 23      call label_exists
2650   142A 51 02 00      add sp, 2
2651   142D             ; --- END FUNCTION CALL
2652   142D             ; --- START RELATIONAL
2653   142D D7            push a
2654   142E 11            mov a, b
2655   142F FD 2E FF FF   mov32 cb, $ffffffff
2655   1433 FF FF 
2656   1435 B0            cmp a, b
2657   1436 FD 72         sneq ; !=
2658   1438 E4            pop a
2659   1439             ; --- END RELATIONAL
2660   1439 FD A8         sor a, b ; ||
2661   143B E4            pop a
2662   143C             ; --- END LOGICAL OR
2663   143C C0 00 00      cmp b, 0
2664   143F C6 55 14      je _if78_exit
2665   1442             _if78_TRUE:
2666   1442             ; has_operands = 1; 
2667   1442 FA 77 FF      lea d, [bp + -137] ; $has_operands
2668   1445 DA            push d
2669   1446 FD 2E 01 00   mov32 cb, $00000001
2669   144A 00 00 
2670   144C E7            pop d
2671   144D FD 3E         mov [d], bl
2672   144F             ; break; 
2673   144F 0A 58 14      jmp _for76_exit ; for break
2674   1452 0A 55 14      jmp _if78_exit
2675   1455             _if78_exit:
2676   1455             _for76_update:
2677   1455 0A E6 13      jmp _for76_cond
2678   1458             _for76_exit:
2679   1458             ; opcode[0] = '\0'; 
2680   1458 FA E1 FF      lea d, [bp + -31] ; $opcode
2681   145B D7            push a
2682   145C DA            push d
2683   145D FD 2E 00 00   mov32 cb, $00000000
2683   1461 00 00 
2684   1463 E7            pop d
2685   1464 5A            add d, b
2686   1465 E4            pop a
2687   1466 DA            push d
2688   1467 FD 2E 00 00   mov32 cb, $00000000
2688   146B 00 00 
2689   146D E7            pop d
2690   146E FD 3E         mov [d], bl
2691   1470             ; prog = code_line; 
2692   1470 3B 7F 4E      mov d, _prog ; $prog
2693   1473 DA            push d
2694   1474 FA A1 FF      lea d, [bp + -95] ; $code_line
2695   1477 2D            mov b, d
2696   1478 38 00 00      mov c, 0
2697   147B E7            pop d
2698   147C FD 43         mov [d], b
2699   147E             ; if(!has_operands){ 
2700   147E             _if79_cond:
2701   147E FA 77 FF      lea d, [bp + -137] ; $has_operands
2702   1481 32            mov bl, [d]
2703   1482 A7 00         mov bh, 0
2704   1484 38 00 00      mov c, 0
2705   1487 C0 00 00      cmp b, 0
2706   148A C6 11 16      je _if79_else
2707   148D             _if79_TRUE:
2708   148D             ; get(); 
2709   148D             ; --- START FUNCTION CALL
2710   148D 07 6C 2B      call get
2711   1490             ; strcpy(opcode, token); 
2712   1490             ; --- START FUNCTION CALL
2713   1490 3B 81 4E      mov d, _token_data ; $token
2714   1493 2D            mov b, d
2715   1494 38 00 00      mov c, 0
2716   1497 FD AB         swp b
2717   1499 D8            push b
2718   149A FA E1 FF      lea d, [bp + -31] ; $opcode
2719   149D 2D            mov b, d
2720   149E 38 00 00      mov c, 0
2721   14A1 FD AB         swp b
2722   14A3 D8            push b
2723   14A4 07 9F 4B      call strcpy
2724   14A7 51 04 00      add sp, 4
2725   14AA             ; --- END FUNCTION CALL
2726   14AA             ; get();  
2727   14AA             ; --- START FUNCTION CALL
2728   14AA 07 6C 2B      call get
2729   14AD             ; if(toktype == END){ 
2730   14AD             _if80_cond:
2731   14AD 3B 7D 4E      mov d, _toktype ; $toktype
2732   14B0 2A            mov b, [d]
2733   14B1 38 00 00      mov c, 0
2734   14B4             ; --- START RELATIONAL
2735   14B4 D7            push a
2736   14B5 11            mov a, b
2737   14B6 FD 2E 07 00   mov32 cb, $7 ; enum element: END
2737   14BA 00 00 
2738   14BC B0            cmp a, b
2739   14BD FD 71         seq ; ==
2740   14BF E4            pop a
2741   14C0             ; --- END RELATIONAL
2742   14C0 C0 00 00      cmp b, 0
2743   14C3 C6 DF 14      je _if80_else
2744   14C6             _if80_TRUE:
2745   14C6             ; strcat(opcode, " ."); 
2746   14C6             ; --- START FUNCTION CALL
2747   14C6 26 EB 50      mov b, _s25 ; " ."
2748   14C9 FD AB         swp b
2749   14CB D8            push b
2750   14CC FA E1 FF      lea d, [bp + -31] ; $opcode
2751   14CF 2D            mov b, d
2752   14D0 38 00 00      mov c, 0
2753   14D3 FD AB         swp b
2754   14D5 D8            push b
2755   14D6 07 19 4C      call strcat
2756   14D9 51 04 00      add sp, 4
2757   14DC             ; --- END FUNCTION CALL
2758   14DC 0A 4E 15      jmp _if80_exit
2759   14DF             _if80_else:
2760   14DF             ; strcat(opcode, " "); 
2761   14DF             ; --- START FUNCTION CALL
2762   14DF 26 EE 50      mov b, _s26 ; " "
2763   14E2 FD AB         swp b
2764   14E4 D8            push b
2765   14E5 FA E1 FF      lea d, [bp + -31] ; $opcode
2766   14E8 2D            mov b, d
2767   14E9 38 00 00      mov c, 0
2768   14EC FD AB         swp b
2769   14EE D8            push b
2770   14EF 07 19 4C      call strcat
2771   14F2 51 04 00      add sp, 4
2772   14F5             ; --- END FUNCTION CALL
2773   14F5             ; strcat(opcode, token); 
2774   14F5             ; --- START FUNCTION CALL
2775   14F5 3B 81 4E      mov d, _token_data ; $token
2776   14F8 2D            mov b, d
2777   14F9 38 00 00      mov c, 0
2778   14FC FD AB         swp b
2779   14FE D8            push b
2780   14FF FA E1 FF      lea d, [bp + -31] ; $opcode
2781   1502 2D            mov b, d
2782   1503 38 00 00      mov c, 0
2783   1506 FD AB         swp b
2784   1508 D8            push b
2785   1509 07 19 4C      call strcat
2786   150C 51 04 00      add sp, 4
2787   150F             ; --- END FUNCTION CALL
2788   150F             ; for(;;){ 
2789   150F             _for81_init:
2790   150F             _for81_cond:
2791   150F             _for81_block:
2792   150F             ; get(); 
2793   150F             ; --- START FUNCTION CALL
2794   150F 07 6C 2B      call get
2795   1512             ; if(toktype == END) break; 
2796   1512             _if82_cond:
2797   1512 3B 7D 4E      mov d, _toktype ; $toktype
2798   1515 2A            mov b, [d]
2799   1516 38 00 00      mov c, 0
2800   1519             ; --- START RELATIONAL
2801   1519 D7            push a
2802   151A 11            mov a, b
2803   151B FD 2E 07 00   mov32 cb, $7 ; enum element: END
2803   151F 00 00 
2804   1521 B0            cmp a, b
2805   1522 FD 71         seq ; ==
2806   1524 E4            pop a
2807   1525             ; --- END RELATIONAL
2808   1525 C0 00 00      cmp b, 0
2809   1528 C6 31 15      je _if82_exit
2810   152B             _if82_TRUE:
2811   152B             ; break; 
2812   152B 0A 4E 15      jmp _for81_exit ; for break
2813   152E 0A 31 15      jmp _if82_exit
2814   1531             _if82_exit:
2815   1531             ; strcat(opcode, token); 
2816   1531             ; --- START FUNCTION CALL
2817   1531 3B 81 4E      mov d, _token_data ; $token
2818   1534 2D            mov b, d
2819   1535 38 00 00      mov c, 0
2820   1538 FD AB         swp b
2821   153A D8            push b
2822   153B FA E1 FF      lea d, [bp + -31] ; $opcode
2823   153E 2D            mov b, d
2824   153F 38 00 00      mov c, 0
2825   1542 FD AB         swp b
2826   1544 D8            push b
2827   1545 07 19 4C      call strcat
2828   1548 51 04 00      add sp, 4
2829   154B             ; --- END FUNCTION CALL
2830   154B             _for81_update:
2831   154B 0A 0F 15      jmp _for81_cond
2832   154E             _for81_exit:
2833   154E             _if80_exit:
2834   154E             ; op = search_opcode(opcode); 
2835   154E FA 87 FF      lea d, [bp + -121] ; $op
2836   1551 DA            push d
2837   1552             ; --- START FUNCTION CALL
2838   1552 FA E1 FF      lea d, [bp + -31] ; $opcode
2839   1555 2D            mov b, d
2840   1556 38 00 00      mov c, 0
2841   1559 FD AB         swp b
2842   155B D8            push b
2843   155C 07 EE 23      call search_opcode
2844   155F 51 02 00      add sp, 2
2845   1562             ; --- END FUNCTION CALL
2846   1562 E7            pop d
2847   1563 FD 28         mov si, b
2848   1565 FD 50         mov di, d
2849   1567 38 1A 00      mov c, 26
2850   156A FD F5         rep movsb
2851   156C             ; instr_len = 1; 
2852   156C FA 85 FF      lea d, [bp + -123] ; $instr_len
2853   156F DA            push d
2854   1570 FD 2E 01 00   mov32 cb, $00000001
2854   1574 00 00 
2855   1576 E7            pop d
2856   1577 FD 43         mov [d], b
2857   1579             ; if(op.opcode_type){ 
2858   1579             _if83_cond:
2859   1579 FA 87 FF      lea d, [bp + -121] ; $op
2860   157C 58 19 00      add d, 25
2861   157F 32            mov bl, [d]
2862   1580 A7 00         mov bh, 0
2863   1582 38 00 00      mov c, 0
2864   1585 C0 00 00      cmp b, 0
2865   1588 C6 B5 15      je _if83_exit
2866   158B             _if83_TRUE:
2867   158B             ; instr_len++; 
2868   158B FA 85 FF      lea d, [bp + -123] ; $instr_len
2869   158E 2A            mov b, [d]
2870   158F 38 00 00      mov c, 0
2871   1592 11            mov a, b
2872   1593 FD 77         inc b
2873   1595 FA 85 FF      lea d, [bp + -123] ; $instr_len
2874   1598 FD 43         mov [d], b
2875   159A 27            mov b, a
2876   159B             ; emit_byte(0xFD, emit_override); 
2877   159B             ; --- START FUNCTION CALL
2878   159B FA 05 00      lea d, [bp + 5] ; $emit_override
2879   159E 32            mov bl, [d]
2880   159F A7 00         mov bh, 0
2881   15A1 38 00 00      mov c, 0
2882   15A4 DD            push bl
2883   15A5 FD 2E FD 00   mov32 cb, $000000fd
2883   15A9 00 00 
2884   15AB DD            push bl
2885   15AC 07 71 27      call emit_byte
2886   15AF 51 02 00      add sp, 2
2887   15B2             ; --- END FUNCTION CALL
2888   15B2 0A B5 15      jmp _if83_exit
2889   15B5             _if83_exit:
2890   15B5             ; emit_byte(op.opcode, emit_override); 
2891   15B5             ; --- START FUNCTION CALL
2892   15B5 FA 05 00      lea d, [bp + 5] ; $emit_override
2893   15B8 32            mov bl, [d]
2894   15B9 A7 00         mov bh, 0
2895   15BB 38 00 00      mov c, 0
2896   15BE DD            push bl
2897   15BF FA 87 FF      lea d, [bp + -121] ; $op
2898   15C2 58 18 00      add d, 24
2899   15C5 32            mov bl, [d]
2900   15C6 A7 00         mov bh, 0
2901   15C8 38 00 00      mov c, 0
2902   15CB DD            push bl
2903   15CC 07 71 27      call emit_byte
2904   15CF 51 02 00      add sp, 2
2905   15D2             ; --- END FUNCTION CALL
2906   15D2             ; if(!emit_override){ 
2907   15D2             _if84_cond:
2908   15D2 FA 05 00      lea d, [bp + 5] ; $emit_override
2909   15D5 32            mov bl, [d]
2910   15D6 A7 00         mov bh, 0
2911   15D8 38 00 00      mov c, 0
2912   15DB C0 00 00      cmp b, 0
2913   15DE C6 0E 16      je _if84_exit
2914   15E1             _if84_TRUE:
2915   15E1             ; printf("%x(%d): %s\n", old_pc, instr_len, code_line); 
2916   15E1             ; --- START FUNCTION CALL
2917   15E1 FA A1 FF      lea d, [bp + -95] ; $code_line
2918   15E4 2D            mov b, d
2919   15E5 38 00 00      mov c, 0
2920   15E8 FD AB         swp b
2921   15EA D8            push b
2922   15EB FA 85 FF      lea d, [bp + -123] ; $instr_len
2923   15EE 2A            mov b, [d]
2924   15EF 38 00 00      mov c, 0
2925   15F2 FD AB         swp b
2926   15F4 D8            push b
2927   15F5 FA 78 FF      lea d, [bp + -136] ; $old_pc
2928   15F8 2A            mov b, [d]
2929   15F9 38 00 00      mov c, 0
2930   15FC FD AB         swp b
2931   15FE D8            push b
2932   15FF 26 4E 51      mov b, _s29 ; "%x(%d): %s\n"
2933   1602 FD AB         swp b
2934   1604 D8            push b
2935   1605 07 99 42      call printf
2936   1608 51 08 00      add sp, 8
2937   160B             ; --- END FUNCTION CALL
2938   160B 0A 0E 16      jmp _if84_exit
2939   160E             _if84_exit:
2940   160E 0A 23 1C      jmp _if79_exit
2941   1611             _if79_else:
2942   1611             ; num_operands = 0; 
2943   1611 FA 83 FF      lea d, [bp + -125] ; $num_operands
2944   1614 DA            push d
2945   1615 FD 2E 00 00   mov32 cb, $00000000
2945   1619 00 00 
2946   161B E7            pop d
2947   161C FD 43         mov [d], b
2948   161E             ; for(;;){ 
2949   161E             _for85_init:
2950   161E             _for85_cond:
2951   161E             _for85_block:
2952   161E             ; get(); 
2953   161E             ; --- START FUNCTION CALL
2954   161E 07 6C 2B      call get
2955   1621             ; if(toktype == END) break; 
2956   1621             _if86_cond:
2957   1621 3B 7D 4E      mov d, _toktype ; $toktype
2958   1624 2A            mov b, [d]
2959   1625 38 00 00      mov c, 0
2960   1628             ; --- START RELATIONAL
2961   1628 D7            push a
2962   1629 11            mov a, b
2963   162A FD 2E 07 00   mov32 cb, $7 ; enum element: END
2963   162E 00 00 
2964   1630 B0            cmp a, b
2965   1631 FD 71         seq ; ==
2966   1633 E4            pop a
2967   1634             ; --- END RELATIONAL
2968   1634 C0 00 00      cmp b, 0
2969   1637 C6 40 16      je _if86_exit
2970   163A             _if86_TRUE:
2971   163A             ; break; 
2972   163A 0A 90 16      jmp _for85_exit ; for break
2973   163D 0A 40 16      jmp _if86_exit
2974   1640             _if86_exit:
2975   1640             ; if(toktype == INTEGER_CONST || label_exists(token) != -1) num_operands++; 
2976   1640             _if87_cond:
2977   1640 3B 7D 4E      mov d, _toktype ; $toktype
2978   1643 2A            mov b, [d]
2979   1644 38 00 00      mov c, 0
2980   1647             ; --- START RELATIONAL
2981   1647 D7            push a
2982   1648 11            mov a, b
2983   1649 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2983   164D 00 00 
2984   164F B0            cmp a, b
2985   1650 FD 71         seq ; ==
2986   1652 E4            pop a
2987   1653             ; --- END RELATIONAL
2988   1653             ; --- START LOGICAL OR
2989   1653 D7            push a
2990   1654 11            mov a, b
2991   1655             ; --- START FUNCTION CALL
2992   1655 3B 81 4E      mov d, _token_data ; $token
2993   1658 2D            mov b, d
2994   1659 38 00 00      mov c, 0
2995   165C FD AB         swp b
2996   165E D8            push b
2997   165F 07 69 23      call label_exists
2998   1662 51 02 00      add sp, 2
2999   1665             ; --- END FUNCTION CALL
3000   1665             ; --- START RELATIONAL
3001   1665 D7            push a
3002   1666 11            mov a, b
3003   1667 FD 2E FF FF   mov32 cb, $ffffffff
3003   166B FF FF 
3004   166D B0            cmp a, b
3005   166E FD 72         sneq ; !=
3006   1670 E4            pop a
3007   1671             ; --- END RELATIONAL
3008   1671 FD A8         sor a, b ; ||
3009   1673 E4            pop a
3010   1674             ; --- END LOGICAL OR
3011   1674 C0 00 00      cmp b, 0
3012   1677 C6 8D 16      je _if87_exit
3013   167A             _if87_TRUE:
3014   167A             ; num_operands++; 
3015   167A FA 83 FF      lea d, [bp + -125] ; $num_operands
3016   167D 2A            mov b, [d]
3017   167E 38 00 00      mov c, 0
3018   1681 11            mov a, b
3019   1682 FD 77         inc b
3020   1684 FA 83 FF      lea d, [bp + -125] ; $num_operands
3021   1687 FD 43         mov [d], b
3022   1689 27            mov b, a
3023   168A 0A 8D 16      jmp _if87_exit
3024   168D             _if87_exit:
3025   168D             _for85_update:
3026   168D 0A 1E 16      jmp _for85_cond
3027   1690             _for85_exit:
3028   1690             ; if(num_operands > 2) error("Maximum number of operands per instruction is 2."); 
3029   1690             _if88_cond:
3030   1690 FA 83 FF      lea d, [bp + -125] ; $num_operands
3031   1693 2A            mov b, [d]
3032   1694 38 00 00      mov c, 0
3033   1697             ; --- START RELATIONAL
3034   1697 D7            push a
3035   1698 11            mov a, b
3036   1699 FD 2E 02 00   mov32 cb, $00000002
3036   169D 00 00 
3037   169F B0            cmp a, b
3038   16A0 FD 7F         sgt ; >
3039   16A2 E4            pop a
3040   16A3             ; --- END RELATIONAL
3041   16A3 C0 00 00      cmp b, 0
3042   16A6 C6 B8 16      je _if88_exit
3043   16A9             _if88_TRUE:
3044   16A9             ; error("Maximum number of operands per instruction is 2."); 
3045   16A9             ; --- START FUNCTION CALL
3046   16A9 26 F0 50      mov b, _s27 ; "Maximum number of operands per instruction is 2."
3047   16AC FD AB         swp b
3048   16AE D8            push b
3049   16AF 07 72 39      call error
3050   16B2 51 02 00      add sp, 2
3051   16B5             ; --- END FUNCTION CALL
3052   16B5 0A B8 16      jmp _if88_exit
3053   16B8             _if88_exit:
3054   16B8             ; num_operandsexp = exp(2, num_operands); 
3055   16B8 FA 81 FF      lea d, [bp + -127] ; $num_operandsexp
3056   16BB DA            push d
3057   16BC             ; --- START FUNCTION CALL
3058   16BC FA 83 FF      lea d, [bp + -125] ; $num_operands
3059   16BF 2A            mov b, [d]
3060   16C0 38 00 00      mov c, 0
3061   16C3 FD AB         swp b
3062   16C5 D8            push b
3063   16C6 FD 2E 02 00   mov32 cb, $00000002
3063   16CA 00 00 
3064   16CC FD AB         swp b
3065   16CE D8            push b
3066   16CF 07 BC 3D      call exp
3067   16D2 51 04 00      add sp, 4
3068   16D5             ; --- END FUNCTION CALL
3069   16D5 E7            pop d
3070   16D6 FD 43         mov [d], b
3071   16D8             ; for(i = 0; i < num_operandsexp; i++){ 
3072   16D8             _for89_init:
3073   16D8 FA 7F FF      lea d, [bp + -129] ; $i
3074   16DB DA            push d
3075   16DC FD 2E 00 00   mov32 cb, $00000000
3075   16E0 00 00 
3076   16E2 E7            pop d
3077   16E3 FD 43         mov [d], b
3078   16E5             _for89_cond:
3079   16E5 FA 7F FF      lea d, [bp + -129] ; $i
3080   16E8 2A            mov b, [d]
3081   16E9 38 00 00      mov c, 0
3082   16EC             ; --- START RELATIONAL
3083   16EC D7            push a
3084   16ED 11            mov a, b
3085   16EE FA 81 FF      lea d, [bp + -127] ; $num_operandsexp
3086   16F1 2A            mov b, [d]
3087   16F2 38 00 00      mov c, 0
3088   16F5 B0            cmp a, b
3089   16F6 FD 73         slt ; < (signed)
3090   16F8 E4            pop a
3091   16F9             ; --- END RELATIONAL
3092   16F9 C0 00 00      cmp b, 0
3093   16FC C6 23 1C      je _for89_exit
3094   16FF             _for89_block:
3095   16FF             ; prog = code_line; 
3096   16FF 3B 7F 4E      mov d, _prog ; $prog
3097   1702 DA            push d
3098   1703 FA A1 FF      lea d, [bp + -95] ; $code_line
3099   1706 2D            mov b, d
3100   1707 38 00 00      mov c, 0
3101   170A E7            pop d
3102   170B FD 43         mov [d], b
3103   170D             ; get(); 
3104   170D             ; --- START FUNCTION CALL
3105   170D 07 6C 2B      call get
3106   1710             ; strcpy(opcode, token); 
3107   1710             ; --- START FUNCTION CALL
3108   1710 3B 81 4E      mov d, _token_data ; $token
3109   1713 2D            mov b, d
3110   1714 38 00 00      mov c, 0
3111   1717 FD AB         swp b
3112   1719 D8            push b
3113   171A FA E1 FF      lea d, [bp + -31] ; $opcode
3114   171D 2D            mov b, d
3115   171E 38 00 00      mov c, 0
3116   1721 FD AB         swp b
3117   1723 D8            push b
3118   1724 07 9F 4B      call strcpy
3119   1727 51 04 00      add sp, 4
3120   172A             ; --- END FUNCTION CALL
3121   172A             ; strcat(opcode, " "); 
3122   172A             ; --- START FUNCTION CALL
3123   172A 26 EE 50      mov b, _s26 ; " "
3124   172D FD AB         swp b
3125   172F D8            push b
3126   1730 FA E1 FF      lea d, [bp + -31] ; $opcode
3127   1733 2D            mov b, d
3128   1734 38 00 00      mov c, 0
3129   1737 FD AB         swp b
3130   1739 D8            push b
3131   173A 07 19 4C      call strcat
3132   173D 51 04 00      add sp, 4
3133   1740             ; --- END FUNCTION CALL
3134   1740             ; j = 0; 
3135   1740 FA 7D FF      lea d, [bp + -131] ; $j
3136   1743 DA            push d
3137   1744 FD 2E 00 00   mov32 cb, $00000000
3137   1748 00 00 
3138   174A E7            pop d
3139   174B FD 43         mov [d], b
3140   174D             ; for(;;){ 
3141   174D             _for90_init:
3142   174D             _for90_cond:
3143   174D             _for90_block:
3144   174D             ; get(); 
3145   174D             ; --- START FUNCTION CALL
3146   174D 07 6C 2B      call get
3147   1750             ; if(toktype == END) break; 
3148   1750             _if91_cond:
3149   1750 3B 7D 4E      mov d, _toktype ; $toktype
3150   1753 2A            mov b, [d]
3151   1754 38 00 00      mov c, 0
3152   1757             ; --- START RELATIONAL
3153   1757 D7            push a
3154   1758 11            mov a, b
3155   1759 FD 2E 07 00   mov32 cb, $7 ; enum element: END
3155   175D 00 00 
3156   175F B0            cmp a, b
3157   1760 FD 71         seq ; ==
3158   1762 E4            pop a
3159   1763             ; --- END RELATIONAL
3160   1763 C0 00 00      cmp b, 0
3161   1766 C6 6F 17      je _if91_exit
3162   1769             _if91_TRUE:
3163   1769             ; break; 
3164   1769 0A E6 18      jmp _for90_exit ; for break
3165   176C 0A 6F 17      jmp _if91_exit
3166   176F             _if91_exit:
3167   176F             ; if(toktype == INTEGER_CONST || label_exists(token) != -1){ 
3168   176F             _if92_cond:
3169   176F 3B 7D 4E      mov d, _toktype ; $toktype
3170   1772 2A            mov b, [d]
3171   1773 38 00 00      mov c, 0
3172   1776             ; --- START RELATIONAL
3173   1776 D7            push a
3174   1777 11            mov a, b
3175   1778 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
3175   177C 00 00 
3176   177E B0            cmp a, b
3177   177F FD 71         seq ; ==
3178   1781 E4            pop a
3179   1782             ; --- END RELATIONAL
3180   1782             ; --- START LOGICAL OR
3181   1782 D7            push a
3182   1783 11            mov a, b
3183   1784             ; --- START FUNCTION CALL
3184   1784 3B 81 4E      mov d, _token_data ; $token
3185   1787 2D            mov b, d
3186   1788 38 00 00      mov c, 0
3187   178B FD AB         swp b
3188   178D D8            push b
3189   178E 07 69 23      call label_exists
3190   1791 51 02 00      add sp, 2
3191   1794             ; --- END FUNCTION CALL
3192   1794             ; --- START RELATIONAL
3193   1794 D7            push a
3194   1795 11            mov a, b
3195   1796 FD 2E FF FF   mov32 cb, $ffffffff
3195   179A FF FF 
3196   179C B0            cmp a, b
3197   179D FD 72         sneq ; !=
3198   179F E4            pop a
3199   17A0             ; --- END RELATIONAL
3200   17A0 FD A8         sor a, b ; ||
3201   17A2 E4            pop a
3202   17A3             ; --- END LOGICAL OR
3203   17A3 C0 00 00      cmp b, 0
3204   17A6 C6 C9 18      je _if92_else
3205   17A9             _if92_TRUE:
3206   17A9             ; strcat(opcode, symbols[i*2+j]); 
3207   17A9             ; --- START FUNCTION CALL
3208   17A9 3B E3 4F      mov d, _symbols_data ; $symbols
3209   17AC D7            push a
3210   17AD DA            push d
3211   17AE FA 7F FF      lea d, [bp + -129] ; $i
3212   17B1 2A            mov b, [d]
3213   17B2 38 00 00      mov c, 0
3214   17B5             ; --- START FACTORS
3215   17B5 D7            push a
3216   17B6 FD D8         push g
3217   17B8 11            mov a, b
3218   17B9 FD 7A         mov g, c
3219   17BB FD 2E 02 00   mov32 cb, $00000002
3219   17BF 00 00 
3220   17C1 D7            push a     ; save left operand
3221   17C2 8E            xor a, b   ; xor sign bits
3222   17C3 FD AA         swp a      ; swap bytes
3223   17C5 83            mov cl, al ; save result of xor into 'dl'
3224   17C6 E4            pop a      ; restore left side operator
3225   17C7 DF            push cl    ; save result of xor above
3226   17C8 FD AA         swp a  
3227   17CA 93 80         test al, $80  
3228   17CC FD AA         swp a  
3229   17CE C6 D3 17      jz skip_invert_a_100  
3230   17D1 FD 95         neg a 
3231   17D3             skip_invert_a_100:   
3232   17D3 FD AB         swp b
3233   17D5 FD 93 80      test bl, $80  
3234   17D8 FD AB         swp b
3235   17DA C6 DF 17      jz skip_invert_b_100  
3236   17DD FD 97         neg b 
3237   17DF             skip_invert_b_100:   
3238   17DF AC            mul a, b ; *
3239   17E0 FD 78         mov g, a
3240   17E2 11            mov a, b
3241   17E3 EA            pop bl
3242   17E4 FD 93 80      test bl, $80
3243   17E7 C6 F4 17      jz _same_signs_100
3244   17EA 2F            mov bl, al
3245   17EB 95            not a
3246   17EC FD 97         neg b
3247   17EE 5B 00 00      adc a, 0
3248   17F1 FD 78         mov g, a
3249   17F3 11            mov a, b
3250   17F4             _same_signs_100:
3251   17F4 FD 38         mov c, g
3252   17F6 27            mov b, a
3253   17F7 FD F1         pop g
3254   17F9 E4            pop a
3255   17FA             ; --- END FACTORS
3256   17FA             ; --- START TERMS
3257   17FA D7            push a
3258   17FB FD D8         push g
3259   17FD 11            mov a, b
3260   17FE FD 7A         mov g, c
3261   1800 FA 7D FF      lea d, [bp + -131] ; $j
3262   1803 2A            mov b, [d]
3263   1804 38 00 00      mov c, 0
3264   1807 38 00 00      mov c, 0
3265   180A FD 15         add32 cb, ga
3266   180C FD F1         pop g
3267   180E E4            pop a
3268   180F             ; --- END TERMS
3269   180F E7            pop d
3270   1810 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3271   1814 E4            pop a
3272   1815 2A            mov b, [d]
3273   1816 38 00 00      mov c, 0
3274   1819 FD AB         swp b
3275   181B D8            push b
3276   181C FA E1 FF      lea d, [bp + -31] ; $opcode
3277   181F 2D            mov b, d
3278   1820 38 00 00      mov c, 0
3279   1823 FD AB         swp b
3280   1825 D8            push b
3281   1826 07 19 4C      call strcat
3282   1829 51 04 00      add sp, 4
3283   182C             ; --- END FUNCTION CALL
3284   182C             ; operand_types[j] = *symbols[i*2+j]; 
3285   182C FA 7A FF      lea d, [bp + -134] ; $operand_types
3286   182F D7            push a
3287   1830 DA            push d
3288   1831 FA 7D FF      lea d, [bp + -131] ; $j
3289   1834 2A            mov b, [d]
3290   1835 38 00 00      mov c, 0
3291   1838 E7            pop d
3292   1839 5A            add d, b
3293   183A E4            pop a
3294   183B DA            push d
3295   183C 3B E3 4F      mov d, _symbols_data ; $symbols
3296   183F D7            push a
3297   1840 DA            push d
3298   1841 FA 7F FF      lea d, [bp + -129] ; $i
3299   1844 2A            mov b, [d]
3300   1845 38 00 00      mov c, 0
3301   1848             ; --- START FACTORS
3302   1848 D7            push a
3303   1849 FD D8         push g
3304   184B 11            mov a, b
3305   184C FD 7A         mov g, c
3306   184E FD 2E 02 00   mov32 cb, $00000002
3306   1852 00 00 
3307   1854 D7            push a     ; save left operand
3308   1855 8E            xor a, b   ; xor sign bits
3309   1856 FD AA         swp a      ; swap bytes
3310   1858 83            mov cl, al ; save result of xor into 'dl'
3311   1859 E4            pop a      ; restore left side operator
3312   185A DF            push cl    ; save result of xor above
3313   185B FD AA         swp a  
3314   185D 93 80         test al, $80  
3315   185F FD AA         swp a  
3316   1861 C6 66 18      jz skip_invert_a_104  
3317   1864 FD 95         neg a 
3318   1866             skip_invert_a_104:   
3319   1866 FD AB         swp b
3320   1868 FD 93 80      test bl, $80  
3321   186B FD AB         swp b
3322   186D C6 72 18      jz skip_invert_b_104  
3323   1870 FD 97         neg b 
3324   1872             skip_invert_b_104:   
3325   1872 AC            mul a, b ; *
3326   1873 FD 78         mov g, a
3327   1875 11            mov a, b
3328   1876 EA            pop bl
3329   1877 FD 93 80      test bl, $80
3330   187A C6 87 18      jz _same_signs_104
3331   187D 2F            mov bl, al
3332   187E 95            not a
3333   187F FD 97         neg b
3334   1881 5B 00 00      adc a, 0
3335   1884 FD 78         mov g, a
3336   1886 11            mov a, b
3337   1887             _same_signs_104:
3338   1887 FD 38         mov c, g
3339   1889 27            mov b, a
3340   188A FD F1         pop g
3341   188C E4            pop a
3342   188D             ; --- END FACTORS
3343   188D             ; --- START TERMS
3344   188D D7            push a
3345   188E FD D8         push g
3346   1890 11            mov a, b
3347   1891 FD 7A         mov g, c
3348   1893 FA 7D FF      lea d, [bp + -131] ; $j
3349   1896 2A            mov b, [d]
3350   1897 38 00 00      mov c, 0
3351   189A 38 00 00      mov c, 0
3352   189D FD 15         add32 cb, ga
3353   189F FD F1         pop g
3354   18A1 E4            pop a
3355   18A2             ; --- END TERMS
3356   18A2 E7            pop d
3357   18A3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3358   18A7 E4            pop a
3359   18A8 2A            mov b, [d]
3360   18A9 38 00 00      mov c, 0
3361   18AC 74            mov d, b
3362   18AD 32            mov bl, [d]
3363   18AE A7 00         mov bh, 0
3364   18B0 38 00 00      mov c, 0
3365   18B3 E7            pop d
3366   18B4 FD 3E         mov [d], bl
3367   18B6             ; j++; 
3368   18B6 FA 7D FF      lea d, [bp + -131] ; $j
3369   18B9 2A            mov b, [d]
3370   18BA 38 00 00      mov c, 0
3371   18BD 11            mov a, b
3372   18BE FD 77         inc b
3373   18C0 FA 7D FF      lea d, [bp + -131] ; $j
3374   18C3 FD 43         mov [d], b
3375   18C5 27            mov b, a
3376   18C6 0A E3 18      jmp _if92_exit
3377   18C9             _if92_else:
3378   18C9             ; strcat(opcode, token); 
3379   18C9             ; --- START FUNCTION CALL
3380   18C9 3B 81 4E      mov d, _token_data ; $token
3381   18CC 2D            mov b, d
3382   18CD 38 00 00      mov c, 0
3383   18D0 FD AB         swp b
3384   18D2 D8            push b
3385   18D3 FA E1 FF      lea d, [bp + -31] ; $opcode
3386   18D6 2D            mov b, d
3387   18D7 38 00 00      mov c, 0
3388   18DA FD AB         swp b
3389   18DC D8            push b
3390   18DD 07 19 4C      call strcat
3391   18E0 51 04 00      add sp, 4
3392   18E3             ; --- END FUNCTION CALL
3393   18E3             _if92_exit:
3394   18E3             _for90_update:
3395   18E3 0A 4D 17      jmp _for90_cond
3396   18E6             _for90_exit:
3397   18E6             ; op = search_opcode(opcode); 
3398   18E6 FA 87 FF      lea d, [bp + -121] ; $op
3399   18E9 DA            push d
3400   18EA             ; --- START FUNCTION CALL
3401   18EA FA E1 FF      lea d, [bp + -31] ; $opcode
3402   18ED 2D            mov b, d
3403   18EE 38 00 00      mov c, 0
3404   18F1 FD AB         swp b
3405   18F3 D8            push b
3406   18F4 07 EE 23      call search_opcode
3407   18F7 51 02 00      add sp, 2
3408   18FA             ; --- END FUNCTION CALL
3409   18FA E7            pop d
3410   18FB FD 28         mov si, b
3411   18FD FD 50         mov di, d
3412   18FF 38 1A 00      mov c, 26
3413   1902 FD F5         rep movsb
3414   1904             ; if(op.name[0] == '\0') continue; 
3415   1904             _if105_cond:
3416   1904 FA 87 FF      lea d, [bp + -121] ; $op
3417   1907 58 00 00      add d, 0
3418   190A D7            push a
3419   190B DA            push d
3420   190C FD 2E 00 00   mov32 cb, $00000000
3420   1910 00 00 
3421   1912 E7            pop d
3422   1913 5A            add d, b
3423   1914 E4            pop a
3424   1915 32            mov bl, [d]
3425   1916 A7 00         mov bh, 0
3426   1918 38 00 00      mov c, 0
3427   191B             ; --- START RELATIONAL
3428   191B D7            push a
3429   191C 11            mov a, b
3430   191D FD 2E 00 00   mov32 cb, $00000000
3430   1921 00 00 
3431   1923 B0            cmp a, b
3432   1924 FD 71         seq ; ==
3433   1926 E4            pop a
3434   1927             ; --- END RELATIONAL
3435   1927 C0 00 00      cmp b, 0
3436   192A C6 33 19      je _if105_exit
3437   192D             _if105_TRUE:
3438   192D             ; continue; 
3439   192D 0A 10 1C      jmp _for89_update ; for continue
3440   1930 0A 33 19      jmp _if105_exit
3441   1933             _if105_exit:
3442   1933             ; instr_len = 1; 
3443   1933 FA 85 FF      lea d, [bp + -123] ; $instr_len
3444   1936 DA            push d
3445   1937 FD 2E 01 00   mov32 cb, $00000001
3445   193B 00 00 
3446   193D E7            pop d
3447   193E FD 43         mov [d], b
3448   1940             ; if(op.opcode_type){ 
3449   1940             _if106_cond:
3450   1940 FA 87 FF      lea d, [bp + -121] ; $op
3451   1943 58 19 00      add d, 25
3452   1946 32            mov bl, [d]
3453   1947 A7 00         mov bh, 0
3454   1949 38 00 00      mov c, 0
3455   194C C0 00 00      cmp b, 0
3456   194F C6 7C 19      je _if106_exit
3457   1952             _if106_TRUE:
3458   1952             ; emit_byte(0xFD, emit_override); 
3459   1952             ; --- START FUNCTION CALL
3460   1952 FA 05 00      lea d, [bp + 5] ; $emit_override
3461   1955 32            mov bl, [d]
3462   1956 A7 00         mov bh, 0
3463   1958 38 00 00      mov c, 0
3464   195B DD            push bl
3465   195C FD 2E FD 00   mov32 cb, $000000fd
3465   1960 00 00 
3466   1962 DD            push bl
3467   1963 07 71 27      call emit_byte
3468   1966 51 02 00      add sp, 2
3469   1969             ; --- END FUNCTION CALL
3470   1969             ; instr_len++; 
3471   1969 FA 85 FF      lea d, [bp + -123] ; $instr_len
3472   196C 2A            mov b, [d]
3473   196D 38 00 00      mov c, 0
3474   1970 11            mov a, b
3475   1971 FD 77         inc b
3476   1973 FA 85 FF      lea d, [bp + -123] ; $instr_len
3477   1976 FD 43         mov [d], b
3478   1978 27            mov b, a
3479   1979 0A 7C 19      jmp _if106_exit
3480   197C             _if106_exit:
3481   197C             ; emit_byte(op.opcode, emit_override); 
3482   197C             ; --- START FUNCTION CALL
3483   197C FA 05 00      lea d, [bp + 5] ; $emit_override
3484   197F 32            mov bl, [d]
3485   1980 A7 00         mov bh, 0
3486   1982 38 00 00      mov c, 0
3487   1985 DD            push bl
3488   1986 FA 87 FF      lea d, [bp + -121] ; $op
3489   1989 58 18 00      add d, 24
3490   198C 32            mov bl, [d]
3491   198D A7 00         mov bh, 0
3492   198F 38 00 00      mov c, 0
3493   1992 DD            push bl
3494   1993 07 71 27      call emit_byte
3495   1996 51 02 00      add sp, 2
3496   1999             ; --- END FUNCTION CALL
3497   1999             ; prog = code_line; 
3498   1999 3B 7F 4E      mov d, _prog ; $prog
3499   199C DA            push d
3500   199D FA A1 FF      lea d, [bp + -95] ; $code_line
3501   19A0 2D            mov b, d
3502   19A1 38 00 00      mov c, 0
3503   19A4 E7            pop d
3504   19A5 FD 43         mov [d], b
3505   19A7             ; j = 0; 
3506   19A7 FA 7D FF      lea d, [bp + -131] ; $j
3507   19AA DA            push d
3508   19AB FD 2E 00 00   mov32 cb, $00000000
3508   19AF 00 00 
3509   19B1 E7            pop d
3510   19B2 FD 43         mov [d], b
3511   19B4             ; get(); 
3512   19B4             ; --- START FUNCTION CALL
3513   19B4 07 6C 2B      call get
3514   19B7             ; for(;;){ 
3515   19B7             _for107_init:
3516   19B7             _for107_cond:
3517   19B7             _for107_block:
3518   19B7             ; get(); 
3519   19B7             ; --- START FUNCTION CALL
3520   19B7 07 6C 2B      call get
3521   19BA             ; if(toktype == END) break; 
3522   19BA             _if108_cond:
3523   19BA 3B 7D 4E      mov d, _toktype ; $toktype
3524   19BD 2A            mov b, [d]
3525   19BE 38 00 00      mov c, 0
3526   19C1             ; --- START RELATIONAL
3527   19C1 D7            push a
3528   19C2 11            mov a, b
3529   19C3 FD 2E 07 00   mov32 cb, $7 ; enum element: END
3529   19C7 00 00 
3530   19C9 B0            cmp a, b
3531   19CA FD 71         seq ; ==
3532   19CC E4            pop a
3533   19CD             ; --- END RELATIONAL
3534   19CD C0 00 00      cmp b, 0
3535   19D0 C6 D9 19      je _if108_exit
3536   19D3             _if108_TRUE:
3537   19D3             ; break; 
3538   19D3 0A D1 1B      jmp _for107_exit ; for break
3539   19D6 0A D9 19      jmp _if108_exit
3540   19D9             _if108_exit:
3541   19D9             ; if(toktype == IDENTIFIER){ 
3542   19D9             _if109_cond:
3543   19D9 3B 7D 4E      mov d, _toktype ; $toktype
3544   19DC 2A            mov b, [d]
3545   19DD 38 00 00      mov c, 0
3546   19E0             ; --- START RELATIONAL
3547   19E0 D7            push a
3548   19E1 11            mov a, b
3549   19E2 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
3549   19E6 00 00 
3550   19E8 B0            cmp a, b
3551   19E9 FD 71         seq ; ==
3552   19EB E4            pop a
3553   19EC             ; --- END RELATIONAL
3554   19EC C0 00 00      cmp b, 0
3555   19EF C6 F4 1A      je _if109_else
3556   19F2             _if109_TRUE:
3557   19F2             ; if(label_exists(token) != -1){ 
3558   19F2             _if110_cond:
3559   19F2             ; --- START FUNCTION CALL
3560   19F2 3B 81 4E      mov d, _token_data ; $token
3561   19F5 2D            mov b, d
3562   19F6 38 00 00      mov c, 0
3563   19F9 FD AB         swp b
3564   19FB D8            push b
3565   19FC 07 69 23      call label_exists
3566   19FF 51 02 00      add sp, 2
3567   1A02             ; --- END FUNCTION CALL
3568   1A02             ; --- START RELATIONAL
3569   1A02 D7            push a
3570   1A03 11            mov a, b
3571   1A04 FD 2E FF FF   mov32 cb, $ffffffff
3571   1A08 FF FF 
3572   1A0A B0            cmp a, b
3573   1A0B FD 72         sneq ; !=
3574   1A0D E4            pop a
3575   1A0E             ; --- END RELATIONAL
3576   1A0E C0 00 00      cmp b, 0
3577   1A11 C6 C2 1A      je _if110_else
3578   1A14             _if110_TRUE:
3579   1A14             ; if(operand_types[j] == '#'){ 
3580   1A14             _if111_cond:
3581   1A14 FA 7A FF      lea d, [bp + -134] ; $operand_types
3582   1A17 D7            push a
3583   1A18 DA            push d
3584   1A19 FA 7D FF      lea d, [bp + -131] ; $j
3585   1A1C 2A            mov b, [d]
3586   1A1D 38 00 00      mov c, 0
3587   1A20 E7            pop d
3588   1A21 5A            add d, b
3589   1A22 E4            pop a
3590   1A23 32            mov bl, [d]
3591   1A24 A7 00         mov bh, 0
3592   1A26 38 00 00      mov c, 0
3593   1A29             ; --- START RELATIONAL
3594   1A29 D7            push a
3595   1A2A 11            mov a, b
3596   1A2B FD 2E 23 00   mov32 cb, $00000023
3596   1A2F 00 00 
3597   1A31 B0            cmp a, b
3598   1A32 FD 71         seq ; ==
3599   1A34 E4            pop a
3600   1A35             ; --- END RELATIONAL
3601   1A35 C0 00 00      cmp b, 0
3602   1A38 C6 4A 1A      je _if111_else
3603   1A3B             _if111_TRUE:
3604   1A3B             ; error("8bit operand expected but 16bit label given."); 
3605   1A3B             ; --- START FUNCTION CALL
3606   1A3B 26 21 51      mov b, _s28 ; "8bit operand expected but 16bit label given."
3607   1A3E FD AB         swp b
3608   1A40 D8            push b
3609   1A41 07 72 39      call error
3610   1A44 51 02 00      add sp, 2
3611   1A47             ; --- END FUNCTION CALL
3612   1A47 0A AF 1A      jmp _if111_exit
3613   1A4A             _if111_else:
3614   1A4A             ; if(operand_types[j] == '@'){ 
3615   1A4A             _if112_cond:
3616   1A4A FA 7A FF      lea d, [bp + -134] ; $operand_types
3617   1A4D D7            push a
3618   1A4E DA            push d
3619   1A4F FA 7D FF      lea d, [bp + -131] ; $j
3620   1A52 2A            mov b, [d]
3621   1A53 38 00 00      mov c, 0
3622   1A56 E7            pop d
3623   1A57 5A            add d, b
3624   1A58 E4            pop a
3625   1A59 32            mov bl, [d]
3626   1A5A A7 00         mov bh, 0
3627   1A5C 38 00 00      mov c, 0
3628   1A5F             ; --- START RELATIONAL
3629   1A5F D7            push a
3630   1A60 11            mov a, b
3631   1A61 FD 2E 40 00   mov32 cb, $00000040
3631   1A65 00 00 
3632   1A67 B0            cmp a, b
3633   1A68 FD 71         seq ; ==
3634   1A6A E4            pop a
3635   1A6B             ; --- END RELATIONAL
3636   1A6B C0 00 00      cmp b, 0
3637   1A6E C6 AF 1A      je _if112_exit
3638   1A71             _if112_TRUE:
3639   1A71             ; emit_word(get_label_addr(token), emit_override); 
3640   1A71             ; --- START FUNCTION CALL
3641   1A71 FA 05 00      lea d, [bp + 5] ; $emit_override
3642   1A74 32            mov bl, [d]
3643   1A75 A7 00         mov bh, 0
3644   1A77 38 00 00      mov c, 0
3645   1A7A DD            push bl
3646   1A7B             ; --- START FUNCTION CALL
3647   1A7B 3B 81 4E      mov d, _token_data ; $token
3648   1A7E 2D            mov b, d
3649   1A7F 38 00 00      mov c, 0
3650   1A82 FD AB         swp b
3651   1A84 D8            push b
3652   1A85 07 C2 22      call get_label_addr
3653   1A88 51 02 00      add sp, 2
3654   1A8B             ; --- END FUNCTION CALL
3655   1A8B FD AB         swp b
3656   1A8D D8            push b
3657   1A8E 07 A9 27      call emit_word
3658   1A91 51 03 00      add sp, 3
3659   1A94             ; --- END FUNCTION CALL
3660   1A94             ; instr_len = instr_len + 2; 
3661   1A94 FA 85 FF      lea d, [bp + -123] ; $instr_len
3662   1A97 DA            push d
3663   1A98 FA 85 FF      lea d, [bp + -123] ; $instr_len
3664   1A9B 2A            mov b, [d]
3665   1A9C 38 00 00      mov c, 0
3666   1A9F             ; --- START TERMS
3667   1A9F D7            push a
3668   1AA0 11            mov a, b
3669   1AA1 FD 2E 02 00   mov32 cb, $00000002
3669   1AA5 00 00 
3670   1AA7 56            add b, a
3671   1AA8 E4            pop a
3672   1AA9             ; --- END TERMS
3673   1AA9 E7            pop d
3674   1AAA FD 43         mov [d], b
3675   1AAC 0A AF 1A      jmp _if112_exit
3676   1AAF             _if112_exit:
3677   1AAF             _if111_exit:
3678   1AAF             ; j++; 
3679   1AAF FA 7D FF      lea d, [bp + -131] ; $j
3680   1AB2 2A            mov b, [d]
3681   1AB3 38 00 00      mov c, 0
3682   1AB6 11            mov a, b
3683   1AB7 FD 77         inc b
3684   1AB9 FA 7D FF      lea d, [bp + -131] ; $j
3685   1ABC FD 43         mov [d], b
3686   1ABE 27            mov b, a
3687   1ABF 0A F1 1A      jmp _if110_exit
3688   1AC2             _if110_else:
3689   1AC2             ; if(!is_reserved(token)){ 
3690   1AC2             _if113_cond:
3691   1AC2             ; --- START FUNCTION CALL
3692   1AC2 3B 81 4E      mov d, _token_data ; $token
3693   1AC5 2D            mov b, d
3694   1AC6 38 00 00      mov c, 0
3695   1AC9 FD AB         swp b
3696   1ACB D8            push b
3697   1ACC 07 10 1F      call is_reserved
3698   1ACF 51 02 00      add sp, 2
3699   1AD2             ; --- END FUNCTION CALL
3700   1AD2 C0 00 00      cmp b, 0
3701   1AD5 C6 F1 1A      je _if113_exit
3702   1AD8             _if113_TRUE:
3703   1AD8             ; error_s("Undeclared label: ", token); 
3704   1AD8             ; --- START FUNCTION CALL
3705   1AD8 3B 81 4E      mov d, _token_data ; $token
3706   1ADB 2D            mov b, d
3707   1ADC 38 00 00      mov c, 0
3708   1ADF FD AB         swp b
3709   1AE1 D8            push b
3710   1AE2 26 5A 51      mov b, _s30 ; "Undeclared label: "
3711   1AE5 FD AB         swp b
3712   1AE7 D8            push b
3713   1AE8 07 9C 39      call error_s
3714   1AEB 51 04 00      add sp, 4
3715   1AEE             ; --- END FUNCTION CALL
3716   1AEE 0A F1 1A      jmp _if113_exit
3717   1AF1             _if113_exit:
3718   1AF1             _if110_exit:
3719   1AF1 0A CE 1B      jmp _if109_exit
3720   1AF4             _if109_else:
3721   1AF4             ; if(toktype == INTEGER_CONST){ 
3722   1AF4             _if114_cond:
3723   1AF4 3B 7D 4E      mov d, _toktype ; $toktype
3724   1AF7 2A            mov b, [d]
3725   1AF8 38 00 00      mov c, 0
3726   1AFB             ; --- START RELATIONAL
3727   1AFB D7            push a
3728   1AFC 11            mov a, b
3729   1AFD FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
3729   1B01 00 00 
3730   1B03 B0            cmp a, b
3731   1B04 FD 71         seq ; ==
3732   1B06 E4            pop a
3733   1B07             ; --- END RELATIONAL
3734   1B07 C0 00 00      cmp b, 0
3735   1B0A C6 CE 1B      je _if114_exit
3736   1B0D             _if114_TRUE:
3737   1B0D             ; if(operand_types[j] == '#'){ 
3738   1B0D             _if115_cond:
3739   1B0D FA 7A FF      lea d, [bp + -134] ; $operand_types
3740   1B10 D7            push a
3741   1B11 DA            push d
3742   1B12 FA 7D FF      lea d, [bp + -131] ; $j
3743   1B15 2A            mov b, [d]
3744   1B16 38 00 00      mov c, 0
3745   1B19 E7            pop d
3746   1B1A 5A            add d, b
3747   1B1B E4            pop a
3748   1B1C 32            mov bl, [d]
3749   1B1D A7 00         mov bh, 0
3750   1B1F 38 00 00      mov c, 0
3751   1B22             ; --- START RELATIONAL
3752   1B22 D7            push a
3753   1B23 11            mov a, b
3754   1B24 FD 2E 23 00   mov32 cb, $00000023
3754   1B28 00 00 
3755   1B2A B0            cmp a, b
3756   1B2B FD 71         seq ; ==
3757   1B2D E4            pop a
3758   1B2E             ; --- END RELATIONAL
3759   1B2E C0 00 00      cmp b, 0
3760   1B31 C6 5F 1B      je _if115_else
3761   1B34             _if115_TRUE:
3762   1B34             ; emit_byte(int_const, emit_override); 
3763   1B34             ; --- START FUNCTION CALL
3764   1B34 FA 05 00      lea d, [bp + 5] ; $emit_override
3765   1B37 32            mov bl, [d]
3766   1B38 A7 00         mov bh, 0
3767   1B3A 38 00 00      mov c, 0
3768   1B3D DD            push bl
3769   1B3E 3B C1 4F      mov d, _int_const ; $int_const
3770   1B41 2A            mov b, [d]
3771   1B42 38 00 00      mov c, 0
3772   1B45 DD            push bl
3773   1B46 07 71 27      call emit_byte
3774   1B49 51 02 00      add sp, 2
3775   1B4C             ; --- END FUNCTION CALL
3776   1B4C             ; instr_len++; 
3777   1B4C FA 85 FF      lea d, [bp + -123] ; $instr_len
3778   1B4F 2A            mov b, [d]
3779   1B50 38 00 00      mov c, 0
3780   1B53 11            mov a, b
3781   1B54 FD 77         inc b
3782   1B56 FA 85 FF      lea d, [bp + -123] ; $instr_len
3783   1B59 FD 43         mov [d], b
3784   1B5B 27            mov b, a
3785   1B5C 0A BB 1B      jmp _if115_exit
3786   1B5F             _if115_else:
3787   1B5F             ; if(operand_types[j] == '@'){ 
3788   1B5F             _if116_cond:
3789   1B5F FA 7A FF      lea d, [bp + -134] ; $operand_types
3790   1B62 D7            push a
3791   1B63 DA            push d
3792   1B64 FA 7D FF      lea d, [bp + -131] ; $j
3793   1B67 2A            mov b, [d]
3794   1B68 38 00 00      mov c, 0
3795   1B6B E7            pop d
3796   1B6C 5A            add d, b
3797   1B6D E4            pop a
3798   1B6E 32            mov bl, [d]
3799   1B6F A7 00         mov bh, 0
3800   1B71 38 00 00      mov c, 0
3801   1B74             ; --- START RELATIONAL
3802   1B74 D7            push a
3803   1B75 11            mov a, b
3804   1B76 FD 2E 40 00   mov32 cb, $00000040
3804   1B7A 00 00 
3805   1B7C B0            cmp a, b
3806   1B7D FD 71         seq ; ==
3807   1B7F E4            pop a
3808   1B80             ; --- END RELATIONAL
3809   1B80 C0 00 00      cmp b, 0
3810   1B83 C6 BB 1B      je _if116_exit
3811   1B86             _if116_TRUE:
3812   1B86             ; emit_word(int_const, emit_override); 
3813   1B86             ; --- START FUNCTION CALL
3814   1B86 FA 05 00      lea d, [bp + 5] ; $emit_override
3815   1B89 32            mov bl, [d]
3816   1B8A A7 00         mov bh, 0
3817   1B8C 38 00 00      mov c, 0
3818   1B8F DD            push bl
3819   1B90 3B C1 4F      mov d, _int_const ; $int_const
3820   1B93 2A            mov b, [d]
3821   1B94 38 00 00      mov c, 0
3822   1B97 FD AB         swp b
3823   1B99 D8            push b
3824   1B9A 07 A9 27      call emit_word
3825   1B9D 51 03 00      add sp, 3
3826   1BA0             ; --- END FUNCTION CALL
3827   1BA0             ; instr_len = instr_len + 2; 
3828   1BA0 FA 85 FF      lea d, [bp + -123] ; $instr_len
3829   1BA3 DA            push d
3830   1BA4 FA 85 FF      lea d, [bp + -123] ; $instr_len
3831   1BA7 2A            mov b, [d]
3832   1BA8 38 00 00      mov c, 0
3833   1BAB             ; --- START TERMS
3834   1BAB D7            push a
3835   1BAC 11            mov a, b
3836   1BAD FD 2E 02 00   mov32 cb, $00000002
3836   1BB1 00 00 
3837   1BB3 56            add b, a
3838   1BB4 E4            pop a
3839   1BB5             ; --- END TERMS
3840   1BB5 E7            pop d
3841   1BB6 FD 43         mov [d], b
3842   1BB8 0A BB 1B      jmp _if116_exit
3843   1BBB             _if116_exit:
3844   1BBB             _if115_exit:
3845   1BBB             ; j++; 
3846   1BBB FA 7D FF      lea d, [bp + -131] ; $j
3847   1BBE 2A            mov b, [d]
3848   1BBF 38 00 00      mov c, 0
3849   1BC2 11            mov a, b
3850   1BC3 FD 77         inc b
3851   1BC5 FA 7D FF      lea d, [bp + -131] ; $j
3852   1BC8 FD 43         mov [d], b
3853   1BCA 27            mov b, a
3854   1BCB 0A CE 1B      jmp _if114_exit
3855   1BCE             _if114_exit:
3856   1BCE             _if109_exit:
3857   1BCE             _for107_update:
3858   1BCE 0A B7 19      jmp _for107_cond
3859   1BD1             _for107_exit:
3860   1BD1             ; if(!emit_override){ 
3861   1BD1             _if117_cond:
3862   1BD1 FA 05 00      lea d, [bp + 5] ; $emit_override
3863   1BD4 32            mov bl, [d]
3864   1BD5 A7 00         mov bh, 0
3865   1BD7 38 00 00      mov c, 0
3866   1BDA C0 00 00      cmp b, 0
3867   1BDD C6 0D 1C      je _if117_exit
3868   1BE0             _if117_TRUE:
3869   1BE0             ; printf("%x(%d): %s\n", old_pc, instr_len, code_line); 
3870   1BE0             ; --- START FUNCTION CALL
3871   1BE0 FA A1 FF      lea d, [bp + -95] ; $code_line
3872   1BE3 2D            mov b, d
3873   1BE4 38 00 00      mov c, 0
3874   1BE7 FD AB         swp b
3875   1BE9 D8            push b
3876   1BEA FA 85 FF      lea d, [bp + -123] ; $instr_len
3877   1BED 2A            mov b, [d]
3878   1BEE 38 00 00      mov c, 0
3879   1BF1 FD AB         swp b
3880   1BF3 D8            push b
3881   1BF4 FA 78 FF      lea d, [bp + -136] ; $old_pc
3882   1BF7 2A            mov b, [d]
3883   1BF8 38 00 00      mov c, 0
3884   1BFB FD AB         swp b
3885   1BFD D8            push b
3886   1BFE 26 4E 51      mov b, _s29 ; "%x(%d): %s\n"
3887   1C01 FD AB         swp b
3888   1C03 D8            push b
3889   1C04 07 99 42      call printf
3890   1C07 51 08 00      add sp, 8
3891   1C0A             ; --- END FUNCTION CALL
3892   1C0A 0A 0D 1C      jmp _if117_exit
3893   1C0D             _if117_exit:
3894   1C0D             ; break; 
3895   1C0D 0A 23 1C      jmp _for89_exit ; for break
3896   1C10             _for89_update:
3897   1C10 FA 7F FF      lea d, [bp + -129] ; $i
3898   1C13 2A            mov b, [d]
3899   1C14 38 00 00      mov c, 0
3900   1C17 11            mov a, b
3901   1C18 FD 77         inc b
3902   1C1A FA 7F FF      lea d, [bp + -129] ; $i
3903   1C1D FD 43         mov [d], b
3904   1C1F 27            mov b, a
3905   1C20 0A E5 16      jmp _for89_cond
3906   1C23             _for89_exit:
3907   1C23             _if79_exit:
3908   1C23             ; pop_prog(); 
3909   1C23             ; --- START FUNCTION CALL
3910   1C23 07 2A 3A      call pop_prog
3911   1C26 F9            leave
3912   1C27 09            ret
3913   1C28             
3914   1C28             parse_text:
3915   1C28 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3916   1C2B             ; char *temp_prog; 
3917   1C2B 52 02 00      sub sp, 2
3918   1C2E             ; print("Parsing TEXT section...\n"); 
3919   1C2E             ; --- START FUNCTION CALL
3920   1C2E 26 6D 51      mov b, _s31 ; "Parsing TEXT section...\n"
3921   1C31 FD AB         swp b
3922   1C33 D8            push b
3923   1C34 07 69 3E      call print
3924   1C37 51 02 00      add sp, 2
3925   1C3A             ; --- END FUNCTION CALL
3926   1C3A             ; prog = program; 
3927   1C3A 3B 7F 4E      mov d, _prog ; $prog
3928   1C3D DA            push d
3929   1C3E 3B C3 4F      mov d, _program ; $program
3930   1C41 2A            mov b, [d]
3931   1C42 38 00 00      mov c, 0
3932   1C45 E7            pop d
3933   1C46 FD 43         mov [d], b
3934   1C48             ; bin_p = bin_out + _org; 
3935   1C48 3B C7 4F      mov d, _bin_p ; $bin_p
3936   1C4B DA            push d
3937   1C4C 3B C5 4F      mov d, _bin_out ; $bin_out
3938   1C4F 2A            mov b, [d]
3939   1C50 38 00 00      mov c, 0
3940   1C53             ; --- START TERMS
3941   1C53 D7            push a
3942   1C54 11            mov a, b
3943   1C55 3B 76 4E      mov d, __org ; $_org
3944   1C58 2A            mov b, [d]
3945   1C59 38 00 00      mov c, 0
3946   1C5C 56            add b, a
3947   1C5D E4            pop a
3948   1C5E             ; --- END TERMS
3949   1C5E E7            pop d
3950   1C5F FD 43         mov [d], b
3951   1C61             ; pc = _org; 
3952   1C61 3B 78 4E      mov d, _pc ; $pc
3953   1C64 DA            push d
3954   1C65 3B 76 4E      mov d, __org ; $_org
3955   1C68 2A            mov b, [d]
3956   1C69 38 00 00      mov c, 0
3957   1C6C E7            pop d
3958   1C6D FD 43         mov [d], b
3959   1C6F             ; for(;;){ 
3960   1C6F             _for118_init:
3961   1C6F             _for118_cond:
3962   1C6F             _for118_block:
3963   1C6F             ; get(); 
3964   1C6F             ; --- START FUNCTION CALL
3965   1C6F 07 6C 2B      call get
3966   1C72             ; if(toktype == END) error("TEXT section not found."); 
3967   1C72             _if119_cond:
3968   1C72 3B 7D 4E      mov d, _toktype ; $toktype
3969   1C75 2A            mov b, [d]
3970   1C76 38 00 00      mov c, 0
3971   1C79             ; --- START RELATIONAL
3972   1C79 D7            push a
3973   1C7A 11            mov a, b
3974   1C7B FD 2E 07 00   mov32 cb, $7 ; enum element: END
3974   1C7F 00 00 
3975   1C81 B0            cmp a, b
3976   1C82 FD 71         seq ; ==
3977   1C84 E4            pop a
3978   1C85             ; --- END RELATIONAL
3979   1C85 C0 00 00      cmp b, 0
3980   1C88 C6 9A 1C      je _if119_exit
3981   1C8B             _if119_TRUE:
3982   1C8B             ; error("TEXT section not found."); 
3983   1C8B             ; --- START FUNCTION CALL
3984   1C8B 26 86 51      mov b, _s32 ; "TEXT section not found."
3985   1C8E FD AB         swp b
3986   1C90 D8            push b
3987   1C91 07 72 39      call error
3988   1C94 51 02 00      add sp, 2
3989   1C97             ; --- END FUNCTION CALL
3990   1C97 0A 9A 1C      jmp _if119_exit
3991   1C9A             _if119_exit:
3992   1C9A             ; if(tok == TEXT){ 
3993   1C9A             _if120_cond:
3994   1C9A 3B 7B 4E      mov d, _tok ; $tok
3995   1C9D 2A            mov b, [d]
3996   1C9E 38 00 00      mov c, 0
3997   1CA1             ; --- START RELATIONAL
3998   1CA1 D7            push a
3999   1CA2 11            mov a, b
4000   1CA3 FD 2E 04 00   mov32 cb, $4 ; enum element: TEXT
4000   1CA7 00 00 
4001   1CA9 B0            cmp a, b
4002   1CAA FD 71         seq ; ==
4003   1CAC E4            pop a
4004   1CAD             ; --- END RELATIONAL
4005   1CAD C0 00 00      cmp b, 0
4006   1CB0 C6 B9 1C      je _if120_exit
4007   1CB3             _if120_TRUE:
4008   1CB3             ; break; 
4009   1CB3 0A BC 1C      jmp _for118_exit ; for break
4010   1CB6 0A B9 1C      jmp _if120_exit
4011   1CB9             _if120_exit:
4012   1CB9             _for118_update:
4013   1CB9 0A 6F 1C      jmp _for118_cond
4014   1CBC             _for118_exit:
4015   1CBC             ; for(;;){ 
4016   1CBC             _for121_init:
4017   1CBC             _for121_cond:
4018   1CBC             _for121_block:
4019   1CBC             ; get(); back(); 
4020   1CBC             ; --- START FUNCTION CALL
4021   1CBC 07 6C 2B      call get
4022   1CBF             ; back(); 
4023   1CBF             ; --- START FUNCTION CALL
4024   1CBF 07 DF 27      call back
4025   1CC2             ; temp_prog = prog; 
4026   1CC2 FA FF FF      lea d, [bp + -1] ; $temp_prog
4027   1CC5 DA            push d
4028   1CC6 3B 7F 4E      mov d, _prog ; $prog
4029   1CC9 2A            mov b, [d]
4030   1CCA 38 00 00      mov c, 0
4031   1CCD E7            pop d
4032   1CCE FD 43         mov [d], b
4033   1CD0             ; get(); 
4034   1CD0             ; --- START FUNCTION CALL
4035   1CD0 07 6C 2B      call get
4036   1CD3             ; if(toktype == END) error("TEXT section end not found."); 
4037   1CD3             _if122_cond:
4038   1CD3 3B 7D 4E      mov d, _toktype ; $toktype
4039   1CD6 2A            mov b, [d]
4040   1CD7 38 00 00      mov c, 0
4041   1CDA             ; --- START RELATIONAL
4042   1CDA D7            push a
4043   1CDB 11            mov a, b
4044   1CDC FD 2E 07 00   mov32 cb, $7 ; enum element: END
4044   1CE0 00 00 
4045   1CE2 B0            cmp a, b
4046   1CE3 FD 71         seq ; ==
4047   1CE5 E4            pop a
4048   1CE6             ; --- END RELATIONAL
4049   1CE6 C0 00 00      cmp b, 0
4050   1CE9 C6 FB 1C      je _if122_exit
4051   1CEC             _if122_TRUE:
4052   1CEC             ; error("TEXT section end not found."); 
4053   1CEC             ; --- START FUNCTION CALL
4054   1CEC 26 9E 51      mov b, _s33 ; "TEXT section end not found."
4055   1CEF FD AB         swp b
4056   1CF1 D8            push b
4057   1CF2 07 72 39      call error
4058   1CF5 51 02 00      add sp, 2
4059   1CF8             ; --- END FUNCTION CALL
4060   1CF8 0A FB 1C      jmp _if122_exit
4061   1CFB             _if122_exit:
4062   1CFB             ; if(tok == DOT){ 
4063   1CFB             _if123_cond:
4064   1CFB 3B 7B 4E      mov d, _tok ; $tok
4065   1CFE 2A            mov b, [d]
4066   1CFF 38 00 00      mov c, 0
4067   1D02             ; --- START RELATIONAL
4068   1D02 D7            push a
4069   1D03 11            mov a, b
4070   1D04 FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
4070   1D08 00 00 
4071   1D0A B0            cmp a, b
4072   1D0B FD 71         seq ; ==
4073   1D0D E4            pop a
4074   1D0E             ; --- END RELATIONAL
4075   1D0E C0 00 00      cmp b, 0
4076   1D11 C6 45 1D      je _if123_else
4077   1D14             _if123_TRUE:
4078   1D14             ; get(); 
4079   1D14             ; --- START FUNCTION CALL
4080   1D14 07 6C 2B      call get
4081   1D17             ; if(tok == SEGMENT_END) break; 
4082   1D17             _if124_cond:
4083   1D17 3B 7B 4E      mov d, _tok ; $tok
4084   1D1A 2A            mov b, [d]
4085   1D1B 38 00 00      mov c, 0
4086   1D1E             ; --- START RELATIONAL
4087   1D1E D7            push a
4088   1D1F 11            mov a, b
4089   1D20 FD 2E 05 00   mov32 cb, $5 ; enum element: SEGMENT_END
4089   1D24 00 00 
4090   1D26 B0            cmp a, b
4091   1D27 FD 71         seq ; ==
4092   1D29 E4            pop a
4093   1D2A             ; --- END RELATIONAL
4094   1D2A C0 00 00      cmp b, 0
4095   1D2D C6 36 1D      je _if124_else
4096   1D30             _if124_TRUE:
4097   1D30             ; break; 
4098   1D30 0A 9E 1D      jmp _for121_exit ; for break
4099   1D33 0A 42 1D      jmp _if124_exit
4100   1D36             _if124_else:
4101   1D36             ; error("Unexpected directive."); 
4102   1D36             ; --- START FUNCTION CALL
4103   1D36 26 BA 51      mov b, _s34 ; "Unexpected directive."
4104   1D39 FD AB         swp b
4105   1D3B D8            push b
4106   1D3C 07 72 39      call error
4107   1D3F 51 02 00      add sp, 2
4108   1D42             ; --- END FUNCTION CALL
4109   1D42             _if124_exit:
4110   1D42 0A 9B 1D      jmp _if123_exit
4111   1D45             _if123_else:
4112   1D45             ; if(toktype == IDENTIFIER){ 
4113   1D45             _if125_cond:
4114   1D45 3B 7D 4E      mov d, _toktype ; $toktype
4115   1D48 2A            mov b, [d]
4116   1D49 38 00 00      mov c, 0
4117   1D4C             ; --- START RELATIONAL
4118   1D4C D7            push a
4119   1D4D 11            mov a, b
4120   1D4E FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
4120   1D52 00 00 
4121   1D54 B0            cmp a, b
4122   1D55 FD 71         seq ; ==
4123   1D57 E4            pop a
4124   1D58             ; --- END RELATIONAL
4125   1D58 C0 00 00      cmp b, 0
4126   1D5B C6 9B 1D      je _if125_exit
4127   1D5E             _if125_TRUE:
4128   1D5E             ; get(); 
4129   1D5E             ; --- START FUNCTION CALL
4130   1D5E 07 6C 2B      call get
4131   1D61             ; if(tok != COLON){ 
4132   1D61             _if126_cond:
4133   1D61 3B 7B 4E      mov d, _tok ; $tok
4134   1D64 2A            mov b, [d]
4135   1D65 38 00 00      mov c, 0
4136   1D68             ; --- START RELATIONAL
4137   1D68 D7            push a
4138   1D69 11            mov a, b
4139   1D6A FD 2E 0D 00   mov32 cb, $d ; enum element: COLON
4139   1D6E 00 00 
4140   1D70 B0            cmp a, b
4141   1D71 FD 72         sneq ; !=
4142   1D73 E4            pop a
4143   1D74             ; --- END RELATIONAL
4144   1D74 C0 00 00      cmp b, 0
4145   1D77 C6 98 1D      je _if126_exit
4146   1D7A             _if126_TRUE:
4147   1D7A             ; prog = temp_prog; 
4148   1D7A 3B 7F 4E      mov d, _prog ; $prog
4149   1D7D DA            push d
4150   1D7E FA FF FF      lea d, [bp + -1] ; $temp_prog
4151   1D81 2A            mov b, [d]
4152   1D82 38 00 00      mov c, 0
4153   1D85 E7            pop d
4154   1D86 FD 43         mov [d], b
4155   1D88             ; parse_instr(0); 
4156   1D88             ; --- START FUNCTION CALL
4157   1D88 FD 2E 00 00   mov32 cb, $00000000
4157   1D8C 00 00 
4158   1D8E DD            push bl
4159   1D8F 07 76 13      call parse_instr
4160   1D92 51 01 00      add sp, 1
4161   1D95             ; --- END FUNCTION CALL
4162   1D95 0A 98 1D      jmp _if126_exit
4163   1D98             _if126_exit:
4164   1D98 0A 9B 1D      jmp _if125_exit
4165   1D9B             _if125_exit:
4166   1D9B             _if123_exit:
4167   1D9B             _for121_update:
4168   1D9B 0A BC 1C      jmp _for121_cond
4169   1D9E             _for121_exit:
4170   1D9E             ; print("Done.\n\n"); 
4171   1D9E             ; --- START FUNCTION CALL
4172   1D9E 26 D0 51      mov b, _s35 ; "Done.\n\n"
4173   1DA1 FD AB         swp b
4174   1DA3 D8            push b
4175   1DA4 07 69 3E      call print
4176   1DA7 51 02 00      add sp, 2
4177   1DAA             ; --- END FUNCTION CALL
4178   1DAA F9            leave
4179   1DAB 09            ret
4180   1DAC             
4181   1DAC             debug:
4182   1DAC F8 00 00      enter 0 ; (push bp; mov bp, sp)
4183   1DAF             ; printf("\n"); 
4184   1DAF             ; --- START FUNCTION CALL
4185   1DAF 26 18 50      mov b, _s10 ; "\n"
4186   1DB2 FD AB         swp b
4187   1DB4 D8            push b
4188   1DB5 07 99 42      call printf
4189   1DB8 51 02 00      add sp, 2
4190   1DBB             ; --- END FUNCTION CALL
4191   1DBB             ; printf("Prog Offset: %x\n", prog - program); 
4192   1DBB             ; --- START FUNCTION CALL
4193   1DBB 3B 7F 4E      mov d, _prog ; $prog
4194   1DBE 2A            mov b, [d]
4195   1DBF 38 00 00      mov c, 0
4196   1DC2             ; --- START TERMS
4197   1DC2 D7            push a
4198   1DC3 11            mov a, b
4199   1DC4 3B C3 4F      mov d, _program ; $program
4200   1DC7 2A            mov b, [d]
4201   1DC8 38 00 00      mov c, 0
4202   1DCB 60            sub a, b
4203   1DCC 27            mov b, a
4204   1DCD E4            pop a
4205   1DCE             ; --- END TERMS
4206   1DCE FD AB         swp b
4207   1DD0 D8            push b
4208   1DD1 26 D8 51      mov b, _s36 ; "Prog Offset: %x\n"
4209   1DD4 FD AB         swp b
4210   1DD6 D8            push b
4211   1DD7 07 99 42      call printf
4212   1DDA 51 04 00      add sp, 4
4213   1DDD             ; --- END FUNCTION CALL
4214   1DDD             ; printf("Prog value : %c\n", *prog); 
4215   1DDD             ; --- START FUNCTION CALL
4216   1DDD 3B 7F 4E      mov d, _prog ; $prog
4217   1DE0 2A            mov b, [d]
4218   1DE1 38 00 00      mov c, 0
4219   1DE4 74            mov d, b
4220   1DE5 32            mov bl, [d]
4221   1DE6 A7 00         mov bh, 0
4222   1DE8 38 00 00      mov c, 0
4223   1DEB FD AB         swp b
4224   1DED D8            push b
4225   1DEE 26 E9 51      mov b, _s37 ; "Prog value : %c\n"
4226   1DF1 FD AB         swp b
4227   1DF3 D8            push b
4228   1DF4 07 99 42      call printf
4229   1DF7 51 04 00      add sp, 4
4230   1DFA             ; --- END FUNCTION CALL
4231   1DFA             ; printf("Token      : %s\n", token); 
4232   1DFA             ; --- START FUNCTION CALL
4233   1DFA 3B 81 4E      mov d, _token_data ; $token
4234   1DFD 2D            mov b, d
4235   1DFE 38 00 00      mov c, 0
4236   1E01 FD AB         swp b
4237   1E03 D8            push b
4238   1E04 26 FA 51      mov b, _s38 ; "Token      : %s\n"
4239   1E07 FD AB         swp b
4240   1E09 D8            push b
4241   1E0A 07 99 42      call printf
4242   1E0D 51 04 00      add sp, 4
4243   1E10             ; --- END FUNCTION CALL
4244   1E10             ; printf("Tok        : %d\n", tok); 
4245   1E10             ; --- START FUNCTION CALL
4246   1E10 3B 7B 4E      mov d, _tok ; $tok
4247   1E13 2A            mov b, [d]
4248   1E14 38 00 00      mov c, 0
4249   1E17 FD AB         swp b
4250   1E19 D8            push b
4251   1E1A 26 0B 52      mov b, _s39 ; "Tok        : %d\n"
4252   1E1D FD AB         swp b
4253   1E1F D8            push b
4254   1E20 07 99 42      call printf
4255   1E23 51 04 00      add sp, 4
4256   1E26             ; --- END FUNCTION CALL
4257   1E26             ; printf("Toktype    : %d\n", toktype); 
4258   1E26             ; --- START FUNCTION CALL
4259   1E26 3B 7D 4E      mov d, _toktype ; $toktype
4260   1E29 2A            mov b, [d]
4261   1E2A 38 00 00      mov c, 0
4262   1E2D FD AB         swp b
4263   1E2F D8            push b
4264   1E30 26 1C 52      mov b, _s40 ; "Toktype    : %d\n"
4265   1E33 FD AB         swp b
4266   1E35 D8            push b
4267   1E36 07 99 42      call printf
4268   1E39 51 04 00      add sp, 4
4269   1E3C             ; --- END FUNCTION CALL
4270   1E3C             ; printf("StringConst: %s\n", string_const); 
4271   1E3C             ; --- START FUNCTION CALL
4272   1E3C 3B C1 4E      mov d, _string_const_data ; $string_const
4273   1E3F 2D            mov b, d
4274   1E40 38 00 00      mov c, 0
4275   1E43 FD AB         swp b
4276   1E45 D8            push b
4277   1E46 26 2D 52      mov b, _s41 ; "StringConst: %s\n"
4278   1E49 FD AB         swp b
4279   1E4B D8            push b
4280   1E4C 07 99 42      call printf
4281   1E4F 51 04 00      add sp, 4
4282   1E52             ; --- END FUNCTION CALL
4283   1E52             ; printf("PC         : %x\n", pc); 
4284   1E52             ; --- START FUNCTION CALL
4285   1E52 3B 78 4E      mov d, _pc ; $pc
4286   1E55 2A            mov b, [d]
4287   1E56 38 00 00      mov c, 0
4288   1E59 FD AB         swp b
4289   1E5B D8            push b
4290   1E5C 26 3E 52      mov b, _s42 ; "PC         : %x\n"
4291   1E5F FD AB         swp b
4292   1E61 D8            push b
4293   1E62 07 99 42      call printf
4294   1E65 51 04 00      add sp, 4
4295   1E68             ; --- END FUNCTION CALL
4296   1E68 F9            leave
4297   1E69 09            ret
4298   1E6A             
4299   1E6A             display_output:
4300   1E6A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4301   1E6D             ; int i; 
4302   1E6D 52 02 00      sub sp, 2
4303   1E70             ; unsigned char *p; 
4304   1E70 52 02 00      sub sp, 2
4305   1E73             ; print("\nAssembly complete.\n"); 
4306   1E73             ; --- START FUNCTION CALL
4307   1E73 26 4F 52      mov b, _s43 ; "\nAssembly complete.\n"
4308   1E76 FD AB         swp b
4309   1E78 D8            push b
4310   1E79 07 69 3E      call print
4311   1E7C 51 02 00      add sp, 2
4312   1E7F             ; --- END FUNCTION CALL
4313   1E7F             ; printf("Program size: %d\n", prog_size); 
4314   1E7F             ; --- START FUNCTION CALL
4315   1E7F 3B E1 4F      mov d, _prog_size ; $prog_size
4316   1E82 2A            mov b, [d]
4317   1E83 38 00 00      mov c, 0
4318   1E86 FD AB         swp b
4319   1E88 D8            push b
4320   1E89 26 64 52      mov b, _s44 ; "Program size: %d\n"
4321   1E8C FD AB         swp b
4322   1E8E D8            push b
4323   1E8F 07 99 42      call printf
4324   1E92 51 04 00      add sp, 4
4325   1E95             ; --- END FUNCTION CALL
4326   1E95             ; print("Listing: \n"); 
4327   1E95             ; --- START FUNCTION CALL
4328   1E95 26 76 52      mov b, _s45 ; "Listing: \n"
4329   1E98 FD AB         swp b
4330   1E9A D8            push b
4331   1E9B 07 69 3E      call print
4332   1E9E 51 02 00      add sp, 2
4333   1EA1             ; --- END FUNCTION CALL
4334   1EA1             ; p = bin_out + _org; 
4335   1EA1 FA FD FF      lea d, [bp + -3] ; $p
4336   1EA4 DA            push d
4337   1EA5 3B C5 4F      mov d, _bin_out ; $bin_out
4338   1EA8 2A            mov b, [d]
4339   1EA9 38 00 00      mov c, 0
4340   1EAC             ; --- START TERMS
4341   1EAC D7            push a
4342   1EAD 11            mov a, b
4343   1EAE 3B 76 4E      mov d, __org ; $_org
4344   1EB1 2A            mov b, [d]
4345   1EB2 38 00 00      mov c, 0
4346   1EB5 56            add b, a
4347   1EB6 E4            pop a
4348   1EB7             ; --- END TERMS
4349   1EB7 E7            pop d
4350   1EB8 FD 43         mov [d], b
4351   1EBA             ; for(;;){ 
4352   1EBA             _for127_init:
4353   1EBA             _for127_cond:
4354   1EBA             _for127_block:
4355   1EBA             ; if(p == bin_p) break; 
4356   1EBA             _if128_cond:
4357   1EBA FA FD FF      lea d, [bp + -3] ; $p
4358   1EBD 2A            mov b, [d]
4359   1EBE 38 00 00      mov c, 0
4360   1EC1             ; --- START RELATIONAL
4361   1EC1 D7            push a
4362   1EC2 11            mov a, b
4363   1EC3 3B C7 4F      mov d, _bin_p ; $bin_p
4364   1EC6 2A            mov b, [d]
4365   1EC7 38 00 00      mov c, 0
4366   1ECA B0            cmp a, b
4367   1ECB FD 71         seq ; ==
4368   1ECD E4            pop a
4369   1ECE             ; --- END RELATIONAL
4370   1ECE C0 00 00      cmp b, 0
4371   1ED1 C6 DA 1E      je _if128_exit
4372   1ED4             _if128_TRUE:
4373   1ED4             ; break; 
4374   1ED4 0A 02 1F      jmp _for127_exit ; for break
4375   1ED7 0A DA 1E      jmp _if128_exit
4376   1EDA             _if128_exit:
4377   1EDA             ; printx8(*p);  
4378   1EDA             ; --- START FUNCTION CALL
4379   1EDA FA FD FF      lea d, [bp + -3] ; $p
4380   1EDD 2A            mov b, [d]
4381   1EDE 38 00 00      mov c, 0
4382   1EE1 74            mov d, b
4383   1EE2 32            mov bl, [d]
4384   1EE3 A7 00         mov bh, 0
4385   1EE5 38 00 00      mov c, 0
4386   1EE8 DD            push bl
4387   1EE9 07 FC 4C      call printx8
4388   1EEC 51 01 00      add sp, 1
4389   1EEF             ; --- END FUNCTION CALL
4390   1EEF             ; p++; 
4391   1EEF FA FD FF      lea d, [bp + -3] ; $p
4392   1EF2 2A            mov b, [d]
4393   1EF3 38 00 00      mov c, 0
4394   1EF6 FD 77         inc b
4395   1EF8 FA FD FF      lea d, [bp + -3] ; $p
4396   1EFB FD 43         mov [d], b
4397   1EFD FD 7D         dec b
4398   1EFF             _for127_update:
4399   1EFF 0A BA 1E      jmp _for127_cond
4400   1F02             _for127_exit:
4401   1F02             ; print("\n"); 
4402   1F02             ; --- START FUNCTION CALL
4403   1F02 26 18 50      mov b, _s10 ; "\n"
4404   1F05 FD AB         swp b
4405   1F07 D8            push b
4406   1F08 07 69 3E      call print
4407   1F0B 51 02 00      add sp, 2
4408   1F0E             ; --- END FUNCTION CALL
4409   1F0E F9            leave
4410   1F0F 09            ret
4411   1F10             
4412   1F10             is_reserved:
4413   1F10 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4414   1F13             ; return !strcmp(name, "a") 
4415   1F13             ; --- START FUNCTION CALL
4416   1F13 26 81 52      mov b, _s46 ; "a"
4417   1F16 FD AB         swp b
4418   1F18 D8            push b
4419   1F19 FA 05 00      lea d, [bp + 5] ; $name
4420   1F1C 2A            mov b, [d]
4421   1F1D 38 00 00      mov c, 0
4422   1F20 FD AB         swp b
4423   1F22 D8            push b
4424   1F23 07 CB 3F      call strcmp
4425   1F26 51 04 00      add sp, 4
4426   1F29             ; --- END FUNCTION CALL
4427   1F29             ; --- START LOGICAL OR
4428   1F29 D7            push a
4429   1F2A 11            mov a, b
4430   1F2B             ; --- START FUNCTION CALL
4431   1F2B 26 83 52      mov b, _s47 ; "al"
4432   1F2E FD AB         swp b
4433   1F30 D8            push b
4434   1F31 FA 05 00      lea d, [bp + 5] ; $name
4435   1F34 2A            mov b, [d]
4436   1F35 38 00 00      mov c, 0
4437   1F38 FD AB         swp b
4438   1F3A D8            push b
4439   1F3B 07 CB 3F      call strcmp
4440   1F3E 51 04 00      add sp, 4
4441   1F41             ; --- END FUNCTION CALL
4442   1F41 FD A8         sor a, b ; ||
4443   1F43 11            mov a, b
4444   1F44             ; --- START FUNCTION CALL
4445   1F44 26 86 52      mov b, _s48 ; "ah"
4446   1F47 FD AB         swp b
4447   1F49 D8            push b
4448   1F4A FA 05 00      lea d, [bp + 5] ; $name
4449   1F4D 2A            mov b, [d]
4450   1F4E 38 00 00      mov c, 0
4451   1F51 FD AB         swp b
4452   1F53 D8            push b
4453   1F54 07 CB 3F      call strcmp
4454   1F57 51 04 00      add sp, 4
4455   1F5A             ; --- END FUNCTION CALL
4456   1F5A FD A8         sor a, b ; ||
4457   1F5C 11            mov a, b
4458   1F5D             ; --- START FUNCTION CALL
4459   1F5D 26 89 52      mov b, _s49 ; "b"
4460   1F60 FD AB         swp b
4461   1F62 D8            push b
4462   1F63 FA 05 00      lea d, [bp + 5] ; $name
4463   1F66 2A            mov b, [d]
4464   1F67 38 00 00      mov c, 0
4465   1F6A FD AB         swp b
4466   1F6C D8            push b
4467   1F6D 07 CB 3F      call strcmp
4468   1F70 51 04 00      add sp, 4
4469   1F73             ; --- END FUNCTION CALL
4470   1F73 FD A8         sor a, b ; ||
4471   1F75 11            mov a, b
4472   1F76             ; --- START FUNCTION CALL
4473   1F76 26 8B 52      mov b, _s50 ; "bl"
4474   1F79 FD AB         swp b
4475   1F7B D8            push b
4476   1F7C FA 05 00      lea d, [bp + 5] ; $name
4477   1F7F 2A            mov b, [d]
4478   1F80 38 00 00      mov c, 0
4479   1F83 FD AB         swp b
4480   1F85 D8            push b
4481   1F86 07 CB 3F      call strcmp
4482   1F89 51 04 00      add sp, 4
4483   1F8C             ; --- END FUNCTION CALL
4484   1F8C FD A8         sor a, b ; ||
4485   1F8E 11            mov a, b
4486   1F8F             ; --- START FUNCTION CALL
4487   1F8F 26 8E 52      mov b, _s51 ; "bh"
4488   1F92 FD AB         swp b
4489   1F94 D8            push b
4490   1F95 FA 05 00      lea d, [bp + 5] ; $name
4491   1F98 2A            mov b, [d]
4492   1F99 38 00 00      mov c, 0
4493   1F9C FD AB         swp b
4494   1F9E D8            push b
4495   1F9F 07 CB 3F      call strcmp
4496   1FA2 51 04 00      add sp, 4
4497   1FA5             ; --- END FUNCTION CALL
4498   1FA5 FD A8         sor a, b ; ||
4499   1FA7 11            mov a, b
4500   1FA8             ; --- START FUNCTION CALL
4501   1FA8 26 91 52      mov b, _s52 ; "c"
4502   1FAB FD AB         swp b
4503   1FAD D8            push b
4504   1FAE FA 05 00      lea d, [bp + 5] ; $name
4505   1FB1 2A            mov b, [d]
4506   1FB2 38 00 00      mov c, 0
4507   1FB5 FD AB         swp b
4508   1FB7 D8            push b
4509   1FB8 07 CB 3F      call strcmp
4510   1FBB 51 04 00      add sp, 4
4511   1FBE             ; --- END FUNCTION CALL
4512   1FBE FD A8         sor a, b ; ||
4513   1FC0 11            mov a, b
4514   1FC1             ; --- START FUNCTION CALL
4515   1FC1 26 93 52      mov b, _s53 ; "cl"
4516   1FC4 FD AB         swp b
4517   1FC6 D8            push b
4518   1FC7 FA 05 00      lea d, [bp + 5] ; $name
4519   1FCA 2A            mov b, [d]
4520   1FCB 38 00 00      mov c, 0
4521   1FCE FD AB         swp b
4522   1FD0 D8            push b
4523   1FD1 07 CB 3F      call strcmp
4524   1FD4 51 04 00      add sp, 4
4525   1FD7             ; --- END FUNCTION CALL
4526   1FD7 FD A8         sor a, b ; ||
4527   1FD9 11            mov a, b
4528   1FDA             ; --- START FUNCTION CALL
4529   1FDA 26 96 52      mov b, _s54 ; "ch"
4530   1FDD FD AB         swp b
4531   1FDF D8            push b
4532   1FE0 FA 05 00      lea d, [bp + 5] ; $name
4533   1FE3 2A            mov b, [d]
4534   1FE4 38 00 00      mov c, 0
4535   1FE7 FD AB         swp b
4536   1FE9 D8            push b
4537   1FEA 07 CB 3F      call strcmp
4538   1FED 51 04 00      add sp, 4
4539   1FF0             ; --- END FUNCTION CALL
4540   1FF0 FD A8         sor a, b ; ||
4541   1FF2 11            mov a, b
4542   1FF3             ; --- START FUNCTION CALL
4543   1FF3 26 99 52      mov b, _s55 ; "d"
4544   1FF6 FD AB         swp b
4545   1FF8 D8            push b
4546   1FF9 FA 05 00      lea d, [bp + 5] ; $name
4547   1FFC 2A            mov b, [d]
4548   1FFD 38 00 00      mov c, 0
4549   2000 FD AB         swp b
4550   2002 D8            push b
4551   2003 07 CB 3F      call strcmp
4552   2006 51 04 00      add sp, 4
4553   2009             ; --- END FUNCTION CALL
4554   2009 FD A8         sor a, b ; ||
4555   200B 11            mov a, b
4556   200C             ; --- START FUNCTION CALL
4557   200C 26 9B 52      mov b, _s56 ; "dl"
4558   200F FD AB         swp b
4559   2011 D8            push b
4560   2012 FA 05 00      lea d, [bp + 5] ; $name
4561   2015 2A            mov b, [d]
4562   2016 38 00 00      mov c, 0
4563   2019 FD AB         swp b
4564   201B D8            push b
4565   201C 07 CB 3F      call strcmp
4566   201F 51 04 00      add sp, 4
4567   2022             ; --- END FUNCTION CALL
4568   2022 FD A8         sor a, b ; ||
4569   2024 11            mov a, b
4570   2025             ; --- START FUNCTION CALL
4571   2025 26 9E 52      mov b, _s57 ; "dh"
4572   2028 FD AB         swp b
4573   202A D8            push b
4574   202B FA 05 00      lea d, [bp + 5] ; $name
4575   202E 2A            mov b, [d]
4576   202F 38 00 00      mov c, 0
4577   2032 FD AB         swp b
4578   2034 D8            push b
4579   2035 07 CB 3F      call strcmp
4580   2038 51 04 00      add sp, 4
4581   203B             ; --- END FUNCTION CALL
4582   203B FD A8         sor a, b ; ||
4583   203D 11            mov a, b
4584   203E             ; --- START FUNCTION CALL
4585   203E 26 A1 52      mov b, _s58 ; "g"
4586   2041 FD AB         swp b
4587   2043 D8            push b
4588   2044 FA 05 00      lea d, [bp + 5] ; $name
4589   2047 2A            mov b, [d]
4590   2048 38 00 00      mov c, 0
4591   204B FD AB         swp b
4592   204D D8            push b
4593   204E 07 CB 3F      call strcmp
4594   2051 51 04 00      add sp, 4
4595   2054             ; --- END FUNCTION CALL
4596   2054 FD A8         sor a, b ; ||
4597   2056 11            mov a, b
4598   2057             ; --- START FUNCTION CALL
4599   2057 26 A3 52      mov b, _s59 ; "gl"
4600   205A FD AB         swp b
4601   205C D8            push b
4602   205D FA 05 00      lea d, [bp + 5] ; $name
4603   2060 2A            mov b, [d]
4604   2061 38 00 00      mov c, 0
4605   2064 FD AB         swp b
4606   2066 D8            push b
4607   2067 07 CB 3F      call strcmp
4608   206A 51 04 00      add sp, 4
4609   206D             ; --- END FUNCTION CALL
4610   206D FD A8         sor a, b ; ||
4611   206F 11            mov a, b
4612   2070             ; --- START FUNCTION CALL
4613   2070 26 A6 52      mov b, _s60 ; "gh"
4614   2073 FD AB         swp b
4615   2075 D8            push b
4616   2076 FA 05 00      lea d, [bp + 5] ; $name
4617   2079 2A            mov b, [d]
4618   207A 38 00 00      mov c, 0
4619   207D FD AB         swp b
4620   207F D8            push b
4621   2080 07 CB 3F      call strcmp
4622   2083 51 04 00      add sp, 4
4623   2086             ; --- END FUNCTION CALL
4624   2086 FD A8         sor a, b ; ||
4625   2088 11            mov a, b
4626   2089             ; --- START FUNCTION CALL
4627   2089 26 A9 52      mov b, _s61 ; "pc"
4628   208C FD AB         swp b
4629   208E D8            push b
4630   208F FA 05 00      lea d, [bp + 5] ; $name
4631   2092 2A            mov b, [d]
4632   2093 38 00 00      mov c, 0
4633   2096 FD AB         swp b
4634   2098 D8            push b
4635   2099 07 CB 3F      call strcmp
4636   209C 51 04 00      add sp, 4
4637   209F             ; --- END FUNCTION CALL
4638   209F FD A8         sor a, b ; ||
4639   20A1 11            mov a, b
4640   20A2             ; --- START FUNCTION CALL
4641   20A2 26 AC 52      mov b, _s62 ; "sp"
4642   20A5 FD AB         swp b
4643   20A7 D8            push b
4644   20A8 FA 05 00      lea d, [bp + 5] ; $name
4645   20AB 2A            mov b, [d]
4646   20AC 38 00 00      mov c, 0
4647   20AF FD AB         swp b
4648   20B1 D8            push b
4649   20B2 07 CB 3F      call strcmp
4650   20B5 51 04 00      add sp, 4
4651   20B8             ; --- END FUNCTION CALL
4652   20B8 FD A8         sor a, b ; ||
4653   20BA 11            mov a, b
4654   20BB             ; --- START FUNCTION CALL
4655   20BB 26 AF 52      mov b, _s63 ; "bp"
4656   20BE FD AB         swp b
4657   20C0 D8            push b
4658   20C1 FA 05 00      lea d, [bp + 5] ; $name
4659   20C4 2A            mov b, [d]
4660   20C5 38 00 00      mov c, 0
4661   20C8 FD AB         swp b
4662   20CA D8            push b
4663   20CB 07 CB 3F      call strcmp
4664   20CE 51 04 00      add sp, 4
4665   20D1             ; --- END FUNCTION CALL
4666   20D1 FD A8         sor a, b ; ||
4667   20D3 11            mov a, b
4668   20D4             ; --- START FUNCTION CALL
4669   20D4 26 B2 52      mov b, _s64 ; "si"
4670   20D7 FD AB         swp b
4671   20D9 D8            push b
4672   20DA FA 05 00      lea d, [bp + 5] ; $name
4673   20DD 2A            mov b, [d]
4674   20DE 38 00 00      mov c, 0
4675   20E1 FD AB         swp b
4676   20E3 D8            push b
4677   20E4 07 CB 3F      call strcmp
4678   20E7 51 04 00      add sp, 4
4679   20EA             ; --- END FUNCTION CALL
4680   20EA FD A8         sor a, b ; ||
4681   20EC 11            mov a, b
4682   20ED             ; --- START FUNCTION CALL
4683   20ED 26 B5 52      mov b, _s65 ; "di"
4684   20F0 FD AB         swp b
4685   20F2 D8            push b
4686   20F3 FA 05 00      lea d, [bp + 5] ; $name
4687   20F6 2A            mov b, [d]
4688   20F7 38 00 00      mov c, 0
4689   20FA FD AB         swp b
4690   20FC D8            push b
4691   20FD 07 CB 3F      call strcmp
4692   2100 51 04 00      add sp, 4
4693   2103             ; --- END FUNCTION CALL
4694   2103 FD A8         sor a, b ; ||
4695   2105 11            mov a, b
4696   2106             ; --- START FUNCTION CALL
4697   2106 26 B8 52      mov b, _s66 ; "word"
4698   2109 FD AB         swp b
4699   210B D8            push b
4700   210C FA 05 00      lea d, [bp + 5] ; $name
4701   210F 2A            mov b, [d]
4702   2110 38 00 00      mov c, 0
4703   2113 FD AB         swp b
4704   2115 D8            push b
4705   2116 07 CB 3F      call strcmp
4706   2119 51 04 00      add sp, 4
4707   211C             ; --- END FUNCTION CALL
4708   211C FD A8         sor a, b ; ||
4709   211E 11            mov a, b
4710   211F             ; --- START FUNCTION CALL
4711   211F 26 BD 52      mov b, _s67 ; "byte"
4712   2122 FD AB         swp b
4713   2124 D8            push b
4714   2125 FA 05 00      lea d, [bp + 5] ; $name
4715   2128 2A            mov b, [d]
4716   2129 38 00 00      mov c, 0
4717   212C FD AB         swp b
4718   212E D8            push b
4719   212F 07 CB 3F      call strcmp
4720   2132 51 04 00      add sp, 4
4721   2135             ; --- END FUNCTION CALL
4722   2135 FD A8         sor a, b ; ||
4723   2137 11            mov a, b
4724   2138             ; --- START FUNCTION CALL
4725   2138 26 C2 52      mov b, _s68 ; "cmpsb"
4726   213B FD AB         swp b
4727   213D D8            push b
4728   213E FA 05 00      lea d, [bp + 5] ; $name
4729   2141 2A            mov b, [d]
4730   2142 38 00 00      mov c, 0
4731   2145 FD AB         swp b
4732   2147 D8            push b
4733   2148 07 CB 3F      call strcmp
4734   214B 51 04 00      add sp, 4
4735   214E             ; --- END FUNCTION CALL
4736   214E FD A8         sor a, b ; ||
4737   2150 11            mov a, b
4738   2151             ; --- START FUNCTION CALL
4739   2151 26 C8 52      mov b, _s69 ; "movsb"
4740   2154 FD AB         swp b
4741   2156 D8            push b
4742   2157 FA 05 00      lea d, [bp + 5] ; $name
4743   215A 2A            mov b, [d]
4744   215B 38 00 00      mov c, 0
4745   215E FD AB         swp b
4746   2160 D8            push b
4747   2161 07 CB 3F      call strcmp
4748   2164 51 04 00      add sp, 4
4749   2167             ; --- END FUNCTION CALL
4750   2167 FD A8         sor a, b ; ||
4751   2169 11            mov a, b
4752   216A             ; --- START FUNCTION CALL
4753   216A 26 CE 52      mov b, _s70 ; "stosb"
4754   216D FD AB         swp b
4755   216F D8            push b
4756   2170 FA 05 00      lea d, [bp + 5] ; $name
4757   2173 2A            mov b, [d]
4758   2174 38 00 00      mov c, 0
4759   2177 FD AB         swp b
4760   2179 D8            push b
4761   217A 07 CB 3F      call strcmp
4762   217D 51 04 00      add sp, 4
4763   2180             ; --- END FUNCTION CALL
4764   2180 FD A8         sor a, b ; ||
4765   2182 E4            pop a
4766   2183             ; --- END LOGICAL OR
4767   2183 F9            leave
4768   2184 09            ret
4769   2185             
4770   2185             is_directive:
4771   2185 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4772   2188             ; return !strcmp(name, "org")  
4773   2188             ; --- START FUNCTION CALL
4774   2188 26 F3 4F      mov b, _s0 ; "org"
4775   218B FD AB         swp b
4776   218D D8            push b
4777   218E FA 05 00      lea d, [bp + 5] ; $name
4778   2191 2A            mov b, [d]
4779   2192 38 00 00      mov c, 0
4780   2195 FD AB         swp b
4781   2197 D8            push b
4782   2198 07 CB 3F      call strcmp
4783   219B 51 04 00      add sp, 4
4784   219E             ; --- END FUNCTION CALL
4785   219E             ; --- START LOGICAL OR
4786   219E D7            push a
4787   219F 11            mov a, b
4788   21A0             ; --- START FUNCTION CALL
4789   21A0 26 D4 52      mov b, _s71 ; "define"
4790   21A3 FD AB         swp b
4791   21A5 D8            push b
4792   21A6 FA 05 00      lea d, [bp + 5] ; $name
4793   21A9 2A            mov b, [d]
4794   21AA 38 00 00      mov c, 0
4795   21AD FD AB         swp b
4796   21AF D8            push b
4797   21B0 07 CB 3F      call strcmp
4798   21B3 51 04 00      add sp, 4
4799   21B6             ; --- END FUNCTION CALL
4800   21B6 FD A8         sor a, b ; ||
4801   21B8 E4            pop a
4802   21B9             ; --- END LOGICAL OR
4803   21B9 F9            leave
4804   21BA 09            ret
4805   21BB             
4806   21BB             parse_label:
4807   21BB F8 00 00      enter 0 ; (push bp; mov bp, sp)
4808   21BE             ; char label_name[ 32      ]; 
4809   21BE 52 20 00      sub sp, 32
4810   21C1             ; get(); 
4811   21C1             ; --- START FUNCTION CALL
4812   21C1 07 6C 2B      call get
4813   21C4             ; strcpy(label_name, token); 
4814   21C4             ; --- START FUNCTION CALL
4815   21C4 3B 81 4E      mov d, _token_data ; $token
4816   21C7 2D            mov b, d
4817   21C8 38 00 00      mov c, 0
4818   21CB FD AB         swp b
4819   21CD D8            push b
4820   21CE FA E1 FF      lea d, [bp + -31] ; $label_name
4821   21D1 2D            mov b, d
4822   21D2 38 00 00      mov c, 0
4823   21D5 FD AB         swp b
4824   21D7 D8            push b
4825   21D8 07 9F 4B      call strcpy
4826   21DB 51 04 00      add sp, 4
4827   21DE             ; --- END FUNCTION CALL
4828   21DE             ; declare_label(label_name, pc); 
4829   21DE             ; --- START FUNCTION CALL
4830   21DE 3B 78 4E      mov d, _pc ; $pc
4831   21E1 2A            mov b, [d]
4832   21E2 38 00 00      mov c, 0
4833   21E5 FD AB         swp b
4834   21E7 D8            push b
4835   21E8 FA E1 FF      lea d, [bp + -31] ; $label_name
4836   21EB 2D            mov b, d
4837   21EC 38 00 00      mov c, 0
4838   21EF FD AB         swp b
4839   21F1 D8            push b
4840   21F2 07 FD 21      call declare_label
4841   21F5 51 04 00      add sp, 4
4842   21F8             ; --- END FUNCTION CALL
4843   21F8             ; get(); // get ':' 
4844   21F8             ; --- START FUNCTION CALL
4845   21F8 07 6C 2B      call get
4846   21FB F9            leave
4847   21FC 09            ret
4848   21FD             
4849   21FD             declare_label:
4850   21FD F8 00 00      enter 0 ; (push bp; mov bp, sp)
4851   2200             ; int i; 
4852   2200 52 02 00      sub sp, 2
4853   2203             ; for(i = 0; i <  16          ; i++){ 
4854   2203             _for129_init:
4855   2203 FA FF FF      lea d, [bp + -1] ; $i
4856   2206 DA            push d
4857   2207 FD 2E 00 00   mov32 cb, $00000000
4857   220B 00 00 
4858   220D E7            pop d
4859   220E FD 43         mov [d], b
4860   2210             _for129_cond:
4861   2210 FA FF FF      lea d, [bp + -1] ; $i
4862   2213 2A            mov b, [d]
4863   2214 38 00 00      mov c, 0
4864   2217             ; --- START RELATIONAL
4865   2217 D7            push a
4866   2218 11            mov a, b
4867   2219 FD 2E 10 00   mov32 cb, $00000010
4867   221D 00 00 
4868   221F B0            cmp a, b
4869   2220 FD 73         slt ; < (signed)
4870   2222 E4            pop a
4871   2223             ; --- END RELATIONAL
4872   2223 C0 00 00      cmp b, 0
4873   2226 C6 C0 22      je _for129_exit
4874   2229             _for129_block:
4875   2229             ; if(!label_table[i].name[0]){ 
4876   2229             _if130_cond:
4877   2229 3B 56 4D      mov d, _label_table_data ; $label_table
4878   222C D7            push a
4879   222D DA            push d
4880   222E FA FF FF      lea d, [bp + -1] ; $i
4881   2231 2A            mov b, [d]
4882   2232 38 00 00      mov c, 0
4883   2235 E7            pop d
4884   2236 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4885   223A E4            pop a
4886   223B 58 00 00      add d, 0
4887   223E D7            push a
4888   223F DA            push d
4889   2240 FD 2E 00 00   mov32 cb, $00000000
4889   2244 00 00 
4890   2246 E7            pop d
4891   2247 5A            add d, b
4892   2248 E4            pop a
4893   2249 32            mov bl, [d]
4894   224A A7 00         mov bh, 0
4895   224C 38 00 00      mov c, 0
4896   224F C0 00 00      cmp b, 0
4897   2252 C6 AD 22      je _if130_exit
4898   2255             _if130_TRUE:
4899   2255             ; strcpy(label_table[i].name, name); 
4900   2255             ; --- START FUNCTION CALL
4901   2255 FA 05 00      lea d, [bp + 5] ; $name
4902   2258 2A            mov b, [d]
4903   2259 38 00 00      mov c, 0
4904   225C FD AB         swp b
4905   225E D8            push b
4906   225F 3B 56 4D      mov d, _label_table_data ; $label_table
4907   2262 D7            push a
4908   2263 DA            push d
4909   2264 FA FF FF      lea d, [bp + -1] ; $i
4910   2267 2A            mov b, [d]
4911   2268 38 00 00      mov c, 0
4912   226B E7            pop d
4913   226C FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4914   2270 E4            pop a
4915   2271 58 00 00      add d, 0
4916   2274 2D            mov b, d
4917   2275 38 00 00      mov c, 0
4918   2278 FD AB         swp b
4919   227A D8            push b
4920   227B 07 9F 4B      call strcpy
4921   227E 51 04 00      add sp, 4
4922   2281             ; --- END FUNCTION CALL
4923   2281             ; label_table[i].address = address; 
4924   2281 3B 56 4D      mov d, _label_table_data ; $label_table
4925   2284 D7            push a
4926   2285 DA            push d
4927   2286 FA FF FF      lea d, [bp + -1] ; $i
4928   2289 2A            mov b, [d]
4929   228A 38 00 00      mov c, 0
4930   228D E7            pop d
4931   228E FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4932   2292 E4            pop a
4933   2293 58 10 00      add d, 16
4934   2296 DA            push d
4935   2297 FA 07 00      lea d, [bp + 7] ; $address
4936   229A 2A            mov b, [d]
4937   229B 38 00 00      mov c, 0
4938   229E E7            pop d
4939   229F FD 43         mov [d], b
4940   22A1             ; return i; 
4941   22A1 FA FF FF      lea d, [bp + -1] ; $i
4942   22A4 2A            mov b, [d]
4943   22A5 38 00 00      mov c, 0
4944   22A8 F9            leave
4945   22A9 09            ret
4946   22AA 0A AD 22      jmp _if130_exit
4947   22AD             _if130_exit:
4948   22AD             _for129_update:
4949   22AD FA FF FF      lea d, [bp + -1] ; $i
4950   22B0 2A            mov b, [d]
4951   22B1 38 00 00      mov c, 0
4952   22B4 11            mov a, b
4953   22B5 FD 77         inc b
4954   22B7 FA FF FF      lea d, [bp + -1] ; $i
4955   22BA FD 43         mov [d], b
4956   22BC 27            mov b, a
4957   22BD 0A 10 22      jmp _for129_cond
4958   22C0             _for129_exit:
4959   22C0 F9            leave
4960   22C1 09            ret
4961   22C2             
4962   22C2             get_label_addr:
4963   22C2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4964   22C5             ; int i; 
4965   22C5 52 02 00      sub sp, 2
4966   22C8             ; for(i = 0; i <  16          ; i++){ 
4967   22C8             _for131_init:
4968   22C8 FA FF FF      lea d, [bp + -1] ; $i
4969   22CB DA            push d
4970   22CC FD 2E 00 00   mov32 cb, $00000000
4970   22D0 00 00 
4971   22D2 E7            pop d
4972   22D3 FD 43         mov [d], b
4973   22D5             _for131_cond:
4974   22D5 FA FF FF      lea d, [bp + -1] ; $i
4975   22D8 2A            mov b, [d]
4976   22D9 38 00 00      mov c, 0
4977   22DC             ; --- START RELATIONAL
4978   22DC D7            push a
4979   22DD 11            mov a, b
4980   22DE FD 2E 10 00   mov32 cb, $00000010
4980   22E2 00 00 
4981   22E4 B0            cmp a, b
4982   22E5 FD 73         slt ; < (signed)
4983   22E7 E4            pop a
4984   22E8             ; --- END RELATIONAL
4985   22E8 C0 00 00      cmp b, 0
4986   22EB C6 51 23      je _for131_exit
4987   22EE             _for131_block:
4988   22EE             ; if(!strcmp(label_table[i].name, name)){ 
4989   22EE             _if132_cond:
4990   22EE             ; --- START FUNCTION CALL
4991   22EE FA 05 00      lea d, [bp + 5] ; $name
4992   22F1 2A            mov b, [d]
4993   22F2 38 00 00      mov c, 0
4994   22F5 FD AB         swp b
4995   22F7 D8            push b
4996   22F8 3B 56 4D      mov d, _label_table_data ; $label_table
4997   22FB D7            push a
4998   22FC DA            push d
4999   22FD FA FF FF      lea d, [bp + -1] ; $i
5000   2300 2A            mov b, [d]
5001   2301 38 00 00      mov c, 0
5002   2304 E7            pop d
5003   2305 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5004   2309 E4            pop a
5005   230A 58 00 00      add d, 0
5006   230D 2D            mov b, d
5007   230E 38 00 00      mov c, 0
5008   2311 FD AB         swp b
5009   2313 D8            push b
5010   2314 07 CB 3F      call strcmp
5011   2317 51 04 00      add sp, 4
5012   231A             ; --- END FUNCTION CALL
5013   231A C0 00 00      cmp b, 0
5014   231D C6 3E 23      je _if132_exit
5015   2320             _if132_TRUE:
5016   2320             ; return label_table[i].address; 
5017   2320 3B 56 4D      mov d, _label_table_data ; $label_table
5018   2323 D7            push a
5019   2324 DA            push d
5020   2325 FA FF FF      lea d, [bp + -1] ; $i
5021   2328 2A            mov b, [d]
5022   2329 38 00 00      mov c, 0
5023   232C E7            pop d
5024   232D FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5025   2331 E4            pop a
5026   2332 58 10 00      add d, 16
5027   2335 2A            mov b, [d]
5028   2336 38 00 00      mov c, 0
5029   2339 F9            leave
5030   233A 09            ret
5031   233B 0A 3E 23      jmp _if132_exit
5032   233E             _if132_exit:
5033   233E             _for131_update:
5034   233E FA FF FF      lea d, [bp + -1] ; $i
5035   2341 2A            mov b, [d]
5036   2342 38 00 00      mov c, 0
5037   2345 11            mov a, b
5038   2346 FD 77         inc b
5039   2348 FA FF FF      lea d, [bp + -1] ; $i
5040   234B FD 43         mov [d], b
5041   234D 27            mov b, a
5042   234E 0A D5 22      jmp _for131_cond
5043   2351             _for131_exit:
5044   2351             ; error_s("Label does not exist: ", name); 
5045   2351             ; --- START FUNCTION CALL
5046   2351 FA 05 00      lea d, [bp + 5] ; $name
5047   2354 2A            mov b, [d]
5048   2355 38 00 00      mov c, 0
5049   2358 FD AB         swp b
5050   235A D8            push b
5051   235B 26 DB 52      mov b, _s72 ; "Label does not exist: "
5052   235E FD AB         swp b
5053   2360 D8            push b
5054   2361 07 9C 39      call error_s
5055   2364 51 04 00      add sp, 4
5056   2367             ; --- END FUNCTION CALL
5057   2367 F9            leave
5058   2368 09            ret
5059   2369             
5060   2369             label_exists:
5061   2369 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5062   236C             ; int i; 
5063   236C 52 02 00      sub sp, 2
5064   236F             ; for(i = 0; i <  16          ; i++){ 
5065   236F             _for133_init:
5066   236F FA FF FF      lea d, [bp + -1] ; $i
5067   2372 DA            push d
5068   2373 FD 2E 00 00   mov32 cb, $00000000
5068   2377 00 00 
5069   2379 E7            pop d
5070   237A FD 43         mov [d], b
5071   237C             _for133_cond:
5072   237C FA FF FF      lea d, [bp + -1] ; $i
5073   237F 2A            mov b, [d]
5074   2380 38 00 00      mov c, 0
5075   2383             ; --- START RELATIONAL
5076   2383 D7            push a
5077   2384 11            mov a, b
5078   2385 FD 2E 10 00   mov32 cb, $00000010
5078   2389 00 00 
5079   238B B0            cmp a, b
5080   238C FD 73         slt ; < (signed)
5081   238E E4            pop a
5082   238F             ; --- END RELATIONAL
5083   238F C0 00 00      cmp b, 0
5084   2392 C6 E6 23      je _for133_exit
5085   2395             _for133_block:
5086   2395             ; if(!strcmp(label_table[i].name, name)){ 
5087   2395             _if134_cond:
5088   2395             ; --- START FUNCTION CALL
5089   2395 FA 05 00      lea d, [bp + 5] ; $name
5090   2398 2A            mov b, [d]
5091   2399 38 00 00      mov c, 0
5092   239C FD AB         swp b
5093   239E D8            push b
5094   239F 3B 56 4D      mov d, _label_table_data ; $label_table
5095   23A2 D7            push a
5096   23A3 DA            push d
5097   23A4 FA FF FF      lea d, [bp + -1] ; $i
5098   23A7 2A            mov b, [d]
5099   23A8 38 00 00      mov c, 0
5100   23AB E7            pop d
5101   23AC FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5102   23B0 E4            pop a
5103   23B1 58 00 00      add d, 0
5104   23B4 2D            mov b, d
5105   23B5 38 00 00      mov c, 0
5106   23B8 FD AB         swp b
5107   23BA D8            push b
5108   23BB 07 CB 3F      call strcmp
5109   23BE 51 04 00      add sp, 4
5110   23C1             ; --- END FUNCTION CALL
5111   23C1 C0 00 00      cmp b, 0
5112   23C4 C6 D3 23      je _if134_exit
5113   23C7             _if134_TRUE:
5114   23C7             ; return i; 
5115   23C7 FA FF FF      lea d, [bp + -1] ; $i
5116   23CA 2A            mov b, [d]
5117   23CB 38 00 00      mov c, 0
5118   23CE F9            leave
5119   23CF 09            ret
5120   23D0 0A D3 23      jmp _if134_exit
5121   23D3             _if134_exit:
5122   23D3             _for133_update:
5123   23D3 FA FF FF      lea d, [bp + -1] ; $i
5124   23D6 2A            mov b, [d]
5125   23D7 38 00 00      mov c, 0
5126   23DA 11            mov a, b
5127   23DB FD 77         inc b
5128   23DD FA FF FF      lea d, [bp + -1] ; $i
5129   23E0 FD 43         mov [d], b
5130   23E2 27            mov b, a
5131   23E3 0A 7C 23      jmp _for133_cond
5132   23E6             _for133_exit:
5133   23E6             ; return -1; 
5134   23E6 FD 2E FF FF   mov32 cb, $ffffffff
5134   23EA FF FF 
5135   23EC F9            leave
5136   23ED 09            ret
5137   23EE             
5138   23EE             search_opcode:
5139   23EE F8 00 00      enter 0 ; (push bp; mov bp, sp)
5140   23F1             ; char opcode_str[24]; 
5141   23F1 52 18 00      sub sp, 24
5142   23F4             ; char opcode_hex[5]; 
5143   23F4 52 05 00      sub sp, 5
5144   23F7             ; char *hex_p; 
5145   23F7 52 02 00      sub sp, 2
5146   23FA             ; char *op_p; 
5147   23FA 52 02 00      sub sp, 2
5148   23FD             ; char *tbl_p; 
5149   23FD 52 02 00      sub sp, 2
5150   2400             ; struct t_opcode return_opcode; 
5151   2400 52 1A 00      sub sp, 26
5152   2403             ; tbl_p = opcode_table; 
5153   2403 FA DE FF      lea d, [bp + -34] ; $tbl_p
5154   2406 DA            push d
5155   2407 3B C9 4F      mov d, _opcode_table ; $opcode_table
5156   240A 2A            mov b, [d]
5157   240B 38 00 00      mov c, 0
5158   240E E7            pop d
5159   240F FD 43         mov [d], b
5160   2411             ; for(;;){ 
5161   2411             _for135_init:
5162   2411             _for135_cond:
5163   2411             _for135_block:
5164   2411             ; op_p = opcode_str; 
5165   2411 FA E0 FF      lea d, [bp + -32] ; $op_p
5166   2414 DA            push d
5167   2415 FA E9 FF      lea d, [bp + -23] ; $opcode_str
5168   2418 2D            mov b, d
5169   2419 38 00 00      mov c, 0
5170   241C E7            pop d
5171   241D FD 43         mov [d], b
5172   241F             ; hex_p = opcode_hex; 
5173   241F FA E2 FF      lea d, [bp + -30] ; $hex_p
5174   2422 DA            push d
5175   2423 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5176   2426 2D            mov b, d
5177   2427 38 00 00      mov c, 0
5178   242A E7            pop d
5179   242B FD 43         mov [d], b
5180   242D             ; while(*tbl_p != ' ') *op_p++ = *tbl_p++; 
5181   242D             _while136_cond:
5182   242D FA DE FF      lea d, [bp + -34] ; $tbl_p
5183   2430 2A            mov b, [d]
5184   2431 38 00 00      mov c, 0
5185   2434 74            mov d, b
5186   2435 32            mov bl, [d]
5187   2436 A7 00         mov bh, 0
5188   2438 38 00 00      mov c, 0
5189   243B             ; --- START RELATIONAL
5190   243B D7            push a
5191   243C 11            mov a, b
5192   243D FD 2E 20 00   mov32 cb, $00000020
5192   2441 00 00 
5193   2443 B0            cmp a, b
5194   2444 FD 72         sneq ; !=
5195   2446 E4            pop a
5196   2447             ; --- END RELATIONAL
5197   2447 C0 00 00      cmp b, 0
5198   244A C6 7B 24      je _while136_exit
5199   244D             _while136_block:
5200   244D             ; *op_p++ = *tbl_p++; 
5201   244D FA E0 FF      lea d, [bp + -32] ; $op_p
5202   2450 2A            mov b, [d]
5203   2451 38 00 00      mov c, 0
5204   2454 FD 77         inc b
5205   2456 FA E0 FF      lea d, [bp + -32] ; $op_p
5206   2459 FD 43         mov [d], b
5207   245B FD 7D         dec b
5208   245D D8            push b
5209   245E FA DE FF      lea d, [bp + -34] ; $tbl_p
5210   2461 2A            mov b, [d]
5211   2462 38 00 00      mov c, 0
5212   2465 FD 77         inc b
5213   2467 FA DE FF      lea d, [bp + -34] ; $tbl_p
5214   246A FD 43         mov [d], b
5215   246C FD 7D         dec b
5216   246E 74            mov d, b
5217   246F 32            mov bl, [d]
5218   2470 A7 00         mov bh, 0
5219   2472 38 00 00      mov c, 0
5220   2475 E7            pop d
5221   2476 FD 3E         mov [d], bl
5222   2478 0A 2D 24      jmp _while136_cond
5223   247B             _while136_exit:
5224   247B             ; *op_p++ = *tbl_p++; 
5225   247B FA E0 FF      lea d, [bp + -32] ; $op_p
5226   247E 2A            mov b, [d]
5227   247F 38 00 00      mov c, 0
5228   2482 FD 77         inc b
5229   2484 FA E0 FF      lea d, [bp + -32] ; $op_p
5230   2487 FD 43         mov [d], b
5231   2489 FD 7D         dec b
5232   248B D8            push b
5233   248C FA DE FF      lea d, [bp + -34] ; $tbl_p
5234   248F 2A            mov b, [d]
5235   2490 38 00 00      mov c, 0
5236   2493 FD 77         inc b
5237   2495 FA DE FF      lea d, [bp + -34] ; $tbl_p
5238   2498 FD 43         mov [d], b
5239   249A FD 7D         dec b
5240   249C 74            mov d, b
5241   249D 32            mov bl, [d]
5242   249E A7 00         mov bh, 0
5243   24A0 38 00 00      mov c, 0
5244   24A3 E7            pop d
5245   24A4 FD 3E         mov [d], bl
5246   24A6             ; while(*tbl_p != ' ') *op_p++ = *tbl_p++; 
5247   24A6             _while137_cond:
5248   24A6 FA DE FF      lea d, [bp + -34] ; $tbl_p
5249   24A9 2A            mov b, [d]
5250   24AA 38 00 00      mov c, 0
5251   24AD 74            mov d, b
5252   24AE 32            mov bl, [d]
5253   24AF A7 00         mov bh, 0
5254   24B1 38 00 00      mov c, 0
5255   24B4             ; --- START RELATIONAL
5256   24B4 D7            push a
5257   24B5 11            mov a, b
5258   24B6 FD 2E 20 00   mov32 cb, $00000020
5258   24BA 00 00 
5259   24BC B0            cmp a, b
5260   24BD FD 72         sneq ; !=
5261   24BF E4            pop a
5262   24C0             ; --- END RELATIONAL
5263   24C0 C0 00 00      cmp b, 0
5264   24C3 C6 F4 24      je _while137_exit
5265   24C6             _while137_block:
5266   24C6             ; *op_p++ = *tbl_p++; 
5267   24C6 FA E0 FF      lea d, [bp + -32] ; $op_p
5268   24C9 2A            mov b, [d]
5269   24CA 38 00 00      mov c, 0
5270   24CD FD 77         inc b
5271   24CF FA E0 FF      lea d, [bp + -32] ; $op_p
5272   24D2 FD 43         mov [d], b
5273   24D4 FD 7D         dec b
5274   24D6 D8            push b
5275   24D7 FA DE FF      lea d, [bp + -34] ; $tbl_p
5276   24DA 2A            mov b, [d]
5277   24DB 38 00 00      mov c, 0
5278   24DE FD 77         inc b
5279   24E0 FA DE FF      lea d, [bp + -34] ; $tbl_p
5280   24E3 FD 43         mov [d], b
5281   24E5 FD 7D         dec b
5282   24E7 74            mov d, b
5283   24E8 32            mov bl, [d]
5284   24E9 A7 00         mov bh, 0
5285   24EB 38 00 00      mov c, 0
5286   24EE E7            pop d
5287   24EF FD 3E         mov [d], bl
5288   24F1 0A A6 24      jmp _while137_cond
5289   24F4             _while137_exit:
5290   24F4             ; *op_p = '\0'; 
5291   24F4 FA E0 FF      lea d, [bp + -32] ; $op_p
5292   24F7 2A            mov b, [d]
5293   24F8 38 00 00      mov c, 0
5294   24FB D8            push b
5295   24FC FD 2E 00 00   mov32 cb, $00000000
5295   2500 00 00 
5296   2502 E7            pop d
5297   2503 FD 3E         mov [d], bl
5298   2505             ; if(!strcmp(opcode_str, what_opcode)){ 
5299   2505             _if138_cond:
5300   2505             ; --- START FUNCTION CALL
5301   2505 FA 05 00      lea d, [bp + 5] ; $what_opcode
5302   2508 2A            mov b, [d]
5303   2509 38 00 00      mov c, 0
5304   250C FD AB         swp b
5305   250E D8            push b
5306   250F FA E9 FF      lea d, [bp + -23] ; $opcode_str
5307   2512 2D            mov b, d
5308   2513 38 00 00      mov c, 0
5309   2516 FD AB         swp b
5310   2518 D8            push b
5311   2519 07 CB 3F      call strcmp
5312   251C 51 04 00      add sp, 4
5313   251F             ; --- END FUNCTION CALL
5314   251F C0 00 00      cmp b, 0
5315   2522 C6 6F 26      je _if138_else
5316   2525             _if138_TRUE:
5317   2525             ; strcpy(return_opcode.name, what_opcode); 
5318   2525             ; --- START FUNCTION CALL
5319   2525 FA 05 00      lea d, [bp + 5] ; $what_opcode
5320   2528 2A            mov b, [d]
5321   2529 38 00 00      mov c, 0
5322   252C FD AB         swp b
5323   252E D8            push b
5324   252F FA C4 FF      lea d, [bp + -60] ; $return_opcode
5325   2532 58 00 00      add d, 0
5326   2535 2D            mov b, d
5327   2536 38 00 00      mov c, 0
5328   2539 FD AB         swp b
5329   253B D8            push b
5330   253C 07 9F 4B      call strcpy
5331   253F 51 04 00      add sp, 4
5332   2542             ; --- END FUNCTION CALL
5333   2542             ; while(*tbl_p == ' ') tbl_p++; 
5334   2542             _while139_cond:
5335   2542 FA DE FF      lea d, [bp + -34] ; $tbl_p
5336   2545 2A            mov b, [d]
5337   2546 38 00 00      mov c, 0
5338   2549 74            mov d, b
5339   254A 32            mov bl, [d]
5340   254B A7 00         mov bh, 0
5341   254D 38 00 00      mov c, 0
5342   2550             ; --- START RELATIONAL
5343   2550 D7            push a
5344   2551 11            mov a, b
5345   2552 FD 2E 20 00   mov32 cb, $00000020
5345   2556 00 00 
5346   2558 B0            cmp a, b
5347   2559 FD 71         seq ; ==
5348   255B E4            pop a
5349   255C             ; --- END RELATIONAL
5350   255C C0 00 00      cmp b, 0
5351   255F C6 75 25      je _while139_exit
5352   2562             _while139_block:
5353   2562             ; tbl_p++; 
5354   2562 FA DE FF      lea d, [bp + -34] ; $tbl_p
5355   2565 2A            mov b, [d]
5356   2566 38 00 00      mov c, 0
5357   2569 FD 77         inc b
5358   256B FA DE FF      lea d, [bp + -34] ; $tbl_p
5359   256E FD 43         mov [d], b
5360   2570 FD 7D         dec b
5361   2572 0A 42 25      jmp _while139_cond
5362   2575             _while139_exit:
5363   2575             ; while(is_hex_digit(*tbl_p)) *hex_p++ = *tbl_p++; // Copy hex opcode 
5364   2575             _while140_cond:
5365   2575             ; --- START FUNCTION CALL
5366   2575 FA DE FF      lea d, [bp + -34] ; $tbl_p
5367   2578 2A            mov b, [d]
5368   2579 38 00 00      mov c, 0
5369   257C 74            mov d, b
5370   257D 32            mov bl, [d]
5371   257E A7 00         mov bh, 0
5372   2580 38 00 00      mov c, 0
5373   2583 DD            push bl
5374   2584 07 B5 29      call is_hex_digit
5375   2587 51 01 00      add sp, 1
5376   258A             ; --- END FUNCTION CALL
5377   258A C0 00 00      cmp b, 0
5378   258D C6 BE 25      je _while140_exit
5379   2590             _while140_block:
5380   2590             ; *hex_p++ = *tbl_p++; // Copy hex opcode 
5381   2590 FA E2 FF      lea d, [bp + -30] ; $hex_p
5382   2593 2A            mov b, [d]
5383   2594 38 00 00      mov c, 0
5384   2597 FD 77         inc b
5385   2599 FA E2 FF      lea d, [bp + -30] ; $hex_p
5386   259C FD 43         mov [d], b
5387   259E FD 7D         dec b
5388   25A0 D8            push b
5389   25A1 FA DE FF      lea d, [bp + -34] ; $tbl_p
5390   25A4 2A            mov b, [d]
5391   25A5 38 00 00      mov c, 0
5392   25A8 FD 77         inc b
5393   25AA FA DE FF      lea d, [bp + -34] ; $tbl_p
5394   25AD FD 43         mov [d], b
5395   25AF FD 7D         dec b
5396   25B1 74            mov d, b
5397   25B2 32            mov bl, [d]
5398   25B3 A7 00         mov bh, 0
5399   25B5 38 00 00      mov c, 0
5400   25B8 E7            pop d
5401   25B9 FD 3E         mov [d], bl
5402   25BB 0A 75 25      jmp _while140_cond
5403   25BE             _while140_exit:
5404   25BE             ; *hex_p = '\0'; 
5405   25BE FA E2 FF      lea d, [bp + -30] ; $hex_p
5406   25C1 2A            mov b, [d]
5407   25C2 38 00 00      mov c, 0
5408   25C5 D8            push b
5409   25C6 FD 2E 00 00   mov32 cb, $00000000
5409   25CA 00 00 
5410   25CC E7            pop d
5411   25CD FD 3E         mov [d], bl
5412   25CF             ; if(strlen(opcode_hex) == 4){ 
5413   25CF             _if141_cond:
5414   25CF             ; --- START FUNCTION CALL
5415   25CF FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5416   25D2 2D            mov b, d
5417   25D3 38 00 00      mov c, 0
5418   25D6 FD AB         swp b
5419   25D8 D8            push b
5420   25D9 07 4F 40      call strlen
5421   25DC 51 02 00      add sp, 2
5422   25DF             ; --- END FUNCTION CALL
5423   25DF             ; --- START RELATIONAL
5424   25DF D7            push a
5425   25E0 11            mov a, b
5426   25E1 FD 2E 04 00   mov32 cb, $00000004
5426   25E5 00 00 
5427   25E7 B0            cmp a, b
5428   25E8 FD 71         seq ; ==
5429   25EA E4            pop a
5430   25EB             ; --- END RELATIONAL
5431   25EB C0 00 00      cmp b, 0
5432   25EE C6 39 26      je _if141_else
5433   25F1             _if141_TRUE:
5434   25F1             ; return_opcode.opcode_type = 1; 
5435   25F1 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5436   25F4 58 19 00      add d, 25
5437   25F7 DA            push d
5438   25F8 FD 2E 01 00   mov32 cb, $00000001
5438   25FC 00 00 
5439   25FE E7            pop d
5440   25FF FD 3E         mov [d], bl
5441   2601             ; *(opcode_hex + 2) = '\0'; 
5442   2601 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5443   2604 2D            mov b, d
5444   2605 38 00 00      mov c, 0
5445   2608             ; --- START TERMS
5446   2608 D7            push a
5447   2609 11            mov a, b
5448   260A FD 2E 02 00   mov32 cb, $00000002
5448   260E 00 00 
5449   2610 56            add b, a
5450   2611 E4            pop a
5451   2612             ; --- END TERMS
5452   2612 D8            push b
5453   2613 FD 2E 00 00   mov32 cb, $00000000
5453   2617 00 00 
5454   2619 E7            pop d
5455   261A FD 43         mov [d], b
5456   261C             ; return_opcode.opcode = hex_to_int(opcode_hex); 
5457   261C FA C4 FF      lea d, [bp + -60] ; $return_opcode
5458   261F 58 18 00      add d, 24
5459   2622 DA            push d
5460   2623             ; --- START FUNCTION CALL
5461   2623 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5462   2626 2D            mov b, d
5463   2627 38 00 00      mov c, 0
5464   262A FD AB         swp b
5465   262C D8            push b
5466   262D 07 33 3B      call hex_to_int
5467   2630 51 02 00      add sp, 2
5468   2633             ; --- END FUNCTION CALL
5469   2633 E7            pop d
5470   2634 FD 3E         mov [d], bl
5471   2636 0A 63 26      jmp _if141_exit
5472   2639             _if141_else:
5473   2639             ; return_opcode.opcode_type = 0; 
5474   2639 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5475   263C 58 19 00      add d, 25
5476   263F DA            push d
5477   2640 FD 2E 00 00   mov32 cb, $00000000
5477   2644 00 00 
5478   2646 E7            pop d
5479   2647 FD 3E         mov [d], bl
5480   2649             ; return_opcode.opcode = hex_to_int(opcode_hex); 
5481   2649 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5482   264C 58 18 00      add d, 24
5483   264F DA            push d
5484   2650             ; --- START FUNCTION CALL
5485   2650 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5486   2653 2D            mov b, d
5487   2654 38 00 00      mov c, 0
5488   2657 FD AB         swp b
5489   2659 D8            push b
5490   265A 07 33 3B      call hex_to_int
5491   265D 51 02 00      add sp, 2
5492   2660             ; --- END FUNCTION CALL
5493   2660 E7            pop d
5494   2661 FD 3E         mov [d], bl
5495   2663             _if141_exit:
5496   2663             ; return return_opcode; 
5497   2663 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5498   2666 2D            mov b, d
5499   2667 38 00 00      mov c, 0
5500   266A F9            leave
5501   266B 09            ret
5502   266C 0A F4 26      jmp _if138_exit
5503   266F             _if138_else:
5504   266F             ; while(*tbl_p != '\n') tbl_p++; 
5505   266F             _while142_cond:
5506   266F FA DE FF      lea d, [bp + -34] ; $tbl_p
5507   2672 2A            mov b, [d]
5508   2673 38 00 00      mov c, 0
5509   2676 74            mov d, b
5510   2677 32            mov bl, [d]
5511   2678 A7 00         mov bh, 0
5512   267A 38 00 00      mov c, 0
5513   267D             ; --- START RELATIONAL
5514   267D D7            push a
5515   267E 11            mov a, b
5516   267F FD 2E 0A 00   mov32 cb, $0000000a
5516   2683 00 00 
5517   2685 B0            cmp a, b
5518   2686 FD 72         sneq ; !=
5519   2688 E4            pop a
5520   2689             ; --- END RELATIONAL
5521   2689 C0 00 00      cmp b, 0
5522   268C C6 A2 26      je _while142_exit
5523   268F             _while142_block:
5524   268F             ; tbl_p++; 
5525   268F FA DE FF      lea d, [bp + -34] ; $tbl_p
5526   2692 2A            mov b, [d]
5527   2693 38 00 00      mov c, 0
5528   2696 FD 77         inc b
5529   2698 FA DE FF      lea d, [bp + -34] ; $tbl_p
5530   269B FD 43         mov [d], b
5531   269D FD 7D         dec b
5532   269F 0A 6F 26      jmp _while142_cond
5533   26A2             _while142_exit:
5534   26A2             ; while(*tbl_p == '\n') tbl_p++; 
5535   26A2             _while143_cond:
5536   26A2 FA DE FF      lea d, [bp + -34] ; $tbl_p
5537   26A5 2A            mov b, [d]
5538   26A6 38 00 00      mov c, 0
5539   26A9 74            mov d, b
5540   26AA 32            mov bl, [d]
5541   26AB A7 00         mov bh, 0
5542   26AD 38 00 00      mov c, 0
5543   26B0             ; --- START RELATIONAL
5544   26B0 D7            push a
5545   26B1 11            mov a, b
5546   26B2 FD 2E 0A 00   mov32 cb, $0000000a
5546   26B6 00 00 
5547   26B8 B0            cmp a, b
5548   26B9 FD 71         seq ; ==
5549   26BB E4            pop a
5550   26BC             ; --- END RELATIONAL
5551   26BC C0 00 00      cmp b, 0
5552   26BF C6 D5 26      je _while143_exit
5553   26C2             _while143_block:
5554   26C2             ; tbl_p++; 
5555   26C2 FA DE FF      lea d, [bp + -34] ; $tbl_p
5556   26C5 2A            mov b, [d]
5557   26C6 38 00 00      mov c, 0
5558   26C9 FD 77         inc b
5559   26CB FA DE FF      lea d, [bp + -34] ; $tbl_p
5560   26CE FD 43         mov [d], b
5561   26D0 FD 7D         dec b
5562   26D2 0A A2 26      jmp _while143_cond
5563   26D5             _while143_exit:
5564   26D5             ; if(!*tbl_p) break; 
5565   26D5             _if144_cond:
5566   26D5 FA DE FF      lea d, [bp + -34] ; $tbl_p
5567   26D8 2A            mov b, [d]
5568   26D9 38 00 00      mov c, 0
5569   26DC 74            mov d, b
5570   26DD 32            mov bl, [d]
5571   26DE A7 00         mov bh, 0
5572   26E0 38 00 00      mov c, 0
5573   26E3 C0 00 00      cmp b, 0
5574   26E6 FD 71         seq ; !
5575   26E8 C0 00 00      cmp b, 0
5576   26EB C6 F4 26      je _if144_exit
5577   26EE             _if144_TRUE:
5578   26EE             ; break; 
5579   26EE 0A F7 26      jmp _for135_exit ; for break
5580   26F1 0A F4 26      jmp _if144_exit
5581   26F4             _if144_exit:
5582   26F4             _if138_exit:
5583   26F4             _for135_update:
5584   26F4 0A 11 24      jmp _for135_cond
5585   26F7             _for135_exit:
5586   26F7             ; return_opcode.name[0] = '\0'; 
5587   26F7 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5588   26FA 58 00 00      add d, 0
5589   26FD D7            push a
5590   26FE DA            push d
5591   26FF FD 2E 00 00   mov32 cb, $00000000
5591   2703 00 00 
5592   2705 E7            pop d
5593   2706 5A            add d, b
5594   2707 E4            pop a
5595   2708 DA            push d
5596   2709 FD 2E 00 00   mov32 cb, $00000000
5596   270D 00 00 
5597   270F E7            pop d
5598   2710 FD 3E         mov [d], bl
5599   2712             ; return return_opcode; 
5600   2712 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5601   2715 2D            mov b, d
5602   2716 38 00 00      mov c, 0
5603   2719 F9            leave
5604   271A 09            ret
5605   271B             
5606   271B             forwards:
5607   271B F8 00 00      enter 0 ; (push bp; mov bp, sp)
5608   271E             ; bin_p = bin_p + amount; 
5609   271E 3B C7 4F      mov d, _bin_p ; $bin_p
5610   2721 DA            push d
5611   2722 3B C7 4F      mov d, _bin_p ; $bin_p
5612   2725 2A            mov b, [d]
5613   2726 38 00 00      mov c, 0
5614   2729             ; --- START TERMS
5615   2729 D7            push a
5616   272A 11            mov a, b
5617   272B FA 05 00      lea d, [bp + 5] ; $amount
5618   272E 32            mov bl, [d]
5619   272F A7 00         mov bh, 0
5620   2731 38 00 00      mov c, 0
5621   2734 56            add b, a
5622   2735 E4            pop a
5623   2736             ; --- END TERMS
5624   2736 E7            pop d
5625   2737 FD 43         mov [d], b
5626   2739             ; prog_size = prog_size + amount; 
5627   2739 3B E1 4F      mov d, _prog_size ; $prog_size
5628   273C DA            push d
5629   273D 3B E1 4F      mov d, _prog_size ; $prog_size
5630   2740 2A            mov b, [d]
5631   2741 38 00 00      mov c, 0
5632   2744             ; --- START TERMS
5633   2744 D7            push a
5634   2745 11            mov a, b
5635   2746 FA 05 00      lea d, [bp + 5] ; $amount
5636   2749 32            mov bl, [d]
5637   274A A7 00         mov bh, 0
5638   274C 38 00 00      mov c, 0
5639   274F 56            add b, a
5640   2750 E4            pop a
5641   2751             ; --- END TERMS
5642   2751 E7            pop d
5643   2752 FD 43         mov [d], b
5644   2754             ; pc = pc + amount; 
5645   2754 3B 78 4E      mov d, _pc ; $pc
5646   2757 DA            push d
5647   2758 3B 78 4E      mov d, _pc ; $pc
5648   275B 2A            mov b, [d]
5649   275C 38 00 00      mov c, 0
5650   275F             ; --- START TERMS
5651   275F D7            push a
5652   2760 11            mov a, b
5653   2761 FA 05 00      lea d, [bp + 5] ; $amount
5654   2764 32            mov bl, [d]
5655   2765 A7 00         mov bh, 0
5656   2767 38 00 00      mov c, 0
5657   276A 56            add b, a
5658   276B E4            pop a
5659   276C             ; --- END TERMS
5660   276C E7            pop d
5661   276D FD 43         mov [d], b
5662   276F F9            leave
5663   2770 09            ret
5664   2771             
5665   2771             emit_byte:
5666   2771 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5667   2774             ; if(!emit_override){ 
5668   2774             _if145_cond:
5669   2774 FA 06 00      lea d, [bp + 6] ; $emit_override
5670   2777 32            mov bl, [d]
5671   2778 A7 00         mov bh, 0
5672   277A 38 00 00      mov c, 0
5673   277D C0 00 00      cmp b, 0
5674   2780 C6 9A 27      je _if145_exit
5675   2783             _if145_TRUE:
5676   2783             ; *bin_p = byte; 
5677   2783 3B C7 4F      mov d, _bin_p ; $bin_p
5678   2786 2A            mov b, [d]
5679   2787 38 00 00      mov c, 0
5680   278A D8            push b
5681   278B FA 05 00      lea d, [bp + 5] ; $byte
5682   278E 32            mov bl, [d]
5683   278F A7 00         mov bh, 0
5684   2791 38 00 00      mov c, 0
5685   2794 E7            pop d
5686   2795 FD 3E         mov [d], bl
5687   2797 0A 9A 27      jmp _if145_exit
5688   279A             _if145_exit:
5689   279A             ; forwards(1); 
5690   279A             ; --- START FUNCTION CALL
5691   279A FD 2E 01 00   mov32 cb, $00000001
5691   279E 00 00 
5692   27A0 DD            push bl
5693   27A1 07 1B 27      call forwards
5694   27A4 51 01 00      add sp, 1
5695   27A7             ; --- END FUNCTION CALL
5696   27A7 F9            leave
5697   27A8 09            ret
5698   27A9             
5699   27A9             emit_word:
5700   27A9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5701   27AC             ; if(!emit_override){ 
5702   27AC             _if146_cond:
5703   27AC FA 07 00      lea d, [bp + 7] ; $emit_override
5704   27AF 32            mov bl, [d]
5705   27B0 A7 00         mov bh, 0
5706   27B2 38 00 00      mov c, 0
5707   27B5 C0 00 00      cmp b, 0
5708   27B8 C6 D0 27      je _if146_exit
5709   27BB             _if146_TRUE:
5710   27BB             ; *((int*)bin_p) = word; 
5711   27BB 3B C7 4F      mov d, _bin_p ; $bin_p
5712   27BE 2A            mov b, [d]
5713   27BF 38 00 00      mov c, 0
5714   27C2 D8            push b
5715   27C3 FA 05 00      lea d, [bp + 5] ; $word
5716   27C6 2A            mov b, [d]
5717   27C7 38 00 00      mov c, 0
5718   27CA E7            pop d
5719   27CB FD 43         mov [d], b
5720   27CD 0A D0 27      jmp _if146_exit
5721   27D0             _if146_exit:
5722   27D0             ; forwards(2); 
5723   27D0             ; --- START FUNCTION CALL
5724   27D0 FD 2E 02 00   mov32 cb, $00000002
5724   27D4 00 00 
5725   27D6 DD            push bl
5726   27D7 07 1B 27      call forwards
5727   27DA 51 01 00      add sp, 1
5728   27DD             ; --- END FUNCTION CALL
5729   27DD F9            leave
5730   27DE 09            ret
5731   27DF             
5732   27DF             back:
5733   27DF F8 00 00      enter 0 ; (push bp; mov bp, sp)
5734   27E2             ; char *t; 
5735   27E2 52 02 00      sub sp, 2
5736   27E5             ; t = token; 
5737   27E5 FA FF FF      lea d, [bp + -1] ; $t
5738   27E8 DA            push d
5739   27E9 3B 81 4E      mov d, _token_data ; $token
5740   27EC 2D            mov b, d
5741   27ED 38 00 00      mov c, 0
5742   27F0 E7            pop d
5743   27F1 FD 43         mov [d], b
5744   27F3             ; while(*t){ 
5745   27F3             _while147_cond:
5746   27F3 FA FF FF      lea d, [bp + -1] ; $t
5747   27F6 2A            mov b, [d]
5748   27F7 38 00 00      mov c, 0
5749   27FA 74            mov d, b
5750   27FB 32            mov bl, [d]
5751   27FC A7 00         mov bh, 0
5752   27FE 38 00 00      mov c, 0
5753   2801 C0 00 00      cmp b, 0
5754   2804 C6 2A 28      je _while147_exit
5755   2807             _while147_block:
5756   2807             ; prog--; 
5757   2807 3B 7F 4E      mov d, _prog ; $prog
5758   280A 2A            mov b, [d]
5759   280B 38 00 00      mov c, 0
5760   280E FD 7D         dec b
5761   2810 3B 7F 4E      mov d, _prog ; $prog
5762   2813 FD 43         mov [d], b
5763   2815 FD 77         inc b
5764   2817             ; t++; 
5765   2817 FA FF FF      lea d, [bp + -1] ; $t
5766   281A 2A            mov b, [d]
5767   281B 38 00 00      mov c, 0
5768   281E FD 77         inc b
5769   2820 FA FF FF      lea d, [bp + -1] ; $t
5770   2823 FD 43         mov [d], b
5771   2825 FD 7D         dec b
5772   2827 0A F3 27      jmp _while147_cond
5773   282A             _while147_exit:
5774   282A F9            leave
5775   282B 09            ret
5776   282C             
5777   282C             get_path:
5778   282C F8 00 00      enter 0 ; (push bp; mov bp, sp)
5779   282F             ; char *t; 
5780   282F 52 02 00      sub sp, 2
5781   2832             ; *token = '\0'; 
5782   2832 3B 81 4E      mov d, _token_data ; $token
5783   2835 2D            mov b, d
5784   2836 38 00 00      mov c, 0
5785   2839 D8            push b
5786   283A FD 2E 00 00   mov32 cb, $00000000
5786   283E 00 00 
5787   2840 E7            pop d
5788   2841 FD 3E         mov [d], bl
5789   2843             ; tok = 0; 
5790   2843 3B 7B 4E      mov d, _tok ; $tok
5791   2846 DA            push d
5792   2847 FD 2E 00 00   mov32 cb, $00000000
5792   284B 00 00 
5793   284D E7            pop d
5794   284E FD 43         mov [d], b
5795   2850             ; toktype = 0; 
5796   2850 3B 7D 4E      mov d, _toktype ; $toktype
5797   2853 DA            push d
5798   2854 FD 2E 00 00   mov32 cb, $00000000
5798   2858 00 00 
5799   285A E7            pop d
5800   285B FD 43         mov [d], b
5801   285D             ; t = token; 
5802   285D FA FF FF      lea d, [bp + -1] ; $t
5803   2860 DA            push d
5804   2861 3B 81 4E      mov d, _token_data ; $token
5805   2864 2D            mov b, d
5806   2865 38 00 00      mov c, 0
5807   2868 E7            pop d
5808   2869 FD 43         mov [d], b
5809   286B             ; while(is_space(*prog)) prog++; 
5810   286B             _while148_cond:
5811   286B             ; --- START FUNCTION CALL
5812   286B 3B 7F 4E      mov d, _prog ; $prog
5813   286E 2A            mov b, [d]
5814   286F 38 00 00      mov c, 0
5815   2872 74            mov d, b
5816   2873 32            mov bl, [d]
5817   2874 A7 00         mov bh, 0
5818   2876 38 00 00      mov c, 0
5819   2879 DD            push bl
5820   287A 07 B3 3E      call is_space
5821   287D 51 01 00      add sp, 1
5822   2880             ; --- END FUNCTION CALL
5823   2880 C0 00 00      cmp b, 0
5824   2883 C6 99 28      je _while148_exit
5825   2886             _while148_block:
5826   2886             ; prog++; 
5827   2886 3B 7F 4E      mov d, _prog ; $prog
5828   2889 2A            mov b, [d]
5829   288A 38 00 00      mov c, 0
5830   288D FD 77         inc b
5831   288F 3B 7F 4E      mov d, _prog ; $prog
5832   2892 FD 43         mov [d], b
5833   2894 FD 7D         dec b
5834   2896 0A 6B 28      jmp _while148_cond
5835   2899             _while148_exit:
5836   2899             ; if(*prog == '\0'){ 
5837   2899             _if149_cond:
5838   2899 3B 7F 4E      mov d, _prog ; $prog
5839   289C 2A            mov b, [d]
5840   289D 38 00 00      mov c, 0
5841   28A0 74            mov d, b
5842   28A1 32            mov bl, [d]
5843   28A2 A7 00         mov bh, 0
5844   28A4 38 00 00      mov c, 0
5845   28A7             ; --- START RELATIONAL
5846   28A7 D7            push a
5847   28A8 11            mov a, b
5848   28A9 FD 2E 00 00   mov32 cb, $00000000
5848   28AD 00 00 
5849   28AF B0            cmp a, b
5850   28B0 FD 71         seq ; ==
5851   28B2 E4            pop a
5852   28B3             ; --- END RELATIONAL
5853   28B3 C0 00 00      cmp b, 0
5854   28B6 C6 CB 28      je _if149_exit
5855   28B9             _if149_TRUE:
5856   28B9             ; toktype = END; 
5857   28B9 3B 7D 4E      mov d, _toktype ; $toktype
5858   28BC DA            push d
5859   28BD FD 2E 07 00   mov32 cb, $7 ; enum element: END
5859   28C1 00 00 
5860   28C3 E7            pop d
5861   28C4 FD 43         mov [d], b
5862   28C6             ; return; 
5863   28C6 F9            leave
5864   28C7 09            ret
5865   28C8 0A CB 28      jmp _if149_exit
5866   28CB             _if149_exit:
5867   28CB             ; while(*prog == '/' || is_alpha(*prog) || is_digit(*prog) || *prog == '_' || *prog == '-' || *prog == '.') { 
5868   28CB             _while150_cond:
5869   28CB 3B 7F 4E      mov d, _prog ; $prog
5870   28CE 2A            mov b, [d]
5871   28CF 38 00 00      mov c, 0
5872   28D2 74            mov d, b
5873   28D3 32            mov bl, [d]
5874   28D4 A7 00         mov bh, 0
5875   28D6 38 00 00      mov c, 0
5876   28D9             ; --- START RELATIONAL
5877   28D9 D7            push a
5878   28DA 11            mov a, b
5879   28DB FD 2E 2F 00   mov32 cb, $0000002f
5879   28DF 00 00 
5880   28E1 B0            cmp a, b
5881   28E2 FD 71         seq ; ==
5882   28E4 E4            pop a
5883   28E5             ; --- END RELATIONAL
5884   28E5             ; --- START LOGICAL OR
5885   28E5 D7            push a
5886   28E6 11            mov a, b
5887   28E7             ; --- START FUNCTION CALL
5888   28E7 3B 7F 4E      mov d, _prog ; $prog
5889   28EA 2A            mov b, [d]
5890   28EB 38 00 00      mov c, 0
5891   28EE 74            mov d, b
5892   28EF 32            mov bl, [d]
5893   28F0 A7 00         mov bh, 0
5894   28F2 38 00 00      mov c, 0
5895   28F5 DD            push bl
5896   28F6 07 17 3F      call is_alpha
5897   28F9 51 01 00      add sp, 1
5898   28FC             ; --- END FUNCTION CALL
5899   28FC FD A8         sor a, b ; ||
5900   28FE 11            mov a, b
5901   28FF             ; --- START FUNCTION CALL
5902   28FF 3B 7F 4E      mov d, _prog ; $prog
5903   2902 2A            mov b, [d]
5904   2903 38 00 00      mov c, 0
5905   2906 74            mov d, b
5906   2907 32            mov bl, [d]
5907   2908 A7 00         mov bh, 0
5908   290A 38 00 00      mov c, 0
5909   290D DD            push bl
5910   290E 07 97 3F      call is_digit
5911   2911 51 01 00      add sp, 1
5912   2914             ; --- END FUNCTION CALL
5913   2914 FD A8         sor a, b ; ||
5914   2916 11            mov a, b
5915   2917 3B 7F 4E      mov d, _prog ; $prog
5916   291A 2A            mov b, [d]
5917   291B 38 00 00      mov c, 0
5918   291E 74            mov d, b
5919   291F 32            mov bl, [d]
5920   2920 A7 00         mov bh, 0
5921   2922 38 00 00      mov c, 0
5922   2925             ; --- START RELATIONAL
5923   2925 D7            push a
5924   2926 11            mov a, b
5925   2927 FD 2E 5F 00   mov32 cb, $0000005f
5925   292B 00 00 
5926   292D B0            cmp a, b
5927   292E FD 71         seq ; ==
5928   2930 E4            pop a
5929   2931             ; --- END RELATIONAL
5930   2931 FD A8         sor a, b ; ||
5931   2933 11            mov a, b
5932   2934 3B 7F 4E      mov d, _prog ; $prog
5933   2937 2A            mov b, [d]
5934   2938 38 00 00      mov c, 0
5935   293B 74            mov d, b
5936   293C 32            mov bl, [d]
5937   293D A7 00         mov bh, 0
5938   293F 38 00 00      mov c, 0
5939   2942             ; --- START RELATIONAL
5940   2942 D7            push a
5941   2943 11            mov a, b
5942   2944 FD 2E 2D 00   mov32 cb, $0000002d
5942   2948 00 00 
5943   294A B0            cmp a, b
5944   294B FD 71         seq ; ==
5945   294D E4            pop a
5946   294E             ; --- END RELATIONAL
5947   294E FD A8         sor a, b ; ||
5948   2950 11            mov a, b
5949   2951 3B 7F 4E      mov d, _prog ; $prog
5950   2954 2A            mov b, [d]
5951   2955 38 00 00      mov c, 0
5952   2958 74            mov d, b
5953   2959 32            mov bl, [d]
5954   295A A7 00         mov bh, 0
5955   295C 38 00 00      mov c, 0
5956   295F             ; --- START RELATIONAL
5957   295F D7            push a
5958   2960 11            mov a, b
5959   2961 FD 2E 2E 00   mov32 cb, $0000002e
5959   2965 00 00 
5960   2967 B0            cmp a, b
5961   2968 FD 71         seq ; ==
5962   296A E4            pop a
5963   296B             ; --- END RELATIONAL
5964   296B FD A8         sor a, b ; ||
5965   296D E4            pop a
5966   296E             ; --- END LOGICAL OR
5967   296E C0 00 00      cmp b, 0
5968   2971 C6 A2 29      je _while150_exit
5969   2974             _while150_block:
5970   2974             ; *t++ = *prog++; 
5971   2974 FA FF FF      lea d, [bp + -1] ; $t
5972   2977 2A            mov b, [d]
5973   2978 38 00 00      mov c, 0
5974   297B FD 77         inc b
5975   297D FA FF FF      lea d, [bp + -1] ; $t
5976   2980 FD 43         mov [d], b
5977   2982 FD 7D         dec b
5978   2984 D8            push b
5979   2985 3B 7F 4E      mov d, _prog ; $prog
5980   2988 2A            mov b, [d]
5981   2989 38 00 00      mov c, 0
5982   298C FD 77         inc b
5983   298E 3B 7F 4E      mov d, _prog ; $prog
5984   2991 FD 43         mov [d], b
5985   2993 FD 7D         dec b
5986   2995 74            mov d, b
5987   2996 32            mov bl, [d]
5988   2997 A7 00         mov bh, 0
5989   2999 38 00 00      mov c, 0
5990   299C E7            pop d
5991   299D FD 3E         mov [d], bl
5992   299F 0A CB 28      jmp _while150_cond
5993   29A2             _while150_exit:
5994   29A2             ; *t = '\0'; 
5995   29A2 FA FF FF      lea d, [bp + -1] ; $t
5996   29A5 2A            mov b, [d]
5997   29A6 38 00 00      mov c, 0
5998   29A9 D8            push b
5999   29AA FD 2E 00 00   mov32 cb, $00000000
5999   29AE 00 00 
6000   29B0 E7            pop d
6001   29B1 FD 3E         mov [d], bl
6002   29B3 F9            leave
6003   29B4 09            ret
6004   29B5             
6005   29B5             is_hex_digit:
6006   29B5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6007   29B8             ; return c >= '0' && c <= '9' || c >= 'A' && c <= 'F' || c >= 'a' && c <= 'f'; 
6008   29B8 FA 05 00      lea d, [bp + 5] ; $c
6009   29BB 32            mov bl, [d]
6010   29BC A7 00         mov bh, 0
6011   29BE 38 00 00      mov c, 0
6012   29C1             ; --- START RELATIONAL
6013   29C1 D7            push a
6014   29C2 11            mov a, b
6015   29C3 FD 2E 30 00   mov32 cb, $00000030
6015   29C7 00 00 
6016   29C9 B0            cmp a, b
6017   29CA FD 80         sge ; >=
6018   29CC E4            pop a
6019   29CD             ; --- END RELATIONAL
6020   29CD             ; --- START LOGICAL AND
6021   29CD D7            push a
6022   29CE 11            mov a, b
6023   29CF FA 05 00      lea d, [bp + 5] ; $c
6024   29D2 32            mov bl, [d]
6025   29D3 A7 00         mov bh, 0
6026   29D5 38 00 00      mov c, 0
6027   29D8             ; --- START RELATIONAL
6028   29D8 D7            push a
6029   29D9 11            mov a, b
6030   29DA FD 2E 39 00   mov32 cb, $00000039
6030   29DE 00 00 
6031   29E0 B0            cmp a, b
6032   29E1 FD 74         sle ; <= (signed)
6033   29E3 E4            pop a
6034   29E4             ; --- END RELATIONAL
6035   29E4 FD A7         sand a, b
6036   29E6 E4            pop a
6037   29E7             ; --- END LOGICAL AND
6038   29E7             ; --- START LOGICAL OR
6039   29E7 D7            push a
6040   29E8 11            mov a, b
6041   29E9 FA 05 00      lea d, [bp + 5] ; $c
6042   29EC 32            mov bl, [d]
6043   29ED A7 00         mov bh, 0
6044   29EF 38 00 00      mov c, 0
6045   29F2             ; --- START RELATIONAL
6046   29F2 D7            push a
6047   29F3 11            mov a, b
6048   29F4 FD 2E 41 00   mov32 cb, $00000041
6048   29F8 00 00 
6049   29FA B0            cmp a, b
6050   29FB FD 80         sge ; >=
6051   29FD E4            pop a
6052   29FE             ; --- END RELATIONAL
6053   29FE             ; --- START LOGICAL AND
6054   29FE D7            push a
6055   29FF 11            mov a, b
6056   2A00 FA 05 00      lea d, [bp + 5] ; $c
6057   2A03 32            mov bl, [d]
6058   2A04 A7 00         mov bh, 0
6059   2A06 38 00 00      mov c, 0
6060   2A09             ; --- START RELATIONAL
6061   2A09 D7            push a
6062   2A0A 11            mov a, b
6063   2A0B FD 2E 46 00   mov32 cb, $00000046
6063   2A0F 00 00 
6064   2A11 B0            cmp a, b
6065   2A12 FD 74         sle ; <= (signed)
6066   2A14 E4            pop a
6067   2A15             ; --- END RELATIONAL
6068   2A15 FD A7         sand a, b
6069   2A17 E4            pop a
6070   2A18             ; --- END LOGICAL AND
6071   2A18 FD A8         sor a, b ; ||
6072   2A1A 11            mov a, b
6073   2A1B FA 05 00      lea d, [bp + 5] ; $c
6074   2A1E 32            mov bl, [d]
6075   2A1F A7 00         mov bh, 0
6076   2A21 38 00 00      mov c, 0
6077   2A24             ; --- START RELATIONAL
6078   2A24 D7            push a
6079   2A25 11            mov a, b
6080   2A26 FD 2E 61 00   mov32 cb, $00000061
6080   2A2A 00 00 
6081   2A2C B0            cmp a, b
6082   2A2D FD 80         sge ; >=
6083   2A2F E4            pop a
6084   2A30             ; --- END RELATIONAL
6085   2A30             ; --- START LOGICAL AND
6086   2A30 D7            push a
6087   2A31 11            mov a, b
6088   2A32 FA 05 00      lea d, [bp + 5] ; $c
6089   2A35 32            mov bl, [d]
6090   2A36 A7 00         mov bh, 0
6091   2A38 38 00 00      mov c, 0
6092   2A3B             ; --- START RELATIONAL
6093   2A3B D7            push a
6094   2A3C 11            mov a, b
6095   2A3D FD 2E 66 00   mov32 cb, $00000066
6095   2A41 00 00 
6096   2A43 B0            cmp a, b
6097   2A44 FD 74         sle ; <= (signed)
6098   2A46 E4            pop a
6099   2A47             ; --- END RELATIONAL
6100   2A47 FD A7         sand a, b
6101   2A49 E4            pop a
6102   2A4A             ; --- END LOGICAL AND
6103   2A4A FD A8         sor a, b ; ||
6104   2A4C E4            pop a
6105   2A4D             ; --- END LOGICAL OR
6106   2A4D F9            leave
6107   2A4E 09            ret
6108   2A4F             
6109   2A4F             get_line:
6110   2A4F F8 00 00      enter 0 ; (push bp; mov bp, sp)
6111   2A52             ; char *t; 
6112   2A52 52 02 00      sub sp, 2
6113   2A55             ; t = string_const; 
6114   2A55 FA FF FF      lea d, [bp + -1] ; $t
6115   2A58 DA            push d
6116   2A59 3B C1 4E      mov d, _string_const_data ; $string_const
6117   2A5C 2D            mov b, d
6118   2A5D 38 00 00      mov c, 0
6119   2A60 E7            pop d
6120   2A61 FD 43         mov [d], b
6121   2A63             ; *t = '\0'; 
6122   2A63 FA FF FF      lea d, [bp + -1] ; $t
6123   2A66 2A            mov b, [d]
6124   2A67 38 00 00      mov c, 0
6125   2A6A D8            push b
6126   2A6B FD 2E 00 00   mov32 cb, $00000000
6126   2A6F 00 00 
6127   2A71 E7            pop d
6128   2A72 FD 3E         mov [d], bl
6129   2A74             ; while(*prog != 0x0A && *prog != '\0'){ 
6130   2A74             _while151_cond:
6131   2A74 3B 7F 4E      mov d, _prog ; $prog
6132   2A77 2A            mov b, [d]
6133   2A78 38 00 00      mov c, 0
6134   2A7B 74            mov d, b
6135   2A7C 32            mov bl, [d]
6136   2A7D A7 00         mov bh, 0
6137   2A7F 38 00 00      mov c, 0
6138   2A82             ; --- START RELATIONAL
6139   2A82 D7            push a
6140   2A83 11            mov a, b
6141   2A84 FD 2E 0A 00   mov32 cb, $0000000a
6141   2A88 00 00 
6142   2A8A B0            cmp a, b
6143   2A8B FD 72         sneq ; !=
6144   2A8D E4            pop a
6145   2A8E             ; --- END RELATIONAL
6146   2A8E             ; --- START LOGICAL AND
6147   2A8E D7            push a
6148   2A8F 11            mov a, b
6149   2A90 3B 7F 4E      mov d, _prog ; $prog
6150   2A93 2A            mov b, [d]
6151   2A94 38 00 00      mov c, 0
6152   2A97 74            mov d, b
6153   2A98 32            mov bl, [d]
6154   2A99 A7 00         mov bh, 0
6155   2A9B 38 00 00      mov c, 0
6156   2A9E             ; --- START RELATIONAL
6157   2A9E D7            push a
6158   2A9F 11            mov a, b
6159   2AA0 FD 2E 00 00   mov32 cb, $00000000
6159   2AA4 00 00 
6160   2AA6 B0            cmp a, b
6161   2AA7 FD 72         sneq ; !=
6162   2AA9 E4            pop a
6163   2AAA             ; --- END RELATIONAL
6164   2AAA FD A7         sand a, b
6165   2AAC E4            pop a
6166   2AAD             ; --- END LOGICAL AND
6167   2AAD C0 00 00      cmp b, 0
6168   2AB0 C6 59 2B      je _while151_exit
6169   2AB3             _while151_block:
6170   2AB3             ; if(*prog == ';'){ 
6171   2AB3             _if152_cond:
6172   2AB3 3B 7F 4E      mov d, _prog ; $prog
6173   2AB6 2A            mov b, [d]
6174   2AB7 38 00 00      mov c, 0
6175   2ABA 74            mov d, b
6176   2ABB 32            mov bl, [d]
6177   2ABC A7 00         mov bh, 0
6178   2ABE 38 00 00      mov c, 0
6179   2AC1             ; --- START RELATIONAL
6180   2AC1 D7            push a
6181   2AC2 11            mov a, b
6182   2AC3 FD 2E 3B 00   mov32 cb, $0000003b
6182   2AC7 00 00 
6183   2AC9 B0            cmp a, b
6184   2ACA FD 71         seq ; ==
6185   2ACC E4            pop a
6186   2ACD             ; --- END RELATIONAL
6187   2ACD C0 00 00      cmp b, 0
6188   2AD0 C6 2B 2B      je _if152_else
6189   2AD3             _if152_TRUE:
6190   2AD3             ; while(*prog != 0x0A && *prog != '\0') prog++; 
6191   2AD3             _while153_cond:
6192   2AD3 3B 7F 4E      mov d, _prog ; $prog
6193   2AD6 2A            mov b, [d]
6194   2AD7 38 00 00      mov c, 0
6195   2ADA 74            mov d, b
6196   2ADB 32            mov bl, [d]
6197   2ADC A7 00         mov bh, 0
6198   2ADE 38 00 00      mov c, 0
6199   2AE1             ; --- START RELATIONAL
6200   2AE1 D7            push a
6201   2AE2 11            mov a, b
6202   2AE3 FD 2E 0A 00   mov32 cb, $0000000a
6202   2AE7 00 00 
6203   2AE9 B0            cmp a, b
6204   2AEA FD 72         sneq ; !=
6205   2AEC E4            pop a
6206   2AED             ; --- END RELATIONAL
6207   2AED             ; --- START LOGICAL AND
6208   2AED D7            push a
6209   2AEE 11            mov a, b
6210   2AEF 3B 7F 4E      mov d, _prog ; $prog
6211   2AF2 2A            mov b, [d]
6212   2AF3 38 00 00      mov c, 0
6213   2AF6 74            mov d, b
6214   2AF7 32            mov bl, [d]
6215   2AF8 A7 00         mov bh, 0
6216   2AFA 38 00 00      mov c, 0
6217   2AFD             ; --- START RELATIONAL
6218   2AFD D7            push a
6219   2AFE 11            mov a, b
6220   2AFF FD 2E 00 00   mov32 cb, $00000000
6220   2B03 00 00 
6221   2B05 B0            cmp a, b
6222   2B06 FD 72         sneq ; !=
6223   2B08 E4            pop a
6224   2B09             ; --- END RELATIONAL
6225   2B09 FD A7         sand a, b
6226   2B0B E4            pop a
6227   2B0C             ; --- END LOGICAL AND
6228   2B0C C0 00 00      cmp b, 0
6229   2B0F C6 25 2B      je _while153_exit
6230   2B12             _while153_block:
6231   2B12             ; prog++; 
6232   2B12 3B 7F 4E      mov d, _prog ; $prog
6233   2B15 2A            mov b, [d]
6234   2B16 38 00 00      mov c, 0
6235   2B19 FD 77         inc b
6236   2B1B 3B 7F 4E      mov d, _prog ; $prog
6237   2B1E FD 43         mov [d], b
6238   2B20 FD 7D         dec b
6239   2B22 0A D3 2A      jmp _while153_cond
6240   2B25             _while153_exit:
6241   2B25             ; break; 
6242   2B25 0A 59 2B      jmp _while151_exit ; while break
6243   2B28 0A 56 2B      jmp _if152_exit
6244   2B2B             _if152_else:
6245   2B2B             ; *t++ = *prog++; 
6246   2B2B FA FF FF      lea d, [bp + -1] ; $t
6247   2B2E 2A            mov b, [d]
6248   2B2F 38 00 00      mov c, 0
6249   2B32 FD 77         inc b
6250   2B34 FA FF FF      lea d, [bp + -1] ; $t
6251   2B37 FD 43         mov [d], b
6252   2B39 FD 7D         dec b
6253   2B3B D8            push b
6254   2B3C 3B 7F 4E      mov d, _prog ; $prog
6255   2B3F 2A            mov b, [d]
6256   2B40 38 00 00      mov c, 0
6257   2B43 FD 77         inc b
6258   2B45 3B 7F 4E      mov d, _prog ; $prog
6259   2B48 FD 43         mov [d], b
6260   2B4A FD 7D         dec b
6261   2B4C 74            mov d, b
6262   2B4D 32            mov bl, [d]
6263   2B4E A7 00         mov bh, 0
6264   2B50 38 00 00      mov c, 0
6265   2B53 E7            pop d
6266   2B54 FD 3E         mov [d], bl
6267   2B56             _if152_exit:
6268   2B56 0A 74 2A      jmp _while151_cond
6269   2B59             _while151_exit:
6270   2B59             ; *t = '\0'; 
6271   2B59 FA FF FF      lea d, [bp + -1] ; $t
6272   2B5C 2A            mov b, [d]
6273   2B5D 38 00 00      mov c, 0
6274   2B60 D8            push b
6275   2B61 FD 2E 00 00   mov32 cb, $00000000
6275   2B65 00 00 
6276   2B67 E7            pop d
6277   2B68 FD 3E         mov [d], bl
6278   2B6A F9            leave
6279   2B6B 09            ret
6280   2B6C             
6281   2B6C             get:
6282   2B6C F8 00 00      enter 0 ; (push bp; mov bp, sp)
6283   2B6F             ; char *t; 
6284   2B6F 52 02 00      sub sp, 2
6285   2B72             ; char temp_hex[64]; 
6286   2B72 52 40 00      sub sp, 64
6287   2B75             ; char *p; 
6288   2B75 52 02 00      sub sp, 2
6289   2B78             ; *token = '\0'; 
6290   2B78 3B 81 4E      mov d, _token_data ; $token
6291   2B7B 2D            mov b, d
6292   2B7C 38 00 00      mov c, 0
6293   2B7F D8            push b
6294   2B80 FD 2E 00 00   mov32 cb, $00000000
6294   2B84 00 00 
6295   2B86 E7            pop d
6296   2B87 FD 3E         mov [d], bl
6297   2B89             ; tok = TOK_UNDEF; 
6298   2B89 3B 7B 4E      mov d, _tok ; $tok
6299   2B8C DA            push d
6300   2B8D FD 2E 00 00   mov32 cb, $0 ; enum element: TOK_UNDEF
6300   2B91 00 00 
6301   2B93 E7            pop d
6302   2B94 FD 43         mov [d], b
6303   2B96             ; toktype = TYPE_UNDEF; 
6304   2B96 3B 7D 4E      mov d, _toktype ; $toktype
6305   2B99 DA            push d
6306   2B9A FD 2E 00 00   mov32 cb, $0 ; enum element: TYPE_UNDEF
6306   2B9E 00 00 
6307   2BA0 E7            pop d
6308   2BA1 FD 43         mov [d], b
6309   2BA3             ; t = token; 
6310   2BA3 FA FF FF      lea d, [bp + -1] ; $t
6311   2BA6 DA            push d
6312   2BA7 3B 81 4E      mov d, _token_data ; $token
6313   2BAA 2D            mov b, d
6314   2BAB 38 00 00      mov c, 0
6315   2BAE E7            pop d
6316   2BAF FD 43         mov [d], b
6317   2BB1             ; do{ 
6318   2BB1             _do154_block:
6319   2BB1             ; while(is_space(*prog)) prog++; 
6320   2BB1             _while155_cond:
6321   2BB1             ; --- START FUNCTION CALL
6322   2BB1 3B 7F 4E      mov d, _prog ; $prog
6323   2BB4 2A            mov b, [d]
6324   2BB5 38 00 00      mov c, 0
6325   2BB8 74            mov d, b
6326   2BB9 32            mov bl, [d]
6327   2BBA A7 00         mov bh, 0
6328   2BBC 38 00 00      mov c, 0
6329   2BBF DD            push bl
6330   2BC0 07 B3 3E      call is_space
6331   2BC3 51 01 00      add sp, 1
6332   2BC6             ; --- END FUNCTION CALL
6333   2BC6 C0 00 00      cmp b, 0
6334   2BC9 C6 DF 2B      je _while155_exit
6335   2BCC             _while155_block:
6336   2BCC             ; prog++; 
6337   2BCC 3B 7F 4E      mov d, _prog ; $prog
6338   2BCF 2A            mov b, [d]
6339   2BD0 38 00 00      mov c, 0
6340   2BD3 FD 77         inc b
6341   2BD5 3B 7F 4E      mov d, _prog ; $prog
6342   2BD8 FD 43         mov [d], b
6343   2BDA FD 7D         dec b
6344   2BDC 0A B1 2B      jmp _while155_cond
6345   2BDF             _while155_exit:
6346   2BDF             ; if(*prog == ';'){ 
6347   2BDF             _if156_cond:
6348   2BDF 3B 7F 4E      mov d, _prog ; $prog
6349   2BE2 2A            mov b, [d]
6350   2BE3 38 00 00      mov c, 0
6351   2BE6 74            mov d, b
6352   2BE7 32            mov bl, [d]
6353   2BE8 A7 00         mov bh, 0
6354   2BEA 38 00 00      mov c, 0
6355   2BED             ; --- START RELATIONAL
6356   2BED D7            push a
6357   2BEE 11            mov a, b
6358   2BEF FD 2E 3B 00   mov32 cb, $0000003b
6358   2BF3 00 00 
6359   2BF5 B0            cmp a, b
6360   2BF6 FD 71         seq ; ==
6361   2BF8 E4            pop a
6362   2BF9             ; --- END RELATIONAL
6363   2BF9 C0 00 00      cmp b, 0
6364   2BFC C6 68 2C      je _if156_exit
6365   2BFF             _if156_TRUE:
6366   2BFF             ; while(*prog != '\n') prog++; 
6367   2BFF             _while157_cond:
6368   2BFF 3B 7F 4E      mov d, _prog ; $prog
6369   2C02 2A            mov b, [d]
6370   2C03 38 00 00      mov c, 0
6371   2C06 74            mov d, b
6372   2C07 32            mov bl, [d]
6373   2C08 A7 00         mov bh, 0
6374   2C0A 38 00 00      mov c, 0
6375   2C0D             ; --- START RELATIONAL
6376   2C0D D7            push a
6377   2C0E 11            mov a, b
6378   2C0F FD 2E 0A 00   mov32 cb, $0000000a
6378   2C13 00 00 
6379   2C15 B0            cmp a, b
6380   2C16 FD 72         sneq ; !=
6381   2C18 E4            pop a
6382   2C19             ; --- END RELATIONAL
6383   2C19 C0 00 00      cmp b, 0
6384   2C1C C6 32 2C      je _while157_exit
6385   2C1F             _while157_block:
6386   2C1F             ; prog++; 
6387   2C1F 3B 7F 4E      mov d, _prog ; $prog
6388   2C22 2A            mov b, [d]
6389   2C23 38 00 00      mov c, 0
6390   2C26 FD 77         inc b
6391   2C28 3B 7F 4E      mov d, _prog ; $prog
6392   2C2B FD 43         mov [d], b
6393   2C2D FD 7D         dec b
6394   2C2F 0A FF 2B      jmp _while157_cond
6395   2C32             _while157_exit:
6396   2C32             ; if(*prog == '\n') prog++; 
6397   2C32             _if158_cond:
6398   2C32 3B 7F 4E      mov d, _prog ; $prog
6399   2C35 2A            mov b, [d]
6400   2C36 38 00 00      mov c, 0
6401   2C39 74            mov d, b
6402   2C3A 32            mov bl, [d]
6403   2C3B A7 00         mov bh, 0
6404   2C3D 38 00 00      mov c, 0
6405   2C40             ; --- START RELATIONAL
6406   2C40 D7            push a
6407   2C41 11            mov a, b
6408   2C42 FD 2E 0A 00   mov32 cb, $0000000a
6408   2C46 00 00 
6409   2C48 B0            cmp a, b
6410   2C49 FD 71         seq ; ==
6411   2C4B E4            pop a
6412   2C4C             ; --- END RELATIONAL
6413   2C4C C0 00 00      cmp b, 0
6414   2C4F C6 65 2C      je _if158_exit
6415   2C52             _if158_TRUE:
6416   2C52             ; prog++; 
6417   2C52 3B 7F 4E      mov d, _prog ; $prog
6418   2C55 2A            mov b, [d]
6419   2C56 38 00 00      mov c, 0
6420   2C59 FD 77         inc b
6421   2C5B 3B 7F 4E      mov d, _prog ; $prog
6422   2C5E FD 43         mov [d], b
6423   2C60 FD 7D         dec b
6424   2C62 0A 65 2C      jmp _if158_exit
6425   2C65             _if158_exit:
6426   2C65 0A 68 2C      jmp _if156_exit
6427   2C68             _if156_exit:
6428   2C68             ; } while(is_space(*prog) || *prog == ';'); 
6429   2C68             _do154_cond:
6430   2C68             ; --- START FUNCTION CALL
6431   2C68 3B 7F 4E      mov d, _prog ; $prog
6432   2C6B 2A            mov b, [d]
6433   2C6C 38 00 00      mov c, 0
6434   2C6F 74            mov d, b
6435   2C70 32            mov bl, [d]
6436   2C71 A7 00         mov bh, 0
6437   2C73 38 00 00      mov c, 0
6438   2C76 DD            push bl
6439   2C77 07 B3 3E      call is_space
6440   2C7A 51 01 00      add sp, 1
6441   2C7D             ; --- END FUNCTION CALL
6442   2C7D             ; --- START LOGICAL OR
6443   2C7D D7            push a
6444   2C7E 11            mov a, b
6445   2C7F 3B 7F 4E      mov d, _prog ; $prog
6446   2C82 2A            mov b, [d]
6447   2C83 38 00 00      mov c, 0
6448   2C86 74            mov d, b
6449   2C87 32            mov bl, [d]
6450   2C88 A7 00         mov bh, 0
6451   2C8A 38 00 00      mov c, 0
6452   2C8D             ; --- START RELATIONAL
6453   2C8D D7            push a
6454   2C8E 11            mov a, b
6455   2C8F FD 2E 3B 00   mov32 cb, $0000003b
6455   2C93 00 00 
6456   2C95 B0            cmp a, b
6457   2C96 FD 71         seq ; ==
6458   2C98 E4            pop a
6459   2C99             ; --- END RELATIONAL
6460   2C99 FD A8         sor a, b ; ||
6461   2C9B E4            pop a
6462   2C9C             ; --- END LOGICAL OR
6463   2C9C C0 01 00      cmp b, 1
6464   2C9F C6 B1 2B      je _do154_block
6465   2CA2             _do154_exit:
6466   2CA2             ; if(*prog == '\0'){ 
6467   2CA2             _if159_cond:
6468   2CA2 3B 7F 4E      mov d, _prog ; $prog
6469   2CA5 2A            mov b, [d]
6470   2CA6 38 00 00      mov c, 0
6471   2CA9 74            mov d, b
6472   2CAA 32            mov bl, [d]
6473   2CAB A7 00         mov bh, 0
6474   2CAD 38 00 00      mov c, 0
6475   2CB0             ; --- START RELATIONAL
6476   2CB0 D7            push a
6477   2CB1 11            mov a, b
6478   2CB2 FD 2E 00 00   mov32 cb, $00000000
6478   2CB6 00 00 
6479   2CB8 B0            cmp a, b
6480   2CB9 FD 71         seq ; ==
6481   2CBB E4            pop a
6482   2CBC             ; --- END RELATIONAL
6483   2CBC C0 00 00      cmp b, 0
6484   2CBF C6 D4 2C      je _if159_exit
6485   2CC2             _if159_TRUE:
6486   2CC2             ; toktype = END; 
6487   2CC2 3B 7D 4E      mov d, _toktype ; $toktype
6488   2CC5 DA            push d
6489   2CC6 FD 2E 07 00   mov32 cb, $7 ; enum element: END
6489   2CCA 00 00 
6490   2CCC E7            pop d
6491   2CCD FD 43         mov [d], b
6492   2CCF             ; return; 
6493   2CCF F9            leave
6494   2CD0 09            ret
6495   2CD1 0A D4 2C      jmp _if159_exit
6496   2CD4             _if159_exit:
6497   2CD4             ; if(is_alpha(*prog)){ 
6498   2CD4             _if160_cond:
6499   2CD4             ; --- START FUNCTION CALL
6500   2CD4 3B 7F 4E      mov d, _prog ; $prog
6501   2CD7 2A            mov b, [d]
6502   2CD8 38 00 00      mov c, 0
6503   2CDB 74            mov d, b
6504   2CDC 32            mov bl, [d]
6505   2CDD A7 00         mov bh, 0
6506   2CDF 38 00 00      mov c, 0
6507   2CE2 DD            push bl
6508   2CE3 07 17 3F      call is_alpha
6509   2CE6 51 01 00      add sp, 1
6510   2CE9             ; --- END FUNCTION CALL
6511   2CE9 C0 00 00      cmp b, 0
6512   2CEC C6 AC 2D      je _if160_else
6513   2CEF             _if160_TRUE:
6514   2CEF             ; while(is_alpha(*prog) || is_digit(*prog)){ 
6515   2CEF             _while161_cond:
6516   2CEF             ; --- START FUNCTION CALL
6517   2CEF 3B 7F 4E      mov d, _prog ; $prog
6518   2CF2 2A            mov b, [d]
6519   2CF3 38 00 00      mov c, 0
6520   2CF6 74            mov d, b
6521   2CF7 32            mov bl, [d]
6522   2CF8 A7 00         mov bh, 0
6523   2CFA 38 00 00      mov c, 0
6524   2CFD DD            push bl
6525   2CFE 07 17 3F      call is_alpha
6526   2D01 51 01 00      add sp, 1
6527   2D04             ; --- END FUNCTION CALL
6528   2D04             ; --- START LOGICAL OR
6529   2D04 D7            push a
6530   2D05 11            mov a, b
6531   2D06             ; --- START FUNCTION CALL
6532   2D06 3B 7F 4E      mov d, _prog ; $prog
6533   2D09 2A            mov b, [d]
6534   2D0A 38 00 00      mov c, 0
6535   2D0D 74            mov d, b
6536   2D0E 32            mov bl, [d]
6537   2D0F A7 00         mov bh, 0
6538   2D11 38 00 00      mov c, 0
6539   2D14 DD            push bl
6540   2D15 07 97 3F      call is_digit
6541   2D18 51 01 00      add sp, 1
6542   2D1B             ; --- END FUNCTION CALL
6543   2D1B FD A8         sor a, b ; ||
6544   2D1D E4            pop a
6545   2D1E             ; --- END LOGICAL OR
6546   2D1E C0 00 00      cmp b, 0
6547   2D21 C6 52 2D      je _while161_exit
6548   2D24             _while161_block:
6549   2D24             ; *t++ = *prog++; 
6550   2D24 FA FF FF      lea d, [bp + -1] ; $t
6551   2D27 2A            mov b, [d]
6552   2D28 38 00 00      mov c, 0
6553   2D2B FD 77         inc b
6554   2D2D FA FF FF      lea d, [bp + -1] ; $t
6555   2D30 FD 43         mov [d], b
6556   2D32 FD 7D         dec b
6557   2D34 D8            push b
6558   2D35 3B 7F 4E      mov d, _prog ; $prog
6559   2D38 2A            mov b, [d]
6560   2D39 38 00 00      mov c, 0
6561   2D3C FD 77         inc b
6562   2D3E 3B 7F 4E      mov d, _prog ; $prog
6563   2D41 FD 43         mov [d], b
6564   2D43 FD 7D         dec b
6565   2D45 74            mov d, b
6566   2D46 32            mov bl, [d]
6567   2D47 A7 00         mov bh, 0
6568   2D49 38 00 00      mov c, 0
6569   2D4C E7            pop d
6570   2D4D FD 3E         mov [d], bl
6571   2D4F 0A EF 2C      jmp _while161_cond
6572   2D52             _while161_exit:
6573   2D52             ; *t = '\0'; 
6574   2D52 FA FF FF      lea d, [bp + -1] ; $t
6575   2D55 2A            mov b, [d]
6576   2D56 38 00 00      mov c, 0
6577   2D59 D8            push b
6578   2D5A FD 2E 00 00   mov32 cb, $00000000
6578   2D5E 00 00 
6579   2D60 E7            pop d
6580   2D61 FD 3E         mov [d], bl
6581   2D63             ; if((tok = search_keyword(token)) != -1)  
6582   2D63             _if162_cond:
6583   2D63 3B 7B 4E      mov d, _tok ; $tok
6584   2D66 DA            push d
6585   2D67             ; --- START FUNCTION CALL
6586   2D67 3B 81 4E      mov d, _token_data ; $token
6587   2D6A 2D            mov b, d
6588   2D6B 38 00 00      mov c, 0
6589   2D6E FD AB         swp b
6590   2D70 D8            push b
6591   2D71 07 84 3A      call search_keyword
6592   2D74 51 02 00      add sp, 2
6593   2D77             ; --- END FUNCTION CALL
6594   2D77 E7            pop d
6595   2D78 FD 43         mov [d], b
6596   2D7A             ; --- START RELATIONAL
6597   2D7A D7            push a
6598   2D7B 11            mov a, b
6599   2D7C FD 2E FF FF   mov32 cb, $ffffffff
6599   2D80 FF FF 
6600   2D82 B0            cmp a, b
6601   2D83 FD 72         sneq ; !=
6602   2D85 E4            pop a
6603   2D86             ; --- END RELATIONAL
6604   2D86 C0 00 00      cmp b, 0
6605   2D89 C6 9C 2D      je _if162_else
6606   2D8C             _if162_TRUE:
6607   2D8C             ; toktype = KEYWORD; 
6608   2D8C 3B 7D 4E      mov d, _toktype ; $toktype
6609   2D8F DA            push d
6610   2D90 FD 2E 01 00   mov32 cb, $1 ; enum element: KEYWORD
6610   2D94 00 00 
6611   2D96 E7            pop d
6612   2D97 FD 43         mov [d], b
6613   2D99 0A A9 2D      jmp _if162_exit
6614   2D9C             _if162_else:
6615   2D9C             ; toktype = IDENTIFIER; 
6616   2D9C 3B 7D 4E      mov d, _toktype ; $toktype
6617   2D9F DA            push d
6618   2DA0 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
6618   2DA4 00 00 
6619   2DA6 E7            pop d
6620   2DA7 FD 43         mov [d], b
6621   2DA9             _if162_exit:
6622   2DA9 0A 14 36      jmp _if160_exit
6623   2DAC             _if160_else:
6624   2DAC             ; if(is_digit(*prog) || (*prog == '$' && is_hex_digit(*(prog+1)))){ 
6625   2DAC             _if163_cond:
6626   2DAC             ; --- START FUNCTION CALL
6627   2DAC 3B 7F 4E      mov d, _prog ; $prog
6628   2DAF 2A            mov b, [d]
6629   2DB0 38 00 00      mov c, 0
6630   2DB3 74            mov d, b
6631   2DB4 32            mov bl, [d]
6632   2DB5 A7 00         mov bh, 0
6633   2DB7 38 00 00      mov c, 0
6634   2DBA DD            push bl
6635   2DBB 07 97 3F      call is_digit
6636   2DBE 51 01 00      add sp, 1
6637   2DC1             ; --- END FUNCTION CALL
6638   2DC1             ; --- START LOGICAL OR
6639   2DC1 D7            push a
6640   2DC2 11            mov a, b
6641   2DC3 3B 7F 4E      mov d, _prog ; $prog
6642   2DC6 2A            mov b, [d]
6643   2DC7 38 00 00      mov c, 0
6644   2DCA 74            mov d, b
6645   2DCB 32            mov bl, [d]
6646   2DCC A7 00         mov bh, 0
6647   2DCE 38 00 00      mov c, 0
6648   2DD1             ; --- START RELATIONAL
6649   2DD1 D7            push a
6650   2DD2 11            mov a, b
6651   2DD3 FD 2E 24 00   mov32 cb, $00000024
6651   2DD7 00 00 
6652   2DD9 B0            cmp a, b
6653   2DDA FD 71         seq ; ==
6654   2DDC E4            pop a
6655   2DDD             ; --- END RELATIONAL
6656   2DDD             ; --- START LOGICAL AND
6657   2DDD D7            push a
6658   2DDE 11            mov a, b
6659   2DDF             ; --- START FUNCTION CALL
6660   2DDF 3B 7F 4E      mov d, _prog ; $prog
6661   2DE2 2A            mov b, [d]
6662   2DE3 38 00 00      mov c, 0
6663   2DE6             ; --- START TERMS
6664   2DE6 D7            push a
6665   2DE7 11            mov a, b
6666   2DE8 FD 2E 01 00   mov32 cb, $00000001
6666   2DEC 00 00 
6667   2DEE 56            add b, a
6668   2DEF E4            pop a
6669   2DF0             ; --- END TERMS
6670   2DF0 74            mov d, b
6671   2DF1 32            mov bl, [d]
6672   2DF2 A7 00         mov bh, 0
6673   2DF4 38 00 00      mov c, 0
6674   2DF7 DD            push bl
6675   2DF8 07 B5 29      call is_hex_digit
6676   2DFB 51 01 00      add sp, 1
6677   2DFE             ; --- END FUNCTION CALL
6678   2DFE FD A7         sand a, b
6679   2E00 E4            pop a
6680   2E01             ; --- END LOGICAL AND
6681   2E01 FD A8         sor a, b ; ||
6682   2E03 E4            pop a
6683   2E04             ; --- END LOGICAL OR
6684   2E04 C0 00 00      cmp b, 0
6685   2E07 C6 DA 2F      je _if163_else
6686   2E0A             _if163_TRUE:
6687   2E0A             ; if(*prog == '$' && is_hex_digit(*(prog+1))){ 
6688   2E0A             _if164_cond:
6689   2E0A 3B 7F 4E      mov d, _prog ; $prog
6690   2E0D 2A            mov b, [d]
6691   2E0E 38 00 00      mov c, 0
6692   2E11 74            mov d, b
6693   2E12 32            mov bl, [d]
6694   2E13 A7 00         mov bh, 0
6695   2E15 38 00 00      mov c, 0
6696   2E18             ; --- START RELATIONAL
6697   2E18 D7            push a
6698   2E19 11            mov a, b
6699   2E1A FD 2E 24 00   mov32 cb, $00000024
6699   2E1E 00 00 
6700   2E20 B0            cmp a, b
6701   2E21 FD 71         seq ; ==
6702   2E23 E4            pop a
6703   2E24             ; --- END RELATIONAL
6704   2E24             ; --- START LOGICAL AND
6705   2E24 D7            push a
6706   2E25 11            mov a, b
6707   2E26             ; --- START FUNCTION CALL
6708   2E26 3B 7F 4E      mov d, _prog ; $prog
6709   2E29 2A            mov b, [d]
6710   2E2A 38 00 00      mov c, 0
6711   2E2D             ; --- START TERMS
6712   2E2D D7            push a
6713   2E2E 11            mov a, b
6714   2E2F FD 2E 01 00   mov32 cb, $00000001
6714   2E33 00 00 
6715   2E35 56            add b, a
6716   2E36 E4            pop a
6717   2E37             ; --- END TERMS
6718   2E37 74            mov d, b
6719   2E38 32            mov bl, [d]
6720   2E39 A7 00         mov bh, 0
6721   2E3B 38 00 00      mov c, 0
6722   2E3E DD            push bl
6723   2E3F 07 B5 29      call is_hex_digit
6724   2E42 51 01 00      add sp, 1
6725   2E45             ; --- END FUNCTION CALL
6726   2E45 FD A7         sand a, b
6727   2E47 E4            pop a
6728   2E48             ; --- END LOGICAL AND
6729   2E48 C0 00 00      cmp b, 0
6730   2E4B C6 59 2F      je _if164_else
6731   2E4E             _if164_TRUE:
6732   2E4E             ; *t++ = *prog++; 
6733   2E4E FA FF FF      lea d, [bp + -1] ; $t
6734   2E51 2A            mov b, [d]
6735   2E52 38 00 00      mov c, 0
6736   2E55 FD 77         inc b
6737   2E57 FA FF FF      lea d, [bp + -1] ; $t
6738   2E5A FD 43         mov [d], b
6739   2E5C FD 7D         dec b
6740   2E5E D8            push b
6741   2E5F 3B 7F 4E      mov d, _prog ; $prog
6742   2E62 2A            mov b, [d]
6743   2E63 38 00 00      mov c, 0
6744   2E66 FD 77         inc b
6745   2E68 3B 7F 4E      mov d, _prog ; $prog
6746   2E6B FD 43         mov [d], b
6747   2E6D FD 7D         dec b
6748   2E6F 74            mov d, b
6749   2E70 32            mov bl, [d]
6750   2E71 A7 00         mov bh, 0
6751   2E73 38 00 00      mov c, 0
6752   2E76 E7            pop d
6753   2E77 FD 3E         mov [d], bl
6754   2E79             ; p = temp_hex; 
6755   2E79 FA BD FF      lea d, [bp + -67] ; $p
6756   2E7C DA            push d
6757   2E7D FA BF FF      lea d, [bp + -65] ; $temp_hex
6758   2E80 2D            mov b, d
6759   2E81 38 00 00      mov c, 0
6760   2E84 E7            pop d
6761   2E85 FD 43         mov [d], b
6762   2E87             ; *t++ = *p++ = *prog++; 
6763   2E87 FA FF FF      lea d, [bp + -1] ; $t
6764   2E8A 2A            mov b, [d]
6765   2E8B 38 00 00      mov c, 0
6766   2E8E FD 77         inc b
6767   2E90 FA FF FF      lea d, [bp + -1] ; $t
6768   2E93 FD 43         mov [d], b
6769   2E95 FD 7D         dec b
6770   2E97 D8            push b
6771   2E98 FA BD FF      lea d, [bp + -67] ; $p
6772   2E9B 2A            mov b, [d]
6773   2E9C 38 00 00      mov c, 0
6774   2E9F FD 77         inc b
6775   2EA1 FA BD FF      lea d, [bp + -67] ; $p
6776   2EA4 FD 43         mov [d], b
6777   2EA6 FD 7D         dec b
6778   2EA8 D8            push b
6779   2EA9 3B 7F 4E      mov d, _prog ; $prog
6780   2EAC 2A            mov b, [d]
6781   2EAD 38 00 00      mov c, 0
6782   2EB0 FD 77         inc b
6783   2EB2 3B 7F 4E      mov d, _prog ; $prog
6784   2EB5 FD 43         mov [d], b
6785   2EB7 FD 7D         dec b
6786   2EB9 74            mov d, b
6787   2EBA 32            mov bl, [d]
6788   2EBB A7 00         mov bh, 0
6789   2EBD 38 00 00      mov c, 0
6790   2EC0 E7            pop d
6791   2EC1 FD 3E         mov [d], bl
6792   2EC3 E7            pop d
6793   2EC4 FD 3E         mov [d], bl
6794   2EC6             ; while(is_hex_digit(*prog)){ 
6795   2EC6             _while165_cond:
6796   2EC6             ; --- START FUNCTION CALL
6797   2EC6 3B 7F 4E      mov d, _prog ; $prog
6798   2EC9 2A            mov b, [d]
6799   2ECA 38 00 00      mov c, 0
6800   2ECD 74            mov d, b
6801   2ECE 32            mov bl, [d]
6802   2ECF A7 00         mov bh, 0
6803   2ED1 38 00 00      mov c, 0
6804   2ED4 DD            push bl
6805   2ED5 07 B5 29      call is_hex_digit
6806   2ED8 51 01 00      add sp, 1
6807   2EDB             ; --- END FUNCTION CALL
6808   2EDB C0 00 00      cmp b, 0
6809   2EDE C6 23 2F      je _while165_exit
6810   2EE1             _while165_block:
6811   2EE1             ; *t++ = *p++ = *prog++; 
6812   2EE1 FA FF FF      lea d, [bp + -1] ; $t
6813   2EE4 2A            mov b, [d]
6814   2EE5 38 00 00      mov c, 0
6815   2EE8 FD 77         inc b
6816   2EEA FA FF FF      lea d, [bp + -1] ; $t
6817   2EED FD 43         mov [d], b
6818   2EEF FD 7D         dec b
6819   2EF1 D8            push b
6820   2EF2 FA BD FF      lea d, [bp + -67] ; $p
6821   2EF5 2A            mov b, [d]
6822   2EF6 38 00 00      mov c, 0
6823   2EF9 FD 77         inc b
6824   2EFB FA BD FF      lea d, [bp + -67] ; $p
6825   2EFE FD 43         mov [d], b
6826   2F00 FD 7D         dec b
6827   2F02 D8            push b
6828   2F03 3B 7F 4E      mov d, _prog ; $prog
6829   2F06 2A            mov b, [d]
6830   2F07 38 00 00      mov c, 0
6831   2F0A FD 77         inc b
6832   2F0C 3B 7F 4E      mov d, _prog ; $prog
6833   2F0F FD 43         mov [d], b
6834   2F11 FD 7D         dec b
6835   2F13 74            mov d, b
6836   2F14 32            mov bl, [d]
6837   2F15 A7 00         mov bh, 0
6838   2F17 38 00 00      mov c, 0
6839   2F1A E7            pop d
6840   2F1B FD 3E         mov [d], bl
6841   2F1D E7            pop d
6842   2F1E FD 3E         mov [d], bl
6843   2F20 0A C6 2E      jmp _while165_cond
6844   2F23             _while165_exit:
6845   2F23             ; *t = *p = '\0'; 
6846   2F23 FA FF FF      lea d, [bp + -1] ; $t
6847   2F26 2A            mov b, [d]
6848   2F27 38 00 00      mov c, 0
6849   2F2A D8            push b
6850   2F2B FA BD FF      lea d, [bp + -67] ; $p
6851   2F2E 2A            mov b, [d]
6852   2F2F 38 00 00      mov c, 0
6853   2F32 D8            push b
6854   2F33 FD 2E 00 00   mov32 cb, $00000000
6854   2F37 00 00 
6855   2F39 E7            pop d
6856   2F3A FD 3E         mov [d], bl
6857   2F3C E7            pop d
6858   2F3D FD 3E         mov [d], bl
6859   2F3F             ; int_const = hex_to_int(temp_hex); 
6860   2F3F 3B C1 4F      mov d, _int_const ; $int_const
6861   2F42 DA            push d
6862   2F43             ; --- START FUNCTION CALL
6863   2F43 FA BF FF      lea d, [bp + -65] ; $temp_hex
6864   2F46 2D            mov b, d
6865   2F47 38 00 00      mov c, 0
6866   2F4A FD AB         swp b
6867   2F4C D8            push b
6868   2F4D 07 33 3B      call hex_to_int
6869   2F50 51 02 00      add sp, 2
6870   2F53             ; --- END FUNCTION CALL
6871   2F53 E7            pop d
6872   2F54 FD 43         mov [d], b
6873   2F56 0A CA 2F      jmp _if164_exit
6874   2F59             _if164_else:
6875   2F59             ; while(is_digit(*prog)){ 
6876   2F59             _while166_cond:
6877   2F59             ; --- START FUNCTION CALL
6878   2F59 3B 7F 4E      mov d, _prog ; $prog
6879   2F5C 2A            mov b, [d]
6880   2F5D 38 00 00      mov c, 0
6881   2F60 74            mov d, b
6882   2F61 32            mov bl, [d]
6883   2F62 A7 00         mov bh, 0
6884   2F64 38 00 00      mov c, 0
6885   2F67 DD            push bl
6886   2F68 07 97 3F      call is_digit
6887   2F6B 51 01 00      add sp, 1
6888   2F6E             ; --- END FUNCTION CALL
6889   2F6E C0 00 00      cmp b, 0
6890   2F71 C6 A2 2F      je _while166_exit
6891   2F74             _while166_block:
6892   2F74             ; *t++ = *prog++; 
6893   2F74 FA FF FF      lea d, [bp + -1] ; $t
6894   2F77 2A            mov b, [d]
6895   2F78 38 00 00      mov c, 0
6896   2F7B FD 77         inc b
6897   2F7D FA FF FF      lea d, [bp + -1] ; $t
6898   2F80 FD 43         mov [d], b
6899   2F82 FD 7D         dec b
6900   2F84 D8            push b
6901   2F85 3B 7F 4E      mov d, _prog ; $prog
6902   2F88 2A            mov b, [d]
6903   2F89 38 00 00      mov c, 0
6904   2F8C FD 77         inc b
6905   2F8E 3B 7F 4E      mov d, _prog ; $prog
6906   2F91 FD 43         mov [d], b
6907   2F93 FD 7D         dec b
6908   2F95 74            mov d, b
6909   2F96 32            mov bl, [d]
6910   2F97 A7 00         mov bh, 0
6911   2F99 38 00 00      mov c, 0
6912   2F9C E7            pop d
6913   2F9D FD 3E         mov [d], bl
6914   2F9F 0A 59 2F      jmp _while166_cond
6915   2FA2             _while166_exit:
6916   2FA2             ; *t = '\0'; 
6917   2FA2 FA FF FF      lea d, [bp + -1] ; $t
6918   2FA5 2A            mov b, [d]
6919   2FA6 38 00 00      mov c, 0
6920   2FA9 D8            push b
6921   2FAA FD 2E 00 00   mov32 cb, $00000000
6921   2FAE 00 00 
6922   2FB0 E7            pop d
6923   2FB1 FD 3E         mov [d], bl
6924   2FB3             ; int_const = atoi(token); 
6925   2FB3 3B C1 4F      mov d, _int_const ; $int_const
6926   2FB6 DA            push d
6927   2FB7             ; --- START FUNCTION CALL
6928   2FB7 3B 81 4E      mov d, _token_data ; $token
6929   2FBA 2D            mov b, d
6930   2FBB 38 00 00      mov c, 0
6931   2FBE FD AB         swp b
6932   2FC0 D8            push b
6933   2FC1 07 AA 40      call atoi
6934   2FC4 51 02 00      add sp, 2
6935   2FC7             ; --- END FUNCTION CALL
6936   2FC7 E7            pop d
6937   2FC8 FD 43         mov [d], b
6938   2FCA             _if164_exit:
6939   2FCA             ; toktype = INTEGER_CONST; 
6940   2FCA 3B 7D 4E      mov d, _toktype ; $toktype
6941   2FCD DA            push d
6942   2FCE FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
6942   2FD2 00 00 
6943   2FD4 E7            pop d
6944   2FD5 FD 43         mov [d], b
6945   2FD7 0A 14 36      jmp _if163_exit
6946   2FDA             _if163_else:
6947   2FDA             ; if(*prog == '\''){ 
6948   2FDA             _if167_cond:
6949   2FDA 3B 7F 4E      mov d, _prog ; $prog
6950   2FDD 2A            mov b, [d]
6951   2FDE 38 00 00      mov c, 0
6952   2FE1 74            mov d, b
6953   2FE2 32            mov bl, [d]
6954   2FE3 A7 00         mov bh, 0
6955   2FE5 38 00 00      mov c, 0
6956   2FE8             ; --- START RELATIONAL
6957   2FE8 D7            push a
6958   2FE9 11            mov a, b
6959   2FEA FD 2E 27 00   mov32 cb, $00000027
6959   2FEE 00 00 
6960   2FF0 B0            cmp a, b
6961   2FF1 FD 71         seq ; ==
6962   2FF3 E4            pop a
6963   2FF4             ; --- END RELATIONAL
6964   2FF4 C0 00 00      cmp b, 0
6965   2FF7 C6 44 31      je _if167_else
6966   2FFA             _if167_TRUE:
6967   2FFA             ; *t++ = '\''; 
6968   2FFA FA FF FF      lea d, [bp + -1] ; $t
6969   2FFD 2A            mov b, [d]
6970   2FFE 38 00 00      mov c, 0
6971   3001 FD 77         inc b
6972   3003 FA FF FF      lea d, [bp + -1] ; $t
6973   3006 FD 43         mov [d], b
6974   3008 FD 7D         dec b
6975   300A D8            push b
6976   300B FD 2E 27 00   mov32 cb, $00000027
6976   300F 00 00 
6977   3011 E7            pop d
6978   3012 FD 3E         mov [d], bl
6979   3014             ; prog++; 
6980   3014 3B 7F 4E      mov d, _prog ; $prog
6981   3017 2A            mov b, [d]
6982   3018 38 00 00      mov c, 0
6983   301B FD 77         inc b
6984   301D 3B 7F 4E      mov d, _prog ; $prog
6985   3020 FD 43         mov [d], b
6986   3022 FD 7D         dec b
6987   3024             ; if(*prog == '\\'){ 
6988   3024             _if168_cond:
6989   3024 3B 7F 4E      mov d, _prog ; $prog
6990   3027 2A            mov b, [d]
6991   3028 38 00 00      mov c, 0
6992   302B 74            mov d, b
6993   302C 32            mov bl, [d]
6994   302D A7 00         mov bh, 0
6995   302F 38 00 00      mov c, 0
6996   3032             ; --- START RELATIONAL
6997   3032 D7            push a
6998   3033 11            mov a, b
6999   3034 FD 2E 5C 00   mov32 cb, $0000005c
6999   3038 00 00 
7000   303A B0            cmp a, b
7001   303B FD 71         seq ; ==
7002   303D E4            pop a
7003   303E             ; --- END RELATIONAL
7004   303E C0 00 00      cmp b, 0
7005   3041 C6 9C 30      je _if168_else
7006   3044             _if168_TRUE:
7007   3044             ; *t++ = '\\'; 
7008   3044 FA FF FF      lea d, [bp + -1] ; $t
7009   3047 2A            mov b, [d]
7010   3048 38 00 00      mov c, 0
7011   304B FD 77         inc b
7012   304D FA FF FF      lea d, [bp + -1] ; $t
7013   3050 FD 43         mov [d], b
7014   3052 FD 7D         dec b
7015   3054 D8            push b
7016   3055 FD 2E 5C 00   mov32 cb, $0000005c
7016   3059 00 00 
7017   305B E7            pop d
7018   305C FD 3E         mov [d], bl
7019   305E             ; prog++; 
7020   305E 3B 7F 4E      mov d, _prog ; $prog
7021   3061 2A            mov b, [d]
7022   3062 38 00 00      mov c, 0
7023   3065 FD 77         inc b
7024   3067 3B 7F 4E      mov d, _prog ; $prog
7025   306A FD 43         mov [d], b
7026   306C FD 7D         dec b
7027   306E             ; *t++ = *prog++; 
7028   306E FA FF FF      lea d, [bp + -1] ; $t
7029   3071 2A            mov b, [d]
7030   3072 38 00 00      mov c, 0
7031   3075 FD 77         inc b
7032   3077 FA FF FF      lea d, [bp + -1] ; $t
7033   307A FD 43         mov [d], b
7034   307C FD 7D         dec b
7035   307E D8            push b
7036   307F 3B 7F 4E      mov d, _prog ; $prog
7037   3082 2A            mov b, [d]
7038   3083 38 00 00      mov c, 0
7039   3086 FD 77         inc b
7040   3088 3B 7F 4E      mov d, _prog ; $prog
7041   308B FD 43         mov [d], b
7042   308D FD 7D         dec b
7043   308F 74            mov d, b
7044   3090 32            mov bl, [d]
7045   3091 A7 00         mov bh, 0
7046   3093 38 00 00      mov c, 0
7047   3096 E7            pop d
7048   3097 FD 3E         mov [d], bl
7049   3099 0A C7 30      jmp _if168_exit
7050   309C             _if168_else:
7051   309C             ; *t++ = *prog++; 
7052   309C FA FF FF      lea d, [bp + -1] ; $t
7053   309F 2A            mov b, [d]
7054   30A0 38 00 00      mov c, 0
7055   30A3 FD 77         inc b
7056   30A5 FA FF FF      lea d, [bp + -1] ; $t
7057   30A8 FD 43         mov [d], b
7058   30AA FD 7D         dec b
7059   30AC D8            push b
7060   30AD 3B 7F 4E      mov d, _prog ; $prog
7061   30B0 2A            mov b, [d]
7062   30B1 38 00 00      mov c, 0
7063   30B4 FD 77         inc b
7064   30B6 3B 7F 4E      mov d, _prog ; $prog
7065   30B9 FD 43         mov [d], b
7066   30BB FD 7D         dec b
7067   30BD 74            mov d, b
7068   30BE 32            mov bl, [d]
7069   30BF A7 00         mov bh, 0
7070   30C1 38 00 00      mov c, 0
7071   30C4 E7            pop d
7072   30C5 FD 3E         mov [d], bl
7073   30C7             _if168_exit:
7074   30C7             ; if(*prog != '\''){ 
7075   30C7             _if169_cond:
7076   30C7 3B 7F 4E      mov d, _prog ; $prog
7077   30CA 2A            mov b, [d]
7078   30CB 38 00 00      mov c, 0
7079   30CE 74            mov d, b
7080   30CF 32            mov bl, [d]
7081   30D0 A7 00         mov bh, 0
7082   30D2 38 00 00      mov c, 0
7083   30D5             ; --- START RELATIONAL
7084   30D5 D7            push a
7085   30D6 11            mov a, b
7086   30D7 FD 2E 27 00   mov32 cb, $00000027
7086   30DB 00 00 
7087   30DD B0            cmp a, b
7088   30DE FD 72         sneq ; !=
7089   30E0 E4            pop a
7090   30E1             ; --- END RELATIONAL
7091   30E1 C0 00 00      cmp b, 0
7092   30E4 C6 F6 30      je _if169_exit
7093   30E7             _if169_TRUE:
7094   30E7             ; error("Closing single quotes expected."); 
7095   30E7             ; --- START FUNCTION CALL
7096   30E7 26 F2 52      mov b, _s73 ; "Closing single quotes expected."
7097   30EA FD AB         swp b
7098   30EC D8            push b
7099   30ED 07 72 39      call error
7100   30F0 51 02 00      add sp, 2
7101   30F3             ; --- END FUNCTION CALL
7102   30F3 0A F6 30      jmp _if169_exit
7103   30F6             _if169_exit:
7104   30F6             ; *t++ = '\''; 
7105   30F6 FA FF FF      lea d, [bp + -1] ; $t
7106   30F9 2A            mov b, [d]
7107   30FA 38 00 00      mov c, 0
7108   30FD FD 77         inc b
7109   30FF FA FF FF      lea d, [bp + -1] ; $t
7110   3102 FD 43         mov [d], b
7111   3104 FD 7D         dec b
7112   3106 D8            push b
7113   3107 FD 2E 27 00   mov32 cb, $00000027
7113   310B 00 00 
7114   310D E7            pop d
7115   310E FD 3E         mov [d], bl
7116   3110             ; prog++; 
7117   3110 3B 7F 4E      mov d, _prog ; $prog
7118   3113 2A            mov b, [d]
7119   3114 38 00 00      mov c, 0
7120   3117 FD 77         inc b
7121   3119 3B 7F 4E      mov d, _prog ; $prog
7122   311C FD 43         mov [d], b
7123   311E FD 7D         dec b
7124   3120             ; toktype = CHAR_CONST; 
7125   3120 3B 7D 4E      mov d, _toktype ; $toktype
7126   3123 DA            push d
7127   3124 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
7127   3128 00 00 
7128   312A E7            pop d
7129   312B FD 43         mov [d], b
7130   312D             ; *t = '\0'; 
7131   312D FA FF FF      lea d, [bp + -1] ; $t
7132   3130 2A            mov b, [d]
7133   3131 38 00 00      mov c, 0
7134   3134 D8            push b
7135   3135 FD 2E 00 00   mov32 cb, $00000000
7135   3139 00 00 
7136   313B E7            pop d
7137   313C FD 3E         mov [d], bl
7138   313E             ; convert_constant(); // converts this string token with quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
7139   313E             ; --- START FUNCTION CALL
7140   313E 07 A8 36      call convert_constant
7141   3141 0A 14 36      jmp _if167_exit
7142   3144             _if167_else:
7143   3144             ; if(*prog == '\"'){ 
7144   3144             _if170_cond:
7145   3144 3B 7F 4E      mov d, _prog ; $prog
7146   3147 2A            mov b, [d]
7147   3148 38 00 00      mov c, 0
7148   314B 74            mov d, b
7149   314C 32            mov bl, [d]
7150   314D A7 00         mov bh, 0
7151   314F 38 00 00      mov c, 0
7152   3152             ; --- START RELATIONAL
7153   3152 D7            push a
7154   3153 11            mov a, b
7155   3154 FD 2E 22 00   mov32 cb, $00000022
7155   3158 00 00 
7156   315A B0            cmp a, b
7157   315B FD 71         seq ; ==
7158   315D E4            pop a
7159   315E             ; --- END RELATIONAL
7160   315E C0 00 00      cmp b, 0
7161   3161 C6 6C 32      je _if170_else
7162   3164             _if170_TRUE:
7163   3164             ; *t++ = '\"'; 
7164   3164 FA FF FF      lea d, [bp + -1] ; $t
7165   3167 2A            mov b, [d]
7166   3168 38 00 00      mov c, 0
7167   316B FD 77         inc b
7168   316D FA FF FF      lea d, [bp + -1] ; $t
7169   3170 FD 43         mov [d], b
7170   3172 FD 7D         dec b
7171   3174 D8            push b
7172   3175 FD 2E 22 00   mov32 cb, $00000022
7172   3179 00 00 
7173   317B E7            pop d
7174   317C FD 3E         mov [d], bl
7175   317E             ; prog++; 
7176   317E 3B 7F 4E      mov d, _prog ; $prog
7177   3181 2A            mov b, [d]
7178   3182 38 00 00      mov c, 0
7179   3185 FD 77         inc b
7180   3187 3B 7F 4E      mov d, _prog ; $prog
7181   318A FD 43         mov [d], b
7182   318C FD 7D         dec b
7183   318E             ; while(*prog != '\"' && *prog){ 
7184   318E             _while171_cond:
7185   318E 3B 7F 4E      mov d, _prog ; $prog
7186   3191 2A            mov b, [d]
7187   3192 38 00 00      mov c, 0
7188   3195 74            mov d, b
7189   3196 32            mov bl, [d]
7190   3197 A7 00         mov bh, 0
7191   3199 38 00 00      mov c, 0
7192   319C             ; --- START RELATIONAL
7193   319C D7            push a
7194   319D 11            mov a, b
7195   319E FD 2E 22 00   mov32 cb, $00000022
7195   31A2 00 00 
7196   31A4 B0            cmp a, b
7197   31A5 FD 72         sneq ; !=
7198   31A7 E4            pop a
7199   31A8             ; --- END RELATIONAL
7200   31A8             ; --- START LOGICAL AND
7201   31A8 D7            push a
7202   31A9 11            mov a, b
7203   31AA 3B 7F 4E      mov d, _prog ; $prog
7204   31AD 2A            mov b, [d]
7205   31AE 38 00 00      mov c, 0
7206   31B1 74            mov d, b
7207   31B2 32            mov bl, [d]
7208   31B3 A7 00         mov bh, 0
7209   31B5 38 00 00      mov c, 0
7210   31B8 FD A7         sand a, b
7211   31BA E4            pop a
7212   31BB             ; --- END LOGICAL AND
7213   31BB C0 00 00      cmp b, 0
7214   31BE C6 EF 31      je _while171_exit
7215   31C1             _while171_block:
7216   31C1             ; *t++ = *prog++; 
7217   31C1 FA FF FF      lea d, [bp + -1] ; $t
7218   31C4 2A            mov b, [d]
7219   31C5 38 00 00      mov c, 0
7220   31C8 FD 77         inc b
7221   31CA FA FF FF      lea d, [bp + -1] ; $t
7222   31CD FD 43         mov [d], b
7223   31CF FD 7D         dec b
7224   31D1 D8            push b
7225   31D2 3B 7F 4E      mov d, _prog ; $prog
7226   31D5 2A            mov b, [d]
7227   31D6 38 00 00      mov c, 0
7228   31D9 FD 77         inc b
7229   31DB 3B 7F 4E      mov d, _prog ; $prog
7230   31DE FD 43         mov [d], b
7231   31E0 FD 7D         dec b
7232   31E2 74            mov d, b
7233   31E3 32            mov bl, [d]
7234   31E4 A7 00         mov bh, 0
7235   31E6 38 00 00      mov c, 0
7236   31E9 E7            pop d
7237   31EA FD 3E         mov [d], bl
7238   31EC 0A 8E 31      jmp _while171_cond
7239   31EF             _while171_exit:
7240   31EF             ; if(*prog != '\"') error("Double quotes expected"); 
7241   31EF             _if172_cond:
7242   31EF 3B 7F 4E      mov d, _prog ; $prog
7243   31F2 2A            mov b, [d]
7244   31F3 38 00 00      mov c, 0
7245   31F6 74            mov d, b
7246   31F7 32            mov bl, [d]
7247   31F8 A7 00         mov bh, 0
7248   31FA 38 00 00      mov c, 0
7249   31FD             ; --- START RELATIONAL
7250   31FD D7            push a
7251   31FE 11            mov a, b
7252   31FF FD 2E 22 00   mov32 cb, $00000022
7252   3203 00 00 
7253   3205 B0            cmp a, b
7254   3206 FD 72         sneq ; !=
7255   3208 E4            pop a
7256   3209             ; --- END RELATIONAL
7257   3209 C0 00 00      cmp b, 0
7258   320C C6 1E 32      je _if172_exit
7259   320F             _if172_TRUE:
7260   320F             ; error("Double quotes expected"); 
7261   320F             ; --- START FUNCTION CALL
7262   320F 26 12 53      mov b, _s74 ; "Double quotes expected"
7263   3212 FD AB         swp b
7264   3214 D8            push b
7265   3215 07 72 39      call error
7266   3218 51 02 00      add sp, 2
7267   321B             ; --- END FUNCTION CALL
7268   321B 0A 1E 32      jmp _if172_exit
7269   321E             _if172_exit:
7270   321E             ; *t++ = '\"'; 
7271   321E FA FF FF      lea d, [bp + -1] ; $t
7272   3221 2A            mov b, [d]
7273   3222 38 00 00      mov c, 0
7274   3225 FD 77         inc b
7275   3227 FA FF FF      lea d, [bp + -1] ; $t
7276   322A FD 43         mov [d], b
7277   322C FD 7D         dec b
7278   322E D8            push b
7279   322F FD 2E 22 00   mov32 cb, $00000022
7279   3233 00 00 
7280   3235 E7            pop d
7281   3236 FD 3E         mov [d], bl
7282   3238             ; prog++; 
7283   3238 3B 7F 4E      mov d, _prog ; $prog
7284   323B 2A            mov b, [d]
7285   323C 38 00 00      mov c, 0
7286   323F FD 77         inc b
7287   3241 3B 7F 4E      mov d, _prog ; $prog
7288   3244 FD 43         mov [d], b
7289   3246 FD 7D         dec b
7290   3248             ; toktype = STRING_CONST; 
7291   3248 3B 7D 4E      mov d, _toktype ; $toktype
7292   324B DA            push d
7293   324C FD 2E 04 00   mov32 cb, $4 ; enum element: STRING_CONST
7293   3250 00 00 
7294   3252 E7            pop d
7295   3253 FD 43         mov [d], b
7296   3255             ; *t = '\0'; 
7297   3255 FA FF FF      lea d, [bp + -1] ; $t
7298   3258 2A            mov b, [d]
7299   3259 38 00 00      mov c, 0
7300   325C D8            push b
7301   325D FD 2E 00 00   mov32 cb, $00000000
7301   3261 00 00 
7302   3263 E7            pop d
7303   3264 FD 3E         mov [d], bl
7304   3266             ; convert_constant(); // converts this string token with quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
7305   3266             ; --- START FUNCTION CALL
7306   3266 07 A8 36      call convert_constant
7307   3269 0A 14 36      jmp _if170_exit
7308   326C             _if170_else:
7309   326C             ; if(*prog == '['){ 
7310   326C             _if173_cond:
7311   326C 3B 7F 4E      mov d, _prog ; $prog
7312   326F 2A            mov b, [d]
7313   3270 38 00 00      mov c, 0
7314   3273 74            mov d, b
7315   3274 32            mov bl, [d]
7316   3275 A7 00         mov bh, 0
7317   3277 38 00 00      mov c, 0
7318   327A             ; --- START RELATIONAL
7319   327A D7            push a
7320   327B 11            mov a, b
7321   327C FD 2E 5B 00   mov32 cb, $0000005b
7321   3280 00 00 
7322   3282 B0            cmp a, b
7323   3283 FD 71         seq ; ==
7324   3285 E4            pop a
7325   3286             ; --- END RELATIONAL
7326   3286 C0 00 00      cmp b, 0
7327   3289 C6 D4 32      je _if173_else
7328   328C             _if173_TRUE:
7329   328C             ; *t++ = *prog++; 
7330   328C FA FF FF      lea d, [bp + -1] ; $t
7331   328F 2A            mov b, [d]
7332   3290 38 00 00      mov c, 0
7333   3293 FD 77         inc b
7334   3295 FA FF FF      lea d, [bp + -1] ; $t
7335   3298 FD 43         mov [d], b
7336   329A FD 7D         dec b
7337   329C D8            push b
7338   329D 3B 7F 4E      mov d, _prog ; $prog
7339   32A0 2A            mov b, [d]
7340   32A1 38 00 00      mov c, 0
7341   32A4 FD 77         inc b
7342   32A6 3B 7F 4E      mov d, _prog ; $prog
7343   32A9 FD 43         mov [d], b
7344   32AB FD 7D         dec b
7345   32AD 74            mov d, b
7346   32AE 32            mov bl, [d]
7347   32AF A7 00         mov bh, 0
7348   32B1 38 00 00      mov c, 0
7349   32B4 E7            pop d
7350   32B5 FD 3E         mov [d], bl
7351   32B7             ; tok = OPENING_BRACKET; 
7352   32B7 3B 7B 4E      mov d, _tok ; $tok
7353   32BA DA            push d
7354   32BB FD 2E 0B 00   mov32 cb, $b ; enum element: OPENING_BRACKET
7354   32BF 00 00 
7355   32C1 E7            pop d
7356   32C2 FD 43         mov [d], b
7357   32C4             ; toktype = DELIMITER;   
7358   32C4 3B 7D 4E      mov d, _toktype ; $toktype
7359   32C7 DA            push d
7360   32C8 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7360   32CC 00 00 
7361   32CE E7            pop d
7362   32CF FD 43         mov [d], b
7363   32D1 0A 14 36      jmp _if173_exit
7364   32D4             _if173_else:
7365   32D4             ; if(*prog == ']'){ 
7366   32D4             _if174_cond:
7367   32D4 3B 7F 4E      mov d, _prog ; $prog
7368   32D7 2A            mov b, [d]
7369   32D8 38 00 00      mov c, 0
7370   32DB 74            mov d, b
7371   32DC 32            mov bl, [d]
7372   32DD A7 00         mov bh, 0
7373   32DF 38 00 00      mov c, 0
7374   32E2             ; --- START RELATIONAL
7375   32E2 D7            push a
7376   32E3 11            mov a, b
7377   32E4 FD 2E 5D 00   mov32 cb, $0000005d
7377   32E8 00 00 
7378   32EA B0            cmp a, b
7379   32EB FD 71         seq ; ==
7380   32ED E4            pop a
7381   32EE             ; --- END RELATIONAL
7382   32EE C0 00 00      cmp b, 0
7383   32F1 C6 3C 33      je _if174_else
7384   32F4             _if174_TRUE:
7385   32F4             ; *t++ = *prog++; 
7386   32F4 FA FF FF      lea d, [bp + -1] ; $t
7387   32F7 2A            mov b, [d]
7388   32F8 38 00 00      mov c, 0
7389   32FB FD 77         inc b
7390   32FD FA FF FF      lea d, [bp + -1] ; $t
7391   3300 FD 43         mov [d], b
7392   3302 FD 7D         dec b
7393   3304 D8            push b
7394   3305 3B 7F 4E      mov d, _prog ; $prog
7395   3308 2A            mov b, [d]
7396   3309 38 00 00      mov c, 0
7397   330C FD 77         inc b
7398   330E 3B 7F 4E      mov d, _prog ; $prog
7399   3311 FD 43         mov [d], b
7400   3313 FD 7D         dec b
7401   3315 74            mov d, b
7402   3316 32            mov bl, [d]
7403   3317 A7 00         mov bh, 0
7404   3319 38 00 00      mov c, 0
7405   331C E7            pop d
7406   331D FD 3E         mov [d], bl
7407   331F             ; tok = CLOSING_BRACKET; 
7408   331F 3B 7B 4E      mov d, _tok ; $tok
7409   3322 DA            push d
7410   3323 FD 2E 0C 00   mov32 cb, $c ; enum element: CLOSING_BRACKET
7410   3327 00 00 
7411   3329 E7            pop d
7412   332A FD 43         mov [d], b
7413   332C             ; toktype = DELIMITER;   
7414   332C 3B 7D 4E      mov d, _toktype ; $toktype
7415   332F DA            push d
7416   3330 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7416   3334 00 00 
7417   3336 E7            pop d
7418   3337 FD 43         mov [d], b
7419   3339 0A 14 36      jmp _if174_exit
7420   333C             _if174_else:
7421   333C             ; if(*prog == '+'){ 
7422   333C             _if175_cond:
7423   333C 3B 7F 4E      mov d, _prog ; $prog
7424   333F 2A            mov b, [d]
7425   3340 38 00 00      mov c, 0
7426   3343 74            mov d, b
7427   3344 32            mov bl, [d]
7428   3345 A7 00         mov bh, 0
7429   3347 38 00 00      mov c, 0
7430   334A             ; --- START RELATIONAL
7431   334A D7            push a
7432   334B 11            mov a, b
7433   334C FD 2E 2B 00   mov32 cb, $0000002b
7433   3350 00 00 
7434   3352 B0            cmp a, b
7435   3353 FD 71         seq ; ==
7436   3355 E4            pop a
7437   3356             ; --- END RELATIONAL
7438   3356 C0 00 00      cmp b, 0
7439   3359 C6 A4 33      je _if175_else
7440   335C             _if175_TRUE:
7441   335C             ; *t++ = *prog++; 
7442   335C FA FF FF      lea d, [bp + -1] ; $t
7443   335F 2A            mov b, [d]
7444   3360 38 00 00      mov c, 0
7445   3363 FD 77         inc b
7446   3365 FA FF FF      lea d, [bp + -1] ; $t
7447   3368 FD 43         mov [d], b
7448   336A FD 7D         dec b
7449   336C D8            push b
7450   336D 3B 7F 4E      mov d, _prog ; $prog
7451   3370 2A            mov b, [d]
7452   3371 38 00 00      mov c, 0
7453   3374 FD 77         inc b
7454   3376 3B 7F 4E      mov d, _prog ; $prog
7455   3379 FD 43         mov [d], b
7456   337B FD 7D         dec b
7457   337D 74            mov d, b
7458   337E 32            mov bl, [d]
7459   337F A7 00         mov bh, 0
7460   3381 38 00 00      mov c, 0
7461   3384 E7            pop d
7462   3385 FD 3E         mov [d], bl
7463   3387             ; tok = PLUS; 
7464   3387 3B 7B 4E      mov d, _tok ; $tok
7465   338A DA            push d
7466   338B FD 2E 08 00   mov32 cb, $8 ; enum element: PLUS
7466   338F 00 00 
7467   3391 E7            pop d
7468   3392 FD 43         mov [d], b
7469   3394             ; toktype = DELIMITER;   
7470   3394 3B 7D 4E      mov d, _toktype ; $toktype
7471   3397 DA            push d
7472   3398 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7472   339C 00 00 
7473   339E E7            pop d
7474   339F FD 43         mov [d], b
7475   33A1 0A 14 36      jmp _if175_exit
7476   33A4             _if175_else:
7477   33A4             ; if(*prog == '-'){ 
7478   33A4             _if176_cond:
7479   33A4 3B 7F 4E      mov d, _prog ; $prog
7480   33A7 2A            mov b, [d]
7481   33A8 38 00 00      mov c, 0
7482   33AB 74            mov d, b
7483   33AC 32            mov bl, [d]
7484   33AD A7 00         mov bh, 0
7485   33AF 38 00 00      mov c, 0
7486   33B2             ; --- START RELATIONAL
7487   33B2 D7            push a
7488   33B3 11            mov a, b
7489   33B4 FD 2E 2D 00   mov32 cb, $0000002d
7489   33B8 00 00 
7490   33BA B0            cmp a, b
7491   33BB FD 71         seq ; ==
7492   33BD E4            pop a
7493   33BE             ; --- END RELATIONAL
7494   33BE C0 00 00      cmp b, 0
7495   33C1 C6 0C 34      je _if176_else
7496   33C4             _if176_TRUE:
7497   33C4             ; *t++ = *prog++; 
7498   33C4 FA FF FF      lea d, [bp + -1] ; $t
7499   33C7 2A            mov b, [d]
7500   33C8 38 00 00      mov c, 0
7501   33CB FD 77         inc b
7502   33CD FA FF FF      lea d, [bp + -1] ; $t
7503   33D0 FD 43         mov [d], b
7504   33D2 FD 7D         dec b
7505   33D4 D8            push b
7506   33D5 3B 7F 4E      mov d, _prog ; $prog
7507   33D8 2A            mov b, [d]
7508   33D9 38 00 00      mov c, 0
7509   33DC FD 77         inc b
7510   33DE 3B 7F 4E      mov d, _prog ; $prog
7511   33E1 FD 43         mov [d], b
7512   33E3 FD 7D         dec b
7513   33E5 74            mov d, b
7514   33E6 32            mov bl, [d]
7515   33E7 A7 00         mov bh, 0
7516   33E9 38 00 00      mov c, 0
7517   33EC E7            pop d
7518   33ED FD 3E         mov [d], bl
7519   33EF             ; tok = MINUS; 
7520   33EF 3B 7B 4E      mov d, _tok ; $tok
7521   33F2 DA            push d
7522   33F3 FD 2E 09 00   mov32 cb, $9 ; enum element: MINUS
7522   33F7 00 00 
7523   33F9 E7            pop d
7524   33FA FD 43         mov [d], b
7525   33FC             ; toktype = DELIMITER;   
7526   33FC 3B 7D 4E      mov d, _toktype ; $toktype
7527   33FF DA            push d
7528   3400 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7528   3404 00 00 
7529   3406 E7            pop d
7530   3407 FD 43         mov [d], b
7531   3409 0A 14 36      jmp _if176_exit
7532   340C             _if176_else:
7533   340C             ; if(*prog == '$'){ 
7534   340C             _if177_cond:
7535   340C 3B 7F 4E      mov d, _prog ; $prog
7536   340F 2A            mov b, [d]
7537   3410 38 00 00      mov c, 0
7538   3413 74            mov d, b
7539   3414 32            mov bl, [d]
7540   3415 A7 00         mov bh, 0
7541   3417 38 00 00      mov c, 0
7542   341A             ; --- START RELATIONAL
7543   341A D7            push a
7544   341B 11            mov a, b
7545   341C FD 2E 24 00   mov32 cb, $00000024
7545   3420 00 00 
7546   3422 B0            cmp a, b
7547   3423 FD 71         seq ; ==
7548   3425 E4            pop a
7549   3426             ; --- END RELATIONAL
7550   3426 C0 00 00      cmp b, 0
7551   3429 C6 74 34      je _if177_else
7552   342C             _if177_TRUE:
7553   342C             ; *t++ = *prog++; 
7554   342C FA FF FF      lea d, [bp + -1] ; $t
7555   342F 2A            mov b, [d]
7556   3430 38 00 00      mov c, 0
7557   3433 FD 77         inc b
7558   3435 FA FF FF      lea d, [bp + -1] ; $t
7559   3438 FD 43         mov [d], b
7560   343A FD 7D         dec b
7561   343C D8            push b
7562   343D 3B 7F 4E      mov d, _prog ; $prog
7563   3440 2A            mov b, [d]
7564   3441 38 00 00      mov c, 0
7565   3444 FD 77         inc b
7566   3446 3B 7F 4E      mov d, _prog ; $prog
7567   3449 FD 43         mov [d], b
7568   344B FD 7D         dec b
7569   344D 74            mov d, b
7570   344E 32            mov bl, [d]
7571   344F A7 00         mov bh, 0
7572   3451 38 00 00      mov c, 0
7573   3454 E7            pop d
7574   3455 FD 3E         mov [d], bl
7575   3457             ; tok = DOLLAR; 
7576   3457 3B 7B 4E      mov d, _tok ; $tok
7577   345A DA            push d
7578   345B FD 2E 0A 00   mov32 cb, $a ; enum element: DOLLAR
7578   345F 00 00 
7579   3461 E7            pop d
7580   3462 FD 43         mov [d], b
7581   3464             ; toktype = DELIMITER;   
7582   3464 3B 7D 4E      mov d, _toktype ; $toktype
7583   3467 DA            push d
7584   3468 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7584   346C 00 00 
7585   346E E7            pop d
7586   346F FD 43         mov [d], b
7587   3471 0A 14 36      jmp _if177_exit
7588   3474             _if177_else:
7589   3474             ; if(*prog == ':'){ 
7590   3474             _if178_cond:
7591   3474 3B 7F 4E      mov d, _prog ; $prog
7592   3477 2A            mov b, [d]
7593   3478 38 00 00      mov c, 0
7594   347B 74            mov d, b
7595   347C 32            mov bl, [d]
7596   347D A7 00         mov bh, 0
7597   347F 38 00 00      mov c, 0
7598   3482             ; --- START RELATIONAL
7599   3482 D7            push a
7600   3483 11            mov a, b
7601   3484 FD 2E 3A 00   mov32 cb, $0000003a
7601   3488 00 00 
7602   348A B0            cmp a, b
7603   348B FD 71         seq ; ==
7604   348D E4            pop a
7605   348E             ; --- END RELATIONAL
7606   348E C0 00 00      cmp b, 0
7607   3491 C6 DC 34      je _if178_else
7608   3494             _if178_TRUE:
7609   3494             ; *t++ = *prog++; 
7610   3494 FA FF FF      lea d, [bp + -1] ; $t
7611   3497 2A            mov b, [d]
7612   3498 38 00 00      mov c, 0
7613   349B FD 77         inc b
7614   349D FA FF FF      lea d, [bp + -1] ; $t
7615   34A0 FD 43         mov [d], b
7616   34A2 FD 7D         dec b
7617   34A4 D8            push b
7618   34A5 3B 7F 4E      mov d, _prog ; $prog
7619   34A8 2A            mov b, [d]
7620   34A9 38 00 00      mov c, 0
7621   34AC FD 77         inc b
7622   34AE 3B 7F 4E      mov d, _prog ; $prog
7623   34B1 FD 43         mov [d], b
7624   34B3 FD 7D         dec b
7625   34B5 74            mov d, b
7626   34B6 32            mov bl, [d]
7627   34B7 A7 00         mov bh, 0
7628   34B9 38 00 00      mov c, 0
7629   34BC E7            pop d
7630   34BD FD 3E         mov [d], bl
7631   34BF             ; tok = COLON; 
7632   34BF 3B 7B 4E      mov d, _tok ; $tok
7633   34C2 DA            push d
7634   34C3 FD 2E 0D 00   mov32 cb, $d ; enum element: COLON
7634   34C7 00 00 
7635   34C9 E7            pop d
7636   34CA FD 43         mov [d], b
7637   34CC             ; toktype = DELIMITER;   
7638   34CC 3B 7D 4E      mov d, _toktype ; $toktype
7639   34CF DA            push d
7640   34D0 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7640   34D4 00 00 
7641   34D6 E7            pop d
7642   34D7 FD 43         mov [d], b
7643   34D9 0A 14 36      jmp _if178_exit
7644   34DC             _if178_else:
7645   34DC             ; if(*prog == ';'){ 
7646   34DC             _if179_cond:
7647   34DC 3B 7F 4E      mov d, _prog ; $prog
7648   34DF 2A            mov b, [d]
7649   34E0 38 00 00      mov c, 0
7650   34E3 74            mov d, b
7651   34E4 32            mov bl, [d]
7652   34E5 A7 00         mov bh, 0
7653   34E7 38 00 00      mov c, 0
7654   34EA             ; --- START RELATIONAL
7655   34EA D7            push a
7656   34EB 11            mov a, b
7657   34EC FD 2E 3B 00   mov32 cb, $0000003b
7657   34F0 00 00 
7658   34F2 B0            cmp a, b
7659   34F3 FD 71         seq ; ==
7660   34F5 E4            pop a
7661   34F6             ; --- END RELATIONAL
7662   34F6 C0 00 00      cmp b, 0
7663   34F9 C6 44 35      je _if179_else
7664   34FC             _if179_TRUE:
7665   34FC             ; *t++ = *prog++; 
7666   34FC FA FF FF      lea d, [bp + -1] ; $t
7667   34FF 2A            mov b, [d]
7668   3500 38 00 00      mov c, 0
7669   3503 FD 77         inc b
7670   3505 FA FF FF      lea d, [bp + -1] ; $t
7671   3508 FD 43         mov [d], b
7672   350A FD 7D         dec b
7673   350C D8            push b
7674   350D 3B 7F 4E      mov d, _prog ; $prog
7675   3510 2A            mov b, [d]
7676   3511 38 00 00      mov c, 0
7677   3514 FD 77         inc b
7678   3516 3B 7F 4E      mov d, _prog ; $prog
7679   3519 FD 43         mov [d], b
7680   351B FD 7D         dec b
7681   351D 74            mov d, b
7682   351E 32            mov bl, [d]
7683   351F A7 00         mov bh, 0
7684   3521 38 00 00      mov c, 0
7685   3524 E7            pop d
7686   3525 FD 3E         mov [d], bl
7687   3527             ; tok = SEMICOLON; 
7688   3527 3B 7B 4E      mov d, _tok ; $tok
7689   352A DA            push d
7690   352B FD 2E 0E 00   mov32 cb, $e ; enum element: SEMICOLON
7690   352F 00 00 
7691   3531 E7            pop d
7692   3532 FD 43         mov [d], b
7693   3534             ; toktype = DELIMITER;   
7694   3534 3B 7D 4E      mov d, _toktype ; $toktype
7695   3537 DA            push d
7696   3538 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7696   353C 00 00 
7697   353E E7            pop d
7698   353F FD 43         mov [d], b
7699   3541 0A 14 36      jmp _if179_exit
7700   3544             _if179_else:
7701   3544             ; if(*prog == ','){ 
7702   3544             _if180_cond:
7703   3544 3B 7F 4E      mov d, _prog ; $prog
7704   3547 2A            mov b, [d]
7705   3548 38 00 00      mov c, 0
7706   354B 74            mov d, b
7707   354C 32            mov bl, [d]
7708   354D A7 00         mov bh, 0
7709   354F 38 00 00      mov c, 0
7710   3552             ; --- START RELATIONAL
7711   3552 D7            push a
7712   3553 11            mov a, b
7713   3554 FD 2E 2C 00   mov32 cb, $0000002c
7713   3558 00 00 
7714   355A B0            cmp a, b
7715   355B FD 71         seq ; ==
7716   355D E4            pop a
7717   355E             ; --- END RELATIONAL
7718   355E C0 00 00      cmp b, 0
7719   3561 C6 AC 35      je _if180_else
7720   3564             _if180_TRUE:
7721   3564             ; *t++ = *prog++; 
7722   3564 FA FF FF      lea d, [bp + -1] ; $t
7723   3567 2A            mov b, [d]
7724   3568 38 00 00      mov c, 0
7725   356B FD 77         inc b
7726   356D FA FF FF      lea d, [bp + -1] ; $t
7727   3570 FD 43         mov [d], b
7728   3572 FD 7D         dec b
7729   3574 D8            push b
7730   3575 3B 7F 4E      mov d, _prog ; $prog
7731   3578 2A            mov b, [d]
7732   3579 38 00 00      mov c, 0
7733   357C FD 77         inc b
7734   357E 3B 7F 4E      mov d, _prog ; $prog
7735   3581 FD 43         mov [d], b
7736   3583 FD 7D         dec b
7737   3585 74            mov d, b
7738   3586 32            mov bl, [d]
7739   3587 A7 00         mov bh, 0
7740   3589 38 00 00      mov c, 0
7741   358C E7            pop d
7742   358D FD 3E         mov [d], bl
7743   358F             ; tok = COMMA; 
7744   358F 3B 7B 4E      mov d, _tok ; $tok
7745   3592 DA            push d
7746   3593 FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
7746   3597 00 00 
7747   3599 E7            pop d
7748   359A FD 43         mov [d], b
7749   359C             ; toktype = DELIMITER;   
7750   359C 3B 7D 4E      mov d, _toktype ; $toktype
7751   359F DA            push d
7752   35A0 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7752   35A4 00 00 
7753   35A6 E7            pop d
7754   35A7 FD 43         mov [d], b
7755   35A9 0A 14 36      jmp _if180_exit
7756   35AC             _if180_else:
7757   35AC             ; if(*prog == '.'){ 
7758   35AC             _if181_cond:
7759   35AC 3B 7F 4E      mov d, _prog ; $prog
7760   35AF 2A            mov b, [d]
7761   35B0 38 00 00      mov c, 0
7762   35B3 74            mov d, b
7763   35B4 32            mov bl, [d]
7764   35B5 A7 00         mov bh, 0
7765   35B7 38 00 00      mov c, 0
7766   35BA             ; --- START RELATIONAL
7767   35BA D7            push a
7768   35BB 11            mov a, b
7769   35BC FD 2E 2E 00   mov32 cb, $0000002e
7769   35C0 00 00 
7770   35C2 B0            cmp a, b
7771   35C3 FD 71         seq ; ==
7772   35C5 E4            pop a
7773   35C6             ; --- END RELATIONAL
7774   35C6 C0 00 00      cmp b, 0
7775   35C9 C6 14 36      je _if181_exit
7776   35CC             _if181_TRUE:
7777   35CC             ; *t++ = *prog++; 
7778   35CC FA FF FF      lea d, [bp + -1] ; $t
7779   35CF 2A            mov b, [d]
7780   35D0 38 00 00      mov c, 0
7781   35D3 FD 77         inc b
7782   35D5 FA FF FF      lea d, [bp + -1] ; $t
7783   35D8 FD 43         mov [d], b
7784   35DA FD 7D         dec b
7785   35DC D8            push b
7786   35DD 3B 7F 4E      mov d, _prog ; $prog
7787   35E0 2A            mov b, [d]
7788   35E1 38 00 00      mov c, 0
7789   35E4 FD 77         inc b
7790   35E6 3B 7F 4E      mov d, _prog ; $prog
7791   35E9 FD 43         mov [d], b
7792   35EB FD 7D         dec b
7793   35ED 74            mov d, b
7794   35EE 32            mov bl, [d]
7795   35EF A7 00         mov bh, 0
7796   35F1 38 00 00      mov c, 0
7797   35F4 E7            pop d
7798   35F5 FD 3E         mov [d], bl
7799   35F7             ; tok = DOT; 
7800   35F7 3B 7B 4E      mov d, _tok ; $tok
7801   35FA DA            push d
7802   35FB FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
7802   35FF 00 00 
7803   3601 E7            pop d
7804   3602 FD 43         mov [d], b
7805   3604             ; toktype = DELIMITER;   
7806   3604 3B 7D 4E      mov d, _toktype ; $toktype
7807   3607 DA            push d
7808   3608 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7808   360C 00 00 
7809   360E E7            pop d
7810   360F FD 43         mov [d], b
7811   3611 0A 14 36      jmp _if181_exit
7812   3614             _if181_exit:
7813   3614             _if180_exit:
7814   3614             _if179_exit:
7815   3614             _if178_exit:
7816   3614             _if177_exit:
7817   3614             _if176_exit:
7818   3614             _if175_exit:
7819   3614             _if174_exit:
7820   3614             _if173_exit:
7821   3614             _if170_exit:
7822   3614             _if167_exit:
7823   3614             _if163_exit:
7824   3614             _if160_exit:
7825   3614             ; *t = '\0'; 
7826   3614 FA FF FF      lea d, [bp + -1] ; $t
7827   3617 2A            mov b, [d]
7828   3618 38 00 00      mov c, 0
7829   361B D8            push b
7830   361C FD 2E 00 00   mov32 cb, $00000000
7830   3620 00 00 
7831   3622 E7            pop d
7832   3623 FD 3E         mov [d], bl
7833   3625             ; if(toktype == TYPE_UNDEF){ 
7834   3625             _if182_cond:
7835   3625 3B 7D 4E      mov d, _toktype ; $toktype
7836   3628 2A            mov b, [d]
7837   3629 38 00 00      mov c, 0
7838   362C             ; --- START RELATIONAL
7839   362C D7            push a
7840   362D 11            mov a, b
7841   362E FD 2E 00 00   mov32 cb, $0 ; enum element: TYPE_UNDEF
7841   3632 00 00 
7842   3634 B0            cmp a, b
7843   3635 FD 71         seq ; ==
7844   3637 E4            pop a
7845   3638             ; --- END RELATIONAL
7846   3638 C0 00 00      cmp b, 0
7847   363B C6 A6 36      je _if182_exit
7848   363E             _if182_TRUE:
7849   363E             ; printf("TOKEN ERROR. Prog: %x\n", (int)(prog-program));  
7850   363E             ; --- START FUNCTION CALL
7851   363E 3B 7F 4E      mov d, _prog ; $prog
7852   3641 2A            mov b, [d]
7853   3642 38 00 00      mov c, 0
7854   3645             ; --- START TERMS
7855   3645 D7            push a
7856   3646 11            mov a, b
7857   3647 3B C3 4F      mov d, _program ; $program
7858   364A 2A            mov b, [d]
7859   364B 38 00 00      mov c, 0
7860   364E 60            sub a, b
7861   364F 27            mov b, a
7862   3650 E4            pop a
7863   3651             ; --- END TERMS
7864   3651 AB            snex b
7865   3652 FD AB         swp b
7866   3654 D8            push b
7867   3655 26 29 53      mov b, _s75 ; "TOKEN ERROR. Prog: %x\n"
7868   3658 FD AB         swp b
7869   365A D8            push b
7870   365B 07 99 42      call printf
7871   365E 51 04 00      add sp, 4
7872   3661             ; --- END FUNCTION CALL
7873   3661             ; printf("ProgVal: %x", *prog);  
7874   3661             ; --- START FUNCTION CALL
7875   3661 3B 7F 4E      mov d, _prog ; $prog
7876   3664 2A            mov b, [d]
7877   3665 38 00 00      mov c, 0
7878   3668 74            mov d, b
7879   3669 32            mov bl, [d]
7880   366A A7 00         mov bh, 0
7881   366C 38 00 00      mov c, 0
7882   366F FD AB         swp b
7883   3671 D8            push b
7884   3672 26 40 53      mov b, _s76 ; "ProgVal: %x"
7885   3675 FD AB         swp b
7886   3677 D8            push b
7887   3678 07 99 42      call printf
7888   367B 51 04 00      add sp, 4
7889   367E             ; --- END FUNCTION CALL
7890   367E             ; printf("\n Text after prog: %s\n", prog); 
7891   367E             ; --- START FUNCTION CALL
7892   367E 3B 7F 4E      mov d, _prog ; $prog
7893   3681 2A            mov b, [d]
7894   3682 38 00 00      mov c, 0
7895   3685 FD AB         swp b
7896   3687 D8            push b
7897   3688 26 4C 53      mov b, _s77 ; "\n Text after prog: %s\n"
7898   368B FD AB         swp b
7899   368D D8            push b
7900   368E 07 99 42      call printf
7901   3691 51 04 00      add sp, 4
7902   3694             ; --- END FUNCTION CALL
7903   3694             ; exit(1); 
7904   3694             ; --- START FUNCTION CALL
7905   3694 FD 2E 01 00   mov32 cb, $00000001
7905   3698 00 00 
7906   369A FD AB         swp b
7907   369C D8            push b
7908   369D 07 94 4B      call exit
7909   36A0 51 02 00      add sp, 2
7910   36A3             ; --- END FUNCTION CALL
7911   36A3 0A A6 36      jmp _if182_exit
7912   36A6             _if182_exit:
7913   36A6 F9            leave
7914   36A7 09            ret
7915   36A8             
7916   36A8             convert_constant:
7917   36A8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7918   36AB             ; char *s; 
7919   36AB 52 02 00      sub sp, 2
7920   36AE             ; char *t; 
7921   36AE 52 02 00      sub sp, 2
7922   36B1             ; t = token; 
7923   36B1 FA FD FF      lea d, [bp + -3] ; $t
7924   36B4 DA            push d
7925   36B5 3B 81 4E      mov d, _token_data ; $token
7926   36B8 2D            mov b, d
7927   36B9 38 00 00      mov c, 0
7928   36BC E7            pop d
7929   36BD FD 43         mov [d], b
7930   36BF             ; s = string_const; 
7931   36BF FA FF FF      lea d, [bp + -1] ; $s
7932   36C2 DA            push d
7933   36C3 3B C1 4E      mov d, _string_const_data ; $string_const
7934   36C6 2D            mov b, d
7935   36C7 38 00 00      mov c, 0
7936   36CA E7            pop d
7937   36CB FD 43         mov [d], b
7938   36CD             ; if(toktype == CHAR_CONST){ 
7939   36CD             _if183_cond:
7940   36CD 3B 7D 4E      mov d, _toktype ; $toktype
7941   36D0 2A            mov b, [d]
7942   36D1 38 00 00      mov c, 0
7943   36D4             ; --- START RELATIONAL
7944   36D4 D7            push a
7945   36D5 11            mov a, b
7946   36D6 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
7946   36DA 00 00 
7947   36DC B0            cmp a, b
7948   36DD FD 71         seq ; ==
7949   36DF E4            pop a
7950   36E0             ; --- END RELATIONAL
7951   36E0 C0 00 00      cmp b, 0
7952   36E3 C6 D2 38      je _if183_else
7953   36E6             _if183_TRUE:
7954   36E6             ; t++; 
7955   36E6 FA FD FF      lea d, [bp + -3] ; $t
7956   36E9 2A            mov b, [d]
7957   36EA 38 00 00      mov c, 0
7958   36ED FD 77         inc b
7959   36EF FA FD FF      lea d, [bp + -3] ; $t
7960   36F2 FD 43         mov [d], b
7961   36F4 FD 7D         dec b
7962   36F6             ; if(*t == '\\'){ 
7963   36F6             _if184_cond:
7964   36F6 FA FD FF      lea d, [bp + -3] ; $t
7965   36F9 2A            mov b, [d]
7966   36FA 38 00 00      mov c, 0
7967   36FD 74            mov d, b
7968   36FE 32            mov bl, [d]
7969   36FF A7 00         mov bh, 0
7970   3701 38 00 00      mov c, 0
7971   3704             ; --- START RELATIONAL
7972   3704 D7            push a
7973   3705 11            mov a, b
7974   3706 FD 2E 5C 00   mov32 cb, $0000005c
7974   370A 00 00 
7975   370C B0            cmp a, b
7976   370D FD 71         seq ; ==
7977   370F E4            pop a
7978   3710             ; --- END RELATIONAL
7979   3710 C0 00 00      cmp b, 0
7980   3713 C6 AD 38      je _if184_else
7981   3716             _if184_TRUE:
7982   3716             ; t++; 
7983   3716 FA FD FF      lea d, [bp + -3] ; $t
7984   3719 2A            mov b, [d]
7985   371A 38 00 00      mov c, 0
7986   371D FD 77         inc b
7987   371F FA FD FF      lea d, [bp + -3] ; $t
7988   3722 FD 43         mov [d], b
7989   3724 FD 7D         dec b
7990   3726             ; switch(*t){ 
7991   3726             _switch185_expr:
7992   3726 FA FD FF      lea d, [bp + -3] ; $t
7993   3729 2A            mov b, [d]
7994   372A 38 00 00      mov c, 0
7995   372D 74            mov d, b
7996   372E 32            mov bl, [d]
7997   372F A7 00         mov bh, 0
7998   3731 38 00 00      mov c, 0
7999   3734             _switch185_comparisons:
8000   3734 C1 30         cmp bl, $30
8001   3736 C6 6E 37      je _switch185_case0
8002   3739 C1 61         cmp bl, $61
8003   373B C6 8B 37      je _switch185_case1
8004   373E C1 62         cmp bl, $62
8005   3740 C6 A8 37      je _switch185_case2
8006   3743 C1 66         cmp bl, $66
8007   3745 C6 C5 37      je _switch185_case3
8008   3748 C1 6E         cmp bl, $6e
8009   374A C6 E2 37      je _switch185_case4
8010   374D C1 72         cmp bl, $72
8011   374F C6 FF 37      je _switch185_case5
8012   3752 C1 74         cmp bl, $74
8013   3754 C6 1C 38      je _switch185_case6
8014   3757 C1 76         cmp bl, $76
8015   3759 C6 39 38      je _switch185_case7
8016   375C C1 5C         cmp bl, $5c
8017   375E C6 56 38      je _switch185_case8
8018   3761 C1 27         cmp bl, $27
8019   3763 C6 73 38      je _switch185_case9
8020   3766 C1 22         cmp bl, $22
8021   3768 C6 90 38      je _switch185_case10
8022   376B 0A AA 38      jmp _switch185_exit
8023   376E             _switch185_case0:
8024   376E             ; *s++ = '\0'; 
8025   376E FA FF FF      lea d, [bp + -1] ; $s
8026   3771 2A            mov b, [d]
8027   3772 38 00 00      mov c, 0
8028   3775 FD 77         inc b
8029   3777 FA FF FF      lea d, [bp + -1] ; $s
8030   377A FD 43         mov [d], b
8031   377C FD 7D         dec b
8032   377E D8            push b
8033   377F FD 2E 00 00   mov32 cb, $00000000
8033   3783 00 00 
8034   3785 E7            pop d
8035   3786 FD 3E         mov [d], bl
8036   3788             ; break; 
8037   3788 0A AA 38      jmp _switch185_exit ; case break
8038   378B             _switch185_case1:
8039   378B             ; *s++ = '\a'; 
8040   378B FA FF FF      lea d, [bp + -1] ; $s
8041   378E 2A            mov b, [d]
8042   378F 38 00 00      mov c, 0
8043   3792 FD 77         inc b
8044   3794 FA FF FF      lea d, [bp + -1] ; $s
8045   3797 FD 43         mov [d], b
8046   3799 FD 7D         dec b
8047   379B D8            push b
8048   379C FD 2E 07 00   mov32 cb, $00000007
8048   37A0 00 00 
8049   37A2 E7            pop d
8050   37A3 FD 3E         mov [d], bl
8051   37A5             ; break; 
8052   37A5 0A AA 38      jmp _switch185_exit ; case break
8053   37A8             _switch185_case2:
8054   37A8             ; *s++ = '\b'; 
8055   37A8 FA FF FF      lea d, [bp + -1] ; $s
8056   37AB 2A            mov b, [d]
8057   37AC 38 00 00      mov c, 0
8058   37AF FD 77         inc b
8059   37B1 FA FF FF      lea d, [bp + -1] ; $s
8060   37B4 FD 43         mov [d], b
8061   37B6 FD 7D         dec b
8062   37B8 D8            push b
8063   37B9 FD 2E 08 00   mov32 cb, $00000008
8063   37BD 00 00 
8064   37BF E7            pop d
8065   37C0 FD 3E         mov [d], bl
8066   37C2             ; break;   
8067   37C2 0A AA 38      jmp _switch185_exit ; case break
8068   37C5             _switch185_case3:
8069   37C5             ; *s++ = '\f'; 
8070   37C5 FA FF FF      lea d, [bp + -1] ; $s
8071   37C8 2A            mov b, [d]
8072   37C9 38 00 00      mov c, 0
8073   37CC FD 77         inc b
8074   37CE FA FF FF      lea d, [bp + -1] ; $s
8075   37D1 FD 43         mov [d], b
8076   37D3 FD 7D         dec b
8077   37D5 D8            push b
8078   37D6 FD 2E 0C 00   mov32 cb, $0000000c
8078   37DA 00 00 
8079   37DC E7            pop d
8080   37DD FD 3E         mov [d], bl
8081   37DF             ; break; 
8082   37DF 0A AA 38      jmp _switch185_exit ; case break
8083   37E2             _switch185_case4:
8084   37E2             ; *s++ = '\n'; 
8085   37E2 FA FF FF      lea d, [bp + -1] ; $s
8086   37E5 2A            mov b, [d]
8087   37E6 38 00 00      mov c, 0
8088   37E9 FD 77         inc b
8089   37EB FA FF FF      lea d, [bp + -1] ; $s
8090   37EE FD 43         mov [d], b
8091   37F0 FD 7D         dec b
8092   37F2 D8            push b
8093   37F3 FD 2E 0A 00   mov32 cb, $0000000a
8093   37F7 00 00 
8094   37F9 E7            pop d
8095   37FA FD 3E         mov [d], bl
8096   37FC             ; break; 
8097   37FC 0A AA 38      jmp _switch185_exit ; case break
8098   37FF             _switch185_case5:
8099   37FF             ; *s++ = '\r'; 
8100   37FF FA FF FF      lea d, [bp + -1] ; $s
8101   3802 2A            mov b, [d]
8102   3803 38 00 00      mov c, 0
8103   3806 FD 77         inc b
8104   3808 FA FF FF      lea d, [bp + -1] ; $s
8105   380B FD 43         mov [d], b
8106   380D FD 7D         dec b
8107   380F D8            push b
8108   3810 FD 2E 0D 00   mov32 cb, $0000000d
8108   3814 00 00 
8109   3816 E7            pop d
8110   3817 FD 3E         mov [d], bl
8111   3819             ; break; 
8112   3819 0A AA 38      jmp _switch185_exit ; case break
8113   381C             _switch185_case6:
8114   381C             ; *s++ = '\t'; 
8115   381C FA FF FF      lea d, [bp + -1] ; $s
8116   381F 2A            mov b, [d]
8117   3820 38 00 00      mov c, 0
8118   3823 FD 77         inc b
8119   3825 FA FF FF      lea d, [bp + -1] ; $s
8120   3828 FD 43         mov [d], b
8121   382A FD 7D         dec b
8122   382C D8            push b
8123   382D FD 2E 09 00   mov32 cb, $00000009
8123   3831 00 00 
8124   3833 E7            pop d
8125   3834 FD 3E         mov [d], bl
8126   3836             ; break; 
8127   3836 0A AA 38      jmp _switch185_exit ; case break
8128   3839             _switch185_case7:
8129   3839             ; *s++ = '\v'; 
8130   3839 FA FF FF      lea d, [bp + -1] ; $s
8131   383C 2A            mov b, [d]
8132   383D 38 00 00      mov c, 0
8133   3840 FD 77         inc b
8134   3842 FA FF FF      lea d, [bp + -1] ; $s
8135   3845 FD 43         mov [d], b
8136   3847 FD 7D         dec b
8137   3849 D8            push b
8138   384A FD 2E 0B 00   mov32 cb, $0000000b
8138   384E 00 00 
8139   3850 E7            pop d
8140   3851 FD 3E         mov [d], bl
8141   3853             ; break; 
8142   3853 0A AA 38      jmp _switch185_exit ; case break
8143   3856             _switch185_case8:
8144   3856             ; *s++ = '\\'; 
8145   3856 FA FF FF      lea d, [bp + -1] ; $s
8146   3859 2A            mov b, [d]
8147   385A 38 00 00      mov c, 0
8148   385D FD 77         inc b
8149   385F FA FF FF      lea d, [bp + -1] ; $s
8150   3862 FD 43         mov [d], b
8151   3864 FD 7D         dec b
8152   3866 D8            push b
8153   3867 FD 2E 5C 00   mov32 cb, $0000005c
8153   386B 00 00 
8154   386D E7            pop d
8155   386E FD 3E         mov [d], bl
8156   3870             ; break; 
8157   3870 0A AA 38      jmp _switch185_exit ; case break
8158   3873             _switch185_case9:
8159   3873             ; *s++ = '\''; 
8160   3873 FA FF FF      lea d, [bp + -1] ; $s
8161   3876 2A            mov b, [d]
8162   3877 38 00 00      mov c, 0
8163   387A FD 77         inc b
8164   387C FA FF FF      lea d, [bp + -1] ; $s
8165   387F FD 43         mov [d], b
8166   3881 FD 7D         dec b
8167   3883 D8            push b
8168   3884 FD 2E 27 00   mov32 cb, $00000027
8168   3888 00 00 
8169   388A E7            pop d
8170   388B FD 3E         mov [d], bl
8171   388D             ; break; 
8172   388D 0A AA 38      jmp _switch185_exit ; case break
8173   3890             _switch185_case10:
8174   3890             ; *s++ = '\"'; 
8175   3890 FA FF FF      lea d, [bp + -1] ; $s
8176   3893 2A            mov b, [d]
8177   3894 38 00 00      mov c, 0
8178   3897 FD 77         inc b
8179   3899 FA FF FF      lea d, [bp + -1] ; $s
8180   389C FD 43         mov [d], b
8181   389E FD 7D         dec b
8182   38A0 D8            push b
8183   38A1 FD 2E 22 00   mov32 cb, $00000022
8183   38A5 00 00 
8184   38A7 E7            pop d
8185   38A8 FD 3E         mov [d], bl
8186   38AA             _switch185_exit:
8187   38AA 0A CF 38      jmp _if184_exit
8188   38AD             _if184_else:
8189   38AD             ; *s++ = *t; 
8190   38AD FA FF FF      lea d, [bp + -1] ; $s
8191   38B0 2A            mov b, [d]
8192   38B1 38 00 00      mov c, 0
8193   38B4 FD 77         inc b
8194   38B6 FA FF FF      lea d, [bp + -1] ; $s
8195   38B9 FD 43         mov [d], b
8196   38BB FD 7D         dec b
8197   38BD D8            push b
8198   38BE FA FD FF      lea d, [bp + -3] ; $t
8199   38C1 2A            mov b, [d]
8200   38C2 38 00 00      mov c, 0
8201   38C5 74            mov d, b
8202   38C6 32            mov bl, [d]
8203   38C7 A7 00         mov bh, 0
8204   38C9 38 00 00      mov c, 0
8205   38CC E7            pop d
8206   38CD FD 3E         mov [d], bl
8207   38CF             _if184_exit:
8208   38CF 0A 5F 39      jmp _if183_exit
8209   38D2             _if183_else:
8210   38D2             ; if(toktype == STRING_CONST){ 
8211   38D2             _if186_cond:
8212   38D2 3B 7D 4E      mov d, _toktype ; $toktype
8213   38D5 2A            mov b, [d]
8214   38D6 38 00 00      mov c, 0
8215   38D9             ; --- START RELATIONAL
8216   38D9 D7            push a
8217   38DA 11            mov a, b
8218   38DB FD 2E 04 00   mov32 cb, $4 ; enum element: STRING_CONST
8218   38DF 00 00 
8219   38E1 B0            cmp a, b
8220   38E2 FD 71         seq ; ==
8221   38E4 E4            pop a
8222   38E5             ; --- END RELATIONAL
8223   38E5 C0 00 00      cmp b, 0
8224   38E8 C6 5F 39      je _if186_exit
8225   38EB             _if186_TRUE:
8226   38EB             ; t++; 
8227   38EB FA FD FF      lea d, [bp + -3] ; $t
8228   38EE 2A            mov b, [d]
8229   38EF 38 00 00      mov c, 0
8230   38F2 FD 77         inc b
8231   38F4 FA FD FF      lea d, [bp + -3] ; $t
8232   38F7 FD 43         mov [d], b
8233   38F9 FD 7D         dec b
8234   38FB             ; while(*t != '\"' && *t){ 
8235   38FB             _while187_cond:
8236   38FB FA FD FF      lea d, [bp + -3] ; $t
8237   38FE 2A            mov b, [d]
8238   38FF 38 00 00      mov c, 0
8239   3902 74            mov d, b
8240   3903 32            mov bl, [d]
8241   3904 A7 00         mov bh, 0
8242   3906 38 00 00      mov c, 0
8243   3909             ; --- START RELATIONAL
8244   3909 D7            push a
8245   390A 11            mov a, b
8246   390B FD 2E 22 00   mov32 cb, $00000022
8246   390F 00 00 
8247   3911 B0            cmp a, b
8248   3912 FD 72         sneq ; !=
8249   3914 E4            pop a
8250   3915             ; --- END RELATIONAL
8251   3915             ; --- START LOGICAL AND
8252   3915 D7            push a
8253   3916 11            mov a, b
8254   3917 FA FD FF      lea d, [bp + -3] ; $t
8255   391A 2A            mov b, [d]
8256   391B 38 00 00      mov c, 0
8257   391E 74            mov d, b
8258   391F 32            mov bl, [d]
8259   3920 A7 00         mov bh, 0
8260   3922 38 00 00      mov c, 0
8261   3925 FD A7         sand a, b
8262   3927 E4            pop a
8263   3928             ; --- END LOGICAL AND
8264   3928 C0 00 00      cmp b, 0
8265   392B C6 5C 39      je _while187_exit
8266   392E             _while187_block:
8267   392E             ; *s++ = *t++; 
8268   392E FA FF FF      lea d, [bp + -1] ; $s
8269   3931 2A            mov b, [d]
8270   3932 38 00 00      mov c, 0
8271   3935 FD 77         inc b
8272   3937 FA FF FF      lea d, [bp + -1] ; $s
8273   393A FD 43         mov [d], b
8274   393C FD 7D         dec b
8275   393E D8            push b
8276   393F FA FD FF      lea d, [bp + -3] ; $t
8277   3942 2A            mov b, [d]
8278   3943 38 00 00      mov c, 0
8279   3946 FD 77         inc b
8280   3948 FA FD FF      lea d, [bp + -3] ; $t
8281   394B FD 43         mov [d], b
8282   394D FD 7D         dec b
8283   394F 74            mov d, b
8284   3950 32            mov bl, [d]
8285   3951 A7 00         mov bh, 0
8286   3953 38 00 00      mov c, 0
8287   3956 E7            pop d
8288   3957 FD 3E         mov [d], bl
8289   3959 0A FB 38      jmp _while187_cond
8290   395C             _while187_exit:
8291   395C 0A 5F 39      jmp _if186_exit
8292   395F             _if186_exit:
8293   395F             _if183_exit:
8294   395F             ; *s = '\0'; 
8295   395F FA FF FF      lea d, [bp + -1] ; $s
8296   3962 2A            mov b, [d]
8297   3963 38 00 00      mov c, 0
8298   3966 D8            push b
8299   3967 FD 2E 00 00   mov32 cb, $00000000
8299   396B 00 00 
8300   396D E7            pop d
8301   396E FD 3E         mov [d], bl
8302   3970 F9            leave
8303   3971 09            ret
8304   3972             
8305   3972             error:
8306   3972 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8307   3975             ; printf("\nError: %s\n", msg); 
8308   3975             ; --- START FUNCTION CALL
8309   3975 FA 05 00      lea d, [bp + 5] ; $msg
8310   3978 2A            mov b, [d]
8311   3979 38 00 00      mov c, 0
8312   397C FD AB         swp b
8313   397E D8            push b
8314   397F 26 63 53      mov b, _s78 ; "\nError: %s\n"
8315   3982 FD AB         swp b
8316   3984 D8            push b
8317   3985 07 99 42      call printf
8318   3988 51 04 00      add sp, 4
8319   398B             ; --- END FUNCTION CALL
8320   398B             ; exit(1); 
8321   398B             ; --- START FUNCTION CALL
8322   398B FD 2E 01 00   mov32 cb, $00000001
8322   398F 00 00 
8323   3991 FD AB         swp b
8324   3993 D8            push b
8325   3994 07 94 4B      call exit
8326   3997 51 02 00      add sp, 2
8327   399A             ; --- END FUNCTION CALL
8328   399A F9            leave
8329   399B 09            ret
8330   399C             
8331   399C             error_s:
8332   399C F8 00 00      enter 0 ; (push bp; mov bp, sp)
8333   399F             ; printf("\nError: %s %s\n", msg, param); 
8334   399F             ; --- START FUNCTION CALL
8335   399F FA 07 00      lea d, [bp + 7] ; $param
8336   39A2 2A            mov b, [d]
8337   39A3 38 00 00      mov c, 0
8338   39A6 FD AB         swp b
8339   39A8 D8            push b
8340   39A9 FA 05 00      lea d, [bp + 5] ; $msg
8341   39AC 2A            mov b, [d]
8342   39AD 38 00 00      mov c, 0
8343   39B0 FD AB         swp b
8344   39B2 D8            push b
8345   39B3 26 6F 53      mov b, _s79 ; "\nError: %s %s\n"
8346   39B6 FD AB         swp b
8347   39B8 D8            push b
8348   39B9 07 99 42      call printf
8349   39BC 51 06 00      add sp, 6
8350   39BF             ; --- END FUNCTION CALL
8351   39BF             ; exit(1); 
8352   39BF             ; --- START FUNCTION CALL
8353   39BF FD 2E 01 00   mov32 cb, $00000001
8353   39C3 00 00 
8354   39C5 FD AB         swp b
8355   39C7 D8            push b
8356   39C8 07 94 4B      call exit
8357   39CB 51 02 00      add sp, 2
8358   39CE             ; --- END FUNCTION CALL
8359   39CE F9            leave
8360   39CF 09            ret
8361   39D0             
8362   39D0             push_prog:
8363   39D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8364   39D3             ; if(prog_tos == 10) error("Cannot push prog. Stack overflow."); 
8365   39D3             _if188_cond:
8366   39D3 3B DF 4F      mov d, _prog_tos ; $prog_tos
8367   39D6 2A            mov b, [d]
8368   39D7 38 00 00      mov c, 0
8369   39DA             ; --- START RELATIONAL
8370   39DA D7            push a
8371   39DB 11            mov a, b
8372   39DC FD 2E 0A 00   mov32 cb, $0000000a
8372   39E0 00 00 
8373   39E2 B0            cmp a, b
8374   39E3 FD 71         seq ; ==
8375   39E5 E4            pop a
8376   39E6             ; --- END RELATIONAL
8377   39E6 C0 00 00      cmp b, 0
8378   39E9 C6 FB 39      je _if188_exit
8379   39EC             _if188_TRUE:
8380   39EC             ; error("Cannot push prog. Stack overflow."); 
8381   39EC             ; --- START FUNCTION CALL
8382   39EC 26 7E 53      mov b, _s80 ; "Cannot push prog. Stack overflow."
8383   39EF FD AB         swp b
8384   39F1 D8            push b
8385   39F2 07 72 39      call error
8386   39F5 51 02 00      add sp, 2
8387   39F8             ; --- END FUNCTION CALL
8388   39F8 0A FB 39      jmp _if188_exit
8389   39FB             _if188_exit:
8390   39FB             ; prog_stack[prog_tos] = prog; 
8391   39FB 3B CB 4F      mov d, _prog_stack_data ; $prog_stack
8392   39FE D7            push a
8393   39FF DA            push d
8394   3A00 3B DF 4F      mov d, _prog_tos ; $prog_tos
8395   3A03 2A            mov b, [d]
8396   3A04 38 00 00      mov c, 0
8397   3A07 E7            pop d
8398   3A08 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8399   3A0C E4            pop a
8400   3A0D DA            push d
8401   3A0E 3B 7F 4E      mov d, _prog ; $prog
8402   3A11 2A            mov b, [d]
8403   3A12 38 00 00      mov c, 0
8404   3A15 E7            pop d
8405   3A16 FD 43         mov [d], b
8406   3A18             ; prog_tos++; 
8407   3A18 3B DF 4F      mov d, _prog_tos ; $prog_tos
8408   3A1B 2A            mov b, [d]
8409   3A1C 38 00 00      mov c, 0
8410   3A1F 11            mov a, b
8411   3A20 FD 77         inc b
8412   3A22 3B DF 4F      mov d, _prog_tos ; $prog_tos
8413   3A25 FD 43         mov [d], b
8414   3A27 27            mov b, a
8415   3A28 F9            leave
8416   3A29 09            ret
8417   3A2A             
8418   3A2A             pop_prog:
8419   3A2A F8 00 00      enter 0 ; (push bp; mov bp, sp)
8420   3A2D             ; if(prog_tos == 0) error("Cannot pop prog. Stack overflow."); 
8421   3A2D             _if189_cond:
8422   3A2D 3B DF 4F      mov d, _prog_tos ; $prog_tos
8423   3A30 2A            mov b, [d]
8424   3A31 38 00 00      mov c, 0
8425   3A34             ; --- START RELATIONAL
8426   3A34 D7            push a
8427   3A35 11            mov a, b
8428   3A36 FD 2E 00 00   mov32 cb, $00000000
8428   3A3A 00 00 
8429   3A3C B0            cmp a, b
8430   3A3D FD 71         seq ; ==
8431   3A3F E4            pop a
8432   3A40             ; --- END RELATIONAL
8433   3A40 C0 00 00      cmp b, 0
8434   3A43 C6 55 3A      je _if189_exit
8435   3A46             _if189_TRUE:
8436   3A46             ; error("Cannot pop prog. Stack overflow."); 
8437   3A46             ; --- START FUNCTION CALL
8438   3A46 26 A0 53      mov b, _s81 ; "Cannot pop prog. Stack overflow."
8439   3A49 FD AB         swp b
8440   3A4B D8            push b
8441   3A4C 07 72 39      call error
8442   3A4F 51 02 00      add sp, 2
8443   3A52             ; --- END FUNCTION CALL
8444   3A52 0A 55 3A      jmp _if189_exit
8445   3A55             _if189_exit:
8446   3A55             ; prog_tos--; 
8447   3A55 3B DF 4F      mov d, _prog_tos ; $prog_tos
8448   3A58 2A            mov b, [d]
8449   3A59 38 00 00      mov c, 0
8450   3A5C 11            mov a, b
8451   3A5D FD 7D         dec b
8452   3A5F 3B DF 4F      mov d, _prog_tos ; $prog_tos
8453   3A62 FD 43         mov [d], b
8454   3A64 27            mov b, a
8455   3A65             ; prog = prog_stack[prog_tos]; 
8456   3A65 3B 7F 4E      mov d, _prog ; $prog
8457   3A68 DA            push d
8458   3A69 3B CB 4F      mov d, _prog_stack_data ; $prog_stack
8459   3A6C D7            push a
8460   3A6D DA            push d
8461   3A6E 3B DF 4F      mov d, _prog_tos ; $prog_tos
8462   3A71 2A            mov b, [d]
8463   3A72 38 00 00      mov c, 0
8464   3A75 E7            pop d
8465   3A76 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8466   3A7A E4            pop a
8467   3A7B 2A            mov b, [d]
8468   3A7C 38 00 00      mov c, 0
8469   3A7F E7            pop d
8470   3A80 FD 43         mov [d], b
8471   3A82 F9            leave
8472   3A83 09            ret
8473   3A84             
8474   3A84             search_keyword:
8475   3A84 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8476   3A87             ; int i; 
8477   3A87 52 02 00      sub sp, 2
8478   3A8A             ; for(i = 0; keywords[i].keyword[0]; i++) 
8479   3A8A             _for190_init:
8480   3A8A FA FF FF      lea d, [bp + -1] ; $i
8481   3A8D DA            push d
8482   3A8E FD 2E 00 00   mov32 cb, $00000000
8482   3A92 00 00 
8483   3A94 E7            pop d
8484   3A95 FD 43         mov [d], b
8485   3A97             _for190_cond:
8486   3A97 3B 3E 4D      mov d, _keywords_data ; $keywords
8487   3A9A D7            push a
8488   3A9B DA            push d
8489   3A9C FA FF FF      lea d, [bp + -1] ; $i
8490   3A9F 2A            mov b, [d]
8491   3AA0 38 00 00      mov c, 0
8492   3AA3 E7            pop d
8493   3AA4 FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
8494   3AA8 E4            pop a
8495   3AA9 58 00 00      add d, 0
8496   3AAC D7            push a
8497   3AAD DA            push d
8498   3AAE FD 2E 00 00   mov32 cb, $00000000
8498   3AB2 00 00 
8499   3AB4 E7            pop d
8500   3AB5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
8501   3AB9 E4            pop a
8502   3ABA 32            mov bl, [d]
8503   3ABB A7 00         mov bh, 0
8504   3ABD 38 00 00      mov c, 0
8505   3AC0 C0 00 00      cmp b, 0
8506   3AC3 C6 2B 3B      je _for190_exit
8507   3AC6             _for190_block:
8508   3AC6             ; if (!strcmp(keywords[i].keyword, keyword)) return keywords[i].tok; 
8509   3AC6             _if191_cond:
8510   3AC6             ; --- START FUNCTION CALL
8511   3AC6 FA 05 00      lea d, [bp + 5] ; $keyword
8512   3AC9 2A            mov b, [d]
8513   3ACA 38 00 00      mov c, 0
8514   3ACD FD AB         swp b
8515   3ACF D8            push b
8516   3AD0 3B 3E 4D      mov d, _keywords_data ; $keywords
8517   3AD3 D7            push a
8518   3AD4 DA            push d
8519   3AD5 FA FF FF      lea d, [bp + -1] ; $i
8520   3AD8 2A            mov b, [d]
8521   3AD9 38 00 00      mov c, 0
8522   3ADC E7            pop d
8523   3ADD FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
8524   3AE1 E4            pop a
8525   3AE2 58 00 00      add d, 0
8526   3AE5 2A            mov b, [d]
8527   3AE6 38 00 00      mov c, 0
8528   3AE9 FD AB         swp b
8529   3AEB D8            push b
8530   3AEC 07 CB 3F      call strcmp
8531   3AEF 51 04 00      add sp, 4
8532   3AF2             ; --- END FUNCTION CALL
8533   3AF2 C0 00 00      cmp b, 0
8534   3AF5 C6 18 3B      je _if191_exit
8535   3AF8             _if191_TRUE:
8536   3AF8             ; return keywords[i].tok; 
8537   3AF8 3B 3E 4D      mov d, _keywords_data ; $keywords
8538   3AFB D7            push a
8539   3AFC DA            push d
8540   3AFD FA FF FF      lea d, [bp + -1] ; $i
8541   3B00 2A            mov b, [d]
8542   3B01 38 00 00      mov c, 0
8543   3B04 E7            pop d
8544   3B05 FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
8545   3B09 E4            pop a
8546   3B0A 58 02 00      add d, 2
8547   3B0D 32            mov bl, [d]
8548   3B0E A7 00         mov bh, 0
8549   3B10 38 00 00      mov c, 0
8550   3B13 F9            leave
8551   3B14 09            ret
8552   3B15 0A 18 3B      jmp _if191_exit
8553   3B18             _if191_exit:
8554   3B18             _for190_update:
8555   3B18 FA FF FF      lea d, [bp + -1] ; $i
8556   3B1B 2A            mov b, [d]
8557   3B1C 38 00 00      mov c, 0
8558   3B1F 11            mov a, b
8559   3B20 FD 77         inc b
8560   3B22 FA FF FF      lea d, [bp + -1] ; $i
8561   3B25 FD 43         mov [d], b
8562   3B27 27            mov b, a
8563   3B28 0A 97 3A      jmp _for190_cond
8564   3B2B             _for190_exit:
8565   3B2B             ; return -1; 
8566   3B2B FD 2E FF FF   mov32 cb, $ffffffff
8566   3B2F FF FF 
8567   3B31 F9            leave
8568   3B32 09            ret
8569   3B33             
8570   3B33             hex_to_int:
8571   3B33 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8572   3B36             ; int value = 0; 
8573   3B36 52 02 00      sub sp, 2
8574   3B39             ; --- START LOCAL VAR INITIALIZATION
8575   3B39 FA FF FF      lea d, [bp + -1] ; $value
8576   3B3C DA            push d
8577   3B3D FD 2E 00 00   mov32 cb, $00000000
8577   3B41 00 00 
8578   3B43 E7            pop d
8579   3B44 FD 43         mov [d], b
8580   3B46             ; --- END LOCAL VAR INITIALIZATION
8581   3B46             ; int i; 
8582   3B46 52 02 00      sub sp, 2
8583   3B49             ; char hex_char; 
8584   3B49 52 01 00      sub sp, 1
8585   3B4C             ; int len; 
8586   3B4C 52 02 00      sub sp, 2
8587   3B4F             ; len = strlen(hex_string); 
8588   3B4F FA FA FF      lea d, [bp + -6] ; $len
8589   3B52 DA            push d
8590   3B53             ; --- START FUNCTION CALL
8591   3B53 FA 05 00      lea d, [bp + 5] ; $hex_string
8592   3B56 2A            mov b, [d]
8593   3B57 38 00 00      mov c, 0
8594   3B5A FD AB         swp b
8595   3B5C D8            push b
8596   3B5D 07 4F 40      call strlen
8597   3B60 51 02 00      add sp, 2
8598   3B63             ; --- END FUNCTION CALL
8599   3B63 E7            pop d
8600   3B64 FD 43         mov [d], b
8601   3B66             ; for (i = 0; i < len; i++) { 
8602   3B66             _for192_init:
8603   3B66 FA FD FF      lea d, [bp + -3] ; $i
8604   3B69 DA            push d
8605   3B6A FD 2E 00 00   mov32 cb, $00000000
8605   3B6E 00 00 
8606   3B70 E7            pop d
8607   3B71 FD 43         mov [d], b
8608   3B73             _for192_cond:
8609   3B73 FA FD FF      lea d, [bp + -3] ; $i
8610   3B76 2A            mov b, [d]
8611   3B77 38 00 00      mov c, 0
8612   3B7A             ; --- START RELATIONAL
8613   3B7A D7            push a
8614   3B7B 11            mov a, b
8615   3B7C FA FA FF      lea d, [bp + -6] ; $len
8616   3B7F 2A            mov b, [d]
8617   3B80 38 00 00      mov c, 0
8618   3B83 B0            cmp a, b
8619   3B84 FD 73         slt ; < (signed)
8620   3B86 E4            pop a
8621   3B87             ; --- END RELATIONAL
8622   3B87 C0 00 00      cmp b, 0
8623   3B8A C6 A0 3D      je _for192_exit
8624   3B8D             _for192_block:
8625   3B8D             ; hex_char = hex_string[i]; 
8626   3B8D FA FC FF      lea d, [bp + -4] ; $hex_char
8627   3B90 DA            push d
8628   3B91 FA 05 00      lea d, [bp + 5] ; $hex_string
8629   3B94 FD 2A         mov d, [d]
8630   3B96 D7            push a
8631   3B97 DA            push d
8632   3B98 FA FD FF      lea d, [bp + -3] ; $i
8633   3B9B 2A            mov b, [d]
8634   3B9C 38 00 00      mov c, 0
8635   3B9F E7            pop d
8636   3BA0 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
8637   3BA4 E4            pop a
8638   3BA5 32            mov bl, [d]
8639   3BA6 A7 00         mov bh, 0
8640   3BA8 38 00 00      mov c, 0
8641   3BAB E7            pop d
8642   3BAC FD 3E         mov [d], bl
8643   3BAE             ; if (hex_char >= 'a' && hex_char <= 'f')  
8644   3BAE             _if193_cond:
8645   3BAE FA FC FF      lea d, [bp + -4] ; $hex_char
8646   3BB1 32            mov bl, [d]
8647   3BB2 A7 00         mov bh, 0
8648   3BB4 38 00 00      mov c, 0
8649   3BB7             ; --- START RELATIONAL
8650   3BB7 D7            push a
8651   3BB8 11            mov a, b
8652   3BB9 FD 2E 61 00   mov32 cb, $00000061
8652   3BBD 00 00 
8653   3BBF B0            cmp a, b
8654   3BC0 FD 80         sge ; >=
8655   3BC2 E4            pop a
8656   3BC3             ; --- END RELATIONAL
8657   3BC3             ; --- START LOGICAL AND
8658   3BC3 D7            push a
8659   3BC4 11            mov a, b
8660   3BC5 FA FC FF      lea d, [bp + -4] ; $hex_char
8661   3BC8 32            mov bl, [d]
8662   3BC9 A7 00         mov bh, 0
8663   3BCB 38 00 00      mov c, 0
8664   3BCE             ; --- START RELATIONAL
8665   3BCE D7            push a
8666   3BCF 11            mov a, b
8667   3BD0 FD 2E 66 00   mov32 cb, $00000066
8667   3BD4 00 00 
8668   3BD6 B0            cmp a, b
8669   3BD7 FD 74         sle ; <= (signed)
8670   3BD9 E4            pop a
8671   3BDA             ; --- END RELATIONAL
8672   3BDA FD A7         sand a, b
8673   3BDC E4            pop a
8674   3BDD             ; --- END LOGICAL AND
8675   3BDD C0 00 00      cmp b, 0
8676   3BE0 C6 63 3C      je _if193_else
8677   3BE3             _if193_TRUE:
8678   3BE3             ; value = (value * 16) + (hex_char - 'a' + 10); 
8679   3BE3 FA FF FF      lea d, [bp + -1] ; $value
8680   3BE6 DA            push d
8681   3BE7 FA FF FF      lea d, [bp + -1] ; $value
8682   3BEA 2A            mov b, [d]
8683   3BEB 38 00 00      mov c, 0
8684   3BEE             ; --- START FACTORS
8685   3BEE D7            push a
8686   3BEF FD D8         push g
8687   3BF1 11            mov a, b
8688   3BF2 FD 7A         mov g, c
8689   3BF4 FD 2E 10 00   mov32 cb, $00000010
8689   3BF8 00 00 
8690   3BFA D7            push a     ; save left operand
8691   3BFB 8E            xor a, b   ; xor sign bits
8692   3BFC FD AA         swp a      ; swap bytes
8693   3BFE 83            mov cl, al ; save result of xor into 'dl'
8694   3BFF E4            pop a      ; restore left side operator
8695   3C00 DF            push cl    ; save result of xor above
8696   3C01 FD AA         swp a  
8697   3C03 93 80         test al, $80  
8698   3C05 FD AA         swp a  
8699   3C07 C6 0C 3C      jz skip_invert_a_197  
8700   3C0A FD 95         neg a 
8701   3C0C             skip_invert_a_197:   
8702   3C0C FD AB         swp b
8703   3C0E FD 93 80      test bl, $80  
8704   3C11 FD AB         swp b
8705   3C13 C6 18 3C      jz skip_invert_b_197  
8706   3C16 FD 97         neg b 
8707   3C18             skip_invert_b_197:   
8708   3C18 AC            mul a, b ; *
8709   3C19 FD 78         mov g, a
8710   3C1B 11            mov a, b
8711   3C1C EA            pop bl
8712   3C1D FD 93 80      test bl, $80
8713   3C20 C6 2D 3C      jz _same_signs_197
8714   3C23 2F            mov bl, al
8715   3C24 95            not a
8716   3C25 FD 97         neg b
8717   3C27 5B 00 00      adc a, 0
8718   3C2A FD 78         mov g, a
8719   3C2C 11            mov a, b
8720   3C2D             _same_signs_197:
8721   3C2D FD 38         mov c, g
8722   3C2F 27            mov b, a
8723   3C30 FD F1         pop g
8724   3C32 E4            pop a
8725   3C33             ; --- END FACTORS
8726   3C33             ; --- START TERMS
8727   3C33 D7            push a
8728   3C34 FD D8         push g
8729   3C36 11            mov a, b
8730   3C37 FD 7A         mov g, c
8731   3C39 FA FC FF      lea d, [bp + -4] ; $hex_char
8732   3C3C 32            mov bl, [d]
8733   3C3D A7 00         mov bh, 0
8734   3C3F 38 00 00      mov c, 0
8735   3C42             ; --- START TERMS
8736   3C42 D7            push a
8737   3C43 11            mov a, b
8738   3C44 FD 2E 61 00   mov32 cb, $00000061
8738   3C48 00 00 
8739   3C4A 60            sub a, b
8740   3C4B 27            mov b, a
8741   3C4C 11            mov a, b
8742   3C4D FD 2E 0A 00   mov32 cb, $0000000a
8742   3C51 00 00 
8743   3C53 56            add b, a
8744   3C54 E4            pop a
8745   3C55             ; --- END TERMS
8746   3C55 38 00 00      mov c, 0
8747   3C58 FD 15         add32 cb, ga
8748   3C5A FD F1         pop g
8749   3C5C E4            pop a
8750   3C5D             ; --- END TERMS
8751   3C5D E7            pop d
8752   3C5E FD 43         mov [d], b
8753   3C60 0A 8D 3D      jmp _if193_exit
8754   3C63             _if193_else:
8755   3C63             ; if (hex_char >= 'A' && hex_char <= 'F')  
8756   3C63             _if198_cond:
8757   3C63 FA FC FF      lea d, [bp + -4] ; $hex_char
8758   3C66 32            mov bl, [d]
8759   3C67 A7 00         mov bh, 0
8760   3C69 38 00 00      mov c, 0
8761   3C6C             ; --- START RELATIONAL
8762   3C6C D7            push a
8763   3C6D 11            mov a, b
8764   3C6E FD 2E 41 00   mov32 cb, $00000041
8764   3C72 00 00 
8765   3C74 B0            cmp a, b
8766   3C75 FD 80         sge ; >=
8767   3C77 E4            pop a
8768   3C78             ; --- END RELATIONAL
8769   3C78             ; --- START LOGICAL AND
8770   3C78 D7            push a
8771   3C79 11            mov a, b
8772   3C7A FA FC FF      lea d, [bp + -4] ; $hex_char
8773   3C7D 32            mov bl, [d]
8774   3C7E A7 00         mov bh, 0
8775   3C80 38 00 00      mov c, 0
8776   3C83             ; --- START RELATIONAL
8777   3C83 D7            push a
8778   3C84 11            mov a, b
8779   3C85 FD 2E 46 00   mov32 cb, $00000046
8779   3C89 00 00 
8780   3C8B B0            cmp a, b
8781   3C8C FD 74         sle ; <= (signed)
8782   3C8E E4            pop a
8783   3C8F             ; --- END RELATIONAL
8784   3C8F FD A7         sand a, b
8785   3C91 E4            pop a
8786   3C92             ; --- END LOGICAL AND
8787   3C92 C0 00 00      cmp b, 0
8788   3C95 C6 18 3D      je _if198_else
8789   3C98             _if198_TRUE:
8790   3C98             ; value = (value * 16) + (hex_char - 'A' + 10); 
8791   3C98 FA FF FF      lea d, [bp + -1] ; $value
8792   3C9B DA            push d
8793   3C9C FA FF FF      lea d, [bp + -1] ; $value
8794   3C9F 2A            mov b, [d]
8795   3CA0 38 00 00      mov c, 0
8796   3CA3             ; --- START FACTORS
8797   3CA3 D7            push a
8798   3CA4 FD D8         push g
8799   3CA6 11            mov a, b
8800   3CA7 FD 7A         mov g, c
8801   3CA9 FD 2E 10 00   mov32 cb, $00000010
8801   3CAD 00 00 
8802   3CAF D7            push a     ; save left operand
8803   3CB0 8E            xor a, b   ; xor sign bits
8804   3CB1 FD AA         swp a      ; swap bytes
8805   3CB3 83            mov cl, al ; save result of xor into 'dl'
8806   3CB4 E4            pop a      ; restore left side operator
8807   3CB5 DF            push cl    ; save result of xor above
8808   3CB6 FD AA         swp a  
8809   3CB8 93 80         test al, $80  
8810   3CBA FD AA         swp a  
8811   3CBC C6 C1 3C      jz skip_invert_a_202  
8812   3CBF FD 95         neg a 
8813   3CC1             skip_invert_a_202:   
8814   3CC1 FD AB         swp b
8815   3CC3 FD 93 80      test bl, $80  
8816   3CC6 FD AB         swp b
8817   3CC8 C6 CD 3C      jz skip_invert_b_202  
8818   3CCB FD 97         neg b 
8819   3CCD             skip_invert_b_202:   
8820   3CCD AC            mul a, b ; *
8821   3CCE FD 78         mov g, a
8822   3CD0 11            mov a, b
8823   3CD1 EA            pop bl
8824   3CD2 FD 93 80      test bl, $80
8825   3CD5 C6 E2 3C      jz _same_signs_202
8826   3CD8 2F            mov bl, al
8827   3CD9 95            not a
8828   3CDA FD 97         neg b
8829   3CDC 5B 00 00      adc a, 0
8830   3CDF FD 78         mov g, a
8831   3CE1 11            mov a, b
8832   3CE2             _same_signs_202:
8833   3CE2 FD 38         mov c, g
8834   3CE4 27            mov b, a
8835   3CE5 FD F1         pop g
8836   3CE7 E4            pop a
8837   3CE8             ; --- END FACTORS
8838   3CE8             ; --- START TERMS
8839   3CE8 D7            push a
8840   3CE9 FD D8         push g
8841   3CEB 11            mov a, b
8842   3CEC FD 7A         mov g, c
8843   3CEE FA FC FF      lea d, [bp + -4] ; $hex_char
8844   3CF1 32            mov bl, [d]
8845   3CF2 A7 00         mov bh, 0
8846   3CF4 38 00 00      mov c, 0
8847   3CF7             ; --- START TERMS
8848   3CF7 D7            push a
8849   3CF8 11            mov a, b
8850   3CF9 FD 2E 41 00   mov32 cb, $00000041
8850   3CFD 00 00 
8851   3CFF 60            sub a, b
8852   3D00 27            mov b, a
8853   3D01 11            mov a, b
8854   3D02 FD 2E 0A 00   mov32 cb, $0000000a
8854   3D06 00 00 
8855   3D08 56            add b, a
8856   3D09 E4            pop a
8857   3D0A             ; --- END TERMS
8858   3D0A 38 00 00      mov c, 0
8859   3D0D FD 15         add32 cb, ga
8860   3D0F FD F1         pop g
8861   3D11 E4            pop a
8862   3D12             ; --- END TERMS
8863   3D12 E7            pop d
8864   3D13 FD 43         mov [d], b
8865   3D15 0A 8D 3D      jmp _if198_exit
8866   3D18             _if198_else:
8867   3D18             ; value = (value * 16) + (hex_char - '0'); 
8868   3D18 FA FF FF      lea d, [bp + -1] ; $value
8869   3D1B DA            push d
8870   3D1C FA FF FF      lea d, [bp + -1] ; $value
8871   3D1F 2A            mov b, [d]
8872   3D20 38 00 00      mov c, 0
8873   3D23             ; --- START FACTORS
8874   3D23 D7            push a
8875   3D24 FD D8         push g
8876   3D26 11            mov a, b
8877   3D27 FD 7A         mov g, c
8878   3D29 FD 2E 10 00   mov32 cb, $00000010
8878   3D2D 00 00 
8879   3D2F D7            push a     ; save left operand
8880   3D30 8E            xor a, b   ; xor sign bits
8881   3D31 FD AA         swp a      ; swap bytes
8882   3D33 83            mov cl, al ; save result of xor into 'dl'
8883   3D34 E4            pop a      ; restore left side operator
8884   3D35 DF            push cl    ; save result of xor above
8885   3D36 FD AA         swp a  
8886   3D38 93 80         test al, $80  
8887   3D3A FD AA         swp a  
8888   3D3C C6 41 3D      jz skip_invert_a_206  
8889   3D3F FD 95         neg a 
8890   3D41             skip_invert_a_206:   
8891   3D41 FD AB         swp b
8892   3D43 FD 93 80      test bl, $80  
8893   3D46 FD AB         swp b
8894   3D48 C6 4D 3D      jz skip_invert_b_206  
8895   3D4B FD 97         neg b 
8896   3D4D             skip_invert_b_206:   
8897   3D4D AC            mul a, b ; *
8898   3D4E FD 78         mov g, a
8899   3D50 11            mov a, b
8900   3D51 EA            pop bl
8901   3D52 FD 93 80      test bl, $80
8902   3D55 C6 62 3D      jz _same_signs_206
8903   3D58 2F            mov bl, al
8904   3D59 95            not a
8905   3D5A FD 97         neg b
8906   3D5C 5B 00 00      adc a, 0
8907   3D5F FD 78         mov g, a
8908   3D61 11            mov a, b
8909   3D62             _same_signs_206:
8910   3D62 FD 38         mov c, g
8911   3D64 27            mov b, a
8912   3D65 FD F1         pop g
8913   3D67 E4            pop a
8914   3D68             ; --- END FACTORS
8915   3D68             ; --- START TERMS
8916   3D68 D7            push a
8917   3D69 FD D8         push g
8918   3D6B 11            mov a, b
8919   3D6C FD 7A         mov g, c
8920   3D6E FA FC FF      lea d, [bp + -4] ; $hex_char
8921   3D71 32            mov bl, [d]
8922   3D72 A7 00         mov bh, 0
8923   3D74 38 00 00      mov c, 0
8924   3D77             ; --- START TERMS
8925   3D77 D7            push a
8926   3D78 11            mov a, b
8927   3D79 FD 2E 30 00   mov32 cb, $00000030
8927   3D7D 00 00 
8928   3D7F 60            sub a, b
8929   3D80 27            mov b, a
8930   3D81 E4            pop a
8931   3D82             ; --- END TERMS
8932   3D82 38 00 00      mov c, 0
8933   3D85 FD 15         add32 cb, ga
8934   3D87 FD F1         pop g
8935   3D89 E4            pop a
8936   3D8A             ; --- END TERMS
8937   3D8A E7            pop d
8938   3D8B FD 43         mov [d], b
8939   3D8D             _if198_exit:
8940   3D8D             _if193_exit:
8941   3D8D             _for192_update:
8942   3D8D FA FD FF      lea d, [bp + -3] ; $i
8943   3D90 2A            mov b, [d]
8944   3D91 38 00 00      mov c, 0
8945   3D94 11            mov a, b
8946   3D95 FD 77         inc b
8947   3D97 FA FD FF      lea d, [bp + -3] ; $i
8948   3D9A FD 43         mov [d], b
8949   3D9C 27            mov b, a
8950   3D9D 0A 73 3B      jmp _for192_cond
8951   3DA0             _for192_exit:
8952   3DA0             ; return value; 
8953   3DA0 FA FF FF      lea d, [bp + -1] ; $value
8954   3DA3 2A            mov b, [d]
8955   3DA4 38 00 00      mov c, 0
8956   3DA7 F9            leave
8957   3DA8 09            ret
8958   3DA9             
8959   3DA9             loadfile:
8960   3DA9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8961   3DAC             ; --- BEGIN INLINE ASM SEGMENT
8962   3DAC FA 07 00      lea d, [bp + 7] ; $destination
8963   3DAF 15            mov a, [d]
8964   3DB0 4F            mov di, a
8965   3DB1 FA 05 00      lea d, [bp + 5] ; $filename
8966   3DB4 FD 2A         mov d, [d]
8967   3DB6 19 14         mov al, 20
8968   3DB8 05 04         syscall sys_filesystem
8969   3DBA             ; --- END INLINE ASM SEGMENT
8970   3DBA F9            leave
8971   3DBB 09            ret
8972   3DBC             
8973   3DBC             exp:
8974   3DBC F8 00 00      enter 0 ; (push bp; mov bp, sp)
8975   3DBF             ; int i; 
8976   3DBF 52 02 00      sub sp, 2
8977   3DC2             ; int result = 1; 
8978   3DC2 52 02 00      sub sp, 2
8979   3DC5             ; --- START LOCAL VAR INITIALIZATION
8980   3DC5 FA FD FF      lea d, [bp + -3] ; $result
8981   3DC8 DA            push d
8982   3DC9 FD 2E 01 00   mov32 cb, $00000001
8982   3DCD 00 00 
8983   3DCF E7            pop d
8984   3DD0 FD 43         mov [d], b
8985   3DD2             ; --- END LOCAL VAR INITIALIZATION
8986   3DD2             ; for(i = 0; i < exp; i++){ 
8987   3DD2             _for207_init:
8988   3DD2 FA FF FF      lea d, [bp + -1] ; $i
8989   3DD5 DA            push d
8990   3DD6 FD 2E 00 00   mov32 cb, $00000000
8990   3DDA 00 00 
8991   3DDC E7            pop d
8992   3DDD FD 43         mov [d], b
8993   3DDF             _for207_cond:
8994   3DDF FA FF FF      lea d, [bp + -1] ; $i
8995   3DE2 2A            mov b, [d]
8996   3DE3 38 00 00      mov c, 0
8997   3DE6             ; --- START RELATIONAL
8998   3DE6 D7            push a
8999   3DE7 11            mov a, b
9000   3DE8 FA 07 00      lea d, [bp + 7] ; $exp
9001   3DEB 2A            mov b, [d]
9002   3DEC 38 00 00      mov c, 0
9003   3DEF B0            cmp a, b
9004   3DF0 FD 73         slt ; < (signed)
9005   3DF2 E4            pop a
9006   3DF3             ; --- END RELATIONAL
9007   3DF3 C0 00 00      cmp b, 0
9008   3DF6 C6 60 3E      je _for207_exit
9009   3DF9             _for207_block:
9010   3DF9             ; result = result * base; 
9011   3DF9 FA FD FF      lea d, [bp + -3] ; $result
9012   3DFC DA            push d
9013   3DFD FA FD FF      lea d, [bp + -3] ; $result
9014   3E00 2A            mov b, [d]
9015   3E01 38 00 00      mov c, 0
9016   3E04             ; --- START FACTORS
9017   3E04 D7            push a
9018   3E05 FD D8         push g
9019   3E07 11            mov a, b
9020   3E08 FD 7A         mov g, c
9021   3E0A FA 05 00      lea d, [bp + 5] ; $base
9022   3E0D 2A            mov b, [d]
9023   3E0E 38 00 00      mov c, 0
9024   3E11 D7            push a     ; save left operand
9025   3E12 8E            xor a, b   ; xor sign bits
9026   3E13 FD AA         swp a      ; swap bytes
9027   3E15 83            mov cl, al ; save result of xor into 'dl'
9028   3E16 E4            pop a      ; restore left side operator
9029   3E17 DF            push cl    ; save result of xor above
9030   3E18 FD AA         swp a  
9031   3E1A 93 80         test al, $80  
9032   3E1C FD AA         swp a  
9033   3E1E C6 23 3E      jz skip_invert_a_209  
9034   3E21 FD 95         neg a 
9035   3E23             skip_invert_a_209:   
9036   3E23 FD AB         swp b
9037   3E25 FD 93 80      test bl, $80  
9038   3E28 FD AB         swp b
9039   3E2A C6 2F 3E      jz skip_invert_b_209  
9040   3E2D FD 97         neg b 
9041   3E2F             skip_invert_b_209:   
9042   3E2F AC            mul a, b ; *
9043   3E30 FD 78         mov g, a
9044   3E32 11            mov a, b
9045   3E33 EA            pop bl
9046   3E34 FD 93 80      test bl, $80
9047   3E37 C6 44 3E      jz _same_signs_209
9048   3E3A 2F            mov bl, al
9049   3E3B 95            not a
9050   3E3C FD 97         neg b
9051   3E3E 5B 00 00      adc a, 0
9052   3E41 FD 78         mov g, a
9053   3E43 11            mov a, b
9054   3E44             _same_signs_209:
9055   3E44 FD 38         mov c, g
9056   3E46 27            mov b, a
9057   3E47 FD F1         pop g
9058   3E49 E4            pop a
9059   3E4A             ; --- END FACTORS
9060   3E4A E7            pop d
9061   3E4B FD 43         mov [d], b
9062   3E4D             _for207_update:
9063   3E4D FA FF FF      lea d, [bp + -1] ; $i
9064   3E50 2A            mov b, [d]
9065   3E51 38 00 00      mov c, 0
9066   3E54 11            mov a, b
9067   3E55 FD 77         inc b
9068   3E57 FA FF FF      lea d, [bp + -1] ; $i
9069   3E5A FD 43         mov [d], b
9070   3E5C 27            mov b, a
9071   3E5D 0A DF 3D      jmp _for207_cond
9072   3E60             _for207_exit:
9073   3E60             ; return result; 
9074   3E60 FA FD FF      lea d, [bp + -3] ; $result
9075   3E63 2A            mov b, [d]
9076   3E64 38 00 00      mov c, 0
9077   3E67 F9            leave
9078   3E68 09            ret
9079   3E69             
9080   3E69             print:
9081   3E69 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9082   3E6C             ; --- BEGIN INLINE ASM SEGMENT
9083   3E6C FA 05 00      lea d, [bp + 5] ; $s
9084   3E6F FD 2A         mov d, [d]
9085   3E71             _puts_L1_print:
9086   3E71 1E            mov al, [d]
9087   3E72 B9 00         cmp al, 0
9088   3E74 C6 80 3E      jz _puts_END_print
9089   3E77 23            mov ah, al
9090   3E78 19 00         mov al, 0
9091   3E7A 05 03         syscall sys_io
9092   3E7C 79            inc d
9093   3E7D 0A 71 3E      jmp _puts_L1_print
9094   3E80             _puts_END_print:
9095   3E80             ; --- END INLINE ASM SEGMENT
9096   3E80 F9            leave
9097   3E81 09            ret
9098   3E82             
9099   3E82             alloc:
9100   3E82 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9101   3E85             ; heap_top = heap_top + bytes; 
9102   3E85 3B FD 53      mov d, _heap_top ; $heap_top
9103   3E88 DA            push d
9104   3E89 3B FD 53      mov d, _heap_top ; $heap_top
9105   3E8C 2A            mov b, [d]
9106   3E8D 38 00 00      mov c, 0
9107   3E90             ; --- START TERMS
9108   3E90 D7            push a
9109   3E91 11            mov a, b
9110   3E92 FA 05 00      lea d, [bp + 5] ; $bytes
9111   3E95 2A            mov b, [d]
9112   3E96 38 00 00      mov c, 0
9113   3E99 56            add b, a
9114   3E9A E4            pop a
9115   3E9B             ; --- END TERMS
9116   3E9B E7            pop d
9117   3E9C FD 43         mov [d], b
9118   3E9E             ; return heap_top - bytes; 
9119   3E9E 3B FD 53      mov d, _heap_top ; $heap_top
9120   3EA1 2A            mov b, [d]
9121   3EA2 38 00 00      mov c, 0
9122   3EA5             ; --- START TERMS
9123   3EA5 D7            push a
9124   3EA6 11            mov a, b
9125   3EA7 FA 05 00      lea d, [bp + 5] ; $bytes
9126   3EAA 2A            mov b, [d]
9127   3EAB 38 00 00      mov c, 0
9128   3EAE 60            sub a, b
9129   3EAF 27            mov b, a
9130   3EB0 E4            pop a
9131   3EB1             ; --- END TERMS
9132   3EB1 F9            leave
9133   3EB2 09            ret
9134   3EB3             
9135   3EB3             is_space:
9136   3EB3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9137   3EB6             ; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
9138   3EB6 FA 05 00      lea d, [bp + 5] ; $c
9139   3EB9 32            mov bl, [d]
9140   3EBA A7 00         mov bh, 0
9141   3EBC 38 00 00      mov c, 0
9142   3EBF             ; --- START RELATIONAL
9143   3EBF D7            push a
9144   3EC0 11            mov a, b
9145   3EC1 FD 2E 20 00   mov32 cb, $00000020
9145   3EC5 00 00 
9146   3EC7 B0            cmp a, b
9147   3EC8 FD 71         seq ; ==
9148   3ECA E4            pop a
9149   3ECB             ; --- END RELATIONAL
9150   3ECB             ; --- START LOGICAL OR
9151   3ECB D7            push a
9152   3ECC 11            mov a, b
9153   3ECD FA 05 00      lea d, [bp + 5] ; $c
9154   3ED0 32            mov bl, [d]
9155   3ED1 A7 00         mov bh, 0
9156   3ED3 38 00 00      mov c, 0
9157   3ED6             ; --- START RELATIONAL
9158   3ED6 D7            push a
9159   3ED7 11            mov a, b
9160   3ED8 FD 2E 09 00   mov32 cb, $00000009
9160   3EDC 00 00 
9161   3EDE B0            cmp a, b
9162   3EDF FD 71         seq ; ==
9163   3EE1 E4            pop a
9164   3EE2             ; --- END RELATIONAL
9165   3EE2 FD A8         sor a, b ; ||
9166   3EE4 11            mov a, b
9167   3EE5 FA 05 00      lea d, [bp + 5] ; $c
9168   3EE8 32            mov bl, [d]
9169   3EE9 A7 00         mov bh, 0
9170   3EEB 38 00 00      mov c, 0
9171   3EEE             ; --- START RELATIONAL
9172   3EEE D7            push a
9173   3EEF 11            mov a, b
9174   3EF0 FD 2E 0A 00   mov32 cb, $0000000a
9174   3EF4 00 00 
9175   3EF6 B0            cmp a, b
9176   3EF7 FD 71         seq ; ==
9177   3EF9 E4            pop a
9178   3EFA             ; --- END RELATIONAL
9179   3EFA FD A8         sor a, b ; ||
9180   3EFC 11            mov a, b
9181   3EFD FA 05 00      lea d, [bp + 5] ; $c
9182   3F00 32            mov bl, [d]
9183   3F01 A7 00         mov bh, 0
9184   3F03 38 00 00      mov c, 0
9185   3F06             ; --- START RELATIONAL
9186   3F06 D7            push a
9187   3F07 11            mov a, b
9188   3F08 FD 2E 0D 00   mov32 cb, $0000000d
9188   3F0C 00 00 
9189   3F0E B0            cmp a, b
9190   3F0F FD 71         seq ; ==
9191   3F11 E4            pop a
9192   3F12             ; --- END RELATIONAL
9193   3F12 FD A8         sor a, b ; ||
9194   3F14 E4            pop a
9195   3F15             ; --- END LOGICAL OR
9196   3F15 F9            leave
9197   3F16 09            ret
9198   3F17             
9199   3F17             is_alpha:
9200   3F17 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9201   3F1A             ; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
9202   3F1A FA 05 00      lea d, [bp + 5] ; $c
9203   3F1D 32            mov bl, [d]
9204   3F1E A7 00         mov bh, 0
9205   3F20 38 00 00      mov c, 0
9206   3F23             ; --- START RELATIONAL
9207   3F23 D7            push a
9208   3F24 11            mov a, b
9209   3F25 FD 2E 61 00   mov32 cb, $00000061
9209   3F29 00 00 
9210   3F2B B0            cmp a, b
9211   3F2C FD 80         sge ; >=
9212   3F2E E4            pop a
9213   3F2F             ; --- END RELATIONAL
9214   3F2F             ; --- START LOGICAL AND
9215   3F2F D7            push a
9216   3F30 11            mov a, b
9217   3F31 FA 05 00      lea d, [bp + 5] ; $c
9218   3F34 32            mov bl, [d]
9219   3F35 A7 00         mov bh, 0
9220   3F37 38 00 00      mov c, 0
9221   3F3A             ; --- START RELATIONAL
9222   3F3A D7            push a
9223   3F3B 11            mov a, b
9224   3F3C FD 2E 7A 00   mov32 cb, $0000007a
9224   3F40 00 00 
9225   3F42 B0            cmp a, b
9226   3F43 FD 74         sle ; <= (signed)
9227   3F45 E4            pop a
9228   3F46             ; --- END RELATIONAL
9229   3F46 FD A7         sand a, b
9230   3F48 E4            pop a
9231   3F49             ; --- END LOGICAL AND
9232   3F49             ; --- START LOGICAL OR
9233   3F49 D7            push a
9234   3F4A 11            mov a, b
9235   3F4B FA 05 00      lea d, [bp + 5] ; $c
9236   3F4E 32            mov bl, [d]
9237   3F4F A7 00         mov bh, 0
9238   3F51 38 00 00      mov c, 0
9239   3F54             ; --- START RELATIONAL
9240   3F54 D7            push a
9241   3F55 11            mov a, b
9242   3F56 FD 2E 41 00   mov32 cb, $00000041
9242   3F5A 00 00 
9243   3F5C B0            cmp a, b
9244   3F5D FD 80         sge ; >=
9245   3F5F E4            pop a
9246   3F60             ; --- END RELATIONAL
9247   3F60             ; --- START LOGICAL AND
9248   3F60 D7            push a
9249   3F61 11            mov a, b
9250   3F62 FA 05 00      lea d, [bp + 5] ; $c
9251   3F65 32            mov bl, [d]
9252   3F66 A7 00         mov bh, 0
9253   3F68 38 00 00      mov c, 0
9254   3F6B             ; --- START RELATIONAL
9255   3F6B D7            push a
9256   3F6C 11            mov a, b
9257   3F6D FD 2E 5A 00   mov32 cb, $0000005a
9257   3F71 00 00 
9258   3F73 B0            cmp a, b
9259   3F74 FD 74         sle ; <= (signed)
9260   3F76 E4            pop a
9261   3F77             ; --- END RELATIONAL
9262   3F77 FD A7         sand a, b
9263   3F79 E4            pop a
9264   3F7A             ; --- END LOGICAL AND
9265   3F7A FD A8         sor a, b ; ||
9266   3F7C 11            mov a, b
9267   3F7D FA 05 00      lea d, [bp + 5] ; $c
9268   3F80 32            mov bl, [d]
9269   3F81 A7 00         mov bh, 0
9270   3F83 38 00 00      mov c, 0
9271   3F86             ; --- START RELATIONAL
9272   3F86 D7            push a
9273   3F87 11            mov a, b
9274   3F88 FD 2E 5F 00   mov32 cb, $0000005f
9274   3F8C 00 00 
9275   3F8E B0            cmp a, b
9276   3F8F FD 71         seq ; ==
9277   3F91 E4            pop a
9278   3F92             ; --- END RELATIONAL
9279   3F92 FD A8         sor a, b ; ||
9280   3F94 E4            pop a
9281   3F95             ; --- END LOGICAL OR
9282   3F95 F9            leave
9283   3F96 09            ret
9284   3F97             
9285   3F97             is_digit:
9286   3F97 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9287   3F9A             ; return c >= '0' && c <= '9'; 
9288   3F9A FA 05 00      lea d, [bp + 5] ; $c
9289   3F9D 32            mov bl, [d]
9290   3F9E A7 00         mov bh, 0
9291   3FA0 38 00 00      mov c, 0
9292   3FA3             ; --- START RELATIONAL
9293   3FA3 D7            push a
9294   3FA4 11            mov a, b
9295   3FA5 FD 2E 30 00   mov32 cb, $00000030
9295   3FA9 00 00 
9296   3FAB B0            cmp a, b
9297   3FAC FD 80         sge ; >=
9298   3FAE E4            pop a
9299   3FAF             ; --- END RELATIONAL
9300   3FAF             ; --- START LOGICAL AND
9301   3FAF D7            push a
9302   3FB0 11            mov a, b
9303   3FB1 FA 05 00      lea d, [bp + 5] ; $c
9304   3FB4 32            mov bl, [d]
9305   3FB5 A7 00         mov bh, 0
9306   3FB7 38 00 00      mov c, 0
9307   3FBA             ; --- START RELATIONAL
9308   3FBA D7            push a
9309   3FBB 11            mov a, b
9310   3FBC FD 2E 39 00   mov32 cb, $00000039
9310   3FC0 00 00 
9311   3FC2 B0            cmp a, b
9312   3FC3 FD 74         sle ; <= (signed)
9313   3FC5 E4            pop a
9314   3FC6             ; --- END RELATIONAL
9315   3FC6 FD A7         sand a, b
9316   3FC8 E4            pop a
9317   3FC9             ; --- END LOGICAL AND
9318   3FC9 F9            leave
9319   3FCA 09            ret
9320   3FCB             
9321   3FCB             strcmp:
9322   3FCB F8 00 00      enter 0 ; (push bp; mov bp, sp)
9323   3FCE             ; while (*s1 && (*s1 == *s2)) { 
9324   3FCE             _while210_cond:
9325   3FCE FA 05 00      lea d, [bp + 5] ; $s1
9326   3FD1 2A            mov b, [d]
9327   3FD2 38 00 00      mov c, 0
9328   3FD5 74            mov d, b
9329   3FD6 32            mov bl, [d]
9330   3FD7 A7 00         mov bh, 0
9331   3FD9 38 00 00      mov c, 0
9332   3FDC             ; --- START LOGICAL AND
9333   3FDC D7            push a
9334   3FDD 11            mov a, b
9335   3FDE FA 05 00      lea d, [bp + 5] ; $s1
9336   3FE1 2A            mov b, [d]
9337   3FE2 38 00 00      mov c, 0
9338   3FE5 74            mov d, b
9339   3FE6 32            mov bl, [d]
9340   3FE7 A7 00         mov bh, 0
9341   3FE9 38 00 00      mov c, 0
9342   3FEC             ; --- START RELATIONAL
9343   3FEC D7            push a
9344   3FED 11            mov a, b
9345   3FEE FA 07 00      lea d, [bp + 7] ; $s2
9346   3FF1 2A            mov b, [d]
9347   3FF2 38 00 00      mov c, 0
9348   3FF5 74            mov d, b
9349   3FF6 32            mov bl, [d]
9350   3FF7 A7 00         mov bh, 0
9351   3FF9 38 00 00      mov c, 0
9352   3FFC B0            cmp a, b
9353   3FFD FD 71         seq ; ==
9354   3FFF E4            pop a
9355   4000             ; --- END RELATIONAL
9356   4000 FD A7         sand a, b
9357   4002 E4            pop a
9358   4003             ; --- END LOGICAL AND
9359   4003 C0 00 00      cmp b, 0
9360   4006 C6 2C 40      je _while210_exit
9361   4009             _while210_block:
9362   4009             ; s1++; 
9363   4009 FA 05 00      lea d, [bp + 5] ; $s1
9364   400C 2A            mov b, [d]
9365   400D 38 00 00      mov c, 0
9366   4010 FD 77         inc b
9367   4012 FA 05 00      lea d, [bp + 5] ; $s1
9368   4015 FD 43         mov [d], b
9369   4017 FD 7D         dec b
9370   4019             ; s2++; 
9371   4019 FA 07 00      lea d, [bp + 7] ; $s2
9372   401C 2A            mov b, [d]
9373   401D 38 00 00      mov c, 0
9374   4020 FD 77         inc b
9375   4022 FA 07 00      lea d, [bp + 7] ; $s2
9376   4025 FD 43         mov [d], b
9377   4027 FD 7D         dec b
9378   4029 0A CE 3F      jmp _while210_cond
9379   402C             _while210_exit:
9380   402C             ; return *s1 - *s2; 
9381   402C FA 05 00      lea d, [bp + 5] ; $s1
9382   402F 2A            mov b, [d]
9383   4030 38 00 00      mov c, 0
9384   4033 74            mov d, b
9385   4034 32            mov bl, [d]
9386   4035 A7 00         mov bh, 0
9387   4037 38 00 00      mov c, 0
9388   403A             ; --- START TERMS
9389   403A D7            push a
9390   403B 11            mov a, b
9391   403C FA 07 00      lea d, [bp + 7] ; $s2
9392   403F 2A            mov b, [d]
9393   4040 38 00 00      mov c, 0
9394   4043 74            mov d, b
9395   4044 32            mov bl, [d]
9396   4045 A7 00         mov bh, 0
9397   4047 38 00 00      mov c, 0
9398   404A 60            sub a, b
9399   404B 27            mov b, a
9400   404C E4            pop a
9401   404D             ; --- END TERMS
9402   404D F9            leave
9403   404E 09            ret
9404   404F             
9405   404F             strlen:
9406   404F F8 00 00      enter 0 ; (push bp; mov bp, sp)
9407   4052             ; int length; 
9408   4052 52 02 00      sub sp, 2
9409   4055             ; length = 0; 
9410   4055 FA FF FF      lea d, [bp + -1] ; $length
9411   4058 DA            push d
9412   4059 FD 2E 00 00   mov32 cb, $00000000
9412   405D 00 00 
9413   405F E7            pop d
9414   4060 FD 43         mov [d], b
9415   4062             ; while (str[length] != 0) { 
9416   4062             _while211_cond:
9417   4062 FA 05 00      lea d, [bp + 5] ; $str
9418   4065 FD 2A         mov d, [d]
9419   4067 D7            push a
9420   4068 DA            push d
9421   4069 FA FF FF      lea d, [bp + -1] ; $length
9422   406C 2A            mov b, [d]
9423   406D 38 00 00      mov c, 0
9424   4070 E7            pop d
9425   4071 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
9426   4075 E4            pop a
9427   4076 32            mov bl, [d]
9428   4077 A7 00         mov bh, 0
9429   4079 38 00 00      mov c, 0
9430   407C             ; --- START RELATIONAL
9431   407C D7            push a
9432   407D 11            mov a, b
9433   407E FD 2E 00 00   mov32 cb, $00000000
9433   4082 00 00 
9434   4084 B0            cmp a, b
9435   4085 FD 72         sneq ; !=
9436   4087 E4            pop a
9437   4088             ; --- END RELATIONAL
9438   4088 C0 00 00      cmp b, 0
9439   408B C6 A1 40      je _while211_exit
9440   408E             _while211_block:
9441   408E             ; length++; 
9442   408E FA FF FF      lea d, [bp + -1] ; $length
9443   4091 2A            mov b, [d]
9444   4092 38 00 00      mov c, 0
9445   4095 11            mov a, b
9446   4096 FD 77         inc b
9447   4098 FA FF FF      lea d, [bp + -1] ; $length
9448   409B FD 43         mov [d], b
9449   409D 27            mov b, a
9450   409E 0A 62 40      jmp _while211_cond
9451   40A1             _while211_exit:
9452   40A1             ; return length; 
9453   40A1 FA FF FF      lea d, [bp + -1] ; $length
9454   40A4 2A            mov b, [d]
9455   40A5 38 00 00      mov c, 0
9456   40A8 F9            leave
9457   40A9 09            ret
9458   40AA             
9459   40AA             atoi:
9460   40AA F8 00 00      enter 0 ; (push bp; mov bp, sp)
9461   40AD             ; int result = 0;  // Initialize result 
9462   40AD 52 02 00      sub sp, 2
9463   40B0             ; --- START LOCAL VAR INITIALIZATION
9464   40B0 FA FF FF      lea d, [bp + -1] ; $result
9465   40B3 DA            push d
9466   40B4 FD 2E 00 00   mov32 cb, $00000000
9466   40B8 00 00 
9467   40BA E7            pop d
9468   40BB FD 43         mov [d], b
9469   40BD             ; --- END LOCAL VAR INITIALIZATION
9470   40BD             ; int sign = 1;    // Initialize sign as positive 
9471   40BD 52 02 00      sub sp, 2
9472   40C0             ; --- START LOCAL VAR INITIALIZATION
9473   40C0 FA FD FF      lea d, [bp + -3] ; $sign
9474   40C3 DA            push d
9475   40C4 FD 2E 01 00   mov32 cb, $00000001
9475   40C8 00 00 
9476   40CA E7            pop d
9477   40CB FD 43         mov [d], b
9478   40CD             ; --- END LOCAL VAR INITIALIZATION
9479   40CD             ; while (*str == ' ') str++; 
9480   40CD             _while212_cond:
9481   40CD FA 05 00      lea d, [bp + 5] ; $str
9482   40D0 2A            mov b, [d]
9483   40D1 38 00 00      mov c, 0
9484   40D4 74            mov d, b
9485   40D5 32            mov bl, [d]
9486   40D6 A7 00         mov bh, 0
9487   40D8 38 00 00      mov c, 0
9488   40DB             ; --- START RELATIONAL
9489   40DB D7            push a
9490   40DC 11            mov a, b
9491   40DD FD 2E 20 00   mov32 cb, $00000020
9491   40E1 00 00 
9492   40E3 B0            cmp a, b
9493   40E4 FD 71         seq ; ==
9494   40E6 E4            pop a
9495   40E7             ; --- END RELATIONAL
9496   40E7 C0 00 00      cmp b, 0
9497   40EA C6 00 41      je _while212_exit
9498   40ED             _while212_block:
9499   40ED             ; str++; 
9500   40ED FA 05 00      lea d, [bp + 5] ; $str
9501   40F0 2A            mov b, [d]
9502   40F1 38 00 00      mov c, 0
9503   40F4 FD 77         inc b
9504   40F6 FA 05 00      lea d, [bp + 5] ; $str
9505   40F9 FD 43         mov [d], b
9506   40FB FD 7D         dec b
9507   40FD 0A CD 40      jmp _while212_cond
9508   4100             _while212_exit:
9509   4100             ; if (*str == '-' || *str == '+') { 
9510   4100             _if213_cond:
9511   4100 FA 05 00      lea d, [bp + 5] ; $str
9512   4103 2A            mov b, [d]
9513   4104 38 00 00      mov c, 0
9514   4107 74            mov d, b
9515   4108 32            mov bl, [d]
9516   4109 A7 00         mov bh, 0
9517   410B 38 00 00      mov c, 0
9518   410E             ; --- START RELATIONAL
9519   410E D7            push a
9520   410F 11            mov a, b
9521   4110 FD 2E 2D 00   mov32 cb, $0000002d
9521   4114 00 00 
9522   4116 B0            cmp a, b
9523   4117 FD 71         seq ; ==
9524   4119 E4            pop a
9525   411A             ; --- END RELATIONAL
9526   411A             ; --- START LOGICAL OR
9527   411A D7            push a
9528   411B 11            mov a, b
9529   411C FA 05 00      lea d, [bp + 5] ; $str
9530   411F 2A            mov b, [d]
9531   4120 38 00 00      mov c, 0
9532   4123 74            mov d, b
9533   4124 32            mov bl, [d]
9534   4125 A7 00         mov bh, 0
9535   4127 38 00 00      mov c, 0
9536   412A             ; --- START RELATIONAL
9537   412A D7            push a
9538   412B 11            mov a, b
9539   412C FD 2E 2B 00   mov32 cb, $0000002b
9539   4130 00 00 
9540   4132 B0            cmp a, b
9541   4133 FD 71         seq ; ==
9542   4135 E4            pop a
9543   4136             ; --- END RELATIONAL
9544   4136 FD A8         sor a, b ; ||
9545   4138 E4            pop a
9546   4139             ; --- END LOGICAL OR
9547   4139 C0 00 00      cmp b, 0
9548   413C C6 82 41      je _if213_exit
9549   413F             _if213_TRUE:
9550   413F             ; if (*str == '-') sign = -1; 
9551   413F             _if214_cond:
9552   413F FA 05 00      lea d, [bp + 5] ; $str
9553   4142 2A            mov b, [d]
9554   4143 38 00 00      mov c, 0
9555   4146 74            mov d, b
9556   4147 32            mov bl, [d]
9557   4148 A7 00         mov bh, 0
9558   414A 38 00 00      mov c, 0
9559   414D             ; --- START RELATIONAL
9560   414D D7            push a
9561   414E 11            mov a, b
9562   414F FD 2E 2D 00   mov32 cb, $0000002d
9562   4153 00 00 
9563   4155 B0            cmp a, b
9564   4156 FD 71         seq ; ==
9565   4158 E4            pop a
9566   4159             ; --- END RELATIONAL
9567   4159 C0 00 00      cmp b, 0
9568   415C C6 6F 41      je _if214_exit
9569   415F             _if214_TRUE:
9570   415F             ; sign = -1; 
9571   415F FA FD FF      lea d, [bp + -3] ; $sign
9572   4162 DA            push d
9573   4163 FD 2E FF FF   mov32 cb, $ffffffff
9573   4167 FF FF 
9574   4169 E7            pop d
9575   416A FD 43         mov [d], b
9576   416C 0A 6F 41      jmp _if214_exit
9577   416F             _if214_exit:
9578   416F             ; str++; 
9579   416F FA 05 00      lea d, [bp + 5] ; $str
9580   4172 2A            mov b, [d]
9581   4173 38 00 00      mov c, 0
9582   4176 FD 77         inc b
9583   4178 FA 05 00      lea d, [bp + 5] ; $str
9584   417B FD 43         mov [d], b
9585   417D FD 7D         dec b
9586   417F 0A 82 41      jmp _if213_exit
9587   4182             _if213_exit:
9588   4182             ; while (*str >= '0' && *str <= '9') { 
9589   4182             _while215_cond:
9590   4182 FA 05 00      lea d, [bp + 5] ; $str
9591   4185 2A            mov b, [d]
9592   4186 38 00 00      mov c, 0
9593   4189 74            mov d, b
9594   418A 32            mov bl, [d]
9595   418B A7 00         mov bh, 0
9596   418D 38 00 00      mov c, 0
9597   4190             ; --- START RELATIONAL
9598   4190 D7            push a
9599   4191 11            mov a, b
9600   4192 FD 2E 30 00   mov32 cb, $00000030
9600   4196 00 00 
9601   4198 B0            cmp a, b
9602   4199 FD 82         sgeu ; >= (unsigned)
9603   419B E4            pop a
9604   419C             ; --- END RELATIONAL
9605   419C             ; --- START LOGICAL AND
9606   419C D7            push a
9607   419D 11            mov a, b
9608   419E FA 05 00      lea d, [bp + 5] ; $str
9609   41A1 2A            mov b, [d]
9610   41A2 38 00 00      mov c, 0
9611   41A5 74            mov d, b
9612   41A6 32            mov bl, [d]
9613   41A7 A7 00         mov bh, 0
9614   41A9 38 00 00      mov c, 0
9615   41AC             ; --- START RELATIONAL
9616   41AC D7            push a
9617   41AD 11            mov a, b
9618   41AE FD 2E 39 00   mov32 cb, $00000039
9618   41B2 00 00 
9619   41B4 B0            cmp a, b
9620   41B5 FD 76         sleu ; <= (unsigned)
9621   41B7 E4            pop a
9622   41B8             ; --- END RELATIONAL
9623   41B8 FD A7         sand a, b
9624   41BA E4            pop a
9625   41BB             ; --- END LOGICAL AND
9626   41BB C0 00 00      cmp b, 0
9627   41BE C6 4A 42      je _while215_exit
9628   41C1             _while215_block:
9629   41C1             ; result = result * 10 + (*str - '0'); 
9630   41C1 FA FF FF      lea d, [bp + -1] ; $result
9631   41C4 DA            push d
9632   41C5 FA FF FF      lea d, [bp + -1] ; $result
9633   41C8 2A            mov b, [d]
9634   41C9 38 00 00      mov c, 0
9635   41CC             ; --- START FACTORS
9636   41CC D7            push a
9637   41CD FD D8         push g
9638   41CF 11            mov a, b
9639   41D0 FD 7A         mov g, c
9640   41D2 FD 2E 0A 00   mov32 cb, $0000000a
9640   41D6 00 00 
9641   41D8 D7            push a     ; save left operand
9642   41D9 8E            xor a, b   ; xor sign bits
9643   41DA FD AA         swp a      ; swap bytes
9644   41DC 83            mov cl, al ; save result of xor into 'dl'
9645   41DD E4            pop a      ; restore left side operator
9646   41DE DF            push cl    ; save result of xor above
9647   41DF FD AA         swp a  
9648   41E1 93 80         test al, $80  
9649   41E3 FD AA         swp a  
9650   41E5 C6 EA 41      jz skip_invert_a_217  
9651   41E8 FD 95         neg a 
9652   41EA             skip_invert_a_217:   
9653   41EA FD AB         swp b
9654   41EC FD 93 80      test bl, $80  
9655   41EF FD AB         swp b
9656   41F1 C6 F6 41      jz skip_invert_b_217  
9657   41F4 FD 97         neg b 
9658   41F6             skip_invert_b_217:   
9659   41F6 AC            mul a, b ; *
9660   41F7 FD 78         mov g, a
9661   41F9 11            mov a, b
9662   41FA EA            pop bl
9663   41FB FD 93 80      test bl, $80
9664   41FE C6 0B 42      jz _same_signs_217
9665   4201 2F            mov bl, al
9666   4202 95            not a
9667   4203 FD 97         neg b
9668   4205 5B 00 00      adc a, 0
9669   4208 FD 78         mov g, a
9670   420A 11            mov a, b
9671   420B             _same_signs_217:
9672   420B FD 38         mov c, g
9673   420D 27            mov b, a
9674   420E FD F1         pop g
9675   4210 E4            pop a
9676   4211             ; --- END FACTORS
9677   4211             ; --- START TERMS
9678   4211 D7            push a
9679   4212 FD D8         push g
9680   4214 11            mov a, b
9681   4215 FD 7A         mov g, c
9682   4217 FA 05 00      lea d, [bp + 5] ; $str
9683   421A 2A            mov b, [d]
9684   421B 38 00 00      mov c, 0
9685   421E 74            mov d, b
9686   421F 32            mov bl, [d]
9687   4220 A7 00         mov bh, 0
9688   4222 38 00 00      mov c, 0
9689   4225             ; --- START TERMS
9690   4225 D7            push a
9691   4226 11            mov a, b
9692   4227 FD 2E 30 00   mov32 cb, $00000030
9692   422B 00 00 
9693   422D 60            sub a, b
9694   422E 27            mov b, a
9695   422F E4            pop a
9696   4230             ; --- END TERMS
9697   4230 56            add b, a
9698   4231 FD F1         pop g
9699   4233 E4            pop a
9700   4234             ; --- END TERMS
9701   4234 E7            pop d
9702   4235 FD 43         mov [d], b
9703   4237             ; str++; 
9704   4237 FA 05 00      lea d, [bp + 5] ; $str
9705   423A 2A            mov b, [d]
9706   423B 38 00 00      mov c, 0
9707   423E FD 77         inc b
9708   4240 FA 05 00      lea d, [bp + 5] ; $str
9709   4243 FD 43         mov [d], b
9710   4245 FD 7D         dec b
9711   4247 0A 82 41      jmp _while215_cond
9712   424A             _while215_exit:
9713   424A             ; return sign * result; 
9714   424A FA FD FF      lea d, [bp + -3] ; $sign
9715   424D 2A            mov b, [d]
9716   424E 38 00 00      mov c, 0
9717   4251             ; --- START FACTORS
9718   4251 D7            push a
9719   4252 FD D8         push g
9720   4254 11            mov a, b
9721   4255 FD 7A         mov g, c
9722   4257 FA FF FF      lea d, [bp + -1] ; $result
9723   425A 2A            mov b, [d]
9724   425B 38 00 00      mov c, 0
9725   425E D7            push a     ; save left operand
9726   425F 8E            xor a, b   ; xor sign bits
9727   4260 FD AA         swp a      ; swap bytes
9728   4262 83            mov cl, al ; save result of xor into 'dl'
9729   4263 E4            pop a      ; restore left side operator
9730   4264 DF            push cl    ; save result of xor above
9731   4265 FD AA         swp a  
9732   4267 93 80         test al, $80  
9733   4269 FD AA         swp a  
9734   426B C6 70 42      jz skip_invert_a_219  
9735   426E FD 95         neg a 
9736   4270             skip_invert_a_219:   
9737   4270 FD AB         swp b
9738   4272 FD 93 80      test bl, $80  
9739   4275 FD AB         swp b
9740   4277 C6 7C 42      jz skip_invert_b_219  
9741   427A FD 97         neg b 
9742   427C             skip_invert_b_219:   
9743   427C AC            mul a, b ; *
9744   427D FD 78         mov g, a
9745   427F 11            mov a, b
9746   4280 EA            pop bl
9747   4281 FD 93 80      test bl, $80
9748   4284 C6 91 42      jz _same_signs_219
9749   4287 2F            mov bl, al
9750   4288 95            not a
9751   4289 FD 97         neg b
9752   428B 5B 00 00      adc a, 0
9753   428E FD 78         mov g, a
9754   4290 11            mov a, b
9755   4291             _same_signs_219:
9756   4291 FD 38         mov c, g
9757   4293 27            mov b, a
9758   4294 FD F1         pop g
9759   4296 E4            pop a
9760   4297             ; --- END FACTORS
9761   4297 F9            leave
9762   4298 09            ret
9763   4299             
9764   4299             printf:
9765   4299 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9766   429C             ; char *p, *format_p; 
9767   429C 52 02 00      sub sp, 2
9768   429F 52 02 00      sub sp, 2
9769   42A2             ; format_p = format; 
9770   42A2 FA FD FF      lea d, [bp + -3] ; $format_p
9771   42A5 DA            push d
9772   42A6 FA 05 00      lea d, [bp + 5] ; $format
9773   42A9 2A            mov b, [d]
9774   42AA 38 00 00      mov c, 0
9775   42AD E7            pop d
9776   42AE FD 43         mov [d], b
9777   42B0             ; p = &format + 2; 
9778   42B0 FA FF FF      lea d, [bp + -1] ; $p
9779   42B3 DA            push d
9780   42B4 FA 05 00      lea d, [bp + 5] ; $format
9781   42B7 2D            mov b, d
9782   42B8             ; --- START TERMS
9783   42B8 D7            push a
9784   42B9 11            mov a, b
9785   42BA FD 2E 02 00   mov32 cb, $00000002
9785   42BE 00 00 
9786   42C0 56            add b, a
9787   42C1 E4            pop a
9788   42C2             ; --- END TERMS
9789   42C2 E7            pop d
9790   42C3 FD 43         mov [d], b
9791   42C5             ; for(;;){ 
9792   42C5             _for220_init:
9793   42C5             _for220_cond:
9794   42C5             _for220_block:
9795   42C5             ; if(!*format_p) break; 
9796   42C5             _if221_cond:
9797   42C5 FA FD FF      lea d, [bp + -3] ; $format_p
9798   42C8 2A            mov b, [d]
9799   42C9 38 00 00      mov c, 0
9800   42CC 74            mov d, b
9801   42CD 32            mov bl, [d]
9802   42CE A7 00         mov bh, 0
9803   42D0 38 00 00      mov c, 0
9804   42D3 C0 00 00      cmp b, 0
9805   42D6 FD 71         seq ; !
9806   42D8 C0 00 00      cmp b, 0
9807   42DB C6 E4 42      je _if221_else
9808   42DE             _if221_TRUE:
9809   42DE             ; break; 
9810   42DE 0A 84 45      jmp _for220_exit ; for break
9811   42E1 0A 71 45      jmp _if221_exit
9812   42E4             _if221_else:
9813   42E4             ; if(*format_p == '%'){ 
9814   42E4             _if222_cond:
9815   42E4 FA FD FF      lea d, [bp + -3] ; $format_p
9816   42E7 2A            mov b, [d]
9817   42E8 38 00 00      mov c, 0
9818   42EB 74            mov d, b
9819   42EC 32            mov bl, [d]
9820   42ED A7 00         mov bh, 0
9821   42EF 38 00 00      mov c, 0
9822   42F2             ; --- START RELATIONAL
9823   42F2 D7            push a
9824   42F3 11            mov a, b
9825   42F4 FD 2E 25 00   mov32 cb, $00000025
9825   42F8 00 00 
9826   42FA B0            cmp a, b
9827   42FB FD 71         seq ; ==
9828   42FD E4            pop a
9829   42FE             ; --- END RELATIONAL
9830   42FE C0 00 00      cmp b, 0
9831   4301 C6 5C 45      je _if222_else
9832   4304             _if222_TRUE:
9833   4304             ; format_p++; 
9834   4304 FA FD FF      lea d, [bp + -3] ; $format_p
9835   4307 2A            mov b, [d]
9836   4308 38 00 00      mov c, 0
9837   430B FD 77         inc b
9838   430D FA FD FF      lea d, [bp + -3] ; $format_p
9839   4310 FD 43         mov [d], b
9840   4312 FD 7D         dec b
9841   4314             ; switch(*format_p){ 
9842   4314             _switch223_expr:
9843   4314 FA FD FF      lea d, [bp + -3] ; $format_p
9844   4317 2A            mov b, [d]
9845   4318 38 00 00      mov c, 0
9846   431B 74            mov d, b
9847   431C 32            mov bl, [d]
9848   431D A7 00         mov bh, 0
9849   431F 38 00 00      mov c, 0
9850   4322             _switch223_comparisons:
9851   4322 C1 6C         cmp bl, $6c
9852   4324 C6 50 43      je _switch223_case0
9853   4327 C1 4C         cmp bl, $4c
9854   4329 C6 50 43      je _switch223_case1
9855   432C C1 64         cmp bl, $64
9856   432E C6 60 44      je _switch223_case2
9857   4331 C1 69         cmp bl, $69
9858   4333 C6 60 44      je _switch223_case3
9859   4336 C1 75         cmp bl, $75
9860   4338 C6 90 44      je _switch223_case4
9861   433B C1 78         cmp bl, $78
9862   433D C6 C0 44      je _switch223_case5
9863   4340 C1 63         cmp bl, $63
9864   4342 C6 F0 44      je _switch223_case6
9865   4345 C1 73         cmp bl, $73
9866   4347 C6 20 45      je _switch223_case7
9867   434A 0A 4D 45      jmp _switch223_default
9868   434D 0A 59 45      jmp _switch223_exit
9869   4350             _switch223_case0:
9870   4350             _switch223_case1:
9871   4350             ; format_p++; 
9872   4350 FA FD FF      lea d, [bp + -3] ; $format_p
9873   4353 2A            mov b, [d]
9874   4354 38 00 00      mov c, 0
9875   4357 FD 77         inc b
9876   4359 FA FD FF      lea d, [bp + -3] ; $format_p
9877   435C FD 43         mov [d], b
9878   435E FD 7D         dec b
9879   4360             ; if(*format_p == 'd' || *format_p == 'i') 
9880   4360             _if224_cond:
9881   4360 FA FD FF      lea d, [bp + -3] ; $format_p
9882   4363 2A            mov b, [d]
9883   4364 38 00 00      mov c, 0
9884   4367 74            mov d, b
9885   4368 32            mov bl, [d]
9886   4369 A7 00         mov bh, 0
9887   436B 38 00 00      mov c, 0
9888   436E             ; --- START RELATIONAL
9889   436E D7            push a
9890   436F 11            mov a, b
9891   4370 FD 2E 64 00   mov32 cb, $00000064
9891   4374 00 00 
9892   4376 B0            cmp a, b
9893   4377 FD 71         seq ; ==
9894   4379 E4            pop a
9895   437A             ; --- END RELATIONAL
9896   437A             ; --- START LOGICAL OR
9897   437A D7            push a
9898   437B 11            mov a, b
9899   437C FA FD FF      lea d, [bp + -3] ; $format_p
9900   437F 2A            mov b, [d]
9901   4380 38 00 00      mov c, 0
9902   4383 74            mov d, b
9903   4384 32            mov bl, [d]
9904   4385 A7 00         mov bh, 0
9905   4387 38 00 00      mov c, 0
9906   438A             ; --- START RELATIONAL
9907   438A D7            push a
9908   438B 11            mov a, b
9909   438C FD 2E 69 00   mov32 cb, $00000069
9909   4390 00 00 
9910   4392 B0            cmp a, b
9911   4393 FD 71         seq ; ==
9912   4395 E4            pop a
9913   4396             ; --- END RELATIONAL
9914   4396 FD A8         sor a, b ; ||
9915   4398 E4            pop a
9916   4399             ; --- END LOGICAL OR
9917   4399 C0 00 00      cmp b, 0
9918   439C C6 BD 43      je _if224_else
9919   439F             _if224_TRUE:
9920   439F             ; print_signed_long(*(long *)p); 
9921   439F             ; --- START FUNCTION CALL
9922   439F FA FF FF      lea d, [bp + -1] ; $p
9923   43A2 2A            mov b, [d]
9924   43A3 38 00 00      mov c, 0
9925   43A6 74            mov d, b
9926   43A7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9927   43AA FD 39         mov c, b ; And place it into C
9928   43AC 2A            mov b, [d] ; Lower Word in B
9929   43AD 12            mov a, c
9930   43AE FD AA         swp a
9931   43B0 D7            push a
9932   43B1 FD AB         swp b
9933   43B3 D8            push b
9934   43B4 07 86 45      call print_signed_long
9935   43B7 51 04 00      add sp, 4
9936   43BA             ; --- END FUNCTION CALL
9937   43BA 0A 45 44      jmp _if224_exit
9938   43BD             _if224_else:
9939   43BD             ; if(*format_p == 'u') 
9940   43BD             _if225_cond:
9941   43BD FA FD FF      lea d, [bp + -3] ; $format_p
9942   43C0 2A            mov b, [d]
9943   43C1 38 00 00      mov c, 0
9944   43C4 74            mov d, b
9945   43C5 32            mov bl, [d]
9946   43C6 A7 00         mov bh, 0
9947   43C8 38 00 00      mov c, 0
9948   43CB             ; --- START RELATIONAL
9949   43CB D7            push a
9950   43CC 11            mov a, b
9951   43CD FD 2E 75 00   mov32 cb, $00000075
9951   43D1 00 00 
9952   43D3 B0            cmp a, b
9953   43D4 FD 71         seq ; ==
9954   43D6 E4            pop a
9955   43D7             ; --- END RELATIONAL
9956   43D7 C0 00 00      cmp b, 0
9957   43DA C6 FB 43      je _if225_else
9958   43DD             _if225_TRUE:
9959   43DD             ; print_unsigned_long(*(unsigned long *)p); 
9960   43DD             ; --- START FUNCTION CALL
9961   43DD FA FF FF      lea d, [bp + -1] ; $p
9962   43E0 2A            mov b, [d]
9963   43E1 38 00 00      mov c, 0
9964   43E4 74            mov d, b
9965   43E5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9966   43E8 FD 39         mov c, b ; And place it into C
9967   43EA 2A            mov b, [d] ; Lower Word in B
9968   43EB 12            mov a, c
9969   43EC FD AA         swp a
9970   43EE D7            push a
9971   43EF FD AB         swp b
9972   43F1 D8            push b
9973   43F2 07 26 47      call print_unsigned_long
9974   43F5 51 04 00      add sp, 4
9975   43F8             ; --- END FUNCTION CALL
9976   43F8 0A 45 44      jmp _if225_exit
9977   43FB             _if225_else:
9978   43FB             ; if(*format_p == 'x') 
9979   43FB             _if226_cond:
9980   43FB FA FD FF      lea d, [bp + -3] ; $format_p
9981   43FE 2A            mov b, [d]
9982   43FF 38 00 00      mov c, 0
9983   4402 74            mov d, b
9984   4403 32            mov bl, [d]
9985   4404 A7 00         mov bh, 0
9986   4406 38 00 00      mov c, 0
9987   4409             ; --- START RELATIONAL
9988   4409 D7            push a
9989   440A 11            mov a, b
9990   440B FD 2E 78 00   mov32 cb, $00000078
9990   440F 00 00 
9991   4411 B0            cmp a, b
9992   4412 FD 71         seq ; ==
9993   4414 E4            pop a
9994   4415             ; --- END RELATIONAL
9995   4415 C0 00 00      cmp b, 0
9996   4418 C6 39 44      je _if226_else
9997   441B             _if226_TRUE:
9998   441B             ; printx32(*(long int *)p); 
9999   441B             ; --- START FUNCTION CALL
10000  441B FA FF FF      lea d, [bp + -1] ; $p
10001  441E 2A            mov b, [d]
10002  441F 38 00 00      mov c, 0
10003  4422 74            mov d, b
10004  4423 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10005  4426 FD 39         mov c, b ; And place it into C
10006  4428 2A            mov b, [d] ; Lower Word in B
10007  4429 12            mov a, c
10008  442A FD AA         swp a
10009  442C D7            push a
10010  442D FD AB         swp b
10011  442F D8            push b
10012  4430 07 64 48      call printx32
10013  4433 51 04 00      add sp, 4
10014  4436             ; --- END FUNCTION CALL
10015  4436 0A 45 44      jmp _if226_exit
10016  4439             _if226_else:
10017  4439             ; err("Unexpected format in printf."); 
10018  4439             ; --- START FUNCTION CALL
10019  4439 26 C1 53      mov b, _s82 ; "Unexpected format in printf."
10020  443C FD AB         swp b
10021  443E D8            push b
10022  443F 07 C4 48      call err
10023  4442 51 02 00      add sp, 2
10024  4445             ; --- END FUNCTION CALL
10025  4445             _if226_exit:
10026  4445             _if225_exit:
10027  4445             _if224_exit:
10028  4445             ; p = p + 4; 
10029  4445 FA FF FF      lea d, [bp + -1] ; $p
10030  4448 DA            push d
10031  4449 FA FF FF      lea d, [bp + -1] ; $p
10032  444C 2A            mov b, [d]
10033  444D 38 00 00      mov c, 0
10034  4450             ; --- START TERMS
10035  4450 D7            push a
10036  4451 11            mov a, b
10037  4452 FD 2E 04 00   mov32 cb, $00000004
10037  4456 00 00 
10038  4458 56            add b, a
10039  4459 E4            pop a
10040  445A             ; --- END TERMS
10041  445A E7            pop d
10042  445B FD 43         mov [d], b
10043  445D             ; break; 
10044  445D 0A 59 45      jmp _switch223_exit ; case break
10045  4460             _switch223_case2:
10046  4460             _switch223_case3:
10047  4460             ; print_signed(*(int*)p); 
10048  4460             ; --- START FUNCTION CALL
10049  4460 FA FF FF      lea d, [bp + -1] ; $p
10050  4463 2A            mov b, [d]
10051  4464 38 00 00      mov c, 0
10052  4467 74            mov d, b
10053  4468 2A            mov b, [d]
10054  4469 38 00 00      mov c, 0
10055  446C FD AB         swp b
10056  446E D8            push b
10057  446F 07 D9 48      call print_signed
10058  4472 51 02 00      add sp, 2
10059  4475             ; --- END FUNCTION CALL
10060  4475             ; p = p + 2; 
10061  4475 FA FF FF      lea d, [bp + -1] ; $p
10062  4478 DA            push d
10063  4479 FA FF FF      lea d, [bp + -1] ; $p
10064  447C 2A            mov b, [d]
10065  447D 38 00 00      mov c, 0
10066  4480             ; --- START TERMS
10067  4480 D7            push a
10068  4481 11            mov a, b
10069  4482 FD 2E 02 00   mov32 cb, $00000002
10069  4486 00 00 
10070  4488 56            add b, a
10071  4489 E4            pop a
10072  448A             ; --- END TERMS
10073  448A E7            pop d
10074  448B FD 43         mov [d], b
10075  448D             ; break; 
10076  448D 0A 59 45      jmp _switch223_exit ; case break
10077  4490             _switch223_case4:
10078  4490             ; print_unsigned(*(unsigned int*)p); 
10079  4490             ; --- START FUNCTION CALL
10080  4490 FA FF FF      lea d, [bp + -1] ; $p
10081  4493 2A            mov b, [d]
10082  4494 38 00 00      mov c, 0
10083  4497 74            mov d, b
10084  4498 2A            mov b, [d]
10085  4499 38 00 00      mov c, 0
10086  449C FD AB         swp b
10087  449E D8            push b
10088  449F 07 2A 4A      call print_unsigned
10089  44A2 51 02 00      add sp, 2
10090  44A5             ; --- END FUNCTION CALL
10091  44A5             ; p = p + 2; 
10092  44A5 FA FF FF      lea d, [bp + -1] ; $p
10093  44A8 DA            push d
10094  44A9 FA FF FF      lea d, [bp + -1] ; $p
10095  44AC 2A            mov b, [d]
10096  44AD 38 00 00      mov c, 0
10097  44B0             ; --- START TERMS
10098  44B0 D7            push a
10099  44B1 11            mov a, b
10100  44B2 FD 2E 02 00   mov32 cb, $00000002
10100  44B6 00 00 
10101  44B8 56            add b, a
10102  44B9 E4            pop a
10103  44BA             ; --- END TERMS
10104  44BA E7            pop d
10105  44BB FD 43         mov [d], b
10106  44BD             ; break; 
10107  44BD 0A 59 45      jmp _switch223_exit ; case break
10108  44C0             _switch223_case5:
10109  44C0             ; printx16(*(int*)p); 
10110  44C0             ; --- START FUNCTION CALL
10111  44C0 FA FF FF      lea d, [bp + -1] ; $p
10112  44C3 2A            mov b, [d]
10113  44C4 38 00 00      mov c, 0
10114  44C7 74            mov d, b
10115  44C8 2A            mov b, [d]
10116  44C9 38 00 00      mov c, 0
10117  44CC FD AB         swp b
10118  44CE D8            push b
10119  44CF 07 42 4B      call printx16
10120  44D2 51 02 00      add sp, 2
10121  44D5             ; --- END FUNCTION CALL
10122  44D5             ; p = p + 2; 
10123  44D5 FA FF FF      lea d, [bp + -1] ; $p
10124  44D8 DA            push d
10125  44D9 FA FF FF      lea d, [bp + -1] ; $p
10126  44DC 2A            mov b, [d]
10127  44DD 38 00 00      mov c, 0
10128  44E0             ; --- START TERMS
10129  44E0 D7            push a
10130  44E1 11            mov a, b
10131  44E2 FD 2E 02 00   mov32 cb, $00000002
10131  44E6 00 00 
10132  44E8 56            add b, a
10133  44E9 E4            pop a
10134  44EA             ; --- END TERMS
10135  44EA E7            pop d
10136  44EB FD 43         mov [d], b
10137  44ED             ; break; 
10138  44ED 0A 59 45      jmp _switch223_exit ; case break
10139  44F0             _switch223_case6:
10140  44F0             ; putchar(*(char*)p); 
10141  44F0             ; --- START FUNCTION CALL
10142  44F0 FA FF FF      lea d, [bp + -1] ; $p
10143  44F3 2A            mov b, [d]
10144  44F4 38 00 00      mov c, 0
10145  44F7 74            mov d, b
10146  44F8 32            mov bl, [d]
10147  44F9 A7 00         mov bh, 0
10148  44FB 38 00 00      mov c, 0
10149  44FE DD            push bl
10150  44FF 07 18 47      call putchar
10151  4502 51 01 00      add sp, 1
10152  4505             ; --- END FUNCTION CALL
10153  4505             ; p = p + 2; 
10154  4505 FA FF FF      lea d, [bp + -1] ; $p
10155  4508 DA            push d
10156  4509 FA FF FF      lea d, [bp + -1] ; $p
10157  450C 2A            mov b, [d]
10158  450D 38 00 00      mov c, 0
10159  4510             ; --- START TERMS
10160  4510 D7            push a
10161  4511 11            mov a, b
10162  4512 FD 2E 02 00   mov32 cb, $00000002
10162  4516 00 00 
10163  4518 56            add b, a
10164  4519 E4            pop a
10165  451A             ; --- END TERMS
10166  451A E7            pop d
10167  451B FD 43         mov [d], b
10168  451D             ; break; 
10169  451D 0A 59 45      jmp _switch223_exit ; case break
10170  4520             _switch223_case7:
10171  4520             ; print(*(char**)p); 
10172  4520             ; --- START FUNCTION CALL
10173  4520 FA FF FF      lea d, [bp + -1] ; $p
10174  4523 2A            mov b, [d]
10175  4524 38 00 00      mov c, 0
10176  4527 74            mov d, b
10177  4528 2A            mov b, [d]
10178  4529 FD AB         swp b
10179  452B D8            push b
10180  452C 07 69 3E      call print
10181  452F 51 02 00      add sp, 2
10182  4532             ; --- END FUNCTION CALL
10183  4532             ; p = p + 2; 
10184  4532 FA FF FF      lea d, [bp + -1] ; $p
10185  4535 DA            push d
10186  4536 FA FF FF      lea d, [bp + -1] ; $p
10187  4539 2A            mov b, [d]
10188  453A 38 00 00      mov c, 0
10189  453D             ; --- START TERMS
10190  453D D7            push a
10191  453E 11            mov a, b
10192  453F FD 2E 02 00   mov32 cb, $00000002
10192  4543 00 00 
10193  4545 56            add b, a
10194  4546 E4            pop a
10195  4547             ; --- END TERMS
10196  4547 E7            pop d
10197  4548 FD 43         mov [d], b
10198  454A             ; break; 
10199  454A 0A 59 45      jmp _switch223_exit ; case break
10200  454D             _switch223_default:
10201  454D             ; print("Error: Unknown argument type.\n"); 
10202  454D             ; --- START FUNCTION CALL
10203  454D 26 DE 53      mov b, _s83 ; "Error: Unknown argument type.\n"
10204  4550 FD AB         swp b
10205  4552 D8            push b
10206  4553 07 69 3E      call print
10207  4556 51 02 00      add sp, 2
10208  4559             ; --- END FUNCTION CALL
10209  4559             _switch223_exit:
10210  4559 0A 71 45      jmp _if222_exit
10211  455C             _if222_else:
10212  455C             ; putchar(*format_p); 
10213  455C             ; --- START FUNCTION CALL
10214  455C FA FD FF      lea d, [bp + -3] ; $format_p
10215  455F 2A            mov b, [d]
10216  4560 38 00 00      mov c, 0
10217  4563 74            mov d, b
10218  4564 32            mov bl, [d]
10219  4565 A7 00         mov bh, 0
10220  4567 38 00 00      mov c, 0
10221  456A DD            push bl
10222  456B 07 18 47      call putchar
10223  456E 51 01 00      add sp, 1
10224  4571             ; --- END FUNCTION CALL
10225  4571             _if222_exit:
10226  4571             _if221_exit:
10227  4571             ; format_p++; 
10228  4571 FA FD FF      lea d, [bp + -3] ; $format_p
10229  4574 2A            mov b, [d]
10230  4575 38 00 00      mov c, 0
10231  4578 FD 77         inc b
10232  457A FA FD FF      lea d, [bp + -3] ; $format_p
10233  457D FD 43         mov [d], b
10234  457F FD 7D         dec b
10235  4581             _for220_update:
10236  4581 0A C5 42      jmp _for220_cond
10237  4584             _for220_exit:
10238  4584 F9            leave
10239  4585 09            ret
10240  4586             
10241  4586             print_signed_long:
10242  4586 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10243  4589             ; char digits[10]; 
10244  4589 52 0A 00      sub sp, 10
10245  458C             ; int i = 0; 
10246  458C 52 02 00      sub sp, 2
10247  458F             ; --- START LOCAL VAR INITIALIZATION
10248  458F FA F5 FF      lea d, [bp + -11] ; $i
10249  4592 DA            push d
10250  4593 FD 2E 00 00   mov32 cb, $00000000
10250  4597 00 00 
10251  4599 E7            pop d
10252  459A FD 43         mov [d], b
10253  459C             ; --- END LOCAL VAR INITIALIZATION
10254  459C             ; if (num < 0) { 
10255  459C             _if227_cond:
10256  459C FA 05 00      lea d, [bp + 5] ; $num
10257  459F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10258  45A2 FD 39         mov c, b ; And place it into C
10259  45A4 2A            mov b, [d] ; Lower Word in B
10260  45A5             ; --- START RELATIONAL
10261  45A5 D7            push a
10262  45A6 FD D8         push g
10263  45A8 11            mov a, b
10264  45A9 FD 7A         mov g, c
10265  45AB FD 2E 00 00   mov32 cb, $00000000
10265  45AF 00 00 
10266  45B1 38 00 00      mov c, 0
10267  45B4 FD AF         cmp32 ga, cb
10268  45B6 FD 73         slt ; <
10269  45B8 FD F1         pop g
10270  45BA E4            pop a
10271  45BB             ; --- END RELATIONAL
10272  45BB C0 00 00      cmp b, 0
10273  45BE C6 F0 45      je _if227_else
10274  45C1             _if227_TRUE:
10275  45C1             ; putchar('-'); 
10276  45C1             ; --- START FUNCTION CALL
10277  45C1 FD 2E 2D 00   mov32 cb, $0000002d
10277  45C5 00 00 
10278  45C7 DD            push bl
10279  45C8 07 18 47      call putchar
10280  45CB 51 01 00      add sp, 1
10281  45CE             ; --- END FUNCTION CALL
10282  45CE             ; num = -num; 
10283  45CE FA 05 00      lea d, [bp + 5] ; $num
10284  45D1 DA            push d
10285  45D2 FA 05 00      lea d, [bp + 5] ; $num
10286  45D5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10287  45D8 FD 39         mov c, b ; And place it into C
10288  45DA 2A            mov b, [d] ; Lower Word in B
10289  45DB 12            mov a, c
10290  45DC 95            not a
10291  45DD 97            not b
10292  45DE 55 01 00      add b, 1
10293  45E1 5B 00 00      adc a, 0
10294  45E4 39            mov c, a
10295  45E5 E7            pop d
10296  45E6 FD 43         mov [d], b
10297  45E8 28            mov b, c
10298  45E9 FD 44 02 00   mov [d + 2], b
10299  45ED 0A 27 46      jmp _if227_exit
10300  45F0             _if227_else:
10301  45F0             ; if (num == 0) { 
10302  45F0             _if228_cond:
10303  45F0 FA 05 00      lea d, [bp + 5] ; $num
10304  45F3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10305  45F6 FD 39         mov c, b ; And place it into C
10306  45F8 2A            mov b, [d] ; Lower Word in B
10307  45F9             ; --- START RELATIONAL
10308  45F9 D7            push a
10309  45FA FD D8         push g
10310  45FC 11            mov a, b
10311  45FD FD 7A         mov g, c
10312  45FF FD 2E 00 00   mov32 cb, $00000000
10312  4603 00 00 
10313  4605 38 00 00      mov c, 0
10314  4608 FD AF         cmp32 ga, cb
10315  460A FD 71         seq ; ==
10316  460C FD F1         pop g
10317  460E E4            pop a
10318  460F             ; --- END RELATIONAL
10319  460F C0 00 00      cmp b, 0
10320  4612 C6 27 46      je _if228_exit
10321  4615             _if228_TRUE:
10322  4615             ; putchar('0'); 
10323  4615             ; --- START FUNCTION CALL
10324  4615 FD 2E 30 00   mov32 cb, $00000030
10324  4619 00 00 
10325  461B DD            push bl
10326  461C 07 18 47      call putchar
10327  461F 51 01 00      add sp, 1
10328  4622             ; --- END FUNCTION CALL
10329  4622             ; return; 
10330  4622 F9            leave
10331  4623 09            ret
10332  4624 0A 27 46      jmp _if228_exit
10333  4627             _if228_exit:
10334  4627             _if227_exit:
10335  4627             ; while (num > 0) { 
10336  4627             _while229_cond:
10337  4627 FA 05 00      lea d, [bp + 5] ; $num
10338  462A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10339  462D FD 39         mov c, b ; And place it into C
10340  462F 2A            mov b, [d] ; Lower Word in B
10341  4630             ; --- START RELATIONAL
10342  4630 D7            push a
10343  4631 FD D8         push g
10344  4633 11            mov a, b
10345  4634 FD 7A         mov g, c
10346  4636 FD 2E 00 00   mov32 cb, $00000000
10346  463A 00 00 
10347  463C 38 00 00      mov c, 0
10348  463F FD AF         cmp32 ga, cb
10349  4641 FD 7F         sgt
10350  4643 FD F1         pop g
10351  4645 E4            pop a
10352  4646             ; --- END RELATIONAL
10353  4646 C0 00 00      cmp b, 0
10354  4649 C6 CE 46      je _while229_exit
10355  464C             _while229_block:
10356  464C             ; digits[i] = '0' + (num % 10); 
10357  464C FA F7 FF      lea d, [bp + -9] ; $digits
10358  464F D7            push a
10359  4650 DA            push d
10360  4651 FA F5 FF      lea d, [bp + -11] ; $i
10361  4654 2A            mov b, [d]
10362  4655 38 00 00      mov c, 0
10363  4658 E7            pop d
10364  4659 5A            add d, b
10365  465A E4            pop a
10366  465B DA            push d
10367  465C FD 2E 30 00   mov32 cb, $00000030
10367  4660 00 00 
10368  4662             ; --- START TERMS
10369  4662 D7            push a
10370  4663 11            mov a, b
10371  4664 FA 05 00      lea d, [bp + 5] ; $num
10372  4667 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10373  466A FD 39         mov c, b ; And place it into C
10374  466C 2A            mov b, [d] ; Lower Word in B
10375  466D             ; --- START FACTORS
10376  466D D7            push a
10377  466E FD D8         push g
10378  4670 11            mov a, b
10379  4671 FD 7A         mov g, c
10380  4673 FD 2E 0A 00   mov32 cb, $0000000a
10380  4677 00 00 
10381  4679 FD D8         push g ; save 'g' as the div instruction uses it
10382  467B AE            div a, b ; %, a: quotient, b: remainder
10383  467C 11            mov a, b
10384  467D FD F1         pop g
10385  467F FD 38         mov c, g
10386  4681 27            mov b, a
10387  4682 FD F1         pop g
10388  4684 E4            pop a
10389  4685             ; --- END FACTORS
10390  4685 FD 22 00 00   mov g, 0
10391  4689 FD 15         add32 cb, ga
10392  468B E4            pop a
10393  468C             ; --- END TERMS
10394  468C E7            pop d
10395  468D FD 3E         mov [d], bl
10396  468F             ; num = num / 10; 
10397  468F FA 05 00      lea d, [bp + 5] ; $num
10398  4692 DA            push d
10399  4693 FA 05 00      lea d, [bp + 5] ; $num
10400  4696 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10401  4699 FD 39         mov c, b ; And place it into C
10402  469B 2A            mov b, [d] ; Lower Word in B
10403  469C             ; --- START FACTORS
10404  469C D7            push a
10405  469D FD D8         push g
10406  469F 11            mov a, b
10407  46A0 FD 7A         mov g, c
10408  46A2 FD 2E 0A 00   mov32 cb, $0000000a
10408  46A6 00 00 
10409  46A8 FD D8         push g ; save 'g' as the div instruction uses it
10410  46AA AE            div a, b ; /, a: quotient, b: remainder
10411  46AB FD F1         pop g
10412  46AD FD 38         mov c, g
10413  46AF 27            mov b, a
10414  46B0 FD F1         pop g
10415  46B2 E4            pop a
10416  46B3             ; --- END FACTORS
10417  46B3 E7            pop d
10418  46B4 FD 43         mov [d], b
10419  46B6 28            mov b, c
10420  46B7 FD 44 02 00   mov [d + 2], b
10421  46BB             ; i++; 
10422  46BB FA F5 FF      lea d, [bp + -11] ; $i
10423  46BE 2A            mov b, [d]
10424  46BF 38 00 00      mov c, 0
10425  46C2 11            mov a, b
10426  46C3 FD 77         inc b
10427  46C5 FA F5 FF      lea d, [bp + -11] ; $i
10428  46C8 FD 43         mov [d], b
10429  46CA 27            mov b, a
10430  46CB 0A 27 46      jmp _while229_cond
10431  46CE             _while229_exit:
10432  46CE             ; while (i > 0) { 
10433  46CE             _while236_cond:
10434  46CE FA F5 FF      lea d, [bp + -11] ; $i
10435  46D1 2A            mov b, [d]
10436  46D2 38 00 00      mov c, 0
10437  46D5             ; --- START RELATIONAL
10438  46D5 D7            push a
10439  46D6 11            mov a, b
10440  46D7 FD 2E 00 00   mov32 cb, $00000000
10440  46DB 00 00 
10441  46DD B0            cmp a, b
10442  46DE FD 7F         sgt ; >
10443  46E0 E4            pop a
10444  46E1             ; --- END RELATIONAL
10445  46E1 C0 00 00      cmp b, 0
10446  46E4 C6 16 47      je _while236_exit
10447  46E7             _while236_block:
10448  46E7             ; i--; 
10449  46E7 FA F5 FF      lea d, [bp + -11] ; $i
10450  46EA 2A            mov b, [d]
10451  46EB 38 00 00      mov c, 0
10452  46EE 11            mov a, b
10453  46EF FD 7D         dec b
10454  46F1 FA F5 FF      lea d, [bp + -11] ; $i
10455  46F4 FD 43         mov [d], b
10456  46F6 27            mov b, a
10457  46F7             ; putchar(digits[i]); 
10458  46F7             ; --- START FUNCTION CALL
10459  46F7 FA F7 FF      lea d, [bp + -9] ; $digits
10460  46FA D7            push a
10461  46FB DA            push d
10462  46FC FA F5 FF      lea d, [bp + -11] ; $i
10463  46FF 2A            mov b, [d]
10464  4700 38 00 00      mov c, 0
10465  4703 E7            pop d
10466  4704 5A            add d, b
10467  4705 E4            pop a
10468  4706 32            mov bl, [d]
10469  4707 A7 00         mov bh, 0
10470  4709 38 00 00      mov c, 0
10471  470C DD            push bl
10472  470D 07 18 47      call putchar
10473  4710 51 01 00      add sp, 1
10474  4713             ; --- END FUNCTION CALL
10475  4713 0A CE 46      jmp _while236_cond
10476  4716             _while236_exit:
10477  4716 F9            leave
10478  4717 09            ret
10479  4718             
10480  4718             putchar:
10481  4718 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10482  471B             ; --- BEGIN INLINE ASM SEGMENT
10483  471B FA 05 00      lea d, [bp + 5] ; $c
10484  471E 1E            mov al, [d]
10485  471F 23            mov ah, al
10486  4720 19 00         mov al, 0
10487  4722 05 03         syscall sys_io      ; char in AH
10488  4724             ; --- END INLINE ASM SEGMENT
10489  4724 F9            leave
10490  4725 09            ret
10491  4726             
10492  4726             print_unsigned_long:
10493  4726 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10494  4729             ; char digits[10]; 
10495  4729 52 0A 00      sub sp, 10
10496  472C             ; int i; 
10497  472C 52 02 00      sub sp, 2
10498  472F             ; i = 0; 
10499  472F FA F5 FF      lea d, [bp + -11] ; $i
10500  4732 DA            push d
10501  4733 FD 2E 00 00   mov32 cb, $00000000
10501  4737 00 00 
10502  4739 E7            pop d
10503  473A FD 43         mov [d], b
10504  473C             ; if(num == 0){ 
10505  473C             _if237_cond:
10506  473C FA 05 00      lea d, [bp + 5] ; $num
10507  473F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10508  4742 FD 39         mov c, b ; And place it into C
10509  4744 2A            mov b, [d] ; Lower Word in B
10510  4745             ; --- START RELATIONAL
10511  4745 D7            push a
10512  4746 FD D8         push g
10513  4748 11            mov a, b
10514  4749 FD 7A         mov g, c
10515  474B FD 2E 00 00   mov32 cb, $00000000
10515  474F 00 00 
10516  4751 38 00 00      mov c, 0
10517  4754 FD AF         cmp32 ga, cb
10518  4756 FD 71         seq ; ==
10519  4758 FD F1         pop g
10520  475A E4            pop a
10521  475B             ; --- END RELATIONAL
10522  475B C0 00 00      cmp b, 0
10523  475E C6 73 47      je _if237_exit
10524  4761             _if237_TRUE:
10525  4761             ; putchar('0'); 
10526  4761             ; --- START FUNCTION CALL
10527  4761 FD 2E 30 00   mov32 cb, $00000030
10527  4765 00 00 
10528  4767 DD            push bl
10529  4768 07 18 47      call putchar
10530  476B 51 01 00      add sp, 1
10531  476E             ; --- END FUNCTION CALL
10532  476E             ; return; 
10533  476E F9            leave
10534  476F 09            ret
10535  4770 0A 73 47      jmp _if237_exit
10536  4773             _if237_exit:
10537  4773             ; while (num > 0) { 
10538  4773             _while238_cond:
10539  4773 FA 05 00      lea d, [bp + 5] ; $num
10540  4776 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10541  4779 FD 39         mov c, b ; And place it into C
10542  477B 2A            mov b, [d] ; Lower Word in B
10543  477C             ; --- START RELATIONAL
10544  477C D7            push a
10545  477D FD D8         push g
10546  477F 11            mov a, b
10547  4780 FD 7A         mov g, c
10548  4782 FD 2E 00 00   mov32 cb, $00000000
10548  4786 00 00 
10549  4788 38 00 00      mov c, 0
10550  478B FD AF         cmp32 ga, cb
10551  478D FD 81         sgu
10552  478F FD F1         pop g
10553  4791 E4            pop a
10554  4792             ; --- END RELATIONAL
10555  4792 C0 00 00      cmp b, 0
10556  4795 C6 1A 48      je _while238_exit
10557  4798             _while238_block:
10558  4798             ; digits[i] = '0' + (num % 10); 
10559  4798 FA F7 FF      lea d, [bp + -9] ; $digits
10560  479B D7            push a
10561  479C DA            push d
10562  479D FA F5 FF      lea d, [bp + -11] ; $i
10563  47A0 2A            mov b, [d]
10564  47A1 38 00 00      mov c, 0
10565  47A4 E7            pop d
10566  47A5 5A            add d, b
10567  47A6 E4            pop a
10568  47A7 DA            push d
10569  47A8 FD 2E 30 00   mov32 cb, $00000030
10569  47AC 00 00 
10570  47AE             ; --- START TERMS
10571  47AE D7            push a
10572  47AF 11            mov a, b
10573  47B0 FA 05 00      lea d, [bp + 5] ; $num
10574  47B3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10575  47B6 FD 39         mov c, b ; And place it into C
10576  47B8 2A            mov b, [d] ; Lower Word in B
10577  47B9             ; --- START FACTORS
10578  47B9 D7            push a
10579  47BA FD D8         push g
10580  47BC 11            mov a, b
10581  47BD FD 7A         mov g, c
10582  47BF FD 2E 0A 00   mov32 cb, $0000000a
10582  47C3 00 00 
10583  47C5 FD D8         push g ; save 'g' as the div instruction uses it
10584  47C7 AE            div a, b ; %, a: quotient, b: remainder
10585  47C8 11            mov a, b
10586  47C9 FD F1         pop g
10587  47CB FD 38         mov c, g
10588  47CD 27            mov b, a
10589  47CE FD F1         pop g
10590  47D0 E4            pop a
10591  47D1             ; --- END FACTORS
10592  47D1 FD 22 00 00   mov g, 0
10593  47D5 FD 15         add32 cb, ga
10594  47D7 E4            pop a
10595  47D8             ; --- END TERMS
10596  47D8 E7            pop d
10597  47D9 FD 3E         mov [d], bl
10598  47DB             ; num = num / 10; 
10599  47DB FA 05 00      lea d, [bp + 5] ; $num
10600  47DE DA            push d
10601  47DF FA 05 00      lea d, [bp + 5] ; $num
10602  47E2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10603  47E5 FD 39         mov c, b ; And place it into C
10604  47E7 2A            mov b, [d] ; Lower Word in B
10605  47E8             ; --- START FACTORS
10606  47E8 D7            push a
10607  47E9 FD D8         push g
10608  47EB 11            mov a, b
10609  47EC FD 7A         mov g, c
10610  47EE FD 2E 0A 00   mov32 cb, $0000000a
10610  47F2 00 00 
10611  47F4 FD D8         push g ; save 'g' as the div instruction uses it
10612  47F6 AE            div a, b ; /, a: quotient, b: remainder
10613  47F7 FD F1         pop g
10614  47F9 FD 38         mov c, g
10615  47FB 27            mov b, a
10616  47FC FD F1         pop g
10617  47FE E4            pop a
10618  47FF             ; --- END FACTORS
10619  47FF E7            pop d
10620  4800 FD 43         mov [d], b
10621  4802 28            mov b, c
10622  4803 FD 44 02 00   mov [d + 2], b
10623  4807             ; i++; 
10624  4807 FA F5 FF      lea d, [bp + -11] ; $i
10625  480A 2A            mov b, [d]
10626  480B 38 00 00      mov c, 0
10627  480E 11            mov a, b
10628  480F FD 77         inc b
10629  4811 FA F5 FF      lea d, [bp + -11] ; $i
10630  4814 FD 43         mov [d], b
10631  4816 27            mov b, a
10632  4817 0A 73 47      jmp _while238_cond
10633  481A             _while238_exit:
10634  481A             ; while (i > 0) { 
10635  481A             _while245_cond:
10636  481A FA F5 FF      lea d, [bp + -11] ; $i
10637  481D 2A            mov b, [d]
10638  481E 38 00 00      mov c, 0
10639  4821             ; --- START RELATIONAL
10640  4821 D7            push a
10641  4822 11            mov a, b
10642  4823 FD 2E 00 00   mov32 cb, $00000000
10642  4827 00 00 
10643  4829 B0            cmp a, b
10644  482A FD 7F         sgt ; >
10645  482C E4            pop a
10646  482D             ; --- END RELATIONAL
10647  482D C0 00 00      cmp b, 0
10648  4830 C6 62 48      je _while245_exit
10649  4833             _while245_block:
10650  4833             ; i--; 
10651  4833 FA F5 FF      lea d, [bp + -11] ; $i
10652  4836 2A            mov b, [d]
10653  4837 38 00 00      mov c, 0
10654  483A 11            mov a, b
10655  483B FD 7D         dec b
10656  483D FA F5 FF      lea d, [bp + -11] ; $i
10657  4840 FD 43         mov [d], b
10658  4842 27            mov b, a
10659  4843             ; putchar(digits[i]); 
10660  4843             ; --- START FUNCTION CALL
10661  4843 FA F7 FF      lea d, [bp + -9] ; $digits
10662  4846 D7            push a
10663  4847 DA            push d
10664  4848 FA F5 FF      lea d, [bp + -11] ; $i
10665  484B 2A            mov b, [d]
10666  484C 38 00 00      mov c, 0
10667  484F E7            pop d
10668  4850 5A            add d, b
10669  4851 E4            pop a
10670  4852 32            mov bl, [d]
10671  4853 A7 00         mov bh, 0
10672  4855 38 00 00      mov c, 0
10673  4858 DD            push bl
10674  4859 07 18 47      call putchar
10675  485C 51 01 00      add sp, 1
10676  485F             ; --- END FUNCTION CALL
10677  485F 0A 1A 48      jmp _while245_cond
10678  4862             _while245_exit:
10679  4862 F9            leave
10680  4863 09            ret
10681  4864             
10682  4864             printx32:
10683  4864 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10684  4867             ; --- BEGIN INLINE ASM SEGMENT
10685  4867 FA 05 00      lea d, [bp + 5] ; $hex
10686  486A 2B 02 00      mov b, [d+2]
10687  486D 07 76 48      call print_u16x_printx32
10688  4870 2A            mov b, [d]
10689  4871 07 76 48      call print_u16x_printx32
10690  4874             ; --- END INLINE ASM SEGMENT
10691  4874             ; return; 
10692  4874 F9            leave
10693  4875 09            ret
10694  4876             ; --- BEGIN INLINE ASM SEGMENT
10695  4876             print_u16x_printx32:
10696  4876 D7            push a
10697  4877 D8            push b
10698  4878 DD            push bl
10699  4879 30            mov bl, bh
10700  487A 07 98 48      call _itoa_printx32        ; convert bh to char in A
10701  487D 2F            mov bl, al        ; save al
10702  487E 19 00         mov al, 0
10703  4880 05 03         syscall sys_io        ; display AH
10704  4882 24            mov ah, bl        ; retrieve al
10705  4883 19 00         mov al, 0
10706  4885 05 03         syscall sys_io        ; display AL
10707  4887 EA            pop bl
10708  4888 07 98 48      call _itoa_printx32        ; convert bh to char in A
10709  488B 2F            mov bl, al        ; save al
10710  488C 19 00         mov al, 0
10711  488E 05 03         syscall sys_io        ; display AH
10712  4890 24            mov ah, bl        ; retrieve al
10713  4891 19 00         mov al, 0
10714  4893 05 03         syscall sys_io        ; display AL
10715  4895 E5            pop b
10716  4896 E4            pop a
10717  4897 09            ret
10718  4898             _itoa_printx32:
10719  4898 DA            push d
10720  4899 D8            push b
10721  489A A7 00         mov bh, 0
10722  489C FD A4 04      shr bl, 4  
10723  489F 74            mov d, b
10724  48A0 1F B2 48      mov al, [d + s_hex_digits_printx32]
10725  48A3 23            mov ah, al
10726  48A4 E5            pop b
10727  48A5 D8            push b
10728  48A6 A7 00         mov bh, 0
10729  48A8 FD 87 0F      and bl, $0F
10730  48AB 74            mov d, b
10731  48AC 1F B2 48      mov al, [d + s_hex_digits_printx32]
10732  48AF E5            pop b
10733  48B0 E7            pop d
10734  48B1 09            ret
10735  48B2 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
10735  48B6 34 35 36 37 
10735  48BA 38 39 41 42 
10735  48BE 43 44 45 46 
10736  48C2             ; --- END INLINE ASM SEGMENT
10737  48C2 F9            leave
10738  48C3 09            ret
10739  48C4             
10740  48C4             err:
10741  48C4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10742  48C7             ; print(e); 
10743  48C7             ; --- START FUNCTION CALL
10744  48C7 FA 05 00      lea d, [bp + 5] ; $e
10745  48CA 2A            mov b, [d]
10746  48CB 38 00 00      mov c, 0
10747  48CE FD AB         swp b
10748  48D0 D8            push b
10749  48D1 07 69 3E      call print
10750  48D4 51 02 00      add sp, 2
10751  48D7             ; --- END FUNCTION CALL
10752  48D7 F9            leave
10753  48D8 09            ret
10754  48D9             
10755  48D9             print_signed:
10756  48D9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10757  48DC             ; char digits[5]; 
10758  48DC 52 05 00      sub sp, 5
10759  48DF             ; int i = 0; 
10760  48DF 52 02 00      sub sp, 2
10761  48E2             ; --- START LOCAL VAR INITIALIZATION
10762  48E2 FA FA FF      lea d, [bp + -6] ; $i
10763  48E5 DA            push d
10764  48E6 FD 2E 00 00   mov32 cb, $00000000
10764  48EA 00 00 
10765  48EC E7            pop d
10766  48ED FD 43         mov [d], b
10767  48EF             ; --- END LOCAL VAR INITIALIZATION
10768  48EF             ; if (num < 0) { 
10769  48EF             _if246_cond:
10770  48EF FA 05 00      lea d, [bp + 5] ; $num
10771  48F2 2A            mov b, [d]
10772  48F3 38 00 00      mov c, 0
10773  48F6             ; --- START RELATIONAL
10774  48F6 D7            push a
10775  48F7 11            mov a, b
10776  48F8 FD 2E 00 00   mov32 cb, $00000000
10776  48FC 00 00 
10777  48FE B0            cmp a, b
10778  48FF FD 73         slt ; < (signed)
10779  4901 E4            pop a
10780  4902             ; --- END RELATIONAL
10781  4902 C0 00 00      cmp b, 0
10782  4905 C6 28 49      je _if246_else
10783  4908             _if246_TRUE:
10784  4908             ; putchar('-'); 
10785  4908             ; --- START FUNCTION CALL
10786  4908 FD 2E 2D 00   mov32 cb, $0000002d
10786  490C 00 00 
10787  490E DD            push bl
10788  490F 07 18 47      call putchar
10789  4912 51 01 00      add sp, 1
10790  4915             ; --- END FUNCTION CALL
10791  4915             ; num = -num; 
10792  4915 FA 05 00      lea d, [bp + 5] ; $num
10793  4918 DA            push d
10794  4919 FA 05 00      lea d, [bp + 5] ; $num
10795  491C 2A            mov b, [d]
10796  491D 38 00 00      mov c, 0
10797  4920 FD 97         neg b
10798  4922 E7            pop d
10799  4923 FD 43         mov [d], b
10800  4925 0A 53 49      jmp _if246_exit
10801  4928             _if246_else:
10802  4928             ; if (num == 0) { 
10803  4928             _if247_cond:
10804  4928 FA 05 00      lea d, [bp + 5] ; $num
10805  492B 2A            mov b, [d]
10806  492C 38 00 00      mov c, 0
10807  492F             ; --- START RELATIONAL
10808  492F D7            push a
10809  4930 11            mov a, b
10810  4931 FD 2E 00 00   mov32 cb, $00000000
10810  4935 00 00 
10811  4937 B0            cmp a, b
10812  4938 FD 71         seq ; ==
10813  493A E4            pop a
10814  493B             ; --- END RELATIONAL
10815  493B C0 00 00      cmp b, 0
10816  493E C6 53 49      je _if247_exit
10817  4941             _if247_TRUE:
10818  4941             ; putchar('0'); 
10819  4941             ; --- START FUNCTION CALL
10820  4941 FD 2E 30 00   mov32 cb, $00000030
10820  4945 00 00 
10821  4947 DD            push bl
10822  4948 07 18 47      call putchar
10823  494B 51 01 00      add sp, 1
10824  494E             ; --- END FUNCTION CALL
10825  494E             ; return; 
10826  494E F9            leave
10827  494F 09            ret
10828  4950 0A 53 49      jmp _if247_exit
10829  4953             _if247_exit:
10830  4953             _if246_exit:
10831  4953             ; while (num > 0) { 
10832  4953             _while248_cond:
10833  4953 FA 05 00      lea d, [bp + 5] ; $num
10834  4956 2A            mov b, [d]
10835  4957 38 00 00      mov c, 0
10836  495A             ; --- START RELATIONAL
10837  495A D7            push a
10838  495B 11            mov a, b
10839  495C FD 2E 00 00   mov32 cb, $00000000
10839  4960 00 00 
10840  4962 B0            cmp a, b
10841  4963 FD 7F         sgt ; >
10842  4965 E4            pop a
10843  4966             ; --- END RELATIONAL
10844  4966 C0 00 00      cmp b, 0
10845  4969 C6 E0 49      je _while248_exit
10846  496C             _while248_block:
10847  496C             ; digits[i] = '0' + (num % 10); 
10848  496C FA FC FF      lea d, [bp + -4] ; $digits
10849  496F D7            push a
10850  4970 DA            push d
10851  4971 FA FA FF      lea d, [bp + -6] ; $i
10852  4974 2A            mov b, [d]
10853  4975 38 00 00      mov c, 0
10854  4978 E7            pop d
10855  4979 5A            add d, b
10856  497A E4            pop a
10857  497B DA            push d
10858  497C FD 2E 30 00   mov32 cb, $00000030
10858  4980 00 00 
10859  4982             ; --- START TERMS
10860  4982 D7            push a
10861  4983 11            mov a, b
10862  4984 FA 05 00      lea d, [bp + 5] ; $num
10863  4987 2A            mov b, [d]
10864  4988 38 00 00      mov c, 0
10865  498B             ; --- START FACTORS
10866  498B D7            push a
10867  498C FD D8         push g
10868  498E 11            mov a, b
10869  498F FD 7A         mov g, c
10870  4991 FD 2E 0A 00   mov32 cb, $0000000a
10870  4995 00 00 
10871  4997 FD D8         push g ; save 'g' as the div instruction uses it
10872  4999 AE            div a, b ; %, a: quotient, b: remainder
10873  499A 11            mov a, b
10874  499B FD F1         pop g
10875  499D FD 38         mov c, g
10876  499F 27            mov b, a
10877  49A0 FD F1         pop g
10878  49A2 E4            pop a
10879  49A3             ; --- END FACTORS
10880  49A3 56            add b, a
10881  49A4 E4            pop a
10882  49A5             ; --- END TERMS
10883  49A5 E7            pop d
10884  49A6 FD 3E         mov [d], bl
10885  49A8             ; num = num / 10; 
10886  49A8 FA 05 00      lea d, [bp + 5] ; $num
10887  49AB DA            push d
10888  49AC FA 05 00      lea d, [bp + 5] ; $num
10889  49AF 2A            mov b, [d]
10890  49B0 38 00 00      mov c, 0
10891  49B3             ; --- START FACTORS
10892  49B3 D7            push a
10893  49B4 FD D8         push g
10894  49B6 11            mov a, b
10895  49B7 FD 7A         mov g, c
10896  49B9 FD 2E 0A 00   mov32 cb, $0000000a
10896  49BD 00 00 
10897  49BF FD D8         push g ; save 'g' as the div instruction uses it
10898  49C1 AE            div a, b ; /, a: quotient, b: remainder
10899  49C2 FD F1         pop g
10900  49C4 FD 38         mov c, g
10901  49C6 27            mov b, a
10902  49C7 FD F1         pop g
10903  49C9 E4            pop a
10904  49CA             ; --- END FACTORS
10905  49CA E7            pop d
10906  49CB FD 43         mov [d], b
10907  49CD             ; i++; 
10908  49CD FA FA FF      lea d, [bp + -6] ; $i
10909  49D0 2A            mov b, [d]
10910  49D1 38 00 00      mov c, 0
10911  49D4 11            mov a, b
10912  49D5 FD 77         inc b
10913  49D7 FA FA FF      lea d, [bp + -6] ; $i
10914  49DA FD 43         mov [d], b
10915  49DC 27            mov b, a
10916  49DD 0A 53 49      jmp _while248_cond
10917  49E0             _while248_exit:
10918  49E0             ; while (i > 0) { 
10919  49E0             _while255_cond:
10920  49E0 FA FA FF      lea d, [bp + -6] ; $i
10921  49E3 2A            mov b, [d]
10922  49E4 38 00 00      mov c, 0
10923  49E7             ; --- START RELATIONAL
10924  49E7 D7            push a
10925  49E8 11            mov a, b
10926  49E9 FD 2E 00 00   mov32 cb, $00000000
10926  49ED 00 00 
10927  49EF B0            cmp a, b
10928  49F0 FD 7F         sgt ; >
10929  49F2 E4            pop a
10930  49F3             ; --- END RELATIONAL
10931  49F3 C0 00 00      cmp b, 0
10932  49F6 C6 28 4A      je _while255_exit
10933  49F9             _while255_block:
10934  49F9             ; i--; 
10935  49F9 FA FA FF      lea d, [bp + -6] ; $i
10936  49FC 2A            mov b, [d]
10937  49FD 38 00 00      mov c, 0
10938  4A00 11            mov a, b
10939  4A01 FD 7D         dec b
10940  4A03 FA FA FF      lea d, [bp + -6] ; $i
10941  4A06 FD 43         mov [d], b
10942  4A08 27            mov b, a
10943  4A09             ; putchar(digits[i]); 
10944  4A09             ; --- START FUNCTION CALL
10945  4A09 FA FC FF      lea d, [bp + -4] ; $digits
10946  4A0C D7            push a
10947  4A0D DA            push d
10948  4A0E FA FA FF      lea d, [bp + -6] ; $i
10949  4A11 2A            mov b, [d]
10950  4A12 38 00 00      mov c, 0
10951  4A15 E7            pop d
10952  4A16 5A            add d, b
10953  4A17 E4            pop a
10954  4A18 32            mov bl, [d]
10955  4A19 A7 00         mov bh, 0
10956  4A1B 38 00 00      mov c, 0
10957  4A1E DD            push bl
10958  4A1F 07 18 47      call putchar
10959  4A22 51 01 00      add sp, 1
10960  4A25             ; --- END FUNCTION CALL
10961  4A25 0A E0 49      jmp _while255_cond
10962  4A28             _while255_exit:
10963  4A28 F9            leave
10964  4A29 09            ret
10965  4A2A             
10966  4A2A             print_unsigned:
10967  4A2A F8 00 00      enter 0 ; (push bp; mov bp, sp)
10968  4A2D             ; char digits[5]; 
10969  4A2D 52 05 00      sub sp, 5
10970  4A30             ; int i; 
10971  4A30 52 02 00      sub sp, 2
10972  4A33             ; i = 0; 
10973  4A33 FA FA FF      lea d, [bp + -6] ; $i
10974  4A36 DA            push d
10975  4A37 FD 2E 00 00   mov32 cb, $00000000
10975  4A3B 00 00 
10976  4A3D E7            pop d
10977  4A3E FD 43         mov [d], b
10978  4A40             ; if(num == 0){ 
10979  4A40             _if256_cond:
10980  4A40 FA 05 00      lea d, [bp + 5] ; $num
10981  4A43 2A            mov b, [d]
10982  4A44 38 00 00      mov c, 0
10983  4A47             ; --- START RELATIONAL
10984  4A47 D7            push a
10985  4A48 11            mov a, b
10986  4A49 FD 2E 00 00   mov32 cb, $00000000
10986  4A4D 00 00 
10987  4A4F B0            cmp a, b
10988  4A50 FD 71         seq ; ==
10989  4A52 E4            pop a
10990  4A53             ; --- END RELATIONAL
10991  4A53 C0 00 00      cmp b, 0
10992  4A56 C6 6B 4A      je _if256_exit
10993  4A59             _if256_TRUE:
10994  4A59             ; putchar('0'); 
10995  4A59             ; --- START FUNCTION CALL
10996  4A59 FD 2E 30 00   mov32 cb, $00000030
10996  4A5D 00 00 
10997  4A5F DD            push bl
10998  4A60 07 18 47      call putchar
10999  4A63 51 01 00      add sp, 1
11000  4A66             ; --- END FUNCTION CALL
11001  4A66             ; return; 
11002  4A66 F9            leave
11003  4A67 09            ret
11004  4A68 0A 6B 4A      jmp _if256_exit
11005  4A6B             _if256_exit:
11006  4A6B             ; while (num > 0) { 
11007  4A6B             _while257_cond:
11008  4A6B FA 05 00      lea d, [bp + 5] ; $num
11009  4A6E 2A            mov b, [d]
11010  4A6F 38 00 00      mov c, 0
11011  4A72             ; --- START RELATIONAL
11012  4A72 D7            push a
11013  4A73 11            mov a, b
11014  4A74 FD 2E 00 00   mov32 cb, $00000000
11014  4A78 00 00 
11015  4A7A B0            cmp a, b
11016  4A7B FD 81         sgu ; > (unsigned)
11017  4A7D E4            pop a
11018  4A7E             ; --- END RELATIONAL
11019  4A7E C0 00 00      cmp b, 0
11020  4A81 C6 F8 4A      je _while257_exit
11021  4A84             _while257_block:
11022  4A84             ; digits[i] = '0' + (num % 10); 
11023  4A84 FA FC FF      lea d, [bp + -4] ; $digits
11024  4A87 D7            push a
11025  4A88 DA            push d
11026  4A89 FA FA FF      lea d, [bp + -6] ; $i
11027  4A8C 2A            mov b, [d]
11028  4A8D 38 00 00      mov c, 0
11029  4A90 E7            pop d
11030  4A91 5A            add d, b
11031  4A92 E4            pop a
11032  4A93 DA            push d
11033  4A94 FD 2E 30 00   mov32 cb, $00000030
11033  4A98 00 00 
11034  4A9A             ; --- START TERMS
11035  4A9A D7            push a
11036  4A9B 11            mov a, b
11037  4A9C FA 05 00      lea d, [bp + 5] ; $num
11038  4A9F 2A            mov b, [d]
11039  4AA0 38 00 00      mov c, 0
11040  4AA3             ; --- START FACTORS
11041  4AA3 D7            push a
11042  4AA4 FD D8         push g
11043  4AA6 11            mov a, b
11044  4AA7 FD 7A         mov g, c
11045  4AA9 FD 2E 0A 00   mov32 cb, $0000000a
11045  4AAD 00 00 
11046  4AAF FD D8         push g ; save 'g' as the div instruction uses it
11047  4AB1 AE            div a, b ; %, a: quotient, b: remainder
11048  4AB2 11            mov a, b
11049  4AB3 FD F1         pop g
11050  4AB5 FD 38         mov c, g
11051  4AB7 27            mov b, a
11052  4AB8 FD F1         pop g
11053  4ABA E4            pop a
11054  4ABB             ; --- END FACTORS
11055  4ABB 56            add b, a
11056  4ABC E4            pop a
11057  4ABD             ; --- END TERMS
11058  4ABD E7            pop d
11059  4ABE FD 3E         mov [d], bl
11060  4AC0             ; num = num / 10; 
11061  4AC0 FA 05 00      lea d, [bp + 5] ; $num
11062  4AC3 DA            push d
11063  4AC4 FA 05 00      lea d, [bp + 5] ; $num
11064  4AC7 2A            mov b, [d]
11065  4AC8 38 00 00      mov c, 0
11066  4ACB             ; --- START FACTORS
11067  4ACB D7            push a
11068  4ACC FD D8         push g
11069  4ACE 11            mov a, b
11070  4ACF FD 7A         mov g, c
11071  4AD1 FD 2E 0A 00   mov32 cb, $0000000a
11071  4AD5 00 00 
11072  4AD7 FD D8         push g ; save 'g' as the div instruction uses it
11073  4AD9 AE            div a, b ; /, a: quotient, b: remainder
11074  4ADA FD F1         pop g
11075  4ADC FD 38         mov c, g
11076  4ADE 27            mov b, a
11077  4ADF FD F1         pop g
11078  4AE1 E4            pop a
11079  4AE2             ; --- END FACTORS
11080  4AE2 E7            pop d
11081  4AE3 FD 43         mov [d], b
11082  4AE5             ; i++; 
11083  4AE5 FA FA FF      lea d, [bp + -6] ; $i
11084  4AE8 2A            mov b, [d]
11085  4AE9 38 00 00      mov c, 0
11086  4AEC 11            mov a, b
11087  4AED FD 77         inc b
11088  4AEF FA FA FF      lea d, [bp + -6] ; $i
11089  4AF2 FD 43         mov [d], b
11090  4AF4 27            mov b, a
11091  4AF5 0A 6B 4A      jmp _while257_cond
11092  4AF8             _while257_exit:
11093  4AF8             ; while (i > 0) { 
11094  4AF8             _while264_cond:
11095  4AF8 FA FA FF      lea d, [bp + -6] ; $i
11096  4AFB 2A            mov b, [d]
11097  4AFC 38 00 00      mov c, 0
11098  4AFF             ; --- START RELATIONAL
11099  4AFF D7            push a
11100  4B00 11            mov a, b
11101  4B01 FD 2E 00 00   mov32 cb, $00000000
11101  4B05 00 00 
11102  4B07 B0            cmp a, b
11103  4B08 FD 7F         sgt ; >
11104  4B0A E4            pop a
11105  4B0B             ; --- END RELATIONAL
11106  4B0B C0 00 00      cmp b, 0
11107  4B0E C6 40 4B      je _while264_exit
11108  4B11             _while264_block:
11109  4B11             ; i--; 
11110  4B11 FA FA FF      lea d, [bp + -6] ; $i
11111  4B14 2A            mov b, [d]
11112  4B15 38 00 00      mov c, 0
11113  4B18 11            mov a, b
11114  4B19 FD 7D         dec b
11115  4B1B FA FA FF      lea d, [bp + -6] ; $i
11116  4B1E FD 43         mov [d], b
11117  4B20 27            mov b, a
11118  4B21             ; putchar(digits[i]); 
11119  4B21             ; --- START FUNCTION CALL
11120  4B21 FA FC FF      lea d, [bp + -4] ; $digits
11121  4B24 D7            push a
11122  4B25 DA            push d
11123  4B26 FA FA FF      lea d, [bp + -6] ; $i
11124  4B29 2A            mov b, [d]
11125  4B2A 38 00 00      mov c, 0
11126  4B2D E7            pop d
11127  4B2E 5A            add d, b
11128  4B2F E4            pop a
11129  4B30 32            mov bl, [d]
11130  4B31 A7 00         mov bh, 0
11131  4B33 38 00 00      mov c, 0
11132  4B36 DD            push bl
11133  4B37 07 18 47      call putchar
11134  4B3A 51 01 00      add sp, 1
11135  4B3D             ; --- END FUNCTION CALL
11136  4B3D 0A F8 4A      jmp _while264_cond
11137  4B40             _while264_exit:
11138  4B40 F9            leave
11139  4B41 09            ret
11140  4B42             
11141  4B42             printx16:
11142  4B42 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11143  4B45             ; --- BEGIN INLINE ASM SEGMENT
11144  4B45 FA 05 00      lea d, [bp + 5] ; $hex
11145  4B48 2A            mov b, [d]
11146  4B49             print_u16x_printx16:
11147  4B49 DD            push bl
11148  4B4A 30            mov bl, bh
11149  4B4B 07 68 4B      call _itoa_printx16        ; convert bh to char in A
11150  4B4E 2F            mov bl, al        ; save al
11151  4B4F 19 00         mov al, 0
11152  4B51 05 03         syscall sys_io        ; display AH
11153  4B53 24            mov ah, bl        ; retrieve al
11154  4B54 19 00         mov al, 0
11155  4B56 05 03         syscall sys_io        ; display AL
11156  4B58 EA            pop bl
11157  4B59 07 68 4B      call _itoa_printx16        ; convert bh to char in A
11158  4B5C 2F            mov bl, al        ; save al
11159  4B5D 19 00         mov al, 0
11160  4B5F 05 03         syscall sys_io        ; display AH
11161  4B61 24            mov ah, bl        ; retrieve al
11162  4B62 19 00         mov al, 0
11163  4B64 05 03         syscall sys_io        ; display AL
11164  4B66             ; --- END INLINE ASM SEGMENT
11165  4B66             ; return; 
11166  4B66 F9            leave
11167  4B67 09            ret
11168  4B68             ; --- BEGIN INLINE ASM SEGMENT
11169  4B68             _itoa_printx16:
11170  4B68 DA            push d
11171  4B69 D8            push b
11172  4B6A A7 00         mov bh, 0
11173  4B6C FD A4 04      shr bl, 4  
11174  4B6F 74            mov d, b
11175  4B70 1F 82 4B      mov al, [d + s_hex_digits_printx16]
11176  4B73 23            mov ah, al
11177  4B74 E5            pop b
11178  4B75 D8            push b
11179  4B76 A7 00         mov bh, 0
11180  4B78 FD 87 0F      and bl, $0F
11181  4B7B 74            mov d, b
11182  4B7C 1F 82 4B      mov al, [d + s_hex_digits_printx16]
11183  4B7F E5            pop b
11184  4B80 E7            pop d
11185  4B81 09            ret
11186  4B82 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
11186  4B86 34 35 36 37 
11186  4B8A 38 39 41 42 
11186  4B8E 43 44 45 46 
11187  4B92             ; --- END INLINE ASM SEGMENT
11188  4B92 F9            leave
11189  4B93 09            ret
11190  4B94             
11191  4B94             exit:
11192  4B94 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11193  4B97             ; --- BEGIN INLINE ASM SEGMENT
11194  4B97 FA 05 00      lea d, [bp + 5] ; $status
11195  4B9A 2A            mov b, [d] ; return value
11196  4B9B 05 0B         syscall sys_terminate_proc
11197  4B9D             ; --- END INLINE ASM SEGMENT
11198  4B9D F9            leave
11199  4B9E 09            ret
11200  4B9F             
11201  4B9F             strcpy:
11202  4B9F F8 00 00      enter 0 ; (push bp; mov bp, sp)
11203  4BA2             ; char *psrc; 
11204  4BA2 52 02 00      sub sp, 2
11205  4BA5             ; char *pdest; 
11206  4BA5 52 02 00      sub sp, 2
11207  4BA8             ; psrc = src; 
11208  4BA8 FA FF FF      lea d, [bp + -1] ; $psrc
11209  4BAB DA            push d
11210  4BAC FA 07 00      lea d, [bp + 7] ; $src
11211  4BAF 2A            mov b, [d]
11212  4BB0 38 00 00      mov c, 0
11213  4BB3 E7            pop d
11214  4BB4 FD 43         mov [d], b
11215  4BB6             ; pdest = dest; 
11216  4BB6 FA FD FF      lea d, [bp + -3] ; $pdest
11217  4BB9 DA            push d
11218  4BBA FA 05 00      lea d, [bp + 5] ; $dest
11219  4BBD 2A            mov b, [d]
11220  4BBE 38 00 00      mov c, 0
11221  4BC1 E7            pop d
11222  4BC2 FD 43         mov [d], b
11223  4BC4             ; while(*psrc) *pdest++ = *psrc++; 
11224  4BC4             _while265_cond:
11225  4BC4 FA FF FF      lea d, [bp + -1] ; $psrc
11226  4BC7 2A            mov b, [d]
11227  4BC8 38 00 00      mov c, 0
11228  4BCB 74            mov d, b
11229  4BCC 32            mov bl, [d]
11230  4BCD A7 00         mov bh, 0
11231  4BCF 38 00 00      mov c, 0
11232  4BD2 C0 00 00      cmp b, 0
11233  4BD5 C6 06 4C      je _while265_exit
11234  4BD8             _while265_block:
11235  4BD8             ; *pdest++ = *psrc++; 
11236  4BD8 FA FD FF      lea d, [bp + -3] ; $pdest
11237  4BDB 2A            mov b, [d]
11238  4BDC 38 00 00      mov c, 0
11239  4BDF FD 77         inc b
11240  4BE1 FA FD FF      lea d, [bp + -3] ; $pdest
11241  4BE4 FD 43         mov [d], b
11242  4BE6 FD 7D         dec b
11243  4BE8 D8            push b
11244  4BE9 FA FF FF      lea d, [bp + -1] ; $psrc
11245  4BEC 2A            mov b, [d]
11246  4BED 38 00 00      mov c, 0
11247  4BF0 FD 77         inc b
11248  4BF2 FA FF FF      lea d, [bp + -1] ; $psrc
11249  4BF5 FD 43         mov [d], b
11250  4BF7 FD 7D         dec b
11251  4BF9 74            mov d, b
11252  4BFA 32            mov bl, [d]
11253  4BFB A7 00         mov bh, 0
11254  4BFD 38 00 00      mov c, 0
11255  4C00 E7            pop d
11256  4C01 FD 3E         mov [d], bl
11257  4C03 0A C4 4B      jmp _while265_cond
11258  4C06             _while265_exit:
11259  4C06             ; *pdest = '\0'; 
11260  4C06 FA FD FF      lea d, [bp + -3] ; $pdest
11261  4C09 2A            mov b, [d]
11262  4C0A 38 00 00      mov c, 0
11263  4C0D D8            push b
11264  4C0E FD 2E 00 00   mov32 cb, $00000000
11264  4C12 00 00 
11265  4C14 E7            pop d
11266  4C15 FD 3E         mov [d], bl
11267  4C17 F9            leave
11268  4C18 09            ret
11269  4C19             
11270  4C19             strcat:
11271  4C19 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11272  4C1C             ; int dest_len; 
11273  4C1C 52 02 00      sub sp, 2
11274  4C1F             ; int i; 
11275  4C1F 52 02 00      sub sp, 2
11276  4C22             ; dest_len = strlen(dest); 
11277  4C22 FA FF FF      lea d, [bp + -1] ; $dest_len
11278  4C25 DA            push d
11279  4C26             ; --- START FUNCTION CALL
11280  4C26 FA 05 00      lea d, [bp + 5] ; $dest
11281  4C29 2A            mov b, [d]
11282  4C2A 38 00 00      mov c, 0
11283  4C2D FD AB         swp b
11284  4C2F D8            push b
11285  4C30 07 4F 40      call strlen
11286  4C33 51 02 00      add sp, 2
11287  4C36             ; --- END FUNCTION CALL
11288  4C36 E7            pop d
11289  4C37 FD 43         mov [d], b
11290  4C39             ; for (i = 0; src[i] != 0; i=i+1) { 
11291  4C39             _for266_init:
11292  4C39 FA FD FF      lea d, [bp + -3] ; $i
11293  4C3C DA            push d
11294  4C3D FD 2E 00 00   mov32 cb, $00000000
11294  4C41 00 00 
11295  4C43 E7            pop d
11296  4C44 FD 43         mov [d], b
11297  4C46             _for266_cond:
11298  4C46 FA 07 00      lea d, [bp + 7] ; $src
11299  4C49 FD 2A         mov d, [d]
11300  4C4B D7            push a
11301  4C4C DA            push d
11302  4C4D FA FD FF      lea d, [bp + -3] ; $i
11303  4C50 2A            mov b, [d]
11304  4C51 38 00 00      mov c, 0
11305  4C54 E7            pop d
11306  4C55 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
11307  4C59 E4            pop a
11308  4C5A 32            mov bl, [d]
11309  4C5B A7 00         mov bh, 0
11310  4C5D 38 00 00      mov c, 0
11311  4C60             ; --- START RELATIONAL
11312  4C60 D7            push a
11313  4C61 11            mov a, b
11314  4C62 FD 2E 00 00   mov32 cb, $00000000
11314  4C66 00 00 
11315  4C68 B0            cmp a, b
11316  4C69 FD 72         sneq ; !=
11317  4C6B E4            pop a
11318  4C6C             ; --- END RELATIONAL
11319  4C6C C0 00 00      cmp b, 0
11320  4C6F C6 CA 4C      je _for266_exit
11321  4C72             _for266_block:
11322  4C72             ; dest[dest_len + i] = src[i]; 
11323  4C72 FA 05 00      lea d, [bp + 5] ; $dest
11324  4C75 FD 2A         mov d, [d]
11325  4C77 D7            push a
11326  4C78 DA            push d
11327  4C79 FA FF FF      lea d, [bp + -1] ; $dest_len
11328  4C7C 2A            mov b, [d]
11329  4C7D 38 00 00      mov c, 0
11330  4C80             ; --- START TERMS
11331  4C80 D7            push a
11332  4C81 11            mov a, b
11333  4C82 FA FD FF      lea d, [bp + -3] ; $i
11334  4C85 2A            mov b, [d]
11335  4C86 38 00 00      mov c, 0
11336  4C89 56            add b, a
11337  4C8A E4            pop a
11338  4C8B             ; --- END TERMS
11339  4C8B E7            pop d
11340  4C8C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
11341  4C90 E4            pop a
11342  4C91 DA            push d
11343  4C92 FA 07 00      lea d, [bp + 7] ; $src
11344  4C95 FD 2A         mov d, [d]
11345  4C97 D7            push a
11346  4C98 DA            push d
11347  4C99 FA FD FF      lea d, [bp + -3] ; $i
11348  4C9C 2A            mov b, [d]
11349  4C9D 38 00 00      mov c, 0
11350  4CA0 E7            pop d
11351  4CA1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
11352  4CA5 E4            pop a
11353  4CA6 32            mov bl, [d]
11354  4CA7 A7 00         mov bh, 0
11355  4CA9 38 00 00      mov c, 0
11356  4CAC E7            pop d
11357  4CAD FD 3E         mov [d], bl
11358  4CAF             _for266_update:
11359  4CAF FA FD FF      lea d, [bp + -3] ; $i
11360  4CB2 DA            push d
11361  4CB3 FA FD FF      lea d, [bp + -3] ; $i
11362  4CB6 2A            mov b, [d]
11363  4CB7 38 00 00      mov c, 0
11364  4CBA             ; --- START TERMS
11365  4CBA D7            push a
11366  4CBB 11            mov a, b
11367  4CBC FD 2E 01 00   mov32 cb, $00000001
11367  4CC0 00 00 
11368  4CC2 56            add b, a
11369  4CC3 E4            pop a
11370  4CC4             ; --- END TERMS
11371  4CC4 E7            pop d
11372  4CC5 FD 43         mov [d], b
11373  4CC7 0A 46 4C      jmp _for266_cond
11374  4CCA             _for266_exit:
11375  4CCA             ; dest[dest_len + i] = 0; 
11376  4CCA FA 05 00      lea d, [bp + 5] ; $dest
11377  4CCD FD 2A         mov d, [d]
11378  4CCF D7            push a
11379  4CD0 DA            push d
11380  4CD1 FA FF FF      lea d, [bp + -1] ; $dest_len
11381  4CD4 2A            mov b, [d]
11382  4CD5 38 00 00      mov c, 0
11383  4CD8             ; --- START TERMS
11384  4CD8 D7            push a
11385  4CD9 11            mov a, b
11386  4CDA FA FD FF      lea d, [bp + -3] ; $i
11387  4CDD 2A            mov b, [d]
11388  4CDE 38 00 00      mov c, 0
11389  4CE1 56            add b, a
11390  4CE2 E4            pop a
11391  4CE3             ; --- END TERMS
11392  4CE3 E7            pop d
11393  4CE4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
11394  4CE8 E4            pop a
11395  4CE9 DA            push d
11396  4CEA FD 2E 00 00   mov32 cb, $00000000
11396  4CEE 00 00 
11397  4CF0 E7            pop d
11398  4CF1 FD 3E         mov [d], bl
11399  4CF3             ; return dest; 
11400  4CF3 FA 05 00      lea d, [bp + 5] ; $dest
11401  4CF6 2A            mov b, [d]
11402  4CF7 38 00 00      mov c, 0
11403  4CFA F9            leave
11404  4CFB 09            ret
11405  4CFC             
11406  4CFC             printx8:
11407  4CFC F8 00 00      enter 0 ; (push bp; mov bp, sp)
11408  4CFF             ; --- BEGIN INLINE ASM SEGMENT
11409  4CFF FA 05 00      lea d, [bp + 5] ; $hex
11410  4D02 32            mov bl, [d]
11411  4D03 07 12 4D      call _itoa_printx8        ; convert bl to char in A
11412  4D06 2F            mov bl, al        ; save al
11413  4D07 19 00         mov al, 0
11414  4D09 05 03         syscall sys_io        ; display AH
11415  4D0B 24            mov ah, bl        ; retrieve al
11416  4D0C 19 00         mov al, 0
11417  4D0E 05 03         syscall sys_io        ; display AL
11418  4D10             ; --- END INLINE ASM SEGMENT
11419  4D10             ; return; 
11420  4D10 F9            leave
11421  4D11 09            ret
11422  4D12             ; --- BEGIN INLINE ASM SEGMENT
11423  4D12             _itoa_printx8:
11424  4D12 DA            push d
11425  4D13 D8            push b
11426  4D14 A7 00         mov bh, 0
11427  4D16 FD A4 04      shr bl, 4  
11428  4D19 74            mov d, b
11429  4D1A 1F 2C 4D      mov al, [d + s_hex_digits_printx8]
11430  4D1D 23            mov ah, al
11431  4D1E E5            pop b
11432  4D1F D8            push b
11433  4D20 A7 00         mov bh, 0
11434  4D22 FD 87 0F      and bl, $0F
11435  4D25 74            mov d, b
11436  4D26 1F 2C 4D      mov al, [d + s_hex_digits_printx8]
11437  4D29 E5            pop b
11438  4D2A E7            pop d
11439  4D2B 09            ret
11440  4D2C 30 31 32 33 s_hex_digits_printx8:    .db "0123456789ABCDEF"  
11440  4D30 34 35 36 37 
11440  4D34 38 39 41 42 
11440  4D38 43 44 45 46 
11441  4D3C             ; --- END INLINE ASM SEGMENT
11442  4D3C F9            leave
11443  4D3D 09            ret
11444  4D3E             ; --- END TEXT SEGMENT
11445  4D3E             
11446  4D3E             ; --- BEGIN DATA SEGMENT
11447  4D3E             _keywords_data:
11448  4D3E F3 4F       .dw _s0
11449  4D40 01          .db 1
11450  4D41 F7 4F       .dw _s1
11451  4D43 02          .db 2
11452  4D44 FF 4F       .dw _s2
11453  4D46 03          .db 3
11454  4D47 04 50       .dw _s3
11455  4D49 04          .db 4
11456  4D4A 09 50       .dw _s4
11457  4D4C 06          .db 6
11458  4D4D 0C 50       .dw _s5
11459  4D4F 07          .db 7
11460  4D50 0F 50       .dw _s6
11461  4D52 05          .db 5
11462  4D53 13 50       .dw _s7
11463  4D55 00          .db 0
11464  4D56 00 00 00 00 _label_table_data: .fill 288, 0
11464  4D5A 00 00 00 00 
11464  4D5E 00 00 00 00 
11464  4D62 00 00 00 00 
11464  4D66 00 00 00 00 
11464  4D6A 00 00 00 00 
11464  4D6E 00 00 00 00 
11464  4D72 00 00 00 00 
11464  4D76 00 00 00 00 
11464  4D7A 00 00 00 00 
11464  4D7E 00 00 00 00 
11464  4D82 00 00 00 00 
11464  4D86 00 00 00 00 
11464  4D8A 00 00 00 00 
11464  4D8E 00 00 00 00 
11464  4D92 00 00 00 00 
11464  4D96 00 00 00 00 
11464  4D9A 00 00 00 00 
11464  4D9E 00 00 00 00 
11464  4DA2 00 00 00 00 
11464  4DA6 00 00 00 00 
11464  4DAA 00 00 00 00 
11464  4DAE 00 00 00 00 
11464  4DB2 00 00 00 00 
11464  4DB6 00 00 00 00 
11464  4DBA 00 00 00 00 
11464  4DBE 00 00 00 00 
11464  4DC2 00 00 00 00 
11464  4DC6 00 00 00 00 
11464  4DCA 00 00 00 00 
11464  4DCE 00 00 00 00 
11464  4DD2 00 00 00 00 
11464  4DD6 00 00 00 00 
11464  4DDA 00 00 00 00 
11464  4DDE 00 00 00 00 
11464  4DE2 00 00 00 00 
11464  4DE6 00 00 00 00 
11464  4DEA 00 00 00 00 
11464  4DEE 00 00 00 00 
11464  4DF2 00 00 00 00 
11464  4DF6 00 00 00 00 
11464  4DFA 00 00 00 00 
11464  4DFE 00 00 00 00 
11464  4E02 00 00 00 00 
11464  4E06 00 00 00 00 
11464  4E0A 00 00 00 00 
11464  4E0E 00 00 00 00 
11464  4E12 00 00 00 00 
11464  4E16 00 00 00 00 
11464  4E1A 00 00 00 00 
11464  4E1E 00 00 00 00 
11464  4E22 00 00 00 00 
11464  4E26 00 00 00 00 
11464  4E2A 00 00 00 00 
11464  4E2E 00 00 00 00 
11464  4E32 00 00 00 00 
11464  4E36 00 00 00 00 
11464  4E3A 00 00 00 00 
11464  4E3E 00 00 00 00 
11464  4E42 00 00 00 00 
11464  4E46 00 00 00 00 
11464  4E4A 00 00 00 00 
11464  4E4E 00 00 00 00 
11464  4E52 00 00 00 00 
11464  4E56 00 00 00 00 
11464  4E5A 00 00 00 00 
11464  4E5E 00 00 00 00 
11464  4E62 00 00 00 00 
11464  4E66 00 00 00 00 
11464  4E6A 00 00 00 00 
11464  4E6E 00 00 00 00 
11464  4E72 00 00 00 00 
11465  4E76 00 04       __org: .dw $0400
11466  4E78 00 00       _pc: .fill 2, 0
11467  4E7A 01          _print_information: .db $01
11468  4E7B 00 00       _tok: .fill 2, 0
11469  4E7D 00 00       _toktype: .fill 2, 0
11470  4E7F 00 00       _prog: .fill 2, 0
11471  4E81 00 00 00 00 _token_data: .fill 64, 0
11471  4E85 00 00 00 00 
11471  4E89 00 00 00 00 
11471  4E8D 00 00 00 00 
11471  4E91 00 00 00 00 
11471  4E95 00 00 00 00 
11471  4E99 00 00 00 00 
11471  4E9D 00 00 00 00 
11471  4EA1 00 00 00 00 
11471  4EA5 00 00 00 00 
11471  4EA9 00 00 00 00 
11471  4EAD 00 00 00 00 
11471  4EB1 00 00 00 00 
11471  4EB5 00 00 00 00 
11471  4EB9 00 00 00 00 
11471  4EBD 00 00 00 00 
11472  4EC1 00 00 00 00 _string_const_data: .fill 256, 0
11472  4EC5 00 00 00 00 
11472  4EC9 00 00 00 00 
11472  4ECD 00 00 00 00 
11472  4ED1 00 00 00 00 
11472  4ED5 00 00 00 00 
11472  4ED9 00 00 00 00 
11472  4EDD 00 00 00 00 
11472  4EE1 00 00 00 00 
11472  4EE5 00 00 00 00 
11472  4EE9 00 00 00 00 
11472  4EED 00 00 00 00 
11472  4EF1 00 00 00 00 
11472  4EF5 00 00 00 00 
11472  4EF9 00 00 00 00 
11472  4EFD 00 00 00 00 
11472  4F01 00 00 00 00 
11472  4F05 00 00 00 00 
11472  4F09 00 00 00 00 
11472  4F0D 00 00 00 00 
11472  4F11 00 00 00 00 
11472  4F15 00 00 00 00 
11472  4F19 00 00 00 00 
11472  4F1D 00 00 00 00 
11472  4F21 00 00 00 00 
11472  4F25 00 00 00 00 
11472  4F29 00 00 00 00 
11472  4F2D 00 00 00 00 
11472  4F31 00 00 00 00 
11472  4F35 00 00 00 00 
11472  4F39 00 00 00 00 
11472  4F3D 00 00 00 00 
11472  4F41 00 00 00 00 
11472  4F45 00 00 00 00 
11472  4F49 00 00 00 00 
11472  4F4D 00 00 00 00 
11472  4F51 00 00 00 00 
11472  4F55 00 00 00 00 
11472  4F59 00 00 00 00 
11472  4F5D 00 00 00 00 
11472  4F61 00 00 00 00 
11472  4F65 00 00 00 00 
11472  4F69 00 00 00 00 
11472  4F6D 00 00 00 00 
11472  4F71 00 00 00 00 
11472  4F75 00 00 00 00 
11472  4F79 00 00 00 00 
11472  4F7D 00 00 00 00 
11472  4F81 00 00 00 00 
11472  4F85 00 00 00 00 
11472  4F89 00 00 00 00 
11472  4F8D 00 00 00 00 
11472  4F91 00 00 00 00 
11472  4F95 00 00 00 00 
11472  4F99 00 00 00 00 
11472  4F9D 00 00 00 00 
11472  4FA1 00 00 00 00 
11472  4FA5 00 00 00 00 
11472  4FA9 00 00 00 00 
11472  4FAD 00 00 00 00 
11472  4FB1 00 00 00 00 
11472  4FB5 00 00 00 00 
11472  4FB9 00 00 00 00 
11472  4FBD 00 00 00 00 
11473  4FC1 00 00       _int_const: .fill 2, 0
11474  4FC3 00 00       _program: .fill 2, 0
11475  4FC5 00 00       _bin_out: .fill 2, 0
11476  4FC7 00 00       _bin_p: .fill 2, 0
11477  4FC9 00 00       _opcode_table: .fill 2, 0
11478  4FCB 00 00 00 00 _prog_stack_data: .fill 20, 0
11478  4FCF 00 00 00 00 
11478  4FD3 00 00 00 00 
11478  4FD7 00 00 00 00 
11478  4FDB 00 00 00 00 
11479  4FDF 00 00       _prog_tos: .fill 2, 0
11480  4FE1 00 00       _prog_size: .fill 2, 0
11481  4FE3 14 50 16 50 _symbols_data: .dw _s8, _s9, _s9, _s8, _s8, _s8, _s9, _s9, 
11481  4FE7 16 50 14 50 
11481  4FEB 14 50 14 50 
11481  4FEF 16 50 16 50 
11482  4FF3 6F 72 67 00 _s0: .db "org", 0
11483  4FF7 69 6E 63 6C _s1: .db "include", 0
11483  4FFB 75 64 65 00 
11484  4FFF 64 61 74 61 _s2: .db "data", 0
11484  5003 00 
11485  5004 74 65 78 74 _s3: .db "text", 0
11485  5008 00 
11486  5009 64 62 00    _s4: .db "db", 0
11487  500C 64 77 00    _s5: .db "dw", 0
11488  500F 65 6E 64 00 _s6: .db "end", 0
11489  5013 00          _s7: .db "", 0
11490  5014 40 00       _s8: .db "@", 0
11491  5016 23 00       _s9: .db "#", 0
11492  5018 0A 00       _s10: .db "\n", 0
11493  501A 2E 2F 63 6F _s11: .db "./config.d/op_tbl", 0
11493  501E 6E 66 69 67 
11493  5022 2E 64 2F 6F 
11493  5026 70 5F 74 62 
11493  502A 6C 00 
11494  502C 50 61 72 73 _s12: .db "Parsing DATA section...", 0
11494  5030 69 6E 67 20 
11494  5034 44 41 54 41 
11494  5038 20 73 65 63 
11494  503C 74 69 6F 6E 
11494  5040 2E 2E 2E 00 
11495  5044 44 61 74 61 _s13: .db "Data segment not found.", 0
11495  5048 20 73 65 67 
11495  504C 6D 65 6E 74 
11495  5050 20 6E 6F 74 
11495  5054 20 66 6F 75 
11495  5058 6E 64 2E 00 
11496  505C 2E 64 62 3A _s14: .db ".db: ", 0
11496  5060 20 00 
11497  5062 2C 20 00    _s15: .db ", ", 0
11498  5065 2E 64 77 3A _s16: .db ".dw: ", 0
11498  5069 20 00 
11499  506B 44 6F 6E 65 _s17: .db "Done.\n", 0
11499  506F 2E 0A 00 
11500  5072 49 6E 74 65 _s18: .db "Integer constant expected in .org directive.", 0
11500  5076 67 65 72 20 
11500  507A 63 6F 6E 73 
11500  507E 74 61 6E 74 
11500  5082 20 65 78 70 
11500  5086 65 63 74 65 
11500  508A 64 20 69 6E 
11500  508E 20 2E 6F 72 
11500  5092 67 20 64 69 
11500  5096 72 65 63 74 
11500  509A 69 76 65 2E 
11500  509E 00 
11501  509F 50 61 72 73 _s19: .db "Parsing labels and directives...\n", 0
11501  50A3 69 6E 67 20 
11501  50A7 6C 61 62 65 
11501  50AB 6C 73 20 61 
11501  50AF 6E 64 20 64 
11501  50B3 69 72 65 63 
11501  50B7 74 69 76 65 
11501  50BB 73 2E 2E 2E 
11501  50BF 0A 00 
11502  50C1 2E 00       _s20: .db ".", 0
11503  50C3 0A 44 6F 6E _s21: .db "\nDone.\n", 0
11503  50C7 65 2E 0A 00 
11504  50CB 4F 72 67 3A _s22: .db "Org: %s\n", 0
11504  50CF 20 25 73 0A 
11504  50D3 00 
11505  50D4 0A 4C 61 62 _s23: .db "\nLabels list:\n", 0
11505  50D8 65 6C 73 20 
11505  50DC 6C 69 73 74 
11505  50E0 3A 0A 00 
11506  50E3 25 73 3A 20 _s24: .db "%s: %x\n", 0
11506  50E7 25 78 0A 00 
11507  50EB 20 2E 00    _s25: .db " .", 0
11508  50EE 20 00       _s26: .db " ", 0
11509  50F0 4D 61 78 69 _s27: .db "Maximum number of operands per instruction is 2.", 0
11509  50F4 6D 75 6D 20 
11509  50F8 6E 75 6D 62 
11509  50FC 65 72 20 6F 
11509  5100 66 20 6F 70 
11509  5104 65 72 61 6E 
11509  5108 64 73 20 70 
11509  510C 65 72 20 69 
11509  5110 6E 73 74 72 
11509  5114 75 63 74 69 
11509  5118 6F 6E 20 69 
11509  511C 73 20 32 2E 
11509  5120 00 
11510  5121 38 62 69 74 _s28: .db "8bit operand expected but 16bit label given.", 0
11510  5125 20 6F 70 65 
11510  5129 72 61 6E 64 
11510  512D 20 65 78 70 
11510  5131 65 63 74 65 
11510  5135 64 20 62 75 
11510  5139 74 20 31 36 
11510  513D 62 69 74 20 
11510  5141 6C 61 62 65 
11510  5145 6C 20 67 69 
11510  5149 76 65 6E 2E 
11510  514D 00 
11511  514E 25 78 28 25 _s29: .db "%x(%d): %s\n", 0
11511  5152 64 29 3A 20 
11511  5156 25 73 0A 00 
11512  515A 55 6E 64 65 _s30: .db "Undeclared label: ", 0
11512  515E 63 6C 61 72 
11512  5162 65 64 20 6C 
11512  5166 61 62 65 6C 
11512  516A 3A 20 00 
11513  516D 50 61 72 73 _s31: .db "Parsing TEXT section...\n", 0
11513  5171 69 6E 67 20 
11513  5175 54 45 58 54 
11513  5179 20 73 65 63 
11513  517D 74 69 6F 6E 
11513  5181 2E 2E 2E 0A 
11513  5185 00 
11514  5186 54 45 58 54 _s32: .db "TEXT section not found.", 0
11514  518A 20 73 65 63 
11514  518E 74 69 6F 6E 
11514  5192 20 6E 6F 74 
11514  5196 20 66 6F 75 
11514  519A 6E 64 2E 00 
11515  519E 54 45 58 54 _s33: .db "TEXT section end not found.", 0
11515  51A2 20 73 65 63 
11515  51A6 74 69 6F 6E 
11515  51AA 20 65 6E 64 
11515  51AE 20 6E 6F 74 
11515  51B2 20 66 6F 75 
11515  51B6 6E 64 2E 00 
11516  51BA 55 6E 65 78 _s34: .db "Unexpected directive.", 0
11516  51BE 70 65 63 74 
11516  51C2 65 64 20 64 
11516  51C6 69 72 65 63 
11516  51CA 74 69 76 65 
11516  51CE 2E 00 
11517  51D0 44 6F 6E 65 _s35: .db "Done.\n\n", 0
11517  51D4 2E 0A 0A 00 
11518  51D8 50 72 6F 67 _s36: .db "Prog Offset: %x\n", 0
11518  51DC 20 4F 66 66 
11518  51E0 73 65 74 3A 
11518  51E4 20 25 78 0A 
11518  51E8 00 
11519  51E9 50 72 6F 67 _s37: .db "Prog value : %c\n", 0
11519  51ED 20 76 61 6C 
11519  51F1 75 65 20 3A 
11519  51F5 20 25 63 0A 
11519  51F9 00 
11520  51FA 54 6F 6B 65 _s38: .db "Token      : %s\n", 0
11520  51FE 6E 20 20 20 
11520  5202 20 20 20 3A 
11520  5206 20 25 73 0A 
11520  520A 00 
11521  520B 54 6F 6B 20 _s39: .db "Tok        : %d\n", 0
11521  520F 20 20 20 20 
11521  5213 20 20 20 3A 
11521  5217 20 25 64 0A 
11521  521B 00 
11522  521C 54 6F 6B 74 _s40: .db "Toktype    : %d\n", 0
11522  5220 79 70 65 20 
11522  5224 20 20 20 3A 
11522  5228 20 25 64 0A 
11522  522C 00 
11523  522D 53 74 72 69 _s41: .db "StringConst: %s\n", 0
11523  5231 6E 67 43 6F 
11523  5235 6E 73 74 3A 
11523  5239 20 25 73 0A 
11523  523D 00 
11524  523E 50 43 20 20 _s42: .db "PC         : %x\n", 0
11524  5242 20 20 20 20 
11524  5246 20 20 20 3A 
11524  524A 20 25 78 0A 
11524  524E 00 
11525  524F 0A 41 73 73 _s43: .db "\nAssembly complete.\n", 0
11525  5253 65 6D 62 6C 
11525  5257 79 20 63 6F 
11525  525B 6D 70 6C 65 
11525  525F 74 65 2E 0A 
11525  5263 00 
11526  5264 50 72 6F 67 _s44: .db "Program size: %d\n", 0
11526  5268 72 61 6D 20 
11526  526C 73 69 7A 65 
11526  5270 3A 20 25 64 
11526  5274 0A 00 
11527  5276 4C 69 73 74 _s45: .db "Listing: \n", 0
11527  527A 69 6E 67 3A 
11527  527E 20 0A 00 
11528  5281 61 00       _s46: .db "a", 0
11529  5283 61 6C 00    _s47: .db "al", 0
11530  5286 61 68 00    _s48: .db "ah", 0
11531  5289 62 00       _s49: .db "b", 0
11532  528B 62 6C 00    _s50: .db "bl", 0
11533  528E 62 68 00    _s51: .db "bh", 0
11534  5291 63 00       _s52: .db "c", 0
11535  5293 63 6C 00    _s53: .db "cl", 0
11536  5296 63 68 00    _s54: .db "ch", 0
11537  5299 64 00       _s55: .db "d", 0
11538  529B 64 6C 00    _s56: .db "dl", 0
11539  529E 64 68 00    _s57: .db "dh", 0
11540  52A1 67 00       _s58: .db "g", 0
11541  52A3 67 6C 00    _s59: .db "gl", 0
11542  52A6 67 68 00    _s60: .db "gh", 0
11543  52A9 70 63 00    _s61: .db "pc", 0
11544  52AC 73 70 00    _s62: .db "sp", 0
11545  52AF 62 70 00    _s63: .db "bp", 0
11546  52B2 73 69 00    _s64: .db "si", 0
11547  52B5 64 69 00    _s65: .db "di", 0
11548  52B8 77 6F 72 64 _s66: .db "word", 0
11548  52BC 00 
11549  52BD 62 79 74 65 _s67: .db "byte", 0
11549  52C1 00 
11550  52C2 63 6D 70 73 _s68: .db "cmpsb", 0
11550  52C6 62 00 
11551  52C8 6D 6F 76 73 _s69: .db "movsb", 0
11551  52CC 62 00 
11552  52CE 73 74 6F 73 _s70: .db "stosb", 0
11552  52D2 62 00 
11553  52D4 64 65 66 69 _s71: .db "define", 0
11553  52D8 6E 65 00 
11554  52DB 4C 61 62 65 _s72: .db "Label does not exist: ", 0
11554  52DF 6C 20 64 6F 
11554  52E3 65 73 20 6E 
11554  52E7 6F 74 20 65 
11554  52EB 78 69 73 74 
11554  52EF 3A 20 00 
11555  52F2 43 6C 6F 73 _s73: .db "Closing single quotes expected.", 0
11555  52F6 69 6E 67 20 
11555  52FA 73 69 6E 67 
11555  52FE 6C 65 20 71 
11555  5302 75 6F 74 65 
11555  5306 73 20 65 78 
11555  530A 70 65 63 74 
11555  530E 65 64 2E 00 
11556  5312 44 6F 75 62 _s74: .db "Double quotes expected", 0
11556  5316 6C 65 20 71 
11556  531A 75 6F 74 65 
11556  531E 73 20 65 78 
11556  5322 70 65 63 74 
11556  5326 65 64 00 
11557  5329 54 4F 4B 45 _s75: .db "TOKEN ERROR. Prog: %x\n", 0
11557  532D 4E 20 45 52 
11557  5331 52 4F 52 2E 
11557  5335 20 50 72 6F 
11557  5339 67 3A 20 25 
11557  533D 78 0A 00 
11558  5340 50 72 6F 67 _s76: .db "ProgVal: %x", 0
11558  5344 56 61 6C 3A 
11558  5348 20 25 78 00 
11559  534C 0A 20 54 65 _s77: .db "\n Text after prog: %s\n", 0
11559  5350 78 74 20 61 
11559  5354 66 74 65 72 
11559  5358 20 70 72 6F 
11559  535C 67 3A 20 25 
11559  5360 73 0A 00 
11560  5363 0A 45 72 72 _s78: .db "\nError: %s\n", 0
11560  5367 6F 72 3A 20 
11560  536B 25 73 0A 00 
11561  536F 0A 45 72 72 _s79: .db "\nError: %s %s\n", 0
11561  5373 6F 72 3A 20 
11561  5377 25 73 20 25 
11561  537B 73 0A 00 
11562  537E 43 61 6E 6E _s80: .db "Cannot push prog. Stack overflow.", 0
11562  5382 6F 74 20 70 
11562  5386 75 73 68 20 
11562  538A 70 72 6F 67 
11562  538E 2E 20 53 74 
11562  5392 61 63 6B 20 
11562  5396 6F 76 65 72 
11562  539A 66 6C 6F 77 
11562  539E 2E 00 
11563  53A0 43 61 6E 6E _s81: .db "Cannot pop prog. Stack overflow.", 0
11563  53A4 6F 74 20 70 
11563  53A8 6F 70 20 70 
11563  53AC 72 6F 67 2E 
11563  53B0 20 53 74 61 
11563  53B4 63 6B 20 6F 
11563  53B8 76 65 72 66 
11563  53BC 6C 6F 77 2E 
11563  53C0 00 
11564  53C1 55 6E 65 78 _s82: .db "Unexpected format in printf.", 0
11564  53C5 70 65 63 74 
11564  53C9 65 64 20 66 
11564  53CD 6F 72 6D 61 
11564  53D1 74 20 69 6E 
11564  53D5 20 70 72 69 
11564  53D9 6E 74 66 2E 
11564  53DD 00 
11565  53DE 45 72 72 6F _s83: .db "Error: Unknown argument type.\n", 0
11565  53E2 72 3A 20 55 
11565  53E6 6E 6B 6E 6F 
11565  53EA 77 6E 20 61 
11565  53EE 72 67 75 6D 
11565  53F2 65 6E 74 20 
11565  53F6 74 79 70 65 
11565  53FA 2E 0A 00 
11566  53FD             
11567  53FD FF 53       _heap_top: .dw _heap
11568  53FF 00          _heap: .db 0
11569  5400             ; --- END DATA SEGMENT
11570  5400             
11571  5400             .end
tasm: Number of errors = 0
