0001   0000             ; --- FILENAME: ../solarium/asm/asm.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             sys_break        .EQU  $0000
0002+  0000             sys_rtc          .EQU  $0001
0003+  0000             sys_ide          .EQU  $0002
0004+  0000             sys_io           .EQU  $0003
0005+  0000             sys_filesystem   .EQU  $0004
0006+  0000             sys_create_proc  .EQU  $0005
0007+  0000             sys_list_proc    .EQU  $0006
0008+  0000             sys_datetime     .EQU  $0007
0009+  0000             sys_reboot       .EQU  $0008
0010+  0000             sys_pause_proc   .EQU  $0009
0011+  0000             sys_resume_proc  .EQU  $000a
0012+  0000             sys_terminate_proc .EQU  $000b
0013+  0000             sys_system       .EQU  $000c
0014+  0000             sys_fdc          .EQU  $000d
0015+  0000             text_org         .EQU  $0400
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0000             
0005   0000             ; --- BEGIN TEXT SEGMENT
0006   0400             .org text_org
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; char *p; 
0011   0408 52 02 00      sub sp, 2
0012   040B             ; print("\n"); 
0013   040B             ; --- START FUNCTION CALL
0014   040B 26 18 50      mov b, _s10 ; "\n"
0015   040E FD AB         swp b
0016   0410 D8            push b
0017   0411 07 69 3E      call print
0018   0414 51 02 00      add sp, 2
0019   0417             ; --- END FUNCTION CALL
0020   0417             ; program = alloc(16384); 
0021   0417 3B C3 4F      mov d, _program ; $program
0022   041A DA            push d
0023   041B             ; --- START FUNCTION CALL
0024   041B FD 2E 00 40   mov32 cb, $00004000
0024   041F 00 00 
0025   0421 FD AB         swp b
0026   0423 D8            push b
0027   0424 07 82 3E      call alloc
0028   0427 51 02 00      add sp, 2
0029   042A             ; --- END FUNCTION CALL
0030   042A E7            pop d
0031   042B FD 43         mov [d], b
0032   042D             ; bin_out = alloc(16384); 
0033   042D 3B C5 4F      mov d, _bin_out ; $bin_out
0034   0430 DA            push d
0035   0431             ; --- START FUNCTION CALL
0036   0431 FD 2E 00 40   mov32 cb, $00004000
0036   0435 00 00 
0037   0437 FD AB         swp b
0038   0439 D8            push b
0039   043A 07 82 3E      call alloc
0040   043D 51 02 00      add sp, 2
0041   0440             ; --- END FUNCTION CALL
0042   0440 E7            pop d
0043   0441 FD 43         mov [d], b
0044   0443             ; opcode_table = alloc(12310); 
0045   0443 3B C9 4F      mov d, _opcode_table ; $opcode_table
0046   0446 DA            push d
0047   0447             ; --- START FUNCTION CALL
0048   0447 FD 2E 16 30   mov32 cb, $00003016
0048   044B 00 00 
0049   044D FD AB         swp b
0050   044F D8            push b
0051   0450 07 82 3E      call alloc
0052   0453 51 02 00      add sp, 2
0053   0456             ; --- END FUNCTION CALL
0054   0456 E7            pop d
0055   0457 FD 43         mov [d], b
0056   0459             ; loadfile(0x0000, program); 
0057   0459             ; --- START FUNCTION CALL
0058   0459 3B C3 4F      mov d, _program ; $program
0059   045C 2A            mov b, [d]
0060   045D 38 00 00      mov c, 0
0061   0460 FD AB         swp b
0062   0462 D8            push b
0063   0463 FD 2E 00 00   mov32 cb, $00000000
0063   0467 00 00 
0064   0469 FD AB         swp b
0065   046B D8            push b
0066   046C 07 A9 3D      call loadfile
0067   046F 51 04 00      add sp, 4
0068   0472             ; --- END FUNCTION CALL
0069   0472             ; loadfile("./config.d/op_tbl", opcode_table); 
0070   0472             ; --- START FUNCTION CALL
0071   0472 3B C9 4F      mov d, _opcode_table ; $opcode_table
0072   0475 2A            mov b, [d]
0073   0476 38 00 00      mov c, 0
0074   0479 FD AB         swp b
0075   047B D8            push b
0076   047C 26 1A 50      mov b, _s11 ; "./config.d/op_tbl"
0077   047F FD AB         swp b
0078   0481 D8            push b
0079   0482 07 A9 3D      call loadfile
0080   0485 51 04 00      add sp, 4
0081   0488             ; --- END FUNCTION CALL
0082   0488             ; p = program; 
0083   0488 FA FF FF      lea d, [bp + -1] ; $p
0084   048B DA            push d
0085   048C 3B C3 4F      mov d, _program ; $program
0086   048F 2A            mov b, [d]
0087   0490 38 00 00      mov c, 0
0088   0493 E7            pop d
0089   0494 FD 43         mov [d], b
0090   0496             ; while(*p) p++; 
0091   0496             _while1_cond:
0092   0496 FA FF FF      lea d, [bp + -1] ; $p
0093   0499 2A            mov b, [d]
0094   049A 38 00 00      mov c, 0
0095   049D 74            mov d, b
0096   049E 32            mov bl, [d]
0097   049F A7 00         mov bh, 0
0098   04A1 38 00 00      mov c, 0
0099   04A4 C0 00 00      cmp b, 0
0100   04A7 C6 BD 04      je _while1_exit
0101   04AA             _while1_block:
0102   04AA             ; p++; 
0103   04AA FA FF FF      lea d, [bp + -1] ; $p
0104   04AD 2A            mov b, [d]
0105   04AE 38 00 00      mov c, 0
0106   04B1 FD 77         inc b
0107   04B3 FA FF FF      lea d, [bp + -1] ; $p
0108   04B6 FD 43         mov [d], b
0109   04B8 FD 7D         dec b
0110   04BA 0A 96 04      jmp _while1_cond
0111   04BD             _while1_exit:
0112   04BD             ; while(is_space(*p)) p--; 
0113   04BD             _while2_cond:
0114   04BD             ; --- START FUNCTION CALL
0115   04BD FA FF FF      lea d, [bp + -1] ; $p
0116   04C0 2A            mov b, [d]
0117   04C1 38 00 00      mov c, 0
0118   04C4 74            mov d, b
0119   04C5 32            mov bl, [d]
0120   04C6 A7 00         mov bh, 0
0121   04C8 38 00 00      mov c, 0
0122   04CB DD            push bl
0123   04CC 07 B3 3E      call is_space
0124   04CF 51 01 00      add sp, 1
0125   04D2             ; --- END FUNCTION CALL
0126   04D2 C0 00 00      cmp b, 0
0127   04D5 C6 EB 04      je _while2_exit
0128   04D8             _while2_block:
0129   04D8             ; p--; 
0130   04D8 FA FF FF      lea d, [bp + -1] ; $p
0131   04DB 2A            mov b, [d]
0132   04DC 38 00 00      mov c, 0
0133   04DF FD 7D         dec b
0134   04E1 FA FF FF      lea d, [bp + -1] ; $p
0135   04E4 FD 43         mov [d], b
0136   04E6 FD 77         inc b
0137   04E8 0A BD 04      jmp _while2_cond
0138   04EB             _while2_exit:
0139   04EB             ; p++; 
0140   04EB FA FF FF      lea d, [bp + -1] ; $p
0141   04EE 2A            mov b, [d]
0142   04EF 38 00 00      mov c, 0
0143   04F2 FD 77         inc b
0144   04F4 FA FF FF      lea d, [bp + -1] ; $p
0145   04F7 FD 43         mov [d], b
0146   04F9 FD 7D         dec b
0147   04FB             ; *p = '\0'; 
0148   04FB FA FF FF      lea d, [bp + -1] ; $p
0149   04FE 2A            mov b, [d]
0150   04FF 38 00 00      mov c, 0
0151   0502 D8            push b
0152   0503 FD 2E 00 00   mov32 cb, $00000000
0152   0507 00 00 
0153   0509 E7            pop d
0154   050A FD 3E         mov [d], bl
0155   050C             ; prog = program; 
0156   050C 3B 7F 4E      mov d, _prog ; $prog
0157   050F DA            push d
0158   0510 3B C3 4F      mov d, _program ; $program
0159   0513 2A            mov b, [d]
0160   0514 38 00 00      mov c, 0
0161   0517 E7            pop d
0162   0518 FD 43         mov [d], b
0163   051A             ; bin_p = bin_out + _org; 
0164   051A 3B C7 4F      mov d, _bin_p ; $bin_p
0165   051D DA            push d
0166   051E 3B C5 4F      mov d, _bin_out ; $bin_out
0167   0521 2A            mov b, [d]
0168   0522 38 00 00      mov c, 0
0169   0525             ; --- START TERMS
0170   0525 D7            push a
0171   0526 11            mov a, b
0172   0527 3B 76 4E      mov d, __org ; $_org
0173   052A 2A            mov b, [d]
0174   052B 38 00 00      mov c, 0
0175   052E 56            add b, a
0176   052F E4            pop a
0177   0530             ; --- END TERMS
0178   0530 E7            pop d
0179   0531 FD 43         mov [d], b
0180   0533             ; pc = _org; 
0181   0533 3B 78 4E      mov d, _pc ; $pc
0182   0536 DA            push d
0183   0537 3B 76 4E      mov d, __org ; $_org
0184   053A 2A            mov b, [d]
0185   053B 38 00 00      mov c, 0
0186   053E E7            pop d
0187   053F FD 43         mov [d], b
0188   0541             ; prog_size = 0; 
0189   0541 3B E1 4F      mov d, _prog_size ; $prog_size
0190   0544 DA            push d
0191   0545 FD 2E 00 00   mov32 cb, $00000000
0191   0549 00 00 
0192   054B E7            pop d
0193   054C FD 43         mov [d], b
0194   054E             ; label_directive_scan(); 
0195   054E             ; --- START FUNCTION CALL
0196   054E 07 20 0A      call label_directive_scan
0197   0551             ; prog_size = 0; 
0198   0551 3B E1 4F      mov d, _prog_size ; $prog_size
0199   0554 DA            push d
0200   0555 FD 2E 00 00   mov32 cb, $00000000
0200   0559 00 00 
0201   055B E7            pop d
0202   055C FD 43         mov [d], b
0203   055E             ; parse_text(); 
0204   055E             ; --- START FUNCTION CALL
0205   055E 07 28 1C      call parse_text
0206   0561             ; parse_data(); 
0207   0561             ; --- START FUNCTION CALL
0208   0561 07 69 05      call parse_data
0209   0564             ; display_output(); 
0210   0564             ; --- START FUNCTION CALL
0211   0564 07 6A 1E      call display_output
0212   0567 05 0B         syscall sys_terminate_proc
0213   0569             
0214   0569             parse_data:
0215   0569 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0216   056C             ; print("Parsing DATA section..."); 
0217   056C             ; --- START FUNCTION CALL
0218   056C 26 2C 50      mov b, _s12 ; "Parsing DATA section..."
0219   056F FD AB         swp b
0220   0571 D8            push b
0221   0572 07 69 3E      call print
0222   0575 51 02 00      add sp, 2
0223   0578             ; --- END FUNCTION CALL
0224   0578             ; for(;;){ 
0225   0578             _for3_init:
0226   0578             _for3_cond:
0227   0578             _for3_block:
0228   0578             ; get(); 
0229   0578             ; --- START FUNCTION CALL
0230   0578 07 6C 2B      call get
0231   057B             ; if(toktype == END) error("Data segment not found."); 
0232   057B             _if4_cond:
0233   057B 3B 7D 4E      mov d, _toktype ; $toktype
0234   057E 2A            mov b, [d]
0235   057F 38 00 00      mov c, 0
0236   0582             ; --- START RELATIONAL
0237   0582 D7            push a
0238   0583 11            mov a, b
0239   0584 FD 2E 07 00   mov32 cb, $7 ; enum element: END
0239   0588 00 00 
0240   058A B0            cmp a, b
0241   058B FD 71         seq ; ==
0242   058D E4            pop a
0243   058E             ; --- END RELATIONAL
0244   058E C0 00 00      cmp b, 0
0245   0591 C6 A3 05      je _if4_exit
0246   0594             _if4_TRUE:
0247   0594             ; error("Data segment not found."); 
0248   0594             ; --- START FUNCTION CALL
0249   0594 26 44 50      mov b, _s13 ; "Data segment not found."
0250   0597 FD AB         swp b
0251   0599 D8            push b
0252   059A 07 72 39      call error
0253   059D 51 02 00      add sp, 2
0254   05A0             ; --- END FUNCTION CALL
0255   05A0 0A A3 05      jmp _if4_exit
0256   05A3             _if4_exit:
0257   05A3             ; if(tok == DOT){ 
0258   05A3             _if5_cond:
0259   05A3 3B 7B 4E      mov d, _tok ; $tok
0260   05A6 2A            mov b, [d]
0261   05A7 38 00 00      mov c, 0
0262   05AA             ; --- START RELATIONAL
0263   05AA D7            push a
0264   05AB 11            mov a, b
0265   05AC FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
0265   05B0 00 00 
0266   05B2 B0            cmp a, b
0267   05B3 FD 71         seq ; ==
0268   05B5 E4            pop a
0269   05B6             ; --- END RELATIONAL
0270   05B6 C0 00 00      cmp b, 0
0271   05B9 C6 E1 05      je _if5_exit
0272   05BC             _if5_TRUE:
0273   05BC             ; get(); 
0274   05BC             ; --- START FUNCTION CALL
0275   05BC 07 6C 2B      call get
0276   05BF             ; if(tok == DATA) break; 
0277   05BF             _if6_cond:
0278   05BF 3B 7B 4E      mov d, _tok ; $tok
0279   05C2 2A            mov b, [d]
0280   05C3 38 00 00      mov c, 0
0281   05C6             ; --- START RELATIONAL
0282   05C6 D7            push a
0283   05C7 11            mov a, b
0284   05C8 FD 2E 03 00   mov32 cb, $3 ; enum element: DATA
0284   05CC 00 00 
0285   05CE B0            cmp a, b
0286   05CF FD 71         seq ; ==
0287   05D1 E4            pop a
0288   05D2             ; --- END RELATIONAL
0289   05D2 C0 00 00      cmp b, 0
0290   05D5 C6 DE 05      je _if6_exit
0291   05D8             _if6_TRUE:
0292   05D8             ; break; 
0293   05D8 0A E4 05      jmp _for3_exit ; for break
0294   05DB 0A DE 05      jmp _if6_exit
0295   05DE             _if6_exit:
0296   05DE 0A E1 05      jmp _if5_exit
0297   05E1             _if5_exit:
0298   05E1             _for3_update:
0299   05E1 0A 78 05      jmp _for3_cond
0300   05E4             _for3_exit:
0301   05E4             ; for(;;){ 
0302   05E4             _for7_init:
0303   05E4             _for7_cond:
0304   05E4             _for7_block:
0305   05E4             ; get(); 
0306   05E4             ; --- START FUNCTION CALL
0307   05E4 07 6C 2B      call get
0308   05E7             ; if(tok == SEGMENT_END) break; 
0309   05E7             _if8_cond:
0310   05E7 3B 7B 4E      mov d, _tok ; $tok
0311   05EA 2A            mov b, [d]
0312   05EB 38 00 00      mov c, 0
0313   05EE             ; --- START RELATIONAL
0314   05EE D7            push a
0315   05EF 11            mov a, b
0316   05F0 FD 2E 05 00   mov32 cb, $5 ; enum element: SEGMENT_END
0316   05F4 00 00 
0317   05F6 B0            cmp a, b
0318   05F7 FD 71         seq ; ==
0319   05F9 E4            pop a
0320   05FA             ; --- END RELATIONAL
0321   05FA C0 00 00      cmp b, 0
0322   05FD C6 06 06      je _if8_exit
0323   0600             _if8_TRUE:
0324   0600             ; break; 
0325   0600 0A 27 08      jmp _for7_exit ; for break
0326   0603 0A 06 06      jmp _if8_exit
0327   0606             _if8_exit:
0328   0606             ; if(tok == DB){ 
0329   0606             _if9_cond:
0330   0606 3B 7B 4E      mov d, _tok ; $tok
0331   0609 2A            mov b, [d]
0332   060A 38 00 00      mov c, 0
0333   060D             ; --- START RELATIONAL
0334   060D D7            push a
0335   060E 11            mov a, b
0336   060F FD 2E 06 00   mov32 cb, $6 ; enum element: DB
0336   0613 00 00 
0337   0615 B0            cmp a, b
0338   0616 FD 71         seq ; ==
0339   0618 E4            pop a
0340   0619             ; --- END RELATIONAL
0341   0619 C0 00 00      cmp b, 0
0342   061C C6 09 07      je _if9_else
0343   061F             _if9_TRUE:
0344   061F             ; print(".db: "); 
0345   061F             ; --- START FUNCTION CALL
0346   061F 26 5C 50      mov b, _s14 ; ".db: "
0347   0622 FD AB         swp b
0348   0624 D8            push b
0349   0625 07 69 3E      call print
0350   0628 51 02 00      add sp, 2
0351   062B             ; --- END FUNCTION CALL
0352   062B             ; for(;;){ 
0353   062B             _for10_init:
0354   062B             _for10_cond:
0355   062B             _for10_block:
0356   062B             ; get(); 
0357   062B             ; --- START FUNCTION CALL
0358   062B 07 6C 2B      call get
0359   062E             ; if(toktype == CHAR_CONST){ 
0360   062E             _if11_cond:
0361   062E 3B 7D 4E      mov d, _toktype ; $toktype
0362   0631 2A            mov b, [d]
0363   0632 38 00 00      mov c, 0
0364   0635             ; --- START RELATIONAL
0365   0635 D7            push a
0366   0636 11            mov a, b
0367   0637 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0367   063B 00 00 
0368   063D B0            cmp a, b
0369   063E FD 71         seq ; ==
0370   0640 E4            pop a
0371   0641             ; --- END RELATIONAL
0372   0641 C0 00 00      cmp b, 0
0373   0644 C6 87 06      je _if11_else
0374   0647             _if11_TRUE:
0375   0647             ; emit_byte(string_const[0], 0); 
0376   0647             ; --- START FUNCTION CALL
0377   0647 FD 2E 00 00   mov32 cb, $00000000
0377   064B 00 00 
0378   064D DD            push bl
0379   064E 3B C1 4E      mov d, _string_const_data ; $string_const
0380   0651 D7            push a
0381   0652 DA            push d
0382   0653 FD 2E 00 00   mov32 cb, $00000000
0382   0657 00 00 
0383   0659 E7            pop d
0384   065A 5A            add d, b
0385   065B E4            pop a
0386   065C 32            mov bl, [d]
0387   065D A7 00         mov bh, 0
0388   065F 38 00 00      mov c, 0
0389   0662 DD            push bl
0390   0663 07 71 27      call emit_byte
0391   0666 51 02 00      add sp, 2
0392   0669             ; --- END FUNCTION CALL
0393   0669             ; printx8(string_const[0]); 
0394   0669             ; --- START FUNCTION CALL
0395   0669 3B C1 4E      mov d, _string_const_data ; $string_const
0396   066C D7            push a
0397   066D DA            push d
0398   066E FD 2E 00 00   mov32 cb, $00000000
0398   0672 00 00 
0399   0674 E7            pop d
0400   0675 5A            add d, b
0401   0676 E4            pop a
0402   0677 32            mov bl, [d]
0403   0678 A7 00         mov bh, 0
0404   067A 38 00 00      mov c, 0
0405   067D DD            push bl
0406   067E 07 FC 4C      call printx8
0407   0681 51 01 00      add sp, 1
0408   0684             ; --- END FUNCTION CALL
0409   0684 0A C6 06      jmp _if11_exit
0410   0687             _if11_else:
0411   0687             ; if(toktype == INTEGER_CONST){ 
0412   0687             _if12_cond:
0413   0687 3B 7D 4E      mov d, _toktype ; $toktype
0414   068A 2A            mov b, [d]
0415   068B 38 00 00      mov c, 0
0416   068E             ; --- START RELATIONAL
0417   068E D7            push a
0418   068F 11            mov a, b
0419   0690 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0419   0694 00 00 
0420   0696 B0            cmp a, b
0421   0697 FD 71         seq ; ==
0422   0699 E4            pop a
0423   069A             ; --- END RELATIONAL
0424   069A C0 00 00      cmp b, 0
0425   069D C6 C6 06      je _if12_exit
0426   06A0             _if12_TRUE:
0427   06A0             ; emit_byte(int_const, 0); 
0428   06A0             ; --- START FUNCTION CALL
0429   06A0 FD 2E 00 00   mov32 cb, $00000000
0429   06A4 00 00 
0430   06A6 DD            push bl
0431   06A7 3B C1 4F      mov d, _int_const ; $int_const
0432   06AA 2A            mov b, [d]
0433   06AB 38 00 00      mov c, 0
0434   06AE DD            push bl
0435   06AF 07 71 27      call emit_byte
0436   06B2 51 02 00      add sp, 2
0437   06B5             ; --- END FUNCTION CALL
0438   06B5             ; printx8(int_const); 
0439   06B5             ; --- START FUNCTION CALL
0440   06B5 3B C1 4F      mov d, _int_const ; $int_const
0441   06B8 2A            mov b, [d]
0442   06B9 38 00 00      mov c, 0
0443   06BC DD            push bl
0444   06BD 07 FC 4C      call printx8
0445   06C0 51 01 00      add sp, 1
0446   06C3             ; --- END FUNCTION CALL
0447   06C3 0A C6 06      jmp _if12_exit
0448   06C6             _if12_exit:
0449   06C6             _if11_exit:
0450   06C6             ; get(); 
0451   06C6             ; --- START FUNCTION CALL
0452   06C6 07 6C 2B      call get
0453   06C9             ; if(tok != COMMA){ 
0454   06C9             _if13_cond:
0455   06C9 3B 7B 4E      mov d, _tok ; $tok
0456   06CC 2A            mov b, [d]
0457   06CD 38 00 00      mov c, 0
0458   06D0             ; --- START RELATIONAL
0459   06D0 D7            push a
0460   06D1 11            mov a, b
0461   06D2 FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0461   06D6 00 00 
0462   06D8 B0            cmp a, b
0463   06D9 FD 72         sneq ; !=
0464   06DB E4            pop a
0465   06DC             ; --- END RELATIONAL
0466   06DC C0 00 00      cmp b, 0
0467   06DF C6 EB 06      je _if13_exit
0468   06E2             _if13_TRUE:
0469   06E2             ; back(); 
0470   06E2             ; --- START FUNCTION CALL
0471   06E2 07 DF 27      call back
0472   06E5             ; break; 
0473   06E5 0A FA 06      jmp _for10_exit ; for break
0474   06E8 0A EB 06      jmp _if13_exit
0475   06EB             _if13_exit:
0476   06EB             ; print(", "); 
0477   06EB             ; --- START FUNCTION CALL
0478   06EB 26 62 50      mov b, _s15 ; ", "
0479   06EE FD AB         swp b
0480   06F0 D8            push b
0481   06F1 07 69 3E      call print
0482   06F4 51 02 00      add sp, 2
0483   06F7             ; --- END FUNCTION CALL
0484   06F7             _for10_update:
0485   06F7 0A 2B 06      jmp _for10_cond
0486   06FA             _for10_exit:
0487   06FA             ; print("\n"); 
0488   06FA             ; --- START FUNCTION CALL
0489   06FA 26 18 50      mov b, _s10 ; "\n"
0490   06FD FD AB         swp b
0491   06FF D8            push b
0492   0700 07 69 3E      call print
0493   0703 51 02 00      add sp, 2
0494   0706             ; --- END FUNCTION CALL
0495   0706 0A 24 08      jmp _if9_exit
0496   0709             _if9_else:
0497   0709             ; if(tok == DW){ 
0498   0709             _if14_cond:
0499   0709 3B 7B 4E      mov d, _tok ; $tok
0500   070C 2A            mov b, [d]
0501   070D 38 00 00      mov c, 0
0502   0710             ; --- START RELATIONAL
0503   0710 D7            push a
0504   0711 11            mov a, b
0505   0712 FD 2E 07 00   mov32 cb, $7 ; enum element: DW
0505   0716 00 00 
0506   0718 B0            cmp a, b
0507   0719 FD 71         seq ; ==
0508   071B E4            pop a
0509   071C             ; --- END RELATIONAL
0510   071C C0 00 00      cmp b, 0
0511   071F C6 24 08      je _if14_exit
0512   0722             _if14_TRUE:
0513   0722             ; print(".dw: "); 
0514   0722             ; --- START FUNCTION CALL
0515   0722 26 65 50      mov b, _s16 ; ".dw: "
0516   0725 FD AB         swp b
0517   0727 D8            push b
0518   0728 07 69 3E      call print
0519   072B 51 02 00      add sp, 2
0520   072E             ; --- END FUNCTION CALL
0521   072E             ; for(;;){ 
0522   072E             _for15_init:
0523   072E             _for15_cond:
0524   072E             _for15_block:
0525   072E             ; get(); 
0526   072E             ; --- START FUNCTION CALL
0527   072E 07 6C 2B      call get
0528   0731             ; if(toktype == CHAR_CONST){ 
0529   0731             _if16_cond:
0530   0731 3B 7D 4E      mov d, _toktype ; $toktype
0531   0734 2A            mov b, [d]
0532   0735 38 00 00      mov c, 0
0533   0738             ; --- START RELATIONAL
0534   0738 D7            push a
0535   0739 11            mov a, b
0536   073A FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0536   073E 00 00 
0537   0740 B0            cmp a, b
0538   0741 FD 71         seq ; ==
0539   0743 E4            pop a
0540   0744             ; --- END RELATIONAL
0541   0744 C0 00 00      cmp b, 0
0542   0747 C6 9E 07      je _if16_else
0543   074A             _if16_TRUE:
0544   074A             ; emit_byte(string_const[0], 0); 
0545   074A             ; --- START FUNCTION CALL
0546   074A FD 2E 00 00   mov32 cb, $00000000
0546   074E 00 00 
0547   0750 DD            push bl
0548   0751 3B C1 4E      mov d, _string_const_data ; $string_const
0549   0754 D7            push a
0550   0755 DA            push d
0551   0756 FD 2E 00 00   mov32 cb, $00000000
0551   075A 00 00 
0552   075C E7            pop d
0553   075D 5A            add d, b
0554   075E E4            pop a
0555   075F 32            mov bl, [d]
0556   0760 A7 00         mov bh, 0
0557   0762 38 00 00      mov c, 0
0558   0765 DD            push bl
0559   0766 07 71 27      call emit_byte
0560   0769 51 02 00      add sp, 2
0561   076C             ; --- END FUNCTION CALL
0562   076C             ; emit_byte(0, 0); 
0563   076C             ; --- START FUNCTION CALL
0564   076C FD 2E 00 00   mov32 cb, $00000000
0564   0770 00 00 
0565   0772 DD            push bl
0566   0773 FD 2E 00 00   mov32 cb, $00000000
0566   0777 00 00 
0567   0779 DD            push bl
0568   077A 07 71 27      call emit_byte
0569   077D 51 02 00      add sp, 2
0570   0780             ; --- END FUNCTION CALL
0571   0780             ; printx8(string_const[0]); 
0572   0780             ; --- START FUNCTION CALL
0573   0780 3B C1 4E      mov d, _string_const_data ; $string_const
0574   0783 D7            push a
0575   0784 DA            push d
0576   0785 FD 2E 00 00   mov32 cb, $00000000
0576   0789 00 00 
0577   078B E7            pop d
0578   078C 5A            add d, b
0579   078D E4            pop a
0580   078E 32            mov bl, [d]
0581   078F A7 00         mov bh, 0
0582   0791 38 00 00      mov c, 0
0583   0794 DD            push bl
0584   0795 07 FC 4C      call printx8
0585   0798 51 01 00      add sp, 1
0586   079B             ; --- END FUNCTION CALL
0587   079B 0A E1 07      jmp _if16_exit
0588   079E             _if16_else:
0589   079E             ; if(toktype == INTEGER_CONST){ 
0590   079E             _if17_cond:
0591   079E 3B 7D 4E      mov d, _toktype ; $toktype
0592   07A1 2A            mov b, [d]
0593   07A2 38 00 00      mov c, 0
0594   07A5             ; --- START RELATIONAL
0595   07A5 D7            push a
0596   07A6 11            mov a, b
0597   07A7 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0597   07AB 00 00 
0598   07AD B0            cmp a, b
0599   07AE FD 71         seq ; ==
0600   07B0 E4            pop a
0601   07B1             ; --- END RELATIONAL
0602   07B1 C0 00 00      cmp b, 0
0603   07B4 C6 E1 07      je _if17_exit
0604   07B7             _if17_TRUE:
0605   07B7             ; emit_word(int_const, 0); 
0606   07B7             ; --- START FUNCTION CALL
0607   07B7 FD 2E 00 00   mov32 cb, $00000000
0607   07BB 00 00 
0608   07BD DD            push bl
0609   07BE 3B C1 4F      mov d, _int_const ; $int_const
0610   07C1 2A            mov b, [d]
0611   07C2 38 00 00      mov c, 0
0612   07C5 FD AB         swp b
0613   07C7 D8            push b
0614   07C8 07 A9 27      call emit_word
0615   07CB 51 03 00      add sp, 3
0616   07CE             ; --- END FUNCTION CALL
0617   07CE             ; printx16(int_const); 
0618   07CE             ; --- START FUNCTION CALL
0619   07CE 3B C1 4F      mov d, _int_const ; $int_const
0620   07D1 2A            mov b, [d]
0621   07D2 38 00 00      mov c, 0
0622   07D5 FD AB         swp b
0623   07D7 D8            push b
0624   07D8 07 42 4B      call printx16
0625   07DB 51 02 00      add sp, 2
0626   07DE             ; --- END FUNCTION CALL
0627   07DE 0A E1 07      jmp _if17_exit
0628   07E1             _if17_exit:
0629   07E1             _if16_exit:
0630   07E1             ; get(); 
0631   07E1             ; --- START FUNCTION CALL
0632   07E1 07 6C 2B      call get
0633   07E4             ; if(tok != COMMA){ 
0634   07E4             _if18_cond:
0635   07E4 3B 7B 4E      mov d, _tok ; $tok
0636   07E7 2A            mov b, [d]
0637   07E8 38 00 00      mov c, 0
0638   07EB             ; --- START RELATIONAL
0639   07EB D7            push a
0640   07EC 11            mov a, b
0641   07ED FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0641   07F1 00 00 
0642   07F3 B0            cmp a, b
0643   07F4 FD 72         sneq ; !=
0644   07F6 E4            pop a
0645   07F7             ; --- END RELATIONAL
0646   07F7 C0 00 00      cmp b, 0
0647   07FA C6 06 08      je _if18_exit
0648   07FD             _if18_TRUE:
0649   07FD             ; back(); 
0650   07FD             ; --- START FUNCTION CALL
0651   07FD 07 DF 27      call back
0652   0800             ; break; 
0653   0800 0A 15 08      jmp _for15_exit ; for break
0654   0803 0A 06 08      jmp _if18_exit
0655   0806             _if18_exit:
0656   0806             ; print(", "); 
0657   0806             ; --- START FUNCTION CALL
0658   0806 26 62 50      mov b, _s15 ; ", "
0659   0809 FD AB         swp b
0660   080B D8            push b
0661   080C 07 69 3E      call print
0662   080F 51 02 00      add sp, 2
0663   0812             ; --- END FUNCTION CALL
0664   0812             _for15_update:
0665   0812 0A 2E 07      jmp _for15_cond
0666   0815             _for15_exit:
0667   0815             ; print("\n"); 
0668   0815             ; --- START FUNCTION CALL
0669   0815 26 18 50      mov b, _s10 ; "\n"
0670   0818 FD AB         swp b
0671   081A D8            push b
0672   081B 07 69 3E      call print
0673   081E 51 02 00      add sp, 2
0674   0821             ; --- END FUNCTION CALL
0675   0821 0A 24 08      jmp _if14_exit
0676   0824             _if14_exit:
0677   0824             _if9_exit:
0678   0824             _for7_update:
0679   0824 0A E4 05      jmp _for7_cond
0680   0827             _for7_exit:
0681   0827             ; print("Done.\n"); 
0682   0827             ; --- START FUNCTION CALL
0683   0827 26 6B 50      mov b, _s17 ; "Done.\n"
0684   082A FD AB         swp b
0685   082C D8            push b
0686   082D 07 69 3E      call print
0687   0830 51 02 00      add sp, 2
0688   0833             ; --- END FUNCTION CALL
0689   0833 F9            leave
0690   0834 09            ret
0691   0835             
0692   0835             parse_directive:
0693   0835 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0694   0838             ; get(); 
0695   0838             ; --- START FUNCTION CALL
0696   0838 07 6C 2B      call get
0697   083B             ; if(tok == ORG){ 
0698   083B             _if19_cond:
0699   083B 3B 7B 4E      mov d, _tok ; $tok
0700   083E 2A            mov b, [d]
0701   083F 38 00 00      mov c, 0
0702   0842             ; --- START RELATIONAL
0703   0842 D7            push a
0704   0843 11            mov a, b
0705   0844 FD 2E 01 00   mov32 cb, $1 ; enum element: ORG
0705   0848 00 00 
0706   084A B0            cmp a, b
0707   084B FD 71         seq ; ==
0708   084D E4            pop a
0709   084E             ; --- END RELATIONAL
0710   084E C0 00 00      cmp b, 0
0711   0851 C6 90 08      je _if19_else
0712   0854             _if19_TRUE:
0713   0854             ; get(); 
0714   0854             ; --- START FUNCTION CALL
0715   0854 07 6C 2B      call get
0716   0857             ; if(toktype != INTEGER_CONST) error("Integer constant expected in .org directive."); 
0717   0857             _if20_cond:
0718   0857 3B 7D 4E      mov d, _toktype ; $toktype
0719   085A 2A            mov b, [d]
0720   085B 38 00 00      mov c, 0
0721   085E             ; --- START RELATIONAL
0722   085E D7            push a
0723   085F 11            mov a, b
0724   0860 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0724   0864 00 00 
0725   0866 B0            cmp a, b
0726   0867 FD 72         sneq ; !=
0727   0869 E4            pop a
0728   086A             ; --- END RELATIONAL
0729   086A C0 00 00      cmp b, 0
0730   086D C6 7F 08      je _if20_exit
0731   0870             _if20_TRUE:
0732   0870             ; error("Integer constant expected in .org directive."); 
0733   0870             ; --- START FUNCTION CALL
0734   0870 26 72 50      mov b, _s18 ; "Integer constant expected in .org directive."
0735   0873 FD AB         swp b
0736   0875 D8            push b
0737   0876 07 72 39      call error
0738   0879 51 02 00      add sp, 2
0739   087C             ; --- END FUNCTION CALL
0740   087C 0A 7F 08      jmp _if20_exit
0741   087F             _if20_exit:
0742   087F             ; _org = int_const; 
0743   087F 3B 76 4E      mov d, __org ; $_org
0744   0882 DA            push d
0745   0883 3B C1 4F      mov d, _int_const ; $int_const
0746   0886 2A            mov b, [d]
0747   0887 38 00 00      mov c, 0
0748   088A E7            pop d
0749   088B FD 43         mov [d], b
0750   088D 0A 1E 0A      jmp _if19_exit
0751   0890             _if19_else:
0752   0890             ; if(tok == DB){ 
0753   0890             _if21_cond:
0754   0890 3B 7B 4E      mov d, _tok ; $tok
0755   0893 2A            mov b, [d]
0756   0894 38 00 00      mov c, 0
0757   0897             ; --- START RELATIONAL
0758   0897 D7            push a
0759   0898 11            mov a, b
0760   0899 FD 2E 06 00   mov32 cb, $6 ; enum element: DB
0760   089D 00 00 
0761   089F B0            cmp a, b
0762   08A0 FD 71         seq ; ==
0763   08A2 E4            pop a
0764   08A3             ; --- END RELATIONAL
0765   08A3 C0 00 00      cmp b, 0
0766   08A6 C6 4C 09      je _if21_else
0767   08A9             _if21_TRUE:
0768   08A9             ; for(;;){ 
0769   08A9             _for22_init:
0770   08A9             _for22_cond:
0771   08A9             _for22_block:
0772   08A9             ; get(); 
0773   08A9             ; --- START FUNCTION CALL
0774   08A9 07 6C 2B      call get
0775   08AC             ; if(toktype == CHAR_CONST){ 
0776   08AC             _if23_cond:
0777   08AC 3B 7D 4E      mov d, _toktype ; $toktype
0778   08AF 2A            mov b, [d]
0779   08B0 38 00 00      mov c, 0
0780   08B3             ; --- START RELATIONAL
0781   08B3 D7            push a
0782   08B4 11            mov a, b
0783   08B5 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0783   08B9 00 00 
0784   08BB B0            cmp a, b
0785   08BC FD 71         seq ; ==
0786   08BE E4            pop a
0787   08BF             ; --- END RELATIONAL
0788   08BF C0 00 00      cmp b, 0
0789   08C2 C6 ED 08      je _if23_else
0790   08C5             _if23_TRUE:
0791   08C5             ; emit_byte(string_const[0], emit_override); 
0792   08C5             ; --- START FUNCTION CALL
0793   08C5 FA 05 00      lea d, [bp + 5] ; $emit_override
0794   08C8 32            mov bl, [d]
0795   08C9 A7 00         mov bh, 0
0796   08CB 38 00 00      mov c, 0
0797   08CE DD            push bl
0798   08CF 3B C1 4E      mov d, _string_const_data ; $string_const
0799   08D2 D7            push a
0800   08D3 DA            push d
0801   08D4 FD 2E 00 00   mov32 cb, $00000000
0801   08D8 00 00 
0802   08DA E7            pop d
0803   08DB 5A            add d, b
0804   08DC E4            pop a
0805   08DD 32            mov bl, [d]
0806   08DE A7 00         mov bh, 0
0807   08E0 38 00 00      mov c, 0
0808   08E3 DD            push bl
0809   08E4 07 71 27      call emit_byte
0810   08E7 51 02 00      add sp, 2
0811   08EA             ; --- END FUNCTION CALL
0812   08EA 0A 21 09      jmp _if23_exit
0813   08ED             _if23_else:
0814   08ED             ; if(toktype == INTEGER_CONST){ 
0815   08ED             _if24_cond:
0816   08ED 3B 7D 4E      mov d, _toktype ; $toktype
0817   08F0 2A            mov b, [d]
0818   08F1 38 00 00      mov c, 0
0819   08F4             ; --- START RELATIONAL
0820   08F4 D7            push a
0821   08F5 11            mov a, b
0822   08F6 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0822   08FA 00 00 
0823   08FC B0            cmp a, b
0824   08FD FD 71         seq ; ==
0825   08FF E4            pop a
0826   0900             ; --- END RELATIONAL
0827   0900 C0 00 00      cmp b, 0
0828   0903 C6 21 09      je _if24_exit
0829   0906             _if24_TRUE:
0830   0906             ; emit_byte(int_const, emit_override); 
0831   0906             ; --- START FUNCTION CALL
0832   0906 FA 05 00      lea d, [bp + 5] ; $emit_override
0833   0909 32            mov bl, [d]
0834   090A A7 00         mov bh, 0
0835   090C 38 00 00      mov c, 0
0836   090F DD            push bl
0837   0910 3B C1 4F      mov d, _int_const ; $int_const
0838   0913 2A            mov b, [d]
0839   0914 38 00 00      mov c, 0
0840   0917 DD            push bl
0841   0918 07 71 27      call emit_byte
0842   091B 51 02 00      add sp, 2
0843   091E             ; --- END FUNCTION CALL
0844   091E 0A 21 09      jmp _if24_exit
0845   0921             _if24_exit:
0846   0921             _if23_exit:
0847   0921             ; get(); 
0848   0921             ; --- START FUNCTION CALL
0849   0921 07 6C 2B      call get
0850   0924             ; if(tok != COMMA){ 
0851   0924             _if25_cond:
0852   0924 3B 7B 4E      mov d, _tok ; $tok
0853   0927 2A            mov b, [d]
0854   0928 38 00 00      mov c, 0
0855   092B             ; --- START RELATIONAL
0856   092B D7            push a
0857   092C 11            mov a, b
0858   092D FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0858   0931 00 00 
0859   0933 B0            cmp a, b
0860   0934 FD 72         sneq ; !=
0861   0936 E4            pop a
0862   0937             ; --- END RELATIONAL
0863   0937 C0 00 00      cmp b, 0
0864   093A C6 46 09      je _if25_exit
0865   093D             _if25_TRUE:
0866   093D             ; back(); 
0867   093D             ; --- START FUNCTION CALL
0868   093D 07 DF 27      call back
0869   0940             ; break; 
0870   0940 0A 49 09      jmp _for22_exit ; for break
0871   0943 0A 46 09      jmp _if25_exit
0872   0946             _if25_exit:
0873   0946             _for22_update:
0874   0946 0A A9 08      jmp _for22_cond
0875   0949             _for22_exit:
0876   0949 0A 1E 0A      jmp _if21_exit
0877   094C             _if21_else:
0878   094C             ; if(tok == DW){ 
0879   094C             _if26_cond:
0880   094C 3B 7B 4E      mov d, _tok ; $tok
0881   094F 2A            mov b, [d]
0882   0950 38 00 00      mov c, 0
0883   0953             ; --- START RELATIONAL
0884   0953 D7            push a
0885   0954 11            mov a, b
0886   0955 FD 2E 07 00   mov32 cb, $7 ; enum element: DW
0886   0959 00 00 
0887   095B B0            cmp a, b
0888   095C FD 71         seq ; ==
0889   095E E4            pop a
0890   095F             ; --- END RELATIONAL
0891   095F C0 00 00      cmp b, 0
0892   0962 C6 1E 0A      je _if26_exit
0893   0965             _if26_TRUE:
0894   0965             ; for(;;){ 
0895   0965             _for27_init:
0896   0965             _for27_cond:
0897   0965             _for27_block:
0898   0965             ; get(); 
0899   0965             ; --- START FUNCTION CALL
0900   0965 07 6C 2B      call get
0901   0968             ; if(toktype == CHAR_CONST){ 
0902   0968             _if28_cond:
0903   0968 3B 7D 4E      mov d, _toktype ; $toktype
0904   096B 2A            mov b, [d]
0905   096C 38 00 00      mov c, 0
0906   096F             ; --- START RELATIONAL
0907   096F D7            push a
0908   0970 11            mov a, b
0909   0971 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0909   0975 00 00 
0910   0977 B0            cmp a, b
0911   0978 FD 71         seq ; ==
0912   097A E4            pop a
0913   097B             ; --- END RELATIONAL
0914   097B C0 00 00      cmp b, 0
0915   097E C6 C0 09      je _if28_else
0916   0981             _if28_TRUE:
0917   0981             ; emit_byte(string_const[0], emit_override); 
0918   0981             ; --- START FUNCTION CALL
0919   0981 FA 05 00      lea d, [bp + 5] ; $emit_override
0920   0984 32            mov bl, [d]
0921   0985 A7 00         mov bh, 0
0922   0987 38 00 00      mov c, 0
0923   098A DD            push bl
0924   098B 3B C1 4E      mov d, _string_const_data ; $string_const
0925   098E D7            push a
0926   098F DA            push d
0927   0990 FD 2E 00 00   mov32 cb, $00000000
0927   0994 00 00 
0928   0996 E7            pop d
0929   0997 5A            add d, b
0930   0998 E4            pop a
0931   0999 32            mov bl, [d]
0932   099A A7 00         mov bh, 0
0933   099C 38 00 00      mov c, 0
0934   099F DD            push bl
0935   09A0 07 71 27      call emit_byte
0936   09A3 51 02 00      add sp, 2
0937   09A6             ; --- END FUNCTION CALL
0938   09A6             ; emit_byte(0, emit_override); 
0939   09A6             ; --- START FUNCTION CALL
0940   09A6 FA 05 00      lea d, [bp + 5] ; $emit_override
0941   09A9 32            mov bl, [d]
0942   09AA A7 00         mov bh, 0
0943   09AC 38 00 00      mov c, 0
0944   09AF DD            push bl
0945   09B0 FD 2E 00 00   mov32 cb, $00000000
0945   09B4 00 00 
0946   09B6 DD            push bl
0947   09B7 07 71 27      call emit_byte
0948   09BA 51 02 00      add sp, 2
0949   09BD             ; --- END FUNCTION CALL
0950   09BD 0A F3 09      jmp _if28_exit
0951   09C0             _if28_else:
0952   09C0             ; if(toktype == INTEGER_CONST){ 
0953   09C0             _if29_cond:
0954   09C0 3B 7D 4E      mov d, _toktype ; $toktype
0955   09C3 2A            mov b, [d]
0956   09C4 38 00 00      mov c, 0
0957   09C7             ; --- START RELATIONAL
0958   09C7 D7            push a
0959   09C8 11            mov a, b
0960   09C9 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0960   09CD 00 00 
0961   09CF B0            cmp a, b
0962   09D0 FD 71         seq ; ==
0963   09D2 E4            pop a
0964   09D3             ; --- END RELATIONAL
0965   09D3 C0 00 00      cmp b, 0
0966   09D6 C6 F3 09      je _if29_exit
0967   09D9             _if29_TRUE:
0968   09D9             ; emit_word(int_const, 0); 
0969   09D9             ; --- START FUNCTION CALL
0970   09D9 FD 2E 00 00   mov32 cb, $00000000
0970   09DD 00 00 
0971   09DF DD            push bl
0972   09E0 3B C1 4F      mov d, _int_const ; $int_const
0973   09E3 2A            mov b, [d]
0974   09E4 38 00 00      mov c, 0
0975   09E7 FD AB         swp b
0976   09E9 D8            push b
0977   09EA 07 A9 27      call emit_word
0978   09ED 51 03 00      add sp, 3
0979   09F0             ; --- END FUNCTION CALL
0980   09F0 0A F3 09      jmp _if29_exit
0981   09F3             _if29_exit:
0982   09F3             _if28_exit:
0983   09F3             ; get(); 
0984   09F3             ; --- START FUNCTION CALL
0985   09F3 07 6C 2B      call get
0986   09F6             ; if(tok != COMMA){ 
0987   09F6             _if30_cond:
0988   09F6 3B 7B 4E      mov d, _tok ; $tok
0989   09F9 2A            mov b, [d]
0990   09FA 38 00 00      mov c, 0
0991   09FD             ; --- START RELATIONAL
0992   09FD D7            push a
0993   09FE 11            mov a, b
0994   09FF FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0994   0A03 00 00 
0995   0A05 B0            cmp a, b
0996   0A06 FD 72         sneq ; !=
0997   0A08 E4            pop a
0998   0A09             ; --- END RELATIONAL
0999   0A09 C0 00 00      cmp b, 0
1000   0A0C C6 18 0A      je _if30_exit
1001   0A0F             _if30_TRUE:
1002   0A0F             ; back(); 
1003   0A0F             ; --- START FUNCTION CALL
1004   0A0F 07 DF 27      call back
1005   0A12             ; break; 
1006   0A12 0A 1B 0A      jmp _for27_exit ; for break
1007   0A15 0A 18 0A      jmp _if30_exit
1008   0A18             _if30_exit:
1009   0A18             _for27_update:
1010   0A18 0A 65 09      jmp _for27_cond
1011   0A1B             _for27_exit:
1012   0A1B 0A 1E 0A      jmp _if26_exit
1013   0A1E             _if26_exit:
1014   0A1E             _if21_exit:
1015   0A1E             _if19_exit:
1016   0A1E F9            leave
1017   0A1F 09            ret
1018   0A20             
1019   0A20             label_directive_scan:
1020   0A20 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1021   0A23             ; char *temp_prog; 
1022   0A23 52 02 00      sub sp, 2
1023   0A26             ; int i; 
1024   0A26 52 02 00      sub sp, 2
1025   0A29             ; prog = program; 
1026   0A29 3B 7F 4E      mov d, _prog ; $prog
1027   0A2C DA            push d
1028   0A2D 3B C3 4F      mov d, _program ; $program
1029   0A30 2A            mov b, [d]
1030   0A31 38 00 00      mov c, 0
1031   0A34 E7            pop d
1032   0A35 FD 43         mov [d], b
1033   0A37             ; bin_p = bin_out + _org; 
1034   0A37 3B C7 4F      mov d, _bin_p ; $bin_p
1035   0A3A DA            push d
1036   0A3B 3B C5 4F      mov d, _bin_out ; $bin_out
1037   0A3E 2A            mov b, [d]
1038   0A3F 38 00 00      mov c, 0
1039   0A42             ; --- START TERMS
1040   0A42 D7            push a
1041   0A43 11            mov a, b
1042   0A44 3B 76 4E      mov d, __org ; $_org
1043   0A47 2A            mov b, [d]
1044   0A48 38 00 00      mov c, 0
1045   0A4B 56            add b, a
1046   0A4C E4            pop a
1047   0A4D             ; --- END TERMS
1048   0A4D E7            pop d
1049   0A4E FD 43         mov [d], b
1050   0A50             ; pc = _org; 
1051   0A50 3B 78 4E      mov d, _pc ; $pc
1052   0A53 DA            push d
1053   0A54 3B 76 4E      mov d, __org ; $_org
1054   0A57 2A            mov b, [d]
1055   0A58 38 00 00      mov c, 0
1056   0A5B E7            pop d
1057   0A5C FD 43         mov [d], b
1058   0A5E             ; print("Parsing labels and directives...\n"); 
1059   0A5E             ; --- START FUNCTION CALL
1060   0A5E 26 9F 50      mov b, _s19 ; "Parsing labels and directives...\n"
1061   0A61 FD AB         swp b
1062   0A63 D8            push b
1063   0A64 07 69 3E      call print
1064   0A67 51 02 00      add sp, 2
1065   0A6A             ; --- END FUNCTION CALL
1066   0A6A             ; for(;;){ 
1067   0A6A             _for31_init:
1068   0A6A             _for31_cond:
1069   0A6A             _for31_block:
1070   0A6A             ; get(); back(); 
1071   0A6A             ; --- START FUNCTION CALL
1072   0A6A 07 6C 2B      call get
1073   0A6D             ; back(); 
1074   0A6D             ; --- START FUNCTION CALL
1075   0A6D 07 DF 27      call back
1076   0A70             ; temp_prog = prog; 
1077   0A70 FA FF FF      lea d, [bp + -1] ; $temp_prog
1078   0A73 DA            push d
1079   0A74 3B 7F 4E      mov d, _prog ; $prog
1080   0A77 2A            mov b, [d]
1081   0A78 38 00 00      mov c, 0
1082   0A7B E7            pop d
1083   0A7C FD 43         mov [d], b
1084   0A7E             ; get(); 
1085   0A7E             ; --- START FUNCTION CALL
1086   0A7E 07 6C 2B      call get
1087   0A81             ; if(toktype == END) break; 
1088   0A81             _if32_cond:
1089   0A81 3B 7D 4E      mov d, _toktype ; $toktype
1090   0A84 2A            mov b, [d]
1091   0A85 38 00 00      mov c, 0
1092   0A88             ; --- START RELATIONAL
1093   0A88 D7            push a
1094   0A89 11            mov a, b
1095   0A8A FD 2E 07 00   mov32 cb, $7 ; enum element: END
1095   0A8E 00 00 
1096   0A90 B0            cmp a, b
1097   0A91 FD 71         seq ; ==
1098   0A93 E4            pop a
1099   0A94             ; --- END RELATIONAL
1100   0A94 C0 00 00      cmp b, 0
1101   0A97 C6 A0 0A      je _if32_exit
1102   0A9A             _if32_TRUE:
1103   0A9A             ; break; 
1104   0A9A 0A 6A 0B      jmp _for31_exit ; for break
1105   0A9D 0A A0 0A      jmp _if32_exit
1106   0AA0             _if32_exit:
1107   0AA0             ; if(tok == DOT){ 
1108   0AA0             _if33_cond:
1109   0AA0 3B 7B 4E      mov d, _tok ; $tok
1110   0AA3 2A            mov b, [d]
1111   0AA4 38 00 00      mov c, 0
1112   0AA7             ; --- START RELATIONAL
1113   0AA7 D7            push a
1114   0AA8 11            mov a, b
1115   0AA9 FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
1115   0AAD 00 00 
1116   0AAF B0            cmp a, b
1117   0AB0 FD 71         seq ; ==
1118   0AB2 E4            pop a
1119   0AB3             ; --- END RELATIONAL
1120   0AB3 C0 00 00      cmp b, 0
1121   0AB6 C6 E8 0A      je _if33_else
1122   0AB9             _if33_TRUE:
1123   0AB9             ; get(); 
1124   0AB9             ; --- START FUNCTION CALL
1125   0AB9 07 6C 2B      call get
1126   0ABC             ; if(is_directive(token)){ 
1127   0ABC             _if34_cond:
1128   0ABC             ; --- START FUNCTION CALL
1129   0ABC 3B 81 4E      mov d, _token_data ; $token
1130   0ABF 2D            mov b, d
1131   0AC0 38 00 00      mov c, 0
1132   0AC3 FD AB         swp b
1133   0AC5 D8            push b
1134   0AC6 07 85 21      call is_directive
1135   0AC9 51 02 00      add sp, 2
1136   0ACC             ; --- END FUNCTION CALL
1137   0ACC C0 00 00      cmp b, 0
1138   0ACF C6 E5 0A      je _if34_exit
1139   0AD2             _if34_TRUE:
1140   0AD2             ; back(); 
1141   0AD2             ; --- START FUNCTION CALL
1142   0AD2 07 DF 27      call back
1143   0AD5             ; parse_directive(1); 
1144   0AD5             ; --- START FUNCTION CALL
1145   0AD5 FD 2E 01 00   mov32 cb, $00000001
1145   0AD9 00 00 
1146   0ADB DD            push bl
1147   0ADC 07 35 08      call parse_directive
1148   0ADF 51 01 00      add sp, 1
1149   0AE2             ; --- END FUNCTION CALL
1150   0AE2 0A E5 0A      jmp _if34_exit
1151   0AE5             _if34_exit:
1152   0AE5 0A 67 0B      jmp _if33_exit
1153   0AE8             _if33_else:
1154   0AE8             ; if(toktype == IDENTIFIER){ 
1155   0AE8             _if35_cond:
1156   0AE8 3B 7D 4E      mov d, _toktype ; $toktype
1157   0AEB 2A            mov b, [d]
1158   0AEC 38 00 00      mov c, 0
1159   0AEF             ; --- START RELATIONAL
1160   0AEF D7            push a
1161   0AF0 11            mov a, b
1162   0AF1 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1162   0AF5 00 00 
1163   0AF7 B0            cmp a, b
1164   0AF8 FD 71         seq ; ==
1165   0AFA E4            pop a
1166   0AFB             ; --- END RELATIONAL
1167   0AFB C0 00 00      cmp b, 0
1168   0AFE C6 67 0B      je _if35_exit
1169   0B01             _if35_TRUE:
1170   0B01             ; get(); 
1171   0B01             ; --- START FUNCTION CALL
1172   0B01 07 6C 2B      call get
1173   0B04             ; if(tok == COLON){ 
1174   0B04             _if36_cond:
1175   0B04 3B 7B 4E      mov d, _tok ; $tok
1176   0B07 2A            mov b, [d]
1177   0B08 38 00 00      mov c, 0
1178   0B0B             ; --- START RELATIONAL
1179   0B0B D7            push a
1180   0B0C 11            mov a, b
1181   0B0D FD 2E 0D 00   mov32 cb, $d ; enum element: COLON
1181   0B11 00 00 
1182   0B13 B0            cmp a, b
1183   0B14 FD 71         seq ; ==
1184   0B16 E4            pop a
1185   0B17             ; --- END RELATIONAL
1186   0B17 C0 00 00      cmp b, 0
1187   0B1A C6 3D 0B      je _if36_else
1188   0B1D             _if36_TRUE:
1189   0B1D             ; prog = temp_prog; 
1190   0B1D 3B 7F 4E      mov d, _prog ; $prog
1191   0B20 DA            push d
1192   0B21 FA FF FF      lea d, [bp + -1] ; $temp_prog
1193   0B24 2A            mov b, [d]
1194   0B25 38 00 00      mov c, 0
1195   0B28 E7            pop d
1196   0B29 FD 43         mov [d], b
1197   0B2B             ; parse_label(); 
1198   0B2B             ; --- START FUNCTION CALL
1199   0B2B 07 BB 21      call parse_label
1200   0B2E             ; print("."); 
1201   0B2E             ; --- START FUNCTION CALL
1202   0B2E 26 C1 50      mov b, _s20 ; "."
1203   0B31 FD AB         swp b
1204   0B33 D8            push b
1205   0B34 07 69 3E      call print
1206   0B37 51 02 00      add sp, 2
1207   0B3A             ; --- END FUNCTION CALL
1208   0B3A 0A 64 0B      jmp _if36_exit
1209   0B3D             _if36_else:
1210   0B3D             ; prog = temp_prog; 
1211   0B3D 3B 7F 4E      mov d, _prog ; $prog
1212   0B40 DA            push d
1213   0B41 FA FF FF      lea d, [bp + -1] ; $temp_prog
1214   0B44 2A            mov b, [d]
1215   0B45 38 00 00      mov c, 0
1216   0B48 E7            pop d
1217   0B49 FD 43         mov [d], b
1218   0B4B             ; parse_instr(1);       
1219   0B4B             ; --- START FUNCTION CALL
1220   0B4B FD 2E 01 00   mov32 cb, $00000001
1220   0B4F 00 00 
1221   0B51 DD            push bl
1222   0B52 07 76 13      call parse_instr
1223   0B55 51 01 00      add sp, 1
1224   0B58             ; --- END FUNCTION CALL
1225   0B58             ; print("."); 
1226   0B58             ; --- START FUNCTION CALL
1227   0B58 26 C1 50      mov b, _s20 ; "."
1228   0B5B FD AB         swp b
1229   0B5D D8            push b
1230   0B5E 07 69 3E      call print
1231   0B61 51 02 00      add sp, 2
1232   0B64             ; --- END FUNCTION CALL
1233   0B64             _if36_exit:
1234   0B64 0A 67 0B      jmp _if35_exit
1235   0B67             _if35_exit:
1236   0B67             _if33_exit:
1237   0B67             _for31_update:
1238   0B67 0A 6A 0A      jmp _for31_cond
1239   0B6A             _for31_exit:
1240   0B6A             ; print("\nDone.\n"); 
1241   0B6A             ; --- START FUNCTION CALL
1242   0B6A 26 C3 50      mov b, _s21 ; "\nDone.\n"
1243   0B6D FD AB         swp b
1244   0B6F D8            push b
1245   0B70 07 69 3E      call print
1246   0B73 51 02 00      add sp, 2
1247   0B76             ; --- END FUNCTION CALL
1248   0B76             ; printf("Org: %s\n", _org); 
1249   0B76             ; --- START FUNCTION CALL
1250   0B76 3B 76 4E      mov d, __org ; $_org
1251   0B79 2A            mov b, [d]
1252   0B7A 38 00 00      mov c, 0
1253   0B7D FD AB         swp b
1254   0B7F D8            push b
1255   0B80 26 CB 50      mov b, _s22 ; "Org: %s\n"
1256   0B83 FD AB         swp b
1257   0B85 D8            push b
1258   0B86 07 99 42      call printf
1259   0B89 51 04 00      add sp, 4
1260   0B8C             ; --- END FUNCTION CALL
1261   0B8C             ; print("\nLabels list:\n"); 
1262   0B8C             ; --- START FUNCTION CALL
1263   0B8C 26 D4 50      mov b, _s23 ; "\nLabels list:\n"
1264   0B8F FD AB         swp b
1265   0B91 D8            push b
1266   0B92 07 69 3E      call print
1267   0B95 51 02 00      add sp, 2
1268   0B98             ; --- END FUNCTION CALL
1269   0B98             ; for(i = 0; label_table[i].name[0]; i++){ 
1270   0B98             _for37_init:
1271   0B98 FA FD FF      lea d, [bp + -3] ; $i
1272   0B9B DA            push d
1273   0B9C FD 2E 00 00   mov32 cb, $00000000
1273   0BA0 00 00 
1274   0BA2 E7            pop d
1275   0BA3 FD 43         mov [d], b
1276   0BA5             _for37_cond:
1277   0BA5 3B 56 4D      mov d, _label_table_data ; $label_table
1278   0BA8 D7            push a
1279   0BA9 DA            push d
1280   0BAA FA FD FF      lea d, [bp + -3] ; $i
1281   0BAD 2A            mov b, [d]
1282   0BAE 38 00 00      mov c, 0
1283   0BB1 E7            pop d
1284   0BB2 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1285   0BB6 E4            pop a
1286   0BB7 58 00 00      add d, 0
1287   0BBA D7            push a
1288   0BBB DA            push d
1289   0BBC FD 2E 00 00   mov32 cb, $00000000
1289   0BC0 00 00 
1290   0BC2 E7            pop d
1291   0BC3 5A            add d, b
1292   0BC4 E4            pop a
1293   0BC5 32            mov bl, [d]
1294   0BC6 A7 00         mov bh, 0
1295   0BC8 38 00 00      mov c, 0
1296   0BCB C0 00 00      cmp b, 0
1297   0BCE C6 28 0C      je _for37_exit
1298   0BD1             _for37_block:
1299   0BD1             ; printf("%s: %x\n", label_table[i].name, label_table[i].address); 
1300   0BD1             ; --- START FUNCTION CALL
1301   0BD1 3B 56 4D      mov d, _label_table_data ; $label_table
1302   0BD4 D7            push a
1303   0BD5 DA            push d
1304   0BD6 FA FD FF      lea d, [bp + -3] ; $i
1305   0BD9 2A            mov b, [d]
1306   0BDA 38 00 00      mov c, 0
1307   0BDD E7            pop d
1308   0BDE FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1309   0BE2 E4            pop a
1310   0BE3 58 10 00      add d, 16
1311   0BE6 2A            mov b, [d]
1312   0BE7 38 00 00      mov c, 0
1313   0BEA FD AB         swp b
1314   0BEC D8            push b
1315   0BED 3B 56 4D      mov d, _label_table_data ; $label_table
1316   0BF0 D7            push a
1317   0BF1 DA            push d
1318   0BF2 FA FD FF      lea d, [bp + -3] ; $i
1319   0BF5 2A            mov b, [d]
1320   0BF6 38 00 00      mov c, 0
1321   0BF9 E7            pop d
1322   0BFA FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1323   0BFE E4            pop a
1324   0BFF 58 00 00      add d, 0
1325   0C02 2D            mov b, d
1326   0C03 38 00 00      mov c, 0
1327   0C06 FD AB         swp b
1328   0C08 D8            push b
1329   0C09 26 E3 50      mov b, _s24 ; "%s: %x\n"
1330   0C0C FD AB         swp b
1331   0C0E D8            push b
1332   0C0F 07 99 42      call printf
1333   0C12 51 06 00      add sp, 6
1334   0C15             ; --- END FUNCTION CALL
1335   0C15             _for37_update:
1336   0C15 FA FD FF      lea d, [bp + -3] ; $i
1337   0C18 2A            mov b, [d]
1338   0C19 38 00 00      mov c, 0
1339   0C1C 11            mov a, b
1340   0C1D FD 77         inc b
1341   0C1F FA FD FF      lea d, [bp + -3] ; $i
1342   0C22 FD 43         mov [d], b
1343   0C24 27            mov b, a
1344   0C25 0A A5 0B      jmp _for37_cond
1345   0C28             _for37_exit:
1346   0C28             ; print("\n"); 
1347   0C28             ; --- START FUNCTION CALL
1348   0C28 26 18 50      mov b, _s10 ; "\n"
1349   0C2B FD AB         swp b
1350   0C2D D8            push b
1351   0C2E 07 69 3E      call print
1352   0C31 51 02 00      add sp, 2
1353   0C34             ; --- END FUNCTION CALL
1354   0C34 F9            leave
1355   0C35 09            ret
1356   0C36             
1357   0C36             label_parse_instr:
1358   0C36 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1359   0C39             ; char opcode[32]; 
1360   0C39 52 20 00      sub sp, 32
1361   0C3C             ; char code_line[64]; 
1362   0C3C 52 40 00      sub sp, 64
1363   0C3F             ; struct t_opcode op; 
1364   0C3F 52 1A 00      sub sp, 26
1365   0C42             ; int num_operands, num_operandsexp; 
1366   0C42 52 02 00      sub sp, 2
1367   0C45 52 02 00      sub sp, 2
1368   0C48             ; int i, j; 
1369   0C48 52 02 00      sub sp, 2
1370   0C4B 52 02 00      sub sp, 2
1371   0C4E             ; char operand_types[3]; // operand types and locations 
1372   0C4E 52 03 00      sub sp, 3
1373   0C51             ; int old_pc; 
1374   0C51 52 02 00      sub sp, 2
1375   0C54             ; char has_operands; 
1376   0C54 52 01 00      sub sp, 1
1377   0C57             ; old_pc = pc; 
1378   0C57 FA 7A FF      lea d, [bp + -134] ; $old_pc
1379   0C5A DA            push d
1380   0C5B 3B 78 4E      mov d, _pc ; $pc
1381   0C5E 2A            mov b, [d]
1382   0C5F 38 00 00      mov c, 0
1383   0C62 E7            pop d
1384   0C63 FD 43         mov [d], b
1385   0C65             ; get_line(); 
1386   0C65             ; --- START FUNCTION CALL
1387   0C65 07 4F 2A      call get_line
1388   0C68             ; push_prog(); 
1389   0C68             ; --- START FUNCTION CALL
1390   0C68 07 D0 39      call push_prog
1391   0C6B             ; strcpy(code_line, string_const); 
1392   0C6B             ; --- START FUNCTION CALL
1393   0C6B 3B C1 4E      mov d, _string_const_data ; $string_const
1394   0C6E 2D            mov b, d
1395   0C6F 38 00 00      mov c, 0
1396   0C72 FD AB         swp b
1397   0C74 D8            push b
1398   0C75 FA A1 FF      lea d, [bp + -95] ; $code_line
1399   0C78 2D            mov b, d
1400   0C79 38 00 00      mov c, 0
1401   0C7C FD AB         swp b
1402   0C7E D8            push b
1403   0C7F 07 9F 4B      call strcpy
1404   0C82 51 04 00      add sp, 4
1405   0C85             ; --- END FUNCTION CALL
1406   0C85             ; has_operands = 0; 
1407   0C85 FA 79 FF      lea d, [bp + -135] ; $has_operands
1408   0C88 DA            push d
1409   0C89 FD 2E 00 00   mov32 cb, $00000000
1409   0C8D 00 00 
1410   0C8F E7            pop d
1411   0C90 FD 3E         mov [d], bl
1412   0C92             ; prog = code_line; 
1413   0C92 3B 7F 4E      mov d, _prog ; $prog
1414   0C95 DA            push d
1415   0C96 FA A1 FF      lea d, [bp + -95] ; $code_line
1416   0C99 2D            mov b, d
1417   0C9A 38 00 00      mov c, 0
1418   0C9D E7            pop d
1419   0C9E FD 43         mov [d], b
1420   0CA0             ; get(); // get main opcode 
1421   0CA0             ; --- START FUNCTION CALL
1422   0CA0 07 6C 2B      call get
1423   0CA3             ; for(;;){ 
1424   0CA3             _for38_init:
1425   0CA3             _for38_cond:
1426   0CA3             _for38_block:
1427   0CA3             ; get(); 
1428   0CA3             ; --- START FUNCTION CALL
1429   0CA3 07 6C 2B      call get
1430   0CA6             ; if(toktype == END) break; 
1431   0CA6             _if39_cond:
1432   0CA6 3B 7D 4E      mov d, _toktype ; $toktype
1433   0CA9 2A            mov b, [d]
1434   0CAA 38 00 00      mov c, 0
1435   0CAD             ; --- START RELATIONAL
1436   0CAD D7            push a
1437   0CAE 11            mov a, b
1438   0CAF FD 2E 07 00   mov32 cb, $7 ; enum element: END
1438   0CB3 00 00 
1439   0CB5 B0            cmp a, b
1440   0CB6 FD 71         seq ; ==
1441   0CB8 E4            pop a
1442   0CB9             ; --- END RELATIONAL
1443   0CB9 C0 00 00      cmp b, 0
1444   0CBC C6 C5 0C      je _if39_exit
1445   0CBF             _if39_TRUE:
1446   0CBF             ; break; 
1447   0CBF 0A 21 0D      jmp _for38_exit ; for break
1448   0CC2 0A C5 0C      jmp _if39_exit
1449   0CC5             _if39_exit:
1450   0CC5             ; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1451   0CC5             _if40_cond:
1452   0CC5 3B 7D 4E      mov d, _toktype ; $toktype
1453   0CC8 2A            mov b, [d]
1454   0CC9 38 00 00      mov c, 0
1455   0CCC             ; --- START RELATIONAL
1456   0CCC D7            push a
1457   0CCD 11            mov a, b
1458   0CCE FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
1458   0CD2 00 00 
1459   0CD4 B0            cmp a, b
1460   0CD5 FD 71         seq ; ==
1461   0CD7 E4            pop a
1462   0CD8             ; --- END RELATIONAL
1463   0CD8             ; --- START LOGICAL OR
1464   0CD8 D7            push a
1465   0CD9 11            mov a, b
1466   0CDA 3B 7D 4E      mov d, _toktype ; $toktype
1467   0CDD 2A            mov b, [d]
1468   0CDE 38 00 00      mov c, 0
1469   0CE1             ; --- START RELATIONAL
1470   0CE1 D7            push a
1471   0CE2 11            mov a, b
1472   0CE3 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1472   0CE7 00 00 
1473   0CE9 B0            cmp a, b
1474   0CEA FD 71         seq ; ==
1475   0CEC E4            pop a
1476   0CED             ; --- END RELATIONAL
1477   0CED             ; --- START LOGICAL AND
1478   0CED D7            push a
1479   0CEE 11            mov a, b
1480   0CEF             ; --- START FUNCTION CALL
1481   0CEF 3B 81 4E      mov d, _token_data ; $token
1482   0CF2 2D            mov b, d
1483   0CF3 38 00 00      mov c, 0
1484   0CF6 FD AB         swp b
1485   0CF8 D8            push b
1486   0CF9 07 10 1F      call is_reserved
1487   0CFC 51 02 00      add sp, 2
1488   0CFF             ; --- END FUNCTION CALL
1489   0CFF FD A7         sand a, b
1490   0D01 E4            pop a
1491   0D02             ; --- END LOGICAL AND
1492   0D02 FD A8         sor a, b ; ||
1493   0D04 E4            pop a
1494   0D05             ; --- END LOGICAL OR
1495   0D05 C0 00 00      cmp b, 0
1496   0D08 C6 1E 0D      je _if40_exit
1497   0D0B             _if40_TRUE:
1498   0D0B             ; has_operands = 1; 
1499   0D0B FA 79 FF      lea d, [bp + -135] ; $has_operands
1500   0D0E DA            push d
1501   0D0F FD 2E 01 00   mov32 cb, $00000001
1501   0D13 00 00 
1502   0D15 E7            pop d
1503   0D16 FD 3E         mov [d], bl
1504   0D18             ; break; 
1505   0D18 0A 21 0D      jmp _for38_exit ; for break
1506   0D1B 0A 1E 0D      jmp _if40_exit
1507   0D1E             _if40_exit:
1508   0D1E             _for38_update:
1509   0D1E 0A A3 0C      jmp _for38_cond
1510   0D21             _for38_exit:
1511   0D21             ; opcode[0] = '\0'; 
1512   0D21 FA E1 FF      lea d, [bp + -31] ; $opcode
1513   0D24 D7            push a
1514   0D25 DA            push d
1515   0D26 FD 2E 00 00   mov32 cb, $00000000
1515   0D2A 00 00 
1516   0D2C E7            pop d
1517   0D2D 5A            add d, b
1518   0D2E E4            pop a
1519   0D2F DA            push d
1520   0D30 FD 2E 00 00   mov32 cb, $00000000
1520   0D34 00 00 
1521   0D36 E7            pop d
1522   0D37 FD 3E         mov [d], bl
1523   0D39             ; prog = code_line; 
1524   0D39 3B 7F 4E      mov d, _prog ; $prog
1525   0D3C DA            push d
1526   0D3D FA A1 FF      lea d, [bp + -95] ; $code_line
1527   0D40 2D            mov b, d
1528   0D41 38 00 00      mov c, 0
1529   0D44 E7            pop d
1530   0D45 FD 43         mov [d], b
1531   0D47             ; if(!has_operands){ 
1532   0D47             _if41_cond:
1533   0D47 FA 79 FF      lea d, [bp + -135] ; $has_operands
1534   0D4A 32            mov bl, [d]
1535   0D4B A7 00         mov bh, 0
1536   0D4D 38 00 00      mov c, 0
1537   0D50 C0 00 00      cmp b, 0
1538   0D53 C6 67 0E      je _if41_else
1539   0D56             _if41_TRUE:
1540   0D56             ; get(); 
1541   0D56             ; --- START FUNCTION CALL
1542   0D56 07 6C 2B      call get
1543   0D59             ; strcpy(opcode, token); 
1544   0D59             ; --- START FUNCTION CALL
1545   0D59 3B 81 4E      mov d, _token_data ; $token
1546   0D5C 2D            mov b, d
1547   0D5D 38 00 00      mov c, 0
1548   0D60 FD AB         swp b
1549   0D62 D8            push b
1550   0D63 FA E1 FF      lea d, [bp + -31] ; $opcode
1551   0D66 2D            mov b, d
1552   0D67 38 00 00      mov c, 0
1553   0D6A FD AB         swp b
1554   0D6C D8            push b
1555   0D6D 07 9F 4B      call strcpy
1556   0D70 51 04 00      add sp, 4
1557   0D73             ; --- END FUNCTION CALL
1558   0D73             ; get();  
1559   0D73             ; --- START FUNCTION CALL
1560   0D73 07 6C 2B      call get
1561   0D76             ; if(toktype == END){ 
1562   0D76             _if42_cond:
1563   0D76 3B 7D 4E      mov d, _toktype ; $toktype
1564   0D79 2A            mov b, [d]
1565   0D7A 38 00 00      mov c, 0
1566   0D7D             ; --- START RELATIONAL
1567   0D7D D7            push a
1568   0D7E 11            mov a, b
1569   0D7F FD 2E 07 00   mov32 cb, $7 ; enum element: END
1569   0D83 00 00 
1570   0D85 B0            cmp a, b
1571   0D86 FD 71         seq ; ==
1572   0D88 E4            pop a
1573   0D89             ; --- END RELATIONAL
1574   0D89 C0 00 00      cmp b, 0
1575   0D8C C6 A8 0D      je _if42_else
1576   0D8F             _if42_TRUE:
1577   0D8F             ; strcat(opcode, " ."); 
1578   0D8F             ; --- START FUNCTION CALL
1579   0D8F 26 EB 50      mov b, _s25 ; " ."
1580   0D92 FD AB         swp b
1581   0D94 D8            push b
1582   0D95 FA E1 FF      lea d, [bp + -31] ; $opcode
1583   0D98 2D            mov b, d
1584   0D99 38 00 00      mov c, 0
1585   0D9C FD AB         swp b
1586   0D9E D8            push b
1587   0D9F 07 19 4C      call strcat
1588   0DA2 51 04 00      add sp, 4
1589   0DA5             ; --- END FUNCTION CALL
1590   0DA5 0A 17 0E      jmp _if42_exit
1591   0DA8             _if42_else:
1592   0DA8             ; strcat(opcode, " "); 
1593   0DA8             ; --- START FUNCTION CALL
1594   0DA8 26 EE 50      mov b, _s26 ; " "
1595   0DAB FD AB         swp b
1596   0DAD D8            push b
1597   0DAE FA E1 FF      lea d, [bp + -31] ; $opcode
1598   0DB1 2D            mov b, d
1599   0DB2 38 00 00      mov c, 0
1600   0DB5 FD AB         swp b
1601   0DB7 D8            push b
1602   0DB8 07 19 4C      call strcat
1603   0DBB 51 04 00      add sp, 4
1604   0DBE             ; --- END FUNCTION CALL
1605   0DBE             ; strcat(opcode, token); 
1606   0DBE             ; --- START FUNCTION CALL
1607   0DBE 3B 81 4E      mov d, _token_data ; $token
1608   0DC1 2D            mov b, d
1609   0DC2 38 00 00      mov c, 0
1610   0DC5 FD AB         swp b
1611   0DC7 D8            push b
1612   0DC8 FA E1 FF      lea d, [bp + -31] ; $opcode
1613   0DCB 2D            mov b, d
1614   0DCC 38 00 00      mov c, 0
1615   0DCF FD AB         swp b
1616   0DD1 D8            push b
1617   0DD2 07 19 4C      call strcat
1618   0DD5 51 04 00      add sp, 4
1619   0DD8             ; --- END FUNCTION CALL
1620   0DD8             ; for(;;){ 
1621   0DD8             _for43_init:
1622   0DD8             _for43_cond:
1623   0DD8             _for43_block:
1624   0DD8             ; get(); 
1625   0DD8             ; --- START FUNCTION CALL
1626   0DD8 07 6C 2B      call get
1627   0DDB             ; if(toktype == END) break; 
1628   0DDB             _if44_cond:
1629   0DDB 3B 7D 4E      mov d, _toktype ; $toktype
1630   0DDE 2A            mov b, [d]
1631   0DDF 38 00 00      mov c, 0
1632   0DE2             ; --- START RELATIONAL
1633   0DE2 D7            push a
1634   0DE3 11            mov a, b
1635   0DE4 FD 2E 07 00   mov32 cb, $7 ; enum element: END
1635   0DE8 00 00 
1636   0DEA B0            cmp a, b
1637   0DEB FD 71         seq ; ==
1638   0DED E4            pop a
1639   0DEE             ; --- END RELATIONAL
1640   0DEE C0 00 00      cmp b, 0
1641   0DF1 C6 FA 0D      je _if44_exit
1642   0DF4             _if44_TRUE:
1643   0DF4             ; break; 
1644   0DF4 0A 17 0E      jmp _for43_exit ; for break
1645   0DF7 0A FA 0D      jmp _if44_exit
1646   0DFA             _if44_exit:
1647   0DFA             ; strcat(opcode, token); 
1648   0DFA             ; --- START FUNCTION CALL
1649   0DFA 3B 81 4E      mov d, _token_data ; $token
1650   0DFD 2D            mov b, d
1651   0DFE 38 00 00      mov c, 0
1652   0E01 FD AB         swp b
1653   0E03 D8            push b
1654   0E04 FA E1 FF      lea d, [bp + -31] ; $opcode
1655   0E07 2D            mov b, d
1656   0E08 38 00 00      mov c, 0
1657   0E0B FD AB         swp b
1658   0E0D D8            push b
1659   0E0E 07 19 4C      call strcat
1660   0E11 51 04 00      add sp, 4
1661   0E14             ; --- END FUNCTION CALL
1662   0E14             _for43_update:
1663   0E14 0A D8 0D      jmp _for43_cond
1664   0E17             _for43_exit:
1665   0E17             _if42_exit:
1666   0E17             ; op = search_opcode(opcode); 
1667   0E17 FA 87 FF      lea d, [bp + -121] ; $op
1668   0E1A DA            push d
1669   0E1B             ; --- START FUNCTION CALL
1670   0E1B FA E1 FF      lea d, [bp + -31] ; $opcode
1671   0E1E 2D            mov b, d
1672   0E1F 38 00 00      mov c, 0
1673   0E22 FD AB         swp b
1674   0E24 D8            push b
1675   0E25 07 EE 23      call search_opcode
1676   0E28 51 02 00      add sp, 2
1677   0E2B             ; --- END FUNCTION CALL
1678   0E2B E7            pop d
1679   0E2C FD 28         mov si, b
1680   0E2E FD 50         mov di, d
1681   0E30 38 1A 00      mov c, 26
1682   0E33 FD F5         rep movsb
1683   0E35             ; if(op.opcode_type){ 
1684   0E35             _if45_cond:
1685   0E35 FA 87 FF      lea d, [bp + -121] ; $op
1686   0E38 58 19 00      add d, 25
1687   0E3B 32            mov bl, [d]
1688   0E3C A7 00         mov bh, 0
1689   0E3E 38 00 00      mov c, 0
1690   0E41 C0 00 00      cmp b, 0
1691   0E44 C6 57 0E      je _if45_exit
1692   0E47             _if45_TRUE:
1693   0E47             ; forwards(1); 
1694   0E47             ; --- START FUNCTION CALL
1695   0E47 FD 2E 01 00   mov32 cb, $00000001
1695   0E4B 00 00 
1696   0E4D DD            push bl
1697   0E4E 07 1B 27      call forwards
1698   0E51 51 01 00      add sp, 1
1699   0E54             ; --- END FUNCTION CALL
1700   0E54 0A 57 0E      jmp _if45_exit
1701   0E57             _if45_exit:
1702   0E57             ; forwards(1); 
1703   0E57             ; --- START FUNCTION CALL
1704   0E57 FD 2E 01 00   mov32 cb, $00000001
1704   0E5B 00 00 
1705   0E5D DD            push bl
1706   0E5E 07 1B 27      call forwards
1707   0E61 51 01 00      add sp, 1
1708   0E64             ; --- END FUNCTION CALL
1709   0E64 0A 71 13      jmp _if41_exit
1710   0E67             _if41_else:
1711   0E67             ; num_operands = 0; 
1712   0E67 FA 85 FF      lea d, [bp + -123] ; $num_operands
1713   0E6A DA            push d
1714   0E6B FD 2E 00 00   mov32 cb, $00000000
1714   0E6F 00 00 
1715   0E71 E7            pop d
1716   0E72 FD 43         mov [d], b
1717   0E74             ; for(;;){ 
1718   0E74             _for46_init:
1719   0E74             _for46_cond:
1720   0E74             _for46_block:
1721   0E74             ; get(); 
1722   0E74             ; --- START FUNCTION CALL
1723   0E74 07 6C 2B      call get
1724   0E77             ; if(toktype == END) break; 
1725   0E77             _if47_cond:
1726   0E77 3B 7D 4E      mov d, _toktype ; $toktype
1727   0E7A 2A            mov b, [d]
1728   0E7B 38 00 00      mov c, 0
1729   0E7E             ; --- START RELATIONAL
1730   0E7E D7            push a
1731   0E7F 11            mov a, b
1732   0E80 FD 2E 07 00   mov32 cb, $7 ; enum element: END
1732   0E84 00 00 
1733   0E86 B0            cmp a, b
1734   0E87 FD 71         seq ; ==
1735   0E89 E4            pop a
1736   0E8A             ; --- END RELATIONAL
1737   0E8A C0 00 00      cmp b, 0
1738   0E8D C6 96 0E      je _if47_exit
1739   0E90             _if47_TRUE:
1740   0E90             ; break; 
1741   0E90 0A F2 0E      jmp _for46_exit ; for break
1742   0E93 0A 96 0E      jmp _if47_exit
1743   0E96             _if47_exit:
1744   0E96             ; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1745   0E96             _if48_cond:
1746   0E96 3B 7D 4E      mov d, _toktype ; $toktype
1747   0E99 2A            mov b, [d]
1748   0E9A 38 00 00      mov c, 0
1749   0E9D             ; --- START RELATIONAL
1750   0E9D D7            push a
1751   0E9E 11            mov a, b
1752   0E9F FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
1752   0EA3 00 00 
1753   0EA5 B0            cmp a, b
1754   0EA6 FD 71         seq ; ==
1755   0EA8 E4            pop a
1756   0EA9             ; --- END RELATIONAL
1757   0EA9             ; --- START LOGICAL OR
1758   0EA9 D7            push a
1759   0EAA 11            mov a, b
1760   0EAB 3B 7D 4E      mov d, _toktype ; $toktype
1761   0EAE 2A            mov b, [d]
1762   0EAF 38 00 00      mov c, 0
1763   0EB2             ; --- START RELATIONAL
1764   0EB2 D7            push a
1765   0EB3 11            mov a, b
1766   0EB4 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1766   0EB8 00 00 
1767   0EBA B0            cmp a, b
1768   0EBB FD 71         seq ; ==
1769   0EBD E4            pop a
1770   0EBE             ; --- END RELATIONAL
1771   0EBE             ; --- START LOGICAL AND
1772   0EBE D7            push a
1773   0EBF 11            mov a, b
1774   0EC0             ; --- START FUNCTION CALL
1775   0EC0 3B 81 4E      mov d, _token_data ; $token
1776   0EC3 2D            mov b, d
1777   0EC4 38 00 00      mov c, 0
1778   0EC7 FD AB         swp b
1779   0EC9 D8            push b
1780   0ECA 07 10 1F      call is_reserved
1781   0ECD 51 02 00      add sp, 2
1782   0ED0             ; --- END FUNCTION CALL
1783   0ED0 FD A7         sand a, b
1784   0ED2 E4            pop a
1785   0ED3             ; --- END LOGICAL AND
1786   0ED3 FD A8         sor a, b ; ||
1787   0ED5 E4            pop a
1788   0ED6             ; --- END LOGICAL OR
1789   0ED6 C0 00 00      cmp b, 0
1790   0ED9 C6 EF 0E      je _if48_exit
1791   0EDC             _if48_TRUE:
1792   0EDC             ; num_operands++; 
1793   0EDC FA 85 FF      lea d, [bp + -123] ; $num_operands
1794   0EDF 2A            mov b, [d]
1795   0EE0 38 00 00      mov c, 0
1796   0EE3 11            mov a, b
1797   0EE4 FD 77         inc b
1798   0EE6 FA 85 FF      lea d, [bp + -123] ; $num_operands
1799   0EE9 FD 43         mov [d], b
1800   0EEB 27            mov b, a
1801   0EEC 0A EF 0E      jmp _if48_exit
1802   0EEF             _if48_exit:
1803   0EEF             _for46_update:
1804   0EEF 0A 74 0E      jmp _for46_cond
1805   0EF2             _for46_exit:
1806   0EF2             ; if(num_operands > 2) error("Maximum number of operands per instruction is 2."); 
1807   0EF2             _if49_cond:
1808   0EF2 FA 85 FF      lea d, [bp + -123] ; $num_operands
1809   0EF5 2A            mov b, [d]
1810   0EF6 38 00 00      mov c, 0
1811   0EF9             ; --- START RELATIONAL
1812   0EF9 D7            push a
1813   0EFA 11            mov a, b
1814   0EFB FD 2E 02 00   mov32 cb, $00000002
1814   0EFF 00 00 
1815   0F01 B0            cmp a, b
1816   0F02 FD 7F         sgt ; >
1817   0F04 E4            pop a
1818   0F05             ; --- END RELATIONAL
1819   0F05 C0 00 00      cmp b, 0
1820   0F08 C6 1A 0F      je _if49_exit
1821   0F0B             _if49_TRUE:
1822   0F0B             ; error("Maximum number of operands per instruction is 2."); 
1823   0F0B             ; --- START FUNCTION CALL
1824   0F0B 26 F0 50      mov b, _s27 ; "Maximum number of operands per instruction is 2."
1825   0F0E FD AB         swp b
1826   0F10 D8            push b
1827   0F11 07 72 39      call error
1828   0F14 51 02 00      add sp, 2
1829   0F17             ; --- END FUNCTION CALL
1830   0F17 0A 1A 0F      jmp _if49_exit
1831   0F1A             _if49_exit:
1832   0F1A             ; num_operandsexp = exp(2, num_operands); 
1833   0F1A FA 83 FF      lea d, [bp + -125] ; $num_operandsexp
1834   0F1D DA            push d
1835   0F1E             ; --- START FUNCTION CALL
1836   0F1E FA 85 FF      lea d, [bp + -123] ; $num_operands
1837   0F21 2A            mov b, [d]
1838   0F22 38 00 00      mov c, 0
1839   0F25 FD AB         swp b
1840   0F27 D8            push b
1841   0F28 FD 2E 02 00   mov32 cb, $00000002
1841   0F2C 00 00 
1842   0F2E FD AB         swp b
1843   0F30 D8            push b
1844   0F31 07 BC 3D      call exp
1845   0F34 51 04 00      add sp, 4
1846   0F37             ; --- END FUNCTION CALL
1847   0F37 E7            pop d
1848   0F38 FD 43         mov [d], b
1849   0F3A             ; for(i = 0; i < num_operandsexp; i++){ 
1850   0F3A             _for50_init:
1851   0F3A FA 81 FF      lea d, [bp + -127] ; $i
1852   0F3D DA            push d
1853   0F3E FD 2E 00 00   mov32 cb, $00000000
1853   0F42 00 00 
1854   0F44 E7            pop d
1855   0F45 FD 43         mov [d], b
1856   0F47             _for50_cond:
1857   0F47 FA 81 FF      lea d, [bp + -127] ; $i
1858   0F4A 2A            mov b, [d]
1859   0F4B 38 00 00      mov c, 0
1860   0F4E             ; --- START RELATIONAL
1861   0F4E D7            push a
1862   0F4F 11            mov a, b
1863   0F50 FA 83 FF      lea d, [bp + -125] ; $num_operandsexp
1864   0F53 2A            mov b, [d]
1865   0F54 38 00 00      mov c, 0
1866   0F57 B0            cmp a, b
1867   0F58 FD 73         slt ; < (signed)
1868   0F5A E4            pop a
1869   0F5B             ; --- END RELATIONAL
1870   0F5B C0 00 00      cmp b, 0
1871   0F5E C6 71 13      je _for50_exit
1872   0F61             _for50_block:
1873   0F61             ; prog = code_line; 
1874   0F61 3B 7F 4E      mov d, _prog ; $prog
1875   0F64 DA            push d
1876   0F65 FA A1 FF      lea d, [bp + -95] ; $code_line
1877   0F68 2D            mov b, d
1878   0F69 38 00 00      mov c, 0
1879   0F6C E7            pop d
1880   0F6D FD 43         mov [d], b
1881   0F6F             ; get(); 
1882   0F6F             ; --- START FUNCTION CALL
1883   0F6F 07 6C 2B      call get
1884   0F72             ; strcpy(opcode, token); 
1885   0F72             ; --- START FUNCTION CALL
1886   0F72 3B 81 4E      mov d, _token_data ; $token
1887   0F75 2D            mov b, d
1888   0F76 38 00 00      mov c, 0
1889   0F79 FD AB         swp b
1890   0F7B D8            push b
1891   0F7C FA E1 FF      lea d, [bp + -31] ; $opcode
1892   0F7F 2D            mov b, d
1893   0F80 38 00 00      mov c, 0
1894   0F83 FD AB         swp b
1895   0F85 D8            push b
1896   0F86 07 9F 4B      call strcpy
1897   0F89 51 04 00      add sp, 4
1898   0F8C             ; --- END FUNCTION CALL
1899   0F8C             ; strcat(opcode, " "); 
1900   0F8C             ; --- START FUNCTION CALL
1901   0F8C 26 EE 50      mov b, _s26 ; " "
1902   0F8F FD AB         swp b
1903   0F91 D8            push b
1904   0F92 FA E1 FF      lea d, [bp + -31] ; $opcode
1905   0F95 2D            mov b, d
1906   0F96 38 00 00      mov c, 0
1907   0F99 FD AB         swp b
1908   0F9B D8            push b
1909   0F9C 07 19 4C      call strcat
1910   0F9F 51 04 00      add sp, 4
1911   0FA2             ; --- END FUNCTION CALL
1912   0FA2             ; j = 0; 
1913   0FA2 FA 7F FF      lea d, [bp + -129] ; $j
1914   0FA5 DA            push d
1915   0FA6 FD 2E 00 00   mov32 cb, $00000000
1915   0FAA 00 00 
1916   0FAC E7            pop d
1917   0FAD FD 43         mov [d], b
1918   0FAF             ; for(;;){ 
1919   0FAF             _for51_init:
1920   0FAF             _for51_cond:
1921   0FAF             _for51_block:
1922   0FAF             ; get(); 
1923   0FAF             ; --- START FUNCTION CALL
1924   0FAF 07 6C 2B      call get
1925   0FB2             ; if(toktype == END) break; 
1926   0FB2             _if52_cond:
1927   0FB2 3B 7D 4E      mov d, _toktype ; $toktype
1928   0FB5 2A            mov b, [d]
1929   0FB6 38 00 00      mov c, 0
1930   0FB9             ; --- START RELATIONAL
1931   0FB9 D7            push a
1932   0FBA 11            mov a, b
1933   0FBB FD 2E 07 00   mov32 cb, $7 ; enum element: END
1933   0FBF 00 00 
1934   0FC1 B0            cmp a, b
1935   0FC2 FD 71         seq ; ==
1936   0FC4 E4            pop a
1937   0FC5             ; --- END RELATIONAL
1938   0FC5 C0 00 00      cmp b, 0
1939   0FC8 C6 D1 0F      je _if52_exit
1940   0FCB             _if52_TRUE:
1941   0FCB             ; break; 
1942   0FCB 0A 54 11      jmp _for51_exit ; for break
1943   0FCE 0A D1 0F      jmp _if52_exit
1944   0FD1             _if52_exit:
1945   0FD1             ; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1946   0FD1             _if53_cond:
1947   0FD1 3B 7D 4E      mov d, _toktype ; $toktype
1948   0FD4 2A            mov b, [d]
1949   0FD5 38 00 00      mov c, 0
1950   0FD8             ; --- START RELATIONAL
1951   0FD8 D7            push a
1952   0FD9 11            mov a, b
1953   0FDA FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
1953   0FDE 00 00 
1954   0FE0 B0            cmp a, b
1955   0FE1 FD 71         seq ; ==
1956   0FE3 E4            pop a
1957   0FE4             ; --- END RELATIONAL
1958   0FE4             ; --- START LOGICAL OR
1959   0FE4 D7            push a
1960   0FE5 11            mov a, b
1961   0FE6 3B 7D 4E      mov d, _toktype ; $toktype
1962   0FE9 2A            mov b, [d]
1963   0FEA 38 00 00      mov c, 0
1964   0FED             ; --- START RELATIONAL
1965   0FED D7            push a
1966   0FEE 11            mov a, b
1967   0FEF FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1967   0FF3 00 00 
1968   0FF5 B0            cmp a, b
1969   0FF6 FD 71         seq ; ==
1970   0FF8 E4            pop a
1971   0FF9             ; --- END RELATIONAL
1972   0FF9             ; --- START LOGICAL AND
1973   0FF9 D7            push a
1974   0FFA 11            mov a, b
1975   0FFB             ; --- START FUNCTION CALL
1976   0FFB 3B 81 4E      mov d, _token_data ; $token
1977   0FFE 2D            mov b, d
1978   0FFF 38 00 00      mov c, 0
1979   1002 FD AB         swp b
1980   1004 D8            push b
1981   1005 07 10 1F      call is_reserved
1982   1008 51 02 00      add sp, 2
1983   100B             ; --- END FUNCTION CALL
1984   100B FD A7         sand a, b
1985   100D E4            pop a
1986   100E             ; --- END LOGICAL AND
1987   100E FD A8         sor a, b ; ||
1988   1010 E4            pop a
1989   1011             ; --- END LOGICAL OR
1990   1011 C0 00 00      cmp b, 0
1991   1014 C6 37 11      je _if53_else
1992   1017             _if53_TRUE:
1993   1017             ; strcat(opcode, symbols[i*2+j]); 
1994   1017             ; --- START FUNCTION CALL
1995   1017 3B E3 4F      mov d, _symbols_data ; $symbols
1996   101A D7            push a
1997   101B DA            push d
1998   101C FA 81 FF      lea d, [bp + -127] ; $i
1999   101F 2A            mov b, [d]
2000   1020 38 00 00      mov c, 0
2001   1023             ; --- START FACTORS
2002   1023 D7            push a
2003   1024 FD D8         push g
2004   1026 11            mov a, b
2005   1027 FD 7A         mov g, c
2006   1029 FD 2E 02 00   mov32 cb, $00000002
2006   102D 00 00 
2007   102F D7            push a     ; save left operand
2008   1030 8E            xor a, b   ; xor sign bits
2009   1031 FD AA         swp a      ; swap bytes
2010   1033 83            mov cl, al ; save result of xor into 'dl'
2011   1034 E4            pop a      ; restore left side operator
2012   1035 DF            push cl    ; save result of xor above
2013   1036 FD AA         swp a  
2014   1038 93 80         test al, $80  
2015   103A FD AA         swp a  
2016   103C C6 41 10      jz skip_invert_a_61  
2017   103F FD 95         neg a 
2018   1041             skip_invert_a_61:   
2019   1041 FD AB         swp b
2020   1043 FD 93 80      test bl, $80  
2021   1046 FD AB         swp b
2022   1048 C6 4D 10      jz skip_invert_b_61  
2023   104B FD 97         neg b 
2024   104D             skip_invert_b_61:   
2025   104D AC            mul a, b ; *
2026   104E FD 78         mov g, a
2027   1050 11            mov a, b
2028   1051 EA            pop bl
2029   1052 FD 93 80      test bl, $80
2030   1055 C6 62 10      jz _same_signs_61
2031   1058 2F            mov bl, al
2032   1059 95            not a
2033   105A FD 97         neg b
2034   105C 5B 00 00      adc a, 0
2035   105F FD 78         mov g, a
2036   1061 11            mov a, b
2037   1062             _same_signs_61:
2038   1062 FD 38         mov c, g
2039   1064 27            mov b, a
2040   1065 FD F1         pop g
2041   1067 E4            pop a
2042   1068             ; --- END FACTORS
2043   1068             ; --- START TERMS
2044   1068 D7            push a
2045   1069 FD D8         push g
2046   106B 11            mov a, b
2047   106C FD 7A         mov g, c
2048   106E FA 7F FF      lea d, [bp + -129] ; $j
2049   1071 2A            mov b, [d]
2050   1072 38 00 00      mov c, 0
2051   1075 38 00 00      mov c, 0
2052   1078 FD 15         add32 cb, ga
2053   107A FD F1         pop g
2054   107C E4            pop a
2055   107D             ; --- END TERMS
2056   107D E7            pop d
2057   107E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2058   1082 E4            pop a
2059   1083 2A            mov b, [d]
2060   1084 38 00 00      mov c, 0
2061   1087 FD AB         swp b
2062   1089 D8            push b
2063   108A FA E1 FF      lea d, [bp + -31] ; $opcode
2064   108D 2D            mov b, d
2065   108E 38 00 00      mov c, 0
2066   1091 FD AB         swp b
2067   1093 D8            push b
2068   1094 07 19 4C      call strcat
2069   1097 51 04 00      add sp, 4
2070   109A             ; --- END FUNCTION CALL
2071   109A             ; operand_types[j] = *symbols[i*2+j]; 
2072   109A FA 7C FF      lea d, [bp + -132] ; $operand_types
2073   109D D7            push a
2074   109E DA            push d
2075   109F FA 7F FF      lea d, [bp + -129] ; $j
2076   10A2 2A            mov b, [d]
2077   10A3 38 00 00      mov c, 0
2078   10A6 E7            pop d
2079   10A7 5A            add d, b
2080   10A8 E4            pop a
2081   10A9 DA            push d
2082   10AA 3B E3 4F      mov d, _symbols_data ; $symbols
2083   10AD D7            push a
2084   10AE DA            push d
2085   10AF FA 81 FF      lea d, [bp + -127] ; $i
2086   10B2 2A            mov b, [d]
2087   10B3 38 00 00      mov c, 0
2088   10B6             ; --- START FACTORS
2089   10B6 D7            push a
2090   10B7 FD D8         push g
2091   10B9 11            mov a, b
2092   10BA FD 7A         mov g, c
2093   10BC FD 2E 02 00   mov32 cb, $00000002
2093   10C0 00 00 
2094   10C2 D7            push a     ; save left operand
2095   10C3 8E            xor a, b   ; xor sign bits
2096   10C4 FD AA         swp a      ; swap bytes
2097   10C6 83            mov cl, al ; save result of xor into 'dl'
2098   10C7 E4            pop a      ; restore left side operator
2099   10C8 DF            push cl    ; save result of xor above
2100   10C9 FD AA         swp a  
2101   10CB 93 80         test al, $80  
2102   10CD FD AA         swp a  
2103   10CF C6 D4 10      jz skip_invert_a_65  
2104   10D2 FD 95         neg a 
2105   10D4             skip_invert_a_65:   
2106   10D4 FD AB         swp b
2107   10D6 FD 93 80      test bl, $80  
2108   10D9 FD AB         swp b
2109   10DB C6 E0 10      jz skip_invert_b_65  
2110   10DE FD 97         neg b 
2111   10E0             skip_invert_b_65:   
2112   10E0 AC            mul a, b ; *
2113   10E1 FD 78         mov g, a
2114   10E3 11            mov a, b
2115   10E4 EA            pop bl
2116   10E5 FD 93 80      test bl, $80
2117   10E8 C6 F5 10      jz _same_signs_65
2118   10EB 2F            mov bl, al
2119   10EC 95            not a
2120   10ED FD 97         neg b
2121   10EF 5B 00 00      adc a, 0
2122   10F2 FD 78         mov g, a
2123   10F4 11            mov a, b
2124   10F5             _same_signs_65:
2125   10F5 FD 38         mov c, g
2126   10F7 27            mov b, a
2127   10F8 FD F1         pop g
2128   10FA E4            pop a
2129   10FB             ; --- END FACTORS
2130   10FB             ; --- START TERMS
2131   10FB D7            push a
2132   10FC FD D8         push g
2133   10FE 11            mov a, b
2134   10FF FD 7A         mov g, c
2135   1101 FA 7F FF      lea d, [bp + -129] ; $j
2136   1104 2A            mov b, [d]
2137   1105 38 00 00      mov c, 0
2138   1108 38 00 00      mov c, 0
2139   110B FD 15         add32 cb, ga
2140   110D FD F1         pop g
2141   110F E4            pop a
2142   1110             ; --- END TERMS
2143   1110 E7            pop d
2144   1111 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2145   1115 E4            pop a
2146   1116 2A            mov b, [d]
2147   1117 38 00 00      mov c, 0
2148   111A 74            mov d, b
2149   111B 32            mov bl, [d]
2150   111C A7 00         mov bh, 0
2151   111E 38 00 00      mov c, 0
2152   1121 E7            pop d
2153   1122 FD 3E         mov [d], bl
2154   1124             ; j++; 
2155   1124 FA 7F FF      lea d, [bp + -129] ; $j
2156   1127 2A            mov b, [d]
2157   1128 38 00 00      mov c, 0
2158   112B 11            mov a, b
2159   112C FD 77         inc b
2160   112E FA 7F FF      lea d, [bp + -129] ; $j
2161   1131 FD 43         mov [d], b
2162   1133 27            mov b, a
2163   1134 0A 51 11      jmp _if53_exit
2164   1137             _if53_else:
2165   1137             ; strcat(opcode, token); 
2166   1137             ; --- START FUNCTION CALL
2167   1137 3B 81 4E      mov d, _token_data ; $token
2168   113A 2D            mov b, d
2169   113B 38 00 00      mov c, 0
2170   113E FD AB         swp b
2171   1140 D8            push b
2172   1141 FA E1 FF      lea d, [bp + -31] ; $opcode
2173   1144 2D            mov b, d
2174   1145 38 00 00      mov c, 0
2175   1148 FD AB         swp b
2176   114A D8            push b
2177   114B 07 19 4C      call strcat
2178   114E 51 04 00      add sp, 4
2179   1151             ; --- END FUNCTION CALL
2180   1151             _if53_exit:
2181   1151             _for51_update:
2182   1151 0A AF 0F      jmp _for51_cond
2183   1154             _for51_exit:
2184   1154             ; op = search_opcode(opcode); 
2185   1154 FA 87 FF      lea d, [bp + -121] ; $op
2186   1157 DA            push d
2187   1158             ; --- START FUNCTION CALL
2188   1158 FA E1 FF      lea d, [bp + -31] ; $opcode
2189   115B 2D            mov b, d
2190   115C 38 00 00      mov c, 0
2191   115F FD AB         swp b
2192   1161 D8            push b
2193   1162 07 EE 23      call search_opcode
2194   1165 51 02 00      add sp, 2
2195   1168             ; --- END FUNCTION CALL
2196   1168 E7            pop d
2197   1169 FD 28         mov si, b
2198   116B FD 50         mov di, d
2199   116D 38 1A 00      mov c, 26
2200   1170 FD F5         rep movsb
2201   1172             ; if(op.name[0] == '\0') continue; 
2202   1172             _if66_cond:
2203   1172 FA 87 FF      lea d, [bp + -121] ; $op
2204   1175 58 00 00      add d, 0
2205   1178 D7            push a
2206   1179 DA            push d
2207   117A FD 2E 00 00   mov32 cb, $00000000
2207   117E 00 00 
2208   1180 E7            pop d
2209   1181 5A            add d, b
2210   1182 E4            pop a
2211   1183 32            mov bl, [d]
2212   1184 A7 00         mov bh, 0
2213   1186 38 00 00      mov c, 0
2214   1189             ; --- START RELATIONAL
2215   1189 D7            push a
2216   118A 11            mov a, b
2217   118B FD 2E 00 00   mov32 cb, $00000000
2217   118F 00 00 
2218   1191 B0            cmp a, b
2219   1192 FD 71         seq ; ==
2220   1194 E4            pop a
2221   1195             ; --- END RELATIONAL
2222   1195 C0 00 00      cmp b, 0
2223   1198 C6 A1 11      je _if66_exit
2224   119B             _if66_TRUE:
2225   119B             ; continue; 
2226   119B 0A 5E 13      jmp _for50_update ; for continue
2227   119E 0A A1 11      jmp _if66_exit
2228   11A1             _if66_exit:
2229   11A1             ; if(op.opcode_type){ 
2230   11A1             _if67_cond:
2231   11A1 FA 87 FF      lea d, [bp + -121] ; $op
2232   11A4 58 19 00      add d, 25
2233   11A7 32            mov bl, [d]
2234   11A8 A7 00         mov bh, 0
2235   11AA 38 00 00      mov c, 0
2236   11AD C0 00 00      cmp b, 0
2237   11B0 C6 C3 11      je _if67_exit
2238   11B3             _if67_TRUE:
2239   11B3             ; forwards(1); 
2240   11B3             ; --- START FUNCTION CALL
2241   11B3 FD 2E 01 00   mov32 cb, $00000001
2241   11B7 00 00 
2242   11B9 DD            push bl
2243   11BA 07 1B 27      call forwards
2244   11BD 51 01 00      add sp, 1
2245   11C0             ; --- END FUNCTION CALL
2246   11C0 0A C3 11      jmp _if67_exit
2247   11C3             _if67_exit:
2248   11C3             ; forwards(1); 
2249   11C3             ; --- START FUNCTION CALL
2250   11C3 FD 2E 01 00   mov32 cb, $00000001
2250   11C7 00 00 
2251   11C9 DD            push bl
2252   11CA 07 1B 27      call forwards
2253   11CD 51 01 00      add sp, 1
2254   11D0             ; --- END FUNCTION CALL
2255   11D0             ; prog = code_line; 
2256   11D0 3B 7F 4E      mov d, _prog ; $prog
2257   11D3 DA            push d
2258   11D4 FA A1 FF      lea d, [bp + -95] ; $code_line
2259   11D7 2D            mov b, d
2260   11D8 38 00 00      mov c, 0
2261   11DB E7            pop d
2262   11DC FD 43         mov [d], b
2263   11DE             ; j = 0; 
2264   11DE FA 7F FF      lea d, [bp + -129] ; $j
2265   11E1 DA            push d
2266   11E2 FD 2E 00 00   mov32 cb, $00000000
2266   11E6 00 00 
2267   11E8 E7            pop d
2268   11E9 FD 43         mov [d], b
2269   11EB             ; get(); 
2270   11EB             ; --- START FUNCTION CALL
2271   11EB 07 6C 2B      call get
2272   11EE             ; for(;;){ 
2273   11EE             _for68_init:
2274   11EE             _for68_cond:
2275   11EE             _for68_block:
2276   11EE             ; get(); 
2277   11EE             ; --- START FUNCTION CALL
2278   11EE 07 6C 2B      call get
2279   11F1             ; if(toktype == END) break; 
2280   11F1             _if69_cond:
2281   11F1 3B 7D 4E      mov d, _toktype ; $toktype
2282   11F4 2A            mov b, [d]
2283   11F5 38 00 00      mov c, 0
2284   11F8             ; --- START RELATIONAL
2285   11F8 D7            push a
2286   11F9 11            mov a, b
2287   11FA FD 2E 07 00   mov32 cb, $7 ; enum element: END
2287   11FE 00 00 
2288   1200 B0            cmp a, b
2289   1201 FD 71         seq ; ==
2290   1203 E4            pop a
2291   1204             ; --- END RELATIONAL
2292   1204 C0 00 00      cmp b, 0
2293   1207 C6 10 12      je _if69_exit
2294   120A             _if69_TRUE:
2295   120A             ; break; 
2296   120A 0A 5B 13      jmp _for68_exit ; for break
2297   120D 0A 10 12      jmp _if69_exit
2298   1210             _if69_exit:
2299   1210             ; if(toktype == IDENTIFIER && !is_reserved(token)){ 
2300   1210             _if70_cond:
2301   1210 3B 7D 4E      mov d, _toktype ; $toktype
2302   1213 2A            mov b, [d]
2303   1214 38 00 00      mov c, 0
2304   1217             ; --- START RELATIONAL
2305   1217 D7            push a
2306   1218 11            mov a, b
2307   1219 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
2307   121D 00 00 
2308   121F B0            cmp a, b
2309   1220 FD 71         seq ; ==
2310   1222 E4            pop a
2311   1223             ; --- END RELATIONAL
2312   1223             ; --- START LOGICAL AND
2313   1223 D7            push a
2314   1224 11            mov a, b
2315   1225             ; --- START FUNCTION CALL
2316   1225 3B 81 4E      mov d, _token_data ; $token
2317   1228 2D            mov b, d
2318   1229 38 00 00      mov c, 0
2319   122C FD AB         swp b
2320   122E D8            push b
2321   122F 07 10 1F      call is_reserved
2322   1232 51 02 00      add sp, 2
2323   1235             ; --- END FUNCTION CALL
2324   1235 FD A7         sand a, b
2325   1237 E4            pop a
2326   1238             ; --- END LOGICAL AND
2327   1238 C0 00 00      cmp b, 0
2328   123B C6 BE 12      je _if70_else
2329   123E             _if70_TRUE:
2330   123E             ; if(operand_types[j] == '#'){ 
2331   123E             _if71_cond:
2332   123E FA 7C FF      lea d, [bp + -132] ; $operand_types
2333   1241 D7            push a
2334   1242 DA            push d
2335   1243 FA 7F FF      lea d, [bp + -129] ; $j
2336   1246 2A            mov b, [d]
2337   1247 38 00 00      mov c, 0
2338   124A E7            pop d
2339   124B 5A            add d, b
2340   124C E4            pop a
2341   124D 32            mov bl, [d]
2342   124E A7 00         mov bh, 0
2343   1250 38 00 00      mov c, 0
2344   1253             ; --- START RELATIONAL
2345   1253 D7            push a
2346   1254 11            mov a, b
2347   1255 FD 2E 23 00   mov32 cb, $00000023
2347   1259 00 00 
2348   125B B0            cmp a, b
2349   125C FD 71         seq ; ==
2350   125E E4            pop a
2351   125F             ; --- END RELATIONAL
2352   125F C0 00 00      cmp b, 0
2353   1262 C6 74 12      je _if71_else
2354   1265             _if71_TRUE:
2355   1265             ; error("8bit operand expected but 16bit label given."); 
2356   1265             ; --- START FUNCTION CALL
2357   1265 26 21 51      mov b, _s28 ; "8bit operand expected but 16bit label given."
2358   1268 FD AB         swp b
2359   126A D8            push b
2360   126B 07 72 39      call error
2361   126E 51 02 00      add sp, 2
2362   1271             ; --- END FUNCTION CALL
2363   1271 0A AB 12      jmp _if71_exit
2364   1274             _if71_else:
2365   1274             ; if(operand_types[j] == '@'){ 
2366   1274             _if72_cond:
2367   1274 FA 7C FF      lea d, [bp + -132] ; $operand_types
2368   1277 D7            push a
2369   1278 DA            push d
2370   1279 FA 7F FF      lea d, [bp + -129] ; $j
2371   127C 2A            mov b, [d]
2372   127D 38 00 00      mov c, 0
2373   1280 E7            pop d
2374   1281 5A            add d, b
2375   1282 E4            pop a
2376   1283 32            mov bl, [d]
2377   1284 A7 00         mov bh, 0
2378   1286 38 00 00      mov c, 0
2379   1289             ; --- START RELATIONAL
2380   1289 D7            push a
2381   128A 11            mov a, b
2382   128B FD 2E 40 00   mov32 cb, $00000040
2382   128F 00 00 
2383   1291 B0            cmp a, b
2384   1292 FD 71         seq ; ==
2385   1294 E4            pop a
2386   1295             ; --- END RELATIONAL
2387   1295 C0 00 00      cmp b, 0
2388   1298 C6 AB 12      je _if72_exit
2389   129B             _if72_TRUE:
2390   129B             ; forwards(2); 
2391   129B             ; --- START FUNCTION CALL
2392   129B FD 2E 02 00   mov32 cb, $00000002
2392   129F 00 00 
2393   12A1 DD            push bl
2394   12A2 07 1B 27      call forwards
2395   12A5 51 01 00      add sp, 1
2396   12A8             ; --- END FUNCTION CALL
2397   12A8 0A AB 12      jmp _if72_exit
2398   12AB             _if72_exit:
2399   12AB             _if71_exit:
2400   12AB             ; j++; 
2401   12AB FA 7F FF      lea d, [bp + -129] ; $j
2402   12AE 2A            mov b, [d]
2403   12AF 38 00 00      mov c, 0
2404   12B2 11            mov a, b
2405   12B3 FD 77         inc b
2406   12B5 FA 7F FF      lea d, [bp + -129] ; $j
2407   12B8 FD 43         mov [d], b
2408   12BA 27            mov b, a
2409   12BB 0A 58 13      jmp _if70_exit
2410   12BE             _if70_else:
2411   12BE             ; if(toktype == INTEGER_CONST){ 
2412   12BE             _if73_cond:
2413   12BE 3B 7D 4E      mov d, _toktype ; $toktype
2414   12C1 2A            mov b, [d]
2415   12C2 38 00 00      mov c, 0
2416   12C5             ; --- START RELATIONAL
2417   12C5 D7            push a
2418   12C6 11            mov a, b
2419   12C7 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2419   12CB 00 00 
2420   12CD B0            cmp a, b
2421   12CE FD 71         seq ; ==
2422   12D0 E4            pop a
2423   12D1             ; --- END RELATIONAL
2424   12D1 C0 00 00      cmp b, 0
2425   12D4 C6 58 13      je _if73_exit
2426   12D7             _if73_TRUE:
2427   12D7             ; if(operand_types[j] == '#'){ 
2428   12D7             _if74_cond:
2429   12D7 FA 7C FF      lea d, [bp + -132] ; $operand_types
2430   12DA D7            push a
2431   12DB DA            push d
2432   12DC FA 7F FF      lea d, [bp + -129] ; $j
2433   12DF 2A            mov b, [d]
2434   12E0 38 00 00      mov c, 0
2435   12E3 E7            pop d
2436   12E4 5A            add d, b
2437   12E5 E4            pop a
2438   12E6 32            mov bl, [d]
2439   12E7 A7 00         mov bh, 0
2440   12E9 38 00 00      mov c, 0
2441   12EC             ; --- START RELATIONAL
2442   12EC D7            push a
2443   12ED 11            mov a, b
2444   12EE FD 2E 23 00   mov32 cb, $00000023
2444   12F2 00 00 
2445   12F4 B0            cmp a, b
2446   12F5 FD 71         seq ; ==
2447   12F7 E4            pop a
2448   12F8             ; --- END RELATIONAL
2449   12F8 C0 00 00      cmp b, 0
2450   12FB C6 0E 13      je _if74_else
2451   12FE             _if74_TRUE:
2452   12FE             ; forwards(1); 
2453   12FE             ; --- START FUNCTION CALL
2454   12FE FD 2E 01 00   mov32 cb, $00000001
2454   1302 00 00 
2455   1304 DD            push bl
2456   1305 07 1B 27      call forwards
2457   1308 51 01 00      add sp, 1
2458   130B             ; --- END FUNCTION CALL
2459   130B 0A 45 13      jmp _if74_exit
2460   130E             _if74_else:
2461   130E             ; if(operand_types[j] == '@'){ 
2462   130E             _if75_cond:
2463   130E FA 7C FF      lea d, [bp + -132] ; $operand_types
2464   1311 D7            push a
2465   1312 DA            push d
2466   1313 FA 7F FF      lea d, [bp + -129] ; $j
2467   1316 2A            mov b, [d]
2468   1317 38 00 00      mov c, 0
2469   131A E7            pop d
2470   131B 5A            add d, b
2471   131C E4            pop a
2472   131D 32            mov bl, [d]
2473   131E A7 00         mov bh, 0
2474   1320 38 00 00      mov c, 0
2475   1323             ; --- START RELATIONAL
2476   1323 D7            push a
2477   1324 11            mov a, b
2478   1325 FD 2E 40 00   mov32 cb, $00000040
2478   1329 00 00 
2479   132B B0            cmp a, b
2480   132C FD 71         seq ; ==
2481   132E E4            pop a
2482   132F             ; --- END RELATIONAL
2483   132F C0 00 00      cmp b, 0
2484   1332 C6 45 13      je _if75_exit
2485   1335             _if75_TRUE:
2486   1335             ; forwards(2); 
2487   1335             ; --- START FUNCTION CALL
2488   1335 FD 2E 02 00   mov32 cb, $00000002
2488   1339 00 00 
2489   133B DD            push bl
2490   133C 07 1B 27      call forwards
2491   133F 51 01 00      add sp, 1
2492   1342             ; --- END FUNCTION CALL
2493   1342 0A 45 13      jmp _if75_exit
2494   1345             _if75_exit:
2495   1345             _if74_exit:
2496   1345             ; j++; 
2497   1345 FA 7F FF      lea d, [bp + -129] ; $j
2498   1348 2A            mov b, [d]
2499   1349 38 00 00      mov c, 0
2500   134C 11            mov a, b
2501   134D FD 77         inc b
2502   134F FA 7F FF      lea d, [bp + -129] ; $j
2503   1352 FD 43         mov [d], b
2504   1354 27            mov b, a
2505   1355 0A 58 13      jmp _if73_exit
2506   1358             _if73_exit:
2507   1358             _if70_exit:
2508   1358             _for68_update:
2509   1358 0A EE 11      jmp _for68_cond
2510   135B             _for68_exit:
2511   135B             ; break; 
2512   135B 0A 71 13      jmp _for50_exit ; for break
2513   135E             _for50_update:
2514   135E FA 81 FF      lea d, [bp + -127] ; $i
2515   1361 2A            mov b, [d]
2516   1362 38 00 00      mov c, 0
2517   1365 11            mov a, b
2518   1366 FD 77         inc b
2519   1368 FA 81 FF      lea d, [bp + -127] ; $i
2520   136B FD 43         mov [d], b
2521   136D 27            mov b, a
2522   136E 0A 47 0F      jmp _for50_cond
2523   1371             _for50_exit:
2524   1371             _if41_exit:
2525   1371             ; pop_prog(); 
2526   1371             ; --- START FUNCTION CALL
2527   1371 07 2A 3A      call pop_prog
2528   1374 F9            leave
2529   1375 09            ret
2530   1376             
2531   1376             parse_instr:
2532   1376 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2533   1379             ; char opcode[32]; 
2534   1379 52 20 00      sub sp, 32
2535   137C             ; char code_line[64]; 
2536   137C 52 40 00      sub sp, 64
2537   137F             ; struct t_opcode op; 
2538   137F 52 1A 00      sub sp, 26
2539   1382             ; int instr_len; 
2540   1382 52 02 00      sub sp, 2
2541   1385             ; int num_operands, num_operandsexp; 
2542   1385 52 02 00      sub sp, 2
2543   1388 52 02 00      sub sp, 2
2544   138B             ; int i, j; 
2545   138B 52 02 00      sub sp, 2
2546   138E 52 02 00      sub sp, 2
2547   1391             ; char operand_types[3]; // operand types and locations 
2548   1391 52 03 00      sub sp, 3
2549   1394             ; int old_pc; 
2550   1394 52 02 00      sub sp, 2
2551   1397             ; char has_operands; 
2552   1397 52 01 00      sub sp, 1
2553   139A             ; old_pc = pc; 
2554   139A FA 78 FF      lea d, [bp + -136] ; $old_pc
2555   139D DA            push d
2556   139E 3B 78 4E      mov d, _pc ; $pc
2557   13A1 2A            mov b, [d]
2558   13A2 38 00 00      mov c, 0
2559   13A5 E7            pop d
2560   13A6 FD 43         mov [d], b
2561   13A8             ; get_line(); 
2562   13A8             ; --- START FUNCTION CALL
2563   13A8 07 4F 2A      call get_line
2564   13AB             ; push_prog(); 
2565   13AB             ; --- START FUNCTION CALL
2566   13AB 07 D0 39      call push_prog
2567   13AE             ; strcpy(code_line, string_const); 
2568   13AE             ; --- START FUNCTION CALL
2569   13AE 3B C1 4E      mov d, _string_const_data ; $string_const
2570   13B1 2D            mov b, d
2571   13B2 38 00 00      mov c, 0
2572   13B5 FD AB         swp b
2573   13B7 D8            push b
2574   13B8 FA A1 FF      lea d, [bp + -95] ; $code_line
2575   13BB 2D            mov b, d
2576   13BC 38 00 00      mov c, 0
2577   13BF FD AB         swp b
2578   13C1 D8            push b
2579   13C2 07 9F 4B      call strcpy
2580   13C5 51 04 00      add sp, 4
2581   13C8             ; --- END FUNCTION CALL
2582   13C8             ; has_operands = 0; 
2583   13C8 FA 77 FF      lea d, [bp + -137] ; $has_operands
2584   13CB DA            push d
2585   13CC FD 2E 00 00   mov32 cb, $00000000
2585   13D0 00 00 
2586   13D2 E7            pop d
2587   13D3 FD 3E         mov [d], bl
2588   13D5             ; prog = code_line; 
2589   13D5 3B 7F 4E      mov d, _prog ; $prog
2590   13D8 DA            push d
2591   13D9 FA A1 FF      lea d, [bp + -95] ; $code_line
2592   13DC 2D            mov b, d
2593   13DD 38 00 00      mov c, 0
2594   13E0 E7            pop d
2595   13E1 FD 43         mov [d], b
2596   13E3             ; get(); 
2597   13E3             ; --- START FUNCTION CALL
2598   13E3 07 6C 2B      call get
2599   13E6             ; for(;;){ 
2600   13E6             _for76_init:
2601   13E6             _for76_cond:
2602   13E6             _for76_block:
2603   13E6             ; get(); 
2604   13E6             ; --- START FUNCTION CALL
2605   13E6 07 6C 2B      call get
2606   13E9             ; if(toktype == END) break; 
2607   13E9             _if77_cond:
2608   13E9 3B 7D 4E      mov d, _toktype ; $toktype
2609   13EC 2A            mov b, [d]
2610   13ED 38 00 00      mov c, 0
2611   13F0             ; --- START RELATIONAL
2612   13F0 D7            push a
2613   13F1 11            mov a, b
2614   13F2 FD 2E 07 00   mov32 cb, $7 ; enum element: END
2614   13F6 00 00 
2615   13F8 B0            cmp a, b
2616   13F9 FD 71         seq ; ==
2617   13FB E4            pop a
2618   13FC             ; --- END RELATIONAL
2619   13FC C0 00 00      cmp b, 0
2620   13FF C6 08 14      je _if77_exit
2621   1402             _if77_TRUE:
2622   1402             ; break; 
2623   1402 0A 58 14      jmp _for76_exit ; for break
2624   1405 0A 08 14      jmp _if77_exit
2625   1408             _if77_exit:
2626   1408             ; if(toktype == INTEGER_CONST || label_exists(token) != -1){ 
2627   1408             _if78_cond:
2628   1408 3B 7D 4E      mov d, _toktype ; $toktype
2629   140B 2A            mov b, [d]
2630   140C 38 00 00      mov c, 0
2631   140F             ; --- START RELATIONAL
2632   140F D7            push a
2633   1410 11            mov a, b
2634   1411 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2634   1415 00 00 
2635   1417 B0            cmp a, b
2636   1418 FD 71         seq ; ==
2637   141A E4            pop a
2638   141B             ; --- END RELATIONAL
2639   141B             ; --- START LOGICAL OR
2640   141B D7            push a
2641   141C 11            mov a, b
2642   141D             ; --- START FUNCTION CALL
2643   141D 3B 81 4E      mov d, _token_data ; $token
2644   1420 2D            mov b, d
2645   1421 38 00 00      mov c, 0
2646   1424 FD AB         swp b
2647   1426 D8            push b
2648   1427 07 69 23      call label_exists
2649   142A 51 02 00      add sp, 2
2650   142D             ; --- END FUNCTION CALL
2651   142D             ; --- START RELATIONAL
2652   142D D7            push a
2653   142E 11            mov a, b
2654   142F FD 2E FF FF   mov32 cb, $ffffffff
2654   1433 FF FF 
2655   1435 B0            cmp a, b
2656   1436 FD 72         sneq ; !=
2657   1438 E4            pop a
2658   1439             ; --- END RELATIONAL
2659   1439 FD A8         sor a, b ; ||
2660   143B E4            pop a
2661   143C             ; --- END LOGICAL OR
2662   143C C0 00 00      cmp b, 0
2663   143F C6 55 14      je _if78_exit
2664   1442             _if78_TRUE:
2665   1442             ; has_operands = 1; 
2666   1442 FA 77 FF      lea d, [bp + -137] ; $has_operands
2667   1445 DA            push d
2668   1446 FD 2E 01 00   mov32 cb, $00000001
2668   144A 00 00 
2669   144C E7            pop d
2670   144D FD 3E         mov [d], bl
2671   144F             ; break; 
2672   144F 0A 58 14      jmp _for76_exit ; for break
2673   1452 0A 55 14      jmp _if78_exit
2674   1455             _if78_exit:
2675   1455             _for76_update:
2676   1455 0A E6 13      jmp _for76_cond
2677   1458             _for76_exit:
2678   1458             ; opcode[0] = '\0'; 
2679   1458 FA E1 FF      lea d, [bp + -31] ; $opcode
2680   145B D7            push a
2681   145C DA            push d
2682   145D FD 2E 00 00   mov32 cb, $00000000
2682   1461 00 00 
2683   1463 E7            pop d
2684   1464 5A            add d, b
2685   1465 E4            pop a
2686   1466 DA            push d
2687   1467 FD 2E 00 00   mov32 cb, $00000000
2687   146B 00 00 
2688   146D E7            pop d
2689   146E FD 3E         mov [d], bl
2690   1470             ; prog = code_line; 
2691   1470 3B 7F 4E      mov d, _prog ; $prog
2692   1473 DA            push d
2693   1474 FA A1 FF      lea d, [bp + -95] ; $code_line
2694   1477 2D            mov b, d
2695   1478 38 00 00      mov c, 0
2696   147B E7            pop d
2697   147C FD 43         mov [d], b
2698   147E             ; if(!has_operands){ 
2699   147E             _if79_cond:
2700   147E FA 77 FF      lea d, [bp + -137] ; $has_operands
2701   1481 32            mov bl, [d]
2702   1482 A7 00         mov bh, 0
2703   1484 38 00 00      mov c, 0
2704   1487 C0 00 00      cmp b, 0
2705   148A C6 11 16      je _if79_else
2706   148D             _if79_TRUE:
2707   148D             ; get(); 
2708   148D             ; --- START FUNCTION CALL
2709   148D 07 6C 2B      call get
2710   1490             ; strcpy(opcode, token); 
2711   1490             ; --- START FUNCTION CALL
2712   1490 3B 81 4E      mov d, _token_data ; $token
2713   1493 2D            mov b, d
2714   1494 38 00 00      mov c, 0
2715   1497 FD AB         swp b
2716   1499 D8            push b
2717   149A FA E1 FF      lea d, [bp + -31] ; $opcode
2718   149D 2D            mov b, d
2719   149E 38 00 00      mov c, 0
2720   14A1 FD AB         swp b
2721   14A3 D8            push b
2722   14A4 07 9F 4B      call strcpy
2723   14A7 51 04 00      add sp, 4
2724   14AA             ; --- END FUNCTION CALL
2725   14AA             ; get();  
2726   14AA             ; --- START FUNCTION CALL
2727   14AA 07 6C 2B      call get
2728   14AD             ; if(toktype == END){ 
2729   14AD             _if80_cond:
2730   14AD 3B 7D 4E      mov d, _toktype ; $toktype
2731   14B0 2A            mov b, [d]
2732   14B1 38 00 00      mov c, 0
2733   14B4             ; --- START RELATIONAL
2734   14B4 D7            push a
2735   14B5 11            mov a, b
2736   14B6 FD 2E 07 00   mov32 cb, $7 ; enum element: END
2736   14BA 00 00 
2737   14BC B0            cmp a, b
2738   14BD FD 71         seq ; ==
2739   14BF E4            pop a
2740   14C0             ; --- END RELATIONAL
2741   14C0 C0 00 00      cmp b, 0
2742   14C3 C6 DF 14      je _if80_else
2743   14C6             _if80_TRUE:
2744   14C6             ; strcat(opcode, " ."); 
2745   14C6             ; --- START FUNCTION CALL
2746   14C6 26 EB 50      mov b, _s25 ; " ."
2747   14C9 FD AB         swp b
2748   14CB D8            push b
2749   14CC FA E1 FF      lea d, [bp + -31] ; $opcode
2750   14CF 2D            mov b, d
2751   14D0 38 00 00      mov c, 0
2752   14D3 FD AB         swp b
2753   14D5 D8            push b
2754   14D6 07 19 4C      call strcat
2755   14D9 51 04 00      add sp, 4
2756   14DC             ; --- END FUNCTION CALL
2757   14DC 0A 4E 15      jmp _if80_exit
2758   14DF             _if80_else:
2759   14DF             ; strcat(opcode, " "); 
2760   14DF             ; --- START FUNCTION CALL
2761   14DF 26 EE 50      mov b, _s26 ; " "
2762   14E2 FD AB         swp b
2763   14E4 D8            push b
2764   14E5 FA E1 FF      lea d, [bp + -31] ; $opcode
2765   14E8 2D            mov b, d
2766   14E9 38 00 00      mov c, 0
2767   14EC FD AB         swp b
2768   14EE D8            push b
2769   14EF 07 19 4C      call strcat
2770   14F2 51 04 00      add sp, 4
2771   14F5             ; --- END FUNCTION CALL
2772   14F5             ; strcat(opcode, token); 
2773   14F5             ; --- START FUNCTION CALL
2774   14F5 3B 81 4E      mov d, _token_data ; $token
2775   14F8 2D            mov b, d
2776   14F9 38 00 00      mov c, 0
2777   14FC FD AB         swp b
2778   14FE D8            push b
2779   14FF FA E1 FF      lea d, [bp + -31] ; $opcode
2780   1502 2D            mov b, d
2781   1503 38 00 00      mov c, 0
2782   1506 FD AB         swp b
2783   1508 D8            push b
2784   1509 07 19 4C      call strcat
2785   150C 51 04 00      add sp, 4
2786   150F             ; --- END FUNCTION CALL
2787   150F             ; for(;;){ 
2788   150F             _for81_init:
2789   150F             _for81_cond:
2790   150F             _for81_block:
2791   150F             ; get(); 
2792   150F             ; --- START FUNCTION CALL
2793   150F 07 6C 2B      call get
2794   1512             ; if(toktype == END) break; 
2795   1512             _if82_cond:
2796   1512 3B 7D 4E      mov d, _toktype ; $toktype
2797   1515 2A            mov b, [d]
2798   1516 38 00 00      mov c, 0
2799   1519             ; --- START RELATIONAL
2800   1519 D7            push a
2801   151A 11            mov a, b
2802   151B FD 2E 07 00   mov32 cb, $7 ; enum element: END
2802   151F 00 00 
2803   1521 B0            cmp a, b
2804   1522 FD 71         seq ; ==
2805   1524 E4            pop a
2806   1525             ; --- END RELATIONAL
2807   1525 C0 00 00      cmp b, 0
2808   1528 C6 31 15      je _if82_exit
2809   152B             _if82_TRUE:
2810   152B             ; break; 
2811   152B 0A 4E 15      jmp _for81_exit ; for break
2812   152E 0A 31 15      jmp _if82_exit
2813   1531             _if82_exit:
2814   1531             ; strcat(opcode, token); 
2815   1531             ; --- START FUNCTION CALL
2816   1531 3B 81 4E      mov d, _token_data ; $token
2817   1534 2D            mov b, d
2818   1535 38 00 00      mov c, 0
2819   1538 FD AB         swp b
2820   153A D8            push b
2821   153B FA E1 FF      lea d, [bp + -31] ; $opcode
2822   153E 2D            mov b, d
2823   153F 38 00 00      mov c, 0
2824   1542 FD AB         swp b
2825   1544 D8            push b
2826   1545 07 19 4C      call strcat
2827   1548 51 04 00      add sp, 4
2828   154B             ; --- END FUNCTION CALL
2829   154B             _for81_update:
2830   154B 0A 0F 15      jmp _for81_cond
2831   154E             _for81_exit:
2832   154E             _if80_exit:
2833   154E             ; op = search_opcode(opcode); 
2834   154E FA 87 FF      lea d, [bp + -121] ; $op
2835   1551 DA            push d
2836   1552             ; --- START FUNCTION CALL
2837   1552 FA E1 FF      lea d, [bp + -31] ; $opcode
2838   1555 2D            mov b, d
2839   1556 38 00 00      mov c, 0
2840   1559 FD AB         swp b
2841   155B D8            push b
2842   155C 07 EE 23      call search_opcode
2843   155F 51 02 00      add sp, 2
2844   1562             ; --- END FUNCTION CALL
2845   1562 E7            pop d
2846   1563 FD 28         mov si, b
2847   1565 FD 50         mov di, d
2848   1567 38 1A 00      mov c, 26
2849   156A FD F5         rep movsb
2850   156C             ; instr_len = 1; 
2851   156C FA 85 FF      lea d, [bp + -123] ; $instr_len
2852   156F DA            push d
2853   1570 FD 2E 01 00   mov32 cb, $00000001
2853   1574 00 00 
2854   1576 E7            pop d
2855   1577 FD 43         mov [d], b
2856   1579             ; if(op.opcode_type){ 
2857   1579             _if83_cond:
2858   1579 FA 87 FF      lea d, [bp + -121] ; $op
2859   157C 58 19 00      add d, 25
2860   157F 32            mov bl, [d]
2861   1580 A7 00         mov bh, 0
2862   1582 38 00 00      mov c, 0
2863   1585 C0 00 00      cmp b, 0
2864   1588 C6 B5 15      je _if83_exit
2865   158B             _if83_TRUE:
2866   158B             ; instr_len++; 
2867   158B FA 85 FF      lea d, [bp + -123] ; $instr_len
2868   158E 2A            mov b, [d]
2869   158F 38 00 00      mov c, 0
2870   1592 11            mov a, b
2871   1593 FD 77         inc b
2872   1595 FA 85 FF      lea d, [bp + -123] ; $instr_len
2873   1598 FD 43         mov [d], b
2874   159A 27            mov b, a
2875   159B             ; emit_byte(0xFD, emit_override); 
2876   159B             ; --- START FUNCTION CALL
2877   159B FA 05 00      lea d, [bp + 5] ; $emit_override
2878   159E 32            mov bl, [d]
2879   159F A7 00         mov bh, 0
2880   15A1 38 00 00      mov c, 0
2881   15A4 DD            push bl
2882   15A5 FD 2E FD 00   mov32 cb, $000000fd
2882   15A9 00 00 
2883   15AB DD            push bl
2884   15AC 07 71 27      call emit_byte
2885   15AF 51 02 00      add sp, 2
2886   15B2             ; --- END FUNCTION CALL
2887   15B2 0A B5 15      jmp _if83_exit
2888   15B5             _if83_exit:
2889   15B5             ; emit_byte(op.opcode, emit_override); 
2890   15B5             ; --- START FUNCTION CALL
2891   15B5 FA 05 00      lea d, [bp + 5] ; $emit_override
2892   15B8 32            mov bl, [d]
2893   15B9 A7 00         mov bh, 0
2894   15BB 38 00 00      mov c, 0
2895   15BE DD            push bl
2896   15BF FA 87 FF      lea d, [bp + -121] ; $op
2897   15C2 58 18 00      add d, 24
2898   15C5 32            mov bl, [d]
2899   15C6 A7 00         mov bh, 0
2900   15C8 38 00 00      mov c, 0
2901   15CB DD            push bl
2902   15CC 07 71 27      call emit_byte
2903   15CF 51 02 00      add sp, 2
2904   15D2             ; --- END FUNCTION CALL
2905   15D2             ; if(!emit_override){ 
2906   15D2             _if84_cond:
2907   15D2 FA 05 00      lea d, [bp + 5] ; $emit_override
2908   15D5 32            mov bl, [d]
2909   15D6 A7 00         mov bh, 0
2910   15D8 38 00 00      mov c, 0
2911   15DB C0 00 00      cmp b, 0
2912   15DE C6 0E 16      je _if84_exit
2913   15E1             _if84_TRUE:
2914   15E1             ; printf("%x(%d): %s\n", old_pc, instr_len, code_line); 
2915   15E1             ; --- START FUNCTION CALL
2916   15E1 FA A1 FF      lea d, [bp + -95] ; $code_line
2917   15E4 2D            mov b, d
2918   15E5 38 00 00      mov c, 0
2919   15E8 FD AB         swp b
2920   15EA D8            push b
2921   15EB FA 85 FF      lea d, [bp + -123] ; $instr_len
2922   15EE 2A            mov b, [d]
2923   15EF 38 00 00      mov c, 0
2924   15F2 FD AB         swp b
2925   15F4 D8            push b
2926   15F5 FA 78 FF      lea d, [bp + -136] ; $old_pc
2927   15F8 2A            mov b, [d]
2928   15F9 38 00 00      mov c, 0
2929   15FC FD AB         swp b
2930   15FE D8            push b
2931   15FF 26 4E 51      mov b, _s29 ; "%x(%d): %s\n"
2932   1602 FD AB         swp b
2933   1604 D8            push b
2934   1605 07 99 42      call printf
2935   1608 51 08 00      add sp, 8
2936   160B             ; --- END FUNCTION CALL
2937   160B 0A 0E 16      jmp _if84_exit
2938   160E             _if84_exit:
2939   160E 0A 23 1C      jmp _if79_exit
2940   1611             _if79_else:
2941   1611             ; num_operands = 0; 
2942   1611 FA 83 FF      lea d, [bp + -125] ; $num_operands
2943   1614 DA            push d
2944   1615 FD 2E 00 00   mov32 cb, $00000000
2944   1619 00 00 
2945   161B E7            pop d
2946   161C FD 43         mov [d], b
2947   161E             ; for(;;){ 
2948   161E             _for85_init:
2949   161E             _for85_cond:
2950   161E             _for85_block:
2951   161E             ; get(); 
2952   161E             ; --- START FUNCTION CALL
2953   161E 07 6C 2B      call get
2954   1621             ; if(toktype == END) break; 
2955   1621             _if86_cond:
2956   1621 3B 7D 4E      mov d, _toktype ; $toktype
2957   1624 2A            mov b, [d]
2958   1625 38 00 00      mov c, 0
2959   1628             ; --- START RELATIONAL
2960   1628 D7            push a
2961   1629 11            mov a, b
2962   162A FD 2E 07 00   mov32 cb, $7 ; enum element: END
2962   162E 00 00 
2963   1630 B0            cmp a, b
2964   1631 FD 71         seq ; ==
2965   1633 E4            pop a
2966   1634             ; --- END RELATIONAL
2967   1634 C0 00 00      cmp b, 0
2968   1637 C6 40 16      je _if86_exit
2969   163A             _if86_TRUE:
2970   163A             ; break; 
2971   163A 0A 90 16      jmp _for85_exit ; for break
2972   163D 0A 40 16      jmp _if86_exit
2973   1640             _if86_exit:
2974   1640             ; if(toktype == INTEGER_CONST || label_exists(token) != -1) num_operands++; 
2975   1640             _if87_cond:
2976   1640 3B 7D 4E      mov d, _toktype ; $toktype
2977   1643 2A            mov b, [d]
2978   1644 38 00 00      mov c, 0
2979   1647             ; --- START RELATIONAL
2980   1647 D7            push a
2981   1648 11            mov a, b
2982   1649 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2982   164D 00 00 
2983   164F B0            cmp a, b
2984   1650 FD 71         seq ; ==
2985   1652 E4            pop a
2986   1653             ; --- END RELATIONAL
2987   1653             ; --- START LOGICAL OR
2988   1653 D7            push a
2989   1654 11            mov a, b
2990   1655             ; --- START FUNCTION CALL
2991   1655 3B 81 4E      mov d, _token_data ; $token
2992   1658 2D            mov b, d
2993   1659 38 00 00      mov c, 0
2994   165C FD AB         swp b
2995   165E D8            push b
2996   165F 07 69 23      call label_exists
2997   1662 51 02 00      add sp, 2
2998   1665             ; --- END FUNCTION CALL
2999   1665             ; --- START RELATIONAL
3000   1665 D7            push a
3001   1666 11            mov a, b
3002   1667 FD 2E FF FF   mov32 cb, $ffffffff
3002   166B FF FF 
3003   166D B0            cmp a, b
3004   166E FD 72         sneq ; !=
3005   1670 E4            pop a
3006   1671             ; --- END RELATIONAL
3007   1671 FD A8         sor a, b ; ||
3008   1673 E4            pop a
3009   1674             ; --- END LOGICAL OR
3010   1674 C0 00 00      cmp b, 0
3011   1677 C6 8D 16      je _if87_exit
3012   167A             _if87_TRUE:
3013   167A             ; num_operands++; 
3014   167A FA 83 FF      lea d, [bp + -125] ; $num_operands
3015   167D 2A            mov b, [d]
3016   167E 38 00 00      mov c, 0
3017   1681 11            mov a, b
3018   1682 FD 77         inc b
3019   1684 FA 83 FF      lea d, [bp + -125] ; $num_operands
3020   1687 FD 43         mov [d], b
3021   1689 27            mov b, a
3022   168A 0A 8D 16      jmp _if87_exit
3023   168D             _if87_exit:
3024   168D             _for85_update:
3025   168D 0A 1E 16      jmp _for85_cond
3026   1690             _for85_exit:
3027   1690             ; if(num_operands > 2) error("Maximum number of operands per instruction is 2."); 
3028   1690             _if88_cond:
3029   1690 FA 83 FF      lea d, [bp + -125] ; $num_operands
3030   1693 2A            mov b, [d]
3031   1694 38 00 00      mov c, 0
3032   1697             ; --- START RELATIONAL
3033   1697 D7            push a
3034   1698 11            mov a, b
3035   1699 FD 2E 02 00   mov32 cb, $00000002
3035   169D 00 00 
3036   169F B0            cmp a, b
3037   16A0 FD 7F         sgt ; >
3038   16A2 E4            pop a
3039   16A3             ; --- END RELATIONAL
3040   16A3 C0 00 00      cmp b, 0
3041   16A6 C6 B8 16      je _if88_exit
3042   16A9             _if88_TRUE:
3043   16A9             ; error("Maximum number of operands per instruction is 2."); 
3044   16A9             ; --- START FUNCTION CALL
3045   16A9 26 F0 50      mov b, _s27 ; "Maximum number of operands per instruction is 2."
3046   16AC FD AB         swp b
3047   16AE D8            push b
3048   16AF 07 72 39      call error
3049   16B2 51 02 00      add sp, 2
3050   16B5             ; --- END FUNCTION CALL
3051   16B5 0A B8 16      jmp _if88_exit
3052   16B8             _if88_exit:
3053   16B8             ; num_operandsexp = exp(2, num_operands); 
3054   16B8 FA 81 FF      lea d, [bp + -127] ; $num_operandsexp
3055   16BB DA            push d
3056   16BC             ; --- START FUNCTION CALL
3057   16BC FA 83 FF      lea d, [bp + -125] ; $num_operands
3058   16BF 2A            mov b, [d]
3059   16C0 38 00 00      mov c, 0
3060   16C3 FD AB         swp b
3061   16C5 D8            push b
3062   16C6 FD 2E 02 00   mov32 cb, $00000002
3062   16CA 00 00 
3063   16CC FD AB         swp b
3064   16CE D8            push b
3065   16CF 07 BC 3D      call exp
3066   16D2 51 04 00      add sp, 4
3067   16D5             ; --- END FUNCTION CALL
3068   16D5 E7            pop d
3069   16D6 FD 43         mov [d], b
3070   16D8             ; for(i = 0; i < num_operandsexp; i++){ 
3071   16D8             _for89_init:
3072   16D8 FA 7F FF      lea d, [bp + -129] ; $i
3073   16DB DA            push d
3074   16DC FD 2E 00 00   mov32 cb, $00000000
3074   16E0 00 00 
3075   16E2 E7            pop d
3076   16E3 FD 43         mov [d], b
3077   16E5             _for89_cond:
3078   16E5 FA 7F FF      lea d, [bp + -129] ; $i
3079   16E8 2A            mov b, [d]
3080   16E9 38 00 00      mov c, 0
3081   16EC             ; --- START RELATIONAL
3082   16EC D7            push a
3083   16ED 11            mov a, b
3084   16EE FA 81 FF      lea d, [bp + -127] ; $num_operandsexp
3085   16F1 2A            mov b, [d]
3086   16F2 38 00 00      mov c, 0
3087   16F5 B0            cmp a, b
3088   16F6 FD 73         slt ; < (signed)
3089   16F8 E4            pop a
3090   16F9             ; --- END RELATIONAL
3091   16F9 C0 00 00      cmp b, 0
3092   16FC C6 23 1C      je _for89_exit
3093   16FF             _for89_block:
3094   16FF             ; prog = code_line; 
3095   16FF 3B 7F 4E      mov d, _prog ; $prog
3096   1702 DA            push d
3097   1703 FA A1 FF      lea d, [bp + -95] ; $code_line
3098   1706 2D            mov b, d
3099   1707 38 00 00      mov c, 0
3100   170A E7            pop d
3101   170B FD 43         mov [d], b
3102   170D             ; get(); 
3103   170D             ; --- START FUNCTION CALL
3104   170D 07 6C 2B      call get
3105   1710             ; strcpy(opcode, token); 
3106   1710             ; --- START FUNCTION CALL
3107   1710 3B 81 4E      mov d, _token_data ; $token
3108   1713 2D            mov b, d
3109   1714 38 00 00      mov c, 0
3110   1717 FD AB         swp b
3111   1719 D8            push b
3112   171A FA E1 FF      lea d, [bp + -31] ; $opcode
3113   171D 2D            mov b, d
3114   171E 38 00 00      mov c, 0
3115   1721 FD AB         swp b
3116   1723 D8            push b
3117   1724 07 9F 4B      call strcpy
3118   1727 51 04 00      add sp, 4
3119   172A             ; --- END FUNCTION CALL
3120   172A             ; strcat(opcode, " "); 
3121   172A             ; --- START FUNCTION CALL
3122   172A 26 EE 50      mov b, _s26 ; " "
3123   172D FD AB         swp b
3124   172F D8            push b
3125   1730 FA E1 FF      lea d, [bp + -31] ; $opcode
3126   1733 2D            mov b, d
3127   1734 38 00 00      mov c, 0
3128   1737 FD AB         swp b
3129   1739 D8            push b
3130   173A 07 19 4C      call strcat
3131   173D 51 04 00      add sp, 4
3132   1740             ; --- END FUNCTION CALL
3133   1740             ; j = 0; 
3134   1740 FA 7D FF      lea d, [bp + -131] ; $j
3135   1743 DA            push d
3136   1744 FD 2E 00 00   mov32 cb, $00000000
3136   1748 00 00 
3137   174A E7            pop d
3138   174B FD 43         mov [d], b
3139   174D             ; for(;;){ 
3140   174D             _for90_init:
3141   174D             _for90_cond:
3142   174D             _for90_block:
3143   174D             ; get(); 
3144   174D             ; --- START FUNCTION CALL
3145   174D 07 6C 2B      call get
3146   1750             ; if(toktype == END) break; 
3147   1750             _if91_cond:
3148   1750 3B 7D 4E      mov d, _toktype ; $toktype
3149   1753 2A            mov b, [d]
3150   1754 38 00 00      mov c, 0
3151   1757             ; --- START RELATIONAL
3152   1757 D7            push a
3153   1758 11            mov a, b
3154   1759 FD 2E 07 00   mov32 cb, $7 ; enum element: END
3154   175D 00 00 
3155   175F B0            cmp a, b
3156   1760 FD 71         seq ; ==
3157   1762 E4            pop a
3158   1763             ; --- END RELATIONAL
3159   1763 C0 00 00      cmp b, 0
3160   1766 C6 6F 17      je _if91_exit
3161   1769             _if91_TRUE:
3162   1769             ; break; 
3163   1769 0A E6 18      jmp _for90_exit ; for break
3164   176C 0A 6F 17      jmp _if91_exit
3165   176F             _if91_exit:
3166   176F             ; if(toktype == INTEGER_CONST || label_exists(token) != -1){ 
3167   176F             _if92_cond:
3168   176F 3B 7D 4E      mov d, _toktype ; $toktype
3169   1772 2A            mov b, [d]
3170   1773 38 00 00      mov c, 0
3171   1776             ; --- START RELATIONAL
3172   1776 D7            push a
3173   1777 11            mov a, b
3174   1778 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
3174   177C 00 00 
3175   177E B0            cmp a, b
3176   177F FD 71         seq ; ==
3177   1781 E4            pop a
3178   1782             ; --- END RELATIONAL
3179   1782             ; --- START LOGICAL OR
3180   1782 D7            push a
3181   1783 11            mov a, b
3182   1784             ; --- START FUNCTION CALL
3183   1784 3B 81 4E      mov d, _token_data ; $token
3184   1787 2D            mov b, d
3185   1788 38 00 00      mov c, 0
3186   178B FD AB         swp b
3187   178D D8            push b
3188   178E 07 69 23      call label_exists
3189   1791 51 02 00      add sp, 2
3190   1794             ; --- END FUNCTION CALL
3191   1794             ; --- START RELATIONAL
3192   1794 D7            push a
3193   1795 11            mov a, b
3194   1796 FD 2E FF FF   mov32 cb, $ffffffff
3194   179A FF FF 
3195   179C B0            cmp a, b
3196   179D FD 72         sneq ; !=
3197   179F E4            pop a
3198   17A0             ; --- END RELATIONAL
3199   17A0 FD A8         sor a, b ; ||
3200   17A2 E4            pop a
3201   17A3             ; --- END LOGICAL OR
3202   17A3 C0 00 00      cmp b, 0
3203   17A6 C6 C9 18      je _if92_else
3204   17A9             _if92_TRUE:
3205   17A9             ; strcat(opcode, symbols[i*2+j]); 
3206   17A9             ; --- START FUNCTION CALL
3207   17A9 3B E3 4F      mov d, _symbols_data ; $symbols
3208   17AC D7            push a
3209   17AD DA            push d
3210   17AE FA 7F FF      lea d, [bp + -129] ; $i
3211   17B1 2A            mov b, [d]
3212   17B2 38 00 00      mov c, 0
3213   17B5             ; --- START FACTORS
3214   17B5 D7            push a
3215   17B6 FD D8         push g
3216   17B8 11            mov a, b
3217   17B9 FD 7A         mov g, c
3218   17BB FD 2E 02 00   mov32 cb, $00000002
3218   17BF 00 00 
3219   17C1 D7            push a     ; save left operand
3220   17C2 8E            xor a, b   ; xor sign bits
3221   17C3 FD AA         swp a      ; swap bytes
3222   17C5 83            mov cl, al ; save result of xor into 'dl'
3223   17C6 E4            pop a      ; restore left side operator
3224   17C7 DF            push cl    ; save result of xor above
3225   17C8 FD AA         swp a  
3226   17CA 93 80         test al, $80  
3227   17CC FD AA         swp a  
3228   17CE C6 D3 17      jz skip_invert_a_100  
3229   17D1 FD 95         neg a 
3230   17D3             skip_invert_a_100:   
3231   17D3 FD AB         swp b
3232   17D5 FD 93 80      test bl, $80  
3233   17D8 FD AB         swp b
3234   17DA C6 DF 17      jz skip_invert_b_100  
3235   17DD FD 97         neg b 
3236   17DF             skip_invert_b_100:   
3237   17DF AC            mul a, b ; *
3238   17E0 FD 78         mov g, a
3239   17E2 11            mov a, b
3240   17E3 EA            pop bl
3241   17E4 FD 93 80      test bl, $80
3242   17E7 C6 F4 17      jz _same_signs_100
3243   17EA 2F            mov bl, al
3244   17EB 95            not a
3245   17EC FD 97         neg b
3246   17EE 5B 00 00      adc a, 0
3247   17F1 FD 78         mov g, a
3248   17F3 11            mov a, b
3249   17F4             _same_signs_100:
3250   17F4 FD 38         mov c, g
3251   17F6 27            mov b, a
3252   17F7 FD F1         pop g
3253   17F9 E4            pop a
3254   17FA             ; --- END FACTORS
3255   17FA             ; --- START TERMS
3256   17FA D7            push a
3257   17FB FD D8         push g
3258   17FD 11            mov a, b
3259   17FE FD 7A         mov g, c
3260   1800 FA 7D FF      lea d, [bp + -131] ; $j
3261   1803 2A            mov b, [d]
3262   1804 38 00 00      mov c, 0
3263   1807 38 00 00      mov c, 0
3264   180A FD 15         add32 cb, ga
3265   180C FD F1         pop g
3266   180E E4            pop a
3267   180F             ; --- END TERMS
3268   180F E7            pop d
3269   1810 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3270   1814 E4            pop a
3271   1815 2A            mov b, [d]
3272   1816 38 00 00      mov c, 0
3273   1819 FD AB         swp b
3274   181B D8            push b
3275   181C FA E1 FF      lea d, [bp + -31] ; $opcode
3276   181F 2D            mov b, d
3277   1820 38 00 00      mov c, 0
3278   1823 FD AB         swp b
3279   1825 D8            push b
3280   1826 07 19 4C      call strcat
3281   1829 51 04 00      add sp, 4
3282   182C             ; --- END FUNCTION CALL
3283   182C             ; operand_types[j] = *symbols[i*2+j]; 
3284   182C FA 7A FF      lea d, [bp + -134] ; $operand_types
3285   182F D7            push a
3286   1830 DA            push d
3287   1831 FA 7D FF      lea d, [bp + -131] ; $j
3288   1834 2A            mov b, [d]
3289   1835 38 00 00      mov c, 0
3290   1838 E7            pop d
3291   1839 5A            add d, b
3292   183A E4            pop a
3293   183B DA            push d
3294   183C 3B E3 4F      mov d, _symbols_data ; $symbols
3295   183F D7            push a
3296   1840 DA            push d
3297   1841 FA 7F FF      lea d, [bp + -129] ; $i
3298   1844 2A            mov b, [d]
3299   1845 38 00 00      mov c, 0
3300   1848             ; --- START FACTORS
3301   1848 D7            push a
3302   1849 FD D8         push g
3303   184B 11            mov a, b
3304   184C FD 7A         mov g, c
3305   184E FD 2E 02 00   mov32 cb, $00000002
3305   1852 00 00 
3306   1854 D7            push a     ; save left operand
3307   1855 8E            xor a, b   ; xor sign bits
3308   1856 FD AA         swp a      ; swap bytes
3309   1858 83            mov cl, al ; save result of xor into 'dl'
3310   1859 E4            pop a      ; restore left side operator
3311   185A DF            push cl    ; save result of xor above
3312   185B FD AA         swp a  
3313   185D 93 80         test al, $80  
3314   185F FD AA         swp a  
3315   1861 C6 66 18      jz skip_invert_a_104  
3316   1864 FD 95         neg a 
3317   1866             skip_invert_a_104:   
3318   1866 FD AB         swp b
3319   1868 FD 93 80      test bl, $80  
3320   186B FD AB         swp b
3321   186D C6 72 18      jz skip_invert_b_104  
3322   1870 FD 97         neg b 
3323   1872             skip_invert_b_104:   
3324   1872 AC            mul a, b ; *
3325   1873 FD 78         mov g, a
3326   1875 11            mov a, b
3327   1876 EA            pop bl
3328   1877 FD 93 80      test bl, $80
3329   187A C6 87 18      jz _same_signs_104
3330   187D 2F            mov bl, al
3331   187E 95            not a
3332   187F FD 97         neg b
3333   1881 5B 00 00      adc a, 0
3334   1884 FD 78         mov g, a
3335   1886 11            mov a, b
3336   1887             _same_signs_104:
3337   1887 FD 38         mov c, g
3338   1889 27            mov b, a
3339   188A FD F1         pop g
3340   188C E4            pop a
3341   188D             ; --- END FACTORS
3342   188D             ; --- START TERMS
3343   188D D7            push a
3344   188E FD D8         push g
3345   1890 11            mov a, b
3346   1891 FD 7A         mov g, c
3347   1893 FA 7D FF      lea d, [bp + -131] ; $j
3348   1896 2A            mov b, [d]
3349   1897 38 00 00      mov c, 0
3350   189A 38 00 00      mov c, 0
3351   189D FD 15         add32 cb, ga
3352   189F FD F1         pop g
3353   18A1 E4            pop a
3354   18A2             ; --- END TERMS
3355   18A2 E7            pop d
3356   18A3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3357   18A7 E4            pop a
3358   18A8 2A            mov b, [d]
3359   18A9 38 00 00      mov c, 0
3360   18AC 74            mov d, b
3361   18AD 32            mov bl, [d]
3362   18AE A7 00         mov bh, 0
3363   18B0 38 00 00      mov c, 0
3364   18B3 E7            pop d
3365   18B4 FD 3E         mov [d], bl
3366   18B6             ; j++; 
3367   18B6 FA 7D FF      lea d, [bp + -131] ; $j
3368   18B9 2A            mov b, [d]
3369   18BA 38 00 00      mov c, 0
3370   18BD 11            mov a, b
3371   18BE FD 77         inc b
3372   18C0 FA 7D FF      lea d, [bp + -131] ; $j
3373   18C3 FD 43         mov [d], b
3374   18C5 27            mov b, a
3375   18C6 0A E3 18      jmp _if92_exit
3376   18C9             _if92_else:
3377   18C9             ; strcat(opcode, token); 
3378   18C9             ; --- START FUNCTION CALL
3379   18C9 3B 81 4E      mov d, _token_data ; $token
3380   18CC 2D            mov b, d
3381   18CD 38 00 00      mov c, 0
3382   18D0 FD AB         swp b
3383   18D2 D8            push b
3384   18D3 FA E1 FF      lea d, [bp + -31] ; $opcode
3385   18D6 2D            mov b, d
3386   18D7 38 00 00      mov c, 0
3387   18DA FD AB         swp b
3388   18DC D8            push b
3389   18DD 07 19 4C      call strcat
3390   18E0 51 04 00      add sp, 4
3391   18E3             ; --- END FUNCTION CALL
3392   18E3             _if92_exit:
3393   18E3             _for90_update:
3394   18E3 0A 4D 17      jmp _for90_cond
3395   18E6             _for90_exit:
3396   18E6             ; op = search_opcode(opcode); 
3397   18E6 FA 87 FF      lea d, [bp + -121] ; $op
3398   18E9 DA            push d
3399   18EA             ; --- START FUNCTION CALL
3400   18EA FA E1 FF      lea d, [bp + -31] ; $opcode
3401   18ED 2D            mov b, d
3402   18EE 38 00 00      mov c, 0
3403   18F1 FD AB         swp b
3404   18F3 D8            push b
3405   18F4 07 EE 23      call search_opcode
3406   18F7 51 02 00      add sp, 2
3407   18FA             ; --- END FUNCTION CALL
3408   18FA E7            pop d
3409   18FB FD 28         mov si, b
3410   18FD FD 50         mov di, d
3411   18FF 38 1A 00      mov c, 26
3412   1902 FD F5         rep movsb
3413   1904             ; if(op.name[0] == '\0') continue; 
3414   1904             _if105_cond:
3415   1904 FA 87 FF      lea d, [bp + -121] ; $op
3416   1907 58 00 00      add d, 0
3417   190A D7            push a
3418   190B DA            push d
3419   190C FD 2E 00 00   mov32 cb, $00000000
3419   1910 00 00 
3420   1912 E7            pop d
3421   1913 5A            add d, b
3422   1914 E4            pop a
3423   1915 32            mov bl, [d]
3424   1916 A7 00         mov bh, 0
3425   1918 38 00 00      mov c, 0
3426   191B             ; --- START RELATIONAL
3427   191B D7            push a
3428   191C 11            mov a, b
3429   191D FD 2E 00 00   mov32 cb, $00000000
3429   1921 00 00 
3430   1923 B0            cmp a, b
3431   1924 FD 71         seq ; ==
3432   1926 E4            pop a
3433   1927             ; --- END RELATIONAL
3434   1927 C0 00 00      cmp b, 0
3435   192A C6 33 19      je _if105_exit
3436   192D             _if105_TRUE:
3437   192D             ; continue; 
3438   192D 0A 10 1C      jmp _for89_update ; for continue
3439   1930 0A 33 19      jmp _if105_exit
3440   1933             _if105_exit:
3441   1933             ; instr_len = 1; 
3442   1933 FA 85 FF      lea d, [bp + -123] ; $instr_len
3443   1936 DA            push d
3444   1937 FD 2E 01 00   mov32 cb, $00000001
3444   193B 00 00 
3445   193D E7            pop d
3446   193E FD 43         mov [d], b
3447   1940             ; if(op.opcode_type){ 
3448   1940             _if106_cond:
3449   1940 FA 87 FF      lea d, [bp + -121] ; $op
3450   1943 58 19 00      add d, 25
3451   1946 32            mov bl, [d]
3452   1947 A7 00         mov bh, 0
3453   1949 38 00 00      mov c, 0
3454   194C C0 00 00      cmp b, 0
3455   194F C6 7C 19      je _if106_exit
3456   1952             _if106_TRUE:
3457   1952             ; emit_byte(0xFD, emit_override); 
3458   1952             ; --- START FUNCTION CALL
3459   1952 FA 05 00      lea d, [bp + 5] ; $emit_override
3460   1955 32            mov bl, [d]
3461   1956 A7 00         mov bh, 0
3462   1958 38 00 00      mov c, 0
3463   195B DD            push bl
3464   195C FD 2E FD 00   mov32 cb, $000000fd
3464   1960 00 00 
3465   1962 DD            push bl
3466   1963 07 71 27      call emit_byte
3467   1966 51 02 00      add sp, 2
3468   1969             ; --- END FUNCTION CALL
3469   1969             ; instr_len++; 
3470   1969 FA 85 FF      lea d, [bp + -123] ; $instr_len
3471   196C 2A            mov b, [d]
3472   196D 38 00 00      mov c, 0
3473   1970 11            mov a, b
3474   1971 FD 77         inc b
3475   1973 FA 85 FF      lea d, [bp + -123] ; $instr_len
3476   1976 FD 43         mov [d], b
3477   1978 27            mov b, a
3478   1979 0A 7C 19      jmp _if106_exit
3479   197C             _if106_exit:
3480   197C             ; emit_byte(op.opcode, emit_override); 
3481   197C             ; --- START FUNCTION CALL
3482   197C FA 05 00      lea d, [bp + 5] ; $emit_override
3483   197F 32            mov bl, [d]
3484   1980 A7 00         mov bh, 0
3485   1982 38 00 00      mov c, 0
3486   1985 DD            push bl
3487   1986 FA 87 FF      lea d, [bp + -121] ; $op
3488   1989 58 18 00      add d, 24
3489   198C 32            mov bl, [d]
3490   198D A7 00         mov bh, 0
3491   198F 38 00 00      mov c, 0
3492   1992 DD            push bl
3493   1993 07 71 27      call emit_byte
3494   1996 51 02 00      add sp, 2
3495   1999             ; --- END FUNCTION CALL
3496   1999             ; prog = code_line; 
3497   1999 3B 7F 4E      mov d, _prog ; $prog
3498   199C DA            push d
3499   199D FA A1 FF      lea d, [bp + -95] ; $code_line
3500   19A0 2D            mov b, d
3501   19A1 38 00 00      mov c, 0
3502   19A4 E7            pop d
3503   19A5 FD 43         mov [d], b
3504   19A7             ; j = 0; 
3505   19A7 FA 7D FF      lea d, [bp + -131] ; $j
3506   19AA DA            push d
3507   19AB FD 2E 00 00   mov32 cb, $00000000
3507   19AF 00 00 
3508   19B1 E7            pop d
3509   19B2 FD 43         mov [d], b
3510   19B4             ; get(); 
3511   19B4             ; --- START FUNCTION CALL
3512   19B4 07 6C 2B      call get
3513   19B7             ; for(;;){ 
3514   19B7             _for107_init:
3515   19B7             _for107_cond:
3516   19B7             _for107_block:
3517   19B7             ; get(); 
3518   19B7             ; --- START FUNCTION CALL
3519   19B7 07 6C 2B      call get
3520   19BA             ; if(toktype == END) break; 
3521   19BA             _if108_cond:
3522   19BA 3B 7D 4E      mov d, _toktype ; $toktype
3523   19BD 2A            mov b, [d]
3524   19BE 38 00 00      mov c, 0
3525   19C1             ; --- START RELATIONAL
3526   19C1 D7            push a
3527   19C2 11            mov a, b
3528   19C3 FD 2E 07 00   mov32 cb, $7 ; enum element: END
3528   19C7 00 00 
3529   19C9 B0            cmp a, b
3530   19CA FD 71         seq ; ==
3531   19CC E4            pop a
3532   19CD             ; --- END RELATIONAL
3533   19CD C0 00 00      cmp b, 0
3534   19D0 C6 D9 19      je _if108_exit
3535   19D3             _if108_TRUE:
3536   19D3             ; break; 
3537   19D3 0A D1 1B      jmp _for107_exit ; for break
3538   19D6 0A D9 19      jmp _if108_exit
3539   19D9             _if108_exit:
3540   19D9             ; if(toktype == IDENTIFIER){ 
3541   19D9             _if109_cond:
3542   19D9 3B 7D 4E      mov d, _toktype ; $toktype
3543   19DC 2A            mov b, [d]
3544   19DD 38 00 00      mov c, 0
3545   19E0             ; --- START RELATIONAL
3546   19E0 D7            push a
3547   19E1 11            mov a, b
3548   19E2 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
3548   19E6 00 00 
3549   19E8 B0            cmp a, b
3550   19E9 FD 71         seq ; ==
3551   19EB E4            pop a
3552   19EC             ; --- END RELATIONAL
3553   19EC C0 00 00      cmp b, 0
3554   19EF C6 F4 1A      je _if109_else
3555   19F2             _if109_TRUE:
3556   19F2             ; if(label_exists(token) != -1){ 
3557   19F2             _if110_cond:
3558   19F2             ; --- START FUNCTION CALL
3559   19F2 3B 81 4E      mov d, _token_data ; $token
3560   19F5 2D            mov b, d
3561   19F6 38 00 00      mov c, 0
3562   19F9 FD AB         swp b
3563   19FB D8            push b
3564   19FC 07 69 23      call label_exists
3565   19FF 51 02 00      add sp, 2
3566   1A02             ; --- END FUNCTION CALL
3567   1A02             ; --- START RELATIONAL
3568   1A02 D7            push a
3569   1A03 11            mov a, b
3570   1A04 FD 2E FF FF   mov32 cb, $ffffffff
3570   1A08 FF FF 
3571   1A0A B0            cmp a, b
3572   1A0B FD 72         sneq ; !=
3573   1A0D E4            pop a
3574   1A0E             ; --- END RELATIONAL
3575   1A0E C0 00 00      cmp b, 0
3576   1A11 C6 C2 1A      je _if110_else
3577   1A14             _if110_TRUE:
3578   1A14             ; if(operand_types[j] == '#'){ 
3579   1A14             _if111_cond:
3580   1A14 FA 7A FF      lea d, [bp + -134] ; $operand_types
3581   1A17 D7            push a
3582   1A18 DA            push d
3583   1A19 FA 7D FF      lea d, [bp + -131] ; $j
3584   1A1C 2A            mov b, [d]
3585   1A1D 38 00 00      mov c, 0
3586   1A20 E7            pop d
3587   1A21 5A            add d, b
3588   1A22 E4            pop a
3589   1A23 32            mov bl, [d]
3590   1A24 A7 00         mov bh, 0
3591   1A26 38 00 00      mov c, 0
3592   1A29             ; --- START RELATIONAL
3593   1A29 D7            push a
3594   1A2A 11            mov a, b
3595   1A2B FD 2E 23 00   mov32 cb, $00000023
3595   1A2F 00 00 
3596   1A31 B0            cmp a, b
3597   1A32 FD 71         seq ; ==
3598   1A34 E4            pop a
3599   1A35             ; --- END RELATIONAL
3600   1A35 C0 00 00      cmp b, 0
3601   1A38 C6 4A 1A      je _if111_else
3602   1A3B             _if111_TRUE:
3603   1A3B             ; error("8bit operand expected but 16bit label given."); 
3604   1A3B             ; --- START FUNCTION CALL
3605   1A3B 26 21 51      mov b, _s28 ; "8bit operand expected but 16bit label given."
3606   1A3E FD AB         swp b
3607   1A40 D8            push b
3608   1A41 07 72 39      call error
3609   1A44 51 02 00      add sp, 2
3610   1A47             ; --- END FUNCTION CALL
3611   1A47 0A AF 1A      jmp _if111_exit
3612   1A4A             _if111_else:
3613   1A4A             ; if(operand_types[j] == '@'){ 
3614   1A4A             _if112_cond:
3615   1A4A FA 7A FF      lea d, [bp + -134] ; $operand_types
3616   1A4D D7            push a
3617   1A4E DA            push d
3618   1A4F FA 7D FF      lea d, [bp + -131] ; $j
3619   1A52 2A            mov b, [d]
3620   1A53 38 00 00      mov c, 0
3621   1A56 E7            pop d
3622   1A57 5A            add d, b
3623   1A58 E4            pop a
3624   1A59 32            mov bl, [d]
3625   1A5A A7 00         mov bh, 0
3626   1A5C 38 00 00      mov c, 0
3627   1A5F             ; --- START RELATIONAL
3628   1A5F D7            push a
3629   1A60 11            mov a, b
3630   1A61 FD 2E 40 00   mov32 cb, $00000040
3630   1A65 00 00 
3631   1A67 B0            cmp a, b
3632   1A68 FD 71         seq ; ==
3633   1A6A E4            pop a
3634   1A6B             ; --- END RELATIONAL
3635   1A6B C0 00 00      cmp b, 0
3636   1A6E C6 AF 1A      je _if112_exit
3637   1A71             _if112_TRUE:
3638   1A71             ; emit_word(get_label_addr(token), emit_override); 
3639   1A71             ; --- START FUNCTION CALL
3640   1A71 FA 05 00      lea d, [bp + 5] ; $emit_override
3641   1A74 32            mov bl, [d]
3642   1A75 A7 00         mov bh, 0
3643   1A77 38 00 00      mov c, 0
3644   1A7A DD            push bl
3645   1A7B             ; --- START FUNCTION CALL
3646   1A7B 3B 81 4E      mov d, _token_data ; $token
3647   1A7E 2D            mov b, d
3648   1A7F 38 00 00      mov c, 0
3649   1A82 FD AB         swp b
3650   1A84 D8            push b
3651   1A85 07 C2 22      call get_label_addr
3652   1A88 51 02 00      add sp, 2
3653   1A8B             ; --- END FUNCTION CALL
3654   1A8B FD AB         swp b
3655   1A8D D8            push b
3656   1A8E 07 A9 27      call emit_word
3657   1A91 51 03 00      add sp, 3
3658   1A94             ; --- END FUNCTION CALL
3659   1A94             ; instr_len = instr_len + 2; 
3660   1A94 FA 85 FF      lea d, [bp + -123] ; $instr_len
3661   1A97 DA            push d
3662   1A98 FA 85 FF      lea d, [bp + -123] ; $instr_len
3663   1A9B 2A            mov b, [d]
3664   1A9C 38 00 00      mov c, 0
3665   1A9F             ; --- START TERMS
3666   1A9F D7            push a
3667   1AA0 11            mov a, b
3668   1AA1 FD 2E 02 00   mov32 cb, $00000002
3668   1AA5 00 00 
3669   1AA7 56            add b, a
3670   1AA8 E4            pop a
3671   1AA9             ; --- END TERMS
3672   1AA9 E7            pop d
3673   1AAA FD 43         mov [d], b
3674   1AAC 0A AF 1A      jmp _if112_exit
3675   1AAF             _if112_exit:
3676   1AAF             _if111_exit:
3677   1AAF             ; j++; 
3678   1AAF FA 7D FF      lea d, [bp + -131] ; $j
3679   1AB2 2A            mov b, [d]
3680   1AB3 38 00 00      mov c, 0
3681   1AB6 11            mov a, b
3682   1AB7 FD 77         inc b
3683   1AB9 FA 7D FF      lea d, [bp + -131] ; $j
3684   1ABC FD 43         mov [d], b
3685   1ABE 27            mov b, a
3686   1ABF 0A F1 1A      jmp _if110_exit
3687   1AC2             _if110_else:
3688   1AC2             ; if(!is_reserved(token)){ 
3689   1AC2             _if113_cond:
3690   1AC2             ; --- START FUNCTION CALL
3691   1AC2 3B 81 4E      mov d, _token_data ; $token
3692   1AC5 2D            mov b, d
3693   1AC6 38 00 00      mov c, 0
3694   1AC9 FD AB         swp b
3695   1ACB D8            push b
3696   1ACC 07 10 1F      call is_reserved
3697   1ACF 51 02 00      add sp, 2
3698   1AD2             ; --- END FUNCTION CALL
3699   1AD2 C0 00 00      cmp b, 0
3700   1AD5 C6 F1 1A      je _if113_exit
3701   1AD8             _if113_TRUE:
3702   1AD8             ; error_s("Undeclared label: ", token); 
3703   1AD8             ; --- START FUNCTION CALL
3704   1AD8 3B 81 4E      mov d, _token_data ; $token
3705   1ADB 2D            mov b, d
3706   1ADC 38 00 00      mov c, 0
3707   1ADF FD AB         swp b
3708   1AE1 D8            push b
3709   1AE2 26 5A 51      mov b, _s30 ; "Undeclared label: "
3710   1AE5 FD AB         swp b
3711   1AE7 D8            push b
3712   1AE8 07 9C 39      call error_s
3713   1AEB 51 04 00      add sp, 4
3714   1AEE             ; --- END FUNCTION CALL
3715   1AEE 0A F1 1A      jmp _if113_exit
3716   1AF1             _if113_exit:
3717   1AF1             _if110_exit:
3718   1AF1 0A CE 1B      jmp _if109_exit
3719   1AF4             _if109_else:
3720   1AF4             ; if(toktype == INTEGER_CONST){ 
3721   1AF4             _if114_cond:
3722   1AF4 3B 7D 4E      mov d, _toktype ; $toktype
3723   1AF7 2A            mov b, [d]
3724   1AF8 38 00 00      mov c, 0
3725   1AFB             ; --- START RELATIONAL
3726   1AFB D7            push a
3727   1AFC 11            mov a, b
3728   1AFD FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
3728   1B01 00 00 
3729   1B03 B0            cmp a, b
3730   1B04 FD 71         seq ; ==
3731   1B06 E4            pop a
3732   1B07             ; --- END RELATIONAL
3733   1B07 C0 00 00      cmp b, 0
3734   1B0A C6 CE 1B      je _if114_exit
3735   1B0D             _if114_TRUE:
3736   1B0D             ; if(operand_types[j] == '#'){ 
3737   1B0D             _if115_cond:
3738   1B0D FA 7A FF      lea d, [bp + -134] ; $operand_types
3739   1B10 D7            push a
3740   1B11 DA            push d
3741   1B12 FA 7D FF      lea d, [bp + -131] ; $j
3742   1B15 2A            mov b, [d]
3743   1B16 38 00 00      mov c, 0
3744   1B19 E7            pop d
3745   1B1A 5A            add d, b
3746   1B1B E4            pop a
3747   1B1C 32            mov bl, [d]
3748   1B1D A7 00         mov bh, 0
3749   1B1F 38 00 00      mov c, 0
3750   1B22             ; --- START RELATIONAL
3751   1B22 D7            push a
3752   1B23 11            mov a, b
3753   1B24 FD 2E 23 00   mov32 cb, $00000023
3753   1B28 00 00 
3754   1B2A B0            cmp a, b
3755   1B2B FD 71         seq ; ==
3756   1B2D E4            pop a
3757   1B2E             ; --- END RELATIONAL
3758   1B2E C0 00 00      cmp b, 0
3759   1B31 C6 5F 1B      je _if115_else
3760   1B34             _if115_TRUE:
3761   1B34             ; emit_byte(int_const, emit_override); 
3762   1B34             ; --- START FUNCTION CALL
3763   1B34 FA 05 00      lea d, [bp + 5] ; $emit_override
3764   1B37 32            mov bl, [d]
3765   1B38 A7 00         mov bh, 0
3766   1B3A 38 00 00      mov c, 0
3767   1B3D DD            push bl
3768   1B3E 3B C1 4F      mov d, _int_const ; $int_const
3769   1B41 2A            mov b, [d]
3770   1B42 38 00 00      mov c, 0
3771   1B45 DD            push bl
3772   1B46 07 71 27      call emit_byte
3773   1B49 51 02 00      add sp, 2
3774   1B4C             ; --- END FUNCTION CALL
3775   1B4C             ; instr_len++; 
3776   1B4C FA 85 FF      lea d, [bp + -123] ; $instr_len
3777   1B4F 2A            mov b, [d]
3778   1B50 38 00 00      mov c, 0
3779   1B53 11            mov a, b
3780   1B54 FD 77         inc b
3781   1B56 FA 85 FF      lea d, [bp + -123] ; $instr_len
3782   1B59 FD 43         mov [d], b
3783   1B5B 27            mov b, a
3784   1B5C 0A BB 1B      jmp _if115_exit
3785   1B5F             _if115_else:
3786   1B5F             ; if(operand_types[j] == '@'){ 
3787   1B5F             _if116_cond:
3788   1B5F FA 7A FF      lea d, [bp + -134] ; $operand_types
3789   1B62 D7            push a
3790   1B63 DA            push d
3791   1B64 FA 7D FF      lea d, [bp + -131] ; $j
3792   1B67 2A            mov b, [d]
3793   1B68 38 00 00      mov c, 0
3794   1B6B E7            pop d
3795   1B6C 5A            add d, b
3796   1B6D E4            pop a
3797   1B6E 32            mov bl, [d]
3798   1B6F A7 00         mov bh, 0
3799   1B71 38 00 00      mov c, 0
3800   1B74             ; --- START RELATIONAL
3801   1B74 D7            push a
3802   1B75 11            mov a, b
3803   1B76 FD 2E 40 00   mov32 cb, $00000040
3803   1B7A 00 00 
3804   1B7C B0            cmp a, b
3805   1B7D FD 71         seq ; ==
3806   1B7F E4            pop a
3807   1B80             ; --- END RELATIONAL
3808   1B80 C0 00 00      cmp b, 0
3809   1B83 C6 BB 1B      je _if116_exit
3810   1B86             _if116_TRUE:
3811   1B86             ; emit_word(int_const, emit_override); 
3812   1B86             ; --- START FUNCTION CALL
3813   1B86 FA 05 00      lea d, [bp + 5] ; $emit_override
3814   1B89 32            mov bl, [d]
3815   1B8A A7 00         mov bh, 0
3816   1B8C 38 00 00      mov c, 0
3817   1B8F DD            push bl
3818   1B90 3B C1 4F      mov d, _int_const ; $int_const
3819   1B93 2A            mov b, [d]
3820   1B94 38 00 00      mov c, 0
3821   1B97 FD AB         swp b
3822   1B99 D8            push b
3823   1B9A 07 A9 27      call emit_word
3824   1B9D 51 03 00      add sp, 3
3825   1BA0             ; --- END FUNCTION CALL
3826   1BA0             ; instr_len = instr_len + 2; 
3827   1BA0 FA 85 FF      lea d, [bp + -123] ; $instr_len
3828   1BA3 DA            push d
3829   1BA4 FA 85 FF      lea d, [bp + -123] ; $instr_len
3830   1BA7 2A            mov b, [d]
3831   1BA8 38 00 00      mov c, 0
3832   1BAB             ; --- START TERMS
3833   1BAB D7            push a
3834   1BAC 11            mov a, b
3835   1BAD FD 2E 02 00   mov32 cb, $00000002
3835   1BB1 00 00 
3836   1BB3 56            add b, a
3837   1BB4 E4            pop a
3838   1BB5             ; --- END TERMS
3839   1BB5 E7            pop d
3840   1BB6 FD 43         mov [d], b
3841   1BB8 0A BB 1B      jmp _if116_exit
3842   1BBB             _if116_exit:
3843   1BBB             _if115_exit:
3844   1BBB             ; j++; 
3845   1BBB FA 7D FF      lea d, [bp + -131] ; $j
3846   1BBE 2A            mov b, [d]
3847   1BBF 38 00 00      mov c, 0
3848   1BC2 11            mov a, b
3849   1BC3 FD 77         inc b
3850   1BC5 FA 7D FF      lea d, [bp + -131] ; $j
3851   1BC8 FD 43         mov [d], b
3852   1BCA 27            mov b, a
3853   1BCB 0A CE 1B      jmp _if114_exit
3854   1BCE             _if114_exit:
3855   1BCE             _if109_exit:
3856   1BCE             _for107_update:
3857   1BCE 0A B7 19      jmp _for107_cond
3858   1BD1             _for107_exit:
3859   1BD1             ; if(!emit_override){ 
3860   1BD1             _if117_cond:
3861   1BD1 FA 05 00      lea d, [bp + 5] ; $emit_override
3862   1BD4 32            mov bl, [d]
3863   1BD5 A7 00         mov bh, 0
3864   1BD7 38 00 00      mov c, 0
3865   1BDA C0 00 00      cmp b, 0
3866   1BDD C6 0D 1C      je _if117_exit
3867   1BE0             _if117_TRUE:
3868   1BE0             ; printf("%x(%d): %s\n", old_pc, instr_len, code_line); 
3869   1BE0             ; --- START FUNCTION CALL
3870   1BE0 FA A1 FF      lea d, [bp + -95] ; $code_line
3871   1BE3 2D            mov b, d
3872   1BE4 38 00 00      mov c, 0
3873   1BE7 FD AB         swp b
3874   1BE9 D8            push b
3875   1BEA FA 85 FF      lea d, [bp + -123] ; $instr_len
3876   1BED 2A            mov b, [d]
3877   1BEE 38 00 00      mov c, 0
3878   1BF1 FD AB         swp b
3879   1BF3 D8            push b
3880   1BF4 FA 78 FF      lea d, [bp + -136] ; $old_pc
3881   1BF7 2A            mov b, [d]
3882   1BF8 38 00 00      mov c, 0
3883   1BFB FD AB         swp b
3884   1BFD D8            push b
3885   1BFE 26 4E 51      mov b, _s29 ; "%x(%d): %s\n"
3886   1C01 FD AB         swp b
3887   1C03 D8            push b
3888   1C04 07 99 42      call printf
3889   1C07 51 08 00      add sp, 8
3890   1C0A             ; --- END FUNCTION CALL
3891   1C0A 0A 0D 1C      jmp _if117_exit
3892   1C0D             _if117_exit:
3893   1C0D             ; break; 
3894   1C0D 0A 23 1C      jmp _for89_exit ; for break
3895   1C10             _for89_update:
3896   1C10 FA 7F FF      lea d, [bp + -129] ; $i
3897   1C13 2A            mov b, [d]
3898   1C14 38 00 00      mov c, 0
3899   1C17 11            mov a, b
3900   1C18 FD 77         inc b
3901   1C1A FA 7F FF      lea d, [bp + -129] ; $i
3902   1C1D FD 43         mov [d], b
3903   1C1F 27            mov b, a
3904   1C20 0A E5 16      jmp _for89_cond
3905   1C23             _for89_exit:
3906   1C23             _if79_exit:
3907   1C23             ; pop_prog(); 
3908   1C23             ; --- START FUNCTION CALL
3909   1C23 07 2A 3A      call pop_prog
3910   1C26 F9            leave
3911   1C27 09            ret
3912   1C28             
3913   1C28             parse_text:
3914   1C28 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3915   1C2B             ; char *temp_prog; 
3916   1C2B 52 02 00      sub sp, 2
3917   1C2E             ; print("Parsing TEXT section...\n"); 
3918   1C2E             ; --- START FUNCTION CALL
3919   1C2E 26 6D 51      mov b, _s31 ; "Parsing TEXT section...\n"
3920   1C31 FD AB         swp b
3921   1C33 D8            push b
3922   1C34 07 69 3E      call print
3923   1C37 51 02 00      add sp, 2
3924   1C3A             ; --- END FUNCTION CALL
3925   1C3A             ; prog = program; 
3926   1C3A 3B 7F 4E      mov d, _prog ; $prog
3927   1C3D DA            push d
3928   1C3E 3B C3 4F      mov d, _program ; $program
3929   1C41 2A            mov b, [d]
3930   1C42 38 00 00      mov c, 0
3931   1C45 E7            pop d
3932   1C46 FD 43         mov [d], b
3933   1C48             ; bin_p = bin_out + _org; 
3934   1C48 3B C7 4F      mov d, _bin_p ; $bin_p
3935   1C4B DA            push d
3936   1C4C 3B C5 4F      mov d, _bin_out ; $bin_out
3937   1C4F 2A            mov b, [d]
3938   1C50 38 00 00      mov c, 0
3939   1C53             ; --- START TERMS
3940   1C53 D7            push a
3941   1C54 11            mov a, b
3942   1C55 3B 76 4E      mov d, __org ; $_org
3943   1C58 2A            mov b, [d]
3944   1C59 38 00 00      mov c, 0
3945   1C5C 56            add b, a
3946   1C5D E4            pop a
3947   1C5E             ; --- END TERMS
3948   1C5E E7            pop d
3949   1C5F FD 43         mov [d], b
3950   1C61             ; pc = _org; 
3951   1C61 3B 78 4E      mov d, _pc ; $pc
3952   1C64 DA            push d
3953   1C65 3B 76 4E      mov d, __org ; $_org
3954   1C68 2A            mov b, [d]
3955   1C69 38 00 00      mov c, 0
3956   1C6C E7            pop d
3957   1C6D FD 43         mov [d], b
3958   1C6F             ; for(;;){ 
3959   1C6F             _for118_init:
3960   1C6F             _for118_cond:
3961   1C6F             _for118_block:
3962   1C6F             ; get(); 
3963   1C6F             ; --- START FUNCTION CALL
3964   1C6F 07 6C 2B      call get
3965   1C72             ; if(toktype == END) error("TEXT section not found."); 
3966   1C72             _if119_cond:
3967   1C72 3B 7D 4E      mov d, _toktype ; $toktype
3968   1C75 2A            mov b, [d]
3969   1C76 38 00 00      mov c, 0
3970   1C79             ; --- START RELATIONAL
3971   1C79 D7            push a
3972   1C7A 11            mov a, b
3973   1C7B FD 2E 07 00   mov32 cb, $7 ; enum element: END
3973   1C7F 00 00 
3974   1C81 B0            cmp a, b
3975   1C82 FD 71         seq ; ==
3976   1C84 E4            pop a
3977   1C85             ; --- END RELATIONAL
3978   1C85 C0 00 00      cmp b, 0
3979   1C88 C6 9A 1C      je _if119_exit
3980   1C8B             _if119_TRUE:
3981   1C8B             ; error("TEXT section not found."); 
3982   1C8B             ; --- START FUNCTION CALL
3983   1C8B 26 86 51      mov b, _s32 ; "TEXT section not found."
3984   1C8E FD AB         swp b
3985   1C90 D8            push b
3986   1C91 07 72 39      call error
3987   1C94 51 02 00      add sp, 2
3988   1C97             ; --- END FUNCTION CALL
3989   1C97 0A 9A 1C      jmp _if119_exit
3990   1C9A             _if119_exit:
3991   1C9A             ; if(tok == TEXT){ 
3992   1C9A             _if120_cond:
3993   1C9A 3B 7B 4E      mov d, _tok ; $tok
3994   1C9D 2A            mov b, [d]
3995   1C9E 38 00 00      mov c, 0
3996   1CA1             ; --- START RELATIONAL
3997   1CA1 D7            push a
3998   1CA2 11            mov a, b
3999   1CA3 FD 2E 04 00   mov32 cb, $4 ; enum element: TEXT
3999   1CA7 00 00 
4000   1CA9 B0            cmp a, b
4001   1CAA FD 71         seq ; ==
4002   1CAC E4            pop a
4003   1CAD             ; --- END RELATIONAL
4004   1CAD C0 00 00      cmp b, 0
4005   1CB0 C6 B9 1C      je _if120_exit
4006   1CB3             _if120_TRUE:
4007   1CB3             ; break; 
4008   1CB3 0A BC 1C      jmp _for118_exit ; for break
4009   1CB6 0A B9 1C      jmp _if120_exit
4010   1CB9             _if120_exit:
4011   1CB9             _for118_update:
4012   1CB9 0A 6F 1C      jmp _for118_cond
4013   1CBC             _for118_exit:
4014   1CBC             ; for(;;){ 
4015   1CBC             _for121_init:
4016   1CBC             _for121_cond:
4017   1CBC             _for121_block:
4018   1CBC             ; get(); back(); 
4019   1CBC             ; --- START FUNCTION CALL
4020   1CBC 07 6C 2B      call get
4021   1CBF             ; back(); 
4022   1CBF             ; --- START FUNCTION CALL
4023   1CBF 07 DF 27      call back
4024   1CC2             ; temp_prog = prog; 
4025   1CC2 FA FF FF      lea d, [bp + -1] ; $temp_prog
4026   1CC5 DA            push d
4027   1CC6 3B 7F 4E      mov d, _prog ; $prog
4028   1CC9 2A            mov b, [d]
4029   1CCA 38 00 00      mov c, 0
4030   1CCD E7            pop d
4031   1CCE FD 43         mov [d], b
4032   1CD0             ; get(); 
4033   1CD0             ; --- START FUNCTION CALL
4034   1CD0 07 6C 2B      call get
4035   1CD3             ; if(toktype == END) error("TEXT section end not found."); 
4036   1CD3             _if122_cond:
4037   1CD3 3B 7D 4E      mov d, _toktype ; $toktype
4038   1CD6 2A            mov b, [d]
4039   1CD7 38 00 00      mov c, 0
4040   1CDA             ; --- START RELATIONAL
4041   1CDA D7            push a
4042   1CDB 11            mov a, b
4043   1CDC FD 2E 07 00   mov32 cb, $7 ; enum element: END
4043   1CE0 00 00 
4044   1CE2 B0            cmp a, b
4045   1CE3 FD 71         seq ; ==
4046   1CE5 E4            pop a
4047   1CE6             ; --- END RELATIONAL
4048   1CE6 C0 00 00      cmp b, 0
4049   1CE9 C6 FB 1C      je _if122_exit
4050   1CEC             _if122_TRUE:
4051   1CEC             ; error("TEXT section end not found."); 
4052   1CEC             ; --- START FUNCTION CALL
4053   1CEC 26 9E 51      mov b, _s33 ; "TEXT section end not found."
4054   1CEF FD AB         swp b
4055   1CF1 D8            push b
4056   1CF2 07 72 39      call error
4057   1CF5 51 02 00      add sp, 2
4058   1CF8             ; --- END FUNCTION CALL
4059   1CF8 0A FB 1C      jmp _if122_exit
4060   1CFB             _if122_exit:
4061   1CFB             ; if(tok == DOT){ 
4062   1CFB             _if123_cond:
4063   1CFB 3B 7B 4E      mov d, _tok ; $tok
4064   1CFE 2A            mov b, [d]
4065   1CFF 38 00 00      mov c, 0
4066   1D02             ; --- START RELATIONAL
4067   1D02 D7            push a
4068   1D03 11            mov a, b
4069   1D04 FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
4069   1D08 00 00 
4070   1D0A B0            cmp a, b
4071   1D0B FD 71         seq ; ==
4072   1D0D E4            pop a
4073   1D0E             ; --- END RELATIONAL
4074   1D0E C0 00 00      cmp b, 0
4075   1D11 C6 45 1D      je _if123_else
4076   1D14             _if123_TRUE:
4077   1D14             ; get(); 
4078   1D14             ; --- START FUNCTION CALL
4079   1D14 07 6C 2B      call get
4080   1D17             ; if(tok == SEGMENT_END) break; 
4081   1D17             _if124_cond:
4082   1D17 3B 7B 4E      mov d, _tok ; $tok
4083   1D1A 2A            mov b, [d]
4084   1D1B 38 00 00      mov c, 0
4085   1D1E             ; --- START RELATIONAL
4086   1D1E D7            push a
4087   1D1F 11            mov a, b
4088   1D20 FD 2E 05 00   mov32 cb, $5 ; enum element: SEGMENT_END
4088   1D24 00 00 
4089   1D26 B0            cmp a, b
4090   1D27 FD 71         seq ; ==
4091   1D29 E4            pop a
4092   1D2A             ; --- END RELATIONAL
4093   1D2A C0 00 00      cmp b, 0
4094   1D2D C6 36 1D      je _if124_else
4095   1D30             _if124_TRUE:
4096   1D30             ; break; 
4097   1D30 0A 9E 1D      jmp _for121_exit ; for break
4098   1D33 0A 42 1D      jmp _if124_exit
4099   1D36             _if124_else:
4100   1D36             ; error("Unexpected directive."); 
4101   1D36             ; --- START FUNCTION CALL
4102   1D36 26 BA 51      mov b, _s34 ; "Unexpected directive."
4103   1D39 FD AB         swp b
4104   1D3B D8            push b
4105   1D3C 07 72 39      call error
4106   1D3F 51 02 00      add sp, 2
4107   1D42             ; --- END FUNCTION CALL
4108   1D42             _if124_exit:
4109   1D42 0A 9B 1D      jmp _if123_exit
4110   1D45             _if123_else:
4111   1D45             ; if(toktype == IDENTIFIER){ 
4112   1D45             _if125_cond:
4113   1D45 3B 7D 4E      mov d, _toktype ; $toktype
4114   1D48 2A            mov b, [d]
4115   1D49 38 00 00      mov c, 0
4116   1D4C             ; --- START RELATIONAL
4117   1D4C D7            push a
4118   1D4D 11            mov a, b
4119   1D4E FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
4119   1D52 00 00 
4120   1D54 B0            cmp a, b
4121   1D55 FD 71         seq ; ==
4122   1D57 E4            pop a
4123   1D58             ; --- END RELATIONAL
4124   1D58 C0 00 00      cmp b, 0
4125   1D5B C6 9B 1D      je _if125_exit
4126   1D5E             _if125_TRUE:
4127   1D5E             ; get(); 
4128   1D5E             ; --- START FUNCTION CALL
4129   1D5E 07 6C 2B      call get
4130   1D61             ; if(tok != COLON){ 
4131   1D61             _if126_cond:
4132   1D61 3B 7B 4E      mov d, _tok ; $tok
4133   1D64 2A            mov b, [d]
4134   1D65 38 00 00      mov c, 0
4135   1D68             ; --- START RELATIONAL
4136   1D68 D7            push a
4137   1D69 11            mov a, b
4138   1D6A FD 2E 0D 00   mov32 cb, $d ; enum element: COLON
4138   1D6E 00 00 
4139   1D70 B0            cmp a, b
4140   1D71 FD 72         sneq ; !=
4141   1D73 E4            pop a
4142   1D74             ; --- END RELATIONAL
4143   1D74 C0 00 00      cmp b, 0
4144   1D77 C6 98 1D      je _if126_exit
4145   1D7A             _if126_TRUE:
4146   1D7A             ; prog = temp_prog; 
4147   1D7A 3B 7F 4E      mov d, _prog ; $prog
4148   1D7D DA            push d
4149   1D7E FA FF FF      lea d, [bp + -1] ; $temp_prog
4150   1D81 2A            mov b, [d]
4151   1D82 38 00 00      mov c, 0
4152   1D85 E7            pop d
4153   1D86 FD 43         mov [d], b
4154   1D88             ; parse_instr(0); 
4155   1D88             ; --- START FUNCTION CALL
4156   1D88 FD 2E 00 00   mov32 cb, $00000000
4156   1D8C 00 00 
4157   1D8E DD            push bl
4158   1D8F 07 76 13      call parse_instr
4159   1D92 51 01 00      add sp, 1
4160   1D95             ; --- END FUNCTION CALL
4161   1D95 0A 98 1D      jmp _if126_exit
4162   1D98             _if126_exit:
4163   1D98 0A 9B 1D      jmp _if125_exit
4164   1D9B             _if125_exit:
4165   1D9B             _if123_exit:
4166   1D9B             _for121_update:
4167   1D9B 0A BC 1C      jmp _for121_cond
4168   1D9E             _for121_exit:
4169   1D9E             ; print("Done.\n\n"); 
4170   1D9E             ; --- START FUNCTION CALL
4171   1D9E 26 D0 51      mov b, _s35 ; "Done.\n\n"
4172   1DA1 FD AB         swp b
4173   1DA3 D8            push b
4174   1DA4 07 69 3E      call print
4175   1DA7 51 02 00      add sp, 2
4176   1DAA             ; --- END FUNCTION CALL
4177   1DAA F9            leave
4178   1DAB 09            ret
4179   1DAC             
4180   1DAC             debug:
4181   1DAC F8 00 00      enter 0 ; (push bp; mov bp, sp)
4182   1DAF             ; printf("\n"); 
4183   1DAF             ; --- START FUNCTION CALL
4184   1DAF 26 18 50      mov b, _s10 ; "\n"
4185   1DB2 FD AB         swp b
4186   1DB4 D8            push b
4187   1DB5 07 99 42      call printf
4188   1DB8 51 02 00      add sp, 2
4189   1DBB             ; --- END FUNCTION CALL
4190   1DBB             ; printf("Prog Offset: %x\n", prog - program); 
4191   1DBB             ; --- START FUNCTION CALL
4192   1DBB 3B 7F 4E      mov d, _prog ; $prog
4193   1DBE 2A            mov b, [d]
4194   1DBF 38 00 00      mov c, 0
4195   1DC2             ; --- START TERMS
4196   1DC2 D7            push a
4197   1DC3 11            mov a, b
4198   1DC4 3B C3 4F      mov d, _program ; $program
4199   1DC7 2A            mov b, [d]
4200   1DC8 38 00 00      mov c, 0
4201   1DCB 60            sub a, b
4202   1DCC 27            mov b, a
4203   1DCD E4            pop a
4204   1DCE             ; --- END TERMS
4205   1DCE FD AB         swp b
4206   1DD0 D8            push b
4207   1DD1 26 D8 51      mov b, _s36 ; "Prog Offset: %x\n"
4208   1DD4 FD AB         swp b
4209   1DD6 D8            push b
4210   1DD7 07 99 42      call printf
4211   1DDA 51 04 00      add sp, 4
4212   1DDD             ; --- END FUNCTION CALL
4213   1DDD             ; printf("Prog value : %c\n", *prog); 
4214   1DDD             ; --- START FUNCTION CALL
4215   1DDD 3B 7F 4E      mov d, _prog ; $prog
4216   1DE0 2A            mov b, [d]
4217   1DE1 38 00 00      mov c, 0
4218   1DE4 74            mov d, b
4219   1DE5 32            mov bl, [d]
4220   1DE6 A7 00         mov bh, 0
4221   1DE8 38 00 00      mov c, 0
4222   1DEB FD AB         swp b
4223   1DED D8            push b
4224   1DEE 26 E9 51      mov b, _s37 ; "Prog value : %c\n"
4225   1DF1 FD AB         swp b
4226   1DF3 D8            push b
4227   1DF4 07 99 42      call printf
4228   1DF7 51 04 00      add sp, 4
4229   1DFA             ; --- END FUNCTION CALL
4230   1DFA             ; printf("Token      : %s\n", token); 
4231   1DFA             ; --- START FUNCTION CALL
4232   1DFA 3B 81 4E      mov d, _token_data ; $token
4233   1DFD 2D            mov b, d
4234   1DFE 38 00 00      mov c, 0
4235   1E01 FD AB         swp b
4236   1E03 D8            push b
4237   1E04 26 FA 51      mov b, _s38 ; "Token      : %s\n"
4238   1E07 FD AB         swp b
4239   1E09 D8            push b
4240   1E0A 07 99 42      call printf
4241   1E0D 51 04 00      add sp, 4
4242   1E10             ; --- END FUNCTION CALL
4243   1E10             ; printf("Tok        : %d\n", tok); 
4244   1E10             ; --- START FUNCTION CALL
4245   1E10 3B 7B 4E      mov d, _tok ; $tok
4246   1E13 2A            mov b, [d]
4247   1E14 38 00 00      mov c, 0
4248   1E17 FD AB         swp b
4249   1E19 D8            push b
4250   1E1A 26 0B 52      mov b, _s39 ; "Tok        : %d\n"
4251   1E1D FD AB         swp b
4252   1E1F D8            push b
4253   1E20 07 99 42      call printf
4254   1E23 51 04 00      add sp, 4
4255   1E26             ; --- END FUNCTION CALL
4256   1E26             ; printf("Toktype    : %d\n", toktype); 
4257   1E26             ; --- START FUNCTION CALL
4258   1E26 3B 7D 4E      mov d, _toktype ; $toktype
4259   1E29 2A            mov b, [d]
4260   1E2A 38 00 00      mov c, 0
4261   1E2D FD AB         swp b
4262   1E2F D8            push b
4263   1E30 26 1C 52      mov b, _s40 ; "Toktype    : %d\n"
4264   1E33 FD AB         swp b
4265   1E35 D8            push b
4266   1E36 07 99 42      call printf
4267   1E39 51 04 00      add sp, 4
4268   1E3C             ; --- END FUNCTION CALL
4269   1E3C             ; printf("StringConst: %s\n", string_const); 
4270   1E3C             ; --- START FUNCTION CALL
4271   1E3C 3B C1 4E      mov d, _string_const_data ; $string_const
4272   1E3F 2D            mov b, d
4273   1E40 38 00 00      mov c, 0
4274   1E43 FD AB         swp b
4275   1E45 D8            push b
4276   1E46 26 2D 52      mov b, _s41 ; "StringConst: %s\n"
4277   1E49 FD AB         swp b
4278   1E4B D8            push b
4279   1E4C 07 99 42      call printf
4280   1E4F 51 04 00      add sp, 4
4281   1E52             ; --- END FUNCTION CALL
4282   1E52             ; printf("PC         : %x\n", pc); 
4283   1E52             ; --- START FUNCTION CALL
4284   1E52 3B 78 4E      mov d, _pc ; $pc
4285   1E55 2A            mov b, [d]
4286   1E56 38 00 00      mov c, 0
4287   1E59 FD AB         swp b
4288   1E5B D8            push b
4289   1E5C 26 3E 52      mov b, _s42 ; "PC         : %x\n"
4290   1E5F FD AB         swp b
4291   1E61 D8            push b
4292   1E62 07 99 42      call printf
4293   1E65 51 04 00      add sp, 4
4294   1E68             ; --- END FUNCTION CALL
4295   1E68 F9            leave
4296   1E69 09            ret
4297   1E6A             
4298   1E6A             display_output:
4299   1E6A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4300   1E6D             ; int i; 
4301   1E6D 52 02 00      sub sp, 2
4302   1E70             ; unsigned char *p; 
4303   1E70 52 02 00      sub sp, 2
4304   1E73             ; print("\nAssembly complete.\n"); 
4305   1E73             ; --- START FUNCTION CALL
4306   1E73 26 4F 52      mov b, _s43 ; "\nAssembly complete.\n"
4307   1E76 FD AB         swp b
4308   1E78 D8            push b
4309   1E79 07 69 3E      call print
4310   1E7C 51 02 00      add sp, 2
4311   1E7F             ; --- END FUNCTION CALL
4312   1E7F             ; printf("Program size: %d\n", prog_size); 
4313   1E7F             ; --- START FUNCTION CALL
4314   1E7F 3B E1 4F      mov d, _prog_size ; $prog_size
4315   1E82 2A            mov b, [d]
4316   1E83 38 00 00      mov c, 0
4317   1E86 FD AB         swp b
4318   1E88 D8            push b
4319   1E89 26 64 52      mov b, _s44 ; "Program size: %d\n"
4320   1E8C FD AB         swp b
4321   1E8E D8            push b
4322   1E8F 07 99 42      call printf
4323   1E92 51 04 00      add sp, 4
4324   1E95             ; --- END FUNCTION CALL
4325   1E95             ; print("Listing: \n"); 
4326   1E95             ; --- START FUNCTION CALL
4327   1E95 26 76 52      mov b, _s45 ; "Listing: \n"
4328   1E98 FD AB         swp b
4329   1E9A D8            push b
4330   1E9B 07 69 3E      call print
4331   1E9E 51 02 00      add sp, 2
4332   1EA1             ; --- END FUNCTION CALL
4333   1EA1             ; p = bin_out + _org; 
4334   1EA1 FA FD FF      lea d, [bp + -3] ; $p
4335   1EA4 DA            push d
4336   1EA5 3B C5 4F      mov d, _bin_out ; $bin_out
4337   1EA8 2A            mov b, [d]
4338   1EA9 38 00 00      mov c, 0
4339   1EAC             ; --- START TERMS
4340   1EAC D7            push a
4341   1EAD 11            mov a, b
4342   1EAE 3B 76 4E      mov d, __org ; $_org
4343   1EB1 2A            mov b, [d]
4344   1EB2 38 00 00      mov c, 0
4345   1EB5 56            add b, a
4346   1EB6 E4            pop a
4347   1EB7             ; --- END TERMS
4348   1EB7 E7            pop d
4349   1EB8 FD 43         mov [d], b
4350   1EBA             ; for(;;){ 
4351   1EBA             _for127_init:
4352   1EBA             _for127_cond:
4353   1EBA             _for127_block:
4354   1EBA             ; if(p == bin_p) break; 
4355   1EBA             _if128_cond:
4356   1EBA FA FD FF      lea d, [bp + -3] ; $p
4357   1EBD 2A            mov b, [d]
4358   1EBE 38 00 00      mov c, 0
4359   1EC1             ; --- START RELATIONAL
4360   1EC1 D7            push a
4361   1EC2 11            mov a, b
4362   1EC3 3B C7 4F      mov d, _bin_p ; $bin_p
4363   1EC6 2A            mov b, [d]
4364   1EC7 38 00 00      mov c, 0
4365   1ECA B0            cmp a, b
4366   1ECB FD 71         seq ; ==
4367   1ECD E4            pop a
4368   1ECE             ; --- END RELATIONAL
4369   1ECE C0 00 00      cmp b, 0
4370   1ED1 C6 DA 1E      je _if128_exit
4371   1ED4             _if128_TRUE:
4372   1ED4             ; break; 
4373   1ED4 0A 02 1F      jmp _for127_exit ; for break
4374   1ED7 0A DA 1E      jmp _if128_exit
4375   1EDA             _if128_exit:
4376   1EDA             ; printx8(*p);  
4377   1EDA             ; --- START FUNCTION CALL
4378   1EDA FA FD FF      lea d, [bp + -3] ; $p
4379   1EDD 2A            mov b, [d]
4380   1EDE 38 00 00      mov c, 0
4381   1EE1 74            mov d, b
4382   1EE2 32            mov bl, [d]
4383   1EE3 A7 00         mov bh, 0
4384   1EE5 38 00 00      mov c, 0
4385   1EE8 DD            push bl
4386   1EE9 07 FC 4C      call printx8
4387   1EEC 51 01 00      add sp, 1
4388   1EEF             ; --- END FUNCTION CALL
4389   1EEF             ; p++; 
4390   1EEF FA FD FF      lea d, [bp + -3] ; $p
4391   1EF2 2A            mov b, [d]
4392   1EF3 38 00 00      mov c, 0
4393   1EF6 FD 77         inc b
4394   1EF8 FA FD FF      lea d, [bp + -3] ; $p
4395   1EFB FD 43         mov [d], b
4396   1EFD FD 7D         dec b
4397   1EFF             _for127_update:
4398   1EFF 0A BA 1E      jmp _for127_cond
4399   1F02             _for127_exit:
4400   1F02             ; print("\n"); 
4401   1F02             ; --- START FUNCTION CALL
4402   1F02 26 18 50      mov b, _s10 ; "\n"
4403   1F05 FD AB         swp b
4404   1F07 D8            push b
4405   1F08 07 69 3E      call print
4406   1F0B 51 02 00      add sp, 2
4407   1F0E             ; --- END FUNCTION CALL
4408   1F0E F9            leave
4409   1F0F 09            ret
4410   1F10             
4411   1F10             is_reserved:
4412   1F10 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4413   1F13             ; return !strcmp(name, "a") 
4414   1F13             ; --- START FUNCTION CALL
4415   1F13 26 81 52      mov b, _s46 ; "a"
4416   1F16 FD AB         swp b
4417   1F18 D8            push b
4418   1F19 FA 05 00      lea d, [bp + 5] ; $name
4419   1F1C 2A            mov b, [d]
4420   1F1D 38 00 00      mov c, 0
4421   1F20 FD AB         swp b
4422   1F22 D8            push b
4423   1F23 07 CB 3F      call strcmp
4424   1F26 51 04 00      add sp, 4
4425   1F29             ; --- END FUNCTION CALL
4426   1F29             ; --- START LOGICAL OR
4427   1F29 D7            push a
4428   1F2A 11            mov a, b
4429   1F2B             ; --- START FUNCTION CALL
4430   1F2B 26 83 52      mov b, _s47 ; "al"
4431   1F2E FD AB         swp b
4432   1F30 D8            push b
4433   1F31 FA 05 00      lea d, [bp + 5] ; $name
4434   1F34 2A            mov b, [d]
4435   1F35 38 00 00      mov c, 0
4436   1F38 FD AB         swp b
4437   1F3A D8            push b
4438   1F3B 07 CB 3F      call strcmp
4439   1F3E 51 04 00      add sp, 4
4440   1F41             ; --- END FUNCTION CALL
4441   1F41 FD A8         sor a, b ; ||
4442   1F43 11            mov a, b
4443   1F44             ; --- START FUNCTION CALL
4444   1F44 26 86 52      mov b, _s48 ; "ah"
4445   1F47 FD AB         swp b
4446   1F49 D8            push b
4447   1F4A FA 05 00      lea d, [bp + 5] ; $name
4448   1F4D 2A            mov b, [d]
4449   1F4E 38 00 00      mov c, 0
4450   1F51 FD AB         swp b
4451   1F53 D8            push b
4452   1F54 07 CB 3F      call strcmp
4453   1F57 51 04 00      add sp, 4
4454   1F5A             ; --- END FUNCTION CALL
4455   1F5A FD A8         sor a, b ; ||
4456   1F5C 11            mov a, b
4457   1F5D             ; --- START FUNCTION CALL
4458   1F5D 26 89 52      mov b, _s49 ; "b"
4459   1F60 FD AB         swp b
4460   1F62 D8            push b
4461   1F63 FA 05 00      lea d, [bp + 5] ; $name
4462   1F66 2A            mov b, [d]
4463   1F67 38 00 00      mov c, 0
4464   1F6A FD AB         swp b
4465   1F6C D8            push b
4466   1F6D 07 CB 3F      call strcmp
4467   1F70 51 04 00      add sp, 4
4468   1F73             ; --- END FUNCTION CALL
4469   1F73 FD A8         sor a, b ; ||
4470   1F75 11            mov a, b
4471   1F76             ; --- START FUNCTION CALL
4472   1F76 26 8B 52      mov b, _s50 ; "bl"
4473   1F79 FD AB         swp b
4474   1F7B D8            push b
4475   1F7C FA 05 00      lea d, [bp + 5] ; $name
4476   1F7F 2A            mov b, [d]
4477   1F80 38 00 00      mov c, 0
4478   1F83 FD AB         swp b
4479   1F85 D8            push b
4480   1F86 07 CB 3F      call strcmp
4481   1F89 51 04 00      add sp, 4
4482   1F8C             ; --- END FUNCTION CALL
4483   1F8C FD A8         sor a, b ; ||
4484   1F8E 11            mov a, b
4485   1F8F             ; --- START FUNCTION CALL
4486   1F8F 26 8E 52      mov b, _s51 ; "bh"
4487   1F92 FD AB         swp b
4488   1F94 D8            push b
4489   1F95 FA 05 00      lea d, [bp + 5] ; $name
4490   1F98 2A            mov b, [d]
4491   1F99 38 00 00      mov c, 0
4492   1F9C FD AB         swp b
4493   1F9E D8            push b
4494   1F9F 07 CB 3F      call strcmp
4495   1FA2 51 04 00      add sp, 4
4496   1FA5             ; --- END FUNCTION CALL
4497   1FA5 FD A8         sor a, b ; ||
4498   1FA7 11            mov a, b
4499   1FA8             ; --- START FUNCTION CALL
4500   1FA8 26 91 52      mov b, _s52 ; "c"
4501   1FAB FD AB         swp b
4502   1FAD D8            push b
4503   1FAE FA 05 00      lea d, [bp + 5] ; $name
4504   1FB1 2A            mov b, [d]
4505   1FB2 38 00 00      mov c, 0
4506   1FB5 FD AB         swp b
4507   1FB7 D8            push b
4508   1FB8 07 CB 3F      call strcmp
4509   1FBB 51 04 00      add sp, 4
4510   1FBE             ; --- END FUNCTION CALL
4511   1FBE FD A8         sor a, b ; ||
4512   1FC0 11            mov a, b
4513   1FC1             ; --- START FUNCTION CALL
4514   1FC1 26 93 52      mov b, _s53 ; "cl"
4515   1FC4 FD AB         swp b
4516   1FC6 D8            push b
4517   1FC7 FA 05 00      lea d, [bp + 5] ; $name
4518   1FCA 2A            mov b, [d]
4519   1FCB 38 00 00      mov c, 0
4520   1FCE FD AB         swp b
4521   1FD0 D8            push b
4522   1FD1 07 CB 3F      call strcmp
4523   1FD4 51 04 00      add sp, 4
4524   1FD7             ; --- END FUNCTION CALL
4525   1FD7 FD A8         sor a, b ; ||
4526   1FD9 11            mov a, b
4527   1FDA             ; --- START FUNCTION CALL
4528   1FDA 26 96 52      mov b, _s54 ; "ch"
4529   1FDD FD AB         swp b
4530   1FDF D8            push b
4531   1FE0 FA 05 00      lea d, [bp + 5] ; $name
4532   1FE3 2A            mov b, [d]
4533   1FE4 38 00 00      mov c, 0
4534   1FE7 FD AB         swp b
4535   1FE9 D8            push b
4536   1FEA 07 CB 3F      call strcmp
4537   1FED 51 04 00      add sp, 4
4538   1FF0             ; --- END FUNCTION CALL
4539   1FF0 FD A8         sor a, b ; ||
4540   1FF2 11            mov a, b
4541   1FF3             ; --- START FUNCTION CALL
4542   1FF3 26 99 52      mov b, _s55 ; "d"
4543   1FF6 FD AB         swp b
4544   1FF8 D8            push b
4545   1FF9 FA 05 00      lea d, [bp + 5] ; $name
4546   1FFC 2A            mov b, [d]
4547   1FFD 38 00 00      mov c, 0
4548   2000 FD AB         swp b
4549   2002 D8            push b
4550   2003 07 CB 3F      call strcmp
4551   2006 51 04 00      add sp, 4
4552   2009             ; --- END FUNCTION CALL
4553   2009 FD A8         sor a, b ; ||
4554   200B 11            mov a, b
4555   200C             ; --- START FUNCTION CALL
4556   200C 26 9B 52      mov b, _s56 ; "dl"
4557   200F FD AB         swp b
4558   2011 D8            push b
4559   2012 FA 05 00      lea d, [bp + 5] ; $name
4560   2015 2A            mov b, [d]
4561   2016 38 00 00      mov c, 0
4562   2019 FD AB         swp b
4563   201B D8            push b
4564   201C 07 CB 3F      call strcmp
4565   201F 51 04 00      add sp, 4
4566   2022             ; --- END FUNCTION CALL
4567   2022 FD A8         sor a, b ; ||
4568   2024 11            mov a, b
4569   2025             ; --- START FUNCTION CALL
4570   2025 26 9E 52      mov b, _s57 ; "dh"
4571   2028 FD AB         swp b
4572   202A D8            push b
4573   202B FA 05 00      lea d, [bp + 5] ; $name
4574   202E 2A            mov b, [d]
4575   202F 38 00 00      mov c, 0
4576   2032 FD AB         swp b
4577   2034 D8            push b
4578   2035 07 CB 3F      call strcmp
4579   2038 51 04 00      add sp, 4
4580   203B             ; --- END FUNCTION CALL
4581   203B FD A8         sor a, b ; ||
4582   203D 11            mov a, b
4583   203E             ; --- START FUNCTION CALL
4584   203E 26 A1 52      mov b, _s58 ; "g"
4585   2041 FD AB         swp b
4586   2043 D8            push b
4587   2044 FA 05 00      lea d, [bp + 5] ; $name
4588   2047 2A            mov b, [d]
4589   2048 38 00 00      mov c, 0
4590   204B FD AB         swp b
4591   204D D8            push b
4592   204E 07 CB 3F      call strcmp
4593   2051 51 04 00      add sp, 4
4594   2054             ; --- END FUNCTION CALL
4595   2054 FD A8         sor a, b ; ||
4596   2056 11            mov a, b
4597   2057             ; --- START FUNCTION CALL
4598   2057 26 A3 52      mov b, _s59 ; "gl"
4599   205A FD AB         swp b
4600   205C D8            push b
4601   205D FA 05 00      lea d, [bp + 5] ; $name
4602   2060 2A            mov b, [d]
4603   2061 38 00 00      mov c, 0
4604   2064 FD AB         swp b
4605   2066 D8            push b
4606   2067 07 CB 3F      call strcmp
4607   206A 51 04 00      add sp, 4
4608   206D             ; --- END FUNCTION CALL
4609   206D FD A8         sor a, b ; ||
4610   206F 11            mov a, b
4611   2070             ; --- START FUNCTION CALL
4612   2070 26 A6 52      mov b, _s60 ; "gh"
4613   2073 FD AB         swp b
4614   2075 D8            push b
4615   2076 FA 05 00      lea d, [bp + 5] ; $name
4616   2079 2A            mov b, [d]
4617   207A 38 00 00      mov c, 0
4618   207D FD AB         swp b
4619   207F D8            push b
4620   2080 07 CB 3F      call strcmp
4621   2083 51 04 00      add sp, 4
4622   2086             ; --- END FUNCTION CALL
4623   2086 FD A8         sor a, b ; ||
4624   2088 11            mov a, b
4625   2089             ; --- START FUNCTION CALL
4626   2089 26 A9 52      mov b, _s61 ; "pc"
4627   208C FD AB         swp b
4628   208E D8            push b
4629   208F FA 05 00      lea d, [bp + 5] ; $name
4630   2092 2A            mov b, [d]
4631   2093 38 00 00      mov c, 0
4632   2096 FD AB         swp b
4633   2098 D8            push b
4634   2099 07 CB 3F      call strcmp
4635   209C 51 04 00      add sp, 4
4636   209F             ; --- END FUNCTION CALL
4637   209F FD A8         sor a, b ; ||
4638   20A1 11            mov a, b
4639   20A2             ; --- START FUNCTION CALL
4640   20A2 26 AC 52      mov b, _s62 ; "sp"
4641   20A5 FD AB         swp b
4642   20A7 D8            push b
4643   20A8 FA 05 00      lea d, [bp + 5] ; $name
4644   20AB 2A            mov b, [d]
4645   20AC 38 00 00      mov c, 0
4646   20AF FD AB         swp b
4647   20B1 D8            push b
4648   20B2 07 CB 3F      call strcmp
4649   20B5 51 04 00      add sp, 4
4650   20B8             ; --- END FUNCTION CALL
4651   20B8 FD A8         sor a, b ; ||
4652   20BA 11            mov a, b
4653   20BB             ; --- START FUNCTION CALL
4654   20BB 26 AF 52      mov b, _s63 ; "bp"
4655   20BE FD AB         swp b
4656   20C0 D8            push b
4657   20C1 FA 05 00      lea d, [bp + 5] ; $name
4658   20C4 2A            mov b, [d]
4659   20C5 38 00 00      mov c, 0
4660   20C8 FD AB         swp b
4661   20CA D8            push b
4662   20CB 07 CB 3F      call strcmp
4663   20CE 51 04 00      add sp, 4
4664   20D1             ; --- END FUNCTION CALL
4665   20D1 FD A8         sor a, b ; ||
4666   20D3 11            mov a, b
4667   20D4             ; --- START FUNCTION CALL
4668   20D4 26 B2 52      mov b, _s64 ; "si"
4669   20D7 FD AB         swp b
4670   20D9 D8            push b
4671   20DA FA 05 00      lea d, [bp + 5] ; $name
4672   20DD 2A            mov b, [d]
4673   20DE 38 00 00      mov c, 0
4674   20E1 FD AB         swp b
4675   20E3 D8            push b
4676   20E4 07 CB 3F      call strcmp
4677   20E7 51 04 00      add sp, 4
4678   20EA             ; --- END FUNCTION CALL
4679   20EA FD A8         sor a, b ; ||
4680   20EC 11            mov a, b
4681   20ED             ; --- START FUNCTION CALL
4682   20ED 26 B5 52      mov b, _s65 ; "di"
4683   20F0 FD AB         swp b
4684   20F2 D8            push b
4685   20F3 FA 05 00      lea d, [bp + 5] ; $name
4686   20F6 2A            mov b, [d]
4687   20F7 38 00 00      mov c, 0
4688   20FA FD AB         swp b
4689   20FC D8            push b
4690   20FD 07 CB 3F      call strcmp
4691   2100 51 04 00      add sp, 4
4692   2103             ; --- END FUNCTION CALL
4693   2103 FD A8         sor a, b ; ||
4694   2105 11            mov a, b
4695   2106             ; --- START FUNCTION CALL
4696   2106 26 B8 52      mov b, _s66 ; "word"
4697   2109 FD AB         swp b
4698   210B D8            push b
4699   210C FA 05 00      lea d, [bp + 5] ; $name
4700   210F 2A            mov b, [d]
4701   2110 38 00 00      mov c, 0
4702   2113 FD AB         swp b
4703   2115 D8            push b
4704   2116 07 CB 3F      call strcmp
4705   2119 51 04 00      add sp, 4
4706   211C             ; --- END FUNCTION CALL
4707   211C FD A8         sor a, b ; ||
4708   211E 11            mov a, b
4709   211F             ; --- START FUNCTION CALL
4710   211F 26 BD 52      mov b, _s67 ; "byte"
4711   2122 FD AB         swp b
4712   2124 D8            push b
4713   2125 FA 05 00      lea d, [bp + 5] ; $name
4714   2128 2A            mov b, [d]
4715   2129 38 00 00      mov c, 0
4716   212C FD AB         swp b
4717   212E D8            push b
4718   212F 07 CB 3F      call strcmp
4719   2132 51 04 00      add sp, 4
4720   2135             ; --- END FUNCTION CALL
4721   2135 FD A8         sor a, b ; ||
4722   2137 11            mov a, b
4723   2138             ; --- START FUNCTION CALL
4724   2138 26 C2 52      mov b, _s68 ; "cmpsb"
4725   213B FD AB         swp b
4726   213D D8            push b
4727   213E FA 05 00      lea d, [bp + 5] ; $name
4728   2141 2A            mov b, [d]
4729   2142 38 00 00      mov c, 0
4730   2145 FD AB         swp b
4731   2147 D8            push b
4732   2148 07 CB 3F      call strcmp
4733   214B 51 04 00      add sp, 4
4734   214E             ; --- END FUNCTION CALL
4735   214E FD A8         sor a, b ; ||
4736   2150 11            mov a, b
4737   2151             ; --- START FUNCTION CALL
4738   2151 26 C8 52      mov b, _s69 ; "movsb"
4739   2154 FD AB         swp b
4740   2156 D8            push b
4741   2157 FA 05 00      lea d, [bp + 5] ; $name
4742   215A 2A            mov b, [d]
4743   215B 38 00 00      mov c, 0
4744   215E FD AB         swp b
4745   2160 D8            push b
4746   2161 07 CB 3F      call strcmp
4747   2164 51 04 00      add sp, 4
4748   2167             ; --- END FUNCTION CALL
4749   2167 FD A8         sor a, b ; ||
4750   2169 11            mov a, b
4751   216A             ; --- START FUNCTION CALL
4752   216A 26 CE 52      mov b, _s70 ; "stosb"
4753   216D FD AB         swp b
4754   216F D8            push b
4755   2170 FA 05 00      lea d, [bp + 5] ; $name
4756   2173 2A            mov b, [d]
4757   2174 38 00 00      mov c, 0
4758   2177 FD AB         swp b
4759   2179 D8            push b
4760   217A 07 CB 3F      call strcmp
4761   217D 51 04 00      add sp, 4
4762   2180             ; --- END FUNCTION CALL
4763   2180 FD A8         sor a, b ; ||
4764   2182 E4            pop a
4765   2183             ; --- END LOGICAL OR
4766   2183 F9            leave
4767   2184 09            ret
4768   2185             
4769   2185             is_directive:
4770   2185 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4771   2188             ; return !strcmp(name, "org")  
4772   2188             ; --- START FUNCTION CALL
4773   2188 26 F3 4F      mov b, _s0 ; "org"
4774   218B FD AB         swp b
4775   218D D8            push b
4776   218E FA 05 00      lea d, [bp + 5] ; $name
4777   2191 2A            mov b, [d]
4778   2192 38 00 00      mov c, 0
4779   2195 FD AB         swp b
4780   2197 D8            push b
4781   2198 07 CB 3F      call strcmp
4782   219B 51 04 00      add sp, 4
4783   219E             ; --- END FUNCTION CALL
4784   219E             ; --- START LOGICAL OR
4785   219E D7            push a
4786   219F 11            mov a, b
4787   21A0             ; --- START FUNCTION CALL
4788   21A0 26 D4 52      mov b, _s71 ; "define"
4789   21A3 FD AB         swp b
4790   21A5 D8            push b
4791   21A6 FA 05 00      lea d, [bp + 5] ; $name
4792   21A9 2A            mov b, [d]
4793   21AA 38 00 00      mov c, 0
4794   21AD FD AB         swp b
4795   21AF D8            push b
4796   21B0 07 CB 3F      call strcmp
4797   21B3 51 04 00      add sp, 4
4798   21B6             ; --- END FUNCTION CALL
4799   21B6 FD A8         sor a, b ; ||
4800   21B8 E4            pop a
4801   21B9             ; --- END LOGICAL OR
4802   21B9 F9            leave
4803   21BA 09            ret
4804   21BB             
4805   21BB             parse_label:
4806   21BB F8 00 00      enter 0 ; (push bp; mov bp, sp)
4807   21BE             ; char label_name[ 32      ]; 
4808   21BE 52 20 00      sub sp, 32
4809   21C1             ; get(); 
4810   21C1             ; --- START FUNCTION CALL
4811   21C1 07 6C 2B      call get
4812   21C4             ; strcpy(label_name, token); 
4813   21C4             ; --- START FUNCTION CALL
4814   21C4 3B 81 4E      mov d, _token_data ; $token
4815   21C7 2D            mov b, d
4816   21C8 38 00 00      mov c, 0
4817   21CB FD AB         swp b
4818   21CD D8            push b
4819   21CE FA E1 FF      lea d, [bp + -31] ; $label_name
4820   21D1 2D            mov b, d
4821   21D2 38 00 00      mov c, 0
4822   21D5 FD AB         swp b
4823   21D7 D8            push b
4824   21D8 07 9F 4B      call strcpy
4825   21DB 51 04 00      add sp, 4
4826   21DE             ; --- END FUNCTION CALL
4827   21DE             ; declare_label(label_name, pc); 
4828   21DE             ; --- START FUNCTION CALL
4829   21DE 3B 78 4E      mov d, _pc ; $pc
4830   21E1 2A            mov b, [d]
4831   21E2 38 00 00      mov c, 0
4832   21E5 FD AB         swp b
4833   21E7 D8            push b
4834   21E8 FA E1 FF      lea d, [bp + -31] ; $label_name
4835   21EB 2D            mov b, d
4836   21EC 38 00 00      mov c, 0
4837   21EF FD AB         swp b
4838   21F1 D8            push b
4839   21F2 07 FD 21      call declare_label
4840   21F5 51 04 00      add sp, 4
4841   21F8             ; --- END FUNCTION CALL
4842   21F8             ; get(); // get ':' 
4843   21F8             ; --- START FUNCTION CALL
4844   21F8 07 6C 2B      call get
4845   21FB F9            leave
4846   21FC 09            ret
4847   21FD             
4848   21FD             declare_label:
4849   21FD F8 00 00      enter 0 ; (push bp; mov bp, sp)
4850   2200             ; int i; 
4851   2200 52 02 00      sub sp, 2
4852   2203             ; for(i = 0; i <  16          ; i++){ 
4853   2203             _for129_init:
4854   2203 FA FF FF      lea d, [bp + -1] ; $i
4855   2206 DA            push d
4856   2207 FD 2E 00 00   mov32 cb, $00000000
4856   220B 00 00 
4857   220D E7            pop d
4858   220E FD 43         mov [d], b
4859   2210             _for129_cond:
4860   2210 FA FF FF      lea d, [bp + -1] ; $i
4861   2213 2A            mov b, [d]
4862   2214 38 00 00      mov c, 0
4863   2217             ; --- START RELATIONAL
4864   2217 D7            push a
4865   2218 11            mov a, b
4866   2219 FD 2E 10 00   mov32 cb, $00000010
4866   221D 00 00 
4867   221F B0            cmp a, b
4868   2220 FD 73         slt ; < (signed)
4869   2222 E4            pop a
4870   2223             ; --- END RELATIONAL
4871   2223 C0 00 00      cmp b, 0
4872   2226 C6 C0 22      je _for129_exit
4873   2229             _for129_block:
4874   2229             ; if(!label_table[i].name[0]){ 
4875   2229             _if130_cond:
4876   2229 3B 56 4D      mov d, _label_table_data ; $label_table
4877   222C D7            push a
4878   222D DA            push d
4879   222E FA FF FF      lea d, [bp + -1] ; $i
4880   2231 2A            mov b, [d]
4881   2232 38 00 00      mov c, 0
4882   2235 E7            pop d
4883   2236 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4884   223A E4            pop a
4885   223B 58 00 00      add d, 0
4886   223E D7            push a
4887   223F DA            push d
4888   2240 FD 2E 00 00   mov32 cb, $00000000
4888   2244 00 00 
4889   2246 E7            pop d
4890   2247 5A            add d, b
4891   2248 E4            pop a
4892   2249 32            mov bl, [d]
4893   224A A7 00         mov bh, 0
4894   224C 38 00 00      mov c, 0
4895   224F C0 00 00      cmp b, 0
4896   2252 C6 AD 22      je _if130_exit
4897   2255             _if130_TRUE:
4898   2255             ; strcpy(label_table[i].name, name); 
4899   2255             ; --- START FUNCTION CALL
4900   2255 FA 05 00      lea d, [bp + 5] ; $name
4901   2258 2A            mov b, [d]
4902   2259 38 00 00      mov c, 0
4903   225C FD AB         swp b
4904   225E D8            push b
4905   225F 3B 56 4D      mov d, _label_table_data ; $label_table
4906   2262 D7            push a
4907   2263 DA            push d
4908   2264 FA FF FF      lea d, [bp + -1] ; $i
4909   2267 2A            mov b, [d]
4910   2268 38 00 00      mov c, 0
4911   226B E7            pop d
4912   226C FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4913   2270 E4            pop a
4914   2271 58 00 00      add d, 0
4915   2274 2D            mov b, d
4916   2275 38 00 00      mov c, 0
4917   2278 FD AB         swp b
4918   227A D8            push b
4919   227B 07 9F 4B      call strcpy
4920   227E 51 04 00      add sp, 4
4921   2281             ; --- END FUNCTION CALL
4922   2281             ; label_table[i].address = address; 
4923   2281 3B 56 4D      mov d, _label_table_data ; $label_table
4924   2284 D7            push a
4925   2285 DA            push d
4926   2286 FA FF FF      lea d, [bp + -1] ; $i
4927   2289 2A            mov b, [d]
4928   228A 38 00 00      mov c, 0
4929   228D E7            pop d
4930   228E FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4931   2292 E4            pop a
4932   2293 58 10 00      add d, 16
4933   2296 DA            push d
4934   2297 FA 07 00      lea d, [bp + 7] ; $address
4935   229A 2A            mov b, [d]
4936   229B 38 00 00      mov c, 0
4937   229E E7            pop d
4938   229F FD 43         mov [d], b
4939   22A1             ; return i; 
4940   22A1 FA FF FF      lea d, [bp + -1] ; $i
4941   22A4 2A            mov b, [d]
4942   22A5 38 00 00      mov c, 0
4943   22A8 F9            leave
4944   22A9 09            ret
4945   22AA 0A AD 22      jmp _if130_exit
4946   22AD             _if130_exit:
4947   22AD             _for129_update:
4948   22AD FA FF FF      lea d, [bp + -1] ; $i
4949   22B0 2A            mov b, [d]
4950   22B1 38 00 00      mov c, 0
4951   22B4 11            mov a, b
4952   22B5 FD 77         inc b
4953   22B7 FA FF FF      lea d, [bp + -1] ; $i
4954   22BA FD 43         mov [d], b
4955   22BC 27            mov b, a
4956   22BD 0A 10 22      jmp _for129_cond
4957   22C0             _for129_exit:
4958   22C0 F9            leave
4959   22C1 09            ret
4960   22C2             
4961   22C2             get_label_addr:
4962   22C2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4963   22C5             ; int i; 
4964   22C5 52 02 00      sub sp, 2
4965   22C8             ; for(i = 0; i <  16          ; i++){ 
4966   22C8             _for131_init:
4967   22C8 FA FF FF      lea d, [bp + -1] ; $i
4968   22CB DA            push d
4969   22CC FD 2E 00 00   mov32 cb, $00000000
4969   22D0 00 00 
4970   22D2 E7            pop d
4971   22D3 FD 43         mov [d], b
4972   22D5             _for131_cond:
4973   22D5 FA FF FF      lea d, [bp + -1] ; $i
4974   22D8 2A            mov b, [d]
4975   22D9 38 00 00      mov c, 0
4976   22DC             ; --- START RELATIONAL
4977   22DC D7            push a
4978   22DD 11            mov a, b
4979   22DE FD 2E 10 00   mov32 cb, $00000010
4979   22E2 00 00 
4980   22E4 B0            cmp a, b
4981   22E5 FD 73         slt ; < (signed)
4982   22E7 E4            pop a
4983   22E8             ; --- END RELATIONAL
4984   22E8 C0 00 00      cmp b, 0
4985   22EB C6 51 23      je _for131_exit
4986   22EE             _for131_block:
4987   22EE             ; if(!strcmp(label_table[i].name, name)){ 
4988   22EE             _if132_cond:
4989   22EE             ; --- START FUNCTION CALL
4990   22EE FA 05 00      lea d, [bp + 5] ; $name
4991   22F1 2A            mov b, [d]
4992   22F2 38 00 00      mov c, 0
4993   22F5 FD AB         swp b
4994   22F7 D8            push b
4995   22F8 3B 56 4D      mov d, _label_table_data ; $label_table
4996   22FB D7            push a
4997   22FC DA            push d
4998   22FD FA FF FF      lea d, [bp + -1] ; $i
4999   2300 2A            mov b, [d]
5000   2301 38 00 00      mov c, 0
5001   2304 E7            pop d
5002   2305 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5003   2309 E4            pop a
5004   230A 58 00 00      add d, 0
5005   230D 2D            mov b, d
5006   230E 38 00 00      mov c, 0
5007   2311 FD AB         swp b
5008   2313 D8            push b
5009   2314 07 CB 3F      call strcmp
5010   2317 51 04 00      add sp, 4
5011   231A             ; --- END FUNCTION CALL
5012   231A C0 00 00      cmp b, 0
5013   231D C6 3E 23      je _if132_exit
5014   2320             _if132_TRUE:
5015   2320             ; return label_table[i].address; 
5016   2320 3B 56 4D      mov d, _label_table_data ; $label_table
5017   2323 D7            push a
5018   2324 DA            push d
5019   2325 FA FF FF      lea d, [bp + -1] ; $i
5020   2328 2A            mov b, [d]
5021   2329 38 00 00      mov c, 0
5022   232C E7            pop d
5023   232D FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5024   2331 E4            pop a
5025   2332 58 10 00      add d, 16
5026   2335 2A            mov b, [d]
5027   2336 38 00 00      mov c, 0
5028   2339 F9            leave
5029   233A 09            ret
5030   233B 0A 3E 23      jmp _if132_exit
5031   233E             _if132_exit:
5032   233E             _for131_update:
5033   233E FA FF FF      lea d, [bp + -1] ; $i
5034   2341 2A            mov b, [d]
5035   2342 38 00 00      mov c, 0
5036   2345 11            mov a, b
5037   2346 FD 77         inc b
5038   2348 FA FF FF      lea d, [bp + -1] ; $i
5039   234B FD 43         mov [d], b
5040   234D 27            mov b, a
5041   234E 0A D5 22      jmp _for131_cond
5042   2351             _for131_exit:
5043   2351             ; error_s("Label does not exist: ", name); 
5044   2351             ; --- START FUNCTION CALL
5045   2351 FA 05 00      lea d, [bp + 5] ; $name
5046   2354 2A            mov b, [d]
5047   2355 38 00 00      mov c, 0
5048   2358 FD AB         swp b
5049   235A D8            push b
5050   235B 26 DB 52      mov b, _s72 ; "Label does not exist: "
5051   235E FD AB         swp b
5052   2360 D8            push b
5053   2361 07 9C 39      call error_s
5054   2364 51 04 00      add sp, 4
5055   2367             ; --- END FUNCTION CALL
5056   2367 F9            leave
5057   2368 09            ret
5058   2369             
5059   2369             label_exists:
5060   2369 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5061   236C             ; int i; 
5062   236C 52 02 00      sub sp, 2
5063   236F             ; for(i = 0; i <  16          ; i++){ 
5064   236F             _for133_init:
5065   236F FA FF FF      lea d, [bp + -1] ; $i
5066   2372 DA            push d
5067   2373 FD 2E 00 00   mov32 cb, $00000000
5067   2377 00 00 
5068   2379 E7            pop d
5069   237A FD 43         mov [d], b
5070   237C             _for133_cond:
5071   237C FA FF FF      lea d, [bp + -1] ; $i
5072   237F 2A            mov b, [d]
5073   2380 38 00 00      mov c, 0
5074   2383             ; --- START RELATIONAL
5075   2383 D7            push a
5076   2384 11            mov a, b
5077   2385 FD 2E 10 00   mov32 cb, $00000010
5077   2389 00 00 
5078   238B B0            cmp a, b
5079   238C FD 73         slt ; < (signed)
5080   238E E4            pop a
5081   238F             ; --- END RELATIONAL
5082   238F C0 00 00      cmp b, 0
5083   2392 C6 E6 23      je _for133_exit
5084   2395             _for133_block:
5085   2395             ; if(!strcmp(label_table[i].name, name)){ 
5086   2395             _if134_cond:
5087   2395             ; --- START FUNCTION CALL
5088   2395 FA 05 00      lea d, [bp + 5] ; $name
5089   2398 2A            mov b, [d]
5090   2399 38 00 00      mov c, 0
5091   239C FD AB         swp b
5092   239E D8            push b
5093   239F 3B 56 4D      mov d, _label_table_data ; $label_table
5094   23A2 D7            push a
5095   23A3 DA            push d
5096   23A4 FA FF FF      lea d, [bp + -1] ; $i
5097   23A7 2A            mov b, [d]
5098   23A8 38 00 00      mov c, 0
5099   23AB E7            pop d
5100   23AC FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5101   23B0 E4            pop a
5102   23B1 58 00 00      add d, 0
5103   23B4 2D            mov b, d
5104   23B5 38 00 00      mov c, 0
5105   23B8 FD AB         swp b
5106   23BA D8            push b
5107   23BB 07 CB 3F      call strcmp
5108   23BE 51 04 00      add sp, 4
5109   23C1             ; --- END FUNCTION CALL
5110   23C1 C0 00 00      cmp b, 0
5111   23C4 C6 D3 23      je _if134_exit
5112   23C7             _if134_TRUE:
5113   23C7             ; return i; 
5114   23C7 FA FF FF      lea d, [bp + -1] ; $i
5115   23CA 2A            mov b, [d]
5116   23CB 38 00 00      mov c, 0
5117   23CE F9            leave
5118   23CF 09            ret
5119   23D0 0A D3 23      jmp _if134_exit
5120   23D3             _if134_exit:
5121   23D3             _for133_update:
5122   23D3 FA FF FF      lea d, [bp + -1] ; $i
5123   23D6 2A            mov b, [d]
5124   23D7 38 00 00      mov c, 0
5125   23DA 11            mov a, b
5126   23DB FD 77         inc b
5127   23DD FA FF FF      lea d, [bp + -1] ; $i
5128   23E0 FD 43         mov [d], b
5129   23E2 27            mov b, a
5130   23E3 0A 7C 23      jmp _for133_cond
5131   23E6             _for133_exit:
5132   23E6             ; return -1; 
5133   23E6 FD 2E FF FF   mov32 cb, $ffffffff
5133   23EA FF FF 
5134   23EC F9            leave
5135   23ED 09            ret
5136   23EE             
5137   23EE             search_opcode:
5138   23EE F8 00 00      enter 0 ; (push bp; mov bp, sp)
5139   23F1             ; char opcode_str[24]; 
5140   23F1 52 18 00      sub sp, 24
5141   23F4             ; char opcode_hex[5]; 
5142   23F4 52 05 00      sub sp, 5
5143   23F7             ; char *hex_p; 
5144   23F7 52 02 00      sub sp, 2
5145   23FA             ; char *op_p; 
5146   23FA 52 02 00      sub sp, 2
5147   23FD             ; char *tbl_p; 
5148   23FD 52 02 00      sub sp, 2
5149   2400             ; struct t_opcode return_opcode; 
5150   2400 52 1A 00      sub sp, 26
5151   2403             ; tbl_p = opcode_table; 
5152   2403 FA DE FF      lea d, [bp + -34] ; $tbl_p
5153   2406 DA            push d
5154   2407 3B C9 4F      mov d, _opcode_table ; $opcode_table
5155   240A 2A            mov b, [d]
5156   240B 38 00 00      mov c, 0
5157   240E E7            pop d
5158   240F FD 43         mov [d], b
5159   2411             ; for(;;){ 
5160   2411             _for135_init:
5161   2411             _for135_cond:
5162   2411             _for135_block:
5163   2411             ; op_p = opcode_str; 
5164   2411 FA E0 FF      lea d, [bp + -32] ; $op_p
5165   2414 DA            push d
5166   2415 FA E9 FF      lea d, [bp + -23] ; $opcode_str
5167   2418 2D            mov b, d
5168   2419 38 00 00      mov c, 0
5169   241C E7            pop d
5170   241D FD 43         mov [d], b
5171   241F             ; hex_p = opcode_hex; 
5172   241F FA E2 FF      lea d, [bp + -30] ; $hex_p
5173   2422 DA            push d
5174   2423 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5175   2426 2D            mov b, d
5176   2427 38 00 00      mov c, 0
5177   242A E7            pop d
5178   242B FD 43         mov [d], b
5179   242D             ; while(*tbl_p != ' ') *op_p++ = *tbl_p++; 
5180   242D             _while136_cond:
5181   242D FA DE FF      lea d, [bp + -34] ; $tbl_p
5182   2430 2A            mov b, [d]
5183   2431 38 00 00      mov c, 0
5184   2434 74            mov d, b
5185   2435 32            mov bl, [d]
5186   2436 A7 00         mov bh, 0
5187   2438 38 00 00      mov c, 0
5188   243B             ; --- START RELATIONAL
5189   243B D7            push a
5190   243C 11            mov a, b
5191   243D FD 2E 20 00   mov32 cb, $00000020
5191   2441 00 00 
5192   2443 B0            cmp a, b
5193   2444 FD 72         sneq ; !=
5194   2446 E4            pop a
5195   2447             ; --- END RELATIONAL
5196   2447 C0 00 00      cmp b, 0
5197   244A C6 7B 24      je _while136_exit
5198   244D             _while136_block:
5199   244D             ; *op_p++ = *tbl_p++; 
5200   244D FA E0 FF      lea d, [bp + -32] ; $op_p
5201   2450 2A            mov b, [d]
5202   2451 38 00 00      mov c, 0
5203   2454 FD 77         inc b
5204   2456 FA E0 FF      lea d, [bp + -32] ; $op_p
5205   2459 FD 43         mov [d], b
5206   245B FD 7D         dec b
5207   245D D8            push b
5208   245E FA DE FF      lea d, [bp + -34] ; $tbl_p
5209   2461 2A            mov b, [d]
5210   2462 38 00 00      mov c, 0
5211   2465 FD 77         inc b
5212   2467 FA DE FF      lea d, [bp + -34] ; $tbl_p
5213   246A FD 43         mov [d], b
5214   246C FD 7D         dec b
5215   246E 74            mov d, b
5216   246F 32            mov bl, [d]
5217   2470 A7 00         mov bh, 0
5218   2472 38 00 00      mov c, 0
5219   2475 E7            pop d
5220   2476 FD 3E         mov [d], bl
5221   2478 0A 2D 24      jmp _while136_cond
5222   247B             _while136_exit:
5223   247B             ; *op_p++ = *tbl_p++; 
5224   247B FA E0 FF      lea d, [bp + -32] ; $op_p
5225   247E 2A            mov b, [d]
5226   247F 38 00 00      mov c, 0
5227   2482 FD 77         inc b
5228   2484 FA E0 FF      lea d, [bp + -32] ; $op_p
5229   2487 FD 43         mov [d], b
5230   2489 FD 7D         dec b
5231   248B D8            push b
5232   248C FA DE FF      lea d, [bp + -34] ; $tbl_p
5233   248F 2A            mov b, [d]
5234   2490 38 00 00      mov c, 0
5235   2493 FD 77         inc b
5236   2495 FA DE FF      lea d, [bp + -34] ; $tbl_p
5237   2498 FD 43         mov [d], b
5238   249A FD 7D         dec b
5239   249C 74            mov d, b
5240   249D 32            mov bl, [d]
5241   249E A7 00         mov bh, 0
5242   24A0 38 00 00      mov c, 0
5243   24A3 E7            pop d
5244   24A4 FD 3E         mov [d], bl
5245   24A6             ; while(*tbl_p != ' ') *op_p++ = *tbl_p++; 
5246   24A6             _while137_cond:
5247   24A6 FA DE FF      lea d, [bp + -34] ; $tbl_p
5248   24A9 2A            mov b, [d]
5249   24AA 38 00 00      mov c, 0
5250   24AD 74            mov d, b
5251   24AE 32            mov bl, [d]
5252   24AF A7 00         mov bh, 0
5253   24B1 38 00 00      mov c, 0
5254   24B4             ; --- START RELATIONAL
5255   24B4 D7            push a
5256   24B5 11            mov a, b
5257   24B6 FD 2E 20 00   mov32 cb, $00000020
5257   24BA 00 00 
5258   24BC B0            cmp a, b
5259   24BD FD 72         sneq ; !=
5260   24BF E4            pop a
5261   24C0             ; --- END RELATIONAL
5262   24C0 C0 00 00      cmp b, 0
5263   24C3 C6 F4 24      je _while137_exit
5264   24C6             _while137_block:
5265   24C6             ; *op_p++ = *tbl_p++; 
5266   24C6 FA E0 FF      lea d, [bp + -32] ; $op_p
5267   24C9 2A            mov b, [d]
5268   24CA 38 00 00      mov c, 0
5269   24CD FD 77         inc b
5270   24CF FA E0 FF      lea d, [bp + -32] ; $op_p
5271   24D2 FD 43         mov [d], b
5272   24D4 FD 7D         dec b
5273   24D6 D8            push b
5274   24D7 FA DE FF      lea d, [bp + -34] ; $tbl_p
5275   24DA 2A            mov b, [d]
5276   24DB 38 00 00      mov c, 0
5277   24DE FD 77         inc b
5278   24E0 FA DE FF      lea d, [bp + -34] ; $tbl_p
5279   24E3 FD 43         mov [d], b
5280   24E5 FD 7D         dec b
5281   24E7 74            mov d, b
5282   24E8 32            mov bl, [d]
5283   24E9 A7 00         mov bh, 0
5284   24EB 38 00 00      mov c, 0
5285   24EE E7            pop d
5286   24EF FD 3E         mov [d], bl
5287   24F1 0A A6 24      jmp _while137_cond
5288   24F4             _while137_exit:
5289   24F4             ; *op_p = '\0'; 
5290   24F4 FA E0 FF      lea d, [bp + -32] ; $op_p
5291   24F7 2A            mov b, [d]
5292   24F8 38 00 00      mov c, 0
5293   24FB D8            push b
5294   24FC FD 2E 00 00   mov32 cb, $00000000
5294   2500 00 00 
5295   2502 E7            pop d
5296   2503 FD 3E         mov [d], bl
5297   2505             ; if(!strcmp(opcode_str, what_opcode)){ 
5298   2505             _if138_cond:
5299   2505             ; --- START FUNCTION CALL
5300   2505 FA 05 00      lea d, [bp + 5] ; $what_opcode
5301   2508 2A            mov b, [d]
5302   2509 38 00 00      mov c, 0
5303   250C FD AB         swp b
5304   250E D8            push b
5305   250F FA E9 FF      lea d, [bp + -23] ; $opcode_str
5306   2512 2D            mov b, d
5307   2513 38 00 00      mov c, 0
5308   2516 FD AB         swp b
5309   2518 D8            push b
5310   2519 07 CB 3F      call strcmp
5311   251C 51 04 00      add sp, 4
5312   251F             ; --- END FUNCTION CALL
5313   251F C0 00 00      cmp b, 0
5314   2522 C6 6F 26      je _if138_else
5315   2525             _if138_TRUE:
5316   2525             ; strcpy(return_opcode.name, what_opcode); 
5317   2525             ; --- START FUNCTION CALL
5318   2525 FA 05 00      lea d, [bp + 5] ; $what_opcode
5319   2528 2A            mov b, [d]
5320   2529 38 00 00      mov c, 0
5321   252C FD AB         swp b
5322   252E D8            push b
5323   252F FA C4 FF      lea d, [bp + -60] ; $return_opcode
5324   2532 58 00 00      add d, 0
5325   2535 2D            mov b, d
5326   2536 38 00 00      mov c, 0
5327   2539 FD AB         swp b
5328   253B D8            push b
5329   253C 07 9F 4B      call strcpy
5330   253F 51 04 00      add sp, 4
5331   2542             ; --- END FUNCTION CALL
5332   2542             ; while(*tbl_p == ' ') tbl_p++; 
5333   2542             _while139_cond:
5334   2542 FA DE FF      lea d, [bp + -34] ; $tbl_p
5335   2545 2A            mov b, [d]
5336   2546 38 00 00      mov c, 0
5337   2549 74            mov d, b
5338   254A 32            mov bl, [d]
5339   254B A7 00         mov bh, 0
5340   254D 38 00 00      mov c, 0
5341   2550             ; --- START RELATIONAL
5342   2550 D7            push a
5343   2551 11            mov a, b
5344   2552 FD 2E 20 00   mov32 cb, $00000020
5344   2556 00 00 
5345   2558 B0            cmp a, b
5346   2559 FD 71         seq ; ==
5347   255B E4            pop a
5348   255C             ; --- END RELATIONAL
5349   255C C0 00 00      cmp b, 0
5350   255F C6 75 25      je _while139_exit
5351   2562             _while139_block:
5352   2562             ; tbl_p++; 
5353   2562 FA DE FF      lea d, [bp + -34] ; $tbl_p
5354   2565 2A            mov b, [d]
5355   2566 38 00 00      mov c, 0
5356   2569 FD 77         inc b
5357   256B FA DE FF      lea d, [bp + -34] ; $tbl_p
5358   256E FD 43         mov [d], b
5359   2570 FD 7D         dec b
5360   2572 0A 42 25      jmp _while139_cond
5361   2575             _while139_exit:
5362   2575             ; while(is_hex_digit(*tbl_p)) *hex_p++ = *tbl_p++; // Copy hex opcode 
5363   2575             _while140_cond:
5364   2575             ; --- START FUNCTION CALL
5365   2575 FA DE FF      lea d, [bp + -34] ; $tbl_p
5366   2578 2A            mov b, [d]
5367   2579 38 00 00      mov c, 0
5368   257C 74            mov d, b
5369   257D 32            mov bl, [d]
5370   257E A7 00         mov bh, 0
5371   2580 38 00 00      mov c, 0
5372   2583 DD            push bl
5373   2584 07 B5 29      call is_hex_digit
5374   2587 51 01 00      add sp, 1
5375   258A             ; --- END FUNCTION CALL
5376   258A C0 00 00      cmp b, 0
5377   258D C6 BE 25      je _while140_exit
5378   2590             _while140_block:
5379   2590             ; *hex_p++ = *tbl_p++; // Copy hex opcode 
5380   2590 FA E2 FF      lea d, [bp + -30] ; $hex_p
5381   2593 2A            mov b, [d]
5382   2594 38 00 00      mov c, 0
5383   2597 FD 77         inc b
5384   2599 FA E2 FF      lea d, [bp + -30] ; $hex_p
5385   259C FD 43         mov [d], b
5386   259E FD 7D         dec b
5387   25A0 D8            push b
5388   25A1 FA DE FF      lea d, [bp + -34] ; $tbl_p
5389   25A4 2A            mov b, [d]
5390   25A5 38 00 00      mov c, 0
5391   25A8 FD 77         inc b
5392   25AA FA DE FF      lea d, [bp + -34] ; $tbl_p
5393   25AD FD 43         mov [d], b
5394   25AF FD 7D         dec b
5395   25B1 74            mov d, b
5396   25B2 32            mov bl, [d]
5397   25B3 A7 00         mov bh, 0
5398   25B5 38 00 00      mov c, 0
5399   25B8 E7            pop d
5400   25B9 FD 3E         mov [d], bl
5401   25BB 0A 75 25      jmp _while140_cond
5402   25BE             _while140_exit:
5403   25BE             ; *hex_p = '\0'; 
5404   25BE FA E2 FF      lea d, [bp + -30] ; $hex_p
5405   25C1 2A            mov b, [d]
5406   25C2 38 00 00      mov c, 0
5407   25C5 D8            push b
5408   25C6 FD 2E 00 00   mov32 cb, $00000000
5408   25CA 00 00 
5409   25CC E7            pop d
5410   25CD FD 3E         mov [d], bl
5411   25CF             ; if(strlen(opcode_hex) == 4){ 
5412   25CF             _if141_cond:
5413   25CF             ; --- START FUNCTION CALL
5414   25CF FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5415   25D2 2D            mov b, d
5416   25D3 38 00 00      mov c, 0
5417   25D6 FD AB         swp b
5418   25D8 D8            push b
5419   25D9 07 4F 40      call strlen
5420   25DC 51 02 00      add sp, 2
5421   25DF             ; --- END FUNCTION CALL
5422   25DF             ; --- START RELATIONAL
5423   25DF D7            push a
5424   25E0 11            mov a, b
5425   25E1 FD 2E 04 00   mov32 cb, $00000004
5425   25E5 00 00 
5426   25E7 B0            cmp a, b
5427   25E8 FD 71         seq ; ==
5428   25EA E4            pop a
5429   25EB             ; --- END RELATIONAL
5430   25EB C0 00 00      cmp b, 0
5431   25EE C6 39 26      je _if141_else
5432   25F1             _if141_TRUE:
5433   25F1             ; return_opcode.opcode_type = 1; 
5434   25F1 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5435   25F4 58 19 00      add d, 25
5436   25F7 DA            push d
5437   25F8 FD 2E 01 00   mov32 cb, $00000001
5437   25FC 00 00 
5438   25FE E7            pop d
5439   25FF FD 3E         mov [d], bl
5440   2601             ; *(opcode_hex + 2) = '\0'; 
5441   2601 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5442   2604 2D            mov b, d
5443   2605 38 00 00      mov c, 0
5444   2608             ; --- START TERMS
5445   2608 D7            push a
5446   2609 11            mov a, b
5447   260A FD 2E 02 00   mov32 cb, $00000002
5447   260E 00 00 
5448   2610 56            add b, a
5449   2611 E4            pop a
5450   2612             ; --- END TERMS
5451   2612 D8            push b
5452   2613 FD 2E 00 00   mov32 cb, $00000000
5452   2617 00 00 
5453   2619 E7            pop d
5454   261A FD 43         mov [d], b
5455   261C             ; return_opcode.opcode = hex_to_int(opcode_hex); 
5456   261C FA C4 FF      lea d, [bp + -60] ; $return_opcode
5457   261F 58 18 00      add d, 24
5458   2622 DA            push d
5459   2623             ; --- START FUNCTION CALL
5460   2623 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5461   2626 2D            mov b, d
5462   2627 38 00 00      mov c, 0
5463   262A FD AB         swp b
5464   262C D8            push b
5465   262D 07 33 3B      call hex_to_int
5466   2630 51 02 00      add sp, 2
5467   2633             ; --- END FUNCTION CALL
5468   2633 E7            pop d
5469   2634 FD 3E         mov [d], bl
5470   2636 0A 63 26      jmp _if141_exit
5471   2639             _if141_else:
5472   2639             ; return_opcode.opcode_type = 0; 
5473   2639 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5474   263C 58 19 00      add d, 25
5475   263F DA            push d
5476   2640 FD 2E 00 00   mov32 cb, $00000000
5476   2644 00 00 
5477   2646 E7            pop d
5478   2647 FD 3E         mov [d], bl
5479   2649             ; return_opcode.opcode = hex_to_int(opcode_hex); 
5480   2649 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5481   264C 58 18 00      add d, 24
5482   264F DA            push d
5483   2650             ; --- START FUNCTION CALL
5484   2650 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5485   2653 2D            mov b, d
5486   2654 38 00 00      mov c, 0
5487   2657 FD AB         swp b
5488   2659 D8            push b
5489   265A 07 33 3B      call hex_to_int
5490   265D 51 02 00      add sp, 2
5491   2660             ; --- END FUNCTION CALL
5492   2660 E7            pop d
5493   2661 FD 3E         mov [d], bl
5494   2663             _if141_exit:
5495   2663             ; return return_opcode; 
5496   2663 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5497   2666 2D            mov b, d
5498   2667 38 00 00      mov c, 0
5499   266A F9            leave
5500   266B 09            ret
5501   266C 0A F4 26      jmp _if138_exit
5502   266F             _if138_else:
5503   266F             ; while(*tbl_p != '\n') tbl_p++; 
5504   266F             _while142_cond:
5505   266F FA DE FF      lea d, [bp + -34] ; $tbl_p
5506   2672 2A            mov b, [d]
5507   2673 38 00 00      mov c, 0
5508   2676 74            mov d, b
5509   2677 32            mov bl, [d]
5510   2678 A7 00         mov bh, 0
5511   267A 38 00 00      mov c, 0
5512   267D             ; --- START RELATIONAL
5513   267D D7            push a
5514   267E 11            mov a, b
5515   267F FD 2E 0A 00   mov32 cb, $0000000a
5515   2683 00 00 
5516   2685 B0            cmp a, b
5517   2686 FD 72         sneq ; !=
5518   2688 E4            pop a
5519   2689             ; --- END RELATIONAL
5520   2689 C0 00 00      cmp b, 0
5521   268C C6 A2 26      je _while142_exit
5522   268F             _while142_block:
5523   268F             ; tbl_p++; 
5524   268F FA DE FF      lea d, [bp + -34] ; $tbl_p
5525   2692 2A            mov b, [d]
5526   2693 38 00 00      mov c, 0
5527   2696 FD 77         inc b
5528   2698 FA DE FF      lea d, [bp + -34] ; $tbl_p
5529   269B FD 43         mov [d], b
5530   269D FD 7D         dec b
5531   269F 0A 6F 26      jmp _while142_cond
5532   26A2             _while142_exit:
5533   26A2             ; while(*tbl_p == '\n') tbl_p++; 
5534   26A2             _while143_cond:
5535   26A2 FA DE FF      lea d, [bp + -34] ; $tbl_p
5536   26A5 2A            mov b, [d]
5537   26A6 38 00 00      mov c, 0
5538   26A9 74            mov d, b
5539   26AA 32            mov bl, [d]
5540   26AB A7 00         mov bh, 0
5541   26AD 38 00 00      mov c, 0
5542   26B0             ; --- START RELATIONAL
5543   26B0 D7            push a
5544   26B1 11            mov a, b
5545   26B2 FD 2E 0A 00   mov32 cb, $0000000a
5545   26B6 00 00 
5546   26B8 B0            cmp a, b
5547   26B9 FD 71         seq ; ==
5548   26BB E4            pop a
5549   26BC             ; --- END RELATIONAL
5550   26BC C0 00 00      cmp b, 0
5551   26BF C6 D5 26      je _while143_exit
5552   26C2             _while143_block:
5553   26C2             ; tbl_p++; 
5554   26C2 FA DE FF      lea d, [bp + -34] ; $tbl_p
5555   26C5 2A            mov b, [d]
5556   26C6 38 00 00      mov c, 0
5557   26C9 FD 77         inc b
5558   26CB FA DE FF      lea d, [bp + -34] ; $tbl_p
5559   26CE FD 43         mov [d], b
5560   26D0 FD 7D         dec b
5561   26D2 0A A2 26      jmp _while143_cond
5562   26D5             _while143_exit:
5563   26D5             ; if(!*tbl_p) break; 
5564   26D5             _if144_cond:
5565   26D5 FA DE FF      lea d, [bp + -34] ; $tbl_p
5566   26D8 2A            mov b, [d]
5567   26D9 38 00 00      mov c, 0
5568   26DC 74            mov d, b
5569   26DD 32            mov bl, [d]
5570   26DE A7 00         mov bh, 0
5571   26E0 38 00 00      mov c, 0
5572   26E3 C0 00 00      cmp b, 0
5573   26E6 FD 71         seq ; !
5574   26E8 C0 00 00      cmp b, 0
5575   26EB C6 F4 26      je _if144_exit
5576   26EE             _if144_TRUE:
5577   26EE             ; break; 
5578   26EE 0A F7 26      jmp _for135_exit ; for break
5579   26F1 0A F4 26      jmp _if144_exit
5580   26F4             _if144_exit:
5581   26F4             _if138_exit:
5582   26F4             _for135_update:
5583   26F4 0A 11 24      jmp _for135_cond
5584   26F7             _for135_exit:
5585   26F7             ; return_opcode.name[0] = '\0'; 
5586   26F7 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5587   26FA 58 00 00      add d, 0
5588   26FD D7            push a
5589   26FE DA            push d
5590   26FF FD 2E 00 00   mov32 cb, $00000000
5590   2703 00 00 
5591   2705 E7            pop d
5592   2706 5A            add d, b
5593   2707 E4            pop a
5594   2708 DA            push d
5595   2709 FD 2E 00 00   mov32 cb, $00000000
5595   270D 00 00 
5596   270F E7            pop d
5597   2710 FD 3E         mov [d], bl
5598   2712             ; return return_opcode; 
5599   2712 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5600   2715 2D            mov b, d
5601   2716 38 00 00      mov c, 0
5602   2719 F9            leave
5603   271A 09            ret
5604   271B             
5605   271B             forwards:
5606   271B F8 00 00      enter 0 ; (push bp; mov bp, sp)
5607   271E             ; bin_p = bin_p + amount; 
5608   271E 3B C7 4F      mov d, _bin_p ; $bin_p
5609   2721 DA            push d
5610   2722 3B C7 4F      mov d, _bin_p ; $bin_p
5611   2725 2A            mov b, [d]
5612   2726 38 00 00      mov c, 0
5613   2729             ; --- START TERMS
5614   2729 D7            push a
5615   272A 11            mov a, b
5616   272B FA 05 00      lea d, [bp + 5] ; $amount
5617   272E 32            mov bl, [d]
5618   272F A7 00         mov bh, 0
5619   2731 38 00 00      mov c, 0
5620   2734 56            add b, a
5621   2735 E4            pop a
5622   2736             ; --- END TERMS
5623   2736 E7            pop d
5624   2737 FD 43         mov [d], b
5625   2739             ; prog_size = prog_size + amount; 
5626   2739 3B E1 4F      mov d, _prog_size ; $prog_size
5627   273C DA            push d
5628   273D 3B E1 4F      mov d, _prog_size ; $prog_size
5629   2740 2A            mov b, [d]
5630   2741 38 00 00      mov c, 0
5631   2744             ; --- START TERMS
5632   2744 D7            push a
5633   2745 11            mov a, b
5634   2746 FA 05 00      lea d, [bp + 5] ; $amount
5635   2749 32            mov bl, [d]
5636   274A A7 00         mov bh, 0
5637   274C 38 00 00      mov c, 0
5638   274F 56            add b, a
5639   2750 E4            pop a
5640   2751             ; --- END TERMS
5641   2751 E7            pop d
5642   2752 FD 43         mov [d], b
5643   2754             ; pc = pc + amount; 
5644   2754 3B 78 4E      mov d, _pc ; $pc
5645   2757 DA            push d
5646   2758 3B 78 4E      mov d, _pc ; $pc
5647   275B 2A            mov b, [d]
5648   275C 38 00 00      mov c, 0
5649   275F             ; --- START TERMS
5650   275F D7            push a
5651   2760 11            mov a, b
5652   2761 FA 05 00      lea d, [bp + 5] ; $amount
5653   2764 32            mov bl, [d]
5654   2765 A7 00         mov bh, 0
5655   2767 38 00 00      mov c, 0
5656   276A 56            add b, a
5657   276B E4            pop a
5658   276C             ; --- END TERMS
5659   276C E7            pop d
5660   276D FD 43         mov [d], b
5661   276F F9            leave
5662   2770 09            ret
5663   2771             
5664   2771             emit_byte:
5665   2771 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5666   2774             ; if(!emit_override){ 
5667   2774             _if145_cond:
5668   2774 FA 06 00      lea d, [bp + 6] ; $emit_override
5669   2777 32            mov bl, [d]
5670   2778 A7 00         mov bh, 0
5671   277A 38 00 00      mov c, 0
5672   277D C0 00 00      cmp b, 0
5673   2780 C6 9A 27      je _if145_exit
5674   2783             _if145_TRUE:
5675   2783             ; *bin_p = byte; 
5676   2783 3B C7 4F      mov d, _bin_p ; $bin_p
5677   2786 2A            mov b, [d]
5678   2787 38 00 00      mov c, 0
5679   278A D8            push b
5680   278B FA 05 00      lea d, [bp + 5] ; $byte
5681   278E 32            mov bl, [d]
5682   278F A7 00         mov bh, 0
5683   2791 38 00 00      mov c, 0
5684   2794 E7            pop d
5685   2795 FD 3E         mov [d], bl
5686   2797 0A 9A 27      jmp _if145_exit
5687   279A             _if145_exit:
5688   279A             ; forwards(1); 
5689   279A             ; --- START FUNCTION CALL
5690   279A FD 2E 01 00   mov32 cb, $00000001
5690   279E 00 00 
5691   27A0 DD            push bl
5692   27A1 07 1B 27      call forwards
5693   27A4 51 01 00      add sp, 1
5694   27A7             ; --- END FUNCTION CALL
5695   27A7 F9            leave
5696   27A8 09            ret
5697   27A9             
5698   27A9             emit_word:
5699   27A9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5700   27AC             ; if(!emit_override){ 
5701   27AC             _if146_cond:
5702   27AC FA 07 00      lea d, [bp + 7] ; $emit_override
5703   27AF 32            mov bl, [d]
5704   27B0 A7 00         mov bh, 0
5705   27B2 38 00 00      mov c, 0
5706   27B5 C0 00 00      cmp b, 0
5707   27B8 C6 D0 27      je _if146_exit
5708   27BB             _if146_TRUE:
5709   27BB             ; *((int*)bin_p) = word; 
5710   27BB 3B C7 4F      mov d, _bin_p ; $bin_p
5711   27BE 2A            mov b, [d]
5712   27BF 38 00 00      mov c, 0
5713   27C2 D8            push b
5714   27C3 FA 05 00      lea d, [bp + 5] ; $word
5715   27C6 2A            mov b, [d]
5716   27C7 38 00 00      mov c, 0
5717   27CA E7            pop d
5718   27CB FD 43         mov [d], b
5719   27CD 0A D0 27      jmp _if146_exit
5720   27D0             _if146_exit:
5721   27D0             ; forwards(2); 
5722   27D0             ; --- START FUNCTION CALL
5723   27D0 FD 2E 02 00   mov32 cb, $00000002
5723   27D4 00 00 
5724   27D6 DD            push bl
5725   27D7 07 1B 27      call forwards
5726   27DA 51 01 00      add sp, 1
5727   27DD             ; --- END FUNCTION CALL
5728   27DD F9            leave
5729   27DE 09            ret
5730   27DF             
5731   27DF             back:
5732   27DF F8 00 00      enter 0 ; (push bp; mov bp, sp)
5733   27E2             ; char *t; 
5734   27E2 52 02 00      sub sp, 2
5735   27E5             ; t = token; 
5736   27E5 FA FF FF      lea d, [bp + -1] ; $t
5737   27E8 DA            push d
5738   27E9 3B 81 4E      mov d, _token_data ; $token
5739   27EC 2D            mov b, d
5740   27ED 38 00 00      mov c, 0
5741   27F0 E7            pop d
5742   27F1 FD 43         mov [d], b
5743   27F3             ; while(*t){ 
5744   27F3             _while147_cond:
5745   27F3 FA FF FF      lea d, [bp + -1] ; $t
5746   27F6 2A            mov b, [d]
5747   27F7 38 00 00      mov c, 0
5748   27FA 74            mov d, b
5749   27FB 32            mov bl, [d]
5750   27FC A7 00         mov bh, 0
5751   27FE 38 00 00      mov c, 0
5752   2801 C0 00 00      cmp b, 0
5753   2804 C6 2A 28      je _while147_exit
5754   2807             _while147_block:
5755   2807             ; prog--; 
5756   2807 3B 7F 4E      mov d, _prog ; $prog
5757   280A 2A            mov b, [d]
5758   280B 38 00 00      mov c, 0
5759   280E FD 7D         dec b
5760   2810 3B 7F 4E      mov d, _prog ; $prog
5761   2813 FD 43         mov [d], b
5762   2815 FD 77         inc b
5763   2817             ; t++; 
5764   2817 FA FF FF      lea d, [bp + -1] ; $t
5765   281A 2A            mov b, [d]
5766   281B 38 00 00      mov c, 0
5767   281E FD 77         inc b
5768   2820 FA FF FF      lea d, [bp + -1] ; $t
5769   2823 FD 43         mov [d], b
5770   2825 FD 7D         dec b
5771   2827 0A F3 27      jmp _while147_cond
5772   282A             _while147_exit:
5773   282A F9            leave
5774   282B 09            ret
5775   282C             
5776   282C             get_path:
5777   282C F8 00 00      enter 0 ; (push bp; mov bp, sp)
5778   282F             ; char *t; 
5779   282F 52 02 00      sub sp, 2
5780   2832             ; *token = '\0'; 
5781   2832 3B 81 4E      mov d, _token_data ; $token
5782   2835 2D            mov b, d
5783   2836 38 00 00      mov c, 0
5784   2839 D8            push b
5785   283A FD 2E 00 00   mov32 cb, $00000000
5785   283E 00 00 
5786   2840 E7            pop d
5787   2841 FD 3E         mov [d], bl
5788   2843             ; tok = 0; 
5789   2843 3B 7B 4E      mov d, _tok ; $tok
5790   2846 DA            push d
5791   2847 FD 2E 00 00   mov32 cb, $00000000
5791   284B 00 00 
5792   284D E7            pop d
5793   284E FD 43         mov [d], b
5794   2850             ; toktype = 0; 
5795   2850 3B 7D 4E      mov d, _toktype ; $toktype
5796   2853 DA            push d
5797   2854 FD 2E 00 00   mov32 cb, $00000000
5797   2858 00 00 
5798   285A E7            pop d
5799   285B FD 43         mov [d], b
5800   285D             ; t = token; 
5801   285D FA FF FF      lea d, [bp + -1] ; $t
5802   2860 DA            push d
5803   2861 3B 81 4E      mov d, _token_data ; $token
5804   2864 2D            mov b, d
5805   2865 38 00 00      mov c, 0
5806   2868 E7            pop d
5807   2869 FD 43         mov [d], b
5808   286B             ; while(is_space(*prog)) prog++; 
5809   286B             _while148_cond:
5810   286B             ; --- START FUNCTION CALL
5811   286B 3B 7F 4E      mov d, _prog ; $prog
5812   286E 2A            mov b, [d]
5813   286F 38 00 00      mov c, 0
5814   2872 74            mov d, b
5815   2873 32            mov bl, [d]
5816   2874 A7 00         mov bh, 0
5817   2876 38 00 00      mov c, 0
5818   2879 DD            push bl
5819   287A 07 B3 3E      call is_space
5820   287D 51 01 00      add sp, 1
5821   2880             ; --- END FUNCTION CALL
5822   2880 C0 00 00      cmp b, 0
5823   2883 C6 99 28      je _while148_exit
5824   2886             _while148_block:
5825   2886             ; prog++; 
5826   2886 3B 7F 4E      mov d, _prog ; $prog
5827   2889 2A            mov b, [d]
5828   288A 38 00 00      mov c, 0
5829   288D FD 77         inc b
5830   288F 3B 7F 4E      mov d, _prog ; $prog
5831   2892 FD 43         mov [d], b
5832   2894 FD 7D         dec b
5833   2896 0A 6B 28      jmp _while148_cond
5834   2899             _while148_exit:
5835   2899             ; if(*prog == '\0'){ 
5836   2899             _if149_cond:
5837   2899 3B 7F 4E      mov d, _prog ; $prog
5838   289C 2A            mov b, [d]
5839   289D 38 00 00      mov c, 0
5840   28A0 74            mov d, b
5841   28A1 32            mov bl, [d]
5842   28A2 A7 00         mov bh, 0
5843   28A4 38 00 00      mov c, 0
5844   28A7             ; --- START RELATIONAL
5845   28A7 D7            push a
5846   28A8 11            mov a, b
5847   28A9 FD 2E 00 00   mov32 cb, $00000000
5847   28AD 00 00 
5848   28AF B0            cmp a, b
5849   28B0 FD 71         seq ; ==
5850   28B2 E4            pop a
5851   28B3             ; --- END RELATIONAL
5852   28B3 C0 00 00      cmp b, 0
5853   28B6 C6 CB 28      je _if149_exit
5854   28B9             _if149_TRUE:
5855   28B9             ; toktype = END; 
5856   28B9 3B 7D 4E      mov d, _toktype ; $toktype
5857   28BC DA            push d
5858   28BD FD 2E 07 00   mov32 cb, $7 ; enum element: END
5858   28C1 00 00 
5859   28C3 E7            pop d
5860   28C4 FD 43         mov [d], b
5861   28C6             ; return; 
5862   28C6 F9            leave
5863   28C7 09            ret
5864   28C8 0A CB 28      jmp _if149_exit
5865   28CB             _if149_exit:
5866   28CB             ; while(*prog == '/' || is_alpha(*prog) || is_digit(*prog) || *prog == '_' || *prog == '-' || *prog == '.') { 
5867   28CB             _while150_cond:
5868   28CB 3B 7F 4E      mov d, _prog ; $prog
5869   28CE 2A            mov b, [d]
5870   28CF 38 00 00      mov c, 0
5871   28D2 74            mov d, b
5872   28D3 32            mov bl, [d]
5873   28D4 A7 00         mov bh, 0
5874   28D6 38 00 00      mov c, 0
5875   28D9             ; --- START RELATIONAL
5876   28D9 D7            push a
5877   28DA 11            mov a, b
5878   28DB FD 2E 2F 00   mov32 cb, $0000002f
5878   28DF 00 00 
5879   28E1 B0            cmp a, b
5880   28E2 FD 71         seq ; ==
5881   28E4 E4            pop a
5882   28E5             ; --- END RELATIONAL
5883   28E5             ; --- START LOGICAL OR
5884   28E5 D7            push a
5885   28E6 11            mov a, b
5886   28E7             ; --- START FUNCTION CALL
5887   28E7 3B 7F 4E      mov d, _prog ; $prog
5888   28EA 2A            mov b, [d]
5889   28EB 38 00 00      mov c, 0
5890   28EE 74            mov d, b
5891   28EF 32            mov bl, [d]
5892   28F0 A7 00         mov bh, 0
5893   28F2 38 00 00      mov c, 0
5894   28F5 DD            push bl
5895   28F6 07 17 3F      call is_alpha
5896   28F9 51 01 00      add sp, 1
5897   28FC             ; --- END FUNCTION CALL
5898   28FC FD A8         sor a, b ; ||
5899   28FE 11            mov a, b
5900   28FF             ; --- START FUNCTION CALL
5901   28FF 3B 7F 4E      mov d, _prog ; $prog
5902   2902 2A            mov b, [d]
5903   2903 38 00 00      mov c, 0
5904   2906 74            mov d, b
5905   2907 32            mov bl, [d]
5906   2908 A7 00         mov bh, 0
5907   290A 38 00 00      mov c, 0
5908   290D DD            push bl
5909   290E 07 97 3F      call is_digit
5910   2911 51 01 00      add sp, 1
5911   2914             ; --- END FUNCTION CALL
5912   2914 FD A8         sor a, b ; ||
5913   2916 11            mov a, b
5914   2917 3B 7F 4E      mov d, _prog ; $prog
5915   291A 2A            mov b, [d]
5916   291B 38 00 00      mov c, 0
5917   291E 74            mov d, b
5918   291F 32            mov bl, [d]
5919   2920 A7 00         mov bh, 0
5920   2922 38 00 00      mov c, 0
5921   2925             ; --- START RELATIONAL
5922   2925 D7            push a
5923   2926 11            mov a, b
5924   2927 FD 2E 5F 00   mov32 cb, $0000005f
5924   292B 00 00 
5925   292D B0            cmp a, b
5926   292E FD 71         seq ; ==
5927   2930 E4            pop a
5928   2931             ; --- END RELATIONAL
5929   2931 FD A8         sor a, b ; ||
5930   2933 11            mov a, b
5931   2934 3B 7F 4E      mov d, _prog ; $prog
5932   2937 2A            mov b, [d]
5933   2938 38 00 00      mov c, 0
5934   293B 74            mov d, b
5935   293C 32            mov bl, [d]
5936   293D A7 00         mov bh, 0
5937   293F 38 00 00      mov c, 0
5938   2942             ; --- START RELATIONAL
5939   2942 D7            push a
5940   2943 11            mov a, b
5941   2944 FD 2E 2D 00   mov32 cb, $0000002d
5941   2948 00 00 
5942   294A B0            cmp a, b
5943   294B FD 71         seq ; ==
5944   294D E4            pop a
5945   294E             ; --- END RELATIONAL
5946   294E FD A8         sor a, b ; ||
5947   2950 11            mov a, b
5948   2951 3B 7F 4E      mov d, _prog ; $prog
5949   2954 2A            mov b, [d]
5950   2955 38 00 00      mov c, 0
5951   2958 74            mov d, b
5952   2959 32            mov bl, [d]
5953   295A A7 00         mov bh, 0
5954   295C 38 00 00      mov c, 0
5955   295F             ; --- START RELATIONAL
5956   295F D7            push a
5957   2960 11            mov a, b
5958   2961 FD 2E 2E 00   mov32 cb, $0000002e
5958   2965 00 00 
5959   2967 B0            cmp a, b
5960   2968 FD 71         seq ; ==
5961   296A E4            pop a
5962   296B             ; --- END RELATIONAL
5963   296B FD A8         sor a, b ; ||
5964   296D E4            pop a
5965   296E             ; --- END LOGICAL OR
5966   296E C0 00 00      cmp b, 0
5967   2971 C6 A2 29      je _while150_exit
5968   2974             _while150_block:
5969   2974             ; *t++ = *prog++; 
5970   2974 FA FF FF      lea d, [bp + -1] ; $t
5971   2977 2A            mov b, [d]
5972   2978 38 00 00      mov c, 0
5973   297B FD 77         inc b
5974   297D FA FF FF      lea d, [bp + -1] ; $t
5975   2980 FD 43         mov [d], b
5976   2982 FD 7D         dec b
5977   2984 D8            push b
5978   2985 3B 7F 4E      mov d, _prog ; $prog
5979   2988 2A            mov b, [d]
5980   2989 38 00 00      mov c, 0
5981   298C FD 77         inc b
5982   298E 3B 7F 4E      mov d, _prog ; $prog
5983   2991 FD 43         mov [d], b
5984   2993 FD 7D         dec b
5985   2995 74            mov d, b
5986   2996 32            mov bl, [d]
5987   2997 A7 00         mov bh, 0
5988   2999 38 00 00      mov c, 0
5989   299C E7            pop d
5990   299D FD 3E         mov [d], bl
5991   299F 0A CB 28      jmp _while150_cond
5992   29A2             _while150_exit:
5993   29A2             ; *t = '\0'; 
5994   29A2 FA FF FF      lea d, [bp + -1] ; $t
5995   29A5 2A            mov b, [d]
5996   29A6 38 00 00      mov c, 0
5997   29A9 D8            push b
5998   29AA FD 2E 00 00   mov32 cb, $00000000
5998   29AE 00 00 
5999   29B0 E7            pop d
6000   29B1 FD 3E         mov [d], bl
6001   29B3 F9            leave
6002   29B4 09            ret
6003   29B5             
6004   29B5             is_hex_digit:
6005   29B5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6006   29B8             ; return c >= '0' && c <= '9' || c >= 'A' && c <= 'F' || c >= 'a' && c <= 'f'; 
6007   29B8 FA 05 00      lea d, [bp + 5] ; $c
6008   29BB 32            mov bl, [d]
6009   29BC A7 00         mov bh, 0
6010   29BE 38 00 00      mov c, 0
6011   29C1             ; --- START RELATIONAL
6012   29C1 D7            push a
6013   29C2 11            mov a, b
6014   29C3 FD 2E 30 00   mov32 cb, $00000030
6014   29C7 00 00 
6015   29C9 B0            cmp a, b
6016   29CA FD 80         sge ; >=
6017   29CC E4            pop a
6018   29CD             ; --- END RELATIONAL
6019   29CD             ; --- START LOGICAL AND
6020   29CD D7            push a
6021   29CE 11            mov a, b
6022   29CF FA 05 00      lea d, [bp + 5] ; $c
6023   29D2 32            mov bl, [d]
6024   29D3 A7 00         mov bh, 0
6025   29D5 38 00 00      mov c, 0
6026   29D8             ; --- START RELATIONAL
6027   29D8 D7            push a
6028   29D9 11            mov a, b
6029   29DA FD 2E 39 00   mov32 cb, $00000039
6029   29DE 00 00 
6030   29E0 B0            cmp a, b
6031   29E1 FD 74         sle ; <= (signed)
6032   29E3 E4            pop a
6033   29E4             ; --- END RELATIONAL
6034   29E4 FD A7         sand a, b
6035   29E6 E4            pop a
6036   29E7             ; --- END LOGICAL AND
6037   29E7             ; --- START LOGICAL OR
6038   29E7 D7            push a
6039   29E8 11            mov a, b
6040   29E9 FA 05 00      lea d, [bp + 5] ; $c
6041   29EC 32            mov bl, [d]
6042   29ED A7 00         mov bh, 0
6043   29EF 38 00 00      mov c, 0
6044   29F2             ; --- START RELATIONAL
6045   29F2 D7            push a
6046   29F3 11            mov a, b
6047   29F4 FD 2E 41 00   mov32 cb, $00000041
6047   29F8 00 00 
6048   29FA B0            cmp a, b
6049   29FB FD 80         sge ; >=
6050   29FD E4            pop a
6051   29FE             ; --- END RELATIONAL
6052   29FE             ; --- START LOGICAL AND
6053   29FE D7            push a
6054   29FF 11            mov a, b
6055   2A00 FA 05 00      lea d, [bp + 5] ; $c
6056   2A03 32            mov bl, [d]
6057   2A04 A7 00         mov bh, 0
6058   2A06 38 00 00      mov c, 0
6059   2A09             ; --- START RELATIONAL
6060   2A09 D7            push a
6061   2A0A 11            mov a, b
6062   2A0B FD 2E 46 00   mov32 cb, $00000046
6062   2A0F 00 00 
6063   2A11 B0            cmp a, b
6064   2A12 FD 74         sle ; <= (signed)
6065   2A14 E4            pop a
6066   2A15             ; --- END RELATIONAL
6067   2A15 FD A7         sand a, b
6068   2A17 E4            pop a
6069   2A18             ; --- END LOGICAL AND
6070   2A18 FD A8         sor a, b ; ||
6071   2A1A 11            mov a, b
6072   2A1B FA 05 00      lea d, [bp + 5] ; $c
6073   2A1E 32            mov bl, [d]
6074   2A1F A7 00         mov bh, 0
6075   2A21 38 00 00      mov c, 0
6076   2A24             ; --- START RELATIONAL
6077   2A24 D7            push a
6078   2A25 11            mov a, b
6079   2A26 FD 2E 61 00   mov32 cb, $00000061
6079   2A2A 00 00 
6080   2A2C B0            cmp a, b
6081   2A2D FD 80         sge ; >=
6082   2A2F E4            pop a
6083   2A30             ; --- END RELATIONAL
6084   2A30             ; --- START LOGICAL AND
6085   2A30 D7            push a
6086   2A31 11            mov a, b
6087   2A32 FA 05 00      lea d, [bp + 5] ; $c
6088   2A35 32            mov bl, [d]
6089   2A36 A7 00         mov bh, 0
6090   2A38 38 00 00      mov c, 0
6091   2A3B             ; --- START RELATIONAL
6092   2A3B D7            push a
6093   2A3C 11            mov a, b
6094   2A3D FD 2E 66 00   mov32 cb, $00000066
6094   2A41 00 00 
6095   2A43 B0            cmp a, b
6096   2A44 FD 74         sle ; <= (signed)
6097   2A46 E4            pop a
6098   2A47             ; --- END RELATIONAL
6099   2A47 FD A7         sand a, b
6100   2A49 E4            pop a
6101   2A4A             ; --- END LOGICAL AND
6102   2A4A FD A8         sor a, b ; ||
6103   2A4C E4            pop a
6104   2A4D             ; --- END LOGICAL OR
6105   2A4D F9            leave
6106   2A4E 09            ret
6107   2A4F             
6108   2A4F             get_line:
6109   2A4F F8 00 00      enter 0 ; (push bp; mov bp, sp)
6110   2A52             ; char *t; 
6111   2A52 52 02 00      sub sp, 2
6112   2A55             ; t = string_const; 
6113   2A55 FA FF FF      lea d, [bp + -1] ; $t
6114   2A58 DA            push d
6115   2A59 3B C1 4E      mov d, _string_const_data ; $string_const
6116   2A5C 2D            mov b, d
6117   2A5D 38 00 00      mov c, 0
6118   2A60 E7            pop d
6119   2A61 FD 43         mov [d], b
6120   2A63             ; *t = '\0'; 
6121   2A63 FA FF FF      lea d, [bp + -1] ; $t
6122   2A66 2A            mov b, [d]
6123   2A67 38 00 00      mov c, 0
6124   2A6A D8            push b
6125   2A6B FD 2E 00 00   mov32 cb, $00000000
6125   2A6F 00 00 
6126   2A71 E7            pop d
6127   2A72 FD 3E         mov [d], bl
6128   2A74             ; while(*prog != 0x0A && *prog != '\0'){ 
6129   2A74             _while151_cond:
6130   2A74 3B 7F 4E      mov d, _prog ; $prog
6131   2A77 2A            mov b, [d]
6132   2A78 38 00 00      mov c, 0
6133   2A7B 74            mov d, b
6134   2A7C 32            mov bl, [d]
6135   2A7D A7 00         mov bh, 0
6136   2A7F 38 00 00      mov c, 0
6137   2A82             ; --- START RELATIONAL
6138   2A82 D7            push a
6139   2A83 11            mov a, b
6140   2A84 FD 2E 0A 00   mov32 cb, $0000000a
6140   2A88 00 00 
6141   2A8A B0            cmp a, b
6142   2A8B FD 72         sneq ; !=
6143   2A8D E4            pop a
6144   2A8E             ; --- END RELATIONAL
6145   2A8E             ; --- START LOGICAL AND
6146   2A8E D7            push a
6147   2A8F 11            mov a, b
6148   2A90 3B 7F 4E      mov d, _prog ; $prog
6149   2A93 2A            mov b, [d]
6150   2A94 38 00 00      mov c, 0
6151   2A97 74            mov d, b
6152   2A98 32            mov bl, [d]
6153   2A99 A7 00         mov bh, 0
6154   2A9B 38 00 00      mov c, 0
6155   2A9E             ; --- START RELATIONAL
6156   2A9E D7            push a
6157   2A9F 11            mov a, b
6158   2AA0 FD 2E 00 00   mov32 cb, $00000000
6158   2AA4 00 00 
6159   2AA6 B0            cmp a, b
6160   2AA7 FD 72         sneq ; !=
6161   2AA9 E4            pop a
6162   2AAA             ; --- END RELATIONAL
6163   2AAA FD A7         sand a, b
6164   2AAC E4            pop a
6165   2AAD             ; --- END LOGICAL AND
6166   2AAD C0 00 00      cmp b, 0
6167   2AB0 C6 59 2B      je _while151_exit
6168   2AB3             _while151_block:
6169   2AB3             ; if(*prog == ';'){ 
6170   2AB3             _if152_cond:
6171   2AB3 3B 7F 4E      mov d, _prog ; $prog
6172   2AB6 2A            mov b, [d]
6173   2AB7 38 00 00      mov c, 0
6174   2ABA 74            mov d, b
6175   2ABB 32            mov bl, [d]
6176   2ABC A7 00         mov bh, 0
6177   2ABE 38 00 00      mov c, 0
6178   2AC1             ; --- START RELATIONAL
6179   2AC1 D7            push a
6180   2AC2 11            mov a, b
6181   2AC3 FD 2E 3B 00   mov32 cb, $0000003b
6181   2AC7 00 00 
6182   2AC9 B0            cmp a, b
6183   2ACA FD 71         seq ; ==
6184   2ACC E4            pop a
6185   2ACD             ; --- END RELATIONAL
6186   2ACD C0 00 00      cmp b, 0
6187   2AD0 C6 2B 2B      je _if152_else
6188   2AD3             _if152_TRUE:
6189   2AD3             ; while(*prog != 0x0A && *prog != '\0') prog++; 
6190   2AD3             _while153_cond:
6191   2AD3 3B 7F 4E      mov d, _prog ; $prog
6192   2AD6 2A            mov b, [d]
6193   2AD7 38 00 00      mov c, 0
6194   2ADA 74            mov d, b
6195   2ADB 32            mov bl, [d]
6196   2ADC A7 00         mov bh, 0
6197   2ADE 38 00 00      mov c, 0
6198   2AE1             ; --- START RELATIONAL
6199   2AE1 D7            push a
6200   2AE2 11            mov a, b
6201   2AE3 FD 2E 0A 00   mov32 cb, $0000000a
6201   2AE7 00 00 
6202   2AE9 B0            cmp a, b
6203   2AEA FD 72         sneq ; !=
6204   2AEC E4            pop a
6205   2AED             ; --- END RELATIONAL
6206   2AED             ; --- START LOGICAL AND
6207   2AED D7            push a
6208   2AEE 11            mov a, b
6209   2AEF 3B 7F 4E      mov d, _prog ; $prog
6210   2AF2 2A            mov b, [d]
6211   2AF3 38 00 00      mov c, 0
6212   2AF6 74            mov d, b
6213   2AF7 32            mov bl, [d]
6214   2AF8 A7 00         mov bh, 0
6215   2AFA 38 00 00      mov c, 0
6216   2AFD             ; --- START RELATIONAL
6217   2AFD D7            push a
6218   2AFE 11            mov a, b
6219   2AFF FD 2E 00 00   mov32 cb, $00000000
6219   2B03 00 00 
6220   2B05 B0            cmp a, b
6221   2B06 FD 72         sneq ; !=
6222   2B08 E4            pop a
6223   2B09             ; --- END RELATIONAL
6224   2B09 FD A7         sand a, b
6225   2B0B E4            pop a
6226   2B0C             ; --- END LOGICAL AND
6227   2B0C C0 00 00      cmp b, 0
6228   2B0F C6 25 2B      je _while153_exit
6229   2B12             _while153_block:
6230   2B12             ; prog++; 
6231   2B12 3B 7F 4E      mov d, _prog ; $prog
6232   2B15 2A            mov b, [d]
6233   2B16 38 00 00      mov c, 0
6234   2B19 FD 77         inc b
6235   2B1B 3B 7F 4E      mov d, _prog ; $prog
6236   2B1E FD 43         mov [d], b
6237   2B20 FD 7D         dec b
6238   2B22 0A D3 2A      jmp _while153_cond
6239   2B25             _while153_exit:
6240   2B25             ; break; 
6241   2B25 0A 59 2B      jmp _while151_exit ; while break
6242   2B28 0A 56 2B      jmp _if152_exit
6243   2B2B             _if152_else:
6244   2B2B             ; *t++ = *prog++; 
6245   2B2B FA FF FF      lea d, [bp + -1] ; $t
6246   2B2E 2A            mov b, [d]
6247   2B2F 38 00 00      mov c, 0
6248   2B32 FD 77         inc b
6249   2B34 FA FF FF      lea d, [bp + -1] ; $t
6250   2B37 FD 43         mov [d], b
6251   2B39 FD 7D         dec b
6252   2B3B D8            push b
6253   2B3C 3B 7F 4E      mov d, _prog ; $prog
6254   2B3F 2A            mov b, [d]
6255   2B40 38 00 00      mov c, 0
6256   2B43 FD 77         inc b
6257   2B45 3B 7F 4E      mov d, _prog ; $prog
6258   2B48 FD 43         mov [d], b
6259   2B4A FD 7D         dec b
6260   2B4C 74            mov d, b
6261   2B4D 32            mov bl, [d]
6262   2B4E A7 00         mov bh, 0
6263   2B50 38 00 00      mov c, 0
6264   2B53 E7            pop d
6265   2B54 FD 3E         mov [d], bl
6266   2B56             _if152_exit:
6267   2B56 0A 74 2A      jmp _while151_cond
6268   2B59             _while151_exit:
6269   2B59             ; *t = '\0'; 
6270   2B59 FA FF FF      lea d, [bp + -1] ; $t
6271   2B5C 2A            mov b, [d]
6272   2B5D 38 00 00      mov c, 0
6273   2B60 D8            push b
6274   2B61 FD 2E 00 00   mov32 cb, $00000000
6274   2B65 00 00 
6275   2B67 E7            pop d
6276   2B68 FD 3E         mov [d], bl
6277   2B6A F9            leave
6278   2B6B 09            ret
6279   2B6C             
6280   2B6C             get:
6281   2B6C F8 00 00      enter 0 ; (push bp; mov bp, sp)
6282   2B6F             ; char *t; 
6283   2B6F 52 02 00      sub sp, 2
6284   2B72             ; char temp_hex[64]; 
6285   2B72 52 40 00      sub sp, 64
6286   2B75             ; char *p; 
6287   2B75 52 02 00      sub sp, 2
6288   2B78             ; *token = '\0'; 
6289   2B78 3B 81 4E      mov d, _token_data ; $token
6290   2B7B 2D            mov b, d
6291   2B7C 38 00 00      mov c, 0
6292   2B7F D8            push b
6293   2B80 FD 2E 00 00   mov32 cb, $00000000
6293   2B84 00 00 
6294   2B86 E7            pop d
6295   2B87 FD 3E         mov [d], bl
6296   2B89             ; tok = TOK_UNDEF; 
6297   2B89 3B 7B 4E      mov d, _tok ; $tok
6298   2B8C DA            push d
6299   2B8D FD 2E 00 00   mov32 cb, $0 ; enum element: TOK_UNDEF
6299   2B91 00 00 
6300   2B93 E7            pop d
6301   2B94 FD 43         mov [d], b
6302   2B96             ; toktype = TYPE_UNDEF; 
6303   2B96 3B 7D 4E      mov d, _toktype ; $toktype
6304   2B99 DA            push d
6305   2B9A FD 2E 00 00   mov32 cb, $0 ; enum element: TYPE_UNDEF
6305   2B9E 00 00 
6306   2BA0 E7            pop d
6307   2BA1 FD 43         mov [d], b
6308   2BA3             ; t = token; 
6309   2BA3 FA FF FF      lea d, [bp + -1] ; $t
6310   2BA6 DA            push d
6311   2BA7 3B 81 4E      mov d, _token_data ; $token
6312   2BAA 2D            mov b, d
6313   2BAB 38 00 00      mov c, 0
6314   2BAE E7            pop d
6315   2BAF FD 43         mov [d], b
6316   2BB1             ; do{ 
6317   2BB1             _do154_block:
6318   2BB1             ; while(is_space(*prog)) prog++; 
6319   2BB1             _while155_cond:
6320   2BB1             ; --- START FUNCTION CALL
6321   2BB1 3B 7F 4E      mov d, _prog ; $prog
6322   2BB4 2A            mov b, [d]
6323   2BB5 38 00 00      mov c, 0
6324   2BB8 74            mov d, b
6325   2BB9 32            mov bl, [d]
6326   2BBA A7 00         mov bh, 0
6327   2BBC 38 00 00      mov c, 0
6328   2BBF DD            push bl
6329   2BC0 07 B3 3E      call is_space
6330   2BC3 51 01 00      add sp, 1
6331   2BC6             ; --- END FUNCTION CALL
6332   2BC6 C0 00 00      cmp b, 0
6333   2BC9 C6 DF 2B      je _while155_exit
6334   2BCC             _while155_block:
6335   2BCC             ; prog++; 
6336   2BCC 3B 7F 4E      mov d, _prog ; $prog
6337   2BCF 2A            mov b, [d]
6338   2BD0 38 00 00      mov c, 0
6339   2BD3 FD 77         inc b
6340   2BD5 3B 7F 4E      mov d, _prog ; $prog
6341   2BD8 FD 43         mov [d], b
6342   2BDA FD 7D         dec b
6343   2BDC 0A B1 2B      jmp _while155_cond
6344   2BDF             _while155_exit:
6345   2BDF             ; if(*prog == ';'){ 
6346   2BDF             _if156_cond:
6347   2BDF 3B 7F 4E      mov d, _prog ; $prog
6348   2BE2 2A            mov b, [d]
6349   2BE3 38 00 00      mov c, 0
6350   2BE6 74            mov d, b
6351   2BE7 32            mov bl, [d]
6352   2BE8 A7 00         mov bh, 0
6353   2BEA 38 00 00      mov c, 0
6354   2BED             ; --- START RELATIONAL
6355   2BED D7            push a
6356   2BEE 11            mov a, b
6357   2BEF FD 2E 3B 00   mov32 cb, $0000003b
6357   2BF3 00 00 
6358   2BF5 B0            cmp a, b
6359   2BF6 FD 71         seq ; ==
6360   2BF8 E4            pop a
6361   2BF9             ; --- END RELATIONAL
6362   2BF9 C0 00 00      cmp b, 0
6363   2BFC C6 68 2C      je _if156_exit
6364   2BFF             _if156_TRUE:
6365   2BFF             ; while(*prog != '\n') prog++; 
6366   2BFF             _while157_cond:
6367   2BFF 3B 7F 4E      mov d, _prog ; $prog
6368   2C02 2A            mov b, [d]
6369   2C03 38 00 00      mov c, 0
6370   2C06 74            mov d, b
6371   2C07 32            mov bl, [d]
6372   2C08 A7 00         mov bh, 0
6373   2C0A 38 00 00      mov c, 0
6374   2C0D             ; --- START RELATIONAL
6375   2C0D D7            push a
6376   2C0E 11            mov a, b
6377   2C0F FD 2E 0A 00   mov32 cb, $0000000a
6377   2C13 00 00 
6378   2C15 B0            cmp a, b
6379   2C16 FD 72         sneq ; !=
6380   2C18 E4            pop a
6381   2C19             ; --- END RELATIONAL
6382   2C19 C0 00 00      cmp b, 0
6383   2C1C C6 32 2C      je _while157_exit
6384   2C1F             _while157_block:
6385   2C1F             ; prog++; 
6386   2C1F 3B 7F 4E      mov d, _prog ; $prog
6387   2C22 2A            mov b, [d]
6388   2C23 38 00 00      mov c, 0
6389   2C26 FD 77         inc b
6390   2C28 3B 7F 4E      mov d, _prog ; $prog
6391   2C2B FD 43         mov [d], b
6392   2C2D FD 7D         dec b
6393   2C2F 0A FF 2B      jmp _while157_cond
6394   2C32             _while157_exit:
6395   2C32             ; if(*prog == '\n') prog++; 
6396   2C32             _if158_cond:
6397   2C32 3B 7F 4E      mov d, _prog ; $prog
6398   2C35 2A            mov b, [d]
6399   2C36 38 00 00      mov c, 0
6400   2C39 74            mov d, b
6401   2C3A 32            mov bl, [d]
6402   2C3B A7 00         mov bh, 0
6403   2C3D 38 00 00      mov c, 0
6404   2C40             ; --- START RELATIONAL
6405   2C40 D7            push a
6406   2C41 11            mov a, b
6407   2C42 FD 2E 0A 00   mov32 cb, $0000000a
6407   2C46 00 00 
6408   2C48 B0            cmp a, b
6409   2C49 FD 71         seq ; ==
6410   2C4B E4            pop a
6411   2C4C             ; --- END RELATIONAL
6412   2C4C C0 00 00      cmp b, 0
6413   2C4F C6 65 2C      je _if158_exit
6414   2C52             _if158_TRUE:
6415   2C52             ; prog++; 
6416   2C52 3B 7F 4E      mov d, _prog ; $prog
6417   2C55 2A            mov b, [d]
6418   2C56 38 00 00      mov c, 0
6419   2C59 FD 77         inc b
6420   2C5B 3B 7F 4E      mov d, _prog ; $prog
6421   2C5E FD 43         mov [d], b
6422   2C60 FD 7D         dec b
6423   2C62 0A 65 2C      jmp _if158_exit
6424   2C65             _if158_exit:
6425   2C65 0A 68 2C      jmp _if156_exit
6426   2C68             _if156_exit:
6427   2C68             ; } while(is_space(*prog) || *prog == ';'); 
6428   2C68             _do154_cond:
6429   2C68             ; --- START FUNCTION CALL
6430   2C68 3B 7F 4E      mov d, _prog ; $prog
6431   2C6B 2A            mov b, [d]
6432   2C6C 38 00 00      mov c, 0
6433   2C6F 74            mov d, b
6434   2C70 32            mov bl, [d]
6435   2C71 A7 00         mov bh, 0
6436   2C73 38 00 00      mov c, 0
6437   2C76 DD            push bl
6438   2C77 07 B3 3E      call is_space
6439   2C7A 51 01 00      add sp, 1
6440   2C7D             ; --- END FUNCTION CALL
6441   2C7D             ; --- START LOGICAL OR
6442   2C7D D7            push a
6443   2C7E 11            mov a, b
6444   2C7F 3B 7F 4E      mov d, _prog ; $prog
6445   2C82 2A            mov b, [d]
6446   2C83 38 00 00      mov c, 0
6447   2C86 74            mov d, b
6448   2C87 32            mov bl, [d]
6449   2C88 A7 00         mov bh, 0
6450   2C8A 38 00 00      mov c, 0
6451   2C8D             ; --- START RELATIONAL
6452   2C8D D7            push a
6453   2C8E 11            mov a, b
6454   2C8F FD 2E 3B 00   mov32 cb, $0000003b
6454   2C93 00 00 
6455   2C95 B0            cmp a, b
6456   2C96 FD 71         seq ; ==
6457   2C98 E4            pop a
6458   2C99             ; --- END RELATIONAL
6459   2C99 FD A8         sor a, b ; ||
6460   2C9B E4            pop a
6461   2C9C             ; --- END LOGICAL OR
6462   2C9C C0 01 00      cmp b, 1
6463   2C9F C6 B1 2B      je _do154_block
6464   2CA2             _do154_exit:
6465   2CA2             ; if(*prog == '\0'){ 
6466   2CA2             _if159_cond:
6467   2CA2 3B 7F 4E      mov d, _prog ; $prog
6468   2CA5 2A            mov b, [d]
6469   2CA6 38 00 00      mov c, 0
6470   2CA9 74            mov d, b
6471   2CAA 32            mov bl, [d]
6472   2CAB A7 00         mov bh, 0
6473   2CAD 38 00 00      mov c, 0
6474   2CB0             ; --- START RELATIONAL
6475   2CB0 D7            push a
6476   2CB1 11            mov a, b
6477   2CB2 FD 2E 00 00   mov32 cb, $00000000
6477   2CB6 00 00 
6478   2CB8 B0            cmp a, b
6479   2CB9 FD 71         seq ; ==
6480   2CBB E4            pop a
6481   2CBC             ; --- END RELATIONAL
6482   2CBC C0 00 00      cmp b, 0
6483   2CBF C6 D4 2C      je _if159_exit
6484   2CC2             _if159_TRUE:
6485   2CC2             ; toktype = END; 
6486   2CC2 3B 7D 4E      mov d, _toktype ; $toktype
6487   2CC5 DA            push d
6488   2CC6 FD 2E 07 00   mov32 cb, $7 ; enum element: END
6488   2CCA 00 00 
6489   2CCC E7            pop d
6490   2CCD FD 43         mov [d], b
6491   2CCF             ; return; 
6492   2CCF F9            leave
6493   2CD0 09            ret
6494   2CD1 0A D4 2C      jmp _if159_exit
6495   2CD4             _if159_exit:
6496   2CD4             ; if(is_alpha(*prog)){ 
6497   2CD4             _if160_cond:
6498   2CD4             ; --- START FUNCTION CALL
6499   2CD4 3B 7F 4E      mov d, _prog ; $prog
6500   2CD7 2A            mov b, [d]
6501   2CD8 38 00 00      mov c, 0
6502   2CDB 74            mov d, b
6503   2CDC 32            mov bl, [d]
6504   2CDD A7 00         mov bh, 0
6505   2CDF 38 00 00      mov c, 0
6506   2CE2 DD            push bl
6507   2CE3 07 17 3F      call is_alpha
6508   2CE6 51 01 00      add sp, 1
6509   2CE9             ; --- END FUNCTION CALL
6510   2CE9 C0 00 00      cmp b, 0
6511   2CEC C6 AC 2D      je _if160_else
6512   2CEF             _if160_TRUE:
6513   2CEF             ; while(is_alpha(*prog) || is_digit(*prog)){ 
6514   2CEF             _while161_cond:
6515   2CEF             ; --- START FUNCTION CALL
6516   2CEF 3B 7F 4E      mov d, _prog ; $prog
6517   2CF2 2A            mov b, [d]
6518   2CF3 38 00 00      mov c, 0
6519   2CF6 74            mov d, b
6520   2CF7 32            mov bl, [d]
6521   2CF8 A7 00         mov bh, 0
6522   2CFA 38 00 00      mov c, 0
6523   2CFD DD            push bl
6524   2CFE 07 17 3F      call is_alpha
6525   2D01 51 01 00      add sp, 1
6526   2D04             ; --- END FUNCTION CALL
6527   2D04             ; --- START LOGICAL OR
6528   2D04 D7            push a
6529   2D05 11            mov a, b
6530   2D06             ; --- START FUNCTION CALL
6531   2D06 3B 7F 4E      mov d, _prog ; $prog
6532   2D09 2A            mov b, [d]
6533   2D0A 38 00 00      mov c, 0
6534   2D0D 74            mov d, b
6535   2D0E 32            mov bl, [d]
6536   2D0F A7 00         mov bh, 0
6537   2D11 38 00 00      mov c, 0
6538   2D14 DD            push bl
6539   2D15 07 97 3F      call is_digit
6540   2D18 51 01 00      add sp, 1
6541   2D1B             ; --- END FUNCTION CALL
6542   2D1B FD A8         sor a, b ; ||
6543   2D1D E4            pop a
6544   2D1E             ; --- END LOGICAL OR
6545   2D1E C0 00 00      cmp b, 0
6546   2D21 C6 52 2D      je _while161_exit
6547   2D24             _while161_block:
6548   2D24             ; *t++ = *prog++; 
6549   2D24 FA FF FF      lea d, [bp + -1] ; $t
6550   2D27 2A            mov b, [d]
6551   2D28 38 00 00      mov c, 0
6552   2D2B FD 77         inc b
6553   2D2D FA FF FF      lea d, [bp + -1] ; $t
6554   2D30 FD 43         mov [d], b
6555   2D32 FD 7D         dec b
6556   2D34 D8            push b
6557   2D35 3B 7F 4E      mov d, _prog ; $prog
6558   2D38 2A            mov b, [d]
6559   2D39 38 00 00      mov c, 0
6560   2D3C FD 77         inc b
6561   2D3E 3B 7F 4E      mov d, _prog ; $prog
6562   2D41 FD 43         mov [d], b
6563   2D43 FD 7D         dec b
6564   2D45 74            mov d, b
6565   2D46 32            mov bl, [d]
6566   2D47 A7 00         mov bh, 0
6567   2D49 38 00 00      mov c, 0
6568   2D4C E7            pop d
6569   2D4D FD 3E         mov [d], bl
6570   2D4F 0A EF 2C      jmp _while161_cond
6571   2D52             _while161_exit:
6572   2D52             ; *t = '\0'; 
6573   2D52 FA FF FF      lea d, [bp + -1] ; $t
6574   2D55 2A            mov b, [d]
6575   2D56 38 00 00      mov c, 0
6576   2D59 D8            push b
6577   2D5A FD 2E 00 00   mov32 cb, $00000000
6577   2D5E 00 00 
6578   2D60 E7            pop d
6579   2D61 FD 3E         mov [d], bl
6580   2D63             ; if((tok = search_keyword(token)) != -1)  
6581   2D63             _if162_cond:
6582   2D63 3B 7B 4E      mov d, _tok ; $tok
6583   2D66 DA            push d
6584   2D67             ; --- START FUNCTION CALL
6585   2D67 3B 81 4E      mov d, _token_data ; $token
6586   2D6A 2D            mov b, d
6587   2D6B 38 00 00      mov c, 0
6588   2D6E FD AB         swp b
6589   2D70 D8            push b
6590   2D71 07 84 3A      call search_keyword
6591   2D74 51 02 00      add sp, 2
6592   2D77             ; --- END FUNCTION CALL
6593   2D77 E7            pop d
6594   2D78 FD 43         mov [d], b
6595   2D7A             ; --- START RELATIONAL
6596   2D7A D7            push a
6597   2D7B 11            mov a, b
6598   2D7C FD 2E FF FF   mov32 cb, $ffffffff
6598   2D80 FF FF 
6599   2D82 B0            cmp a, b
6600   2D83 FD 72         sneq ; !=
6601   2D85 E4            pop a
6602   2D86             ; --- END RELATIONAL
6603   2D86 C0 00 00      cmp b, 0
6604   2D89 C6 9C 2D      je _if162_else
6605   2D8C             _if162_TRUE:
6606   2D8C             ; toktype = KEYWORD; 
6607   2D8C 3B 7D 4E      mov d, _toktype ; $toktype
6608   2D8F DA            push d
6609   2D90 FD 2E 01 00   mov32 cb, $1 ; enum element: KEYWORD
6609   2D94 00 00 
6610   2D96 E7            pop d
6611   2D97 FD 43         mov [d], b
6612   2D99 0A A9 2D      jmp _if162_exit
6613   2D9C             _if162_else:
6614   2D9C             ; toktype = IDENTIFIER; 
6615   2D9C 3B 7D 4E      mov d, _toktype ; $toktype
6616   2D9F DA            push d
6617   2DA0 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
6617   2DA4 00 00 
6618   2DA6 E7            pop d
6619   2DA7 FD 43         mov [d], b
6620   2DA9             _if162_exit:
6621   2DA9 0A 14 36      jmp _if160_exit
6622   2DAC             _if160_else:
6623   2DAC             ; if(is_digit(*prog) || (*prog == '$' && is_hex_digit(*(prog+1)))){ 
6624   2DAC             _if163_cond:
6625   2DAC             ; --- START FUNCTION CALL
6626   2DAC 3B 7F 4E      mov d, _prog ; $prog
6627   2DAF 2A            mov b, [d]
6628   2DB0 38 00 00      mov c, 0
6629   2DB3 74            mov d, b
6630   2DB4 32            mov bl, [d]
6631   2DB5 A7 00         mov bh, 0
6632   2DB7 38 00 00      mov c, 0
6633   2DBA DD            push bl
6634   2DBB 07 97 3F      call is_digit
6635   2DBE 51 01 00      add sp, 1
6636   2DC1             ; --- END FUNCTION CALL
6637   2DC1             ; --- START LOGICAL OR
6638   2DC1 D7            push a
6639   2DC2 11            mov a, b
6640   2DC3 3B 7F 4E      mov d, _prog ; $prog
6641   2DC6 2A            mov b, [d]
6642   2DC7 38 00 00      mov c, 0
6643   2DCA 74            mov d, b
6644   2DCB 32            mov bl, [d]
6645   2DCC A7 00         mov bh, 0
6646   2DCE 38 00 00      mov c, 0
6647   2DD1             ; --- START RELATIONAL
6648   2DD1 D7            push a
6649   2DD2 11            mov a, b
6650   2DD3 FD 2E 24 00   mov32 cb, $00000024
6650   2DD7 00 00 
6651   2DD9 B0            cmp a, b
6652   2DDA FD 71         seq ; ==
6653   2DDC E4            pop a
6654   2DDD             ; --- END RELATIONAL
6655   2DDD             ; --- START LOGICAL AND
6656   2DDD D7            push a
6657   2DDE 11            mov a, b
6658   2DDF             ; --- START FUNCTION CALL
6659   2DDF 3B 7F 4E      mov d, _prog ; $prog
6660   2DE2 2A            mov b, [d]
6661   2DE3 38 00 00      mov c, 0
6662   2DE6             ; --- START TERMS
6663   2DE6 D7            push a
6664   2DE7 11            mov a, b
6665   2DE8 FD 2E 01 00   mov32 cb, $00000001
6665   2DEC 00 00 
6666   2DEE 56            add b, a
6667   2DEF E4            pop a
6668   2DF0             ; --- END TERMS
6669   2DF0 74            mov d, b
6670   2DF1 32            mov bl, [d]
6671   2DF2 A7 00         mov bh, 0
6672   2DF4 38 00 00      mov c, 0
6673   2DF7 DD            push bl
6674   2DF8 07 B5 29      call is_hex_digit
6675   2DFB 51 01 00      add sp, 1
6676   2DFE             ; --- END FUNCTION CALL
6677   2DFE FD A7         sand a, b
6678   2E00 E4            pop a
6679   2E01             ; --- END LOGICAL AND
6680   2E01 FD A8         sor a, b ; ||
6681   2E03 E4            pop a
6682   2E04             ; --- END LOGICAL OR
6683   2E04 C0 00 00      cmp b, 0
6684   2E07 C6 DA 2F      je _if163_else
6685   2E0A             _if163_TRUE:
6686   2E0A             ; if(*prog == '$' && is_hex_digit(*(prog+1))){ 
6687   2E0A             _if164_cond:
6688   2E0A 3B 7F 4E      mov d, _prog ; $prog
6689   2E0D 2A            mov b, [d]
6690   2E0E 38 00 00      mov c, 0
6691   2E11 74            mov d, b
6692   2E12 32            mov bl, [d]
6693   2E13 A7 00         mov bh, 0
6694   2E15 38 00 00      mov c, 0
6695   2E18             ; --- START RELATIONAL
6696   2E18 D7            push a
6697   2E19 11            mov a, b
6698   2E1A FD 2E 24 00   mov32 cb, $00000024
6698   2E1E 00 00 
6699   2E20 B0            cmp a, b
6700   2E21 FD 71         seq ; ==
6701   2E23 E4            pop a
6702   2E24             ; --- END RELATIONAL
6703   2E24             ; --- START LOGICAL AND
6704   2E24 D7            push a
6705   2E25 11            mov a, b
6706   2E26             ; --- START FUNCTION CALL
6707   2E26 3B 7F 4E      mov d, _prog ; $prog
6708   2E29 2A            mov b, [d]
6709   2E2A 38 00 00      mov c, 0
6710   2E2D             ; --- START TERMS
6711   2E2D D7            push a
6712   2E2E 11            mov a, b
6713   2E2F FD 2E 01 00   mov32 cb, $00000001
6713   2E33 00 00 
6714   2E35 56            add b, a
6715   2E36 E4            pop a
6716   2E37             ; --- END TERMS
6717   2E37 74            mov d, b
6718   2E38 32            mov bl, [d]
6719   2E39 A7 00         mov bh, 0
6720   2E3B 38 00 00      mov c, 0
6721   2E3E DD            push bl
6722   2E3F 07 B5 29      call is_hex_digit
6723   2E42 51 01 00      add sp, 1
6724   2E45             ; --- END FUNCTION CALL
6725   2E45 FD A7         sand a, b
6726   2E47 E4            pop a
6727   2E48             ; --- END LOGICAL AND
6728   2E48 C0 00 00      cmp b, 0
6729   2E4B C6 59 2F      je _if164_else
6730   2E4E             _if164_TRUE:
6731   2E4E             ; *t++ = *prog++; 
6732   2E4E FA FF FF      lea d, [bp + -1] ; $t
6733   2E51 2A            mov b, [d]
6734   2E52 38 00 00      mov c, 0
6735   2E55 FD 77         inc b
6736   2E57 FA FF FF      lea d, [bp + -1] ; $t
6737   2E5A FD 43         mov [d], b
6738   2E5C FD 7D         dec b
6739   2E5E D8            push b
6740   2E5F 3B 7F 4E      mov d, _prog ; $prog
6741   2E62 2A            mov b, [d]
6742   2E63 38 00 00      mov c, 0
6743   2E66 FD 77         inc b
6744   2E68 3B 7F 4E      mov d, _prog ; $prog
6745   2E6B FD 43         mov [d], b
6746   2E6D FD 7D         dec b
6747   2E6F 74            mov d, b
6748   2E70 32            mov bl, [d]
6749   2E71 A7 00         mov bh, 0
6750   2E73 38 00 00      mov c, 0
6751   2E76 E7            pop d
6752   2E77 FD 3E         mov [d], bl
6753   2E79             ; p = temp_hex; 
6754   2E79 FA BD FF      lea d, [bp + -67] ; $p
6755   2E7C DA            push d
6756   2E7D FA BF FF      lea d, [bp + -65] ; $temp_hex
6757   2E80 2D            mov b, d
6758   2E81 38 00 00      mov c, 0
6759   2E84 E7            pop d
6760   2E85 FD 43         mov [d], b
6761   2E87             ; *t++ = *p++ = *prog++; 
6762   2E87 FA FF FF      lea d, [bp + -1] ; $t
6763   2E8A 2A            mov b, [d]
6764   2E8B 38 00 00      mov c, 0
6765   2E8E FD 77         inc b
6766   2E90 FA FF FF      lea d, [bp + -1] ; $t
6767   2E93 FD 43         mov [d], b
6768   2E95 FD 7D         dec b
6769   2E97 D8            push b
6770   2E98 FA BD FF      lea d, [bp + -67] ; $p
6771   2E9B 2A            mov b, [d]
6772   2E9C 38 00 00      mov c, 0
6773   2E9F FD 77         inc b
6774   2EA1 FA BD FF      lea d, [bp + -67] ; $p
6775   2EA4 FD 43         mov [d], b
6776   2EA6 FD 7D         dec b
6777   2EA8 D8            push b
6778   2EA9 3B 7F 4E      mov d, _prog ; $prog
6779   2EAC 2A            mov b, [d]
6780   2EAD 38 00 00      mov c, 0
6781   2EB0 FD 77         inc b
6782   2EB2 3B 7F 4E      mov d, _prog ; $prog
6783   2EB5 FD 43         mov [d], b
6784   2EB7 FD 7D         dec b
6785   2EB9 74            mov d, b
6786   2EBA 32            mov bl, [d]
6787   2EBB A7 00         mov bh, 0
6788   2EBD 38 00 00      mov c, 0
6789   2EC0 E7            pop d
6790   2EC1 FD 3E         mov [d], bl
6791   2EC3 E7            pop d
6792   2EC4 FD 3E         mov [d], bl
6793   2EC6             ; while(is_hex_digit(*prog)){ 
6794   2EC6             _while165_cond:
6795   2EC6             ; --- START FUNCTION CALL
6796   2EC6 3B 7F 4E      mov d, _prog ; $prog
6797   2EC9 2A            mov b, [d]
6798   2ECA 38 00 00      mov c, 0
6799   2ECD 74            mov d, b
6800   2ECE 32            mov bl, [d]
6801   2ECF A7 00         mov bh, 0
6802   2ED1 38 00 00      mov c, 0
6803   2ED4 DD            push bl
6804   2ED5 07 B5 29      call is_hex_digit
6805   2ED8 51 01 00      add sp, 1
6806   2EDB             ; --- END FUNCTION CALL
6807   2EDB C0 00 00      cmp b, 0
6808   2EDE C6 23 2F      je _while165_exit
6809   2EE1             _while165_block:
6810   2EE1             ; *t++ = *p++ = *prog++; 
6811   2EE1 FA FF FF      lea d, [bp + -1] ; $t
6812   2EE4 2A            mov b, [d]
6813   2EE5 38 00 00      mov c, 0
6814   2EE8 FD 77         inc b
6815   2EEA FA FF FF      lea d, [bp + -1] ; $t
6816   2EED FD 43         mov [d], b
6817   2EEF FD 7D         dec b
6818   2EF1 D8            push b
6819   2EF2 FA BD FF      lea d, [bp + -67] ; $p
6820   2EF5 2A            mov b, [d]
6821   2EF6 38 00 00      mov c, 0
6822   2EF9 FD 77         inc b
6823   2EFB FA BD FF      lea d, [bp + -67] ; $p
6824   2EFE FD 43         mov [d], b
6825   2F00 FD 7D         dec b
6826   2F02 D8            push b
6827   2F03 3B 7F 4E      mov d, _prog ; $prog
6828   2F06 2A            mov b, [d]
6829   2F07 38 00 00      mov c, 0
6830   2F0A FD 77         inc b
6831   2F0C 3B 7F 4E      mov d, _prog ; $prog
6832   2F0F FD 43         mov [d], b
6833   2F11 FD 7D         dec b
6834   2F13 74            mov d, b
6835   2F14 32            mov bl, [d]
6836   2F15 A7 00         mov bh, 0
6837   2F17 38 00 00      mov c, 0
6838   2F1A E7            pop d
6839   2F1B FD 3E         mov [d], bl
6840   2F1D E7            pop d
6841   2F1E FD 3E         mov [d], bl
6842   2F20 0A C6 2E      jmp _while165_cond
6843   2F23             _while165_exit:
6844   2F23             ; *t = *p = '\0'; 
6845   2F23 FA FF FF      lea d, [bp + -1] ; $t
6846   2F26 2A            mov b, [d]
6847   2F27 38 00 00      mov c, 0
6848   2F2A D8            push b
6849   2F2B FA BD FF      lea d, [bp + -67] ; $p
6850   2F2E 2A            mov b, [d]
6851   2F2F 38 00 00      mov c, 0
6852   2F32 D8            push b
6853   2F33 FD 2E 00 00   mov32 cb, $00000000
6853   2F37 00 00 
6854   2F39 E7            pop d
6855   2F3A FD 3E         mov [d], bl
6856   2F3C E7            pop d
6857   2F3D FD 3E         mov [d], bl
6858   2F3F             ; int_const = hex_to_int(temp_hex); 
6859   2F3F 3B C1 4F      mov d, _int_const ; $int_const
6860   2F42 DA            push d
6861   2F43             ; --- START FUNCTION CALL
6862   2F43 FA BF FF      lea d, [bp + -65] ; $temp_hex
6863   2F46 2D            mov b, d
6864   2F47 38 00 00      mov c, 0
6865   2F4A FD AB         swp b
6866   2F4C D8            push b
6867   2F4D 07 33 3B      call hex_to_int
6868   2F50 51 02 00      add sp, 2
6869   2F53             ; --- END FUNCTION CALL
6870   2F53 E7            pop d
6871   2F54 FD 43         mov [d], b
6872   2F56 0A CA 2F      jmp _if164_exit
6873   2F59             _if164_else:
6874   2F59             ; while(is_digit(*prog)){ 
6875   2F59             _while166_cond:
6876   2F59             ; --- START FUNCTION CALL
6877   2F59 3B 7F 4E      mov d, _prog ; $prog
6878   2F5C 2A            mov b, [d]
6879   2F5D 38 00 00      mov c, 0
6880   2F60 74            mov d, b
6881   2F61 32            mov bl, [d]
6882   2F62 A7 00         mov bh, 0
6883   2F64 38 00 00      mov c, 0
6884   2F67 DD            push bl
6885   2F68 07 97 3F      call is_digit
6886   2F6B 51 01 00      add sp, 1
6887   2F6E             ; --- END FUNCTION CALL
6888   2F6E C0 00 00      cmp b, 0
6889   2F71 C6 A2 2F      je _while166_exit
6890   2F74             _while166_block:
6891   2F74             ; *t++ = *prog++; 
6892   2F74 FA FF FF      lea d, [bp + -1] ; $t
6893   2F77 2A            mov b, [d]
6894   2F78 38 00 00      mov c, 0
6895   2F7B FD 77         inc b
6896   2F7D FA FF FF      lea d, [bp + -1] ; $t
6897   2F80 FD 43         mov [d], b
6898   2F82 FD 7D         dec b
6899   2F84 D8            push b
6900   2F85 3B 7F 4E      mov d, _prog ; $prog
6901   2F88 2A            mov b, [d]
6902   2F89 38 00 00      mov c, 0
6903   2F8C FD 77         inc b
6904   2F8E 3B 7F 4E      mov d, _prog ; $prog
6905   2F91 FD 43         mov [d], b
6906   2F93 FD 7D         dec b
6907   2F95 74            mov d, b
6908   2F96 32            mov bl, [d]
6909   2F97 A7 00         mov bh, 0
6910   2F99 38 00 00      mov c, 0
6911   2F9C E7            pop d
6912   2F9D FD 3E         mov [d], bl
6913   2F9F 0A 59 2F      jmp _while166_cond
6914   2FA2             _while166_exit:
6915   2FA2             ; *t = '\0'; 
6916   2FA2 FA FF FF      lea d, [bp + -1] ; $t
6917   2FA5 2A            mov b, [d]
6918   2FA6 38 00 00      mov c, 0
6919   2FA9 D8            push b
6920   2FAA FD 2E 00 00   mov32 cb, $00000000
6920   2FAE 00 00 
6921   2FB0 E7            pop d
6922   2FB1 FD 3E         mov [d], bl
6923   2FB3             ; int_const = atoi(token); 
6924   2FB3 3B C1 4F      mov d, _int_const ; $int_const
6925   2FB6 DA            push d
6926   2FB7             ; --- START FUNCTION CALL
6927   2FB7 3B 81 4E      mov d, _token_data ; $token
6928   2FBA 2D            mov b, d
6929   2FBB 38 00 00      mov c, 0
6930   2FBE FD AB         swp b
6931   2FC0 D8            push b
6932   2FC1 07 AA 40      call atoi
6933   2FC4 51 02 00      add sp, 2
6934   2FC7             ; --- END FUNCTION CALL
6935   2FC7 E7            pop d
6936   2FC8 FD 43         mov [d], b
6937   2FCA             _if164_exit:
6938   2FCA             ; toktype = INTEGER_CONST; 
6939   2FCA 3B 7D 4E      mov d, _toktype ; $toktype
6940   2FCD DA            push d
6941   2FCE FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
6941   2FD2 00 00 
6942   2FD4 E7            pop d
6943   2FD5 FD 43         mov [d], b
6944   2FD7 0A 14 36      jmp _if163_exit
6945   2FDA             _if163_else:
6946   2FDA             ; if(*prog == '\''){ 
6947   2FDA             _if167_cond:
6948   2FDA 3B 7F 4E      mov d, _prog ; $prog
6949   2FDD 2A            mov b, [d]
6950   2FDE 38 00 00      mov c, 0
6951   2FE1 74            mov d, b
6952   2FE2 32            mov bl, [d]
6953   2FE3 A7 00         mov bh, 0
6954   2FE5 38 00 00      mov c, 0
6955   2FE8             ; --- START RELATIONAL
6956   2FE8 D7            push a
6957   2FE9 11            mov a, b
6958   2FEA FD 2E 27 00   mov32 cb, $00000027
6958   2FEE 00 00 
6959   2FF0 B0            cmp a, b
6960   2FF1 FD 71         seq ; ==
6961   2FF3 E4            pop a
6962   2FF4             ; --- END RELATIONAL
6963   2FF4 C0 00 00      cmp b, 0
6964   2FF7 C6 44 31      je _if167_else
6965   2FFA             _if167_TRUE:
6966   2FFA             ; *t++ = '\''; 
6967   2FFA FA FF FF      lea d, [bp + -1] ; $t
6968   2FFD 2A            mov b, [d]
6969   2FFE 38 00 00      mov c, 0
6970   3001 FD 77         inc b
6971   3003 FA FF FF      lea d, [bp + -1] ; $t
6972   3006 FD 43         mov [d], b
6973   3008 FD 7D         dec b
6974   300A D8            push b
6975   300B FD 2E 27 00   mov32 cb, $00000027
6975   300F 00 00 
6976   3011 E7            pop d
6977   3012 FD 3E         mov [d], bl
6978   3014             ; prog++; 
6979   3014 3B 7F 4E      mov d, _prog ; $prog
6980   3017 2A            mov b, [d]
6981   3018 38 00 00      mov c, 0
6982   301B FD 77         inc b
6983   301D 3B 7F 4E      mov d, _prog ; $prog
6984   3020 FD 43         mov [d], b
6985   3022 FD 7D         dec b
6986   3024             ; if(*prog == '\\'){ 
6987   3024             _if168_cond:
6988   3024 3B 7F 4E      mov d, _prog ; $prog
6989   3027 2A            mov b, [d]
6990   3028 38 00 00      mov c, 0
6991   302B 74            mov d, b
6992   302C 32            mov bl, [d]
6993   302D A7 00         mov bh, 0
6994   302F 38 00 00      mov c, 0
6995   3032             ; --- START RELATIONAL
6996   3032 D7            push a
6997   3033 11            mov a, b
6998   3034 FD 2E 5C 00   mov32 cb, $0000005c
6998   3038 00 00 
6999   303A B0            cmp a, b
7000   303B FD 71         seq ; ==
7001   303D E4            pop a
7002   303E             ; --- END RELATIONAL
7003   303E C0 00 00      cmp b, 0
7004   3041 C6 9C 30      je _if168_else
7005   3044             _if168_TRUE:
7006   3044             ; *t++ = '\\'; 
7007   3044 FA FF FF      lea d, [bp + -1] ; $t
7008   3047 2A            mov b, [d]
7009   3048 38 00 00      mov c, 0
7010   304B FD 77         inc b
7011   304D FA FF FF      lea d, [bp + -1] ; $t
7012   3050 FD 43         mov [d], b
7013   3052 FD 7D         dec b
7014   3054 D8            push b
7015   3055 FD 2E 5C 00   mov32 cb, $0000005c
7015   3059 00 00 
7016   305B E7            pop d
7017   305C FD 3E         mov [d], bl
7018   305E             ; prog++; 
7019   305E 3B 7F 4E      mov d, _prog ; $prog
7020   3061 2A            mov b, [d]
7021   3062 38 00 00      mov c, 0
7022   3065 FD 77         inc b
7023   3067 3B 7F 4E      mov d, _prog ; $prog
7024   306A FD 43         mov [d], b
7025   306C FD 7D         dec b
7026   306E             ; *t++ = *prog++; 
7027   306E FA FF FF      lea d, [bp + -1] ; $t
7028   3071 2A            mov b, [d]
7029   3072 38 00 00      mov c, 0
7030   3075 FD 77         inc b
7031   3077 FA FF FF      lea d, [bp + -1] ; $t
7032   307A FD 43         mov [d], b
7033   307C FD 7D         dec b
7034   307E D8            push b
7035   307F 3B 7F 4E      mov d, _prog ; $prog
7036   3082 2A            mov b, [d]
7037   3083 38 00 00      mov c, 0
7038   3086 FD 77         inc b
7039   3088 3B 7F 4E      mov d, _prog ; $prog
7040   308B FD 43         mov [d], b
7041   308D FD 7D         dec b
7042   308F 74            mov d, b
7043   3090 32            mov bl, [d]
7044   3091 A7 00         mov bh, 0
7045   3093 38 00 00      mov c, 0
7046   3096 E7            pop d
7047   3097 FD 3E         mov [d], bl
7048   3099 0A C7 30      jmp _if168_exit
7049   309C             _if168_else:
7050   309C             ; *t++ = *prog++; 
7051   309C FA FF FF      lea d, [bp + -1] ; $t
7052   309F 2A            mov b, [d]
7053   30A0 38 00 00      mov c, 0
7054   30A3 FD 77         inc b
7055   30A5 FA FF FF      lea d, [bp + -1] ; $t
7056   30A8 FD 43         mov [d], b
7057   30AA FD 7D         dec b
7058   30AC D8            push b
7059   30AD 3B 7F 4E      mov d, _prog ; $prog
7060   30B0 2A            mov b, [d]
7061   30B1 38 00 00      mov c, 0
7062   30B4 FD 77         inc b
7063   30B6 3B 7F 4E      mov d, _prog ; $prog
7064   30B9 FD 43         mov [d], b
7065   30BB FD 7D         dec b
7066   30BD 74            mov d, b
7067   30BE 32            mov bl, [d]
7068   30BF A7 00         mov bh, 0
7069   30C1 38 00 00      mov c, 0
7070   30C4 E7            pop d
7071   30C5 FD 3E         mov [d], bl
7072   30C7             _if168_exit:
7073   30C7             ; if(*prog != '\''){ 
7074   30C7             _if169_cond:
7075   30C7 3B 7F 4E      mov d, _prog ; $prog
7076   30CA 2A            mov b, [d]
7077   30CB 38 00 00      mov c, 0
7078   30CE 74            mov d, b
7079   30CF 32            mov bl, [d]
7080   30D0 A7 00         mov bh, 0
7081   30D2 38 00 00      mov c, 0
7082   30D5             ; --- START RELATIONAL
7083   30D5 D7            push a
7084   30D6 11            mov a, b
7085   30D7 FD 2E 27 00   mov32 cb, $00000027
7085   30DB 00 00 
7086   30DD B0            cmp a, b
7087   30DE FD 72         sneq ; !=
7088   30E0 E4            pop a
7089   30E1             ; --- END RELATIONAL
7090   30E1 C0 00 00      cmp b, 0
7091   30E4 C6 F6 30      je _if169_exit
7092   30E7             _if169_TRUE:
7093   30E7             ; error("Closing single quotes expected."); 
7094   30E7             ; --- START FUNCTION CALL
7095   30E7 26 F2 52      mov b, _s73 ; "Closing single quotes expected."
7096   30EA FD AB         swp b
7097   30EC D8            push b
7098   30ED 07 72 39      call error
7099   30F0 51 02 00      add sp, 2
7100   30F3             ; --- END FUNCTION CALL
7101   30F3 0A F6 30      jmp _if169_exit
7102   30F6             _if169_exit:
7103   30F6             ; *t++ = '\''; 
7104   30F6 FA FF FF      lea d, [bp + -1] ; $t
7105   30F9 2A            mov b, [d]
7106   30FA 38 00 00      mov c, 0
7107   30FD FD 77         inc b
7108   30FF FA FF FF      lea d, [bp + -1] ; $t
7109   3102 FD 43         mov [d], b
7110   3104 FD 7D         dec b
7111   3106 D8            push b
7112   3107 FD 2E 27 00   mov32 cb, $00000027
7112   310B 00 00 
7113   310D E7            pop d
7114   310E FD 3E         mov [d], bl
7115   3110             ; prog++; 
7116   3110 3B 7F 4E      mov d, _prog ; $prog
7117   3113 2A            mov b, [d]
7118   3114 38 00 00      mov c, 0
7119   3117 FD 77         inc b
7120   3119 3B 7F 4E      mov d, _prog ; $prog
7121   311C FD 43         mov [d], b
7122   311E FD 7D         dec b
7123   3120             ; toktype = CHAR_CONST; 
7124   3120 3B 7D 4E      mov d, _toktype ; $toktype
7125   3123 DA            push d
7126   3124 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
7126   3128 00 00 
7127   312A E7            pop d
7128   312B FD 43         mov [d], b
7129   312D             ; *t = '\0'; 
7130   312D FA FF FF      lea d, [bp + -1] ; $t
7131   3130 2A            mov b, [d]
7132   3131 38 00 00      mov c, 0
7133   3134 D8            push b
7134   3135 FD 2E 00 00   mov32 cb, $00000000
7134   3139 00 00 
7135   313B E7            pop d
7136   313C FD 3E         mov [d], bl
7137   313E             ; convert_constant(); // converts this string token with quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
7138   313E             ; --- START FUNCTION CALL
7139   313E 07 A8 36      call convert_constant
7140   3141 0A 14 36      jmp _if167_exit
7141   3144             _if167_else:
7142   3144             ; if(*prog == '\"'){ 
7143   3144             _if170_cond:
7144   3144 3B 7F 4E      mov d, _prog ; $prog
7145   3147 2A            mov b, [d]
7146   3148 38 00 00      mov c, 0
7147   314B 74            mov d, b
7148   314C 32            mov bl, [d]
7149   314D A7 00         mov bh, 0
7150   314F 38 00 00      mov c, 0
7151   3152             ; --- START RELATIONAL
7152   3152 D7            push a
7153   3153 11            mov a, b
7154   3154 FD 2E 22 00   mov32 cb, $00000022
7154   3158 00 00 
7155   315A B0            cmp a, b
7156   315B FD 71         seq ; ==
7157   315D E4            pop a
7158   315E             ; --- END RELATIONAL
7159   315E C0 00 00      cmp b, 0
7160   3161 C6 6C 32      je _if170_else
7161   3164             _if170_TRUE:
7162   3164             ; *t++ = '\"'; 
7163   3164 FA FF FF      lea d, [bp + -1] ; $t
7164   3167 2A            mov b, [d]
7165   3168 38 00 00      mov c, 0
7166   316B FD 77         inc b
7167   316D FA FF FF      lea d, [bp + -1] ; $t
7168   3170 FD 43         mov [d], b
7169   3172 FD 7D         dec b
7170   3174 D8            push b
7171   3175 FD 2E 22 00   mov32 cb, $00000022
7171   3179 00 00 
7172   317B E7            pop d
7173   317C FD 3E         mov [d], bl
7174   317E             ; prog++; 
7175   317E 3B 7F 4E      mov d, _prog ; $prog
7176   3181 2A            mov b, [d]
7177   3182 38 00 00      mov c, 0
7178   3185 FD 77         inc b
7179   3187 3B 7F 4E      mov d, _prog ; $prog
7180   318A FD 43         mov [d], b
7181   318C FD 7D         dec b
7182   318E             ; while(*prog != '\"' && *prog){ 
7183   318E             _while171_cond:
7184   318E 3B 7F 4E      mov d, _prog ; $prog
7185   3191 2A            mov b, [d]
7186   3192 38 00 00      mov c, 0
7187   3195 74            mov d, b
7188   3196 32            mov bl, [d]
7189   3197 A7 00         mov bh, 0
7190   3199 38 00 00      mov c, 0
7191   319C             ; --- START RELATIONAL
7192   319C D7            push a
7193   319D 11            mov a, b
7194   319E FD 2E 22 00   mov32 cb, $00000022
7194   31A2 00 00 
7195   31A4 B0            cmp a, b
7196   31A5 FD 72         sneq ; !=
7197   31A7 E4            pop a
7198   31A8             ; --- END RELATIONAL
7199   31A8             ; --- START LOGICAL AND
7200   31A8 D7            push a
7201   31A9 11            mov a, b
7202   31AA 3B 7F 4E      mov d, _prog ; $prog
7203   31AD 2A            mov b, [d]
7204   31AE 38 00 00      mov c, 0
7205   31B1 74            mov d, b
7206   31B2 32            mov bl, [d]
7207   31B3 A7 00         mov bh, 0
7208   31B5 38 00 00      mov c, 0
7209   31B8 FD A7         sand a, b
7210   31BA E4            pop a
7211   31BB             ; --- END LOGICAL AND
7212   31BB C0 00 00      cmp b, 0
7213   31BE C6 EF 31      je _while171_exit
7214   31C1             _while171_block:
7215   31C1             ; *t++ = *prog++; 
7216   31C1 FA FF FF      lea d, [bp + -1] ; $t
7217   31C4 2A            mov b, [d]
7218   31C5 38 00 00      mov c, 0
7219   31C8 FD 77         inc b
7220   31CA FA FF FF      lea d, [bp + -1] ; $t
7221   31CD FD 43         mov [d], b
7222   31CF FD 7D         dec b
7223   31D1 D8            push b
7224   31D2 3B 7F 4E      mov d, _prog ; $prog
7225   31D5 2A            mov b, [d]
7226   31D6 38 00 00      mov c, 0
7227   31D9 FD 77         inc b
7228   31DB 3B 7F 4E      mov d, _prog ; $prog
7229   31DE FD 43         mov [d], b
7230   31E0 FD 7D         dec b
7231   31E2 74            mov d, b
7232   31E3 32            mov bl, [d]
7233   31E4 A7 00         mov bh, 0
7234   31E6 38 00 00      mov c, 0
7235   31E9 E7            pop d
7236   31EA FD 3E         mov [d], bl
7237   31EC 0A 8E 31      jmp _while171_cond
7238   31EF             _while171_exit:
7239   31EF             ; if(*prog != '\"') error("Double quotes expected"); 
7240   31EF             _if172_cond:
7241   31EF 3B 7F 4E      mov d, _prog ; $prog
7242   31F2 2A            mov b, [d]
7243   31F3 38 00 00      mov c, 0
7244   31F6 74            mov d, b
7245   31F7 32            mov bl, [d]
7246   31F8 A7 00         mov bh, 0
7247   31FA 38 00 00      mov c, 0
7248   31FD             ; --- START RELATIONAL
7249   31FD D7            push a
7250   31FE 11            mov a, b
7251   31FF FD 2E 22 00   mov32 cb, $00000022
7251   3203 00 00 
7252   3205 B0            cmp a, b
7253   3206 FD 72         sneq ; !=
7254   3208 E4            pop a
7255   3209             ; --- END RELATIONAL
7256   3209 C0 00 00      cmp b, 0
7257   320C C6 1E 32      je _if172_exit
7258   320F             _if172_TRUE:
7259   320F             ; error("Double quotes expected"); 
7260   320F             ; --- START FUNCTION CALL
7261   320F 26 12 53      mov b, _s74 ; "Double quotes expected"
7262   3212 FD AB         swp b
7263   3214 D8            push b
7264   3215 07 72 39      call error
7265   3218 51 02 00      add sp, 2
7266   321B             ; --- END FUNCTION CALL
7267   321B 0A 1E 32      jmp _if172_exit
7268   321E             _if172_exit:
7269   321E             ; *t++ = '\"'; 
7270   321E FA FF FF      lea d, [bp + -1] ; $t
7271   3221 2A            mov b, [d]
7272   3222 38 00 00      mov c, 0
7273   3225 FD 77         inc b
7274   3227 FA FF FF      lea d, [bp + -1] ; $t
7275   322A FD 43         mov [d], b
7276   322C FD 7D         dec b
7277   322E D8            push b
7278   322F FD 2E 22 00   mov32 cb, $00000022
7278   3233 00 00 
7279   3235 E7            pop d
7280   3236 FD 3E         mov [d], bl
7281   3238             ; prog++; 
7282   3238 3B 7F 4E      mov d, _prog ; $prog
7283   323B 2A            mov b, [d]
7284   323C 38 00 00      mov c, 0
7285   323F FD 77         inc b
7286   3241 3B 7F 4E      mov d, _prog ; $prog
7287   3244 FD 43         mov [d], b
7288   3246 FD 7D         dec b
7289   3248             ; toktype = STRING_CONST; 
7290   3248 3B 7D 4E      mov d, _toktype ; $toktype
7291   324B DA            push d
7292   324C FD 2E 04 00   mov32 cb, $4 ; enum element: STRING_CONST
7292   3250 00 00 
7293   3252 E7            pop d
7294   3253 FD 43         mov [d], b
7295   3255             ; *t = '\0'; 
7296   3255 FA FF FF      lea d, [bp + -1] ; $t
7297   3258 2A            mov b, [d]
7298   3259 38 00 00      mov c, 0
7299   325C D8            push b
7300   325D FD 2E 00 00   mov32 cb, $00000000
7300   3261 00 00 
7301   3263 E7            pop d
7302   3264 FD 3E         mov [d], bl
7303   3266             ; convert_constant(); // converts this string token with quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
7304   3266             ; --- START FUNCTION CALL
7305   3266 07 A8 36      call convert_constant
7306   3269 0A 14 36      jmp _if170_exit
7307   326C             _if170_else:
7308   326C             ; if(*prog == '['){ 
7309   326C             _if173_cond:
7310   326C 3B 7F 4E      mov d, _prog ; $prog
7311   326F 2A            mov b, [d]
7312   3270 38 00 00      mov c, 0
7313   3273 74            mov d, b
7314   3274 32            mov bl, [d]
7315   3275 A7 00         mov bh, 0
7316   3277 38 00 00      mov c, 0
7317   327A             ; --- START RELATIONAL
7318   327A D7            push a
7319   327B 11            mov a, b
7320   327C FD 2E 5B 00   mov32 cb, $0000005b
7320   3280 00 00 
7321   3282 B0            cmp a, b
7322   3283 FD 71         seq ; ==
7323   3285 E4            pop a
7324   3286             ; --- END RELATIONAL
7325   3286 C0 00 00      cmp b, 0
7326   3289 C6 D4 32      je _if173_else
7327   328C             _if173_TRUE:
7328   328C             ; *t++ = *prog++; 
7329   328C FA FF FF      lea d, [bp + -1] ; $t
7330   328F 2A            mov b, [d]
7331   3290 38 00 00      mov c, 0
7332   3293 FD 77         inc b
7333   3295 FA FF FF      lea d, [bp + -1] ; $t
7334   3298 FD 43         mov [d], b
7335   329A FD 7D         dec b
7336   329C D8            push b
7337   329D 3B 7F 4E      mov d, _prog ; $prog
7338   32A0 2A            mov b, [d]
7339   32A1 38 00 00      mov c, 0
7340   32A4 FD 77         inc b
7341   32A6 3B 7F 4E      mov d, _prog ; $prog
7342   32A9 FD 43         mov [d], b
7343   32AB FD 7D         dec b
7344   32AD 74            mov d, b
7345   32AE 32            mov bl, [d]
7346   32AF A7 00         mov bh, 0
7347   32B1 38 00 00      mov c, 0
7348   32B4 E7            pop d
7349   32B5 FD 3E         mov [d], bl
7350   32B7             ; tok = OPENING_BRACKET; 
7351   32B7 3B 7B 4E      mov d, _tok ; $tok
7352   32BA DA            push d
7353   32BB FD 2E 0B 00   mov32 cb, $b ; enum element: OPENING_BRACKET
7353   32BF 00 00 
7354   32C1 E7            pop d
7355   32C2 FD 43         mov [d], b
7356   32C4             ; toktype = DELIMITER;   
7357   32C4 3B 7D 4E      mov d, _toktype ; $toktype
7358   32C7 DA            push d
7359   32C8 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7359   32CC 00 00 
7360   32CE E7            pop d
7361   32CF FD 43         mov [d], b
7362   32D1 0A 14 36      jmp _if173_exit
7363   32D4             _if173_else:
7364   32D4             ; if(*prog == ']'){ 
7365   32D4             _if174_cond:
7366   32D4 3B 7F 4E      mov d, _prog ; $prog
7367   32D7 2A            mov b, [d]
7368   32D8 38 00 00      mov c, 0
7369   32DB 74            mov d, b
7370   32DC 32            mov bl, [d]
7371   32DD A7 00         mov bh, 0
7372   32DF 38 00 00      mov c, 0
7373   32E2             ; --- START RELATIONAL
7374   32E2 D7            push a
7375   32E3 11            mov a, b
7376   32E4 FD 2E 5D 00   mov32 cb, $0000005d
7376   32E8 00 00 
7377   32EA B0            cmp a, b
7378   32EB FD 71         seq ; ==
7379   32ED E4            pop a
7380   32EE             ; --- END RELATIONAL
7381   32EE C0 00 00      cmp b, 0
7382   32F1 C6 3C 33      je _if174_else
7383   32F4             _if174_TRUE:
7384   32F4             ; *t++ = *prog++; 
7385   32F4 FA FF FF      lea d, [bp + -1] ; $t
7386   32F7 2A            mov b, [d]
7387   32F8 38 00 00      mov c, 0
7388   32FB FD 77         inc b
7389   32FD FA FF FF      lea d, [bp + -1] ; $t
7390   3300 FD 43         mov [d], b
7391   3302 FD 7D         dec b
7392   3304 D8            push b
7393   3305 3B 7F 4E      mov d, _prog ; $prog
7394   3308 2A            mov b, [d]
7395   3309 38 00 00      mov c, 0
7396   330C FD 77         inc b
7397   330E 3B 7F 4E      mov d, _prog ; $prog
7398   3311 FD 43         mov [d], b
7399   3313 FD 7D         dec b
7400   3315 74            mov d, b
7401   3316 32            mov bl, [d]
7402   3317 A7 00         mov bh, 0
7403   3319 38 00 00      mov c, 0
7404   331C E7            pop d
7405   331D FD 3E         mov [d], bl
7406   331F             ; tok = CLOSING_BRACKET; 
7407   331F 3B 7B 4E      mov d, _tok ; $tok
7408   3322 DA            push d
7409   3323 FD 2E 0C 00   mov32 cb, $c ; enum element: CLOSING_BRACKET
7409   3327 00 00 
7410   3329 E7            pop d
7411   332A FD 43         mov [d], b
7412   332C             ; toktype = DELIMITER;   
7413   332C 3B 7D 4E      mov d, _toktype ; $toktype
7414   332F DA            push d
7415   3330 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7415   3334 00 00 
7416   3336 E7            pop d
7417   3337 FD 43         mov [d], b
7418   3339 0A 14 36      jmp _if174_exit
7419   333C             _if174_else:
7420   333C             ; if(*prog == '+'){ 
7421   333C             _if175_cond:
7422   333C 3B 7F 4E      mov d, _prog ; $prog
7423   333F 2A            mov b, [d]
7424   3340 38 00 00      mov c, 0
7425   3343 74            mov d, b
7426   3344 32            mov bl, [d]
7427   3345 A7 00         mov bh, 0
7428   3347 38 00 00      mov c, 0
7429   334A             ; --- START RELATIONAL
7430   334A D7            push a
7431   334B 11            mov a, b
7432   334C FD 2E 2B 00   mov32 cb, $0000002b
7432   3350 00 00 
7433   3352 B0            cmp a, b
7434   3353 FD 71         seq ; ==
7435   3355 E4            pop a
7436   3356             ; --- END RELATIONAL
7437   3356 C0 00 00      cmp b, 0
7438   3359 C6 A4 33      je _if175_else
7439   335C             _if175_TRUE:
7440   335C             ; *t++ = *prog++; 
7441   335C FA FF FF      lea d, [bp + -1] ; $t
7442   335F 2A            mov b, [d]
7443   3360 38 00 00      mov c, 0
7444   3363 FD 77         inc b
7445   3365 FA FF FF      lea d, [bp + -1] ; $t
7446   3368 FD 43         mov [d], b
7447   336A FD 7D         dec b
7448   336C D8            push b
7449   336D 3B 7F 4E      mov d, _prog ; $prog
7450   3370 2A            mov b, [d]
7451   3371 38 00 00      mov c, 0
7452   3374 FD 77         inc b
7453   3376 3B 7F 4E      mov d, _prog ; $prog
7454   3379 FD 43         mov [d], b
7455   337B FD 7D         dec b
7456   337D 74            mov d, b
7457   337E 32            mov bl, [d]
7458   337F A7 00         mov bh, 0
7459   3381 38 00 00      mov c, 0
7460   3384 E7            pop d
7461   3385 FD 3E         mov [d], bl
7462   3387             ; tok = PLUS; 
7463   3387 3B 7B 4E      mov d, _tok ; $tok
7464   338A DA            push d
7465   338B FD 2E 08 00   mov32 cb, $8 ; enum element: PLUS
7465   338F 00 00 
7466   3391 E7            pop d
7467   3392 FD 43         mov [d], b
7468   3394             ; toktype = DELIMITER;   
7469   3394 3B 7D 4E      mov d, _toktype ; $toktype
7470   3397 DA            push d
7471   3398 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7471   339C 00 00 
7472   339E E7            pop d
7473   339F FD 43         mov [d], b
7474   33A1 0A 14 36      jmp _if175_exit
7475   33A4             _if175_else:
7476   33A4             ; if(*prog == '-'){ 
7477   33A4             _if176_cond:
7478   33A4 3B 7F 4E      mov d, _prog ; $prog
7479   33A7 2A            mov b, [d]
7480   33A8 38 00 00      mov c, 0
7481   33AB 74            mov d, b
7482   33AC 32            mov bl, [d]
7483   33AD A7 00         mov bh, 0
7484   33AF 38 00 00      mov c, 0
7485   33B2             ; --- START RELATIONAL
7486   33B2 D7            push a
7487   33B3 11            mov a, b
7488   33B4 FD 2E 2D 00   mov32 cb, $0000002d
7488   33B8 00 00 
7489   33BA B0            cmp a, b
7490   33BB FD 71         seq ; ==
7491   33BD E4            pop a
7492   33BE             ; --- END RELATIONAL
7493   33BE C0 00 00      cmp b, 0
7494   33C1 C6 0C 34      je _if176_else
7495   33C4             _if176_TRUE:
7496   33C4             ; *t++ = *prog++; 
7497   33C4 FA FF FF      lea d, [bp + -1] ; $t
7498   33C7 2A            mov b, [d]
7499   33C8 38 00 00      mov c, 0
7500   33CB FD 77         inc b
7501   33CD FA FF FF      lea d, [bp + -1] ; $t
7502   33D0 FD 43         mov [d], b
7503   33D2 FD 7D         dec b
7504   33D4 D8            push b
7505   33D5 3B 7F 4E      mov d, _prog ; $prog
7506   33D8 2A            mov b, [d]
7507   33D9 38 00 00      mov c, 0
7508   33DC FD 77         inc b
7509   33DE 3B 7F 4E      mov d, _prog ; $prog
7510   33E1 FD 43         mov [d], b
7511   33E3 FD 7D         dec b
7512   33E5 74            mov d, b
7513   33E6 32            mov bl, [d]
7514   33E7 A7 00         mov bh, 0
7515   33E9 38 00 00      mov c, 0
7516   33EC E7            pop d
7517   33ED FD 3E         mov [d], bl
7518   33EF             ; tok = MINUS; 
7519   33EF 3B 7B 4E      mov d, _tok ; $tok
7520   33F2 DA            push d
7521   33F3 FD 2E 09 00   mov32 cb, $9 ; enum element: MINUS
7521   33F7 00 00 
7522   33F9 E7            pop d
7523   33FA FD 43         mov [d], b
7524   33FC             ; toktype = DELIMITER;   
7525   33FC 3B 7D 4E      mov d, _toktype ; $toktype
7526   33FF DA            push d
7527   3400 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7527   3404 00 00 
7528   3406 E7            pop d
7529   3407 FD 43         mov [d], b
7530   3409 0A 14 36      jmp _if176_exit
7531   340C             _if176_else:
7532   340C             ; if(*prog == '$'){ 
7533   340C             _if177_cond:
7534   340C 3B 7F 4E      mov d, _prog ; $prog
7535   340F 2A            mov b, [d]
7536   3410 38 00 00      mov c, 0
7537   3413 74            mov d, b
7538   3414 32            mov bl, [d]
7539   3415 A7 00         mov bh, 0
7540   3417 38 00 00      mov c, 0
7541   341A             ; --- START RELATIONAL
7542   341A D7            push a
7543   341B 11            mov a, b
7544   341C FD 2E 24 00   mov32 cb, $00000024
7544   3420 00 00 
7545   3422 B0            cmp a, b
7546   3423 FD 71         seq ; ==
7547   3425 E4            pop a
7548   3426             ; --- END RELATIONAL
7549   3426 C0 00 00      cmp b, 0
7550   3429 C6 74 34      je _if177_else
7551   342C             _if177_TRUE:
7552   342C             ; *t++ = *prog++; 
7553   342C FA FF FF      lea d, [bp + -1] ; $t
7554   342F 2A            mov b, [d]
7555   3430 38 00 00      mov c, 0
7556   3433 FD 77         inc b
7557   3435 FA FF FF      lea d, [bp + -1] ; $t
7558   3438 FD 43         mov [d], b
7559   343A FD 7D         dec b
7560   343C D8            push b
7561   343D 3B 7F 4E      mov d, _prog ; $prog
7562   3440 2A            mov b, [d]
7563   3441 38 00 00      mov c, 0
7564   3444 FD 77         inc b
7565   3446 3B 7F 4E      mov d, _prog ; $prog
7566   3449 FD 43         mov [d], b
7567   344B FD 7D         dec b
7568   344D 74            mov d, b
7569   344E 32            mov bl, [d]
7570   344F A7 00         mov bh, 0
7571   3451 38 00 00      mov c, 0
7572   3454 E7            pop d
7573   3455 FD 3E         mov [d], bl
7574   3457             ; tok = DOLLAR; 
7575   3457 3B 7B 4E      mov d, _tok ; $tok
7576   345A DA            push d
7577   345B FD 2E 0A 00   mov32 cb, $a ; enum element: DOLLAR
7577   345F 00 00 
7578   3461 E7            pop d
7579   3462 FD 43         mov [d], b
7580   3464             ; toktype = DELIMITER;   
7581   3464 3B 7D 4E      mov d, _toktype ; $toktype
7582   3467 DA            push d
7583   3468 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7583   346C 00 00 
7584   346E E7            pop d
7585   346F FD 43         mov [d], b
7586   3471 0A 14 36      jmp _if177_exit
7587   3474             _if177_else:
7588   3474             ; if(*prog == ':'){ 
7589   3474             _if178_cond:
7590   3474 3B 7F 4E      mov d, _prog ; $prog
7591   3477 2A            mov b, [d]
7592   3478 38 00 00      mov c, 0
7593   347B 74            mov d, b
7594   347C 32            mov bl, [d]
7595   347D A7 00         mov bh, 0
7596   347F 38 00 00      mov c, 0
7597   3482             ; --- START RELATIONAL
7598   3482 D7            push a
7599   3483 11            mov a, b
7600   3484 FD 2E 3A 00   mov32 cb, $0000003a
7600   3488 00 00 
7601   348A B0            cmp a, b
7602   348B FD 71         seq ; ==
7603   348D E4            pop a
7604   348E             ; --- END RELATIONAL
7605   348E C0 00 00      cmp b, 0
7606   3491 C6 DC 34      je _if178_else
7607   3494             _if178_TRUE:
7608   3494             ; *t++ = *prog++; 
7609   3494 FA FF FF      lea d, [bp + -1] ; $t
7610   3497 2A            mov b, [d]
7611   3498 38 00 00      mov c, 0
7612   349B FD 77         inc b
7613   349D FA FF FF      lea d, [bp + -1] ; $t
7614   34A0 FD 43         mov [d], b
7615   34A2 FD 7D         dec b
7616   34A4 D8            push b
7617   34A5 3B 7F 4E      mov d, _prog ; $prog
7618   34A8 2A            mov b, [d]
7619   34A9 38 00 00      mov c, 0
7620   34AC FD 77         inc b
7621   34AE 3B 7F 4E      mov d, _prog ; $prog
7622   34B1 FD 43         mov [d], b
7623   34B3 FD 7D         dec b
7624   34B5 74            mov d, b
7625   34B6 32            mov bl, [d]
7626   34B7 A7 00         mov bh, 0
7627   34B9 38 00 00      mov c, 0
7628   34BC E7            pop d
7629   34BD FD 3E         mov [d], bl
7630   34BF             ; tok = COLON; 
7631   34BF 3B 7B 4E      mov d, _tok ; $tok
7632   34C2 DA            push d
7633   34C3 FD 2E 0D 00   mov32 cb, $d ; enum element: COLON
7633   34C7 00 00 
7634   34C9 E7            pop d
7635   34CA FD 43         mov [d], b
7636   34CC             ; toktype = DELIMITER;   
7637   34CC 3B 7D 4E      mov d, _toktype ; $toktype
7638   34CF DA            push d
7639   34D0 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7639   34D4 00 00 
7640   34D6 E7            pop d
7641   34D7 FD 43         mov [d], b
7642   34D9 0A 14 36      jmp _if178_exit
7643   34DC             _if178_else:
7644   34DC             ; if(*prog == ';'){ 
7645   34DC             _if179_cond:
7646   34DC 3B 7F 4E      mov d, _prog ; $prog
7647   34DF 2A            mov b, [d]
7648   34E0 38 00 00      mov c, 0
7649   34E3 74            mov d, b
7650   34E4 32            mov bl, [d]
7651   34E5 A7 00         mov bh, 0
7652   34E7 38 00 00      mov c, 0
7653   34EA             ; --- START RELATIONAL
7654   34EA D7            push a
7655   34EB 11            mov a, b
7656   34EC FD 2E 3B 00   mov32 cb, $0000003b
7656   34F0 00 00 
7657   34F2 B0            cmp a, b
7658   34F3 FD 71         seq ; ==
7659   34F5 E4            pop a
7660   34F6             ; --- END RELATIONAL
7661   34F6 C0 00 00      cmp b, 0
7662   34F9 C6 44 35      je _if179_else
7663   34FC             _if179_TRUE:
7664   34FC             ; *t++ = *prog++; 
7665   34FC FA FF FF      lea d, [bp + -1] ; $t
7666   34FF 2A            mov b, [d]
7667   3500 38 00 00      mov c, 0
7668   3503 FD 77         inc b
7669   3505 FA FF FF      lea d, [bp + -1] ; $t
7670   3508 FD 43         mov [d], b
7671   350A FD 7D         dec b
7672   350C D8            push b
7673   350D 3B 7F 4E      mov d, _prog ; $prog
7674   3510 2A            mov b, [d]
7675   3511 38 00 00      mov c, 0
7676   3514 FD 77         inc b
7677   3516 3B 7F 4E      mov d, _prog ; $prog
7678   3519 FD 43         mov [d], b
7679   351B FD 7D         dec b
7680   351D 74            mov d, b
7681   351E 32            mov bl, [d]
7682   351F A7 00         mov bh, 0
7683   3521 38 00 00      mov c, 0
7684   3524 E7            pop d
7685   3525 FD 3E         mov [d], bl
7686   3527             ; tok = SEMICOLON; 
7687   3527 3B 7B 4E      mov d, _tok ; $tok
7688   352A DA            push d
7689   352B FD 2E 0E 00   mov32 cb, $e ; enum element: SEMICOLON
7689   352F 00 00 
7690   3531 E7            pop d
7691   3532 FD 43         mov [d], b
7692   3534             ; toktype = DELIMITER;   
7693   3534 3B 7D 4E      mov d, _toktype ; $toktype
7694   3537 DA            push d
7695   3538 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7695   353C 00 00 
7696   353E E7            pop d
7697   353F FD 43         mov [d], b
7698   3541 0A 14 36      jmp _if179_exit
7699   3544             _if179_else:
7700   3544             ; if(*prog == ','){ 
7701   3544             _if180_cond:
7702   3544 3B 7F 4E      mov d, _prog ; $prog
7703   3547 2A            mov b, [d]
7704   3548 38 00 00      mov c, 0
7705   354B 74            mov d, b
7706   354C 32            mov bl, [d]
7707   354D A7 00         mov bh, 0
7708   354F 38 00 00      mov c, 0
7709   3552             ; --- START RELATIONAL
7710   3552 D7            push a
7711   3553 11            mov a, b
7712   3554 FD 2E 2C 00   mov32 cb, $0000002c
7712   3558 00 00 
7713   355A B0            cmp a, b
7714   355B FD 71         seq ; ==
7715   355D E4            pop a
7716   355E             ; --- END RELATIONAL
7717   355E C0 00 00      cmp b, 0
7718   3561 C6 AC 35      je _if180_else
7719   3564             _if180_TRUE:
7720   3564             ; *t++ = *prog++; 
7721   3564 FA FF FF      lea d, [bp + -1] ; $t
7722   3567 2A            mov b, [d]
7723   3568 38 00 00      mov c, 0
7724   356B FD 77         inc b
7725   356D FA FF FF      lea d, [bp + -1] ; $t
7726   3570 FD 43         mov [d], b
7727   3572 FD 7D         dec b
7728   3574 D8            push b
7729   3575 3B 7F 4E      mov d, _prog ; $prog
7730   3578 2A            mov b, [d]
7731   3579 38 00 00      mov c, 0
7732   357C FD 77         inc b
7733   357E 3B 7F 4E      mov d, _prog ; $prog
7734   3581 FD 43         mov [d], b
7735   3583 FD 7D         dec b
7736   3585 74            mov d, b
7737   3586 32            mov bl, [d]
7738   3587 A7 00         mov bh, 0
7739   3589 38 00 00      mov c, 0
7740   358C E7            pop d
7741   358D FD 3E         mov [d], bl
7742   358F             ; tok = COMMA; 
7743   358F 3B 7B 4E      mov d, _tok ; $tok
7744   3592 DA            push d
7745   3593 FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
7745   3597 00 00 
7746   3599 E7            pop d
7747   359A FD 43         mov [d], b
7748   359C             ; toktype = DELIMITER;   
7749   359C 3B 7D 4E      mov d, _toktype ; $toktype
7750   359F DA            push d
7751   35A0 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7751   35A4 00 00 
7752   35A6 E7            pop d
7753   35A7 FD 43         mov [d], b
7754   35A9 0A 14 36      jmp _if180_exit
7755   35AC             _if180_else:
7756   35AC             ; if(*prog == '.'){ 
7757   35AC             _if181_cond:
7758   35AC 3B 7F 4E      mov d, _prog ; $prog
7759   35AF 2A            mov b, [d]
7760   35B0 38 00 00      mov c, 0
7761   35B3 74            mov d, b
7762   35B4 32            mov bl, [d]
7763   35B5 A7 00         mov bh, 0
7764   35B7 38 00 00      mov c, 0
7765   35BA             ; --- START RELATIONAL
7766   35BA D7            push a
7767   35BB 11            mov a, b
7768   35BC FD 2E 2E 00   mov32 cb, $0000002e
7768   35C0 00 00 
7769   35C2 B0            cmp a, b
7770   35C3 FD 71         seq ; ==
7771   35C5 E4            pop a
7772   35C6             ; --- END RELATIONAL
7773   35C6 C0 00 00      cmp b, 0
7774   35C9 C6 14 36      je _if181_exit
7775   35CC             _if181_TRUE:
7776   35CC             ; *t++ = *prog++; 
7777   35CC FA FF FF      lea d, [bp + -1] ; $t
7778   35CF 2A            mov b, [d]
7779   35D0 38 00 00      mov c, 0
7780   35D3 FD 77         inc b
7781   35D5 FA FF FF      lea d, [bp + -1] ; $t
7782   35D8 FD 43         mov [d], b
7783   35DA FD 7D         dec b
7784   35DC D8            push b
7785   35DD 3B 7F 4E      mov d, _prog ; $prog
7786   35E0 2A            mov b, [d]
7787   35E1 38 00 00      mov c, 0
7788   35E4 FD 77         inc b
7789   35E6 3B 7F 4E      mov d, _prog ; $prog
7790   35E9 FD 43         mov [d], b
7791   35EB FD 7D         dec b
7792   35ED 74            mov d, b
7793   35EE 32            mov bl, [d]
7794   35EF A7 00         mov bh, 0
7795   35F1 38 00 00      mov c, 0
7796   35F4 E7            pop d
7797   35F5 FD 3E         mov [d], bl
7798   35F7             ; tok = DOT; 
7799   35F7 3B 7B 4E      mov d, _tok ; $tok
7800   35FA DA            push d
7801   35FB FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
7801   35FF 00 00 
7802   3601 E7            pop d
7803   3602 FD 43         mov [d], b
7804   3604             ; toktype = DELIMITER;   
7805   3604 3B 7D 4E      mov d, _toktype ; $toktype
7806   3607 DA            push d
7807   3608 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7807   360C 00 00 
7808   360E E7            pop d
7809   360F FD 43         mov [d], b
7810   3611 0A 14 36      jmp _if181_exit
7811   3614             _if181_exit:
7812   3614             _if180_exit:
7813   3614             _if179_exit:
7814   3614             _if178_exit:
7815   3614             _if177_exit:
7816   3614             _if176_exit:
7817   3614             _if175_exit:
7818   3614             _if174_exit:
7819   3614             _if173_exit:
7820   3614             _if170_exit:
7821   3614             _if167_exit:
7822   3614             _if163_exit:
7823   3614             _if160_exit:
7824   3614             ; *t = '\0'; 
7825   3614 FA FF FF      lea d, [bp + -1] ; $t
7826   3617 2A            mov b, [d]
7827   3618 38 00 00      mov c, 0
7828   361B D8            push b
7829   361C FD 2E 00 00   mov32 cb, $00000000
7829   3620 00 00 
7830   3622 E7            pop d
7831   3623 FD 3E         mov [d], bl
7832   3625             ; if(toktype == TYPE_UNDEF){ 
7833   3625             _if182_cond:
7834   3625 3B 7D 4E      mov d, _toktype ; $toktype
7835   3628 2A            mov b, [d]
7836   3629 38 00 00      mov c, 0
7837   362C             ; --- START RELATIONAL
7838   362C D7            push a
7839   362D 11            mov a, b
7840   362E FD 2E 00 00   mov32 cb, $0 ; enum element: TYPE_UNDEF
7840   3632 00 00 
7841   3634 B0            cmp a, b
7842   3635 FD 71         seq ; ==
7843   3637 E4            pop a
7844   3638             ; --- END RELATIONAL
7845   3638 C0 00 00      cmp b, 0
7846   363B C6 A6 36      je _if182_exit
7847   363E             _if182_TRUE:
7848   363E             ; printf("TOKEN ERROR. Prog: %x\n", (int)(prog-program));  
7849   363E             ; --- START FUNCTION CALL
7850   363E 3B 7F 4E      mov d, _prog ; $prog
7851   3641 2A            mov b, [d]
7852   3642 38 00 00      mov c, 0
7853   3645             ; --- START TERMS
7854   3645 D7            push a
7855   3646 11            mov a, b
7856   3647 3B C3 4F      mov d, _program ; $program
7857   364A 2A            mov b, [d]
7858   364B 38 00 00      mov c, 0
7859   364E 60            sub a, b
7860   364F 27            mov b, a
7861   3650 E4            pop a
7862   3651             ; --- END TERMS
7863   3651 AB            snex b
7864   3652 FD AB         swp b
7865   3654 D8            push b
7866   3655 26 29 53      mov b, _s75 ; "TOKEN ERROR. Prog: %x\n"
7867   3658 FD AB         swp b
7868   365A D8            push b
7869   365B 07 99 42      call printf
7870   365E 51 04 00      add sp, 4
7871   3661             ; --- END FUNCTION CALL
7872   3661             ; printf("ProgVal: %x", *prog);  
7873   3661             ; --- START FUNCTION CALL
7874   3661 3B 7F 4E      mov d, _prog ; $prog
7875   3664 2A            mov b, [d]
7876   3665 38 00 00      mov c, 0
7877   3668 74            mov d, b
7878   3669 32            mov bl, [d]
7879   366A A7 00         mov bh, 0
7880   366C 38 00 00      mov c, 0
7881   366F FD AB         swp b
7882   3671 D8            push b
7883   3672 26 40 53      mov b, _s76 ; "ProgVal: %x"
7884   3675 FD AB         swp b
7885   3677 D8            push b
7886   3678 07 99 42      call printf
7887   367B 51 04 00      add sp, 4
7888   367E             ; --- END FUNCTION CALL
7889   367E             ; printf("\n Text after prog: %s\n", prog); 
7890   367E             ; --- START FUNCTION CALL
7891   367E 3B 7F 4E      mov d, _prog ; $prog
7892   3681 2A            mov b, [d]
7893   3682 38 00 00      mov c, 0
7894   3685 FD AB         swp b
7895   3687 D8            push b
7896   3688 26 4C 53      mov b, _s77 ; "\n Text after prog: %s\n"
7897   368B FD AB         swp b
7898   368D D8            push b
7899   368E 07 99 42      call printf
7900   3691 51 04 00      add sp, 4
7901   3694             ; --- END FUNCTION CALL
7902   3694             ; exit(1); 
7903   3694             ; --- START FUNCTION CALL
7904   3694 FD 2E 01 00   mov32 cb, $00000001
7904   3698 00 00 
7905   369A FD AB         swp b
7906   369C D8            push b
7907   369D 07 94 4B      call exit
7908   36A0 51 02 00      add sp, 2
7909   36A3             ; --- END FUNCTION CALL
7910   36A3 0A A6 36      jmp _if182_exit
7911   36A6             _if182_exit:
7912   36A6 F9            leave
7913   36A7 09            ret
7914   36A8             
7915   36A8             convert_constant:
7916   36A8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7917   36AB             ; char *s; 
7918   36AB 52 02 00      sub sp, 2
7919   36AE             ; char *t; 
7920   36AE 52 02 00      sub sp, 2
7921   36B1             ; t = token; 
7922   36B1 FA FD FF      lea d, [bp + -3] ; $t
7923   36B4 DA            push d
7924   36B5 3B 81 4E      mov d, _token_data ; $token
7925   36B8 2D            mov b, d
7926   36B9 38 00 00      mov c, 0
7927   36BC E7            pop d
7928   36BD FD 43         mov [d], b
7929   36BF             ; s = string_const; 
7930   36BF FA FF FF      lea d, [bp + -1] ; $s
7931   36C2 DA            push d
7932   36C3 3B C1 4E      mov d, _string_const_data ; $string_const
7933   36C6 2D            mov b, d
7934   36C7 38 00 00      mov c, 0
7935   36CA E7            pop d
7936   36CB FD 43         mov [d], b
7937   36CD             ; if(toktype == CHAR_CONST){ 
7938   36CD             _if183_cond:
7939   36CD 3B 7D 4E      mov d, _toktype ; $toktype
7940   36D0 2A            mov b, [d]
7941   36D1 38 00 00      mov c, 0
7942   36D4             ; --- START RELATIONAL
7943   36D4 D7            push a
7944   36D5 11            mov a, b
7945   36D6 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
7945   36DA 00 00 
7946   36DC B0            cmp a, b
7947   36DD FD 71         seq ; ==
7948   36DF E4            pop a
7949   36E0             ; --- END RELATIONAL
7950   36E0 C0 00 00      cmp b, 0
7951   36E3 C6 D2 38      je _if183_else
7952   36E6             _if183_TRUE:
7953   36E6             ; t++; 
7954   36E6 FA FD FF      lea d, [bp + -3] ; $t
7955   36E9 2A            mov b, [d]
7956   36EA 38 00 00      mov c, 0
7957   36ED FD 77         inc b
7958   36EF FA FD FF      lea d, [bp + -3] ; $t
7959   36F2 FD 43         mov [d], b
7960   36F4 FD 7D         dec b
7961   36F6             ; if(*t == '\\'){ 
7962   36F6             _if184_cond:
7963   36F6 FA FD FF      lea d, [bp + -3] ; $t
7964   36F9 2A            mov b, [d]
7965   36FA 38 00 00      mov c, 0
7966   36FD 74            mov d, b
7967   36FE 32            mov bl, [d]
7968   36FF A7 00         mov bh, 0
7969   3701 38 00 00      mov c, 0
7970   3704             ; --- START RELATIONAL
7971   3704 D7            push a
7972   3705 11            mov a, b
7973   3706 FD 2E 5C 00   mov32 cb, $0000005c
7973   370A 00 00 
7974   370C B0            cmp a, b
7975   370D FD 71         seq ; ==
7976   370F E4            pop a
7977   3710             ; --- END RELATIONAL
7978   3710 C0 00 00      cmp b, 0
7979   3713 C6 AD 38      je _if184_else
7980   3716             _if184_TRUE:
7981   3716             ; t++; 
7982   3716 FA FD FF      lea d, [bp + -3] ; $t
7983   3719 2A            mov b, [d]
7984   371A 38 00 00      mov c, 0
7985   371D FD 77         inc b
7986   371F FA FD FF      lea d, [bp + -3] ; $t
7987   3722 FD 43         mov [d], b
7988   3724 FD 7D         dec b
7989   3726             ; switch(*t){ 
7990   3726             _switch185_expr:
7991   3726 FA FD FF      lea d, [bp + -3] ; $t
7992   3729 2A            mov b, [d]
7993   372A 38 00 00      mov c, 0
7994   372D 74            mov d, b
7995   372E 32            mov bl, [d]
7996   372F A7 00         mov bh, 0
7997   3731 38 00 00      mov c, 0
7998   3734             _switch185_comparisons:
7999   3734 C1 30         cmp bl, $30
8000   3736 C6 6E 37      je _switch185_case0
8001   3739 C1 61         cmp bl, $61
8002   373B C6 8B 37      je _switch185_case1
8003   373E C1 62         cmp bl, $62
8004   3740 C6 A8 37      je _switch185_case2
8005   3743 C1 66         cmp bl, $66
8006   3745 C6 C5 37      je _switch185_case3
8007   3748 C1 6E         cmp bl, $6e
8008   374A C6 E2 37      je _switch185_case4
8009   374D C1 72         cmp bl, $72
8010   374F C6 FF 37      je _switch185_case5
8011   3752 C1 74         cmp bl, $74
8012   3754 C6 1C 38      je _switch185_case6
8013   3757 C1 76         cmp bl, $76
8014   3759 C6 39 38      je _switch185_case7
8015   375C C1 5C         cmp bl, $5c
8016   375E C6 56 38      je _switch185_case8
8017   3761 C1 27         cmp bl, $27
8018   3763 C6 73 38      je _switch185_case9
8019   3766 C1 22         cmp bl, $22
8020   3768 C6 90 38      je _switch185_case10
8021   376B 0A AA 38      jmp _switch185_exit
8022   376E             _switch185_case0:
8023   376E             ; *s++ = '\0'; 
8024   376E FA FF FF      lea d, [bp + -1] ; $s
8025   3771 2A            mov b, [d]
8026   3772 38 00 00      mov c, 0
8027   3775 FD 77         inc b
8028   3777 FA FF FF      lea d, [bp + -1] ; $s
8029   377A FD 43         mov [d], b
8030   377C FD 7D         dec b
8031   377E D8            push b
8032   377F FD 2E 00 00   mov32 cb, $00000000
8032   3783 00 00 
8033   3785 E7            pop d
8034   3786 FD 3E         mov [d], bl
8035   3788             ; break; 
8036   3788 0A AA 38      jmp _switch185_exit ; case break
8037   378B             _switch185_case1:
8038   378B             ; *s++ = '\a'; 
8039   378B FA FF FF      lea d, [bp + -1] ; $s
8040   378E 2A            mov b, [d]
8041   378F 38 00 00      mov c, 0
8042   3792 FD 77         inc b
8043   3794 FA FF FF      lea d, [bp + -1] ; $s
8044   3797 FD 43         mov [d], b
8045   3799 FD 7D         dec b
8046   379B D8            push b
8047   379C FD 2E 07 00   mov32 cb, $00000007
8047   37A0 00 00 
8048   37A2 E7            pop d
8049   37A3 FD 3E         mov [d], bl
8050   37A5             ; break; 
8051   37A5 0A AA 38      jmp _switch185_exit ; case break
8052   37A8             _switch185_case2:
8053   37A8             ; *s++ = '\b'; 
8054   37A8 FA FF FF      lea d, [bp + -1] ; $s
8055   37AB 2A            mov b, [d]
8056   37AC 38 00 00      mov c, 0
8057   37AF FD 77         inc b
8058   37B1 FA FF FF      lea d, [bp + -1] ; $s
8059   37B4 FD 43         mov [d], b
8060   37B6 FD 7D         dec b
8061   37B8 D8            push b
8062   37B9 FD 2E 08 00   mov32 cb, $00000008
8062   37BD 00 00 
8063   37BF E7            pop d
8064   37C0 FD 3E         mov [d], bl
8065   37C2             ; break;   
8066   37C2 0A AA 38      jmp _switch185_exit ; case break
8067   37C5             _switch185_case3:
8068   37C5             ; *s++ = '\f'; 
8069   37C5 FA FF FF      lea d, [bp + -1] ; $s
8070   37C8 2A            mov b, [d]
8071   37C9 38 00 00      mov c, 0
8072   37CC FD 77         inc b
8073   37CE FA FF FF      lea d, [bp + -1] ; $s
8074   37D1 FD 43         mov [d], b
8075   37D3 FD 7D         dec b
8076   37D5 D8            push b
8077   37D6 FD 2E 0C 00   mov32 cb, $0000000c
8077   37DA 00 00 
8078   37DC E7            pop d
8079   37DD FD 3E         mov [d], bl
8080   37DF             ; break; 
8081   37DF 0A AA 38      jmp _switch185_exit ; case break
8082   37E2             _switch185_case4:
8083   37E2             ; *s++ = '\n'; 
8084   37E2 FA FF FF      lea d, [bp + -1] ; $s
8085   37E5 2A            mov b, [d]
8086   37E6 38 00 00      mov c, 0
8087   37E9 FD 77         inc b
8088   37EB FA FF FF      lea d, [bp + -1] ; $s
8089   37EE FD 43         mov [d], b
8090   37F0 FD 7D         dec b
8091   37F2 D8            push b
8092   37F3 FD 2E 0A 00   mov32 cb, $0000000a
8092   37F7 00 00 
8093   37F9 E7            pop d
8094   37FA FD 3E         mov [d], bl
8095   37FC             ; break; 
8096   37FC 0A AA 38      jmp _switch185_exit ; case break
8097   37FF             _switch185_case5:
8098   37FF             ; *s++ = '\r'; 
8099   37FF FA FF FF      lea d, [bp + -1] ; $s
8100   3802 2A            mov b, [d]
8101   3803 38 00 00      mov c, 0
8102   3806 FD 77         inc b
8103   3808 FA FF FF      lea d, [bp + -1] ; $s
8104   380B FD 43         mov [d], b
8105   380D FD 7D         dec b
8106   380F D8            push b
8107   3810 FD 2E 0D 00   mov32 cb, $0000000d
8107   3814 00 00 
8108   3816 E7            pop d
8109   3817 FD 3E         mov [d], bl
8110   3819             ; break; 
8111   3819 0A AA 38      jmp _switch185_exit ; case break
8112   381C             _switch185_case6:
8113   381C             ; *s++ = '\t'; 
8114   381C FA FF FF      lea d, [bp + -1] ; $s
8115   381F 2A            mov b, [d]
8116   3820 38 00 00      mov c, 0
8117   3823 FD 77         inc b
8118   3825 FA FF FF      lea d, [bp + -1] ; $s
8119   3828 FD 43         mov [d], b
8120   382A FD 7D         dec b
8121   382C D8            push b
8122   382D FD 2E 09 00   mov32 cb, $00000009
8122   3831 00 00 
8123   3833 E7            pop d
8124   3834 FD 3E         mov [d], bl
8125   3836             ; break; 
8126   3836 0A AA 38      jmp _switch185_exit ; case break
8127   3839             _switch185_case7:
8128   3839             ; *s++ = '\v'; 
8129   3839 FA FF FF      lea d, [bp + -1] ; $s
8130   383C 2A            mov b, [d]
8131   383D 38 00 00      mov c, 0
8132   3840 FD 77         inc b
8133   3842 FA FF FF      lea d, [bp + -1] ; $s
8134   3845 FD 43         mov [d], b
8135   3847 FD 7D         dec b
8136   3849 D8            push b
8137   384A FD 2E 0B 00   mov32 cb, $0000000b
8137   384E 00 00 
8138   3850 E7            pop d
8139   3851 FD 3E         mov [d], bl
8140   3853             ; break; 
8141   3853 0A AA 38      jmp _switch185_exit ; case break
8142   3856             _switch185_case8:
8143   3856             ; *s++ = '\\'; 
8144   3856 FA FF FF      lea d, [bp + -1] ; $s
8145   3859 2A            mov b, [d]
8146   385A 38 00 00      mov c, 0
8147   385D FD 77         inc b
8148   385F FA FF FF      lea d, [bp + -1] ; $s
8149   3862 FD 43         mov [d], b
8150   3864 FD 7D         dec b
8151   3866 D8            push b
8152   3867 FD 2E 5C 00   mov32 cb, $0000005c
8152   386B 00 00 
8153   386D E7            pop d
8154   386E FD 3E         mov [d], bl
8155   3870             ; break; 
8156   3870 0A AA 38      jmp _switch185_exit ; case break
8157   3873             _switch185_case9:
8158   3873             ; *s++ = '\''; 
8159   3873 FA FF FF      lea d, [bp + -1] ; $s
8160   3876 2A            mov b, [d]
8161   3877 38 00 00      mov c, 0
8162   387A FD 77         inc b
8163   387C FA FF FF      lea d, [bp + -1] ; $s
8164   387F FD 43         mov [d], b
8165   3881 FD 7D         dec b
8166   3883 D8            push b
8167   3884 FD 2E 27 00   mov32 cb, $00000027
8167   3888 00 00 
8168   388A E7            pop d
8169   388B FD 3E         mov [d], bl
8170   388D             ; break; 
8171   388D 0A AA 38      jmp _switch185_exit ; case break
8172   3890             _switch185_case10:
8173   3890             ; *s++ = '\"'; 
8174   3890 FA FF FF      lea d, [bp + -1] ; $s
8175   3893 2A            mov b, [d]
8176   3894 38 00 00      mov c, 0
8177   3897 FD 77         inc b
8178   3899 FA FF FF      lea d, [bp + -1] ; $s
8179   389C FD 43         mov [d], b
8180   389E FD 7D         dec b
8181   38A0 D8            push b
8182   38A1 FD 2E 22 00   mov32 cb, $00000022
8182   38A5 00 00 
8183   38A7 E7            pop d
8184   38A8 FD 3E         mov [d], bl
8185   38AA             _switch185_exit:
8186   38AA 0A CF 38      jmp _if184_exit
8187   38AD             _if184_else:
8188   38AD             ; *s++ = *t; 
8189   38AD FA FF FF      lea d, [bp + -1] ; $s
8190   38B0 2A            mov b, [d]
8191   38B1 38 00 00      mov c, 0
8192   38B4 FD 77         inc b
8193   38B6 FA FF FF      lea d, [bp + -1] ; $s
8194   38B9 FD 43         mov [d], b
8195   38BB FD 7D         dec b
8196   38BD D8            push b
8197   38BE FA FD FF      lea d, [bp + -3] ; $t
8198   38C1 2A            mov b, [d]
8199   38C2 38 00 00      mov c, 0
8200   38C5 74            mov d, b
8201   38C6 32            mov bl, [d]
8202   38C7 A7 00         mov bh, 0
8203   38C9 38 00 00      mov c, 0
8204   38CC E7            pop d
8205   38CD FD 3E         mov [d], bl
8206   38CF             _if184_exit:
8207   38CF 0A 5F 39      jmp _if183_exit
8208   38D2             _if183_else:
8209   38D2             ; if(toktype == STRING_CONST){ 
8210   38D2             _if186_cond:
8211   38D2 3B 7D 4E      mov d, _toktype ; $toktype
8212   38D5 2A            mov b, [d]
8213   38D6 38 00 00      mov c, 0
8214   38D9             ; --- START RELATIONAL
8215   38D9 D7            push a
8216   38DA 11            mov a, b
8217   38DB FD 2E 04 00   mov32 cb, $4 ; enum element: STRING_CONST
8217   38DF 00 00 
8218   38E1 B0            cmp a, b
8219   38E2 FD 71         seq ; ==
8220   38E4 E4            pop a
8221   38E5             ; --- END RELATIONAL
8222   38E5 C0 00 00      cmp b, 0
8223   38E8 C6 5F 39      je _if186_exit
8224   38EB             _if186_TRUE:
8225   38EB             ; t++; 
8226   38EB FA FD FF      lea d, [bp + -3] ; $t
8227   38EE 2A            mov b, [d]
8228   38EF 38 00 00      mov c, 0
8229   38F2 FD 77         inc b
8230   38F4 FA FD FF      lea d, [bp + -3] ; $t
8231   38F7 FD 43         mov [d], b
8232   38F9 FD 7D         dec b
8233   38FB             ; while(*t != '\"' && *t){ 
8234   38FB             _while187_cond:
8235   38FB FA FD FF      lea d, [bp + -3] ; $t
8236   38FE 2A            mov b, [d]
8237   38FF 38 00 00      mov c, 0
8238   3902 74            mov d, b
8239   3903 32            mov bl, [d]
8240   3904 A7 00         mov bh, 0
8241   3906 38 00 00      mov c, 0
8242   3909             ; --- START RELATIONAL
8243   3909 D7            push a
8244   390A 11            mov a, b
8245   390B FD 2E 22 00   mov32 cb, $00000022
8245   390F 00 00 
8246   3911 B0            cmp a, b
8247   3912 FD 72         sneq ; !=
8248   3914 E4            pop a
8249   3915             ; --- END RELATIONAL
8250   3915             ; --- START LOGICAL AND
8251   3915 D7            push a
8252   3916 11            mov a, b
8253   3917 FA FD FF      lea d, [bp + -3] ; $t
8254   391A 2A            mov b, [d]
8255   391B 38 00 00      mov c, 0
8256   391E 74            mov d, b
8257   391F 32            mov bl, [d]
8258   3920 A7 00         mov bh, 0
8259   3922 38 00 00      mov c, 0
8260   3925 FD A7         sand a, b
8261   3927 E4            pop a
8262   3928             ; --- END LOGICAL AND
8263   3928 C0 00 00      cmp b, 0
8264   392B C6 5C 39      je _while187_exit
8265   392E             _while187_block:
8266   392E             ; *s++ = *t++; 
8267   392E FA FF FF      lea d, [bp + -1] ; $s
8268   3931 2A            mov b, [d]
8269   3932 38 00 00      mov c, 0
8270   3935 FD 77         inc b
8271   3937 FA FF FF      lea d, [bp + -1] ; $s
8272   393A FD 43         mov [d], b
8273   393C FD 7D         dec b
8274   393E D8            push b
8275   393F FA FD FF      lea d, [bp + -3] ; $t
8276   3942 2A            mov b, [d]
8277   3943 38 00 00      mov c, 0
8278   3946 FD 77         inc b
8279   3948 FA FD FF      lea d, [bp + -3] ; $t
8280   394B FD 43         mov [d], b
8281   394D FD 7D         dec b
8282   394F 74            mov d, b
8283   3950 32            mov bl, [d]
8284   3951 A7 00         mov bh, 0
8285   3953 38 00 00      mov c, 0
8286   3956 E7            pop d
8287   3957 FD 3E         mov [d], bl
8288   3959 0A FB 38      jmp _while187_cond
8289   395C             _while187_exit:
8290   395C 0A 5F 39      jmp _if186_exit
8291   395F             _if186_exit:
8292   395F             _if183_exit:
8293   395F             ; *s = '\0'; 
8294   395F FA FF FF      lea d, [bp + -1] ; $s
8295   3962 2A            mov b, [d]
8296   3963 38 00 00      mov c, 0
8297   3966 D8            push b
8298   3967 FD 2E 00 00   mov32 cb, $00000000
8298   396B 00 00 
8299   396D E7            pop d
8300   396E FD 3E         mov [d], bl
8301   3970 F9            leave
8302   3971 09            ret
8303   3972             
8304   3972             error:
8305   3972 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8306   3975             ; printf("\nError: %s\n", msg); 
8307   3975             ; --- START FUNCTION CALL
8308   3975 FA 05 00      lea d, [bp + 5] ; $msg
8309   3978 2A            mov b, [d]
8310   3979 38 00 00      mov c, 0
8311   397C FD AB         swp b
8312   397E D8            push b
8313   397F 26 63 53      mov b, _s78 ; "\nError: %s\n"
8314   3982 FD AB         swp b
8315   3984 D8            push b
8316   3985 07 99 42      call printf
8317   3988 51 04 00      add sp, 4
8318   398B             ; --- END FUNCTION CALL
8319   398B             ; exit(1); 
8320   398B             ; --- START FUNCTION CALL
8321   398B FD 2E 01 00   mov32 cb, $00000001
8321   398F 00 00 
8322   3991 FD AB         swp b
8323   3993 D8            push b
8324   3994 07 94 4B      call exit
8325   3997 51 02 00      add sp, 2
8326   399A             ; --- END FUNCTION CALL
8327   399A F9            leave
8328   399B 09            ret
8329   399C             
8330   399C             error_s:
8331   399C F8 00 00      enter 0 ; (push bp; mov bp, sp)
8332   399F             ; printf("\nError: %s %s\n", msg, param); 
8333   399F             ; --- START FUNCTION CALL
8334   399F FA 07 00      lea d, [bp + 7] ; $param
8335   39A2 2A            mov b, [d]
8336   39A3 38 00 00      mov c, 0
8337   39A6 FD AB         swp b
8338   39A8 D8            push b
8339   39A9 FA 05 00      lea d, [bp + 5] ; $msg
8340   39AC 2A            mov b, [d]
8341   39AD 38 00 00      mov c, 0
8342   39B0 FD AB         swp b
8343   39B2 D8            push b
8344   39B3 26 6F 53      mov b, _s79 ; "\nError: %s %s\n"
8345   39B6 FD AB         swp b
8346   39B8 D8            push b
8347   39B9 07 99 42      call printf
8348   39BC 51 06 00      add sp, 6
8349   39BF             ; --- END FUNCTION CALL
8350   39BF             ; exit(1); 
8351   39BF             ; --- START FUNCTION CALL
8352   39BF FD 2E 01 00   mov32 cb, $00000001
8352   39C3 00 00 
8353   39C5 FD AB         swp b
8354   39C7 D8            push b
8355   39C8 07 94 4B      call exit
8356   39CB 51 02 00      add sp, 2
8357   39CE             ; --- END FUNCTION CALL
8358   39CE F9            leave
8359   39CF 09            ret
8360   39D0             
8361   39D0             push_prog:
8362   39D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8363   39D3             ; if(prog_tos == 10) error("Cannot push prog. Stack overflow."); 
8364   39D3             _if188_cond:
8365   39D3 3B DF 4F      mov d, _prog_tos ; $prog_tos
8366   39D6 2A            mov b, [d]
8367   39D7 38 00 00      mov c, 0
8368   39DA             ; --- START RELATIONAL
8369   39DA D7            push a
8370   39DB 11            mov a, b
8371   39DC FD 2E 0A 00   mov32 cb, $0000000a
8371   39E0 00 00 
8372   39E2 B0            cmp a, b
8373   39E3 FD 71         seq ; ==
8374   39E5 E4            pop a
8375   39E6             ; --- END RELATIONAL
8376   39E6 C0 00 00      cmp b, 0
8377   39E9 C6 FB 39      je _if188_exit
8378   39EC             _if188_TRUE:
8379   39EC             ; error("Cannot push prog. Stack overflow."); 
8380   39EC             ; --- START FUNCTION CALL
8381   39EC 26 7E 53      mov b, _s80 ; "Cannot push prog. Stack overflow."
8382   39EF FD AB         swp b
8383   39F1 D8            push b
8384   39F2 07 72 39      call error
8385   39F5 51 02 00      add sp, 2
8386   39F8             ; --- END FUNCTION CALL
8387   39F8 0A FB 39      jmp _if188_exit
8388   39FB             _if188_exit:
8389   39FB             ; prog_stack[prog_tos] = prog; 
8390   39FB 3B CB 4F      mov d, _prog_stack_data ; $prog_stack
8391   39FE D7            push a
8392   39FF DA            push d
8393   3A00 3B DF 4F      mov d, _prog_tos ; $prog_tos
8394   3A03 2A            mov b, [d]
8395   3A04 38 00 00      mov c, 0
8396   3A07 E7            pop d
8397   3A08 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8398   3A0C E4            pop a
8399   3A0D DA            push d
8400   3A0E 3B 7F 4E      mov d, _prog ; $prog
8401   3A11 2A            mov b, [d]
8402   3A12 38 00 00      mov c, 0
8403   3A15 E7            pop d
8404   3A16 FD 43         mov [d], b
8405   3A18             ; prog_tos++; 
8406   3A18 3B DF 4F      mov d, _prog_tos ; $prog_tos
8407   3A1B 2A            mov b, [d]
8408   3A1C 38 00 00      mov c, 0
8409   3A1F 11            mov a, b
8410   3A20 FD 77         inc b
8411   3A22 3B DF 4F      mov d, _prog_tos ; $prog_tos
8412   3A25 FD 43         mov [d], b
8413   3A27 27            mov b, a
8414   3A28 F9            leave
8415   3A29 09            ret
8416   3A2A             
8417   3A2A             pop_prog:
8418   3A2A F8 00 00      enter 0 ; (push bp; mov bp, sp)
8419   3A2D             ; if(prog_tos == 0) error("Cannot pop prog. Stack overflow."); 
8420   3A2D             _if189_cond:
8421   3A2D 3B DF 4F      mov d, _prog_tos ; $prog_tos
8422   3A30 2A            mov b, [d]
8423   3A31 38 00 00      mov c, 0
8424   3A34             ; --- START RELATIONAL
8425   3A34 D7            push a
8426   3A35 11            mov a, b
8427   3A36 FD 2E 00 00   mov32 cb, $00000000
8427   3A3A 00 00 
8428   3A3C B0            cmp a, b
8429   3A3D FD 71         seq ; ==
8430   3A3F E4            pop a
8431   3A40             ; --- END RELATIONAL
8432   3A40 C0 00 00      cmp b, 0
8433   3A43 C6 55 3A      je _if189_exit
8434   3A46             _if189_TRUE:
8435   3A46             ; error("Cannot pop prog. Stack overflow."); 
8436   3A46             ; --- START FUNCTION CALL
8437   3A46 26 A0 53      mov b, _s81 ; "Cannot pop prog. Stack overflow."
8438   3A49 FD AB         swp b
8439   3A4B D8            push b
8440   3A4C 07 72 39      call error
8441   3A4F 51 02 00      add sp, 2
8442   3A52             ; --- END FUNCTION CALL
8443   3A52 0A 55 3A      jmp _if189_exit
8444   3A55             _if189_exit:
8445   3A55             ; prog_tos--; 
8446   3A55 3B DF 4F      mov d, _prog_tos ; $prog_tos
8447   3A58 2A            mov b, [d]
8448   3A59 38 00 00      mov c, 0
8449   3A5C 11            mov a, b
8450   3A5D FD 7D         dec b
8451   3A5F 3B DF 4F      mov d, _prog_tos ; $prog_tos
8452   3A62 FD 43         mov [d], b
8453   3A64 27            mov b, a
8454   3A65             ; prog = prog_stack[prog_tos]; 
8455   3A65 3B 7F 4E      mov d, _prog ; $prog
8456   3A68 DA            push d
8457   3A69 3B CB 4F      mov d, _prog_stack_data ; $prog_stack
8458   3A6C D7            push a
8459   3A6D DA            push d
8460   3A6E 3B DF 4F      mov d, _prog_tos ; $prog_tos
8461   3A71 2A            mov b, [d]
8462   3A72 38 00 00      mov c, 0
8463   3A75 E7            pop d
8464   3A76 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8465   3A7A E4            pop a
8466   3A7B 2A            mov b, [d]
8467   3A7C 38 00 00      mov c, 0
8468   3A7F E7            pop d
8469   3A80 FD 43         mov [d], b
8470   3A82 F9            leave
8471   3A83 09            ret
8472   3A84             
8473   3A84             search_keyword:
8474   3A84 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8475   3A87             ; int i; 
8476   3A87 52 02 00      sub sp, 2
8477   3A8A             ; for(i = 0; keywords[i].keyword[0]; i++) 
8478   3A8A             _for190_init:
8479   3A8A FA FF FF      lea d, [bp + -1] ; $i
8480   3A8D DA            push d
8481   3A8E FD 2E 00 00   mov32 cb, $00000000
8481   3A92 00 00 
8482   3A94 E7            pop d
8483   3A95 FD 43         mov [d], b
8484   3A97             _for190_cond:
8485   3A97 3B 3E 4D      mov d, _keywords_data ; $keywords
8486   3A9A D7            push a
8487   3A9B DA            push d
8488   3A9C FA FF FF      lea d, [bp + -1] ; $i
8489   3A9F 2A            mov b, [d]
8490   3AA0 38 00 00      mov c, 0
8491   3AA3 E7            pop d
8492   3AA4 FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
8493   3AA8 E4            pop a
8494   3AA9 58 00 00      add d, 0
8495   3AAC D7            push a
8496   3AAD DA            push d
8497   3AAE FD 2E 00 00   mov32 cb, $00000000
8497   3AB2 00 00 
8498   3AB4 E7            pop d
8499   3AB5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
8500   3AB9 E4            pop a
8501   3ABA 32            mov bl, [d]
8502   3ABB A7 00         mov bh, 0
8503   3ABD 38 00 00      mov c, 0
8504   3AC0 C0 00 00      cmp b, 0
8505   3AC3 C6 2B 3B      je _for190_exit
8506   3AC6             _for190_block:
8507   3AC6             ; if (!strcmp(keywords[i].keyword, keyword)) return keywords[i].tok; 
8508   3AC6             _if191_cond:
8509   3AC6             ; --- START FUNCTION CALL
8510   3AC6 FA 05 00      lea d, [bp + 5] ; $keyword
8511   3AC9 2A            mov b, [d]
8512   3ACA 38 00 00      mov c, 0
8513   3ACD FD AB         swp b
8514   3ACF D8            push b
8515   3AD0 3B 3E 4D      mov d, _keywords_data ; $keywords
8516   3AD3 D7            push a
8517   3AD4 DA            push d
8518   3AD5 FA FF FF      lea d, [bp + -1] ; $i
8519   3AD8 2A            mov b, [d]
8520   3AD9 38 00 00      mov c, 0
8521   3ADC E7            pop d
8522   3ADD FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
8523   3AE1 E4            pop a
8524   3AE2 58 00 00      add d, 0
8525   3AE5 2A            mov b, [d]
8526   3AE6 38 00 00      mov c, 0
8527   3AE9 FD AB         swp b
8528   3AEB D8            push b
8529   3AEC 07 CB 3F      call strcmp
8530   3AEF 51 04 00      add sp, 4
8531   3AF2             ; --- END FUNCTION CALL
8532   3AF2 C0 00 00      cmp b, 0
8533   3AF5 C6 18 3B      je _if191_exit
8534   3AF8             _if191_TRUE:
8535   3AF8             ; return keywords[i].tok; 
8536   3AF8 3B 3E 4D      mov d, _keywords_data ; $keywords
8537   3AFB D7            push a
8538   3AFC DA            push d
8539   3AFD FA FF FF      lea d, [bp + -1] ; $i
8540   3B00 2A            mov b, [d]
8541   3B01 38 00 00      mov c, 0
8542   3B04 E7            pop d
8543   3B05 FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
8544   3B09 E4            pop a
8545   3B0A 58 02 00      add d, 2
8546   3B0D 32            mov bl, [d]
8547   3B0E A7 00         mov bh, 0
8548   3B10 38 00 00      mov c, 0
8549   3B13 F9            leave
8550   3B14 09            ret
8551   3B15 0A 18 3B      jmp _if191_exit
8552   3B18             _if191_exit:
8553   3B18             _for190_update:
8554   3B18 FA FF FF      lea d, [bp + -1] ; $i
8555   3B1B 2A            mov b, [d]
8556   3B1C 38 00 00      mov c, 0
8557   3B1F 11            mov a, b
8558   3B20 FD 77         inc b
8559   3B22 FA FF FF      lea d, [bp + -1] ; $i
8560   3B25 FD 43         mov [d], b
8561   3B27 27            mov b, a
8562   3B28 0A 97 3A      jmp _for190_cond
8563   3B2B             _for190_exit:
8564   3B2B             ; return -1; 
8565   3B2B FD 2E FF FF   mov32 cb, $ffffffff
8565   3B2F FF FF 
8566   3B31 F9            leave
8567   3B32 09            ret
8568   3B33             
8569   3B33             hex_to_int:
8570   3B33 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8571   3B36             ; int value = 0; 
8572   3B36 52 02 00      sub sp, 2
8573   3B39             ; --- START LOCAL VAR INITIALIZATION
8574   3B39 FA FF FF      lea d, [bp + -1] ; $value
8575   3B3C DA            push d
8576   3B3D FD 2E 00 00   mov32 cb, $00000000
8576   3B41 00 00 
8577   3B43 E7            pop d
8578   3B44 FD 43         mov [d], b
8579   3B46             ; --- END LOCAL VAR INITIALIZATION
8580   3B46             ; int i; 
8581   3B46 52 02 00      sub sp, 2
8582   3B49             ; char hex_char; 
8583   3B49 52 01 00      sub sp, 1
8584   3B4C             ; int len; 
8585   3B4C 52 02 00      sub sp, 2
8586   3B4F             ; len = strlen(hex_string); 
8587   3B4F FA FA FF      lea d, [bp + -6] ; $len
8588   3B52 DA            push d
8589   3B53             ; --- START FUNCTION CALL
8590   3B53 FA 05 00      lea d, [bp + 5] ; $hex_string
8591   3B56 2A            mov b, [d]
8592   3B57 38 00 00      mov c, 0
8593   3B5A FD AB         swp b
8594   3B5C D8            push b
8595   3B5D 07 4F 40      call strlen
8596   3B60 51 02 00      add sp, 2
8597   3B63             ; --- END FUNCTION CALL
8598   3B63 E7            pop d
8599   3B64 FD 43         mov [d], b
8600   3B66             ; for (i = 0; i < len; i++) { 
8601   3B66             _for192_init:
8602   3B66 FA FD FF      lea d, [bp + -3] ; $i
8603   3B69 DA            push d
8604   3B6A FD 2E 00 00   mov32 cb, $00000000
8604   3B6E 00 00 
8605   3B70 E7            pop d
8606   3B71 FD 43         mov [d], b
8607   3B73             _for192_cond:
8608   3B73 FA FD FF      lea d, [bp + -3] ; $i
8609   3B76 2A            mov b, [d]
8610   3B77 38 00 00      mov c, 0
8611   3B7A             ; --- START RELATIONAL
8612   3B7A D7            push a
8613   3B7B 11            mov a, b
8614   3B7C FA FA FF      lea d, [bp + -6] ; $len
8615   3B7F 2A            mov b, [d]
8616   3B80 38 00 00      mov c, 0
8617   3B83 B0            cmp a, b
8618   3B84 FD 73         slt ; < (signed)
8619   3B86 E4            pop a
8620   3B87             ; --- END RELATIONAL
8621   3B87 C0 00 00      cmp b, 0
8622   3B8A C6 A0 3D      je _for192_exit
8623   3B8D             _for192_block:
8624   3B8D             ; hex_char = hex_string[i]; 
8625   3B8D FA FC FF      lea d, [bp + -4] ; $hex_char
8626   3B90 DA            push d
8627   3B91 FA 05 00      lea d, [bp + 5] ; $hex_string
8628   3B94 FD 2A         mov d, [d]
8629   3B96 D7            push a
8630   3B97 DA            push d
8631   3B98 FA FD FF      lea d, [bp + -3] ; $i
8632   3B9B 2A            mov b, [d]
8633   3B9C 38 00 00      mov c, 0
8634   3B9F E7            pop d
8635   3BA0 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
8636   3BA4 E4            pop a
8637   3BA5 32            mov bl, [d]
8638   3BA6 A7 00         mov bh, 0
8639   3BA8 38 00 00      mov c, 0
8640   3BAB E7            pop d
8641   3BAC FD 3E         mov [d], bl
8642   3BAE             ; if (hex_char >= 'a' && hex_char <= 'f')  
8643   3BAE             _if193_cond:
8644   3BAE FA FC FF      lea d, [bp + -4] ; $hex_char
8645   3BB1 32            mov bl, [d]
8646   3BB2 A7 00         mov bh, 0
8647   3BB4 38 00 00      mov c, 0
8648   3BB7             ; --- START RELATIONAL
8649   3BB7 D7            push a
8650   3BB8 11            mov a, b
8651   3BB9 FD 2E 61 00   mov32 cb, $00000061
8651   3BBD 00 00 
8652   3BBF B0            cmp a, b
8653   3BC0 FD 80         sge ; >=
8654   3BC2 E4            pop a
8655   3BC3             ; --- END RELATIONAL
8656   3BC3             ; --- START LOGICAL AND
8657   3BC3 D7            push a
8658   3BC4 11            mov a, b
8659   3BC5 FA FC FF      lea d, [bp + -4] ; $hex_char
8660   3BC8 32            mov bl, [d]
8661   3BC9 A7 00         mov bh, 0
8662   3BCB 38 00 00      mov c, 0
8663   3BCE             ; --- START RELATIONAL
8664   3BCE D7            push a
8665   3BCF 11            mov a, b
8666   3BD0 FD 2E 66 00   mov32 cb, $00000066
8666   3BD4 00 00 
8667   3BD6 B0            cmp a, b
8668   3BD7 FD 74         sle ; <= (signed)
8669   3BD9 E4            pop a
8670   3BDA             ; --- END RELATIONAL
8671   3BDA FD A7         sand a, b
8672   3BDC E4            pop a
8673   3BDD             ; --- END LOGICAL AND
8674   3BDD C0 00 00      cmp b, 0
8675   3BE0 C6 63 3C      je _if193_else
8676   3BE3             _if193_TRUE:
8677   3BE3             ; value = (value * 16) + (hex_char - 'a' + 10); 
8678   3BE3 FA FF FF      lea d, [bp + -1] ; $value
8679   3BE6 DA            push d
8680   3BE7 FA FF FF      lea d, [bp + -1] ; $value
8681   3BEA 2A            mov b, [d]
8682   3BEB 38 00 00      mov c, 0
8683   3BEE             ; --- START FACTORS
8684   3BEE D7            push a
8685   3BEF FD D8         push g
8686   3BF1 11            mov a, b
8687   3BF2 FD 7A         mov g, c
8688   3BF4 FD 2E 10 00   mov32 cb, $00000010
8688   3BF8 00 00 
8689   3BFA D7            push a     ; save left operand
8690   3BFB 8E            xor a, b   ; xor sign bits
8691   3BFC FD AA         swp a      ; swap bytes
8692   3BFE 83            mov cl, al ; save result of xor into 'dl'
8693   3BFF E4            pop a      ; restore left side operator
8694   3C00 DF            push cl    ; save result of xor above
8695   3C01 FD AA         swp a  
8696   3C03 93 80         test al, $80  
8697   3C05 FD AA         swp a  
8698   3C07 C6 0C 3C      jz skip_invert_a_197  
8699   3C0A FD 95         neg a 
8700   3C0C             skip_invert_a_197:   
8701   3C0C FD AB         swp b
8702   3C0E FD 93 80      test bl, $80  
8703   3C11 FD AB         swp b
8704   3C13 C6 18 3C      jz skip_invert_b_197  
8705   3C16 FD 97         neg b 
8706   3C18             skip_invert_b_197:   
8707   3C18 AC            mul a, b ; *
8708   3C19 FD 78         mov g, a
8709   3C1B 11            mov a, b
8710   3C1C EA            pop bl
8711   3C1D FD 93 80      test bl, $80
8712   3C20 C6 2D 3C      jz _same_signs_197
8713   3C23 2F            mov bl, al
8714   3C24 95            not a
8715   3C25 FD 97         neg b
8716   3C27 5B 00 00      adc a, 0
8717   3C2A FD 78         mov g, a
8718   3C2C 11            mov a, b
8719   3C2D             _same_signs_197:
8720   3C2D FD 38         mov c, g
8721   3C2F 27            mov b, a
8722   3C30 FD F1         pop g
8723   3C32 E4            pop a
8724   3C33             ; --- END FACTORS
8725   3C33             ; --- START TERMS
8726   3C33 D7            push a
8727   3C34 FD D8         push g
8728   3C36 11            mov a, b
8729   3C37 FD 7A         mov g, c
8730   3C39 FA FC FF      lea d, [bp + -4] ; $hex_char
8731   3C3C 32            mov bl, [d]
8732   3C3D A7 00         mov bh, 0
8733   3C3F 38 00 00      mov c, 0
8734   3C42             ; --- START TERMS
8735   3C42 D7            push a
8736   3C43 11            mov a, b
8737   3C44 FD 2E 61 00   mov32 cb, $00000061
8737   3C48 00 00 
8738   3C4A 60            sub a, b
8739   3C4B 27            mov b, a
8740   3C4C 11            mov a, b
8741   3C4D FD 2E 0A 00   mov32 cb, $0000000a
8741   3C51 00 00 
8742   3C53 56            add b, a
8743   3C54 E4            pop a
8744   3C55             ; --- END TERMS
8745   3C55 38 00 00      mov c, 0
8746   3C58 FD 15         add32 cb, ga
8747   3C5A FD F1         pop g
8748   3C5C E4            pop a
8749   3C5D             ; --- END TERMS
8750   3C5D E7            pop d
8751   3C5E FD 43         mov [d], b
8752   3C60 0A 8D 3D      jmp _if193_exit
8753   3C63             _if193_else:
8754   3C63             ; if (hex_char >= 'A' && hex_char <= 'F')  
8755   3C63             _if198_cond:
8756   3C63 FA FC FF      lea d, [bp + -4] ; $hex_char
8757   3C66 32            mov bl, [d]
8758   3C67 A7 00         mov bh, 0
8759   3C69 38 00 00      mov c, 0
8760   3C6C             ; --- START RELATIONAL
8761   3C6C D7            push a
8762   3C6D 11            mov a, b
8763   3C6E FD 2E 41 00   mov32 cb, $00000041
8763   3C72 00 00 
8764   3C74 B0            cmp a, b
8765   3C75 FD 80         sge ; >=
8766   3C77 E4            pop a
8767   3C78             ; --- END RELATIONAL
8768   3C78             ; --- START LOGICAL AND
8769   3C78 D7            push a
8770   3C79 11            mov a, b
8771   3C7A FA FC FF      lea d, [bp + -4] ; $hex_char
8772   3C7D 32            mov bl, [d]
8773   3C7E A7 00         mov bh, 0
8774   3C80 38 00 00      mov c, 0
8775   3C83             ; --- START RELATIONAL
8776   3C83 D7            push a
8777   3C84 11            mov a, b
8778   3C85 FD 2E 46 00   mov32 cb, $00000046
8778   3C89 00 00 
8779   3C8B B0            cmp a, b
8780   3C8C FD 74         sle ; <= (signed)
8781   3C8E E4            pop a
8782   3C8F             ; --- END RELATIONAL
8783   3C8F FD A7         sand a, b
8784   3C91 E4            pop a
8785   3C92             ; --- END LOGICAL AND
8786   3C92 C0 00 00      cmp b, 0
8787   3C95 C6 18 3D      je _if198_else
8788   3C98             _if198_TRUE:
8789   3C98             ; value = (value * 16) + (hex_char - 'A' + 10); 
8790   3C98 FA FF FF      lea d, [bp + -1] ; $value
8791   3C9B DA            push d
8792   3C9C FA FF FF      lea d, [bp + -1] ; $value
8793   3C9F 2A            mov b, [d]
8794   3CA0 38 00 00      mov c, 0
8795   3CA3             ; --- START FACTORS
8796   3CA3 D7            push a
8797   3CA4 FD D8         push g
8798   3CA6 11            mov a, b
8799   3CA7 FD 7A         mov g, c
8800   3CA9 FD 2E 10 00   mov32 cb, $00000010
8800   3CAD 00 00 
8801   3CAF D7            push a     ; save left operand
8802   3CB0 8E            xor a, b   ; xor sign bits
8803   3CB1 FD AA         swp a      ; swap bytes
8804   3CB3 83            mov cl, al ; save result of xor into 'dl'
8805   3CB4 E4            pop a      ; restore left side operator
8806   3CB5 DF            push cl    ; save result of xor above
8807   3CB6 FD AA         swp a  
8808   3CB8 93 80         test al, $80  
8809   3CBA FD AA         swp a  
8810   3CBC C6 C1 3C      jz skip_invert_a_202  
8811   3CBF FD 95         neg a 
8812   3CC1             skip_invert_a_202:   
8813   3CC1 FD AB         swp b
8814   3CC3 FD 93 80      test bl, $80  
8815   3CC6 FD AB         swp b
8816   3CC8 C6 CD 3C      jz skip_invert_b_202  
8817   3CCB FD 97         neg b 
8818   3CCD             skip_invert_b_202:   
8819   3CCD AC            mul a, b ; *
8820   3CCE FD 78         mov g, a
8821   3CD0 11            mov a, b
8822   3CD1 EA            pop bl
8823   3CD2 FD 93 80      test bl, $80
8824   3CD5 C6 E2 3C      jz _same_signs_202
8825   3CD8 2F            mov bl, al
8826   3CD9 95            not a
8827   3CDA FD 97         neg b
8828   3CDC 5B 00 00      adc a, 0
8829   3CDF FD 78         mov g, a
8830   3CE1 11            mov a, b
8831   3CE2             _same_signs_202:
8832   3CE2 FD 38         mov c, g
8833   3CE4 27            mov b, a
8834   3CE5 FD F1         pop g
8835   3CE7 E4            pop a
8836   3CE8             ; --- END FACTORS
8837   3CE8             ; --- START TERMS
8838   3CE8 D7            push a
8839   3CE9 FD D8         push g
8840   3CEB 11            mov a, b
8841   3CEC FD 7A         mov g, c
8842   3CEE FA FC FF      lea d, [bp + -4] ; $hex_char
8843   3CF1 32            mov bl, [d]
8844   3CF2 A7 00         mov bh, 0
8845   3CF4 38 00 00      mov c, 0
8846   3CF7             ; --- START TERMS
8847   3CF7 D7            push a
8848   3CF8 11            mov a, b
8849   3CF9 FD 2E 41 00   mov32 cb, $00000041
8849   3CFD 00 00 
8850   3CFF 60            sub a, b
8851   3D00 27            mov b, a
8852   3D01 11            mov a, b
8853   3D02 FD 2E 0A 00   mov32 cb, $0000000a
8853   3D06 00 00 
8854   3D08 56            add b, a
8855   3D09 E4            pop a
8856   3D0A             ; --- END TERMS
8857   3D0A 38 00 00      mov c, 0
8858   3D0D FD 15         add32 cb, ga
8859   3D0F FD F1         pop g
8860   3D11 E4            pop a
8861   3D12             ; --- END TERMS
8862   3D12 E7            pop d
8863   3D13 FD 43         mov [d], b
8864   3D15 0A 8D 3D      jmp _if198_exit
8865   3D18             _if198_else:
8866   3D18             ; value = (value * 16) + (hex_char - '0'); 
8867   3D18 FA FF FF      lea d, [bp + -1] ; $value
8868   3D1B DA            push d
8869   3D1C FA FF FF      lea d, [bp + -1] ; $value
8870   3D1F 2A            mov b, [d]
8871   3D20 38 00 00      mov c, 0
8872   3D23             ; --- START FACTORS
8873   3D23 D7            push a
8874   3D24 FD D8         push g
8875   3D26 11            mov a, b
8876   3D27 FD 7A         mov g, c
8877   3D29 FD 2E 10 00   mov32 cb, $00000010
8877   3D2D 00 00 
8878   3D2F D7            push a     ; save left operand
8879   3D30 8E            xor a, b   ; xor sign bits
8880   3D31 FD AA         swp a      ; swap bytes
8881   3D33 83            mov cl, al ; save result of xor into 'dl'
8882   3D34 E4            pop a      ; restore left side operator
8883   3D35 DF            push cl    ; save result of xor above
8884   3D36 FD AA         swp a  
8885   3D38 93 80         test al, $80  
8886   3D3A FD AA         swp a  
8887   3D3C C6 41 3D      jz skip_invert_a_206  
8888   3D3F FD 95         neg a 
8889   3D41             skip_invert_a_206:   
8890   3D41 FD AB         swp b
8891   3D43 FD 93 80      test bl, $80  
8892   3D46 FD AB         swp b
8893   3D48 C6 4D 3D      jz skip_invert_b_206  
8894   3D4B FD 97         neg b 
8895   3D4D             skip_invert_b_206:   
8896   3D4D AC            mul a, b ; *
8897   3D4E FD 78         mov g, a
8898   3D50 11            mov a, b
8899   3D51 EA            pop bl
8900   3D52 FD 93 80      test bl, $80
8901   3D55 C6 62 3D      jz _same_signs_206
8902   3D58 2F            mov bl, al
8903   3D59 95            not a
8904   3D5A FD 97         neg b
8905   3D5C 5B 00 00      adc a, 0
8906   3D5F FD 78         mov g, a
8907   3D61 11            mov a, b
8908   3D62             _same_signs_206:
8909   3D62 FD 38         mov c, g
8910   3D64 27            mov b, a
8911   3D65 FD F1         pop g
8912   3D67 E4            pop a
8913   3D68             ; --- END FACTORS
8914   3D68             ; --- START TERMS
8915   3D68 D7            push a
8916   3D69 FD D8         push g
8917   3D6B 11            mov a, b
8918   3D6C FD 7A         mov g, c
8919   3D6E FA FC FF      lea d, [bp + -4] ; $hex_char
8920   3D71 32            mov bl, [d]
8921   3D72 A7 00         mov bh, 0
8922   3D74 38 00 00      mov c, 0
8923   3D77             ; --- START TERMS
8924   3D77 D7            push a
8925   3D78 11            mov a, b
8926   3D79 FD 2E 30 00   mov32 cb, $00000030
8926   3D7D 00 00 
8927   3D7F 60            sub a, b
8928   3D80 27            mov b, a
8929   3D81 E4            pop a
8930   3D82             ; --- END TERMS
8931   3D82 38 00 00      mov c, 0
8932   3D85 FD 15         add32 cb, ga
8933   3D87 FD F1         pop g
8934   3D89 E4            pop a
8935   3D8A             ; --- END TERMS
8936   3D8A E7            pop d
8937   3D8B FD 43         mov [d], b
8938   3D8D             _if198_exit:
8939   3D8D             _if193_exit:
8940   3D8D             _for192_update:
8941   3D8D FA FD FF      lea d, [bp + -3] ; $i
8942   3D90 2A            mov b, [d]
8943   3D91 38 00 00      mov c, 0
8944   3D94 11            mov a, b
8945   3D95 FD 77         inc b
8946   3D97 FA FD FF      lea d, [bp + -3] ; $i
8947   3D9A FD 43         mov [d], b
8948   3D9C 27            mov b, a
8949   3D9D 0A 73 3B      jmp _for192_cond
8950   3DA0             _for192_exit:
8951   3DA0             ; return value; 
8952   3DA0 FA FF FF      lea d, [bp + -1] ; $value
8953   3DA3 2A            mov b, [d]
8954   3DA4 38 00 00      mov c, 0
8955   3DA7 F9            leave
8956   3DA8 09            ret
8957   3DA9             
8958   3DA9             loadfile:
8959   3DA9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8960   3DAC             ; --- BEGIN INLINE ASM SEGMENT
8961   3DAC FA 07 00      lea d, [bp + 7] ; $destination
8962   3DAF 15            mov a, [d]
8963   3DB0 4F            mov di, a
8964   3DB1 FA 05 00      lea d, [bp + 5] ; $filename
8965   3DB4 FD 2A         mov d, [d]
8966   3DB6 19 14         mov al, 20
8967   3DB8 05 04         syscall sys_filesystem
8968   3DBA             ; --- END INLINE ASM SEGMENT
8969   3DBA F9            leave
8970   3DBB 09            ret
8971   3DBC             
8972   3DBC             exp:
8973   3DBC F8 00 00      enter 0 ; (push bp; mov bp, sp)
8974   3DBF             ; int i; 
8975   3DBF 52 02 00      sub sp, 2
8976   3DC2             ; int result = 1; 
8977   3DC2 52 02 00      sub sp, 2
8978   3DC5             ; --- START LOCAL VAR INITIALIZATION
8979   3DC5 FA FD FF      lea d, [bp + -3] ; $result
8980   3DC8 DA            push d
8981   3DC9 FD 2E 01 00   mov32 cb, $00000001
8981   3DCD 00 00 
8982   3DCF E7            pop d
8983   3DD0 FD 43         mov [d], b
8984   3DD2             ; --- END LOCAL VAR INITIALIZATION
8985   3DD2             ; for(i = 0; i < exp; i++){ 
8986   3DD2             _for207_init:
8987   3DD2 FA FF FF      lea d, [bp + -1] ; $i
8988   3DD5 DA            push d
8989   3DD6 FD 2E 00 00   mov32 cb, $00000000
8989   3DDA 00 00 
8990   3DDC E7            pop d
8991   3DDD FD 43         mov [d], b
8992   3DDF             _for207_cond:
8993   3DDF FA FF FF      lea d, [bp + -1] ; $i
8994   3DE2 2A            mov b, [d]
8995   3DE3 38 00 00      mov c, 0
8996   3DE6             ; --- START RELATIONAL
8997   3DE6 D7            push a
8998   3DE7 11            mov a, b
8999   3DE8 FA 07 00      lea d, [bp + 7] ; $exp
9000   3DEB 2A            mov b, [d]
9001   3DEC 38 00 00      mov c, 0
9002   3DEF B0            cmp a, b
9003   3DF0 FD 73         slt ; < (signed)
9004   3DF2 E4            pop a
9005   3DF3             ; --- END RELATIONAL
9006   3DF3 C0 00 00      cmp b, 0
9007   3DF6 C6 60 3E      je _for207_exit
9008   3DF9             _for207_block:
9009   3DF9             ; result = result * base; 
9010   3DF9 FA FD FF      lea d, [bp + -3] ; $result
9011   3DFC DA            push d
9012   3DFD FA FD FF      lea d, [bp + -3] ; $result
9013   3E00 2A            mov b, [d]
9014   3E01 38 00 00      mov c, 0
9015   3E04             ; --- START FACTORS
9016   3E04 D7            push a
9017   3E05 FD D8         push g
9018   3E07 11            mov a, b
9019   3E08 FD 7A         mov g, c
9020   3E0A FA 05 00      lea d, [bp + 5] ; $base
9021   3E0D 2A            mov b, [d]
9022   3E0E 38 00 00      mov c, 0
9023   3E11 D7            push a     ; save left operand
9024   3E12 8E            xor a, b   ; xor sign bits
9025   3E13 FD AA         swp a      ; swap bytes
9026   3E15 83            mov cl, al ; save result of xor into 'dl'
9027   3E16 E4            pop a      ; restore left side operator
9028   3E17 DF            push cl    ; save result of xor above
9029   3E18 FD AA         swp a  
9030   3E1A 93 80         test al, $80  
9031   3E1C FD AA         swp a  
9032   3E1E C6 23 3E      jz skip_invert_a_209  
9033   3E21 FD 95         neg a 
9034   3E23             skip_invert_a_209:   
9035   3E23 FD AB         swp b
9036   3E25 FD 93 80      test bl, $80  
9037   3E28 FD AB         swp b
9038   3E2A C6 2F 3E      jz skip_invert_b_209  
9039   3E2D FD 97         neg b 
9040   3E2F             skip_invert_b_209:   
9041   3E2F AC            mul a, b ; *
9042   3E30 FD 78         mov g, a
9043   3E32 11            mov a, b
9044   3E33 EA            pop bl
9045   3E34 FD 93 80      test bl, $80
9046   3E37 C6 44 3E      jz _same_signs_209
9047   3E3A 2F            mov bl, al
9048   3E3B 95            not a
9049   3E3C FD 97         neg b
9050   3E3E 5B 00 00      adc a, 0
9051   3E41 FD 78         mov g, a
9052   3E43 11            mov a, b
9053   3E44             _same_signs_209:
9054   3E44 FD 38         mov c, g
9055   3E46 27            mov b, a
9056   3E47 FD F1         pop g
9057   3E49 E4            pop a
9058   3E4A             ; --- END FACTORS
9059   3E4A E7            pop d
9060   3E4B FD 43         mov [d], b
9061   3E4D             _for207_update:
9062   3E4D FA FF FF      lea d, [bp + -1] ; $i
9063   3E50 2A            mov b, [d]
9064   3E51 38 00 00      mov c, 0
9065   3E54 11            mov a, b
9066   3E55 FD 77         inc b
9067   3E57 FA FF FF      lea d, [bp + -1] ; $i
9068   3E5A FD 43         mov [d], b
9069   3E5C 27            mov b, a
9070   3E5D 0A DF 3D      jmp _for207_cond
9071   3E60             _for207_exit:
9072   3E60             ; return result; 
9073   3E60 FA FD FF      lea d, [bp + -3] ; $result
9074   3E63 2A            mov b, [d]
9075   3E64 38 00 00      mov c, 0
9076   3E67 F9            leave
9077   3E68 09            ret
9078   3E69             
9079   3E69             print:
9080   3E69 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9081   3E6C             ; --- BEGIN INLINE ASM SEGMENT
9082   3E6C FA 05 00      lea d, [bp + 5] ; $s
9083   3E6F FD 2A         mov d, [d]
9084   3E71             _puts_L1_print:
9085   3E71 1E            mov al, [d]
9086   3E72 B9 00         cmp al, 0
9087   3E74 C6 80 3E      jz _puts_END_print
9088   3E77 23            mov ah, al
9089   3E78 19 00         mov al, 0
9090   3E7A 05 03         syscall sys_io
9091   3E7C 79            inc d
9092   3E7D 0A 71 3E      jmp _puts_L1_print
9093   3E80             _puts_END_print:
9094   3E80             ; --- END INLINE ASM SEGMENT
9095   3E80 F9            leave
9096   3E81 09            ret
9097   3E82             
9098   3E82             alloc:
9099   3E82 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9100   3E85             ; heap_top = heap_top + bytes; 
9101   3E85 3B FD 53      mov d, _heap_top ; $heap_top
9102   3E88 DA            push d
9103   3E89 3B FD 53      mov d, _heap_top ; $heap_top
9104   3E8C 2A            mov b, [d]
9105   3E8D 38 00 00      mov c, 0
9106   3E90             ; --- START TERMS
9107   3E90 D7            push a
9108   3E91 11            mov a, b
9109   3E92 FA 05 00      lea d, [bp + 5] ; $bytes
9110   3E95 2A            mov b, [d]
9111   3E96 38 00 00      mov c, 0
9112   3E99 56            add b, a
9113   3E9A E4            pop a
9114   3E9B             ; --- END TERMS
9115   3E9B E7            pop d
9116   3E9C FD 43         mov [d], b
9117   3E9E             ; return heap_top - bytes; 
9118   3E9E 3B FD 53      mov d, _heap_top ; $heap_top
9119   3EA1 2A            mov b, [d]
9120   3EA2 38 00 00      mov c, 0
9121   3EA5             ; --- START TERMS
9122   3EA5 D7            push a
9123   3EA6 11            mov a, b
9124   3EA7 FA 05 00      lea d, [bp + 5] ; $bytes
9125   3EAA 2A            mov b, [d]
9126   3EAB 38 00 00      mov c, 0
9127   3EAE 60            sub a, b
9128   3EAF 27            mov b, a
9129   3EB0 E4            pop a
9130   3EB1             ; --- END TERMS
9131   3EB1 F9            leave
9132   3EB2 09            ret
9133   3EB3             
9134   3EB3             is_space:
9135   3EB3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9136   3EB6             ; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
9137   3EB6 FA 05 00      lea d, [bp + 5] ; $c
9138   3EB9 32            mov bl, [d]
9139   3EBA A7 00         mov bh, 0
9140   3EBC 38 00 00      mov c, 0
9141   3EBF             ; --- START RELATIONAL
9142   3EBF D7            push a
9143   3EC0 11            mov a, b
9144   3EC1 FD 2E 20 00   mov32 cb, $00000020
9144   3EC5 00 00 
9145   3EC7 B0            cmp a, b
9146   3EC8 FD 71         seq ; ==
9147   3ECA E4            pop a
9148   3ECB             ; --- END RELATIONAL
9149   3ECB             ; --- START LOGICAL OR
9150   3ECB D7            push a
9151   3ECC 11            mov a, b
9152   3ECD FA 05 00      lea d, [bp + 5] ; $c
9153   3ED0 32            mov bl, [d]
9154   3ED1 A7 00         mov bh, 0
9155   3ED3 38 00 00      mov c, 0
9156   3ED6             ; --- START RELATIONAL
9157   3ED6 D7            push a
9158   3ED7 11            mov a, b
9159   3ED8 FD 2E 09 00   mov32 cb, $00000009
9159   3EDC 00 00 
9160   3EDE B0            cmp a, b
9161   3EDF FD 71         seq ; ==
9162   3EE1 E4            pop a
9163   3EE2             ; --- END RELATIONAL
9164   3EE2 FD A8         sor a, b ; ||
9165   3EE4 11            mov a, b
9166   3EE5 FA 05 00      lea d, [bp + 5] ; $c
9167   3EE8 32            mov bl, [d]
9168   3EE9 A7 00         mov bh, 0
9169   3EEB 38 00 00      mov c, 0
9170   3EEE             ; --- START RELATIONAL
9171   3EEE D7            push a
9172   3EEF 11            mov a, b
9173   3EF0 FD 2E 0A 00   mov32 cb, $0000000a
9173   3EF4 00 00 
9174   3EF6 B0            cmp a, b
9175   3EF7 FD 71         seq ; ==
9176   3EF9 E4            pop a
9177   3EFA             ; --- END RELATIONAL
9178   3EFA FD A8         sor a, b ; ||
9179   3EFC 11            mov a, b
9180   3EFD FA 05 00      lea d, [bp + 5] ; $c
9181   3F00 32            mov bl, [d]
9182   3F01 A7 00         mov bh, 0
9183   3F03 38 00 00      mov c, 0
9184   3F06             ; --- START RELATIONAL
9185   3F06 D7            push a
9186   3F07 11            mov a, b
9187   3F08 FD 2E 0D 00   mov32 cb, $0000000d
9187   3F0C 00 00 
9188   3F0E B0            cmp a, b
9189   3F0F FD 71         seq ; ==
9190   3F11 E4            pop a
9191   3F12             ; --- END RELATIONAL
9192   3F12 FD A8         sor a, b ; ||
9193   3F14 E4            pop a
9194   3F15             ; --- END LOGICAL OR
9195   3F15 F9            leave
9196   3F16 09            ret
9197   3F17             
9198   3F17             is_alpha:
9199   3F17 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9200   3F1A             ; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
9201   3F1A FA 05 00      lea d, [bp + 5] ; $c
9202   3F1D 32            mov bl, [d]
9203   3F1E A7 00         mov bh, 0
9204   3F20 38 00 00      mov c, 0
9205   3F23             ; --- START RELATIONAL
9206   3F23 D7            push a
9207   3F24 11            mov a, b
9208   3F25 FD 2E 61 00   mov32 cb, $00000061
9208   3F29 00 00 
9209   3F2B B0            cmp a, b
9210   3F2C FD 80         sge ; >=
9211   3F2E E4            pop a
9212   3F2F             ; --- END RELATIONAL
9213   3F2F             ; --- START LOGICAL AND
9214   3F2F D7            push a
9215   3F30 11            mov a, b
9216   3F31 FA 05 00      lea d, [bp + 5] ; $c
9217   3F34 32            mov bl, [d]
9218   3F35 A7 00         mov bh, 0
9219   3F37 38 00 00      mov c, 0
9220   3F3A             ; --- START RELATIONAL
9221   3F3A D7            push a
9222   3F3B 11            mov a, b
9223   3F3C FD 2E 7A 00   mov32 cb, $0000007a
9223   3F40 00 00 
9224   3F42 B0            cmp a, b
9225   3F43 FD 74         sle ; <= (signed)
9226   3F45 E4            pop a
9227   3F46             ; --- END RELATIONAL
9228   3F46 FD A7         sand a, b
9229   3F48 E4            pop a
9230   3F49             ; --- END LOGICAL AND
9231   3F49             ; --- START LOGICAL OR
9232   3F49 D7            push a
9233   3F4A 11            mov a, b
9234   3F4B FA 05 00      lea d, [bp + 5] ; $c
9235   3F4E 32            mov bl, [d]
9236   3F4F A7 00         mov bh, 0
9237   3F51 38 00 00      mov c, 0
9238   3F54             ; --- START RELATIONAL
9239   3F54 D7            push a
9240   3F55 11            mov a, b
9241   3F56 FD 2E 41 00   mov32 cb, $00000041
9241   3F5A 00 00 
9242   3F5C B0            cmp a, b
9243   3F5D FD 80         sge ; >=
9244   3F5F E4            pop a
9245   3F60             ; --- END RELATIONAL
9246   3F60             ; --- START LOGICAL AND
9247   3F60 D7            push a
9248   3F61 11            mov a, b
9249   3F62 FA 05 00      lea d, [bp + 5] ; $c
9250   3F65 32            mov bl, [d]
9251   3F66 A7 00         mov bh, 0
9252   3F68 38 00 00      mov c, 0
9253   3F6B             ; --- START RELATIONAL
9254   3F6B D7            push a
9255   3F6C 11            mov a, b
9256   3F6D FD 2E 5A 00   mov32 cb, $0000005a
9256   3F71 00 00 
9257   3F73 B0            cmp a, b
9258   3F74 FD 74         sle ; <= (signed)
9259   3F76 E4            pop a
9260   3F77             ; --- END RELATIONAL
9261   3F77 FD A7         sand a, b
9262   3F79 E4            pop a
9263   3F7A             ; --- END LOGICAL AND
9264   3F7A FD A8         sor a, b ; ||
9265   3F7C 11            mov a, b
9266   3F7D FA 05 00      lea d, [bp + 5] ; $c
9267   3F80 32            mov bl, [d]
9268   3F81 A7 00         mov bh, 0
9269   3F83 38 00 00      mov c, 0
9270   3F86             ; --- START RELATIONAL
9271   3F86 D7            push a
9272   3F87 11            mov a, b
9273   3F88 FD 2E 5F 00   mov32 cb, $0000005f
9273   3F8C 00 00 
9274   3F8E B0            cmp a, b
9275   3F8F FD 71         seq ; ==
9276   3F91 E4            pop a
9277   3F92             ; --- END RELATIONAL
9278   3F92 FD A8         sor a, b ; ||
9279   3F94 E4            pop a
9280   3F95             ; --- END LOGICAL OR
9281   3F95 F9            leave
9282   3F96 09            ret
9283   3F97             
9284   3F97             is_digit:
9285   3F97 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9286   3F9A             ; return c >= '0' && c <= '9'; 
9287   3F9A FA 05 00      lea d, [bp + 5] ; $c
9288   3F9D 32            mov bl, [d]
9289   3F9E A7 00         mov bh, 0
9290   3FA0 38 00 00      mov c, 0
9291   3FA3             ; --- START RELATIONAL
9292   3FA3 D7            push a
9293   3FA4 11            mov a, b
9294   3FA5 FD 2E 30 00   mov32 cb, $00000030
9294   3FA9 00 00 
9295   3FAB B0            cmp a, b
9296   3FAC FD 80         sge ; >=
9297   3FAE E4            pop a
9298   3FAF             ; --- END RELATIONAL
9299   3FAF             ; --- START LOGICAL AND
9300   3FAF D7            push a
9301   3FB0 11            mov a, b
9302   3FB1 FA 05 00      lea d, [bp + 5] ; $c
9303   3FB4 32            mov bl, [d]
9304   3FB5 A7 00         mov bh, 0
9305   3FB7 38 00 00      mov c, 0
9306   3FBA             ; --- START RELATIONAL
9307   3FBA D7            push a
9308   3FBB 11            mov a, b
9309   3FBC FD 2E 39 00   mov32 cb, $00000039
9309   3FC0 00 00 
9310   3FC2 B0            cmp a, b
9311   3FC3 FD 74         sle ; <= (signed)
9312   3FC5 E4            pop a
9313   3FC6             ; --- END RELATIONAL
9314   3FC6 FD A7         sand a, b
9315   3FC8 E4            pop a
9316   3FC9             ; --- END LOGICAL AND
9317   3FC9 F9            leave
9318   3FCA 09            ret
9319   3FCB             
9320   3FCB             strcmp:
9321   3FCB F8 00 00      enter 0 ; (push bp; mov bp, sp)
9322   3FCE             ; while (*s1 && (*s1 == *s2)) { 
9323   3FCE             _while210_cond:
9324   3FCE FA 05 00      lea d, [bp + 5] ; $s1
9325   3FD1 2A            mov b, [d]
9326   3FD2 38 00 00      mov c, 0
9327   3FD5 74            mov d, b
9328   3FD6 32            mov bl, [d]
9329   3FD7 A7 00         mov bh, 0
9330   3FD9 38 00 00      mov c, 0
9331   3FDC             ; --- START LOGICAL AND
9332   3FDC D7            push a
9333   3FDD 11            mov a, b
9334   3FDE FA 05 00      lea d, [bp + 5] ; $s1
9335   3FE1 2A            mov b, [d]
9336   3FE2 38 00 00      mov c, 0
9337   3FE5 74            mov d, b
9338   3FE6 32            mov bl, [d]
9339   3FE7 A7 00         mov bh, 0
9340   3FE9 38 00 00      mov c, 0
9341   3FEC             ; --- START RELATIONAL
9342   3FEC D7            push a
9343   3FED 11            mov a, b
9344   3FEE FA 07 00      lea d, [bp + 7] ; $s2
9345   3FF1 2A            mov b, [d]
9346   3FF2 38 00 00      mov c, 0
9347   3FF5 74            mov d, b
9348   3FF6 32            mov bl, [d]
9349   3FF7 A7 00         mov bh, 0
9350   3FF9 38 00 00      mov c, 0
9351   3FFC B0            cmp a, b
9352   3FFD FD 71         seq ; ==
9353   3FFF E4            pop a
9354   4000             ; --- END RELATIONAL
9355   4000 FD A7         sand a, b
9356   4002 E4            pop a
9357   4003             ; --- END LOGICAL AND
9358   4003 C0 00 00      cmp b, 0
9359   4006 C6 2C 40      je _while210_exit
9360   4009             _while210_block:
9361   4009             ; s1++; 
9362   4009 FA 05 00      lea d, [bp + 5] ; $s1
9363   400C 2A            mov b, [d]
9364   400D 38 00 00      mov c, 0
9365   4010 FD 77         inc b
9366   4012 FA 05 00      lea d, [bp + 5] ; $s1
9367   4015 FD 43         mov [d], b
9368   4017 FD 7D         dec b
9369   4019             ; s2++; 
9370   4019 FA 07 00      lea d, [bp + 7] ; $s2
9371   401C 2A            mov b, [d]
9372   401D 38 00 00      mov c, 0
9373   4020 FD 77         inc b
9374   4022 FA 07 00      lea d, [bp + 7] ; $s2
9375   4025 FD 43         mov [d], b
9376   4027 FD 7D         dec b
9377   4029 0A CE 3F      jmp _while210_cond
9378   402C             _while210_exit:
9379   402C             ; return *s1 - *s2; 
9380   402C FA 05 00      lea d, [bp + 5] ; $s1
9381   402F 2A            mov b, [d]
9382   4030 38 00 00      mov c, 0
9383   4033 74            mov d, b
9384   4034 32            mov bl, [d]
9385   4035 A7 00         mov bh, 0
9386   4037 38 00 00      mov c, 0
9387   403A             ; --- START TERMS
9388   403A D7            push a
9389   403B 11            mov a, b
9390   403C FA 07 00      lea d, [bp + 7] ; $s2
9391   403F 2A            mov b, [d]
9392   4040 38 00 00      mov c, 0
9393   4043 74            mov d, b
9394   4044 32            mov bl, [d]
9395   4045 A7 00         mov bh, 0
9396   4047 38 00 00      mov c, 0
9397   404A 60            sub a, b
9398   404B 27            mov b, a
9399   404C E4            pop a
9400   404D             ; --- END TERMS
9401   404D F9            leave
9402   404E 09            ret
9403   404F             
9404   404F             strlen:
9405   404F F8 00 00      enter 0 ; (push bp; mov bp, sp)
9406   4052             ; int length; 
9407   4052 52 02 00      sub sp, 2
9408   4055             ; length = 0; 
9409   4055 FA FF FF      lea d, [bp + -1] ; $length
9410   4058 DA            push d
9411   4059 FD 2E 00 00   mov32 cb, $00000000
9411   405D 00 00 
9412   405F E7            pop d
9413   4060 FD 43         mov [d], b
9414   4062             ; while (str[length] != 0) { 
9415   4062             _while211_cond:
9416   4062 FA 05 00      lea d, [bp + 5] ; $str
9417   4065 FD 2A         mov d, [d]
9418   4067 D7            push a
9419   4068 DA            push d
9420   4069 FA FF FF      lea d, [bp + -1] ; $length
9421   406C 2A            mov b, [d]
9422   406D 38 00 00      mov c, 0
9423   4070 E7            pop d
9424   4071 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
9425   4075 E4            pop a
9426   4076 32            mov bl, [d]
9427   4077 A7 00         mov bh, 0
9428   4079 38 00 00      mov c, 0
9429   407C             ; --- START RELATIONAL
9430   407C D7            push a
9431   407D 11            mov a, b
9432   407E FD 2E 00 00   mov32 cb, $00000000
9432   4082 00 00 
9433   4084 B0            cmp a, b
9434   4085 FD 72         sneq ; !=
9435   4087 E4            pop a
9436   4088             ; --- END RELATIONAL
9437   4088 C0 00 00      cmp b, 0
9438   408B C6 A1 40      je _while211_exit
9439   408E             _while211_block:
9440   408E             ; length++; 
9441   408E FA FF FF      lea d, [bp + -1] ; $length
9442   4091 2A            mov b, [d]
9443   4092 38 00 00      mov c, 0
9444   4095 11            mov a, b
9445   4096 FD 77         inc b
9446   4098 FA FF FF      lea d, [bp + -1] ; $length
9447   409B FD 43         mov [d], b
9448   409D 27            mov b, a
9449   409E 0A 62 40      jmp _while211_cond
9450   40A1             _while211_exit:
9451   40A1             ; return length; 
9452   40A1 FA FF FF      lea d, [bp + -1] ; $length
9453   40A4 2A            mov b, [d]
9454   40A5 38 00 00      mov c, 0
9455   40A8 F9            leave
9456   40A9 09            ret
9457   40AA             
9458   40AA             atoi:
9459   40AA F8 00 00      enter 0 ; (push bp; mov bp, sp)
9460   40AD             ; int result = 0;  // Initialize result 
9461   40AD 52 02 00      sub sp, 2
9462   40B0             ; --- START LOCAL VAR INITIALIZATION
9463   40B0 FA FF FF      lea d, [bp + -1] ; $result
9464   40B3 DA            push d
9465   40B4 FD 2E 00 00   mov32 cb, $00000000
9465   40B8 00 00 
9466   40BA E7            pop d
9467   40BB FD 43         mov [d], b
9468   40BD             ; --- END LOCAL VAR INITIALIZATION
9469   40BD             ; int sign = 1;    // Initialize sign as positive 
9470   40BD 52 02 00      sub sp, 2
9471   40C0             ; --- START LOCAL VAR INITIALIZATION
9472   40C0 FA FD FF      lea d, [bp + -3] ; $sign
9473   40C3 DA            push d
9474   40C4 FD 2E 01 00   mov32 cb, $00000001
9474   40C8 00 00 
9475   40CA E7            pop d
9476   40CB FD 43         mov [d], b
9477   40CD             ; --- END LOCAL VAR INITIALIZATION
9478   40CD             ; while (*str == ' ') str++; 
9479   40CD             _while212_cond:
9480   40CD FA 05 00      lea d, [bp + 5] ; $str
9481   40D0 2A            mov b, [d]
9482   40D1 38 00 00      mov c, 0
9483   40D4 74            mov d, b
9484   40D5 32            mov bl, [d]
9485   40D6 A7 00         mov bh, 0
9486   40D8 38 00 00      mov c, 0
9487   40DB             ; --- START RELATIONAL
9488   40DB D7            push a
9489   40DC 11            mov a, b
9490   40DD FD 2E 20 00   mov32 cb, $00000020
9490   40E1 00 00 
9491   40E3 B0            cmp a, b
9492   40E4 FD 71         seq ; ==
9493   40E6 E4            pop a
9494   40E7             ; --- END RELATIONAL
9495   40E7 C0 00 00      cmp b, 0
9496   40EA C6 00 41      je _while212_exit
9497   40ED             _while212_block:
9498   40ED             ; str++; 
9499   40ED FA 05 00      lea d, [bp + 5] ; $str
9500   40F0 2A            mov b, [d]
9501   40F1 38 00 00      mov c, 0
9502   40F4 FD 77         inc b
9503   40F6 FA 05 00      lea d, [bp + 5] ; $str
9504   40F9 FD 43         mov [d], b
9505   40FB FD 7D         dec b
9506   40FD 0A CD 40      jmp _while212_cond
9507   4100             _while212_exit:
9508   4100             ; if (*str == '-' || *str == '+') { 
9509   4100             _if213_cond:
9510   4100 FA 05 00      lea d, [bp + 5] ; $str
9511   4103 2A            mov b, [d]
9512   4104 38 00 00      mov c, 0
9513   4107 74            mov d, b
9514   4108 32            mov bl, [d]
9515   4109 A7 00         mov bh, 0
9516   410B 38 00 00      mov c, 0
9517   410E             ; --- START RELATIONAL
9518   410E D7            push a
9519   410F 11            mov a, b
9520   4110 FD 2E 2D 00   mov32 cb, $0000002d
9520   4114 00 00 
9521   4116 B0            cmp a, b
9522   4117 FD 71         seq ; ==
9523   4119 E4            pop a
9524   411A             ; --- END RELATIONAL
9525   411A             ; --- START LOGICAL OR
9526   411A D7            push a
9527   411B 11            mov a, b
9528   411C FA 05 00      lea d, [bp + 5] ; $str
9529   411F 2A            mov b, [d]
9530   4120 38 00 00      mov c, 0
9531   4123 74            mov d, b
9532   4124 32            mov bl, [d]
9533   4125 A7 00         mov bh, 0
9534   4127 38 00 00      mov c, 0
9535   412A             ; --- START RELATIONAL
9536   412A D7            push a
9537   412B 11            mov a, b
9538   412C FD 2E 2B 00   mov32 cb, $0000002b
9538   4130 00 00 
9539   4132 B0            cmp a, b
9540   4133 FD 71         seq ; ==
9541   4135 E4            pop a
9542   4136             ; --- END RELATIONAL
9543   4136 FD A8         sor a, b ; ||
9544   4138 E4            pop a
9545   4139             ; --- END LOGICAL OR
9546   4139 C0 00 00      cmp b, 0
9547   413C C6 82 41      je _if213_exit
9548   413F             _if213_TRUE:
9549   413F             ; if (*str == '-') sign = -1; 
9550   413F             _if214_cond:
9551   413F FA 05 00      lea d, [bp + 5] ; $str
9552   4142 2A            mov b, [d]
9553   4143 38 00 00      mov c, 0
9554   4146 74            mov d, b
9555   4147 32            mov bl, [d]
9556   4148 A7 00         mov bh, 0
9557   414A 38 00 00      mov c, 0
9558   414D             ; --- START RELATIONAL
9559   414D D7            push a
9560   414E 11            mov a, b
9561   414F FD 2E 2D 00   mov32 cb, $0000002d
9561   4153 00 00 
9562   4155 B0            cmp a, b
9563   4156 FD 71         seq ; ==
9564   4158 E4            pop a
9565   4159             ; --- END RELATIONAL
9566   4159 C0 00 00      cmp b, 0
9567   415C C6 6F 41      je _if214_exit
9568   415F             _if214_TRUE:
9569   415F             ; sign = -1; 
9570   415F FA FD FF      lea d, [bp + -3] ; $sign
9571   4162 DA            push d
9572   4163 FD 2E FF FF   mov32 cb, $ffffffff
9572   4167 FF FF 
9573   4169 E7            pop d
9574   416A FD 43         mov [d], b
9575   416C 0A 6F 41      jmp _if214_exit
9576   416F             _if214_exit:
9577   416F             ; str++; 
9578   416F FA 05 00      lea d, [bp + 5] ; $str
9579   4172 2A            mov b, [d]
9580   4173 38 00 00      mov c, 0
9581   4176 FD 77         inc b
9582   4178 FA 05 00      lea d, [bp + 5] ; $str
9583   417B FD 43         mov [d], b
9584   417D FD 7D         dec b
9585   417F 0A 82 41      jmp _if213_exit
9586   4182             _if213_exit:
9587   4182             ; while (*str >= '0' && *str <= '9') { 
9588   4182             _while215_cond:
9589   4182 FA 05 00      lea d, [bp + 5] ; $str
9590   4185 2A            mov b, [d]
9591   4186 38 00 00      mov c, 0
9592   4189 74            mov d, b
9593   418A 32            mov bl, [d]
9594   418B A7 00         mov bh, 0
9595   418D 38 00 00      mov c, 0
9596   4190             ; --- START RELATIONAL
9597   4190 D7            push a
9598   4191 11            mov a, b
9599   4192 FD 2E 30 00   mov32 cb, $00000030
9599   4196 00 00 
9600   4198 B0            cmp a, b
9601   4199 FD 82         sgeu ; >= (unsigned)
9602   419B E4            pop a
9603   419C             ; --- END RELATIONAL
9604   419C             ; --- START LOGICAL AND
9605   419C D7            push a
9606   419D 11            mov a, b
9607   419E FA 05 00      lea d, [bp + 5] ; $str
9608   41A1 2A            mov b, [d]
9609   41A2 38 00 00      mov c, 0
9610   41A5 74            mov d, b
9611   41A6 32            mov bl, [d]
9612   41A7 A7 00         mov bh, 0
9613   41A9 38 00 00      mov c, 0
9614   41AC             ; --- START RELATIONAL
9615   41AC D7            push a
9616   41AD 11            mov a, b
9617   41AE FD 2E 39 00   mov32 cb, $00000039
9617   41B2 00 00 
9618   41B4 B0            cmp a, b
9619   41B5 FD 76         sleu ; <= (unsigned)
9620   41B7 E4            pop a
9621   41B8             ; --- END RELATIONAL
9622   41B8 FD A7         sand a, b
9623   41BA E4            pop a
9624   41BB             ; --- END LOGICAL AND
9625   41BB C0 00 00      cmp b, 0
9626   41BE C6 4A 42      je _while215_exit
9627   41C1             _while215_block:
9628   41C1             ; result = result * 10 + (*str - '0'); 
9629   41C1 FA FF FF      lea d, [bp + -1] ; $result
9630   41C4 DA            push d
9631   41C5 FA FF FF      lea d, [bp + -1] ; $result
9632   41C8 2A            mov b, [d]
9633   41C9 38 00 00      mov c, 0
9634   41CC             ; --- START FACTORS
9635   41CC D7            push a
9636   41CD FD D8         push g
9637   41CF 11            mov a, b
9638   41D0 FD 7A         mov g, c
9639   41D2 FD 2E 0A 00   mov32 cb, $0000000a
9639   41D6 00 00 
9640   41D8 D7            push a     ; save left operand
9641   41D9 8E            xor a, b   ; xor sign bits
9642   41DA FD AA         swp a      ; swap bytes
9643   41DC 83            mov cl, al ; save result of xor into 'dl'
9644   41DD E4            pop a      ; restore left side operator
9645   41DE DF            push cl    ; save result of xor above
9646   41DF FD AA         swp a  
9647   41E1 93 80         test al, $80  
9648   41E3 FD AA         swp a  
9649   41E5 C6 EA 41      jz skip_invert_a_217  
9650   41E8 FD 95         neg a 
9651   41EA             skip_invert_a_217:   
9652   41EA FD AB         swp b
9653   41EC FD 93 80      test bl, $80  
9654   41EF FD AB         swp b
9655   41F1 C6 F6 41      jz skip_invert_b_217  
9656   41F4 FD 97         neg b 
9657   41F6             skip_invert_b_217:   
9658   41F6 AC            mul a, b ; *
9659   41F7 FD 78         mov g, a
9660   41F9 11            mov a, b
9661   41FA EA            pop bl
9662   41FB FD 93 80      test bl, $80
9663   41FE C6 0B 42      jz _same_signs_217
9664   4201 2F            mov bl, al
9665   4202 95            not a
9666   4203 FD 97         neg b
9667   4205 5B 00 00      adc a, 0
9668   4208 FD 78         mov g, a
9669   420A 11            mov a, b
9670   420B             _same_signs_217:
9671   420B FD 38         mov c, g
9672   420D 27            mov b, a
9673   420E FD F1         pop g
9674   4210 E4            pop a
9675   4211             ; --- END FACTORS
9676   4211             ; --- START TERMS
9677   4211 D7            push a
9678   4212 FD D8         push g
9679   4214 11            mov a, b
9680   4215 FD 7A         mov g, c
9681   4217 FA 05 00      lea d, [bp + 5] ; $str
9682   421A 2A            mov b, [d]
9683   421B 38 00 00      mov c, 0
9684   421E 74            mov d, b
9685   421F 32            mov bl, [d]
9686   4220 A7 00         mov bh, 0
9687   4222 38 00 00      mov c, 0
9688   4225             ; --- START TERMS
9689   4225 D7            push a
9690   4226 11            mov a, b
9691   4227 FD 2E 30 00   mov32 cb, $00000030
9691   422B 00 00 
9692   422D 60            sub a, b
9693   422E 27            mov b, a
9694   422F E4            pop a
9695   4230             ; --- END TERMS
9696   4230 56            add b, a
9697   4231 FD F1         pop g
9698   4233 E4            pop a
9699   4234             ; --- END TERMS
9700   4234 E7            pop d
9701   4235 FD 43         mov [d], b
9702   4237             ; str++; 
9703   4237 FA 05 00      lea d, [bp + 5] ; $str
9704   423A 2A            mov b, [d]
9705   423B 38 00 00      mov c, 0
9706   423E FD 77         inc b
9707   4240 FA 05 00      lea d, [bp + 5] ; $str
9708   4243 FD 43         mov [d], b
9709   4245 FD 7D         dec b
9710   4247 0A 82 41      jmp _while215_cond
9711   424A             _while215_exit:
9712   424A             ; return sign * result; 
9713   424A FA FD FF      lea d, [bp + -3] ; $sign
9714   424D 2A            mov b, [d]
9715   424E 38 00 00      mov c, 0
9716   4251             ; --- START FACTORS
9717   4251 D7            push a
9718   4252 FD D8         push g
9719   4254 11            mov a, b
9720   4255 FD 7A         mov g, c
9721   4257 FA FF FF      lea d, [bp + -1] ; $result
9722   425A 2A            mov b, [d]
9723   425B 38 00 00      mov c, 0
9724   425E D7            push a     ; save left operand
9725   425F 8E            xor a, b   ; xor sign bits
9726   4260 FD AA         swp a      ; swap bytes
9727   4262 83            mov cl, al ; save result of xor into 'dl'
9728   4263 E4            pop a      ; restore left side operator
9729   4264 DF            push cl    ; save result of xor above
9730   4265 FD AA         swp a  
9731   4267 93 80         test al, $80  
9732   4269 FD AA         swp a  
9733   426B C6 70 42      jz skip_invert_a_219  
9734   426E FD 95         neg a 
9735   4270             skip_invert_a_219:   
9736   4270 FD AB         swp b
9737   4272 FD 93 80      test bl, $80  
9738   4275 FD AB         swp b
9739   4277 C6 7C 42      jz skip_invert_b_219  
9740   427A FD 97         neg b 
9741   427C             skip_invert_b_219:   
9742   427C AC            mul a, b ; *
9743   427D FD 78         mov g, a
9744   427F 11            mov a, b
9745   4280 EA            pop bl
9746   4281 FD 93 80      test bl, $80
9747   4284 C6 91 42      jz _same_signs_219
9748   4287 2F            mov bl, al
9749   4288 95            not a
9750   4289 FD 97         neg b
9751   428B 5B 00 00      adc a, 0
9752   428E FD 78         mov g, a
9753   4290 11            mov a, b
9754   4291             _same_signs_219:
9755   4291 FD 38         mov c, g
9756   4293 27            mov b, a
9757   4294 FD F1         pop g
9758   4296 E4            pop a
9759   4297             ; --- END FACTORS
9760   4297 F9            leave
9761   4298 09            ret
9762   4299             
9763   4299             printf:
9764   4299 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9765   429C             ; char *p, *format_p; 
9766   429C 52 02 00      sub sp, 2
9767   429F 52 02 00      sub sp, 2
9768   42A2             ; format_p = format; 
9769   42A2 FA FD FF      lea d, [bp + -3] ; $format_p
9770   42A5 DA            push d
9771   42A6 FA 05 00      lea d, [bp + 5] ; $format
9772   42A9 2A            mov b, [d]
9773   42AA 38 00 00      mov c, 0
9774   42AD E7            pop d
9775   42AE FD 43         mov [d], b
9776   42B0             ; p = &format + 2; 
9777   42B0 FA FF FF      lea d, [bp + -1] ; $p
9778   42B3 DA            push d
9779   42B4 FA 05 00      lea d, [bp + 5] ; $format
9780   42B7 2D            mov b, d
9781   42B8             ; --- START TERMS
9782   42B8 D7            push a
9783   42B9 11            mov a, b
9784   42BA FD 2E 02 00   mov32 cb, $00000002
9784   42BE 00 00 
9785   42C0 56            add b, a
9786   42C1 E4            pop a
9787   42C2             ; --- END TERMS
9788   42C2 E7            pop d
9789   42C3 FD 43         mov [d], b
9790   42C5             ; for(;;){ 
9791   42C5             _for220_init:
9792   42C5             _for220_cond:
9793   42C5             _for220_block:
9794   42C5             ; if(!*format_p) break; 
9795   42C5             _if221_cond:
9796   42C5 FA FD FF      lea d, [bp + -3] ; $format_p
9797   42C8 2A            mov b, [d]
9798   42C9 38 00 00      mov c, 0
9799   42CC 74            mov d, b
9800   42CD 32            mov bl, [d]
9801   42CE A7 00         mov bh, 0
9802   42D0 38 00 00      mov c, 0
9803   42D3 C0 00 00      cmp b, 0
9804   42D6 FD 71         seq ; !
9805   42D8 C0 00 00      cmp b, 0
9806   42DB C6 E4 42      je _if221_else
9807   42DE             _if221_TRUE:
9808   42DE             ; break; 
9809   42DE 0A 84 45      jmp _for220_exit ; for break
9810   42E1 0A 71 45      jmp _if221_exit
9811   42E4             _if221_else:
9812   42E4             ; if(*format_p == '%'){ 
9813   42E4             _if222_cond:
9814   42E4 FA FD FF      lea d, [bp + -3] ; $format_p
9815   42E7 2A            mov b, [d]
9816   42E8 38 00 00      mov c, 0
9817   42EB 74            mov d, b
9818   42EC 32            mov bl, [d]
9819   42ED A7 00         mov bh, 0
9820   42EF 38 00 00      mov c, 0
9821   42F2             ; --- START RELATIONAL
9822   42F2 D7            push a
9823   42F3 11            mov a, b
9824   42F4 FD 2E 25 00   mov32 cb, $00000025
9824   42F8 00 00 
9825   42FA B0            cmp a, b
9826   42FB FD 71         seq ; ==
9827   42FD E4            pop a
9828   42FE             ; --- END RELATIONAL
9829   42FE C0 00 00      cmp b, 0
9830   4301 C6 5C 45      je _if222_else
9831   4304             _if222_TRUE:
9832   4304             ; format_p++; 
9833   4304 FA FD FF      lea d, [bp + -3] ; $format_p
9834   4307 2A            mov b, [d]
9835   4308 38 00 00      mov c, 0
9836   430B FD 77         inc b
9837   430D FA FD FF      lea d, [bp + -3] ; $format_p
9838   4310 FD 43         mov [d], b
9839   4312 FD 7D         dec b
9840   4314             ; switch(*format_p){ 
9841   4314             _switch223_expr:
9842   4314 FA FD FF      lea d, [bp + -3] ; $format_p
9843   4317 2A            mov b, [d]
9844   4318 38 00 00      mov c, 0
9845   431B 74            mov d, b
9846   431C 32            mov bl, [d]
9847   431D A7 00         mov bh, 0
9848   431F 38 00 00      mov c, 0
9849   4322             _switch223_comparisons:
9850   4322 C1 6C         cmp bl, $6c
9851   4324 C6 50 43      je _switch223_case0
9852   4327 C1 4C         cmp bl, $4c
9853   4329 C6 50 43      je _switch223_case1
9854   432C C1 64         cmp bl, $64
9855   432E C6 60 44      je _switch223_case2
9856   4331 C1 69         cmp bl, $69
9857   4333 C6 60 44      je _switch223_case3
9858   4336 C1 75         cmp bl, $75
9859   4338 C6 90 44      je _switch223_case4
9860   433B C1 78         cmp bl, $78
9861   433D C6 C0 44      je _switch223_case5
9862   4340 C1 63         cmp bl, $63
9863   4342 C6 F0 44      je _switch223_case6
9864   4345 C1 73         cmp bl, $73
9865   4347 C6 20 45      je _switch223_case7
9866   434A 0A 4D 45      jmp _switch223_default
9867   434D 0A 59 45      jmp _switch223_exit
9868   4350             _switch223_case0:
9869   4350             _switch223_case1:
9870   4350             ; format_p++; 
9871   4350 FA FD FF      lea d, [bp + -3] ; $format_p
9872   4353 2A            mov b, [d]
9873   4354 38 00 00      mov c, 0
9874   4357 FD 77         inc b
9875   4359 FA FD FF      lea d, [bp + -3] ; $format_p
9876   435C FD 43         mov [d], b
9877   435E FD 7D         dec b
9878   4360             ; if(*format_p == 'd' || *format_p == 'i') 
9879   4360             _if224_cond:
9880   4360 FA FD FF      lea d, [bp + -3] ; $format_p
9881   4363 2A            mov b, [d]
9882   4364 38 00 00      mov c, 0
9883   4367 74            mov d, b
9884   4368 32            mov bl, [d]
9885   4369 A7 00         mov bh, 0
9886   436B 38 00 00      mov c, 0
9887   436E             ; --- START RELATIONAL
9888   436E D7            push a
9889   436F 11            mov a, b
9890   4370 FD 2E 64 00   mov32 cb, $00000064
9890   4374 00 00 
9891   4376 B0            cmp a, b
9892   4377 FD 71         seq ; ==
9893   4379 E4            pop a
9894   437A             ; --- END RELATIONAL
9895   437A             ; --- START LOGICAL OR
9896   437A D7            push a
9897   437B 11            mov a, b
9898   437C FA FD FF      lea d, [bp + -3] ; $format_p
9899   437F 2A            mov b, [d]
9900   4380 38 00 00      mov c, 0
9901   4383 74            mov d, b
9902   4384 32            mov bl, [d]
9903   4385 A7 00         mov bh, 0
9904   4387 38 00 00      mov c, 0
9905   438A             ; --- START RELATIONAL
9906   438A D7            push a
9907   438B 11            mov a, b
9908   438C FD 2E 69 00   mov32 cb, $00000069
9908   4390 00 00 
9909   4392 B0            cmp a, b
9910   4393 FD 71         seq ; ==
9911   4395 E4            pop a
9912   4396             ; --- END RELATIONAL
9913   4396 FD A8         sor a, b ; ||
9914   4398 E4            pop a
9915   4399             ; --- END LOGICAL OR
9916   4399 C0 00 00      cmp b, 0
9917   439C C6 BD 43      je _if224_else
9918   439F             _if224_TRUE:
9919   439F             ; print_signed_long(*(long *)p); 
9920   439F             ; --- START FUNCTION CALL
9921   439F FA FF FF      lea d, [bp + -1] ; $p
9922   43A2 2A            mov b, [d]
9923   43A3 38 00 00      mov c, 0
9924   43A6 74            mov d, b
9925   43A7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9926   43AA FD 39         mov c, b ; And place it into C
9927   43AC 2A            mov b, [d] ; Lower Word in B
9928   43AD 12            mov a, c
9929   43AE FD AA         swp a
9930   43B0 D7            push a
9931   43B1 FD AB         swp b
9932   43B3 D8            push b
9933   43B4 07 86 45      call print_signed_long
9934   43B7 51 04 00      add sp, 4
9935   43BA             ; --- END FUNCTION CALL
9936   43BA 0A 45 44      jmp _if224_exit
9937   43BD             _if224_else:
9938   43BD             ; if(*format_p == 'u') 
9939   43BD             _if225_cond:
9940   43BD FA FD FF      lea d, [bp + -3] ; $format_p
9941   43C0 2A            mov b, [d]
9942   43C1 38 00 00      mov c, 0
9943   43C4 74            mov d, b
9944   43C5 32            mov bl, [d]
9945   43C6 A7 00         mov bh, 0
9946   43C8 38 00 00      mov c, 0
9947   43CB             ; --- START RELATIONAL
9948   43CB D7            push a
9949   43CC 11            mov a, b
9950   43CD FD 2E 75 00   mov32 cb, $00000075
9950   43D1 00 00 
9951   43D3 B0            cmp a, b
9952   43D4 FD 71         seq ; ==
9953   43D6 E4            pop a
9954   43D7             ; --- END RELATIONAL
9955   43D7 C0 00 00      cmp b, 0
9956   43DA C6 FB 43      je _if225_else
9957   43DD             _if225_TRUE:
9958   43DD             ; print_unsigned_long(*(unsigned long *)p); 
9959   43DD             ; --- START FUNCTION CALL
9960   43DD FA FF FF      lea d, [bp + -1] ; $p
9961   43E0 2A            mov b, [d]
9962   43E1 38 00 00      mov c, 0
9963   43E4 74            mov d, b
9964   43E5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9965   43E8 FD 39         mov c, b ; And place it into C
9966   43EA 2A            mov b, [d] ; Lower Word in B
9967   43EB 12            mov a, c
9968   43EC FD AA         swp a
9969   43EE D7            push a
9970   43EF FD AB         swp b
9971   43F1 D8            push b
9972   43F2 07 26 47      call print_unsigned_long
9973   43F5 51 04 00      add sp, 4
9974   43F8             ; --- END FUNCTION CALL
9975   43F8 0A 45 44      jmp _if225_exit
9976   43FB             _if225_else:
9977   43FB             ; if(*format_p == 'x') 
9978   43FB             _if226_cond:
9979   43FB FA FD FF      lea d, [bp + -3] ; $format_p
9980   43FE 2A            mov b, [d]
9981   43FF 38 00 00      mov c, 0
9982   4402 74            mov d, b
9983   4403 32            mov bl, [d]
9984   4404 A7 00         mov bh, 0
9985   4406 38 00 00      mov c, 0
9986   4409             ; --- START RELATIONAL
9987   4409 D7            push a
9988   440A 11            mov a, b
9989   440B FD 2E 78 00   mov32 cb, $00000078
9989   440F 00 00 
9990   4411 B0            cmp a, b
9991   4412 FD 71         seq ; ==
9992   4414 E4            pop a
9993   4415             ; --- END RELATIONAL
9994   4415 C0 00 00      cmp b, 0
9995   4418 C6 39 44      je _if226_else
9996   441B             _if226_TRUE:
9997   441B             ; printx32(*(long int *)p); 
9998   441B             ; --- START FUNCTION CALL
9999   441B FA FF FF      lea d, [bp + -1] ; $p
10000  441E 2A            mov b, [d]
10001  441F 38 00 00      mov c, 0
10002  4422 74            mov d, b
10003  4423 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10004  4426 FD 39         mov c, b ; And place it into C
10005  4428 2A            mov b, [d] ; Lower Word in B
10006  4429 12            mov a, c
10007  442A FD AA         swp a
10008  442C D7            push a
10009  442D FD AB         swp b
10010  442F D8            push b
10011  4430 07 64 48      call printx32
10012  4433 51 04 00      add sp, 4
10013  4436             ; --- END FUNCTION CALL
10014  4436 0A 45 44      jmp _if226_exit
10015  4439             _if226_else:
10016  4439             ; err("Unexpected format in printf."); 
10017  4439             ; --- START FUNCTION CALL
10018  4439 26 C1 53      mov b, _s82 ; "Unexpected format in printf."
10019  443C FD AB         swp b
10020  443E D8            push b
10021  443F 07 C4 48      call err
10022  4442 51 02 00      add sp, 2
10023  4445             ; --- END FUNCTION CALL
10024  4445             _if226_exit:
10025  4445             _if225_exit:
10026  4445             _if224_exit:
10027  4445             ; p = p + 4; 
10028  4445 FA FF FF      lea d, [bp + -1] ; $p
10029  4448 DA            push d
10030  4449 FA FF FF      lea d, [bp + -1] ; $p
10031  444C 2A            mov b, [d]
10032  444D 38 00 00      mov c, 0
10033  4450             ; --- START TERMS
10034  4450 D7            push a
10035  4451 11            mov a, b
10036  4452 FD 2E 04 00   mov32 cb, $00000004
10036  4456 00 00 
10037  4458 56            add b, a
10038  4459 E4            pop a
10039  445A             ; --- END TERMS
10040  445A E7            pop d
10041  445B FD 43         mov [d], b
10042  445D             ; break; 
10043  445D 0A 59 45      jmp _switch223_exit ; case break
10044  4460             _switch223_case2:
10045  4460             _switch223_case3:
10046  4460             ; print_signed(*(int*)p); 
10047  4460             ; --- START FUNCTION CALL
10048  4460 FA FF FF      lea d, [bp + -1] ; $p
10049  4463 2A            mov b, [d]
10050  4464 38 00 00      mov c, 0
10051  4467 74            mov d, b
10052  4468 2A            mov b, [d]
10053  4469 38 00 00      mov c, 0
10054  446C FD AB         swp b
10055  446E D8            push b
10056  446F 07 D9 48      call print_signed
10057  4472 51 02 00      add sp, 2
10058  4475             ; --- END FUNCTION CALL
10059  4475             ; p = p + 2; 
10060  4475 FA FF FF      lea d, [bp + -1] ; $p
10061  4478 DA            push d
10062  4479 FA FF FF      lea d, [bp + -1] ; $p
10063  447C 2A            mov b, [d]
10064  447D 38 00 00      mov c, 0
10065  4480             ; --- START TERMS
10066  4480 D7            push a
10067  4481 11            mov a, b
10068  4482 FD 2E 02 00   mov32 cb, $00000002
10068  4486 00 00 
10069  4488 56            add b, a
10070  4489 E4            pop a
10071  448A             ; --- END TERMS
10072  448A E7            pop d
10073  448B FD 43         mov [d], b
10074  448D             ; break; 
10075  448D 0A 59 45      jmp _switch223_exit ; case break
10076  4490             _switch223_case4:
10077  4490             ; print_unsigned(*(unsigned int*)p); 
10078  4490             ; --- START FUNCTION CALL
10079  4490 FA FF FF      lea d, [bp + -1] ; $p
10080  4493 2A            mov b, [d]
10081  4494 38 00 00      mov c, 0
10082  4497 74            mov d, b
10083  4498 2A            mov b, [d]
10084  4499 38 00 00      mov c, 0
10085  449C FD AB         swp b
10086  449E D8            push b
10087  449F 07 2A 4A      call print_unsigned
10088  44A2 51 02 00      add sp, 2
10089  44A5             ; --- END FUNCTION CALL
10090  44A5             ; p = p + 2; 
10091  44A5 FA FF FF      lea d, [bp + -1] ; $p
10092  44A8 DA            push d
10093  44A9 FA FF FF      lea d, [bp + -1] ; $p
10094  44AC 2A            mov b, [d]
10095  44AD 38 00 00      mov c, 0
10096  44B0             ; --- START TERMS
10097  44B0 D7            push a
10098  44B1 11            mov a, b
10099  44B2 FD 2E 02 00   mov32 cb, $00000002
10099  44B6 00 00 
10100  44B8 56            add b, a
10101  44B9 E4            pop a
10102  44BA             ; --- END TERMS
10103  44BA E7            pop d
10104  44BB FD 43         mov [d], b
10105  44BD             ; break; 
10106  44BD 0A 59 45      jmp _switch223_exit ; case break
10107  44C0             _switch223_case5:
10108  44C0             ; printx16(*(int*)p); 
10109  44C0             ; --- START FUNCTION CALL
10110  44C0 FA FF FF      lea d, [bp + -1] ; $p
10111  44C3 2A            mov b, [d]
10112  44C4 38 00 00      mov c, 0
10113  44C7 74            mov d, b
10114  44C8 2A            mov b, [d]
10115  44C9 38 00 00      mov c, 0
10116  44CC FD AB         swp b
10117  44CE D8            push b
10118  44CF 07 42 4B      call printx16
10119  44D2 51 02 00      add sp, 2
10120  44D5             ; --- END FUNCTION CALL
10121  44D5             ; p = p + 2; 
10122  44D5 FA FF FF      lea d, [bp + -1] ; $p
10123  44D8 DA            push d
10124  44D9 FA FF FF      lea d, [bp + -1] ; $p
10125  44DC 2A            mov b, [d]
10126  44DD 38 00 00      mov c, 0
10127  44E0             ; --- START TERMS
10128  44E0 D7            push a
10129  44E1 11            mov a, b
10130  44E2 FD 2E 02 00   mov32 cb, $00000002
10130  44E6 00 00 
10131  44E8 56            add b, a
10132  44E9 E4            pop a
10133  44EA             ; --- END TERMS
10134  44EA E7            pop d
10135  44EB FD 43         mov [d], b
10136  44ED             ; break; 
10137  44ED 0A 59 45      jmp _switch223_exit ; case break
10138  44F0             _switch223_case6:
10139  44F0             ; putchar(*(char*)p); 
10140  44F0             ; --- START FUNCTION CALL
10141  44F0 FA FF FF      lea d, [bp + -1] ; $p
10142  44F3 2A            mov b, [d]
10143  44F4 38 00 00      mov c, 0
10144  44F7 74            mov d, b
10145  44F8 32            mov bl, [d]
10146  44F9 A7 00         mov bh, 0
10147  44FB 38 00 00      mov c, 0
10148  44FE DD            push bl
10149  44FF 07 18 47      call putchar
10150  4502 51 01 00      add sp, 1
10151  4505             ; --- END FUNCTION CALL
10152  4505             ; p = p + 2; 
10153  4505 FA FF FF      lea d, [bp + -1] ; $p
10154  4508 DA            push d
10155  4509 FA FF FF      lea d, [bp + -1] ; $p
10156  450C 2A            mov b, [d]
10157  450D 38 00 00      mov c, 0
10158  4510             ; --- START TERMS
10159  4510 D7            push a
10160  4511 11            mov a, b
10161  4512 FD 2E 02 00   mov32 cb, $00000002
10161  4516 00 00 
10162  4518 56            add b, a
10163  4519 E4            pop a
10164  451A             ; --- END TERMS
10165  451A E7            pop d
10166  451B FD 43         mov [d], b
10167  451D             ; break; 
10168  451D 0A 59 45      jmp _switch223_exit ; case break
10169  4520             _switch223_case7:
10170  4520             ; print(*(char**)p); 
10171  4520             ; --- START FUNCTION CALL
10172  4520 FA FF FF      lea d, [bp + -1] ; $p
10173  4523 2A            mov b, [d]
10174  4524 38 00 00      mov c, 0
10175  4527 74            mov d, b
10176  4528 2A            mov b, [d]
10177  4529 FD AB         swp b
10178  452B D8            push b
10179  452C 07 69 3E      call print
10180  452F 51 02 00      add sp, 2
10181  4532             ; --- END FUNCTION CALL
10182  4532             ; p = p + 2; 
10183  4532 FA FF FF      lea d, [bp + -1] ; $p
10184  4535 DA            push d
10185  4536 FA FF FF      lea d, [bp + -1] ; $p
10186  4539 2A            mov b, [d]
10187  453A 38 00 00      mov c, 0
10188  453D             ; --- START TERMS
10189  453D D7            push a
10190  453E 11            mov a, b
10191  453F FD 2E 02 00   mov32 cb, $00000002
10191  4543 00 00 
10192  4545 56            add b, a
10193  4546 E4            pop a
10194  4547             ; --- END TERMS
10195  4547 E7            pop d
10196  4548 FD 43         mov [d], b
10197  454A             ; break; 
10198  454A 0A 59 45      jmp _switch223_exit ; case break
10199  454D             _switch223_default:
10200  454D             ; print("Error: Unknown argument type.\n"); 
10201  454D             ; --- START FUNCTION CALL
10202  454D 26 DE 53      mov b, _s83 ; "Error: Unknown argument type.\n"
10203  4550 FD AB         swp b
10204  4552 D8            push b
10205  4553 07 69 3E      call print
10206  4556 51 02 00      add sp, 2
10207  4559             ; --- END FUNCTION CALL
10208  4559             _switch223_exit:
10209  4559 0A 71 45      jmp _if222_exit
10210  455C             _if222_else:
10211  455C             ; putchar(*format_p); 
10212  455C             ; --- START FUNCTION CALL
10213  455C FA FD FF      lea d, [bp + -3] ; $format_p
10214  455F 2A            mov b, [d]
10215  4560 38 00 00      mov c, 0
10216  4563 74            mov d, b
10217  4564 32            mov bl, [d]
10218  4565 A7 00         mov bh, 0
10219  4567 38 00 00      mov c, 0
10220  456A DD            push bl
10221  456B 07 18 47      call putchar
10222  456E 51 01 00      add sp, 1
10223  4571             ; --- END FUNCTION CALL
10224  4571             _if222_exit:
10225  4571             _if221_exit:
10226  4571             ; format_p++; 
10227  4571 FA FD FF      lea d, [bp + -3] ; $format_p
10228  4574 2A            mov b, [d]
10229  4575 38 00 00      mov c, 0
10230  4578 FD 77         inc b
10231  457A FA FD FF      lea d, [bp + -3] ; $format_p
10232  457D FD 43         mov [d], b
10233  457F FD 7D         dec b
10234  4581             _for220_update:
10235  4581 0A C5 42      jmp _for220_cond
10236  4584             _for220_exit:
10237  4584 F9            leave
10238  4585 09            ret
10239  4586             
10240  4586             print_signed_long:
10241  4586 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10242  4589             ; char digits[10]; 
10243  4589 52 0A 00      sub sp, 10
10244  458C             ; int i = 0; 
10245  458C 52 02 00      sub sp, 2
10246  458F             ; --- START LOCAL VAR INITIALIZATION
10247  458F FA F5 FF      lea d, [bp + -11] ; $i
10248  4592 DA            push d
10249  4593 FD 2E 00 00   mov32 cb, $00000000
10249  4597 00 00 
10250  4599 E7            pop d
10251  459A FD 43         mov [d], b
10252  459C             ; --- END LOCAL VAR INITIALIZATION
10253  459C             ; if (num < 0) { 
10254  459C             _if227_cond:
10255  459C FA 05 00      lea d, [bp + 5] ; $num
10256  459F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10257  45A2 FD 39         mov c, b ; And place it into C
10258  45A4 2A            mov b, [d] ; Lower Word in B
10259  45A5             ; --- START RELATIONAL
10260  45A5 D7            push a
10261  45A6 FD D8         push g
10262  45A8 11            mov a, b
10263  45A9 FD 7A         mov g, c
10264  45AB FD 2E 00 00   mov32 cb, $00000000
10264  45AF 00 00 
10265  45B1 38 00 00      mov c, 0
10266  45B4 FD AF         cmp32 ga, cb
10267  45B6 FD 73         slt ; <
10268  45B8 FD F1         pop g
10269  45BA E4            pop a
10270  45BB             ; --- END RELATIONAL
10271  45BB C0 00 00      cmp b, 0
10272  45BE C6 F0 45      je _if227_else
10273  45C1             _if227_TRUE:
10274  45C1             ; putchar('-'); 
10275  45C1             ; --- START FUNCTION CALL
10276  45C1 FD 2E 2D 00   mov32 cb, $0000002d
10276  45C5 00 00 
10277  45C7 DD            push bl
10278  45C8 07 18 47      call putchar
10279  45CB 51 01 00      add sp, 1
10280  45CE             ; --- END FUNCTION CALL
10281  45CE             ; num = -num; 
10282  45CE FA 05 00      lea d, [bp + 5] ; $num
10283  45D1 DA            push d
10284  45D2 FA 05 00      lea d, [bp + 5] ; $num
10285  45D5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10286  45D8 FD 39         mov c, b ; And place it into C
10287  45DA 2A            mov b, [d] ; Lower Word in B
10288  45DB 12            mov a, c
10289  45DC 95            not a
10290  45DD 97            not b
10291  45DE 55 01 00      add b, 1
10292  45E1 5B 00 00      adc a, 0
10293  45E4 39            mov c, a
10294  45E5 E7            pop d
10295  45E6 FD 43         mov [d], b
10296  45E8 28            mov b, c
10297  45E9 FD 44 02 00   mov [d + 2], b
10298  45ED 0A 27 46      jmp _if227_exit
10299  45F0             _if227_else:
10300  45F0             ; if (num == 0) { 
10301  45F0             _if228_cond:
10302  45F0 FA 05 00      lea d, [bp + 5] ; $num
10303  45F3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10304  45F6 FD 39         mov c, b ; And place it into C
10305  45F8 2A            mov b, [d] ; Lower Word in B
10306  45F9             ; --- START RELATIONAL
10307  45F9 D7            push a
10308  45FA FD D8         push g
10309  45FC 11            mov a, b
10310  45FD FD 7A         mov g, c
10311  45FF FD 2E 00 00   mov32 cb, $00000000
10311  4603 00 00 
10312  4605 38 00 00      mov c, 0
10313  4608 FD AF         cmp32 ga, cb
10314  460A FD 71         seq ; ==
10315  460C FD F1         pop g
10316  460E E4            pop a
10317  460F             ; --- END RELATIONAL
10318  460F C0 00 00      cmp b, 0
10319  4612 C6 27 46      je _if228_exit
10320  4615             _if228_TRUE:
10321  4615             ; putchar('0'); 
10322  4615             ; --- START FUNCTION CALL
10323  4615 FD 2E 30 00   mov32 cb, $00000030
10323  4619 00 00 
10324  461B DD            push bl
10325  461C 07 18 47      call putchar
10326  461F 51 01 00      add sp, 1
10327  4622             ; --- END FUNCTION CALL
10328  4622             ; return; 
10329  4622 F9            leave
10330  4623 09            ret
10331  4624 0A 27 46      jmp _if228_exit
10332  4627             _if228_exit:
10333  4627             _if227_exit:
10334  4627             ; while (num > 0) { 
10335  4627             _while229_cond:
10336  4627 FA 05 00      lea d, [bp + 5] ; $num
10337  462A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10338  462D FD 39         mov c, b ; And place it into C
10339  462F 2A            mov b, [d] ; Lower Word in B
10340  4630             ; --- START RELATIONAL
10341  4630 D7            push a
10342  4631 FD D8         push g
10343  4633 11            mov a, b
10344  4634 FD 7A         mov g, c
10345  4636 FD 2E 00 00   mov32 cb, $00000000
10345  463A 00 00 
10346  463C 38 00 00      mov c, 0
10347  463F FD AF         cmp32 ga, cb
10348  4641 FD 7F         sgt
10349  4643 FD F1         pop g
10350  4645 E4            pop a
10351  4646             ; --- END RELATIONAL
10352  4646 C0 00 00      cmp b, 0
10353  4649 C6 CE 46      je _while229_exit
10354  464C             _while229_block:
10355  464C             ; digits[i] = '0' + (num % 10); 
10356  464C FA F7 FF      lea d, [bp + -9] ; $digits
10357  464F D7            push a
10358  4650 DA            push d
10359  4651 FA F5 FF      lea d, [bp + -11] ; $i
10360  4654 2A            mov b, [d]
10361  4655 38 00 00      mov c, 0
10362  4658 E7            pop d
10363  4659 5A            add d, b
10364  465A E4            pop a
10365  465B DA            push d
10366  465C FD 2E 30 00   mov32 cb, $00000030
10366  4660 00 00 
10367  4662             ; --- START TERMS
10368  4662 D7            push a
10369  4663 11            mov a, b
10370  4664 FA 05 00      lea d, [bp + 5] ; $num
10371  4667 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10372  466A FD 39         mov c, b ; And place it into C
10373  466C 2A            mov b, [d] ; Lower Word in B
10374  466D             ; --- START FACTORS
10375  466D D7            push a
10376  466E FD D8         push g
10377  4670 11            mov a, b
10378  4671 FD 7A         mov g, c
10379  4673 FD 2E 0A 00   mov32 cb, $0000000a
10379  4677 00 00 
10380  4679 FD D8         push g ; save 'g' as the div instruction uses it
10381  467B AE            div a, b ; %, a: quotient, b: remainder
10382  467C 11            mov a, b
10383  467D FD F1         pop g
10384  467F FD 38         mov c, g
10385  4681 27            mov b, a
10386  4682 FD F1         pop g
10387  4684 E4            pop a
10388  4685             ; --- END FACTORS
10389  4685 FD 22 00 00   mov g, 0
10390  4689 FD 15         add32 cb, ga
10391  468B E4            pop a
10392  468C             ; --- END TERMS
10393  468C E7            pop d
10394  468D FD 3E         mov [d], bl
10395  468F             ; num = num / 10; 
10396  468F FA 05 00      lea d, [bp + 5] ; $num
10397  4692 DA            push d
10398  4693 FA 05 00      lea d, [bp + 5] ; $num
10399  4696 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10400  4699 FD 39         mov c, b ; And place it into C
10401  469B 2A            mov b, [d] ; Lower Word in B
10402  469C             ; --- START FACTORS
10403  469C D7            push a
10404  469D FD D8         push g
10405  469F 11            mov a, b
10406  46A0 FD 7A         mov g, c
10407  46A2 FD 2E 0A 00   mov32 cb, $0000000a
10407  46A6 00 00 
10408  46A8 FD D8         push g ; save 'g' as the div instruction uses it
10409  46AA AE            div a, b ; /, a: quotient, b: remainder
10410  46AB FD F1         pop g
10411  46AD FD 38         mov c, g
10412  46AF 27            mov b, a
10413  46B0 FD F1         pop g
10414  46B2 E4            pop a
10415  46B3             ; --- END FACTORS
10416  46B3 E7            pop d
10417  46B4 FD 43         mov [d], b
10418  46B6 28            mov b, c
10419  46B7 FD 44 02 00   mov [d + 2], b
10420  46BB             ; i++; 
10421  46BB FA F5 FF      lea d, [bp + -11] ; $i
10422  46BE 2A            mov b, [d]
10423  46BF 38 00 00      mov c, 0
10424  46C2 11            mov a, b
10425  46C3 FD 77         inc b
10426  46C5 FA F5 FF      lea d, [bp + -11] ; $i
10427  46C8 FD 43         mov [d], b
10428  46CA 27            mov b, a
10429  46CB 0A 27 46      jmp _while229_cond
10430  46CE             _while229_exit:
10431  46CE             ; while (i > 0) { 
10432  46CE             _while236_cond:
10433  46CE FA F5 FF      lea d, [bp + -11] ; $i
10434  46D1 2A            mov b, [d]
10435  46D2 38 00 00      mov c, 0
10436  46D5             ; --- START RELATIONAL
10437  46D5 D7            push a
10438  46D6 11            mov a, b
10439  46D7 FD 2E 00 00   mov32 cb, $00000000
10439  46DB 00 00 
10440  46DD B0            cmp a, b
10441  46DE FD 7F         sgt ; >
10442  46E0 E4            pop a
10443  46E1             ; --- END RELATIONAL
10444  46E1 C0 00 00      cmp b, 0
10445  46E4 C6 16 47      je _while236_exit
10446  46E7             _while236_block:
10447  46E7             ; i--; 
10448  46E7 FA F5 FF      lea d, [bp + -11] ; $i
10449  46EA 2A            mov b, [d]
10450  46EB 38 00 00      mov c, 0
10451  46EE 11            mov a, b
10452  46EF FD 7D         dec b
10453  46F1 FA F5 FF      lea d, [bp + -11] ; $i
10454  46F4 FD 43         mov [d], b
10455  46F6 27            mov b, a
10456  46F7             ; putchar(digits[i]); 
10457  46F7             ; --- START FUNCTION CALL
10458  46F7 FA F7 FF      lea d, [bp + -9] ; $digits
10459  46FA D7            push a
10460  46FB DA            push d
10461  46FC FA F5 FF      lea d, [bp + -11] ; $i
10462  46FF 2A            mov b, [d]
10463  4700 38 00 00      mov c, 0
10464  4703 E7            pop d
10465  4704 5A            add d, b
10466  4705 E4            pop a
10467  4706 32            mov bl, [d]
10468  4707 A7 00         mov bh, 0
10469  4709 38 00 00      mov c, 0
10470  470C DD            push bl
10471  470D 07 18 47      call putchar
10472  4710 51 01 00      add sp, 1
10473  4713             ; --- END FUNCTION CALL
10474  4713 0A CE 46      jmp _while236_cond
10475  4716             _while236_exit:
10476  4716 F9            leave
10477  4717 09            ret
10478  4718             
10479  4718             putchar:
10480  4718 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10481  471B             ; --- BEGIN INLINE ASM SEGMENT
10482  471B FA 05 00      lea d, [bp + 5] ; $c
10483  471E 1E            mov al, [d]
10484  471F 23            mov ah, al
10485  4720 19 00         mov al, 0
10486  4722 05 03         syscall sys_io      ; char in AH
10487  4724             ; --- END INLINE ASM SEGMENT
10488  4724 F9            leave
10489  4725 09            ret
10490  4726             
10491  4726             print_unsigned_long:
10492  4726 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10493  4729             ; char digits[10]; 
10494  4729 52 0A 00      sub sp, 10
10495  472C             ; int i; 
10496  472C 52 02 00      sub sp, 2
10497  472F             ; i = 0; 
10498  472F FA F5 FF      lea d, [bp + -11] ; $i
10499  4732 DA            push d
10500  4733 FD 2E 00 00   mov32 cb, $00000000
10500  4737 00 00 
10501  4739 E7            pop d
10502  473A FD 43         mov [d], b
10503  473C             ; if(num == 0){ 
10504  473C             _if237_cond:
10505  473C FA 05 00      lea d, [bp + 5] ; $num
10506  473F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10507  4742 FD 39         mov c, b ; And place it into C
10508  4744 2A            mov b, [d] ; Lower Word in B
10509  4745             ; --- START RELATIONAL
10510  4745 D7            push a
10511  4746 FD D8         push g
10512  4748 11            mov a, b
10513  4749 FD 7A         mov g, c
10514  474B FD 2E 00 00   mov32 cb, $00000000
10514  474F 00 00 
10515  4751 38 00 00      mov c, 0
10516  4754 FD AF         cmp32 ga, cb
10517  4756 FD 71         seq ; ==
10518  4758 FD F1         pop g
10519  475A E4            pop a
10520  475B             ; --- END RELATIONAL
10521  475B C0 00 00      cmp b, 0
10522  475E C6 73 47      je _if237_exit
10523  4761             _if237_TRUE:
10524  4761             ; putchar('0'); 
10525  4761             ; --- START FUNCTION CALL
10526  4761 FD 2E 30 00   mov32 cb, $00000030
10526  4765 00 00 
10527  4767 DD            push bl
10528  4768 07 18 47      call putchar
10529  476B 51 01 00      add sp, 1
10530  476E             ; --- END FUNCTION CALL
10531  476E             ; return; 
10532  476E F9            leave
10533  476F 09            ret
10534  4770 0A 73 47      jmp _if237_exit
10535  4773             _if237_exit:
10536  4773             ; while (num > 0) { 
10537  4773             _while238_cond:
10538  4773 FA 05 00      lea d, [bp + 5] ; $num
10539  4776 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10540  4779 FD 39         mov c, b ; And place it into C
10541  477B 2A            mov b, [d] ; Lower Word in B
10542  477C             ; --- START RELATIONAL
10543  477C D7            push a
10544  477D FD D8         push g
10545  477F 11            mov a, b
10546  4780 FD 7A         mov g, c
10547  4782 FD 2E 00 00   mov32 cb, $00000000
10547  4786 00 00 
10548  4788 38 00 00      mov c, 0
10549  478B FD AF         cmp32 ga, cb
10550  478D FD 81         sgu
10551  478F FD F1         pop g
10552  4791 E4            pop a
10553  4792             ; --- END RELATIONAL
10554  4792 C0 00 00      cmp b, 0
10555  4795 C6 1A 48      je _while238_exit
10556  4798             _while238_block:
10557  4798             ; digits[i] = '0' + (num % 10); 
10558  4798 FA F7 FF      lea d, [bp + -9] ; $digits
10559  479B D7            push a
10560  479C DA            push d
10561  479D FA F5 FF      lea d, [bp + -11] ; $i
10562  47A0 2A            mov b, [d]
10563  47A1 38 00 00      mov c, 0
10564  47A4 E7            pop d
10565  47A5 5A            add d, b
10566  47A6 E4            pop a
10567  47A7 DA            push d
10568  47A8 FD 2E 30 00   mov32 cb, $00000030
10568  47AC 00 00 
10569  47AE             ; --- START TERMS
10570  47AE D7            push a
10571  47AF 11            mov a, b
10572  47B0 FA 05 00      lea d, [bp + 5] ; $num
10573  47B3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10574  47B6 FD 39         mov c, b ; And place it into C
10575  47B8 2A            mov b, [d] ; Lower Word in B
10576  47B9             ; --- START FACTORS
10577  47B9 D7            push a
10578  47BA FD D8         push g
10579  47BC 11            mov a, b
10580  47BD FD 7A         mov g, c
10581  47BF FD 2E 0A 00   mov32 cb, $0000000a
10581  47C3 00 00 
10582  47C5 FD D8         push g ; save 'g' as the div instruction uses it
10583  47C7 AE            div a, b ; %, a: quotient, b: remainder
10584  47C8 11            mov a, b
10585  47C9 FD F1         pop g
10586  47CB FD 38         mov c, g
10587  47CD 27            mov b, a
10588  47CE FD F1         pop g
10589  47D0 E4            pop a
10590  47D1             ; --- END FACTORS
10591  47D1 FD 22 00 00   mov g, 0
10592  47D5 FD 15         add32 cb, ga
10593  47D7 E4            pop a
10594  47D8             ; --- END TERMS
10595  47D8 E7            pop d
10596  47D9 FD 3E         mov [d], bl
10597  47DB             ; num = num / 10; 
10598  47DB FA 05 00      lea d, [bp + 5] ; $num
10599  47DE DA            push d
10600  47DF FA 05 00      lea d, [bp + 5] ; $num
10601  47E2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10602  47E5 FD 39         mov c, b ; And place it into C
10603  47E7 2A            mov b, [d] ; Lower Word in B
10604  47E8             ; --- START FACTORS
10605  47E8 D7            push a
10606  47E9 FD D8         push g
10607  47EB 11            mov a, b
10608  47EC FD 7A         mov g, c
10609  47EE FD 2E 0A 00   mov32 cb, $0000000a
10609  47F2 00 00 
10610  47F4 FD D8         push g ; save 'g' as the div instruction uses it
10611  47F6 AE            div a, b ; /, a: quotient, b: remainder
10612  47F7 FD F1         pop g
10613  47F9 FD 38         mov c, g
10614  47FB 27            mov b, a
10615  47FC FD F1         pop g
10616  47FE E4            pop a
10617  47FF             ; --- END FACTORS
10618  47FF E7            pop d
10619  4800 FD 43         mov [d], b
10620  4802 28            mov b, c
10621  4803 FD 44 02 00   mov [d + 2], b
10622  4807             ; i++; 
10623  4807 FA F5 FF      lea d, [bp + -11] ; $i
10624  480A 2A            mov b, [d]
10625  480B 38 00 00      mov c, 0
10626  480E 11            mov a, b
10627  480F FD 77         inc b
10628  4811 FA F5 FF      lea d, [bp + -11] ; $i
10629  4814 FD 43         mov [d], b
10630  4816 27            mov b, a
10631  4817 0A 73 47      jmp _while238_cond
10632  481A             _while238_exit:
10633  481A             ; while (i > 0) { 
10634  481A             _while245_cond:
10635  481A FA F5 FF      lea d, [bp + -11] ; $i
10636  481D 2A            mov b, [d]
10637  481E 38 00 00      mov c, 0
10638  4821             ; --- START RELATIONAL
10639  4821 D7            push a
10640  4822 11            mov a, b
10641  4823 FD 2E 00 00   mov32 cb, $00000000
10641  4827 00 00 
10642  4829 B0            cmp a, b
10643  482A FD 7F         sgt ; >
10644  482C E4            pop a
10645  482D             ; --- END RELATIONAL
10646  482D C0 00 00      cmp b, 0
10647  4830 C6 62 48      je _while245_exit
10648  4833             _while245_block:
10649  4833             ; i--; 
10650  4833 FA F5 FF      lea d, [bp + -11] ; $i
10651  4836 2A            mov b, [d]
10652  4837 38 00 00      mov c, 0
10653  483A 11            mov a, b
10654  483B FD 7D         dec b
10655  483D FA F5 FF      lea d, [bp + -11] ; $i
10656  4840 FD 43         mov [d], b
10657  4842 27            mov b, a
10658  4843             ; putchar(digits[i]); 
10659  4843             ; --- START FUNCTION CALL
10660  4843 FA F7 FF      lea d, [bp + -9] ; $digits
10661  4846 D7            push a
10662  4847 DA            push d
10663  4848 FA F5 FF      lea d, [bp + -11] ; $i
10664  484B 2A            mov b, [d]
10665  484C 38 00 00      mov c, 0
10666  484F E7            pop d
10667  4850 5A            add d, b
10668  4851 E4            pop a
10669  4852 32            mov bl, [d]
10670  4853 A7 00         mov bh, 0
10671  4855 38 00 00      mov c, 0
10672  4858 DD            push bl
10673  4859 07 18 47      call putchar
10674  485C 51 01 00      add sp, 1
10675  485F             ; --- END FUNCTION CALL
10676  485F 0A 1A 48      jmp _while245_cond
10677  4862             _while245_exit:
10678  4862 F9            leave
10679  4863 09            ret
10680  4864             
10681  4864             printx32:
10682  4864 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10683  4867             ; --- BEGIN INLINE ASM SEGMENT
10684  4867 FA 05 00      lea d, [bp + 5] ; $hex
10685  486A 2B 02 00      mov b, [d+2]
10686  486D 07 76 48      call print_u16x_printx32
10687  4870 2A            mov b, [d]
10688  4871 07 76 48      call print_u16x_printx32
10689  4874             ; --- END INLINE ASM SEGMENT
10690  4874             ; return; 
10691  4874 F9            leave
10692  4875 09            ret
10693  4876             ; --- BEGIN INLINE ASM SEGMENT
10694  4876             print_u16x_printx32:
10695  4876 D7            push a
10696  4877 D8            push b
10697  4878 DD            push bl
10698  4879 30            mov bl, bh
10699  487A 07 98 48      call _itoa_printx32        ; convert bh to char in A
10700  487D 2F            mov bl, al        ; save al
10701  487E 19 00         mov al, 0
10702  4880 05 03         syscall sys_io        ; display AH
10703  4882 24            mov ah, bl        ; retrieve al
10704  4883 19 00         mov al, 0
10705  4885 05 03         syscall sys_io        ; display AL
10706  4887 EA            pop bl
10707  4888 07 98 48      call _itoa_printx32        ; convert bh to char in A
10708  488B 2F            mov bl, al        ; save al
10709  488C 19 00         mov al, 0
10710  488E 05 03         syscall sys_io        ; display AH
10711  4890 24            mov ah, bl        ; retrieve al
10712  4891 19 00         mov al, 0
10713  4893 05 03         syscall sys_io        ; display AL
10714  4895 E5            pop b
10715  4896 E4            pop a
10716  4897 09            ret
10717  4898             _itoa_printx32:
10718  4898 DA            push d
10719  4899 D8            push b
10720  489A A7 00         mov bh, 0
10721  489C FD A4 04      shr bl, 4  
10722  489F 74            mov d, b
10723  48A0 1F B2 48      mov al, [d + s_hex_digits_printx32]
10724  48A3 23            mov ah, al
10725  48A4 E5            pop b
10726  48A5 D8            push b
10727  48A6 A7 00         mov bh, 0
10728  48A8 FD 87 0F      and bl, $0F
10729  48AB 74            mov d, b
10730  48AC 1F B2 48      mov al, [d + s_hex_digits_printx32]
10731  48AF E5            pop b
10732  48B0 E7            pop d
10733  48B1 09            ret
10734  48B2 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
10734  48B6 34 35 36 37 
10734  48BA 38 39 41 42 
10734  48BE 43 44 45 46 
10735  48C2             ; --- END INLINE ASM SEGMENT
10736  48C2 F9            leave
10737  48C3 09            ret
10738  48C4             
10739  48C4             err:
10740  48C4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10741  48C7             ; print(e); 
10742  48C7             ; --- START FUNCTION CALL
10743  48C7 FA 05 00      lea d, [bp + 5] ; $e
10744  48CA 2A            mov b, [d]
10745  48CB 38 00 00      mov c, 0
10746  48CE FD AB         swp b
10747  48D0 D8            push b
10748  48D1 07 69 3E      call print
10749  48D4 51 02 00      add sp, 2
10750  48D7             ; --- END FUNCTION CALL
10751  48D7 F9            leave
10752  48D8 09            ret
10753  48D9             
10754  48D9             print_signed:
10755  48D9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10756  48DC             ; char digits[5]; 
10757  48DC 52 05 00      sub sp, 5
10758  48DF             ; int i = 0; 
10759  48DF 52 02 00      sub sp, 2
10760  48E2             ; --- START LOCAL VAR INITIALIZATION
10761  48E2 FA FA FF      lea d, [bp + -6] ; $i
10762  48E5 DA            push d
10763  48E6 FD 2E 00 00   mov32 cb, $00000000
10763  48EA 00 00 
10764  48EC E7            pop d
10765  48ED FD 43         mov [d], b
10766  48EF             ; --- END LOCAL VAR INITIALIZATION
10767  48EF             ; if (num < 0) { 
10768  48EF             _if246_cond:
10769  48EF FA 05 00      lea d, [bp + 5] ; $num
10770  48F2 2A            mov b, [d]
10771  48F3 38 00 00      mov c, 0
10772  48F6             ; --- START RELATIONAL
10773  48F6 D7            push a
10774  48F7 11            mov a, b
10775  48F8 FD 2E 00 00   mov32 cb, $00000000
10775  48FC 00 00 
10776  48FE B0            cmp a, b
10777  48FF FD 73         slt ; < (signed)
10778  4901 E4            pop a
10779  4902             ; --- END RELATIONAL
10780  4902 C0 00 00      cmp b, 0
10781  4905 C6 28 49      je _if246_else
10782  4908             _if246_TRUE:
10783  4908             ; putchar('-'); 
10784  4908             ; --- START FUNCTION CALL
10785  4908 FD 2E 2D 00   mov32 cb, $0000002d
10785  490C 00 00 
10786  490E DD            push bl
10787  490F 07 18 47      call putchar
10788  4912 51 01 00      add sp, 1
10789  4915             ; --- END FUNCTION CALL
10790  4915             ; num = -num; 
10791  4915 FA 05 00      lea d, [bp + 5] ; $num
10792  4918 DA            push d
10793  4919 FA 05 00      lea d, [bp + 5] ; $num
10794  491C 2A            mov b, [d]
10795  491D 38 00 00      mov c, 0
10796  4920 FD 97         neg b
10797  4922 E7            pop d
10798  4923 FD 43         mov [d], b
10799  4925 0A 53 49      jmp _if246_exit
10800  4928             _if246_else:
10801  4928             ; if (num == 0) { 
10802  4928             _if247_cond:
10803  4928 FA 05 00      lea d, [bp + 5] ; $num
10804  492B 2A            mov b, [d]
10805  492C 38 00 00      mov c, 0
10806  492F             ; --- START RELATIONAL
10807  492F D7            push a
10808  4930 11            mov a, b
10809  4931 FD 2E 00 00   mov32 cb, $00000000
10809  4935 00 00 
10810  4937 B0            cmp a, b
10811  4938 FD 71         seq ; ==
10812  493A E4            pop a
10813  493B             ; --- END RELATIONAL
10814  493B C0 00 00      cmp b, 0
10815  493E C6 53 49      je _if247_exit
10816  4941             _if247_TRUE:
10817  4941             ; putchar('0'); 
10818  4941             ; --- START FUNCTION CALL
10819  4941 FD 2E 30 00   mov32 cb, $00000030
10819  4945 00 00 
10820  4947 DD            push bl
10821  4948 07 18 47      call putchar
10822  494B 51 01 00      add sp, 1
10823  494E             ; --- END FUNCTION CALL
10824  494E             ; return; 
10825  494E F9            leave
10826  494F 09            ret
10827  4950 0A 53 49      jmp _if247_exit
10828  4953             _if247_exit:
10829  4953             _if246_exit:
10830  4953             ; while (num > 0) { 
10831  4953             _while248_cond:
10832  4953 FA 05 00      lea d, [bp + 5] ; $num
10833  4956 2A            mov b, [d]
10834  4957 38 00 00      mov c, 0
10835  495A             ; --- START RELATIONAL
10836  495A D7            push a
10837  495B 11            mov a, b
10838  495C FD 2E 00 00   mov32 cb, $00000000
10838  4960 00 00 
10839  4962 B0            cmp a, b
10840  4963 FD 7F         sgt ; >
10841  4965 E4            pop a
10842  4966             ; --- END RELATIONAL
10843  4966 C0 00 00      cmp b, 0
10844  4969 C6 E0 49      je _while248_exit
10845  496C             _while248_block:
10846  496C             ; digits[i] = '0' + (num % 10); 
10847  496C FA FC FF      lea d, [bp + -4] ; $digits
10848  496F D7            push a
10849  4970 DA            push d
10850  4971 FA FA FF      lea d, [bp + -6] ; $i
10851  4974 2A            mov b, [d]
10852  4975 38 00 00      mov c, 0
10853  4978 E7            pop d
10854  4979 5A            add d, b
10855  497A E4            pop a
10856  497B DA            push d
10857  497C FD 2E 30 00   mov32 cb, $00000030
10857  4980 00 00 
10858  4982             ; --- START TERMS
10859  4982 D7            push a
10860  4983 11            mov a, b
10861  4984 FA 05 00      lea d, [bp + 5] ; $num
10862  4987 2A            mov b, [d]
10863  4988 38 00 00      mov c, 0
10864  498B             ; --- START FACTORS
10865  498B D7            push a
10866  498C FD D8         push g
10867  498E 11            mov a, b
10868  498F FD 7A         mov g, c
10869  4991 FD 2E 0A 00   mov32 cb, $0000000a
10869  4995 00 00 
10870  4997 FD D8         push g ; save 'g' as the div instruction uses it
10871  4999 AE            div a, b ; %, a: quotient, b: remainder
10872  499A 11            mov a, b
10873  499B FD F1         pop g
10874  499D FD 38         mov c, g
10875  499F 27            mov b, a
10876  49A0 FD F1         pop g
10877  49A2 E4            pop a
10878  49A3             ; --- END FACTORS
10879  49A3 56            add b, a
10880  49A4 E4            pop a
10881  49A5             ; --- END TERMS
10882  49A5 E7            pop d
10883  49A6 FD 3E         mov [d], bl
10884  49A8             ; num = num / 10; 
10885  49A8 FA 05 00      lea d, [bp + 5] ; $num
10886  49AB DA            push d
10887  49AC FA 05 00      lea d, [bp + 5] ; $num
10888  49AF 2A            mov b, [d]
10889  49B0 38 00 00      mov c, 0
10890  49B3             ; --- START FACTORS
10891  49B3 D7            push a
10892  49B4 FD D8         push g
10893  49B6 11            mov a, b
10894  49B7 FD 7A         mov g, c
10895  49B9 FD 2E 0A 00   mov32 cb, $0000000a
10895  49BD 00 00 
10896  49BF FD D8         push g ; save 'g' as the div instruction uses it
10897  49C1 AE            div a, b ; /, a: quotient, b: remainder
10898  49C2 FD F1         pop g
10899  49C4 FD 38         mov c, g
10900  49C6 27            mov b, a
10901  49C7 FD F1         pop g
10902  49C9 E4            pop a
10903  49CA             ; --- END FACTORS
10904  49CA E7            pop d
10905  49CB FD 43         mov [d], b
10906  49CD             ; i++; 
10907  49CD FA FA FF      lea d, [bp + -6] ; $i
10908  49D0 2A            mov b, [d]
10909  49D1 38 00 00      mov c, 0
10910  49D4 11            mov a, b
10911  49D5 FD 77         inc b
10912  49D7 FA FA FF      lea d, [bp + -6] ; $i
10913  49DA FD 43         mov [d], b
10914  49DC 27            mov b, a
10915  49DD 0A 53 49      jmp _while248_cond
10916  49E0             _while248_exit:
10917  49E0             ; while (i > 0) { 
10918  49E0             _while255_cond:
10919  49E0 FA FA FF      lea d, [bp + -6] ; $i
10920  49E3 2A            mov b, [d]
10921  49E4 38 00 00      mov c, 0
10922  49E7             ; --- START RELATIONAL
10923  49E7 D7            push a
10924  49E8 11            mov a, b
10925  49E9 FD 2E 00 00   mov32 cb, $00000000
10925  49ED 00 00 
10926  49EF B0            cmp a, b
10927  49F0 FD 7F         sgt ; >
10928  49F2 E4            pop a
10929  49F3             ; --- END RELATIONAL
10930  49F3 C0 00 00      cmp b, 0
10931  49F6 C6 28 4A      je _while255_exit
10932  49F9             _while255_block:
10933  49F9             ; i--; 
10934  49F9 FA FA FF      lea d, [bp + -6] ; $i
10935  49FC 2A            mov b, [d]
10936  49FD 38 00 00      mov c, 0
10937  4A00 11            mov a, b
10938  4A01 FD 7D         dec b
10939  4A03 FA FA FF      lea d, [bp + -6] ; $i
10940  4A06 FD 43         mov [d], b
10941  4A08 27            mov b, a
10942  4A09             ; putchar(digits[i]); 
10943  4A09             ; --- START FUNCTION CALL
10944  4A09 FA FC FF      lea d, [bp + -4] ; $digits
10945  4A0C D7            push a
10946  4A0D DA            push d
10947  4A0E FA FA FF      lea d, [bp + -6] ; $i
10948  4A11 2A            mov b, [d]
10949  4A12 38 00 00      mov c, 0
10950  4A15 E7            pop d
10951  4A16 5A            add d, b
10952  4A17 E4            pop a
10953  4A18 32            mov bl, [d]
10954  4A19 A7 00         mov bh, 0
10955  4A1B 38 00 00      mov c, 0
10956  4A1E DD            push bl
10957  4A1F 07 18 47      call putchar
10958  4A22 51 01 00      add sp, 1
10959  4A25             ; --- END FUNCTION CALL
10960  4A25 0A E0 49      jmp _while255_cond
10961  4A28             _while255_exit:
10962  4A28 F9            leave
10963  4A29 09            ret
10964  4A2A             
10965  4A2A             print_unsigned:
10966  4A2A F8 00 00      enter 0 ; (push bp; mov bp, sp)
10967  4A2D             ; char digits[5]; 
10968  4A2D 52 05 00      sub sp, 5
10969  4A30             ; int i; 
10970  4A30 52 02 00      sub sp, 2
10971  4A33             ; i = 0; 
10972  4A33 FA FA FF      lea d, [bp + -6] ; $i
10973  4A36 DA            push d
10974  4A37 FD 2E 00 00   mov32 cb, $00000000
10974  4A3B 00 00 
10975  4A3D E7            pop d
10976  4A3E FD 43         mov [d], b
10977  4A40             ; if(num == 0){ 
10978  4A40             _if256_cond:
10979  4A40 FA 05 00      lea d, [bp + 5] ; $num
10980  4A43 2A            mov b, [d]
10981  4A44 38 00 00      mov c, 0
10982  4A47             ; --- START RELATIONAL
10983  4A47 D7            push a
10984  4A48 11            mov a, b
10985  4A49 FD 2E 00 00   mov32 cb, $00000000
10985  4A4D 00 00 
10986  4A4F B0            cmp a, b
10987  4A50 FD 71         seq ; ==
10988  4A52 E4            pop a
10989  4A53             ; --- END RELATIONAL
10990  4A53 C0 00 00      cmp b, 0
10991  4A56 C6 6B 4A      je _if256_exit
10992  4A59             _if256_TRUE:
10993  4A59             ; putchar('0'); 
10994  4A59             ; --- START FUNCTION CALL
10995  4A59 FD 2E 30 00   mov32 cb, $00000030
10995  4A5D 00 00 
10996  4A5F DD            push bl
10997  4A60 07 18 47      call putchar
10998  4A63 51 01 00      add sp, 1
10999  4A66             ; --- END FUNCTION CALL
11000  4A66             ; return; 
11001  4A66 F9            leave
11002  4A67 09            ret
11003  4A68 0A 6B 4A      jmp _if256_exit
11004  4A6B             _if256_exit:
11005  4A6B             ; while (num > 0) { 
11006  4A6B             _while257_cond:
11007  4A6B FA 05 00      lea d, [bp + 5] ; $num
11008  4A6E 2A            mov b, [d]
11009  4A6F 38 00 00      mov c, 0
11010  4A72             ; --- START RELATIONAL
11011  4A72 D7            push a
11012  4A73 11            mov a, b
11013  4A74 FD 2E 00 00   mov32 cb, $00000000
11013  4A78 00 00 
11014  4A7A B0            cmp a, b
11015  4A7B FD 81         sgu ; > (unsigned)
11016  4A7D E4            pop a
11017  4A7E             ; --- END RELATIONAL
11018  4A7E C0 00 00      cmp b, 0
11019  4A81 C6 F8 4A      je _while257_exit
11020  4A84             _while257_block:
11021  4A84             ; digits[i] = '0' + (num % 10); 
11022  4A84 FA FC FF      lea d, [bp + -4] ; $digits
11023  4A87 D7            push a
11024  4A88 DA            push d
11025  4A89 FA FA FF      lea d, [bp + -6] ; $i
11026  4A8C 2A            mov b, [d]
11027  4A8D 38 00 00      mov c, 0
11028  4A90 E7            pop d
11029  4A91 5A            add d, b
11030  4A92 E4            pop a
11031  4A93 DA            push d
11032  4A94 FD 2E 30 00   mov32 cb, $00000030
11032  4A98 00 00 
11033  4A9A             ; --- START TERMS
11034  4A9A D7            push a
11035  4A9B 11            mov a, b
11036  4A9C FA 05 00      lea d, [bp + 5] ; $num
11037  4A9F 2A            mov b, [d]
11038  4AA0 38 00 00      mov c, 0
11039  4AA3             ; --- START FACTORS
11040  4AA3 D7            push a
11041  4AA4 FD D8         push g
11042  4AA6 11            mov a, b
11043  4AA7 FD 7A         mov g, c
11044  4AA9 FD 2E 0A 00   mov32 cb, $0000000a
11044  4AAD 00 00 
11045  4AAF FD D8         push g ; save 'g' as the div instruction uses it
11046  4AB1 AE            div a, b ; %, a: quotient, b: remainder
11047  4AB2 11            mov a, b
11048  4AB3 FD F1         pop g
11049  4AB5 FD 38         mov c, g
11050  4AB7 27            mov b, a
11051  4AB8 FD F1         pop g
11052  4ABA E4            pop a
11053  4ABB             ; --- END FACTORS
11054  4ABB 56            add b, a
11055  4ABC E4            pop a
11056  4ABD             ; --- END TERMS
11057  4ABD E7            pop d
11058  4ABE FD 3E         mov [d], bl
11059  4AC0             ; num = num / 10; 
11060  4AC0 FA 05 00      lea d, [bp + 5] ; $num
11061  4AC3 DA            push d
11062  4AC4 FA 05 00      lea d, [bp + 5] ; $num
11063  4AC7 2A            mov b, [d]
11064  4AC8 38 00 00      mov c, 0
11065  4ACB             ; --- START FACTORS
11066  4ACB D7            push a
11067  4ACC FD D8         push g
11068  4ACE 11            mov a, b
11069  4ACF FD 7A         mov g, c
11070  4AD1 FD 2E 0A 00   mov32 cb, $0000000a
11070  4AD5 00 00 
11071  4AD7 FD D8         push g ; save 'g' as the div instruction uses it
11072  4AD9 AE            div a, b ; /, a: quotient, b: remainder
11073  4ADA FD F1         pop g
11074  4ADC FD 38         mov c, g
11075  4ADE 27            mov b, a
11076  4ADF FD F1         pop g
11077  4AE1 E4            pop a
11078  4AE2             ; --- END FACTORS
11079  4AE2 E7            pop d
11080  4AE3 FD 43         mov [d], b
11081  4AE5             ; i++; 
11082  4AE5 FA FA FF      lea d, [bp + -6] ; $i
11083  4AE8 2A            mov b, [d]
11084  4AE9 38 00 00      mov c, 0
11085  4AEC 11            mov a, b
11086  4AED FD 77         inc b
11087  4AEF FA FA FF      lea d, [bp + -6] ; $i
11088  4AF2 FD 43         mov [d], b
11089  4AF4 27            mov b, a
11090  4AF5 0A 6B 4A      jmp _while257_cond
11091  4AF8             _while257_exit:
11092  4AF8             ; while (i > 0) { 
11093  4AF8             _while264_cond:
11094  4AF8 FA FA FF      lea d, [bp + -6] ; $i
11095  4AFB 2A            mov b, [d]
11096  4AFC 38 00 00      mov c, 0
11097  4AFF             ; --- START RELATIONAL
11098  4AFF D7            push a
11099  4B00 11            mov a, b
11100  4B01 FD 2E 00 00   mov32 cb, $00000000
11100  4B05 00 00 
11101  4B07 B0            cmp a, b
11102  4B08 FD 7F         sgt ; >
11103  4B0A E4            pop a
11104  4B0B             ; --- END RELATIONAL
11105  4B0B C0 00 00      cmp b, 0
11106  4B0E C6 40 4B      je _while264_exit
11107  4B11             _while264_block:
11108  4B11             ; i--; 
11109  4B11 FA FA FF      lea d, [bp + -6] ; $i
11110  4B14 2A            mov b, [d]
11111  4B15 38 00 00      mov c, 0
11112  4B18 11            mov a, b
11113  4B19 FD 7D         dec b
11114  4B1B FA FA FF      lea d, [bp + -6] ; $i
11115  4B1E FD 43         mov [d], b
11116  4B20 27            mov b, a
11117  4B21             ; putchar(digits[i]); 
11118  4B21             ; --- START FUNCTION CALL
11119  4B21 FA FC FF      lea d, [bp + -4] ; $digits
11120  4B24 D7            push a
11121  4B25 DA            push d
11122  4B26 FA FA FF      lea d, [bp + -6] ; $i
11123  4B29 2A            mov b, [d]
11124  4B2A 38 00 00      mov c, 0
11125  4B2D E7            pop d
11126  4B2E 5A            add d, b
11127  4B2F E4            pop a
11128  4B30 32            mov bl, [d]
11129  4B31 A7 00         mov bh, 0
11130  4B33 38 00 00      mov c, 0
11131  4B36 DD            push bl
11132  4B37 07 18 47      call putchar
11133  4B3A 51 01 00      add sp, 1
11134  4B3D             ; --- END FUNCTION CALL
11135  4B3D 0A F8 4A      jmp _while264_cond
11136  4B40             _while264_exit:
11137  4B40 F9            leave
11138  4B41 09            ret
11139  4B42             
11140  4B42             printx16:
11141  4B42 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11142  4B45             ; --- BEGIN INLINE ASM SEGMENT
11143  4B45 FA 05 00      lea d, [bp + 5] ; $hex
11144  4B48 2A            mov b, [d]
11145  4B49             print_u16x_printx16:
11146  4B49 DD            push bl
11147  4B4A 30            mov bl, bh
11148  4B4B 07 68 4B      call _itoa_printx16        ; convert bh to char in A
11149  4B4E 2F            mov bl, al        ; save al
11150  4B4F 19 00         mov al, 0
11151  4B51 05 03         syscall sys_io        ; display AH
11152  4B53 24            mov ah, bl        ; retrieve al
11153  4B54 19 00         mov al, 0
11154  4B56 05 03         syscall sys_io        ; display AL
11155  4B58 EA            pop bl
11156  4B59 07 68 4B      call _itoa_printx16        ; convert bh to char in A
11157  4B5C 2F            mov bl, al        ; save al
11158  4B5D 19 00         mov al, 0
11159  4B5F 05 03         syscall sys_io        ; display AH
11160  4B61 24            mov ah, bl        ; retrieve al
11161  4B62 19 00         mov al, 0
11162  4B64 05 03         syscall sys_io        ; display AL
11163  4B66             ; --- END INLINE ASM SEGMENT
11164  4B66             ; return; 
11165  4B66 F9            leave
11166  4B67 09            ret
11167  4B68             ; --- BEGIN INLINE ASM SEGMENT
11168  4B68             _itoa_printx16:
11169  4B68 DA            push d
11170  4B69 D8            push b
11171  4B6A A7 00         mov bh, 0
11172  4B6C FD A4 04      shr bl, 4  
11173  4B6F 74            mov d, b
11174  4B70 1F 82 4B      mov al, [d + s_hex_digits_printx16]
11175  4B73 23            mov ah, al
11176  4B74 E5            pop b
11177  4B75 D8            push b
11178  4B76 A7 00         mov bh, 0
11179  4B78 FD 87 0F      and bl, $0F
11180  4B7B 74            mov d, b
11181  4B7C 1F 82 4B      mov al, [d + s_hex_digits_printx16]
11182  4B7F E5            pop b
11183  4B80 E7            pop d
11184  4B81 09            ret
11185  4B82 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
11185  4B86 34 35 36 37 
11185  4B8A 38 39 41 42 
11185  4B8E 43 44 45 46 
11186  4B92             ; --- END INLINE ASM SEGMENT
11187  4B92 F9            leave
11188  4B93 09            ret
11189  4B94             
11190  4B94             exit:
11191  4B94 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11192  4B97             ; --- BEGIN INLINE ASM SEGMENT
11193  4B97 FA 05 00      lea d, [bp + 5] ; $status
11194  4B9A 2A            mov b, [d] ; return value
11195  4B9B 05 0B         syscall sys_terminate_proc
11196  4B9D             ; --- END INLINE ASM SEGMENT
11197  4B9D F9            leave
11198  4B9E 09            ret
11199  4B9F             
11200  4B9F             strcpy:
11201  4B9F F8 00 00      enter 0 ; (push bp; mov bp, sp)
11202  4BA2             ; char *psrc; 
11203  4BA2 52 02 00      sub sp, 2
11204  4BA5             ; char *pdest; 
11205  4BA5 52 02 00      sub sp, 2
11206  4BA8             ; psrc = src; 
11207  4BA8 FA FF FF      lea d, [bp + -1] ; $psrc
11208  4BAB DA            push d
11209  4BAC FA 07 00      lea d, [bp + 7] ; $src
11210  4BAF 2A            mov b, [d]
11211  4BB0 38 00 00      mov c, 0
11212  4BB3 E7            pop d
11213  4BB4 FD 43         mov [d], b
11214  4BB6             ; pdest = dest; 
11215  4BB6 FA FD FF      lea d, [bp + -3] ; $pdest
11216  4BB9 DA            push d
11217  4BBA FA 05 00      lea d, [bp + 5] ; $dest
11218  4BBD 2A            mov b, [d]
11219  4BBE 38 00 00      mov c, 0
11220  4BC1 E7            pop d
11221  4BC2 FD 43         mov [d], b
11222  4BC4             ; while(*psrc) *pdest++ = *psrc++; 
11223  4BC4             _while265_cond:
11224  4BC4 FA FF FF      lea d, [bp + -1] ; $psrc
11225  4BC7 2A            mov b, [d]
11226  4BC8 38 00 00      mov c, 0
11227  4BCB 74            mov d, b
11228  4BCC 32            mov bl, [d]
11229  4BCD A7 00         mov bh, 0
11230  4BCF 38 00 00      mov c, 0
11231  4BD2 C0 00 00      cmp b, 0
11232  4BD5 C6 06 4C      je _while265_exit
11233  4BD8             _while265_block:
11234  4BD8             ; *pdest++ = *psrc++; 
11235  4BD8 FA FD FF      lea d, [bp + -3] ; $pdest
11236  4BDB 2A            mov b, [d]
11237  4BDC 38 00 00      mov c, 0
11238  4BDF FD 77         inc b
11239  4BE1 FA FD FF      lea d, [bp + -3] ; $pdest
11240  4BE4 FD 43         mov [d], b
11241  4BE6 FD 7D         dec b
11242  4BE8 D8            push b
11243  4BE9 FA FF FF      lea d, [bp + -1] ; $psrc
11244  4BEC 2A            mov b, [d]
11245  4BED 38 00 00      mov c, 0
11246  4BF0 FD 77         inc b
11247  4BF2 FA FF FF      lea d, [bp + -1] ; $psrc
11248  4BF5 FD 43         mov [d], b
11249  4BF7 FD 7D         dec b
11250  4BF9 74            mov d, b
11251  4BFA 32            mov bl, [d]
11252  4BFB A7 00         mov bh, 0
11253  4BFD 38 00 00      mov c, 0
11254  4C00 E7            pop d
11255  4C01 FD 3E         mov [d], bl
11256  4C03 0A C4 4B      jmp _while265_cond
11257  4C06             _while265_exit:
11258  4C06             ; *pdest = '\0'; 
11259  4C06 FA FD FF      lea d, [bp + -3] ; $pdest
11260  4C09 2A            mov b, [d]
11261  4C0A 38 00 00      mov c, 0
11262  4C0D D8            push b
11263  4C0E FD 2E 00 00   mov32 cb, $00000000
11263  4C12 00 00 
11264  4C14 E7            pop d
11265  4C15 FD 3E         mov [d], bl
11266  4C17 F9            leave
11267  4C18 09            ret
11268  4C19             
11269  4C19             strcat:
11270  4C19 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11271  4C1C             ; int dest_len; 
11272  4C1C 52 02 00      sub sp, 2
11273  4C1F             ; int i; 
11274  4C1F 52 02 00      sub sp, 2
11275  4C22             ; dest_len = strlen(dest); 
11276  4C22 FA FF FF      lea d, [bp + -1] ; $dest_len
11277  4C25 DA            push d
11278  4C26             ; --- START FUNCTION CALL
11279  4C26 FA 05 00      lea d, [bp + 5] ; $dest
11280  4C29 2A            mov b, [d]
11281  4C2A 38 00 00      mov c, 0
11282  4C2D FD AB         swp b
11283  4C2F D8            push b
11284  4C30 07 4F 40      call strlen
11285  4C33 51 02 00      add sp, 2
11286  4C36             ; --- END FUNCTION CALL
11287  4C36 E7            pop d
11288  4C37 FD 43         mov [d], b
11289  4C39             ; for (i = 0; src[i] != 0; i=i+1) { 
11290  4C39             _for266_init:
11291  4C39 FA FD FF      lea d, [bp + -3] ; $i
11292  4C3C DA            push d
11293  4C3D FD 2E 00 00   mov32 cb, $00000000
11293  4C41 00 00 
11294  4C43 E7            pop d
11295  4C44 FD 43         mov [d], b
11296  4C46             _for266_cond:
11297  4C46 FA 07 00      lea d, [bp + 7] ; $src
11298  4C49 FD 2A         mov d, [d]
11299  4C4B D7            push a
11300  4C4C DA            push d
11301  4C4D FA FD FF      lea d, [bp + -3] ; $i
11302  4C50 2A            mov b, [d]
11303  4C51 38 00 00      mov c, 0
11304  4C54 E7            pop d
11305  4C55 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
11306  4C59 E4            pop a
11307  4C5A 32            mov bl, [d]
11308  4C5B A7 00         mov bh, 0
11309  4C5D 38 00 00      mov c, 0
11310  4C60             ; --- START RELATIONAL
11311  4C60 D7            push a
11312  4C61 11            mov a, b
11313  4C62 FD 2E 00 00   mov32 cb, $00000000
11313  4C66 00 00 
11314  4C68 B0            cmp a, b
11315  4C69 FD 72         sneq ; !=
11316  4C6B E4            pop a
11317  4C6C             ; --- END RELATIONAL
11318  4C6C C0 00 00      cmp b, 0
11319  4C6F C6 CA 4C      je _for266_exit
11320  4C72             _for266_block:
11321  4C72             ; dest[dest_len + i] = src[i]; 
11322  4C72 FA 05 00      lea d, [bp + 5] ; $dest
11323  4C75 FD 2A         mov d, [d]
11324  4C77 D7            push a
11325  4C78 DA            push d
11326  4C79 FA FF FF      lea d, [bp + -1] ; $dest_len
11327  4C7C 2A            mov b, [d]
11328  4C7D 38 00 00      mov c, 0
11329  4C80             ; --- START TERMS
11330  4C80 D7            push a
11331  4C81 11            mov a, b
11332  4C82 FA FD FF      lea d, [bp + -3] ; $i
11333  4C85 2A            mov b, [d]
11334  4C86 38 00 00      mov c, 0
11335  4C89 56            add b, a
11336  4C8A E4            pop a
11337  4C8B             ; --- END TERMS
11338  4C8B E7            pop d
11339  4C8C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
11340  4C90 E4            pop a
11341  4C91 DA            push d
11342  4C92 FA 07 00      lea d, [bp + 7] ; $src
11343  4C95 FD 2A         mov d, [d]
11344  4C97 D7            push a
11345  4C98 DA            push d
11346  4C99 FA FD FF      lea d, [bp + -3] ; $i
11347  4C9C 2A            mov b, [d]
11348  4C9D 38 00 00      mov c, 0
11349  4CA0 E7            pop d
11350  4CA1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
11351  4CA5 E4            pop a
11352  4CA6 32            mov bl, [d]
11353  4CA7 A7 00         mov bh, 0
11354  4CA9 38 00 00      mov c, 0
11355  4CAC E7            pop d
11356  4CAD FD 3E         mov [d], bl
11357  4CAF             _for266_update:
11358  4CAF FA FD FF      lea d, [bp + -3] ; $i
11359  4CB2 DA            push d
11360  4CB3 FA FD FF      lea d, [bp + -3] ; $i
11361  4CB6 2A            mov b, [d]
11362  4CB7 38 00 00      mov c, 0
11363  4CBA             ; --- START TERMS
11364  4CBA D7            push a
11365  4CBB 11            mov a, b
11366  4CBC FD 2E 01 00   mov32 cb, $00000001
11366  4CC0 00 00 
11367  4CC2 56            add b, a
11368  4CC3 E4            pop a
11369  4CC4             ; --- END TERMS
11370  4CC4 E7            pop d
11371  4CC5 FD 43         mov [d], b
11372  4CC7 0A 46 4C      jmp _for266_cond
11373  4CCA             _for266_exit:
11374  4CCA             ; dest[dest_len + i] = 0; 
11375  4CCA FA 05 00      lea d, [bp + 5] ; $dest
11376  4CCD FD 2A         mov d, [d]
11377  4CCF D7            push a
11378  4CD0 DA            push d
11379  4CD1 FA FF FF      lea d, [bp + -1] ; $dest_len
11380  4CD4 2A            mov b, [d]
11381  4CD5 38 00 00      mov c, 0
11382  4CD8             ; --- START TERMS
11383  4CD8 D7            push a
11384  4CD9 11            mov a, b
11385  4CDA FA FD FF      lea d, [bp + -3] ; $i
11386  4CDD 2A            mov b, [d]
11387  4CDE 38 00 00      mov c, 0
11388  4CE1 56            add b, a
11389  4CE2 E4            pop a
11390  4CE3             ; --- END TERMS
11391  4CE3 E7            pop d
11392  4CE4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
11393  4CE8 E4            pop a
11394  4CE9 DA            push d
11395  4CEA FD 2E 00 00   mov32 cb, $00000000
11395  4CEE 00 00 
11396  4CF0 E7            pop d
11397  4CF1 FD 3E         mov [d], bl
11398  4CF3             ; return dest; 
11399  4CF3 FA 05 00      lea d, [bp + 5] ; $dest
11400  4CF6 2A            mov b, [d]
11401  4CF7 38 00 00      mov c, 0
11402  4CFA F9            leave
11403  4CFB 09            ret
11404  4CFC             
11405  4CFC             printx8:
11406  4CFC F8 00 00      enter 0 ; (push bp; mov bp, sp)
11407  4CFF             ; --- BEGIN INLINE ASM SEGMENT
11408  4CFF FA 05 00      lea d, [bp + 5] ; $hex
11409  4D02 32            mov bl, [d]
11410  4D03 07 12 4D      call _itoa_printx8        ; convert bl to char in A
11411  4D06 2F            mov bl, al        ; save al
11412  4D07 19 00         mov al, 0
11413  4D09 05 03         syscall sys_io        ; display AH
11414  4D0B 24            mov ah, bl        ; retrieve al
11415  4D0C 19 00         mov al, 0
11416  4D0E 05 03         syscall sys_io        ; display AL
11417  4D10             ; --- END INLINE ASM SEGMENT
11418  4D10             ; return; 
11419  4D10 F9            leave
11420  4D11 09            ret
11421  4D12             ; --- BEGIN INLINE ASM SEGMENT
11422  4D12             _itoa_printx8:
11423  4D12 DA            push d
11424  4D13 D8            push b
11425  4D14 A7 00         mov bh, 0
11426  4D16 FD A4 04      shr bl, 4  
11427  4D19 74            mov d, b
11428  4D1A 1F 2C 4D      mov al, [d + s_hex_digits_printx8]
11429  4D1D 23            mov ah, al
11430  4D1E E5            pop b
11431  4D1F D8            push b
11432  4D20 A7 00         mov bh, 0
11433  4D22 FD 87 0F      and bl, $0F
11434  4D25 74            mov d, b
11435  4D26 1F 2C 4D      mov al, [d + s_hex_digits_printx8]
11436  4D29 E5            pop b
11437  4D2A E7            pop d
11438  4D2B 09            ret
11439  4D2C 30 31 32 33 s_hex_digits_printx8:    .db "0123456789ABCDEF"  
11439  4D30 34 35 36 37 
11439  4D34 38 39 41 42 
11439  4D38 43 44 45 46 
11440  4D3C             ; --- END INLINE ASM SEGMENT
11441  4D3C F9            leave
11442  4D3D 09            ret
11443  4D3E             ; --- END TEXT SEGMENT
11444  4D3E             
11445  4D3E             ; --- BEGIN DATA SEGMENT
11446  4D3E             _keywords_data:
11447  4D3E F3 4F       .dw _s0
11448  4D40 01          .db 1
11449  4D41 F7 4F       .dw _s1
11450  4D43 02          .db 2
11451  4D44 FF 4F       .dw _s2
11452  4D46 03          .db 3
11453  4D47 04 50       .dw _s3
11454  4D49 04          .db 4
11455  4D4A 09 50       .dw _s4
11456  4D4C 06          .db 6
11457  4D4D 0C 50       .dw _s5
11458  4D4F 07          .db 7
11459  4D50 0F 50       .dw _s6
11460  4D52 05          .db 5
11461  4D53 13 50       .dw _s7
11462  4D55 00          .db 0
11463  4D56 00 00 00 00 _label_table_data: .fill 288, 0
11463  4D5A 00 00 00 00 
11463  4D5E 00 00 00 00 
11463  4D62 00 00 00 00 
11463  4D66 00 00 00 00 
11463  4D6A 00 00 00 00 
11463  4D6E 00 00 00 00 
11463  4D72 00 00 00 00 
11463  4D76 00 00 00 00 
11463  4D7A 00 00 00 00 
11463  4D7E 00 00 00 00 
11463  4D82 00 00 00 00 
11463  4D86 00 00 00 00 
11463  4D8A 00 00 00 00 
11463  4D8E 00 00 00 00 
11463  4D92 00 00 00 00 
11463  4D96 00 00 00 00 
11463  4D9A 00 00 00 00 
11463  4D9E 00 00 00 00 
11463  4DA2 00 00 00 00 
11463  4DA6 00 00 00 00 
11463  4DAA 00 00 00 00 
11463  4DAE 00 00 00 00 
11463  4DB2 00 00 00 00 
11463  4DB6 00 00 00 00 
11463  4DBA 00 00 00 00 
11463  4DBE 00 00 00 00 
11463  4DC2 00 00 00 00 
11463  4DC6 00 00 00 00 
11463  4DCA 00 00 00 00 
11463  4DCE 00 00 00 00 
11463  4DD2 00 00 00 00 
11463  4DD6 00 00 00 00 
11463  4DDA 00 00 00 00 
11463  4DDE 00 00 00 00 
11463  4DE2 00 00 00 00 
11463  4DE6 00 00 00 00 
11463  4DEA 00 00 00 00 
11463  4DEE 00 00 00 00 
11463  4DF2 00 00 00 00 
11463  4DF6 00 00 00 00 
11463  4DFA 00 00 00 00 
11463  4DFE 00 00 00 00 
11463  4E02 00 00 00 00 
11463  4E06 00 00 00 00 
11463  4E0A 00 00 00 00 
11463  4E0E 00 00 00 00 
11463  4E12 00 00 00 00 
11463  4E16 00 00 00 00 
11463  4E1A 00 00 00 00 
11463  4E1E 00 00 00 00 
11463  4E22 00 00 00 00 
11463  4E26 00 00 00 00 
11463  4E2A 00 00 00 00 
11463  4E2E 00 00 00 00 
11463  4E32 00 00 00 00 
11463  4E36 00 00 00 00 
11463  4E3A 00 00 00 00 
11463  4E3E 00 00 00 00 
11463  4E42 00 00 00 00 
11463  4E46 00 00 00 00 
11463  4E4A 00 00 00 00 
11463  4E4E 00 00 00 00 
11463  4E52 00 00 00 00 
11463  4E56 00 00 00 00 
11463  4E5A 00 00 00 00 
11463  4E5E 00 00 00 00 
11463  4E62 00 00 00 00 
11463  4E66 00 00 00 00 
11463  4E6A 00 00 00 00 
11463  4E6E 00 00 00 00 
11463  4E72 00 00 00 00 
11464  4E76 00 04       __org: .dw $0400
11465  4E78 00 00       _pc: .fill 2, 0
11466  4E7A 01          _print_information: .db $01
11467  4E7B 00 00       _tok: .fill 2, 0
11468  4E7D 00 00       _toktype: .fill 2, 0
11469  4E7F 00 00       _prog: .fill 2, 0
11470  4E81 00 00 00 00 _token_data: .fill 64, 0
11470  4E85 00 00 00 00 
11470  4E89 00 00 00 00 
11470  4E8D 00 00 00 00 
11470  4E91 00 00 00 00 
11470  4E95 00 00 00 00 
11470  4E99 00 00 00 00 
11470  4E9D 00 00 00 00 
11470  4EA1 00 00 00 00 
11470  4EA5 00 00 00 00 
11470  4EA9 00 00 00 00 
11470  4EAD 00 00 00 00 
11470  4EB1 00 00 00 00 
11470  4EB5 00 00 00 00 
11470  4EB9 00 00 00 00 
11470  4EBD 00 00 00 00 
11471  4EC1 00 00 00 00 _string_const_data: .fill 256, 0
11471  4EC5 00 00 00 00 
11471  4EC9 00 00 00 00 
11471  4ECD 00 00 00 00 
11471  4ED1 00 00 00 00 
11471  4ED5 00 00 00 00 
11471  4ED9 00 00 00 00 
11471  4EDD 00 00 00 00 
11471  4EE1 00 00 00 00 
11471  4EE5 00 00 00 00 
11471  4EE9 00 00 00 00 
11471  4EED 00 00 00 00 
11471  4EF1 00 00 00 00 
11471  4EF5 00 00 00 00 
11471  4EF9 00 00 00 00 
11471  4EFD 00 00 00 00 
11471  4F01 00 00 00 00 
11471  4F05 00 00 00 00 
11471  4F09 00 00 00 00 
11471  4F0D 00 00 00 00 
11471  4F11 00 00 00 00 
11471  4F15 00 00 00 00 
11471  4F19 00 00 00 00 
11471  4F1D 00 00 00 00 
11471  4F21 00 00 00 00 
11471  4F25 00 00 00 00 
11471  4F29 00 00 00 00 
11471  4F2D 00 00 00 00 
11471  4F31 00 00 00 00 
11471  4F35 00 00 00 00 
11471  4F39 00 00 00 00 
11471  4F3D 00 00 00 00 
11471  4F41 00 00 00 00 
11471  4F45 00 00 00 00 
11471  4F49 00 00 00 00 
11471  4F4D 00 00 00 00 
11471  4F51 00 00 00 00 
11471  4F55 00 00 00 00 
11471  4F59 00 00 00 00 
11471  4F5D 00 00 00 00 
11471  4F61 00 00 00 00 
11471  4F65 00 00 00 00 
11471  4F69 00 00 00 00 
11471  4F6D 00 00 00 00 
11471  4F71 00 00 00 00 
11471  4F75 00 00 00 00 
11471  4F79 00 00 00 00 
11471  4F7D 00 00 00 00 
11471  4F81 00 00 00 00 
11471  4F85 00 00 00 00 
11471  4F89 00 00 00 00 
11471  4F8D 00 00 00 00 
11471  4F91 00 00 00 00 
11471  4F95 00 00 00 00 
11471  4F99 00 00 00 00 
11471  4F9D 00 00 00 00 
11471  4FA1 00 00 00 00 
11471  4FA5 00 00 00 00 
11471  4FA9 00 00 00 00 
11471  4FAD 00 00 00 00 
11471  4FB1 00 00 00 00 
11471  4FB5 00 00 00 00 
11471  4FB9 00 00 00 00 
11471  4FBD 00 00 00 00 
11472  4FC1 00 00       _int_const: .fill 2, 0
11473  4FC3 00 00       _program: .fill 2, 0
11474  4FC5 00 00       _bin_out: .fill 2, 0
11475  4FC7 00 00       _bin_p: .fill 2, 0
11476  4FC9 00 00       _opcode_table: .fill 2, 0
11477  4FCB 00 00 00 00 _prog_stack_data: .fill 20, 0
11477  4FCF 00 00 00 00 
11477  4FD3 00 00 00 00 
11477  4FD7 00 00 00 00 
11477  4FDB 00 00 00 00 
11478  4FDF 00 00       _prog_tos: .fill 2, 0
11479  4FE1 00 00       _prog_size: .fill 2, 0
11480  4FE3 14 50 16 50 _symbols_data: .dw _s8, _s9, _s9, _s8, _s8, _s8, _s9, _s9, 
11480  4FE7 16 50 14 50 
11480  4FEB 14 50 14 50 
11480  4FEF 16 50 16 50 
11481  4FF3 6F 72 67 00 _s0: .db "org", 0
11482  4FF7 69 6E 63 6C _s1: .db "include", 0
11482  4FFB 75 64 65 00 
11483  4FFF 64 61 74 61 _s2: .db "data", 0
11483  5003 00 
11484  5004 74 65 78 74 _s3: .db "text", 0
11484  5008 00 
11485  5009 64 62 00    _s4: .db "db", 0
11486  500C 64 77 00    _s5: .db "dw", 0
11487  500F 65 6E 64 00 _s6: .db "end", 0
11488  5013 00          _s7: .db "", 0
11489  5014 40 00       _s8: .db "@", 0
11490  5016 23 00       _s9: .db "#", 0
11491  5018 0A 00       _s10: .db "\n", 0
11492  501A 2E 2F 63 6F _s11: .db "./config.d/op_tbl", 0
11492  501E 6E 66 69 67 
11492  5022 2E 64 2F 6F 
11492  5026 70 5F 74 62 
11492  502A 6C 00 
11493  502C 50 61 72 73 _s12: .db "Parsing DATA section...", 0
11493  5030 69 6E 67 20 
11493  5034 44 41 54 41 
11493  5038 20 73 65 63 
11493  503C 74 69 6F 6E 
11493  5040 2E 2E 2E 00 
11494  5044 44 61 74 61 _s13: .db "Data segment not found.", 0
11494  5048 20 73 65 67 
11494  504C 6D 65 6E 74 
11494  5050 20 6E 6F 74 
11494  5054 20 66 6F 75 
11494  5058 6E 64 2E 00 
11495  505C 2E 64 62 3A _s14: .db ".db: ", 0
11495  5060 20 00 
11496  5062 2C 20 00    _s15: .db ", ", 0
11497  5065 2E 64 77 3A _s16: .db ".dw: ", 0
11497  5069 20 00 
11498  506B 44 6F 6E 65 _s17: .db "Done.\n", 0
11498  506F 2E 0A 00 
11499  5072 49 6E 74 65 _s18: .db "Integer constant expected in .org directive.", 0
11499  5076 67 65 72 20 
11499  507A 63 6F 6E 73 
11499  507E 74 61 6E 74 
11499  5082 20 65 78 70 
11499  5086 65 63 74 65 
11499  508A 64 20 69 6E 
11499  508E 20 2E 6F 72 
11499  5092 67 20 64 69 
11499  5096 72 65 63 74 
11499  509A 69 76 65 2E 
11499  509E 00 
11500  509F 50 61 72 73 _s19: .db "Parsing labels and directives...\n", 0
11500  50A3 69 6E 67 20 
11500  50A7 6C 61 62 65 
11500  50AB 6C 73 20 61 
11500  50AF 6E 64 20 64 
11500  50B3 69 72 65 63 
11500  50B7 74 69 76 65 
11500  50BB 73 2E 2E 2E 
11500  50BF 0A 00 
11501  50C1 2E 00       _s20: .db ".", 0
11502  50C3 0A 44 6F 6E _s21: .db "\nDone.\n", 0
11502  50C7 65 2E 0A 00 
11503  50CB 4F 72 67 3A _s22: .db "Org: %s\n", 0
11503  50CF 20 25 73 0A 
11503  50D3 00 
11504  50D4 0A 4C 61 62 _s23: .db "\nLabels list:\n", 0
11504  50D8 65 6C 73 20 
11504  50DC 6C 69 73 74 
11504  50E0 3A 0A 00 
11505  50E3 25 73 3A 20 _s24: .db "%s: %x\n", 0
11505  50E7 25 78 0A 00 
11506  50EB 20 2E 00    _s25: .db " .", 0
11507  50EE 20 00       _s26: .db " ", 0
11508  50F0 4D 61 78 69 _s27: .db "Maximum number of operands per instruction is 2.", 0
11508  50F4 6D 75 6D 20 
11508  50F8 6E 75 6D 62 
11508  50FC 65 72 20 6F 
11508  5100 66 20 6F 70 
11508  5104 65 72 61 6E 
11508  5108 64 73 20 70 
11508  510C 65 72 20 69 
11508  5110 6E 73 74 72 
11508  5114 75 63 74 69 
11508  5118 6F 6E 20 69 
11508  511C 73 20 32 2E 
11508  5120 00 
11509  5121 38 62 69 74 _s28: .db "8bit operand expected but 16bit label given.", 0
11509  5125 20 6F 70 65 
11509  5129 72 61 6E 64 
11509  512D 20 65 78 70 
11509  5131 65 63 74 65 
11509  5135 64 20 62 75 
11509  5139 74 20 31 36 
11509  513D 62 69 74 20 
11509  5141 6C 61 62 65 
11509  5145 6C 20 67 69 
11509  5149 76 65 6E 2E 
11509  514D 00 
11510  514E 25 78 28 25 _s29: .db "%x(%d): %s\n", 0
11510  5152 64 29 3A 20 
11510  5156 25 73 0A 00 
11511  515A 55 6E 64 65 _s30: .db "Undeclared label: ", 0
11511  515E 63 6C 61 72 
11511  5162 65 64 20 6C 
11511  5166 61 62 65 6C 
11511  516A 3A 20 00 
11512  516D 50 61 72 73 _s31: .db "Parsing TEXT section...\n", 0
11512  5171 69 6E 67 20 
11512  5175 54 45 58 54 
11512  5179 20 73 65 63 
11512  517D 74 69 6F 6E 
11512  5181 2E 2E 2E 0A 
11512  5185 00 
11513  5186 54 45 58 54 _s32: .db "TEXT section not found.", 0
11513  518A 20 73 65 63 
11513  518E 74 69 6F 6E 
11513  5192 20 6E 6F 74 
11513  5196 20 66 6F 75 
11513  519A 6E 64 2E 00 
11514  519E 54 45 58 54 _s33: .db "TEXT section end not found.", 0
11514  51A2 20 73 65 63 
11514  51A6 74 69 6F 6E 
11514  51AA 20 65 6E 64 
11514  51AE 20 6E 6F 74 
11514  51B2 20 66 6F 75 
11514  51B6 6E 64 2E 00 
11515  51BA 55 6E 65 78 _s34: .db "Unexpected directive.", 0
11515  51BE 70 65 63 74 
11515  51C2 65 64 20 64 
11515  51C6 69 72 65 63 
11515  51CA 74 69 76 65 
11515  51CE 2E 00 
11516  51D0 44 6F 6E 65 _s35: .db "Done.\n\n", 0
11516  51D4 2E 0A 0A 00 
11517  51D8 50 72 6F 67 _s36: .db "Prog Offset: %x\n", 0
11517  51DC 20 4F 66 66 
11517  51E0 73 65 74 3A 
11517  51E4 20 25 78 0A 
11517  51E8 00 
11518  51E9 50 72 6F 67 _s37: .db "Prog value : %c\n", 0
11518  51ED 20 76 61 6C 
11518  51F1 75 65 20 3A 
11518  51F5 20 25 63 0A 
11518  51F9 00 
11519  51FA 54 6F 6B 65 _s38: .db "Token      : %s\n", 0
11519  51FE 6E 20 20 20 
11519  5202 20 20 20 3A 
11519  5206 20 25 73 0A 
11519  520A 00 
11520  520B 54 6F 6B 20 _s39: .db "Tok        : %d\n", 0
11520  520F 20 20 20 20 
11520  5213 20 20 20 3A 
11520  5217 20 25 64 0A 
11520  521B 00 
11521  521C 54 6F 6B 74 _s40: .db "Toktype    : %d\n", 0
11521  5220 79 70 65 20 
11521  5224 20 20 20 3A 
11521  5228 20 25 64 0A 
11521  522C 00 
11522  522D 53 74 72 69 _s41: .db "StringConst: %s\n", 0
11522  5231 6E 67 43 6F 
11522  5235 6E 73 74 3A 
11522  5239 20 25 73 0A 
11522  523D 00 
11523  523E 50 43 20 20 _s42: .db "PC         : %x\n", 0
11523  5242 20 20 20 20 
11523  5246 20 20 20 3A 
11523  524A 20 25 78 0A 
11523  524E 00 
11524  524F 0A 41 73 73 _s43: .db "\nAssembly complete.\n", 0
11524  5253 65 6D 62 6C 
11524  5257 79 20 63 6F 
11524  525B 6D 70 6C 65 
11524  525F 74 65 2E 0A 
11524  5263 00 
11525  5264 50 72 6F 67 _s44: .db "Program size: %d\n", 0
11525  5268 72 61 6D 20 
11525  526C 73 69 7A 65 
11525  5270 3A 20 25 64 
11525  5274 0A 00 
11526  5276 4C 69 73 74 _s45: .db "Listing: \n", 0
11526  527A 69 6E 67 3A 
11526  527E 20 0A 00 
11527  5281 61 00       _s46: .db "a", 0
11528  5283 61 6C 00    _s47: .db "al", 0
11529  5286 61 68 00    _s48: .db "ah", 0
11530  5289 62 00       _s49: .db "b", 0
11531  528B 62 6C 00    _s50: .db "bl", 0
11532  528E 62 68 00    _s51: .db "bh", 0
11533  5291 63 00       _s52: .db "c", 0
11534  5293 63 6C 00    _s53: .db "cl", 0
11535  5296 63 68 00    _s54: .db "ch", 0
11536  5299 64 00       _s55: .db "d", 0
11537  529B 64 6C 00    _s56: .db "dl", 0
11538  529E 64 68 00    _s57: .db "dh", 0
11539  52A1 67 00       _s58: .db "g", 0
11540  52A3 67 6C 00    _s59: .db "gl", 0
11541  52A6 67 68 00    _s60: .db "gh", 0
11542  52A9 70 63 00    _s61: .db "pc", 0
11543  52AC 73 70 00    _s62: .db "sp", 0
11544  52AF 62 70 00    _s63: .db "bp", 0
11545  52B2 73 69 00    _s64: .db "si", 0
11546  52B5 64 69 00    _s65: .db "di", 0
11547  52B8 77 6F 72 64 _s66: .db "word", 0
11547  52BC 00 
11548  52BD 62 79 74 65 _s67: .db "byte", 0
11548  52C1 00 
11549  52C2 63 6D 70 73 _s68: .db "cmpsb", 0
11549  52C6 62 00 
11550  52C8 6D 6F 76 73 _s69: .db "movsb", 0
11550  52CC 62 00 
11551  52CE 73 74 6F 73 _s70: .db "stosb", 0
11551  52D2 62 00 
11552  52D4 64 65 66 69 _s71: .db "define", 0
11552  52D8 6E 65 00 
11553  52DB 4C 61 62 65 _s72: .db "Label does not exist: ", 0
11553  52DF 6C 20 64 6F 
11553  52E3 65 73 20 6E 
11553  52E7 6F 74 20 65 
11553  52EB 78 69 73 74 
11553  52EF 3A 20 00 
11554  52F2 43 6C 6F 73 _s73: .db "Closing single quotes expected.", 0
11554  52F6 69 6E 67 20 
11554  52FA 73 69 6E 67 
11554  52FE 6C 65 20 71 
11554  5302 75 6F 74 65 
11554  5306 73 20 65 78 
11554  530A 70 65 63 74 
11554  530E 65 64 2E 00 
11555  5312 44 6F 75 62 _s74: .db "Double quotes expected", 0
11555  5316 6C 65 20 71 
11555  531A 75 6F 74 65 
11555  531E 73 20 65 78 
11555  5322 70 65 63 74 
11555  5326 65 64 00 
11556  5329 54 4F 4B 45 _s75: .db "TOKEN ERROR. Prog: %x\n", 0
11556  532D 4E 20 45 52 
11556  5331 52 4F 52 2E 
11556  5335 20 50 72 6F 
11556  5339 67 3A 20 25 
11556  533D 78 0A 00 
11557  5340 50 72 6F 67 _s76: .db "ProgVal: %x", 0
11557  5344 56 61 6C 3A 
11557  5348 20 25 78 00 
11558  534C 0A 20 54 65 _s77: .db "\n Text after prog: %s\n", 0
11558  5350 78 74 20 61 
11558  5354 66 74 65 72 
11558  5358 20 70 72 6F 
11558  535C 67 3A 20 25 
11558  5360 73 0A 00 
11559  5363 0A 45 72 72 _s78: .db "\nError: %s\n", 0
11559  5367 6F 72 3A 20 
11559  536B 25 73 0A 00 
11560  536F 0A 45 72 72 _s79: .db "\nError: %s %s\n", 0
11560  5373 6F 72 3A 20 
11560  5377 25 73 20 25 
11560  537B 73 0A 00 
11561  537E 43 61 6E 6E _s80: .db "Cannot push prog. Stack overflow.", 0
11561  5382 6F 74 20 70 
11561  5386 75 73 68 20 
11561  538A 70 72 6F 67 
11561  538E 2E 20 53 74 
11561  5392 61 63 6B 20 
11561  5396 6F 76 65 72 
11561  539A 66 6C 6F 77 
11561  539E 2E 00 
11562  53A0 43 61 6E 6E _s81: .db "Cannot pop prog. Stack overflow.", 0
11562  53A4 6F 74 20 70 
11562  53A8 6F 70 20 70 
11562  53AC 72 6F 67 2E 
11562  53B0 20 53 74 61 
11562  53B4 63 6B 20 6F 
11562  53B8 76 65 72 66 
11562  53BC 6C 6F 77 2E 
11562  53C0 00 
11563  53C1 55 6E 65 78 _s82: .db "Unexpected format in printf.", 0
11563  53C5 70 65 63 74 
11563  53C9 65 64 20 66 
11563  53CD 6F 72 6D 61 
11563  53D1 74 20 69 6E 
11563  53D5 20 70 72 69 
11563  53D9 6E 74 66 2E 
11563  53DD 00 
11564  53DE 45 72 72 6F _s83: .db "Error: Unknown argument type.\n", 0
11564  53E2 72 3A 20 55 
11564  53E6 6E 6B 6E 6F 
11564  53EA 77 6E 20 61 
11564  53EE 72 67 75 6D 
11564  53F2 65 6E 74 20 
11564  53F6 74 79 70 65 
11564  53FA 2E 0A 00 
11565  53FD             
11566  53FD FF 53       _heap_top: .dw _heap
11567  53FF 00          _heap: .db 0
11568  5400             ; --- END DATA SEGMENT
11569  5400             
11570  5400             .end
tasm: Number of errors = 0
